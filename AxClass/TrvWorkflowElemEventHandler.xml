<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvWorkflowElemEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TrvWorkflowElemEventHandler</c> class implements <c>WorkflowEvent</c> interfaces.
/// </summary>
class TrvWorkflowElemEventHandler implements    WorkflowElementStartedEventHandler,
                                                WorkflowElementCompletedEventHandler,
                                                WorkflowElementCanceledEventHandler,
                                                WorkflowElementReturnedEventHandler,
                                                WorkflowElementDeniedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cancels a workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The workflow context of the workflow item that fired the event
    /// </param>
    public void canceled(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        WorkflowContext workflowContext;
        TrvExpenseTaxRecovery trvExpenseTaxRecovery;
        ;

        // Get the workflow context from _workflowElementEventArgs
        workflowContext = _workflowElementEventArgs.parmWorkflowContext();

        switch (workflowContext.parmTableId())
        {
            case tablenum(TrvCashAdvance):
                TrvCashAdvanceStateChangeMgr::updateCashAdvanceStatus(workflowContext.parmRecId(), TrvWorkflowCashAdvanceStatus::Created);
                break;

            case tablenum(TrvRequisitionTable):
                TrvRequisitionStateChangeManager::updateRequisitionStatus(workflowContext.parmRecId(), TrvRequisitionApprovalStatus::Create);
                break;

            case tablenum(TrvExpenseTaxRecovery):
                select forupdate firstonly trvExpenseTaxRecovery where trvExpenseTaxRecovery.RecId == workflowContext.parmRecId();

                if (trvExpenseTaxRecovery.RecId)
                {
                    ttsbegin;
                    trvExpenseTaxRecovery.Status = TrvTaxRecoveryStatus::NotSubmitted;
                    trvExpenseTaxRecovery.doUpdate();
                    ttscommit;
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the workflow context of the workflow item that fired the event and sets the approval status to
    ///    approved.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The <paramref name="_workflowElementEventArgs" /> is used to get the workflow context of the
    ///    workflow item that fired the event.
    /// </param>
    /// <remarks>
    ///    This method is called when an Approve action is applied to a workflow item.
    /// </remarks>
    public void completed(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        WorkflowContext workflowContext;

        // Get the workflow context from _workflowElementEventArgs
        workflowContext = _workflowElementEventArgs.parmWorkflowContext();

        switch (workflowContext.parmTableId())
        {
            case tablenum(TrvRequisitionTable):
                TrvRequisitionStateChangeManager::updateRequisitionStatus(workflowContext.parmRecId(), TrvRequisitionApprovalStatus::Approved);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>denied</Name>
				<Source><![CDATA[
    public void denied(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        WorkflowContext workflowContext;
        TrvExpenseTaxRecovery trvExpenseTaxRecovery;

        workflowContext = _workflowElementEventArgs.parmWorkflowContext();

        switch (workflowContext.parmTableId())
        {
            case tablenum(TrvExpenseTaxRecovery):
                select forupdate firstonly trvExpenseTaxRecovery where trvExpenseTaxRecovery.RecId == workflowContext.parmRecId();

                if (trvExpenseTaxRecovery.RecId)
                {
                    ttsbegin;
                    trvExpenseTaxRecovery.Status = TrvTaxRecoveryStatus::Denied;
                    trvExpenseTaxRecovery.doUpdate();
                    ttscommit;
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returned</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the workflow context of the workflow item that fired the event and sets the approval status to
    ///    returned.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The <paramref name="_workflowElementEventArgs" /> is used to get the workflow context of the
    ///    workflow item that fired the event.
    /// </param>
    /// <remarks>
    ///    This method is called when a Reject action is applied to a workflow item.
    /// </remarks>
    public void returned(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        WorkflowContext         workflowContext;
        TrvExpenseTaxRecovery   trvExpenseTaxRecovery;
        TrvPolicyViolationsLog  policyLog;

        workflowContext = _workflowElementEventArgs.parmWorkflowContext();

        switch (workflowContext.parmTableId())
        {
            case tableNum(TrvCashAdvance):
                TrvCashAdvanceStateChangeMgr::updateCashAdvanceStatus(workflowContext.parmRecId(), TrvWorkflowCashAdvanceStatus::Returned);
                break;

            case tableNum(TrvRequisitionTable):
                TrvRequisitionStateChangeManager::updateRequisitionStatus(workflowContext.parmRecId(), TrvRequisitionApprovalStatus::Returned);
                update_recordset policyLog setting Action = TrvWorkflowAction::Return
                    where policyLog.Header == workflowContext.parmRecId()
                       && (policyLog.Action == TrvWorkflowAction::Submit || policyLog.Action == TrvWorkflowAction::Resubmit)
                       && policyLog.PolicyType == SysPolicyTypeEnum::TrvRequisitionPolicy;
                
                TrvWorkflowUtilities::clearPolicyJustifications(_workflowElementEventArgs.parmWorkflowContext(),
                                                        _workflowElementEventArgs.parmWorkflowContext().parmRecId(),
                                                        TrvPolicyViolationJustificationTypeEnum::TrvReqHeader);
                break;

            case tableNum(TrvExpenseTaxRecovery):
                select forupdate firstonly trvExpenseTaxRecovery where trvExpenseTaxRecovery.RecId == workflowContext.parmRecId();

                if (trvExpenseTaxRecovery.RecId)
                {
                    ttsbegin;
                    trvExpenseTaxRecovery.Status = TrvTaxRecoveryStatus::Returned;
                    trvExpenseTaxRecovery.doUpdate();
                    ttscommit;
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
/// <summary>
    ///    Gets the workflow context of the workflow item that fired the event and sets the status to pending.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The <paramref name="_workflowElementEventArgs" /> is used to get the workflow context of the
    ///    workflow item that fired the event.
    /// </param>
    /// <remarks>
    ///    This method is called when a start event fires for a workflow item.
    /// </remarks>
    public void started(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        WorkflowContext 	workflowContext;
        TrvExpenseTaxRecovery   trvExpenseTaxRecovery;
        TrvExpTable             trvExpTable;
        TrvExpTrans             trvExpTrans;
        TrvRequisitionTable     trvRequisitionTable;
        TrvRequisitionLine      trvRequisitionLine;

        // Get the workflow context from _workflowElementEventArgs
        workflowContext = _workflowElementEventArgs.parmWorkflowContext();

        switch (workflowContext.parmTableId())
        {
            case tablenum(TrvCashAdvance):
                TrvCashAdvanceStateChangeMgr::updateCashAdvanceStatus(workflowContext.parmRecId(), TrvWorkflowCashAdvanceStatus::Pending);
                break;

            case tablenum(TrvRequisitionTable):
                TrvRequisitionStateChangeManager::updateRequisitionStatus(workflowContext.parmRecId(), TrvRequisitionApprovalStatus::Pending);

                select firstonly ApprovalStatus from trvRequisitionTable where trvRequisitionTable.RecId == workflowContext.parmRecId();
                if (trvRequisitionTable.ApprovalStatus == TrvRequisitionApprovalStatus::Pending)
                {
                    TrvPolicyEvalEngine::deleteNotNeededJustifications(workflowContext.parmRecId(), SysPolicyTypeEnum::TrvRequisitionPolicy, true);
                    while select RecId from trvRequisitionLine where trvRequisitionLine.TrvRequisitionTable == workflowContext.parmRecId()
                    {
                        TrvPolicyEvalEngine::deleteNotNeededJustifications(trvRequisitionLine.RecId, SysPolicyTypeEnum::TrvRequisitionPolicy);
                    }
                    TrvPolicyEvalEngine::transferToLog(workflowContext.parmRecId(), SysPolicyTypeEnum::TrvRequisitionPolicy, TrvWorkflowAction::Submit);
                }
                break;

            case tableNum(TrvExpTable):
                select firstonly ApprovalStatus,RecId from trvExpTable where trvExpTable.RecId == workflowContext.parmRecId();
                if (trvExpTable.ApprovalStatus == TrvAppStatus::Pending)
                {
                    TrvPolicyEvalEngine::deleteNotNeededJustifications(trvExpTable.RecId, SysPolicyTypeEnum::TrvExpensePolicy, true);
                    TrvPolicyEvalEngine::transferToLog(workflowContext.parmRecId(), SysPolicyTypeEnum::TrvExpensePolicy, TrvWorkflowAction::Submit);
                }
                break;

            case tablenum(TrvExpenseTaxRecovery):
                select forupdate firstonly trvExpenseTaxRecovery where trvExpenseTaxRecovery.RecId == workflowContext.parmRecId();

                if (trvExpenseTaxRecovery.RecId)
                {
                    ttsbegin;
                    trvExpenseTaxRecovery.Status = TrvTaxRecoveryStatus::PendingApproval;
                    trvExpenseTaxRecovery.doUpdate();
                    ttscommit;
                }

                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>