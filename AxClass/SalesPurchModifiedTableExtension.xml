<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchModifiedTableExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesPurchModifiedTableExtension extends SysTableExtension
{
    private boolean isRecursiveDefaultingEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initRecursive</Name>
				<Source><![CDATA[
    protected void initRecursive()
    {
        isRecursiveDefaultingEnabled = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesPurchModifiedTableExtension construct()
    {
        var extension = new SalesPurchModifiedTableExtension();
        extension.initRecursive();
        return extension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newNonRecursive</Name>
				<Source><![CDATA[
    public static SalesPurchModifiedTableExtension newNonRecursive()
    {
        var extension = SalesPurchModifiedTableExtension::construct();
        extension.initNonRecursive();
        return extension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNonRecursive</Name>
				<Source><![CDATA[
    protected void initNonRecursive()
    {
        isRecursiveDefaultingEnabled = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaulter</Name>
				<Source><![CDATA[
    public SalesPurchIModifiedDefaulter getDefaulter(Common _record)
    {
        PurchTable purchTable;
        PurchLine purchLine;
        SalesTable salesTable;
        SalesLine salesLine;
        SalesQuotationTable salesQuotationTable;
        SalesQuotationLine salesQuotationLine;

        switch (_record.TableId)
        {
            case tableNum(SalesTable): salesTable = _record; return salesTable.type();
            case tableNum(SalesLine): salesLine = _record; return salesLine.type();
            case tableNum(PurchTable): purchTable = _record; return purchTable.type();
            case tableNum(PurchLine): purchLine = _record; return purchLine.type();
            case tableNum(SalesQuotationTable): salesQuotationTable = _record; return salesQuotationTable.type();
            case tableNum(salesQuotationLine): salesQuotationLine = _record; return salesQuotationLine.type();
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaulterValidator</Name>
				<Source><![CDATA[
    private SalesPurchIModifiedDefaulterValidator getDefaulterValidator(Common _record)
    {
        SalesLine salesLine;
        PurchLine purchLine;
        SalesQuotationLine salesQuotationLine;

        switch (_record.TableId)
        {
            case tableNum(SalesLine): salesLine = _record; return salesLine.type();
            case tableNum(PurchLine): purchLine = _record; return purchLine.type();
            case tableNum(salesQuotationLine): salesQuotationLine = _record; return salesQuotationLine.type();
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preserveOriginalValues</Name>
				<Source><![CDATA[
    private void preserveOriginalValues(List _sourceFields, Set _inputFields, Set _mergableFields, Common _record, Common _copy)
    {
        ListIterator copyIterator = new ListIterator(_sourceFields);

        // Copy back the input fields to ensure that defaulting doesn't override them.
        while (copyIterator.more())
        {
            fieldId copyField = copyIterator.value();

            if (_inputFields.in(copyField) && !_mergableFields.in(copyField))
            {
                _record.(copyField) = _copy.(copyField);
            }

            copyIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateValues</Name>
				<Source><![CDATA[
    protected void validateValues(Set _inputFields, Common _record, Common _copy, FieldId _validatedFieldId)
    {
        SalesPurchIModifiedDefaulterValidator validator = this.getDefaulterValidator(_record);

        Set validationFields;

        if (validator)
        {
            validationFields = validator.validationFields();
        }

        if (validationFields && validationFields.in(_validatedFieldId))
        {
            if (_inputFields.in(_validatedFieldId) && validationFields.in(_validatedFieldId))
            {
                if (_record.(_validatedFieldId) != _copy.(_validatedFieldId))
                {
                    throw error(System.String::Format("@SCM:SalesPurchEntitiyImportError", tableId2Name(_record.TableId), fieldId2Name(_record.TableId,_validatedFieldId), fieldId2PName(_record.TableId,_validatedFieldId), _copy.(_validatedFieldId), _record.(_validatedFieldId)));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDependentAddressField</Name>
				<Source><![CDATA[
    private void addDependentAddressField(Common _record, Set _inputFields)
    {
        PurchTable purchTable;
        PurchLine purchLine;
        SalesTable salesTable;
        SalesLine salesLine;
        SalesQuotationTable salesQuotationTable;
        SalesQuotationLine salesQuotationLine;
        FieldId deliveryPostalAddressFieldId;
        FieldId deliveryDeliveryName;

        switch (_record.TableId)
        {
            case tableNum(PurchTable) : 
                deliveryPostalAddressFieldId = fieldNum(PurchTable, DeliveryPostalAddress);
                deliveryDeliveryName = fieldNum(PurchTable, DeliveryName);
                break;
            case tableNum(PurchLine) :
                deliveryPostalAddressFieldId = fieldNum(PurchLine, DeliveryPostalAddress);
                deliveryDeliveryName = fieldNum(PurchLine, DeliveryName);
                break;
            case tableNum(SalesTable) :
                deliveryPostalAddressFieldId = fieldNum(SalesTable, DeliveryPostalAddress);
                deliveryDeliveryName = fieldNum(SalesTable, DeliveryName);
                break;
            case tableNum(SalesLine) :
                deliveryPostalAddressFieldId = fieldNum(SalesLine, DeliveryPostalAddress);
                deliveryDeliveryName = fieldNum(SalesLine, DeliveryName);
                break;
            case tableNum(SalesQuotationTable) :
                deliveryPostalAddressFieldId = fieldNum(SalesQuotationTable, DeliveryPostalAddress);
                deliveryDeliveryName = fieldNum(SalesQuotationTable, DeliveryName);
                break;
            case tableNum(salesQuotationLine) :
                deliveryPostalAddressFieldId = fieldNum(salesQuotationLine, DeliveryPostalAddress);
                deliveryDeliveryName = fieldNum(salesQuotationLine, DeliveryName);
                break;
            default :
                break;
        }

        if (deliveryPostalAddressFieldId
            && deliveryDeliveryName
            && _inputFields.in(deliveryPostalAddressFieldId)
            && !_inputFields.in(deliveryDeliveryName)
            && _record.isFieldSet(deliveryDeliveryName))
        {
            _inputFields.add(deliveryDeliveryName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    public void defaultRow(Common record)
    {
        SysDictTable dictTable = new SysDictTable(record.TableId);

        TradeInstrumentationLogger tradeIntrumentationLogger = TradeInstrumentationLogger::createLogger(dictTable.name());

        using (var activityContext = tradeIntrumentationLogger.tradeDefaultingActivities().defaultRow(record))
        {
            Common copy = dictTable.makeRecord();
            copy.data(record);

            SalesPurchIModifiedDefaulter defaulter = this.getDefaulter(record);

            Set mergableFields = defaulter.mergableFields();
            if (!mergableFields)
            {
                mergableFields = new Set(Types::Integer);
            }

            Set inputFields = new Set(Types::Integer);
            Common origRecord = record.orig();
            FieldId fieldId = dictTable.fieldNext(0, TableScope::IncludeBaseTables);

            while (fieldId && ! isSysId(fieldId))
            {
                if (record.isFieldSet(fieldId) && (origRecord.RecId == 0 || record.(fieldId) != origRecord.(fieldId)))
                {
                    inputFields.add(fieldId);
                }

                fieldId = dictTable.fieldNext(fieldId, TableScope::IncludeBaseTables);
            }

            this.addDependentAddressField(record, inputFields);

            List sourceFields = defaulter.defaultingFields();

            FieldId setPriceDiscCalcTriggeringFieldId;
            if (record.TableId == tableNum(SalesLine) || record.TableId == tableNum(PurchLine))
            {
                setPriceDiscCalcTriggeringFieldId = record.type().findPriceDiscTriggeringFieldWithLargestIndex(inputFields);
            }

            Set coveredFields = new Set(Types::Integer);
            defaulter.initDefaults();
            defaulter.mergeChanges();
            this.preserveOriginalValues(sourceFields, inputFields, mergableFields, record, copy);
        
            int fieldCount = sourceFields.elements();
            for (int i = 0; i < fieldCount; i++)
            {
                boolean shouldContinue = false;

                ListIterator iterator = new ListIterator(sourceFields);

                while (iterator.more())
                {
                    fieldId = iterator.value();

                    if (((isRecursiveDefaultingEnabled && record.isFieldSet(fieldId))
                            || (!isRecursiveDefaultingEnabled && inputFields.in(fieldId)))
                        && !coveredFields.in(fieldId))
                    {
                        // Only trigger setPriceDisc on the designated setPriceDiscCalcTriggeringFieldId.
                        if (record.TableId == tableNum(SalesLine))
                        {
                            SalesLine salesLine = record;
                            if (salesLine.SkipPriceDiscCalcOnImport && SalesOrderLineEntitySkipCalculationFlight::instance().isEnabled())
                            {
                                salesLine.SkipPriceDiscCalc = true;
                            }
                            else
                            {
                                salesLine.SkipPriceDiscCalc = (setPriceDiscCalcTriggeringFieldId == fieldId
                                    || (fieldId == fieldNum(SalesLine, ItemId)
                                        && SalesPurchLineEntityApplyPriceDiscParameterFlight::instance().isEnabled()
                                        && salesLine.SkipPriceDiscCalcOnImport))
                                    ? NoYes::No : NoYes::Yes;
                            }
                        } 
                        else if (record.TableId == tableNum(PurchLine))
                        {
                            PurchLine purchLine = record;
                            purchLine.SkipPriceDiscCalc = (setPriceDiscCalcTriggeringFieldId == fieldId || fieldId == fieldNum(PurchLine, ItemId)) ? NoYes::No : NoYes::Yes;
                        }
                    
                        defaulter.defaultFromField(fieldId, inputFields.in(fieldId));
                        coveredFields.add(fieldId);

                        shouldContinue = isRecursiveDefaultingEnabled;

                        defaulter.mergeChanges();

                        this.validateValues(inputFields, record, copy, fieldId);
                        this.preserveOriginalValues(sourceFields, inputFields, mergableFields, record, copy);
                    }

                    iterator.next();
                }

                if (!shouldContinue)
                {
                    break;
                }
            }

            // Copy back all the explicitly named fields that were not used for defaulting.
            fieldId                   = dictTable.fieldNext(0, TableScope::IncludeBaseTables);

            while (fieldId && ! isSysId(fieldId))
            {
                if (inputFields.in(fieldId) && !mergableFields.in(fieldId) && !this.skipCopyBack(record, copy, fieldId))
                {
                    record.(fieldId) = copy.(fieldId);
                }

                fieldId = dictTable.fieldNext(fieldId, TableScope::IncludeBaseTables);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipCopyBack</Name>
				<Source><![CDATA[
    /// <summary>
    /// To skip copy back for sales line default dimension field.
    /// </summary>
    /// <param name = "_record">The record.</param>
    /// <param name = "_copy">The copy record.</param>
    /// <param name = "_fieldId">The field Id.</param>
    /// <returns>
    /// True, for sales line default dimension field.
    /// Others, return false.
    /// </returns>
    private boolean skipCopyBack(Common _record, Common _copy, FieldId _fieldId)
    {
        FieldId defaultDimFieldId = fieldNum(SalesLine, DefaultDimension);
        boolean ret = false;

        if(_record.TableId == tableNum(SalesLine) && (_fieldId == defaultDimFieldId && (_copy.(defaultDimFieldId) == 0 || _copy.(defaultDimFieldId) == null)))
        {
            ret = true;;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>