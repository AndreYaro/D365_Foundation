<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDocumentLineTypePhysical_VendIvc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendDocumentLineTypePhysical_VendIvc</c> class is used for validation and to apply default
/// values to invoice lines. It applies to the <c>VendInvoiceInfoLine</c> records.
/// </summary>
class VendDocumentLineTypePhysical_VendIvc extends VendDocumentLineTypePhysical
{
    #VendInvoiceFaults

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultInventTransId</Name>
				<Source><![CDATA[
    public void defaultInventTransId()
    {
        TradeInventTransId inventTransId;

        if (!vendDocumentLineMap.isFieldSet(this.mainStrategy().fieldNum(fieldNum(VendDocumentLineMap, InventTransId), vendDocumentLineMap.TableId)))
        {
            inventTransId = this.determineDefaultInventTransId();
            vendDocumentLineMap.InventTransId = inventTransId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInventTransId</Name>
				<Source><![CDATA[
    public TradeInventTransId determineDefaultInventTransId()
    {
        if (vendDocumentLineMap.VendDocumentLineMap::isNonPO())
        {
            return '';
        }

        return this.mainStrategy().purchLine().InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemId</Name>
				<Source><![CDATA[
    public void defaultItemId()
    {
        // do nothing since it is a required field
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCWQtys</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight purchase quantities that will be invoiced.
    /// </summary>
    /// <param name="_cwQty">
    /// The catch weight quantity that will be invoiced.
    /// </param>
    /// <returns>
    /// A container that contains the <c>PdsCWRemainBefore</c>, <c>PdsCWRemainAfter</c> and
    /// <c>PdsCWReceiveNow</c> values.
    /// </returns>
    public container determineDefaultCWQtys(PdsCWInventQty _cwQty = naReal())
    {
        PurchQuantity purchQuantity;
        PdsCWInventQty cwQty = (_cwQty != naReal() ? _cwQty : vendDocumentLineMap.PdsCWReceiveNow);
        VendDocumentLineType defaultingStrategy = this.mainStrategy();

        purchQuantity = PurchQuantity::construct(vendDocumentLineMap.Ordering);

        // User provides ReceiveNow, we will provide the rest of the Qty fields.
        return purchQuantity.pdsCWQtyInvent(defaultingStrategy.purchLine(), PurchUpdate::All, cwQty, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInventQtys</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the inventory quantities to be invoiced.
    /// </summary>
    /// <param name="_inventQty">
    ///    This parameter is not used.
    /// </param>
    /// <returns>
    ///    A container with the <c>RemainBeforeInvent</c>, <c>RemainAfterInvent</c> and <c>InventNow</c>
    ///    values.
    /// </returns>
    public container determineDefaultInventQtys(InventQty _inventQty = naReal())
    {
        VendDocumentLineType defaultingStrategy = this.mainStrategy();

        if (vendDocumentLineMap.isNonPO())
        {
            return [0.0, 0.0, 0.0];
        }

        PurchQuantity purchQuantity = PurchQuantity::construct(vendDocumentLineMap.Ordering);
        Debug::assert(purchQuantity != null);

        PurchLine purchLine = defaultingStrategy.purchLine();
        
        // Convert to Inventory U of M before we request the Inventory Quantities.
        InventQty inventQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
            purchLine.ItemId,
            purchLine.InventDimId,
            vendDocumentLineMap.ReceiveNow,
            purchLine.PurchUnit,
            purchLine.inventTable().inventUnitId(),
            NoYes::Yes);

        return purchQuantity.qtyInvent(defaultingStrategy.purchLine(), PurchUpdate::All, inventQty, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchQtys</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the purchase quanities to be invoiced.
    /// </summary>
    /// <param name="_purchQty">
    ///    The quantity to be invoiced; optional.
    /// </param>
    /// <returns>
    ///    A container with the <c>RemainBefore</c>, <c>RemainAfter</c> and <c>ReceiveNow</c> values.
    /// </returns>
    public container determineDefaultPurchQtys(PurchQty _purchQty = naReal())
    {
        PurchQuantity purchQuantity;
        PurchQty purchQty = (_purchQty != naReal() ? _purchQty : vendDocumentLineMap.ReceiveNow);
        VendDocumentLineType defaultingStrategy = this.mainStrategy();

        if (vendDocumentLineMap.isNonPO())
        {
            return [purchQty, 0.0, 0.0];
        }

        purchQuantity = PurchQuantity::construct(vendDocumentLineMap.Ordering);
        Debug::assert(purchQuantity != null);

        // User provides ReceiveNow, we will provide the rest of the Qty fields.
        return purchQuantity.qtyPurch(defaultingStrategy.purchLine(), PurchUpdate::All, purchQty, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the line amount, the line prices, and discounts.
    /// </summary>
    /// <remarks>
    ///    If the line amount is supplied, the line prices and discounts are set to zero; otherwise the line
    ///    amount is calculated.
    /// </remarks>
    public void initPrice()
    {
        AmountCur lineAmount;
        VendInvoiceInfoLine localActiveLine = vendDocumentLineMap;
        VendDocumentLineType defaultingStrategy = this.mainStrategy();

        if (defaultingStrategy.isLineAmountSet())
        {
            this.zeroPrices();
            vendDocumentLineMap.LineAmount = CurrencyExchange::round(localActiveLine.LineAmount, localActiveLine.CurrencyCode);
            return;
        }

        if (defaultingStrategy.isPurchPriceSet())
        {
            defaultingStrategy.defaultAmountsForLine();

            lineAmount = localActiveLine.calcLineAmountForced();
            vendDocumentLineMap.LineAmount = lineAmount;
            return;
        }

        if (defaultingStrategy.isReceiveNowSet())
        {
            if (vendDocumentLineMap.PurchPrice == 0 && vendDocumentLineMap.LineAmount == 0)
            {
                defaultingStrategy.defaultAmountsForLine();

                lineAmount = localActiveLine.calcLineAmountForced();
                vendDocumentLineMap.LineAmount = lineAmount;
            }
            else if (vendDocumentLineMap.PurchPrice != 0)
            {
                lineAmount = localActiveLine.calcLineAmountForced();
                vendDocumentLineMap.LineAmount = lineAmount;
            }
            else
            {
                this.zeroPrices();
            }
            return;
        }

        if (vendDocumentLineMap.LineAmount != 0.0)
        {
            this.zeroPrices();
        }
        else
        {
            defaultingStrategy.defaultAmountsForLine();

            lineAmount = localActiveLine.calcLineAmountForced();
            vendDocumentLineMap.LineAmount = lineAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceNum</Name>
				<Source><![CDATA[
    private str invoiceNum()
    {
        return this.mainStrategy().vendDocumentTableMap().Num;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventTransIdForInvoice</Name>
				<Source><![CDATA[
    public boolean validateInventTransIdForInvoice()
    {
        if (vendDocumentLineMap.isNonPO())
        {
            // No need to validate non-PO lines
            return true;
        }

        if (this.mainStrategy().purchLine().InventTransId != vendDocumentLineMap.InventTransId)
        {
            checkFailed(
                strFmt("@SYS128578",
                    vendDocumentLineMap.ItemId,
                    this.invoiceNum(),
                    fieldStr(VendInvoiceInfoLine, InventTransId)));

            return false;
        }

        if (this.mainStrategy().purchLine().PurchId != vendDocumentLineMap.OrigPurchId)
        {
            checkFailed(
                strFmt("@SYS129283",
                    vendDocumentLineMap.InventTransId));

            return false;
        }

        if (this.mainStrategy().purchLine().PurchStatus == PurchStatus::Invoiced)
        {
            checkFailed(
                strFmt("@SYS129025",
                    vendDocumentLineMap.InventTransId,
                    vendDocumentLineMap.OrigPurchId,
                    this.invoiceNum()));

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemIdForInvoice</Name>
				<Source><![CDATA[
    public boolean validateItemIdForInvoice()
    {
        ItemId parmItemId;
        ItemId itemId;

        if (vendDocumentLineMap.isNonPO())
        {
            // No need to validate non-PO lines
            return true;
        }

        parmItemId = vendDocumentLineMap.ItemId;
        itemId = this.mainStrategy().purchLine().ItemId;

        if (parmItemId != itemId)
        {
            AifFault::checkFailedLogFault(
                strFmt("@SYS128579",
                    parmItemId,
                    this.invoiceNum(),
                    vendDocumentLineMap.InventTransId,
                    itemId),
                #ItemIdDoesNotMatchCorrespondingPo);

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReceiveNowForInvoice</Name>
				<Source><![CDATA[
    public boolean validateReceiveNowForInvoice()
    {
        if (vendDocumentLineMap.ReceiveNow == 0.0)
        {
            checkFailed(
                strFmt("@SYS128580",
                    vendDocumentLineMap.ItemId,
                    this.invoiceNum(),
                    vendDocumentLineMap.InventTransId));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>zeroPrices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Zero out price data for when user supplies a LineAmount during defaulting
    /// </summary>
    private void zeroPrices()
    {
        vendDocumentLineMap.PurchPrice = 0.0;
        vendDocumentLineMap.LineDisc = 0.0;
        vendDocumentLineMap.LinePercent = 0.0;
        vendDocumentLineMap.MultiLnDisc = 0.0;
        vendDocumentLineMap.MultiLnPercent = 0.0;
        vendDocumentLineMap.PurchMarkup = 0.0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>