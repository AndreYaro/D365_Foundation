<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HrpWorkerLimit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>HrpWorkerLimit</c> class manages the limits that are associated with workers.
/// </summary>
public class HrpWorkerLimit
{
    HRPAuthorityBasis authorityBasis;
    boolean isRequestRequired;
    boolean isEmployeeOnlyGetSigningLimits;
    boolean isWorkerAnEmployee;
    HRPApprovedLimit approvedLimit;
    AmountCur approvedAmount;
    CurrencyCode approvedCurrency;
    RefRecId signingLimitRequestRecId, approvedLimitAmountRecId;
    HcmPositionId workerPositionId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getActiveDefaultSLRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the rule details for an active default signing limit that are configured for the
    ///    specified parameters.
    /// </summary>
    /// <param name="_limitType">
    ///    A <c>HRPLimitType</c> enumeration value.
    /// </param>
    /// <param name="_limitDocumentId">
    ///    The record ID of a <c>HRPLimitDocument</c> record.
    /// </param>
    /// <param name="_positionId">
    ///    The position ID from the <c>HcmPosition</c> table.
    /// </param>
    /// <returns>
    ///    A container that contains the <c>AmountCur</c>, <c>CurrencyCode</c>, and <c>dataAreaId</c>
    ///    enumeration values.
    /// </returns>
    public container getActiveDefaultSLRule(HRPLimitType _limitType, RefRecId _limitDocumentId, HcmPositionId _positionId)
    {
        HrpWorkerLimitParameters parameters = this.createActiveDefaultSigningLimitRuleParameters(_limitType, _limitDocumentId, _positionId);

        return this.getActiveDefaultSigningLimitRuleFromParameters(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActiveDefaultSigningLimitRuleParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the contract for an active default signing limit that are configured for the
    ///    specified parameters.
    /// </summary>
    /// <param name="_limitType">
    ///    A <c>HRPLimitType</c> enumeration value.
    /// </param>
    /// <param name="_limitDocumentId">
    ///    The record ID of a <c>HRPLimitDocument</c> record.
    /// </param>
    /// <param name="_positionId">
    ///    The position ID of the <c>HcmPosition</c> table.
    /// </param>
    /// <returns>
    ///    A <c>HrpWorkerLimitParameters</c> instance.
    /// </returns>
    [Hookable(true)]
    protected HrpWorkerLimitParameters createActiveDefaultSigningLimitRuleParameters(
        HRPLimitType _limitType,
        RefRecId _limitDocumentId,
        HcmPositionId _positionId)
    {
        HrpWorkerLimitParameters parameters = HrpWorkerLimitParameters::construct();
        parameters.LimitType = _limitType;
        parameters.LimitDocumentId = _limitDocumentId;
        parameters.PositionId = _positionId;

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveDefaultSigningLimitRuleFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the rule details for an active default signing limit that are configured for the
    ///    specified parameters.
    /// </summary>
    /// <param name="_parameters">
    ///    A <c>HrpWorkerLimitParameters</c> instance which contains the parameters used to get the rule details for an active default signing limit.
    /// </param>
    /// <returns>
    ///    A container that contains the <c>AmountCur</c>, <c>CurrencyCode</c>, and <c>dataAreaId</c>
    ///    enumeration values.
    /// </returns>
    [Hookable(true)]
    protected container getActiveDefaultSigningLimitRuleFromParameters(HrpWorkerLimitParameters _parameters)
    {
        SysPolicyRuleType       policyRuleType;
        int64                   authBaseRecId;
        container               signingLimits;
        HcmPosition             position;
        HRPLimitParameters      limitParam;
        int                     arrayLength;
        Array                   ruleIdList = new Array(Types::Int64);

        signingLimits = connull();

        select firstonly SigningLimitBasedOn from limitParam;
        authorityBasis = limitParam.SigningLimitBasedOn;

        //fetch compensation grade/job recid
        select firstonly RecId from position where position.PositionId == _parameters.PositionId;
        authBaseRecId = this.getAuthBaseRecId(authorityBasis, position.RecId);

        policyRuleType = SysPolicyRuleType::findByRuleTypePolicyType(SysPolicyRuleTypeEnum::DefaultSigningLimit, SysPolicyTypeEnum::ApprovalPolicy);

        //fetch active policy rule
        ruleIdList = this.getActiveRuleIdList(policyRuleType.RecId);
        arrayLength = ruleIdList.lastIndex();

        //fetch active amount and default currency
        if (ruleIdList.lastIndex() >= 1)
        {
            if(!strLen(conPeek(signingLimits,2)))
            {
                for(int i = 1; i <= arrayLength; i++)
                {
                    if (this.paramGetSigningLimitBasedOn() == HRPAuthorityBasis::Job)
                    {
                        signingLimits = this.getDefaultLimitDetailsJob(authBaseRecId, ruleIdList.value(i), _parameters.LimitType, _parameters.LimitDocumentId);
                        if(strLen(conPeek(signingLimits,2)))
                        {
                            break;
                        }
                            
                    }
                    else if(this.paramGetSigningLimitBasedOn() == HRPAuthorityBasis::Compensation)
                    {
                        signingLimits = this.getDefaultLimitDetailsCompLevel(authBaseRecId, ruleIdList.value(i), _parameters.LimitType, _parameters.LimitDocumentId);
                        if(strLen(conPeek(signingLimits,2))) //Currency should not be empty string
                        {
                            break;
                        }
                            
                    }
                }

            }
        }

        return signingLimits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveLimitCurrencyRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the active currency rule details that are configured for the specified parameters.
    /// </summary>
    /// <returns>
    ///    A container that contains the <c>AmountCur</c>, <c>CurrencyCode</c>, and <c>dataAreaId</c>
    ///    enumeration values.
    /// </returns>
    public container getActiveLimitCurrencyRule()
    {
        SysPolicyRuleType   policyCurrencyRuleType;
        Array               currencyRuleID;
        container           currencyRule;

        currencyRule = connull();

        policyCurrencyRuleType = SysPolicyRuleType::findByRuleTypePolicyType(SysPolicyRuleTypeEnum::LimitCurrency, SysPolicyTypeEnum::ApprovalPolicy);

        //fetch active currency rule
        currencyRuleID = this.getActiveRuleIdList(policyCurrencyRuleType.RecId);

        //fetch currencyRule details
        if (currencyRuleID.lastIndex() > 0)
        {
            for(int i = 1; i<= currencyRuleID.lastIndex(); i++)
            {
                currencyRule = this.getLimitRequestCurrencyRule(currencyRuleID.value(i));
                if(strLen(conPeek(currencyRule,2)))
                {
                    break;
                }
            }
            
        }

        return currencyRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAuthBaseRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the job or compensation details for the specified authority basis and position ID.
    /// </summary>
    /// <param name="_authorityBasis">
    ///    The job or compensation level.
    /// </param>
    /// <param name="_positionId">
    ///    The position ID from a <c>HcmPosition</c> table.
    /// </param>
    /// <returns>
    ///    An <c>HRPAuthorityBasis</c> enumeration value that has values either job or compensation level.
    /// </returns>
    [Wrappable(true)]
    protected final recId getAuthBaseRecId(HRPAuthorityBasis _authorityBasis, RefRecId _positionId)
    {
        RefRecId basisRecId;

        if (_authorityBasis == HRPAuthorityBasis::Job)
        {
            basisRecId = this.getJobRecId(_positionId);
        }
        else
        {
            basisRecId = this.getCompensationLevelRecId(_positionId);
        }

        return basisRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJobRecId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final HcmJobRecId getJobRecId(HcmPositionRecId _positionRecId)
    {
        HcmPositionDetail positionDetail;
        HcmJob job;

        select firstonly RecId from job
            join RecId from positionDetail
                where positionDetail.Job == job.RecId
                    && positionDetail.Position == _positionRecId;

        return job.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompensationLevelRecId</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected HcmCompensationLevelRecId getCompensationLevelRecId(HcmPositionRecId _positionRecId)
    {
        HcmCompensationLevelRecId levelRecId;

        HcmJobRecId jobRecId = this.getJobRecId(_positionRecId);

        if (this.getNumberOfLevelsOnJob(jobRecId) == 1)
        {
            levelRecId = this.getLevelRecIdFromJobCompensation(jobRecId);
        }
        else
        {
            levelRecId = this.getLevelRecIdFromCompFixedEmpl(_positionRecId);
        }

        return levelRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfLevelsOnJob</Name>
				<Source><![CDATA[
    private int64 getNumberOfLevelsOnJob(HcmJobRecId _jobRecId)
    {
        HcmJobCompensation jobCompensation;

        select count(RecId) from jobCompensation
            where jobCompensation.Job == _jobRecId;

        return jobCompensation.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLevelRecIdFromJobCompensation</Name>
				<Source><![CDATA[
    private HcmCompensationLevelRecId getLevelRecIdFromJobCompensation(HcmJobRecId _jobRecId)
    {
        HcmJobCompensation jobCompensation;

        select firstonly CompensationLevel from jobCompensation
            where jobCompensation.Job == _jobRecId;

        return jobCompensation.CompensationLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLevelRecIdFromJobDetail</Name>
				<Source><![CDATA[
    private HcmCompensationLevelRecId getLevelRecIdFromJobDetail(HcmJobRecId _jobRecId)
    {
        HcmJobDetail jobDetail;

        select firstonly CompensationLevel from jobDetail
            where jobDetail.Job == _jobRecId;

        return jobDetail.CompensationLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLevelRecIdFromCompFixedEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the most recent fixed compensation record across all companies for the worker assigned to the position.
    /// </summary>
    /// <param name = "_positionRecId">The position for which to find the record.</param>
    /// <returns>
    /// The <c>HcmCompensationLevelRecId</c> on the most recent <c>HRMCompFixedEmpl</c> record that exists
    /// across all companies that relates to the worker assigned to position.
    /// </returns>
    private HcmCompensationLevelRecId getLevelRecIdFromCompFixedEmpl(HcmPositionRecId _positionRecId)
    {
        HRMCompFixedEmpl compFixedEmpl;

        unchecked (Uncheck::XDS | Uncheck::TableSecurityPermission)
        {
            date asOfDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            HcmWorkerRecId workerRecId = HcmPositionWorkerAssignment::findByPosition(_positionRecId).Worker;

            select firstonly crosscompany CompensationLevel from compFixedEmpl
                order by
                    compFixedEmpl.ValidFrom desc, 
                    compFixedEmpl.PlanId,
                    compFixedEmpl.LineNum
                where compFixedEmpl.Worker == workerRecId
                    && compFixedEmpl.Position == _positionRecId
                    && compFixedEmpl.ValidFrom <= asOfDate
                    && compFixedEmpl.ValidTo >= asOfDate
                    && compFixedEmpl.ValidFrom != compFixedEmpl.ValidTo;
        }

        return compFixedEmpl.CompensationLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveRuleId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the active rule of the specified rule type for the current company.
    /// </summary>
    /// <param name="_ruleType">
    /// The record ID of a <c>SysPolicyRuleType</c> record.
    /// </param>
    /// <returns>
    /// A record ID of a policy rule.
    /// </returns>
    private RefRecId getActiveRuleId(RefRecId _ruleType)
    {
        container   ouContainer;
        int64       orgID[2], orgID1[], leRecId, ouRecId, ruleID;
        Array       resultantRules;
        int         j = 1, k = 1, counter = 1;
        int         ouLen;
        boolean     ruleFound;

        ouContainer = connull();
        ruleFound = false;

        //fetch LE and OU details of the calling user
        //Getting LEs
        leRecId = CompanyInfo::current();
        orgID1[k] = leRecId;
        k++;
        // Getting OUs
        ouContainer = this.getOUs();
        ouLen = conlen(ouContainer);

        while ((j <= ouLen) && (ruleFound == false))
        {
            counter = 1;
            orgID[counter] = leRecId;
            ouRecId = conpeek(ouContainer,j);
            orgID1[k] = ouRecId;
            orgID[counter+1] = ouRecId;
            resultantRules = SysPolicies::getPolicyRuleIDs(orgID, _ruleType, SysPolicyTypeEnum::ApprovalPolicy, DateTimeUtil::minValue(), true);

            if (resultantRules.lastIndex()>=1)
            {
                ruleID = resultantRules.value(1);
                ruleFound = true;
            }
            k++;
            j++;
        }
        if (ruleFound == false)
        {
            ruleID = SysPolicies::getPolicyRuleID(orgID1, _ruleType, SysPolicyTypeEnum::ApprovalPolicy);

            if (ruleID > 0)
            {
                ruleFound = true;
            }
            else
            {
                ruleID = -1;
            }
        }

        return ruleID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveRuleIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the active rule of the specified rule type for the current company.
    /// </summary>
    /// <param name="_ruleType">
    /// The record ID of a <c>SysPolicyRuleType</c> record.
    /// </param>
    /// <returns>
    /// An array of policy rules.
    /// </returns>
    private Array getActiveRuleIdList(RefRecId _ruleType)
    {
        container   ouContainer;
        int64       orgID[2], orgID1[], leRecId, ouRecId, ruleID;
        int         j = 1, k = 1, counter = 1;
        boolean     ruleFound;

        ouContainer = connull();
        ruleFound = false;

        //fetch LE and OU details of the calling user
        //Getting LEs
        leRecId = CompanyInfo::current();
        orgID1[k] = leRecId;
        k++;
        // Getting OUs
        ouContainer = this.getOUs();

        Array       resultantRules;
        int         ouLen;
        ouLen = conlen(ouContainer);
        
        while ((j <= ouLen) && (ruleFound == false))
        {
            counter = 1;
            orgID[counter] = leRecId;
            ouRecId = conpeek(ouContainer,j);
            orgID1[k] = ouRecId;
            orgID[counter+1] = ouRecId;
            resultantRules = SysPolicies::getPolicyRuleIDs(orgID, _ruleType, SysPolicyTypeEnum::ApprovalPolicy, DateTimeUtil::minValue(), true);

            if (resultantRules.lastIndex()>=1)
            {
                ruleID = resultantRules.value(1);
                ruleFound = true;
            }
            k++;
            j++;
        }
        if (ruleFound == false)
        {
            resultantRules = SysPolicies::getPolicyRuleIDs(orgID1, _ruleType, SysPolicyTypeEnum::ApprovalPolicy, DateTimeUtil::minValue(), false , true);

            if (ruleID > 0)
            {
                ruleFound = true;
            }
            else
            {
                ruleID = -1;
            }
        }

        return resultantRules;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContainer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares the container for the specified values.
    /// </summary>
    /// <param name="_amount">
    ///    An <c>AmountCur</c> extended data type that holds the signing limit amount.
    /// </param>
    /// <param name="_currencyCode">
    ///    The signing limit currency code.
    /// </param>
    /// <returns>
    ///    A container that has the <c>AmountCur</c> and <c>CurrencyCode</c> extended data types.
    /// </returns>
    private container getContainer(AmountCur _amount, CurrencyCode _currencyCode)
    {
        container conSigningLimits;

        conSigningLimits += [_amount, _currencyCode];
        return conSigningLimits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyFromPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the currency policy from the currency policy.
    /// </summary>
    /// <param name="_documentType">
    ///    The <c>HRPLimitDocumentType</c> enumeration value.
    /// </param>
    /// <param name="_limitType">
    ///    The <c>HRPLimitType</c> enumeration value.
    /// </param>
    /// <param name="_positionId">
    ///    The position ID in the <c>HcmPosition</c> table.
    /// </param>
    /// <returns>
    ///    A container that has the <c>AmountCur</c>, <c>CurrencyCode</c>, and <c>dataAreaId</c> extended data
    ///    types.
    /// </returns>
    public container getCurrencyFromPolicy(
                                            HRPLimitDocumentType    _documentType,
                                            HRPLimitType            _limitType,
                                            HcmPositionId           _positionId = ''
                                            )
    {
        container       currencyContainer, signingLimitContainer, getCurrencyValue;
        CurrencyCode    currencyCode;
        RefRecId        documentRecId;

        //fetch document recid
        documentRecId = HRPLimitDocument::getLimitDocumentRecId(_documentType);

        //get currency based on limit currency rule
        currencyContainer = this.getActiveLimitCurrencyRule();
        if (currencyContainer != connull())
        {
            getCurrencyValue = currencyContainer;
        }
        else
        {
            //get currency based on default signing limit rule as active currency rule does not exists
            signingLimitContainer = this.getActiveDefaultSLRule(_limitType, documentRecId, _positionId);

            if (signingLimitContainer != connull())
            {
                getCurrencyValue =  signingLimitContainer;
            }
            else
            {
                //get currency from the logged in company as no active limit currency rule and default signing limit rule exists
                currencyCode = Ledger::accountingCurrency();
                if (currencyCode!= '')
                {
                    getCurrencyValue += [0, currencyCode, curext()];
                }
            }
        }
        return getCurrencyValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultLimitDetailsCompLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads data from the <c>HRPDefaultLimitDetail</c> table for the specified compensation level, limit
    ///    type, and document type details.
    /// </summary>
    /// <param name="_compensationLevelRecId">
    ///    The record ID of <c>HcmCompensationLevel</c> table.
    /// </param>
    /// <param name="_ruleId">
    ///    The record ID of <c>SysPolicyRule</c> table.
    /// </param>
    /// <param name="_limitType">
    ///    The <c>HRPLimitType</c> enumeration value.
    /// </param>
    /// <param name="_docType">
    ///    The record ID of <c>HRPLimitDocument</c> table.
    /// </param>
    /// <returns>
    ///    A container that has the <c>AmountCur</c> and <c>CurrencyCode</c> extended data types.
    /// </returns>
    private container getDefaultLimitDetailsCompLevel(
                                                        HcmCompensationLevelRecId   _compensationLevelRecId,
                                                        RefRecId                    _ruleId,
                                                        HRPLimitType                _limitType,
                                                        RefRecId                    _docType
                                                        )
    {
        HRPDefaultLimitDetail               limitDetail;
        HRPDefaultLimitCompensationRule     compRule;
        container                           conSigningLimits;

        select firstonly RecId, Amount, Currency from limitDetail
            join RecId from compRule
                where compRule.DefaultLimitDetail           == limitDetail.RecId
                    && compRule.CompensationLevel           == _compensationLevelRecId
                    && limitDetail.DefaultSigningLimitRule  == _ruleId
                    && limitDetail.LimitType                == _limitType
                    && limitDetail.SigningLimitDocument     == _docType
                    && limitDetail.LimitBasisType           == HRPAuthorityBasis::Compensation;

        conSigningLimits = this.getContainer(limitDetail.Amount, limitDetail.Currency);
        return conSigningLimits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultLimitDetailsJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads data from the <c>HRPDefaultLimitDetail</c> table for the specified job, limit type, and
    ///    document type details.
    /// </summary>
    /// <param name="_jobRecId">
    ///    A record ID of the <c>HcmJob</c> table.
    /// </param>
    /// <param name="_ruleId">
    ///    A record ID of the <c>SysPolicyRule</c> table.
    /// </param>
    /// <param name="_limitType">
    ///    An <c>HRPLimitType</c> enumeration value.
    /// </param>
    /// <param name="_docType">
    ///    A record ID of the <c>HRPLimitDocument</c> table.
    /// </param>
    /// <returns>
    ///    A container that has the <c>AmountCur</c> and <c>CurrencyCode</c> extended data types.
    /// </returns>
    private container getDefaultLimitDetailsJob(
                                                HcmJobRecId     _jobRecId,
                                                RefRecId        _ruleId,
                                                HRPLimitType    _limitType,
                                                RefRecId        _docType
                                                )
    {
        HRPDefaultLimitDetail   limitDetail;
        HRPDefaultLimitJobRule  jobRule;
        container               conSigningLimits;

        select firstonly RecId, Amount, Currency from limitDetail
            join RecId from jobRule
                where jobRule.DefaultLimitDetail            == limitDetail.RecId
                    && jobRule.Job                          == _jobRecId
                    && limitDetail.DefaultSigningLimitRule  == _ruleId
                    && limitDetail.LimitType                == _limitType
                    && limitDetail.SigningLimitDocument     == _docType
                    && limitDetail.LimitBasisType           == HRPAuthorityBasis::Job;

        conSigningLimits = this.getContainer(limitDetail.Amount, limitDetail.Currency);

        return conSigningLimits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultLimitsFromPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the currency policy from the currency policy.
    /// </summary>
    /// <param name="_documentType">
    ///    The <c>HRPLimitDocumentType</c> enumeration value.
    /// </param>
    /// <param name="_limitType">
    ///    The <c>HRPLimitType</c> enumeration value.
    /// </param>
    /// <param name="_positionId">
    ///    The position ID in the <c>HcmPosition</c> table.
    /// </param>
    /// <returns>
    ///    A <c>AmountCur</c> data type of the currency.
    /// </returns>
    public AmountCur getDefaultLimitsFromPolicy(
    HRPLimitDocumentType    _documentType,
    HRPLimitType            _limitType,
    HcmPositionId           _positionId = ''
    )
    {
        container           signingLimitContainer, currencyRule;
        CurrencyCode        defaultCurrency, currencyRuleCurrency;
        AmountCur           amount;
        RefRecId            documentRecId;

        //fetch document recid
        documentRecId = HRPLimitDocument::getLimitDocumentRecId(_documentType);

        signingLimitContainer = this.getActiveDefaultSLRule(_limitType, documentRecId, _positionId);

        //fetch active currency from LimitCurrency Rule
        currencyRule = this.getActiveLimitCurrencyRule();

        if (signingLimitContainer != connull())
        {
            amount = conpeek(signingLimitContainer, 1);
            defaultCurrency = conpeek(signingLimitContainer, 2);
        }

        if (currencyRule != connull())
        {
            currencyRuleCurrency = conpeek(currencyRule, 2);
        }

        //if default currency is not same as currency in active currency rule then do currency conversion
        if (defaultCurrency != '' && currencyRuleCurrency != '' && defaultCurrency != currencyRuleCurrency)
        {
            amount = CurrencyExchangeHelper::mstAmount(amount, currencyRuleCurrency);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementCountJobBasis</Name>
				<Source><![CDATA[
    private int getAgreementCountJobBasis(RefRecId _rule, RefRecId _document,
                                            RefRecId _limitRequestRecId, int _limitAgreementAttestationCount,
                                            RefRecId _job)
    {
        HRPLimitAgreementJobException jobException;
        HRPLimitAgreementDetail limitAgreementDetail;
        HRPLimitAgreementAttestation limitAgreementAttestation;
        int limitAgreementDetailCount, agreementCount;

        //
        //fetch count of records from HRPLimitAgreementDetail table for specific active limitagreementRuleId, documentId.
        //Excluding those HRPLimitAgreementDetail recid's which are in exception table based on current user's job.
        //
        select count(RecId) from limitAgreementDetail
            where limitAgreementDetail.SigningLimitAgreementRule == _rule
            && limitAgreementDetail.SigningLimitDocument == _document
        notexists join LimitAgreementDetail from jobException
            where jobException.LimitAgreementDetail == limitAgreementDetail.RecId
            && jobException.Job == _job;

        limitAgreementDetailCount = int642int(limitAgreementDetail.RecId);

        if (_limitAgreementAttestationCount == limitAgreementDetailCount)
        {
            //As the count of HRPLimitAgreementAttestation and HrpLimitAgreementDetail is same, we need to loop through to compare RecId's
            while select RecId, LimitAgreementDetail from limitAgreementAttestation
                where limitAgreementAttestation.SigningLimitRequest == _limitRequestRecId
            {
                select firstonly RecId from limitAgreementDetail
                        where limitAgreementDetail.SigningLimitAgreementRule == _rule
                        && limitAgreementDetail.SigningLimitDocument == _document
                        && limitAgreementAttestation.LimitAgreementDetail == limitAgreementDetail.RecId
                    notexists join LimitAgreementDetail from jobException
                        where jobException.LimitAgreementDetail == limitAgreementDetail.RecId
                        && jobException.Job == _job;

                if (limitAgreementDetail.RecId)
                {
                    agreementCount = agreementCount + 1;
                }
            }
        }

        return agreementCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementCountCompBasis</Name>
				<Source><![CDATA[
    private int getAgreementCountCompBasis(RefRecId _rule, RefRecId _document,
                                            RefRecId _limitRequest, int _limitAgreementAttestationCount,
                                            RefRecId _compensation)
    {
        HRPLimitAgreementCompException compException;
        HRPLimitAgreementDetail limitAgreementDetail;
        HRPLimitAgreementAttestation limitAgreementAttestation;
        int limitAgreementDetailCount, agreementCount;

        //
        //Fetch count of records from HRPLimitAgreementDetail table for specific active limitagreementRuleId, documentId.
        //Excluding those HRPLimitAgreementDetail recid's which are in exception table based on current user's compensation level.
        //
        select count(RecId) from limitAgreementDetail
                where limitAgreementDetail.SigningLimitAgreementRule == _rule
                    && limitAgreementDetail.SigningLimitDocument == _document
             notexists join LimitAgreementDetail from compException
                where compException.LimitAgreementDetail == limitAgreementDetail.RecId
                    && compException.CompensationLevel == _compensation;

        limitAgreementDetailCount = int642int(limitAgreementDetail.RecId);

        //As the count of HRPLimitAgreementAttestation and HrpLimitAgreementDetail is same, we need to loop through to compare RecId's
        if (_limitAgreementAttestationCount == limitAgreementDetailCount)
        {
            while select RecId, LimitAgreementDetail from limitAgreementAttestation
                    where limitAgreementAttestation.SigningLimitRequest == _limitRequest
            {
                select firstonly RecId from limitAgreementDetail
                        where limitAgreementDetail.SigningLimitAgreementRule == _rule
                            && limitAgreementDetail.SigningLimitDocument == _document
                            && limitAgreementAttestation.LimitAgreementDetail == limitAgreementDetail.RecId
                   notexists join LimitAgreementDetail from compException
                        where compException.LimitAgreementDetail == limitAgreementDetail.RecId
                            && compException.CompensationLevel == _compensation;

                if (limitAgreementDetail.RecId)
                {
                    agreementCount = agreementCount + 1;
                }
            }
        }

        return agreementCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies whether the limits attested by user during limit request is valid or not.
    /// </summary>
    /// <param name="_limitRequestRecId">
    ///     A <c>HrpLimitRequest</c> table which validates the agreement.
    /// </param>
    /// <param name="_documentType">
    ///     The record ID of <c>HRPLimitDocument</c> table.
    /// </param>
    /// <param name="_positionWorkerAssignmentRecId">
    ///     The recId from <c>HcmPositionWorkerAssignment</c> table.
    /// </param>
    /// <returns>
    ///     true if agreement is valid, false otherwise
    /// </returns>
    public boolean isValidAgreements(RefRecId _limitRequestRecId, RefRecId _documentType,
                                        HcmPositionWorkerAssignmentRecId _positionWorkerAssignmentRecId)
    {
        HRPLimitAgreementDetail limitAgreementDetail;
        HRPLimitAgreementAttestation  limitAgreementAttestation;
        RefRecId  jobOrCompensationRecId;
        int limitAgreementAttestationCount, agreementCount;
        boolean isValidAgreements;
        HRPLimitParameters limitParam;
        limitAgreementAttestationCount = HRPLimitAgreementAttestation::getAgreementAttestationCountByLimitRequest(_limitRequestRecId);

        //fetch the active limit agreement ruleId from policy
        RefRecId ruleId = HRPLimitAgreementAttestation::getActiveLimitAgreementRule();
        select firstonly SigningLimitBasedOn from limitParam;
        authorityBasis = limitParam.SigningLimitBasedOn;

        //fetch jobId or CompensationId based on authority basis
        jobOrCompensationRecId = this.getAuthBaseRecId(authorityBasis, HcmPositionWorkerAssignment::find(_positionWorkerAssignmentRecId).Position);

        if (authorityBasis == HRPAuthorityBasis::Job)
        {
            agreementCount = this.getAgreementCountJobBasis(ruleId, _documentType, _limitRequestRecId, limitAgreementAttestationCount, jobOrCompensationRecId);
        }
        // same process for finding compensation exceptions too, but the tables from where we fetch data is different
        else
        {
            agreementCount = this.getAgreementCountCompBasis(ruleId, _documentType, _limitRequestRecId, limitAgreementAttestationCount, jobOrCompensationRecId);
        }

        if (limitAgreementAttestationCount == agreementCount)
        {
            isValidAgreements = true;
        }
        return isValidAgreements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLimitRequestCurrencyRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads data from the <c>HRPLimitRequestCurrencyRule</c> table for the specified rule ID.
    /// </summary>
    /// <param name="_ruleId">
    ///    The record ID of the <c>SysPolicyRule</c> record.
    /// </param>
    /// <returns>
    ///    A container with the <c>AmountCur</c>, <c>CurrencyCode</c>, and <c>dataAreaId</c> enumeration
    ///    values.
    /// </returns>
    private container getLimitRequestCurrencyRule(RefRecId _ruleId)
    {
        HRPLimitRequestCurrencyRule currencyRule;
        container                   conSigningLimits;

        select firstonly RecId, Currency from currencyRule where currencyRule.RecId == _ruleId;

        conSigningLimits = this.getContainer(0, currencyRule.Currency);
        return conSigningLimits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOUs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves all the operating units mapped to the position of the logged-in worker.
    /// </summary>
    /// <returns>
    ///    A container with all the operating units.
    /// </returns>
    private container getOUs()
    {
        HcmPositionDetail   positionDetail;
        OMOperatingUnit     operatingUnit;
        HcmPosition         position;
        container           ou;

        select firstonly RecId from position where position.PositionId == workerPositionId;

        while select RecId from operatingUnit
            join Department, Position from positionDetail
            where positionDetail.Department == operatingUnit.RecId
                && positionDetail.Position == position.RecId
        {
            ou += [operatingUnit.RecId];
        }
        return ou;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPositionWorkerAssignment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads data from the <c>HcmPositionWorkerAssignment</c> table for the specified worker and position
    ///    details.
    /// </summary>
    /// <param name="_worker">
    ///    The record ID of the <c>HcmWorker</c> record.
    /// </param>
    /// <param name="_positionID">
    ///    The position ID from the <c>HcmPosition</c> record.
    /// </param>
    /// <returns>
    ///    The record ID of the <c>HcmPositionWorkerAssignment</c> record.
    /// </returns>
    private RefRecId getPositionWorkerAssignment(RefRecId _worker, HcmPositionId _positionID)
    {
        HcmPositionWorkerAssignment         positionWorkerAssignment;
        HcmPosition                         position;

        if (_positionID != "")
        {
            select firstonly RecId from position where position.PositionId == _positionID;
            select firstonly RecId from positionWorkerAssignment where positionWorkerAssignment.Position == position.RecId && positionWorkerAssignment.Worker == _worker;
            workerPositionId = _positionID;
            return positionWorkerAssignment.RecId;
        }

        positionWorkerAssignment = HcmWorkerHelper::getWorkerPrimaryPositionAssignment(_worker);

        select firstonly PositionId from position where position.RecId == positionWorkerAssignment.Position;
        workerPositionId = position.PositionId;

        return positionWorkerAssignment.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerSigningLimit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the active signing limit values for the specified worker.
    /// </summary>
    /// <param name="_workerRecId">
    ///    The record ID of the <c>HcmWorker</c> table.
    /// </param>
    /// <param name="_sourceDcoumentRelationType">
    ///    The <c>SourceDocumentRelationType</c> enumeration value.
    /// </param>
    /// <param name="_limitType">
    ///    The <c>HRPLimitType</c> enumeration value.
    /// </param>
    /// <param name="_positionId">
    ///    The position ID in the <c>HcmPosition</c> table.
    /// </param>
    /// <returns>
    ///    A container that has the <c>AmountCur</c> and <c>CurrencyCode</c> extended data types.
    /// </returns>
    public container getWorkerSigningLimit(RefRecId                     _workerRecId,
                                           SourceDocumentRelationType   _sourceDcoumentRelationType,
                                           HRPLimitType                 _limitType,
                                           HcmPositionId                _positionId = '')
    {
        HrpWorkerLimitParameters parameters = this.createWorkerSigningLimitParameters(_workerRecId, _sourceDcoumentRelationType, _limitType, _positionId);

        return this.getWorkerSigningLimitFromParameters(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkerSigningLimitParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the contract for active signing limit for the specified worker.
    /// </summary>
    /// <param name="_workerRecId">
    ///    The record ID of the <c>HcmWorker</c> table.
    /// </param>
    /// <param name="_sourceDocumentRelationType">
    ///    The <c>SourceDocumentRelationType</c> enumeration value.
    /// </param>
    /// <param name="_limitType">
    ///    The <c>HRPLimitType</c> enumeration value.
    /// </param>
    /// <param name="_positionId">
    ///    The position ID of the <c>HcmPosition</c> table.
    /// </param>
    ///  <returns>
    ///    A <c>HrpWorkerLimitParameters</c> instance.
    /// </returns>
    [Hookable(true)]
    protected HrpWorkerLimitParameters createWorkerSigningLimitParameters(
        RefRecId _workerRecId,
        SourceDocumentRelationType _sourceDocumentRelationType,
        HRPLimitType _limitType,
        HcmPositionId _positionId)
    {
        HrpWorkerLimitParameters parameters = HrpWorkerLimitParameters::construct();
        parameters.WorkerRecId = _workerRecId;
        parameters.SourceDocumentRelationType = _sourceDocumentRelationType;
        parameters.LimitType = _limitType;
        parameters.PositionId = _positionId;

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerSigningLimitFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the active signing limit values for the specified worker.
    /// </summary>
    /// <param name="_parameters">
    ///    A <c>HrpWorkerLimitParameters</c> instance which contains the parameters to get the active signing limit values for the specified worker.
    /// </param>
    /// <returns>
    ///    A container that has the <c>AmountCur</c> and <c>CurrencyCode</c> extended data types.
    /// </returns>
    [Hookable(true)]
    protected container getWorkerSigningLimitFromParameters(HrpWorkerLimitParameters _parameters)
    {
        container       signingLimits, currencyRule;
        AmountCur       amount;
        Currency        currency;
        recId           positionWorkerAssignmentRecId;
        recId           limitDocumentId;
        boolean         isIndividualLimitAvailable;
        CurrencyCode    defaultCurrency, currencyRuleCurrency;
       
        //Read data from HRPlimitParameters table
        this.readLimitParameters();
        
        //Read worker details and identify whether the worker is an employee or contractor
        this.readWorkerDetails(_parameters.WorkerRecId);

        //contractor cannot have limits if authority basis is set to compensation level
        //contractor cannot have limits if IsEmployeeOnlyGetLimits parameter is set to YES for signing limits
        if (!(this.paramGetIsWorkerAnEmployee()))
        {
            //worker is a contractor
            if ((this.paramGetSigningLimitBasedOn() == HRPAuthorityBasis::Compensation) || (this.paramGetIsEmployeeOnlyGetLimits()))
            {
                return this.getEmptySigningLimits();
            }
        }

        positionWorkerAssignmentRecId = this.getPositionWorkerAssignment(_parameters.WorkerRecId, _parameters.PositionId);
        limitDocumentId = HRPLimitDocument::getSourceDocumentRelationRecId(_parameters.SourceDocumentRelationType);

        if (this.paramGetIsRequestRequired())
        {
            //worker has to raise a request => read from HRPApprovedLimit table
            return this.getSigningLimitsRequestRequired(positionWorkerAssignmentRecId, limitDocumentId, _parameters.LimitType);
        }
        else
        {
            return this.getSigningLimitsIfRequestNotRequired(positionWorkerAssignmentRecId, limitDocumentId, _parameters.LimitType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSigningLimitsRequestRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the active signing limit values when individual limit request is required
    /// </summary>
    /// <param name="_positionWorkerAssignmentRecId">
    ///    The record ID of the <c>HcmPositionWorkerAssignment</c> table.
    /// </param>
    /// <param name="_limitDocumentId">
    ///    The record ID of the <c>HrpLimitDocument</c> table.
    /// </param>
    /// <param name="_limitType">
    ///    The <c>HRPLimitType</c> enumeration value.
    /// </param>
    /// <returns>
    ///    A container that contains signing limits amount and currency
    /// </returns>
    private container getSigningLimitsRequestRequired(recId _positionWorkerAssignmentRecId, recId _limitDocumentId, HRPLimitType _limitType)
    {
        container signingLimits = this.getEmptySigningLimits();

        //check whether worker has got individual limits
        if (this.isAnyIndividualLimitsAvailable(_positionWorkerAssignmentRecId, _limitDocumentId, _limitType))
        {
            //individual limit is available or valid attestation for the limit exists
            if (signingLimitRequestRecId == 0 || this.isLimitAttestationValid(approvedLimit.SigningLimitRequest))
            {
                //for upgraded data HRPSigningLimitRequest would be zero
                if (approvedLimitAmountRecId)
                {
                    //individual amount
                    signingLimits = this.getContainer(approvedAmount, approvedCurrency);
                }
                else
                {
                    signingLimits = this.getDefaultSigningLimits(_limitDocumentId, _limitType);
                }
            }
        }

        return signingLimits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSigningLimitsIfRequestNotRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the active signing limit values when individual limit request is not required
    /// </summary>
    /// <param name="_positionWorkerAssignmentRecId">
    ///    The record ID of the <c>HcmPositionWorkerAssignment</c> table.
    /// </param>
    /// <param name="_limitDocumentId">
    ///    The record ID of the <c>HrpLimitDocument</c> table.
    /// </param>
    /// <param name="_limitType">
    ///    The <c>HRPLimitType</c> enumeration value.
    /// </param>
    /// <returns>
    ///    A container that contains signing limits amount and currency
    /// </returns>
    private container getSigningLimitsIfRequestNotRequired(recId _positionWorkerAssignmentRecId, recId _limitDocumentId, HRPLimitType _limitType)
    {
        HrpWorkerLimitParameters parameters = this.createRequestNotRequiredParameters(_positionWorkerAssignmentRecId, _limitDocumentId, _limitType);

        return this.getSigningLimitsIfRequestNotRequiredFromParameters(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRequestNotRequiredParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the contract for active signing limit when individual limit request is not required.
    /// </summary>
    /// <param name="_positionWorkerAssignmentRecId">
    ///    The record ID of the <c>HcmPositionWorkerAssignment</c> table.
    /// </param>
    /// <param name="_limitDocumentId">
    ///    The record ID of the <c>HrpLimitDocument</c> table.
    /// </param>
    /// <param name="_limitType">
    ///    The <c>HRPLimitType</c> enumeration value.
    /// </param>
    ///  <returns>
    ///    A <c>HrpWorkerLimitParameters</c> instance.
    /// </returns>
    [Hookable(true)]
    protected HrpWorkerLimitParameters createRequestNotRequiredParameters(
        RecId _positionWorkerAssignmentRecId,
        RecId _limitDocumentId,
        HRPLimitType _limitType)
    {
        HrpWorkerLimitParameters parameters = HrpWorkerLimitParameters::construct();
        parameters.PositionWorkerAssignmentRecId = _positionWorkerAssignmentRecId;
        parameters.LimitDocumentId = _limitDocumentId;
        parameters.LimitType = _limitType;

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSigningLimitsIfRequestNotRequiredFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the active signing limit values when individual limit request is not required.
    /// </summary>
    /// <param name="_parameters">
    ///    A <c>HrpWorkerLimitParameters</c> instance which contains the parameters used to get the active signing limit values when individual limit request is not required.
    /// </param>
    /// <returns>
    ///    A container that contains signing limits amount and currency.
    /// </returns>
    [Hookable(true)]
    protected container getSigningLimitsIfRequestNotRequiredFromParameters(HrpWorkerLimitParameters _parameters)
    {
        container signingLimits = this.getDefaultSigningLimits(_parameters.LimitDocumentId, _parameters.LimitType);

        //check whether worker has got individual limits
        if (this.isAnyIndividualLimitsAvailable(_parameters.PositionWorkerAssignmentRecId, _parameters.LimitDocumentId, _parameters.LimitType))
        {
            //individual limit is available or valid attestation for the limit exists
            if (signingLimitRequestRecId == 0 || this.isLimitAttestationValid(approvedLimit.SigningLimitRequest))
            {
                //for upgraded data HRPSigningLimitRequest would be zero
                if (approvedLimitAmountRecId)
                {
                    //get the individual limit is available
                    signingLimits = this.getContainer(approvedAmount, approvedCurrency);
                }
            }
        }

        return signingLimits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultSigningLimits</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the default signing limit values
    /// </summary>
    /// <param name="_limitDocumentId">
    ///    The record ID of the <c>HrpLimitDocument</c> table.
    /// </param>
    /// <param name="_limitType">
    ///    The <c>HRPLimitType</c> enumeration value.
    /// </param>
    /// <returns>
    ///    A container that contains signing limits amount and currency
    /// </returns>
    private container getDefaultSigningLimits(recId _limitDocumentId, HRPLimitType _limitType)
    {
        HrpWorkerLimitParameters parameters = this.createDefaultSigningLimitParameters(_limitDocumentId, _limitType);

        return this.getDefaultSigningLimitsFromParameters(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultSigningLimitParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the contract for default signing limit.
    /// </summary>
    /// <param name="_limitDocumentId">
    ///    The record ID of the <c>HrpLimitDocument</c> table.
    /// </param>
    /// <param name="_limitType">
    ///    The <c>HRPLimitType</c> enumeration value.
    /// </param>
    /// <returns>
    ///    A <c>HrpWorkerLimitParameters</c> instance.
    /// </returns>
    [Hookable(true)]
    protected HrpWorkerLimitParameters createDefaultSigningLimitParameters(
        RecId _limitDocumentId,
        HRPLimitType _limitType)
    {
        HrpWorkerLimitParameters parameters = HrpWorkerLimitParameters::construct();
        parameters.LimitDocumentId = _limitDocumentId;
        parameters.LimitType = _limitType;

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultSigningLimitsFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the default signing limit values.
    /// </summary>
    /// <param name="_parameters">
    ///    A <c>HrpWorkerLimitParameters</c> instance which contains the parameters used to get the default signing limit value.
    /// </param>
    /// <returns>
    ///    A container that contains signing limits amount and currency.
    /// </returns
    [Hookable(true)]
    protected container getDefaultSigningLimitsFromParameters(HrpWorkerLimitParameters _parameters)
    {
        container currencyRule;
        AmountCur amount;
        CurrencyCode defaultCurrency, currencyRuleCurrency;
        
        //Logic to fetch amount and currency details from policy

        //fetch active amount and default currency from Default Signing Limit Rule
        container signingLimits = this.getActiveDefaultSLRule(_parameters.LimitType, _parameters.LimitDocumentId, workerPositionId);

        if (signingLimits == connull())
        {
            signingLimits = this.getEmptySigningLimits();
        }
        else
        {
            //if active default signing limit rule exists, fetch active currency from LimitCurrency Rule
            currencyRule = this.getActiveLimitCurrencyRule();

            amount = conpeek(signingLimits, 1);
            defaultCurrency = conpeek(signingLimits, 2);

            if (currencyRule != connull())
            {
                //active limit currency rule exists
                currencyRuleCurrency = conpeek(currencyRule, 2);

                if (defaultCurrency != currencyRuleCurrency)
                {
                    //default currency is not the same as currency in active currency rule; convert amount according to exchange rates
                    amount = CurrencyExchangeHelper::mstAmount(amount, currencyRuleCurrency);
                    signingLimits = this.getContainer(amount, currencyRuleCurrency);
                }
            }
        }

        return signingLimits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmptySigningLimits</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the empty signing limit values with 0 amount and empty currency
    /// </summary>
    /// <returns>
    ///     A container that contains signing limits amount and currency
    /// </returns>
    private container getEmptySigningLimits()
    {
        Currency currency;
        AmountCur amount = 0;

        return this.getContainer(amount, currency.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAnyIndividualLimitsAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks for an active individual limit for the specified <c>HRPLimitDocument</c>,
    ///    <c>HRPLimitType</c>, and <c>HcmPositionWorkerAssignment</c> values.
    /// </summary>
    /// <param name="_positionWorkerAssignmentRecId">
    ///    A record ID of the <c>HcmPositionWorkerAssignment</c> table.
    /// </param>
    /// <param name="_document">
    ///    A record ID of the <c>HRPLimitDocument</c> table.
    /// </param>
    /// <param name="_limitType">
    ///    The <c>HRPLimitType</c> enumeration value.
    /// </param>
    /// <returns>
    ///    true if the limit is approved; otherwise, false.
    /// </returns>
    private boolean isAnyIndividualLimitsAvailable(RefRecId _positionWorkerAssignmentRecId, RefRecId _document, HRPLimitType _limitType)
    {
        HRPApprovedLimitAmount   approvedLimitAmount;

        select firstonly RecId, SigningLimitRequest from approvedLimit
            where approvedLimit.PositionWorkerAssignment == _positionWorkerAssignmentRecId
                && approvedLimit.SigningLimitDocument == _document
                && approvedLimit.SigningLimitType == _limitType
         join RecId, Amount, Currency from approvedLimitAmount
            order by approvedLimitAmount.Amount desc
            where approvedLimitAmount.ApprovedSigningLimit == approvedLimit.RecId;

        if (approvedLimit.RecId)
        {
            signingLimitRequestRecId = approvedLimit.SigningLimitRequest;
            approvedLimitAmountRecId = approvedLimitAmount.RecId;
            approvedAmount = approvedLimitAmount.Amount;
            approvedCurrency = approvedLimitAmount.Currency;
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLimitAttestationValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified limit request has valid limit attestation.
    /// </summary>
    /// <param name="_limitRequestRecId">
    ///    A record ID of the <c>HRPLimitRequest</c> table.
    /// </param>
    /// <returns>
    ///    true if limit attestation is valid; otherwise, false.
    /// </returns>
    private boolean isLimitAttestationValid(RefRecId _limitRequestRecId)
    {
        HRPLimitAgreementAttestation    limitAgreementAttestation;
        HRPLimitAgreementDetail         limitAgreementDetail;

        while select RecId, LimitAgreementDetail, AttestationDateTime from limitAgreementAttestation
            where limitAgreementAttestation.SigningLimitRequest == _limitRequestRecId
        {
            select firstonly AttestationPeriod from limitAgreementDetail
                where limitAgreementDetail.RecId == limitAgreementAttestation.LimitAgreementDetail;

            if (DateTimeUtil::addMonths(limitAgreementAttestation.AttestationDateTime, limitAgreementDetail.AttestationPeriod) < DateTimeUtil::utcNow())
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramGetIsEmployeeOnlyGetLimits</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>isEmployeeOnlyGetSigningLimits</c> class attribute.
    /// </summary>
    /// <param name="_isEmployeeOnlyGetSigningLimits">
    ///    A Boolean value that indicates whether only employees of an organization get signing limits or
    ///    contractors also get signing limits.
    /// </param>
    /// <returns>
    ///    true if only the employee limits are required; otherwise, false.
    /// </returns>
    public boolean paramGetIsEmployeeOnlyGetLimits(boolean _isEmployeeOnlyGetSigningLimits = isEmployeeOnlyGetSigningLimits)
    {
        if (!prmisdefault(_isEmployeeOnlyGetSigningLimits))
        {
            isEmployeeOnlyGetSigningLimits = _isEmployeeOnlyGetSigningLimits;
        }

        return isEmployeeOnlyGetSigningLimits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramGetIsRequestRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>isRequestRequired</c> class attribute.
    /// </summary>
    /// <param name="_isRequestRequired">
    ///    A Boolean value that indicates whether a request is required.
    /// </param>
    /// <returns>
    ///    true if the explicit request is required; otherwise, false.
    /// </returns>
    public boolean paramGetIsRequestRequired(boolean _isRequestRequired = isRequestRequired)
    {
        if (!prmisdefault(_isRequestRequired))
        {
            isRequestRequired = _isRequestRequired;
        }

        return isRequestRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramGetIsWorkerAnEmployee</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>isWorkerAnEmployee</c> class attribute.
    /// </summary>
    /// <param name="_isEmployee">
    ///    A Boolean value that indicates whether it is an employee.
    /// </param>
    /// <returns>
    ///    true if the worker is an employee; otherwise, false.
    /// </returns>
    public boolean paramGetIsWorkerAnEmployee(boolean _isEmployee = isWorkerAnEmployee)
    {
        if (!prmisdefault(_isEmployee))
        {
            isWorkerAnEmployee = _isEmployee;
        }

        return isWorkerAnEmployee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramGetSigningLimitBasedOn</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>authorityBasis</c> class attribute.
    /// </summary>
    /// <param name="_authorityBasis">
    ///    The <c>HRPAuthorityBasis</c> enumeration value.
    /// </param>
    /// <returns>
    ///    An <c>HRPAuthorityBasis::Job</c> enumeration value if the authority basis is a job type; otherwise,
    ///    the <c>HRPAuthorityBasis::Compensation</c> enumeration value.
    /// </returns>
    public HRPAuthorityBasis paramGetSigningLimitBasedOn(HRPAuthorityBasis _authorityBasis = authorityBasis)
    {
        if (!prmisdefault(_authorityBasis))
        {
            authorityBasis = _authorityBasis;
        }

        return authorityBasis;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readLimitParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads the signing limit parameters set by the administrator.
    /// </summary>
    private void readLimitParameters()
    {
        HRPLimitParameters limitParameters;

        select firstonly SigningLimitBasedOn, IsRequestRequiredToGetDefaultLimit, IsEmployeeOnlyGetSigningLimits from limitParameters;

        this.paramGetSigningLimitBasedOn(limitParameters.SigningLimitBasedOn);
        this.paramGetIsRequestRequired(limitParameters.IsRequestRequiredToGetDefaultLimit);
        this.paramGetIsEmployeeOnlyGetLimits(limitParameters.IsEmployeeOnlyGetSigningLimits);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readWorkerDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads the worker details and identifies whether a worker is an employee or contractor.
    /// </summary>
    /// <param name="_workerRecId">
    ///    The record ID of the <c>HcmWorker</c> table.
    /// </param>
    private void readWorkerDetails(HcmWorkerRecId _workerRecId)
    {
        HcmWorker   hcmWorker;

        hcmWorker = HcmWorker::find(_workerRecId);

        if (hcmWorker.RecId && hcmWorker.isEmployee())
        {
            this.paramGetIsWorkerAnEmployee(NoYes::Yes);
        }
        else
        {
            this.paramGetIsWorkerAnEmployee(NoYes::No);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>