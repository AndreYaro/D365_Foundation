<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_InventOnHandItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Process industries-specific form control handler for the <c>InventOnhandItem</c> form.
/// </summary>
public class PmfFormCtrl_InventOnHandItem extends PmfFormCtrl
{
    private InventSum   inventSum;
    private InventDim   inventDim;

    private Set         detailsCWControls;

    private Set         gridCWControls;
    private Set         gridInventControls;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bufferInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the buffer as an <c>InventSum</c> record.
    /// </summary>
    /// <returns>
    /// An <c>InventSum</c> record.
    /// </returns>
    public InventSum bufferInventSum()
    {
        return buffer as InventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isFormulaEnabled())
        {
            this.registerCtrlRuleNoGroup(
                    formRun.design().controlName(formControlStr(InventOnhandItem, PmfFormulaTableAction)),
                    methodstr(PmfFormCtrl_InventOnhandItem, isFormulaItem),
                    ButtonRuleEffectType::Enabled);
        }

        this.registerCtrlRuleNoGroup(formRun.design().controlName(formControlStr(InventOnhandItem, PmfPackOnHand)),
                    methodstr(PmfFormCtrl_InventOnhandItem, isBulkorPack),
                    ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(formRun.design().controlName(formControlStr(InventOnhandItem, InventDimTracking)),
                    methodstr(PmfFormCtrl_InventOnhandItem, isBatchEnabled),
                    ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(formRun.design().controlName(formControlStr(InventOnhandItem, PdsResetShelfDates)),
                    methodstr(PmfFormCtrl_InventOnhandItem, isBatchEnabled),
                    ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(formRun.design().controlName(formControlStr(InventOnhandItem, PdsResetVendorBatchInfo)),
                    methodstr(PmfFormCtrl_InventOnhandItem, isBatchEnabled),
                    ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(formRun.design().controlName(formControlStr(InventOnhandItem, PdsBatchAttributes)),
                    methodstr(PmfFormCtrl_InventOnhandItem, isBatchEnabled),
                    ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(formRun.design().controlName(formControlStr(InventOnhandItem, InventNonConformanceTable)),
                    methodstr(PmfFormCtrl_InventOnhandItem, isBatchEnabled),
                    ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(formRun.design().controlName(formControlStr(InventOnhandItem, PdsResetDispositionStatus)),
                    methodstr(PmfFormCtrl_InventOnhandItem, isBatchEnabled),
                    ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(formRun.design().controlName(formControlStr(InventOnhandItem, InventBlocking)),
                    methodstr(PmfFormCtrl_InventOnhandItem, isBatchEnabled),
                    ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(formRun.design().controlName(formControlStr(InventOnhandItem, InventQualityOrderTable)),
                    methodstr(PmfFormCtrl_InventOnhandItem, isBatchEnabled),
                    ButtonRuleEffectType::Enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the batch related functions should be enabled.
    /// </summary>
    /// <returns>
    ///     true if the batch functions should be enabled; otherwise false.
    /// </returns>
    public boolean isBatchEnabled()
    {
        inventDim.checkInvalidFieldAccess(false);
        return inventDim.inventBatchId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBulkorPack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if item is bulk or pack item.
    /// </summary>
    /// <returns>
    /// True if item is bulk or pack item; otherwise false.
    /// </returns>
    public boolean isBulkorPack()
    {
        return isConfigurationkeyEnabled(configurationkeynum(PMF)) && PmfBulkItemConv::isBulkorPack(this.bufferInventSum().ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the process industries functionality is enabled
    /// </summary>
    /// <returns>
    /// true, if the configuration key is enabled
    /// </returns>
    /// <remarks>
    /// The method is required to feed into the button manager.
    /// </remarks>
    public boolean isFormulaEnabled()
    {
        return isConfigurationkeyEnabled(configurationkeynum(PMF));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the item is of production type <c>PmfProductType::Formula</c> or <c>PmfProductType::MainItem</c>.
    /// </summary>
    /// <returns>
    /// True if the item can have a formula; otherwise false.
    /// </returns>
    public boolean isFormulaItem()
    {
        return InventTable::find(this.bufferInventSum().ItemId).isFormulaAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShelfLifeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the shelf life functions should be enabled.
    /// </summary>
    /// <returns>
    ///     true if the shelf life functions should be enabled; otherwise false.
    /// </returns>
    public boolean isShelfLifeEnabled()
    {
        inventDim.checkInvalidFieldAccess(false);
        return inventDim.inventBatchId != '' && this.bufferInventSum().inventTable().isShelfLifeItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);

        detailsCWControls   = new Set(Types::Class);
        gridCWControls      = new Set(Types::Class);
        gridInventControls  = new Set(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    public void setDatasources(
        Common  _datasources1,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(InventSum))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }
        inventSum = _datasources1 as InventSum;

        if (_datasources2.TableId != tablenum(InventDim))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }
        inventDim = _datasources2 as InventDim;

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_InventOnhandItem construct()
    {
        return new PmfFormCtrl_InventOnhandItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control handler from the form element
    /// </summary>
    /// <param name="_fr">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_InventOnhandItem newFromForm(FormRun _fr)
    {
        PmfFormCtrl_InventOnhandItem frmCtrl;

        frmCtrl = PmfFormCtrl_InventOnhandItem::construct();
        frmCtrl.parmFormRun(_fr);

        return frmCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceActivePost</Name>
				<Source><![CDATA[
    public void dataSourceActivePost()
    {
        super();

        this.toggleControlVisibility(detailsCWControls, PdsGlobal::pdsIsCWItem(inventSum.ItemId));        
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    public void initPost()
    {
        super();

        // The controls will always be hidden if CW is disabled.
        if (this.isCatchWeightEnabled())
        {
            this.registerDetailsCWControls();
            this.registerGridCWInventControls();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerDetailsCWControls</Name>
				<Source><![CDATA[
    private void registerDetailsCWControls()
    {
        this.registerOnHandTableCWFields();
        this.registerAvailablePhysicalUnitTableCWFields();
        this.registerTotalUnitTableCWFields();
        this.registerVariousUnitTableCWFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerOnHandTableCWFields</Name>
				<Source><![CDATA[
    private void registerOnHandTableCWFields()
    {
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, HeaderOnHandTableCWQuantity));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWPhysicalInvent));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWReservPhysical));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWAvailPhysical));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWAvailReservation));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWOrderedSum));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWAvailReservationOrdered));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWOnOrder1));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWAvailOrdered));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWNonNetPhysical));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWExpiredPhysical));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWAvailOrdered2));
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerAvailablePhysicalUnitTableCWFields</Name>
				<Source><![CDATA[
    private void registerAvailablePhysicalUnitTableCWFields()
    {
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, HeaderAvailablePhysicalUnitTableCWQuantity));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWPostedQty));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWDeducted));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWPicked));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWReceived));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWRegistered));
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerTotalUnitTableCWFields</Name>
				<Source><![CDATA[
    private void registerTotalUnitTableCWFields()
    {
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, HeaderTotalUnitTableCWQuantity));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWArrived));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWOrdered));
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerVariousUnitTableCWFields</Name>
				<Source><![CDATA[
    private void registerVariousUnitTableCWFields()
    {
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, HeaderVariousUnitTableCWQuantity));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWOnOrder));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWQuotationReceipt));
        this.registerControl(detailsCWControls, formControlStr(InventOnhandItem, PdsCWQuotationIssue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerGridCWInventControls</Name>
				<Source><![CDATA[
    private void registerGridCWInventControls()
    {
        FormComboBoxControl cwInventoryDisplayControl = formRun.design().controlName(formControlStr(InventOnhandItem, CWInventQuantityDisplay));
        cwInventoryDisplayControl.OnModified += eventhandler(this.toggleCWInventGridControls);

        this.registerGridCWControls();
        this.registerGridInventControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerGridCWControls</Name>
				<Source><![CDATA[
    private void registerGridCWControls()
    {
        this.registerControl(gridCWControls, formControlStr(InventOnhandItem, PdsCWPhysicalInventGrid));
        this.registerControl(gridCWControls, formControlStr(InventOnhandItem, PdsCWReservPhysicalGrid));
        this.registerControl(gridCWControls, formControlStr(InventOnhandItem, PdsCWAvailPhysicalGrid));
        this.registerControl(gridCWControls, formControlStr(InventOnhandItem, PdsCWAvailReservationGrid));
        this.registerControl(gridCWControls, formControlStr(InventOnhandItem, PdsCWOrderedSumGrid));
        this.registerControl(gridCWControls, formControlStr(InventOnhandItem, PdsCWAvailOrderedGrid));
        this.registerControl(gridCWControls, formControlStr(InventOnhandItem, cwAvailPhysExactDimensions));
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerGridInventControls</Name>
				<Source><![CDATA[
    private void registerGridInventControls()
    {
        this.registerControl(gridInventControls, formControlStr(InventOnhandItem, PhysicalInvent));
        this.registerControl(gridInventControls, formControlStr(InventOnhandItem, ReservPhysical));
        this.registerControl(gridInventControls, formControlStr(InventOnhandItem, AvailPhysical));
        this.registerControl(gridInventControls, formControlStr(InventOnhandItem, AvailPhysExactDimensions));
        this.registerControl(gridInventControls, formControlStr(InventOnhandItem, AvailReservationGrid));
        this.registerControl(gridInventControls, formControlStr(InventOnhandItem, OrderedSum));
        this.registerControl(gridInventControls, formControlStr(InventOnhandItem, OnOrder));
        this.registerControl(gridInventControls, formControlStr(InventOnhandItem, ReservOrdered));
        this.registerControl(gridInventControls, formControlStr(InventOnhandItem, AvailOrdered));
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleCWInventGridControls</Name>
				<Source><![CDATA[
    private void toggleCWInventGridControls(FormControl _sender, FormControlEventArgs _e)
    {
        FormComboBoxControl cwInventoryDisplayControl = _sender as FormComboBoxControl;

        if (cwInventoryDisplayControl)
        {
            PdsCWInventQuantityDisplay selection = cwInventoryDisplayControl.selection();
            boolean showCWGridControls = selection == PdsCWInventQuantityDisplay::CatchWeight;

            this.toggleControlVisibility(gridCWControls, showCWGridControls);
            this.toggleControlVisibility(gridInventControls, !showCWGridControls);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerControl</Name>
				<Source><![CDATA[
    private void registerControl(Set _controlSet, str _controlName)
    {
        _controlSet.add(formRun.design().controlName(_controlName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleControlVisibility</Name>
				<Source><![CDATA[
    private void toggleControlVisibility(Set _controlSet, boolean _visible)
    {
        SetEnumerator se = _controlSet.getEnumerator();

        while (se.moveNext())
        {
            FormControl control = se.current();
            control.visible(_visible);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>