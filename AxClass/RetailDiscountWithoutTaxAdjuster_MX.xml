<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDiscountWithoutTaxAdjuster_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailDiscountWithoutTaxAdjuster_MX</c> class adjusts retail discount without tax in accordance with accounting rules.
/// </summary>
/// <remarks>
/// Class is used in CFDI Global report.
/// </remarks>
internal final class RetailDiscountWithoutTaxAdjuster_MX
{
    private RetailStatementJour statementJour;
    private CurrencyCode accountingCurrency = Ledger::accountingCurrency();
    private Percent discountVariationLimit = EInvoiceCFDIParameters_MX::find().RetailDiscountVariationLimit;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the <c>RetailDiscountWithoutTaxAdjuster_MX</c> class.
    /// </summary>
    /// <param name="_statementJour">
    /// The statement journal.
    /// </param>
    /// <returns>
    /// The class instance.
    /// </returns>
    internal static RetailDiscountWithoutTaxAdjuster_MX construct(RetailStatementJour _statementJour)
    {
        RetailDiscountWithoutTaxAdjuster_MX calc = new RetailDiscountWithoutTaxAdjuster_MX();
        calc.statementJour = _statementJour;

        return calc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the discount amount.
    /// </summary>
    internal void adjust()
    {
        if (!discountVariationLimit)
        {
            return;
        }

        setPrefix("@SYS11829");

        Amount salesTotalAmountToAdjust;
        Amount returnTotalAmountToAdjust;

        QueryRun qr = this.getDiscountAmountQueryRunByInventTransId();
        while (qr.next())
        {
            RetailTransSalesTransAmountExclPrepView salesTrans = qr.get(tableNum(RetailTransSalesTransAmountExclPrepView));

            CustInvoiceTrans custInvoiceTrans;
            select sum(SumLineDisc) from custInvoiceTrans
                where custInvoiceTrans.InventTransId == salesTrans.inventTransId;

            if (sign(salesTrans.discAmountWithoutTax) != sign(custInvoiceTrans.SumLineDisc))
            {
                warning(strFmt("@RetailEInvoiceCFDI:IncorrectDiscountDifferenceSign", salesTrans.inventTransId));
                continue;
            }

            Amount amountToAdjust = salesTrans.discAmountWithoutTax - custInvoiceTrans.SumLineDisc;
            if (!amountToAdjust)
            {
                continue;
            }

            if (this.isExceedVariationLimit(salesTrans.discAmountWithoutTax, amountToAdjust))
            {
                warning(strFmt("@RetailEInvoiceCFDI:DiscountDifferenceExceedVariationLimit", salesTrans.inventTransId));
                continue;
            }

            container compositeReceipts = this.selectReceiptsForUpdate(salesTrans.inventTransId);
            Set receipts = Set::create(conPeek(compositeReceipts, 1));
            Amount receiptsAdjustingBase = conPeek(compositeReceipts, 2);

            Amount receiptAdjustment = this.adjustReceipts(receipts, receiptsAdjustingBase, amountToAdjust);

            if (salesTrans.discAmountWithoutTax < 0)
            {
                returnTotalAmountToAdjust += receiptAdjustment;
            }
            else
            {
                salesTotalAmountToAdjust += receiptAdjustment;
            }
        }

        this.adjustStatement(salesTotalAmountToAdjust, returnTotalAmountToAdjust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDiscountAmountQueryRunByInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets discount amount query run by inventory lot id.
    /// </summary>
    /// <returns>The query run instance.</returns>
    private QueryRun getDiscountAmountQueryRunByInventTransId()
    {
        Query query = RetailEInvoiceQueryBuilder_MX::construct(statementJour)
            .build()
            .query();

        QueryBuildDataSource salesTransQbds = query.dataSourceTable(tableNum(RetailTransSalesTransAmountExclPrepView));

        salesTransQbds.addSelectionField(fieldNum(RetailTransSalesTransAmountExclPrepView, DiscAmountWithoutTax), SelectionField::Sum);

        salesTransQbds.addGroupByField(fieldNum(RetailTransSalesTransAmountExclPrepView, InventTransId));

        salesTransQbds.addRange(fieldNum(RetailTransSalesTransAmountExclPrepView, InventTransId)).value(SysQuery::valueNotEmptyString());
        salesTransQbds.addRange(fieldNum(RetailTransSalesTransAmountExclPrepView, DiscAmountWithoutTax)).value(SysQuery::valueNot(0));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExceedVariationLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if discount adjusting amount is inside variation limit.
    /// </summary>
    /// <param name="_base">
    /// The base amount.
    /// </param>
    /// <param name="_variation">
    /// The variation amount.
    /// </param>
    /// <returns>
    /// True if discount adjusting amount is inside variation limit; otherwise, false.
    /// </returns>
    private boolean isExceedVariationLimit(Amount _base, Amount _variation)
    {
        const int PercentPrecision = 2;

        real variationFraction = _base ? abs(_variation / _base) : 0;
        real variationPercent = decRound(100 * variationFraction, PercentPrecision);

        return variationPercent > discountVariationLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectReceiptsForUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects receipts for update.
    /// </summary>
    /// <param name="_inventTransId">
    /// The inventory lot id.
    /// </param>
    /// <returns>
    /// The object with receipts record id, sum of discount and adjusting base.
    /// </returns>
    private container selectReceiptsForUpdate(InventTransId _inventTransId)
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(RetailTransactionTableExt));
        qbds.addGroupByField(fieldNum(RetailTransactionTableExt, RecId));

        qbds = qbds.addDataSource(tableNum(RetailTransactionSalesTrans));
        qbds.joinMode(JoinMode::InnerJoin);

        qbds.addLink(fieldNum(RetailTransactionTableExt, Channel), fieldNum(RetailTransactionSalesTrans, Channel));
        qbds.addLink(fieldNum(RetailTransactionTableExt, Store), fieldNum(RetailTransactionSalesTrans, Store));
        qbds.addLink(fieldNum(RetailTransactionTableExt, Terminal), fieldNum(RetailTransactionSalesTrans, TerminalId));
        qbds.addLink(fieldNum(RetailTransactionTableExt, TransactionId), fieldNum(RetailTransactionSalesTrans, TransactionId));

        qbds.addRange(fieldNum(RetailTransactionSalesTrans, InventTransId)).value(_inventTransId);
        qbds.addRange(fieldNum(RetailTransactionSalesTrans, DiscAmountWithoutTax)).value(SysQuery::valueNot(0));

        qbds.addSelectionField(fieldNum(RetailTransactionSalesTrans, DiscAmountWithoutTax), SelectionField::Sum);

        Amount adjustingBase;
        Set receipts = new Set(Types::Container);

        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            RecId receiptRecId = queryRun.get(tableNum(RetailTransactionTableExt)).(fieldNum(RetailTransactionTableExt, RecId));
            Amount receiptDiscount = queryRun.get(tableNum(RetailTransactionSalesTrans)).(fieldNum(RetailTransactionSalesTrans, DiscAmountWithoutTax));

            receipts.add([receiptRecId, receiptDiscount]);

            adjustingBase += receiptDiscount;
        }

        return [receipts.pack(), adjustingBase];
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustReceipts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts receipts.
    /// </summary>
    /// <param name="_receipts">
    /// The receipts.
    /// </param>
    /// <param name="_adjustingBase">
    /// The adjusting base.
    /// </param>
    /// <param name="_discountAmountToAdjust">
    /// The amount to adjust.
    /// </param>
    /// <returns>
    /// The adjustment amount.
    /// </returns>
    private Amount adjustReceipts(Set _receipts, Amount _adjustingBase, Amount _discountAmountToAdjust)
    {
        if (!_receipts || !_adjustingBase || !_discountAmountToAdjust)
        {
            return 0;
        }

        Amount remainAmountToAdjust = _discountAmountToAdjust;
        Amount totalAdjustment;
        RecId receiptRecId;
        Amount receiptDiscount;

        SetEnumerator se = _receipts.getEnumerator();
        while (se.moveNext())
        {
            [receiptRecId, receiptDiscount] = se.current();

            real adjustScale = abs(receiptDiscount / _adjustingBase);

            Amount amountToAdjust = CurrencyExchange::round(_discountAmountToAdjust * adjustScale, accountingCurrency);
            if (!amountToAdjust)
            {
                continue;
            }

            if (abs(remainAmountToAdjust) < abs(amountToAdjust))
            {
                amountToAdjust = remainAmountToAdjust;
            }

            if (this.adjustTransactionTable(receiptRecId, amountToAdjust))
            {
                totalAdjustment += amountToAdjust;
                remainAmountToAdjust -= amountToAdjust;

                if (!remainAmountToAdjust)
                {
                    break;
                }
            }
        }

        if (remainAmountToAdjust && receiptRecId)
        {
            if (this.adjustTransactionTable(receiptRecId, remainAmountToAdjust))
            {
                totalAdjustment += remainAmountToAdjust;
            }
        }

        return totalAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustTransactionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the discount amount in receipt.
    /// </summary>
    /// <param name="_transactionTableRecId">
    /// The receipt record id.
    /// </param>
    /// <param name="_amountToAdjust">
    /// The discount adjusting amount.
    /// </param>
    /// <returns>True if there was an adjustment; otherwise, false.</returns>
    private boolean adjustTransactionTable(RecId _transactionTableRecId, Amount _amountToAdjust)
    {
        if (!_transactionTableRecId || !_amountToAdjust)
        {
            return false;
        }

        RetailTransactionTableExt retailTransactionTableExt;
        select firstOnly retailTransactionTableExt
            where retailTransactionTableExt.RecId == _transactionTableRecId;

        boolean isAdjusted;

        if (retailTransactionTableExt
            && (sign(retailTransactionTableExt.DiscAmountWithoutTaxExclPrepayment) == sign(retailTransactionTableExt.DiscAmountWithoutTaxExclPrepayment - _amountToAdjust)))
        {
            ttsBegin;

            retailTransactionTableExt.selectForUpdate(true);

            retailTransactionTableExt.DiscAmountWithoutTaxExclPrepayment -= _amountToAdjust;
            retailTransactionTableExt.update();

            ttsCommit;

            isAdjusted = true;
        }

        return isAdjusted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the discount amount in statement.
    /// </summary>
    /// <param name="_salesTotalAmountToAdjust">
    /// The total discount adjusting amount for sales operations.
    /// </param>
    /// <param name="_returnTotalAmountToAdjust">
    /// The total discount adjusting amount for return operations.
    /// </param>
    private void adjustStatement(Amount _salesTotalAmountToAdjust, Amount _returnTotalAmountToAdjust)
    {
         RetailStatementJourExt statementJourExt;

        if (_salesTotalAmountToAdjust)
        {
            update_recordSet statementJourExt setting DiscAmountWithoutTaxExclPrepayment = statementJourExt.DiscAmountWithoutTaxExclPrepayment - _salesTotalAmountToAdjust
                where statementJourExt.statementId == statementJour.statementId;
        }

        if (_returnTotalAmountToAdjust)
        {
            update_recordSet statementJourExt setting ReturnDiscAmountWithoutTaxExclPrepayment = statementJourExt.ReturnDiscAmountWithoutTaxExclPrepayment - _returnTotalAmountToAdjust
                where statementJourExt.statementId == statementJour.statementId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>