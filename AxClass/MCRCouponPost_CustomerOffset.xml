<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCouponPost_CustomerOffset</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRCouponPost_CustomerOffset</c> class handles the calculate and post logic for coupons to offset customers.
/// </summary>
class MCRCouponPost_CustomerOffset extends MCRCouponPost
{
    CustAccount custAccount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcNumCustomers</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the total number of customers setup for this coupon.
    /// </summary>
    /// <returns>
    /// The total number of customers setup for this coupon.
    /// </returns>
    /// <remarks>
    /// This is negative 1 because this is to offset the liability amount if the coupon is invoiced.
    /// </remarks>
    int calcNumCustomers()
    {
        MCRCouponCustomer     mcrCouponCustomerSelect;
        CustTable               custTable;

        // Add all customer that are setup individually, but are not incl in groups
        select firstOnly RecId, MCRCouponVoided
        from mcrCouponCustomerSelect
        where   mcrCouponCustomerSelect.MCRCouponId == this.parmCoupons().MCRCouponId
            && mcrCouponCustomerSelect.CustomerCode == TableGroupAll::Table
            && mcrCouponCustomerSelect.CustVendRel == this.parmCustAccount();

        if (mcrCouponCustomerSelect)// found a customer specific record
        {
            if (mcrCouponCustomerSelect.MCRCouponVoided == NoYes::No)
            {
                // not voided, the customer is valid
                return -1;
            }
            else
            {
                return 0;
            }
        }
        else // no customer specific record found. look for groups
        {
            select firstonly RecId, MCRCouponVoided
                from    mcrCouponCustomerSelect
                where   mcrCouponCustomerSelect.MCRCouponId == this.parmCoupons().MCRCouponId
                    && mcrCouponCustomerSelect.CustomerCode == TableGroupAll::GroupId
            join        AccountNum, CustGroup
                from    custTable
                where   custTable.AccountNum == this.parmCustAccount()
                    && custTable.CustGroup == mcrCouponCustomerSelect.CustVendRel;
            if (mcrCouponCustomerSelect)
            {
                if (mcrCouponCustomerSelect.MCRCouponVoided == NoYes::No)
                {
                    return -1;
                }
                else
                {
                    return 0;
                }
            }
            else // no customer specific record found. look for groups
            {
                select firstonly RecId, MCRCouponVoided
                from    mcrCouponCustomerSelect
                where   mcrCouponCustomerSelect.MCRCouponId == this.parmCoupons().MCRCouponId
                    && mcrCouponCustomerSelect.CustomerCode == TableGroupAll::All;
                if (mcrCouponCustomerSelect)
                {
                    if (mcrCouponCustomerSelect.MCRCouponVoided == NoYes::No)
                    {
                        return -1;
                    }
                    else
                    {
                        return 0;
                    }
                }
                else
                {
                    return 0;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the <c>MCRCouponPost</c> object.
    /// </summary>
    /// <param name="_mcrCoupon">
    /// The coupon record to set on the object.
    /// </param>
    /// <param name="_custAccount">
    /// The customer account used in the customer offset.
    /// </param>
    void new(MCRCoupon _mcrCoupon, CustAccount _custAccount)
    {
        this.parmCustAccount(_custAccount);
        super(_mcrCoupon);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustAccount</Name>
				<Source><![CDATA[
        CustAccount parmCustAccount(CustAccount _custAccount = custAccount)
    {
        custAccount = _custAccount;
        return custAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>