<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalizeTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalizeTrans</c> class generates the general journal journalizing information.
/// </summary>
class LedgerJournalizeTrans extends RunBaseBatch implements BatchRetryable
{
    private const int CurrentVersion = 3;

    LedgerJournalizeNum     journalizeNum;
    NoYes                   printLedgerJournalizeReport;
    QueryRun                queryRun;

    // variables that do not need to be packed/unpacked
    NumberSeq               numberSeq;
    LedgerJournalizeSeqNum  sequenceNum;
    LedgerJournalizeReport  ledgerJournalizeReport;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns false.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>DialogRunBase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSequenceNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first sequence number for journalized transactions.
    /// </summary>
    /// <returns>
    /// The first sequence number for journalized transactions if there are transactions
    /// that are journalized; otherwise, zero.
    /// </returns>
    public LedgerJournalizeSeqNum initSequenceNum()
    {
        LedgerJournalizeReport  ledgerJournalizeReportLocal;

        select firstonly * from ledgerJournalizeReportLocal order by JournalizeNum desc;

        if (ledgerJournalizeReportLocal)
        {
            return ledgerJournalizeReportLocal.JournalizeSeqNum;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalizeNum</Name>
				<Source><![CDATA[
    private LedgerJournalizeNum journalizeNum()
    {
        return journalizeNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>LedgerJournalizeTrans</c> object.
    /// </summary>
    /// <returns>A new instance of the <c>LedgerJournalizeTrans</c> object.</returns>
    public static LedgerJournalizeTrans construct()
    {
        return new LedgerJournalizeTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        QueryBuildDataSource ds;

        super();

        if (LedgerParameters::find().JournalizeSortorder)
        {
            queryRun = new QueryRun(querystr(LedgerJournalizingTransactionLog));
        }
        else
        {
            queryRun = new QueryRun(querystr(LedgerJournalizing));
        }

        ds = queryRun.query().dataSourceTable(tablenum(GeneralJournalEntry));
        GeneralJournalEntry::addSecureRangeForLedger(ds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this journalize header should start its page numbering at 1 or
    /// continue numbering from the previous header.
    /// </summary>
    /// <returns>
    /// true if this journalize header should start its page numbering at 1; otherwise, false.
    /// </returns>
    protected boolean newJournal()
    {
        // Use the journalizing parameter on the ledger parameter form to determine if this journalize header should
        // start its page numbering at 1 or continue numbering from the previous header
        return LedgerParameters::find().JournalizePageOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, journalizeNum, printLedgerJournalizeReport, ledgerJournalizeReport.RecId, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the journal list report.
    /// </summary>
    protected void printout()
    {
        Args    args = new Args();

        args.record(ledgerJournalizeReport);

        if (LedgerParameters::find().JournalizeSortorder)
        {
            new MenuFunction(menuitemoutputstr(LedgerJournalizeReport2), MenuItemType::Output).run(args);
        }
        else
        {
            new MenuFunction(menuitemoutputstr(LedgerJournalizeReport), MenuItemType::Output).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> object.  If you change the return value to false the button will no
    /// longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        try
        {
            this.updateNow();
        }

        catch (Exception::Deadlock)
        {
            if (numberSeq)
            {
                numberSeq.abort();
            }
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    if (numberSeq)
                    {
                        numberSeq.abort();
                    }
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            if (numberSeq)
            {
                numberSeq.abort();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sequenceNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increments and returns the sequence number.
    /// </summary>
    /// <param name = "_voucher">
    /// The voucher string.
    /// </param>
    /// <param name = "_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The sequence number.
    /// </returns>
    protected LedgerJournalizeSeqNum sequenceNum(Voucher _voucher, TransDate _transDate)
    {
        sequenceNum += 1;
        return sequenceNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sequenceNum1</Name>
				<Source><![CDATA[
    private LedgerJournalizeSeqNum sequenceNum1(createdTransactionId     _createdTransactionId,
                                        Voucher                  _voucher,
                                        TransDate                _transDate)
    {
        sequenceNum += 1;
        return sequenceNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        const int Version2 = 2;

        Version     version     = RunBase::getVersion(packedClass);
        container   packedQuery;
        RecId journalizeReportRecId;

        switch (version)
        {
            case CurrentVersion:
                [version, journalizeNum, printLedgerJournalizeReport, journalizeReportRecId, packedQuery] = packedClass;
                select * from ledgerJournalizeReport where ledgerJournalizeReport.RecId == journalizeReportRecId;
                break;

            case Version2:
                [version, journalizeNum, packedQuery] = packedClass;
                break;

            default:
                return false;
        }

        if (packedQuery)
        {
            queryRun = new QueryRun(packedQuery);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the general journal journalizing records.
    /// </summary>
    protected void updateNow()
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        LedgerEntryJournalizing ledgerEntryJournalizing;
        GeneralJournalEntry generalJournalEntry;
        RecordInsertList newJournalizingRecords;
        boolean transactions;
        AmountMST debit;
        AmountMST credit;

        // Re-enable LedgerEntryJournalizing data source to make sure the not exists join is utilized
        QueryBuildDataSource entryJournal = queryRun.query().dataSourceTable(tableNum(LedgerEntryJournalizing));
        if (entryJournal)
        {
            entryJournal.enabled(true);
        }

        ttsbegin;

        newJournalizingRecords = new RecordInsertList(tableNum(LedgerEntryJournalizing));

        numberSeq = NumberSeq::newGetNum(LedgerParameters::numRefLedgerJournalizeNum());
        journalizeNum = numberSeq.num();

        this.getFromDialog();
        sequenceNum = this.initSequenceNum();

        while (queryRun.next())
        {
            generalJournalAccountEntry = queryRun.get(tablenum(GeneralJournalAccountEntry));
            generalJournalEntry = queryRun.get(tablenum(GeneralJournalEntry));

            sequenceNum = this.sequenceNum(generalJournalEntry.JournalNumber, generalJournalEntry.AccountingDate);

            ledgerEntryJournalizing.GeneralJournalAccountEntry = generalJournalAccountEntry.RecId;
            ledgerEntryJournalizing.Journal = journalizeNum;
            ledgerEntryJournalizing.SequenceNumber = sequenceNum;
            newJournalizingRecords.add(ledgerEntryJournalizing);

            if (generalJournalAccountEntry.IsCredit)
            {
                credit += generalJournalAccountEntry.AccountingCurrencyAmount;
            }
            else
            {
                debit += generalJournalAccountEntry.AccountingCurrencyAmount;
            }

            transactions = true;
        }

        newJournalizingRecords.insertDatabase();

        if (transactions)
        {
            ledgerJournalizeReport.JournalizeSeqNum = sequenceNum;
            ledgerJournalizeReport.JournalizeNum = journalizeNum;
            ledgerJournalizeReport.Debit = debit;
            ledgerJournalizeReport.Credit = credit;
            ledgerJournalizeReport.NewJournalize = this.newJournal();

            if (LedgerParameters::find().JournalizeSortorder)
            {
                ledgerJournalizeReport.AdvancedJournalizing = NoYes::Yes;
            }
            else
            {
                ledgerJournalizeReport.AdvancedJournalizing = NoYes::No;
            }

            ledgerJournalizeReport.insert();

            printLedgerJournalizeReport = NoYes::Yes;
        }
        else
        {
            printLedgerJournalizeReport = NoYes::No;
            numberSeq.abort();
            info("@SYS69792");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS12837";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static public void main(Args args)
    {
        LedgerJournalizeTrans ledgerJournalizeTrans = new LedgerJournalizeTrans();

        if (ledgerJournalizeTrans.prompt())
        {
            LedgerJournalizeReport tmpLedgerJournalizeReport;

            select firstonly AdvancedJournalizing from tmpLedgerJournalizeReport
                order by JournalizeNum desc;

            if (LedgerParameters::find().JournalizeSortorder != tmpLedgerJournalizeReport.AdvancedJournalizing)
            {
                if (!Box::yesNo("@SYS59046", DialogButton::Yes, "", ""))
                {
                    return;
                }
            }

            ledgerJournalizeTrans.runOperation();

            if (ledgerJournalizeTrans.printLedgerJournalizeReport)
            {
                ledgerJournalizeTrans.printout();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>