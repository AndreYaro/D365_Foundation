<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductReleaseSessionManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>EcoResProductReleaseSessionManager</c> class creates, sets up, and runs a release product
///    session.
/// </summary>
class EcoResProductReleaseSessionManager
{
    EcoResReleaseSessionRecId   releaseSessionRecId;
    private FormDataSource productVariantsFormDataSource;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmProductVariantsFormDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and gets the product variant form data source.
    /// </summary>
    /// <param name = "_productVariantsFormDataSource">The data source to set.</param>
    /// <returns>The product variant data source.</returns>
    /// <remarks>
    /// The variant data source is needed to check for filters and obtain the query. 
    /// This method was added in order not to break the public methods.
    /// </remarks>
    internal FormDataSource parmProductVariantsFormDataSource(FormDataSource _productVariantsFormDataSource)
    {
        productVariantsFormDataSource = _productVariantsFormDataSource;
        return productVariantsFormDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLegalEntityForAllProducts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a legal entity for which all products will be released.
    /// </summary>
    /// <param name="_legalEntityId">
    ///    An ID of the legal entity to add for all products in the release session.
    /// </param>
    public void addLegalEntityForAllProducts(RefRecId _legalEntityId)
    {
        EcoResProductReleaseSessionManager::addLegalEntityForAllProductsOnServer(_legalEntityId, releaseSessionRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLegalEntityForProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds legal entity that a product will be released to.
    /// </summary>
    /// <param name="_legalEntityId">
    ///    An ID of the legal entity to add.
    /// </param>
    /// <param name="_productRecId">
    ///    A product ID of the legal entity to be added for the release session.
    /// </param>
    public void addLegalEntityForProduct(
        RefRecId            _legalEntityId,
        EcoResProductRecId  _productRecId)
    {
        EcoResProductReleaseSessionManager::addLegalEntityForProductOnServer(_legalEntityId, _productRecId, releaseSessionRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a product to the release session.
    /// </summary>
    /// <param name="_productRecId">
    ///    A product ID to be added to the release session.
    /// </param>
    public void addProduct(EcoResProductRecId _productRecId)
    {
        EcoResProductReleaseSessionManager::addProductOnServer(_productRecId, releaseSessionRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductMasterWithVariants</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a product master with all the variants to the release session.
    /// </summary>
    /// <param name="_productMasterRecId">
    ///    A product master ID to be added to the release session with all of the variants.
    /// </param>
    public void addProductMasterWithVariants(EcoResProductMasterRecId _productMasterRecId)
    {
        EcoResProductReleaseSessionManager::addProductMasterWithVariantsOnServer(
            _productMasterRecId,
            releaseSessionRecId,
            true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductVariantsForProductMaster</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds all of the product variants for a product master to the release session.
    /// </summary>
    /// <param name="_productMasterRecId">
    ///    A product master ID.
    /// </param>
    public void addProductVariantsForProductMaster(EcoResProductMasterRecId _productMasterRecId)
    {
        if (this.isDataSourceFiltered())
        {
            this.addFilteredVariants();
        }
        else
        {
            EcoResProductReleaseSessionManager::addProductMasterWithVariantsOnServer(_productMasterRecId, releaseSessionRecId, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    public void cleanUp()
    {
        EcoResProductReleaseSessionManager::cleanUpOnServer(releaseSessionRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSession</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the whole release session.
    /// </summary>
    public void deleteSession()
    {
        if (!EcoResReleaseSession::isReleaseSessionBlocked(releaseSessionRecId))
        {
            EcoResReleaseSession session = EcoResReleaseSession::find(releaseSessionRecId, true);
            session.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the release session.
    /// </summary>
    /// <returns>
    ///    true if all products have been successfully released; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The products will be released to the legal entities according to the release session settings.
    /// </remarks>
    public boolean execute()
    {
        return EcoResProductReleaseSessionManager::executeOnServer(releaseSessionRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductAdded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a product is added to the release session.
    /// </summary>
    /// <param name="_productRecId">
    ///    A product ID.
    /// </param>
    /// <returns>
    ///    true if a product is added to a release session; otherwise, false.
    /// </returns>
    public boolean isProductAdded(EcoResProductRecId _productRecId)
    {
        return EcoResReleaseSessionProduct::isProductInReleaseSession(releaseSessionRecId, _productRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // overridden to make protected - to prevent direct instantiation
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseSessionRecId</Name>
				<Source><![CDATA[
    public EcoResReleaseSessionRecId parmReleaseSessionRecId(EcoResReleaseSessionRecId _releaseSessionRecId = releaseSessionRecId)
    {
        releaseSessionRecId = _releaseSessionRecId;

        return releaseSessionRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLegalEntityForAllProducts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a legal entity from list of legal entities for all products that are released.
    /// </summary>
    /// <param name="_legalEntityId">
    ///    A legal entity ID to be removed for all products in the release session.
    /// </param>
    public void removeLegalEntityForAllProducts(RefRecId _legalEntityId)
    {
        EcoResProductReleaseSessionManager::removeLegalEntityForAllProductsOnServer(_legalEntityId, releaseSessionRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLegalEntityForMasterWithVariants</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a legal entity from the list of legal entities for which the product master and all of the
    ///    distinct product variants are released.
    /// </summary>
    /// <param name="_legalEntityId">
    ///    A legal entity ID.
    /// </param>
    /// <param name="_productMasterRecId">
    ///    A product master ID.
    /// </param>
    public void removeLegalEntityForMasterWithVariants(
        RefRecId                    _legalEntityId,
        EcoResProductMasterRecId    _productMasterRecId)
    {
        EcoResProductReleaseSessionManager::removeLegalEntityForMasterWithVaOnServer(
            _legalEntityId,
            _productMasterRecId,
            releaseSessionRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLegalEntityForProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a legal entity from the list of entities for which a product is released to.
    /// </summary>
    /// <param name="_legalEntityId">
    ///    A legal entity ID to be removed for the specified product in the release session.
    /// </param>
    /// <param name="_productRecId">
    ///    A product ID from which the legal entity is removed.
    /// </param>
    public void removeLegalEntityForProduct(
        RefRecId            _legalEntityId,
        EcoResProductRecId  _productRecId)
    {
        EcoResProductReleaseSessionManager::removeLegalEntityForProductOnServer(_legalEntityId, _productRecId, releaseSessionRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a product from the release session.
    /// </summary>
    /// <param name="_productRecId">
    ///    A product ID to be removed from the release session.
    /// </param>
    public void removeProduct(EcoResProductRecId _productRecId)
    {
        EcoResProductReleaseSessionManager::removeProductOnServer(_productRecId, releaseSessionRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeProductMasterWithVariants</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a product master and all of the variants from the release session.
    /// </summary>
    /// <param name="_productMasterRecId">
    ///    A product master ID to be removed from the release session and all of the associated variants.
    /// </param>
    public void removeProductMasterWithVariants(EcoResProductMasterRecId _productMasterRecId)
    {
        EcoResProductReleaseSessionManager::removeProductMasterWithVariantsOnServer(
            _productMasterRecId,
            releaseSessionRecId,
            true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeProductVariantsForProductMaster</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes all of the product variants for a product master from the release session.
    /// </summary>
    /// <param name="_productMasterRecId">
    ///    A product master ID.
    /// </param>
    public void removeProductVariantsForProductMaster(EcoResProductMasterRecId _productMasterRecId)
    {
        if (this.isDataSourceFiltered())
        {
            this.removeFilteredVariants();
        }
        else
        {
            EcoResProductReleaseSessionManager::removeProductMasterWithVariantsOnServer(_productMasterRecId, releaseSessionRecId, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDataSourceFiltered</Name>
				<Source><![CDATA[
    private boolean isDataSourceFiltered()
    {
        return productVariantsFormDataSource && productVariantsFormDataSource.queryRun().query().queryFilterCount() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilteredVariants</Name>
				<Source><![CDATA[
    private void addFilteredVariants()
    {
        ttsbegin;
        TmpRecIdFilter tmpRecIdFilter = this.createTmpRecIdFilter();
        EcoResReleaseSessionProduct existingSessionProducts;
        EcoResReleaseSessionProduct target;
        NoYes systemAdded = NoYes::No;

        insert_recordset target (Product, ReleaseSession, SystemAdded)
              select RefRecId, releaseSessionRecId, systemAdded 
                from tmpRecIdFilter
               where tmpRecIdFilter.RefTableId == tableNum(EcoResDistinctProductVariant)
           notexists join existingSessionProducts
               where existingSessionProducts.Product == tmpRecIdFilter.RefRecId
                  && existingSessionProducts.ReleaseSession == releaseSessionRecId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFilteredVariants</Name>
				<Source><![CDATA[
    private void removeFilteredVariants()
    {
        ttsbegin;
        TmpRecIdFilter tmpRecIdFilter = this.createTmpRecIdFilter();

        EcoResReleaseSessionProduct target;
        delete_from target
              where target.ReleaseSession == releaseSessionRecId
             exists join tmpRecIdFilter
              where tmpRecIdFilter.RefRecId == target.Product
                 && tmpRecIdFilter.RefTableId == tableNum(EcoResDistinctProductVariant);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpRecIdFilter</Name>
				<Source><![CDATA[
    private TmpRecIdFilter createTmpRecIdFilter()
    {
        TmpRecIdFilter tmpRecIdFilter;
        RecordInsertList insertList = new RecordInsertList(tableNum(TmpRecIdFilter), true, true, true, true, true, tmpRecIdFilter);
        QueryRun queryRun = productVariantsFormDataSource.queryRun();
        queryRun.reset();

        while (queryRun.next())
        {
            EcoResDistinctProductVariant variant = queryRun.get(tableNum(EcoResDistinctProductVariant));
            tmpRecIdFilter.clear();
            tmpRecIdFilter.RefRecId = variant.RecId;
            tmpRecIdFilter.RefTableId = tableNum(EcoResDistinctProductVariant);
            insertList.add(tmpRecIdFilter);
        }

        insertList.insertDatabase();
        return tmpRecIdFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLegalEntityForAllProductsOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a legal entity for which all products will be released.
    /// </summary>
    /// <param name="_legalEntityId">
    ///    An ID of the legal entity for which to add for all products in the release session.
    /// </param>
    /// <param name="_releaseSessionRecId">
    ///    A release session ID for which to perform the action.
    /// </param>
    /// <remarks>
    ///    This method runs on the server to reduce the client server chatter.
    /// </remarks>
    private static void addLegalEntityForAllProductsOnServer(
        RefRecId                    _legalEntityId,
        EcoResReleaseSessionRecId   _releaseSessionRecId)
    {
        EcoResReleaseProductLegalEntity releaseProductLegalEntity;
        EcoResReleaseProductLegalEntity releaseProductLegalEntityNotExists;
        EcoResReleaseSessionProduct     releaseSessionProduct;

        ttsbegin;

        insert_recordset releaseProductLegalEntity (ReleaseSessionProduct, LegalEntity, SystemAdded)
            select RecId, _legalEntityId, SystemAdded from releaseSessionProduct
                where   releaseSessionProduct.ReleaseSession                        == _releaseSessionRecId
            notexists join releaseProductLegalEntityNotExists
                where   releaseProductLegalEntityNotExists.ReleaseSessionProduct    == releaseSessionProduct.RecId
                    &&  releaseProductLegalEntityNotExists.LegalEntity              == _legalEntityId;

        update_recordset releaseProductLegalEntity
            setting SystemAdded = NoYes::No
            where   releaseProductLegalEntity.SystemAdded       == NoYes::Yes
                 && releaseProductLegalEntity.LegalEntity       == _legalEntityId
                exists join    releaseSessionProduct
                where   releaseSessionProduct.RecId             == releaseProductLegalEntity.ReleaseSessionProduct
                    &&  releaseSessionProduct.ReleaseSession    == _releaseSessionRecId
                    &&  releaseSessionProduct.SystemAdded       == NoYes::No;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLegalEntityForProductOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a legal entity for which a product will be released.
    /// </summary>
    /// <param name="_legalEntityId">
    ///    An ID of the legal entity to add.
    /// </param>
    /// <param name="_productRecId">
    ///    A product ID of the legal entity to be added for in the release session.
    /// </param>
    /// <param name="_releaseSessionRecId">
    ///    A release session ID for which to perform the action.
    /// </param>
    /// <remarks>
    ///    This method runs on the server to reduce client server chatter.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The product was not added to the session before a legal entity was specified.
    /// </exception>
    public static void addLegalEntityForProductOnServer(
        RefRecId                    _legalEntityId,
        EcoResProductRecId          _productRecId,
        EcoResReleaseSessionRecId   _releaseSessionRecId)
    {
        EcoResReleaseSessionProduct     releaseSessionProduct;
        EcoResReleaseProductLegalEntity releaseProductMasterLegalEntity;
        EcoResReleaseProductLegalEntity releaseProductLegalEntityNotExists;
        NoYes                           productMasterSystemAdded = NoYes::Yes;

        ttsbegin;

        select firstonly RecId from releaseSessionProduct
            where  releaseSessionProduct.Product         == _productRecId
                && releaseSessionProduct.ReleaseSession  == _releaseSessionRecId
                && releaseSessionProduct.SystemAdded     == NoYes::No;

        if (!releaseSessionProduct.RecId)
        {
            throw error("@SYS330203");
        }

        EcoResReleaseProductLegalEntity releaseProductLegalEntity = EcoResReleaseProductLegalEntity::findByReleaseSessionProductLegalEntity(
            releaseSessionProduct.RecId,
            _legalEntityId,
            true);

        releaseProductLegalEntity.ReleaseSessionProduct = releaseSessionProduct.RecId;
        releaseProductLegalEntity.LegalEntity           = _legalEntityId;
        releaseProductLegalEntity.SystemAdded           = NoYes::No;
        releaseProductLegalEntity.write();

        //if a variant then add its master as SystemAdded if not already added.
        EcoResDistinctProductVariant distinctProductVariant = EcoResDistinctProductVariant::find(releaseSessionProduct.Product);
        if (distinctProductVariant.RecId)
        {
            insert_recordset releaseProductMasterLegalEntity (ReleaseSessionProduct, LegalEntity, SystemAdded)
                select RecId, _legalEntityId, productMasterSystemAdded from releaseSessionProduct
                    where releaseSessionProduct.ReleaseSession      == _releaseSessionRecId
                       && releaseSessionProduct.Product             == distinctProductVariant.ProductMaster
                notexists join releaseProductLegalEntityNotExists
                    where releaseProductLegalEntityNotExists.ReleaseSessionProduct    == releaseSessionProduct.RecId
                       && releaseProductLegalEntityNotExists.LegalEntity              == _legalEntityId;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductMasterWithVariantsOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a product master with all its variants to the release session.
    /// </summary>
    /// <param name="_productMasterRecId">
    /// A product master ID to be added to the release session with all its variants.
    /// </param>
    /// <param name="_releaseSessionRecId">
    /// A release session ID to perform the action on.
    /// </param>
    /// <param name="_includeProductMaster">
    /// A Boolean parameter that specifies if a product master should be added to the release session.
    /// </param>
    /// <remarks>
    /// The method runs on the server to reduce client-server chattiness.
    /// </remarks>
    private static void addProductMasterWithVariantsOnServer(
        EcoResProductMasterRecId    _productMasterRecId,
        EcoResReleaseSessionRecId   _releaseSessionRecId,
        boolean                     _includeProductMaster)
    {
        EcoResDistinctProductVariant        distinctProductVariant;
        EcoResReleaseSessionProduct         releaseSessionProductMaster;
        EcoResReleaseSessionProduct         releaseSessionProduct;
        EcoResReleaseSessionProduct         releaseSessionProductExisting;
        NoYes                               systemAdded = NoYes::No;

        ttsbegin;

        if (_includeProductMaster)
        {
            EcoResProductReleaseSessionManager::addProductOnServer(_productMasterRecId, _releaseSessionRecId);
        }
        else
        {
            if (!EcoResReleaseSessionProduct::existByReleaseSessionProduct(_releaseSessionRecId, _productMasterRecId))
            {
                releaseSessionProductMaster.Product        = _productMasterRecId;
                releaseSessionProductMaster.ReleaseSession = _releaseSessionRecId;
                releaseSessionProductMaster.SystemAdded    = NoYes::Yes;
                releaseSessionProductMaster.insert();
            }
        }

        EcoResDistinctProductVariantRecId productVariantRecId = EcoResProductVariantExistMgr::newFromProductMaster(_productMasterRecId).findVariantWithDefaultConfiguration();

        insert_recordset releaseSessionProduct
            (ReleaseSession, Product, SystemAdded)
            select  _releaseSessionRecId, RecId, systemAdded
            from    distinctProductVariant
                where   distinctProductVariant.ProductMaster    == _productMasterRecId
                &&      distinctProductVariant.RecId            != productVariantRecId
                notexists join  releaseSessionProductExisting
                    where   releaseSessionProductExisting.Product           == distinctProductVariant.RecId
                        &&  releaseSessionProductExisting.ReleaseSession    == _releaseSessionRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a product to the release session.
    /// </summary>
    /// <param name="_productRecId">
    ///    A product ID to be added to the release session.
    /// </param>
    /// <param name="_releaseSessionRecId">
    ///    A release session ID for which to perform the action.
    /// </param>
    /// <remarks>
    ///    The method runs on the server to reduce client server chatter.
    /// </remarks>
    private static void addProductOnServer(
        EcoResProductRecId          _productRecId,
        EcoResReleaseSessionRecId   _releaseSessionRecId)
    {
        EcoResDistinctProductVariant    distinctProductVariant;
        EcoResReleaseSessionProduct     releaseSessionProduct;
        boolean                         skipProduct = false;

        EcoResProduct product = EcoResProduct::find(_productRecId);

        ttsbegin;

        if (product.isProductMaster())
        {
            releaseSessionProduct = EcoResReleaseSessionProduct::findByReleaseSessionProduct(_releaseSessionRecId, _productRecId, true);
            if (!releaseSessionProduct.RecId || releaseSessionProduct.SystemAdded)
            {
                releaseSessionProduct.Product           = _productRecId;
                releaseSessionProduct.ReleaseSession    = _releaseSessionRecId;
                releaseSessionProduct.SystemAdded       = NoYes::No;
                releaseSessionProduct.write();
            }
        }
        else
        {
            if (product.isDistinctProductVariant())
            {
                distinctProductVariant = product as EcoResDistinctProductVariant;

                if (isConfigurationkeyEnabled(configurationKeyNum(config)) && EcoResProductVariantExistMgr::isDefaultConfigForConstrBasedProduct(distinctProductVariant.RecId))
                {
                    skipProduct = true; // the default configuration will be automatically released together with the product master for Constrained-Based product masters.
                }
            }

            if (!skipProduct && !EcoResReleaseSessionProduct::existByReleaseSessionProduct(_releaseSessionRecId, _productRecId))
            {
                releaseSessionProduct.Product           = _productRecId;
                releaseSessionProduct.ReleaseSession    = _releaseSessionRecId;
                releaseSessionProduct.SystemAdded       = NoYes::No;
                releaseSessionProduct.insert();
            }

            // If the product is a distinct product variant then master should be added with SystemAdded = Yes, if it is not added yet.
            if (!skipProduct && product.isDistinctProductVariant())
            {
                distinctProductVariant = product as EcoResDistinctProductVariant;
                if (!EcoResReleaseSessionProduct::existByReleaseSessionProduct(_releaseSessionRecId, distinctProductVariant.ProductMaster))
                {
                    releaseSessionProduct.Product           = distinctProductVariant.ProductMaster;
                    releaseSessionProduct.ReleaseSession    = _releaseSessionRecId;
                    releaseSessionProduct.SystemAdded       = NoYes::Yes;
                    releaseSessionProduct.insert();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpOnServer</Name>
				<Source><![CDATA[
    private static void cleanUpOnServer(EcoResReleaseSessionRecId _releaseSessionRecId)
    {
        if (!EcoResReleaseSession::isReleaseSessionBlocked(_releaseSessionRecId))
        {
            ttsbegin;
            EcoResReleaseSession::deleteAllProductLegalEntityWithoutLog(_releaseSessionRecId);
            EcoResReleaseSession::deleteAllProductsWithoutLegalEntities(_releaseSessionRecId);
            EcoResReleaseSession::deleteEmptySession(_releaseSessionRecId);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResProductReleaseSessionManager construct()
    {
        return new EcoResProductReleaseSessionManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseProductToLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the specified product to the specified legal entity.
    /// </summary>
    /// <param name = "_currentProduct">The product to release.</param>
    /// <param name = "_currentLegalEntity">The legal entity for which to release the product.</param>
    /// <param name = "_currentInfologLine">The current infolog line before the release session was executed.</param>
    /// <returns>true if the product has been successfully released; otherwise, false.</returns>
    protected static boolean releaseProductToLegalEntity(container _currentProduct, CompanyInfo _currentLegalEntity, int _currentInfologLine)
    {
        boolean retailEnabled = isConfigurationkeyEnabled(configurationKeyNum(Retail));
        boolean ret = true;

        RefRecId productRecId;
        RefRecId releaseProductLegalEntityRecId;
        boolean  isProcessingKit;
        [productRecId, releaseProductLegalEntityRecId, isProcessingKit] = _currentProduct;

        try
        {
            if (!isProcessingKit || !retailEnabled || EcoResProductReleaseSessionManager::existsKitElemenetsinLegalEntity(productRecId, _currentLegalEntity.DataArea))
            {
                ttsbegin;

                // Release product
                EcoResProductReleaseManagerBase::releaseProduct(productRecId, _currentLegalEntity.RecId);

                // Delete log if product was successfully released
                EcoResReleaseProductLegalEntityLog ecoResReleaseProductLegalEntityLog;
                delete_from ecoResReleaseProductLegalEntityLog
                        where ecoResReleaseProductLegalEntityLog.ReleaseProductLegalEntity == releaseProductLegalEntityRecId;

                ttscommit;
            }
        }
        catch
        {
            // Store release errors
            if (infologLine() > _currentInfologLine)
            {
                InfologData infologData = infolog.copy(_currentInfologLine + 1, infologLine());
                EcoResReleaseProductLegalEntityLog::saveInfologData(
                        releaseProductLegalEntityRecId,
                        infologData);

                ret = false;
            }

            // Remove release errors from the infolog
            infolog.clear(_currentInfologLine);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseProductsForLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the specified products to the specified legal entity.
    /// </summary>
    /// <param name = "_products">The Set of products to release.</param>
    /// <param name = "_currentLegalEntity">The legal entity for which to release the products.</param>
    /// <param name = "_currentInfologLine">The current infolog line before the release session was executed.</param>
    /// <returns>true if all products have been successfully released; otherwise, false.</returns>
    /// <remarks> 
    /// The first call of releaseMastersOrVariants is releasing the product masters and the distinct products
    /// The second one releases the product variants.
    /// The reason for that is that the products are stored in the set in random order and that for a variant to be released it's a requirement to have its master released.
    /// </remarks>
    [Replaceable]
    protected static boolean releaseProductsForLegalEntity(Set _products, CompanyInfo _currentLegalEntity, int _currentInfologLine)
    {
        boolean ret = true;

        changeCompany (_currentLegalEntity.DataArea)
        {
            SetEnumerator productsEnumerator = _products.getEnumerator();

            ret = EcoResProductReleaseSessionManager::releaseMastersOrVariants(ret, productsEnumerator, _currentLegalEntity, _currentInfologLine, true);

            productsEnumerator.reset();

            ret = EcoResProductReleaseSessionManager::releaseMastersOrVariants(ret, productsEnumerator, _currentLegalEntity, _currentInfologLine, false);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseMastersOrVariants</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method releases the set of products to be released. 
    /// If _releaseMastersorDistinct is true it releases the product master and the distinct products.
    /// If _releaseMastersorDistinct is false it releases the product variants.
    /// </summary>
    /// <param name = "_ret"> True if all the products have been released successfully. </param>
    /// <param name = "_productsEnumerator"> The enumerator of the set of the products to be released. </param>
    /// <param name = "_currentLegalEntity"> The legal entity for which to release the products. < /param>
    /// <param name = "_currentInfologLine"> The current infolog line before the release session was executed.</param> 
    /// <param name = "_releaseMastersorDistinct">
    /// If the flag is true, then the method releases product masters and distinct products.
    /// If the flag is false, then the method releases product variants.
    ///  </param>
    /// <returns> true if all products have been successfully released; otherwise, false. </returns>
    /// <remarks>
    /// isMasterOrDistinct is the local boolean that identifies if the product is a product master/distinct product or a variant. 
    /// True -> master/distinct, False -> variant 
    /// </remarks>
    private static boolean releaseMastersOrVariants(boolean _ret, SetEnumerator _productsEnumerator, CompanyInfo _currentLegalEntity, int _currentInfologLine, boolean _releaseMastersorDistinct)
    {
        boolean isMasterOrDistinct = false;        

        while (_productsEnumerator.moveNext())
        {
            if(conLen(_productsEnumerator.current()) > 3)
            {
                isMasterOrDistinct = conPeek(_productsEnumerator.current(), 4);            
            }
            else
            {
                isMasterOrDistinct = false;
            }
                       
            if((isMasterOrDistinct && _releaseMastersorDistinct) || (!isMasterOrDistinct && !_releaseMastersorDistinct))
            {
                _ret = EcoResProductReleaseSessionManager::releaseProductToLegalEntity(
                                _productsEnumerator.current(),
                                _currentLegalEntity,
                                _currentInfologLine)
                            && _ret;
            }
        }
        return _ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the release session.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    ///    The release session ID to be executed.
    /// </param>
    /// <returns>
    ///    true if all products have been successfully released; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The products will be released to the legal entities according to the release session settings.The
    ///    method runs on the server to reduce client-server communication.
    /// </remarks>
    ///
    static private boolean executeOnServer(EcoResReleaseSessionRecId _releaseSessionRecId)
    {
        EcoResReleaseSessionProduct     releaseSessionProduct;
        EcoResReleaseProductLegalEntity releaseProductLegalEntity;
        Map                             productsPerLegalEntity  = new Map(Types::Int64, Types::Class);

        void addProduct(boolean _isProcessingKit, boolean _isMasterOrDistinct)
        {
            Set products;

            if (!productsPerLegalEntity.exists(releaseProductLegalEntity.LegalEntity))
            {
                productsPerLegalEntity.insert(releaseProductLegalEntity.LegalEntity, new Set(Types::Container));
            }

            products = productsPerLegalEntity.lookup(releaseProductLegalEntity.LegalEntity);

            products.add([releaseSessionProduct.Product, releaseProductLegalEntity.RecId, _isProcessingKit, _isMasterOrDistinct]);
        }

        int currentInfologLine = infologLine();

        // Release product masters and distinct products
        EcoResProduct ecoResProduct;
        RetailKit     retailKit;
        RecId         instanceRelationTypeVariant = DictTable::getRelationTypeFromTableName(tableStr(EcoResDistinctProductVariant));
        
        while select Product from releaseSessionProduct
            order by Product
            join RecId, LegalEntity from releaseProductLegalEntity
                where   releaseSessionProduct.ReleaseSession            == _releaseSessionRecId
                    &&  releaseProductLegalEntity.SystemAdded           == NoYes::No
                    &&  releaseProductLegalEntity.ReleaseSessionProduct == releaseSessionProduct.RecId
            exists join ecoResProduct
                where   ecoResProduct.RecId                 == releaseSessionProduct.Product
                    &&  ecoResProduct.InstanceRelationType  != instanceRelationTypeVariant
            notExists join RetailKit
                where RetailKit.ProductMaster == releaseSessionProduct.Product
        {
            addProduct(false, true);
        }

        // Release distinct product variants
        EcoResDistinctProductVariant ecoResDistinctProductVariant;
        RetailKitVariantComponent    retailKitVariantComponent;
        while select Product from releaseSessionProduct
            order by Product
            join RecId, LegalEntity from releaseProductLegalEntity
                where   releaseSessionProduct.ReleaseSession            == _releaseSessionRecId
                    &&  releaseProductLegalEntity.SystemAdded           == NoYes::No
                    &&  releaseProductLegalEntity.ReleaseSessionProduct == releaseSessionProduct.RecId
            exists join ecoResDistinctProductVariant
                where   ecoResDistinctProductVariant.RecId                  == releaseSessionProduct.Product
                    &&  ecoResDistinctProductVariant.InstanceRelationType   == instanceRelationTypeVariant
            notExists join RetailKitVariantComponent
                where RetailKitVariantComponent.KitVariant == releaseSessionProduct.Product
        {
            addProduct(false, false);
        }

        // Release kit products
        while select Product from releaseSessionProduct
            order by Product
            join RecId, LegalEntity from releaseProductLegalEntity
                where   releaseSessionProduct.ReleaseSession            == _releaseSessionRecId
                    &&  releaseProductLegalEntity.SystemAdded           == NoYes::No
                    &&  releaseProductLegalEntity.ReleaseSessionProduct == releaseSessionProduct.RecId
            exists join ecoResProduct
                where   ecoResProduct.RecId                 == releaseSessionProduct.Product
                    &&  ecoResProduct.InstanceRelationType  != instanceRelationTypeVariant
            exists join retailKit
                where RetailKit.ProductMaster == releaseSessionProduct.Product
        {
            addProduct(true, true);
        }

        // Release distinct kit product variants
        while select Product from releaseSessionProduct
            order by Product
            join RecId, LegalEntity from releaseProductLegalEntity
                where   releaseSessionProduct.ReleaseSession            == _releaseSessionRecId
                    &&  releaseProductLegalEntity.SystemAdded           == NoYes::No
                    &&  releaseProductLegalEntity.ReleaseSessionProduct == releaseSessionProduct.RecId
            exists join ecoResDistinctProductVariant
                where   ecoResDistinctProductVariant.RecId                  == releaseSessionProduct.Product
                    &&  ecoResDistinctProductVariant.InstanceRelationType   == instanceRelationTypeVariant
            exists join RetailKitVariantComponent
                where RetailKitVariantComponent.KitVariant == releaseSessionProduct.Product
        {
            addProduct(false, false);
        }
        
        boolean isCrossCompanyProductCreated;
        boolean isPolicyEnabled;

        boolean allReleasedSuccessfully = true;
        MapEnumerator productsPerLegalEntityEnumerator = productsPerLegalEntity.getEnumerator();
        while (productsPerLegalEntityEnumerator.moveNext())
        {
            CompanyInfo currentLegalEntity = CompanyInfo::findRecId(productsPerLegalEntityEnumerator.currentKey());

            // If product is already released to a shared company it should not be released to other companies part of the policy.
            isPolicyEnabled = InventTableDataSharingFeature::isEnabled()
                && SysDataSharingPolicy::isSharingPolicyEnabledByCompanyAndTable(currentLegalEntity.DataArea, tableStr(InventTable));
            if (isPolicyEnabled && isCrossCompanyProductCreated)
            {
                continue;
            }
                
            allReleasedSuccessfully = EcoResProductReleaseSessionManager::releaseProductsForLegalEntity(
                    productsPerLegalEntityEnumerator.currentValue(),
                    currentLegalEntity,
                    currentInfologLine)
                && allReleasedSuccessfully;

            if (isPolicyEnabled)
            {
                isCrossCompanyProductCreated = true;
            }
        }

        // Unblock release session
        EcoResReleaseSession::unblockReleaseSession(_releaseSessionRecId);

        // Remove all products and legal entities from the session that have no logs - they were successfully released.
        // With exception of product masters for variants that haven't been successfully released
        EcoResProductReleaseSessionManager::cleanUpOnServer(_releaseSessionRecId);

        return allReleasedSuccessfully;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsKitElemenetsinLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a Retail Kit Product components and Substitutes are already released to Legal entity.
    /// </summary>
    /// <param name="_productRecId">
    ///    A product ID.
    /// </param>
    /// <param name="_company">
    ///    A company DataArea ID.
    /// </param>
    /// <returns>
    ///    true if a retail product kit components and Substitutes are released; otherwise, false.
    /// </returns>
    public static boolean existsKitElemenetsinLegalEntity(EcoResProductRecId  _productRecId, CompanyId _company)
    {
        RetailKitComponent retailKitComponent;
        RetailKitComponentSubstitute retailKitComponentSubstitute;
        boolean componentsExists=true;

        changecompany(_company)
        {
            if (RetailKit::findByProductmaster(_productRecId).Status==RetailKitStatus::Approved)
            {
                while select Component from retailKitComponent
                    where retailKitComponent.Kit == RetailKit::findByProductmaster(_productRecId).RecId
                {
                    if (!(retailKitComponent.Component && RetailKitConfigurator::isReleasedKitComponentByCompany(retailKitComponent.Component,_company)))
                    {
                        componentsExists = componentsExists && false;
                        throw error(strFmt("@REX4160791",EcoResProduct::find(retailKitComponent.Component).productName(),_company));
                    }
                    while select SubstituteProduct from retailKitComponentSubstitute
                    where retailKitComponentSubstitute.KitComponent == retailKitComponent.RecId
                    {
                        if (!(retailKitComponentSubstitute.SubstituteProduct && RetailKitConfigurator::isReleasedKitComponentByCompany(retailKitComponentSubstitute.SubstituteProduct,_company)))
                        {
                            componentsExists = componentsExists && false;
                            throw error(strFmt("@REX4160791",EcoResProduct::find(retailKitComponentSubstitute.SubstituteProduct).productName(),_company));
                        }
                    }
                }
            }
            else
            {
                throw error("@REX4160792");
            }
        }
        return componentsExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromReleaseSessionRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of the <c>EcoResProductReleaseSessionManager</c> class for
    ///    an existing release session.
    /// </summary>
    /// <param name="_releaseSessionRecId">
    ///    A release session ID.
    /// </param>
    /// <returns>
    ///    An instance of <c>EcoResProductReleaseSessionManager</c> class.
    /// </returns>
    public static EcoResProductReleaseSessionManager newFromReleaseSessionRecId(EcoResReleaseSessionRecId _releaseSessionRecId)
    {
        EcoResProductReleaseSessionManager  releaseSessionManager = EcoResProductReleaseSessionManager::construct();

        releaseSessionManager.parmReleaseSessionRecId(_releaseSessionRecId);

        return  releaseSessionManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReleaseSession</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of the <c>EcoResProductReleaseSessionManager</c> class for a
    ///    new release session.
    /// </summary>
    /// <returns>
    ///    An instance of <c>EcoResProductReleaseSessionManager</c> class.
    /// </returns>
    /// <remarks>
    ///    Creates a new release session.
    /// </remarks>
    public static EcoResProductReleaseSessionManager newReleaseSession()
    {
        EcoResProductReleaseSessionManager  releaseSessionManager = EcoResProductReleaseSessionManager::construct();
        EcoResReleaseSession                releaseSession;

        ttsbegin;
        releaseSession.insert();
        ttscommit;

        releaseSessionManager.parmReleaseSessionRecId(releaseSession.RecId);

        return  releaseSessionManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLegalEntitiesForMasterWithVariants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all legal entities from the list of entities to which a product master and the associated
    /// variants will be released.
    /// </summary>
    /// <param name="_productMasterRecId">
    /// The product master ID.
    /// </param>
    /// <param name="_releaseSessionRecId">
    /// The release session ID.
    /// </param>
    /// <param name="_includeProductMaster">
    /// A Boolean value that indicates if legal entities for a product master will be removed.
    /// </param>
    /// <remarks>
    /// This method runs on the server to reduce client server chatter.
    /// </remarks>
    private static void removeLegalEntitiesForMasterWithVariants(
        EcoResProductMasterRecId    _productMasterRecId,
        EcoResReleaseSessionRecId   _releaseSessionRecId,
        boolean                     _includeProductMaster)
    {
        ttsbegin;

        if (_includeProductMaster)
        {
            EcoResProductReleaseSessionManager::removeLegalEntitiesForProduct(_productMasterRecId, _releaseSessionRecId);
        }

        EcoResProductReleaseSessionManager::removeLegalEntitiesForVariants(_productMasterRecId, _releaseSessionRecId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLegalEntitiesForProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all legal entities from the list of entities to which a product will be released.
    /// </summary>
    /// <param name="_productRecId">
    /// The product ID.
    /// </param>
    /// <param name="_releaseSessionRecId">
    /// The release session ID.
    /// </param>
    /// <remarks>
    /// This method runs on the server to reduce client server chatter.
    /// </remarks>
    private static void removeLegalEntitiesForProduct(
        EcoResProductRecId          _productRecId,
        EcoResReleaseSessionRecId   _releaseSessionRecId)
    {
        EcoResReleaseProductLegalEntity     releaseProductLegalEntity;
        EcoResReleaseProductLegalEntityLog  releaseProductLegalEntityLog;
        EcoResReleaseSessionProduct         releaseSessionProduct;

        ttsbegin;

        //delete legal entity and legal entity logs records for master
        delete_from releaseProductLegalEntityLog
            exists join releaseProductLegalEntity
                where releaseProductLegalEntityLog.ReleaseProductLegalEntity == releaseProductLegalEntity.RecId
                exists join releaseSessionProduct
                    where releaseSessionProduct.RecId           == releaseProductLegalEntity.ReleaseSessionProduct
                        && releaseSessionProduct.Product        == _productRecId
                        && releaseSessionProduct.ReleaseSession == _releaseSessionRecId;

        releaseProductLegalEntity.skipDeleteActions(true);
        delete_from releaseProductLegalEntity
            exists join releaseSessionProduct
            where releaseSessionProduct.RecId           == releaseProductLegalEntity.ReleaseSessionProduct
                && releaseSessionProduct.Product        == _productRecId
                && releaseSessionProduct.ReleaseSession == _releaseSessionRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLegalEntitiesForVariants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all legal entities from the list of entities to which variants that are associated to a
    /// product master will be released.
    /// </summary>
    /// <param name="_productMasterRecId">
    /// A product master ID.
    /// </param>
    /// <param name="_releaseSessionRecId">
    /// A release session ID.
    /// </param>
    /// <remarks>
    /// This method runs on the server to reduce client server chatter.
    /// </remarks>
    private static void removeLegalEntitiesForVariants(
        EcoResProductMasterRecId    _productMasterRecId,
        EcoResReleaseSessionRecId   _releaseSessionRecId)
    {
        EcoResReleaseProductLegalEntity     releaseProductLegalEntity;
        EcoResReleaseProductLegalEntityLog  releaseProductLegalEntityLog;
        EcoResReleaseSessionProduct         releaseSessionProduct;
        EcoResDistinctProductVariant        distinctProductVariant;

        ttsbegin;

        //delete legal entity and legal entity logs records for variant
        delete_from releaseProductLegalEntityLog
            exists join releaseProductLegalEntity
                where releaseProductLegalEntityLog.ReleaseProductLegalEntity == releaseProductLegalEntity.RecId
                    exists join releaseSessionProduct
                        where   releaseSessionProduct.RecId           == releaseProductLegalEntity.ReleaseSessionProduct
                            &&  releaseSessionProduct.ReleaseSession  == _releaseSessionRecId
                        exists join distinctProductVariant
                            where   distinctProductVariant.RecId            == releaseSessionProduct.Product
                                &&  distinctProductVariant.ProductMaster    == _productMasterRecId;

        releaseProductLegalEntity.skipDeleteActions(true);
        delete_from releaseProductLegalEntity
            exists join releaseSessionProduct
                where   releaseSessionProduct.RecId           == releaseProductLegalEntity.ReleaseSessionProduct
                    &&  releaseSessionProduct.ReleaseSession  == _releaseSessionRecId
                exists join distinctProductVariant
                    where   distinctProductVariant.RecId            == releaseSessionProduct.Product
                        &&  distinctProductVariant.ProductMaster    == _productMasterRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLegalEntityForAllProductsOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a legal entity from the list of entities from which all products are released.
    /// </summary>
    /// <param name="_legalEntityId">
    ///    A legal entity ID to be removed for all products in the release session.
    /// </param>
    /// <param name="_releaseSessionRecId">
    ///    A release session ID for which to perform the action.
    /// </param>
    /// <remarks>
    ///    The method runs on the server to reduce client server chatter.
    /// </remarks>
    private static void removeLegalEntityForAllProductsOnServer(
        RefRecId                    _legalEntityId,
        EcoResReleaseSessionRecId   _releaseSessionRecId)
    {
        EcoResReleaseProductLegalEntity     releaseProductLegalEntity;
        EcoResReleaseProductLegalEntityLog  releaseProductLegalEntityLog;
        EcoResReleaseSessionProduct         releaseSessionProduct;

        ttsbegin;
        //remove records from EcoResReleaseProductLegalEntityLog
        //as we don't rely on DeleteAction in EcoResReleaseProductLegalEntity here
        //for performance reasons
        delete_from releaseProductLegalEntityLog
            exists join releaseProductLegalEntity
                where releaseProductLegalEntityLog.ReleaseProductLegalEntity == releaseProductLegalEntity.RecId
                   && releaseProductLegalEntity.LegalEntity == _legalEntityId
                exists join releaseSessionProduct
                    where releaseSessionProduct.RecId           == releaseProductLegalEntity.ReleaseSessionProduct
                       && releaseSessionProduct.ReleaseSession  == _releaseSessionRecId;

        releaseProductLegalEntity.skipDeleteActions(true);
        delete_from releaseProductLegalEntity
            where releaseProductLegalEntity.LegalEntity == _legalEntityId
            exists join releaseSessionProduct
            where releaseSessionProduct.RecId           == releaseProductLegalEntity.ReleaseSessionProduct
               && releaseSessionProduct.ReleaseSession  == _releaseSessionRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLegalEntityForMasterWithVaOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a legal entity from the list of entities that a product master and the associated variants
    ///    will be released to.
    /// </summary>
    /// <param name="_legalEntityId">
    ///    A legal entity ID.
    /// </param>
    /// <param name="_productMasterRecId">
    ///    A product master ID.
    /// </param>
    /// <param name="_releaseSessionRecId">
    ///    A release session ID.
    /// </param>
    /// <remarks>
    ///    This method runs on the server to reduce client server chatter.
    /// </remarks>
    private static void removeLegalEntityForMasterWithVaOnServer(
        RefRecId                    _legalEntityId,
        EcoResProductMasterRecId    _productMasterRecId,
        EcoResReleaseSessionRecId   _releaseSessionRecId)
    {
        EcoResReleaseProductLegalEntity     releaseProductLegalEntity;
        EcoResReleaseProductLegalEntityLog  releaseProductLegalEntityLog;
        EcoResReleaseSessionProduct         releaseSessionProduct;
        EcoResDistinctProductVariant        distinctProductVariant;

        ttsbegin;

        EcoResProductReleaseSessionManager::removeLegalEntityForProductOnServer(
            _legalEntityId,
            _productMasterRecId,
            _releaseSessionRecId);

        //remove records from EcoResReleaseProductLegalEntityLog
        //as we don't rely on DeleteAction in EcoResReleaseProductLegalEntity here
        //for performance reasons
        delete_from releaseProductLegalEntityLog
            exists join releaseProductLegalEntity
                where releaseProductLegalEntityLog.ReleaseProductLegalEntity == releaseProductLegalEntity.RecId
                   && releaseProductLegalEntity.LegalEntity == _legalEntityId
                    exists join releaseSessionProduct
                        where   releaseSessionProduct.RecId           == releaseProductLegalEntity.ReleaseSessionProduct
                            &&  releaseSessionProduct.ReleaseSession  == _releaseSessionRecId
                        exists join distinctProductVariant
                            where   distinctProductVariant.RecId            == releaseSessionProduct.Product
                                &&  distinctProductVariant.ProductMaster    == _productMasterRecId;

        releaseProductLegalEntity.skipDeleteActions(true);
        delete_from releaseProductLegalEntity
            where   releaseProductLegalEntity.LegalEntity == _legalEntityId
            exists join releaseSessionProduct
                where   releaseSessionProduct.RecId           == releaseProductLegalEntity.ReleaseSessionProduct
                    &&  releaseSessionProduct.ReleaseSession  == _releaseSessionRecId
                exists join distinctProductVariant
                    where   distinctProductVariant.RecId            == releaseSessionProduct.Product
                        &&  distinctProductVariant.ProductMaster    == _productMasterRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLegalEntityForProductOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a legal entity from the list of entities for which a product is released.
    /// </summary>
    /// <param name="_legalEntityId">
    ///    A legal entity ID to be removed for the specified product in the release session.
    /// </param>
    /// <param name="_productRecId">
    ///    A product ID from which the legal entity is removed.
    /// </param>
    /// <param name="_releaseSessionRecId">
    ///    A release session ID for which to perform the action.
    /// </param>
    /// <remarks>
    ///    This method runs on the server to reduce client server chatter.
    /// </remarks>
    private static void removeLegalEntityForProductOnServer(
        RefRecId                    _legalEntityId,
        EcoResProductRecId          _productRecId,
        EcoResReleaseSessionRecId   _releaseSessionRecId)
    {
        EcoResReleaseProductLegalEntity releaseProductLegalEntity;
        EcoResReleaseSessionProduct     releaseSessionProduct;

        ttsbegin;

        delete_from releaseProductLegalEntity
            where releaseProductLegalEntity.LegalEntity == _legalEntityId
            exists join releaseSessionProduct
            where releaseSessionProduct.RecId           == releaseProductLegalEntity.ReleaseSessionProduct
               && releaseSessionProduct.Product         == _productRecId
               && releaseSessionProduct.ReleaseSession  == _releaseSessionRecId;

        EcoResDistinctProductVariant distinctProductVariant = EcoResDistinctProductVariant::find(_productRecId);
        // If it was the last occurrence of the legal entity for all variants of a product master and this
        // legal entity was added for product master by system then it should be removed from product master as well.
        if (distinctProductVariant.RecId)
        {
            releaseSessionProduct = EcoResReleaseSessionProduct::findByReleaseSessionProduct(
                _releaseSessionRecId,
                distinctProductVariant.ProductMaster);
            EcoResReleaseProductLegalEntity releaseProductMasterLegalEntity = EcoResReleaseProductLegalEntity::findByReleaseSessionProductLegalEntity(
                releaseSessionProduct.RecId,
                _legalEntityId,
                true);

            if (releaseProductMasterLegalEntity.SystemAdded)
            {
                if (!EcoResReleaseProductLegalEntity::existProductVariantLEForMasterInSession(
                    _releaseSessionRecId,
                    distinctProductVariant.ProductMaster,
                    _legalEntityId))
                {
                    releaseProductMasterLegalEntity.delete();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeProductMasterWithVariantsOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a product master with all its variants from the release session.
    /// </summary>
    /// <param name="_productMasterRecId">
    /// A product master ID to be removed from the release session with all its variants.
    /// </param>
    /// <param name="_releaseSessionRecId">
    /// A release session ID to perform the action on.
    /// </param>
    /// <param name="_includeProductMaster">
    /// A Boolean parameter that specifies if a product master should be removed from the release session.
    /// </param>
    /// <remarks>
    /// The method runs on the server to reduce client-server chattiness.
    /// </remarks>
    private static void removeProductMasterWithVariantsOnServer(
        EcoResProductMasterRecId    _productMasterRecId,
        EcoResReleaseSessionRecId   _releaseSessionRecId,
        boolean                     _includeProductMaster)
    {
        EcoResReleaseSessionProduct     releaseSessionProduct;
        EcoResDistinctProductVariant    distinctProductVariant;

        ttsbegin;
        //we must delete records from EcoResReleaseProductLegalEntity and EcoResReleaseProductLegalEntityLog
        //as we don't rely on DeleteAction here
        //for performance reasons
        EcoResProductReleaseSessionManager::removeLegalEntitiesForMasterWithVariants(
            _productMasterRecId,
            _releaseSessionRecId,
            _includeProductMaster);

        //delete variants for a master from the session
        releaseSessionProduct.skipDeleteActions(true);
        delete_from releaseSessionProduct
            where releaseSessionProduct.ReleaseSession  ==  _releaseSessionRecId
            exists join distinctProductVariant
                where   distinctProductVariant.RecId            == releaseSessionProduct.Product
                    &&  distinctProductVariant.ProductMaster    == _productMasterRecId;

        if (_includeProductMaster)
        {
            EcoResProductReleaseSessionManager::removeProductOnServer(_productMasterRecId, _releaseSessionRecId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeProductOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a product from the release session.
    /// </summary>
    /// <param name="_productRecId">
    ///    A product ID to be removed from the release session.
    /// </param>
    /// <param name="_releaseSessionRecId">
    ///    A release session ID for which to perform the action.
    /// </param>
    /// <remarks>
    ///    This method runs on the server to reduce client server chatter.
    /// </remarks>
    private static void removeProductOnServer(
        EcoResProductRecId          _productRecId,
        EcoResReleaseSessionRecId   _releaseSessionRecId)
    {
        EcoResReleaseSessionProduct     releaseSessionProduct;
        EcoResReleaseSessionProduct     releaseSessionProductMaster;
        EcoResReleaseProductLegalEntity releaseProductLegalEntity;

        void deleteReleaseSessionProduct()
        {
            EcoResProductReleaseSessionManager::removeLegalEntitiesForProduct(_productRecId, _releaseSessionRecId);
            releaseSessionProduct.skipDeleteActions(true);
            delete_from releaseSessionProduct
                where releaseSessionProduct.ReleaseSession  == _releaseSessionRecId
                   && releaseSessionProduct.Product         == _productRecId;
        }

        ttsbegin;

        EcoResProduct product = EcoResProduct::find(_productRecId);
        if (product.isProductMaster())
        {
            // If product variants exist for product master then master should be marked as system added and not deleted.
            if (EcoResReleaseSessionProduct::existVariantForMasterInSession(_releaseSessionRecId, _productRecId))
            {
                update_recordset releaseSessionProductMaster
                    setting SystemAdded = NoYes::Yes
                    where releaseSessionProductMaster.ReleaseSession    == _releaseSessionRecId
                       && releaseSessionProductMaster.Product           == _productRecId;

                update_recordset releaseProductLegalEntity
                    setting SystemAdded = NoYes::Yes
                exists join releaseSessionProductMaster
                    where releaseSessionProductMaster.RecId             == releaseProductLegalEntity.ReleaseSessionProduct
                       && releaseSessionProductMaster.ReleaseSession    == _releaseSessionRecId
                       && releaseSessionProductMaster.Product           == _productRecId;
            }
            else
            {
                deleteReleaseSessionProduct();
            }
        }
        else
        {
            deleteReleaseSessionProduct();

            // If this variant is the last one for product master and product master is marked as system added then
            // product master should be also deleted.
            if (product.isDistinctProductVariant())
            {
                EcoResDistinctProductVariant distinctProductVariant = product as EcoResDistinctProductVariant;

                if (!EcoResReleaseSessionProduct::existVariantForMasterInSession(
                    _releaseSessionRecId,
                    distinctProductVariant.ProductMaster))
                {
                    delete_from releaseSessionProductMaster
                        where releaseSessionProductMaster.ReleaseSession    == _releaseSessionRecId
                           && releaseSessionProductMaster.Product           == distinctProductVariant.ProductMaster
                           && releaseSessionProductMaster.SystemAdded       == NoYes::Yes;
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>