<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NumberSeqModuleMasterPlanning</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class NumberSeqModuleMasterPlanning extends NumberSeqApplicationModule
{
    /// <summary>
    ///    Configures all the data types that are being used by the module.
    /// </summary>
    /*
    Detailed description of how to setup references for number sequences can
    be found i method loadModule() on the 'father' class: NumberSeqApplicationModule.
    */

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadModule</Name>
				<Source><![CDATA[
    protected void loadModule()
    {
        NumberSeqDatatype datatype = NumberSeqDatatype::construct();

        /* Setup Planned order id */

        datatype.parmDatatypeId(extendedTypeNum(ReqPOId));
        datatype.parmReferenceHelp(literalStr("@SYS53882"));
        datatype.parmReferenceLabel(literalStr("@SYS53889"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(10);
        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        /* Setup session log */

        datatype.parmDatatypeId(extendedTypeNum(ReqLogId));
        datatype.parmReferenceHelp(literalStr("@SYS53886"));
        datatype.parmReferenceLabel(literalStr("@SYS53890"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(999999);
        datatype.parmSortField(20);
        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        /* Setup forcast Planned order id */

        datatype.parmDatatypeId(extendedTypeNum(ReqPOIdForecast));
        datatype.parmReferenceHelp(literalStr("@SYS53883"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(30);
        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        /* Setup forcast Planned order id */

        datatype.parmDatatypeId(extendedTypeNum(ReqLogIdForecast));
        datatype.parmReferenceHelp(literalStr("@SYS53887"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(999999);
        datatype.parmSortField(40);
        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        /* Setup journal number */

        datatype.parmDatatypeId(extendedTypeNum(ReqItemJournalId));
        datatype.parmReferenceHelp(literalStr("@SYS74264"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(999999);
        datatype.parmSortField(50);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        /* Setup continuity Planned order id */
        datatype.parmDatatypeId(extendedTypeNum(MCRReqPOIdContinuity));
        datatype.parmConfigurationKeyId(configurationKeyNum(MCRCallCenter));
        datatype.parmReferenceHelp(literalStr("@MCR31176"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(999999);
        datatype.parmSortField(60);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        /* Setup continuity log */
        datatype.parmDatatypeId(extendedTypeNum(MCRReqLogIdContinuity));
        datatype.parmConfigurationKeyId(configurationKeyNum(MCRCallCenter));
        datatype.parmReferenceHelp(literalStr("@MCR31175"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(999999);
        datatype.parmSortField(70);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);           
    
        this.loadForecastNumberSequenceModule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadForecastNumberSequenceModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures all the data types that are being used by the forecast module.
    /// </summary>
    public void loadForecastNumberSequenceModule()
    {
        NumberSeqDatatype datatype = NumberSeqDatatype::construct();

        /* Setup demand forecast identifier */
        datatype.parmDatatypeId(extendedTypeNum(ForecastDemandForecastNumSeq));
        datatype.parmConfigurationKeyId(configurationKeyNum(Forecast));
        datatype.parmReferenceHelp(literalStr("@SCM:DemandForecastNumberSequenceReferenceHelp"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardHighest(999999999);
        // This method seems to be used to decide what order the sequences in this module will be generated.
        datatype.parmSortField(100);
        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the application-specific module for this class.
    /// </summary>
    /// <returns>
    ///    The module-specific ID.
    /// </returns>
    public NumberSeqModule numberSeqModule()
    {
        return NumberSeqModule::Req;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildModulesMapSubsciber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Appends the current class to the map that links modules to number sequence data type generators.
    /// </summary>
    [SubscribesTo(classstr(NumberSeqGlobal),delegatestr(NumberSeqGlobal,buildModulesMapDelegate))]
    static void buildModulesMapSubsciber(Map numberSeqModuleNamesMap)
    {
        NumberSeqGlobal::addModuleToMap(classnum(NumberSeqModuleMasterPlanning), numberSeqModuleNamesMap);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>