<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGenerateGIFTFile_CA</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Used to generate and persist a GIFT file.
/// </summary>
public class TaxGenerateGIFTFile_CA extends RunBase
{
    private const str FeatureReference = 'CA-00002';

    TransDate       fromDate;
    TransDate       toDate;

    DialogField     dialogFromDate;
    DialogField     dialogToDate;

    private static const str transactionType = 'GST34';
    private static const str taxAccountType = 'RT';

    public static const int currentVersion = 2;
    #localmacro.CurrentList
        fromDate,
        toDate
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description from the current class by calling the static description method on the class.
    /// </summary>
    /// <returns>
    /// The description from the current class.
    /// </returns>
    /// <remarks>
    /// This method can be overridden to give a more precise description. he static <c>RunBase::description
    /// </c> method is generally used to obtain the description of a class because it is not required to
    /// instantiate the class to call the method.
    /// </remarks>
    public ClassDescription caption()
    {
        return "@SYS313829";
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog;
        DialogGroup periodGroup;

        dialog = super();

        if (dialog)
        {
            periodGroup = dialog.addGroup("@SYS40");
            periodGroup.columns(2);

            dialogFromDate  = dialog.addFieldValue(extendedtypestr(FromDate), fromDate);

            dialogToDate    = dialog.addFieldValue(extendedtypestr(ToDate), toDate);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            fromDate = dialogFromDate.value();
            toDate   = dialogToDate.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates and persists the GIFT file.
    /// </summary>
    public void run()
    {
        TextBuffer      giftRecord = TaxGenerateGIFTFile_CA::generateGIFT(fromDate, toDate);

        this.persistGeneratedGIFT(giftRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateGIFT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the data for the GIFT file in text format.
    /// </summary>
    /// <param name="_fromDate">
    ///    The period starting date.
    /// </param>
    /// <param name="_toDate">
    ///    The period ending date.
    /// </param>
    /// <returns>
    /// A text buffer representation of the GIFT between given dates.
    /// </returns>
    public static TextBuffer generateGIFT(date _fromDate, date _toDate)
    {
        container       outputData = TaxGenerateGIFTFile_CA::getTaxTransData(_fromDate, _toDate);
        TextBuffer      giftRecord = TaxGenerateGIFTFile_CA::writeGIFTRecordToTextBuffer(outputData);

        return giftRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistGeneratedGIFT</Name>
				<Source><![CDATA[
    private void persistGeneratedGIFT(TextBuffer _generatedGIFT)
    {
        const str   defaultFineName = 'FormGST34.tax';
        TextStreamIo        textStreamIO = TextStreamIo::constructForWrite();

        textStreamIO.writeRaw(_generatedGIFT.getText());

        File::SendFileToUser(textStreamIO.getStream(), defaultFineName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version     = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case currentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super();

        if (ret)
        {
            if (fromDate > toDate)
            {
                ret = checkFailed("@SYS22806");
            }

            if (!fromDate || !toDate)
            {
                ret = checkFailed("@SYS24455");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxGenerateGIFTFile_CA construct()
    {
        return new TaxGenerateGIFTFile_CA();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the required tax-related data into the container by using the specified period range.
    /// </summary>
    /// <param name="_fromDate">
    ///    The period starting date.
    /// </param>
    /// <param name="_toDate">
    ///    The period ending date.
    /// </param>
    /// <returns>
    ///    A container which the data to write to the file.
    /// </returns>
    private static container getTaxTransData(FromDate _fromDate, ToDate _toDate)
    {
        CompanyInfo         companyInfo;
        TaxTrans            taxTrans;
        TaxRegistration_CA  taxRegistration_CA;
        container           record;
        TaxBaseCur          field105;
        TaxBaseCur          field108;
        TaxBaseCur          field110;
        TaxBaseCur          field111;
        TaxBaseCur          field114;
        TaxBaseCur          field115;
        TaxBaseCur          field205;
        TaxBaseCur          field405;

        TaxBaseCur getGSTHSTSourceTaxAmountCur(GSTHSTTaxType_CA _gsthsTtaxType)
        {
            taxTrans.clear();
            select sum(SourceTaxAmountCur)
                from
                    taxTrans
                where
                    (taxTrans.TransDate >= _fromDate
                    && taxTrans.TransDate <= _toDate)
                    && taxTrans.gsthstTaxType_CA == _gsthsTtaxType;
            return taxTrans.SourceTaxAmountCur;
        }

        companyInfo    =   CompanyInfo::find();

        record += companyInfo.SoftwareIdentificationCode_CA; //GIFT#SFT

        record += transactionType;                          //GIFT#TRS
        record += companyInfo.BusinessNumber_CA + taxAccountType + companyInfo.TaxGSTHSTAccountId_CA;  //GIFT#ACN

        record += date2str(_fromDate, 321, 2, 0, 2, 0, 4, DateFlags::None);   //GIFT#SDT
        record += date2str(_toDate, 321, 2, 0, 2, 0, 4, DateFlags::None);     //GIFT#NDT

        taxTrans.clear();
        select sum(SourceBaseAmountCur), sum(SourceTaxAmountCur)
            from
                taxTrans
            where
                taxTrans.TransDate >= _fromDate
                && taxTrans.TransDate <= _toDate
                && taxTrans.Source == TaxModuleType::Sales;

        record += taxTrans.SourceBaseAmountCur * -1; //GIFT#101
        field105 = taxTrans.SourceTaxAmountCur * -1;
        record += field105;

        taxTrans.clear();
        select sum(SourceTaxAmountCur)
            from
                taxTrans
            where
                (taxTrans.TransDate >= _fromDate
                && taxTrans.TransDate <= _toDate)
                && taxTrans.Source == TaxModuleType::Purch;

        field108 = taxTrans.SourceTaxAmountCur;
        record += field108;              //GIFT#108
        record += field105 - field108;   //GIFT#109 = GIFT#105 - GIFT#108

        taxTrans.clear();
        select sum(SourceBaseAmountCur)
            from
                taxTrans
            where
                (taxTrans.TransDate >= _fromDate
                && taxTrans.TransDate <= _toDate)
                && taxTrans.TaxOrigin == TaxOrigin::Payment;

        field110 = taxTrans.SourceBaseAmountCur;
        record += taxTrans.SourceBaseAmountCur;             //GIFT#110

        field111 = getGSTHSTSourceTaxAmountCur(GSTHSTTaxType_CA::Rebates111);
        record += field111;              //GIFT#111

        field205 = getGSTHSTSourceTaxAmountCur(GSTHSTTaxType_CA::TaxOnAcquisition205);
        record += field205;              //GIFT#205

        field405 = getGSTHSTSourceTaxAmountCur(GSTHSTTaxType_CA::SelfAssessment405);
        record += field405;              //GIFT#405

        field114 = field105 - field108
            - field110
            - field111 + field205 + field405;

        if (field114 < 0)
        {
            field114 = abs(field114);
            field115 = 0;
        }
        else
        {
            field115 = field114;
            field114 = 0;
        }

        record += field114;
        record += field115;              //GIFT#115

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TaxGenerateGIFTFile_CA generateGIFTFile_CA = TaxGenerateGIFTFile_CA::construct();

        if (generateGIFTFile_CA.prompt())
        {
            generateGIFTFile_CA.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeGIFTRecordToTextBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a text buffer that has the tax data in the GIFT format
    /// </summary>
    /// <param name="_giftField">
    /// A container with the tax-related data to write to the text buffer.
    /// </param>
    /// <returns>
    /// A text buffer containing the GIFT record to be persisted
    /// </returns>
    private static TextBuffer writeGIFTRecordToTextBuffer(container _giftField)
    {
        str                         labelValue,
                                    fieldValue,
                                    fieldValuecheck;

        int                         giftRecordLength,
                                    decimalPosition;

        container                   giftLabel;

        Counter                     counter;

        TextBuffer                  textBuffer;
        int                         strLength;

        #define.SFT('SFT')
        #define.ACN('ACN')
        #define.TRS('TRS')
        #define.SDT('SDT')
        #define.NDT('NDT')
        #define.101('101')
        #define.105('105')
        #define.108('108')
        #define.109('109')
        #define.110('110')
        #define.111('111')
        #define.205('205')
        #define.405('405')
        #define.114('114')
        #define.115('115')
        #define.EOD('EOD')
        #define.LabelDelimiter('*')
        #define.ValueDelimiter('~')
        #define.TrailingZeroes('00')
        #define.SingleTrailingZero('0')
        #define.Decimal('.')

        giftRecordLength = conLen(_giftField);

        giftLabel = [#SFT, #TRS, #ACN, #SDT, #NDT, #101, #105, #108, #109, #110, #111, #205, #405, #114, #115];

        textBuffer = new TextBuffer();

        for (counter = 1; counter <= giftRecordLength; counter++)
        {
            decimalPosition = 0;
            fieldValueCheck = '';
            labelValue = conPeek(giftLabel, counter);
            textBuffer.appendText(labelValue + #LabelDelimiter);

            fieldValue = conPeek(_gifTfield,counter);

            if (counter >= 6)
            {
                decimalPosition = strScan(fieldValue, #Decimal, 1, strLen(fieldValue));
                if (decimalPosition)
                {
                    fieldValuecheck = subStr(fieldValue, decimalPosition + 1, strLen(fieldValue));
                }

                if (str2num(fieldValueCheck) == 0)
                {
                    textBuffer.appendText(fieldvalue + #TrailingZeroes + #ValueDelimiter);
                }
                else
                {
                    // If the cents portion of the amount is in an increment of 10 cents, special
                    //  consideration needs to be made as it will be represented as one number after
                    //  the decimal (i.e. 0.4 instead of 0.40)
                    strLength = strLen(fieldValue);

                    // If the decimal is in the position just before the end of the string (i.e. '123.4')
                    if (decimalPosition && decimalPosition == (strLength-1))
                    {
                        textBuffer.appendText(strRem(fieldvalue, #Decimal) + #SingleTrailingZero + #ValueDelimiter);
                    }
                    else
                    {
                        textBuffer.appendText(strRem(fieldvalue, #Decimal) + #ValueDelimiter);
                    }
                }
            }
            else
            {
                textBuffer.appendText(fieldvalue + #ValueDelimiter);
            }
        }

        textBuffer.appendText(#EOD);

        return textBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>