<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchStatisticsController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchStatisticsController</c> class is the controller class for the
/// <c>PurchStatisticsItemVend</c>, <c>PurchStatisticsVendItem</c> and the <c>PurchReqStatistics</c>
/// reports.
/// </summary>
public class PurchStatisticsController extends SrsReportRunController implements BatchRetryable
{
    Query queryPurchReqStatstics;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQueryForPurchreqStatistics</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PurchReqStatstics</c> query.
    /// </summary>
    /// <returns>
    /// The <c>PurchReqStastics</c> query.
    /// </returns>
    public Query getQueryForPurchreqStatistics()
    {
        utcDatetime                     fromDate;
        utcDatetime                     toDate;
        Query                           query;
        QueryBuildDataSource            qbdsPurchReqLineHistory;
        QueryBuildDataSource            qbdsPurchReqTableHistory;
        PurchReqShowRequisitionsFilter  purchReqShowRequisitionsFilter;
        PurchReqRequisitionStatus       status;
        PurchReqShowRequisitions        showRequisitions;
        NoYes                           all = NoYes::No;
        PurchReqStatisticsContract      contract;

        query               =   new Query(queryStr(PurchReqStatistics));
        contract            =   this.parmReportContract().parmRdpContract() as PurchReqStatisticsContract;

        fromDate            =   DateTimeUtil::newDateTime(contract.parmFromDate(),0);
        toDate              =   DateTimeUtil::newDateTime(contract.parmToDate(), 86400);
        status              =   contract.parmStatus();
        showRequisitions    =   contract.parmShowRequisitions();
        all                 =   contract.parmAll();

        qbdsPurchReqLineHistory     = query.dataSourceTable(tablenum(PurchReqLineHistory));
        qbdsPurchReqTableHistory    = query.dataSourceTable(tablenum(PurchReqTableHistory));

        if (fromDate && toDate)
        {
            SysQuery::findOrCreateRange(qbdsPurchReqTableHistory, fieldNum(PurchReqTableHistory,SubmittedDateTime)).value(queryRange(fromDate,toDate));
        }

        SysQuery::findOrCreateRange(qbdsPurchReqLineHistory,fieldnum(PurchReqLineHistory, Status)).value(SysQuery::value(status));

        if (all != NoYes::Yes)
        {
            purchReqShowRequisitionsFilter = PurchReqShowRequisitionsFilter::newPurchReqLineHistory(qbdsPurchReqLineHistory, fieldnum(PurchReqLineHistory, Requisitioner));
            purchReqShowRequisitionsFilter.applyFilter(showRequisitions);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunValidate</Name>
				<Source><![CDATA[
        protected container preRunValidate()
    {
        #Define.WarningLimit(100000)

        // Using the query from the contract, count how many rows exist up to the first 100,001 since
        // the check for count just cares about more than 100,000; not the total number
        container   validateResult;
        int         rowCount = 0;
        Query       query;

        if (this.parmArgs().menuItemName() == menuitemOutputStr(PurchReqStatistics))
        {
           query  = this.getQueryForPurchreqStatistics();
        }
        else
        {
            query = this.getFirstQuery();
        }

        rowCount = queryRun::getQueryRowCount(query, 100001);

        if (rowCount > #WarningLimit)
        {
            // More than 100,000 rows will take at least 12 minutes on a standard
            // warm box with plenty of RAM, low volume, and not under load
            validateResult = [SrsReportPreRunState::Warning];
        }
        else
        {
            validateResult = super();
        }

        return validateResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report name based on caller menuitem.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> context.
    /// </param>
    /// <returns>
    /// The report name.
    /// </returns>
    public static str getReportName(Args _args)
    {
        str reportName;

        if (_args.menuItemName() == menuitemOutputStr(PurchStatistics_ItemVend))
        {
            reportName = ssrsReportStr(PurchStatisticsItemVend, Report);
        }
        else if (_args.menuItemName() == menuitemOutputStr(PurchStatistics_VendItem))
        {
            reportName = ssrsReportStr(PurchStatisticsVendItem, Report);
        }
        else if (_args.menuItemName() == menuitemOutputStr(PurchReqStatistics))
        {
            reportName = ssrsReportStr(PurchReqStatistics, Report);
        }

        return reportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        PurchStatisticsController  controller = new PurchStatisticsController();
        controller.parmReportName(PurchStatisticsController::getReportName(_args));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>