<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReopenContainer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class responsible for reopening a container.
/// </summary>
public class WHSReopenContainer
{
    WHSContainerTable   containerTable;
    boolean             containerIsOnFinalShippingLocation; 
    private boolean     mustDeferReopenContainer;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSReopenContainer construct()
    {
        return new WHSReopenContainer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromContainerTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>WHSReopenContainer</c> class based on a <c>WHSContainerTable</c> record.
    /// </summary>
    /// <param name = "_containerTable">The current container table record.</param>
    /// <returns>An instance of the <c>WHSReopenContainer</c> class.</returns>
    public static WHSReopenContainer newFromContainerTable(WHSContainerTable _containerTable)
    {
        WHSReopenContainer reopenContainerTable = WHSReopenContainer::construct();

        reopenContainerTable.parmContainerTable(_containerTable);
        reopenContainerTable.parmMustDeferReopenContainer(reopenContainerTable.mustDeferReopenContainer());

        return reopenContainerTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContainerTable</Name>
				<Source><![CDATA[
    public WHSContainerTable parmContainerTable(WHSContainerTable _containerTable = containerTable)
    {
        containerTable = _containerTable;

        return containerTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMustDeferReopenContainer</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmMustDeferReopenContainer(boolean _mustDeferReopenContainer = mustDeferReopenContainer)
    {
        mustDeferReopenContainer = _mustDeferReopenContainer;

        return mustDeferReopenContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reopenContainerAndUnmanifestContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reopens the container, if it is possible to do so, moves the items to the pack station in the initial license plate and
    /// unmanifests this container.
    /// </summary>
    public void reopenContainerAndUnmanifestContainer()
    {
        ttsbegin;

        containerTable.selectForUpdate(true);

        WHSCloseContainerProfile closeContainerProfile = WHSCloseContainerProfile::find(containerTable.CloseContainerProfileId);

        this.validateReopenContainerSupportedForCloseContainerProfile(closeContainerProfile);

        if (!mustDeferReopenContainer)
        {
            if (closeContainerProfile.ManifestRequirementsForContainer == WHSManifestRequirement::Manual)
            {
                containerTable.unManifestContainerManual();
            }
            else if (closeContainerProfile.ManifestRequirementsForContainer == WHSManifestRequirement::TransportationManagement
			    && !containerTable.checkAndUnmanifestSingleContainerTransportationManagement())
            {
                throw error("@WAX3327");
            }
        }

        this.reopenContainer();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeRelatedReturnDetail</Name>
				<Source><![CDATA[
    private void removeRelatedReturnDetail()
    {
        WHSReopenContainerReturnDetailHandler returnDetailHandler = WHSReopenContainerReturnDetailHandler::newFromContainerId(containerTable.ContainerId);
        returnDetailHandler.removeReturnDetails();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReopenContainerSupportedForCloseContainerProfile</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void validateReopenContainerSupportedForCloseContainerProfile(WHSCloseContainerProfile _closeContainerProfile)
    {
        // Left blank for extensibility purposes        
    }

]]></Source>
			</Method>
			<Method>
				<Name>reopenContainerAndUnmanifestShipmentRelatedToContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reopens the container, if it is possible to do so, moves the items to the pack station in the initial license plate and
    /// unmanifests the shipment related to this container.
    /// </summary>
    public void reopenContainerAndUnmanifestShipmentRelatedToContainer()
    {
        ttsbegin;

        containerTable.selectForUpdate(true);

        WHSCloseContainerProfile closeContainerProfile = WHSCloseContainerProfile::find(containerTable.CloseContainerProfileId);

        this.validateReopenContainerSupportedForCloseContainerProfile(closeContainerProfile);

        if (closeContainerProfile.ManifestRequirementsForContainer == WHSManifestRequirement::TransportationManagement
			&& !containerTable.checkAndUnmanifestShipmentRelatedToContainer())
        {
            throw error("@WAX3327");
        }

        this.reopenContainer();

        if (!mustDeferReopenContainer)
        {
            WHSShipmentTable::find(containerTable.ShipmentId).unManifestContainersOnShipmentManual(containerTable.MasterTrackingNum);
        }        

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reopenContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reopens the container, if it is possible to do so, and moves the items to the pack station in the initial license plate.
    /// </summary>
    private void reopenContainer()
    {
        WHSWorkTable workTableRelatedToContainer;

        if (!this.validateContainerTable())
        {
            throw error(strFmt("@WAX:ReopenContainerFailed", containerTable.ContainerId));
        }

        if (WHSCloseContainerProfile::find(containerTable.CloseContainerProfileId).ContainerClosingWorkCreationProcess == WHSWarehouseContainerClosingWorkCreationProcess::Automatic)
        {
            workTableRelatedToContainer = this.findContainerRelatedWork();
        }

        // Container can only be on the final shipping location if it is released
        containerIsOnFinalShippingLocation = containerTable.ContainerReleased;

        if (!containerIsOnFinalShippingLocation && !this.validateContainerIsOnInitialPackingLocation())
        {
            throw error(strFmt("@WAX:ReopenContainerFailed", containerTable.ContainerId));
        }

        if (!this.validateContainerRelatedWork(workTableRelatedToContainer))
        {
            throw error(strFmt("@WAX:ReopenContainerFailed", containerTable.ContainerId));
        }

        WHSWorkId   workIdToCancel;

        if (workTableRelatedToContainer.WorkId && workTableRelatedToContainer.WorkStatus == WHSWorkStatus::Open)
        {
            workIdToCancel = workTableRelatedToContainer.WorkId;
        }

        if (workIdToCancel)
        {
            WHSWorkTable::cancelWork(workIdToCancel);
            info(strFmt("@WAX1970", workIdToCancel, containerTable.ShipmentId));

            // Rereading the containerTable because WHSWorkTable::cancelWork updates the record.
            containerTable.reread();
        }

        if (containerIsOnFinalShippingLocation && mustDeferReopenContainer)
        {
            this.deferReopenContainer();
        }
        else
        {
            this.reopenContainerWithAdditionalSortingCleanupIfNeeded(containerIsOnFinalShippingLocation);
        
            this.updateContainerShipmentAndLoad();
        }

        this.removeRelatedReturnDetail();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContainerShipmentAndLoad</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void updateContainerShipmentAndLoad()
    {
        this.resetContainerTable();

        this.updateContainerTableToOpen();

        this.checkContainerLicensePlateWhole();

        this.updateShipmentAndLoadStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkContainerLicensePlateWhole</Name>
				<Source><![CDATA[
    /// <summary>
    /// If we are reopening a container which has the same Id as the License plate the items were on,
    /// check that we are in fact moving the entire LP and it has not been reused elsewhere already.
    /// By now we expect the items to have been returned to the original packing location.
    /// </summary>
    private void checkContainerLicensePlateWhole()
    {
        containerTable.checkContainerWholeLicensePlateMovedWithoutWork();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipmentAndLoadStatus</Name>
				<Source><![CDATA[
    private void updateShipmentAndLoadStatus()
    {
        WHSShipmentStatusUpdater shipmentStatusUpdater = WHSShipmentStatusUpdater::newFromShipmentId(containerTable.ShipmentId);
        shipmentStatusUpdater.updateWhenContainerReOpened();

        WHSLoadId loadId = WHSShipmentTable::find(containerTable.ShipmentId).LoadId;

        WHSLoadStatusUpdater loadStatusUpdater = WHSLoadStatusUpdater::newFromLoadId(loadId);
        loadStatusUpdater.updateWhenContainerReOpened();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findContainerRelatedWork</Name>
				<Source><![CDATA[
    private WHSWorkTable findContainerRelatedWork()
    {
        WHSWorkTable workTable;

        if (containerTable.ContainerGroupingLicensePlateId)
        {
            select firstonly workTable
                order by workTable.WorkStatus
                where workTable.TargetLicensePlateId	== containerTable.ContainerGroupingLicensePlateId
                    && workTable.WorkTransType			== WHSWorkTransType::PackedContainerPicking;
        }
		else
        {
            select firstonly workTable
				order by workTable.WorkStatus
				where workTable.ContainerId		== containerTable.ContainerId
					&& workTable.WorkTransType	== WHSWorkTransType::PackedContainerPicking;
        }

        return workTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateContainerRelatedWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the related work of the container, which will determine based on its existence and work status if
    /// it is possible to reopen the container or not.
    /// </summary>
    /// <param name="_workTable">
    /// The parameter of type <c>WHSWorkTable</c>.
    /// </param>
    /// <returns>True if the validation passes; otherwise false.</returns>
    private boolean validateContainerRelatedWork(WHSWorkTable _workTable)
    {
        WHSWorkId	workId;
        boolean     ret = true;

        if (_workTable.WorkId)
        {
            switch (_workTable.WorkStatus)
            {
                case WHSWorkStatus::Open:
                    containerIsOnFinalShippingLocation = false;
                    break;
                case WHSWorkStatus::InProcess:
                case WHSWorkStatus::Closed:
                    ret = checkFailed(strFmt("@WAX:ContainerHasRelatedInProcessOrClosedWork", _workTable.WorkId));
                    break;
                /*
					Variable containerIsOnFinalShippingLocation should not be set to false here, because of the following situation:
					Container was released with work creation, but the work was canceled.
					Then, the container is closed with a new container packing policy without work creation.
					When reopening container in that state, it would have work, but it would be on the final shipping location.
				*/
                case WHSWorkStatus::Cancelled:
                    break;
                default:
                    ret = checkFailed(strFmt("@WAX:ContainerReopenNotPossibleBecauseOfRelatedWork", workId));
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateContainerIsOnInitialPackingLocation</Name>
				<Source><![CDATA[
    private boolean validateContainerIsOnInitialPackingLocation()
    {
        boolean ret = true;

        if (!containertable.isContainerOnPackingLocation())
        {
            ret = checkFailed(strFmt("@WAX:ContainerIsNotOnPackingStation", containerTable.ContainerId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetContainerTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets values of the container.
    /// </summary>
    protected void resetContainerTable()
    {
        InventDim newContainerInventDim;    

        if (this.mustUpdateWarehouseAndLocationForContainer(containerTable))
        {      
            WHSContainerTrans containerTrans;

            // After a container is reopened, the location of the pack station is kept in the InventDim identified with InventDimIdTo
            select firstonly InventDimIdTo from containerTrans
                order by TransDateTime desc, ContainerTransId desc
                where containerTrans.ContainerId == containerTable.ContainerId;

            InventDim containerTransInventDimTo = InventDim::find(containerTrans.InventDimIdTo);

            newContainerInventDim.InventLocationId	= containerTransInventDimTo.InventLocationId;
            newContainerInventDim.wMSLocationId		= containerTransInventDimTo.wMSLocationId;
        }
		else
		{
			InventDim oldContainerInventDim = InventDim::find(containerTable.InventDimId);

			newContainerInventDim.InventLocationId	= oldContainerInventDim.InventLocationId;
			newContainerInventDim.wMSLocationId		= oldContainerInventDim.wMSLocationId;
        }

        newContainerInventDim = InventDim::findOrCreate(newContainerInventDim);

        containerTable.InventDimId					= newContainerInventDim.inventDimId;
        containerTable.ShipCarrierTrackingNum		= '';
        containerTable.CloseContainerUTCDateTime	= utcDateTimeNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateWarehouseAndLocationForContainer</Name>
				<Source><![CDATA[
    private boolean mustUpdateWarehouseAndLocationForContainer(WHSContainerTable _containerTable)
    {
        WHSCloseContainerProfile closeContainerProfile = WHSCloseContainerProfile::find(_containerTable.CloseContainerProfileId);

        return closeContainerProfile.ContainerClosingWorkCreationProcess == WHSWarehouseContainerClosingWorkCreationProcess::None
            || closeContainerProfile.ContainerClosingWorkCreationProcess ==  WHSWarehouseContainerClosingWorkCreationProcess::AssignContainerToSortPosition;

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContainerTableToOpen</Name>
				<Source><![CDATA[
    private void updateContainerTableToOpen()
    {
        containerTable.ContainerStatus		= WHSContainerStatus::Open;
        containerTable.ContainerReleased    = NoYes::No;

        if (!containerTable.validateWrite())
        {
            throw error(strFmt("@WAX:ReopenContainerFailed", containerTable.ContainerId));
        }

        containerTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateContainerTable</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean validateContainerTable()
    {
        if (containerTable.ContainerStatus != WHSContainerStatus::Closed)
        {
            return checkFailed("@WAX2583");
        }

        if (containerTable.ContainerBuildId)
        {
            return checkFailed("@WAX:ContainerCreatedByContainerizationCannotBeReopened");
        }

        if (containerTable.ErrorContainer == NoYes::Yes)
        {
            return checkFailed("@WAX5793");
        }

        if (WHSShipmentTable::find(containerTable.ShipmentId).ShipmentStatus == WHSShipmentStatus::Shipped)
        {
            return checkFailed("@WAX2584");
        }

        return this.validateNoOpenOutboundSortWork();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpickContainerLineAndLoadLine</Name>
				<Source><![CDATA[
    private void unpickContainerLineAndLoadLine(boolean _containerOnFinalShippingLocation)
    {
        if (WHSInventoryTransactionConfigurationProvider::shouldUseWarehouseInventoryTransactionStackForContainer(containerTable.ContainerId))
        {
            this.unpickContainerLineAndLoadLineReverseWarehouseInventoryTransactions(_containerOnFinalShippingLocation);
        }
        else
        {
            this.unpickContainerLinesAndIfOnFinalShippingLocationMoveToPackAndUnpickLoadLine(_containerOnFinalShippingLocation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpickContainerLinesAndIfOnFinalShippingLocationMoveToPackAndUnpickLoadLine</Name>
				<Source><![CDATA[
    private void unpickContainerLinesAndIfOnFinalShippingLocationMoveToPackAndUnpickLoadLine(boolean _containerOnFinalShippingLocation)
    {
        WHSContainerLine containerLine;

        while select containerLine
            where containerLine.ContainerId == containerTable.ContainerId
        {
            this.unpickContainerLine(_containerOnFinalShippingLocation, containerLine); 
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpickContainerLineAndLoadLineReverseWarehouseInventoryTransactions</Name>
				<Source><![CDATA[
    private void unpickContainerLineAndLoadLineReverseWarehouseInventoryTransactions(boolean _containerOnFinalShippingLocation)
    {
        WHSInventoryTransactionContainerReopenController    controller      = WHSInventoryTransactionContainerReopenController::construct();
        WHSInventoryItemSetsMap                             itemSetsMap     = WHSInventoryItemSetsMap::construct();
        
        WHSContainerLine containerLine;

        while select containerLine
            where containerLine.ContainerId == containerTable.ContainerId
        {
            WHSContainerTrans containerTrans = this.unpickContainerLine(_containerOnFinalShippingLocation, containerLine);

            controller.addToItemSet(containerLine, containerTrans, itemSetsMap);
        }

        controller.createInventoryTransactions(containerTable, itemSetsMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpickContainerLine</Name>
				<Source><![CDATA[
    private WHSContainerTrans unpickContainerLine(boolean _containerOnFinalShippingLocation, WHSContainerLine _containerLine)
    {
        InventHandlingQty inventHandlingQty = _containerLine.getInventoryHandlingQuantity();

        WHSLoadLine     loadLine            = WHSLoadLine::findbyRecId(_containerLine.LoadLine, true);
        InventDim       inventDimLoadLine   = loadLine.inventDim();
        Common          orderLine           = loadLine.getOrderCommonFromLoadLine(true);
        InventDim       pickedInventDim     = _containerLine.mergedClosedInventDim();
        boolean isCWItem = PdsGlobal::pdsIsCWItem(_containerLine.ItemId);

        if (_containerOnFinalShippingLocation)
        {
            this.unPickSourceDocumentTransaction(orderLine, pickedInventDim, isCWItem, _containerLine, inventHandlingQty);
        }
            
        InventMovement inventMovement = InventMovement::constructNoThrow(orderLine);
        this.updateInventTransDimension(inventMovement, pickedInventDim, inventDimLoadLine, isCWItem, _containerLine, inventHandlingQty);

        if (_containerOnFinalShippingLocation)
        {
            this.decreasePickedQtyForLoadLine(loadLine, inventHandlingQty, _containerLine.CapturedWeight);
                
            this.validateLoadLineInventTransConsistency(inventMovement, inventHandlingQty);
        }

        return this.revertContainerTrans(_containerLine, pickedInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>decreasePickedQtyForLoadLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void decreasePickedQtyForLoadLine(WHSLoadLine _loadLine, InventHandlingQty _inventHandlingQty, WHSCapturedWeight _capturedWeight)
    {
        _loadLine.PickedQty -= _inventHandlingQty;
        _loadLine.PickedWeight -= _capturedWeight;
        _loadLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoadLineInventTransConsistency</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void validateLoadLineInventTransConsistency(InventMovement _inventMovement, InventHandlingQty _inventHandlingQty)
    {
        if (_inventMovement.isItemWHSEnabled() && (!_inventMovement.pdsCWItem() || _inventHandlingQty))
        {
            _inventMovement.checkWHSLoadLineInventTransConsistency();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unPickSourceDocumentTransaction</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void unPickSourceDocumentTransaction(
        Common _orderLine,
        InventDim _pickedInventDim,
        boolean _isCWItem,
        WHSContainerLine _containerLine,
        InventHandlingQty _inventHandlingQty)
    {
        // Unpick the quantity of the sales Line and re-reserve
        WHSInvent::pickQuantities(_orderLine,
                                            _pickedInventDim.InventDimId,
                                            _isCWItem ? -_containerLine.CapturedWeight : -_inventHandlingQty,
                                            _isCWItem ? -_inventHandlingQty : 0,
                                            null,
                                            UnknownNoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTransDimension</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void updateInventTransDimension(
        InventMovement _inventMovement,
        InventDim _pickedInventDim,
        InventDim _inventDimLoadLine,
        boolean _isCWItem,
        WHSContainerLine _containerLine,
        InventHandlingQty _inventHandlingQty)
    {               
        if (_inventMovement && _inventDimLoadLine)
        {
            InventUpd_ChangeDimension::updateForceDimInventTrans(
                        _inventMovement,
                        _isCWItem ? -_containerLine.CapturedWeight : -_inventHandlingQty,
                        _pickedInventDim,
                        _inventDimLoadLine,
                        false,
                        true,
                        false,
                        _isCWItem ? -_inventHandlingQty : 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>revertContainerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves inventory of the container line back to the packing station location or default quality control location.
    /// </summary>
    /// <param name="_containerLine">
    /// The container line that inventory is being moved for.
    /// </param>
    /// <param name="_inventDim">
    /// The inventDim of the where the inventory is coming from.
    /// </param>
    /// <returns>Newly created container transaction.</returns>
    [Hookable(false)]
    internal WHSContainerTrans revertContainerTrans(
        WHSContainerLine    _containerLine,
        InventDim           _inventDim)
    {
        WHSContainerTrans   containerTrans;

        // Move the inventory back to where it was in pack station
        containerTrans.initFromContainerLine(_containerLine);
        // Use the container Trans set from Dim method to get the pack station inventDim
        // and set it to the to Inventdim.
        // From inventDim is actually going to be the location we put down the container
        containerTrans.setFromDim(_containerLine);
        containerTrans.TransDateTime    = DateTimeUtil::getSystemDateTime();
        containerTrans.InventDimIdTo    = containerTrans.InventDimIdFrom;
        containerTrans.InventDimIdFrom  = _inventDim.InventDimId;
        containerTrans.insert();

        if (containerTrans.InventDimIdFrom != containerTrans.InventDimIdTo
            && WHSInventTable::catchWeightTagDimensionTrackingMethod(_containerLine.ItemId) == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions)
        {
            WHSCatchWeightTagDimensionUpdater::newScannedTags(_containerLine.getAllCatchWeightTags(), InventDim::find(containerTrans.InventDimIdTo)).updateCatchWeightTags();
        }

        this.reopenContainerLinePackingWorkLine(_containerLine, containerTrans.InventDimIdTo);

        return containerTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reopenContainerLinePackingWorkLine</Name>
				<Source><![CDATA[
    private void reopenContainerLinePackingWorkLine(WHSContainerLine _containerLine, InventDimId _inventDimIdTo)
    {
        WHSWorkTable closedPackingWorkTable;
        WHSWorkLine  closedPackingWorkLine;

        select forupdate closedPackingWorkLine
            where closedPackingWorkLine.WorkType == WHSWorkType::Pick
            && closedPackingWorkLine.InventDimId == _containerLine.inventDim().inventDimId
               && closedPackingWorkLine.ItemId == _containerLine.ItemId
               && closedPackingWorkLine.LoadLineRefRecId == _containerLine.LoadLine
            join OrderNum from closedPackingWorkTable
                where closedPackingWorkTable.TargetLicensePlateId == containerTable.ContainerId
                   && closedPackingWorkTable.WorkTransType == WHSWorkTransType::Packing
                   && closedPackingWorkTable.WorkStatus == WHSWorkStatus::Closed
                   && closedPackingWorkTable.WorkId == closedPackingWorkLine.WorkId;

        if (!closedPackingWorkLine)
        {
            //it means that location is not enabled for packing works
            return;
        }

        InventDim    inventDim = InventDim::find(_inventDimIdTo);
        WHSWorkTable openPackingWorkTable;
        WHSWorkLine  openPackingWorkLine;

        WHSLicensePlateId toteLicensePlateId = inventDim.LicensePlateId;

        if (closedPackingWorkLine.OrigPackingWorkTargetLicensePlateId && WHSParameters::find().ToteReuse)
        {
            toteLicensePlateId = closedPackingWorkLine.OrigPackingWorkTargetLicensePlateId;
        }

        select firstonly WorkId from openPackingWorkTable
            where openPackingWorkTable.OrderNum == closedPackingWorkTable.OrderNum
               && openPackingWorkTable.TargetLicensePlateId == toteLicensePlateId
               && openPackingWorkTable.WorkTransType == WHSWorkTransType::Packing
               && openPackingWorkTable.WorkStatus == WHSWorkStatus::Open;

        select forupdate firstonly openPackingWorkLine
            where openPackingWorkLine.LoadLineRefRecId == closedPackingWorkLine.LoadLineRefRecId
               && openPackingWorkLine.WorkStatus == WHSWorkStatus::Open
               && openPackingWorkLine.InventDimId == closedPackingWorkLine.InventDimId
               && openPackingWorkLine.WorkId == openPackingWorkTable.WorkId;

        if (openPackingWorkLine)
        {
            openPackingWorkLine.QtyWork         += closedPackingWorkLine.QtyWork;
            openPackingWorkLine.InventQtyWork   += closedPackingWorkLine.InventQtyWork;

            if (!WHSPackingWorkRemainingQtyUpdateOnPackingFlight::instance().isEnabled())
            {
                openPackingWorkLine.QtyRemain       += closedPackingWorkLine.QtyWork;
                openPackingWorkLine.InventQtyRemain += closedPackingWorkLine.InventQtyWork;
            }

            openPackingWorkLine.update();
            closedPackingWorkLine.delete();

            WHSPackingWorkHelper::updatePutLineQty(openPackingWorkTable.WorkId);
            WHSPackingWorkHelper::updatePutLineQty(closedPackingWorkLine.WorkId);
        }
        else if (openPackingWorkTable)
        {
            WHSPackingWorkHelper::addWorkLineToWork(openPackingWorkTable.WorkId, closedPackingWorkLine.WorkId, closedPackingWorkLine.LineNum, true);
        }
        else
        {
            WHSPackingWorkHelper::createPackingWorkForWorkLine(closedPackingWorkLine.WorkId, closedPackingWorkLine.LineNum, toteLicensePlateId, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNoOpenOutboundSortWork</Name>
				<Source><![CDATA[
    private boolean validateNoOpenOutboundSortWork()
    {
        WHSOutboundSortPositionTrans sortPositionTrans;
        WHSOutboundSortPosition      sortPosition;
        WHSWorkTable                 workTable;
        WHSLoadLine                  loadLine;

        boolean ret = true;

        select firstonly RecId from workTable
            where workTable.WorkStatus <= WHSWorkStatus::InProcess // InProcess or Open
                && workTable.WorkTransType == WHSWorkTransType::SortedInventoryPicking
                exists join sortPosition
                    where sortPosition.LicensePlateId == workTable.TargetLicensePlateId
                        && sortPosition.SortPositionStatus == WHSOutboundSortPositionStatus::Closed
                exists join sortPositionTrans
                    where sortPositionTrans.OutboundSortPosition == sortPosition.RecId
                        && sortPositionTrans.SortIdentifier == containerTable.ContainerId
                exists join loadLine
                    where loadLine.RecId == sortPositionTrans.LoadLine
                        && loadLine.ShipmentId == containerTable.ShipmentId;

        if (workTable.RecId)
        {
            ret = checkFailed("@WAX:ReopenContainerOnSortedContainerError");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reopenContainerWithAdditionalSortingCleanupIfNeeded</Name>
				<Source><![CDATA[
    private void reopenContainerWithAdditionalSortingCleanupIfNeeded(boolean _containerIsOnFinalShippingLocation)
    {
        WHsOutboundSortRFInstruction sortRFInstruction;
        WHSOutboundSortPositionTrans sortPositionTrans;
        WHSOutboundSortPosition      sortPosition;
        WHSLoadLine                  loadLine;
        WHSWorkTable                 workTable;    

        select firstOnly OutboundSortPosition, RecId from sortPositionTrans
            where sortPositionTrans.SortIdentifier == containerTable.ContainerId                    
            join RecId, LicensePlateId, SortPositionStatus from sortPosition
                where sortPosition.RecId == sortPositionTrans.OutboundSortPosition                                         
            exists join loadLine
                where loadLine.RecId        == sortPositionTrans.LoadLine
            &&    loadLine.ShipmentId   == containerTable.ShipmentId; 

        if (sortPosition.LicensePlateId)
        {
            select firstOnly WorkStatus, RecId  from workTable
                where workTable.TargetLicensePlateId == sortPosition.LicensePlateId
                &&    workTable.WorkTransType == WHSWorkTransType::SortedInventoryPicking;
        }                                                      

        select firstOnly RecId from sortRFInstruction
            where sortRFInstruction.SortIdentifier == containerTable.ContainerId
            exists join loadLine
                where loadLine.RecId        == sortRFInstruction.LoadLineRecId
                    &&    loadLine.ShipmentId   == containerTable.ShipmentId;

        // It has been sorted, the sort position is closed, and there is either no outbound work or the work is closed
        // OR it is not in the process of being sorted or has not been sorted.
        if ((this.isContainerSortedAndSortPositionClosed(sortPositionTrans, sortPosition)
            && (!workTable.RecId 
                || workTable.WorkStatus == WHSWorkStatus::Closed))
        || (!sortRFInstruction.RecId
            && !sortPositionTrans.RecId))
        {
            this.unpickContainerLineAndLoadLine(_containerIsOnFinalShippingLocation);
            if (sortPositionTrans.RecId)
            {
                delete_from sortPositionTrans
                    where sortPositionTrans.SortIdentifier == containerTable.ContainerId
                    exists join loadLine
                        where loadLine.RecId        == sortPositionTrans.LoadLine
                        &&    loadLine.ShipmentId   == containerTable.ShipmentId;
            }
        }
        // It has been sorted or it is in the process of being sorted.
        else if (sortPositionTrans.RecId || sortRFInstruction.RecId)
        {
            // Delete sort instruction
            if (sortRFInstruction.RecId)
            {
                delete_from sortRFInstruction
                    where sortRFInstruction.SortIdentifier == containerTable.ContainerId
                    exists join loadLine
                        where loadLine.RecId        == sortRFInstruction.LoadLineRecId
                        &&    loadLine.ShipmentId   == containerTable.ShipmentId;
            }

            // Delete the sort
            if (sortPositionTrans.RecId)
            {
                delete_from sortPositionTrans
                    where sortPositionTrans.SortIdentifier == containerTable.ContainerId
                    exists join loadLine
                        where loadLine.RecId        == sortPositionTrans.LoadLine
                        &&    loadLine.ShipmentId   == containerTable.ShipmentId;
            }

            this.moveInventoryBackToPackingStation();

            // Update container (reset values)
            this.resetContainerTable();
            this.updateContainerTableToOpen();
        }      
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveInventoryBackToPackingStation</Name>
				<Source><![CDATA[
    private void moveInventoryBackToPackingStation()
    {
        if (WHSInventoryTransactionConfigurationProvider::shouldUseWarehouseInventoryTransactionStackForContainer(containerTable.ContainerId))
        {
            this.moveContainerToPackingStationCreateWarehouseInventoryTransaction();
        }
        else
        {
            this.moveContainerToPackingStation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveContainerToPackingStation</Name>
				<Source><![CDATA[
    private void moveContainerToPackingStation()
    {
        WHSContainerLine containerLine;

        while select containerLine
                where containerLine.ShipmentId  == containerTable.ShipmentId
                &&    containerLine.ContainerId == containerTable.ContainerId
        {
            InventDim pickedInventDim = containerLine.mergedClosedInventDim();

            this.revertContainerTrans(containerLine, pickedInventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveContainerToPackingStationCreateWarehouseInventoryTransaction</Name>
				<Source><![CDATA[
    private void moveContainerToPackingStationCreateWarehouseInventoryTransaction()
    {
        WHSInventoryTransactionContainerReopenController    controller      = WHSInventoryTransactionContainerReopenController::construct();
        WHSInventoryItemSetsMap                             itemSetsMap     = WHSInventoryItemSetsMap::construct();
        
        WHSContainerLine containerLine;

        while select containerLine
                where containerLine.ShipmentId  == containerTable.ShipmentId
                &&    containerLine.ContainerId == containerTable.ContainerId
        {
            InventDim pickedInventDim = containerLine.mergedClosedInventDim();

            WHSContainerTrans containerTrans = this.revertContainerTrans(containerLine, pickedInventDim);

            controller.addToItemSet(containerLine, containerTrans, itemSetsMap);
        }

        controller.createInventoryTransactions(containerTable, itemSetsMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isContainerSortedAndSortPositionClosed</Name>
				<Source><![CDATA[
    private boolean isContainerSortedAndSortPositionClosed(WHSOutboundSortPositionTrans _sortPositionTrans, WHSOutboundSortPosition _sortPosition)
    {
        return _sortPositionTrans.RecId 
            && _sortPosition.RecId
            && _sortPosition.SortPositionStatus == WHSOutboundSortPositionStatus::Closed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDeferReopenContainer</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean mustDeferReopenContainer()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deferReopenContainer</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void deferReopenContainer()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>