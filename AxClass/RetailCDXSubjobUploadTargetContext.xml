<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXSubjobUploadTargetContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Retail.CommerceDataExchange;

/// <summary>
/// <c>RetailCDXSubjobUploadTargetContext</c> represents the class which processes upload packets for a subjob.
/// </summary>
internal class RetailCDXSubjobUploadTargetContext
{
    Microsoft.Dynamics.Retail.CommerceDataExchange.DataFile dataFile;

    RetailConnSCUploadManager       uploadManager;
    TableName                       targetTableName;
    container                       targetColumns;
    str                             dataFilePath;
    str                             subjobId;
    int                             rowsAffected;
    int                             columnCount;
    RetailCDXJobUploadTargetContext   jobcontext;

    RetailCDXSubjobUploadTargetLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of <c>RetailCDXSubjobUploadTargetContext</c> class.
    /// </summary>
    /// <param name = "_dataFile">The subjob packet data file.</param>
    /// <param name = "_jobContext">The job's upload target context.</param>
    internal void new(Microsoft.Dynamics.Retail.CommerceDataExchange.DataFile _dataFile, RetailCDXJobUploadTargetContext _jobContext)
    {
        logger = new RetailCDXSubjobUploadTargetLogger(this);

        dataFile = _dataFile;
        jobcontext = _jobContext;
        uploadManager = new RetailConnSCUploadManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the subjob packet and insert the records to target tables.
    /// </summary>
    internal void execute()
    {
        System.Exception ex;

        try
        {
            logger.logCDXSubjobUploadTargetProcessingStart();

            this.initializeContext();
            
            boolean retryWithDeduplicationLogic = false;
            try
            {
                if (this.isRetailCdxAttemptUploadWithoutDeduplicationEnabled() && !retryWithDeduplicationLogic)
                {
                    // if the bypass deduplication feature is enabled then insert the Csv directly to the target AX table.
                    this.bulkInsertPacketToAxTable();
                }
                else
                {
                    // if the deduplication bypassing feature is not enabled
                    // or if a retry is triggered because processing failed with duplicate exception
                    // then apply the packet using a staging table to remove the duplicate records.
                    this.stagePacketToTempTable();

                    this.mergeStagedRecordToAXTable();
                }
            }
            catch (Exception::DuplicateKeyException)
            {
                if (this.isRetailCdxAttemptUploadWithoutDeduplicationEnabled() && !retryWithDeduplicationLogic)
                {
                    // if DuplicateKeyException is thrown when attempting to apply the packet with out deduplication
                    // then trigger a retry it using a staging table for deduplication.
                    retryWithDeduplicationLogic = true;
                    retry;
                }
            }
        }
        catch (ex)
        {
            logger.logCDXSubjobUploadTargetProcessingFailure(ex);
            throw error(strFmt("@Retail:CDXSubjobApplyUploadPacketErrMsg", this.paramSubjobID()));
        }
        finally
        {
            this.cleanUp();
            logger.logCDXSubjobUploadTargetProcessingStop(ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    private void cleanUp()
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException xppEx;
        System.Exception ex;

        try
        {
            uploadManager.cleanUp();
        }
        catch (xppEx)
        {
            // swallow
            logger.logCDXResourceCleanUpFailureWarning(xppEx);
        }
        catch (ex)
        {
            // swallow
            logger.logCDXResourceCleanUpFailureWarning(ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramRowsAffected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the number of rows affected.
    /// </summary>
    /// <param name = "_rowsAffected">The number of rows.</param>
    /// <returns>The number of rows.</returns>
    internal int paramRowsAffected(int _rowsAffected = rowsAffected)
    {
        rowsAffected = _rowsAffected;
        return rowsAffected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeContext</Name>
				<Source><![CDATA[
    private void initializeContext()
    {
        System.Exception ex;

        try
        {
            logger.logCDXSubjobUploadTargetCtxInitializationStart();

            this.paramSubjobID(ReflectionHelper::getObjectProperty(dataFile, 'SubJobId'));

            this.paramTargetTableName(dataFile.get_TargetTableName());

            dataFilePath = System.IO.Path::Combine(jobcontext.dataPackage.WorkingDirectoryPath, dataFile.get_FileName());

            CLRObject targetColumnCollection = Microsoft.Dynamics.Retail.CommerceDataExchange.CsvDataReader::GetColumnNames(dataFilePath);

            this.paramColumnCount(targetColumnCollection.get_Count());

            for (int i = 0; i < this.paramColumnCount(); ++i)
            {
                FieldName targetColumnName = targetColumnCollection.get_Item(i);
                targetColumns += targetColumnName;
            }

            uploadManager.createDataBulkCopy(targetTableName, targetColumns, dataFilePath);
        }
        catch (ex)
        {
            logger.logCDXSubjobUploadTargetCtxInitializationFailure(ex);
            throw error(strFmt("@Retail:CDXSubjobUploadTargetCtxErrMsg", this.paramSubjobID()));
        }
        finally
        {
            logger.logCDXSubjobUploadTargetCtxInitializationStop(ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>stagePacketToTempTable</Name>
				<Source><![CDATA[
    private void stagePacketToTempTable()
    {
        System.Exception ex;

        try
        {
            logger.logCDXSubjobUploadTargetStagePacketToTempTableStart();

            uploadManager.bulkCopyToTemp();
        }
        catch (ex)
        {
            logger.logCDXSubjobUploadTargetStagePacketToTempTableFailure(ex);
            throw error(strFmt("@Retail:stageSubjobUploadPacketToTempTblErrMsg", this.paramSubjobID()));
        }
        finally
        {
            logger.logCDXSubjobUploadTargetStagePacketToTempTableStop(ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeStagedRecordToAXTable</Name>
				<Source><![CDATA[
    private void mergeStagedRecordToAXTable()
    {
        System.Exception ex;

        try
        {
            logger.logCDXSubjobUploadTargetMergeStagedRecordToAXStart();

            int64 numberOfRowsAffected = uploadManager.insertToRegularTable();

            this.paramRowsAffected(int642int(numberOfRowsAffected));
        }
        catch (ex)
        {
            logger.logCDXSubjobUploadTargetMergeStagedRecordToAXFailure(ex);
            throw error(strFmt("@Retail:MergeUploadRecordToAXTblErrMsg", this.paramSubjobID()));
        }
        finally
        {
            logger.logCDXSubjobUploadTargetMergeStagedRecordToAXStop(ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bulkInsertPacketToAxTable</Name>
				<Source><![CDATA[
    private void bulkInsertPacketToAxTable()
    {
        System.Exception ex;
        Microsoft.Dynamics.Ax.Xpp.DuplicateKeyException duplicateKeyException;
        try
        {
            logger.logCDXSubjobUploadTargetBulkInsertPacketToAxTableStart();

            uploadManager.bulkCopyToTargetTable();
            this.rowsAffected = uploadManager.paramRowsAffected();
        }
        catch (duplicateKeyException)
        {
            ex = duplicateKeyException;
            logger.logCDXSubjobUploadTargetBulkInsertPacketToAxTableWarning(ex);
            throw Exception::DuplicateKeyException;
        }
        catch (ex)
        {
            logger.logCDXSubjobUploadTargetBulkInsertPacketToAxTableFailure(ex);
            throw error(strFmt("@Retail:stageSubjobUploadPacketToTempTblErrMsg", this.paramSubjobID()));
        }
        finally
        {
            logger.logCDXSubjobUploadTargetBulkInsertPacketToAxTableStop(ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramSubjobID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value for subjob ID in <c>RetailConnJobID</c>.
    /// </summary>
    /// <param name="_subJobID">The value of <c>RetailConnSubJobID</c>; optional.</param>
    /// <returns>Subjob ID.</returns>
    internal RetailConnJobID paramSubjobID(RetailConnJobID _subJobID = subJobID)
    {
        subJobID = _subJobID;

        return subJobID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramTargetTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value for target table name.
    /// </summary>
    /// <param name="_targetTableName">The value of the target table; optional.</param>
    /// <returns>Target table name.</returns>
    internal str paramTargetTableName(str _targetTableName = targetTableName)
    {
        targetTableName = _targetTableName;

        return targetTableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramColumnCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value for the column count.
    /// </summary>
    /// <param name="_columnCount">The value of the tcolumn count; optional.</param>
    /// <returns>The column count.</returns>
    internal int paramColumnCount(int _columnCount = columnCount)
    {
        columnCount = _columnCount;

        return columnCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramJobContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the job context.
    /// </summary>
    /// <param name="_jobcontext">The upload job target context; optional.</param>
    /// <returns>The upload job target context.</returns>
    internal RetailCDXJobUploadTargetContext paramJobContext(RetailCDXJobUploadTargetContext _jobcontext = jobcontext)
    {
        jobcontext = _jobcontext;

        return jobcontext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailCdxAttemptUploadWithoutDeduplicationEnabled</Name>
				<Source><![CDATA[
    internal boolean isRetailCdxAttemptUploadWithoutDeduplicationEnabled()
    {
        return RetailCdxAttemptUploadWithoutDeduplicationV2Flight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>