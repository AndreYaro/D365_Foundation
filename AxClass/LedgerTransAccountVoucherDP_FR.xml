<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransAccountVoucherDP_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerTransAccountVoucherDP_FR</c> class is the Report Data Provider class for the
/// <c>LedgerTransAccountVoucher_FR</c> Report.
/// </summary>
[SRSReportQueryAttribute (queryStr(LedgerTransAccountVoucher_FR)), SRSReportParameterAttribute(classStr(LedgerTransAccountVoucherContract_FR))]
public class LedgerTransAccountVoucherDP_FR extends SrsReportDataProviderPreProcessTempDB
{
    private LedgerTransAccountVoucherTmp_FR ledgerTransAccountVoucherTmp_FR;
    private FiscalCalendarPeriod fiscalCalendarPeriod;
    private GeneralJournalAccountEntry generalJournalAccountEntry;
    private GeneralJournalEntry generalJournalEntry;
    private SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
    private MainAccount mainAccount;
    private FiscalCalendarRecId calendarRecId;
    private Str60 periodStatus;
    private CompanyName companyName;
    private AmountMST transTotalDebit;
    private AmountMST transTotalCredit;
    private AmountMST accountBalance;
    private TransTxt ledgerTransTxt;
    private boolean useTotalByPeriod;
    private FromDate fromDate;
    private ToDate toDate;
    private MainAccountNum fromAccount;
    private MainAccountNum toAccount;
    private boolean includeGroupAccount;
    private boolean includeClosing;
    private boolean includeOpening;
    private boolean includeClosed;
    private boolean totalByVoucher;
    private List postingLayerMultiSelectFilter;
    private container postingLayerMultiSelectFilterCont;
    private AmountMST sumCreditAmountPage;
    private AmountMST sumDebitAmountPage;

    private const str emptyString = '';
    private const str starString = '*';
    private const str semiColString = ';';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerTransAccountVoucherTmp_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data from the <c>LedgerTransAccountVoucherTmp_FR</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>LedgerTransAccountVoucherTmp_FR</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(LedgerTransAccountVoucherTmp_FR))]
    public LedgerTransAccountVoucherTmp_FR getLedgerTransAccountVoucherTmp_FR()
    {
        select ledgerTransAccountVoucherTmp_FR;
        return ledgerTransAccountVoucherTmp_FR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccount</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected final MainAccount getMainAccount()
    {
        return mainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneralJournalAccountEntry</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected final GeneralJournalAccountEntry getGeneralJournalAccountEntry()
    {
        return generalJournalAccountEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneralJournalEntry</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected final GeneralJournalEntry getGeneralJournalEntry()
    {
        return generalJournalEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTempTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>LedgerTransAccountVoucherTmp_FR</c> table record.
    /// </summary>
    /// <param name = "_ledgerTransAccountVoucherTmp_FR"><c>LedgerTransAccountVoucherTmp_FR</c> table record buffer.</param>
    /// <param name = "_settled">Indicates the status of settlement for the current ledger transaction.</param>
    protected void initTempTableRecord(LedgerTransAccountVoucherTmp_FR _ledgerTransAccountVoucherTmp_FR, String50 _settled)
    {
        accountBalance = accountBalance + (transTotalDebit - transTotalCredit);

        if (this.checkAccountType())
        {
            sumCreditAmountPage += transTotalCredit;
            sumDebitAmountPage += transTotalDebit;
            ledgerTransAccountVoucherTmp_FR.CreditAmountWOTotals = transTotalCredit;
            ledgerTransAccountVoucherTmp_FR.DebitAmountWOTotals = transTotalDebit;
        }

        ledgerTransAccountVoucherTmp_FR.AccountName = mainAccount.localizedName();
        ledgerTransAccountVoucherTmp_FR.AccountNum = mainAccount.MainAccountId;
        ledgerTransAccountVoucherTmp_FR.AccountBalance = accountBalance;
        ledgerTransAccountVoucherTmp_FR.CompanyName = companyName;
        ledgerTransAccountVoucherTmp_FR.CreditAmount = transTotalCredit;
        ledgerTransAccountVoucherTmp_FR.DebitAmount = transTotalDebit;
        ledgerTransAccountVoucherTmp_FR.DocumentNum = generalJournalEntry.DocumentNumber;
        ledgerTransAccountVoucherTmp_FR.LedgerTransTxt = generalJournalAccountEntry.Text ? generalJournalAccountEntry.Text : ledgerTransTxt;
        ledgerTransAccountVoucherTmp_FR.PeriodStatus = periodStatus;
        ledgerTransAccountVoucherTmp_FR.Settled = _settled;
        ledgerTransAccountVoucherTmp_FR.TransDate = generalJournalEntry.AccountingDate;
        ledgerTransAccountVoucherTmp_FR.GeneralJournalEntry = generalJournalEntry.RecId;

        // only set the voucher for the header record
        if (generalJournalEntry.RecId)
        {
            if (generalJournalEntry.SubledgerVoucher)
            {
                ledgerTransAccountVoucherTmp_FR.Voucher = generalJournalEntry.SubledgerVoucher;
            }
            else
            {
                ledgerTransAccountVoucherTmp_FR.Voucher = "@SYS110428";
            }
        }
        else
        {
            ledgerTransAccountVoucherTmp_FR.Voucher = '';
        }

        ledgerTransAccountVoucherTmp_FR.SumCreditAmountPage = sumCreditAmountPage;
        ledgerTransAccountVoucherTmp_FR.SumDebitAmountPage = sumDebitAmountPage;
        ledgerTransAccountVoucherTmp_FR.PostingLayer = generalJournalEntry.PostingLayer;

    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>LedgerTransAccountVoucherTmp_FR</c> table.
    /// </summary>
    private void insertIntoTempTable()
    {
        String50 settled = this.isSettled();

        if (!includeClosed && settled == starString)
        {
            return;
        }

        ledgerTransAccountVoucherTmp_FR.clear();

        this.initTempTableRecord(ledgerTransAccountVoucherTmp_FR, settled);

        ledgerTransAccountVoucherTmp_FR.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cheks the main account type.
    /// </summary>
    /// <returns>
    /// true if the account type is matched to the specified enumeration values; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean checkAccountType()
    {
        return (mainAccount.Type == DimensionLedgerAccountType::Liability
            || mainAccount.Type == DimensionLedgerAccountType::Asset
            || mainAccount.Type == DimensionLedgerAccountType::BalanceSheet
            || mainAccount.Type == DimensionLedgerAccountType::Expense
            || mainAccount.Type == DimensionLedgerAccountType::Revenue
            || mainAccount.Type == DimensionLedgerAccountType::ProfitAndLoss
            || mainAccount.Type == DimensionLedgerAccountType::Equity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSettled</Name>
				<Source><![CDATA[
    [Replaceable(true)]
    protected String50 isSettled()
    {
        GeneralJournalAccountEntry accountEntry, accountEntryOffset;
        GeneralJournalEntry entry;
        LedgerTransSettlement settlement, settlementOffset;
        String50 ret = emptyString;

        if (generalJournalAccountEntry)
        {
            select firstonly maxof(AccountingDate) from entry
                exists join accountEntryOffset
                    where accountEntryOffset.GeneralJournalEntry == entry.RecId
                exists join settlementOffset
                    where settlementOffset.TransRecId == accountEntryOffset.RecId
                exists join settlement
                    where settlement.SettleId == settlementOffset.SettleId
                    && settlement.TransRecId == generalJournalAccountEntry.RecId;
        }
        else
        {
            select firstonly maxof(AccountingDate) from entry
                exists join accountEntryOffset
                    where accountEntryOffset.GeneralJournalEntry == entry.RecId
                exists join settlementOffset
                    where settlementOffset.TransRecId == accountEntryOffset.RecId
                exists join settlement
                    where settlement.SettleId == settlementOffset.SettleId
                exists join accountEntry
                    where accountEntry.RecId == settlement.TransRecId
                    && accountEntry.GeneralJournalEntry == generalJournalEntry.RecId;
        }

        if (entry.AccountingDate != dateNull() && entry.AccountingDate <= toDate)
        {
            ret = starString;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the period status value as open if the <c>FiscalCalendars</c> table returns a record
    /// based on the <c>FromDate</c> and <c>ToDate</c> UI parameters.
    /// </summary>
    public void periodStatus()
    {
        boolean isCloseYearExist;

        LedgerRecId ledgerRecId = Ledger::current();

        isCloseYearExist = LedgerFiscalCalendar::existYearByYearStatusDates(
                                    calendarRecId,
                                    ledgerRecId,
                                    toDate,
                                    fromDate,
                                    FiscalYearStatus::Close);

        periodStatus = isCloseYearExist ? "@SYS77870" : "@SYS19731";
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. The method will be called by
    /// SSRS at runtime and will compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        #ISOCountryRegionCodes
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoFR, GlobalizationConstants::FeatureReferenceFR00017] ],
            funcName()
        );
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoFR, GlobalizationConstants::FeatureReferenceFR00008] ],
            funcName()
        );

        FiscalPeriodType periodTypeFrom;
        FiscalPeriodType periodTypeTo;
        boolean transInPeriod;
        FiscalCalendarYear fiscalCalendarYear;
        StartDate startDate;
        Query query;
        QueryBuildDataSource qbds;
        QueryRun queryRun;
        MainAccount mainAccountExists;

        MainAccountNum tmpFromAccount;
        MainAccountNum tmpToAccount;
        DimensionAttributeValue dimAttrValue;
        DimensionAttributeValueFinancialStmt dimAttrValueFinStmt;
        Query tmpQuery;
        DimensionAttributeValueTotallingCriteria mainAccountTotalCriteria;
        LedgerTransAccountVoucherContract_FR contract = this.parmDataContract() as LedgerTransAccountVoucherContract_FR;

        fromDate = contract.parmFromDate();
        toDate = contract.parmToDate();
        fromAccount = contract.parmFromAccount();
        toAccount = contract.parmToAccount();
        includeClosed = contract.parmIncludeClosed();
        totalByVoucher = contract.parmTotalByVoucher();
        includeGroupAccount = contract.parmIncludeGroupAccount();
        includeOpening = contract.parmIncludeOpening();
        includeClosing = contract.parmIncludeClosing();
        useTotalByPeriod = contract.parmUseTotalByPeriod();
        postingLayerMultiSelectFilter = contract.parmPostingLayerMultiSelectFilter();

        postingLayerMultiSelectFilterCont = list2Con(postingLayerMultiSelectFilter);

        calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        this.periodStatus();

        startDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId,fromDate);
        if (includeOpening)
        {
            periodTypeFrom = FiscalPeriodType::Opening;
        }
        else
        {
            periodTypeFrom = FiscalPeriodType::Operating;
        }

        if (includeClosing)
        {
            periodTypeTo = FiscalPeriodType::Closing;
        }
        else
        {
            periodTypeTo = FiscalPeriodType::Operating;
        }

        query = this.parmQuery();

        if (postingLayerMultiSelectFilter.elements())
        {
            ListEnumerator postingLayerCollectionEnumerator = postingLayerMultiSelectFilter.getEnumerator();
            while (postingLayerCollectionEnumerator.moveNext())
            {
                qbds = query.dataSourceTable(tableNum(GeneralJournalEntry));
                qbds.addRange(fieldNum(GeneralJournalEntry, PostingLayer)).value(queryValue(postingLayerCollectionEnumerator.current()));
            }
        }

        qbds = query.dataSourceTable(tableNum(GeneralJournalAccountEntry));

        GeneralJournalEntry::addSecureRangeForLedger(query.dataSourceTable(tableNum(GeneralJournalEntry)));

        SysDaSearchObject searchObject = LedgerTransAccountVoucherDP_FRCalculateForMainAccountQuery::createSearchObject(mainAccount, fromAccount, toAccount, includeGroupAccount);

        SysDaSearchStatement searchStatement = new SysDaSearchStatement();

        while(searchStatement.next(searchObject))
        {
            tmpFromAccount = mainAccount.MainAccountId;
            tmpToAccount = mainAccount.MainAccountId;

            if (mainAccount.Type == DimensionLedgerAccountType::Total)
            {
                // account range for group total account
                mainAccountTotalCriteria = MainAccount::findTotalCriteria(mainAccount.RecId);
                if (mainAccountTotalCriteria.RecId)
                {
                    tmpFromAccount = mainAccountTotalCriteria.FromValue;
                    tmpToAccount = mainAccountTotalCriteria.ToValue;
                }
            }

            // Check for existence of transactions in the reporting period
            if (tmpFromAccount == tmpToAccount && tmpFromAccount == mainAccount.MainAccountId)
            {
                select firstonly RecId from generalJournalAccountEntry
                    where generalJournalAccountEntry.MainAccount == mainAccount.RecId
                    exists join generalJournalEntry
                        where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                            && generalJournalEntry.AccountingDate >= fromDate
                            && generalJournalEntry.AccountingDate <= toDate
                            && generalJournalEntry.PostingLayer in postingLayerMultiSelectFilterCont
                            && generalJournalEntry.SubledgerVoucherDataAreaId == curExt();
            }
            else
            {
                select firstonly RecId from  generalJournalAccountEntry
                    exists join generalJournalEntry
                        where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                            && generalJournalEntry.AccountingDate >= fromDate
                            && generalJournalEntry.AccountingDate <= toDate
                            && generalJournalEntry.PostingLayer in postingLayerMultiSelectFilterCont
                            && generalJournalEntry.SubledgerVoucherDataAreaId == curExt()
                    exists join mainAccountExists
                        where mainAccountExists.RecId == generalJournalAccountEntry.MainAccount
                            && mainAccountExists.MainAccountId >= tmpFromAccount
                            && mainAccountExists.MainAccountId <= tmpToAccount;
            }


            transInPeriod = false;
            if (generalJournalAccountEntry)
            {
                transInPeriod = true;
            }

            // Calculate opening balance for the account
            transTotalDebit = 0;
            transTotalCredit = 0;
            accountBalance = 0;

            while select sum(AccountingCurrencyAmount), IsCredit from generalJournalAccountEntry
                    group by generalJournalAccountEntry.IsCredit
                exists join generalJournalEntry
                    where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                        && generalJournalEntry.PostingLayer in postingLayerMultiSelectFilterCont
                        && generalJournalEntry.Ledger == Ledger::current()
                        && generalJournalEntry.AccountingDate == startDate
                exists join fiscalCalendarPeriod
                    where fiscalCalendarPeriod.RecId == generalJournalEntry.FiscalCalendarPeriod
                        && fiscalCalendarPeriod.Type == FiscalPeriodType::Opening
                exists join mainAccountExists
                    where mainAccountExists.RecId == generalJournalAccountEntry.MainAccount
                        && mainAccountExists.MainAccountId >= tmpFromAccount
                        && (!tmpToAccount || mainAccountExists.MainAccountId <= tmpToAccount)

            {
                switch (generalJournalAccountEntry.IsCredit)
                {
                    case NoYes::No:
                        transTotalDebit += generalJournalAccountEntry.AccountingCurrencyAmount;
                        break;

                    case NoYes::Yes:
                        transTotalCredit -= generalJournalAccountEntry.AccountingCurrencyAmount;
                        break;
                }
            }

            if (startDate < fromDate)
            {
                // Use the query updated above and assign it to the tmp query to update it.
                tmpQuery = new Query(query.pack());

                tmpQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry))
                    .addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount), SelectionField::Sum);

                tmpQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry))
                    .orderMode(OrderMode::GroupBy);
                tmpQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry))
                    .addSortField(fieldNum(GeneralJournalAccountEntry, IsCredit));

                tmpQuery.dataSourceTable(tableNum(MainAccount))
                    .addRange(fieldNum(MainAccount, MainAccountId))
                    .value(queryRange(tmpFromAccount, tmpToAccount));
                tmpQuery.dataSourceTable(tableNum(GeneralJournalEntry))
                    .addRange(fieldNum(GeneralJournalEntry, AccountingDate))
                    .value(queryRange(startDate, fromDate - 1));
                tmpQuery.dataSourceTable(tableNum(FiscalCalendarPeriod))
                    .addRange(fieldNum(FiscalCalendarPeriod, Type))
                    .value(queryValue(FiscalPeriodType::Operating));
                
                queryRun = new QueryRun(tmpQuery);

                while (queryRun.next())
                {
                    generalJournalAccountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry));
                    
                    switch (generalJournalAccountEntry.IsCredit)
                    {
                        case NoYes::No:
                            transTotalDebit += generalJournalAccountEntry.AccountingCurrencyAmount;
                            break;

                        case NoYes::Yes:
                            transTotalCredit -= generalJournalAccountEntry.AccountingCurrencyAmount;
                            break;
                    }
                }
            }

            // Print the account if transactions in period or an opening balance
            if (transInPeriod || transTotalDebit || transTotalCredit)
            {
                // 1. If "Include opening transaction amounts in detail" parameter is not marked (set to "No"), on top of the list of transactions there will be reported a line with Debit,
                //     Credit and Balance amounts on the beginning of the reporting period. “Text” column of this line contains the following wording: “Opening”, “Voucher” column for this line will remain empty.
                // 2. If "Include opening transaction amounts in detail" parameter marked (set to "Yes"), report includes general ledger account entry of “opening” type with respective voucher number.
                //     Line with Debit, Credit and Balance amounts on the beginning of the reporting period is not included into the report.
                // 3. If "Include opening transaction amounts in detail" parameter marked (set to "Yes"), but there is no general ledger account entry of “opening” type in the reporting period,
                //     on top of the list of transactions there will be line with Debit, Credit and Balance amounts on the beginning of the reporting period.
                if (!includeOpening || !this.existsOpeningTransaction(fromDate, tmpFromAccount, tmpToAccount))
                {
                    generalJournalAccountEntry.clear();
                    generalJournalEntry.clear();

                    generalJournalEntry.AccountingDate = fromDate;
                    generalJournalAccountEntry.Text = "@SYS939";
                    this.insertIntoTempTable();
                }

                MainAccountLegalEntity mainAccountLegalEntity;
                mainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(mainAccount.RecId, CompanyInfo::current());

                // Print the transactions

                if (useTotalByPeriod && mainAccountLegalEntity && mainAccountLegalEntity.TotalByPeriod_FR)
                {
                    while select StartDate, EndDate, Name, Type from fiscalCalendarPeriod
                            where fiscalCalendarPeriod.StartDate <= toDate
                                && fiscalCalendarPeriod.EndDate >= fromDate
                                && fiscalCalendarPeriod.Type >= periodTypeFrom
                                && fiscalCalendarPeriod.Type <= periodTypeTo
                        join Name from fiscalCalendarYear
                            where fiscalCalendarYear.FiscalCalendar == calendarRecId
                                && fiscalCalendarYear.RecId == fiscalCalendarPeriod.FiscalCalendarYear
                    {
                        transTotalDebit = 0;
                        transTotalCredit = 0;

                        tmpQuery = new Query(query.pack());
                        tmpQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry))
                            .addSelectionField(fieldNum(GeneralJournalAccountEntry,AccountingCurrencyAmount), SelectionField::Sum);

                        tmpQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry))
                            .orderMode(OrderMode::GroupBy);
                        tmpQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry))
                            .addSortField(fieldNum(GeneralJournalAccountEntry, IsCredit));

                        tmpQuery.dataSourceTable(tableNum(MainAccount))
                            .addRange(fieldNum(MainAccount, MainAccountId))
                            .value(queryRange(tmpFromAccount, tmpToAccount));
                        tmpQuery.dataSourceTable(tableNum(GeneralJournalEntry))
                            .addRange(fieldNum(GeneralJournalEntry, AccountingDate))
                            .value(queryRange(max(fiscalCalendarPeriod.StartDate, fromDate), min(fiscalCalendarPeriod.EndDate , toDate)));
                        tmpQuery.dataSourceTable(tableNum(FiscalCalendarPeriod))
                            .addRange(fieldNum(FiscalCalendarPeriod, Type))
                            .value(queryValue(fiscalCalendarPeriod.Type));
                        
                        queryRun = new QueryRun(tmpQuery);

                        while (queryRun.next())
                        {
                            generalJournalAccountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry));

                            switch (generalJournalAccountEntry.IsCredit)
                            {
                                case NoYes::Yes:
                                    transTotalCredit -= generalJournalAccountEntry.AccountingCurrencyAmount;
                                    break;

                                case NoYes::No:
                                    transTotalDebit += generalJournalAccountEntry.AccountingCurrencyAmount;
                                    break;
                            }
                        }

                        generalJournalAccountEntry.clear();
                        generalJournalEntry.clear();

                        ledgerTransTxt = strFmt("%1 - %2 %3", fiscalCalendarPeriod.StartDate, fiscalCalendarPeriod.EndDate, fiscalCalendarPeriod.Type);
                        generalJournalEntry.AccountingDate = fiscalCalendarPeriod.StartDate;
                        this.insertIntoTempTable();
                        ledgerTransTxt = emptyString;
                    }
                }
                else if (!totalByVoucher)
                {
                    tmpQuery = new Query(query.pack());

                    tmpQuery.dataSourceTable(tableNum(MainAccount))
                        .addSortField(fieldNum(MainAccount, MainAccountId));
                    tmpQuery.dataSourceTable(tableNum(GeneralJournalEntry))
                        .addSortField(fieldNum(GeneralJournalEntry, AccountingDate));
                    tmpQuery.dataSourceTable(tableNum(GeneralJournalEntry))
                        .addSortField(fieldNum(GeneralJournalEntry, SubledgerVoucher));
                    tmpQuery.dataSourceTable(tableNum(GeneralJournalEntry))
                        .addSortField(fieldNum(GeneralJournalEntry, JournalNumber));

                    tmpQuery.dataSourceTable(tableNum(MainAccount))
                        .addRange(fieldNum(MainAccount, MainAccountId))
                        .value(queryRange(tmpFromAccount, tmpToAccount));
                    tmpQuery.dataSourceTable(tableNum(GeneralJournalEntry))
                        .addRange(fieldNum(GeneralJournalEntry, AccountingDate))
                        .value(queryRange(fromDate, toDate));
                    tmpQuery.dataSourceTable(tableNum(FiscalCalendarPeriod))
                        .addRange(fieldNum(FiscalCalendarPeriod, Type))
                        .value(queryRange(periodTypeFrom, periodTypeTo));
                    
                    queryRun = new QueryRun(tmpQuery);
                    while (queryRun.next())
                    {
                        generalJournalAccountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry));
                        generalJournalEntry = queryRun.get(tableNum(GeneralJournalEntry));

                        switch (generalJournalAccountEntry.IsCredit)
                        {
                            case NoYes::Yes:
                                transTotalCredit = -generalJournalAccountEntry.AccountingCurrencyAmount;
                                transTotalDebit = 0;
                                break;

                            case NoYes::No:
                                transTotalDebit = generalJournalAccountEntry.AccountingCurrencyAmount;
                                transTotalCredit = 0;
                                break;
                        }

                        this.insertIntoTempTable();
                    }
                }
                else
                {
                    tmpQuery = new Query(query.pack());

                    tmpQuery.dataSourceTable(tableNum(MainAccount))
                        .addSortField(fieldNum(MainAccount, MainAccountId));
                    tmpQuery.dataSourceTable(tableNum(GeneralJournalEntry))
                        .addSortField(fieldNum(GeneralJournalEntry, AccountingDate));
                    tmpQuery.dataSourceTable(tableNum(GeneralJournalEntry))
                        .addSortField(fieldNum(GeneralJournalEntry, SubledgerVoucher));
                    tmpQuery.dataSourceTable(tableNum(GeneralJournalEntry))
                        .addSortField(fieldNum(GeneralJournalEntry, JournalNumber));
                    tmpQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry))
                        .addSortField(fieldNum(GeneralJournalAccountEntry, IsCredit));

                    tmpQuery.dataSourceTable(tableNum(GeneralJournalEntry))
                        .addSelectionField(fieldNum(GeneralJournalEntry, DocumentNumber), SelectionField::Max);
                    tmpQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry))
                        .addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount), SelectionField::Sum);
                    tmpQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry))
                        .addSelectionField(fieldNum(GeneralJournalAccountEntry, Text), SelectionField::Max);

                    tmpQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry))
                        .orderMode(OrderMode::GroupBy);
                    tmpQuery.dataSourceTable(tableNum(GeneralJournalEntry))
                        .orderMode(OrderMode::GroupBy);

                    tmpQuery.dataSourceTable(tableNum(MainAccount))
                        .addRange(fieldNum(MainAccount, MainAccountId))
                        .value(queryRange(tmpFromAccount, tmpToAccount));
                    tmpQuery.dataSourceTable(tableNum(GeneralJournalEntry))
                        .addRange(fieldNum(GeneralJournalEntry, AccountingDate))
                        .value(queryRange(fromDate, toDate));
                    tmpQuery.dataSourceTable(tableNum(FiscalCalendarPeriod))
                        .addRange(fieldNum(FiscalCalendarPeriod, Type))
                        .value(queryRange(periodTypeFrom, periodTypeTo));
                    tmpQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry))
                        .addRange(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount))
                        .value('!0');

                    queryRun = new QueryRun(tmpQuery);
                    while (queryRun.next())
                    {
                        generalJournalAccountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry));
                        generalJournalEntry = queryRun.get(tableNum(GeneralJournalEntry));
                        generalJournalEntry.RecId = 1;

                        switch (generalJournalAccountEntry.IsCredit)
                        {
                            case NoYes::No:
                                transTotalDebit = generalJournalAccountEntry.AccountingCurrencyAmount;
                                transTotalCredit = 0;
                                break;

                            case NoYes::Yes:
                                transTotalCredit = -generalJournalAccountEntry.AccountingCurrencyAmount;
                                transTotalDebit = 0;
                                break;
                        }

                        this.insertIntoTempTable();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOpeningTransaction</Name>
				<Source><![CDATA[
    private boolean existsOpeningTransaction(
        TransDate _accountingDate,
        MainAccountNum _fromAccount,
        MainAccountNum _toAccount)
    {
        boolean ret;

        GeneralJournalAccountEntry generalJournalAccountEntryLocal;
        GeneralJournalEntry generalJournalEntryLocal;
        FiscalCalendarPeriod fiscalCalendarPeriodLocal;
        MainAccount mainAccountExists;

        select firstonly RecId from generalJournalAccountEntryLocal
            exists join generalJournalEntryLocal
                where generalJournalEntryLocal.RecId == generalJournalAccountEntryLocal.GeneralJournalEntry
                    && generalJournalEntryLocal.PostingLayer in postingLayerMultiSelectFilterCont
                    && generalJournalEntryLocal.Ledger == Ledger::current()
                    && generalJournalEntryLocal.AccountingDate == _accountingDate
            exists join fiscalCalendarPeriodLocal
                where fiscalCalendarPeriodLocal.RecId == generalJournalEntryLocal.FiscalCalendarPeriod
                    && fiscalCalendarPeriodLocal.Type == FiscalPeriodType::Opening
            exists join mainAccountExists
                where mainAccountExists.RecId == generalJournalAccountEntryLocal.MainAccount
                    && mainAccountExists.MainAccountId >= _fromAccount
                    && (!_toAccount
                        || mainAccountExists.MainAccountId <= _toAccount);

        if (generalJournalAccountEntryLocal)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>