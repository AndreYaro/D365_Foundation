<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchTableLedgerCovTypeByLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class SalesPurchTableLedgerCovTypeByLine extends SalesPurchTableLedgerCovType
{
    private Map lineMap;
    private AmountCur totalLineAmount;
    private int lineCount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public void init(
        SalesPurchTableLedgerCovContract _contract)
    {
        super(_contract);

        this.initLineMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineMap</Name>
				<Source><![CDATA[
    private void initLineMap()
    {
        lineMap = new Map(Types::Integer, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInvoiceLine</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void processInvoiceLine(TransDate _invoiceDate, SalesPurchLineInterface _salesPurchLineInterface)
    {
        TransDate invoiceDate = this.determineInvoiceDate(_salesPurchLineInterface.deliveryDate());

        super(invoiceDate, _salesPurchLineInterface);

        lineCount++;

        TransDate dueDate = this.determineDueDate(invoiceDate);

        SalesQty qtySales = _salesPurchLineInterface.parmRemainFinancialQty() + _salesPurchLineInterface.parmRemainPhysicalQty();

        AmountCur lineAmount = _salesPurchLineInterface.calcLineAmount(qtySales) * contract.parmSign();

        lineMap.insert(lineCount, [invoiceDate, dueDate, lineAmount]);

        totalLineAmount += lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPayments</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void processPayments(
        TransDate _invoiceDate)
    {
        const int isFirstInvoice = 1;

        TransDate invoiceDate;
        TransDate dueDate;
        AmountCur lineAmount;

        if (totalLineAmount == 0)
        {
            return;
        }

        AmountCur totalInvoiceAmount = contract.totalAmount() * contract.parmSign();
        AmountCur totalInvoiceAmountLessHeaderMarkup;

        Set invoiceDateSet = new Set(Types::Date);

        Set keySet = lineMap.keySet();
        SetEnumerator keySetEnumerator = keySet.getEnumerator();
        while (keySetEnumerator.moveNext())
        {
            int i = keySetEnumerator.current();

            [invoiceDate, dueDate, lineAmount] = lineMap.lookup(i);

            if (i == isFirstInvoice)
            {
                totalInvoiceAmountLessHeaderMarkup = this.updateLedgerCovWithInvoiceMarkupKeepAndNoKeep(invoiceDate, dueDate, totalInvoiceAmount);

                invoiceDateSet.add(invoiceDate);
            }
            else
            {
                if (!invoiceDateSet.in(invoiceDate))
                {
                    this.updateLedgerCovWithInvoiceMarkupKeep(invoiceDate, dueDate, totalInvoiceAmount);

                    invoiceDateSet.add(invoiceDate);
                }
            }


            //We allocate all taxes and future payments based on the line factor
            Factor lineFactor = lineAmount / totalLineAmount;

            contract.parmLedgerCoverage().setRemainingPercentage(lineFactor);

            this.updateLedgerCovForInvoiceTaxes(invoiceDate);
            this.updateLedgerCovForInvoiceSummary(invoiceDate, totalInvoiceAmountLessHeaderMarkup);
            this.updateLedgerCovForPayment(dueDate, totalInvoiceAmountLessHeaderMarkup);
        }

        contract.parmLedgerCoverage().setRemainingPercentage(1.0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCovWithInvoiceMarkupKeepAndNoKeep</Name>
				<Source><![CDATA[
    private AmountCur updateLedgerCovWithInvoiceMarkupKeepAndNoKeep(TransDate _invoiceDate, TransDate _dueDate, AmountCur _invoiceAmount)
    {
        this.updateLedgerCovForInvoiceMarkup(_invoiceDate, _invoiceAmount);

        AmountCur totalMarkupHeader = contract.parmMarkup().getLedgerCovTotalMarkupAmount() * contract.parmSign();
        this.updateLedgerCovForInvoiceSummary(_invoiceDate, totalMarkupHeader);
        this.updateLedgerCovForPayment(_dueDate, totalMarkupHeader);

        AmountCur totalInvoiceAmountLessHeaderMarkup = _invoiceAmount - totalMarkupHeader;

        return totalInvoiceAmountLessHeaderMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCovWithInvoiceMarkupKeep</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void updateLedgerCovWithInvoiceMarkupKeep(TransDate _invoiceDate, TransDate _dueDate, AmountCur _invoiceAmount)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCovForPayment</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void updateLedgerCovForPayment(
        DueDate _dueDate,
        AmountCur _invoiceAmount)
    {
        TransDate paymentDueDate = contract.parmLedgerCoverage().determinePaymentDueDateWithAverages(
            contract.parmLedgerCovAvgAverageDaysSelectorPayment(),
            contract.parmInvoiceCustVendTable().AccountNum,
            _dueDate,
            contract.parmSalesPurchTableInterface().clearingPeriod());

        //Payment summary
        contract.parmLedgerCoverage().updateSum(
            paymentDueDate,
            contract.parmSummaryPostingType(),
            LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(contract.parmSalesPurchTableInterface().summaryLedgerDimension() ),
            contract.parmInvoiceCustVendTable().DefaultDimension,
            contract.parmSalesPurchTableInterface().parmCurrencyCode(),
            -_invoiceAmount);

        //Payment clearing
        contract.parmLedgerCoverage().updateSum(
            paymentDueDate,
            contract.parmSummaryPostingType(),
            LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(contract.parmSalesPurchTableInterface().clearingLedgerDimension()),
            contract.parmInvoiceCustVendTable().DefaultDimension,
            contract.parmSalesPurchTableInterface().parmCurrencyCode(),
            _invoiceAmount);

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>