<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemCostGroupRollupList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostGroupRollupList</c> represents a <c>recordSortedList</c> that is used to hold the
///    cost broken down.
/// </summary>
/// <remarks>
///    This class will be used by the production indirect cost framework to handle the adding of costs to
///    a transaction.
/// </remarks>
class InventItemCostGroupRollupList
{
    RecordSortedList               costGroupRollupList;

    CostAmount                     costAmount;
    Qty                            qty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the cursor of the <c>costGroupRollup</c><c>recordSortedList</c> to the first position.
    /// </summary>
    /// <param name="_inventItemCostGroupRollup">
    ///    An instance of the <c>InventItemCostGroupRollup</c> table where the first record of the
    ///    <c>costGroupRollupList</c> should be stored.
    /// </param>
    /// <returns>
    ///    The return value of the first method of the <c>recordSortedList</c> class.
    /// </returns>
    /// <remarks>
    ///    The first method of the <c>recordSortedList</c> class will be called to find the first record in
    ///    the <c>costGroupRollupList recordSortedList</c>.
    /// </remarks>
    public boolean first(InventItemCostGroupRollup _inventItemCostGroupRollup)
    {
        return costGroupRollupList.first(_inventItemCostGroupRollup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>costGroupRollupList</c> record sorted list.
    /// </summary>
    protected void init()
    {
        costGroupRollupList = new RecordSortedList(tableNum(InventItemCostGroupRollup));
        costGroupRollupList.sortOrder(fieldNum(InventItemCostGroupRollup, InventItemPriceRefRecId),
                                      fieldNum(InventItemCostGroupRollup, CostLevel),
                                      fieldNum(InventItemCostGroupRollup, CostGroupId),
                                      fieldNum(InventItemCostGroupRollup, Split));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a given <c>InventItemCostGroupRollup</c> record to the <c>recordSortedList</c>.
    /// </summary>
    /// <param name="_inventItemCostGroupRollup">
    ///    The <c>InventItemCostGroupRollup</c> record that has to be inserted.
    /// </param>
    /// <param name="_updateIfExist">
    ///    A Boolean value that will be passed to the <c>ins</c> method of the <c>recordSortedList</c> class;
    ///    optional.
    /// </param>
    /// <returns>
    ///    The return value of the <c>ins</c> method of the <c>recordSortedList</c> class.
    /// </returns>
    /// <remarks>
    ///    The <c>ins</c> method of the <c>recordSortedList</c> class will be called to insert the given
    ///    record in the <c>recordSortedList</c>.
    /// </remarks>
    public boolean insert(InventItemCostGroupRollup _inventItemCostGroupRollup,
                       boolean                   _updateIfExist = true)
    {
        return costGroupRollupList.ins(_inventItemCostGroupRollup, _updateIfExist);
    }

]]></Source>
			</Method>
			<Method>
				<Name>length</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number of records in the <c>costGroupList</c><c>recordSortedList</c>.
    /// </summary>
    /// <returns>
    ///    The return value of the <c>len</c> method of the <c>recordSortedList</c> class.
    /// </returns>
    /// <remarks>
    ///    The <c>len</c> method of the <c>recordSortedList</c> class will be called to obtain the number of
    ///    records from the <c>costList</c><c>recordSortedList</c>.
    /// </remarks>
    public int length()
    {
        return costGroupRollupList.len();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the pointer of the <c>costGroupRollupList</c><c>recordSortedList</c> to the next position.
    /// </summary>
    /// <param name="_inventItemCostGroupRollup">
    ///    An instance of the <c>InventItemCostGroupRollup</c> table where the next record of the
    ///    <c>CostGroupRollupList</c> table should be stored.
    /// </param>
    /// <returns>
    ///    The return value of the next method of the <c>recordSortedList</c> class.
    /// </returns>
    /// <remarks>
    ///    The next method of the <c>recordSortedList</c> class will be called to find the next record in the
    ///    <c>costGroupRollupList</c><c>recordSortedList</c>.
    /// </remarks>
    public boolean next(InventItemCostGroupRollup _inventItemCostGroupRollup)
    {
        return costGroupRollupList.next(_inventItemCostGroupRollup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostAmount</Name>
				<Source><![CDATA[
    public CostAmount parmCostAmount(CostAmount _costAmount = costAmount)
    {
        costAmount = _costAmount;

        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    public Qty parmQty(Qty _qty = qty)
    {
        qty = _qty;

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseSign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reverses the sign of the cost group rollup list.
    /// </summary>
    /// <remarks>
    ///    This method will invert the values of the current instance of the
    ///    <c>InventItemCostGroupRollupList</c> class.
    /// </remarks>
    public void reverseSign()
    {
        InventItemCostGroupRollup   reverseInventItemCostGroupRollup;

        qty = -1 * qty;
        boolean found = costGroupRollupList.first(reverseInventItemCostGroupRollup);
        while (found)
        {
            // reverse sign
            reverseInventItemCostGroupRollup.CostAmountStd = -1 * reverseInventItemCostGroupRollup.CostAmountStd;
            reverseInventItemCostGroupRollup.Qty = -1 * reverseInventItemCostGroupRollup.Qty;

            // Update it in the list
            costGroupRollupList.ins(reverseInventItemCostGroupRollup, true);

            // Get the next record to process
            found = costGroupRollupList.next(reverseInventItemCostGroupRollup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarizeList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Summarizes the cost group rollup list by using the specified <c>InventItemCostGroupRollupList</c>
    ///    class.
    /// </summary>
    /// <param name="_inventItemCostGroupRollupList">
    ///    The <c>InventItemCostGroupRollupList</c> class that needs to be added.
    /// </param>
    /// <remarks>
    ///    This method will sum the values into the current instance of the
    ///    <c>InventItemCcostGroupRollupList</c> class.
    /// </remarks>
    public void summarizeList(InventItemCostGroupRollupList  _inventItemCostGroupRollupList)
    {
        InventItemCostGroupRollup   inventItemCostGroupRollup;
        InventItemCostGroupRollup   addInventItemCostGroupRollup;

        // Step through from list
        if (_inventItemCostGroupRollupList)
        {
            boolean found = _inventItemCostGroupRollupList.first(addInventItemCostGroupRollup);
            while (found)
            {
                // Set new cost amount
                inventItemCostGroupRollup.data(addInventItemCostGroupRollup);

                // check if this record exists in the current List
                boolean exist = costGroupRollupList.find(inventItemCostGroupRollup);
                if (exist)
                {
                    // record was found, so I need to add the cost amount
                    inventItemCostGroupRollup.CostAmountStd += addInventItemCostGroupRollup.CostAmountStd;
                    // <GEERU>
                    inventItemCostGroupRollup.CostAmountSecCur_RU += addInventItemCostGroupRollup.CostAmountSecCur_RU;
                    // </GEERU>
                }

                // Update it in the list
                costGroupRollupList.ins(inventItemCostGroupRollup, true);

                // Get the next record to process
                found = _inventItemCostGroupRollupList.next(addInventItemCostGroupRollup);
            }

            qty += _inventItemCostGroupRollupList.parmQty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventItemCostGroupRollupList construct()
    {
        return new InventItemCostGroupRollupList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromItemId</Name>
				<Source><![CDATA[
    public static InventItemCostGroupRollupList newFromItemId(
        ItemId      _itemId,
        Qty         _consumedQty,
        CostAmount  _consumedCostAmount
        )
    {
        InventItemCostGroupRollup         itemCostGroupRollup;
        InventItemCostGroupRollupList     inventItemCostGroupRollupList = InventItemCostGroupRollupList::construct();

        itemCostGroupRollup.CostGroupId     = InventTable::find(_itemId).costGroup();
        itemCostGroupRollup.Qty             = _consumedQty;
        itemCostGroupRollup.CostAmountStd   = _consumedCostAmount;
        itemCostGroupRollup.CostLevel       = InventCostLevel::Total;
        itemCostGroupRollup.Split           = NoYes::No;

        inventItemCostGroupRollupList.insert(itemCostGroupRollup);

        inventItemCostGroupRollupList.parmCostAmount(_consumedCostAmount);
        inventItemCostGroupRollupList.parmQty(_consumedQty);

        return inventItemCostGroupRollupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromVarianceList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>RecordSortedList</c> class that contains the standard cost broken down based on a
    ///    variance.
    /// </summary>
    /// <param name="_inventCostTransVarianceList">
    ///    The variance list that is the basis for the cost breakdown.
    /// </param>
    /// <param name="_inventItemPriceRecId">
    ///    The item price record ID to which the variance belongs
    /// </param>
    /// <returns>
    ///    A <c>RecordSortedList</c> object that contains the standard cost broken down on cost groups.
    /// </returns>
    public static InventItemCostGroupRollupList newFromVarianceList(InventCostTransVarianceList _inventCostTransVarianceList,
                                                                    RecId                       _inventItemPriceRecId)
    {
        InventItemCostGroupRollup         itemCostGroupRollup;
        InventItemCostGroupRollupList     inventItemCostGroupRollupList;
        InventCostTransVariance           inventCostTransVariance;
        boolean                           isCostBreakDownActivated = InventParameters::isCostBreakdownActivated();

        // Step through from list
        if (_inventCostTransVarianceList)
        {
            // Initialize the list
            inventItemCostGroupRollupList = InventItemCostGroupRollupList::construct();

            boolean found = _inventCostTransVarianceList.first(inventCostTransVariance);
            while (found)
            {
                itemCostGroupRollup.initFromInventCostTransVariance(inventCostTransVariance);
                itemCostGroupRollup.InventItemPriceRefRecId = _inventItemPriceRecId;
                inventItemCostGroupRollupList.insert(itemCostGroupRollup);

                found = _inventCostTransVarianceList.next(inventCostTransVariance);
            }
        }

        return inventItemCostGroupRollupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRollupToList</Name>
				<Source><![CDATA[
    private static void addRollupToList(InventItemCostGroupRollupList _inventItemCostGroupRollupList,
                                        InventItemCostGroupRollup     _itemCostGroupRollup,
                                        Qty                           _consumption)
    {
        CostAmount currentCostAmount;

        // Initialize cost Amount
        if (_itemCostGroupRollup.Qty)
        {
            currentCostAmount = _itemCostGroupRollup.CostAmountStd * (_consumption / _itemCostGroupRollup.Qty);
            // <GEERU>
            _itemCostGroupRollup.CostAmountSecCur_RU = _itemCostGroupRollup.CostAmountSecCur_RU * (_consumption / _itemCostGroupRollup.Qty);
            // </GEERU>
        }
        else
        {
            currentCostAmount = 0;
            // <GEERU>
            _itemCostGroupRollup.CostAmountSecCur_RU = 0;
            // </GEERU>
        }

        _itemCostGroupRollup.CostAmountStd = currentCostAmount;

        _inventItemCostGroupRollupList.insert(_itemCostGroupRollup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStdCostList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>RecordSortedList</c> object that contains the standard cost broken down on cost
    ///    groups.
    /// </summary>
    /// <param name="_inventItemPriceRefRecId">
    ///    The <c>recordId</c> of the <c>inventItemPrice</c> that should be used to find the
    ///    <c>inventItemCostGroupRollup</c> records.
    /// </param>
    /// <param name="_consumption">
    ///    The quantity for which the cost should be assigned.
    /// </param>
    /// <returns>
    ///    A <c>RecordSortedList</c> object that contains the standard cost broken down on cost groups.
    /// </returns>
    public static InventItemCostGroupRollupList newStdCostList(InventItemPriceRefRecId _inventItemPriceRefRecId,
                                                               Qty                     _consumption)
    {
        InventItemCostGroupRollup         itemCostGroupRollup;

        // If cost breakdown is not activated, only fill in the total level record
        if ( InventParameters::isCostBreakdownActivated() )
        {
            // Initialize the list
            InventItemCostGroupRollupList inventItemCostGroupRollupList = InventItemCostGroupRollupList::construct();

            // Operate with the breakdown
            while select * from itemCostGroupRollup
                order by CostLevel
                where itemCostGroupRollup.InventItemPriceRefRecId == _inventItemPriceRefRecId
                   && itemCostGroupRollup.Split                   == NoYes::No                // Only decomposed cost groups
            {
                inventItemCostGroupRollupList::addRollupToList(inventItemCostGroupRollupList,
                                                               itemCostGroupRollup,
                                                               _consumption);
            }

            // Add level total with zeroed cost in order to have input based indirect costs calculated even if breakdown is provided
            select firstonly itemCostGroupRollup
                   where itemCostGroupRollup.InventItemPriceRefRecId == _inventItemPriceRefRecId
                      && itemCostGroupRollup.CostLevel               == InventCostLevel::Total
                      && itemCostGroupRollup.Split                   == NoYes::Yes  ;

            if (itemCostGroupRollup)
            {
                itemCostGroupRollup.CostAmountStd = 0;
                itemCostGroupRollup.CostAmountSecCur_RU = 0;
                InventItemCostGroupRollupList::addRollupToList(inventItemCostGroupRollupList,
                                                               itemCostGroupRollup,
                                                               _consumption);

                inventItemCostGroupRollupList.parmQty(_consumption);
            }

            return inventItemCostGroupRollupList;
        }
        else
        {
            return InventItemCostGroupRollupList::newStdCostListWithoutBreakdown(_inventItemPriceRefRecId, _consumption);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStdCostListWithoutBreakdown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>InventItemCostGroupRollupList</c> class without injecting the detailed breakdown.
    /// </summary>
    /// <param name = "_inventItemPriceRefRecId">
    /// The record ID of the active price.
    /// </param>
    /// <param name = "_consumption">
    /// The consumed quantity.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventItemCostGroupRollupList</c> class.
    /// </returns>
    public static InventItemCostGroupRollupList newStdCostListWithoutBreakdown(InventItemPriceRefRecId _inventItemPriceRefRecId,
                                                                               Qty                     _consumption)
    {
        InventItemCostGroupRollup         itemCostGroupRollup;

        InventItemCostGroupRollupList inventItemCostGroupRollupList = InventItemCostGroupRollupList::construct();

        select firstonly itemCostGroupRollup
               where itemCostGroupRollup.InventItemPriceRefRecId == _inventItemPriceRefRecId
                  && itemCostGroupRollup.CostLevel               == InventCostLevel::Total;

        InventItemCostGroupRollupList::addRollupToList(inventItemCostGroupRollupList,
                                                       itemCostGroupRollup,
                                                       _consumption);

        inventItemCostGroupRollupList.parmQty(_consumption);

        return inventItemCostGroupRollupList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
