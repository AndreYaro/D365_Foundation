<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationLedgerJournalTableDataRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationLedgerJournalTableDataRetrieval</c> class retrieves data from <c>LedgerJournalTable</c>, etc.
/// </summary>
[TaxIntegrationDataRetrieval(tableStr(LedgerJournalTable))]
public class TaxIntegrationLedgerJournalTableDataRetrieval
    extends TaxIntegrationAbstractDataRetrievalTemplate
{
    protected LedgerJournalTable ledgerJournalTable;
    protected LedgerJournalTrans ledgerJournalTrans;
    protected TaxIntegrationJournalDocumentObject journalDocument;
    private Map GLAccountCache;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationLedgerJournalTableDataRetrieval</c>.
    /// </summary>
    /// <param name = "_document">The document to process.</param>
    public void new(TaxIntegrationDocumentObject _document)
    {
        this.journalDocument = _document;
        super(_document);
        this.GLAccountCache = new Map(Types::String, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (this.document.getLocalRecord())
        {
            this.ledgerJournalTable = this.document.getLocalRecord();
            return null;
        }
        else
        {
            document.setLocalRecord(this.ledgerJournalTable);
            return SysDaQueryObjectBuilder::from(this.ledgerJournalTable)
                .where(this.ledgerJournalTable, fieldStr(LedgerJournalTable, RecId))
                    .isEqualToLiteral(this.document.getLocalRecId())
                .toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.ledgerJournalTrans)
            .where(this.ledgerJournalTrans, fieldStr(LedgerJournalTrans, JournalNum))
                .isEqualToLiteral(this.ledgerJournalTable.JournalNum)
            .where(this.ledgerJournalTrans, fieldStr(LedgerJournalTrans, Voucher))
                .isEqualToLiteral(this.journalDocument.getLegacyTaxableDocument().getReferenceNumber())
            .where(this.ledgerJournalTrans, fieldStr(ledgerJournalTrans, RecId))
                .isNotEqualToLiteral(this.journalDocument.getLegacyTaxableDocument().getUnsavedLedgerJournalTrans().RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        // the shouldSkipDocumentCharge must be true
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        // the shouldSkipLineCharge must be true
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line of the document.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructLine()
    {
        return TaxIntegrationJournalLineObject::constructOnDocument(
            this.ledgerJournalTrans.TableId,
            this.ledgerJournalTrans.RecId,
            this.document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructUnsavedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line which is not saved in databse yet.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructUnsavedLine()
    {
        this.ledgerJournalTrans = journalDocument.getLegacyTaxableDocument().getUnsavedLedgerJournalTrans();
        return TaxIntegrationJournalLineObject::constructOnDocument(
            this.ledgerJournalTrans.TableId,
            this.ledgerJournalTrans.RecId,
            this.document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document.
    /// </summary>
    protected void copyToDocument()
    {
        super();

        if (document.shouldSkipLine())
        {
            // When the lines are skipped, we need to retrieve and populate specific journal line information separately.
            this.ledgerJournalTrans = this.retrieveLedgerJournalTransWhenSkipLine();

            this.copyToDocumentFromJournalLine();
        }

        if (journalDocument.isVendorInvoiceApproval())
        {
            document.setTaxable(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies defaults to the document.
    /// </summary>
    protected void copyToDocumentByDefault()
    {
        super();

        document.setInvoiceId('');
        document.setAccountType(LedgerJournalACType::Ledger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromHeaderTable</Name>
				<Source><![CDATA[
    protected void copyToDocumentFromHeaderTable()
    {
        super();

        journalDocument.setJournalName(this.ledgerjournalTable.JournalName);
        document.setIncludingTax(this.ledgerJournalTable.LedgerJournalInclTax);
        document.setTransactionCurrencyCode(this.ledgerJournalTable.CurrencyCode);

        if (this.isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            journalDocument.setJournalType(this.ledgerjournalTable.JournalType);

            switch (this.ledgerJournalTable.JournalType)
            {
                case LedgerJournalType::Daily:
                    document.setReverseDate(ledgerJournalTable.ReverseDate);
                    break;
            }
        }

        this.copyToDocumentForInvoiceApproval();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentForInvoiceApproval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies vendor information from vend invoice approval to the document.
    /// </summary>
    private void copyToDocumentForInvoiceApproval()
    {
        if (this.journalDocument.isVendorInvoiceApproval())
        {
            VendTrans vendTrans;

            //Gets the vendor information from vendtrans of invoice register
            select firstonly vendTrans
                where vendTrans.JournalNum == this.ledgerJournalTable.JournalNum
                    && vendTrans.Voucher == this.journalDocument.getLegacyTaxableDocument().getReferenceNumber();

            if (vendTrans)
            {
                document.setInvoiceId(vendTrans.Invoice);

                document.setAccountType(LedgerJournalACType::Vend);
                document.setOrderAccount(vendTrans.AccountNum);
                document.setInvoiceAccount(document.getOrderAccount());

                this.copyAddressToDocumentFromLine();
                this.copyCustVendGroupToDocument();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies specific line information to the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToDocumentFromLineTable(TaxIntegrationLineObject _line)
    {
        this.copyToDocumentFromJournalLine();
        this.copyToDocumentFromJournalLineForInvoiceApproval(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies specific line information from <c>LedgerJournalTrans</c> to the document.
    /// </summary>
    private void copyToDocumentFromJournalLine()
    {
        if (this.ledgerJournalTrans.isCustVendLine()
            && !this.journalDocument.isVendorInvoiceApproval())
        {
            // Set invoice ID and cash discount only if customer/vendor has not been set in document level
            // We only allow one customer/vendor in tax integration.
            if (!document.getCounterPartyLedgerDimension())
            {
                InvoiceId invoiceId = this.ledgerJournalTrans.Invoice;
                document.setInvoiceId(invoiceId);
                journalDocument.setIsPrePaymentJournalVoucher(this.ledgerJournalTrans.Prepayment);

                // Cash discount only calculated with invoice ID filled.
                // And only the main account is customer/vendor account
                if (invoiceId
                    && (this.ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
                        || this.ledgerJournalTrans.AccountType == LedgerJournalACType::Vend))
                {
                    this.copyCashDiscountInfoToDocument();
                }
            }
            // Go through the account process even account is already set,
            // in order to raise the multiple cust/vend account warning.
            this.copyAccountAddressToDocument();

            this.copyCustVendGroupToDocument();
        }
        document.setTransactionDate(this.ledgerJournalTrans.TransDate);

        //force populate cust/vend line and 1st line in case ledger to ledger case not populated
        if (this.isTaxIntegrationEnabledForTaxSolutionProvider
            && ((document.getLineSet().elements() == 1)
                || this.ledgerJournalTrans.isCustVendLine()))
        {
            this.copyDatesToDocumentFromLine();
        }

        LedgerJournalTransTaxExtension ledgerJournalTransTaxExtension = ledgerJournalTrans.ledgerJournalTransTaxExtension();
        if (isTaxIntegrationISVAccrueUseTaxEnabled
            && this.ledgerJournalTable.JournalType != LedgerJournalType::CustPayment
            && this.ledgerJournalTrans.isVendLine()
            && (ledgerJournalTransTaxExtension.AccrueSalesTaxType == TaxAccrueSalesTaxType::AccrueUseTax
                || ledgerJournalTransTaxExtension.AccrueSalesTaxType == TaxAccrueSalesTaxType::Advanced))
        {
            document.setAccrueUseTax(this.getAccrueUseTaxParameter());
            document.setAccrueSalesTaxType(ledgerJournalTransTaxExtension.AccrueSalesTaxType);
            document.setVendorChargedSalesTax(ledgerJournalTransTaxExtension.VendorChargedSalesTax);
            if (ledgerJournalTransTaxExtension.AccrueSalesTaxType == TaxAccrueSalesTaxType::Advanced)
            {
                VendTable vendTable = VendTable::find(document.getOrderAccount());
                document.setVendorChargedTaxToleranceAmount(vendTable.TaxVendorChargeTaxToleranceAmount);
                document.setVendorChargedTaxTolerancePercent(vendTable.TaxVendorChargeTaxTolerancePercent);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromJournalLineForInvoiceApproval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies specific line information to the document for invoice approval.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    private void copyToDocumentFromJournalLineForInvoiceApproval(TaxIntegrationLineObject _line)
    {
        if (this.journalDocument.isVendorInvoiceApproval())
        {
            //Just only copy the information on the journal line that sent this to the TCS.
            if (_line.shouldSendToTaxService())
            {
                // Cash discount only calculated with invoice ID filled for invoice approval.
                if (document.getInvoiceId())
                {
                    this.copyCashDiscountInfoToDocument();
                }

                LedgerJournalTransTaxExtension taxExtension = this.ledgerJournalTrans.ledgerJournalTransTaxExtension();
                this.copyToDocumentFromVATNum(
                    this.ledgerJournalTrans.VATNumJournal,
                    taxExtension.VATNumTableType,
                    taxExtension.VATNumRecId);

                document.setVATRegisterDate(this.ledgerJournalTrans.VatDueDate_W);
                document.setVendorVATDate(this.ledgerJournalTrans.VendorVATDate);
                document.setInvoiceDate(this.ledgerJournalTrans.DocumentDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCashDiscountInfoToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies cash discount to the document.
    /// </summary>
    private void copyCashDiscountInfoToDocument()
    {
        document.setCashDiscountPercent(
                CashDisc::findByCompany(
                    this.ledgerJournalTrans.company,
                    this.ledgerJournalTrans.CashDiscCode).Percent);

        if (this.isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            document.setCashDiscDate(this.ledgerJournalTrans.DateCashDisc);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCustVendGroupToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies cust group and vend group to the document.
    /// </summary>
    protected void copyCustVendGroupToDocument()
    {
        if (document.getAccountType() == LedgerJournalACType::Cust)
        {
            CustTable custTable = CustTable::find(document.getOrderAccount());
            document.setOrderAccountGroup(custTable.CustGroup);

            CustTable custTableInvoice = CustTable::find(custTable.InvoiceAccount);
            custTableInvoice = custTableInvoice ? custTableInvoice : custTable;
            document.setInvoiceAccountGroup(custTableInvoice.CustGroup);
        }

        if (document.getAccountType() == LedgerJournalACType::Vend)
        {
            VendTable vendTable = VendTable::find(document.getOrderAccount());
            document.setOrderAccountGroup(vendTable.VendGroup);

            VendTable vendTableInvoice = VendTable::find(vendTable.InvoiceAccount);
            vendTableInvoice = vendTableInvoice ? vendTableInvoice : vendTable;
            document.setInvoiceAccountGroup(vendTableInvoice.VendGroup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAccountAddressToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies account and address to the document.
    /// </summary>
    protected void copyAccountAddressToDocument()
    {
        RefRecId ledgerDimension;
        LedgerJournalACType accountType;
        SelectableDataArea dataArea;

        if (this.ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
            || this.ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
        {
            ledgerDimension = this.ledgerJournalTrans.LedgerDimension;
            accountType = this.ledgerJournalTrans.AccountType;
            dataArea = this.ledgerJournalTrans.Company;
        }

        if (this.ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend
            || this.ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust)
        {
            if (ledgerDimension)
            {
                warning("@TaxIntegration:MultipleCustVendInOneVoucherWarning");
            }
            ledgerDimension = this.ledgerJournalTrans.OffsetLedgerDimension;
            accountType = this.ledgerJournalTrans.OffsetAccountType;
            dataArea = this.ledgerJournalTrans.OffsetCompany;
        }

        if (!document.getCounterPartyLedgerDimension())
        {
            document.setCounterPartyLedgerDimension(ledgerDimension);
            document.setAccountType(accountType);
            document.setOrderAccount(DimensionAttributeValueCombination::find(ledgerDimension).DisplayValue);
            CustVendTable custVendInvoiceTable;
            if (accountType == LedgerJournalACType::Vend)
            {
                custVendInvoiceTable = VendTable::find(VendTable::find(document.getOrderAccount()).InvoiceAccount);
            }
            else if (accountType == LedgerJournalACType::Cust)
            {
                custVendInvoiceTable = CustTable::find(CustTable::find(document.getOrderAccount()).InvoiceAccount);
            }
            else
            {
                // Account type is ledger
                return;
            }

            document.setInvoiceAccount(custVendInvoiceTable ? custVendInvoiceTable.AccountNum : document.getOrderAccount());
            LedgerJournalTransTaxExtension taxExtension = this.ledgerJournalTrans.ledgerJournalTransTaxExtension();
            this.copyToDocumentFromVATNum(
                this.ledgerJournalTrans.VATNumJournal,
                taxExtension.VATNumTableType,
                taxExtension.VATNumRecId);

            changecompany(dataArea)
            {
                this.copyAddressToDocumentFromLine();
            }
        }
        else if (ledgerDimension && document.getCounterPartyLedgerDimension() != ledgerDimension)
        {
            warning("@TaxIntegration:MultipleCustVendInOneVoucherWarning");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document's address.
    /// </summary>
    protected void copyAddressToDocument()
    {
        // address will be copied in line processed, not here
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToDocumentFromLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document's address.
    /// </summary>
    /// <remarks>Although line is not in the parameter, the order/invoice account is actaully copied from line.</remarks>
    protected void copyAddressToDocumentFromLine()
    {
        // only customer and vendor type have address
        if (document.getAccountType() == LedgerJournalACType::Cust)
        {
            LogisticsPostalAddress shipmentOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCompanyInformation(
                CompanyInfo::find(),
                LogisticsLocationRoleType::Delivery);
            CustTable custTable = CustTable::find(document.getOrderAccount());
            LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCustomer(
                custTable,
                LogisticsLocationRoleType::Delivery);
            this.copyToDocumentFromShipmentAddressWithCountryRegionType(
                shipmentOriginLogisticsPostalAddress,
                shipmentDestinationLogisticsPostalAddress);

            LogisticsPostalAddress invoiceOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCompanyInformation(
                CompanyInfo::find(),
                LogisticsLocationRoleType::Invoice);
            CustTable custTableInvoice = CustTable::find(custTable.InvoiceAccount);
            custTableInvoice = custTableInvoice ? custTableInvoice : custTable;
            LogisticsPostalAddress invoiceDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCustomer(
                custTableInvoice,
                LogisticsLocationRoleType::Invoice);

            this.copyToDocumentFromInvoiceAddressWithCountryRegionType(
                invoiceOriginLogisticsPostalAddress,
                invoiceDestinationLogisticsPostalAddress);
        }
        else if (document.getAccountType() == LedgerJournalACType::Vend)
        {
            LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCompanyInformation(
                CompanyInfo::find(),
                LogisticsLocationRoleType::Delivery);
            VendTable vendTable = VendTable::find(document.getOrderAccount());
            LogisticsPostalAddress shipmentOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromVendor(
                vendTable,
                LogisticsLocationRoleType::Delivery);
            this.copyToDocumentFromShipmentAddressWithCountryRegionType(
                shipmentOriginLogisticsPostalAddress,
                shipmentDestinationLogisticsPostalAddress);

            LogisticsPostalAddress invoiceDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCompanyInformation(
                CompanyInfo::find(),
                LogisticsLocationRoleType::Invoice);
            VendTable vendTableInvoice = VendTable::find(vendTable.InvoiceAccount);
            vendTableInvoice = vendTableInvoice ? vendTableInvoice : vendTable;
            LogisticsPostalAddress invoiceOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromVendor(
                vendTableInvoice,
                LogisticsLocationRoleType::Invoice);

            this.copyToDocumentFromInvoiceAddressWithCountryRegionType(
                invoiceOriginLogisticsPostalAddress,
                invoiceDestinationLogisticsPostalAddress);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLine(TaxIntegrationLineObject _line)
    {
        TaxIntegrationJournalLineObject line = _line;
        LedgerJournalTaxDocument legacyTaxDocument = journalDocument.getLegacyTaxableDocument();
        legacyTaxDocument.parmLedgerJournalTransCurrentlyBeingCalculated(ledgerJournalTrans);

        boolean taxOnPrepayment = legacyTaxDocument.getTaxOnPrepayment();
        LedgerJournalTrans ledgerJournalTransCopy;
        ledgerJournalTransCopy.data(ledgerJournalTrans);
        LedgerJournalTaxLine ledgerJournalTaxline = LedgerJournalTaxLine::construct(
            journalDocument.getLegacyTaxableDocument(),
            ledgerJournalTransCopy,
            taxOnPrepayment);
        line.setTaxableLine(ledgerJournalTaxline);

        super(line);

        if (ledgerJournalTaxline.getTaxCode())
        {
            line.setTaxCode(ledgerJournalTaxline.getTaxCode());
            this.insertTaxLinefromJournalLineTax(line);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxLinefromJournalLineTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>TaxIntegrationTaxLineObject</c> for journal lines with tax code assigned directly.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void insertTaxLinefromJournalLineTax(TaxIntegrationJournalLineObject _line)
    {
        TaxableLine taxableLine = _line.getTaxableLine();
        TaxCode taxCode = taxableLine.getTaxCode();
        TaxTable taxTable = TaxTable::find(taxCode);
        if (!taxTable)
        {
            _line.getAncestorDocument().setException(new System.InvalidOperationException(strFmt("@SYS21976", taxCode)));
            return;
        }

        TaxIntegrationTaxLineObject destinationTaxLine = TaxIntegrationTaxLineObject::construct(taxCode, _line);
        if (!_line.insertTaxLine(destinationTaxLine))
        {
            _line.getAncestorDocument().setException(new System.InvalidOperationException(strFmt("@TaxIntegrationException:DuplicateTaxCodesNotAllowed", taxCode, _line.getLocalId())));
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document from <c>LedgerJournalTrans</c> and <c>LedgerJournalTaxLine</c>.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromLineTable(TaxIntegrationLineObject _line)
    {
        TaxIntegrationJournalLineObject line = _line;
        super(line);

        if (ledgerJournalTrans.Company)
        {
            line.setCompany(ledgerJournalTrans.Company);
        }

        LedgerJournalTaxLine taxableLine = line.getTaxableLine();
        line.setCalculationDate(taxableLine.getTaxRateDate(document.getCompany()));
        line.setAccountingCurrencyFixedExchangeRate(ledgerJournalTrans.ExchRate);
        line.setReportingCurrencyFixedExchangeRate(ledgerJournalTrans.ReportingCurrencyExchRate);
        line.setLedgerPostingType(taxableLine.getPostingType());
        line.setLedgerDimension(taxableLine.getDefaultDimension());
        line.setInvoiceId(ledgerJournalTrans.Invoice);
        line.setPrepaid(taxableLine.isPrePayment());
        line.setTransactionCurrencyCode(taxableLine.getTransactionCurrency());
        line.setEUROTriangulation(ledgerJournalTrans.Triangulation);
        line.setText(ledgerJournalTrans.Txt);
        line.setOperationLedgerDimension(taxableLine.getOperationLedgerDimension(line.getCompany() ? _line.getCompany() : curExt()));

        // Default overrides sales tax for payment fee
        if (this.ledgerJournalTrans.TransactionType == LedgerTransType::Fee)
        {
            CustVendPaymJournalFee paymentFee;
            select firstonly feeTransRecId, TaxGroup, TaxItemGroup, RecId from paymentFee
                where paymentFee.feeTransRecId == this.ledgerJournalTrans.RecId;
            line.setOverrideSalesTax(NoYes::Yes);
            line.setTaxGroup(ledgerJournalTrans.TaxGroup);
            line.setTaxItemGroup(ledgerJournalTrans.TaxItemGroup);
        }
        else
        {
            line.setTaxGroup(taxableLine.getTaxGroup());
            line.setTaxItemGroup(taxableLine.getTaxItemGroup());
            LedgerJournalTransTaxExtension taxExtension = ledgerJournalTrans.ledgerJournalTransTaxExtension();
            line.setOverrideSalesTax(taxExtension.overrideSalesTax);
        }

        if (this.isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            TaxIntegrationJournalLineObject journalLine = line as TaxIntegrationJournalLineObject;
            journalLine.setGeneralLedgerAccount(this.getAccountNumFromLine());
        }
        this.determineTaxIntegrationTaxDirectionForLine(line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQuantityAndTransactionAmountToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's quatity and amount.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyQuantityAndTransactionAmountToLine(TaxIntegrationLineObject _line)
    {
        TaxIntegrationJournalLineObject line = _line;
        super(line);

        if (ledgerJournalTrans.isProjectTransaction())
        {
            LedgerJournalTrans_Project ledgerJournalTrans_Project = LedgerJournalTrans_Project::find(ledgerJournalTrans.RecId);

            if (ledgerJournalTrans_Project)
            {
                line.setQuantity(ledgerJournalTrans_Project.Qty);
                line.setProjectId(ledgerJournalTrans_Project.ProjId);
                line.setProjectCategory(ledgerJournalTrans_Project.CategoryId);
            }
        }

        line.setLineAmount(line.getTaxableLine().getTransactionAmount());
        line.setTransactionAmount(line.getLineAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's address.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <remarks>Line address is not required for journal.</remarks>
    protected void copyAddressToLine(TaxIntegrationLineObject _line)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccountTypeTaxable</Name>
				<Source><![CDATA[
    private boolean isAccountTypeTaxable(LedgerJournalACType _accountType)
    {
        return _accountType == LedgerJournalACType::Ledger
            || _accountType == LedgerJournalACType::Project
            || _accountType == LedgerJournalACType::FixedAssets;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTaxabilityForLine</Name>
				<Source><![CDATA[
    protected void determineTaxabilityForLine(TaxIntegrationLineObject _line)
    {
        
        TaxIntegrationJournalLineObject line = _line;

        if ((this.ledgerJournalTrans.LedgerDimension != 0
                && this.isAccountTypeTaxable(this.ledgerJournalTrans.AccountType))
            || (this.ledgerJournalTrans.OffsetLedgerDimension != 0
                && this.isAccountTypeTaxable(this.ledgerJournalTrans.OffsetAccountType)))
        {
            line.setTaxable(true);
        }
        else
        {
            line.setTaxable(false);
        }

        // If it is a customer/vendor prepayment, tax should be calculated, even with other offset type like bank.
        if (journalDocument.getLegacyTaxableDocument().getTaxOnPrepayment()
            && document.getOrderAccount())
        {
            line.setTaxable(true);
        }

        // No tax if no ledger dimension
        if (this.ledgerJournalTrans.LedgerDimension == 0)
        {
            line.setTaxable(false);
        }

        // For invoice approval, the document is not sent to Tax calculation service by default since the tax is from invoice register.
        // Only when one or more taxable journal line meets the following conditions, the document will be sent to Tax calculation service.
        // 1. Both of the fields Tax group/item tax group have a value, or Override Sales Tax is No.
        // 2. The journal line has the field Tax code set.
        if (journalDocument.isVendorInvoiceApproval()
            && (line.shouldSendToTaxService()
                || (line.isTaxable()
                    && line.getTaxCode())))
        {
            document.setTaxable(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDatesToDocumentFromLine</Name>
				<Source><![CDATA[
    private void copyDatesToDocumentFromLine()
    {
        document.setTransDate(this.ledgerJournalTrans.TransDate);
        document.setVATRegisterDate(this.ledgerJournalTrans.VatDueDate_W);
        document.setVendorVATDate(this.ledgerJournalTrans.VendorVATDate);

        switch (this.ledgerJournalTable.JournalType)
        {
            case LedgerJournalType::VendInvoiceRegister:
                document.setInvoiceDate(this.ledgerJournalTrans.DocumentDate); // vendor invoice journal is using document date as invoice date
                break;
            case LedgerJournalType::Daily:
                document.setReverseDate(this.ledgerJournalTrans.ReverseDate);
                document.setDocumentDate(this.ledgerJournalTrans.DocumentDate);
                break;
            case LedgerJournalType::Periodic,
                LedgerJournalType::Payment, // vendor payment journal
                LedgerJournalType::CustPayment:
                document.setDocumentDate(this.ledgerJournalTrans.DocumentDate);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountNumFromLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the account number from current voucher line
    /// </summary>
    /// <returns>Account Number</returns>
    private MainAccountNum getAccountNumFromLine()
    {
        if (this.ledgerJournalTrans.OffsetLedgerDimension
            && !(this.ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust
                || this.ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend))
        {
            return this.getAccountNumByDynamicAccount(
                    this.ledgerJournalTrans.OffsetAccountType,
                    this.ledgerJournalTrans.OffsetLedgerDimension,
                    this.ledgerJournalTrans.OffsetCompany ? this.ledgerJournalTrans.OffsetCompany : curext());
        }
        else if (this.ledgerJournalTrans.LedgerDimension
                && !(this.ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
                    || this.ledgerJournalTrans.AccountType == LedgerJournalACType::Vend))
        {
            return this.getAccountNumByDynamicAccount(
                    this.ledgerJournalTrans.AccountType,
                    this.ledgerJournalTrans.LedgerDimension,
                    this.ledgerJournalTrans.Company ? this.ledgerJournalTrans.Company : curext());
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountNumByDynamicAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Try to find account name from provided ledger dimension
    /// </summary>
    /// <param name = "_accountType">Account Type</param>
    /// <param name = "_dimensionDynamicAccount">Ledger Dimension</param>
    /// <param name = "_company">Company</param>
    /// <returns>Account Number</returns>
    private MainAccountNum getAccountNumByDynamicAccount(
        LedgerJournalACType     _accountType,
        DimensionDynamicAccount _dimensionDynamicAccount,
        SelectableDataArea      _company)
    {
        str key = any2Str(_accountType) + '-' + any2Str(_company) + '-' + any2Str(_dimensionDynamicAccount);
        if (GLAccountCache.exists(key))
        {
            return GLAccountCache.lookup(key);
        }

        MainAccountNum result = '';

        if (xDataArea::exist(_company))
        {
            changecompany(_company)
            {
                switch (_accountType)
                {
                    case LedgerJournalACType::Ledger:
                        result = LedgerDimensionFacade::getMainAccountFromLedgerDimension(_dimensionDynamicAccount).MainAccountId;
                        break;
                    case LedgerJournalACType::Cust,
                         LedgerJournalACType::Vend,
                         LedgerJournalACType::Bank,
                         LedgerJournalACType::Project,
                         LedgerJournalACType::FixedAssets,
                         LedgerJournalACType::FixedAssets_RU,
                         LedgerJournalACType::Employee_RU,
                         LedgerJournalACType::RDeferrals,
                         LedgerJournalACType::RCash:
                        result = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_dimensionDynamicAccount);
                        break;
                    default:
                        break;
                }
            }
        }

        GLAccountCache.insert(key, result);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTaxIntegrationTaxDirectionForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>TaxIntegrationDirection</c> of the current line and save to line object.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <remarks>The <c>TaxIntegrationDirection</c> is different from <c>TaxDirection</c>. It is only used as an input for tax service matrix.</remarks>
    protected void determineTaxIntegrationTaxDirectionForLine(TaxIntegrationJournalLineObject _line)
    {
        TaxGroupData taxGroupDataEmpty;
        TaxDirection taxDirection = _line.getTaxableLine().getDefaultTaxDirection(taxGroupDataEmpty, _line.getCompany() ? _line.getCompany() : curExt());

        switch (taxDirection)
        {
            case TaxDirection::OutgoingTax:
                _line.setDirection(TaxIntegrationDirection::Sales);
                return;
            case TaxDirection::IncomingTax:
            default:
                _line.setDirection(TaxIntegrationDirection::Purchase);
                return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveLedgerJournalTransWhenSkipLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>LedgerJournalTrans</c> when the lines are skipped.
    /// </summary>
    /// <returns>The record of <c>LedgerJournalTrans</c>.</returns>
    private LedgerJournalTrans retrieveLedgerJournalTransWhenSkipLine()
    {
        LedgerJournalTrans ledgerJournalTransUnsaved;

        ledgerJournalTransUnsaved = journalDocument.getLegacyTaxableDocument().getUnsavedLedgerJournalTrans();
        if (ledgerJournalTransUnsaved.JournalNum
            && ledgerJournalTransUnsaved.isCustVendLine())
        {
            return ledgerJournalTransUnsaved;
        }

        LedgerJournalTrans ledgerJournalTransMain;

        select firstonly ledgerJournalTransMain
            where ledgerJournalTransMain.JournalNum == ledgerJournalTable.JournalNum
                && ledgerJournalTransMain.Voucher == this.journalDocument.getVoucher()
                && (ledgerJournalTransMain.AccountType == LedgerJournalACType::Cust
                    || ledgerJournalTransMain.AccountType == LedgerJournalACType::Vend
                    || ledgerJournalTransMain.OffsetAccountType == LedgerJournalACType::Cust
                    || ledgerJournalTransMain.OffsetAccountType == LedgerJournalACType::Vend);

        if (!ledgerJournalTransMain.RecId)
        {
            // If no Cust/Vend line, get the first line of the voucher.
            ledgerJournalTransMain = LedgerJournalTrans::find(ledgerJournalTable.JournalNum, this.journalDocument.getVoucher(), false);
        }

        return ledgerJournalTransMain;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>