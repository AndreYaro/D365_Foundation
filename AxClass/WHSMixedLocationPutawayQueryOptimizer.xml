<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMixedLocationPutawayQueryOptimizer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMixedLocationPutawayQueryOptimizer</c> class allows to determine
/// locations that can or cannot be used for putaway of 
/// a specific item based on mixing constraints.
/// </summary>
internal class WHSMixedLocationPutawayQueryOptimizer
{
    private ItemId itemId;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>excludeLocationsWithInvalidMixedLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the specified query to exclude locations that cannot be used
    /// based on mixing constraints.
    /// </summary>
    /// <param name = "_query">The query that selects locations.</param>
    public void excludeLocationsWithInvalidMixedLocation(Query _query)
    {
        const str LocationProfileToFilterDS = 'LocProfTF';
        const str InventDimToFilterDS       = 'InventDimTF';
        const str InventSumToFilterDS       = 'InventSumTF';

        WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        using (var activityContext = instrumentationLogger.mixedLocationPutawayQueryOptimizerActivities().excludeLocationsWithInvalidMixedLocation())
        {
            QueryBuildDataSource dsLocation = _query.dataSourceTable(tableNum(WMSLocation));

            if (dsLocation)
            {
                QueryBuildDataSource dsLocLocationProfile = dsLocation.addDataSource(tableNum(WHSLocationProfile), LocationProfileToFilterDS);
                dsLocLocationProfile.joinMode(JoinMode::InnerJoin);
                dsLocLocationProfile.relations(true);
                dsLocLocationProfile.fetchMode(QueryFetchMode::One2One);
                dsLocLocationProfile.addSelectionField(fieldNum(WHSLocationProfile, LocProfileId));
                QueryBuildDataSource inventSum;

                if (InventUseDimOfInventSumToggle::instance().isEnabled())
                {                    
                    inventSum = dsLocation.addDataSource(tableNum(InventSum), InventSumToFilterDS);
                    inventSum.joinMode(JoinMode::NoExistsJoin);
                    inventSum.addLink(fieldNum(WMSLocation, WMSLocationId), fieldNum(InventSum, wMSLocationId));
                    inventSum.addLink(fieldNum(WMSLocation, InventLocationId), fieldNum(InventSum, InventLocationId));
                }
                else
                {
                    QueryBuildDataSource qbdsExcludedLocationLoad = dsLocation.addDataSource(tableNum(InventDim), InventDimToFilterDS);
                    qbdsExcludedLocationLoad.joinMode(JoinMode::NoExistsJoin);
                    qbdsExcludedLocationLoad.relations(true);
                    qbdsExcludedLocationLoad.fetchMode(QueryFetchMode::One2One);

                    inventSum = qbdsExcludedLocationLoad.addDataSource(tableNum(InventSum), InventSumToFilterDS);
                    inventSum.relations(true);                    
                    inventSum.joinMode(JoinMode::InnerJoin);
                    inventSum.fetchMode(QueryFetchMode::One2One);
                }
                            
                // exclude locations that: do not allow mixed items AND contain another item other than ours.
                inventSum.addRange(fieldNum(WHSLocationProfile, DataAreaId)).value(strFmt('((%1.%2 == %3) && ((%4 > %5) && (%6 == %7) && (%8 != "%9")))',
                    LocationProfileToFilterDS,
                    fieldStr(WHSLocationProfile, AllowMixedItems),
                    any2int(NoYes::No),
                    fieldStr(InventSum, PhysicalInvent),
                    0,
                    fieldStr(InventSum, ClosedQty),
                    any2int(NoYes::No),
                    fieldStr(InventSum, ItemId),
                    queryValue(itemId)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPutAway</Name>
				<Source><![CDATA[
    private void initPutAway(ItemId _itemId)
    {
        itemId = _itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSMixedLocationPutawayQueryOptimizer construct()
    {
        return new WHSMixedLocationPutawayQueryOptimizer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSMixedLocationPutawayQueryOptimizer</c> class
    /// based on the specified information about the put away.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item that needs to be stored in a warehouse location.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSMixedLocationPutawayQueryOptimizer</c> class.
    /// </returns>
    public static WHSMixedLocationPutawayQueryOptimizer newFromItemId(ItemId _itemId)
    {
        WHSMixedLocationPutawayQueryOptimizer optimizer = WHSMixedLocationPutawayQueryOptimizer::construct();
        optimizer.initPutAway(_itemId);

        return optimizer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>