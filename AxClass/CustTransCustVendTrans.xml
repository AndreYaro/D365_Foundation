<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTransCustVendTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>CustTransCustVendTrans</c> class contains <c>CustTrans</c> table specific functionality and mapped fields
/// related to the <c>CustVendTrans</c> table map.
/// </summary>
[ExportMetadata(classStr(CustVendTransInterface), tableStr(CustTrans)), ExportAttribute('Dynamics.AX.Application.CustVendTransInterface')]
public class CustTransCustVendTrans extends CustVendTransInterface
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCustTrans</Name>
				<Source><![CDATA[
    protected CustVendTrans parmCustTrans()
    {
        return custVendTransMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMultiTransByVoucherDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether multiple <c>CustTrans</c> records exist with the same voucher and date.
    /// </summary>
    /// <returns>
    ///  false if multiple transactions exist with the same voucher and date; otherwise, true.
    /// </returns>
    public boolean checkMultiTransByVoucherDate()
    {
        CustTrans custTrans;

        select count(RecId) from custTrans
            where custTrans.Voucher == custVendTransMap.Voucher
                && custTrans.TransDate == custVendTransMap.TransDate
                && custTrans.TransType != LedgerTransType::Cust;

        return custTrans.RecId <= 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPaymentScheduleApplied</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a payment schedule has been applied to the transaction.
    /// </summary>
    /// <returns>true if a payment schedule has been applied; otherwise, false.</returns>
    public boolean checkPaymentScheduleApplied()
    {
        CustTransOpen custTransOpen;
        
        select count(RecId) from custTransOpen
            where custTransOpen.RefRecId == custVendTransMap.RecId;

        return custTransOpen.RecId > 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateCurToMst</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the exchange rate from the transaction currency to the monetary standard (MST) currency.
    /// </summary>
    /// <returns>
    ///    The exchange rate for the transaction.
    /// </returns>
    /// <remarks>
    ///    The method returns the <c>ExchRate</c> field if there is no triangulation. If there is
    ///    triangulation this returns the <c>ExchRateSecond</c> field divided by the <c>ExchRate</c> field.
    /// </remarks>
    public ExchRate exchRateCurToMst()
    {
        CustTrans custTrans;
        return custTrans.exchRateCurToMst();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsId_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the consolidation ID.
    /// </summary>
    /// <returns>
    /// The consolidation ID.
    /// </returns>
    public CustVendConsId_JP getConsId_JP()
    {
        CustVendConsRefRecId_JP consRefRecId = 
            CustInvoiceJour::findFromCustTransVoucher(custVendTransMap.Invoice, custVendTransMap.Voucher, custVendTransMap.TransDate, custVendTransMap.AccountNum).custInvoiceJour_W().CustConsInvoice_JP;

        if (!consRefRecId && TaxConsInvoice_JP::isTaxDifferencePostingOnConsInvoiceEnabled(true))
        {
            CustTrans custTrans = CustTrans::findVoucherDateType(custVendTransMap.Voucher, custVendTransMap.TransDate, custVendTransMap.TransType);
            CustTrans_W custTrans_W = custTrans.custTrans_W();

            if (custTrans_W.CustConsInvoice_JP)
            {
                CustConsInvoice_JP custConsInvoice_JP = CustConsInvoice_JP::find(custTrans_W.CustConsInvoice_JP);

                if (custConsInvoice_JP.PostedCustTrans == custTrans.RecId)
                {
                    return custConsInvoice_JP.ConsId;
                }
            }
        }

        return CustConsInvoice_JP::find(consRefRecId).ConsId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the child extension table from the parent table.
    /// </summary>
    /// <returns>
    /// The child map containing the country specific fields.
    /// </returns>
    public CustVendTrans_W getCustVendTrans_W()
    {
        CustTrans custTrans = custVendTransMap;
        return custTrans.custTrans_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the retrieved table buffer from the query for the concrete table represented by the map.
    /// </summary>
    /// <param name="_queryRun">
    ///    The query that contains the concrete table.
    /// </param>
    /// <returns>
    ///    The retrieved table buffer from the query for the concrete table represented by the map.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The map has not been associated with one of the concrete tables represented by the map.
    /// </exception>
    public CustVendTrans getFromQuery(QueryRun _queryRun)
    {
        return _queryRun.get(tableNum(CustTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChangedInQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the concrete table represented by the map has changed in the query.
    /// </summary>
    /// <param name="_queryRun">
    ///    The query that contains the concrete table.
    /// </param>
    /// <returns>
    ///    true if the concrete table represented by the map has changed in the query; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The map has not been associated with one of the concrete tables represented by the map.
    /// </exception>
    public boolean hasChangedInQuery(QueryRun _queryRun)
    {
        return _queryRun.changed(tableNum(CustTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initConsInvoice_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the value for field <c>ConsInvoice_JP</c> with the record Id of last confirmed consolidated invoice.
    /// </summary>
    /// <remarks>
    /// Field is set only when TransType is LedgerTransType::Payment or LedgerTransType::CashDiscount.
    /// </remarks>
    public void initConsInvoice_JP()
    {
        CustTrans custTrans = custVendTransMap.data();

        if (custTrans.isPayment() && custTrans.isTransForConsInvoice_JP())
        {
            CustVendConsRefRecId_JP refRecId = CustConsInvoice_JP::findLastConfirmedConsInvoice(custVendTransMap.AccountNum);
            CustVendTrans_W custVendTrans_W = custVendTransMap.CustVendTrans::getCustVendTrans_W();
            custVendTrans_W.ConsInvoice_JP = refRecId;
            custVendTransMap.CustVendTrans::packCustVendTrans_W(custVendTrans_W);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkedForSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detemines if the current record is marked.
    /// </summary>
    /// <returns>
    /// True if the current records is marked in the <c>SpecTrans</c> table.
    /// </returns>
    public boolean isMarkedForSettlement()
    {
        SpecTrans specTrans;
        CustTransOpen custTransOpen;

        select firstonly crossCompany RecId from custTransOpen
            exists join specTrans
                where specTrans.RefCompany == custTransOpen.DataAreaId
                    && specTrans.RefTableId == custTransOpen.TableId
                    && specTrans.RefRecId == custTransOpen.RecId
                    && custTransOpen.RefRecId == custVendTransMap.RecId;
        
        return custTransOpen.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCustVendTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs any change made to the child table to the parent table.
    /// </summary>
    /// <param name="_custVendTrans_W">
    /// The map containing the country specific fields.
    /// </param>
    public void packCustVendTrans_W(CustVendTrans_W _custVendTrans_W)
    {
        CustTrans custTrans = custVendTransMap;
        custTrans.packCustTrans_W(_custVendTrans_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendConsInvoice_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustVendConsInvoice_JP</c> record from the <c>CustVendTrans_W</c> record.
    /// </summary>
    /// <param name = "_custVendTrans_W">The <c>CustVendTrans_W</c> record.</param>
    /// <param name = "_forUpdate">Select the reocrd for update.</param>
    /// <returns>The <c>CustVendConsInvoice_JP</c> record.</returns>
    protected CustVendConsInvoice_JP getCustVendConsInvoice_JP(CustVendTrans_W _custVendTrans_W, boolean _forUpdate)
    {
        return CustConsInvoice_JP::find(_custVendTrans_W.ConsInvoice_JP, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankChequeRecipientType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BankChequeRecipientType</c> enum value used to query the <c>BankChequePaymTrans</c>
    /// table.
    /// </summary>
    /// <returns>The <c>BankChequeRecipientType</c> enum value.</returns>
    protected BankChequeRecipientType getBankChequeRecipientType()
    {
        return BankChequeRecipientType::Cust;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>