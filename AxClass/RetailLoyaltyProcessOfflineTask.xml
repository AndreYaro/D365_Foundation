<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailLoyaltyProcessOfflineTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailLoyaltyProcessOfflineTask</c> class processes some of the offline loyalty transactions as a batch task.
/// </summary>
class RetailLoyaltyProcessOfflineTask extends RunBaseBatch implements BatchRetryable
{
    RefRecId                   channelId;
    container                  packedTransactionRecIdList;

    #define.RetryNum(3)
    #define.CurrentVersion(1)
    #localmacro.CurrentList
        packedTransactionRecIdList
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedTransactionRecIdList</Name>
				<Source><![CDATA[
    public container parmPackedTransactionRecIdList(container _packedTransactionRecIdList = packedTransactionRecIdList)
    {
        packedTransactionRecIdList = _packedTransactionRecIdList;

        return packedTransactionRecIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLoyaltyTransactions</Name>
				<Source><![CDATA[
    private void processLoyaltyTransactions()
    {
        System.Exception exception;
        RetailTransactionLoyaltyRewardPointTrans trans;

        Array       transactionRecIdList;
        int         i, lastIndex, recordAffected = 0;
        boolean     isSuccess;

        RetailTracer::Info(classStr(RetailLoyaltyProcessOfflineTask), funcName(), 'Start');

        transactionRecIdList = Array::create(this.parmPackedTransactionRecIdList());
        lastIndex = transactionRecIdList.lastIndex();

        for (i = 1; i <= lastIndex; i++)
        {
            try
            {
                ttsBegin;

                select crossCompany trans
                where trans.RecId == transactionRecIdList.value(i);

                isSuccess = this.processRewardPointTrans(trans);
                if (isSuccess)
                {
                    recordAffected++;
                }

                ttsCommit;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (exception)
            {
                RetailTracer::Info(classStr(RetailLoyaltyProcessOfflineTask), funcName(), exception.Message);
                continue; // Although this one failed, we can still continue with others.
            }
        }

        RetailTracer::Info(classStr(RetailLoyaltyProcessOfflineTask), funcName(), strfmt("@RET3001", recordAffected));
        RetailTracer::Info(classStr(RetailLoyaltyProcessOfflineTask), funcName(), 'End');
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRewardPointTrans</Name>
				<Source><![CDATA[
    private boolean processRewardPointTrans(RetailTransactionLoyaltyRewardPointTrans _trans)
    {
        RetailLoyaltyCardRewardPointTrans line;

        boolean isSuccess;
        str message;

        line.clear();

        line.Affiliation = _trans.Affiliation;
        line.CardNumber = _trans.CardNumber;
        line.Channel = _trans.Channel;
        line.CustAccount = _trans.CustAccount;
        line.CustAccountDataAreaId = _trans.dataAreaId;
        line.EntryDate = _trans.EntryDate;
        line.EntryTime = _trans.EntryTime;
        line.EntryType = _trans.EntryType;
        line.ExpirationDate = _trans.ExpirationDate;
        line.LoyaltyTier = _trans.LoyaltyTier;
        line.loyaltyTransDataAreaId = _trans.dataAreaId;
        line.LoyaltyTransLineNum = _trans.LineNum;
        line.ReceiptId = _trans.ReceiptId;
        line.RewardPoint = _trans.RewardPoint;
        line.RewardPointAmountQty = _trans.RewardPointAmountQty;
        line.StaffId = _trans.StaffId;
        line.storeId = _trans.storeId;
        line.terminalId = _trans.terminalId;
        line.transactionId = _trans.transactionId;
        Line.RetailTransactionSalesTransLineNum = _trans.RetailTransactionSalesTransLineNum;
        line.LoyaltyTransactionType = RetailLoyaltyTransactionType::RetailTransaction;

        // When the ExpirationDate is set to the DateTime.MaxValue in .NET, it will be converted into 12/31/1900 in AX.
        if (_trans.ExpirationDate && _trans.ExpirationDate != str2Date('12-31-1900', 213))
        {
            _trans.ExpirationDate = _trans.ExpirationDate;
        }
        else
        {
            _trans.ExpirationDate = maxDate();
        }

        [isSuccess, message] = RetailLoyaltyManager::PostLoyaltyCardRewardPointTrans(line);

        if (!isSuccess)
        {
            error(message);
        }

        return isSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.processLoyaltyTransactions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@REX4161034";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailLoyaltyProcessOfflineTask</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailLoyaltyProcessOfflineTask</c>
    /// cannot be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>