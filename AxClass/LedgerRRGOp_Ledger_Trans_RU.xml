<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGOp_Ledger_Trans_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGOp_Ledger_Trans_RU extends LedgerRRGOp_Ledger_RU
{
    FieldId                 amountFieldId;
    QueryBuildDataSource    qbdsVoucherReportDate;
    QueryBuildRange         rangeFrom, rangeTo;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addOperationTaxRange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addOperationTaxRange()
    {
        if (parms.operationTaxFilter())
        {
            this.addRange(fieldNum(GeneralJournalEntry, PostingLayer), parms.operationTaxFilter());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransDateRange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addTransDateRange(str _value)
    {
        this.addRange(fieldNum(GeneralJournalEntry, TableId), _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransTypeRange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addTransTypeRange()
    {
        if (parms.transTypeFilter())
        {
            this.addRange(fieldNum(GeneralJournalEntry, JournalCategory), parms.transTypeFilter());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTypeByCorrectRange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addTypeByCorrectRange()
    {
        if (parms.operation().TypeByCorrect != LedgerRRGTypeByCorrect_RU::None &&
            parms.operation().TypeByCorrect != LedgerRRGTypeByCorrect_RU::All)
        {
            if (parms.operation().TypeByCorrect == LedgerRRGTypeByCorrect_RU::OnlyCorrect)
            {
                this.addRange(fieldNum(GeneralJournalAccountEntry, IsCorrection), SysQuery::value(NoYes::Yes));
            }
            else
            {
                this.addRange(fieldNum(GeneralJournalAccountEntry, IsCorrection), SysQuery::value(NoYes::No));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionFieldId</Name>
				<Source><![CDATA[
    protected fieldId dimensionFieldId()
    {
        return fieldNum(GeneralJournalAccountEntry, LedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(LedgerRRGEBufferEval_W _bufferEval)
    {
        super(_bufferEval);
    
        amountFieldId = parms.currencyForCalc() == LedgerRRGCurrencyForCalc_RU::AmountMST ?
             fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount) : fieldNum(GeneralJournalAccountEntry, ReportingCurrencyAmount);
    
        switch (parms.operation().LedgerOperation)
        {
            case LedgerRRGOperationType_RU::BalanceCredit:
                if (!FeatureStateProvider::isFeatureEnabled(DebitCreditBalanceInFinancialReportFeature::instance()))
                {
                    crediting = UnknownNoYes::Yes;
                }
                break;
            case LedgerRRGOperationType_RU::TurnoverCredit:
            case LedgerRRGOperationType_RU::TurnoverInCorrCredit:
                crediting = UnknownNoYes::Yes;
                break;
    
            case LedgerRRGOperationType_RU::BalanceDebit:
                if (!FeatureStateProvider::isFeatureEnabled(DebitCreditBalanceInFinancialReportFeature::instance()))
                {
                    crediting = UnknownNoYes::No;
                }
                break;
            case LedgerRRGOperationType_RU::TurnoverDebit:
            case LedgerRRGOperationType_RU::TurnoverInCorrDebit:
                crediting = UnknownNoYes::No;
                break;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected void initQuery()
    {
        QueryBuildDataSource    ds;
        QueryBuildDataSource    dsBondBatchTrans;

        boolean useTmpTablesInComplexDimensionQueryFeature = parms.operation().DataType == LedgerRRGDataType_RU::Trans;

        QueryBuildDataSource    origQBDS = queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        boolean operationWithCorr = parms.operation().LedgerOperation == LedgerRRGOperationType_RU::TurnoverInCorr
            || parms.operation().LedgerOperation == LedgerRRGOperationType_RU::TurnoverInCorrDebit
            || parms.operation().LedgerOperation == LedgerRRGOperationType_RU::TurnoverInCorrCredit;

        if (useTmpTablesInComplexDimensionQueryFeature && operationWithCorr)
        {
            queryBuildDataSource.addSelectionField(amountFieldId);
            queryBuildDataSource.addSelectionField(fieldNum(GeneralJournalAccountEntry, IsCredit));
            queryBuildDataSource.addSelectionField(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry));
        }
        else
        {
            queryBuildDataSource.addSelectionField(amountFieldId, SelectionField::Sum);
            queryBuildDataSource.orderMode(OrderMode::GroupBy);
        }

        if (crediting != UnknownNoYes::Unknown)
        {
            if (crediting == UnknownNoYes::Yes)
            {
                this.addRange(fieldNum(GeneralJournalAccountEntry, IsCredit), SysQuery::value(NoYes::Yes));
                invertResult = true;
            }
            else
            {
                this.addRange(fieldNum(GeneralJournalAccountEntry, IsCredit), SysQuery::value(NoYes::No));
            }
        }
    
        this.addTypeByCorrectRange();
        

        if (useTmpTablesInComplexDimensionQueryFeature)
        {
            queryBuildDataSource = origQBDS.addDataSource(tableNum(GeneralJournalEntry));
            queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
        }
        else
        {
            this.addDimensionRange();

            queryBuildDataSource = origQBDS.addDataSource(tableNum(GeneralJournalEntry));
            queryBuildDataSource.fetchMode(QueryFetchMode::One2One);
            queryBuildDataSource.joinMode(JoinMode::InnerJoin);
        }

        queryBuildDataSource.addLink(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry), fieldNum(GeneralJournalEntry, RecId));
        this.addRange(fieldNum(GeneralJournalEntry, Ledger), SysQuery::value(Ledger::current()));

        this.addTransTypeRange();
        this.addOperationTaxRange();
    
        if (parms.calcMethod() == ReportCalcMethod_RU::ReportingDate)
        {
            qbdsVoucherReportDate = queryBuildDataSource.addDataSource(tableNum(LedgerVoucherReportDate_RU));
            qbdsVoucherReportDate.joinMode(JoinMode::NoExistsJoin);
            qbdsVoucherReportDate.fetchMode(QueryFetchMode::One2One);
            qbdsVoucherReportDate.addLink(fieldNum(GeneralJournalEntry, SubledgerVoucher),  fieldNum(LedgerVoucherReportDate_RU, Voucher));
            qbdsVoucherReportDate.addLink(fieldNum(GeneralJournalEntry, AccountingDate),    fieldNum(LedgerVoucherReportDate_RU, AccountingDate));
    
            rangeFrom = qbdsVoucherReportDate.addRange(fieldNum(LedgerVoucherReportDate_RU, ReportingDate));
            rangeTo   = qbdsVoucherReportDate.addRange(fieldNum(LedgerVoucherReportDate_RU, ReportingDate));
    
            qbdsVoucherReportDate = queryBuildDataSource.addDataSource(tableNum(LedgerVoucherReportDate_RU));
            qbdsVoucherReportDate.joinMode(JoinMode::OuterJoin);
            qbdsVoucherReportDate.fetchMode(QueryFetchMode::One2One);
            qbdsVoucherReportDate.addLink(fieldNum(GeneralJournalEntry, SubledgerVoucher),  fieldNum(LedgerVoucherReportDate_RU, Voucher));
            qbdsVoucherReportDate.addLink(fieldNum(GeneralJournalEntry, AccountingDate),    fieldNum(LedgerVoucherReportDate_RU, AccountingDate));
    
            if (parms.reportOnDate())
            {
                findOrCreateRange_W(queryBuildDataSource, fieldNum(GeneralJournalEntry, AccountingDate), queryRange(dateNull(), parms.reportOnDate()));
            }
        }
    
        if (!FeatureStateProvider::isFeatureEnabled(LedgerRRGIncludeOpeningAndClosingPeriodTypesInFinReportsFeature_RU::instance()))
        {
            queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(FiscalCalendarPeriod));

            if (useTmpTablesInComplexDimensionQueryFeature)
            {
                queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
            }
            else
            {
                queryBuildDataSource.fetchMode(QueryFetchMode::One2One);
            }

            queryBuildDataSource.addLink(fieldNum(GeneralJournalEntry, FiscalCalendarPeriod), fieldNum(FiscalCalendarPeriod, RecId));
            this.addRange(fieldNum(FiscalCalendarPeriod, Type), SysQuery::value(FiscalPeriodType::Operating));

            queryBuildDataSource = queryBuildDataSource.parentDataSource();
        }

        switch(parms.operation().LedgerOperation)
        {
            case LedgerRRGOperationType_RU::Balance:
            case LedgerRRGOperationType_RU::BalanceCredit:
            case LedgerRRGOperationType_RU::BalanceDebit:
            case LedgerRRGOperationType_RU::ActiveBalance:
            case LedgerRRGOperationType_RU::PassiveBalance:
                this.addTransDateRange(parms.transDateFilter(parms.baseDate(), queryBuildDataSource, qbdsVoucherReportDate));
                if (rangeTo)
                {
                    rangeTo.value(strFmt('>%1', parms.transDate()));
                }
                break;
    
            case LedgerRRGOperationType_RU::Turnover:
            case LedgerRRGOperationType_RU::TurnoverCredit:
            case LedgerRRGOperationType_RU::TurnoverDebit:
                this.addTransDateRange(parms.transDatePeriodFilter(parms.baseDate(), queryBuildDataSource, qbdsVoucherReportDate));
                if (rangeFrom && rangeTo)
                {
                    rangeFrom.value(strFmt('<%1', parms.fromDate()));
                    rangeTo.value(strFmt('>%1', parms.toDate()));
                }
                break;
    
            case LedgerRRGOperationType_RU::TurnoverInCorr:
            case LedgerRRGOperationType_RU::TurnoverInCorrDebit:
            case LedgerRRGOperationType_RU::TurnoverInCorrCredit:
                this.addTransDateRange(parms.transDatePeriodFilter(parms.baseDate(), queryBuildDataSource, qbdsVoucherReportDate));
                if (rangeFrom && rangeTo)
                {
                    rangeFrom.value(strFmt('<%1', parms.fromDate()));
                    rangeTo.value(strFmt('>%1', parms.toDate()));
                }

                if (!useTmpTablesInComplexDimensionQueryFeature)
                {
                    dsBondBatchTrans = GeneralJournalAccountEntry_W::addDataSourceForBondBatchTrans_RU(
                    origQBDS,
                    identifierStr(GJAE_W));
    
                    ds = query.dataSourceName(identifierStr(GJAE_W));
                    ds.addRange(fieldNum(GeneralJournalAccountEntry_W, BondBatchTrans_RU)).value(SysQuery::valueNotEmptyString());
    
                    if (parms.offsetAccountFilter())
                    {
                        queryBuildRange = SysQuery::addDimensionAttributeRange(
                                        query,
                                        dsBondBatchTrans.name(),
                                        fieldStr(GeneralJournalAccountEntry, LedgerDimension),
                                        DimensionComponent::DimensionAttribute,
                                        parms.offsetAccountFilter(),
                                        DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)).Name);
    
                        if (queryBuildRange)
                        {
                            queryBuildRange.dataSource().joinMode(JoinMode::ExistsJoin);
                        }
                    }
                }
                else
                {
                    QueryBuildDataSource dsW1 = origQBDS.addDataSource(tableNum(GeneralJournalAccountEntry_W), identifierStr(GJAE_W));
                    dsW1.addSelectionField(fieldNum(GeneralJournalAccountEntry_W, BondBatchTrans_RU));
                    dsW1.addLink(fieldNum(GeneralJournalAccountEntry, RecId), fieldNum(GeneralJournalAccountEntry_W, GeneralJournalAccountEntry));
                    dsW1.fetchMode(QueryFetchMode::One2One);
                    dsW1.joinMode(JoinMode::InnerJoin);
                    dsW1.addRange(fieldNum(GeneralJournalAccountEntry_W, BondBatchTrans_RU)).value(SysQuery::valueNotEmptyString());
                }
            break;
        }
    
        queryBuildDataSource = origQBDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerAmount</Name>
				<Source><![CDATA[
    public AmountMST ledgerAmount(Common _record)
    {
        return _record.(amountFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTableId</Name>
				<Source><![CDATA[
    protected tableId ledgerTableId()
    {
        return tableNum(GeneralJournalAccountEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainAccountFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Defines main account field ID for the current ancessor of <c>LedgerRRGOp_Ledger_RU</c> class.
    /// </summary>
    /// <returns>
    ///     Main account field ID.
    /// </returns>
    protected fieldId mainAccountFieldId()
    {
        return fieldNum(GeneralJournalAccountEntry, LedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGOp_Ledger_Trans_RU construct()
    {
        return new LedgerRRGOp_Ledger_Trans_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromOperationType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGOp_Ledger_Trans_RU newFromOperationType(LedgerRRGOperationType_RU _operationType)
    {
        LedgerRRGOp_Ledger_Trans_RU operation;
    
        if (_operationType == LedgerRRGOperationType_RU::ActiveBalance ||
            _operationType == LedgerRRGOperationType_RU::PassiveBalance)
        {
            operation = LedgerRRGOp_Ledger_Trans_Contractor_RU::construct();
        }
        else
        {
            operation = LedgerRRGOp_Ledger_Trans_RU::construct();
        }
    
        return operation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processQueryRun</Name>
				<Source><![CDATA[
    public AmountMST processQueryRun(QueryRun _queryRun)
    {
        AmountMST ret = super(_queryRun);
        if (FeatureStateProvider::isFeatureEnabled(DebitCreditBalanceInFinancialReportFeature::instance()))
        {
            if(crediting == UnknownNoYes::Unknown)
            {
                switch(parms.operation().LedgerOperation)
                {
                    case LedgerRRGOperationType_RU::BalanceCredit:
                        ret = abs(min(ret, 0));
                        break;
        
                    case  LedgerRRGOperationType_RU::BalanceDebit:
                        ret = max(ret, 0);
                        break;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>