<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionAuditLogField</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTransactionAuditLogField</c> class represents a change to table field that is being audited.
/// </summary>
[System.Diagnostics.DebuggerDisplayAttribute("{toString()}")]
internal class RetailTransactionAuditLogField
{
    private RecId   recId;
    private TableId tableId;
    private FieldId fieldId;
    private anytype oldValue;
    private anytype newValue;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>RetailTransactionAuditLogField</c>.
    /// </summary>
    /// <param name = "_buffer">The current record being changed.</param>
    /// <param name = "_fieldId">The ID of the field being changed.</param>
    /// <param name = "_old">The old value of the field.</param>
    /// <param name = "_new">The new value of the field.</param>
    /// <returns>An instance of <c>RetailTransactionAuditLogField</c>.</returns>
    public static RetailTransactionAuditLogField construct(Common _buffer, FieldId _fieldId, anytype _old, anytype _new)
    {
        RetailTransactionAuditLogField instance = new RetailTransactionAuditLogField();

        instance.recId    = _buffer.RecId;
        instance.tableId  = _buffer.TableId;
        instance.fieldId  = _fieldId;
        instance.oldValue = _old;
        instance.newValue = _new;

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the record being audited.
    /// </summary>
    /// <returns>The <c>RecId</c> of the record being audited.</returns>
    public RecId getRecId()
    {
        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ID</c> of the table being audited.
    /// </summary>
    /// <returns>The <c>ID</c> of the table being audited.</returns>
    public TableId getTableId()
    {
        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ID</c> of the field being audited.
    /// </summary>
    /// <returns>The <c>ID</c> of the field being audited.</returns>
    public FieldId getFieldId()
    {
        return fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the field being audited.
    /// </summary>
    /// <returns>The name of the field being audited.</returns>
    public FieldName getFieldName()
    {
        return fieldId2Name(tableId, fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the old value of the field being audited.
    /// </summary>
    /// <returns>The old value of the field being audited.</returns>
    public anytype getOldValue()
    {
        return oldValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the new value of the field being audited.
    /// </summary>
    /// <returns>The new value of the field being audited.</returns>
    public anytype getNewValue()
    {
        return newValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConvertedOldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the string representation of old value of the field being audited.
    /// </summary>
    /// <returns>The string representation of old value of the field being audited.</returns>
    public str getConvertedOldValue()
    {
        return RetailTransactionAuditLogTypeConverter::convertToString(tableId, fieldId, oldValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConvertedNewValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the string representation of new value of the field being audited.
    /// </summary>
    /// <returns>The string representation of new value of the field being audited.</returns>
    public str getConvertedNewValue()
    {
        return RetailTransactionAuditLogTypeConverter::convertToString(tableId, fieldId, newValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a human readable representation of this type
    /// </summary>
    /// <returns>A string representing an instance of this type.</returns>
    [Hookable(false)]
    public str toString()
    {
        return strFmt('%1.%2 (%3): %4 -> %5', 
            tableId2Name(this.tableId),
            fieldId2Name(this.tableId, this.fieldId),
            this.recId,
            this.oldValue,
            this.newValue);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>