<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationPurchReqTableDataPersistence</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationPurchReqTableDataPersistence</c> class persists data to <c>PurchReqTable</c>, etc.
/// </summary>
[TaxIntegrationDataPersistence(tableStr(PurchReqTable))]
public class TaxIntegrationPurchReqTableDataPersistence
    extends TaxIntegrationAbstractDataPersistenceTemplate
{
    protected PurchReqTable purchReqTable;
    protected PurchReqLine purchReqLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (TaxIntegrationConstructWithSourceRecordPurchaseFlight::instance().isEnabled() && document.getLocalRecord())
        {
            purchReqTable = document.getLocalRecord();
            purchReqTable.selectForUpdate(true);
            return null;
        }
        else
        {
            return SysDaQueryObjectBuilder::from(this.purchReqTable)
                .forUpdate()
                .where(this.purchReqTable, fieldStr(PurchReqTable, RecId))
                    .isEqualToLiteral(this.document.getLocalRecId())
                .toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        if (TaxIntegrationPurchReqDocumentPerLineFlight::instance().isEnabled())
        {
            PurchCalcTax purchCalcTax = document.getLegacyTax().purchCalcTax();
            if (!(purchCalcTax is PurchCalcTax_PurchReq))
            {
                throw error(strFmt('@TaxIntegrationException:TaxIntegrationCannotSupport', classId2Name(classIDGet(purchCalcTax)), funcName()));
            }

            PurchCalcTax_PurchReq purchCalcTaxReq = purchCalcTax;
            return SysDaQueryObjectBuilder::from(this.purchReqLine)
                .forUpdate()
                .where(this.purchReqLine, fieldStr(PurchReqLine, RecId))
                    .isEqualToLiteral(purchCalcTaxReq.getPurchReqLine().RecId)
                .toSysDaQueryObject();
        }
        else
        {
            return SysDaQueryObjectBuilder::from(this.purchReqLine)
                .forUpdate()
                .where(this.purchReqLine, fieldStr(PurchReqLine, PurchReqTable))
                    .isEqualToLiteral(this.purchReqTable.RecId)
                .toSysDaQueryObject();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of the document.
    /// </summary>
    /// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
            .forUpdate()
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.purchReqTable.TableId)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.purchReqTable.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfLine)
            .forUpdate()
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.purchReqLine.TableId)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.purchReqLine.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current line of the document.
    /// </summary>
    /// <returns>The current line of the document</returns>
    protected TaxIntegrationLineObject getLine()
    {
        TaxIntegrationLocalId localId = TaxIntegrationAbstractRecordObject::getLocalIdStatic(this.purchReqLine.TableId, this.purchReqLine.RecId);
        if (!document.checkLine(localId))
        {
            document.setException(new System.InvalidOperationException(
                strFmt("@TaxIntegrationException:LineOnDocumentNotFound", localId, document.getLocalId())));
            return null;
        }

        return document.getLine(localId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the document.
    /// </summary>
    /// <returns>Always true.</returns>
    protected boolean saveDocument()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    /// <returns>true if the operation is successful; otherwise, false.</returns>
    protected boolean saveLine(TaxIntegrationLineObject _line)
    {
        if (!_line.isTaxable())
        {
            return true;
        }

        TaxGroup taxGroup = _line.getTaxGroup();
        TaxItemGroup taxItemGroup = _line.getTaxItemGroup();

        purchReqLine.TaxGroup = taxGroup;
        purchReqLine.TaxItemGroup = taxItemGroup;
        purchReqLine.doUpdate();
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>