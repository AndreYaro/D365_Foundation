<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcGlobalTableConstraintControlBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for building input controls for the user defined table constraint edit form.
/// </summary>
class PcGlobalTableConstraintControlBuilder
{
    FormBuildControl targetControl;
    FormRun          targetFormRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a control to the target control.
    /// </summary>
    /// <param name="_formDataSourceId">
    /// A form data source ID.
    /// </param>
    /// <param name="_controlName">
    /// A control name.
    /// </param>
    /// <param name="_attributeDataType">
    /// An attribute data type.
    /// </param>
    public void addControl(int _formDataSourceId, str _controlName, AttributeDataType _attributeDataType)
    {
        FormBuildStringControl   formStringControl;
        FormBuildIntControl      formIntegerControl;
        FormBuildCheckBoxControl formCheckBoxControl;

        switch (_attributeDataType)
        {
            case AttributeDataType::Integer:
                formIntegerControl = targetControl.addDataField(_formDataSourceId, fieldNum(PCGlobalTableConstraintEditTmp, IntValue));
                formIntegerControl.showZero(RepShowZero::Yes);
                formIntegerControl.registerOverrideMethod(methodStr(FormIntControl, lookup), this.integerLookupMethodName(), targetFormRun);
                formIntegerControl.lookupButton(FormLookupButton::Always);
                formIntegerControl.label(_controlName);
                break;

            case AttributeDataType::Text:
                formStringControl = targetControl.addDataField(_formDataSourceId, fieldNum(PCGlobalTableConstraintEditTmp, TextValue));
                formStringControl.label(_controlName);
                formStringControl.mandatory(true);
                formStringControl.registerOverrideMethod(methodStr(FormStringControl, lookup), this.enumLookupMethodName(), targetFormRun);
                formStringControl.lookupButton(FormLookupButton::Always);
                break;

            case AttributeDataType::TrueFalse:
                formCheckBoxControl = targetControl.addDataField(_formDataSourceId, fieldNum(PCGlobalTableConstraintEditTmp, BooleanValue));
                formCheckBoxControl.label(_controlName);
                break;

            default:
                if (!this.addControlDefault(_formDataSourceId, _controlName, _attributeDataType))
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>addControlDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a control to the target control.
    /// </summary>
    /// <param name = "_formDataSourceId">
    ///     Form datasource.
    /// </param>
    /// <param name = "_controlName">
    ///     Form control name.
    /// </param>
    /// <param name = "_attributeDataType">
    ///     An attribute data type.
    /// </param>
    /// <returns>
    ///     false; For extensibility purpose the return value can also be changed.
    /// </returns>
    [Replaceable]
    protected boolean addControlDefault(int _formDataSourceId, str _controlName, AttributeDataType _attributeDataType)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enumLookupMethodName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the enum lookup method name.
    /// </summary>
    /// <returns>
    /// The enum lookup method name.
    /// </returns>
    public str enumLookupMethodName()
    {
        return identifierStr(enumLookup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializing the control builder.
    /// </summary>
    /// <param name="_targetControl">
    /// The target control.
    /// </param>
    /// <param name="_targetFormRun">
    /// The target <c>FormRun</c> instance.
    /// </param>
    public void initialize(FormBuildControl _targetControl, FormRun _targetFormRun)
    {
        PCContractNotNull::assertObject(_targetControl, funcName());
        PCContractNotNull::assertObject(_targetFormRun, funcName());

        targetControl   = _targetControl;
        targetFormRun   = _targetFormRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>integerLookupMethodName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the integer lookup method name.
    /// </summary>
    /// <returns>
    /// The integer lookup method name.
    /// </returns>
    public str integerLookupMethodName()
    {
        return identifierStr(integerLookup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCGlobalTableConstraintControlBuilder construct()
    {
        return new PCGlobalTableConstraintControlBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>