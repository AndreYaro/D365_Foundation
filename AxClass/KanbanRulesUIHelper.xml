<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanRulesUIHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanRulesUIHelper</c> class provides some generic handling of new <c>KanbanFlow</c>
///    objects and several rules that can be reused among the classes that inherit from it.
/// </summary>
/// <remarks>
///    This is the base class of the <c>KanbanRulesFormHelper</c> class and the
///    <c>KanbanRuleDuplicateFormHelper</c> class.
/// </remarks>
public class KanbanRulesUIHelper implements ButtonStateProvider
{
    LeanRuleData            leanRuleData;
    KanbanFlowWrapper       kanbanFlowWrapper;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the activation of the <c>KanbanRule</c> object data source.
    /// </summary>
    public void activate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the advanced caching.
    /// </summary>
    /// <remarks>
    ///    This method must be implemented by the rule helper classes that use the <c>FormButtonManager</c>
    ///    class.This method is needed when the rule implementer class must perform advanced caching.
    /// </remarks>
    public void clearCache()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineButtonStates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements advanced caching for specific rules.
    /// </summary>
    /// <param name="_ruleFunctionName">
    ///    A string that identifies the rule for which advanced caching to perform.
    /// </param>
    /// <remarks>
    ///    The method is called by the <c>FormButtonManager</c> class on the rule class that implements the
    ///    <c>ButtonStateProvider</c> class.
    /// </remarks>
    public void determineButtonStates(str _ruleFunctionName)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLeanRuleData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal instance of the <c>KanbanFlowWrapper</c> class by using the specified
    ///    <c>LeanRuleData</c> object.
    /// </summary>
    /// <param name="_leanRuleData">
    ///    The <c>LeanRuleData</c> object to use for initialization.
    /// </param>
    public void initFromLeanRuleData(LeanRuleData _leanRuleData)
    {
        leanRuleData = _leanRuleData;

        if (leanRuleData)
        {
            kanbanFlowWrapper = leanRuleData.parmKanbanFlowWrapper();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMultiActivityKanbanFlow</Name>
				<Source><![CDATA[
    public boolean isMultiActivityKanbanFlow()
    {
        return    kanbanFlowWrapper
               && kanbanFlowWrapper.isMultiActivityKanbanFlow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPlanPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows the activities lookup.
    /// </summary>
    /// <param name="_formControl">
    ///    The control that initiated the lookup.
    /// </param>
    /// <param name="_filterStr">
    ///    The current filter value in the control.
    /// </param>
    /// <param name="_elementRole">
    ///    The role of the element.
    /// </param>
    public void lookupPlanPlanActivity(
        FormControl           _formControl,
        str                   _filterStr,
        KanbanFlowElementRole _elementRole)
    {
        if (!leanRuleData)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        LeanProductionFlowActivityLookupParm::lookup(_formControl,
                                                     _filterStr,
                                                     _elementRole,
                                                     leanRuleData,
                                                     this.isMultiActivityKanbanFlow());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPlanPlanActivityReplacingRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows the activities lookup when creating a replacing rule.
    /// </summary>
    /// <param name="_formControl">
    ///    The control that initiated the lookup.
    /// </param>
    /// <param name="_filterStr">
    ///    The current filter value in the control.
    /// </param>
    /// <param name="_elementRole">
    ///    The role of the element, such as source or destination.
    /// </param>
    /// <param name="_replacedRule">
    ///    The data of the rule being replaced.
    /// </param>
    public void lookupPlanPlanActivityReplacingRule(
        FormControl           _formControl,
        str                   _filterStr,
        KanbanFlowElementRole _elementRole,
        LeanRuleData          _replacedRule)
    {
        if (!leanRuleData)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        LeanProductionFlowActivityLookupParm::lookup(_formControl,
                                                     _filterStr,
                                                     _elementRole,
                                                     leanRuleData,
                                                     this.isMultiActivityKanbanFlow(),
                                                     _replacedRule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckActiveFlowVersions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the production flow versions of the <c>KanbanFlow</c> table are active.
    /// </summary>
    /// <returns>
    ///    true if both verions are active; otherwise, false.
    /// </returns>
    public boolean ruleCheckActiveFlowVersions()
    {
        return leanRuleData ? leanRuleData.kanbanFlow().hasActiveFlowVersion() : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckCoverageAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>LeanRuleCoverageType</c> enumeration value is All.
    /// </summary>
    /// <returns>
    ///    true if the coverage type is All; otherwise, false.
    /// </returns>
    public boolean ruleCheckCoverageAll()
    {
        return leanRuleData ? (leanRuleData.parmLeanCoverage().RuleCoverageType == LeanRuleCoverageType::All) : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckCoverageProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>LeanRuleCoverageType</c> enumeration value is the <c>Product</c> value.
    /// </summary>
    /// <returns>
    ///    true if the coverage type is the <c>Product</c> value; otherwise, false.
    /// </returns>
    public boolean ruleCheckCoverageProduct()
    {
        return leanRuleData ? (leanRuleData.parmLeanCoverage().RuleCoverageType == LeanRuleCoverageType::Product) : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckCoverageProductFamily</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>LeanRuleCoverageType</c> enumeration value is the <c>ProductFamily</c>
    ///    value.
    /// </summary>
    /// <returns>
    ///    true if the coverage type is the <c>ProductFamily</c> value; otherwise, false.
    /// </returns>
    public boolean ruleCheckCoverageProductFamily()
    {
        return leanRuleData ? (leanRuleData.parmLeanCoverage().RuleCoverageType == LeanRuleCoverageType::ProductFamily) : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckKanbanTypeManufacturing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the kanban type is manufacturing.
    /// </summary>
    /// <returns>
    ///    true if the kanban type is manufacturing; otherwise false.
    /// </returns>
    public boolean ruleCheckKanbanTypeManufacturing()
    {
        return leanRuleData ? (leanRuleData.parmKanbanRule().KanbanType == LeanKanbanType::Manufacturing) : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the data sources to use in the rule computation process.
    /// </summary>
    /// <param name="datasources1">
    ///    A <c>Common</c> table buffer that belongs to the first instance of a data source.
    /// </param>
    /// <param name="datasources2">
    ///    A <c>Common</c> table buffer that belongs to the second instance of a data source; optional.
    /// </param>
    /// <param name="datasources3">
    ///    A <c>Common</c> table buffer that belongs to the third instance of a data source; optional.
    /// </param>
    /// <param name="datasources4">
    ///    A <c>Common</c> table buffer that belongs to the 4 instance of a data source; optional.
    /// </param>
    /// <param name="datasources5">
    ///    A <c>Common</c> table buffer that belongs to the 5 instance of a data source; optional.
    /// </param>
    /// <remarks>
    ///    Up to five data sources can be passed. If the implementation requires more data sources, additional
    ///    custom methods should be implemented on the class that is implementing the rule.The method is
    ///    called by form button manager on the rule class that implements the <c>ButtonStateProvider</c>
    ///    interface.
    /// </remarks>
    public void setDatasources(
        Common datasources1,
        Common datasources2 = null,
        Common datasources3 = null,
        Common datasources4 = null,
        Common datasources5 = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePlanPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the currently selected first or last activities for a <c>KanbanRule</c> record.
    /// </summary>
    /// <param name="_elementRole">
    ///    The enumerator that indicates whether the first or last activities should be validated.
    /// </param>
    /// <returns>
    ///    true if the element is valid; otherwise, false.
    /// </returns>
    public boolean validatePlanPlanActivity(KanbanFlowElementRole _elementRole)
    {
        LeanProductionFlowActivityLookupParm    leanProductionFlowActivityLookupParm = LeanProductionFlowActivityLookupParm::newStandard();

        // initialize the lookup parameters
        leanProductionFlowActivityLookupParm.parmKanbanFlowElementRole(_elementRole);
        leanProductionFlowActivityLookupParm.parmLeanRuleData(leanRuleData);
        leanProductionFlowActivityLookupParm.parmLeanRuleActiveFromDateTime(leanRuleData.validFrom());
        leanProductionFlowActivityLookupParm.parmLeanRuleActiveToDateTime(leanRuleData.validTo());
        leanProductionFlowActivityLookupParm.parmIsMultiActivityFlow(this.isMultiActivityKanbanFlow());

        return leanRuleData.type().validateSelection(leanProductionFlowActivityLookupParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePlanPlanActivityReplacedRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a currently-selected first or last activities for a <c>KanbanRule</c> in a replacing
    ///    scenario.
    /// </summary>
    /// <param name="_elementRole">
    ///    The enumerator that determines whether to validate the first or last activities.
    /// </param>
    /// <param name="_originalRule">
    ///    The original kanban rule, which is used when validating the selection for a replacing rule.
    /// </param>
    /// <returns>
    ///    true if the element is valid; otherwise, false.
    /// </returns>
    public boolean validatePlanPlanActivityReplacedRule(
        KanbanFlowElementRole _elementRole,
        LeanRuleData          _originalRule)
    {
        LeanProductionFlowActivityLookupParm    leanProductionFlowActivityLookupParm = LeanProductionFlowActivityLookupParm::newStandard();

        // initialize the lookup parameters
        leanProductionFlowActivityLookupParm.parmKanbanFlowElementRole(_elementRole);
        leanProductionFlowActivityLookupParm.parmLeanRuleData(leanRuleData);
        leanProductionFlowActivityLookupParm.parmLeanRuleActiveFromDateTime(leanRuleData.validFrom());
        leanProductionFlowActivityLookupParm.parmLeanRuleActiveToDateTime(leanRuleData.validTo());
        leanProductionFlowActivityLookupParm.parmIsMultiActivityFlow(this.isMultiActivityKanbanFlow());
        leanProductionFlowActivityLookupParm.parmReplacedRuleData(_originalRule);

        return leanRuleData.type().validateSelection(leanProductionFlowActivityLookupParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static KanbanRulesUIHelper construct()
    {
        return new KanbanRulesUIHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    public static KanbanRulesUIHelper newStandard()
    {
        return KanbanRulesUIHelper::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterOnlyActiveKanbanRules</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Helper method that filters only active kanban rules in the specified <c>LeanCoverageKanbanRule</c> datasource.
    /// </summary>
    /// <param name = "_leanCoverageKanbanRuleDataSource">Form's LeanCoverageKanbanRule datasource</param>
    public static void filterOnlyActiveKanbanRules(QueryBuildDataSource _leanCoverageKanbanRuleDataSource)
    {
        QueryBuildRange leanCoverageKanbanRuleQueryBuildRange = _leanCoverageKanbanRuleDataSource.addRange(fieldNum(LeanCoverageKanbanRule, ValidFrom));
        leanCoverageKanbanRuleQueryBuildRange.value(
            strFmt('(%1.%2 < %3)',
                _leanCoverageKanbanRuleDataSource.name(),
                fieldStr(LeanCoverageKanbanRule, ValidFrom),
                DateTimeUtil::toStr(DateTimeUtil::utcNow())));

        leanCoverageKanbanRuleQueryBuildRange = _leanCoverageKanbanRuleDataSource.addRange(fieldNum(LeanCoverageKanbanRule, ValidTo));
        leanCoverageKanbanRuleQueryBuildRange.value(
            strFmt('((%1.%2 > %3) || (%1.%2 == %4))',
                _leanCoverageKanbanRuleDataSource.name(),
                fieldStr(LeanCoverageKanbanRule, ValidTo),
                DateTimeUtil::toStr(DateTimeUtil::utcNow()),
                queryValue(DateTimeUtil::minValue())));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>