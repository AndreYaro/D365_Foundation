<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjIntercompanyInvoiceOrigExpense</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class maps the values from an intercompany expense report line to be used when generating an
/// invoice against the borrowing legal entity.
/// </summary>
public class ProjIntercompanyInvoiceOrigExpense implements ProjIntercompanyInvoiceOrigTrans
{
    TrvExpTrans                     expTrans;
    TrvExpTransSourceDocLineItem    expTransSourceDocItem;
    AmountCur                       costPrice;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getActivityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the activity number of the expense line.
    /// </summary>
    /// <returns>
    /// The activity number of the expense line.
    /// </returns>
    public ProjActivityNumber getActivityNumber()
    {
        return expTrans.ProjActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total line amount to be invoiced to the other legal entity.
    /// </summary>
    /// <returns>
    /// The line amount to be invoiced to the other legal entity.
    /// </returns>
    public AmountCur getAmountCur()
    {
        if (this.getQuantity() > 0)
        {
            return this.getQuantity() * this.getSalesPrice();
        }
        else
        {
            return this.getSalesPrice();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code in which the cost is incurred in the lending company.
    /// </summary>
    /// <returns>
    /// The currency code in which the cost is incurred in the lending company.
    /// </returns>
    public CurrencyCode getCostCurrency()
    {
        return expTransSourceDocItem.parmTransactionCurrencyCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost price of the transaction incurred in the lending company.
    /// </summary>
    /// <returns>
    /// The cost price of the transaction incurred in the lending company.
    /// </returns>
    public Amount getCostPrice()
    {
        if (!costPrice)
        {
            costPrice = expTransSourceDocItem.parmSourceDocumentAmountMap().lookup(MonetaryAmount::ExtendedPrice).parmAmount();
            if (this.getQuantity() > 0)
            {
                costPrice = costPrice / this.getQuantity();
            }
        }

        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code of the transaction, which is the one that the borrowing legal entity will be invoiced.
    /// </summary>
    /// <returns>
    /// The currency code that the transaction should be invoiced.
    /// </returns>
    public CurrencyCode getCurrencyCode()
    {
        return expTrans.IntercompanyTransferCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data area ID of the lending legal entity.
    /// </summary>
    /// <returns>
    /// The data area ID of the lending legal entity.
    /// </returns>
    public DataAreaId getDataAreaId()
    {
        return expTrans.ReferenceDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a default dimension set of the transaction.
    /// </summary>
    /// <returns>
    /// A description of the transaction.
    /// </returns>
    public LedgerDefaultDimensionValueSet getDefaultDimension()
    {
        return expTrans.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a description of the transaction.
    /// </summary>
    /// <returns>
    /// A description of the transaction.
    /// </returns>
    public Description getDescription()
    {
        return expTrans.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalSalesCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency in which the sales price to the end customer is expressed in.
    /// </summary>
    /// <returns>
    /// The currency in which the sales price to the end customer is expressed in.
    /// </returns>
    public CurrencyCode getFinalSalesCurrencyCode()
    {
        return expTrans.IntercompanySalesCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price that the final customer will be charged for this item.
    /// </summary>
    /// <returns>
    /// The sales price that the final customer will be charged for this item.
    /// </returns>
    public AmountCur getFinalSalesPrice()
    {
        return expTrans.IntercompanySalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndirectCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoice indirect component amount.
    /// </summary>
    /// <returns>
    /// The invoice indirect component amount of the transaction.
    /// </returns>
    public Amount getIndirectCost()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinePropertyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line property ID of the transaction.
    /// </summary>
    /// <returns>
    /// The line property ID of the transaction.
    /// </returns>
    public ProjLinePropertyId getLinePropertyId()
    {
        return expTransSourceDocItem.parmProjectLineProperty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the project category ID of the transaction.
    /// </summary>
    /// <returns>
    /// The project category ID of the transaction.
    /// </returns>
    public ProjCategoryId getProjectCategoryId()
    {
        return expTransSourceDocItem.parmProjectCategoryId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data area ID of the borrowing legal entity.
    /// </summary>
    /// <returns>
    /// The data area ID of the borrowing legal entity.
    /// </returns>
    public DataAreaId getProjectDataAreaId()
    {
        return expTrans.InterCompanyLE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the related project in the borrowing legal entity.
    /// </summary>
    /// <returns>
    /// The ID of the related project in the borrowing legal entity.
    /// </returns>
    /// <remarks>
    /// This is the project where the costs will be incurred at the borrowing legal entity side.
    /// </remarks>
    public ProjId getProjectId()
    {
        return expTransSourceDocItem.parmProjectId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of items in this transaction.
    /// </summary>
    /// <returns>
    /// The number of items in this transactions.
    /// </returns>
    public Qty getQuantity()
    {
        Qty productQuantity = expTransSourceDocItem.parmQuantity();

        if (productQuantity == 0)
        {
            productQuantity = 1;
        }

        return productQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the expense line.
    /// </summary>
    /// <returns>
    /// The record ID of the intercompany transaction.
    /// </returns>
    public RefRecId getRecId()
    {
        return expTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales price that the other legal entity is expected to pay for the expense.
    /// </summary>
    /// <returns>
    /// The sales price that the other legal entity is expected to pay for the expense.
    /// </returns>
    public Amount getSalesPrice()
    {
        return expTrans.IntercompanyTransferPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the source document line associated with the transaction.
    /// </summary>
    /// <returns>
    /// The record ID of the source document line associated with the transaction.
    /// </returns>
    public SourceDocumentLineRecId getSourceDocumentLine()
    {
        return expTrans.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item sales tax group that will be used in the invoice line for this transaction.
    /// </summary>
    /// <returns>
    /// The item sales tax group that will be used in the invoice line for this transaction.
    /// </returns>
    public TaxItemGroup getTaxItemGroup()
    {
        ProjCategoryId              categoryId;
        ProjCategory                category;

        categoryId = ProjIntercompanyParameters::getValidCategory(this.getProjectCategoryId(), this.getProjectDataAreaId(), this.getTransType());
        category   = ProjCategory::find(categoryId);

        return category.TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxGroup</Name>
				<Source><![CDATA[
    public TaxGroup getTaxGroup()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    public TransDate getTransDate()
    {
        return expTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the origin of the transaction.
    /// </summary>
    /// <returns>
    /// The origin of the transaction.
    /// </returns>
    public ProjTransactionOrigin getTransOrigin()
    {
        return ProjOrigin::ExpenseManagement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of the project transaction.
    /// </summary>
    /// <returns>
    /// The type of the project transaction.
    /// </returns>
    public ProjTransType getTransType()
    {
        return ProjTransType::Cost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitOfMeasureSymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the symbol of the unit of measure in which the quantity of this item is expressed.
    /// </summary>
    /// <returns>
    /// The symbol of the unit of measure in which the quantity of this item is expressed.
    /// </returns>
    public UnitOfMeasureSymbol getUnitOfMeasureSymbol()
    {
        UnitOfMeasure  unitOfMeasure;

        unitOfMeasure = UnitOfMeasure::findByInternalCode(UnitOfMeasureCodeSymbol::Pieces);
        if (!unitOfMeasure)
        {
            throw error(strFmt("@SYS4005066", UnitOfMeasureCodeSymbol::Pieces));
        }

        return unitOfMeasure.Symbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the unit price of the resource being invoiced.
    /// </summary>
    /// <returns>
    /// The unit price of the resource being invoiced.
    /// </returns>
    public AmountCur getUnitPrice()
    {
        // Since expenses don't have indirect costs, the unit price is the sales price
        return this.getSalesPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the worker related to this transaction.
    /// </summary>
    /// <returns>
    /// The record ID of the worker related to this transaction.
    /// </returns>
    public HcmWorkerRecId getWorker()
    {
        return expTransSourceDocItem.parmProjectWorkerRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceName</Name>
				<Source><![CDATA[
    public Name getResourceName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance based on a <c>TrvExpTrans</c> record.
    /// </summary>
    /// <param name="_expenseTrans">
    /// The <c>TrvExpTrans</c> record to be used in the intercompany invoicing process.
    /// </param>
    protected void new(TrvExpTrans _expenseTrans)
    {
        expTrans                = _expenseTrans.data();

        // Always calculate amounts and update transfer price.
        ttsBegin;
        expTrans.selectForUpdate(true);
        expTrans.calcIntercompanyAmounts();
        expTrans.update();
        ttsCommit;
        
        expTransSourceDocItem   = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(expTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBilled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the billing status of the transaction being invoiced.
    /// </summary>
    /// <param name="_billed">
    /// true if the transaction was included in some intercompany invoice; false if it should be available to be invoiced again.
    /// </param>
    public void setBilled(boolean _billed)
    {
        TrvExpTrans trvExpTransUpd;

        if (_billed && ProjIntercompanyInvoiceCreateValidateIsBilledFlight::instance().isEnabled())
        {
            trvExpTransUpd = TrvExpTrans::find(expTrans.RecId, true);

            if (trvExpTransUpd.IntercompanyBilled)
            {
                // Selected intercompany transaction was already marked as billed and cannot be included in intercompany invoice.
                throw error("@Proj:IntercompanyTransactionAlreadyBilled");
            }

            trvExpTransUpd.IntercompanyBilled = _billed;
            trvExpTransUpd.update();
        }
        else
        {
            update_recordSet trvExpTransUpd
                setting intercompanyBilled = _billed
                where trvExpTransUpd.RecId == expTrans.RecId;
        }

        if (expTrans.LineType == TrvExpLineType::ItemizedLine)
        {
            TrvExpTrans::updateItemizedHeaderIntercompanyBilling(_billed, expTrans.ParentRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the transaction in a form.
    /// </summary>
    /// <remarks>
    /// Used for auditing purposes.
    /// </remarks>
    public void showTrans()
    {
        Args args;

        args = new Args();
        args.record(TrvExpTable::findRecId(expTrans.TrvExpTable));
        args.menuItemType(MenuItemType::Display);
        new MenuFunction(MenuItemDisplayStr(TrvExpenses), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjIntercompanyInvoiceOrigExpense construct(TrvExpTrans _expenseTrans)
    {
        return new ProjIntercompanyInvoiceOrigExpense(_expenseTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTrvExpTransRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>ProjIntercompanyInvoiceOrigExpense</c> for a given expense trans record ID.
    /// </summary>
    /// <param name="_expenseTrans">
    /// The record ID of the <c>TrvExpTrans</c> record that will be mapped.
    /// </param>
    /// <returns>
    /// A new instance of <c>ProjIntercompanyInvoiceOrigExpense</c>.
    /// </returns>
    public static ProjIntercompanyInvoiceOrigExpense newFromTrvExpTransRecId(RefRecId _expenseTrans)
    {
        return new ProjIntercompanyInvoiceOrigExpense(TrvExpTrans::find(_expenseTrans));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>