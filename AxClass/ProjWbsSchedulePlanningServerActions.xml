<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjWbsSchedulePlanningServerActions</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjWbsSchedulePlanningServerActions implements IServerActions
{
    #TimeConstants

    HierarchyIdBase                     hierarchyId;
    ProjWbsSessionContextDataContract   sessionContext;
    ProjWBSType                         wbsType;
    boolean                             showDifference;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(ProjWbsSessionContextDataContract _sesisonContext)
    {
        sessionContext = _sesisonContext;
        if (sessionContext != null)
        {
            hierarchyId     = sessionContext.parmHierarchyId();
            wbsType         = sessionContext.parmWBSType();
            showDifference  = sessionContext.parmShowDifference();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjWbsSchedulePlanningServerActions construct(ProjWbsSessionContextDataContract _sessionContext)
    {
        return new ProjWbsSchedulePlanningServerActions(_sessionContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the action of a given <c>ActionDataContract</c>.
    /// </summary>
    /// <param name = "_action"><c>ActionDataContract</c> object</param>
    /// <returns>Name of the action from the <c>ActionDataContract</c></returns>
    public str executeAction(ActionDataContract  _action)
    {
        Enumerator              argsEnumerator;
        str                     taskId, parentTaskId, grandParentTaskId, aboveSiblingTaskId, belowSiblingTaskId, siblingNumber;
        str                     name, effort, startDate, endDate, duration, numberOfResources, resourceCategory, projCategory, clearParent, clearRoot;
        List                    predecessors;

        argsEnumerator = _action.parmArgs().getEnumerator();
        switch (_action.parmName())
        {
            case "indent":
                argsEnumerator.moveNext();
                taskId = argsEnumerator.current();
                argsEnumerator.moveNext();
                aboveSiblingTaskId = argsEnumerator.current();
                argsEnumerator.moveNext();
                clearParent = argsEnumerator.current();
                ProjTask::indentTasks(this.hierarchyId, this.wbsType, taskId, aboveSiblingTaskId, clearParent);
                break;
            case "outdent":
                argsEnumerator.moveNext();
                taskId = argsEnumerator.current();
                argsEnumerator.moveNext();
                parentTaskId = argsEnumerator.current();
                argsEnumerator.moveNext();
                grandParentTaskId = argsEnumerator.current();
                argsEnumerator.moveNext();
                ProjTask::outdentTasks(this.hierarchyId, this.wbsType, taskId, parentTaskId, grandParentTaskId);
                break;
            case "moveUp":
                argsEnumerator.moveNext();
                taskId = argsEnumerator.current();
                argsEnumerator.moveNext();
                aboveSiblingTaskId = argsEnumerator.current();
                argsEnumerator.moveNext();
                ProjTask::moveTaskUp(this.hierarchyId, this.wbsType, taskId, aboveSiblingTaskId);
                break;
            case "moveDown":
                argsEnumerator.moveNext();
                taskId = argsEnumerator.current();
                argsEnumerator.moveNext();
                belowSiblingTaskId = argsEnumerator.current();
                argsEnumerator.moveNext();
                ProjTask::moveTaskDown(this.hierarchyId, this.wbsType, taskId, belowSiblingTaskId);
                break;
            case "updateTask":
                argsEnumerator.moveNext();
                taskId = argsEnumerator.current();
                argsEnumerator.moveNext();
                name = argsEnumerator.current();
                argsEnumerator.moveNext();
                effort = argsEnumerator.current();
                argsEnumerator.moveNext();
                startDate = argsEnumerator.current();
                argsEnumerator.moveNext();
                endDate = argsEnumerator.current();
                argsEnumerator.moveNext();
                duration = argsEnumerator.current();
                argsEnumerator.moveNext();
                numberOfResources = argsEnumerator.current();
                argsEnumerator.moveNext();
                resourceCategory = argsEnumerator.current();
                argsEnumerator.moveNext();
                projCategory = argsEnumerator.current();
                argsEnumerator.moveNext();
                siblingNumber = argsEnumerator.current();
                predecessors = new List(Types::String);
                while (argsEnumerator.moveNext()) {
                    predecessors.addEnd(argsEnumerator.current());
                }
                ProjTask::setTaskinfo(this.hierarchyId, this.wbsType, taskId, name, siblingNumber, effort, startDate, endDate, duration,
                    numberOfResources, resourceCategory, projCategory, predecessors);
                break;
            case "addTask":
                argsEnumerator.moveNext();
                taskId = argsEnumerator.current();
                argsEnumerator.moveNext();
                parentTaskId = argsEnumerator.current();
                argsEnumerator.moveNext();
                name = argsEnumerator.current();
                argsEnumerator.moveNext();
                effort = argsEnumerator.current();
                argsEnumerator.moveNext();
                startDate = argsEnumerator.current();
                argsEnumerator.moveNext();
                endDate = argsEnumerator.current();
                argsEnumerator.moveNext();
                duration = argsEnumerator.current();
                argsEnumerator.moveNext();
                numberOfResources = argsEnumerator.current();
                argsEnumerator.moveNext();
                resourceCategory = argsEnumerator.current();
                argsEnumerator.moveNext();
                projCategory = argsEnumerator.current();
                argsEnumerator.moveNext();
                siblingNumber = argsEnumerator.current();
                argsEnumerator.moveNext();
                clearRoot = argsEnumerator.current();
                predecessors = new List(Types::String);
                while (argsEnumerator.moveNext())
                {
                    predecessors.addEnd(argsEnumerator.current());
                }
                ProjTask::addTask(this.hierarchyId, this.wbsType, taskId, parentTaskId, name, siblingNumber, effort, startDate, endDate, duration,
                  numberOfResources, resourceCategory, projCategory, predecessors, clearRoot);
                break;
            case "deleteTasks":
                argsEnumerator.moveNext();
                taskId = argsEnumerator.current();
                argsEnumerator.moveNext();
                ProjTask::deleteTasks(this.hierarchyId, this.wbsType, taskId);
                break;
            default:
                EventHandlerResult eventResult;
                this.runExecuteActionDelegate(_action, eventResult);
                        
                if (!eventResult.hasResult())
                {
                    error("@Proj:UnrecocognizedOperation");
                }
                
                break;
        }
        return _action.parmName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runExecuteActionDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to be called in the default case within the executeAction method for running custom actions defined in <c>ActionDataContract</c>.
    /// </summary>
    /// <param name = "_action"><c>ActionDataContract</c> instance</param>
    /// <param name = "_result"><c>EventHandlerResult</c> instance</param>
    delegate void runExecuteActionDelegate(ActionDataContract  _action, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeDataRetrievalAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the data retrieval based on the action set on the <c>ActionDataContract</c> object.
    /// </summary>
    /// <param name = "_action"><c>ActionDataContract</c> object</param>
    /// <returns>
    /// A <c>CollectionDataContract</c> object that contains data related to the action.
    /// </returns>
    public CollectionDataContract executeDataRetrievalAction(ActionDataContract _action)
    {
        Enumerator                          argsEnumerator;
        CollectionDataContract              dataCollection = CollectionDataContract::construct();
        str                                 startDate, endDate;
        str                                 genericResource;
        ActivityRecId                       activity;
        ResResourceCategoryDataContract     resourceCategoryDataItem;
        List                                resourceCategoryDataItems;
        boolean                     	    isExport, deleteTask;
        str                                 selectedElementNum;
        ProjHierarchyTaskId                 taskId;
        str                                 assignedResourcesRecId, assignedResourcesOriginalRecId;
        real                                effort;                               

        argsEnumerator = _action.parmArgs().getEnumerator();
        switch (_action.parmName())
        {
            case "":
                dataCollection = ProjTask::getTasks(this.hierarchyId, this.showDifference);
                break;
            case "exportImportWBSTemplate":
                argsEnumerator.moveNext();
                isExport = str2int(argsEnumerator.current());
                argsEnumerator.moveNext();
                selectedElementNum = strltrim(any2str(argsEnumerator.current()));
                this.exportImportWBSTemplate(isExport, selectedElementNum);
                break;
            case "restoreTask":
                while (argsEnumerator.moveNext())
                {
                    selectedElementNum = strltrim(any2str(argsEnumerator.current()));
                    ProjTask::restoreTask(this.hierarchyId, str2Int64(selectedElementNum));
                }
                break;
            case "getResourceCategories":
                dataCollection = ProjTask::getResourceCategories();
                break;
            case "launchAvailabilityView":
                argsEnumerator.moveNext();
                taskId = str2int64(argsEnumerator.current());
                dataCollection = this.launchAvailabilityView(this.hierarchyId, taskId);
                break;
            case "resourceAssignmentDetails":
                argsEnumerator.moveNext();
                taskId = str2int64(argsEnumerator.current());
                this.resourceAssignmentDetails(this.hierarchyId, taskId);
                break;
            case "updateResourceAssignment":
                argsEnumerator.moveNext();
                taskId = str2int64(argsEnumerator.current());
                argsEnumerator.moveNext();
                assignedResourcesRecId = argsEnumerator.current();
                argsEnumerator.moveNext();
                assignedResourcesOriginalRecId = argsEnumerator.current();
                argsEnumerator.moveNext();
                effort = argsEnumerator.current();
                dataCollection = this.updateResourceAssignment(this.hierarchyId, taskId,
                    assignedResourcesRecId, assignedResourcesOriginalRecId, effort);
                break;
            case "autoAssignResource":
                argsEnumerator.moveNext();
                taskId = str2int64(argsEnumerator.current());
                argsEnumerator.moveNext();
                dataCollection = this.autoAssignResource(this.hierarchyId, taskId);
                break;
            case "removeDraftActivityResources":
                argsEnumerator.moveNext();
                taskId = str2int64(argsEnumerator.current());
                argsEnumerator.moveNext();
                deleteTask = str2Int(argsEnumerator.current());
                this.removeDraftActivityResources(this.hierarchyId, taskId, deleteTask);
                break;
            case "proposeGenericResource":
                dataCollection = this.proposePlannedResource(this.hierarchyId);
                break;
            case "configureGenericResource":
                dataCollection = this.reservePlannedResource(this.hierarchyId);
                break;
            case "getProjectTeamResources":
                dataCollection = this.getProjectTeamResoures(this.hierarchyId);
                break;
            case "getCategoryTypes":
                List projCategories = this.getProjectCategoryTypes();
                dataCollection.parmItems(projCategories);
                break;
            case "getCalendarDetails":
                argsEnumerator.moveNext();
                startDate = argsEnumerator.current();
                argsEnumerator.moveNext();
                endDate = argsEnumerator.current();
                dataCollection = this.getWorkCalendarDetails(startDate,endDate);
                break;
            case "defaultProjCategory":
                dataCollection = this.defaultProjCategory();
                break;
            case "openAttachmentsForm":
                argsEnumerator.moveNext();
                taskId = str2int64(argsEnumerator.current());
                this.openAttachmentsForm(this.hierarchyId, taskId);
                break;
            case "openDetailsForm":
                argsEnumerator.moveNext();
                taskId = str2int64(argsEnumerator.current());
                this.openDetailsForm(this.hierarchyId, taskId);
                break;
            case "getStandardWorkingDayHours":
                dataCollection = this.getStandardWorkDayHours();
                break;
            
            default:
                EventHandlerResult eventResult;
                this.runExecuteDataRetrievalActionDelegate(_action, eventResult);
                        
                if (!eventResult.hasResult())
                {
                    error("@Proj:UnrecocognizedOperation");
                }
                
                break;
        }

        return dataCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runExecuteDataRetrievalActionDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to be called in the default case within the executeDataRetrievalAction method for running custom data retreival actions defined in <c>ActionDataContract</c>.
    /// </summary>
    /// <param name = "_action"><c>ActionDataContract</c> instance</param>
    /// <param name = "_result"><c>EventHandlerResult</c> instance</param>
    delegate void runExecuteDataRetrievalActionDelegate(ActionDataContract  _action, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResourceAssignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update resource assignment to the task with user specified resources.
    /// </summary>
    /// <param name = "_projPlanVersionHierarchyId">
    /// ProjPlanVersion hierarchy Id.
    /// </param>
    /// <param name = "_taskId">
    /// ProjPlanVersion task ID.
    /// </param>
    /// <param name = "_assignedResourceRecIds">
    /// The list of task assigned activity resource record ID.
    /// </param>
    /// <param name = "_assignedResourceOriginalRecIds">
    /// The list of task original assigned activity resource record ID.
    /// </param>
    /// <param name = "_effort">
    /// The task effort hours.
    /// </param>
    /// <returns>
    /// Collection of propose status, propose message, reosurces and remaining hours.
    /// </returns>
    private CollectionDataContract updateResourceAssignment(HierarchyIdBase _projPlanVersionHierarchyId, ProjHierarchyTaskId _taskId,
        str _assignedResourceRecIds, str _assignedResourceOriginalRecIds, real _effort)
    {
        boolean isProject = ProjPlanVersionDetail::isProjectHierarchy(_projPlanVersionHierarchyId);
        boolean activityIsDraft = isProject && (ProjPlanVersionDetail::findByHierarchyId(_projPlanVersionHierarchyId).VersionType == ProjPlanVersionType::Draft);
        ResCommitType commitType = isProject ? ResCommitType::HardBook : ResCommitType::SoftBook;

        str assignedResourceRecIds = strLtrim(strRtrim(_assignedResourceRecIds));
        str assignedResourceOriginalRecIds = strLtrim(strRtrim(_assignedResourceOriginalRecIds));
        ProjPlanVersion projPlanVersion = ProjPlanVersion::findByHierarchyAndTaskId(_projPlanVersionHierarchyId, _taskId, true);
        ProjPlanVersionDetail projPlanVersionDetail = ProjPlanVersionDetail::findByHierarchyId(_projPlanVersionHierarchyId);

        // Update effort hours.
        if (projPlanVersion.TaskEffort != _effort)
        {
            ttsbegin;
            projPlanVersion.TaskEffort = _effort;
            projPlanVersion.update();
            ttscommit;
        }

        ActivityRecId       activity;
        if (projPlanVersion.HierarchyTreeTableRefRecId)
        {
            activity = ProjTask::getActivityRecId(_projPlanVersionHierarchyId, _taskId);
        }

        ResWBSDataContract  assignmentData = ResWBSDataContract::construct();
        str                 assignedResourceNames;
        if (activityIsDraft)
        {
            if (assignedResourceRecIds != assignedResourceOriginalRecIds )
            {
                //Add a cancelation record to ProjPlanVersionAssignment if the original assigned activity resource is assigned to ResAssignment table.
                ProjTask::removeResourcesFromDraftTask(projPlanVersion.RecId, assignedResourceOriginalRecIds);

                //Add reservation records to ProjPlanVersionAssignment for the selected activity resources.
                ProjTask::assignResourcesToDraftTask(projPlanVersion.RecId, assignedResourceRecIds);
                        
                [assignedResourceNames, assignedResourceRecIds] = ProjTask::getAssignedResourcesPerDraftActivity(projPlanVersion.RecId);
            }
            else if (assignedResourceRecIds && projPlanVersionDetail.VersionId > 1.0)
            {
                //If the task has no draft assignment record and it was previously published,
                //then it will retrieve resources from ResAssignment table if exits.
                [assignedResourceNames, assignedResourceRecIds] = ProjTask::getAssignedResourcePerActivity(activity, commitType);
            }
        }
        else
        {
            if (assignedResourceRecIds != assignedResourceOriginalRecIds)
            {
                //Assign resources to the published activity if the assigment resources list is different.
                SchedFromDate startDate = projPlanVersion.TaskStartDate;
                SchedToDate endDate = projPlanVersion.TaskFinishDate;
                Hours effort = projPlanVersion.TaskEffort;

                Map assignResourceRecordMap = new Map(Types::Int64, Types::Record);
                ProjWorkBreakdownStructureV2FormHelper::setupAssignResourceRecordMapForQuotation(projPlanVersionDetail.getWBSType(), assignResourceRecordMap, assignedResourceRecIds);

                if (assignedResourceOriginalRecIds != '')
                {
                    // Remove all resource reservation in this activity. For the case of quotation, it will remove the quotation team member
                    // from PSAProjSchedRole table if it has no reservation in other task of this quotation.
                    ProjTask::cancelActivityAssignment(activity);
                }

                if (assignedResourceRecIds != '')
                {
                    assignedResourceRecIds = ProjWorkBreakdownStructureV2FormHelper::updateAssignResourceRecIdsForQuotation(projPlanVersionDetail.getWBSType(), assignResourceRecordMap, assignedResourceRecIds);
                    ProjTask::reserveResourceActivity(activity, assignedResourceRecIds, startDate, endDate, effort);
                }
            }
            [assignedResourceNames, assignedResourceRecIds] = ProjTask::getAssignedResourcePerActivity(activity, commitType);
        }

        // Update projPlanVersion buffer since scheduing fields value could have been changed.
        projPlanVersion = ProjPlanVersion::findByHierarchyAndTaskId(_projPlanVersionHierarchyId, _taskId, true);
        ProjTaskDataContract activityAttributes = ProjTask::getActivitySchedulingAttributes(_projPlanVersionHierarchyId, projPlanVersion, 0, commitType);
        assignmentData.parmRemainingHours(activityAttributes.parmRemainingHours());
        assignmentData.parmAssignedHours(activityAttributes.parmAssignedHours());
        assignmentData.parmSchedulingStatus(activityAttributes.parmSchedulingStatus());
        assignmentData.parmHasDraftAssignment(activityAttributes.parmHasDraftAssignment());
        assignmentData.parmTotalAssignedActivityResources(activityAttributes.parmTotalAssignedActivityResources());
        assignmentData.parmTotalAssignedPlannedResources(activityAttributes.parmTotalAssignedPlannedResources());
        assignmentData.parmAssignedResourcesStr(assignedResourceNames);
        assignmentData.parmAssignedResourcesRecId(assignedResourceRecIds);
        assignmentData.parmAssignedResourcesOriginalRecId(assignedResourceRecIds);
        
        List items = new List(Types::Class);
        items.addEnd(assignmentData);

        CollectionDataContract collection = CollectionDataContract::construct();
        collection.parmItems(items);
        return collection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>launchAvailabilityView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launch resource availability view.
    /// </summary>
    /// <param name = "_projPlanVersionHierarchyId">
    /// ProjPlanVersion hierarchy Id.
    /// </param>
    /// <param name = "_taskId">
    /// ProjPlanVersion task id.
    /// </param>
    /// <returns>
    /// Collection of propose status, propose message, reosurces and remaining hours.
    /// </returns>
    private CollectionDataContract launchAvailabilityView(HierarchyIdBase _projPlanVersionHierarchyId, ProjHierarchyTaskId _taskId)
    {
        boolean                 sucessfullyLaunch;        

        ResWBSDataContract assignmentData = ResWBSDataContract::construct();
        HierarchyIdBase publishedHierarchyId = ProjTask::getPublishedHierarchyId(_projPlanVersionHierarchyId);

        if (publishedHierarchyId)
        {
            ActivityRecId activity = ProjTask::getActivityRecId(_projPlanVersionHierarchyId, _taskId);
            ProjPlanVersion planVersionTask = ProjPlanVersion::findByHierarchyAndTaskId(_projPlanVersionHierarchyId, _taskId);
            TransDate startDate = planVersionTask.TaskStartDate;
            TransDate endDate = planVersionTask.TaskFinishDate;

            utcdatetime startDateTime = DateTimeUtil::newDateTime(startDate, 0);
            utcdatetime endDateTime = DatetimeUtil::newDateTime(endDate, #secondsPerDay - 1);

            if (ResUtil::validateRollupCalendarTimeFrameRange(startDateTime, endDateTime, false))
            {
                ResAvailabilityViewContext context = ResAvailabilityViewContext::construct();
                context.activity(activity);
                context.timescale(ResUtil::getRecommendedTimeframeType(startDateTime, endDateTime));
                context.startDateTime(startDateTime);
                context.endDateTime(endDateTime);

                PSARSEntityType entityType;
                ProjPlanVersionDetail planVersionDetail = ProjPlanVersionDetail::findByHierarchyId(planVersionTask.HierarchyId);
                if (planVersionDetail.ProjId)
                {
                    entityType = PSARSEntityType::Project;
                    ProjTable project = ProjTable::find(planVersionDetail.ProjId);
                    context.description(strFmt("@Res:TitleWithIdAndName", project.ProjId, project.Name ));
                }
                else if (ProjPlanVersionDetail::isQuotationHierarchy(_projPlanVersionHierarchyId))
                {
                    entityType = PSARSEntityType::Quotation;
                    SalesQuotationTable quotationTable = ProjTask::getQuotationTableByHierarchyId(planVersionTask.HierarchyId);
                    context.description(strFmt("@Res:TitleWithIdAndName", quotationTable.QuotationId, quotationTable.QuotationName ));
                }

                ResourceCategoryRecId resourceCategory = planVersionTask.ResourceCategory;
                ResourceCategoryRecId defaultCategory = ResourceCategoryFacade::defaultResourceCategory();
                if (resourceCategory != defaultCategory)
                {
                    ResourceCategoryId resourceCategoryId = ResourceCategoryFacade::getId(resourceCategory);
                    ResResourceCategorySearchCriteria searchCriteriaItem = ResResourceCategorySearchCriteria::construct();
                    searchCriteriaItem.addValue(resourceCategoryId);

                    ResSearchCriteria searchCriteria = ResSearchCriteria::construct();
                    searchCriteria.setCriteriaItem(searchCriteriaItem);
                    context.searchString(searchCriteria.getCriteriaString());
                }

                context.activityType(entityType);

                Args args = new Args();
                args.parmObject(context);
                args.menuitemname(menuItemDisplayStr(ResWBSResourceAssignment));
                args.name(formStr(ResWBSResourceAssignment));
                FormRun formRun =  ClassFactory.formRunClass(args);
                formRun.init();
                formRun.run();
                formRun.wait();
            
                sucessfullyLaunch = true;

                str assignedResourceNames, assignedResourceRecIds;
                
                [assignedResourceNames, assignedResourceRecIds] = ProjTask::getAssignedResourcePerActivity(activity);
                assignmentData.parmAssignedResourcesStr(assignedResourceNames);
                assignmentData.parmAssignedResourcesRecId(assignedResourceRecIds);
                assignmentData.parmAssignedResourcesOriginalRecId(assignedResourceRecIds);

                PSAScheduled taskSchedulingStatus = planVersionTask.TaskSchedulingStatus;

                ResCommitType commitType = (entityType == PSARSEntityType::Project) ? ResCommitType::HardBook : ResCommitType::SoftBook;
                Hours remainingHours = ActivityFacade::getRemainingCapacityInHours(activity, commitType);
                
                assignmentData.parmRemainingHours(remainingHours);
                assignmentData.parmSchedulingStatus(enum2str(taskSchedulingStatus));
            }
        }

        if (!sucessfullyLaunch)
        {
            str proposeMessage = "@Res:ActivityIsNotPublished";
            assignmentData.parmMessage(proposeMessage);
        }

        assignmentData.parmSucceed(sucessfullyLaunch);

        List items = new List(Types::Class);
        items.addEnd(assignmentData);

        CollectionDataContract collection = CollectionDataContract::construct();
        collection.parmItems(items);

        return collection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceAssignmentDetails</Name>
				<Source><![CDATA[
    private void resourceAssignmentDetails(HierarchyIdBase _projPlanVersionHierarchyId, ProjHierarchyTaskId _taskId)
    {
        ActivityRecId activity = ProjTask::getActivityRecId(_projPlanVersionHierarchyId, _taskId);

        Args args = new Args();
        args.parm(int642Str(activity));
        args.menuitemname(menuItemDisplayStr(ResResourceAssignmentDetailsMenuItem));
        args.name(formStr(ResResourceAssignmentDetailsForm));
        FormRun formRun =  ClassFactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoAssignResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Auto assign resoruce to the task in attempt to fully assigned the specific task with best matching resources.
    /// </summary>
    /// <param name = "_projPlanVersionHierarchyId">
    /// ProjPlanVersion hierarchy Id.
    /// </param>
    /// <param name = "_taskId">
    /// ProjPlanVersion task id.
    /// </param>
    /// <returns>
    /// Collection of propose status, propose message, reosurces and remaining hours.
    /// </returns>
    private CollectionDataContract autoAssignResource(HierarchyIdBase _projPlanVersionHierarchyId, ProjHierarchyTaskId _taskId)
    {
        CollectionDataContract      collection;
        List                        items = new List(Types::Class);
        HierarchyIdBase             publishedHierarchyId;
        boolean                     isProject = true;
        ResWBSAutoAssignResource    autoAssign;
        ActivityRecId               activity;
        ResWBSDataContract          autoAssignData;
        str                         proposeMessage;
        boolean                     sucessfullyPropose;
        str                         assignedResourceNames;
        str                         assignedResourceRecIds;
        Hours                       remainingHours;
        Hours                       remainingSeconds;
        PSAScheduled                taskSchedulingStatus;

        autoAssignData = ResWBSDataContract::construct();
        publishedHierarchyId = ProjTask::getPublishedHierarchyId(_projPlanVersionHierarchyId);

        if (publishedHierarchyId)
        {
            //Auto assign resources to the activity
            isProject = ProjPlanVersionDetail::isProjectHierarchy(_projPlanVersionHierarchyId);
            activity = ProjTask::getActivityRecId(_projPlanVersionHierarchyId, _taskId);
            ProjPlanVersion planVersionTask = ProjPlanVersion::findByActivityRecId(activity);
            ResCommitType commitType = isProject ? ResCommitType::HardBook : ResCommitType::SoftBook;
            remainingSeconds = ActivityFacade::getRemainingCapacityInSeconds(activity, commitType);
            
            if (remainingSeconds > 59)
            {
                autoAssign = ResWBSAutoAssignResource::construct(activity);
                [sucessfullyPropose, proposeMessage] = autoAssign.autoAssignResources();
                [assignedResourceNames, assignedResourceRecIds] = ProjTask::getAssignedResourcePerActivity(activity);
                autoAssignData.parmAssignedResourcesStr(assignedResourceNames);
                autoAssignData.parmAssignedResourcesRecId(assignedResourceRecIds);
                autoAssignData.parmAssignedResourcesOriginalRecId(assignedResourceRecIds);
                taskSchedulingStatus = planVersionTask.TaskSchedulingStatus;
                autoAssignData.parmSchedulingStatus(enum2str(taskSchedulingStatus));
                remainingHours = ActivityFacade::getRemainingCapacityInHours(activity, commitType);
                autoAssignData.parmRemainingHours(remainingHours);
            }
            else
            {
                sucessfullyPropose = false;
                proposeMessage = "@Res:TaskIsFullyAssigned";
            }
        }
        else
        {
            sucessfullyPropose = false;
            proposeMessage = "@Res:ActivityIsNotPublished";
        }

        autoAssignData.parmSucceed(sucessfullyPropose);
        autoAssignData.parmMessage(proposeMessage);
        items.addEnd(autoAssignData);

        collection = CollectionDataContract::construct();
        collection.parmItems(items);
        return collection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeDraftActivityResources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove activity resources for the specified draft WBS task.
    /// </summary>
    /// <param name = "_projPlanVersionHierarchyId">
    /// ProjPlanVersion hierarchy Id.
    /// </param>
    /// <param name = "_taskId">
    /// ProjPlanVersion task id.
    /// </param>
    /// <param name = "_deleteTask">
    /// Indicates whether the WBS task is being deleted.
    /// </param>
    private void removeDraftActivityResources(HierarchyIdBase _projPlanVersionHierarchyId, 
        ProjHierarchyTaskId _taskId, boolean _deleteTask)
    {
        ProjPlanVersion projPlanVersion = ProjPlanVersion::findByHierarchyAndTaskId(_projPlanVersionHierarchyId, _taskId);
        
        if (projPlanVersion)
        {
            // Remove all draft records.
            ProjPlanVersionAssignment::deleteByProjPlanVersion(projPlanVersion.RecId);

            if (!_deleteTask)
            {
                // Add cancelation records.
                ttsbegin;
                ProjPlanVersionAssignment projPlanVersionAssignment;
                projPlanVersionAssignment.ProjPlanVersion = projPlanVersion.RecId;
                projPlanVersionAssignment.ActivityResource = 0;
                projPlanVersionAssignment.ReservationType = ProjPlanVersionAssignmentType::Cancel;
                projPlanVersionAssignment.insert();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposePlannedResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Propose planned resources for the published hierarchy.
    /// </summary>
    /// <param name = "_projPlanVersionHierarchyId">
    /// ProjPlanVersion hierarchy Id.
    /// </param>
    /// <returns>
    /// Collection of propose status and propose message.
    /// </returns>
    private CollectionDataContract proposePlannedResource(HierarchyIdBase _projPlanVersionHierarchyId)
    {
        CollectionDataContract  collection;
        List                    items = new List(Types::Class);
        str                     proposeMessage;
        boolean                 sucessfullyPropose;
        ResWBSActivityTeam      activityTeam;
        HierarchyIdBase         publishedHierarchyId;
        ResWBSDataContract      genericResourceData;

        genericResourceData = ResWBSDataContract::construct();
        publishedHierarchyId = ProjTask::getPublishedHierarchyId(_projPlanVersionHierarchyId);

        if (publishedHierarchyId && ProjPlanVersionDetail::isProjectHierarchy(_projPlanVersionHierarchyId))
        {
            activityTeam = ResWBSActivityTeam::construct(publishedHierarchyId, PSARSEntityType::Project);
            [sucessfullyPropose, proposeMessage] = activityTeam.proposePlannedResource();
        }
        else if (publishedHierarchyId && ProjPlanVersionDetail::isQuotationHierarchy(_projPlanVersionHierarchyId))
        {
            activityTeam = ResWBSActivityTeam::construct(publishedHierarchyId, PSARSEntityType::Quotation);
            [sucessfullyPropose, proposeMessage] = activityTeam.proposePlannedResource();
        }
        else
        {
            sucessfullyPropose = false;
            proposeMessage = "@Res:ActivityIsNotPublished";
        }

        genericResourceData.parmSucceed(sucessfullyPropose);
        genericResourceData.parmMessage(proposeMessage);
        items.addEnd(genericResourceData);

        collection = CollectionDataContract::construct();
        collection.parmItems(items);

        return collection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservePlannedResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reserve planned resources for the published hierarchy.
    /// </summary>
    /// <param name = "_projPlanVersionHierarchyId">
    /// ProjPlanVersion hierarchy Id.
    /// </param>
    /// <returns>
    /// Collection of propose status and propose message.
    /// </returns>
    private CollectionDatacontract reservePlannedResource(HierarchyIdBase _projPlanVersionHierarchyId)
    {
        CollectionDataContract  collection;
        List                    items = new List(Types::Class);
        str                     reserveErrorMessage;
        boolean                 sucessfullyReserve;
        ResWBSActivityTeam      activityTeam;
        HierarchyIdBase         publishedHierarchyId;
        ResWBSDataContract      genericResourceData;

        genericResourceData = ResWBSDataContract::construct();
        publishedHierarchyId = ProjTask::getPublishedHierarchyId(_projPlanVersionHierarchyId);

        if (publishedHierarchyId && ProjPlanVersionDetail::isProjectHierarchy(_projPlanVersionHierarchyId))
        {
            activityTeam = ResWBSActivityTeam::construct(publishedHierarchyId, PSARSEntityType::Project);
            [sucessfullyReserve, reserveErrorMessage] = activityTeam.reservePlannedResource();
        }
        else if (publishedHierarchyId && ProjPlanVersionDetail::isQuotationHierarchy(_projPlanVersionHierarchyId))
        {
            activityTeam = ResWBSActivityTeam::construct(publishedHierarchyId, PSARSEntityType::Quotation);
            [sucessfullyReserve, reserveErrorMessage] = activityTeam.reservePlannedResource();
        }
        else
        {
            sucessfullyReserve = false;
            reserveErrorMessage = "@Res:ActivityIsNotPublished";
        }

        genericResourceData.parmSucceed(sucessfullyReserve);
        genericResourceData.parmMessage(reserveErrorMessage);
        items.addEnd(genericResourceData);

        collection = CollectionDataContract::construct();
        collection.parmItems(items);

        return collection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectTeamResoures</Name>
				<Source><![CDATA[
    private CollectionDataContract getProjectTeamResoures(HierarchyIdBase _projPlanVersionHierarchyId)
    {
        CollectionDataContract          collection;
        List                            items = new List(Types::Class);
        HierarchyIdBase                 publishedHierarchyId;
        ResWBSActivityTeamDataContract  taskData;
        ProjPlanVersion                 projPlanVersion;
        HierarchyLinkTable              hierarchyLinkTable;
        ProjTable                       projTable;
        SalesQuotationTable             quotationTable;
        PSAProjSchedRole                projectTeam;
        PSARSEntityType                 entityType;

        publishedHierarchyId = ProjTask::getPublishedHierarchyId(_projPlanVersionHierarchyId);
        if (publishedHierarchyId)
        {
            if (ProjPlanVersionDetail::isProjectHierarchy(_projPlanVersionHierarchyId))
            {
                entityType = PSARSEntityType::Project;
            }
            else if (ProjPlanVersionDetail::isQuotationHierarchy(_projPlanVersionHierarchyId))
            {
                entityType = PSARSEntityType::Quotation;
            }

            switch (entityType)
            {
                case PSARSEntityType::Quotation:
                    while select RecId from hierarchyLinkTable
                        where hierarchyLinkTable.HierarchyId == publishedHierarchyId &&
                            hierarchyLinkTable.RefTableId == tableNum(SalesQuotationTable)
                            join RecId from quotationTable
                                where quotationTable.RecId == hierarchyLinkTable.RefRecId
                                    join RecId, Name, ResourceCategory from projectTeam
                                        where projectTeam.QuotationId == quotationTable.QuotationId
                    {
                        taskData = ResWBSActivityTeamDataContract::construct();
                        taskData.parmActivityResourceRecId(projectTeam.RecId);
                        taskData.parmActivityresourceName(projectTeam.Name);
                        taskData.parmResourceCategoryName(ResourceCategoryFacade::getId(projectTeam.ResourceCategory));
                        items.addEnd(taskData);
                    }
                    break;
                case PSARSEntityType::Project:
                    while select RecId from hierarchyLinkTable
                        where hierarchyLinkTable.HierarchyId == publishedHierarchyId
                            && hierarchyLinkTable.RefTableId == tableNum(ProjTable)
                            join RecId from projTable
                                where projTable.RecId == hierarchyLinkTable.RefRecId
                                    join RecId, Name, ResourceCategory from projectTeam
                                        where projectTeam.ProjId == projTable.ProjId
                    {
                        taskData = ResWBSActivityTeamDataContract::construct();
                        taskData.parmActivityResourceRecId(projectTeam.RecId);
                        taskData.parmActivityresourceName(projectTeam.Name);
                        taskData.parmResourceCategoryName(ResourceCategoryFacade::getId(projectTeam.ResourceCategory));
                        items.addEnd(taskData);
                    }
                    break;
            }
        }
        collection = CollectionDataContract::construct();
        collection.parmItems(items);

        return collection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportImportWBSTemplate</Name>
				<Source><![CDATA[
    private void exportImportWBSTemplate(boolean _exportWBS = true, str _selectedTaskId = "")
    {
        ProjPlanVersion   projPlanVersion;
        Args              args;

        args = new Args();
        args.parmEnumType(enumnum(NoYes));

        if (_exportWBS)
        {
            select firstonly projPlanVersion
                where projPlanVersion.HierarchyId == this.hierarchyId;

            args.parmEnum(NOYes::No);
        }
        else
        {
            // import under selected activity, otherwise, import under the root
            if (_selectedTaskId != "")
            {
                select firstonly projPlanVersion
                    where projPlanVersion.HierarchyId == this.hierarchyId
                    && projPlanVersion.HierarchyTaskId == str2int64(_selectedTaskId);
            }
            else
            {
                select firstonly projPlanVersion
                    where projPlanVersion.HierarchyId == this.hierarchyId
                        && projPlanVersion.ParentHierarchyTaskId == 0;
            }

            args.parmEnum(NOYes::Yes);
        }
        args.record(projPlanVersion);
        HierarchyTemplateCopyingDialog_Proj::main(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectCategoryTypes</Name>
				<Source><![CDATA[
    private List getProjectCategoryTypes()
    {
        ProjCategoryTypeDataContract    projCategoryTypeHour;
        ProjTable                       projTable;
        SalesQuotationTable             quotationTable;
        Common                          hierarchyLinkedTable = HierarchyLinkTable_Extension::findLinkedTableByHierarchyId(this.hierarchyId);
        ProjParameters                  projParams = ProjParameters::find();
        List                            projCategories = new List(Types::Class);
        List                            projCategoriesHour = new List(Types::Class);
        List                            allValidCategories  = new List(Types::Class);
        ProjCategoryTypeDataContract    allValidCategoryType;
        boolean                         validateCategories = false;

        switch (hierarchyLinkedTable.TableId)
        {
            case tableNum(ProjTable):
                projTable = hierarchyLinkedTable;
                validateCategories = projTable.ValidateProjCategory;
                break;

            case tableNum(SalesQuotationTable):
                quotationTable = hierarchyLinkedTable;

                if (quotationTable.ProjIdRef)
                {
                    projTable = projTable::find(quotationTable.ProjIdRef);
                    validateCategories = projTable.ValidateProjCategory;
                    break;
                }
                validateCategories = false;
                break;

            default:
                break;
        }

        if (!validateCategories)
        {
            ProjCategory    projCategory;
            CategoryTable   categoryTable;

            while select CategoryId, CategoryName from categoryTable
            outer join ProjCategory
            where ProjCategory.CategoryId == CategoryTable.CategoryId
            && CategoryTable.UseInProject == NoYes::Yes
            {
                if (projCategory.CategoryType == ProjCategoryType::Hour)
                {
                    projCategoryTypeHour    = ProjCategoryTypeDataContract::construct();
                    projCategoryTypeHour.parmCategoryId(categoryTable.CategoryId);
                    projCategoryTypeHour.parmCategoryName(categoryTable.CategoryName);
                    projCategoriesHour.addEnd(projCategoryTypeHour);
                }
            }
        }
        else
        {
            ProjProjectCategoryAssoc    validationView;
            ProjCategory                projCategory;

            while select CategoryId from validationView
                Group By validationView.CategoryId
                where validationView.ProjId == projTable.ProjId
            {
                projCategory = ProjCategory::find(validationView.CategoryId);
                if (projCategory.CategoryType == ProjCategoryType::Hour)
                {
                    projCategoryTypeHour    = ProjCategoryTypeDataContract::construct();
                    projCategoryTypeHour.parmCategoryId(projCategory.CategoryId);
                    projCategoryTypeHour.parmCategoryName(projCategory.Name);
                    projCategoriesHour.addEnd(projCategoryTypeHour);
                }
            }

            if (projParams.ValidationProjCategory == ProjValParameter::Lookup) //Pull the full list of categories if validation is set to lookup
            {
                CategoryTable                   categoryTable;
                ProjCategory                    projCategory2;

                while select CategoryId, CategoryName from categoryTable
                outer join ProjCategory2
                where ProjCategory2.CategoryId == CategoryTable.CategoryId
                && CategoryTable.UseInProject == NoYes::Yes
                {
                    if (projCategory2.CategoryType == ProjCategoryType::Hour)
                    {
                        allValidCategoryType    = ProjCategoryTypeDataContract::construct();
                        allValidCategoryType.parmCategoryId(categoryTable.CategoryId);
                        allValidCategoryType.parmCategoryName(categoryTable.CategoryName);
                        allValidCategories.addEnd(allValidCategoryType);
                    }
                }
            }
        }

        projCategories.addEnd(projCategoriesHour);
        if (validateCategories && projParams.ValidationProjCategory == ProjValParameter::Lookup)
        {
            projCategories.addEnd(allValidCategories);
        }

        return projCategories;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProjCategory</Name>
				<Source><![CDATA[
    private CollectionDataContract defaultProjCategory()
    {
        ProjTable                   projTable;
        SalesQuotationTable         quotationTable;
        Common                      hierarchyLinkedTable = HierarchyLinkTable_Extension::findLinkedTableByHierarchyId(this.hierarchyId);
        ProjParameters              projParams = ProjParameters::find();
        CollectionDataContract      dataCollection = CollectionDataContract::construct();
        List                        defaultCategory = new List(Types::String);
        str                         projDefaultCategory;
        boolean                     validateCategories = false;

        switch (hierarchyLinkedTable.TableId)
        {
            case tableNum(ProjTable):
            projTable = hierarchyLinkedTable;
            validateCategories = projTable.ValidateProjCategory;
            break;

        case tableNum(SalesQuotationTable):
            quotationTable = hierarchyLinkedTable;

            if (quotationTable.ProjIdRef)
            {
                projTable = projTable::find(quotationTable.ProjIdRef);
                validateCategories = projTable.ValidateProjCategory;
                break;
            }
            validateCategories = false;
            break;

        default:
            break;
        }

        if (!validateCategories)
        {
            projDefaultCategory = ProjParameters::find().EmplCategory;
        }
        else
        {
            projTable = HierarchyLinkTable_Extension::findLinkedTableByHierarchyId(this.hierarchyId) as ProjTable;
            ProjProjectCategoryAssoc    validationView;

            select CategoryId from validationView
                where validationView.ProjId == projTable.ProjId
                && validationView.CategoryId == projParams.EmplCategory;
            if (validationView.CategoryId)
            {
                projDefaultCategory = validationView.CategoryId;
            }
            else
            {
                select firstonly CategoryId from validationView
                    where validationView.ProjId == projTable.ProjId;

                projDefaultCategory = validationView.CategoryId;
            }
        }

        defaultCategory.addEnd(projDefaultCategory);
        dataCollection.parmItems(defaultCategory);
        return dataCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTheFormattedDate</Name>
				<Source><![CDATA[
    private str getTheFormattedDate(TransDate _date)
    {
        str retValue =  int2str(mthofyr(_date)) + "/" + int2str(dayofmth(_date)) + "/" + int2str(year(_date));
        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStandardWorkDayHours</Name>
				<Source><![CDATA[
    private CollectionDataContract getStandardWorkDayHours()
    {
        CollectionDataContract          dataCollection = CollectionDataContract::construct();
        List                            workDayHours = new List(Types::Real);
        HierarchyIdBase                 publishedHierarchyId = ProjPlanVersionDetail::getOldDataModelPublishedHierarchyId(this.hierarchyId);
        ProjTable                       projTable = HierarchyLinkTable::findAssociation(publishedHierarchyId, tableNum(ProjTable));
        SalesQuotationTable             salesQuotationTable;
        CalendarId                      calendarId;

        if (!projTable)
        {
            salesQuotationTable  = HierarchyLinkTable::findAssociation(publishedHierarchyId, tableNum(SalesQuotationTable));
        }
        calendarId = projTable ? projTable.PSASchedCalendarId : salesQuotationTable.PSASchedCalendarId;
        workDayHours.addEnd(WorkCalendarTable::find(calendarId).StandardWorkDayHours);
        dataCollection.parmItems(workDayHours);
        return dataCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkCalendarDetails</Name>
				<Source><![CDATA[
    private CollectionDataContract getWorkCalendarDetails(str _startDate, str _endDate)
    {
        HierarchyIdBase                     publishedHierarchyId = ProjPlanVersionDetail::getOldDataModelPublishedHierarchyId(this.hierarchyId);
        ProjTable                           projTable = HierarchyLinkTable::findAssociation(publishedHierarchyId, tableNum(ProjTable));
        SalesQuotationTable                 salesQuotationTable;
        CollectionDataContract              dataCollection = CollectionDataContract::construct();
        WorkCalendarSched                   workCalendarSched = new WorkCalendarSched();
        CalendarId                          calendarId;
        List                                workCalendars = new List(Types::Class);
        ProjProjectWorkCalendarDataContract workCalendar;
        TransDate                           startDate = str2date(_startDate, 213);
        TransDate                           endDate = str2date(_endDate, 213);

        if (!projTable)
        {
            salesQuotationTable  = HierarchyLinkTable::findAssociation(publishedHierarchyId, tableNum(SalesQuotationTable));
        }
        calendarId = projTable ? projTable.PSASchedCalendarId : salesQuotationTable.PSASchedCalendarId;

        workCalendarSched.initFromGlobalCache();
        while (startDate <= endDate)
        {
            workCalendar = ProjProjectWorkCalendarDataContract::construct();
            workCalendar.parmProjDate(this.getTheFormattedDate(startDate));
            workCalendar.parmIsWorkingDay(workCalendarSched.isDateOpen(calendarId, startDate, true));
            workCalendars.addEnd(workCalendar);
            startDate++;
        }
        workCalendarSched.saveToGlobalCache();
        dataCollection.parmItems(workCalendars);
        return dataCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openAttachmentsForm</Name>
				<Source><![CDATA[
    private void openAttachmentsForm(HierarchyIdBase _hierarchyId, ProjHierarchyTaskId _taskId)
    {
        Args args = new Args();
        FormRun formRun;
        ProjPlanVersion projPlanVersion;
        HierarchyTreeTable htt;

        projPlanVersion = ProjPlanVersion::findByHierarchyAndTaskId(_hierarchyId, _taskId);
        htt = HierarchyTreeTable::findRecId(projPlanVersion.HierarchyTreeTableRefRecId);

        args.name(formStr(DocuAttachment));
        args.record(htt);
        args.record().company(curExt());

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openDetailsForm</Name>
				<Source><![CDATA[
    private void openDetailsForm(HierarchyIdBase _hierarchyId, ProjHierarchyTaskId _taskId)
    {
        Args args = new Args();
        FormRun formRun;
        ProjPlanVersion projPlanVersion;

        projPlanVersion = ProjPlanVersion::findByHierarchyAndTaskId(_hierarchyId, _taskId);

        args.menuitemname(menuItemDisplayStr(ProjWBSActivityDetails));
        args.name(formStr(ProjWBSActivityDetails));
        args.record(projPlanVersion);
        args.record().company(curExt());

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>