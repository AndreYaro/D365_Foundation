<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceOverrideWorkflowHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for retail price override workflow
/// </summary>
class RetailPriceOverrideWorkflowHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoActivateWorkflowForSalesLine</Name>
				<Source><![CDATA[
	/// <summary>
    /// When the status is Submitted then auto activate workflow for newly created <c>SalesLine</c>
    /// </summary>
    /// <param name = "_salesLine">
    /// Newly created <c>SalesLine</c> table buffer
	/// </param>
    public void autoActivateWorkflowForSalesLine(SalesLine _salesLine, SalesLine _originalSalesLine)
    {
        WorkflowWorkItemTable workflowWorkItemTable;
        MCRSalesLine mcrSalesLine;
        WorkflowComment workflowComment;
        WorkflowTrackingCommentTable workflowTrackingCommentTable;
        WorkflowWorkItemActionManager workflowWorkItemActionManager;
        WorkflowCorrelationId workflowCorrelationId;
        WorkflowTypeName workflowTypeName;

        // if new line has workflow status = submitted, then create workflow task for new line, copy original workflow comment
        mcrSalesLine = _salesLine.mcrSalesLine();
        if (mcrSalesLine.RetailPriceOverrideWorkflowState == RetailPriceOverrideWorkflowState::Submitted)
        {
            workflowTypeName = workflowTypeStr(RetailSalesLineWFType);
            workflowWorkItemActionManager = new WorkflowWorkItemActionManager();

            // get active workflow work item for original line
            workflowWorkItemTable = this.getActiveWorkflowWorkItem(classNum(RetailSalesLineWFTypeDocument), tableNum(SalesLine), _originalSalesLine.RecId);

            if (workflowWorkItemTable)
            {
                // get comment for active workflow item
                workflowTrackingCommentTable = this.getWorkflowItemComment(workflowWorkItemTable.CorrelationId);
    
                if (workflowTrackingCommentTable)
                {
                    workflowComment = workflowTrackingCommentTable.Comment;
                }

                workflowCorrelationId = Workflow::activateFromWorkflowType(workflowTypeName, _salesLine.RecId, workflowComment, NoYes::No);
            }
			// since workflow is batch process, if the new workflow item has not created yet then set the status to not submitted
            else
            {
                mcrSalesLine.selectForUpdate(true);
                mcrSalesLine.RetailPriceOverrideWorkflowState = RetailPriceOverrideWorkflowState::NotSubmitted;
                ttsbegin;
                mcrSalesLine.update();
                ttscommit;
                _salesLine.mcrPackMCRSalesLine(mcrSalesLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoActivateWorkflowForSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// When the status is Submitted then auto activate workflow for newly created <c>SalesQuotationLine</c>
    /// </summary>
    /// <param name = "_salesQuotationLine">
    /// Newly created <c>SalesQuotationLine</c> table buffer
    /// </param>
    public void autoActivateWorkflowForSalesQuotationLine(SalesQuotationLine _salesQuotationLine, SalesQuotationLine _originalSalesQuotationLine)
    {
        WorkflowWorkItemTable workflowWorkItemTable;
        MCRSalesQuotationLine mcrSalesQuotationLine;
        WorkflowComment workflowComment;
        WorkflowTrackingCommentTable workflowTrackingCommentTable;
        WorkflowWorkItemActionManager workflowWorkItemActionManager;
        WorkflowCorrelationId workflowCorrelationId;
        WorkflowTypeName workflowTypeName;

        // if new line has workflow status = submitted, then create workflow task for new line, copy original workflow comment
        mcrSalesQuotationLine = _salesQuotationLine.mcrSalesQuotationLine();
        if (mcrSalesQuotationLine.RetailPriceOverrideWorkflowState == RetailPriceOverrideWorkflowState::Submitted)
        {
            workflowTypeName = workflowTypeStr(RetailSalesQuotationLineWFType);
            workflowWorkItemActionManager = new WorkflowWorkItemActionManager();

            // get active workflow work item for original line
            workflowWorkItemTable = this.getActiveWorkflowWorkItem(classNum(RetailSalesQuotationLineWFTypeDocument), tableNum(SalesQuotationLine), _originalSalesQuotationLine.RecId);

            if (workflowWorkItemTable)
            {
                // get comment for active workflow item
                workflowTrackingCommentTable = this.getWorkflowItemComment(workflowWorkItemTable.CorrelationId);

                if (workflowTrackingCommentTable)
                {
                    workflowComment = workflowTrackingCommentTable.Comment;
                }

                workflowCorrelationId = Workflow::activateFromWorkflowType(workflowTypeName, _salesQuotationLine.RecId, workflowComment, NoYes::No);
            }
            // since workflow is batch process, if the new workflow item has not created yet then set the status to not submitted
            else
            {
                mcrSalesQuotationLine.selectForUpdate(true);
                mcrSalesQuotationLine.RetailPriceOverrideWorkflowState = RetailPriceOverrideWorkflowState::NotSubmitted;
                ttsbegin;
                mcrSalesQuotationLine.update();
                ttscommit;
                _salesQuotationLine.mcrPackMCRSalesQuotationLine(mcrSalesQuotationLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveWorkflowWorkItem</Name>
				<Source><![CDATA[
	/// <summary>
    /// Get pending active workflow work item for original line
    /// </summary>
    /// <param name = "_documentClassId">
	/// Workflow document class Id
	/// </param>
    /// <param name = "_refTableId">
	/// Workflow reference table Id
	/// </param>
    /// <param name = "_refRecId">
	/// Workflow reference record Id
	/// </param>
    /// <returns>
    /// <c>WorkflowWorkItemTable</c> table buffer
	/// </returns>
    private WorkflowWorkItemTable getActiveWorkflowWorkItem(WorkflowDocumentClassId _documentClassId, RefTableId _refTableId, RefRecId _refRecId)
    {
        WorkflowWorkItemTable workflowWorkItemTable;

        select firstonly workflowWorkItemTable
            where workflowWorkItemTable.DocumentClassId == _documentClassId
                && workflowWorkItemTable.Status == WorkflowWorkItemStatus::Pending
                && workflowWorkItemTable.Type == WorkflowWorkItemType::WorkItem
                && workflowWorkItemTable.RefTableId == _refTableId
                && workflowWorkItemTable.RefRecId == _refRecId;

        return workflowWorkItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowItemComment</Name>
				<Source><![CDATA[
	/// <summary>
    /// Get comment for workflow item
    /// </summary>
    /// <param name = "_workflowCorrelationId">
	/// Workflow item correlation Id
	/// </param>
    /// <returns>
    /// <c>WorkflowTrackingCommentTable</c> table buffer
	/// </returns>
    private WorkflowTrackingCommentTable getWorkflowItemComment(WorkflowCorrelationId _workflowCorrelationId)
    {
        WorkflowTrackingCommentTable	workflowTrackingCommentTable;
        WorkflowTrackingTable			workflowTrackingTable;
        WorkflowTrackingStatusTable		workflowTrackingStatusTable;

        select firstonly workflowTrackingCommentTable
            join workflowTrackingTable
                where workflowTrackingCommentTable.WorkflowTrackingTable == WorkflowTrackingTable.RecId
                    && workflowTrackingTable.TrackingType == WorkflowTrackingType::Submission
            join workflowTrackingStatusTable
                where workflowTrackingTable.WorkflowTrackingStatusTable == WorkflowTrackingStatusTable.RecId
                    && WorkflowTrackingStatusTable.CorrelationId == _workflowCorrelationId;

        return workflowTrackingCommentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailPriceOverrideWorkflowHelper construct()
    {
        return new RetailPriceOverrideWorkflowHelper();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>