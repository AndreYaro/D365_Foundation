<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransTaxInformationUIControllerProjects_IN_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The UI controller class for controlling all Projects on new tax information UI and transaction update.
/// </summary>
[ExtensionOf(classstr(TransTaxInformationUIControllerProjects))]
final class TransTaxInformationUIControllerProjects_IN_Extension
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setVisibleToVATCtrls</Name>
				<Source><![CDATA[
    protected void setVisibleToVATCtrls()
    {
        next setVisibleToVATCtrls();

        transTaxInformationVATCtrl.parmNonRecoverablePercentRealCtrl().visible(false);
        transTaxInformationVATCtrl.parmVatGoodsTypeComboBox().visible(false);

        if (sourceTable.TableId == tableNum(ProjInvoiceTable))
        {
            transTaxInformationVATCtrl.parmvatCommodityCodeStrCtrl().visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToWithholdTaxCtrls</Name>
				<Source><![CDATA[
    protected void setVisibleToWithholdTaxCtrls()
    {
        next setVisibleToWithholdTaxCtrls();
        transTaxInformationTaxWithholdingCtrl.parmAcknowledgementNumberStrCtrl().visible(false);
        transTaxInformationTaxWithholdingCtrl.parmCountryRegionToRemittanceRefGroup().visible(false);
        transTaxInformationTaxWithholdingCtrl.parmNatureOfRemittanceRefGroup().visible(false);
        transTaxInformationTaxWithholdingCtrl.parmSoftwareDeclReceivedCheckBox().visible(false);
        transTaxInformationTaxWithholdingCtrl.parmTaxWithholdNatureOfAssessee().visible(false);
        transTaxInformationTaxWithholdingCtrl.parmTaxWithholdingTab().visible(!(sourceTable is ProjEmplTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToExciseCtrls</Name>
				<Source><![CDATA[
    protected void setVisibleToExciseCtrls()
    {
        next setVisibleToExciseCtrls();

        TmpProjAdjustment       tmpProjAdjustment;
        TmpProjAdjustmentCreate tmpProjAdjustmentCreate;

        if (sourceTable.TableId == tableNum(TmpProjAdjustment))
        {
            tmpProjAdjustment = sourceTable;
        }
        else if (sourceTable.TableId == tableNum(TmpProjAdjustmentCreate))
        {
            tmpProjAdjustmentCreate = sourceTable;
        }

        if (tmpProjAdjustment
            && (tmpProjAdjustment.AdjustmentType    == ProjAdjustmentType::Hour
                || tmpProjAdjustment.AdjustmentType == ProjAdjustmentType::Revenue))
        {
            transTaxInformationExciseCtrl.parmExciseTab().visible(false);
        }
        else if (tmpProjAdjustmentCreate
            && (tmpProjAdjustmentCreate.AdjustmentType    == ProjAdjustmentType::Hour
                || tmpProjAdjustmentCreate.AdjustmentType == ProjAdjustmentType::Revenue))
        {
            transTaxInformationExciseCtrl.parmExciseTab().visible(false);
        }
        else if (sourceTable.TableId == tableNum(ProjAdvancedJournalLine)
            || sourceTable.TableId == tableNum(ProjAdvancedJournalLineTaxExtensionIN))
        {
            transTaxInformationExciseCtrl.parmExciseTab().visible(false);
        }
        else
        {
            transTaxInformationExciseCtrl.parmIsScrap().visible(false);
            transTaxInformationExciseCtrl.parmCENVATCreditAvailed().visible(false);
            transTaxInformationExciseCtrl.parmDisposalType().visible(false);

            switch (sourceTable.TableId)
            {
                case tableNum(ProjEmplTrans) :
                case tableNum(ProjRevenueTrans) :
                    transTaxInformationExciseCtrl.parmExciseTab().visible(false);
                    break;

                case tableNum(ProjOnAccTrans) :
                    transTaxInformationExciseCtrl.parmDSA().visible(false);
                    transTaxInformationExciseCtrl.parmConsignment().visible(false);
                    break;

                case tableNum(TmpProjAdjustment) :
                case tableNum(TmpProjAdjustmentCreate) :
                    transTaxInformationExciseCtrl.parmDSA().visible(false);
                    transTaxInformationExciseCtrl.parmConsignment().visible(false);
                    transTaxInformationExciseCtrl.parmDirectSettlement().visible(false);
                    break;

                case tableNum(ProjCostTrans) :
                    transTaxInformationExciseCtrl.parmDSA().visible(false);
                    transTaxInformationExciseCtrl.parmConsignment().visible(false);
                    break;

                case tableNum(ProjItemTrans) :
                    transTaxInformationExciseCtrl.parmConsignment().visible(false);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToCustomsCtrls</Name>
				<Source><![CDATA[
    protected void setVisibleToCustomsCtrls()
    {
        SalesLine salesLine;
        ProjItemTrans projItemTrans;

        next setVisibleToCustomsCtrls();
        transTaxInformationCustomsCtrl.parmCustomsTab().visible(false);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && (sourceTable.TableId == tableNum(ProjItemTrans)))
		{
            projItemTrans = sourceTable;
            salesLine = SalesLine::findInventTransId(projItemTrans.InventTransId);
            transTaxInformationCustomsCtrl.parmCustomsTab().visible(salesLine.salesTable().CustomsExportOrder_IN || salesLine.salesLine_IN().ExportOrder);
		}

        if (sourceTable.TableId == tableNum(ProjAdvancedJournalLine)
            || sourceTable.TableId == tableNum(ProjAdvancedJournalLineTaxExtensionIN))
        {
            transTaxInformationCustomsCtrl.parmCustomsTab().visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToServiceTaxCtrls</Name>
				<Source><![CDATA[
    protected void setVisibleToServiceTaxCtrls()
    {
        next setVisibleToServiceTaxCtrls();
        transTaxInformationServiceTaxCtrl.parmIsRecoverableServiceTax().visible(false);
        transTaxInformationServiceTaxCtrl.parmServiceTaxConsignmentNoteNum().visible(false);
        transTaxInformationServiceTaxCtrl.parmGTAServiceCategory().visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToGSTTCtrls</Name>
				<Source><![CDATA[
    protected void setVisibleToGSTTCtrls()
    {  
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalTrans_Project  ledgerJournalTrans_Project;
        ProjCostTrans               projCostTrans;
        TmpProjAdjustmentCreate     tmpProjAdjustmentCreate;
        TmpProjAdjustment           tmpProjAdjustment;
        boolean isProjAdvancedJournal;

        next setVisibleToGSTTCtrls();

        if (sourceTable.TableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans = sourceTable;
        }
        else if (sourceTable.TableId == tableNum(LedgerJournalTrans_Project))
        {
            ledgerJournalTrans_Project = sourceTable;
            ledgerJournalTrans         = ledgerJournalTrans_Project.ledgerJournalTrans();
        }
        else if (sourceTable.TableId == tableNum(ProjCostTrans))
        {
            projCostTrans      = sourceTable;
            ledgerJournalTrans = LedgerJournalTrans::findRecId(projCostTrans.LedgerJournalTrans, false);
        }
        else if(sourceTable.TableId == tableNum(TmpProjAdjustmentCreate))
        {
            tmpProjAdjustmentCreate = sourceTable;
            ProjCostTrans      = projCostTrans::find(tmpProjAdjustmentCreate.TransID);
            ledgerJournalTrans = LedgerJournalTrans::findRecId(projCostTrans.LedgerJournalTrans, false);
        }
        else if (sourceTable.TableId == tableNum(TmpProjAdjustment))
        {
            tmpProjAdjustment    = sourceTable;
            ProjCostTrans        = projCostTrans::find(tmpProjAdjustment.TransID);
            ledgerJournalTrans   = LedgerJournalTrans::findRecId(projCostTrans.LedgerJournalTrans, false);
        }
        else if (sourceTable.TableId == tableNum(ProjAdvancedJournalLine)
            || sourceTable.TableId == tableNum(ProjAdvancedJournalLineTaxExtensionIN))
        {
            isProjAdvancedJournal = true;
        }

        if ((ledgerJournalTrans.RecId != 0
                && ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::Cost)
            || isProjAdvancedJournal)
        {
            transTaxInformationGSTCtrl.parmGSTTab().visible(true);

            if(ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend
                && sourceTable.TableId != tableNum(LedgerJournalTrans_Project)
                && sourceTable.TableId != tableNum(TmpProjAdjustment))
            {
                transTaxInformationGSTCtrl.parmNonBusinessUsagePercent().visible(true);
                transTaxInformationGSTCtrl.parmServiceCategory().visible(true);
            }
            else
            {
                transTaxInformationGSTCtrl.parmNonBusinessUsagePercent().visible(false);
                transTaxInformationGSTCtrl.parmServiceCategory().visible(false);
            }
        }
        else if (sourceTable.TableId    != tableNum(ProjJournalTrans)
            && sourceTable.TableId      != tableNum(TmpProjAdjustment)
            && sourceTable.TableId      != tableNum(TmpProjAdjustmentCreate)
            && sourceTable.TableId      != tableNum(ProjEmplTrans)
            && sourceTable.TableId      != tableNum(ProjItemTrans)
            && sourceTable.TableId      != tableNum(ProjRevenueTrans)
            && sourceTable.TableId      != tableNum(ProjOnAccTrans)
            && sourceTable.TableId      != tableNum(ProjCostTrans)
            && sourceTable.TableId      != tableNum(ProjTable)
            && sourceTable.TableId      != tableNum(ProjInvoiceTable)
            && sourceTable.TableId      != tableNum(TSTimesheetLine)
            && sourceTable.TableId      != tableNum(LedgerJournalTrans_Project))
        {
            transTaxInformationGSTCtrl.parmGSTTab().visible(false);
        }
        else
        {
            if (sourceTable.TableId == tableNum(ProjTable))
            {
                transTaxInformationGSTCtrl.parmHSNCode().visible(false);
                transTaxInformationGSTCtrl.parmSAC().visible(false);
                transTaxInformationGSTCtrl.parmITCCategory().visible(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledToExciseCtrls</Name>
				<Source><![CDATA[
    protected void setEnabledToExciseCtrls()
    {
        next setEnabledToExciseCtrls();
        transTaxInformationExciseCtrl.parmDSA().enabled(
            TaxExciseTypeController_IN::isDSAAllowed(
                transTaxInformation.ExciseType,
                transTaxInformation.ExciseRecordType,
                this.parmTaxModelTaxable().getItemId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnableToDeliveryInfoCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables all delivery information controls on Tax information form.
    /// </summary>
    protected void setEnableToDeliveryInfoCtrls()
    {
        next setEnableToDeliveryInfoCtrls();
        if (sourceTable.TableId == tableNum(ProjAdvancedJournalLine))
        {
            transTaxInformationDeliveryInfoCtrl.parmExportOrder().allowEdit(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToDeliveryInfoCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visible or invisible to export order control on Tax information form.
    /// </summary>
    protected void setVisibleToDeliveryInfoCtrls()
    {
        next setVisibleToDeliveryInfoCtrls();
        transTaxInformationDeliveryInfoCtrl.parmExportOrder().visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToCustTaxInfoCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visible or invisible to all customer tax information controls on Tax information form.
    /// </summary>
    protected void setVisibleToCustTaxInfoCtrls()
    {
        next setVisibleToCustTaxInfoCtrls();
        if (TransTaxInformationUIControllerProjectsVisibleCustTax_INFlight::instance().isEnabled()
            && !transTaxInformationCustTaxInfoCtrl.parmCustomerTaxInformation().visible()
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && sourceTable.TableId == tableNum(ProjCostTrans))
        {
            ProjCostTrans projCostTrans = sourceTable;
            LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findRecId(projCostTrans.LedgerJournalTrans, false);
            if ((ledgerJournalTrans
                && ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::VendInvoiceRegister
                && (ledgerJournalTrans.AccountType == LedgerJournalACType::Project || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Project))
                || (projCostTrans.VendInvoiceTrans && projCostTrans.TransactionOrigin == ProjOrigin::PurchaseOrder))
            {
                // The customer tax information can visible in the project invoice proposal when:
                // 1. The ledger journal type is vendor invoice and associated with the project
                // 2. Or the origin transaction is purchase order
                transTaxInformationCustTaxInfoCtrl.parmCustomerTaxInformation().visible(true);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>