<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRMarginAlert_PriceDisc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRMarginAlert_PriceDisc</c> class handles logic for margins in terms of
/// a price discount.
/// </summary>
public class MCRMarginAlert_PriceDisc extends MCRMarginAlert
{
    PriceDiscTable priceDiscTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustAccount</Name>
				<Source><![CDATA[
    protected CustAccount parmCustAccount()
    {
        CustAccount custAccount;

        if (priceDiscTable.AccountCode == PriceDiscPartyCodeType::Table
            && PriceDiscTable::resolveModuleFromPriceType(priceDiscTable.relation) == moduleInventCustVend::Cust)
        {
            custAccount = priceDiscTable.AccountRelation;
        }

        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQty</Name>
				<Source><![CDATA[
    protected Qty parmInventQty()
    {
        Qty inventQty;

        EcoResProductUnitConverter ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(this.parmInventTable().ItemId,
                                                                                                                                  priceDiscTable.InventDimId,
                                                                                                                                  this.parmUnitId(),
                                                                                                                                  this.parmInventUnitId(),
                                                                                                                                  NoYes::No,
                                                                                                                                  NoYes::No);

        if (ecoResProductUnitConverter.canValueBeConverted())
        {
            inventQty = ecoResProductUnitConverter.convertValue(priceDiscTable.QuantityAmountFrom);
        }

        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    protected ItemId parmItemId()
    {
        ItemId itemId;

        // An ItemId is only possible if the PriceDiscTable relates to a single item
        if (priceDiscTable.ItemCode == PriceDiscProductCodeType::Table)
        {
            itemId = priceDiscTable.ItemRelation;
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineAmount</Name>
				<Source><![CDATA[
    protected LineAmount parmLineAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineDisc</Name>
				<Source><![CDATA[
    protected DiscAmount parmLineDisc()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLinePercent</Name>
				<Source><![CDATA[
    protected DiscPct parmLinePercent()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleInventPurchSales</Name>
				<Source><![CDATA[
    protected ModuleInventPurchSales parmModuleInventPurchSales()
    {
        return PriceTypeTradeAgreementMapping::newPriceTypeTradeAgreementMapping(priceDiscTable.relation).orderSearchModule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPDSCWQty</Name>
				<Source><![CDATA[
    protected Qty parmPDSCWQty()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrice</Name>
				<Source><![CDATA[
    protected PriceCur parmPrice()
    {
        PriceCur priceCur;

        if (priceDiscTable.relation    == PriceType::PricePurch
            || priceDiscTable.relation == PriceType::PriceSales)
        {
            priceCur = priceDiscTable.Amount;
        }

        return priceCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDiscTable</Name>
				<Source><![CDATA[
    public PriceDiscTable parmPriceDiscTable(PriceDiscTable _priceDiscTable = priceDiscTable)
    {
        priceDiscTable = _priceDiscTable;

        // Initialize the map of parent.
        this.parmMCRMarginAlertMap(priceDiscTable);

        return priceDiscTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeductBroker</Name>
				<Source><![CDATA[
    protected boolean shouldDeductBroker()
    {
        boolean shouldDeductBroker;

        // Trade agreement needs to be for sales, related to a specific item,
        // and related to a specific customer.
        if (this.parmModuleInventPurchSales() == ModuleInventPurchSales::Sales
            && this.parmItemId()
            && this.parmCustAccount())
        {
            shouldDeductBroker = true;
        }
        else
        {
            shouldDeductBroker = false;
        }

        return shouldDeductBroker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeductCustRebate</Name>
				<Source><![CDATA[
    protected boolean shouldDeductCustRebate()
    {
        boolean shouldDeductCustRebate;

        shouldDeductCustRebate = super();

        // Trade agreement needs to be for sales, related to a specific item,
        // and related to a specific customer.
        if (shouldDeductCustRebate
            && this.parmModuleInventPurchSales() == ModuleInventPurchSales::Sales
            && this.parmItemId()
            && this.parmCustAccount())
        {
            shouldDeductCustRebate = true;
        }
        else
        {
            shouldDeductCustRebate = false;
        }

        return shouldDeductCustRebate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeductRoyalty</Name>
				<Source><![CDATA[
    protected boolean shouldDeductRoyalty()
    {
        boolean shouldDeductRoyalty;

        // Trade agreement needs to be for sales, related to a specific item,
        // and related to a specific customer.
        if (this.parmModuleInventPurchSales() == ModuleInventPurchSales::Sales
            && this.parmItemId()
            && this.parmCustAccount())
        {
            shouldDeductRoyalty = true;
        }
        else
        {
            shouldDeductRoyalty = false;
        }

        return shouldDeductRoyalty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useEstimatedSalesPrice</Name>
				<Source><![CDATA[
    protected boolean useEstimatedSalesPrice()
    {
        if (this.parmModuleInventPurchSales() == ModuleInventPurchSales::Purch)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MCRMarginAlert_PriceDisc construct()
    {
        return new MCRMarginAlert_PriceDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPriceDiscTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>MCRMarginAlert_PriceDisc</c> object from a <c>PriceDiscTable</c> record.
    /// </summary>
    /// <param name="_priceDiscTable">
    /// The record to use to create the margin alert object.
    /// </param>
    /// <returns>
    /// An initialized margin alert object.
    /// </returns>
    public static MCRMarginAlert_PriceDisc newPriceDiscTable(PriceDiscTable _priceDiscTable)
    {
        MCRMarginAlert_PriceDisc mcrMarginAlert_PriceDisc;

        mcrMarginAlert_PriceDisc  = MCRMarginAlert_PriceDisc::construct();
        mcrMarginAlert_PriceDisc.parmPriceDiscTable(_priceDiscTable);
        return mcrMarginAlert_PriceDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineAmountExclTax</Name>
				<Source><![CDATA[
    protected LineAmount parmLineAmountExclTax()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGrossAmountExclTax</Name>
				<Source><![CDATA[
    protected LineAmount parmGrossAmountExclTax()
    {
        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>