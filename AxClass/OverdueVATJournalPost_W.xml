<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OverdueVATJournalPost_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>OverdueVATJournalPost_W</c> used for posting of journals of overdue debt VAT.
/// </summary>
class OverdueVATJournalPost_W extends RunBase
{
    private const str LocalizationFeatureReference = 'PL-00014';

    OverdueJournalTable_W overdueJournalTable;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>numberSequenceCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// <c>NumberSequenceCode</c> used for retrieving vouchers for posting.
    /// </summary>
    /// <returns>
    /// <c>NumberSequenceCode</c> value.
    /// </returns>
    protected NumberSequenceCode numberSequenceCode()
    {
        NumberSequenceReference numberSequenceReference;
        switch (overdueJournalTable.TableId)
        {
            case tableNum(CustOverdueVATJournalTable_W):
                numberSequenceReference = CustParameters::numRefOverdueVATVoucher_W();
                break;
            case tableNum(VendOverdueVATJournalTable_W):
                numberSequenceReference = VendParameters::numRefOverdueVATVoucher_W();
                break;
        }
        return numberSequenceReference.numberSequenceTable().NumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overdueTurnJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>OverdueTurnJournalLine_W</c> buffer for further calculations.
    /// </summary>
    /// <returns>
    /// <c>VendOverdueVATJournalTable_W</c> or <c>CustOverdueVATJournalTable_W</c>
    /// </returns>
    private OverdueTurnJournalLine_W overdueTurnJournalLine()
    {
        CustOverdueVATTurnJournalLine_W custOverdueVATTurnJournalLine;
        VendOverdueVATTurnJournalLine_W vendOverdueVATTurnJournalLine;

        if (overdueJournalTable.TableId == tableNum(VendOverdueVATJournalTable_W))
        {
            return vendOverdueVATTurnJournalLine.data();
        }
        else
        {
            return custOverdueVATTurnJournalLine.data();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverdueJournalTable</Name>
				<Source><![CDATA[
    public OverdueJournalTable_W parmOverdueJournalTable(OverdueJournalTable_W _overdueJournalTable = overdueJournalTable)
    {
        overdueJournalTable = _overdueJournalTable;
        return overdueJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts user if journal should be posted.
    /// </summary>
    /// <returns>
    /// True if journal should be posted; Otherwise false.
    /// </returns>
    public boolean prompt()
    {
        boolean ret;

        if (Box::yesNo("@SYS4003612", DialogButton::No, "@SYS1971") == DialogButton::Yes)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    #OCCRetryCount
    public void run()
    {
        TaxOverdueVAT_W   tax;

        OverdueTurnJournalLine_W         overdueTurnJournalLine;

        LedgerVoucher               ledgerVoucher;
        Voucher                     voucher;

        NumberSequenceCode          voucherSequenceCode;
        
        try
        {
            ttsBegin;

            voucherSequenceCode = this.numberSequenceCode();

            ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary, this.sysModule(), voucherSequenceCode);
            voucher = NumberSeq::newGetVoucherFromCode(voucherSequenceCode).voucher();

            ledgerVoucher.addVoucher(
                LedgerVoucherObject::newVoucher(
                    voucher,
                    overdueJournalTable.TransDate,
                    this.sysModule(),
                    LedgerTransType::Tax));

            overdueJournalTable = OverdueJournalTable_W::find(overdueJournalTable.TableId, overdueJournalTable.JournalId, true);

            overdueTurnJournalLine = this.overdueTurnJournalLine();

            while select
                    sum(OverdueAmountCur),
                    sum(OverdueAmountMST),
                    sum(OverdueTaxAmountCur),
                    sum(OverdueTaxAmountMST)
                from overdueTurnJournalLine
                group by JournalId, TransRefRecId
                where overdueTurnJournalLine.JournalId == overdueJournalTable.JournalId &&
                      overdueTurnJournalLine.Exclude   == NoYes::No
            {
                tax = TaxOverdueVAT_W::construct();

                tax.parmCopyDistributionToOffsetDimension_W(true);

                tax.calcAndPost(
                    LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher),
                    overdueTurnJournalLine);
            }

            ledgerVoucher.end();

            overdueJournalTable.LedgerVoucher = voucher;
            overdueJournalTable.Posted = NoYes::Yes;
            overdueJournalTable.update();

            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS21533");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sysModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>SysModule</c> value used for posting.
    /// </summary>
    /// <returns>
    /// <c>SysModule</c> value.
    /// </returns>
    protected SysModule sysModule()
    {
        SysModule ret;
        switch (overdueJournalTable.TableId)
        {
            case tableNum(CustOverdueVATJournalTable_W):
                ret = SysModule::Cust;
                break;
            case tableNum(VendOverdueVATJournalTable_W):
                ret = SysModule::Vend;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static OverdueVATJournalPost_W construct()
    {
        GlobalizationInstrumentationHelper::featureRun(LocalizationFeatureReference, funcName());
        return new OverdueVATJournalPost_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns description of class used as caption in dialog.
    /// </summary>
    /// <returns>
    /// String containing description.
    /// </returns>
    public static Description description()
    {
        return "@SYS6098";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        OverdueVATJournalPost_W overdueVATJournalPost = OverdueVATJournalPost_W::construct();
        FormDataSource          formDataSource;
        
        if (! _args ||
            ! _args.record() ||
            (_args.dataset() != tableNum(VendOverdueVATJournalTable_W) &&
             _args.dataset() != tableNum(CustOverdueVATJournalTable_W)))
        {
            throw error(Error::missingRecord(funcName()));
        }

        overdueVATJournalPost.parmOverdueJournalTable(_args.record());
        formDataSource = FormDataUtil::getFormDataSource(_args.record());

        if (overdueVATJournalPost.prompt())
        {
            overdueVATJournalPost.runOperation();

            if (formDataSource)
            {
                formDataSource.reread();
                formDataSource.refresh();
                formDataSource.active();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>