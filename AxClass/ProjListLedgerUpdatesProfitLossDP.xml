<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListLedgerUpdatesProfitLossDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListLedgerUpdatesProfitLossDP</c> class is the report data provider class for the
///    associated <c>ProjListLedgerUpdatesProfitLoss</c> reports.
/// </summary>
/// <remarks>
///    This class provides methods to retrieve the data which is used by the
///    <c>ProjListLedgerUpdatesProfitLoss</c> reports.
/// </remarks>

[
    SRSReportQueryAttribute(querystr(ProjListLedgerUpdatesProfitLoss)),
    SRSReportParameterAttribute(classstr(ProjListLedgerUpdatesContract))
]
class ProjListLedgerUpdatesProfitLossDP extends SRSReportDataProviderPreProcessTempDB
{
    ProjId                  projId;
    ProjListLedgerTrans     listLedgerTrans;
    TmpProjTransLedger      tmpProjTransLedger;
    ProjLedgerSorting       projLedgerSorting;
    Level                   level;
    TransDate               fromDate,toDate;
    str                     menuItemName;
    Map                     mapProjId;
    AccountName             accountName;
    DimensionDisplayValue   displayValue;
    /// <summary>
    /// Queries the temporary table and returns the data table to the calling method.
    /// </summary>
    /// <returns>
    /// The required report data from temporary table.
    /// </returns>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTmpProjTransLedger</Name>
				<Source><![CDATA[
    [
        SRSReportDataSetAttribute('TmpProjTransLedger')
    ]
    public TmpProjTransLedger getTmpProjTransLedger()
    {
        switch (projLedgerSorting)
        {
            case ProjLedgerSorting::Project:
                select tmpProjTransLedger
                    order by ProjId, DimensionDisplayValue, LedgerTransDate;
                break;
            case ProjLedgerSorting::Account:
                select tmpProjTransLedger
                    order by DimensionDisplayValue, ProjId, LedgerTransDate;
                break;
        }
        return tmpProjTransLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpProjTransLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the required data and inserts it into the temporary table.
    /// </summary>
    /// <param name="_projTransPosting">
    ///    The value to set the <c>ProjTransPosting</c> field.
    /// </param>
    /// <param name="_ledgerPostingType">
    ///    The value to set the <c>LedgerPostingType</c> field.
    /// </param>
    private void initTmpProjTransLedger(ProjTransPosting                _projTransPosting,
                                        LedgerPostingType               _ledgerPostingType)
    {
        if (!mapProjId)
        {
            mapProjId = new Map(Types::String, Types::String);
        }

        projId = ProjListLedgerTrans::setProjId(_projTransPosting.ProjId, level, mapProjId);

        tmpProjTransLedger.CostAmount        = _projTransPosting.costAmount();
        tmpProjTransLedger.SalesAmount       = _projTransPosting.salesAmount();
        tmpProjTransLedger.LedgerTransDate   = _projTransPosting.LedgerTransDate;
        tmpProjTransLedger.ProjId            = projId;
        tmpProjTransLedger.OrigProjId        = _projTransPosting.ProjId;
        tmpProjTransLedger.ProjPostingType   = _ledgerPostingType;
        tmpProjTransLedger.TransDate         = _projTransPosting.ProjTransDate;
        tmpProjTransLedger.TransType         = _projTransPosting.ProjTransType;
        tmpProjTransLedger.Voucher           = _projTransPosting.Voucher;
        tmpProjTransLedger.Name              = ProjTable::find(_projTransPosting.ProjId).Name;
        tmpProjTransLedger.LedgerAccountName = accountName;
        tmpProjTransLedger.DimensionDisplayValue = displayValue;
        tmpProjTransLedger.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjTransPosting       newProjTransPosting;
        QueryRun               queryRun;
        QueryBuildRange        queryRangeTransDate;
        QueryBuildDataSource   queryDataSource;
        boolean                toInsert;
        boolean                skipZero;

        ProjListLedgerUpdatesContract contract = this.parmDataContract() as ProjListLedgerUpdatesContract;

        DimensionProvider      dimProvider = new DimensionProvider();

        projLedgerSorting   = contract.parmProjLedgerSorting();
        level               = contract.parmLevel();
        fromDate            = contract.parmProjFromDate();
        toDate              = contract.parmProjToDate();
        skipZero            = contract.parmSkipZero();

        queryDataSource     = this.parmQuery().dataSourceTable(tablenum(ProjTransPosting));
        queryRangeTransDate = queryDataSource.addRange(fieldnum(ProjTransPosting, LedgerTransDate));

        if (fromDate && toDate)
        {
            queryRangeTransDate.value(queryValue(fromDate) + '..' + queryValue(toDate));
        }
        else if (fromDate && !toDate)
        {
            queryRangeTransDate.value(queryValue(fromDate) + '..');
        }
        else if (!fromDate && toDate)
        {
            queryRangeTransDate.value('..' + queryValue(toDate));
        }
        else
        {
            queryRangeTransDate.value('');
        }

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            newProjTransPosting = queryRun.get(tablenum(ProjTransPosting));

            if ((ProjTransPosting::checkProfitLossLedgerDimension(newProjTransPosting.LedgerDimension) &&
                 newProjTransPosting.PostingType != LedgerPostingType::ProjOnAccount) ||
                 (newProjTransPosting.PostingType == LedgerPostingType::ProjOnAccount))
            {
                if (ProjTransPosting::checkOperations(newProjTransPosting.PostingType, true))
                {
                    toInsert = true;
                }
            }

            if ((toInsert &&  (!(newProjTransPosting.costAmount()  == 0 && newProjTransPosting.salesAmount() == 0) || !skipZero)))
            {
                accountName = MainAccount::getLocalizedNameByMainAccountId(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(newProjTransPosting.LedgerDimension));
                displayValue = dimProvider.getStringValueFromCursor(newProjTransPosting, fieldstr(ProjTransPosting, LedgerDimension));

                this.initTmpProjTransLedger(newProjTransPosting,
                                            newProjTransPosting.PostingType);
            }
            toInsert = false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>