<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcInMemoryCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqCalcInMemoryCache</c> is designed to keep a subset of the master plan in memory
/// during master plan generation.
/// </summary>
public class ReqCalcInMemoryCache
{
    Map reqTransMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        reqTransMap = new Map(Types::Int64, Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqCalcInMemoryCache construct()
    {
        return new ReqCalcInMemoryCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers the specified transaction in the cache.
    /// </summary>
    /// <param name = "_reqTrans">A <c>ReqTrans</c> record.</param>
    public void registerReqTrans(ReqTrans _reqTrans)
    {
        if (!_reqTrans.RecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        reqTransMap.insert(_reqTrans.RecId, _reqTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleReqTransInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles insert of the specified transaction.
    /// </summary>
    /// <param name = "_reqTrans">A <c>ReqTrans</c> record.</param>
    public void handleReqTransInserted(ReqTrans _reqTrans)
    {
        this.registerReqTrans(_reqTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleReqTransUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles update of the specified transactions.
    /// </summary>
    /// <param name = "_reqTrans">A <c>ReqTrans</c> record.</param>
    public void handleReqTransUpdated(ReqTrans _reqTrans)
    {
        this.registerReqTrans(_reqTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleReqTransDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles removal of the specified transaction.
    /// </summary>
    /// <param name = "_reqTrans">A <c>ReqTrans</c> record.</param>
    public void handleReqTransDeleted(ReqTrans _reqTrans)
    {
        reqTransMap.remove(_reqTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReqTransByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>ReqTrans</c> record with the specified <c>RecId</c>.
    /// </summary>
    /// <param name = "_reqTransReqId">The <c>RecId</c> of the <c>ReqTrans</c> record.</param>
    /// <returns>The <c>ReqTrans</c> record with the specified <c>RecId</c></returns>
    public ReqTrans findReqTransByRecId(RecId _reqTransReqId)
    {
        if (reqTransMap.exists(_reqTransReqId))
        {
            return reqTransMap.lookup(_reqTransReqId);
        }
        else
        {
            ReqTrans reqTrans = ReqTrans::findRecId(_reqTransReqId, true);

            if (reqTrans.RecId)
            {
                this.registerReqTrans(reqTrans);
            }

            return reqTrans;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>