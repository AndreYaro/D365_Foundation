<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccDistRuleVendPaymentReqExpProdExtPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AccDistRuleVendPaymentReqExpProdExtPrice</c> class controls various posting attribute that
///    are used during the distribution a vendor invoice line.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::ExtendedPrice),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::PriceVariance),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::QuantityVariance)
]
public class AccDistRuleVendPaymentReqExpProdExtPrice extends AccountingDistributionRule
{
    VendInvoiceLineMap                      vendInvoiceLineMap;
    VendInvoiceMap                          vendInvoiceMap;
    LeanProductionFlowReferenceRefRecId     leanProductionFlowReferenceRefRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getHistoricalExchangeRateDate</Name>
				<Source><![CDATA[
    public HistoricalExchangeRateDate getHistoricalExchangeRateDate()
    {
        AssetBook assetBook;
        AssetGroupId assetGroupId;
        TransDate exchangeRateDate;
        boolean isFixedAssetAccount;
        VendorInvoiceLineSourceDocLineItem vendorInvoiceLineSourceDocLineItem;
        SourceDocumentLineItem sourceDocumentLineItemLocal;
        SourceDocumentLine sourceDocumentLine;

        sourceDocumentLineItemLocal = this.parmSourceDocumentLineItem();
        sourceDocumentLine = sourceDocumentLineItemLocal.parmSourceDocumentLine();

        if (sourceDocumentLineItemLocal is VendorInvoiceLineSourceDocLineItem)
        {
            vendorInvoiceLineSourceDocLineItem = sourceDocumentLineItemLocal as VendorInvoiceLineSourceDocLineItem;
        }

        if (vendorInvoiceLineSourceDocLineItem)
        {
            assetBook = AssetBook::find(VendorInvoiceLineSourceDocLineItem.parmAssetId(),
                VendorInvoiceLineSourceDocLineItem.parmValueModel());
            assetGroupId = VendorInvoiceLineSourceDocLineItem.parmAssetGroupId();
            // If the line contains an asset, then capture the acquisition date of the asset.
            if (assetBook || assetGroupId)
            {
                isFixedAssetAccount = AssetLedgerAccounts::isFixedAssetAccount(
                    assetBook,
                    assetGroupId,
                    this.parmAccountingdistribution().LedgerDimension,
                    AssetTransType::Acquisition,
                    assetBook.currentOperationsTax());

                if (isFixedAssetAccount)
                {
                    exchangeRateDate = assetBook.exchangeRateDate();
                    if (!exchangeRateDate)
                    {
                        exchangeRateDate = VendorInvoiceLineSourceDocLineItem.parmAccountingDate();
                    }
                }
            }
        }

        return exchangeRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the accounting rule.
    /// </summary>
    protected void initialize()
    {
        SourceDocumentLineItemIProductionFlow   iProducttionFlow;
        VendorInvoiceLineSourceDocLineItem      vendorInvoiceLineSourceDocLineItem;
        SourceDocumentLineItem                  sourceDocumentLineItemLocal;
        SourceDocumentLine                      sourceDocumentLine;

        sourceDocumentLineItemLocal = this.parmSourceDocumentLineItem();
        sourceDocumentLine          = sourceDocumentLineItemLocal.parmSourceDocumentLine();

        switch (sourceDocumentLine.SourceRelationType)
        {
            case tableNum(VendInvoiceInfoLine):
                vendorInvoiceLineSourceDocLineItem = sourceDocumentLineItemLocal as VendorInvoiceLineSourceDocLineItem;
                Debug::assert(vendorInvoiceLineSourceDocLineItem != null);
                vendInvoiceLineMap = vendorInvoiceLineSourceDocLineItem.parmVendInvoiceLineMap();
                break;

            case tableNum(VendInvoiceTrans):
                vendInvoiceLineMap = VendInvoiceTrans::findSourceDocumentLine(sourceDocumentLine.RecId);
                break;

            case tableNum(VendInvoiceInfoTable):
                vendInvoiceMap = VendInvoiceInfoTable::findSourceDocumentLine(sourceDocumentLine.RecId);
                break;

            case tableNum(VendInvoiceJour):
                vendInvoiceMap = VendInvoiceJour::findSourceDocumentLine(sourceDocumentLine.RecId);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (sourceDocumentLineItem is SourceDocumentLineItemIProductionFlow)
        {
            iProducttionFlow = sourceDocumentLineItem as SourceDocumentLineItemIProductionFlow;
            leanProductionFlowReferenceRefRecId = iProducttionFlow.parmPlanReference();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        LedgerPostingType                       ledgerPostingType;
        VendorInvoiceLineSourceDocLineItem      vendorInvoiceLineSourceDocLineItem;
        ProjectAccDistRule                      projectAccDistRule = ProjectAccDistRule::newFromAccountingDistributionRule(this);
        boolean                                 isProject = projectAccDistRule.parmIsProject();
        // <GEERU>
        #ISOCountryRegionCodes
        boolean                                 countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        if (vendInvoiceLineMap.VendInvoiceLineMap::isProjRetentionRelease())
        {
            ledgerPostingType = LedgerPostingType::PSAProjPurchRetain;
        }
        else if (isProject)
        {
            boolean isStocked = false;

            if (vendInvoiceLineMap.isInitialized())
            {
                vendorInvoiceLineSourceDocLineItem = this.parmSourceDocumentLineItem();
                if (vendorInvoiceLineSourceDocLineItem)
                {
                    isStocked = vendorInvoiceLineSourceDocLineItem.parmStocked();
                }
            }

            if (vendorInvoiceLineSourceDocLineItem && !isStocked && this.isItemReqScenario(vendorInvoiceLineSourceDocLineItem))
            {
                ledgerPostingType = LedgerPostingType::PurchExpense;
            }
            else
            {
                ledgerPostingType = projectAccDistRule.parmLedgerPostingType();
            }
        }
        else
        {
            if (vendInvoiceLineMap.isInitialized())
            {
                switch (vendInvoiceLineMap.LineType)
                {
                    case PurchInvoiceLineType::Advance:
                        ledgerPostingType = LedgerPostingType::PurchAdvance;
                        break;
                    case PurchInvoiceLineType::AdvanceApplication:
                        ledgerPostingType = LedgerPostingType::PurchAdvanceApplication;
                        break;
                    case PurchInvoiceLineType::Standard:
                        vendorInvoiceLineSourceDocLineItem = this.parmSourceDocumentLineItem();

                        if (vendorInvoiceLineSourceDocLineItem.parmStocked())
                        {
                            // <GEERU>
                            if (countryRegion_RU && vendInvoiceLineMap.VendInvoiceLineMap::parmMarkupCode_RU())
                            {
                                ledgerPostingType = MarkupTable::find(MarkupModuleType::Vend, vendInvoiceLineMap.VendInvoiceLineMap::parmMarkupCode_RU()).CustPosting;
                            }
                            else if (countryRegion_RU && !VendParameters::find().UsePurchConsumpAccount_RU)
                            {
                                ledgerPostingType = LedgerPostingType::PurchReceipt;
                            } 
                            else if (FeatureStateProvider::isFeatureEnabled(ProjInterCompanyVendorInvoiceFeature::instance()) 
                                    && ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled()
                                    && vendorInvoiceLineSourceDocLineItem.parmProjectId())
                            {
                                ledgerPostingType = LedgerPostingType::ProjProcurementIntegration;
                            }    
                            else
                            {
                                // </GEERU>
                                ledgerPostingType = LedgerPostingType::PurchConsump;
                                // <GEERU>
                            }
                            // </GEERU>
                        }
                        else if (leanProductionFlowReferenceRefRecId)
                        {
                            ledgerPostingType = ledgerPostingType::ProdLeanWIPServiceReceipt;
                        }
                        // <GEERU>
                        else if (vendInvoiceLineMap.VendInvoiceLineMap::parmMarkupCode_RU())
                        {
                            ledgerPostingType = MarkupTable::find(MarkupModuleType::Vend, vendInvoiceLineMap.VendInvoiceLineMap::parmMarkupCode_RU()).CustPosting;
                        }
                        // </GEERU>
                        else if (!FeatureStateProvider::isFeatureEnabled(AssetReversePOForeignCurrencyFeature::instance())
                                && vendorInvoiceLineSourceDocLineItem.hasAssetAssociated())
                        {
                            ledgerPostingType = LedgerPostingType::FixedAssetsDebit;
                        }

                        else if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled()
                                     && vendorInvoiceLineSourceDocLineItem.parmProjectId())
                        {
                            ledgerPostingType = LedgerPostingType::ProjProcurementIntegration;
                        }
                        else
                        {
                            ledgerPostingType = LedgerPostingType::PurchExpense;
                        }
                        break;
                    default:
                        throw error(Error::wrongUseOfFunction(funcName()));
                }
            }
            if (vendInvoiceMap)
            {
                ledgerPostingType = LedgerPostingType::PurchExpense;
            }
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemReqScenario</Name>
				<Source><![CDATA[
    protected boolean isItemReqScenario(VendorInvoiceLineSourceDocLineItem vendorInvoiceLineSourceDocLineItem)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine = VendInvoiceInfoLine::findSourceDocumentLine(vendorInvoiceLineSourceDocLineItem.parmSourceDocumentLine().RecId);
        PurchLine purchLine = vendInvoiceInfoLine.purchLine();
        SalesLine salesLine;
        if (purchLine)
        {
            salesLine = purchLine.salesLine();
        }

        return this.isItemReq(salesLine, purchLine, vendInvoiceInfoLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemReq</Name>
				<Source><![CDATA[
    protected boolean isItemReq(SalesLine _salesLine, PurchLine _purchLine, VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        return _salesLine && _salesLine.SalesType == SalesType::ItemReq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        DebitCredit side;

        if (vendInvoiceLineMap.VendInvoiceLineMap::isProjRetentionRelease() && this.parmAccountingdistribution().TransactionCurrencyAmount > 0)
        {
            side = DebitCredit::Debit;
        }
        else if (vendInvoiceLineMap.isAdvanceApplication())
        {
            side = DebitCredit::Credit;
        }
        else if (this.parmAccountingdistribution().TransactionCurrencyAmount <= 0)
        {
            side = DebitCredit::Credit;
        }
        else
        {
            side = DebitCredit::Debit;
        }

        return side;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionAllocList</Name>
				<Source><![CDATA[
    public LedgerDimensionAllocationList parmLedgerDimensionAllocList()
    {
        LedgerDimensionAllocationList returnedledgerDimensionAllocationList;
        RefRecId vendInvoiceLineTemplateRecId;
        VendInvoiceDistributionTemplate vendInvoiceDistributionTemplate;
        LedgerDimensionAllocation ledgerDimensionAllocation;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        LedgerDimensionAccount ledgerDimensionAccount;
        List ledgerDimAllocListForProject;
        VendorInvoiceLineSourceDocLineItem vendInvoiceLineSourceDocLineItem;
        boolean isProject = false;

        vendInvoiceInfoLine = VendInvoiceInfoLine::findSourceDocumentLine(sourceDocumentLineItem.parmSourceDocumentLine().RecId);
        vendInvoiceLineTemplateRecId = vendInvoiceInfoLine.VendInvoiceLineTemplate;
        vendInvoiceLineSourceDocLineItem = sourceDocumentLineItem as VendorInvoiceLineSourceDocLineItem;

        if (!ledgerDimensionAllocationList || !isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            if (vendInvoiceLineSourceDocLineItem)
            {
                isProject = vendInvoiceLineSourceDocLineItem.parmProjectId() != '';
            }

            if (!vendInvoiceInfoLine.AccountingDistributionTemplate)
            {
                while select LedgerDimension, Percentage from vendInvoiceDistributionTemplate
                    where vendInvoiceDistributionTemplate.VendInvoiceLineTemplate == vendInvoiceLineTemplateRecId
                {
                    if (!ledgerDimensionAllocationList)
                    {
                        ledgerDimensionAllocationList = LedgerDimensionAllocationList::construct();
                    }

                    ledgerDimensionAccount = this.getMergedLedgerDimensionAccount(vendInvoiceDistributionTemplate, vendInvoiceInfoLine);

                    ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(ledgerDimensionAccount,vendInvoiceDistributionTemplate.Percentage / 100, this.parmSide(), false);

                    ledgerDimensionAllocationList.addEnd(ledgerDimensionAllocation);
                }
            }

            if (isProject && ledgerDimensionAllocationList && ledgerDimensionAllocationList.elements() > 0)
            {
                ledgerDimAllocListForProject = AccDistProcessorProjectExtension::ledgerDimensionAllocationList(sourceDocumentLineItem);
                if (ledgerDimAllocListForProject)
                {
                    SysTransactionScopeCache::set(
                        classStr(AccDistProcessorProjectExtension),
                        [sourceDocumentLineItem.parmSourceDocumentLine().RecId, sourceDocumentLineItem.parmSourceDocumentLine().RecVersion],
                        ledgerDimAllocListForProject);
                }
            }
        }

        returnedledgerDimensionAllocationList = super();

        return returnedledgerDimensionAllocationList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerDimensionAccountFromVendInvoiceTemplate</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount setLedgerDimensionAccountFromVendInvoiceTemplate(
        VendInvoiceInfoLine _vendInvoiceInfoLine,
        VendInvoiceDistributionTemplate _vendInvoiceDistributionTemplate)
    {
        LedgerDimensionAccount localLedgerDimensionAccount;
    
        if (this.isCopyDimensionsFromTemplateThenChanged())
        {
            localLedgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(
                _vendInvoiceDistributionTemplate.LedgerDimension);
        }
        else
        {
            localLedgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(
                                                        InventPosting::accountItemLedgerDimensionFromParameters(
                                                        AccDistRuleVendPaymentReqExpProdExtPrice::buildAccountItemLedgerDimensionParameter(
                                                        InventAccountType::PurchExpense, _vendInvoiceInfoLine)),
                                                        _vendInvoiceInfoLine.DefaultDimension);
        }
    
        return localLedgerDimensionAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCopyDimensionsFromTemplateThenChanged</Name>
				<Source><![CDATA[
    private boolean isCopyDimensionsFromTemplateThenChanged()
    {
        return (sourceDocumentLineItem.parmSourceDocumentLine().AccountingStatus == SourceDocumentLineAccountingStatus::Draft);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCopyDimensionsFromVendInvoiceTemplateAndNoChange</Name>
				<Source><![CDATA[
    private boolean isCopyDimensionsFromVendInvoiceTemplateAndNoChange(VendInvoiceInfoLine _vendInvoiceInfoLine, DimensionDefault _dimensionDefault)
    {
        return (sourceDocumentLineItem.parmSourceDocumentLine().AccountingStatus == SourceDocumentLineAccountingStatus::Draft
            && (_vendInvoiceInfoLine.DefaultDimension == 0 || DimensionDefaultFacade::areEqual(_dimensionDefault, _vendInvoiceInfoLine.DefaultDimension)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    protected static InventPostingAccountItemLedgerDimensionParameters buildAccountItemLedgerDimensionParameter(InventAccountType _inventAccountType, VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        return InventPostingAccountItemLedgerDimensionParameters::newFromParameters(_inventAccountType,
                                                                                    _vendInvoiceInfoLine.ItemId,
                                                                                    InventTable::find(_vendInvoiceInfoLine.ItemId).itemGroupId(),
                                                                                    _vendInvoiceInfoLine.ProcurementCategory,
                                                                                    '',
                                                                                    '',
                                                                                    _vendInvoiceInfoLine.TaxGroup
                                                                                    );
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendLedgerDimensionAccount</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount setVendLedgerDimensionAccount(
        DimensionDefault _dimensionDefault,
        VendInvoiceInfoLine _vendInvoiceInfoLine,
        VendInvoiceDistributionTemplate _vendInvoiceDistributionTemplate)
    {
        LedgerDimensionAccount localLedgerDimensionAccount;
    
        if (this.isCopyDimensionsFromVendInvoiceTemplateAndNoChange(_vendInvoiceInfoLine, _dimensionDefault))
        {
            localLedgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(
                _vendInvoiceDistributionTemplate.LedgerDimension,
                _vendInvoiceInfoLine.DefaultDimension);
        }
        else
        {
            localLedgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(
                                                        InventPosting::accountItemLedgerDimensionFromParameters(
                                                        AccDistRuleVendPaymentReqExpProdExtPrice::buildAccountItemLedgerDimensionParameter(
                                                        InventAccountType::PurchExpense, _vendInvoiceInfoLine)),
                                                        _vendInvoiceInfoLine.DefaultDimension);
        }
    
        return localLedgerDimensionAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMergedLedgerDimensionAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the proper <c>LedgerDimensionAccount</c> value.
    /// </summary>
    /// <param name = "_vendInvoiceDistributionTemplate">The <c>VendInvoiceDistributionTemplate</c> buffer.</param>
    /// <param name = "_vendInvoiceInfoLine">The <c>vendInvoiceInfoLine</c> buffer.</param>
    /// <returns>A <c>LedgerDimensionAccount</c> value.</returns>
    protected LedgerDimensionAccount getMergedLedgerDimensionAccount(VendInvoiceDistributionTemplate _vendInvoiceDistributionTemplate, VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        LedgerDimensionAccount ledgerDimensionAccount;

        DimensionDefault dimensionDefault = ledgerDimensionProvider.getDefaultDimensionFromLedgerDimension(_vendInvoiceDistributionTemplate.LedgerDimension);

        VendInvoiceInfoTable vendInvoiceInfoTable = _vendInvoiceInfoLine.vendInvoiceInfoTable();

        if (vendInvoiceInfoTable.RecurrenceInvoiceDefaultType == VendRecurrenceInvoiceDefaultType::vendor)
        {
            ledgerDimensionAccount = this.setLedgerDimensionAccountFromVendorAccount(dimensionDefault, _vendInvoiceInfoLine, vendInvoiceInfoTable);
        }
        else
        {
            ledgerDimensionAccount = this.setLedgerDimensionAccountFromVendInvoiceTemplate(_vendInvoiceInfoLine, _vendInvoiceDistributionTemplate);
        }
        
        return ledgerDimensionAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerDimensionAccountFromVendorAccount</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount setLedgerDimensionAccountFromVendorAccount(
        DimensionDefault _dimensionDefault,
        VendInvoiceInfoLine _vendInvoiceInfoLine,
        VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        LedgerDimensionAccount localLedgerDimensionAccount;

        if (DimensionDefaultFacade::areEqual(_dimensionDefault, _vendInvoiceInfoLine.DefaultDimension))
        {
            localLedgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(
                                                                                            InventPosting::accountItemLedgerDimensionFromParameters(
                                                                                            AccDistRuleVendPaymentReqExpProdExtPrice::buildAccountItemLedgerDimensionParameter(
                                                                                            InventAccountType::PurchExpense, _vendInvoiceInfoLine)),
                                                                                            _vendInvoiceInfoTable.DefaultDimension);
        }
        else
        {
            localLedgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(
                                                                                            InventPosting::accountItemLedgerDimensionFromParameters(
                                                                                            AccDistRuleVendPaymentReqExpProdExtPrice::buildAccountItemLedgerDimensionParameter(
                                                                                            InventAccountType::PurchExpense, _vendInvoiceInfoLine)),
                                                                                            _vendInvoiceInfoLine.DefaultDimension);
        }

        return localLedgerDimensionAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>