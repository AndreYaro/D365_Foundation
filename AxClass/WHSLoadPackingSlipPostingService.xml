<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadPackingSlipPostingService</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSLoadPackingSlipPostingService
{
    private WHSInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postPackingSlip</Name>
				<Source><![CDATA[
    internal void postPackingSlip(WHSLoadPackingSlipPostContract _contract)
    {
        using (var _ = this.logger().loadPackingSlipPosting().post())
        {
            if (!_contract)
            {
                throw Error(Error::wrongUseOfFunction(funcName()));
            }

            QueryRun queryRun = new QueryRun(_contract.parmQuery());

            while (queryRun.next())
            {
                Common loadRecord = queryRun.get(tableNum(WHSLoadTable));
                this.postPackingSlipFromLoad(loadRecord, _contract.parmPackingSlipPostingParametersId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPackingSlipFromLoad</Name>
				<Source><![CDATA[
    internal void postPackingSlipFromLoad(WHSLoadTable _loadTable, WHSPackingSlipPostingParametersId _paramsId)
    {
        WHSPackingSlipPostingParameters params = WHSPackingSlipPostingParameters::find(_paramsId);
        if (!params.RecId)
        {
            throw Error(strFmt("@WAX:InvalidPackingSlipPostingParameters", _paramsId));
        }

        setPrefix(strFmt("@WAX:PackingSlipPostingForLoad", _loadTable.LoadId));

        Microsoft.Dynamics.Ax.Xpp.XppException xppException;

        try
        {
            using (var _ = this.logger().loadPackingSlipPosting().postForLoad(_loadTable.RecId, params.RecId))
            {
                WhsShipConfirm shipConfirm = new WhsShipConfirm();
                shipConfirm.runPackingSlipWithParametersForLoad(_loadTable.LoadId, _paramsId);
            }
        }
        catch (xppException)
        {
            if (this.mustRetryByException(xppException))
            {
                retry;
            }

            this.handleUnrecoverableException(_loadTable.LoadId);
        }
        catch
        {
            this.handleUnrecoverableException(_loadTable.LoadId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleUnrecoverableException</Name>
				<Source><![CDATA[
    private void handleUnrecoverableException(WHSLoadId _loadId)
    {
        ttsbegin;
        WHSLoadTable loadTable = WHSLoadTable::find(_loadId, true);
        loadTable.PackingSlipBackgroundPostingStatus = WHSLoadPackingSlipBackgroundPostingStatus::Error;
        loadTable.update();
        ttscommit;

        exceptionTextFallThrough();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRetryByException</Name>
				<Source><![CDATA[
    private boolean mustRetryByException(Microsoft.Dynamics.Ax.Xpp.XppException _xppException)
    {
        #OCCRetryCount

        switch (true)
        {
            case _xppException is Microsoft.Dynamics.Ax.Xpp.TransientSqlConnectionError:
                return ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError(#RetryNum);
            case _xppException is Microsoft.Dynamics.Ax.Xpp.DeadlockException:
            case _xppException is Microsoft.Dynamics.Ax.Xpp.UpdateConflictException:
            case _xppException is Microsoft.Dynamics.Ax.Xpp.DuplicateKeyException:
                return xSession::currentRetryCount() < #RetryNum;
            
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canScheduleForBackgroundPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if load can be scheduled for background posting.
    /// Load can be scheduled for background posting only if:
    /// - It is an outbound load.
    /// - Its status is Shipped.
    /// - There is at least 1 load line that is InventTransType::Sales.
    /// </summary>
    /// <param name = "_loadTable">Load table record</param>
    /// <returns>True if load can be scheduled for background posting, otherwise false.</returns>
    internal static boolean canScheduleForBackgroundPosting(WHSLoadTable _loadTable)
    {
        if (_loadTable.LoadDirection != WHSLoadDirection::Outbound
            || _loadTable.LoadStatus != WHSLoadStatus::Shipped)
        {
            return false;
        }

        WHSLoadLine loadLine;
        select firstonly RecId from loadLine
            where loadLine.LoadId == _loadTable.LoadId
            && loadLine.InventTransType == InventTransType::Sales;

        return loadLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger logger()
    {
        if (!logger)
        {
            logger = WHSInstrumentationLogger::createLogger(classStr(WHSLoadPackingSlipPostingService));
        }

        return logger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>