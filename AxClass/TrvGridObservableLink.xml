<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvGridObservableLink</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvGridObservableLink implements System.IDisposable
{
    Microsoft.Dynamics.Ax.Xpp.FormObservable<int> tracker;
    Map cache = new Map(types::Int64, types::AnyType);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        tracker = new Microsoft.Dynamics.Ax.Xpp.FormObservable<int>();
    }

]]></Source>
			</Method>
			<Method>
				<Name>observe</Name>
				<Source><![CDATA[
    public void observe()
    {
        var x = tracker.Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markChangedInternal</Name>
				<Source><![CDATA[
    private void markChangedInternal()
    {
        tracker.Value = tracker.Value + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    public void Dispose()
    {
        tracker.dispose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Triggers the observable markChanged method.  In addition, clears the cached valued for the provided record.  
    ///     If no record is provided, all cache values are cleared.
    /// </summary>
    /// <param name="_recordChanged">
    ///     The RecId of the record that was changed.
    /// </param>
    public void markChanged(RecId _recordChanged = 0)
    {
        if (_recordChanged)
        {
            cache.remove(_recordChanged);
        }
        else
        {
            // This will clear the cache, allowing all records to refresh their value
            cache = new Map(types::Int64, types::AnyType);
        }

        this.markChangedInternal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUpdateNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks to see if the display method needs to be recalculated
    /// </summary>
    /// <param name="_currentRecord">
    ///     The record to check if an update is needed
    /// </param>
    /// <returns>
    ///     True if the cache doesn't contain the value, otherwise false.
    /// </returns>
    public boolean isUpdateNeeded(RecId _currentRecord)
    {
        return !cache.exists(_currentRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cached value for the given record if it exists in the cache.
    /// </summary>
    /// <param name = "_currentRecord">The record to retrieve the cached value for.</param>
    /// <returns>The value cached for the record if it exists, otherwise null.</returns>
    public anytype getCacheValue(RecId _currentRecord)
    {
        if (cache.exists(_currentRecord))
        {
            return cache.lookup(_currentRecord);
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCacheValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Triggers the observable markChanged method.  In addition, clears the cached valued for the provided record.
    ///     If no record is provided, all cache values are cleared.
    /// </summary>
    /// <param name="_currentRecord">
    ///     The RecId of the record to cache a value for.
    /// </param>
    /// <param name="_value">
    ///     The value to cache.
    /// </param>
    public void setCacheValue(RecId _currentRecord, anytype _value)
    {
        cache.insert(_currentRecord, _value);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>