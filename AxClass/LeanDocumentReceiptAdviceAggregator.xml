<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanDocumentReceiptAdviceAggregator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanDocumentReceiptAdviceAggregator</c> class provides aggregation specific to the creation
///    of receipt advices.
/// </summary>
public class LeanDocumentReceiptAdviceAggregator extends LeanDocumentAggregator
{
    PurchLine   currPurchLine;
    utcdatetime minimumDateTime;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addSourceRecordToLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a source record from the current data provider to the document line.
    /// </summary>
    /// <param name="_line">
    ///    The document line to which the source record is added.
    /// </param>
    /// <remarks>
    ///    As part of adding the source record some data is aggregated also.
    /// </remarks>
    protected void addSourceRecordToLine(LeanDocumentProcessingDataLine _line)
    {
        Map additionalLineValues = _line.parmAdditionalValues();
        PurchLine tempPurchLine;

        // do the standard processing (date, qty, unit and source record handling)
        super(_line);

        // in addition to it store the purchase line for further usage
        if (!additionalLineValues.exists(tableNum(PurchLine)))
        {
            tempPurchLine.data(currPurchLine);
            additionalLineValues.insert(tableNum(PurchLine), tempPurchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the two objects are equal.
    /// </summary>
    /// <param name="otherObject">
    ///    The object to check.
    /// </param>
    /// <returns>
    ///    true if the two objects are equal; otherwise, false.
    /// </returns>
    public boolean equal(Object otherObject)
    {
        LeanDocumentReceiptAdviceAggregator otherAggregator = otherObject as LeanDocumentReceiptAdviceAggregator;

        return  otherObject == this
                || (otherAggregator != null
                    && super(otherAggregator)) ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentHeaderKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a document header key.
    /// </summary>
    /// <returns>
    ///    The document header key.
    /// </returns>
    protected anytype getDocumentHeaderKey()
    {
        return currPurchLine.PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a document line key.
    /// </summary>
    /// <returns>
    ///    The document line key.
    /// </returns>
    protected anytype getDocumentLineKey()
    {
        return currPurchLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanJobDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>utcDateTime</c> value that must be used for the current <c>KanbanJob</c> record.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    The <c>KanbanJob</c> record.
    /// </param>
    /// <returns>
    ///    If the status is completed, this method returns the <c>ActualEndDateTime</c>; otherwise, it returns
    ///    the <c>ExpectedDateTime</c>.
    /// </returns>
    /// <remarks>
    ///    The date is adjusted to the day after the last lean backflush costing, if necessary.
    ///    Receipts cannot be posted into a closed period.
    /// </remarks>
    protected utcdatetime kanbanJobDateTime(KanbanJob _kanbanJob)
    {
        utcdatetime kanbanJobDateTime = super(_kanbanJob);

        return max(kanbanJobDateTime,minimumDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new(
        LeanDocumentLinesAggregationMode _aggregationMode,
        Types                            _headerDocumentKeyType)
    {
        #define.daysOffset(1)

        super(_aggregationMode,_headerDocumentKeyType);
        minimumDateTime = DateTimeUtil::newDateTime(LeanCosting::lastToDate() + #daysOffset,0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the local buffers.
    /// </summary>
    /// <remarks>
    ///    The method is called after the current provider is set.
    /// </remarks>
    protected void refreshData()
    {
        super();

        currPurchLine       = currentProvider.getCurrentRecord(tableNum(PurchLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LeanDocumentReceiptAdviceAggregator</c> class.
    /// </summary>
    /// <param name="_aggregationMode">
    ///    The aggregation mode.
    /// </param>
    /// <returns>
    ///    An instance of the <c>LeanDocumentReceiptAdviceAggregator</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanDocumentReceiptAdviceAggregator newStandard(LeanDocumentLinesAggregationMode _aggregationMode)
    {
        return new LeanDocumentReceiptAdviceAggregator(_aggregationMode, Types::String);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>