<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxablePaymentsAnnualReportProcessingService_AU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxablePaymentsAnnualReportProcessingService_AU</c> class gathers the vendor payees for TPAR.
/// </summary>
internal final class TaxablePaymentsAnnualReportProcessingService_AU extends SysOperationServiceBase
{
    private FromDate dateFrom;
    private ToDate dateTo;
    private container postingProfiles;
    private container vendGroupIds;
    private TaxablePaymentsAnnualReportVersion_AU version;
    private TaxablePaymentsAnnualReportPeriod_AU period;
    private int64 countVendors;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gathers the invoice journals.
    /// </summary>
    /// <param name = "_contract">
    /// The parameters for the calculation.
    /// </param>
    internal void run(TaxablePaymentsAnnualReportProcessingContract_AU _contract)
    {
        this.initializeFromContract(_contract);

        if (version.Status == TaxablePaymentsAnnualReportVersionStatus_AU::Sent
            && version.VersionNum != period.getLatestVersionNum())
        {
            return;
        }

        ttsbegin;

        this.cleanupPayeesCollection();
        this.insertPayees();
        this.updateVersionStatus();

        ttscommit;

        this.outputResults();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromContract</Name>
				<Source><![CDATA[
    private void initializeFromContract(TaxablePaymentsAnnualReportProcessingContract_AU _contract)
    {        
        version = TaxablePaymentsAnnualReportVersion_AU::findByRecId(_contract.parmVersionRefRecId());
        period = version.reportPeriodId();
        dateFrom = period.DateFrom;
        dateTo = period.DateTo;
        postingProfiles = this.postingProfiles(_contract);
        vendGroupIds = this.vendGroupIds(_contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputResults</Name>
				<Source><![CDATA[
    private void outputResults()
    {
        info(strFmt("@TaxablePaymentsAnnualReport:ProcessingCompleted", countVendors));
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupPayeesCollection</Name>
				<Source><![CDATA[
    private void cleanupPayeesCollection()
    {
        TaxablePaymentsAnnualReportVendor_AU payee;
        delete_from payee
            where payee.VersionId == version.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>multiSelectedValue2Con</Name>
				<Source><![CDATA[
    private container multiSelectedValue2Con(str _multiselectedValue)
    {
        const str Delimiter = ';';
        return _multiselectedValue ? str2con(_multiselectedValue, Delimiter) : [''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfiles</Name>
				<Source><![CDATA[
    private container postingProfiles(TaxablePaymentsAnnualReportProcessingContract_AU _contract)
    {
        return this.multiSelectedValue2Con(_contract.parmPostingProfiles());
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendGroupIds</Name>
				<Source><![CDATA[
    private container vendGroupIds(TaxablePaymentsAnnualReportProcessingContract_AU _contract)
    {
        return this.multiSelectedValue2Con(_contract.parmVendGroupIds());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVersionStatus</Name>
				<Source><![CDATA[
    private void updateVersionStatus()
    {
        if (version.Status != TaxablePaymentsAnnualReportVersionStatus_AU::Processing)
        {
            version.selectForUpdate(true);
            version.Status = TaxablePaymentsAnnualReportVersionStatus_AU::Processing;
            version.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPayees</Name>
				<Source><![CDATA[
    private void insertPayees()
    {
        RecordInsertList payeeList = new RecordInsertList(tableNum(TaxablePaymentsAnnualReportVendor_AU), true, true, true, true);

        for (int profileIdx = 1; profileIdx <= conLen(postingProfiles); profileIdx++)
        {
            PostingProfile profile = conPeek(postingProfiles, profileIdx);

            for (int groupIdsIdx = 1; groupIdsIdx <= conLen(vendGroupIds); groupIdsIdx++)
            {
                VendGroupId vendGroupId = conPeek(vendGroupIds, groupIdsIdx);
                this.insertPayeesInternal(profile, vendGroupId, payeeList);
            }
        }

        payeeList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPayeesInternal</Name>
				<Source><![CDATA[
    private void insertPayeesInternal(
        PostingProfile _profile, 
        VendGroupId _vendGroupId,
        RecordInsertList _payeeList)
    {
        VendSettlement vendSettlement;
        VendTrans vendTransInvoice, vendTransPayment;
        VendTable vendTable;
        CustVendAC curAccountNum;
        AmountMST totalAmountMST, totalTaxAmount, totalWhithholdAmount;

        void addPayee()
        {
            if (!curAccountNum)
            {
                return;
            }

            AmountMST invertedTotalAmountMST = totalAmountMST * -1; // invert the sign to show the positive value
            TaxablePaymentsAnnualReportVendor_AU payee;
            if (version.VersionNum == 0)
            {
                payee.AmendmentSign = TaxablePaymentsAnnualReportAmendmentSign_AU::Original;
            }
            else
            {
                TaxablePaymentsAnnualReportVendor_AU lastReportedPayee = this.getLastReportedPayee(curAccountNum);
                if (lastReportedPayee.RecId
                    && lastReportedPayee.SettlementAmountMST == invertedTotalAmountMST
                    && lastReportedPayee.TaxAmount == totalTaxAmount
                    && lastReportedPayee.TaxWithholdAmount == totalWhithholdAmount)
                {
                    return;
                }
                payee.AmendmentSign = lastReportedPayee.RecId ?
                                      TaxablePaymentsAnnualReportAmendmentSign_AU::Amended :
                                      TaxablePaymentsAnnualReportAmendmentSign_AU::Original;
            }
            payee.ReportPeriodId = version.ReportPeriodId;
            payee.VersionId = version.RecId;
            payee.InvoiceAccount = curAccountNum;
            payee.SettlementAmountMST = invertedTotalAmountMST;
            payee.TaxAmount = totalTaxAmount;
            payee.TaxWithholdAmount = totalWhithholdAmount;

            _payeeList.add(payee);
            countVendors++;
        }

        while select sum(SettleAmountMST), AccountNum, TransRecId from vendSettlement
            order by vendSettlement.AccountNum asc
            group by vendSettlement.AccountNum, vendSettlement.TransCompany, vendSettlement.TransRecId, 
                     vendTransInvoice.Voucher, vendTransInvoice.TransDate
            where vendSettlement.TransDate >= dateFrom && vendSettlement.TransDate <= dateTo  
                && vendSettlement.CanBeReversed
        join maxof(AmountMST), Voucher, TransDate from vendTransInvoice
           where vendTransInvoice.RecId == vendSettlement.TransRecId
                && vendTransInvoice.dataAreaId == vendSettlement.TransCompany
                && (vendTransInvoice.TransType == LedgerTransType::Vend
                || vendTransInvoice.TransType == LedgerTransType::Purch
                || vendTransInvoice.TransType == LedgerTransType::GeneralJournal)
                && (!_profile || vendTransInvoice.PostingProfile == _profile)
        exists join vendTable
            where vendTable.AccountNum == vendTransInvoice.AccountNum
                && (!_vendGroupId || vendTable.VendGroup == _vendGroupId)
        exists join vendTransPayment
            where vendTransPayment.RecId == vendSettlement.OffsetRecid
                && (vendTransPayment.TransType == LedgerTransType::Payment
                ||  vendTransPayment.TransType == LedgerTransType::None) // Compensation
        {
            if (vendSettlement.AccountNum != curAccountNum)
            {
                addPayee();

                totalAmountMST = 0.;
                totalTaxAmount = 0.;
                totalWhithholdAmount = 0.;
                curAccountNum = vendSettlement.AccountNum;
            }

            AmountMST settleAmountMST = vendSettlement.SettleAmountMST + this.splittedWithholdSettledAmount(vendSettlement.TransRecId);
            totalAmountMST += settleAmountMST;
            TaxAmount taxAmount = this.getTaxAmount(vendTransInvoice.Voucher, vendTransInvoice.TransDate);
            TaxWithholdAmount taxWithholdAmount = this.getTaxWithholdAmount(vendSettlement.TransRecId);

            // invoice is fully paid in the reporting period
            if (vendTransInvoice.AmountMST == settleAmountMST || !vendTransInvoice.AmountMST)
            {
                totalTaxAmount += taxAmount;
                totalWhithholdAmount += taxWithholdAmount;
            }
            else
            {
                real ratio = settleAmountMST / vendTransInvoice.AmountMST;
                totalTaxAmount += CurrencyExchangeHelper::amount(taxAmount * ratio);
                totalWhithholdAmount += CurrencyExchangeHelper::amount(taxWithholdAmount * ratio);
            }
        }

        addPayee();    
    }

]]></Source>
			</Method>
			<Method>
				<Name>splittedWithholdSettledAmount</Name>
				<Source><![CDATA[
    // In case of WHT, the invoice vendSettlement.SettleAmountMST is without posted tax withholding amount,
    // which is posted a separated vendSettlement and VendTrans records.
    private AmountMST splittedWithholdSettledAmount(RefRecId _vendTransInvoiceId)
    {
        VendSettlement vendSettlement;
        VendTrans vendTransOffset;
        select sum(SettleAmountMST) from vendSettlement
            where vendSettlement.TransRecId == _vendTransInvoiceId
                && vendSettlement.CanBeReversed
        exists join vendTransOffset
            where vendTransOffset.RecId == vendSettlement.OffsetRecid
                && (vendTransOffset.TransType == LedgerTransType::Vend
                ||  vendTransOffset.TransType == LedgerTransType::Purch);
        return vendSettlement.SettleAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmount</Name>
				<Source><![CDATA[
    private TaxAmount getTaxAmount(Voucher _voucher, TransDate _transDate)
    {
        TaxTrans taxTrans;
        select sum(TaxAmount) from taxTrans
            where taxTrans.Voucher == _voucher
                && taxTrans.TransDate == _transDate;
        return taxTrans.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdAmount</Name>
				<Source><![CDATA[
    private TaxWithholdAmount getTaxWithholdAmount(RefRecId _vendTransInvoiceId)
    {
        TaxWithholdTrans taxWHTTrans;
        select sum(TaxWithholdAmount) from taxWHTTrans
            where taxWHTTrans.VendTransInvoiceId == _vendTransInvoiceId;
        return taxWHTTrans.TaxWithholdAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastReportedPayee</Name>
				<Source><![CDATA[
    private TaxablePaymentsAnnualReportVendor_AU getLastReportedPayee(CustVendAC _accountNum)
    {
        TaxablePaymentsAnnualReportVendor_AU ret;
        TaxablePaymentsAnnualReportVersion_AU prevVersion;

        select firstonly ret
            order by prevVersion.VersionNum desc
            where ret.ReportPeriodId == period.RecId
                && ret.VersionId != Version.RecId 
                && ret.InvoiceAccount == _accountNum
        join VersionNum from prevVersion
            where prevVersion.RecId == ret.VersionId;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>