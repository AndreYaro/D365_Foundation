<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceProposalInsertLines_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProjInvoiceProposalInsertLines))]
public final class ProjInvoiceProposalInsertLines_ApplicationSuite_Extension
{
    private Set proposalIdSet = new Set(Types::String);
    private boolean isEnabledBrazilParameters = BrazilParameters::isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addProposalToList</Name>
				<Source><![CDATA[
    protected void addProposalToList(boolean _shouldAdd)
    {
        boolean shouldAdd = _shouldAdd;

        if (shouldAdd &&
            isEnabledBrazilParameters)
        {
            if (proposalIdSet.in(projProposalJour.ProposalId))
            {
                shouldAdd = false;
            }
            else
            {
                proposalIdSet.add(projProposalJour.ProposalId);
            }
        }

        next addProposalToList(shouldAdd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>ProjProposalCost</c> line.
    /// </summary>
    /// <param name = "_projInvoiceProjId">The project Id.</param>
    /// <param name = "_recId">The related <c>ProjCostTransSale</c> record Id.</param>
    protected void doCost(ProjInvoiceProjId _projInvoiceProjId, RecId _recId)
    {
        next doCost(_projInvoiceProjId, _recId);

        if (projProposalJour.IntentLetterId_IT && FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            ProjCostTransSale projCostTransSale = ProjCostTransSale::find(_recId);
            ProjCostTrans projCostTrans = ProjCostTrans::find(projCostTransSale.TransId);

            if (projCostTrans)
            {
                ttsbegin;
                ProjProposalCost projProposalCost = ProjProposalCost::find(
                    projCostTrans.TransId,
                    projProposalJour.ProposalId,
                    true);
                projProposalCost.TaxGroupId = projProposalJour.TaxGroupId;
                projProposalCost.update();
                ttscommit;
            }

        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>doEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>ProjProposalEmpl</c> record.
    /// </summary>
    /// <param name = "_projInvoiceProjId">The project Id.</param>
    /// <param name = "_recId">The related <c>ProjEmplTransSale</c> record Id.</param>
    protected void doEmpl(ProjInvoiceProjId _projInvoiceProjId, RecId _recId)
    {
        next doEmpl(_projInvoiceProjId, _recId);

        if (projProposalJour.IntentLetterId_IT && FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            ProjEmplTransSale projEmplTransSale = ProjEmplTransSale::find(_recId, true);
            ProjEmplTrans projEmplTrans = ProjEmplTrans::find(projEmplTransSale.TransId);

            if (projEmplTrans)
            {
                ttsbegin;
                ProjProposalEmpl projProposalEmpl = ProjProposalEmpl::find(
                    projEmplTrans.TransId,
                    projProposalJour.ProposalId,
                    true);
                projProposalEmpl.TaxGroupId = projProposalJour.TaxGroupId;
                projProposalEmpl.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>ProjProposalItem</c> line.
    /// </summary>
    /// <param name = "_projInvoiceProjId">The project Id.</param>
    /// <param name = "_recId">The related <c>ProjItemTransSale</c> record Id.</param>
    protected void doItem(ProjInvoiceProjId _projInvoiceProjId, RecId _recId)
    {
        next doItem(_projInvoiceProjId, _recId);

        if (projProposalJour.IntentLetterId_IT && FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            ProjItemTransSale projItemTransSale = ProjItemTransSale::find(_recId, true);
            ProjItemTrans projItemTrans = ProjItemTrans::find(projItemTransSale.ProjTransId);

            if (projItemTrans)
            {
                ttsbegin;
                ProjProposalItem projProposalItem = ProjProposalItem::find(
                    projItemTrans.ProjTransId,
                    projProposalJour.ProposalId,
                    true);
                projProposalItem.TaxGroupId = projProposalJour.TaxGroupId;
                projProposalItem.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doOnAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>ProjProposalOnAcc</c> line.
    /// </summary>
    /// <param name = "_projInvoiceProjId">The project Id.</param>
    /// <param name = "_recId">The related <c>ProjOnAccTransSale</c> record Id.</param>
    protected void doOnAccount(ProjInvoiceProjId _projInvoiceProjId, RecId _recId)
    {
        next doOnAccount(_projInvoiceProjId, _recId);

        if (projProposalJour.IntentLetterId_IT && FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            ProjOnAccTransSale projOnAccTransSale = ProjOnAccTransSale::find(_recId, true);
            ProjOnAccTrans projOnAccTrans = ProjOnAccTrans::find(projOnAccTransSale.TransId);

            if (projOnAccTrans)
            {
                ttsbegin;
                ProjProposalOnAcc projProposalOnAcc = ProjProposalOnAcc::find(
                    projOnAccTrans.TransId,
                    projProposalJour.ProposalId,
                    true);
                projProposalOnAcc.TaxGroupId = projProposalJour.TaxGroupId;
                projProposalOnAcc.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>ProjProposalRevenue</c> line.
    /// </summary>
    /// <param name = "_projInvoiceProjId">The project Id.</param>
    /// <param name = "_recId">The related <c>ProjRevenueTransSale</c> record Id.</param>
    protected void doRevenue(ProjInvoiceProjId _projInvoiceProjId, RecId _recId)
    {
        next doRevenue(_projInvoiceProjId, _recId);

        if (projProposalJour.IntentLetterId_IT && FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            ProjRevenueTransSale projRevenueTransSale = ProjRevenueTransSale::find(_recId, true);
            ProjRevenueTrans projRevenueTrans = ProjRevenueTrans::find(projRevenueTransSale.TransId);

            if (projRevenueTrans)
            {
                ttsbegin;
                ProjProposalRevenue projProposalRevenue = ProjProposalRevenue::find(
                    projRevenueTrans.TransId,
                    projProposalJour.ProposalId,
                    true);
                projProposalRevenue.TaxGroupId = projProposalJour.TaxGroupId;
                projProposalRevenue.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>ProjProposalItem</c> line.
    /// </summary>
    /// <param name = "_projInvoiceProjId">The project Id.</param>
    /// <param name = "_recId">The related <c>SalesLine</c> record Id.</param>
    protected void doSalesLine(ProjInvoiceProjId _projInvoiceProjId, RecId _recId)
    {
        next doSalesLine(_projInvoiceProjId, _recId);

        if (projProposalJour.IntentLetterId_IT && FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            SalesLine salesLine = SalesLine::findRecId(_recId);

            if (salesLine)
            {
                ttsbegin;
                ProjProposalItem projProposalItem = ProjProposalItem::find(
                    salesLine.ProjTransId,
                    projProposalJour.ProposalId,
                    true);
                projProposalItem.TaxGroupId = projProposalJour.TaxGroupId;
                projProposalItem.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoice</Name>
				<Source><![CDATA[
    protected void updateInvoice()
    {
        next updateInvoice();

        if (FeatureStateProvider::isFeatureEnabled(BaseDocumentTrackingImprovementsFeature_IT::instance()))
        {
            ListEnumerator le = proposalIdList.getEnumerator();

            while (le.moveNext())
            {
                ProjProposalLinesUnion projProposalLinesUnion;
                ProjJournalTrans projJournalTrans;
                ProjJournalTable projJournalTable;
                BaseDocument_IT baseDocument;
                boolean baseDocumentIsCreated = false;
                container baseDocumentPacked = conNull();

                while select RecId from projProposalLinesUnion
                    where projProposalLinesUnion.ProposalId == le.current()
                join RecId from projJournalTrans
                    where projJournalTrans.TransId == projProposalLinesUnion.TransId
                join RecId from projJournalTable
                    where projJournalTable.JournalId == projJournalTrans.JournalId
                join baseDocument
                    where baseDocument.RefTableId == projJournalTable.TableId
                        && baseDocument.RefRecId == projJournalTable.RecId
                        && baseDocument.DocumentType != DocumentType_IT::None
                {
                    if (!baseDocumentIsCreated)
                    {
                        BaseDocument_IT::updateRefRecords(baseDocument, ProjProposalJour::find(le.current()));
                        baseDocumentIsCreated = true;
                    }

                    if (baseDocumentPacked
                        && baseDocumentPacked != baseDocument.pack())
                    {
                        throw error("@BaseDocument_IT:InvoiceProposalDifferentBaseDocumentsError");
                    }

                    baseDocumentPacked = baseDocument.pack();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>