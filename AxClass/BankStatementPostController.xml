<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementPostController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankStatementPostController</c> class acts as a controller for the bank statement post operation.
/// </summary>
internal class BankStatementPostController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BankStatementPostController construct()
    {
        SysOperationController controller;

        controller = new BankStatementPostController(
            classStr(BankStatementPostProcessor),
            methodStr(BankStatementPostProcessor, run));
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void run()
    {
        BankStatementPostContract contract = this.getContract();
        if (contract.parmIsMainBatch())
        {
            ttsbegin;
            if (this.validateTrackingForOperation(contract))
            {
                BatchHeader batchHeader = this.getOrCreateBatchHeader();
                batchHeader.parmRetriesOnFailure(0);
                batchHeader.parmCaption(this.caption());
                this.createBatchTask(batchHeader, contract);
                batchHeader.save();
                this.createTrackingForOperation(contract, batchHeader);
                this.addBatchInfoMessage(contract, batchHeader);
            }
            ttscommit;
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTrackingForOperation</Name>
				<Source><![CDATA[
    private boolean validateTrackingForOperation(BankStatementPostContract _contract)
    {
        BankReconciliationOperationType operationType = _contract.parmBankReconciliationOperationType();
        boolean res = true;

        switch (operationType)
        {
            case BankReconciliationOperationType::BankStatementPost:
                res = BankStatementPost::validateBankStatementBeforePost(_contract.parmSingleBankStatementRecId());
                break;
            case BankReconciliationOperationType::BankStatementLinePost:
                Map statementToLineListMap = _contract.parmStatementToLineListMap();
                res = BankStatementPost::validateBankStatementLinesBeforePost(statementToLineListMap);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrackingForOperation</Name>
				<Source><![CDATA[
    private void createTrackingForOperation(BankStatementPostContract _contract, BatchHeader _batchHeader)
    {
        BankReconciliationOperationType operationType = _contract.parmBankReconciliationOperationType();

        switch (operationType)
        {
            case BankReconciliationOperationType::BankStatementPost:
                RecId statementRecId = _contract.parmSingleBankStatementRecId();
                BankBatchProcessingTracking::addTrackingFromSource(
                    tableNum(BankStmtISOAccountStatement),
                    statementRecId,
                    _batchHeader.parmBatchHeaderId(),
                    BankReconciliationOperationType::BankStatementPost,
                    classStr(BankStatementPost));
                break;
            case BankReconciliationOperationType::BankStatementLinePost:
                Map statementToLineListMap = _contract.parmStatementToLineListMap();
                MapEnumerator mapEnumerator = statementToLineListMap.getEnumerator();
                while (mapEnumerator.moveNext())
                {
                    BankStmtISOAccountStatement statementOfLineList = BankStmtISOAccountStatement::find(mapEnumerator.currentKey());
                    BankBatchProcessingTracking::addTracking(statementOfLineList, _batchHeader.parmBatchHeaderId(), BankReconciliationOperationType::BankStatementLinePost, classStr(BankStatementPost));
                    List statementLineRecIdList = mapEnumerator.currentValue();
                    ListEnumerator listEnumerator = statementLineRecIdList.getEnumerator();
                    while (listEnumerator.moveNext())
                    {
                        RecId statementLineRecId = listEnumerator.current();
                        BankBatchProcessingTracking::addTrackingFromSource(
                            tableNum(BankStmtISOReportEntry),
                            statementLineRecId,
                            _batchHeader.parmBatchHeaderId(),
                            BankReconciliationOperationType::BankStatementLinePost,
                            classStr(BankStatementPost));
                    }
                }
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchTask</Name>
				<Source><![CDATA[
    private void createBatchTask(BatchHeader _batchHeader, BankStatementPostContract _mainBatchContract)
    {
        BankStatementPostController taskController = BankStatementPostController::construct();
        BankStatementPostContract taskContract = taskController.getContract();
        taskContract.parmIsMainBatch(false);
        taskContract.parmBankReconciliationOperationType(_mainBatchContract.parmBankReconciliationOperationType());
        taskContract.parmSingleBankStatementRecId(_mainBatchContract.parmSingleBankStatementRecId());
        taskContract.parmStatementToLineListMap(_mainBatchContract.parmStatementToLineListMap());
        _batchHeader.addTask(taskController);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBatchInfoMessage</Name>
				<Source><![CDATA[
    private void addBatchInfoMessage(BankStatementPostContract _contract, BatchHeader _batchHeader)
    {
        BankReconciliationOperationType operationType = _contract.parmBankReconciliationOperationType();
        Info(strFmt("@Bank:BankStatementPostScheduledToBatchMessage", _batchHeader.parmBatchHeaderId(), BankStatementPostController::concatenateBatchJobCaption(operationType)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    internal BankStatementPostContract getContract()
    {
        return this.getDataContractObject() as BankStatementPostContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected ClassDescription defaultCaption()
    {
        return enum2Str(BankReconciliationOperationType::BankStatementPost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ClassDescription caption()
    {
        BankStatementPostContract contract = this.getContract();
        return BankStatementPostController::concatenateBatchJobCaption(contract.parmBankReconciliationOperationType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrCreateBatchHeader</Name>
				<Source><![CDATA[
    private BatchHeader getOrCreateBatchHeader()
    {
        Batchheader batchHeader = BatchHeader::getCurrentBatchHeader();

        if (batchHeader == null)
        {
            batchHeader = BatchHeader::construct();
        }

        return batchHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>concatenateBatchJobCaption</Name>
				<Source><![CDATA[
    internal static ClassDescription concatenateBatchJobCaption(BankReconciliationOperationType _operationType)
    {
        return strFmt("@Bank:BankReconciliationOperationCaptionPrefix", enum2Str(_operationType));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>