<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmPersonEmployeeOperations</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A class for performing operations with worker or person.
/// </summary>
class RhrmPersonEmployeeOperations
{
    HcmWorker       hcmWorker;
    HcmEmployment   hcmEmployment;
    CompanyInfo     companyInfo;

    RHRMPersonTable personTable;
    RHRMEmplTable   emplTable;

    RHRMEmplId              emplId;
    RHRMPersonnelNumberId   personnelId;
    DirPersonRecId          partyPerson;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createEmployee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a worker.
    /// </summary>
    /// <returns>
    /// True if a worker is created successfully.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Worker is not created.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean createEmployee()
    {
        boolean ret = true;

        if (this.isValidCreate())
        {
            ttsbegin;

            this.createHcmWorker();

            this.createPerson();

            emplTable.clear();
            emplTable.initFromPersonTable(personTable);
            emplTable.EmployeeId = emplId;
            emplTable.insert();

            ttscommit;
        }
        else
        {
            this.creationErrors();
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHcmWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>HcmWorker</c> instance if not exists.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Throws if instance does not created.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createHcmWorker()
    {
        if (hcmWorker.RecId)
        {
            return;
        }

        if (hcmEmployment.RecId == 0)
        {
            hcmEmployment.ValidFrom = HcmDateTimeUtil::startOfCurrentDay();
            hcmEmployment.ValidTo   = DateTimeUtil::maxValue();
        }

        EmployeeIdIProvider_RU employeeIdProvider = EmployeeIdProviderFactory_RU::newEmployeeProvider_RU();
        employeeIdProvider.setEmployeeId(emplId);

        HcmCreateWorkerContract createWorkerContract = HcmCreateWorkerContract::construct();
        createWorkerContract.parmDirPersonName(DirPersonName::find(partyPerson, false));
        createWorkerContract.parmPersonnelNumber(personnelId);
        createWorkerContract.parmLegalEntityRecId(companyInfo.RecId);
        createWorkerContract.parmEmploymentType(HcmEmploymentType::Employee);
        createWorkerContract.parmEmploymentValidFrom(hcmEmployment.ValidFrom);
        createWorkerContract.parmEmploymentValidTo(hcmEmployment.ValidTo);
        createWorkerContract.parmEmployeeIdProvider(employeeIdProvider);

        HcmWorkerRecId workerRecId = HcmWorkerTransition::newCreateHcmWorkerV2(createWorkerContract);

        hcmWorker = HcmWorker::findByPersonnelNumber(personnelId);

        if (hcmWorker.RecId == 0)
        {
            this.creationErrors();
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPerson</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates person.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createPerson()
    {
        personTable = RHRMPersonTable::find(personnelId, true);

        if (personTable)
        {
            if (personTable.TaxPayBlocked)
            {
                personTable.TaxPayBlocked = NoYes::No;
                personTable.update();
                info("@RUP6335");
            }
        }
        else
        {
            personTable.initValue();
            personTable.PayMainEmplId   = emplId;
            personTable.PersonnelNumber = personnelId;
            personTable.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>creationErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies creation errors.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void creationErrors()
    {
        if (emplId == '')
        {
            error("@RUP6007");
        }

        if (personnelId == '')
        {
            error("@RUP6008");
        }

        if (hcmWorker.RecId != 0 && hcmEmployment.RecId == 0)
        {
            error(strFmt("@RUP6009", personnelId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes worker and employment.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initState()
    {
        companyInfo   = companyInfo::find();
        hcmWorker     = HcmWorker::findByPerson(partyPerson);
        hcmEmployment = HcmEmployment::findByWorkerLegalEntity(hcmWorker.RecId, companyInfo.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if creation is successfull.
    /// </summary>
    /// <returns>
    /// True if creation is successfull.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isValidCreate()
    {
        return  emplId                  &&
                personnelId             &&
                partyPerson;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmplId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RHRMEmplId parmEmplId(RHRMEmplId _emplId = emplId)
    {
        emplId = _emplId;

        return emplId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPartyPerson</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public DirPersonRecId parmPartyPerson(DirPersonRecId _partyPerson = partyPerson)
    {
        partyPerson = _partyPerson;
        return partyPerson;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPersonnelId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RHRMPersonnelNumberId parmPersonnelId(RHRMPersonnelNumberId _personnelId = personnelId)
    {
        personnelId = _personnelId;

        return personnelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the class.
    /// </summary>
    /// <param name="_personnelId">
    /// A personnel id.
    /// </param>
    /// <param name="_emplId">
    /// An employee id.
    /// </param>
    /// <returns>
    /// An instance of <c>RHRMPersonEmployeeOperations</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static  RHRMPersonEmployeeOperations construct(RHRMPersonnelNumberId _personnelId, RHRMEmplId _emplId)
    {
        RHRMPersonEmployeeOperations personEmplOperation = new RHRMPersonEmployeeOperations();
        personEmplOperation.parmPersonnelId(_personnelId);
        personEmplOperation.parmEmplId(_emplId);
        personEmplOperation.initState();

        return personEmplOperation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>