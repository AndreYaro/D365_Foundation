<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPaymReconciliationImport_SE_BGAG</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustPaymReconciliationImport_SE_BGAG extends CustPaymReconciliationImport implements BatchRetryable
{
    boolean                 matchingInvoiceNotFound;
    boolean                 refundFound;
    boolean                 refundImported;
    LedgerJournalId         journalNum;

    NoYes                   importRefunds;
    LedgerJournalNameId     journalNameId;
    Name                    journalDescription;

    DialogRunbase           dialog;
    DialogField             dialogImportRefunds;
    DialogField             dialogJournalNameId;
    DialogField             dialogJournalDescription;
    DialogGroup             dialogGroupRefunds;

    LedgerJournalName       ledgerJournalName;
    LedgerJournalTable      ledgerJournalTable;

    //record types
    #define.StartRecord('01')
    #define.InCustPaymentsRecord('82')
    #define.PaymRecordOutPaym('32')
    #define.WithdrawlRecordRefunds('17')
    #define.PaymRecordRefunds('77')

    //error conditions
    #define.ApprovedPaymentNew('0')
    #define.ApprovedPaymentOld(' ')
    #define.InsufficientFunds('1')
    #define.NoAutogiroService('2')
    #define.RenewedFunds('9')

    #define.StartRecordTxt('AUTOGIRO')
    #xppTexts

    #define.CurrentVersion(3)
    #LocalMacro.CurrentList
    importRefunds,
    journalNameId,
    journalDescription
    #EndMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFileStream</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void parmFileStream(System.IO.Stream _fileStream)
    {
        fileStream = _fileStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRefundJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new general journal based on the journal name selected by user.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createRefundJournal()
    {
        ExchangeRateHelper helper;

        ttsbegin;
        ledgerJournalTable.clear();
        ledgerJournalTable.initValue();
        ledgerJournalTable.initFromLedgerJournalName(journalNameId);
        ledgerJournalTable.JournalNum           = JournalTableData::newTable(ledgerJournalTable).nextJournalId();
        ledgerJournalTable.Name                 = journalDescription;
        ledgerJournalTable.CurrencyCode         = ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::SEK);

        if (ledgerJournalTable.CurrencyCode)
        {
            helper = ExchangeRateHelper::newExchangeDate(
                    Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                    ledgerJournalTable.CurrencyCode,
                    DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

            ledgerJournalTable.ExchRate = helper.getExchangeRate1();
            ledgerJournalTable.ExchrateSecondary = helper.getExchangeRate2();
            ledgerJournalTable.euroTriangulation = ledgerJournalTable.ExchrateSecondary != 0 ? true : false;
        }

        ledgerJournalTable.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRefundJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new journal line in the general journal based on the record in payment return file if
    ///    there is a refund.
    /// </summary>
    /// <param name="_refundDate">
    ///    The refund date as read from the record type 77 in the payment return file.
    /// </param>
    /// <param name="_custAccountNum">
    ///    The customer account number determined based on the invoice number read from the record type 77 in
    ///    the payment return file.
    /// </param>
    /// <param name="_transactionText">
    ///    The transaction text based on the invoice number read from the record type 77 in the payment return
    ///    file.
    /// </param>
    /// <param name="_offsetAccount">
    ///    The offset account number determined based on the invoice number read from the record type 77 in
    ///    the payment return file.
    /// </param>
    /// <param name="_offsetAccountType">
    ///    The offset account type to be used on the journal line.
    /// </param>
    /// <param name="_debitAmount">
    ///    The refund amount as read from the record type 17 in the payment return file.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createRefundJournalLine(
        TransDate             _refundDate,
        CustAccount           _custAccountNum,
        LedgerJournalTransTxt _transactionText,
        CustVendAC            _offsetAccount,
        LedgerJournalACType   _offsetAccountType,
        AmountCurDebit        _debitAmount)
    {
        LedgerJournalTrans ledgerJournalTrans;

        ledgerJournalTrans.clear();
        ledgerJournalTrans.CurrencyCode = ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::SEK);
        ledgerJournalTrans.initValue();

        ttsbegin;
        if (!ledgerJournalTable)
        {
            this.createRefundJournal();
        }

        ledgerJournalTrans.TransDate            = _refundDate;
        ledgerJournalTrans.JournalNum           = ledgerJournalTable.JournalNum;
        ledgerJournalTrans.AmountCurDebit       = _debitAmount;
        ledgerJournalTrans.Txt                  = _transactionText;
        ledgerJournalTrans.OffsetAccountType    = LedgerJournalACType::Bank;
        ledgerJournalTrans.AccountType          = LedgerJournalACType::Cust;
        ledgerJournalTrans.Voucher              = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTable)).getNew(false);

        ledgerJournalTrans.parmOffsetAccount(_offsetAccount, _offsetAccountType);
        ledgerJournalTrans.parmAccount(_custAccountNum, LedgerJournalACType::Cust);
        ledgerJournalTrans.insert();
        ttscommit;

        refundImported = true;
        journalNum     = ledgerJournalTable.JournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be built by using the <c>Dialog</c> class or by using a class that is created in the
    ///    Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        dialogGroupRefunds          = dialog.addGroup("@SYS320327");
        dialogImportRefunds         = dialog.addFieldValue(enumstr(NoYes), importRefunds, "@SYS320329", "@SYS320330");
        dialogJournalNameId         = dialog.addFieldValue(extendedtypestr(LedgerJournalNameId), journalNameId,"@SYS66089", "@SYS320331");
        dialogJournalDescription    = dialog.addFieldValue(extendedtypestr(Name), journalDescription, "@SYS77456", "@SYS77457");

        this.registerEventHandlers();
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDisk2Journal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads the payment return file and calls appropriate methods to process each record.
    /// </summary>
    protected void fromDisk2Journal()
    {
        container   currentRecord;
        setprefix(strfmt("@SYS73667", filename));

        currentRecord = file.read();
        this.processStartRecord(currentRecord);

        while (!file.status())
        {
            currentRecord = file.read();
            this.processRecord(currentRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        importRefunds       = dialogImportRefunds.value();
        journalNameId       = dialogJournalNameId.value();
        journalDescription  = dialogJournalDescription.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    public className interfaceName()
    {
        return "@SYS86043";
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalName_Lookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the journal name lookup and filters the results for the journal type of daily.
    /// </summary>
    /// <param name="_formControl">
    ///    The control triggering this event.
    /// </param>
    private void journalName_Lookup(FormControl _formControl)
    {
        SysTableLookup          sysTableLookup  = SysTableLookup::newParameters(tablenum(LedgerJournalName),_formControl);
        Query                   query           = new Query();
        QueryBuildDataSource    queryBuildDataSource        = query.addDataSource(tablenum(LedgerJournalName));
        QueryBuildRange         queryBuildRangeJournalType  = queryBuildDataSource.addRange(fieldnum(LedgerJournalName, JournalType));
        QueryBuildRange         queryBuildRangeUserGroupId  = queryBuildDataSource.addRange(fieldnum(LedgerJournalName, BlockUserGroupId));

        sysTableLookup.addLookupfield(fieldnum(LedgerJournalName, JournalName));
        sysTableLookup.addLookupfield(fieldnum(LedgerJournalName, Name));

        queryBuildRangeJournalType.value(queryValue(LedgerJournalType::Daily));
        queryBuildRangeUserGroupId.value(UserGroupList::groupsForUser());

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalName_Modified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the journal name that was entered by the user and fills the description field from the
    ///    <c>LedgerJournalName</c> table if a match is found.
    /// </summary>
    /// <param name="_journalNameIdControl">
    ///    The control that triggers this event.
    /// </param>
    /// <returns>
    ///    true if there is a match for the journal name that is entered by the user in the
    ///    <c>LedgerJournalName</c> table; otherwise, false.
    /// </returns>
    private boolean journalName_Modified(FormStringControl _journalNameIdControl)
    {
        boolean         ret;
        ret             = _journalNameIdControl.modified();
        journalNameId   = dialogJournalNameId.value();

        if (ret && journalNameId)
        {
            ledgerJournalName = LedgerJournalName::find(journalNameId);

            if (!ledgerJournalName.RecId)
            {
                ret = checkFailed(strfmt("@SYS22462", journalNameId));
            }
            else
            {
                dialogJournalDescription.value(ledgerJournalName.Name);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    public boolean openFile()
    {
        #file
        boolean ret = false;

        file = this.convertFileStreamToStreamIO();

        if (file)
        {
            if (file.status())
            {
                throw error("@SYS52680");
            }
            file.inFieldDelimiter(#delimiterCRLF);
            file.inRecordDelimiter(#delimiterCRLF);

            ret = true;
        }
        else
        {
            throw error("@SYS112406");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecord</Name>
				<Source><![CDATA[
    public void processRecord(container _record)
    {
        InvoiceId               invoiceId;
        SpecTrans               specTrans;
        CustTrans               custTrans;
        CustTransOpen           custTransOpen;
        LedgerJournalTrans      ledgerJournalTransFieldList;
        AccountNum              accountNum;
        str 80                  inRecord;
        str 2                   recordType;
        PaymId                  paymId;
        str 1                   errorCode;
        Integer                 pos;
        boolean                 wrongCompany;

        inRecord    = conpeek(_record, 1);
        recordType  = substr(inRecord, 1, 2);

        switch (recordType)
        {
            case #InCustPaymentsRecord:
            case #PaymRecordOutPaym:
                paymId     = substr(inRecord,54,16);
                pos        = strfind(paymId,'#',1,16);
                invoiceId  = strLRTrim(substr(paymId,(pos + 1),(16 - pos)));
                accountNum = strLRTrim(substr(paymId,1,(pos - 1)));
                errorCode  = substr(inRecord,80,1);

                if (invoiceId)
                {
                    while select crosscompany AccountNum, RecId from custTrans
                    where   custTrans.Invoice == invoiceId
                    join    RecId from custTransOpen
                    where   custTransOpen.RefRecId == custTrans.RecId
                    join    SpecTableId, SpecRecId, SpecCompany, RecId from specTrans
                    where   specTrans.RefTableId    == custTransOpen.TableId
                       &&   specTrans.RefRecId      == custTransOpen.RecId
                       &&   specTrans.RefCompany    == custTransOpen.DataAreaId
                    {
                        wrongCompany = false;
                        if (specTrans.RecId)
                        {
                            select firstonly crosscompany Voucher from ledgerJournalTransFieldList
                                where ledgerJournalTransFieldList.TableId       == specTrans.SpecTableId
                                   && ledgerJournalTransFieldList.RecId         == specTrans.SpecRecId
                                   && ledgerJournalTransFieldList.DataAreaId    == specTrans.SpecCompany;

                            if (ledgerJournalTransFieldList)
                            {
                                wrongCompany = ledgerJournalTransFieldList.company() == curext() ? false : true;
                                break;
                            }
                        }
                    }

                    // Don't do any updates if this is the wrong company for importing
                    if (!wrongCompany)
                    {
                        switch (errorCode)
                        {
                            case #InsufficientFunds:
                                info(strfmt("@SYS84825", custTrans.AccountNum, ledgerJournalTransFieldList.Voucher, invoiceId));
                                this.setStatusOnInvoice(invoiceId, CustVendPaymStatus::Rejected);
                                break;
                            case #NoAutogiroService:
                                info(strfmt("@SYS84826", custTrans.AccountNum, ledgerJournalTransFieldList.Voucher, invoiceId));
                                this.setStatusOnInvoice(invoiceId, CustVendPaymStatus::Rejected);
                                break;
                            case #RenewedFunds:
                                info(strfmt("@SYS84827", custTrans.AccountNum, ledgerJournalTransFieldList.Voucher, invoiceId));
                                break;
                            case #ApprovedPaymentNew: // the error code for approved payments can be '0' (New format) or ' '(Old format)
                            case #ApprovedPaymentOld:
                                this.setStatusOnInvoice(invoiceId, CustVendPaymStatus::Confirmed);
                                break;
                        }
                    }
                    else
                    {
                        // LedgerJournalTrans exists, but not in the company where the import is occurring
                        warning("@SYS309841");
                    }
                }
                break;

            case #WithdrawlRecordRefunds:

                refundFound = true;

                if (importRefunds)
                {
                    this.processRefunds(inRecord, recordType);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRefunds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads the refund records, that is a record type of 17 and 77, and creates a new general journal.
    /// </summary>
    /// <param name="_record">
    ///    The record from the payment return file.
    /// </param>
    /// <param name="_recordType">
    ///    The record type, that is the first two characters, of the record.
    /// </param>
    /// <remarks>
    ///    For each combination of record type 17 and 77 records, a new journal line is created in the journal.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void processRefunds(str 80   _record,
                               str 2    _recordType)
    {
        TransDate               refundDate;
        LedgerJournalTransTxt   transactionText;
        InvoiceId               invoiceId;
        CustTrans               custTrans;
        AmountCurDebit          debitAmount;
        str 2                   recordType;
        str 80                  record;

        debitAmount = str2num(substr(_record, 51, 18))/100; //last two characters are pennies/cents

        record         = conpeek(file.read(), 1);
        recordType     = substr(record, 1, 2);

        //Record Type '17' should always be followed by record type '77'
        if (recordType == #PaymRecordRefunds)
        {
            refundDate      = str2date(substr(record, 70, 8), 321);
            invoiceId       = strLRTrim(substr(record, 54, 16));
            transactionText = strfmt("@SYS320328", invoiceId);

            select firstonly AccountNum, PaymMode from custTrans
                where custTrans.Invoice == invoiceId;

            if (custTrans)
            {
                custPaymModeTable = CustPaymModeTable::find(custTrans.PaymMode);
                this.createRefundJournalLine(refundDate,
                                             custTrans.AccountNum,
                                             transactionText ,
                                             custPaymModeTable.parmPaymAccount(),
                                             custPaymModeTable.AccountType,
                                             debitAmount);
            }
            else
            {
                select firstonly crosscompany RecId from custTrans
                    where custTrans.Invoice == invoiceId;

                if (custTrans)
                {
                    warning("@SYS309841");
                }
                else
                {
                    matchingInvoiceNotFound = true;

                    //still create journal line with blank Cust account and offset account
                    this.createRefundJournalLine(refundDate,
                                                 "",
                                                 transactionText ,
                                                 "",
                                                 LedgerJournalACType::Bank,
                                                 debitAmount);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processStartRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the format of the first record of the imported file.
    /// </summary>
    /// <param name="_record">
    ///    The first record of the input file.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The first two characters of the record do not match the expected start record type '01'.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The text AUTOGIRO is not found in the first record.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void processStartRecord(container _record)
    {
        str 2  recordType;
        str 80 record;

        //first two characters in each record form the Record Type
        record      = conpeek(_record, 1);
        recordType  = substr(record, 1, 2);

        if (recordType != #StartRecord)
        {
            throw error("@SYS84817");
        }
        else
        {
            //Text AUTOGIRO can be present at position 3-22(New format) or 11-18(Old format)
            if (strLRTrim(substr(record,3,20)) != #StartRecordTxt && strLRTrim(substr(record,11,8)) != #StartRecordTxt)
            {
                throw error(strfmt("@SYS84821", #StartRecordTxt));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandlers</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void registerEventHandlers()
    {
        dialogJournalNameId.control().registerOverrideMethod(methodstr(FormStringControl, modified),
                                                             methodstr(CustPaymReconciliationImport_SE_BGAG, journalName_Modified),
                                                             this);

        dialogJournalNameId.control().registerOverrideMethod(methodstr(FormStringControl, lookup),
                                                             methodstr(CustPaymReconciliationImport_SE_BGAG, journalName_Lookup),
                                                             this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusOnInvoice</Name>
				<Source><![CDATA[
    public void setStatusOnInvoice(InvoiceId           _invoice,
                            CustVendPaymStatus  _status,
                            ErrorCodePayment    _errorCodePayment = '')
    {
        SpecTrans       specTrans;
        CustTrans       custTrans;
        CustTransOpen   custTransOpen;

        while select forupdate crosscompany custTrans
            where custTrans.Invoice == _invoice
        join forupdate custTransOpen
            where custTransOpen.RefRecId == custTrans.RecId
        join forupdate specTrans
            where specTrans.RefTableId  == custTransOpen.TableId
               && specTrans.RefRecId    == custTransOpen.RecId
               && specTrans.RefCompany  == custTransOpen.DataAreaId
        {
            if (specTrans.RecId)
            {
                changecompany (specTrans.company())
                {
                    specTrans.PaymentStatus = _status;
                    specTrans.ErrorCodePayment  = _errorCodePayment;
                    specTrans.update();
                }
            }
            else
            {
                info(strfmt("@SYS66294", _invoice));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        #define.PreviousVersion(2)
        container   base;
        boolean     ret;
        Version     version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = _packedClass;
                ret = super(base);
                break;

            case #PreviousVersion:
                ret = super(_packedClass);
                break;

            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();
        setprefix(strfmt("@SYS73667", filename));
        if (refundFound && !importRefunds)
        {
            warning("@SYS320333");
        }
        else
        {
            if (matchingInvoiceNotFound)
            {
                warning(strfmt("@SYS320334", journalNum));
            }

            if (refundImported)
            {
                info(strfmt("@SYS320335", journalNum));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePayments</Name>
				<Source><![CDATA[
    void updatePayments()
    {
        LedgerJournalTrans  ledgerJournalTrans, ledgerJournalTransRejected;
        SpecTrans           specTrans;
        AmountCur           amountConfirmed,amountRejected;

        AmountCur calcAmount()
        {
            ExchangeRateHelper exchangeRateHelper =
            ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(ledgerJournalTrans.Company).RecId), ledgerJournalTrans.displayCurrencyCode());

            return this.convertAmountTransCurToAmountPaymCur(
                    specTrans.Balance01,
                    specTrans.RefCompany,
                    this.fetchTransCurrencyCode(specTrans.RefTableId, specTrans.RefRecId, specTrans.RefCompany),
                    ledgerJournalTrans.Company,
                    ledgerJournalTrans.displayCurrencyCode(),
                    ledgerJournalTrans.TransDate,
                    specTrans.CrossRate,
                    exchangeRateHelper.prepareExchangeRateForStorage(ledgerJournalTrans.crossrate()));
        }

        while select forupdate ledgerJournalTable
            where ledgerJournalTable.JournalType == this.journalType()
        join forupdate ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
        {
            amountConfirmed = 0;
            amountRejected  = 0;

            while select forupdate specTrans
                where specTrans.SpecTableId == ledgerJournalTrans.TableId
                   && specTrans.SpecRecId   == ledgerJournalTrans.RecId
                   && specTrans.RefTableId  == tablenum(CustTransOpen)
            {
                switch (specTrans.PaymentStatus)
                {
                    case CustVendPaymStatus::Confirmed :
                        ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::Confirmed;
                        amountConfirmed += calcAmount();
                        break;

                    case CustVendPaymStatus::Rejected :
                        if (!ledgerJournalTransRejected.RecId)
                        {
                            ledgerJournalTransRejected.data(ledgerJournalTrans);
                            ledgerJournalTransRejected.PaymentStatus = CustVendPaymStatus::Rejected;
                            ledgerJournalTransRejected.AmountCurCredit = 0;
                            ledgerJournalTransRejected.AmountCurDebit = 0;
                            ledgerJournalTransRejected.LineNum = 0;
                            ledgerJournalTransRejected.insert();
                        }
                        specTrans.SpecRecId = ledgerJournalTransRejected.RecId;
                        specTrans.update();

                        amountRejected += calcAmount();
                        break;

                    default :
                }
            }
            if (amountConfirmed)
            {
                if (amountConfirmed < 0)
                {
                    ledgerJournalTrans.AmountCurDebit   = abs(amountConfirmed);
                    ledgerJournalTrans.AmountCurCredit  = 0;
                }
                else
                {
                    ledgerJournalTrans.AmountCurDebit   = 0;
                    ledgerJournalTrans.AmountCurCredit  = abs(amountConfirmed);
                }
                ledgerJournalTrans.update();
            }

            if (amountRejected)
            {
                if (amountRejected < 0)
                {
                    ledgerJournalTransRejected.AmountCurDebit   = abs(amountRejected);
                    ledgerJournalTransRejected.AmountCurCredit  = 0;
                }
                else
                {
                    ledgerJournalTransRejected.AmountCurDebit   = 0;
                    ledgerJournalTransRejected.AmountCurCredit  = abs(amountRejected);
                }
                //if there were no confirmed invoices
                if (!(ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Confirmed))
                {
                    ledgerJournalTrans.PaymentStatus    = CustVendPaymStatus::Rejected;
                    ledgerJournalTrans.AmountCurCredit  = ledgerJournalTransRejected.AmountCurCredit;
                    ledgerJournalTrans.AmountCurDebit   = ledgerJournalTransRejected.AmountCurDebit;
                    ledgerJournalTrans.update();
                    //move marked invoices back to original LedgerJournalTrans
                    while select forupdate specTrans
                        where   specTrans.SpecRecId     == ledgerJournalTransRejected.RecId
                            &&  specTrans.SpecTableId   == ledgerJournalTransRejected.TableId
                            &&  specTrans.SpecCompany   == ledgerJournalTransRejected.company()
                    {
                        specTrans.SpecRecId = ledgerJournalTrans.RecId;
                        specTrans.update();
                    }
                    ledgerJournalTransRejected.delete();
                }
                else
                {
                    ledgerJournalTransRejected.Voucher = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTable)).getNew(true);
                    ledgerJournalTransRejected.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the values entered by the user in the dialog.
    /// </summary>
    /// <param name="_calledFrom">
    ///    The object that calls the method.
    /// </param>
    /// <returns>
    ///    false if: 1. Import refunds option is selected but a journal name is not specified. 2. Import
    ///    refunds option is selected but no journal with the journal name specified exists. 3. Import refunds
    ///    option is selected but the journal name specified has fixed account option marked. Otherwise, true.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super();

        if (ret && importRefunds)
        {
            if (!journalNameId)
            {
                ret = checkFailed(strfmt("@SYS26332", "@SYS66089"));
            }
            else
            {
                ledgerJournalName = LedgerJournalName::find(journalNameId);

                if (!ledgerJournalName.RecId)
                {
                    ret = checkFailed(strfmt("@SYS22462", journalNameId));
                }
                else if (ledgerJournalName.FixedOffsetAccount)
                {
                    ret = checkFailed("@SYS320332");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return new CustPaymReconciliationImport_SE_BGAG().interfaceName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>