<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvReturnCashHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for expense module that provides utility methods to consume cash advance return expenses. Helps
/// with determining which cash advances records can be used for cash advance returns.
/// </summary>
class TrvReturnCashHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>featureBasedLookup</Name>
				<Source><![CDATA[
    private static void featureBasedLookup(SysTableLookup _lookup, boolean _isFeatureEnabled)
    {
        _lookup.addLookupfield(fieldnum(TrvCashAdvance, CashAdvanceNumber), true);

        if (_isFeatureEnabled)
        {
            _lookup.addLookupfield(fieldnum(TrvCashAdvance, PaidAmountMST));
            _lookup.addSelectionField(fieldNum(TrvCashAdvance, BalanceMST));
            _lookup.addLookupMethod(tableMethodStr(TrvCashAdvance,amountMSTAvailableToAllocate));
            _lookup.setLabel(strFmt("@Expense:CashAdvanceBalanceMST", CompanyInfoHelper::standardCurrency()));
        }
        else
        {
            _lookup.addLookupfield(fieldnum(TrvCashAdvance, PaidAmountCur));
            _lookup.addLookupfield(fieldnum(TrvCashAdvance, Balance));
            _lookup.addLookupfield(fieldnum(TrvCashAdvance, CurrencyCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCashAdvanceToReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup valid cash advances that can be returned for a given worker.
    /// </summary>
    /// <param name = "_formControl">Control on the form.</param>
    /// <param name = "_workerRecId">RecId of the worker.</param>
    public static void lookupCashAdvanceToReturn(FormControl _formControl, TrvHcmWorkerRecId _workerRecId = 0)
    {
        SysTableLookup          lookup = SysTableLookup::newParameters(tablenum(TrvCashAdvance), _formControl);
        Query                   query = new Query();
        QueryBuildDataSource    qbds;
        QueryBuildDataSource    qbdsTrvExpTrans;

        if (!_workerRecId)
        {
            _workerRecId = HcmWorker::userId2Worker(curuserid());
        }

        TrvReturnCashHelper::featureBasedLookup(lookup, TrvExpCashAdvanceMappingHelper::isCashAdvanceMappingFeatureEnabled());

        qbds = query.addDataSource(tablenum(TrvCashAdvance));

        qbds.addSortField(fieldnum(TrvCashAdvance, RequestedDate));
        qbds.addRange(fieldnum(TrvCashAdvance, RequestingWorker)).value(SysQuery::value(_workerRecId));
        qbds.addRange(fieldnum(TrvCashAdvance, Balance)).value('> 0');
        // Technically, restricting to 'paid' status is not required since balance will be 0 until it's paid.
        qbds.addRange(fieldnum(TrvCashAdvance, CashAdvanceStatus)).value(SysQuery::value(TrvWorkflowCashAdvanceStatus::Paid));

        qbdsTrvExpTrans = qbds.addDataSource(tableNum(TrvExpTrans));
        qbdsTrvExpTrans.joinMode(JoinMode::NoExistsJoin);
        qbdsTrvExpTrans.addLink(fieldNum(TrvCashAdvance, RecId), fieldNum(TrvExpTrans, CashAdvanceRecId));
        qbdsTrvExpTrans.addLink(fieldNum(TrvCashAdvance, Balance), fieldNum(TrvExpTrans, AmountCurr));

        FormDataSource control_ds = _formControl.dataSourceObject();
        TrvExpTrans activeExpense = control_ds.cursor() as TrvExpTrans;
                
        if (activeExpense)
        {
            // The query performs a no exists join with any advance attached to an already created expense. This logic will add a range for not the
            // currently active expense so that the advance attached to the ative expense will be seen in the dropdown.
            qbdsTrvExpTrans.addRange(fieldNum(TrvExpTrans, RecId)).value(SysQuery::valueNot(activeExpense.RecId));
        }

        qbdsTrvExpTrans.addRange(fieldNum(TrvExpTrans, ApprovalStatus)).value(SysQuery::valueNot(TrvAppStatus::Ledger));

        lookup.parmQuery(query);
        lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCashAdvanceToReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the oldest cash advance that can be returned for the worker.
    /// Sets the edit method field with the cash advance number if it finds one.
    /// </summary>
    /// <param name = "_trvExpTrans">Expense line.</param>
    public static void defaultCashAdvanceToReturn(TrvExpTrans _trvExpTrans)
    {
        TrvCashAdvance  trvCashAdvance;
        TrvExpTrans     trvExpTrans;

        if (_trvExpTrans.CreatingWorker)
        {
            select firstonly CashAdvanceNumber, Balance, RecId from trvCashAdvance 
                order by trvCashAdvance.RequestedDate
                    where trvCashAdvance.RequestingWorker == _trvExpTrans.CreatingWorker &&
                          trvCashAdvance.CashAdvanceStatus == TrvWorkflowCashAdvanceStatus::Paid &&
                          trvCashAdvance.Balance > 0
            notexists join trvExpTrans
                    where trvExpTrans.CashAdvanceRecId == trvCashAdvance.RecId
                        && trvExpTrans.AmountCurr == trvCashAdvance.Balance
						&& trvExpTrans.ApprovalStatus != TrvAppStatus::Ledger;

            if (trvCashAdvance.CashAdvanceNumber)
            {
                _trvExpTrans.cashAdvanceNumber(true, trvCashAdvance.CashAdvanceNumber);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCashAdvanceValidForReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the given cash advance can be returned by the worker.
    /// </summary>
    /// <param name = "_trvCashAdvanceNumber">Cash advance number that's being returned.</param>
    /// <param name = "_workerRecId">RecId of the worker.</param>
    /// <returns>True if valid; false otherwise.</returns>
    public static boolean isCashAdvanceValidForReturn(TrvCashAdvanceNumber _trvCashAdvanceNumber, TrvHcmWorkerRecId _workerRecId = 0)
    {
        TrvCashAdvance trvCashAdvance;

        if (!_workerRecId)
        {
            _workerRecId = HcmWorker::userId2Worker(curuserid());
        }

        select firstonly RequestingWorker, CashAdvanceStatus, Balance from trvCashAdvance
        where trvCashAdvance.CashAdvanceNumber == _trvCashAdvanceNumber;

        return trvCashAdvance.RequestingWorker == _workerRecId &&
               trvCashAdvance.CashAdvanceStatus == TrvWorkflowCashAdvanceStatus::Paid &&
               trvCashAdvance.Balance > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReturnCashAdvanceExpenses</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validate return cash advance expenses for an expense report.
    /// </summary>
    /// <param name = "_trvExpTableRecId">
    ///     Expense report record id.
    /// </param>
    /// <returns>
    ///     True if valid; false otherwise.
    /// </returns>
    public static boolean validateReturnCashAdvanceExpenses(RefRecId _trvExpTableRecId)
    {
        TrvExpTrans         trvExpTrans;
        TrvExpTrans         trvExpTransSum;
        TrvCashAdvance      trvCashAdvance;
        Set                 cashAdvanceRecIdSet = new Set(Types::Int64);
        SetEnumerator       cashAdvanceRecIdEnumerator;

        while select CashAdvanceRecId from trvExpTrans 
            where trvExpTrans.ExpType == TrvExpType::Advance
                && trvExpTrans.TrvExpTable == _trvExpTableRecId
        {
            if (!cashAdvanceRecIdSet.in(trvExpTrans.CashAdvanceRecId))
            {
                cashAdvanceRecIdSet.add(trvExpTrans.CashAdvanceRecId);
            }
        }
                
        cashAdvanceRecIdEnumerator = cashAdvanceRecIdSet.getEnumerator();

        while (cashAdvanceRecIdEnumerator.moveNext())
        {
            select sum(AmountCurr) from trvExpTransSum
                where trvExpTransSum.CashAdvanceRecId == cashAdvanceRecIdEnumerator.current()
					&& trvExpTransSum.ApprovalStatus != TrvAppStatus::Ledger;

            select Balance from trvCashAdvance 
                where trvCashAdvance.RecId == cashAdvanceRecIdEnumerator.current();

            if (trvExpTransSum.AmountCurr > trvCashAdvance.Balance)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>