<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ProdBOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class serves as a <c>FormCtrl</c> instance for the <c>ProdBOM</c> form.
/// </summary>
public class PmfFormCtrl_ProdBOM extends PmfFormCtrl
{
    boolean         calledFromFormula;
    boolean         pmfPercentChg;
    ProdTable       callerProdTable;
    ProdStatusType  prodStatusType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add Ranges to ProdBOM query
    /// </summary>
    private void addRanges()
    {
        QueryBuildRange qbr;

        qbr = formDS.query().dataSourceTable(tablenum(ProdBOM)).findRange(fieldnum(ProdBOM,ProdId));

        if (!qbr)
        {
            qbr = formDS.query().dataSourceTable(tablenum(ProdBOM)).addRange(fieldnum(ProdBOM, ProdId));
        }

        qbr.value(callerProdTable.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if form can be closed.
    /// </summary>
    /// <returns>
    /// True, if form can be closed; otherwise false.
    /// </returns>
    /// <remarks>
    /// The method will check to determine the prodBom belongs to a formula item.
    /// If the production order is for a formula item, the method to check to ensue
    /// that the formula percentage for all item on the production BOM equals 100
    /// percent.
    /// </remarks>
    public boolean canClose()
    {
        ProdBOM             pmfLocalBOM;
        QueryRun            pmfQRprodBOM;
        PmfFormulaPct       pmfTotalPercent;

        boolean             ret = true;
        boolean             pmfLoop = false;

        if (this.isFormulaEnabled() && pmfPercentChg)
        {
            pmfQRprodBOM = new QueryRun(formDS.query());
            pmfQRprodBOM.query().dataSourceTable(tablenum(ProdBOM)).addRange(fieldnum(ProdBOM,PmfPctEnable)).value(queryValue(NoYes::Yes));

            while (pmfQRprodBOM.next())
            {
                pmfLocalBOM     =  pmfQRprodBOM.get(tablenum(ProdBOM));
                pmfTotalPercent += pmfLocalBOM.PmfFormulaPct;

                if (!pmfLoop)
                {
                    pmfLoop = true;
                }
            }

            if (pmfLoop && pmfTotalPercent != 100)
            {
                ret = checkFailed("@PRO72");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form datasource after its active call.
    /// </summary>
    public void dataSourceActivePost()
    {
        ProdBOM prodBOM                 = buffer;
        boolean isFormulaLineCWEnabled  = PdsGlobal::pdsIsCWItem(prodBOM.ItemId);

        if (this.isFormulaEnabled())
        {
            if (!this.parmFormRun())
            {
                throw error(Error::wrongUseOfFunction(funcname()));
            }

            if (prodBOM.prodTable().ProdStatus == ProdStatus::Created
                || prodBOM.prodTable().ProdStatus == ProdStatus::CostEstimated)
            {
                formDS.object(fieldnum(ProdBOM,QtyBOMCalc)).allowEdit(!isFormulaLineCWEnabled);
                formDS.object(fieldnum(ProdBOM,QtyInventCalc)).allowEdit(!isFormulaLineCWEnabled);

                if (prodBOM.inventTable())
                {
                    formDS.object(fieldnum(ProdBOM,PdsCWInventCalc)).allowEdit(isFormulaLineCWEnabled);
                }
            }
            else
            {
                formDS.object(fieldnum(ProdBOM,QtyBOMCalc)).allowEdit(false);
                formDS.object(fieldnum(ProdBOM,QtyInventCalc)).allowEdit(false);
                formDS.object(fieldnum(ProdBOM,PdsCWInventCalc)).allowEdit(false);
            }

            formRun.design().caption(strfmt("@PRO171",callerProdTable.ProdId,callerProdTable.Name));
        }

        this.updateDesign(false);

        super();

        formButtonManager.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceCreatePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form datasource after its create call.
    /// </summary>
    /// <param name="_prodBOM">
    /// <c>ProdBOM</c> form datasource.
    /// </param>
    /// <remarks>
    /// Sets the value of the <c>BOMQtySeries</c> field based on a formula item
    /// production order production quantity.
    /// </remarks>
    public void dataSourceCreatePost(ProdBOM _prodBOM)
    {
        if (this.isFormulaEnabled())
        {
            if (callerProdTable.PdsCWBatchSched)
            {
                _prodBOM.bomQtySerie = callerProdTable.QtySched / callerProdTable.PdsCWBatchSched;
            }
            else
            {
            _prodBOM.bomQtySerie = callerProdTable.QtySched;
        }
    }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form datasource after its init call.
    /// </summary>
    /// <param name="_buffer">
    /// The form datasource.
    /// </param>
    /// <remarks>
    /// Adds an additional datasource ranges if the production is a formula item.
    /// </remarks>
    public void dataSourceInitPost(Common _buffer)
    {
        super(_buffer);

        if (this.isFormulaEnabled())
        {
            this.addRanges();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceLinkActivePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form datasource after its linkActive call.
    /// </summary>
    /// <remarks>
    /// Adds an additional datasource ranges if the production is a formula item.
    /// </remarks>
    public void dataSourceLinkActivePre()
    {
        Object          fr = formRun;

        this.setCaller(formRun.args().record());
        prodStatusType = callerProdTable.statusClient();

        if (callerProdTable)
        {
            this.addRanges();
        }

        if (this.isFormulaEnabled())
        {
            if (!this.parmFormRun())
            {
                throw error(Error::wrongUseOfFunction(funcname()));
            }

            fr.allowEdit(prodStatusType.bomAllowEdit());
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the field modified custom check followed by the standard check.
    /// </summary>
    /// <param name="_fieldId">
    /// The field being modified.
    /// </param>
    public void fieldModified(fieldId _fieldId)
    {
        ProdBOM prodBOM = buffer;

        switch (_fieldId)
        {
            case fieldnum(ProdBOM, PmfFormulaPct) :

                prodBOM.PmfQtyWithoutYield = prodBOM.pmfBOMPctQty();
                pmfPercentChg = true;
                break;

            case fieldnum(ProdBOM, PmfPctEnable) :

                if (!prodBOM.PmfPctEnable)
                {
                    prodBOM.PmfFormulaPct = 0;
                }
                else
                {
                    prodBOM.PmfQtyWithoutYield = prodBOM.pmfBOMPctQty();
                    prodBOM.PmfScalable = NoYes::Yes;
                }
                break;

            case fieldNum(ProdBOM,Formula):
                prodBOM.defaultFormula();
                this.updateDesign(false);
                break;
        }

        super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the field validation custom validation followed by the standard validation.
    /// </summary>
    /// <param name="_fieldId">
    /// The field being validated.
    /// </param>
    /// <returns>
    /// True, if the field value is valid, otherwise false.
    /// </returns>
    public boolean fieldValidate(fieldId _fieldId)
    {
        boolean ret;
        ProdBOM prodBOM = buffer;

        ret = super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(ProdBOM, bomQty) :
                if (ret && this.isFormulaEnabled() && !PdsGlobal::pdsIsCWItem(prodBOM.ItemId))
                {
                    InventMovement::setMinMaxQty(prodBOM);

                    if (prodBOM.QtyBOMCalc != prodBOM.orig().QtyBOMCalc)
                    {
                        prodBOM.bomQty = prodBOM.QtyBOMCalc;
                    }
                }
                break;

            case fieldnum(ProdBOM, PmfQtyWithoutYield) :
                if (ret && this.isFormulaEnabled() && !PdsGlobal::pdsIsCWItem(prodBOM.ItemId))
                {
                    prodBOM.QtyBOMCalc = prodBOM.PmfQtyWithoutYield;

                    InventMovement::setMinMaxQty(prodBOM);

                    if (prodBOM.QtyBOMCalc != prodBOM.orig().QtyBOMCalc)
                    {
                        prodBOM.PmfQtyWithoutYield = prodBOM.QtyBOMCalc;
                        prodBOM.bomQty = prodBOM.PmfQtyWithoutYield;
                        prodBOM.QtyBOMCalc = 0;
                    }
                }
                break;

            case fieldnum(ProdBOM, ItemId) :
                if (ret && !this.isFormulaEnabled() && PdsGlobal::pdsIsCWItem(prodBOM.ItemId))
                {
                    ret = checkFailed("@PDS138");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isFormulaEnabled())
        {
            this.parmFormRun().design().caption(strfmt(
                "@PRO171",callerProdTable.ProdId,callerProdTable.Name));
            this.parmFormRun().design().titleDatasource('');
        }

        if (this.isCatchWeightEnabled())
        {
            this.registerPdsCatchWeightCtrlRules();
        }

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }

        if (#PDSPotencyEnabled())
        {
            this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdBOM,ProdBOM_PDSIngredientType)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdBOM,Project)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaDisabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdBOM,ProjectUnder)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaDisabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,Identification)),
                formRun.design().controlName(formControlStr(ProdBOM,ProdId)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                enum2str(PmfOrderType::ProcessBatch));

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,Identification)),
                formRun.design().controlName(formControlStr(ProdBOM,ProdId)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::HelpText,
                "@PDS1471");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdBOM,BOM)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Caption,
                "@PRO119");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdBOM,BOMQuantity)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Caption,
                "@PRO120");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,Grid)),
                formRun.design().controlName(formControlStr(ProdBOM,ProdBOM_PmfScalable)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,Grid)),
                formRun.design().controlName(formControlStr(ProdBOM,ProdBOM_PmfFormulaPct)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,Grid)),
                formRun.design().controlName(formControlStr(ProdBOM,ProdBOM_PmfQtyWithoutYield)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,Grid)),
                formRun.design().controlName(formControlStr(ProdBOM,ProdBOM_BOMQty)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaDisabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,ConsumptionCalculation)),
                formRun.design().controlName(formControlStr(ProdBOM,ConsumptionCalculation_PmfQtyWithoutYield)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,ConsumptionCalculation)),
                formRun.design().controlName(formControlStr(ProdBOM,ConsumptionCalculation_BOMQty)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaDisabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,ConsumptionCalculation)),
                formRun.design().controlName(formControlStr(ProdBOM,ConsumptionCalculation_Formula)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaDisabled),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,Grid)),
                formRun.design().controlName(formControlStr(ProdBOM,ProdBOM_BOMQtySerie)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaDisabled),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,ConsumptionCalculation)),
                formRun.design().controlName(formControlStr(ProdBOM,ConsumptionCalculation_BOMQtySerie)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaDisabled),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdBOM,PdsBatchAttribReserve)),
                methodstr(PmfFormCtrl_ProdBOM, isBatchEnabled),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdBOM,ProdBOM_PmfPctEnable)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPdsCatchWeightCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPdsCatchWeightCtrlRules()
    {
        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,Grid)),
                formRun.design().controlName(formControlStr(ProdBOM,ProdBOM_PdsCWQty)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,Grid)),
                formRun.design().controlName(formControlStr(ProdBOM,ProdBOM_PdsCWUnitId)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,ConsumptionCalculation)),
                formRun.design().controlName(formControlStr(ProdBOM,ConsumptionCalculation_PdsCWQty)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,ConsumptionCalculation)),
                formRun.design().controlName(formControlStr(ProdBOM,ConsumptionCalculation_M_PdsCWUnitId)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,BOMQuantity)),
                formRun.design().controlName(formControlStr(ProdBOM,BOMQuantity_PdsCWRemainFinancial)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,InventoryQuantity)),
                formRun.design().controlName(formControlStr(ProdBOM,InventoryQuantity_PdsCWInventCalc)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,InventoryQuantity)),
                formRun.design().controlName(formControlStr(ProdBOM,InventoryQuantity_PdsCWInventStup)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,InventoryQuantity)),
                formRun.design().controlName(formControlStr(ProdBOM,InventoryQuantity_PdsCWRemainPhysical)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,Grid)),
                formRun.design().controlName(formControlStr(ProdBOM,ProdBOM_PdsCWBOMCalc)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,Grid)),
                formRun.design().controlName(formControlStr(ProdBOM,ProdBOM_PdsCWRemainPhysical)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,Grid)),
                formRun.design().controlName(formControlStr(ProdBOM,InventoryQuantity_PdsCWRemainPhysical)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaCWEnabled),
                ButtonRuleEffectType::AllowEdit);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,Grid)),
                formRun.design().controlName(formControlStr(ProdBOM,ProdBOM_PdsCWBomStup)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,Grid)),
                formRun.design().controlName(formControlStr(ProdBOM,ProdBOM_PdsCWRemainFinancial)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,Grid)),
                formRun.design().controlName(formControlStr(ProdBOM,BOMQuantity_PdsCWRemainFinancial)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaCWEnabled),
                ButtonRuleEffectType::AllowEdit);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdBOM,Grid)),
                formRun.design().controlName(formControlStr(ProdBOM,ProdBOM_PdsCWUnitId2)),
                methodstr(PmfFormCtrl_ProdBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event method to call before executing the standard code in form event <c>init</c>.
    /// </summary>
    public void initPre()
    {
        if (!this.parmFormRun())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        this.setCaller(formRun.args().record());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>InventBatchId</c> inventory dimension enabled.
    /// </summary>
    /// <returns>
    /// true if the <c>InventBatchId</c> inventory dimension is enabled, otherwise false.
    /// </returns>
    public NoYes isBatchEnabled()
    {
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;
        EcoResTrackingDimensionGroupFldSetup    dimSetup;
        ProdBOM                                 prodBOM;

        if (buffer.TableId == tablenum(ProdBOM))
        {
            prodBOM = buffer;

            dimSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(
                        prodBOM.inventTable().trackingDimensionGroup(),
                        fieldnum(InventDim, InventBatchId));
            inventDimGroupFieldSetup = InventDimGroupFieldSetup::newEcoResTrackingDimensionGroupFldSetup(dimSetup);

            return inventDimGroupFieldSetup.isActive();
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaCWEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the catch weigth item is formula enabled.
    /// </summary>
    /// <returns>
    /// True if formula enabled, otherwise false.
    /// </returns>
    private boolean isFormulaCWEnabled()
    {
        return this.isFormulaEnabled() && PdsGlobal::pdsIsCWItem(callerProdTable.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the item is not formula enabled.
    /// </summary>
    /// <returns>
    /// True if not formula enabled, otherwise false.
    /// </returns>
    public NoYes isFormulaDisabled()
    {
        return !this.isFormulaEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the item formula is enabled.
    /// </summary>
    /// <returns>
    /// True if formula enabled, otherwise false.
    /// </returns>
    public NoYes isFormulaEnabled()
    {
        return #PmfEnabled && calledFromFormula;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// The object is created
    /// </summary>
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the callerProdTable variable using the calling buffer.
    /// </summary>
    /// <param name="_buffer">
    /// The record that the caller passes to the form control.
    /// </param>
    public void setCaller(Common _buffer)
    {
        ReqTrans  reqTrans;

        calledFromFormula = false;

        switch (_buffer.TableId)
        {
            case tablenum(ProdTable):
                callerProdTable     = _buffer;
                calledFromFormula   = callerProdTable.ProdType == ProdType::Process;
                break;
            case tablenum(ReqTrans):
                reqTrans = _buffer;
                if (reqTrans.RefType == ReqRefType::Production)
                {
                    callerProdTable     = ProdTable::find(reqTrans.RefId);
                    calledFromFormula   = callerProdTable.ProdType == ProdType::Process;
                }
                break;
        }

        calledFromFormula = calledFromFormula
            || this.menuItemName() == menuitemdisplaystr(PmfProdFormula)
            || (this.caller()
                && this.caller().name() == formstr(ProdTable)
                && this.caller().pmfIsEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// Form Data source used by class - ProdBOM
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// Default value - null.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(ProdBOM))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form design.
    /// </summary>
    /// <param name="_withReread">
    /// A Boolean value that determines whether to re-read the data source.
    /// </param>
    public void updateDesign(boolean _withReread = true)
    {
        ProdBOM prodBom                 = buffer;
        boolean isStep                  = prodBOM.Formula == BOMFormula::Formula5;
        boolean isFormulaLineCWEnabled  = PdsGlobal::pdsIsCWItem(prodBOM.ItemId);
        boolean normalIngredient        = true;

        super();

        if (this.isFormulaEnabled())
        {
            if (#PDSPotencyEnabled)
            {
                normalIngredient = prodBOM.PDSIngredientType == PDSIngredientTypeEnum::None;

                this.enableDSField(fieldNum(ProdBOM, Reservation), normalIngredient);
                this.enableDSField(fieldNum(ProdBOM, ProdFlushingPrincip), normalIngredient);
                this.enableDSField(fieldNum(ProdBOM, PDSIngredientType), prodBom.prodTable().ProdStatus == ProdStatus::Created);
            }

            this.enableDSField(fieldnum(ProdBOM, PdsCWQty), !isStep && isFormulaLineCWEnabled);
            this.enableDSField(fieldnum(ProdBOM, bomQty), !isStep && !isFormulaLineCWEnabled);
            this.enableDSField(fieldnum(ProdBOM, PmfPctEnable), !isStep);
            this.enableDSField(fieldnum(ProdBOM, PmfFormulaPct), !isStep);
            this.enableDSField(fieldnum(ProdBOM, PmfScalable), !isStep);
            this.enableDSField(fieldnum(ProdBOM, BOMConsump), !isStep && normalIngredient);
            this.enableDSField(fieldNum(ProdBOM, Formula), true);
            this.enableDSField(fieldNum(ProdBOM, RoundUpQty), !isStep);
            this.enableDSField(fieldNum(ProdBOM, PmfQtyWithoutYield), !isStep && !isFormulaLineCWEnabled);
        }

        if (_withReread)
        {
            this.parmFormDataSource(FormDataUtil::getFormDataSource(buffer)).reread();
        }
        this.parmFormDataSource(FormDataUtil::getFormDataSource(buffer)).refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PmfFormCtrl_ProdBOM</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PmfFormCtrl_ProdBOM</c> class.
    /// </returns>
    public static PmfFormCtrl_ProdBOM construct()
    {
        return new PmfFormCtrl_ProdBOM();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a new class derived from <c>PmfFormCtrl_ProdBOM</c>.
    /// </summary>
    /// <param name="_fr">
    /// FormRun Object of caller
    /// </param>
    /// <returns>
    /// An instance of class <c>PmfFormCtrl_ProdBOM</c>.
    /// </returns>
    public static PmfFormCtrl_ProdBOM newFromForm(
        FormRun _fr)
    {
        PmfFormCtrl_ProdBOM frmCtrl;
        PmfFormCtrl_ProdFormula pmfFormCtrl;
        PdsCWFormCtrl           cwFormCtrl;

        frmCtrl = PmfFormCtrl_ProdBOM::construct();
        frmCtrl.parmFormRun(_fr);
        pmfFormCtrl = PmfFormCtrl_ProdFormula::constructFromForm(_fr);
        frmCtrl.addSubFormCtrl(pmfFormCtrl);

        if (#PdsCatchWeightEnabled)
        {
            cwFormCtrl = PdsCWFormCtrl::constructFromForm(_fr);
            cwFormCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
                [[fieldnum(ProdBOM, QtyBOMCalc),
                  fieldnum(ProdBOM, PdsCWInventCalc),
                  false,
                  fieldnum(ProdBOM, UnitId)]]));
            cwFormCtrl.parmItemFieldId(fieldnum(ProdBOM, ItemId));
            cwFormCtrl.parmUnitMethodStr(tableMethodStr(ProdBOM, PdsCWUnitId));
            frmCtrl.addSubFormCtrl(cwFormCtrl);
        }

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>