<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdingGlobalFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;

/// <summary>
/// The <c>TaxWithholdingGlobalFeature</c> class represents Withholding Tax feature for all the countries for integration with Feature Management.
/// </summary>
[Export(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
internal final class TaxWithholdingGlobalFeature extends TaxWithholdFeatureMetaDataBase implements IFeatureMetadata, IFeatureMetadataEnablementNotifiable, IFeatureLifecycle
{
    #ISOCountryRegionCodes

    private static TaxWithholdingGlobalFeature instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        instance = new TaxWithholdingGlobalFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the singleton object instance.
    /// </summary>
    /// <returns>An <c>TaxWithholdingGlobalFeature</c> instance.</returns>
    [Hookable(false)]
    public static TaxWithholdingGlobalFeature instance()
    {
        return TaxWithholdingGlobalFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@Tax_WithholdTax:WithholdingTaxGlobalFeatureLabel");
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@Tax_WithholdTax:WithholdingTaxGlobalFeatureSummary");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return 'https://go.microsoft.com/fwlink/?linkid=2150046';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::Released;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onEnabled()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onDisabled()
    {
        ttsbegin;

        DataArea dataArea;
        while select id from dataArea where dataArea.isVirtual == NoYes::No
        {
            changecompany(dataArea.id)
            {
                if (!TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionByDefault())
                {
                    LedgerParameters ledgerParameters = LedgerParameters::find(true);

                    if (ledgerParameters.GlobalWithholdingTax == NoYes::Yes)
                    {
                        ledgerParameters.GlobalWithholdingTax = NoYes::No;
                        ledgerParameters.EnableWHTOnCharges = NoYes::No;
                        ledgerParameters.update();
                    }
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExtendedWHTSupportedInCountryRegionByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if extended withholding tax functionality is originally supported by the current country.
    /// </summary>
    /// <returns>True, if extended withholding tax functionality is originally supported by the current country; otherwise, false.</returns>
    [Hookable(false)]
    public static boolean isExtendedWHTSupportedInCountryRegionByDefault()
    {
        const container WHTExtendedDefaultCountries = [#isoTH, #isoSA, #isoGB, #isoIE];

        return SysCountryRegionCode::isLegalEntityInCountryRegion(WHTExtendedDefaultCountries);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemWHTSupportedInCountryRegionByDefault</Name>
				<Source><![CDATA[
    private static boolean isItemWHTSupportedInCountryRegionByDefault()
    {
        const container ItemWHTDefaultCountries = [#isoTH, #isoSA, #isoGB, #isoIE, #isoBR];

        return SysCountryRegionCode::isLegalEntityInCountryRegion(ItemWHTDefaultCountries);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRevenueTypesWHTSupportedInCountryRegionByDefault</Name>
				<Source><![CDATA[
    private static boolean isRevenueTypesWHTSupportedInCountryRegionByDefault()
    {
        const container RevenueTypesWHTDefaultCountries = [#isoTH, #isoSA];

        return SysCountryRegionCode::isLegalEntityInCountryRegion(RevenueTypesWHTDefaultCountries);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldBlockShowingGLWithholdingTaxTab</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if GL parameters withholding tax tab should not be shown for the current country.
    /// </summary>
    /// <returns>True, if GL parameters withholding tax tab should not be shown for the current country; otherwise, false.</returns>
    [Hookable(false)]
    public static boolean shouldBlockShowingGLWithholdingTaxTab()
    {
        const container GLWithholdingTaxTabStopList = [#isoIN, #isoBR, #isoUS];

        return SysCountryRegionCode::isLegalEntityInCountryRegion(GLWithholdingTaxTabStopList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFeatureAndParamEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the feature is enabled and GL parameter is enabled.
    /// </summary>
    /// <returns>True, if the feature is enabled and GL parameter is enabled; otherwise, false.</returns>
    [Hookable(false)]
    public static boolean isFeatureAndParamEnabled()
    {
        return Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.FeatureStateProvider::isFeatureEnabled(TaxWithholdingGlobalFeature::instance())
            && LedgerParameters::find().GlobalWithholdingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExtendedWHTSupportedInCountryRegionOrParamEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if withholding tax functionality is originally supported by the current country or the feature is enabled and GL parameter is enabled.
    /// </summary>
    /// <returns>True, if withholding tax functionality is originally supported by the current country or the feature is enabled and GL parameter is enabled; otherwise, false.</returns>
    [Hookable(false)]
    public static boolean isExtendedWHTSupportedInCountryRegionOrParamEnabled()
    {
        return TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionByDefault()
            || TaxWithholdingGlobalFeature::isFeatureAndParamEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemWHTSupportedInCountryRegionOrParamEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if item withholding tax groups functionality is originally supported by the current country or the feature is enabled and GL parameter is enabled.
    /// </summary>
    /// <returns>True, if item withholding tax groups functionality is originally supported by the current country or the feature is enabled and GL parameter is enabled; otherwise, false.</returns>
    [Hookable(false)]
    public static boolean isItemWHTSupportedInCountryRegionOrParamEnabled()
    {
        return TaxWithholdingGlobalFeature::isItemWHTSupportedInCountryRegionByDefault()
            || TaxWithholdingGlobalFeature::isFeatureAndParamEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRevenueTypesWHTSupportedInCountryRegionOrParamEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if item withholding tax revenue types functionality is originally supported by the current country or the feature is enabled and GL parameter is enabled.
    /// </summary>
    /// <returns>True, if withholding tax revenue types functionality is originally supported by the current country or the feature is enabled and GL parameter is enabled; otherwise, false.</returns>
    [Hookable(false)]
    public static boolean isRevenueTypesWHTSupportedInCountryRegionOrParamEnabled()
    {
        return TaxWithholdingGlobalFeature::isRevenueTypesWHTSupportedInCountryRegionByDefault()
            || TaxWithholdingGlobalFeature::isFeatureAndParamEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalcWHTInInvoiceEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isCalcWHTInInvoiceEnabled()
    {
        return TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled()
            && TaxWithholdParameters::find().EnableCalcWHTInInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalcWHTInInvoiceWithChargeEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isCalcWHTInInvoiceWithChargeEnabled()
    {
        return TaxWithholdingGlobalFeature::isFeatureAndParamEnabled()
            && LedgerParameters::find().EnableWHTOnCharges
            && TaxWithholdParameters::find().EnableCalcWHTInInvoice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>