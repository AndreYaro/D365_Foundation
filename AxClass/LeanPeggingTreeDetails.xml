<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanPeggingTreeDetails</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanPeggingTreeDetails</c> class implements the logic that maintains a
///    <c>ReqPeggingTreeNodeDetails</c> record based on various instances of the <c>ReqPeggingTreeNode</c>
///    class.
/// </summary>
public class LeanPeggingTreeDetails extends ReqPeggingTreeDetails
{
    ReqPeggingTreeNodeDetails   reqPeggingTreeNodeDetails;
    ReqPeggingTreeNode          firstKanbanSubNode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the context from a <c>Kanban</c> buffer.
    /// </summary>
    /// <param name="_kanban">
    /// The buffer to initialize from.
    /// </param>
    public void initFromKanban(Kanban _kanban)
    {
        super(_kanban);

        reqPeggingTreeNodeDetails.KanbanId          = _kanban.KanbanId;
        reqPeggingTreeNodeDetails.ItemId            = _kanban.ItemId;
        reqPeggingTreeNodeDetails.IssueDateTime     = _kanban.DueDateTime;
        reqPeggingTreeNodeDetails.Qty               = _kanban.QuantityOrdered;
        reqPeggingTreeNodeDetails.StatusString      = enum2str(_kanban.Status);
        reqPeggingTreeNodeDetails.Kanban            = _kanban.RecId;
        reqPeggingTreeNodeDetails.InventDimId       = _kanban.InventDimId;
        reqPeggingTreeNodeDetails.Unit              = _kanban.inventTable().inventUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the context from a <c>KanbanJob</c> buffer.
    /// </summary>
    /// <param name="_kanbanJob">
    /// The buffer to initialize from.
    /// </param>
    private void initFromKanbanJob(KanbanJob _kanbanJob)
    {
        Kanban kanban = _kanbanJob.kanban();

        reqPeggingTreeNodeDetails.KanbanId          = kanban.KanbanId;
        reqPeggingTreeNodeDetails.ItemId            = kanban.ItemId;
        reqPeggingTreeNodeDetails.IssueDateTime     = _kanbanJob.DueDateTime;
        reqPeggingTreeNodeDetails.Qty               = _kanbanJob.QuantityOrdered;
        reqPeggingTreeNodeDetails.StatusString      = enum2str(kanban.Status);
        reqPeggingTreeNodeDetails.Kanban            = _kanbanJob.Kanban;
        reqPeggingTreeNodeDetails.InventDimId       = _kanbanJob.InventDimId;
        reqPeggingTreeNodeDetails.Unit              = kanban.inventTable().inventUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromKanbanJobIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the context from a <c>KanbanJobIssue</c> buffer.
    /// </summary>
    /// <param name="_kanbanJobIssue">
    /// The buffer to initialize from.
    /// </param>
    public void initFromKanbanJobIssue(KanbanJobIssue _kanbanJobIssue)
    {
        super(_kanbanJobIssue);

        this.initFromKanbanJob(KanbanJob::find(_kanbanJobIssue.KanbanJob));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromKanbanJobPickList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the context from a <c>KanbanJobPickingList</c> buffer.
    /// </summary>
    /// <param name="_kanbanJobPickingList">
    /// The buffer to initialize from.
    /// </param>
    public void initFromKanbanJobPickList(KanbanJobPickingList _kanbanJobPickingList)
    {
        Kanban kanban = _kanbanJobPickingList.kanban();

        super(_kanbanJobPickingList);

        reqPeggingTreeNodeDetails.KanbanId          = kanban.KanbanId;
        reqPeggingTreeNodeDetails.ItemId            = _kanbanJobPickingList.ItemId;
        reqPeggingTreeNodeDetails.IssueDateTime     = _kanbanJobPickingList.MaterialDateTime;
        reqPeggingTreeNodeDetails.Qty               = _kanbanJobPickingList.Quantity;
        reqPeggingTreeNodeDetails.StatusString      = enum2str(kanban.Status);
        reqPeggingTreeNodeDetails.Kanban            = kanban.RecId;
        reqPeggingTreeNodeDetails.InventDimId       = _kanbanJobPickingList.InventDimId;
        reqPeggingTreeNodeDetails.Unit              = _kanbanJobPickingList.inventTable().inventUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the context from a <c>SalesLine</c> buffer.
    /// </summary>
    /// <param name="_salesLine">
    /// The buffer to initialize from.
    /// </param>
    public void initFromSalesLine(SalesLine _salesLine)
    {
        date issueDate = (_salesLine.ShippingDateConfirmed == dateNull()) ?
                                                    _salesLine.ShippingDateConfirmed
                                                    :
                                                    _salesLine.ShippingDateRequested;

        super(_salesLine);

        reqPeggingTreeNodeDetails.SalesId           = _salesLine.SalesId;
        reqPeggingTreeNodeDetails.InventTransId     = _salesLine.InventTransId;
        reqPeggingTreeNodeDetails.ItemId            = _salesLine.ItemId;
        reqPeggingTreeNodeDetails.IssueDateTime     = DateTimeUtil::newDateTime(issueDate, 0);
        reqPeggingTreeNodeDetails.Qty               = _salesLine.QtyOrdered;
        reqPeggingTreeNodeDetails.StatusString      = enum2str(_salesLine.SalesStatus);
        reqPeggingTreeNodeDetails.InventDimId       = _salesLine.InventDimId;
        reqPeggingTreeNodeDetails.Unit              = _salesLine.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the context from a <c>SalesTable</c> buffer.
    /// </summary>
    /// <param name="_salesTable">
    /// The buffer to initialize from.
    /// </param>
    public void initFromSalesOrder(SalesTable _salesTable)
    {
        super(_salesTable);

        reqPeggingTreeNodeDetails.SalesId           = _salesTable.SalesId;
        reqPeggingTreeNodeDetails.IssueDateTime     = DateTimeUtil::newDateTime(_salesTable.Deadline, 0);
        reqPeggingTreeNodeDetails.StatusString      = enum2str(_salesTable.SalesStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the fields that come from the <c>ReqPeggingTreeNode</c> or its root.
    /// </summary>
    public void initializeFromNode()
    {
        ReqPeggingTreeNode rootNode = this.parmPeggingTree().rootNode(treeNode);
        LeanPeggingTreeKanbanFinder finder = LeanPeggingTreeKanbanFinder::newStandard(this.parmPeggingTree(), this.parmTreeNode());

        // find the first subnode of type Kanban
        finder.run();
        firstKanbanSubNode = finder.parmFoundNode();

        // initialize header fields
        reqPeggingTreeNodeDetails.SourceDocumentId  = rootNode.sourceDocNumber();
        reqPeggingTreeNodeDetails.SourceDocumentLineType = rootNode.eventType();

        // the current node event type
        reqPeggingTreeNodeDetails.KanbanEventType   = treeNode.eventType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new(ReqPeggingTreeNode _treeNode)
    {
        super(_treeNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFirstKanbanSubNode</Name>
				<Source><![CDATA[
        public ReqPeggingTreeNode parmFirstKanbanSubNode(ReqPeggingTreeNode _firstKanbanSubNode = firstKanbanSubNode)
    {
        firstKanbanSubNode = _firstKanbanSubNode;

        return firstKanbanSubNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPeggingTreeNodeDetails</Name>
				<Source><![CDATA[
        public ReqPeggingTreeNodeDetails parmReqPeggingTreeNodeDetails(ReqPeggingTreeNodeDetails _reqPeggingTreeNodeDetails = reqPeggingTreeNodeDetails)
    {
        reqPeggingTreeNodeDetails = _reqPeggingTreeNodeDetails;

        return reqPeggingTreeNodeDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new details context for the specified node.
    /// </summary>
    /// <param name="_tree">
    /// The pegging tree that owns the current node.
    /// </param>
    /// <param name="_treeNode">
    /// The tree node for which details will be created.
    /// </param>
    /// <param name="_reqPeggingTreeNodeDetails">
    /// The buffer that holds the detailed information requested.
    /// </param>
    /// <returns>
    /// A <c>LeanPeggingTreeDetails</c> instance.
    /// </returns>
    public static LeanPeggingTreeDetails newStandard(ReqPeggingTree _tree,
                                                        ReqPeggingTreeNode _treeNode,
                                                        ReqPeggingTreeNodeDetails _reqPeggingTreeNodeDetails)
    {
        LeanPeggingTreeDetails details = new LeanPeggingTreeDetails(_treeNode);

        details.parmPeggingTree(_tree);
        details.parmReqPeggingTreeNodeDetails(_reqPeggingTreeNodeDetails);

        details.initializeFromNode();
        _treeNode.initializeDetails(details);

        return details;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>