<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayHRMPivotReportEngine_TblTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
#RpayTblConstants
class rPayHRMPivotReportEngine_TblTrans extends RPayHRMPivotReportEngine implements BatchRetryable
{
    TransDate                 startDate, corStartDate, tblStartDate;
    TransDate                 endDate, corEndDate, tblEndDate;

    DialogField               dfStartDate, dfCorStartDate, dfTblStartDate;
    DialogField               dfEndDate, dfCorEndDate, dfTblEndDate;

    RPayTblDayHourTrans rPayTblDayHourTrans;
    RPayTblJournal      rPayTblJournal;
    RPayTblTrans        rPayTblTrans;
    RHRMEmplTable       emplTable;

    DirPartyName        emplName;

    //cached data
    Map                       organizationMap;
    Map                       timeCodeMap;

    #DEFINE.EmplId("EmplId")
    #DEFINE.EmplName("EmplName")
    #DEFINE.OrganizationId("OrganizationId")
    #DEFINE.OrganizationName("OrganizationName")
    #DEFINE.MthDate("MthDate")
    #DEFINE.TimeCodeId("TimeCodeId")
    #DEFINE.TimeCodeName("TimeCodeName")
    #DEFINE.TblNum("TblNum")
    #DEFINE.QtyHour("QtyHour")
    #DEFINE.CalendarId("CalendarId")
    #DEFINE.ReportingPeriod("ReportingPeriod")
    #DEFINE.PaymentPeriod("PaymentPeriod")
    #DEFINE.CorrectedPeriod("CorrectedPeriod")

    #DEFINE.EnumStrLen(100)

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        startDate,
        endDate,
        corStartDate,
        corEndDate,
        tblStartDate,
        tblEndDate,
        conNameCodeFieldsSettings
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildData</Name>
				<Source><![CDATA[
    protected void buildData()
    {
        boolean byDayOnly;

        this.updateQuery(queryRun.query());

        byDayOnly = this.isQueryHasByDayFilter(queryRun.query()) || endDate != endmth(endDate) || startDate != dateStartMth(startDate);

        this.progressInit("@SYS60116",0, #AviTransfer);
        progress.setTotal(SysQuery::countTotal(queryRun));

        pivotTableData.rsOpen();

        while (queryRun.next())
        {
            emplTable           = queryRun.get(tableNum(RHRMEmplTable));
            rPayTblTrans        = queryRun.get(tableNum(RPayTblTrans));
            rPayTblDayHourTrans = queryRun.get(tableNum(RPayTblDayHourTrans));
            rPayTblJournal      = queryRun.get(tableNum(RPayTblJournal));

            emplName = emplTable.name();

            progress.setText(strFmt("@RUP1998", emplName));
            progress.incCount();

            switch (rPayTblJournal.PayTblType)
            {
                case RPayTblType::EveryDay:
                    this.handleDayTbl();
                    break;

                case RPayTblType::Itog:
                    if (!byDayOnly)
                    {
                        this.handleTotalTbl();
                    }
                    break;
            }
        }

        pivotTableData.rsUpdateBatch();

        this.progressHide();
        this.progressKill();

        if (byDayOnly)
        {
            info("@RUP6225");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        ;
        return "@SYS716";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog;

        dialog = super() as DialogRunbase;
        dialog.caption(this.caption());

        dialog.addGroup("@RUP393");
        dfStartDate = dialog.addFieldValue(extendedTypeStr(TransDate), startDate, "@SYS2168");
        dfEndDate   = dialog.addFieldValue(extendedTypeStr(TransDate), endDate, "@SYS22882");

        dialog.addGroup("@GLS111794");
        dfCorStartDate = dialog.addFieldValue(extendedTypeStr(TransDate), corStartDate, "@SYS2168");
        dfCorEndDate   = dialog.addFieldValue(extendedTypeStr(TransDate), corEndDate, "@SYS22882");

        dialog.addGroup("@RUP1123");
        dfTblStartDate = dialog.addFieldValue(extendedTypeStr(TransDate), corStartDate, "@SYS2168");
        dfTblEndDate   = dialog.addFieldValue(extendedTypeStr(TransDate), corEndDate, "@SYS22882");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            pivotTableMetaData.updateCodeNameSettingsFromTable();
            startDate = dfStartDate.value();
            endDate   = dfEndDate.value();
            corStartDate = dfCorStartDate.value();
            corEndDate   = dfCorEndDate.value();
            tblStartDate = dfTblStartDate.value();
            tblEndDate   = dfTblEndDate.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleDayTbl</Name>
				<Source><![CDATA[
    private void handleDayTbl()
    {
        Map                 dataMap;
        TransDate           transDate;
        FieldId             fieldId;

        for (transDate = max(dateStartMth(rPayTblTrans.SourceDate), startDate); transDate <= min(endmth(rPayTblTrans.SourceDate), endDate); transDate++)
        {
            fieldId = fieldName2id(tableNum(RPayTblDayHourTrans),#DayHourTransFieldPrefix + int2str(dayOfMth(transDate)));

            if (rPayTblDayHourTrans.(fieldId))
            {
                dataMap =  new Map(Types::String, Types::Container);

                dataMap.insert(#EmplId,            [emplTable.EmployeeId]);
                dataMap.insert(#EmplName,          [emplName]);
                dataMap.insert(#OrganizationId,    [rPayTblJournal.HrmOrganizationId]);
                dataMap.insert(#OrganizationName,  [this.organizationName(rPayTblJournal.HrmOrganizationId)]);
                dataMap.insert(#CalendarId,        [rPayTblTrans.PayCalendarId]);
                dataMap.insert(#mthDate,           [transDate]);
                dataMap.insert(#TimeCodeId,        [rPayTblDayHourTrans.PayTblTimeCode]);
                dataMap.insert(#TimeCodeName,      [this.timeCodeName(rPayTblJournal.PayFormType, rPayTblDayHourTrans.PayTblTimeCode)]);
                dataMap.insert(#QtyHour,           [rPayTblDayHourTrans.(fieldId)]);
                dataMap.insert(#TblNum,            [rPayTblJournal.TblNum]);
                dataMap.insert(#ReportingPeriod,   [rPayTblJournal.TblDate]);
                dataMap.insert(#PaymentPeriod,     [rPayTblTrans.SourceDate]);
                dataMap.insert(#CorrectedPeriod,   [rPayTblTrans.CorrectedPeriod]);

                pivotTableData.insertRecord(dataMap);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleTotalTbl</Name>
				<Source><![CDATA[
    private void handleTotalTbl()
    {
        RPayCalendarTimeTrans timeTrans;
        Map                 dataMap;

        dataMap =  new Map(Types::String, Types::Container);

        while select timeTrans
            where timeTrans.TblTransRecId == rPayTblTrans.RecId
        {
            dataMap.insert(#EmplId,            [emplTable.EmployeeId]);
            dataMap.insert(#EmplName,          [emplName]);
            dataMap.insert(#OrganizationId,    [rPayTblJournal.HrmOrganizationId]);
            dataMap.insert(#OrganizationName,  [this.organizationName(rPayTblJournal.HrmOrganizationId)]);
            dataMap.insert(#CalendarId,        [rPayTblTrans.PayCalendarId]);
            dataMap.insert(#mthDate,           [dateNull()]);
            dataMap.insert(#TimeCodeId,        [timeTrans.PayCalendarTimeCode]);
            dataMap.insert(#TimeCodeName,      [this.timeCodeName(rPayTblJournal.PayFormType, timeTrans.PayCalendarTimeCode)]);
            dataMap.insert(#QtyHour,           [timeTrans.Hour]);
            dataMap.insert(#TblNum,            [rPayTblJournal.TblNum]);
            dataMap.insert(#ReportingPeriod,   [rPayTblJournal.TblDate]);
            dataMap.insert(#PaymentPeriod,     [rPayTblTrans.SourceDate]);
            dataMap.insert(#CorrectedPeriod,   [rPayTblTrans.CorrectedPeriod]);

            pivotTableData.insertRecord(dataMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPivotCodeNameFields</Name>
				<Source><![CDATA[
    protected void initPivotCodeNameFields()
    {
        DictType    dictTypeCode;

        void addCodeNameField(FieldName  _codeField,
                              FieldName  _nameField,
                              FieldLabel _fieldLabel = dictTypeCode.label())
        {
            pivotTableMetaData.addCodeNameField(_codeField,_nameField,_fieldLabel);
        }

        dictTypeCode = new DictType(extendedTypeNum(RHRMEmplId));
        addCodeNameField(#EmplId, #EmplName);

        dictTypeCode = new DictType(extendedTypeNum(RpayHRMOrganizationId));
        addCodeNameField(#OrganizationId, #OrganizationName);

        dictTypeCode = new DictType(extendedTypeNum(RPayTblTimeCode));
        addCodeNameField(#TimeCodeId, #TimeCodeName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPivotMetadata</Name>
				<Source><![CDATA[
    protected void initPivotMetadata()
    {
        Map      metaDataMap;
        DictType dictType;
        DictEnum dictEnum;

        void addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup _fieldsGroup,
                                    FieldName                    _fieldName,
                                    FieldLabel                   _fieldLabel = dictType.label(),
                                    Types                        _baseType   = dictType.baseType(),
                                    int                          _stringLen  = dictType.stringLen())
        {
            metaDataMap.insert(_fieldName,[_fieldLabel, _fieldsGroup, _baseType, _stringLen]);
        }

        void addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup _fieldsGroup,
                                    FieldName                    _fieldName,
                                    FieldLabel                   _fieldLabel = dictEnum.label(),
                                    Types                        _baseType   = Types::String,
                                    int                          _stringLen  = #EnumStrLen)
        {
            metaDataMap.insert(_fieldName,[_fieldLabel, _fieldsGroup, _baseType, _stringLen]);
        }

        metaDataMap = new Map(Types::String, Types::Container);

        dictType = new DictType(extendedTypeNum(RHRMEmplId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #EmplId);

        dictType = new DictType(extendedTypeNum(DirPartyName));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::None, #EmplName);

        dictType = new DictType(extendedTypeNum(RPayDayHour));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::MeasureFields, #QtyHour, "@GLS105378");

        dictType = new DictType(extendedTypeNum(RpayHRMOrganizationId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #OrganizationId);

        dictType = new DictType(extendedTypeNum(RHRMOrganizationName));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::None, #OrganizationName);

        dictType = new DictType(extendedTypeNum(RPayCalendarId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #CalendarId);

        dictType = new DictType(extendedTypeNum(TransDate));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #MthDate);

        dictType = new DictType(extendedTypeNum(RPayTblTimeCode));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #TimeCodeId);

        dictType = new DictType(extendedTypeNum(Name));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::None, #TimeCodeName);

        dictType = new DictType(extendedTypeNum(RPayTblNum));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #TblNum);

        dictType = new DictType(extendedTypeNum(RPayTblDate));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #ReportingPeriod);

        dictType = new DictType(extendedTypeNum(ReportPeriod_RU));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #PaymentPeriod, "@RUP393");

        dictType = new DictType(extendedTypeNum(RPayCorrectedPeriod));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #CorrectedPeriod);

        pivotTableMetaData.addFields(metaDataMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQueryHasByDayFilter</Name>
				<Source><![CDATA[
    private boolean isQueryHasByDayFilter(Query _query)
    {
        QueryBuildDataSource qbdsRPayTblDayHourTrans = _query.dataSourceTable(tableNum(RPayTblDayHourTrans));
        int i;
        boolean ret;

        for (i = 1; i<=qbdsRPayTblDayHourTrans.rangeCount(); ++i)
        {
            if (qbdsRPayTblDayHourTrans.range(i).value())
            {
                ret = true;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        organizationMap = new Map(Types::String, Types::String);
        timeCodeMap     = new Map(Types::Container, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>organizationName</Name>
				<Source><![CDATA[
    private RHRMOrganizationName organizationName(RpayHRMOrganizationId _orgId)
    {
        RHRMOrganizationName orgName;

        if (_orgId)
        {
            if (organizationMap.exists(_orgId))
            {
                orgName = organizationMap.lookup(_orgId);
            }
            else
            {
                orgName = RPayHRMOrganization::find(_orgId).Description;
                organizationMap.insert(_orgId, orgName);
            }
        }

        return orgName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container conQuery = this.queryRun().pack();
        ;

        conNameCodeFieldsSettings = pivotTableMetaData.codeNameFields().pack();

        return [#CurrentVersion, #CurrentList, conQuery];
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    public Query query()
    {
        Query                   query;

        query = new Query(queryStr(RPayHRMPivotTblTrans));
        this.updateQuery(query);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeCodeName</Name>
				<Source><![CDATA[
    private Name timeCodeName(RPayFormType    _payFormType,
                              RPayTblTimeCode _payTblTimeCode)
    {
        Name name;
        #define.key([_payFormType, _payTblTimeCode])

        if (_payFormType && _payTblTimeCode)
        {
            if (timeCodeMap.exists(#key))
            {
                name = timeCodeMap.lookup(#key);
            }
            else
            {
                name = RPayTblTimeTable::find(_payFormType, _payTblTimeCode).FullName;
                timeCodeMap.insert(#key, name);
            }
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean   ret;
        Version   version     = RunBase::getVersion(_packedClass);
        container packedQuery = conPeek(_packedClass, conLen(_packedClass));
        ;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new SysQueryRun(packedQuery);
                }
                pivotTableMetaData.unpackCodeNameSettings(conNameCodeFieldsSettings);
                break;

            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    public void updateQuery(Query _query)
    {
        QueryBuildDataSource        qbdsEmplTable;
        QueryBuildDataSource        qbdsRPayTblTrans;
        QueryBuildDataSource        qbdsRPayTblJour;

        qbdsEmplTable           = _query.dataSourceTable(tableNum(RHRMEmplTable));
        qbdsRPayTblTrans        = _query.dataSourceTable(tableNum(RPayTblTrans));
        qbdsRPayTblJour         = _query.dataSourceTable(tableNum(RPayTblJournal));

        findOrCreateRange_W(qbdsRPayTblTrans, fieldNum(RPayTblTrans, SourceDate), queryRange(dateStartMth(startDate), endmth(endDate ? endDate : dateMax())));
        findOrCreateRange_W(qbdsRPayTblTrans, fieldNum(RPayTblTrans, CorrectedPeriod), queryRange(dateStartMth(corStartDate), endmth(corEndDate ? corEndDate : dateMax())));

        findOrCreateRange_W(qbdsRPayTblJour, fieldNum(RPayTblJournal, TblDate), queryRange(dateStartMth(tblStartDate), endmth(tblEndDate ? tblEndDate : dateMax())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret && !startDate && !corStartDate)
        {
            ret = checkFailed("@SYS19617");
        }

        if (ret && !endDate && !corEndDate)
        {
            ret = checkFailed("@GLS113151");
        }

        if (ret && ((startDate > endDate) || (corStartDate > corEndDate) || (tblStartDate > tblEndDate)))
        {
            ret = checkFailed("@SYS16982");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>