<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportExcel_SPV2</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportExcel_SPV2 extends RPayPFReportExcel_SZV61_2011
{
    RPayAmount  fundAmountExtra1, fundAmountExtra2;

    #define.ReportTitle("@SYP4882101")
    #RPayPFReportSPV2
    #RPayPFReportSeniority
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return #ReportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmpl</Name>
				<Source><![CDATA[
    protected boolean checkEmpl(RHRMEmplTable   _emplTable,
                                boolean         _displayMessage = true,
                                str 20          _personCategory = '',
                                str 20          _formType       = '')
    {
        boolean ret = true;

        ret = this.checkEmplIsInsured(_emplTable, _displayMessage) && ret;

        if (ret)
        {
            ret = this.checkMainInsuredPersonCat(_emplTable, _displayMessage) && ret;
            ret = this.checkEmplPFNumber(_emplTable, _displayMessage) && ret;
            ret = this.checkEmplPersonalInfo(_emplTable, _displayMessage, false, true) && ret;

            if (! _emplTable.personTable().PensionAssignDate)
            {
                ret = _displayMessage ? checkFailed(strFmt("@RUP3066", _emplTable.EmployeeId, _emplTable.Name())) : false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFundAmounts</Name>
				<Source><![CDATA[
    protected void fillFundAmounts(int _workSheetNum)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    protected void fillHeader(int               _workSheetNum,
                              str 20            _personCategory,
                              RHRMEmplTable     _emplTable)
    {
        RNumDateInWordConverter converter = new RNumDateInWordConverter(companyInfo::languageId());
        RHRMPersonTable         personTable = _emplTable.personTable();
        DirPersonName           dirPersonName = personTable.dirPersonName();

        excelDocument.insertValue('AO7',    companyInfo.PFRegNum_RU,                                        _workSheetNum);
        excelDocument.insertValue('AD8',    companyInfo.Name,                                               _workSheetNum);
        excelDocument.insertValue('H9',     CompanyInfoHelper::partyINN_RU(companyInfo),                    _workSheetNum);
        excelDocument.insertValue('AU9',    CompanyInfoHelper::partyKPP_RU(companyInfo),                    _workSheetNum);
        excelDocument.insertValue('AU10',   _personCategory,                                                _workSheetNum);
        excelDocument.insertValue('AA11',   dayOfMth(personTable.PensionAssignDate),                        _workSheetNum);
        excelDocument.insertValue('AI11',   converter.date2strMonth(personTable.PensionAssignDate),         _workSheetNum);
        excelDocument.insertValue('BC11',   year(personTable.PensionAssignDate),                            _workSheetNum);
        excelDocument.insertValue('AD13',   this.getPeriodCode(taxPeriod),                                  _workSheetNum);
        excelDocument.insertValue('X15',    reportYear,                                                     _workSheetNum);

        switch (reportType)
        {
            case RpayPensionFundExportKindOfCorrection::None:
                excelDocument.insertValue('DA7', #CheckSign, _workSheetNum);
                break;

            case RpayPensionFundExportKindOfCorrection::Correctional:
                excelDocument.insertValue('DA9', #CheckSign, _workSheetNum);
                break;

            case RpayPensionFundExportKindOfCorrection::Cancellative:
                 excelDocument.insertValue('DA11', #CheckSign, _workSheetNum);
                break;
        }

        if (reportType != RpayPensionFundExportKindOfCorrection::None)
        {
            excelDocument.insertValue('DW15', this.getPeriodCode(corrTaxPeriod), _workSheetNum);
            excelDocument.insertValue('DU18', corrReportYear, _workSheetNum);
        }

        excelDocument.insertValue('N19',    dirPersonName.LastName,     _workSheetNum);
        excelDocument.insertValue('I20',    dirPersonName.FirstName,    _workSheetNum);
        excelDocument.insertValue('N21',    dirPersonName.MiddleName,   _workSheetNum);
        excelDocument.insertValue('W22',    _emplTable.payPFRINN(),     _workSheetNum);

        if (reportType != RpayPensionFundExportKindOfCorrection::Cancellative)
        {
            excelDocument.insertValue(fundAmountIns ? 'AC35' : 'AP35', #CheckSign,  _workSheetNum);
            excelDocument.insertValue((fundAmountExtra1 || fundAmountExtra2) ? 'S39' : 'AF39', #CheckSign,  _workSheetNum);
        }

        excelDocument.insertValue('B40',    OfficialsTable_RU::findDirector().Title,    _workSheetNum);
        excelDocument.insertValue('CL40',   OfficialsTable_RU::nameDirector(),          _workSheetNum);

        excelDocument.insertValue('I42',    date2str(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 123, 2, 2, 2, 2, 4, DateFlags::None), _workSheetNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSeniorityPeriods</Name>
				<Source><![CDATA[
    protected void fillSeniorityPeriods(int             _workSheetNum,
                                        str 20          _personCategory,
                                        RHRMEmplTable   _emplTable,
                                        int             _rowStart       = 26,
                                        int             _rowMax         = 31)
    {
        container                       seniorityPeriods;
        StartDate                       seniorityDateFrom;
        EndDate                         seniorityDateTo;
        RPayInsuranceSeniorityTypeId    insuranceTypeId;
        Months                          senMonths;
        Days                            senDays;
        RHRMSpecCond                    specCondition;
        RHRMPositionList                positionList;

        int                             curRow, curRowNum = 1;

        if (reportType != RpayPensionFundExportKindOfCorrection::Cancellative)
        {
            seniorityCommand.parmValue([#SeniorityKey]);
            seniorityIterator = seniorityCommand.iterator();

            curRow = _rowStart;

            while (seniorityIterator.more())
            {
                seniorityPeriods = seniorityIterator.value();
                [#SeniorityValue] = seniorityPeriods;

                excelDocument.insertValue('B'  + int2str(curRow), curRowNum, _workSheetNum);
                excelDocument.insertValue('I'  + int2str(curRow), date2str(seniorityDateFrom, 123, 2, 2, 2, 2, 4, DateFlags::None), _workSheetNum);
                excelDocument.insertValue('Y'  + int2str(curRow), date2str(seniorityDateTo, 123, 2, 2, 2, 2, 4, DateFlags::None), _workSheetNum);
                excelDocument.insertValue('BB' + int2str(curRow), specCondition, _workSheetNum);
                excelDocument.insertValue('CI' + int2str(curRow), insuranceTypeId, _workSheetNum);

                if (positionList)
                {
                    curRow++;

                    if (curRow > _rowMax)
                    {
                        break;
                    }

                    excelDocument.insertValue('BB' + int2str(curRow), positionList, _workSheetNum);
                }

                curRow++;
                curRowNum++;

                if (curRow > _rowMax)
                {
                    break;
                }

                seniorityIterator.moveNext();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKeyValue</Name>
				<Source><![CDATA[
    protected void getKeyValue(container _con)
    {
        [#parmKeyReport] = conpeek(_con, 1);
        [#parmValue]     = conpeek(_con, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str getPeriodCode(RPayReportSocialTaxPeriod _taxPeriod)
    {
        str ret;

        switch (_taxPeriod)
        {
            case RPayReportSocialTaxPeriod::Quarter:
                ret = '3';
                break;
            case RPayReportSocialTaxPeriod::HalfYear:
                ret = '6';
                break;
            case RPayReportSocialTaxPeriod::NineMonth:
                ret = '9';
                break;
            case RPayReportSocialTaxPeriod::Year:
                ret = '0';
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodType</Name>
				<Source><![CDATA[
    protected enumId periodType()
    {
        return enumnum(RPayReportSocialTaxPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportData</Name>
				<Source><![CDATA[
    public RPayPFReportCtrl reportData()
    {
        return new RPayPFReportCtrlSPV2();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return #ReportTitle;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>