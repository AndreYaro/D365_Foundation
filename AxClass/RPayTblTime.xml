<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTblTime</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// class-container for tbl time entity.
/// </summary>
final public class RPayTblTime
{
    StartDate           startDate;
    EndDate             endDate;
    RPayTblDayHour      hours;
    TableId             srcDocumentTableId;
    RecId               srcDocumentRecId;
    RPayTblDimension    tblDimension;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clones the time.
    /// </summary>
    /// <param name="_tblTimeDestination">
    /// The clone to time.
    /// </param>
    /// <returns>
    /// The cloned time.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public anytype clone(RPayTblTime _tblTimeDestination = null)
    {
        container   conDocAttr;

        RPayTblTime ret;

        if (_tblTimeDestination)
        {
            ret = _tblTimeDestination;
        }
        else
        {
            ret = new RPayTblTime();
        }

        ret.parmStartDate(this.parmStartDate());
        ret.parmEndDate(this.parmEndDate());
        ret.parmHours(this.parmHours());
        conDocAttr = this.parmSrcDocumentAttr();
        ret.parmSrcDocumentAttr(conPeek(conDocAttr, 1), conPeek(conDocAttr, 2));

        if (tblDimension)
        {
            tblDimension.clone(ret.dimension());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the dimension for time.
    /// </summary>
    /// <returns>
    /// The time dimension.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTblDimension dimension()
    {
        if (tblDimension == null)
        {
            tblDimension = new RPayTblDimension();
        }

        return tblDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if times are equal.
    /// </summary>
    /// <param name="_time">
    /// The time.
    /// </param>
    /// <returns>
    /// True if times are equal.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean equal(Object _time)
    {
        boolean ret;

        ret = this.parmSrcDocumentAttr() == _time.parmSrcDocumentAttr()
            && this.parmEndDate()  == _time.parmEndDate()
            && this.parmHours()    == _time.parmHours()
            && this.parmSrcDocumentAttr() == _time.parmSrcDocumentAttr()
            && this.parmStartDate() == _time.parmStartDate()
            && this.dimension().equal(_time.dimension());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>equalExceptDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if times are equal excepting the specified document.
    /// </summary>
    /// <param name="_time">
    /// The time to compare to.
    /// </param>
    /// <returns>
    /// True if times are equal.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean equalExceptDocument(RPayTblTime _time)
    {
        RPayTblTime timea = this.clone();
        RPayTblTime timeb = _time.clone();

        timea.parmSrcDocumentAttr(0,0);
        timeb.parmSrcDocumentAttr(0,0);

        return timea.equal(timeb);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source document.
    /// </summary>
    /// <returns>
    /// The source document record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Common getSourceDocument()
    {
        Common          common;
        SysDictTable    dictTable;

        if (srcDocumentTableId && srcDocumentRecId)
        {
            dictTable = new SysDictTable(srcDocumentTableId);
            common = dictTable.makeRecord();

            select firstOnly common
                where common.RecId == srcDocumentRecId;
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmEndDate(TransDate _endDate = endDate)
    {
        endDate = _endDate;

        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHours</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTblDayHour parmHours(RPayTblDayHour _hours = hours)
    {
        hours = _hours;

        return hours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSrcDocumentAttr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the source document record reference.
    /// </summary>
    /// <param name="_tableId">
    /// The table id.
    /// </param>
    /// <param name="_recId">
    /// The reference to record id.
    /// </param>
    /// <returns>
    /// The container with table and record ids.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container parmSrcDocumentAttr(TableId _tableId = srcDocumentTableId, RecId _recId = srcDocumentRecId)
    {
        srcDocumentTableId  = _tableId;
        srcDocumentRecId    = _recId;

        return [srcDocumentTableId, srcDocumentRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmStartDate(TransDate _startDate = startDate)
    {
        startDate = _startDate;

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reversed hourses
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void reverse()
    {
        hours = hours * (-1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the string description.
    /// </summary>
    /// <returns>
    /// The string.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str toString()
    {
        str ret;
        ret += this.dimension().toString();
        ret += "," + strFmt("%1", this.parmHours());
        ret += "," + date2StrUsr(this.parmStartDate(), DateFlags::None);
        ret += "," + date2StrUsr(this.parmEndDate(), DateFlags::None);
        ret += "," + strFmt("%1", conPeek(this.parmSrcDocumentAttr(), 2));
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntersects</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checked  if one time intersect another.
    /// </summary>
    /// <param name="_a">
    /// First time.
    /// </param>
    /// <param name="_b">
    /// Second time.
    /// </param>
    /// <returns>
    /// True if intersects, overwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean isIntersects(RPayTblTime _a, RPayTblTime _b)
    {
        boolean ret;

        ret = (_a.parmStartDate() <= _b.parmEndDate() && _a.parmStartDate() >= _b.parmStartDate())
           || (_b.parmStartDate() <= _a.parmEndDate() && _b.parmStartDate() >= _a.parmStartDate());

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>