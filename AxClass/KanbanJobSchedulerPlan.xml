<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobSchedulerPlan</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanJobSchedulerPlan</c> class inserts a kanban job into the schedule.
/// </summary>
/// <remarks>
/// If the job has previously been planned, the previous plan information is removed and the job is
/// planned at the new date and time.This class plans process jobs; transfer jobs are not planned.
/// </remarks>
public class KanbanJobSchedulerPlan extends KanbanJobScheduler
{
    KanbanJobUpd            kanbanJobUpd;
    KanbanJobStatusUpdate   kanbanJobStatusUpdate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmKanbanJobStatusUpdate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanJobStatusUpdate parmKanbanJobStatusUpdate(KanbanJobStatusUpdate _kanbanJobStatusUpdate = kanbanJobStatusUpdate)
    {
        kanbanJobStatusUpdate = _kanbanJobStatusUpdate;
        return kanbanJobStatusUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJobUpd</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanJobUpd parmKanbanJobUpd(KanbanJobUpd _kanbanJobUpd = kanbanJobUpd)
    {
        kanbanJobUpd = _kanbanJobUpd;
        return kanbanJobUpd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Plans a kanban job and updates the schedule.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The job cannot be planned.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void planKanbanJob()
    {
        KanbanJobSchedule               currentKanbanJobSchedule;
        KanbanJobCapacitySum            kanbanJobCapacitySum;

        if (!kanbanJob.type().canHaveStatus(LeanKanbanJobStatus::Planned))
        {
            throw error(strFmt("@SYS134380",kanbanJob.kanbanId(),kanbanJob.PlanActivityName));
        }

        WrkCtrResourceGroup wrkCtrResourceGroupLocal = this.wrkCtrResourceGroup();
        boolean mustPlan = wrkCtrResourceGroupLocal.RecId != 0;

        // if a job is provided as reference for planning this one, it must belong to the same work cell
        KanbanJobSchedule kanbanJobScheduleJob = KanbanJobSchedule::findJob(kanbanJobStatusUpdate.PlanAfterJob);
        if (kanbanJobScheduleJob)
        {
            if (wrkCtrResourceGroupLocal.RecId != kanbanJobScheduleJob.WorkCell)
            {
                throw error(strFmt("@SYS309077",kanbanJob.kanbanId(),kanbanJob.PlanActivityName));
            }
        }

        ttsbegin;

        if (mustPlan)
        {
            KanbanJobSchedulerLock::deleteOrphanedLocks();

            if (this.lockWorkCell(wrkCtrResourceGroupLocal.RecId))
            {
                LeanWorkCellScheduleCapacity leanWorkCellScheduleCapacity = this.leanWorkCellScheduleCapacity();
                KanbanJobSchedulePlannedPeriod plannedPeriod = leanWorkCellScheduleCapacity.capacityFromDate();

                // job is already planned
                KanbanJobSchedule kanbanJobSchedule = KanbanJobSchedule::findJob(kanbanJob.RecId,true);
                if (kanbanJobSchedule)
                {
                    currentKanbanJobSchedule.data(kanbanJobSchedule);

                    // do nothing if the new slot is the same as the old.
                    mustPlan =    mustPlan
                               && (plannedPeriod                                         != kanbanJobSchedule.PlannedPeriod)
                               || (!(kanbanJobStatusUpdate.PlanAfterJob                  == kanbanJob.RecId
                               &&    kanbanJobStatusUpdate.PlanAfterType                 == LeanPlanJobReferenceTypes::KanbanJob)
                               &&  !(kanbanJobStatusUpdate.PlanAfterLineNum              == kanbanJobSchedule.Sequence
                               &&    kanbanJobStatusUpdate.PlanAfterType                 == LeanPlanJobReferenceTypes::LineNumber)
                               &&  !(kanbanJobStatusUpdate.PlanAfterJob                  == 0
                               &&    kanbanJobStatusUpdate.PlanAfterType                 == LeanPlanJobReferenceTypes::KanbanJob
                               &&    kanbanJobSchedule.previousKanbanJobSchedule().RecId == 0)
                               &&  !(kanbanJobStatusUpdate.PlanAfterLineNum              == realMin()
                               &&    kanbanJobStatusUpdate.PlanAfterType                 == LeanPlanJobReferenceTypes::LineNumber
                               &&    kanbanJobSchedule.previousKanbanJobSchedule().RecId == 0));

                    if (mustPlan)
                    {
                        // remove previous capacity allocation & schedule
                        kanbanJobCapacitySum = KanbanJobCapacitySum::findJob(kanbanJob.RecId);
                        KanbanJobScheduleCapacitySum::addKanbanJobCapacitySum(kanbanJobCapacitySum,kanbanJobSchedule,false);
                        KanbanJobCapacitySum::removeCapacityConsumption(kanbanJob.RecId);
                        kanbanJobSchedule.delete();
                        kanbanJobSchedule.clear();
                    }
                }

                if (mustPlan)
                {
                    if (!kanbanJob.selectForUpdate())
                    {
                        kanbanJob = KanbanJob::find(kanbanJob.RecId,true);
                    }

                    // initialize schedule
                    kanbanJobSchedule.clear();
                    kanbanJobSchedule.WorkCell         = wrkCtrResourceGroupLocal.RecId;
                    kanbanJobSchedule.Job              = kanbanJob.RecId;
                    kanbanJobSchedule.PlannedPeriod    = plannedPeriod;
                    kanbanJobSchedule.Sequence         = this.scheduleSequence(kanbanJobSchedule);

                    // set planned job capacity consumption
                    kanbanJobCapacitySum = kanbanJob.setKanbanJobCapacitySum(leanWorkCellScheduleCapacity);

                    // calculate expected date and insert schedule
                    TransDateTime startDateTime = this.startDateTime(leanWorkCellScheduleCapacity,kanbanJobSchedule.previousKanbanJobSchedule());

                    this.setJobScheduleExpectedStartEndDateTime(kanbanJobSchedule,
                                                                kanbanJob,
                                                                startDateTime,
                                                                kanbanJobCapacitySum.PlannedCapacitySumSeconds,
                                                                leanWorkCellScheduleCapacity.calendarId(),
                                                                leanWorkCellScheduleCapacity.capacityToDateTime());
                    
                    kanbanJobSchedule.insert();

                    // renumber sequences if necessary
                    KanbanJobSchedule::updateSequenceNumbers(kanbanJobSchedule);

                    // set planned schedule capacity consumption
                    KanbanJobScheduleCapacitySum::addKanbanJobCapacitySum(kanbanJobCapacitySum,kanbanJobSchedule,true);

                    // update job
                    kanbanJob.ExpectedDateTime = kanbanJobSchedule.ExpectedDateTime;
                    kanbanJob.update();

                    // update due date for previous jobs of same kanban
                    this.setPrevJobDueDateTime(kanbanJobSchedule);

                    // in case of batch moves, caller can optimize this by doing a single move operation at the end of the process.
                    if (kanbanJobStatusUpdate.PostponeMove == NoYes::No)
                    {
                        // update later jobs in same schedule
                        if (currentKanbanJobSchedule)
                        {
                            // moving already planned job
                            KanbanJobSchedulerMove::newStandard(kanbanJob,
                                                            currentKanbanJobSchedule,
                                                            this.rootKanbanJobScheduler()).run();
                        }
                        else
                        {
                            // inserting newly planned job
                            KanbanJobSchedule nextKanbanJobSchedule = kanbanJobSchedule.nextKanbanJobSchedule();
                            if (nextKanbanJobSchedule)
                            {
                                KanbanJobSchedulerMove::newStandard(KanbanJob::find(nextKanbanJobSchedule.Job),
                                                                nextKanbanJobSchedule,
                                                                this.rootKanbanJobScheduler()).run();
                            }
                        }
                    }

                    // set expected date on next transfer job(s)
                    this.setNextJobExpectedDateTime();
                }

                // unlock
                this.releaseLockWorkCell(wrkCtrResourceGroupLocal.RecId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runScheduler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the scheduling action.
    /// </summary>
    protected void runScheduler()
    {
        this.planKanbanJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the schedule date and time.
    /// </summary>
    /// <returns>
    /// The schedule date and time.
    /// </returns>
    protected TransDateTime scheduleDateTime()
    {
        if (!scheduleDateTime)
        {
            scheduleDateTime = kanbanJobStatusUpdate.TransactionDateTime;
        }

        return scheduleDateTime;    //UTC
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleSequence</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the sequence number for the job.
    /// </summary>
    /// <param name="_kanbanJobSchedule">
    ///    A <c>KanbanJobSchedule</c> record to use to determine the sequence.
    /// </param>
    /// <returns>
    ///    A sequence number.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LineNum scheduleSequence(KanbanJobSchedule _kanbanJobSchedule)
    {
        if (kanbanJobStatusUpdate.PlanAfterType == LeanPlanJobReferenceTypes::KanbanJob)
        {
            KanbanJobSchedule kanbanJobScheduleJob = KanbanJobSchedule::findJob(kanbanJobStatusUpdate.PlanAfterJob);
            kanbanJobStatusUpdate.PlanAfterLineNum = kanbanJobScheduleJob
                                                        ? kanbanJobScheduleJob.Sequence
                                                        : KanbanJobSchedule::firstSequenceAvailable(_kanbanJobSchedule.WorkCell,
                                                                                                    _kanbanJobSchedule.PlannedPeriod);
        }

        return KanbanJobSchedule::nextSequence(_kanbanJobSchedule.WorkCell,
                                               _kanbanJobSchedule.PlannedPeriod,
                                               kanbanJobStatusUpdate.PlanAfterLineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanJobScheduler construct()
    {
        return new KanbanJobSchedulerPlan();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>KanbanJobSchedulerPlan</c> class.
    /// </summary>
    /// <param name="_kanbanJobUpd">
    ///    A <c>KanbanJobUpd</c> object to use to initialize the instance.
    /// </param>
    /// <param name="_rootKanbanJobScheduler">
    ///    A <c>KanbanJobScheduler</c> object to use to initialize the instance; optional.
    /// </param>
    /// <param name="_kanbanJob">
    ///    A <c>KanbanJob</c> record to use to initialize the instance; optional.
    /// </param>
    /// <param name="_kanbanJobStatusUpdate">
    ///    A <c>KanbanJobStatusUpdate</c> record to use to initialize the instance; optional.
    /// </param>
    /// <param name="_lockOwnerKanbanJobScheduler">
    ///    A related <c>KanbanJobScheduler</c> object that is used for locking work cells; optional.
    /// </param>
    /// <returns>
    ///    A new <c>KanbanJobSchedulerPlan</c> object.
    /// </returns>
    /// <remarks>
    ///    All planning must be initiated from the <c>KanbanJobUpd</c> class.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanJobScheduler newStandard(
        KanbanJobUpd          _kanbanJobUpd,
        KanbanJobScheduler    _rootKanbanJobScheduler      = null,
        KanbanJob             _kanbanJob                   = _kanbanJobUpd.kanbanJob(),
        KanbanJobStatusUpdate _kanbanJobStatusUpdate       = _kanbanJobUpd.kanbanJobStatusUpdate(),
        KanbanJobScheduler    _lockOwnerKanbanJobScheduler = _rootKanbanJobScheduler)
    {
        KanbanJobSchedulerPlan     kanbanJobSchedulerPlan = KanbanJobSchedulerPlan::construct();

        kanbanJobSchedulerPlan.parmKanbanJobUpd(_kanbanJobUpd);
        kanbanJobSchedulerPlan.parmRootKanbanJobScheduler(_rootKanbanJobScheduler);
        kanbanJobSchedulerPlan.parmKanbanJob(_kanbanJob);
        kanbanJobSchedulerPlan.parmKanbanJobStatusUpdate(_kanbanJobStatusUpdate);
        kanbanJobSchedulerPlan.parmLockOwnerKanbanJobScheduler(_lockOwnerKanbanJobScheduler);

        return kanbanJobSchedulerPlan;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
