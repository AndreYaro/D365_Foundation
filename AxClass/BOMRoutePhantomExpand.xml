<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMRoutePhantomExpand</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BOMRoutePhantomExpand</c> class expands a line type phantom BOM during a
///    <c>BOMCalculation</c>.
/// </summary>
/// <remarks>
///    The algorithm that is used in this class should behave the same as the production calculation.This
///    class holds a recursive call to expand a phantom BOM. Therefore, the resolved BOM structures must
///    be stored somewhere. This is performed in the <c>BOMRoutePhantomData</c> class.
/// </remarks>
public class BomRoutePhantomExpand
{
    // Caller parameters
    ItemId              parentItemId;
    InventDim           parentInventDim;
    TransDate           calcDate;
    Qty                 seriesSize;

    // Global variables
    Set                  setItemId;         // to be deprecated

    ItemProcurementMode itemProcurementMode;
    RefRecId            productionFlowReferenceRecId;
    InventSiteId        siteId;
    BOMCalcItem         bomCalcItem;
    LeanCostingFacadeBase leanCostingFacade;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateUsageBasis</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total BOM line quantity including scrap, series size and rounding that is the basis for route/resource/service consumption.
    /// </summary>
    /// <param name="_phantomBom">
    /// BOM line for which to calculate total quantity.
    /// </param>
    /// <param name="_phantomRoute">
    /// Route associated with the BOM line to provide the operation scrap percentage.
    /// </param>
    /// <param name="_seriesSize">
    /// Series size of the parent item.
    /// </param>
    /// <returns>
    /// Total quantity for the BOM line.
    /// </returns>
    private Qty calculateUsageBasis(
        Bom     _phantomBom,
        Route   _phantomRoute,
        Qty     _seriesSize)
    {
        BOMCalcData         bomCalcData;
        BOMCalcConsumption  bomCalcConsumption;
        Qty                 consumptionBOMQty;
        Percent             calcAccError;

        bomCalcData         = BOMCalcData::newInventTable(_seriesSize, _phantomBOM.inventTable());
        bomCalcConsumption  = BOMCalcConsumption::construct(_phantomBOM.Formula, bomCalcData);
        calcAccError        = _phantomRoute.RecId ? Route::accError(_phantomRoute.RouteId, _phantomBOM.OprNum) : 1;
        consumptionBOMQty   = bomCalcConsumption.calcConsumption(_phantomBOM, calcAccError);

        return consumptionBOMQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expand</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Expands the line type phantom BOM.
    /// </summary>
    /// <param name="_phantomData">
    ///    The instance of the <c>BOMRoutePhantomData</c> class that holds the already expanded structures to
    ///    which the data of this expansion should be added.
    /// </param>
    /// <param name="_bomId">
    ///    The BOM ID of the line type phantom BOM.
    /// </param>
    /// <param name="_routeId">
    ///    The Route ID of the line type phantom BOM.
    /// </param>
    /// <param name="_itemId">
    ///    The Item ID of the line type phantom BOM.
    /// </param>
    /// <param name="_configId">
    ///    The Configuration ID of the line type phantom BOM.
    /// </param>
    /// <param name="_phantomBOM">
    ///    The line type phantom BOM; optional.
    /// </param>
    /// <param name="_phantomRoute">
    ///    The route that belongs to the line type phantom BOM; optional.
    /// </param>
    /// <returns>
    ///    The instance of the <c>BOMRoutePhantomData</c> class to which the data has been added.
    /// </returns>
    /// <remarks>
    ///    The <c>BOMRoutePhantomExpand.expand</c> method is called recursively from the <c>expandBOM</c>
    ///    method. It calls into the handling of the routes that belong to this line type phantom BOM, and
    ///    then expands the BOM even more.
    /// </remarks>
    protected BOMRoutePhantomData expand(
        BOMRoutePhantomData         _phantomData,
        BOMId                       _bomId,
        RouteId                     _routeId,
        ItemId                      _itemId,
        EcoResItemConfigurationName _configId,
        BOM                         _phantomBOM = null,
        Route                       _phantomRoute = null
        )
    {
        // Caller parameter, which will be modified in this method
        BOMRoutePhantomData phantomData;

        // Local variables
        Factor              phantomUnitFactor;
        Qty                 usageBasis;

        // Offset is changed during expandRoute and I need to apply the
        // original offset also to the expandBOM
        OprNum              oprNumOffset = _phantomData.parmOprNumOffset();

        // Route and BOM information will be added in the methods
        phantomData         = _phantomData;

        // Mark if the opr numbers needs to be recalculated
        // We check for the route id because we want to set the expanded flag
        // only in case there was actually a route for the phantom line.
        // This will prevent renumbering of the routes in case there is a phantom
        // that gets expanded but has no route of its own.
        if (oprNumOffset && _routeId)
        {
            phantomData.parmPhantomExpanded(true);
        }

        // Calculate unit factor
        phantomUnitFactor   = _phantomBOM.RecId ? _phantomBOM.BOMMap::phantomUnitFactor(seriesSize) : 1;

        BOMRoutePhantomExpandParameters expandParameters = BOMRoutePhantomExpandParameters::construct();

        expandParameters.bomId = _bomId;
        expandParameters.itemId = _itemId;
        expandParameters.configId = _configId;
        expandParameters.phantomUnitFactor = phantomUnitFactor;
        expandParameters.oprNumOffset = oprNumOffset;
        expandParameters.routeId = _routeId;
        expandParameters.phantomBOM = _phantomBOM;
        expandParameters.phantomRoute = _phantomRoute;

        if (itemProcurementMode == ItemProcurementMode::ProductionFlow)
        {
            usageBasis = _phantomBOM.RecId ?
                    this.calculateUsageBasis(_phantomBOM, null, seriesSize) :
                    bomCalcItem.parmCalcConsumptionInventQty();

            bomCalcItem.addListProdFlowResourcesUsage(
                _itemId,
                usageBasis);

            bomCalcItem.addListProdFlowSubcontServicesUsage(
                _itemId,
                usageBasis);
        }
        else
        {
            // Create route information
            phantomData = this.expandRoute(phantomData, expandParameters);

            if (! phantomData.parmOprNumFirst())
            {
                if (_phantomRoute.RecId)
                {
                    phantomData.parmOprNumFirst( _phantomRoute.OprNum);
                }
            }
        }

        // Create bom information
        phantomData = this.expandBOM(phantomData, expandParameters);

        return phantomData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Expands a BOM that belongs to a line type phantom BOM line.
    /// </summary>
    /// <param name="_phantomData">An instance of the <c>BOMRoutePhantomData</c> class that holds the already expanded structures to which the data of this expansion will be added.</param>
    /// <param name="_expandParameters">The instance of the <c>BOMRoutePhantomExpandParameters</c> class that holds information about how to expand the BOM.</param>
    /// <returns>An instance of the <c>BOMRoutePhantomData</c> class to which the data has been added.</returns>
    /// <remarks>
    ///    This method calls the <c>expand</c> method if another line type phantom BOM is detected.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    No <c>inventTable</c> record has been found for the line type phantom BOM.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    No <c>inventTableModule</c> object has been found.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    A circularity is detected (the BOM is used to produce itself).
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    No valid BOM ID can be found for the line type phantom BOM.
    /// </exception>
    protected BOMRoutePhantomData expandBOM(
        BOMRoutePhantomData             _phantomData,
        BOMRoutePhantomExpandParameters _expandParameters)
    {
        // Caller parameter, which will be modified in this method
        BOMRoutePhantomData phantomData;

        // Local variables
        BOMSearch           bomSearch;
        BOM                 bom;
        BOM                 phantomBOM;
        InventTable         inventTable;
        InventTableModule   inventTableModuleInvent;
        BOMId               phantomBomId;
        RouteId             phantomRouteId;
        Route               route;
        Qty                 searchQty;

        OprNum              oprNumOffset = _expandParameters.oprNumOffset;
        OprNum              oprNumFirst  = _phantomData.parmOprNumFirst();

        // BOM information will be added in here
        phantomData         = _phantomData;
        phantomBOM          = _expandParameters.phantomBOM.data();

        bomSearch = BOMSearch::newBOMCalc(_expandParameters.bomId, calcDate, _expandParameters.itemId, _expandParameters.configId);

        // First of all, expand the bom structure
        while (bomSearch && bomSearch.next())
        {
            bom = bomSearch.bom();

            setPrefix(#PreFixField(BOM,ItemId));

            inventTable = InventTable::find(bom.ItemId);
            if (! inventTable.RecId)
                throw error(strFmt(InventTable::txtNotExist(),bom.ItemId));

            inventTableModuleInvent = InventTableModule::find(bom.ItemId,ModuleInventPurchSales::Invent);
            if (! inventTableModuleInvent.RecId)
                throw error(strFmt("@SYS5700",bom.ItemId,ModuleInventPurchSales::Invent));

            if (phantomBOM.RecId)
            {
                bom.BOMMap::initFromPhantom(phantomBOM, _expandParameters.phantomUnitFactor, parentItemId,seriesSize);
            }

            if (BOMCalcItem::expandItem(inventTable.ItemType,
                    InventItemParmData::construct(bom.ItemId, bom.InventDimId),
                    InventItemParmData::construct(parentItemId, parentInventDim.InventDimId),
                    siteId,
                    itemProcurementMode,
                    bom.bomId,
                    bom.bomType,
                    productionFlowReferenceRecId,
                    calcDate,
                    leanCostingFacade))
            {
                setItemId.add(bom.ItemId);

                // Get the new BomId
                searchQty   = bom.BOMMap::searchQty(parentItemId,seriesSize);

                phantomBomId = bom.itemBOMIdFromRouteId(calcDate, searchQty, parentItemId, parentInventDim);
                if (!phantomBomId)
                {
                    throw error(strFmt("@SYS69982", bom.ItemId, bom.bomId));
                }

                if (itemProcurementMode != ItemProcurementMode::ProductionFlow)
                {
                    // Get the new routeId
                    if (bom.ItemRouteId)
                    {
                        phantomRouteId = bom.ItemRouteId;
                    }
                    else
                    {
                        InventDim inventDim = bom.inventDim();

                        if (bom.InventDimId == InventDim::inventDimIdBlank())
                        {
                            inventDim.InventSiteId = siteId;
                            inventDim = inventDim::findOrCreate(inventDim);
                        }

                        phantomRouteId = InventTable::find(bom.ItemId).routeId(calcDate, searchQty, inventDim);
                    }

                    if (bom.OprNum || RouteParameters::find().Network)
                    {
                        OprNumBOM oprNumBOM;

                        if (bom.OprNum)
                        {
                            oprNumBOM = bom.OprNum + oprNumOffset;
                        }
                        else
                        {
                            Route rt = Route::findFirst(phantomRouteId);
                            oprNumBOM = (rt ? rt.OprNum : phantomData.parmOprNumFirst()) + oprNumOffset;
                        }

                        route = phantomData.findPhantomRoute(oprNumBOM);
                    }
                    else
                    {
                        route = phantomData.findPhantomRoute(phantomData.parmOprNumFirst() + oprNumOffset);
                    }
                }

                phantomData = this.expand(phantomData, phantomBomId, phantomRouteId, bom.ItemId, bom.configId(), bom, route);

                if (setItemId.in(bom.ItemId))
                {
                    setItemId.remove(bom.ItemId);
                }
            }
            else
            {
                // We might have subcontracted services for transferring this item to/from vendors.
                // We need to get that usage here because the item was not expanded.
                bomCalcItem.addListProdFlowSubcontServicesUsage(
                    bom.ItemId,
                    bomCalcItem.parmCalcConsumptionInventQty(),
                    false,  // don't include services related to process activities
                    true);  // include any services related to transfer activities

                if (bom.OprNum && bom.route(_expandParameters.routeId))
                {
                    bom.OprNum             += oprNumOffset;
                }
                else
                {
                    bom.OprNum              = oprNumFirst;
                }

                phantomData.addBOM(bom);
            }
        }

        return phantomData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Expands the route that belongs to a line type phantom BOM.
    /// </summary>
    /// <param name="_phantomData">The instance of the <c>BOMRoutePhantomData</c> class that holds the already expanded structures to which the data of this expansion should be added.</param>
    /// <param name="_expandParameters">The instance of the <c>BOMRoutePhantomExpandParameters</c> class that holds information about how to expand the route.</param>
    /// <returns>The instance of the <c>BOMRoutePhantomData</c> class to which the data has been added.</returns>
    /// <remarks>
    ///    The routes that are expanded in this method will increase the offset that will be set in the
    ///    <c>BOMRoutePhantomData</c> class and then be used in the <c>expandBOM</c> method to link the
    ///    expanded route operation numbers with the operation numbers of the phantom BOM.
    /// </remarks>
    protected BOMRoutePhantomData expandRoute(
        BOMRoutePhantomData             _phantomData,
        BOMRoutePhantomExpandParameters _expandParameters)
    {
        // Caller parameter, which will be modified in this method
        BOMRoutePhantomData phantomData;

        // Local variables
        RouteSearch         routeSearch;
        Route               route;
        BOM                 phantomBOM;
        Qty                 consumptionBOMQty;
        OprNum              oprNumOffset;
        OprNum              oprNumFirst = 0;
        Level               levelFirst = 0;

        // Route information will be added in here
        phantomData         = _phantomData;

        phantomBOM          = _expandParameters.phantomBOM.data();
        oprNumOffset        = _phantomData.parmOprNumOffset();

        if (phantomBOM.RecId)
        {
            consumptionBOMQty = this.calculateUsageBasis(_expandParameters.phantomBOM, _expandParameters.phantomRoute, seriesSize);

            phantomBOM.bomQty = consumptionBOMQty;
            phantomBOM.bomQtySerie = consumptionBOMQty;
        }

        OprNumNext oprNumNextLastAdded;

        // Now iterate over the routes
        routeSearch = RouteSearch::newBOMCalc(_expandParameters.routeId);

        while (routeSearch && routeSearch.next())
        {
            route = routeSearch.route();

            if (this.canCalculateRouteOperation(route.routeOpr(_expandParameters.itemId, _expandParameters.configId, siteId, null)))
            {
                // Now initialize from the phantom route
                if (oprNumOffset)
                {
                    route.initFromPhantom(_expandParameters.phantomRoute, oprNumOffset - this.adjustOperationNumberOffset(route, oprNumOffset, oprNumNextLastAdded));
                }

                if (route.Level > levelFirst || (route.Level == levelFirst && route.OprNum < oprNumFirst))
                {
                    oprNumFirst = route.OprNum;
                    levelFirst  = route.Level;
                }

                // add to BOMRoutePhantomData
                phantomData.addRoute(route, phantomBOM);

                oprNumNextLastAdded = route.OprNumNext;
            }
        }

        phantomData.parmOprNumFirst(oprNumFirst);

        return phantomData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustOperationNumberOffset</Name>
				<Source><![CDATA[
    private oprNum adjustOperationNumberOffset(Route _route, OprNum _oprNumOffset, OprNumNext _oprNumNextLastAdded)
    {
        if (_oprNumNextLastAdded)
        {
            return _route.OprNum + _oprNumOffset - _oprNumNextLastAdded;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCalculateRouteOperation</Name>
				<Source><![CDATA[
    private boolean canCalculateRouteOperation(RouteOpr routeOpr)
    {
        RouteGroup routeGroup = RouteGroup::find(routeOpr.RouteGroupId);

        if (routeGroup.CalcSetUp 
            || routeGroup.CalcProc 
            || routeGroup.CalcQty)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // Initialize global variables
        setItemId = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBomCalcItem</Name>
				<Source><![CDATA[
    public BOMCalcItem parmBomCalcItem(BOMCalcItem _bomCalcItem = bomCalcItem)
    {
        bomCalcItem = _bomCalcItem;

        return bomCalcItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcDate</Name>
				<Source><![CDATA[
    public TransDate parmCalcDate(TransDate _calcDate = calcDate)
    {
        calcDate = _calcDate;

        return calcDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemProcurementMode</Name>
				<Source><![CDATA[
    public ItemProcurementMode parmItemProcurementMode(ItemProcurementMode _itemProcurementMode = itemProcurementMode)
    {
        itemProcurementMode = _itemProcurementMode;

        return itemProcurementMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanCostingFacade</Name>
				<Source><![CDATA[
    LeanCostingFacadeBase parmLeanCostingFacade(LeanCostingFacadeBase _leanCostingFacade = leanCostingFacade)
    {
        leanCostingFacade = _leanCostingFacade;
        return leanCostingFacade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentInventDim</Name>
				<Source><![CDATA[
    public InventDim parmParentInventDim(InventDim _parentInventDim = parentInventDim)
    {
        parentInventDim = _parentInventDim;

        return parentInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentItemId</Name>
				<Source><![CDATA[
    public ItemId parmParentItemId(ItemId _parentItemId = parentItemId)
    {
        parentItemId = _parentItemId;

        return parentItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductionFlowReferenceRecId</Name>
				<Source><![CDATA[
    public RefRecId parmProductionFlowReferenceRecId(RefRecId _productionFlowReferenceRecId = productionFlowReferenceRecId)
    {
        productionFlowReferenceRecId = _productionFlowReferenceRecId;

        return productionFlowReferenceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSeriesSize</Name>
				<Source><![CDATA[
    public Qty parmSeriesSize(Qty _seriesSize = seriesSize)
    {
        seriesSize = _seriesSize;

        return seriesSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmSiteId(InventSiteId _siteId = siteId)
    {
        siteId = _siteId;

        return siteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMRoutePhantomExpand construct()
    {
        return new BOMRoutePhantomExpand();
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandFromBomCalc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Expands a BOM / route structure during the BOM calculation process.
    /// </summary>
    /// <param name="_bomCalcItem">
    ///    The BOMCalcItem node for which the <c>BOMRoutePhantomData</c> class should be initialized.
    /// </param>
    /// <param name="_leanCostingFacade">
    ///    Lean costing facade instance.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BOMRoutePhantomData</c> class to which the data of the expanded phantom has
    ///    been added.
    /// </returns>
    /// <remarks>
    ///    All the parameters for the expansion process are set according the given <c>BOMCalcItem</c>
    ///    instance.
    /// </remarks>
    public static BOMRoutePhantomData expandFromBomCalc(BOMCalcItem _bomCalcItem,
        LeanCostingFacadeBase _leanCostingFacade = LeanCostingFacade::construct())
    {
        // Initialize data object and class to traverse the phantoms
        BOMRoutePhantomData     phantomData = BOMRoutePhantomData::newFromBOMCalc(_bomCalcItem);
        BOMRoutePhantomExpand   phantomExpand = BOMRoutePhantomExpand::newFromBOMCalc(_bomCalcItem, _leanCostingFacade);

        phantomExpand.parmItemProcurementMode(_bomCalcItem.parmItemProcurementMode());
        phantomExpand.parmProductionFlowReferenceRecId(_bomCalcItem.parmProductionFlowReferenceRecId());
        phantomExpand.parmSiteId(_bomCalcItem.parmSiteId());

        // Start processing, do not pass any phantom information into the class, because this call
        // is the root level
        return phantomExpand.expand(
            phantomData,
            _bomCalcItem.parmBOMId(),
            _bomCalcItem.parmRouteId(),
            _bomCalcItem.parmItemId(),
            _bomCalcItem.parmInventDim().ConfigId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBOMCalc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>BOMRoutePhantomExpand</c> class for a given <c>BOMCalcItem</c>
    ///    instance.
    /// </summary>
    /// <param name="_bomCalcItem">
    ///    The BOMCalcItem node for which the <c>BOMRoutePhantomExpand</c> class should be initialized.
    /// </param>
    /// <param name="_leanCostingFacade">
    ///    Lean costing facade instance.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BOMRoutePhantomExpand</c> class.
    /// </returns>
    /// <remarks>
    ///    The Item ID, calculation date, series size and Site ID are set according to the top level of the
    ///    BOM Calculation.
    /// </remarks>
    public static BOMRoutePhantomExpand newFromBOMCalc(BOMCalcItem  _bomCalcItem,
        LeanCostingFacadeBase _leanCostingFacade = LeanCostingFacade::construct())
    {
        BOMRoutePhantomExpand   phantomExpand;
        phantomExpand = BOMRoutePhantomExpand::construct();

        phantomExpand.parmLeanCostingFacade(_leanCostingFacade);
        phantomExpand.parmParentItemId(_bomCalcItem.parmItemId());
        phantomExpand.parmCalcDate(_bomCalcItem.parmCalcDate());
        phantomExpand.parmSeriesSize(_bomCalcItem.parmSeriesSize());
        phantomExpand.parmParentInventDim(_bomCalcItem.parmInventDim());
        phantomExpand.parmBomCalcItem(_bomCalcItem);

        return phantomExpand;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>