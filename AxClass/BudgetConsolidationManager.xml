<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetConsolidationManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetConsolidationManager</c> class manages the budget consolidation process.
/// </summary>
/// <remarks>
///    The <c>BudgetConsolidationManager</c> class implements the <c>SysPackable</c> interface.
/// </remarks>
public class BudgetConsolidationManager implements SysPackable
{
    ///**********************************
    /// Consolidation processing states across subsidiary companies
    ///**********************************
    // Indicates whether the hierarchy for the budget models to be consolidated are searched
    boolean budgetModelExpanded;
    Set budgetModelHierarchy;
    str budgetModelsQueryRange;
    LedgerConsMode consolidationMode;
    CompanyId consolidatedCompanyId;
    Description consolidationDescription;
    recId ledgerConsolidateHistRecId;
    tableId budgetTransactionLineTableId;

    ///**********************************
    /// Consolidation processing states for one subsidiary company
    ///**********************************
    // Temp table to store consolidation budget transactions
    BudgetTmpConsolidation budgetTmpConsolidation;

    BudgetConsTmpDimensionValueItem consolidationDimensionValueItem;

    // Consolidation ledger accounts
    Map consolidationAccounts;
    CompanyId subsidiaryCompanyId;
    Percent proportion;

    LedgerDimensionBuilder ledgerDimensionBuilder;

    ///**********************************
    /// Consolidation criteria parameters
    ///**********************************
    // Indicates whether to use the consolidation account specified on the accounts in the subsidiary companies
    // as the consolidated accounts
    boolean useConsolidationAccount;
    LedgerConsolidateAccountGroupRecId consolidateAccountGroup;
    BudgetModelId fromBudgetModelId;
    BudgetModelId toBudgetModelId;
    MainAccountNum fromConsolidationAccount;
    MainAccountNum toConsolidationAccount;
    TransDate fromDate;
    TransDate toDate;

    ///**********************************
    /// Other members
    ///**********************************
    recId budgetExchangeRateType;
    real lineNumber;
    NumberSeq consolidatedCompanyBudgetTransNumberSeq;
    boolean nextConsolidatedBudgetTransactionStarted;
    LedgerConsolidate ledgerConsolidate;
    MainAccountNum errorAccount;

    #define.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>consolidateBudgetTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Consolidates budget transactions from subsidiary companies for online or export consolidation mode.
    /// </summary>
    public void consolidateBudgetTransactions()
    {
        switch (consolidationMode)
        {
            case LedgerConsMode::export:
                this.consolidateBudgetTransactionsExport();
                break;

            case LedgerConsMode::Import:
                // Consolidation Import should retrieve consolidation budget transactions from import file.
                throw error(Error::wrongUseOfFunction(funcname()));

            case LedgerConsMode::Online:
                this.consolidateBudgetTransactionsOnline();
                break;

            default:
                // Not implemented.
                Debug::assert(false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidateBudgetTransactionsExport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves budget transactions from subsidiary company database and temporary store in a temp table
    ///    for later export.
    /// </summary>
    private void consolidateBudgetTransactionsExport()
    {
        Query       query;
        QueryRun    queryRun;

        MainAccountNum              mainAccountId;
        MainAccount                 mainAccount;
        MapEnumerator               mapEnumerator;
        int64                       recId;

        BudgetTransactionHeader     budgetTransactionHeader;
        BudgetTransactionLine       budgetTransactionLine;
        boolean                     consolidationBudgetTransactionLineCopied = false;
        Map                         consolidatedDimensionValues;

        MainAccountConsolidateAccount mainAccountConsolidateAccount;

        Debug::assert(subsidiaryCompanyId != '');

        changecompany(subsidiaryCompanyId)
        {
            query = this.prepareBudgetConsolidationQuery();
            queryRun = new QueryRun(query);

            if (hasTableAccess(tablenum(BudgetTransactionHeader))
                && hasTableAccess(tablenum(BudgetTransactionLine))
                && hasTableAccess(tablenum(MainAccount))
                && hasTableAccess(tablenum(DimensionAttribute))
                && hasTableAccess(tablenum(DimensionAttributeValue))
                && hasTableAccess(tablenum(DimensionAttributeLevelValue))
                && hasTableAccess(tablenum(DimensionAttributeValueGroupCombination))
                && hasTableAccess(tablenum(DimensionAttributeValueCombination)))
            {
                while (queryRun.next())
                {
                    consolidationBudgetTransactionLineCopied = false;
                    budgetTransactionHeader = queryRun.get(tablenum(BudgetTransactionHeader)) as BudgetTransactionHeader;
                    budgetTransactionLine = queryRun.get(tablenum(BudgetTransactionLine)) as BudgetTransactionLine;

                    mainAccountId = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(budgetTransactionLine.LedgerDimension);

                    if ((mainAccountId == '') || (this.isAccountInConsolidationAccountRange(mainAccountId) == false))
                    {
                        // Skip this budget transaction line; it either doesn't have a main account or the main account is outside range for the consolidation.
                        continue;
                    }

                    if (useConsolidationAccount)
                    {
                        mainAccount = MainAccount::findByMainAccountId(mainAccountId);

                        if (consolidateAccountGroup)
                        {
                            mainAccountConsolidateAccount = MainAccountConsolidateAccount::findById(mainAccount.RecId, consolidateAccountGroup);

                            if (!mainAccountConsolidateAccount.ConsolidationMainAccount)
                            {
                                // The consolidation account for main account %1 in legal entity %2 for consolidation account group %3 is not specified, so main account %1 was used.  Use the main account from the budget transaction line.
                                info(strfmt("@GLS222072", mainAccountId, subsidiaryCompanyId, LedgerConsolidateAccountGroup::find(consolidateAccountGroup).Name));

                                this.copyToBudgetTmpConsolidation(budgetTransactionHeader, budgetTransactionLine);
                                consolidationBudgetTransactionLineCopied = true;
                            }
                            else
                            {
                                if (this.isAccountInConsolidationAccountRange(mainAccountConsolidateAccount.ConsolidationMainAccount))
                                {
                                    // Consolidation account is within from and to account range, copy to the consolidated budget transactions temp table.
                                    this.copyToBudgetTmpConsolidation(budgetTransactionHeader, budgetTransactionLine);

                                    // Reset ledger account number to the consolidation account
                                    budgetTmpConsolidation.LineAccountNum = mainAccountConsolidateAccount.ConsolidationMainAccount;
                                    budgetTmpConsolidation.MainAccountName = mainAccountConsolidateAccount.Name;

                                    consolidationBudgetTransactionLineCopied = true;
                                }
                            }
                        }
                        else if (mainAccount.ConsolidationMainAccount == '')
                        {
                            // Consolidation account is not specified. Display a message and use the Main Account from the budget transaction line.
                            info(strfmt("@SYS25988", mainAccountId, subsidiaryCompanyId));

                            this.copyToBudgetTmpConsolidation(budgetTransactionHeader, budgetTransactionLine);
                            consolidationBudgetTransactionLineCopied = true;
                        }
                        else
                        {
                            if (this.isAccountInConsolidationAccountRange(mainAccount.ConsolidationMainAccount))
                            {
                                // Consolidation account is within from and to account range, copy to the consolidated budget transactions temp table.
                                this.copyToBudgetTmpConsolidation(budgetTransactionHeader, budgetTransactionLine);

                                // Reset ledger account number to the consolidation account
                                budgetTmpConsolidation.LineAccountNum = mainAccount.ConsolidationMainAccount;

                                consolidationBudgetTransactionLineCopied = true;
                            }
                        }
                    }
                    else
                    {
                        this.copyToBudgetTmpConsolidation(budgetTransactionHeader, budgetTransactionLine);
                        consolidationBudgetTransactionLineCopied = true;
                    }

                    if (consolidationBudgetTransactionLineCopied)
                    {
                        recId++;
                        budgetTmpConsolidation.LocalRecId = recId;

                        // Reset the consolidated dimension according to the consolidation specification
                        consolidatedDimensionValues = ledgerConsolidate.getConsolidatedDimensionValues(budgetTransactionLine.LedgerDimension, budgetTmpConsolidation.LineAccountNum);

                        mapEnumerator = consolidatedDimensionValues.getEnumerator();

                        consolidationDimensionValueItem.LocalConsTrans = budgetTmpConsolidation.LocalRecId;

                        Map sourceDimAttrIdLookupTable = ledgerConsolidate.parmSourceDimAttrIdLookupTable();

                        while (mapEnumerator.moveNext())
                        {
                            consolidationDimensionValueItem.LocalConsDimensionAttribute = sourceDimAttrIdLookupTable.lookup(mapEnumerator.currentKey());
                            consolidationDimensionValueItem.Value = mapEnumerator.currentValue();
                            consolidationDimensionValueItem.insert();
                        }

                        budgetTmpConsolidation.write();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidateBudgetTransactionsOnline</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves budget transactions from a subsidiary company database and saves to consolidated company
    ///    database.
    /// </summary>
    private void consolidateBudgetTransactionsOnline()
    {
        Query       query;
        QueryRun    queryRun;

        MainAccountNum              mainAccountId;
        MainAccountNum              accountNumber;
        MainAccount                 mainAccount;
        Name                        accountName;
        DimensionAttributeValue     dimAttrValueMainAccount;

        BudgetTransactionHeader     budgetTransactionHeader;
        recId                       previousBudgetTransactionHeaderId;
        BudgetTransactionHeader     consolidatedBudgetTransactionHeader;
        BudgetTransactionLine       budgetTransactionLine;
        BudgetTransactionLine       consolidatedBudgetTransactionLine;
        TransactionTxt              transactionTxt = TransactionTxt::construct();
        Map                         consolidatedDimensionValues;

        MainAccountConsolidateAccount mainAccountConsolidateAccount;

        void addConsolidatedBudgetTransaction()
        {
            if (useConsolidationAccount)
            {
                if (consolidateAccountGroup)
                {
                    mainAccountConsolidateAccount = MainAccountConsolidateAccount::findById(mainAccount.RecId, consolidateAccountGroup);

                    if (!mainAccountConsolidateAccount.ConsolidationMainAccount)
                    {
                        mainAccountId = mainAccount.MainAccountId;
                        accountName = mainAccount.Name;
                    }
                    else
                    {
                        mainAccountId = mainAccountConsolidateAccount.ConsolidationMainAccount;
                        accountName = mainAccountConsolidateAccount.Name;
                    }
                }
                else if (!mainAccount.ConsolidationMainAccount)
                {
                    mainAccountId = mainAccount.MainAccountId;
                    accountName = mainAccount.Name;
                }
                else
                {
                    mainAccountId = mainAccount.ConsolidationMainAccount;
                    accountName = mainAccount.Name;
                }
            }
            else
            {
                mainAccountId = mainAccount.MainAccountId;
                accountName = mainAccount.Name;
            }

            // Reset the consolidated dimension according to the consolidation specification
            consolidatedDimensionValues = ledgerConsolidate.getConsolidatedDimensionValues(budgetTransactionLine.LedgerDimension, mainAccountId);

            changecompany(consolidatedCompanyId)
            {
                // Create consolidated budget transactions in the consolidated company.

                consolidatedBudgetTransactionLine = this.createConsolidatedBudgetTransactionLine(budgetTransactionLine, this.parmBudgetExchangeRateType());

                if (consolidatedBudgetTransactionLine.TransactionCurrencyAmount != 0)
                {
                    if (previousBudgetTransactionHeaderId != budgetTransactionHeader.RecId)
                    {
                        consolidatedBudgetTransactionHeader = this.createConsolidatedBudgetTransHeader(budgetTransactionHeader);
                        // Budget transaction header fields validation is not needed for consolidation.
                        consolidatedBudgetTransactionHeader.doInsert();

                        // Reset line number for the new consolidated budget transaction header.
                        this.resetLineNumber();
                    }

                    consolidatedBudgetTransactionLine.BudgetTransactionHeader = consolidatedBudgetTransactionHeader.RecId;
                    consolidatedBudgetTransactionLine.LineNumber = this.getNextLineNumber();

                    accountNumber = LedgerConsolidate::initMainAccount(subsidiaryCompanyId, mainAccountId, accountName, mainAccount.MainAccountId, useConsolidationAccount, errorAccount);
                    mainAccount = MainAccount::findByMainAccountId(accountNumber);

                    dimAttrValueMainAccount = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount), mainAccount.RecId, false, true);

                    consolidatedBudgetTransactionLine.LedgerDimension = ledgerDimensionBuilder.getLedgerDimension(accountNumber, dimAttrValueMainAccount.RecId, dimAttrValueMainAccount.HashKey, consolidatedDimensionValues);

                    transactionTxt.setKey2(accountNumber);
                    transactionTxt.txt();

                    // Budget transaction line fields validation is not needed for consolidation.
                    consolidatedBudgetTransactionLine.doInsert();

                    this.updateLedgerConsolidationHistory(consolidatedBudgetTransactionLine.RecId);
                }
            }
        }

        Debug::assert(subsidiaryCompanyId != '');
        Debug::assert(consolidatedCompanyId != '');

        query = this.prepareBudgetConsolidationQuery();
        queryRun = new QueryRun(query);

        transactionTxt.setType(LedgerTransTxt::LedgerConsolidate);
        transactionTxt.setKey1(subsidiaryCompanyId);

        ttsbegin;

        // Get qualified budget transaction details from subsidiary company.

        while (queryRun.next())
        {
            budgetTransactionHeader = queryRun.get(tablenum(BudgetTransactionHeader)) as BudgetTransactionHeader;
            budgetTransactionLine = queryRun.get(tablenum(BudgetTransactionLine)) as BudgetTransactionLine;

            changecompany(subsidiaryCompanyId)
            {
                mainAccountId = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(budgetTransactionLine.LedgerDimension);
                mainAccount = MainAccount::findByMainAccountId(mainAccountId);
            }

            if ((mainAccountId == '') || (this.isAccountInConsolidationAccountRange(mainAccountId) == false))
            {
                // Skip this budget transaction line; it either doesn't have a main account or the main account is outside range for the consolidation.
                continue;
            }

            if (useConsolidationAccount)
            {
                if (consolidateAccountGroup)
                {
                    mainAccountConsolidateAccount = MainAccountConsolidateAccount::findById(mainAccount.RecId, consolidateAccountGroup);

                    if (!mainAccountConsolidateAccount.ConsolidationMainAccount)
                    {
                        // The consolidation account for main account %1 in legal entity %2 for consolidation account group %3 is not specified, so main account %1 was used.  Use the main account from the budget transaction line.
                        info(strfmt("@GLS222072", mainAccountId, subsidiaryCompanyId, LedgerConsolidateAccountGroup::find(consolidateAccountGroup).Name));
                        addConsolidatedBudgetTransaction();
                    }
                    else
                    {
                        if (this.isAccountInConsolidationAccountRange(mainAccountConsolidateAccount.ConsolidationMainAccount))
                        {
                            // Consolidation account is within from and to account range, add to the consolidated company.
                            addConsolidatedBudgetTransaction();
                        }
                    }
                }
                else if (mainAccount.ConsolidationMainAccount == '')
                {
                    // Consolidation account is not specified. Display a message and use the Main Account from the budget transaction line.
                    info(strfmt("@SYS25988", mainAccountId, subsidiaryCompanyId));
                    addConsolidatedBudgetTransaction();
                }
                else
                {
                    if (this.isAccountInConsolidationAccountRange(mainAccount.ConsolidationMainAccount))
                    {
                        // Consolidation account is within from and to account range, add to the consolidated company.
                        addConsolidatedBudgetTransaction();
                    }
                }
            }
            else
            {
                addConsolidatedBudgetTransaction();
            }

            if (consolidatedBudgetTransactionLine.TransactionCurrencyAmount != 0)
            {
                previousBudgetTransactionHeaderId = budgetTransactionHeader.RecId;
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToBudgetTmpConsolidation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the specified <c>BudgetTransactionHeader</c> and <c>BudgetTransactionLine</c> records to the
    ///    current <c>BudgetTmpConsolidation</c> table buffer.
    /// </summary>
    /// <param name="_budgetTransactionHeader">
    ///    The <c>BudgetTransactionHeader</c> record from which to copy.
    /// </param>
    /// <param name="_budgetTransactionLine">
    ///    The <c>BudgetTransactionLine</c> record from which to copy.
    /// </param>
    private void copyToBudgetTmpConsolidation(BudgetTransactionHeader _budgetTransactionHeader, BudgetTransactionLine _budgetTransactionLine)
    {
        MainAccount mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(_budgetTransactionLine.LedgerDimension);

        Debug::assert(subsidiaryCompanyId != '');

        budgetTmpConsolidation.clear();
        budgetTmpConsolidation.BudgetModel = _budgetTransactionHeader.BudgetModelId;
        budgetTmpConsolidation.DefaultDate = _budgetTransactionHeader.Date;
        budgetTmpConsolidation.SubsidiaryCompany = subsidiaryCompanyId;
        budgetTmpConsolidation.TransactionNumber = _budgetTransactionHeader.TransactionNumber;
        budgetTmpConsolidation.TransactionType = _budgetTransactionHeader.BudgetTransactionType;
        budgetTmpConsolidation.LineAccountNum = mainAccount.MainAccountId;
        budgetTmpConsolidation.MainAccountName = mainAccount.Name;
        budgetTmpConsolidation.OriginalMainAccountId = mainAccount.MainAccountId;
        budgetTmpConsolidation.LineAmountCur = _budgetTransactionLine.TransactionCurrencyAmount;
        budgetTmpConsolidation.LineCurrency = _budgetTransactionLine.TransactionCurrency;
        budgetTmpConsolidation.LineDate = _budgetTransactionLine.Date;
        budgetTmpConsolidation.LineBudgetType = _budgetTransactionLine.BudgetType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToBudgetTransactionHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies header-level field values from the current <c>BudgetTmpConsolidation</c> table buffer to a
    ///    <c>BudgetTransactionHeader</c> record.
    /// </summary>
    /// <returns>
    ///    A <c>BudgetTransactionHeader</c> record.
    /// </returns>
    private BudgetTransactionHeader copyToBudgetTransactionHeader()
    {
        BudgetTransactionHeader budgetTransactionHeader;

        budgetTransactionHeader.BudgetModelId = budgetTmpConsolidation.BudgetModel;
        budgetTransactionHeader.BudgetModelType = HeadingSub::Heading;
        budgetTransactionHeader.BudgetSubModelId = budgetTransactionHeader.BudgetModelId;
        budgetTransactionHeader.Date = budgetTmpConsolidation.DefaultDate;
        budgetTransactionHeader.BudgetTransactionType = budgetTmpConsolidation.TransactionType;
        budgetTransactionHeader.TransactionNumber = budgetTmpConsolidation.TransactionNumber;

        return budgetTransactionHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToBudgetTransactionLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies line-level field values from the current <c>BudgetTmpConsolidation</c> table buffer to a
    ///    <c>BudgetTransactionLine</c> record.
    /// </summary>
    /// <returns>
    ///    A <c>BudgetTransactionLine</c> record.
    /// </returns>
    private BudgetTransactionLine copyToBudgetTransactionLine()
    {
        BudgetTransactionLine budgetTransactionLine;

        budgetTransactionLine.TransactionCurrencyAmount = budgetTmpConsolidation.LineAmountCur;
        budgetTransactionLine.TransactionCurrency = budgetTmpConsolidation.LineCurrency;
        budgetTransactionLine.Date = budgetTmpConsolidation.LineDate;
        budgetTransactionLine.BudgetType = budgetTmpConsolidation.LineBudgetType;

        return budgetTransactionLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConsolidatedBudgetTransactionLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a consolidated <c>BudgetTransactionLine</c> record by copying a subsidiary <c>BudgetTransactionLine</c> record.
    /// </summary>
    /// <param name="_subsidiaryBudgetTransactionLine">
    /// A subsidiary <c>BudgetTransactionLine</c> record to copy from.
    /// </param>
    /// <param name="_exchangeRateType">
    /// The exchange rate type to use.
    /// </param>
    /// <returns>
    /// A consolidated <c>BudgetTransactionLine</c> record.
    /// </returns>
    private BudgetTransactionLine createConsolidatedBudgetTransactionLine(BudgetTransactionLine _subsidiaryBudgetTransactionLine, recId _exchangeRateType = 0)
    {
        BudgetTransactionLine consolidatedBudgetTransactionLine;

        consolidatedBudgetTransactionLine.TransactionCurrency = _subsidiaryBudgetTransactionLine.TransactionCurrency;
        consolidatedBudgetTransactionLine.Date = _subsidiaryBudgetTransactionLine.Date;
        consolidatedBudgetTransactionLine.BudgetType = _subsidiaryBudgetTransactionLine.BudgetType;
        consolidatedBudgetTransactionLine.Price = _subsidiaryBudgetTransactionLine.Price;
        consolidatedBudgetTransactionLine.Quantity = _subsidiaryBudgetTransactionLine.Quantity;

        if (BudgetTransactionManager::validateCurrency(consolidatedBudgetTransactionLine.TransactionCurrency))
        {
            consolidatedBudgetTransactionLine.TransactionCurrencyAmount = CurrencyExchangeHelper::amount(_subsidiaryBudgetTransactionLine.TransactionCurrencyAmount * proportion / 100, _subsidiaryBudgetTransactionLine.TransactionCurrency);

            consolidatedBudgetTransactionLine.AccountingCurrencyAmount = BudgetTransactionManager::calculateTransAmountToAccountingAmount(
                consolidatedBudgetTransactionLine.TransactionCurrencyAmount,
                _subsidiaryBudgetTransactionLine.TransactionCurrency,
                consolidatedBudgetTransactionLine.Date,
                _exchangeRateType);
        }
        else
        {
            throw error("@SYS135429");
        }

        return consolidatedBudgetTransactionLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConsolidatedBudgetTransHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a consolidated <c>BudgetTransactionHeader</c> record by copying a subsidiary
    ///    <c>BudgetTransactionHeader</c> record.
    /// </summary>
    /// <param name="_subsidiaryBudgetTransactionHeader">
    ///    A subsidiary <c>BudgetTransactionHeader</c> record from which to copy.
    /// </param>
    /// <returns>
    ///    A consolidated <c>BudgetTransactionHeader</c> record.
    /// </returns>
    private BudgetTransactionHeader createConsolidatedBudgetTransHeader(BudgetTransactionHeader _subsidiaryBudgetTransactionHeader)
    {
        BudgetTransactionHeader consolidatedBudgetTransactionHeader;

        consolidatedBudgetTransactionHeader.BudgetModelId = _subsidiaryBudgetTransactionHeader.BudgetModelId;
        consolidatedBudgetTransactionHeader.BudgetModelType = _subsidiaryBudgetTransactionHeader.BudgetModelType;
        consolidatedBudgetTransactionHeader.BudgetSubModelId = _subsidiaryBudgetTransactionHeader.BudgetSubModelId;
        consolidatedBudgetTransactionHeader.BudgetModelDataAreaId = curext();

        consolidatedBudgetTransactionHeader.Date = _subsidiaryBudgetTransactionHeader.Date;
        consolidatedBudgetTransactionHeader.BudgetTransactionType = _subsidiaryBudgetTransactionHeader.BudgetTransactionType;

        consolidatedBudgetTransactionHeader.PrimaryLedger = Ledger::current();

        // Transaction code can be different or not defined in consolidated company and is not required for consolidation.
        consolidatedBudgetTransactionHeader.BudgetTransactionCode = 0;
        // All consolidated budget transactions should be completed.
        consolidatedBudgetTransactionHeader.TransactionStatus = BudgetTransactionStatus::Completed;
        consolidatedBudgetTransactionHeader.TransactionNumber = this.getNextTransactionNumber();

        return consolidatedBudgetTransactionHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandBudgetModelHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Expands sub budget model hierarchies for budget models in the consolidation criteria range.
    /// </summary>
    /// <remarks>
    ///    For better performance, run this method on the server.
    /// </remarks>
    private void expandBudgetModelHierarchy()
    {
        SetEnumerator budgetModels;
        boolean first = true;
        #define.Comma(',')

        if (!budgetModelExpanded)
        {
            Debug::assert(consolidatedCompanyId != '');

            changecompany(consolidatedCompanyId)
            {
                budgetModelsQueryRange = SysQuery::valueEmptyString();

                // Budget models must exist in the consolidated company.
                budgetModelHierarchy = BudgetModel::getBudgetModels(fromBudgetModelId, toBudgetModelId, true);

                budgetModels = budgetModelHierarchy.getEnumerator();

                while (budgetModels.moveNext())
                {
                    if (first)
                    {
                        budgetModelsQueryRange = budgetModels.current();
                        first = false;
                    }
                    else
                    {
                        budgetModelsQueryRange += #Comma + budgetModels.current();
                    }
                }

                budgetModelExpanded = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportConsolidatedBudgetTransToList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Exports the current consolidated budget transaction data in the <c>BudgetTmpConsolidation</c> table
    ///    to a list.
    /// </summary>
    /// <param name="_budgetRecordIndicator">
    ///    An indicator that can be used to identify the type of exported data is consolidated budget data.
    /// </param>
    /// <returns>
    ///    A list of containers.
    /// </returns>
    /// <remarks>
    ///    Each container in the returned list contains field data from one <c>BudgetTransactionHeader</c>
    ///    record and one <c>BudgetTransactionLine</c> record.
    /// </remarks>
    public List exportConsolidatedBudgetTransToList(int _budgetRecordIndicator)
    {
        List consolidatedBudgetTransactionsList = new List(Types::Container);

        while select budgetTmpConsolidation
        {
            consolidatedBudgetTransactionsList.addEnd([_budgetRecordIndicator,
                         budgetTmpConsolidation.TransactionNumber,
                         budgetTmpConsolidation.DefaultDate,
                         budgetTmpConsolidation.BudgetModel,
                         budgetTmpConsolidation.TransactionType,
                         budgetTmpConsolidation.LineDate,
                         budgetTmpConsolidation.LineAccountNum,
                         budgetTmpConsolidation.LineCurrency,
                         budgetTmpConsolidation.LineAmountCur,
                         budgetTmpConsolidation.LineBudgetType,
                         budgetTmpConsolidation.LocalRecId]
                         );

            budgetTmpConsolidation.delete();
        }

        return consolidatedBudgetTransactionsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the next <c>BudgetTransactionLine</c> line number per the <c>BudgetTransactionHeader</c>
    ///    record.
    /// </summary>
    /// <returns>
    ///    The next <c>BudgetTransactionLine</c> line number per the <c>BudgetTransactionHeader</c> record.
    /// </returns>
    /// <remarks>
    ///    This method skips zero as a possible next line number.
    /// </remarks>
    private real getNextLineNumber()
    {
        lineNumber++;

        if (lineNumber == 0)
        {
            // Transaction line number cannot be zero.
            lineNumber++;
        }

        return lineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextTransactionNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the next budget transaction number.
    /// </summary>
    /// <returns>
    ///    The next budget transaction number.
    /// </returns>
    private Num getNextTransactionNumber()
    {
        if (consolidatedCompanyBudgetTransNumberSeq == null)
        {
            if (BudgetTransactionManager::checkBudgetTransactionNumberSequence() == true)
            {
                // The number sequence for budget transactions is valid.
                consolidatedCompanyBudgetTransNumberSeq = NumberSeq::newGetNum(BudgetParameters::numRefBudgetTransactionId());
            }
            else
            {
                // The number sequence validation failed. Abort the consolidation.
                throw error("@SYS135429");
            }
        }

        // Get the next number in the sequence for the consolidated budget transaction header.
        return consolidatedCompanyBudgetTransNumberSeq.num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>importBudgetConsDimensionValueItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Imports the subsidiary budget dimension values that are stored in the specified container to the
    ///    current <c>BudgetConsolidationDimensionValueItem</c> table buffer.
    /// </summary>
    /// <param name="_budgetConsolidationDimensionValueItem">
    ///    A container that holds the budget dimension values.
    /// </param>
    public void importBudgetConsDimensionValueItem(container _budgetConsolidationDimensionValueItem)
    {
        [consolidationDimensionValueItem.Value,
                consolidationDimensionValueItem.LocalConsDimensionAttribute,
                consolidationDimensionValueItem.LocalConsTrans] = _budgetConsolidationDimensionValueItem;

        consolidationDimensionValueItem.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>importBudgetTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Imports subsidiary budget transaction data stored in the specified container to the current
    ///    <c>BudgetTmpConsolidation</c> table buffer.
    /// </summary>
    /// <param name="_subsidiaryBudgetTransaction">
    ///    A container that contains subsidiary budget transaction data.
    /// </param>
    public void importBudgetTransaction(container _subsidiaryBudgetTransaction)
    {
        [budgetTmpConsolidation.TransactionNumber,
         budgetTmpConsolidation.DefaultDate,
         budgetTmpConsolidation.BudgetModel,
         budgetTmpConsolidation.TransactionType,
         budgetTmpConsolidation.LineDate,
         budgetTmpConsolidation.LineAccountNum,
         budgetTmpConsolidation.LineCurrency,
         budgetTmpConsolidation.LineAmountCur,
         budgetTmpConsolidation.LineBudgetType,
         budgetTmpConsolidation.LocalRecId] = _subsidiaryBudgetTransaction;

        budgetTmpConsolidation.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccountInConsolidationAccountRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the consolidation account on the specified ledger account is in the
    ///    consolidation account range.
    /// </summary>
    /// <param name="_mainAccountId">
    ///    The main account whose consolidation account is to be checked.
    /// </param>
    /// <returns>
    ///    true if the ledger account is in the consolidation account range; otherwise, false.
    /// </returns>
    private boolean isAccountInConsolidationAccountRange(MainAccountNum _mainAccountId)
    {
        return (_mainAccountId >= fromConsolidationAccount &&
               (!toConsolidationAccount || _mainAccountId <= toConsolidationAccount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        budgetTransactionLineTableId = tablenum(BudgetTransactionLine);
        budgetModelExpanded = false;
        budgetModelHierarchy = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        List        budgetTmpConsolidationRecordList = new List(Types::Record);
        List        listDimensionValues = new List(Types::Record);
        MainAccount mainAccount;

        while select budgetTmpConsolidation
        {
            if (useConsolidationAccount)
            {
                // Collect consolidation accounts if consolidation process requires to use consolidation accounts.
                if (consolidationAccounts && !consolidationAccounts.exists(budgetTmpConsolidation.LineAccountNum))
                {
                    mainAccount = MainAccount::findByMainAccountId(budgetTmpConsolidation.LineAccountNum);
                    consolidationAccounts.insert(budgetTmpConsolidation.LineAccountNum, mainAccount.data());
                }
            }

            budgetTmpConsolidationRecordList.addEnd(budgetTmpConsolidation.data());
            budgetTmpConsolidation.delete();
        }

        while select consolidationDimensionValueItem
        {
            listDimensionValues.addEnd(consolidationDimensionValueItem.data());
        }

        return [#CurrentVersion, budgetTmpConsolidationRecordList.pack(), listDimensionValues.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetExchangeRateType</Name>
				<Source><![CDATA[
    public recId parmBudgetExchangeRateType(recId _budgetExchangeRateType = budgetExchangeRateType)
    {
        budgetExchangeRateType = _budgetExchangeRateType;

        return budgetExchangeRateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsolidateAccountGroup</Name>
				<Source><![CDATA[
    public LedgerConsolidateAccountGroupRecId parmConsolidateAccountGroup(LedgerConsolidateAccountGroupRecId _consolidateAccountGroup = consolidateAccountGroup)
    {
        consolidateAccountGroup = _consolidateAccountGroup;

        return consolidateAccountGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsolidatedCompany</Name>
				<Source><![CDATA[
    public CompanyId parmConsolidatedCompany(CompanyId _consolidatedCompanyId = consolidatedCompanyId)
    {
        consolidatedCompanyId = _consolidatedCompanyId;

        return consolidatedCompanyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsolidationAccounts</Name>
				<Source><![CDATA[
    public Map parmConsolidationAccounts(Map _consolidationAccounts = consolidationAccounts)
    {
        consolidationAccounts = _consolidationAccounts;

        return consolidationAccounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsolidationHistoryRecId</Name>
				<Source><![CDATA[
    public recId parmConsolidationHistoryRecId(recId _ledgerConsolidateHistRecId = ledgerConsolidateHistRecId)
    {
        ledgerConsolidateHistRecId = _ledgerConsolidateHistRecId;

        return ledgerConsolidateHistRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsolidationMode</Name>
				<Source><![CDATA[
    public LedgerConsMode parmConsolidationMode(LedgerConsMode _consolidationMode = consolidationMode)
    {
        consolidationMode = _consolidationMode;

        return consolidationMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    public Description parmDescription(Description _consolidationDescription = consolidationDescription)
    {
        consolidationDescription = _consolidationDescription;

        return consolidationDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmErrorAccount</Name>
				<Source><![CDATA[
    public MainAccountNum parmErrorAccount(MainAccountNum _errorAccount = errorAccount)
    {
        errorAccount = _errorAccount;

        return errorAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromBudgetModelId</Name>
				<Source><![CDATA[
    public BudgetModelId parmFromBudgetModelId(BudgetModelId _fromBudgetModelId = fromBudgetModelId)
    {
        fromBudgetModelId = _fromBudgetModelId;

        return fromBudgetModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromConsolidationAccount</Name>
				<Source><![CDATA[
    public MainAccountNum parmFromConsolidationAccount(MainAccountNum _fromConsolidationAccount = fromConsolidationAccount)
    {
        fromConsolidationAccount = _fromConsolidationAccount;

        return fromConsolidationAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerConsolidate</Name>
				<Source><![CDATA[
    public LedgerConsolidate parmLedgerConsolidate(LedgerConsolidate _ledgerConsolidate = ledgerConsolidate)
    {
        ledgerConsolidate = _ledgerConsolidate;

        return ledgerConsolidate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionBuilder</Name>
				<Source><![CDATA[
    public LedgerDimensionBuilder parmLedgerDimensionBuilder(LedgerDimensionBuilder _ledgerDimensionBuilder = ledgerDimensionBuilder)
    {
        ledgerDimensionBuilder = _ledgerDimensionBuilder;

        return ledgerDimensionBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProportion</Name>
				<Source><![CDATA[
    public Percent parmProportion(Percent _proportion = proportion)
    {
        proportion = _proportion;

        return proportion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubsidiaryCompany</Name>
				<Source><![CDATA[
    public CompanyId parmSubsidiaryCompany(CompanyId _subsidiaryCompanyId = subsidiaryCompanyId)
    {
        subsidiaryCompanyId = _subsidiaryCompanyId;

        return subsidiaryCompanyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToBudgetModelId</Name>
				<Source><![CDATA[
    public BudgetModelId parmToBudgetModelId(BudgetModelId _toBudgetModelId = toBudgetModelId)
    {
        toBudgetModelId = _toBudgetModelId;

        return toBudgetModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToConsolidationAccount</Name>
				<Source><![CDATA[
    public MainAccountNum parmToConsolidationAccount(MainAccountNum _toConsolidationAccount = toConsolidationAccount)
    {
        toConsolidationAccount = _toConsolidationAccount;

        return toConsolidationAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseConsolidationAccount</Name>
				<Source><![CDATA[
    public boolean parmUseConsolidationAccount(boolean _useConsolidationAccount = useConsolidationAccount)
    {
        useConsolidationAccount = _useConsolidationAccount;

        return useConsolidationAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetConsTmpDimensionValueItem</Name>
				<Source><![CDATA[
    internal BudgetConsTmpDimensionValueItem parmBudgetConsTmpDimensionValueItem(BudgetConsTmpDimensionValueItem _consolidationDimensionValueItem = consolidationDimensionValueItem)
    {
        consolidationDimensionValueItem = _consolidationDimensionValueItem;

        return consolidationDimensionValueItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareBudgetConsolidationQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares a <c>Query</c> to retrieve qualified subsidiary budget transaction data for consolidation.
    /// </summary>
    /// <returns>
    ///    A <c>Query</c> to retrieve qualified subsidiary budget transaction data for consolidation.
    /// </returns>
    private Query prepareBudgetConsolidationQuery()
    {
        QueryBuildDataSource budgetTransactionHeaderDataSource;
        QueryBuildDataSource budgetTransactionLineDataSource;
        Query query = new Query();

        this.expandBudgetModelHierarchy();

        budgetTransactionHeaderDataSource = query.addDataSource(tablenum(BudgetTransactionHeader));

        // Restrict budget transactions to those with the current ledger.
        budgetTransactionHeaderDataSource.addRange(fieldnum(BudgetTransactionHeader, PrimaryLedger)).value(SysQuery::value(Ledger::current()));

        budgetTransactionHeaderDataSource.addRange(fieldnum(BudgetTransactionHeader, BudgetModelId)).value(budgetModelsQueryRange);
        budgetTransactionHeaderDataSource.addRange(fieldnum(BudgetTransactionHeader, TransactionStatus)).value(SysQuery::value(BudgetTransactionStatus::Completed));
        budgetTransactionHeaderDataSource.addOrderByField(fieldnum(BudgetTransactionHeader, TransactionNumber));

        budgetTransactionLineDataSource = budgetTransactionHeaderDataSource.addDataSource(tablenum(BudgetTransactionLine));
        budgetTransactionLineDataSource.relations(true);
        budgetTransactionLineDataSource.addRange(fieldnum(BudgetTransactionLine, Date)).value(SysQuery::range(fromDate, toDate));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeConsolidatedBudgetTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the consolidated <c>BudgetTransactionHeader</c> and <c>BudgetTransactionLine</c> records
    ///    and their <c>LedgerConsolidateHistRef</c> reference records.
    /// </summary>
    public void removeConsolidatedBudgetTransactions()
    {
        MainAccount                         mainAccount;
        DimensionAttributeValueCombination  dimAttrValueCombination;

        BudgetTransactionHeader             budgetTransactionHeader;
        BudgetTransactionLine               budgetTransactionLine;
        LedgerConsolidateHistRef            ledgerConsolidateHistRef;
        LedgerConsolidateHist               ledgerConsolidateHist;
        SetEnumerator                       budgetModels;

        LedgerRecId                         ledgerRecId;
        LedgerChartOfAccountsRecId          ledgerChartOfAccountsRecId;

        Debug::assert(consolidatedCompanyId != '');
        Debug::assert(subsidiaryCompanyId != '');

        // There exists a one to one relationship between the budget and consolidation record.
        // We only know which company a budget record originated in by using the consolidation record.

        changecompany(consolidatedCompanyId)
        {
            ledgerRecId = Ledger::current();
            ledgerChartOfAccountsRecId = LedgerChartOfAccounts::current();

            this.expandBudgetModelHierarchy();

            budgetModels = budgetModelHierarchy.getEnumerator();

            ttsbegin;

            // The delete action to BudgetTransactionLineReverse can be skipped as the table is not populated through consolidation.
            budgetTransactionLine.skipDeleteActions(true);

            // The delete method to update budget control can be skipped as budget control is not allowed in Consolidation companies.
            budgetTransactionLine.skipDataMethods(true);
            budgetTransactionLine.skipEvents(true);

            while (budgetModels.moveNext())
            {
                delete_from budgetTransactionLine
                    where  budgetTransactionLine.Date   >= fromDate
                        && budgetTransactionLine.Date   <= toDate
                    exists join budgetTransactionHeader
                        where  budgetTransactionHeader.BudgetModelId    == budgetModels.current()
                            && budgetTransactionHeader.PrimaryLedger    == ledgerRecId
                            && budgetTransactionHeader.RecId            == budgetTransactionLine.BudgetTransactionHeader
                    exists join ledgerConsolidateHist
                        where ledgerConsolidateHist.CompanyIdOrigin == subsidiaryCompanyId
                        exists join ledgerConsolidateHistRef
                            where ledgerConsolidateHistRef.TransTableId == budgetTransactionLineTableId
                                && ledgerConsolidateHistRef.TransRecid  == budgetTransactionLine.RecId
                                && ledgerConsolidateHistRef.RefRecId    == ledgerConsolidateHist.RecId
                    exists join dimAttrValueCombination
                        where dimAttrValueCombination.RecId == budgetTransactionLine.LedgerDimension
                            exists join mainAccount
                                where mainAccount.LedgerChartOfAccounts == ledgerChartOfAccountsRecId
                                    && mainAccount.RecId                == dimAttrValueCombination.MainAccount
                                    && mainAccount.MainAccountId        >= fromConsolidationAccount
                                    && (!toConsolidationAccount || mainAccount.MainAccountId <= toConsolidationAccount);
            }

            //
            // Since budget transaction lines have been removed, their budget transaction headers
            // no longer have any budget transaction lines.
            // Remove those empty budget transaction headers and related data.
            //

            // The delete actions can be skipped as the lines were already removed
            // and the ReasonTableRef table is not populated through consolidation.
            budgetTransactionHeader.skipDeleteActions(true);

            // The delete method to update the number sequence can be skipped as it will not execute for completed transactions.
            budgetTransactionHeader.skipDataMethods(true);
            budgetTransactionHeader.skipEvents(true);

            delete_from budgetTransactionHeader
                where budgetTransactionHeader.PrimaryLedger == ledgerRecId
                notexists join budgetTransactionLine
                    where budgetTransactionLine.BudgetTransactionHeader == budgetTransactionHeader.RecId;

            //
            // Since the budget transaction lines have been removed, their consolidation history reference
            // records should be removed also.
            //
            delete_from ledgerConsolidateHistRef
                where ledgerConsolidateHistRef.TransTableId == budgetTransactionLineTableId
                exists join ledgerConsolidateHist
                    where ledgerConsolidateHist.CompanyIdOrigin == subsidiaryCompanyId
                        && ledgerConsolidateHistRef.RefRecId    == ledgerConsolidateHist.RecId
                notexists join budgetTransactionLine
                    where budgetTransactionLine.RecId == ledgerConsolidateHistRef.TransRecid;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the next <c>BudgetTransactionLine</c> line number.
    /// </summary>
    private void resetLineNumber()
    {
        lineNumber = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveConsolidatedBudgetTransactons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves imported budget transaction data to the consolidated company database.
    /// </summary>
    /// <param name="_sourceToConsDimAttrTranslation">
    /// Holds the mappings for the dimension attributes from the subsidiary company to the consolidation company.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Unknown, online, or export consolidation mode is not valid.
    /// </exception>
    public void saveConsolidatedBudgetTransactons(Map _sourceToConsDimAttrTranslation)
    {
        switch (consolidationMode)
        {
            case LedgerConsMode::export:
                throw error(Error::wrongUseOfFunction(funcname()));

            case LedgerConsMode::Import:
                this.saveImportedBudgetTransactions(_sourceToConsDimAttrTranslation);
                break;

            case LedgerConsMode::Online:
                // Subsidiary budget transactions are already copied to the consolidated company in the consolidation process.
                break;

            default:
                // Not implemented.
                Debug::assert(false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveImportedBudgetTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves imported budget transaction data stored in the current <c>BudgetTmpConsolidation</c> table buffer
    /// to the database in the consolidated company.
    /// </summary>
    /// <param name="_sourceToConsDimAttrTranslation">
    /// Holds the mappings for the dimension attributes from the subsidiary company to the consolidation company.
    /// </param>
    private void saveImportedBudgetTransactions(Map _sourceToConsDimAttrTranslation)
    {
        BudgetTransactionHeader importedBudgetTransactionHeader;
        BudgetTransactionHeader consolidatedBudgetTransactionHeader;
        BudgetTransactionLine   importedBudgetTransactionLine;
        BudgetTransactionLine   consolidatedBudgetTransactionLine;
        CompanyId               previousCompany;
        BudgetTransactionId     previousTransactionNumber;
        TransactionTxt          transactionTxt = TransactionTxt::construct();
        MainAccountNum          mainAccountId;

        recId                   destinationDimAttrId;
        Map                     dimensionValues = new Map(Types::Int64, Types::String);
        MainAccount             mainAccount;
        DimensionAttributeValue dimAttrValueMainAccount;

        Debug::assert(consolidatedCompanyId != '');

        changecompany(consolidatedCompanyId)
        {
            transactionTxt.setType(LedgerTransTxt::LedgerConsolidate);
            transactionTxt.setKey1(subsidiaryCompanyId);

            ttsbegin;

            while select budgetTmpConsolidation
                order by budgetTmpConsolidation.SubsidiaryCompany, budgetTmpConsolidation.TransactionNumber
            {
                if (previousCompany != budgetTmpConsolidation.SubsidiaryCompany ||
                    (previousCompany == budgetTmpConsolidation.SubsidiaryCompany &&
                        previousTransactionNumber != budgetTmpConsolidation.TransactionNumber))
                {
                    importedBudgetTransactionHeader = this.copyToBudgetTransactionHeader();
                    consolidatedBudgetTransactionHeader = this.createConsolidatedBudgetTransHeader(importedBudgetTransactionHeader);
                    consolidatedBudgetTransactionHeader.doInsert();

                    // Reset line number for the new consolidated budget transaction header.
                    this.resetLineNumber();
                }

                importedBudgetTransactionLine = this.copyToBudgetTransactionLine();

                mainAccountId = LedgerConsolidate::initMainAccount(subsidiaryCompanyId, budgetTmpConsolidation.LineAccountNum, budgetTmpConsolidation.MainAccountName, budgetTmpConsolidation.OriginalMainAccountId, useConsolidationAccount, errorAccount);

                transactionTxt.setKey2(budgetTmpConsolidation.LineAccountNum);
                transactionTxt.txt();
                consolidatedBudgetTransactionLine = this.createConsolidatedBudgetTransactionLine(importedBudgetTransactionLine);

                while select LocalConsDimensionAttribute, Value from consolidationDimensionValueItem
                    where consolidationDimensionValueItem.LocalConsTrans == budgetTmpConsolidation.LocalRecId
                {
                    destinationDimAttrId = _sourceToConsDimAttrTranslation.lookup(consolidationDimensionValueItem.LocalConsDimensionAttribute);
                    dimensionValues.insert(destinationDimAttrId, consolidationDimensionValueItem.Value);
                }

                // Set the LedgerDimension
                mainAccount = MainAccount::findByMainAccountId(mainAccountId);
                dimAttrValueMainAccount = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount), mainAccount.RecId, false, true);
                consolidatedBudgetTransactionLine.LedgerDimension = ledgerConsolidate.getLedgerDimensionFromValues(mainAccountId, dimAttrValueMainAccount.RecId, dimAttrValueMainAccount.HashKey, dimensionValues);

                consolidatedBudgetTransactionLine.BudgetTransactionHeader = consolidatedBudgetTransactionHeader.RecId;
                consolidatedBudgetTransactionLine.LineNumber = this.getNextLineNumber();
                consolidatedBudgetTransactionLine.doInsert();

                this.updateLedgerConsolidationHistory(consolidatedBudgetTransactionLine.RecId);

                previousCompany = budgetTmpConsolidation.SubsidiaryCompany;
                previousTransactionNumber = budgetTmpConsolidation.TransactionNumber;
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedBudgetConsolidationMangaer)
    {
        int             version = conpeek(_packedBudgetConsolidationMangaer, 1);
        container       packedBudgetTmpConsolidationRecordList;
        List            unpackedBudgetTmpConsolidationRecordList;
        ListEnumerator  unpackedBudgetTmpConsolidationRecords;

        container       packedListDimensionValues;
        List            unpackedListDimensionValues;
        ListEnumerator  unpackedListDimensionValuesEnumerator;

        switch (version)
        {
            case #CurrentVersion:
                // Extract the packed values.
                [version, packedBudgetTmpConsolidationRecordList, packedListDimensionValues] = _packedBudgetConsolidationMangaer;
                break;

            default:
                return false;
        }

        if (packedBudgetTmpConsolidationRecordList != connull())
        {
            // Unpack the packed list of BudgetTmpConsolidation records.
            unpackedBudgetTmpConsolidationRecordList = List::create(packedBudgetTmpConsolidationRecordList);
            unpackedBudgetTmpConsolidationRecords = unpackedBudgetTmpConsolidationRecordList.getEnumerator();

            while (unpackedBudgetTmpConsolidationRecords.moveNext())
            {
                budgetTmpConsolidation.clear();
                budgetTmpConsolidation.data(unpackedBudgetTmpConsolidationRecords.current());
                budgetTmpConsolidation.doInsert();
            }
        }

        if (packedListDimensionValues != connull())
        {
            // Unpack the packed list of BudgetConsTmpDimensionValueItem records.
            unpackedListDimensionValues = List::create(packedListDimensionValues);
            unpackedListDimensionValuesEnumerator = unpackedListDimensionValues.getEnumerator();

            while (unpackedListDimensionValuesEnumerator.moveNext())
            {
                consolidationDimensionValueItem.clear();
                consolidationDimensionValueItem.data(unpackedListDimensionValuesEnumerator.current());
                consolidationDimensionValueItem.RecId = 0;
                consolidationDimensionValueItem.doInsert();
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerConsolidationHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the ledger consolidation history references in the <c>LedgerConsolidateHist</c> and
    ///    <c>LedgerConsolidateHistRef</c> tables with the specified consolidated budget transaction.
    /// </summary>
    /// <param name="_consolidatedBudgetTransactionLineRecId">
    ///    The record ID of the consolidated <c>BudgetTransactionLine</c> record ID.
    /// </param>
    private void updateLedgerConsolidationHistory(recId _consolidatedBudgetTransactionLineRecId)
    {
        Debug::assert(this.parmConsolidationHistoryRecId() != 0);

        LedgerConsolidate::updateHistRef(this.parmConsolidationHistoryRecId(), budgetTransactionLineTableId, _consolidatedBudgetTransactionLineRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BudgetConsolidationManager</c> class using the data in the specified
    ///    container.
    /// </summary>
    /// <param name="_packedBudgetConsolidationManager">
    ///    A container that contains a packed data of an instance of the <c>BudgetConsolidationManager</c>
    ///    class.
    /// </param>
    /// <returns>
    ///    An instance of <c>BudgetConsolidationManager</c> class.
    /// </returns>
    public static BudgetConsolidationManager create(container _packedBudgetConsolidationManager)
    {
        BudgetConsolidationManager budgetConsolidationManager = new BudgetConsolidationManager();

        budgetConsolidationManager.unpack(_packedBudgetConsolidationManager);

        return budgetConsolidationManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAllConsolidatedBudgetTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes all consolidated <c>BudgetTransactionHeader</c> and <c>BudgetTransactionLine</c> records
    ///    and their <c>LedgerConsolidateHistRef</c> reference records for the specified consolidation history
    ///    record.
    /// </summary>
    /// <param name="_ledgerConsolidateHistRecId">
    ///    The record ID of the <c>LedgerConsolidateHist</c> record whose <c>LedgerConsolidateHistRef</c>
    ///    reference recordsand their consolidated <c>BudgetTransactionHeader</c> and
    ///    <c>BudgetTransactionLine</c> records are to be removed.
    /// </param>
    /// <param name="_fiscalCalendarRecId">
    ///    The record ID of the consolidated company <c>FiscalCalendar</c> object that is used for checking
    ///    removal transactions are not in a closesd period.
    /// </param>
    public static void removeAllConsolidatedBudgetTransactions(recId _ledgerConsolidateHistRecId, recId _fiscalCalendarRecId)
    {
        LedgerConsolidateHistRef ledgerConsolidateHistRef;
        BudgetTransactionLine budgetTransactionLine;
        BudgetTransactionHeader budgetTransactionHeader;

        ttsbegin;

        select firstonly ledgerConsolidateHistRef
            where ledgerConsolidateHistRef.TransTableId == tablenum(BudgetTransactionLine)
                && ledgerConsolidateHistRef.RefRecId == _ledgerConsolidateHistRecId
            join budgetTransactionLine
                order by budgetTransactionLine.Date
                where budgetTransactionLine.RecId == ledgerConsolidateHistRef.TransRecid;

        if (budgetTransactionLine.RecId)
        {
            LedgerFiscalCalendarPeriod ledgerFiscalCalendarPeriod = LedgerFiscalCalendar::findLedgerPeriodByPeriodTypeDate(_fiscalCalendarRecId,
                budgetTransactionLine.Date,
                FiscalPeriodType::Operating);

            if (ledgerFiscalCalendarPeriod.Status != FiscalPeriodStatus::Open)
            {
                FiscalCalendarPeriod fiscalCalendarPeriod = FiscalCalendarPeriod::find(ledgerFiscalCalendarPeriod.FiscalCalendarPeriod);
                if (ledgerFiscalCalendarPeriod.Status == FiscalPeriodStatus::Closed)
                {
                    throw error(strFmt("@GeneralLedger:ConsolidatedTransStatusNotReversibleClosed",
                        fiscalCalendarPeriod.Name,
                        FiscalPeriodStatus::Closed));
                }
                else
                {
                    throw error(strFmt("@GeneralLedger:ConsolidatedTransStatusNotReversibleOnHold",
                        fiscalCalendarPeriod.Name,
                        ledgerFiscalCalendarPeriod.Status,
                        FiscalPeriodStatus::Open));
                }
            }
        }

        // Delete budget transaction headers that have budget transaction lines that are referenced by the ledger consolidation history
        delete_from budgetTransactionHeader
            exists join budgetTransactionLine
            where budgetTransactionHeader.RecId == budgetTransactionLine.BudgetTransactionHeader
            exists join ledgerConsolidateHistRef
            where ledgerConsolidateHistRef.TransTableId == tablenum(BudgetTransactionLine) &&
                ledgerConsolidateHistRef.TransRecid == budgetTransactionLine.RecId &&
                ledgerConsolidateHistRef.RefRecId == _ledgerConsolidateHistRecId;

        // Make sure the lines are deleted, even though the budget transaction header delete should cascade delete the lines.
        delete_from budgetTransactionLine
            exists join ledgerConsolidateHistRef
            where ledgerConsolidateHistRef.TransTableId == tablenum(BudgetTransactionLine) &&
                ledgerConsolidateHistRef.TransRecid == budgetTransactionLine.RecId &&
                ledgerConsolidateHistRef.RefRecId == _ledgerConsolidateHistRecId;

        // Delete the ledger consolidation history references.
        delete_from ledgerConsolidateHistRef
            where ledgerConsolidateHistRef.TransTableId == tablenum(BudgetTransactionLine)
                    && ledgerConsolidateHistRef.RefRecId == _ledgerConsolidateHistRecId;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>