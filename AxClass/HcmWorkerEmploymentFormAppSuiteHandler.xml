<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmWorkerEmploymentFormAppSuiteHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal static class HcmWorkerEmploymentFormAppSuiteHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>HcmEmployment_OnQueryExecuted</Name>
				<Source><![CDATA[
    /// <summary>
    /// HcmEmployment form data source OnQueryExecuted event handler for HcmWorkerEmploymentFormPart form extension data source.
    /// </summary>
    /// <param name="_sender">The HcmEmployment data source of the form extension.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmWorkerEmploymentFormPart, HcmEmployment), FormDataSourceEventType::QueryExecuted)]
    public static void HcmEmployment_OnQueryExecuted(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        // Set the enabled property of the calendar controls
        FormRun workerEmploymentForm = _sender.formRun();
        HcmEmployment employment = _sender.cursor();
        boolean enabled = employment.RecId != 0 && employment.LegalEntity != 0;

        FormGroupControl workCalendarEmploymentGroupControl = workerEmploymentForm.design().controlName(formControlStr(HcmWorkerEmploymentFormPart, WorkCalendarEmploymentGroup)) as FormGroupControl;
        workCalendarEmploymentGroupControl.enabled(enabled);

        if (enabled)
        {
            FormDataSource workCalendarEmployment_ds = workerEmploymentForm.dataSource(formDataSourceStr(HcmWorkerEmploymentFormPart, WorkCalendarEmployment)) as FormDataSource;
            WorkCalendarEmployment workCalendarEmployment = WorkCalendarEmployment_ds.cursor();

            workCalendarEmployment.Employment = employment.RecId;

            if (!workCalendarEmployment.CalendarDataAreaId)
            {
                //set the default calendar data area id
                workCalendarEmployment.CalendarDataAreaId = getCompany(tableNum(WorkCalendarTable), CompanyInfo::getDataArea(employment.LegalEntity));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmEmploymentContractor_VendorID_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// HcmWorkerEmploymentFormPart HcmEmploymentContractor_VendorID form control OnValidated event handler for the HcmWorker form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmWorkerEmploymentFormPart, HcmEmploymentContractor_VendorID), FormControlEventType::Validated)]
    public static void HcmEmploymentContractor_VendorID_OnValidated(FormControl _sender, FormControlEventArgs _e)
    {
        //
        // Note: the original code prior to model-split had this prior to the super() in the modified() for this control,
        // but since there is no OnModifying() available, it needs to be run from the OnValidated in order for the buffer's
        // VendorDataAreaID to be correctly populated in time.
        //
        HcmWorkerEmploymentFormAppSuiteHandler::setVendorDataAreaId(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmEmploymentContractor_PurchID_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// HcmWorker HcmEmploymentContractor_PurchID form control OnValidated event handler for the HcmWorkerEmploymentFormPart form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmWorkerEmploymentFormPart, HcmEmploymentContractor_PurchID), FormControlEventType::Validated)]
    public static void HcmEmploymentContractor_PurchID_OnValidated(FormControl _sender, FormControlEventArgs _e)
    {
        //
        // Note: the original code prior to model-split had this prior to the super() in the modified() for this control,
        // but since there is no OnModifying() available, it needs to be run from the OnValidated in order for the buffer's
        // VendorDataAreaID to be correctly populated in time.
        //
        HcmWorkerEmploymentFormAppSuiteHandler::setVendorDataAreaId(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmEmploymentContractor_PurchID_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// HcmWorker HcmEmploymentContractor_PurchID form control OnLookup event handler for the HcmWorkerEmploymentFormPart form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmWorkerEmploymentFormPart, HcmEmploymentContractor_PurchID), FormControlEventType::Lookup)]
    public static void HcmEmploymentContractor_PurchID_OnLookup(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun hcmWorkerForm = _sender.formRun();
        FormDataSource hcmEmployment_ds = hcmWorkerForm.dataSource(formDataSourceStr(HcmWorkerEmploymentFormPart, HcmEmployment)) as FormDataSource;
        HcmEmployment employment = hcmEmployment_ds.cursor();

        DataAreaId dataAreaId = CompanyInfo::getDataArea( employment.LegalEntity);

        changecompany(dataAreaId)
        {
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(PurchTable), _sender);

            sysTableLookup.addLookupfield(fieldNum(PurchTable, PurchId));

            // Instantiate sysTableLookup object using table which will provide the visible fields
            Query query = new Query();
            QueryBuildDataSource dsPurchID = query.addDataSource(tableNum(PurchTable));

            // Perform the lookup
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

        FormControlCancelableSuperEventArgs ce = _e as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmWorkerEmploymentFormPart_OnInitialized</Name>
				<Source><![CDATA[
    [FormEventHandler(formStr(HcmWorkerEmploymentFormPart), FormEventType::Initialized)]
    public static void HcmWorkerEmploymentFormPart_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        // Restricting visibility of compensation tab for commerce essentials
        if (RetailSMB::IsRetailSMBEnabled())
        {
            FormTabPageControl financialDimensionsTabPageControl = _sender.design().controlName(formControlStr(HcmWorkerEmploymentFormPart, FinancialDimensionsTabPage)) as FormTabPageControl;
            financialDimensionsTabPageControl.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmEmployment_OnSelectionChanged</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(HcmWorkerEmploymentFormPart, HcmEmployment), FormDataSourceEventType::SelectionChanged)]
    public static void HcmEmployment_OnSelectionChanged(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun formRun = _sender.formRun();

        FormTabPageControl contractorDetailsTabPageControl = formRun.design().controlName(formControlStr(HcmWorkerEmploymentFormPart, ContractorDetailsTabPage)) as FormTabPageControl;
        HcmEmployment employment = _sender.cursor();

        contractorDetailsTabPageControl.visible(employment.EmploymentType == HcmEmploymentType::Contractor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendorDataAreaId</Name>
				<Source><![CDATA[
    private static void setVendorDataAreaId(FormControl _employmentContractorControl)
    {
        // Retrieve the employment from the calling form
        FormRun workerEmploymentForm = _employmentContractorControl.formRun();
        FormDataSource employmentContractor_ds = workerEmploymentForm.dataSource(formDataSourceStr(HcmWorkerEmploymentFormPart, HcmEmploymentContractor)) as FormDataSource;
        HcmEmploymentContractor employmentContractor = employmentContractor_ds.cursor();

        if (employmentContractor.VendorDataAreaID == '')
        {
            // Retrieve the employment from the calling form
            FormDataSource hcmEmployment_ds = workerEmploymentForm.dataSource(formDataSourceStr(HcmWorkerEmploymentFormPart, HcmEmployment)) as FormDataSource;
            HcmEmployment employment = hcmEmployment_ds.cursor();

            //
            // The HcmEmploymentContractor.VendorDataAreaID field provides the DataArea containment
            // for both the Vendor and Purchase order selections.
            // Once set for either a Vendor or Purchase order selection it should not be changeable because it
            // must remain the same. Any subsequent Vendor or Purchase Order selection
            // must be valid for the existing DataArea containment.
            //
            employmentContractor.VendorDataAreaID = CompanyInfo::getDataArea(employment.LegalEntity);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>