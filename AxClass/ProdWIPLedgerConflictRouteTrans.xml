<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdWIPLedgerConflictRouteTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdWIPLedgerConflictRouteTrans</c> class executes the extraction and verification of the
/// route transactions data and calculates the balance for WIP.
/// </summary>
public class ProdWIPLedgerConflictRouteTrans extends ProdWIPLedgerConflictTransBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and runs as an asynchronous task.
    /// </summary>
    /// <returns>The created asynchronous task.</returns>
    public System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(ProdWIPLedgerConflictRouteTrans),
                                                          staticMethodStr(ProdWIPLedgerConflictRouteTrans, runOperationAsync),
                                                          [this.pack()]);

        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    private static void runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        ProdWIPLedgerConflictRouteTrans  dataCollectionTask = new ProdWIPLedgerConflictRouteTrans();
        container                        packedDataCollectionTask;

        [packedDataCollectionTask] = params;
        dataCollectionTask.unpack(packedDataCollectionTask);

        dataCollectionTask.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a query that finds inventory transactions in a given period.
    /// </summary>
    /// <returns>
    ///    A query that finds inventory transactions.
    /// </returns>
    protected Query buildQuery()
    {
        Query                   query = new Query();
        List                    includedRefCategories = new List(Types::Enum);
        boolean                 firstField = true;
        str                     rangeValue              = '';

        QueryBuildDataSource qbdsProdWIPLedgerConflictWrkCtrUnionAll = query.addDataSource(tableNum(ProdWIPLedgerConflictWrkCtrUnionAll));
        qbdsProdWIPLedgerConflictWrkCtrUnionAll.addRange(fieldNum(ProdWIPLedgerConflictWrkCtrUnionAll, TransDate)).value(SysQuery::range(
            inventLedgerConflictContract.parmInventCostDateCodeContract().parmFromDate(),
            inventLedgerConflictContract.parmInventCostDateCodeContract().parmToDate()));
        qbdsProdWIPLedgerConflictWrkCtrUnionAll.addRange(fieldNum(ProdWIPLedgerConflictWrkCtrUnionAll, SessionId)).value(queryValue(inventLedgerConflictContract.parmSessionId()));
        qbdsProdWIPLedgerConflictWrkCtrUnionAll.addRange(fieldNum(ProdWIPLedgerConflictWrkCtrUnionAll, LineType)).value(queryValue(InventValueReportLineType::Transaction));

        qbdsProdWIPLedgerConflictWrkCtrUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictWrkCtrUnionAll, TransDate));
        qbdsProdWIPLedgerConflictWrkCtrUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictWrkCtrUnionAll, Reference));
        qbdsProdWIPLedgerConflictWrkCtrUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictWrkCtrUnionAll, PostingType));
        qbdsProdWIPLedgerConflictWrkCtrUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictWrkCtrUnionAll, PostingTypeOffset));
        qbdsProdWIPLedgerConflictWrkCtrUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictWrkCtrUnionAll, TransPostingType));
        qbdsProdWIPLedgerConflictWrkCtrUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictWrkCtrUnionAll, LedgerDimension));
        qbdsProdWIPLedgerConflictWrkCtrUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictWrkCtrUnionAll, LedgerDimensionOffset));
        qbdsProdWIPLedgerConflictWrkCtrUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictWrkCtrUnionAll, Voucher));
        qbdsProdWIPLedgerConflictWrkCtrUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictWrkCtrUnionAll, Amount));
        qbdsProdWIPLedgerConflictWrkCtrUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictWrkCtrUnionAll, WrkCtrId));
        qbdsProdWIPLedgerConflictWrkCtrUnionAll.addSelectionField(fieldNum(ProdWIPLedgerConflictWrkCtrUnionAll, ServiceItemId));
        qbdsProdWIPLedgerConflictWrkCtrUnionAll.addOrderByField(fieldNum(ProdWIPLedgerConflictWrkCtrUnionAll, TransDate));

        // Filter on dimension attribute if selected in the dialog
        if (inventLedgerConflictContract.parmDimensionAttribute())
        {
            QueryBuildDataSource qbdsDimAttrValueComb = qbdsProdWIPLedgerConflictWrkCtrUnionAll.addDataSource(tableNum(DimensionAttributeValueCombination));
            qbdsDimAttrValueComb.addLink(fieldNum(ProdWIPLedgerConflictWrkCtrUnionAll, LedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));
            if (inventLedgerConflictContract.parmIncludeBlankDimensions())
            {
                qbdsDimAttrValueComb.joinMode(JoinMode::OuterJoin);
            }
            else
            {
                qbdsDimAttrValueComb.joinMode(JoinMode::InnerJoin);
            }
            qbdsDimAttrValueComb.fetchMode(QueryFetchMode::One2One);
            qbdsDimAttrValueComb.addSelectionField(fieldNum(DimensionAttributeValueCombination, TableId)); // Trick to avoid selection of fields
            QueryBuildDataSource qbdsDimAttrLevelValueView = qbdsDimAttrValueComb.addDataSource(tableNum(DimensionAttributeLevelValueView));
            qbdsDimAttrLevelValueView.addLink(fieldNum(DimensionAttributeValueCombination, RecId), fieldNum(DimensionAttributeLevelValueView, ValueCombinationRecId));
            qbdsDimAttrLevelValueView.fetchMode(QueryFetchMode::One2One);
            qbdsDimAttrLevelValueView.addRange(fieldNum(DimensionAttributeLevelValueView, DimensionAttribute)).value(queryValue(inventLedgerConflictContract.parmDimensionAttribute()));
            if (inventLedgerConflictContract.parmIncludeBlankDimensions())
            {
                qbdsDimAttrLevelValueView.joinMode(JoinMode::NoExistsJoin);
            }
            else
            {
                qbdsDimAttrLevelValueView.joinMode(JoinMode::InnerJoin);
                qbdsDimAttrLevelValueView.addRange(fieldNum(DimensionAttributeLevelValueView, EntityInstance)).value(queryValue(inventLedgerConflictContract.parmEntityInstance()));
            }
            qbdsDimAttrValueComb.addSelectionField(fieldNum(DimensionAttributeLevelValueView, TableId)); // Trick to avoid selection of fields
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForConflicts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for conflicts in inventory transactions.
    /// </summary>
    /// <param name="_prodWIPLedgerConflictWrkCtrUnionAll">
    /// The view buffer with route transaction data.
    /// </param>
    /// <returns>
    /// A list of conflict messages if any conflicts were detected.
    /// </returns>
    /// <remarks>
    ///    API changed. ItemType and ItemGroupId were not used.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected List checkForConflicts(
        ProdWIPLedgerConflictWrkCtrUnionAll   _prodWIPLedgerConflictWrkCtrUnionAll)
    {
        List    retVal = new List(Types::Class);

        if (_prodWIPLedgerConflictWrkCtrUnionAll.TransPostingType != ProdTransPostingType::None)
        {
            this.validateMainAccount(retVal, _prodWIPLedgerConflictWrkCtrUnionAll.LedgerDimension, _prodWIPLedgerConflictWrkCtrUnionAll.LedgerDimensionOffset, _prodWIPLedgerConflictWrkCtrUnionAll.PostingType, _prodWIPLedgerConflictWrkCtrUnionAll.PostingTypeOffset);
        }

        // All transactions with blank dimensions should have a conflict message
        if (inventLedgerConflictContract.parmIncludeBlankDimensions())
        {
            retVal.addEnd(InventLedgerConflictMessage::newFromParm("@SYS332489"));
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the data collection that includes extraction and verification, of the inventory
    ///    transactions and calculates the balance for inventory.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run()
    {
        InventValueReportParm               inventValueReportParm;
        SRSDynaLink                         dynaLink = new SRSDynaLink();
        AmountMST                           balance = 0;
        InventLedgerConflictTmpBalance      inventLedgerConflictTmpBalance;
        InventLedgerConflictTmpConflict     inventLedgerConflictTmpConflict;
        Map                                 inventoryRelevantFields = new Map(Types::String, Types::Container);

        // Prepare drillThrough string
        dynaLink.context(SRSDynaLink::getReportRunContext(inventLedgerConflictContract.parmSRSPrintMediumType()));
        dynaLink.clientMenuFunction(menuitemDisplayStr(ProdRouteTrans), MenuItemType::Display);
        dynaLink.tableId(tableNum(ProdRouteTrans));

        Query query = this.buildQuery();
        QueryRun queryRun = new QueryRun(query);

        ttsbegin;

        inventValueReportParm.SessionId = inventLedgerConflictContract.parmSessionId();
        inventValueReportParm.FromDate  = inventLedgerConflictContract.parmInventCostDateCodeContract().parmFromDate();
        inventValueReportParm.insert();

        while (queryRun.next())
        {
            ProdWIPLedgerConflictWrkCtrUnionAll prodWIPLedgerConflictWrkCtrUnionAll = queryRun.get(tableNum(ProdWIPLedgerConflictWrkCtrUnionAll));

            List comments = this.checkForConflicts(prodWIPLedgerConflictWrkCtrUnionAll);
            if (comments.elements() > 0)
            {
                ListEnumerator listEnumerator = comments.getEnumerator();
                int messageNumber = 1;
                while (listEnumerator.moveNext())
                {
                    dynaLink.recordKey(queryValue(fieldNum(ProdRouteTrans, RecId)) + ':' + queryValue(prodWIPLedgerConflictWrkCtrUnionAll.RecId));
                    InventLedgerConflictMessage inventLedgerConflictMessage = listEnumerator.current();

                    if (messageNumber > 1)
                    {
                        inventLedgerConflictTmpConflict.Amount          = 0;
                    }
                    else
                    {
                        inventLedgerConflictTmpConflict.Amount          = inventLedgerConflictMessage.parmAmountMultiplier() * prodWIPLedgerConflictWrkCtrUnionAll.Amount;
                    }

                    inventLedgerConflictTmpConflict.InventTransId       = prodWIPLedgerConflictWrkCtrUnionAll.Reference;
                    inventLedgerConflictTmpConflict.ReferenceCategory   = InventTransType::ProdLine;
                    inventLedgerConflictTmpConflict.TransDate           = prodWIPLedgerConflictWrkCtrUnionAll.TransDate;
                    inventLedgerConflictTmpConflict.PrintAsterisk       = false;
                    inventLedgerConflictTmpConflict.DrillThroughAction  = dynaLink.url();
                    inventLedgerConflictTmpConflict.MessageNumber       = messageNumber;
                    inventLedgerConflictTmpConflict.Comment             = inventLedgerConflictMessage.parmMessage();
                    inventLedgerConflictTmpConflict.SessionId           = inventLedgerConflictContract.parmSessionId();
                    inventLedgerConflictTmpConflict.ReportId            = inventLedgerConflictContract.parmReportId();
                    inventLedgerConflictTmpConflict.ReportDate          = inventLedgerConflictContract.parmReportDate();
                    if (prodWIPLedgerConflictWrkCtrUnionAll.ServiceItemId)
                    {
                        inventLedgerConflictTmpConflict.ResourceType        = InventValueReportResourceType::DirectOutsourcing;
                        inventLedgerConflictTmpConflict.ItemId              = prodWIPLedgerConflictWrkCtrUnionAll.ServiceItemId;
                    }
                    else
                    {
                        inventLedgerConflictTmpConflict.ResourceType        = InventValueReportResourceType::Labor;
                        inventLedgerConflictTmpConflict.ItemId              = prodWIPLedgerConflictWrkCtrUnionAll.WrkCtrId;
                    }

                    inventLedgerConflictTmpConflict.insert();

                    messageNumber++;
                }
            }
            if (prodWIPLedgerConflictWrkCtrUnionAll.TransPostingType == ProdTransPostingType::Physical)
            {
                balance += prodWIPLedgerConflictWrkCtrUnionAll.Amount;
            }
        }

        select forupdate inventLedgerConflictTmpBalance where
            inventLedgerConflictTmpBalance.Module == InventLedgerConflictModule::WIP &&
            inventLedgerConflictTmpBalance.SessionId    == inventLedgerConflictContract.parmSessionId() &&
            inventLedgerConflictTmpBalance.ReportId     == inventLedgerConflictContract.parmReportId();

        inventLedgerConflictTmpBalance.Balance      += balance;
        inventLedgerConflictTmpBalance.Module       = InventLedgerConflictModule::WIP;
        inventLedgerConflictTmpBalance.SessionId    = inventLedgerConflictContract.parmSessionId();
        inventLedgerConflictTmpBalance.ReportId     = inventLedgerConflictContract.parmReportId();
        inventLedgerConflictTmpBalance.ReportDate   = inventLedgerConflictContract.parmReportDate();
        inventLedgerConflictTmpBalance.write();

        delete_from inventValueReportParm
              where inventValueReportParm.SessionId == inventLedgerConflictContract.parmSessionId();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ProdWIPLedgerConflictRouteTrans construct()
    {
        return new ProdWIPLedgerConflictRouteTrans();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>