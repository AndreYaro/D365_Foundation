<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPurchPrepaymentReversal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjPurchPrepaymentReversal</c> class is to handle reversal of project purchase order prepayment invoice transactions.
/// </summary>
internal class ProjPurchPrepaymentReversal
{
    private Voucher reversalVoucher;
    private TransDate reversalDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processPrepaymentReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes insertion of reversal records of project purchase order prepayment invoice transactions.
    /// </summary>
    /// <param name="_voucher">The voucher to be reversed.</param>
    /// <param name="_transDate">The transaction date.</param>
    internal void processPrepaymentReversal(Voucher _voucher, TransDate _transDate)
    {        
        ProjTransIdBase projTransIDNew = ProjParameters::newTransId();
        ProjAdjustRefId projAdjustRefIDNew = NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num();
        InventTransId inventTransIDNew = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();

        ttsbegin;

        ProjTransPosting projTransPosting;
        while select projTransPosting
            where projTransPosting.Voucher == _voucher
                && projTransPosting.ProjTransDate == _transDate
        {
            this.createProjTransReversal(projTransPosting, projTransIDNew, inventTransIDNew, projAdjustRefIDNew);
        }

        ProjItemTrans projItemTrans;
        while select projItemTrans
            where projItemTrans.VoucherPackingSlip == _voucher
                && projItemTrans.TransDate == _transDate
        {
            this.createProjItemTransReversal(projItemTrans, projTransIDNew, inventTransIDNew, projAdjustRefIDNew);
        }
        
        ProjItemTransCost projItemTransCost;
        while select projItemTransCost where projItemTransCost.Voucher == _voucher
        {
            this.createProjPostItemTransCost(projItemTransCost, inventTransIDNew, projAdjustRefIDNew);
        }

        ProjItemTransSale projItemTransSale;
        while select projItemTransSale
            exists join projItemTrans
            where projItemTransSale.ProjTransId == projItemTrans.ProjTransId
                && projItemTrans.VoucherPackingSlip == _voucher
        {
            this.createProjItemTransSale(projItemTransSale, projTransIDNew);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjTransReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates reversal transactions into <c>ProjTransPosting</c> table.
    /// </summary>
    /// <param name = "_projTransPostingOrig">The <c>ProjTransPosting</c> table record to be reversed.</param>
    /// <param name = "_projTransID">The ID of project transaction.</param>
    /// <param name = "_inventTransID">The ID of inventory transaction.</param>
    /// <param name = "_projAdjustRefID">The ID of the project adjustment reference.</param>
    private void createProjTransReversal(ProjTransPosting _projTransPostingOrig,
                                         ProjTransIdBase _projTransID,
                                         InventTransId _inventTransID,
                                         ProjAdjustRefId _projAdjustRefID)
    {
        ProjTransPosting projTransPostingNew;         
        projTransPostingNew.data(_projTransPostingOrig);
        projTransPostingNew.Voucher = reversalVoucher;
        projTransPostingNew.ProjTransDate = reversalDate;
        projTransPostingNew.LedgerTransDate = reversalDate;
        projTransPostingNew.TransId = _projTransID;
        projTransPostingNew.InventTransId = _inventTransID;
        projTransPostingNew.ProjAdjustRefId = _projAdjustRefID;
        // Reverse the original amount
        projTransPostingNew.AmountMST = -_projTransPostingOrig.AmountMST;
        projTransPostingNew.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjItemTransReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates reversal transactions into <c>ProjItemTrans</c> table.
    /// </summary>
    /// <param name = "_projItemTransOrig">The <c>ProjItemTrans</c> table record to be reversed.</param>
    /// <param name = "_projTransID">The ID of project transaction.</param>
    /// <param name = "_inventTransID">The ID of inventory transaction.</param>
    /// <param name = "_projAdjustRefID">The ID of the project adjustment reference.</param>
    private void createProjItemTransReversal(ProjItemTrans _projItemTransOrig,
                                             ProjTransIdBase _projTransID,
                                             InventTransId _inventTransID,
                                             ProjAdjustRefId _projAdjustRefID)
    {
        ProjItemTrans projItemTransNew;
        projItemTransNew.data(_projItemTransOrig);
        projItemTransNew.VoucherPackingSlip = reversalVoucher;
        projItemTransNew.TransDate = reversalDate;
        projItemTransNew.ProjTransId = _projTransID;
        projItemTransNew.InventTransId = _inventTransID;
        projItemTransNew.ProjTransIdRef = _projItemTransOrig.ProjTransIdRef;
        projItemTransNew.AdjRefTransId = _projItemTransOrig.ProjTransId;
        projItemTransNew.ProjAdjustRefId = _projAdjustRefID;
        // Setting values to zero because <c>TotalCostAmountCur</c>, <c>TotalSalesAmountCur</c> are getting updated from 
        // the insert method of <c>ProjItemTransCost</c> and <c>ProjItemTransSale</c> tables.
        projItemTransNew.TotalCostAmountCur = 0;
        projItemTransNew.TotalSalesAmountCur = 0;

        projItemTransNew.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjPostItemTransCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates reversal transactions into <c>ProjItemTransCost</c> table.
    /// </summary>
    /// <param name = "_ProjItemTransCostOrig">The <c>ProjItemTransCost</c> table record to be reversed.</param>
    /// <param name = "_inventTransID">The ID of inventory transaction.</param>
    /// <param name = "_projAdjustRefID">The ID of the project transaction adjustment reference.</param>
    private void createProjPostItemTransCost(ProjItemTransCost _ProjItemTransCostOrig,
                                             InventTransId _inventTransID,
                                             ProjAdjustRefId _projAdjustRefID)
    {
        ProjItemTransCost projItemTransCostNew;
        projItemTransCostNew.data(_ProjItemTransCostOrig);
        projItemTransCostNew.Voucher = reversalVoucher;
        // Reverse the original amount
        projItemTransCostNew.AmountMST = -_ProjItemTransCostOrig.AmountMST;
        projItemTransCostNew.LedgerCostAmountMST = -_ProjItemTransCostOrig.LedgerCostAmountMST;
        projItemTransCostNew.LineAmount = -_ProjItemTransCostOrig.LineAmount;
        projItemTransCostNew.InventTransId = _inventTransID;
        projItemTransCostNew.ProjAdjustRefId = _projAdjustRefID;
        projItemTransCostNew.TransStatus = ProjTransStatus::Adjusted;
        projItemTransCostNew.insert();

        // Updating original transaction to adjusted state.
        ProjItemTransCost projItemTransCostUpdate;
        update_recordset projItemTransCostUpdate
            setting TransStatus = ProjTransStatus::Adjusted
                where projItemTransCostUpdate.Voucher == _ProjItemTransCostOrig.Voucher
                    && projItemTransCostUpdate.TransStatus != ProjTransStatus::Adjusted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjItemTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates reversal transactions into <c>ProjItemTransSale</c> table.
    /// </summary>
    /// <param name = "_projItemTransSaleOrig">The <c>ProjItemTransSale</c> table record to be reversed.</param>
    /// <param name = "_projTransID">The ID of project transaction.</param>
    private void createProjItemTransSale(ProjItemTransSale _projItemTransSaleOrig,
                                         ProjTransIdBase _projTransID)
    {
        ProjItemTransSale projItemTransSaleNew;
        projItemTransSaleNew.data(_projItemTransSaleOrig);
        projItemTransSaleNew.LedgerTransdate = reversalDate;
        projItemTransSaleNew.ProjTransId = _projTransID;
        projItemTransSaleNew.TransStatus = ProjTransStatus::Adjusted;
        // Reverse the original amount
        projItemTransSaleNew.LedgerSalesAmount = -_projItemTransSaleOrig.LedgerSalesAmount;
        projItemTransSaleNew.LineAmount = -_projItemTransSaleOrig.LineAmount;
        projItemTransSaleNew.insert();

        // Updating original transaction to adjusted state.
        ProjItemTransSale projItemTransSaleUpdate;
        update_recordset projItemTransSaleUpdate
            setting TransStatus = ProjTransStatus::Adjusted
                where projItemTransSaleUpdate.ProjTransId == _projItemTransSaleOrig.ProjTransId
                    && projItemTransSaleUpdate.TransStatus != ProjTransStatus::Adjusted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjPurchPrepaymentReversal construct()
    {
        return new ProjPurchPrepaymentReversal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReversalVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets reversal voucher number.
    /// </summary>
    /// <param name="_voucher">The reversal voucher number.</param>
    internal Voucher parmReversalVoucher(Voucher _voucher = reversalVoucher)
    {
        reversalVoucher = _voucher;

        return reversalVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReversalDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets reversal transaction date.
    /// </summary>
    /// <param name="_reversalDate">The reversal transaction date.</param>
    internal TransDate parmReversalDate(TransDate _reversalDate = reversalDate)
    {
        reversalDate = _reversalDate;

        return reversalDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>