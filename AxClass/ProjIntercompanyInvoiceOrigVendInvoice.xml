<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjIntercompanyInvoiceOrigVendInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class maps the values from an intercompany vendor invoice line to be used when generating an
/// invoice against the borrowing legal entity.
/// </summary>
public class ProjIntercompanyInvoiceOrigVendInvoice implements ProjIntercompanyInvoiceOrigTrans
{
    VendInvoiceInfoLine vendInvoiceLine;
    VendInvoiceInfoLine_Project projLine;
    ProjTransType transType;
    CustInvoiceLineInterProj custInvoiceLineInterProj;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getActivityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the activity number of the vendor invoice line.
    /// </summary>
    /// <returns>
    /// The activity number of the timesheet line.
    /// </returns>
    public ProjActivityNumber getActivityNumber()
    {
        return projLine.ProjActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total line amount to be invoiced to the other legal entity.
    /// </summary>
    /// <returns>
    /// The line amount to be invoiced to the other legal entity.
    /// </returns>
    public AmountCur getAmountCur()
    {
        TaxAmountCur intercompanyExemptTax = VendInvoiceInfoLine_Project::intercompanyExemptTax(vendInvoiceLine,
                                                                                                    this.getCurrencyCode());

        return (projLine.TransferPrice * this.getQuantity()) + intercompanyExemptTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code in which the cost is incurred in the lending company.
    /// </summary>
    /// <returns>
    /// The currency code in which the cost is incurred in the lending company.
    /// </returns>
    public CurrencyCode getCostCurrency()
    {
        return vendInvoiceLine.currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost price of the transaction incurred in the lending company.
    /// </summary>
    /// <returns>
    /// The cost price of the transaction incurred in the lending company.
    /// </returns>
    public Amount getCostPrice()
    {
        return projLine.getActualCostPrice(vendInvoiceLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code of the transaction, which is the one that the borrowing legal entity will be invoiced.
    /// </summary>
    /// <returns>
    /// The currency code that the transaction should be invoiced.
    /// </returns>
    public CurrencyCode getCurrencyCode()
    {
        return projLine.TransferCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data area ID of the lending legal entity.
    /// </summary>
    /// <returns>
    /// The data area ID of the lending legal entity.
    /// </returns>
    public DataAreaId getDataAreaId()
    {
        return vendInvoiceLine.dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a default dimension set of the transaction.
    /// </summary>
    /// <returns>
    /// A description of the transaction.
    /// </returns>
    public LedgerDefaultDimensionValueSet getDefaultDimension()
    {
        return vendInvoiceLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a description of the transaction.
    /// </summary>
    /// <returns>
    /// A description of the transaction.
    /// </returns>
    public Description getDescription()
    {
        return vendInvoiceLine.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalSalesCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency in which the sales price to the end customer is expressed in.
    /// </summary>
    /// <returns>
    /// The currency in which the sales price to the end customer is expressed in.
    /// </returns>
    public CurrencyCode getFinalSalesCurrencyCode()
    {
        return projLine.ProjSalesCurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price that the final customer will be charged for this item.
    /// </summary>
    /// <returns>
    /// The sales price that the final customer will be charged for this item.
    /// </returns>
    public AmountCur getFinalSalesPrice()
    {
        return projLine.ProjSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndirectCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoice indirect component amount.
    /// </summary>
    /// <returns>
    /// The invoice indirect component amount of the transaction.
    /// </returns>
    public Amount getIndirectCost()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinePropertyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line property ID of the transaction.
    /// </summary>
    /// <returns>
    /// The line property ID of the transaction.
    /// </returns>
    public ProjLinePropertyId getLinePropertyId()
    {
        return projLine.ProjLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the project category ID of the transaction.
    /// </summary>
    /// <returns>
    /// The project category ID of the transaction.
    /// </returns>
    public ProjCategoryId getProjectCategoryId()
    {
        return projLine.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data area ID of the borrowing legal entity.
    /// </summary>
    /// <returns>
    /// The data area ID of the borrowing legal entity.
    /// </returns>
    public DataAreaId getProjectDataAreaId()
    {
        return projLine.ProjDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the related project in the borrowing legal entity.
    /// </summary>
    /// <returns>
    /// The ID of the related project in the borrowing legal entity.
    /// </returns>
    /// <remarks>
    /// This is the project where the costs will be incurred at the borrowing legal entity side.
    /// </remarks>
    public ProjId getProjectId()
    {
        return projLine.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of hours in this transactions.
    /// </summary>
    /// <returns>
    /// The number of hours in this transactions.
    /// </returns>
    public Qty getQuantity()
    {
        return vendInvoiceLine.ReceiveNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the vendor line.
    /// </summary>
    /// <returns>
    /// The record ID of the intercompany transaction.
    /// </returns>
    public RefRecId getRecId()
    {
        return vendInvoiceLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales price that the other legal entity is expected to pay for the item.
    /// </summary>
    /// <returns>
    /// The sales price that the other legal entity is expected to pay for the item.
    /// </returns>
    public Amount getSalesPrice()
    {
        if (FeatureStateProvider::isFeatureEnabled(ProjIntercompanyInvoiceOrigVendInvSalesPriceFlight::instance()))
        {
            return projLine.ProjSalesPrice;
        }
        else
        {
            return this.getAmountCur();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the source document line associated with the transaction.
    /// </summary>
    /// <returns>
    /// The record ID of the source document line associated with the transaction.
    /// </returns>
    public SourceDocumentLineRecId getSourceDocumentLine()
    {
        return vendInvoiceLine.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item sales tax group that will be used in the invoice line for this transaction.
    /// </summary>
    /// <returns>
    /// The item sales tax group that will be used in the invoice line for this transaction.
    /// </returns>
    public TaxItemGroup getTaxItemGroup()
    {
        ProjCategoryId categoryId;
        ProjCategory category;

        categoryId = ProjIntercompanyParameters::getValidCategory(this.getProjectCategoryId(), this.getProjectDataAreaId(), this.getTransType());
        category = ProjCategory::find(categoryId);

        return category.TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxGroup</Name>
				<Source><![CDATA[
    public TaxGroup getTaxGroup()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    public TransDate getTransDate()
    {
        return vendInvoiceLine.vendInvoiceInfoTable().TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the origin of the transaction.
    /// </summary>
    /// <returns>
    /// The origin of the transaction.
    /// </returns>
    public ProjTransactionOrigin getTransOrigin()
    {
        return ProjOrigin::VendorInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of the project transaction.
    /// </summary>
    /// <returns>
    /// The type of the project transaction.
    /// </returns>
    public ProjTransType getTransType()
    {
        if (!transType)
        {
            transType = ProjIntercompanyInvoiceOrigVendInvoice::getProjTransType(projLine);
        }
        return transType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitOfMeasureSymbol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the symbol of the unit of measure in which the quantity of this item is expressed.
    /// </summary>
    /// <returns>
    /// The symbol of the unit of measure in which the quantity of this item is expressed.
    /// </returns>
    public UnitOfMeasureSymbol getUnitOfMeasureSymbol()
    {
        return UnitOfMeasure::find(projLine.ProjSalesUnitId).Symbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the unit price of the resource being invoiced.
    /// </summary>
    /// <returns>
    /// The unit price of the resource being invoiced, including indirect costs.
    /// </returns>
    public AmountCur getUnitPrice()
    {
        if (this.getQuantity() != 0)
        {
            return (this.getAmountCur() / this.getQuantity());
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the worker related to this transaction.
    /// </summary>
    /// <returns>
    /// The record ID of the worker related to this transaction.
    /// </returns>
    public HcmWorkerRecId getWorker()
    {
        return ResourceFacade::getWorker(projLine.Resource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceName</Name>
				<Source><![CDATA[
    public Name getResourceName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the resource related to this transaction.
    /// </summary>
    /// <returns>
    /// The record ID of the resource related to this transaction.
    /// </returns>
    public ResourceRecId getResource()
    {
        return projLine.Resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new (VendInvoiceInfoLine _infoLine,
                      vendinvoiceinfoline_Project _projLineExt,
                      CustInvoiceLineInterProj _custInvoiceInterProj)
    {
        vendInvoiceLine = _infoLine.data();
        projLine = _projLineExt.data();
        custInvoiceLineInterProj = _custInvoiceInterProj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBilled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the intercompany billing status of the vendor invoice line being invoiced.
    /// </summary>
    /// <param name="_billed">
    /// true if the transaction was included in an intercompany invoice; false if it should be available to be invoiced.
    /// </param>
    public void setBilled(boolean _billed)
    {
        VendInvoiceInfoLine_Project projLineLocal;

        if (_billed && ProjIntercompanyInvoiceCreateValidateIsBilledFlight::instance().isEnabled())
        {
            projLineLocal = VendInvoiceInfoLine_Project::find(projLine.RecId, true);

            if (projLineLocal.IntercompanyBilled)
            {
                // Selected intercompany transaction was already marked as billed and cannot be included in intercompany invoice.
                throw error("@Proj:IntercompanyTransactionAlreadyBilled");
            }

            projLineLocal.IntercompanyBilled = _billed;
            projLineLocal.update();
        }
        else
        {
            update_recordSet projLineLocal
                setting intercompanyBilled = _billed
                where projLineLocal.RecId == projLine.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the transaction in a form.
    /// </summary>
    /// <remarks>
    /// Used for auditing purposes.
    /// </remarks>
    public void showTrans()
    {
        Args args;
        VendInvoiceJour vendInvJour;
        VendInvoiceInfoTable infoTable;

        infoTable = vendInvoiceLine.vendInvoiceInfoTable();
        vendInvJour = VendInvoiceJour::findFromVendTrans(infoTable.Num,
                                                         infoTable.TransDate,
                                                         infoTable.InvoiceAccount);
        args = new Args();
        args.record(vendInvJour);
        args.menuItemType(MenuItemType::Display);
        new MenuFunction(MenuItemDisplayStr(VendInvoiceJournal), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>ProjIntercompanyInvoiceOrigVendInvoice</c>.
    /// </summary>
    /// <param name="_vendInvoiceLine">
    /// The <c>VendInvoiceInfoLine</c> record to create the intercompany invoice line from.
    /// </param>
    /// <param name="_projLineExt">
    /// The <c>VendInvoiceInfoLine_Project</c> record to create the intercompany invoice line from.
    /// </param>
    /// <returns>
    /// A new instance of <c>ProjIntercompanyInvoiceOrigVendInvoice</c>.
    /// </returns>
    public static ProjIntercompanyInvoiceOrigVendInvoice construct(VendInvoiceInfoLine _vendInvoiceLine,
                                                                   VendInvoiceInfoLine_Project _projLineExt,
                                                                   CustInvoiceLineInterProj _custInvoiceLineInterProj = null)
    {
        return new ProjIntercompanyInvoiceOrigVendInvoice(_vendInvoiceLine, _projLineExt, _custInvoiceLineInterProj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the project transaction type a <c>VendInvoiceInfoLine_Project</c> will
    /// create during posting.
    /// </summary>
    /// <param name="_projLine">
    /// The <c>VendInvoiceInfoLine_Project</c> to be checked.
    /// </param>
    /// <returns>
    /// The <c>ProjTransType</c> type created by the invoice line.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Thrown if the line is not able to create a valid project transaction.
    /// </exception>
    public static ProjTransType getProjTransType(VendInvoiceInfoLine_Project _projLine)
    {
        ProjCategory category;

        changeCompany (_projLine.ProjDataAreaId)
        {
            category = ProjCategory::find(_projLine.ProjCategoryId);
            switch (category.CategoryType)
            {
                case ProjCategoryType::Cost:
                    return ProjTransType::Cost;

                case ProjCategoryType::Hour:
                    return ProjTransType::Hour;

                case ProjCategoryType::Item:
                    return ProjTransType::Item;

                default:
                    throw error(error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>