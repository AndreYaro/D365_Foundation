<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEnhancedSyncOrdersSchedulerTaskFlight</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// When <c>RetailEnhancedSyncOrdersSchedulerTaskFlight</c> is enabled, synchronization of transactions will:
/// 1. Occur independently: it means, if an attempt to synchronize a transaction fails due to an exception, we will still attempt to syncronize other transactions.
/// 2. Provide better feedback about the error: we will create a <c>RetailTransactionOrderStatus</c> entry that will contain the error information.
/// </summary>
/// <remarks>
/// The flight is controlled by entering the following in the flighting service (Carbon or similar):
/// "RetailEnhancedSyncOrdersSchedulerTaskFlight" to enable. This is only necessary when isEnabledByDefault() returns false.
/// "RetailEnhancedSyncOrdersSchedulerTaskFlight_KillSwitch" to disable. This overrules any enablement.
/// </remarks>
internal final class RetailEnhancedSyncOrdersSchedulerTaskFlight extends Flight
{
    private static RetailEnhancedSyncOrdersSchedulerTaskFlight singleton = new RetailEnhancedSyncOrdersSchedulerTaskFlight();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isEnabledByDefault()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the singleton object instance.
    /// </summary>
    /// <returns>The <c>RetailEnhancedSyncOrdersSchedulerTaskFlight</c> instance.</returns>
    [Hookable(false)]
    public static RetailEnhancedSyncOrdersSchedulerTaskFlight instance()
    {
        return singleton;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>