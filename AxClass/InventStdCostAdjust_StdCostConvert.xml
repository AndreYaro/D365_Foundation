<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdCostAdjust_StdCostConvert</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventStdCostAdjust_StdCostConvert</c> class converts an item to standard cost during the
///    standard cost conversion.
/// </summary>

class InventStdCostAdjust_StdCostConvert extends InventStdCostAdjust
{
    InventAdjustPostClosing         inventAdjustPostClosing;

    InventStdCostConv               inventStdCostConv;

    InventTransAdjustDataMap        inventTransAdjustDataMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addIndirectCostAdjustment</Name>
				<Source><![CDATA[
    protected void addIndirectCostAdjustment(
        InventTransId _inventTransId,
        ItemId        _itemId,
        CostAmount    _adjustment
        )
    {
        inventTransAdjustDataMap.add(_inventTransId,
                                     _itemId,
                                     _adjustment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustStdCostFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the financial inventory for a financial inventory dimension to standard cost.
    /// </summary>
    /// <param name="_inventDimCriteria">
    /// The financial inventory dimension, to which the given inventsum record belongs.
    /// </param>
    /// <param name="_inventDimParmCriteria">
    /// The financial inventory dimension parameters to the item dimension group.
    /// </param>
    /// <param name="_inventSum">
    /// The inventSum record containing the financial on hand value and quantity.
    /// </param>
    /// <exception cref="Exception::Error">
    /// If the financial on hand value belongs to a transaction, that has not been posted into ledger,
    /// the conversion cannot be done.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// If the financial on hand value belongs to a transaction, that has not been posted into ledger,
    /// the conversion cannot be done.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// If not the whole value can be adjusted, the conversion must be aborted.
    /// </exception>
    protected void adjustStdCostFinancial(
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParmCriteria,
        InventSum       _inventSum)
    {
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;
        RecId               prevInventTransRecId;
        InventDim           inventDim;
        InventSettlement    inventSettlement;
        int                 recCount = 0;
        // <GEERU>
        CurrencyCode        currencyCode = inventTransCurrency == InventTransCurrency_RU::PrimaryCur ?
                                           CompanyInfoHelper::standardCurrency()                           :
                                           CompanyInfoHelper::secondaryCurrency_RU();
        // </GEERU>

        // <GEERU>
        if (! currencyCode)
        {
            currencyCode = CompanyInfoHelper::standardCurrency();
        } //
        CostAmount amountLeft = CurrencyExchangeHelper::amount(newPcsPrice * _inventSum.PostedQty, currencyCode) -
                     (inventTransCurrency == InventTransCurrency_RU::PrimaryCur ?
                      _inventSum.PostedValue                                    :
                      _inventSum.PostedValueSecCur_RU);
        // </GEERU>
        Qty qtyLeft = _inventSum.PostedQty;

        setprefix(#PrefixFieldValue(InventTable,itemId,inventTable.itemId));

        if (amountLeft || qtyLeft)
        {
            // There is no index on DateFinancial, but DateStatus and equals DateFinancial for financially updated records,
            // and then we can use the index StatusItemIdx
            while select forupdate inventTrans
                order by DateStatus desc
                where inventTrans.ItemId            == inventTable.ItemId
                   && inventTrans.ValueOpen         == InventTransOpen::Yes
                   && ((inventTrans.StatusReceipt == StatusReceipt::Purchased && inventTrans.StatusIssue == StatusIssue::None)
                   || (inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue == StatusIssue::Sold))
                join InventTransId from inventTransOrigin
                    where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                       && inventTransOrigin.IsExcludedFromInventoryValue == NoYes::No
                #inventDimExistsJoin(inventTrans.inventDimId,inventDim,_inventDimCriteria,_inventDimParmCriteria)
            {
                setprefix(#PrefixFieldvalue(inventTransOrigin,InventTransId,inventTransOrigin.InventTransId));
                recCount ++;
                this.initVoucher();

                // <GEERU>
                CostPrice adjustNow = CurrencyExchangeHelper::amount(inventTrans.Qty * newPcsPrice - (inventTransCurrency == InventTransCurrency_RU::PrimaryCur ? inventTrans.costValue() : inventTrans.costValueSecCur_RU()), currencyCode);
                // </GEERU>

                if (adjustNow)
                {
                    if (InventCostDimensionDefaultingSourceFeature::instance().isEnabled())
                    {
                        InventCostPriceRevaluationHelper helper = new InventCostPriceRevaluationHelper();
                        helper.parmPreInventSettlement(InventSettlement::GetPreInventSettlementAccordingToPreInventCostTrans(preInventItemPrice, inventTrans));
                        inventSettlement = helper.updateStdCostPriceRevaluationFin(inventTrans, inventTable, voucherId, amountLeft, transDate, null, false, inventTransCurrency);
                    }
                    else
                    {
                        // <GEERU>
                        inventSettlement = inventTrans.updateStdCostPriceRevaluationFin(inventTable, voucherId, adjustNow, transDate, null, false, inventTransCurrency);
                        // </GEERU>
                    }

                    if (inventSettlement.CostAmountAdjustment)
                    {
                        if (! inventTrans.inventTransPostingFinancial().IsPosted &&
                            ! inventTrans.isTransfer())
                        {
                            throw error("@SYS105902");
                        }

                        inventSettlement.insert();
                        amountLeft -= inventSettlement.CostAmountAdjustment;
                    }

                    inventTrans.update();
                }

                prevInventTransRecId = inventTrans.RecId;

                qtyLeft -= inventTrans.Qty;
            }
        }

        if (qtyLeft)
        {
            throw error(strfmt("@SYS19378",funcname()));
        }

        if (amountLeft)
        {
            // Check if this is a small adjustment

            // <GEERU>
            if (prevInventTransRecId && abs(amountLeft) <= (abs(Currency::roundingPrecisionAdjusted(currencyCode)) * recCount))
            // </GEERU>
            {
                inventTrans = InventTrans::findRecId(prevInventTransRecId, true);
                if (InventCostDimensionDefaultingSourceFeature::instance().isEnabled())
                {
                    InventCostPriceRevaluationHelper helper = new InventCostPriceRevaluationHelper();
                    helper.parmPreInventSettlement(InventSettlement::GetPreInventSettlementAccordingToPreInventCostTrans(preInventItemPrice, inventTrans));
                    inventSettlement = helper.updateStdCostPriceRevaluationFin(inventTrans, inventTable, voucherId, amountLeft, transDate, null, false, inventTransCurrency);
                }
                else
                {
                    // <GEERU>
                    inventSettlement = inventTrans.updateStdCostPriceRevaluationFin(inventTable, voucherId, amountLeft, transDate, null, false, inventTransCurrency);
                    // </GEERU>
                }

                if (inventSettlement.CostAmountAdjustment)
                {
                    if (! inventTrans.inventTransPostingFinancial().IsPosted &&
                        ! inventTrans.isTransfer())
                    {
                        throw error("@SYS105902");
                    }

                    inventSettlement.insert();
                }

                inventTrans.update();
            }
            else
            {
                throw error(strfmt("@SYS19378",funcname()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustStdCostPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adjusts physical inventory transactions to a new standard cost.
    /// </summary>
    /// <param name="_inventDimCriteria">
    ///    An <c>InventDim</c> parameter that specifies the financial dimension to adjust.
    /// </param>
    /// <param name="_inventDimParmCriteria">
    ///    The financial inventory dimension parameter for the item dimension group.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The transaction cannot be adjusted if one of the transactions is posted at a later date.
    /// </exception>
    protected void adjustStdCostPhysical(
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParmCriteria
        )
    {
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;
        InventDim           inventDim;
        CostAmount          costAmount;
        Qty                 qty;
        // <GEERU>
        CurrencyCode        currencyCode = inventTransCurrency == InventTransCurrency_RU::PrimaryCur ?
                                           CompanyInfoHelper::standardCurrency()                           :
                                           CompanyInfoHelper::secondaryCurrency_RU();

        if (! currencyCode)
        {
            currencyCode = CompanyInfoHelper::standardCurrency();
        } //
        // </GEERU>

        while select ReferenceCategory from inventTransOrigin
            where inventTransOrigin.ItemId == inventTable.ItemId
               && inventTransOrigin.IsExcludedFromInventoryValue == NoYes::No
            join forupdate inventTrans
                where  inventTrans.InventTransOrigin == inventTransOrigin.RecId
                   && ((inventTrans.StatusReceipt == StatusReceipt::Received && inventTrans.StatusIssue == StatusIssue::None) 
                   || (inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue == StatusIssue::Deducted))
        #inventDimExistsJoin(inventTrans.inventDimId,inventDim,_inventDimCriteria,_inventDimParmCriteria)
        {
            if (inventTrans.DatePhysical > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
            {
                throw error("@SYS104478");
            }
            this.initVoucher();

            InventSettlement inventSettlement;
            if (InventCostDimensionDefaultingSourceFeature::instance().isEnabled())
            {
                InventCostPriceRevaluationHelper helper = new InventCostPriceRevaluationHelper();
                helper.parmPreInventSettlement(InventSettlement::GetPreInventSettlementAccordingToPreInventCostTrans(preInventItemPrice, inventTrans));
                inventSettlement = helper.updateStdCostPriceRevaluationPhy(inventTrans,
                                                                           inventTable,
                                                                           voucherId,
                                                                           CurrencyExchangeHelper::amount(inventTrans.Qty * newPcsPrice, currencyCode) -
                                                                           (inventTransCurrency == InventTransCurrency_RU::PrimaryCur ?
                                                                           inventTrans.CostAmountPhysical                            :
                                                                           inventTrans.CostAmountSecCurPhysical_RU),
                                                                           transDate,
                                                                           null,
                                                                           inventTransCurrency);
            }
            else
            {
                // <GEERU>
                inventSettlement = inventTrans.updateStdCostPriceRevaluationPhy(inventTable,
                                                                                voucherId,
                                                                                CurrencyExchangeHelper::amount(inventTrans.Qty * newPcsPrice, currencyCode) -
                                                                                (inventTransCurrency == InventTransCurrency_RU::PrimaryCur ?
                                                                                inventTrans.CostAmountPhysical                            :
                                                                                inventTrans.CostAmountSecCurPhysical_RU),
                                                                                transDate,
                                                                                null,
                                                                                inventTransCurrency);
            }

            // </GEERU>
            if (inventSettlement.CostAmountAdjustment)
            {
                this.setInventSettlement(inventSettlement,inventTrans);
                inventSettlement.insert();

                // Adjust the indirect cost
                if (inventTransOrigin.ReferenceCategory == InventTransType::ProdLine)
                {
                    this.addIndirectCostAdjustment(inventTrans.assemblyInventTransOrigin().InventTransId, inventTrans.ItemId, inventSettlement.CostAmountAdjustment);
                }

                CostAmount curCostAmount = inventSettlement.CostAmountAdjustment;
            }

            qty += inventTrans.Qty;

            // <GEERU>
            costAmount += inventTransCurrency == InventTransCurrency_RU::PrimaryCur ?
                          inventTrans.CostAmountPhysical                            :
                          inventTrans.CostAmountSecCurPhysical_RU;
            // </GEERU>

            inventTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventCostTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the inventory cost transaction record for a financial inventory dimension.
    /// </summary>
    /// <param name="_inventSum">
    ///    The <c>inventSum</c> record that contains the financial on-hand value and quantity.
    /// </param>
    /// <param name="_inventDim">
    ///    The financial inventory dimension that belongs to the given <c>inventSum</c> record.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The variance quantity is not equal to the quantity that should be revaluated, the conversion will
    ///    exit.
    /// </exception>
    protected void createInventCostTrans(
                       InventSum  _inventSum,
                       InventDim  _inventDim
                       )
    {
        InventTransOrigin                       inventTransOrigin;
        InventTrans                             inventTrans;
        InventTransPosting                      inventTransPosting;
        InventDim                               financialDim;
        InventDimParm                           financialDimParm;
        InventCostTrans                         inventCostTrans;
        InventCostTrans                         inventCostTransPhysical;
        CostAmount                              costAmount;
        Qty                                     qty;
        InventCostTransList                     inventCostTransList;
        Qty                                     onHandQty;
        Qty                                     deferredCogsQty;
        Qty                                     wipInQty;
        Qty                                     wipOutQty;

        void sumUpQty()
        {
            onHandQty       += inventCostTransPhysical.OnHandQty;
            deferredCogsQty += inventCostTransPhysical.DeferredCOGSQty;
            wipInQty        += inventCostTransPhysical.wipInQty;
            wipOutQty       += inventCostTransPhysical.wipOutQty;
        }

        void processInventCostTransPhysical(DimensionDefault _dimensions)
        {
            inventCostTransPhysical.clear();

            // get voucher number
            this.initVoucher();

            // Not set the quantity regarding the inventTrans
            inventCostTransPhysical = InventCostTrans::initInventCostTrans(InventCostTransState::Physical,
                                                                            inventItemPrice,
                                                                            inventTable,
                                                                            voucherId,
                                                                            transDate,
                                                                            _dimensions,
                                                                            inventTrans,
                                                                            _inventDim,
                                                                            inventTransOrigin);
        }

        void processPhysicalOffsetInventory()
        {
            if (!inventTransOrigin.isPhysicalOffsetInventory())
            {
                // <GEERU>
                costAmount += inventTransCurrency == InventTransCurrency_RU::PrimaryCur ? inventTrans.CostAmountPhysical : inventTrans.CostAmountSecCurPhysical_RU;
                // </GEERU>
                qty        += inventTrans.Qty;
            }
        }

        void processInventCostTransRecordsStepOne(StatusIssue _statusIssue, StatusReceipt _statusReceipt)
        {
            while select inventTransOrigin
                group by inventTransOrigin.ReferenceCategory
                where inventTransOrigin.ItemId            == _inventSum.ItemId
                   && inventTransOrigin.IsExcludedFromInventoryValue == NoYes::No
                   && inventTransOrigin.ReferenceCategory != InventTransType::ProdLine
                   && inventTransOrigin.ReferenceCategory != InventTransType::Production
                // <GEERU>
                join sum(Qty), sum(CostAmountPhysical), sum(CostAmountSecCurPhysical_RU) from inventTrans
                // </GEERU>
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                       && inventTrans.StatusIssue   == _statusIssue
                       && inventTrans.StatusReceipt == _statusReceipt
           #inventDimExistsJoin(inventTrans.inventDimId, financialDim, _inventDim, financialDimParm)
            {
                processInventCostTransPhysical(inventTable.inventDimLinkedDefaultDimension(_inventDim));

                // Now add it quantity to the revaluation record
                inventCostTrans.addQtyFromInventCostTrans(inventCostTransPhysical);
                sumUpQty();

                processPhysicalOffsetInventory();
            }
        }

        void processInventCostTransRecordsStepTwo(StatusIssue _statusIssue, StatusReceipt _statusReceipt)
        {
            while select inventTransOrigin
                group by inventTransOrigin.ReferenceCategory, inventTransOrigin.ReferenceId, inventTransPosting.DefaultDimension
                where  inventTransOrigin.ItemId            == _inventSum.ItemId
                   &&  inventTransOrigin.IsExcludedFromInventoryValue == NoYes::No
                   && (inventTransOrigin.ReferenceCategory == InventTransType::ProdLine
                   ||  inventTransOrigin.ReferenceCategory == InventTransType::Production)
                // <GEERU>
                join sum(Qty), sum(CostAmountPhysical), sum(CostAmountSecCurPhysical_RU) from inventTrans
                // </GEERU>
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                       && inventTrans.StatusIssue       == _statusIssue
                       && inventTrans.StatusReceipt     == _statusReceipt
                    join inventTransPosting
                        where inventTransPosting.InventTransOrigin        == inventTrans.InventTransOrigin
                           && inventTransPosting.Voucher                  == inventTrans.VoucherPhysical
                           && inventTransPosting.TransDate                == inventTrans.DatePhysical
                           && inventTransPosting.InventTransPostingType   == InventTransPostingType::Physical
                   #inventDimExistsJoin(inventTrans.inventDimId, financialDim, _inventDim, financialDimParm)
            {
                processInventCostTransPhysical(inventTransPosting.DefaultDimension);

                // Ok, there I need to split the records.
                // One part needs to get to the inventCostTrans record
                // One part needs to be added separately
                sumUpQty();
                inventCostTrans.OnHandQty += inventCostTransPhysical.OnHandQty;

                // Now add the record with its key fields separately.
                inventCostTransPhysical.OnHandQty       = 0;

                inventCostTransList.add(inventCostTransPhysical);

                processPhysicalOffsetInventory();
            }
        }

        // Initialize variables
        // <GEERU>
        costAmount = inventTransCurrency == InventTransCurrency_RU::PrimaryCur ? _inventSum.PostedValue : _inventSum.PostedValueSecCur_RU;
        // </GEERU>
        qty        = _inventSum.PostedQty;

        // For each inventDim create a inventCostTrans record
        // Starting point = postedQty
        inventCostTrans.ItemId    = inventTable.ItemId;
        inventCostTrans.DefaultDimension = inventTable.inventDimLinkedDefaultDimension(_inventDim);
        inventCostTrans.setFinancialInventDimId(InventDimGroupSetup::newInventTable(inventTable), _inventDim);
        inventCostTrans.OnHandQty = _inventSum.PostedQty;
        onHandQty = _inventSum.PostedQty;

        // Initialize list
        inventCostTransList = InventCostTransList::construct();

        // Now I need to step through all physical transactions for
        // this inventDim
        financialDimParm.ItemIdFlag = NoYes::Yes;
        financialDimParm.initFromInventDim(_inventDim);

        // process receipts and issues
        processInventCostTransRecordsStepOne(StatusIssue::Deducted, StatusReceipt::None);
        processInventCostTransRecordsStepOne(StatusIssue::None, StatusReceipt::Received);

        //process receipts and issues
        processInventCostTransRecordsStepTwo(StatusIssue::Deducted, StatusReceipt::None);
        processInventCostTransRecordsStepTwo(StatusIssue::None, StatusReceipt::Received);

        // Now set the previous cost amount
        if (onHandQty + deferredCogsQty + wipInQty + wipOutQty == qty)
        {
            if (qty != 0)
            {
                costAmount = costAmount / qty;
            }
            // If quantity is zero, no variance will be generated,
            // no matter what the cost amount is
        }
        else
        {
            throw error("@SYS121575");
        }

        // now add the inventCostTrans record
        if (!inventCostTrans.allQtyFieldsZero())
        {
            // For the case, that only quantity in the inventSum existed and there
            // had not been any open transaction
            this.initVoucher();

            inventCostTransList.add(inventCostTrans);
        }

        // Either I have already created on revaluation record in the while loops before
        // or the initial inventSum quantity is not zero
        if (inventCostTransList.length() != 0)
        {
            // Initialize the revaluation class
            InventCostRevaluate_StdCostConvert inventCostRevaluate_StdCostConvert = InventCostRevaluate_StdCostConvert::newFromParameters(inventTable,
                                                                                                                                          inventItemPrice,
                                                                                                                                          inventCostTransList,
                                                                                                                                          costAmount,
                                                                                                                                          // <GEERU>
                                                                                                                                          ledgerVoucher,
                                                                                                                                          inventTransCurrency);
                                                                                                                                          // </GEERU>

            // Revaluate the list
            inventCostRevaluate_StdCostConvert.updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAdjust</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the item price that belongs to a financial inventory dimension.
    /// </summary>
    /// <param name="_inventDim">
    ///    The financial inventory dimension that is currently being adjusted.
    /// </param>
    protected void initAdjust(InventDim _inventDim)
    {
        // Get the price
        inventItemPrice = InventItemPrice::stdCostFindDate(inventTable,
                                                           inventStdCostConv.TransitionEndDate,
                                                           InventTable::priceInventDim(inventTable.ItemId, _inventDim));

        preInventItemPrice = InventItemPrice::stdCostFindPrevLocked(inventTable.ItemId,
                                                                    inventItemPrice.InventDimId,
                                                                    inventItemPrice.CreatedDateTime);

        if (! inventItemPrice)
        {
            throw error(strfmt("@SYS121592", inventTable.ItemId));
        }

        // <GEERU>
        newPcsPrice = inventTransCurrency == InventTransCurrency_RU::PrimaryCur ?
                      inventItemPrice.pcsPrice()                                :
                      inventItemPrice.pcsPriceSecCur_RU();
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <see cref="T:LedgerVoucher" />.
    /// </summary>
    /// <remarks>
    ///    The <see cref="T:LedgerVoucher" /> will be passed into the <see
    ///    cref="T:InventCostRevaluate_StdCostConvert" /> so that the variance postings can be added.
    /// </remarks>
    protected void initVoucher()
    {
        if (!voucherId)
        {
            super();

            // In the parent class, the transDate is set to the system date
            // I should convert on the transaction period end date
            transDate = inventStdCostConv.TransitionEndDate;

            // Initialize the posting class

            // <GEERU>
            inventAdjustPostClosing = InventAdjustPostClosing::newFromCurrency_RU(voucherId,
            // </GEERU>
                                                    transDate,
                                                    InventAdjustmentSpec::Total,
                                                    // <GEERU>
                                                    LedgerTransTxt::InventStdCostRevaluation,
                                                    NoYes::No,
                                                    '',
                                                    false,
                                                    true,
                                                    '',
                                                    inventTransCurrency);
                                                    // </GEERU>

            inventAdjustPostClosing.parmSkipConversionCheck(true);

            // Initialize the ledgerVoucher
            ledgerVoucher = inventAdjustPostClosing.initLedgerVoucherExt();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventStdCostConv</Name>
				<Source><![CDATA[
    public InventStdCostConv parmInventStdCostConv(InventStdCostConv _inventStdCostConv = inventStdCostConv)
    {
        inventStdCostConv = _inventStdCostConv;

        return inventStdCostConv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the ledger postings of the standard cost adjustment.
    /// </summary>
    protected void post()
    {
        if (inventAdjustPostClosing && ledgerVoucher)
        {
            inventAdjustPostClosing.updateNow(ledgerVoucher, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the ledger accounts for a physical value settlement.
    /// </summary>
    /// <param name="_inventSettlement">
    ///    The inventory settlement where the balance sheet and operations posting information should be reset.
    /// </param>
    /// <param name="_inventTrans">
    ///    The inventory transaction to which the inventory settlement belongs.
    /// </param>
    protected void setInventSettlement(
        InventSettlement    _inventSettlement,
        InventTrans         _inventTrans)
    {
        if (_inventSettlement.SettleModel == InventSettleModel::PhysicalValue)
        {
            if (! _inventTrans.inventTransPostingPhysical().IsPosted)
            {
                _inventSettlement.BalanceSheetPosting    = LedgerPostingType::None;
                _inventSettlement.BalanceSheetLedgerDimension    = 0;
                _inventSettlement.OperationsPosting      = LedgerPostingType::None;
                _inventSettlement.OperationsLedgerDimension      = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Splits all open partially settled transactions into a settled and a non-settled part.
    /// </summary>
    /// <param name="_inventDimCriteria">
    ///    The financial inventory dimension that is currently being adjusted.
    /// </param>
    protected void splitTransactions(InventDim  _inventDimCriteria)
    {
        InventTrans             inventTrans;
        InventTransOrigin       inventTransOrigin;
        InventDim               inventDim;
        InventDimParm           inventDimParmCriteria;

        inventDimParmCriteria.initFromInventDim(_inventDimCriteria);

        // Split all the transactions that are not fully settled
        while select forupdate inventTrans
            order by DateStatus desc
            where inventTrans.ItemId            == inventTable.ItemId
               && inventTrans.ValueOpen         == InventTransOpen::Yes
               && inventTrans.QtySettled        != 0
               && inventTrans.Qty               != inventTrans.QtySettled
               && ((inventTrans.StatusReceipt == StatusReceipt::Purchased && inventTrans.StatusIssue == StatusIssue::None)
               || (inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue == StatusIssue::Sold))
                #inventDimExistsJoin(inventTrans.inventDimId,inventDim,_inventDimCriteria,InventDimParmCriteria)
            exists join inventTransOrigin
                    where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                       && inventTransOrigin.IsExcludedFromInventoryValue == NoYes::No
        {
            InventTransSplit inventTransSplit = new InventTransSplit();
            inventTransSplit.parmSplitQty(inventTrans.Qty - inventTrans.QtySettled);
            inventTransSplit.pdsCWParmSplitQty(inventTrans.PdsCWQty - inventTrans.PdsCWSettled);
            inventTransSplit.parmInventTrans(inventTrans);

            inventTransSplit.runOperation();

            // Call the update method of the inventTrans record,
            // to set the closed flag properly
            inventTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIndirectCost</Name>
				<Source><![CDATA[
    protected void updateIndirectCost()
    {
        if (inventTransAdjustDataMap.elements() != 0 && voucherId)
        {
            // <GEERU>
            InventCostProdAdjust::adjustFromStdCostConvert(inventTransAdjustDataMap, voucherId, transDate, inventTransCurrency);
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStdCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adjusts an item to standard cost.
    /// </summary>
    protected void updateStdCost()
    {
        Query                   query;
        InventDimParm           inventDimParm;
        InventDimParm           inventDimParmCriteria;

        inventDimParmCriteria.initFromInventDim(inventDimCriteria);
        inventDimParmCriteria.ItemIdFlag = NoYes::Yes;
        InventDimGroupSetup::newInventTable(inventTable).inventDimParmActiveFinancialInventory(inventDimParm);
        this.lockInventSum(inventDimCriteria, inventDimParmCriteria);
        query = InventSum::newQuery(query, inventTable.ItemId, inventDimCriteria, inventDimParmCriteria, inventDimParm);
        query.dataSourceTable(tableNum(InventSum)).addRange(fieldNum(InventSum, IsExcludedFromInventoryValue)).value(queryValue(NoYes::No));
        QueryRun queryRun = new QueryRun(query);

        // Initialize the map for the indirect cost
        inventTransAdjustDataMap = InventTransAdjustDataMap::construct();

        while (queryRun.next())
        {
            InventSum inventSum = queryRun.get(tableNum(InventSum));
            InventDim inventDim = queryRun.get(tableNum(InventDim));

            this.initAdjust(inventDim);

            // Before adjusting the old inventory framework,
            // create the inventCostTrans revaluation record
            this.createInventCostTrans(inventSum, inventDim);

            // Split the transactions
            this.splitTransactions(inventDim);

            // Now adjust the old inventory framework
            this.adjustStdCostPhysical(inventDim, inventDimParm);
            this.adjustStdCostFinancial(inventDim, inventDimParm, inventSum);
        }

        this.updateIndirectCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventStdCostAdjust_StdCostConvert construct()
    {
        return new InventStdCostAdjust_StdCostConvert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStdCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a new instance of the <see cref="T:InventStdCostAdjust_StdCostConvert" />.
    /// </summary>
    /// <param name="_inventTable">
    ///    The inventory table record for the item that should be converted.
    /// </param>
    /// <param name="_inventStdCostConv">
    ///    The inventory standard cost conversion record for the current conversion.
    /// </param>
    /// <param name="_inventTransCurrency">
    /// The type of conversion currency - primary or secondary; optional.
    /// </param>
    /// <returns>
    ///    An initialized instance of the <see cref="T:InventStdCostAdjust_StdCostConvert" />.
    /// </returns>
    public static InventStdCostAdjust_StdCostConvert newStdCost(
        InventTable         _inventTable,
        InventStdCostConv      _inventStdCostConv,
        InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur
        )
    {
        InventStdCostAdjust_StdCostConvert    inventStdCostAdjust_StdCostConvert = InventStdCostAdjust_StdCostConvert::construct();

        inventStdCostAdjust_StdCostConvert.parmInventTable(_inventTable);
        inventStdCostAdjust_StdCostConvert.parmInventStdCostConv(_inventStdCostConv);
        // <GEERU>
        inventStdCostAdjust_StdCostConvert.parmInventTransCurrency_RU(_inventTransCurrency);
        // </GEERU>

        return inventStdCostAdjust_StdCostConvert;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>