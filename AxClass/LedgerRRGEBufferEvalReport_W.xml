<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGEBufferEvalReport_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGEBufferEvalReport_W extends LedgerRRGEBufferEvalMultiline_W
{
    RecId                   reportRecId;
    Map                     resultMap;
    Map                     staticValuesMap;
    Map                     newWorksheets;
    Set                     deletedWorksheets;
    private const str       Space = ' ';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deletedWorksheets</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Set deletedWorksheets()
    {
        return deletedWorksheets;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWorksheet</Name>
				<Source><![CDATA[
    public void deleteWorksheet(str _worksheet)
    {
        if (!deletedWorksheets)
        {
            deletedWorksheets = new Set(Types::String);
        }

        deletedWorksheets.add(_worksheet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>evalList</Name>
				<Source><![CDATA[
	private void evalList(List _list)
    {
        ListEnumerator le = _list.getEnumerator();
        while (le.moveNext())
        {
            currentEvaluator = le.current();
            currentEvaluator.reset();

            resultMap.insert(currentEvaluator.updatedKeyCode(), currentEvaluator.value());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>evalMultiLineDatasources</Name>
				<Source><![CDATA[
	private void evalMultiLineDatasources()
    {
        MapEnumerator               me;
        Map                         tablesMap;
        MapEnumerator               tablesEnum;
        LedgerRRGEDatasourceQuery_W datasource;
        Struct                      datasourceStruct;

        multiLineDatasourcesLocked = true;
        if (multiLineDatasources)
        {
            me = sortedMultiLineDatasources.getEnumerator();
            while (me.moveNext())
            {
                datasourceStruct    = me.currentValue();
                datasource          = datasourceStruct.valueIndex(StructDatasourceIdx);
                tablesMap           = datasourceStruct.valueIndex(StructTablesMapIdx);
                tablesEnum          = tablesMap.getEnumerator();

                while (tablesEnum.moveNext())
                {
                    while (datasource.next(tablesEnum.currentKey()))
                    {
                        this.evalList(tablesEnum.currentValue());
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>evalReport</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map evalReport()
    {
        LedgerRRGCellTable_RU   cellTable;

        try
        {
            if (! parms.scale())
                throw error("@LedgerRRG:LedgerRRG_ScaleIsNull");

            boolean haveStaticValuesMap = staticValuesMap == null ? true : false;
           
            while select cellTable
                where cellTable.ReportRecId     == reportRecId                        &&
                     (haveStaticValuesMap || !cellTable.IsStatic)
            {
                setprefix("@LedgerRRG:LedgerRRG_Cell" + Space + cellTable.CellCode);

                currentEvaluator = LedgerRRGEBufferEval_W::newFromBuffer(cellTable, this);
                resultMap.insert(currentEvaluator.updatedKeyCode(), currentEvaluator.value());
            }

            this.evalMultiLineDatasources();
        }
        catch (Exception::Error)
        {
            throw error("@LedgerRRG:LedgerRRG_CalculatingLocationError");
        }

        return resultMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    public void initFromBuffer(Common _buffer)
    {
        super(_buffer);

        resultMap = new Map(Types::String, Types::String);
        reportRecId = _buffer.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWorksheetName</Name>
				<Source><![CDATA[
    public str newWorksheetName(str _worksheetName)
    {
        str                 res;
        InteropPermission   permission;
        int                 idx;
        str                 idxStr;

        System.Text.RegularExpressions.Regex re;
        System.Text.RegularExpressions.Match matchIdx;

        if (_worksheetName)
        {
            permission = new InteropPermission(InteropKind::ClrInterop);
            permission.assert();

            re = new System.Text.RegularExpressions.Regex('(?<=\\(\\W*)\\d+(?=\\W*\\)\\W*$)');

            matchIdx = re.Match(_worksheetName);

            if (matchIdx.get_Success())
            {
                idxStr  = matchIdx.get_Value();
                idx     = str2int(idxStr);
            }

            if (!newWorksheets)
            {
                newWorksheets = new Map(Types::String, Types::Container);
            }

            do
            {
                idx++;
                if (matchIdx.get_Success())
                {
                    res = re.Replace(_worksheetName, strfmt('%1', idx));
                }
                else
                {
                    res = strfmt('%1 (%2)', _worksheetName, idx);
                }


            } while (newWorksheets.exists(LedgerRRGELoadBase_W::strAddIndex(_worksheetName, idx)));

            newWorksheets.insert(LedgerRRGELoadBase_W::strAddIndex(_worksheetName, idx), [res, _worksheetName]);
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWorksheets</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map newWorksheets()
    {
        return newWorksheets;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resultMap</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map resultMap()
    {
        return resultMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>staticValuesMap</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map staticValuesMap(Map _staticValuesMap = staticValuesMap)
    {
        MapEnumerator me;

        if (!prmisdefault(_staticValuesMap))
        {
            staticValuesMap = _staticValuesMap;
            if (staticValuesMap)
            {
                if (! parms.scale())
                    throw error("@LedgerRRG:LedgerRRG_ScaleIsNull");

                me = staticValuesMap.getEnumerator();
                while (me.moveNext())
                {
                    resultMap.insert(me.current(), parms.amount2Str(me.currentValue()));
                }
            }
        }

        return staticValuesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static server LedgerRRGEBufferEvalReport_W construct()
    {
        return new LedgerRRGEBufferEvalReport_W();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>