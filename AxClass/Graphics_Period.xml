<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Graphics_Period</Name>
	<SourceCode>
		<Declaration><![CDATA[
class Graphics_Period extends Graphics
{
    GraphicsDateDim     periodX;
    TransDate           fromDate;
    TransDate           toDate;
    DialogField         dialogPeriodX;
    DialogField         dialogFromDate;
    DialogField         dialogToDate;

    #DEFINE.CurrentVersion(2)

    #LOCALMACRO.CurrentList
       PeriodX,
       FromDate,
       ToDate
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>date2Column</Name>
				<Source><![CDATA[
    Integer date2Column(TransDate transDate, TransDate refDate, GraphicsDateDim convFunction)
    {
        Integer res;

        if (!convFunction)
        {
            convFunction = GraphicsDateDim::YearMonthDay;
        }

        switch (convFunction)
        {
            case GraphicsDateDim::YearWeek :
            case GraphicsDateDim::Week :
                if (transDate < refDate)
                {
                    TransDate tmpDate  = transDate;
                    transDate = refDate;
                    refDate = tmpDate;
                }

                res = real2int((transDate - refDate) / 7);
                if (dayofwk(transDate) < dayofwk(refDate))
                {
                    res++;
                }
                break;
            default:
                res = intvno(transDate, refDate, convFunction);
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>date2ColumnTxt</Name>
				<Source><![CDATA[
    ColumnTxt date2ColumnTxt(TransDate transDate, Column  column, GraphicsDateDim convFunction)
    {
        if (convFunction)
        {
            return intvname(transDate, column, convFunction);
        }
        else
        {
            return date2str((transDate + column), -1, -1, -1, -1, -1, -1, DateFlags::FormatAll);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>date2IntervalNormDate</Name>
				<Source><![CDATA[
    TransDate date2IntervalNormDate(TransDate _toDate, TransDate _fromDate, GraphicsDateDim _convFunction)
    {
        if (_convFunction)
        {
            return intvnorm(_toDate, _fromDate, _convFunction);
        }
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>date2MaxColumn</Name>
				<Source><![CDATA[
    Integer date2MaxColumn(TransDate _toDate, TransDate _fromDate, GraphicsDateDim convFunction)
    {
        Integer w1, w2;
        Integer res;

        if (!convFunction)
        {
            convFunction = GraphicsDateDim::YearMonthDay;
        }

        switch (convFunction)
        {
            case GraphicsDateDim::YearWeek :
            case GraphicsDateDim::Week :
                w1  = intvno(_fromDate , _fromDate, GraphicsDateDim::Week);
                w2  = intvno(_fromDate + ((_toDate - _fromDate) mod 7), _fromDate, GraphicsDateDim::Week);
                res = intvmax(_toDate, _fromDate, GraphicsDateDim::YearWeek) + (w1!=w2?1:0);
                break;
            default:
                res = intvmax(_toDate, _fromDate, convFunction);
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase      dialog = super();

        dialogPeriodX       = dialog.addField(enumStr(GraphicsDateDim), "@SYS23719", "@SYS23719");
        dialogPeriodX.value(periodX);

        dialogFromDate      = dialog.addField(extendedTypeStr(TransDate), "@SYS5209", "@SYS4083");
        dialogFromDate.value(fromDate);

        dialogToDate        = dialog.addField(extendedTypeStr(TransDate), "@SYS14656", "@SYS53942");
        dialogToDate.value(toDate);
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endColumnDate</Name>
				<Source><![CDATA[
    TransDate endColumnDate(TransDate refDate, GraphicsDateDim   convFunction)
    {
        Integer n        = 0;        
        Integer columnNo = this.date2Column(refDate, refDate+365, convFunction);
        if (!refDate)
        {
            return refDate;
        }

        while (columnNo == this.date2Column(refDate+n, refDate+365, convFunction))
        {
            n += 1;
        }

        return (refDate+n-1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        super();
        periodX         = dialogPeriodX.value();
        fromDate        = dialogFromDate.value();
        toDate          = dialogToDate.value();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodX</Name>
				<Source><![CDATA[
    GraphicsDateDim parmPeriodX(GraphicsDateDim _periodX = periodX)
    {
        periodX = _periodX;
        return periodX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmtoDate</Name>
				<Source><![CDATA[
    ToDate parmtoDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodConversion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Convert a period type.
    /// </summary>
    /// <param name="_period">
    ///    The period type that will be converted.
    /// </param>
    /// <returns>
    ///    A converted period type.
    /// </returns>
    private GraphicsDateDim periodConversion(GraphicsDateDim _period)
    {
        GraphicsDateDim newPeriod;

        switch (_period)
        {
            case GraphicsDateDim::MonthDay:
            case GraphicsDateDim::Day:
                newPeriod = GraphicsDateDim::YearMonthDay;
                break;
            case GraphicsDateDim::Month:
                newPeriod = GraphicsDateDim::YearMonth;
                break;
            case GraphicsDateDim::Quarter:
                newPeriod = GraphicsDateDim::YearQuarter;
                break;
            default:
                newPeriod = _period;
        }

        return newPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromDate</Name>
				<Source><![CDATA[
    TransDate setFromDate(TransDate _fromDate= fromDate)
    {
        fromDate= _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodX</Name>
				<Source><![CDATA[
    GraphicsDateDim setPeriodX(GraphicsDateDim _periodX  = periodX)
    {
        periodX  = _periodX;
        return periodX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToDate</Name>
				<Source><![CDATA[
    TransDate setToDate(TransDate _toDate  = toDate)
    {
        toDate  = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showGraph</Name>
				<Source><![CDATA[
    void showGraph()
    {
        TempStr         xValuesNew[];
        container       yData;
        container       yDataNew;
        container       columnDates;
        TransDate       refDate;
        TransDate       xValue;
        Integer         seriesIdx;
        Integer         pointIdx;
        Integer         defPointIdx;
        RealBase        pointValue;
        container       tmp;
        GraphicsDateDim newPeriod;

        // numOfPoints == number of points requested for chart
        // via Graphics::loadData().
        int             numOfPointsSave = numOfPoints;

        if (!fromDate)          // If fromDate uninitialized try to initialize it
        {                       // with minimum from X-axis labels
            defPointIdx = 1;
            while (defPointIdx <= numOfPoints)
            {
                if (!fromDate)
                {
                    fromDate= str2date(graphDataX[defPointIdx],-1);
                }
                fromDate= min(fromDate,str2date(graphDataX[defPointIdx],-1));
                defPointIdx++;
            }
            fromDate= this.startColumnDate(fromDate,periodX);
        }
        if (!toDate)            // If toDate uninitialized try to initialize it
        {                       // with maximum from X-axis labels
            defPointIdx = 1;

            while (defPointIdx <= numOfPoints)
            {
                if (!toDate)
                {
                    toDate  = str2date(graphDataX[defPointIdx],-1);
                }
                toDate  = max(toDate,str2date(graphDataX[defPointIdx],-1));
                defPointIdx += 1;
            }
            toDate = this.endColumnDate(toDate,periodX);
        }

        refDate = fromDate;

        if (!this.validate(this))   // Invalid inputs can cause problems
        {                           // beyond this point.  For example, if
            return;                 // fromDate > toDate, numOfPoints may
        }                           // be set negative:

        // Get new period because some date ranges can span years and the user may not have chosen to include the year in the display
        newPeriod = this.periodConversion(periodX);
        numOfPoints = this.date2MaxColumn(toDate, refDate, newPeriod);

        defPointIdx = 1;
        while (defPointIdx <= numOfPoints)
        {
            xValuesNew[defPointIdx] = this.date2ColumnTxt(refDate, defPointIdx-1, periodX);
            defPointIdx++;
        }

        seriesIdx= 1;
        while (seriesIdx <= numOfSeries)
        {
            while (conlen(yDataNew) < numOfPoints)
            {
                yDataNew += 0;
            }

            while (conlen(columnDates) < numOfPoints)
            {
                columnDates += 0;
            }

            yData = conpeek(graphDataY, seriesIdx);

            pointIdx = 1;
            while (pointIdx <= numOfPointsSave)
            {
                tmp = connull();
                xValue = str2date(graphDataX[pointIdx],-1);

                defPointIdx = this.date2Column(xValue, refDate, newPeriod);

                if (conpeek(columnDates,defPointIdx+1))
                {
                    tmp = conpeek(columnDates,defPointIdx+1);
                }

                tmp += xValue;

                if (defPointIdx >= 0)
                {
                    columnDates = conpoke(columnDates,defPointIdx+1,tmp);
                }

                pointValue  = conpeek(yData, pointIdx);
                pointValue  += conpeek(yDataNew, defPointIdx+1);

                if (defPointIdx >= 0)
                {
                    yDataNew= conpoke(yDataNew, defPointIdx+1, pointValue);
                }

                pointIdx += 1;
            }
            yDataNew    = this.yValueAdjustment(columnDates,yDataNew,seriesIdx);
            graphDataY  = conpoke(graphDataY, seriesIdx, yDataNew);
            yDataNew    = connull();
            columnDates = connull();
            seriesIdx+= 1;
        }

        for (defPointIdx = 1; defPointIdx<=numOfPoints; defPointIdx++)
        {
            graphDataX[defPointIdx]  = xValuesNew[defPointIdx];
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>startColumnDate</Name>
				<Source><![CDATA[
    TransDate startColumnDate(TransDate refDate, GraphicsDateDim convFunction)
    {
        Integer n    = 0;
        Integer i    = this.date2Column(refDate, refDate-365, convFunction);
        if (!refDate)
        {
            return refDate;
        }

        while (i == this.date2Column(refDate-n, refDate-365, convFunction))
        {
            n += 1;
        }

        return (refDate-n+1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean         ret;
        Integer         version     = conpeek(packedClass,1);
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList, base] = packedClass;
                return super(base);
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);
        if (fromDate > toDate)
        {
            ret = checkFailed("@SYS16982");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>yValueAdjustment</Name>
				<Source><![CDATA[
    container yValueAdjustment(container columnDates, container columnYValues, Integer _seriesIdx)
    {
        return columnYValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS4816";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGraphicsNoTitles</Name>
				<Source><![CDATA[
    static Graphics_Period newGraphicsNoTitles(FormManagedHostControl host, int width, int height)
    {
        throw error(strfmt("@SYS133635", staticmethodstr(Graphics_Period, newGraphicsNoTitlesSysChart)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGraphicsTitles</Name>
				<Source><![CDATA[
    static Graphics_Period newGraphicsTitles(FormManagedHostControl host,
                                             int                width,
                                             int                height,
                                             TempStr            title,
                                             TempStr            titleXAxis,
                                             TempStr            titleYAxis,
                                             TempStr            titleZAxis)
    {
        throw error(strfmt("@SYS133635", staticmethodstr(Graphics_Period, newGraphicsTitlesSysChart)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGraphicsNoTitlesSysChart</Name>
				<Source><![CDATA[
    static Graphics_Period newGraphicsNoTitlesSysChart(SysChart _sysChart, GraphicsTmpData _tmpDataSet)
    {
        Graphics_Period    graphics;

        graphics = new Graphics_Period();
        graphics.parmSysChart(_sysChart);
        graphics.parmTmpDataSet(_tmpDataSet);
        graphics.create();
        return graphics;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGraphicsTitlesSysChart</Name>
				<Source><![CDATA[
    static Graphics_Period newGraphicsTitlesSysChart(SysChart _sysChart,
                                             GraphicsTmpData    _tmpDataSet,
                                             TempStr            _title,
                                             TempStr            _titleXAxis,
                                             TempStr            _titleYAxis,
                                             TempStr            _titleZAxis)
    {
        Graphics_Period    graphics;

        graphics = new Graphics_Period();
        graphics.parmSysChart(_sysChart);
        graphics.parmTmpDataSet(_tmpDataSet);
        graphics.create();
        graphics.parmTitle(_title);
        graphics.parmTitleXAxis(_titleXAxis);
        graphics.parmTitleYAxis(_titleYAxis);
        graphics.parmTitleZAxis(_titleZAxis);
        return graphics;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>