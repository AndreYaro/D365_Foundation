<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetSumCalc_TransCorr</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RAssetSumCalc_TransCorr extends RAssetSumCalc
{
    private RTax25PeriodIterator rTax25PeriodIterator;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected Query buildQuery()
    {
        this.initIterator();
    
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tablenum(RAssetTransReportingView));
    
        queryBuildDataSource.orderMode(OrderMode::GroupBy);
    
        queryBuildDataSource.addSelectionField(fieldnum(RAssetTransReportingView, AmountMST), SelectionField::Sum);
        queryBuildDataSource.addSelectionField(fieldnum(RAssetTransReportingView, AmountCur), SelectionField::Sum);
    
        queryBuildDataSource.addSortField(fieldnum(RAssetTransReportingView, AssetTransType));
        queryBuildDataSource.addSortField(fieldnum(RAssetTransReportingView, PostingType));
        queryBuildDataSource.addSortField(fieldnum(RAssetTransReportingView, CurrencyCode));
        queryBuildDataSource.addSortField(fieldnum(RAssetTransReportingView, ReportingDate));
    
        queryBuildDataSource.addRange(fieldnum(RAssetTransReportingView, AccountNum)).value(rangeAssetId);
        queryBuildDataSource.addRange(fieldnum(RAssetTransReportingView, AssetStandardId)).value(queryValue(RAssetStandardId));
    
        if (dateFrom)
        {
            rTax25PeriodIterator.applyExtendedRange(queryBuildDataSource);
        }
        else
        {
            rTax25PeriodIterator.applyExtendedRange(queryBuildDataSource, true);
        }
    
    
    
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        if (!calculated && rangeAssetId)
        {
            QueryRun queryRun = new QueryRun(this.buildQuery());
    
            while (queryRun.next())
            {
                RAssetTransReportingView rAssetTrans = queryRun.get(tablenum(RAssetTransReportingView));
                this.updateSum(rAssetTrans.AssetTransType,
                    rAssetTrans.AmountCur,
                    rAssetTrans.AmountMST,
                    rAssetTrans.PostingType);
            }
    
            if (sumDescendants)
            {
                container descendants = str2con_RU(this.getDescendantRange(rangeAssetId, rAssetStandardId));
                for (int loop = 1; loop <= conLen(descendants); loop++)
                {
                    if (conPeek(descendants, loop))
                    {
                        this.updateSumExtra(conPeek(descendants, loop), rAssetStandardId);
                    }
                }
            }
            else
            {
                this.updateSumExtra(rangeAssetId, rAssetStandardId);
            }
    
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIterator</Name>
				<Source><![CDATA[
    private void initIterator()
    {
        if (!rTax25PeriodIterator)
        {
            if (dateFrom)
            {
                rTax25PeriodIterator = RTax25PeriodFactory::createIteratorDateRange(dateFrom, dateTo);
            }
            else
            {
                rTax25PeriodIterator = RTax25PeriodFactory::createIteratorDateRange(dateTo, dateTo);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    protected void initValue()
    {
        super();
    
        rTax25PeriodIterator = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRTax25PeriodIterator</Name>
				<Source><![CDATA[
    public RTax25PeriodIterator parmRTax25PeriodIterator(RTax25PeriodIterator _rTax25PeriodIterator = rTax25PeriodIterator)
    {
        rTax25PeriodIterator = _rTax25PeriodIterator;
        return rTax25PeriodIterator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSumExtra</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the extra tracked sums for the specified values.
    /// </summary>
    /// <param name="_assetId">
    /// The asset number of the fixed asset.
    /// </param>
    /// <param name="_assetStandardId">
    /// The value model id to which the asset belongs.
    /// </param>
    protected void updateSumExtra(RAssetId _assetId, RAssetStandardId _assetStandardId)
    {
        RAssetTable rAssetTable = RAssetTable::find(_assetId);
        RAssetStandards rAssetStandards = RAssetStandards::find(_assetId, _assetStandardId);
    
        acquisitionPrice += rAssetStandards.AcquisitionPrice;
        acquisitionPriceMST += CurrencyExchangeHelper::mstAmount(acquisitionPrice, rAssetStandards.CurrencyCode
            ? rAssetStandards.CurrencyCode
            : CompanyInfoHelper::standardCurrency(), rAssetTable.AcquisitionDate);
    
        if (rAssetStandards.DisposalDate
            && (dateTo >= rAssetStandards.DisposalDate
                || dateTo == dateNull()))
        {
            profitLossValue += rAssetStandards.SaleValue + disposalDisposedValue + disposalSaleValue + disposalScrapValue;
    
            profitLossValueMST += CurrencyExchangeHelper::mstAmount(profitLossValue, rAssetStandards.CurrencyCode
                ? rAssetStandards.CurrencyCode
                : CompanyInfoHelper::standardCurrency(), rAssetStandards.DisposalDate);
        }

        if (!rangeBudgetModel)
        {
            RTax25PeriodIterator periodIterator = rTax25PeriodIterator.clone();

            periodIterator.first();
    
            do
            {
                RAssetTransReportingView rAssetTrans;
                select sum(DepreciationBonusCost) from rAssetTrans
                    where rAssetTrans.AccountNum == _assetId
                    && rAssetTrans.AssetStandardId == _assetStandardId
                    && (rAssetTrans.AssetTransType == RAssetTransType::Acquisition
                        || rAssetTrans.AssetTransType == RAssetTransType::Revaluation)
                    && ((rAssetTrans.AccountingDate >= periodIterator.fromDateAccounting()
                            && rAssetTrans.AccountingDate <= periodIterator.toDateAccounting()
                            && rAssetTrans.ReportingDate >= periodIterator.fromDateReporting()
                            && rAssetTrans.ReportingDate <= periodIterator.toDateReporting())
                        || !dateTo)
                    && !rAssetTrans.LinkedTransRecId;
    
                depreciationScheduledBonusValue += rAssetTrans.DepreciationBonusCost;
    
                select sum(DepreciationBonusCost) from rAssetTrans
                    where rAssetTrans.AccountNum == _assetId
                        && rAssetTrans.AssetStandardId == _assetStandardId
                        && rAssetTrans.AssetTransType == RAssetTransType::Depreciation
                        && ((rAssetTrans.AccountingDate >= periodIterator.fromDateAccounting()
                                && rAssetTrans.AccountingDate <= periodIterator.toDateAccounting()
                                && rAssetTrans.ReportingDate >= periodIterator.fromDateReporting()
                                && rAssetTrans.ReportingDate <= periodIterator.toDateReporting())
                            || !dateTo)
                        && !rAssetTrans.LinkedTransRecId;
    
                depreciationPostedBonusValue += rAssetTrans.DepreciationBonusCost;
            }
            while (periodIterator.next()
                && dateTo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssetPeriod</Name>
				<Source><![CDATA[
    public static RAssetSumCalc_TransCorr newAssetPeriod(Range _rangeAssetId,
        RAssetStandardId _rAssetStandardId,
        RAssetTransDate _dateTo = dateNull(),
        RAssetTransDate _dateFrom = dateNull(),
        RTax25PeriodIterator _rTax25PeriodIterator = null)
    {
        RAssetSumCalc_TransCorr rAssetSumCalc_Trans = new RAssetSumCalc_TransCorr();
        rAssetSumCalc_Trans.parmRangeAssetId(_rangeAssetId);
        rAssetSumCalc_Trans.parmDateFrom(_dateFrom);
        rAssetSumCalc_Trans.parmDateTo(_dateTo);
        rAssetSumCalc_Trans.parmRangeAssetStandard(_rAssetStandardId);
        rAssetSumCalc_Trans.parmRTax25PeriodIterator(_rTax25PeriodIterator);
        return rAssetSumCalc_Trans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>