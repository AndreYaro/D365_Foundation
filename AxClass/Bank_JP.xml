<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Bank_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>Bank_JP</c> class provides Japan bank rule overrides.
/// </summary>
class Bank_JP extends Bank
{
    BankGroup   bankGroup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBankAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks bank account number.
    /// </summary>
    /// <param name="_bankAccount">
    ///     Bank account number
    /// </param>
    /// <returns>
    ///     Boolean flag indicates operation result
    /// </returns>
    public boolean checkBankAccountNum(BankAccount _bankAccount)
    {
        return Bank_JP::validateAccountNumber(_bankAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static Bank_JP construct()
    {
        return new Bank_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates account number.
    /// </summary>
    /// <param name="_accountNumber">
    ///     Account number
    /// </param>
    /// <returns>
    ///     Boolean flag indicates operation result
    /// </returns>
    public static boolean validateAccountNumber(AccountNum _accountNumber)
    {
        boolean lengthOK  = true;
        boolean allDigits = true;

        const str Digits = '0123456789';
        const int AccountNumberMinLength = 7;
        const int AccountNumberMaxLength = 12;
        const int ZeroLength = 0;

        AccountNum tmpAccountNum = strrem(_accountNumber, Digits);
        int length = strlen(tmpAccountNum);
        int accountNumberLen = strlen(_accountNumber);

        if (accountNumberLen < AccountNumberMinLength
            || accountNumberLen > AccountNumberMaxLength)
        {
            // Bank account number must be %1 digits
            lengthOK = checkFailed(strfmt("@SYS317402", AccountNumberMinLength, AccountNumberMaxLength));
        }

        if (length != ZeroLength)
        {
            // Bank account number can contain only digits.
            allDigits = checkFailed("@SYS97947");
        }

        return lengthOK && allDigits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankNameKana</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate bank kana name for JBA format.
    /// </summary>
    /// <param name = "_accountNameKana">
    /// The kana name to validate.
    /// </param>
    /// <param name = "_tableId">
    /// The table id of the kana name.
    /// </param>
    /// <param name = "_fieldId">
    /// The field id of the kana name.
    /// </param>
    /// <returns>
    /// True if the kana name is valid; otherwise, false.
    /// </returns>
    public static boolean validateBankNameKana(
        BankAccountNameKana_JP  _accountNameKana,
        TableId                 _tableId = 0,
        FieldId                 _fieldId = 0)
    {
        const str validCharacters = @'A-Z|\d|ｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜｦﾝﾞﾟ ￥｢｣\(\)/.\-';

        str                                     invalidPattern;
        boolean                                 isvalidKanaName;
        System.Text.RegularExpressions.Regex    regex;
        BankParameters                          bankParameters;
        DictField                               dictField;
        FieldLabel                              fieldLabel;

        bankParameters  = BankParameters::find();
        if (bankParameters.BankAccountNameKanaCanUseComma_JBA_JP)
        {
            invalidPattern = '[^' + validCharacters + ',]';
        }
        else
        {
            invalidPattern = '[^' + validCharacters + ']';
        }
        regex           = new System.Text.RegularExpressions.Regex(invalidPattern);
        isvalidKanaName = !regex.IsMatch(_accountNameKana);

        if (_tableId && _fieldId)
        {
            dictField = new DictField(_tableId, _fieldId);
            if (dictField)
            {
                fieldLabel = dictField.label();
                if (isvalidKanaName)
                {
                    info(strFmt("@CashManagement:NameKanaValidated_JP", fieldLabel));
                }
                else
                {
                    warning(strFmt("@CashManagement:NameKanaContainsInvalidCharacters_JP", fieldLabel));
                }
            }
        }

        return isvalidKanaName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nameKanaValidateMasterDataNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if kana name needs to be validated on master data.
    /// </summary>
    /// <returns>
    /// True if kana name needs to be validated on master data; otherwise, false.
    /// </returns>
    public static boolean nameKanaValidateMasterDataNeeded()
    {
        BankParameters bankParameters = BankParameters::find();

        if (bankParameters.BankAccountNameKanaValidation_JBA_JP == BankAccountNameKanaValidation_JBA_JP::ValidateMasterData
            || bankParameters.BankAccountNameKanaValidation_JBA_JP == BankAccountNameKanaValidation_JBA_JP::ValidateMasterDataAndPaymentFile)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nameKanaValidatePaymentFileNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if kana name needs to be validated when generating payment file.
    /// </summary>
    /// <returns>
    /// True if kana name needs to be validated when generating payment file; otherwise, false.
    /// </returns>
    public static boolean nameKanaValidatePaymentFileNeeded()
    {
        BankParameters bankParameters = BankParameters::find();

        if (bankParameters.BankAccountNameKanaValidation_JBA_JP == BankAccountNameKanaValidation_JBA_JP::ValidateMasterDataAndPaymentFile)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJPLegalEntityOrLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the legal entity or location is JPN.
    /// </summary>
    /// /// <param name = "_location">
    /// The location to validate.
    /// </param>
    /// <returns>
    /// Returns the legal entity or location is JPN state.
    /// </returns>
    #ISOCountryRegionCodes
    internal static boolean isJPLegalEntityOrLocation(LogisticsLocationRecId _location)
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]) ||
            SysCountryRegionCode::isLocationInCountryRegion(_location, [#isoJP]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearJPFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears JP specific fields in Bank group table in non JPN entity and location.
    /// </summary>
    /// /// <param name = "_bankGroup">
    /// The Bank group table for update.
    /// </param>
    internal static void clearJPFields(BankGroup _bankGroup)
    {
        if (!Bank_JP::isJPLegalEntityOrLocation(_bankGroup.Location))
        {
            _bankGroup.Code_JP = '';
            _bankGroup.BankName_JP = '';
            _bankGroup.NameKana_JP = '';
            _bankGroup.BranchCode_JP = '';
            _bankGroup.BranchNameKana_JP = '';

            if (!ThirdPartyFeatureModelChecker::checkEXILFeatureApplicability(EXILFeature::Exil1364))
            {
                _bankGroup.BranchName_JP = '';
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>