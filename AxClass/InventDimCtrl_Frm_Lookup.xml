<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_Lookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimCtrl_Frm_Lookup extends InventDimCtrl_Frm
{
    boolean         callerHasItemId;
    boolean         callerItemIdMethod;
    boolean         callerWMSPalletIdMethod;
    boolean         callerHasInventDimParm;
    FieldId         mainSortFieldId;
    boolean         inventDimInit;
    InventItemIdProvider itemIdProvider;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>callerFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the <c>fieldId</c> value of the caller.
    /// </summary>
    /// <param name="_formDataSource">
    ///    The <c>FormDataSource</c> record that contains the caller field.
    /// </param>
    /// <param name="_searchFieldNameContains">
    ///    The caller field must contain this string.
    /// </param>
    /// <param name="_searchExtendedTypeId">
    ///    The caller field must be of this extended data type.
    /// </param>
    /// <returns>
    ///    A <c>fieldId</c> value if a caller is found; otherwise, zero.
    /// </returns>
    protected FieldId callerFieldId(
        FormDataSource  _formDataSource,
        str             _searchFieldNameContains,
        ExtendedTypeId  _searchExtendedTypeId)
    {
        FieldId             fieldId;
        FieldId             firstFieldId;
        FieldId             bestMatchFieldId;
        FieldId             nameMatchFieldId;
        int                 i;
        Set                 set = new Set(Types::Integer);
        #AOT

        if (!_formDataSource)
        {
            return 0;
        }

        //search for fields in the datasource that match the naming and type requirements
        SysDictTable dictTable = new SysDictTable(_formDataSource.table());
        for (i = 1; i <= dictTable.fieldCntWithoutSys(); i++)
        {
            SysDictField dictField = new SysDictField(dictTable.id(),dictTable.fieldCnt2Id(i));

            if (dictField.typeId())
            {
                if (dictField.baseType() == Types::String)
                {
                    if (   !_searchFieldNameContains
                        || strScan(dictField.name(),_searchFieldNameContains,0,#IdentifierNameLen))
                    {
                        SysDictType dictType = new SysDictType(dictField.typeId());
                        if (   dictType.id() == _searchExtendedTypeId
                            || dictType.isExtending(_searchExtendedTypeId))
                        {
                            fieldId = dictField.id();
                            set.add(fieldId);

                            // save first match as potential best match
                            if (!firstFieldId)
                            {
                                firstFieldId = fieldId;
                            }

                            // save name match as potential best match
                            if (dictField.name() == _searchFieldNameContains)
                            {
                                nameMatchFieldId = fieldId;
                            }
                        }
                    }
                }
            }
        }

        // if more than one match is found, prioritize one that is shown in the same group on the form
        if (set.elements() > 1)
        {
            FormStringControl callerControl = SysTableLookup::getCallerStringControl(callingElement.args());
            FormRun formRun = callingElement.args().caller();

            if (   callerControl
                && formRun)
            {
                Form form = formRun.form();
                Object parentObject = callerControl.parentControl();

                if (parentObject)
                {
                    for (i=1; i<=parentObject.controlCount(); i++)
                    {
                        Object childObject = parentObject.controlNum(i);
                        if (childObject.handle() == classNum(FormStringControl))
                        {
                            FormStringControl stringControl = childObject;
                            int               dataSourceNum = stringControl.dataSource();
                            FieldId           extFieldId    = stringControl.dataField();
                            if (   dataSourceNum
                                && extFieldId)
                            {
                                FormBuildDataSource formBuildDataSource = form.dataSource(dataSourceNum);
                                if (   formBuildDataSource
                                    && formBuildDataSource.table() == dictTable.id()
                                    && set.in(fieldExt2Id(extFieldId)))
                                {
                                    fieldId = fieldExt2Id(extFieldId);

                                    if (   fieldId == nameMatchFieldId
                                        || !nameMatchFieldId)
                                    {
                                        // if the field with the exact name match is in the group, prioritize it
                                        bestMatchFieldId = fieldId;
                                        break;
                                    }

                                    if (!bestMatchFieldId)
                                    {
                                        // the best match is the first match in the same group
                                        bestMatchFieldId = fieldId;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        if (bestMatchFieldId)
        {
            return bestMatchFieldId;
        }

        if (nameMatchFieldId)
        {
            // fallback to name match if present
            return nameMatchFieldId;
        }

        // fallback to lowest fieldId (may be zero)
        return firstFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerFormDatasource</Name>
				<Source><![CDATA[
    public FormDataSource callerFormDatasource()
    {
        if (! callingElement.args())
        {
            return null;
        }

        // Don't check on 'fr.args().record()' alone
        // Try test for dataset instead
        if (! callingElement.args().dataset())
        {
            return null;
        }

        // Could be a buffer which isn't inserted yet
        if (! callingElement.args().record().TableId)
        {
            return null;
        }

        return FormDataUtil::getFormDataSource(callingElement.args().record());
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerInventDimFormDatasource</Name>
				<Source><![CDATA[
    // Returns formDatasource for inventDim datasource
    public FormDataSource callerInventDimFormDatasource()
    {
        FormDataSource  formDataSource = this.callerFormDatasource();
        int             i;

        if (! formDataSource)
        {
            return null;
        }

        if (formDataSource.table() == tableNum(InventDim)      ||
            formDataSource.table() == tableNum(InventLocation) )
        {
            return formDataSource;
        }

        if (formDataSource.table() == tableNum(InventItemLocation))
        {
            for (i=1;i<=formDataSource.formRun().dataSourceCount();i++)
            {
                FormDataSource formDatasourceJoined = formDataSource.formRun().dataSource(i);
                if (formDatasourceJoined.joinSource() == formDataSource.id() &&
                    formDatasourceJoined.table() == tableNum(InventDim))
                {
                    return formDatasourceJoined;
                }
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerInventLocationFieldId</Name>
				<Source><![CDATA[
    public FieldId callerInventLocationFieldId()
    {
        //could return zero
        return this.callerFieldId(this.callerInventLocationIdFormDatasource(),fieldStr(InventLocation,InventLocationId),extendedTypeNum(InventLocationId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerInventLocationIdCursor</Name>
				<Source><![CDATA[
    public Common callerInventLocationIdCursor()
    {
        FormDataSource formDataSource = this.callerInventLocationIdFormDatasource();
        if (!formDataSource)
        {
            return null;
        }

        return formDataSource.cursor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerInventLocationIdFormDatasource</Name>
				<Source><![CDATA[
    protected FormDataSource callerInventLocationIdFormDatasource()
    {
        // Link to callers itemid datasource
        FormDataSource formDataSource = this.callerInventDimFormDatasource();

        if (!formDataSource)
        {
            formDataSource = this.callerFormDatasource();
            if (!formDataSource)
            {
                return null;
            }
        }

        return formDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerInventOwnerFieldId_RU</Name>
				<Source><![CDATA[
    fieldId callerInventOwnerFieldId_RU()
    {
        FormDataSource  formDataSource = this.callerInventOwnerIdFormDatasource_RU();
        if (! formDataSource)
            return 0;

        // Could return zero
        fieldId fieldId = fieldname2id(formDataSource.table(),fieldstr(InventDim, InventOwnerId_RU));

        return fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerInventOwnerIdCursor_RU</Name>
				<Source><![CDATA[
    Common callerInventOwnerIdCursor_RU()
    {
        FormDataSource formDataSource = this.callerInventOwnerIdFormDatasource_RU();
        if (!formDataSource)
            return null;

        return formDataSource.cursor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerInventOwnerIdFormDatasource_RU</Name>
				<Source><![CDATA[
    FormDataSource callerInventOwnerIdFormDatasource_RU()
    {
        // Link to callers itemid datasource
        FormDataSource formDataSource = this.callerInventDimFormDatasource();

        if (! formDataSource)
        {
            formDataSource = this.callerFormDatasource();
            if (! formDataSource)
                return null;

            if (! fieldname2id(formDataSource.table(), fieldstr(InventDim, InventOwnerId_RU)) &&
                ! fieldname2id(formDataSource.table(), fieldstr(InventOwner_RU, InventOwnerId)))
            {
                return null;
            }
        }

        return formDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerInventProfileFieldId_RU</Name>
				<Source><![CDATA[
    fieldId callerInventProfileFieldId_RU()
    {
        FormDataSource formDataSource = this.callerInventProfileIdFormDatasource_RU();

        if (! formDataSource)
        {
            return 0;
        }

        return fieldname2id(formDataSource.table(), fieldstr(InventDim, InventProfileId_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerInventProfileIdCursor_RU</Name>
				<Source><![CDATA[
    Common callerInventProfileIdCursor_RU()
    {
        FormDataSource formDataSource = this.callerInventProfileIdFormDatasource_RU();
        if (!formDataSource)
        {
            return null;
        }

        return formDataSource.cursor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerInventProfileIdFormDatasource_RU</Name>
				<Source><![CDATA[
    FormDataSource callerInventProfileIdFormDatasource_RU()
    {
        FormDataSource formDataSource = this.callerInventDimFormDatasource();

        if (! formDataSource)
        {
            formDataSource = this.callerFormDatasource();
            if (! formDataSource)
            {
                return null;
            }

            if (! fieldname2id(formDataSource.table(), fieldstr(InventDim, InventProfileId_RU)) &&
                ! fieldname2id(formDataSource.table(), fieldstr(InventProfile_RU, InventProfileId)))
            {
                return null;
            }
        }

        return formDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerInventSiteFieldId</Name>
				<Source><![CDATA[
    public FieldId callerInventSiteFieldId()
    {
        //could return zero
        return this.callerFieldId(this.callerInventSiteIdFormDatasource(),fieldStr(InventSite,SiteId),extendedTypeNum(InventSiteId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerInventSiteIdCursor</Name>
				<Source><![CDATA[
    public Common callerInventSiteIdCursor()
    {
        FormDataSource formDataSource = this.callerInventSiteIdFormDatasource();
        if (!formDataSource)
        {
            return null;
        }
        return formDataSource.cursor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerInventSiteIdFormDatasource</Name>
				<Source><![CDATA[
    FormDataSource callerInventSiteIdFormDatasource()
    {
        FormDataSource formDataSource = this.callerFormDatasource();

        if (! formDataSource)
        {
            return null;
        }

        return formDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerItemFieldId</Name>
				<Source><![CDATA[
    public FieldId callerItemFieldId()
    {
        FormDataSource  formDataSource = this.callerItemIdFormDatasource();

        if (! formDataSource)
        {
            return 0;
        }

        // Could return zero
        FieldId fieldId = fieldName2id(formDataSource.table(),fieldStr(InventTable,ItemId));

        // ItemId in Table RetailPricingSimulatorSalesLine is called 'DisplayProductNumber'.
        if (formDataSource.table() == tableNum(RetailPricingSimulatorSalesLine))
        {
            fieldId = fieldName2id(formDataSource.table(),fieldStr(RetailPricingSimulatorSalesLine, DisplayProductNumber));
        }

        return fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerItemId</Name>
				<Source><![CDATA[
    public ItemId callerItemId()
    {
        if (! callerHasItemId)
        {
            return '';
        }

        if (itemIdProvider)
        {
            return itemIdProvider.itemId();
        }

        if (callerItemIdMethod)
        {
            return callingElement.args().caller().itemId();
        }

        return this.callerItemIdFormDatasource().cursor().(this.callerItemFieldId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerItemIdFormDatasource</Name>
				<Source><![CDATA[
    public FormDataSource callerItemIdFormDatasource()
    {
        // Link to callers itemid datasource
        FormDataSource formDataSource = this.callerInventDimFormDatasource();

        if (formDataSource)
        {
            formDataSource = formGetParentDatasource(formDataSource);
        }
        else
        {
            formDataSource = this.callerFormDatasource();
            if (! formDataSource)
            {
                return null;
            }

            if (! fieldName2id(formDataSource.table(),fieldStr(InventTable,ItemId)))
            {
                return null;
            }
        }

        return formDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerWMSLocationFieldId</Name>
				<Source><![CDATA[
    public FieldId callerWMSLocationFieldId()
    {
        //could return zero
        return this.callerFieldId(this.callerWMSLocationIdFormDatasource(),fieldStr(WMSLocation,wmsLocationId),extendedTypeNum(WMSLocationId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerWMSLocationIdCursor</Name>
				<Source><![CDATA[
    public Common callerWMSLocationIdCursor()
    {
        FormDataSource formDataSource = this.callerWMSLocationIdFormDatasource();
        if (!formDataSource)
        {
            return null;
        }

        return formDataSource.cursor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerWMSLocationIdFormDatasource</Name>
				<Source><![CDATA[
    protected FormDataSource callerWMSLocationIdFormDatasource()
    {
        // Link to callers itemid datasource
        FormDataSource formDataSource = this.callerInventDimFormDatasource();

        if (! formDataSource)
        {
            formDataSource = this.callerFormDatasource();
            if (! formDataSource)
            {
                return null;
            }
        }

        return formDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerWMSPalletId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>WMSPalletId</c> value.
    /// </summary>
    /// <returns>
    ///    A <c>wmsPalletid</c> value; otherwise, blank.
    /// </returns>
    /// <remarks>
    ///    Callers should implement the <c>wmsPalletId</c> method if the <c>wmsPalletId</c> should be used for
    ///    filtering.
    /// </remarks>
    [SysObsolete('Functionality related to Warehouse Management II is not supported', false, 7\11\2016)]
    public WMSPalletId callerWMSPalletId()
    {
        if (!callerWMSPalletIdMethod || !callingElement.args() || !callingElement.args().caller())
        {
            return '';
        }

        return callingElement.args().caller().wmsPalletId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeInventDimLinkDimQueryDS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds dynalinks between the <c>QueryBuildDataSource</c> data source passed as parameter and the
    ///    callers data source.
    /// </summary>
    /// <param name="_qbdsInventDim">
    ///    A <c>QueryBuildDataSource</c> data source bound to the <c>InventDim</c> table.
    /// </param>
    /// <param name="_linkDim">
    ///    A Boolean value that indicates whether the dimension fields should be linked using dynalinks.
    /// </param>
    /// <remarks>
    ///    The two data sources should be bound to the <c>InventDim</c> table.
    /// </remarks>
    public void executeInventDimLinkDimQueryDS(
        QueryBuildDataSource    _qbdsInventDim,
        boolean                 _linkDim)
    {
        List            dimEnabledFields = InventDim::dimEnabledFieldList();
        ListEnumerator  dimFieldsEnumerator = dimEnabledFields.getEnumerator();
        InventDim       linkInventDim;
        FormDataSource  formDataSource = this.callerInventDimFormDatasource();

        if (_linkDim && formDataSource)
        {
            linkInventDim = formDataSource.cursor() as InventDim;
        }

        this.initDimParmVisibleGrid();

        _qbdsInventDim.clearDynalinks();
        _qbdsInventDim.sortClear();

        // Add sort for main sortfield
        _qbdsInventDim.addSortField(mainSortFieldId);

        while (dimFieldsEnumerator.moveNext())
        {
            FieldId dimFieldId = dimFieldsEnumerator.current();
            if (dimParmVisibleGrid.isFieldIdEnabled(dimFieldId))
            {
                if (InventDim::isFieldIdProductDimension(dimFieldId) && dimFieldId != mainSortFieldId)
                {
                    if (_linkDim && this.isLinkableInventDimField(linkInventDim, dimFieldId))
                    {
                        _qbdsInventDim.addDynalink(dimFieldId,linkInventDim, dimFieldId);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLinkableInventDimField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an inventory dimension field is linkable.
    /// </summary>
    /// <param name = "_inventDim">An inventory dimension instance.</param>
    /// <param name = "_dimFieldId">An inventory dimension field id.</param>
    /// <returns>true if an inventory dimension field is linkable; otherwise, false.</returns>
    protected boolean isLinkableInventDimField(InventDim _inventDim, FieldId _dimFieldId)
    {
        return _inventDim.(_dimFieldId) != InventDim::emptyDimField(_dimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLinkableOrHigherInventDimFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an inventory dimension field is linkable or its index is lower than the one of the field currently set as a main sort field.
    /// </summary>
    /// <param name = "_inventDim">An inventory dimension instance.</param>
    /// <param name = "_dimFieldId">An inventory dimension field id.</param>
    /// <param name = "_dimFieldIdx">An index of a dimension field with <paramref name="_dimFieldId" /> Id.</param>
    /// <param name = "_mainDimFieldIdx">An index of a dimension field that is currently set as a main sort field.</param>
    /// <returns>true if an inventory dimension field is 'higher' or linkable; otherwise, false.</returns>
    protected boolean isLinkableOrHigherInventDimFieldId(InventDim _inventDim, FieldId _dimFieldId, int _dimFieldIdx, int _mainDimFieldIdx)
    {
        return _dimFieldIdx < _mainDimFieldIdx
            || _dimFieldIdx > _mainDimFieldIdx && this.isLinkableInventDimField(_inventDim, _dimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSortableInventDimField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an inventory dimension field is sortable.
    /// </summary>
    /// <param name = "_dimFieldIdx">An index of a dimension field.</param>
    /// <param name = "_mainDimFieldIdx">An index of a dimension field that is currently set as a main sort field.</param>
    /// <param name = "_isLinkable">Whether an inventory dimension field is linkable.</param>
    /// <returns>true if an inventory dimension field is sortable; otherwise, false.</returns>
    protected boolean isSortableInventDimField(int _dimFieldIdx, int _mainDimFieldIdx, boolean _isLinkable)
    {
        return InventDim::isFieldIdProductDimension(mainSortFieldId)
            || _dimFieldIdx < _mainDimFieldIdx
            || _isLinkable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeInventDimQueryDatasource</Name>
				<Source><![CDATA[
    public void executeInventDimQueryDatasource(
        FormDataSource          _inventDimDataSource,
        boolean                 _linkDim,
        boolean                 _onlyAvail = false)
    {
        List                    dimEnabledFields = InventDim::dimEnabledFieldList();
        ListEnumerator          dimFieldsEnumerator = dimEnabledFields.getEnumerator();
        InventDim               linkInventDim;
        int                     mainFieldIdx = InventDim::dimFieldListPosition(dimEnabledFields, mainSortFieldId);
        int                     currentIdx;
        InventDimParm           inventDimParmHint;
        Query                   inventDimQuery;
        boolean                 queryFromQueryRun = false;
        FormDataSource          formDataSource = this.callerInventDimFormDatasource();

        //if queryRun object is created use query from it
        //this allows to modify query that is used in filtered lookups
        if (_inventDimDataSource.queryRun())
        {
            inventDimQuery  = _inventDimDataSource.queryRun().query();
            queryFromQueryRun = true;
        }
        else
        {
            inventDimQuery = _inventDimDataSource.query();
        }
        QueryBuildDataSource qbdsDim = inventDimQuery.dataSourceTable(tableNum(InventDim));
        QueryBuildDataSource qbdsSum = inventDimQuery.dataSourceTable(tableNum(InventSum));

        if (_linkDim && formDataSource)
        {
            linkInventDim = formDataSource.cursor() as InventDim;
        }
        this.initDimParmVisibleGrid();
        this.findGroupByDimensions(_linkDim);

        qbdsDim.clearDynalinks();
        qbdsDim.sortClear();

        // Add sort for main sortfield
        qbdsDim.addSortField(mainSortFieldId);

        while (dimFieldsEnumerator.moveNext())
        {
            FieldId dimFieldId = dimFieldsEnumerator.current();
            currentIdx++;
            if (dimParmVisibleGrid.isFieldIdEnabled(dimFieldId))
            {
                if (dimFieldId != mainSortFieldId)
                {
                    boolean isLinkableInventDimField = _linkDim && this.isLinkableOrHigherInventDimFieldId(linkInventDim, dimFieldId, currentIdx, mainFieldIdx);

                    if (this.isSortableInventDimField(currentIdx, mainFieldIdx, isLinkableInventDimField))
                    {
                        qbdsDim.addSortField(dimFieldId);
                    }

                    // Dynalink field
                    if (isLinkableInventDimField)
                    {
                        qbdsDim.addDynalink(dimFieldId, linkInventDim, dimFieldId);
                        FieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldId);
                        inventDimParmHint.(dimParmFieldId) = NoYes::Yes;
                    }
                }
            }
        }

        QueryBuildRange criteriaAvail = SysQuery::findOrCreateRange(qbdsSum, fieldNum(InventSum,AvailOrdered));
        if (!_onlyAvail)
        {
            criteriaAvail.value(SysQuery::valueUnlimited());
            criteriaAvail.status(RangeStatus::Open);
        }
        else
        {
            criteriaAvail.value('(('+fieldStr(InventSum,AvailOrdered)+' != 0.0)'+' || '+
                                 '('+fieldStr(InventSum,AvailPhysical)+' != 0.0)'+')');
            criteriaAvail.status(RangeStatus::Locked);
        }

        if (! inventDimParmHint.isFlagSelective())
        {
            inventDimQuery.literals(2);

            qbdsSum.addSortIndex(indexNum(InventSum,ClosedItemDimIdx));
            qbdsSum.indexIsHint(true);

            qbdsDim.addSortIndex(indexNum(InventDim,DimIdIdx));
            qbdsDim.indexIsHint(true);
        }
        else
        {
            inventDimQuery.literals(0);
        }
        //query from queryRun object is modified when running a filtered lookup.
        //in such case assign query instance to query property to keep them in sync
        if (queryFromQueryRun)
        {
            _inventDimDataSource.query(_inventDimDataSource.queryRun().query());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findGroupByDimensions</Name>
				<Source><![CDATA[
    protected void findGroupByDimensions(boolean _linkDim)
    {
        List            dimEnabledFields = InventDim::dimEnabledFieldList();
        ListEnumerator  dimFieldsEnumerator = dimEnabledFields.getEnumerator();
        int             mainFieldIdx = InventDim::dimFieldListPosition(dimEnabledFields, mainSortFieldId);
        int             currentIdx;
        InventDim       linkInventDim;
        FormDataSource  formDataSource = this.callerInventDimFormDatasource();

        if (_linkDim && formDataSource)
        {
            linkInventDim = formDataSource.cursor() as InventDim;
        }
        this.initDimParmVisibleGrid();

        while (dimFieldsEnumerator.moveNext())
        {
            FieldId dimFieldId = dimFieldsEnumerator.current();
            currentIdx++;
            if (this.mustAddGroupByDimensionField(linkInventDim, dimFieldId))
            {
                boolean isLinkableInventDimField = _linkDim && this.isLinkableOrHigherInventDimFieldId(linkInventDim, dimFieldId, currentIdx, mainFieldIdx);

                if (this.isSortableInventDimField(currentIdx, mainFieldIdx, isLinkableInventDimField))
                {
                    dimParmVisibleGrid.(InventDim::dim2dimParm(dimFieldId)) = NoYes::Yes;
                }
                else
                {
                    dimParmVisibleGrid.(InventDim::dim2dimParm(dimFieldId)) = NoYes::No;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddGroupByDimensionField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines whether group by a dimension field must be added to the grid.
    /// </summary>
    /// <param name = "_inventDim">An inventory dimension instance.</param>
    /// <param name = "_dimFieldId">An inventory dimension field id.</param>
    /// <returns>true if group by a field must be added; otherwise, false.</returns>
    protected boolean mustAddGroupByDimensionField(InventDim _inventDim, FieldId _dimFieldId)
    {
        return dimParmVisibleGrid.isFieldIdEnabled(_dimFieldId)
            && _dimFieldId != mainSortFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formActiveSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes sure that the appropriate dimension fields are enabled.
    /// </summary>
    /// <param name="_inventDimGroupSetup">
    /// An instance of the <c>InventDimGroupSetup</c> class that provides information about the dimension
    /// setup.
    /// </param>
    /// <remarks>
    /// Call this method when the active record in the form has changed.
    /// </remarks>
    public void formActiveSetup(InventDimGroupSetup _inventDimGroupSetup = null)
    {
        if (this.hasCallerItemId())
        {
            super(InventDimGroupSetup::newItemId(this.callerItemId()));
        }
        else
        {
            super(_inventDimGroupSetup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCallerInventDimParm</Name>
				<Source><![CDATA[
    public boolean hasCallerInventDimParm()
    {
        return callerHasInventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCallerItemId</Name>
				<Source><![CDATA[
    public boolean hasCallerItemId()
    {
        return callerHasItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes this class.
    /// </summary>
    /// <remarks>
    ///    This method should always be called from the constructing new method.
    /// </remarks>
    public void init()
    {
        callerHasItemId = this.callerItemFieldId() != 0;
        if (! callerHasItemId)
        {
            FormRun formRun = callingElement.args().caller() as formRun;

            if (callingElement is InventItemIdProvider)
            {
                itemIdProvider = callingElement as InventItemIdProvider;
            }
            else if (callingElement.args().caller() is InventItemIdProvider)
            {
                itemIdProvider = callingElement.args().caller() as InventItemIdProvider;
            }
            else if (formHasMethod(formRun, formMethodStr(Dialog, runbase)))
            {
                itemIdProvider = formRun.runbase() as InventItemIdProvider;
            }

            callerItemIdMethod  = formHasMethod(formRun, identifierStr(itemId)); // Method name
            if (callerItemIdMethod || itemIdProvider)
            {
                callerHasItemId = true;
            }
        }

        callerHasInventDimParm  = formHasMethod(callingElement.args().caller(),InventDimCtrl_Frm::inventDimSetupObjectMethod());
        callerWMSPalletIdMethod = formHasMethod(callingElement.args().caller(),identifierStr(wmsPalletId));

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimParmVisibleGrid</Name>
				<Source><![CDATA[
    protected InventDimParm initDimParmVisibleGrid()
    {
        InventDimParm                   tmpDimParm;
        InventDimGroupSetup             inventDimGroupSetupLocal;

        dimParmVisibleGrid.clear();
        if (this.hasCallerItemId() && this.hasCallerInventDimParm())
        {
            inventDimGroupSetupLocal = this.initInventDimGroupSetup();
            inventDimGroupSetupLocal.inventDimParmActive(dimParmVisibleGrid);
        }
        else
        {
            super();
        }

        if (InventDim::isFieldIdProductDimension(mainSortFieldId))
        {
            if (this.callerItemId())
            {
                if (inventDimGroupSetupLocal)
                {
                    inventDimGroupSetupLocal.inventDimParmActiveProductDimension(tmpDimParm);
                }
                else
                {
                    // storage and tracking dimension groups might not be specified yet, but lookup for product dimensions should still be possible
                    tmpDimParm = EcoResProductDimGroupSetup::newDimensionGroup(InventTable::itemProductDimensionGroup(this.callerItemId())).inventDimParmActiveDimensions();
                }
            }
            else
            {
                tmpDimParm.initProductDimensionsAllGroups();
            }
            dimParmVisibleGrid = InventDimParm::andParms(dimParmVisibleGrid,tmpDimParm);
        }

        dimParmVisibleGrid.(InventDim::dim2dimParm(mainSortFieldId)) = true;

        return dimParmVisibleGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDisplayOrderDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates temporary table with dimensions values and its display order.
    /// </summary>
    /// <param name="_tmpTable">
    /// The instance of temporary table to be populated.
    /// </param>
    /// <param name="_callerFieldId">
    /// The field id of the calling control.
    /// </param>
    /// <param name="_groupTableId">
    /// The table id showing which grouping should be used in the query.
    /// Possible options:
    /// - InventDim - the list of distinct dimension values;
    /// - InventDimCombination - the list of all possible combinations for the product;
    /// - InventSum - the list of all combinations with the quantities on hand.
    /// </param>
    /// <remarks>
    /// The method selects all variant combinations of the item specified.
    /// </remarks>
    public void initDisplayOrderDataSource(RetailTmpDimensionValueDisplayOrder _tmpTable,
                                           FieldId _callerFieldId,
                                           TableId _groupTableId)
    {
        FieldId                     productMasterGroupField;

        RetailDimensionGroupTrans   groupTransMap;
        RetailSizeGroupTrans        sizeGroupTrans;
        RetailStyleGroupTrans       styleGroupTrans;
        RetailColorGroupTrans       colorGroupTrans;

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            ItemId itemId = this.callerItemId();

            if (itemId)
            {
                switch (_callerFieldId)
                {
                    case fieldNum(inventDim, InventSizeId):
                        productMasterGroupField = fieldNum(EcoResProductMaster, RetailSizeGroupId);
                        groupTransMap = sizeGroupTrans;
                        break;
                    case fieldNum(inventDim, InventStyleId):
                        productMasterGroupField = fieldNum(EcoResProductMaster, RetailStyleGroupId);
                        groupTransMap = styleGroupTrans;
                        break;
                    case fieldNum(inventDim, InventColorId):
                        productMasterGroupField = fieldNum(EcoResProductMaster, RetailColorGroupId);
                        groupTransMap = colorGroupTrans;
                        break;
                    default:
                        return;
                }

                Query q = new Query();
                QueryBuildDataSource qbds = q.addDataSource(tableNum(InventDim));
                qbds.addGroupByField(_callerFieldId);
                qbds = qbds.addDataSource(tableNum(inventDimCombination));
                qbds.addRange(fieldNum(inventDimCombination, ItemId)).value(queryValue(itemId));
                qbds.relations(true);
                qbds = qbds.addDataSource(tableNum(inventTable));
                qbds.relations(true);
                qbds = qbds.addDataSource(tableNum(EcoResProductMaster));
                qbds.relations(true);
                qbds.addGroupByField(productMasterGroupField);

                QueryRun qr = new QueryRun(q);

                while (qr.next())
                {
                    InventDim inventDim = qr.get(tablenum(InventDim));
                    EcoResProductMaster productMaster = qr.get(tablenum(EcoResProductMaster));

                    _tmpTable.EcoResSize = inventDim.InventSizeId;
                    _tmpTable.EcoResColor = inventDim.InventColorId;
                    _tmpTable.EcoResStyle = inventDim.InventStyleId;
                    _tmpTable.EcoResVersion = inventDim.InventVersionId;
                    
                    switch (_callerFieldId)
                    {
                        case fieldNum(inventDim, InventSizeId):
                            _tmpTable.DisplayOrder  = EcoResProductMasterSize::find(InventTable::find(itemId).Product, EcoResSize::findByName(inventDim.InventSizeId).recid).RetailDisplayOrder;
                            break;
                        case fieldNum(inventDim, InventStyleId):
                            _tmpTable.DisplayOrder  = EcoResProductMasterStyle::find(InventTable::find(itemId).Product, EcoResStyle::findByName(inventDim.InventStyleId).recid).RetailDisplayOrder;
                            break;
                        case fieldNum(inventDim, InventColorId):
                            _tmpTable.DisplayOrder  = EcoResProductMasterColor::find(InventTable::find(itemId).Product, EcoResColor::findByName(inventDim.InventColorId).recid).RetailDisplayOrder;
                            break;
                        case fieldNum(inventDim, InventVersionId):
                            _tmpTable.DisplayOrder  = EcoResProductMasterVersion::find(InventTable::find(itemId).Product, EcoResVersion::findByName(inventDim.InventVersionId).recid).RetailDisplayOrder;
                            break;
                    }

                    _tmpTable.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimCombinationQueryDataSource</Name>
				<Source><![CDATA[
    public void initInventDimCombinationQueryDataSource(FormDataSource _inventDimCombinationDS)
    {
        QueryBuildDataSource qbds = _inventDimCombinationDS.query().dataSourceName(_inventDimCombinationDS.name());
        qbds.clearDynalinks();
        qbds.sortClear();

        FieldId fieldId = this.callerItemFieldId();

        if (fieldId)
        {
            qbds.addDynalink(
                fieldNum(InventDimCombination,ItemId),
                this.callerItemIdFormDatasource().cursor(),
                fieldId);
        }
        else
        {
            qbds.addRange(fieldNum(InventDimCombination,ItemId)).value(this.callerItemId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimGroupSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an <c>InventDimGroupSetup</c> class object.
    /// </summary>
    /// <returns>
    /// A <c>InventDimGroupSetup</c> class object.
    /// </returns>
    protected InventDimGroupSetup initInventDimGroupSetup()
    {
        return InventDimGroupSetup::newItemId(this.callerItemId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimQueryDatasource</Name>
				<Source><![CDATA[
    public void initInventDimQueryDatasource(FormDataSource _ds)
    {
        QueryBuildDataSource    qbds = _ds.query().dataSourceNo(1);

        qbds.addRange(mainSortFieldId).value('! ""');
        qbds.orderMode(OrderMode::GroupBy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventSumQueryDatasource</Name>
				<Source><![CDATA[
    public void initInventSumQueryDatasource(
        FormDataSource  _ds,
        boolean         _linkItemId = true)   // Should the datasource be linked to the callers itemId / configId
    {
        QueryBuildDataSource qbds = _ds.query().dataSourceNo(2);

        // Range
        QueryBuildRange criteriaClosedQty = qbds.addRange(fieldNum(InventSum,ClosedQty));

        // Group by
        qbds.orderMode(OrderMode::GroupBy);
        qbds.addSortField(fieldNum(InventSum,ItemId));
        InventSum::queryAddSumFields(qbds,false);

        // Dynalink
        qbds.clearDynalinks();

        if (this.hasCallerItemId() && _linkItemId)
        {
            FieldId fieldId = this.callerItemFieldId();
            if (fieldId)
            {
                qbds.addDynalink(
                    fieldNum(InventSum,ItemId),
                    this.callerItemIdFormDatasource().cursor(),
                    fieldId);
            }
            else
            {
                qbds.addRange(fieldNum(InventSum,ItemId)).value(queryValue(this.callerItemId()));
            }
        }

        criteriaClosedQty.value(enum2Value(NoYes::No));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSkipOnHand</Name>
				<Source><![CDATA[
    public boolean mustSkipOnHand()
    {
        if (this.hasCallerInventDimParm())
        {
            Object callerInventDimCtrl = callingElement.args().caller().inventDimSetupObject();
            if (callerInventDimCtrl)
            {
                return callerInventDimCtrl.parmSkipOnhandLookup();
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMainSortFieldId</Name>
				<Source><![CDATA[
    public FieldId parmMainSortFieldId(FieldId _mainSortFieldId = mainSortFieldId)
    {
        mainSortFieldId = _mainSortFieldId;

        return mainSortFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimCtrl_Frm_Lookup construct()
    {
        return new InventDimCtrl_Frm_Lookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormSortField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of this class that will be used in forms.
    /// </summary>
    /// <param name="_formRun">
    ///    The form where controls are maintained.
    /// </param>
    /// <param name="_sortFieldId">
    ///    The field ID of the inventory dimensions field that will be used as sorting field.
    /// </param>
    /// <returns>
    ///    An instance of this class that will be used in a form.
    /// </returns>
    public static InventDimCtrl_Frm_Lookup newFromFormSortField(
        FormRun _formRun,
        FieldId _sortFieldId)
    {
        InventDimCtrl_Frm_Lookup    inventDimCtrl;
        InventDimAxFormAdapter      adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        switch (_formRun.args().caller().name())
        {
            case formStr(PriceDiscAdm):
                inventDimCtrl = InventDimCtrl_Frm_Lookup_PriceDisc::construct();
                break;

            default : inventDimCtrl = InventDimCtrl_Frm_Lookup::construct();
        }

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.parmMainSortFieldId(_sortFieldId);
        inventDimCtrl.init();
        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>