<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalToGeneralLedgerTransferValidateVoucherBalances</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// This class does the validation of voucher in transfer and make sure that the posted amounts on the entries that are transferred from Subledger journal account
/// entry to Genenal ledger matches and there is no discrepancy
/// </summary>
[ExportMetadataAttribute(classStr(SubledgerJournalTransferToGeneralLedgerValidationProvider), classStr(SubledgerJournalToGeneralLedgerTransferValidateVoucherBalances))]
[ExportAttribute('Microsoft.Dynamics.AX.Application.SubledgerJournalTransferToGeneralLedgerValidationProvider')]
internal final class SubledgerJournalToGeneralLedgerTransferValidateVoucherBalances implements SubledgerJournalTransferToGeneralLedgerValidationProvider
{
    internal const str DisableValidateVoucherBalancesDuringSubledgerTransfer = 'DisableValidateVoucherBalancesDuringSubledgerTransfer';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean validate(SubledgerJournalTransferId _transferId)
    {
        using (SysInstrumentationActivityContext activityContext = SourceDocumentAccountingFrameworkInstrumentationLogger::getActivityContext(
            SourceDocumentInstrumentationConstants::InstrumentationNamespaceForBatchTransfer,
            classStr(SubledgerJournalToGeneralLedgerTransferValidateVoucherBalances),
            SourceDocumentInstrumentationConstants::SubledgerToGeneralLedgerTransferValidationProcess))
        {
            SubledgerJournalEntry subledgerJournalEntry;
            SubledgerJournalAccountEntry subledgerJournalAccountEntry;
            GeneralJournalEntry generalJournalEntry;
            GeneralJournalAccountEntry generalJournalAccountEntry;
        
            while select RecId, TransferId from generalJournalEntry
                where generalJournalEntry.TransferId == _transferId
            join sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount), sum(TransactionCurrencyAmount), TransactionCurrencyCode,
                PostingType, LedgerDimension, IsCorrection from generalJournalAccountEntry
            group by TransactionCurrencyCode, PostingType, LedgerDimension, IsCorrection
                where generalJournalAccountEntry.generalJournalEntry == generalJournalEntry.RecId
            {
                select TransferId, RecId from  subledgerJournalEntry
                    where subledgerJournalEntry.TransferId == _transferId
                join sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount), sum(TransactionCurrencyAmount), TransactionCurrency,
                    PostingType, LedgerDimension, IsCorrection from subledgerJournalAccountEntry
                group by TransactionCurrency, PostingType, LedgerDimension, IsCorrection
                    where subledgerJournalAccountEntry.PostingType == generalJournalAccountEntry.PostingType &&
                        subledgerJournalAccountEntry.LedgerDimension == generalJournalAccountEntry.LedgerDimension &&
                        subledgerJournalAccountEntry.TransactionCurrency == generalJournalAccountEntry.TransactionCurrencyCode &&
                        subledgerJournalAccountEntry.IsCorrection == generalJournalAccountEntry.IsCorrection &&
                        subledgerJournalAccountEntry.IsTransferredInDetail != TransferPolicy::DoNotTransfer &&
                    subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId;                        

                if (subledgerJournalAccountEntry.AccountingCurrencyAmount != generalJournalAccountEntry.AccountingCurrencyAmount ||
                    subledgerJournalAccountEntry.TransactionCurrencyAmount != generalJournalAccountEntry.TransactionCurrencyAmount ||
                    subledgerJournalAccountEntry.ReportingCurrencyAmount != generalJournalAccountEntry.ReportingCurrencyAmount)
                {
                    activityContext.addCustomProperty(
                        SourceDocumentInstrumentationConstants::TransferId,
                        any2Str(_transferId));

                    activityContext.addCustomProperty(
                        classStr(SubledgerJournalToGeneralLedgerTransferValidateVoucherBalances),
                        any2Str('Failed'));
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>