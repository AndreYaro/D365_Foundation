<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkPutLineSourceInventoryPicking</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkPutLineSourceInventoryPicking</c> class is responsible for 
/// picking the source inventory of a work put line.
/// </summary>
internal class WHSWorkPutLineSourceInventoryPicking
{
    protected WHSWorkTable work;
    protected LineNum putWorkLineNum;

    private boolean updateLinePickedQtyRequired;   

    protected WhsInventTransPickIdAllocator pickIdAllocator;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeFromParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void initializeFromParameters(WHSWorkTable _work, LineNum _putWorkLineNum)
    {
        work = _work;
        putWorkLineNum = _putWorkLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withPickIdAllocator</Name>
				<Source><![CDATA[
    internal WHSWorkPutLineSourceInventoryPicking withPickIdAllocator(WhsInventTransPickIdAllocator _pickIdAllocator)
    {
        this.pickIdAllocator = _pickIdAllocator;

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Picks the inventory of the instance work line.
    /// </summary>
    [Hookable(false)]
    internal void pickInventory()
    {
        if (WHSInventoryTransactionConfigurationProvider::shouldUseWorkInventoryTransactionQuery(work.WorkId))
        {
            this.pickInventoryBasedOnWorkInventoryUpdateQuery();
        }
        else if (WHSWorkPutLineSourceInventoryPickingHardCodedQueryToggle::instance().isEnabled())
        {
            this.pickInventoryBasedOnHardcodedQuery();
        }
        else
        {
            this.pickInventoryBasedOnSysDaQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickInventoryBasedOnWorkInventoryUpdateQuery</Name>
				<Source><![CDATA[
    private void pickInventoryBasedOnWorkInventoryUpdateQuery()
    {
        InventDimParm inventDimParmAboveLocation;
        ItemId        prevItemId;

        ttsbegin;

        WHSWorkInventoryTransactionDescriptor inventoryTransactionDescriptor = WHSWorkInventoryTransactionQuery::newFromWorkId(work.WorkId).registeredReceiptByWorkLine(
            putWorkLineNum,
            WHSWorkInventoryTransactionQueryParameters::construct().setIncludeWorkInventTransRecId(true));

        WHSWorkInventoryTransactionDescriptorEnumerator enumerator = inventoryTransactionDescriptor.getEnumerator();

        while (enumerator.moveNext())
        {
            WHSWorkInventoryTransactionDescriptorElement inventoryTransactionDescriptorElement = enumerator.current();

            if (prevItemId != inventoryTransactionDescriptorElement.parmItemId())
            {
                inventDimParmAboveLocation = WHSReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(
                    InventTable::find(inventoryTransactionDescriptorElement.parmItemId()));
            }

            this.pickInventoryQuantities(WHSWorkPutLineSourceInventoryPickingParameters::constructFromInventoryTransactionDescriptor(
                inventoryTransactionDescriptorElement,
                inventDimParmAboveLocation));

            prevItemId = inventoryTransactionDescriptorElement.parmItemId();
        }

        if (updateLinePickedQtyRequired && this.canUpdateLoadLinePickedQty())
        {
            // Method updateLoadLinePickedQty should be called only once to avoid multiplication of
            // picked quantities on load line!
            this.updateLoadLinePickedQty();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickWorkInventTrans</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void pickWorkInventTrans(WHSWorkInventTrans _workInventTrans, InventTrans _inventTrans, InventDimParm _inventDimParmAboveLocation)
    {        
        this.pickInventoryQuantities(WHSWorkPutLineSourceInventoryPickingParameters::constructFromParameters(
                _workInventTrans,
                _inventTrans,
                _inventDimParmAboveLocation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickInventoryBasedOnSysDaQuery</Name>
				<Source><![CDATA[
    private void pickInventoryBasedOnSysDaQuery()
    {
        ttsbegin;

        WHSWorkInventTrans  workInventTrans;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventDimParm       inventDimParmAboveLocation;
        ItemId              prevItemId;

        SysDaSearchObject searchObject = new SysDaSearchObject(
            WHSWorkPutLineSourceInventoryPicking::buildPickInventoryQuery(
                work.WorkId,
                putWorkLineNum,
                workInventTrans,
                inventTrans,
                inventTransOrigin));

        SysDaSearchStatement statement = new SysDaSearchStatement();
        
        while (statement.next(searchObject))
        {           
            if (prevItemId != workInventTrans.ItemId)
            {
                inventDimParmAboveLocation = WHSReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(InventTable::find(workInventTrans.ItemId));
            }

            this.pickWorkInventTrans(workInventTrans, inventTrans, inventDimParmAboveLocation);           

            prevItemId = workInventTrans.ItemId;
        }

        if (updateLinePickedQtyRequired && this.canUpdateLoadLinePickedQty())
        {
            // Method updateLoadLinePickedQty should be called only once to avoid multiplication of
            // picked quantities on load line!
            this.updateLoadLinePickedQty();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickInventoryBasedOnHardcodedQuery</Name>
				<Source><![CDATA[
    private void pickInventoryBasedOnHardcodedQuery()
    {
        if (WHSInventoryTransactionConfigurationProvider::shouldUseWarehouseInventoryTransactionStack(work.WorkId))
        {
            // when we use new warehouse inventory transactions, the InventTrans records are not generated 
            // and this method will not return correct results.
            WHSInventoryTransactionErrorProvider::throwNotSupportedWarehouseTransactionScenario();
        }

        ttsbegin;

        WHSWorkInventTrans workInventTrans;
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;
        InventDimParm inventDimParmAboveLocation;
        ItemId prevItemId;

        while select InventTransIdParent, ItemId from workInventTrans
            order by ItemId
            where workInventTrans.WorkId == work.WorkId
                && workInventTrans.LineNum == putWorkLineNum
            join RecId from inventTransOrigin
                where inventTransOrigin.InventTransId == workInventTrans.InventTransIdTo
            join InventDimId, Qty, PdsCWQty from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    && inventTrans.StatusReceipt == StatusReceipt::Purchased
                    && inventTrans.StatusIssue == StatusIssue::None
        {
            if (prevItemId != workInventTrans.ItemId)
            {
                inventDimParmAboveLocation = WHSReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(InventTable::find(workInventTrans.ItemId));
            }

            this.pickInventoryQuantities(WHSWorkPutLineSourceInventoryPickingParameters::constructFromParameters(
                workInventTrans,
                inventTrans,
                inventDimParmAboveLocation));

            prevItemId = workInventTrans.ItemId;
        }

        if (updateLinePickedQtyRequired && this.canUpdateLoadLinePickedQty())
        {
            // Method updateLoadLinePickedQty should be called only once to avoid multiplication of
            // picked quantities on load line!
            this.updateLoadLinePickedQty();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPickInventoryQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static SysDaQueryObject buildPickInventoryQuery(
        WHSWorkId           _workId,
        LineNum             _putWorkLineNum,
        WHSWorkInventTrans  _workInventTrans,
        InventTrans         _inventTrans,
        InventTransOrigin   _inventTransOrigin)
    {
        if (WHSInventoryTransactionConfigurationProvider::shouldUseWarehouseInventoryTransactionStack(_workId))
        {
            // when we use new warehouse inventory transactions, the InventTrans records are not generated 
            // and this method will not return correct results.
            WHSInventoryTransactionErrorProvider::throwNotSupportedWarehouseTransactionScenario();
        }

        SysDaQueryObject workInventTransLineQueryObject = new SysDaQueryObject(_workInventTrans);
        workInventTransLineQueryObject.projection().add(fieldStr(WHSWorkInventTrans, ItemId));
        workInventTransLineQueryObject.projection().add(fieldStr(WHSWorkInventTrans, InventTransIdParent));
        workInventTransLineQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_workInventTrans, fieldStr(WHSWorkInventTrans, WorkId)),
                new SysDaValueExpression(_workId)).and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_workInventTrans, fieldStr(WHSWorkInventTrans, LineNum)),
                new SysDaValueExpression(_putWorkLineNum))));

        SysDaQueryObject inventTransOriginQueryObject = new SysDaQueryObject(_inventTransOrigin);
        inventTransOriginQueryObject.projection().add(fieldStr(InventTransOrigin, RecId));
        inventTransOriginQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventTransOrigin, fieldStr(InventTransOrigin, InventTransId)),
                new SysDaFieldExpression(_workInventTrans, fieldStr(WHSWorkInventTrans, InventTransIdTo))));

        workInventTransLineQueryObject.joinClause(SysDaJoinKind::InnerJoin, inventTransOriginQueryObject);

        SysDaQueryObject inventTransQueryObject = new SysDaQueryObject(_inventTrans);
        inventTransQueryObject.projection().add(fieldStr(InventTrans, InventDimId));
        inventTransQueryObject.projection().add(fieldStr(InventTrans, Qty));
        inventTransQueryObject.projection().add(fieldStr(InventTrans, PdsCWQty));
        inventTransQueryObject.whereClause(
                 new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, InventTransOrigin)),
                    new SysDaFieldExpression(_inventTransOrigin, fieldStr(InventTransOrigin, RecId)))
            .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, StatusReceipt)),
                    new SysDaValueExpression(StatusReceipt::Purchased)))
            .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventTrans, fieldStr(InventTrans, StatusIssue)),
                    new SysDaValueExpression(StatusIssue::None)))
            );

        inventTransOriginQueryObject.joinClause(SysDaJoinKind::InnerJoin, inventTransQueryObject);

        return workInventTransLineQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickInventoryQuantities</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void pickInventoryQuantities(WHSWorkPutLineSourceInventoryPickingParameters _parameters)
    {
        Common commonInventTransOrigin = WHSInvent::getCommonFromWorkTransType(work.WorkTransType, _parameters.inventTransIdParent, true);
        if (commonInventTransOrigin)
        {
            if (this.canUpdateInventoryTransactions())
            {
                using (var context = WhsInventPickingContext::newFromPickIdAllocator(pickIdAllocator))
                {
                    WHSInvent::pickQuantities(commonInventTransOrigin,
                                                          _parameters.inventDimId,
                                                          _parameters.qty,
                                                          _parameters.pdsCWQty,
                                                          _parameters.inventDimParmAboveLocation,
                                                          UnknownNoYes::Unknown,
                                                          true);
                }
            }

            updateLinePickedQtyRequired = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateInventoryTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if inventory transactions can be updated.
    /// </summary>
    /// <returns>true if inventory transactions can be updated; otherwise, false.</returns>
    protected boolean canUpdateInventoryTransactions()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateLoadLinePickedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if load line picked quantities can be updated.
    /// </summary>
    /// <returns>true if load line picked quantities can be updated; otherwise, false.</returns>
    protected boolean canUpdateLoadLinePickedQty()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadLinePickedQty</Name>
				<Source><![CDATA[
    private void updateLoadLinePickedQty()
    {
        const boolean QueryOnlyClosedWorkLines = true;

        WHSWorkLineLoadLineDetailsEnumerator enumerator = work.getEnumerator(QueryOnlyClosedWorkLines);
        while (enumerator.moveNext())
        {
            WHSLoadLine loadLine = enumerator.currentLoadLine();
            if (loadLine)
            {
                loadLine.PickedQty += enumerator.currentInventQtyWork();
                if (PdsGlobal::pdsIsCWItem(loadLine.ItemId))
                {
                    // If there is no captured weight, convert the item's work quantity to picked weight.
                    loadLine.PickedWeight += enumerator.currentCapturedWeight() ? enumerator.currentCapturedWeight() : PdsCatchWeight::inventQty(loadLine.ItemId, enumerator.currentInventQtyWork());
                }
                loadLine.update();
            }
        }
  
        this.updatePickedQtyForDockInventoryManagement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePickedQtyForDockInventoryManagement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update picked qty on load lines for work that went through dock inventory management.
    /// </summary>
    private void updatePickedQtyForDockInventoryManagement()
    {
        if (work.canUpdateWorkForDockInventoryManagement())
        {
            WHSWorkInventTrans  workInventTrans;
            InventHandlingQty	runningQty;

            WHSWorkLine lastClosedPutLine = WHSWorkTable::getLastClosedPutWorkLine(work.WorkId);

            while select Qty, InventTransIdParent from workInventTrans
                where workInventTrans.WorkId == work.WorkId
                    && workInventTrans.LineNum == lastClosedPutLine.LineNum
            {
                runningQty = workInventTrans.Qty;

                WHSLoadLine loadLine;
                while select forUpdate loadLine
                    where loadLine.InventTransId == workInventTrans.InventTransIdParent
                {
                    WHSWorkTable workTable;
                    WHSWorkLine workLine;
                    select sum(InventQtyWork) from workLine
                        where workLine.LoadLineRefRecId == loadLine.RecId
                            && workLine.WorkStatus != WHSWorkStatus::Cancelled
                            exists join workTable
                                where workTable.WorkId == workLine.WorkId
                                    && (workTable.WorkStatus == WHSWorkStatus::Open
                                        || workTable.WorkStatus == WHSWorkStatus::InProcess
                                        || workTable.WorkStatus == WHSWorkStatus::Closed);

                    if (workLine.InventQtyWork != loadLine.WorkCreatedQty)
                    {
                        InventHandlingQty pickedQty = loadLine.WorkCreatedQty - workLine.InventQtyWork;

                        if (pickedQty > runningQty)
                        {
                            pickedQty = runningQty;
                        }

                        loadLine.PickedQty += pickedQty;
                        loadLine.update();

                        runningQty -= pickedQty;

                        if (runningQty == 0)
                        {
                            break;
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>