<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostItemPackingSlip_AdjNeg</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostItemPackingSlip_AdjNeg extends ProjPostItemPackingSlip
{
    TmpProjAdjustmentCreate tmpProjAdjustmentCreate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>budgetUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the base class method if the quantity is less than zero and the original transaction ID is
    ///    set.
    /// </summary>
    public void budgetUpdate()
    {
        if (projItemTrans.TransactionOrigin==ProjOrigin::ItemJournal
        || projItemTrans.TransactionOrigin==ProjOrigin::PurchaseOrder
        || projItemTrans.TransactionOrigin==ProjOrigin::VendorInvoice
        || projItemTrans.TransactionOrigin==ProjOrigin::ItemRequirement)
        {
            if (this.parmTransIdOrig())
            {
                if (projTrans.qty() != 0)
                {
                    super();
                }
            }
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>costValueCUR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cost amount for the transaction.
    /// </summary>
    /// <returns>
    /// The cost amount for the transaction.
    /// </returns>
    protected AmountCur costValueCUR()
    {
        return -projTrans.transCostBalance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastUpdate</Name>
				<Source><![CDATA[
        public void forecastUpdate()
    {
        if (projItemTrans.TransactionOrigin==ProjOrigin::ItemJournal
        || projItemTrans.TransactionOrigin==ProjOrigin::PurchaseOrder
        || projItemTrans.TransactionOrigin==ProjOrigin::VendorInvoice
        || projItemTrans.TransactionOrigin==ProjOrigin::ItemRequirement)
        {
            if (this.parmTransIdOrig()) //it is an creating negative trans
            {
                if (projTrans.qty() < 0)
                {
                    super();
                }
            }
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRefTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reference transaction ID that is associated with the project transaction.
    /// </summary>
    /// <returns>
    /// The reference transaction ID.
    /// </returns>
    protected ProjTransIdBase getRefTransId()
    {
        ProjTransIdBase projTransIdBase;

        if ((projTrans.transType() == ProjTransType::Revenue && projTrans.salesPrice() < 0)
            || (projTrans.transType() != ProjTransType::Revenue && projTrans.qty() < 0) || this.parmTransIdOrig())
        {
            projTransIdBase  = this.parmTransIdOrig();
        }

        return projTransIdBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemTrans</Name>
				<Source><![CDATA[
        public ProjItemTrans initItemTrans()
    {
        return ProjItemTrans::initTransFromAdjustment(tmpProjAdjustmentCreate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ProjPostItemPackingSlip_AdjNeg</c> class.
    /// </summary>
    /// <param name="_buffer">
    /// The table for the transaction type.
    /// </param>
    public void new(Common _buffer)
    {
        // We don't need to call super();
        if (_buffer.TableId == tableNum(TmpProjAdjustmentCreate))
        {
            tmpProjAdjustmentCreate = _buffer;
            projTrans               = ProjTrans::newTmpProjAdjustmentCreate(tmpProjAdjustmentCreate);
        }

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transStatus</Name>
				<Source><![CDATA[
        public ProjTransStatus transStatus()
    {
        return ProjTransStatus::Adjusted;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>