<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalPostBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalPostBatch</c> class implements <c>LedgerPostBatch</c> for ledger (GL, AP, AR)
///    journals.
/// </summary>
class LedgerJournalPostBatch extends LedgerPostBatch implements BatchRetryable
{
    private boolean isTopPickingPost;
    private guid topPickingProcessId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateNumberOfJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the number of journal lines to be posted by the specified journal.
    /// </summary>
    /// <param name="_journalId">
    ///    The ID of the journal to be posted.
    /// </param>
    /// <returns>
    ///    The number of journal lines to be posted.
    /// </returns>
    /// <remarks>
    ///    This helps quantify the amount of work to be done by the journal posting.
    /// </remarks>
    protected int calculateNumberOfJournalLines(str _journalId)
    {
        LedgerJournalTable journalTable;
        int numOfLines = 0;

        if (_journalId)
        {
            journalTable.JournalNum = _journalId;
            numOfLines = journalTable.numOfLines();
        }

        return numOfLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearSessionInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the session information from the passed in journal.
    /// </summary>
    /// <param name="_journalRecord">
    ///    The record to clear session information from.
    /// </param>
    protected void clearSessionInfo(Common _journalRecord)
    {
        LedgerJournalId ledgerJournalId;
        LedgerJournalTable journalTable;

        journalTable = _journalRecord;

        ttsbegin;

        ledgerJournalId = journalTable.JournalNum;
        journalTable = LedgerJournalTable::find(ledgerJournalId, true);
        journalTable.SessionId = 0;
        journalTable.SessionLoginDateTime = utcDateTimeNull();
        journalTable.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructChild</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create a new instance of this class for posting journals.
    /// </summary>
    /// <param name="_journalRecord">
    ///    The <c>LedgerJournalTable</c> record with which to initialize the new instance.
    /// </param>
    /// <param name="_transferErrors">
    ///    A Boolean value that determines whether the child transfers errors.
    /// </param>
    /// <param name="_isJournalSplitForbidden">
    ///    A Boolean value that indicates whether journal splits are forbidden; optional. The default value is
    ///    false.
    /// </param>
    /// <returns>
    ///    A new instance of <c>LedgerJournalPostBatch</c> initialized to the supplied parameters.
    /// </returns>
    protected LedgerPostBatch constructChild(Common _journalRecord, boolean _transferErrors, boolean _isJournalSplitForbidden = false)
    {
        LedgerJournalTable ledgerJournalTable;

        ledgerJournalTable = _journalRecord;

        return new LedgerJournalPostBatch(ledgerJournalTable.JournalNum, _transferErrors, _isJournalSplitForbidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the journal for the supplied journal ID.
    /// </summary>
    /// <param name="_journalId">
    ///    The ID of the journal to retrieve.
    /// </param>
    /// <returns>
    ///    A record selected for update.
    /// </returns>
    protected Common getJournal(str _journalId)
    {
        return LedgerJournalTable::find(_journalId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalsToPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the list of journals to post.
    /// </summary>
    /// <param name="_journalRecord">
    ///    The journal record to potentially be split.
    /// </param>
    /// <returns>
    ///    An Array of journals to be posted.
    /// </returns>
    protected Array getJournalsToPost(Common _journalRecord)
    {
        Array journalsToPost;
        int i = 1;
        LedgerJournalTable ledgerJournalTable;
        RecordSortedList sortedList;

        ledgerJournalTable = _journalRecord;

        if (isJournalSplitForbidden == false && ledgerJournalTable.isEligableForDistributionBeforePost())
        {
            // Split the journal; the pre-existing journal is not included in the returned list.
            sortedList = ledgerJournalTable.distributeJournalLines(true); // suppress client messages if inside of a batch process
            journalsToPost = new Array(Types::Record);

            ledgerJournalTable = null; // Remove link between _journalRecord & ledgerJournalTable

            while (sortedList.next(ledgerJournalTable))
            {
                if (this.isTopPickingPost)
                {
                    this.addJournalToTopPickingQueue(ledgerJournalTable);
                }
                else
                {
                    journalsToPost.value(i, ledgerJournalTable);
                    i++;
                }
            }
        }
        else
        {
            // No need to split, so just create a new list
            journalsToPost = new Array(Types::Record);
        }

        journalsToPost.value(i, _journalRecord); // Add the original journal to the list, whether or not it was split.

        return journalsToPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(str _journalId = '', boolean _transferErrors = false, boolean _isJournalSplitForbidden = false, int _numberOfJournalLines = -1)
    {
        super(_journalId, _transferErrors, _isJournalSplitForbidden, _numberOfJournalLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts a journal.
    /// </summary>
    /// <param name="_journalRecord">
    ///    The journal to post.
    /// </param>
    /// <param name="_allowJournalSplit">
    ///    A flag that determines whether the journal should be split by the posting engine.
    /// </param>
    protected void post(Common _journalRecord, boolean _allowJournalSplit)
    {
        LedgerJournalPost::postJournal(_journalRecord, // The journal to post.
                                       transferErrors ? NoYes::Yes : NoYes::No, // Transfer errors if necessary.
                                       _allowJournalSplit
                                       );
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSessionInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the session information about the passed in ledger journal table record if it is required.
    /// </summary>
    /// <param name="_journalRecord">
    ///    The ledger journal record to set session information about.
    /// </param>
    /// <returns>
    ///    true if the session information was set; otherwise, false.
    /// </returns>
    protected boolean setSessionInfo(Common _journalRecord)
    {
        LedgerJournalId ledgerJournalId;
        LedgerJournalTable journalTable;
        xSession xSession;

        journalTable = _journalRecord;

        if (this.isInBatch())
        {
            // Do some extra batch-specific pre-post setup
            if (!journalTable.SessionId ||
                !Global::isSessionActive(journalTable.SessionId,journalTable.SessionLoginDateTime))

            {
                // There's no session associated with this record or the one that was expired, so
                // we're free to do what we want with the record.

                ttsbegin;

                ledgerJournalId = journalTable.JournalNum;
                journalTable = LedgerJournalTable::find(ledgerJournalId, true);

                // Associate our session information with the record
                xSession = new xSession(sessionid());
                journalTable.SessionId = sessionid();
                journalTable.SessionLoginDateTime = xSession.loginDateTime();

                // Unblock the record
                journalTable.SystemBlocked = false;

                journalTable.update();

                ttscommit;

                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a journal for posting. An exception is thrown for an invalid journal.
    /// </summary>
    /// <param name="_journalRecord">
    ///    The journal record to be posted.
    /// </param>
    protected void validatePost(Common _journalRecord)
    {
        LedgerJournalTable journalTable;

        journalTable = _journalRecord;

        if (journalTable.Posted == NoYes::Yes)
        {
            // The journal has already been posted.
            throw error(strfmt("@SYS18421", journalTable.JournalNum));
        }

        if (!journalTable.approved())
        {
            // The journal hasn't been approved.
            throw error(strfmt("@SYS22057", journalTable.JournalNum));
        }

        // check the blocking if the feature is enabled
        if (FeatureStateProvider::isFeatureEnabled(LedgerJournalDeleteBatchEnableFeature::instance()) &&
            journalTable.checkIsBlockedOrInUse())
        {
            throw error(strFmt("@GeneralLedger:GeneralJournalPostPreValidateFail", journalTable.JournalNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a <c>LedgerJournalPostBatch</c> object.
    /// </summary>
    /// <param name="_journalId">
    ///    The ID of the journal to post.
    /// </param>
    /// <param name="_transferErrors">
    ///    A Boolean value that determines whether errors will be transferred to a new journal. If true,
    ///    errors will be transferred.
    /// </param>
    /// <param name="_forbidJournalSplit">
    ///    A Boolean value that determines whether journal splits are forbidden; optional. If true, journal
    ///    splits are forbidden.
    /// </param>
    /// <param name="_numberOfJournalLines">
    ///    The number of lines in the journal; optional.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>LedgerJournalPostBatch</c> class.
    /// </returns>
    public static LedgerJournalPostBatch construct(str _journalId, boolean _transferErrors, boolean _forbidJournalSplit = false, int _numberOfJournalLines = -1)
    {
        return new LedgerJournalPostBatch(_journalId, _transferErrors, _forbidJournalSplit, _numberOfJournalLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create an instance the <c>LedgerJournalPostBatch</c> class initialized with the specified packed
    ///    object.
    /// </summary>
    /// <param name="_packedObject">
    ///    The packed object from which to initialize.
    /// </param>
    /// <returns>
    ///    An instance of <c>LedgerJournalPostBatch</c> initialized with the specified packed object.
    /// </returns>
    /// <remarks>
    ///    Part of the <c>SysPackable</c> interface. This method is needed to support packing and unpacking in
    ///    lists.
    /// </remarks>
    public static LedgerJournalPostBatch create(container _packedObject)
    {
        LedgerJournalPostBatch newLedgerJournalPostBatch = LedgerJournalPostBatch::construct('', false);

        newLedgerJournalPostBatch.unpack(_packedObject);

        return newLedgerJournalPostBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packed = super();
        packed = SysPackExtensions::appendVariableToPack(packed, classStr(LedgerJournalPostBatch), varStr(isTopPickingPost), isTopPickingPost);
        packed = SysPackExtensions::appendVariableToPack(packed, classStr(LedgerJournalPostBatch), varStr(topPickingProcessId), topPickingProcessId);
        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        super(packedClass);
        isTopPickingPost = SysPackExtensions::extractPackedVariable(packedClass, classStr(LedgerJournalPostBatch), varStr(isTopPickingPost));
        topPickingProcessId = SysPackExtensions::extractPackedVariable(packedClass, classStr(LedgerJournalPostBatch), varStr(topPickingProcessId));
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsTopPickingPost</Name>
				<Source><![CDATA[
    internal boolean parmIsTopPickingPost(boolean _isTopPickingPost = isTopPickingPost)
    {
        isTopPickingPost = _isTopPickingPost;
        return isTopPickingPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTopPickingProcessId</Name>
				<Source><![CDATA[
    internal guid parmTopPickingProcessId(guid _topPickingProcessId = topPickingProcessId)
    {
        topPickingProcessId = _topPickingProcessId;
        return topPickingProcessId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (isTopPickingPost)
        {
            while (this.getJournalFromTopPickingQueue(this.topPickingProcessId))
            {
                try
                {
                    super();
                }
                catch (Exception::Error)
                {
                    // Catch any exception so that any one error won't bring down
                    // the entire process of posting the journals.
                    Global::exceptionTextFallThrough();
                }
            }
        }
        else 
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalFromTopPickingQueue</Name>
				<Source><![CDATA[
    private LedgerJournalId getJournalFromTopPickingQueue(guid _processId)
    {
        LedgerJournalPostQueue postQueue;

        using (SysInstrumentationActivityContext activityContext = LedgerJournalPostingInstrumentation::getActivityContext(
            LedgerJournalInstrumentationConstants::SourceNameLedgerJournalPosting, classStr(LedgerJournalPostBatch),
            LedgerJournalInstrumentationConstants::GetJournalFromTopPickingQueue))
        {
            #OCCRetryCount
            int backOffWait;
            Microsoft.Dynamics.Ax.Xpp.DeadlockException deadLockException;
            Microsoft.Dynamics.Ax.Xpp.UpdateConflictException updateConflictException;
            Microsoft.Dynamics.Ax.Xpp.TransientSqlConnectionError transientSqlConnectionError;
            
            try 
            {
                ttsbegin;
        
                select firstonly pessimisticlock JournalNum, TransferErrors, NumberOfLines, isJournalSplitForbidden
                    from postQueue
                where postQueue.ProcessId == _processId;

                if (postQueue.RecId)
                {
                    this.journalId = postQueue.JournalNum;
                    this.transferErrors = postQueue.TransferErrors;
                    this.numberOfJournalLines = any2Int(postQueue.NumberOfLines);
                    this.isJournalSplitForbidden = postQueue.isJournalSplitForbidden;

                    postQueue.delete();
                }
                else
                {
                    // no journal found from top picking queue
                    this.journalId = '';
                    this.transferErrors = false;
                    this.numberOfJournalLines = -1;
                    this.isJournalSplitForbidden = false;
                }

                ttscommit;
            }
            catch (deadLockException)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() < #RetryNum)
                    {
                        backOffWait = RandomGenerate::construct().randomInt(100, 5000);
                        sleep(xSession::currentRetryCount() * backOffWait);
                        retry;
                    }
                    else
                    {
                        throw deadLockException;
                    }
                }
                else
                {
                    throw deadLockException;
                }
            }
            catch (updateConflictException)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() < #RetryNum)
                    {
                        backOffWait = RandomGenerate::construct().randomInt(100, 5000);
                        sleep(xSession::currentRetryCount() * backOffWait);
                        retry;
                    }
                    else
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                }
                else
                {
                    throw updateConflictException;
                }
            }
            catch (transientSqlConnectionError)
            {
                if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw transientSqlConnectionError;
                }
            }

            return this.journalId;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>addJournalToTopPickingQueue</Name>
				<Source><![CDATA[
    private void addJournalToTopPickingQueue(LedgerJournalTable _ledgerJournalTable)
    {
        using (SysInstrumentationActivityContext activityContext = LedgerJournalPostingInstrumentation::getActivityContext(
            LedgerJournalInstrumentationConstants::SourceNameLedgerJournalPosting, classStr(LedgerJournalPostBatch),
            LedgerJournalInstrumentationConstants::AddJournalToTopPickingQueue))
        {
            LedgerJournalPostQueue postQueue;
            LedgerJournalPostQueue::skip(postQueue);

            postQueue.JournalNum = _ledgerJournalTable.JournalNum;
            postQueue.TransferErrors = this.transferErrors;
            postQueue.NumberOfLines = _ledgerJournalTable.numOfLines();
            postQueue.ProcessId = this.topPickingProcessId;
            postQueue.isJournalSplitForbidden = true;

            postQueue.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>