<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlanActivityCreateTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PlanActivityCreateTransfer</c> class is a factory class for plan activities of the transfer
///    type.
/// </summary>
public class PlanActivityCreateTransfer extends PlanActivityCreate
{
    InventLocationId    transferFromWarehouse;
    WMSLocationId       transferFromWMSLocation;
    InventLocationId    transferToWarehouse;
    WMSLocationId       transferToWMSLocation;
    OnHandUpdate        onHandUpdatePick;

    #LOCALMACRO.CurrentList
        pickupSemiFinished,
        receiveSemiFinished,
        onHandUpdate,
        onHandUpdatePick,
        transferFromWarehouse,
        transferFromWMSLocation,
        transferToWarehouse,
        transferToWMSLocation
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates all the necessary objects that are related to the <c>PlanActivity</c> record that is being
    ///    created.
    /// </summary>
    /// <returns>
    ///    The newly created high-level <c>PlanActivity</c> record.
    /// </returns>
    public PlanActivity createActivity()
    {
        PlanActivity                highLevelPlanActivity;
        PlanActivity                pickPlanActivity;
        PlanActivity                receivePlanActivity;
        PlanActivity                movePlanActivity;
        PlanActivityLocation        planActivityLocation;
        PlanActivityRelationship    planActivityRelationship;

        ttsbegin;

        highLevelPlanActivity = super();

        // Create pick activity
        pickPlanActivity = this.createAtomicActivity(PlanActivityType::Pick,NoYes::No,onHandUpdatePick && !pickupSemiFinished);

        // Create an activity location for the pick
        planActivityLocation.PlanActivity             = pickPlanActivity.RecId;
        planActivityLocation.InventLocationId         = this.parmTransferFromWarehouse();
        planActivityLocation.InventLocationDataAreaId = planActivityLocation.InventLocationId ? appl.company().dataArea(tablenum(InventLocation)) : '';
        planActivityLocation.wmsLocationId            = this.parmTransferFromWMSLocation();
        planActivityLocation.wmsLocationDataAreaId    = planActivityLocation.wmsLocationId ? appl.company().dataArea(tablenum(WMSLocation)) : '';
        this.validateAndInsert(planActivityLocation);

        // Create move activity
        movePlanActivity = this.createAtomicActivity(PlanActivityType::Move,NoYes::No);

        // Create receive activity
        receivePlanActivity = this.createAtomicActivity(PlanActivityType::Receive,NoYes::No,onHandUpdate && !receiveSemiFinished);

       // Create an activity location for the receive
        planActivityLocation.PlanActivity             = receivePlanActivity.RecId;
        planActivityLocation.InventLocationId         = this.parmTransferToWarehouse();
        planActivityLocation.InventLocationDataAreaId = planActivityLocation.InventLocationId ? appl.company().dataArea(tablenum(InventLocation)) : '';
        planActivityLocation.wmsLocationId            = this.parmTransferToWMSLocation();
        planActivityLocation.wmsLocationDataAreaId    = planActivityLocation.wmsLocationId ? appl.company().dataArea(tablenum(WMSLocation)) : '';
        this.validateAndInsert(planActivityLocation);

        // Sequence the atomic activities
        planActivityRelationship.IndependentPlanActivity = pickPlanActivity.RecId;
        planActivityRelationship.DependentPlanActivity   = movePlanActivity.RecId;
        planActivityRelationship.Constraint              = sequencePlanConstraint.RecId;
        this.validateAndInsert(planActivityRelationship);

        planActivityRelationship.IndependentPlanActivity = movePlanActivity.RecId;
        planActivityRelationship.DependentPlanActivity   = receivePlanActivity.RecId;
        planActivityRelationship.Constraint              = sequencePlanConstraint.RecId;
        this.validateAndInsert(planActivityRelationship);

        // Set up aggregation for the activities
        planActivityRelationship.IndependentPlanActivity = highLevelPlanActivity.RecId;
        planActivityRelationship.DependentPlanActivity   = pickPlanActivity.RecId;
        planActivityRelationship.Constraint              = aggregationPlanConstraint.RecId;
        this.validateAndInsert(planActivityRelationship);

        planActivityRelationship.IndependentPlanActivity = highLevelPlanActivity.RecId;
        planActivityRelationship.DependentPlanActivity   = movePlanActivity.RecId;
        planActivityRelationship.Constraint              = aggregationPlanConstraint.RecId;
        this.validateAndInsert(planActivityRelationship);

        planActivityRelationship.IndependentPlanActivity = highLevelPlanActivity.RecId;
        planActivityRelationship.DependentPlanActivity   = receivePlanActivity.RecId;
        planActivityRelationship.Constraint              = aggregationPlanConstraint.RecId;
        this.validateAndInsert(planActivityRelationship);

        ttscommit;

        return highLevelPlanActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromContainer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the current instance of the class with the parameters that are in the container.
    /// </summary>
    /// <param name="_parameters">
    ///    The container that holds the parameters.
    /// </param>
    /// <remarks>
    ///    This method is a virtual method; only the common parameters are initialized.
    /// </remarks>
    protected void initFromContainer(container _parameters)
    {
        container   parentParams, childParams;

        // unpack parent parameters
        [parentParams, childParams] = _parameters;

        // initialize parent
        super(parentParams);

        // unpack current object parameters
        [#CurrentList] = childParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnhandUpdatePick</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public OnHandUpdate parmOnhandUpdatePick(OnHandUpdate _onHandUpdatePick = onHandUpdatePick)
    {
        onHandUpdatePick = _onHandUpdatePick;

        return onHandUpdatePick;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferFromWarehouse</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public InventLocationId parmTransferFromWarehouse(InventLocationId _transferFromWarehouse = transferFromWarehouse)
    {
        transferFromWarehouse = _transferFromWarehouse;

        return transferFromWarehouse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferFromWMSLocation</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public WMSLocationId parmTransferFromWMSLocation(WMSLocationId _transferFromWMSLocation = transferFromWMSLocation)
    {
        transferFromWMSLocation = _transferFromWMSLocation;

        return transferFromWMSLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferToWarehouse</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public InventLocationId parmTransferToWarehouse(InventLocationId _transferToWarehouse = transferToWarehouse)
    {
        transferToWarehouse = _transferToWarehouse;

        return transferToWarehouse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferToWMSLocation</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public WMSLocationId parmTransferToWMSLocation(WMSLocationId _transferToWMSLocation = transferToWMSLocation)
    {
        transferToWMSLocation = _transferToWMSLocation;

        return transferToWMSLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static PlanActivityCreateTransfer construct()
    {
        return new PlanActivityCreateTransfer();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>