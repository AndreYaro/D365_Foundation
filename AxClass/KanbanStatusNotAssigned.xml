<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanStatusNotAssigned</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanStatusNotAssigned</c> class performs operations for kanbans that have the
/// <c>LeanKanbanStatus::NotAssigned</c> enumeration value.
/// </summary>
public class KanbanStatusNotAssigned extends KanbanStatus
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a kanban that has the <c>LeanKanbanStatus::Emptied</c> enumeration value can be
    /// deleted.
    /// </summary>
    /// <returns>
    /// true if the kanban can be deleted; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Always returns true.
    /// </remarks>
    public boolean canDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReadyForStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether all preconditions are met and the <c>Kanban</c> is ready for a given target
    ///    status update.
    /// </summary>
    /// <param name="_status">
    ///    The target status.
    /// </param>
    /// <param name="_silent">
    ///    A Boolean value that indicates whether the method can add warnings to the Infolog; optional.
    /// </param>
    /// <returns>
    ///    true if the kanban is ready for the status update; otherwise, false.
    /// </returns>
    public boolean isReadyForStatusUpdate(
        LeanKanbanStatus _status = this.nextStatus(),
        boolean          _silent = false)
    {
        KanbanRule  kanbanRule = kanban.kanbanRule();

        if (kanbanRule.status().isOutdated())
        {
            return _silent ? false : checkFailed(strFmt("@SYS138403",kanban.KanbanId,_status,kanbanRule.RuleId));
        }

        return super(_status,_silent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSynchronizeKanbanJobStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a status update must be synchronized to the kanban jobs.
    /// </summary>
    /// <param name="_reset">
    ///    A Boolean value that indicates whether the status is reset; optional.
    /// </param>
    /// <returns>
    ///    true if the kanban job status must be synchronized; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is called from an instance that represents the new status.
    /// </remarks>
    public boolean mustSynchronizeKanbanJobStatus(boolean _reset = false)
    {
        boolean             result = false;

        if (updateJobs)
        {
            if (_reset)
            {
                LeanKanbanJobStatus leanKanbanJobStatus = this.correspondingKanbanJobStatus(kanban.Status);
                KanbanJob kanbanJob = kanban.firstKanbanJob();
                result = kanbanJob.Status != leanKanbanJobStatus
                                                          || kanbanJob.existLaterJobGreaterStatus(leanKanbanJobStatus);
            }
            else
            {
                //can never happen since 'not planned' is the first status. Cannot change forward to 'not planned'
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static KanbanStatus construct()
    {
        return new KanbanStatusNotAssigned();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
