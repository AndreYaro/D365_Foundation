<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostMarkupJournalizingRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostMarkupJournalizingRule</c> class determines if a cost markup entry should be journalized.
/// </summary>
public class CostMarkupJournalizingRule extends CostJournalizingRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    protected void resolve()
    {
        CostInventoryEvent inventoryEvent = entry.parmEvent().parmParentEvent();

        switch (classIdGet(inventoryEvent))
        {
            case classNum(CostProductReceiptEvent):
                journalize = InventTransOrigin::find(inventoryEvent.parmInventTransOriginId()).inventMovement().mustBeBookedPhysically();
                break;
            case classNum(CostVendorInvoiceEvent):
            case classNum(CostProductReceiptCorrectionEvent):
            case classNum(CostVendorDirectInvoiceEvent):
                CostProductCostDescriptor productCostDescriptor = entry.parmDescriptor();
                CostEvent reconciledEvent = productCostDescriptor.parmReconciledEvent();
                if (reconciledEvent)
                {
                    CostEntry reconciledEntry = reconciledEvent.findEntry(productCostDescriptor.reconciledDescriptor());
                    journalize = (reconciledEntry.parmPostingType() != LedgerPostingType::None);
                }
                else
                {
                    InventMovement movement = InventTransOrigin::find(inventoryEvent.parmInventTransOriginId()).inventMovement();
                    journalize = (movement.mustBeBookedFinancially() && movement.mustBeBookedCharge());
                }
                break;

            default:
                journalize = false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
