<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerVoucherGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerVoucherGroup</c> class is used to manage a collection of ledger vouchers.
/// </summary>
/// <remarks>
///    This class should be used when you post for multiple companies or multiple number sequence
///    codes.
///    Each <c>LedgerVoucher</c> object must be a different company or number sequence code.
/// </remarks>
class LedgerVoucherGroup
{
    Map ledgerVouchers;     // collection of LedgerVoucher instances
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the specified <c>LedgerVoucher</c> object to the ledger voucher group.
    /// </summary>
    /// <param name="_ledgerVoucher">
    ///    The <c>LedgerVoucher</c> object to add.
    /// </param>
    /// <returns>
    ///    true if the <c>LedgerVoucher</c> object was added; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The <c>LedgerVoucher</c> object does not contain a company ID.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The <c>LedgerVoucher</c> object does not contain a number sequence node.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The collection already has a <c>LedgerVoucher</c> with the company ID and number sequence code.
    /// </exception>
    public boolean addLedgerVoucher(LedgerVoucher _ledgerVoucher)
    {
        boolean             success = false;
        CompanyId           companyId;
        NumberSequenceCode  voucherSeriesCode;
        container           key;

        companyId = _ledgerVoucher.parmCompanyId();
        voucherSeriesCode = _ledgerVoucher.parmVoucherSeriesCode();

        if (companyId == '')
        {
            throw error(strfmt("@SYS26332", "@SYS66152"));
        }

        if (voucherSeriesCode == '')
        {
            throw error(strfmt("@SYS26332", "@SYS23567"));
        }

        key = [companyId, voucherSeriesCode];

        if (ledgerVouchers.exists(key))
        {
            throw error(strfmt("@SYS58214", companyId + '/' + voucherSeriesCode));
        }

        success = ledgerVouchers.insert(key, _ledgerVoucher);

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransactionLog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates <c>TransactionLog</c> records for all companies.
    /// </summary>
    /// <param name="_type">
    ///    The <c>TransactionLogType</c> for the <c>TransactionLog</c>.
    /// </param>
    /// <param name="_txt">
    ///    The <c>TransTxt</c> for the <c>TransactionLog</c>.
    /// </param>
    /// <remarks>
    ///    This method creates one <c>TransactionLog</c> record for each company. It does not create a
    ///    <c>TransactionLog</c> record for the current company you are logged in to.
    /// </remarks>
    public void createTransactionLog(
        TransactionLogType _type,
        TransTxt _txt)
    {
        LedgerVoucher   ledgerVoucher;
        CompanyId       voucherCompany;
        CompanyId       loggedInCompany = curext();
        MapEnumerator   enumerator;

        enumerator = ledgerVouchers.getEnumerator();

        while (enumerator.moveNext())
        {
            ledgerVoucher = enumerator.currentValue();

            // when the current company on the ledgerVoucher is different the voucherCompany variable
            // need to create a record in the transaction log.
            if (ledgerVoucher.parmCompanyId() != voucherCompany && ledgerVoucher.parmCompanyId() != loggedInCompany)
            {
                voucherCompany = ledgerVoucher.parmCompanyId();

                changecompany(voucherCompany)
                {
                    TransactionLog::create(_type, _txt);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>end</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates and posts all <c>LedgerVoucher</c> objects in the collection.
    /// </summary>
    /// <returns>
    ///    true if all the items are posted; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The user is responsible for making sure that this method is invoked in the scope of a transaction.
    /// </remarks>
    public boolean end()
    {
        boolean         success = true;
        LedgerVoucher   ledgerVoucher;
        CompanyId       currentCompany;
        MapEnumerator   enumerator;

        // Process each LedgerVoucher in the collection.
        // Order of collection traversal is based upon the Key, i.e.CompanyId, NumberSequenceCode.
        // The collection is traversed via two loops to minimize the number of times changeCompany is invoked.

        enumerator = ledgerVouchers.getEnumerator();

        if (enumerator.moveNext())
        {
            ledgerVoucher = enumerator.currentValue();
        }
        else
        {
            ledgerVoucher = null;
        }

        while (ledgerVoucher != null)
        {
            currentCompany = ledgerVoucher.parmCompanyId();
            Debug::assert(currentCompany != '');    // this ledgerVoucher is invalid, the addVoucher method should have disallowed this entry

            this.updateLedgerVoucher(ledgerVoucher);

            changecompany(currentCompany)
            {
                while ((ledgerVoucher != null) && (ledgerVoucher.parmCompanyId() == currentCompany))
                {
                    // process until the company changes or there are no more LedgerVouchers
                    success = ledgerVoucher.end() && success;

                    if (enumerator.moveNext())
                    {
                        ledgerVoucher = enumerator.currentValue();
                    }
                    else
                    {
                        ledgerVoucher = null;
                    }
                }
            }
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>LedgerVoucher</c> object.
    /// </summary>
    /// <param name = "_ledgerVoucher">
    /// The <c>LedgerVoucher</c> object.
    /// </param>
    /// <returns>
    /// Returns the <c>LedgerVoucher</c> object.
    /// </returns>
    [Wrappable(true)]
    protected final void updateLedgerVoucher(LedgerVoucher _ledgerVoucher)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified <c>LedgerVoucher</c> object in the collection.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID to find.
    /// </param>
    /// <param name="_voucherSeriesCode">
    ///    The number sequence code to find.
    /// </param>
    /// <returns>
    ///    The specified instance of the <c>LedgerVoucher</c> class; otherwise, null.
    /// </returns>
    public LedgerVoucher findLedgerVoucher(
        CompanyId           _companyId,
        NumberSequenceCode  _voucherSeriesCode)
    {
        container key = [_companyId, _voucherSeriesCode];

        if (ledgerVouchers.exists(key))
        {
            return ledgerVouchers.lookup(key);
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInternalCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the internal collection of <c>ledgerVoucher</c> entries.
    /// </summary>
    /// <returns>
    /// The internal collection of <c>ledgerVoucher</c> entries.
    /// </returns>
    public Map getInternalCollection()
    {
        return ledgerVouchers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        ledgerVouchers = new Map(Types::Container, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerVoucherGroup construct()
    {
        LedgerVoucherGroup ledgerVoucherGroup;

        ledgerVoucherGroup = new LedgerVoucherGroup();

        return ledgerVoucherGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the specified <c>LedgerVoucher</c> object from the ledger voucher group.
    /// </summary>
    /// <param name="_ledgerVoucher">
    ///    The <c>LedgerVoucher</c> object to add.
    /// </param>
    /// <returns>
    ///    true if the <c>LedgerVoucher</c> object was removed; otherwise, false.
    /// </returns>
    /// <exception>
    /// The ledger voucher is null.
    /// </exception>
    public boolean removeLedgerVoucher(LedgerVoucher _ledgerVoucher)
    {
        if (!_ledgerVoucher)
        {
            throw error(strFmt("@SYS118114", funcName()));
        }

        boolean success = ledgerVouchers.remove([_ledgerVoucher.parmCompanyId(), _ledgerVoucher.parmVoucherSeriesCode()]);

        return success;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>