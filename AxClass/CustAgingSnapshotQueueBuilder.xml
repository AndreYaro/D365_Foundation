<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAgingSnapshotQueueBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustAgingSnapshotQueueBuilder
{
    private CustVendReportName agingPeriodDefinition;
    private CustCollectionsPoolId poolId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueueForSnapshot</Name>
				<Source><![CDATA[
    internal static void buildQueueForSnapshot(CustVendReportName _agingPeriodDefinition, CustCollectionsPoolId _poolId = null, boolean _excludeZeroBalCustInQueue = false)
    {
        CustAgingSnapshotQueueBuilder queueBuilder = new CustAgingSnapshotQueueBuilder();
        queueBuilder.parmAgingPeriodDefinition(_agingPeriodDefinition);
        queueBuilder.parmCustCollectionsPoolId(_poolId);

        queueBuilder.insertCustomersIntoQueue(_excludeZeroBalCustInQueue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustomersIntoQueue</Name>
				<Source><![CDATA[
    private void insertCustomersIntoQueue(boolean _excludeZeroBalCustInQueue = false)
    {
        this.cleanQueueTableForAgingPeriodDefinition();

        Query q = this.createOrFindQueryFromPoolId();

        QueryBuildDataSource qbdsCustTable = q.dataSourceTable(tableNum(CustTable));
        qbdsCustTable.addSelectionField(fieldNum(CustTable, AccountNum));

        Map fieldMap = new Map(Types::String, Types::Container);
        fieldMap.insert(fieldStr(CustAgingSnapshotQueue, AccountNum), [qbdsCustTable.uniqueId(), fieldStr(CustTable, AccountNum)]);

        this.addStatRepInterval(q, fieldMap);

        if (_excludeZeroBalCustInQueue)
        {
            this.excludeCustomersWithNoOpenTransactions(q);
        }

        CustAgingSnapshotQueue snapshotQueue;

        this.skipValidationsForSnapshotQueue(snapshotQueue);

        Query::insert_recordset(snapshotQueue, fieldMap, q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrFindQueryFromPoolId</Name>
				<Source><![CDATA[
    private Query createOrFindQueryFromPoolId()
    {
        Query q;

        if (this.parmCustCollectionsPoolId())
        {
            q = CustCollectionsPool::findByPoolId(this.parmCustCollectionsPoolId()).convertToQueryObjectForInsertRecordset();
        }
        else
        {
            q = new Query();
            q.addDataSource(tablenum(CustTable));
        }

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStatRepInterval</Name>
				<Source><![CDATA[
    private void addStatRepInterval(Query _q, Map _fieldMap)
    {
        QueryBuildDataSource qbdsStatRepInterval = _q.dataSourceTable(tableNum(CustTable)).addDataSource(tableNum(StatRepInterval));
        qbdsStatRepInterval.addRange(fieldNum(StatRepInterval, Name)).value(SysQuery::value(this.parmAgingPeriodDefinition()));
        qbdsStatRepInterval.fetchMode(QueryFetchMode::One2One);
        qbdsStatRepInterval.fields().dynamic(NoYes::No);
        qbdsStatRepInterval.fields().clearFieldList();

        qbdsStatRepInterval.addSelectionField(fieldNum(StatRepInterval, Name));

        _fieldMap.insert(fieldStr(CustAgingSnapshotQueue, StatRepInterval), [qbdsStatRepInterval.uniqueId(), fieldStr(StatRepInterval, Name)]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludeCustomersWithNoOpenTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exclude customers with no open transactions.
    /// </summary>
    /// <param name = "_q">Query to add <T>CustTransOpen</T></param>
    private void excludeCustomersWithNoOpenTransactions(Query _q)
    {
        QueryBuildDataSource qbdsCustTransOpen = _q.dataSourceTable(tableNum(CustTable)).addDataSource(tableNum(CustTransOpen));
        qbdsCustTransOpen.addLink(fieldNum(CustTable, AccountNum), fieldNum(CustTransOpen, AccountNum));
        qbdsCustTransOpen.joinMode(JoinMode::ExistsJoin);
        qbdsCustTransOpen.fields().dynamic(NoYes::No);
        qbdsCustTransOpen.fields().clearFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanQueueTableForAgingPeriodDefinition</Name>
				<Source><![CDATA[
    private void cleanQueueTableForAgingPeriodDefinition()
    {
        Query q = new Query();

        q.addDataSource(tableNum(CustAgingSnapshotQueue));

        QueryBuildDataSource snapshotQueueDS = q.dataSourceTable(tableNum(CustAgingSnapshotQueue));
        snapshotQueueDS.addRange(fieldNum(CustAgingSnapshotQueue, StatRepInterval)).value(SysQuery::value(this.parmAgingPeriodDefinition()));

        if (this.parmCustCollectionsPoolId())
        {
            CustCollectionsPool::appendPoolQueryByAccountNum(CustCollectionsPool::findByPoolId(this.parmCustCollectionsPoolId()), snapshotQueueDS, fieldNum(CustAgingSnapshotQueue, AccountNum));

            QueryBuildDataSource custTableDS = q.dataSourceTable(tableNum(CustTable));
            custTableDS.joinMode(JoinMode::ExistsJoin);
        }

        Query::delete_from(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipValidationsForSnapshotQueue</Name>
				<Source><![CDATA[
    private void skipValidationsForSnapshotQueue(CustAgingSnapshotQueue _snapshotQueue)
    {
        _snapshotQueue.skipDeleteActions(NoYes::Yes);
        _snapshotQueue.skipBusinessEvents(NoYes::Yes);
        _snapshotQueue.skipDataMethods(NoYes::Yes);
        _snapshotQueue.skipEvents(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgingPeriodDefinition</Name>
				<Source><![CDATA[
    private CustVendReportName parmAgingPeriodDefinition(CustVendReportName _agingPeriodDefinition = agingPeriodDefinition)
    {
        agingPeriodDefinition = _agingPeriodDefinition;
        return agingPeriodDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustCollectionsPoolId</Name>
				<Source><![CDATA[
    private CustCollectionsPoolId parmCustCollectionsPoolId(CustCollectionsPoolId _poolId = poolId)
    {
        poolId = _poolId;
        return poolId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>