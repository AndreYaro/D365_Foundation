<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostMovement_Purch</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventCostMovement_Purch extends InventCostMovement
{
    PriceCur        purchPricePcs;
    MapEnumerator   indirectCostEnumerator;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDefaultToActCostList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the default cost to the actual cost list.
    /// </summary>
    protected void addDefaultToActCostList()
    {
        InventCostTransVariance     total;
        InventCostTransVariance     directCost;
        InventCostTransVariance     indirectCost;
        boolean                     split;

        actCostList = InventCostTransCostList::construct();

        while (indirectCostEnumerator.moveNext())
        {
            split = true;
            indirectCost.CostGroupId    = indirectCostEnumerator.currentKey();
            indirectCost.Level          = InventCostLevel::Single;
            indirectCost.Split          = NoYes::No;
            indirectCost.VarianceType   = this.varianceType();
            indirectCost.DefaultDimension      = dimension;
            indirectCost.CostAmount     = indirectCostEnumerator.currentValue();

            actCostList.insert(indirectCost);

            directCost.CostAmount       -= indirectCost.CostAmount;
        }

        if (split)
        {
            directCost.CostGroupId  = inventTable.costGroup();
            directCost.Level        = InventCostLevel::Single;
            directCost.Split        = NoYes::No;
            directCost.VarianceType = this.varianceType();
            directCost.DefaultDimension    = dimension;
            directCost.CostAmount   += this.calcActCost();
            actCostList.insert(directCost);

            total.Split         = NoYes::Yes;
        }
        else
        {
            total.Split         = NoYes::No;
        }
        total.CostGroupId   = inventTable.costGroup();
        total.Level         = InventCostLevel::Total;
        total.VarianceType  = this.varianceType();
        total.DefaultDimension     = dimension;
        total.CostAmount    = this.calcActCost();
        actCostList.insert(total);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTrans</Name>
				<Source><![CDATA[
        public void addInventTrans(InventTrans           _inventTrans,
                               InventMovement        _inventMovement,
                               Voucher               _voucher,
                               TransDate             _transDate,
                               InventCostTransState  _costTransState,
                               boolean               _isReturn = false,
                               InventTrans           _inventTransOrig = null)
    {
        if (_costTransState == InventCostTransState::Financial)
        {
            indirectCostEnumerator = _inventMovement.inventCostIndirectFinancial().getIndirectCostEnumerator();
        }
        else
        {
            indirectCostEnumerator = _inventMovement.inventCostIndirectPhysical().getIndirectCostEnumerator(_inventTrans);
        }
        super(_inventTrans, _inventMovement, _voucher, _transDate, _costTransState, _isReturn, _inventTransOrig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActCostListFinancial</Name>
				<Source><![CDATA[
        protected void initActCostListFinancial()
    {
        this.addDefaultToActCostList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActCostListFinancialReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the actual cost list for a financial return.
    /// </summary>
    protected void initActCostListFinancialReturn()
    {
        this.addDefaultToActCostList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActCostListPhysical</Name>
				<Source><![CDATA[
        protected void initActCostListPhysical()
    {
        this.addDefaultToActCostList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEstCostListFinancial</Name>
				<Source><![CDATA[
        protected void initEstCostListFinancial()
    {
        estCostList = InventCostTransCostList::newPlannedCostList(inventTable, inventTrans, this.varianceType(), dimension, inventTrans.Qty, stdCostList, inventItemPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEstCostListFinancialReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the estimated cost list for a financial return.
    /// </summary>
    protected void initEstCostListFinancialReturn()
    {
        estCostList = InventCostTransCostList::newPlannedCostList(inventTable, inventTrans, this.varianceType(), dimension, inventTrans.Qty, stdCostList, inventItemPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEstCostListPhysical</Name>
				<Source><![CDATA[
        protected void initEstCostListPhysical()
    {
        // Estimated = Std Cost
        estCostList = InventCostTransCostList::newFromList(stdCostList, inventTrans.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new(InventMovement    _inventMovement)
    {
        super(_inventMovement);

        if (_inventMovement.buffer().TableId == tablenum(PurchLine))
        {
            PurchLine purchLine = _inventMovement.buffer();
            // Set the PurchPrice as lineAmount / Qty
            if (purchLine.PurchQty)
            {
                purchPricePcs = purchLine.LineAmount / purchLine.PurchQty;
            }
            else
            {
                purchPricePcs = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>varianceType</Name>
				<Source><![CDATA[
        protected InventCostVarianceType varianceType()
    {
        return InventCostVarianceType::PurchPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventCostMovement_Purch construct(InventMovement _inventMovement)
    {
        return new InventCostMovement_Purch(_inventMovement);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
