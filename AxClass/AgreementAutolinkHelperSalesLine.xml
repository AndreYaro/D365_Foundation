<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementAutolinkHelperSalesLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implementation of the <c>AgreementAutolinkHelper</c> interface for <c>SalesLine</c> records.
/// </summary>
class AgreementAutolinkHelperSalesLine implements AgreementAutolinkHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findLineForAutoMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the best <c>AgreementLine</c> to associate with the <c>SalesLine</c>.
    /// </summary>
    /// <param name="_salesPurchLine">
    /// The <c>SalesPurchLine</c> to find the agreement lines for.
    /// </param>
    /// <param name="_checkLimits">
    /// A flag that indicates whether to check the agreed maximum and minimum amounts and remaining quantity or amount.
    /// </param>
    /// <returns>
    /// The best <c>AgreementLine</c> among the lines of the specified agreement.
    /// </returns>
    /// <remarks>
    /// This method assumes that the sales header is already linked to an agreement.
    /// </remarks>
    public AgreementLine findLineForAutoMatch(SalesPurchLine _salesPurchLine, boolean _checkLimits)
    {
        SalesLine               salesLine = _salesPurchLine;
        AgreementHeaderRecId    agreementHeader = SalesTable::find(salesLine.SalesId).MatchingAgreement;

        return AgreementLine::findLineForAutoMatch(salesLine, agreementHeader, _checkLimits);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the given <c>SalesLine</c> with an <c>AgreementLine</c>.
    /// </summary>
    /// <param name="_salesPurchLine">
    /// The <c>SalesLine</c> to initialize.
    /// </param>
    /// <param name="_agreementLine">
    /// The <c>AgreementLine</c> to intialize with.
    /// </param>
    public void initFromAgreementLine(SalesPurchLine _salesPurchLine, AgreementLine _agreementLine)
    {
        SalesLine salesLine = _salesPurchLine;

        salesLine.initFromAgreementLine(_agreementLine);
        SalesLine::modifySalesQty(salesLine, salesLine.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLinkValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether the link to the current <c>AgreementLine</c> is still valid
    /// </summary>
    /// <param name="_salesPurchLine">
    /// <c>SalesLine</c> to validate.
    /// </param>
    /// <param name="_showInfoLog">
    /// A flag that indicates whether messages should be written to the infolog.
    /// </param>
    /// <returns>
    /// true if the link is still valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// It is assumed that the target <c>SalesLine</c> has an <c>AgreementLine</c> linked.
    /// </remarks>
    public boolean isLinkValid(SalesPurchLine _salesPurchLine, boolean _showInfoLog)
    {
        SalesLine salesLine = _salesPurchLine;
        return AgreementLine::find(salesLine.MatchingAgreementLine).isLinkValid(salesLine, _showInfolog);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>