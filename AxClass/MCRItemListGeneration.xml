<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRItemListGeneration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRItemListGeneration</c> generates item lists.
/// </summary>
class MCRItemListGeneration extends RunBaseBatch implements BatchRetryable
{
    // Dialog fields
    DialogField              dfGenerationValue;
    DialogField              dfMinimumQty;
    DialogField              dfGenerationType;
    DialogField              dfCustAccount;
    SysLookupMultiSelectCtrl multiSelectCustomers;

    // Packed variables
    int                       generationValue;
    int                       minimumQty;
    MCRItemListGenerationType generationType;
    container                 custAccounts;
    CustAccount               mcrItemListTableCustomer;

    FormStringControl tempCustAccountCtrl;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        generationValue,
        generationType,
        minimumQty,
        custAccounts
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    ///    created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase       dialog = super();
        dialog.caption("@MCR40224");

        dfCustAccount = dialog.addField(extendedTypeStr(CustAccount), "@SYS7149", "@MCR40227");
        dfGenerationType = dialog.addField(enumStr(MCRItemListGenerationType));
        dfMinimumQty = dialog.addField(extendedtypestr(MCRItemListMinQty), "@MCR25053","@MCR40226");
        dfGenerationValue = dialog.addField(extendedtypestr(MCRItemListNumberOfDaysOrOrders), "@MCR40225", "@MCR40228");

        var minimumQtyControl = dfMinimumQty.control();
        minimumQtyControl.mandatory(true);

        var generationValueControl = dfGenerationValue.control();
        generationValueControl.mandatory(true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase dialog)
    {
        super(dialog);

        FormRun formRun = dialog.dialogForm().formRun();

        if (formRun)
        {
            multiSelectCustomers = SysLookupMultiSelectCtrl::construct(formRun,
                                                                       formRun.design().controlName(dfCustAccount.name()),
                                                                       queryStr(CustTableLookup));
            multiSelectCustomers.setMandatory(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateItemList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the item lists.
    /// </summary>
    /// <remarks>
    /// If an item list already exists, the item list lines are removed and will be recreated based on the new sales order history.
    /// </remarks>
    private void generateItemList()
    {
        MCRCustTable     mcrCustTable;
        MCRItemListTable mcrItemListTable;
        MCRItemListLine  mcrItemListLine;

        int numberOfCustAccounts = conLen(custAccounts);

        ttsbegin;
        for (int i = 1; i <= numberOfCustAccounts; i++)
        {
            AccountNum accountNum = conPeek(custAccounts, i);

            // Check if a item list already exists. If yes, delete item list lines
            mcrItemListTable = MCRItemListTable::findByCustAccount(accountNum);
            var itemListId = mcrItemListTable.ItemListId;
            if (mcrItemListTable)
            {
                delete_from mcrItemListLine
                    where mcrItemListLine.ItemListTable == mcrItemListTable.RecId;
            }
            else
            {
                // Create a new item list header
                itemListId = MCRItemListTable::numberSeq().num();
                mcrItemListTable.ItemListId  = itemListId;
                mcrItemListTable.Description = strFmt("@MCR40221", accountNum);
                mcrItemListTable.CustAccount = accountNum;
                mcrItemListTable.insert();
            }

            // Generate item list lines
            if (!this.generateItemListLines(accountNum, mcrItemListTable.RecId))
            {
                // Delete the item list header record, because no lines have been created
                delete_from mcrItemListTable
                    where mcrItemListTable.ItemListId == itemListId;
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTemporaryLineForSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>TmpFrmVirtual</c> for a sales order line.
    /// </summary>
    /// <param name = "_salesLine">The sales order line.</param>
    /// <param name = "_inventDim">The product dimensions for the sales order line.</param>
    /// <returns>An initialized record.</returns>
    protected TmpFrmVirtual initTemporaryLineForSalesLine(SalesLine _salesLine, InventDim _inventDim)
    {
        TmpFrmVirtual   tmpFrmVirtualLines;

        tmpFrmVirtualLines.clear();
        tmpFrmVirtualLines.ItemId       = _salesLine.ItemId;

        if (_salesLine.StockedProduct)
        {
            tmpFrmVirtualLines.Qty      = _salesLine.QtyOrdered;
        }
        else
        {
            tmpFrmVirtualLines.Qty      = _salesLine.SalesQty;
        }

        tmpFrmVirtualLines.InventDimId  = InventDim::findOrCreate(_inventDim).inventDimId;
        
        return tmpFrmVirtualLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTemporaryLines</Name>
				<Source><![CDATA[
    private void populateTemporaryLines(CustAccount _custAccount, TmpFrmVirtual _tmpFrmVirtualLines)
    {
        SalesLine       salesLine;
        SalesTable      salesTable;
        MCRSalesTable   mcrSalesTable;
        InventDim       inventDim;
        int             orderCount;
        utcDateTime     startDate;
         
        SalesId         prevSalesId;
        InventDimParm   productDims = InventDimParm::allProductDim();

        if (generationType == MCRItemListGenerationType::NumDays)
        {
            startDate = DateTimeUtil::addDays(DateTimeUtil::getSystemDateTime(),-generationValue);
        }

        while select SalesId from salesTable
            order by createdDateTime desc
            where salesTable.CustAccount       == _custAccount
                && salesTable.SalesStatus      != SalesStatus::Canceled
                && (generationType == MCRItemListGenerationType::NumOrders
                || (generationType == MCRItemListGenerationType::NumDays
                && salesTable.createdDateTime  >= startDate))
            join salesLine
            where salesLine.SalesId            == salesTable.SalesId
                && (salesLine.QtyOrdered       >= minimumQty
                ||  (salesLine.StockedProduct  == NoYes::No
                &&   salesLine.QtyOrdered      == 0))
                && salesLine.SalesStatus       != SalesStatus::Canceled
            join inventDim
            where inventDim.inventDimId     == salesLine.InventDimId
            notExists join mcrSalesTable
            where mcrSalesTable.SalesTable  == salesTable.RecId
                && mcrSalesTable.ContinuityOrder
        {
            if (generationType == MCRItemListGenerationType::NumOrders)
            {
                if (orderCount  >= generationValue
                 && prevSalesId != salesTable.SalesId)
                {
                    break;
                }

                if (prevSalesId != SalesTable.SalesId)
                {
                    prevSalesId = SalesTable.SalesId;
                    orderCount++;
                }
            }

            inventDim.clearNotSelectedDim(productDims);
            TmpFrmVirtual virtualLinesForSalesLine = this.initTemporaryLineForSalesLine(salesLine, inventDim);
            virtualLinesForSalesLine.setTmpData(_tmpFrmVirtualLines);
            virtualLinesForSalesLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemListLinesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for aggregating the virtual lines.
    /// </summary>
    /// <returns>The query.</returns>
    protected Query createItemListLinesQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(TmpFrmVirtual));

        qbds.addGroupByAndSelectionField(fieldNum(TmpFrmVirtual, ItemId));
        qbds.addGroupByAndSelectionField(fieldNum(TmpFrmVirtual, InventDimId));
        qbds.addGroupByAndSelectionField(fieldNum(TmpFrmVirtual, _MCRString1));
        
        qbds.addSelectionField(fieldNum(TmpFrmVirtual, Qty), SelectionField::Avg);

        return query;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemListLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>MCRItemListLine</c> from a virtual line.
    /// </summary>
    /// <param name = "_tmpFrmVirtualLines">The virtual line.</param>
    /// <returns>An initialized record.</returns>
    protected MCRItemListLine initItemListLine(TmpFrmVirtual _tmpFrmVirtualLines)
    {
        MCRItemListLine mcrItemListLine;
        mcrItemListLine.ItemId      = _tmpFrmVirtualLines.ItemId;
        mcrItemListLine.InventDimId = _tmpFrmVirtualLines.InventDimId;
        mcrItemListLine.SalesUnit   = InventTableModule::find(_tmpFrmVirtualLines.ItemId, ModuleInventPurchSales::Sales).UnitId;

        UnitOfMeasure toUnitOfMeasure             = UnitOfMeasure::findBySymbol(mcrItemListLine.SalesUnit);

        EcoResProductUnitConverter ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(mcrItemListLine.ItemId,
                                                                                                                                  mcrItemListLine.InventDimId,
                                                                                                                                  InventTableModule::find(mcrItemListLine.ItemId, ModuleInventPurchSales::Invent).UnitId,
                                                                                                                                  mcrItemListLine.SalesUnit,
                                                                                                                                  NoYes::Yes);

        if (ecoResProductUnitConverter.canValueBeConverted())
        {
            mcrItemListLine.SalesQty = decRound(ecoResProductUnitConverter.convertValue(_tmpFrmVirtualLines.Qty),
                                                toUnitOfMeasure.DecimalPrecision);
        }
        return mcrItemListLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemListLines</Name>
				<Source><![CDATA[
    private boolean createItemListLines(MCRItemListTableRecId _MCRItemListTableRecId, TmpFrmVirtual _tmpFrmVirtualLines)
    {
        boolean ret;

        Query query = this.createItemListLinesQuery();

        QueryRun queryRun = new QueryRun(query);
        queryRun.setCursor(_tmpFrmVirtualLines);

        while (queryRun.next())
        {
            TmpFrmVirtual virtualLine = queryRun.get(tableNum(TmpFrmVirtual));

            MCRItemListLine mcrItemListLine = this.initItemListLine(virtualLine);
            mcrItemListLine.ItemListTable = _MCRItemListTableRecId;

            if ((mcrItemListLine.SalesQty > 0)
                && mcrItemListLine.validatewrite())
            {
                mcrItemListLine.insert();
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateItemListLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the item list line records.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer account to create item list records for.
    /// </param>
    /// <param name="_MCRItemListTableRecId">
    /// The reference to the item list to create item list line records for.
    /// </param>
    /// <returns>
    /// true if item list line records are created; otherwise, false.
    /// </returns>
    private boolean generateItemListLines(CustAccount _custAccount,
        MCRItemListTableRecId _MCRItemListTableRecId)
    {
        TmpFrmVirtual tmpFrmVirtualLines;

        this.populateTemporaryLines(_custAccount, tmpFrmVirtualLines);
        return this.createItemListLines(_MCRItemListTableRecId, tmpFrmVirtualLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        
        generationValue             = dfGenerationValue.value();
        generationType              = dfGenerationType.value();
        minimumQty                  = dfMinimumQty.value(); 
        container custAccountsRecId = multiSelectCustomers.get();
        custAccounts                = MCRItemListGeneration::getCustAccount(custAccountsRecId);

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustAccount</Name>
				<Source><![CDATA[
    private static container getCustAccount(container _recId)
    {
        container  custAccount;
        AccountNum accountNum;
        CustTable  custTable;
        RecId      accountRecId;

        Query q = new Query();
        int   numberOfCustAccounts = conLen(_recId);
        QueryBuildDataSource ds = q.addDataSource(tableNum(CustTable));

        ds.addSelectionField(fieldNum(CustTable, AccountNum));
        ds.addSortField(fieldNum(CustTable, RecId), SortOrder::Ascending);

        for (int i = 1; i <= numberOfCustAccounts; i++)
        {
            accountRecId    = conPeek(_recId, i);
            ds.addRange(fieldNum(CustTable, RecId)).value(queryValue(accountRecId));
        }

        QueryRun qr = new QueryRun(q);
        int i = 1;

        while (qr.next())
        {
            custTable = qr.get(tableNum(CustTable));
            accountNum = custTable.AccountNum;
            custAccount = conIns(custAccount, i, accountNum);
            i++;
        }

        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRItemListTableCustomer</Name>
				<Source><![CDATA[
    public CustAccount parmMCRItemListTableCustomer(CustAccount _custAccount = mcrItemListTableCustomer)
    {
        mcrItemListTableCustomer = _custAccount;
        return mcrItemListTableCustomer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        if (! this.validate())
        {
            throw error("@MCR40222");
        }

        try
        {
            this.generateItemList();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the generation yielded results.
    /// </summary>
    /// <param name="_calledFrom">
    /// The caller form of this class.
    /// </param>
    /// <returns>
    /// true if the item list generation yielded results; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        if (generationValue <= 0)
        {
            return checkFailed("@MCR40223");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MCRItemListGeneration construct()
    {
        return new MCRItemListGeneration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@MCR40211";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        MCRItemListGeneration   mcrItemListGeneration;
        MCRItemListTable        mcrItemListTable;
        FormDataSource          formDataSource;
        mcrItemListGeneration = MCRItemListGeneration::construct();

        // Retrieves the existing list and stores the customer record.
        if (args.dataset() == tableNum(MCRItemListTable))
        {
            mcrItemListGeneration.getLast();
            mcrItemListTable = args.record();
            mcrItemListGeneration.parmMCRItemListTableCustomer(mcrItemListTable.CustAccount);

            formDataSource = FormDataUtil::getFormDataSource(mcrItemListTable);
        }

        if (mcrItemListGeneration.prompt())
        {
            mcrItemListGeneration.runOperation();

            if (formDataSource)
            {
                formDataSource.research();
                formDataSource.last();
            }

            info ("@MCR40220");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>