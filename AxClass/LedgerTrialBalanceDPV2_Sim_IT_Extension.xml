<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTrialBalanceDPV2_Sim_IT_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(LedgerTrialBalanceDPV2))]
internal final class LedgerTrialBalanceDPV2_Sim_IT_Extension
{
    private SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(LedgerTrialBalanceDPV2_Sim_IT_Extension));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertOperatingTransRecords</Name>
				<Source><![CDATA[
    protected void insertOperatingTransRecords(
        LedgerTrialBalanceTmp _ledgerTrialBalanceTmp,
        DimensionHierarchy _primaryDimensionSet,
        LedgerPostingLayerTmp _postingLayersTmp,
        Map _reportingDimensionFieldMapping)
    {
        next insertOperatingTransRecords(
            _ledgerTrialBalanceTmp,
            _primaryDimensionSet,
            _postingLayersTmp,
            _reportingDimensionFieldMapping);

        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance())
            && this.parmDataContract().parmIncludeSimulation_IT())
        {
            using (var activity = instrumentationLogger.activityContext(
                classStr(LedgerTrialBalanceDPV2_Sim_IT_Extension),
                methodStr(LedgerTrialBalanceDPV2_Sim_IT_Extension, insertOperatingTransRecords)))
            {
                this.insertOperatingTransRecordsSimIT(
                    _ledgerTrialBalanceTmp,
                    _primaryDimensionSet,
                    _postingLayersTmp,
                    _reportingDimensionFieldMapping);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOperatingTransRecordsSimIT</Name>
				<Source><![CDATA[
    private void insertOperatingTransRecordsSimIT(
        LedgerTrialBalanceTmp _ledgerTrialBalanceTmp,
        DimensionHierarchy _primaryDimensionSet,
        LedgerPostingLayerTmp _postingLayersTmp,
        Map _reportingDimensionFieldMapping)
    {
        SysDaInsertObject insertObject = new SysDaInsertObject(_ledgerTrialBalanceTmp);

        insertObject = this.createInsertObjectSimIT(
            insertObject,
            _primaryDimensionSet,
            _postingLayersTmp,
            FiscalPeriodType::Operating,
            _reportingDimensionFieldMapping);

        SysDaQueryExpression whereClause = insertObject.query().whereClause();
        Common balanceTable = insertObject.query().table();

        whereClause = whereClause.and(new SysDaGreaterThanOrEqualsExpression(
            new SysDaFieldExpression(balanceTable, fieldStr(GeneralLedgerBalanceSim_IT, AccountingDate)),
            new SysDaValueExpression(this.parmDataContract().parmFromDate())));

        whereClause = whereClause.and(new SysDaLessThanOrEqualsExpression(
            new SysDaFieldExpression(balanceTable, fieldStr(GeneralLedgerBalanceSim_IT, AccountingDate)),
            new SysDaValueExpression(this.parmDataContract().parmToDate())));

        whereClause = whereClause.and(new SysDaEqualsExpression(
            new SysDaFieldExpression(balanceTable, fieldStr(GeneralLedgerBalanceSim_IT, FiscalCalendarPeriodType)),
            new SysDaValueExpression(FiscalPeriodType::Operating)));

        insertObject.query().whereClause(whereClause);

        new SysDaInsertStatement().insert(insertObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInsertObjectSimIT</Name>
				<Source><![CDATA[
    private SysDaInsertObject createInsertObjectSimIT(
        SysDaInsertObject _ledgerTrialBalanceTmpInsertObject,
        DimensionHierarchy _primaryDimensionSet,
        LedgerPostingLayerTmp _postingLayersTmp,
        FiscalPeriodType _transactionType,
        Map _reportingDimensionFieldMapping)
    {
        _ledgerTrialBalanceTmpInsertObject.fields()
            .add(fieldStr(LedgerTrialBalanceTmp, AccountingDate))
            .add(fieldStr(LedgerTrialBalanceTmp, AmountDebit))
            .add(fieldStr(LedgerTrialBalanceTmp, AmountCredit))
            .add(fieldStr(LedgerTrialBalanceTmp, ReportingAmountDebit))
            .add(fieldStr(LedgerTrialBalanceTmp, ReportingAmountCredit))
            .add(fieldStr(LedgerTrialBalanceTmp, Quantity));

        GeneralLedgerBalanceSim_IT generalLedgerBalance;
        SysDaQueryObject query = _ledgerTrialBalanceTmpInsertObject.query(new SysDaQueryObject(generalLedgerBalance));
        query.forceSelectOrderHint = true;

        _ledgerTrialBalanceTmpInsertObject.query().projection()
            .addMin(fieldStr(GeneralLedgerBalanceSim_IT, AccountingDate))
            .addSum(fieldStr(GeneralLedgerBalanceSim_IT, DebitAccountingCurrencyAmount))
            .addSum(fieldStr(GeneralLedgerBalanceSim_IT, CreditAccountingCurrencyAmount))
            .addSum(fieldStr(GeneralLedgerBalanceSim_IT, DebitReportingCurrencyAmount))
            .addSum(fieldStr(GeneralLedgerBalanceSim_IT, CreditReportingCurrencyAmount))
            .addSum(fieldStr(GeneralLedgerBalanceSim_IT, Quantity));

        _ledgerTrialBalanceTmpInsertObject.fields()
            .add(fieldStr(LedgerTrialBalanceTmp, TransactionType));

        _ledgerTrialBalanceTmpInsertObject.query().projection()
            .addValue(_transactionType);

        _ledgerTrialBalanceTmpInsertObject.fields()
            .add(fieldStr(LedgerTrialBalanceTmp, IsSimulation_IT));

        _ledgerTrialBalanceTmpInsertObject.query().projection()
            .addValue(true);

        _ledgerTrialBalanceTmpInsertObject.query().whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(generalLedgerBalance, fieldStr(GeneralLedgerBalanceSim_IT, Ledger)),
            new SysDaValueExpression(Ledger::current())));

        this.createChildDataSourceObjectsSimIT(
            _ledgerTrialBalanceTmpInsertObject,
            _primaryDimensionSet,
            _postingLayersTmp,
            _reportingDimensionFieldMapping);

        return _ledgerTrialBalanceTmpInsertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createChildDataSourceObjectsSimIT</Name>
				<Source><![CDATA[
    private void createChildDataSourceObjectsSimIT(
        SysDaInsertObject _insertObject,
        DimensionHierarchy _primaryDimensionSet,
        LedgerPostingLayerTmp _postingLayersTmp,
        Map _reportingDimensionFieldMapping)
    {
        SysDaQueryObject generalLedgerBalanceQuery = _insertObject.query();
        
        SysDaQueryObject reportingDimensionReferenceQuery = this.createReportingDimensionReferenceQueryObjectSimIT(
            _insertObject,
            _primaryDimensionSet);

        SysDaQueryObject reportingDimensionQuery = this.createReportingDimensionQueryObject(
            _insertObject,
            reportingDimensionReferenceQuery,
            _primaryDimensionSet,
            _reportingDimensionFieldMapping);

        SysDaQueryObject postingLayerQuery = this.createPostingLayerQueryObject(_insertObject, _postingLayersTmp);

        generalLedgerBalanceQuery
            .joinClause(SysDaJoinKind::InnerJoin, reportingDimensionReferenceQuery)
            .joinClause(SysDaJoinKind::InnerJoin, reportingDimensionQuery)
            .joinClause(SysDaJoinKind::InnerJoin, postingLayerQuery);

        if (this.parmDataContract().parmSimulationJournalGroupId_IT())
        {
            SysDaQueryObject simulationJournalGroupLine_ITQuery = this.createSimulationJournalGroupLine_ITQueryObject(_insertObject);

            postingLayerQuery.joinClause(SysDaJoinKind::InnerJoin, simulationJournalGroupLine_ITQuery);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPostingLayerQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject createPostingLayerQueryObject(SysDaInsertObject _insertObject, LedgerPostingLayerTmp _postingLayersTmp)
    {
        Common balanceTable = _insertObject.query().table();

        SysDaQueryObject postingLayersTempQuery = new SysDaQueryObject(_postingLayersTmp);
        SysDaQueryExpression postingLayerTempQueryJoin = postingLayersTempQuery.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_postingLayersTmp, fieldStr(LedgerPostingLayerTmp, PostingLayer)),
                new SysDaFieldExpression(balanceTable, fieldStr(GeneralLedgerBalanceSim_IT, PostingLayer))));

        return postingLayersTempQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportingDimensionReferenceQueryObjectSimIT</Name>
				<Source><![CDATA[
    private SysDaQueryObject createReportingDimensionReferenceQueryObjectSimIT(
        SysDaInsertObject _insertObject,
        DimensionHierarchy _primaryDimensionSet)
    {
        GeneralLedgerBalanceReportingDimensionReferenceSim_IT generalLedgerBalanceReportingDimensionReference;
        SysDaQueryObject generalLedgerBalanceDimensionReferenceQuery = new SysDaQueryObject(generalLedgerBalanceReportingDimensionReference);
        Common balanceTable = _insertObject.query().table();

        SysDaQueryExpression whereClause = new SysDaEqualsExpression(
            new SysDaFieldExpression(generalLedgerBalanceDimensionReferenceQuery.table(), fieldStr(GeneralLedgerBalanceReportingDimensionReferenceSim_IT, AccountEntryLedgerDimension)),
            new SysDaFieldExpression(balanceTable, fieldStr(GeneralLedgerBalanceSim_IT, LedgerDimension)));

        whereClause = whereClause.and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(generalLedgerBalanceDimensionReferenceQuery.table(), fieldStr(GeneralLedgerBalanceReportingDimensionReferenceSim_IT, FocusDimensionHierarchy)),
                new SysDaValueExpression(_primaryDimensionSet.RecId)));

        generalLedgerBalanceDimensionReferenceQuery.whereClause(whereClause);

        return generalLedgerBalanceDimensionReferenceQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSimulationJournalGroupLine_ITQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject createSimulationJournalGroupLine_ITQueryObject(SysDaInsertObject _insertObject)
    {
        SimulationJournalGroupLine_IT simulationJournalGroupLine;

        SysDaQueryObject simulationJournalGroupLineQuery = new SysDaQueryObject(simulationJournalGroupLine);
        Common balanceTable = _insertObject.query().table();

        SysDaQueryExpression whereClause = new SysDaEqualsExpression(
            new SysDaFieldExpression(simulationJournalGroupLineQuery.table(), fieldStr(SimulationJournalGroupLine_IT, JournalName)),
            new SysDaFieldExpression(balanceTable, fieldStr(GeneralLedgerBalanceSim_IT, SimulationJournalNameId)));

        whereClause = whereClause.and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(simulationJournalGroupLineQuery.table(), fieldStr(SimulationJournalGroupLine_IT, SimulationJournalGroupId)),
                new SysDaValueExpression(this.parmDataContract().parmSimulationJournalGroupId_IT())));

        simulationJournalGroupLineQuery.whereClause(whereClause);

        return simulationJournalGroupLineQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAggregateAndInsertReportingTableInsertObject</Name>
				<Source><![CDATA[
    protected final SysDaInsertObject getAggregateAndInsertReportingTableInsertObject(LedgerTrialBalanceTmp _ledgerTrialBalanceTmp)
    {
        SysDaInsertObject insertLedgerTrialBalanceTmpObject = next getAggregateAndInsertReportingTableInsertObject(_ledgerTrialBalanceTmp);

        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance())
            && this.parmDataContract().parmIncludeSimulation_IT())
        {
            insertLedgerTrialBalanceTmpObject.fields()
                .add(fieldStr(LedgerTrialBalanceTmp, isSimulation_IT));
        }

        return insertLedgerTrialBalanceTmpObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAggregateAndInsertReportingTableQueryObject</Name>
				<Source><![CDATA[
    protected final SysDaQueryObject getAggregateAndInsertReportingTableQueryObject(LedgerTrialBalanceTmp _ledgerTrialBalanceTmpReference)
    {
        SysDaQueryObject ledgerTrialBalanceTmpReferenceQueryObject = next getAggregateAndInsertReportingTableQueryObject(_ledgerTrialBalanceTmpReference);

        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance())
            && this.parmDataContract().parmIncludeSimulation_IT())
        {
            ledgerTrialBalanceTmpReferenceQueryObject.projection()
                .add(fieldStr(LedgerTrialBalanceTmp, isSimulation_IT));

            ledgerTrialBalanceTmpReferenceQueryObject.groupByClause()
                .add(fieldStr(LedgerTrialBalanceTmp, isSimulation_IT));
        }

        return ledgerTrialBalanceTmpReferenceQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateClosingBalance</Name>
				<Source><![CDATA[
    protected final void updateClosingBalance(LedgerTrialBalanceTmp _ledgerTrialBalanceTmp)
    {
        next updateClosingBalance(_ledgerTrialBalanceTmp);

        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance())
            && this.parmDataContract().parmIncludeSimulation_IT())
        {
            update_recordSet _ledgerTrialBalanceTmp
                setting
                    NetChange = 0,
                    EndingBalance = 0,
                    ReportingEndingBalance = 0,
                    EndingQuantityBalance = 0
            where _ledgerTrialBalanceTmp.isSimulation_IT == NoYes::Yes;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>