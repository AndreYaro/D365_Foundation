<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KeepAmount_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
//Class destine to use for keep amounts.
//Parameters are of keep:
//      - RecID operation is
//      - Currency code
//      - Amount is in operation currency
//      - Amount is in MST currency
class KeepAmount_RU
{
    Map         map;

    container   currentValue;

    RecId           currentRecID;
    CurrencyCode    currentCurrencyCode;
    AmountCur       currentAmountCur;
    AmountMST       currentAmountMST;

    CurrencyCode    currentCurrencyCodeTranslate;
    AmountCur       currentAmountCurTranslate;

#define.conSize(5)              //Size of container is

//Position is in container
#define.posCurencyCode(1)                   //Position is curency code
#define.posAmountCur(2)                     //Position is amount in operation currency
#define.posAmountMST(3)                     //Position is amount in MST currency
#define.posCurrencyCodeTranslate(4)
#define.posCurrentAmountCurTranslate(5)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createMap</Name>
				<Source><![CDATA[
        protected void createMap()
    {
        ;
        map = new Map(Types::Int64, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete(RecId _recId)
    {
        ;

        if (map.exists(_recId))
            map.remove(_recId);

        this.resetCurentValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCur</Name>
				<Source><![CDATA[
        public AmountCur getAmountCur(RecId _recId)
    {
        ;
        this.readCurrentValues(_recId);
        return currentAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCurTranslate</Name>
				<Source><![CDATA[
        public AmountCur getAmountCurTranslate(RecId _recId)
    {
        ;
        this.readCurrentValues(_recId);
        return currentAmountCurTranslate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountMST</Name>
				<Source><![CDATA[
        public AmountMST getAmountMST(RecId _recId)
    {
        ;

        this.readCurrentValues(_recId);
        return currentAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
        public CurrencyCode getCurrencyCode(RecId _recId)
    {
        ;
        this.readCurrentValues(_recId);
        return currentCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCodeTranslate</Name>
				<Source><![CDATA[
        public CurrencyCode getCurrencyCodeTranslate(RecId _recId)
    {
        ;
        this.readCurrentValues(_recId);
        return currentCurrencyCodeTranslate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
        public void insert(RecId            _recId,
                        CurrencyCode    _currencyCode,
                        AmountCur       _amountCur,
                        AmountMST       _amountMST,
                        CurrencyCode    _currentCurrencyCodeTranslate,
                        AmountCur       _currentAmountCurTranslate)
    {
        ;

        currentRecID        = _recId;
        currentCurrencyCode = _currencyCode;
        currentAmountCur    = _amountCur;
        currentAmountMST    = _amountMST;

        currentCurrencyCodeTranslate        = _currentCurrencyCodeTranslate;
        currentAmountCurTranslate    = _currentAmountCurTranslate;

        this.writeCurrentValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>needRefresh</Name>
				<Source><![CDATA[
        protected boolean needRefresh(RecId _recId)
    {
        ;

        return ((currentRecID == 0) || (currentRecID != _recId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        ;

        this.resetCurentValue();
        this.createMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>readCurrentValues</Name>
				<Source><![CDATA[
        protected void readCurrentValues(RecId _recId)
    {
        ;

        if (this.needRefresh(_recId))
        {
            if (! map.exists(_recId))
            {
                this.resetCurentValue();

                currentRecID = _recId;

                this.writeCurrentValues();
            }

            currentValue = map.lookup(_recId);

            currentRecID        = _recId;
            currentCurrencyCode = conPeek(currentValue, #posCurencyCode);
            currentAmountCur    = conPeek(currentValue, #posAmountCur);
            currentAmountMST    = conPeek(currentValue, #posAmountMST);

            currentCurrencyCodeTranslate    = conPeek(currentValue, #posCurrencyCodeTranslate);
            currentAmountCurTranslate       = conPeek(currentValue, #posCurrentAmountCurTranslate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAll</Name>
				<Source><![CDATA[
        public void removeAll()
    {
        ;

        this.createMap();
        this.resetCurentValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCurentValue</Name>
				<Source><![CDATA[
        protected void resetCurentValue()
    {
        currentRecID = 0;           //Reset currentRecId
        currentValue   = conNull();   //Reset currentCon

        currentCurrencyCode = "";
        currentAmountCur    = 0;
        currentAmountMST    = 0;

        currentCurrencyCodeTranslate = "";
        currentAmountCurTranslate    = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmountCur</Name>
				<Source><![CDATA[
        public AmountCur setAmountCur(RecId _recId, AmountCur _amountCur)
    {
        ;

        this.readCurrentValues(_recId);

        if (_amountCur != currentAmountCur)
        {
            currentAmountCur = _amountCur;

            this.writeCurrentValues();
        }

        return currentAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmountCurTranslate</Name>
				<Source><![CDATA[
        public AmountCur setAmountCurTranslate(RecId _recId, AmountCur _amountCur)
    {
        ;

        this.readCurrentValues(_recId);

        if (_amountCur != currentAmountCurTranslate)
        {
            currentAmountCurTranslate = _amountCur;

            this.writeCurrentValues();
        }

        return currentAmountCurTranslate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmountMST</Name>
				<Source><![CDATA[
        public AmountMST setAmountMST(RecId _recId, AmountMST  _amountMST)
    {
        ;

        this.readCurrentValues(_recId);

        if (_amountMST != currentAmountMST)
        {
            currentAmountMST = _amountMST;

            this.writeCurrentValues();
        }

        return currentAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrencyCode</Name>
				<Source><![CDATA[
        public CurrencyCode setCurrencyCode(RecId _recId, CurrencyCode _currencyCode)
    {
        ;

        this.readCurrentValues(_recId);

        if (_currencyCode != currentCurrencyCode)
        {
            currentCurrencyCode = _currencyCode;

            this.writeCurrentValues();
        }

        return currentCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrencyCodeTranslate</Name>
				<Source><![CDATA[
        public CurrencyCode setCurrencyCodeTranslate(RecId _recId, CurrencyCode _currencyCodeTranslate)
    {
        ;

        this.readCurrentValues(_recId);

        if (_currencyCodeTranslate != currentCurrencyCodeTranslate)
        {
            currentCurrencyCodeTranslate = _currencyCodeTranslate;

            this.writeCurrentValues();
        }

        return currentCurrencyCodeTranslate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeCurrentValues</Name>
				<Source><![CDATA[
        protected void writeCurrentValues()
    {
        int         cx;

        ;

        currentValue = conNull();

        for (cx = 1; cx <= #conSize; cx++)
        {
            switch (cx)
            {
                case #posCurencyCode :
                    currentValue += currentCurrencyCode;
                    break;

                case #posAmountCur :
                    currentValue += currentAmountCur;
                    break;

                case #posAmountMST :
                    currentValue += currentAmountMST;
                    break;

                case #posCurrencyCodeTranslate :
                    currentValue += currentCurrencyCodeTranslate;
                    break;

                case #posCurrentAmountCurTranslate :
                    currentValue += currentAmountCurTranslate;
                    break;

                default :
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        if (map.exists(currentRecID))
        {
            map.remove(currentRecID);
        }

        map.insert(currentRecID, currentValue);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>