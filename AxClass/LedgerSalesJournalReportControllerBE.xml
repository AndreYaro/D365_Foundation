<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerSalesJournalReportControllerBE</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerSalesJournalReportControllerBE extends SrsReportRunController implements BatchRetryable
{
    private const str FeatureReference = 'BE-00024';
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPageNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the page number.
    /// </summary>
    /// <param name="_finalReporting">
    /// A Boolean value that indicates whether the reporting is final.
    /// </param>
    /// <param name="_ledgerPostingJournalId">
    /// A ledger posting journal ID.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <returns>
    /// The page number.
    /// </returns>
    public int calcPageNum(boolean _finalReporting, LedgerPostingJournalId _ledgerPostingJournalId, FromDate _fromDate)
    {
        LedgerJournalPeriodFinalPrintBE journalPeriodFinalPrintBe = null;
        int                             pageNum;

        pageNum = 1;
        if (_finalReporting)
        {
            journalPeriodFinalPrintBe = LedgerJournalPeriodFinalPrintBE::findPrev(_ledgerPostingJournalId, _fromDate-1, false);

            if (journalPeriodFinalPrintBe)
            {
                pageNum  = journalPeriodFinalPrintBe.NumberLastPage + 1;
            }
        }
        return pageNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the ability to change the report contract before the report is executed.
    /// </summary>
    protected void preRunModifyContract()
    {
        LedgerSalesJournalReportContractBE  contract;
        CompanyInfo                         companyInfo = CompanyInfo::find();
        #define.coRegNumDigits('0123456789')

        super();
        contract = this.parmReportContract().parmRdpContract() as LedgerSalesJournalReportContractBE;

        contract.parmEnterpriseNum(companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, contract.parmToDate()));
        contract.parmVatNum( strIns(strIns(strKeep(companyInfo.CoRegNum, #coRegNumDigits),'.',5),'.',9));
        contract.parmReportType("@SYS79657");
        contract.parmPageNum(this.calcPageNum(  contract.parmFinalReporting(),
                                                contract.parmSalesLedgerPostingJournalId(),
                                                contract.parmFromDate()));

        //register event here to overcome the issue with missing registered
        //events in controller objects on client/server sides
        this.renderingCompleted += eventhandler(LedgerSalesJournalReportControllerBE::renderingComplete);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalPeriodFinalPrint</Name>
				<Source><![CDATA[
        public void updateJournalPeriodFinalPrint(LedgerSalesJournalReportContractBE contract, PageNo lastPageNumber)
    {
        LedgerJournalPeriodFinalPrintBE journalPeriodFinalPrintBe;

        ttsbegin;
        journalPeriodFinalPrintBe = LedgerJournalPeriodFinalPrintBE::findByJournalIdPeriod(contract.parmSalesLedgerPostingJournalId(),
                                                                    contract.parmFromDate(),
                                                                    contract.parmToDate(),
                                                                    true);
        if (journalPeriodFinalPrintBe)
        {
            journalPeriodFinalPrintBe.NumberLastPage = lastPageNumber;
            journalPeriodFinalPrintBe.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the parameters and executes the report.
    /// </summary>
    /// <param name="_controller">The <c>LedgerSalesJournalReportController_BE</c> object.</param>
    public static void execute(LedgerSalesJournalReportControllerBE _controller)
    {
        _controller.parmReportName(ssrsReportStr(LedgerSalesJournalReportBE, Report));
        _controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        LedgerSalesJournalReportControllerBE controller = new LedgerSalesJournalReportControllerBE();
        controller.parmArgs(_args);
        LedgerSalesJournalReportControllerBE::execute(controller);
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderingComplete</Name>
				<Source><![CDATA[
        public static void renderingComplete(SrsReportRunController _sender, SrsRenderingCompletedEventArgs _eventArgs)
    {
        SRSReportExecutionInfo  executionInfo           = _eventArgs.parmReportExecutionInfo();
        LedgerSalesJournalReportControllerBE controller = _sender;
        LedgerSalesJournalReportContractBE contract     = _sender.parmReportContract().parmRdpContract();

        if (executionInfo && executionInfo.parmIsSuccessful())
        {
            controller.updateJournalPeriodFinalPrint(contract, executionInfo.parmPrintedPhysicalPages());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>