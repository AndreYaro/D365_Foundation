<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOutPaym_Cheque_Payroll</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>VendOutPaym_Cheque_Payroll</c> class extends the <c>VendOutPaym_Cheque</c> class for payroll.
/// </summary>
class VendOutPaym_Cheque_Payroll extends VendOutPaym_Cheque
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    void close()
    {
        if (!custVendCheque.tmpChequePrintout().ChequeNum)
        {
            return;
        }

        this.printDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    Object dialog()
    {
        DialogRunbase  dialog = new DialogRunbase(this.interfaceName(), this);

        if (chequeNumMethod == ChequeNumMethod::Fixed)
        {
            firstChequeNum = 0;
        }

        custVendCheque.parmAccountId            (accountId);
        custVendCheque.parmFirstChequeNum       (firstChequeNum);
        custVendCheque.parmNumOfBlankCheque     (numOfBlankCheque);
        custVendCheque.parmChequeNumMethod      (chequeNumMethod);
        custVendCheque.parmLedgerJournalACType  (LedgerJournalACType::Vend);

        custVendCheque.initChequeNumEx(false);

        startChequeNum = int2str(custVendCheque.parmFirstChequeNum());
        dialogAccountId         = dialog.addFieldValue(extendedTypeStr(CompanyBankAccountId), accountId);
        dialogAccountId.allowEdit(false);

        dialogLookupChequeNum   = dialog.addFieldValue(extendedTypeStr(BankCheckNumCreated), startChequeNum,"@SYS4083");

        if (BankParameters::find().AllowCheckReuse == NoYes::Yes)
        {
            dialogLookupChequeNum.allowEdit(true);
        }
        else
        {
            dialogLookupChequeNum.allowEdit(chequeNumMethod == ChequeNumMethod::Free);
        }

        this.dialogAddPrintOption(PaymDocumentType::Document, dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostInit</Name>
				<Source><![CDATA[
    protected DialogRunbase dialogPostInit(DialogRunbase _dialog)
    {
        DialogRunbase ret;

        ret = super(_dialog);

        this.updateQuery();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        //
        // This method is overridden and left blank to avoid execution of the base class method
        // which is not required for this functionality.
        //
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates the payment lines.
    /// </summary>
    void generatePaymentLines()
    {
        #OCCRetryCount
        LedgerJournalTrans ledgerJournalTrans;
        VendOutPaymRecord_Cheque vendOutPaymRecord;
        PayrollPayStatement payStatement;
        HcmWorker hcmWorker;
        CustVendCheque_Payroll custVendCheque_Payroll;
        Counter reportDataRowCounter = 1;
        Map numberOfLinesToProcesseForPayStatement;
        RecId payStatementRecId;
        LedgerJournalTransPayrollDisbursement ledgerJournalTransPayrollDisbursement;

        try
        {
            numberOfLinesToProcesseForPayStatement = new Map(Types::Int64, Types::Integer);

            ttsbegin;

            setPrefix("@SYS17561");

            queryRun.reset();
            this.updateQuery();

            while (queryRun.next())
            {
                ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));

                if (!this.isOffsetAccountValid(ledgerJournalTrans))
                {
                    continue;
                }

                vendOutPaymRecord = CustVendOutPaymRecord::construct(ledgerJournalTrans.PaymMode,
                                                                     ledgerJournalTrans.PaymSpec,
                                                                     this,
                                                                     this.vendPaym(ledgerJournalTrans));

                if (vendOutPaymRecord.checkValues(ledgerJournalTrans, this.parmProgress()))
                {
                    if (!(ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank &&
                          ledgerJournalTrans.BankChequeNum))
                    {
                        if (custVendCheque.checkDataOk(ledgerJournalTrans))
                        {
                            custVendCheque.processChequeNum(ledgerJournalTrans);
                            vendOutPaymRecord.parmCustVendCheque(custVendCheque);

                            hcmWorker = queryRun.get(tableNum(HcmWorker));
                            payStatement = queryRun.get(tableNum(PayrollPayStatement));
                            custVendCheque_Payroll = custVendCheque;
                            custVendCheque_Payroll.parmHcmWorker(hcmWorker);
                            custVendCheque_Payroll.parmPayrollPayStatement(payStatement);
                            custVendCheque_Payroll.parmReportDataRowCounter(reportDataRowCounter);
                            vendOutPaymRecord.output();

                            if (ledgerJournalTrans.PaymReference ||
                                ledgerJournalTrans.BankChequeNum)
                            {
                                ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::Sent;
                                ledgerJournalTrans.update();

                                payStatementRecId = payStatement.RecId;

                                // Keep track of how many lines of the <c>LedgerJournalTransPayrollDisbursement</c> records out of the total available records
                                // for each <c>PayrollPayStatement</c> record have been processed.
                                if (numberOfLinesToProcesseForPayStatement.exists(payStatementRecId))
                                {
                                    numberOfLinesToProcesseForPayStatement.insert(payStatementRecId, numberOfLinesToProcesseForPayStatement.lookup(payStatementRecId) - 1);
                                }
                                else
                                {
                                    select COUNT(RecId) from ledgerJournalTransPayrollDisbursement
                                            where ledgerJournalTransPayrollDisbursement.PayStatement == payStatementRecId
                                                  && ledgerJournalTransPayrollDisbursement.IsNewPaymentIssued == NoYes::No;

                                    numberOfLinesToProcesseForPayStatement.insert(payStatementRecId, ledgerJournalTransPayrollDisbursement.RecId - 1);
                                }

                                // If all the lines for the <c>PayrollPayStatement</c> record have been processed, then update the status.
                                if (numberOfLinesToProcesseForPayStatement.lookup(payStatementRecId) == 0)
                                {
                                    // update the PayrollPayStatement.PaymentStatus
                                    payStatement.PaymentStatus = PayrollPaymentStatus::PaymentIssued;
                                    payStatement.update();
                                }

                                // increment counter
                                reportDataRowCounter++;
                            }
                        }
                    }
                    else
                    {
                        throw error("@SYS18447");
                    }
                }
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        accountId           = dialogAccountId.value();
        chequeNumMethod     = BankChequeLayout::find(accountId).ChequeNumMethod;
        startChequeNum      = dialogLookupChequeNum.value();
        firstChequeNum      = str2int(startChequeNum);

        custVendCheque.parmAccountId        (accountId);
        custVendCheque.parmFirstChequeNum   (firstChequeNum);
        custVendCheque.parmNumOfBlankCheque (numOfBlankCheque);
        custVendCheque.parmChequeNumMethod  (chequeNumMethod);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    public PaymInterfaceName interfaceName()
    {
        return "@Payroll:PayrollCheckPayment";
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        custVendCheque = new CustVendCheque_Payroll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Runs the print dialog to print the document.
    /// </summary>
    public void printDocument()
    {
        PayrollBankChequePrint  PayrollbankChequePrint;
        Args                    args;
        CustVendCheque_Payroll  custVendCheque_Payroll;

        if (custVendCheque.tmpChequePrintout())
        {
            custVendCheque_Payroll = custVendCheque;
            PayrollbankChequePrint = PayrollBankChequePrint::construct(custVendCheque_Payroll.getPayrollTmpChequePrintout(),
                                                         this.getPrinterSettings(PaymDocumentType::Document),
                                                         custVendCheque);

            if (LedgerJournalTable::find(this.parmLedgerJournalId()).JournalType == LedgerJournalType::PayrollDisbursement)
            {
                PayrollbankChequePrint.parmCustVendCheque(custVendCheque);
                args = new Args();
                args.caller(PayrollbankChequePrint);
                new MenuFunction(MenuItemOutputStr(PayrollWorkerPayCheck), MenuItemType::Output).run(args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendPaym</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a payroll disbursement <c>VendPaym</c> object from a <c>LedgerJournalTran</c> object.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///     A <c>LedgerJournalTrans</c> used to create a payroll disbursement.
    /// </param>
    /// <returns>
    ///     A <c>VendPaym</c> record.
    /// </returns>

    VendPaym vendPaym(LedgerJournalTrans _ledgerJournalTrans)
    {
        VendPaym    vendPaym;
        LedgerJournalTransPayrollDisbursement   payrollDisbursement;
        HcmWorker               worker;
        DirPartyTable           party;

        vendPaym = this.vendPaymPayroll(_ledgerJournalTrans);

        payrollDisbursement = queryRun.get(tableNum(LedgerJournalTransPayrollDisbursement));
        if (payrollDisbursement)
        {
            // get worker info from the query
            worker = queryRun.get(tableNum(HcmWorker));
            party = queryRun.get(tableNum(DirPartyTable));

            vendPaym.sendersIdentificationOfReciever(worker.PersonnelNumber);
            vendPaym.recieversCompanyName           (party.Name);
        }

        return vendPaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return new VendOutPaym_Cheque_Payroll().interfaceName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public ConfigurationKeyId configurationKey()
    {
        return configurationKeyNum(PayrollAdministration);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables applying payment mode specific criteria on the <c>QueryRun</c> class object supplied to
    /// the class.
    /// </summary>
    /// <remarks>
    ///  For payroll check generation,  only journal lines with check payment method will be selected.
    /// </remarks>
    protected void updateQuery()
    {
        QueryBuildRange queryBuildRange;

        queryBuildRange = queryRun.query().dataSourceTable(tablenum(LedgerJournalTrans)).findRange(fieldnum(LedgerJournalTrans,PaymMode));

        if (queryBuildRange)
        {
            queryBuildRange.value(queryValue(paymMode));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>