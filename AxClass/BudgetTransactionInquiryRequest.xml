<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetTransactionInquiryRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetTransactionInquiryRequest</c> class is used to collect the information that is required
///    to inquire on the budget transactions.
/// </summary>
public class BudgetTransactionInquiryRequest
{
    LedgerRecId                primaryLedgerId;
    BudgetModelId              budgetModelId;
    boolean                    includeSubModels;
    BudgetTransferSourceNumber transferSourceNumber;
    BudgetTransactionType      transactionType;
    AllDraftCompleted          transactionStatus;

    LedgerDimensionBase        ledgerDimension;
    Map                        dimensionAttributeValueSet;

    TransDate                  startDate;
    TransDate                  endDate;

    DimensionCombinationNameTmp dimensionCombinationNameTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addHeaderRangesToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the <c>BudgetTransactionHeader</c> record query ranges to the specified query.
    /// </summary>
    /// <param name="_query">
    ///    The query for which to add the ranges.
    /// </param>
    public void addHeaderRangesToQuery(Query _query)
    {
        QueryBuildDataSource budgetTransactionHeaderDS;

        budgetTransactionHeaderDS = _query.dataSourceTable(tableNum(BudgetTransactionHeader));

        if (budgetTransactionHeaderDS)
        {
            // Restrict the headers to the requested values.

            budgetTransactionHeaderDS.clearRange(fieldNum(BudgetTransactionHeader, BudgetModelId));
            QueryBuildRange budgetModelIdQBR = budgetTransactionHeaderDS.addRange(fieldNum(BudgetTransactionHeader, BudgetModelId));
            budgetModelIdQBR.status(RangeStatus::Locked);

            if (this.parmBudgetModelId())
            {
                if (this.parmIncludeSubModels())
                {
                    str budgetModelValue = BudgetTransactionManager::getAllSubModelsForQueryRange(this.parmBudgetModelId());
                    budgetModelIdQBR.value(budgetModelValue);
                }
                else
                {
                    budgetModelIdQBR.value(SysQuery::value(this.parmBudgetModelId()));
                }
            }

            budgetTransactionHeaderDS.clearRange(fieldNum(BudgetTransactionHeader, TransferSourceNumber));
            QueryBuildRange transferSourceNumberQBR = budgetTransactionHeaderDS.addRange(fieldNum(BudgetTransactionHeader, TransferSourceNumber));
            transferSourceNumberQBR.status(RangeStatus::Locked);

            if (this.parmTransferSourceNumber())
            {
                transferSourceNumberQBR.value(SysQuery::value(this.parmTransferSourceNumber()));
            }

            budgetTransactionHeaderDS.clearRange(fieldNum(BudgetTransactionHeader, BudgetTransactionType));
            QueryBuildRange budgetTransactionTypeQBR = budgetTransactionHeaderDS.addRange(fieldNum(BudgetTransactionHeader, BudgetTransactionType));
            budgetTransactionTypeQBR.status(RangeStatus::Locked);

            if (this.parmTransactionType())
            {
                budgetTransactionTypeQBR.value(SysQuery::value(enum2int(this.parmTransactionType())));
            }

            budgetTransactionHeaderDS.clearRange(fieldNum(BudgetTransactionHeader, TransactionStatus));
            QueryBuildRange transactionStatusQBR = budgetTransactionHeaderDS.addRange(fieldNum(BudgetTransactionHeader, TransactionStatus));
            transactionStatusQBR.status(RangeStatus::Locked);

            // If allDraftCompleted.selection() == All, clearing the range is enough.
            switch (this.parmTransactionStatus())
            {
                case AllDraftCompleted::Completed:
                    transactionStatusQBR.value(int2str(enum2int(BudgetTransactionStatus::Completed)));
                    break;

                case AllDraftCompleted::Draft:
                    transactionStatusQBR.value(int2str(enum2int(BudgetTransactionStatus::Draft)));
                    break;
            }

            if (this.parmPrimaryLedgerId())
            {
                // Filter the budget transactions based on the specified primary ledger.
                BudgetTransactionManager::addPrimaryLedgerRangeToQuery(_query, this.parmPrimaryLedgerId());
            }
            else
            {
                // Filter the budget transactions based on the current legal entity.
                BudgetTransactionManager::addPrimaryLedgerRangeToQuery(_query);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLineRangesToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the <c>BudgetTransactionLine</c> record query ranges to the specified query.
    /// </summary>
    /// <param name="_query">
    ///    The query for which to add the ranges.
    /// </param>
    public void addLineRangesToQuery(Query _query)
    {
        QueryBuildDataSource    budgetTransactionLineDS;
        DimensionProvider       dimensionProvider;

        budgetTransactionLineDS = _query.dataSourceTable(tableNum(BudgetTransactionLine));

        if (budgetTransactionLineDS)
        {
            // Restrict the lines to the requested values.
            dimensionProvider = new DimensionProvider();
            dimensionProvider.clearDimensionFiltersFromQuery(_query);

            this.addLineDateRangeToQuery(_query);

            if (this.parmLedgerDimension())
            {
                BudgetTransactionManager::addDimensionCriteriaForLedgerDimension(
                    _query,
                    this.parmLedgerDimension(),
                    budgetTransactionLineDS.name());
            }

            if (this.parmDimensionAttributeValueSet())
            {
                BudgetTransactionManager::addDimensionCriteriaForAttributeValueSet(
                    _query,
                    this.parmDimensionAttributeValueSet(),
                    budgetTransactionLineDS.name());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLineDateRangeToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the <c>BudgetTransactionLine</c> record date query range to the specified query.
    /// </summary>
    /// <param name="_query">
    ///    The query for which to add the range.
    /// </param>
    public void addLineDateRangeToQuery(Query _query)
    {
        QueryBuildDataSource    budgetTransactionLineDS;

        budgetTransactionLineDS = _query.dataSourceTable(tableNum(BudgetTransactionLine));

        if (budgetTransactionLineDS)
        {
            budgetTransactionLineDS.clearRange(fieldNum(BudgetTransactionLine, Date));
            QueryBuildRange dateQBR = budgetTransactionLineDS.addRange(fieldNum(BudgetTransactionLine, Date));
            dateQBR.status(RangeStatus::Locked);

            if (this.parmStartDate() || this.parmEndDate())
            {
                dateQBR.value(SysQuery::range(this.parmStartDate(), this.parmEndDate()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangesToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the query ranges to the specified query.
    /// </summary>
    /// <param name="_query">
    ///    The query for which to add the ranges.
    /// </param>
    public void addRangesToQuery(Query _query)
    {
        this.addHeaderRangesToQuery(_query);
        this.addLineRangesToQuery(_query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimensionCombinationNameTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>DimensionCombinationNameTmp</c> table with ledger dimension descriptions from budget transaction
    /// line entries.
    /// </summary>
    /// <returns>
    /// An instance of <c>DimensionCombinationNameTmp</c> table.
    /// </returns>
    public DimensionCombinationNameTmp populateDimensionCombinationNameTmp()
    {
        // Mirror the form query structure.
        Query budgetQuery = new Query();
        QueryBuildDataSource budgetTransactionHeaderDS = budgetQuery.addDataSource(tableNum(BudgetTransactionHeader));

        QueryBuildDataSource budgetTransactionLineDS =
            budgetTransactionHeaderDS.addDataSource(tableNum(BudgetTransactionLine));
        budgetTransactionLineDS.addLink(
            fieldNum(BudgetTransactionHeader, RecId), fieldNum(BudgetTransactionLine, BudgetTransactionHeader));

        this.addRangesToQuery(budgetQuery);

        // Add not exists data source for already calculated dimension combination names.
        QueryBuildDataSource dimensionCombinationNameTmpDS =
            budgetTransactionLineDS.addDataSource(tableNum(DimensionCombinationNameTmp));
        dimensionCombinationNameTmpDS.joinMode(JoinMode::NoExistsJoin);
        dimensionCombinationNameTmpDS.fetchMode(QueryFetchMode::One2One);
        dimensionCombinationNameTmpDS.addLink(fieldNum(BudgetTransactionLine, LedgerDimension),
            fieldNum(DimensionCombinationNameTmp, DimensionAttributeValueCombination));

        // Add mapping from the LedgerDimension field to the resulting temp table field.
        budgetQuery.clearAllFields();
        budgetQuery.clearGroupBy();
        budgetTransactionLineDS.addGroupByField(fieldNum(BudgetTransactionLine, LedgerDimension));
        budgetTransactionLineDS.addSelectionField(fieldNum(BudgetTransactionLine, LedgerDimension));
        Map insertRecordsetMap = new Map(Types::String, Types::Container);
        insertRecordsetMap.insert(
            fieldStr(DimensionCombinationNameTmp, DimensionAttributeValueCombination),
            [budgetTransactionLineDS.uniqueId(), fieldStr(BudgetTransactionLine, LedgerDimension)]);

        // Associate the dimensionCombinationNameTmp data source with the DimensionCombinationNameTmp data source in the query.
        // Note that this association is stored in the query, and not the QueryRun, so this impacts the following
        // Query::insert_recordset call.
        QueryRun queryRun = new QueryRun(budgetQuery);
        queryRun.setRecord(dimensionCombinationNameTmp);
        budgetQuery = queryRun.query();

        // Get the list of unique new combinations.
        DimensionCombinationNameTmp dimensionCombinationNameTmpToFill;
        Query::insert_recordset(dimensionCombinationNameTmpToFill, insertRecordsetMap, budgetQuery);

        // Get the name for each unique new combination.
        DimensionCombinationNameTmp::getDimensionCombinationNames(dimensionCombinationNameTmpToFill);

        // Merge the new values into the original list.
        // Insert the values using a new linked instance of the DimensionCombinationNameTmp table
        // to prevent the data source association that would otherwise revert the operation to row-by-row.
        DimensionCombinationNameTmp dimensionCombinationNameTmpForInsert;
        dimensionCombinationNameTmpForInsert.linkPhysicalTableInstance(dimensionCombinationNameTmp);
        insert_recordset dimensionCombinationNameTmpForInsert (DimensionAttributeValueCombination, Name)
            select DimensionAttributeValueCombination, Name
            from dimensionCombinationNameTmpToFill;

        return dimensionCombinationNameTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>BudgetTransactionInquiryRequest</c> class.
    /// </summary>
    /// <param name="_common">
    ///    The record from which to initialize.
    /// </param>
    public void initialize(Common _common)
    {
        BudgetTransactionLine budgetTransactionLine;

        if (_common &&
            _common.TableId == tableNum(BudgetTransactionLine))
        {
            budgetTransactionLine = _common as BudgetTransactionLine;

            this.parmLedgerDimension(budgetTransactionLine.LedgerDimension);
        }
        else
        {
            this.parmLedgerDimension(0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransactionCodeVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the transaction code is visible in the inquiry.
    /// </summary>
    /// <returns>
    /// A Boolean value that indicates whether the transaction code is visible. true if the transaction
    /// code is visible; otherwise, false.
    /// </returns>
    public boolean isTransactionCodeVisible()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransferSourceNumberVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the transfer source number is visible in the inquiry.
    /// </summary>
    /// <returns>
    /// true if the source number is visible in the inquiry; otherwise, false.
    /// </returns>
    public boolean isTransferSourceNumberVisible()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetModelId</Name>
				<Source><![CDATA[
    public BudgetModelId parmBudgetModelId(BudgetModelId _budgetModelId = budgetModelId)
    {
        budgetModelId = _budgetModelId;

        return budgetModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferSourceNumber</Name>
				<Source><![CDATA[
    public BudgetTransferSourceNumber parmTransferSourceNumber(BudgetTransferSourceNumber _transferSourceNumber = transferSourceNumber)
    {
        transferSourceNumber = _transferSourceNumber;

        return transferSourceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionAttributeValueSet</Name>
				<Source><![CDATA[
    public Map parmDimensionAttributeValueSet(Map _dimensionAttributeValueSet = dimensionAttributeValueSet)
    {
        dimensionAttributeValueSet = _dimensionAttributeValueSet;

        return dimensionAttributeValueSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    public TransDate parmEndDate(TransDate _endDate = endDate)
    {
        endDate = _endDate;

        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeSubModels</Name>
				<Source><![CDATA[
    public boolean parmIncludeSubModels(boolean _includeSubModels = includeSubModels)
    {
        includeSubModels = _includeSubModels;

        return includeSubModels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionBase parmLedgerDimension(LedgerDimensionBase _ledgerDimension = ledgerDimension)
    {
        ledgerDimension = _ledgerDimension;

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrimaryLedgerId</Name>
				<Source><![CDATA[
    public LedgerRecId parmPrimaryLedgerId(LedgerRecId _primaryLedgerId = primaryLedgerId)
    {
        primaryLedgerId = _primaryLedgerId;

        return primaryLedgerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    public TransDate parmStartDate(TransDate _startDate = startDate)
    {
        startDate = _startDate;

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionStatus</Name>
				<Source><![CDATA[
    public AllDraftCompleted parmTransactionStatus(AllDraftCompleted _transactionStatus = transactionStatus)
    {
        transactionStatus = _transactionStatus;

        return transactionStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionType</Name>
				<Source><![CDATA[
    public BudgetTransactionType parmTransactionType(BudgetTransactionType _transactionType = transactionType)
    {
        transactionType = _transactionType;

        return transactionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>BudgetTransactionInquiryRequest</c> class.
    /// </summary>
    /// <param name="_common">
    /// The record from which to construct the instance; optional.
    /// </param>
    /// <returns>
    /// An instance of the <c>BudgetTransactionInquiryRequest</c> class.
    /// </returns>
    public static BudgetTransactionInquiryRequest construct(Common _common = null)
    {
        BudgetTransactionInquiryRequest transactionInquiryRequest;

        switch (_common.TableId)
        {
            case tablenum(LedgerConsolidateHist):
                transactionInquiryRequest = BudgetTransactionInquiryRequestConsHist::construct(_common);
                break;

            case tablenum(LedgerCov):
                transactionInquiryRequest = BudgetTransactionInquiryRequestLedgerCov::construct(_common);
                break;

            default:
                transactionInquiryRequest = new BudgetTransactionInquiryRequest();
                transactionInquiryRequest.initialize(_common);
                break;
        }

        return transactionInquiryRequest;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>