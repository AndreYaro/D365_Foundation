<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchaseOrderResponseConfirmServiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchaseOrderResponseConfirmServiceController</c> class is a controller for purchase order response confirmation service.
/// </summary>
public class PurchaseOrderResponseConfirmServiceController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>Query</c> object that fetches accepted, non-archived purchased orders versions with document status InExternalReview
    /// </summary>
    /// <returns>
    /// A <c>Query</c> object
    /// </returns>   
    private Query buildQuery()
    {
        Query query = new Query();

        QueryBuildDataSource purchTableDS = query.addDataSource(tablenum(PurchTable));
        purchTableDS.addRange(fieldNum(PurchTable, DocumentState)).value(queryValue(VersioningDocumentState::InExternalReview));
    
        QueryBuildDataSource purchaseOrderResponseHeaderDS = purchTableDS.addDataSource(tablenum(PurchaseOrderResponseHeader));
        purchaseOrderResponseHeaderDS.addLink(fieldNum(PurchTable, PurchId), fieldNum(PurchaseOrderResponseHeader, PurchId));

        QueryBuildDataSource purchaseOrderResponseVersionDS = purchaseOrderResponseHeaderDS.addDataSource(tableNum(PurchaseOrderResponseVersion));
        purchaseOrderResponseVersionDS.addLink(fieldNum(PurchaseOrderResponseHeader, RecId), fieldNum(PurchaseOrderResponseVersion, PurchaseOrderResponseHeader));
        purchaseOrderResponseVersionDS.addRange(fieldnum(PurchaseOrderResponseVersion, ResponseState)).value(queryValue(PurchaseOrderResponseState::Confirmed));        // Accepted by a vendor
        purchaseOrderResponseVersionDS.addRange(fieldNum(PurchaseOrderResponseVersion, IsArchived)).value(queryValue(NoYes::No));
    
        purchaseOrderResponseVersionDS.addOrderByField(fieldNum(PurchaseOrderResponseVersion, VersionDateTime), SortOrder::Descending);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAcceptedPurchaseOrdersInExternalReview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes accepted, non-archived purchase orders, transitioning their document status from InExternalReview -> Confirmed
    /// </summary>
    public void processAcceptedPurchaseOrdersInExternalReview()
    {
        QueryRun queryRun = new QueryRun(this.buildQuery());

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(PurchTable)))
            {
                PurchaseOrderResponseVersion purchTableResponseVersion = queryRun.get(tableNum(PurchaseOrderResponseVersion));
                this.confirmAcceptedPurchaseOrder(purchTableResponseVersion);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmAcceptedPurchaseOrder</Name>
				<Source><![CDATA[
    private void confirmAcceptedPurchaseOrder(PurchaseOrderResponseVersion _purchaseOrderResponseVersion)
    {
        PurchaseOrderResponseContract contract = new PurchaseOrderResponseContract();

        contract.parmPurchaseOrderResponseNote(_purchaseOrderResponseVersion.ResponseNote);
        contract.parmPurchaseOrderResponseState(PurchaseOrderResponseState::Confirmed);
        contract.parmResponseVersionRecId(_purchaseOrderResponseVersion.RecId);

        PurchaseOrderResponseService service = PurchaseOrderResponseService::newFromContract(contract);
        
        if (service.shouldPurchaseOrderBeAutoConfirmed())
        {
            service.confirmPurchaseOrder();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {       
        PurchaseOrderResponseConfirmServiceController controller = PurchaseOrderResponseConfirmServiceController::construct(args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>PurchaseOrderResponseConfirmServiceController</c> class.
    /// </summary>
    /// <param name="_args">
    ///    The arguments of the <c>PurchaseOrderResponseConfirmServiceController</c> class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>PurchaseOrderResponseConfirmServiceController</c> class.
    /// </returns>
    public static PurchaseOrderResponseConfirmServiceController construct(Args _args)
    {
        PurchaseOrderResponseConfirmServiceController controller;
        IdentifierName                                className;
        IdentifierName                                methodName;
        SysOperationExecutionMode                     executionMode;

        [className, methodName, executionMode] = SysOperationServiceController::parseServiceInfo(_args);

        controller = new PurchaseOrderResponseConfirmServiceController(className, methodName, executionMode);
        controller.parmArgs(_args);
        controller.parmLoadFromSysLastValue(false);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>