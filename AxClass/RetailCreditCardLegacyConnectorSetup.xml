<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCreditCardLegacyConnectorSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailCreditCardLegacyConnectorSetup</c> class provides functionalities used to process and display legacy connector properties.
/// </summary>
using Retail=Microsoft.Dynamics.Retail;
public class RetailCreditCardLegacyConnectorSetup extends CreditCardConnectorSetup
{
    const str legacyControlName = 'legacyConnectorPropertyUIControl'; // control name prefix for rendering properties of the legacy connectors on the UI.

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadConnectorDLLs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the connector dlls deployed in the system.
    /// </summary>
    protected void loadConnectorDLLs()
    {
        // overriden to do nothing as there are no dlls to be loaded for legacy connectors.
    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the prefix used for naming the auto generated UI controls that are used to render the connector properties on the UI.
    /// </summary>
    /// <returns>The control name prefix.</returns>
    protected str getControlName()
    {
        return legacyControlName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetSupportedConnectors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of supported connector names available in the system.
    /// </summary>
    /// <returns>A collection of connector names.</returns>
    protected System.String[] GetSupportedConnectors()
    {
        // retrieve the legacy connectors from the RetailPaymentConnectors table.
        // metadata of all legacy connectors that were supported in AX2012 are stored in this table.
        container connectorNames = RetailPaymentConnectors::GetSupportedConnectorNames();

        int connectorCount = conLen(connectorNames);
        System.String[] suppportedConnectorNames = new System.String[connectorCount]();

        for (var i = 1; i <= connectorCount; i++)
        {
            suppportedConnectorNames.set_Item(i - 1, conPeek(connectorNames, i));
        }

        return suppportedConnectorNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the properties associated with a given connector.
    /// </summary>
    /// <param name="_name">The connector name.</param>
    /// <returns>An array of payment properties.</returns>
    protected Retail.PaymentSDK.Portable.PaymentProperty[] getProperties(CreditCardConnectorName _name)
    {
        return RetailPaymentConnectors::getPaymentPropertyMetadata(_name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConnectorsDirectory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the directory where the connector dlls are stored at.
    /// </summary>
    /// <returns>The connector install directory name.</returns>
    public static str getConnectorsDirectory()
    {
        return ''; // legacy connector dlls are not stored/installed in the new system, hence overriding this to make sure it doesn't return the install path of the new connecotrs.
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>RetailCreditCardLegacyConnectorSetup</c> class.
    /// </summary>
    /// <returns>The <c>CreditCardConnectorSetup</c> object.</returns>
    public static CreditCardConnectorSetup construct()
    {
        var setup = new RetailCreditCardLegacyConnectorSetup();

        setup.init();

        return setup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>