<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanOverviewQueryBuilderMaterial</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanOverviewQueryBuilderMaterial</c> class is an AIF Query Builder class for the kanban
///    quantity overview material goods control.
/// </summary>
public class KanbanOverviewQueryBuilderMaterial extends KanbanOverviewQueryBuilderCell
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the query to fetch the products for the material goods overview control.
    /// </summary>
    public void initialize()
    {
        LegalEntity             legalEntity              = this.legalEntity();
        RefRecId                wrkCtrResourceGroupRecId = this.wrkCtrResourceGroupRecId();
        str                     activeDateTime           = DateTimeUtil::toStr(this.getArgs().parmActiveDateTime());

        query = this.buildItemRelationQueryBase();

        QueryBuildDataSource qbdsKanbanRule = query.dataSourceTable(tablenum(KanbanRule));
        qbdsKanbanRule.fields().addField(fieldnum(KanbanRule, KanbanFlow));

        QueryBuildDataSource qbdsLeanCoverageKanbanRule = query.dataSourceTable(tablenum(LeanCoverageKanbanRule));

        // Kanban flow
        QueryBuildDataSource qbdsKanbanFlow = qbdsKanbanRule.addDataSource(tablenum(KanbanFlow));
        qbdsKanbanFlow.fields().clearFieldList();
        qbdsKanbanFlow.fields().addField(fieldnum(KanbanFlow, RecId));
        qbdsKanbanFlow.fields().addField(fieldnum(KanbanFlow, LastPlanPlanActivity));

        qbdsKanbanFlow.fetchMode(QueryFetchMode::One2One);
        qbdsKanbanFlow.joinMode(JoinMode::InnerJoin);
        qbdsKanbanFlow.addLink(fieldnum(KanbanRule, KanbanFlow), fieldnum(KanbanFlow, RecId));

        // Plan Plan Activity
        QueryBuildDataSource qbdsPlanPlanActivity = qbdsKanbanFlow.addDataSource(tablenum(PlanPlanActivity));
        qbdsPlanPlanActivity.fields().clearFieldList();
        qbdsPlanPlanActivity.fields().addField(fieldnum(PlanPlanActivity, RecId));
        qbdsPlanPlanActivity.fields().addField(fieldnum(PlanPlanActivity, PlanActivity));

        qbdsPlanPlanActivity.fetchMode(QueryFetchMode::One2One);
        qbdsPlanPlanActivity.joinMode(JoinMode::InnerJoin);
        qbdsPlanPlanActivity.addLink(fieldnum(KanbanFlow, LastPlanPlanActivity), fieldnum(PlanPlanActivity, RecId));

        // Material Plan Activity
        QueryBuildDataSource qbdsPlanActivityMaterial = qbdsPlanPlanActivity.addDataSource(tablenum(PlanActivity));
        qbdsPlanActivityMaterial.joinMode(JoinMode::ExistsJoin);
        qbdsPlanActivityMaterial.addLink(fieldnum(PlanPlanActivity, PlanActivity), fieldnum(PlanActivity, RecId));

        // Plan Activity Relationship
        QueryBuildDataSource qbdsPlanActivityRelationship = qbdsPlanActivityMaterial.addDataSource(tablenum(PlanActivityRelationship));
        qbdsPlanActivityRelationship.joinMode(JoinMode::ExistsJoin);
        qbdsPlanActivityRelationship.addLink(fieldnum(PlanActivity, RecId), fieldnum(PlanActivityRelationship, IndependentPlanActivity));

        // Constraint of type sequence
        QueryBuildDataSource qbdsPlanConstraint = qbdsPlanActivityRelationship.addDataSource(tablenum(PlanConstraint));
        qbdsPlanConstraint.joinMode(JoinMode::ExistsJoin);
        qbdsPlanConstraint.addLink(fieldnum(PlanActivityRelationship, Constraint), fieldnum(PlanConstraint, RecId));

        QueryBuildRange queryBuildRange = qbdsPlanConstraint.addRange(fieldnum(PlanConstraint, ConstraintType));
        queryBuildRange.value(SysQuery::value(ConstraintTypes::Sequence));

        // Lean Producton Flow Activity
        QueryBuildDataSource qbdsLeanProductionFlowActivity = qbdsPlanActivityRelationship.addDataSource(tablenum(LeanProductionFlowActivity));
        qbdsLeanProductionFlowActivity.clearDynalinks();
        qbdsLeanProductionFlowActivity.fetchMode(QueryFetchMode::One2One);
        qbdsLeanProductionFlowActivity.joinMode(JoinMode::ExistsJoin);
        qbdsLeanProductionFlowActivity.addLink(fieldnum(PlanActivityRelationship, DependentPlanActivity), fieldnum(LeanProductionFlowActivity, PlanActivity));

        queryBuildRange = qbdsLeanProductionFlowActivity.addRange(fieldnum(LeanProductionFlowActivity, WrkCtrResourceGroup));
        queryBuildRange.value(SysQuery::value(wrkCtrResourceGroupRecId));

        // Kanban Rule inverted (there is no rule that has no minimum alert level and no kanbans jobs)
        QueryBuildDataSource qbdsKanbanRuleInvert = qbdsKanbanRule.addDataSource(tablenum(KanbanRule));
        qbdsKanbanRuleInvert.joinMode(JoinMode::NoExistsJoin);
        qbdsKanbanRuleInvert.addLink(fieldnum(KanbanRule, RecId), fieldnum(KanbanRule, RecId));

        // First criteria - No minimum alert level or rule expired

        // Kanban Rule Inverted (there is no rule that has an alert level but is expired)
        queryBuildRange = qbdsKanbanRuleInvert.addRange(fieldnum(KanbanRule, MinimumAlertLevel));
        queryBuildRange.value(SysQuery::valueNot(0));

        queryBuildRange = qbdsKanbanRuleInvert.addRange(fieldnum(KanbanRule, LegalEntity));
        queryBuildRange.value(SysQuery::value(legalEntity));

        // has not started, or has already ended
        queryBuildRange = qbdsKanbanRuleInvert.addRange(fieldnum(KanbanRule, RecId));
        queryBuildRange.status(RangeStatus::Locked);
        queryBuildRange.value(strfmt('((%1.%2 > %3) || ((%4.%5 < %6) && (%7.%8 != %9)))',
            qbdsLeanCoverageKanbanRule.name(), fieldstr(LeanCoverageKanbanRule, ValidFrom), activeDateTime,
            qbdsLeanCoverageKanbanRule.name(), fieldstr(LeanCoverageKanbanRule, ValidTo), activeDateTime,
            qbdsLeanCoverageKanbanRule.name(), fieldstr(LeanCoverageKanbanRule, ValidTo), KanbanOverviewQueryBuilderCriteria::dateTimeNull2Str()));

        // Kanban Rule Inverted (there is no rule that has no minimum alert level and no kanbans jobs)
        qbdsKanbanRuleInvert = qbdsKanbanRule.addDataSource(tablenum(KanbanRule));
        qbdsKanbanRuleInvert.joinMode(JoinMode::NoExistsJoin);
        qbdsKanbanRuleInvert.addLink(fieldnum(KanbanRule, RecId), fieldnum(KanbanRule, RecId));

        queryBuildRange = qbdsKanbanRuleInvert.addRange(fieldnum(KanbanRule, MinimumAlertLevel));
        queryBuildRange.value(queryValue(0));

        queryBuildRange = qbdsKanbanRuleInvert.addRange(fieldnum(KanbanRule, LegalEntity));
        queryBuildRange.value(SysQuery::value(legalEntity));

        // Second criteria - No jobs

        // Kanban
        QueryBuildDataSource qbdsKanban = qbdsKanbanRuleInvert.addDataSource(tablenum(Kanban));
        qbdsKanban.joinMode(JoinMode::NoExistsJoin);
        qbdsKanban.addLink(fieldnum(KanbanRule, RecId), fieldnum(Kanban, KanbanRule));

        queryBuildRange = qbdsKanban.addRange(fieldnum(Kanban, Status));
        queryBuildRange.value(SysQuery::valueNot(LeanKanbanStatus::Emptied));

        queryBuildRange = qbdsKanban.addRange(fieldnum(Kanban, LegalEntity));
        queryBuildRange.value(SysQuery::value(legalEntity));

        // Initialize query run
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static KanbanOverviewQueryBuilderMaterial construct()
    {
        return new KanbanOverviewQueryBuilderMaterial();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
