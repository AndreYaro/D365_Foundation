<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventTransInvoice
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the cost price for an invoice from the journal.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The transaction originator ID.
    /// </param>
    /// <param name="_invoiceNum">
    ///    The invoice ID.
    /// </param>
    /// <param name="_invoiceDate">
    ///    The date of issue for the invoice.
    /// </param>
    /// <returns>
    ///    The cost price for an invoice.
    /// </returns>
    public static CostAmount costAmount(
        InventTransOriginId     _transOriginId,
        InvoiceId               _invoiceNum,
        TransDate               _invoiceDate)
    {
        InventTrans     inventTrans;

        select sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
             where inventTrans.InventTransOrigin     == _transOriginId
              &&  inventTrans.DateFinancial         == _invoiceDate
              &&  inventTrans.InvoiceId             == _invoiceNum
              &&  inventTrans.Qty                   != 0
              &&  inventTrans.PackingSlipReturned   == 0
              &&  inventTrans.StatusReceipt         <= StatusReceipt::Purchased
              &&  inventTrans.StatusIssue           <= StatusIssue::Sold;

        CostAmount costAmount = CurrencyExchangeHelper::amount(inventTrans.CostAmountPosted + inventTrans.CostAmountAdjustment);

        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyPurchasedWithoutPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the received quantity for an invoice in catch weight unit where the transaction is not associated with a
    ///    packing slip.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The transaction originator ID.
    /// </param>
    /// <param name="_invoiceNum">
    ///    The invoice ID.
    /// </param>
    /// <param name="_invoiceDate">
    ///    The date of issue for the invoice.
    /// </param>
    /// <returns>
    ///    The purchased quantity in catch weight unit.
    /// </returns>
    public static PdsCWInventQty pdsCWQtyPurchasedWithoutPackingSlip(
        InventTransOriginId     _transOriginId,
        InvoiceId               _invoiceNum,
        TransDate               _invoiceDate)
    {
        InventTrans inventTrans;

        select sum(PdsCWQty) from inventTrans
            where inventTrans.InventTransOrigin     == _transOriginId
              &&  inventTrans.DateFinancial         == _invoiceDate
              &&  inventTrans.InvoiceId             == _invoiceNum
              &&  inventTrans.PackingSlipId         == ''
              &&  inventTrans.PdsCWQty              != 0
              &&  inventTrans.PackingSlipReturned   == 0
              &&  inventTrans.StatusReceipt         == StatusReceipt::Purchased
              &&  inventTrans.StatusIssue           == StatusIssue::None;

        return inventTrans.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtySoldWithoutPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the quantity for an invoice in catch weight unit where the transaction is not associated with a packing slip.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The transaction originator ID.
    /// </param>
    /// <param name="_invoiceNum">
    ///    The invoice ID.
    /// </param>
    /// <param name="_invoiceDate">
    ///    The date of issue for the invoice.
    /// </param>
    /// <returns>
    ///    The quantity requested in catch weight unit.
    /// </returns>
    public static PdsCWInventQty pdsCWQtySoldWithoutPackingSlip(
        InventTransOriginId     _transOriginId,
        InvoiceId               _invoiceNum,
        TransDate               _invoiceDate)
    {
        InventTrans inventTrans;

        select sum(PdsCWQty) from inventTrans
            where inventTrans.InventTransOrigin     == _transOriginId
              &&  inventTrans.DateFinancial         == _invoiceDate
              &&  inventTrans.InvoiceId             == _invoiceNum
              &&  inventTrans.PackingSlipId         == ''
              &&  inventTrans.PdsCWQty              != 0
              &&  inventTrans.PackingSlipReturned   == 0
              &&  inventTrans.StatusReceipt         == StatusReceipt::None
              &&  inventTrans.StatusIssue           == StatusIssue::Sold;

        return inventTrans.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPurchased</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the purchased quantity for an invoice from the journal.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The transaction originator ID.
    /// </param>
    /// <param name="_invoiceNum">
    ///    The invoice ID.
    /// </param>
    /// <param name="_invoiceDate">
    ///    The date of issue for the invoice.
    /// </param>
    /// <returns>
    ///    The purchased quantity.
    /// </returns>
    public static InventQty  qtyPurchased(
        InventTransOriginId     _transOriginId,
        InvoiceId               _invoiceNum,
        TransDate               _invoiceDate)
    {
        InventTrans inventTrans;

        select sum(Qty) from inventTrans
            where inventTrans.InventTransOrigin     == _transOriginId
              &&  inventTrans.DateFinancial         == _invoiceDate
              &&  inventTrans.InvoiceId             == _invoiceNum
              &&  inventTrans.Qty                   != 0
              &&  inventTrans.PackingSlipReturned   == 0
              &&  inventTrans.StatusReceipt         == StatusReceipt::Purchased
              &&  inventTrans.StatusIssue           == StatusIssue::None;

        return inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPurchasedWithoutPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the received quantity for an invoice where the transaction is not associated with a
    ///    packing slip.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The transaction originator ID.
    /// </param>
    /// <param name="_invoiceNum">
    ///    The invoice ID.
    /// </param>
    /// <param name="_invoiceDate">
    ///    The date of issue for the invoice.
    /// </param>
    /// <returns>
    ///    The purchased quantity.
    /// </returns>
    public static InventQty  qtyPurchasedWithoutPackingSlip(
        InventTransOriginId     _transOriginId,
        InvoiceId               _invoiceNum,
        TransDate               _invoiceDate)
    {
        InventTrans inventTrans;

        select sum(Qty) from inventTrans
            where inventTrans.InventTransOrigin     == _transOriginId
              &&  inventTrans.DateFinancial         == _invoiceDate
              &&  inventTrans.InvoiceId             == _invoiceNum
              &&  inventTrans.PackingSlipId         == ''
              &&  inventTrans.Qty                   != 0
              &&  inventTrans.PackingSlipReturned   == 0
              &&  inventTrans.StatusReceipt         == StatusReceipt::Purchased
              &&  inventTrans.StatusIssue           == StatusIssue::None;

        return inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtySold</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the sold quantity for an invoice from the journal.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The transaction originator ID.
    /// </param>
    /// <param name="_invoiceNum">
    ///    The invoice ID.
    /// </param>
    /// <param name="_invoiceDate">
    ///    The date of issue for the invoice.
    /// </param>
    /// <returns>
    ///    The sold quantity.
    /// </returns>
    public static InventQty qtySold(
        InventTransOriginId     _transOriginId,
        InvoiceId               _invoiceNum,
        TransDate               _invoiceDate)
    {
        InventTrans inventTrans;

        select sum(Qty) from inventTrans
            where inventTrans.InventTransOrigin     == _transOriginId
              &&  inventTrans.DateFinancial         == _invoiceDate
              &&  inventTrans.InvoiceId             == _invoiceNum
              &&  inventTrans.Qty                   != 0
              &&  inventTrans.PackingSlipReturned   == 0
              &&  inventTrans.StatusReceipt         == StatusReceipt::None
              &&  inventTrans.StatusIssue           == StatusIssue::Sold;

        return inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtySoldWithoutPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the quantity for an invoice where the transaction is not associated with a packing slip.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The transaction originator ID.
    /// </param>
    /// <param name="_invoiceNum">
    ///    The invoice ID.
    /// </param>
    /// <param name="_invoiceDate">
    ///    The date of issue for the invoice.
    /// </param>
    /// <returns>
    ///    The quantity requested.
    /// </returns>
    public static CostAmount qtySoldWithoutPackingSlip(
        InventTransOriginId     _transOriginId,
        InvoiceId               _invoiceNum,
        TransDate               _invoiceDate)
    {
        InventTrans inventTrans;

        select sum(Qty) from inventTrans
            where inventTrans.InventTransOrigin     == _transOriginId
              &&  inventTrans.DateFinancial         == _invoiceDate
              &&  inventTrans.InvoiceId             == _invoiceNum
              &&  inventTrans.PackingSlipId         == ''
              &&  inventTrans.Qty                   != 0
              &&  inventTrans.PackingSlipReturned   == 0
              &&  inventTrans.StatusReceipt         == StatusReceipt::None
              &&  inventTrans.StatusIssue           == StatusIssue::Sold;

        return inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDimensionsFromInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Synchronizes inventory dimensions on transactions for a specified transaction originator with
    ///    inventory dimensions from a specified invoice.
    /// </summary>
    /// <param name="_transOriginIdFrom">
    ///    The transaction originator ID of the transactions to synchronize from.
    /// </param>
    /// <param name="_invoiceNum">
    ///    The invoice ID to synchronize from.
    /// </param>
    /// <param name="_invoiceDate">
    ///    The date of issue for the invoice to synchronize from.
    /// </param>
    /// <param name="_transOriginIdTo">
    ///    The transaction originator ID of the transactions to synchronize.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    Illegal inventory transaction. No transactions exist for the <paramref name="_transOriginIdTo" />
    ///    parameter.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The item has automatic serial number allocation. Only one inventory transaction record for the
    ///    <paramref name="_transOriginIdTo" /> parameter must exist.
    /// </exception>
    public static void updateDimensionsFromInvoice(
        InventTransOriginId     _transOriginIdFrom,
        InvoiceId               _invoiceNum,
        TransDate               _invoiceDate,
        InventTransOriginId     _transOriginIdTo)
    {
        InventTrans         inventTransTo;
        InventTrans         inventTransFrom;
        InventDim           inventDimNew;
        boolean             itemWhsEnabled;
        boolean             itemWhsEnabledRetrieved;

        select count(RecId) from inventTransTo
            where inventTransTo.InventTransOrigin   == _transOriginIdTo;

        if (inventTransTo.RecId == 0)
        {
            InventTransOrigin inventTransOriginTo = InventTransOrigin::find(_transOriginIdTo);
            if (inventTransOriginTo.ReferenceCategory == InventTransType::Sales)
            {
                SalesLine salesLine = SalesLine::findInventTransId(inventTransOriginTo.InventTransId);
                throw error(strFmt("@SCM:InventTransInvoiceNoInventTransFoundSales", salesLine.ItemId, salesLine.LineNum, salesLine.SalesId));
            }
            else
            {
                throw error(strFmt("@SCM:InventTransInvoiceNoInventTransFoundGeneral", inventTransOriginTo.ReferenceId, enum2Str(inventTransOriginTo.ReferenceCategory)));
            }
        }

        if (inventTransTo.RecId > 1)
        {
            InventTransOrigin inventTransOriginTo = InventTransOrigin::find(_transOriginIdTo);
            if (inventTransOriginTo.ReferenceCategory == InventTransType::Sales)
            {
                SalesLine salesLine = SalesLine::findInventTransId(inventTransOriginTo.InventTransId);
                // If sales line reservation type is automatic, split can be made by auto reservation.
                if (salesLine.Reservation == ItemReservation::Automatic)
                {
                    info(strFmt("@SCM:InventTransInvoiceChangeReservationManualHint", salesLine.SalesId));
                }

                throw error(strFmt("@SCM:InventTransInvoiceMultipleInventoryTransactionsFoundSales", salesLine.ItemId, salesLine.LineNum, salesLine.SalesId));
            }
            else
            {
                throw error(strFmt("@SCM:InventTransInvoiceMultipleInventoryTransactionsFoundGeneral", inventTransOriginTo.ReferenceId, enum2Str(inventTransOriginTo.ReferenceCategory)));
            }
        }

        inventTransTo = InventTrans::findByInventTransOrigin(_transOriginIdTo, true); // we just verified above that only 1 record exists.
        InventQty remainQty = abs(inventTransTo.Qty);

        while select inventTransFrom
            order by InventDimId asc, Qty asc
            where inventTransFrom.InventTransOrigin     == _transOriginIdFrom
              &&  inventTransFrom.DateFinancial         == _invoiceDate
              &&  inventTransFrom.InvoiceId             == _invoiceNum
              &&  inventTransFrom.Qty                   != 0
              &&  inventTransFrom.PackingSlipReturned   == 0
              &&  inventTransFrom.InventDimId           != inventTransTo.InventDimId
              &&  inventTransFrom.StatusReceipt         <= StatusReceipt::Purchased
              &&  inventTransFrom.StatusIssue           <= StatusIssue::Sold
        {
            if (!itemWhsEnabledRetrieved)
            {
                itemWhsEnabled = WHSInventEnabled::exist(inventTransFrom.ItemId);
                itemWhsEnabledRetrieved = true;
            }
            InventDim inventDimFrom = inventTransFrom.inventDim();
            inventDimNew.data(inventDimFrom.data());
            inventDimNew.wmsLocationId = '';
            inventDimNew.LicensePlateId = '';
            inventDimNew = InventDim::findOrCreate(inventDimNew);
            if (!(itemWhsEnabled && InventLocation::find(inventDimNew.InventLocationId).WHSEnabled))
            {
                WMSLocation locationWMS = WMSLocation::defaultItemLocation(inventTransFrom.ItemId, InventDirection::Receipt, inventDimNew);
                if (locationWMS)
                {
                    inventDimNew.wmsLocationId = locationWMS.wmsLocationId;
                }
            }

            if (inventDimNew.wmsPalletId)
            {
                WMSPallet palletWMS = WMSPallet::find(inventDimNew.wmsPalletId);
                if (!palletWMS.RecId || palletWMS.InventLocationId != inventDimNew.InventLocationId || palletWMS.wmsLocationId != inventDimNew.wmsLocationId)
                {
                    inventDimNew.wmsPalletId = '';
                }
            }
            inventDimNew = InventDim::findOrCreate(inventDimNew);

            if (inventTransTo.InventDimId != inventDimNew.InventDimId)
            {
                recId recId = inventTransTo.RecId;

                if (abs(inventTransTo.Qty)  > abs(inventTransFrom.Qty))
                {
                    inventTransTo.updateSplit(-inventTransFrom.Qty, -inventTransFrom.PdsCWQty);
                }

                remainQty -=abs(inventTransFrom.Qty);

                inventTransTo.InventDimId  = inventDimNew.InventDimId;
                inventTransTo.update();
                // <GEERU>
                TransLink_RU::create(tablenum(InventTrans), inventTransFrom.RecId, inventTransTo.RecId);
                // </GEERU>

                inventTransTo= InventTrans::findRecId(recId,true);

                if (remainQty <= 0)
                {
                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>