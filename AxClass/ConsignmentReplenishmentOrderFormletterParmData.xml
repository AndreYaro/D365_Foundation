<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConsignmentReplenishmentOrderFormletterParmData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ConsignmentReplenishmentOrderFormletterParmData</c> class creates the data that a specific consignment replenishment order update is based on.
/// </summary>
public class ConsignmentReplenishmentOrderFormletterParmData extends FormletterParmData
{
    private ConsignmentReplenishmentOrderHeader consignmentReplenishmentOrder;
    private ConsignmentReplenishmentOrderFormLetterInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and inserts a record in the consignment replenishment order draft journal header table.
    /// </summary>
    /// <param name="_consignmentReplenishmentOrderHeader">
    /// A record from the consignment replenishment order header table.
    /// </param>
    /// <param name="_consignmentReplenishmentOrderLine">
    /// A record from the consignment replenishment order line table.
    /// </param>
    /// <param name="_tableRefId">
    /// The reference ID to apply to the order header posting record.
    /// </param>
    /// <param name="_skipParmSubTable">
    /// A Boolean value that indicates whether to skip the creation of sub order header posting parameter; optional.
    /// </param>
    /// <returns>
    /// The inserted record.
    /// </returns>
    /// <remarks>This method is required by the <C>FormletterParmData</C> base class.</remarks>
    protected Common createParmTable(Common         _consignmentReplenishmentOrderHeader,
        Common          _consignmentReplenishmentOrderLine,
        TradeLineRefId  _tableRefId,
        boolean         _skipParmSubTable = true)
    {
        ConsignmentDraftReplenishmentOrderJournalHeader draftReplenishmentOrderJournalHeader;

        draftReplenishmentOrderJournalHeader.ParmId = this.parmId();
        draftReplenishmentOrderJournalHeader.defaultFields();
        draftReplenishmentOrderJournalHeader.DocumentStatus = this.parmDocumentStatus();
        draftReplenishmentOrderJournalHeader.DeliveryDate = this.parmTransDate();

        this.insertParmTable(draftReplenishmentOrderJournalHeader);
        this.allowCreateParmTable(this.parmAllowEmptyParmTable());

        return draftReplenishmentOrderJournalHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into consignment replenishment order draft journal header table.
    /// </summary>
    /// <param name="_draftReplenishmentOrderJournalHeader">
    /// The record to insert.
    /// </param>
    /// <remarks>This method is only called during creation of the <C>ConsignmentDraftReplenishmentOrderJournalHeader</C> record.</remarks>
    protected void insertParmTable(Common _draftReplenishmentOrderJournalHeader)
    {
        ConsignmentDraftReplenishmentOrderJournalHeader draftReplenishmentOrderJournalHeader = _draftReplenishmentOrderJournalHeader;

        draftReplenishmentOrderJournalHeader.RecId  = systemSequence.reserveValues(1, draftReplenishmentOrderJournalHeader.TableId);
        super(draftReplenishmentOrderJournalHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in the order line posting parameter table.
    /// </summary>
    /// <param name="_consignmentReplenishmentOrderLine">
    /// A record from the consignment replenishment order line table.
    /// </param>
    /// <param name="_tableRefId">
    /// The reference ID from the connected record in the order header posting parameter table.
    /// </param>
    /// <returns>
    /// true if the record in the order line posting parameter table was created; otherwise, false.
    /// </returns>
    /// <remarks>This method is required by the <C>FormletterParmData</C> base class.</remarks>
    protected boolean createParmLine(Common _consignmentReplenishmentOrderLine, TradeLineRefId _tableRef)
    {
        boolean ret;

        ConsignmentDraftReplenishmentOrderJournalLine draftReplenishmentOrderJournalLine;
        ConsignmentReplenishmentOrderLine consignmentReplenishmentOrderLine = _consignmentReplenishmentOrderLine as ConsignmentReplenishmentOrderLine;

        draftReplenishmentOrderJournalLine.clear();
        draftReplenishmentOrderJournalLine.ParmId = this.parmId();
        draftReplenishmentOrderJournalLine.DocumentStatus = this.parmDocumentStatus();
        draftReplenishmentOrderJournalLine.defaultFields(consignmentReplenishmentOrderLine, PurchUpdate::All);

        draftReplenishmentOrderJournalLine.ReplenishmentQuantity = consignmentReplenishmentOrderLine.ReplenishmentQuantity;

        if (#PdsVendBatchEnabled
            && draftReplenishmentOrderJournalLine.canSetVendorBatchInfo())
        {
            PdsVendBatchInfo vendorBatchInfo = consignmentReplenishmentOrderLine.vendorBatchInfo();

            draftReplenishmentOrderJournalLine.initFromVendorBatchInfo(vendorBatchInfo);
        }

        if (this.shouldCreateParmLine(draftReplenishmentOrderJournalLine))
        {
            this.insertParmLine(draftReplenishmentOrderJournalLine);
            ret = true;

            this.allowCreateParmTable(true);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateParmLine</Name>
				<Source><![CDATA[
    private boolean shouldCreateParmLine(ConsignmentDraftReplenishmentOrderJournalLine _consignmentDraftReplenishmentOrderJournalLine)
    {
        return _consignmentDraftReplenishmentOrderJournalLine.ReceiveReplenishmentQuantityNow != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into consignment replenishment order draft journal line table.
    /// </summary>
    /// <param name="_draftReplenishmentOrderJournalLine">The record to insert.</param>
    /// <remarks>This method is only called during creation of the <C>ConsignmentDraftReplenishmentOrderJournalLine</C> record.</remarks>
    protected void insertParmLine(Common _draftReplenishmentOrderJournalLine)
    {
        ConsignmentDraftReplenishmentOrderJournalLine draftReplenishmentOrderJournalLine = _draftReplenishmentOrderJournalLine;

        draftReplenishmentOrderJournalLine.RecId  = systemSequence.reserveValues(1, draftReplenishmentOrderJournalLine.TableId);

        super(draftReplenishmentOrderJournalLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineMapKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs fields that represent unique identification of the document line to hash string.
    /// </summary>
    /// <param name="_line">
    /// Document line record.
    /// </param>
    /// <returns>
    /// Hash string.
    /// </returns>
    protected str parmLineMapKey(Common _line)
    {
        str key;

        switch (_line.TableId)
        {
            case tableNum(ConsignmentReplenishmentOrderLine) :
                ConsignmentReplenishmentOrderLine consignmentReplenishmentOrderLine = _line as ConsignmentReplenishmentOrderLine;

                key = this.addToKey(key, consignmentReplenishmentOrderLine.ReplenishmentOrderNumber);
                key = this.addToKey(key, int642Str(consignmentReplenishmentOrderLine.LineNumber));

                break;

            case this.parmLineTableId():
                ConsignmentDraftReplenishmentOrderJournalLine consignmentDraftReplenishmentOrderJournalLine = _line as ConsignmentDraftReplenishmentOrderJournalLine;

                key = this.addToKey(key, consignmentDraftReplenishmentOrderJournalLine.ReplenishmentOrderNumber);
                key = this.addToKey(key, int642Str(consignmentDraftReplenishmentOrderJournalLine.ReplenishmentOrderLineNumber));

                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsParmTableKey</Name>
				<Source><![CDATA[
    protected boolean existsParmTableKey(Common _sourceTable, Common _sourceLineTable)
    {
        return parmTableMap.exists(this.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableMapKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs fields that represent unique identification of the document header to hash string.
    /// </summary>
    /// <param name="_source">
    /// Document header record.
    /// </param>
    /// <returns>
    /// Hash string.
    /// </returns>
    protected str parmTableMapKey(Common _source)
    {
        str key;

        switch (_source.TableId)
        {
            case tableNum(ConsignmentReplenishmentOrderLine) :
                ConsignmentReplenishmentOrderLine consignmentReplenishmentOrderLine = _source as ConsignmentReplenishmentOrderLine;
                key = this.addToKey(key, consignmentReplenishmentOrderLine.ReplenishmentOrderNumber);
                break;

            case this.parmTableTableId():
                ConsignmentDraftReplenishmentOrderJournalHeader consignmentDraftReplenishmentOrderJournalHeader = _source;
                key = this.addToKey(key, consignmentDraftReplenishmentOrderJournalHeader.ParmId);
                break;
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryName</Name>
				<Source><![CDATA[
    protected str queryName()
    {
        return queryStr(ConsignmentReplenishmentOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeLines</Name>
				<Source><![CDATA[
    protected void reArrangeLines(QueryRun _queryRun)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSelectLines</Name>
				<Source><![CDATA[
    protected void reSelectLines(Num _origOrderId)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>recIdSuspensionTables</Name>
				<Source><![CDATA[
    protected List recIdSuspensionTables()
    {
        List    list    = super();

        list.addEnd(this.parmTableTableId());
        list.addEnd(this.parmLineTableId());
        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeQueryRun</Name>
				<Source><![CDATA[
    protected QueryRun reArrangeQueryRun()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineTableId</Name>
				<Source><![CDATA[
    protected TableId parmLineTableId()
    {
        return tableNum(ConsignmentDraftReplenishmentOrderJournalLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableTableId</Name>
				<Source><![CDATA[
    protected TableId parmTableTableId()
    {
        return tableNum(ConsignmentDraftReplenishmentOrderJournalHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParmLines</Name>
				<Source><![CDATA[
    protected void deleteParmLines()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParmTables</Name>
				<Source><![CDATA[
    protected void deleteParmTables()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdParmTable_TableRefId</Name>
				<Source><![CDATA[
    protected FieldId fieldIdParmTable_TableRefId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdSourceTable_OrderId</Name>
				<Source><![CDATA[
    protected FieldId fieldIdSourceTable_OrderId()
    {
        return fieldNum(ConsignmentReplenishmentOrderHeader, ReplenishmentOrderNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOrigOrderIsSet</Name>
				<Source><![CDATA[
    protected void fillOrigOrderIsSet()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoSourceTableSkipped</Name>
				<Source><![CDATA[
    protected void infoSourceTableSkipped(Common _sourceTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLineTableId</Name>
				<Source><![CDATA[
    protected TableId sourceLineTableId()
    {
        return tableNum(ConsignmentReplenishmentOrderLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableTableId</Name>
				<Source><![CDATA[
    protected TableId sourceTableTableId()
    {
        return tableNum(ConsignmentReplenishmentOrderHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmSubTable</Name>
				<Source><![CDATA[
    protected void createParmSubTable(Common _parmTable)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmUpdate</Name>
				<Source><![CDATA[
    protected Common  createParmUpdate()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsParmUpdate</Name>
				<Source><![CDATA[
    protected boolean existsParmUpdate(Common _parmUpdate)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    public Common parmParmUpdate(Common _purchParmUpdate = null)
    {
        PurchParmUpdate record;
        record.RecId = 1;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubTableTableId</Name>
				<Source><![CDATA[
    protected TableId parmSubTableTableId()
    {
        return tableNum(ConsignmentDraftReplenishmentOrderJournalHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    public Common parmSourceTable(Common _sourceTable = consignmentReplenishmentOrder)
    {
        if (_sourceTable.TableId == tableNum(ConsignmentReplenishmentOrderHeader))
        {
            consignmentReplenishmentOrder = _sourceTable;
        }
        return _sourceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates posting data.
    /// </summary>
    /// <param name="_consignmentReplenishmentOrderFormLetterContractPacked">
    ///   A packed version of a <c>ConsignmentReplenishmentOrderFormLetterContract</c> class.
    /// </param>
    /// <param name="_append">
    ///   A Boolean value that indicates whether to append records or to delete existing records first.
    /// </param>
    /// <returns>
    ///   A <c>container</c> with the result of the data creation; optional.
    /// </returns>
    /// <remarks>
    ///   Passing false in the _canShowDialogs parameter forces the code to be executed in IL.
    /// </remarks>
    public static container chooseLines(container _consignmentReplenishmentOrderFormLetterContractPacked, boolean _append)
    {
        ConsignmentReplenishmentOrderFormletterParmData consignmentReplenishmentOrderFormLetterParmData =  ConsignmentReplenishmentOrderFormletterParmData::newChooseLines(_consignmentReplenishmentOrderFormLetterContractPacked, _append);

        consignmentReplenishmentOrderFormLetterParmData.createData(_append);

        return consignmentReplenishmentOrderFormLetterParmData.getOutputContractPacked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newData</Name>
				<Source><![CDATA[
    public static FormletterParmData newData(DocumentStatus _documentStatus, VersioningUpdateType _updateType = VersioningUpdateType::Initial)
    {
        ConsignmentReplenishmentOrderFormletterParmData parmData = new ConsignmentReplenishmentOrderFormletterParmData();

        parmData.parmVersioningStrategy(FormLetterParmDataVersioning::newVersioningUpdateType(_updateType, parmData));
        parmData.parmDocumentStatus(_documentStatus);

        return parmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newChooseLines</Name>
				<Source><![CDATA[
    public static ConsignmentReplenishmentOrderFormletterParmData newChooseLines(container _consignmentReplenishmentOrderFormLetterContractPacked, boolean _append)
    {
        ConsignmentReplenishmentOrderFormLetterContract contract = ConsignmentReplenishmentOrderFormLetterContract::newFromPackedVersion(_consignmentReplenishmentOrderFormLetterContractPacked);

        ConsignmentReplenishmentOrderFormletterParmData consignmentReplenishmentOrderFormLetterParmData = ConsignmentReplenishmentOrderFormletterParmData::newData(contract.getDocumentStatus(), contract.parmVersioningUpdateType());
        consignmentReplenishmentOrderFormLetterParmData.parmAllowEmptyParmTable(contract.parmAllowEmptyTable());
        consignmentReplenishmentOrderFormLetterParmData.parmTransDate(contract.parmTransDate());
        consignmentReplenishmentOrderFormLetterParmData.parmShowQueryForm(contract.parmShowQueryForm());
        consignmentReplenishmentOrderFormLetterParmData.parmParmUpdateSysLastValue(contract.parmParmUpdate());
        consignmentReplenishmentOrderFormLetterParmData.parmDatasourceRecordsPacked(contract.parmDataSourceRecordMapPacked());
        consignmentReplenishmentOrderFormLetterParmData.parmCreateFromLines(contract.parmCreateFromLines());
        consignmentReplenishmentOrderFormLetterParmData.parmCreateFromHistory(contract.parmCreateFromHistory());
        consignmentReplenishmentOrderFormLetterParmData.parmSourceTable(contract.parmSourceTable());
        consignmentReplenishmentOrderFormLetterParmData.parmCallerTable(contract.parmCallerTable());
        
        if (FormLetterContractPackingUseContainerFlight::instance().isEnabled())
        {
            consignmentReplenishmentOrderFormLetterParmData.parmLineList(contract.parmLineListContainerPacked());
            consignmentReplenishmentOrderFormLetterParmData.parmHistoryList(contract.parmHistoryListContainerPacked());
        }
        else
        {
            consignmentReplenishmentOrderFormLetterParmData.parmLineList(SysOperationHelper::base64Decode(contract.parmLineListPacked()));
            consignmentReplenishmentOrderFormLetterParmData.parmHistoryList(SysOperationHelper::base64Decode(contract.parmHistoryListPacked()));
        }

        consignmentReplenishmentOrderFormLetterParmData.init();

        return consignmentReplenishmentOrderFormLetterParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    public void updateQueryBuild()
    {
        super();

        if (!this.parmDatasourceRecordsPacked())
        {
            if (chooseLines.query().dataSourceTable(tableNum(ConsignmentReplenishmentOrderHeader)))
            {
                chooseLines.query().dataSourceTable(tableNum(ConsignmentReplenishmentOrderHeader)).addRange(fieldNum(ConsignmentReplenishmentOrderHeader, ReplenishmentOrderNumber));
            }

            if (consignmentReplenishmentOrder)
            {
                chooseLines.query().dataSourceTable(tableNum(ConsignmentReplenishmentOrderHeader)).rangeField(fieldNum(ConsignmentReplenishmentOrderHeader, ReplenishmentOrderNumber)).value(queryValue(consignmentReplenishmentOrder.ReplenishmentOrderNumber));
            }
        }
        else
        {
            setPrefix("@SYS25781");
            this.updateQueryDocumentRanges(this.parmDatasourceRecordsPacked());
        }

        this.updateQueryBuildLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuildLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>chooseLines</c> query with line conditions and sort fields.
    /// </summary>
    protected void updateQueryBuildLines()
    {
        chooseLines.query().dataSourceTable(tableNum(ConsignmentReplenishmentOrderLine)).addSortField(fieldNum(ConsignmentReplenishmentOrderLine, ReplenishmentOrderNumber));
        chooseLines.query().dataSourceTable(tableNum(ConsignmentReplenishmentOrderLine)).addSortField(fieldNum(ConsignmentReplenishmentOrderLine, LineNumber));

        chooseLines.query().dataSourceTable(tableNum(InventDim)).addRange(fieldNum(InventDim, InventSiteId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal FormLetterInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = ConsignmentReplenishmentOrderFormLetterInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>