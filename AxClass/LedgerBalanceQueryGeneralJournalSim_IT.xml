<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBalanceQueryGeneralJournalSim_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerBalanceQueryGeneralJournalSim_IT</c> class is used to retrieve a balance from the general
///    ledger by using the general journal.
/// </summary>
public class LedgerBalanceQueryGeneralJournalSim_IT extends LedgerBalanceQueryBase
{
    public boolean isTmpDataSet;
    public TmpAccountSum tmpAccountSum;
    public AmountMST accountingCurrencyDebitBalance;
    public AmountMST accountingCurrencyCreditBalance;
    public AmountMST reportingCurrencyBalance;
    public AmountCur transactionCurrencyDebitBalance;
    public AmountCur transactionCurrencyCreditBalance;
    public Qty quantityBalance;

    public Map balancesByCurrency;
    public LedgerJournalizeNum journalizeJournal;
    public container dimAttrValues;
    public Query baseQuery;

    // this is only used in the calculateForMainAccountRange
    // method because general use of it needs to be made in SYS
    public container mainAccountTypes;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDimAttrValueRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the dimension attribute value record ID to the restrictions.
    /// </summary>
    /// <param name="_dimAttrRecId">
    ///    The dimension attribute record ID.
    /// </param>
    /// <param name="_dimAttrValueRecId">
    ///    The dimension attribute value record ID.
    /// </param>
    /// <remarks>
    ///    Multiple dimension attribute value record ID ranges use a logical AND.Pass zero for the <paramref
    ///    name="_dimAttrValueRecId" /> parameter to restrict to items that do not contain any values for the
    ///    specified dimension attribute.
    /// </remarks>
    public void addDimAttrValueRecId(recId _dimAttrRecId, recId _dimAttrValueRecId)
    {
        dimAttrValues += [[_dimAttrRecId, _dimAttrValueRecId]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the accounting date range to the query.
    /// </summary>
    /// <param name="_query">
    ///    The query.
    /// </param>
    protected void addRangeForAccountingDate(Query _query)
    {
        if (startAccountingDate != dateNull() || endAccountingDate != dateMax())
        {
            QueryBuildDataSource ds = _query.dataSourceTable(tableNum(GeneralJournalEntrySim_IT));
            QueryBuildRange range = ds.addRange(fieldNum(GeneralJournalEntrySim_IT, AccountingDate));
            range.value(SysQuery::range(startAccountingDate, endAccountingDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the simulation journal name range to the query.
    /// </summary>
    /// <param name="_query">
    ///    The query.
    /// </param>
    ///
    protected void addRangeForJournalName(Query _query)
    {
        if (simulationJournalGroupId_IT)
        {
            QueryBuildDataSource ds = _query.dataSourceTable(tableNum(GeneralJournalEntrySim_IT));
            SimulationJournalGroupLine_IT simulationJournalGroupLine;
            while select simulationJournalGroupLine
                where SimulationJournalGroupLine.SimulationJournalGroupId == simulationJournalGroupId_IT
            {
                ds.addRange(fieldNum(GeneralJournalEntrySim_IT, SimulationJournalNameId)).value(SimulationJournalGroupLine.JournalName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the general journal account entry ranges to the query.
    /// </summary>
    /// <param name="_query">
    ///    The query.
    /// </param>
    protected void addRangeForLine(Query _query)
    {
        QueryBuildDataSource ds = _query.dataSourceTable(tableNum(GeneralJournalAccountEntrySim_IT));
        QueryBuildRange range = ds.addRange(fieldNum(GeneralJournalAccountEntrySim_IT, IsCredit));

        if (excludeCredits)
        {
            Debug::assert(!separateDebitsAndCredits);
            range.value(SysQuery::value(NoYes::No));
        }

        if (excludeDebits)
        {
            Debug::assert(!separateDebitsAndCredits);
            range.value(SysQuery::value(NoYes::Yes));
        }

        // always group by debits/credits because we have to separate them in all cases, not just for separateDebitsAndCredits
        ds.addGroupByField(fieldNum(GeneralJournalAccountEntrySim_IT, IsCredit));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the fiscal period ranges to the query.
    /// </summary>
    /// <param name="_query">
    ///    The query.
    /// </param>
    protected void addRangeForPeriod(Query _query)
    {
        QueryBuildDataSource ds = _query.dataSourceTable(tableNum(FiscalCalendarPeriod));

        if (ds == null)
        {
            ds = _query.dataSourceTable(tableNum(GeneralJournalEntrySim_IT));

            // add FiscalCalendarPeriod
            ds = ds.addDataSource(tableNum(FiscalCalendarPeriod));
            ds.fetchMode(QueryFetchMode::One2One);
            ds.addLink(fieldNum(GeneralJournalEntrySim_IT, FiscalCalendarPeriod), fieldNum(FiscalCalendarPeriod, RecId));
        }

        FiscalCalendarPeriod::addRangeForPeriodType(
            ds,
            fieldNum(FiscalCalendarPeriod, Type),
            includeOpeningPeriod,
            includeOperatingPeriod,
            includeClosingPeriod || includeClosingPeriodBySystem);

        // PostingType range is related to includeClosingPeriodBySystem
        if (includeClosingPeriod != includeClosingPeriodBySystem)
        {
            ds = _query.dataSourceTable(tableNum(GeneralJournalAccountEntrySim_IT));
            QueryBuildRange range = ds.addRange(fieldNum(GeneralJournalAccountEntrySim_IT, PostingType));

            if (includeClosingPeriod)
            {
                range.value(SysQuery::valueNot(LedgerPostingType::TransferOpeningClosing));
            }
            else
            {
                range.value(SysQuery::value(LedgerPostingType::TransferOpeningClosing));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForPostingLayer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the posting layer ranges to the query.
    /// </summary>
    /// <param name="_query">
    ///    The query.
    /// </param>
    protected void addRangeForPostingLayer(Query _query)
    {
        QueryBuildDataSource ds = _query.dataSourceTable(tableNum(GeneralJournalEntry));
        GeneralJournalEntrySim_IT::addRangeForPostingLayer(ds, fieldNum(GeneralJournalEntrySim_IT, PostingLayer), postingLayer);

        if (postingLayer == OperationsTax::DminusS)
        {
            // add a group by to separate OperationsTax::Current and OperationsTax::Tax
            ds.addGroupByField(fieldNum(GeneralJournalEntrySim_IT, PostingLayer));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForPostingLayerList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the posting layer ranges to the query.
    /// </summary>
    /// <param name="_query">
    ///    The query.
    /// </param>
    protected void addRangeForPostingLayerList(Query _query)
    {
        QueryBuildDataSource ds = _query.dataSourceTable(tableNum(GeneralJournalEntrySim_IT));
        GeneralJournalEntry::addRangeForPostingLayerList(ds, fieldNum(GeneralJournalEntrySim_IT, PostingLayer), postingLayerList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToBalanceTotals</Name>
				<Source><![CDATA[
    private void addToBalanceTotals(int _sign, GeneralJournalAccountEntrySim_IT _generalJournalAccountEntry)
    {
        AmountCur transactionCurrencyAmount;
        AmountMST accountingCurrencyAmount;

        if (groupByCurrency)
        {
            if (balancesByCurrency.exists(_generalJournalAccountEntry.TransactionCurrencyCode))
            {
                // update case is required for total accounts
                [transactionCurrencyAmount, accountingCurrencyAmount] =
                    balancesByCurrency.lookup(_generalJournalAccountEntry.TransactionCurrencyCode);

                transactionCurrencyAmount += _generalJournalAccountEntry.TransactionCurrencyAmount * _sign;
                accountingCurrencyAmount += _generalJournalAccountEntry.AccountingCurrencyAmount * _sign;

                balancesByCurrency.insert(
                    _generalJournalAccountEntry.TransactionCurrencyCode,
                    [transactionCurrencyAmount,
                    accountingCurrencyAmount]);
            }
            else
            {
                balancesByCurrency.insert(
                    _generalJournalAccountEntry.TransactionCurrencyCode,
                    [_generalJournalAccountEntry.TransactionCurrencyAmount * _sign,
                    _generalJournalAccountEntry.AccountingCurrencyAmount * _sign]);
            }
        }

        if (_generalJournalAccountEntry.IsCredit)
        {
            accountingCurrencyCreditBalance -= _generalJournalAccountEntry.AccountingCurrencyAmount * _sign;
            transactionCurrencyCreditBalance -= _generalJournalAccountEntry.TransactionCurrencyAmount * _sign;
        }
        else
        {
            accountingCurrencyDebitBalance += _generalJournalAccountEntry.AccountingCurrencyAmount * _sign;
            transactionCurrencyDebitBalance += _generalJournalAccountEntry.TransactionCurrencyAmount * _sign;
        }

        reportingCurrencyBalance += _generalJournalAccountEntry.ReportingCurrencyAmount * _sign;
        quantityBalance += _generalJournalAccountEntry.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateForDimAttrValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the balance for the dimension attribute value collection.
    /// </summary>
    /// <param name="_dimensionAttributeValue">
    ///    The dimension attribute value.
    /// </param>
    /// <remarks>
    ///    Use the <c>getAccountingCurrencyAmount</c> method and the <c>getTmpData</c> method to retrieve the
    ///    results.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The dimension attribute value record ID collection is empty.
    /// </exception>
    public void calculateForDimAttrValue(DimensionAttributeValue _dimensionAttributeValue)
    {
        if (_dimensionAttributeValue == null && conLen(dimAttrValues) == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Query query = this.createQuery();
        QueryBuildDataSource ds1;
        QueryBuildDataSource ds2;
        QueryBuildRange range;

        if (_dimensionAttributeValue != null)
        {
            ds1 = query.dataSourceTable(tableNum(DimensionAttributeLevelValueView));

            if (ds1 == null)
            {
                QueryBuildDataSource ds = query.dataSourceTable(tableNum(GeneralJournalAccountEntrySim_IT));
                ds1 = ds.addDataSource(tableNum(DimensionAttributeLevelValueView));
                ds1.fetchMode(QueryFetchMode::One2One);
                ds1.joinMode(JoinMode::ExistsJoin);
                ds1.addLink(fieldNum(GeneralJournalAccountEntrySim_IT, LedgerDimension), fieldNum(DimensionAttributeLevelValueView, ValueCombinationRecId));
            }

            range = ds1.addRange(fieldNum(DimensionAttributeLevelValueView, AttributeValueRecId));
            range.value(SysQuery::value(_dimensionAttributeValue.RecId));
        }

        for (int i = 1; i <= conLen(dimAttrValues); i++)
        {
            ds1 = query.dataSourceTable(tableNum(GeneralJournalAccountEntrySim_IT));
            ds2 = ds1.addDataSource(tableNum(DimensionAttributeLevelValueView), int2str(i));
            ds2.addLink(fieldNum(GeneralJournalAccountEntrySim_IT, LedgerDimension), fieldNum(DimensionAttributeLevelValueView, ValueCombinationRecId));

            // add the dim attr value restriction
            recId dimAttrRecId, dimAttrValueRecId;
            [dimAttrRecId, dimAttrValueRecId] = conPeek(dimAttrValues, i);

            if (dimAttrValueRecId)
            {
                ds2.joinMode(JoinMode::ExistsJoin);
                range = ds2.addRange(fieldNum(DimensionAttributeLevelValueView, AttributeValueRecId));
                range.value(SysQuery::value(dimAttrValueRecId));
            }
            else
            {
                ds2.joinMode(JoinMode::NoExistsJoin);
                range = ds2.addRange(fieldNum(DimensionAttributeLevelValueView, DimensionAttribute));
                range.value(SysQuery::value(dimAttrRecId));
            }
        }

        this.resetBalanceTotals();

        QueryRun run = new QueryRun(query);

        while (run.next())
        {
            GeneralJournalEntrySim_IT generalJournalEntry = run.get(tableNum(GeneralJournalEntrySim_IT)) as GeneralJournalEntrySim_IT;
            GeneralJournalAccountEntrySim_IT generalJournalAccountEntry = run.get(tableNum(GeneralJournalAccountEntrySim_IT)) as GeneralJournalAccountEntrySim_IT;

            if (generalJournalEntry && generalJournalAccountEntry)
            {
                int sign = this.getSign(generalJournalEntry.PostingLayer, false);
                this.addToBalanceTotals(sign, generalJournalAccountEntry);
            }
        }

        if (!groupByCurrency && _dimensionAttributeValue != null && conLen(dimAttrValues) == 0)
        {
            tmpAccountSum.Txt = _dimensionAttributeValue.getValue();
            tmpAccountSum.Balance01 = accountingCurrencyDebitBalance + accountingCurrencyCreditBalance;
            tmpAccountSum.insert();

            isTmpDataSet = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateForDimAttrValueCombo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the balance for the dimension attribute value combination.
    /// </summary>
    /// <param name="_dimAttrValueCombo">
    /// The dimension attribute value combination.
    /// </param>
    /// <remarks>
    /// Use the <c>getAccountingCurrencyAmount</c> method and the <c>getTmpData</c> method to retrieve the
    /// results.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The dimension attribute value combination is null.
    /// </exception>
    public void calculateForDimAttrValueCombo(DimensionAttributeValueCombination _dimAttrValueCombo)
    {
        if (_dimAttrValueCombo == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Query query = this.createQuery();

        QueryBuildDataSource ds = query.dataSourceTable(tableNum(GeneralJournalAccountEntrySim_IT));

        QueryBuildDataSource dimAttrValueComboDS = query.dataSourceTable(tableNum(DimensionAttributeValueCombination));

        if (dimAttrValueComboDS == null)
        {
            dimAttrValueComboDS = ds.addDataSource(tableNum(DimensionAttributeValueCombination));
            dimAttrValueComboDS.joinMode(JoinMode::ExistsJoin);
            dimAttrValueComboDS.addLink(fieldNum(GeneralJournalAccountEntrySim_IT, LedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));
        }

        LedgerBalanceQueryGeneralJournal::addRangeForDimensionAttributeValueCombination(dimAttrValueComboDS, _dimAttrValueCombo);

        this.resetBalanceTotals();

        QueryRun run = new QueryRun(query);
        while (run.next())
        {
            GeneralJournalEntrySim_IT generalJournalEntry = run.get(tableNum(GeneralJournalEntrySim_IT)) as GeneralJournalEntrySim_IT;
            GeneralJournalAccountEntrySim_IT generalJournalAccountEntry = run.get(tableNum(GeneralJournalAccountEntrySim_IT)) as GeneralJournalAccountEntrySim_IT;

            int sign = this.getSign(generalJournalEntry.PostingLayer, false);

            this.addToBalanceTotals(sign, generalJournalAccountEntry);
        }

        if (!groupByCurrency)
        {
            tmpAccountSum.Txt = _dimAttrValueCombo.DisplayValue;
            tmpAccountSum.Balance01 = accountingCurrencyDebitBalance + accountingCurrencyCreditBalance;
            tmpAccountSum.insert();

            isTmpDataSet = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateForLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the balance for the ledger dimension.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// The ledger dimension.
    /// </param>
    /// <remarks>
    /// Use the getAccountingCurrencyAmount method and the getTmpData method to retrieve the results.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The ledger dimension is empty.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The dimension attribute value combination for the ledger dimension does not exist.
    /// </exception>
    public void calculateForLedgerDimension(LedgerDimensionAccount _ledgerDimension)
    {
        if (_ledgerDimension == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        DimensionAttributeValueCombination dimAttrValueCombo = DimensionAttributeValueCombination::find(_ledgerDimension);

        if (dimAttrValueCombo == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        this.calculateForDimAttrValueCombo(dimAttrValueCombo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateForMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the balance for the main account.
    /// </summary>
    /// <param name="_mainAccount">
    /// The main account for which to calculate the balance.
    /// </param>
    /// <remarks>
    /// Use the <c>LedgerBalanceQueryGeneralJournal.getAccountingCurrencyAmount</c> and
    /// <c>LedgerBalanceQueryGeneralJournal.getTmpData</c> methods to retrieve the results.
    /// </remarks>
    public void calculateForMainAccount(MainAccount _mainAccount)
    {
        const boolean Inverted = true;
        const boolean NotInverted = false;

        if (_mainAccount == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (_mainAccount.LedgerChartOfAccounts != LedgerChartOfAccounts::current())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // empty means to do nothing
        str rangeValueInverted = '';
        str rangeValueNotInverted = '';

        if (_mainAccount.Type == DimensionLedgerAccountType::Total)
        {
            DimensionAttribute dimensionAttribute = DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount));

            DimensionAttributeValue dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute, _mainAccount.MainAccountId);
            DimensionAttributeValueTotallingCriteria dimAttrValueTotCrit;
            MainAccount mainAccount;
            int previousLength;
            // not inverted
            while select RecId from mainAccount
                where mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                    && (mainAccount.Type == DimensionLedgerAccountType::Blank
                        || mainAccount.Type == DimensionLedgerAccountType::ProfitAndLoss
                        || mainAccount.Type == DimensionLedgerAccountType::Revenue
                        || mainAccount.Type == DimensionLedgerAccountType::Expense
                        || mainAccount.Type == DimensionLedgerAccountType::BalanceSheet
                        || mainAccount.Type == DimensionLedgerAccountType::Asset
                        || mainAccount.Type == DimensionLedgerAccountType::Liability
                        || mainAccount.Type == DimensionLedgerAccountType::Equity)
                exists join dimAttrValueTotCrit
                    where dimAttrValueTotCrit.DimensionAttributeValue == dimensionAttributeValue.RecId
                        && dimAttrValueTotCrit.InvertTotalSign == NotInverted
                        && dimAttrValueTotCrit.FromValue <= mainAccount.MainAccountId
                        && dimAttrValueTotCrit.ToValue >= mainAccount.MainAccountId
            {
                previousLength = strLen(rangeValueNotInverted);

                if (previousLength > 0)
                {
                    rangeValueNotInverted += ' || ';
                }

                rangeValueNotInverted += strFmt('(%1 == %2)', fieldStr(MainAccount, RecId), int642str(mainAccount.RecId));

                if (strLen(rangeValueNotInverted) == previousLength)
                {
                    // string is overflowing
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
            }

            if (rangeValueNotInverted)
            {
                rangeValueNotInverted = '(' + rangeValueNotInverted + ')';
            }

            // inverted
            while select RecId from mainAccount
                where mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                    && (mainAccount.Type == DimensionLedgerAccountType::Blank
                        || mainAccount.Type == DimensionLedgerAccountType::ProfitAndLoss
                        || mainAccount.Type == DimensionLedgerAccountType::Revenue
                        || mainAccount.Type == DimensionLedgerAccountType::Expense
                        || mainAccount.Type == DimensionLedgerAccountType::BalanceSheet
                        || mainAccount.Type == DimensionLedgerAccountType::Asset
                        || mainAccount.Type == DimensionLedgerAccountType::Liability
                        || mainAccount.Type == DimensionLedgerAccountType::Equity)
                    exists join dimAttrValueTotCrit
                where dimAttrValueTotCrit.DimensionAttributeValue == dimensionAttributeValue.RecId
                    && dimAttrValueTotCrit.InvertTotalSign == Inverted
                    && dimAttrValueTotCrit.FromValue <= mainAccount.MainAccountId
                    && dimAttrValueTotCrit.ToValue >= mainAccount.MainAccountId
            {
                previousLength = strLen(rangeValueInverted);

                if (previousLength > 0)
                {
                    rangeValueInverted += ' || ';
                }

                rangeValueInverted += strFmt('(%1 == %2)', fieldStr(MainAccount, RecId), int642str(mainAccount.RecId));

                if (strLen(rangeValueInverted) == previousLength)
                {
                    // string is overflowing
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
            }

            if (strLen(rangeValueInverted) > 0)
            {
                rangeValueInverted = '(' + rangeValueInverted + ')';
            }
        }
        else
        {
            rangeValueNotInverted = SysQuery::value(_mainAccount.RecId);
        }

        Query query = this.createQuery();
        QueryRun run = new QueryRun(query);
        QueryBuildDataSource ds = query.dataSourceTable(tableNum(MainAccount));
        QueryBuildRange range = SysQuery::findOrCreateRange(ds, fieldNum(MainAccount, RecId));
        GeneralJournalEntrySim_IT generalJournalEntry;
        GeneralJournalAccountEntrySim_IT generalJournalAccountEntry;
        int sign;
        this.resetBalanceTotals();

        if (rangeValueNotInverted != '')
        {
            // add the restriction for the main account
            range.value(rangeValueNotInverted);

            while (run.next())
            {
                generalJournalEntry = run.get(tableNum(GeneralJournalEntrySim_IT)) as GeneralJournalEntrySim_IT;
                generalJournalAccountEntry = run.get(tableNum(GeneralJournalAccountEntrySim_IT)) as GeneralJournalAccountEntrySim_IT;

                sign = this.getSign(generalJournalEntry.PostingLayer, NotInverted);

                this.addToBalanceTotals(sign, generalJournalAccountEntry);
            }
        }

        if (rangeValueInverted != '')
        {
            // add the restriction for the main account
            range.value(rangeValueInverted);

            while (run.next())
            {
                generalJournalEntry = run.get(tableNum(GeneralJournalEntrySim_IT)) as GeneralJournalEntrySim_IT;
                generalJournalAccountEntry = run.get(tableNum(GeneralJournalAccountEntrySim_IT)) as GeneralJournalAccountEntrySim_IT;

                sign = this.getSign(generalJournalEntry.PostingLayer, Inverted);

                this.addToBalanceTotals(sign, generalJournalAccountEntry);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateForMainAccountRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the balance for a main account range.
    /// </summary>
    /// <param name="_mainAccountRange">
    /// The main account range.
    /// </param>
    /// <remarks>
    /// Use the <c>getAccountingCurrencyAmount</c> method and the <c>getTmpData</c> method to retrieve the
    /// results.
    /// </remarks>
    /// <exception>Throes error if main account range parameter is blank.</exception>
    public void calculateForMainAccountRange(str _mainAccountRange)
    {
        const boolean NotInverted = false;

        if (_mainAccountRange == '')
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Query query = this.createQuery();

        QueryBuildDataSource mainAccountDS = query.dataSourceTable(tableNum(MainAccount));
        QueryBuildRange range = MainAccount::addSecureRangeForChartOfAccounts(mainAccountDS);

        if (conLen(mainAccountTypes) != 0)
        {
            range = SysQuery::findOrCreateRange(mainAccountDS, fieldNum(MainAccount, Type));
            range.value(con2Str(mainAccountTypes, ','));
        }

        range = SysQuery::findOrCreateRange(mainAccountDS, fieldNum(MainAccount, MainAccountId));
        range.value(_mainAccountRange);

        this.resetBalanceTotals();

        QueryRun run = new QueryRun(query);
        while (run.next())
        {
            GeneralJournalEntrySim_IT generalJournalEntry = run.get(tableNum(GeneralJournalEntrySim_IT)) as GeneralJournalEntrySim_IT;
            GeneralJournalAccountEntrySim_IT generalJournalAccountEntry = run.get(tableNum(GeneralJournalAccountEntrySim_IT)) as GeneralJournalAccountEntrySim_IT;

            int sign = this.getSign(generalJournalEntry.PostingLayer, NotInverted);

            this.addToBalanceTotals(sign, generalJournalAccountEntry);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    private Query createQuery()
    {
        Query query;

        if (baseQuery == null)
        {
            query = new Query(queryStr(GeneralJournalBalanceMainAccountSim_IT));
        }
        else
        {
            query = baseQuery;
        }

        QueryBuildDataSource ds = query.dataSourceTable(tableNum(GeneralJournalEntrySim_IT));
        Ledger::addSecureRangeForLedger(ds, fieldNum(GeneralJournalEntrySim_IT, Ledger), ledgerRecId);

        this.addRangeForAccountingDate(query);
        this.addRangeForLine(query);
        this.addRangeForPeriod(query);

        if (postingLayerList && postingLayerList.elements() > 0)
        {
            this.addRangeForPostingLayerList(query);
        }
        else
        {
            this.addRangeForPostingLayer(query);
        }

        this.addRangeForJournalName(query);

        if (groupByCurrency)
        {
            ds = query.dataSourceTable(tableNum(GeneralJournalAccountEntrySim_IT));
            ds.addGroupByField(fieldNum(GeneralJournalAccountEntrySim_IT, TransactionCurrencyCode));
        }

        // not currently support on the general journal
        Debug::assert(!groupByDate);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyCreditBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accounting currency credit balance.
    /// </summary>
    /// <returns>
    /// The accounting currency credit balance.
    /// </returns>
    public AmountMST getAccountingCurrencyCreditBalance()
    {
        return accountingCurrencyCreditBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyDebitBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accounting currency debit balance.
    /// </summary>
    /// <returns>
    /// The accounting currency debit balance.
    /// </returns>
    public AmountMST getAccountingCurrencyDebitBalance()
    {
        return accountingCurrencyDebitBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantityBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity balance.
    /// </summary>
    /// <returns>
    /// The quantity balance.
    /// </returns>
    public Qty getQuantityBalance()
    {
        return quantityBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingCurrencyBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reporting currency balance.
    /// </summary>
    /// <returns>
    /// The reporting currency balance.
    /// </returns>
    public AmountMST getReportingCurrencyBalance()
    {
        return reportingCurrencyBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instance of the temporary table that contains the results.
    /// </summary>
    /// <returns>
    /// The instance of the temporary table that contains the results.
    /// </returns>
    /// <remarks>
    /// This method is compatible with form data sources.
    /// </remarks>
    public TmpAccountSum getTmpData()
    {
        if (!isTmpDataSet)
        {
            isTmpDataSet = true;
            tmpAccountSum = null;
        }

        if (groupByCurrency)
        {
            MapEnumerator balanceEnumerator = balancesByCurrency.getEnumerator();

            while (balanceEnumerator.moveNext())
            {
                AmountCur transactionCurrencyAmount;
                AmountMST accountingCurrencyAmount;
                [transactionCurrencyAmount, accountingCurrencyAmount] = balanceEnumerator.currentValue();

                tmpAccountSum.CurrencyCode = balanceEnumerator.currentKey();
                tmpAccountSum.Balance01Cur = transactionCurrencyAmount;
                tmpAccountSum.Balance01 = accountingCurrencyAmount;
                tmpAccountSum.insert();
            }
        }

        return tmpAccountSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrencyCreditBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction currency credit balance.
    /// </summary>
    /// <returns>
    /// The transaction currency credit balance.
    /// </returns>
    public AmountCur getTransactionCurrencyCreditBalance()
    {
        return transactionCurrencyCreditBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrencyDebitBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction currency debit balance.
    /// </summary>
    /// <returns>
    /// The transaction currency debit balance.
    /// </returns>
    public AmountCur getTransactionCurrencyDebitBalance()
    {
        return transactionCurrencyDebitBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        mainAccountTypes =
            [DimensionLedgerAccountType::ProfitAndLoss,
            DimensionLedgerAccountType::Revenue,
            DimensionLedgerAccountType::Expense,
            DimensionLedgerAccountType::BalanceSheet,
            DimensionLedgerAccountType::Asset,
            DimensionLedgerAccountType::Liability,
            DimensionLedgerAccountType::Equity];

        this.resetBalanceTotals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetBalanceTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the balance totals to zero.
    /// </summary>
    /// <remarks>
    /// Use this method to reset balance totals manually.
    /// </remarks>
    public void resetBalanceTotals()
    {
        isTmpDataSet = false;
        balancesByCurrency = new Map(Types::String, Types::Container);
        accountingCurrencyDebitBalance = 0.0;
        accountingCurrencyCreditBalance = 0.0;
        transactionCurrencyDebitBalance = 0.0;
        transactionCurrencyCreditBalance = 0.0;
        reportingCurrencyBalance = 0.0;
        quantityBalance = 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableFieldsRanges</Name>
				<Source><![CDATA[
    private void disableFieldsRanges(QueryBuildDataSource _qbds, container _fields)
    {
        if (_qbds)
        {
            for (int i = 1; i <= _qbds.rangeCount(); i++)
            {
                QueryBuildRange range = _qbds.range(i);

                if (conFind(_fields, range.field()))
                {
                    range.enabled(false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBaseQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the base query.
    /// </summary>
    /// <param name="_baseQuery">
    /// The base query to set.
    /// </param>
    /// <remarks>
    /// When specified, the base query will be used as the basis for the balance calculation.The base query
    /// must contain the <c>GeneralJournalAccountEntry</c> table.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The base query does not contain the <c>GeneralJournalAccountEntry</c> table.
    /// </exception>
    public void setBaseQuery(Query _baseQuery)
    {
        if (_baseQuery == null)
        {
            baseQuery = null;
            return;
        }

        // clone the query
        baseQuery = new Query(_baseQuery);

        // adjust the query for use by this class
        baseQuery.clearOrderBy();
        baseQuery.clearGroupBy();

        QueryBuildDataSource dsPrimary = baseQuery.dataSourceTable(tableNum(GeneralJournalAccountEntrySim_IT));

        if (dsPrimary == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        dsPrimary.addSelectionField(fieldNum(GeneralJournalAccountEntrySim_IT, TransactionCurrencyAmount), SelectionField::Sum);
        dsPrimary.addSelectionField(fieldNum(GeneralJournalAccountEntrySim_IT, AccountingCurrencyAmount), SelectionField::Sum);
        dsPrimary.addSelectionField(fieldNum(GeneralJournalAccountEntrySim_IT, ReportingCurrencyAmount), SelectionField::Sum);
        dsPrimary.addSelectionField(fieldNum(GeneralJournalAccountEntrySim_IT, Quantity), SelectionField::Sum);

        // prepare the query for use here, add needed tables, remove old ranges, etc.
        QueryBuildDataSource ds = baseQuery.dataSourceTable(tableNum(GeneralJournalEntrySim_IT));

        if (ds == null)
        {
            ds = dsPrimary.addDataSource(tableNum(GeneralJournalEntrySim_IT));
            ds.fetchMode(QueryFetchMode::One2One);
            ds.addLink(fieldNum(GeneralJournalAccountEntrySim_IT, GeneralJournalEntry), fieldNum(GeneralJournalEntrySim_IT, RecId));
        }

        this.disableFieldsRanges(ds, [
            fieldNum(GeneralJournalEntrySim_IT, Ledger),
            fieldNum(GeneralJournalEntrySim_IT, PostingLayer),
            fieldNum(GeneralJournalEntrySim_IT, AccountingDate)]);

        ds = baseQuery.dataSourceTable(tableNum(FiscalCalendarPeriod));
        this.disableFieldsRanges(ds, [fieldNum(FiscalCalendarPeriod, Type)]);

        ds = baseQuery.dataSourceTable(tableNum(MainAccount));
        if (ds == null)
        {
            ds = dsPrimary.addDataSource(tableNum(MainAccount));
            ds.fetchMode(QueryFetchMode::One2One);
            ds.joinMode(JoinMode::ExistsJoin);
            ds.addLink(fieldNum(GeneralJournalAccountEntrySim_IT, MainAccount), fieldNum(MainAccount, RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJournalizeJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the journalizing journal.
    /// </summary>
    /// <param name="_journalizeJournal">
    /// The journalizing journal to set.
    /// </param>
    /// <remarks>
    /// When specified, the balance will only include general journal transactions that include the
    /// journalizing journal.
    /// </remarks>
    public void setJournalizeJournal(LedgerJournalizeNum _journalizeJournal)
    {
        journalizeJournal = _journalizeJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMainAccountTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the container of the main account types.
    /// </summary>
    /// <param name="_mainAccountTypes">
    /// The container of the main account types.
    /// </param>
    /// <remarks>
    /// The main account types in this container are the allowed main accounts types.
    /// </remarks>
    public void setMainAccountTypes(container _mainAccountTypes)
    {
        mainAccountTypes = _mainAccountTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerBalanceQueryGeneralJournalSim_IT construct()
    {
        LedgerBalanceQueryGeneralJournalSim_IT generalJournalQuery = new LedgerBalanceQueryGeneralJournalSim_IT();

        return generalJournalQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>