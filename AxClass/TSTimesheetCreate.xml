<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TsTimesheetCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TsTimesheetCreate
{
    TSTimesheetCmd      cmd;
    TSTimesheetTable    tsTimesheetHeader;
    RefRecId            tsWeekRecId;
    str                 tsInfo;
    TSTimesheetNbr      fromTimesheet;
    TSTimesheetNbr      toTimesheet;
    RefRecId            newTimesheet;
    boolean             skipFormRun;
    TsTimesheetLog      tsTimesheetLog;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyFromTimesheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new <c>TSTimesheetTable</c> record by using an existing <c>TSTimesheetTable</c> record.
    /// </summary>
    /// <returns>
    ///    The record ID of the <c>TSTimesheetTable</c> record.
    /// </returns>
    public RefRecId copyFromTimesheet()
    {
        TSTimesheetTable    newTimesheetTable;
        TSTimesheetLine     locTimesheetLine;
        ProjPeriodLine      projPeriodLine;
        ProjPeriodTimesheetWeek projPeriodTimesheetWeek;

        projPeriodLine = TSTimesheetTable::getValidResourcePeriod(tsTimesheetHeader.Resource);

        if (tsTimesheetHeader &&
            TSTimesheetTable::checkMaxTimesheets(projPeriodLine.PeriodFrom, tsTimesheetHeader.Resource, true))
        {
            if (projPeriodLine.RecId != 0)
            {
                newTimesheetTable.initValue();
                newTimesheetTable.Resource = tsTimesheetHeader.Resource;
                newTimesheetTable.ProjPeriodId = projPeriodLine.PeriodId;
                newTimesheetTable.PeriodFrom = projPeriodLine.PeriodFrom;
                newTimesheetTable.PeriodTo = projPeriodLine.PeriodTo;

                projPeriodTimesheetWeek = ProjPeriodTimesheetWeek::findFromPeriod(projPeriodLine.PeriodId);
                if (projPeriodTimesheetWeek.RecId == 0)
                {
                    warning("@SYS338882");
                }
                else
                {
                    newTimesheetTable.ProjPeriodTimesheetWeek = projPeriodTimesheetWeek.RecId;
                }

                tsWeekRecId = projPeriodTimesheetWeek.RecId;
                newTimesheetTable.insert();

                if (newTimesheetTable.RecId != 0)
                {
                    if (ProjParameters::find().TimesheetAuditTrail)
                    {
                        TSTimesheetTableLog::createTableLog(newTimesheetTable, '', TsTimesheetChangeType::Create);
                    }

                    this.preLineInserts(newTimesheetTable);
                    while select locTimesheetLine
                    order by LineNum
                        where locTimesheetLine.TimesheetNbr == tsTimesheetHeader.TimesheetNbr
                    {
                        this.createTimesheetLine(newTimesheetTable.TimesheetNbr, locTimesheetLine);
                    }
                    this.postLineInserts(newTimesheetTable, true);
                }
                else
                {
                    throw error("@Timesheet:Timesheet_Not_Created");
                }
            }
        }

        return newTimesheetTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesFromActivities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create timesheet lines from the imported activities
    /// </summary>
    private void createLinesFromActivities()
    {
        var createFromAssignmentHelper = TsTimesheetLineCreateFromAssignment::construct(tsTimesheetHeader);
        createFromAssignmentHelper.createLinesFromBookedProjectsAssignedActivities();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesFromFavorites</Name>
				<Source><![CDATA[
    private void createLinesFromFavorites(RefRecId _refRecId)
    {
        TSTimesheetFavorites::transferAllFavorites(tsTimesheetHeader.TimesheetNbr, _refRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesFromTimesheet</Name>
				<Source><![CDATA[
    public void createLinesFromTimesheet()
    {
        TSTimesheetLine  fromTimesheetLine;

        while select fromTimesheetLine where fromTimesheetLine.TimesheetNbr == fromTimesheet
        {
            this.createTimesheetLine(toTimesheet, fromTimesheetLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewTimesheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new <c>TSTimesheetTable</c> record that will be used as the timesheet header.
    /// </summary>
    /// <param name="_periodFrom">
    ///     The date of the start of the period
    /// </param>
    /// <returns>
    /// The record ID of the <c>TSTimesheetTable</c> record.
    /// </returns>
    public RefRecId createNewTimesheet(TSPeriodFrom _periodFrom = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TSResourceRecId resourceRecId = ResourceFacade::findByCurrentWorker();
        return this.createNewTimesheetByResource(resourceRecId, _periodFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewTimesheetByResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new <c>TSTimesheetTable</c> record that will be used as the timesheet header.
    /// </summary>
    /// <param name="_periodFrom">
    ///     The date of the start of the period
    /// </param>
    /// <returns>
    /// The record ID of the <c>TSTimesheetTable</c> record.
    /// </returns>
    public RefRecId createNewTimesheetByResource(ResourceRecId _resourceRecId, TSPeriodFrom _periodFrom = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TSTimesheetTable        tsTimesheetTable;
        RefRecId                retval = 0;
        ProjPeriodLine          projPeriodLine;
        ProjPeriodTimesheetWeek projPeriodTimesheetWeek;

        if (_resourceRecId)
        {
            projPeriodLine = TSTimesheetTable::getValidResourcePeriod(_resourceRecId,_periodFrom);

            // Check if the user has not exceeded the timesheet limit
            if (TSTimesheetTable::checkMaxTimesheets(projPeriodLine.PeriodFrom,_resourceRecId,true))
            {
                tsTimesheetTable.initValue();
                tsTimesheetTable.Resource = _resourceRecId;

                if (projPeriodLine != null && projPeriodLine.RecId != 0)
                {
                    tsTimesheetTable.ProjPeriodId = projPeriodLine.PeriodId;
                    tsTimesheetTable.PeriodFrom = projPeriodLine.PeriodFrom;
                    tsTimesheetTable.PeriodTo = projPeriodLine.PeriodTo;

                    projPeriodTimesheetWeek = ProjPeriodTimesheetWeek::findFromPeriod(projPeriodLine.PeriodId, _periodFrom);
                    if (projPeriodTimesheetWeek.RecId == 0)
                    {
                        warning("@SYS338882");
                    }
                    else
                    {
                        tsTimesheetTable.ProjPeriodTimesheetWeek = projPeriodTimesheetWeek.RecId;
                    }
                }

                tsTimesheetTable.insert();
                if (ProjParameters::find().TimesheetAuditTrail)
                {
                    TSTimesheetTableLog::createTableLog(tsTimesheetTable, '', TsTimesheetChangeType::Create);
                }
                retval = tsTimesheetTable.RecId;
            }
        }

        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewTimesheetFromFavorites</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new <c>TSTimesheetTable</c> record by using the timesheet lines from favorites table
    /// </summary>
    /// <returns>
    ///    The record ID of the <c>TSTimesheetTable</c> record.
    /// </returns>
    public RefRecId createNewTimesheetFromFavorites()
    {
        TSTimesheetTable        tsTimesheetTable;
        ProjPeriodLine          projPeriodLine;
        TSResourceRecId         resourceRecId = ResourceFacade::findByCurrentWorker();
        ProjPeriodTimesheetWeek projPeriodTimesheetWeek;

        if (resourceRecId && tsTimesheetHeader.RecId == 0)
        {
            projPeriodLine = TSTimesheetTable::getValidResourcePeriod(resourceRecId);

            // Check if the user has not exceeded the timesheet limit
            if (TSTimesheetTable::checkMaxTimesheets(projPeriodLine.PeriodFrom,resourceRecId,true))
            {
                tsTimesheetTable.initValue();
                tsTimesheetTable.Resource = resourceRecId;

                if (projPeriodLine != null && projPeriodLine.RecId != 0)
                {
                    tsTimesheetTable.ProjPeriodId = projPeriodLine.PeriodId;
                    tsTimesheetTable.PeriodFrom   = projPeriodLine.PeriodFrom;
                    tsTimesheetTable.PeriodTo     = projPeriodLine.PeriodTo;

                    projPeriodTimesheetWeek = ProjPeriodTimesheetWeek::findFromPeriod(projPeriodLine.PeriodId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                    if (projPeriodTimesheetWeek.RecId == 0)
                    {
                        warning("@SYS338882");
                    }
                    else
                    {
                        tsTimesheetTable.ProjPeriodTimesheetWeek = projPeriodTimesheetWeek.RecId;
                    }
                }

                tsTimesheetTable.insert();
                if (ProjParameters::find().TimesheetAuditTrail)
                {
                    TSTimesheetTableLog::createTableLog(tsTimesheetTable, '', TsTimesheetChangeType::Create);
                }
		
                tsTimesheetHeader = tsTimesheetTable;
            }
        }

        if (tsTimesheetHeader.RecId != 0)
        {
            if (projPeriodTimesheetWeek.RecId == 0)
            {
                projPeriodTimesheetWeek = ProjPeriodTimesheetWeek::findFromPeriod(tsTimesheetHeader.ProjPeriodId,tsTimesheetHeader.PeriodFrom);
            }

            if (projPeriodTimesheetWeek.RecId != 0)
            {
                this.preLineInserts(tsTimesheetHeader);
                this.createLinesFromFavorites(projPeriodTimesheetWeek.RecId);
                this.postLineInserts(tsTimesheetHeader, true);
            }
        }
        else
        {
            throw error("@Timesheet:Timesheet_Not_Created");
        }

        return tsTimesheetHeader.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTimesheetLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the timesheet line from the specified <c>TSTimesheetLine</c> table buffer.
    /// </summary>
    /// <param name = "_timesheetNbr">
    ///     Timesheet number used to set on timesheet line.
    /// </param>
    /// <param name = "_timesheetLine">
    ///     Instance of <c>TSTimesheetLine</c>.
    /// </param>
    private void createTimesheetLine(TSTimesheetNbr  _timesheetNbr, TSTimesheetLine _timesheetLine)
    {
        TSTimesheetLine newTimesheetLine = this.initFromTsTimesheetLine(_timesheetNbr, _timesheetLine);

        if (newTimesheetLine.validateWrite() && newTimesheetLine.ProjPeriodTimesheetWeek != 0)
        {
            newTimesheetLine.insert();

            TSTimesheetLineWeek::loadFromLine(newTimesheetLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTsTimesheetLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initialize the timesheet line from the specified <c>TSTimesheetLine</c> table buffer.
    /// </summary>
    /// <param name = "_timesheetNbr">
    ///     Timesheet number used to set on timesheet line.
    /// </param>
    /// <param name = "_timesheetLine">
    ///     Instance of <c>TSTimesheetLine</c>.
    /// </param>
    /// <returns>
    ///     The initialized <c>TSTimesheetLine</c>.
    /// </returns>
    protected TSTimesheetLine initFromTsTimesheetLine(TSTimesheetNbr _timesheetNbr, TSTimesheetLine _timesheetLine)
    {
        TSTimesheetLine  newTimesheetLine;
        TSTimesheetTable targetTimesheet = TSTimesheetTable::find(_timesheetNbr);

        RefRecId getTimesheetWeekRecId(RefRecId sourceWeekId)
        {
            ProjPeriodTimesheetWeek sourcePeriodTimesheetWeek;
            ProjPeriodTimesheetWeek targetPeriodTimesheetWeek;
            TSTimesheetTable sourceTimesheet = TSTimesheetTable::find(_timesheetLine.TimesheetNbr);
            int counter = 0, counter2 = 0;
            RefRecId retval = 0;

            while select RecId from sourcePeriodTimesheetWeek
                order by sourcePeriodTimesheetWeek.PeriodFrom
                where sourcePeriodTimesheetWeek.PeriodId   == sourceTimesheet.ProjPeriodId
                   && sourcePeriodTimesheetWeek.PeriodFrom >= sourceTimesheet.PeriodFrom
                   && sourcePeriodTimesheetWeek.PeriodTo   <= sourceTimesheet.PeriodTo

            {
                if (sourcePeriodTimesheetWeek.RecId == sourceWeekId)
                {
                    break;
                }
                counter++;
            }

            while select RecId from targetPeriodTimesheetWeek
                order by targetPeriodTimesheetWeek.PeriodFrom
                where targetPeriodTimesheetWeek.PeriodId   == targetTimesheet.ProjPeriodId
                   && targetPeriodTimesheetWeek.PeriodFrom >= targetTimesheet.PeriodFrom
                   && targetPeriodTimesheetWeek.PeriodTo   <= targetTimesheet.PeriodTo

            {
                // always set the last PeriodWeek
                // if the source Period has more weeks than target, then the timesheet lines will be set
                // to whatever is the last week of the target period
                retval = targetPeriodTimesheetWeek.RecId;

                if (counter == counter2)
                {
                    retval = targetPeriodTimesheetWeek.RecId;
                    break;
                }
                counter2++;
            }

            return retval;
        }

        newTimesheetLine.TimesheetNbr               = _timesheetNbr;
        newTimesheetLine.ApprovalStatus             = TSAppStatus::Create;
        newTimesheetLine.LineNum                    = _timesheetLine.LineNum;
        newTimesheetLine.Resource                   = targetTimesheet.Resource;
        newTimesheetLine.ProjId                     = _timesheetLine.ProjId;
        newTimesheetLine.ActivityNumber             = _timesheetLine.ActivityNumber;
        newTimesheetLine.CategoryId                 = _timesheetLine.CategoryId;
        newTimesheetLine.LinePropertyId             = _timesheetLine.LinePropertyId;
        newTimesheetLine.WrkCtrId                   = _timesheetLine.WrkCtrId;
        newTimesheetLine.CurrencyCode               = _timesheetLine.CurrencyCode;
        newTimesheetLine.DefaultDimension           = _timesheetLine.DefaultDimension;
        newTimesheetLine.TaxGroupId                 = _timesheetLine.TaxGroupId;
        newTimesheetLine.TaxItemGroup               = _timesheetLine.TaxItemGroup;
        newTimesheetLine.ProjectDataAreaId          = _timesheetLine.ProjectDataAreaId;
        newTimesheetLine.ProjCompanySalesCurrency   = _timesheetLine.ProjCompanySalesCurrency;
        newTimesheetLine.setNextLineNum(_timesheetNbr);
        newTimesheetLine.ProjPeriodTimesheetWeek    = getTimesheetWeekRecId(_timesheetLine.ProjPeriodTimesheetWeek);
        return newTimesheetLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommand</Name>
				<Source><![CDATA[
    public TSTimesheetCmd parmCommand(TSTimesheetCmd _cmd = cmd)
    {
        cmd = _cmd;

        return cmd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyFromTimesheetInfo</Name>
				<Source><![CDATA[
    public str parmCopyFromTimesheetInfo(str _tsInfo = tsInfo)
    {
        tsInfo = _tsInfo;

        return tsInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromTimesheet</Name>
				<Source><![CDATA[
    public TSTimesheetNbr parmFromTimesheet(TSTimesheetNbr _fromTimesheet = fromTimesheet)
    {
        fromTimesheet = _fromTimesheet;

        return fromTimesheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewTimesheet</Name>
				<Source><![CDATA[
    public RefRecId parmNewTimesheet(RefRecId _newTimesheet = newTimesheet)
    {
        newTimesheet = _newTimesheet;

        return newTimesheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimesheetTable</Name>
				<Source><![CDATA[
    public TSTimesheetTable parmTimesheetTable(TSTimesheetTable _tsHeader = tsTimesheetHeader)
    {
        tsTimesheetHeader = _tsHeader;

        return tsTimesheetHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimesheetWeekRecId</Name>
				<Source><![CDATA[
    public RefRecId parmTimesheetWeekRecId(RefRecId _refRecId = tsWeekRecId)
    {
        tsWeekRecId = _refRecId;

        return tsWeekRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToTimesheet</Name>
				<Source><![CDATA[
    public TSTimesheetNbr parmToTimesheet(TSTimesheetNbr _toTimesheet = toTimesheet)
    {
        toTimesheet = _toTimesheet;

        return toTimesheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLineInserts</Name>
				<Source><![CDATA[
    private void postLineInserts(
        TSTimesheetTable _tsTimesheetTable,
        boolean          _isNew)
    {
        TsTimesheetTableLog tsTimesheetTableLog;

        if (ProjParameters::find().TimesheetAuditTrail)
        {
            // if the timesheet is new we need to use the existing table log created in insert
            if (_isNew)
            {
                select firstOnly tsTimesheetTableLog where
                    tsTimesheetTableLog.TimesheetNbr == _tsTimesheetTable.TimesheetNbr;
            }
            else
            {
                tsTimesheetTableLog = TsTimesheetTableLog::createTableLog(_tsTimesheetTable, '', TsTimesheetChangeType::Update);
            }
            tsTimesheetLog.logPostLineInserts(tsTimesheetTableLog);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preLineInserts</Name>
				<Source><![CDATA[
    private void preLineInserts(TSTimesheetTable _timesheetTable)
    {
        if (ProjParameters::find().TimesheetAuditTrail)
        {
            tsTimesheetLog = new TsTimesheetLog();
            tsTimesheetLog.preLineInserts(_timesheetTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        TSTimesheetTable    tsTimesheetTable = null;
        OpenMode            openMode         = OpenMode::Auto;

        switch (this.parmCommand())
        {
            case TSTimesheetCmd::CreateTimesheet:
                newTimesheet = this.createNewTimesheet();
                // Check to see if the new sheet was not created
                if (newTimesheet == 0)
                    return;

                openMode = OpenMode::New;
                break;

            case TSTimesheetCmd::Copy:
                newTimesheet = this.copyFromTimesheet();
                // Check to see if the new sheet was not created
                if (newTimesheet == 0)
                    return;

                openMode = OpenMode::New;
                break;

            case TSTimesheetCmd::LoadFavorites:
                this.preLineInserts(tsTimesheetHeader);
                this.createLinesFromFavorites(tsTimesheetHeader.ProjPeriodTimesheetWeek);
                this.postLineInserts(tsTimesheetHeader, false);
                break;

            case TSTimesheetCmd::CreateFromFavorites:
                newTimesheet = this.createNewTimesheetFromFavorites();
                // Check to see if the new sheet was not created
                if (newTimesheet == 0)
                    return;

                openMode = OpenMode::New;
                break;

            case TSTimesheetCmd::CopyLine:
                tsTimesheetHeader = tsTimesheetTable::find(toTimesheet);
                this.preLineInserts(tsTimesheetHeader);
                this.createLinesFromTimesheet();
                this.postLineInserts(tsTimesheetHeader, false);
                break;

            case TSTimesheetCmd::ImportActivities:
                this.preLineInserts(tsTimesheetHeader);
                this.createLinesFromActivities();
                this.postLineInserts(tsTimesheetHeader, false);
                break;
        }

        if (   this.parmCommand() == TSTimesheetCmd::LoadFavorites
            || this.parmCommand() == TSTimesheetCmd::CopyLine
            || this.parmCommand() == TSTimesheetCmd::ImportActivities)
        {
            return;
        }

        if (!skipFormRun)
        {
            tsTimesheetTable = TSTimesheetTable::findRecId(newTimesheet);

            Debug::assert(tsTimesheetTable.RecId != 0);

            Args args = new Args();
            args.caller(this);
            args.object(new Form(formStr(TSTimesheetEntry)));
            args.record(tsTimesheetTable);
            args.openMode(openMode);

            FormRun formRun = new MenuFunction(menuitemDisplayStr(TSTimesheetEntry), MenuItemType::Display).create(args);
            formRun.init();
            formRun.run();
            formRun.wait();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSkipFormRun</Name>
				<Source><![CDATA[
    private void setSkipFormRun(boolean _skip = false)
    {
        skipFormRun = _skip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static TSTimesheetCreate construct()
    {
        return new TSTimesheetCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>TSTimesheetCreate</c> class.
    /// </summary>
    /// <param name = "_tsTimesheetCmd">
    ///    The create timesheet command.
    /// </param>
    /// <param name = "_skipFormRun">
    ///    A Boolean value that indicates if the entry form must be opened; optional.
    /// </param>
    /// <param name = "_tsTimesheetTable">
    ///    The new timesheet record; optional.
    /// </param>
    /// <param name = "_tsTimesheetLineWeekRecId">
    ///    The timesheet line week record ID; optional.
    /// </param>
    /// <param name = "_fromTimesheetNbr">
    ///    The from timesheet number; optional.
    /// </param>
    /// <param name = "_toTimesheetNbr">
    ///    The to timesheet number; optional.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>TSTimesheetCreate</c> class.
    /// </returns>
    public static TSTimesheetCreate newStandard(
        TSTimesheetCmd   _tsTimesheetCmd,
        boolean          _skipFormRun              = false,
        TSTimesheetTable _tsTimesheetTable         = null,
        RefRecId         _tsTimesheetLineWeekRecId = 0,
        TSTimesheetNbr   _fromTimesheetNbr         = '',
        TSTimesheetNbr   _toTimesheetNbr           = '')
    {
        TSTimesheetCreate tsTimesheetCreate = TSTimesheetCreate::construct();

        tsTimesheetCreate.parmCommand(_tsTimesheetCmd);
        tsTimesheetCreate.setSkipFormRun(_skipFormRun);
        tsTimesheetCreate.parmTimesheetTable(_tsTimesheetTable);
        tsTimesheetCreate.parmTimesheetWeekRecId(_tsTimesheetLineWeekRecId);
        tsTimesheetCreate.parmFromTimesheet(_fromTimesheetNbr);
        tsTimesheetCreate.parmToTimesheet(_toTimesheetNbr);

        return tsTimesheetCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TSTimesheetCreate   tsTimesheetCreate;
        container           containerParm;
        RefRecId            tsTimesheetLineWeekRecId    = 0;
        str                 strTSTimesheetLineWeekRecId = '';
        TSTimesheetNbr      fromTimesheetNbr            = '';
        TSTimesheetNbr      toTimesheetNbr              = '';
        boolean             doRun                       = true;

        if (_args.parmEnumType() != enumNum(TSTimesheetCmd))
        {
            throw error(strFmt("@SYS22828", classStr(TSTimesheetCreate)));
        }

        if (_args.parmEnum() == TSTimesheetCmd::CopyLine)
        {
            if (!_args.parm())
            {
                // dont do anything if parameter is empty
                doRun = false;
            }
            else
            {
                containerParm = str2con(_args.parm(),'\r', false);
                Debug::assert(conlen(containerParm) == 3);

                [fromTimesheetNbr,toTimesheetNbr,strTSTimesheetLineWeekRecId] = containerParm;
                tsTimesheetLineWeekRecId = str2int64(strTSTimesheetLineWeekRecId);
            }
        }
        else
        {
            if (_args.parm())
            {
                tsTimesheetLineWeekRecId = str2int64(_args.parm());
            }
        }

        if (doRun)
        {
            tsTimesheetCreate = TSTimesheetCreate::newStandard(
                                                        _args.parmEnum(),
                                                        _args.parmObject() != null,
                                                        _args.record() as TSTimesheetTable,
                                                        tsTimesheetLineWeekRecId,
                                                        fromTimesheetNbr,
                                                        toTimesheetNbr);

            tsTimesheetCreate.run();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>