<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTaxSettle</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayTaxSettle
{
    Voucher             voucher;
    SpecTrans           specTransDebit;
    SpecTrans           specTransCredit;
    RPayTaxTransOpen    taxTransOpenDebit;
    RPayTaxTransOpen    taxTransOpenCredit;

    Amount              settleAmountDebit;
    Amount              settleAmountCredit;

    TransDate           transactionDate;
    RPayTaxSettlement   taxSettlement;
    NoYes               manual;

    LedgerVoucher       ledgerVoucher;
    LedgerBondClient_RU ledgerBondClient;

    NoYes               calcByBranch;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTransDate</Name>
				<Source><![CDATA[
    private void calcTransDate()
    {
        SpecTrans           specTrans;
        RPayTaxTransOpen    taxTransOpen;

        if (manual)
        {
            select maxof(TransDate) from taxTransOpen
                exists join specTrans
                    where specTrans.RefCompany  == taxTransOpen.dataAreaId  &&
                          specTrans.RefTableId  == taxTransOpen.TableId     &&
                          specTrans.RefRecId    == taxTransOpen.RecId       &&
                          specTrans.SpecCompany == taxSettlement.dataAreaId &&
                          specTrans.SpecTableId == taxSettlement.TableId    &&
                          specTrans.SpecRecId   == taxSettlement.RecId;

            transactionDate = taxTransOpen.TransDate;
        }
        else
        {
            transactionDate = taxSettlement.TransDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endLedgerVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void endLedgerVoucher()
    {
        if (! ledgerVoucher)
        {
            return;
        }

        ledgerVoucher.end();

        TransactionLog::create(TransactionLogType::RPayTaxRefundOffset, "@RUP3224");

        if (! manual && ! taxSettlement.Voucher)
        {
            taxSettlement = RPayTaxSettlement::find(taxSettlement.RecId, true);
            taxSettlement.TransDate = transactionDate;
            taxSettlement.Voucher   = voucher;
            taxSettlement.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchCreditTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean fetchCreditTrans()
    {
        select firstonly forupdate specTransCredit
            where specTransCredit.SpecCompany == taxSettlement.company() &&
                  specTransCredit.SpecTableId == taxSettlement.TableId   &&
                  specTransCredit.SpecRecId   == taxSettlement.RecId
        join firstonly forupdate taxTransOpenCredit
            order by TransDate desc
            where taxTransOpenCredit.dataAreaId     == specTransCredit.RefCompany   &&
                  taxTransOpenCredit.TableId        == specTransCredit.RefTableId   &&
                  taxTransOpenCredit.RecId          == specTransCredit.RefRecId     &&
                  taxTransOpenCredit.TaxSourceType  == RPayTaxSourceType::IncomeTax &&
                  taxTransOpenCredit.Amount          < 0;

        if (! specTransCredit)
        {
            select firstonly forupdate specTransCredit
                where specTransCredit.SpecCompany == taxSettlement.company() &&
                      specTransCredit.SpecTableId == taxSettlement.TableId   &&
                      specTransCredit.SpecRecId   == taxSettlement.RecId
            join firstonly forupdate taxTransOpenCredit
                order by TransDate desc
                where taxTransOpenCredit.dataAreaId     == specTransCredit.RefCompany       &&
                      taxTransOpenCredit.TableId        == specTransCredit.RefTableId       &&
                      taxTransOpenCredit.RecId          == specTransCredit.RefRecId         &&
                      taxTransOpenCredit.TaxSourceType  == RPayTaxSourceType::TaxRedemption &&
                      taxTransOpenCredit.Amount          < 0;
        }

        if (! specTransCredit)
        {
            select firstonly forupdate specTransCredit
                where specTransCredit.SpecCompany == taxSettlement.company() &&
                      specTransCredit.SpecTableId == taxSettlement.TableId   &&
                      specTransCredit.SpecRecId   == taxSettlement.RecId
            join firstonly forupdate taxTransOpenCredit
                order by TransDate asc
                where taxTransOpenCredit.dataAreaId     == specTransCredit.RefCompany       &&
                      taxTransOpenCredit.TableId        == specTransCredit.RefTableId       &&
                      taxTransOpenCredit.RecId          == specTransCredit.RefRecId         &&
                      taxTransOpenCredit.TaxSourceType  == RPayTaxSourceType::TaxPayment    &&
                      taxTransOpenCredit.Amount          < 0;
        }

        if (! specTransCredit)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchDebitTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean fetchDebitTrans()
    {
        Branches_RU             branches_RU;
        VendTable               vendTable;
        TaxAuthorityOKATO_RU    taxAuthorityOKATO_RU;
        TaxAuthorityAddress     taxAuthorityAddress;
        DirPartyLocation        dirPartyLocation;
        TaxRegistration         taxRegistration;
        TaxRegistrationTypeId   taxRegistrationTypeId;
        TransDate               debitDate;

        if (taxTransOpenCredit.TaxSourceType == RPayTaxSourceType::IncomeTax ||
            taxTransOpenCredit.TaxSourceType == RPayTaxSourceType::TaxRedemption)
        {
            select firstonly forupdate specTransDebit
                where specTransDebit.SpecCompany == taxSettlement.company() &&
                      specTransDebit.SpecTableId == taxSettlement.TableId   &&
                      specTransDebit.SpecRecId   == taxSettlement.RecId
            join firstonly forupdate taxTransOpenDebit
                order by TransDate desc
                where taxTransOpenDebit.dataAreaId              == specTransDebit.RefCompany                 &&
                      taxTransOpenDebit.TableId                 == specTransDebit.RefTableId                 &&
                      taxTransOpenDebit.RecId                   == specTransDebit.RefRecId                   &&
                      taxTransOpenDebit.EmplId                  == taxTransOpenCredit.EmplId                 &&
                      taxTransOpenDebit.BudgetReceiptClassCode  == taxTransOpenCredit.BudgetReceiptClassCode &&
                      (taxTransOpenDebit.BranchId               == taxTransOpenCredit.BranchId || !calcByBranch) &&
                      taxTransOpenDebit.Amount                   > 0;

            if (!specTransDebit)
            {
                select firstonly forupdate specTransDebit
                    where specTransDebit.SpecCompany == taxSettlement.company() &&
                          specTransDebit.SpecTableId == taxSettlement.TableId   &&
                          specTransDebit.SpecRecId   == taxSettlement.RecId
                join firstonly forupdate taxTransOpenDebit
                    order by TransDate asc
                    where taxTransOpenDebit.dataAreaId              == specTransDebit.RefCompany                 &&
                          taxTransOpenDebit.TableId                 == specTransDebit.RefTableId                 &&
                          taxTransOpenDebit.RecId                   == specTransDebit.RefRecId                   &&
                          taxTransOpenDebit.BudgetReceiptClassCode  == taxTransOpenCredit.BudgetReceiptClassCode &&
                          (taxTransOpenDebit.BranchId               == taxTransOpenCredit.BranchId || !calcByBranch) &&
                          taxTransOpenDebit.Amount                   > 0;
            }
        }

        if (taxTransOpenCredit.TaxSourceType == RPayTaxSourceType::TaxPayment)
        {
            if (calcByBranch)
            {
                taxRegistrationTypeId = TaxRegistrationLegislationTypes::getTaxRegistrationTypeApplicabilityRule(
                    TaxRegistrationTypesList::OKATO,
                    DirPartyBaseType::Organization).TaxRegistrationTypeApplicabilityRule;

                while select forupdate specTransDebit
                    where specTransDebit.SpecCompany == taxSettlement.company() &&
                          specTransDebit.SpecTableId == taxSettlement.TableId   &&
                          specTransDebit.SpecRecId   == taxSettlement.RecId
                join forupdate taxTransOpenDebit
                    order by TransDate asc
                    where taxTransOpenDebit.dataAreaId              == specTransDebit.RefCompany                 &&
                          taxTransOpenDebit.TableId                 == specTransDebit.RefTableId                 &&
                          taxTransOpenDebit.RecId                   == specTransDebit.RefRecId                   &&
                          taxTransOpenDebit.BudgetReceiptClassCode  == taxTransOpenCredit.BudgetReceiptClassCode &&
                          taxTransOpenDebit.Amount                   > 0
                {
                    debitDate = taxTransOpenDebit.TransDate;
                    if (taxTransOpenDebit.BranchId)
                    {
                        select validTimeState(debitDate) * from taxRegistration
                            where taxRegistration.TaxRegistrationTypeApplicabilityRule  == taxRegistrationTypeId
                        exists join taxAuthorityOKATO_RU
                            where taxAuthorityOKATO_RU.OKATO        == taxRegistration.RegistrationNumber
                        exists join taxAuthorityAddress
                            where taxAuthorityAddress.TaxAuthority  == taxAuthorityOKATO_RU.TaxAuthority &&
                                  taxAuthorityAddress.AccountNum    == taxTransOpenCredit.TaxVendor
                        exists join dirPartyLocation
                            where dirPartyLocation.RecId                    == taxRegistration.DirPartyLocation &&
                                  dirPartyLocation.IsPostalAddress          == NoYes::Yes &&
                                  dirPartyLocation.IsPrimaryTaxRegistration == NoYes::Yes
                        exists join vendTable
                            where vendTable.Party == dirPartyLocation.Party  && taxTransOpenDebit.BranchId
                        exists join branches_RU
                            where branches_RU.VendAccount   == vendTable.AccountNum &&
                                  branches_RU.BranchId       == taxTransOpenDebit.BranchId;
                    }
                    else
                    {
                        select validTimeState(debitDate) * from taxRegistration
                            where taxRegistration.TaxRegistrationTypeApplicabilityRule  == taxRegistrationTypeId
                        exists join taxAuthorityOKATO_RU
                            where taxAuthorityOKATO_RU.OKATO        == taxRegistration.RegistrationNumber
                        exists join taxAuthorityAddress
                            where taxAuthorityAddress.TaxAuthority  == taxAuthorityOKATO_RU.TaxAuthority &&
                                  taxAuthorityAddress.AccountNum    == taxTransOpenCredit.TaxVendor
                        exists join dirPartyLocation
                            where dirPartyLocation.Party                    == CompanyInfo::current() &&
                                  dirPartyLocation.RecId                    == taxRegistration.DirPartyLocation &&
                                  dirPartyLocation.IsPostalAddress          == NoYes::Yes &&
                                  dirPartyLocation.IsPrimaryTaxRegistration == NoYes::Yes;
                    }

                    if (taxRegistration)
                    {
                        break;
                    }
                }
            }
            else
            {
                select firstonly forupdate specTransDebit
                    where specTransDebit.SpecCompany == taxSettlement.company() &&
                          specTransDebit.SpecTableId == taxSettlement.TableId   &&
                          specTransDebit.SpecRecId   == taxSettlement.RecId
                join firstonly forupdate taxTransOpenDebit
                    order by TransDate asc
                    where taxTransOpenDebit.dataAreaId              == specTransDebit.RefCompany                 &&
                          taxTransOpenDebit.TableId                 == specTransDebit.RefTableId                 &&
                          taxTransOpenDebit.RecId                   == specTransDebit.RefRecId                   &&
                          taxTransOpenDebit.BudgetReceiptClassCode  == taxTransOpenCredit.BudgetReceiptClassCode &&
                          taxTransOpenDebit.Amount                   > 0;
            }
        }

        if (! specTransDebit)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initLedgerVoucher()
    {
        TransactionTxt  transactionTxt;
        NumberSeq       numberSeq;

        if (! voucher || manual)
        {
            numberSeq = NumberSeq::newGetVoucher(RPayParameters::numRefTaxRefundOffsetVoucher());
            voucher = numberSeq.voucher();
        }

        transactionTxt = TransactionTxt::construct();
        transactionTxt.setType(LedgerTransTxt::RPayTaxRefundOffset);
        transactionTxt.setVoucher(voucher);

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail,
                                                     SysModule::Payroll,
                                                     RPayParameters::numRefTaxRefundOffsetVoucher().numberSequenceTable().NumberSequence);

        ledgerVoucher.parmCheckBlockedDimensions(false);

        ledgerVoucher.addVoucher(
            LedgerVoucherObject::newVoucher(voucher,
                                            transactionDate,
                                            SysModule::Payroll,
                                            LedgerTransType::Payroll));

        ledgerVoucher.findLedgerVoucherObject().lastTransTxt(transactionTxt.txt());
        ledgerVoucher.findLedgerVoucherObject().parmVoucherCheck(false);

        ledgerBondClient = ledgerVoucher.findLedgerVoucherObject().ledgerBondClient_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new(RPayTaxSettlement _taxSettlement)
    {
        taxSettlement   = _taxSettlement;
        voucher         = taxSettlement.Voucher;
        calcByBranch    = RPayTaxParameters::find().CalcByBranch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmManual</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes parmManual(NoYes _manual = manual)
    {
        manual = _manual;
        return manual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxRefundOffset</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void postTaxRefundOffset()
    {
        RPayTrans payTrans = RPayTrans::find(taxTransOpenCredit.RefRecId);

        ledgerVoucher.addTrans(
            LedgerVoucherTransObject::newBasicDefault(
                ledgerVoucher.findLedgerVoucherObject(),
                LedgerPostingType::RPayTaxRefundOffset,
                LedgerDimensionFacade::serviceCreateLedgerDimension(taxTransOpenCredit.taxAccountOutgoing(), payTrans.getDefaultDimension()),
                CompanyInfoHelper::standardCurrency(),
                settleAmountDebit,
                0,
                0));

        ledgerVoucher.addTrans(
            LedgerVoucherTransObject::newBasicDefault(
                ledgerVoucher.findLedgerVoucherObject(),
                LedgerPostingType::RPayTaxRefundOffset,
                LedgerDimensionFacade::serviceCreateLedgerDimension(taxTransOpenCredit.taxAccountDeffered(), payTrans.getDefaultDimension()),
                CompanyInfoHelper::standardCurrency(),
                -settleAmountDebit,
                0,
                0));

        if (ledgerBondClient)
        {
            ledgerBondClient.bondVRef2VRef(ledgerBondClient.lastVrefId(),
                                           ledgerBondClient.lastVrefId(-1));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleNow</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void settleNow()
    {
        boolean areDebitsDone, areCreditsDone;
        boolean refundOffset;

        ttsbegin;

        this.calcTransDate();

        while (! areCreditsDone || ! areDebitsDone)
        {
            areCreditsDone = this.fetchCreditTrans();
            areDebitsDone  = this.fetchDebitTrans();

            if (areCreditsDone)
            {
                break;
            }

            if (areDebitsDone)
            {
                specTransCredit.delete();
                continue;
            }

            settleAmountDebit = min(specTransDebit.Balance01, -specTransCredit.Balance01);
            settleAmountCredit = -settleAmountDebit;

            if (settleAmountDebit)
            {
                this.updateSettleAmount(settleAmountDebit, taxTransOpenDebit, specTransDebit);
                this.updateSettleAmount(settleAmountCredit, taxTransOpenCredit, specTransCredit);

                refundOffset = taxTransOpenCredit.TaxSourceType == RPayTaxSourceType::TaxRedemption;

                if (refundOffset)
                {
                    if (! ledgerVoucher)
                    {
                        this.initLedgerVoucher();
                    }

                    this.postTaxRefundOffset();
                }

                this.updateSettlement(taxTransOpenDebit.RecId,
                                      taxTransOpenCredit.RecId,
                                      settleAmountDebit,
                                      taxTransOpenDebit.TransDate,
                                      refundOffset);

                this.updateSettlement(taxTransOpenCredit.RecId,
                                      taxTransOpenDebit.RecId,
                                      settleAmountCredit,
                                      taxTransOpenCredit.TransDate,
                                      refundOffset);
            }
        }

        this.endLedgerVoucher();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettleAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateSettleAmount(
        Amount              _updateAmount,
        RPayTaxTransOpen    _taxTransOpen,
        SpecTrans           _specTrans)
    {
        _taxTransOpen.SettleAmount += _updateAmount;
        _specTrans.Balance01 -= _updateAmount;

        if (_taxTransOpen.Amount == _taxTransOpen.SettleAmount)
        {
            _taxTransOpen.Closed = NoYes::Yes;
        }

        _taxTransOpen.update();

        if (_specTrans.Balance01 == 0)
        {
            _specTrans.delete();
        }
        else
        {
            _specTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettlement</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateSettlement(
        RecId       _transRecId,
        RecId       _offsetRecId,
        Amount      _settleAmount,
        TransDate   _transDate,
        boolean     _refundOffset)
    {
        RPayTaxTransSettlement taxTransSettlement;

        taxTransSettlement.SettleDate       = transactionDate;
        taxTransSettlement.SettleVoucher    = _refundOffset ? voucher : '';
        taxTransSettlement.TransDate        = _transDate;
        taxTransSettlement.TransRecId       = _transRecId;
        taxTransSettlement.OffsetRecId      = _offsetRecId;
        taxTransSettlement.SettleAmount     = _settleAmount;
        taxTransSettlement.CanBeReversed    = NoYes::Yes;
        taxTransSettlement.Manual           = manual;

        taxTransSettlement.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayTaxSettle construct(RPayTaxSettlement _taxSettlement)
    {
        return new RPayTaxSettle(_taxSettlement);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>