<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadPlanningWorkbenchServerForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Service side controller class for the <c>WHSLoadPlanningWorkbenchForm</c> form.
/// </summary>
public class WHSLoadPlanningWorkbenchServerForm
{
    protected Weight             weight;
    protected Volume             volume;
    protected TMSLoadPaysFreight loadPaysFreight;
    protected WHSLoadLine        tmpLoadLine;
    protected boolean            assignEarliestSchedShipDateTime;
    private   boolean            loadCreationAttemptForDifferentWHS;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findRateDemandLineFromActiveRecord</Name>
				<Source><![CDATA[
    public Common findRateDemandLineFromActiveRecord(Common _activeRecord)
    {
        Common buffer;

        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransportRequestLoadLinesToLoad</Name>
				<Source><![CDATA[
    private void addTransportRequestLoadLinesToLoad(WHSLoadTable _loadTable)
    {
        WHSLoadLine             loadLine;
        TMSTransportRequestLine requestLine;

        while select tmpLoadLine
            where tmpLoadLine.Qty > 0
        {
            select firstonly forupdate loadLine
                where loadLine.LoadId           == _loadTable.LoadId
                   && loadLine.InventTransId    == tmpLoadLine.InventTransId
                   && loadLine.InventDimId      == tmpLoadLine.InventDimId
                   && loadLine.PackingQty       == tmpLoadLine.PackingQty;

            if (loadLine)
            {
                loadLine.Qty += tmpLoadLine.Qty;
                loadLine.QtyLeftToStructure += tmpLoadLine.Qty;
                loadLine.update();

                // Reserve inventory if the warehouse is set to reserve at load post.
                if (_loadTable.LoadDirection == WHSLoadDirection::Outbound
                    && loadLine.ShipmentId
                    && InventLocation::find(_loadTable.InventLocationId).ReserveAtLoadPost)
                {
                    WHSLoadLine::reserveLoadLineHandlingQty(loadLine, tmpLoadLine.InventQty);
                }
            }
            else
            {
                buf2Buf(tmpLoadLine, loadLine);
                loadLine.LoadId = _loadTable.LoadId;
                loadLine.QtyLeftToStructure = loadLine.Qty;

                if (_loadTable.LoadStatus == WHSLoadStatus::Shipped
                    && InventTable::find(loadLine.ItemId).ItemType == ItemType::Service)
                {
                    loadLine.WorkCreatedQty = loadLine.InventQty;
                }

                this.addLoadLineToShipment(_loadTable, loadLine);

                if (tmpLoadLine.TransportRequest)
                {
                    select firstonly InventTransType, OrderNum from requestLine
                        where requestLine.InventTransId       == tmpLoadLine.InventTransId
                            && requestLine.PackingQty         == tmpLoadLine.PackingQty
                            && requestLine.TransportRequestId == tmpLoadLine.OrderNum
                            && requestLine.InventDimId        == tmpLoadLine.InventDimId
                            && requestLine.InventTransType    == tmpLoadLine.InventTransType;

                    loadLine.ParentInventTransType  = requestLine.InventTransType;
                    loadLine.ParentOrderNum         = requestLine.OrderNum;
                }

                if (loadLine.canInsertInBulkFromLoadPlanningWorkbench())
                {
                    loadLine.insert(true, true, this.parmtAssignEarliestSchedShipDateTime());

                    if (tmpLoadLine.isInboundTransportRequestLine())
                    {
                        // In the special case of an inbound transport request, we need to first call
                        // insert() above in order to trigger an update of the transport request before
                        // updating the order number and transaction type.
                        loadLine.initializeInboundLoadFromTransportRequestLine(requestLine);
                    }
                }
            }
        }

        this.updateInboundTransportRequestForAllLoadLines(_loadTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInboundTransportRequestForAllLoadLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the TransportRequest to No after all of the above logic is executed, to avoid 
    /// side effect e.g. in the assign address when creating load with multiple lines. 
    /// Adding multiple TransportRequestLine to a load would result in wrong origin and 
    /// destination address if the TransportRequest is set to No on the first load line.
    /// For inbound scenario we want the load to contain references to purchase order instead 
    /// of the transport request. This is happening in the updateInboundTransportRequestLineFields method.
    /// </summary>
    /// <param name = "_loadTable">An instance of the load record.</param>
    private void updateInboundTransportRequestForAllLoadLines(WHSLoadTable _loadTable)
    {
        WHSLoadLine loadLine;
        ttsbegin;
        update_recordset loadLine
            setting
                TransportRequest = NoYes::No
            where
                loadLine.TransportRequest == NoYes::Yes
             && loadLine.LoadDirection    == WHSLoadDirection::Inbound
             && loadLine.LoadId           == _loadTable.LoadId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadLinesFieldsFromInboundTransportRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates TransportRequest, OrderNum and InventTransType of <c>WHSLoadLine</c> records for inbound transport requests for specified load. 
    /// </summary>
    /// <param name = "_loadTable"> An instance of the load record </param>
    private void updateLoadLinesFieldsFromInboundTransportRequest(WHSLoadTable _loadTable)
    {
        WHSLoadLine             loadLine;
        TMSTransportRequestLine transportRequestLine;

        update_recordset loadLine
            setting
                TransportRequest = NoYes::No,
                OrderNum         = transportRequestLine.OrderNum,
                InventTransType  = transportRequestLine.InventTransType
            where loadLine.TransportRequest == NoYes::Yes &&
                  loadLine.LoadDirection    == WHSLoadDirection::Inbound &&
                  loadLine.LoadId           == _loadTable.LoadId
                join OrderNum, InventTransType from transportRequestLine
                    where transportRequestLine.TransportRequestId == loadLine.OrderNum &&
                          transportRequestLine.InventTransId      == loadLine.InventTransId &&
                          transportRequestLine.InventDimId        == loadLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLineToAddWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the where clause to find the load line to add.
    /// </summary>
    /// <param name = "_loadLine">The load line cursor for the where clause.</param>
    /// <param name = "_loadTable">The load table for the line.</param>
    /// <param name = "_tmpLoadLine">The temporary load line to find the actual load line for.</param>
    /// <returns>The where clause.</returns>
    protected SysDaQueryExpression loadLineToAddWhereClause(
        WHSLoadLine _loadLine,
        WHSLoadTable _loadTable,
        WHSLoadLine  _tmpLoadLine)
    {
        return
            new SysDaEqualsExpression(new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, LoadId)), new SysDaValueExpression(_loadTable.LoadId)).and(
            new SysDaEqualsExpression(new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, InventTransId)), new SysDaValueExpression(_tmpLoadLine.InventTransId)).and(
            new SysDaEqualsExpression(new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, InventDimId)), new SysDaValueExpression(_tmpLoadLine.InventDimId)).and(
            new SysDaEqualsExpression(new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, PackingQty)), new SysDaValueExpression(_tmpLoadLine.PackingQty)))));
   }

]]></Source>
			</Method>
			<Method>
				<Name>findLoadLineToAdd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the load line to add.
    /// </summary>
    /// <param name = "_loadTable">The load table for the line.</param>
    /// <param name = "_tmpLoadLine">The temporary load line to find the actual load line for.</param>
    /// <returns>A load line record selected for update.</returns>
    private WHSLoadLine findLoadLineToAdd(
        WHSLoadTable _loadTable, 
        WHSLoadLine  _tmpLoadLine)
    {
        WHSLoadLine loadLine;
        
        SysDaQueryObject queryObject = new SysDaQueryObject(loadLine);
        queryObject.firstOnlyHint = true;
        queryObject.forUpdateHint = true;
        queryObject.whereClause(this.loadLineToAddWhereClause(loadLine, _loadTable, _tmpLoadLine));
        SysDaFindObject findObject = new SysDaFindObject(queryObject);
        new SysDaFindStatement().execute(findObject);

        return loadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLoadLinesToLoad</Name>
				<Source><![CDATA[
    private void addLoadLinesToLoad(
        WHSLoadTable _loadTable)
    {
        WHSLoadTableUpdater loadTableUpdater = WHSLoadTableUpdater::newFromAddLoadLinesToLoad(_loadTable);
        boolean shouldSkipQtyLeftToStructureCalculation = WHSCalculateQuantityLeftToStructureOnlyOnLoadLineUpdateV2Flight::instance().isEnabled();

        while select tmpLoadLine
            where tmpLoadLine.Qty > 0
        {
            WHSLoadLine loadLine = this.findLoadLineToAdd(_loadTable, tmpLoadLine);

            if (loadLine)
            {
                // The original load line is needed to determine what needs to be modified on the load.
                WHSLoadLine origLoadLine;
                buf2Buf(loadLine, origLoadLine);

                loadLine.Qty += tmpLoadLine.Qty;
                
                if (!shouldSkipQtyLeftToStructureCalculation)
                {
                    loadLine.QtyLeftToStructure += tmpLoadLine.Qty;
                }

                using (WHSLoadLineInsertMethodParameters insertParameters = WHSLoadLineInsertMethodParameters::newSkipLoadTableUpdate())
                {
                    loadLine.update();
                }

                loadTableUpdater.modifyOnLoadLineUpdate(loadLine, origLoadLine);
            }
            else
            {
                buf2Buf(tmpLoadLine, loadLine);
                loadLine.LoadId = _loadTable.LoadId;
                loadLine.QtyLeftToStructure = loadLine.Qty;

                if (_loadTable.LoadStatus == WHSLoadStatus::Shipped && InventTable::find(loadLine.ItemId).ItemType == ItemType::Service)
                {
                    loadLine.WorkCreatedQty = loadLine.InventQty;
                }

                this.addLoadLineToShipment(_loadTable, loadLine);

                if (loadLine.canInsertInBulkFromLoadPlanningWorkbench())
                {
                    using (WHSLoadLineInsertMethodParameters insertParameters = WHSLoadLineInsertMethodParameters::newSkipLoadTableUpdate())
                    {
                        loadLine.insert();
                    }

                    loadTableUpdater.modifyOnLoadLineInsert(loadLine, this.parmtAssignEarliestSchedShipDateTime());
                }
            }
        }

        loadTableUpdater.updateAfterAddingLines();

        // loadTableUpdater.updateAfterAddingLines() method needs origin value of the first load line to correctly update the loadTable.
        // After all of the above logic is executed we need to override values for lines that were created from inbound transport request lines 
        // because we want load lines to contain references to original order instead of the transport request.
        this.updateLoadLinesFieldsFromInboundTransportRequest(_loadTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLoadLineToShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the load line to a shipment.
    /// </summary>
    /// <param name = "_loadTable">The <c>WHSLoadTable</c> buffer where the load line should be added to the shipment.</param>
    /// <param name = "_loadLine">The <c>WHSLoadLine</c> buffer that should be added to the shipment.</param>
    protected void addLoadLineToShipment(WHSLoadTable _loadTable, WHSLoadLine _loadLine)
    {
        if (_loadLine.InventTransType == InventTransType::Purch)
        {
            _loadLine.ShipmentId = _loadTable.addPurchLineToShipment(_loadLine.getOrderCommonFromLoadLine() as PurchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>areAnyTransportRequestLinesBeingAdded</Name>
				<Source><![CDATA[
    private boolean areAnyTransportRequestLinesBeingAdded()
    {
        select firstonly RecId from tmpLoadLine
            where tmpLoadLine.TransportRequest == NoYes::Yes;

        return (tmpLoadLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLoadLinesToNewLoad</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the selected order lines as load lines to the specified load which has just been created.
    /// </summary>
    /// <param name="_loadTable">
    ///    The <c>WHSLoadTable</c> buffer the load lines are added to which has just been created.
    /// </param>
    public void addLoadLinesToNewLoad(WHSLoadTable _loadTable)
    {
        ttsbegin;

        // Transport loads are not optimized.
        if (this.areAnyTransportRequestLinesBeingAdded())
        {
            this.addTransportRequestLoadLinesToLoad(_loadTable);
        }
        else
        {
            this.addLoadLinesToLoad(_loadTable);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLoadLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the selected order lines as load lines to the specified load.
    /// </summary>
    /// <param name="_loadTable">
    ///    The <c>WHSLoadTable</c> buffer the load lines are added to.
    /// </param>
    public void addLoadLines(WHSLoadTable  _loadTable)
    {
        ttsbegin;
        using (var skipAddressesUpdateContext = WHSLoadPlanningSkipAddressesUpdateContext::newFromParameter(true))
        {
            this.addLoadLinesToLoad(_loadTable);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addShipmentToLoad</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds all load lines associated with a shipment to a load.
    /// </summary>
    /// <param name="_whsLoadTable">
    ///    The <c>WHSLoadTable</c> buffer the load lines are added to.
    /// </param>
    /// <param name="_whsShipmentTable">
    ///    The <c>WHSShipmentTable</c> buffer specifying the load lines which are added to the load.
    /// </param>
    /// <param name="_loadTemplateId">
    ///    The Load template ID used to apply to the load.
    /// </param>
    /// <param name="_counter">
    ///    A counter describing the amount of times the method is called.
    /// </param>
    /// <returns>
    ///    The updated <c>WHSShipmentTable</c> buffer.
    /// </returns>
    /// <remarks>
    ///    The Load template is only applied if the shipment is the first shipment added to the load.
    /// </remarks>
    public WHSShipmentTable addShipmentToLoad(
        WHSLoadTable        _whsLoadTable,
        WHSShipmentTable    _whsShipmentTable,
        WHSLoadTemplateId   _loadTemplateId,
        int                 _counter)
    {
        WHSLoadLine         loadLine;

        WHSLoadPlanningWorkbenchServerForm::validateShipmentAddress(_whsShipmentTable);

        // ensures that the Pays Freight on the associated orders' dlvTerms are in sync
        this.parmLoadPaysFreight(this.evaluatePaysFreight(_whsShipmentTable, _counter));

        ttsbegin;

        WHSShipmentTable::addShipmentToLoadTable(_whsShipmentTable.ShipmentId, _whsLoadTable);

        if (_whsLoadTable.displayNumberOfShipments() == 1)
        {
            _whsLoadTable.initFromLoadTemplateId(_loadTemplateId);
            _whsLoadTable.initFromShipment(_whsShipmentTable);
        }

        ttscommit;

        return _whsShipmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addShipmentToNewLoadInsert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a new load with updated origin and destination addresses.
    /// </summary>
    /// <param name="_loadTable">
    ///    The <c>WHSLoadTable</c> buffer to be inserted.
    /// </param>
    /// <param name="_shipmentTable">
    ///    The <c>WHSShipmentTable</c> buffer used to set the origin and destination addresses.
    /// </param>
    /// <param name="_inventLocationId">
    ///    The InventLocation ID used to set the origin and destination addresses.
    /// </param>
    public void addShipmentToNewLoadInsert(
        WHSLoadTable        _loadTable,
        WHSShipmentTable    _shipmentTable,
        InventLocationId    _inventLocationId)
    {
        TMSAddressPhone         addressPhone = new TMSAddressPhone();
        
        if (_loadTable.LoadDirection == WHSLoadDirection::Inbound)
        {
            _loadTable.initOriginAddress(_shipmentTable.deliveryAddress());
            addressPhone.setLogisticsPostalAddress(PurchTable::find(_loadTable.OrderNum).deliveryAddress());
            _loadTable.initDestinationAddress(addressPhone);
        }
        else if (_loadTable.LoadDirection == WHSLoadDirection::Outbound)
        {
            _loadTable.initOriginAddress(TMSAddressPhone::initfromInventLocation(InventLocation::find(_inventLocationId)));
            _loadTable.initDestinationAddress(_shipmentTable.deliveryAddress());
        }

        _loadTable.LoadPaysFreight = this.parmLoadPaysFreight();

        if (!_loadTable.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSLoadTable)));
        }
        else
        {
            _loadTable.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addShipmentToNewLoadPopulateTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates values on the load based on shipment and load template information.
    /// </summary>
    /// <param name="_loadTemplateId">
    ///    The Load template ID specifying the default values applied to the load.
    /// </param>
    /// <param name="_shipmentTable">
    ///    The <c>WHSShipmentTable</c> buffer used to default values onto the load.
    /// </param>
    /// <param name="_loadTable">
    ///    The <c>WHSLoadTable</c> buffer which has values applied.
    /// </param>
    /// <param name="_counter">
    ///    A counter describing the amount of times the method is called.
    /// </param>
    /// <returns>
    ///    An updated <c>WHSLoadTable</c>.
    /// </returns>
    public WHSLoadTable addShipmentToNewLoadPopulateTable(
        WHSLoadTemplateId   _loadTemplateId,
        WHSShipmentTable    _shipmentTable,
        WHSLoadTable        _loadTable,
        int                 _counter)
    {
        WHSLoadTable        loadTable = _loadTable;

        WHSLoadPlanningWorkbenchServerForm::validateShipmentAddress(_shipmentTable);

        // ensures that the Pays Freight on the associated orders' dlvTerms are in sync
        this.parmLoadPaysFreight(this.evaluatePaysFreight(_shipmentTable, _counter));

        loadTable.initFromLoadTemplateId(_loadTemplateId);
        loadTable.initFromShipment(_shipmentTable);

        return loadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addShipmentToNewLoadTableUnassigned</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds all load lines on a shipment to a load.
    /// </summary>
    /// <param name="_shipmentTable">
    ///    The <c>WHSShipmentTable</c> specifying the load lines to add to the load.
    /// </param>
    /// <param name="_loadTable">
    ///    The <c>WHSLoadTable</c> the shipment should be added to.
    /// </param>
    public void addShipmentToNewLoadTableUnassigned(
        WHSShipmentTable   _shipmentTable,
        WHSLoadTable       _loadTable)
    {
        WHSShipmentTable::addShipmentToLoadTable(_shipmentTable.ShipmentId, _loadTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearGlobalVariables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear internal global variables.
    /// </summary>
    public void clearGlobalVariables()
    {
        tmpLoadLine = null;
        assignEarliestSchedShipDateTime = true;
        tmpLoadLine.setTmp();

        this.parmWeight(0);
        this.parmVolume(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLineFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a temporary load line for a given purchase order line
    /// </summary>
    /// <param name="_inventTransSumDimPurch">
    /// The <c>InventTransSumDimPurch</c> record from the form
    /// </param>
    private void createTmpLoadLineFromPurchLine(WHSInventTransSumDim _inventTransSumDimPurch)
    {
        select firstonly RecId from tmpLoadLine
            where tmpLoadLine.InventTransId == _inventTransSumDimPurch.InventTransId
               && tmpLoadLine.InventDimId   == _inventTransSumDimPurch.InventDimId;

        if (tmpLoadLine.RecId != 0)
        {
            return;
        }

        ttsbegin;

        PurchLine purchLine = PurchLine::findInventTransId(_inventTransSumDimPurch.InventTransId);
        WHSLoadPlanningWorkbenchServerForm::validatePurchLineAddress(purchLine);

        InventQty   qtyLeftToLoadInvent;
        Qty         qtyLeftToLoad;

        [qtyLeftToLoad, qtyLeftToLoadInvent] = this.calcLeftToLoadQuantities(_inventTransSumDimPurch, purchLine);

        tmpLoadLine.clear();
        tmpLoadLine.initFromPurchLine(purchLine);
        tmpLoadLine.Qty                         = qtyLeftToLoad;
        tmpLoadLine.InventQty                   = qtyLeftToLoadInvent;
        tmpLoadLine.QtyLeftToStructure          = qtyLeftToLoad;
        tmpLoadLine.InventDimId                 = _inventTransSumDimPurch.InventDimId;
        tmpLoadLine.setPackingQty();
        tmpLoadLine.doInsert();

        this.addWeight(tmpLoadLine.displayItemWeight());
        this.addVolume(tmpLoadLine.displayItemVolume());

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLineFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a temporary load line for a given sales order line
    /// </summary>
    /// <param name="_inventTransSumDimSales">
    /// The <c>WHSInventTransSumDim</c> record from the form
    /// </param>
    private void createTmpLoadLineFromSalesLine(WHSInventTransSumDim _inventTransSumDimSales)
    {
        InventTable         inventTable;

        select firstonly RecId from tmpLoadLine
            where tmpLoadLine.InventTransId == _inventTransSumDimSales.InventTransId
               && tmpLoadLine.InventDimId   == _inventTransSumDimSales.InventDimId;

        InventHandlingQty handlingQtyLeftToLoad = _inventTransSumDimSales.displayQtyLeftToLoadOutbound();

        if (tmpLoadLine.RecId != 0 || !this.canGenerateTmpLoadLineFromSourceLine(_inventTransSumDimSales, handlingQtyLeftToLoad))
        {
            return;
        }

        ttsbegin;

        SalesLine salesLine = SalesLine::findInventTransId(_inventTransSumDimSales.InventTransId);

        WHSLoadPlanningWorkbenchServerForm::validateSalesLineAddress(salesLine);

        Qty qtyLeftToLoad;

        if (PdsGlobal::pdsIsCWItem(salesLine.ItemId))
        {
            // Catch weight items store load line quantities in the catch weight unit.
            qtyLeftToLoad = handlingQtyLeftToLoad;
        }
        else
        {
            qtyLeftToLoad = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                                salesLine.InventDimId,
                                                                                                handlingQtyLeftToLoad,
                                                                                                InventTableModule::find(salesLine.ItemId, ModuleInventPurchSales::Invent).UnitId,
                                                                                                salesLine.SalesUnit,
                                                                                                NoYes::No);
        }

        tmpLoadLine.clear();
        tmpLoadLine.initFromSalesLine(salesLine);
        tmpLoadLine.QtyLeftToStructure          = qtyLeftToLoad;
        tmpLoadLine.InventQty                   = handlingQtyLeftToLoad;
        tmpLoadLine.Qty                         = qtyLeftToLoad;
        tmpLoadLine.InventDimId                 = _inventTransSumDimSales.InventDimId;
        tmpLoadLine.setPackingQty();
        tmpLoadLine.doInsert();

        this.addWeight(tmpLoadLine.displayItemWeight());
        this.addVolume(tmpLoadLine.displayItemVolume());

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGenerateTmpLoadLineFromSourceLine</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean canGenerateTmpLoadLineFromSourceLine(WHSInventTransSumDim _inventTransSumDimSource, InventHandlingQty _handlingQtyLeftToLoad)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLineFromTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a temporary load line for a given transfer order line
    /// </summary>
    /// <param name="_inventTransSumDimTransfer">
    /// The <c>WHSInventTransSumDim</c> record from the form
    /// </param>
    private void createTmpLoadLineFromTransferLine(WHSInventTransSumDim _inventTransSumDimTransfer)
    {
        InventTable inventTable;

        select firstonly RecId from tmpLoadLine
            where tmpLoadLine.InventTransId == _inventTransSumDimTransfer.InventTransId
                && tmpLoadLine.InventDimId  == _inventTransSumDimTransfer.InventDimId;

        InventHandlingQty   handlingQtyLeftToLoad = _inventTransSumDimTransfer.displayQtyLeftToLoadOutbound();

        if (tmpLoadLine.RecId != 0 || !this.canGenerateTmpLoadLineFromSourceLine(_inventTransSumDimTransfer, handlingQtyLeftToLoad))
        {
            return;
        }

        ttsbegin;

        InventTransferLine transferLine = InventTransferLine::findTransIdShip(_inventTransSumDimTransfer.InventTransId);
        
        Qty                 qtyLeftToLoad;

        if (PdsGlobal::pdsIsCWItem(transferLine.ItemId))
        {
            // Catch weight items store load line quantities in the catch weight unit.
            qtyLeftToLoad = handlingQtyLeftToLoad;
        }
        else
        {
            qtyLeftToLoad = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(transferLine.ItemId,
                                                                                                transferLine.InventDimId,
                                                                                                handlingQtyLeftToLoad,
                                                                                                InventTableModule::find(transferLine.ItemId, ModuleInventPurchSales::Invent).UnitId,
                                                                                                transferLine.UnitId,
                                                                                                NoYes::No);
        }

        tmpLoadLine.clear();
        tmpLoadLine.initFromTransferLine(transferLine);
        tmpLoadLine.Qty                             = qtyLeftToLoad;
        tmpLoadLine.InventQty                       = handlingQtyLeftToLoad;
        tmpLoadLine.QtyLeftToStructure              = qtyLeftToLoad;
        tmpLoadLine.InventDimId                     = _inventTransSumDimTransfer.InventDimId;
        tmpLoadLine.setPackingQty();
        tmpLoadLine.doInsert();

        this.addWeight(tmpLoadLine.displayItemWeight());
        this.addVolume(tmpLoadLine.displayItemVolume());

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLineFromTransRequestLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a temporary load line for a given transport request line
    /// </summary>
    /// <param name="_transportRequestLine">
    /// The <c>TMSTransportRequestLine</c> record from the form
    /// </param>
    private void createTmpLoadLineFromTransRequestLine(TMSTransportRequestLine _transportRequestLine)
    {
        select firstonly RecId from tmpLoadLine
            where tmpLoadLine.InventTransId == _transportRequestLine.InventTransId
                && tmpLoadLine.InventDimId == _transportRequestLine.InventDimId;

        if (tmpLoadLine.RecId != 0)
        {
            return;
        }

        ttsbegin;

        tmpLoadLine.clear();
        tmpLoadLine.initFromTransportRequestLine(_transportRequestLine);
        tmpLoadLine.QtyLeftToStructure  = _transportRequestLine.QtyLeftToTransport;
        tmpLoadLine.Qty = _transportRequestLine.QtyLeftToTransport;
        tmpLoadLine.InventQty = InventTableModule::unitConvert(tmpLoadLine.ItemId,
                                                               ModuleInventPurchSales::Invent,
                                                               tmpLoadLine.UOM,
                                                               tmpLoadLine.Qty,
                                                               tmpLoadLine.InventDimId);

        tmpLoadLine.doInsert();

        this.addWeight(tmpLoadLine.displayItemWeight());
        this.addVolume(tmpLoadLine.displayItemVolume());

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesPurchLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates temporary load lines for a given purchase order or purchase order line.
    /// </summary>
    /// <param name="_addOrder">
    ///    A boolean specifying whether the entire order should be added or only a single line.
    /// </param>
    /// <param name="_inventTransSumDimPurch">
    /// The <c>InventTransSumDimPurch</c> record from the form
    /// </param>
    /// <param name="_counter">
    ///    A counter describing the amount of times the method is called.
    /// </param>
    public void createTmpLoadLinesPurchLines(
        boolean                 _addOrder,
        WHSInventTransSumDim    _inventTransSumDimPurch,
        int                     _counter)
    {
        PurchLine               purchLine;
        WHSInventTransSumDim    inventTransSumDim;
        TMSInventEnabled        tmsInventEnabled;

        // ensures that the Pays Freight on the associated orders' dlvTerms are in sync
        PurchTable purchTable = PurchLine::findInventTransId(_inventTransSumDimPurch.InventTransId).purchTable();
        this.parmLoadPaysFreight(this.evaluatePaysFreight(purchTable, _counter));

        InventLocationId currentInventLocationId = InventDim::find(_inventTransSumDimPurch.inventDimId).InventLocationId;
        InventDim inventDim;

        if (_addOrder)
        {
            boolean restrictToSameWarehouseWhenCreatingLoads = this.restrictToSameWarehouseWhenCreatingLoads();
            boolean showWarningForDifferentWHS;

            while select inventTransSumDim
                join TableId from purchLine
                where inventTransSumDim.InventTransId   == purchLine.InventTransId
                    && purchLine.PurchId                 == purchTable.purchId
                join TableId from tmsInventEnabled
                where tmsInventEnabled.ItemId           == purchLine.ItemId
                join InventLocationId from inventDim
                    where inventDim.inventDimId == inventTransSumDim.inventDimId
            {
                if (restrictToSameWarehouseWhenCreatingLoads &&
                    inventDim.InventLocationId != currentInventLocationId)
                {
                    showWarningForDifferentWHS = true;
                    continue;
                }

                this.createTmpLoadLineFromPurchLine(inventTransSumDim);
            }

            if (showWarningForDifferentWHS)
            {
                warning(strFmt("@WAX:LPWDifferentWarehousesWarning", currentInventLocationId));
            }
        }
        else
        {
            this.createTmpLoadLineFromPurchLine(_inventTransSumDimPurch);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>restrictToSameWarehouseWhenCreatingLoads</Name>
				<Source><![CDATA[
    protected boolean restrictToSameWarehouseWhenCreatingLoads()
    {
        return true;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesSalesLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates temporary load lines for a given sales order or sales order line.
    /// </summary>
    /// <param name="_addOrder">
    ///    A boolean specifying whether the entire order should be added or only a single line.
    /// </param>
    /// <param name="_inventTransSumDimSales">
    /// The <c>WHSInventTransSumDim</c> record from the form
    /// </param>
    /// <param name="_counter">
    ///    A counter describing the amount of times the method is called.
    /// </param>
    public void createTmpLoadLinesSalesLines(
        boolean                 _addOrder,
        WHSInventTransSumDim    _inventTransSumDimSales,
        int                     _counter)
    {
        SalesLine               salesLine;
        WHSInventTransSumDim    inventTransSumDim;
        TMSInventEnabled        tmsInventEnabled;

        // ensures that the Pays Freight on the associated orders' dlvTerms are in sync
        SalesTable salesTable = SalesLine::findInventTransId(_inventTransSumDimSales.InventTransId).salesTable();
        this.parmLoadPaysFreight(this.evaluatePaysFreight(salesTable, _counter));

        InventLocationId currentInventLocationId = InventDim::find(_inventTransSumDimSales.inventDimId).InventLocationId;
        InventDim inventDim;

        if (_addOrder)
        {
            boolean restrictToSameWarehouseWhenCreatingLoads = this.restrictToSameWarehouseWhenCreatingLoads();
            boolean showWarningForDifferentWHS;

            while select inventTransSumDim
                join TableId from salesLine
                where inventTransSumDim.InventTransId   == salesLine.InventTransId
                    && salesLine.SalesId                 == salesTable.SalesId
                join TableId from tmsInventEnabled
                where tmsInventEnabled.ItemId           == salesLine.ItemId
                join InventLocationId from inventDim
                    where inventDim.inventDimId == inventTransSumDim.inventDimId
            {
                if (restrictToSameWarehouseWhenCreatingLoads &&
                    inventDim.InventLocationId != currentInventLocationId)
                {
                    showWarningForDifferentWHS = true;
                    continue;
                }

                this.createTmpLoadLineFromSalesLine(inventTransSumDim);
            }

            if (showWarningForDifferentWHS)
            {
                warning(strFmt("@WAX:LPWDifferentWarehousesWarning", currentInventLocationId));
            }
        }
        else
        {
            this.createTmpLoadLineFromSalesLine(_inventTransSumDimSales);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesTransferLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates temporary load lines for a given transfer order or transfer order line.
    /// </summary>
    /// <param name="_addOrder">
    ///    A boolean specifying whether the entire order should be added or only a single line.
    /// </param>
    /// <param name="_inventTransSumDimTransfer">
    /// The <c>WHSInventTransSumDim</c> record from the form
    /// </param>
    /// <param name="_counter">
    ///    A counter describing the amount of times the method is called.
    /// </param>
    public void createTmpLoadLinesTransferLines(
        boolean                 _addOrder,
        WHSInventTransSumDim    _inventTransSumDimTransfer,
        int                     _counter)
    {
        InventTransferLine      transferLine;
        WHSInventTransSumDim    inventTransSumDim; 
        TMSInventEnabled        tmsInventEnabled;
        
        // ensures that the Pays Freight on the associated orders' dlvTerms are in sync
        InventTransferTable transferTable = InventTransferLine::findTransIdShip(_inventTransSumDimTransfer.InventTransId).inventTransferTable();
        this.parmLoadPaysFreight(this.evaluatePaysFreight(transferTable, _counter));
            
        if (_addOrder)
        {
            while select inventTransSumDim
                exists join transferLine
                    where inventTransSumDim.InventTransId   == transferLine.InventTransId
                        && transferLine.TransferId          == transferTable.transferId
                exists join tmsInventEnabled
                    where tmsInventEnabled.ItemId           == transferLine.ItemId
            {
                this.createTmpLoadLineFromTransferLine(inventTransSumDim);
            }
        }
        else
        {
            this.createTmpLoadLineFromTransferLine(_inventTransSumDimTransfer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesTransportRequestLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates temporary load lines for a given transport request or transport request line.
    /// </summary>
    /// <param name="_addOrder">
    ///    A boolean specifying whether the entire order should be added or only a single line.
    /// </param>
    /// <param name="_transportRequestLine">
    /// The <c>TMSTransportRequestLine</c> record from the form
    /// </param>
    public void createTmpLoadLinesTransportRequestLines(
        boolean                 _addOrder,
        TMSTransportRequestLine _transportRequestLine)
    {
        TMSTransportRequestLine       transportRequestLine2;

        if (_addOrder)
        {
            while select transportRequestLine2
                where transportRequestLine2.TransportRequestId == _transportRequestLine.TransportRequestId
                   && transportRequestLine2.QtyLeftToTransport > 0
            {
                this.createTmpLoadLineFromTransRequestLine(transportRequestLine2);
            }
        }
        else
        {
            this.createTmpLoadLineFromTransRequestLine(_transportRequestLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultShipmentLoadTemplateId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resolves a default load template ID based on a shipment.
    /// </summary>
    /// <param name="_shipmentTable">
    ///    The <c>WHSShipmentTable</c> to resolve the default load template ID from.
    /// </param>
    /// <returns>
    ///    A default Load template ID if all items on the load lines are associated with the same load template; otherwise no ID is returned.
    /// </returns>
    public WHSLoadTemplateId defaultShipmentLoadTemplateId(WHSShipmentTable _shipmentTable)
    {
        WHSLoadTemplateId   loadTemplateId;
        InventTable         inventTable;
        InventItemGroup     inventItemGroup;
        WHSLoadLine         loadLine;
        InventItemGroupItem inventItemGroupItem;

        boolean firstIteration = true;

        while select ItemId from loadLine
            where loadLine.ShipmentId   == _shipmentTable.ShipmentId
               && loadLine.LoadId       == ''
            join TableId from inventTable
            where inventTable.ItemId        == loadLine.ItemId
            join TableId from inventItemGroupItem
            where inventItemGroupItem.ItemDataAreaId    == inventTable.DataAreaId
               && inventItemGroupItem.ItemId            == inventTable.ItemId
            join LoadTemplateId from inventItemGroup
            where inventItemGroup.DataAreaId            == inventItemGroupItem.ItemGroupDataAreaId
               && inventItemGroup.ItemGroupId           == inventItemGroupItem.ItemGroupId
        {
            if (firstIteration)
            {
                loadTemplateId = inventItemGroup.LoadTemplateId;
                firstIteration = false;
            }
            else
            {
                if (loadTemplateId != inventItemGroup.LoadTemplateId)
                {
                    loadTemplateId = '';
                    break;
                }
            }
        }

        return loadTemplateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluatePaysFreight</Name>
				<Source><![CDATA[
    private boolean evaluatePaysFreight(Common  _common, int  _counter)
    {
        TMSLoadPaysFreight  ret;

        switch (_common.TableId)
        {
            case tableNum(SalesTable):
                SalesTable evalSalesTable = _common;

                TMSLoadPaysFreight evalLoadPaysFreight = evalSalesTable.evaluateAddTmsChargeToSalesOrder();

                if (_counter > 0 && this.parmLoadPaysFreight() != evalLoadPaysFreight)
                {
                    throw error(strFmt("@TRX1630", evalSalesTable.SalesId));
                }
                else
                {
                    ret = evalLoadPaysFreight;
                }
                break;

            case tableNum(PurchTable):
                PurchTable evalPurchTable = _common;

                evalLoadPaysFreight = TMSDlvTerm::find(evalPurchTable.DlvTerm).TransferChargesToOrder;

                if (_counter > 0 && this.parmLoadPaysFreight() != evalLoadPaysFreight)
                {
                    throw error(strFmt("@TRX1630", evalPurchTable.PurchId));
                }
                else
                {
                    ret = evalLoadPaysFreight;
                }
                break;

            case tableNum(InventTransferTable):
                InventTransferTable evalInventTransferTable = _common;

                evalLoadPaysFreight = TMSDlvTerm::find(evalInventTransferTable.DlvTermId).TransferChargesToOrder;

                if (_counter > 0 && this.parmLoadPaysFreight() != evalLoadPaysFreight)
                {
                    throw error(strFmt("@TRX1630", evalInventTransferTable.TransferId));
                }
                else
                {
                    ret = evalLoadPaysFreight;
                }
                break;

            case tableNum(WHSShipmentTable):
                WHSShipmentTable evalShipmentTable = _common;
                WHSLoadLine loadLineLoc;
                Counter cntLoc = _counter;

                while select InventTransType, TransportRequest, OrderNum from loadLineLoc 
                    group by InventTransType, TransportRequest, OrderNum
                    where loadLineLoc.ShipmentId == evalShipmentTable.ShipmentId
                        && loadLineLoc.TransportRequest == NoYes::No
                {
                    ret = this.evaluatePaysFreight(loadLineLoc.orderHeader(), cntLoc);
                    this.parmLoadPaysFreight(ret);
                    cntLoc ++;
                }
                
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterLoadGrid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of load ids tied to order
    /// </summary>
    /// <param name="_orderNum">
    ///    Order number used to find loads
    /// </param>
    /// <param name="_inventTransType">
    ///    Order type used to find loads
    /// </param>
    /// <param name="_transportRequest">
    ///    Transport request type used to find loads
    /// </param>
    /// <returns>
    ///    Combined list of load ids used to filter query
    /// </returns>
    public str filterLoadGrid(
        WHSOrderNum     _orderNum,
        InventTransType _inventTransType,
        NoYes           _transportRequest)
    {
        WHSLoadLine                 loadLine;
        boolean                     writtenFirst;
        str                         filter;

        while select loadLine
            group by loadLine.LoadId
            where loadLine.OrderNum         == _orderNum
               && loadLine.InventTransType  == _inventTransType
               && loadLine.TransportRequest == _transportRequest
        {
            if (writtenFirst)
            {
                filter += "@SYS35667";
            }

            filter += queryValue(loadLine.LoadId);
            writtenFirst = true;
        }

        return filter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        this.clearGlobalVariables();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadPaysFreight</Name>
				<Source><![CDATA[
    public TMSLoadPaysFreight parmLoadPaysFreight(TMSLoadPaysFreight _loadPaysFreight = loadPaysFreight)
    {
        loadPaysFreight = _loadPaysFreight;

        return loadPaysFreight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderNum</Name>
				<Source><![CDATA[
    public WHSOrderNum parmOrderNum()
    {
        return tmpLoadLine.OrderNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpLoadLine</Name>
				<Source><![CDATA[
    public WHSLoadLine parmTmpLoadLine(WHSLoadLine _tmpLoadLine = tmpLoadLine)
    {
        tmpLoadLine = _tmpLoadLine;

        return tmpLoadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVolume</Name>
				<Source><![CDATA[
    public Volume parmVolume(Volume _volume = volume)
    {
        volume = _volume;

        return volume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWeight</Name>
				<Source><![CDATA[
    public Weight parmWeight(Weight _weight = weight)
    {
        weight = _weight;

        return weight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWeight</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void addWeight(Weight _addWeight)
    {
        weight += _addWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVolume</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void addVolume(Volume _addVolume)
    {
        volume += _addVolume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmtAssignEarliestSchedShipDateTime</Name>
				<Source><![CDATA[
    public boolean parmtAssignEarliestSchedShipDateTime(boolean _assignEarliestSchedShipDateTime = assignEarliestSchedShipDateTime)
    {
        assignEarliestSchedShipDateTime = _assignEarliestSchedShipDateTime;
        return assignEarliestSchedShipDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSalesLineAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the address of the sales line is valid.
    /// </summary>
    /// <param name = "_salesLine">The sales line to evaluate.</param>
    /// <exception cref="Exception::Error">
    /// Throws an error if the address is not valid.
    /// </exception>
    private static void validateSalesLineAddress(SalesLine _salesLine)
    {
        if (WHSLoadPlanningWorkbenchServerForm::isAddressInvalid(_salesLine.deliveryAddress()))
        {
            throw error(strfmt("@WAX:WHSLoadPlanningOrderLineAddressError", _salesLine.SalesId, _salesLine.LineNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchLineAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the address of the purchase line is valid.
    /// </summary>
    /// <param name = "_purchLine">The purchase line to evaluate.</param>
    /// <exception cref="Exception::Error">
    /// Throws an error if the address is not valid.
    /// </exception>
    private static void validatePurchLineAddress(PurchLine _purchLine)
    {
        if (WHSLoadPlanningWorkbenchServerForm::isAddressInvalid(_purchLine.deliveryAddress()))
        {
            throw error(strfmt("@WAX:WHSLoadPlanningOrderLineAddressError", _purchLine.PurchId, _purchLine.LineNumber));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateShipmentAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the address of the shipment is valid.
    /// </summary>
    /// <param name = "_shipmentTable">The shipment to evaluate.</param>    
    /// <exception cref="Exception::Error">
    /// Throws an error if the address is not valid.
    /// </exception>
    private static void validateShipmentAddress(WHSShipmentTable _shipmentTable)
    {
        if (WHSLoadPlanningWorkbenchServerForm::isAddressInvalid(LogisticsPostalAddress::findRecId(_shipmentTable.DeliveryPostalAddress)))
        {
            throw error(strfmt("@WAX:WHSLoadPlanningShipmentAddressError", _shipmentTable.ShipmentId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAddressInvalid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an address for a line is invalid.
    /// </summary>
    /// <param name = "_address">The address to check.</param>
    /// <returns>true if the address is invalid; otherwise, false.</returns>
    internal static boolean isAddressInvalid(LogisticsPostalAddress _address)
    {
        if (_address && !_address.isEffective())
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLeftToLoadQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates Quantity left to load and Inventory quantity left to load for purchase line.
    /// </summary>
    /// <param name="_inventTransSumDimPurch">
    /// The <c>InventTransSumDimPurch</c> record from the form
    /// </param>
    /// <param name = "_purchLine">The purchase line.</param>
    /// <returns>Quantity left to load and Inventory quantity left to load.</returns>
    private container calcLeftToLoadQuantities(WHSInventTransSumDim _inventTransSumDimPurch, PurchLine _purchLine)
    {
        InventQty   qtyLeftToLoadInvent;
        Qty         qtyLeftToLoad;
        InventTable inventTable = InventTable::find(_purchLine.ItemId);

        if (inventTable.isItemSerialNumberActivated()
            || inventTable.isItemBatchActivated())
        {
            if (PdsGlobal::pdsIsCWItem(_purchLine.ItemId))
            {
                WHSPurchLine whsPurchLine = WHSPurchLine::find(_purchLine.InventTransId);
                qtyLeftToLoadInvent = min(_inventTransSumDimPurch.SumOfPdsCWQty, whsPurchLine.handlingQtyLeftToLoad());

                qtyLeftToLoad = qtyLeftToLoadInvent;
            }
            else
            {
                WHSPurchLine whsPurchLine = WHSPurchLine::find(_purchLine.InventTransId);
                qtyLeftToLoadInvent = min(_inventTransSumDimPurch.SumOfQty, whsPurchLine.handlingQtyLeftToLoad());

                qtyLeftToLoad = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                    _purchLine.ItemId,
                    _purchLine.InventDimId,
                    qtyLeftToLoadInvent,
                    InventTableModule::find(_purchLine.ItemId, ModuleInventPurchSales::Invent).UnitId,
                    _purchLine.PurchUnit,
                    NoYes::No,
                    NoYes::Yes);
            }
        }
        else
        {
            WHSPurchLine whsPurchLine = WHSPurchLine::find(_purchLine.InventTransId);
            qtyLeftToLoadInvent = whsPurchLine.handlingQtyLeftToLoad();
            qtyLeftToLoad = whsPurchLine.purchQtyLeftToLoad();
        }

        return [qtyLeftToLoad, qtyLeftToLoadInvent];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesPurchaseOrderLines</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void createTmpLoadLinesPurchaseOrderLines(boolean    _addOrder,
                                                     PurchLine  _purchLine,
                                                     int        _counter)
    {
        // ensures that the Pays Freight on the associated orders' dlvTerms are in sync
        PurchTable purchTable = _purchLine.purchTable();
        this.parmLoadPaysFreight(this.evaluatePaysFreight(purchTable, _counter));
        
        InventLocationId currentInventLocationId = InventDim::find(_purchLine.inventDimId).InventLocationId;

        loadCreationAttemptForDifferentWHS = false;
        
        if (_addOrder)
        {
            if (WhsInboundLoadPlanningWorkbenchCheckOnlyIfItemIsTmsFlight::instance().isEnabled())
            {
                PurchLine purchLine;
                TMSInventEnabled tmsInventEnabled;

                while select purchLine
                    where purchLine.PurchId == _purchLine.PurchId
                exists join tmsInventEnabled
                    where tmsInventEnabled.ItemId == purchLine.ItemId
                {
                    this.createTmpLineForInventTransOfPurchLine(purchLine, currentInventLocationId);
                }
            }
            else
            {
                PurchLine purchLine;
                WHSInventEnabled whsInventEnabled;

                while select purchLine
                    where purchLine.PurchId == _purchLine.PurchId
                exists join whsInventEnabled
                    where whsInventEnabled.ItemId == purchLine.ItemId
                {
                    this.createTmpLineForInventTransOfPurchLine(purchLine, currentInventLocationId);
                }
            }
        }
        else
        {
            this.createTmpLineForInventTransOfPurchLine(_purchLine, currentInventLocationId);
        }

        if (loadCreationAttemptForDifferentWHS)
        {
            warning(strFmt("@WAX:LPWDifferentWarehousesWarning", currentInventLocationId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLineForInventTransOfPurchLine</Name>
				<Source><![CDATA[
    private void createTmpLineForInventTransOfPurchLine(PurchLine _purchLine, InventLocationId _currentInventLocationId)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        while select ItemId, InventDimId from inventTrans
            group by InventTrans.ItemId, inventTrans.InventDimId
            where inventTrans.StatusReceipt > StatusReceipt::Registered
        exists join inventTransOrigin
            where inventTransOrigin.InventTransId == _purchLine.InventTransId
                && inventTransOrigin.RecId == inventTrans.InventTransOrigin
        {
            InventDim inventDim = InventDim::find(inventTrans.inventDimId);

            if (inventDim.InventLocationId != _currentInventLocationId)
            {
                loadCreationAttemptForDifferentWHS = true;
                continue;
            }

            this.createTmpLoadLineFromPurchaseOrderLine(_purchLine, inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLineFromPurchaseOrderLine</Name>
				<Source><![CDATA[
    private void createTmpLoadLineFromPurchaseOrderLine(PurchLine _purchLine, InventDim _inventDim)
    {
        select firstonly RecId from tmpLoadLine
            where tmpLoadLine.InventTransId == _purchLine.InventTransId
               && tmpLoadLine.InventDimId   == _inventDim.InventDimId;

        if (tmpLoadLine.RecId != 0)
        {
            return;
        }

        ttsbegin;

        WHSLoadPlanningWorkbenchServerForm::validatePurchLineAddress(_purchLine);

        InventQty   qtyLeftToLoadInvent;
        Qty         qtyLeftToLoad;

        [qtyLeftToLoad, qtyLeftToLoadInvent] = this.calcPurchLeftToLoadQuantities(_purchLine, _inventDim);

        tmpLoadLine.clear();
        tmpLoadLine.initFromPurchLine(_purchLine);
        tmpLoadLine.Qty                         = qtyLeftToLoad;
        tmpLoadLine.InventQty                   = qtyLeftToLoadInvent;
        tmpLoadLine.QtyLeftToStructure          = qtyLeftToLoad;
        tmpLoadLine.InventDimId                 = _inventDim.InventDimId;
        tmpLoadLine.setPackingQty();
        tmpLoadLine.doInsert();

        this.addWeight(tmpLoadLine.displayItemWeight());
        this.addVolume(tmpLoadLine.displayItemVolume());

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQtyLeftToLoad</Name>
				<Source><![CDATA[
    internal InventQty inventQtyLeftToLoad(InventTransId _inventTransId, InventDimId _inventDimId)
    {
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;

        select sum(Qty) from inventTrans
                    where  inventTrans.StatusReceipt >= StatusReceipt::Ordered
                        && inventTrans.inventDimId == _inventDimId
                    exists join inventTransOrigin
                        where  inventTransOrigin.RecId == inventTrans.InventTransOrigin
                            && inventTransOrigin.InventTransId == _inventTransId;

        return abs(inventTrans.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPurchLeftToLoadQuantities</Name>
				<Source><![CDATA[
    private container calcPurchLeftToLoadQuantities(PurchLine _purchLine, InventDim _inventDim)
    {
        InventQty   qtyLeftToLoadInvent;
        Qty         qtyLeftToLoad;
        InventTable inventTable = InventTable::find(_purchLine.ItemId);

        if (inventTable.isItemSerialNumberActivated() || inventTable.isItemBatchActivated())
        {
            WHSPurchLine whsPurchLine = WHSPurchLine::find(_purchLine.InventTransId);

            qtyLeftToLoadInvent = min(this.inventQtyLeftToLoad(_purchLine.InventTransId, _inventDim.InventDimId), whsPurchLine.inboundHandlingQtyLeftToLoad());

            if (PdsGlobal::pdsIsCWItem(_purchLine.ItemId))
            {
                qtyLeftToLoad = qtyLeftToLoadInvent;
            }
            else
            {
                qtyLeftToLoad = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                    _purchLine.ItemId,
                    _purchLine.InventDimId,
                    qtyLeftToLoadInvent,
                    InventTableModule::find(_purchLine.ItemId, ModuleInventPurchSales::Invent).UnitId,
                    _purchLine.PurchUnit,
                    NoYes::No,
                    NoYes::Yes);
            }
        }
        else
        {
            WHSPurchLine whsPurchLine = WHSPurchLine::find(_purchLine.InventTransId);
            qtyLeftToLoadInvent = whsPurchLine.inboundHandlingQtyLeftToLoad();
            qtyLeftToLoad = this.calcReceiptOrderQtyLeftToLoad(_purchLine, qtyLeftToLoadInvent);
        }

        return [qtyLeftToLoad, qtyLeftToLoadInvent];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReceiptOrderQtyLeftToLoad</Name>
				<Source><![CDATA[
    internal WHSQtyLeftToLoad calcReceiptOrderQtyLeftToLoad(WHSReceiptOrderLine _receiptOrderLine, InventHandlingQty _qtyLeftToLoadInvent)
    {
        WHSQtyLeftToLoad receiptOrderQtyLeftToLoad = _qtyLeftToLoadInvent;

        if (receiptOrderQtyLeftToLoad)
        {
            UnitOfMeasureSymbol handlingUOM = WHSCatchWeightHelper::inventHandlingUnitId(_receiptOrderLine.ItemId);
            UnitOfMeasureSymbol orderUnit = (PdsGlobal::pdsIsCWItem(_receiptOrderLine.ItemId) ? _receiptOrderLine.pdsCWUnitId(): _receiptOrderLine.Unit);

            if (handlingUOM != orderUnit)
            {
                receiptOrderQtyLeftToLoad = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_receiptOrderLine.ItemId,
                                                                                                           _receiptOrderLine.InventDimId,
                                                                                                           _qtyLeftToLoadInvent,
                                                                                                           handlingUOM,
                                                                                                           orderUnit,
                                                                                                           NoYes::No,
                                                                                                           NoYes::Yes);
            }
        }
   
        return receiptOrderQtyLeftToLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLineForInventTransOfSalesLine</Name>
				<Source><![CDATA[
    private void createTmpLineForInventTransOfSalesLine(SalesLine _salesLine, InventLocationId _currentInventLocationId)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
            
        while select ItemId, InventDimId from inventTrans
                    group by InventTrans.ItemId, inventTrans.InventDimId
                    where (inventTrans.StatusIssue > StatusIssue::Picked || inventTrans.StatusIssue == StatusIssue::None)
                       && (inventTrans.StatusReceipt > StatusReceipt::Registered || inventTrans.StatusReceipt == StatusReceipt::None)
                    exists join inventTransOrigin
                        where inventTransOrigin.InventTransId == _salesLine.InventTransId
                           && inventTransOrigin.RecId == inventTrans.InventTransOrigin
        {
            InventDim inventDim = InventDim::find(inventTrans.inventDimId);

            if (inventDim.InventLocationId != _currentInventLocationId)
            {
                loadCreationAttemptForDifferentWHS = true;
                continue;
            }

            this.createTmpLoadLineFromSalesOrderLine(_salesLine, inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesSalesOrderLines</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void createTmpLoadLinesSalesOrderLines(boolean _addOrder, SalesLine _salesLine, int _counter)
    {
        // ensures that the Pays Freight on the associated orders' dlvTerms are in sync
        this.parmLoadPaysFreight(this.evaluatePaysFreight(_salesLine.salesTable(), _counter));
        InventLocationId currentInventLocationId = InventDim::find(_salesLine.inventDimId).InventLocationId;

        loadCreationAttemptForDifferentWHS = false;

        if (_addOrder)
        {
            SalesLine salesLine;
            TMSInventEnabled tmsInventEnabled;
            while select salesLine
                where salesLine.SalesId == _salesLine.SalesId
                exists join tmsInventEnabled 
                where tmsInventEnabled.ItemId == salesLine.ItemId
            {
                this.createTmpLineForInventTransOfSalesLine(salesLine, currentInventLocationId);
            }
        }
        else
        {
            this.createTmpLineForInventTransOfSalesLine(_salesLine, currentInventLocationId);
        }        

        if (loadCreationAttemptForDifferentWHS)
        {
            warning(strFmt("@WAX:LPWDifferentWarehousesWarning", currentInventLocationId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLineFromSalesOrderLine</Name>
				<Source><![CDATA[
    private void createTmpLoadLineFromSalesOrderLine(SalesLine _salesLine, InventDim _inventDim)
    {
        select firstonly RecId from tmpLoadLine
            where tmpLoadLine.InventTransId == _salesLine.InventTransId
                && tmpLoadLine.InventDimId   == _inventDim.InventDimId;
         
        if (tmpLoadLine.RecId != 0)
        {
            return;
        }
        
        InventHandlingQty handlingQtyLeftToLoad = this.qtyLeftToLoadOutbound(_salesLine.ItemId, _salesLine.InventTransId, _inventDim.InventDimId);
        
        if (!handlingQtyLeftToLoad
            || !this.canGenerateTmpLoadLineFromSourceDocumentLine(_salesLine.InventTransId, _inventDim.InventDimId, handlingQtyLeftToLoad))
        {
            return;
        }
                        
        ttsbegin;
        
        WHSLoadPlanningWorkbenchServerForm::validateSalesLineAddress(_salesLine);
        Qty qtyLeftToLoad;
        
        if (PdsGlobal::pdsIsCWItem(_salesLine.ItemId))
        {
            // Catch weight items store load line quantities in the catch weight unit.
            qtyLeftToLoad = handlingQtyLeftToLoad;
        }
        else
        {
            qtyLeftToLoad = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_salesLine.ItemId,
                                                                                                  _salesLine.InventDimId,
                                                                                                  handlingQtyLeftToLoad,
                                                                                                  InventTableModule::find(_salesLine.ItemId, ModuleInventPurchSales::Invent).UnitId,
                                                                                                  _salesLine.SalesUnit,
                                                                                                  NoYes::No);
        }
        
        tmpLoadLine.clear();
        
        tmpLoadLine.initFromSalesLine(_salesLine);
        tmpLoadLine.QtyLeftToStructure          = qtyLeftToLoad;
        tmpLoadLine.InventQty                   = handlingQtyLeftToLoad;
        tmpLoadLine.Qty                         = qtyLeftToLoad;
        tmpLoadLine.InventDimId                 = _inventDim.InventDimId;
        tmpLoadLine.setPackingQty();
        tmpLoadLine.doInsert();
        
        this.addWeight(tmpLoadLine.displayItemWeight());
        this.addVolume(tmpLoadLine.displayItemVolume());
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyLeftToLoadOutbound</Name>
				<Source><![CDATA[
    protected WHSQtyLeftToLoad qtyLeftToLoadOutbound(ItemId _itemId, InventTransId _inventTransId, InventDimId _inventDimId)
    {
        if (!WHSInventEnabled::exist(_itemId) && TMSInventEnabled::exist(_itemId))
        {
            return this.qtyLeftoToLoadOutboundForTMSItems(_itemId, _inventTransId, _inventDimId);
        }
        
        WHSLoadLine loadLine;
        
        select sum(InventQty), sum(PickedQty) from loadLine
            group by loadLine.InventTransId, loadLine.InventDimId
            where loadLine.InventTransId == _inventTransId
                && loadline.InventDimId == _inventDimId
                && loadLine.LoadReadyToShipUTCDateTime != DateTimeUtil::minValue();

        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;
        select sum(Qty), sum(PdsCWQty) from inventTrans
            group by InventTrans.ItemId, inventTrans.InventDimId
            where inventTrans.InventDimId == _inventDimId
                && (inventTrans.StatusIssue > StatusIssue::Picked || inventTrans.StatusIssue == StatusIssue::None)                
            exists join inventTransOrigin
                where inventTransOrigin.InventTransId == _inventTransId
                    && inventTransOrigin.RecId == inventTrans.InventTransOrigin;
                
        if (PdsGlobal::pdsIsCWItem(_itemId))
        {
            // Quantity fields on the QtyOnLoadView will be in CW unit for CW items.
            return (abs(inventTrans.PdsCWQty) - (loadLine.InventQty - loadLine.PickedQty));
        }
        
        return (abs(inventTrans.Qty) - (loadLine.InventQty - loadLine.PickedQty));
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyLeftoToLoadOutboundForTMSItems</Name>
				<Source><![CDATA[
    private WHSQtyLeftToLoad qtyLeftoToLoadOutboundForTMSItems(ItemId _itemId, InventTransId _inventTransId, InventDimId _inventDimId)
    {
        WHSLoadLine loadLine;
        
        select sum(InventQty), sum(PickedQty) from loadLine
            group by loadLine.InventTransId, loadLine.InventDimId
            where loadLine.InventTransId == _inventTransId
                && loadline.InventDimId == _inventDimId
                && loadLine.LoadReadyToShipUTCDateTime != DateTimeUtil::minValue();
         
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;

        select sum(Qty), sum(PdsCWQty) from inventTrans
            group by InventTrans.ItemId, inventTrans.InventDimId
            where inventTrans.InventDimId == _inventDimId
                && (inventTrans.StatusIssue > StatusIssue::Picked || inventTrans.StatusIssue == StatusIssue::None)
                && (inventTrans.StatusReceipt > StatusReceipt::Registered || inventTrans.StatusReceipt == StatusReceipt::None)
            exists join inventTransOrigin
            where inventTransOrigin.InventTransId == _inventTransId
                && inventTransOrigin.RecId == inventTrans.InventTransOrigin;
            
        InventDim inventDim = InventDim::find(_inventDimId);
        InventDimParm loadLineInventDimParm;
        loadLineInventDimParm.initFromInventDim(inventDim);
        
        InventTrans inventTransUpdated;
        InventTransOrigin inventTransOriginUpdated;
        InventDim inventDimUpdated;
        
        // In order to return picked and updated quantities back, we must take care to check all dimensions that might have been specified later in picking/posting
        select firstonly sum(Qty), sum(PdsCWQty)
            from inventTransUpdated
            where inventTransUpdated.StatusIssue >= StatusIssue::Sold
               && inventTransUpdated.StatusIssue <= StatusIssue::Picked
            exists join inventTransOriginUpdated
                where inventTransUpdated.InventTransOrigin == inventTransOriginUpdated.RecId
                    && inventTransOriginUpdated.InventTransId == _inventTransId
            #InventDimExistsJoin(inventTransUpdated.inventDimId, inventDimUpdated, inventDim, loadLineInventDimParm);

        if (PdsGlobal::pdsIsCWItem(_itemId))
        {
            // Quantity fields on the QtyOnLoadView will be in CW unit for CW items.
            return min(abs(inventTrans.PdsCWQty), abs(inventTrans.PdsCWQty) - loadLine.InventQty + abs(inventTransUpdated.PdsCWQty));
        }
       
        return min(abs(inventTrans.Qty), abs(inventTrans.Qty) - loadLine.InventQty + abs(inventTransUpdated.Qty));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesInventTransferLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void createTmpLoadLinesInventTransferLine(boolean _addOrder, InventTransferLine _inventTransferLine, int _counter)
    {
        InventTransferTable transferTable = InventTransferLine::findTransIdShip(_inventTransferLine.InventTransId).inventTransferTable();
        this.parmLoadPaysFreight(this.evaluatePaysFreight(transferTable, _counter));
        
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        TMSInventEnabled tmsInventEnabled;
        
        if (_addOrder)
        {
            InventTransferLine inventTransferLine;
            WHSInventEnabled whsInventEnabled;
            
            while select inventTransferLine
                where inventTransferLine.TransferId == _inventTransferLine.TransferId
                exists join whsInventEnabled
                    where whsInventEnabled.ItemId == inventTransferLine.ItemId
            {
                while select ItemId, InventDimId from inventTrans
                    group by InventTrans.ItemId, inventTrans.InventDimId
                    where (inventTrans.StatusIssue > StatusIssue::Picked || inventTrans.StatusIssue == StatusIssue::None)
                        && (inventTrans.StatusReceipt > StatusReceipt::Registered || inventTrans.StatusReceipt == StatusReceipt::None)
                    exists join inventTransOrigin
                        where inventTransOrigin.InventTransId == inventTransferLine.InventTransId
                            && inventTransOrigin.RecId == inventTrans.InventTransOrigin
                    exists join tmsInventEnabled
                        where tmsInventEnabled.ItemId == inventTransferLine.ItemId
                {
                    this.createTmpLoadLineFromInventTransferLine(inventTransferLine, InventDim::find(inventTrans.InventDimId));
                }
            }
        }
        else
        {
            while select ItemId, InventDimId from inventTrans
                group by InventTrans.ItemId, inventTrans.InventDimId
                where (inventTrans.StatusIssue > StatusIssue::Picked || inventTrans.StatusIssue == StatusIssue::None)
                    && (inventTrans.StatusReceipt > StatusReceipt::Registered || inventTrans.StatusReceipt == StatusReceipt::None)
                exists join inventTransOrigin
                    where inventTransOrigin.InventTransId == _inventTransferLine.InventTransId
                        && inventTransOrigin.RecId == inventTrans.InventTransOrigin
                exists join tmsInventEnabled
                    where tmsInventEnabled.ItemId == _inventTransferLine.ItemId
            {
                this.createTmpLoadLineFromInventTransferLine(_inventTransferLine, InventDim::find(inventTrans.InventDimId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLineFromInventTransferLine</Name>
				<Source><![CDATA[
    private void createTmpLoadLineFromInventTransferLine(InventTransferLine _inventTransferLine, InventDim _inventDim)
    {
        InventTable inventTable;
        
        select firstonly RecId from tmpLoadLine
            where tmpLoadLine.InventTransId == _inventTransferLine.InventTransId
                && tmpLoadLine.InventDimId  == _inventDim.InventDimId;
        
        if (tmpLoadLine.RecId != 0)
        {
            return;
        }
        
        InventHandlingQty handlingQtyLeftToLoad = this.qtyLeftToLoadOutbound(_inventTransferLine.ItemId, _inventTransferLine.InventTransId, _inventDim.InventDimId);
        
        if (!this.canGenerateTmpLoadLineFromSourceDocumentLine(_inventTransferLine.InventTransId, _inventDim.inventDimId, handlingQtyLeftToLoad))
        {
            return;
        }
        
        ttsbegin;
                    
        Qty qtyLeftToLoad;
        
        if (PdsGlobal::pdsIsCWItem(_inventTransferLine.ItemId))
        {
            // Catch weight items store load line quantities in the catch weight unit.
            qtyLeftToLoad = handlingQtyLeftToLoad;
        }
        else
        {
            qtyLeftToLoad = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_inventTransferLine.ItemId,
                                                                                                  _inventTransferLine.InventDimId,
                                                                                                  handlingQtyLeftToLoad,
                                                                                                  InventTableModule::find(_inventTransferLine.ItemId, ModuleInventPurchSales::Invent).UnitId,
                                                                                                  _inventTransferLine.UnitId,
                                                                                                  NoYes::No);
        }

        tmpLoadLine.clear();

        tmpLoadLine.initFromTransferLine(_inventTransferLine);
        tmpLoadLine.Qty                             = qtyLeftToLoad;
        tmpLoadLine.InventQty                       = handlingQtyLeftToLoad;
        tmpLoadLine.QtyLeftToStructure              = qtyLeftToLoad;
        tmpLoadLine.InventDimId                     = _inventDim.InventDimId;
        tmpLoadLine.setPackingQty();
        tmpLoadLine.doInsert();

        this.addWeight(tmpLoadLine.displayItemWeight());
        this.addVolume(tmpLoadLine.displayItemVolume());

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGenerateTmpLoadLineFromSourceDocumentLine</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean canGenerateTmpLoadLineFromSourceDocumentLine(InventTransId _inventTransId, InventDimId _inventDimId, InventHandlingQty _handlingQtyLeftToLoad)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectLoadLine</Name>
				<Source><![CDATA[
    public WHSLoadLine selectLoadLine(WHSLoadTable _loadTable)
    {
        WHSLoadLine             loadLine;
        SalesTable              tmpSalesTable;
        InventTransferTable     inventTransferTable;

        select count(RecId) from loadLine
            where loadLine.LoadId           == _loadTable.LoadId        
                && loadLine.InventTransType  == InventTransType::Sales   
                && loadLine.TransportRequest == NoYes::No
            join SalesId from tmpSalesTable
                 where loadLine.OrderNum == tmpSalesTable.SalesId;

        if (loadLine.RecId == 0)
        {
            select count(RecId) from loadLine
                where loadLine.LoadId           == _loadTable.LoadId                    
                    && loadLine.InventTransType  == InventTransType::TransferOrderShip   
                    && loadLine.TransportRequest == NoYes::No
                join TransferId from inventTransferTable
                    where loadLine.OrderNum == inventTransferTable.TransferId;
        }

        return loadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existLoadLineByOrderAndTypeNotOnLoad</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean existLoadLineByOrderAndTypeNotOnLoad(WHSOrderNum _orderNum, InventTransType _inventTransType)
    {
        return ((select firstonly RecId from WHSLoadLine
            where WHSLoadLine.OrderNum          == _orderNum
                && WHSLoadLine.InventTransType   == _inventTransType
                && WHSLoadLine.TransportRequest  == NoYes::No
                && WHSLoadLine.LoadId            == '').RecId != 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>