<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceProposalPeriodic</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjInvoiceProposalPeriodic</c> class is used to create invoice proposals as a part of peridic process that can be batched.
/// </summary>
abstract class ProjInvoiceProposalPeriodic extends RunBaseBatch
{
    boolean                     isBillingRuleProposal;

    QueryRun                    queryRun;

    Dialog                      dialogRunBase;

    ProjInvoicePorposalInvoiceDateSelection
                                invoiceDate;
    DialogField                 dflInvoiceDate;

    ProjInvoiceTypeSelection    invoiceTypeSelection;
    DialogField                 dflInvoiceTypeSelection;

    TransDate                   startDate;
    DialogField                 dflStartDate;
    TransDate                   endDate;
    DialogField                 dflEndDate;

    boolean                     isQueryCostTrans;
    DialogField                 dflIsQueryCostTrans;
    boolean                     isQueryEmplTrans;
    DialogField                 dflIsQueryEmplTrans;
    boolean                     isQueryItemTrans;
    DialogField                 dflIsQueryItemTrans;
    boolean                     isQueryOnAccTrans;
    DialogField                 dflIsQueryOnAccTrans;
    boolean                     isQueryRevenueTrans;
    DialogField                 dflIsQueryRevenueTrans;
    boolean                     isQuerySalesLine;
    DialogField                 dflIsQuerySalesLine;
    boolean                     isQuerySubscriptionTrans;
    DialogField                 dflIsQuerySubscriptionTrans;

    private DialogField SelectFundingSource;
    private DialogField ContractFundingSource;
    private DialogField ProjectContract;
    private DialogField SelectProject;
    private DialogField FilterSearch;

    private FormBuildReferenceGroupControl FundingSourceRef;
    private ProjInvoiceSearchSelectionFilter SearchChoice;
    private ProjInvoiceFundingSourceRecId FundingSourceRecId;

    private ProjId projId;
    private ProjInvoiceProjId projInvoiceProjId;
    private ProjFundingSourceId fundingSourceId;
    private List listFundingSources;

    private ProjTmpInvoiceTable invoiceTable;
    private ProjTmpInvoiceFundingSource invoiceFundingSource;
    protected ProjParameters projParameters;

    SalesUpdate                 salesUpdate;
    DialogField                 dflSalesUpdate;

    DialogField                 dflLateSelection;
    boolean                     lateSelection;

    #define.CurrentVersion(4)
    #localMacro.CurrentList
    invoiceDate,
    startDate,
    endDate,
    isQueryCostTrans,
    isQueryEmplTrans,
    isQueryItemTrans,
    isQueryOnAccTrans,
    isQueryRevenueTrans,
    isQuerySalesLine,
    isQuerySubscriptionTrans,
    salesUpdate,
    invoiceTypeSelection,
    lateSelection,
    projId,
    projInvoiceProjId,
    fundingSourceId
    #endMacro

    #DEFINE.dflIsQuerySalesLineFieldNo(900)
    #DEFINE.dflIsQuerySalesLineCtrlName("Fld900_1")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Always returns true.
    /// </summary>
    /// <returns>
    /// true.
    /// </returns>
    /// <remarks>
    /// This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the class is shown in the list of the <c>Journal</c> types.
    /// </summary>
    /// <returns>
    /// true if the class is shown in the list of the <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A class that can be used in a batch journal is a class where the same parameters can be used
    /// repeatedly. The dialog box can be shown and the parameters can be changed, but parameters of some
    /// classes might build on data that is only valid for a short time. Running a class two times with the
    /// same parameters is not always possible. If the <see cref="M:RunBaseBatch.canGoBatch" /> is false,
    /// this method will not have any effect.
    /// </remarks>
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>ProjInvoiceProposalCreateLinesParams</c> instance
    /// with values set from the dialog form.
    /// </summary>
    /// <returns>A <c>ProjInvoiceProposalCreateLinesParams</c> that can be used by <c>ProjInvoiceProposalCreateLines</c></returns>
    protected ProjInvoiceProposalCreateLinesParams createParameters()
    {
        ProjInvoiceProposalCreateLinesParams params = ProjInvoiceProposalCreateLinesParams::construct();

        params.parmEndDate(endDate);

        params.parmInvoiceDate(invoiceDate);

        params.parmInvoiceTypeSelection(invoiceTypeSelection);

        params.parmIsQueryCostTrans(isQueryCostTrans);

        params.parmIsQueryEmplTrans(isQueryEmplTrans);

        params.parmIsQueryItemTrans(isQueryItemTrans);

        params.parmIsQueryOnAccTrans(isQueryOnAccTrans);

        params.parmIsQueryRevenueTrans(isQueryRevenueTrans);

        params.parmIsQuerySalesLine(isQuerySalesLine);

        params.parmIsQuerySubscriptionTrans(isQuerySubscriptionTrans);

        params.parmSalesUpdate(salesUpdate);

        params.parmStartDate(startDate);

        params.parmLateSelection(lateSelection);

        if (projParameters.SelectProjectInvoiceProposalByFundingSource)
        {
            params.parmProjId(projId);

            params.parmProjInvoiceProjId(projInvoiceProjId);

            if (SearchChoice == ProjInvoiceSearchSelectionFilter::FundingSource)
            {
                params.parmContainerFundingSources(listFundingSources.pack());
            }
            else
            {
                params.parmFundingSource(fundingSourceId);
            }
        }

        date systemDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        
        if (this.isInBatch())
        {
            params.parmIsBatch(true);

            if (params.parmLateSelection() 
                && params.parmEndDate() 
                && params.parmEndDate() < systemDate)
            {
                params.parmEndDate(systemDate);
            }
        }

        return params;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an object that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// An object that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogGroup     selectTransactionsGroup;

        dialogRunBase = super();

        if (projParameters.SelectProjectInvoiceProposalByFundingSource)
        {
            FilterSearch = dialogRunBase.addFieldValue(extendedTypeStr(ProjInvoiceProposalSearch), SearchChoice, "@Proj:ProjInvoiceProposalSearchFundingSourceSearchCaption");
            FormBuildRadioControl formRadioControl = FilterSearch.control();
            formRadioControl.selection(ProjInvoiceSearchSelectionFilter::ProjectContract);
            formRadioControl.columns(2);
            FilterSearch.registerOverrideMethod(methodStr(FormRadioControl, modified), methodStr(ProjInvoiceProposalPeriodic, filterSearchModified), this);

            SelectFundingSource = dialogRunBase.addFieldValue(extendedTypeStr(ProjInvoiceFundingSourceRecId), FundingSourceRecId, "@Proj:ProjFundingSource");
            FundingSourceRef = SelectFundingSource.control();

            FundingSourceRef.hideIfEmpty(false);
            FundingSourceRef.enableFormRef(false);
            SelectFundingSource.visible(false);
            SelectFundingSource.registerOverrideMethod(methodStr(FormReferenceControl, lookupReference), methodStr(ProjInvoiceProposalPeriodic,refFundingSourceLookup), this);
            FundingSourceRef.registerOverrideMethod(methodStr(ProjInvoiceProposalPeriodic, validate), methodStr(ProjInvoiceProposalPeriodic, refFundingSourceValidate), this);

            ContractFundingSource = dialogRunBase.addField(extendedTypeStr(ProjFundingSourceId), "@Proj:ProjFundingSource");
            FormBuildStringControl fundingSourceStringControl = ContractFundingSource.control();
            fundingSourceStringControl.enableFormRef(false);
            ContractFundingSource.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(ProjInvoiceProposalPeriodic,fundingSourceLookup), this);
            ContractFundingSource.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(ProjInvoiceProposalPeriodic,fundingSourceValidate), this);


            ProjectContract = dialogRunBase.addField(extendedTypeStr(ProjInvoiceProjId), "@PSA143");
            FormBuildStringControl contractStringControl = ProjectContract.control();
            contractStringControl.enableFormRef(false);
            ProjectContract.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(ProjInvoiceProposalPeriodic, projectContractLookup), this);
            ProjectContract.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(ProjInvoiceProposalPeriodic, projectContractModified), this);
            ProjectContract.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(ProjInvoiceProposalPeriodic, projectContractValidate), this);

            SelectProject = dialogRunBase.addField(extendedTypeStr(ProjId), "@SYS35246");
            FormBuildStringControl projectStringControl = SelectProject.control();
            projectStringControl.enableFormRef(false);
            SelectProject.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(ProjInvoiceProposalPeriodic, projectLookup), this);
            SelectProject.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(ProjInvoiceProposalPeriodic, projectModified), this);
            SelectProject.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(ProjInvoiceProposalPeriodic, projectValidate), this);

            this.enableProjectFilters();
            this.initProjInvoiceProjIdLookup();

        }

        selectTransactionsGroup = dialogRunBase.addGroup("@GLS360117");
        selectTransactionsGroup.columns(1);

        if (!isBillingRuleProposal)
        {
            selectTransactionsGroup = dialogRunBase.addGroup("@GLS360128");

            dflInvoiceTypeSelection         = dialogRunBase.addFieldValue(enumStr(ProjInvoiceTypeSelection), invoiceTypeSelection);
            selectTransactionsGroup.addFieldname(dflInvoiceTypeSelection.name());
        }

        selectTransactionsGroup = dialogRunBase.addGroup("@SYS72905");
        dflLateSelection        = dialogRunBase.addFieldValue(extendedTypeStr(NoYesId), lateSelection, "@SYS72905", "@GLS3800036");
        selectTransactionsGroup.addFieldname(dflLateSelection.name());

        selectTransactionsGroup = dialogRunBase.addGroup("@GLS360149");

        if (!isBillingRuleProposal)
        {
            this.addIncludeTransactionTypeFields(dialogRunBase, selectTransactionsGroup);
        }

        selectTransactionsGroup = dialogRunBase.addGroup("@GLS360096");

        dflIsQuerySalesLine             = new DialogField(dialogRunBase, extendedTypeStr(NoYesId), #dflIsQuerySalesLineFieldNo);
        dflIsQuerySalesLine.init(dialogRunBase);
        dflIsQuerySalesLine.helpText("@GLS360097");
        dflIsQuerySalesLine.label("@SYS90573");
        dflIsQuerySalesLine.value(isQuerySalesLine);
        dialogRunBase.addCtrlDialogField(dflIsQuerySalesLine.name());

        dflIsQuerySalesLine.registerOverrideMethod(methodStr(FormCheckBoxControl, modified), methodStr(ProjInvoiceProposalPeriodic, fld900_1_modified), this);
        selectTransactionsGroup.addFieldname(dflIsQuerySalesLine.name());

        Debug::assert(dflIsQuerySalesLine.fieldname() == #dflIsQuerySalesLineCtrlName);

        dflSalesUpdate                  = dialogRunBase.addFieldValue(extendedTypeStr(ProjInvoiceProposalSalesUpdateSelection), salesUpdate);
        selectTransactionsGroup.addFieldname(dflSalesUpdate.name());
        dflSalesUpdate.enabled(isQuerySalesLine);

        selectTransactionsGroup = dialogRunBase.addGroup("@GLS360139");

        dflStartDate                    = dialogRunBase.addFieldValue(extendedTypeStr(ProjInvoiceProposalStartDateSelection), startDate);
        selectTransactionsGroup.addFieldname(dflStartDate.name());

        dflEndDate                      = dialogRunBase.addFieldValue(extendedTypeStr(ProjInvoiceProposalEndDateSelection), endDate);
        selectTransactionsGroup.addFieldname(dflEndDate.name());

        selectTransactionsGroup = dialogRunBase.addGroup("@GLS360106");

        dflInvoiceDate                  = dialogRunBase.addFieldValue(extendedTypeStr(ProjInvoicePorposalInvoiceDateSelection), DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));

        //Default End Date and Invoice Date as Legal Entity Time Zone
        dflEndDate.value(CompanyInfo::getCurrentDate());
        dflInvoiceDate.value(CompanyInfo::getCurrentDate());
        return dialogRunBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addIncludeTransactionTypeFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the 'Include transaction type' fields to the specified dialog.
    /// </summary>
    /// <param name = "_dialogRunBase">
    /// The dialog to which to add fields.
    /// </param>
    /// <param name = "_dialogGroup">
    /// The dialog group to which to add fields.
    /// </param>
    protected void addIncludeTransactionTypeFields(Dialog _dialogRunBase, DialogGroup _dialogGroup)
    {
        dflIsQueryEmplTrans = _dialogRunBase.addFieldValue(extendedTypeStr(NoYesId), isQueryEmplTrans, "@GLS360150", "@GLS360151");
        _dialogGroup.addFieldname(dflIsQueryEmplTrans.name());

        dflIsQueryCostTrans = _dialogRunBase.addFieldValue(extendedTypeStr(NoYesId), isQueryCostTrans, "@GLS360087", "@GLS360088");
        _dialogGroup.addFieldname(dflIsQueryCostTrans.name());

        dflIsQueryItemTrans = _dialogRunBase.addFieldValue(extendedTypeStr(NoYesId), isQueryItemTrans, "@GLS360091", "@GLS360092");
        _dialogGroup.addFieldname(dflIsQueryItemTrans.name());

        dflIsQueryRevenueTrans = _dialogRunBase.addFieldValue(extendedTypeStr(NoYesId), isQueryRevenueTrans, "@GLS360093", "@GLS360094");
        _dialogGroup.addFieldname(dflIsQueryRevenueTrans.name());

        dflIsQuerySubscriptionTrans = _dialogRunBase.addFieldValue(extendedTypeStr(NoYesId), isQuerySubscriptionTrans, "@GLS360089", "@GLS360090");
        _dialogGroup.addFieldname(dflIsQuerySubscriptionTrans.name());

        dflIsQueryOnAccTrans = _dialogRunBase.addFieldValue(extendedTypeStr(NoYesId), isQueryOnAccTrans, "@GLS360085", "@GLS360086");
        _dialogGroup.addFieldname(dflIsQueryOnAccTrans.name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld900_1_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables and disables the sales update field on the selection of query sales line checkbox.
    /// </summary>
    /// <param name="_control">
    /// Sales line checkbox control.
    /// </param>
    /// <returns>
    /// true if checkbox was selected; otherwise false.
    /// </returns>
    public boolean fld900_1_modified(FormCheckBoxControl _control)
    {
        boolean ret     = _control.modified();

        if (ret)
        {
            if (dflIsQuerySalesLine.value() == 0)
            {
                dflSalesUpdate.fieldControl().enabled(false);
            }
            else
            {
                dflSalesUpdate.fieldControl().enabled(true);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the value entered by users into local variables.
    /// </summary>
    /// <returns>
    /// True if the values were stored successfully; otherwise false.
    /// </returns>
    boolean getFromDialog()
    {
        invoiceDate                 = dflInvoiceDate.value();

        if (!isBillingRuleProposal)
        {
            invoiceTypeSelection    = dflInvoiceTypeSelection.value();
        }

        lateSelection               = dflLateSelection.value();
        startDate                   = dflStartDate.value();
        endDate                     = dflEndDate.value();

        if (!isBillingRuleProposal)
        {
            isQueryCostTrans            = dflIsQueryCostTrans.value();
            isQueryEmplTrans            = dflIsQueryEmplTrans.value();
            isQueryItemTrans            = dflIsQueryItemTrans.value();
            isQueryOnAccTrans           = dflIsQueryOnAccTrans.value();
            isQueryRevenueTrans         = dflIsQueryRevenueTrans.value();
            isQuerySubscriptionTrans    = dflIsQuerySubscriptionTrans.value();
        }

        isQuerySalesLine            = dflIsQuerySalesLine.value();

        salesUpdate                 = dflSalesUpdate.value();

        if (projParameters.SelectProjectInvoiceProposalByFundingSource)
        {
            if (ProjectContract.value() != "@SYS14437")
            {
                projInvoiceProjId = ProjectContract.value();
            }

            projId = SelectProject.value();

            if (SearchChoice == ProjInvoiceSearchSelectionFilter::ProjectContract)
            {
                if (ContractFundingSource.value() != "@SYS14437")
                {
                    fundingSourceId = ContractFundingSource.value();
                }
            }
            else
            {
                select firstonly invoiceFundingSource where invoiceFundingSource.RecId == SelectFundingSource.value();

                if (invoiceFundingSource.AccountNum != "@SYS14437")
                {
                    listFundingSources = new List(Types::Int64);

                    ProjFundingSource projFundingSource;

                    while select projFundingSource
                        where projFundingSource.Party == invoiceFundingSource.Party
                            && projFundingSource.FundingType == invoiceFundingSource.FundingType
                    {
                        listFundingSources.addEnd(ProjFundingSource.RecId);
                    }
                }
            }
        }
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query. This method must be over-ridden in all child classes.
    /// </summary>
    abstract void initQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Always returns false.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    /// <remarks>
    /// This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean mustGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        this.initQuery();

        projParameters = ProjParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog and if a select menu item is added to a dialog.
    ///    Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it in the
    ///    <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Classes that extend the <c>RunBaseBatch</c> class must override the <c>runsImpersonated</c> method
    ///    and return false if the tasks must be run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> class.If you change the return value to false, the button will no
    ///    longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer         version        = conPeek(packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = packedClass;

                queryRun = new QueryRun(packedQuery);

                break;

            default:

                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the end date with user preferred timezone.
    /// </summary>
    /// <returns>
    /// Returns true for end date in user preferred timezone; otherwise, false.
    /// </returns>
    protected boolean isValidEndDate()
    {
        return endDate > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the startdate, end date and timezone.
    /// </summary>
    /// <param name="calledFrom">
    /// Takes the caller as input.
    /// </param>
    /// <returns>
    /// Returns true for valid dates combination; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean     ret;

        ret = super(calledFrom);

        if (ret && (startDate > endDate))
        {
            dflStartDate.value(dateNull());
            ret = checkFailed("@SYP4861264");
        }

        if (ret && this.isValidEndDate())
        {
            ret = checkFailed("@SYP4861266");
        }

        if (ret && (dflInvoiceDate.value() < dflEndDate.value()))
        {
            ret = checkFailed("@SYP4861265");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterSearchModified</Name>
				<Source><![CDATA[
    internal boolean filterSearchModified(FormRadioControl _control)
    {
        ProjectContract.value('');
        SelectProject.value('');
        ContractFundingSource.value('');
        SelectFundingSource.value('');
        SearchChoice = _control.selection();
        FormStringControl contractControl = ProjectContract.control();

        switch (SearchChoice)
        {
            case ProjInvoiceSearchSelectionFilter::ProjectContract :
                ProjectContract.enabled(true);
                SelectProject.enabled(true);
                contractControl.mandatory(true);
                ContractFundingSource.enabled(false);
                ContractFundingSource.visible(true);
                FundingSourceRef.mandatory(false);
                SelectFundingSource.visible(false);

                select firstonly invoiceTable where invoiceTable.ProjInvoiceProjId == "@SYS14437";

                ProjectContract.value(invoiceTable.ProjInvoiceProjId);
                break;

            case ProjInvoiceSearchSelectionFilter::FundingSource :
                ProjectContract.enabled(false);
                contractControl.mandatory(false);
                SelectProject.enabled(false);
                SelectFundingSource.visible(true);
                ContractFundingSource.visible(false);
                FundingSourceRef.mandatory(true);
                this.initFundingSourceLookup();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refFundingSourceLookup</Name>
				<Source><![CDATA[
    internal void refFundingSourceLookup(FormReferenceControl _control)
    {
        ProjTmpInvoiceFundingSource::lookupAllFundingSourcesByCustomer(_control, invoiceFundingSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refFundingSourceValidate</Name>
				<Source><![CDATA[
    internal boolean refFundingSourceValidate(FormReferenceControl _control)
    {
        boolean ret = false;

        if (_control.value())
        {
            ret = true;
            ProjectContract.enabled(true);
            SelectProject.enabled(true);
            ProjectContract.value('');
            SelectProject.value('');
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSourceLookup</Name>
				<Source><![CDATA[
    internal void fundingSourceLookup(FormStringControl _control)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ProjTmpInvoiceFundingSource), _control);
        Query lookupQuery = new Query();

        lookupQuery.addDataSource(tableNum(ProjTmpInvoiceFundingSource));
        sysTableLookup.addLookupfield(fieldNum(ProjTmpInvoiceFundingSource, FundingSourceId), true);
        sysTableLookup.addLookupfield(fieldNum(ProjTmpInvoiceFundingSource, Name));
        sysTableLookup.parmCallingControl(_control);
        sysTableLookup.parmQuery(lookupQuery);

        select firstonly invoiceFundingSource;

        sysTableLookup.parmTmpBuffer(invoiceFundingSource);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSourceValidate</Name>
				<Source><![CDATA[
    internal boolean fundingSourceValidate(FormStringControl _control)
    {
        boolean ret = true;

        if (_control.text())
        {
            ProjFundingSourceId projFundingSource = ContractFundingSource.value();

            ProjFundingSource projFundingSourceLocal = projFundingSource::findContractFundingSource(ProjectContract.value(), _control.valueStr());

            if (!projFundingSourceLocal)
            {
                ret = checkFailed("@Proj:ProjFundingSourceError");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectContractLookup</Name>
				<Source><![CDATA[
    internal void projectContractLookup(FormStringControl _control)
    {
        if (SearchChoice == ProjInvoiceSearchSelectionFilter::FundingSource)
        {
            Query query = new Query();

            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ProjFundingSource), _control);
            sysTableLookup.addLookupfield(fieldNum(ProjFundingSource, ContractId), true);

            QueryBuildDataSource fundingSourceDataSource = query.addDataSource(tableNum(ProjFundingSource));

            select firstonly invoiceFundingSource
                where invoiceFundingSource.RecId == SelectFundingSource.value();

            if (invoiceFundingSource.AccountNum != "@SYS14437")
            {
                switch (invoiceFundingSource.FundingType)
                {
                    case ProjFundingType::Grant :
                        ProjGrant projGrant;

                        while select RecId from projgrant where projGrant.CustAccount == invoiceFundingSource.AccountNum
                        {
                            QueryBuildRange queryBuildRangeGrant = fundingSourceDataSource.addRange(fieldNum(ProjFundingSource, ProjGrant));
                            queryBuildRangeGrant.value(int642Str(projGrant.RecId));
                        }
                        break;

                    case ProjFundingType::Customer :
                        QueryBuildRange queryBuildRangeCustomer = fundingSourceDataSource.addRange(fieldNum(ProjFundingSource, CustAccount));
                        QueryBuildRangeCustomer.value(invoiceFundingSource.AccountNum);
                        break;

                    case ProjFundingType::Organization :
                        QueryBuildRange queryBuildRangeOrganization = fundingSourceDataSource.addRange(fieldNum(ProjFundingSource, party));
                        QueryBuildRangeOrganization.value(queryValue(invoiceFundingSource.party));
                        break;
                }
            }

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();

        }
        else
        {
            Query lookupQuery = new Query();
            QueryBuildDataSource queryBuildDataSource;
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ProjTmpInvoiceTable), _control);

            sysTableLookup.addLookupfield(fieldNum(ProjTmpInvoiceTable, ProjInvoiceProjId), true);
            sysTableLookup.addLookupfield(fieldNum(ProjTmpInvoiceTable, Description));
            sysTableLookup.addLookupfield(fieldNum(ProjTmpInvoiceTable, AccountNum));
            queryBuildDataSource = lookupQuery.addDataSource(tableNum(ProjTmpInvoiceTable));
            sysTableLookup.parmQuery(lookupQuery);

            select invoiceTable;

            sysTableLookup.parmTmpBuffer(invoiceTable);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectContractModified</Name>
				<Source><![CDATA[
    internal boolean projectContractModified(FormStringControl _control)
    {
        if (_control.text())
        {

            this.initFromProjInvoiceTable(ProjInvoiceTable::find(_control.valueStr()));

            if (SearchChoice != ProjInvoiceSearchSelectionFilter::FundingSource)
            {
                this.initFundingSourceLookup();
            }

            if (SelectProject.value() && ProjTable::find(SelectProject.value()).ProjInvoiceProjId != _control.text())
            {
                SelectProject.value('');
            }
        }
        else
        {
            if (SearchChoice != ProjInvoiceSearchSelectionFilter::FundingSource)
            {
                _control.mandatory(true);
                ContractFundingSource.value('');
            }
        }

        this.enableProjectFilters();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectContractValidate</Name>
				<Source><![CDATA[
    internal boolean projectContractValidate(FormStringControl _control)
    {
        boolean ret = true;

        ProjInvoiceTable projInvoiceTableLocal;

        if (ProjectContract.value()
            && ProjectContract.value() != "@SYS14437")
        {
            select firstonly FundingType, AccountNum, Party from invoiceFundingSource
                where invoiceFundingSource.Recid == SelectFundingSource.value();

            if (SearchChoice == ProjInvoiceSearchSelectionFilter::FundingSource
                && invoiceFundingSource.AccountNum != "@SYS14437")
            {
                ProjFundingSource projFundingSource;

                switch (invoiceFundingSource.FundingType)
                {
                    case ProjFundingType::Grant :
                        ProjGrant projGrant;

                        select firstonly ContractId from projFundingSource
                                exists join projGrant
                                where projGrant.CustAccount == invoiceFundingSource.AccountNum
                                    && projFundingSource.ProjGrant == projGrant.RecId
                                    && projFundingSource.ContractId == ProjectContract.value();
                        break;

                    case ProjFundingType::Customer :
                            select firstonly ContractId from projFundingSource
                                where projFundingSource.CustAccount == invoiceFundingSource.AccountNum
                                    && projFundingSource.ContractId == ProjectContract.value();
                        break;

                    case ProjFundingType::Organization :
                            select firstonly ContractId from projFundingSource
                                where invoiceFundingSource.party == projFundingSource.Party
                                    && projFundingSource.ContractId == ProjectContract.value();
                        break;
                }
                    
                ret = ret && projFundingSource;

                if (!ret)
                {
                    ret = checkFailed(strfmt("@Proj:ProjInvoiceProposalSearchFundingSourceContractErrorMessage", ProjectContract.value()));
                }
            }

            projInvoiceTableLocal = ProjInvoiceTable::find(ProjectContract.value());

            if (!projInvoiceTableLocal)
            {
                ret = checkFailed("@GLS360138");
            }
        }

        if (projInvoiceTableLocal && projInvoiceTableLocal.psaContractLines == NoYes::Yes)
        {
            ret = checkFailed("@PSA3120");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectLookup</Name>
				<Source><![CDATA[
    internal void projectLookup(FormStringControl _control)
    {
        if (SearchChoice == ProjInvoiceSearchSelectionFilter::FundingSource
            && !ProjectContract.value())
        {
            Query query = new Query();

            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ProjTable), _control);
            sysTableLookup.addLookupfield(fieldNum(Projtable, ProjId), true);

            QueryBuildDataSource projectDataSource = query.addDataSource(tableNum(ProjTable));

            select firstonly FundingType, Party, AccountNum from invoiceFundingSource
                where invoiceFundingSource.RecId == SelectFundingSource.value();

            if (invoiceFundingSource.AccountNum != "@SYS14437")
            {
                switch (invoiceFundingSource.FundingType)
                {
                    case ProjFundingType::Grant :

                        QueryBuildDataSource grantFundingSourceDataSource = projectDataSource.addDataSource(tableNum(ProjFundingSource));
                        grantFundingSourceDataSource.joinMode(JoinMode::ExistsJoin);
                        grantFundingSourceDataSource.relations(false);
                        grantFundingSourceDataSource.addLink(fieldNum(ProjTable, ProjInvoiceProjId), fieldNum(ProjFundingSource, ContractId));

                        QueryBuildDataSource grantDataSource = grantFundingSourceDataSource.addDataSource(tableNum(ProjGrant));
                        grantDataSource.joinMode(JoinMode::ExistsJoin);
                        grantDataSource.relations(false);
                        grantDataSource.addLink(fieldNum(ProjFundingSource, ProjGrant), fieldNum(ProjGrant, RecId));

                        QueryBuildRange queryBuildRangeGrant = grantDataSource.addRange(fieldNum(ProjGrant, CustAccount));
                        queryBuildRangeGrant.value(invoiceFundingSource.AccountNum);
                        break;

                    case ProjFundingType::Customer :
                        QueryBuildDataSource customerFundingSourceDataSource = projectDataSource.addDataSource(tableNum(ProjFundingSource));
                        customerFundingSourceDataSource.joinMode(JoinMode::ExistsJoin);
                        customerFundingSourceDataSource.relations(false);
                        customerFundingSourceDataSource.addLink(fieldNum(ProjTable, ProjInvoiceProjId), fieldNum(ProjFundingSource, ContractId));

                        QueryBuildRange queryBuildRangeCustomer = customerFundingSourceDataSource.addRange(fieldNum(ProjFundingSource, CustAccount));
                        queryBuildRangeCustomer.value(invoiceFundingSource.AccountNum);
                        break;

                    case ProjFundingType::Organization :
                        QueryBuildDataSource organizationFundingSourceDataSource = projectDataSource.addDataSource(tableNum(ProjFundingSource));
                        organizationFundingSourceDataSource.joinMode(JoinMode::ExistsJoin);
                        organizationFundingSourceDataSource.relations(false);
                        organizationFundingSourceDataSource.addLink(fieldNum(ProjTable, ProjInvoiceProjId), fieldNum(ProjFundingSource, ContractId));

                        QueryBuildDataSource partyDataSource = organizationFundingSourceDataSource.addDataSource(tableNum(DirPartyTable));
                        partyDataSource.joinMode(JoinMode::ExistsJoin);
                        partyDataSource.relations(false);
                        partyDataSource.addLink(fieldNum(ProjFundingSource, Party), fieldNum(DirPartyTable, RecId));

                        QueryBuildRange queryBuildRangeOrganization = organizationFundingSourceDataSource.addRange(fieldNum(ProjFundingSource, Party));
                        queryBuildRangeOrganization.value(queryValue(invoiceFundingSource.Party));

                        QueryBuildRange queryBuildRangeOrganizationName = partyDataSource.addRange(fieldNum(DirPartyTable, Name));
                        queryBuildRangeOrganizationName.value(invoiceFundingSource.AccountNum);
                        break;
                }
            }
            SysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
        else
        {
            ProjOpsManagementLogger logger = ProjOpsManagementLogger::createLogger(classStr(ProjInvoiceProposalPeriodic));
            using (var activityContext = logger.projOpsManagementActivity().projTableLookupContext())
            {
                Query query;

                if (ProjectContract.value() == "@SYS14437")
                {
                    query = ProjTableLookup::buildQueryWithRanges([ProjType::Time, ProjType::TimeMaterial, ProjType::FixedPrice]);
                }
                else
                {
                    query = ProjTableLookup::buildQueryWithRanges([ProjType::Time, ProjType::TimeMaterial, ProjType::FixedPrice], ProjectContract.value());
                }
                SysTableLookup sysTableLookup = ProjTableLookup::createLookup(_control, query);

                sysTableLookup.performFormLookup();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectModified</Name>
				<Source><![CDATA[
    internal boolean projectModified(FormStringControl _control)
    {
        if (_control.text())
        {
            ProjTable projTableLocal = ProjTable::find(SelectProject.value());

            this.initFromProjInvoiceTable(ProjInvoiceTable::find(projTableLocal.ProjInvoiceProjId));
        }

        this.enableProjectFilters();
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectValidate</Name>
				<Source><![CDATA[
    internal boolean projectValidate(FormStringControl _control)
    {
        boolean ret = true;
        ProjTable projTableLocal;
        ProjFundingSource projFundingSource;

        if (_control.text())
        {
            ProjId projIdLocal = SelectProject.value();

            select firstonly FundingType, Party, AccountNum from invoiceFundingSource
                where invoiceFundingSource.RecId == SelectFundingSource.value();

            if (SearchChoice == ProjInvoiceSearchSelectionFilter::FundingSource
                && invoiceFundingSource.AccountNum != "@SYS14437")
            {
                switch (invoiceFundingSource.FundingType)
                {
                    case ProjFundingType::Grant :
                        ProjGrant projGrant;

                        select firstonly ProjId from projTableLocal
                                where projTableLocal.ProjId == _control.text()
                                exists join projFundingSource
                                where ProjTableLocal.ProjInvoiceProjId == projFundingSource.ContractId
                                exists join projGrant
                                where projGrant.CustAccount == invoiceFundingSource.AccountNum
                                    && projGrant.RecId == projFundingSource.ProjGrant;
                        break;

                    case ProjFundingType::Customer :
                         select firstonly ProjId from projTableLocal
                                where projTableLocal.ProjId == _control.text()
                                exists join projFundingSource
                                where projFundingSource.ContractId == projTableLocal.ProjInvoiceProjId
                                    && projFundingSource.CustAccount == invoiceFundingSource.AccountNum;
                        break;

                    case ProjFundingType::Organization :
                        select firstonly ProjId from projTableLocal
                            where projTableLocal.ProjId == _control.text()
                            exists join projFundingSource
                            where projFundingSource.Party == invoiceFundingSource.Party;
                        break;
                }

                ret = ret && projTableLocal;

                if (!ret)
                {
                    ret = checkFailed(strfmt("@Proj:ProjInvoiceProposalSearchFundingSourceProjectErrorMessage", _control.text()));
                }
            }

            projTableLocal = projTable::find(ProjIdLocal);

            if (!projTableLocal
                || !(projTableLocal.Type == ProjType::FixedPrice
                    || projTableLocal.Type != ProjType::Time
                    || projTableLocal.Type != ProjType::TimeMaterial))
            {
                ret = checkFailed("@GLS360137");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFundingSourceLookup</Name>
				<Source><![CDATA[
    private void initFundingSourceLookup()
    {
        ProjFundingSource fundingSource;
        int recordCount;

        delete_from invoiceFundingSource;

        if (SearchChoice == ProjInvoiceSearchSelectionFilter::FundingSource)
        {
            while select FundingSourceId, ProjGrant, FundingType, CustAccount, Party from fundingSource
                where (ProjectContract.value() == ''
                    || fundingSource.ContractId == ProjectContract.value())
            {
                select firstOnly RecId from invoiceFundingSource
                    where invoiceFundingSource.Party == fundingSource.Party
                        && invoiceFundingSource.FundingType == fundingSource.FundingType;

                if (fundingSource.FundingType != ProjFundingType::OnHoldFundingSource
                    && !invoiceFundingSource)
                {
                    invoiceFundingSource.clear();
                    invoiceFundingSource.FundingSourceId = fundingSource.FundingSourceId;
                    invoiceFundingSource.Party = fundingSource.Party;

                    switch (fundingSource.FundingType)
                    {
                        case ProjFundingType::Grant :
                            invoiceFundingSource.AccountNum = ProjGrant::find(fundingSource.ProjGrant).CustAccount;
                            invoiceFundingSource.FundingType = ProjFundingType::Grant;
                            invoiceFundingSource.Name =  CustTable::find(invoiceFundingSource.AccountNum).name();
                            invoiceFundingsource.insert();
                            break;

                        case ProjFundingType::Customer :
                            invoiceFundingSource.AccountNum = fundingSource.CustAccount;
                            invoiceFundingSource.FundingType = ProjFundingType::Customer;
                            invoiceFundingSource.Name =  CustTable::findByPartyRecId(invoiceFundingSource.Party).name();
                            invoiceFundingsource.insert();
                            break;

                        case ProjFundingType::Organization :
                            invoiceFundingSource.FundingType = ProjFundingType::Organization;
                            invoiceFundingSource.Name =  DirPartyTable::findRec(invoiceFundingSource.Party).Name;
                            invoiceFundingSource.AccountNum = invoiceFundingSource.Name;

                            invoiceFundingsource.insert();
                            break;
                    }
                }
            }
        }
        else if (SearchChoice == ProjInvoiceSearchSelectionfilter::Projectcontract)
        {
            while select FundingSourceId, Party, ProjGrant, FundingType from fundingSource
                where fundingSource.ContractId == ProjectContract.value()
                    && fundingSource.FundingType != ProjFundingType::OnHoldFundingSource
                    && fundingSource.FundingType != ProjFundingType::Organization
            {
                invoiceFundingSource.clear();
                invoiceFundingSource.Name  = fundingSource.name();
                invoiceFundingSource.FundingSourceId = fundingSource.FundingSourceId;
                invoiceFundingSource.insert();
                recordCount++;
            }
        }
        
        if (SearchChoice == ProjInvoiceSearchSelectionFilter::FundingSource || recordCount > 1 )
        {
            invoiceFundingSource.clear();
            invoiceFundingSource.Name = '';
            invoiceFundingSource.FundingSourceId = "@SYS14437";

            if (SearchChoice == ProjInvoiceSearchSelectionFilter::FundingSource)
            {
                invoiceFundingSource.AccountNum = "@SYS14437";
            }

            invoiceFundingSource.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjInvoiceProjIdLookup</Name>
				<Source><![CDATA[
    internal void initProjInvoiceProjIdLookup()
    {
        delete_from InvoiceTable;

        projInvoiceTable projinvoiceProjidTable;
        while select projInvoiceProjId, Description from projinvoiceProjidTable
        {
            InvoiceTable.clear();
            InvoiceTable.Description = projinvoiceProjidTable.Description;
            InvoiceTable.AccountNum = projinvoiceProjidTable.fundingSourceName();
            InvoiceTable.ProjInvoiceProjId = projinvoiceProjidTable.ProjInvoiceProjId;
            InvoiceTable.insert();
        }

        InvoiceTable.clear();
        InvoiceTable.Description = '';
        InvoiceTable.ProjInvoiceProjId = "@SYS14437";
        InvoiceTable.AccountNum = "@SYS14437";
        InvoiceTable.insert();

        ProjectContract.value(InvoiceTable.ProjInvoiceProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableProjectFilters</Name>
				<Source><![CDATA[
    internal void enableProjectFilters()
    {
        ProjectContract.enabled(!SelectProject.value());

        boolean isEnabled = ProjectContract.value() && ProjectContract.value() != "@SYS14437";

        ContractFundingSource.enabled(isEnabled);

    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceTable</Name>
				<Source><![CDATA[
    internal void initFromProjInvoiceTable(ProjInvoiceTable _projInvoiceTable)
    {
        if (ProjectContract.value() != _projInvoiceTable.ProjInvoiceProjId && ProjectContract.value() != "@SYS14437")
        {
            ProjectContract.value(_projInvoiceTable.ProjInvoiceProjId);

            if (SearchChoice != ProjInvoiceSearchSelectionFilter::FundingSource)
            {
                this.initFundingSourceLookup();
            }
        }

        this.enableProjectFilters();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>