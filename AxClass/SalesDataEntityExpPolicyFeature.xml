<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesDataEntityExpPolicyFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
/// <summary>
/// The <c>SalesDataEntityExpPolicyFeature</c> class defines the feature enabling tools to
/// enable sales data entity export setup policy.
/// </summary>
[ExportAttribute(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
internal final class SalesDataEntityExpPolicyFeature implements IFeatureMetadata, IFeatureMetadataEnablementNotifiable
{
    private static SalesDataEntityExpPolicyFeature instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        instance = new SalesDataEntityExpPolicyFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    static internal SalesDataEntityExpPolicyFeature instance()
    {
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@SCM:SalesDataEntityExpPolicyFeature_Label");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::SalesAndMarketing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@SCM:SalesDataEntityExpPolicyFeature_Summary");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return 'https://go.microsoft.com/fwlink/?linkid=2255438';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabled()
    {
        return Dynamics.AX.Application.FeatureStateProvider::IsFeatureEnabled(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onEnabled()
    {
        ttsbegin;
        SalesParameters salesParameters;
           
        while select crosscompany salesParameters
            where salesParameters.SkipReferencedDataDuringChangeTracking == NoYes::No
                || salesParameters.SkipSalesQuotationReferencedDataDuringChangeTracking == NoYes::No
        {
            changecompany(salesParameters.DataAreaId)
            {
                salesParameters.selectForUpdate(true);
                salesParameters.SkipReferencedDataDuringChangeTracking = NoYes::Yes;
                salesParameters.SkipSalesQuotationReferencedDataDuringChangeTracking = NoYes::Yes;
                salesParameters.doUpdate();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onDisabled()
    {
        ttsbegin;
        SalesParameters salesParameters;
           
        while select crosscompany salesParameters
            where salesParameters.SkipReferencedDataDuringChangeTracking == NoYes::Yes
                || salesParameters.SkipSalesQuotationReferencedDataDuringChangeTracking == NoYes::Yes
        {
            changecompany(salesParameters.DataAreaId)
            {
                salesParameters.selectForUpdate(true);
                salesParameters.SkipReferencedDataDuringChangeTracking = NoYes::No;
                salesParameters.SkipSalesQuotationReferencedDataDuringChangeTracking = NoYes::No;
                salesParameters.doUpdate();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>