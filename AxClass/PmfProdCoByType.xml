<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfProdCoByType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class to process changes to the production Co/By lines.
/// </summary>
/// <remarks>
/// The class is being derived from the <c>InventType</c> class and provides
/// functionality similar to <c>ProdTableType</c> but for Co/By product lines
/// (records in <c>PmfProdCoBy</c>)
/// </remarks>
public class PmfProdCoByType extends InventType
{
    PmfProdCoBy  prodCoBy;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a Co/By production batch line record is deleted.
    /// </summary>
    public void deleting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a Co/By production batch line record has been deleted.
    /// </summary>
    public void deleted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a Co/By production batch line record is inserted.
    /// </summary>
    public void inserting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a Co/By production batch line record has been inserted.
    /// </summary>
    public void inserted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new instance with the <c>PmfProdCoBy</c> record
    /// </summary>
    /// <param name="_prodCoBy">
    /// The record to create the Co/By type for
    /// </param>
    /// <remarks>
    /// The parameter is necessary to follow the pattern given by the
    /// <c>InventType</c> class
    /// </remarks>
    protected void new(PmfProdCoBy _prodCoBy)
    {
        prodCoBy = _prodCoBy;

        super(_prodCoBy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyCoBySched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity to be scheduled for the co-product or by-product.
    /// </summary>
    /// <returns>
    /// The inventory quantity to be scheduled.
    /// </returns>
    /// <remarks>
    /// The actual calculation is done by <c>PmfCoByMap</c>, but the method
    /// takes the specified rounding algorithm into consideration to calculate
    /// the final result.
    /// </remarks>
    public InventQty qtyCoBySched()
    {
        InventQty   serieSize = prodCoBy.prodTable().QtySched;

        return this.roundCoByQuantity(serieSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundCoByQuantity</Name>
				<Source><![CDATA[
    private InventQty roundCoByQuantity(InventQty _serieSize)
    {
        InventQty   coByQty;
        PmfCoByMap  coBy = prodCoBy;

        coByQty = coBy.coByQty(_serieSize);

        if (coBy.RoundUp == PmfCoByRoundUp::Qty && _serieSize)
        {
            if (abs(_serieSize) != 1)
            {
                coByQty = roundUp(coByQty/_serieSize,coBy.RoundUpQty);
                coByQty = coByQty * _serieSize;
            }
            else
            {
                coByQty = roundUp(coByQty,coBy.RoundUpQty);
            }
        }

        switch (coBy.RoundUp)
        {
            case PmfCoByRoundUp::MeasureConfig:
                if (_serieSize && coBy.RoundUpQty >= coByQty/_serieSize)
                {
                    Factor      calcDim1;
                    Factor      calcDim2;
                    Factor      calcDim3;

                    if (coByQty)
                    {
                        calcDim1 = _serieSize ? _serieSize : 1;
                        calcDim2 = coBy.RoundUpQty * calcDim1 / coByQty;
                    }

                    calcDim2 = trunc(calcDim2);
                    calcDim3 = calcDim1 / (calcDim2 ? calcDim2 : 1);
                    calcDim3 = roundUp(calcDim3,1);
                    coByQty   = calcDim3 * coBy.RoundUpQty;
                }
                break;
            case PmfCoByRoundUp::Consumption:
                if (coByQty >= 0)
                {
                    coByQty = roundUp(coByQty,coBy.RoundUpQty);
                }
                else
                {
                    coByQty = roundDown(coByQty,coBy.RoundUpQty);
                }
                break;
        }

        return decround(coByQty,
            UnitOfMeasure::findBySymbol(prodCoBy.inventTable().inventUnitId()).DecimalPrecision);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCostEstimation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Do the cost estimation for the co/by line
    /// </summary>
    /// <remarks>
    /// The actual calculation and setting of the estimation is done in method
    /// <c>setCoByEstimation</c>.
    /// </remarks>
    public void runCostEstimation()
    {
        this.setCoByEstimation();

        PmfProdCoBy::updateExclBackStatus(prodCoBy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStartUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the startup for the co/by line
    /// </summary>
    /// <param name="_startUpQty">
    /// The quantity to be started
    /// </param>
    /// <param name="_postDate">
    /// The date the quantity should be posted on
    /// </param>
    /// <param name="_pdsCWInventStup">
    /// The catch weight quantity to be started. The parameter is optional and
    /// only valid for catch weight items.
    /// </param>
    /// <remarks>
    /// The actual starting is done in method <c>setCoByStartUp</c>.
    /// </remarks>
    public void runStartUp(
        ProdQty         _startUpQty,
        TransDate       _postDate = dateNull(),
        PdsCWInventQty  _pdsCWInventStup = 0)
    {
        this.setCoByStartUp(
            _startUpQty,
            _postDate,
            _pdsCWInventStup);

        prodCoBy.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatusDecrease</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the decrease of the production order status for the Co/By line
    /// </summary>
    /// <param name="_prodParmStatusDecrease">
    /// The parameters for the decrease operation
    /// </param>
    /// <returns>
    /// true, if the status has been decreased successfully
    /// </returns>
    /// <remarks>
    /// The actual work is being delegated to the <c>PmfProdCoByStatus</c>
    /// class hierarchy.
    /// </remarks>
    public boolean runStatusDecrease(
        ProdParmStatusDecrease _prodParmStatusDecrease)
    {
        return prodCoBy.status().runStatusDecrease(_prodParmStatusDecrease);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBackStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the back order status of the Co/By line
    /// </summary>
    /// <remarks>
    /// The back order status is <c>ProdBackStatus::Receipt</c> as long as
    /// there is physical quantity left to be produced. Once all has been
    /// produced or the line has been marked as 'Reported as Finished' through
    /// a RAF journal, the status will be set to <c>ProdBackStatus::Completed</c>.
    /// </remarks>
    public void setBackStatus()
    {
        if (prodCoBy.RemainCoByPhysical != 0)
        {
            prodCoBy.BackorderStatus = ProdBackStatus::Receipt;
        }
        else
        {
            prodCoBy.BackorderStatus = ProdBackStatus::Completed;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCoByEstimation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the calculated and remain values of the Co/By line
    /// </summary>
    /// <remarks>
    /// If the Co/By line has been marked as 'Ended' the quantities
    /// will not be calculated.
    /// </remarks>
    public void setCoByEstimation()
    {
        boolean cwItem = PdsGlobal::pdsIsCWItem(prodCoBy.ItemId);

        if (prodCoBy.EndConsump == NoYes::Yes)
        {
            return;
        }

        prodCoBy.QtyCoByCalc = this.qtyCoBySched();

        if (cwItem)
        {
            prodCoBy.PdsCWInventCalc = PdsCatchWeight::cwQty(
                prodCoBy.ItemId,
                prodCoBy.QtyCoByCalc);
            prodCoBy.QtyCoByCalc = PdsCatchWeight::inventQty(
                prodCoBy.ItemId,
                prodCoBy.PdsCWInventCalc);
        }

        if (prodCoBy.CoByQty || !PmfProdCoByWithZeroQtyFlight::instance().isEnabled())
        {
            prodCoBy.RemainCoByPhysical =
                prodCoBy.QtyCoByCalc
                    - prodCoBy.reportedFinishedGood()
                    - prodCoBy.reportedFinishedError();
        }
        else
        {
            prodCoBy.RemainCoByPhysical = 0;
        }

        if (cwItem)
        {
            prodCoBy.PdsCWRemainPhysical =
                prodCoBy.pdsCWMaxQtyCalcStUpInvent()
                    - prodCoBy.pdsCWReportedFinishedGood()
                    - prodCoBy.pdsCWReportedFinishedError();
        }

        prodCoBy.CalcDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCoByStartUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and sets the startup quantity of the Co/By line.
    /// </summary>
    /// <param name="_startUpQty">
    /// Startup quantity of the main end item.
    /// </param>
    /// <param name="_postDate">
    /// The post date for the startup.
    /// </param>
    /// <param name="_pdsCWInventStup">
    /// The startup catch weight quantity of the main end item.
    /// </param>
    public void setCoByStartUp(
        ProdQty         _startUpQty,
        TransDate       _postDate = dateNull(),
        PdsCWInventQty  _pdsCWInventStup = 0)
    {
        InventQty startUpQty = this.roundCoByQuantity(_startUpQty);

        if (PdsGlobal::pdsIsCWItem(prodCoBy.ItemId))
        {
            PdsCWInventQty cwStartUpQty = PdsCatchWeight::cwQty(prodCoBy.ItemId,startUpQty);
            prodCoBy.PdsCWInventStup += cwStartUpQty;
            startUpQty = PdsCatchWeight::inventQty(prodCoBy.ItemId,cwStartUpQty);
        }

        prodCoBy.QtyCoByStUp += startUpQty;

        prodCoBy.StUpDate = _postDate
            ? _postDate
            : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCoByReportFinishedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates report as finished co/by inventory and catch weight quantity.
    /// </summary>
    /// <param name="_prodReportedGoodQty">
    /// A good inventory quantity reported as finished for formula or planning item product.
    /// </param>
    /// <param name="_cwReportedGoodQty">
    /// A good catch weight quantity reported as finished for formula or planning item product.
    /// </param>
    /// <returns>
    /// A container with the values for the good quantity in inventory and catch weight units.
    /// </returns>
    /// <remarks>
    /// Used when reporting as finished from route or job card journals co/by products derived from formula or planning item
    /// </remarks>
    public container calcCoByReportFinishedQty(ProdReportedGood  _prodReportedGoodQty,
                                               PdsCWBatchGood    _cwReportedGoodQty = 0)
    {
        PmfCoByQty          prodReportedGoodQty;
        PdsCWInventQty      cwReportedGoodQty;

        prodReportedGoodQty  = prodCoBy.PmfCoByMap::coByQty(_prodReportedGoodQty);

        if (PdsGlobal::pdsIsCWItem(prodCoBy.ItemId))
        {
            cwReportedGoodQty   = PdsCatchWeight::cwQty(prodCoBy.ItemId, prodReportedGoodQty);
            prodReportedGoodQty = PdsCatchWeight::inventQty(prodCoBy.ItemId, cwReportedGoodQty);
        }
        else
        {
            prodReportedGoodQty  = decround(prodReportedGoodQty,
                                            UnitOfMeasure::findBySymbol(prodCoBy.inventTable().inventUnitId()).DecimalPrecision);
        }

        return [prodReportedGoodQty, cwReportedGoodQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a Co/By production batch line record is updated.
    /// </summary>
    public void updating()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a Co/By production batch line record has been updated.
    /// </summary>
    /// <param name="_ProdCoByOrig">
    /// The original Co/By production batch line which is updated.
    /// </param>
    public void updated(PmfProdCoBy _ProdCoByOrig)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify, that the Co/By line can be updated
    /// </summary>
    /// <returns>
    /// true, if the co/by line can be updated
    /// </returns>
    /// <remarks>
    /// The validation is being delegated to the <c>PmfProdCoBy</c> record.
    /// </remarks>
    public boolean validateWrite()
    {
        return prodCoBy.validateWrite(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of the PmfProdCoByType object
    /// </summary>
    /// <param name="_pmfProdCoBy">
    /// The record to create the instance for
    /// </param>
    /// <returns>
    /// The newly created instance
    /// </returns>
    /// <remarks>
    /// The constructs deviates from the normal construct pattern to follow
    /// the pattern given by the <c>InventType</c> class.
    /// </remarks>
    public static PmfProdCoByType construct(PmfProdCoBy _pmfProdCoBy)
    {
        return new PmfProdCoByType(_pmfProdCoBy);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>