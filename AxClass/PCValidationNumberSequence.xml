<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcValidationNumberSequence</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Validates the setup of number sequences that are relevant to a product configuration.
/// </summary>
class PcValidationNumberSequence
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNewBomIdBasedOnNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a new bom ID.
    /// </summary>
    /// <returns>
    /// A bom ID.
    /// </returns>
    public BOMId getNewBomIdBasedOnNumberSequence()
    {
        BOMId bomId = this.getNewIdBasedOnNumberSequence(BOMTable::numberSeq());

        if (bomId == '')
        {
            this.validateBomSetup();
        }

        return bomId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewIdBasedOnNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a new ID based on a number sequence.
    /// </summary>
    /// <param name="_numberSeq">
    /// A number sequence.
    /// </param>
    /// <returns>
    /// A new ID.
    /// </returns>
    protected str getNewIdBasedOnNumberSequence(NumberSeq _numberSeq)
    {
        _numberSeq.used();
        return _numberSeq.num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewRouteIdBasedOnNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a new route ID.
    /// </summary>
    /// <returns>
    /// A route ID.
    /// </returns>
    public RouteId getNewRouteIdBasedOnNumberSequence()
    {
        RouteId routeId = this.getNewIdBasedOnNumberSequence(RouteTable::numberSeq());

        if (routeId == '')
        {
            this.validateRouteOperationSetup();
        }

        return routeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>release</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the appropriate numbersequence values in their respective numbersequences.
    /// </summary>
    /// <param name="_bomId">
    /// A bill of material ID.
    /// </param>
    /// <param name="_RouteId">
    /// A route ID.
    /// </param>
    /// <param name="_configurationName">
    /// A configuration name.
    /// </param>
    public void release(
        BOMId                   _bomId,
        RouteId                 _RouteId,
        EcoResConfigurationName _configurationName)
    {
        if (_bomId)
        {
            NumberSeq::release(BOMTable::numberSeq().parmNumberSequenceCode(), _bomId);
        }
        if (_routeId)
        {
            NumberSeq::release(RouteTable::numberSeq().parmNumberSequenceCode(), _routeId);
        }

        NumberSeq::releaseNumber(EcoResProductParameters::numRefConstraintBasedConfigurationName().NumberSequenceId , _configurationName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBomSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the number sequence setup for BOMs.
    /// </summary>
    /// <returns>
    /// true if the bom setup is valid; false, otherwise.
    /// </returns>
    public boolean validateBomSetup()
    {
        return this.validateNumberSequence(BOMParameters::numRefBOMId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a number sequence.
    /// </summary>
    /// <param name="_numberSequenceReference">
    /// A number sequence.
    /// </param>
    /// <returns>
    /// true if the number sequence is valid; false, otherwise.
    /// </returns>
    protected boolean validateNumberSequence(NumberSequenceReference _numberSequenceReference)
    {
        NumberSequenceTable      numberSequenceTable = NumberSequenceTable::find(_numberSequenceReference.NumberSequenceId);

        //note that all number sequences are evaluated, so the user
        //gets all the places where he needs to update the number seq setup
        setPrefix("@SYS25067");

        if (!numberSequenceTable)
        {
            return checkFailed(strFmt("@SYS53911", _numberSequenceReference.referenceLabel(),_numberSequenceReference.referenceModuleLabel()));
        }
        if (numberSequenceTable.Manual)
        {
            return checkFailed(strFmt("@SYS131762", _numberSequenceReference.referenceLabel()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRouteOperationSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the number sequence setup for route operations.
    /// </summary>
    /// <returns>
    /// true if the route operation setup is valid; false, otherwise.
    /// </returns>
    public boolean validateRouteOperationSetup()
    {
        return this.validateNumberSequence(RouteParameters::numRefRouteId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the number sequences are correctly setup to run a product configuration.
    /// </summary>
    /// <returns>
    ///    true if the number sequence setup is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method should only be called when the user is running a variant configuration and may have to
    ///    produce a unique configuration.
    /// </remarks>
    public boolean validateSetup()
    {
        boolean ret = true;

        //InventDim id
        ret = this.validateNumberSequence(InventParameters::numRefInventDimId()) && ret;

        //PC configuration ID
        ret = this.validateNumberSequence(EcoResProductParameters::numRefConstraintBasedConfigurationName()) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCValidationNumberSequence construct()
    {
        return new PCValidationNumberSequence();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>