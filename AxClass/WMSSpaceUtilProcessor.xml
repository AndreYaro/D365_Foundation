<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WMSSpaceUtilProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Processes the master plan transactions and creates forecast data for the space utilization load report.
/// </summary>
abstract class WMSSpaceUtilProcessor
{
    WMSSpaceUtilInconsistencyLogger inconsistencyLogger;
    WMSSpaceUtilSetupOptions        setupOptions;
    int                             numberOfsupplyDemandTypes;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFallBackWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates specified inventory dimensions with the default warehouse if the original warehouse is not
    /// set.
    /// </summary>
    /// <param name="_inventDim">
    /// An instance of the <c>InventDim</c> table.
    /// </param>
    /// <returns>
    /// Original inventory dimensions with the default warehouse set.
    /// </returns>
    protected InventDim checkFallBackWarehouse(InventDim _inventDim)
    {
        InventDim   newInventDim;

        newInventDim.initFromInventDim(_inventDim);

        if (!newInventDim.InventLocationId)
        {
            newInventDim.InventLocationId = InventFallbackWarehouse::find(newInventDim.InventSiteId).InventLocationId;
        }

        return newInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates planned forecast records for the specified item and inventory location data.
    /// </summary>
    /// <param name="_itemId">
    /// A <c>itemId</c> value.
    /// </param>
    /// <param name="_inventDim">
    /// An instance of the <c>InventDim</c> table.
    /// </param>
    /// <param name="_wmsStoreZoneId">
    /// A <c>WMSStoreZoneId</c> value.
    /// </param>
    /// <param name="_inventDimOrigin">
    /// An instance of the <c>InventDim</c> table that contains original coverage dimensions.
    /// </param>
    /// <param name="_planId">
    /// A reference to the master plan version.
    /// </param>
    protected void createForecast(ItemId _itemId, InventDim _inventDim, WMSStoreZoneId _wmsStoreZoneId, InventDim _inventDimOrigin, RefRecId _planId)
    {
        InventQty                       itemPalletQuantity;
        Volume                          itemGrossVolume;
        ItemGrossWeight                 itemGrossWeight;
        RecId                           storageLoadUnitRecId;
        ReqSupplyDemandScheduleModel    supplyDemandScheduleModel;
        RefRecId                        reportSetup = setupOptions.parmReportSetupRecId();
        WMSReportServiceItemProvider    reportServiceItemProvider;

        storageLoadUnitRecId = WMSStorageLoadUnitMember::findStorageLoadUnitByMember(_inventDim.InventSiteId, _inventDim.InventLocationId, _wmsStoreZoneId, reportSetup).RecId;

        if (storageLoadUnitRecId)
        {
            this.storePlannedForecastMapping(_itemId, _inventDimOrigin, storageLoadUnitRecId, _planId);

            supplyDemandScheduleModel = this.executeSupplySchedule(_itemId, _inventDimOrigin);

            reportServiceItemProvider = WMSReportServiceItemProvider::newFromItemId(_itemId);
            reportServiceItemProvider.calculate();

            itemPalletQuantity = reportServiceItemProvider.getPalletQuantity();
            itemGrossVolume = reportServiceItemProvider.getGrossVolume();
            itemGrossWeight = reportServiceItemProvider.getGrossWeigth();

            this.logProductInconsistencies(_itemId, storageLoadUnitRecId, itemPalletQuantity, itemGrossVolume, itemGrossWeight);

            this.updatePlanForecast(reportServiceItemProvider, _inventDim.InventSiteId, _inventDim.InventLocationId, _wmsStoreZoneId, supplyDemandScheduleModel);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineSupplyDemandTypes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Defines a set of supply demand types.
    /// </summary>
    /// <returns>
    ///     A set of supply demand types.
    /// </returns>
    protected container defineSupplyDemandTypes()
    {
        container                       supplyDemandTypes;

        supplyDemandTypes = ReqSupplyDemandTypes::defineSupplyDemandTypes();
        return supplyDemandTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSupplySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes supply forecast to retrieve master plan data.
    /// </summary>
    /// <param name="_itemId">
    /// A <c>itemId</c> value.
    /// </param>
    /// <param name="_inventDim">
    /// An instance of the <c>InventDim</c> table.
    /// </param>
    /// <returns>
    /// An instance of the <c>ReqSupplyDemandScheduleModel</c> class.
    /// </returns>
    protected abstract ReqSupplyDemandScheduleModel executeSupplySchedule(ItemId _itemId, InventDim _inventDim)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentReqPlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the current master plan version
    /// </summary>
    /// <returns>
    ///     A reference to the master plan version.
    /// </returns>
    protected RefRecId getCurrentReqPlan()
    {
        return ReqPlan::findReqPlanId(setupOptions.parmReqPlanId()).findActiveVersion().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSupplySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized the <c>ReqSupplyDemandScheduleModel</c> class.
    /// </summary>
    /// <param name="_itemId">
    /// An <c>itemId</c> value.
    /// </param>
    /// <param name="_inventDim">
    /// An instance of <c>InventDim</c> .
    /// </param>
    /// <returns>
    /// An instance of <c>ReqSupplyDemandScheduleModel</c> class.
    /// </returns>
    protected ReqSupplyDemandScheduleModel initSupplySchedule(ItemId _itemId, InventDim _inventDim)
    {
        ReqSupplyDemandScheduleModel    reqSupplyDemandScheduleModel = ReqSupplyDemandScheduleModel::construct();
        InventDimParm                   inventDimParm;

        inventDimParm.InventSiteIdFlag = NoYes::Yes;
        inventDimParm.InventLocationIdFlag = NoYes::Yes;
        inventDimParm.setAllProductDimensions();

        reqSupplyDemandScheduleModel.parmItemId(_itemId);
        reqSupplyDemandScheduleModel.parmReqPlanId(ReqPlan::findReqPlanId(setupOptions.parmReqPlanId()).ReqPlanId);
        reqSupplyDemandScheduleModel.parmTodayDate(setupOptions.parmFromDate());
        reqSupplyDemandScheduleModel.parmPeriodTemplate(WorkPeriodTemplate::findName(setupOptions.parmPeriodTemplateName()).RecId);
        reqSupplyDemandScheduleModel.parmQueryData(true);
        reqSupplyDemandScheduleModel.parmNumberOfSupplyDemandTypes(numberOfsupplyDemandTypes);
        reqSupplyDemandScheduleModel.parmInventDim(_inventDim);
        reqSupplyDemandScheduleModel.parmSkipPeriodDescriptions(true);
        reqSupplyDemandScheduleModel.parmInventDimParm(inventDimParm);
        reqSupplyDemandScheduleModel.parmSkipOutlookPeriod(true);

        return reqSupplyDemandScheduleModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForecastForPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates forecast record for the given forecast data.
    /// </summary>
    /// <param name="_supplyDemandDelta">
    /// A supply or demand quantity.
    /// </param>
    /// <param name="_trackingDate">
    /// A forecast tracking date.
    /// </param>
    /// <param name="_hasBackLog">
    /// Specifies if the forecast has backlog.
    /// </param>
    /// <param name="_reportServiceItemProvider">
    /// An instance of the <c>WMSReportServiceItemProvider</c> class
    /// </param>
    /// <param name="_inventSiteId">
    /// A <c>InventSiteId</c> value.
    /// </param>
    /// <param name="_inventLocationId">
    /// A <c>InventLocationId</c> value.
    /// </param>
    /// <param name="_wmsStoreZoneId">
    /// A <c>WMSStoreZoneId</c> value.
    /// </param>
    protected void insertForecastForPeriod(
        Qty                             _supplyDemandDelta,
        TransDate                       _trackingDate,
        boolean                         _hasBackLog,
        WMSReportServiceItemProvider    _reportServiceItemProvider,
        InventSiteId                    _inventSiteId,
        InventLocationId                _inventLocationId,
        WMSStoreZoneId                  _wmsStoreZoneId)
    {
        Volume                      supplyDemandDeltaVolume;
        ItemGrossWeight             supplyDemandDeltaWeight;
        WMSSpaceUtilPlanForecast    planForecast;
        RefRecId                    reportSetup = setupOptions.parmReportSetupRecId();

        if (_supplyDemandDelta)
        {
            supplyDemandDeltaVolume         = _reportServiceItemProvider.getVolumePerQty(_supplyDemandDelta);
            supplyDemandDeltaWeight         = _reportServiceItemProvider.getWeightPerQty(_supplyDemandDelta);

            if (supplyDemandDeltaVolume || supplyDemandDeltaWeight)
            {
                planForecast.TrackingDate                   = _trackingDate;
                planForecast.HasBacklog                     = _hasBackLog;
                planForecast.SupplyDemandDeltaVolume        = supplyDemandDeltaVolume;
                planForecast.SupplyDemandDeltaWeight        = supplyDemandDeltaWeight;
                planForecast.InventSiteId                   = _inventSiteId;
                planForecast.InventLocationID               = _inventLocationId;
                planForecast.wmsReportSetup                 = reportSetup;
                planForecast.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProductInconsistencies</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Logs product inconsistencies for the specified storage load unit.
    /// </summary>
    /// <param name="_itemId">
    ///     A <c>itemId</c> value.
    /// </param>
    /// <param name="_storageLoadUnitRecId">
    ///     A reference to the storage load unit.
    /// </param>
    /// <param name="_itemPalletQuantity">
    ///     A standard item quantity per pallet.
    /// </param>
    /// <param name="_itemGrossVolume">
    ///     A specified item gross volume.
    /// </param>
    /// <param name="_itemGrossWeight">
    ///     A specified item gross weight.
    /// </param>
    protected void logProductInconsistencies(
        ItemId          _itemId,
        RecId           _storageLoadUnitRecId,
        InventQty       _itemPalletQuantity,
        Volume          _itemGrossVolume,
        ItemGrossWeight _itemGrossWeight)
    {
        if (!_itemPalletQuantity)
        {
            inconsistencyLogger.logStorageLoadUnitInconsistency(_itemId, _storageLoadUnitRecId, WMSSpaceUtilInconsistencyType::Pallet);
        }

        if (!_itemGrossVolume)
        {
            inconsistencyLogger.logStorageLoadUnitInconsistency(_itemId, _storageLoadUnitRecId, WMSSpaceUtilInconsistencyType::Volume);
        }

        if (!_itemGrossWeight)
        {
            inconsistencyLogger.logStorageLoadUnitInconsistency(_itemId, _storageLoadUnitRecId, WMSSpaceUtilInconsistencyType::Weight);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInconsistencyLogger</Name>
				<Source><![CDATA[
    public WMSSpaceUtilInconsistencyLogger parmInconsistencyLogger(WMSSpaceUtilInconsistencyLogger _inconsistencyLogger = inconsistencyLogger)
    {
        inconsistencyLogger = _inconsistencyLogger;

        return inconsistencyLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSetupOptions</Name>
				<Source><![CDATA[
    public WMSSpaceUtilSetupOptions parmSetupOptions(WMSSpaceUtilSetupOptions _setupOptions = setupOptions)
    {
        setupOptions = _setupOptions;

        return setupOptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes forecast records.
    /// </summary>
    /// <param name="query">
    /// A <c>Query</c> object, which contains forecast records.
    /// </param>
    public void processForecast(Query query)
    {
        QueryRun        queryRun;
        ReqTrans        reqTrans;
        InventDim       inventDim;
        InventDim       inventDimOrigin;
        RefRecId        planVersion;

        numberOfsupplyDemandTypes   = conLen(this.defineSupplyDemandTypes());

        queryRun    = new QueryRun(query);

        planVersion = this.getCurrentReqPlan();

        while (queryRun.next())
        {
            reqTrans        = queryRun.get(tableNum(ReqTrans));
            inventDimOrigin = queryRun.get(tableNum(InventDim));

            inventDim = this.checkFallBackWarehouse(inventDimOrigin);

            if (inventDim.InventLocationId)
            {
                if (setupOptions.parmStorageLoadUnitType() == WMSSpaceUtilStorageLoadUnitType::Warehouse)
                {
                    this.createForecast(reqTrans.ItemId, inventDim, '', inventDimOrigin, planVersion);
                }
            }
            else
            {
                inconsistencyLogger.logProductFallBackInconsistency(reqTrans.ItemId, inventDim.InventSiteId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>storePlannedForecastMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores mapping between item coverage dimensions and storage load unit.
    /// </summary>
    /// <param name="_itemId">
    /// A <c>itemId</c> value.
    /// </param>
    /// <param name="_inventDim">
    /// An instance of the <c>InventDim</c> table.
    /// </param>
    /// <param name="_storageLoadUnitRecId">
    /// A reference to the storage load unit.
    /// </param>
    /// <param name="_planId">
    /// A reference to the master plan version.
    /// </param>
    protected void storePlannedForecastMapping(ItemId _itemId, InventDim _inventDim, RecId _storageLoadUnitRecId, RefRecId _planId)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(WMSStorageLoadUnitReqTrans));
        qbds.firstOnly(true);
        qbds.addSelectionField(fieldNum(WMSStorageLoadUnitReqTrans, RecId));
        qbds.addRange(fieldNum(WMSStorageLoadUnitReqTrans, ItemId)).value(queryValue(_itemId));
        qbds.addRange(fieldNum(WMSStorageLoadUnitReqTrans, PlanVersion)).value(queryValue(_planId));
        qbds.addRange(fieldNum(WMSStorageLoadUnitReqTrans, WmsStorageLoadUnit)).value(queryValue(_storageLoadUnitRecId));
        qbds.addRange(fieldNum(WMSStorageLoadUnitReqTrans, InventSiteId)).value(queryValue(_inventDim.InventSiteId));
        qbds.addRange(fieldNum(WMSStorageLoadUnitReqTrans, InventLocationId)).value(queryValue(_inventDim.InventLocationId));

        Enumerator enum = InventDim::dimProductDimFieldList().getEnumerator();
        while (enum.moveNext())
        {
            FieldId inventDimFieldId = enum.current();
            FieldId mappedFieldId = InventDimFieldsMap::mappedFieldId(inventDimFieldId, tableStr(WMSStorageLoadUnitReqTrans));

            if (mappedFieldId)
            {
                qbds.addRange(mappedFieldId).value(queryValue(_inventDim.(inventDimFieldId)));
            }
        }

        ttsbegin;

        QueryRun queryRun = new QueryRun(query);

        if (!queryRun.next())
        {
            WMSStorageLoadUnitReqTrans storageLoadUnitReqTrans;
            storageLoadUnitReqTrans.ItemId              = _itemId;
            storageLoadUnitReqTrans.InventSiteId        = _inventDim.InventSiteId;
            storageLoadUnitReqTrans.InventLocationID    = _inventDim.InventLocationId;
            storageLoadUnitReqTrans.InventDimFieldsMap::initProductDimensionsFrom(_inventDim);
            storageLoadUnitReqTrans.PlanVersion         = _planId;
            storageLoadUnitReqTrans.wmsStorageLoadUnit  = _storageLoadUnitRecId;

            storageLoadUnitReqTrans.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePlanForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates load forecast based on the input from the <c>ReqSupplyDemandScheduleModel</c> class.
    /// </summary>
    /// <param name="_reportServiceItemProvider">
    /// An instance of the <c>WMSReportServiceItemProvider</c> class.
    /// </param>
    /// <param name="_inventSiteId">
    /// A <c>InventSiteId</c> value.
    /// </param>
    /// <param name="_inventLocationId">
    /// A <c>InventLocationId</c> value.
    /// </param>
    /// <param name="_wmsStoreZoneId">
    /// A <c>WMSStoreZoneId</c> value.
    /// </param>
    /// <param name="_reqSupplyDemandScheduleModel">
    /// An instance of the <c>ReqSupplyDemandScheduleModel</c> class.
    /// </param>
    protected abstract void updatePlanForecast(
        WMSReportServiceItemProvider    _reportServiceItemProvider,
        InventSiteId                    _inventSiteId,
        InventLocationId                _inventLocationId,
        WMSStoreZoneId                  _wmsStoreZoneId,
        ReqSupplyDemandScheduleModel    _reqSupplyDemandScheduleModel)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>