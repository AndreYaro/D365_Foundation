<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveStepMethodDataCleanup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveStepMethodDataCleanup</c> class, is the base class used to define the wave data cleanup
/// logic for the different wave steps.
/// </summary>
internal abstract class WHSWaveStepMethodDataCleanup
{
    private WHSWaveId waveId;
    private WHSWaveExecutionID waveExecutionId;
    private WHSInstrumentationWaveProcessingDataCleanupPerformanceTask perfTask;
    private boolean isInitialWaveCleanUp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmWaveId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWaveId parmWaveId(WHSWaveId _waveId = waveId)
    {
        waveId = _waveId;
        return waveId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveExecutionId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWaveExecutionID parmWaveExecutionId(WHSWaveExecutionID _waveExecutionId = waveExecutionId)
    {
        waveExecutionId = _waveExecutionId;
        return waveExecutionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsInitialWaveCleanUp</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmIsInitialWaveCleanUp(boolean _isInitialWaveCleanUp = isInitialWaveCleanUp)
    {
        isInitialWaveCleanUp = _isInitialWaveCleanUp;
        return isInitialWaveCleanUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPerfTask</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInstrumentationWaveProcessingDataCleanupPerformanceTask parmPerfTask(WHSInstrumentationWaveProcessingDataCleanupPerformanceTask _perfTask = perfTask)
    {
        perfTask = _perfTask;
        return perfTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void initFromParameters(WHSWaveId _waveId, WHSWaveExecutionID _waveExecutionId, WHSInstrumentationWaveProcessingDataCleanupPerformanceTask _perfTask)
    {
        if (_waveId == '' || _perfTask == null)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        this.parmWaveId(_waveId);
        this.parmWaveExecutionId(_waveExecutionId);
        this.parmPerfTask(_perfTask);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupWaveStepTrackingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all the wave tracking data related to the wave step method.
    /// </summary>
    abstract internal void cleanupWaveStepTrackingData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupWaveStepCommittedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all committed data related to the wave step method.
    /// </summary>
    abstract internal void cleanupWaveStepCommittedData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupSuccessfulRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up the wave step data in case of an errored wave.
    /// </summary>
    [Hookable(false)]
    internal void cleanupSuccessfulRun()
    {
        this.checkTtsLevelIsNotZeroForMethod(funcName());

        this.cleanupWaveStepTrackingData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupErroredRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up the wave step data in case of an errored wave.
    /// </summary>
    [Hookable(false)]
    internal void cleanupErroredRun()
    {
        this.checkTtsLevelIsNotZeroForMethod(funcName());

        this.cleanupWaveStepCommittedData();
        this.cleanupWaveStepTrackingData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTtsLevelIsNotZeroForMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the tts level is not 0 and if it is throws an error.
    /// </summary>
    /// <param name = "_methodName">The name of the method whose tts level is checked.</param>
    private void checkTtsLevelIsNotZeroForMethod(str _methodName)
    {
        // we want to ensure we are the outermost tts so we can deal with errors correctly
        if (appl.ttsLevel() == 0)
        {
            throw Error(Error::wrongUseOfFunction(_methodName));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>