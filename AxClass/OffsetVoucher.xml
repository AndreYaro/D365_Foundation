<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OffsetVoucher</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>OffsetVoucher</c> abstract class is used in settlement.
/// </summary>
abstract class OffsetVoucher
{
    CustVendTrans   custVendTrans;
    SettlementType  settleVoucher;

    Counter         position;

    recId           transactionId[,20];
    recId           transRecId[,20];
    AmountCur       transAmountCur[,20];

    recId           lastTransactionId;
    recId           lastTransRecId;
    AmountCur       lastTransAmountCur;

    Amount          paymentAmount;

    NoYes           settled;

    Common          specCommon;
    TableId         specificationTableId;
    RecId           specificationRecId;

    #ISOCountryRegionCodes
    TransDate            parmDateFrom, parmDateTo;
    boolean              parmUseDatePrinciple;
    SettleDatePrinc      datePrinciple;
    TransDate            datePrincipleSaveDate;
    DimSettlementType_RU dimSettlementType;

    private ModuleCustVend moduleCustVend;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIfCanBeSettled_RU</Name>
				<Source><![CDATA[
    abstract protected boolean checkIfCanBeSettled_RU(CustVendTrans _custVendTransDebet,
                                                      CustVendTrans _custVendTransCredit)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>markTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks the specified open transaction for settlement.
    /// </summary>
    /// <param name="_custVendTransCredit">
    ///    The <c>CustVendTrans</c> map holding customer credit transaction.
    /// </param>
    /// <param name="_custVendTransDebit">
    ///    The <c>CustVendTrans</c> map holding customer debit transaction.
    /// </param>
    /// <param name="_custVendTransOpenCredit">
    ///    The <c>CustVendTransOpen</c> map holding customer credit open transaction.
    /// </param>
    /// <param name="_custVendTransOpen">
    ///    The <c>CustVendTransOpen</c> map holding customer open transaction.
    /// </param>
    /// <returns>
    ///    The remaining payment amount.
    /// </returns>
    /// <remarks>
    ///    It returns the remaining payment amount which is used in the calling function to stop the marking
    ///    process
    /// </remarks>
    protected AmountCur markTransaction(
        CustVendTrans _custVendTransCredit,
        CustVendTrans _custVendTransDebit,
        CustVendTransOpen _custVendTransOpenCredit,
        CustVendTransOpen _custVendTransOpen)
    {
        AmountCur debitDocumentAmountAvailable;

        if (_custVendTransCredit.CurrencyCode != _custVendTransDebit.CurrencyCode)
        {
            return 0.00;
        }

        if (this.isValid([_custVendTransOpen.TableId, _custVendTransOpen.RecId, _custVendTransOpen.company()]))
        {
            ttsbegin;

            if (this.checkIfCanBeSettled(_custVendTransCredit, _custVendTransDebit))
            {
                CustVendAutoSettleMarkerParameters parameters = CustVendAutoSettleMarkerParameters::construct(
                    _custVendTransDebit,
                    _custVendTransOpen,
                    paymentAmount);

                CustVendAutoSettleMarker marker = CustVendAutoSettleMarker::construct(
                    _custVendTransCredit,
                    _custVendTransOpenCredit,
                    specCommon,
                    this.maxMSTDiff());

                debitDocumentAmountAvailable = marker.markTransaction(parameters);
            }

            ttscommit;
        }

        return debitDocumentAmountAvailable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValid</Name>
				<Source><![CDATA[
    private boolean isValid(container _queryParm)
    {
        if (CustVendOffsetVoucherMarkValidationCacheFlight::instance().isEnabled())
        {
            return CustVendOffsetVoucherValidationCache::retrieveValidationInfo(_queryParm);
        }
        else
        {
            return CustVendOffsetVoucherValidationCache::retrieveValidationInfoFromDB(_queryParm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfCanBeSettled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the open transaction can be settled.
    /// </summary>
    /// <param name="_custVendTransCredit">
    ///    The <c>CustVendTrans</c> map holding customer credit transaction.
    /// </param>
    /// <param name="_custVendTransDebit">
    ///    The <c>CustVendTrans</c> map holding customer debit transaction.
    /// </param>
    /// <returns>
    ///    true if open transaction can be settled; otherwise, false.
    /// </returns>
    public boolean checkIfCanBeSettled(CustVendTrans _custVendTransCredit, CustVendTrans _custVendTransDebit)
    {
        boolean returnValue = ((_custVendTransCredit.AmountMST > 0 && _custVendTransDebit.AmountMST  < 0) ||
                               (_custVendTransCredit.AmountMST < 0 && _custVendTransDebit.AmountMST  > 0))
                              // <GEERU>
                              && this.checkIfCanBeSettled_RU(_custVendTransDebit, _custVendTransCredit);
                              // </GEERU>

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxMSTDiff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the accounting currency difference.
    /// </summary>
    /// <returns>The accounting currency difference.</returns>
    abstract protected AmountCur maxMSTDiff()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayBeAutoSettled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the transaction can automatically be settled.
    /// </summary>
    /// <param name = "settlementType">The settlement type of the transaction. Optional.</param>
    /// <returns>true if the transaction can be automatically settled; otherwise, false.</returns>
    abstract protected boolean mayBeAutoSettled(SettlementType settlementType = SettlementType::None)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrAutoSettle</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a boolean value indicating if the record should be auto settled.
    /// </summary>
    /// <returns>
    ///     true if the record should be auto settled; otherwise, false.
    /// </returns>
    boolean  mcrAutoSettle()
    {
        MCRCustPaymTable mcrCustPaymTable;

        Select firstonly RecId from mcrCustPaymTable
            where mcrCustPaymTable.RefRecId == specCommon.RecId
                && mcrCustPaymTable.RefTableId ==  specCommon.TableId
                && mcrCustPaymTable.IsPrepay == Noyes::Yes;

        if (mcrCustPaymTable)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        SettlementType  _settleVoucher,
        Common          _common)
    {
        settleVoucher           = _settleVoucher;
        specCommon              = _common;
        // <GEERU>
        parmDateFrom            = dateNull();
        parmDateTo              = dateMax() - 1;
        parmUseDatePrinciple    = true;
        datePrinciple           = SettleDatePrinc::DateOfPayment;
        datePrincipleSaveDate   = dateNull();
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateFrom_RU</Name>
				<Source><![CDATA[
    final public void parmDateFrom_RU(TransDate _transDate)
    {
        if (_transDate)
        {
            parmDateFrom = _transDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTo_RU</Name>
				<Source><![CDATA[
    final public void parmDateTo_RU(TransDate _transDate)
    {
        if (_transDate)
        {
            parmDateTo = _transDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimSettlementType_RU</Name>
				<Source><![CDATA[
    final public DimSettlementType_RU parmDimSettlementType_RU(DimSettlementType_RU _dimSettlementType = dimSettlementType)
    {
        dimSettlementType = _dimSettlementType;

        return dimSettlementType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseDatePrinciple_RU</Name>
				<Source><![CDATA[
    final public boolean parmUseDatePrinciple_RU(boolean _parmUseDatePrinciple = parmUseDatePrinciple)
    {
        parmUseDatePrinciple = _parmUseDatePrinciple;
        return parmUseDatePrinciple;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatePrinciple_RU</Name>
				<Source><![CDATA[
    final public void setDatePrinciple_RU(SettleDatePrinc _datePrinciple,
                                          TransDate       _datePrincipleSaveDate)
    {
        datePrinciple         = _datePrinciple;
        datePrincipleSaveDate = _datePrincipleSaveDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the customer or vendor settlement.
    /// </summary>
    /// <param name = "_custVendTrans">A <c>CustVendTrans</c> record to update.</param>
    /// <param name = "_settlementType">The settlement type.</param>
    public void updateNow(
        CustVendTrans _custVendTrans,
        SettlementType _settlementType)
    {
        CustVendTrans settleTrans = _custVendTrans;
        CustVendTransOpen settleTransOpen = _custVendTrans.transOpen();

        // Required by child implementations
        custVendTrans = _custVendTrans;

        if (!SpecTrans::existOtherRefRecords(specCommon.company(), specCommon.TableId, specCommon.RecId, settleTransOpen.company(), settleTransOpen.TableId, settleTransOpen.RecId)
            && settleTrans.Prepayment == NoYes::No
            && settleTrans.Approved   == NoYes::Yes
            && settleTrans.Settlement == NoYes::Yes)
        {
            if (this.mayBeAutoSettled(_settlementType))
            {
                boolean isRestricted;

                boolean areBillingClassificationsEnabled = settleTrans.TableId == tableNum(CustTrans)
                    && isConfigurationKeyEnabled(configurationKeyNum(PublicSector))
                    && CustParameters::find().CustUseBillingClassification_PSN == NoYes::Yes;

                if (areBillingClassificationsEnabled && settleTrans.CustBillingClassification)
                {
                    CustBillingClassification custBillingClassification = CustBillingClassification::find(settleTrans.CustBillingClassification);

                    if (custBillingClassification.RestrictCreditNote == NoYes::Yes && settleTrans.AmountCur < 0)
                    {
                        isRestricted = true;
                    }
                }

                CustVendTrans_W custVendTrans_W = settleTrans.CustVendTrans::getCustVendTrans_W();
                BankCurrencyTransferId_RU bankCurrencyTransferId_RU;

                if (custVendTrans_W.TableId == tableNum(VendTrans_W))
                {
                    bankCurrencyTransferId_RU = custVendTrans_W.BankCurrencyTransferId_RU;
                }

                // Parameters are used here only to initialize these buffers to the correct mappings.
                CustVendTrans availableTrans = _custVendTrans.data();
                CustVendTransOpen availableTransOpen = _custVendTrans.transOpen();

                boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
                paymentAmount = 0;

                SysInstrumentationProgressLogger progressLogger = this.createProgressLogger();

                using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::AutosettlementMarkTransactions))
                {
                    CustVendTable custVendTable = CustVendTable::findModule(moduleCustVend, settleTrans.AccountNum);

                    activityContext.addCustomProperty(CustVendInstrumentationConstants::CustomPropertyAutoSettlementContext, int642Str(custVendTable.RecId));

                    if (CustVendAutoSettleImprovePerfFlight::instance().isEnabled())
                    {
                        while select forupdate availableTransOpen
                            order by DueDate
                            where availableTransOpen.AccountNum == settleTrans.AccountNum
                            join availableTrans
                            where availableTrans.RecId == availableTransOpen.RefRecId
                                && availableTrans.AccountNum == settleTrans.AccountNum
                                && availableTrans.RecId != settleTrans.RecId
                                && availableTransOpen.DueDate >= parmDateFrom
                                && availableTransOpen.DueDate <= parmDateTo
                                && availableTrans.Approved == NoYes::Yes
                                && availableTrans.Settlement == NoYes::Yes
                                && availableTrans.BankLCLine == 0
                                && (availableTrans.Prepayment == NoYes::No || countryRegion_RU)
                                && (availableTrans.TableId == tablenum(CustTrans) || !bankCurrencyTransferId_RU)
                                && ((settleTrans.AmountCur > 0 && availableTrans.AmountCur < 0) 
                                    || (settleTrans.AmountCur < 0 && availableTrans.AmountCur > 0))
                        {
                            if (!this.skipMarkTransaction(settleTrans, availableTrans, areBillingClassificationsEnabled, isRestricted))
                            {
                                if (countryRegion_RU)
                                {
                                    parmUseDatePrinciple = false;
                                }

                                // Payment amount records the total available document amount that was marked by previous iterations.
                                // The actual amount marked may be lower due to cash discounts or partial payments.
                                paymentAmount += this.markTransaction(settleTrans, availableTrans, settleTransOpen, availableTransOpen);

                                // If the total document amount exceeds the possible credit amount, stop processing.
                                if (abs(settleTransOpen.AmountCur) <= abs(paymentAmount))
                                {
                                    // if payment amount is exhausted, exit loop
                                    break;
                                }
                            }
                        }
                    }
                    else
                    {
                        while select forupdate availableTransOpen
                            order by DueDate
                            where availableTransOpen.AccountNum == settleTrans.AccountNum
                            join availableTrans
                            where availableTrans.RecId == availableTransOpen.RefRecId
                                && availableTrans.RecId != settleTrans.RecId
                                && availableTransOpen.DueDate >= parmDateFrom
                                && availableTransOpen.DueDate <= parmDateTo
                                && availableTrans.Approved == NoYes::Yes
                                && availableTrans.Settlement == NoYes::Yes
                                && availableTrans.BankLCLine == 0
                                && (availableTrans.Prepayment == NoYes::No || countryRegion_RU)
                                && (availableTrans.TableId == tablenum(CustTrans) || !bankCurrencyTransferId_RU)
                        {
                            if (!this.skipMarkTransaction(settleTrans, availableTrans, areBillingClassificationsEnabled, isRestricted))
                            {
                                if (countryRegion_RU)
                                {
                                    parmUseDatePrinciple = false;
                                }

                                // Payment amount records the total available document amount that was marked by previous iterations.
                                // The actual amount marked may be lower due to cash discounts or partial payments.
                                paymentAmount += this.markTransaction(settleTrans, availableTrans, settleTransOpen, availableTransOpen);

                                // If the total document amount exceeds the possible credit amount, stop processing.
                                if (abs(settleTransOpen.AmountCur) <= abs(paymentAmount))
                                {
                                    // if payment amount is exhausted, exit loop
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipMarkTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if marking is needed or not for the specified open transactions.
    /// </summary>
    /// <param name="_custVendTransCredit">
    ///    The <c>CustVendTrans</c> map holding customer credit transaction.
    /// </param>
    /// <param name="_custVendTransDebit">
    ///    The <c>CustVendTrans</c> map holding customer debit transaction.
    /// </param>
    /// <param name="_areBillingClassificationsEnabled">
    ///    True if the Billing Classifications feature is enabled
    /// </param>
    /// <param name="_isRestricted">
    ///    True if credit transaction restrict settlement of credit notes
    /// </param>
    /// <returns>
    ///    True if marking needs to be skipped; otherwise, false.
    /// </returns>
    protected boolean skipMarkTransaction(CustVendTrans _custVendTransCredit, CustVendTrans _custVendTransDebit, boolean _areBillingClassificationsEnabled, boolean _isRestricted)
    {
        if (_areBillingClassificationsEnabled && _custVendTransDebit.CustBillingClassification)
        {
            CustBillingClassification custBillingClassificationDebit = CustBillingClassification::find(_custVendTransDebit.CustBillingClassification);

            if ((_isRestricted || (_custVendTransDebit.AmountCur < 0 && custBillingClassificationDebit.RestrictCreditNote == NoYes::Yes))
                                && _custVendTransCredit.CustBillingClassification != _custVendTransDebit.CustBillingClassification)
            {
                return true;
            }
        }

        if (_custVendTransCredit.CurrencyCode != _custVendTransDebit.CurrencyCode) // if debit currency != credit Currency
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProgressLogger</Name>
				<Source><![CDATA[
    internal SysInstrumentationProgressLogger createProgressLogger()
    {
        str sourceName = CustVendInstrumentationFormatter::sourceNameWithModule(CustVendInstrumentationConstants::SourceNameAutosettlement, moduleCustVend);

        return SysInstrumentationProgressLogger::createLogger(SourceName, CustVendInstrumentationConstants::InstrumentationNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static OffsetVoucher construct(
        SysModule       _sysModule,
        SettlementType  _settlementType,
        Common          _common)
    {
        OffsetVoucher   offsetVoucher;

        switch (_sysModule)
        {
            case SysModule::Cust :
                offsetVoucher = new OffsetVoucherCust(_settlementType, _common);
                offsetVoucher.moduleCustVend = ModuleCustVend::Cust;
                break;

            case SysModule::Vend :
                offsetVoucher = new OffsetVoucherVend(_settlementType, _common);
                offsetVoucher.moduleCustVend = ModuleCustVend::Vend;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return offsetVoucher;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>