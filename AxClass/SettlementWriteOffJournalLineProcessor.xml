<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementWriteOffJournalLineProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
/// The <c>SettlementWriteOffJournalLineProcessor</c> creates payment journal lines for use in settlement write off.
/// </summary>
[ExportInterfaceAttribute()]
internal abstract class SettlementWriteOffJournalLineProcessor
{
    SettlementWriteOffDefaults defaults;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a journal line for write off adjustment.
    /// </summary>
    /// <param name = "_journalContract">The write off journal contract.</param>
    /// <param name = "_journalNum">The journal number for the new journal line.</param>
    /// <param name = "_legalEntity">The legal entity for the journal line customer or vendor account.</param>
    /// <returns>The created journal line.</returns>
    internal LedgerJournalTrans createJournalLine(
        SettlementWriteOffJournalContract _journalContract,
        LedgerJournalId _journalNum,
        DataAreaId _legalEntity)
    {
        LedgerJournalTrans ledgerJournalTrans = this.defaultJournalLine(_journalContract, _journalNum, _legalEntity);

        if (_journalContract.isContractForJournal())
        {
            this.populateJournalLineFromPaymentLine(ledgerJournalTrans, _journalContract.parmOriginLedgerJournalTrans());
        }
        else if (_journalContract.isContractForAccount())
        {
            this.populateJournalLineFromAccount(ledgerJournalTrans, _journalContract.parmOriginCustVendAccount(), _journalNum);
        }

        if (ledgerJournalTrans.validateWrite())
        {
            ledgerJournalTrans.insert();
        }

        return LedgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferLineForPaymentJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a journal line for transfer between write off and a customer or vendor account from a payment journal.
    /// </summary>
    /// <param name = "_journalContract">The write off journal contract.</param>
    /// <param name = "_journalNum">The journal number for the new journal line.</param>
    /// <param name = "_totalWriteOffAdjustmentAmount">The total write off adjustment amount.</param>
    /// <param name = "_legalEntity">The legal entity for the journal line customer or vendor account.</param>
    /// <returns>The created journal line.</returns>
    internal LedgerJournalTrans createTransferLineForPaymentJournal(
        SettlementWriteOffJournalContract _journalContract,
        LedgerJournalId _journalNum,
        AmountCur _totalWriteOffAdjustmentAmount,
        DataAreaId _legalEntity)
    {
        LedgerJournalTrans originLedgerJournalTrans = LedgerJournalTrans::findRecId(_journalContract.parmOriginLedgerJournalTrans(), false);

        LedgerJournalTrans createLedgerJournalTrans = this.defaultJournalLine(_journalContract, _journalNum, _legalEntity);
        this.setVoucherForNewJournalLine(originLedgerJournalTrans, createLedgerJournalTrans);
        createLedgerJournalTrans.SettleVoucher = SettlementType::None; // There are no marked transactions associated with the write off transfer line.
        createLedgerJournalTrans.Payment = originLedgerJournalTrans.Payment;
        createLedgerJournalTrans.PostingProfile = originLedgerJournalTrans.PostingProfile;
        createLedgerJournalTrans.amountCur2DebCred(_totalWriteOffAdjustmentAmount);
        createLedgerJournalTrans.LedgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(_journalContract.parmTransferAccount(), defaults.getLedgerJournalACType());
        createLedgerJournalTrans.defaultRow();

        if (createLedgerJournalTrans.validateWrite())
        {
            createLedgerJournalTrans.insert();
        }

        return createLedgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferLineForAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a journal line for transfer between write off and a customer or vendor account from an account.
    /// </summary>
    /// <param name = "_journalContract">The write off journal contract.</param>
    /// <param name = "_journalNum">The journal number for the new journal line.</param>
    /// <param name = "_totalWriteOffAdjustmentAmount">The total write off adjustment amount.</param>
    /// <param name = "_legalEntity">The legal entity for the journal line customer or vendor account.</param>
    /// <returns>The created journal line.</returns>
    internal LedgerJournalTrans createTransferLineForAccount(
        SettlementWriteOffJournalContract _journalContract,
        LedgerJournalId _journalNum,
        AmountCur _totalWriteOffAdjustmentAmount,
        DataAreaId _legalEntity)
    {
        CustVendTable custVendTable = CustVendTable::findModule(defaults.getModuleCustVend(), _journalContract.parmOriginCustVendAccount());

        LedgerJournalTrans createLedgerJournalTrans = this.defaultJournalLine(_journalContract, _journalNum, _legalEntity);
        createLedgerJournalTrans.SettleVoucher = SettlementType::None; // There are no marked transactions associated with the write off transfer line.
        createLedgerJournalTrans.amountCur2DebCred(_totalWriteOffAdjustmentAmount);
        createLedgerJournalTrans.LedgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(_journalContract.parmTransferAccount(), defaults.getLedgerJournalACType());
        createLedgerJournalTrans.Payment = custVendTable.PaymTermId;
        this.defaultPostingProfile(createLedgerJournalTrans);
        createLedgerJournalTrans.defaultRow();

        if (createLedgerJournalTrans.validateWrite())
        {
            createLedgerJournalTrans.insert();
        }

        return createLedgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSettlementWriteOffDefaults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the module-specific defaults for use in calculation.
    /// </summary>
    /// <param name = "_defaults">The module defaults.</param>
    /// <returns>The module defaults.</returns>
    internal SettlementWriteOffDefaults parmSettlementWriteOffDefaults(SettlementWriteOffDefaults _settlementWriteOffDefaults = defaults)
    {
        defaults = _settlementWriteOffDefaults;
        return defaults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPostingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the posting profile for the payment line.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The payment line.</param>
    internal protected abstract void defaultPostingProfile(LedgerJournalTrans _ledgerJournalTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPartyFromLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the party for a given ledger dimension.
    /// </summary>
    /// <param name = "_ledgerDimension">The ledger dimension for the party.</param>
    /// <returns>The party reference.</returns>
    internal protected abstract DirPartyRecId findPartyFromLedgerDimension(DimensionDynamicAccount _ledgerDimension)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTargetAccountFromPartyNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the customer or vendor account associated with a party id in a given legal entity.
    /// </summary>
    /// <param name = "_party">The party reference.</param>
    /// <param name = "_targetLegalEntity">The legal entity context.</param>
    /// <returns>The customer or vendor account.</returns>
    internal protected abstract CustVendAC findTargetAccountFromPartyNumber(DirPartyRecId _party, DataAreaId _targetLegalEntity)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setModuleSpecificFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fields specific to the implementation.
    /// </summary>
    /// <param name = "_journalContract">The write off contract.</param>
    /// <param name = "_ledgerJournalTrans">The journal line to create.</param>
    internal protected abstract void setModuleSpecificFields(SettlementWriteOffJournalContract _journalContract, LedgerJournalTrans _ledgerJournalTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the payment line amount for the implementation.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The payment line to apply amounts against.</param>
    /// <param name = "_writeOffAdjustment">The set of adjustment amounts.</param>
    /// <remarks>
    /// The amount for payment is summarized per legal entity.
    /// </remarks>
    internal protected abstract void setPaymentLineAmount(LedgerJournalTrans _ledgerJournalTrans, SettlementWriteOffAdjustment _writeOffAdjustment)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJournalLineTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the text for a journal line description.
    /// </summary>
    /// <param name = "_reasonTable">The reason table record, if any.</param>
    /// <returns>The text for a journal line description.</returns>
    /// <remarks>This method provides extensibility for customized descriptions on settle remainder journal lines.</remarks>
    internal protected LedgerJournalTransTxt findJournalLineTxt(ReasonTable _reasonTable)
    {
        return strFmt("@CashManagement:SettlementWriteOffJournalTxt", "@CashManagement:SettlementWriteOffSettleRemainder", _reasonTable.Description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultJournalLine</Name>
				<Source><![CDATA[
    private LedgerJournalTrans defaultJournalLine(
        SettlementWriteOffJournalContract _journalContract,
        LedgerJournalId _journalNum,
        DataAreaId _legalEntity)
    {
        ReasonTable reasonTable = ReasonTable::find(_journalContract.parmAdjustmentReasonCode());
        ReasonRefRecID reasonRefRecID = ReasonTableRef::createFromCode(reasonTable.Reason);
        ReasonTableRef::updateComment(reasonTable.Description, reasonRefRecID);

        LedgerJournalEngine ledgerJournalEngine = LedgerJournalEngine::construct(defaults.getJournalType());
        ledgerJournalEngine.ledgerJournalTable(LedgerJournalTable::find(_journalNum, false));

        LedgerJournalTrans ledgerJournalTrans;

        ledgerJournalEngine.preCreate(ledgerJournalTrans);
        ledgerJournalTrans.initValue();
        ledgerJournalEngine.initValue(ledgerJournalTrans);

        ledgerJournalTrans.JournalNum = _journalNum;
        ledgerJournalTrans.AccountType = defaults.getLedgerJournalACType();
        ledgerJournalTrans.Company = _legalEntity;
        ledgerJournalTrans.OffsetCompany = curext();
        ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
        ledgerJournalTrans.TransactionType = LedgerTransType::Payment;
        ledgerJournalTrans.Approver = HcmWorker::userId2Worker(curUserId());
        ledgerJournalTrans.Approved = NoYes::Yes;

        ledgerJournalTrans.ReasonRefRecID = reasonRefRecID;
        ledgerJournalTrans.Txt = this.findJournalLineTxt(reasonTable);

        ledgerJournalTrans.CurrencyCode = _journalContract.parmAdjustmentCurrency();
        ledgerJournalTrans.OffsetLedgerDimension = _journalContract.parmAdjustmentAccount();
        ledgerJournalTrans.TransDate = _journalContract.parmAdjustmentDate();

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateJournalLineFromPaymentLine</Name>
				<Source><![CDATA[
    private void populateJournalLineFromPaymentLine(LedgerJournalTrans _ledgerJournalTrans, RefRecId _originRefRecId)
    {
        LedgerJournalTrans originLedgerJournalTrans = LedgerJournalTrans::findRecId(_originRefRecId, false);

        this.setVoucherForNewJournalLine(originLedgerJournalTrans, _ledgerJournalTrans);

        _ledgerJournalTrans.ExchRate = originLedgerJournalTrans.ExchRate;
        _ledgerJournalTrans.ReportingCurrencyExchRate = originLedgerJournalTrans.ReportingCurrencyExchRate;
        _ledgerJournalTrans.SettleVoucher = SettlementType::SelectedTransact;
        _ledgerJournalTrans.JournalNum = originLedgerJournalTrans.JournalNum;
        _ledgerJournalTrans.LedgerDimension = this.findPaymentLedgerDimension(_ledgerJournalTrans, originLedgerJournalTrans);
        _ledgerJournalTrans.Payment = originLedgerJournalTrans.Payment;
        _ledgerJournalTrans.PostingProfile = originLedgerJournalTrans.PostingProfile;
        _ledgerJournalTrans.defaultRow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateJournalLineFromAccount</Name>
				<Source><![CDATA[
    private void populateJournalLineFromAccount(
        LedgerJournalTrans _ledgerJournalTrans,
        CustVendAC _originAccount,
        LedgerJournalId _journalNum)
    {
        CustVendTable custVendTable = CustVendTable::findModule(defaults.getModuleCustVend(), _originAccount);

        _ledgerJournalTrans.SettleVoucher = SettlementType::SelectedTransact;
        _ledgerJournalTrans.LedgerDimension = this.findAccountLedgerDimension(_ledgerJournalTrans, custVendTable);
        _ledgerJournalTrans.Payment = custVendTable.PaymTermId;

        this.defaultPostingProfile(_ledgerJournalTrans);

        _ledgerJournalTrans.defaultRow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAccountLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the ledger dimension for a given customer or vendor account in the company context of the new journal line.
    /// This may require following the party account to find the appropriate account and ledger dimension.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The new payment journal line.</param>
    /// <param name = "_custVendTable">The customer or vendor account.</param>
    /// <returns>The ledger dimension for the account.</returns>
    private DimensionDynamicAccount findAccountLedgerDimension(LedgerJournalTrans _ledgerJournalTrans, CustVendTable _custVendTable)
    {
        DimensionDynamicAccount account;

        if (_ledgerJournalTrans.Company == _custVendTable.DataAreaId)
        {
            account = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(_custVendTable.AccountNum, defaults.getLedgerJournalACType());
        }
        else
        {
            CustVendAC targetAccountNum = this.findTargetAccountFromPartyNumber(_custVendTable.Party, _ledgerJournalTrans.Company);

            changecompany(_ledgerJournalTrans.Company)
            {
                account = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(targetAccountNum, defaults.getLedgerJournalACType());
            }
        }

        return account;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPaymentLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the ledger dimension for a given customer or vendor account in the company context of the new journal line.
    /// This may require following the party account to find the appropriate account and ledger dimension.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The new payment journal line.</param>
    /// <param name = "_originLedgerJournalTrans">The original payment journal line.</param>
    /// <returns>The ledger dimension for the account.</returns>
    private DimensionDynamicAccount findPaymentLedgerDimension(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans _originLedgerJournalTrans)
    {
        DimensionDynamicAccount account;

        if (_ledgerJournalTrans.Company == _originLedgerJournalTrans.Company)
        {
            account = _originLedgerJournalTrans.LedgerDimension;
        }
        else
        {
            DirPartyRecId dirPartyRecId = this.findPartyFromLedgerDimension(_originLedgerJournalTrans.LedgerDimension);
            CustVendAC targetAccountNum = this.findTargetAccountFromPartyNumber(dirPartyRecId, _ledgerJournalTrans.Company);

            changecompany(_ledgerJournalTrans.Company)
            {
                account = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(targetAccountNum, defaults.getLedgerJournalACType());
            }
        }

        return account;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVoucherForNewJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the voucher for a new payment journal line.
    /// </summary>
    /// <param name = "_originLedgerJournalTrans">The origin payment journal line.</param>
    /// <param name = "_createdLedgerJournalTrans">The newly created payment journal line buffer.</param>
    /// <remarks>
    /// A new voucher is created for each settle remainder journal line regardless of other configurations for journals such as one voucher.
    /// </remarks>
    private void setVoucherForNewJournalLine(LedgerJournalTrans _originLedgerJournalTrans, LedgerJournalTrans _createdLedgerJournalTrans)
    {
        LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(_originLedgerJournalTrans.JournalNum);
        LedgerJournalTableData ledgerJournalTableData  = JournalTableData::newTable(ledgerJournalTable);

        _createdLedgerJournalTrans.Voucher = new JournalVoucherNum(ledgerJournalTableData).getNew(false);
        _createdLedgerJournalTrans.fieldState(fieldNum(LedgerJournalTrans, Voucher), FieldState::Defaulted);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>