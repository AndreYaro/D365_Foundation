<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobSchedulerPlanUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanJobSchedulerPlanUpdate</c> class updates a kanban job in the schedule.
/// </summary>
/// <remarks>
/// The <c>KanbanJobSchedulerPlanUpdate</c> class handles only updates to an existing schedule.The
/// unplanned jobs must be planned using the <c>KanbanJobSchedulerPlan</c> class.This class plans
/// process jobs. Transfer jobs are not planned.
/// </remarks>
public class KanbanJobSchedulerPlanUpdate extends KanbanJobScheduler
{
    KanbanJob   kanbanJobOrig;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustRunScheduler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the scheduler must run for the given kanban job.
    /// </summary>
    /// <returns>
    /// true if the scheduler must run; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustRunScheduler()
    {
        return    kanbanJob.RecId
               && kanbanJobOrig.RecId
               && kanbanJob.Status          == LeanKanbanJobStatus::Planned
               && kanbanJob.QuantityOrdered != kanbanJobOrig.QuantityOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJobOrig</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanJob parmKanbanJobOrig(KanbanJob _kanbanJobOrig = kanbanJobOrig)
    {
        kanbanJobOrig = _kanbanJobOrig;
        return kanbanJobOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runScheduler</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the scheduling action.
    /// </summary>
    protected void runScheduler()
    {
        if (this.mustRunScheduler())
        {
            this.updatePlanKanbanJob();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the schedule date.
    /// </summary>
    /// <returns>
    ///    The schedule date.
    /// </returns>
    protected TransDateTime scheduleDateTime()
    {
        return kanbanJob.ExpectedDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePlanKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the current schedule for a kanban job.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The job cannot be updated.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updatePlanKanbanJob()
    {
        ttsbegin;
        // job is expected to be already planned. Remove planning data.
        KanbanJobSchedule kanbanJobSchedule = KanbanJobSchedule::findJob(kanbanJob.RecId,true);
        boolean mustUpdate = kanbanJobSchedule.RecId != 0;

        if (mustUpdate)
        {
            WrkCtrResourceGroup wrkCtrResourceGroupLocal = this.wrkCtrResourceGroup();

            if (kanbanJobSchedule.WorkCell != wrkCtrResourceGroupLocal.RecId)
            {
                throw error(strFmt("@SYS340886",kanbanJob.kanbanId(),kanbanJob.PlanActivityName));
            }

            if (this.lockWorkCell(wrkCtrResourceGroupLocal.RecId))
            {
                // get current capacity consumption
                KanbanJobCapacitySum kanbanJobCapacitySumCurrent = KanbanJobCapacitySum::findJob(kanbanJob.RecId);

                // get new planned job capacity consumption (do not write yet)
                LeanWorkCellScheduleCapacity leanWorkCellScheduleCapacity = this.leanWorkCellScheduleCapacity();
                KanbanJobCapacitySum kanbanJobCapacitySumUpdate = kanbanJob.setKanbanJobCapacitySum(leanWorkCellScheduleCapacity,false);

                mustUpdate = !kanbanJobCapacitySumCurrent.equal(kanbanJobCapacitySumUpdate);

                if (mustUpdate)
                {
                    // update new capacity consumption
                    KanbanJobScheduleCapacitySum::addKanbanJobCapacitySum(kanbanJobCapacitySumCurrent,kanbanJobSchedule,false);
                    KanbanJobCapacitySum::removeCapacityConsumption(kanbanJob.RecId);
                    kanbanJobCapacitySumUpdate.insert();
                    KanbanJobScheduleCapacitySum::addKanbanJobCapacitySum(kanbanJobCapacitySumUpdate,kanbanJobSchedule,true);

                    if (!kanbanJob.selectForUpdate())
                    {
                        kanbanJob = KanbanJob::find(kanbanJob.RecId,true);
                    }

                    // calculate new expected date/time and update schedule
                    TransDateTime startDateTime = this.startDateTime(leanWorkCellScheduleCapacity,kanbanJobSchedule.previousKanbanJobSchedule());

                    this.setJobScheduleExpectedStartEndDateTime(kanbanJobSchedule,
                                                                kanbanJob,
                                                                startDateTime,
                                                                kanbanJobCapacitySumUpdate.PlannedCapacitySumSeconds,
                                                                leanWorkCellScheduleCapacity.calendarId(),
                                                                leanWorkCellScheduleCapacity.capacityToDateTime());
                    kanbanJobSchedule.update();

                    // update job
                    kanbanJob.ExpectedDateTime = kanbanJobSchedule.ExpectedDateTime;
                    kanbanJob.update();

                    // update later job in same schedule
                    KanbanJobSchedule nextKanbanJobSchedule = kanbanJobSchedule.nextKanbanJobSchedule();
                    if (nextKanbanJobSchedule)
                    {
                        KanbanJobSchedulerMove::newStandard(KanbanJob::find(nextKanbanJobSchedule.Job),
                                                            nextKanbanJobSchedule,
                                                            this.rootKanbanJobScheduler()).run();
                    }

                    // set expected date on next transfer job(s)
                    this.setNextJobExpectedDateTime();
                }

                // unlock
                this.releaseLockWorkCell(wrkCtrResourceGroupLocal.RecId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static KanbanJobScheduler construct()
    {
        return new KanbanJobSchedulerPlanUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanJobSchedulerPlanUpdate</c> class.
    /// </summary>
    /// <param name="_kanbanJob">
    /// A <c>KanbanJob</c> record that is used to initialize the instance.
    /// </param>
    /// <param name="_kanbanJobOrig">
    /// The original <c>KanbanJob</c> record that is used to initialize the instance.
    /// </param>
    /// <param name="_rootKanbanJobScheduler">
    /// A <c>KanbanJobScheduler</c> object that is used use to initialize the instance; optional.
    /// </param>
    /// <param name="_lockOwnerKanbanJobScheduler">
    /// A related <c>KanbanJobScheduler</c> object that is used for locking work cells; optional.
    /// </param>
    /// <returns>
    /// A new <c>KanbanJobSchedulerPlanUpdate</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanJobScheduler newStandard(
        KanbanJob             _kanbanJob,
        KanbanJob             _kanbanJobOrig,
        KanbanJobScheduler    _rootKanbanJobScheduler      = null,
        KanbanJobScheduler    _lockOwnerKanbanJobScheduler = _rootKanbanJobScheduler)
    {
        KanbanJobSchedulerPlanUpdate    kanbanJobSchedulerPlanUpdate = KanbanJobSchedulerPlanUpdate::construct();

        kanbanJobSchedulerPlanUpdate.parmKanbanJob(_kanbanJob);
        kanbanJobSchedulerPlanUpdate.parmKanbanJobOrig(_kanbanJobOrig);
        kanbanJobSchedulerPlanUpdate.parmRootKanbanJobScheduler(_rootKanbanJobScheduler);
        kanbanJobSchedulerPlanUpdate.parmLockOwnerKanbanJobScheduler(_lockOwnerKanbanJobScheduler);

        return kanbanJobSchedulerPlanUpdate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
