<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RHRMStaffListHistoryCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RHRMStaffListHistoryCheck
{
    Map             historyMap;
    Map             emplMap;
    RHRMStaffList   rHRMStaffList;
    EndDate         endDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendHistoryMap</Name>
				<Source><![CDATA[
    private void appendHistoryMap(
        TransDate           _key,
        HRMEmploymentFactor _value,
        RHRMEmplId          _emplId = '')
    {
        if (historyMap.exists(_key))
        {
            historyMap.insert(_key,
                              historyMap.lookup(_key) + _value);
        }
        else
        {
            historyMap.insert(_key, _value);
        }

        if (_emplId)
        {
            if (emplMap.exists(_emplId))
            {
                emplMap.insert(_emplId,
                               emplMap.lookup(_emplId) + _value);
            }
            else
            {
                emplMap.insert(_emplId, _value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteHistory</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void deleteHistory(RHRMOrderTrans _rHRMOrderTrans)
    {
        RPayHistory     rPayHistoryLast;
        RHRMJournalType journalType = RHRMOrderTable::find(_rHRMOrderTrans.OrderTableRecId).JournalType;

        if (journalType == RHRMJournalType::Receive ||
            journalType == RHRMJournalType::Transfer)
        {
            if (_rHRMOrderTrans.StaffListRefRecId == rHRMStaffList.RecId)
            {
                if (historyMap.exists(_rHRMOrderTrans.StartDate))
                {
                    this.appendHistoryMap(
                        _rHRMOrderTrans.StartDate,
                        _rHRMOrderTrans.EmploymentFactor,
                        _rHRMOrderTrans.EmplId);
                }
            }

            if (journalType == RHRMJournalType::Transfer)
            {
                rPayHistoryLast = RPayHistory::findLastSignOnMove(_rHRMOrderTrans.EmplId, _rHRMOrderTrans.StartDate, _rHRMOrderTrans.RecId);

                if (rPayHistoryLast.HRMStaffListRefRecId == rHRMStaffList.RecId)
                {
                    if (historyMap.exists(_rHRMOrderTrans.StartDate))
                    {
                        this.appendHistoryMap(
                            _rHRMOrderTrans.StartDate,
                            - rPayHistoryLast.employmentFactor(),
                            _rHRMOrderTrans.EmplId);
                    }
                }
            }
        }
        else if (journalType == RHRMJournalType::Dismiss &&
                 _rHRMOrderTrans.StartDate != endDate)
        {
            rPayHistoryLast = RPayHistory::findLastSignOnMove(_rHRMOrderTrans.EmplId, _rHRMOrderTrans.StartDate, _rHRMOrderTrans.RecId);

            if (rPayHistoryLast.HRMStaffListRefRecId == rHRMStaffList.RecId)
            {
                if (historyMap.exists(_rHRMOrderTrans.StartDate + 1))
                {
                    this.appendHistoryMap(
                        _rHRMOrderTrans.StartDate + 1,
                        - rPayHistoryLast.employmentFactor(),
                        _rHRMOrderTrans.EmplId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMap</Name>
				<Source><![CDATA[
    private void fillMap(boolean _staffOnly = false)
    {
        this.fillMapFromEmplHistory();

        if (!_staffOnly)
        {
            this.fillMapFromStaffListHistory();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMapFromEmplHistory</Name>
				<Source><![CDATA[
    private void fillMapFromEmplHistory()
    {
        RPayHistory             rPayHistorySelect;

        while select HRMStaffListRefRecId, StartDate, OperationType,
                     Number, LastStaffListRefRecId, OrderTransRecId from rPayHistorySelect
            order StartDate asc, TransTime asc
            where rPayHistorySelect.StartDate              <= endDate                 &&
                  (rPayHistorySelect.LastStaffListRefRecId == rHRMStaffList.RecId     ||
                   rPayHistorySelect.HRMStaffListRefRecId  == rHRMStaffList.RecId)
        {
            if (rPayHistorySelect.HRMStaffListRefRecId == rHRMStaffList.RecId)
            {
                this.appendHistoryMap(
                    rPayHistorySelect.StartDate,
                    - rPayHistorySelect.employmentFactor(),
                    rPayHistorySelect.Number);
            }
            else if (rPayHistorySelect.OperationType == RHRMJournalType::Dismiss &&
                     rPayHistorySelect.StartDate     != endDate)
            {
                this.appendHistoryMap(
                    rPayHistorySelect.StartDate + 1,
                    RPayHistory::findLastSignOnMove(
                        rPayHistorySelect.Number,
                        rPayHistorySelect.StartDate,
                        rPayHistorySelect.OrderTransRecId).employmentFactor(),
                    rPayHistorySelect.Number);
            }

            if (rPayHistorySelect.OperationType   == RHRMJournalType::Transfer &&
                rPayHistorySelect.LastStaffListRefRecId == rHRMStaffList.RecId)
            {
                this.appendHistoryMap(
                    rPayHistorySelect.StartDate,
                    RPayHistory::findLastSignOnMove(
                        rPayHistorySelect.Number,
                        rPayHistorySelect.StartDate,
                        rPayHistorySelect.OrderTransRecId).employmentFactor(),
                    rPayHistorySelect.Number);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMapFromStaffListHistory</Name>
				<Source><![CDATA[
    private void fillMapFromStaffListHistory()
    {
        RHRMStaffListHistory    rhrmStaffListHistorySelect;
        RHRMStaffListFactor     staffListFactor;

        while select StartDate, StaffListFactor from rhrmStaffListHistorySelect
            order by StartDate
            where rhrmStaffListHistorySelect.StaffListRefRecId == rHRMStaffList.RecId &&
                  rhrmStaffListHistorySelect.StartDate <= endDate
        {
            staffListFactor = rhrmStaffListHistorySelect.StaffListFactor - staffListFactor;

            this.appendHistoryMap(
                rhrmStaffListHistorySelect.StartDate,
                staffListFactor);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStaffListEmploy</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RHRMStaffListEmploy getStaffListEmploy()
    {
        RHRMStaffListEmploy  number;
        MapIterator          itMap  = new MapIterator(historyMap);

        while (itMap.more())
        {
            number += itMap.value();

            itMap.next();
        }

        return - number;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStaffListEmploySet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getStaffListEmploySet()
    {
        Set staffListEmploySet = new Set(Types::String);
        MapEnumerator me = emplMap.getEnumerator();

        while (me.moveNext())
        {
            if (me.currentValue() != 0)
            {
                staffListEmploySet.add(me.currentKey());
            }
        }

        return staffListEmploySet.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>historyIsCorrect</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean historyIsCorrect()
    {
        RHRMEmploymentFactor factor;
        MapIterator          itMap  = new MapIterator(historyMap);

        while (itMap.more())
        {
            factor += itMap.value();

            if (factor < 0)
            {
                return false;
            }

            itMap.next();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHistory</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertHistory(RHRMOrderTrans _rHRMOrderTrans)
    {
        RPayHistory     rPayHistoryLast;
        RHRMJournalType journalType = RHRMOrderTable::find(_rHRMOrderTrans.OrderTableRecId).JournalType;

        if (journalType == RHRMJournalType::Receive ||
            journalType == RHRMJournalType::Transfer)
        {
            this.appendHistoryMap(
                _rHRMOrderTrans.StartDate,
                - _rHRMOrderTrans.EmploymentFactor,
                _rHRMOrderTrans.EmplId);

            if (journalType == RHRMJournalType::Transfer)
            {
                rPayHistoryLast = RPayHistory::findLastSignOnMove(_rHRMOrderTrans.EmplId, _rHRMOrderTrans.StartDate, _rHRMOrderTrans.RecId);

                if (rPayHistoryLast.HRMStaffListRefRecId == rHRMStaffList.RecId)
                {
                    this.appendHistoryMap(
                        _rHRMOrderTrans.StartDate,
                        rPayHistoryLast.employmentFactor(),
                        _rHRMOrderTrans.EmplId);
                }
            }
        }
        else if (journalType == RHRMJournalType::Dismiss &&
                 _rHRMOrderTrans.StartDate != endDate)
        {
            rPayHistoryLast = RPayHistory::findLastSignOnMove(_rHRMOrderTrans.EmplId, _rHRMOrderTrans.StartDate, _rHRMOrderTrans.RecId);

            if (rPayHistoryLast.HRMStaffListRefRecId == rHRMStaffList.RecId)
            {
                this.appendHistoryMap(
                    _rHRMOrderTrans.StartDate + 1,
                    rPayHistoryLast.employmentFactor(),
                    _rHRMOrderTrans.EmplId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(
        RHRMStaffListRefRecId   _refRecId,
        StartDate               _endDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        boolean                 _staffOnly = false)
    {
        rhrmStaffList = RHRMStaffList::find(_refRecId);

        if (! rhrmStaffList.RecId)
        {
            throw error(error::missingRecord(funcName()));
        }

        endDate       = _endDate;

        historyMap = new map(Types::Date, Types::REAL);
        emplMap = new map(Types::String, Types::REAL);

        this.fillMap(_staffOnly);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>