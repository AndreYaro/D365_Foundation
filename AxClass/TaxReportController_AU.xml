<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportController_AU</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
///    The <c>TaxReportController_AU</c> class is the controller class for the <c>TaxReport_AU</c> report.
/// </summary>
public class TaxReportController_AU extends SrsReportRunController implements BatchRetryable
{
    #define.ReportName('TaxReport_AU.Report')
    #TaxReportingCodesAU

    TransDate           taxDueDate;

    NoYes               createEBAS;
    Filename            fileNameEBAS;
    str                 fileContentEBAS;

    boolean             manualTotals;

    TextBuffer          textBuffer;

    TaxCalcBASFields    taxCalcBASFields;
    TmpTaxReportById    tmpTaxReportById;
    TaxReportTmp_AU     taxReportTmp_AU;
    Voucher             parmVoucher;
    boolean             isRunReport;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>companyAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the company address.
    /// </summary>
    /// <returns>
    ///    The company address.
    /// </returns>
    public Addressing companyAddress()
    {
        return CompanyInfo::find().postalAddress().Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the company name.
    /// </summary>
    /// <returns>
    /// The company name.
    /// </returns>
    public Name companyName()
    {
        return CompanyInfo::find().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyRegNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the company <c>CoReg</c> number.
    /// </summary>
    /// <returns>
    ///    The company <c>CoReg</c> number.
    /// </returns>
    public CompanyCoRegNum companyRegNum()
    {
        return CompanyInfo::find().CoRegNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the due date.
    /// </summary>
    /// <returns>
    /// The due date.
    /// </returns>
    public date dueDate()
    {
        return taxDueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the logic for the report.
    /// </summary>
    /// <returns>
    /// <c>true</c> if it is successful; otherwise, <c>false</c>.
    /// </returns>
    public boolean fetch()
    {
        boolean ret;

        taxCalcBASFields.calc();
        tmpTaxReportById.setTmpData(taxCalcBASFields.parmTmpTaxReportById());

        select firstonly tmpTaxReportById;

        if (tmpTaxReportById)
        {
            ret = true;
        }
        else
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIDToStr</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the field ID to a string value.
    /// </summary>
    /// <param name="_taxReportField">
    ///    The report field value.
    /// </param>
    /// <returns>
    ///    The equivalent string value.
    /// </returns>
    public static str fieldIDToStr(TaxReportField _taxReportField)
    {
        #TaxReportingCodesAU

        str     fieldId;

        switch (_taxReportField)
        {
            case #field_1C  :
                fieldId = 'f1C';
                break;

            case #field_1D  :
                fieldId = 'f1D';
                break;

            case #field_1E  :
                fieldId = 'f1E';
                break;

            case #field_1F  :
                fieldId = 'f1F';
                break;

            case #field_1G  :
                fieldId = 'f1G';
                break;

            case #field_2A  :
                fieldId = 'f2A';
                break;

            case #field_2B  :
                fieldId = 'f2B';
                break;

            case #field_2A_2B   : //This is field 3 on the report.
                fieldId = 'f3';
                break;

            case #field_4   :
                fieldId = 'f4';
                break;

            case #field_5A  :
                fieldId = 'f5A';
                break;

            case #field_5B  :
                fieldId = 'f5B';
                break;

            case #field_6A  :
                fieldId = 'f6A';
                break;

            case #field_6B  :
                fieldId = 'f6B';
                break;

            case #field_7A  :
                fieldId = 'f7A';
                break;

            case #field_7C  :
                fieldId = 'f7C';
                break;

            case #field_7D  :
                fieldId = 'f7D';
                break;

            case #field_8A   :
                fieldId = 'f8A';
                break;

            case #field_8B  :
                fieldId = 'f8B';
                break;

            case #field_9   :
                fieldId = 'f9';
                break;

            case #field_G1   :
                fieldid = 'fG1';
                break;

            case #field_G2   :
                fieldId = 'fG2';
                break;

            case #field_G3   :
                fieldId = 'fG3';
                break;

            case #field_G4   :
                fieldId = 'fG4';
                break;

            case #field_G5  :
                fieldId = 'fG5';
                break;

            case #field_G6  :
                fieldId = 'fG6';
                break;

            case #field_G7  :
                fieldId = 'fG7';
                break;

            case #field_G8  :
                fieldId = 'fG8';
                break;

            case #field_G9and1A  :
                fieldId = 'fG9';
                break;

            case #field_G10 :
                fieldId = 'fG10';
                break;

            case #field_G11 :
                fieldId = 'fG11';
                break;

            case #field_G12 :
                fieldId = 'fG12';
                break;

            case #field_G13 :
                fieldId = 'fG13';
                break;

            case #field_G14 :
                fieldId = 'fG14';
                break;

            case #field_G15 :
                fieldId = 'fG15';
                break;

            case #field_G16 :
                fieldId = 'fG16';
                break;

            case #field_G17 :
                fieldId = 'fG17';
                break;

            case #field_G18 :
                fieldId = 'fG18';
                break;

            case #field_G19 :
                fieldId = 'fG19';
                break;

            case #field_G20and1B :
                fieldId = 'fG20';
                break;

            case #field_W1  :
                fieldId = 'fW1';
                break;

            case #field_W2  :
                fieldId = 'fW2';
                break;

            case #field_W3  :
                fieldId = 'fW3';
                break;

            case #field_W4  :
                fieldId = 'fW4';
                break;

            case #field_T1  :
                fieldId = 'fT1';
                break;

            case #field_T2  :
                fieldId = 'fT2';
                break;

            case #field_T3  :
                fieldId = 'fT3';
                break;

            case #field_T4  :
                fieldId = 'fT4';
                break;

            case #field_F2  :
                fieldId = 'fF2';
                break;

            case #field_F3  :
                fieldId = 'fF3';
                break;

            case #field_F4  :
                fieldId = 'fF4';
                break;

            default:
                fieldId = '';
                break;
        }

        return fieldID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the from date.
    /// </summary>
    /// <returns>
    /// The from date.
    /// </returns>
    public date fromDate()
    {
        return taxCalcBASFields.parmFromDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class based on the caller.
    /// </summary>
    /// <param name="_args">
    ///    The caller <c>Args</c> object.
    /// </param>
    public void init(Args _args)
    {
        if (_args && _args.dataset() == tableNum(TaxReportVoucher))
        {
            taxCalcBASFields = TaxCalcBASFields::newTaxReportVoucher(_args.record());
        }
        else
        if (_args && _args.dataset() == tableNum(TaxReportExtraFields))
        {
            taxCalcBASFields = TaxCalcBASFields::newTaxReportExtraFields(_args.record());
        }
        else
        if (_args && classIdGet(_args.parmObject()) == classNum(TaxReport_AU))
        {
            taxCalcBASFields = TaxCalcBASFields::newTaxReport_AU(_args.parmObject());
        }

        if (taxCalcBASFields)
        {
            parmVoucher = taxCalcBASFields.parmVoucher();
            taxDueDate = TaxPeriodHead::taxReportDate(taxCalcBASFields.parmTaxPeriod(),taxCalcBASFields.parmFromDate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEBAS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the EBAS.
    /// </summary>
    protected void initEBAS()
    {
        textBuffer  = new TextBuffer();
        textBuffer.regularExpressions(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxReportTmp_AU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the report temporary table.
    /// </summary>
    public void insertTaxReportTmp_AU()
    {
        taxReportTmp_AU.CompanyName = this.companyName();
        taxReportTmp_AU.CompanyAddress = this.companyAddress();
        taxReportTmp_AU.CompanyRegNum = this.companyRegNum();
        taxReportTmp_AU.FromDate = this.fromDate();
        taxReportTmp_AU.ToDate = this.toDate();
        taxReportTmp_AU.DueDate = this.dueDate();

        while select Amount, TaxReportField, TaxInCostPrice from tmpTaxReportById
        {
            switch (tmpTaxReportById.TaxReportField)
            {
                case #field_A1  :
                    taxReportTmp_AU.FieldA1 = tmpTaxReportById.Description;
                    break;

                case #field_G9And1A  :
                    taxReportTmp_AU.FieldG9And1A = tmpTaxReportById.Amount;
                    break;

                case #field_G20And1B  :
                    taxReportTmp_AU.FieldG20And1B = tmpTaxReportById.Amount;
                    break;

                case #field_1C  :
                    taxReportTmp_AU.Field1C = tmpTaxReportById.Amount;
                    break;

                case #field_1D  :
                    taxReportTmp_AU.Field1D = tmpTaxReportById.Amount;
                    break;

                case #field_1E  :
                    taxReportTmp_AU.Field1E = tmpTaxReportById.Amount;
                    break;

                case #field_1F  :
                    taxReportTmp_AU.Field1F = tmpTaxReportById.Amount;
                    break;

                case #field_1G  :
                    taxReportTmp_AU.Field1G = tmpTaxReportById.Amount;
                    break;

                case #field_2A  :
                    taxReportTmp_AU.Field2A = tmpTaxReportById.Amount;
                    break;

                case #field_2B  :
                    taxReportTmp_AU.Field2B = tmpTaxReportById.Amount;
                    break;

                case #field_2A_2B   : //This is field 3 on the report.
                    taxReportTmp_AU.Field2A_2B = tmpTaxReportById.Amount;
                    break;

                case #field_4   :
                   taxReportTmp_AU.Field4 = tmpTaxReportById.Amount;
                    break;

                case #field_5A  :
                    taxReportTmp_AU.Field5A = tmpTaxReportById.Amount;
                    break;

                case #field_5B  :
                    taxReportTmp_AU.Field5B = tmpTaxReportById.Amount;
                    break;

                case #field_6A  :
                    taxReportTmp_AU.Field6A = tmpTaxReportById.Amount;
                    break;

                case #field_6B  :
                   taxReportTmp_AU.Field6B = tmpTaxReportById.Amount;
                    break;

                case #field_7  :
                   taxReportTmp_AU.Field7 = tmpTaxReportById.Amount;
                    break;

                case #field_7A  :
                    taxReportTmp_AU.Field7A = tmpTaxReportById.Amount;
                    break;

                case #field_7C  :
                    taxReportTmp_AU.Field7C = tmpTaxReportById.Amount;
                    break;

                case #field_7D  :
                    taxReportTmp_AU.Field7D = tmpTaxReportById.Amount;
                    break;

                case #field_8A   :
                    taxReportTmp_AU.Field8A = tmpTaxReportById.Amount;
                    break;

                case #field_8B  :
                    taxReportTmp_AU.Field8B = tmpTaxReportById.Amount;
                    break;

                case #field_9   :
                    taxReportTmp_AU.Field9 = tmpTaxReportById.Amount;
                    break;

                case #field_G1   :
                    taxReportTmp_AU.FieldG1 = tmpTaxReportById.Amount;
                    break;

                case #field_G2   :
                    taxReportTmp_AU.FieldG2 = tmpTaxReportById.Amount;
                    break;

                case #field_G3   :
                    taxReportTmp_AU.FieldG3 = tmpTaxReportById.Amount;
                    break;

                case #field_G4   :
                    taxReportTmp_AU.FieldG4 = tmpTaxReportById.Amount;
                    break;

                case #field_G5  :
                    taxReportTmp_AU.FieldG5 = tmpTaxReportById.Amount;
                    break;

                case #field_G6  :
                    taxReportTmp_AU.FieldG6 = tmpTaxReportById.Amount;
                    break;

                case #field_G7  :
                    taxReportTmp_AU.FieldG7 = tmpTaxReportById.Amount;
                    break;

                case #field_G8  :
                    taxReportTmp_AU.FieldG8 = tmpTaxReportById.Amount;
                    break;

                case #field_G10 :
                    taxReportTmp_AU.FieldG10 = tmpTaxReportById.Amount;
                    break;

                case #field_G11 :
                    taxReportTmp_AU.FieldG11 = tmpTaxReportById.Amount;
                    break;

                case #field_G12 :
                    taxReportTmp_AU.FieldG12 = tmpTaxReportById.Amount;
                    break;

                case #field_G13 :
                    taxReportTmp_AU.FieldG13 = tmpTaxReportById.Amount;
                    break;

                case #field_G14 :
                    taxReportTmp_AU.FieldG14 = tmpTaxReportById.Amount;
                    break;

                case #field_G15 :
                    taxReportTmp_AU.FieldG15 = tmpTaxReportById.Amount;
                    break;

                case #field_G16 :
                    taxReportTmp_AU.FieldG16 = tmpTaxReportById.Amount;
                    break;

                case #field_G17 :
                    taxReportTmp_AU.FieldG17 = tmpTaxReportById.Amount;
                    break;

                case #field_G18 :
                    taxReportTmp_AU.FieldG18 = tmpTaxReportById.Amount;
                    break;

                case #field_G19 :
                    taxReportTmp_AU.FieldG19 = tmpTaxReportById.Amount;
                    break;

                case #field_W1  :
                    taxReportTmp_AU.FieldW1 = tmpTaxReportById.Amount;
                    break;

                case #field_W2  :
                    taxReportTmp_AU.FieldW2 = tmpTaxReportById.Amount;
                    break;

                case #field_W3  :
                    taxReportTmp_AU.FieldW3 = tmpTaxReportById.Amount;
                    break;

                case #field_W4  :
                    taxReportTmp_AU.FieldW4 = tmpTaxReportById.Amount;
                    break;

                case #field_T1  :
                    taxReportTmp_AU.FieldT1 = tmpTaxReportById.Amount;
                    break;

                case #field_T2  :
                    taxReportTmp_AU.FieldT2 = tmpTaxReportById.Amount;
                    break;

                case #field_T3  :
                    taxReportTmp_AU.FieldT3 = tmpTaxReportById.Amount;
                    break;

                case #field_T4  :
                    taxReportTmp_AU.FieldT4 = tmpTaxReportById.Description;
                    break;

                case #field_F1  :
                    taxReportTmp_AU.FieldF1 = tmpTaxReportById.Amount;
                    break;

                case #field_F2  :
                    taxReportTmp_AU.FieldF2 = tmpTaxReportById.Amount;
                    break;

                case #field_F3  :
                    taxReportTmp_AU.FieldF3 = tmpTaxReportById.Amount;
                    break;

                case #field_F4  :
                    taxReportTmp_AU.FieldF4 = tmpTaxReportById.Description;
                    break;
            }
        }
        taxReportTmp_AU.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTextBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts text into the buffer for writing to a file.
    /// </summary>
    protected void insertTextBuffer()
    {
        const str ERParms_isManualMode = 'isManualMode';

        ERFileDestinationMemory fileDestination = new ERFileDestinationMemory();
        ERIModelDefinitionParamsAction parameters = new ERModelDefinitionParamsUIActionComposite()
            .add(new ERModelDefinitionDatabaseContext().addTemporaryTable(taxCalcBASFields.parmTmpTaxReportById()))
            .add(new ERModelDefinitionInputParametersAction().addParameter(ERParms_isManualMode, manualTotals));

        // Call ER to generate the extra fields.
        str outputFileName = ERObjectsFactory::createFormatMappingRunByFormatMappingId(TaxParameters::find().BASFormatMapping_AU, fileNameEBAS)
                .withParameter(parameters)
                .withFileDestination(fileDestination)
                .run();

        // Insert the extra fields into the original file.
        if (outputFileName != '')
        {
            System.IO.Stream resultStream = fileDestination.getStream();
            resultStream.Position = 0;

            System.Xml.XmlDocument  doc = new System.Xml.XmlDocument();
            doc.Load(resultStream);

            str newFieldIdListStr = doc.get_DocumentElement().get_InnerXml();
            if (newFieldIdListStr)
            {
                const str FieldIdListEndTag = '</FIELD_LIST>';

                textBuffer.find(FieldIdListEndTag);
                int pos = textBuffer.matchPos();

                if (pos)
                {
                    textBuffer.insert(newFieldIdListStr, pos);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        this.init(this.parmArgs());

        if (parmVoucher)
        {
            this.parmShowDialog(true);
        }
        else
        {
            this.parmShowDialog(false);
        }

        if (this.isInBatch())
        {
            SrsReportDataContract srsContract = this.parmReportContract();
            SRSPrintDestinationSettings printSettings = new SRSPrintDestinationSettings();
            printSettings.fileFormat(SRSReportFileFormat::PDF);
            printSettings.parmFileName(strFmt('BASReport%1.pdf', date2Str(taxDueDate, 123, DateDay::Digits2, DateSeparator::None, DateMonth::Digits2, DateSeparator::None, DateYear::Digits4)));
            srsContract.parmPrintSettings(printSettings);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        TaxReportContract_AU            contract;
        recId                           recId;

        contract = this.parmReportContract().parmRdpContract() as TaxReportContract_AU;

        // For report
        if (this.fetch())
        {
            this.insertTaxReportTmp_AU();
            recId = this.sendTaxReportTmp_AU();
        }

        contract.parmSrsTmpTblMarshallerContract().parmTmpTableDataRecId(recId);

        // For EBAS
        createEBAS = contract.parmCreateEBAS();

        if (createEBAS)
        {
            FileUploadResultBase result = File::GetFileFromUser();

            if (result.getUploadStatus())
            {
                fileNameEBAS = result.getFileName();
                Debug::assert(fileNameEBAS != '');

                System.IO.StreamReader streamReader = new System.IO.StreamReader(result.openResult());
                fileContentEBAS = streamReader.readToEnd();

                this.initEBAS();
                this.readXML();
                this.writeXML();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readXML</Name>
				<Source><![CDATA[
    private void readXML()
    {
        TaxSaxDocumentHandler_AU    saxContentHandler  = new TaxSaxDocumentHandler_AU();

        saxContentHandler.parseFile(fileContentEBAS);
        manualTotals  = saxContentHandler.parmManualTotals();

        if (this.fromDate() != saxContentHandler.parmFromDate() || this.toDate() != saxContentHandler.parmToDate())
        {
            throw error ("@SYS65003");
        }

        if (saxContentHandler.parmDocumentId() != taxCalcBASFields.parmTaxDocumentIdNumber())
        {
            throw error ("@SYS65004");
        }

        textBuffer.setText(fileContentEBAS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendTaxReportTmp_AU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores the temporary table by using the <c>SRSTmpTblMarshaller</c> class.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> value of the data store table where the temporary table is stored.
    /// </returns>
    public recId sendTaxReportTmp_AU()
    {
        SRSReportRunPermission      srsPermission;
        recId                       reportParamRecId;

        srsPermission = new SRSReportRunPermission();
        srsPermission.assert();
        reportParamRecId = SRSTmpTblMarshaller::sendTmpTblToDataProvider(taxReportTmp_AU);
        CodeAccessPermission::revertAssert();

        delete_from taxReportTmp_AU;

        return reportParamRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>ToDate</c> value.
    /// </summary>
    /// <returns>
    ///    The <c>ToDate</c> value.
    /// </returns>
    public date toDate()
    {
        return taxCalcBASFields.parmToDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeXML</Name>
				<Source><![CDATA[
    private void writeXML()
    {
        this.insertTextBuffer();

        // By default, the encoding is utf-8 without BOM
        System.IO.MemoryStream  stream = new System.IO.MemoryStream();
        System.IO.StreamWriter  writer = new System.IO.StreamWriter(stream);

        writer.Write(textBuffer.getText());
        writer.Flush();

        File::SendFileToUser(stream, fileNameEBAS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SrsReportRunController  controller = new TaxReportController_AU();
        controller.parmReportName(#ReportName);
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>