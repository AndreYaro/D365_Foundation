<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResFulfillResourcesDataController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Planned resources availability view data controller.
/// </summary>
public class ResFulfillResourcesDataController extends ResourceAvailabilityDataController implements IAvailabilityViewDataController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCoverageType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get roll-up coverage type by activity resource Id.
    /// </summary>
    /// <param name = "_collectionKey">Activity resource Id as collection key.</param>
    /// <returns>Activity resoruce Id associated roll-up coverage type.</returns>
    protected ResRollUpCoverage getCoverageType(str _collectionKey)
    {
        ResRollUpCoverage localCoverage;
        if (_collectionKey)
        {
            localCoverage = ResRollUpCoverage::Activity;
        }
        return localCoverage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setChartController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the chart controller.
    /// </summary>
    protected void setChartController()
    {
        if (this.getPerfEnhancement())
        {
            super();
        }
        else
        {
            // cached chart availability data controller
            this.chartController(ResCachedResourceAvailabilityChart::construct());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the selected resource to the planned resource.
    /// </summary>
    /// <param name = "_plannedResource">Planned resource activity rec Id.</param>
    /// <returns>TRUE when planned resource assignment succeeds.</returns>
    public boolean assignResource(ActivityResourceRecId _plannedResource)
    {
        boolean result;
        AvailabilityView avControl = this.control();
        List selections = avControl.selections().getCollectionItems();
        ListEnumerator enumerator = selections.getEnumerator();

        if (selections.elements() && _plannedResource)
        {
            if (enumerator.moveNext())
            {
                CollectionItemDataContract selection = enumerator.current();

                container keys = str2con(selection.collectionKey(), collectionKeyDelimiter);
                ResourceRecId resource = str2Int64(conPeek(keys, 2));
                ResAvailabilityViewContext context = avControl.controlContext();
                ActivityRecId assignResourceActivity = context.activity();
                ResIProjTeamController activityTeam = ResProjTeamController::getInstanceFromActivityRecId(assignResourceActivity);

                ResActivityView activityView;
                select ProjectId from activityView where activityView.Activity == assignResourceActivity;

                ttsbegin;
                if (activityTeam.assignV2(_plannedResource, resource, true, this.control().timescale()))
                {
                    ResUtil::addToProjectResourceValidation(resource, activityView.ProjectId);
                    ProjActivityCapacity::updateScheduleStatusByProject(activityView.ProjectId);
                }
                ttscommit;

                result = true;
            }
        }

        if (result)
        {
            this.raiseActionCompletedEvent('assignResource');
            avControl.clearSelections();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize an instance of planned resources data controller.
    /// </summary>
    /// <param name = "_control"><c>AvailabilityView</c> control instance.</param>
    protected void new(AvailabilityView _control)
    {
        if (!this.collectionController())
        {
            this.collectionController(ResFulfillResourcesCollection::construct());
        }

        if (!this.timelineController())
        {
            this.timelineController(ResResourceAvailabilityTimeframe::construct());
        }

        if (!this.chartController())
        {
            this.chartController(ResResourceAvailabilityChart::construct());
        }

        super(_control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contructs a new instance of the planned resources data controller.
    /// </summary>
    /// <param name = "_control"><c>AvailabilityView</c> control instance.</param>
    /// <returns>Returns an instance of the data controller.</returns>
    public static ResFulfillResourcesDataController construct(AvailabilityView _control = null)
    {
        ResFulfillResourcesDataController dataController = new ResFulfillResourcesDataController(_control);
        return dataController;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>