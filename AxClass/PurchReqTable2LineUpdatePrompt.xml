<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqTable2LineUpdatePrompt</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchReqTable2LineUpdatePrompt extends RunBase
{
    DialogRunbase   dialog;
    PurchReqTable   purchReqTable;
    List            purchReqTable2LineUpdateFields;
    Map             fieldList;
    Map             previousAnswers;
    container       packedPreviousAnswers;
    boolean         isRequiredDateBeingUpdated;
    boolean         isInteractive;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        packedPreviousAnswers,
        isInteractive
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>closeCancel</Name>
				<Source><![CDATA[
    void closeCancel()
    {
        FormRun formRun;

        formRun = dialog.formRun();
        formRun.closeCancel();
        formRun.notify();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        #resource
        PurchReqTable2LineField purchReqTable2LineField;
        ListEnumerator          purchReqTable2LineUpdateFieldsEnumerator;
        DialogGroup             dialogGroup;
        DialogField             dialogField;
        int64                       orgArray[];

        orgArray[1] = CompanyInfo::findDataArea(curext()).RecId;

        if (!purchReqTable2LineUpdateFields.elements() || (this.fieldsToPromptFor() == 0))
        {
            return dialog;
        }

        dialog = super();

        // Set dialog size to small and set the text "The following fields have changed" at top of form
        dialog.formBuildDesign().dialogSize(0);
        dialog.addText("@SYS62845");

        purchReqTable2LineUpdateFieldsEnumerator = purchReqTable2LineUpdateFields.getEnumerator();

        fieldList = new Map(Types::Integer, Types::Class);

        dialogGroup = dialog.addGroup('1');
        dialogGroup.columns(this.dialogColumns());
        dialogGroup.frameType(FormFrameType::None);

        while (purchReqTable2LineUpdateFieldsEnumerator.moveNext())
        {
            purchReqTable2LineField = purchReqTable2LineUpdateFieldsEnumerator.current();

            if (purchReqTable2LineField.fieldId() != fieldnum(PurchReqTable, TransDate) || !PurchReqControlRule::findPurchReqControlRuleParameters(orgArray).IsReqDateTransDate)
            {
                dialogField = dialog.addField(enumstr(NoYes),
                                              purchReqTable2LineField.questionLabel(),
                                              purchReqTable2LineField.questionHelp());

                dialogField.value(purchReqTable2LineField.updatePurchReqLines());

                fieldList.insert(purchReqTable2LineField.fieldId(), dialogField);
            }
        }

        dialog.form().design().alwaysOnTop(true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogColumns</Name>
				<Source><![CDATA[
    int dialogColumns()
    {
        return real2int(trunc(power(this.fieldsToPromptFor(), 0.5)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldsToPromptFor</Name>
				<Source><![CDATA[
    Counter fieldsToPromptFor()
    {
        Counter                     fieldsToPromptFor = 0;
        PurchReqTable2LineField     purchReqTable2LineField;
        ListEnumerator              purchReqTable2LineUpdateFieldsEnumerator;

        purchReqTable2LineUpdateFieldsEnumerator = purchReqTable2LineUpdateFields.getEnumerator();

        while (purchReqTable2LineUpdateFieldsEnumerator.moveNext())
        {
            purchReqTable2LineField = purchReqTable2LineUpdateFieldsEnumerator.current();

            fieldsToPromptFor++;
        }

        return fieldsToPromptFor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldsToUpdate</Name>
				<Source><![CDATA[
    boolean fieldsToUpdate()
    {
        boolean                     fieldsToUpdate = false;
        ListEnumerator              purchReqTable2LineUpdateFieldsEnumerator;
        PurchReqTable2LineField     purchReqTable2LineField;

        purchReqTable2LineUpdateFieldsEnumerator = purchReqTable2LineUpdateFields.getEnumerator();

        while (purchReqTable2LineUpdateFieldsEnumerator.moveNext())
        {
            purchReqTable2LineField = purchReqTable2LineUpdateFieldsEnumerator.current();

            if (purchReqTable2LineField.updatePurchReqLines())
            {
                fieldsToUpdate = true;
                break;
            }
        }

        return fieldsToUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ListEnumerator              purchReqTable2LineUpdateFieldsEnumerator;
        PurchReqTable2LineField     purchReqTable2LineField;
        DialogField                 dialogField;
        int64                       orgArray[];

        orgArray[1] = CompanyInfo::findDataArea(curext()).RecId;

        purchReqTable2LineUpdateFieldsEnumerator = purchReqTable2LineUpdateFields.getEnumerator();

        while (purchReqTable2LineUpdateFieldsEnumerator.moveNext())
        {
            purchReqTable2LineField = purchReqTable2LineUpdateFieldsEnumerator.current();

            if (fieldList.exists(purchReqTable2LineField.fieldId()))
            {
                dialogField = fieldList.lookup(purchReqTable2LineField.fieldId());

                purchReqTable2LineField.updatePurchReqLines(dialogField.value());

                if (dialogField.value() == NoYes::Yes && purchReqTable2LineField.fieldId() == fieldnum(PurchReqTable, RequiredDate))
                {
                    isRequiredDateBeingUpdated = true;
                }
            }
        }

        if (isRequiredDateBeingUpdated && PurchReqControlRule::findPurchReqControlRuleParameters(orgArray).IsReqDateTransDate)
        {
            purchReqTable2LineUpdateFieldsEnumerator = purchReqTable2LineUpdateFields.getEnumerator();

            while (purchReqTable2LineUpdateFieldsEnumerator.moveNext())
            {
                purchReqTable2LineField = purchReqTable2LineUpdateFieldsEnumerator.current();

                if (purchReqTable2LineField.fieldId() == fieldnum(PurchReqTable, TransDate))
                {
                    purchReqTable2LineField.updatePurchReqLines(true);
                }
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchReqTable2LineUpdateFields</Name>
				<Source><![CDATA[
    void initPurchReqTable2LineUpdateFields()
    {
        SysDictField                sysDictField;
        SysDictField                sysDictFieldArray;
        PurchReqTable2LineField     purchReqTable2LineField;
        container                   header2LineFieldIds;
        fieldId                     fieldId;
        int                         pos = 1;
        int                         array;
        boolean                     fieldChanged;

        purchReqTable2LineUpdateFields = new List(Types::Class);

        if (!this.lines2Update())
        {
            return;
        }

        header2LineFieldIds = PurchReqTable2LineUpdatePrompt::header2LineFieldIdList();

        while (pos <= conlen(header2LineFieldIds))
        {
            fieldId = conpeek(header2LineFieldIds, pos);

            if (PurchReqTable2LineUpdatePrompt::fieldEnabled(fieldId))
            {
                purchReqTable2LineField = PurchReqTable2LineField::construct(fieldId);

                fieldChanged = false;

                sysDictField = new SysDictField(purchReqTable.TableId, fieldId);

                for (array = 1; array <= sysDictField.arraySize(); array++)
                {
                    sysDictFieldArray = new SysDictField(sysDictField.tableid(), sysDictField.id(), array);
                    if (purchReqTable.(sysDictFieldArray.id()) != purchReqTable.orig().(sysDictFieldArray.id()))
                    {
                        fieldChanged = true;
                    }
                }

                if (fieldChanged)
                {
                    purchReqTable2LineUpdateFields.addEnd(purchReqTable2LineField);
                }
            }

            pos++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lines2Update</Name>
				<Source><![CDATA[
    boolean lines2Update()
    {
        return purchReqTable.existPurchLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        previousAnswers = new Map(Types::Integer, Types::Enum);
        isInteractive = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        this.packPreviousAnswers();

        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedPurchReqTable2LineUpdateFields</Name>
				<Source><![CDATA[
    container packedPurchReqTable2LineUpdateFields()
    {
        return purchReqTable2LineUpdateFields.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packPreviousAnswers</Name>
				<Source><![CDATA[
    private void packPreviousAnswers()
    {
        ListEnumerator              purchReqTable2LineUpdateFieldsEnumerator;
        PurchReqTable2LineField     purchReqTable2LineField;

        purchReqTable2LineUpdateFieldsEnumerator = purchReqTable2LineUpdateFields.getEnumerator();

        while (purchReqTable2LineUpdateFieldsEnumerator.moveNext())
        {
            purchReqTable2LineField = purchReqTable2LineUpdateFieldsEnumerator.current();

            if (previousAnswers.exists(purchReqTable2LineField.fieldId()))
            {
                previousAnswers.remove(purchReqTable2LineField.fieldId());
            }
            previousAnswers.insert(purchReqTable2LineField.fieldId(), purchReqTable2LineField.updatePurchReqLines());
        }

        packedPreviousAnswers = previousAnswers.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsInteractive</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Get / set whether to run interactively or not.
    /// </summary>
    /// <param name="_isInteractive">
    /// When provided, set the interactive state.
    /// </param>
    /// <returns>
    /// <c>True</c> if the object is running interactively, <c>false</c> otherwise.
    /// </returns>
    /// <remarks>
    /// When the object is run interactively it is expected that the user will have been prompted
    /// which fields to propagate values from the header to the line(s) for.
    /// When the object is run in non-interactive mode it is assumed all fields will be propagated
    /// from the header to the lines.
    /// </remarks>
    public boolean parmIsInteractive(boolean _isInteractive = isInteractive)
    {
        isInteractive = _isInteractive;
        return isInteractive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReqTable</Name>
				<Source><![CDATA[
    PurchReqTable purchReqTable(PurchReqTable _purchReqTable = null)
    {
        if (_purchReqTable)
        {
            purchReqTable = _purchReqTable;

            this.initPurchReqTable2LineUpdateFields();
        }

        return purchReqTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        PurchReqTable2LineUpdate   purchReqTable2LineUpdate;

        if (isInteractive && !this.fieldsToUpdate())
        {
            return;
        }

        var PurchReqProcessState = PurchReqProcessState::instance();
        try
        {
            PurchReqProcessState.parmIsHeaderToLinesUpdateInProcess(true);

            purchReqTable2LineUpdate = new PurchReqTable2LineUpdate(this);

            purchReqTable2LineUpdate.update(isInteractive);
        }
        finally
        {
            PurchReqProcessState.parmIsHeaderToLinesUpdateInProcess(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean         ret;
        Integer         version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                this.unpackPreviousAnswers();
                ret = true;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackPreviousAnswers</Name>
				<Source><![CDATA[
    private void unpackPreviousAnswers()
    {
        ListEnumerator              purchReqTable2LineUpdateFieldsEnumerator;
        PurchReqTable2LineField     purchReqTable2LineField;

        purchReqTable2LineUpdateFieldsEnumerator = purchReqTable2LineUpdateFields.getEnumerator();

        previousAnswers = (packedPreviousAnswers) ? Map::create(packedPreviousAnswers) : null;

        while (purchReqTable2LineUpdateFieldsEnumerator.moveNext())
        {
            purchReqTable2LineField = purchReqTable2LineUpdateFieldsEnumerator.current();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchReqTable2LineUpdatePrompt construct()
    {
        PurchReqTable2LineUpdatePrompt purchReqTable2LineUpdatePrompt;

        purchReqTable2LineUpdatePrompt = new PurchReqTable2LineUpdatePrompt();
        return purchReqTable2LineUpdatePrompt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS111965";
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldEnabled</Name>
				<Source><![CDATA[
    static boolean fieldEnabled(fieldId _fieldId)
    {
        boolean                 enabled                 = true;
        DictField               dictField               = new DictField(tablenum(PurchReqTable), _fieldId);
        DictConfigurationKey    dictConfigurationKey    = new DictConfigurationKey(dictField.configurationKeyId());

        if (dictConfigurationKey)
        {
            enabled = dictConfigurationKey.enabled();
        }

        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>header2LineFieldIdList</Name>
				<Source><![CDATA[
    static container header2LineFieldIdList()
    {
        int             i, h;
        container       fList;
        SysDictField    sysDictField;
        DictFieldGroup  dictFieldGroup;
        DictTable       dictTable = new DictTable(tablenum(PurchReqTable));

        for (i = 1; i <= dictTable.fieldGroupCnt(); i++)
        {
            if (dictTable.fieldGroup(i) == tablefieldgroupstr(PurchReqTable, HeaderToLineUpdate))
            {
                dictFieldGroup = new DictFieldGroup(tablenum(PurchReqTable), dictTable.fieldGroup(i));

                for (h = 1; h <= dictFieldGroup.numberOfFields(); h++)
                {
                    sysDictField = new SysDictField(tablenum(PurchReqTable), dictFieldGroup.field(h));
                    fList += sysDictField.id();
                }

                return fList;
            }
        }

        return fList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>