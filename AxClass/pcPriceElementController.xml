<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>pcPriceElementController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for providing generic price elements, given a type specific price element.
/// </summary>
public class pcPriceElementController
{
    PCPriceElement  priceElement;
    str             expression;
    #PC
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getElementsFromRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets generic price elements given a specific price element.
    /// </summary>
    /// <returns>
    /// A collection of price elements.
    /// </returns>
    public List getElementsFromRecord()
    {
        List                    elements              = new List(Types::Class);

        elements.addEnd(this.getPriceElementEntity());

        return elements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceElementEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the priceElement to a PcPriceElementEnt - Entity
    /// </summary>
    /// <returns>
    /// The PcPriceElementEnt that carries data of the PcPriceElement
    /// </returns>
    /// <remarks>
    /// Implements a simple factory that creates a PcPriceElementEnt based on the PcPriceElement type
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Exception thrown if the type of the PCpriceElement is unknown.
    /// </exception>

    public PCPriceElementEnt getPriceElementEntity()
    {
        PCPriceElementEnt       priceElementEntity    = PCPriceElementEnt::construct();
        PCPriceExpressionRule   expressionRule;

        priceElementEntity.parmID(priceElement.RecId);
        priceElementEntity.parmName(priceElement.Name);
        priceElementEntity.parmExpression(this.parmExpression() == '' ? '0' : this.parmExpression());

        if (priceElement is PCPriceBasePrice)
        {
            priceElementEntity.parmCondition(#True);
        }
        else if (priceElement is PCPriceExpressionRule)
        {
            expressionRule = priceElement as PCPriceExpressionRule;
            priceElementEntity.parmCondition(expressionRule.Condition == '' ? #True : expressionRule.Condition);
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        return priceElementEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpression</Name>
				<Source><![CDATA[
        public PCPriceExpression parmExpression(PCPriceExpression _expression = expression)
    {
        expression = _expression;

        return expression;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceElement</Name>
				<Source><![CDATA[
        public PCPriceElement parmPriceElement(PCPriceElement _priceElement = priceElement)
    {
        priceElement = _priceElement;

        return priceElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCPriceElementController construct()
    {
        return new PCPriceElementController();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>