<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayVacationDetermineTime</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayVacationDetermineTime
{
    RHRMEmplId         emplId;
    container          intervals, sickListPeriods;
    RHRMVacationTypeId rhrmVacationTypeId;
    RPayRateCode       durationRateCode;
    StartDate          stageStartDate;
    EndDate            stageEndDate;

    boolean            isCalc;

    Set                resSet;

    RPayRateValue      intervalDurationRateValue;
    NumberOf           intervalSeniorityMonth;
    Days               intervalSpentDays, intervalDeterminedDays, intervalIgnoredInSeniorityDays,
                       intervalIgnoredInSeniorityAverageEarnDays, intervalIgnoredInSeniorityTblDays,
                       intervalSickListDays, intervalVacationDays;
    container          vacationDaysCon;

    #define.one(1)
    #define.two(2)
    #define.three(3)
    #define.twelve(12)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Set calc()
    {
        int             i;
        container       con, resCon;
        StartDate       startDate;
        EndDate         endDate;
        Days            intervalCompensatedDays;

        for (i = 1 ; i <= conLen(intervals) ; i ++)
        {
            con = conPeek(intervals, i);

            startDate                 = conPeek(con, 1);
            endDate                   = conPeek(con, #two);
            intervalDurationRateValue = conPeek(con, #three);

            intervalCompensatedDays   = this.calcCompensatedDays(startDate, endDate);

            resCon = [startDate, endDate, intervalCompensatedDays,
                      [intervalDeterminedDays, intervalSpentDays],
                      [intervalDurationRateValue, intervalSeniorityMonth, intervalIgnoredInSeniorityDays],
                      [intervalIgnoredInSeniorityAverageEarnDays, intervalIgnoredInSeniorityTblDays],
                      [intervalSickListDays, intervalVacationDays, vacationDaysCon]];

            resSet.add(resCon);
        }

        isCalc = true;

        return resSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCompensatedDays</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected Days calcCompensatedDays(StartDate _startDate, EndDate _endDate)
    {
        intervalSpentDays      = this.calcSpentDays(_startDate, _endDate);
        intervalDeterminedDays = this.calcDeterminedDays(_startDate, _endDate);

        return intervalDeterminedDays - intervalSpentDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDeterminedDays</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected Days calcDeterminedDays(StartDate _startDate, EndDate _endDate)
    {
        intervalSeniorityMonth = this.calcSeniorityMonth(_startDate, _endDate);

        return real2int(round(intervalSeniorityMonth * intervalDurationRateValue, 1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIgnoredInSeniorityAverageEarnDays</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected Days calcIgnoredInSeniorityAverageEarnDays(StartDate _startDate, EndDate _endDate)
    {
        Days                           nonDecreasedDays, nonDecreasedDaysInYear, vacationDaysInYear;
        StartDate                      startDateLocal;
        EndDate                        endDateLocal;
        int                            i;
        RPayRateCallContext            callContext = new RPayRateCallContext();

        callContext.parmRateDate(_startDate);
        nonDecreasedDaysInYear = real2int(round(RPayRateTable::find(RPayAverageEarnTable::findAverageEarnCode(RPayAverageEarnCodeType::Vacation, rhrmVacationTypeId).NonDecreasedDaysRate).getValue(callContext), 1));

        intervalVacationDays = 0;

        for (i = year(_startDate) ; i <= year(_endDate) ; i ++)
        {
            startDateLocal = max(_startDate, mkDate(1, 1, i));
            endDateLocal   = min(_endDate,   mkDate(31, #twelve, i));

            nonDecreasedDays = nonDecreasedDaysInYear - this.calcIgnoredInSeniorityVacation(dateStartYr(startDateLocal), startDateLocal - 1);
            nonDecreasedDays = nonDecreasedDays > 0 ? nonDecreasedDays : 0;

            vacationDaysInYear = this.calcIgnoredInSeniorityVacation(startDateLocal, endDateLocal) - nonDecreasedDays;
            vacationDaysInYear = vacationDaysInYear > 0 ? vacationDaysInYear : 0;

            intervalVacationDays += vacationDaysInYear;
            vacationDaysCon = conIns(vacationDaysCon,conLen(vacationDaysCon) + 1,[i,vacationDaysInYear, nonDecreasedDays]);
        }

        intervalSickListDays = this.calcIgnoredInSenioritySickList(_startDate, _endDate);

        return intervalVacationDays + intervalSickListDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIgnoredInSeniorityDays</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected Days calcIgnoredInSeniorityDays(StartDate _startDate, EndDate _endDate)
    {
        intervalIgnoredInSeniorityAverageEarnDays = this.calcIgnoredInSeniorityAverageEarnDays(_startDate, _endDate);
        intervalIgnoredInSeniorityTblDays         = this.calcIgnoredInSeniorityTblDays(_startDate, _endDate);

        return intervalIgnoredInSeniorityAverageEarnDays + intervalIgnoredInSeniorityTblDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIgnoredInSenioritySickList</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected Days calcIgnoredInSenioritySickList(StartDate _startDate, EndDate _endDate)
    {
        RPayAverageEarnEmplPeriodTable payAverageEarnEmplPeriodTable;
        TransLink_RU                   transLink;
        RPaySickIllParameters          sickIllParameters;
        RPayTimeGroupMember            timeGroupMember;
        RpayTblSpecTimeTable           tblSpecTimeTable;
        EndDate                        endDateTotal;

        Days                           sickListDays;
        StartDate                      startDateLocal;
        EndDate                        endDateLocal;
        int                            i;
        container                      con, conItem;

        if (_startDate > _endDate)
        {
            return 0;
        }

        sickListPeriods = conNull();

        select firstOnly RecId from sickIllParameters
            where sickIllParameters.PayIllType == RPayIllType::ChildVacation
        exists join tblSpecTimeTable
            where tblSpecTimeTable.RpayTblSpecTimeType  == RpayTblSpecTimeType::SickList &&
                  tblSpecTimeTable.RpayCalendarTimeCode == sickIllParameters.CalendarTimeCode
        exists join timeGroupMember
            where timeGroupMember.TimeGroup           == RPayTblParameters::find().TruancyTimeGroupCode &&
                  timeGroupMember.PayCalendarTimeCode == tblSpecTimeTable.RpayCalendarTimeCode;

        if (!sickIllParameters.RecId)
        {
            while select StartDate, EndDate from payAverageEarnEmplPeriodTable order by StartDate
                where payAverageEarnEmplPeriodTable.AverageEarnCodeType == RPayAverageEarnCodeType::SickList &&
                      payAverageEarnEmplPeriodTable.EmplId              == emplId                            &&
                      payAverageEarnEmplPeriodTable.RpayIllType         == RPayIllType::ChildVacation        &&
                      payAverageEarnEmplPeriodTable.StartDate           <= _endDate                          &&
                      payAverageEarnEmplPeriodTable.EndDate             >= _startDate
            #transLinkNotExistsReversed_RU(transLink, payAverageEarnEmplPeriodTable)
            {
                i ++;

                startDateLocal = max(_startDate, payAverageEarnEmplPeriodTable.StartDate);
                endDateLocal   = min(_endDate, payAverageEarnEmplPeriodTable.EndDate);

                if (endDateLocal > endDateTotal)
                {
                    if (startDateLocal <= endDateTotal && endDateLocal > endDateTotal)
                    {
                        i --;
                        startDateLocal = conPeek(conPeek(con, i), 1);
                    }
                    con = conPoke(con, i, [startDateLocal, endDateLocal]);
                    endDateTotal = endDateLocal;
                }
            }
        }

        for (i = 1 ; i <= conLen(con) ; i ++)
        {
            conItem        = conPeek(con,i);
            startDateLocal = conPeek(conItem,1);
            endDateLocal   = conPeek(conItem,2);

            sickListPeriods += [[startDateLocal, endDateLocal]];

            sickListDays += endDateLocal - startDateLocal + 1;
        }

        return sickListDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIgnoredInSeniorityTblDays</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected Days calcIgnoredInSeniorityTblDays(StartDate _startDate, EndDate _endDate)
    {
        return RPayAverageEarnEngine::nonAppearanceDaysGroup(_startDate, _endDate, emplId, RPayTblParameters::find().TruancyTimeGroupCode, sickListPeriods);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIgnoredInSeniorityVacation</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected Days calcIgnoredInSeniorityVacation(StartDate _startDate, EndDate _endDate)
    {
        RPayAverageEarnEmplPeriodTable payAverageEarnEmplPeriodTable;
        TransLink_RU                   transLink;
        RHRMVacationType               hrmVacationType;
        StartDate                      startDateLocal;
        EndDate                        endDateLocal;
        Days                           vacationDays;
        RPayAverageEarnEngine_Vacation payAverageEarnEngine_Vacation;

        if (_startDate > _endDate)
        {
            return 0;
        }

        payAverageEarnEngine_Vacation = new RPayAverageEarnEngine_Vacation(payAverageEarnEmplPeriodTable.EmplId,
                                                                           payAverageEarnEmplPeriodTable.rPayAverageEarnCode,
                                                                           payAverageEarnEmplPeriodTable.AverageEarnCalcPeriod);

        while select payAverageEarnEmplPeriodTable
            where payAverageEarnEmplPeriodTable.AverageEarnCodeType == RPayAverageEarnCodeType::Vacation &&
                  payAverageEarnEmplPeriodTable.EmplId              == emplId                            &&
                  payAverageEarnEmplPeriodTable.StartDate           <= _endDate                          &&
                  payAverageEarnEmplPeriodTable.EndDate             >= _startDate                        &&
                  payAverageEarnEmplPeriodTable.VacationRecordType  == RPayVacationRecordType::Vacation
        exists join hrmVacationType
            where hrmVacationType.VacationTypeId     == payAverageEarnEmplPeriodTable.VacationTypeId &&
                  hrmVacationType.IgnoredInSeniority == NoYes::Yes
        #transLinkNotExistsReversed_RU(transLink, payAverageEarnEmplPeriodTable)
        {
            startDateLocal = max(_startDate, payAverageEarnEmplPeriodTable.StartDate);
            endDateLocal   = min(_endDate, payAverageEarnEmplPeriodTable.EndDate);
            payAverageEarnEngine_Vacation.rPayAverageEarnEmplPeriodTable(payAverageEarnEmplPeriodTable);
            vacationDays   += payAverageEarnEngine_Vacation.vacDaysBetweenDates(startDateLocal, endDateLocal);
        }

        return vacationDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSeniorityMonth</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected NumberOf calcSeniorityMonth(StartDate _startDate, EndDate _endDate)
    {
        #define.crit(15)

        int         dayStart;
        int         mthStart;
        int         yearStart;

        int         dayEnd;
        int         mthEnd;
        int         yearEnd;

        NumberOf    seniorityMonth;
        StartDate   startDate;
        EndDate     endDate;

        startDate = _startDate;

        intervalIgnoredInSeniorityDays = this.calcIgnoredInSeniorityDays(_startDate, _endDate);
        endDate   = _endDate - intervalIgnoredInSeniorityDays;

        if (endDate < startDate || startDate == dateNull())
        {
            return 0;
        }

        dayStart  = dayOfMth(startDate);
        mthStart  = mthOfYr(startDate);
        yearStart = year(startDate);

        dayEnd    = dayOfMth(endDate);
        mthEnd    = mthOfYr(endDate);
        yearEnd   = year(endDate);

        if (dayEnd >= dayStart)
        {
            seniorityMonth =  (yearEnd - yearStart) * #twelve + (mthEnd - mthStart);

            if (dayEnd - dayStart + 1 > #crit)
            {
                seniorityMonth++;
            }
        }
        else
        {
            seniorityMonth = (yearEnd - yearStart) * #twelve + (mthEnd - mthStart) - 1;

            startDate = mkDate(dayStart, mthOfYr(dateMthFwd(endDate, -1)), year(dateMthFwd(endDate, -1)));

            if (endDate - startDate + 1 > #crit)
            {
                seniorityMonth++;
            }
        }

        return seniorityMonth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSpentDays</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected Days calcSpentDays(StartDate _startDate, EndDate _endDate)
    {
        Days                            spentDays;
        RPayAverageEarnEmplPeriodTable  payAverageEarnEmplPeriodTable;
        TransLink_RU                    transLink;
        StartDate                       startDateLocal;
        EndDate                         endDateLocal;
        RPayAverageEarnEngine_Vacation  payAverageEarnEngine_Vacation;

        payAverageEarnEngine_Vacation = new RPayAverageEarnEngine_Vacation(payAverageEarnEmplPeriodTable.EmplId,
                                                                           payAverageEarnEmplPeriodTable.rPayAverageEarnCode,
                                                                           payAverageEarnEmplPeriodTable.AverageEarnCalcPeriod);
        while select payAverageEarnEmplPeriodTable
            where payAverageEarnEmplPeriodTable.EmplId              == emplId                            &&
                  payAverageEarnEmplPeriodTable.AverageEarnCodeType == RPayAverageEarnCodeType::Vacation &&
                  payAverageEarnEmplPeriodTable.VacationTypeId      == rhrmVacationTypeId                &&
                  payAverageEarnEmplPeriodTable.StartDate           <= _endDate                          &&
                  payAverageEarnEmplPeriodTable.EndDate             >= _startDate                        &&
                  payAverageEarnEmplPeriodTable.Included            == NoYes::Yes                        &&
                  payAverageEarnEmplPeriodTable.VacationRecordType  == RPayVacationRecordType::Vacation
            #transLinkNotExistsReversed_RU(transLink, payAverageEarnEmplPeriodTable)
        {
            startDateLocal = max(payAverageEarnEmplPeriodTable.StartDate, _startDate);
            endDateLocal   = min(payAverageEarnEmplPeriodTable.EndDate, _endDate);

            payAverageEarnEngine_Vacation.rPayAverageEarnEmplPeriodTable(payAverageEarnEmplPeriodTable);

            spentDays += payAverageEarnEngine_Vacation.vacDaysBetweenDates(startDateLocal, endDateLocal);
        }

        select sum(DayNumber) from payAverageEarnEmplPeriodTable
            where payAverageEarnEmplPeriodTable.EmplId              == emplId                            &&
                  payAverageEarnEmplPeriodTable.AverageEarnCodeType == RPayAverageEarnCodeType::Vacation &&
                  payAverageEarnEmplPeriodTable.VacationTypeId      == rhrmVacationTypeId                &&
                  payAverageEarnEmplPeriodTable.StartDate           <= _endDate                          &&
                  payAverageEarnEmplPeriodTable.StartDate           >= _startDate                        &&
                  payAverageEarnEmplPeriodTable.Included            == NoYes::Yes                        &&
                  payAverageEarnEmplPeriodTable.VacationRecordType  == RPayVacationRecordType::VacationCompensation
            #transLinkNotExistsReversed_RU(transLink, payAverageEarnEmplPeriodTable);

        spentDays += payAverageEarnEmplPeriodTable.DayNumber;

        return spentDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompensatedDays</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Days getCompensatedDays()
    {
        SetEnumerator setEnumerator;
        Days          days;
        container     con;

        if (! isCalc)
        {
            this.calc();
        }

        setEnumerator = resSet.getEnumerator();

        while (setEnumerator.moveNext())
        {
            con  =  setEnumerator.current();
            days += conPeek(con, #three);
        }

        return days;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeterminedDays</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Days getDeterminedDays()
    {
        SetEnumerator setEnumerator;
        Days          days;
        container     con;

        if (! isCalc)
        {
            this.calc();
        }

        setEnumerator = resSet.getEnumerator();

        while (setEnumerator.moveNext())
        {
            con  =  setEnumerator.current();
            days += conPeek(conPeek(con, 4), #one);
        }

        return days;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIgnoredInSeniorityDays</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Days getIgnoredInSeniorityDays()
    {
        SetEnumerator setEnumerator;
        Days          days;
        container     con;

        if (! isCalc)
        {
            return this.calcIgnoredInSeniorityDays(stageStartDate, stageEndDate);
        }

        setEnumerator = resSet.getEnumerator();

        while (setEnumerator.moveNext())
        {
            con  =  setEnumerator.current();
            days += conPeek(conPeek(con, 5), #three);
        }

        return days;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpentDays</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Days getSpentDays()
    {
        SetEnumerator setEnumerator;
        Days          days;
        container     con;

        if (! isCalc)
        {
            return this.calcSpentDays(stageStartDate, stageEndDate);
        }

        setEnumerator = resSet.getEnumerator();

        while (setEnumerator.moveNext())
        {
            con  =  setEnumerator.current();
            days += conPeek(conPeek(con, 4), #two);
        }

        return days;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void new(RHRMEmplId _emplId, StartDate _stageStartDate, EndDate _stageEndDate , RHRMVacationTypeId _rhrmVacationTypeId)
    {
        RPayRateCallContext callContext;

        callContext             = new RPayRateCallContext();
        callContext.parmEmployeeId(_emplId);
        callContext.parmRateDate(_stageEndDate);

        emplId                  = _emplId;
        rhrmVacationTypeId      = _rhrmVacationTypeId;
        durationRateCode        = RHRMVacationType::find(rhrmVacationTypeId).DurationRate;
        intervals               = RPayRateTable::find(durationRateCode).rateValueCollection(callContext, _stageStartDate, _stageEndDate);
        stageStartDate          = _stageStartDate;
        stageEndDate            = _stageEndDate;

        resSet                  = new Set(Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vacationPeriod</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static container vacationPeriod(
        RHRMEmplId          _emplId,
        StartDate           _startDate,
        Days                _days,
        RHRMVacationTypeId  _rhrmVacationTypeId)
    {
        RHRMEmplTable                  emplTable;
        StartDate                      vacPeriodStart, vacPeriodStartTotal;
        EndDate                        vacPeriodEnd, vacPeriodEndTmp, globalEndDate;
        TransDate                      employmentDate, resignedDate;
        Days                           totalSpentDays, determinedDays;
        RPayVacationDetermineTime      payVacationDetermineTime, payVacationDetermineTimeYr;

        void updateSpentDays()
        {
            while (totalSpentDays > 0 && vacPeriodEnd < globalEndDate)
            {
                vacPeriodStart = vacPeriodEnd + 1;
                vacPeriodEnd   = nextYr(vacPeriodStart) - 1;

                while (vacPeriodEndTmp < vacPeriodEnd)
                {
                    vacPeriodEndTmp = vacPeriodEnd;

                    payVacationDetermineTimeYr = new RPayVacationDetermineTime(_emplId, vacPeriodStart, vacPeriodEnd, _rhrmVacationTypeId);
                    payVacationDetermineTimeYr.calc();
                    vacPeriodEnd               = nextYr(vacPeriodStart) - 1 + payVacationDetermineTimeYr.getIgnoredInSeniorityDays();
                }

                determinedDays = payVacationDetermineTimeYr.getDeterminedDays();
                totalSpentDays -= determinedDays;
            }
        }

        emplTable       = RHRMEmplTable::find(_emplId);
        employmentDate  = emplTable.PayEmploymentDate;

        vacPeriodEnd = employmentDate - 1;

        if (! RHRMVacationType::find(_rhrmVacationTypeId).DurationRate)
        {
            return [dateNull(), dateNull()];
        }

        resignedDate = emplTable.PayResignedDate;

        globalEndDate = resignedDate == dateNull() ? prevYr(maxDate()) : resignedDate;

        payVacationDetermineTime = new RPayVacationDetermineTime(_emplId, employmentDate, _startDate - 1, _rhrmVacationTypeId);
        totalSpentDays = payVacationDetermineTime.getSpentDays();

        updateSpentDays();

        if (totalSpentDays == 0)
        {
            vacPeriodStartTotal = vacPeriodEnd + 1;
        }
        else
        {
            vacPeriodStartTotal = vacPeriodStart;
        }

        totalSpentDays += _days;

        if (totalSpentDays > 0)
        {
            updateSpentDays();
        }

        resignedDate = resignedDate == dateNull() ? maxDate() : resignedDate;

        return [vacPeriodStartTotal, min(vacPeriodEnd, resignedDate)];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>