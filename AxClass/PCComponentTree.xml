<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCComponentTree</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCComponentTree</c> class handles the interaction with a form tree control that shows a
/// configuration model as components and sub-components.
/// </summary>
class PCComponentTree
{
    FormTreeControl tree;

    PCClass         componentContext;

    #PC
    int             selectedItemIndex;
    Common          selectedData;

    List            selectedPath;

    Map             dataMap;

    private static boolean isPCSubComponentSysDaRefactoringFlightEnabled = PCSubComponentSysDaRefactoringFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFormTreeItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a new form tree item.
    /// </summary>
    /// <param name="_text">
    /// The text of the item.
    /// </param>
    /// <param name="_image">
    /// An image index in the image list.
    /// </param>
    /// <param name="_children">
    /// The number of children of the item.
    /// </param>
    /// <param name="_data">
    /// A record associated with the item.
    /// </param>
    /// <param name="_parent">
    /// The parent item index.
    /// </param>
    /// <param name="_insertAfter">
    /// The child item to insert after the item.
    /// </param>
    /// <returns>
    /// The index of the new item.
    /// </returns>
    protected int addFormTreeItem(str _text, int _image, int _children, Common _data, int _parent, int _insertAfter)
    {
        FormTreeItem    formTreeItem    = this.createFormTreeItem(_text, _image, _children);
        int             idx             = tree.addItem(_parent, _insertAfter, formTreeItem);

        // Records cannot be inserted as data on the FormTreeTree. Therefore we use a map.
        dataMap.insert(idx, _data);

        return idx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new form tree item.
    /// </summary>
    /// <param name="_data">
    /// The data behind the item.
    /// </param>
    /// <param name="_parent">
    /// The index of the parent in the tree.
    /// </param>
    /// <returns>
    /// The index of the new item.
    /// </returns>
    protected int addItem(Common _data, int _parent)
    {
        return this.addFormTreeItem(this.getItemBaseText(_data), this.getTreeIcon(_data), -1, _data, _parent, _parent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>advancePathEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Advances an enumerator for a selected path when moving down the tree structure and selects the item
    /// at the end of the path.
    /// </summary>
    /// <param name="_pathEnumerator">
    /// The enumerator to advance.
    /// </param>
    /// <param name="_parent">
    /// The index of the parent tree item.
    /// </param>
    /// <returns>
    /// true if the path has more nodes; otherwise, false.
    /// </returns>
    protected ListEnumerator advancePathEnumerator(ListEnumerator _pathEnumerator, int _parent)
    {
        ListEnumerator ret = _pathEnumerator;

        if (_pathEnumerator != null)
        {
            if (!_pathEnumerator.moveNext())
            {
                // When there are no more elements, return null since there is no method on the enumerator which can tell us this
                ret = null;
                // Parent was the last selected node, set it as the selected in the tree
                selectedItemIndex = _parent;
                tree.select(_parent);
                tree.expand(_parent);
            }
            else
            {
                // If _parent is a node on the path to selected then expand it
                if (_parent != 0)
                {
                    tree.expand(_parent);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFormTreeItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a form tree item.
    /// </summary>
    /// <param name="_text">
    /// The text for the item.
    /// </param>
    /// <param name="_image">
    /// An image index into the image list.
    /// </param>
    /// <param name="_children">
    /// The number of children of the item.
    /// </param>
    /// <returns>
    /// A new form tree item.
    /// </returns>
    protected FormTreeItem createFormTreeItem(str _text, int _image, int _children)
    {
        return new FormTreeItem(_text, _image, _children);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemBaseText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the text representation of a record.
    /// </summary>
    /// <param name="_common">
    /// The record.
    /// </param>
    /// <returns>
    /// A text representation of a record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// An exception is thrown for unknown record types.
    /// </exception>
    protected str getItemBaseText(Common _common)
    {
        PCSubComponent subComponent;

        switch (_common.TableId)
        {
            case tableNum(PCClass):
                // Retrieve Name from supertype
                return (select firstonly Name from ecoResCategory where ecoResCategory.RecId == _common.RecId).Name;

            case tableNum(PCSubComponent):
                subComponent = _common as PCSubComponent;
                return subComponent.Name;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemIdxFromPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item index of a node at the end of a path.
    /// </summary>
    /// <param name="_path">
    /// A list of records that represent the path.
    /// </param>
    /// <returns>
    /// The item index of the node at the end of the path.
    /// </returns>
    protected int getItemIdxFromPath(List _path)
    {
        ListEnumerator  le  = _path.getEnumerator();
        Common          currentPathNode;
        Common          data;
        int             idx = 0;

        while (le.moveNext())
        {
            // Look at children of match so far
            idx             = tree.getChild(idx);
            currentPathNode = le.current();
            while (idx)
            {
                // If children data match path node data
                data = dataMap.lookup(idx);
                if (data.TableId  == currentPathNode.TableId
                    && data.RecId == currentPathNode.RecId)
                {
                    // This is the sibling
                    break;
                }

                // If no match, then we will end up with 0
                idx = tree.getNextSibling(idx);
            }

            // No match
            if (!idx)
            {
                break;
            }
        }

        return idx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPathToItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the path of an item in the tree.
    /// </summary>
    /// <param name="_idx">
    /// The index of the item.
    /// </param>
    /// <returns>
    /// The path of the item.
    /// </returns>
    protected List getPathToItem(int _idx)
    {
        List path = new List(Types::Record);

        while (_idx != 0)
        {
            path.addStart(dataMap.lookup(_idx));
            _idx = tree.getParent(_idx);
        }

        return path;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the backing data of a selected item in the tree.
    /// </summary>
    /// <returns>
    /// The backing data of the selected item in the tree.
    /// </returns>
    public Common getSelected()
    {
        return selectedData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a selected component record in the tree.
    /// </summary>
    /// <returns>
    /// The selected record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The selected item is not for a component or sub-component.
    /// </exception>
    public PCClass getSelectedComponent()
    {
        PCSubComponent selectedSubComponent;

        switch (selectedData.TableId)
        {
            case tableNum(PCClass):
                return selectedData as PCClass;

            case tableNum(PCSubComponent):
                selectedSubComponent = selectedData as PCSubComponent;
                return PCClass::find(selectedSubComponent.ChildComponentClass);

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a selected path as a list of records.
    /// </summary>
    /// <returns>
    /// The selected path as a list of records.
    /// </returns>
    public List getSelectedPath()
    {
        return selectedPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedSubComponentPathAsSolverNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a the path to the current selected Subcomponent from root downwards int the tree structure. The root itself is not included in the path
    /// </summary>
    /// <returns>
    /// return a str with the path
    /// </returns>
    public str getSelectedSubComponentPathAsSolverNames()
    {
        str xPath;
        List path                   = this.getSelectedPath();
        ListEnumerator le           = path.getEnumerator();
        PCSubComponent subComponent;

        le.moveNext(); // skip root
        while (le.moveNext())
        {
                subComponent = le.current();
                if (xPath == '') // path starts without '/'
                    xPath =  subComponent.SolverName ;
                else
                    xPath +=  '/' + subComponent.SolverName ;
        }
        return xPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTreeIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the image index for a record.
    /// </summary>
    /// <param name="_common">
    /// The record.
    /// </param>
    /// <returns>
    /// The image index for a record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The record types are unknown.
    /// </exception>
    protected int getTreeIcon(Common _common)
    {
        #define.ComponentIconIdx(0)
        #define.SubComponentIconIdx(1)
        #define.LogicalComponentIconIdx(2)

        PCSubComponent subComponent;

        switch (_common.TableId)
        {
            case tableNum(PCClass):
                return #ComponentIconIdx;

            case tableNum(PCSubComponent):
                subComponent = _common as PCSubComponent;
                if (subComponent.Type == PCSubComponentType::SubComponent)
                {
                    return #SubComponentIconIdx;
                }
                else
                {
                    return #LogicalComponentIconIdx;
                }

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a tree control by adding an image list.
    /// </summary>
    public void initTree()
    {
        Imagelist imagelist = PCModelingLibrary::createIconList();

        tree.setImagelist(imagelist);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemOnSelectedPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an item to be drawn is on the path of a selected node.
    /// </summary>
    /// <param name="_pathEnumerator">
    /// The enumerator of the selected path.
    /// </param>
    /// <param name="_itemData">
    /// The item data.
    /// </param>
    /// <returns>
    /// true if the item is a node on the path of the selected node; otherwise, false.
    /// </returns>
    protected boolean isItemOnSelectedPath(ListEnumerator _pathEnumerator, Common _itemData)
    {
        Common  pathNode;
        boolean ret;

        if (_pathEnumerator != null)
        {
            pathNode = _pathEnumerator.current();
            // If the item is selected
            if (pathNode.TableId  == _itemData.TableId
                && pathNode.RecId == _itemData.RecId)
            {
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        selectedPath = new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmComponentContext</Name>
				<Source><![CDATA[
        public PCClass parmComponentContext(PCClass _componentContext = componentContext)
    {
        componentContext = _componentContext;

        return componentContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTree</Name>
				<Source><![CDATA[
        public FormTreeControl parmTree(FormTreeControl _tree = tree)
    {
        tree = _tree;

        return tree;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pathsEqual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether two paths are equal.
    /// </summary>
    /// <param name="_path1">
    /// A list of records.
    /// </param>
    /// <param name="_path2">
    /// A list of records.
    /// </param>
    /// <returns>
    /// true if the lists are equal; otherwise, false.
    /// </returns>
    protected boolean pathsEqual(List _path1, List _path2)
    {
        ListEnumerator  le1, le2;
        Common          common1, common2;
        boolean         ret = true;

        if (_path1.elements() != _path2.elements())
        {
            ret = false;
        }
        else
        {
            le1 = _path1.getEnumerator();
            le2 = _path2.getEnumerator();

            while (le1.moveNext() && le2.moveNext())
            {
                common1 = le1.current();
                common2 = le2.current();
                if (common1.TableId  != common2.TableId
                    || common1.RecId != common2.RecId)
                {
                    ret = false;
                    break;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>redrawTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Redraws the tree control in a form.
    /// </summary>
    public void redrawTree()
    {
        PCClass         component;
        int             rootItemReference;
        ListEnumerator  pathEnumerator;

        tree.lockWindowUpdate(true);

        tree.deleteAll();
        dataMap = new Map(Types::Integer, Types::Record);

        component = componentContext;
        rootItemReference = this.addItem(component, 0);
        // If no path is selected, default path to root.
        if (selectedPath == null)
        {
            tree.select(rootItemReference);
        }

        pathEnumerator = selectedPath.getEnumerator();
        // Set to root
        pathEnumerator.moveNext();
        selectedData = component;

        this.redrawTreeIcon(rootItemReference, component, this.advancePathEnumerator(pathEnumerator, rootItemReference));

        tree.expand(rootItemReference,FormTreeExpand::Expand);
        tree.select(selectedItemIndex);

        tree.lockWindowUpdate(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>redrawTreeIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Redraws the tree control icon in a form.
    /// </summary>
    /// <param name="_parent">
    /// The ID of the parent icon in the tree.
    /// </param>
    /// <param name="_parentClass">
    /// The component to which the icon relates.
    /// </param>
    /// <param name="_pathEnumerator">
    /// An enumeration value over the selected path.
    /// </param>
    protected void redrawTreeIcon(int _parent, PCClass _parentClass, ListEnumerator _pathEnumerator)
    {
        PCSubComponent  subComponent;
        PCClass         component;
        int             newChildIndex;
        boolean         ret = false;

        if (isPCSubComponentSysDaRefactoringFlightEnabled)
        {
            var searchObject = new SysDaSearchObject(PCComponentTree::getSubComponentQueryForParentComponentClass(subComponent, component, _parentClass.RecId));
            var searchStatement = new SysDaSearchStatement();

            while (searchStatement.findNext(searchObject))
            {
                newChildIndex = this.addItem(subComponent, _parent);

                if (this.isItemOnSelectedPath(_pathEnumerator, subComponent))
                {
                    // Advance also selects
                    _pathEnumerator = this.advancePathEnumerator(_pathEnumerator, newChildIndex);

                    this.redrawTreeIcon(newChildIndex, component, _pathEnumerator);
                    // Do not use the enumerator on siblings since it has ben advanced.
                    _pathEnumerator = null;
                }
                else
                {
                    this.redrawTreeIcon(newChildIndex, component, null);
                }
            }
        }
        else
        {
            while select subComponent
                where   subComponent.ParentComponentClass == _parentClass.RecId
                join    RecId, Name from component
                where   component.RecId ==  subComponent.ChildComponentClass
            {
                newChildIndex = this.addItem(subComponent, _parent);

                if (this.isItemOnSelectedPath(_pathEnumerator, subComponent))
                {
                    // Advance also selects
                    _pathEnumerator = this.advancePathEnumerator(_pathEnumerator, newChildIndex);

                    this.redrawTreeIcon(newChildIndex, component, _pathEnumerator);
                    // Do not use the enumerator on siblings since it has ben advanced.
                    _pathEnumerator = null;
                }
                else
                {
                    this.redrawTreeIcon(newChildIndex, component, null);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubComponentQueryForParentComponentClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query object for the sub-components of a parent component class.
    /// </summary>
    /// <param name="_subComponentQueryBuffer">The table buffer that will hold the result.</param>
    /// <param name="_parentComponentClass">The record ID of the parent component class.</param>
    /// <returns>
    /// The query object.
    /// </returns>
    protected static SysDaQueryObject getSubComponentQueryForParentComponentClass(
        PCSubComponent _subComponentQueryBuffer, 
        PCClass _componentQueryBuffer,
        RefRecId _parentComponentClassRecId)
    {
        /*
        select _subComponentQueryBuffer
                where   _subComponentQueryBuffer.ParentComponentClass == _parentComponentClassRecId
                join    RecId, Name from _componentQueryBuffer
                where   _componentQueryBuffer.RecId ==  _subComponentQueryBuffer.ChildComponentClass
        */

        var queryObject = new SysDaQueryObject(_subComponentQueryBuffer);

        queryObject.WhereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(_subComponentQueryBuffer, fieldStr(PCSubComponent, ParentComponentClass)),
            new SysDaValueExpression(_parentComponentClassRecId)));

        SysDaQueryObject joinQuery = new SysDaQueryObject(_componentQueryBuffer);
        joinQuery.projection()
            .add(fieldStr(PCClass, RecId))
            .add(fieldStr(PCClass, Name));

        joinQuery.WhereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(_componentQueryBuffer, fieldStr(PCClass, RecId)),
            new SysDaFieldExpression(_subComponentQueryBuffer, fieldStr(PCSubComponent, ChildComponentClass))));
        
        queryObject.joinClause(SysDaJoinKind::InnerJoin, joinQuery);

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the current selection to the currently selected item on the form tree control.
    /// </summary>
    /// <param name="_oldItem">
    /// The item previously selected.
    /// </param>
    /// <param name="_newItem">
    /// The new selected item.
    /// </param>
    /// <param name="_how">
    /// The way the item was selected.
    /// </param>
    /// <returns>
    /// true if a new item was selected; otherwise, false.
    /// </returns>
    /// <remarks>
    /// When this method returns false the caller does not have to update the related controls.
    /// </remarks>
    public boolean selectionChanged(FormTreeItem _oldItem, FormTreeItem _newItem, FormTreeSelect _how)
    {
        int  selectedIdx;

        if (_newItem != null)
        {
            selectedIdx = _newItem.idx();
        }
        selectedItemIndex = selectedIdx;

        return this.setSelectedPathFromSelected(selectedIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelectedPathFromSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the path from a selected index.
    /// </summary>
    /// <param name="_selectedIdx">
    /// The selected index.
    /// </param>
    /// <returns>
    /// true if a new item is selected; otherwise, false.
    /// </returns>
    protected boolean setSelectedPathFromSelected(int _selectedIdx)
    {
        // Reload selection if a new element is selected (it can be the same when the tree is redrawn)
        boolean ret;
        Common  oldSelectedData = selectedData;
        List    oldSelectedPath = selectedPath;

        // Set selected data/path
        if (_selectedIdx != 0)
        {
            selectedData = dataMap.lookup(_selectedIdx);
        }
        else
        {
            selectedData = null;
        }

        selectedPath = this.getPathToItem(_selectedIdx);

        // If it is a new item then return true to refresh dependent data.
        if (selectedData.TableId  != oldSelectedData.TableId
            || selectedData.RecId != oldSelectedData.RecId)
        {
            ret = true;
        }
        else
        {
            // If item data is equal it can be a different path
            if (!this.pathsEqual(selectedPath, oldSelectedPath))
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCComponentTree construct()
    {
        return new PCComponentTree();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTreeComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a <c>PCComponentTree</c> instance from a form tree control and a component context that
    /// will be the root of the tree.
    /// </summary>
    /// <param name="_tree">
    /// The form tree control.
    /// </param>
    /// <param name="_componentContext">
    /// The component context that will be the root of the tree.
    /// </param>
    /// <returns>
    /// A <c>PCComponentTree</c> instance.
    /// </returns>
    public static PCComponentTree newFromTreeComponent(FormTreeControl _tree, PCClass _componentContext)
    {
        PCComponentTree componentTree = PCComponentTree::construct();

        componentTree.parmTree(_tree);
        componentTree.parmComponentContext(_componentContext);

        return componentTree;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>