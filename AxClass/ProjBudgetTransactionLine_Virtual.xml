<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetTransactionLine_Virtual</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjBudgetTransactionLine_Virtual extends ProjBudgetTransactionLine
{
    ProjTransType       transType;
    TransDate           transDate;
    ProjTransIdBase     transId;
    ProjId              projId;
    ProjCategoryId      categoryId;
    CurrencyCode        costAmountCurrencyCode;
    CurrencyCode        salesAmountCurrencyCode;
    ProjActivityNumber  projActivityNumber;
    ProjLinePropertyId  linePropertyId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the project activity number of the transaction.
    /// </summary>
    /// <returns>
    /// The project activity number of the transaction.
    /// </returns>
    public ProjActivityNumber activityNumber()
    {
        return projActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws an exception if this method is not overridden.
    /// </summary>
    /// <returns>
    /// The category ID.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method is not overridden.
    /// </exception>
    public ProjCategoryId categoryId()
    {
        return this.parmCategoryId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws an exception if this method is not overridden.
    /// </summary>
    /// <returns>
    /// The cost amount.
    /// </returns>
    /// <remarks>
    /// The amount must be of the <c>AmountCurr</c> data type.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The method is not overridden.
    /// </exception>
    public CostAmount costAmount()
    {
        return this.parmCostAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmountCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws an exception if this method is not overridden.
    /// </summary>
    /// <returns>
    /// The currency code of the cost amount.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method is not overridden.
    /// </exception>
    public CurrencyCode costAmountCurrencyCode()
    {
        return this.parmCostAmountCurrencyCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the project Line Property ID of the transaction.
    /// </summary>
    /// <returns>
    ///    The project Line Property ID of the transaction.
    /// </returns>
    public ProjLinePropertyId linePropertyId()
    {
        return this.parmLinePropertyId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryId</Name>
				<Source><![CDATA[
        private ProjCategoryId parmCategoryId(ProjCategoryId _categoryId = categoryId)
    {
        categoryId = _categoryId;

        return categoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostAmountCurrencyCode</Name>
				<Source><![CDATA[
        private CurrencyCode parmCostAmountCurrencyCode(CurrencyCode _costAmountCurrencyCode = costAmountCurrencyCode)
    {
        costAmountCurrencyCode = _costAmountCurrencyCode;

        return costAmountCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLinePropertyId</Name>
				<Source><![CDATA[
        private ProjLinePropertyId parmLinePropertyId(ProjLinePropertyId _linePropertyId = linePropertyId)
    {
        linePropertyId = _linePropertyId;

        return linePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjActivityNumber</Name>
				<Source><![CDATA[
        private ProjActivityNumber parmProjActivityNumber(ProjActivityNumber _projActivityNumber = projActivityNumber)
    {
        projActivityNumber = _projActivityNumber;

        return projActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
        private ProjId parmProjId(ProjId _projId = projId)
    {
        projId = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesAmountCurrencyCode</Name>
				<Source><![CDATA[
        private CurrencyCode parmSalesAmountCurrencyCode(CurrencyCode _salesAmountCurrencyCode = salesAmountCurrencyCode)
    {
        salesAmountCurrencyCode = _salesAmountCurrencyCode;

        return salesAmountCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentLine</Name>
				<Source><![CDATA[
        public RefRecId parmSourceDocumentLine(RefRecId _sourceDocumentLine = sourceDocumentLine)
    {
        sourceDocumentLine = _sourceDocumentLine;

        return sourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
        private TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransId</Name>
				<Source><![CDATA[
        private ProjTransIdBase parmTransId(ProjTransIdBase _transId = transId)
    {
        transId = _transId;

        return transId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransType</Name>
				<Source><![CDATA[
        private ProjTransType parmTransType(ProjTransType _transType = transType)
    {
        transType = _transType;

        return transType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws an exception if this method is not overridden.
    /// </summary>
    /// <returns>
    /// The project ID.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method is not overridden.
    /// </exception>
    public ProjId projId()
    {
        return this.parmProjId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws an exception if this method is not overridden.
    /// </summary>
    /// <returns>
    /// The sales amount.
    /// </returns>
    /// <remarks>
    /// The amount must be of the <c>AmountCurr</c> data type.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The method is not overridden.
    /// </exception>
    public SalesAmount salesAmount()
    {
        return this.parmSalesAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmountCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws an exception if this method is not overridden.
    /// </summary>
    /// <returns>
    /// The currency code of the sales amount.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method is not overridden.
    /// </exception>
    public CurrencyCode salesAmountCurrencyCode()
    {
        return this.parmSalesAmountCurrencyCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws an exception if this method is not overridden.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method is not overridden.
    /// </exception>
    public TransDate transDate()
    {
        return this.parmTransDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws an exception if this method is not overridden.
    /// </summary>
    /// <returns>
    /// The transaction ID.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method is not overridden.
    /// </exception>
    public ProjTransIdBase transId()
    {
        return this.parmTransId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws an exception if this method is not overridden.
    /// </summary>
    /// <returns>
    /// The transaction type.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method is not overridden.
    /// </exception>
    public ProjTransType transType()
    {
        return this.parmTransType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static ProjBudgetTransactionLine construct(
        ProjTransType       _transType,
        TransDate           _transDate,
        ProjTransIdBase     _transId,
        ProjId              _projId,
        ProjCategoryId      _categoryId,
        Qty                 _quantity,
        CurrencyCode        _costAmountCurrencyCode,
        CostAmount          _costAmount,
        CurrencyCode        _salesAmountCurrencyCode,
        SalesAmount         _salesAmount,
        RefRecId            _sourceDocumentLine,
        ProjActivityNumber  _projActivityNumber = '',
        ProjLinePropertyId  _projLinePropertyId = ''
    )
    {
        ProjBudgetTransactionLine_Virtual   projBudgetTransactionLine_Virtual = new ProjBudgetTransactionLine_Virtual();

        if (!_transDate ||
            !_projId ||
            !_categoryId ||
            (_transType != ProjTransType::Revenue && !_costAmountCurrencyCode) ||
            !_salesAmountCurrencyCode ||
            !_sourceDocumentLine)
        {
            throw error(strFmt("@SYS22828", funcName()));
        }

        projBudgetTransactionLine_Virtual.parmTransType(_transType);
        projBudgetTransactionLine_Virtual.parmTransDate(_transDate);
        projBudgetTransactionLine_Virtual.parmTransId(_transId);
        projBudgetTransactionLine_Virtual.parmProjId(_projId);
        projBudgetTransactionLine_Virtual.parmCategoryId(_categoryId);
        projBudgetTransactionLine_Virtual.parmCostAmountCurrencyCode(_costAmountCurrencyCode);
        projBudgetTransactionLine_Virtual.parmSalesAmountCurrencyCode(_salesAmountCurrencyCode);

        projBudgetTransactionLine_Virtual.parmQty(_quantity);
        projBudgetTransactionLine_Virtual.parmCostAmount(_costAmount);
        projBudgetTransactionLine_Virtual.parmSalesAmount(_salesAmount);
        projBudgetTransactionLine_Virtual.parmTransIdRef('');
        projBudgetTransactionLine_Virtual.parmProjActivityNumber(_projActivityNumber);
        projBudgetTransactionLine_Virtual.parmSourceDocumentLine(_sourceDocumentLine);
        projBudgetTransactionLine_Virtual.parmLinePropertyId(_projLinePropertyId);
        return projBudgetTransactionLine_Virtual;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>