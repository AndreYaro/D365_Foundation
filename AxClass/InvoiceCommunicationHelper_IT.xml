<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InvoiceCommunicationHelper_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InvoiceCommunicationHelper_IT</c> is a class to retrive data for Vendor and Customer Invoice Communication model mapping.
/// </summary>
public static class InvoiceCommunicationHelper_IT
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPostalAddressForRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets postal address for specified role.
    /// </summary>
    /// <param name = "_RecId">Party RecId</param>
    /// <param name = "_logisticsLocationRoleType">Address type in specified party</param>
    /// <returns>RecId of logistics postal address</returns>
    public static RecId getPostalAddressForRole(RecId _RecId, LogisticsLocationRoleType _logisticsLocationRoleType)
    {
        var logisticsPostalAddress = DirParty::findPostalAddressByRole(_RecId, _logisticsLocationRoleType);
        return logisticsPostalAddress.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirPartyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets party name.
    /// </summary>
    /// <param name = "_party">Party RecId</param>
    /// <param name = "_isPersonName">True if persons name required</param>
    /// <param name = "_isTaxRepresentative">true if tax representative name required</param>
    /// <param name = "_isFirstName">True if first name required</param>
    /// <returns>Party name</returns>
    public static Name getDirPartyName(RecId _party, NoYes _isPersonName, NoYes _isTaxRepresentative = NoYes::No, NoYes _isFirstName = NoYes::Yes)
    {
        Name name;
        DirPartyTable dirPartyTable = DirPartyTable::findRec(_party);

        if (_isTaxRepresentative)
        {
            DirPartyTable               dirPartyTableTaxRepresentative;
            DirPartyRelationship        dirPartyRelationship;
            DirRelationshipTypeTable    dirRelationshipTypeTable;

            select firstOnly RecId from dirPartyRelationship
                where dirPartyRelationship.ParentParty == dirPartyTable.RecId
            join dirPartyTableTaxRepresentative
                where dirPartyTableTaxRepresentative.RecId == dirPartyRelationship.ChildParty
            exists join dirRelationshipTypeTable
                where dirRelationshipTypeTable.RelationshipTypeId == dirPartyRelationship.RelationshipTypeId
                    && dirRelationshipTypeTable.SystemType == DirSystemRelationshipType::TaxRepresentative;

            dirPartyTable = dirPartyTableTaxRepresentative;
        }

        if (_isPersonName && dirPartyTable.partyType() == DirPartyType::Person)
        {
            DirPersonName personName = DirPersonName::find(dirPartyTable.RecId);
            name = _isFirstname ?  personName.FirstName : personName.LastName;
        }
        else if (!_isPersonName && dirPartyTable.partyType() != DirPartyType::Person)
        {
            name = dirPartyTable.Name;
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRepresentativeISOCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax representative's ISO country code.
    /// </summary>
    /// <param name = "_party">Tax representative RecId</param>
    /// <returns>ISO country code</returns>
    public static LogisticsAddressCountryRegionISOCode getTaxRepresentativeISOCode(RecId _party)
    {
        DirPartyTable dirPartytable = DirPartyTable::findRec(_party);
        LogisticsPostalAddress taxReprPostalAddress;
        DirPartyTable               dirPartyTableTaxRepresentative;
        DirPartyRelationship        dirPartyRelationship;
        DirRelationshipTypeTable    dirRelationshipTypeTable;

        select firstOnly RecId from dirPartyRelationship
                where dirPartyRelationship.ParentParty == dirPartyTable.RecId
            join RecId from dirPartyTableTaxRepresentative
                where dirPartyTableTaxRepresentative.RecId == dirPartyRelationship.ChildParty
            exists join dirRelationshipTypeTable
                where dirRelationshipTypeTable.RelationshipTypeId == dirPartyRelationship.RelationshipTypeId
                    && dirRelationshipTypeTable.SystemType == DirSystemRelationshipType::TaxRepresentative;
        
        taxReprPostalAddress = DirParty::primaryPostalAddress(dirPartyTableTaxRepresentative.RecId);
        return LogisticsAddressCountryRegion::find(taxReprPostalAddress.CountryRegionId).ISOcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRepresentativeTaxRegNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax representative's tax registration number.
    /// </summary>
    /// <param name = "_recId">Tax representative party RecId</param>
    /// <param name = "_invoiceDate">Invoice Date</param>
    /// <returns>Tax registration number</returns>
    public static TaxRegistrationNumber getTaxRepresentativeTaxRegNum(RecId _recId, TransDate _invoiceDate)
    {
        TaxRegistrationNumber       taxRegNum;
        LogisticsPostalAddress      taxReprPostalAddress;
        DirPartyTable               dirPartyTableTaxRepresentative;
        DirPartyRelationship        dirPartyRelationship;
        DirRelationshipTypeTable    dirRelationshipTypeTable;
        CustVendTable               custVendTable;
        DirPartyTable               dirPartyTable = DirPartyTable::findRec(_recId);

        select firstOnly RecId from dirPartyRelationship
                where dirPartyRelationship.ParentParty == dirPartyTable.RecId
            join dirPartyTableTaxRepresentative
                where dirPartyTableTaxRepresentative.RecId == dirPartyRelationship.ChildParty
            exists join dirRelationshipTypeTable
                where dirRelationshipTypeTable.RelationshipTypeId == dirPartyRelationship.RelationshipTypeId
                    && dirRelationshipTypeTable.SystemType == DirSystemRelationshipType::TaxRepresentative;

        taxReprPostalAddress = DirParty::primaryPostalAddress(dirPartyTableTaxRepresentative.RecId);

        if (dirPartyTableTaxRepresentative.partyType() == DirPartyType::Organization)
        {
            taxRegNum = DirOrganization::find(dirPartyTableTaxRepresentative.RecId).OrgNumber;
        }
        else
        {
            taxRegNum = TaxRegistration::legislationRegistrationValue(
                                        dirPartyTableTaxRepresentative.RecId,
                                        TaxRegistrationTypesList::TAXID,
                                        _invoiceDate,
                                        taxReprPostalAddress.RecId);
        }

        return taxRegNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATPaymentTerms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets EsigibilitaIVA code for invoice journal.
    /// </summary>
    /// <param name = "_voucher">Voucher id</param>
    /// <param name = "_invoiceDate">Invoice date</param>
    /// <returns>Type of VAT payment terms</returns>
    public static str getVATPaymentTerms(Voucher _voucher, TransDate _invoiceDate)
    {
        TaxTrans taxTransSplitPaym;
        TaxTrans_IT taxTrans_IT;
        str vatPaymentTerms;

        select firstOnly RecId, TaxCode from taxTransSplitPaym
            where taxTransSplitPaym.Voucher == _voucher
                && taxTransSplitPaym.TransDate == _invoiceDate
        exists join taxTrans_IT
            where taxTrans_IT.TaxTrans == taxTransSplitPaym.RecId
                && (taxTrans_IT.SplitPaymDirect || taxTrans_IT.SplitPaymReverse);

        boolean isSplitPaym = taxTransSplitPaym.RecId;

        if (isSplitPaym)
        {
            vatPaymentTerms = 'S';
        }
        else
        {
            TaxTrans taxTrans;
            select firstOnly RecId, TaxCode from taxTrans
                where taxTrans.Voucher == _voucher
                    && taxTrans.TransDate == _invoiceDate;

            TaxTable taxTable = TaxTable::find(taxTrans.taxCode);
            vatPaymentTerms = taxTable.PaymentTaxCode ? 'D' : 'I';
        }

        return vatPaymentTerms;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewFileSeqNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets new sequnce number for file name.
    /// </summary>
    /// <returns>File id sequence number</returns>
    public static ElectronicMessagesFileID_IT getNewFileSeqNum()
    {
        return NumberSeq::newGetNum(InvoiceCommunicationHelper_IT::numRefItemId()).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets number sequnce reference.
    /// </summary>
    /// <returns>Number sequence reference</returns>
    public static NumberSequenceReference numRefItemId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(ElectronicMessagesFileID_IT));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATExemptNature</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Natura for Italian invoice communication GER model.
    /// </summary>
    /// <param name = "_taxTrans">Tax transaction RecId.</param>
    /// <returns>VAT exempt Natura.</returns>
    public static str getVATExemptNature(RecId _taxTrans)
    {
        const str natura_N1 = 'N1';
        const str natura_N2 = 'N2';
        const str natura_N3 = 'N3';
        const str natura_N4 = 'N4';
        const str natura_N5 = 'N5';
        const str natura_N6 = 'N6';
        const str natura_N7 = 'N7';

        str natura;
        TaxTrans taxTrans = TaxTrans::findRecId_IN(_taxTrans);
        TaxTable taxTable = TaxTable::find(taxTrans.TaxCode);
        CustVendInvoiceJour custVendInvoiceJour = taxTrans.getInvoiceJour_EE();

        if (taxTable.TaxType_IT == TaxType_IT::Zero)
        {
            natura = natura_N3;
        }
        else if (taxTrans.ReverseCharge_W
            || (custVendInvoiceJour.TableId == tableNum(VendInvoiceJour)
                && VendTable::find(custVendInvoiceJour.InvoiceAccount).IsSelfInvoiceVendor_IT == NoYes::Yes))
        {
            natura = natura_N6;
        }
        else if (taxTable.TaxCountryRegionType == CountryRegionType::EU)
        {
            natura = natura_N7;
        }
        else if (taxTable.TaxType_IT == TaxType_IT::NotSubjectToVAT)
        {
            natura = natura_N2;
        }
        else if (taxTrans.ExemptTax == NoYes::Yes)
        {
            if (TaxExemptCodeTable::find(taxTrans.ExemptCode).ExemptCodeReason_IT == TaxExemptCodeReason_IT::ExemptArt15)
            {
                natura = natura_N1;
            }
            else if (TaxExemptCodeTable::find(taxTrans.ExemptCode).ExemptCodeReason_IT == TaxExemptCodeReason_IT::EdgeRegime)
            {
                natura = natura_N5;
            }
            else
            {
                natura = natura_N4;
            }
        }
        else if (taxTable.TaxType_IT == TaxType_IT::Standard)
        {
            natura = '';
        }
        else
        {
            natura = natura_N3;
        }

        return natura;
    }

]]></Source>
			</Method>
			<Method>
				<Name>VATExemptPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets VAT exempt percentage for tax trans
    /// </summary>
    /// <param name = "_taxTrans">Tax trans recId</param>
    /// <returns>VAT exempt percentage</returns>
    public static TaxValue VATExemptPct(RecId _taxTrans)
    {
        TaxTrans taxTrans;

        select firstonly RecId, TaxCode, TransDate from taxTrans
            where taxTrans.recId == _taxTrans;

        TaxData taxData = TaxData::find(taxTrans.TaxCode, taxTrans.TransDate, 0);
        return TaxData.VATExemptPct;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>