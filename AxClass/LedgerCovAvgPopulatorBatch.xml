<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCovAvgPopulatorBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerCovAvgPopulatorBatch</c> class contains the core batch logic used by the recurring batch jobs
/// to populate the days per month tables.
/// </summary>
internal final class LedgerCovAvgPopulatorBatch
{
    private readonly int BackOffWait = RandomGenerate::construct().randomInt(50, 1000);
    private TransDate startOfMonth;
    private SysInstrumentationProgressLogger progressLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    private void run()
    {
        #OCCRetryCount

        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::CashflowAverageActivityPopulateMonth))
        {
            activityContext.addCustomProperty(CustVendInstrumentationConstants::CurrentLedger, int642Str(Ledger::current()));
            activityContext.addCustomProperty(CustVendInstrumentationConstants::CashflowAverageStartOfMonth, date2StrXpp(startOfMonth));

            try
            {
                ttsbegin;
                this.runForAllContexts();
                ttscommit;
            }
            #StandardRetryCatchBlock
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    progressLogger.logRetryOnDeadlock();

                    sleep(xSession::currentRetryCount() * BackOffWait);
                    retry;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runForAllContexts</Name>
				<Source><![CDATA[
    private void runForAllContexts()
    {
        Array contexts = LedgerCovAvgExecutionContextFactory::constructAllInstances();
        for (int i = 1; i <= contexts.lastIndex(); i++)
        {
            using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::CashflowAverageActivityPopulateMonthContext))
            {
                LedgerCovAvgIExecutionContext context = contexts.value(i);
                activityContext.addCustomProperty(CustVendInstrumentationConstants::CashflowAverageSource, tableId2Name(context.getTableBuffer().TableId));

                LedgerCovAvgPopulator::newFromContext(context).populateForMonth(startOfMonth);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void main(Args _args)
    {
        if (!CashflowInsightsActivation::isActive())
        {
            return;
        }

        LedgerCovAvgBatchArgs batchArgs = _args.parmObject() as LedgerCovAvgBatchArgs;

        Debug::assert(batchArgs != null);

        LedgerCovAvgPopulatorBatch batch = new LedgerCovAvgPopulatorBatch();
        batch.startOfMonth = batchArgs.startOfMonth;

        DataArea dataArea;
        while select id from dataArea
        {
            changecompany(dataArea.id)
            {
                batch.run();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {
        progressLogger = SysInstrumentationProgressLogger::createLogger(CustVendInstrumentationConstants::SourceNameCashflowAveragePopulator, CustVendInstrumentationConstants::InstrumentationNamespace);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>