<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdPostJournal_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class initialized to post withhold taxes for Journals.Class extends from TaxWithholdPost_IN.
/// </summary>
class TaxWithholdPostJournal_IN extends TaxWithholdPost_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowTaxWithholdUncommittedDelete</Name>
				<Source><![CDATA[
    protected boolean allowTaxWithholdUncommittedDelete()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCalculateWHTForCC</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns true if withhold taxes are applicable; otherwise false.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The LedgerJournalTrans buffer.
    /// </param>
    /// <param name="_account">
    /// The CutVendAC value.
    /// </param>
    /// <param name="_isValidCombination">
    /// boolean value if valid Combination.
    /// </param>
    /// <param name="_isVendorTransaction">
    /// boolean value if valid Transaction.
    /// </param>
    /// <returns>
    /// returns true if withhold taxes are applicable; otherwise false.
    /// </returns>
    protected boolean canCalculateWHTForCC(LedgerJournalTrans _ledgerJournalTrans,
                                           CustVendAC         _account,
                                           boolean            _isValidCombination = false,
                                           boolean            _isVendorTransaction = false)
    {
        boolean                     canCalculateWHT               = true;
        boolean                     canCalculateWHTForInvoiceCust = false;
        boolean                     canCalculateWHTForInvoiceVend = false;
        VendTable                   vendTable;
        CustTable                   custTable;
        TaxWithholdParameters_IN    taxWithholdParameter;
        boolean                     isCrossCompany = true;
        TaxInformationCustTable_IN  taxInformationCustTableLoc;
        TaxInformationVendTable_IN  taxInformationVendTableLoc;
        LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExt = _ledgerJournalTrans.ledgerJournalTransTaxExtensionIN();

        if (_isVendorTransaction)
        {
            _isValidCombination = false;
        }

        if (_isValidCombination)
        {
            canCalculateWHT = ((_ledgerJournalTrans.AccountType    == LedgerJournalACType::Cust  && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank &&  _ledgerJournalTrans.AmountCurCredit  > 0 && ledgerJournalTransTaxExt.tcsGroup)
                                ||(_ledgerJournalTrans.AccountType == LedgerJournalACType::Bank  && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust &&  _ledgerJournalTrans.AmountCurDebit   > 0 && ledgerJournalTransTaxExt.tcsGroup)
                                ||(_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend  && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank &&  _ledgerJournalTrans.AmountCurDebit   > 0 && ledgerJournalTransTaxExt.tdsGroup)
                                ||(_ledgerJournalTrans.AccountType == LedgerJournalACType::Bank  && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend &&  _ledgerJournalTrans.AmountCurCredit  > 0 && ledgerJournalTransTaxExt.tdsGroup)
                                ||(_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust  && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank &&  _ledgerJournalTrans.AmountCurDebit   > 0 && ledgerJournalTransTaxExt.tdsGroup)
                                ||(_ledgerJournalTrans.AccountType == LedgerJournalACType::Bank  && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust &&  _ledgerJournalTrans.AmountCurCredit  > 0 && ledgerJournalTransTaxExt.tdsGroup)
                                ||(_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend  && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank &&  _ledgerJournalTrans.AmountCurDebit   > 0 && ledgerJournalTransTaxExt.tdsGroup)
                                ||(_ledgerJournalTrans.AccountType == LedgerJournalACType::Bank  && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend &&  _ledgerJournalTrans.AmountCurCredit  > 0 && ledgerJournalTransTaxExt.tdsGroup)
                                ||(_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust  && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank &&  _ledgerJournalTrans.AmountCurCredit  > 0 && ledgerJournalTransTaxExt.tdsGroup)
                                ||(_ledgerJournalTrans.AccountType == LedgerJournalACType::Bank  && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust &&  _ledgerJournalTrans.AmountCurDebit   > 0 && ledgerJournalTransTaxExt.tdsGroup)

                                ||(_ledgerJournalTrans.AccountType == LedgerJournalACType::Bank  && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend &&  _ledgerJournalTrans.AmountCurCredit  > 0 && ledgerJournalTransTaxExt.tcsGroup)
                                ||(_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend  && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank &&  _ledgerJournalTrans.AmountCurDebit   > 0 && ledgerJournalTransTaxExt.tcsGroup))

                                ? true : false;
        }

        if ( _ledgerJournalTrans.AccountType         == LedgerJournalACType::Vend        &&
            _ledgerJournalTrans.OffsetAccountType   == LedgerJournalACType::Ledger      &&
            _ledgerJournalTrans.AmountCurDebit      > 0                                 &&
            (ledgerJournalTransTaxExt.tcsGroup || ledgerJournalTransTaxExt.tdsGroup)    &&
            (MainAccount::findByLedgerDimension(_ledgerJournalTrans.OffsetLedgerDimension).PostingType == LedgerPostingType::PurchCash))
        {
            canCalculateWHT = true;
        }
        else if ( _ledgerJournalTrans.AccountType         == LedgerJournalACType::Ledger      &&
                 _ledgerJournalTrans.OffsetAccountType   == LedgerJournalACType::Vend        &&
                 _ledgerJournalTrans.AmountCurCredit     > 0                                 &&
                 (ledgerJournalTransTaxExt.tcsGroup || ledgerJournalTransTaxExt.tdsGroup)    &&
                 (MainAccount::findByLedgerDimension(_ledgerJournalTrans.LedgerDimension).PostingType == LedgerPostingType::PurchCash))
        {
            canCalculateWHT = true;
        }

        changecompany(companyId)
        {
            taxWithholdParameter            = TaxWithholdParameters_IN::find();
            taxInformationVendTableLoc      = vendTable.getTaxInformationVendTable_IN();
            canCalculateWHTForInvoiceVend   = (vendTable && ((taxInformationVendTableLoc.TDSGroup && taxWithholdParameter.tdsPayment) ||(taxInformationVendTableLoc.TCSGroup && taxWithholdParameter.tcsPayment))
                                               && vendTable.TaxWithholdCalculate) ? true : false;

            custTable                       = CustTable::find(_account, false);
            taxInformationCustTableLoc      = custTable.getTaxInformationCustTable_IN();
            canCalculateWHTForInvoiceCust   = (custTable && ((taxInformationCustTableLoc.TDSGroup && taxWithholdParameter.tdsPayment) ||(taxInformationCustTableLoc.TCSGroup && taxWithholdParameter.tcsPayment))

                                   && custTable.TaxWithholdCalculate_IN) ? true : false;
        }

        if (companyId != paymcompanyId)
        {
            isCrossCompany =  TaxWithholdParameters_IN::findByCompany(paymcompanyId).CrossCompanyPayment;
        }

        canCalculateWHT    = (isCrossCompany && canCalculateWHT && (canCalculateWHTForInvoiceVend || canCalculateWHTForInvoiceCust)) ? true : false;

        return canCalculateWHT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyToPost</Name>
				<Source><![CDATA[
    protected CompanyId getCompanyToPost()
    {
        LedgerJournalTaxDocument ledgerJournalTaxDocument;

        ledgerJournalTaxDocument = taxableDocument as LedgerJournalTaxDocument;

        return ledgerJournalTaxDocument.getCompanyForJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitializationClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets initialization class.
    /// </summary>
    /// <returns>
    /// The taxable document.
    /// </returns>
    protected Object getInitializationClass()
    {
        return taxableDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original heading rec id.
    /// </summary>
    /// <returns>
    /// The original heading rec id.
    /// </returns>
    protected RefRecId getOriginalHeadingRecId()
    {
        LedgerJournalTaxDocument ledgerJournalTaxDocument;

        ledgerJournalTaxDocument = taxableDocument as LedgerJournalTaxDocument;

        if (ledgerJournalTaxDocument.parmIntercompanyJournal())
        {
            changecompany (ledgerJournalTaxDocument.getOriginalCompany())
            {
                return LedgerJournalTable::find(ledgerJournalTaxDocument.getOriginalJournalNum(), false).RecId;
            }
        }
        else
        {
            return taxableDocument.getSourceHeader().RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original heading table id.
    /// </summary>
    /// <returns>
    /// The original heading table id.
    /// </returns>
    protected RefTableId getOriginalHeadingTableId()
    {
        return taxableDocument.getSourceHeader().TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingRecId</Name>
				<Source><![CDATA[
    RefRecId headingRecId()
    {
        return this.getOriginalHeadingRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingTableId</Name>
				<Source><![CDATA[
    RefTableId headingTableId()
    {
        return this.getOriginalHeadingTableId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalNum</Name>
				<Source><![CDATA[
    LedgerJournalId journalNum()
    {
        LedgerJournalTable ledgerJournalTable;

        ledgerJournalTable = taxableDocument.getSourceHeader();

        return ledgerJournalTable.JournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of the <c>TaxWithholdPostJournal_IN</c> class.
    /// </summary>
    /// <param name="_post">
    /// Yes if the instance will be post.
    /// </param>
    /// <param name="_initializationClass">
    /// The initialization class.
    /// </param>
    /// <param name="_tmpTaxWithholdWorkTrans">
    /// The temporary tax withhold work transaction.
    /// </param>
    public void new(
        NoYes                       _post,
        Object                      _initializationClass,
        TmpTaxWithholdWorkTrans_IN  _tmpTaxWithholdWorkTrans = null)
    {
        taxableDocument = _initializationClass as TaxableDocument;
        if (taxableDocument == null)
        {
            throw error("@SYS95118");
        }

        post                 = _post;
        taxWithholdWorkTrans = _tmpTaxWithholdWorkTrans;

        taxModuleType        = TaxModuleType::Voucher;

        headingTableId       = taxableDocument.getJournalizedDocument().TableId;
        headingRecId         = taxableDocument.getJournalizedDocument().RecId;
        origHeadingTableId   = taxableDocument.getSourceHeader().TableId;
        origHeadingRecId     = taxableDocument.getSourceHeader().RecId;

        if (!headingTableId || !headingRecId)
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideVoucherOnPost</Name>
				<Source><![CDATA[
    protected boolean overrideVoucherOnPost()
    {
        return (companyId != paymcompanyId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    protected void post(
        LedgerPostingController _ledgerPostingController,
        TaxWithholdTrans_IN     _taxWithholdTrans,
        TaxAmount               _taxAmount,
        CurrencyExchangeHelper  _exchRateHelper,
        LedgerDimensionAccount  _ledgerDimension)
    {
        LedgerJournalTrans  ledgerJournalTrans;
        SpecTrans           specTransLoc, specTransUpdate;
        boolean             isPaymentProposalPerAccount;
        boolean             isInvoiceAndPaymentCmpSame = false;
        boolean             checkStatus;
        LedgerVoucherTransObject ledgerVoucherTransObject;
        TaxWithholdCodeType_IN   taxWithholdType;
        LedgerPostingType        ledgerPostingTypeLoc;

        taxWithholdType = TaxWithholdTable::find(_taxWithholdTrans.TaxWithholdCode).TaxType_IN;

        if (taxWithholdType == TaxWithholdCodeType_IN::TDS)
        {
            ledgerPostingTypeLoc = LedgerPostingType::TDS_IN;
        }
        else
        {
            ledgerPostingTypeLoc = LedgerPostingType::TCS_IN;
        }

        if (_taxWithholdTrans.sourceTableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans = ledgerJournalTrans::findRecId(_taxWithholdTrans.sourceRecId, false);

            while select specTransLoc
                where specTransLoc.SpecRecId == ledgerJournalTrans.RecId
                   && specTransLoc.SpecCompany == curext()
            {
                _ledgerPostingController.getJournal().parmAllWHTInvoiceCompany_IN(TaxWithholdCalculation_IN::getVendorInformation(specTransLoc));

                if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger && !ledgerJournalTrans.parmOffsetAccount())
                {
                    ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Bank;
                    isPaymentProposalPerAccount = true;
                }
                if (specTransLoc.SpecCompany == specTransLoc.RefCompany && !isPaymentProposalPerAccount)
                {
                    isInvoiceAndPaymentCmpSame = true;
                    specTransUpdate.data(specTransLoc);
                }
                else
                {
                    this.setInvoiceAndPaymentData(specTransLoc, ledgerJournalTrans);
                    //For Advance Payment of centralized Payment...
                    this.postCentralizedPayment(_ledgerPostingController, _taxWithholdTrans, _taxAmount, _exchRateHelper, _ledgerDimension);
                }
                checkStatus = false;
            }

            // IF Invoice And Payment Company are Same then post Transaction as per 4.0 Sp2...
            if (isInvoiceAndPaymentCmpSame && specTransUpdate.RecId != 0)
            {
                this.setInvoiceAndPaymentData(specTransUpdate, ledgerJournalTrans);
                this.setSpecTransBuffer(specTransUpdate);
                ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(_ledgerPostingController.getReference(),
                                                                                ledgerPostingTypeLoc,
                                                                                _ledgerDimension,
                                                                                _taxWithholdTrans.CurrencyCode,
                                                                                _taxAmount,
                                                                                _exchRateHelper);

                // If TaxWithholdTrans_IN exists, create the relationship between TaxWithholdTrans_IN and LedgerEntry for the tax amount
                if (_taxWithholdTrans)
                {
                    ledgerVoucherTransObject.addTaxWHTTransRelationship_IN(_taxWithholdTrans.RecId, TaxTransRelationshipType::Tax);
                }
            }
            else if (checkStatus)
            {
                this.setInvoiceAndPaymentData(null, ledgerJournalTrans, ledgerJournalTrans.OffsetCompany);

                _ledgerPostingController.getJournal().parmAllWHTInvoiceCompany_IN(TaxWithholdCalculation_IN::getVendorInformation(null, ledgerJournalTrans, ledgerJournalTrans.OffsetCompany));

                // IF Invoice And Payment Company are Same then post Transaction as per 4.0 Sp2...
                if (!isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvanced)) || (ledgerJournalTrans.Company == ledgerJournalTrans.OffsetCompany))
                {
                    ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(_ledgerPostingController.getReference(),
                                                                                ledgerPostingTypeLoc,
                                                                                _ledgerDimension,
                                                                                _taxWithholdTrans.CurrencyCode,
                                                                                _taxAmount,
                                                                                _exchRateHelper);
                }
                else
                {   //For Advance Payment of centralized Payment...
                    this.postCentralizedPayment(_ledgerPostingController, _taxWithholdTrans, _taxAmount, _exchRateHelper, _ledgerDimension);
                }
            }
            else
            {
                ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(_ledgerPostingController.getReference(),
                                                                                ledgerPostingTypeLoc,
                                                                                _ledgerDimension,
                                                                                _taxWithholdTrans.CurrencyCode,
                                                                                _taxAmount,
                                                                                _exchRateHelper);

                // If TaxWithholdTrans_IN exists, create the relationship between TaxWithholdTrans_IN and LedgerEntry for the tax amount
                if (_taxWithholdTrans)
                {
                    ledgerVoucherTransObject.addTaxWHTTransRelationship_IN(_taxWithholdTrans.RecId, TaxTransRelationshipType::Tax);
                }
            }
            _ledgerPostingController.addTrans(ledgerVoucherTransObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCentralizedPayment</Name>
				<Source><![CDATA[
    private void postCentralizedPayment(
    LedgerPostingController _ledgerPostingController,
        TaxWithholdTrans_IN     _taxWithholdTrans,
        TaxAmount               _taxAmount,
        CurrencyExchangeHelper  _exchRateHelper,
        LedgerDimensionAccount  _ledgerDimension)
    {
        boolean isInterCompanyTransaction;
        int     sign;
        LedgerInterCompany              interCompany;
        LedgerDimensionDefaultAccount   interCompanyLedgerDimension;
        LedgerVoucherTransObject        ledgerVoucherTransObject;

        if (companyId != paymcompanyId && (journalLineCompany == paymcompanyId))
        {
            isInterCompanyTransaction = true;
            changecompany(paymcompanyId)
            {
                if (_taxWithholdTrans.VendAccount)
                {
                    sign = -1;
                }
                if (_taxWithholdTrans.CustAccount)
                {
                    sign = -1;
                }

                if (_taxWithholdTrans.VendAccount && _taxWithholdTrans.TaxType == TaxWithholdCodeType_IN::TCS)
                {
                    sign = 1;
                }

                if (_taxWithholdTrans.CustAccount && _taxWithholdTrans.TaxType == TaxWithholdCodeType_IN::TDS)
                {
                    sign = 1;
                }

                interCompany        = TaxWithholdCalculation_IN::findLedgerInterCompany(paymcompanyId, companyId);

                if (_taxWithholdTrans.CustAccount)
                {
                    interCompanyLedgerDimension = interCompany.OriginatingCreditLedgerDimension;
                }
                else
                {
                    interCompanyLedgerDimension = interCompany.OriginatingDebitLedgerDimension;
                }

                _exchRateHelper.parmExchangeDate(_taxWithholdTrans.TransDate);

                ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(_ledgerPostingController.getJournal().findLedgerVoucherObject(),
                                                                                                LedgerPostingType::InterCompany,
                                                                                                LedgerDimensionFacade::serviceCreateLedgerDimension(interCompanyLedgerDimension),
                                                                                                _taxWithholdTrans.CurrencyCode,
                                                                                                _taxAmount * sign,
                                                                                                _exchRateHelper);
            }
        }
        else if ((journalLineCompany != paymcompanyId && journalLineCompany != companyId )  && !isInterCompanyTransaction)
        {
            isInterCompanyTransaction = true;
            if (journalLineCompany)
            {
                changecompany(journalLineCompany)
                {
                    if (_taxWithholdTrans.VendAccount)
                    {
                        sign = -1;
                    }

                    if (_taxWithholdTrans.CustAccount)
                    {
                        sign = -1;
                    }
                    interCompany        = TaxWithholdCalculation_IN::findLedgerInterCompany(journalLineCompany, companyId);

                    if (_taxWithholdTrans.CustAccount)
                    {
                        interCompanyLedgerDimension = interCompany.OriginatingCreditLedgerDimension;
                    }
                    else
                    {
                        interCompanyLedgerDimension = interCompany.OriginatingDebitLedgerDimension;
                    }
                    ledgerVoucherTransObject =  LedgerVoucherTransObject::newTransactionAmountDefault(_ledgerPostingController.getJournal().findLedgerVoucherObject(),
                                                                                                    LedgerPostingType::InterCompany,
                                                                                                    LedgerDimensionFacade::serviceCreateLedgerDimension(interCompanyLedgerDimension),
                                                                                                    _taxWithholdTrans.CurrencyCode,
                                                                                                    _taxAmount * sign,
                                                                                                    _exchRateHelper);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postFindPostingReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines if tax posting should attempt to find the correct posting reference
    ///   using the voucher and transdate on the tax line.
    /// </summary>
    /// <returns>
    ///   true if tax should find the posting reference; otherwise, false.
    /// </returns>
    protected boolean postFindPostingReference()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postToTaxWithHoldTrans</Name>
				<Source><![CDATA[
    protected void postToTaxWithHoldTrans(LedgerPostingController _ledgerPostingController, TaxWithholdTrans_IN _taxWithholdTrans, CurrencyExchangeHelper _exchangeRateHelper, container _taxWithholdData)
    {
        LedgerJournalTrans              ledgerJournalTransLoc;
        TaxWithholdTable                taxWithholdTable;
        TaxWithholdTaxJournalTrans_IN   taxWithholdTaxJournalTrans;
        DirPartyTable                   dirParty;
        TransTaxInformation             transTaxInformation;

        taxWithholdTable = TaxWithholdTable::find(_taxWithholdTrans.TaxWithholdCode);

        select firstOnly crossCompany ledgerJournalTransLoc
            where ledgerJournalTransLoc.RecId == _taxWithholdTrans.SourceRecId
                && ledgerJournalTransLoc.TableId == _taxWithholdTrans.SourceTableId;
        select firstOnly crossCompany RecId, taxWithholdAccountType from taxWithholdTaxJournalTrans
            where taxWithholdTaxJournalTrans.LedgerJournalTrans == ledgerJournalTransLoc.RecId;

        _taxWithholdTrans.LineNum    = ledgerJournalTransLoc.LineNum;
        _taxWithholdTrans.JournalNum = ledgerJournalTransLoc.JournalNum;
        if (_taxWithholdTrans.TransactionStatus != TaxWithholdTransactionstatus_IN::Adjusted)
        {
            _taxWithholdTrans.RecoverableAccount = TaxWithholdCalculation_IN::checkRecoverableAccount(ledgerJournalTransLoc);
        }
        else if (taxWithholdTaxJournalTrans.RecId != 0)
        {
            _taxWithholdTrans.RecoverableAccount = (taxWithholdTaxJournalTrans.TaxWithholdAccountType == TaxWithholdDirection_IN::IncomingTax) ? NoYes::Yes
                                                                                                                                               : NoYes::No;
        }
        if (_taxWithholdTrans.VendAccount)
        {
            dirParty = DirPartyTable::findRec(VendTable::find(_taxWithholdTrans.VendAccount).Party);
        }
        else
        {
            dirParty = DirPartyTable::findRec(CustTable::find(_taxWithholdTrans.CustAccount).Party);
        }
        _taxWithholdTrans.Nameofdeductee = dirParty.Name;

        transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(ledgerJournalTransLoc);

        _taxWithholdTrans.TaxWithholdRegNumber = transTaxInformation.TaxWithholdTAN;

        // For ledjer journal invoice, when parameter Tax liability is enabled, post interim account to tax withhold trans;
        if (!LedgerJournalTrans::isCustomerPaymentByAccounts(ledgerJournalTransLoc) && TaxWithholdGroupHeading::find(_taxWithholdTrans.TaxWithholdGroup).TaxLiabilityOnPayment_IN)
        {
            _taxWithholdTrans.IsTaxInterim = NoYes::Yes;
        }

        super(_ledgerPostingController, _taxWithholdTrans, _exchangeRateHelper, _taxWithholdData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    public recId sourceRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    public tableId sourceTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method is the main entry point to execute transaction-specific logic and to post to
    ///    <c>TaxWithholdTrans</c> table and to post withhold tax amounts to the Ledger.
    /// </summary>
    /// <param name="_ledgerPostingController">
    ///    The ledger posting controller to use for ledger posting.
    /// </param>
    /// <returns>
    ///    The total withhold tax amount.
    /// </returns>
    public TaxAmount updateAndPost(LedgerPostingController _ledgerPostingController)
    {
        TaxAmountCur    taxAmount;

        if (!this.existsTax())
        {
            return 0;
        }

        this.initLedgerPosting(_ledgerPostingController);

        if (post)
        {
            this.saveAndPostWHT(_ledgerPostingController);

            if (_ledgerPostingController.getReference())
            {
                voucher = _ledgerPostingController.getReference().parmVoucher();
                taxDate = _ledgerPostingController.getReference().parmTransDate();
                taxAmount = TaxWithholdPost_IN::taxTotalVoucherDate(voucher, taxDate);
            }
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the instance of the <c>TaxWithholdPostJournal_IN</c> class.
    /// </summary>
    /// <returns>
    /// true, if the AmountOrigin is greater than the withhold tax calculated, otherwise false.
    /// </returns>
    protected boolean validate()
    {
        TaxWithholdUncommitted_IN   taxWithholdUncommitted_IN;
        AmountCur                   amountOriginCur, totalTaxAmountCur;
        LedgerJournalTrans          ledgerJournalTransloc;
        LedgerJournalTable          ledgerJournalTableloc;
        boolean                     isTDSInvoiceJournal;

        select sum(SourceTaxAmountCur) from taxWithholdUncommitted_IN
            where  taxWithholdUncommitted_IN.HeadingTableId == headingTableId
                && taxWithholdUncommitted_IN.HeadingRecId   == headingRecId;

        totalTaxAmountCur    = abs(taxWithholdUncommitted_IN.sourceTaxAmountCur);

        select firstonly JournalNum from ledgerJournalTableloc
            where ledgerJournalTableloc.RecId == headingRecId;

        select sum(AmountCurDebit), sum(AmountCurCredit) from ledgerJournalTransloc
            where ledgerJournalTransloc.JournalNum == ledgerJournalTableloc.JournalNum;

        amountOriginCur = ledgerJournalTransloc.AmountCurDebit + ledgerJournalTransloc.AmountCurCredit;

        while select ledgerJournalTransloc
            where ledgerJournalTransloc.JournalNum == ledgerJournalTableloc.JournalNum
        {
            LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExt = ledgerJournalTransloc.ledgerJournalTransTaxExtensionIN();
            amountOriginCur += TaxUncommitted::getIndirectTaxAmtForWHTSourceBaseCur_IN(ledgerJournalTransloc.TableId,
                                                                                        ledgerJournalTransloc.RecId,
                                                                                        ledgerJournalTransloc.TaxItemGroup,
                                                                                        ledgerJournalTransloc.parmAccount(),
                                                                                        ledgerJournalTransTaxExt.TDSGroup ? ledgerJournalTransTaxExt.TDSGroup : ledgerJournalTransTaxExt.TCSGroup);
            if(ledgerJournalTransTaxExt.TDSGroup && !ledgerJournalTransloc.isPaymentJournal_IN())
            {
                isTDSInvoiceJournal = true;
            }
        }

        if (totalTaxAmountCur > amountOriginCur && !isTDSInvoiceJournal)
        {
            throw error (strfmt("@GLS5855", "@SYS81689"));
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>