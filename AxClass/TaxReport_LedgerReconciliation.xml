<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReport_LedgerReconciliation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxReport_LedgerReconciliation</c> class is used to tax report for ledger reconciliation.
/// </summary>
public class TaxReport_LedgerReconciliation extends LedgerReconciliation
{
    TaxLedgerReconciliationTmp taxTransTmp;
    TaxLedgerReconciliationTmp taxLedgerReconciliationTmp;
    TaxLedgerReconciliationTmp taxLedgerReconciliationTmpCZ;
    TaxLedgerReconciliationTmp taxSummaryTable;
    TaxLedgerReconciliationTmp tmpTable;

    Set taxLedgerAccountsSet;

    // <GEECZ>
    boolean includeVATRegisterDateDetail;
    boolean includeTaxDirectionDetail;
    boolean includeTaxAmountOriginDetail;
    boolean isCZ;
    // </GEECZ>
    #ISOCountryRegionCodes
    VendOverdueVATJournalTable_W vendOverdueVATJournalTable_W;
    boolean isPrintTaxReversed = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL])
                                                    && TaxOverdueVendorVATJournalFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateTotalAndGrandTotals</Name>
				<Source><![CDATA[
    private void calculateTotalAndGrandTotals(boolean _isCZ)
    {
        delete_from tmpTable;

        if (!_isCZ)
        {
            // group amounts for total ledger amount
            insert_recordset tmpTable
            (
                TotalLedgerAmountMST,
                MainAccountId,
                IsCorrection
            )
            select sum(AccountingCurrencyAmount), MainAccountId, IsCorrection from ledgerReconciliationLedgerTmp
                group by MainAccountId, IsCorrection;

            select sum(AccountingCurrencyAmount), IsCorrection from ledgerReconciliationLedgerTmp
                group by IsCorrection;

            update_recordSet taxLedgerReconciliationTmp setting
                TotalLedgerAmountMST = tmpTable.TotalLedgerAmountMST,
                GrandTotalLedgerAmountMST = ledgerReconciliationLedgerTmp.AccountingCurrencyAmount
            join tmpTable
                where taxLedgerReconciliationTmp.MainAccountId == tmpTable.MainAccountId
                    && taxLedgerReconciliationTmp.IsCorrection == tmpTable.IsCorrection;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerReconcileAccountsTmp</Name>
				<Source><![CDATA[
    protected void createLedgerReconcileAccountsTmp()
    {
        DimensionAttributeValueCombination  davc;
        MainAccount mainAccount;
        TaxTable taxTable;
        TaxLedgerAccountGroup taxLedgerAccountGroup;
        boolean hasTaxLedgerDimension = false;
        boolean hasMainAccount = (fromMainAccount || toMainAccount);

        if (hasMainAccount)
        {
            if (!toMainAccount)
            {
                select firstonly MainAccountId
                    from mainAccount
                        order by MainAccountId desc;
                toMainAccount = mainAccount.MainAccountId;
            }

            insert_recordset ledgerReconcileAccountsTmp
            (
                MainAccount
            )
            select taxTable
                join taxLedgerAccountGroup
                    where taxTable.TaxAccountGroup == taxLedgerAccountGroup.TaxAccountGroup
                    join MainAccount from davc
                        group by MainAccount
                            where davc.RecId == taxLedgerAccountGroup.TaxIncomingLedgerDimension
                                || davc.RecId == taxLedgerAccountGroup.TaxOutgoingLedgerDimension
                                || davc.RecId == taxLedgerAccountGroup.TaxUseTaxLedgerDimension
                                || davc.RecId == taxLedgerAccountGroup.TaxFreePercentLedgerDimension
                                || davc.RecId == taxLedgerAccountGroup.TaxOffsetUseTaxLedgerDimension
                        join mainAccount
                            where mainAccount.RecId == davc.MainAccount
                                && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                                && mainAccount.MainAccountId >= fromMainAccount
                                && mainAccount.MainAccountId <= toMainAccount;
        }
        else
        {
            // Insert MainAccounts for Incoming Tax Accounts.
            insert_recordset ledgerReconcileAccountsTmp
            (
                MainAccount
            )
                select taxTable
                join taxLedgerAccountGroup
                    where taxTable.TaxAccountGroup == taxLedgerAccountGroup.TaxAccountGroup
                join MainAccount from davc
                    group by MainAccount
                        where davc.RecId == taxLedgerAccountGroup.TaxIncomingLedgerDimension
                            || davc.RecId == taxLedgerAccountGroup.TaxOutgoingLedgerDimension
                            || davc.RecId == taxLedgerAccountGroup.TaxUseTaxLedgerDimension
                            || davc.RecId == taxLedgerAccountGroup.TaxFreePercentLedgerDimension
                            || davc.RecId == taxLedgerAccountGroup.TaxOffsetUseTaxLedgerDimension
                join mainAccount
                    where mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxTransactions</Name>
				<Source><![CDATA[
    private void insertTaxTransactions()
    {
        MainAccount mainAccount;

        //Set the toMainAccount parameter to the largest current value if it is not set to ensure proper ranging.
        if (!toMainAccount)
        {
            select firstonly MainAccountId from mainAccount
                order by MainAccountId desc;
            toMainAccount = mainAccount.MainAccountId;
        }

        // Add the two methods to insert tax transations for tax origin of tax reporting after settlement.
        // The tax transations with mutli account entries.
        this.insertTaxTransOffsetAccountForTaxReporting();

        // Insert Tax Transactions with a Tax Transaction Relationship Type of Tax Reversed (Offset Account).
        this.insertTaxTransOffsetAccountForTaxReversed();

        // Insert Tax Transactions with a Tax Transaction Relationship Type of Use Tax Payable (Offset Account).
        this.insertTaxTransNonSourceDocOffsetAccount();

        // Add the two methods to insert tax transations for tax origin of tax reporting after settlement.
        // The tax transations with mutli account entries.
        this.insertTaxTransLedgerAccountForTaxReporting();

        // Insert Tax Transactions with a Tax Transaction Relationship Type of Tax (Ledger Account).
        this.insertTaxTransNonSourceDocLedgerAccount();
        this.insertTaxTransLedgerAccountForTaxReversed();

        // Insert Tax Trans records that are from Source Document transaction.
        this.insertTaxTransFromSourceDocument();

        if (!this.parmIncludeDetails())
        {
            this.mergeTaxTransactions();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxTransFromSourceDocument</Name>
				<Source><![CDATA[
    private void insertTaxTransFromSourceDocument()
    {
        TaxTrans taxTrans;
        TaxTable taxTable;
        SubledgerJournalEntry subledgerJournalEntry;
        MainAccount mainAccount;
        DimensionAttributeValueCombination davc;
        AccountingDistribution accountingDistribution;
        SubledgerJournalAccountEntry subledgerJournalAccountEntry;
        SubledgerJournalAccountEntryDistribution subledgerJournalAccountEntryDistribution;
        TaxTrans_W taxTrans_W;
        GeneralJournalAccountEntry  generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;

        if (this.parmIncludeDetails())
        {
            if (isCZ)
            {
                insert_recordset taxTransTmp
                (
                    AccountingDate,
                    Voucher,
                    CustVendAC,
                    TaxDirection,
                    AmountMST,
                    VatRegisterDate,
                    TaxAccountName,
                    TaxAmountMST,
                    IsCorrection,
                    LedgerJournalId,
                    MainAccountId,
                    MainAccountName
                )
                select TransDate, Voucher, TaxCode, TaxDirection, sum(TaxBaseAmount) from taxTrans
                    group by TransDate, Voucher, TaxCode, TaxDirection
                        where taxTrans.Voucher >= fromVoucher
                            && taxTrans.Voucher <= toVoucher
                            && (taxTrans.TaxDirection == TaxDirection::IncomingTax
                            || taxTrans.TaxDirection == TaxDirection::OutgoingTax
                            || taxTrans.TaxDirection == TaxDirection::UseTax)
                            && taxTrans.SourceDocumentLine != 0
                            && taxTrans.TaxOrigin != TaxOrigin::Payment
                            && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
                            && taxTrans.TaxOrigin != TaxOrigin::CashDisc
                join VatDueDate_W from taxTrans_W
                    group by VatDueDate_W
                    where taxTrans_W.TaxTrans == taxTrans.RecId
                        && taxTrans_W.VatDueDate_W >= fromDate
                        && taxTrans_W.VatDueDate_W <= toDate
                join TaxName from taxTable
                    group by TaxName
                        where taxTrans.TaxCode == taxTable.TaxCode
                join accountingDistribution
                    where (accountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                            || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxVariance
                            || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverable
                            || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverableVariance
                            || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasure
                            || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasureNonRecoverable)
                        && taxTrans.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                join sum(AccountingCurrencyAmount) from subledgerJournalAccountEntryDistribution
                    where subledgerJournalAccountEntryDistribution.AccountingDistribution == accountingDistribution.RecId
                join IsCorrection from subledgerJournalAccountEntry
                    group by IsCorrection
                        where subledgerJournalAccountEntry.RecId == subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry
                            // skip encumbrance
                            && (subledgerJournalAccountEntry.PostingType != LedgerPostingType::PurchOrder
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::VendBalance
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::CustBalance
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::PurchConsump
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitDebit
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitCredit)
                            // Show tax monetary amount for tax and use tax payable
                            && (((accountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                                 || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxVariance
                                 || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasure)
                                 && (((taxTrans.TaxAmount && accountingDistribution.TransactionCurrencyAmount)
                                     && ((accountingDistribution.TransactionCurrencyAmount > 0
                                             && subledgerJournalAccountEntry.AccountingCurrencyAmount > 0)
                                         || (accountingDistribution.TransactionCurrencyAmount < 0
                                             && subledgerJournalAccountEntry.AccountingCurrencyAmount < 0)))))
                                // Show tax nonrecoverable monetary amount only for use tax payable
                                || ((accountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                                    || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxVariance
                                    || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasure
                                    || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverable
                                    || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverableVariance
                                    || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasureNonRecoverable)
                                    && taxTrans.TaxDirection == TaxDirection::UseTax
                                    && (((taxTrans.TaxAmount && accountingDistribution.TransactionCurrencyAmount)
                                          && ((accountingDistribution.TransactionCurrencyAmount < 0
                                                  && subledgerJournalAccountEntry.AccountingCurrencyAmount > 0)
                                              || (accountingDistribution.TransactionCurrencyAmount > 0
                                                  && subledgerJournalAccountEntry.AccountingCurrencyAmount < 0))))))
                join JournalNumber from subledgerJournalEntry
                    group by JournalNumber
                        where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId
                join davc
                    where subledgerJournalAccountEntry.LedgerDimension == davc.RecId
                join MainAccountId, Name from mainAccount
                    group by MainAccountId, Name
                        where mainAccount.RecId == davc.MainAccount
                            && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                            && mainAccount.MainAccountId >= fromMainAccount
                            && mainAccount.MainAccountId <= toMainAccount;
            }
            else
            {
                // Assign TaxAmountMST value from taxTransGeneralJournalAccountEntry when the transaction type is payment/reversed or cash discount.
                TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
                // Insert without subledger entry
                insert_recordset taxTransTmp
                (
                    AccountingDate,
                    Voucher,
                    CustVendAC,
                    TaxAccountName,
                    TaxAmountMST,
                    LedgerJournalId,
                    MainAccountId,
                    MainAccountName
                )
                select TransDate, Voucher, TaxCode from taxTrans
                    group by TransDate, Voucher, TaxCode
                    where taxTrans.TransDate >= fromDate
                        && taxTrans.TransDate <= toDate
                        && taxTrans.Voucher >= fromVoucher
                        && taxTrans.Voucher <= toVoucher
                        && (taxTrans.TaxDirection == TaxDirection::IncomingTax
                            || taxTrans.TaxDirection == TaxDirection::OutgoingTax
                            || taxTrans.TaxDirection == TaxDirection::UseTax)
                        && taxTrans.SourceDocumentLine != 0
                        && (taxTrans.TaxOrigin == TaxOrigin::Payment
                            || taxTrans.TaxOrigin == TaxOrigin::TaxReversed
                            || taxTrans.TaxOrigin == TaxOrigin::CashDisc)
                join TaxName from taxTable
                    group by TaxName
                    where taxTrans.TaxCode == taxTable.TaxCode
                join sum(AccountingCurrencyAmount) from taxTransGeneralJournalAccountEntry
                    where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                        && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax
                        && taxTransGeneralJournalAccountEntry.SubledgerJournalAccountEntry == 0
                join generalJournalAccountEntry
                    where taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                join JournalNumber from generalJournalEntry
                    group by JournalNumber
                    where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                join davc
                    where taxTransGeneralJournalAccountEntry.LedgerDimension == davc.RecId
                join MainAccountId, Name from mainAccount
                    group by MainAccountId, Name
                    where mainAccount.RecId == davc.MainAccount
                        &&  mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                        &&  mainAccount.MainAccountId >= fromMainAccount
                        &&  mainAccount.MainAccountId <= toMainAccount;

                // Note: Please apply the same change in the if/else statements except notexists join clause
                // to keep the logic sychronized when applying any new change.
                if (isPrintTaxReversed)
                {
                    insert_recordset taxTransTmp
                    (
                        AccountingDate,
                        Voucher,
                        CustVendAC,
                        TaxAccountName,
                        TaxAmountMST,
                        SubledgerJourId,
                        LedgerJournalId,
                        MainAccountId,
                        MainAccountName
                    )
                    select TransDate, Voucher, TaxCode from taxTrans
                        group by TransDate, Voucher, TaxCode
                            where taxTrans.TransDate >= fromDate
                                && taxTrans.TransDate <= toDate
                                && taxTrans.Voucher >= fromVoucher
                                && taxTrans.Voucher <= toVoucher
                                && (taxTrans.TaxDirection == TaxDirection::IncomingTax
                                || taxTrans.TaxDirection == TaxDirection::OutgoingTax
                                || taxTrans.TaxDirection == TaxDirection::UseTax)
                                && taxTrans.SourceDocumentLine != 0
                                && taxTrans.TaxOrigin != TaxOrigin::Payment
                                && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
                                && taxTrans.TaxOrigin != TaxOrigin::CashDisc
                    join TaxName from taxTable
                        group by TaxName
                            where taxTrans.TaxCode == taxTable.TaxCode
                    join accountingDistribution
                        where (accountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                                || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxVariance
                                || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverable
                                || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverableVariance
                                || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasure
                                || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasureNonRecoverable)
                            && taxTrans.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                    join sum(AccountingCurrencyAmount) from subledgerJournalAccountEntryDistribution
                            where subledgerJournalAccountEntryDistribution.AccountingDistribution == accountingDistribution.RecId
                    join subledgerJournalAccountEntry
                        where subledgerJournalAccountEntry.RecId == subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry
                            // skip encumbrance
                        && (subledgerJournalAccountEntry.PostingType != LedgerPostingType::PurchOrder
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::VendBalance
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::CustBalance
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::PurchConsump
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitDebit
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitCredit)
                                // Show tax monetary amount for tax and use tax payable
                        && (((accountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                                     || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxVariance
                                     || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasure)
                                     && (((taxTrans.TaxAmount && accountingDistribution.TransactionCurrencyAmount)
                                         && ((accountingDistribution.TransactionCurrencyAmount > 0
                                                 && subledgerJournalAccountEntry.AccountingCurrencyAmount > 0)
                                             || (accountingDistribution.TransactionCurrencyAmount < 0
                                                 && subledgerJournalAccountEntry.AccountingCurrencyAmount < 0)))))
                                    // Show tax nonrecoverable monetary amount only for use tax payable
                        || ((accountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                                        || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxVariance
                                        || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasure
                                        || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverable
                                        || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverableVariance
                                        || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasureNonRecoverable)
                                        && taxTrans.TaxDirection == TaxDirection::UseTax
                                        && (((taxTrans.TaxAmount && accountingDistribution.TransactionCurrencyAmount)
                                              && ((accountingDistribution.TransactionCurrencyAmount < 0
                                                      && subledgerJournalAccountEntry.AccountingCurrencyAmount > 0)
                                                  || (accountingDistribution.TransactionCurrencyAmount > 0
                                                      && subledgerJournalAccountEntry.AccountingCurrencyAmount < 0))))))
                    join JournalNumber from subledgerJournalEntry
                        group by JournalNumber
                            where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId
                    join generalJournalAccountEntry
                        where generalJournalAccountEntry.RecId == subledgerJournalAccountEntry.GeneralJournalAccountEntry
                    join JournalNumber from generalJournalEntry
                        group by JournalNumber
                            where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    join davc
                        where subledgerJournalAccountEntry.LedgerDimension == davc.RecId
                    join MainAccountId, Name from mainAccount
                        group by MainAccountId, Name
                            where mainAccount.RecId == davc.MainAccount
                                && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                                && mainAccount.MainAccountId >= fromMainAccount
                                && mainAccount.MainAccountId <= toMainAccount
                    notexists join vendOverdueVATJournalTable_W
                        where vendOverdueVATJournalTable_W.LedgerVoucher == taxTrans.Voucher
                            && vendOverdueVATJournalTable_W.TransDate == taxTrans.TransDate;
                }
                else
                {
                    insert_recordset taxTransTmp
                    (
                        AccountingDate,
                        Voucher,
                        CustVendAC,
                        TaxAccountName,
                        TaxAmountMST,
                        SubledgerJourId,
                        LedgerJournalId,
                        MainAccountId,
                        MainAccountName
                    )
                    select TransDate, Voucher, TaxCode from taxTrans
                        group by TransDate, Voucher, TaxCode
                            where taxTrans.TransDate >= fromDate
                                && taxTrans.TransDate <= toDate
                                && taxTrans.Voucher >= fromVoucher
                                && taxTrans.Voucher <= toVoucher
                                && (taxTrans.TaxDirection == TaxDirection::IncomingTax
                                || taxTrans.TaxDirection == TaxDirection::OutgoingTax
                                || taxTrans.TaxDirection == TaxDirection::UseTax)
                                && taxTrans.SourceDocumentLine != 0
                                && taxTrans.TaxOrigin != TaxOrigin::Payment
                                && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
                                && taxTrans.TaxOrigin != TaxOrigin::CashDisc
                    join TaxName from taxTable
                        group by TaxName
                            where taxTrans.TaxCode == taxTable.TaxCode
                    join accountingDistribution
                        where (accountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                                || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxVariance
                                || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverable
                                || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverableVariance
                                || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasure
                                || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasureNonRecoverable)
                            && taxTrans.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                    join sum(AccountingCurrencyAmount) from subledgerJournalAccountEntryDistribution
                            where subledgerJournalAccountEntryDistribution.AccountingDistribution == accountingDistribution.RecId
                    join subledgerJournalAccountEntry
                        where subledgerJournalAccountEntry.RecId == subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry
                            // skip encumbrance
                            && (subledgerJournalAccountEntry.PostingType != LedgerPostingType::PurchOrder
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::VendBalance
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::CustBalance
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::PurchConsump
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitDebit
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitCredit)
                                // Show tax monetary amount for tax and use tax payable
                                && (((accountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                                     || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxVariance
                                     || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasure)
                                     && (((taxTrans.TaxAmount && accountingDistribution.TransactionCurrencyAmount)
                                         && ((accountingDistribution.TransactionCurrencyAmount > 0
                                                 && subledgerJournalAccountEntry.AccountingCurrencyAmount > 0)
                                             || (accountingDistribution.TransactionCurrencyAmount < 0
                                                 && subledgerJournalAccountEntry.AccountingCurrencyAmount < 0)))))
                                    // Show tax nonrecoverable monetary amount only for use tax payable
                                    || ((accountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                                        || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxVariance
                                        || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasure
                                        || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverable
                                        || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverableVariance
                                        || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasureNonRecoverable)
                                        && taxTrans.TaxDirection == TaxDirection::UseTax
                                        && (((taxTrans.TaxAmount && accountingDistribution.TransactionCurrencyAmount)
                                              && ((accountingDistribution.TransactionCurrencyAmount < 0
                                                      && subledgerJournalAccountEntry.AccountingCurrencyAmount > 0)
                                                  || (accountingDistribution.TransactionCurrencyAmount > 0
                                                      && subledgerJournalAccountEntry.AccountingCurrencyAmount < 0))))))
                    join JournalNumber from subledgerJournalEntry
                        group by JournalNumber
                            where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId
                    join generalJournalAccountEntry
                        where generalJournalAccountEntry.RecId == subledgerJournalAccountEntry.GeneralJournalAccountEntry
                    join JournalNumber from generalJournalEntry
                        group by JournalNumber
                            where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    join davc
                        where subledgerJournalAccountEntry.LedgerDimension == davc.RecId
                    join MainAccountId, Name from mainAccount
                        group by MainAccountId, Name
                            where mainAccount.RecId == davc.MainAccount
                                && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                                && mainAccount.MainAccountId >= fromMainAccount
                                && mainAccount.MainAccountId <= toMainAccount;
                }
            }
        }
        else
        {
            // Assign TaxAmountMST value from taxTransGeneralJournalAccountEntry when the transaction type is payment/reversed or cash discount.
            TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
            insert_recordset taxSummaryTable
            (
                TaxAmountMST,
                MainAccountId,
                MainAccountName
            )
            select taxTrans
                where taxTrans.TransDate >= fromDate
                    && taxTrans.TransDate <= toDate
                    && taxTrans.Voucher >= fromVoucher
                    && taxTrans.Voucher <= toVoucher
                    && (taxTrans.TaxDirection == TaxDirection::IncomingTax
                        || taxTrans.TaxDirection == TaxDirection::OutgoingTax
                        || taxTrans.TaxDirection == TaxDirection::UseTax)
                    && taxTrans.SourceDocumentLine != 0
                    && (taxTrans.TaxOrigin == TaxOrigin::Payment
                        || taxTrans.TaxOrigin == TaxOrigin::TaxReversed
                        || taxTrans.TaxOrigin == TaxOrigin::CashDisc)
            join sum(AccountingCurrencyAmount) from taxTransGeneralJournalAccountEntry
                where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                    && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax
            join davc
                where taxTransGeneralJournalAccountEntry.LedgerDimension == davc.RecId
                join MainAccountId, Name from mainAccount
                group by MainAccountId, Name
            where mainAccount.RecId == davc.MainAccount
                && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                && mainAccount.MainAccountId >= fromMainAccount
                && mainAccount.MainAccountId <= toMainAccount;

            // Note: Please apply the same change in the if/else statements except notexists join clause
            // to keep the logic sychronized when applying any new change.
            if (isPrintTaxReversed)
            {
                insert_recordset taxSummaryTable
                (
                    TaxAmountMST,
                    MainAccountId,
                    MainAccountName
                )
                select taxTrans
                    where taxTrans.TransDate >= fromDate
                        && taxTrans.TransDate <= toDate
                        && taxTrans.Voucher >= fromVoucher
                        && taxTrans.Voucher <= toVoucher
                        && (taxTrans.TaxDirection == TaxDirection::IncomingTax
                        || taxTrans.TaxDirection == TaxDirection::OutgoingTax
                        || taxTrans.TaxDirection == TaxDirection::UseTax)
                        && taxTrans.SourceDocumentLine != 0
                        && taxTrans.TaxOrigin != TaxOrigin::Payment
                        && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
                        && taxTrans.TaxOrigin != TaxOrigin::CashDisc
                join accountingDistribution
                    where (accountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                            || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxVariance
                            || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverable
                            || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverableVariance
                            || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasure
                            || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasureNonRecoverable)
                            && taxTrans.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                join sum(AccountingCurrencyAmount) from subledgerJournalAccountEntryDistribution
                        where subledgerJournalAccountEntryDistribution.AccountingDistribution == accountingDistribution.RecId
                join subledgerJournalAccountEntry
                    where subledgerJournalAccountEntry.RecId == subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry
                        // skip encumbrance
                        && (subledgerJournalAccountEntry.PostingType != LedgerPostingType::PurchOrder
                            && subledgerJournalAccountEntry.PostingType != LedgerPostingType::VendBalance
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::CustBalance
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::PurchConsump
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitDebit
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitCredit)
                              // Show tax monetary amount for tax and use tax payable
                              && (((accountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                                     || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxVariance
                                     || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasure)
                                     && (((taxTrans.TaxAmount && accountingDistribution.TransactionCurrencyAmount)
                                         && ((accountingDistribution.TransactionCurrencyAmount > 0
                                                 && subledgerJournalAccountEntry.AccountingCurrencyAmount > 0)
                                             || (accountingDistribution.TransactionCurrencyAmount < 0
                                                 && subledgerJournalAccountEntry.AccountingCurrencyAmount < 0)))))
                                    // Show tax nonrecoverable monetary amount only for use tax payable
                                    || ((accountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                                        || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxVariance
                                        || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasure
                                        || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverable
                                        || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverableVariance
                                        || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasureNonRecoverable)
                                        && taxTrans.TaxDirection == TaxDirection::UseTax
                                        && (((taxTrans.TaxAmount && accountingDistribution.TransactionCurrencyAmount)
                                              && ((accountingDistribution.TransactionCurrencyAmount < 0
                                                      && subledgerJournalAccountEntry.AccountingCurrencyAmount > 0)
                                                  || (accountingDistribution.TransactionCurrencyAmount > 0
                                                      && subledgerJournalAccountEntry.AccountingCurrencyAmount < 0))))))
                join davc
                    where subledgerJournalAccountEntry.LedgerDimension == davc.RecId
                join MainAccountId, Name from mainAccount
                    group by MainAccountId, Name
                        where mainAccount.RecId == davc.MainAccount
                            && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                            && mainAccount.MainAccountId >= fromMainAccount
                            && mainAccount.MainAccountId <= toMainAccount
                notexists join vendOverdueVATJournalTable_W
                        where vendOverdueVATJournalTable_W.LedgerVoucher == taxTrans.Voucher
                            && vendOverdueVATJournalTable_W.TransDate == taxTrans.TransDate;
            }
            else
            {
                insert_recordset taxSummaryTable
                (
                    TaxAmountMST,
                    MainAccountId,
                    MainAccountName
                )
                select taxTrans
                    where taxTrans.TransDate >= fromDate
                        && taxTrans.TransDate <= toDate
                        && taxTrans.Voucher >= fromVoucher
                        && taxTrans.Voucher <= toVoucher
                        && (taxTrans.TaxDirection == TaxDirection::IncomingTax
                        || taxTrans.TaxDirection == TaxDirection::OutgoingTax
                        || taxTrans.TaxDirection == TaxDirection::UseTax)
                        && taxTrans.SourceDocumentLine != 0
                        && taxTrans.TaxOrigin != TaxOrigin::Payment
                        && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
                        && taxTrans.TaxOrigin != TaxOrigin::CashDisc
                join accountingDistribution
                    where (accountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                            || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxVariance
                            || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverable
                            || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverableVariance
                            || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasure
                            || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasureNonRecoverable)
                            && taxTrans.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                join sum(AccountingCurrencyAmount) from subledgerJournalAccountEntryDistribution
                        where subledgerJournalAccountEntryDistribution.AccountingDistribution == accountingDistribution.RecId
                join subledgerJournalAccountEntry
                    where subledgerJournalAccountEntry.RecId == subledgerJournalAccountEntryDistribution.SubledgerJournalAccountEntry
                        // skip encumbrance
                    && (subledgerJournalAccountEntry.PostingType != LedgerPostingType::PurchOrder
                            && subledgerJournalAccountEntry.PostingType != LedgerPostingType::VendBalance
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::CustBalance
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::PurchConsump
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitDebit
                                && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitCredit)
                              // Show tax monetary amount for tax and use tax payable
                    && (((accountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                                     || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxVariance
                                     || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasure)
                                     && (((taxTrans.TaxAmount && accountingDistribution.TransactionCurrencyAmount)
                                         && ((accountingDistribution.TransactionCurrencyAmount > 0
                                                 && subledgerJournalAccountEntry.AccountingCurrencyAmount > 0)
                                             || (accountingDistribution.TransactionCurrencyAmount < 0
                                                 && subledgerJournalAccountEntry.AccountingCurrencyAmount < 0)))))
                                    // Show tax nonrecoverable monetary amount only for use tax payable
                    || ((accountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                                        || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxVariance
                                        || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasure
                                        || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverable
                                        || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverableVariance
                                        || accountingDistribution.MonetaryAmount == MonetaryAmount::TaxMeasureNonRecoverable)
                                        && taxTrans.TaxDirection == TaxDirection::UseTax
                                        && (((taxTrans.TaxAmount && accountingDistribution.TransactionCurrencyAmount)
                                              && ((accountingDistribution.TransactionCurrencyAmount < 0
                                                      && subledgerJournalAccountEntry.AccountingCurrencyAmount > 0)
                                                  || (accountingDistribution.TransactionCurrencyAmount > 0
                                                      && subledgerJournalAccountEntry.AccountingCurrencyAmount < 0))))))
                join davc
                    where subledgerJournalAccountEntry.LedgerDimension == davc.RecId
                join MainAccountId, Name from mainAccount
                    group by MainAccountId, Name
                        where mainAccount.RecId == davc.MainAccount
                            && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                            && mainAccount.MainAccountId >= fromMainAccount
                            && mainAccount.MainAccountId <= toMainAccount;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxTransNonSourceDocLedgerAccount</Name>
				<Source><![CDATA[
    private void insertTaxTransNonSourceDocLedgerAccount()
    {
        TaxTrans taxTrans;
        TaxTable taxTable;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccount mainAccount;
        DimensionAttributeValueCombination davc;
        TaxTrans_W taxTrans_W;
        SubledgerJournalAccountEntry subledgerJournalAccountEntry;
        SubledgerJournalEntry subledgerJournalEntry;

        if (this.parmIncludeDetails())
        {
            if (isCZ)
            {
                // Insert without subledger entry
                insert_recordset taxTransTmp
                (
                    AccountingDate,
                    Voucher,
                    TaxAmountMST,
                    CustVendAC,
                    TaxDirection,
                    AmountMST,
                    VatRegisterDate,
                    TaxAccountName,
                    IsCorrection,
                    LedgerJournalId,
                    MainAccountId,
                    MainAccountName
                )
                 select TransDate, Voucher, sum(TaxAmount), TaxCode, TaxDirection, sum(TaxBaseAmount) from taxTrans
                    group by TransDate, Voucher, TaxCode, TaxDirection
                    where taxTrans.Voucher >= fromVoucher
                        && taxTrans.Voucher <= toVoucher
                        && (taxTrans.TaxDirection == TaxDirection::IncomingTax
                            || taxTrans.TaxDirection == TaxDirection::OutgoingTax
                            || taxTrans.TaxDirection == TaxDirection::UseTax)
                        && ((taxTrans.SourceDocumentLine == 0 && taxTrans.TaxOrigin != TaxOrigin::TaxReporting)
                            || (taxTrans.TaxOrigin == TaxOrigin::Payment
                                || taxTrans.TaxOrigin == TaxOrigin::TaxReversed
                                || taxTrans.TaxOrigin == TaxOrigin::CashDisc))
                 join VatDueDate_W from taxTrans_W
                    group by VatDueDate_W
                    where taxTrans_W.TaxTrans == taxTrans.RecId
                        && taxTrans_W.VatDueDate_W >= fromDate
                        && taxTrans_W.VatDueDate_W <= toDate
                join TaxName from taxTable
                    group by TaxName
                    where taxTrans.TaxCode == taxTable.TaxCode
                join taxTransGeneralJournalAccountEntry
                    where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                    &&    taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax
                    &&    taxTransGeneralJournalAccountEntry.SubledgerJournalAccountEntry == 0
                join IsCorrection from generalJournalAccountEntry
                    group by IsCorrection
                    where taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                join JournalNumber from generalJournalEntry
                    group by JournalNumber
                    where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                join davc
                    where taxTransGeneralJournalAccountEntry.LedgerDimension == davc.RecId
                join MainAccountId, Name from mainAccount
                    group by MainAccountId, Name
                    where mainAccount.RecId == davc.MainAccount
                    &&  mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                    &&  mainAccount.MainAccountId >= fromMainAccount
                    &&  mainAccount.MainAccountId <= toMainAccount;

                // Insert with subledger entry
                insert_recordset taxTransTmp
                (
                    AccountingDate,
                    Voucher,
                    TaxAmountMST,
                    CustVendAC,
                    TaxDirection,
                    AmountMST,
                    VatRegisterDate,
                    TaxAccountName,
                    SubledgerJourId,
                    IsCorrection,
                    LedgerJournalId,
                    MainAccountId,
                    MainAccountName
                )
                 select TransDate, Voucher, sum(TaxAmount), TaxCode, TaxDirection, sum(TaxBaseAmount) from taxTrans
                    group by TransDate, Voucher, TaxCode, TaxDirection
                    where taxTrans.Voucher >= fromVoucher
                        && taxTrans.Voucher <= toVoucher
                        && (taxTrans.TaxDirection == TaxDirection::IncomingTax
                            || taxTrans.TaxDirection == TaxDirection::OutgoingTax
                            || taxTrans.TaxDirection == TaxDirection::UseTax)
                        && ((taxTrans.SourceDocumentLine == 0 && taxTrans.TaxOrigin != TaxOrigin::TaxReporting)
                            || (taxTrans.TaxOrigin == TaxOrigin::Payment
                                || taxTrans.TaxOrigin == TaxOrigin::TaxReversed
                                || taxTrans.TaxOrigin == TaxOrigin::CashDisc))
                 join VatDueDate_W from taxTrans_W
                    group by VatDueDate_W
                    where taxTrans_W.TaxTrans == taxTrans.RecId
                        && taxTrans_W.VatDueDate_W >= fromDate
                        && taxTrans_W.VatDueDate_W <= toDate
                join TaxName from taxTable
                    group by TaxName
                    where taxTrans.TaxCode == taxTable.TaxCode
                join taxTransGeneralJournalAccountEntry
                    where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                    &&    taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax
                    &&    taxTransGeneralJournalAccountEntry.SubledgerJournalAccountEntry != 0
                join subledgerJournalAccountEntry
                    where taxTransGeneralJournalAccountEntry.SubledgerJournalAccountEntry == subledgerJournalAccountEntry.RecId
                join JournalNumber from subledgerJournalEntry
                    group by JournalNumber
                    where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId
                join IsCorrection from generalJournalAccountEntry
                    group by IsCorrection
                    where taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                join JournalNumber from generalJournalEntry
                    group by JournalNumber
                    where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                join davc
                    where taxTransGeneralJournalAccountEntry.LedgerDimension == davc.RecId
                join MainAccountId, Name from mainAccount
                    group by MainAccountId, Name
                    where mainAccount.RecId == davc.MainAccount
                    &&  mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                    &&  mainAccount.MainAccountId >= fromMainAccount
                    &&  mainAccount.MainAccountId <= toMainAccount;
            }
            else
            {
                // Insert for Non Source Document Transactions with a Tax Transaction Relationship Type of Tax (Detail).
                // In this case we need to capture the Tax Amount and the Tax in Cost Price.  We will have an
                // update statement after the insert to subtract the 2 values. X++ does not allow the math in-line.

                // Avoid assigning values when the transaction type is payment/reversed or cash discount and source document line is not 0.
                // Insert without subledger entry
                insert_recordset taxTransTmp
                (
                    AccountingDate,
                    Voucher,
                    TaxAmountMST,
                    LedgerAmountMST,
                    CustVendAC,
                    TaxAccountName,
                    LedgerJournalId,
                    MainAccountId,
                    MainAccountName
                )
                select TransDate, Voucher, sum(TaxAmount), sum(TaxInCostPriceMST), TaxCode from taxTrans
                    group by TransDate, Voucher, TaxCode
                    where taxTrans.TransDate >= fromDate
                        && taxTrans.TransDate <= toDate
                        && taxTrans.Voucher >= fromVoucher
                        && taxTrans.Voucher <= toVoucher
                        && (taxTrans.TaxDirection == TaxDirection::IncomingTax
                            || taxTrans.TaxDirection == TaxDirection::OutgoingTax
                            || taxTrans.TaxDirection == TaxDirection::UseTax)
                        && (taxTrans.SourceDocumentLine == 0 && taxTrans.TaxOrigin != TaxOrigin::TaxReporting)
                join TaxName from taxTable
                    group by TaxName
                    where taxTrans.TaxCode == taxTable.TaxCode
                join taxTransGeneralJournalAccountEntry
                    where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                        && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax
                        && taxTransGeneralJournalAccountEntry.SubledgerJournalAccountEntry == 0
                join generalJournalAccountEntry
                    where taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                join JournalNumber from generalJournalEntry
                    group by JournalNumber
                    where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                join davc
                    where taxTransGeneralJournalAccountEntry.LedgerDimension == davc.RecId
                join MainAccountId, Name from mainAccount
                    group by MainAccountId, Name
                    where mainAccount.RecId == davc.MainAccount
                        &&  mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                        &&  mainAccount.MainAccountId >= fromMainAccount
                        &&  mainAccount.MainAccountId <= toMainAccount;

                // Insert with subledger entry
                insert_recordset taxTransTmp
                (
                    AccountingDate,
                    Voucher,
                    TaxAmountMST,
                    LedgerAmountMST,
                    CustVendAC,
                    TaxAccountName,
                    SubledgerJourId,
                    LedgerJournalId,
                    MainAccountId,
                    MainAccountName
                )
                select TransDate, Voucher, sum(TaxAmount), sum(TaxInCostPriceMST), TaxCode from taxTrans
                    group by TransDate, Voucher, TaxCode
                    where taxTrans.TransDate >= fromDate
                        && taxTrans.TransDate <= toDate
                        && taxTrans.Voucher >= fromVoucher
                        && taxTrans.Voucher <= toVoucher
                        && (taxTrans.TaxDirection == TaxDirection::IncomingTax
                            || taxTrans.TaxDirection == TaxDirection::OutgoingTax
                            || taxTrans.TaxDirection == TaxDirection::UseTax)
                        && ((taxTrans.SourceDocumentLine == 0 && taxTrans.TaxOrigin != TaxOrigin::TaxReporting)
                            || (taxTrans.TaxOrigin == TaxOrigin::Payment
                                || taxTrans.TaxOrigin == TaxOrigin::TaxReversed
                                || taxTrans.TaxOrigin == TaxOrigin::CashDisc))
                join TaxName from taxTable
                    group by TaxName
                    where taxTrans.TaxCode == taxTable.TaxCode
                join taxTransGeneralJournalAccountEntry
                    where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                    &&    taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax
                    &&    taxTransGeneralJournalAccountEntry.SubledgerJournalAccountEntry != 0
                join subledgerJournalAccountEntry
                    where taxTransGeneralJournalAccountEntry.SubledgerJournalAccountEntry == subledgerJournalAccountEntry.RecId
                join JournalNumber from subledgerJournalEntry
                    group by JournalNumber
                    where subledgerJournalAccountEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId
                join generalJournalAccountEntry
                    where taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                join JournalNumber from generalJournalEntry
                    group by JournalNumber
                    where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                join davc
                    where taxTransGeneralJournalAccountEntry.LedgerDimension == davc.RecId
                join MainAccountId, Name from mainAccount
                    group by MainAccountId, Name
                    where mainAccount.RecId == davc.MainAccount
                    &&  mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                    &&  mainAccount.MainAccountId >= fromMainAccount
                    &&  mainAccount.MainAccountId <= toMainAccount;
            }

            // Update the Amount value to be the Tax Amount - Tax in Cost Price. Transaction with a relationship type of Tax (Ledger Account) need this calculation.
            // LedgerAmountMST hold the tax in cost price amount.
            update_recordset taxTransTmp
                setting TaxAmountMST = (taxTransTmp.TaxAmountMST - taxTransTmp.LedgerAmountMST)
                    where taxTransTmp.LedgerAmountMST != 0;
        }

        // Insert for Non Source Document Transactions with a Tax Transaction Relationship Type of Tax (Summary).
        // In this case we need to capture the Tax Amount and the Tax in Cost Price.  We will have an
        // update statement after the insert to subtract the 2 values. X++ does not allow the math inline.
        else
        {
            // Avoid assigning values when the transaction type is payment/reversed or cash discount.
            insert_recordset taxSummaryTable
            (
                TaxAmountMST,
                LedgerAmountMST,
                MainAccountId,
                MainAccountName
            )
                select sum(TaxAmount), sum(TaxInCostPriceMST) from taxTrans
                    where taxTrans.TransDate >= fromDate
                        && taxTrans.TransDate <= toDate
                        && taxTrans.Voucher >= fromVoucher
                        && taxTrans.Voucher <= toVoucher
                        && (taxTrans.TaxDirection == TaxDirection::IncomingTax
                            || taxTrans.TaxDirection == TaxDirection::OutgoingTax
                            || taxTrans.TaxDirection == TaxDirection::UseTax)
                        && ((taxTrans.SourceDocumentLine == 0 && taxTrans.TaxOrigin != TaxOrigin::TaxReporting))
                join taxTransGeneralJournalAccountEntry
                    where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                        && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax
                join davc
                    where taxTransGeneralJournalAccountEntry.LedgerDimension == davc.RecId
                    join MainAccountId, Name from mainAccount
                    group by MainAccountId, Name
                where mainAccount.RecId == davc.MainAccount
                    &&  mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                    &&  mainAccount.MainAccountId >= fromMainAccount
                    &&  mainAccount.MainAccountId <= toMainAccount;

            // Update the Amount value to be the Tax Amount - Tax in Cost Price. Transaction with a relationship type of Tax (Ledger Account) need this calculation.
            update_recordset taxSummaryTable
                setting TaxAmountMST = (taxSummaryTable.TaxAmountMST - taxSummaryTable.LedgerAmountMST)
                    where taxSummaryTable.LedgerAmountMST != 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxTransNonSourceDocOffsetAccount</Name>
				<Source><![CDATA[
    private void insertTaxTransNonSourceDocOffsetAccount()
    {
        TaxTrans taxTrans;
        TaxTrans_W taxTrans_W;
        TaxTable taxTable;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccount mainAccount;
        DimensionAttributeValueCombination davc;

        if (this.parmIncludeDetails())
        {
            if (isCZ)
            {
                // Insert for Non Source Document Transactions with a Tax Transaction Relationship Type of Use Tax Payable (Detail).
                insert_recordset taxTransTmp
                (
                    AccountingDate,
                    Voucher,
                    TaxAmountMST,
                    CustVendAC,
                    TaxDirection,
                    AmountMST,
                    VatRegisterDate,
                    TaxAccountName,
                    IsCorrection,
                    LedgerJournalId,
                    MainAccountId,
                    MainAccountName
                )
                select TransDate, Voucher, sum(TaxAmount), TaxCode, TaxDirection, sum(TaxBaseAmount) from taxTrans
                    group by TransDate, Voucher, TaxCode, TaxDirection
                    where taxTrans.Voucher >= fromVoucher
                        && taxTrans.Voucher <= toVoucher
                        && taxTrans.TaxDirection == TaxDirection::UseTax
                        && ((taxTrans.SourceDocumentLine == 0 && taxTrans.TaxOrigin != TaxOrigin::TaxReporting)
                            || (taxTrans.TaxOrigin == TaxOrigin::Payment
                                || taxTrans.TaxOrigin == TaxOrigin::TaxReversed
                                || taxTrans.TaxOrigin == TaxOrigin::CashDisc))
                join VatDueDate_W from taxTrans_W
                    group by VatDueDate_W
                    where taxTrans_W.TaxTrans == taxTrans.RecId
                        && taxTrans_W.VatDueDate_W >= fromDate
                        && taxTrans_W.VatDueDate_W <= toDate
                join TaxName from taxTable
                    group by TaxName
                    where taxTrans.TaxCode == taxTable.TaxCode
                join taxTransGeneralJournalAccountEntry
                    where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                        && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::UseTaxPayable
                join IsCorrection from generalJournalAccountEntry
                    group by IsCorrection
                    where taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                join JournalNumber from generalJournalEntry
                    group by JournalNumber
                    where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                join davc
                    where taxTransGeneralJournalAccountEntry.LedgerDimension == davc.RecId
                join MainAccountId, Name from mainAccount
                    group by MainAccountId, Name
                    where mainAccount.RecId == davc.MainAccount
                    && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                    && mainAccount.MainAccountId >= fromMainAccount
                    && mainAccount.MainAccountId <= toMainAccount;
            }
            else
            {
                // Insert for Non Source Document Transactions with a Tax Transaction Relationship Type of Use Tax Payable (Detail).
                insert_recordset taxTransTmp
                (
                    AccountingDate,
                    Voucher,
                    TaxAmountMST,
                    CustVendAC,
                    TaxAccountName,
                    LedgerJournalId,
                    MainAccountId,
                    MainAccountName
                )
                select TransDate, Voucher, sum(TaxAmount), TaxCode from taxTrans
                    group by TransDate, Voucher, TaxCode
                    where taxTrans.TransDate >= fromDate
                        && taxTrans.TransDate <= toDate
                        && taxTrans.Voucher >= fromVoucher
                        && taxTrans.Voucher <= toVoucher
                        && taxTrans.TaxDirection == TaxDirection::UseTax
                        && ((taxTrans.SourceDocumentLine == 0 && taxTrans.TaxOrigin != TaxOrigin::TaxReporting)
                            || (taxTrans.TaxOrigin == TaxOrigin::Payment
                                || taxTrans.TaxOrigin == TaxOrigin::TaxReversed
                                || taxTrans.TaxOrigin == TaxOrigin::CashDisc))
                join TaxName from taxTable
                    group by TaxName
                    where taxTrans.TaxCode == taxTable.TaxCode
                join taxTransGeneralJournalAccountEntry
                    where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                        && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::UseTaxPayable
                join generalJournalAccountEntry
                    where taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                join JournalNumber from generalJournalEntry
                    group by JournalNumber
                    where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                join davc
                    where taxTransGeneralJournalAccountEntry.LedgerDimension == davc.RecId
                join MainAccountId, Name from mainAccount
                    group by MainAccountId, Name
                    where mainAccount.RecId == davc.MainAccount
                    && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                    && mainAccount.MainAccountId >= fromMainAccount
                    && mainAccount.MainAccountId <= toMainAccount;
            }

            // Update the Amount value to be value * -1.  This is how Use Tax Payable amounts should be represented.
            update_recordset taxTransTmp
                setting TaxAmountMST = (taxTransTmp.TaxAmountMST * -1);
        }
        else
        {
            // Insert for Non Source Document Transactions with a Tax Transaction Relationship Type of Use Tax Payable (Summary).
            insert_recordset taxSummaryTable
            (
                TaxAmountMST,
                MainAccountId,
                MainAccountName
            )
                select sum(TaxAmount) from taxTrans
                    where taxTrans.TransDate >= fromDate
                        && taxTrans.TransDate <= toDate
                        && taxTrans.Voucher >= fromVoucher
                        && taxTrans.Voucher <= toVoucher
                        && taxTrans.TaxDirection == TaxDirection::UseTax
                        && ((taxTrans.SourceDocumentLine == 0 && taxTrans.TaxOrigin != TaxOrigin::TaxReporting)
                            || (taxTrans.TaxOrigin == TaxOrigin::Payment
                                || taxTrans.TaxOrigin == TaxOrigin::TaxReversed
                                || taxTrans.TaxOrigin == TaxOrigin::CashDisc))
                join taxTransGeneralJournalAccountEntry
                    where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                     && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::UseTaxPayable
                join davc
                    where taxTransGeneralJournalAccountEntry.LedgerDimension == davc.RecId
                join MainAccountId, Name from mainAccount
                    group by MainAccountId, Name
                    where mainAccount.RecId == davc.MainAccount
                        && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                        && mainAccount.MainAccountId >= fromMainAccount
                        && mainAccount.MainAccountId <= toMainAccount;

            // Update the Amount value to be value * -1.  This is how Use Tax Payable amounts should be represented.
            update_recordset taxSummaryTable
                setting TaxAmountMST = (taxSummaryTable.TaxAmountMST * -1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxTransLedgerAccountForTaxReversed</Name>
				<Source><![CDATA[
    private void insertTaxTransLedgerAccountForTaxReversed()
    {
        TaxTrans taxTrans;
        TaxTable taxTable;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccount mainAccount;
        DimensionAttributeValueCombination davc;
        TaxTrans_W taxTrans_W;
        SubledgerJournalAccountEntry subledgerJournalAccountEntry;
        SubledgerJournalEntry subledgerJournalEntry;

        if (isPrintTaxReversed)
        {
            if (this.parmIncludeDetails())
            {
                // Insert without subledger entry
                insert_recordset taxTransTmp
                (
                    AccountingDate,
                    Voucher,
                    TaxAmountMST,
                    LedgerAmountMST,
                    CustVendAC,
                    TaxAccountName,
                    LedgerJournalId,
                    MainAccountId,
                    MainAccountName
                )
                select TransDate, Voucher, sum(TaxAmount), sum(TaxInCostPriceMST), TaxCode from taxTrans
                    group by TransDate, Voucher, TaxCode
                    where taxTrans.TransDate >= fromDate
                        && taxTrans.TransDate <= toDate
                        && taxTrans.Voucher >= fromVoucher
                        && taxTrans.Voucher <= toVoucher
                        && taxTrans.TaxDirection == TaxDirection::IncomingTax
                        && taxTrans.SourceDocumentLine != 0
                join TaxName from taxTable
                    group by TaxName
                    where taxTrans.TaxCode == taxTable.TaxCode
                join taxTransGeneralJournalAccountEntry
                    where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                        && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax
                        && taxTransGeneralJournalAccountEntry.SubledgerJournalAccountEntry == 0
                join generalJournalAccountEntry
                    where taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                join JournalNumber from generalJournalEntry
                    group by JournalNumber
                    where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                join davc
                    where taxTransGeneralJournalAccountEntry.LedgerDimension == davc.RecId
                join MainAccountId, Name from mainAccount
                    group by MainAccountId, Name
                    where mainAccount.RecId == davc.MainAccount
                        && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                        && mainAccount.MainAccountId >= fromMainAccount
                        && mainAccount.MainAccountId <= toMainAccount
                exists join vendOverdueVATJournalTable_W
                    where vendOverdueVATJournalTable_W.LedgerVoucher == taxTrans.Voucher
                        && vendOverdueVATJournalTable_W.TransDate == taxTrans.TransDate;

                // Update the Amount value to be the Tax Amount - Tax in Cost Price. Transaction with a relationship type of Tax (Ledger Account) need this calculation.
                // LedgerAmountMST hold the tax in cost price amount.
                update_recordset taxTransTmp
                setting TaxAmountMST = (taxTransTmp.TaxAmountMST - taxTransTmp.LedgerAmountMST)
                    where taxTransTmp.LedgerAmountMST != 0
                    exists join vendOverdueVATJournalTable_W
                        where vendOverdueVATJournalTable_W.LedgerVoucher == taxTransTmp.Voucher
                            && vendOverdueVATJournalTable_W.TransDate == taxTransTmp.AccountingDate;
            }
            // Insert for Non Source Document Transactions with a Tax Transaction Relationship Type of Tax (Summary).
            else
            {
                // It's just a filter identifier for tax summary table, and reset to blank for field voucher after updating the tax summary table.
                const Voucher TaxDummyVoucher = 'TaxDummyVoucher';

                insert_recordset taxSummaryTable
                (
                    Voucher,
                    TaxAmountMST,
                    LedgerAmountMST,
                    MainAccountId,
                    MainAccountName
                )
                select TaxDummyVoucher, sum(TaxAmount), sum(TaxInCostPriceMST) from taxTrans
                    where taxTrans.TransDate >= fromDate
                        && taxTrans.TransDate <= toDate
                        && taxTrans.Voucher >= fromVoucher
                        && taxTrans.Voucher <= toVoucher
                        && taxTrans.TaxDirection == TaxDirection::IncomingTax
                        && taxTrans.SourceDocumentLine != 0
                join taxTransGeneralJournalAccountEntry
                    where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                        && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax
                        && taxTransGeneralJournalAccountEntry.SubledgerJournalAccountEntry == 0
                join davc
                    where taxTransGeneralJournalAccountEntry.LedgerDimension == davc.RecId
                    join MainAccountId, Name from mainAccount
                    group by MainAccountId, Name
                where mainAccount.RecId == davc.MainAccount
                    &&  mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                    &&  mainAccount.MainAccountId >= fromMainAccount
                    &&  mainAccount.MainAccountId <= toMainAccount
                exists join vendOverdueVATJournalTable_W
                    where vendOverdueVATJournalTable_W.LedgerVoucher == taxTrans.Voucher
                        && vendOverdueVATJournalTable_W.TransDate == taxTrans.TransDate;

                // Update the Amount value to be the Tax Amount - Tax in Cost Price. Transaction with a relationship type of Tax (Ledger Account) need this calculation.
                update_recordset taxSummaryTable
                setting TaxAmountMST = (taxSummaryTable.TaxAmountMST - taxSummaryTable.LedgerAmountMST), Voucher = ''
                    where taxSummaryTable.LedgerAmountMST != 0
                        && taxSummaryTable.Voucher == TaxDummyVoucher;
            }
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxTransOffsetAccountForTaxReversed</Name>
				<Source><![CDATA[
    private void insertTaxTransOffsetAccountForTaxReversed()
    {
        TaxTrans taxTrans;
        TaxTrans_W taxTrans_W;
        TaxTable taxTable;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccount mainAccount;
        DimensionAttributeValueCombination davc;

        if (isPrintTaxReversed)
        {
            if (this.parmIncludeDetails())
            {
                // Insert transactions with a Tax  Relationship Type of Tax reversed (Detail).
                insert_recordset taxTransTmp
                (
                    AccountingDate,
                    Voucher,
                    TaxAmountMST,
                    CustVendAC,
                    TaxAccountName,
                    LedgerJournalId,
                    MainAccountId,
                    MainAccountName
                )
                select TransDate, Voucher, sum(TaxAmount), TaxCode from taxTrans
                    group by TransDate, Voucher, TaxCode
                    where taxTrans.TransDate >= fromDate
                        && taxTrans.TransDate <= toDate
                        && taxTrans.Voucher >= fromVoucher
                        && taxTrans.Voucher <= toVoucher
                        && taxTrans.TaxDirection == TaxDirection::IncomingTax
                join TaxName from taxTable
                    group by TaxName
                    where taxTrans.TaxCode == taxTable.TaxCode
                join taxTransGeneralJournalAccountEntry
                    where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                        && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TaxReversed
                join generalJournalAccountEntry
                    where taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                join JournalNumber from generalJournalEntry
                    group by JournalNumber
                    where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                join davc
                    where taxTransGeneralJournalAccountEntry.LedgerDimension == davc.RecId
                join MainAccountId, Name from mainAccount
                    group by MainAccountId, Name
                    where mainAccount.RecId == davc.MainAccount
                        && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                        && mainAccount.MainAccountId >= fromMainAccount
                        && mainAccount.MainAccountId <= toMainAccount
                exists join vendOverdueVATJournalTable_W
                    where vendOverdueVATJournalTable_W.LedgerVoucher == taxTrans.Voucher
                        && vendOverdueVATJournalTable_W.TransDate == taxTrans.TransDate;
            }
            else
            {
                // Insert transactions with a Tax  Relationship Type of Tax reversed (Summary).
                insert_recordset taxSummaryTable
                (
                    TaxAmountMST,
                    MainAccountId,
                    MainAccountName
                )
                select sum(TaxAmount) from taxTrans
                    where taxTrans.TransDate >= fromDate
                        && taxTrans.TransDate <= toDate
                        && taxTrans.Voucher >= fromVoucher
                        && taxTrans.Voucher <= toVoucher
                        && taxTrans.TaxDirection == TaxDirection::IncomingTax
                join taxTransGeneralJournalAccountEntry
                    where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                        && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TaxReversed
                join davc
                    where taxTransGeneralJournalAccountEntry.LedgerDimension == davc.RecId
                join MainAccountId, Name from mainAccount
                    group by MainAccountId, Name
                    where mainAccount.RecId == davc.MainAccount
                        && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                        && mainAccount.MainAccountId >= fromMainAccount
                        && mainAccount.MainAccountId <= toMainAccount
                exists join vendOverdueVATJournalTable_W
                    where vendOverdueVATJournalTable_W.LedgerVoucher == taxTrans.Voucher
                        && vendOverdueVATJournalTable_W.TransDate == taxTrans.TransDate;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeTaxTransactions</Name>
				<Source><![CDATA[
    private void mergeTaxTransactions()
    {
        insert_recordset taxTransTmp
            (
                TaxAmountMST,
                MainAccountId,
                MainAccountName
            )
        select sum(TaxAmountMST),
            MainAccountId,
            MainAccountName
        from taxSummaryTable
            group by taxSummaryTable.MainAccountId,
                taxSummaryTable.MainAccountName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(TaxLedgerReconciliationTmp _taxLedgerReconciliationTmp = null, boolean _isCZ = false)
    {
        taxLedgerAccountsSet = new Set(Types::String);

        if (_isCZ)
        {
            taxLedgerReconciliationTmpCZ = _taxLedgerReconciliationTmp;
        }
        else
        {
            taxLedgerReconciliationTmp = _taxLedgerReconciliationTmp;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeTaxAmountOriginDetail</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmIncludeTaxAmountOriginDetail(boolean _includeTaxAmountOriginDetail = includeTaxAmountOriginDetail)
    {
        includeTaxAmountOriginDetail = _includeTaxAmountOriginDetail;

        return includeTaxAmountOriginDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeTaxDirectionDetail</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmIncludeTaxDirectionDetail(boolean _includeTaxDirectionDetail = includeTaxDirectionDetail)
    {
        includeTaxDirectionDetail = _includeTaxDirectionDetail;

        return includeTaxDirectionDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeVATRegisterDateDetail</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmIncludeVATRegisterDateDetail(boolean _includeVATRegisterDateDetail = includeVATRegisterDateDetail)
    {
        includeVATRegisterDateDetail = _includeVATRegisterDateDetail;

        return includeVATRegisterDateDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxBalances</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TaxLedgerReconciliationTmp parmTaxBalances()
    {
        return taxTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxAndLedgerTrans</Name>
				<Source><![CDATA[
    private void processTaxAndLedgerTrans()
    {
        this.reconcile();

        if (this.parmIncludeDetails())
        {
            update_recordset taxLedgerReconciliationTmp
                setting
                    AccountingCurrencyBalanceDifference = taxLedgerReconciliationTmp.SumTaxAmount
                        - taxLedgerReconciliationTmp.LedgerAmountMST
                where taxLedgerReconciliationTmp.LedgerAmountMST != taxLedgerReconciliationTmp.SumTaxAmount;

            if (isCZ)
            {
                update_recordset taxLedgerReconciliationTmp
                    setting
                        AccountingCurrencyBalanceDiffDebit = taxLedgerReconciliationTmp.AccountingCurrencyBalanceDifference * -1
                    where taxLedgerReconciliationTmp.IsCorrection == true
                        && taxLedgerReconciliationTmp.LedgerAmountMST < 0;
                update_recordset taxLedgerReconciliationTmp
                    setting
                        AccountingCurrencyBalanceDiffCredit = taxLedgerReconciliationTmp.AccountingCurrencyBalanceDifference
                    where taxLedgerReconciliationTmp.IsCorrection == true
                        && taxLedgerReconciliationTmp.LedgerAmountMST > 0;
                update_recordset taxLedgerReconciliationTmp
                    setting
                        AccountingCurrencyBalanceDiffDebit = taxLedgerReconciliationTmp.AccountingCurrencyBalanceDifference * -1
                    where taxLedgerReconciliationTmp.IsCorrection != true
                        && taxLedgerReconciliationTmp.AccountingCurrencyBalanceDifference < 0;
                update_recordset taxLedgerReconciliationTmp
                    setting
                        AccountingCurrencyBalanceDiffCredit = taxLedgerReconciliationTmp.AccountingCurrencyBalanceDifference
                    where taxLedgerReconciliationTmp.IsCorrection != true
                        && taxLedgerReconciliationTmp.AccountingCurrencyBalanceDifference > 0;

                insert_recordset taxLedgerReconciliationTmpCZ
                (
                    TaxAmountMST,
                    CustVendAC,
                    TaxAccountName,
                    TaxDirection,
                    AmountMST,
                    VatRegisterDate,
                    LedgerAmountMST,
                    LedgerJournalId,
                    AccountingDate,
                    Voucher,
                    MainAccountId,
                    MainAccountName,
                    SumTaxAmount,
                    AccountingCurrencyBalanceDiffDebit,
                    AccountingCurrencyBalanceDiffCredit,
                    AccountingCurrencyBalanceDifference
                 )
                 select TaxAmountMST, CustVendAC, TaxAccountName, TaxDirection, AmountMST, VatRegisterDate,
                    LedgerAmountMST, LedgerJournalId, AccountingDate, Voucher, MainAccountId, MainAccountName, SumTaxAmount,
                    AccountingCurrencyBalanceDiffDebit, AccountingCurrencyBalanceDiffCredit, AccountingCurrencyBalanceDifference
                        from taxLedgerReconciliationTmp
                            where taxLedgerReconciliationTmp.IsCorrection == false;

                update_recordset taxLedgerReconciliationTmpCZ
                    setting
                        AccountingCurrencyBalanceDiffCredit =
                            taxLedgerReconciliationTmpCZ.AccountingCurrencyBalanceDiffCredit
                            + taxLedgerReconciliationTmp.AccountingCurrencyBalanceDiffCredit,
                        AccountingCurrencyBalanceDiffDebit =
                            taxLedgerReconciliationTmpCZ.AccountingCurrencyBalanceDiffDebit
                            + taxLedgerReconciliationTmp.AccountingCurrencyBalanceDiffDebit,
                        TaxAmountMST = taxLedgerReconciliationTmpCZ.TaxAmountMST
                            + taxLedgerReconciliationTmp.TaxAmountMST,
                        AmountMST =  taxLedgerReconciliationTmpCZ.AmountMST
                            + taxLedgerReconciliationTmp.AmountMST,
                        LedgerAmountMST =  taxLedgerReconciliationTmpCZ.LedgerAmountMST
                            + taxLedgerReconciliationTmp.LedgerAmountMST,
                        SumTaxAmount = taxLedgerReconciliationTmpCZ.SumTaxAmount
                            + taxLedgerReconciliationTmp.SumTaxAmount
                    join  taxLedgerReconciliationTmp
                        where taxLedgerReconciliationTmp.IsCorrection == true
                            && taxLedgerReconciliationTmp.AccountingDate == taxLedgerReconciliationTmpCZ.AccountingDate
                            && taxLedgerReconciliationTmp.LedgerJournalId == taxLedgerReconciliationTmpCZ.LedgerJournalId
                            && taxLedgerReconciliationTmp.Voucher == taxLedgerReconciliationTmpCZ.Voucher
                            && taxLedgerReconciliationTmp.MainAccountId == taxLedgerReconciliationTmpCZ.MainAccountId
                            && taxLedgerReconciliationTmp.CustVendAC == taxLedgerReconciliationTmpCZ.CustVendAC;

                insert_recordset taxLedgerReconciliationTmpCZ
                (
                    TaxAmountMST,
                    CustVendAC,
                    TaxAccountName,
                    TaxDirection,
                    AmountMST,
                    VatRegisterDate,
                    LedgerAmountMST,
                    LedgerJournalId,
                    AccountingDate,
                    Voucher,
                    MainAccountId,
                    MainAccountName,
                    SumTaxAmount,
                    AccountingCurrencyBalanceDiffDebit,
                    AccountingCurrencyBalanceDiffCredit,
                    AccountingCurrencyBalanceDifference
                 )

                 select   TaxAmountMST, CustVendAC, TaxAccountName, TaxDirection, AmountMST, VatRegisterDate,
                    LedgerAmountMST, LedgerJournalId, AccountingDate, Voucher, MainAccountId, MainAccountName, SumTaxAmount,
                    AccountingCurrencyBalanceDiffDebit, AccountingCurrencyBalanceDiffCredit, AccountingCurrencyBalanceDifference
                        from taxLedgerReconciliationTmp
                            where taxLedgerReconciliationTmp.IsCorrection == true
                 notexists join taxLedgerReconciliationTmpCZ
                    where taxLedgerReconciliationTmp.AccountingDate == taxLedgerReconciliationTmpCZ.AccountingDate
                        && taxLedgerReconciliationTmp.LedgerJournalId == taxLedgerReconciliationTmpCZ.LedgerJournalId
                        && taxLedgerReconciliationTmp.Voucher == taxLedgerReconciliationTmpCZ.Voucher
                        && taxLedgerReconciliationTmp.MainAccountId == taxLedgerReconciliationTmpCZ.MainAccountId
                        && taxLedgerReconciliationTmp.CustVendAC == taxLedgerReconciliationTmpCZ.CustVendAC;
            }
        }
        else
        {
            update_recordset taxLedgerReconciliationTmp
                setting
                    AccountingCurrencyBalanceDifference = taxLedgerReconciliationTmp.TaxAmountMST
                        - taxLedgerReconciliationTmp.LedgerAmountMST
                where taxLedgerReconciliationTmp.LedgerAmountMST != taxLedgerReconciliationTmp.TaxAmountMST;
        }

        if (this.parmShowDifferencesOnly())
        {
            if (isCZ)
            {
                delete_from taxLedgerReconciliationTmpCZ
                    where taxLedgerReconciliationTmpCZ.AccountingCurrencyBalanceDiffCredit == 0 &&
                          taxLedgerReconciliationTmpCZ.AccountingCurrencyBalanceDiffDebit == 0;
            }
            else
            {
                delete_from ledgerReconciliationLedgerTmp
                  exists join taxLedgerReconciliationTmp
                    where taxLedgerReconciliationTmp.MainAccountId == ledgerReconciliationLedgerTmp.MainAccountId
                      && ledgerReconciliationLedgerTmp.AccountingDate == taxLedgerReconciliationTmp.AccountingDate
                      && ledgerReconciliationLedgerTmp.Voucher == taxLedgerReconciliationTmp.Voucher
                      && ledgerReconciliationLedgerTmp.JournalNumber == taxLedgerReconciliationTmp.LedgerJournalId
                      && ledgerReconciliationLedgerTmp.IsCorrection == taxLedgerReconciliationTmp.IsCorrection
                      && taxLedgerReconciliationTmp.AccountingCurrencyBalanceDifference == 0;

                delete_from taxLedgerReconciliationTmp
                    where taxLedgerReconciliationTmp.AccountingCurrencyBalanceDifference == 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxLedgerReconciliation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs reconciliation between the ledger entries and the tax transactions.
    /// </summary>
    /// <param name="_userConnection">
    /// The user connection to use for the temporary tables.
    /// </param>
    /// <returns>
    /// The <c>TaxLedgerReconciliationTmp</c> record with the reconciled records.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxLedgerReconciliationTmp processTaxLedgerReconciliation(UserConnection _userConnection = null)
    {
        MainAccountTranslation mainAccountTranslation;
        MainAccount mainAccount;
        LanguageId languageId;

        if (_userConnection)
        {
            taxTransTmp.setConnection(_userConnection);
            taxLedgerReconciliationTmp.setConnection(_userConnection);
            taxLedgerReconciliationTmpCZ.setConnection(_userConnection);
            taxSummaryTable.setConnection(_userConnection);
            ledgerReconciliationLedgerTmp.setConnection(_userConnection);
            ledgerReconciliationLedgerTmpSummary.setConnection(_userConnection);
            ledgerReconcileAccountsTmp.setConnection(_userConnection);
            tmpTable.setConnection(_userConnection);
        }

        languageId = DimensionCache::currentDimensionValueLanguageId();

        isCZ = this.parmIncludeTaxAmountOriginDetail()
                && this.parmIncludeTaxDirectionDetail()
                && this.parmIncludeVATRegisterDateDetail();

        // Get general journal entries.
        this.createLedgerReconciliationLedgerTmp(isCZ);

        // Get tax transaction entries.
        this.insertTaxTransactions();

        // Process the differences between the Ledger and Tax Transactions.
        this.processTaxAndLedgerTrans();

        // Calculate Total and Grand Totals for the report.
        if (this.parmIncludeDetails())
        {
            this.calculateTotalAndGrandTotals(isCZ);
        }

        if (SsrsPreProcessReportSkipDefaultDatabaseTrxScope::instance().isEnabled())
        {
            taxTransTmp.dispose();
            taxSummaryTable.dispose();
            ledgerReconciliationLedgerTmp.dispose();
            ledgerReconciliationLedgerTmpSummary.dispose();
            ledgerReconcileAccountsTmp.dispose();
            tmpTable.dispose();
        }

        if (isCZ)
        {
            if (languageId)
            {
                update_recordset taxLedgerReconciliationTmpCZ setting
                    MainAccountName = mainAccountTranslation.Name
                join Name from mainAccountTranslation
                    where mainAccountTranslation.MainAccount == mainAccount.RecId
                        && mainAccount.MainAccountId == taxLedgerReconciliationTmpCZ.MainAccountId
                        && mainAccountTranslation.LanguageId == languageId;
            }
            return taxLedgerReconciliationTmpCZ;
        }
        else
        {
            if (languageId)
            {
                update_recordset taxLedgerReconciliationTmp setting
                    MainAccountName = mainAccountTranslation.Name
                join Name from mainAccountTranslation
                    where mainAccountTranslation.MainAccount == mainAccount.RecId
                        && mainAccount.MainAccountId == taxLedgerReconciliationTmp.MainAccountId
                        && mainAccountTranslation.LanguageId == languageId;
            }
            return taxLedgerReconciliationTmp;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reconcile</Name>
				<Source><![CDATA[
    private void reconcile()
    {
        if (this.parmIncludeDetails())
        {
            // present in both
            insert_recordset taxLedgerReconciliationTmp
            (
                TaxAmountMST,
                CustVendAC,
                TaxAccountName,
                TaxDirection,
                AmountMST,
                VatRegisterDate,
                LedgerAmountMST,
                LedgerJournalId,
                SubledgerJourId,
                AccountingDate,
                Voucher,
                MainAccountId,
                MainAccountName,
                IsCorrection
            )
            select TaxAmountMST, CustVendAC, TaxAccountName, TaxDirection, AmountMST, VatRegisterDate
                    from  taxTransTmp
                join AccountingCurrencyAmount, JournalNumber, SubledgerJourId, AccountingDate, Voucher, MainAccountId, MainAccountName, IsCorrection
                    from ledgerReconciliationLedgerTmp
                        where ledgerReconciliationLedgerTmp.MainAccountId == taxTransTmp.MainAccountId
                            && ledgerReconciliationLedgerTmp.AccountingDate == taxTransTmp.AccountingDate
                            && ledgerReconciliationLedgerTmp.Voucher == taxTransTmp.Voucher
                            && ledgerReconciliationLedgerTmp.JournalNumber == taxTransTmp.LedgerJournalId
                            && ledgerReconciliationLedgerTmp.SubledgerJourId == taxTransTmp.SubledgerJourId
                            && ledgerReconciliationLedgerTmp.IsCorrection == taxTransTmp.IsCorrection;

             // present in only ledger but not tax
            insert_recordset taxLedgerReconciliationTmp
            (
                LedgerAmountMST,
                LedgerJournalId,
                SubledgerJourId,
                AccountingDate,
                Voucher,
                MainAccountId,
                MainAccountName,
                IsCorrection
            )
            select AccountingCurrencyAmount, JournalNumber,SubledgerJourId, AccountingDate, Voucher, MainAccountId, MainAccountName, IsCorrection
                from ledgerReconciliationLedgerTmp
                    notexists join taxTransTmp
                        where taxTransTmp.MainAccountId == ledgerReconciliationLedgerTmp.MainAccountId
                            && taxTransTmp.AccountingDate == ledgerReconciliationLedgerTmp.AccountingDate
                            && taxTransTmp.Voucher == ledgerReconciliationLedgerTmp.Voucher
                            && taxTransTmp.LedgerJournalId == ledgerReconciliationLedgerTmp.JournalNumber
                            && taxTransTmp.SubledgerJourId == ledgerReconciliationLedgerTmp.SubledgerJourId
                            && taxTransTmp.IsCorrection == ledgerReconciliationLedgerTmp.IsCorrection;

            // present in tax but not ledger
            insert_recordset taxLedgerReconciliationTmp
            (
                TaxAmountMST,
                CustVendAC,
                TaxAccountName,
                TaxDirection,
                AmountMST,
                VatRegisterDate,
                AccountingDate,
                Voucher,
                MainAccountId,
                MainAccountName,
                IsCorrection,
                LedgerJournalId,
                SubledgerJourId
            )
            select TaxAmountMST, CustVendAC, TaxAccountName, TaxDirection, AmountMST, VatRegisterDate,
                AccountingDate, Voucher, MainAccountId, MainAccountName, IsCorrection, LedgerJournalId, SubledgerJourId from  taxTransTmp
                   notexists join ledgerReconciliationLedgerTmp
                        where ledgerReconciliationLedgerTmp.MainAccountId == taxTransTmp.MainAccountId
                            && ledgerReconciliationLedgerTmp.AccountingDate == taxTransTmp.AccountingDate
                            && ledgerReconciliationLedgerTmp.Voucher == taxTransTmp.Voucher
                            && ledgerReconciliationLedgerTmp.JournalNumber == taxTransTmp.LedgerJournalId
                            && ledgerReconciliationLedgerTmp.SubledgerJourId == taxTransTmp.SubledgerJourId
                            && ledgerReconciliationLedgerTmp.IsCorrection == taxTransTmp.IsCorrection;

            // group tax amounts
            insert_recordset tmpTable
            (
                    SumTaxAmount,
                    LedgerJournalId,
                    SubledgerJourId,
                    AccountingDate,
                    Voucher,
                    MainAccountId,
                    IsCorrection
            )
            select sum(TaxAmountMST), LedgerJournalId,SubledgerJourId, AccountingDate, Voucher, MainAccountId, IsCorrection from taxTransTmp
                group by MainAccountId, AccountingDate, LedgerJournalId,SubledgerJourId, Voucher, IsCorrection;

            // Update the SumTaxAmount column on each row to hold the group total amount.
            update_recordset taxLedgerReconciliationTmp
             setting SumTaxAmount = tmpTable.SumTaxAmount
              join tmpTable
               where taxLedgerReconciliationTmp.MainAccountId == tmpTable.MainAccountId
                  && taxLedgerReconciliationTmp.AccountingDate == tmpTable.AccountingDate
                  && taxLedgerReconciliationTmp.Voucher == tmpTable.Voucher
                  && taxLedgerReconciliationTmp.LedgerJournalId == tmpTable.LedgerJournalId
                  && taxLedgerReconciliationTmp.SubledgerJourId == tmpTable.SubledgerJourId
                  && taxLedgerReconciliationTmp.IsCorrection == tmpTable.IsCorrection;
        }
        else
        {
            // summary
            // fetch all the records matching between tax and ledger
            insert_recordset taxLedgerReconciliationTmp
            (
                TaxAmountMST,
                LedgerAmountMST,
                AccountingDate,
                MainAccountId,
                MainAccountName
            )
            select TaxAmountMST from  taxTransTmp
                join AccountingCurrencyAmount, AccountingDate, MainAccountId, MainAccountName
                    from ledgerReconciliationLedgerTmp
                        where ledgerReconciliationLedgerTmp.MainAccountId == taxTransTmp.MainAccountId
                            && ledgerReconciliationLedgerTmp.AccountingDate == taxTransTmp.AccountingDate;

            // fetch all the trans present only in tax but not ledger.
            insert_recordset taxLedgerReconciliationTmp
            (
                TaxAmountMST,
                AccountingDate,
                MainAccountId,
                MainAccountName
            )
            select TaxAmountMST, AccountingDate, MainAccountId, MainAccountName
                from taxTransTmp
                    notexists join ledgerReconciliationLedgerTmp
                        where ledgerReconciliationLedgerTmp.MainAccountId == taxTransTmp.MainAccountId
                            && ledgerReconciliationLedgerTmp.AccountingDate == taxTransTmp.AccountingDate;

            // fetch all the tran present only in ledger but not Tax trans.
            insert_recordset taxLedgerReconciliationTmp
            (
                LedgerAmountMST,
                AccountingDate,
                MainAccountId,
                MainAccountName
            )
            select AccountingCurrencyAmount, AccountingDate, MainAccountId, MainAccountName from ledgerReconciliationLedgerTmp
                notexists join taxTransTmp
                    where ledgerReconciliationLedgerTmp.MainAccountId == taxTransTmp.MainAccountId
                        && ledgerReconciliationLedgerTmp.AccountingDate == taxTransTmp.AccountingDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxTransOffsetAccountForTaxReporting</Name>
				<Source><![CDATA[
    private void insertTaxTransOffsetAccountForTaxReporting()
    {
        if (this.parmIncludeDetails())
        {
            if (isCZ)
            {
                this.insertTaxTransOffsetAccountIncludeDetetailForTaxReporting_CZ();
            }
            else
            {
                this.insertTaxTransOffsetAccountIncludeDetetailForTaxReporting();
            }
        }
        else
        {
            this.insertTaxTransOffsetAccountDefaultForTaxReporting();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxTransLedgerAccountForTaxReporting</Name>
				<Source><![CDATA[
    private void insertTaxTransLedgerAccountForTaxReporting()
    {
        if (this.parmIncludeDetails())
        {
            if (isCZ)
            {
                this.insertTaxTransLedgerAccountIncludeDetetailForTaxReporting_CZ();
            }
            else
            {
                this.insertTaxTransLedgerAccountIncludeDetetailForTaxReporting();
            }
        }
        else
        {
            this.insertTaxTransLedgerAccountDefaultForTaxReporting();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxTransOffsetAccountIncludeDetetailForTaxReporting_CZ</Name>
				<Source><![CDATA[
    private void insertTaxTransOffsetAccountIncludeDetetailForTaxReporting_CZ()
    {
        // Insert for Non Source Document Transactions with a Tax Transaction Relationship Type of Use Tax Payable (Detail).
        // Insert for IsCorrection is Yes.
        this.insertTaxTransOffsetAccountWithCorrectionIncludeDetetailForTaxReporting_CZ(NoYes::Yes);

        // Insert for IsCorrection is No.
        this.insertTaxTransOffsetAccountWithCorrectionIncludeDetetailForTaxReporting_CZ(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxTransOffsetAccountIncludeDetetailForTaxReporting</Name>
				<Source><![CDATA[
    private void insertTaxTransOffsetAccountIncludeDetetailForTaxReporting()
    {
        TaxTrans taxTrans;
        TaxTable taxTable;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccount mainAccount;
        DimensionAttributeValueCombination davc;
        // Insert for Non Source Document Transactions with a Tax Transaction Relationship Type of Use Tax Payable (Detail).
        insert_recordset taxTransTmp
        (
            AccountingDate,
            Voucher,
            TaxAmountMST,
            CustVendAC,
            TaxAccountName,
            LedgerJournalId,
            MainAccountId,
            MainAccountName
        )
            select TransDate, Voucher, sum(TaxAmount), TaxCode from taxTrans
                group by TransDate, Voucher, TaxCode
                where taxTrans.TransDate >= fromDate
                    && taxTrans.TransDate <= toDate
                    && taxTrans.Voucher >= fromVoucher
                    && taxTrans.Voucher <= toVoucher
                    && taxTrans.TaxDirection == TaxDirection::UseTax
                    && (taxTrans.SourceDocumentLine == 0 && taxTrans.TaxOrigin == TaxOrigin::TaxReporting)
            join TaxName from taxTable
                group by TaxName
                where taxTrans.TaxCode == taxTable.TaxCode
            join JournalNumber from generalJournalEntry
                group by JournalNumber
            join MainAccountId, Name from mainAccount
                group by MainAccountId, Name
                where  mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                && mainAccount.MainAccountId >= fromMainAccount
                && mainAccount.MainAccountId <= toMainAccount
            exists join taxTransGeneralJournalAccountEntry
                where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                    && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::UseTaxPayable
            exists join generalJournalAccountEntry
                where taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                    && generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            exists join davc
                where taxTransGeneralJournalAccountEntry.LedgerDimension == davc.RecId
                    && mainAccount.RecId == davc.MainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxTransOffsetAccountDefaultForTaxReporting</Name>
				<Source><![CDATA[
    private void insertTaxTransOffsetAccountDefaultForTaxReporting()
    {
        TaxTrans taxTrans;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccount mainAccount;
        DimensionAttributeValueCombination davc;

        // Insert for Non Source Document Transactions with a Tax Transaction Relationship Type of Use Tax Payable (Summary).
        insert_recordset taxSummaryTable
        (
            TaxAmountMST,
            MainAccountId,
            MainAccountName
        )
            select sum(TaxAmount) from taxTrans
                where taxTrans.TransDate >= fromDate
                    && taxTrans.TransDate <= toDate
                    && taxTrans.Voucher >= fromVoucher
                    && taxTrans.Voucher <= toVoucher
                    && taxTrans.TaxDirection == TaxDirection::UseTax
                    && (taxTrans.SourceDocumentLine == 0 && taxTrans.TaxOrigin == TaxOrigin::TaxReporting)
            join MainAccountId, Name from mainAccount
            group by MainAccountId, Name
            where mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                &&  mainAccount.MainAccountId >= fromMainAccount
                &&  mainAccount.MainAccountId <= toMainAccount
            exists join taxTransGeneralJournalAccountEntry
                where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                    && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::UseTaxPayable
            exists join davc
                where taxTransGeneralJournalAccountEntry.LedgerDimension == davc.RecId
                    && mainAccount.RecId == davc.MainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxTransLedgerAccountIncludeDetetailForTaxReporting_CZ</Name>
				<Source><![CDATA[
    private void insertTaxTransLedgerAccountIncludeDetetailForTaxReporting_CZ()
    {
        // Insert for IsCorrection is Yes.
        this.insertTaxTransLedgerAccountWithCorrectionIncludeDetetailForTaxReporting_CZ(NoYes::Yes);

        // Insert for IsCorrection is No.
        this.insertTaxTransLedgerAccountWithCorrectionIncludeDetetailForTaxReporting_CZ(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxTransLedgerAccountIncludeDetetailForTaxReporting</Name>
				<Source><![CDATA[
    private void insertTaxTransLedgerAccountIncludeDetetailForTaxReporting()
    {
        TaxTrans taxTrans;
        TaxTable taxTable;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccount mainAccount;
        DimensionAttributeValueCombination davc;
        // Insert for Non Source Document Transactions with a Tax Transaction Relationship Type of Tax (Detail).
        // In this case we need to capture the Tax Amount and the Tax in Cost Price.  We will have an
        // update statement after the insert to subtract the 2 values. X++ does not allow the math in-line.
        insert_recordset taxTransTmp
        (
            AccountingDate,
            Voucher,
            TaxAmountMST,
            LedgerAmountMST,
            CustVendAC,
            TaxAccountName,
            LedgerJournalId,
            MainAccountId,
            MainAccountName
        )
            select TransDate, Voucher, sum(TaxAmount), sum(TaxInCostPriceMST), TaxCode from taxTrans
                group by TransDate, Voucher, TaxCode
                where taxTrans.TransDate >= fromDate
                    && taxTrans.TransDate <= toDate
                    && taxTrans.Voucher >= fromVoucher
                    && taxTrans.Voucher <= toVoucher
                    && (taxTrans.TaxDirection == TaxDirection::IncomingTax
                        || taxTrans.TaxDirection == TaxDirection::OutgoingTax
                        || taxTrans.TaxDirection == TaxDirection::UseTax)
                    && (taxTrans.SourceDocumentLine == 0 && taxTrans.TaxOrigin == TaxOrigin::TaxReporting)
            join TaxName from taxTable
                group by TaxName
                where taxTrans.TaxCode == taxTable.TaxCode
            join JournalNumber from generalJournalEntry
                group by JournalNumber
            join MainAccountId, Name from mainAccount
                group by MainAccountId, Name
                where mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                &&  mainAccount.MainAccountId >= fromMainAccount
                &&  mainAccount.MainAccountId <= toMainAccount
            exists join taxTransGeneralJournalAccountEntry
                where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                &&    taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax
            exists join generalJournalAccountEntry
                where taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                    && generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            exists join davc
                where taxTransGeneralJournalAccountEntry.LedgerDimension == davc.RecId
                    && mainAccount.RecId == davc.MainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxTransLedgerAccountDefaultForTaxReporting</Name>
				<Source><![CDATA[
    private void insertTaxTransLedgerAccountDefaultForTaxReporting()
    {
        TaxTrans taxTrans;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccount mainAccount;
        DimensionAttributeValueCombination davc;

        // Insert for Non Source Document Transactions with a Tax Transaction Relationship Type of Tax (Summary).
        // In this case we need to capture the Tax Amount and the Tax in Cost Price.  We will have an
        // update statement after the insert to subtract the 2 values. X++ does not allow the math inline.
        insert_recordset taxSummaryTable
        (
            TaxAmountMST,
            LedgerAmountMST,
            MainAccountId,
            MainAccountName
        )
            select sum(TaxAmount), sum(TaxInCostPriceMST) from taxTrans
                where taxTrans.TransDate >= fromDate
                    && taxTrans.TransDate <= toDate
                    && taxTrans.Voucher >= fromVoucher
                    && taxTrans.Voucher <= toVoucher
                    && (taxTrans.TaxDirection == TaxDirection::IncomingTax
                        || taxTrans.TaxDirection == TaxDirection::OutgoingTax
                        || taxTrans.TaxDirection == TaxDirection::UseTax)
                    && (taxTrans.SourceDocumentLine == 0 && taxTrans.TaxOrigin == TaxOrigin::TaxReporting)
            join MainAccountId, Name from mainAccount
            group by MainAccountId, Name
            where mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                &&  mainAccount.MainAccountId >= fromMainAccount
                &&  mainAccount.MainAccountId <= toMainAccount
            exists join taxTransGeneralJournalAccountEntry
                where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                    && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax
            exists join davc
                where taxTransGeneralJournalAccountEntry.LedgerDimension == davc.RecId
                    && mainAccount.RecId == davc.MainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxTransOffsetAccountWithCorrectionIncludeDetetailForTaxReporting_CZ</Name>
				<Source><![CDATA[
    private void insertTaxTransOffsetAccountWithCorrectionIncludeDetetailForTaxReporting_CZ(NoYes _isCorrection)
    {
        TaxTrans taxTrans;
        TaxTrans_W taxTrans_W;
        TaxTable taxTable;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccount mainAccount;
        DimensionAttributeValueCombination davc;

        insert_recordset taxTransTmp
        (
            AccountingDate,
            Voucher,
            TaxAmountMST,
            CustVendAC,
            TaxDirection,
            AmountMST,
            IsCorrection,
            VatRegisterDate,
            TaxAccountName,
            LedgerJournalId,
            MainAccountId,
            MainAccountName
        )
            select TransDate, Voucher, sum(TaxAmount), TaxCode, TaxDirection, sum(TaxBaseAmount), _isCorrection from taxTrans
                group by TransDate, Voucher, TaxCode, TaxDirection
                where taxTrans.Voucher >= fromVoucher
                    && taxTrans.Voucher <= toVoucher
                    && taxTrans.TaxDirection == TaxDirection::UseTax
                    && (taxTrans.SourceDocumentLine == 0 && taxTrans.TaxOrigin == TaxOrigin::TaxReporting)
            join VatDueDate_W from taxTrans_W
                group by VatDueDate_W
                where taxTrans_W.TaxTrans == taxTrans.RecId
                    && taxTrans_W.VatDueDate_W >= fromDate
                    && taxTrans_W.VatDueDate_W <= toDate
            join TaxName from taxTable
                group by TaxName
                where taxTrans.TaxCode == taxTable.TaxCode
            join JournalNumber from generalJournalEntry
                group by JournalNumber
            join MainAccountId, Name from mainAccount
                group by MainAccountId, Name
                where mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                    && mainAccount.MainAccountId >= fromMainAccount
                    && mainAccount.MainAccountId <= toMainAccount
            exists join taxTransGeneralJournalAccountEntry
                where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                    && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::UseTaxPayable
            exists join generalJournalAccountEntry
                where taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                    && generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                    && generalJournalAccountEntry.IsCorrection == _isCorrection
            exists join davc
                where taxTransGeneralJournalAccountEntry.LedgerDimension == davc.RecId
                    && mainAccount.RecId == davc.MainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxTransLedgerAccountWithCorrectionIncludeDetetailForTaxReporting_CZ</Name>
				<Source><![CDATA[
    private void insertTaxTransLedgerAccountWithCorrectionIncludeDetetailForTaxReporting_CZ(NoYes _isCorrection)
    {
        TaxTrans taxTrans;
        TaxTable taxTable;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccount mainAccount;
        DimensionAttributeValueCombination davc;
        TaxTrans_W taxTrans_W;

        insert_recordset taxTransTmp
        (
            AccountingDate,
            Voucher,
            TaxAmountMST,
            CustVendAC,
            TaxDirection,
            AmountMST,
            IsCorrection,
            VatRegisterDate,
            TaxAccountName,
            LedgerJournalId,
            MainAccountId,
            MainAccountName
        )
            select TransDate, Voucher, sum(TaxAmount), TaxCode, TaxDirection, sum(TaxBaseAmount), _isCorrection from taxTrans
                group by TransDate, Voucher, TaxCode, TaxDirection
                where taxTrans.Voucher >= fromVoucher
                    && taxTrans.Voucher <= toVoucher
                    && (taxTrans.TaxDirection == TaxDirection::IncomingTax
                        || taxTrans.TaxDirection == TaxDirection::OutgoingTax
                        || taxTrans.TaxDirection == TaxDirection::UseTax)
                    && (taxTrans.SourceDocumentLine == 0 && taxTrans.TaxOrigin == TaxOrigin::TaxReporting)
                join VatDueDate_W from taxTrans_W
                group by VatDueDate_W
                where taxTrans_W.TaxTrans == taxTrans.RecId
                    && taxTrans_W.VatDueDate_W >= fromDate
                    && taxTrans_W.VatDueDate_W <= toDate
            join TaxName from taxTable
                group by TaxName
                where taxTrans.TaxCode == taxTable.TaxCode
            join JournalNumber from generalJournalEntry
                group by JournalNumber
            join MainAccountId, Name from mainAccount
                group by MainAccountId, Name
                where mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                    && mainAccount.MainAccountId >= fromMainAccount
                    && mainAccount.MainAccountId <= toMainAccount
            exists join taxTransGeneralJournalAccountEntry
                where taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                    && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax
            exists join generalJournalAccountEntry
                where taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                    && generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                    && generalJournalAccountEntry.IsCorrection == _isCorrection
            exists join davc
                where taxTransGeneralJournalAccountEntry.LedgerDimension == davc.RecId
                    && mainAccount.RecId == davc.MainAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>