<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJobType_Burden</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This method is a production job type for Burden
/// </summary>
class ProdJobType_Burden extends ProdJobType
{
    PmfProdCoBy byproduct;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns calculated amout of route trans
    /// </summary>
    /// <param name="_prodRouteTrans">Production route trans record</param>
    /// <returns>returns cost</returns>
    public CostAmount calcAmount(ProdRouteTrans _prodRouteTrans)
    {
        return _prodRouteTrans.calcAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalCategoryHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks the transaction for category hours, just returns true
    /// </summary>
    /// <param name="_prodJournalRoute">Production journal route</param>
    /// <param name="_mandatory">Mandatory flag</param>
    /// <returns>returns flag</returns>
    public boolean checkJournalCategoryHours(
        ProdJournalRoute _prodJournalRoute,
        NoYes _mandatory = NoYes::No)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalCategoryQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks the transaction for category qty, just returns true
    /// </summary>
    /// <param name="_prodJournalRoute">Production journal route</param>
    /// <param name="_mandatory">Mandatory flag</param>
    /// <returns>returns flag</returns>
    public boolean checkJournalCategoryQty(
        ProdJournalRoute _prodJournalRoute,
        NoYes _mandatory = NoYes::No)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalEmployee</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks the transaction for employee, just returns true
    /// </summary>
    /// <param name="_prodJournalRoute">Production journal route</param>
    /// <param name="_mandatory">Mandatory flag</param>
    /// <returns>returns flag</returns>
    public boolean checkJournalEmployee(
        ProdJournalRoute _prodJournalRoute,
        NoYes _mandatory = NoYes::No)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks the transaction for hours, just returns true
    /// </summary>
    /// <param name="_prodJournalRoute">Production journal route</param>
    /// <param name="_ask">ask flag</param>
    /// <returns>returns flag</returns>
    public boolean checkJournalHours(
        ProdJournalRoute _prodJournalRoute,
        boolean _ask = false)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalJobActivation</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks the transaction for job activation, just returns true
    /// </summary>
    /// <param name="_prodJournalRoute">Production journal route</param>
    /// <param name="_mandatory">Mandatory flag</param>
    /// <returns>returns flag</returns>
    public boolean checkJournalJobActivation(
        ProdJournalRoute _prodJournalRoute,
        NoYes _mandatory = NoYes::No)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalJobId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks the transaction for jobId, just returns true
    /// </summary>
    /// <param name="_prodJournalRoute">Production journal route</param>
    /// <param name="_mandatory">Mandatory flag</param>
    /// <returns>returns flag</returns>
    public boolean checkJournalJobId(
        ProdJournalRoute _prodJournalRoute,
        NoYes _mandatory = NoYes::No)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalNumOfError</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks the transaction for number of errors, just returns true
    /// </summary>
    /// <param name="_prodJournalRoute">Production journal route</param>
    /// <param name="_ask">ask flag</param>
    /// <returns>returns flag</returns>
    public boolean checkJournalNumOfError(
        ProdJournalRoute _prodJournalRoute,
        boolean _ask = false)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalNumOfGood</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks the transaction for number of good, just returns true
    /// </summary>
    /// <param name="_prodJournalRoute">Production journal route</param>
    /// <param name="_ask">ask flag</param>
    /// <returns>returns flag</returns>
    public boolean checkJournalNumOfGood(
        ProdJournalRoute _prodJournalRoute,
        boolean _ask = false)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalOprId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks the transaction for operation Id, just returns true
    /// </summary>
    /// <param name="_prodJournalRoute">Production journal route</param>
    /// <param name="_mandatory">Mandatory flag</param>
    /// <returns>returns flag</returns>
    public boolean checkJournalOprId(
        ProdJournalRoute _prodJournalRoute,
        NoYes _mandatory = NoYes::No)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalOprNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks the transaction for operation num, just returns true
    /// </summary>
    /// <param name="_prodJournalRoute">Production journal route</param>
    /// <param name="_mandatory">Mandatory flag</param>
    /// <returns>returns flag</returns>
    public boolean checkJournalOprNum(
        ProdJournalRoute _prodJournalRoute,
        NoYes _mandatory = NoYes::No)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalPayrollCategoryHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks the transaction for payroll category hours, just returns true
    /// </summary>
    /// <param name="_prodJournalRoute">Production journal route</param>
    /// <param name="_mandatory">Mandatory flag</param>
    /// <returns>returns flag</returns>
    public boolean checkJournalPayrollCategoryHours(
        ProdJournalRoute _prodJournalRoute,
        NoYes _mandatory = NoYes::No)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalPayrollCategoryQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks the transaction for payorll category qty, just returns true
    /// </summary>
    /// <param name="_prodJournalRoute">Production journal route</param>
    /// <param name="_mandatory">Mandatory flag</param>
    /// <returns>returns flag</returns>
    public boolean checkJournalPayrollCategoryQty(
        ProdJournalRoute _prodJournalRoute,
        NoYes _mandatory = NoYes::No)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalWIPLedgerAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks the transaction for WIP ledger accounts, just returns true
    /// </summary>
    /// <param name="_prodJournalRoute">Production journal route</param>
    /// <returns>returns flag</returns>
    public boolean checkJournalWIPLedgerAccounts(
        ProdJournalRoute _prodJournalRoute)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalWrkCtrId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method checks the transaction for workcenter id, just returns true
    /// </summary>
    /// <param name="_prodJournalRoute">Production journal route</param>
    /// <param name="_mandatory">Mandatory flag</param>
    /// <returns>returns flag</returns>
    public boolean checkJournalWrkCtrId(
        ProdJournalRoute _prodJournalRoute,
        NoYes _mandatory = NoYes::No)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costEstimateHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns if cost estimate hours is required
    /// </summary>
    /// <param name="_routeGroup">Route Group</param>
    /// <returns>returns flag</returns>
    public NoYes costEstimateHours(
        RouteGroup _routeGroup)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCalcBePosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns if calc should be posted
    /// </summary>
    /// <param name="_prodRouteTrans">Production route trans</param>
    /// <returns>returns flag</returns>
    public boolean mustCalcBePosted(
        ProdRouteTrans _prodRouteTrans)
    {
        return _prodRouteTrans.Amount != 0.00;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustWIPBePosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns if WIP should be posted
    /// </summary>
    /// <param name="_prodRouteTrans">Production route trans</param>
    /// <returns>returns flag</returns>
    public boolean mustWIPBePosted(
        ProdRouteTrans _prodRouteTrans)
    {
        return _prodRouteTrans.Amount != 0.00;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceIssueLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionAccount resourceIssueLedgerDimension(ProdRouteTrans _prodRouteTrans)
    {
        return LedgerDimensionFacade::serviceCreateLedgerDimension(RouteCostCategory::find(_prodRouteTrans.CategoryId).ResourceIssueLedgerDimension, _prodRouteTrans.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceIssueOffsetLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionAccount resourceIssueOffsetLedgerDimension(ProdRouteTrans _prodRouteTrans)
    {
        return LedgerDimensionFacade::serviceCreateLedgerDimension(RouteCostCategory::find(_prodRouteTrans.CategoryId).ResourceIssueOffsetLedgerDimension, _prodRouteTrans.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeJobType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns route job type
    /// </summary>
    /// <returns>job type</returns>
    public RouteJobType routeJobType()
    {
        return RouteJobType::Burden;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipIssueLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionAccount wipIssueLedgerDimension(ProdRouteTrans _prodRouteTrans)
    {
        return LedgerDimensionFacade::serviceCreateLedgerDimension(RouteCostCategory::find(_prodRouteTrans.CategoryId).wipIssueLedgerDimension, _prodRouteTrans.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipValuationLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionAccount wipValuationLedgerDimension(ProdRouteTrans _prodRouteTrans)
    {
        return LedgerDimensionFacade::serviceCreateLedgerDimension(RouteCostCategory::find(_prodRouteTrans.CategoryId).wipValuationLedgerDimension, _prodRouteTrans.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costEstimateQty</Name>
				<Source><![CDATA[
    NoYes costEstimateQty(RouteGroup routeGroup)
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureByProductReferenceIsProvided</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures the byproduct reference is provided.
    /// </summary>
    /// <param name="_prodTable">
    /// The <c>ProdTable</c> record.
    /// </param>
    /// <param name="_prodRouteTrans">
    /// The <c>ProdRouteTrans</c> record.
    /// </param>
    private void ensureByProductReferenceIsProvided(ProdTable        _prodTable,
                                                    ProdRouteTrans   _prodRouteTrans)
    {
        if (!byproduct)
        {
            byproduct = PmfProdCoBy::findByProdItemDim(_prodtable.ProdId,
                                                       _prodRouteTrans.ServiceItemId,
                                                       _prodRouteTrans.ServiceInventDimId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJmgJobRefCost</Name>
				<Source><![CDATA[
    public JmgJobRefCost parmJmgJobRefCost(JmgJobRefCost _value = null)
    {
        //Burden route postings cannot use clock registrations from the shop floor control
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdCoBy</Name>
				<Source><![CDATA[
    public PmfProdCoBy parmProdCoBy(PmfProdCoBy _byproduct = byproduct)
    {
        byproduct = _byproduct;
        return byproduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRealConsumption</Name>
				<Source><![CDATA[
    public void updateRealConsumption(ProdTable        _prodTable,
                                      ProdRouteTrans   _prodRouteTrans,
                                      boolean          _addValues = true,
                                      Percent          _pmfAllocation = 100)
    {
        setprefix("@SYS28532");
        setprefix(#PreFixField(_ProdRouteTrans,OprNum));

        ItemCalcType calcType = ItemCalcType::Burden;

        this.ensureByProductReferenceIsProvided(_prodTable, _prodRouteTrans);
        var costGroupId = BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, _prodRouteTrans.routeCostCategory().CostGroupId);

        ProdCalcTrans prodCalcTrans = ProdCalcTrans::findIdRefCalcType(byproduct.TableId,
                                                                       byproduct.RecId,
                                                                       calcType,
                                                                       true,
                                                                       byproduct.ItemId,
                                                                       _prodRouteTrans.OprId,
                                                                       _prodRouteTrans.OprNum,
                                                                       costGroupId);

        if (!prodCalcTrans)
        {
            prodCalcTrans.initFromProdTable(_prodTable, calcType);
            prodCalcTrans.initFromPmfProdCoByProduct(byproduct);
            prodCalcTrans.Resource      = byproduct.ItemId;
            prodCalcTrans.OprId         = _prodRouteTrans.OprId;
            prodCalcTrans.OprNum        = _prodRouteTrans.OprNum;
            prodCalcTrans.Production    = NoYes::No;
            prodCalcTrans.CostGroupId   = costGroupId;
            prodCalcTrans.UnitId        = InventTableModule::find(_prodTable.ItemId, ModuleInventPurchSales::Invent).UnitId;
            prodCalcTrans.LineNum       = ProdCalcTrans::lastLineNum(_prodTable.ProdId, ProdTransRefType::Production) + 1;
        }

        if (!_addValues)
        {
            prodCalcTrans.RealConsump = 0;
        }

        prodCalcTrans.RealConsump       += _prodRouteTrans.QtyGood   * _pmfAllocation / 100;
        prodCalcTrans.RealCostAmount    =  prodCalcTrans.RealConsump * _prodRouteTrans.QtyPrice;

        prodCalcTrans.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRealConsumptionCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method updates the realized (actual) consumption for the co/byproduct.
    /// </summary>
    /// <param name="_prodTable">
    /// The <c>ProdTable</c> record.
    /// </param>
    /// <param name="_prodRouteTrans">
    /// The <c>ProdRouteTrans</c> record.
    /// </param>
    /// <param name="_allocation">
    /// The cost allocation percent.
    /// </param>
    /// <param name="_cobyRecId">
    /// The RecId of the co/byproduct record.
    /// </param>
    public void updateRealConsumptionCoBy(
        ProdTable       _prodTable,
        ProdRouteTrans  _prodRouteTrans,
        Percent         _allocation,
        RecId           _cobyRecId)
    {
        setprefix("@SYS28532");
        setprefix(#PreFixField(_prodRouteTrans,OprNum));

        this.ensureByProductReferenceIsProvided(_prodTable, _prodRouteTrans);

        ItemCalcType calcType = ItemCalcType::Burden;

        PmfCoByProdCalcTrans pmfCoByProdCalcTrans = PmfCoByProdCalcTrans::findIdRefCalcType(
                                                                             byproduct.TableId,
                                                                             byproduct.RecId,
                                                                             _cobyRecId,
                                                                             calcType,
                                                                             true);

        if (!pmfCoByProdCalcTrans)
        {
            pmfCoByProdCalcTrans.initFromProdTable(_prodTable, calcType);
            pmfCoByProdCalcTrans.initFromPmfProdCoByProduct(byproduct);
            pmfCoByProdCalcTrans.Production         = NoYes::No;
            pmfCoByProdCalcTrans.Resource           = byproduct.ItemId;
            pmfCoByProdCalcTrans.CostGroupId        = BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, _prodRouteTrans.routeCostCategory().CostGroupId);
            pmfCoByProdCalcTrans.CalcType           = calcType;
            pmfCoByProdCalcTrans.UnitId             = PmfCoByProdCalcTrans::calcHourUnit();
            pmfCoByProdCalcTrans.PmfIdRefCoByRecId  = _coByRecId;
        }

        pmfCoByProdCalcTrans.RealConsump    += _prodRouteTrans.QtyGood  * _allocation/100;
        pmfCoByProdCalcTrans.RealCostAmount  = _prodRouteTrans.QtyPrice * pmfCoByProdCalcTrans.RealConsump;
        pmfCoByProdCalcTrans.write();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
