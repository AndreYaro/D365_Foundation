<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099Report2Disc</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Tax1099Report2Disc extends RunBase
{
    Filename filename;
    QueryRun queryRunTax1099;
    Counter realSequenceNumber;
    boolean isCombinedFiling;

    str qr_TransDate, qr_VendAccount;

    Tax1099PriorYearIndicator priorYearDataIndicator;
    Tax1099SofwareVendorIndicator softwareVendorIndicator;
    Tax1099FileIndicator fileIndicator;
    str 1 feIndicator;
    str 2 mtfIndicator;

    str bufText;
    boolean testFile;
    private boolean box1ASum;

    CompanyInfo companyInfo;
    List bufferTextList;
    container packedBufferTextList;

    Tax1099ERecord outputRecord;

    DialogField dialogfileName;
    Tax1099CalendarYear calendarYear;
    TransDate fromDate;
    TransDate toDate;
    VendAccount fromVendor;
    VendAccount toVendor;

    DialogField dialogCalendarYear;
    DialogField dialogFileIndicator;
    DialogField dialogTestFile;
    DialogField dialogSoftwareVendorIndicator;
    DialogField dialogFromVendor;
    DialogField dialogToVendor;
    DialogField dialogFromDate;
    DialogField dialogToDate;
    DialogField dialogBox1ASum;

    const str two = '2';

    #define.CurrentVersion(8)
    #LOCALMACRO.CurrentList
        filename,
        CalendarYear,
        fEIndicator,
        mTFIndicator,
        softwareVendorIndicator,
        fileIndicator,
        testFile,
        qr_TransDate,
        qr_VendAccount,
        priorYearDataIndicator,
        packedBufferTextList,
        box1ASum
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        Dialog dialog = super();

        dialog.caption("@SYS84890");

        dialogCalendarYear = dialog.addFieldValue(extendedTypeStr(Tax1099CalendarYear), calendarYear, "@AccountsPayable:Tax1099CalendarYearLabel");
        dialogFileIndicator = dialog.addFieldValue(enumStr(Tax1099FileIndicator), fileIndicator);
        dialogTestFile = dialog.addFieldValue(extendedTypeStr(NoYesId), testFile, "@AccountsPayable:Tax1099TestFileLabel");

        DialogGroup dialogGroup1099Div = dialog.addGroup("@AccountsPayable:Tax1099DivDialogGroup");
        dialogBox1ASum = dialog.addFieldValue(extendedTypeStr(NoYesId), box1ASum, "@AccountsPayable:Tax1099ReportBox1ASum");
        dialogBox1ASum.value(true);

        dialog.addMenuItemButton(MenuItemType::Display,menuitemDisplayStr(OMLegalEntities),DialogMenuItemGroup::RightGrp);
        dialog.addMenuItemButton(MenuItemType::Display,menuitemDisplayStr(Tax1099TransmitterParameters),DialogMenuItemGroup::RightGrp);
        dialog.addMenuItemButton(MenuItemType::Display,menuitemDisplayStr(Tax1099SoftwareVendParameters),DialogMenuItemGroup::RightGrp);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateIRSPayerRecs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads data in the <c>Tax1099IRSPayerRec</c> table.
    /// </summary>
    /// <remarks>
    /// The data is loaded from the <c>Tax1099Summary</c>, <c>VendTable</c>, and <c>Tax1099Fields</c>
    /// tables. The loaded data is used to export the file.
    /// </remarks>
    private Tax1099IRSPayerRec generateIRSPayerRecs()
    {
        Query q = new Query();

        Tax1099Summary summary;

        QueryBuildDataSource qbdsTax1099Summary = q.addDataSource(tableNum(Tax1099Summary));
        qbdsTax1099Summary.addSortIndex(indexNum(Tax1099Summary, VendTaxBoxState));
        qbdsTax1099Summary.indexIsHint(true);
        qbdsTax1099Summary.addRange(fieldNum(Tax1099Summary, VendAccount)).value(qr_VendAccount);
        qbdsTax1099Summary.addOrderByField(fieldNum(tax1099Summary, VendAccount), SortOrder::Ascending);

        QueryBuildDataSource qbdsVendTable = qbdsTax1099Summary.addDataSource(tableNum(VendTable));
        qbdsVendTable.joinMode(JoinMode::InnerJoin);
        qbdsVendTable.fetchMode(QueryFetchMode::One2One);
        qbdsVendTable.relations(true);
        qbdsVendTable.addLink(fieldNum(Tax1099Summary, VendAccount), fieldNum(VendTable, AccountNum));

        QueryBuildDataSource qbdsTax1099Fields = qbdsTax1099Summary.addDataSource(tableNum(Tax1099Fields));
        qbdsTax1099Fields.joinMode(JoinMode::InnerJoin);
        qbdsTax1099Fields.fetchMode(QueryFetchMode::One2One);
        qbdsTax1099Fields.relations(true);
        qbdsTax1099Fields.addLink(fieldNum(Tax1099Summary, Tax1099Fields), fieldNum(Tax1099Fields, RecId));
        qbdsTax1099Fields.addOrderByField(fieldNum(Tax1099Fields, Tax1099Type), SortOrder::Descending);

        QueryBuildDataSource qbdsVend1099OIDDetail = qbdsVendTable.addDataSource(tableNum(Vend1099OIDDetail));
        qbdsVend1099OIDDetail.joinMode(JoinMode::OuterJoin);
        qbdsVend1099OIDDetail.fetchMode(QueryFetchMode::One2One);
        qbdsVend1099OIDDetail.relations(true);

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            qbdsTax1099Summary.addOrderByField(fieldNum(tax1099Summary, Tax1099TaxYear), SortOrder::Ascending);
        }

        QueryRun qr = new QueryRun(q);

        Tax1099IRSPayerRec localIRSPayerRec;

        VendAccount     lastVendor = '';
        Tax1099Type     lastTypeOfTax1099;
        Tax1099State    lastTax1099State;
        Tax1099Box      last1099Box;
        Tax1099TaxYear  last1099TaxYear;
        VendInvoiceId   lastVendInvoiceId;

        boolean report1099;

        Tax1099Summary tax1099Summary;
        VendTable vendTable;
        LogisticsPostalAddress postalAddress;
        Tax1099Fields tax1099Fields;
        Vend1099OIDDetail vend1099OIDDetail;

        Tax1099IForm tax1099Form;

        boolean isChangingVendors;
        boolean isChangingTypes;
        boolean isChangingStates;

        ttsbegin;

        while (qr.next())
        {
            tax1099Summary = qr.get(tableNum(Tax1099Summary));
            vendTable = qr.get(tableNum(VendTable));
            postalAddress = vendTable.postalAddress();
            tax1099Fields = qr.get(tableNum(Tax1099Fields));
            vend1099OIDDetail = qr.get(tableNum(Vend1099OIDDetail));

            tax1099Form = Tax1099Base::createTax1099IForm(tax1099Fields.Tax1099Type);

            if (tax1099Summary.irsReportable == NoYes::Yes)
            {
                isChangingVendors = tax1099Summary.VendAccount != lastVendor;

                isChangingTypes = lastTypeOfTax1099 != tax1099Fields.Tax1099Type
                    || (tax1099Fields.Tax1099Type == Tax1099Type::F1099G && tax1099Summary.Tax1099TaxYear != last1099TaxYear)
                    || tax1099Fields.Tax1099Type == Tax1099Type::F1099S;

                isChangingStates = isCombinedFiling ? tax1099Summary.Tax1099State != lastTax1099State : false;

                if (isChangingVendors || isChangingTypes || isChangingStates)
                {
                    // If this isn't the first record, do an update
                    if (lastVendor != '')
                    {
                        if (report1099)
                        {
                            localIRSPayerRec.Reportable = NoYes::Yes;
                        }

                        localIRSPayerRec.update();
                    }

                    // Clear the record, get the new data, and do an insert
                    report1099 = false;

                    localIRSPayerRec.clear();
                    localIRSPayerRec.PayeeNameLine = vendTable.name();
                    localIRSPayerRec.SecondPayeeName = vendTable.dba;
                    localIRSPayerRec.MailingAddress = postalAddress.Street;
                    localIRSPayerRec.City = postalAddress.City;
                    localIRSPayerRec.State = postalAddress.State;
                    localIRSPayerRec.ZipCode = postalAddress.ZipCode;
                    localIRSPayerRec.AcctNumForPayee = vendTable.AccountNum;
                    localIRSPayerRec.VendAccount = vendTable.AccountNum;
                    localIRSPayerRec.Tax1099RegNum = vendTable.Tax1099RegNum;
                    localIRSPayerRec.FATCAFilingRequirement = vendTable.FATCAFilingRequirement;
                    localIRSPayerRec.Tax1099StateTaxID = tax1099Summary.Tax1099State;

                    // Tax1099-S
                    localIRSPayerRec.Tax1099AddressOrLegalDesc = tax1099Summary.Tax1099AddressOrLegalDesc;
                    localIRSPayerRec.Tax1099DateOfClosing = tax1099Summary.Tax1099DateOfClosing;

                    // Tax1099-G
                    localIRSPayerRec.Tax1099TaxYear = tax1099Summary.Tax1099TaxYear;
                    localIRSPayerRec.Tax1099TradeOrBusiness = tax1099Summary.Tax1099TradeOrBusiness;
                    localIRSPayerRec.Tax1099AddressOrLegalDesc = tax1099Summary.Tax1099AddressOrLegalDesc;

                    if (vend1099OIDDetail)
                    {
                        localIRSPayerRec.CUSIPDetails = vend1099OIDDetail.CUSIPId;
                    }

                    if (vendTable.ForeignEntityIndicator == NoYes::Yes)
                    {
                        localIRSPayerRec.ForeignCountryRegionInd = '1';
                        localIRSPayerRec.ForeignCountryRegionName = vendTable.countryRegionName();
                        localIRSPayerRec.Tax1099ForeignIndicator = vendTable.ForeignEntityIndicator;
                    }

                    switch (vendTable.TaxIDType)
                    {
                        case TaxIDType::ATIN:
                        case TaxIDType::ITIN:
                        case TaxIDType::SSN:
                            localIRSPayerRec.TypeOfTIN = '2';
                            break;
                        case TaxIDType::EIN:
                            localIRSPayerRec.TypeOfTIN = '1';
                            break;
                    }

                    localIRSPayerRec.SecondTIN = vendTable.SecondTIN == NoYes::Yes ? two : ' ';
                    localIRSPayerRec.Tax1099Type = tax1099Fields.Tax1099Type;

                    localIRSPayerRec.insert();
                }

                tax1099Form = Tax1099Base::createTax1099IForm(tax1099Fields.Tax1099Type);
                tax1099Form.updateTotals(tax1099Fields, localIRSPayerRec, tax1099Summary);

                if (report1099 == false)
                {
                    report1099 = tax1099Summary.irsReportable == NoYes::Yes ? NoYes::Yes : NoYes::No;
                }

                lastVendor = tax1099Summary.VendAccount;
                lastTypeOfTax1099 = tax1099Fields.Tax1099Type;
                lastTax1099State = tax1099Summary.Tax1099State;

                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    last1099Box = Tax1099Fields::find(tax1099Summary.Tax1099Fields).Tax1099Box;
                    lastVendInvoiceId = tax1099Summary.VendInvoiceId;
                    last1099TaxYear = tax1099Summary.Tax1099TaxYear;
                }
            }
        }

        if (lastVendor != '')
        {
            if (report1099)
            {
                localIRSPayerRec.Reportable = NoYes::Yes;
            }

            localIRSPayerRec.update();
        }

        ttscommit;

        return localIRSPayerRec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        int tempval;

        calendarYear = dialogCalendarYear.value();
        tempval = str2int(calendarYear);

        if (tempval < 2000)
        {
            throw error("@SYS84895");
        }

        priorYearDataIndicator = tempval < 2003 ? 'P' : '';
        filename = 'IRSTAX';
        fileIndicator = dialogFileIndicator.value();
        testFile = dialogTestFile.value();

        box1ASum = dialogBox1ASum.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumPayeesForCompany</Name>
				<Source><![CDATA[
    private int getNumPayeesForCompany(AddressStateId _state = '')
    {
        Tax1099IRSPayerRec localIRSPayerRec;

        if (_state == '')
        {
            select count(RecId) from localIRSPayerRec;
        }
        else
        {
            select count(RecId) from localIRSPayerRec
                where localIRSPayerRec.State == _state;
        }

        return int642int(localIRSPayerRec.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        bufferTextList = new List(Types::String);

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceUS00003, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    public AsciiStreamIo open()
    {
        AsciiStreamIo file;

        if (filename)
        {
            file = Tax1099Report2Disc::newFile();

            if (!file || file.status() != IO_Status::Ok)
            {
                throw error(strFmt("@SYS19312", filename));
            }
        }

        return file;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        packedBufferTextList = bufferTextList.pack();

        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the CompanyInfo variable.
    /// </summary>
    /// <param name="_companyInfo">
    /// This value is set in CompanyInfo variable of the class.
    /// </param>
    /// <returns>
    /// The value of <c>companyInfo</c> variable.
    /// </returns>
    /// <remarks>
    /// This method gets or sets the CompanyInfo variable of the class.
    /// </remarks>
    public CompanyInfo parmCompanyInfo(CompanyInfo _companyInfo = companyInfo)
    {
        companyInfo = _companyInfo;

        return companyInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>FileName</c> field.
    /// </summary>
    /// <param name="_filename">
    /// This value that will be used to set the <c>FileName</c> field of the object.
    /// </param>
    /// <returns>
    /// The value of <c>FileName</c> field.
    /// </returns>
    /// <remarks>
    /// This method gets or sets the <c>FileName</c> field of the object.
    /// </remarks>
    public Filename parmFileName(str _filename = filename)
    {
        filename = _fileName;

        return filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOutputRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the <c>OutputRecord</c> variable.
    /// </summary>
    /// <param name="_outputRecord">
    /// This value is set in <c>OutputRecord</c> variable of the class.
    /// </param>
    /// <returns>
    /// The value of <c>outputRecord</c> variable.
    /// </returns>
    /// <remarks>
    /// This method gets or sets the <c>OutputRecord</c> variable of the class.
    /// </remarks>
    public str parmOutputRecord(str _outputRecord = outputRecord)
    {
        outputRecord = _outputRecord;

        return outputRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQr_TransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the <c>Qr_TransDate</c> variable.
    /// </summary>
    /// <param name="_qr_TransDate">
    /// This value is set in <c>Qr_TransDate</c> variable of the class.
    /// </param>
    /// <returns>
    /// The value of <c>qr_TransDate</c> variable.
    /// </returns>
    /// <remarks>
    /// This method gets or sets the <c>Qr_TransDate</c> variable of the class.
    /// </remarks>
    public str parmQr_TransDate(str _qr_TransDate = qr_TransDate)
    {
        qr_TransDate = _qr_TransDate;

        return qr_TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQr_VendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or Sets the <c>Qr_VendAccount</c> variable.
    /// </summary>
    /// <param name="_qr_VendAccount">
    /// This value is set in <c>Qr_VendAccount</c> variable of the class.
    /// </param>
    /// <returns>
    /// The value of <c>Qr_VendAccount</c> variable.
    /// </returns>
    /// <remarks>
    /// This method gets or sets the <c>Qr_VendAccount</c> variable of the class.
    /// </remarks>
    public str parmQr_VendAccount(str _qr_VendAccount = qr_VendAccount)
    {
        qr_VendAccount = _qr_VendAccount;

        return qr_VendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRecordToFile</Name>
				<Source><![CDATA[
    public void writeRecordToFile(Tax1099ElectronicRecordBase _record, Tax1099IRSPayerRec _localIRSPayerRec = null)
    {
        str output = _record.generateRecord(realSequenceNumber, calendarYear, isCombinedFiling, _localIRSPayerRec);
        this.printRecord(strUpr(output));

        realSequenceNumber += 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printRecord</Name>
				<Source><![CDATA[
    public void printRecord(str _data)
    {
        #define.BufferSize(524288)

        int length = strLen(bufText);

        // Export data to file when string size > 1024*1024 bytes (512*1024 chars)
        if (length > #BufferSize)
        {
            bufferTextList.addEnd(bufText);
            bufText = _data;
        }
        else if (length > 0)
        {
            bufText += '\r\n';
            bufText += _data;
        }
        else
        {
            bufText = _data;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRunTax1099;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls methods necessary to generate the contents of the 1099 Electronic File
    /// </summary>
    public void run()
    {
        Tax1099SoftwareVendParameters tax1099SoftwareVendParameters = Tax1099SoftwareVendParameters::find();
        Tax1099TransmitterParameters tax1099TransmitterParameters = Tax1099TransmitterParameters::find();

        if (tax1099SoftwareVendParameters.ForeignEntityIndicator == NoYes::Yes || tax1099TransmitterParameters.ForeignEntityIndicator == NoYes::Yes)
        {
            feIndicator = '1';
        }

        companyInfo = CompanyInfo::find();
        this.generateFileContents(companyInfo, calendarYear);

        bufferTextList.addEnd(bufText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFileContents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the 1099 Electronic file, storing the resulting strings in a buffer
    /// </summary>
    /// <remarks>
    /// Logic for producing each different type of record (A,B,C,T,F,K) are present in their own respective classes
    /// from which objects are made to generate the file. Parameters are stored in the scope of the class, but are passed in for testing purposes.
    /// </remarks>
    /// <param name = "_companyInfo">The current company</param>
    /// <param name = "_calendarYear">The calendar year specified by the user</param>
    public void generateFileContents(CompanyInfo _companyInfo, Tax1099CalendarYear _calendarYear)
    {
        Tax1099Summary runTax1099Summary;
        Tax1099Fields tax1099Fields;

        realSequenceNumber = 1;
        isCombinedFiling = _companyInfo.CombinedFedStateFiler == NoYes::Yes;
        calendarYear = _calendarYear;

        int numberOfARecords;
        int numberOfBRecords;
        int numberOfBRecordsForType;

        Tax1099IRSPayerRec localTax1099IRSPayerRec = this.generateIRSPayerRecs();

        //Write T Record to file
        Tax1099TRecord localTRecord = Tax1099TRecord::construct(priorYearDataIndicator, numberOfBRecords, testFile);
        this.writeRecordToFile(localTRecord);

        Map statesToAmountCollections;
        Tax1099Type currentTax1099Type;

        boolean isStateSetForCombinedFiling;
        boolean willProduceNewBRecord;

        Tax1099IRSPayerRec currentVendorPayerRec;
        Tax1099AmountCollection currentNonCFSFStateAmounts;

        Tax1099StateCode localStateCode;
        Tax1099AmountCollection localAmountCollection;
        MapEnumerator amountIterator;

        Tax1099ARecord localARecord;
        Tax1099BRecord localBRecord;
        Tax1099CRecord localCRecord;
        Tax1099KRecord localKRecord;

        //Local function for writing a B-Record to file
        void writeLocalBRecord(Tax1099IRSPayerRec _payerRec)
        {
            numberOfBRecordsForType += 1;
            numberOfBRecords += 1;
            
            if (box1ASum && (_payerRec.Tax1099Type != Tax1099Type::F1099S && _payerRec.Tax1099Type != Tax1099Type::F1099G))
            {
                _payerRec.Amount1 = _payerRec.Amount1 + _payerRec.Amount2;
            }

            //Write B Record to file
            this.writeRecordToFile(localBRecord, _payerRec);
        }

        //Iterate over summaries for each Tax1099Type found
        while select runTax1099Summary
            join tax1099Fields
            group by Tax1099Type
            where runTax1099Summary.Tax1099Fields == tax1099Fields.RecId
            exists join localTax1099IRSPayerRec
                where localTax1099IRSPayerRec.VendAccount == runTax1099Summary.VendAccount
                    && localTax1099IRSPayerRec.Tax1099Type == tax1099Fields.Tax1099Type
        {
            //Initialize map for storing each CF/SF state and its corresponding amounts for producing K-Records
            statesToAmountCollections = new Map(Types::String, Types::Class);
            currentTax1099Type = Tax1099Fields.Tax1099Type;

            //Write A Record to file
            localARecord = Tax1099ARecord::construct(_companyInfo, currentTax1099Type);
            this.writeRecordToFile(localARecord, localTax1099IRSPayerRec);

            numberOfARecords += 1;
            numberOfBRecordsForType = 0;

            //Refresh current vendor and cumulative non-CFSF amounts with each change in form type
            currentVendorPayerRec.clear();
            currentNonCFSFStateAmounts = Tax1099AmountCollection::construct();

            while select localTax1099IRSPayerRec
                order by localTax1099IRSPayerRec.VendAccount
                where localTax1099IRSPayerRec.Tax1099Type == currentTax1099Type
            {
                //By default, initialize a new B-Record to be produced
                willProduceNewBRecord = true;
                localBRecord = Tax1099BRecord::construct(fileIndicator, currentTax1099Type);

                if (isCombinedFiling)
                {
                    //If this is a new vendor, refresh amounts for vendor transactions not in CF/SF states
                    if (localTax1099IRSPayerRec.VendAccount != currentVendorPayerRec.VendAccount)
                    {
                        //If this is not the first vendor and there are non CF/SF amounts, create a new B-Record
                        if (currentVendorPayerRec.VendAccount != '' && currentNonCFSFStateAmounts.hasAnyAmounts())
                        {
                            localBRecord.parmAmounts(currentNonCFSFStateAmounts);
                            writeLocalBRecord(currentVendorPayerRec);
                        }

                        //Update vendor and amount data to reflect new vendor
                        currentVendorPayerRec.data(localTax1099IRSPayerRec);
                        currentVendorPayerRec.Tax1099StateTaxID = '';

                        currentNonCFSFStateAmounts = Tax1099AmountCollection::construct();
                    }

                    //Determine whether state is present in CF/SF table
                    localStateCode = localTax1099IRSPayerRec.Tax1099StateTaxID;
                    isStateSetForCombinedFiling = Tax1099CF_SFParticipatingStateCodes::checkIfStateIsCombinedFiler(localStateCode);

                    //If the state is set for combined filing, update amount mappings. This also means a new B-Record will be produced.
                    //Note: Since CF/SF filing for 1099-S reports is not yet supported, do not group by state for 1099-S records
                    if (isStateSetForCombinedFiling && tax1099Fields.Tax1099Type != Tax1099Type::F1099S)
                    {
                        localAmountCollection = statesToAmountCollections.exists(localStateCode) ? statesToAmountCollections.lookup(localStateCode) : Tax1099AmountCollection::construct();
                        localAmountCollection.addToValues(localTax1099IRSPayerRec);

                        statesToAmountCollections.insert(localStateCode, localAmountCollection);
                    }
                    else
                    {
                        //If state is not in combined filing, update amounts for non CF/SF states and DO NOT produce a B-Record
                        currentNonCFSFStateAmounts.addToValues(localTax1099IRSPayerRec);
                        willProduceNewBRecord = false;
                    }
                }

                if (willProduceNewBRecord)
                {
                    localBRecord.parmAmounts(null);//reset B-Record amounts so it uses amounts from Tax1099IRSPayerRec
                    writeLocalBRecord(localTax1099IRSPayerRec);
                }
            }

            //Since non CF/SF amounts for the last vendor won't be caught in the loop, create final B-Record here
            if (isCombinedFiling && currentNonCFSFStateAmounts != null && currentNonCFSFStateAmounts.hasAnyAmounts())
            {
                //Update state and local tax withheld in Tax1099IRSPayerRec to the cumulative totals stored in currentNonCFSFStateAmounts
                currentVendorPayerRec.StateTaxWitheld = currentNonCFSFStateAmounts.getStateTaxWithheld();
                currentVendorPayerRec.LocalTaxWithheld = currentNonCFSFStateAmounts.getLocalTaxWithheld();

                localBRecord.parmAmounts(currentNonCFSFStateAmounts);
                writeLocalBRecord(currentVendorPayerRec);
            }

            //Write C Record to file
            localCRecord = Tax1099CRecord::construct(numberOfBRecordsForType, currentTax1099Type);
            this.writeRecordToFile(localCRecord, localTax1099IRSPayerRec);

            //Iterate over collections and generate K-Records
            amountIterator = new MapEnumerator(statesToAmountCollections);

            while (amountIterator.moveNext())
            {
                localStateCode = amountIterator.currentKey();
                localAmountCollection = amountIterator.currentValue();

                localKRecord = Tax1099KRecord::construct(localStateCode, localAmountCollection, currentTax1099Type);
                this.writeRecordToFile(localKRecord, localTax1099IRSPayerRec);
            }
        }

        //Write F Record to file
        Tax1099FRecord localFRecord = Tax1099FRecord::construct(numberOfARecords, numberOfBRecords);
        this.writeRecordToFile(localFRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBufferText</Name>
				<Source><![CDATA[
    public str getBufferText()
    {
        return bufText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>send</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes all of the text to the file and sends the file to the user.
    /// </summary>
    /// <param name = "_file">The file to send</param>
    public void send(AsciiStreamIo _file)
    {
        bufferTextList = List::create(packedBufferTextList);
        ListEnumerator listEnumerator = bufferTextList.getEnumerator();

        while (listEnumerator.moveNext())
        {
            _file.write(listEnumerator.current());
        }

        File::SendFileToUser(_file.getStream(), filename);

        info(strFmt("@SYS72463", filename)); // 1099 has been created
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> object.If you change the return value to false the button will no
    /// longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>strLineCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of lines in the specified String.
    /// </summary>
    /// <param name="freeTxt">
    /// The String in which to count lines.
    /// </param>
    /// <returns>
    /// The number of lines in the specified String.
    /// </returns>
    public int strLineCount(str freeTxt)
    {
        int start = 1;
        int end;
        int length;
        int lines;

        length = strLen(freeTxt);

        end = strScan(freeTxt, '\n', start, length);

        while (start)
        {
            lines += 1;
            if (end)
            {
                start = end + 1;
                end = strScan(freeTxt, '\n', start, length);
            }
            else
            {
                start = 0;
            }
        }

        if (!lines)
        {
            lines = 1;
        }

        return lines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        #DEFINE.Version4(4)
        #DEFINE.ParmList_v401Length(6)

        #LOCALMACRO.ParmList_v401
            CalendarYear,
            fEIndicator,
            mTFIndicator,
            softwareVendorIndicator
        #ENDMACRO

        #DEFINE.Version6(6)

        #LOCALMACRO.ParmList_v6
            filename,
            CalendarYear,
            fEIndicator,
            mTFIndicator,
            softwareVendorIndicator,
            fileIndicator,
            testFile
        #ENDMACRO

        #Define.Version7(7)

        #LOCALMACRO.ParmList_v7
            filename,
            CalendarYear,
            fEIndicator,
            mTFIndicator,
            softwareVendorIndicator,
            fileIndicator,
            testFile,
            qr_TransDate,
            qr_VendAccount,
            priorYearDataIndicator,
            packedBufferTextList
        #ENDMACRO

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = packedClass;
                break;

            case #Version6 :
                [version, #ParmList_v6] = packedClass;
                break;

            case #Version4 :
                if (conLen(packedClass) == #ParmList_v401Length)
                {
                    [version, #ParmList_v401] = packedClass;
                }
                break;

            case #Version7 :
                [version, #ParmList_v7] = packedClass;
                break;

            default :
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        if (!filename)
        {
            ret = checkFailed("@SYS18624");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS28659";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        Common common;
        VendITax1099View vendITax1099View = _args.caller() as VendITax1099View;
        VendITax1099Ranges vendITax1099Ranges = _args.caller() as vendITax1099Ranges;
        Tax1099Report2Disc tax1099Report2Disc = new Tax1099Report2Disc();
        Tax1099ElectronicCheck tax1099ElectronicCheck = new Tax1099ElectronicCheck();

        if (_args && _args.record().RecId)
        {
            common = _args.record();
        }

        // We must validate that the data meets the IRS standards before continuing
        if (vendITax1099View != null && tax1099ElectronicCheck.checkAll(vendITax1099View))
        {
            if (tax1099Report2Disc.prompt())
            {
                if (common.RecId && (common.TableId) == tableNum(Tax1099Summary) && vendITax1099Ranges != null)
                {
                    tax1099Report2Disc.parmQr_VendAccount(vendITax1099Ranges.vendValueRange());
                    tax1099Report2Disc.parmQr_TransDate(vendITax1099Ranges.dateValueRange());
                }

                tax1099Report2Disc.runOperation();

                // The file must be created after the sandbox operation so it can be sent to the user on the client
                AsciiStreamIo file = tax1099Report2Disc.open();

                tax1099Report2Disc.send(file);
            }
        }
        else
        {
            tax1099ElectronicCheck.showTax1099ErrorForm(vendITax1099View);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFile</Name>
				<Source><![CDATA[
    public static AsciiStreamIo newFile()
    {
        return AsciiStreamIo::constructForWrite();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>