<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>xmlExcelReport_CustInvoiceM15_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>xmlExcelReport_CustInvoiceM15_RU</c> used for output of M-15 form to excel
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
public class xmlExcelReport_CustInvoiceM15_RU extends XMLExcelReport_RU implements BatchRetryable, ERIReportPostProcessingWithPrintMgmtSupported
{
    TmpSalesPurchReportLine_RU line;
    TmpSalesPurchReportSubtable_RU subHeader;
    TmpSalesPurchReportTable_RU header;

    Counter lineNo;
    Counter pageNum;
    Counter numOfLines;

    int totalItemsShipped;

    protected const str Dash = '-';
    protected const str Sep = ', ';

    protected const str ReportHeader = 'REPORTHEADER';
    protected const str PageHeader = 'PAGEHEADER';
    protected const str Body = 'BODY';
    protected const str ReportFooter = 'REPORTFOOTER';


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        const real minHeight = 14.25;

        return max(document.getNamedRangeHeightWrapped('ItemName', line.ItemName),
            document.getNamedRangeHeightWrapped('ItemId', line.ItemId),
            minHeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00056, funcName());

        const int widthInCols = 18;
        this.setCurrentWorksheetNum(1, widthInCols);

        this.initSectionMap();

        select count(RecId) from line
            where line.InternalId == subHeader.InternalId &&
                line.InventLocationId == subHeader.InventLocationId;

        numOfLines = int642int(line.RecId);

        this.execute(ReportHeader);
        this.execute(PageHeader);

        while select line
            where line.InternalId == subHeader.InternalId &&
                line.InventLocationId == subHeader.InventLocationId
        {
            lineNo++;

            if (this.mustCreateNewPage())
            {
                document.insertPageBreak(currentRow, curWorksheetNum);

                pageNum++;
                currentHeight = 0;
                this.execute(PageHeader);
            }

            this.execute(Body);

            totalItemsShipped += any2Int(line.Qty);
        }

        this.execute(ReportFooter);

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'RU_SalesInvoice_M15';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + subHeader.DocumentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'M15';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    private void fillBody()
    {
        this.insertValueToSection('AccountNum', line.InventPostingAccount);
        this.insertValueToSection('AnalyticAccount', Dash);
        this.insertValueToSection('ItemName', line.ItemName);
        this.insertValueToSection('ItemId', line.ItemId);
        this.insertValueToSection('CodeOKEI', line.CodeOKEI);
        this.insertValueToSection('UnitId', line.Unit);

        this.insertValueToSection('Qty', line.Qty);
        this.insertValueToSection('QtyIssue', line.Qty);
        this.insertValueToSection('Price', line.Price);
        this.insertValueToSection('LineAmount', line.LineAmount);
        this.insertValueToSection('VATAmount', line.vatAmount);
        this.insertValueToSection('LineAmountWithVAT', line.lineAmountWithVAT());

        this.insertValueToSection('AssetId', line.rAssetId);
        this.insertValueToSection('PassportNum', Dash);
        this.insertValueToSection('OrderNumber', "");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case ReportHeader:
                this.fillReportHeader();
                break;
            case PageHeader:
                this.fillPageHeader();
                break;
            case Body:
                this.fillBody();
                break;
            case ReportFooter:
                this.fillReportFooter();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    private void fillPageHeader()
    {
        str currencyLong = header.CurrencyShortName && header.CurrencyShortNamePenny ?
            con2Str([ header.CurrencyShortName, header.CurrencyShortNamePenny ], Sep) :
            header.CurrencyShortName + header.CurrencyShortNamePenny;

        this.insertValueToSection('Curr_Full_0', currencyLong);
        this.insertValueToSection('Curr_Full_1', currencyLong);
        this.insertValueToSection('Curr_Full_2', currencyLong);
        this.insertValueToSection('Curr_Full_3', currencyLong);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    private void fillReportFooter()
    {
        RNumDateInWordConverter converter = RNumDateInWordConverter::construct(header.LanguageId);
        str amountLetters;

        this.insertValueToSection('Curr_0', header.CurrencyShortName);
        this.insertValueToSection('Curr_1', header.CurrencyShortName);
        this.insertValueToSection('Curr_Penny_0', header.CurrencyShortNamePenny);
        this.insertValueToSection('Curr_Penny_1', header.CurrencyShortNamePenny);

        amountLetters = converter.numeralsToTxt(trunc(abs(subHeader.TotalAmtWithVAT)));

        this.insertValueToSectionNoOverflow('F_TotalAmtWithVAT_Letters', amountLetters);

        this.insertValueToSection('F_TotalItemsShipped', converter.numeralsToTxt(totalItemsShipped));
        this.insertValueToSection('F_TotalAmtWithVAT_Penny', frac(abs(subHeader.TotalAmtWithVAT)) * 100);
        this.insertValueToSection('F_TotalVAT', trunc(abs(subHeader.TotalAmtVAT)));
        this.insertValueToSection('F_TotalVAT_Penny', frac(abs(subHeader.TotalAmtVAT)) * 100);

        this.insertValueToSection('Director_Position', header.DirectorTitle);
        this.insertValueToSection('Director_Name', header.DirectorName);
        this.insertValueToSection('Accountant_Name', header.AccountantName);

        this.insertValueToSection('Supplier_Name', subHeader.SupplierName);

        this.insertValueToSection('Taker_Name', subHeader.TakerName);
        this.insertValueToSection('Taker_Position', subHeader.TakerTitle);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    private void fillReportHeader()
    {
        this.insertValueToSection('InvoiceID', subHeader.DocumentId);

        this.insertValueToSectionNoOverflow('Organisation', header.ConsignorBankAddress);
        this.insertValueToSection('OKPO', header.ConsignorOKPO);

        this.insertValueToSection('InvoiceDate', header.InvoiceDate);
        this.insertValueToSection('OperationTypeCode', Dash);

        this.insertValueToSection('Sender_StructDpt', subHeader.InventLocationName);
        this.insertValueToSection('Sender_ActivityType', subHeader.InventLocationActivityType);
        this.insertValueToSection('Receiver_StructDpt', header.ConsignorStructDept);
        this.insertValueToSection('Receiver_ActivityType', header.ConsignorOKDP);

        this.insertValueToSection('Delivery_StructDpt', "");
        this.insertValueToSection('Delivery_ActivityType', "");
        this.insertValueToSection('Delivery_ExecutiveName', "");
        this.insertValueToSectionNoOverflow('Header_ToWhom', header.ConsigneeBankAddress);

        this.insertValueToSection('InvoiceBasis', con2Str([ header.AgreementId,
            header.AgreementDocumentTitle,
            header.AgreementDate ], Sep));

        this.insertValueToSectionNoOverflow('Header_ByWhom', con2Str([ header.AttorneyIssuedName,
            header.AttorneyId,
            date2StrUsr(header.AttorneyDate, DateFlags::FormatAll) ], Sep));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(ReportHeader);
        this.addSection(PageHeader);
        this.addSection(Body);
        this.addSection(ReportFooter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if page break should be inserted and new page created before inserting next row
    /// </summary>
    /// <returns>
    /// True, if new page should be created, otherwise false
    /// </returns>
    protected boolean mustCreateNewPage()
    {
        real requiredHeight;

        requiredHeight = this.getRangeHeight(Body);

        if (lineNo == numOfLines && lineNo != 1)
        {
            requiredHeight += conPeek(mapSections.lookup(ReportFooter), #posSectionHeight);
        }

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes report with data
    /// </summary>
    /// <param name="_line">
    /// Temporary table which is source for lines
    /// </param>
    /// <param name="_subHeader">
    /// Temporary table which is source for subHeaders(headers for distinct report printouts)
    /// </param>
    /// <param name="_header">
    /// Temporary table which hold data about invoices
    /// </param>
    /// <remarks>
    /// Several reports may be printed for one invoice, splitted by Invent Location, etc
    /// </remarks>
    final public void parmData(TmpSalesPurchReportLine_RU _line,
        TmpSalesPurchReportSubtable_RU _subHeader,
        TmpSalesPurchReportTable_RU _header)
    {
        line.setTmpData(_line);

        subHeader = _subHeader;
        header    = _header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(SalesInvoice_M15_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        const int staticCells = 47;
        const int columns = 15;

        select count(RecId) from line
            where line.InternalId == subHeader.InternalId &&
                line.InventLocationId == subHeader.InventLocationId;

        return staticCells + columns * any2int(line.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static XMLExcelReport_CustInvoiceM15_RU construct()
    {
        return new XMLExcelReport_CustInvoiceM15_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>