<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTableInteractionHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchTableInteractionHelper</c> class provides the enabled values for all the action menu
/// items for purchase order and lines.
/// </summary>
class PurchTableInteractionHelper
{
    PurchTable      purchTable;
    PurchTableForm  purchTableForm;

    boolean         isOrderInvoiceMatched;

    PurchLine       purchLine;
    boolean         isLineInvoiceMatched;
    boolean         isStocked, isCategoryBased;

    boolean         getAllJournalInquiryButtons;
    boolean         getAllJournalUpdateButtons;

    //Header inquiry buttons
    UnknownNoYes buttonJournalPurchaseOrderEnabled, buttonJournalPackingSlipEnabled, buttonJournalReceiptsListEnabled,
                 buttonJournalInvoiceEnabled, buttonJournalPendingInvoiceEnabled, caseButtonEnabled, journalPurchConfirmationRequestEnabled,
                 journalBindingConfirmationRequestEnabled;

    // <GEERU>
    UnknownNoYes buttonJournalFactureEnabled, buttonJournalInvoice4PaymEnabled;
    // </GEERU>

    // <GBR>
    UnknownNoYes canFiscalDocTextBeRegistrated_BR;
    UnknownNoYes canLineFiscalDocTextBeRegistrated_BR;
    // </GBR>

    //Header function buttons
    UnknownNoYes buttonPurchCancelEnabled, buttonCreateCaseEnabled, buttonCreditNoteHeaderEnabled, buttonCreditNoteLinesEnabled,
        buttonMultiLineDiscEnabled, buttonEndDiscEnabled, buttonSupplementaryItemsEnabled, buttonFinalizeEnabled, documentConfirmedOrFinalized,
        buttonPurchEditEnabled, buttonSuppItemCalcHeaderEnabled;

    //Header intercompany buttons
    UnknownNoYes intercompanyPickingListEnabled, originalSalesTableEnabled, intercompanySalesTableEnabled, interCompanyActionsEnabled;
    UnknownNoYes referencesEnabled;

    //Change request buttons
    UnknownNoYes canChangeBeRequested;

    //Header credit invoice button
    UnknownNoYes headerCreditInvoiceButtonEnabled, headerCreditInvoiceButtonVisible;

    //Header setup buttons
    UnknownNoYes buttonPaymentScheduleEnabled, buttonCreateBankLCImport, bankLGRequestFormVisible, bankLGRequestFormEnabled;
    UnknownNoYes buttonPrepayPurchTableHeading, buttonRemovePurchPrepayTable, buttonUpdatePrepayInvoice;

    //Header general tab buttons
    UnknownNoYes contactDetailsEnabled;

    //Line Agreement buttons
    boolean agreementLineEnabled, removeLinkEnabled, createLinkEnabled;

    //Line inquiry buttons
    UnknownNoYes reqTransNetEnabled, reqTransExplosionEnabled;

    //Line inventory buttons
    UnknownNoYes     buttonTransactionsEnabled, buttonOnHandEnabled, buttonLotEnabled, buttonTraceEnabled, buttonMarkingEnabled,
    buttonReservationEnabled, buttonRegistrationEnabled, buttonPickEnabled, buttonOutputOrdersEnabled;

    //PC line action buttons
    UnknownNoYes pcExecuteButtonEnabled;

    //Line calculation button
    UnknownNoYes lineCalculationButtonEnabled;

    //Line function buttons
    UnknownNoYes explodeBOMEnabled, copyFromLinesEnabled, creditInvoicingEnabled, deliveryScheduleEnabled,
        deliverRemainderEnabled, addAddressEnabled, addAlternativeAddressEnabled, buttonLineFinalizeEnabled,
        copyAllLines, copyJournalLines, creditInvoicingVisible;

    //line setup buttons
    UnknownNoYes markupTransLinePurchTableEnabled, lineTaxTransSourceEnabled, buttonSubLedgerDistributionEnabled;

    //Line intercompany
    UnknownNoYes lineInterCompanyEnabled;

    //Does history exist
    UnknownNoYes historyExists;

    //Journal buttons
    UnknownNoYes             enableConfirmationRequestButton;
    UnknownNoYes             enableBindingConfirmationRequestButton;
    UnknownNoYes             enablePurchaseOrderButton;
    UnknownNoYes             enableReceiptsListButton;
    UnknownNoYes             enablePackingSlipButton;
    UnknownNoYes             enableInvoiceButton;
    UnknownNoYes             enableEPNewInvoiceButton;
    // <GEERU>
    UnknownNoYes             enableInvoice4PaymButton;
    UnknownNoYes             enableFactureButton;
    UnknownNoYes             enableCommFactureButton;

    boolean                  isShelfLife;
    boolean                  isBulkPack;
    boolean                  isBatchEnabled;
    boolean                  isItemBatchEnabled;
    boolean                  isCWItem;
    UnknownNoYes             enableVendBatchInfo;
    UnknownNoYes             enablePackOnHand;
    UnknownNoYes             enableResetShelfLifeDates;
    #ISOCountryRegionCodes
    // </GEERU>

    // <GEEPL>
    UnknownNoYes     buttonInvPackSlipExtJourEnabled;
    // </GEEPL>

    boolean                  enableHeaderDiscountButtons;

    // Direct delivery
    UnknownNoYes             enableMCRDirectDelivery;

    // Consignment
    UnknownNoYes             enableLineConsignmentTransactionButton;

    //CFM payment requests
    UnknownNoYes cfmPaymentRequestViewEnabled;
    UnknownNoYes cfmPaymentRequestCreateEnabled;
    
    #localmacro.GetCached
        if (%1 == UnknownNoYes::Unknown)
        {
            %1 = (
                %2
                ) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }
        return %1 == UnknownNoYes::Yes;
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>boolean2UnknownNoYes</Name>
				<Source><![CDATA[
    private UnknownNoYes boolean2UnknownNoYes(boolean _bool)
    {
        if (_bool)
        {
            return UnknownNoYes::Yes;
        }
        return UnknownNoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankLGRequestFormVisible</Name>
				<Source><![CDATA[
    private boolean getBankLGRequestFormVisible()
    {
        BankLGFeatureChecker        bankLGFeatureChecker            = BankLGFeatureChecker::construct();
        return bankLGFeatureChecker.checkFeatureEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getButtonPaymentScheduleEnabled</Name>
				<Source><![CDATA[
    private boolean getButtonPaymentScheduleEnabled()
    {
        boolean ret = !this.parmHeaderIsFinalized();

        if (!purchTable.PaymentSched
            || purchTable.isInvoiced()
            || purchTable.isCanceled())
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getButtonPurchCancelEnabled</Name>
				<Source><![CDATA[
    private boolean  getButtonPurchCancelEnabled()
    {
        boolean ret = purchTable.checkCancel();
        if (ret && isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            ret = purchTable.canModifyPurchaseOrder();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeliveryScheduleEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if delivery schedule is enabled. 
    /// </summary>
    /// <returns>
    /// true if delivery schedule is enabled; otherwise, false.
	/// </returns>
    protected boolean isDeliveryScheduleEnabled()
    {
        boolean ret;
        if (this.parmLineIsFinalized())
        {
            ret = false;
        }
        else if (purchLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries
            || purchLine.LineDeliveryType == LineDeliveryType::DeliveryLine)
        {
            // existing delivery schedule
            ret = true;
        }
        else
        {
            ret = purchTableForm.deliveryScheduleConversionAllowed(purchLine);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnableBankLCFeature</Name>
				<Source><![CDATA[
    private boolean getEnableBankLCFeature()
    {
        BankLCImportFeatureChecker  bankLCImportFeatureChecker      = BankLCImportFeatureChecker::construct();
        return bankLCImportFeatureChecker.checkFeatureEnabled() && purchTable.isMarkedForBankLC();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnabledHeaderChangeRequestButtons</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the change request menu items are enabled.
    /// </summary>
    /// <returns>
    ///     true if buttons is enabled; otherwise, false.
    /// </returns>
    protected boolean getEnabledHeaderChangeRequestButtons()
    {
        return VersioningPurchaseOrder::checkCanChangeBeRequested(purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnabledHeaderCreditInvoiceButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the Credit Invoice menu item in the Header action panel.
    /// </summary>
    /// <returns>
    ///   true if the button should be enabled; otherwise, false.
    /// </returns>
    protected boolean getEnabledHeaderCreditInvoiceButton()
    {
        #ISOCountryRegionCodes

        PurchLine   negativePurchLine;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES, #isoSE, #isoPL]))
        {
            select firstonly RecId from negativePurchLine
                where  negativePurchLine.PurchId == purchTable.PurchId
                    && negativePurchLine.LineAmount < 0;
        }
        return (negativePurchLine.RecId != 0)
            || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT])
            || FeatureStateProvider::isFeatureEnabled(CreditInvoicingForVendorInvoicesFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnabledLineAgreementButtons</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the buttons that are used for linking with purchase agreement lines are enabled.
    /// </summary>
    public void getEnabledLineAgreementButtons()
    {
        [agreementLineEnabled, createLinkEnabled, removeLinkEnabled] = purchTableForm.getEnabledAgreementButtons(purchTable, purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnableHeaderDiscountButtons</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the header discount buttons should be enabled.
    /// </summary>
    protected void getEnableHeaderDiscountButtons()
    {
        enableHeaderDiscountButtons = !isOrderInvoiceMatched && purchTable.ICCheckUpdateHeaderDiscounts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>gethasMultipleDeliveries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the purchase line is a line with multiple deliveries.
    /// </summary>
    /// <returns>true if the purchase line has multiple deliveries; false, otherwise. </returns>
    protected boolean gethasMultipleDeliveries()
    {
        return purchLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIntercompanyPickingListEnabled</Name>
				<Source><![CDATA[
    private boolean getIntercompanyPickingListEnabled()
    {
        container                       canBeUpdated;
        SalesTableCheckIfUpdateContract checkIfUpdateContract;
        SalesTableCanBeUpdatedContract  canBeUpdatedContract;
        boolean ret;

        if (purchTable.isInterCompanyOrder())
        {
            checkIfUpdateContract = SalesTableCheckIfUpdateContract::construct();
            checkIfUpdateContract.parmCheckPickingList(true);

            canBeUpdated = purchTable.interCompanySalesTable().checkIfUpdate(checkIfUpdateContract.pack());
            canBeUpdatedContract        = SalesTableCanBeUpdatedContract::create(canBeUpdated);
            ret = canBeUpdatedContract.parmCanPickingListBeUpdated();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalInquiryButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enabled/disabled <c>NoYes</c> value for the journal buttons.
    /// </summary>
    protected void getJournalInquiryButtons()
    {
        if (!getAllJournalInquiryButtons)
        {
            return;
        }

        container existingJournals = purchTable.existingJournals();

        buttonJournalPurchaseOrderEnabled = this.boolean2UnknownNoYes(conPeek(existingJournals, PurchTableType::posPurchaseOrder()) ? true : false);
        buttonJournalPackingSlipEnabled = this.boolean2UnknownNoYes(conPeek(existingJournals, PurchTableType::posPackingSlip())   ? true : false);
        buttonJournalReceiptsListEnabled = this.boolean2UnknownNoYes(conPeek(existingJournals, PurchTableType::posReceiptsList())  ? true : false);
        buttonJournalInvoiceEnabled = this.boolean2UnknownNoYes(conPeek(existingJournals, PurchTableType::posInvoice())       ? true : false);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            buttonJournalInvoice4PaymEnabled    = this.boolean2UnknownNoYes(conPeek(existingJournals, PurchTableType::posInvoice4Paym_RU()) ? true : false);
            buttonJournalFactureEnabled         = this.boolean2UnknownNoYes(conPeek(existingJournals, PurchTableType::posFacture_RU())      ? true : false);
        }
        // </GEERU>

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            buttonInvPackSlipExtJourEnabled = this.boolean2UnknownNoYes(conPeek(existingJournals, PurchTableType::postInventExtPackingSlip())? true : false);
        }
        // </GEEPL>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpdateJournalButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enabled/disabled <c>NoYes</c> values for the journal buttons.
    /// </summary>
    protected void getUpdateJournalButtons()
    {
        if (!getAllJournalUpdateButtons)
        {
            return;
        }

        PurchTableCheckIfUpdateContract checkIfUpdateContract = PurchTableCheckIfUpdateContract::newCheckAll();
        container canBeUpdated = purchTable.checkIfUpdate(checkIfUpdateContract.pack());

        PurchTableCanBeUpdatedContract canBeUpdatedContract = PurchTableCanBeUpdatedContract::create(canBeUpdated);

        enableConfirmationRequestButton        = this.boolean2UnknownNoYes(canBeUpdatedContract.parmCanConfirmationRequestBeUpdated());
        enableBindingConfirmationRequestButton = this.boolean2UnknownNoYes(canBeUpdatedContract.parmCanBindingConfirmationRequestBeUpdated());
        enablePurchaseOrderButton              = this.boolean2UnknownNoYes(canBeUpdatedContract.parmCanPurchaseOrderBeUpdated());
        enableReceiptsListButton               = this.boolean2UnknownNoYes(canBeUpdatedContract.parmCanReceiptsListBeUpdated());
        enablePackingSlipButton                = this.boolean2UnknownNoYes(canBeUpdatedContract.parmCanPackingSlipBeUpdated());
        enableInvoiceButton                    = this.boolean2UnknownNoYes(canBeUpdatedContract.parmCanInvoiceBeUpdated());

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            enableInvoice4PaymButton    = this.boolean2UnknownNoYes(canBeUpdatedContract.parmCanInvoice4PaymBeUpdated_RU());
            enableFactureButton         = this.boolean2UnknownNoYes(canBeUpdatedContract.parmCanFactureBeUpdated_RU());
            enableCommFactureButton     = this.boolean2UnknownNoYes(canBeUpdatedContract.parmCanCommFactureBeUpdated_RU());
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level menu items.
    /// </summary>
    public void initHeaderActions()
    {
        if (purchTable.RecId)
        {
            this.getJournalInquiryButtons();
            this.getUpdateJournalButtons();
            this.getEnabledHeaderChangeRequestButtons();
            this.getEnableHeaderDiscountButtons();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLineActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level menu items.
    /// </summary>
    /// <param name="_purchLine">
    /// A buffer of the <c>PurchLine</c> table.
    /// </param>
    public void initLineActions(PurchLine _purchLine)
    {
        InventTable inventTable;

        purchLine       = _purchLine;

        if (purchLine.RecId)
        {
            inventTable             = purchLine.inventTable();
            isShelfLife             = inventTable.isShelfLifeItem();
            isBulkPack              = PmfBulkItemConv::isBulkorPack(purchLine.ItemId);
            isBatchEnabled          = purchLine.inventDim().InventBatchId != '';
            isItemBatchEnabled      = inventTable.isItemBatchActivated();
            isCWItem                = inventTable.pdsCWItem();
            isStocked               = purchLine.isStocked();
            isCategoryBased         = purchLine.isCategoryBased();
            isLineInvoiceMatched    = purchLine.isInvoiceMatched();

            this.getEnabledLineAgreementButtons();
        }
        this.getEnabledHeaderCreditInvoiceButton();
        this.getUpdateJournalButtons();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        PurchTableFormId    _purchTableFormId,
        PurchTable          _purchTable,
        container           _packedPurchTableForm = conNull())
    {
        purchTable              = _purchTable;
        isOrderInvoiceMatched   = purchTable.isInvoiceMatched();

        if (_packedPurchTableForm)
        {
            purchTableForm = PurchTableForm::newUnpack(purchTable, _packedPurchTableForm);
        }
        else
        {
            purchTableForm = PurchTableForm::construct(_purchTableFormId, purchTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddAddressEnabled</Name>
				<Source><![CDATA[
    public boolean parmAddAddressEnabled()
    {
        #GetCached(addAddressEnabled, !isLineInvoiceMatched)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddAlternativeAddressEnabled</Name>
				<Source><![CDATA[
    public boolean parmAddAlternativeAddressEnabled()
    {
        #GetCached(addAlternativeAddressEnabled, !isLineInvoiceMatched)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgreementLineEnabled</Name>
				<Source><![CDATA[
    public boolean parmAgreementLineEnabled()
    {
        return agreementLineEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbankLGRequestFormEnabled</Name>
				<Source><![CDATA[
    public boolean parmbankLGRequestFormEnabled()
    {
        #GetCached(bankLGRequestFormEnabled,
                   this.parmBankLGRequestFormVisible()
                   && purchTable.isMarkedForBankLG())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbankLGRequestFormVisible</Name>
				<Source><![CDATA[
    public boolean parmbankLGRequestFormVisible()
    {
        #GetCached(bankLGRequestFormVisible,
                   this.getBankLGRequestFormVisible())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonCreateBankLCImport</Name>
				<Source><![CDATA[
    public boolean parmbuttonCreateBankLCImport()
    {
        #GetCached(buttonCreateBankLCImport,
                   this.getEnableBankLCFeature())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonCreateCaseEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonCreateCaseEnabled()
    {
        #GetCached(buttonCreateCaseEnabled, purchTable.RecId != 0)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonCreditNoteHeaderEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonCreditNoteHeaderEnabled()
    {
        #GetCached(buttonCreditNoteHeaderEnabled, purchTable.type().canCreditNoteBeCreated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonCreditNoteLinesEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonCreditNoteLinesEnabled()
    {
        return this.parmbuttonCreditNoteHeaderEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonEndDiscEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonEndDiscEnabled()
    {
        #GetCached(buttonEndDiscEnabled, enableHeaderDiscountButtons)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonSuppItemCalcHeaderEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonSuppItemCalcHeaderEnabled()
    {
        #GetCached(buttonSuppItemCalcHeaderEnabled, purchTable.editAllowed())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonFinalizeEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonFinalizeEnabled()
    {
        #GetCached(buttonFinalizeEnabled, purchTable.DocumentState != VersioningDocumentState::Finalized)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonJournalFactureEnabled_RU</Name>
				<Source><![CDATA[
    public boolean parmButtonJournalFactureEnabled_RU()
    {
        #GetCached(buttonJournalFactureEnabled, purchTable.lastFacture_RU() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonJournalInvoice4PaymEnabled_RU</Name>
				<Source><![CDATA[
    public boolean parmButtonJournalInvoice4PaymEnabled_RU()
    {
        #GetCached(buttonJournalInvoice4PaymEnabled, purchTable.lastInvoice4Paym_RU() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonJournalInvoiceEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonJournalInvoiceEnabled()
    {
        #GetCached(buttonJournalInvoiceEnabled, purchTable.lastInvoice() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonJournalPackingSlipEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonJournalPackingSlipEnabled()
    {
        #GetCached(buttonJournalPackingSlipEnabled, purchTable.lastPackingSlip() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonJournalPendingInvoiceEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonJournalPendingInvoiceEnabled()
    {
        #GetCached(buttonJournalPendingInvoiceEnabled,
                   purchTable.existInvoice(false)
                   && !this.parmHeaderIsFinalized())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonJournalPurchaseOrderEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonJournalPurchaseOrderEnabled()
    {
        #GetCached(buttonJournalPurchaseOrderEnabled, purchTable.lastPurchaseOrder() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonJournalReceiptsListEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonJournalReceiptsListEnabled()
    {
        #GetCached(buttonJournalReceiptsListEnabled, purchTable.lastReceiptsList() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonLineFinalizeEnabled</Name>
				<Source><![CDATA[
    public boolean parmButtonLineFinalizeEnabled()
    {
        #GetCached(buttonLineFinalizeEnabled, !purchLine.IsFinalized)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonLotEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonLotEnabled()
    {
        #GetCached(buttonLotEnabled,
                   isStocked
                   && !this.getHasMultipleDeliveries()
                   && purchTable.Type().inventLotInvoke())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonMarkingEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonMarkingEnabled()
    {
        #GetCached(buttonMarkingEnabled,
                   isStocked
                   && !isCWItem
                   && !this.getHasMultipleDeliveries()
                   && (!(purchLine.CreateFixedAsset == NoYes::Yes || purchLine.AssetId) || purchLine.qtyMarked()))
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonMultiLineDiscEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonMultiLineDiscEnabled()
    {
        #GetCached(buttonMultiLineDiscEnabled, enableHeaderDiscountButtons)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonOnHandEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonOnHandEnabled()
    {
        #GetCached( buttonOnHandEnabled,
                    isStocked
                    && purchTable.Type().inventOnhandInvoke())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonOutputOrdersEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonOutputOrdersEnabled()
    {
        #GetCached(buttonOutputOrdersEnabled,
                   isStocked
                   && !this.getHasMultipleDeliveries()
                   && !this.parmLineIsFinalized())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonPaymentScheduleEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonPaymentScheduleEnabled()
    {
        #GetCached(buttonPaymentScheduleEnabled, this.getButtonPaymentScheduleEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonPickEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonPickEnabled()
    {
        #GetCached(buttonPickEnabled,
                   isStocked
                   && !this.getHasMultipleDeliveries()
                   && !this.parmLineIsFinalized()
                   && purchLine.PurchQty < 0)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonPrepayPurchTableHeading</Name>
				<Source><![CDATA[
    public boolean parmbuttonPrepayPurchTableHeading()
    {
        #GetCached(buttonPrepayPurchTableHeading, purchTableForm.isButtonPrepaymentEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonPurchCancelEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonPurchCancelEnabled()
    {
        #GetCached(buttonPurchCancelEnabled, this.getButtonPurchCancelEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonPurchEditEnabled</Name>
				<Source><![CDATA[
    //The method used to have a boolean parameter that should not and cannot be used anymore
    //since the type of buttonPurchEditEnabled parameter has been changed to UnknownNoYes enum.
    public boolean parmButtonPurchEditEnabled()
    {
        #GetCached(buttonPurchEditEnabled, purchTable.editAllowed(true))
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonRegistrationEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonRegistrationEnabled()
    {
        #GetCached(buttonRegistrationEnabled,
            !this.getHasMultipleDeliveries()
            && !this.parmLineIsFinalized()
            && purchLine.PurchQty > 0
            && purchLine.isTangible()
            && purchTable.DocumentState != VersioningDocumentState::Draft
            && !(!purchLine.isStocked() && purchLine.isDropShipment() && purchLine.isInterCompanyOrder()))
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonRemovePurchPrepayTable</Name>
				<Source><![CDATA[
    public boolean parmbuttonRemovePurchPrepayTable()
    {
        #GetCached(buttonRemovePurchPrepayTable,
                   purchTableForm.isRemovePrepayEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonReservationEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonReservationEnabled()
    {
        #GetCached(buttonReservationEnabled,
                   isStocked
                   && !this.getHasMultipleDeliveries()
                   && !this.parmLineIsFinalized())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonSubLedgerDistributionEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonSubLedgerDistributionEnabled()
    {
        #GetCached(buttonSubLedgerDistributionEnabled, true)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonSupplementaryItemsEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonSupplementaryItemsEnabled()
    {
        #GetCached(buttonSupplementaryItemsEnabled, !isOrderInvoiceMatched)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonTraceEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonTraceEnabled()
    {
        #GetCached(buttonTraceEnabled,
                   isStocked
                   && !this.gethasMultipleDeliveries())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmbuttonTransactionsEnabled</Name>
				<Source><![CDATA[
    public boolean parmbuttonTransactionsEnabled()
    {
        #GetCached(buttonTransactionsEnabled,
                    isStocked
                    && !this.getHasMultipleDeliveries()
                    && purchTable.Type().inventTransactInvoke())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmButtonUpdatePrepayInvoice</Name>
				<Source><![CDATA[
    public boolean parmButtonUpdatePrepayInvoice()
    {
        #GetCached(buttonUpdatePrepayInvoice, purchTableForm.isButtonPrepayInvoiceEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmcanChangeBeRequested</Name>
				<Source><![CDATA[
    public boolean parmcanChangeBeRequested()
    {
        #GetCached(canChangeBeRequested, this.getEnabledHeaderChangeRequestButtons())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanFiscalDocTextBeRegistrated_BR</Name>
				<Source><![CDATA[
    public boolean parmCanFiscalDocTextBeRegistrated_BR()
    {
        #getCached(canFiscalDocTextBeRegistrated_BR, purchTable.recId && purchTable.type().canFiscalDocTextBeRegistrated_BR())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanLineFiscalDocTextBeRegistrated_BR</Name>
				<Source><![CDATA[
    public boolean parmCanLineFiscalDocTextBeRegistrated_BR()
    {
        #GetCached(canLineFiscalDocTextBeRegistrated_BR,
                   purchLine.RecId
                   && purchLine.type().canFiscalDocTextBeRegistrated_BR())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaseButtonEnabled</Name>
				<Source><![CDATA[
    public boolean parmCaseButtonEnabled()
    {
        #GetCached(caseButtonEnabled,
                   purchTable.RecId != 0)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContactDetailsEnabled</Name>
				<Source><![CDATA[
    public boolean parmContactDetailsEnabled()
    {
        #GetCached(contactDetailsEnabled, ContactPerson::find(purchTable.ContactPersonId).RecId)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyAllLines</Name>
				<Source><![CDATA[
    public boolean parmCopyAllLines()
    {
        #GetCached(copyAllLines, !this.parmLineIsFinalized())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyFromLinesEnabled</Name>
				<Source><![CDATA[
    public boolean parmCopyFromLinesEnabled()
    {
        #GetCached(copyFromLinesEnabled, purchLine.RecId != 0 && !this.parmLineIsFinalized())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyJournalLines</Name>
				<Source><![CDATA[
    public boolean parmCopyJournalLines()
    {
        #GetCached(copyJournalLines, !this.parmLineIsFinalized())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmcreateLinkEnabled</Name>
				<Source><![CDATA[
    public boolean parmcreateLinkEnabled()
    {
        return createLinkEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreditInvoicingEnabled</Name>
				<Source><![CDATA[
    public boolean parmCreditInvoicingEnabled()
    {
        #GetCached(creditInvoicingEnabled, purchLine.RecId != 0 && !this.parmLineIsFinalized())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliverRemainderEnabled</Name>
				<Source><![CDATA[
    public boolean parmDeliverRemainderEnabled()
    {
        #GetCached(deliverRemainderEnabled, purchLine.RecId && purchLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries
                                        && purchTable.type().canUpdateRemainingQty() && !this.parmLineIsFinalized() && !purchLine.isConsignmentOrder())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryScheduleEnabled</Name>
				<Source><![CDATA[
    public boolean parmDeliveryScheduleEnabled()
    {
        #GetCached(deliveryScheduleEnabled,
                   this.isDeliveryScheduleEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentConfirmedOrFinalized</Name>
				<Source><![CDATA[
    public boolean parmDocumentConfirmedOrFinalized()
    {
        #GetCached(documentConfirmedOrFinalized,
                   (purchTable.DocumentState == VersioningDocumentState::Confirmed
                    || purchTable.DocumentState == VersioningDocumentState::Finalized))
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnableCommFactureButton_RU</Name>
				<Source><![CDATA[
    public boolean parmEnableCommFactureButton_RU()
    {
        #GetCached(enableCommFactureButton, purchTable.type().canCommFactureBeUpdated_RU())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnableConfirmationRequestButton</Name>
				<Source><![CDATA[
    public boolean parmEnableConfirmationRequestButton()
    {
        #GetCached(enableConfirmationRequestButton, purchTable.type().canConfirmationRequestBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnableBindingConfirmationRequestButton</Name>
				<Source><![CDATA[
    public boolean parmEnableBindingConfirmationRequestButton()
    {
        #GetCached(enableBindingConfirmationRequestButton, purchTable.type().canBindingConfirmationRequestBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnableEPNewInvoiceButton</Name>
				<Source><![CDATA[
    public boolean parmEnableEPNewInvoiceButton()
    {
        // Disable New invoice button on EP page if Purchase order has not been confirmed
        #GetCached(enableEPNewInvoiceButton,
                  !(purchTable.PurchStatus == PurchStatus::Backorder && purchTable.DocumentState == VersioningDocumentState::Approved)
                  && this.parmEnableInvoiceButton())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnableFactureButton_RU</Name>
				<Source><![CDATA[
    public boolean parmEnableFactureButton_RU()
    {
        #GetCached(enableFactureButton, purchTable.type().canFactureBeUpdated_RU())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnableInvoice4PaymButton_RU</Name>
				<Source><![CDATA[
    public boolean parmEnableInvoice4PaymButton_RU()
    {
        #GetCached(enableInvoice4PaymButton, purchTable.type().canInvoice4PaymBeUpdated_RU())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmenableInvoiceButton</Name>
				<Source><![CDATA[
    public boolean parmenableInvoiceButton()
    {
        #GetCached(enableInvoiceButton, purchTable.type().canInvoiceBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmenablePackingSlipButton</Name>
				<Source><![CDATA[
    public boolean parmenablePackingSlipButton()
    {
        #GetCached(enablePackingSlipButton, purchTable.type().canPackingslipBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnablePackOnHand</Name>
				<Source><![CDATA[
    public boolean parmEnablePackOnHand()
    {
        #GetCached(enablePackOnHand,
                   isStocked
                   && isBulkPack)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmenablePurchaseOrderButton</Name>
				<Source><![CDATA[
    public boolean parmenablePurchaseOrderButton()
    {
        #GetCached(enablePurchaseOrderButton, purchTable.type().canPurchaseOrderBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmenableReceiptsListButton</Name>
				<Source><![CDATA[
    public boolean parmenableReceiptsListButton()
    {
        #GetCached(enableReceiptsListButton, purchTable.type().canReceiptsListBeUpdated())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnableResetShelfLifeDates</Name>
				<Source><![CDATA[
    public boolean parmEnableResetShelfLifeDates()
    {
        #GetCached(enableResetShelfLifeDates,
                   isStocked
                   && isShelfLife && isBatchEnabled)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnableVendBatchInfo</Name>
				<Source><![CDATA[
    public boolean parmEnableVendBatchInfo()
    {
        #GetCached(enableVendBatchInfo,
                   isStocked
                   && isItemBatchEnabled)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExplodeBOMEnabled</Name>
				<Source><![CDATA[
    public boolean parmExplodeBOMEnabled()
    {
        #GetCached(explodeBOMEnabled, purchLine.RecId &&  purchLine.LineDeliveryType == LineDeliveryType::OrderLine
                                        && isStocked && !isLineInvoiceMatched && !purchLine.receivedInTotal() && !this.parmLineIsFinalized())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGetAllJournalInquiryButtons</Name>
				<Source><![CDATA[
    public boolean parmGetAllJournalInquiryButtons(boolean _bool = getAllJournalInquiryButtons)
    {
        getAllJournalInquiryButtons = _bool;
        return getAllJournalInquiryButtons;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGetAllJournalUpdateButtons</Name>
				<Source><![CDATA[
    public boolean parmGetAllJournalUpdateButtons(boolean _bool = getAllJournalUpdateButtons)
    {
        getAllJournalUpdateButtons = _bool;
        return getAllJournalUpdateButtons;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmheaderCreditInvoiceButtonEnabled</Name>
				<Source><![CDATA[
    public boolean parmheaderCreditInvoiceButtonEnabled()
    {
        #GetCached(headerCreditInvoiceButtonEnabled, this.getEnabledHeaderCreditInvoiceButton())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHeaderIsFinalized</Name>
				<Source><![CDATA[
    public boolean parmHeaderIsFinalized()
    {
        return purchTable.DocumentState == VersioningDocumentState::Finalized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHistoryExists</Name>
				<Source><![CDATA[
    public boolean parmHistoryExists()
    {
        #GetCached(historyExists, VersioningPurchaseOrder::checkHistoryExist(purchTable))
    }

]]></Source>
			</Method>
			<Method>
				<Name>parminterCompanyActionsEnabled</Name>
				<Source><![CDATA[
    public boolean parminterCompanyActionsEnabled()
    {
        #GetCached(interCompanyActionsEnabled,
                   purchTable.isInterCompanyOrder())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmintercompanyPickingListEnabled</Name>
				<Source><![CDATA[
    public boolean parmintercompanyPickingListEnabled()
    {
        #GetCached(intercompanyPickingListEnabled,
                   purchTable.isInterCompanyOrder()
                   && this.getIntercompanyPickingListEnabled())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmintercompanySalesTableEnabled</Name>
				<Source><![CDATA[
    public boolean parmintercompanySalesTableEnabled()
    {
        #GetCached( intercompanySalesTableEnabled,
                    purchTable.isInterCompanyOrder()
                    && purchTable.InterCompanySalesId? true: false)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalPurchConfirmationRequestEnbld</Name>
				<Source><![CDATA[
    public boolean parmJournalPurchConfirmationRequestEnbld()
    {
        #GetCached(journalPurchConfirmationRequestEnabled, purchTable.lastPurchConfirmationRequestJour() != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalBindingConfirmationRequestEnbld</Name>
				<Source><![CDATA[
    public boolean parmJournalBindingConfirmationRequestEnbld()
    {
        #GetCached(journalBindingConfirmationRequestEnabled, purchTable.lastBindingConfirmationRequestJournal().RecId != 0)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmlineCalculationButtonEnabled</Name>
				<Source><![CDATA[
    public boolean parmlineCalculationButtonEnabled()
    {
        #GetCached(lineCalculationButtonEnabled,
                   !isCategoryBased
                   && !purchLine.isInvoiceMatched())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmlineInterCompanyEnabled</Name>
				<Source><![CDATA[
    public boolean parmlineInterCompanyEnabled()
    {
        #GetCached(lineInterCompanyEnabled,
                   !isCategoryBased
                   && purchTable.isInterCompanyOrder())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineIsFinalized</Name>
				<Source><![CDATA[
    public boolean parmLineIsFinalized()
    {
        return purchLine.IsFinalized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineIsModified</Name>
				<Source><![CDATA[
    public boolean parmLineIsModified()
    {
        return purchLine.IsModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmlineTaxTransSourceEnabled</Name>
				<Source><![CDATA[
    public boolean parmlineTaxTransSourceEnabled()
    {
        #GetCached(lineTaxTransSourceEnabled, purchLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmmarkupTransLinePurchTableEnabled</Name>
				<Source><![CDATA[
    public boolean parmmarkupTransLinePurchTableEnabled()
    {
        #GetCached(markupTransLinePurchTableEnabled, purchLine.markupAllowed())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRDirectDeliveryEnabled</Name>
				<Source><![CDATA[
    public boolean parmMCRDirectDeliveryEnabled()
    {
        #GetCached(enableMCRDirectDelivery, purchTable.MCRDropShipment)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalSalesTableEnabled</Name>
				<Source><![CDATA[
    public boolean parmOriginalSalesTableEnabled()
    {
        #GetCached(originalSalesTableEnabled,
                   purchTable.isInterCompanyOrder()
                   && purchTable.InterCompanyOriginalSalesId)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPCExecuteButtonEnabled</Name>
				<Source><![CDATA[
    public boolean parmPCExecuteButtonEnabled()
    {
        #GetCached(pcExecuteButtonEnabled,
                   purchTableForm.isPCExecuteButtonEnabled(purchLine)
                   && !this.parmLineIsFinalized())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferencesEnabled</Name>
				<Source><![CDATA[
    public boolean parmReferencesEnabled()
    {
        #GetCached(referencesEnabled,
                  purchTable.isInterCompanyOrder()
                  || purchTable.existInterCompanyPurchSalesReference())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmremoveLinkEnabled</Name>
				<Source><![CDATA[
    public boolean parmremoveLinkEnabled()
    {
        return removeLinkEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmreqTransExplosionEnabled</Name>
				<Source><![CDATA[
    public boolean parmreqTransExplosionEnabled()
    {
        #GetCached(reqTransExplosionEnabled,
                   isStocked
                   && !this.parmLineIsFinalized()
                   && purchLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries)
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmreqTransNetEnabled</Name>
				<Source><![CDATA[
    public boolean parmreqTransNetEnabled()
    {
        #GetCached(reqTransNetEnabled,
                   isStocked
                   && !this.parmLineIsFinalized())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreditInvoicingVisible</Name>
				<Source><![CDATA[
    public boolean parmCreditInvoicingVisible()
    {
        #GetCached(creditInvoicingVisible, SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES, #isoSE, #isoPL]))
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHeaderCreditInvoiceButtonVisible</Name>
				<Source><![CDATA[
    public boolean parmHeaderCreditInvoiceButtonVisible()
    {
        #GetCached(headerCreditInvoiceButtonVisible, this.getVisibleHeaderCreditInvoiceButton())
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWHSWorkTableEnabled</Name>
				<Source><![CDATA[
    public boolean parmWHSWorkTableEnabled()
    {
        return isStocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnableLineConsignmentTransactionButton</Name>
				<Source><![CDATA[
    public boolean parmEnableLineConsignmentTransactionButton()
    {
        #GetCached(enableLineConsignmentTransactionButton, purchLine.isConsignmentOrder())
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVisibleHeaderCreditInvoiceButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows or hides the Credit Invoice menu item in the Header action panel.
    /// </summary>
    /// <returns>
    /// true if the button should be visible; otherwise, false.
    /// </returns>
    protected boolean getVisibleHeaderCreditInvoiceButton()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES, #isoSE, #isoPL, #isoIT])
            || FeatureStateProvider::isFeatureEnabled(CreditInvoicingForVendorInvoicesFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVisibleLinesCreditInvoiceButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows or hides the Credit Invoice menu item in the Lines action panel.
    /// </summary>
    /// <returns>
    /// true if the button should be visible; otherwise, false.
    /// </returns>
    protected boolean getVisibleLinesCreditInvoiceButton()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES, #isoSE, #isoPL]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchTableInteractionHelper construct(
        PurchTableFormId        _purchTableFormId,
        PurchTable              _purchTable,
        container               _packedPurchTableForm = conNull())
    {
        return new PurchTableInteractionHelper(_purchTableFormId, _purchTable, _packedPurchTableForm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCFMPaymentRequestViewEnabled</Name>
				<Source><![CDATA[
    public boolean parmCFMPaymentRequestViewEnabled()
    {
        #GetCached(CFMPaymentRequestViewEnabled, CFMPaymentRequestTable::lastPaymentRequestPurch(purchTable.PurchId) != '')
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentRequestCreateEnabled</Name>
				<Source><![CDATA[
    public boolean parmPaymentRequestCreateEnabled()
    {
        #GetCached(cfmPaymentRequestCreateEnabled, purchTable.DocumentState == VersioningDocumentState::Confirmed || purchTable.DocumentState == VersioningDocumentState::Finalized)
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>