<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimRenameTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
using xpp = Microsoft.Dynamics.Ax.Xpp;
using model = Microsoft.Dynamics.AX.Metadata.MetaModel;

/// <summary>
/// The <c>InventDimRenameTable</c> is the base class providing generic renaming of inventory dimension values.
/// </summary>
class InventDimRenameTable
{
    ItemId          itemId;
    FieldName       dimFieldName;
    InventDim       inventDim;
    InventDim       inventDimOrig;
    TableName       tableName;

    Enumerator      fields;
    container       inventDimIDFieldList;
    container       dimensionFieldList;
    private boolean areFieldListsInitialized;

    static          Map compatibleEDTs = new Map(Types::Integer, Types::Class);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDimFieldName</Name>
				<Source><![CDATA[
    final public FieldName parmDimFieldName(FieldName _dimFieldName = dimFieldName)
    {
        dimFieldName = _dimFieldName;
        return dimFieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    final public InventDim parmInventDim(InventDim _inventDim = inventDim)
    {
        inventDim = _inventDim;
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimOrig</Name>
				<Source><![CDATA[
    final public InventDim parmInventDimOrig(InventDim _inventDimOrig = inventDimOrig)
    {
        inventDimOrig = _inventDimOrig;
        return inventDimOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    final public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the field ID value that matches the field name.
    /// </summary>
    /// <returns>
    ///    An <c>InventDim</c> field ID.
    /// </returns>
    final protected FieldId dimFieldId()
    {
        return fieldName2id(tableNum(InventDim), dimFieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>compatibleExtendedTypes</Name>
				<Source><![CDATA[
    private Set compatibleExtendedTypes(ExtendedDataTypeName _edt)
    {
        Set result = new Set(Types::String);
        result.add(_edt);

        SysDictType sysDictType = SysDictType::newName(_edt);
        ListEnumerator enum = sysDictType.extendedBy(true).getEnumerator();

        while (enum.moveNext())
        {
            result.add(extendedTypeId2name(enum.current()));
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isType</Name>
				<Source><![CDATA[
    private boolean isType(ExtendedDataTypeName _edtName, ExtendedTypeId _edtIdToMatch)
    {
        Set matchingEDTs;
        
        if (compatibleEDTs.exists(_edtIdToMatch))
        {
            matchingEDTs = compatibleEDTs.lookup(_edtIdToMatch);
        }
        else
        {
            matchingEDTs = this.compatibleExtendedTypes(extendedTypeId2Name(_edtIdToMatch));
            compatibleEDTs.insert(_edtIdToMatch, matchingEDTs);
        }
        
        return matchingEDTs.in(_edtName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldsWithExtendedDataType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the fields on the table defined with a given extended data type.
    /// </summary>
    /// <param name = "_extendedDataTypeId">The ID of the extended data type.</param>
    /// <returns>A container with the field IDs.</returns>
    final protected container fieldsWithExtendedDataType(ExtendedTypeId _extendedDataTypeId)
    {
        container result;

        model.AxTable currentTable = xpp.MetadataSupport::GetTable(tableName);
        TableId tableId = tableName2Id(currentTable.Name);
        // Find fields that use the EDT
        var fieldEnum = currentTable.Fields.GetEnumerator();
        while (fieldEnum.MoveNext())
        {
            model.AxTableField field = fieldEnum.Current;
                    
            if (field.SaveContents && 
                this.isType(field.ExtendedDataType, _extendedDataTypeId))
            {
                result += fieldName2Id(tableId, field.Name);
            }
        }
           
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldsWithDimensionExtendedDataType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the fields on the table defined with dimension extended data type being renamed.
    /// </summary>
    /// <returns>A container with the field IDs.</returns>
    final protected container fieldsWithDimensionExtendedDataType()
    {
        ExtendedTypeId dimTypeId = SysDictField::newName(tableStr(InventDim), dimFieldName).typeId();
        return this.fieldsWithExtendedDataType(dimTypeId);    
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldsWithInventDimIdExtendedDataType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the fields on the table defined with <c>InventDimId</c> extended data type.
    /// </summary>
    /// <returns>A container with the field IDs.</returns>
    final protected container fieldsWithInventDimIdExtendedDataType()
    {
        return this.fieldsWithExtendedDataType(extendedTypeNum(InventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableGroupAllFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field ID of a <c>TableGroupAll</c> field to apply a filter on.
    /// </summary>
    /// <returns>The field ID.</returns>
    protected FieldId tableGroupAllFieldId()
    {
        container priceDiscItemCodeFieldList = this.fieldsWithExtendedDataType(extendedTypeNum(PriceDiscProductCode));

        if (conLen(priceDiscItemCodeFieldList) == 1)
        {
            return conPeek(priceDiscItemCodeFieldList, 1);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field ID of a <c>ItemId</c> field to apply a filter on.
    /// </summary>
    /// <returns>The field ID.</returns>
    protected FieldId itemIdFieldId()
    {
        container itemIdFieldList = this.fieldsWithExtendedDataType(extendedTypeNum(ItemId));
        itemIdFieldList += this.fieldsWithExtendedDataType(extendedTypeNum(PriceDiscItemRelation));

        if (conLen(itemIdFieldList) == 0)
        {
            return 0;
        }

        if (conLen(itemIdFieldList) > 1)
        {
            for (int i = 1; i<=conLen(itemIdFieldList); i++)
            {
                warning(strFmt("@SYS74536", tableName));
            }

            return 0;
        }
        
        return conPeek(itemIdFieldList, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldContainers</Name>
				<Source><![CDATA[
    private void initFieldContainers()
    {
        if (!areFieldListsInitialized)
        {
            inventDimIDFieldList = this.fieldsWithInventDimIdExtendedDataType();
            dimensionFieldList = this.fieldsWithDimensionExtendedDataType();
            areFieldListsInitialized = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRenameRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if rename is required.
    /// </summary>
    /// <returns>true, when a field that needs renaming exists.</returns>
    public final boolean isRenameRequired()
    {
        this.initFieldContainers();

        if (conLen(dimensionFieldList) == 0 &&
            conLen(inventDimIdFieldList) == 0)
        {
            // Nothing to rename
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renameInventDimValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renames inventory dimension values.
    /// </summary>
    public void renameInventDimValues()
    {
        this.initFieldContainers();

        if (!this.isRenameRequired())
        {
            return;     
        }

        this.update(this.itemIdFieldId(), inventDimIdFieldList, dimensionFieldList, this.tableGroupAllFieldId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates data in the table for the specified item and dimensions.
    /// </summary>
    /// <param name = "_itemIdFieldId">The ID of the field containing the <c>ItemId</c>.</param>
    /// <param name = "_inventDimIdFieldList">A list of field IDs containing <c>InventDimId</c>.</param>
    /// <param name = "_dimensionFieldList">A list of field IDs containing inventory dimensions for the dimension being renamed.</param>
    /// <param name = "_tableGroupAllFieldId">A ID of the field containing a <c>TableGroupAll</c> field where a filter will be applied; optional.</param>
    protected void update(
        FieldId _itemIdFieldId, 
        container _inventDimIdFieldList, 
        container _dimensionFieldList, 
        FieldId _tableGroupAllFieldId = 0)
    {
        if (_itemIdFieldId == 0)
        {
            // Not item specific dimension
            return;
        }

        int dimensionFieldListLength = conLen(_dimensionFieldList);
        int inventDimIdFieldListLength = conLen(_inventDimIdFieldList);

        if (inventDimIdFieldListLength == 0 && dimensionFieldListLength == 0)
        {
            // Nothing to rename
            return;
        }

        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableName2Id(tableName));
        queryBuildDataSource.update(true);
        queryBuildDataSource.addRange(_itemIdFieldId).value(itemId);

        if (_tableGroupAllFieldId)
        {
            queryBuildDataSource.addRange(_tableGroupAllFieldId).value(queryValue(TableGroupAll::Table));
        }

        FieldId dimFieldId = this.dimFieldId();
        if (inventDimIdFieldListLength == 1 && dimensionFieldListLength == 0)
        {
            QueryBuildDataSource queryBuildDataSourceDim = queryBuildDataSource.addDataSource(tableNum(InventDim));
            queryBuildDataSourceDim.addRange(dimFieldId).value(inventDimOrig.(dimFieldId));
            queryBuildDataSourceDim.joinMode(JoinMode::ExistsJoin);
            queryBuildDataSourceDim.relations(true);
        }

        if (inventDimIdFieldListLength == 0 && dimensionFieldListLength == 1)
        {
            queryBuildDataSource.addRange(conPeek(_dimensionFieldList,1)).value(inventDimOrig.(dimFieldId));
        }

        QueryRun queryRun = new QueryRun(query);
        queryRun.recordLevelSecurity(false);
        int cnt;

        while (queryRun.next())
        {
            boolean anyUpdate = false;
            Common common = queryRun.getNo(1);
            for (int dimNo = 1; dimNo <= inventDimIdFieldListLength; dimNo++)
            {
                InventDim inventDimThis = InventDim::find(common.(conPeek(_inventDimIdFieldList, dimNo)));
                if (inventDimThis.(dimFieldId) == inventDimOrig.(dimFieldId))
                {
                    anyUpdate = true;
                    inventDimThis.(dimFieldId) = inventDim.(dimFieldId);
                    common.(conPeek(_inventDimIdFieldList, dimNo)) = InventDim::findOrCreate(inventDimThis).InventDimId;
                }
            }

            for (int dimNo = 1; dimNo <= dimensionFieldListLength; dimNo++)
            {
                if (common.(conPeek(_dimensionFieldList, dimNo)) == inventDimOrig.(dimFieldId))
                {
                    anyUpdate = true;
                    common.(conPeek(_dimensionFieldList, dimNo)) = inventDim.(dimFieldId);
                }
            }

            if (anyUpdate)
            {
                DictTable dictTable = new DictTable(common.TableId);
                if (dictTable.isValidTimeStateTable())
                {
                    common.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                }
                common.doUpdate();
                cnt++;
            }
        }
        if (cnt)
        {
            info(strFmt("@SYS74545", cnt, tableName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of a <c>InventDimRenameTable</c> class for a table.
    /// </summary>
    /// <param name = "_tableName">The name of the table.</param>
    /// <returns>A new instance.</returns>
    static public InventDimRenameTable newFromTable(TableName _tableName)
    {
        SysTableNameFactoryAttribute attribute = new SysTableNameFactoryAttribute(_tableName);
        InventDimRenameTable instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(InventDimRenameTable), attribute) as InventDimRenameTable;
        Debug::assert(instance != null);

        instance.tableName = _tableName;

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the base <c>InventDimRenameTable</c> class for a table.
    /// </summary>
    /// <param name = "_tableName">The name of the table.</param>
    /// <returns>A new instance.</returns>
    static public InventDimRenameTable newBase(TableName _tableName)
    {
        InventDimRenameTable instance = new InventDimRenameTable();
        instance.tableName = _tableName;

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>