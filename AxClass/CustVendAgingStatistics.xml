<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendAgingStatistics</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendAgingStatistics
{
    CustVendTable custVendTable;
    TmpAccountSum tmpAccountSum;
    TmpStatPer tmpStatPer;
    DateTransactionDuedate typeOfDate;
    CustVendReportName defName;
    boolean isCustAccount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcInvoiceBalanceByDate</Name>
				<Source><![CDATA[
    protected AmountMST calcInvoiceBalanceByDate()
    {
        AmountMST invoiceBalanceByDate;

        switch (typeOfDate)
        {
            case DateTransactionDuedate::TransactionDate :
                invoiceBalanceByDate = custVendTable.openInvoiceBalanceMST(tmpStatPer.StartDate, tmpStatPer.EndDate);
                break;

            case DateTransactionDuedate::DueDate :
                invoiceBalanceByDate = custVendTable.openInvoiceBalanceMSTDue(dateMax(), tmpStatPer.StartDate, tmpStatPer.EndDate);
                break;

            case DateTransactionDuedate::DocumentDate :
                invoiceBalanceByDate = custVendTable.openInvoiceBalanceMSTDoc(dateMax(), tmpStatPer.StartDate, tmpStatPer.EndDate);
                break;

            default:
                invoiceBalanceByDate = custVendTable.openInvoiceBalanceMST(tmpStatPer.StartDate, tmpStatPer.EndDate);
        }

        return invoiceBalanceByDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOpenBalanceByDate</Name>
				<Source><![CDATA[
    protected AmountMST calcOpenBalanceByDate()
    {
        AmountMST openBalanceByDate;

        switch (typeOfDate)
        {
            case DateTransactionDuedate::TransactionDate :
                openBalanceByDate = custVendTable.openBalanceMST(tmpStatPer.StartDate, tmpStatPer.EndDate);
                break;

            case DateTransactionDuedate::DueDate :
                openBalanceByDate = custVendTable.openBalanceMSTDue(dateMax(), tmpStatPer.StartDate, tmpStatPer.EndDate);
                break;

            case DateTransactionDuedate::DocumentDate :
                openBalanceByDate = custVendTable.openBalanceMSTDoc(dateMax(), tmpStatPer.StartDate, tmpStatPer.EndDate);
                break;

            default:
                openBalanceByDate = custVendTable.openBalanceMST(tmpStatPer.StartDate, tmpStatPer.EndDate);
        }

        return openBalanceByDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPaymentBalanceByDate</Name>
				<Source><![CDATA[
    protected AmountMST calcPaymentBalanceByDate()
    {
        AmountMST balanceByDate;

        switch (typeOfDate)
        {
            case DateTransactionDuedate::TransactionDate :
                balanceByDate = custVendTable.openPaymentBalanceMST(tmpStatPer.StartDate, tmpStatPer.EndDate);
                break;

            case DateTransactionDuedate::DueDate :
                balanceByDate = custVendTable.openPaymentBalanceMSTDue(dateMax(), tmpStatPer.StartDate, tmpStatPer.EndDate);
                break;

            case DateTransactionDuedate::DocumentDate :
                balanceByDate = custVendTable.openPaymentBalanceMSTDoc(dateMax(), tmpStatPer.StartDate, tmpStatPer.EndDate);
                break;

            default:
                balanceByDate = custVendTable.openPaymentBalanceMST(tmpStatPer.StartDate, tmpStatPer.EndDate);
        }

        return balanceByDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStatistic</Name>
				<Source><![CDATA[
    void calcStatistic()
    {
        StatRepIntervalLine statRepIntervalLine;
        StatRepInterval statRepInterval;
        int i;

        QueryRun queryRun;
        Query query = new Query();
        QueryBuildDataSource qbds;
        TmpStatPer tmpStat;

        delete_from tmpAccountSum;

        qbds = query.addDataSource(tablenum(TmpStatPer));

        statRepInterval = StatRepInterval::find(defName);
        switch (statRepInterval.PrintDirection)
        {
            case ForwardBackwardPrinting::Forward:
                qbds.addSortField(fieldnum(TmpStatPer, LineNum), SortOrder::Ascending);
                break;

            case ForwardBackwardPrinting::Backward:
                qbds.addSortField(fieldnum(TmpStatPer, LineNum), SortOrder::Descending);
                break;
        }

        queryRun = new QueryRun(query);
        queryRun.setCursor(tmpStatPer);

        i = 0;
        while (queryRun.next())
        {
            tmpStat = queryRun.getNo(1);

            select Heading, LineNum from statRepIntervalLine
                where statRepIntervalLine.LineNum == tmpStat.LineNum
                && statRepIntervalLine.Name == defName;

            i++;
            tmpAccountSum.clear();

            tmpAccountSum.AccountNum = custVendTable.AccountNum;
            tmpAccountSum.TransDate = tmpStatPer.StartDate;
            tmpAccountSum.SortDate = tmpStatPer.EndDate;
            tmpAccountSum.Txt = statRepIntervalLine.Heading;
            tmpAccountSum.Balance01 = this.calcInvoiceBalanceByDate();
            tmpAccountSum.Balance02 = this.calcPaymentBalanceByDate();
            tmpAccountSum.Balance03 = this.calcOpenBalanceByDate();
            tmpAccountSum.Balance04 = statRepIntervalLine.LineNum;
            tmpAccountSum.IsCustAccount = isCustAccount;

            tmpAccountSum.insert();
        }

        this.calcTotals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotals</Name>
				<Source><![CDATA[
    protected void calcTotals()
    {
        AmountMST amountMst1;
        AmountMST amountMst2;
        AmountMST amountMst3;
        TmpAccountSum tmpAccountSumLocal;

        tmpAccountSumLocal.setTmpData(tmpAccountSum);

        while select tmpAccountSumLocal
        {
            amountMst1 += tmpAccountSumLocal.Balance01;
            amountMst2 += tmpAccountSumLocal.Balance02;
            amountMst3 += tmpAccountSumLocal.Balance03;
        }

        tmpAccountSum.clear();
        tmpAccountSum.Txt = "@SYS809";
        tmpAccountSum.AccountNum = custVendTable.AccountNum;
        tmpAccountSum.Balance01 = amountMst1;
        tmpAccountSum.Balance02 = amountMst2;
        tmpAccountSum.Balance03 = amountMst3;
        tmpAccountSum.IsCustAccount = isCustAccount;
        tmpAccountSum.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        this.setBuffer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendTable</Name>
				<Source><![CDATA[
    private CustVendTable parmCustVendTable(CustVendTable _custVendTable = custVendTable)
    {
        if (!prmisdefault(_custVendTable))
        {
            this.setBuffer();
            custVendTable = _custVendTable;
        }

        return custVendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefName</Name>
				<Source><![CDATA[
    private CustVendReportName parmDefName(CustVendReportName _defName = defName)
    {
        if (!prmisdefault(_defName))
        {
            tmpStatPer = TmpStatPer::createDefName(_defName);
            defName = _defName;
        }

        return defName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCustAccount</Name>
				<Source><![CDATA[
    private boolean parmIsCustAccount(boolean _isCustAccount = isCustAccount)
    {
        isCustAccount = _isCustAccount;
        return isCustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTypeOfDate</Name>
				<Source><![CDATA[
    private DateTransactionDuedate parmTypeOfDate(DateTransactionDuedate _typeOfDate = typeOfDate)
    {
        typeOfDate = _typeOfDate;

        return typeOfDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBuffer</Name>
				<Source><![CDATA[
    protected void setBuffer()
    {
        CustTable custTable;
        VendTable vendTable;

        switch (custVendTable.TableId)
        {
            case tablenum(CustTable) :
                custVendTable = custTable;
                break;

            case tablenum(VendTable) :
                custVendTable = vendTable;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpAccountsum</Name>
				<Source><![CDATA[
    public TmpAccountSum tmpAccountsum()
    {
        return tmpAccountSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static CustVendAgingStatistics construct(CustVendTable _custVendTable,
                                             CustVendReportName _defName,
                                             DateTransactionDuedate _typeOfDate,
                                             boolean _isCustAccount)
    {
        CustVendAgingStatistics custVendAgingStatistics = new CustVendAgingStatistics();

        custVendAgingStatistics.parmCustVendTable(_custVendTable);
        custVendAgingStatistics.parmDefName(_defName);
        custVendAgingStatistics.parmTypeOfDate(_typeOfDate);
        custVendAgingStatistics.parmIsCustAccount(_isCustAccount);

        return custVendAgingStatistics;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>