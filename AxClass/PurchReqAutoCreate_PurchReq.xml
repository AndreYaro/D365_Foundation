<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqAutoCreate_PurchReq</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysTableNameFactory(tableStr(PurchReqTable))]
class PurchReqAutoCreate_PurchReq extends PurchReqAutoCreate
{
    PurchReqTable                            fromPurchReqTable;
    PurchReqLine                             fromPurchReqLine;
    PurchReqBusJustification                 fromPurchReqBusJustification;
    LineNum                                  lineNum;
    PurchReqLineValidate                     purchReqLineValidate;
    boolean                                  hasExternalCatalogItem;
    PurchReqId                               targetPurchReqId;
    PurchReqInternalOrgManager_LegalEntity   purchReqInternalOrgManager_LegalEntity;
    PurchReqInternalOrgManager_OperatingUnit purchReqInternalOrgManager_OperatingUnit;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>PurchReqTable</c> table.
    /// </summary>
    public void create()
    {
        super();

        if (hasExternalCatalogItem)
        {
            info(strFmt("@SYS310035", fromPurchReqTable.PurchReqId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeLine</Name>
				<Source><![CDATA[
    protected boolean includeLine()
    {
        if (purchReqLineSet && purchReqLineSet.in(fromPurchReqLine.RecId) || !purchReqLineSet)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        select nofetch fromPurchReqLine
            where fromPurchReqLine.PurchReqTable == fromPurchReqTable.RecId;

        lineNum = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNextLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loops through all purchase requisition lines and checks for the non external catalog line items.
    /// </summary>
    /// <returns>
    /// A record id of the record in the <c>PurchReqLine</c> table.
    /// </returns>
    protected boolean moveNextLine()
    {
        next fromPurchReqLine;

        while (fromPurchReqLine)
        {
            if (fromPurchReqLine.LineType != PurchReqLineType::External)
            {
                lineNum++;
                break;
            }
            else
            {
                next fromPurchReqLine;
                hasExternalCatalogItem  =   true;
            }
        }
        return (fromPurchReqLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        purchReqInternalOrgManager_LegalEntity   = new PurchReqInternalOrgManager_LegalEntity();
        purchReqInternalOrgManager_OperatingUnit = new PurchReqInternalOrgManager_OperatingUnit();

        showInfo = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    public Common parmBuffer(Common _buffer = fromPurchReqTable)
    {
        fromPurchReqTable = _buffer;
        return fromPurchReqTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreparer</Name>
				<Source><![CDATA[
    public PurchReqPreparerRefRecId getPreparer()
    {
        return fromPurchReqTable.Originator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetPurchReqId</Name>
				<Source><![CDATA[
    public PurchReqId parmTargetPurchReqId(PurchReqId _purchReqId = targetPurchReqId)
    {
        if (!prmisDefault(_purchReqId))
        {
            targetPurchReqId = _purchReqId;
        }
        return targetPurchReqId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchReqType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the type of the purchase requisition.
    /// </summary>
    /// <returns>
    /// The purchase requisition type of the record in the <c>PurchReqTable</c> table.
    /// </returns>
    protected PurchReqType purchReqType()
    {
        return fromPurchReqTable.PurchReqType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkupTrans</Name>
				<Source><![CDATA[
    protected void setMarkupTrans()
    {
        if (purchReqLine.LineType == PurchReqLineType::Category)
        {
            Markup::copy(NoYes::No, fromPurchReqLine, purchReqLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchReqBusJustification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets business justification to the record of the <c>PurchReqBusinessJustification</c> table.
    /// </summary>
    /// <param name="isPurchReqTable">
    /// An Enum value of type NoYes.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Value of <param name="isPurchReqTable"> is other than Yes and No
    /// </exception>
    protected void setPurchReqBusJustification(NoYes isPurchReqTable)
    {
        super(isPurchReqTable);

        switch (isPurchReqTable)
        {
            case NoYes::Yes:
                fromPurchReqBusJustification = PurchReqBusJustification::findLine(tableNum(PurchReqTable), fromPurchReqTable.RecId, false);
                purchReqBusJustification = PurchReqBusJustification::findLine(tableNum(PurchReqTable), purchReqTable.RecId, true);
                purchReqBusJustification.BusinessJustification = fromPurchReqBusJustification.BusinessJustification;
                break;
            case NoYes::No:
                fromPurchReqBusJustification = PurchReqBusJustification::findLine(tableNum(PurchReqLine), fromPurchReqLine.RecId, false);
                purchReqBusJustification = PurchReqBusJustification::findLine(tableNum(PurchReqLine), purchReqLine.RecId, true);
                purchReqBusJustification.BusinessJustification = fromPurchReqBusJustification.BusinessJustification;
                break;
            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchReqLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// It sets values to the <c>PurchReqLine</c> table and validates the line.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// Invalid item.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The current employee can not submit on behalf of the employee entered in the <c>Requisitioner</c>
    /// field.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The receiving operating unit is not valid.
    /// </exception>
    protected void setPurchReqLine()
    {
        changecompany(fromPurchReqLine.buyingLegalEntity2DataArea())
        {
            super();

            purchReqLineValidate = new PurchReqLineValidate();

            purchReqLine.initFromPurchReqLine(fromPurchReqLine);
            purchReqLine.PurchReqTable  = purchReqTable.RecId;
            purchReqLine.LineNum        = lineNum;
            purchReqLine.SequenceNumber = any2int(lineNum);

            purchReqLineValidate.parmPurchReqLine(purchReqLine);
            if (purchReqLine.VendAccount && !purchReqLineValidate.validateVendor())
            {
                purchReqLine.VendAccount         = "";
                purchReqLine.VendAccountDataArea = "";
            }

            if (!purchReqLineValidate.validateItem())
            {
                throw error(strFmt("@SYS306982", purchReqLine.LineNum));
            }

            if (!purchReqInternalOrgManager_LegalEntity.validate(purchReqLine.Requisitioner, purchReqLine.BuyingLegalEntity))
            {
                throw error(strFmt("@SYS304398", fieldPName(PurchReqLine, BuyingLegalEntity)));
            }
            if (purchReqLine.ReceivingOperatingUnit &&
                !purchReqInternalOrgManager_OperatingUnit.validate(purchReqLine.Requisitioner, purchReqLine.ReceivingOperatingUnit))
            {
                throw error(strFmt("@SYS304398", fieldPName(PurchReqLine, ReceivingOperatingUnit)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchReqTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PurchReqTable</c> table.
    /// </summary>
    protected void setPurchReqTable()
    {
        super();

        purchReqTable.initFromPurchReqTable(fromPurchReqTable);

        date today = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        // If the requisition is created for a future date don't touch the 'Requested Date', otherwise default it to 'today'
        if (purchReqTable.RequiredDate < today)
        {
            purchReqTable.RequiredDate = today;
            purchReqTable.initTransDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the information need to be shown.
    /// </summary>
    /// <returns>
    /// A Boolean value that indicates whether the information needs to be shown.
    /// </returns>
    protected boolean showInfo()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>