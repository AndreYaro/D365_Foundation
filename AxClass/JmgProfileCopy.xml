<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgProfileCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgProfileCopy</c> class is used to copy profile setups, or part of a profile setup.
/// </summary>
public class JmgProfileCopy extends RunBase
{
    NoYesId             doOverwrite;
    FormDataSource      formDataSource;

    DialogField         dialogField;
    DialogField         dialogOverwrite;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase   dialog = new DialogRunbase(JmgProfileCopy::description(), this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates values entered in the dialog by the user.
    /// </summary>
    /// <returns>
    ///    true if validation is successful; otherwise; false.
    /// </returns>
    public boolean getFromDialog()
    {
        doOverwrite = dialogOverwrite.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the record to use as the source for copying profile setup.
    /// </summary>
    /// <param name="_record">
    /// The record to use as a source when copying.
    /// </param>
    void setRecord(Common _record)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of one of the subclasses to the <c>JmgProfileCopy</c> class.
    /// </summary>
    /// <param name="_record">
    ///    The record to use as a source when copying.
    /// </param>
    /// <returns>
    ///    A new instance of one of the sub classes to the <c>JmgProfileCopy</c> class.
    /// </returns>
    /// <remarks>
    ///    The returned instance depends on the specified source record.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The method is called with an invalid type of record.
    /// </exception>
    static JmgProfileCopy construct(Common _record)
    {
        JmgProfileCopy jmgProfileCopy;

        switch (_record.TableId)
        {
            case tablenum(JmgProfileDay):
                jmgProfileCopy = new JmgProfileCopy_Day();
                break;
            case tablenum(JmgProfileTable):
                jmgProfileCopy = new JmgProfileCopy_All();
                break;
            default :
                throw error("@SYS55194");
        }

        jmgProfileCopy.setRecord(_record);

        return jmgProfileCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        JmgProfileCopy      jmgProfileCopy;
        FormDataSource      formDataSource;
        Common              dataSet;

        dataSet = args.record();

        if  ((!dataSet) ||
             (!args.record().RecId))
        {
            return;
        }

        if ((dataSet.TableId == tablenum(JmgProfileTable)) ||
            (dataSet.TableId == tablenum(JmgProfileDay)))
        {
            jmgProfileCopy = JmgProfileCopy::construct(dataSet);

            if (jmgProfileCopy.prompt())
            {
                jmgProfileCopy.runOperation();
                formDataSource = FormDataUtil::getFormDataSource(dataSet);
                if (formDataSource)
                {
                    formDataSource.research();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>