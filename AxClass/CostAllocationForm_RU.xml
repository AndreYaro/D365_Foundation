<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostAllocationForm_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CostAllocationForm_RU
{
    FormRun                         formRun;
    Object                          objectFormRun;

    VendInvoiceTrans                vendInvoiceTrans;

    RefRecId                        vendInvoiceJourRecId;

    CostAllocationProcessType_RU    costAllocationProcessType;

    FormDataSource                  fdsVendInvoiceTrans;
    FormDataSource                  fdsCostAllocationBase;
    FormDataSource                  fdsCostAllocationResult;

    Set                             vendInvoiceMarkSet,
                                    allocationBaseMarkSet;
    Map                             mapAmount4Alloc;

    FormComboBoxControl             fcAllocationType;

    FormRealControl                 fcAmountNotAlloc;
    FormRealControl                 fcAmount4Alloc;
    FormRealControl                 fcAmountAlloc;

    FormRealControl                 fcAmountAllocResult;

    FormFunctionButtonControl       btnCostAllocationPost;
    FormFunctionButtonControl       btnCostAllocationMakeResult;
    FormFunctionButtonControl       btnCostAllocationSelectBase;

    private FormButtonControl       btnSelectAllBase;

    FormCheckBoxControl             fcShowCancelled;
    FormComboBoxControl             fcAllocateAfter;
    FormDateControl                 fcPostingDate;
    FormControl                     fcAmountGroup;

    FormControl                     fcDateIntervalGroup;
    FormDateControl                 fcFromDate;
    FormDateControl                 fcToDate;

    FormControl                     fcEditAmount4Alloc;

    FormControl                     fcGridResult;

    FormControl                     fcGridAllocBaseIndebtedness;
    FormControl                     fcAllocBaseIndebtedness;

    FormControl                     fcGridAllocBaseOverhead;
    FormControl                     fcAllocBaseOverhead;

    FormControl                     fcGridAllocBaseExpenses;
    FormControl                     fcAllocBaseExpenses;

    FormControl                     fcAllocBaseDimension;

    FormControl                     fcAllocResult;

    FormControl                     fcResultCancelGroup;

    FormCheckBoxControl             fcStockedProduct;

    FormControl                     fcBaseNewDelGroup;

    VendInvoiceJour                 sourceVendInvoiceJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateAfter</Name>
				<Source><![CDATA[
    public CostMarkupAllocate_RU allocateAfter()
    {
        return fcAllocateAfter.selection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocationType</Name>
				<Source><![CDATA[
    public CostAllocationType_RU allocationType()
    {
        if (fcAllocationType == null || fcAllocationType.enumType() != enumNum(CostAllocationType_RU))
        {
            throw error("@SYS83964");
        }

        return fcAllocationType.selection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcResult</Name>
				<Source><![CDATA[
    public Amount calcResult(TmpCostAllocationResult_RU _costAllocationResult, VendInvoiceTrans _vendInvoiceTrans = null)
    {
        TmpCostAllocationResult_RU  locCostAllocationResult;

        locCostAllocationResult.setTmpData(_costAllocationResult);

        select sum(Amount) from locCostAllocationResult
            where (_vendInvoiceTrans.RecId == 0 || locCostAllocationResult.AllocSourceRecId  == _vendInvoiceTrans.RecId) &&
                  locCostAllocationResult.Mark;

        return locCostAllocationResult.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkChangeResult</Name>
				<Source><![CDATA[
    public boolean checkChangeResult(TmpCostAllocationResult_RU _costAllocationResult,
                                     Amount                     _newAmount)
    {
        TmpCostAllocationResult_RU  locCostAllocationResult;

        vendInvoiceTrans = VendInvoiceTrans::findRecId(_costAllocationResult.AllocSourceRecId);
        if (!vendInvoiceTrans || !mapAmount4Alloc.exists(vendInvoiceTrans.RecId))
        {
            return checkFailed("@GLS114523");
        }

        locCostAllocationResult.setTmpData(_costAllocationResult);

        select sum(Amount) from locCostAllocationResult
            where locCostAllocationResult.AllocSourceRecId  == vendInvoiceTrans.RecId &&
                  locCostAllocationResult.Mark &&
                  locCostAllocationResult.RecId             != _costAllocationResult.RecId;

        if (locCostAllocationResult.Amount + _newAmount > mapAmount4Alloc.lookup(vendInvoiceTrans.RecId))
        {
            return checkFailed(strFmt("@GLS114524",
                                     locCostAllocationResult.Amount + _newAmount,
                                     mapAmount4Alloc.lookup(vendInvoiceTrans.RecId)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearDesign</Name>
				<Source><![CDATA[
    public void clearDesign()
    {
        fcDateIntervalGroup         .visible(true);

        fcShowCancelled             .visible(true);
        fcAllocateAfter             .visible(true);
        fcPostingDate               .visible(true);
        fcAmountGroup               .visible(true);
        fcEditAmount4Alloc          .visible(true);
        btnCostAllocationMakeResult .visible(true);
        btnCostAllocationSelectBase .visible(true);
        btnSelectAllBase            .visible(true);

        fcGridAllocBaseOverhead     .visible(true);
        fcAllocBaseOverhead         .visible(true);

        fcGridAllocBaseIndebtedness .visible(true);
        fcAllocBaseIndebtedness     .visible(true);

        fcGridAllocBaseExpenses     .visible(true);
        fcAllocBaseExpenses         .visible(true);

        fcResultCancelGroup         .visible(true);

        fcAmountAllocResult         .allowEdit(true);

        fcAllocResult               .allowEdit(true);

        fcGridAllocBaseOverhead     .allowEdit(true);
        fcAllocBaseOverhead         .allowEdit(true);

        fcGridAllocBaseIndebtedness .allowEdit(true);
        fcAllocBaseIndebtedness     .allowEdit(true);

        fcGridAllocBaseExpenses     .allowEdit(true);
        fcAllocBaseExpenses         .allowEdit(true);

        fcAllocBaseDimension        .allowEdit(true);
        fcStockedProduct.enabled(false);
        fcStockedProduct.checked(false);

        fdsCostAllocationBase       .allowCreate(true);

        fdsCostAllocationResult     .object(fieldNum(TmpCostAllocationResult_RU, MarkupCode)).allowEdit(true);
        fdsCostAllocationResult     .object(fieldNum(TmpCostAllocationResult_RU, IndebtednessInvoiceId)).visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAllocationProcessType</Name>
				<Source><![CDATA[
    public CostAllocationProcessType_RU costAllocationProcessType()
    {
        return costAllocationProcessType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editAmount4Alloc</Name>
				<Source><![CDATA[
    public AmountMST editAmount4Alloc(boolean   _set,
                                      Common    _line,
                                      AmountMST _amount4Alloc)
    {
        if (_set)
        {
            if (_amount4Alloc)
            {
                mapAmount4Alloc.insert(_line.RecId, _amount4Alloc);
            }
            else
            {
                mapAmount4Alloc.remove(_line.RecId);
            }

            this.recalcAmounts();
        }

        if (mapAmount4Alloc.exists(_line.RecId))
        {
            return mapAmount4Alloc.lookup(_line.RecId);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editMarkRecord</Name>
				<Source><![CDATA[
    public NoYes editMarkRecord(boolean _set,
                                Common  _line,
                                NoYes   _mark)
    {
        NoYes editMarkRecordSet(Set _setForUpdate)
        {
            if (_set)
            {
                if (_mark)
                {
                    if (! _setForUpdate.in(_line.RecId))
                    {
                        _setForUpdate.add(_line.RecId);
                    }
                }
                else
                {
                    if (_setForUpdate.in(_line.RecId))
                    {
                        _setForUpdate.remove(_line.RecId);
                    }
                }
            }

            return _setForUpdate.in(_line.RecId);
        }

        if (_line.TableId == tableNum(VendInvoiceTrans))
        {
            return editMarkRecordSet(vendInvoiceMarkSet);
        }
        else if (_line.TableId == tableNum(TmpCostAllocationBase_RU))
        {
            return editMarkRecordSet(allocationBaseMarkSet);
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeDS</Name>
				<Source><![CDATA[
    public void executeDS()
    {
        fdsCostAllocationBase.executeQuery();
        fdsCostAllocationResult.executeQuery();
        fdsVendInvoiceTrans.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fdsCostAllocationBase</Name>
				<Source><![CDATA[
    public FormDataSource fdsCostAllocationBase()
    {
        return fdsCostAllocationBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fdsVendInvoiceTrans</Name>
				<Source><![CDATA[
    public FormDataSource fdsVendInvoiceTrans()
    {
        return fdsVendInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTablesFromHistory</Name>
				<Source><![CDATA[
    public void getTablesFromHistory(boolean _callFromFormActiveMethod = false)
    {
        CostAllocationHistory_RU    grCostAllocationHistory;
        CostAllocationHistory_RU    costAllocationHistory;

        TmpCostAllocationBase_RU    costAllocationBase;
        TmpCostAllocationResult_RU  costAllocationResult;

        void initCostAllocationBase()
        {
            costAllocationBase.clear();
            costAllocationBase.AllocSourceJourRecId = vendInvoiceJourRecId;
            costAllocationBase.initFromCostAllocationHistory(grCostAllocationHistory);
            costAllocationBase.insert();
        }

        void initCostAllocationResult()
        {
            costAllocationResult.clear();
            costAllocationResult.AllocBaseRecId         = costAllocationBase.RecId;
            costAllocationResult.AllocSourceRecId       = costAllocationHistory.AllocatedInvoiceTransRecId;
            costAllocationResult.HistoryAllocRecId      = costAllocationHistory.RecId;
            costAllocationResult.MarkupCode             = costAllocationHistory.MarkupCode;
            costAllocationResult.Amount                 = costAllocationHistory.AmountPosted;
            costAllocationResult.CostAllocationParmId   = costAllocationHistory.CostAllocationParmId;
            costAllocationResult.Cancelled              = costAllocationHistory.CostAllocationHistoryRecId != 0;
            costAllocationResult.PostedDate             = costAllocationHistory.TransDate;
            costAllocationResult.CustVend               = costAllocationHistory.CustVend;

            if (costAllocationHistory.IndebtednessTransRecId)
            {
                costAllocationResult.EcoResCategory        = costAllocationHistory.EcoResCategory;
                costAllocationResult.IndebtednessInvoiceId = costAllocationHistory.IndebtednessInvoiceId;
                if (costAllocationResult.CustVend == CustVend_RU::Cust)
                {
                    costAllocationResult.IndebtednessInvoiceJourRecId = CustTrans::find(costAllocationHistory.IndebtednessTransRecId).custInvoiceJour_RU().RecId;
                }
                else if (costAllocationResult.CustVend == CustVend_RU::Vend)
                {
                    costAllocationResult.IndebtednessInvoiceJourRecId = VendTrans::find(costAllocationHistory.IndebtednessTransRecId).vendInvoiceJour_RU().RecId;
                }
            }

            costAllocationResult.insert();
        }

        vendInvoiceTrans = fdsVendInvoiceTrans.cursor();
        if (!vendInvoiceTrans.RecId)
        {
            return;
        }

        RefRecId newVendInvoiceJourRecId = vendInvoiceTrans.vendInvoiceJour().RecId;
        if (!newVendInvoiceJourRecId)
        {
            return;
        }

        if (!_callFromFormActiveMethod || !vendInvoiceJourRecId || vendInvoiceJourRecId != newVendInvoiceJourRecId)
        {
            this.initMarkRecordSets();
            vendInvoiceJourRecId = newVendInvoiceJourRecId;

            switch (this.allocationType())
            {
                case CostAllocationType_RU::Overhead:
                    while select grCostAllocationHistory
                        group by AllocationType, CustVendAccount, GoalVendInvoiceTransRecId, DefaultDimension
                        where grCostAllocationHistory.AllocationType            == this.allocationType()
                           && grCostAllocationHistory.AllocatedInvoiceJourRecId == vendInvoiceJourRecId
                           && (! (fcShowCancelled.value() || grCostAllocationHistory.CostAllocationHistoryRecId) || fcShowCancelled.value())
                    {
                        initCostAllocationBase();

                        while select costAllocationHistory
                            where costAllocationHistory.AllocationType              == grCostAllocationHistory.AllocationType
                               && costAllocationHistory.CustVendAccount             == grCostAllocationHistory.CustVendAccount
                               && costAllocationHistory.GoalVendInvoiceTransRecId   == grCostAllocationHistory.GoalVendInvoiceTransRecId
                               && costAllocationHistory.DefaultDimension            == grCostAllocationHistory.DefaultDimension
                               && costAllocationHistory.AllocatedInvoiceJourRecId   == vendInvoiceJourRecId
                               && (! (fcShowCancelled.value() || costAllocationHistory.CostAllocationHistoryRecId) || fcShowCancelled.value())
                        {
                            initCostAllocationResult();
                        }
                    }
                    break;

                case CostAllocationType_RU::Indebtedness:
                    while select grCostAllocationHistory
                        group by AllocationType, CustVend, CustVendAccount, PostingProfile, DefaultDimension
                        where grCostAllocationHistory.AllocationType            == this.allocationType()
                           && grCostAllocationHistory.AllocatedInvoiceJourRecId == vendInvoiceJourRecId
                           && (! (fcShowCancelled.value() || grCostAllocationHistory.CostAllocationHistoryRecId) || fcShowCancelled.value())
                    {
                        initCostAllocationBase();

                        while select costAllocationHistory
                            where costAllocationHistory.AllocationType              == grCostAllocationHistory.AllocationType
                               && costAllocationHistory.CustVend                    == grCostAllocationHistory.CustVend
                               && costAllocationHistory.CustVendAccount             == grCostAllocationHistory.CustVendAccount
                               && costAllocationHistory.PostingProfile              == grCostAllocationHistory.PostingProfile
                               && costAllocationHistory.DefaultDimension            == grCostAllocationHistory.DefaultDimension
                               && costAllocationHistory.AllocatedInvoiceJourRecId   == vendInvoiceJourRecId
                               && (!(fcShowCancelled.value() || costAllocationHistory.CostAllocationHistoryRecId) || fcShowCancelled.value())
                        {
                            initCostAllocationResult();
                        }
                    }
                    break;

                case CostAllocationType_RU::Expenses:
                    while select grCostAllocationHistory
                        group by AllocationType, LedgerDimension, DefaultDimension
                        where grCostAllocationHistory.AllocationType            == this.allocationType()
                           && grCostAllocationHistory.AllocatedInvoiceJourRecId == vendInvoiceJourRecId
                           && (!(fcShowCancelled.value() || grCostAllocationHistory.CostAllocationHistoryRecId) || fcShowCancelled.value())
                    {
                        initCostAllocationBase();

                        while select costAllocationHistory
                            where costAllocationHistory.AllocationType              == grCostAllocationHistory.AllocationType
                               && costAllocationHistory.LedgerDimension             == grCostAllocationHistory.LedgerDimension
                               && costAllocationHistory.DefaultDimension            == grCostAllocationHistory.DefaultDimension
                               && costAllocationHistory.AllocatedInvoiceJourRecId   == vendInvoiceJourRecId
                               && (!(fcShowCancelled.value() || costAllocationHistory.CostAllocationHistoryRecId) || fcShowCancelled.value())
                        {
                            initCostAllocationResult();
                        }
                    }
                    break;
            }

            objectFormRun.setCostAllocationBase(costAllocationBase);
            objectFormRun.setCostAllocationResult(costAllocationResult);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAmountsCtrl</Name>
				<Source><![CDATA[
    public void initAmountsCtrl(FormControl _fcAmountNotAlloc,
                                FormControl _fcAmount4Alloc,
                                FormControl _fcAmountAlloc,
                                FormControl _fcAmountAllocResult)
    {
        fcAmountNotAlloc        = _fcAmountNotAlloc;
        fcAmount4Alloc          = _fcAmount4Alloc;
        fcAmountAlloc           = _fcAmountAlloc;
        fcAmountAllocResult     = _fcAmountAllocResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initButtons</Name>
				<Source><![CDATA[
    public void initButtons(FormControl _btnCostAllocationPost,
                            FormControl _btnCostAllocationMakeResult,
                            FormControl _btnCostAllocationSelectBase)
    {
        btnCostAllocationPost       = _btnCostAllocationPost;
        btnCostAllocationMakeResult = _btnCostAllocationMakeResult;
        btnCostAllocationSelectBase = _btnCostAllocationSelectBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSelectAllBaseButton</Name>
				<Source><![CDATA[
    internal void initSelectAllBaseButton(FormButtonControl _btnSelectAllBase)
    {
        btnSelectAllBase = _btnSelectAllBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCategoryBaseDesign</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes form design for the category based item.
    /// </summary>
    public void initCategoryBaseDesign()
    {
        vendInvoiceTrans = fdsVendInvoiceTrans.cursor();

        if (costAllocationProcessType == CostAllocationProcessType_RU::Allocation)
        {
            fdsCostAllocationResult.object(fieldNum(TmpCostAllocationResult_RU, EcoResCategory)).visible(
                vendInvoiceTrans.isCategoryBased() &&
                this.allocationType() == CostAllocationType_RU::Indebtedness);

            if (fdsCostAllocationResult.object(fieldNum(TmpCostAllocationResult_RU, EcoResCategory)).visible())
            {
                TmpCostAllocationBase_RU costAllocationBase = fdsCostAllocationBase.cursor();
                fdsCostAllocationResult.object(fieldNum(TmpCostAllocationResult_RU, EcoResCategory)).allowEdit(costAllocationBase.CustVend == CustVend_RU::Cust);
            }
        }
        else
        {
            fdsCostAllocationResult.object(fieldNum(TmpCostAllocationResult_RU, EcoResCategory)).visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControls</Name>
				<Source><![CDATA[
    public void initControls(FormControl            _fcShowCancelled,
                             FormControl            _fcAllocateAfter,
                             FormControl            _fcPostingDate,
                             FormControl            _fcAmountGroup,
                             FormControl            _fcEditAmount4Alloc,
                             FormControl            _fcGridResult,
                             FormControl            _fcGridAllocBaseIndebtedness,
                             FormControl            _fcAllocBaseIndebtedness,
                             FormControl            _fcGridAllocBaseOverhead,
                             FormControl            _fcAllocBaseOverhead,
                             FormControl            _fcGridAllocBaseExpenses,
                             FormControl            _fcAllocBaseExpenses,
                             FormControl            _fcAllocBaseDimension,
                             FormControl            _fcAllocResult,
                             FormControl            _fcDateIntervalGroup,
                             FormControl            _fcFromDate,
                             FormControl            _fcToDate,
                             FormControl            _fcResultCancelGroup,
                             FormCheckBoxControl    _fcStockedProduct,
                             FormControl            _fcBaseNewDelGroup)
    {
        fcShowCancelled             = _fcShowCancelled;

        fcAllocateAfter             = _fcAllocateAfter;
        fcPostingDate               = _fcPostingDate;
        fcAmountGroup               = _fcAmountGroup;

        fcDateIntervalGroup         = _fcDateIntervalGroup;
        fcFromDate                  = _fcFromDate;
        fcToDate                    = _fcToDate;

        fcEditAmount4Alloc          = _fcEditAmount4Alloc;

        fcGridResult                = _fcGridResult;

        fcGridAllocBaseIndebtedness = _fcGridAllocBaseIndebtedness;
        fcAllocBaseIndebtedness     = _fcAllocBaseIndebtedness;

        fcGridAllocBaseOverhead     = _fcGridAllocBaseOverhead;
        fcAllocBaseOverhead         = _fcAllocBaseOverhead;

        fcGridAllocBaseExpenses     = _fcGridAllocBaseExpenses;
        fcAllocBaseExpenses         = _fcAllocBaseExpenses;

        fcAllocBaseDimension        = _fcAllocBaseDimension;

        fcAllocResult               = _fcAllocResult;

        fcFromDate.dateValue(dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        fcToDate.dateValue(dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));

        fcResultCancelGroup         = _fcResultCancelGroup;

        fcStockedProduct            = _fcStockedProduct;

        fcBaseNewDelGroup           = _fcBaseNewDelGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDatasource</Name>
				<Source><![CDATA[
    public void initDatasource(FormDataSource   _fdsCostAllocationBase,
                               FormDataSource   _fdsCostAllocationResult,
                               FormDataSource   _fdsVendInvoiceTrans)
    {
        fdsVendInvoiceTrans     = _fdsVendInvoiceTrans;
        fdsCostAllocationBase   = _fdsCostAllocationBase;
        fdsCostAllocationResult = _fdsCostAllocationResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDesign</Name>
				<Source><![CDATA[
    public void initDesign()
    {
        this.clearDesign();

        switch (this.allocationType())
        {
            case CostAllocationType_RU::Overhead:
                this.initDesignOverhead();
                break;

            case CostAllocationType_RU::Expenses, CostAllocationType_RU::Indebtedness:
                this.initDesignIndebtednessAndExpenses();
                break;
        }

        this.initProcessTypeDesign();

        this.initFormData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProcessTypeDesign</Name>
				<Source><![CDATA[
    private void initProcessTypeDesign()
    {
        btnSelectAllBase.visible(costAllocationProcessType == CostAllocationProcessType_RU::Allocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDesignIndebtednessAndExpenses</Name>
				<Source><![CDATA[
    public void initDesignIndebtednessAndExpenses()
    {
        if (costAllocationProcessType == CostAllocationProcessType_RU::Allocation)
        {
            fcDateIntervalGroup         .visible(false);
            fcResultCancelGroup         .visible(false);
            fcShowCancelled             .visible(false);

            fdsCostAllocationBase.object(fieldNum(TmpCostAllocationBase_RU, PostDate)).visible(false);
            btnCostAllocationPost.text("@SYS6098");
        }
        else
        {
            fcAllocateAfter             .visible(false);
            fcAmountGroup               .visible(false);
            fcEditAmount4Alloc          .visible(false);

            btnCostAllocationMakeResult .visible(false);

            fcAmountAllocResult         .allowEdit(false);
            fcAllocResult               .allowEdit(false);

            fcGridAllocBaseIndebtedness .allowEdit(false);
            fcAllocBaseIndebtedness     .allowEdit(false);

            fcGridAllocBaseExpenses     .allowEdit(false);
            fcAllocBaseExpenses         .allowEdit(false);

            fcAllocBaseDimension        .allowEdit(false);

            fdsCostAllocationBase       .allowCreate(false);
            fdsCostAllocationBase       .allowDelete(false);

            fdsCostAllocationResult     .object(fieldNum(TmpCostAllocationResult_RU, MarkupCode)).allowEdit(false);
            fdsCostAllocationResult     .object(fieldNum(TmpCostAllocationResult_RU, IndebtednessInvoiceId)).visible(this.allocationType() == CostAllocationType_RU::Indebtedness);

            btnCostAllocationPost.text("@SYS30312");

            if (costAllocationProcessType == CostAllocationProcessType_RU::Allocation)
            {
                fcPostingDate.label("@SYS14475");
            }
            else
            {
                fcPostingDate.label("@SYS13200");
            }

            if (sourceVendInvoiceJour.RecId)
            {
                fcDateIntervalGroup.visible(false);
            }
        }

        fcGridAllocBaseOverhead     .visible(false);
        fcAllocBaseOverhead         .visible(false);

        fcGridAllocBaseIndebtedness .visible(this.allocationType()  == CostAllocationType_RU::Indebtedness);
        fcAllocBaseIndebtedness     .visible(this.allocationType()  == CostAllocationType_RU::Indebtedness);
        btnCostAllocationSelectBase .visible(this.allocationType()  == CostAllocationType_RU::Indebtedness);

        fcGridAllocBaseExpenses     .visible(this.allocationType()  == CostAllocationType_RU::Expenses);
        fcAllocBaseExpenses         .visible(this.allocationType()  == CostAllocationType_RU::Expenses);

        fcBaseNewDelGroup           .visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDesignOverhead</Name>
				<Source><![CDATA[
    public void initDesignOverhead()
    {
        if (costAllocationProcessType == CostAllocationProcessType_RU::Allocation)
        {
            fcDateIntervalGroup         .visible(false);
            fcResultCancelGroup         .visible(false);
            fcShowCancelled             .visible(false);

            btnCostAllocationPost.text("@SYS6098");
        }
        else
        {
            fcAllocateAfter             .visible(false);
            fcAmountGroup               .visible(false);
            fcEditAmount4Alloc          .visible(false);
            btnCostAllocationMakeResult .visible(false);
            btnCostAllocationSelectBase .enabled(false);

            fcAmountAllocResult         .allowEdit(false);
            fcAllocResult               .allowEdit(false);

            fdsCostAllocationResult     .object(fieldNum(TmpCostAllocationResult_RU, IndebtednessInvoiceId)).visible(false);

            fcPostingDate.label("@SYS13200");
            btnCostAllocationPost.text("@SYS30312");

            if (sourceVendInvoiceJour.RecId)
            {
                fcDateIntervalGroup.visible(false);
            }

            fdsCostAllocationBase       .allowDelete(false);
        }

        fcAllocBaseDimension        .allowEdit(false);
        fcGridAllocBaseOverhead     .allowEdit(false);
        fcAllocBaseOverhead         .allowEdit(false);

        fcGridAllocBaseIndebtedness .visible(false);
        fcAllocBaseIndebtedness     .visible(false);

        fcGridAllocBaseExpenses     .visible(false);
        fcAllocBaseExpenses         .visible(false);

        fcBaseNewDelGroup           .visible(false);

        fcStockedProduct.enabled(true);

        fdsCostAllocationBase       .allowCreate(false);

        fdsCostAllocationResult.object(fieldNum(TmpCostAllocationResult_RU, MarkupCode)).allowEdit(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormData</Name>
				<Source><![CDATA[
    public void initFormData()
    {
        objectFormRun.clearTmpTables();

        if (costAllocationProcessType == CostAllocationProcessType_RU::Allocation)
        {
            this.recalcAmounts();
        }
        else
        {
            this.getTablesFromHistory();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMarkRecordSets</Name>
				<Source><![CDATA[
    public void initMarkRecordSets()
    {
        vendInvoiceMarkSet      = new Set(Types::Int64);
        allocationBaseMarkSet   = new Set(Types::Int64);
        mapAmount4Alloc         = new Map(Types::Int64, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParams</Name>
				<Source><![CDATA[
    public void initParams(Object _formRun)
    {
        if (! _formRun)
        {
            throw error("@SYS59121");
        }

        formRun                     = _formRun;
        objectFormRun               = _formRun;
        costAllocationProcessType   = formRun.args().parmEnum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapAmount4Alloc</Name>
				<Source><![CDATA[
    public Map mapAmount4Alloc()
    {
        return mapAmount4Alloc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markResultRecord</Name>
				<Source><![CDATA[
    public void markResultRecord(TmpCostAllocationResult_RU _costAllocationResult,
                                 boolean                    _mark,
                                 boolean                    _skipRecursionWithParmId = false)
    {
        TmpCostAllocationBase_RU    locCostAllocationBase;
        TmpCostAllocationResult_RU  locCostAllocationResult;

        locCostAllocationBase   .setTmpData(fdsCostAllocationBase.cursor());
        locCostAllocationResult .setTmpData(fdsCostAllocationResult.cursor());

        if (_mark)
        {
            if (costAllocationProcessType == CostAllocationProcessType_RU::Allocation)
            {
                if (! this.checkChangeResult(_costAllocationResult, _costAllocationResult.Amount))
                {
                    throw error("@GLS114525");
                }
            }
        }

        _costAllocationResult.Mark = _mark;
        _costAllocationResult.update();

        if (_mark)
        {
            select firstonly locCostAllocationBase
                where locCostAllocationBase.RecId == _costAllocationResult.AllocBaseRecId;

            this.editMarkRecord(NoYes::Yes, locCostAllocationBase, NoYes::Yes);
        }
        else
        {
            select firstonly RecId from locCostAllocationResult
                where locCostAllocationResult.AllocBaseRecId    == _costAllocationResult.AllocBaseRecId &&
                      locCostAllocationResult.RecId             != _costAllocationResult.RecId          &&
                      locCostAllocationResult.Cancelled         == NoYes::No                            &&
                      locCostAllocationResult.Mark              == NoYes::Yes;

            if (!locCostAllocationResult.RecId)
            {
                select firstonly locCostAllocationBase
                    where locCostAllocationBase.RecId == _costAllocationResult.AllocBaseRecId;

                this.editMarkRecord(NoYes::Yes, locCostAllocationBase, NoYes::No);
            }
        }

        if (!_skipRecursionWithParmId && costAllocationProcessType == CostAllocationProcessType_RU::Cancel)
        {
            ttsbegin;
            while select locCostAllocationResult
                where locCostAllocationResult.CostAllocationParmId == _costAllocationResult.CostAllocationParmId &&
                      locCostAllocationResult.Cancelled            == NoYes::No                                  &&
                      locCostAllocationResult.RecId                != _costAllocationResult.RecId
            {
                this.markResultRecord(locCostAllocationResult, _mark, true);
            }
            ttscommit;
        }

        fdsVendInvoiceTrans.reread();
        fdsCostAllocationBase.reread();
        fdsCostAllocationResult.reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markResultRecordFromAllocationBase</Name>
				<Source><![CDATA[
    public void markResultRecordFromAllocationBase(RefRecId _costAlocationBaseRecId,
                                                   boolean  _mark)
    {
        TmpCostAllocationResult_RU locCostAllocationResult;

        locCostAllocationResult .setTmpData(fdsCostAllocationResult.cursor());

        ttsbegin;
        while select forupdate locCostAllocationResult
            where locCostAllocationResult.AllocBaseRecId    == _costAlocationBaseRecId &&
                  locCostAllocationResult.Cancelled         == NoYes::No
        {
            this.markResultRecord(locCostAllocationResult, _mark);
        }
        ttscommit;

        fdsVendInvoiceTrans.reread();
        fdsCostAllocationResult.reread();
        fdsCostAllocationBase.reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markResultRecordFromVendInvoice</Name>
				<Source><![CDATA[
    public void markResultRecordFromVendInvoice(RefRecId    _vendInvoiceTransRecId,
                                                boolean     _mark)
    {
        TmpCostAllocationResult_RU locCostAllocationResult;

        locCostAllocationResult .setTmpData(fdsCostAllocationResult.cursor());

        ttsbegin;
        while select forupdate locCostAllocationResult
            where locCostAllocationResult.AllocSourceRecId  == _vendInvoiceTransRecId &&
                  locCostAllocationResult.Cancelled         == NoYes::No
        {
            this.markResultRecord(locCostAllocationResult, _mark, true);
        }
        ttscommit;

        fdsVendInvoiceTrans.reread();
        fdsCostAllocationBase.executeQuery();
        fdsCostAllocationResult.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.initMarkRecordSets();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllocationType</Name>
				<Source><![CDATA[
    public FormComboBoxControl parmAllocationType(FormControl _fcAllocationType = fcAllocationType)
    {
        fcAllocationType = _fcAllocationType;

        return fcAllocationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingDate</Name>
				<Source><![CDATA[
    public TransDate postingDate()
    {
        return fcPostingDate.dateValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcAmounts</Name>
				<Source><![CDATA[
    public void recalcAmounts()
    {
        Amount              amountNotAlloc       = 0;
        Amount              amount4Alloc         = 0;
        Amount              amountAlloc          = 0;
        Amount              markupAmountNotAlloc = 0;

        VendInvoiceTrans locVendInvoiceTrans = fdsVendInvoiceTrans.getFirst();
        while (locVendInvoiceTrans)
        {
            markupAmountNotAlloc = locVendInvoiceTrans.markupAmountNotAlloc_RU();

            amountAlloc     += locVendInvoiceTrans.LineAmount - markupAmountNotAlloc;
            amountNotAlloc  += markupAmountNotAlloc;

            locVendInvoiceTrans = fdsVendInvoiceTrans.getNext();
        }

        MapEnumerator enumerator = mapAmount4Alloc.getEnumerator();
        while (enumerator.moveNext())
        {
            amount4Alloc += enumerator.currentValue();
        }

        fcAmountNotAlloc        .realValue(amountNotAlloc);
        fcAmount4Alloc          .realValue(amount4Alloc);
        fcAmountAlloc           .realValue(amountAlloc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCostAllocationMakeResult</Name>
				<Source><![CDATA[
    public void runCostAllocationMakeResult(boolean _forcedRecalculation = false)
    {
        TmpCostAllocationResult_RU costAllocationResult;

        if (_forcedRecalculation || this.allocationType() != CostAllocationType_RU::Expenses)
        {
            costAllocationResult.setTmpData(fdsCostAllocationResult.cursor());

            select firstonly RecId from costAllocationResult;
            if (costAllocationResult.RecId)
            {
                if (_forcedRecalculation || Box::yesNo("@GLS114526", DialogButton::Yes) == DialogButton::Yes)
                {
                    CostAllocationMakeResult_RU::main(new Args(objectFormRun));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCancelledHistory</Name>
				<Source><![CDATA[
    public boolean showCancelledHistory()
    {
        return fcShowCancelled.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceVendInvoiceJour</Name>
				<Source><![CDATA[
    public VendInvoiceJour sourceVendInvoiceJour(VendInvoiceJour _sourceVendInvoiceJour = sourceVendInvoiceJour)
    {
        if (!sourceVendInvoiceJour)
        {
            sourceVendInvoiceJour.data(_sourceVendInvoiceJour);
        }

        return sourceVendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stockedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates if the product should be stocked only or not.
    /// </summary>
    /// <returns>
    ///     true if the form field is checked; otherwise, false.
    /// </returns>
    public boolean stockedProduct()
    {
        if (! fcStockedProduct)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        return fcStockedProduct.checked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectAllBaseLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects all base lines.
    /// </summary>
    internal void selectAllBaseLines()
    {
        boolean mark = !this.editMarkRecord(false, fdsCostAllocationBase.getFirst(), false);
        TmpCostAllocationBase_RU base = fdsCostAllocationBase.getFirst();

        while (base)
        {
            this.markResultRecordFromAllocationBase(base.RecId, mark);
            this.editMarkRecord(true, base, mark);

            base = fdsCostAllocationBase.getNext();
        }

        this.executeDS();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostAllocationForm_RU construct()
    {
        return new CostAllocationForm_RU();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>