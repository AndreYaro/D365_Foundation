<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LvNRTaxCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LvNRTaxCreate</c> class generates <c>LvNRTaxTrans</c> records.
/// </summary>
public class LvNRTaxCreate extends RunBaseBatch implements BatchRetryable
{
    QueryRun        queryRun;
    Quarter         quarter;
    Yr              yr;

    LvNRTransType   nrTransType;

    InventPackagingUnit tmpPackagingUnits;

    DialogField     dlgQuarter;
    DialogField     dlgYr;

    #define.currentVersion(1)
    #localmacro.CurrentList
        quarter,
        yr
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInventTransDataSource</Name>
				<Source><![CDATA[
    private void addInventTransDataSource(QueryBuildDataSource _ds, QueryBuildDataSource _inventDimFilter)
    {
        QueryBuildDataSource transOriginDS = _ds.addDataSource(tablenum(InventTransOrigin), this.subDataSourceName(_ds.name(), tablenum(InventTransOrigin)));
        QueryBuildDataSource transDS = transOriginDS.addDataSource(tablenum(InventTrans), this.subDataSourceName(transOriginDS.name(), tablenum(InventTrans)));
        QueryBuildDataSource inventDim;

        transOriginDS.fetchMode(QueryFetchMode::One2One);
        transDS.fetchMode(QueryFetchMode::One2One);
        transDS.relations(true);
        if (_ds.table() == tablenum(InventJournalTrans))
        {
            transOriginDS.addRange(fieldnum(InventTransOrigin, InventTransId)).value(strfmt('((%1.InventTransID == %2.InventTransId)||'+
                                                                                            '(%1.ToInventTransId && (%1.ToInventTransId==%2.InventTransId)))',
                                                                                             _ds.name(), transOriginDS.name()));
        }
        else
        {
            transOriginDS.relations(true);
            if (_ds.table() == tablenum(CustInvoiceTrans))
            {
                transDS.addRange(fieldnum(InventTrans, Voucher)).value('(Voucher==CustInvoiceJour.LedgerVoucher)');
            }
        }
        transDS.addRange(fieldnum(InventTrans, DatePhysical)).value(this.dateRange());

        inventDim = transDS.addDataSource(tablenum(InventDim));
        inventDim.relations(true);
        inventDim.joinMode(JoinMode::ExistsJoin);
        inventDim.fetchMode(QueryFetchMode::One2One);
        inventDim.enabled(this.copyRanges(_inventDimFilter, inventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return enum2str(nrTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy rages from source datasource to target datasource.
    /// </summary>
    /// <param name="_source">
    /// Source datasource.
    /// </param>
    /// <param name="_target">
    /// Target datasource.
    /// </param>
    /// <returns>
    /// True, if any not empty range was copied
    /// </returns>
    private boolean copyRanges(QueryBuildDataSource _source, QueryBuildDataSource _target)
    {
        boolean ret;
        int i;
        QueryBuildRange range;

        for (i = 1; i <= _source.rangeCount(); i++)
        {
            range = _source.range(i);
            _target.addRange(range.field()).value(range.value());
            ret = ret || range.value();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateRange</Name>
				<Source><![CDATA[
    private str dateRange()
    {
        date    firstDate;
        date    lastDate;
        [firstDate, lastDate] = LvNRTaxCreate::quarterDates(quarter, yr);
        return queryRange(firstDate, lastDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunBase dialog = super();

        dialog.addGroup("@GLS113404");
        dlgQuarter      = dialog.addFieldValue(enumstr(Quarter), quarter);
        dlgYr           = dialog.addFieldValue(extendedtypestr(Yr), yr, "@SYS107162");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        quarter         = dlgQuarter.value();
        yr              = dlgYr.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        this.queryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpPackagingUnits</Name>
				<Source><![CDATA[
    private void initTmpPackagingUnits(Query _query)
    {
        Query       q = new Query();
        QueryRun    qr;

        SysQuery::mergeRanges(q, _query, _query.dataSourceTable(tablenum(InventPackagingUnit)).id(), true);
        tmpPackagingUnits.setTmp();

        qr = new QueryRun(q);
        while (qr.next())
        {
            tmpPackagingUnits.data(qr.get(tablenum(InventPackagingUnit)));
            tmpPackagingUnits.doInsert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchesPackingUnit</Name>
				<Source><![CDATA[
    private boolean matchesPackingUnit(ItemId _itemId, InventDim _inventDim, InventPackingUnit  _unit = '')
    {
        InventPackagingUnit inventPackagingUnit;
        InventTable         inventTable;
        InventDim           inventDim;
        InventDimParm       inventDimParm;

        if (nrTransType != LvNRTransType::TaxOnPackingMaterials)
        {
            return true;
        }
        inventPackagingUnit.setTmp();
        inventPackagingUnit.setTmpData(tmpPackagingUnits);
        if (_itemId)
        {
            inventTable = InventTable::find(_itemId);

            inventDimParm = EcoResProductDimGroupSetup::newInventTable(inventTable).inventDimParmActiveDimensions();
            inventDim.data(_inventDim);
            inventDim.clearNotSelectedDim(inventDimParm);
            inventDim = InventDim::findDim(inventDim);

            if (inventDim.InventDimId && inventDim.InventDimId != InventDim::inventDimIdBlank())
            {
                select firstonly RecId from inventPackagingUnit
                       index hint PackingUnitIdx
                       where inventPackagingUnit.ItemCode     == TableGroupAll::Table   &&
                             inventPackagingUnit.ItemRelation == _itemId                &&
                             inventPackagingUnit.InventDimId  == inventDim.InventDimId  &&
                             (prmisdefault(_unit) || inventPackagingUnit.Unit == _unit);
            }

            if (! inventPackagingUnit)
            {
                select firstonly RecId from inventPackagingUnit
                       index hint PackingUnitIdx
                       where inventPackagingUnit.ItemCode     == TableGroupAll::Table          &&
                             inventPackagingUnit.ItemRelation == _itemId                       &&
                             inventPackagingUnit.InventDimId  == InventDim::inventDimIdBlank() &&
                             (prmisdefault(_unit) || inventPackagingUnit.Unit == _unit);
            }

            if (! inventPackagingUnit)
            {
                select firstonly RecId from inventPackagingUnit
                       index hint PackingUnitIdx
                       where inventPackagingUnit.ItemCode     == TableGroupAll::GroupId       &&
                             inventPackagingUnit.ItemRelation == inventTable.PackagingGroupId &&
                             (prmisdefault(_unit) || inventPackagingUnit.Unit == _unit);
            }

            if (! inventPackagingUnit)
            {
                select firstonly RecId from inventPackagingUnit
                       index hint PackingUnitIdx
                       where inventPackagingUnit.ItemCode == TableGroupAll::All &&
                             (prmisdefault(_unit) || inventPackagingUnit.Unit == _unit);
            }
        }

        return inventPackagingUnit.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(LvNRTransType _transType = LvNRTransType::TaxOnDangerousItems)
    {
        nrTransType = _transType;
        this.reset();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modify query after prompt
    /// </summary>
    /// <param name="_query">
    /// Target query.
    /// </param>
    private void postProcessQuery(Query _query)
    {
        // container of pairs [trableNum, selectionFields]
        // !!! order should match ds numbers in run()
        container tables = [
            [tablenum(CustInvoiceTrans)  , [
                 fieldnum(CustInvoiceTrans, TableId),
                 fieldnum(CustInvoiceTrans, RecId),
                 fieldnum(CustInvoiceTrans, LineAmount),
                 fieldnum(CustInvoiceTrans, InventTransId)
            ]],

            [tablenum(ProjInvoiceItem)   , [
                fieldnum(ProjInvoiceItem, TableId),
                fieldnum(ProjInvoiceItem, RecId),
                fieldnum(ProjInvoiceItem, LineAmount)
            ]],

            [tablenum(InventJournalTrans), [
                fieldnum(InventJournalTrans, TableId),
                fieldnum(InventJournalTrans, RecId),
                fieldnum(InventJournalTrans, CostAmount)
            ]]
        ];
        int                  dsIdx;
        int                  fieldIdx;
        tableId              table;
        container            fields;
        QueryBuildDataSource ds;
        QueryBuildDataSource inventDims = _query.dataSourceTable(tablenum(InventDim));

        inventDims.enabled(false);

        for (dsIdx = 1; dsIdx <= conlen(tables); dsIdx++)
        {
            [table, fields] = conpeek(tables, dsIdx);
            ds = _query.dataSourceTable(table);
            this.addInventTransDataSource(ds, inventDims);
            for (fieldIdx = 1; fieldIdx <= conlen(fields); fieldIdx++)
            {
                ds.addSelectionField(conpeek(fields, fieldIdx));
            }
        }

        _query.dataSourceTable(tablenum(CustInvoiceJour)).addSelectionField(fieldnum(CustInvoiceJour, TaxGroup));
        _query.dataSourceTable(tablenum(ProjInvoiceJour)).addSelectionField(fieldnum(ProjInvoiceJour, TaxGroupId));
        _query.dataSourceTable(tablenum(InventJournalTable)).addSelectionField(fieldnum(InventJournalTable, RecId));

        _query.dataSourceTable(tablenum(InventPackagingUnit)).enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBOMLinesForInventJournal</Name>
				<Source><![CDATA[
    private void processBOMLinesForInventJournal(InventTrans _inventTrans)
    {
        InventTrans                     componentInventTrans;
        InventJournalTrans              inventJournalTrans_BomLine;
        InventTransOriginJournalTrans   inventTransOriginJournalTrans;
        InventTransOriginJournalTrans   componentInventTransOriginJournalTrans;
        inventTransOrigin               inventTransOrigin = _inventTrans.InventTransOrigin();

        if (InventTable::find(_inventTrans.ItemId).ItemType == ItemType::Item)
        {
            while select TableId from inventTransOriginJournalTrans
                where inventTransOriginJournalTrans.InventTransOrigin == inventTransOrigin.RecId
            join TableId, RecId, CostAmount from inventJournalTrans_BomLine
                where inventJournalTrans_BomLine.JournalId                      == inventTransOriginJournalTrans.InventJournalId
                    && inventJournalTrans_BomLine.DataAreaId                     == inventTransOriginJournalTrans.InventJournalDataAreaId // not joining on linenum as we want all lines in journal
                    && inventJournalTrans_BomLine.InventTransIdFather            == inventTransOrigin.InventTransId
            join TableId from componentInventTransOriginJournalTrans
                where componentInventTransOriginJournalTrans.InventJournalDataAreaId     == inventJournalTrans_BomLine.DataAreaId
                    && componentInventTransOriginJournalTrans.InventJournalId            == inventJournalTrans_BomLine.JournalId
                    && componentInventTransOriginJournalTrans.InventJournalLineNum       == inventJournalTrans_BomLine.LineNum
            join componentInventTrans
                where componentInventTrans.InventTransOrigin                        == componentInventTransOriginJournalTrans.InventTransOrigin
            {
                LvNRTaxTrans::createFromInventTrans(componentInventTrans,
                                                    nrTransType,
                                                    inventJournalTrans_BomLine.TableId,
                                                    inventJournalTrans_BomLine.RecId,
                                                    inventJournalTrans_BomLine.CostAmount,
                                                    InventParameters::find().SalesTaxGroup_LV);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize queryrun object.
    /// </summary>
    protected void queryBuild()
    {
        queryRun = new QueryRun(querystr(LvTaxOnItem));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the <c>QueryRun</c>, which is used by the <c>QueryPrompt.</c>
    /// </summary>
    /// <returns>
    ///    The <c>QueryRun</c>, which is used by the <c>QueryPrompt</c>.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog.Do not instantiate the <c>queryRun</c> whenever the method is called. This should be done in
    ///    the <c>unpack</c> method and the <c>initParmDefault</c> method. Or it should be used in the
    ///    <c>init</c> method (if this is used) or in the method only when it is not instantiated.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLV00016, funcName());

        CustInvoiceJour         custInvoiceJour;
        InventJournalTable      inventJournalTable;
        ProjInvoiceJour         projInvoiceJour;
        CustInvoiceTrans        custInvoiceTrans;
        ProjInvoiceItem         projInvoiceItem;
        InventTrans             inventTrans;
        InventJournalTrans      inventJournalTrans;
        SalesLine               salesLine;

        setprefix(this.caption());

        if (nrTransType == LvNRTransType::TaxOnPackingMaterials)
        {
            this.initTmpPackagingUnits(queryRun.query());
        }

        this.postProcessQuery(queryRun.query());

        while (queryRun.next())
        {
            custInvoiceJour = queryRun.get(tablenum(CustInvoiceJour));
            if (custInvoiceJour)
            {
                custInvoiceTrans    = queryRun.get(tablenum(CustInvoiceTrans));
                inventTrans         = queryRun.get(tablenum(InventTrans), 1);

                salesLine = custInvoiceTrans.salesLine();
                if (! salesLine)
                {
                    salesLine = SalesLine::findInventTransId(inventTrans.ReturnInventTransOrigin().InventTransId);
                }
                if (this.matchesPackingUnit(inventTrans.ItemId, inventTrans.inventDim(), salesLine.PackingUnit))
                {
                    LvNRTaxTrans::createFromInventTrans(inventTrans,
                                                        nrTransType,
                                                        custInvoiceTrans.TableId,
                                                        custInvoiceTrans.RecId,
                                                        custInvoiceTrans.LineAmount,
                                                        custInvoiceJour.TaxGroup,
                                                        salesLine.PackingUnit);
                }
            }

            projInvoiceJour = queryRun.get(tablenum(ProjInvoiceJour));
            if (projInvoiceJour)
            {
                projInvoiceItem    = queryRun.get(tablenum(ProjInvoiceItem));
                inventTrans         = queryRun.get(tablenum(InventTrans), 2);

                if (this.matchesPackingUnit(inventTrans.ItemId, inventTrans.inventDim()))
                {
                    LvNRTaxTrans::createFromInventTrans(inventTrans,
                                                        nrTransType,
                                                        projInvoiceItem.TableId,
                                                        projInvoiceItem.RecId,
                                                        projInvoiceItem.LineAmount,
                                                        projInvoiceJour.TaxGroupId);
                }
            }

            inventJournalTable = queryRun.get(tablenum(InventJournalTable));
            if (inventJournalTable)
            {
                inventJournalTable      = queryRun.get(tablenum(InventJournalTable));
                inventJournalTrans      = queryRun.get(tablenum(InventJournalTrans));
                inventTrans             = queryRun.get(tablenum(InventTrans), 3);

                if (this.matchesPackingUnit(inventTrans.ItemId, inventTrans.inventDim()))
                {
                    LvNRTaxTrans::createFromInventTrans(inventTrans,
                                                    nrTransType,
                                                    inventJournalTrans.TableId,
                                                    inventJournalTrans.RecId,
                                                    inventJournalTrans.CostAmount,
                                                    InventParameters::find().SalesTaxGroup_LV);
                    this.processBOMLinesForInventJournal(inventTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDefaultButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a Default button is to be added to the dialog. If you change the return value to
    ///    true, it will add the button.
    /// </summary>
    /// <returns>
    ///    false by default.
    /// </returns>
    /// <remarks>
    ///    If you click this button it will reset the parameters to the default that is specified in the
    ///    <c>initParmDefault</c> method.
    /// </remarks>
    public boolean showDefaultButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showIndexFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    If this method returns true, it will look for the first enabled index when you are adding query
    ///    range fields to the dialog and if a data source does not have any ranges specified. It will also
    ///    show the visible fields from that index.
    /// </summary>
    /// <param name="_id">
    ///     The table ID of the table in the test.
    /// </param>
    /// <returns>
    ///    true by default.
    /// </returns>
    public boolean showIndexFields(tableId _id)
    {
        return super(_id) &&
               confind([tablenum(InventPackagingUnit),
                        tablenum(InventJournalTable),
                        tablenum(InventDim)
                        ],
                        _id
               );
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a Select button is to be added to the dialog. If you change the return value to
    ///    true, the button will be added.
    /// </summary>
    /// <returns>
    ///    false by default.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c>.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subDataSourceName</Name>
				<Source><![CDATA[
    private str subDataSourceName(str _parentName, tableId _tableId)
    {
        return _parentName + '_' + tableid2name(_tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version     = RunBase::getVersion(_packedClass);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedQuery] = _packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    this.queryBuild();
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static LvNRTaxCreate construct(LvNRTransType _transType)
    {
        return new LvNRTaxCreate(_transType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        LvNRTaxCreate  action;
        FormDataSource ds;

        if (! _args)
        {
            throw error(Error::missingParameter(null));
        }

        action = LvNRTaxCreate::construct(_args.parmEnum());

        if (action.prompt())
        {
            action.runOperation();
        }

        ds = FormDataUtil::getFormDataSource(_args.record());
        ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>quarterDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get first and last dates of quarter
    /// </summary>
    /// <param name="_quarter">
    /// The quarter under consideration.
    /// </param>
    /// <param name="_year">
    /// The year under consideration.
    /// </param>
    /// <returns>
    /// First and last dates of quarter.
    /// </returns>
    static container quarterDates(Quarter _quarter, int _year)
    {
        #TimeConstants
        int     firstMonth  = any2int(_quarter) * #monthsPerQuarter + 1;
        int     lastMonth   = firstMonth + #monthsPerQuarter - 1;
        date    firstDate   = mkdate(1, firstMonth, _year);
        date    lastDate    = endmth(mkdate(1, lastMonth, _year));
        return [firstDate, lastDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>