<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsTransferIssueWorkTransactionType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsTransferIssueWorkTransactionType</c> class handles logic specific to the transfer issue work transaction type.
/// </summary>
[WhsWorkTransTypeStrategyFactory(WHSWorkTransType::TransferIssue)]
class WhsTransferIssueWorkTransactionType extends WhsTransferWorkTransactionType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isOutbound</Name>
				<Source><![CDATA[
    public boolean isOutbound()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemRelatedPicking</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isItemRelatedPicking()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllowingAssigningTargetLPForHandledByLP</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isAllowingAssigningTargetLPForHandledByLP()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWholeLPWithChildrenPrevented</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isWholeLPWithChildrenPrevented()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkSplittingAllowed</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isWorkSplittingAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOverPickSupported</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isOverPickSupported()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationDirectiveQueryName</Name>
				<Source><![CDATA[
    public QueryName locationDirectiveQueryName(WHSLocDirTable _whsLocDirTable)
    {
        return queryStr(WHSLocDirTransferIssue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTemplateQueryName</Name>
				<Source><![CDATA[
    public QueryName workTemplateQueryName(WHSWorkTemplateTable _whsWorkTemplateTable)
    {
        return queryStr(WHSWorkTemplateTransferIssue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workExecuteMode</Name>
				<Source><![CDATA[
    public WHSWorkExecuteMode workExecuteMode(boolean _hasTargetLicensePlate)
    {
        return WHSWorkExecuteMode::Shipping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceOrderLineByInventTransId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Common findSourceOrderLineByInventTransId(InventTransId _inventTransId)
    {
        return InventTransferLine::findTransIdShip(_inventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateShippingOverpickQty</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the validateShippingOverpick method. Extenders should move their logic to wrap or override the validateShippingOverpickHandlingQuantity method.', true, 30\9\2019)]
    public boolean validateShippingOverpickQty(WHSWorkLine _workLine, InventQty _overpickInventQty)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _workLine.ItemId);

        return this.validateShippingOverpickHandlingQuantity(_workLine, _overpickInventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateShippingOverpickHandlingQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if a shipping overpick is possible from the handling quantity.
    /// </summary>
    /// <param name = "_workLine">The work line to be checked.</param>
    /// <param name = "_overpickInventHandlingQty">The quantity in the handling unit that is being overpicked.</param>
    /// <returns>
    /// true if the handling quantity is within an acceptable range; otherwise, an exception is thrown.
    /// </returns>
    /// <remarks>
    /// The method is an extension and is not meant to be called directly. Callers should call the validateShippingOverpick method.
    /// </remarks>
    [Wrappable(true)]
    protected boolean validateShippingOverpickHandlingQuantity(
        WHSWorkLine         _workLine,
        InventHandlingQty   _overpickInventHandlingQty)
    {
        InventTransferLine  inventTransferLine =  WHSLoadLine::findbyRecId(_workLine.LoadLineRefRecId).getOrderCommonFromLoadLine() as InventTransferLine;

        boolean useCWValues = PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId);
        InventHandlingQty curHandlingQty = useCWValues ? inventTransferLine.PdsCWQtyRemainShip
                                                        : inventTransferLine.QtyRemainShip;

        InventMovement      movement = InventMovement::construct(inventTransferLine);
        InventHandlingQty   physicalHandlingNow = -curHandlingQty - _overpickInventHandlingQty;

        if (useCWValues)
        {
            return movement.checkNotOverDelivery(0, true, physicalHandlingNow);
        }

        return movement.checkNotOverDelivery(physicalHandlingNow, true, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFinalPutLocationRequirements</Name>
				<Source><![CDATA[
    public WHSMessage validateFinalPutLocationRequirements(
        WMSLocation         _location,
        WHSLocationProfile  _locationProfile)
    {
        return this.validateFinalPutLocation(_location, _locationProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWork</Name>
				<Source><![CDATA[
    public void cancelWork(WHSWorkTable _workTable, boolean _cancellingProductReceipt)
    {
        this.resetWaveWhenWorkIsCancelled(_workTable.WaveId);
        WHSContainerTable::deleteRelatedToWorkContainersCreatedByContainerization(_workTable.WorkId);
        if (this.parmDecrementLoadLineWorkCreatedQty())
        {
            this.updateLoadLinesWhenWorkIsCanceled(_workTable.WorkId);
        }
        WHSWorkTable::updateWorkStatusToCancelledForOriginWork(_workTable.WorkId);
        this.cancelReplenishmentWork(_workTable.WorkId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustContainerLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ajust the container lines for the workline.
    /// </summary>
    /// <param name = "_workLine">The workline to cancel.</param>
    /// <param name = "_inventQty">The quantity to cancel.</param>
    [Hookable(false)]
    internal void adjustContainerLine(WHSWorkLine _workLine, InventHandlingQty _inventQty)
    {
        WHSContainerTable containerTable = WHSContainerTable::findByContainerId(_workLine.ContainerId);
        if (containerTable.RecId && containerTable.ContainerBuildId)
        {
            // Should update the container line and container weight, if the full qty of the workline is cancelled the container line will be deleted.
            WHSContainerLine::adjustQuantityBasedOnWorkLine(_workLine, _inventQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustOrderTransHandlingQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update order transactions with over picked quantity.
    /// </summary>
    /// <param name="_workLine">
    /// The work line that is being over picked.
    /// </param>
    /// <param name="_inventDiffHandlingQty">
    /// The quantity that is being overpicked in handling units.
    /// </param>
    /// <param name="_workLineInventHandlingQty">
    /// The quantity on the work line in handling units.
    /// </param>
    /// <remarks>
    /// The method is an extension and is not meant to be called directly. Callers should call the adjustOrderTrans method.
    /// </remarks>
    [Wrappable(true)]
    protected void adjustOrderTransHandlingQuantities(
        WHSWorkLine         _workLine,
        InventHandlingQty   _inventDiffHandlingQty,
        InventHandlingQty   _workLineInventHandlingQty)
    {
        ttsbegin;

        InventTransferLine inventTransferLine = InventTransferLine::findTransIdShip(_workLine.InventTransId, true);
        
        // Update line quantities to update transactions.
        if (PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId))
        {
            inventTransferLine.PdsCWQtyRemainShip       += _inventDiffHandlingQty;
            inventTransferLine.PdsCWQtyRemainReceive    += _inventDiffHandlingQty;

            WHSHandlingWeight weightDiff = PdsCatchWeight::inventQty(inventTransferLine.ItemId, _inventDiffHandlingQty);
            inventTransferLine.QtyRemainShip += weightDiff;
            inventTransferLine.QtyRemainReceive += weightDiff;
        }
        else
        {
            inventTransferLine.QtyRemainShip += _inventDiffHandlingQty;
            inventTransferLine.QtyRemainReceive += _inventDiffHandlingQty;
        }

        inventTransferLine.updateEstimated(NoYes::No,
                                        inventTransferLine.QtyRemainReceive,
                                        false,
                                        inventTransferLine.PdsCWQtyRemainReceive,
                                        true);

        InventMovement movement = InventMovement::construct(inventTransferLine);

        // Reserve overpicked quantity.  Reservation should always be necessary because auto reservation is skipped when lines are updated.
        this.reserveOverpick(movement, _inventDiffHandlingQty, _workLine.InventDimId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInitialPickDimTrackingInventDim</Name>
				<Source><![CDATA[
    protected InventDim initInitialPickDimTrackingInventDim(
        WHSWorkLine         _workLine,
        WHSWorkInventTrans  _workInventTrans,
        InventDim           _inventDim,
        Map                 _itemId2FieldIdList)
    {
        InventDim inventDimCriteria = super(_workLine, _workInventTrans, _inventDim, _itemId2FieldIdList);

        if (_workLine.LocatedLPId
            && !inventDimCriteria.LicensePlateId)
        {
            inventDimCriteria.LicensePlateId = _workLine.LocatedLPId;
            inventDimCriteria = InventDim::findOrCreate(inventDimCriteria);
        }

        return inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustOrderTransQty</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the adjustOrderTrans method. Extenders should move their logic to wrap or override the adjustOrderTransHandlingQuantities method.', true, 30\9\2019)]
    public void adjustOrderTransQty(
        WHSWorkLine      _workLine,
        InventQty        _inventDiffQty,
        InventQty        _workLineInventQty)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _workLine.ItemId);

        this.adjustOrderTransHandlingQuantities(_workLine, _inventDiffQty, _workLineInventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterLocationDirectiveTableQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Query filterLocationDirectiveTableQuery(Query _query, WHSLocDirTable _locDirTable)
    {
        QueryBuildDataSource qbdsInventTransferTable = _query.dataSourceTable(tableNum(InventTransferTable));
        SysQuery::findOrCreateRange(qbdsInventTransferTable, fieldNum(InventTransferTable, InventLocationIdFrom)).value(queryValue(_locDirTable.InventLocationId));

        return _query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>