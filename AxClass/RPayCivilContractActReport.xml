<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayCivilContractActReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayCivilContractActReport extends RunBase
{
    ComWordDocument_RU      wordDocument;

    RPayCivilContractAct    rPayCivilContractAct;
    RPayCivilContract       rPayCivilContract;
    RHRMEmplTable           emplTable;
#Address_RU

    #define.ActNum("ActNum")
    #define.ContractTypeName("ContractTypeName")
    #define.ContractNum("ContractNum")
    #define.ContractDate("ContractDate")
    #define.City("City")
    #define.ActDate("ActDate")
    #define.CompanyName("CompanyName")
    #define.ReprTitleName("ReprTitleName")
    #define.ReprReason("ReprReason")
    #define.EmplName("EmplName")
    #define.ContractNum2("ContractNum2")
    #define.ContractDate2("ContractDate2")
    #define.WorkScope("WorkScope")
    #define.Amount("Amount")
    #define.AmountInWords("AmountInWords")
    #define.ReprFIO("ReprFIO")
    #define.EmplFIO("EmplFIO")
    #define.Separators(" ")

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillDocument()
    {
        CompanyInfo                     companyInfo             = CompanyInfo::find();
        LogisticsPostalAddress          companyAddress          = companyInfo::find().postalAddress();
        LogisticsAddressStatename       addressState            = companyAddress.stateFullName_RU();
        LogisticsAddressCityRecId       addressTownId           = companyAddress.CityRecId;
        LogisticsAddressDistrictRecId   addressDistId           = companyAddress.District;
        RNumDateInWordConverter         rNumDateInWordConverter = RNumDateInWordConverter::construct();
        boolean                         isRU                    = LogisticsPostalAddressUtility::isCountryRegionRU(companyAddress.CountryRegionId);
        str addressCity;

        if (addressTownId)
        {
            if (isRU)
            {
                addressCity = LogisticsAddressCity::find_RU(addressTownId).addrTypeName_RU() + #Separators + LogisticsAddressCity::find_RU(addressTownId).Description;
            }
            else
            {
                addressCity = companyAddress.City;
            }
        }

        if (addressDistId)
        {
            if (isRU)
            {
                addressCity = LogisticsAddressDistrict::find_RU(addressDistId).addrTypeName_RU() + #Separators + LogisticsAddressDistrict::find_RU(addressDistId).Description;
            }
            else
            {
                addressCity = LogisticsAddressDistrict::find_RU(addressDistId).Description;
            }
        }

        if (rPayCivilContractAct.ActNum)
        {
            wordDocument.insertValue(#ActNum,           "@SYS2060" + ' ' + rPayCivilContractAct.ActNum);
        }

        wordDocument.insertValue(#ContractTypeName,     rPayCivilContract.rPayCivilContractType().CivilContractTypeName);

        if (rPayCivilContract.ContractNum)
        {
            wordDocument.insertValue(#ContractNum,      "@SYS2060" + ' ' + rPayCivilContract.ContractNum);
        }

        wordDocument.insertValue(#ContractDate,         rPayCivilContract.ContractDate);
        wordDocument.insertValue(#City,                 addressCity ?
                                                        addressCity :
                                                        addressState);
        wordDocument.insertValue(#ActDate,              rPayCivilContractAct.ActDate);
        wordDocument.insertValue(#CompanyName,          companyInfo.Name);
        wordDocument.insertValue(#ReprTitleName,        rPayCivilContract.ReprTitleName);
        wordDocument.insertValue(#ReprReason,           rPayCivilContract.ReprReason);
        wordDocument.insertValue(#EmplName,             emplTable.name());

        if (rPayCivilContract.ContractNum)
        {
            wordDocument.insertValue(#ContractNum2,     "@SYS2060" + ' ' + rPayCivilContract.ContractNum);
        }

        wordDocument.insertValue(#ContractDate2,        rPayCivilContract.ContractDate);
        wordDocument.tableInsertValue(1, 1, rPayCivilContractAct.WorkScope, #WorkScope);
        wordDocument.insertValue(#Amount,               Num2Str(rPayCivilContractAct.Amount, 4, 2, 2, 3));
        wordDocument.insertValue(#AmountInWords,        rNumDateInWordConverter.numeralsToCurrency(rPayCivilContractAct.Amount));

        wordDocument.insertValue(#ReprFIO,              rPayCivilContract.ReprName);
        wordDocument.insertValue(#EmplFIO,              emplTable.personTable().fio());
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean makeDocument(boolean _visible = false)
    {
        #define.templatePostfix('.dot')
        FilePath                templateFile = resourceStr(RPayCivilContractActReport) + #templatePostfix;
        ResourceNode            resNode = SysResource::getResourceNode(resourceStr(RPayCivilContractActReport));
        resNode.AOTload();

        templateFile = SysResource::saveToTempFile(resNode, false, templateFile);

        if (! WinAPI::fileExists(templateFile))
            throw error(strFmt("@GLS106466", templateFile));

        wordDocument = new ComWordDocument_RU();

        if (! wordDocument.newFile(templateFile, false))
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (this.makeDocument())
        {
            this.fillDocument();
            wordDocument.unlinkFields();
            wordDocument.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCivilContractActTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setCivilContractActTable(rPayCivilContractAct _rPayCivilContractAct)
    {
        rPayCivilContractAct    = _rPayCivilContractAct;
        rPayCivilContract       = rPayCivilContractAct.civilContract();
        emplTable               = RHRMEmplTable::find(rPayCivilContract.EmplId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP2576";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayCivilContractActReport rPayCivilContractActReport;

        if ( !_args
          || _args.dataset() != tablenum(RPayCivilContractAct)
          || ! _args.record())
        {
            throw error("@GLS101555");
        }

        rPayCivilContractActReport = new RPayCivilContractActReport();
        rPayCivilContractActReport.setCivilContractActTable(_args.record());
        rPayCivilContractActReport.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>