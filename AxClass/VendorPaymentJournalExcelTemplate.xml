<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendorPaymentJournalExcelTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Platform.Integration.Office;

/// <summary>
/// The <c>VendorPaymentJournalExcelTemplate</c> is the supporting class for the vendor payment journal excel template.
/// </summary>
public class VendorPaymentJournalExcelTemplate extends DocuTemplateRegistrationBase implements LedgerIJournalExcelTemplate
{
    private const DocuTemplateName ExcelTemplateName = resourceStr(VendorPaymentJournalTemplate);
    private const DataEntityName LineEntityName = tableStr(VendorPaymentJournalLineEntity);
    private const FieldName LineEntityJournalNum = fieldStr(VendorPaymentJournalLineEntity, JournalBatchNumber);
    private const FieldName LineEntityDataAreaId = fieldStr(VendorPaymentJournalLineEntity, dataAreaId);
    private const DataEntityName HeaderEntityName = tableStr(VendorPaymentJournalHeaderEntity);
    private const FieldName HeaderEntityJournalNum = fieldStr(VendorPaymentJournalHeaderEntity, JournalBatchNumber);
    private const FieldName HeaderEntityDataAreaId = fieldStr(VendorPaymentJournalHeaderEntity, dataAreaId);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isJournalTypeSupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a boolean value which indicates whether the journal type is supported for the Excel template.
    /// </summary>
    /// <param name = "_ledgerJournalType">The ledger journal type.</param>
    /// <returns>true if the journal type is supported; otherwise, false.</returns>
    public boolean isJournalTypeSupported(LedgerJournalType _ledgerJournalType)
    {
        return _ledgerJournalType == LedgerJournalType::Payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyCustomTrimming</Name>
				<Source><![CDATA[
    public void applyCustomTrimming(Excel.IWorkbookManager _templateManager, Excel.WorkbookSettingsManager _settingsManager, LedgerJournalTable _ledgerJournalTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentTemplateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document template name.
    /// </summary>
    /// <returns>The document template name.</returns>
    public DocuTemplateName documentTemplateName()
    {
        return ExcelTemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportedAccountTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a collection of the supported account types for the entity.
    /// </summary>
    /// <returns>A collection of <c>LedgerJournalACType</c> values.</returns>
    public Set supportedAccountTypes()
    {
        Set accountTypeSet = new Set(Types::Integer);

        accountTypeSet.add(LedgerJournalACType::Vend);

        return accountTypeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportedOffsetAccountTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a collection of the supported offset account types for the entity.
    /// </summary>
    /// <returns>A collection of <c>LedgerJournalACType</c> values.</returns>
    public Set supportedOffsetAccountTypes()
    {
        Set offsetAccountTypeSet = new Set(Types::Integer);

        offsetAccountTypeSet.add(LedgerJournalACType::Bank);
        offsetAccountTypeSet.add(LedgerJournalACType::Ledger);

        return offsetAccountTypeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalForTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the journal is valid for the template.
    /// </summary>
    /// <param name = "_ledgerJournalTable">The <c>LedgerJournalTable</c> table record.</param>
    /// <returns>true if the journal is valid for the template; otherwise, false.</returns>
    public boolean validateJournalForTemplate(LedgerJournalTable _ledgerJournalTable)
    {
        return LedgerJournalExcelTemplate::validateJournalForTemplate(_ledgerJournalTable, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerTemplates</Name>
				<Source><![CDATA[
    public void registerTemplates()
    {
        this.addTemplate(
            OfficeAppApplicationType::Excel,
            ExcelTemplateName,
            ExcelTemplateName,
            literalStr("@CashManagement:VendPaymentJournalTemplateDescription"),
            literalStr("@CashManagement:VendPaymentJournalTemplateDisplayName"),
            NoYes::No,
            NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerEntityName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the resource name of the header entity.
    /// </summary>
    /// <returns>The resource name of the header entity.</returns>
    public DataEntityName headerEntityName()
    {
        return HeaderEntityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineEntityName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the resource name of the line entity.
    /// </summary>
    /// <returns>The resource name of the line entity.</returns>
    public DataEntityName lineEntityName()
    {
        return LineEntityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerJournalBatchNumberFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field name for the header journal batch number.
    /// </summary>
    /// <returns>The field name for the header journal batch number.</returns>
    public FieldName headerJournalBatchNumberFieldName()
    {
        return HeaderEntityJournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerDataAreaFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field name for the header data area.
    /// </summary>
    /// <returns>The field name for the header data area.</returns>
    public FieldName headerDataAreaFieldName()
    {
        return HeaderEntityDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineJournalBatchNumberFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field name for the line journal batch number.
    /// </summary>
    /// <returns>The field name for the line journal batch number.</returns>
    public FieldName lineJournalBatchNumberFieldName()
    {
        return LineEntityJournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDataAreaFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field name for the line data area.
    /// </summary>
    /// <returns>The field name for the line data area.</returns>
    public FieldName lineDataAreaFieldName()
    {
        return LineEntityDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendHeaderEntityFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends an additional filter to the default filtering behavior.
    /// </summary>
    /// <param name = "_headerFilter">The filter node to append.</param>
    /// <param name = "_headerFilterBuilder">The filter tree builder.</param>
    /// <returns>The original filter with new filter(s) appended; otherwise, the original filter.</returns>
    public FilterCollectionNode appendHeaderEntityFilters(FilterCollectionNode _headerFilter, ExportToExcelFilterTreeBuilder _headerFilterBuilder)
    {
        return _headerFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendLineEntityFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends an additional filter to the default filtering behavior.
    /// </summary>
    /// <param name = "_lineFilter">The filter node to append.</param>
    /// <param name = "_lineFilterBuilder">The filter tree builder.</param>
    /// <returns>The original filter with new filter(s) appended; otherwise, the original filter.</returns>
    public FilterCollectionNode appendLineEntityFilters(FilterCollectionNode _lineFilter, ExportToExcelFilterTreeBuilder _lineFilterBuilder)
    {
        return _lineFilterBuilder.and(_lineFilter, _lineFilterBuilder.areEqual(fieldStr(VendorPaymentJournalLineEntity, AccountType), LedgerJournalACType::Vend));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>