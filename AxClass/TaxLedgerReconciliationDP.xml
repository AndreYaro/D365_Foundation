<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxLedgerReconciliationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxLedgerReconciliationDP</c> class handles all the business logic to display data on the <c>TaxLedgerReconciliation</c> SSRS report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(TaxLedgerReconciliationContract))
]
public class TaxLedgerReconciliationDP extends SrsReportDataProviderPreProcessTempDB
{
    TaxLedgerReconciliationTmp taxLedgerReconciliationTmp;
    TaxLedgerReconciliationContract contract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxLedgerReconciliationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data to display from the <c>TaxLedgerReconciliationTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The <c>TaxLedgerReconciliationTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('TaxLedgerReconciliationTmp')
    ]
    public TaxLedgerReconciliationTmp getTaxLedgerReconciliationTmp()
    {
        select taxLedgerReconciliationTmp ;
        return taxLedgerReconciliationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipReportTransaction</Name>
				<Source><![CDATA[
    public boolean parmSkipReportTransaction(boolean _skipReportTransaction = skipReportTransaction)
    {
        if (SsrsPreProcessReportSkipDefaultDatabaseTrxScope::instance().isEnabled())
        {
            skipReportTransaction = true;
        }

        return skipReportTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initService</Name>
				<Source><![CDATA[
    private void initService(TaxReport_LedgerReconciliation _taxReport_LedgerReconciliation, TaxLedgerReconciliationContract _contract)
    {
        _taxReport_LedgerReconciliation.parmFromDate(_contract.parmFromDate());
        _taxReport_LedgerReconciliation.parmToDate(_contract.parmToDate());
        _taxReport_LedgerReconciliation.parmFromVoucher(_contract.parmFromVoucher());
        _taxReport_LedgerReconciliation.parmToVoucher(_contract.parmToVoucher());
        _taxReport_LedgerReconciliation.parmIncludeDetails(_contract.parmIncludeDetails());
        _taxReport_LedgerReconciliation.parmShowDifferencesOnly(_contract.parmShowDifferencesOnly());
        _taxReport_LedgerReconciliation.parmFromMainAccount(contract.parmFromMainAccount());
        _taxReport_LedgerReconciliation.parmToMainAccount(contract.parmToMainAccount());
        // <GEECZ>
        if (TaxLedgerReconciliationDP::isReportBasedOnVATRegisterDate(_contract))
        {
            _taxReport_LedgerReconciliation.parmIncludeTaxAmountOriginDetail(true);
            _taxReport_LedgerReconciliation.parmIncludeTaxDirectionDetail(true);
            _taxReport_LedgerReconciliation.parmIncludeVATRegisterDateDetail(true);
        }
        // </GEECZ>
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the business logic for the <c>TaxLedgerReconciliation</c> SSRS report.
    /// </summary>
    public void processReport()
    {
        TaxReport_LedgerReconciliation taxReport_LedgerReconciliation;
        Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
        System.Diagnostics.Stopwatch stopWatch;
        guid identifier;
        NoYes isSuccessfulReport;

        try
        {
            stopWatch = new System.Diagnostics.Stopwatch();
            identifier = newGuid();
            taxEventSourceLog.TaxReportStart(identifier);
            stopWatch.Start();

            contract = this.parmDataContract() as TaxLedgerReconciliationContract;

            taxReport_LedgerReconciliation = new TaxReport_LedgerReconciliation(taxLedgerReconciliationTmp,
                 TaxLedgerReconciliationDP::isReportBasedOnVATRegisterDate(contract));

            this.initService(taxReport_LedgerReconciliation, contract);
            taxLedgerReconciliationTmp = taxReport_LedgerReconciliation.processTaxLedgerReconciliation(this.parmUserConnection());
            isSuccessfulReport = Noyes::Yes;
        }
        catch (Exception::Error)
        {
            isSuccessfulReport = NoYes::No;
            throw Exception::Error;
        }
        finally
        {
            stopWatch.Stop();
            taxEventSourceLog.TaxReportStop(identifier, SysCountryRegionCode::countryInfo(), new MenuFunction(menuItemOutputStr(TaxReport_LedgerReconciliation), MenuItemType::Output).label(), 'TaxLedgerReconciliation', isSuccessfulReport, stopWatch.ElapsedMilliseconds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReportBasedOnVATRegisterDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the report should be created by using the VAT register date as the basis for
    /// reconciliation.
    /// </summary>
    /// <param name="_contract">
    /// The report parameters data contract.
    /// </param>
    /// <returns>
    /// true if the report should be created by using the VAT register date as the basis for
    /// reconciliation; otherwise, false.
    /// </returns>
    public static boolean isReportBasedOnVATRegisterDate(TaxLedgerReconciliationContract _contract)
    {
        boolean isReportBasedOnVATRegisterDate;

        isReportBasedOnVATRegisterDate = _contract.parmIncludeDetails() && _contract.parmReconcileByVATRegisterDate();

        return isReportBasedOnVATRegisterDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>