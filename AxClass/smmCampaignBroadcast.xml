<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmCampaignBroadcast</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SmmCampaignBroadcast
{
    smmCampaignTable    campaignTable;
    WebSiteURL          siteUrl;
    boolean             useURL;

    public const str PersonVar = '%PERSONNAME%';
    public const str CampaignVar = '%CAMPAIGN%';
    public const str UrlVar = '%URL%';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>broadcast</Name>
				<Source><![CDATA[
    private void broadcast()
    {
        smmCampaignSelection    campaignSelection;
        smmCampaignTable        updateCampaignTable;
        DictConfigurationKey    questionnaireLicense = new DictConfigurationKey(configurationkeynum(KMQuestionnaireBasic));

        if (campaignTable)
        {
            while select campaignSelection
                where  campaignSelection.CampaignId == campaignTable.CampaignId
                    && campaignSelection.BroadcastType != smmCampaignBroadcastType::EMail
                    && campaignSelection.Responded == NoYes::No
            {
                this.createBroadcastMsg(siteUrl, campaignSelection);
            }

            ttsbegin;

            // Set campaign status to Response on the campaign target
            updateCampaignTable                 = smmCampaignTable::find(campaignTable.CampaignId, true);
            updateCampaignTable.CampaignStatus  = smmCampaignStatus::Response;
            updateCampaignTable.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBroadcastMsg</Name>
				<Source><![CDATA[
    private void createBroadcastMsg(URL webSiteUrl, smmCampaignSelection smmCampaignSelection)
    {
        Email                       email;
        Name                        emailReceiverName;
        tableId                     tableId;
        recId                       recId;
        dataAreaId                  refCompanyId;
        str                         id;
        ContactPerson               contactPerson;
        smmBusRelTable              busRelTable;
        CustTable                   custTable;
        VendTable                   vendTable;
        smmCampaignBroadcastText    tempCampaignBroadcastText;
        DictConfigurationKey        questionnaireLicense = new DictConfigurationKey(configurationkeynum(KMQuestionnaireBasic));

        const str userGUID = '?GUID=';

        tempCampaignBroadcastText = campaignTable.EmailBroadcastText;
        tempCampaignBroadcastText = strReplace(tempCampaignBroadcastText, PersonVar, '%1');
        tempCampaignBroadcastText = strReplace(tempCampaignBroadcastText, CampaignVar, '%2');
        tempCampaignBroadcastText = strReplace(tempCampaignBroadcastText, UrlVar, '%3');

        if (smmCampaignSelection.Party)
        {
            if (smmCampaignSelection.ContactPersonId)
            {
                contactPerson = ContactPerson::find(smmCampaignSelection.ContactPersonId);

                id                = contactPerson.ContactPersonId;
                email             = contactPerson.Email();
                emailReceiverName = contactPerson.personName();
                tableId           = contactPerson.TableId;
                recId             = contactPerson.RecId;
                refCompanyId      = contactPerson.DataAreaId;
            }
            else
            {
                custTable = CustTable::findByPartyRecId(smmCampaignSelection.Party);

                if (custTable)
                {
                    id                = custTable.AccountNum;
                    email             = custTable.Email();
                    emailReceiverName = custTable.Name();
                    tableId           = custTable.TableId;
                    recId             = custTable.RecId;
                    refCompanyId      = custTable.DataAreaId;
                }
                else
                {
                    vendTable = VendTable::findByPartyRecId(smmCampaignSelection.Party);
                    if (vendTable)
                    {
                        id                = vendTable.AccountNum;
                        email             = vendTable.Email();
                        emailReceiverName = vendTable.Name();
                        tableId           = vendTable.TableId;
                        recId             = vendTable.RecId;
                        refCompanyId      = vendTable.DataAreaId;
                    }
                    else
                    {
                        busRelTable       = smmBusRelTable::findByParty(smmCampaignSelection.Party);
                        id                = busRelTable.BusRelAccount;
                        email             = busRelTable.Email();
                        emailReceiverName = busRelTable.Name();
                        tableId           = busRelTable.TableId;
                        recId             = busRelTable.RecId;
                        refCompanyId      = busRelTable.DataAreaId;
                    }
                }
            }

            if (email)
            {
                if (questionnaireLicense.enabled() && campaignTable.kmCollectionId)
                {
                    // Create the GUID for the user
                    SysCompanyGUIDUsers::newUserGUID(smmCampaignSelection);
                    // Converting the GUID to String so it can be added to
                    webSiteUrl += userGUID + SysCompanyGUIDUsers::GUID2StrEx(SysCompanyGUIDUsers::find(smmCampaignSelection).WebGUID,false,false);
                }

                // Replace all Email vars
                tempCampaignBroadcastText = strfmt(tempCampaignBroadcastText,
                                                   emailReceiverName,           /* %1 - The Person name (PersonVar) */
                                                   campaignTable.CampaignId,    /* %2 - The Campain id  (Campaign) */
                                                   webSiteUrl);                 /* %3 - The Site URL    (URL) */

                smmCampaignSelection smmCampaignSelectionUpdate;

                try
                {
                    var messageBuilder = new SysMailerMessageBuilder();
                    messageBuilder.addTo(email)
                                  .setBody(tempCampaignBroadcastText)
                                  .setSubject(campaignTable.EmailBroadcastSubject);

                    SysMailerFactory::sendInteractive(messageBuilder.getMessage());

                    // Email sent to %1
                    info(strfmt("@SYS80635", emailReceiverName));

                    ttsbegin;

                    // Update broadcast information on the campaign target
                    smmCampaignSelectionUpdate = smmCampaignSelection::findRecId(smmCampaignSelection.RecId, true);
                    smmCampaignSelectionUpdate.BroadcastType     = smmCampaignBroadcastType::EMail;
                    smmCampaignSelectionUpdate.DistributionDate  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    smmCampaignSelectionUpdate.update();

                    ttscommit;
                }
                catch
                {
                    ttsbegin;

                    // Set broadcast type to Not broadcasted on the campaign target
                    smmCampaignSelectionUpdate = smmCampaignSelection::findRecId(smmCampaignSelection.RecId, true);
                    smmCampaignSelectionUpdate.BroadcastType = smmCampaignBroadcastType::NotBroadcasted;
                    smmCampaignSelectionUpdate.update();

                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(Args _args)
    {
        smmParametersTable  smmParametersTable;
        campaignTable   = _args.record();

        if (strfind(campaignTable.EmailBroadcastText, URLVar, 1, strlen(campaignTable.EmailBroadcastText)) != 0 && campaignTable.kmCollectionId)
        {
            useURL = true;
        }
        else
        {
            useURL = false;
        }

        smmParametersTable = smmParametersTable::find();
        siteUrl = smmParametersTable.WebSiteURL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (this.validate())
        {
            this.broadcast();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    private boolean validate()
    {
        const str whiteSpace = " ";

        boolean ret = true;

        if (this.isEmailBroadcastTextMissing())
        {
            // Email broadcast text is missing
            ret = checkFailed("@SYS82373");
        }

        if (useURL && !siteUrl)
        {
            // You must select a website before you can broadcast. Change settings in CRM Parameters
            ret = checkFailed("@SYS80587" + whiteSpace + "@SYS80588");
        }

        if (!ret)
        {
            // Email broadcast was cancelled
            checkFailed("@SYS80589");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmailBroadcastTextMissing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if email broadcast text is missing.
    /// </summary>
    /// <returns>true if email broadcast text is empty; otherwise, false.</returns>
    protected boolean isEmailBroadcastTextMissing()
    {
        return !campaignTable.EmailBroadcastText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        smmCampaignBroadcast smmCampaignBroadcast = new smmCampaignBroadcast(_args);

        if (smmCampaignBroadcast)
        {
            smmCampaignBroadcast.run();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>