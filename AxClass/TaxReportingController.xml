<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportingController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReportingController</c> class handles the business logic for the <c>TaxReporting</c>
///    report.
/// </summary>
public class TaxReportingController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a report name that is based on the tax parameters.
    /// </summary>
    /// <returns>
    /// The report name that is based on the tax parameters.
    /// </returns>
    public str getReportName()
    {
        str strReportName;

        if (TaxParameters::checkTaxParameters_IN())
        {
            strReportName = ssrsReportStr(TaxReporting_IN, Report);
        }
        else
        {
            strReportName = ssrsReportStr(TaxReporting, Report);
        }

        return strReportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        TaxReportingContract taxReportingContract = this.parmReportContract().parmRdpContract();
        this.setParameters(taxReportingContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values for the parameters.
    /// </summary>
    /// <param name="_taxReportingContract">
    /// The <c>TaxReportingContract</c> contract class.
    /// </param>
    public void setParameters(TaxReportingContract _taxReportingContract)
    {
        TaxReport taxReport;
        TaxReportVoucher taxReportVoucher;
        TransDate fromDate;
        TransDate toDate;
        TransDate transDate;
        TaxPeriod taxPeriod;
        TaxRepVersion taxRepVersion;
        TaxVersion taxRepCounter;
        Voucher voucher;
        NoYes taxReported;

        // <GIN>
        TaxRegistrationNumbers_IN taxRegistrationNumbersTable;
        TaxRegistrationNumber_IN  taxRegistrationNumber;
        RefRecId                  taxRegistrationNumberId;
        TaxType_IN                taxType_IN;
        // </GIN>

        if (this.parmArgs() && this.parmArgs().dataset() == tableNum(TaxReportVoucher))
        {
            taxReportVoucher = this.parmArgs().record();
            taxRepVersion    = taxReportVoucher.TaxRepVersion;
            taxPeriod        = taxReportVoucher.TaxPeriod;
            fromDate         = taxReportVoucher.FromDate;
            toDate           = taxReportVoucher.ToDate;
            taxRepCounter    = taxReportVoucher.TaxRepCounter;
            transDate        = taxReportVoucher.TransDate;
            voucher          = taxReportVoucher.Voucher;

            // <GIN>
            if (TaxParameters::checkTaxParameters_IN())
            {
                select RegistrationNumber from taxRegistrationNumbersTable
                    where taxRegistrationNumbersTable.RecId == taxReportVoucher.TaxRegistrationNumberTable_IN;

                taxRegistrationNumber   = taxRegistrationNumbersTable.RegistrationNumber;
                taxRegistrationNumberId = taxReportVoucher.TaxRegistrationNumberTable_IN;
                taxType_IN              = taxReportVoucher.TaxType_IN;
            }
            // </GIN>
        }
        else
        {
            if (this.parmArgs() 
                && (classIdGet(this.parmArgs().parmObject()) == classNum(TaxReport)
                    || classIdGet(this.parmArgs().parmObject()) == classNum(TaxReportAdjustTrans)))
            {
                taxReport      = this.parmArgs().parmObject();
                taxRepVersion  = taxReport.taxRepVersion();
                taxPeriod      = taxReport.taxPeriod();
                fromDate       = taxReport.fromDate();
                toDate         = taxReport.toDate();
                taxReported    = taxReport.taxReported();

                // <GIN>
                if (TaxParameters::checkTaxParameters_IN())
                {
                    taxRegistrationNumberId = taxReport.taxRegistrationNumber_IN();
                    taxType_IN              = taxReport.checkTaxType_IN();
                    voucher                 = taxReport.voucher();
                    transDate               = taxReport.TransDate();

                    select RegistrationNumber from taxRegistrationNumbersTable
                        where taxRegistrationNumbersTable.RecId == taxReport.taxRegistrationNumber_IN();

                    taxRegistrationNumber = taxRegistrationNumbersTable.RegistrationNumber;
                }
                // </GIN>
            }
            // <GIN>
            else if (TaxParameters::checkTaxParameters_IN() && args &&
                (classIdGet(args.parmObject()) == classNum(TaxReportAdjustTrans)  ||
                 classIdGet(args.parmObject()) == classNum(TaxSalesTaxPayment_IN) ||
                 classIdGet(args.parmObject()) == classNum(TaxSalesTaxAdjustTrans_IN)))
            {
                taxReport               = this.parmArgs().parmObject();
                taxRepVersion           = taxReport.taxRepVersion();
                taxPeriod               = taxReport.taxPeriod();
                fromDate                = taxReport.fromDate();
                toDate                  = taxReport.toDate();
                transDate               = taxReport.TransDate();
                taxReported             = taxReport.taxReported();
                taxRegistrationNumberId = taxReport.taxRegistrationNumber_IN();
                taxType_IN              = taxReport.checkTaxType_IN();
                voucher                 = taxReport.voucher();

                select RegistrationNumber from taxRegistrationNumbersTable
                        where taxRegistrationNumbersTable.RecId == taxReport.taxRegistrationNumber_IN();

                taxRegistrationNumber = taxRegistrationNumbersTable.RegistrationNumber;
            }
            // </GIN>
        }

        _taxReportingContract.parmTaxRepVersion(taxRepVersion);
        _taxReportingContract.parmTaxPeriod(taxPeriod);
        _taxReportingContract.parmFromDate(fromDate);
        _taxReportingContract.parmToDate(toDate);
        _taxReportingContract.parmTaxRepCounter(taxRepCounter);
        _taxReportingContract.parmTransDate(transDate);
        _taxReportingContract.parmVoucher(voucher);
        _taxReportingContract.parmTaxReported(taxReported);

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            _taxReportingContract.parmTaxType_IN(taxType_IN);
            _taxReportingContract.parmTaxRegNumberRecId_IN(taxRegistrationNumberId);
            _taxReportingContract.parmTaxRegistrationNumber_IN(taxRegistrationNumber);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TaxReportingController controller = new TaxReportingController();

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            controller.parmReportName(controller.getReportName());
            // Sales tax payment
            controller.parmDialogCaption("@SYS75093");
        }
        else
        {
        // </GIN>
            controller.parmReportName(ssrsReportStr(TaxReporting, Report));
        // <GIN>
        }
        // </GIN>
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>