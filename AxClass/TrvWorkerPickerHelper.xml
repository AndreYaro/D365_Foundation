<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvWorkerPickerHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for expense module that provides utility methods to handle which workers a user can manage expense
/// reports for.
/// </summary>
public static class TrvWorkerPickerHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateDelegatingWorkersForCurrentUser</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populate the in memory temporary <c>TmpTrvExpWorker</c> table.
    /// </summary>
    /// <returns>
    ///     A <c>TmpTrvExpWorker</c> record buffer containing workers across all companies
    ///     for whom the specified worker has current delegate access, including the worker itself.
    /// </returns>
    public static TmpTrvExpWorker populateDelegatingWorkersForCurrentUser()
    {
        TrvHcmWorkerRecId   currentWorkerRecId = HcmWorkerLookup::currentWorker();
        TmpTrvExpWorker     tmpTrvExpWorkerTable;

        // First populate the delegating workers in the Temp table
        TrvAppEmplSub trvAppSubTable = TrvAppEmplSub::findAllForCurrentUser();

        while (trvAppSubTable.RecId != 0)
        {
            tmpTrvExpWorkerTable.clear();
            tmpTrvExpWorkerTable.HcmWorker = trvAppSubTable.DelegatingWorker;
            tmpTrvExpWorkerTable.LegalEntity = CompanyInfo::findDataArea(trvAppSubTable.DataAreaId).RecId;
            tmpTrvExpWorkerTable.insert();

            next trvAppSubTable;
        }

        // Then populate the Temp table with the current user's employments
        List currWorkerCompanies = TrvWorkerPickerHelper::getWorkerLegalEntityRecIds(currentWorkerRecId);

        if (currWorkerCompanies && !currWorkerCompanies.empty())
        {
            LegalEntity     currWorkerLegalEntity;
            ListEnumerator  listEnumerator = currWorkerCompanies.getEnumerator();

            listEnumerator.reset();

            while (listEnumerator.moveNext())
            {
                currWorkerLegalEntity = listEnumerator.current();
                tmpTrvExpWorkerTable.clear();
                tmpTrvExpWorkerTable.HcmWorker = currentWorkerRecId;
                tmpTrvExpWorkerTable.LegalEntity = currWorkerLegalEntity;
                tmpTrvExpWorkerTable.insert();
            }
        }

        return tmpTrvExpWorkerTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerLegalEntityRecIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the active employment records in the <c>HcmEmployment</c> table by using the specified
    ///     worker value.
    /// </summary>
    /// <param name="_worker">
    ///     The <c>HcmWorker</c> record ID of the worker to find.
    /// </param>
    /// <returns>
    ///     Returns a List of a single or possibly multiple Legal entities that a worker is actively employed in.
    /// </returns>
    public static List getWorkerLegalEntityRecIds(HcmWorkerRecId _worker)
    {
        List    legalEntities = new List(Types::Int64);

        if (_worker)
        {
            HcmEmployment hcmEmployment  = HcmEmployment::findByWorkerLegalEntity(_worker, CompanyInfo::current());

            if (!hcmEmployment.RecId)
            {
                hcmEmployment  = HcmEmployment::getActiveEmploymentsByWorker(_worker);
            }

            while (hcmEmployment.RecId)
            {
                legalEntities.addEnd(hcmEmployment.LegalEntity);
                next hcmEmployment;
            }
        }

        return legalEntities;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>