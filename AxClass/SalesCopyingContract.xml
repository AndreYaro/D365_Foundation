<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCopyingContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>SalesCopyingContract</c> is a base class for data contracts used in Sales Order and Sales Quotation copying.
/// </summary>
public abstract class SalesCopyingContract implements SysPackable
{
    TmpFrmVirtual  tmpFrmVirtualLines;
    TmpFrmVirtual  tmpFrmVirtualHeader;
    Qty            qtyFactor;
    NoYes          recalculateAmount;
    NoYes          copyMarkup;
    NoYes          copyPrecisely;
    NoYes          deleteLines;
    container      packedTmpFrmVirtualLines;
    container      packedTmpFrmVirtualHeader;
    SalesPurchCopy salesPurchCopy;
    boolean        convertCurrency;
    TradeCurencyConversion  tradeCurencyConversion;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        qtyFactor,
        recalculateAmount,
        copyMarkup,
        copyPrecisely,
        deleteLines,
        salesPurchCopy,
        convertCurrency,
        tradeCurencyConversion,
        packedTmpFrmVirtualLines,
        packedTmpFrmVirtualHeader
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        packedTmpFrmVirtualHeader = this.packTmpFrmVirtual(tmpFrmVirtualHeader);
        packedTmpFrmVirtualLines = this.packTmpFrmVirtual(tmpFrmVirtualLines);

        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packTmpFrmVirtual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies content of a <c>TmpFrmVirtual</c> table into a list and packs the list.
    /// </summary>
    /// <param name="_tmpFrmVirtual">
    /// The record instance.
    /// </param>
    /// <returns>
    /// Container with packed list.
    /// </returns>
    private container packTmpFrmVirtual(TmpFrmVirtual _tmpFrmVirtual)
    {
        List tmpFrmVirtualList = new List(Types::Record);
        while select _tmpFrmVirtual
        {
            tmpFrmVirtualList.addEnd(_tmpFrmVirtual);
        }
        return tmpFrmVirtualList.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConvertCurrency</Name>
				<Source><![CDATA[
        public boolean parmConvertCurrency(boolean _convertCurrency = convertCurrency)
    {
        convertCurrency = _convertCurrency;
        return convertCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyMarkup</Name>
				<Source><![CDATA[
        public NoYes parmCopyMarkup(NoYes _copyMarkup = copyMarkup)
    {
        copyMarkup = _copyMarkup;
        return copyMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyPrecisely</Name>
				<Source><![CDATA[
        public NoYes parmCopyPrecisely(NoYes _copyPrecisely = copyPrecisely)
    {
        copyPrecisely = _copyPrecisely;
        return copyPrecisely;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteLines</Name>
				<Source><![CDATA[
        public NoYes parmDeleteLines(NoYes _deleteLines = deleteLines)
    {
        deleteLines = _deleteLines;
        return deleteLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyFactor</Name>
				<Source><![CDATA[
        public Qty parmQtyFactor(Qty _qtyFactor = qtyFactor)
    {
        qtyFactor = _qtyFactor;
        return qtyFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecalculateAmount</Name>
				<Source><![CDATA[
        public NoYes parmRecalculateAmount(NoYes _recalculateAmount = recalculateAmount)
    {
        recalculateAmount = _recalculateAmount;
        return recalculateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchCopy</Name>
				<Source><![CDATA[
        public SalesPurchCopy parmSalesPurchCopy(SalesPurchCopy _salesPurchCopy = salesPurchCopy)
    {
        salesPurchCopy = _salesPurchCopy;
        return salesPurchCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpFrmVirtualHeader</Name>
				<Source><![CDATA[
        public TmpFrmVirtual parmTmpFrmVirtualHeader(TmpFrmVirtual _tmpFrmVirtualHeader = tmpFrmVirtualHeader)
    {
        tmpFrmVirtualHeader = _tmpFrmVirtualHeader;
        return tmpFrmVirtualHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpFrmVirtualLines</Name>
				<Source><![CDATA[
        public TmpFrmVirtual parmTmpFrmVirtualLines(TmpFrmVirtual _tmpFrmVirtualLines = tmpFrmVirtualLines)
    {
        tmpFrmVirtualLines = _tmpFrmVirtualLines;
        return tmpFrmVirtualLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeCurencyConversion</Name>
				<Source><![CDATA[
        public TradeCurencyConversion parmTradeCurencyConversion(TradeCurencyConversion _tradeCurencyConversion = tradeCurencyConversion)
    {
        tradeCurencyConversion = _tradeCurencyConversion;
        return tradeCurencyConversion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;

                tmpFrmVirtualHeader = this.unpackTmpFrmVirtual(packedTmpFrmVirtualHeader);
                tmpFrmVirtualLines = this.unpackTmpFrmVirtual(packedTmpFrmVirtualLines);

                return true;
            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackTmpFrmVirtual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks content of a list of <c>TmpFrmVirtual</c> records.
    /// </summary>
    /// <param name="_packedList">
    /// The packed list.
    /// </param>
    /// <returns>
    /// Table <c>TmpFrmVirtual</c> instance.
    /// </returns>
    private TmpFrmVirtual unpackTmpFrmVirtual(container _packedList)
    {
        TmpFrmVirtual tmpFrmVirtual = null;
        if (_packedList != conNull())
        {
            List tmpFrmVirtualList = List::create(_packedList);
            ListEnumerator le = tmpFrmVirtualList.getEnumerator();
            while (le.moveNext())
            {
                tmpFrmVirtual.clear();
                tmpFrmVirtual.data(le.current());
                tmpFrmVirtual.insert();
            }
        }
        return tmpFrmVirtual;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
