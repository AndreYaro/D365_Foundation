<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingDimTracingWHSInventoryTransactionDTO</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Instances of the <c>InventTrackingDimTracingWHSInventoryTransactionDTO</c> class are used as data transportation objects
/// which carry the item tracing related information about a warehouse inventory transaction.
/// </summary>
public final class InventTrackingDimTracingWHSInventoryTransactionDTO implements SysPackable
{
    private str                 uniqueKey;
    private InventDimId         inventDimId;
    private InventQty           inventQty;
    private PdsCWQty            catchWeightQty;
    private WHSInventoryTransactionReferenceCategory referenceCategory;
    private InventTransRefId referenceId;
    private StockQtyChangeDate  stockQtyChangeDate;
    private WHSInventoryTransactionTypeEnum type;
    private ItemId itemId;
    private UnitOfMeasureSymbol catchWeightUnit;
    private WHSInventoryTransactionOriginId inventoryTransactionOriginId;

    #define.CurrentVersion(1)
 
    #LOCALMACRO.CurrentList
        uniqueKey,
        inventDimId,
        inventQty,
        catchWeightQty,
        referenceId,
        referenceCategory,
        stockQtyChangeDate,
        type,
        itemId,
        catchWeightUnit,
        inventoryTransactionOriginId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>uniqueKey</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str uniqueKey()
    {
        return uniqueKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>catchWeightQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public PdsCWQty catchWeightQty()
    {
        if (type == WHSInventoryTransactionTypeEnum::RegisteredIssue)
        {
            return -1 * catchWeightQty;
        }

        return catchWeightQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryTransactionOriginId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSInventoryTransactionOriginId inventoryTransactionOriginId()
    {
        return inventoryTransactionOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSInventoryTransactionTypeEnum type()
    {
        return type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceCategory</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSInventoryTransactionReferenceCategory referenceCategory()
    {
        return referenceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventQty inventQty()
    {
        if (type == WHSInventoryTransactionTypeEnum::RegisteredIssue)
        {
            return -1 * inventQty;
        }
     
        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ItemId itemId()
    {
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventDimId inventDimId()
    {
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stockQtyChangeDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public StockQtyChangeDate stockQtyChangeDate()
    {
        return stockQtyChangeDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>catchWeightUnitId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public UnitOfMeasureSymbol catchWeightUnitId()
    {
        return catchWeightUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWHSInventoryTransactionView</Name>
				<Source><![CDATA[
    public void initFromWHSInventoryTransactionView(WHSInventoryTransactionView _transactionView)
    {
        uniqueKey = _transactionView.UniqueKey;
        referenceCategory = _transactionView.ReferenceCategory;
        referenceId = _transactionView.ReferenceId;
        type = _transactionView.Type;
        inventQty = _transactionView.HandlingQty;
        catchWeightQty = _transactionView.HandlingWeight;
        itemId = _transactionView.ItemId;
        inventoryTransactionOriginId = _transactionView.InventoryTransactionOriginId;
        stockQtyChangeDate = DateTimeUtil::date(_transactionView.CreatedDateTimeWHSTransaction);

        this.determineInventDimIdFromTransactionView(_transactionView);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUnitId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public UnitOfMeasureSymbol inventUnitId()
    {
        return InventTableModule::find(itemId, ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventTransRefId referenceId()
    {
        return referenceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = conPeek(_packedClass,1);
    
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineInventDimIdFromTransactionView</Name>
				<Source><![CDATA[
    private void determineInventDimIdFromTransactionView(WHSInventoryTransactionView _transactionView)
    {
        #InventDimDevelop

        InventDim inventDim;

        inventDim.configId = _transactionView.configId;
        inventDim.inventBatchId = _transactionView.inventBatchId;
        inventDim.inventColorId = _transactionView.inventColorId;
        inventDim.inventGtdId_RU = _transactionView.inventGtdId_RU;
        inventDim.inventOwnerId_RU = _transactionView.inventOwnerId_RU;
        inventDim.inventProfileId_RU = _transactionView.inventProfileId_RU;
        inventDim.inventSerialId = _transactionView.inventSerialId;
        inventDim.inventSizeId = _transactionView.inventSizeId;
        inventDim.inventStatusId = _transactionView.inventStatusId;
        inventDim.inventStyleId = _transactionView.inventStyleId;
        inventDim.inventVersionId = _transactionView.inventVersionId;
        inventDim.inventDimension1 = _transactionView.inventDimension1;
        inventDim.inventDimension2 = _transactionView.inventDimension2;
        inventDim.inventDimension3 = _transactionView.inventDimension3;
        inventDim.inventDimension4 = _transactionView.inventDimension4;
        inventDim.inventDimension5 = _transactionView.inventDimension5;
        inventDim.inventDimension6 = _transactionView.inventDimension6;
        inventDim.inventDimension7 = _transactionView.inventDimension7;
        inventDim.inventDimension8 = _transactionView.inventDimension8;
        inventDim.inventDimension9 = _transactionView.inventDimension9;
        inventDim.inventDimension10 = _transactionView.inventDimension10;
        inventDim.inventDimension11 = _transactionView.inventDimension11;
        inventDim.inventDimension12 = _transactionView.inventDimension12;
        inventDim.InventSiteId = _transactionView.inventSiteId;
        inventDim.InventLocationId = _transactionView.inventLocationId;
        inventDim.wmsLocationId = _transactionView.wmsLocationId;
        inventDim.LicensePlateId = _transactionView.licensePlateId;

        inventDimId = InventDim::findOrCreate(inventDim).inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static InventTrackingDimTracingWHSInventoryTransactionDTO create(container _packedClass)
    {
        InventTrackingDimTracingWHSInventoryTransactionDTO dto = new InventTrackingDimTracingWHSInventoryTransactionDTO();
        dto.unpack(_packedClass);

        return dto;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCommon</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static InventTrackingDimTracingWHSInventoryTransactionDTO initFromCommon(Common _common)
    {
        var dto = InventTrackingDimTracingWHSInventoryTransactionDTO::construct();

        if (_common is WHSInventoryTransactionView)
        {
            WHSInventoryTransactionView transactionView = _common as WHSInventoryTransactionView;

            dto.initFromWHSInventoryTransactionView(transactionView);
        }

        return dto;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventTrackingDimTracingWHSInventoryTransactionDTO construct()
    {
        return new InventTrackingDimTracingWHSInventoryTransactionDTO();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>