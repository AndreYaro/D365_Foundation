<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCancelWorkSortedInventoryPicking</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains the logic used when cancelling sorted inventory picking work.
/// </summary>
internal final class WHSCancelWorkSortedInventoryPicking
{
    WHSLicensePlateId targetLP;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>decrementWorkLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decrement or cancel any worklines that were done before the sorted inventory picking work.
    /// </summary>
    /// <param name="_loadLineRefRecId">
    /// The loadLineRefRecId the sorted inventory picking work is tied.
    /// </param>
    /// <param name="_inventQty">
    /// The amount to reduce the work.
    /// </param>
    /// <param name="_inventUnit">
    /// The invent unit for the quantity.
    /// </param>
    private void decrementWorkLines(
        RefRecId            _loadLineRefRecId,
        InventQty           _inventQty,
        UnitOfMeasureSymbol _inventUnit)
    {
        EcoResReleasedProductUnitConverter  releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();
        WHSWorkLine                         workLine;
        WHSWorkTable                        workTable;
        InventQty                           inventQty = _inventQty;
    
        while select forupdate workLine
            where workLine.LoadLineRefRecId == _loadLineRefRecId
            &&    workLine.WorkStatus       == WHSWorkStatus::Closed
            &&    workLine.InventQtyWork     > 0
            exists join workTable
                where workTable.WorkId     == workLine.WorkId
                &&    workTable.WorkStatus != WHSWorkStatus::Cancelled
                &&    workTable.WorkStatus != WHSWorkStatus::Combined
        {
            if (workLine.InventQtyWork > inventQty)
            {
                if (!inventQty)
                {
                    break;
                }
    
                workLine.InventQtyWork  -= inventQty;
                workLine.QtyWork        -= releasedProductUnitConverter.convert(inventQty,
                                                                                UnitOfMeasure::findBySymbol(_inventUnit).RecId,
                                                                                UnitOfMeasure::findBySymbol(workLine.UnitId).RecId,
                                                                                false,
                                                                                workLine.ItemId,
                                                                                workLine.InventDimId);
    
                inventQty = 0;
            }
            else
            {
                inventQty -= workLine.InventQtyWork;
                workLine.WorkStatus = WHSWorkStatus::Cancelled;
            }
    
            workLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteContainers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete containers associated to the cancelled work.
    /// </summary>
    /// <param name="_shipmentId">
    /// The shipment the container is on.
    /// </param>
    /// <param name="_sortIdentifier">
    /// The sort identifier used to locate the container.
    /// </param>
    private void deleteContainers(
        WHSShipmentId       _shipmentId,
        WHSLicensePlateId  _sortIdentifier)
    {
        if (WHSContainerTable::exist(_shipmentId, targetLP))
        {
            WHSContainerTable::cleanupOutboundSortWorkContainer(_shipmentId, targetLP);
        }
        else
        {
            if (WHSContainerTable::exist(_shipmentId, _sortIdentifier))
            {
                WHSContainerTable::cleanupOutboundSortWorkContainer(_shipmentId, _sortIdentifier);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels sorted inventory picking work, cleaning up neccessary records.
    /// </summary>
    [Hookable(false)]
    protected void execute()
    {
        WHSOutboundSortPositionTrans sortPositionTrans;
        WHSOutboundSortPosition      sortPosition;
        UnitOfMeasureSymbol          inventUnit;
        InventQty                    inventQty;

        while select LoadLine, ItemId, UnitSymbol, ProductQuantity, InventDimId, SortIdentifier from sortPositionTrans
            where sortPositionTrans.LoadLine != 0
            exists join sortPosition
                order by ModifiedDateTime desc
                where sortPosition.RecId                 == sortPositionTrans.OutboundSortPosition
                &&    sortPosition.LicensePlateId        == targetLP
                &&    sortPosition.SortPositionStatus    == WHSOutboundSortPositionStatus::Closed
        {
            // Select loadLine outside of query in case multiple sortPositionTrans refer to same loadLine, we need up to date record.
            WHSLoadLine loadLine = WHSLoadLine::findbyRecId(sortPositionTrans.LoadLine, true);
    
            if (loadLine.RecId != 0)
            {
                inventUnit  = InventTableModule::find(loadLine.ItemId, ModuleInventPurchSales::Invent).UnitId;
                inventQty   = InventTableModule::unitConvert(sortPositionTrans.ItemId,
                                                             ModuleInventPurchSales::Invent,
                                                             sortPositionTrans.UnitSymbol,
                                                             sortPositionTrans.ProductQuantity,
                                                             sortPositionTrans.InventDimId);
    
                loadLine.WorkCreatedQty -= inventQty;
    
                loadLine.update();
    
                // Decrement workLines
                this.decrementWorkLines(loadLine.RecId, inventQty, inventUnit);
    
                // Delete any containers
                this.deleteContainers(loadLine.ShipmentId, sortPositionTrans.SortIdentifier);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <param name="_targetLP">
    /// The target license plate for the work being cancelled.
    /// </param>
    protected void new(WHSLicensePlateId _targetLP)
    {
        targetLP = _targetLP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts records that need to change after cancelling sorted inventory picking work.
    /// </summary>
    /// <param name="_targetLP">
    /// The target license plate ID for the sorted inventory picking work being cancelled.
    /// </param>
    [Hookable(false)]
    internal static void cancelWork(WHSLicensePlateId _targetLP)
    {
        new WHSCancelWorkSortedInventoryPicking(_targetLP).execute();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>