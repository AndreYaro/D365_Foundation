<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099ElectronicRecordBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for all Tax1099 Electronic records. Contains variables and methods shared among all types of records.
/// </summary>
public abstract class Tax1099ElectronicRecordBase
{
    protected Tax1099ERecord output;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>strInsert</Name>
				<Source><![CDATA[
    protected void strInsert(anytype _field, int _position)
    {
        if (strLen(output) >= _position)
        {
            output = strPoke(output, _field, _position);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOutputRecord</Name>
				<Source><![CDATA[
    protected void fillOutputRecord()
    {
        output = '';
        output = strRep(' ', 748);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatNumericOnly</Name>
				<Source><![CDATA[
    protected str formatNumericOnly(str _field)
    {
        str hyphen = '-';
        str blankSpace = ' ';

        str formattedField = strRem(_field, hyphen);
        formattedField = strRem(formattedField, blankSpace);

        return formattedField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatIRSAmount</Name>
				<Source><![CDATA[
    protected str formatIRSAmount(real _amount, int amountLength)
    {
        return strRem(num2Str0(_amount, amountLength + 1, 2, 0, 0), '.');
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStreet</Name>
				<Source><![CDATA[
    protected str formatStreet(AddressStreet street)
    {
        const int maxStreetLength = 40;
        const str carriageReturn = '\n';

        // Formats a street address for use with the 1099 electronic format.
        // Street addresses can be multi-line, so return characters are
        // replaced with ', '. Finally, the string is trimmed to the
        // maximum length.
        AddressStreet formattedStreet;
        int position;

        formattedStreet = street;

        while (strFind(formattedStreet, carriageReturn, 1, strLen(formattedStreet)) > 0)
        {
            position = strFind(formattedStreet, carriageReturn, 1, strLen(formattedStreet));
            formattedStreet = strPoke(formattedStreet, ' ', position);
            formattedStreet = strIns(formattedStreet, ',', position);
        }

        formattedStreet = subStr(formattedStreet, 1, maxStreetLength);
        return formattedStreet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Abstract method overridden by all Tax1099 record types, outputs a Tax1099ERecord containing the record as a string
    /// </summary>
    /// <param name = "_realSequenceNumber">The line in which this record will appear in the file</param>
    /// <param name = "_calendarYear">The calendar year to which this file will belong</param>
    /// <param name = "_isCombinedFiling">Whether combined State/Federal filing is to be used for this file</param>
    /// <param name = "_localIRSPayerRec">Table buffer containing transaction information (Optional argument)</param>
    /// <returns>A Tax1099ERecord embodying a formatted, 750 character string</returns>
    public abstract Tax1099ERecord generateRecord(real _realSequenceNumber, Tax1099CalendarYear _calendarYear, boolean _isCombinedFiling,
         Tax1099IRSPayerRec _localIRSPayerRec = null) { }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>