<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSplitShipConfirmSplitQty</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSSplitShipConfirmSplitQty</c> class handles load splitting at ship confirmation by splitting remaining quantity to a new load.
/// </summary>
[WHSSplitShipConfirmFactoryAttribute(WHSLoadSplitShipConfirmMethod::SplitQty)]
public final class WHSSplitShipConfirmSplitQty extends WHSSplitShipConfirm
{
    private WHSLoadId newLoadId;

    private Set packingWorkForContainersNotYetLoadedSet;
    private Set closedContainersNotYetLoadedSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createNewLoad</Name>
				<Source><![CDATA[
    private void createNewLoad()
    {
        WHSLoadTable    newLoadTable;
        
        newLoadTable.initFromLoad(loadTable);
        newLoadTable.LoadStatus = this.getLoadStatusFromWork();
        newLoadTable.RouteCode = "";
        
        newLoadTable.insert();

        newLoadId = newLoadTable.LoadId;
        info(strFmt("@WAX:NewLoadCreatedSplitShipConfirm", newLoadId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLoadStatusFromWork</Name>
				<Source><![CDATA[
    private WHSLoadStatus getLoadStatusFromWork()
    {
        WHSWorkTable workTable = this.getWorkTableForWorkStatus();

        if (workTable.RecId != 0)
        {
            if (workTable.WorkStatus == WHSWorkStatus::Open)
            {
                return WHSLoadStatus::Waved;
            }
            else
            {
                return WHSLoadStatus::InProcess;
            }
        }

        return WHSLoadStatus::Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkTableForWorkStatus</Name>
				<Source><![CDATA[
    private WHSWorkTable getWorkTableForWorkStatus()
    {
        WHSWorkTable workTable;
        select firstonly RecId, WorkStatus from workTable
            order by workTable.WorkStatus desc
            where workTable.LoadId == loadTable.LoadId
                &&  workTable.WorkStatus < WHSWorkStatus::Closed;
        

        return workTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLoadBeSplit</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean canLoadBeSplit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoad</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void updateLoad()
    {
        this.createNewLoad();

        // Update records with no shipment value.
        WHSShipmentTable notAssignedShipment;

        this.updateLoadLines(notAssignedShipment);
        this.updateWorkRecords(newLoadId, '', '');
        this.updateWorkLineRecords(newLoadId, '', '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipments</Name>
				<Source><![CDATA[
    protected void updateShipments()
    {
        this.updateOrSplitShipments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadLines</Name>
				<Source><![CDATA[
    private void updateLoadLines(WHSShipmentTable _shipConfirmShipmentTable)
    {
        using (var activityContext = this.instrumentationLogger().splitShipConfirmActivities().updateLoadLines())
        {
            this.instrumentationLogger().logRecordInformation(loadTable);
            this.instrumentationLogger().logRecordInformation(_shipConfirmShipmentTable);

            WHSLoadLine loadLine;
            int         updatedLines;

            while select forupdate loadLine
                where loadLine.LoadId       == loadTable.LoadId
                    &&  loadLine.ShipmentId == _shipConfirmShipmentTable.ShipmentId
            {
                this.updateLoadLine(loadLine, _shipConfirmShipmentTable.ShipmentId);
                updatedLines++;
            }

            activityContext.addCustomProperty('SplitShipConfirmSplitQty.UpdatedLines', int2Str(updatedLines));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadLine</Name>
				<Source><![CDATA[
    private void updateLoadLine(WHSLoadLine _loadLine, WHSShipmentId _newShipmentId)
    {
        WHSLoadTable::reduceLoadWeightsForLoadLine(_loadLine, _loadLine.InventQty);

        _loadLine.ShipmentId = _newShipmentId;
        _loadLine.LoadId     = newLoadId;
        _loadLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkRecords</Name>
				<Source><![CDATA[
    private void updateWorkRecords(WHSLoadId _newLoadId, WHSShipmentId _shipConfirmShipmentId, WHSShipmentId _newShipmentId)
    {
        WHSWorkTable workTable;
        WHSWorkLine  workLine;

        // Update non closed work header records tied to the load

        workTable.skipDataMethods(true);

        update_recordSet workTable
            setting LoadId     = _newLoadId,
                    ShipmentId = _newShipmentId
                    where workTable.LoadId          == loadTable.LoadId
                        &&  workTable.ShipmentId    == _shipConfirmShipmentId
                        &&  workTable.WorkStatus     < WHSWorkStatus::Closed;

        // Also update closed packing work headers for containers that haven't yet been loaded
        if (packingWorkForContainersNotYetLoadedSet)
        {                    
            SetEnumerator packingWorksForContainersNotYetLoadedEnum = packingWorkForContainersNotYetLoadedSet.getEnumerator();

            while (packingWorksForContainersNotYetLoadedEnum.moveNext())
            {
                WHSWorkId packingWorkId = packingWorksForContainersNotYetLoadedEnum.current();
                
                update_recordSet workTable
                    setting LoadId     = _newLoadId,
                            ShipmentId = _newShipmentId
                        where workTable.LoadId      == loadTable.LoadId
                           && workTable.ShipmentId  == _shipConfirmShipmentId
                           && workTable.WorkId      == packingWorkId
                           && workTable.WorkStatus  == WHSWorkStatus::Closed;                
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkLineRecords</Name>
				<Source><![CDATA[
    protected void updateWorkLineRecords(WHSLoadId _newLoadId, WHSShipmentId _shipConfirmShipmentId, WHSShipmentId _newShipmentId)
    {
        WHSWorkTable workTable;
        WHSWorkLine  workLine;
        
        workLine.skipDataMethods(true);

        // Update work lines tied to load on non closed work headers
        update_recordSet workLine
            setting LoadId     = _newLoadId,
                    ShipmentId = _newShipmentId
                    where workLine.LoadId       == loadTable.LoadId
                        &&  workLine.ShipmentId == _shipConfirmShipmentId
                            join workTable
                                where workTable.WorkId      == workLine.WorkId
                                    &&  workTable.WorkStatus < WHSWorkStatus::Closed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContainersForShipment</Name>
				<Source><![CDATA[
    private void updateContainersForShipment(
        WHSShipmentId _origShipmentId,
        WHSShipmentId _newShipmentId)
    {
        WHSContainerTable   containerTable;
    
        // Update method on container table will also update container line shipment Id.
        // The update method is overridden so loop and update.
        while select forupdate containerTable
            where containerTable.ShipmentId         == _origShipmentId
                &&  containerTable.ContainerStatus  != WHSContainerStatus::Closed
        {
            containerTable.ShipmentId = _newShipmentId;
            containerTable.update();
        }
        
        if (closedContainersNotYetLoadedSet)
        {           
            SetEnumerator containersNotYetLoadedEnum = closedContainersNotYetLoadedSet.getEnumerator();

            while (containersNotYetLoadedEnum.moveNext())
            {
                WHSContainerId containerId;
                WHSShipmentId shipmentId;

                [shipmentId, containerId] = containersNotYetLoadedEnum.current();
                
                // the closedContainersNotYetLoadedSet is populated for the whole load, so there might be
                // containers in it belonging to different shipments. Even though container IDs are unique,
                // there's no point in sending unneeded SQL queries that we know would hit no containers in the loop below.

                if (_origShipmentId != shipmentId)
                {
                    continue;
                }

                while select forupdate containerTable
                    where containerTable.ShipmentId       == _origShipmentId
                       && containerTable.ContainerId      == containerId
                       && containerTable.ContainerStatus  == WHSContainerStatus::Closed
                {
                    containerTable.ShipmentId = _newShipmentId;
                    containerTable.update();
                }
            }
        }

        this.updateClosedContainerWithPackedContainerPutawayWork(_origShipmentId, _newShipmentId);
        this.updateClosedContainerWithoutPackedContainerPutawayWork(_origShipmentId, _newShipmentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateClosedContainerWithPackedContainerPutawayWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packed containers that are already closed but if there are open work for them, then move them to the new shipment.
    /// </summary>
    /// <param name = "_origShipmentId">Original shipment Id</param>
    /// <param name = "_newShipmentId">New shipment Id</param>
    private void updateClosedContainerWithPackedContainerPutawayWork(WHSShipmentId _origShipmentId, WHSShipmentId _newShipmentId)
    {
        if (WHSConfirmAndTransferInventoryAtPackingStationToggle::instance().isEnabled())
        {
            WHSWorkTable packedContainerPickingWork;
            WHSContainerTable containerTable;

            while select forupdate containerTable
                where containerTable.ShipmentId == _origShipmentId
                   && containerTable.ContainerStatus == WHSContainerStatus::Closed
                exists join packedContainerPickingWork
                    where (containerTable.ContainerId == packedContainerPickingWork.TargetLicensePlateId
                            || containerTable.ContainerGroupingLicensePlateId == packedContainerPickingWork.TargetLicensePlateId)
                          && packedContainerPickingWork.WorkTransType == WHSWorkTransType::PackedContainerPicking
                          && packedContainerPickingWork.WorkStatus < WHSWorkStatus::Closed
            {
                containerTable.ShipmentId = _newShipmentId;
                containerTable.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateClosedContainerWithoutPackedContainerPutawayWork</Name>
				<Source><![CDATA[
    private void updateClosedContainerWithoutPackedContainerPutawayWork(WHSShipmentId _origShipmentId, WHSShipmentId _newShipmentId)
    {
        if (WHSConfirmAndTransferInventoryAtPackingStationToggle::instance().isEnabled())
        {
            WHSWorkTable packedContainerPickingWork;
            WHSContainerTable containerTable;
            WHSCloseContainerProfile containerProfile;

            while select forupdate containerTable
                where containerTable.ShipmentId == _origShipmentId
                   && containerTable.ContainerStatus == WHSContainerStatus::Closed
                exists join containerProfile
                    where containerProfile.CloseContainerProfileId == containerTable.CloseContainerProfileId
                        && containerProfile.AutoReleaseContainerAtContainerClose == WHSAutoReleaseContainerAtContainerClose::Never //Delayed
                        notexists join packedContainerPickingWork
                            where (containerTable.ContainerId == packedContainerPickingWork.TargetLicensePlateId
                                    || containerTable.ContainerGroupingLicensePlateId == packedContainerPickingWork.TargetLicensePlateId)
                                && packedContainerPickingWork.WorkTransType == WHSWorkTransType::PackedContainerPicking
                                && packedContainerPickingWork.WorkStatus != WHSWorkStatus::Cancelled
            {
                containerTable.ShipmentId = _newShipmentId;
                containerTable.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSplitLoadLine</Name>
				<Source><![CDATA[
    private boolean mustSplitLoadLine(WHSLoadLine _loadLine)
    {
        return _loadLine.PickedQty != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLinesInPackingStation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are LoadLine references in the WHSWorkLineLoadLineDetails table exists (which means Packing work exists)
    /// and then captures the total picking work quantity.
    /// </summary>
    /// <param name = "_shipmentId">Shipment Id</param>
    /// <returns>Map object with the collection of Load line reference and the work created quantity.</returns>
    private Map loadLinesInPackingStation(WHSShipmentId _shipmentId)
    {
        WHSWorkTable                workTable;
        WHSWorkLineLoadLineDetails  workLineLoadLineDetails;
        WHSLoadLine                 loadLine;
        Map                         loadReferencesAtPackingStation = new Map(Types::Int64, Types::Real);
        
        if (!WHSConfirmAndTransferInventoryAtPackingStationToggle::instance().isEnabled())
        {
            return loadReferencesAtPackingStation;
        }

        while select LoadLineRefRecId from workLineLoadLineDetails
            group by workLineLoadLineDetails.LoadLineRefRecId
            exists join workTable
                where workTable.WorkId          == workLineLoadLineDetails.WorkId
                    && workTable.WorkTransType  == WHSWorkTransType::PackedContainerPicking
                    && workTable.WorkStatus     != WHSWorkStatus::Cancelled
                    && workTable.WorkStatus     != WHSWorkStatus::Combined
                exists join loadLine
                    where loadLine.RecId       == workLineLoadLineDetails.LoadLineRefRecId
                        && loadLine.ShipmentId == _shipmentId
                        && loadLine.PickedQty  != loadLine.InventQty
        {
            WHSInventQtyWork activePickingWorkQty = this.activePickingWorkQty(workLineLoadLineDetails.LoadLineRefRecId);
            
            WHSInventQtyWork closedPickingWorkQty = this.closedPickingWorkQty(workLineLoadLineDetails.LoadLineRefRecId);

            WHSInventQtyWork activeWorkLineQtyWithOldReference = this.activeWorkLineQtyWithOldReference(workLineLoadLineDetails.LoadLineRefRecId);

            WHSInventQtyWork closedWorkLineQtyWithOldReference = this.closedWorkLineQtyWithOldReference(workLineLoadLineDetails.LoadLineRefRecId);
            
            // Total closed work qty.
            WHSInventQtyWork pickingWorkQty = closedPickingWorkQty + closedWorkLineQtyWithOldReference;
            
            
            WHSInventQtyWork packingStationWorkQty = this.packingStationWorkQty(workLineLoadLineDetails.LoadLineRefRecId);
             
            // If there is more sales picking work still active than the total picked work from the packing, then it means
            // system should adjust the work created qty on the Load line before moving it to the shipping status.
            if ((pickingWorkQty + activePickingWorkQty + activeWorkLineQtyWithOldReference) > packingStationWorkQty)
            {
                loadReferencesAtPackingStation.insert(workLineLoadLineDetails.LoadLineRefRecId, packingStationWorkQty + activePickingWorkQty + activeWorkLineQtyWithOldReference);
            }
        }
        
        return loadReferencesAtPackingStation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packingStationWorkQty</Name>
				<Source><![CDATA[
    private WHSInventQtyWork packingStationWorkQty(WHSLoadLineRefRecId _loadLineRecId)
    {
        WHSInventQtyWork packingStationWorkQty;
        WHSWorkLineLoadLineDetails tmpWorkLineLoadLineDetails;
        WHSLineNum firstPutLineNum;
        WHSWorkId tmpWorkId;
        WHSWorkTable workTable;

        // Loop through to fetch the work created at the Packing station.
        while select WorkId, LineNum, InventQtyWork from tmpWorkLineLoadLineDetails
            order by WorkId
            where tmpWorkLineLoadLineDetails.LoadLineRefRecId == _loadLineRecId
            exists join workTable
                where workTable.WorkId          == tmpWorkLineLoadLineDetails.WorkId
                    && workTable.WorkTransType  == WHSWorkTransType::PackedContainerPicking
                    && workTable.WorkStatus     != WHSWorkStatus::Cancelled
                    && workTable.WorkStatus     != WHSWorkStatus::Combined
        {
            if (tmpWorkId != tmpWorkLineLoadLineDetails.WorkId)
            {
                WHSWorkLine firstPutLine;
                select firstonly LineNum from firstPutLine
                        order by LineNum
                        where firstPutLine.WorkType == WHSWorkType::Put;
                    
                firstPutLineNum = firstPutLine.LineNum;
                tmpWorkId = tmpWorkLineLoadLineDetails.WorkId;
            }
                
            if (tmpWorkLineLoadLineDetails.LineNum < firstPutLineNum)
            {
                packingStationWorkQty += tmpWorkLineLoadLineDetails.InventQtyWork;
            }
        }

        return packingStationWorkQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activePickingWorkQty</Name>
				<Source><![CDATA[
    private WHSInventQtyWork activePickingWorkQty(WHSLoadLineRefRecId _loadLineRecId)
    {
        WHSWorkLine workLineActive;
        WHSWorkTable workTableActive;

        select sum(InventQtyWork) from workLineActive
            where workLineActive.LoadLineRefRecId   == _loadLineRecId
                exists join workTableActive
                    where workTableActive.WorkId           == workLineActive.WorkId
                        && workTableActive.WorkStatus       < WHSWorkStatus::Closed;

        return workLineActive.InventQtyWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closedPickingWorkQty</Name>
				<Source><![CDATA[
    private WHSInventQtyWork closedPickingWorkQty(WHSLoadLineRefRecId _loadLineRecId)
    {
        WHSWorkLine workLineClosed;
        WHSWorkTable workTableClosed;

        select sum(InventQtyWork) from workLineClosed
            where workLineClosed.LoadLineRefRecId == _loadLineRecId
                exists join workTableClosed
                    where workTableClosed.WorkId == workLineClosed.WorkId
                        && workTableClosed.WorkStatus == WHSWorkStatus::Closed;

        return workLineClosed.InventQtyWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activeWorkLineQtyWithOldReference</Name>
				<Source><![CDATA[
    private WHSInventQtyWork activeWorkLineQtyWithOldReference(WHSLoadLineRefRecId _loadLineRecId)
    {
        WHSWorkLine splitWorkLineActive;
        WHSSplitLoadReference splitLoadRefActive;
        WHSWorkTable activePickingWork;

        select sum(InventQtyWork) from splitWorkLineActive
            join splitLoadRefActive
            where splitLoadRefActive.NewLoadLine    == _loadLineRecId
                && splitLoadRefActive.WorkId        == splitWorkLineActive.WorkId
                && splitLoadRefActive.LineNum       == splitWorkLineActive.LineNum
                && splitLoadRefActive.OldLoadLine   == splitWorkLineActive.LoadLineRefRecId
                exists join activePickingWork
                    where activePickingWork.WorkId == splitWorkLineActive.WorkId
                        && activePickingWork.WorkStatus < WHSWorkStatus::Closed;

        return splitWorkLineActive.InventQtyWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closedWorkLineQtyWithOldReference</Name>
				<Source><![CDATA[
    private WHSInventQtyWork closedWorkLineQtyWithOldReference(WHSLoadLineRefRecId _loadLineRecId)
    {
        WHSWorkLine splitWorkLineClosed;
        WHSSplitLoadReference splitLoadRefClosed;
        WHSWorkTable closedSplitWork;

        select sum(InventQtyWork) from splitWorkLineClosed
            join splitLoadRefClosed
            where splitLoadRefClosed.NewLoadLine    == _loadLineRecId
                && splitLoadRefClosed.WorkId        == splitWorkLineClosed.WorkId
                && splitLoadRefClosed.LineNum       == splitWorkLineClosed.LineNum
                && splitLoadRefClosed.OldLoadLine   == splitWorkLineClosed.LoadLineRefRecId
                exists join closedSplitWork
                where closedSplitWork.WorkId == splitLoadRefClosed.WorkId
                    && closedSplitWork.WorkStatus == WHSWorkStatus::Closed;

        return splitWorkLineClosed.InventQtyWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrSplitLoadLines</Name>
				<Source><![CDATA[
    private void updateOrSplitLoadLines(WHSShipmentTable _shipConfirmShipmentTable, WHSShipmentId _newShipmentId)
    {
        using (var activityContext = this.instrumentationLogger().splitShipConfirmActivities().splitLoadLines())
        {
            this.instrumentationLogger().logRecordInformation(loadTable);
            this.instrumentationLogger().logRecordInformation(_shipConfirmShipmentTable);

            Map loadReferencesAtPackingStation = this.loadLinesInPackingStation(_shipConfirmShipmentTable.ShipmentId);

            WHSLoadLine loadLine;
            int         splitLines;
            int         movedLines;


            while select forUpdate loadLine
                where loadLine.ShipmentId   == _shipConfirmShipmentTable.ShipmentId
                    &&  loadLine.PickedQty  != loadLine.InventQty
            {
                using (WHSSkipCrossDockLoadLineRecalculationWhenDecreaseLoadLineInventQtyContext context =
                    WHSSkipCrossDockLoadLineRecalculationWhenDecreaseLoadLineInventQtyContext::construct())
                {
                    if (this.mustSplitLoadLine(loadLine))
                    {
                        InventQty diffWorkCreatedQty;
                    
                        if (loadReferencesAtPackingStation.exists(loadLine.RecId))
                        {
                            diffWorkCreatedQty = loadReferencesAtPackingStation.lookup(loadLine.RecId) - loadLine.PickedQty;
                        }
                        else
                        {
                            diffWorkCreatedQty      = loadLine.WorkCreatedQty - loadLine.PickedQty;
                        }
                    
                        InventQty   diffInventQty           = loadLine.InventQty - loadLine.PickedQty;
                        Qty         diffQty                 = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(loadLine.ItemId,
                                                                                                                                    loadLine.InventDimId,
                                                                                                                                    diffInventQty,
                                                                                                                                    WHSCatchWeightHelper::inventHandlingUnitId(loadLine.ItemId),
                                                                                                                                    loadLine.UOM,
                                                                                                                                    NoYes::Yes,
                                                                                                                                    (NoYes::No));
                    
                        WHSLoadLine updatedLoadLine = this.reduceLoadLineQuantityToPickedQuantity(loadLine, false);
                        this.createNewLoadLine(updatedLoadLine, _newShipmentId, diffWorkCreatedQty, diffInventQty, diffQty);
                        splitLines++;
                    }
                    else
                    {
                        this.updateLoadLine(loadLine, _newShipmentId);
                        movedLines++;
                    }
                }
            }

            activityContext.addCustomProperty('SplitShipConfirmSplitQty.SplitLines', int2Str(splitLines));
            activityContext.addCustomProperty('SplitShipConfirmSplitQty.MovedLines', int2Str(movedLines));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShipmentLoadQuantityPicked</Name>
				<Source><![CDATA[
    private boolean isShipmentLoadQuantityPicked(WHSLoadId _loadId, WHSShipmentId _shipmentId)
    {
        return (select firstOnly RecId from WHSLoadLine
                    where WHSLoadLine.LoadId        == _loadId
                        &&  WHSLoadLine.ShipmentId  == _shipmentId
                        &&  WHSLoadLine.PickedQty   != 0).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrSplitShipments</Name>
				<Source><![CDATA[
    private void updateOrSplitShipments()
    {
        WHSShipmentTable shipmentTable;
        boolean shouldCreateOrUpdateWave = WHSSplitShipConfirmSplitQtyUpdateWaveFlight::instance().isEnabled();

        // Iterate over shipments tied to the current load
        while select forUpdate shipmentTable
            where shipmentTable.LoadId          == loadTable.LoadId
            &&    shipmentTable.ShipmentStatus  != WHSShipmentStatus::Loaded
        {            
            if (this.isShipmentLoadQuantityPicked(shipmentTable.LoadId, shipmentTable.ShipmentId))
            {
                WHSShipmentTable newShipment = this.createNewShipment(shipmentTable);

                if (shouldCreateOrUpdateWave)
                {
                    this.createWaveLine(newShipment);
                }

                this.updateWorkRecords(newLoadId, shipmentTable.ShipmentId, newShipment.ShipmentId);
                this.updateWorkLineRecords(newLoadId, shipmentTable.ShipmentId, newShipment.ShipmentId);
                this.updateContainersForShipment(shipmentTable.ShipmentId, newShipment.ShipmentId);

                this.updateOrSplitLoadLines(shipmentTable, newShipment.ShipmentId);
            }
            else
            {
                // If no quantity completed update Load Id on Shipment and Load Lines
                shipmentTable.LoadId = newLoadId;
                shipmentTable.update();

                if (shouldCreateOrUpdateWave)
                {
                    this.updateWaveLine(shipmentTable);
                }

                this.updateWorkRecords(newLoadId, shipmentTable.ShipmentId, shipmentTable.ShipmentId);
                this.updateWorkLineRecords(newLoadId, shipmentTable.ShipmentId, shipmentTable.ShipmentId);

                this.updateLoadLines(shipmentTable);
            }            
        }

        WHSLoadStatusUpdater::newFromLoadId(loadTable.LoadId).updateWhenLoadLineUpdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWaveLine</Name>
				<Source><![CDATA[
    private void createWaveLine(WHSShipmentTable _shipmentTable)
    {
        if (_shipmentTable.WaveId != '')
        {
            WHSWaveLine waveLine;

            waveLine.initFromWHSShipmentTable(_shipmentTable);
            waveLine.WaveId = _shipmentTable.WaveId;

            waveLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWaveLine</Name>
				<Source><![CDATA[
    private void updateWaveLine(WHSShipmentTable _shipmentTable)
    {
        if (_shipmentTable.WaveId != '')
        {
            WHSWaveLine waveLine;

            update_recordset waveLine
                setting LoadId = _shipmentTable.LoadId
                where waveLine.ShipmentId == _shipmentTable.ShipmentId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewShipment</Name>
				<Source><![CDATA[
    private WHSShipmentTable createNewShipment(WHSShipmentTable _shipmentTable)
    {
        WHSShipmentTable    newShipmentTable;

        newShipmentTable.initFromShipment(_shipmentTable);
        newShipmentTable.LoadId = newLoadId;
        newShipmentTable.ShipmentStatus = WHSShipmentStatusCalculator::getShipmentStatusFromWork(_shipmentTable.ShipmentId);
        

        newShipmentTable.insert();

        return newShipmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewLoadLine</Name>
				<Source><![CDATA[
    private void createNewLoadLine(WHSLoadLine _loadLine, WHSShipmentId _newShipmentId, InventQty _diffWorkCreatedQty, InventQty _diffInventQty, Qty _diffQty)
    {
        WHSLoadLine         newLoadLine;

        // Insert new load line
        buf2Buf(_loadLine, newLoadLine);

        newLoadLine.ShipmentId     = _newShipmentId;
        newLoadLine.LoadId         = newLoadId;
        newLoadLine.Qty            = _diffQty;
        newLoadLine.InventQty      = _diffInventQty;
        newLoadLine.WorkCreatedQty = _diffWorkCreatedQty;
        newLoadLine.PickedQty      = 0;

        if (WHSUpdateCrossDockReservedQuantityOnLoadSplitFlight::instance().isEnabled())
        {
            newLoadLine.updateCrossDockReservedPhysicalQuantity(_loadLine.InventQty, newLoadLine.InventQty);
        }

        newLoadLine.insert();

        if (WHSConfirmAndTransferInventoryAtPackingStationToggle::instance().isEnabled())
        {
            WHSSplitLoadReference splitLoadReference = this.initSplitLoadReference(_loadLine, newLoadLine);
            this.insertSplitLoadReference(splitLoadReference, _loadLine.RecId);
        }

        // Update appropriate work/container/marking/crossdock tables tied to original load line
        this.updateWorkForLoadLine(_loadLine.RecId, newLoadLine.RecId);
        this.updateContainersForLoadLine(_newShipmentId, _loadLine.RecId, newLoadLine.RecId);
        this.updateCrossDockForLoadLine(_loadLine.RecId, newLoadLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSplitLoadReference</Name>
				<Source><![CDATA[
    private WHSSplitLoadReference initSplitLoadReference(WHSLoadLine _oldLoadLine, WHSLoadLine _newLoadLine)
    {
        WHSSplitLoadReference splitLoadReference;

        splitLoadReference.OldLoadLine = _oldLoadLine.RecId;
        splitLoadReference.OldShipmentId = _oldLoadLine.ShipmentId;
        splitLoadReference.NewLoadLine = _newLoadLine.RecId;
        splitLoadReference.NewShipmentId = _newLoadLine.ShipmentId;
        
        return splitLoadReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSplitLoadReference</Name>
				<Source><![CDATA[
    private void insertSplitLoadReference(WHSSplitLoadReference _splitLoadReference, WHSLoadLineRefRecId _origLoadLineRefRecId)
    {
        WHSWorkTable workTable;
        WHSWorkLine  workLine;

        while select WorkId, LineNum from workLine
            where workLine.LoadLineRefRecId == _origLoadLineRefRecId
                exists join workTable
                    where workTable.WorkId       == workLine.WorkId
                        &&  workTable.WorkStatus == WHSWorkStatus::Closed
        {
            WHSSplitLoadReference tmpSplitLoadReference;
            buf2Buf(_splitLoadReference, tmpSplitLoadReference);

            tmpSplitLoadReference.WorkId = workLine.WorkId;
            tmpSplitLoadReference.LineNum = workLine.LineNum;
            tmpSplitLoadReference.insert();
        }

        // In scenarios where the shipment is splitted multiple times, create reference to each of the shipment and loadline. 
        WHSSplitLoadReference loadReference = WHSSplitLoadReference::findByNewLoadLineReference(_origLoadLineRefRecId);
            
        if (loadReference.OldLoadLine != 0)
        {
            this.insertSplitLoadReference(_splitLoadReference, loadReference.OldLoadLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>workStatusesToUpdateForLoadLine</Name>
				<Source><![CDATA[
    protected container workStatusesToUpdateForLoadLine()
    {
        return [WHSWorkStatus::Open,WHSWorkStatus::InProcess, WHSWorkStatus::PendingReview, WHSWorkStatus::Skipped];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkForLoadLine</Name>
				<Source><![CDATA[
    protected void updateWorkForLoadLine(RecId _origLoadLineRefRecId, RecId _newLoadLineRefRecId)
    {
        if (!_origLoadLineRefRecId || !_newLoadLineRefRecId)
        {
            return;
        }

        WHSWorkTable workTable;
        WHSWorkLine  workLine;
        container workStatusesToUpdate = this.workStatusesToUpdateForLoadLine();

        workLine.skipDataMethods(true);

        // Update work lines tied to the RecId of the load line
        update_recordSet workLine
            setting LoadLineRefRecId = _newLoadLineRefRecId
                where workLine.LoadLineRefRecId == _origLoadLineRefRecId
                    join workTable
                        where workTable.WorkId      == workLine.WorkId
                            &&  workTable.WorkStatus in workStatusesToUpdate;

        if (packingWorkForContainersNotYetLoadedSet)
        {            
            SetEnumerator packingWorksForContainersNotYetLoadedEnum = packingWorkForContainersNotYetLoadedSet.getEnumerator();

            while (packingWorksForContainersNotYetLoadedEnum.moveNext())
            {
                WHSWorkId packingWorkId = packingWorksForContainersNotYetLoadedEnum.current();                
                
                update_recordSet workLine
                    setting LoadLineRefRecId = _newLoadLineRefRecId
                      where workLine.LoadLineRefRecId == _origLoadLineRefRecId
                         && workLine.WorkId == packingWorkId;                
            }

            // Update open packed container work load line references
            WHSWorkLineLoadLineDetails workLineLoadLineDetails;
            WHSWorkTable packedContainerPickingWorkTable;

            update_recordset workLineLoadLineDetails
                setting LoadLineRefRecId = _newLoadLineRefRecId
                    where workLineLoadLineDetails.LoadLineRefRecId == _origLoadLineRefRecId
                    exists join packedContainerPickingWorkTable
                    where packedContainerPickingWorkTable.WorkId == workLineLoadLineDetails.WorkId
                        && packedContainerPickingWorkTable.WorkTransType == WHSWorkTransType::PackedContainerPicking
                        && packedContainerPickingWorkTable.WorkStatus in workStatusesToUpdate;
        }

        if (WHSConfirmAndTransferInventoryAtPackingStationToggle::instance().isEnabled())
        {
            WHSWorkLineLoadLineDetails workLineLoadLineDetails;

            update_recordset workLineLoadLineDetails
                setting LoadLineRefRecId = _newLoadLineRefRecId
                    where workLineLoadLineDetails.LoadLineRefRecId == _origLoadLineRefRecId
                        join workTable
                            where workTable.WorkId == workLineLoadLineDetails.WorkId
                               && workTable.WorkStatus in workStatusesToUpdate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContainersForLoadLine</Name>
				<Source><![CDATA[
    private void updateContainersForLoadLine(WHSShipmentId _newShipmentId, RecId _origLoadLineRecId, RecId _newLoadLineRecId)
    {
        if (!_origLoadLineRecId || !_newLoadLineRecId)
        {
            return;
        }

        WHSContainerLine containerLine;
        containerLine.skipDataMethods(true);

        if (!WHSConfirmAndTransferInventoryAtPackingStationToggle::instance().isEnabled())
        {
            WHSContainerTable containerTable;

            update_recordSet containerLine
            setting LoadLine = _newLoadLineRecId
                where containerLine.LoadLine == _origLoadLineRecId
            exists join containerTable
                where containerTable.ContainerId == containerLine.ContainerId
                    && containerTable.ContainerStatus != WHSContainerStatus::Closed;

            if (closedContainersNotYetLoadedSet)
            {
                SetEnumerator containersNotYetLoadedEnum = closedContainersNotYetLoadedSet.getEnumerator();

                while (containersNotYetLoadedEnum.moveNext())
                {
                    WHSContainerId containerId;
                    WHSShipmentId shipmentId;

                    [shipmentId, containerId] = containersNotYetLoadedEnum.current();
                
                    update_recordSet containerLine
                        setting LoadLine = _newLoadLineRecId
                            where containerLine.LoadLine == _origLoadLineRecId
                                && containerLine.ContainerId == containerId
                                && containerLine.ShipmentId == _newShipmentId;
                }
            }
        }
        else
        {
            WHSContainerTable containerTable;

            update_recordSet containerLine
                setting LoadLine = _newLoadLineRecId
                    where containerLine.LoadLine == _origLoadLineRecId
                        exists join containerTable
                            where containerTable.ContainerId == containerLine.ContainerId
                                && containerTable.ShipmentId == _newShipmentId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCrossDockForLoadLine</Name>
				<Source><![CDATA[
    private void updateCrossDockForLoadLine(RecId _origLoadLineRecId, RecId _newLoadLineRecId)
    {
        if (!_origLoadLineRecId || !_newLoadLineRecId)
        {
            return;
        }

        WHSCrossDockLoadLine crossDockLoadLine;

        crossDockLoadLine.skipDataMethods(true);

        update_recordset crossDockLoadLine
            setting LoadLineRecId = _newLoadLineRecId
                where crossDockLoadLine.LoadLineRecId == _origLoadLineRecId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    protected void initializeImplementation()
    {
        packingWorkForContainersNotYetLoadedSet = new Set(Types::String);
        closedContainersNotYetLoadedSet = new Set(Types::Container);

        WHSSplitShipConfirm::determinePackingWorkConnectedToContainersNotYetLoaded(loadTable.LoadId, packingWorkForContainersNotYetLoadedSet, closedContainersNotYetLoadedSet);       
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>