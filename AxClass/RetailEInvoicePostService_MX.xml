<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEInvoicePostService_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailEInvoicePostService_MX</c> class handles the posting of the Retail EInvoice for CFDI.
/// </summary>
public class RetailEInvoicePostService_MX extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDuplicates</Name>
				<Source><![CDATA[
    private boolean checkDuplicates(RetailStatementJour _statementJour)
    {
        EInvoiceJour_MX eInvoiceJour;
        boolean ret = true;

        while select count(RecId) from eInvoiceJour group by IsReturn
            where eInvoiceJour.RefTableId == _statementJour.TableId
                && eInvoiceJour.RefRecId == _statementJour.RecId
        {
            if (eInvoiceJour.RecId > 1)
            {
                ret = checkFailed(strFmt("@SYS112265", tablePName(EInvoiceJour_MX)));
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEInvoice</Name>
				<Source><![CDATA[
    private boolean createEInvoice(EInvoicePost_MX _eInvoicePost)
    {
        boolean ret;

        if (_eInvoicePost.checkIfSrcInvoiceContainDataForEInvoice())
        {
            _eInvoicePost.createElectronicInvoiceJour();
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts electronic invoices.
    /// </summary>
    /// <param name = "_dataContract">Retail EInvoice CFDI data contract.</param>
    public void post(RetailEInvoicePostContract_MX _dataContract)
    {
        if (_dataContract.parmIsAggregateStatements())
        {
            this.postEInvoiceAggregatedStatement(_dataContract);
        }
        else
        {
            this.postEInvoiceStatement(_dataContract);
        }

        ttsBegin;
        RetailEInvoiceCFDIRetailStatementRefProcessor_MX::updateEInvoiceReturnReferences();
        RetailEInvoiceCFDIRetailAggregatedStatementRefProcessor_MX::updateEInvoiceReturnReferences();
        //good time to process draft CustInvoiceJour references CFDI EInvoice as well
        RetailEInvoiceCFDICustInvoiceJourRefProcessor_MX::updateEInvoiceReturnReferences();

        RetailEInvoiceCFDIRefProcessor_MX::reviseDraftReturnEInvoice();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postEInvoiceAggregatedStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts aggregated statement as electronic invoice.
    /// </summary>
    /// <param name = "_dataContract">Retail EInvoice CFDI data contract.</param>
    private void postEInvoiceAggregatedStatement(RetailEInvoicePostContract_MX _dataContract)
    {
        using(var telemetry = RetailInstrumentationSegment::construct(classId2Name(ClassIdGet(this)), funcName()))
        {
            TmpRecIdFilter filter;
            boolean isPosted;

            try
            {
                RetailEInvoiceAggregatedStatement_MX::validatePeriodOverlap(_dataContract.parmAggregationPeriod(), _dataContract.parmAggregationPeriodStart());

                ttsbegin;

                filter = this.createAggregatedStatement(_dataContract);

                RetailEInvoiceAggregatedStatement_MX aggregatedStatement;

                while select aggregatedStatement order by AggregatedStatementId
                    exists join filter
                        where filter.RefRecId == aggregatedStatement.RecId
                {
                    info("@RetailEInvoiceCFDI:AggregatedStatementId" + ' ' + aggregatedStatement.AggregatedStatementId);

                    RetailEInvoicePost_MX eInvoicePost = EInvoicePost_MX::construct(
                        aggregatedStatement,
                        RetailStatementTable::eInvoiceAggregatedStatementNumberSequenceId(aggregatedStatement.StoreId));

                    // Creates EInvoice for sales
                    boolean eInvoiceIsCreated = this.createEInvoice(eInvoicePost);

                    // Creates EInvoice for returns
                    eInvoicePost.parmIsReturn(true);
                    eInvoiceIsCreated = this.createEInvoice(eInvoicePost) || eInvoiceIsCreated;

                    if (eInvoiceIsCreated)
                    {
                        info(strfmt("@SYS38975", tablePName(EInvoiceJour_MX)));
                        isPosted = true;
                    }
                    else
                    {
                        error("@SYS63286");
                    }
                }

                ttscommit;
            }
            catch
            {
                isPosted = false;
            }

            if (!isPosted)
            {
                error("@SYS63286");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAggregatedStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates aggregated statement.
    /// </summary>
    /// <param name = "_dataContract">Retail EInvoice CFDI data contract.</param>
    /// <returns>The list of created statement ids.</returns>
    private TmpRecIdFilter createAggregatedStatement(RetailEInvoicePostContract_MX _dataContract)
    {
        RetailStoreId storeId;
        RetailEInvoiceAggregatedStatement_MX aggregatedStatement;
        RetailEInvoiceAggregatedStatementRelation_MX aggregatedStatementRelation;
        RetailStatementJour statementJour;
        TmpRecIdFilter filter;

        RetailEInvoicePeriodDatesCalculator_MX periodDatesCalculator = RetailEInvoicePeriodDatesCalculator_MX::calculate(_dataContract.parmAggregationPeriod(), _dataContract.parmAggregationPeriodStart());

        utcdatetime invoiceDateTime = _dataContract.parmInvoiceDateTime() ? _dataContract.parmInvoiceDateTime() : DateTimeUtil::newDateTime(periodDatesCalculator.getPeriodEnd(), 0);

        if (!this.validateInvoiceDateTime(invoiceDateTime))
        {
            return null;
        }

        QueryRun qr = new QueryRun(
            this.createAggregatedStatementQuery(
                _dataContract.getQuery(),
                periodDatesCalculator.getPeriodStart(),
                periodDatesCalculator.getPeriodEnd()));

        while (qr.next())
        {
            statementJour = qr.get(tableNum(RetailStatementJour));

            RetailEInvoicePostService_MX::calcSalesTransAmountExclPrep(statementJour);

            if (storeId != statementJour.storeId)
            {
                storeId = statementJour.storeId;

                aggregatedStatement.AggregatedStatementId = NumberSeq::newGetNumFromId(RetailStatementTable::eInvoiceAggregatedStatementNumberSequenceId(storeId)).num();
                aggregatedStatement.StoreId = storeId;
                aggregatedStatement.AggregationPeriod = _dataContract.parmAggregationPeriod();
                aggregatedStatement.AggregationPeriodStart = periodDatesCalculator.getPeriodStart();
                aggregatedStatement.AggregationPeriodEnd = periodDatesCalculator.getPeriodEnd();
                aggregatedStatement.PostedDate = periodDatesCalculator.getPeriodEnd();
                aggregatedStatement.PostedDateTime = invoiceDateTime;

                aggregatedStatement.insert();

                filter.RefRecId = aggregatedStatement.RecId;
                filter.insert();
            }

            aggregatedStatementRelation.AggregatedStatementId = aggregatedStatement.AggregatedStatementId;
            aggregatedStatementRelation.StatementId = statementJour.statementId;
            aggregatedStatementRelation.insert();
        }

        return filter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postEInvoiceStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts statement as electronic invoice.
    /// </summary>
    /// <param name = "_dataContract">Retail EInvoice CFDI data contract.</param>
    private void postEInvoiceStatement(RetailEInvoicePostContract_MX _dataContract)
    {
        using(var telemetry = RetailInstrumentationSegment::construct(classId2Name(ClassIdGet(this)), funcName()))
        {
            boolean isPosted;

            QueryRun qr = new QueryRun(this.createStatementQuery(_dataContract.getQuery(), _dataContract.parmStatementId()));
            while (qr.next())
            {
                RetailStatementJour statementJour = qr.get(tableNum(RetailStatementJour));
                info("@RET3230" + ' ' + statementJour.statementId);

                boolean eInvoiceIsCreated;

                utcdatetime invoiceDateTime = _dataContract.parmInvoiceDateTime() ? _dataContract.parmInvoiceDateTime() : statementJour.postedDateTime;

                if (this.validateInvoiceDateTime(invoiceDateTime))
                {
                    try
                    {
                        ttsBegin;
                        RetailEInvoicePostService_MX::calcSalesTransAmountExclPrep(statementJour);

                        RetailEInvoicePost_MX eInvoicePost = EInvoicePost_MX::construct(statementJour, RetailStatementTable::numberSequenceId(statementJour.storeId));
                        eInvoicePost.parmEInvoiceDateTime(invoiceDateTime);

                        // Creates EInvoice for sales
                        eInvoiceIsCreated = this.createEInvoice(eInvoicePost);

                        // Creates EInvoice for returns
                        eInvoicePost.parmIsReturn(true);
                        eInvoiceIsCreated = this.createEInvoice(eInvoicePost) || eInvoiceIsCreated;

                        if (!eInvoiceIsCreated || !this.checkDuplicates(statementJour))
                        {
                            throw error("@SYS63286");
                        }

                        isPosted = true;

                        ttsCommit;
                    }
                    catch
                    {
                        eInvoiceIsCreated = false;
                    }
                }

                if (eInvoiceIsCreated)
                {
                    info(strfmt("@SYS38975", tablePName(EInvoiceJour_MX)));
                }
            }

            if (!isPosted)
            {
                error("@SYS63286");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStatementQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query for statement.
    /// </summary>
    /// <param name = "_contractQuery">The contract query.</param>
    /// <param name = "_statementId">The statement id.</param>
    /// <returns>The query.</returns>
    private Query createStatementQuery(Query _contractQuery, RetailStatementId _statementId)
    {
        Query query = new Query(_contractQuery);

        if (_statementId)
        {
            SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(RetailStatementJour)), fieldnum(RetailStatementJour, statementId))
                .value(queryValue(_statementId));
        }

        return Query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAggregatedStatementQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query for aggregated statement.
    /// </summary>
    /// <param name = "_contractQuery">The contract query.</param>
    /// <param name = "_periodStart">The period start.</param>
    /// <param name = "_periodEnd">The period end.</param>
    /// <returns>The query.</returns>
    private Query createAggregatedStatementQuery(Query _contractQuery, PeriodStart _periodStart, PeriodEnd _periodEnd)
    {
        Query query = new Query(_contractQuery);

        if (_periodStart && _periodEnd)
        {
            SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(RetailStatementJour)), fieldnum(RetailStatementJour, PostedDate))
                .value(queryRange(_periodStart, _periodEnd));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates invoice date time.
    /// </summary>
    /// <param name = "_invoiceDateTime">The invoice date time.</param>
    /// <returns>true if invoice date time is valid; otherwise, false.</returns>
    private boolean validateInvoiceDateTime(utcdatetime _invoiceDateTime)
    {
        if (_invoiceDateTime < DateTimeUtil::addHours(DateTimeUtil::utcNow(), -72))
        {
            return checkFailed("@SYS4081684");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEInvoiceTimezone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the timezone applicable for the electronic invoice record.
    /// </summary>
    /// <param name="_statementJour">
    /// The statement journal.
    /// </param>
    /// <returns>The timeZone.</returns>
    internal static Timezone getEInvoiceTimezone(RetailStatementJour _statementJour)
    {
        RetailStoreTable storeTable = RetailStoreTable::find(_statementJour.StoreId);
        return storeTable.ChannelTimeZone ? storeTable.ChannelTimeZone : DateTimeUtil::getCompanyTimeZone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSalesTransAmountExclPrep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates statement and transaction amounts.
    /// </summary>
    /// <param name="_statementJour">
    /// The statement journal.
    /// </param>
    public static void calcSalesTransAmountExclPrep(RetailStatementJour _statementJour)
    {
        ttsBegin;

        RetailStatementJourExt statementJourExt = RetailStatementJourExt::find(_statementJour.statementId, true);
        statementJourExt.clearAmounts();

        Query query = RetailEInvoicePost_MX::buildStatementTransQuery(_statementJour);

        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(RetailTransSalesTransAmountExclPrepView));

        qbds.addSelectionField(fieldNum(RetailTransSalesTransAmountExclPrepView, netAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(RetailTransSalesTransAmountExclPrepView, taxAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(RetailTransSalesTransAmountExclPrepView, discAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(RetailTransSalesTransAmountExclPrepView, discAmountWithoutTax), SelectionField::Sum);

        QueryRun qr = new QueryRun(query);
        while (qr.next())
        {
            RetailTransSalesTransAmountExclPrepView transactionSalesTrans = qr.get(tableNum(RetailTransSalesTransAmountExclPrepView));
            RetailTransactionTableExt transactionTableExt = RetailTransactionTableExt::find(transactionSalesTrans.transactionId, transactionSalesTrans.store, transactionSalesTrans.terminal, true);

            transactionTableExt.Channel = transactionSalesTrans.Channel;
            transactionTableExt.Store = transactionSalesTrans.store;
            transactionTableExt.Terminal = transactionSalesTrans.terminal;
            transactionTableExt.TransactionId = transactionSalesTrans.TransactionId;
            transactionTableExt.NetAmountExclPrepayment = transactionSalesTrans.NetAmount;
            transactionTableExt.TaxAmountExclPrepayment = transactionSalesTrans.TaxAmount;
            transactionTableExt.DiscAmountExclPrepayment = transactionSalesTrans.DiscAmount;
            transactionTableExt.DiscAmountWithoutTaxExclPrepayment = transactionSalesTrans.DiscAmountWithoutTax;

            transactionTableExt.write();

            if (RetailEInvoicePostService_MX::isSalesTransaction(transactionSalesTrans))
            {
                statementJourExt.NetAmountExclPrepayment += transactionTableExt.NetAmountExclPrepayment;
                statementJourExt.TaxAmountExclPrepayment += transactionTableExt.TaxAmountExclPrepayment;
                statementJourExt.DiscAmountExclPrepayment += transactionTableExt.DiscAmountExclPrepayment;
                statementJourExt.DiscAmountWithoutTaxExclPrepayment += transactionTableExt.DiscAmountWithoutTaxExclPrepayment;
            }
            else
            {
                statementJourExt.ReturnNetAmountExclPrepayment += transactionTableExt.NetAmountExclPrepayment;
                statementJourExt.ReturnTaxAmountExclPrepayment += transactionTableExt.TaxAmountExclPrepayment;
                statementJourExt.ReturnDiscAmountExclPrepayment += transactionTableExt.DiscAmountExclPrepayment;
                statementJourExt.ReturnDiscAmountWithoutTaxExclPrepayment += transactionTableExt.DiscAmountWithoutTaxExclPrepayment;
            }
        }

        statementJourExt.initFromStatementJour(_statementJour);
        statementJourExt.write();

        RetailEInvoicePostService_MX::adjustDiscount(_statementJour);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if transaction is sales transaction.
    /// </summary>
    /// <param name = "_transactionSalesTrans">The transaction record.</param>
    /// <returns>True if transaction is sales transaction; otherwise, false.</returns>
    private static boolean isSalesTransaction(RetailTransSalesTransAmountExclPrepView _transactionSalesTrans)
    {
        if (_transactionSalesTrans.NetAmount < 0)
        {
            return true;
        }

        if (_transactionSalesTrans.NetAmount == 0)
        {
            return _transactionSalesTrans.DiscAmount >= 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the discount.
    /// </summary>
    /// <param name = "_statementJour">The statement journal.</param>
    private static void adjustDiscount(RetailStatementJour _statementJour)
    {
        if (!RetailStoreTable::find(_statementJour.storeId).PriceIncludesSalesTax)
        {
            return;
        }

        using (var logger = RetailInstrumentationSegment::construct(literalStr("@RetailEInvoiceCFDI:DiscountWithoutTaxAdjustingFeatureLabel"), funcName()))
        {
            RetailDiscountWithoutTaxAdjuster_MX::construct(_statementJour).adjust();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>