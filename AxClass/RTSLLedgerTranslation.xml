<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RtslLedgerTranslation</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RtslLedgerTranslation extends RTSLTranslation
{
    RTSLLedgerTransRule     ledgerTransRule;
    TmpRTSLLedgerTrans      tmpLedgerTrans;
    AmountMST               totalMSTDisbalance, totalMSTDiff;

    NumberSeq               voucherNumberSeq;
    Voucher                 voucher;

    boolean                 validate;
    boolean                 newVoucher;

    int                     voucherTransCount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addMainAccountNumRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds range by LedgerDimensionId to data source from <c>MainAccountLedgerDimensionView</c>.
    /// </summary>
    /// <param name="_ds">
    ///     Data source to add.
    /// </param>
    /// <param name="_field">
    ///     Filter field Id.
    /// </param>
    /// <param name="_range">
    ///     Filter range value.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void addMainAccountNumRange(QueryBuildDataSource _ds, FieldId _field, str _range)
    {
        QueryBuildDataSource mainAccount_ds;

        if (_range)
        {
            mainAccount_ds = _ds.addDataSource(tableNum(MainAccountLedgerDimensionView));
            mainAccount_ds.joinMode(JoinMode::ExistsJoin);
            mainAccount_ds.addLink(_field, fieldNum(MainAccountLedgerDimensionView, LedgerDimensionId));
            mainAccount_ds.addRange(fieldNum(MainAccountLedgerDimensionView, MainAccount)).value(_range);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyRuleRangesToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Applies ranges to query.
    /// </summary>
    /// <returns>
    ///     Query to apply.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query applyRuleRangesToQuery()
    {
        Query                   localQuery = new Query(query.pack());
        QueryBuildDataSource    accountEntry_ds = localQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry));
        QueryBuildDataSource    offsetAccountEntry_ds;
        QueryBuildDataSource    offsetEntry_W_ds;
        QueryBuildDataSource    entry_W_ds;

        this.addMainAccountNumRange(accountEntry_ds,
                                    fieldNum(GeneralJournalAccountEntry, LedgerDimension),
                                    ledgerTransRule.mainAccountNum());

        findOrCreateRange_W(accountEntry_ds,
                            fieldNum(GeneralJournalAccountEntry, PostingType),
                            ledgerTransRule.Posting ? queryValue(ledgerTransRule.Posting) : '');

        offsetAccountEntry_ds = localQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry), 2);
        offsetAccountEntry_ds.enabled(ledgerTransRule.DefaultLedgerDimensionOffset ||  ledgerTransRule.PostingOffset);

        offsetEntry_W_ds = localQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry_W), 2);
        offsetEntry_W_ds.enabled(offsetAccountEntry_ds.enabled());

        if (offsetAccountEntry_ds.enabled())
        {
            offsetAccountEntry_ds = localQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry), 2);
            offsetAccountEntry_ds.enabled(true);
            entry_W_ds = localQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry_W));
            entry_W_ds.joinMode(JoinMode::InnerJoin);

            this.addMainAccountNumRange(offsetAccountEntry_ds,
                                        fieldNum(GeneralJournalAccountEntry, LedgerDimension),
                                        ledgerTransRule.mainAccountNumOffset());

            findOrCreateRange_W(offsetAccountEntry_ds,
                                fieldNum(GeneralJournalAccountEntry, PostingType),
                                ledgerTransRule.PostingOffset ? queryValue(ledgerTransRule.PostingOffset) : '');
        }

        findOrCreateRange_W(accountEntry_ds,
                            fieldNum(GeneralJournalAccountEntry, IsCredit),
                            ledgerTransRule.Crediting != RTSLNoneNoYes::None ? queryValue(ledgerTransRule.Crediting) : '');

        findOrCreateRange_W(localQuery.dataSourceTable(tableNum(GeneralJournalEntry)),
                            fieldNum(GeneralJournalEntry, PostingLayer),
                            queryValue(ledgerTransRule.OperationTax));

        findOrCreateRange_W(accountEntry_ds,
                            fieldNum(GeneralJournalAccountEntry, IsCorrection),
                            ledgerTransRule.Correct != RTSLNoneNoYes::None ? queryValue(ledgerTransRule.Correct) : '' );
        return localQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
        protected void buildQuery()
    {
        ;
        query = new Query(queryStr(RTSLLedgerTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>consistencyCheckClassName</Name>
				<Source><![CDATA[
        protected str consistencyCheckClassName()
    {
        return classStr(RTSLLedgerConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDiffErrorTrans</Name>
				<Source><![CDATA[
        private void createDiffErrorTrans(TmpRTSLLedgerTrans    _tmpLedgerTrans,
                                      Voucher               _voucher,
                                      TransDate             _transDate,
                                      LedgerTransType       _transType,
                                      CurrentOperationsTax  _operationsTax,
                                      AmountMST             _amountMST,
                                      AmountMSTSecondary    _amountMSTSecondary)
    {
        SysInfoLogStr txt;

        totalMSTDiff  += abs(_amountMST);

        txt = strFmt("@GLS103356",
                     _amountMST, ruleGroup.foreignCurrencyCode(),
                     _amountMSTSecondary, ruleGroup.foreignSecondaryCurrencyCode());

        _tmpLedgerTrans.clear();

        if (ruleGroup.LedgerDiffErrorLevel == RTSLLedgerErrorLevel::Error)
        {
            exportErrorCount++;
            exportedOk = false;
            _tmpLedgerTrans.ErrorStatus = NoYes::Yes;

            error(txt);

            if (stopOnFirstError)
                throw Exception::Error;
        }
        else
        {
            warning(txt);
            exportTransCount++;
        }

        _tmpLedgerTrans.Voucher             = _voucher;
        _tmpLedgerTrans.TransDate           = _transDate;
        _tmpLedgerTrans.TransType           = _transType;
        _tmpLedgerTrans.OperationsTax       = _operationsTax;

        _tmpLedgerTrans.LedgerDimension     = ruleGroup.DiffLedgerDimension;
        _tmpLedgerTrans.CurrencyCode        = ruleGroup.foreignCurrencyCode();
        _tmpLedgerTrans.AmountCur           = 0;
        _tmpLedgerTrans.AmountMST           = _amountMST;
        _tmpLedgerTrans.AmountMSTSecond     = _amountMSTSecondary;
        _tmpLedgerTrans.Posting             = LedgerPostingType::RTSLTranslationDifference;
        _tmpLedgerTrans.GeneralJournalEntry = 0;
        _tmpLedgerTrans.BondBatchTrans      = 0;

        _tmpLedgerTrans.AccountType         = RTSLLedgerAccountStatus::TransDiff;
        _tmpLedgerTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDisbalanceTrans</Name>
				<Source><![CDATA[
        private void createDisbalanceTrans(TmpRTSLLedgerTrans _tmpLedgerTrans)
    {
        SysInfoLogStr txt;

        totalMSTDisbalance  += abs(_tmpLedgerTrans.AmountMST);

        txt = strFmt("@GLS103357", _tmpLedgerTrans.AmountCur, _tmpLedgerTrans.CurrencyCode);
        if (ruleGroup.LedgerDisbalanceErrorLevel == RTSLLedgerErrorLevel::Error)
        {
            _tmpLedgerTrans.ErrorStatus = NoYes::Yes;
            exportErrorCount++;
            exportedOk = false;

            error(txt);

            if (stopOnFirstError)
                throw Exception::Error;
        }
        else
        {
            warning(txt);
            exportTransCount++;
        }

        _tmpLedgerTrans.LedgerDimension   = ruleGroup.DisbalanceLedgerDimension;
        _tmpLedgerTrans.AmountCur         = -_tmpLedgerTrans.AmountCur;
        _tmpLedgerTrans.AmountMST         = -_tmpLedgerTrans.AmountMST;
        _tmpLedgerTrans.AmountMSTSecond   = -_tmpLedgerTrans.AmountMSTSecond;
        _tmpLedgerTrans.Crediting         = ! _tmpLedgerTrans.Crediting;

        _tmpLedgerTrans.AccountType       = RTSLLedgerAccountStatus::Disbalance;
        _tmpLedgerTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucher</Name>
				<Source><![CDATA[
        private LedgerVoucher createVoucher(LedgerVoucher         _ledgerVoucher,
                                        Voucher               _sourceVoucher,
                                        TransDate             _sourceTransDate,
                                        LedgerTransType       _transType,
                                        CurrentOperationsTax  _operationsTax)
    {
        LedgerVoucher       ledgerVoucher = _ledgerVoucher;
        LedgerVoucherObject ledgerVoucherObject;

        if (ruleGroup.LedgerUseVoucherSeries)
        {
            if (! voucherNumberSeq)
            {
                voucherNumberSeq = NumberSeq::newGetVoucherFromCode(ruleGroup.LedgerVoucherSeries, NumberSeqScopeFactory::createDefaultScope(), false);
            }

            voucher = voucherNumberSeq.voucher();
        }
        else
        {
            voucher = _sourceVoucher;
        }

        if (! ledgerVoucher)
        {
            ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail,
                                                         SysModule::None,
                                                         ruleGroup.LedgerVoucherSeries);
            voucherTransCount = 0;
        }

        ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucher,
                                                              _sourceTransDate,
                                                              SysModule::None,
                                                              _transType,
                                                              NoYes::No,
                                                              _operationsTax);

        ledgerVoucherObject.parmVoucherCheck(true);
        ledgerVoucherObject.parmDocument(dateNull(), '');

        ledgerVoucher.addVoucher(ledgerVoucherObject);

        ledgerVoucher.parmVoucherSeriesCode(ruleGroup.LedgerVoucherSeries);

        newVoucher = true;

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucherLinks</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates ledger transslation links for general journal entries in given voucher.
    /// </summary>
    /// <param name="_voucher">
    ///   Voucher to get general journal entries.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createVoucherLinks(LedgerVoucher _voucher)
    {
        RecordInsertList        insertList;
        LedgerVoucherList       list        = _voucher.getInternalCollection();
        boolean                 ok          = list.first();
        RTSLGeneralJournalEntry entryLink;

        changecompany(ruleGroup.DataAreaId)
        {
            insertList  = new RecordInsertList(tableNum(RTSLGeneralJournalEntry));
            while (ok)
            {
                if (list.item().parmGeneralJournalEntryRecId())
                {
                    entryLink.GeneralJournalEntry   = list.item().parmGeneralJournalEntryRecId();
                    entryLink.rtslSessionTrans      = sessionTransId;
                    insertList.add(entryLink);
                }
                ok = list.next();
            }

            insertList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRangeFieldId</Name>
				<Source><![CDATA[
        protected FieldId defaultRangeFieldId()
    {
        return fieldNum(GeneralJournalEntry, AccountingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSession</Name>
				<Source><![CDATA[
        public void deleteSession(RTSLSessionTransId _sessionTransId)
    {
        GeneralJournalEntry                     entry;
        GeneralJournalAccountEntry              accountEntry;
        RTSLGeneralJournalEntry                 entryLink;
        GeneralJournalAccountEntry_W            accountEntryW;
        SubledgerVoucherGeneralJournalEntry     vouchers;
        LedgerEntry                             ledgerEntry;
        DimensionFocusUnprocessedTransactions   dimensionFocusUnprocessedTransactions;
        RTSLSessionTrans    delSessionTrans;
        CompanyId           fromCompanyId   = curext();

        ttsbegin;

        delSessionTrans = RTSLSessionTrans::find(_sessionTransId, true);

        changecompany(toCompanyId)
        {
            while select forupdate crossCompany entry
                exists join entryLink
                    where entryLink.GeneralJournalEntry == entry.RecId
                       && entryLink.DataAreaId == fromCompanyId
                       && entryLink.rtslSessionTrans == _sessionTransId
            {
                delete_from dimensionFocusUnprocessedTransactions
                    where dimensionFocusUnprocessedTransactions.GeneralJournalEntry == entry.RecId;

                delete_from vouchers where vouchers.GeneralJournalEntry == entry.RecId;

                delete_from accountEntryW
                    exists join accountEntry
                        where accountEntry.GeneralJournalEntry          == entry.RecId &&
                              accountEntryW.GeneralJournalAccountEntry  == accountEntry.RecId;

                delete_from ledgerEntry
                    exists join accountEntry
                        where accountEntry.GeneralJournalEntry  == entry.RecId &&
                              accountEntry.RecId                == ledgerEntry.GeneralJournalAccountEntry;

                delete_from accountEntry
                    where accountEntry.GeneralJournalEntry == entry.RecId;

                entry.delete();
            }
        }

        delete_from entryLink
            where entryLink.rtslSessionTrans   == _sessionTransId;

        // Rebuild the balances of all the dimension sets.
        // The balances must be rebuilt because the dimension set balances update process does
        // not support updating balances when transactions are deleted.
        DimensionFocusInitializeBalance::processFullRebuild();

        this.progressNotify("@SYS15182");

        this.deleteSessionTransLog(delSessionTrans);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endVoucher</Name>
				<Source><![CDATA[
        private void endVoucher(LedgerVoucher _ledgerVoucher)
    {
        boolean ok;
        ;

        ok = _ledgerVoucher.end();

        if (ok)
        {
            this.createVoucherLinks(_ledgerVoucher);
        }

        importedOk = importedOk && ok;

        if (ok)
        {
            importTransCount += voucherTransCount;
        }
        else
        {
            // Abort transaction started by Ledger Voucher
            // being in "don't throw" state
            if (! this.mustStopOnError())
                ttsabort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixTransDifference</Name>
				<Source><![CDATA[
        // Post process corresponding transactions:
    // delete bond references on non-couple transactions
    // substract transaction difference
    private void fixTransDifference()
    {
        AmountMST           totalAmountMST = 0;
        AmountMSTSecondary  totalAmountMSTSecond = 0;
        TmpRTSLLedgerTrans  voucherLedgerTrans;
        ;

        tmpLedgerTrans = tmpTrans;
        voucherLedgerTrans.setTmpData(tmpLedgerTrans);

        while select tmpLedgerTrans
            group by Voucher,
                     TransDate,
                     TransType,
                     OperationsTax
        {
            setPrefix(strFmt("@SYS26801", tmpLedgerTrans.Voucher, tmpLedgerTrans.TransDate));

            while select voucherLedgerTrans
                where voucherLedgerTrans.Voucher       == tmpLedgerTrans.Voucher         &&
                      voucherLedgerTrans.TransDate     == tmpLedgerTrans.TransDate       &&
                      voucherLedgerTrans.OperationsTax == tmpLedgerTrans.OperationsTax   &&
                      voucherLedgerTrans.AccountType   == RTSLLedgerAccountStatus::Usual &&
                      voucherLedgerTrans.TransType     == tmpLedgerTrans.TransType  // RU-708-411-7GLy
            {
                // Fix disbalance
                if (voucherLedgerTrans.hasBond() && ! voucherLedgerTrans.findBond(tmpLedgerTrans))
                {
                     this.createDisbalanceTrans(voucherLedgerTrans);
                }
                else
                {
                    totalAmountMST       += voucherLedgerTrans.AmountMST;
                    totalAmountMSTSecond += voucherLedgerTrans.AmountMSTSecond;
                }
            }

            // Fix difference error
            if (totalAmountMST != 0 || totalAmountMSTSecond != 0)
            {
                select firstonly voucherLedgerTrans
                    where voucherLedgerTrans.Voucher == tmpLedgerTrans.Voucher;

                this.createDiffErrorTrans(voucherLedgerTrans,
                                          tmpLedgerTrans.Voucher,
                                          tmpLedgerTrans.TransDate,
                                          tmpLedgerTrans.TransType,
                                          tmpLedgerTrans.OperationsTax,
                                          -totalAmountMST,
                                          -totalAmountMSTSecond);
            }
            totalAmountMST       = 0;
            totalAmountMSTSecond = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>importTransactions</Name>
				<Source><![CDATA[
        protected void importTransactions()
    {
        LedgerVoucher                   ledgerVoucher;

        Voucher                         lastVoucher = '';
        TransDate                       lastTransDate = dateNull();
        CurrentOperationsTax            lastOperationsTax = CurrentOperationsTax::Current;
        TransTxt                        lastTransTxt = '';
        GeneralJournalEntryRecId        lastEntryId;
        LedgerBondBatchTransNum_RU      lastBondBatchTrans = 0;

        LedgerBondClient_RU             ledgerBondClient;

        boolean                         bondLastTrans = false;
        boolean                         logStarted    = false;

        tmpLedgerTrans = tmpTrans;

        // Import and bond transactions in one pass

        while select tmpLedgerTrans         // The order defines bond sequence
            order by Voucher,
                     TransDate,
                     TransType,
                     OperationsTax,
                     AccountType,           // Usial-Usial, Usial-Disbalance, ...-TransDiff
                     Txt,
                     GeneralJournalEntry desc,
                     BondBatchTrans desc    // 2-2, 1-1, 0-0, 0, 0, 0
        {
            setPrefix(strFmt("@GLS103426", lastVoucher));

            // Voucher is to change
            if (tmpLedgerTrans.Voucher          != lastVoucher          ||
                tmpLedgerTrans.TransDate        != lastTransDate        ||
                tmpLedgerTrans.OperationsTax    != lastOperationsTax)
            {
                lastVoucher         = tmpLedgerTrans.Voucher;
                lastTransDate       = tmpLedgerTrans.TransDate;
                lastOperationsTax   = tmpLedgerTrans.OperationsTax;
                lastEntryId         = tmpLedgerTrans.GeneralJournalEntry;

                bondLastTrans = false;
                logStarted    = false;

                ledgerVoucher = this.createVoucher(ledgerVoucher,
                                                   tmpLedgerTrans.Voucher,
                                                   tmpLedgerTrans.TransDate,
                                                   tmpLedgerTrans.TransType,
                                                   tmpLedgerTrans.OperationsTax);

                ledgerBondClient = ledgerVoucher.findLedgerVoucherObject(voucher, tmpLedgerTrans.TransDate).ledgerBondClient_RU();

                if (ledgerBondClient)
                {
                    ledgerBondClient.addNewLogObject();
                }
            }

            // Ledger voucher trans is to change
            if (tmpLedgerTrans.Txt != lastTransTxt ||
                newVoucher)
            {
                lastTransTxt = tmpLedgerTrans.Txt;
                newVoucher = false;
            }

            // New corresponding pair of transactions
            if (! logStarted               &&
                ledgerBondClient           &&
                tmpLedgerTrans.BondBatchTrans)
            {
                ledgerBondClient.addNewLogObject();
                logStarted = true;
            }

            this.newTrans(ledgerVoucher,
                          voucher,
                          tmpLedgerTrans.Txt,
                          tmpLedgerTrans.Posting,
                          tmpLedgerTrans.LedgerDimension,
                          tmpLedgerTrans.CurrencyCode,
                          tmpLedgerTrans.AccountType == RTSLLedgerAccountStatus::TransDiff ? 0 : tmpLedgerTrans.AmountCur,
                          tmpLedgerTrans.AmountMST,
                          tmpLedgerTrans.AmountMSTSecond,
                          tmpLedgerTrans.AccountType == RTSLLedgerAccountStatus::TransDiff,
                          tmpLedgerTrans.Correct);

            // Bond new pair of transactions
            if (bondLastTrans                                       &&
                logStarted                                          &&
                tmpLedgerTrans.GeneralJournalEntry  == lastEntryId  &&
                tmpLedgerTrans.BondBatchTrans       == lastBondBatchTrans)
            {
                ledgerBondClient.bondLastVRef2CurrentLog();
                ledgerBondClient.removeCurrentLogObject();
                bondLastTrans = false;
                logStarted    = false;
            }
            else
            {
                if (! bondLastTrans &&
                    logStarted)
                {
                    lastBondBatchTrans  = tmpLedgerTrans.BondBatchTrans;
                    lastEntryId         = tmpLedgerTrans.GeneralJournalEntry;
                    bondLastTrans       = true;
                }
                else
                {
                    if (logStarted)
                    {
                        ledgerBondClient.removeCurrentLogObject();
                        logStarted    = false;
                    }
                }
            }

            // Final correcting transactions are to be bonded with the whole voucher
            if (ledgerBondClient &&
                ! logStarted     &&
                tmpLedgerTrans.AccountType == RTSLLedgerAccountStatus::TransDiff)
            {
                ledgerBondClient.bondLastVRef2CurrentLog();
            }

            this.progressNotify();
            voucherTransCount++;
        }

        if (ledgerVoucher)
        {
            this.endVoucher(ledgerVoucher);
            ledgerVoucher = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransactionConverter</Name>
				<Source><![CDATA[
        protected void initTransactionConverter()
    {
        convert = new RTSLLedgerConvert(this);
        convert.parmValidate(! checkedOk);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTrans</Name>
				<Source><![CDATA[
        private void newTrans(LedgerVoucher             _ledgerVoucher,
                          Voucher                   _voucher,
                          TransTxt                  _transTxt,
                          LedgerPostingType         _postingType,
                          LedgerDimensionAccount    _ledgerDimension,
                          CurrencyCode              _currencyCode,
                          AmountCur                 _amountCur,
                          AmountMST                 _amountMST,
                          AmountMSTSecondary        _amountMSTSecondary,
                          boolean                   _roundingTransaction,
                          NoYes                     _correct)
    {
        LedgerVoucherObject         ledgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject(_voucher);
        LedgerVoucherTransObject    ledgerTransObject;

        ledgerTransObject = LedgerVoucherTransObject::newBasicDefault(ledgerVoucherObject,
                                                                  _postingType,
                                                                  _ledgerDimension,
                                                                  _currencyCode,
                                                                  _amountCur,
                                                                  _amountMST,
                                                                  _amountMSTSecondary);

        ledgerTransObject.parmTransTxt(_transTxt);
        ledgerTransObject.parmThisIsARoundingTrans(_roundingTransaction);
        ledgerTransObject.parmCorrect(_correct);

        if (! _ledgerVoucher.addTrans(ledgerTransObject))
        {
            importErrorCount ++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processing the rule.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void processRule()
    {
        GeneralJournalEntry         entry;
        GeneralJournalAccountEntry  accountEntry;
        GeneralJournalAccountEntry_W accountEntryW;
        QueryRun                    queryRun;
        Query                       localQuery;

        setPrefix(strFmt("@GLS103427",
                         ledgerTransRule.toMainAccountNum(),
                         ledgerTransRule.mainAccountNum(),
                         ledgerTransRule.mainAccountNumOffset()));

        localQuery = this.applyRuleRangesToQuery();
        queryRun = new QueryRun(localQuery);
        while (queryRun.next())
        {
            entry         = queryRun.get(tableNum(GeneralJournalEntry));
            accountEntry  = queryRun.get(tableNum(GeneralJournalAccountEntry));
            accountEntryW = queryRun.get(tableNum(GeneralJournalAccountEntry_W)) as GeneralJournalAccountEntry_W;

            tmpLedgerTrans.clear();
            tmpLedgerTrans.ToCompanyId = this.toCompanyId();
            tmpLedgerTrans.initFromGeneralJournalAccountEntry(accountEntry, accountEntryW, entry);
            tmpTrans = tmpLedgerTrans;
            this.processTransaction(tmpTrans, ledgerTransRule);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRules</Name>
				<Source><![CDATA[
        public void processRules()
    {
        totalMSTDisbalance = 0;
        totalMSTDiff       = 0;

        while select ledgerTransRule
            order by Priority
            where ledgerTransRule.RuleGroupId == ruleGroupId
        {
            this.processRule();
            this.progressNotify(strFmt("@GLS103428", ledgerTransRule.toMainAccountNum()));
        }

        this.fixTransDifference();
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressExportTotal</Name>
				<Source><![CDATA[
        public int progressExportTotal()
    {
        return any2int((select count(RecId) from rtslLedgerTransRule
                            where rtslLedgerTransRule.RuleGroupId == ruleGroupId).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the default range.
    /// </summary>
    /// <param name="_fromDate">
    ///     From date.
    /// </param>
    /// <param name="_toDate">
    ///     To date.
    /// </param>
    /// <returns>
    ///     true if setting is successeful.
    /// </returns>
    public boolean setDefaultRange(FromDate _fromDate, ToDate _toDate)
    {
        boolean ret;

        ret = super(_fromDate, _toDate);

        findOrCreateRange_W(
            query.dataSourceTable(tableNum(GeneralJournalEntry)),
            fieldNum(GeneralJournalEntry, Ledger),
            queryValue(Ledger::current()));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showExportResults</Name>
				<Source><![CDATA[
        protected void showExportResults()
    {
        if (totalMSTDisbalance != 0)
        {
            warning(strFmt("@GLS103446", totalMSTDisbalance, ruleGroup.foreignCurrencyCode()));
        }
        if (totalMSTDiff != 0)
        {
            warning(strFmt("@GLS103447", totalMSTDiff, ruleGroup.foreignCurrencyCode()));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
        protected TableId tableId()
    {
        return tableNum(GeneralJournalEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTransMenuItemStr</Name>
				<Source><![CDATA[
        protected IdentifierName tmpTransMenuItemStr()
    {
        return menuitemDisplayStr(TmpRTSLLedgerTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static ClassName description()
    {
        return "@GLS103429";
    }

]]></Source>
			</Method>
			<Method>
				<Name>sorting</Name>
				<Source><![CDATA[
        #define.Sorting(10)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Sorting sorting()
    {
        return #Sorting;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>