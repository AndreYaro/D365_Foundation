<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesBookAddListReportExcel_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// Class <c>SalesBookAddListReportExcel_RU</c> used for output to excel of sales book additional list.
/// </summary>
class SalesBookAddListReportExcel_RU extends SalesBookReportExcel_RU implements BatchRetryable
{
    SalesPurchBookRecId_RU correctedBookRecId;
    container              bookRecIdCon;
    container              correctedBookRecIdCon;
    TransDate              reportDate, startDate;
    container              bookRecIdConPurch;
    container              correctedPurchBookRecIdCon;
    int                    addListNumber;

    protected str incomingTotal = 'INCOMINGTOTAL';
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'Kniga_prodaj_dop';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + this.taxPeriodStr(fromDate, toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case incomingTotal:
                this.fillIncomingTotal();
                break;
            default:
                super(_bookmark);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillIncomingTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills incoming totals section with data
    /// </summary>
    protected void fillIncomingTotal()
    {
        this.insertValueToSection('IncomingAmountLiableToVAT20'    , header.TotalAmountExclVAT20Add);
        this.insertValueToSection('IncomingTaxAmountVAT20'         , header.TotalTaxAmountVAT20Add);
        this.insertValueToSection('IncomingAmountLiableToVAT18'    , header.TotalAmountExclVAT18Add);
        this.insertValueToSection('IncomingTaxAmountVAT18'         , header.TotalTaxAmountVAT18Add);
        this.insertValueToSection('IncomingAmountLiableToVAT10'    , header.TotalAmountExclVAT10Add);
        this.insertValueToSection('IncomingTaxAmountVAT10'         , header.TotalTaxAmountVAT10Add);
        this.insertValueToSection('IncomingAmountLiableToVAT0'     , header.TotalAmountExclVAT0Add);
        this.insertValueToSection('IncomingTaxAmountNotLiableToVAT', header.TotalAmountWOTaxAdd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header section with data
    /// </summary>
    protected void fillReportHeader()
    {
        CompanyInfo       companyInfo = CompanyInfo::find();

        this.insertValueToSection('CompanyName',  companyInfo.name());

        this.insertValueToSection('INNKPP', companyInfo.partyINNasOfDate_RU(toDate) +
                                       (companyInfo.partyKPPasOfDate_RU(toDate) ? ' / ' + companyInfo.partyKPPasOfDate_RU(toDate) : ''));

        this.insertValueToSection('TaxPeriod' , this.taxPeriodStr(fromDate, toDate));
        this.insertValueToSection('ReportDate', reportDate);
        this.insertValueToSection('AddListNumber', addListNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        super();

        this.addSection(incomingTotal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPrintIncomingTotals</Name>
				<Source><![CDATA[
    protected boolean mustPrintIncomingTotals()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, 
                startDate,
                reportDate,
                bookRecIdCon,
                bookRecIdConPurch,
                correctedBookRecIdCon,
                correctedPurchBookRecIdCon,
                addListNumber, 
                super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddListNumber</Name>
				<Source><![CDATA[
    public int parmAddListNumber(int _addListNumber = addListNumber)
    {
        addListNumber = _addListNumber;

        return addListNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBookRecIdCon</Name>
				<Source><![CDATA[
    public container parmBookRecIdCon(container _bookRecIdCon = bookRecIdCon)
    {
        bookRecIdCon = _bookRecIdCon;
        return bookRecIdCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBookRecIdConPurch</Name>
				<Source><![CDATA[
    public container parmBookRecIdConPurch(container _bookRecIdConPurch = bookRecIdConPurch)
    {
        bookRecIdConPurch = _bookRecIdConPurch;
        return bookRecIdConPurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectedBookRecId</Name>
				<Source><![CDATA[
    public SalesPurchBookRecId_RU parmCorrectedBookRecId(SalesPurchBookRecId_RU _correctedBookRecId = correctedBookRecId)
    {
        correctedBookRecId = _correctedBookRecId;
        return correctedBookRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectedBookRecIdCon</Name>
				<Source><![CDATA[
    public container parmCorrectedBookRecIdCon(container _correctedbookRecIdCon = correctedBookRecIdCon)
    {
        correctedBookRecIdCon = _correctedbookRecIdCon;
        return correctedbookRecIdCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectedPurchBookRecIdCon</Name>
				<Source><![CDATA[
    public container parmCorrectedPurchBookRecIdCon(container _correctedPurchbookRecIdCon = correctedPurchBookRecIdCon)
    {
        correctedPurchBookRecIdCon = _correctedPurchBookRecIdCon;
        return correctedPurchBookRecIdCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryRun</Name>
				<Source><![CDATA[
    public QueryRun parmQueryRun(QueryRun _queryRun = queryRun)
    {
        queryRun = _queryRun;
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportDate</Name>
				<Source><![CDATA[
    public TransDate parmReportDate(TransDate _reportDate = reportDate)
    {
        reportDate = _reportDate;
        return reportDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    public TransDate parmStartDate(TransDate _startDate = startDate)
    {
        startDate = _startDate;
        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportToXml</Name>
				<Source><![CDATA[
    public NoYes parmExportToXml(NoYes _exportToXml = exportToXml)
    {
        exportToXml = _exportToXml;
        return exportToXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDataAndExportToXml</Name>
				<Source><![CDATA[
    protected void prepareDataAndExportToXml()
    {
        LedgerVATDeclarationContract_RU     contract;
        LedgerVATDeclReportSalesBookAdd_RU  journalReport;

        contract = LedgerVATDeclarationContract_RU::construct();
        contract.parmIsCalledFromXMLExcelReport(true);
        contract.parmFromDate(fromDate);
        contract.parmToDate(toDate);
        contract.parmSalesPurchBookQueryRun(queryRun.pack());
        contract.parmGroupByFactures(groupByFactures);
        contract.parmGroupCorrect(groupCorrect);
        contract.parmStartDate(startDate);
        contract.parmReportDate(reportDate);

        contract.parmBookRecIdCon(bookRecIdCon);
        contract.parmBookRecIdConPurch(bookRecIdConPurch);
        contract.parmCorrectedBookRecIdCon(correctedBookRecIdCon);
        contract.parmCorrectedPurchBookRecIdCon(correctedPurchBookRecIdCon);
        contract.parmAddListNumber(addListNumber);

        journalReport = LedgerVATDeclReportSalesBookAdd_RU::construct();
        journalReport.setContract(contract.pack());
        journalReport.run();

        header  = journalReport.getHeader();
        line    = journalReport.getLine();

        ERModelDefinitionDatabaseContext dbParameter = new ERModelDefinitionDatabaseContext();
        dbParameter.addTemporaryTable(header);
        dbParameter.addTemporaryTable(line);

        ERmodelDefinitionInputParametersAction inputParameter = new ERmodelDefinitionInputParametersAction();
        inputParameter.addParameter(ERPath::combine("model", "ReportCaller"),
            classStr(SalesBookAddListReportExcel_RU));
        inputParameter.addParameter(ERPath::combine("model", "005_Period/Period010_DateFrom"), fromDate);
        inputParameter.addParameter(ERPath::combine("model", "005_Period/Period020_DateTo"), toDate);
        inputParameter.addParameter(ERPath::combine("model", "AdditionalSheetHeader/SorcePeriodStartDate"), fromDate);
        inputParameter.addParameter(ERPath::combine("model", "AdditionalSheetHeader/SorcePeriodEndDate"), toDate);

        if (exportToXml)
        {
            formatMappingId = CustParameters::find().SalesBookAdditionalListFormatMappingID;

            ERObjectsFactory::createFormatMappingRunByFormatMappingId(formatMappingId)
                .withParameter(dbParameter)
                .withParameter(inputParameter)
                .withFileDestination(ERObjectsFactory::createFileDestinationBrowser())
                .run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printIncomingTotals</Name>
				<Source><![CDATA[
    protected void printIncomingTotals()
    {
        this.execute(incomingTotal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPeriodStr</Name>
				<Source><![CDATA[
    private TempStr taxPeriodStr(TaxPeriodDate _fromDate, TaxPeriodDate _toDate)
    {
        const int oneMonth = 1;
        const int quarter = 3;
        const int halfYear = 6;
        const int firstHalfYearStartMonth = 1;
        const int secondHalfYearStartMonth = 7;
        const str ru = 'ru';
        const str quarterStr = 'Квартал';
        const str halfYearStr = 'Полугодие';

        TempStr     taxPeriodStr;
        LanguageId  origLanguageId;

        if (year(_fromDate) == year(_toDate))
        {
            switch (mthofyr(_toDate) - mthofyr(_fromDate) + 1)
            {
                case oneMonth :
                    origLanguageId = infolog.language();
                    infolog.language(ru);
                    taxPeriodStr = strfmt("@SYS76498", mthname(mthofyr(_toDate)), year(_toDate));
                    infolog.language(origLanguageId);
                    break;

                case quarter  :
                    taxPeriodStr = strfmt("@SYS76498" + quarterStr, date2Qtr(_fromDate), '');
                    break;

                case halfYear :
                    switch (mthofyr(_fromDate))
                    {
                        case firstHalfYearStartMonth :
                            taxPeriodStr = strfmt("@SYS76498" + halfYearStr, 1, '');
                            break;
                        case secondHalfYearStartMonth :
                            taxPeriodStr = strfmt("@SYS76498" + halfYearStr, 2, '');
                            break;
                    }
                    break;
            }
        }

        return taxPeriodStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(SalesBookAdditionalList_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int         version = RunBase::getVersion(_packedClass);
        boolean     ret = true;
        container   packedSuper;

        switch (version)
        {
            case currentVersion :
                [   version, 
                    startDate,
                    reportDate,
                    bookRecIdCon,
                    bookRecIdConPurch,
                    correctedBookRecIdCon,
                    correctedPurchBookRecIdCon,
                    addListNumber, 
                    packedSuper] = _packedClass;
                
                ret = super(packedSuper);
                break;
            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesBookAddListReportExcel_RU construct()
    {
        return new SalesBookAddListReportExcel_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBookLastNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of purchase books to be corrected by additional list
    /// </summary>
    /// <param name="_salesBookRecId">
    /// Sales book this additional list belongs to
    /// </param>
    /// <param name="_groupByFactures">
    /// Determines whether result queryRun should be grouped by factures
    /// </param>
    /// <returns>
    /// Number of corrected sales books
    /// </returns>
    #VATTransitionPeriod_RU
    public static Counter getBookLastNum(RecId _salesBookRecId, boolean _groupByFactures)
    {
        Counter     lineCount;
        QueryRun    queryRun;
        boolean     isOldBook;
        ;
        queryRun = new QueryRun(SalesBookTable_RU::createQuery(_salesBookRecId));
        isOldBook = SalesBookTable_RU::find(_salesBookRecId).getToDate() < #BookCorrectionDate ? true : false;
        if (! isOldBook)
        {
            queryRun = SalesBookTable_RU::initQueryRunOnTmp(queryRun, _salesBookRecId, false);
        }

        SalesBookTable_RU::updateQuery(queryRun, _groupByFactures);
        while (queryRun.next())
        {
            lineCount++;
        }
        return lineCount;

    }

]]></Source>
			</Method>
			<Method>
				<Name>setExtQueryRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets extended query range on specified datasource.
    /// </summary>
    /// <param name="_queryBuildDataSource">
    /// <c>QueryBuildDataSource</c> to be updated.
    /// </param>
    public static void setExtQueryRange(QueryBuildDataSource    _queryBuildDataSource)
    {
        QueryBuildRange    queryRange;

        str salesTransTypeValue = 
        '('                 +
        '('                 +
            '(\%1.'         + fieldstr(SalesBookTrans_RU, TransType)                +
                '!='        + int2str(SalesPurchBookTransType_RU::CreditNote)       +
            ')'             +
            ' || (\%1.'      + fieldstr(SalesBookTrans_RU, RevisionType)             +
                '=='        + int2str(FactureRevisionType_RU::RevisionOriginal)     +
            ')'             +
            ' || (\%1.'      + fieldstr(SalesBookTrans_RU, RevisionType)             +
                '=='        + int2str(FactureRevisionType_RU::RevisionCorrSales)    +
            ')'             +
        ')'                 +
        ' && (\%1.'          + fieldstr(SalesBookTrans_RU, RevisionType)             +
            '!='            + int2str(FactureRevisionType_RU::RevisionCorrPurch)    +
        ') '                +
        ')';

        str purchTransTypeValue =
        '('                 +
        '('                 +
            '(\%1.'         + fieldstr(PurchBookTrans_RU, RevisionType)             +
                '=='        + int2str(FactureRevisionType_RU::RevisionCorrSales)    +
            ')'             +
        ')'                 +
        ')';

        switch (_queryBuildDataSource.table())
        {
            case tablenum(PurchBookTrans_RU) :
                queryRange = findOrCreateRange_W(_queryBuildDataSource, fieldnum(PurchBookTrans_RU, RevisionType));
                queryRange.value(strfmt(purchTransTypeValue,_queryBuildDataSource.name()));
                queryRange.status(RangeStatus::Hidden);
                break;

            case tablenum(SalesBookTrans_RU) :
                queryRange = findOrCreateRange_W(_queryBuildDataSource, fieldnum(SalesBookTrans_RU, RevisionType));
                queryRange.value(strfmt(salesTransTypeValue, _queryBuildDataSource.name()));
                queryRange.status(RangeStatus::Hidden);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExtQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets extended query ranges on specified <c>Query</c>
    /// </summary>
    /// <param name="_query">
    /// <c>Query</c> object to be updated.
    /// </param>
    public static void setExtQueryRanges(Query _query)
    {
        QueryBuildDataSource queryBuildDataSource;

        queryBuildDataSource = _query.dataSourceTable(tablenum(PurchBookTrans_RU));
        SalesBookAddListReportExcel_RU::setExtQueryRange(queryBuildDataSource);

        queryBuildDataSource = _query.dataSourceTable(tablenum(SalesBookTrans_RU));
        if (queryBuildDataSource)
        {
            SalesBookAddListReportExcel_RU::setExtQueryRange(queryBuildDataSource);
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>