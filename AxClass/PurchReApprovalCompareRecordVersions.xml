<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReApprovalCompareRecordVersions</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchReApprovalCompareRecordVersions</c> class is used to identify changes between two
/// records from the same table.
/// </summary>
/// <remarks>
/// The class is used by the <c>VersioningCompare</c> class which will compare two versions of a
/// document supporting the history pattern.The <c>PurchReApprovalCompareRecordVersions</c> class is
/// used when you set up purchase order re-approval policies and evaluating them.
/// </remarks>
class PurchReApprovalCompareRecordVersions extends VersioningCompareRecordVersions
{
    boolean runtime;
    Set includedFields;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getIncludeField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a map that indicates whether a field is included in the comparison.
    /// </summary>
    /// <returns>
    /// A <c>Map</c> that contains values that indicate whether the field is included in the comparison.
    /// </returns>
    public Map getIncludeField()
    {
        return includeField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeInComparison</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified field is included in the comparison.
    /// </summary>
    /// <param name="_sysDictField">
    /// The <c>SysDictField</c> object which specifies the field.
    /// </param>
    /// <returns>
    /// true if the field should be included in the comparison; otherwise, false.
    /// </returns>
    /// <remarks>
    /// All fields are included.
    /// </remarks>
    protected boolean includeInComparison(SysDictField _sysDictField)
    {
        // For runtime we do not use the cached list of fields
        if (runtime)
        {
            if (includedFields.in(PurchReApprovalPolicyRuleFields::valueStr(_sysDictField.tableid(), fieldId2Ext(_sysDictField.id(), max(1, _sysDictField.arrayIndex())))))
            {
                return true;
            }

            return false;
        }

        // Build up list of fields for the purchase order re-approval
        return super(_sysDictField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleAndAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a field is visible and editable.
    /// </summary>
    /// <param name="_sysDictField">
    /// A <c>SysDictField</c> instance for the field.
    /// </param>
    /// <returns>
    /// true if the field is visible and editable; otherwise, false.
    /// </returns>
    protected boolean isFieldVisibleAndAllowEdit(SysDictField _sysDictField)
    {
        // Do not look at security, only look at meta data for the field.
        return _sysDictField.aotVisible() && _sysDictField.aotAllowEdit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();

        // Do not use cache
        includeField = new Map(Types::String, Types::Enum);
        includedFields = new Set(Types::String);
        runtime = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packChangedFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container that contains the fields that are different in the two versions of the record.
    /// </summary>
    /// <param name="_changeType">
    /// A <c>VersionChangeType</c> enumeration value that specifies the <c>Modified</c>, <c>Added</c>,
    /// <c>Removed</c>, or <c>NoChange</c> value.
    /// </param>
    /// <param name="_origCommon">
    /// The original version of the record.
    /// </param>
    /// <param name="_newCommon">
    /// The modified version of the record.
    /// </param>
    /// <returns>
    /// A container that specifies the fields that have changed.
    /// </returns>
    /// <remarks>
    /// The container has a nested container for each field. This nested container holds the attribute, the
    /// old value and the new value. The nested container has a length of 3.
    /// </remarks>
    public container packChangedFields(VersioningChangeType _changeType, Common _origCommon, Common _newCommon)
    {
        container               changeList;

        Counter                 arrayIdx;

        DictFieldGroup          dictFieldGroup;
        SysDictField            sysDictField;
        DictTable               dictTable;
        DictTable               dictTableHistory;

        SetEnumerator           includedFieldEnumerator;
        RefTableId              refTableId;
        RefFieldId              refFieldId;

        if (runtime)
        {
            dictTable = new dictTable(tableId);
            dictTableHistory = this.getHistoryDictTable(_origCommon, _newCommon);

            if (dictTable
                && dictTableHistory)
            {
                includedFieldEnumerator = includedFields.getEnumerator();
                while (includedFieldEnumerator.moveNext())
                {
                    [refTableId, refFieldId] = PurchReApprovalPolicyRuleFields::valueSplit(includedFieldEnumerator.current());

                    if (VersioningPurchaseOrder::archiveTable2Table(tableId) == refTableId)
                    {
                        arrayIdx = fieldExt2Idx(refFieldId);

                        if (arrayIdx == 1)
                        {
                            sysDictField = new SysDictField(refTableId, refFieldId);
                        }
                        else
                        {
                            sysDictField = new SysDictField(refTableId, refFieldId, arrayIdx);
                        }

                        // Do field exists on the history table
                        if ((sysDictField
                                || !PurchReApprovalCheckIfRelatedFieldIsMappedFlight::instance().isEnabled())
                            && dictTable.fieldName2Id(sysDictField.name()) != 0
                            && dictTableHistory.fieldName2Id(sysDictField.name()) != 0)
                        {
                            changeList = this.addChangedField(_changeType, _origCommon, _newCommon, tableId2name(tableId), sysDictField, arrayIdx, changeList, dictFieldGroup);
                        }
                    }
                }
            }
        }
        else
        {
            changeList = super(_changeType, _origCommon, _newCommon);
        }

        return changeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludedFields</Name>
				<Source><![CDATA[
        public Set parmIncludedFields(Set _includedFields = includedFields)
    {
        includedFields = _includedFields;

        return includedFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRuntime</Name>
				<Source><![CDATA[
        public boolean parmRuntime(boolean _runtime = runtime)
    {
        runtime = _runtime;

        return runtime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userHasViewAccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the user has view access to the specified field.
    /// </summary>
    /// <param name="_sysDictField">
    /// The <c>SysDictField</c> object which specifies the field.
    /// </param>
    /// <returns>
    /// true if the user has view access to the field; otherwise, false.
    /// </returns>
    protected boolean userHasViewAccess(SysDictField _sysDictField)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PurchReApprovalCompareRecordVersions construct()
    {
        return new PurchReApprovalCompareRecordVersions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldsIncludedInCompare</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of fields that are included in the comparison.
    /// </summary>
    /// <param name="_tableId">
    /// A <c>TableId</c> value for which the fields are related.
    /// </param>
    /// <returns>
    /// A packed <c>Set</c> of the IDs of the extended fields.
    /// </returns>
    public static container fieldsIncludedInCompare(tableId _tableId)
    {
        PurchReApprovalCompareRecordVersions    versioningCompareRecordVersions;
        Common                                  emptyrecord;
        MapEnumerator                           fieldsEnumerator;
        TableId                                 tableId;
        FieldId                                 fieldId;
        int                                     fieldIndex;
        str                                     key;
        int                                     i;
        Set                                     includedFields = new Set(Types::Integer);

        versioningCompareRecordVersions = PurchReApprovalCompareRecordVersions::construct();
        versioningCompareRecordVersions.parmTableId(_tableId);
        versioningCompareRecordVersions.parmRuntime(false);

        // Build the IncludeField map without doing a field comparision.
        versioningCompareRecordVersions.packChangedFields(VersioningChangeType::None, emptyrecord, emptyrecord);

        fieldsEnumerator = versioningCompareRecordVersions.getIncludeField().getEnumerator();
        while (fieldsEnumerator.moveNext())
        {
            key = fieldsEnumerator.currentKey();

            // Is field included?
            if (fieldsEnumerator.currentValue())
            {
                i = strFind(key, '#', 1, strLen(key));
                tableId = str2int(subStr(key, 1, i-1));

                if (tableId == _tableId)
                {
                    key = strDel(key, 1, i);
                    i = strFind(key, '#', 1, strLen(key));

                    fieldId = str2int(subStr(key, 1, i-1));
                    fieldIndex = str2int(subStr(key, i+1, strLen(key) - i));
                    // Ensure that the extended field id is comparable with field id on a form control
                    includedFields.add(fieldId2Ext(fieldId, max(1, fieldIndex)));
                }
            }
        }

        return includedFields.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>PurchReApprovalCompareRecordVersions</c>class by
    /// using the table ID.
    /// </summary>
    /// <param name="_tableId">
    /// The <c>TableId</c> of the table.
    /// </param>
    /// <param name="_includedFields">
    /// A set of fields that should be compared.
    /// </param>
    /// <returns>
    /// An instance of the <c>PurchReApprovalCompareRecordVersions</c> class.
    /// </returns>
    public static PurchReApprovalCompareRecordVersions newTableId(tableId _tableId, Set _includedFields)
    {
        PurchReApprovalCompareRecordVersions versioningCompareRecordVersions;

        versioningCompareRecordVersions = PurchReApprovalCompareRecordVersions::construct();
        versioningCompareRecordVersions.parmTableId(_tableId);
        versioningCompareRecordVersions.parmRuntime(true);
        versioningCompareRecordVersions.parmIncludedFields(_includedFields);

        return versioningCompareRecordVersions;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>