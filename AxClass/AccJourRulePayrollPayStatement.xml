<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccJourRulePayrollPayStatement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AccJourRulePayrollPayStatement</c> class controls various posting attributes that
///    are used during the journalizing of a pay statement line.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_PayrollPayStatement), BusinessEvent_PayrollPayStatement::PayStatement, MonetaryAmount::PayrollCost),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_PayrollPayStatement), BusinessEvent_PayrollPayStatement::PayStatement, MonetaryAmount::PayrollLiability)
]
public class AccJourRulePayrollPayStatement extends AccountingJournalizingRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
		if (sourceDocumentLineItem is PayrollPayStatementEarningSourceDocLine &&
			ProjectAccountingDistribution::findByAccountingDistribution(this.parmAccountingdistribution().RecId).RecId)
		{
			return LedgerPostingType::ProjPayrollAllocation;
		}

		return LedgerPostingType::Payroll;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReclassifyDistributionAmounts</Name>
				<Source><![CDATA[
    public boolean parmReclassifyDistributionAmounts()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        SourceDocumentLineItemIPayroll iPayroll;
        DebitCredit side = DebitCredit::Credit;

        iPayroll = sourceDocumentLineItem as SourceDocumentLineItemIPayroll;
        if (iPayroll)
        {
            // Only benefit and tax deduction lines should be a Debit
            if (iPayroll.parmEarningCode() == 0 && iPayroll.parmIsEmployerLine() == NoYes::No)
            {
                side = DebitCredit::Debit;
            }
        }

        // Flip the side for negative amounts
        if (this.parmAccountingdistribution().TransactionCurrencyAmount < 0)
        {
            if (side == DebitCredit::Credit)
            {
                side = DebitCredit::Debit;
            }
            else
            {
                side = DebitCredit::Credit;
            }
        }

        return side;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>