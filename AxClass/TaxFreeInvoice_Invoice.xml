<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxFreeInvoice_Invoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class TaxFreeInvoice_Invoice extends TaxPost
{
    CustInvoiceCalcTax_Invoice  custInvoiceCalcTax;
    Common                      sourceRecord;
    MarkupTrans                 markupTrans;

    NoYes                       markupAdminister;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInitializationClass</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the an object of the initialization class.
    /// </summary>
    /// <returns>
    ///    An object of the initialization class.
    /// </returns>
    /// <remarks>
    ///    The initialization class is of a different type for each subclass.
    /// </remarks>
    protected Object getInitializationClass()
    {
        return custInvoiceCalcTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the original document ID.
    /// </summary>
    /// <returns>
    ///    The original document ID of the transaction header.
    /// </returns>
    /// <remarks>
    ///    The parent of tax lines sometimes changes during posting. This method will return the original
    ///    document ID.
    /// </remarks>
    protected RefRecId getOriginalHeadingRecId()
    {
        return origHeadingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the original heading line table ID.
    /// </summary>
    /// <returns>
    ///    The original heading table ID of the transaction line.
    /// </returns>
    /// <remarks>
    ///    The parent of tax lines sometimes changes during posting. This method will return the original
    ///    transaction line table ID.
    /// </remarks>
    protected RefTableId getOriginalHeadingTableId()
    {
        return origHeadingTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingRecId</Name>
				<Source><![CDATA[
    public RefRecId headingRecId()
    {
        RefRecId ret;

        if (post)
        {
            ret = this.getOriginalHeadingRecId();
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingTableId</Name>
				<Source><![CDATA[
    public RefTableId headingTableId()
    {
        RefTableId ret;

        if (post)
        {
            ret = this.getOriginalHeadingTableId();
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(NoYes              _post,
             Object                    _initializationClass,
             TmpTaxWorkTrans           _tmpTaxWorkTrans = null)
    {
        super();

        if(CustInvoiceBankExchangeRateEligibility_PL::isBankExchangeRateNotApplicableOnInvoice())
        {
            useTaxExchangeRate = false;
        }

        custInvoiceCalcTax = _initializationClass as CustInvoiceCalcTax_Invoice;
        if (custInvoiceCalcTax == null)
        {
            throw error("@SYS95118");
        }

        post                 = _post;
        taxWorkTrans         = _tmpTaxWorkTrans;

        taxModuleType        = TaxModuleType::FreeTxtInvoice;

        headingTableId       = custInvoiceCalcTax.tableId();
        headingRecId         = custInvoiceCalcTax.recID();
        origHeadingTableId   = custInvoiceCalcTax.custInvoiceTableTableID();
        origHeadingRecId     = custInvoiceCalcTax.custInvoiceTableRecID();

        if (!headingTableId || !headingRecId)
        {
            throw error("@SYS18447");
        }
        else
        {
            if (! this.checkParameters())
                throw error("@SYS18447");

            taxDate             = custInvoiceCalcTax.invoiceDate();
            sourceCurrencyCode  = custInvoiceCalcTax.currencyCode();
        }

        triangulation = custInvoiceCalcTax.triangulation(taxDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the record ID of the transaction line that is being posted.
    /// </summary>
    /// <returns>
    ///    The record ID of the transaction line to post.
    /// </returns>
    /// <remarks>
    ///    This method is overridden by derived classes.
    /// </remarks>
    public RecId sourceRecId()
    {
        if (markupAdminister)
            return markupTrans.RecId;
        else
            return custInvoiceCalcTax.transRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the table ID of the transaction to tax.
    /// </summary>
    /// <returns>
    ///    The table ID of the transaction to tax.
    /// </returns>
    /// <remarks>
    ///    This method is overridden by derived classes.
    /// </remarks>
    public TableId sourceTableId()
    {
        if (markupAdminister)
            return markupTrans.TableId;
        else
            return custInvoiceCalcTax.transTableId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxByMarkup</Name>
				<Source><![CDATA[
    protected void taxByMarkup()
    {
        NoYes   moreMarkup;
        Integer sign;

        moreMarkup  = true;
        while (moreMarkup)
        {
            markupTrans= custInvoiceCalcTax.nextMarkupLine();
            if (markupTrans)
            {
                markupAdminister= NoYes::Yes;

                // We only need the sign on the markup - not the amount itself
                if (custInvoiceCalcTax.markupAmount() < 0)
                    sign = -1;
                else
                    sign = 1;

                // for performance reasons the tax write code (first parameter
                // specified below) is handled after tax posting as a set based operation.
                custInvoiceCalcTax.setTaxMarkup(this.getTaxWriteCodeForMarkupTrans(), this.lineTaxAmount(sign));
                markupTrans.update();
            }
            else
            {
                markupAdminister= NoYes::No;
                moreMarkup  = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWriteCodeForMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value of type <c>TaxWriteCode</c> to be set on <c>TaxWriteCode</c> field of <c>MarkupTrans</c> table buffer.
    /// </summary>
    /// <returns>
    /// <c>TaxWriteCode</c> value.
    /// </returns>
    /// <remarks>
    /// For performance reasons an empty string is returned as tax write code and the actual tax write code is set after tax posting in a set based operation.
    /// </remarks>
    protected TaxWriteCode getTaxWriteCodeForMarkupTrans()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferSubLedgerToGeneralLedger</Name>
				<Source><![CDATA[
    public boolean transferSubLedgerToGeneralLedger()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update and post tax transaction for the invoice.
    /// </summary>
    /// <param name = "_ledgerPostingController">
    /// An instance of <c>LedgerPostingController</c> class.
    /// </param>
    /// <param name = "_companyToPost">
    /// Company to which the tax transaction should be posted.
    /// </param>
    /// <returns>
    /// Calculated tax amount.
    /// </returns>
    public TaxAmount updateAndPost(LedgerPostingController _ledgerPostingController, SelectableDataArea _companyToPost = curext())
    {

        this.initLedgerPosting(_ledgerPostingController);

        if (TaxParameters::find().TaxSpecifyLine)
        {
            ttsbegin;
            if (!skipTableMarkup)
            {
                custInvoiceCalcTax.initCursorMarkupHeader(headingTableId, headingRecId);
                this.taxByMarkup();
            }

            custInvoiceCalcTax.initCursor();

            boolean moreLines = true;

            while (moreLines)
            {
                sourceRecord= custInvoiceCalcTax.nextLine();
                if (sourceRecord)
                {
                    Integer sign;

                    if (custInvoiceCalcTax.transLineAmount() < 0 ||
                        custInvoiceCalcTax.transQty() < 0)
                        sign = -1;
                    else
                        sign = 1;

                    custInvoiceCalcTax.setTax(this.getTaxWriteCodeForCustInvoiceTrans(), this.lineTaxAmount(sign));

                    sourceRecord.update();

                    if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion()
                        && !skipLineMarkup)
                    {
                        custInvoiceCalcTax.initCursorMarkup(sourceRecord.TableId, sourceRecord.RecId);
                        this.taxByMarkup();
                    }
                }
                else
                    moreLines   = false;
            }
            ttscommit;
        }

        TaxAmount taxAmount;

        if (post)
        {
            this.saveAndPost(_ledgerPostingController, _companyToPost);
            taxAmount = Tax::taxTotalVoucherDate(voucher, taxDate);
        }
        else
        {
            taxAmount = this.totalTaxAmount();
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWriteCodeForCustInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value of type <c>TaxWriteCode</c> to be set on <c>TaxWriteCode</c> field of <c>CustInvoiceTrans</c> table buffer.
    /// </summary>
    /// <returns>
    /// <c>TaxWriteCode</c> value.
    /// </returns>
    /// <remarks>
    /// For performance reasons an empty string is returned as tax write code and the actual tax write code is set after tax posting in a set based operation.
    /// </remarks>
    protected TaxWriteCode getTaxWriteCodeForCustInvoiceTrans()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current transaction to post supports the <c>SubLedgerDistributions</c> or
    ///    <c>SubLedgerJournalLines</c> records. By default, this base implementation is that they do not
    ///    support them. As the individual transaction support the sub-ledger, they must override this method,
    ///    and return true.
    /// </summary>
    /// <returns>
    ///    true if the current transaction to post supports the <c>SubLedgerDistributions</c> or the
    ///    <c>SubLedgerJournalLines</c> records; otherwise, false.
    /// </returns>
    public boolean useSubLedgerJournalLines()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///    true if the <c>Tax</c> class should use the <c>TaxUncommitted</c> table; otherwise, false.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>