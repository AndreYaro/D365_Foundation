<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerSIEExportHelper_SE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>LedgerSIEExportHelper_SE</c> provides function for SIE GER export.
/// </summary>
public class LedgerSIEExportHelper_SE
{
    const str AppSuiteModuleName = 'ApplicationSuite';
    const str FoundationModelName = 'Foundation';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAppSuiteVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the product version of Application suite model.
    /// </summary>
    /// <returns>product version of Application suite model.</returns>
    public static str getAppSuiteVersion()
    {
        Microsoft.Dynamics.AX.Metadata.MetaModel.ModelInfo modelInfo;
        str60 moduleName;
        str versionMajor;

        var modules = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetInstalledModuleNamesInSortedOrder();
        var modulesEnumerator = modules.GetEnumerator();

        while (modulesEnumerator.MoveNext())
        {
            moduleName = modulesEnumerator.get_Current();

            if (moduleName == AppSuiteModuleName)
            {
                var moduleModels = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetModelsInModuleSortedByDisplayName(moduleName);
                var modelEnumerator = moduleModels.GetEnumerator();
                while (modelEnumerator.MoveNext())
                {
                    modelInfo = modelEnumerator.get_Current();
                    if (modelInfo.Name == FoundationModelName)
                    {
                        versionMajor = strfmt('%1.%2', modelInfo.VersionMajor, modelInfo.VersionMinor);
                        break;
                    }
                }

                break;
            }
        }
        return versionMajor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>