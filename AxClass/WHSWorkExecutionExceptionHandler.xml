<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecutionExceptionHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkExecutionExceptionHandler</c> class handles exceptions that happen as part of running mobile device flows.
/// </summary>
public abstract class WHSWorkExecutionExceptionHandler
{
    #OCCRetryCount

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>handleDeadlockException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles DeadlockException during execution.
    /// </summary>
    /// <returns>
    /// A <c>WHSWorkExecutionExceptionHandlerResult</c> containing the result of the exception handling.
    /// </returns>
    public final WHSWorkExecutionExceptionHandlerResult handleDeadlockException()
    {
        WHSWorkExecutionExceptionHandlerResult result = WHSWorkExecutionExceptionHandlerResult::construct();
        if (xSession::currentRetryCount() >= #RetryNum)
        {
            result.formStateContainer = this.resetStateAndDisplayMessage("@WAX:DeadlockExceptionMessage");
        }
        else
        {
            result.doRetry = true;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleUpdateConflict</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles UpdateConflict during execution.
    /// </summary>
    /// <returns>
    /// A <c>WHSWorkExecutionExceptionHandlerResult</c> containing the result of the exception handling.
    /// </returns>
    public final WHSWorkExecutionExceptionHandlerResult handleUpdateConflict()
    {
        WHSWorkExecutionExceptionHandlerResult result = WHSWorkExecutionExceptionHandlerResult::construct();
        if (appl.ttsLevel() == 0)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                result.formStateContainer = this.resetStateAndDisplayMessage("@WAX:UpdateConflictExceptionMessage");
            }
            else
            {
                result.doRetry = true;
            }
        }
        else
        {
            throw Exception::UpdateConflict;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleDuplicateKeyException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles DuplicateKeyException during execution.
    /// </summary>
    /// <returns>
    /// A <c>WHSWorkExecutionExceptionHandlerResult</c> containing the result of the exception handling.
    /// </returns>
    public final WHSWorkExecutionExceptionHandlerResult handleDuplicateKeyException()
    {
        WHSWorkExecutionExceptionHandlerResult result = WHSWorkExecutionExceptionHandlerResult::construct();
        if (appl.ttsLevel() == 0)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                result.formStateContainer = this.resetStateAndDisplayMessage("@WAX:DuplicateKeyExceptionMessage");
            }
            else
            {
                result.doRetry = true;
            }
        }
        else
        {
            throw Exception::DuplicateKeyException;
        }
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleTransientSqlConnectionErrorException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles TransientSqlConnectionError during execution.
    /// </summary>
    /// <returns>
    /// A <c>WHSWorkExecutionExceptionHandlerResult</c> containing the result of the exception handling.
    /// </returns>
    public final WHSWorkExecutionExceptionHandlerResult handleTransientSqlConnectionErrorException()
    {
        WHSWorkExecutionExceptionHandlerResult result = WHSWorkExecutionExceptionHandlerResult::construct();
        if (xSession::currentRetryCount() >= #RetryNum)
        {
            result.formStateContainer = this.resetStateAndDisplayMessage("@WAX:TransientSqlConnectionErrorExceptionMessage");
        }
        else
        {
            result.doRetry = true;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUnhandledExceptionInTransaction</Name>
				<Source><![CDATA[
    private void checkUnhandledExceptionInTransaction()
    {
        if (appl.ttsLevel() != 0)
        {
            // If we get here then, BOTH these conditions are true:
            //  1. This method has been called inside a transaction, AND
            //  2. An exception type that is NOT automatically rolling back the transaction has been thrown
            throw error(strFmt("@SYS330665", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwErrorIfUserSessionInProgress</Name>
				<Source><![CDATA[
    private void throwErrorIfUserSessionInProgress(str _errorMsg)
    {
        if (strContains(_errorMsg, WHSMobileAppErrorCodes::WorkUserSessionInProgressError))
        {
            throw error(_errorMsg); // We want this to be unhandled
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleSystemException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles all system exceptions during execution.
    /// </summary>
    /// <param name = "_infoLogLineStart">
    /// The starting position in the infolog from where the message should be displayed.
    /// </param>
    /// <param name = "_exceptionMsg">
    /// Error message to display.
    /// </param>
    /// <returns>
    /// A <c>WHSWorkExecutionExceptionHandlerResult</c> containing the result of the exception handling.
    /// </returns>
    public final WHSWorkExecutionExceptionHandlerResult handleSystemException(int _infologlinesStart, str _exceptionMsg)
    {
        this.checkUnhandledExceptionInTransaction();

        str errorMsg = WhsWorkExecuteDisplay::parseInfoLogForErrorString(_infologlinesStart);
        
        this.throwErrorIfUserSessionInProgress(errorMsg);

        var result = WHSWorkExecutionExceptionHandlerResult::construct();

        if (WHSWorkExecutionExceptionHandlerMessageV2Flight::instance().isEnabled())
        {
            result.formStateContainer = errorMsg
                    ? this.resetStateAndDisplayInfologMessage(_infologlinesStart) 
                    : this.resetStateAndDisplayMessage(_exceptionMsg);
        }
        else
        {
            result.formStateContainer = this.resetStateAndDisplayInfologMessage(_infologlinesStart);
        }
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles all generic exceptions during execution.
    /// </summary>
    /// <returns>
    /// A <c>WHSWorkExecutionExceptionHandlerResult</c> containing the result of the exception handling.
    /// </returns>
    public final WHSWorkExecutionExceptionHandlerResult handleException(int _infologlinesStart)
    {
        this.checkUnhandledExceptionInTransaction();

        str errorMsg = WhsWorkExecuteDisplay::parseInfoLogForErrorString(_infologlinesStart);
        
        this.throwErrorIfUserSessionInProgress(errorMsg);

        var result = WHSWorkExecutionExceptionHandlerResult::construct();
        result.formStateContainer = this.resetStateAndDisplayInfologMessage(_infologlinesStart);
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetStateAndDisplayMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the state and displays an error message.
    /// </summary>
    /// <param name = "_messageToDisplay">
    /// Error message to display.
    /// </param>
    /// <returns>
    /// A container with the form information to be displayed.
    /// </returns>
    protected container resetStateAndDisplayMessage(str _messageToDisplay)
    {
        int infologLine = infologLine();
        error(_messageToDisplay);
        return this.resetStateAndDisplayInfologMessage(infologLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetStateAndDisplayInfologMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the state and displays the infolog message.
    /// </summary>
    /// <param name = "_infoLogLineStart">
    /// The starting position in the infolog from where the message should be displayed.
    /// </param>
    /// <returns>
    /// A container with the form information to be displayed.
    /// </returns>
    protected container resetStateAndDisplayInfologMessage(int _infoLogLineStart)
    {
        this.resetState();
        this.removePassValues();
        return this.createUpdatedFormContainer(_infoLogLineStart);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the current state to what it was before the execution started.
    /// </summary>
    protected abstract void resetState()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>removePassValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes values from the pass.
    /// </summary>
    protected abstract void removePassValues()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUpdatedFormContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the updated form container, after restoring values and adding error message.
    /// </summary>
    /// <param name = "_infoLogLineStart">
    /// The starting position in the infolog from where the message should be displayed.
    /// </param>
    /// <returns>
    /// The updated form container.
    /// </returns>
    protected abstract container createUpdatedFormContainer(int _infoLogLineStart)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasError</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean hasError(container _formContainer)
    {
        return WHSWorkExecutionExceptionHandler::hasErrorOtherThan(_formContainer, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasErrorOtherThan</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean hasErrorOtherThan(container _formContainer, Set _excludedErrors)
    {
        #WHSRF
        #WHSWorkExecuteControlElements

        for (int i = #FieldControlStartLoc; i <= conLen(_formContainer); i++)
        {
            var ctrlElement = conPeek(_formContainer, i);

            if (conPeek(ctrlElement, #controltype) == #RFLabel
                && conPeek(ctrlElement, #name) == #RFError)
            {
                if (_excludedErrors && _excludedErrors.in(conPeek(ctrlElement, #label)))
                {
                    continue;
                }
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>