<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepCalculationHelper_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is a helper class for asset depreciation calculation.
/// </summary>
class AssetDepCalculationHelper_JP
{
    #AssetDepCalculation_JP
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcEquallyDividedEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the end date of the equally divided depreciation.
    /// </summary>
    /// <param name="_assetTableInterval">
    /// An instance of a sub class of <C>AssetTableInterval</C>
    /// </param>
    /// <param name="_startDate">
    /// The start date of the equally divided depreciation.
    /// </param>
    /// <param name="_numOfYearsEquallyDivided">
    /// The number of years to do equally divided depreciation.
    /// </param>
    /// <returns>
    /// The end date of the equally divided depreciation.
    /// </returns>
    public static AssetTransDate calcEquallyDividedEndDate(
        AssetTableInterval                      _assetTableInterval,
        AssetTransDate                          _startDate,
        AssetDepNumOfYearsEquallyDivided_JP     _numOfYearsEquallyDivided)
    {
        AssetTransDate      ret;
        AssetTransDate      curLastDay;

        if (_numOfYearsEquallyDivided > 0 && _assetTableInterval)
        {
            ret = mkDate(dayOfMth(_startDate), mthOfYr(_startDate), year(_startDate) + _numOfYearsEquallyDivided) - 1;

            // As the start date may be not the first day of the month, then the end date calculated above may also not the end of the month.
            // In this case, only the first incomplete month will be considered as a month, but the last incomplete month will be dropped.
            // Below code is used to do ajdustment for this case.
            ret = _assetTableInterval.startOfPeriod(ret + 1) - 1;

            // When the end date is not included in the calendar, ret will be dateNull.
            // Update it to the last day of the calendar in this case.
            if (ret < _startDate)
            {
                curLastDay = _assetTableInterval.findLastDayOfYear(_startDate);
                while (curLastDay > ret)
                {
                    ret = curLastDay;
                    curLastDay = _assetTableInterval.findLastDayOfYear(curLastDay+1);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNumberOfMthInDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calcuates the number of months between the specified two dates.
    /// </summary>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <returns>
    /// The number of monthes between the two dates.
    /// </returns>
    /// <remarks>
    /// Only the year and moth is considered, but not consider the day. And the month of the from date
    /// is included, but not include the month of the to date.
    /// </remarks>
    public static int calcNumberOfMthInDateRange(AssetTransDate _fromDate, AssetTransDate _toDate)
    {
        int ret;
        #TimeConstants

        ret = (year(_toDate) * #monthsPerYear + mthOfYr(_toDate)) - (year(_fromDate) * #monthsPerYear + mthOfYr(_fromDate));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineAssetBookType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the asset book type based on table ID.
    /// </summary>
    /// <param name="_tableId">
    /// Table ID.
    /// </param>
    /// <returns>
    /// The type of asset book.
    /// </returns>
    public static AssetBookType determineAssetBookType(TableId _tableId)
    {
        AssetBookType   ret;

        switch (_tableId)
        {
            case tableNum(AssetBookTable):
            case tableNum(AssetBook):
            case tableNum(AssetTrans):
            case tableNum(AssetGroupBookSetup):
            case tableNum(LedgerJournalTrans_Asset):
                ret = AssetBookType::ValueModel;
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEquallyDividedDepProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the profile for equally divided depreciation.
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// A record of a table that mapped to map <C>AssetDepBookMap_JP</C> which needs to create the profile.
    /// </param>
    /// <returns>
    /// The profile which save in a tempary table <C>AssetEquallyDividedDepProfileTmp_JP</C>.
    /// </returns>
    public static AssetEquallyDividedDepProfileTmp_JP initEquallyDividedDepProfile(AssetDepBookMap_JP _assetDepBookMap)
    {
        AssetEquallyDividedDepProfileTmp_JP     assetEquallyDividedDepProfileTmp;
        AssetDepBookTableMap_JP                 assetDepBookTableMap;
        AssetTransDate                          equallyDividedStartDate;
        AssetTransDate                          equallyDividedEndDate;
        AssetTransDate                          curYearDepStartDate;
        AssetTransDate                          curYearDepEndDate;
        AssetDepreciationProfile                assetDepreciationProfile;
        AssetTableInterval                      assetTableInterval;
        int                                     curLineNum = 0;
        int                                     curNumOfRemainingMth;

        #TimeConstants

        if (_assetDepBookMap.EquallyDividedStartDate)
        {
            equallyDividedStartDate = _assetDepBookMap.EquallyDividedStartDate;
        }
        else
        {
            // The equally divided mode has not started yet. Gets the forecasted start date when calculating the profile.
            equallyDividedStartDate = AssetEquallyDividedDepProfileTmp_JP::getSavedEquallyDividedStartDate(_assetDepBookMap.AssetId, _assetDepBookMap.AssetBookId);
        }

        if (equallyDividedStartDate)
        {
            assetDepBookTableMap = AssetDepBookTableMap_JP::find(
                AssetDepCalculationHelper_JP::determineAssetBookType(_assetDepBookMap.TableId),
                _assetDepBookMap.AssetBookId);

            assetDepreciationProfile = _assetDepBookMap.AssetDepBookMap_JP::depreciationProfileOnDate(equallyDividedStartDate);

            if (assetDepreciationProfile.NumOfYearsEquallyDivided_JP > 0)
            {
                assetTableInterval = AssetTableIntervalExt_JP::constructFromCalendarSchedule(
                    assetDepreciationProfile,
                    assetDepBookTableMap.TableId,
                    assetDepBookTableMap.RecId);

                curNumOfRemainingMth    = assetDepreciationProfile.NumOfYearsEquallyDivided_JP * #monthsPerYear;
                equallyDividedEndDate   = AssetDepCalculationHelper_JP::calcEquallyDividedEndDate(
                    assetTableInterval,
                    equallyDividedStartDate,
                    assetDepreciationProfile.NumOfYearsEquallyDivided_JP);

                curYearDepStartDate = equallyDividedStartDate;
                while (curYearDepStartDate <= equallyDividedEndDate)
                {
                    curYearDepEndDate   = min(equallyDividedEndDate, assetTableInterval.findLastDayOfYear(curYearDepStartDate));
                    if (curYearDepEndDate < curYearDepStartDate)
                    {
                        // In case the date exceed the max definition in the fiscal calendar.
                        // This check can aviod deadlock.
                        break;
                    }

                    assetEquallyDividedDepProfileTmp.clear();
                    assetEquallyDividedDepProfileTmp.NumberOfMonths = AssetDepCalculationHelper_JP::calcNumberOfMthInDateRange(curYearDepStartDate, curYearDepEndDate+1);

                    if (assetEquallyDividedDepProfileTmp.NumberOfMonths > 0)
                    {
                        assetEquallyDividedDepProfileTmp.PeriodName                 = AssetEquallyDividedDepProfileTmp_JP::BuildPeriodName(curLineNum);
                        assetEquallyDividedDepProfileTmp.StartDate                  = curYearDepStartDate;
                        assetEquallyDividedDepProfileTmp.EndDate                    = curYearDepEndDate;
                        assetEquallyDividedDepProfileTmp.NumberOfRemainingMonths    = curNumOfRemainingMth;
                        assetEquallyDividedDepProfileTmp.insert();

                        // Prepare for next profile line.
                        curLineNum++;
                        curNumOfRemainingMth -= assetEquallyDividedDepProfileTmp.NumberOfMonths;
                    }

                    curYearDepStartDate = curYearDepEndDate + 1;
                }
            }
        }

        return assetEquallyDividedDepProfileTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Rounds the amount based on the setting for rounding specified on parameter.
    /// </summary>
    /// <param name="_assetAmount">
    ///    The amount that is used for the rounding process.
    /// </param>
    /// <param name="_roundOffDepreciation">
    ///    The round off value.
    /// </param>
    /// <param name="_upToRoundOff">
    ///    If true, when the amount to round is less than the round off value, round up the amount; otherwise, do nothing to the amount
    ///    If false, round off the amount according to the round rule in currency
    /// </param>
    /// <returns>
    ///    The rounded amount.
    /// </returns>
    public static AssetAmount roundOffDepreciation(
        AssetAmount _assetAmount,
        RoundOff _roundOffDepreciation = 0,
        boolean _upToRoundOff = false)
    {
        AssetAmount     assetAmount;
        Currency        currency;
        CurrencyCode    accountingCurrencyCode;
        RoundOff        roundOffDepreciation = _roundOffDepreciation;

        accountingCurrencyCode  = Ledger::accountingCurrency();
        currency                = Currency::find(accountingCurrencyCode);

        if (_assetAmount == 0.0 )
        {
            return (0.0);
        }

        if (!roundOffDepreciation)
        {
            roundOffDepreciation    = currency.RoundOffAssetDep_JP;
        }

        if (_upToRoundOff && _assetAmount < roundOffDepreciation)
        {
            // If _upToRoundOff is true and the amount to depreciate is less than round off value, round up the amount
            assetAmount = CurrencyExchange::roundWithRule(
                _assetAmount,
                roundOffDepreciation,
                RoundOffType::RoundUp);
        }
        else if (!_upToRoundOff)
        {
            // If a valuable "roundOffDepreciation" is not passed, then use the setting in the currency code.
            // And the "RoundOffType" is always got from the currency code setting.
            assetAmount = CurrencyExchange::roundWithRule(
                _assetAmount,
                roundOffDepreciation,
                currency.RoundOffTypeAssetDep_JP);
        }
        else
        {
            assetAmount = _assetAmount;
        }

        return assetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffServiceLife</Name>
				<Source><![CDATA[
    /// <summary>
    /// Round down the service life.
    /// </summary>
    /// <param name="_serviceLife">
    /// The service life to be rounded down.
    /// </param>
    /// <returns>
    /// The rounded down service life.
    /// </returns>
    public static AssetServiceLife roundOffServiceLife(AssetServiceLife _serviceLife)
    {
        AssetServiceLife ret;

        ret = roundDownDec(_serviceLife, #NumOfDecimal);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>