<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanGenerateForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanGenerateForm</c> class supports the business logic of the <c>BudgetPlanGenerate</c> form.
/// </summary>
public abstract class BudgetPlanGenerateForm
{
    FormTabPageControl              sourceTabPage;
    FormComboBoxControl             budgetPlanTransferTypeControl;
    FormReferenceGroupControl       sourceLedger;
    FormReferenceGroupControl       targetBudgetPlanningProcess;
    FormStringControl               targetLedger;
    FormReferenceGroupControl       targetBudgetPlanningDocumentNumber;
    FormStringControl               targetName;
    FormReferenceGroupControl       targetBudgetPlanPreparer;
    FormStringControl               targetBudgetPlanScenario;
    FormComboBoxControl             targetBudgetClass;
    FormRealControl                 targetFactor;
    FormRealControl                 targetMinimum;
    FormRealControl                 targetRoundingRule;
    FormReferenceGroupControl       targetResponsibilityCenter;
    FormStringControl               targetBudgetPlanningUserGroup;
    FormStringControl               targetBudgetPlanScenarioQuantity;
    FormCommandButtonControl        commandOk;
    FormStaticTextControl           instruction;
    FormGroupControl                footnoteItem;
    FormStaticTextControl           footnoteMessageText;
    BudgetPlanGenerateContract      budgetPlanGenerateContract;
    BudgetPlanningProcess           currentBudgetPlanningProcess;
    BudgetPlan                      budgetPlan;
    BudgetPlanGenerateController    budgetPlanGenerateController;
    DataAreaId                      budgetPlanningProcessDataAreaId;
    Ledger                          targetBudgetPlanningProcessLedger;
    Set                             controlSet;
    boolean                         isCalledFromBudgetPlan;
    BudgetPlanHeader                targetBudgetPlanHeader;
    protected FormCheckBoxControl   sourceBudgetPlanIsDescriptionIncluded;
    protected FormCheckBoxControl   sourceBudgetPlanIsRevenueSummaryIncluded;
    protected FormGroupControl      sourceBudgetPlanNarrative;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmIsCalledFromBudgetPlan</Name>
				<Source><![CDATA[
    public boolean parmIsCalledFromBudgetPlan(boolean _isCalledFromBudgetPlan = isCalledFromBudgetPlan)
    {
        isCalledFromBudgetPlan = _isCalledFromBudgetPlan;

        return isCalledFromBudgetPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetBudgetPlanHeader</Name>
				<Source><![CDATA[
    public BudgetPlanHeader parmTargetBudgetPlanHeader(BudgetPlanHeader _targetBudgetPlanHeader = targetBudgetPlanHeader)
    {
        targetBudgetPlanHeader = _targetBudgetPlanHeader;

        return targetBudgetPlanHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>BudgetPlanGenerate</c> form can be closed.
    /// </summary>
    /// <param name="_formRun">
    /// The current <c>BudgetPlanGenerate</c> form instance.
    /// </param>
    /// <returns>
    /// true if the form can be closed; otherwise, false.
    /// </returns>
    public boolean canClose(FormRun _formRun)
    {
        boolean canClose;

        this.saveControlValues(_formRun);

        canClose = this.validateCanClose();

        return canClose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWarningMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the specified warning message.
    /// </summary>
    /// <param name="_warningMessage">
    /// The warning message to display.
    /// </param>
    protected void displayWarningMessage(str _warningMessage)
    {
        warning(_warningMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanningStageRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BudgetPlanningStage</c> record ID based on the generate action.
    /// </summary>
    /// <returns>
    /// The record ID of the current <c>BudgetPlanningStage</c> record.
    /// </returns>
    /// <remarks>
    /// When a new budget plan is being generated, then the stage record ID returned is always the first
    /// stage. If a budget plan is being updated, then the stage record ID returned is the current stage that
    /// the plan is in.
    /// </remarks>
    protected BudgetPlanningStageRecId getBudgetPlanningStageRecId()
    {
        BudgetPlanningStageRecId budgetPlanningStageRecId;
        BudgetPlanHeader         budgetPlanHeader;

        switch (budgetPlanTransferTypeControl.selection())
        {
            case BudgetPlanGenerateType::NewBudgetPlan:
                budgetPlanningStageRecId = BudgetPlanningWorkflowSetup::getFirstPlanningStage(
                                                targetBudgetPlanningProcess.value(),
                                                targetResponsibilityCenter.value()).RecId;
                break;

            case BudgetPlanGenerateType::ReplaceBudgetPlan,
                BudgetPlanGenerateType::UpdateBudgetPlan:
                budgetPlanHeader = BudgetPlanHeader::find(targetBudgetPlanningDocumentNumber.value());

                budgetPlanningStageRecId = budgetPlanHeader.BudgetPlanningStage;

                break;
        }

        return budgetPlanningStageRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the controls for the specified <c>BudgetPlanGenerate</c> form instance.
    /// </summary>
    /// <param name="_formRun">
    /// The <c>BudgetPlanGenerate</c> form instance for which to intialize the controls.
    /// </param>
    public void initControls(FormRun _formRun)
    {
        SetEnumerator  setEnumerator;

        this.initControlSet();

        setEnumerator = controlSet.getEnumerator();

        while (setEnumerator.moveNext())
        {
            this.setFormControl(_formRun.control(_formRun.controlId(setEnumerator.current())));
        }

        this.setVisibleControls();
        this.setMandatoryControls();
        this.setInstructionText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControlSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the control set for the class.
    /// </summary>
    protected void initControlSet()
    {
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceTabPage));
        controlSet.add(formControlStr(BudgetPlanGenerate, BudgetPlanTransferType));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceLedger));
        controlSet.add(formControlStr(BudgetPlanGenerate, TargetBudgetPlanningProcess));
        controlSet.add(formControlStr(BudgetPlanGenerate, TargetLedger));
        controlSet.add(formControlStr(BudgetPlanGenerate, TargetBudgetPlanningDocumentNumber));
        controlSet.add(formControlStr(BudgetPlanGenerate, TargetName));
        controlSet.add(formControlStr(BudgetPlanGenerate, TargetBudgetPlanPreparer));
        controlSet.add(formControlStr(BudgetPlanGenerate, TargetBudgetPlanScenario));
        controlSet.add(formControlStr(BudgetPlanGenerate, TargetBudgetClass));
        controlSet.add(formControlStr(BudgetPlanGenerate, TargetFactor));
        controlSet.add(formControlStr(BudgetPlanGenerate, TargetMinimum));
        controlSet.add(formControlStr(BudgetPlanGenerate, TargetRoundingRule));
        controlSet.add(formControlStr(BudgetPlanGenerate, TargetResponsibilityCenter));
        controlSet.add(formControlStr(BudgetPlanGenerate, TargetBudgetPlanningUserGroup));
        controlSet.add(formControlStr(BudgetPlanGenerate, TargetBudgetPlanScenarioQuantity));
        controlSet.add(formControlStr(BudgetPlanGenerate, Instruction));
        controlSet.add(formControlStr(BudgetPlanGenerate, FootnoteItem));
        controlSet.add(formControlStr(BudgetPlanGenerate, FootnoteMessageText));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceBudgetPlanNarrativeGroup));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceBudgetPlanIsDescriptionIncluded));
        controlSet.add(formControlStr(BudgetPlanGenerate, SourceBudgetPlanIsRevenueSummaryIncluded));
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class for the specified <c>BudgetPlanGenerate</c> form instance.
    /// </summary>
    /// <param name="_formRun">
    /// The <c>BudgetPlanGenerate</c> form instance for which to intialize the class.
    /// </param>
    public void initForm(FormRun _formRun)
    {
        this.initControls(_formRun);
        this.restoreLastSavedControlValues(_formRun);
        this.setDefaultControlValues();
        this.modifiedBudgetPlanningProcess();

        if (!budgetPlanGenerateContract.parmTargetPreparer())
        {
            this.setDefaultBudgetPlanPreparer();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceBudgetPlanDocNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup of the <c>BudgetPlanDocumentNumber</c> control.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference control to perform the lookup for.
    /// </param>
    /// <returns>
    /// The selected <c>BudgetPlanHeader</c> record.
    /// </returns>
    public Common lookupReferenceBudgetPlanDocNumber(FormReferenceControl _formReferenceControl)
    {
        BudgetPlanFormHelper::validateLookupControlFilledIn(targetBudgetPlanningProcess);

        return BudgetPlan::lookupBudgetPlanHeaderReference(
            _formReferenceControl,
            targetBudgetPlanningProcess.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the lookup of the <c>BudgetPlanningProcess</c> control.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference control to perform the lookup for.
    /// </param>
    /// <returns>
    /// The selected <c>BudgetPlanningProcess</c> record.
    /// </returns>
    public Common lookupReferenceBudgetPlanningProcess(FormReferenceControl _formReferenceControl)
    {
        return BudgetPlanLookupHelper::lookupBudgetPlanningProcessReference(_formReferenceControl, true, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceResponsibilityCenter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the lookup of the <c>ResponsibilityCenter</c> control.
    /// </summary>
    /// <returns>
    /// The selected <c>OMInternalOrganization</c> record.
    /// </returns>
    public Common lookupReferenceResponsibilityCenter()
    {
        OMInternalOrganization  budgetingOrganization;

        BudgetPlanFormHelper::validateLookupControlFilledIn(targetBudgetPlanningProcess);

        budgetingOrganization = BudgetPlan::lookupBudgetingOrganization(targetResponsibilityCenter, targetBudgetPlanningProcess.value());

        return budgetingOrganization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTargetBudgetPlanScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the lookup of the budget plan scenario control.
    /// </summary>
    public void lookupTargetBudgetPlanScenario()
    {
        this.lookupTargetScenario(targetBudgetPlanScenario);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTargetBudgetPlanScenarioQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>BudgetPlanScenario</c> records of <c>UnitOfMeasureClass</c> type quantity.
    /// </summary>
    /// <returns>
    /// The <c>BudgetPlanScenario</c> record selected by the lookup.
    /// </returns>
    public void lookupTargetBudgetPlanScenarioQuantity()
    {
        this.lookupTargetScenario(targetBudgetPlanScenarioQuantity, UnitOfMeasureClass::Quantity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTargetScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>BudgetPlanScenario</c> records on the given <c>FormStringControl</c>
    /// with the given <c>UnitOfMeasureClass</c> type.
    /// </summary>
    /// <param name = "_formStringControl">The control to perform the lookup on.</param>
    /// <param name = "_unitOfMeasureClass">The <c>UnitOfMeasureClass</c> type to lookup.</param>
    protected void lookupTargetScenario(FormStringControl _formStringControl, UnitOfMeasureClass _unitOfMeasureClass = UnitOfMeasureClass::Undefined)
    {
        boolean                     useFirstBudgetPlanningStage = (budgetPlanTransferTypeControl.selection() == BudgetPlanGenerateType::NewBudgetPlan);
        BudgetPlanningStageRecId    budgetPlanningStageRecId;

        BudgetPlanFormHelper::validateLookupControlFilledIn(targetBudgetPlanningProcess);
        BudgetPlanFormHelper::validateLookupControlFilledIn(targetResponsibilityCenter);

        if (!useFirstBudgetPlanningStage)
        {
            // If not using the first stage, then get the current stage
            budgetPlanningStageRecId = this.getBudgetPlanningStageRecId();
        }

        BudgetPlanLookupHelper::lookupBudgetPlanScenario(
            _formStringControl,
            targetBudgetPlanningProcess.value(),
            0,
            targetResponsibilityCenter.value(),
            NoYes::No,
            useFirstBudgetPlanningStage,
            budgetPlanningStageRecId,
            _unitOfMeasureClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedBudgetPlanDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value of name, responsibility center, and budget plan preparer controls on the modification of budget plan document number.
    /// </summary>
    /// <returns>
    /// true.
    /// </returns>
    public boolean modifiedBudgetPlanDocumentNumber()
    {
        BudgetPlanHeader budgetPlanHeader;

        if (targetBudgetPlanningDocumentNumber.value() != 0)
        {
            budgetPlanHeader = BudgetPlanHeader::find(targetBudgetPlanningDocumentNumber.value());
        }

        if (budgetPlanHeader)
        {
            targetName.text(budgetPlanHeader.Name);
            targetResponsibilityCenter.value(budgetPlanHeader.BudgetingOrganization);
            targetBudgetPlanPreparer.value(budgetPlanHeader.BudgetPlanPreparer);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value of ledger control on the modification of budget planning process.
    /// </summary>
    /// <returns>
    /// true.
    /// </returns>
    public boolean modifiedBudgetPlanningProcess()
    {
        BudgetPlanningProcessRecId  currentBudgetPlanningProcessRecId;
        BudgetPlanHeader            budgetPlanHeader;

        currentBudgetPlanningProcessRecId = currentBudgetPlanningProcess.RecId;

        currentBudgetPlanningProcess = BudgetPlanningProcess::find(targetBudgetPlanningProcess.value());

        if (currentBudgetPlanningProcess)
        {
            targetBudgetPlanningProcessLedger = Ledger::find(currentBudgetPlanningProcess.Ledger);

            budgetPlanningProcessDataAreaId = CompanyInfo::findRecId(targetBudgetPlanningProcessLedger.PrimaryForLegalEntity).DataArea;

            targetledger.text(targetBudgetPlanningProcessLedger.Name);

            // Clear out the budgeting organization unless the budgeting organization is part of the
            // budget organization structure for the budget planning process.
            if (targetResponsibilityCenter.value()
                && !BudgetPlan::isOrganizationInBudgetPlanningHierarchy(
                        targetBudgetPlanningProcess.value(),
                        targetResponsibilityCenter.value()))
            {
                targetResponsibilityCenter.value(0);
            }
            else
            {
                budgetPlanHeader.BudgetPlanningProcess = targetBudgetPlanningProcess.value();

                budgetPlan.parmBudgetPlanHeader(budgetPlanHeader);
                budgetPlan.defaultField(fieldNum(BudgetPlanHeader, BudgetingOrganization));

                if (!targetBudgetPlanningDocumentNumber.value())
                {
                    targetResponsibilityCenter.value(budgetPlan.parmBudgetPlanHeader().BudgetingOrganization);
                }
            }
        }

        if (currentBudgetPlanningProcessRecId && (currentBudgetPlanningProcessRecId != currentBudgetPlanningProcess.RecId))
        {
            targetBudgetPlanScenario.text(BudgetPlanningConstants::emptyString);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedBudgetPlanTransferType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value of controls on the modification of budget plan generate type field.
    /// </summary>
    /// <returns>
    /// true.
    /// </returns>
    public boolean modifiedBudgetPlanTransferType()
    {
        switch (budgetPlanTransferTypeControl.selection())
        {
            case BudgetPlanGenerateType::NewBudgetPlan:
                targetBudgetPlanningDocumentNumber.value(0);
                targetBudgetPlanningDocumentNumber.allowEdit(false);
                targetName.allowEdit(true);
                targetBudgetPlanPreparer.allowEdit(true);
                targetBudgetPlanPreparer.value(HcmWorkerLookup::currentWorker());
                targetResponsibilityCenter.allowEdit(true);
                targetBudgetPlanningUserGroup.visible(true);
                footnoteItem.visible(false);
                this.setDefaultControlValues();
                break;

            case BudgetPlanGenerateType::ReplaceBudgetPlan:
                targetBudgetPlanningDocumentNumber.allowEdit(true);
                targetBudgetPlanningDocumentNumber.mandatory(true);
                targetName.allowEdit(false);
                targetName.text('');
                targetBudgetPlanPreparer.allowEdit(false);
                targetBudgetPlanPreparer.value(0);
                targetResponsibilityCenter.allowEdit(false);
                targetResponsibilityCenter.value(0);
                footnoteItem.visible(true);
                targetBudgetPlanningUserGroup.visible(false);
                this.modifiedBudgetPlanDocumentNumber();
                footnoteMessageText.text("@GLS150327");
                break;

            case BudgetPlanGenerateType::UpdateBudgetPlan:
                targetBudgetPlanningDocumentNumber.allowEdit(true);
                targetBudgetPlanningDocumentNumber.mandatory(true);
                targetName.allowEdit(false);
                targetName.text('');
                targetBudgetPlanPreparer.allowEdit(false);
                targetBudgetPlanPreparer.value(0);
                targetResponsibilityCenter.allowEdit(false);
                targetResponsibilityCenter.value(0);
                targetBudgetPlanningUserGroup.visible(false);
                footnoteItem.visible(true);
                this.modifiedBudgetPlanDocumentNumber();
                footnoteMessageText.text("@GLS150461");
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (budgetPlanTransferTypeControl.selection() == BudgetPlanGenerateType::NewBudgetPlan)
        {
            sourceBudgetPlanNarrative.visible(true);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedResponsibilityCenter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value of ledger control on the modification of budget planning process.
    /// </summary>
    /// <returns>
    /// true.
    /// </returns>
    public boolean modifiedResponsibilityCenter()
    {
        // Clear out the budget plan scenario if responsibility center is modified.
        if (targetResponsibilityCenter.value())
        {
            targetBudgetPlanScenario.text(BudgetPlanningConstants::emptyString);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedTargetBudgetPlanScenarioQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method to set additional values when the target budget plan quantity scenario has been modified.
    /// </summary>
    /// <returns>
    /// true.
    /// </returns>
    public boolean modifiedTargetBudgetPlanScenarioQuantity()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        controlSet = new Set(Types::String);
        budgetPlan = BudgetPlan::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanGenerateContract</Name>
				<Source><![CDATA[
    public BudgetPlanGenerateContract parmBudgetPlanGenerateContract(BudgetPlanGenerateContract _budgetPlanGenerateContract = budgetPlanGenerateContract)
    {
        budgetPlanGenerateContract = _budgetPlanGenerateContract;

        return budgetPlanGenerateContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanGenerateController</Name>
				<Source><![CDATA[
    public BudgetPlanGenerateController parmBudgetPlanGenerateController(BudgetPlanGenerateController _budgetPlanGenerateController = budgetPlanGenerateController)
    {
        budgetPlanGenerateController = _budgetPlanGenerateController;

        return budgetPlanGenerateController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreLastSavedControlValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value on all controls to the values stored on the contract.
    /// </summary>
    /// <param name="_formRun">
    /// An instance of the current <c>BudgetPlanGenerate</c> form.
    /// </param>
    public void restoreLastSavedControlValues(FormRun _formRun)
    {
        SetEnumerator  setEnumerator;

        setEnumerator = controlSet.getEnumerator();

        while (setEnumerator.moveNext())
        {
            this.setControlValue(_formRun.control(_formRun.controlId(setEnumerator.current())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveControlValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the value of the passed in form control to the appropriate class variable.
    /// </summary>
    /// <param name="_formControl">
    /// The form control whose value should be saved.
    /// </param>
    protected void saveControlValue(FormControl _formControl)
    {
        switch (_formControl.name())
        {
            case formControlStr(BudgetPlanGenerate, BudgetPlanTransferType) :
                budgetPlanGenerateContract.parmTargetBudgetPlanGenerateType(budgetPlanTransferTypeControl.selection());
                break;

            case formControlStr(BudgetPlanGenerate, SourceLedger) :
                budgetPlanGenerateContract.parmSourceLedgerRecId(sourceLedger.value());
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanningProcess) :
                budgetPlanGenerateContract.parmTargetBudgetPlanningProcess(targetBudgetPlanningProcess.value());
                budgetPlanGenerateContract.parmTargetLedgerRecId(BudgetPlanningProcess::find(budgetPlanGenerateContract.parmTargetBudgetPlanningProcess()).Ledger);
                break;

            case formControlStr(BudgetPlanGenerate, TargetName) :
                budgetPlanGenerateContract.parmTargetBudgetPlanName(targetName.text());
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanScenario) :
                budgetPlanGenerateContract.parmTargetBudgetPlanScenario(BudgetPlanScenario::findByLocalizedName(targetBudgetPlanScenario.text()).RecId);
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanPreparer) :
                budgetPlanGenerateContract.parmTargetPreparer(targetBudgetPlanPreparer.value());
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetClass) :
                budgetPlanGenerateContract.parmTargetBudgetClass(targetBudgetClass.selection());
                break;

            case formControlStr(BudgetPlanGenerate, TargetFactor) :
                budgetPlanGenerateContract.parmTargetFactor(targetFactor.realValue());
                break;

            case formControlStr(BudgetPlanGenerate, TargetMinimum) :
                budgetPlanGenerateContract.parmTargetMinimumValue(targetMinimum.realValue());
                break;

            case formControlStr(BudgetPlanGenerate, TargetRoundingRule) :
                budgetPlanGenerateContract.parmTargetRoundingPrecision(targetRoundingRule.realValue());
                break;

            case formControlStr(BudgetPlanGenerate, TargetResponsibilityCenter) :
                budgetPlanGenerateContract.parmTargetResponsibilityCenter(targetResponsibilityCenter.value());
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanningDocumentNumber) :
                budgetPlanGenerateContract.parmTargetBudgetPlanDocumentNumber(targetBudgetPlanningDocumentNumber.value());
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanningUserGroup) :
                budgetPlanGenerateContract.parmTargetBudgetPlanningUserGroup(targetBudgetPlanningUserGroup.text());
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanScenarioQuantity) :
                budgetPlanGenerateContract.parmTargetBudgetPlanScenarioQuantity(BudgetPlanScenario::findByLocalizedName(targetBudgetPlanScenarioQuantity.text()).RecId);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveControlValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the current value for each control to the contract that contains that control.
    /// </summary>
    /// <param name="_formRun">
    /// An instance of the current <c>BudgetPlanGenerate</c> form.
    /// </param>
    public void saveControlValues(FormRun _formRun)
    {
        SetEnumerator setEnumerator;

        setEnumerator = controlSet.getEnumerator();

        while (setEnumerator.moveNext())
        {
            this.saveControlValue(_formRun.control(_formRun.controlId(setEnumerator.current())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the passed in form control to the value stored on the appropriate class variable.
    /// </summary>
    /// <param name="_formControl">
    /// The control whose value should be set.
    /// </param>
    public void setControlValue(FormControl _formControl)
    {
        switch (_formControl.name())
        {
            case formControlStr(BudgetPlanGenerate, BudgetPlanTransferType) :
                budgetPlanTransferTypeControl.selection(budgetPlanGenerateContract.parmTargetBudgetPlanGenerateType());
                this.modifiedBudgetPlanTransferType();
                break;

            case formControlStr(BudgetPlanGenerate, SourceLedgerGroup) :
                sourceLedger.value(budgetPlanGenerateContract.parmSourceLedgerRecId());
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanningProcess) :
                targetBudgetPlanningProcess.value(budgetPlanGenerateContract.parmTargetBudgetPlanningProcess());
                break;

            case formControlStr(BudgetPlanGenerate, TargetLedger) :
                targetledger.text(Ledger::name(budgetPlanGenerateContract.parmTargetLedgerRecId()));
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanningDocumentNumber) :
                targetBudgetPlanningDocumentNumber.value(budgetPlanGenerateContract.parmTargetBudgetPlanDocumentNumber());
                break;

            case formControlStr(BudgetPlanGenerate, TargetName) :
                targetName.text(budgetPlanGenerateContract.parmTargetBudgetPlanName());
                break;

            case formControlStr(BudgetPlanGenerate, TargetResponsibilityCenter) :
                targetResponsibilityCenter.value(budgetPlanGenerateContract.parmTargetResponsibilityCenter());
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanPreparer) :
                targetBudgetPlanPreparer.value(budgetPlanGenerateContract.parmTargetPreparer());
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanScenario) :
                targetBudgetPlanScenario.text(BudgetPlanScenarioTranslation::getLocalizedName(budgetPlanGenerateContract.parmTargetBudgetPlanScenario()));
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetClass) :
                targetBudgetClass.selection(budgetPlanGenerateContract.parmTargetBudgetClass());
                break;

            case formControlStr(BudgetPlanGenerate, TargetFactor) :
                targetFactor.realValue(budgetPlanGenerateContract.parmTargetFactor());
                break;

            case formControlStr(BudgetPlanGenerate, TargetMinimum) :
                targetMinimum.realValue(budgetPlanGenerateContract.parmTargetMinimumValue());
                break;

            case formControlStr(BudgetPlanGenerate, TargetRoundingRule) :
                targetRoundingRule.realValue(budgetPlanGenerateContract.parmTargetRoundingPrecision());
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanningUserGroup) :
                targetBudgetPlanningUserGroup.text(budgetPlanGenerateContract.parmTargetBudgetPlanningUserGroup());
                break;
            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanScenarioQuantity) :
                targetBudgetPlanScenarioQuantity.text(BudgetPlanScenarioTranslation::getLocalizedName(budgetPlanGenerateContract.parmTargetBudgetPlanScenarioQuantity()));
                this.modifiedTargetBudgetPlanScenarioQuantity();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultBudgetPlanPreparer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value for the <c>budgetPlanPreparerControl</c> form control.
    /// </summary>
    protected void setDefaultBudgetPlanPreparer()
    {
        targetBudgetPlanPreparer.value(HcmWorkerLookup::currentWorker());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultControlValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default values for the form controls.
    /// </summary>
    public void setDefaultControlValues()
    {
        this.setDefaultSourceLedgerSource();

        this.setDefaultFactor();

        this.setDefaultValuesWhenCalledFromBudgetPlan();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultFactor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value for the <c>factorControl</c> form control.
    /// </summary>
    protected void setDefaultFactor()
    {
        targetFactor.realValue(1.00);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultSourceLedgerSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value for the <c>GeneralLedgerJournalSource_LedgerSourceControl</c> control.
    /// </summary>
    protected void setDefaultSourceLedgerSource()
    {
        sourceLedger.value(Ledger::current());
        sourceLedger.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the class reference for the specified form control.
    /// </summary>
    /// <param name="_formControl">
    /// The form control for which to set the reference.
    /// </param>
    protected void setFormControl(FormControl _formControl)
    {
        switch (_formControl.name())
        {
            case formControlStr(BudgetPlanGenerate, SourceTabPage) :
                sourceTabPage = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, BudgetPlanTransferType) :
                budgetPlanTransferTypeControl = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceLedger) :
                sourceLedger = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanningProcess) :
                targetBudgetPlanningProcess = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, TargetLedger) :
                targetLedger = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanningDocumentNumber) :
                targetBudgetPlanningDocumentNumber = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, TargetName) :
                targetName = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanPreparer) :
                targetBudgetPlanPreparer = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanScenario) :
                targetBudgetPlanScenario = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetClass) :
                targetBudgetClass = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, TargetFactor) :
                targetFactor = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, TargetMinimum) :
                targetMinimum = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, TargetRoundingRule) :
                targetRoundingRule = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, TargetResponsibilityCenter) :
                targetResponsibilityCenter = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanningUserGroup) :
                targetBudgetPlanningUserGroup = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, TargetBudgetPlanScenarioQuantity):
                targetBudgetPlanScenarioQuantity = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, Instruction) :
                instruction = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, FootnoteItem) :
                footnoteItem = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, FootnoteMessageText) :
                footnoteMessageText = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanIsDescriptionIncluded) :
                sourceBudgetPlanIsDescriptionIncluded = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanIsRevenueSummaryIncluded) :
                sourceBudgetPlanIsRevenueSummaryIncluded = _formControl;
                break;

            case formControlStr(BudgetPlanGenerate, SourceBudgetPlanNarrativeGroup) :
                sourceBudgetPlanNarrative = _formControl;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInstructionText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the instruction text for the form.
    /// </summary>
    /// <remarks>
    /// Extending classes must override this method and should set the <c>headingControl</c> and <c>instructionControl</c> text values to the value for their process.
    /// </remarks>
    protected abstract void setInstructionText()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMandatoryControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the controls as mandatory on the <c>BudgetPlanGenerate</c> form.
    /// </summary>
    /// <remarks>
    /// This will be overridden by child classes in order to add code to enforce process specific fields.
    /// </remarks>
    protected abstract void setMandatoryControls()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the control visibility for the <c>BudgetPlanGenerate</c> form.
    /// </summary>
    /// <remarks>
    /// This will be overridden by child classes in order to add code to show process specific fields.
    /// </remarks>
    protected void setVisibleControls()
    {
        if (this.isCalledFromBudgetPlan)
        {
            targetBudgetPlanningProcess.visible(false);
            targetLedger.visible(false);
            targetBudgetPlanningDocumentNumber.visible(false);
            targetName.visible(false);
            targetBudgetPlanPreparer.visible(false);
            targetResponsibilityCenter.visible(false);
            targetBudgetPlanningUserGroup.visible(false);
            targetBudgetPlanScenarioQuantity.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetPlanDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the budget planning document number control.
    /// </summary>
    /// <returns>
    /// true when no error found; otherwise, false.
    /// </returns>
    public boolean validateBudgetPlanDocumentNumber()
    {
        boolean                 isValid = true;
        Query                   query;
        QueryRun                queryRun;
        BudgetPlanHeader        budgetPlanHeader;
        OMInternalOrganization  omInternalOrganization;

        if (targetBudgetPlanningDocumentNumber.value())
        {
            budgetPlanHeader = BudgetPlanHeader::find(targetBudgetPlanningDocumentNumber.value());

            if (!budgetPlanHeader)
            {
                isValid = checkFailed(strFmt("@SYS316757", "@GLS70070"));
            }
            else
            {
                isValid = !BudgetPlan::isUserBlocked(budgetPlanHeader, true);

                if (isValid)
                {
                    query = BudgetPlan::getBudgetPlanHeaderReferenceQuery(
                            targetBudgetPlanningProcess.value(),
                            targetBudgetPlanningDocumentNumber.value());

                    queryRun = new QueryRun(query);

                    queryRun.next();

                    budgetPlanHeader = queryRun.get(tableNum(BudgetPlanHeader));

                    if (!budgetPlanHeader)
                    {
                        select firstOnly Name from omInternalOrganization
                        where omInternalOrganization.RecId == targetBudgetPlanHeader.BudgetingOrganization;

                        isValid = checkFailed(strFmt("@SYS4020045", omInternalOrganization.Name));
                    }
                    else if (!budgetPlanHeader.IsHistorical
                         && budgetPlanHeader.WorkflowStatus == BudgetPlanWorkflowStatus::Approved)
                    {
                        isValid = checkFailed("@SYS4000185");
                    }
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of budget planning process control.
    /// </summary>
    /// <returns>
    /// true when no error found; otherwise, false.
    /// </returns>
    public boolean validateBudgetPlanningProcess()
    {
        boolean               isValid = true;
        BudgetPlanHeader      budgetPlanHeader;
        BudgetPlanningProcess budgetPlanningProcess;

        if (targetBudgetPlanningProcess.value())
        {
            budgetPlanHeader.BudgetPlanningProcess = targetBudgetPlanningProcess.value();

            budgetPlanningProcess = BudgetPlanningProcess::find(budgetPlanHeader.BudgetPlanningProcess);
        }

        if (budgetPlanTransferTypeControl.selection() == BudgetPlanGenerateType::NewBudgetPlan)
        {
            budgetPlanHeader.BudgetingOrganization = targetResponsibilityCenter.value();

            budgetPlan.parmBudgetPlanHeader(budgetPlanHeader);

            isValid = budgetPlan.validateField(fieldNum(BudgetPlanHeader, BudgetPlanningProcess));
        }

        if (budgetPlanningProcess.Ledger != Ledger::current())
        {
            isValid = checkFailed(strFmt("@SYS4020049", budgetPlanningProcess.Name));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetPlanPreparer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of budget plan preparer control.
    /// </summary>
    /// <returns>
    /// true when no error found; otherwise, false.
    /// </returns>
    public boolean validateBudgetPlanPreparer()
    {
        boolean          isValid = true;
        BudgetPlanHeader budgetPlanHeader;

        if (budgetPlanTransferTypeControl.selection() == BudgetPlanGenerateType::NewBudgetPlan)
        {
            budgetPlanHeader.BudgetingOrganization = targetResponsibilityCenter.value();
            budgetPlanHeader.BudgetPlanningProcess = targetBudgetPlanningProcess.value();
            budgetPlanHeader.BudgetPlanPreparer = targetBudgetPlanPreparer.value();

            budgetPlan.parmBudgetPlanHeader(budgetPlanHeader);

            isValid = budgetPlan.validateField(fieldNum(BudgetPlanHeader, BudgetPlanPreparer));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the <c>BudgetPlanGenerate</c> form can be closed.
    /// </summary>
    /// <returns>
    /// true when no error found; otherwise, false.
    /// </returns>
    protected boolean validateCanClose()
    {
        boolean canClose = true;

        // Verify the source and target ledgers are the same
        if (budgetPlanGenerateContract.parmSourceLedgerRecId() != budgetPlanGenerateContract.parmTargetLedgerRecId())
        {
            error(strFmt(
                "@GLS70656",
                Ledger::name(budgetPlanGenerateContract.parmSourceLedgerRecId()),
                targetLedger.valueStr()));
            canClose = false;
        }

        // Validate BudgetPlanningProcess has been selected
        if (targetBudgetPlanningProcess.value() == 0)
        {
            error(strFmt("@SYS84753", targetBudgetPlanningProcess.labelText()));
            canClose = false;
        }
        else
        {
            canClose = canClose && this.validateBudgetPlanningProcess();
        }

        switch (budgetPlanTransferTypeControl.selection())
        {
            case BudgetPlanGenerateType::NewBudgetPlan:
                // Validate budget plan name
                if (targetName.valueStr() == '')
                {
                    error(strFmt("@SYS84753", targetName.labelText()));
                    canClose = false;
                }

                // Validate responsibility center
                if (targetResponsibilityCenter.value() == 0)
                {
                    error(strFmt("@SYS84753", targetResponsibilityCenter.labelText()));
                    canClose = false;
                }
                else
                {
                    canClose = canClose && this.validateResponsibilityCenter();
                }

                // Validate preparer
                if (targetBudgetPlanPreparer.value() == 0)
                {
                    error(strFmt("@SYS84753", targetBudgetPlanPreparer.labelText()));
                    canClose = false;
                }
                else
                {
                    canClose = canClose && BudgetPlan::checkBudgetPlanHeaderForWrite(
                        targetBudgetPlanningProcess.value(),
                        targetResponsibilityCenter.value(),
                        this.getBudgetPlanningStageRecId(),
                        targetBudgetPlanPreparer.value());
                }
                break;

            case BudgetPlanGenerateType::ReplaceBudgetPlan:
            case BudgetPlanGenerateType::UpdateBudgetPlan:
                // Validate budget plan document number
                if (targetBudgetPlanningDocumentNumber.value() == 0)
                {
                    error(strFmt("@SYS84753", targetBudgetPlanningDocumentNumber.label()));
                    canClose = false;
                }
                else
                {
                    canClose = canClose && this.validateBudgetPlanDocumentNumber();
                }
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        // Validate that a Scenario has been selected
        if (targetBudgetPlanScenario.text() == BudgetPlanningConstants::emptyString)
        {
            if (targetBudgetPlanScenario.mandatory())
            {
                error(strFmt("@SYS84753", targetBudgetPlanScenario.labelText()));
                canClose = false;
            }
        }
        else if (canClose && !this.validateTargetBudgetPlanScenario())
        {
            // Validate the scenario only at the end since it is dependent on other fields
            // being populated first
            // Clear the invalid value
            targetBudgetPlanScenario.text(BudgetPlanningConstants::emptyString);
            canClose = false;
        }

        return canClose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFactorField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the budget plan factor control.
    /// </summary>
    /// <param name="_factorControl">
    /// The control whose value is to be validated.
    /// </param>
    /// <returns>
    /// true if the control value is valid; otherwise, false.
    /// </returns>
    public boolean validateFactorField(FormRealControl _factorControl)
    {
        Factor  factor;
        boolean isValid = true;

        factor = _factorControl.realValue();

        if (!factor)
        {
            isValid = checkFailed(strFmt("@SYS84753", _factorControl.labelText()));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateResponsibilityCenter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of responsibility center control.
    /// </summary>
    /// <returns>
    /// true when no error found; otherwise, false.
    /// </returns>
    public boolean validateResponsibilityCenter()
    {
        boolean          isValid = true;
        BudgetPlanHeader budgetPlanHeader;

        if (budgetPlanTransferTypeControl.selection() == BudgetPlanGenerateType::NewBudgetPlan)
        {
            budgetPlanHeader.BudgetPlanningProcess = targetBudgetPlanningProcess.value();

            if (budgetPlanHeader.BudgetPlanningProcess)
            {
                budgetPlanHeader.BudgetingOrganization = targetResponsibilityCenter.value();
                budgetPlanHeader.BudgetPlanPreparer    = targetBudgetPlanPreparer.value();

                budgetPlan.parmBudgetPlanHeader(budgetPlanHeader);

                isValid = budgetPlan.validateField(fieldNum(BudgetPlanHeader, BudgetingOrganization));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTargetBudgetPlanScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the budget plan scenario control.
    /// </summary>
    /// <returns>
    /// true if the control value is valid; otherwise, false.
    /// </returns>
    public boolean validateTargetBudgetPlanScenario()
    {
        BudgetPlanScenario          budgetPlanScenario = BudgetPlanScenario::findByLocalizedName(targetBudgetPlanScenario.text());
        BudgetPlanningStageRule     budgetPlanningStageRule = BudgetPlanningStageRule::findByProcessOrganizationStage(
                                                                targetBudgetPlanningProcess.value(),
                                                                targetResponsibilityCenter.value(),
                                                                this.getBudgetPlanningStageRecId());
        boolean isValid = BudgetPlanLayoutHelper::validateScenarioExistsInLayout(budgetPlanningStageRule.Layout, budgetPlanScenario.Name);

        if (isValid)
        {
            if (!budgetPlanningStageRule.CanModifyBudgetPlanLines)
            {
                isValid = checkFailed("@GLS150037");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTargetBudgetPlanScenarioQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the quantity budget plan scenario control.
    /// </summary>
    /// <returns>
    /// true if the control value is valid; otherwise, false.
    /// </returns>
    public boolean validateTargetBudgetPlanScenarioQuantity()
    {
        boolean                     isValid = true;
        BudgetPlanScenario          budgetPlanScenario;
        BudgetPlanningStageRecId    budgetPlanningStageRecId;
        BudgetPlanningStageRule     budgetPlanningStageRule;

        if (targetBudgetPlanScenarioQuantity.text())
        {
            budgetPlanningStageRecId = this.getBudgetPlanningStageRecId();

            budgetPlanScenario = BudgetPlanScenario::findByLocalizedName(targetBudgetPlanScenarioQuantity.text());
            budgetPlanningStageRule = BudgetPlanningStageRule::findByProcessOrganizationStage(
                                                                targetBudgetPlanningProcess.value(),
                                                                targetResponsibilityCenter.value(),
                                                                budgetPlanningStageRecId);
            isValid = BudgetPlanLayoutHelper::validateScenarioExistsInLayout(budgetPlanningStageRule.Layout, budgetPlanScenario.Name);

            if (isValid)
            {
                if (budgetPlanScenario.UnitOfMeasureClass != UnitOfMeasureClass::Quantity)
                {
                    isValid = checkFailed(strFmt("@Budget:BudgetPlanning_GenerateFromProjectForecasts_Validation_UnitOfMeasureClassMustBeQuantity", targetBudgetPlanScenarioQuantity.label()));
                }
                else if (!budgetPlanningStageRule.CanModifyBudgetPlanLines)
                {
                    isValid = checkFailed("@Budget:BudgetPlanning_BudgetPlanLines_Validation_LineCouldNotBeAdded");
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceFiscalYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the lookup of the fiscal calendar year control.
    /// </summary>
    /// <param name="_targetFiscalCalendarYearControl">
    /// The control on which lookup need is performed.
    /// </param>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the budget planning process.
    /// </param>
    /// <returns>
    /// The selected <c>FiscalCalendarYear</c> record.
    /// </returns>
    public static Common lookupReferenceFiscalYear(FormReferenceGroupControl _targetFiscalCalendarYearControl, BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        Common                  selectedRecord;
        Query                   lookupQuery;
        QueryBuildDataSource    fiscalCalendarYearDS;
        BudgetPlanningProcess   budgetPlanningProcess;
        SysReferenceTableLookup sysTableLookup;

        budgetPlanningProcess = BudgetPlanningProcess::find(_budgetPlanningProcessRecId);

        sysTableLookup = SysReferenceTableLookup::newParameters(
                                                                tableNum(FiscalCalendarYear),
                                                                _targetFiscalCalendarYearControl,
                                                                true);
        lookupQuery = new Query();

        sysTableLookup.addLookupfield(fieldNum(FiscalCalendarYear, Name));
        fiscalCalendarYearDS = lookupQuery.addDataSource(tableNum(FiscalCalendarYear));

        fiscalCalendarYearDS.addRange(fieldNum(FiscalCalendarYear, RecId)).value(SysQuery::value(0));

        sysTableLookup.parmQuery(lookupQuery);

        return selectedRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>BudgetPlanGenerateForm</c> form runner class based upon the type of <c>BudgetPlanGenerateContract</c> passed in.
    /// </summary>
    /// <param name="_contract">
    /// The <c>BudgetPlanGenerateContract</c> for the type of <c>BudgetPlanGenerateForm</c> class to return.
    /// </param>
    /// <returns>
    /// An instance of the <c>BudgetPlanGenerateForm</c> class.
    /// </returns>
    public static BudgetPlanGenerateForm newFromContract(BudgetPlanGenerateContract _contract)
    {
        BudgetPlanGenerateForm  budgetPlanGenerateForm;

        switch (classIdGet(_contract))
        {
            case classNum(BudgetPlanGenerateContractGenJour):
                budgetPlanGenerateForm = BudgetPlanGenerateFormGenJour::construct();
                break;

            case classNum(BudgetPlanGenerateContractBudgetPlan):
                budgetPlanGenerateForm = BudgetPlanGenerateFormBudgetPlan::construct();
                break;

            case classNum(BudgetPlanGenerateContractAsset):
                budgetPlanGenerateForm = BudgetPlanGenerateFormAsset::construct();
                break;

            case classNum(BudgetPlanGenerateContractHcm):
                budgetPlanGenerateForm = BudgetPlanGenerateFormHcm::construct();
                break;

            case classNum(BudgetPlanGenerateContractProjectForecast):
                budgetPlanGenerateForm = BudgetPlanGenerateFormProjectForecast::construct();
                break;

            case classNum(BudgetPlanGenerateContractDemandForecast):
                budgetPlanGenerateForm = BudgetPlanGenerateFormDemandForecast::construct();
                break;

            case classNum(BudgetPlanGenerateContractSupplyForecast):
                budgetPlanGenerateForm = BudgetPlanGenerateFormSupplyForecast::construct();
                break;

            case classNum(BudgetPlanGenerateContractBudgetTransaction):
                budgetPlanGenerateForm = BudgetPlanGenerateFormBudgetTransaction::construct();
                break;

            default :
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                BudgetPlanGenerateForm::newFromContractDelegate(_contract, result);

                if (result.hasResult())
                {
                    budgetPlanGenerateForm = result.result() as BudgetPlanGenerateForm;
                }
                else
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
        }

        budgetPlanGenerateForm.parmBudgetPlanGenerateContract(_contract);

        return budgetPlanGenerateForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromContractDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting a new instance of <c>BudgetPlanGenerateForm</c>.
    /// </summary>
    /// <param name = "_contract">The <c>BudgetPlanGenerateContract</c> for the type of <c>BudgetPlanGenerateForm</c> class to return.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide default <c>BudgetPlanGenerateForm</c> object.</param>
    static delegate void newFromContractDelegate(BudgetPlanGenerateContract _contract, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultValuesWhenCalledFromBudgetPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values of target tab contols when the form is called from budget plan.
    /// </summary>
    protected void setDefaultValuesWhenCalledFromBudgetPlan()
    {
        if (isCalledFromBudgetPlan)
        {
            targetBudgetPlanningDocumentNumber.value(targetBudgetPlanHeader.RecId);
            targetBudgetPlanPreparer.value(targetBudgetPlanHeader.BudgetPlanPreparer);
            targetBudgetPlanningProcess.value(targetBudgetPlanHeader.BudgetPlanningProcess);
            targetResponsibilityCenter.value(targetBudgetPlanHeader.BudgetingOrganization);
            budgetPlanTransferTypeControl.selection(BudgetPlanGenerateType::UpdateBudgetPlan);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>