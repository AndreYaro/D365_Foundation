<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAccountBalance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankAccountBalances</c> class is used to track bank balance aggregations.
/// </summary>
internal final class BankAccountBalance
{
    private CompanyBankAccountId bankAccountId;
    private AmountCur amountCurBalance;
    private AmountMST amountMstBalance;
    private AmountMSTSecondary reportingCurrencyBalance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmBankAccountId</Name>
				<Source><![CDATA[
    internal CompanyBankAccountId parmBankAccountId(CompanyBankAccountId _bankAccountId = bankAccountId)
    {
        bankAccountId = _bankAccountId;
        return bankAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountCurBalance</Name>
				<Source><![CDATA[
    internal AmountCur parmAmountCurBalance(AmountCur _amountCurBalance = amountCurBalance)
    {
        amountCurBalance = _amountCurBalance;
        return amountCurBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountMstBalance</Name>
				<Source><![CDATA[
    internal AmountMST parmAmountMstBalance(AmountMST _amountMstBalance = amountMstBalance)
    {
        amountMstBalance = _amountMstBalance;
        return amountMstBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingCurrencyBalance</Name>
				<Source><![CDATA[
    internal AmountMSTSecondary parmReportingCurrencyBalance(AmountMSTSecondary _reportingCurrencyBalance = reportingCurrencyBalance)
    {
        reportingCurrencyBalance = _reportingCurrencyBalance;
        return reportingCurrencyBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BankAccountBalance</c> class and initializes the values based on previously calculated balances.
    /// </summary>
    /// <param name = "_bankAccountId">The bank account ID.</param>
    /// <param name = "_amountCurBalance">The currency amount balance.</param>
    /// <param name = "_amountMstBalance">The MST amount balance.</param>
    /// <param name = "_reportingCurrencyBalance">The reporting currency balance.</param>
    /// <returns>A new initialized instance of the <c>BankAccountBalance</c> class.</returns>
    internal static BankAccountBalance newFromBalances(
        CompanyBankAccountId _bankAccountId,
        AmountCur _amountCurBalance,
        AmountMST _amountMstBalance,
        AmountMSTSecondary _reportingCurrencyBalance)
    {
        BankAccountBalance bankAccountBalance = new BankAccountBalance();
        bankAccountBalance.parmBankAccountId(_bankAccountId);
        bankAccountBalance.parmAmountCurBalance(_amountCurBalance);
        bankAccountBalance.parmAmountMstBalance(_amountMstBalance);
        bankAccountBalance.parmReportingCurrencyBalance(_reportingCurrencyBalance);

        return bankAccountBalance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>