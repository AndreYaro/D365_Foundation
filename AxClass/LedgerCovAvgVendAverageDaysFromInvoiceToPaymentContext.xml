<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCovAvgVendAverageDaysFromInvoiceToPaymentContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[ExportMetadata(enumStr(LedgerCovAvgAverageDaysSelector), LedgerCovAvgAverageDaysSelector::VendAverageDaysFromInvoiceToPayment)]
[Export(identifierStr(Dynamics.AX.Application.LedgerCovAvgIExecutionContext))]
internal final class LedgerCovAvgVendAverageDaysFromInvoiceToPaymentContext implements LedgerCovAvgIExecutionContext
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTableBuffer</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public LedgerCovAvgAverageDaysMap getTableBuffer()
    {
        LedgerCovAvgVendDaysFromInvoiceToPayment daysToPay;
        return daysToPay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPopulatedAverageTmpTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public LedgerCovAvgAverageDaysMap getPopulatedAverageTmpTable(TransDate _startOfMonth, TransDate _endOfMonth)
    {
        LedgerCovAvgVendDaysFromInvoiceToPayment daysToPayTmp;

        boolean isSettlementClosedDateEnabled = this.isSettlementClosedDateEnabled(_startOfMonth);

        daysToPayTmp.setTempDB();

        LedgerCovAvgPopulatorHelper::disableAOSMethodsForInsertAndUpdate(daysToPayTmp);

        if (isSettlementClosedDateEnabled)
        {
            LedgerCovAvgVendSettlementDaysFromDueDateToPaymentDateView vendSettlement;

            insert_recordset daysToPayTmp (Vendor, StartOfMonth, TransactionCount, NumberOfDaysFromInvoiceToPayment)
            select AccountNum, _startOfMonth, count(RecId), sum(DaysFromDueDateToPaymentDate) from vendSettlement
                group by AccountNum
                where vendSettlement.ClosedDate >= _startOfMonth && vendSettlement.ClosedDate <= _endOfMonth;
        }
        else
        {
            LedgerCovAvgVendTransDaysFromDueDateToPaymentDateView vendTrans;

            insert_recordset daysToPayTmp (Vendor, StartOfMonth, TransactionCount, NumberOfDaysFromInvoiceToPayment)
            select AccountNum, _startOfMonth, count(RecId), sum(DaysFromDueDateToPaymentDate) from vendTrans
                group by AccountNum
                where vendTrans.Closed >= _startOfMonth && vendTrans.Closed <= _endOfMonth;
        }

        return daysToPayTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSettlementClosedDateEnabled</Name>
				<Source><![CDATA[
    private boolean isSettlementClosedDateEnabled(TransDate _startOfMonth)
    {
        VendSettlement vendSettlement;

        select firstonly RecId
            from vendSettlement
            where vendSettlement.ClosedDate < _startOfMonth
                && vendSettlement.ClosedDate != dateNull();

        return vendSettlement.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAverageTableAccountField</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FieldId getAverageTableAccountField()
    {
        return fieldNum(LedgerCovAvgVendDaysFromInvoiceToPayment, Vendor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAverageTableStartOfMonthField</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FieldId getAverageTableStartOfMonthField()
    {
        return fieldNum(LedgerCovAvgVendDaysFromInvoiceToPayment, StartOfMonth);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAverageTableTransactionCountField</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FieldId getAverageTableTransactionCountField()
    {
        return fieldNum(LedgerCovAvgVendDaysFromInvoiceToPayment, TransactionCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAverageTableNumberOfDaysField</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FieldId getAverageTableNumberOfDaysField()
    {
        return fieldNum(LedgerCovAvgVendDaysFromInvoiceToPayment, NumberOfDaysFromInvoiceToPayment);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>