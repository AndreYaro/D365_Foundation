<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsInventMov_Work</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsInventMov_Work</c> class is used as a data carrier when updating work transactions.
/// </summary>
public class WhsInventMov_Work extends InventMovement
{
    WHSWorkInventTrans      workInventTrans;
    UnknownNoYes            useLiteProcess; // Access using canUseLiteProcess() method
    boolean                 skipUseOfRecordViewCache;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeUpdatedEstimated</Name>
				<Source><![CDATA[
    protected boolean canBeUpdatedEstimated()
    {
        return WHSInventTransCreationPolicy::mustInventTransBeCreated(workInventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipUseOfRecordViewCache</Name>
				<Source><![CDATA[
    public boolean parmSkipUseOfRecordViewCache(boolean _skipUseOfRecordViewCache = skipUseOfRecordViewCache)
    {
        skipUseOfRecordViewCache = _skipUseOfRecordViewCache;

        return skipUseOfRecordViewCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructRecordViewCache</Name>
				<Source><![CDATA[
    public RecordViewCache constructRecordViewCache()
    {
        if (this.parmSkipUseOfRecordViewCache())
        {
            return null;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the default balance sheet account.
	/// </summary>
	/// <returns>
	/// The default balance sheet account.
	/// </returns>
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (!cacheAccountBalanceSheet)
        {
            if (this.transQty() >= 0)
            {
                cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventReceipt));
            }
            else
            {
                cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventIssue));
            }
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the default operations account.
	/// </summary>
	/// <returns>
	/// The default operations account.
	/// </returns>
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (!cacheAccountOperations)
        {
            if (this.transQty() >= 0)
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventInterUnitPayable));
            }
            else
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventInterUnitReceivable));
            }
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRemainPhysical</Name>
				<Source><![CDATA[
	/// <summary>
	/// Adds to remaining quantity of the work transaction.
	/// </summary>
	/// <param name="_inventQty">
	/// Quantity to be added.
	/// </param>
    public void addRemainPhysical(InventQty  _inventQty)
    {
        if (!this.pdsCWItem())
        {
            workInventTrans.InventQtyRemain += _inventQty * this.transSign();
        }
        else
        {
            workInventTrans.RemainingTransactionWeight += _inventQty * this.transSign();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAddRemainPhysical</Name>
				<Source><![CDATA[
    public void pdsCWAddRemainPhysical(PdsCWInventQty _cwQty)
    {
        if (this.pdsCWItem())
        {
            workInventTrans.InventQtyRemain += _cwQty * this.transSign();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReservationFormBeShown</Name>
				<Source><![CDATA[
	/// <summary>
	/// Determines whether the reservation form should be shown.
	/// </summary>
	/// <returns>
	/// True if the reservation form should be shown, false otherwise.
	/// </returns>
    public boolean canReservationFormBeShown()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateInventStatusBlocking</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the movment can update inventory status blocking transactions
    /// </summary>
    /// <returns>
    ///     Always returns false.
    /// </returns>
    public boolean canUpdateInventStatusBlocking()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateEstimated</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if the movement is in estimated status.
	/// </summary>
	/// <param name="_updateNow">
	/// The <c>InventUpd_Estimated</c> instance.
	/// </param>
	/// <param name="_this_Orig">
	/// Original movement.
	/// </param>
	/// <returns>
	/// True if the movement is in estimated status, false otherwise.
	/// </returns>
    public boolean checkUpdateEstimated(InventUpd_Estimated    _updateNow,
                                        InventMovement         _this_Orig)
    {
        return super(_updateNow, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePicked</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if the movement is in picked status.
	/// </summary>
	/// <param name="_updateNow">
	/// The <c>InventUpd_Picked</c> instance.
	/// </param>
	/// <returns>
	/// True if the movement is in picked status, false otherwise.
	/// </returns>
    public boolean checkUpdatePicked(InventUpd_Picked _updateNow)
    {
        boolean ret;

        ret = super(_updateNow);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateStandard</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if the movement is in standard status.
	/// </summary>
	/// <param name="_transDate">
	/// Movement transaction date.
	/// </param>
	/// <param name="_checkItemPostingDate">
	/// Determines whether to check item posting date, no by default.
	/// </param>
	/// <returns>
	/// True if the movement is in standard status, false otherwise.
	/// </returns>
    public boolean checkUpdateStandard(TransDate _transDate, NoYes _checkItemPostingDate = NoYes::No)
    {
        boolean ok = true;

        if (!this.inventTable().checkValid(this.itemId()))
        {
            ok = false;
        }

        if (!this.inventItemOrderSetupMap().checkNotStopped())
        {
            ok = false;
        }

        if (!this.inventItemInventSetup().checkNotStopped())
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
	/// <summary>
	/// Changes to default dimensions.
	/// </summary>
	/// <returns>
	/// The default dimensionss to be changed.
	/// </returns>
    public DimensionDefault defaultDimension()
    {
        return InventSite::changeDimension(this.inventTable().DefaultDimension, this.inventdim().InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimension</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the default dimensions of the inventory item.
	/// </summary>
	/// <returns>
	/// The default dimensions of the inventory item.
	/// </returns>
    public DimensionDefault dimension()
    {
        return this.inventTable().DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the inventory item id.
	/// </summary>
	/// <returns>
	/// The inventory item id.
	/// </returns>
    public ItemId itemId()
    {
        return workInventTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAutoReserved</Name>
				<Source><![CDATA[
    public boolean mustBeAutoReserved()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedFinancially</Name>
				<Source><![CDATA[
	/// <summary>
	/// Determines whether the work transaction must be booked financially.
	/// </summary>
	/// <returns>
	/// True if the work transaction must be booked financially.
	/// </returns>
    public boolean mustBeBookedFinancially()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
	/// <summary>
	/// Determines whether the work transaction must be booked physically.
	/// </summary>
	/// <returns>
	/// True if the work transaction must be booked physically.
	/// </returns>
    public boolean mustBeBookedPhysically()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeRemainControlled</Name>
				<Source><![CDATA[
	/// <summary>
	/// Determines whether the work transaction must be remain controlled.
	/// </summary>
	/// <returns>
	/// True if the work transaction must be remain controlled.
	/// </returns>
    public boolean mustBeRemainControlled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateInventTableCostPrice</Name>
				<Source><![CDATA[
    public boolean mustUpdateInventTableCostPrice()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
	/// <summary>
	/// Constructor method of this class with given arguments.
	/// </summary>
	/// <param name="_workQuarantine">
	/// Work transaction to be set to instance.
	/// </param>
	/// <param name="_inventType">
	/// Inventory type to be set to instance.
	/// </param>
    void new(WHSWorkInventTrans     _workInventTrans,
             InventType             _inventType = workInventTrans.type())
    {
        workInventTrans = _workInventTrans;
        useLiteProcess  = UnknownNoYes::Unknown;

        super(_workInventTrans, _inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overDeliveryPct</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the over delivery percentage.
	/// </summary>
	/// <returns>
	/// The over delivery percentage.
	/// </returns>
    public Percent overDeliveryPct()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsMustConsiderBatchAttrib</Name>
				<Source><![CDATA[
    public PdsBatchAttribAutoRes pdsMustConsiderBatchAttrib()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsOverrideFEFO</Name>
				<Source><![CDATA[
    public PdsOverrideFEFO pdsOverrideFEFO()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the operations posting type.
	/// </summary>
	/// <returns>
	/// The operations posting type.
	/// </returns>
    public LedgerPostingType postingOperations()
    {
        if (this.transQty() >= 0)
        {
            return LedgerPostingType::InventInterUnitPayable;
        }

        return LedgerPostingType::InventInterUnitReceivable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingPhysical</Name>
				<Source><![CDATA[
	/// <summary>
	/// Obsolete method.
	/// </summary>
	/// <returns>
	/// Error.
	/// </returns>
	/// <exception cref="Exception::Error">
	/// Illegal use of this class.
	/// </exception>
    public LedgerPostingType postingPhysical()
    {
        throw error("@WAX437");
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
	/// <summary>
	/// Calculates the physical remaining quantity of the transaction.
	/// </summary>
	/// <returns>
	/// The physical remaining quantity of the transaction.
	/// </returns>
    public InventQty remainPhysical()
    {
        return (this.pdsCWItem() ? workInventTrans.RemainingTransactionWeight : workInventTrans.InventQtyRemain) * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainPhysical</Name>
				<Source><![CDATA[
    public PdsCWInventQty pdsCWRemainPhysical()
    {
        if (this.pdsCWItem())
        {
            return workInventTrans.InventQtyRemain * this.transSign();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservationHierarchyLevelStrategyList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list containing <c>WHSReservationHierarchyLevelStrategy</c> instances for this movement.
    /// </summary>
    /// <param name="_inventDimReservationCriteria">
    /// An <c>InventDim</c> buffer with the values that are required to be reserved.
    /// </param>
    /// <returns>
    /// A list containing <c>WHSReservationHierarchyLevelStrategy</c> instances for this movement.
    /// </returns>
    public List reservationHierarchyLevelStrategyList(InventDim _inventDimReservationCriteria)
    {
        List reservationStrategyList;

        reservationStrategyList = new List(Types::Class);

        reservationStrategyList.addEnd(WHSReservationHierarchyLevelStrategy::newFromStrategyType(WHSReservationHierarchyLevelStrategyType::None, this.inventTable(),_inventDimReservationCriteria));

        return reservationStrategyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPhysical</Name>
				<Source><![CDATA[
	/// <summary>
	/// Sets physically remainig quantity of the transactio.
	/// </summary>
	/// <param name="_inventQty">
	/// Quantity to be set.
	/// </param>
    public void setRemainPhysical(InventQty  _inventQty)
    {
        if (!this.pdsCWItem())
        {
            workInventTrans.InventQtyRemain = _inventQty * this.transSign();
        }
        else
        {
            workInventTrans.RemainingTransactionWeight = _inventQty * this.transSign();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetRemainPhysical</Name>
				<Source><![CDATA[
    public void pdsCWSetRemainPhysical(PdsCWInventQty _cwQty)
    {
        if (this.pdsCWItem())
        {
            workInventTrans.InventQtyRemain = _cwQty * this.transSign();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
	/// <summary>
	/// Sets the quantity of the work transaction.
	/// </summary>
	/// <param name="_qtyInvent">
	/// Quantity to be set.
	/// </param>
    public void setTransQty(InventQty _qtyInvent)
    {
        if (!this.pdsCWItem())
        {
            workInventTrans.Qty = _qtyInvent * this.transSign();
        }
        else
        {
            workInventTrans.TransactionWeight = _qtyInvent * this.transSign();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
	/// <summary>
	/// Converts transaction datetime to date.
	/// </summary>
	/// <returns>
	/// The transaction date.
	/// </returns>
    public TransDate transDate()
    {    
        if (WHSWorkTransactionDateCalculatorFlight::instance().isEnabled())
        {
            return WHSWorkTransactionDateCalculator::newFromMovement(this).calculateDate(workInventTrans.TransDateTime);
        }

        return DateTimeUtil::date(workInventTrans.TransDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Obsolete method. Please use InventTransId method.
	/// </summary>
	/// <returns>
	/// Error.
	/// </returns>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when this method is used. Please override InventTransId method.
	/// </exception>
    public InventTransId transId()
    {
        throw error(strFmt("@SYS18885", 'InventTransId'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
	/// <summary>
	/// Calculates the total quantity of the transaction.
	/// </summary>
	/// <returns>
	/// The total quantity of the transaction.
	/// </returns>
    public InventQty transQty()
    {
        return (this.pdsCWItem() ? workInventTrans.TransactionWeight : workInventTrans.Qty) * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWTransQty</Name>
				<Source><![CDATA[
    public PdsCWInventQty pdsCWTransQty()
    {
        if (this.pdsCWItem())
        {
            return workInventTrans.Qty * this.transSign();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the id of the referenced work transaction.
	/// </summary>
	/// <returns>
	/// The referenced work transaction id.
	/// </returns>
    public InventTransRefId transRefId()
    {
        return workInventTrans.WorkId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the transaction type.
	/// </summary>
	/// <returns>
	/// The transaction type.
	/// </returns>
    public InventTransType transType()
    {
        return InventTransType::WHSWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    public void updateBuffer(boolean _updateReservation = true)
    {
        InventUpd_Estimated     estimated;

        estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(workInventTrans));
        estimated.updateNow();

        workInventTrans.doUpdate();

        if (estimated && _updateReservation)
        {
            estimated.updateReservation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseLiteProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the work can use lite financial update process.
    /// </summary>
    /// <returns>
    /// true if the work can use lite financial update process; otherwise, false.
    /// </returns>
    public boolean canUseLiteProcess()
    {
        boolean canUseLite;

        if (useLiteProcess == UnknownNoYes::Unknown)
        {
            canUseLite = InventDim::isInventDimEqualFinancialDim(
                            InventDimGroupSetup::newItemId(workInventTrans.ItemId),
                            InventDim::find(workInventTrans.InventDimIdFrom),
                            InventDim::find(workInventTrans.InventDimIdTo));

            useLiteProcess = canUseLite             ?
                                UnknownNoYes::Yes   :
                                UnknownNoYes::No;
        }

        return useLiteProcess == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>WHSWorkInventTrans</c> record for this work movement.
    /// </summary>
    /// <returns>
    /// The <c>WHSWorkInventTrans</c> record for this work movement.
    /// </returns>
    public WHSWorkInventTrans workInventTrans()
    {
        return workInventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBlockingCausePolicyActive</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isBlockingCausePolicyActive(WMSBlockingCauseId _blockingCauseId)
    {
        boolean ret = super(_blockingCauseId);

        if (WHSBlockingCauseWorkPolicyFlight::instance().isEnabled())
        {
            ret = ret && WMSBlockingCause::find(_blockingCauseId).BlockingCausePolicy == WHSBlockingCausePolicy::AlsoUseForWarehouseWork;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>