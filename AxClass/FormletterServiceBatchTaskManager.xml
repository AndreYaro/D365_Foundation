<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormletterServiceBatchTaskManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>FormletterServiceBatchTaskManager</c> class manages the <c>FormletterService</c> class when
///    it is called from the batch framework.
/// </summary>
class FormletterServiceBatchTaskManager
{
    FormletterType          formletterType;
    DocumentStatus          documentStatus;
    FormLetter              formLetter;
    FormLetterContract      formLetterContract;
    FormletterParmTable     formletterParmTable;
    FormletterParmUpdate    formletterParmUpdate;
    ParmId                  parmId;
    StartDateTime           startDateTimeUpdate;

    RefRecId                batchJobId;
    RefRecId                batchTaskId;
    BatchGroupId            batchGroupId;

    int                     numberOfJournalsToPost;
    BatchHeader             batchHeader;
    boolean                 runningAsService;

    boolean                 forceSkipParmData;

    private FormLetterServiceInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFormletterParmDataBatchTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>FormletterParmDataCreateDataBatchTask</c> batch task and adds the batch task to the
    /// batch job.
    /// </summary>
    /// <param name="_recordMap">
    /// A map of the records that the task will process.
    /// </param>
    /// <param name="_endTask">
    /// The <c>FormletterParmDataRearrangeBatchTask</c> object that the
    /// <c>FormletterParmDataCreateDataBatchTask</c> object depends on in the batch framework.
    /// </param>
    protected void createFormletterParmDataBatchTask(
        Map                                     _recordMap,
        FormletterParmDataRearrangeBatchTask    _endTask)
    {
        FormletterParmDataCreateDataBatchTask task;
        FormLetterContract newFormletterContract = FormLetterContract::newFromPackedVersion(this.parmFormletterContract().pack(), this.parmFormletterType());
        newFormletterContract.parmDataSourceRecordMapPacked(_recordMap.pack());

        task = FormletterParmDataCreateDataBatchTask::newTask(this.parmFormletterType(), newFormletterContract);
        this.initializeTask(task);

        batchHeader.addRuntimeTask(task, batchTaskId);
        batchHeader.addDependency(_endTask, task, BatchDependencyStatus::FinishedOrError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFormletterParmDataTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates batch tasks to handle creating parm table records.
    /// </summary>
    protected void createFormletterParmDataTasks()
    {
        FormletterBatchTaskSize         taskSize = this.maxNumberOfRecordsInListToPost();
        FormletterBatchTaskSizeLines    taskSizeNoOfLines = this.maxNumberOfRecordLinesInListToPost();
        Counter                         noOfRecords;
        QueryRun                        lateSelectionQueryRun;
        Map                             recordMap = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Record);
        RecId                           previousRecId;
        Common                          sourceTable;
        FormletterParmDataRearrangeBatchTask endTask;

        endTask = FormletterParmDataRearrangeBatchTask::newTask(this.parmFormletterType(), this.parmFormletterContract());
        this.initializeTask(endTask);
        
        batchHeader.addRuntimeTask(endTask, batchTaskId);

        lateSelectionQueryRun = this.getLateSelectionQuery();

        boolean useBatchTaskLineNumber = taskSizeNoOfLines > 0 && this.canSumUpLines(lateSelectionQueryRun);

        const int DataSourceNumberToUse = 1;
        const int DataSourceDocumentLineNumberToUse = 2;
        
        Query underlyingQuery = lateSelectionQueryRun.query();
        if (underlyingQuery && underlyingQuery.dataSourceCount() > 1)
        {
            Set dataSourceIdsToExtract = new Set(Types::Integer);
            dataSourceIdsToExtract.add(underlyingQuery.dataSourceNo(DataSourceNumberToUse).id());

            if (useBatchTaskLineNumber)
            {
                dataSourceIdsToExtract.add(underlyingQuery.dataSourceNo(DataSourceDocumentLineNumberToUse).id());
            }

            SysQuery::adjustQueryToExtractOnlyDataSources(underlyingQuery, dataSourceIdsToExtract);
        }

        Counter aggrNoOfLines;
        Counter docNoOfLines;
        Counter parmDataTasks;

        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().formLetterServiceTaskActivities().createFormletterParmDataTasks(taskSize, taskSizeNoOfLines, useBatchTaskLineNumber))
        {
            while (lateSelectionQueryRun.next())
            {
                //Execute the late selection query and create tasks
                sourceTable = lateSelectionQueryRun.getNo(DataSourceNumberToUse);
            
                if (useBatchTaskLineNumber)
                {
                    if (noOfRecords > 1 && aggrNoOfLines + docNoOfLines > taskSizeNoOfLines)
                    {
                        sourceTable = recordMap.lookup(noOfRecords);
                        recordMap.remove(noOfRecords);
                        this.createFormletterParmDataBatchTask(recordMap, endTask);
                        noOfRecords = 1;
                        aggrNoOfLines = 0;
                        recordMap = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Record);
                        recordMap.insert(noOfRecords, sourceTable);

                        parmDataTasks++;
                    }
            
                    if (sourceTable.RecId != previousRecId)
                    {
                        previousRecId = sourceTable.RecId;
                        noOfRecords++;
                        recordMap.insert(noOfRecords, sourceTable);
                        aggrNoOfLines += docNoOfLines;
                        docNoOfLines = 0;
                    }

                    if (lateSelectionQueryRun.changedNo(DataSourceDocumentLineNumberToUse))
                    {
                        docNoOfLines++;
                    }
                }
                else
                {
                    if (sourceTable.RecId != previousRecId)
                    {
                        previousRecId = sourceTable.RecId;
                        noOfRecords++;
                        recordMap.insert(noOfRecords, sourceTable);

                        if (noOfRecords == taskSize)
                        {
                            noOfRecords = 0;
                            this.createFormletterParmDataBatchTask(recordMap, endTask);
                            recordMap = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Record);

                            parmDataTasks++;
                        }
                    }
                }
            }

            if (noOfRecords)
            {
                this.createFormletterParmDataBatchTask(recordMap, endTask);

                parmDataTasks++;
            }

            activityContext
                .addCustomProperty('batchTasks', int642Str(parmDataTasks));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLateSelectionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method retrieves <c>QueryRun</c> for late selection.
    /// </summary>
    /// <returns><c>QueryRun</c> for late selection</returns>
    protected QueryRun getLateSelectionQuery()
    {
        return new QueryRun(this.parmFormletterContract().getLateSelectionQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFormletterServiceBatchTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>FormletterServiceBatchTask</c> batch task and adds the batch task.
    /// </summary>
    /// <param name="_parmTableRecordIdList">
    /// A list of the record ID values for the <c>FormletterParmTable</c> records that the
    /// <c>FormletterServiceBatchTask</c> batch task will post.
    /// </param>
    /// <param name="_formletterServiceEndBatchTask">
    /// The <c>FormletterServiceEndBatchTask</c> class on which the <c>FormletterServiceBatchTask</c> batch
    /// task can depend on in the batch framework.
    /// </param>
    protected void createFormletterServiceBatchTask(List _parmTableRecordIdList,FormletterServiceEndBatchTask _formletterServiceEndBatchTask)
    {
        FormletterServiceBatchTask      formletterServiceBatchTask;

        formletterServiceBatchTask = FormletterServiceBatchTask::newFormletter(formLetter,
                                                                               this.parmFormletterType(),
                                                                               this.parmDocumentStatus(),
                                                                               _parmTableRecordIdList.pack(),
                                                                               this.parmRunningAsService(),
                                                                               this.parmFormletterContract());

        this.initializeTask(formletterServiceBatchTask);

        batchHeader.addRuntimeTask(formletterServiceBatchTask, batchTaskId);

        if (this.doCreateFormletterServiceEndBatchTask())
        {
            batchHeader.addDependency(_formletterServiceEndBatchTask,formletterServiceBatchTask,BatchDependencyStatus::FinishedOrError);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateBatchTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether batch task needs to be created for the specified list
    /// </summary>
    /// <param name = "_formletterParmTable">
    /// A <c>FormLetterParmTable</c> record buffer.
    /// </param>
    /// <param name = "_previousFormletterParmTable">
    /// A <c>FormLetterParmTable</c> record buffer.
    /// </param>
    /// <param name = "_parmTableRecordIdList">
    /// A table record Id list.
    /// </param>
    /// <returns>
    /// true if  batch task needs to be created for the specified list; otherwise false.
    /// </returns>
    protected boolean mustCreateBatchTask(
        FormletterParmTable _formletterParmTable, 
        FormletterParmTable _previousFormletterParmTable,
        List _parmTableRecordIdList)
    {
        return (_parmTableRecordIdList.elements() >= this.maxNumberOfRecordsInListToPost() &&
            _previousFormletterParmTable.OrderId != _formletterParmTable.OrderId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateBatchTaskLineNumber</Name>
				<Source><![CDATA[
    internal boolean mustCreateBatchTaskLineNumber(
        FormletterParmTable _formletterParmTable,
        FormletterParmTable _previousFormletterParmTable,
        counter aggrNoOfLines)
    {
        return (_previousFormletterParmTable.OrderId != _formletterParmTable.OrderId && 
                aggrNoOfLines > this.maxNumberOfRecordLinesInListToPost());
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectParmTableRecordMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Collects the related <c>FormletterParmTable</c> record buffers.
    /// </summary>
    /// <param name = "_parmId">
    /// A <c>ParmId</c> value.
    /// </param>
    /// <returns>
    /// A map object where the key is an integer and the value is the record buffer.
    /// </returns>
    protected Map collectParmTableRecordMap(ParmId _parmId)
    {
        Map parmTableRecordMap = new Map(Types::Int64, Types::Record);

        while select formletterParmTable
            order by formletterParmTable.OrderId
            where formletterParmTable.ParmId         == _parmId
                && formletterParmTable.ParmJobStatus == ParmJobStatus::Waiting
        {
            parmTableRecordMap.insert(parmTableRecordMap.elements(), formletterParmTable);
        }

        return parmTableRecordMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectParmTableRecordAndParmLineCountMaps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Collects the related <c>FormletterParmTable</c> record buffers and the count of related <c>FormletterParmTable</c> record buffers .
    /// </summary>
    /// <param name = "_parmId">
    /// A <c>ParmId</c> value.
    /// </param>
    /// <returns>
    /// A container of two map objects: One where the key is an integer and the value is the record buffer and one where the key is an integer and the value is the number of related lines .
    /// </returns>
    /// <comment>
    /// Should always be overridden in a document type specific sub clas
    /// <comment>
    internal Map collectParmTableRecordAndParmLineCountMaps(ParmId _parmId)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterParmLineCount</Name>
				<Source><![CDATA[
    internal Counter formletterParmLineCount(ParmId _parmId, TradeLineRefId _tableRefId)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectParmTableRecordIdListForBatchTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Collects the <c>FormletterParmTable</c>'s records ids to a list for a batch task.
    /// </summary>
    /// <param name = "_parmTableRecordMap">
    /// A map object with the <c>FormletterParmTable</c> record buffers.
    /// </param>
    /// <returns>
    /// The <c>FormletterParmTable</c>'s records id list.
    /// </returns>
    protected List collectParmTableRecordIdListForBatchTask(Map _parmTableRecordMap)
    {
        MapEnumerator       mapEnumerator           = _parmTableRecordMap.getEnumerator();
        List                parmTableRecordIdList   = new List(typeName2Type(extendedTypeStr(RecId)));
        Set                 setKeyToRemove          = new Set(Types::Int64);
        FormletterParmTable previousFormletterParmTable;

        while (mapEnumerator.moveNext())
        {
            formletterParmTable = mapEnumerator.currentValue();

            if (previousFormletterParmTable)
            {                
                if (this.mustCreateBatchTask(formletterParmTable, previousFormletterParmTable, parmTableRecordIdList))
                {
                    break;
                }
            }

            previousFormletterParmTable = formletterParmTable.data();

            setKeyToRemove.add(mapEnumerator.currentKey());
            parmTableRecordIdList.addEnd(formletterParmTable.RecId);
        }

        this.parmTableRecordMapCleanup(_parmTableRecordMap, setKeyToRemove);

        return parmTableRecordIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectParmTableRecordIdListForBatchTaskLineNumber</Name>
				<Source><![CDATA[
    internal List collectParmTableRecordIdListForBatchTaskLineNumber(Map _parmTableRecordMap, Map _parmLineRecordCountMap)
    {
        MapEnumerator       mapEnumerator           = _parmTableRecordMap.getEnumerator();
        List                parmTableRecordIdList   = new List(typeName2Type(extendedTypeStr(RecId)));
        Set                 setKeyToRemove          = new Set(Types::Int64);
        FormletterParmTable previousFormletterParmTable;
        Counter             aggrNoOfLines;

        while (mapEnumerator.moveNext())
        {
            formletterParmTable = mapEnumerator.currentValue();
            aggrNoOfLines += _parmLineRecordCountMap.lookup(formletterParmTable.RecId);
            
            if (previousFormletterParmTable)
            {
                if (this.mustCreateBatchTaskLineNumber(formletterParmTable, previousFormletterParmTable, aggrNoOfLines))
                {
                    break;
                }
            }

            previousFormletterParmTable = formletterParmTable.data();

            setKeyToRemove.add(mapEnumerator.currentKey());
            parmTableRecordIdList.addEnd(formletterParmTable.RecId);
        }

        this.parmTableRecordMapCleanup(_parmTableRecordMap, setKeyToRemove);

        return parmTableRecordIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableRecordMapCleanup</Name>
				<Source><![CDATA[
    internal void parmTableRecordMapCleanup(Map _parmTableRecordMap, Set _setKeyToRemove)
    {
        SetEnumerator setEnumerator = _setKeyToRemove.getEnumerator();
        while (setEnumerator.moveNext())
        {
            _parmTableRecordMap.remove(setEnumerator.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFormletterServiceTasks</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates batch tasks if the multithreading feature can be used.
    /// </summary>
    protected void createFormletterServiceTasks()
    {
        FormletterServiceEndBatchTask   formletterServiceEndBatchTask;
        List                            parmTableRecordIdList;
        
        parmTableRecordIdList = new List(typeName2Type(extendedTypeStr(RecId)));
        this.initFormletterParmTable();
        if (this.doCreateFormletterServiceEndBatchTask())
        {
            formletterServiceEndBatchTask = FormletterServiceEndBatchTask::newFormLetter(formLetter,
                                                                                         this.parmFormletterType(),
                                                                                         this.parmDocumentStatus(),
                                                                                         parmId,
                                                                                         startDateTimeUpdate,
                                                                                         this.parmRunningAsService(),
                                                                                         this.parmFormletterContract());
            this.initializeTask(formletterServiceEndBatchTask);

            batchHeader.addRuntimeTask(formletterServiceEndBatchTask, batchTaskId);
        }

        boolean useBatchTaskLineNumber = this.maxNumberOfRecordLinesInListToPost() > 0;

        Map parmTableRecordMap; 
        Map parmLineRecordCountMap;

        if (useBatchTaskLineNumber)
        {
            Map tablesMap = this.collectParmTableRecordAndParmLineCountMaps(parmId);
            parmTableRecordMap = tablesMap.lookup(tableStr(FormletterParmTable));
            parmLineRecordCountMap = tablesMap.lookup(tableStr(FormletterParmLine));
        }
        else
        {
            parmTableRecordMap = this.collectParmTableRecordMap(parmId);
        }

        while (parmTableRecordMap.elements())
        {
            if (useBatchTaskLineNumber)
            {
                parmTableRecordIdList = this.collectParmTableRecordIdListForBatchTaskLineNumber(parmTableRecordMap, parmLineRecordCountMap);
            }
            else
            {
                parmTableRecordIdList = this.collectParmTableRecordIdListForBatchTask(parmTableRecordMap);
            }
            
            if (parmTableRecordIdList.elements())
            {
                this.createFormletterServiceBatchTask(parmTableRecordIdList, formletterServiceEndBatchTask);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates batch tasks when the multithreading feature can be used.
    /// </summary>
    /// <returns>
    /// true if the multithreading feature is used; otherwise, false.
    /// </returns>
    public boolean createTasks()
    {
        if ((formLetter || formLetterContract))
        {
            boolean enableParallelism = this.enableParallelism();

            using (var activityContext = this.instrumentationLogger().formLetterServiceTaskActivities().createTasks(enableParallelism))
            {
                if (enableParallelism)
                {
                    startDateTimeUpdate = DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()),DateTimeUtil::getUserPreferredTimeZone());
                    if (this.parmRunningAsService())
                    {
                        batchJobId = formLetterContract.parmBatchJobId();
                        batchGroupId = formLetterContract.parmBatchGroupId();
                        parmId = formLetterContract.parmParmId();
                    }
                    else
                    {
                        batchJobId = formLetter.parmBatchJobId();
                        batchGroupId = formLetter.parmBatchGroupId();
                        parmId = formLetter.parmId();
                    }

                    batchHeader = BatchHeader::construct(batchJobId);
                    batchTaskId = 0;

                    if (this.mustCreateParmData())
                    {
                        this.createFormletterParmDataTasks();
                    }
                    else
                    {
                        using (var activityContextServiceTasks = this.instrumentationLogger().formLetterServiceTaskActivities().createFormletterServiceTasks())
                        {
                            this.createFormletterServiceTasks();
                        }
                    }
                    batchHeader.save();

                    this.updateFormletterParmUpdate();
                }
            }
        }

        return batchHeader ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBatchTaskSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default number of records to add to a batch task.
    /// </summary>
    /// <returns>
    /// Always returns 5.
    /// </returns>
    protected FormletterBatchTaskSize defaultBatchTaskSize()
    {
        return 5;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBatchTaskLineNumberSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default number of record lines to add to a batch task.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    protected FormletterBatchTaskSizeLines defaultBatchTaskLineNumberSize()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCreateFormletterServiceEndBatchTask</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether to create a <c>FormletterServiceEndBatchTask</c> object.
    /// </summary>
    /// <returns>
    ///    true if a <c>FormletterServiceEndBatchTask</c> object should be created; otherwise, false.
    /// </returns>
    protected boolean doCreateFormletterServiceEndBatchTask()
    {
        if (this.parmRunningAsService())
        {
            return ((formLetterContract.parmPrintOut() == Printout::After && formLetterContract.parmPrintFormletter()) || formLetterContract.parmProforma());
        }
        else
        {
            return ((formLetter.printout() == Printout::After && formLetter.printFormLetter())|| formLetter.proforma());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableParallelism</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to use the parallelism feature.
    /// </summary>
    /// <returns>
    /// true if the parallelism feature will be used; otherwise, false.
    /// </returns>
    protected boolean enableParallelism()
    {
        if (this.parmRunningAsService())
        {
            return formLetterContract.getCanUseParallelism() && (this.parmNumberOfJournalsToPost() || this.mustCreateParmData());
        }
        else
        {
            return (formLetter.canMultiThread() && this.parmNumberOfJournalsToPost());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterParmTable</Name>
				<Source><![CDATA[
    protected void initFormletterParmTable()
    {
        var formLetterTypeInstance = FormletterTypeBase::singletonFromFormletterType(this.parmFormletterType());
        if (formLetterTypeInstance)
        {
            formletterParmTable = formLetterTypeInstance.initFormletterParmTable(this.parmDocumentStatus());
            formletterParmUpdate = formLetterTypeInstance.initFormletterParmUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxNumberOfRecordsInListToPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the maximum number of records to be added to the list of <c>FormletterParmTable</c> records
    ///    to be posted in a <c>FormletterServiceMultithread</c> class run by a
    ///    <c>FormletterServiceBatchTask</c> object.
    /// </summary>
    /// <returns>
    ///    5.
    /// </returns>
    protected FormletterBatchTaskSize maxNumberOfRecordsInListToPost()
    {
        FormletterBatchTaskSize taskSize;

        if (this.parmRunningAsService())
        {
            taskSize = formLetterContract.getOrderBatchTaskSize();
        }
        if (taskSize <= 0)
        {
            taskSize = this.defaultBatchTaskSize();
        }

        return taskSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxNumberOfRecordLinesInListToPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates maximum number of document lines to posted by each posting task.
    /// </summary>
    /// <returns>
    ///   An integer specifying the number of document lines.
    /// </returns>
    protected FormletterBatchTaskSizeLines maxNumberOfRecordLinesInListToPost()
    {
        FormletterBatchTaskSizeLines taskLineNumberSize;

        if (this.parmRunningAsService())
        {
            taskLineNumberSize = formLetterContract.getOrderBatchTaskLineNumberSize();
        }
        
        if (taskLineNumberSize <= 0)
        {
            taskLineNumberSize = this.defaultBatchTaskLineNumberSize();
        }

        return taskLineNumberSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether parm data will be created during the batch posting.
    /// </summary>
    /// <returns>
    /// true if parm data will be created; otherwise, false
    /// </returns>
    private boolean mustCreateParmData()
    {
        if (this.parmRunningAsService())
        {
            return !this.parmForceSkipParmData() && this.parmFormletterContract().parmLateSelection();
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus parmDocumentStatus(DocumentStatus _documentStatus = documentStatus)
    {
        documentStatus = _documentStatus;
        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForceSkipParmData</Name>
				<Source><![CDATA[
    public boolean parmForceSkipParmData(boolean _forceSkipParmData = forceSkipParmData)
    {
        forceSkipParmData = _forceSkipParmData;
        return forceSkipParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormletter</Name>
				<Source><![CDATA[
    public FormLetter parmFormletter(FormLetter _formLetter = formLetter)
    {
        formLetter = _formLetter;
        return formLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormletterContract</Name>
				<Source><![CDATA[
    public FormLetterContract parmFormletterContract(FormLetterContract _formLetterContract = formLetterContract)
    {
        formLetterContract = _formLetterContract;
        return formLetterContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormletterType</Name>
				<Source><![CDATA[
    public FormletterType parmFormletterType(FormletterType _formletterType = formletterType)
    {
        formletterType = _formletterType;
        return formletterType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberOfJournalsToPost</Name>
				<Source><![CDATA[
    public int parmNumberOfJournalsToPost(int _numberOfJournalsToPost = numberOfJournalsToPost)
    {
        numberOfJournalsToPOst = _numberOfJournalsToPost;

        return numberOfJournalsToPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunningAsService</Name>
				<Source><![CDATA[
    public boolean parmRunningAsService(boolean _runningAsService = runningAsService)
    {
        runningAsService = _runningAsService;
        return runningAsService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormletterParmUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>FormletterParmUpdate</c> record with start time and end time.
    /// </summary>
    /// <remarks>
    ///    The update of the <c>FormletterParmUpdate</c> record is only performed when there is not created a
    ///    end batch task. The end batch task updates the <c>FormletterParmUpdate</c> record.
    /// </remarks>
    protected void updateFormletterParmUpdate()
    {
        if (!this.doCreateFormletterServiceEndBatchTask())
        {
            if (formletterParmUpdate.TableId != tableNum(FormletterParmUpdate)) //Ensure that the map is initialized
            {
                ttsbegin;
                select firstonly forupdate formletterParmUpdate
                    where formletterParmUpdate.ParmId == parmId;

                if (formletterParmUpdate)
                {
                    formletterParmUpdate.StartDateTime = startDateTimeUpdate;
                    formletterParmUpdate.EndDateTime   = DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()),DateTimeUtil::getUserPreferredTimeZone());
                    formletterParmUpdate.update();
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FormletterServiceBatchTaskManager construct()
    {
        return new FormletterServiceBatchTaskManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormletterService</Name>
				<Source><![CDATA[
    public static FormletterServiceBatchTaskManager newFormletterService(FormLetter          _formLetter,
                                                                         DocumentStatus      _documentStatus,
                                                                         FormletterType      _formletterType,
                                                                         int                 _numberOfJournalsToPost,
                                                                         boolean             _runningAsService,
                                                                         FormLetterContract  _formLetterContract)
    {
        FormletterServiceBatchTaskManager formletterServiceBatchTaskManager;
        
        switch (_formletterType)
        {
            case FormletterType::Sales :
                if ((_documentStatus == DocumentStatus::Confirmation
                    || _documentStatus == DocumentStatus::PickingList
                    || _documentStatus == DocumentStatus::PackingSlip
                    || _documentStatus == DocumentStatus::Invoice)
                    && SalesParameters::find().OrderBatchTaskSizeLines > 0)
                {
                    formletterServiceBatchTaskManager = SalesFormletterServiceBatchTaskManager::newFromParm(_documentStatus, _formletterType);
                }
                break;

            case FormletterType::Purchase :
                if ((_documentStatus == DocumentStatus::PurchaseOrder
                    || _documentStatus == DocumentStatus::PackingSlip)
                    && PurchParameters::find().OrderBatchTaskSizeLines > 0)
                {
                    formletterServiceBatchTaskManager = PurchFormletterServiceBatchTaskManager::newFromParm(_documentStatus, _formletterType);
                }
                break;
        }

        if (!formletterServiceBatchTaskManager)
        {
            formletterServiceBatchTaskManager = FormletterServiceBatchTaskManager::construct();
        }

        formletterServiceBatchTaskManager.parmFormletter(_formLetter);
        formletterServiceBatchTaskManager.parmDocumentStatus(_documentStatus);
        formletterServiceBatchTaskManager.parmFormletterType(_formletterType);
        formletterServiceBatchTaskManager.parmNumberOfJournalsToPost(_numberOfJournalsToPost);
        formletterServiceBatchTaskManager.parmRunningAsService(_runningAsService);
        formletterServiceBatchTaskManager.parmFormletterContract(_formLetterContract);
        
        return formletterServiceBatchTaskManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSumUpLines</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal  boolean canSumUpLines(QueryRun _lateSelectionQueryRun)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal FormLetterServiceInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = FormLetterServiceInstrumentationLogger::createLoggerByType(this.parmFormletterType(), classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTask</Name>
				<Source><![CDATA[
    private void initializeTask(FormletterBatchTask _task)
    {
        _task.batchInfo().parmGroupId(batchGroupId);
        _task.batchInfo().parmCritical(batchHeader.parmCritical());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>