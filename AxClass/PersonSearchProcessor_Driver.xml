<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PersonSearchProcessor_Driver</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PersonSearchProcessor_Driver</c> class executes personal information search criteria against non-party drivers.
/// </summary>
[PersonSearchProcessorFactoryAttribute(PersonSearchModule::DriverLog)]
public class PersonSearchProcessor_Driver extends PersonSearchProcessor
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doSearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Search for drivers.
    /// </summary>
    public void doSearch()
    {
        if (PersonSearchCriteriaName::existAny(taskId))
        {
            this.createDriverResultByName();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDriverResultByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create driver results by fuzzy name search.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createDriverResultByName()
    {
        TMSDriverLog driverLog;
        PersonSearchCriteriaName personSearchCriteriaName;
        Set driverNameLicenseSet = new Set(Types::Container);

        while select personSearchCriteriaName
            where personSearchCriteriaName.TaskId == taskId
        {
            Query query = new Query();
            query.allowCrossCompany(true);

            QueryBuildDataSource driverDS = query.addDataSource(tableNum(TMSDriverLog));

            str queryValue = this.buildQueryString('', personSearchCriteriaName.FirstName);
            queryValue = this.buildQueryString(queryValue, personSearchCriteriaName.MiddleName);
            queryValue = this.buildQueryString(queryValue, personSearchCriteriaName.LastName);

            if (queryValue)
            {
                driverDS.addRange(fieldNum(TMSDriverLog, DriverName)).value(queryValue);

                QueryRun queryRun = new QueryRun(query);
                while (queryRun.next())
                {
                    DirPartyNumber dirPartyNumber;

                    driverLog = queryRun.get(tableNum(TMSDriverLog));

                    if (driverLog)
                    {
                        boolean isUniqueNameLicense = this.isDriverNameLicenseProcessed(driverLog, driverNameLicenseSet);

                        if (isUniqueNameLicense)
                        {
                            PersonSearchResult::findOrCreateResult(
                            taskId,
                            PersonSearchResultCategory::DriverLog,
                            driverLog.RecId,
                            tableNum(TMSDriverLog),
                            driverLog.DataAreaId,
                            '');
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryString</Name>
				<Source><![CDATA[
    private str buildQueryString(str _baseValue, str _nextValue)
    {
        str concatValue;

        if (_baseValue && _nextValue)
        {
            concatValue = strFmt('%1,*%2*', _baseValue, queryValue(_nextValue));
        }
        else if (_nextValue)
        {
            concatValue = strFmt('*%1*', queryValue(_nextValue));
        }
        else if (_baseValue)
        {
            concatValue = _baseValue;
        }

        return concatValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDriverNameLicenseProcessed</Name>
				<Source><![CDATA[
    private boolean isDriverNameLicenseProcessed(TMSDriverLog _driverLog, Set _existingTuples)
    {
        boolean isUniqueTuple = true;

        if (_driverLog && _existingTuples)
        {
            container nameLicenseTuple = [_driverLog.DriverName, _driverLog.DriverLicense];

            if (_existingTuples.in(nameLicenseTuple))
            {
                isUniqueTuple = false;
            }
            else
            {
                _existingTuples.add(nameLicenseTuple);
            }
        }

        return isUniqueTuple;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>