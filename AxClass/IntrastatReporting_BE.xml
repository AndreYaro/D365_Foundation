<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatReporting_BE</Name>
	<SourceCode>
		<Declaration><![CDATA[
#ISOCountryRegionCodes
/// <summary>
/// The <c>IntrastatReporting_BE</c> class is responsible for generating file and SSRS report for Intrastat Belgium.
/// </summary>
[IntrastatCountryRegionAttribute(#isoBE)]
class IntrastatReporting_BE extends IntrastatReporting
{
    RefRecId      acrhiveRecID;
    Counter               lineNum;
    LanguageDescription   language;

    DialogField correctionOnlyDialogField;
    DialogField directionDialogField;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        correctionOnly,
        reportDirection
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>correctionOnly_Modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs neccesary processing when the Only corrections field is modified in the dialog.
    /// </summary>
    /// <param name="_formControl">
    /// The control triggering the modified event.
    /// </param>
    /// <returns>
    /// true, if the modified event was processed correctly; otherwise, false.
    /// </returns>
    protected boolean correctionOnly_Modified(FormCheckBoxControl _formControl)
    {
        boolean ret;

        ret = _formControl.modified();

        this.getFromDialog();
        this.updateQuery();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        dialogToDate.enabled(false);
        correctionOnlyDialogField       = dialog.addFieldValue(extendedTypeStr(NoYesId), correctionOnly, "@SYS3966", "@SYS83434");
        directionDialogField            = dialog.addFieldValue(enumStr(IntrastatReportDirection), reportDirection);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>direction_Modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs neccesary processing when the Direction field is modified in the dialog.
    /// </summary>
    /// <param name="_formControl">
    /// The control triggering the modified event.
    /// </param>
    /// <returns>
    /// true, if the modified event was processed correctly; otherwise, false.
    /// </returns>
    protected boolean direction_Modified(FormComboBoxControl _formControl)
    {
        boolean ret;

        ret = _formControl.modified();
        this.getFromDialog();
        this.updateQuery();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate_Modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs neccesary processing when the From date field is modified in the dialog.
    /// </summary>
    /// <param name="_formControl">
    /// The control triggering the modified event.
    /// </param>
    /// <returns>
    /// true, if the modified event was processed correctly; otherwise, false.
    /// </returns>
    protected boolean fromDate_Modified(FormDateControl _formControl)
    {
            FromDate fromDateTemp = _formControl.dateValue();
            boolean ret = _formControl.modified();

            if (ret)
            {
                dialogToDate.value(endmth(fromDateTemp));
            }

            this.getFromDialog();
            this.updateQuery();

            return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate_Validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs neccesary validates when the From date field is modified in the dialog.
    /// </summary>
    /// <param name="_formControl">
    /// The control triggering the validated event.
    /// </param>
    /// <returns>
    /// true, if the validated event was processed correctly; otherwise, false.
    /// </returns>
    public boolean fromDate_Validate(FormDateControl _formControl)
    {
        FromDate    fromDateTemp = _formControl.dateValue();
        boolean     ret = _formControl.validate();

        if (dayOfMth(fromDateTemp) != 1)
        {
            ret = checkFailed("@SYS312862");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        correctionOnly      = correctionOnlyDialogField.value();
        reportDirection     = directionDialogField.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        HcmWorker contactWorker = HcmWorker::find(IntrastatParameters::find().IntrastatContactWorker);
        HcmLanguageCode nativeLanguageCode = HcmLanguageCode::find(HcmPersonPrivateDetails::findByPerson(contactWorker.Person).NativeLanguage);
        DirPerson dirPerson = contactWorker.DirPerson();

        super();

        fromDate = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        toDate = endmth(fromDate);

        if (nativeLanguageCode.LanguageCodeId)
        {
            language = nativeLanguageCode.LanguageCodeId;
        }
        else
        {
            language = dirPerson.LanguageId ? dirPerson.LanguageId : CompanyInfo::languageId();
        }

        this.updateQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandlers</Name>
				<Source><![CDATA[
    public void registerEventHandlers()
    {
            super();
            dialogFromDate.control().registerOverrideMethod(
                methodStr(FormDateControl, modified),
                methodStr(IntrastatReporting_BE, fromDate_Modified),
                this);
            dialogFromDate.control().registerOverrideMethod(
                methodStr(FormDateControl, validate),
                methodStr(IntrastatReporting_BE, fromDate_Validate),
                this);
            correctionOnlyDialogField.control().registerOverrideMethod(
                methodStr(FormCheckBoxControl, modified),
                methodStr(IntrastatReporting_BE, correctionOnly_Modified),
                this);
            directionDialogField.control().registerOverrideMethod(
                methodStr(FormComboBoxControl, modified),
                methodStr(IntrastatReporting_BE, direction_Modified),
                this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version = RunBase::getVersion(packedClass);
        container       packedSuper;
        boolean         ret  = true;

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList, packedSuper] = packedClass;
                if (packedSuper)
                {
                    ret = super(packedSuper);
                    if (ret)
                    {
                        this.updateQuery();
                    }
                }
                else
                {
                    this.updateQuery();
                }
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwOnEmptyReport</Name>
				<Source><![CDATA[
    protected boolean throwOnEmptyReport()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareQuery</Name>
				<Source><![CDATA[
    protected QueryBuildDataSource prepareQuery()
    {
        this.updateQuery();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGenerateFile</Name>
				<Source><![CDATA[
    protected void postGenerateFile(ERFileName _fileName)
    {
        super(_fileName);
        if (IntrastatReportingArchiveToggle::isBECountryRegionORIntrastatReportingArchiveEnabled())
        {
            this.registerFileGenerationInIntrastatArchive(_fileName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerFileGenerationInIntrastatArchive</Name>
				<Source><![CDATA[
    private void registerFileGenerationInIntrastatArchive(ERFileName _fileName)
    {
        lineNum = 0;
        ttsBegin;

        IntrastatArchiveGeneral intrastatArchiveGeneral = IntrastatArchiveGeneral::findByIntrastatArchiveID(IntrastatArchiveGeneral::createIntrastatArchiveGeneral(_fileName, NoYes::No), true);
        if (taxRegistrationRecId)
        {
            intrastatArchiveGeneral.TaxId = taxRegistrationRecId;
            intrastatArchiveGeneral.update();
        }

        this.createIntrastatArchiveLines(intrastatArchiveGeneral.RecId);
        IntrastatArchiveGeneral::updateIntrastatArchive(lineNum,intrastatArchiveGeneral.IntrastatArchiveID);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIntrastatArchiveLines</Name>
				<Source><![CDATA[
    private void createIntrastatArchiveLines(RefRecId _archiveRecID)
    {
        while (queryRun.next())
        {
            Intrastat intrastat = queryRun.get(tableNum(Intrastat));
            if (intrastat.Weight != 0 || intrastat.AmountMST != 0)
            {
                IntrastatArchiveDetail::createIntrastatArchiveDetail(_archiveRecID, this.getNextLineNum(), intrastat);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates query regarding current state of class.
    /// </summary>
    protected void updateQuery()
    {
        QueryBuildDataSource qbds;
        QueryBuildRange qbrTransDate, qbrDirection, qbrCorrect;

        if (queryRun)
        {
            qbds = queryRun.query().dataSourceTable(tableNum(Intrastat));
            qbrTransDate = findOrCreateRange_W(qbds, fieldNum(Intrastat, TransDate));
            qbrTransDate.value(SysQuery::range(fromDate, toDate));
            qbrTransDate.status(RangeStatus::Locked);

            qbrDirection = SysQuery::findOrCreateRange(qbds, fieldnum(Intrastat, Direction));
            qbrDirection.status(RangeStatus::Locked);
            qbrDirection.value(IntrastatReporting::reportDirection2DirectionRange(reportDirection));

            qbrCorrect = SysQuery::findOrCreateRange(qbds, fieldnum(Intrastat, Correct));
            qbrCorrect.value(correctionOnly == NoYes::Yes ? queryValue(NoYes::Yes) : SysQuery::valueUnlimited());
            qbrCorrect.status(correctionOnly == NoYes::Yes ? RangeStatus::Locked : RangeStatus::Open);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLineNum</Name>
				<Source><![CDATA[
    private Counter getNextLineNum()
    {
        lineNum++;
        return lineNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>