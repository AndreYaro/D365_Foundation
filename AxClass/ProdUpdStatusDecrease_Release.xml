<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdUpdStatusDecrease_Release</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdUpdStatusDecrease_Release</c> class is used for changing the status of a production
/// order from released to scheduled.
/// </summary>
/// <remarks>
/// When a production order has a status of released and a decrease status operation is started, an
/// instance of this class will be created.
/// </remarks>
[ProdStatusFactory(ProdStatus::Released)]
public class ProdUpdStatusDecrease_Release extends ProdUpdStatusDecrease
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method resets the results of production release.
    /// </summary>
    void cleanUp()
    {
        ProdBOM  prodBOM;
        PmfProdCoBy      pmfProdCoByProduct;

        while select prodBOM
            where prodBOM.ProdId == prodTable.ProdId
        {
            this.reverseDerived(prodBOM);
            this.reverseWMSOrder(prodBOM);
        }

        if (prodTable.ProdType == ProdType::Process)
        {
            while select pmfProdCoByProduct
                where pmfProdCoByProduct.ProdId == prodTable.ProdId
            {
                pmfProdCoByProduct.status()
                    .runStatusDecrease(this.parmParmBuffer());
            }
        }

        this.reverseManufacturingExecution();

        // Reread the prodTable record since it might have been updated by the previous cleanup calls
        prodTable.reread();
        prodTable.ReleasedDate = dateNull();

        // When the status of an order is changed to something prior than Released
        // we need to Cancel the Work associated to the order.
        WHSProdTable::resetProdStatusCleanUp(prodTable.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseManufacturingExecution</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes registrations that are associated to the production from a manufacturing execution.
    /// </summary>
    protected void reverseManufacturingExecution()
    {
        JmgStampJournalTrans    jmgStampJournalTrans;
        JmgStampTrans           jmgStampTrans;
        JmgTermReg              jmgTermReg;
        ProdRoute               prodRoute;
        ProdRouteJob            prodRouteJob;

        if (Global::isConfigurationkeyEnabled(configurationkeynum(Jmgjob)))
        {
            //If any registrations has been made in Manufacturing execution on jobs
            // associated to the production then delete these
            // Remove JmgTermReg records
            switch (JmgProdParameters::find().StampLevel)
            {
                case JmgStampLevel::Route:
                    jmgTermReg.skipDeleteMethod(true);
                    delete_from jmgTermReg
                        exists join prodRoute
                        where prodRoute.ProdId   == prodTable.ProdId
                            && (jmgTermReg.JobId == prodRoute.JobIdSetup
                            ||  jmgTermReg.JobId == prodRoute.JobIdProcess);
                    break;
                case JmgStampLevel::Job:
                    jmgTermReg.skipDeleteMethod(true);
                    delete_from jmgTermReg
                        exists join prodRouteJob
                        where prodRouteJob.ProdId   == prodTable.ProdId
                            && jmgTermReg.JobId     == prodRouteJob.JobId;
                    break;
            }

            // Remove JmgStampJournalTrans records:
            JmgCalcApproveForm jmgCalcApproveForm = JmgCalcApproveForm::construct();
            while select forupdate jmgStampJournalTrans
                where jmgStampJournalTrans.JobRef == prodTable.ProdId
            {
                jmgStampJournalTrans.delete();
                jmgCalcApproveForm.transactionDeleted(jmgStampJournalTrans);
            }

            // Remove JmgStampTrans records:
            jmgStampTrans.skipDeleteMethod(true);
            delete_from jmgStampTrans
                where jmgStampTrans.JobRef   == prodTable.ProdId;

            // Sync job table
            JmgJobTable::synchronizeProdTable(prodTable, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseWMSOrder</Name>
				<Source><![CDATA[
    void reverseWMSOrder(ProdBOM _prodBOM)
    {
        WMSOrder    wmsOrder;

        while select forupdate wmsOrder
            where wmsOrder.InventTransType == InventTransType::ProdLine
               && wmsOrder.InventTransId   == _prodBOM.InventTransId
        {
            setprefix(#PreFixField(_prodBOM,ItemId));
            if (wmsOrder.validateDelete())
            {
                wmsOrder.delete();
            }
            else
            {
                throw error(strfmt("@SYS138272",_prodBOM.InventTransId));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>