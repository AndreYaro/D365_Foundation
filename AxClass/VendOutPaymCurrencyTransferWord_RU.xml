<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOutPaymCurrencyTransferWord_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendOutPaymCurrencyTransferWord_RU implements ERIReportPostProcessingSupported
{
    private Filename fileName;

    TmpMSOfficeBookMarks_RU     tmpMSOfficeBookMarks;
    LedgerJournalTrans          ledgerJournalTrans;
    BankCurrencyTransferLog_RU  bankPurchaseOrderLog;
    CustVendOutPaym             custVendOutPaym;

    protected const container AvailableFields = [
    "PaymentOrderNum",
    "PaymentOrderDate",
    "NamePayer",
    "CodeOKPO",
    "AddressPayer",
    "RespEmplName",
    "BankAccountPayer",
    "TransitBankAccount",
    "AmountCur",
    "PurchaseAmount",
    "AmountRub",
    "Bank",
    "Market",
    "PaymPurchase",
    "AccountantName",
    "PresidentName",
    "PurposeCode",
    "CurrencyCode",
    "CommBankAccountPayer",
    "CorrBankProperty",
    "PayerINN",
    "SellCurrencyCode",
    "CurrencyDealSum",
    "BankBIC",
    "TransitBank",
    "BankCurrencyDealCourse"];

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCustVendOutPaym</Name>
				<Source><![CDATA[
    public CustVendOutPaym parmCustVendOutPaym(CustVendOutPaym _custVendOutPaym = custVendOutPaym)
    {
        custVendOutPaym = _custVendOutPaym;
        return custVendOutPaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans parmLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = ledgerJournalTrans)
    {
        ledgerJournalTrans = _ledgerJournalTrans;
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTemplateStream</Name>
				<Source><![CDATA[
    private System.IO.MemoryStream getDocumentTemplateStream()
    {
        DocuRef ref = DocuRef::findRecId(this.templateFileAttachmentId());
        System.IO.MemoryStream attachmentStream = new System.IO.MemoryStream();

        if (ref)
        {
            DocumentManagement::getAttachmentStream(ref).CopyTo(attachmentStream);
        }
        else
        {
            throw error(strFmt("@GLS101762", ''));
        }

        return attachmentStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateFileAttachmentId</Name>
				<Source><![CDATA[
    protected RefRecId templateFileAttachmentId()
    {
        RefRecId templateFileRecId;
        BankAccountTable bankAccountTable;

        select firstonly BankGroupId, CurrencyOrder_TemplateRefRecId_RU, CurrencySellOrder_TemplateRefRecId_RU from bankAccountTable
            where bankAccountTable.AccountID == bankPurchaseOrderLog.bankAccountPayerId();

        BankGroup bankGroup = BankGroup::find(bankAccountTable.BankGroupId);

        switch (bankPurchaseOrderLog.BankAdvancedTransType)
        {
            case BankAdvancedTransType_RU::CurrBuy:
                templateFileRecId = bankAccountTable.CurrencyOrder_TemplateRefRecId_RU;
                break;

            case BankAdvancedTransType_RU::CurrSell:
                templateFileRecId = bankAccountTable.CurrencySellOrder_TemplateRefRecId_RU;
                break;

            default:
                throw error("@GLS114424");
        }

        return templateFileRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printData</Name>
				<Source><![CDATA[
    protected void printData()
    {
        const str PaymentOrderDateFieldName = 'PaymentOrderDate';
        Dictionary          dict        = new Dictionary();
        DictTable           dictTable   = dict.tableObject(bankPurchaseOrderLog.TableId);
        ExecutePermission   permission;

        container           fieldNames;
        FieldName           fieldName;
        int                 i;

        bankPurchaseOrderLog = BankCurrencyTransferLog_RU::find(ledgerJournalTrans.BankCurrencyTransferLog_RU);

        if (! bankPurchaseOrderLog.RecId)
                throw error(strFmt("@GLS102329", ledgerJournalTrans.Voucher));

        using (var templateStream= this.getDocumentTemplateStream())
        {
            using (WordDocument_RU wordDocument = new WordDocument_RU(templateStream))
            {
                fieldNames = availableFields;

                for (i=1; i <= conLen(fieldNames); i++)
                {
                    fieldName = conPeek(fieldNames, i);

                    permission  = new ExecutePermission();
                    permission.assert();

                    var value = dictTable.callObject(fieldName, bankPurchaseOrderLog);

                    changecompany(ledgerJournalTrans.OffsetCompany)
                    {
                        if (fieldName2id(bankPurchaseOrderLog.TableId, fieldName))
                        {
                            value =  bankPurchaseOrderLog.(fieldName2id(bankPurchaseOrderLog.TableId, fieldName));
                            if (fieldName == PaymentOrderDateFieldName)
                            {
                                value = date2Str(value, 123, 2, 2, 2, 2, 4, DateFlags::None);
                            }
                        }
                        else if (tableHasInstanceMethod(dictTable, fieldName))
                        {
                            value = dictTable.callObject(fieldName, bankPurchaseOrderLog);

                            if (fieldName == PaymentOrderDateFieldName)
                            {
                                value = date2Str(value, 123, 2, 2, 2, 2, 4, DateFlags::None);
                            }
                        }
                    }
                    wordDocument.insertValue(fieldName, value);
                    CodeAccessPermission::revertAssert();
                }

                fileName = strFmt("@GLS102331", bankPurchaseOrderLog.BankCurrencyTransferId);

                if (AccountingDocumentsERPostProcessingToggle::isEnabled())
                {
                    ERBinaryContentService binaryContentService = new ERBinaryContentService();
                    binaryContentService.parmERFormatMappingId(DocuParameters::find().AccountingDocumentsERFormatMapping);
                    binaryContentService.initBinaryDataFromStream(wordDocument.saveToStream());
                    binaryContentService.processReportInER(this as ERIReportPostProcessingSupported);
                }
                else
                {
                    wordDocument.sendFileToBrowser(fileName);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'CurrencyTransferReport';
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    private void run()
    {
        ListEnumerator          enumOutPaymRecords;
        CustVendOutPaymRecord   outPaymRecord;

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00036, funcName());

        if (custVendOutPaym)
        {
            enumOutPaymRecords = custVendOutPaym.getOutPaymRecords().getEnumerator();
            while (enumOutPaymRecords.moveNext())
            {
                outPaymRecord      = enumOutPaymRecords.current();
                ledgerJournalTrans = outPaymRecord.parmCustVendPaym().ledgerJournalTrans();
                ledgerJournalTrans.reread();
                this.printData();
            }
        }
        else
        {
            this.printData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        VendOutPaymCurrencyTransferWord_RU  currencyTransferWord = new VendOutPaymCurrencyTransferWord_RU();

        if (_args.record())
        {
            currencyTransferWord.parmLedgerJournalTrans(_args.record());
        }
        else
        {
            currencyTransferWord.parmCustVendOutPaym(_args.caller());
        }

        currencyTransferWord.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>