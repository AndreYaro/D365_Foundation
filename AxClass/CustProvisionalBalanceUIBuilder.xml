<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustProvisionalBalanceUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustProvisionalBalanceUIBuilder extends SrsReportDataContractUIBuilder
{
    DialogField dialogField_GroupBy;
    DialogField dialogField_IncludeDetails;
    CustProvisionalBalanceContract rdpContract;

    DialogField billingClassificationField;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>billingClassificationLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a multi-select Billing Classification lookup.
    /// </summary>
    public void billingClassificationLookup()
    {
        Query query = new Query(queryStr(CustBillingClassificationLookup));
        TableId multiSelectTableNum = tableNum(CustBillingClassification);
        container selectedFields = [multiSelectTableNum, fieldName2id(multiSelectTableNum, fieldStr(CustBillingClassification, BillingClassification))];

        SysLookupMultiSelectCtrl::constructWithQuery(this.dialog().dialogForm().formRun(), billingClassificationField.control(), query, false, selectedFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>CustProvisionalBalance</c> report parameter form that is based on billing
    /// classification.
    /// </summary>
    public void build()
    {
        boolean isBillingClassEnabled;
        DialogField inclTransWithNoBillingClassField;

        super();

        rdpContract = this.dataContractObject() as CustProvisionalBalanceContract;

        billingClassificationField = this.bindInfo().getDialogField(rdpContract, methodStr(CustProvisionalBalanceContract, parmBillingClassification));

        inclTransWithNoBillingClassField = this.bindInfo().getDialogField(rdpContract, methodStr(CustProvisionalBalanceContract, parmInclTransWithNoBillingClass));

        // controlling visibility
        if (billingClassificationField && inclTransWithNoBillingClassField)
        {
            isBillingClassEnabled = CustParameters::isBillingClassificationEnabled();
            billingClassificationField.visible(isBillingClassEnabled);
            inclTransWithNoBillingClassField.visible(isBillingClassEnabled);
            billingClassificationField.lookupButton(FormLookupButton::Always);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupByModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the modified event of the budget cycle time span control.
    /// </summary>
    /// <param name="_groupByControl">
    /// The budget cycle time span control for which the modified event must be handled.
    /// </param>
    /// <returns>
    /// true if the time span is modified; otherwise, false.
    /// </returns>
    public boolean groupByModified(FormComboBoxControl _groupByControl)
    {
        CustMainAccount custMainAccount;

        var includeDetailsControl = dialogField_IncludeDetails.control();
        custMainAccount = str2enum(custMainAccount, _groupByControl.valueStr());

        if (custMainAccount == CustMainAccount::MainAccount)
        {
            includeDetailsControl.checked(true);
            includeDetailsControl.enabled(false);
        }
        else
        {
            includeDetailsControl.enabled(true);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFields</Name>
				<Source><![CDATA[
    public void initializeFields()
    {
        rdpContract = this.dataContractObject();

        dialogField_GroupBy = this.bindInfo().getDialogField(rdpContract, methodStr(CustProvisionalBalanceContract, parmGroupBy));
        dialogField_IncludeDetails = this.bindInfo().getDialogField(rdpContract, methodStr(CustProvisionalBalanceContract, parmIncludeDetails));

        var includeDetailsControl = dialogField_IncludeDetails.control();

        if (rdpContract.parmGroupBy() == CustMainAccount::MainAccount)
        {
            includeDetailsControl.value(1);
            includeDetailsControl.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyCollectionDialogField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the dialog field for a collection to use the multi-select control.
    /// </summary>
    /// <remarks>
    /// Called during post run to change the dialog field for collection type to use multi-select control.
    /// </remarks>
    protected void modifyCollectionDialogField()
    {
        SysLookupMultiSelectCtrl multiSelectControl;

        MapEnumerator mapEnum;
        DialogField dialogField;
        FormStringControl strControl;
        QueryRun multiSelectQueryRun;
        int multiSelectTableNum = tableNum(SysOperationMultiSelectTmp);

        container selectedFields = [multiSelectTableNum, fieldName2id(multiSelectTableNum, fieldStr(SysOperationMultiSelectTmp, Values))];

        // if there are any collection types, then we should show the multi-value control if possible.
        if (multiSelectQueryMap)
        {
            if (!multiSelectControlMap)
            {
                // The multi-select controls are created only once. Valid values are updated via QueryRun updates
                multiSelectControlMap = new Map(Types::Class, Types::Class);
            }

            mapEnum = multiSelectQueryMap.getEnumerator();
            while (mapEnum.moveNext())
            {
                dialogField = mapEnum.currentKey();
                multiSelectQueryRun = mapEnum.currentValue();

                if (dialogField.name() == billingClassificationField.name())
                {
                    continue;
                }

                // get the underlying control from formRun.
                if (multiSelectQueryRun)
                {
                    strControl = dialogField.control();

                    if (!multiSelectControlMap.exists(dialogField))
                    {
                        // initialization: create the controls
                        multiSelectControl = SysLookupMultiSelectCtrl::constructWithQueryRun(this.dialog().dialogForm().formRun(), strControl, multiSelectQueryRun, false, selectedFields);
                        multiSelectControlMap.insert(dialogField, multiSelectControl);
                    }
                    else
                    {
                        // parameter refresh: update the QueryRun
                        multiSelectControl = multiSelectControlMap.lookup(dialogField);
                        multiSelectControl.refreshQueryRun(multiSelectQueryRun);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    public void postBuild()
    {
        super();

        this.initializeFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the post run actions.
    /// </summary>
    public void postRun()
    {
        Dialog dialogLocal = this.dialog();

        if (CustParameters::isBillingClassificationEnabled())
        {
            this.billingClassificationLookup();
        }

        super();

        // This method should be called in order to handle events on dialogs.
        dialogLocal.dialogForm().formRun().controlMethodOverload(false);

        dialogField_GroupBy.registerOverrideMethod(methodstr(FormComboBoxControl, modified), methodstr(CustProvisionalBalanceUIBuilder, groupByModified), this);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>