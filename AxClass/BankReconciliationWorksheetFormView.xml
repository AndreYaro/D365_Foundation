<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationWorksheetFormView</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankReconciliationWorksheetFormView</c> is form view for bank reconciliation work sheet form.
/// </summary>
public class BankReconciliationWorksheetFormView
{
    private FormRun worksheetFormRun;
    private JournalTableData journalTableData;

    private BankReconciliationHeaderFormView bankReconciliationHeaderFormView;

    // Data sources
    private FormDataSource dsOpenStatement;
    private FormDataSource dsMatchedStatement;
    private FormDataSource dsOpenDocument;
    private FormDataSource dsMatchedDocument;
    private FormDataSource dsMatchedDocumentSecondary;
    private FormDataSource dsMatchedStatementSecondary;
    private FormDataSource dsNewStatement;

    private boolean showPrimaryMatchGroup;

    // View model
    protected BankReconciliationWorksheetViewModel worksheetViewModel;

    // Controls
    private FormStaticTextControl markedStatementLinesInfoControl;
    private FormStaticTextControl markedDocumentsInfoControl;

    private FormButtonControl matchButtonControl;
    private FormFunctionButtonControl reconcileButtonControl;
    private FormFunctionButtonControl reconcileInBatchButtonControl;
    private FormFunctionButtonControl unreconcileButtonControl;
    private FormButtonControl unmatchButtonControl;
    private FormButtonControl unmatchAllButtonControl;
    private FormButtonControl markAsNewButtonControl;
    private FormFunctionButtonControl runMatchingRulesButtonControl;
    private FormButtonControl unmarkButtonControl;
    private FormButtonControl unmarkAllButtonControl;

    private FormDropDialogButtonControl updateAccountingDateButtonControl;
    private FormButtonControl distributeAmountsButtonControl;
    private FormButtonControl salesTaxButtonControl;
    private FormButtonControl postButtonControl;
    private FormFunctionButtonControl lineDetailsButtonControl;
    private FormButtonControl voucherButtonControl;
    private FormMenuButtonControl postMenuButtonControl;

    private FormGroupControl matchedGroupControl;
    private FormGroupControl matchedGroupSecondaryControl;

    private FormStaticTextControl statementLinesSummaryInfoControl;
    private FormStaticTextControl documentSummaryInfoControl;

    private QueryBuildRange qbrMatchedStatement;
    private QueryBuildRange qbrReconciliationHeader;
    private QueryBuildRange qbrMatchedDocumentSecondary;
    private QueryBuildRange qbrReconciliationHeaderSecondary;

    private int qbrStatementTransRangeCount;
    private int qbrDocumentTransRangeCount;

    // Bank reconciliation worksheet
    private const str ReconciliationInfo = 'ReconciliationInfo';
    private const str MarkedStatementLinesInfo = 'MarkedStatementLinesInfo';
    private const str MarkedDocumentsInfo = 'MarkedDocumentsInfo';

    private const str StatementLinesSummaryInfo = 'StatementLinesSummaryInfo';
    private const str DocumentSummaryInfo = 'DocumentSummaryInfo';
    private const str MatchButton = 'MatchButton';
    private const str ReconcileButton = 'ReconcileButton';
    private const str ReconcileInBatch = 'ReconcileInBatchButton';
    private const str UnreconcileButton = 'UnreconcileButton';
    private const str UnmatchButton = 'UnmatchButton';
    private const str UnmatchAllButton = 'UnmatchAllButton';
    private const str MarkAsNewButton = 'MarkAsNewButton';
    private const str RunMatchingRulesButton = 'RunMatchingRules';
    private const str StatementMatchGroup = 'MatchedGroup';
    private const str DocumentMatchSecondaryGroup = 'MatchedGroupSecondary';
    private const str MarkAsNewItems = 'MarkAsNewItems';
    private const str BankReconciliationStatementNew_IsNewBankDocument = 'BankReconciliationStatementNew_IsNewBankDocument';
    private const str BankReconciliationStatementNew_IsPostingInBatch = 'BankReconciliationStatementNew_IsPostingInBatch';
    private const str BankReconciliationStatementMatched_IsNewBankDocument1 = 'BankReconciliationStatementMatched_IsNewBankDocument1';
    private const str BankReconStmtMatchedSecond_IsNewBankDocument = 'BankReconStmtMatchedSecond_IsNewBankDocument';
    private const str UnmarkButton = 'UnmarkButton';
    private const str UnmarkAllButton = 'UnmarkAllButton';

    private const str UpdateAccountingDateButton = 'UpdateAccountingDateButton';
    private const str DistributeAmountsButton = 'DistributeAmountsButton';
    private const str SalesTaxButton = 'SalesTaxButton';
    private const str LineDetailsButton = 'LineDetailsButton';
    private const str PostButton = 'PostButton';
    private const str PostMenuButton = 'PostMenuButton';
    private const str VoucherButton = 'VoucherButton';

    private boolean isBankReconWorksheetFilterAndSplitNewFeatureEnabled = FeatureStateProvider::isFeatureEnabled(BankReconWorksheetFilterAndSplitNewFeature::instance());
    private boolean isBankReconciliationDirectPostingFeatureEnabled = FeatureStateProvider::isFeatureEnabled(BankReconciliationDirectPostingFeature::instance());
    private boolean isBankStatementPostInBatchFeatureEnabled = FeatureStateProvider::isFeatureEnabled(BankStatementPostInBatchFeature::instance());
    private boolean isNotReconciledOrLockedForSplitNew;
    private boolean isNotReconciledOrLocked;

    private const FieldId StatementBookingDateFieldId = fieldNum(BankReconciliationStatementOpenTmp, BookingDate);
    private const FieldId StatementDebitAmountFieldId = fieldNum(BankReconciliationStatementOpenTmp, DebitAmount);
    private const FieldId StatementCreditAmountFieldId = fieldNum(BankReconciliationStatementOpenTmp, CreditAmount);
    private const str StatementDebitAmountFieldStr = fieldStr(BankReconciliationStatementOpenTmp, DebitAmount);
    private const str StatementCreditAmountFieldStr = fieldStr(BankReconciliationStatementOpenTmp, CreditAmount);
    private const FieldId StatementTransCodeFieldId = fieldNum(BankReconciliationStatementOpenTmp, ProprietaryBankTransactionCode);
    private const FieldId StatementTradingPartyFieldId = fieldNum(BankReconciliationStatementOpenTmp, TradingParty);
    private const FieldId StatementReferenceNumberFieldId = fieldNum(BankReconciliationStatementOpenTmp, ReferenceNumber);
    private const FieldId StatementIdentificationFieldId = fieldNum(BankReconciliationStatementOpenTmp, Identification);

    private const FieldId DocumentDateFieldId = fieldNum(BankReconciliationDocumentOpenTmp, TransactionDate);
    private const FieldId DocumentDebitAmountFieldId = fieldNum(BankReconciliationDocumentOpenTmp, DebitAmount);
    private const FieldId DocumentCreditAmountFieldId = fieldNum(BankReconciliationDocumentOpenTmp, CreditAmount);
    private const str DocumentDebitAmountFieldStr = fieldStr(BankReconciliationDocumentOpenTmp, DebitAmount);
    private const str DocumentCreditAmountFieldStr = fieldStr(BankReconciliationDocumentOpenTmp, CreditAmount);
    private const FieldId DocumentTransTypeFieldId = fieldNum(BankReconciliationDocumentOpenTmp, BankTransType);
    private const FieldId DocumentDocumentTypeFieldId = fieldNum(BankReconciliationDocumentOpenTmp, DocumentType);
    private const FieldId DocumentPartyNameFieldId = fieldNum(BankReconciliationDocumentOpenTmp, RelatedPartyName);
    private const FieldId DocumentPaymentReferenceFieldId = fieldNum(BankReconciliationDocumentOpenTmp, Reference);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activeOpenStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post action of active of open statement line.
    /// </summary>
    public void activeOpenStatementPost()
    {
        worksheetViewModel.dsStatementOpenActivePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookRefresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes <c>BankReconciliationHeader</c> form when <c>BankReconciliationWorksheet</c> form is closed.
    /// </summary>
    private void bookRefresh()
    {
        FormRun callerForm = this.parmWorksheetFormRun().args().caller();
        FormDataSource dsReconciliation;

        if (callerForm)
        {
            dsReconciliation = callerForm.dataSource();
            dsReconciliation.reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSubtotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates sub totals of the reconciliation.
    /// </summary>
    /// <returns>
    /// The result of sub total.
    /// </returns>
    public BankReconciliationHeaderSubtotalTmp calcSubtotal()
    {
        BankReconciliationDocumentOpenTmp documentTmp = dsOpenDocument.cursor();
        BankReconciliationStatementOpenTmp statementTmp = dsOpenStatement.cursor();

        return BankReconciliationHeaderSubtotalTmp::calculateSubtotal(documentTmp, statementTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clickedReconcileButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// After click reconcile button.
    /// </summary>
    public void clickedReconcileButton()
    {
        worksheetViewModel.parmBankReconciliationHeader().reread();

        this.enableButtonsActive();
        this.setNewStatementButtons(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clickedRunMatchRulesButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// After click run matching rules button.
    /// </summary>
    public void clickedRunMatchRulesButton()
    {
        worksheetViewModel.reLoadData();

        this.setSummaryInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearFilters</Name>
				<Source><![CDATA[
    internal void clearFilters(FormDataSource _dataSource)
    {
        QueryBuildDataSource qbds = _dataSource.query().dataSourceName(_dataSource.name());

        switch (_dataSource.table())
        {
            case tableNum(BankReconciliationStatementOpenTmp):
                qbds.clearRange(StatementBookingDateFieldId);
                qbds.clearRange(StatementDebitAmountFieldId);
                qbds.clearRange(StatementCreditAmountFieldId);
                qbds.clearRange(StatementTradingPartyFieldId);
                qbds.clearRange(StatementReferenceNumberFieldId);
                qbds.clearRange(StatementIdentificationFieldId);
                for (int i = 1; i <= qbrStatementTransRangeCount; i++)
                {
                    qbds.clearRange(StatementTransCodeFieldId);
                }
                break;

            case tableNum(BankReconciliationDocumentOpenTmp):
                qbds.clearRange(DocumentDateFieldId);
                qbds.clearRange(DocumentDebitAmountFieldId);
                qbds.clearRange(DocumentCreditAmountFieldId);
                qbds.clearRange(DocumentDocumentTypeFieldId);
                qbds.clearRange(DocumentPartyNameFieldId);
                qbds.clearRange(DocumentPaymentReferenceFieldId);
                for (int i = 1; i <= qbrDocumentTransRangeCount; i++)
                {
                    qbds.clearRange(DocumentTransTypeFieldId);
                }
                break;
        }

        _dataSource.executequery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsActive</Name>
				<Source><![CDATA[
    private void enableButtonsActive()
    {
        BankReconciliationHeader header = worksheetViewModel.parmBankReconciliationHeader();

        if (header)
        {
            boolean isReconciled = header.IsReconciled();
            boolean isHeaderPendingApproval = header.isPendingWorkflowApproval();
            boolean isHeaderLockedInWorkflow = header.isLockedInWorkflow();
            boolean isHeaderBeingReconciledInBatch = header.ReconcileBatchStatus == BankReconciliationHeaderRunInBatchStatus::Running;

            isNotReconciledOrLocked = !isReconciled && !isHeaderLockedInWorkflow && !isHeaderBeingReconciledInBatch;
            matchButtonControl.enabled(isNotReconciledOrLocked);
            unmatchButtonControl.enabled(isNotReconciledOrLocked);
            unmatchAllButtonControl.enabled(isNotReconciledOrLocked);
            markAsNewButtonControl.enabled(isNotReconciledOrLocked);
            runMatchingRulesButtonControl.enabled(isNotReconciledOrLocked);

            reconcileButtonControl.enabled(!isReconciled && !isHeaderPendingApproval && !isHeaderBeingReconciledInBatch);
            reconcileInBatchButtonControl.enabled(!isReconciled && !isHeaderPendingApproval && !isHeaderBeingReconciledInBatch);
            unreconcileButtonControl.enabled(isReconciled && !isHeaderPendingApproval && !isHeaderBeingReconciledInBatch);

            isNotReconciledOrLockedForSplitNew = isBankReconWorksheetFilterAndSplitNewFeatureEnabled && !isReconciled && !isHeaderLockedInWorkflow && !isHeaderBeingReconciledInBatch;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeQueryMatchedDocumentPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the range before executing query.
    /// </summary>
    /// <param name="_statementOpen">
    /// The open statement cursor.
    /// </param>
    public void executeQueryMatchedDocumentPre(BankReconciliationStatementOpenTmp _statementOpen)
    {
        qbrMatchedStatement.value(queryValue(_statementOpen.BankStmtISOReportEntry));
        qbrReconciliationHeader.value(queryValue(worksheetViewModel.parmBankReconciliationHeader().RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeQueryMatchedStatementSecondaryPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the range before executing query.
    /// </summary>
    /// <param name="_documentOpen">
    /// The open document cursor.
    /// </param>
    public void executeQueryMatchedStatementSecondaryPre(BankReconciliationDocumentOpenTmp _documentOpen)
    {
        qbrMatchedDocumentSecondary.value(queryValue(_documentOpen.BankDocumentTableView));
        qbrReconciliationHeaderSecondary.value(queryValue(worksheetViewModel.parmBankReconciliationHeader().RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formClosePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// perform action before form close.
    /// </summary>
    public void formClosePre()
    {
        if (journalTableData)
        {
            journalTableData.updateBlock(JournalBlockLevel::InUse, JournalBlockLevel::None, false);
        }

        bankReconciliationHeaderFormView.updateFormCacheCurrent(journalTableData.journalTable(), true);

        this.bookRefresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event after given form is initialized.
    /// </summary>
    /// <param name="_formRun">
    /// The form run object.
    /// </param>
    public void formInitPost(FormRun _formRun)
    {
        Debug::assert(_formRun != null);
        Debug::assert(_formRun.name() == formStr(BankReconciliationWorksheet));

        if (!_formRun.args().caller()
            || !_formRun.args().dataset()
            || !_formRun.args().record())
        {
            throw error(strFmt("@SYS22678", _formRun.name()));
        }

        this.parmWorksheetFormRun(_formRun);
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>BankReconciliationHeaderFormView</c> class.
    /// </summary>
    protected void init()
    {
        // Initialize view model
        this.initWorksheetViewModel();

        // Initialize controls
        this.initFieldControls();

        // Block header form.
        this.updateBlockHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form view field controls.
    /// </summary>
    private void initFieldControls()
    {
        markedStatementLinesInfoControl = worksheetFormRun.design().controlName(MarkedStatementLinesInfo);
        markedDocumentsInfoControl = worksheetFormRun.design().controlName(MarkedDocumentsInfo);

        matchButtonControl = worksheetFormRun.design().controlName(MatchButton);
        reconcileButtonControl = worksheetFormRun.design().controlName(ReconcileButton);
        reconcileInBatchButtonControl = worksheetFormRun.design().controlName(ReconcileInBatch);
        unreconcileButtonControl = worksheetFormRun.design().controlName(UnreconcileButton);
        unmatchButtonControl = worksheetFormRun.design().controlName(UnmatchButton);
        unmatchAllButtonControl = worksheetFormRun.design().controlName(UnmatchAllButton);
        markAsNewButtonControl = worksheetFormRun.design().controlName(MarkAsNewButton);
        runMatchingRulesButtonControl = worksheetFormRun.design().controlName(RunMatchingRulesButton);
        matchedGroupControl = worksheetFormRun.design().controlName(StatementMatchGroup);
        matchedGroupSecondaryControl = worksheetFormRun.design().controlName(DocumentMatchSecondaryGroup);
        statementLinesSummaryInfoControl = worksheetFormRun.design().controlName(statementLinesSummaryInfo);
        documentSummaryInfoControl = worksheetFormRun.design().controlName(documentSummaryInfo);

        unmarkButtonControl = worksheetFormRun.design().controlName(UnmarkButton);
        unmarkAllButtonControl = worksheetFormRun.design().controlName(UnmarkAllButton);
        updateAccountingDateButtonControl = worksheetFormRun.design().controlName(UpdateAccountingDateButton);
        distributeAmountsButtonControl = worksheetFormRun.design().controlName(DistributeAmountsButton);
        salesTaxButtonControl = worksheetFormRun.design().controlName(SalesTaxButton);
        lineDetailsButtonControl = worksheetFormRun.design().controlName(LineDetailsButton);
        postButtonControl = worksheetFormRun.design().controlName(PostButton);
        voucherButtonControl = worksheetFormRun.design().controlName(VoucherButton);

        FormStaticTextControl reconciliationInfoControl = worksheetFormRun.design().controlName(ReconciliationInfo);
        reconciliationInfoControl.text(worksheetViewModel.reconciliationInfo());

        this.splitNewTransactions();

        this.postInBatchVisible();

        this.setSummaryInfo();

        this.setMatchGroupVisible(true);

        this.enableButtonsActive();

        updateAccountingDateButtonControl.visible(FeatureStateProvider::isFeatureEnabled(BankStatementPostPerLineFeature::instance()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitNewTransactions</Name>
				<Source><![CDATA[
    private void splitNewTransactions()
    {
        if (isBankReconWorksheetFilterAndSplitNewFeatureEnabled)
        {
            worksheetFormRun.design().controlName(MarkAsNewItems).visible(true);
            worksheetFormRun.design().controlName(BankReconciliationStatementNew_IsNewBankDocument).visible(false);
            worksheetFormRun.design().controlName(BankReconciliationStatementMatched_IsNewBankDocument1).visible(false);
            worksheetFormRun.design().controlName(BankReconStmtMatchedSecond_IsNewBankDocument).visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInBatchVisible</Name>
				<Source><![CDATA[
    private void postInBatchVisible()
    {
        postMenuButtonControl = worksheetFormRun.design().controlName(PostMenuButton);
        postButtonControl.visible(isBankReconciliationDirectPostingFeatureEnabled && !isBankStatementPostInBatchFeatureEnabled);
        postMenuButtonControl.visible(isBankReconciliationDirectPostingFeatureEnabled && isBankStatementPostInBatchFeatureEnabled);
        worksheetFormRun.design().controlName(BankReconciliationStatementNew_IsPostingInBatch).visible(isBankReconciliationDirectPostingFeatureEnabled && isBankStatementPostInBatchFeatureEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMatchedDocumentPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event after data srouce of given buffer is initailized.
    /// </summary>
    /// <param name="_documentMatched">
    /// the <c>BankReconciliationDocumentOpenTmp</c> buffer for matched document.
    /// </param>
    public void initMatchedDocumentPost(BankReconciliationDocumentOpenTmp _documentMatched)
    {
        if (!dsMatchedDocument)
        {
            dsMatchedDocument = FormDataUtil::getFormDataSource(_documentMatched);
        }

        this.queryAddRangeIsMatched(dsMatchedDocument, NoYes::Yes);

        this.queryAddRangeMatchedStatement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMatchedDocumentSecondaryPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs action after matched document datasource is initialized.
    /// </summary>
    /// <param name="_documentMatched">
    /// The <c>BankReconciliationDocumentOpenTmp</c> buffer for matched document.
    /// </param>
    public void initMatchedDocumentSecondaryPost(BankReconciliationDocumentOpenTmp _documentMatched)
    {
        if (!dsMatchedDocumentSecondary)
        {
            dsMatchedDocumentSecondary = FormDataUtil::getFormDataSource(_documentMatched);
        }

        this.queryAddRangeIsMatched(dsMatchedDocumentSecondary, NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMatchedStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event after data srouce of given buffer is initailized.
    /// </summary>
    /// <param name="_statementOpen">
    /// the <c>BankReconciliationStatementOpenTmp</c> buffer for open bank statement.
    /// </param>
    public void initMatchedStatementPost(BankReconciliationStatementOpenTmp _statementOpen)
    {
        if (!dsMatchedStatement)
        {
            dsMatchedStatement = FormDataUtil::getFormDataSource(_statementOpen);
        }

        this.queryAddRangeIsMatched(dsMatchedStatement, NoYes::Yes);
        if (isBankReconWorksheetFilterAndSplitNewFeatureEnabled)
        {
            this.queryAddRangeIsNewStatement(dsMatchedStatement, NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNewStatementPost</Name>
				<Source><![CDATA[
    public void initNewStatementPost(BankReconciliationStatementOpenTmp _statementOpen)
    {
        if (!dsNewStatement)
        {
            dsNewStatement = FormDataUtil::getFormDataSource(_statementOpen);
        }

        this.queryAddRangeIsMatched(dsNewStatement, NoYes::Yes);
        this.queryAddRangeIsNewStatement(dsNewStatement, NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMatchedStatementSecondaryPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs action after matched statement datasource is initialized.
    /// </summary>
    /// <param name="_statementOpen">
    /// The <c>BankReconciliationStatementOpenTmp</c> buffer for matched document.
    /// </param>
    public void initMatchedStatementSecondaryPost(BankReconciliationStatementOpenTmp _statementOpen)
    {
        if (!dsMatchedStatementSecondary)
        {
            dsMatchedStatementSecondary = FormDataUtil::getFormDataSource(_statementOpen);
        }

        this.queryAddRangeIsMatched(dsMatchedStatementSecondary, NoYes::Yes);

        if (isBankReconWorksheetFilterAndSplitNewFeatureEnabled)
        {
            this.queryAddRangeIsNewStatement(dsMatchedStatementSecondary, NoYes::No);
        }

        this.queryAddRangeMatchedStatementSecondary();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOpenDocumentPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event after data srouce of given buffer is initailized.
    /// </summary>
    /// <param name="_documentOpen">
    /// the <c>BankReconciliationDocumentOpenTmp</c> buffer for open document.
    /// </param>
    public void initOpenDocumentPost(BankReconciliationDocumentOpenTmp _documentOpen)
    {
        if (!dsOpenDocument)
        {
            dsOpenDocument = FormDataUtil::getFormDataSource(_documentOpen);
        }

        this.queryAddRangeIsMatched(dsOpenDocument, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOpenStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event after data srouce of given buffer is initailized.
    /// </summary>
    /// <param name="_statementOpen">
    /// the <c>BankReconciliationStatementOpenTmp</c> buffer for open bank statement.
    /// </param>
    public void initOpenStatementPost(BankReconciliationStatementOpenTmp _statementOpen)
    {
        if (!dsOpenStatement)
        {
            dsOpenStatement = FormDataUtil::getFormDataSource(_statementOpen);
        }

        this.queryAddRangeIsMatched(dsOpenStatement, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorksheetViewModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the bank reconciliation view model.
    /// </summary>
    protected void initWorksheetViewModel()
    {
        worksheetViewModel = BankReconciliationWorksheetViewModel::newFromWorksheetView(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markChangedOpenDocumentPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event after markChanged of open bank document.
    /// </summary>
    public void markChangedOpenDocumentPost()
    {
        this.setMarkedDocumentsInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markChangedOpenStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event after markChanged of open statement line.
    /// </summary>
    public void markChangedOpenStatementPost()
    {
        BankAccountTable bankAccountTable = BankAccountTable::find(this.getBankReconciliationHeaderAccountId());

        if (dsOpenStatement.recordsMarked().lastIndex() == 0)
        {
            //clear all selected bank document
            worksheetViewModel.unmarkAllOpenDocument();
        }

        this.setMarkedStatementLinesInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankReconciliationHeaderAccountId</Name>
				<Source><![CDATA[
    internal CompanyBankAccountId getBankReconciliationHeaderAccountId()
    {
        return worksheetViewModel.parmBankReconciliationHeader().AccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSMatchedDocument</Name>
				<Source><![CDATA[
    public FormDataSource parmDSMatchedDocument(FormDataSource _dsMatchedDocument = dsMatchedDocument)
    {
        dsMatchedDocument = _dsMatchedDocument;

        return dsMatchedDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSMatchedDocumentSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the secondary matched bank document data source.
    /// </summary>
    /// <param name="_dsMatchedDocument">
    /// The secondary matched bank document data source.
    /// </param>
    /// <returns>
    /// The secondary matched bank document data source.
    /// </returns>
    public FormDataSource parmDSMatchedDocumentSecondary(FormDataSource _dsMatchedDocument = dsMatchedDocumentSecondary)
    {
        dsMatchedDocumentSecondary = _dsMatchedDocument;

        return dsMatchedDocumentSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSMatchedStatement</Name>
				<Source><![CDATA[
    public FormDataSource parmDSMatchedStatement(FormDataSource _dsMatchedStatement = dsMatchedStatement)
    {
        dsMatchedStatement = _dsMatchedStatement;

        return dsMatchedStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSMatchedStatementSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the secondary matched bank statement data source.
    /// </summary>
    /// <param name="_dsMatchedStatement">
    /// The secondary matched bank statement data source.
    /// </param>
    /// <returns>
    /// The secondary matched bank statement data source.
    /// </returns>
    public FormDataSource parmDSMatchedStatementSecondary(FormDataSource _dsMatchedStatement = dsMatchedStatementSecondary)
    {
        dsMatchedStatementSecondary = _dsMatchedStatement;

        return dsMatchedStatementSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSOpenDocument</Name>
				<Source><![CDATA[
    public FormDataSource parmDSOpenDocument(FormDataSource _dsOpenDocument = dsOpenDocument)
    {
        dsOpenDocument = _dsOpenDocument;

        return dsOpenDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSOpenStatement</Name>
				<Source><![CDATA[
    public FormDataSource parmDSOpenStatement(FormDataSource _dsOpenStatement = dsOpenStatement)
    {
        dsOpenStatement = _dsOpenStatement;

        return dsOpenStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDSNewStatement</Name>
				<Source><![CDATA[
    internal FormDataSource getDSNewStatement()
    {
        return dsNewStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowPrimaryMatchGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether to show the primary match group control.
    /// </summary>
    /// <returns>
    /// true if to show the primary match group control; otherwise, false.
    /// </returns>
    public boolean parmShowPrimaryMatchGroup()
    {
        return showPrimaryMatchGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorksheetFormRun</Name>
				<Source><![CDATA[
    public FormRun parmWorksheetFormRun(FormRun _worksheetFormRun = worksheetFormRun)
    {
        worksheetFormRun = _worksheetFormRun;

        return worksheetFormRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performMarkingStatementProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the marking statement as new process.
    /// </summary>
    public void performMarkingStatementProcess()
    {
        worksheetViewModel.performMarkingStatementProcess();
        this.setSummaryInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performMatchingProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the matching process.
    /// </summary>
    public void performMatchingProcess()
    {
        worksheetViewModel.performMatchingProcess();
        this.setSummaryInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performUnmatchingProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the unmatching process.
    /// </summary>
    public void performUnmatchingProcess()
    {
        worksheetViewModel.performUnmatchingProcess();
        this.setSummaryInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performUnmatchingAllProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the unmatching all bank transactions process.
    /// </summary>
    public void performUnmatchingAllProcess()
    {
        worksheetViewModel.performUnmatchingAllProcess();
        this.setSummaryInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performUnmarkProcess</Name>
				<Source><![CDATA[
    public void performUnmarkProcess()
    {
        worksheetViewModel.performUnmarkProcess();
        this.setSummaryInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performUnmarkAllProcess</Name>
				<Source><![CDATA[
    public void performUnmarkAllProcess()
    {
        worksheetViewModel.performUnmarkAllProcess();
        this.setSummaryInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performFormRefresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a data refresh for the bank reconcilation worksheet form.
    /// </summary>
    public void performFormRefresh()
    {
        worksheetViewModel.reLoadData();
        this.setSummaryInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeIsMatched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds data source ranges.
    /// </summary>
    /// <param name="_dataSource">
    /// Given data source.
    /// </param>
    /// <param name="_isMatched">
    /// Indicates the value of matched range.
    /// </param>
    private void queryAddRangeIsMatched(FormDataSource _dataSource, NoYesId _isMatched)
    {
        QueryBuildDataSource qbds = _dataSource.query().dataSourceName(_dataSource.name());

        switch (_dataSource.table())
        {
            case tableNum(BankReconciliationDocumentOpenTmp):
                qbds.addRange(fieldNum(BankReconciliationDocumentOpenTmp, IsMatched)).value(queryValue(_isMatched));
                break;

            case tableNum(BankReconciliationStatementOpenTmp):
                qbds.addRange(fieldNum(BankReconciliationStatementOpenTmp, IsMatched)).value(queryValue(_isMatched));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeIsNewStatement</Name>
				<Source><![CDATA[
    private void queryAddRangeIsNewStatement(FormDataSource _dataSource, NoYesId _isNew)
    {
        QueryBuildDataSource qbds = _dataSource.query().dataSourceName(_dataSource.name());

        qbds.addRange(fieldNum(BankReconciliationStatementOpenTmp, IsNewBankDocument)).value(queryValue(_isNew));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeMatchedStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds additional data sources and data source range for matched statement line.
    /// </summary>
    public void queryAddRangeMatchedStatement()
    {
        Query query = dsMatchedDocument.query();
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(BankReconciliationDocumentOpenTmp));

        qbds = qbds.addDataSource(tableNum(BankReconciliationMatchingItem));
        qbds.addLink(fieldNum(BankReconciliationDocumentOpenTmp, BankDocumentTableView), fieldNum(BankReconciliationMatchingItem, BankDocumentTable));
        qbds.joinMode(JoinMode::InnerJoin);

        qbds = qbds.addDataSource(tableNum(BankReconciliationMatching));
        qbds.relations(true);
        qbds.joinMode(JoinMode::InnerJoin);

        qbrReconciliationHeader = qbds.addRange(fieldNum(BankReconciliationMatching, BankReconciliationHeader));

        qbds = qbds.addDataSource(tableNum(BankReconciliationMatchingItem));
        qbds.relations(true);
        qbds.joinMode(JoinMode::InnerJoin);

        qbrMatchedStatement = qbds.addRange(fieldNum(BankReconciliationMatchingItem, BankStmtISOReportEntry));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeMatchedStatementSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds additional data sources and data source range for matched statement line.
    /// </summary>
    public void queryAddRangeMatchedStatementSecondary()
    {
        Query query = dsMatchedStatementSecondary.query();
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(BankReconciliationStatementOpenTmp));

        qbds = qbds.addDataSource(tableNum(BankReconciliationMatchingItem));
        qbds.addLink(fieldNum(BankReconciliationStatementOpenTmp, BankStmtISOReportEntry), fieldNum(BankReconciliationMatchingItem, BankStmtISOReportEntry));
        qbds.joinMode(JoinMode::InnerJoin);

        qbds = qbds.addDataSource(tableNum(BankReconciliationMatching));
        qbds.relations(true);
        qbds.joinMode(JoinMode::InnerJoin);

        qbrReconciliationHeaderSecondary = qbds.addRange(fieldNum(BankReconciliationMatching, BankReconciliationHeader));

        qbds = qbds.addDataSource(tableNum(BankReconciliationMatchingItem));
        qbds.relations(true);
        qbds.joinMode(JoinMode::InnerJoin);

        qbrMatchedDocumentSecondary = qbds.addRange(fieldNum(BankReconciliationMatchingItem, BankDocumentTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBaseRangeDate</Name>
				<Source><![CDATA[
    private void queryBaseRangeDate(FormDataSource _dataSource, FieldId _fieldId, date _fromDate, date _endDate)
    {
        QueryBuildDataSource qbds = _dataSource.query().dataSourceName(_dataSource.name());
        qbds.clearRange(_fieldId);

        if (_fromDate || _endDate)
        {
            qbds.addRange(_fieldId).value(SysQuery::range(_fromDate, _endDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBaseRangeStr</Name>
				<Source><![CDATA[
    private void queryBaseRangeStr(FormDataSource _dataSource, FieldId _fieldId, str _filterStr)
    {
        QueryBuildDataSource qbds = _dataSource.query().dataSourceName(_dataSource.name());
        qbds.clearRange(_fieldId);

        if (_filterStr)
        {
            qbds.addRange(_fieldId).value(SysQuery::valueLike(_filterStr));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBaseRangeEnum</Name>
				<Source><![CDATA[
    private void queryBaseRangeEnum(FormDataSource _dataSource, FieldId _fieldId, int _emptyEnumValue, int _enumValue)
    {
        QueryBuildDataSource qbds = _dataSource.query().dataSourceName(_dataSource.name());
        qbds.clearRange(_fieldId);

        if (_enumValue != _emptyEnumValue)
        {
            qbds.addRange(_fieldId).value(queryValue(_enumValue));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountQueryRange</Name>
				<Source><![CDATA[
    private str getAmountQueryRange(
        str _name,
        str _fieldStr,
        AmountCur _amountFrom,
        AmountCur _amountTo)
    {
        const str FromToQuery = '((%1.%2 >= %3) && (%1.%2 <= %4))';
        const str FromQuery = '(%1.%2 >= %3)';
        const str ToQuery = '((%1.%2 > 0) && (%1.%2 <= %3))';
        str query;

        if (_amountFrom && _amountTo)
        {
            query = strFmt(FromToQuery,
                _name,
                _fieldStr,
                queryValue(_amountFrom),
                queryValue(_amountTo));
        }
        else if (_amountFrom)
        {
            query = strFmt(FromQuery, _name, _fieldStr, queryValue(_amountFrom));
        }
        else if (_amountTo)
        {
            query = strFmt(ToQuery, _name, _fieldStr, queryValue(_amountTo));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBaseRangeAmount</Name>
				<Source><![CDATA[
    private void queryBaseRangeAmount(
        FormDataSource _dataSource,
        FieldId _debitFieldId,
        FieldId _creditFieldId,
        str _debitFieldStr,
        str _creditFieldStr,
        AmountCurDebit _debitAmountFrom,
        AmountCurDebit _debitAmountTo,
        AmountCurCredit _creditAmountFrom,
        AmountCurCredit _creditAmountTo)
    {
        const str CombineQuery = '(%1 || %2)';

        QueryBuildDataSource qbds = _dataSource.query().dataSourceName(_dataSource.name());
        qbds.clearRange(_debitFieldId);
        qbds.clearRange(_creditFieldId);

        str name = qbds.name();
        str debitQuery = this.getAmountQueryRange(name, _debitFieldStr, _debitAmountFrom, _debitAmountTo);
        str creditQuery = this.getAmountQueryRange(name, _creditFieldStr, _creditAmountFrom, _creditAmountTo);

        if (debitQuery && creditQuery)
        {
            str query = strFmt(CombineQuery, debitQuery, creditQuery);
            qbds.addRange(_debitFieldId).value(query);
        }
        else if (debitQuery)
        {
            qbds.addRange(_debitFieldId).value(debitQuery);
        }
        else if (creditQuery)
        {
            qbds.addRange(_creditFieldId).value(creditQuery);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBaseRangeTransSelection</Name>
				<Source><![CDATA[
    private int queryBaseRangeTransSelection(FormDataSource _dataSource, FieldId _fieldId, container _selectValues, int _oldRangeCount)
    {
        int numberOfSelections = conLen(_selectValues);
        QueryBuildDataSource qbds = _dataSource.query().dataSourceName(_dataSource.name());
        for (int i = 1; i <= _oldRangeCount; i++)
        {
            qbds.clearRange(_fieldId);
        }

        int rangeCount = 0;
        for (int i = 1; i <= numberOfSelections; i++)
        {
            str transCodeType = conPeek(_selectValues, i);
            if (transCodeType)
            {
                qbds.addRange(_fieldId).value(queryValue(transCodeType));
                rangeCount += 1;
            }
        }

        return rangeCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeDate</Name>
				<Source><![CDATA[
    internal void queryAddRangeDate(
        FormDataSource _dataSource,
        date _fromDate,
        date _toDate)
    {
        FieldId dateField;
        switch (_dataSource.table())
        {
            case tableNum(BankReconciliationStatementOpenTmp):
                dateField = StatementBookingDateFieldId;
                break;

            case tableNum(BankReconciliationDocumentOpenTmp):
                dateField = DocumentDateFieldId;
                break;
        }

        this.queryBaseRangeDate(
            _dataSource,
            dateField,
            _fromDate,
            _toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeAmount</Name>
				<Source><![CDATA[
    internal void queryAddRangeAmount(
        FormDataSource _dataSource,
        AmountCurDebit _debitAmountFrom,
        AmountCurDebit _debitAmountTo,
        AmountCurCredit _creditAmountFrom,
        AmountCurCredit _creditAmountTo)
    {
        FieldId debitFieldId;
        FieldId creditFieldId;
        str debitFieldStr;
        str creditFieldStr;
        switch (_dataSource.table())
        {
            case tableNum(BankReconciliationStatementOpenTmp):
                debitFieldId = StatementDebitAmountFieldId;
                creditFieldId = StatementCreditAmountFieldId;
                debitFieldStr = StatementDebitAmountFieldStr;
                creditFieldStr = StatementCreditAmountFieldStr;
                break;

            case tableNum(BankReconciliationDocumentOpenTmp):
                debitFieldId = DocumentDebitAmountFieldId;
                creditFieldId = DocumentCreditAmountFieldId;
                debitFieldStr = DocumentDebitAmountFieldStr;
                creditFieldStr = DocumentCreditAmountFieldStr;
                break;
        }

        this.queryBaseRangeAmount(
            _dataSource,
            debitFieldId,
            creditFieldId,
            debitFieldStr,
            creditFieldStr,
            _debitAmountFrom,
            _debitAmountTo,
            _creditAmountFrom,
            _creditAmountTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeTrans</Name>
				<Source><![CDATA[
    internal void queryAddRangeTrans(FormDataSource _dataSource, container _selectValues)
    {
        switch (_dataSource.table())
        {
            case tableNum(BankReconciliationStatementOpenTmp):
                qbrStatementTransRangeCount = this.queryBaseRangeTransSelection(_dataSource, StatementTransCodeFieldId, _selectValues, qbrStatementTransRangeCount);
                break;

            case tableNum(BankReconciliationDocumentOpenTmp):
                qbrDocumentTransRangeCount = this.queryBaseRangeTransSelection(_dataSource, DocumentTransTypeFieldId, _selectValues, qbrDocumentTransRangeCount);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeParty</Name>
				<Source><![CDATA[
    internal void queryAddRangeParty(FormDataSource _dataSource, str _party)
    {
        FieldId field;
        switch (_dataSource.table())
        {
            case tableNum(BankReconciliationStatementOpenTmp):
                field = StatementTradingPartyFieldId;
                break;

            case tableNum(BankReconciliationDocumentOpenTmp):
                field = DocumentPartyNameFieldId;
                break;
        }

        this.queryBaseRangeStr(_dataSource, field, _party);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeReference</Name>
				<Source><![CDATA[
    internal void queryAddRangeReference(FormDataSource _dataSource, str _reference)
    {
        FieldId field;
        switch (_dataSource.table())
        {
            case tableNum(BankReconciliationStatementOpenTmp):
                field = StatementReferenceNumberFieldId;
                break;

            case tableNum(BankReconciliationDocumentOpenTmp):
                field = DocumentPaymentReferenceFieldId;
                break;
        }

        this.queryBaseRangeStr(_dataSource, field, _reference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeIdentification</Name>
				<Source><![CDATA[
    internal void queryAddRangeIdentification(FormDataSource _dataSource, str _identification)
    {
        if (_dataSource.table() == tableNum(BankReconciliationStatementOpenTmp))
        {
            this.queryBaseRangeStr(_dataSource, StatementIdentificationFieldId, _identification);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeDocumentType</Name>
				<Source><![CDATA[
    internal void queryAddRangeDocumentType(FormDataSource _dataSource, BankDocumentBookType _type)
    {
        if (_dataSource.table() == tableNum(BankReconciliationDocumentOpenTmp))
        {
            this.queryBaseRangeEnum(_dataSource, DocumentDocumentTypeFieldId, enum2int(BankDocumentBookType::None), enum2int(_type));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkedDocumentsInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the marked bank documents information.
    /// </summary>
    private void setMarkedDocumentsInfo()
    {
        BankReconciliationDocumentOpenTmp documentTmpLocal;

        AmountCur markedAmount;
        Counter markedCounter;
        str markedInfo;

        documentTmpLocal = dsOpenDocument.getFirst(1);
        while (documentTmpLocal)
        {
            markedAmount += documentTmpLocal.BankCurrencyAmount;
            markedCounter++;
            documentTmpLocal = dsOpenDocument.getNext();
        }

        if (markedCounter != 0)
        {
            markedInfo = strFmt(
                "@GLS222592",
                markedAmount,
                markedCounter);
        }

        MarkedDocumentsInfoControl.text(markedInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkedStatementLinesInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the marked statement lines information.
    /// </summary>
    private void setMarkedStatementLinesInfo()
    {
        BankReconciliationStatementOpenTmp statementTmpLocal;

        AmountCur markedAmount;
        Counter markedCounter;
        str markedInfo;

        statementTmpLocal = dsOpenStatement.getFirst(1);
        while (statementTmpLocal)
        {
            markedAmount += statementTmpLocal.BankCurrencyAmount;
            markedCounter++;
            statementTmpLocal = dsOpenStatement.getNext();
        }

        if (markedCounter != 0)
        {
            markedInfo = strFmt(
                "@CashManagement:MarkedStatementLinesSummary",
                markedCounter,
                markedAmount);
        }

        MarkedStatementLinesInfoControl.text(markedInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMatchGroupVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility of the match group
    /// </summary>
    /// <param name="_showMatch">
    /// A boolean value indicating whether to show the match group or the secondary match group.
    /// </param>
    public void setMatchGroupVisible(boolean _showMatch)
    {
        showPrimaryMatchGroup = _showMatch;
        MatchedGroupControl.visible(showPrimaryMatchGroup);
        MatchedGroupSecondaryControl.visible(!showPrimaryMatchGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSummaryInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sest the summary information of bank document and bank statement.
    /// </summary>
    protected void setSummaryInfo()
    {
        StatementLinesSummaryInfoControl.text(
            strFmt('%1: %2 | %3: %4 | %5: %6',
                "@SYS340849",
                BankReconciliationStatementOpenTmp::getTotalAmount(this.parmDSOpenStatement().cursor()),
                "@GLS221579",
                BankReconciliationStatementOpenTmp::getTotalMatchedAmount(this.parmDSOpenStatement().cursor()),
                "@CashManagement:NotMatchedAmount",
                BankReconciliationStatementOpenTmp::getTotalOpenAmount(this.parmDSOpenStatement().cursor())));

        DocumentSummaryInfoControl.text(
            strFmt('%1: %2 | %3: %4 | %5: %6',
                "@SYS340849",
                BankReconciliationDocumentOpenTmp::getTotalAmount(this.parmDSOpenDocument().cursor()),
                "@GLS221579",
                BankReconciliationDocumentOpenTmp::getTotalMatchedAmount(this.parmDSOpenDocument().cursor()),
                "@CashManagement:NotMatchedAmount",
                BankReconciliationDocumentOpenTmp::getTotalOpenAmount(this.parmDSOpenDocument().cursor())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBlockHeader</Name>
				<Source><![CDATA[
    private void updateBlockHeader()
    {
        JournalTableData journalTableDataFromHeader = bankReconciliationHeaderFormView.parmJournalTableData();
        JournalTableMap journalTableFromHeader;

        if (journalTableDataFromHeader)
        {
            journalTableDataFromHeader.journalTable().reread();
            journalTableFromHeader = journalTableDataFromHeader.journalTable().data();
        }

        journalTableData = JournalTableData::newTable(journalTableFromHeader);

        JournalTableData.updateBlock(JournalBlockLevel::None, JournalBlockLevel::InUse);

        bankReconciliationHeaderFormView.updateFormCacheCurrent(journalTableData.journalTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeOpenStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actions after writing open statement.
    /// </summary>
    public void writeOpenStatementPost()
    {
        this.setSummaryInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>BankReconciliationWorksheetFormView</c> class.
    /// </summary>
    /// <returns>
    /// An instance of <c>BankReconciliationWorksheetFormView</c> class.
    /// </returns>
    public static BankReconciliationWorksheetFormView construct()
    {
        return new BankReconciliationWorksheetFormView();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBankReconciliationHeaderFormView</Name>
				<Source><![CDATA[
    public void initBankReconciliationHeaderFormView(FormRun _formRun)
    {
        FormRun bankReconciliationHeaderFormRun = _formRun.args().caller() as FormRun;

        if (bankReconciliationHeaderFormRun && _formRun.args().callerName() == formStr(BankReconciliationHeader))
        {
            bankReconciliationHeaderFormView = bankReconciliationHeaderFormRun.journalForm();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectNewStatement</Name>
				<Source><![CDATA[
    internal BankStmtISOReportEntry getSelectNewStatement()
    {
        return worksheetViewModel.getSelectNewStatement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performPostPerLineProcess</Name>
				<Source><![CDATA[
    internal void performPostPerLineProcess()
    {
        worksheetViewModel.performPostPerLineProcess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performPostPerLineInBatchProcess</Name>
				<Source><![CDATA[
    internal void performPostPerLineInBatchProcess()
    {
        worksheetViewModel.performPostPerLineInBatchProcess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewStatementButtons</Name>
				<Source><![CDATA[
    internal void setNewStatementButtons(boolean _isMarkButtonOnly = false)
    {
        if (isBankReconWorksheetFilterAndSplitNewFeatureEnabled)
        {
            if (isBankStatementPostInBatchFeatureEnabled)
            {
                boolean isSelectUnpostedAndNotInBatchProcessing = worksheetViewModel.isNewStatementAllSelectUnpostedAndNotInBatchProcessing();
                boolean isAllUnpostedAndNotInBatchProcessing = worksheetViewModel.isAllNewStatementUnpostedAndNotInBatchProcessing();
                unmarkButtonControl.enabled(isNotReconciledOrLockedForSplitNew && isSelectUnpostedAndNotInBatchProcessing);
                unmarkAllButtonControl.enabled(isNotReconciledOrLockedForSplitNew && isAllUnpostedAndNotInBatchProcessing);

                if (!_isMarkButtonOnly)
                {
                    boolean isNewStatementSelectPosted = worksheetViewModel.isNewStatementSelectPosted();
                    voucherButtonControl.enabled(isNewStatementSelectPosted);

                    DistributeAmountsButtonControl.enabled(isNewStatementSelectPosted || isSelectUnpostedAndNotInBatchProcessing);
                    lineDetailsButtonControl.enabled(isNewStatementSelectPosted || isSelectUnpostedAndNotInBatchProcessing);
                    salesTaxButtonControl.enabled(isNewStatementSelectPosted || isSelectUnpostedAndNotInBatchProcessing);

                    updateAccountingDateButtonControl.enabled(isSelectUnpostedAndNotInBatchProcessing);
                    postButtonControl.enabled(isSelectUnpostedAndNotInBatchProcessing);
                    postMenuButtonControl.enabled(isSelectUnpostedAndNotInBatchProcessing);
                }
            }
            else
            {
                boolean isNewStatementAllSelectUnposted = worksheetViewModel.isNewStatementAllSelectUnposted();
                boolean isAllNewStatementUnposted = worksheetViewModel.isAllNewStatementUnposted();
                unmarkButtonControl.enabled(isNotReconciledOrLockedForSplitNew && isNewStatementAllSelectUnposted);
                unmarkAllButtonControl.enabled(isNotReconciledOrLockedForSplitNew && isAllNewStatementUnposted);

                if (!_isMarkButtonOnly)
                {
                    boolean isNewStatementSelectPosted = worksheetViewModel.isNewStatementSelectPosted();
                    voucherButtonControl.enabled(isNewStatementSelectPosted);

                    updateAccountingDateButtonControl.enabled(isNewStatementAllSelectUnposted);
                    postButtonControl.enabled(isNewStatementAllSelectUnposted);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>