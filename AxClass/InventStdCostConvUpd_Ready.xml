<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdCostConvUpd_Ready</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventStdCostConvUpd_Ready extends InventStdCostConvUpd
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>Status</c> field of the <c>InventStdCostConv</c> record buffer to a value of
    ///    <c>InventStdCostConvStatus::Ready</c>.
    /// </summary>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict was caught in a transaction scope.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict could not be recovered.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The validation failed.
    /// </exception>
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            inventStdCostConv = InventStdCostConv::find(inventStdCostConv.RecId, true);

            if (!this.validate())
            {
                throw Exception::Error;
            }

            inventStdCostConv.Status = InventStdCostConvStatus::Ready;
            inventStdCostConv.update();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the status can be updated.
    /// </summary>
    /// <returns>
    /// true if no errors exist; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;

        if (!inventStdCostConv.allowReadyConversion())
        {
            return checkFailed(strFmt("@SYS120306",InventStdCostConvStatus::Ready));
        }

        if (!this.validateNumberSequence())
        {
            ret = false;
        }

        if (!this.validateInventClosing())
        {
            ret = false;
        }

        if (!this.validateReleasedProductions())
        {
            ret = false;
        }

        if (!this.validateOpenInventoryJournals())
        {
            ret = false;
        }

        if (!this.validateItemsChecked())
        {
            ret = false;
        }

        if (!ret)
        {
            ret = checkFailed(strFmt("@SYS120307",InventStdCostConvStatus::Ready));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventClosing</Name>
				<Source><![CDATA[
        protected boolean validateInventClosing()
    {
        boolean ret = true;

        // <GEERU>
        if (!InventClosing::findClosingDate(inventStdCostConv.TransitionStartDate - 1, inventStdCostConv.InventTransCurrency_RU))
        // </GEERU>
        {
            ret = checkFailed(strFmt("@SYS120321", date2StrUsr( inventStdCostConv.TransitionStartDate, DateFlags::FormatAll), date2StrUsr( inventStdCostConv.TransitionStartDate-1, DateFlags::FormatAll)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemsChecked</Name>
				<Source><![CDATA[
        protected boolean validateItemsChecked()
    {
        InventStdCostConvItem   inventStdCostConvItem;
        boolean                 ret = true;

        select count(RecId)
            from inventStdCostConvItem
            where inventStdCostConvItem.StdCostConvRecId    == inventStdCostConv.RecId &&
                  inventStdCostConvItem.Status              != InventStdCostConvItemStatus::Checked;

        if (inventStdCostConvItem.RecId)
        {
            ret = checkFailed(strFmt("@SYS120324",inventStdCostConvItem.RecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNumberSequence</Name>
				<Source><![CDATA[
        protected boolean validateNumberSequence()
    {
        boolean                 ret = true;

        NumberSequenceReference numberSequenceReference = InventParameters::numRefInventStdCostRevaluationVoucherId();
        if (!numberSequenceReference.NumberSequenceId)
        {
            ret = checkFailed(strFmt("@SYS53911",numberSequenceReference.referenceLabel(),numberSequenceReference.referenceModuleLabel()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOpenInventoryJournals</Name>
				<Source><![CDATA[
        protected boolean validateOpenInventoryJournals()
    {
        boolean                 ret = true;
        InventJournalTrans      inventJournalTrans;
        InventJournalTable      inventJournalTable;
        InventStdCostConvItem   inventStdCostConvItem;

        while select ItemId from inventJournalTrans
            group by ItemId
            exists join inventJournalTable
                where inventJournalTable.JournalId  == inventJournalTrans.JournalId
                   && inventJournalTable.Posted     == NoYes::No
            exists join inventStdCostConvItem
                where inventStdCostConvItem.ItemId              == inventJournalTrans.ItemId
                   && inventStdCostConvItem.StdCostConvRecId    == inventStdCostConv.RecId
        {
            warning(strFmt("@SYS120323", inventJournalTrans.ItemId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReleasedProductions</Name>
				<Source><![CDATA[
        protected boolean validateReleasedProductions()
    {
        boolean                 ret = true;
        ProdTable               prodTable;
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        InventStdCostConvItem   inventStdCostConvItem;

        // Check for production orders spanning over the transition periode
        while select ItemId from inventStdCostConvItem
            group by ItemId
            where inventStdCostConvItem.StdCostConvRecId == inventStdCostConv.RecId
            join ReferenceCategory from inventTransOrigin
                group by ReferenceId, ReferenceCategory
                where  inventTransOrigin.ItemId            == inventStdCostConvItem.ItemId
                   && (inventTransOrigin.ReferenceCategory == InventTransType::Production
                    || inventTransOrigin.ReferenceCategory == InventTransType::ProdLine)
                join TableId from inventTrans
                    where  inventTrans.InventTransOrigin == inventTransOrigin.RecId
                       &&  inventTrans.DatePhysical       < inventStdCostConv.TransitionStartDate
                       && ((inventTrans.StatusReceipt == StatusReceipt::Received && inventTrans.StatusIssue == StatusIssue::None)
                       || (inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue == StatusIssue::Deducted))
                join ProdId, ProdStatus from prodTable
                    group by ProdId, ProdStatus
                    where prodTable.ProdId == inventTransOrigin.ReferenceId
        {
            if (inventTransOrigin.ReferenceCategory == InventTransType::ProdLine)
            {
                warning(strFmt("@SYS120313", prodTable.ProdId, inventStdCostConvItem.ItemId, prodTable.ProdStatus));
            }
            else
            {
                warning(strFmt("@SYS120315", prodTable.ProdId, inventStdCostConvItem.ItemId, prodTable.ProdStatus));
            }
        }

        while select ItemId from inventStdCostConvItem
            join ProdId, ProdStatus from prodTable
            where prodTable.ItemId          == inventStdCostConvItem.ItemId
               && prodTable.ProdStatus      != ProdStatus::Completed
               && prodTable.ProjPostingType == ProjProdPostingType::ConsumedMethod
               && prodTable.ProjId          != ''
        {
            warning(strFmt("@SYS111022" + ' - ' + "@SYS120315", prodTable.ProdId, inventStdCostConvItem.ItemId, prodTable.ProdStatus));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates an <c>InventStdCostConvUpd_Ready</c> object.
    /// </summary>
    /// <param name="_inventStdCostConv">
    ///    An <c>InventStdCostConv</c> record buffer that must be have the status updated.
    /// </param>
    /// <returns>
    ///    An <c>InventStdCostConvUpd_Ready</c> object.
    /// </returns>
    /// <remarks>
    ///    This method should not be called directly. An <c>InventStdCostConvUpd</c> object should be
    ///    instantiated using the constructor on the <c>InventStdCostConvUpd</c> class.
    /// </remarks>
    public static InventStdCostConvUpd_Ready construct(InventStdCostConv _inventStdCostConv)
    {
        return new InventStdCostConvUpd_Ready(_inventStdCostConv);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>