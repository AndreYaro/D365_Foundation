<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ServiceTaxPOTInquiry_Reclaim_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is implements the reclaim logic used by both Batch an manual transactions.
/// </summary>
class ServiceTaxPOTInquiry_Reclaim_IN extends ServiceTaxPOTInquiryBase_IN implements BatchRetryable
{
    AmountCur taxToReclaimBaseAmount;

    #define.CurrentVersion(1)

    #LocalMacro.CurrentList
        isBatchMode,
        vendAcc
    #EndMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueryForReclaim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the query that filters the correct vendor transactions used for reclaim.
    /// </summary>
    /// <returns>
    /// Returns the query that filters the correct vendor transactions used for reclaim.
    /// </returns>
    public QueryRun buildQueryForReclaim()
    {
        QueryBuildDataSource qBDS = queryRun.query().dataSourceTable(tableNum(VendTrans));
        QueryBuildRange      qBR;

        qBDS.addRange(FieldNum(VendTrans, Invoice)).value(SysQuery::valueNotEmptyString());
        qBDS.addRange(FieldNum(VendTrans, AmountCur)).value(queryvalue('<0'));
        qBDS.addRange(FieldNum(VendTrans, SettleAmountCur)).value(strfmt('(SettleAmountCur != 0)'));
        qBDS.addRange(FieldNum(VendTrans, Approved)).value(queryValue(NoYes::Yes));

        qBDS = qBDS.addDataSource(tableNum(VendTrans_W));
        qBDS.relations(true);
        qBDS.joinMode(JoinMode::InnerJoin);
        qBDS.addRange(fieldNum(VendTrans_W, BlockTaxReversal_IN)).value(queryValue(NoYes::No));

        qBR = qBDS.addRange(fieldNum(VendTrans_W, ServiceTaxPOTStatus_IN));
        qBR.value(strFmt('((%1 == %2) || ((%1 == %3) || (%1 == %4)))',
                    fieldStr(VendTrans_W, ServiceTaxPOTStatus_IN),
                    any2int(ServiceTaxPOTStatus_IN::Reversed),
                    any2int(ServiceTaxPOTStatus_IN::PartiallyReversed),
                    any2int(ServiceTaxPOTStatus_IN::PartiallyReclaimed)));

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// The new method that will create the object.
    /// </summary>
    void new()
    {
        super();

        queryRun = new QueryRun(querystr(VendorServiceTaxReclaim_IN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// The class variabled used by th RunBase framework are packed in to a container here.
    /// </summary>
    /// <returns>
    /// The container with packed values.
    /// </returns>

    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postReclaimVouchers</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method posts the reversal vouchers.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The proportionated taxes available for reclaim.
    /// </param>
    /// <param name="_taxTransIN">
    /// The TaxTrans_IN record for original posted taxes.
    /// </param>
    /// <param name="_factor">
    /// The factor used for proportionating taxes.
    /// </param>
    /// <returns>
    /// Returns true upon voucher creation.
    /// </returns>

    public boolean postReclaimVouchers(
        TmpTaxWorkTrans _tmpTaxWorkTrans,
        TaxTrans_IN     _taxTransIN,
        Percent         _factor)
    {
        TaxTrans        taxTrans;
        TaxTrans_IN     taxTransIN;
        Percent         factor;
        RefRecid        defaultAccount;

        taxTrans.clear ();
        taxTrans.initFromTaxWorkTrans(taxWorkTrans, taxWorkTrans.TaxOrigin);
        taxTrans.insert();
        if (_taxTransIN.RecId)
        {
            factor = taxTrans.TaxOrigin == TaxOrigin::TaxReversed ? _factor/100 * -1 : _factor/100;
            taxTransIN.clear();
            taxTransIN.initFromTaxTrans_IN(_taxTransIN, factor);
            taxTransIN.RefRecId              = taxTrans.RecId;
            taxTransIN.Voucher               = taxTrans.Voucher;
            taxTransIN.Source                = taxTrans.Source;
            taxTransIN.TransDate             = taxTrans.TransDate;
            taxTransIN.SourceRecId           = taxWorkTrans.SourceRecId;
            taxTransIN.SourceTableId         = taxWorkTrans.SourceTableId;
            taxTransIN.InvoiceRefRecID       = vendTrans.RecId;
            taxTransIN.TaxCurrency           = _taxTransIN.TaxCurrency;
            taxTransIN.AbatementPercent      = TaxTrans_IN::findRefRecId(_taxTransIN.RecId).AbatementPercent;
            defaultAccount                   = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(taxWorkTrans.LedgerDimension);

            if (taxTrans.TaxOrigin == TaxOrigin::TaxReversed)
            {
                taxTransIN.InterimRecoverableLedgerDimension = defaultAccount;
                taxTransIN.ServiceRecoverableLedgerDimension = 0;
                taxTransIN.RecoverableLedgerDimension        = 0;
            }
            else
            {
                taxTransIN.InterimRecoverableLedgerDimension = 0;
                taxTransIN.ServiceRecoverableLedgerDimension = defaultAccount;
                taxTransIN.RecoverableLedgerDimension        = defaultAccount;
            }

            taxTransIN.insert();
        }

        ledgerPostingController = LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher);
        ledgerVoucherTransObject =  LedgerVoucherTransObject::newTransactionAmountDefault(ledgerPostingController.getReference(),
                                                                                            LedgerPostingType::Tax,
                                                                                            taxWorkTrans.LedgerDimension, // check fot taxtrans
                                                                                            taxWorkTrans.SourceCurrencyCode,
                                                                                            taxTrans.SourceTaxAmountCur,
                                                                                            exchangeRateHelper);
        ledgerVoucherTransObject.parmLedgerDetailLevel( LedgerDetailLevel::Detail);
        ledgerVoucher.addTrans(ledgerVoucherTransObject);
        return taxTransIN.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reclaim</Name>
				<Source><![CDATA[
    /// <summary>
    /// The core logic of POT reclaim process.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Throws error if validation fails.
    /// </exception>
    public void reclaim()
    {
        VendInvoiceJour        vendInvoiceJour;
        TaxTrans               taxTrans;
        TaxTrans_W             taxTrans_W;
        TaxTrans_IN            taxTransIN;
        TaxTable               taxTableLoc;
        RefRecId               serviceTaxRecoverableAccount;
        RefRecId               serviceTaxInterimAccount;
        Percent                percent;
        ServiceTaxPOTStatus_IN serviceTaxStatus;
        TaxItemGroupHeading    taxItemGroupHeading;
        RefRecId               taxLedgerAccountSetup;
        boolean                canPost;
        TaxLedgerAccounts_IN   taxLedgerAccountsRev;

        vendTrans = VendTrans::find(vendTransServiceTaxExtension.VendTrans);

        if (vendTrans)
        {
            ttsbegin;
            ledgerVoucher =  this.initLedgerVoucher();

            vendInvoiceJour = vendInvoiceJour::findFromVendTransVoucher(vendTrans.Invoice,vendTrans.Voucher, vendTrans.TransDate, vendTrans.AccountNum);

            exchangeRateHelper              = CurrencyExchangeHelper::newLedger(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId));
            exchangeRateHelper.parmExchangeRate1(vendInvoiceJour.exchRate);
            exchangeRateHelper.parmExchangeRate2(vendInvoiceJour.ExchRateSecondary);

            taxToReclaimBaseAmount          = vendTransServiceTaxExtension.taxToReclaimBaseAmount();
            percent                         =  abs(taxToReclaimBaseAmount) / abs(vendTrans.AmountCur) * 100;

            serviceTaxStatus =  abs(vendTransServiceTaxExtension.TaxReversedBaseAmount_IN) == abs(vendTransServiceTaxExtension.TaxReclaimedBaseAmount_IN + taxToReclaimBaseAmount)
                                ? ServiceTaxPOTStatus_IN::Reclaimed
                                : ServiceTaxPOTStatus_IN::PartiallyReclaimed;

            if (taxToReclaimBaseAmount > 0)
            {
                taxWorkTrans = null;
                while select taxTrans
                    where taxTrans.TransDate == vendTrans.TransDate
                       && taxTrans.Voucher   == vendTrans.Voucher
                        join RecId, TaxRegistrationNumberTable_IN,ServiceTaxReverseChargePercentage_IN from taxTrans_W
                            where taxTrans_W.TaxTrans == taxTrans.RecId
                        join * from taxTransIN
                            where taxTransIN.RefRecId == taxTrans.RecId
                       join TaxLedgerAccountGroup_IN, TaxComponentTable_IN from taxTableLoc
                            where taxTableLoc.TaxCode    == taxTrans.TaxCode
                               && taxTableLoc.TaxType_IN == TaxType_IN::ServiceTax
                            join RecId, ServiceTaxBasis_IN from taxItemGroupHeading
                                where taxItemGroupHeading.TaxItemGroup == taxTrans.TaxItemGroup
                                   && taxItemGroupHeading.ServiceTaxBasis_IN == ServiceTaxBasis_IN::POTBasis
                {
                    if (taxTrans_W.ServiceTaxReverseChargePercentage_IN != 0)
                    {
                        select firstonly RecId from taxLedgerAccountsRev
                            where taxLedgerAccountsRev.LedgerDimension == taxTransIN.RecoverableLedgerDimension// Allow only recoverables to reverse.
                                && (taxLedgerAccountsRev.AccountType  == TaxAccountType_IN::ServiceTaxRecoverableAccount);
                        if (taxLedgerAccountsRev.RecId == 0)
                        {
                            continue;
                        }
                    }
                    if (LedgerJournalTable::find(vendTrans.JournalNum).JournalType == LedgerJournalType::Approval)
                    {
                        if (!(vendTrans.JournalNum == taxTrans.JournalNum && taxTrans.TaxOrigin == TaxOrigin::Tax))
                        {
                            continue;
                        }
                    }
                    taxLedgerAccountSetup = TaxLedgerAccountSetup_IN::findByTaxAccountGroup(taxTableLoc.TaxLedgerAccountGroup_IN, TaxAccountCode_IN::Table, taxTrans_W.TaxRegistrationNumberTable_IN).RecId;
                    if (!taxLedgerAccountSetup)
                    {
                        taxLedgerAccountSetup = TaxLedgerAccountSetup_IN::findByTaxAccountGroup(taxTableLoc.TaxLedgerAccountGroup_IN, TaxAccountCode_IN::All).RecId;
                    }
                    serviceTaxRecoverableAccount = TaxLedgerAccounts_IN::getAccountNum(taxLedgerAccountSetup, TaxAccountType_IN::ServiceTaxRecoverableAccount, taxTableLoc.TaxComponentTable_IN);
                    serviceTaxInterimAccount = TaxLedgerAccounts_IN::getAccountNum(taxLedgerAccountSetup, TaxAccountType_IN::ServiceTaxInterimRecoverableAccount, taxTableLoc.TaxComponentTable_IN);
                    if (!serviceTaxRecoverableAccount || !serviceTaxInterimAccount)
                    {
                        checkFailed(strFmt("@GLS5614", taxTrans_W.TaxRegistrationNumberTable_IN));
                        throw error("@SYS21533");
                    }
                    taxWorkTrans.clear();
                    headerRecId                         = vendTrans.RecId;
                    invoiceRecId                        = vendInvoiceJour.RecId;
                    taxWorkTrans.HeadingTableId         = vendTrans.TableId;
                    taxWorkTrans.HeadingRecId           = vendTrans.RecId;
                    taxWorkTrans.SourceTableId          = taxTrans.SourceTableId;
                    taxWorkTrans.SourceRecId            = taxTrans.SourceRecId;
                    taxWorkTrans.InvoiceRecId           = vendInvoiceJour.RecId;
                    taxWorkTrans.TaxCode                = taxTrans.TaxCode;
                    taxWorkTrans.TaxGroup               = taxTrans.TaxGroup;
                    taxWorkTrans.TaxItemGroup           = taxTrans.TaxItemGroup;
                    taxWorkTrans.Source                 = TaxModuleType::Voucher;
                    taxWorkTrans.Voucher                = ledgerVoucher.lastVoucher();
                    taxWorkTrans.TransDate              = reverseReclaimDate;
                    taxWorkTrans.CalculationDate        = reverseReclaimDate;
                    taxWorkTrans.InventTransId          = taxTrans.InventTransId;
                    taxWorkTrans.TaxDirection           = taxTrans.TaxDirection;
                    taxWorkTrans.CurrencyCode           = taxTrans.CurrencyCode;
                    taxWorkTrans.LedgerDimension        = LedgerDimensionFacade::serviceCreateLedgerDimension(serviceTaxInterimAccount, vendTrans.DefaultDimension);
                    taxWorkTrans.SourceCurrencyCode     = taxTrans.CurrencyCode;
                    taxWorkTrans.TaxAutogenerated       = taxTrans.TaxAutogenerated;
                    taxWorkTrans.euroTriangulation      = taxTrans.euroTriangulation;
                    taxWorkTrans.TaxAmount               = CurrencyExchangeHelper::amount(taxTrans.TaxAmount * percent * -1 / 100);
                    taxWorkTrans.TaxBaseAmount           = CurrencyExchangeHelper::amount(taxTrans.TaxBaseAmount * percent * -1 / 100);
                    taxWorkTrans.TaxInCostPrice          = CurrencyExchangeHelper::amount(taxTrans.TaxInCostPrice * percent * -1 / 100);
                    taxWorkTrans.TaxInCostPriceMST       = CurrencyExchangeHelper::amount(taxTrans.TaxInCostPriceMST * percent * -1 / 100);
                    taxWorkTrans.TaxAmountCur            = CurrencyExchangeHelper::amount(taxTrans.TaxAmountCur * percent * -1 / 100);
                    taxWorkTrans.TaxBaseAmountCur        = CurrencyExchangeHelper::amount(taxTrans.TaxBaseAmountCur * percent * -1 / 100);
                    taxWorkTrans.SourceRegulateAmountCur = CurrencyExchangeHelper::amount(taxTrans.SourceRegulateAmountCur * percent * -1 / 100);
                    taxWorkTrans.TaxInCostPrice          = CurrencyExchangeHelper::amount(taxTrans.TaxInCostPrice * percent * -1 / 100);
                    taxWorkTrans.TaxInCostPriceRegulated = CurrencyExchangeHelper::amount(taxTrans.TaxInCostPriceRegulated * percent * -1 / 100);
                    taxWorkTrans.TaxInCostPriceMST       = CurrencyExchangeHelper::amount(taxTrans.TaxInCostPriceMST * percent * -1 / 100);
                    taxWorkTrans.TaxInCostPriceCur       = CurrencyExchangeHelper::amount(taxTrans.TaxInCostPriceCur * percent * -1 / 100);
                    taxWorkTrans.SourceBaseAmountCur     = CurrencyExchangeHelper::amount(taxTrans.SourceBaseAmountCur * percent * -1 / 100, taxTrans.SourceCurrencyCode);
                    taxWorkTrans.SourceTaxAmountCur      = CurrencyExchangeHelper::amount(taxTrans.SourceTaxAmountCur * percent * -1 / 100, taxTrans.SourceCurrencyCode);
                    taxWorkTrans.TaxReports              = NoYes::Yes;
                    taxWorkTrans.ExemptTax               = NoYes::No;
                    taxWorkTrans.TaxOrigin               = TaxOrigin::TaxReversed;
                    taxWorkTrans.Txt                     = enum2str(TaxOrigin::TaxReversed);
                    taxWorkTrans.insert();
                    canPost = this.postReclaimVouchers(taxWorkTrans, taxTransIN, percent);
                    taxWorkTrans.TaxCode                = taxWorkTrans.TaxCode;
                    taxWorkTrans.TaxBaseAmount          = - taxWorkTrans.TaxBaseAmount;
                    taxWorkTrans.TaxAmount              = - taxWorkTrans.TaxAmount;
                    taxWorkTrans.TaxInCostPrice         = - taxWorkTrans.TaxInCostPrice;
                    taxWorkTrans.TaxInCostPriceMST      = - taxWorkTrans.TaxInCostPriceMST;
                    taxWorkTrans.TaxBaseAmountCur       = - taxWorkTrans.TaxBaseAmountCur;
                    taxWorkTrans.TaxAmountCur           = - taxWorkTrans.TaxAmountCur;
                    taxWorkTrans.TaxInCostPriceCur      = - taxWorkTrans.TaxInCostPriceCur;
                    taxWorkTrans.SourceBaseAmountCur    = - taxWorkTrans.SourceBaseAmountCur;
                    taxWorkTrans.SourceTaxAmountCur     = - taxWorkTrans.SourceTaxAmountCur;
                    taxWorkTrans.LedgerDimension        = LedgerDimensionFacade::serviceCreateLedgerDimension(serviceTaxRecoverableAccount, vendTrans.DefaultDimension);
                    taxWorkTrans.TaxOrigin              = TaxOrigin::Tax;
                    taxWorkTrans.Txt                    = enum2str(TaxOrigin::Tax);
                    taxWorkTrans.AbatementAmount_IN     = -taxWorkTrans.AbatementAmount_IN;
                    taxWorkTrans.insert();
                    canPost = this.postReclaimVouchers(taxWorkTrans, taxTransIN, percent);
                }
                if (canPost)
                {
                    ledgerVoucher.end();// Only POT shud update
                    this.updateServiceTaxStatusReclaim(serviceTaxStatus);
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reclaimSelectedLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// The user selected transaction for reclaim are available in tmpVendTransServiceTaxExtLinkTable buffer.
    /// Reclaim logic is fired here for each such transaction.
    /// </summary>
    public void reclaimSelectedLines()
    {
        while select tmpVendTransServiceTaxExtLinkTable
        {
            vendTransServiceTaxExtension = VendTrans_W::find(tmpVendTransServiceTaxExtLinkTable.VendTransServiceTaxExtension, true);
            this.reclaim();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// The business logic here starts the reclaim functionality, in a TTS loop, and also handles the exceptions thrown.
    /// </summary>
    /// <exception cref="Exception::UpdateConflictNotRecovered">
    /// Handles the UpdateConflictNotRecovered exception thrown, if encountered.
    /// </exception>
    /// <exception cref="Exception::UpdateConflict">
    /// Handles the UpdateConflict exception thrown, if encountered.
    /// </exception>
    public void run()
    {
        #OCCRetryCount

        super();

        queryRun = this.buildQueryForReclaim();

        try
        {
            ttsBegin;
            if (isBatchMode)
            {
                while (queryRun.next())
                {
                    if (queryRun.changed(tableNum(VendTrans)))
                    {
                        vendTrans = queryRun.get(tableNum(VendTrans));
                        vendTransServiceTaxExtension = VendTrans_W::findByVendTrans(vendTrans.RecId);
                        vendTransServiceTaxExtension.selectForUpdate(true);
                        this.reclaim();
                    }
                }
            }
            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// The class variabled used by th RunBase framework are unpacked from the container here between tiers.
    /// </summary>
    /// <param name="packedClass">
    /// The packed values.
    /// </param>
    /// <returns>
    /// Returns true if unpacked and variables are initialized succesfully.
    /// </returns>

    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        Container   queryCon;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,queryCon] = packedClass;
                if (queryCon && conlen(queryCon) == 1  )
                {
                    queryrun = new QueryRun(queryCon);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceTaxStatusReclaim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the POT status after reclaim
    /// </summary>
    /// <param name="_serviceTaxStatus">
    /// The service tax status passed in.
    /// </param>
    public void updateServiceTaxStatusReclaim(ServiceTaxPOTStatus_IN _serviceTaxStatus)
    {
        if (vendTransServiceTaxExtension)
        {
            vendTransServiceTaxExtension.ServiceTaxPOTStatus_IN    = _serviceTaxStatus;
            vendTransServiceTaxExtension.TaxReclaimedBaseAmount_IN = vendTransServiceTaxExtension.TaxReclaimedBaseAmount_IN + taxToReclaimBaseAmount;
            vendTransServiceTaxExtension.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// The description for the RunBase dialog.
    /// </summary>
    /// <returns>
    /// The description for the RunBase dialog.
    /// </returns>

    public static ClassDescription description()
    {
        return "@SYS4082403";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if can run the inquiry in new session or not.
    /// </summary>
    /// <returns>
    /// True if can run the inquiry in new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>