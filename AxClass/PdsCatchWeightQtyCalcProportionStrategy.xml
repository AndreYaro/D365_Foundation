<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsCatchWeightQtyCalcProportionStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PdsCatchWeightQtyCalcProportionStrategy</c> class represents catch weight quantity calculation strategy with
/// proportional split of catch weight and inventory quantities.
/// </summary>
class PdsCatchWeightQtyCalcProportionStrategy extends PdsCatchWeightQtyCalculationStrategy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
        public void calculate(InventTrans _inventTrans, PdsCWInventQty _cwQuantity)
    {
        InventQty splitWeight;

        if (_cwQuantity >= abs(_inventTrans.PdsCWQty))
        { // include this inventTrans as being used
            inventoryQuantityDelta = abs(_inventTrans.Qty);
            catchWeightQuantityDelta = abs(_inventTrans.PdsCWQty);
        }
        else
        { // Split weight
            if (_inventTrans.PdsCWQty != 0)
            {
                splitWeight = decRound(_inventTrans.Qty * _cwQuantity / _inventTrans.PdsCWQty, InventTable::inventDecimals(_inventTrans.ItemId));
                inventoryQuantityDelta = splitWeight;
                catchWeightQuantityDelta = _cwQuantity;
            }
            else
            { // Add weight since no catch weight quantity
                inventoryQuantityDelta = abs(_inventTrans.Qty);
                catchWeightQuantityDelta = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PdsCatchWeightQtyCalcProportionStrategy construct()
    {
        return new PdsCatchWeightQtyCalcProportionStrategy();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>