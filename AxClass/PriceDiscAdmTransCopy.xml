<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscAdmTransCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for the price and discount search where the <c>PriceDiscTable</c> search queries are built and the data is populated into the <c>PriceDiscAdmTrans</c> table.
/// </summary>
abstract class PriceDiscAdmTransCopy
{
    QueryBuildDataSource        qbdsPriceDiscTable;
    ModuleInventCustVend        partyRoleModule;
    PriceDiscAdmSearch          priceDiscAdmSearch;
    AgreementHeaderExtRecId_RU  agreementHeaderExtRecId;
    Query                       query;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAgreementHeaderExtRecId_RU</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final AgreementHeaderExtRecId_RU parmAgreementHeaderExtRecId_RU(AgreementHeaderExtRecId_RU _agreementHeaderExtRecId_RU = agreementHeaderExtRecId)
    {
        agreementHeaderExtRecId = _agreementHeaderExtRecId_RU;
        return agreementHeaderExtRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPartyRoleModule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final ModuleInventCustVend parmPartyRoleModule()
    {
        return partyRoleModule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDiscAdmSearch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final PriceDiscAdmSearch parmPriceDiscAdmSearch()
    {
        return priceDiscAdmSearch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query and adds the base data source.
    /// </summary>
    protected void initializeQuery()
    {
        query = new Query();
        qbdsPriceDiscTable = query.addDataSource(tableNum(PriceDiscTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyCurrencyFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies currency filter to the <c>PriceDiscTable</c> datasource.
    /// </summary>
    /// <param name = "_qbdsPriceDiscTable">The datasource to modify.</param>
    protected void applyCurrencyFilter()
    {
        if (priceDiscAdmSearch.parmCurrencyCode())
        {
            if (priceDiscAdmSearch.parmGenericCurrency())
            {
                qbdsPriceDiscTable.addRange(fieldNum(PriceDiscTable, Currency)).value(strFmt('((%1.%2=="%3") || (%1.%4==%5))',
                    qbdsPriceDiscTable.name(),
                    fieldStr(PriceDiscTable, Currency),
                    queryValue(priceDiscAdmSearch.parmCurrencyCode()),
                    fieldStr(PriceDiscTable, GenericCurrency),
                    any2int(NoYes::Yes)));
            }
            else
            {
                qbdsPriceDiscTable.addRange(fieldNum(PriceDiscTable, Currency)).value(priceDiscAdmSearch.parmCurrencyCode());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDateFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies date filter to the <c>PriceDiscTable</c> datasource.
    /// </summary>
    /// <param name = "_qbdsPriceDiscTable">The datasource to modify.</param>
    protected void applyDateFilter()
    {
        if (priceDiscAdmSearch.parmToDate())
        {
            qbdsPriceDiscTable.addRange(fieldNum(PriceDiscTable, FromDate)).value(queryRange(null, priceDiscAdmSearch.parmToDate()));
        }
        if (priceDiscAdmSearch.parmFromDate())
        {
            qbdsPriceDiscTable.addRange(fieldNum(PriceDiscTable, ToDate)).value(queryRange(priceDiscAdmSearch.parmFromDate(), null));
            qbdsPriceDiscTable.addRange(fieldNum(PriceDiscTable, ToDate)).value(queryValue(dateNull()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExistsJoins</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds exists joins to the <c>PriceDiscTable</c> datasource.
    /// </summary>
    protected void addExistsJoins()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPriceTypeCriteriaDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the price type criteria datasource to the <c>PriceDiscTable</c> datasource.
    /// </summary>
    /// <returns>A <c>QueryBuilddataSource</c> for the <c>PriceDiscAdmSearchTmpPriceTypeCriteria</c> table.</returns>
    private QueryBuildDataSource addPriceTypeCriteriaDataSource()
    {
        QueryBuilddataSource qbdsDiscPriceTypeCriteria = qbdsPriceDiscTable.addDataSource(tableNum(PriceDiscAdmSearchTmpPriceTypeCriteria));
        qbdsDiscPriceTypeCriteria.cursor(priceDiscAdmSearch.parmDiscPriceTypeCriteria());
        qbdsDiscPriceTypeCriteria.fetchMode(QueryFetchMode::One2One);
        qbdsDiscPriceTypeCriteria.relations(false);
        qbdsDiscPriceTypeCriteria.addLink(fieldNum(PriceDiscTable, relation), fieldNum(PriceDiscAdmSearchTmpPriceTypeCriteria, PriceType), qbdsPriceDiscTable.name());
        qbdsDiscPriceTypeCriteria.addRange(fieldNum(PriceDiscAdmSearchTmpPriceTypeCriteria, IsChecked)).value(queryValue(NoYes::Yes));

        return qbdsDiscPriceTypeCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyPriceTypeCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies price type criteria filtering to the <c>PriceDiscTable</c> data source.
    /// </summary>
    protected void applyPriceTypeCriteria()
    {
        QueryBuildDataSource qbdsDiscPriceTypeCriteria = this.addPriceTypeCriteriaDataSource();

        if ((this.partyRoleModule == ModuleInventCustVend::Cust || this.partyRoleModule == ModuleInventCustVend::Invent) && priceDiscAdmSearch.findSalesPriceDisc())
        {
            qbdsDiscPriceTypeCriteria.addRange(fieldNum(PriceDiscAdmSearchTmpPriceTypeCriteria, Module)).value(queryValue(ModuleInventCustVend::Cust));
        }
        if ((this.partyRoleModule == ModuleInventCustVend::Vend || this.partyRoleModule == ModuleInventCustVend::Invent) && priceDiscAdmSearch.findPurchPriceDisc())
        {
            qbdsDiscPriceTypeCriteria.addRange(fieldNum(PriceDiscAdmSearchTmpPriceTypeCriteria, Module)).value(queryValue(ModuleInventCustVend::Vend));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Joins additional data sources to the <c>PriceDiscTable</c> data source.
    /// </summary>
    abstract protected void addDataSources()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies filters to the <c>PriceDiscTable</c> data source.
    /// </summary>
    protected void applyFilters()
    {
        this.applyDateFilter();

        this.applyCurrencyFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>search</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does the search based on the query.
    /// </summary>
    public void search()
    {
        this.initializeQuery();

        this.addDataSources();

        this.applyFilters();

        this.addExistsJoins();

        query.clearAllFields();

        this.populateData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the data by running the query object.
    /// </summary>
    abstract protected void populateData()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>