<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdCapResResourceDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdCapResResourceContract</c> class is the Data Contract class for the
///    <c>ProdCapacityReservations</c> SSRS report.
/// </summary>
[SRSReportParameterAttribute(classstr(ProdCapResResourceContract))]
public class ProdCapResResourceDP extends SRSReportDataProviderBase
{
    ProdCapResResourceTmp   prodCapResResourceTmp;
    WrkCtrId                resourceGroupId;
    ProdUnitId              prodUnitId;
    FromDate                fromDate;
    ToDate                  toDate;

    #SRSScmAllValue
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getParamValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a specified value is equal to the <c>#SSRScmAll</c> value and replaces it with
    /// empty string.
    /// </summary>
    /// <param name="param">
    /// The string to check.
    /// </param>
    /// <returns>
    /// A sanitized string.
    /// </returns>
    private str getParamValue(str param)
    {
        return (param == #SRSScmAll) ? "" : param;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdCapResResourceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data from the <c>ProdCapResResourceTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data that was retrieved from the <c>ProdCapResResourceTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(ProdCapResResourceTmp))
    ]
    public ProdCapResResourceTmp getProdCapResResourceTmp()
    {
        select prodCapResResourceTmp;
        return prodCapResResourceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceGroups</Name>
				<Source><![CDATA[
        private container getResourceGroups(WrkCtrId _resourceGroupId, WrkCtrId _prodUnitId)
    {
        WrkCtrResourceGroup wrkCtrResourceGroup;
        container           resourceGroups = conNull();

        if (resourceGroupId != '')
        {
            resourceGroups += _resourceGroupId;
        }
        else
        {
            while select WrkCtrId
                from wrkCtrResourceGroup
                where wrkCtrResourceGroup.ProdUnitId == _prodUnitId
            {
                resourceGroups += wrkCtrResourceGroup.WrkCtrId;
            }
        }

        return resourceGroups;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeParameters</Name>
				<Source><![CDATA[
        private void initializeParameters()
    {
        ProdCapResResourceContract contract = this.parmDataContract() as ProdCapResResourceContract;

        resourceGroupId = this.getParamValue(contract.parmResourceGroupId());
        prodUnitId      = this.getParamValue(contract.parmProdUnitId());
        fromDate        = contract.parmFromDate();
        toDate          = contract.parmToDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
        private void insertData(Str60 _id, WrkCtrName _name)
    {
        prodCapResResourceTmp.WrkCtrId  = _id;
        prodCapResResourceTmp.Name      = _name;

        prodCapResResourceTmp.insert();
        prodCapResResourceTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    ///    Note that this is a framework class. Customizing this class may cause problems with future upgrades
    ///    to the software.
    /// </remarks>
    public void processReport()
    {
        WrkCtrTable                 wrkCtrTable;
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;
        WrkCtrResourceGroup         wrkCtrResourceGroup;
        container                   resourceGroups = conNull();
        int                         i;

        this.initializeParameters();

        // We don't support lookup for all prod units and resource groups
        // due to performance reasons.
        if (resourceGroupId == ''
            && prodUnitId == '')
        {
            throw error("@SYS91571");
        }

        resourceGroups = this.getResourceGroups(resourceGroupId, prodUnitId);

        // Insert the 'All' record
        this.insertData(#SRSScmAll, "@SYS131928");

        for (i = 1; i <= conLen(resourceGroups); ++i)
        {
            WrkCtrId tmpWrkCtrId = conPeek(resourceGroups, i);
            while select validTimeState(fromDate, toDate) WrkCtrId, Name from wrkCtrTable
                order by WrkCtrId
                exists join wrkCtrResourceGroupResource
                    where wrkCtrTable.WrkCtrId                      == wrkCtrResourceGroupResource.WrkCtrId
                exists join wrkCtrResourceGroup
                    where wrkCtrResourceGroupResource.ResourceGroup == wrkCtrResourceGroup.RecId    &&
                        wrkCtrResourceGroup.WrkCtrId                == tmpWrkCtrId
            {
                this.insertData(wrkCtrTable.WrkCtrId, wrkCtrTable.Name);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
