<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanDateCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanDateCalaculation</c> class calculates the due date and time and expected date and time
///    for kanban jobs.
/// </summary>
public class KanbanDateCalculation
{
    Kanban              kanban;
    KanbanFlow          kanbanFlow;
    ItemId              itemId;
    InventQty           inventQty;
    WorkCalendarSched   workCalendarSched;
    InventDimId         inventDimId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates a date based on the given parameters.
    /// </summary>
    /// <param name="_startDateTime">
    ///    The starting date and time of the calculation.
    /// </param>
    /// <param name="_seconds">
    ///    The number of seconds to schedule.
    /// </param>
    /// <param name="_forward">
    ///    A Boolean value that indicates whether the scheduling direction is forward.
    /// </param>
    /// <param name="_calendarId">
    ///    The calendar identification that is used in the calculation.
    /// </param>
    /// <returns>
    ///    A date and time value.
    /// </returns>
    protected TransDateTime calcDate(
        TransDateTime _startDateTime,
        real          _seconds,
        boolean       _forward,
        CalendarId    _calendarId)
    {
        TransDateTime   transDateTime  = _startDateTime;
        real            seconds        = _seconds;
        SchedDirection  schedDirection = _forward ? SchedDirection::Forward : SchedDirection::Backward;

        if (_seconds)
        {
            if (_seconds < 0)
            {
                schedDirection = _forward ? SchedDirection::Backward : SchedDirection::Forward;
                seconds        = seconds * -1;
            }

            transDateTime = this.workCalendarSched().schedTimeUTC(
                                                        schedDirection,
                                                        transDateTime,
                                                        seconds,
                                                        true,
                                                        _calendarId,
                                                        true);
        }

        return transDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePeggedKanbanDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates new due date time, based on activity relation constaint.
    /// </summary>
    /// <param name="_parentKanban">
    /// The parent kanban buffer.
    /// </param>
    /// <param name="_dueDateTime">
    /// Original due date.
    /// </param>
    /// <returns>
    /// New due date value.
    /// </returns>
    public TransDateTime calculatePeggedKanbanDueDate(Kanban _parentKanban, TransDateTime _dueDateTime)
    {
        TransDateTime   calcDateTime = _dueDateTime;

        PlanActivity firstActivity = _parentKanban.kanbanFlow().firstPlanActivity();
        PlanActivity lastActivity = kanbanFlow.lastPlanActivity();

        PlanSequenceConstraintValue constraintValue = lastActivity.findActivityConstraintValue(firstActivity);
        if (constraintValue)
        {
            TransDate calcDateTZ = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(calcDateTime, DateTimeUtil::getCompanyTimeZone()));
            CalendarId calendarId = lastActivity.calendarId(calcDateTZ);

            real leadTimeSeconds = this.constraintTimeSeconds(constraintValue.UnitOfMeasure, constraintValue.Value, calendarId);

            if (this.validate(lastActivity, calcDateTZ, leadTimeSeconds,calendarId))
            {
                calcDateTime = this.calcDate(calcDateTime,leadTimeSeconds,false,calendarId);
            }
        }

        return calcDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constraintTimeSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a constraint time from a unit to seconds.
    /// </summary>
    /// <param name="_minValueUnitOfMeasureRecId">
    /// The unit of measure of the constraint value.
    /// </param>
    /// <param name="_minConstraintValue">
    /// The constraint value.
    /// </param>
    /// <param name="_calendarId">
    /// The calendar used for the conversion.
    /// </param>
    /// <returns>
    /// The constraint value in seconds.
    /// </returns>
    protected real constraintTimeSeconds(
        UnitOfMeasureRecId  _minValueUnitOfMeasureRecId,
        ConstraintValue     _minConstraintValue,
        CalendarId          _calendarId)
    {
        real minConstraintValueSeconds;

        if (   _minValueUnitOfMeasureRecId != 0
            && _minConstraintValue         != 0)
        {
            minConstraintValueSeconds = ProdTimeUnitOfMeasure::convertToTimeUnitCalendarId(
                                                    _calendarId,
                                                    _minValueUnitOfMeasureRecId,
                                                    _minConstraintValue,
                                                    ProdTimeUnitType::Seconds);
        }

        return minConstraintValueSeconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobMaterialDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates material date time for a kanban job based on expected date and activity run times.
    /// </summary>
    /// <param name="_kanbanJob">
    /// The kanban job to calculate for.
    /// </param>
    /// <returns>
    /// The material date and time.
    /// </returns>
    public TransDateTime jobMaterialDateTime(KanbanJob _kanbanJob)
    {
        TransDateTime   calcDateTime;

        if (_kanbanJob.ExpectedDateTime != DateTimeUtil::minValue())
        {
            calcDateTime = _kanbanJob.ExpectedDateTime;
        }
        else
        {
            calcDateTime = _kanbanJob.DueDateTime;
        }

        TransDateTime dateTimeToday = DateTimeUtil::newDateTime(DateTimeUtil::date(DateTimeUtil::getSystemDateTime()),0,DateTimeUtil::getCompanyTimeZone());
        calcDateTime = max(calcDateTime, dateTimeToday);

        return this.backwardUsingActivityTime(_kanbanJob, calcDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>backwardUsingActivityTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a date/time backward based on activity time.
    /// </summary>
    /// <param name="_kanbanJob">
    /// The kanban job to calculate for.
    /// </param>
    /// <param name="_calcDateTime">
    /// The date and time to calculate backwards from.
    /// </param>
    /// <returns>
    /// The calculated date/time.
    /// </returns>
    public TransDateTime backwardUsingActivityTime(KanbanJob _kanbanJob, TransDateTime _calcDateTime)
    {
        TransDateTime result = _calcDateTime;
        PlanActivity planActivity = _kanbanJob.planActivity();

        if (planActivity)
        {
            TransDate calcDateTZ = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_calcDateTime, DateTimeUtil::getCompanyTimeZone()));
            CalendarId calendarId = planActivity.calendarId(calcDateTZ);

            // The lead time is only based on the activity time without any constraint time
            real leadTimeSeconds = this.leadTimeSeconds([planActivity, 0, 0], calendarId);

            if (this.validate(planActivity, calcDateTZ, leadTimeSeconds, calendarId))
            {
                result = this.calcDate(_calcDateTime, leadTimeSeconds, false, calendarId);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobMinDateTimeForward</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the minimum datetime a kanban job is allowed to start based on the previous job expected time and constraints.
    /// </summary>
    /// <param name="_kanbanJob">
    /// The kanban job to calculate for.
    /// </param>
    /// <returns>
    /// The minimum datetime for the kanban job.
    /// </returns>
    public TransDateTime jobMinDateTimeForward(KanbanJob _kanbanJob)
    {
        TransDateTime               calcDateTime;

        KanbanJob previousJob = _kanbanJob.previousJob();

        if (previousJob
            && previousJob.Status == LeanKanbanJobStatus::Planned
            && previousJob.ExpectedDateTime != DateTimeUtil::minValue())
        {
            calcDateTime = previousJob.ExpectedDateTime;

            PlanActivity planActivityFrom = previousJob.planActivity();
            PlanActivity planActivityTo = _kanbanJob.planActivity();

            PlanSequenceConstraintValue planSequenceConstraintValue = planActivityFrom.findActivityConstraintValue(planActivityTo);

            TransDate calcDateTZ = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(calcDateTime, DateTimeUtil::getCompanyTimeZone()));
            CalendarId calendarId = planActivityTo.calendarId(calcDateTZ);

            real minConstraintValueSeconds = this.constraintTimeSeconds(planSequenceConstraintValue.UnitOfMeasure, planSequenceConstraintValue.Value, calendarId);

            if (this.validate(planActivityTo, calcDateTZ, minConstraintValueSeconds, calendarId))
            {
                calcDateTime = this.calcDate(calcDateTime, minConstraintValueSeconds, true, calendarId);
            }
        }

        return calcDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>leadTimeSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the lead time of an activity.
    /// </summary>
    /// <param name="_planActivityContainer">
    ///    A container that contains a <c>PlanActivity</c> record, a record ID of the <c>UnitOfMeasure</c>
    ///    table, and a constraint value.
    /// </param>
    /// <param name="_calendarId">
    ///    A calendar identification.
    /// </param>
    /// <returns>
    ///    A lead time in seconds.
    /// </returns>
    protected real leadTimeSeconds(
        container      _planActivityContainer,
        CalendarId     _calendarId)
    {
        PlanActivity                    planActivity;
        real                            leadTimeSeconds;
        UnitOfMeasureRecId              minValueUnitOfMeasureRecId;
        ConstraintValue                 minConstraintValue;

        if (_planActivityContainer)
        {
            [planActivity,minValueUnitOfMeasureRecId,minConstraintValue] = _planActivityContainer;

            real minConstraintValueSeconds = this.constraintTimeSeconds(minValueUnitOfMeasureRecId, minConstraintValue, _calendarId);

            LeanThroughputRatio throughputRatio = LeanScheduleGroup::throughputRatio(planActivity.wrkCtrResourceGroup().RecId,
                                                                                     itemId,
                                                                                     inventDimId);

            leadTimeSeconds += PlanActivityTimeCalculation::newPlannedActivity(
                planActivity,
                itemId,
                inventDimId,
                inventQty,
                UnitOfMeasure::unitOfMeasureIdBySymbol(InventTable::find(itemId).inventUnitId()),
                throughputRatio).totalTimeSeconds();

            // always add constraint times to lead time so that the overall lead time
            // is the sum of all activity times and constraint
            leadTimeSeconds += minConstraintValueSeconds;
        }

        return leadTimeSeconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapDateCalcBackward</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a <c>Map</c> object of lead times, from dates, and to dates by plan activity.
    /// </summary>
    /// <param name="_calculateDateTime">
    ///    The start date for the calculations.
    /// </param>
    /// <param name="_calculatePlanActivityRecId">
    ///    A record ID for the <c>PlanActivity</c> record that marks the last activity in the flow to be
    ///    included.
    /// </param>
    /// <returns>
    ///    A <c>Map</c> object of lead times, from dates, and to dates by plan activity.
    /// </returns>
    protected Map mapDateCalcBackward(
        TransDateTime        _calculateDateTime,
        PlanActivityRefRecId _calculatePlanActivityRecId)
    {
        LeanActivityRelationshipWrapper         prevLeanActivityRelationshipWrapper;
        UnitOfMeasureRecId                      minValueUnitOfMeasureRecId;
        ConstraintValue                         minConstraintValue;
        TransDateTime                           calcDateTimeFrom;
        container                               planActivityContainer;
        List                                    listPlanActivitities = new List(Types::Container);
        Map                                     mapLeadTimes         = new Map(Types::Int64,Types::Container);
        boolean                                 include              = true;
        TransDateTime                           calcDateTimeTo       = _calculateDateTime;

        if (kanbanFlow)
        {
            // init
            KanbanFlowWrapper kanbanFlowWrapper = KanbanFlowWrapper::newKanbanFlow(kanbanFlow);
            LeanActivityRelationshipWrapper leanActivityRelationshipWrapper = kanbanFlowWrapper.firstLeanActivityRelationshipWrapper();
            PlanActivity planActivity = kanbanFlowWrapper.firstPlanActivity();

            //iterate kanban flow (always forward)
            //list: [specified, ..., first]
            while (   include
                   && planActivity)
            {
                if (prevLeanActivityRelationshipWrapper)
                {
                    planActivityContainer = [planActivity,
                                             prevLeanActivityRelationshipWrapper.parmMinValueUnitOfMeasure(),
                                             prevLeanActivityRelationshipWrapper.parmMinConstraintValue()];
                }
                else
                {
                    planActivityContainer = [planActivity,0,0];
                }

                // add at beginning
                listPlanActivitities.addStart(planActivityContainer);

                include                             = planActivity.RecId != _calculatePlanActivityRecId;
                prevLeanActivityRelationshipWrapper = leanActivityRelationshipWrapper;
                leanActivityRelationshipWrapper     = kanbanFlowWrapper.nextLeanActivityRelationshipWrapper();
                planActivity                        = kanbanFlowWrapper.nextPlanActivity();
            }

            if (listPlanActivitities.elements())
            {
                ListEnumerator le = listPlanActivitities.getEnumerator();
                while (le.moveNext())
                {
                    [planActivity,minValueUnitOfMeasureRecId,minConstraintValue] = le.current();

                     // calendar
                    TransDate calcDateTZ = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(calcDateTimeTo,DateTimeUtil::getCompanyTimeZone()));
                    CalendarId calendarId = planActivity.calendarId(calcDateTZ);

                    // lead time
                    real leadTimeSeconds = this.leadTimeSeconds(le.current(),calendarId);

                    // date & map
                    if (this.validate(planActivity,calcDateTZ,leadTimeSeconds,calendarId))
                    {
                        calcDateTimeFrom = this.calcDate(calcDateTimeTo,leadTimeSeconds,false,calendarId);
                        mapLeadTimes.insert(planActivity.RecId,[planActivity,leadTimeSeconds,calendarId,calcDateTimeFrom,calcDateTimeTo]);
                    }

                    calcDateTimeTo = calcDateTimeFrom;
                }
            }
        }

        return mapLeadTimes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapDateCalcForward</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a <c>Map</c> object of lead times, from dates, and to dates by plan activity.
    /// </summary>
    /// <param name="_calculateDateTime">
    ///    The start date for the calculations.
    /// </param>
    /// <param name="_calculatePlanActivityRecId">
    ///    A record ID for the <c>PlanActivity</c> record that marks the first activity in the flow to be
    ///    included.
    /// </param>
    /// <returns>
    ///    A <c>Map</c> object of lead times, from dates, and to dates by plan activity.
    /// </returns>
    protected Map mapDateCalcForward(
        TransDateTime        _calculateDateTime,
        PlanActivityRefRecId _calculatePlanActivityRecId)
    {
        LeanActivityRelationshipWrapper         prevLeanActivityRelationshipWrapper;
        UnitOfMeasureRecId                      minValueUnitOfMeasureRecId;
        ConstraintValue                         minConstraintValue;
        TransDateTime                           calcDateTimeTo;
        container                               planActivityContainer;
        List                                    listPlanActivitities = new List(Types::Container);
        Map                                     mapLeadTimes         = new Map(Types::Int64,Types::Container);
        boolean                                 include              = false;
        TransDateTime                           calcDateTimeFrom     = _calculateDateTime;

        if (kanbanFlow)
        {
            // init
            KanbanFlowWrapper kanbanFlowWrapper = KanbanFlowWrapper::newKanbanFlow(kanbanFlow);
            LeanActivityRelationshipWrapper leanActivityRelationshipWrapper = kanbanFlowWrapper.firstLeanActivityRelationshipWrapper();
            PlanActivity planActivity = kanbanFlowWrapper.firstPlanActivity();

            // iterate kanban flow (always forward)
            // list: [specified, ..., last]
            while (planActivity)
            {
                if (prevLeanActivityRelationshipWrapper)
                {
                    planActivityContainer = [planActivity,
                                             prevLeanActivityRelationshipWrapper.parmMinValueUnitOfMeasure(),
                                             prevLeanActivityRelationshipWrapper.parmMinConstraintValue()];
                }
                else
                {
                    planActivityContainer = [planActivity,0,0];
                }

                include =    include
                          || planActivity.RecId == _calculatePlanActivityRecId;

                if (include)
                {
                    // add at end
                    listPlanActivitities.addEnd(planActivityContainer);
                }

                prevLeanActivityRelationshipWrapper = leanActivityRelationshipWrapper;
                leanActivityRelationshipWrapper = kanbanFlowWrapper.nextLeanActivityRelationshipWrapper();
                planActivity                    = kanbanFlowWrapper.nextPlanActivity();
            }

            if (listPlanActivitities.elements())
            {
                ListEnumerator le = listPlanActivitities.getEnumerator();
                while (le.moveNext())
                {
                    [planActivity,minValueUnitOfMeasureRecId,minConstraintValue] = le.current();

                     // calendar
                    TransDate calcDateTZ = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(calcDateTimeFrom,DateTimeUtil::getCompanyTimeZone()));
                    CalendarId calendarId = planActivity.calendarId(calcDateTZ);

                    // lead time
                    real leadTimeSeconds = this.leadTimeSeconds(le.current(),calendarId);

                    // date & map
                    if (this.validate(planActivity,calcDateTZ,leadTimeSeconds,calendarId))
                    {
                        calcDateTimeTo = this.calcDate(calcDateTimeFrom,leadTimeSeconds,true,calendarId);
                        mapLeadTimes.insert(planActivity.RecId,[planActivity,leadTimeSeconds,calendarId,calcDateTimeFrom,calcDateTimeTo]);
                    }

                    calcDateTimeFrom = calcDateTimeTo;
                }
            }
        }

        return mapLeadTimes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public InventDimId parmInventDimId(InventDimId _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQty</Name>
				<Source><![CDATA[
    public KanbanQuantity parmInventQty(InventQty _inventQty = inventQty)
    {
        inventQty = _inventQty;
        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanban</Name>
				<Source><![CDATA[
    public Kanban parmKanban(Kanban _kanban = kanban)
    {
        kanban = _kanban;
        return kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanFlow</Name>
				<Source><![CDATA[
    public KanbanFlow parmKanbanFlow(KanbanFlow _kanbanFlow = kanbanFlow)
    {
        kanbanFlow = _kanbanFlow;
        return kanbanFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replenishmentLeadTimeSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the replenishment time of a kanban flow in seconds.
    /// </summary>
    /// <returns>
    ///    The replenishment time in seconds.
    /// </returns>
    /// <remarks>The return value has increased precision. Callers need to increaes precision to handle reals.</remarks>
    public real replenishmentLeadTimeSeconds()
    {
        real                                    leadTimeTotalSeconds;
        container                               planActivityContainer;
        TransDate                               calcDateTZ = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (kanbanFlow)
        {
            // init
            KanbanFlowWrapper kanbanFlowWrapper = KanbanFlowWrapper::newKanbanFlow(kanbanFlow);
            LeanActivityRelationshipWrapper leanActivityRelationshipWrapper = kanbanFlowWrapper.firstLeanActivityRelationshipWrapper();
            PlanActivity planActivity = kanbanFlowWrapper.firstPlanActivity();

            // iterate kanban flow
            while (planActivity)
            {
                if (leanActivityRelationshipWrapper)
                {
                    planActivityContainer = [planActivity,
                                             leanActivityRelationshipWrapper.parmMinValueUnitOfMeasure(),
                                             leanActivityRelationshipWrapper.parmMinConstraintValue()];
                }
                else
                {
                    planActivityContainer = [planActivity,0,0];
                }

                // calendar
                CalendarId calendarId = planActivity.calendarId(calcDateTZ);

                // lead time
                real leadTimeSeconds = this.leadTimeSeconds(planActivityContainer,calendarId);

                // cumulate
                if (this.validate(planActivity,calcDateTZ,leadTimeSeconds,calendarId))
                {
                    leadTimeTotalSeconds += leadTimeSeconds;
                }

                leanActivityRelationshipWrapper = kanbanFlowWrapper.nextLeanActivityRelationshipWrapper();
                planActivity                    = kanbanFlowWrapper.nextPlanActivity();
            }
        }

        return leadTimeTotalSeconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDueDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the due date and time of all kanban jobs based on the kanban due date and time, considering
    ///    the lead times of individual jobs.
    /// </summary>
    /// <param name="_createMode">
    ///    A Boolean value that indicates whether kanban jobs are created; optional.
    /// </param>
    /// <param name="_kanbanJob">
    ///    The last kanban job that must not be updated; optional.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The kanban does not have a due date/time.
    /// </exception>
    public void setDueDateTime(
        boolean   _createMode = false,
        KanbanJob _kanbanJob  = null)
    {
        KanbanJob                               kanbanJob;
        LeanProductionFlowActivity              leanProductionFlowActivity;
        PlanActivityRefRecId                    planActivityRefRecId;
        KanbanJobDueDateTime                    dueDateTime;

        if (kanban)
        {
            if (   kanban.DueDateTime == DateTimeUtil::minValue()
                || kanban.DueDateTime == DateTimeUtil::maxValue())
            {
                throw error("@SYS329905",kanban.KanbanId);
            }

            if (_kanbanJob)
            {
                dueDateTime          = _kanbanJob.ExpectedDateTime ? _kanbanJob.ExpectedDateTime : _kanbanJob.DueDateTime;
                planActivityRefRecId = _kanbanJob.planActivity().RecId;
            }
            else
            {
                dueDateTime          = kanban.DueDateTime;
                planActivityRefRecId = kanban.lastKanbanJob().planActivity().RecId;
            }

            Map mapLeadTimes = this.mapDateCalcBackward(dueDateTime,planActivityRefRecId);

            // update all jobs upstream of the provided job if one was given, otherwise all jobs.
            ttsbegin;
            while select forupdate kanbanJob
                order by Sequence desc
                where kanbanJob.Kanban    == kanban.RecId
                   && (kanbanJob.Sequence <  _kanbanJob.Sequence
                   ||  !_kanbanJob.RecId)
                join PlanActivity from leanProductionFlowActivity
                    where leanProductionFlowActivity.RecId == kanbanJob.LeanProductionFlowActivity
            {
                dueDateTime = this.updateKanbanJobDueDate(kanbanJob, leanProductionFlowActivity, mapLeadTimes, dueDateTime, _createMode);
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDueDateTimeForward</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the due date and time of the kanban and all kanban jobs forward from a minimum date, considering
    ///    the lead times of individual jobs.
    /// </summary>
    /// <param name="_calculateFromDateTime">
    ///    The UTC date and time from which the due date should minimum start.
    /// </param>
    /// <param name="_createMode">
    ///    A Boolean value that indicates whether kanban jobs are created; optional.
    /// </param>
    public void setDueDateTimeForward(
        utcdatetime _calculateFromDateTime,
        boolean   _createMode = false)
    {
        KanbanJob                               kanbanJob;
        LeanProductionFlowActivity              leanProductionFlowActivity;

        if (kanban)
        {
            KanbanJobDueDateTime dueDateTime = _calculateFromDateTime;
            PlanActivityRefRecId planActivityRefRecId = kanban.firstKanbanJob().planActivity().RecId;

            Map mapLeadTimes = this.mapDateCalcForward(dueDateTime,planActivityRefRecId);

            ttsbegin;

            // update all jobs
            while select forupdate kanbanJob
                order by Sequence
                where kanbanJob.Kanban    == kanban.RecId
                join PlanActivity from leanProductionFlowActivity
                    where leanProductionFlowActivity.RecId == kanbanJob.LeanProductionFlowActivity
            {
                dueDateTime = this.updateKanbanJobDueDate(kanbanJob, leanProductionFlowActivity, mapLeadTimes, dueDateTime, _createMode);
            }

            if (kanban.DueDateTime != dueDateTime)
            {
                // Update the last date onto the kanban as the new due date
                // The doUpdate is used to avoid havoing the jobs re-calculated again as they have already been updated!
                kanban = Kanban::find(kanban.RecId, true);
                kanban.DueDateTime = dueDateTime;
                kanban.doUpdate();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExpectedDateTimeTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the expected date and time of kanban jobs based on the kanban due date and time, considering
    ///    the lead times of individual jobs.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    The last kanban job that must not be updated.
    /// </param>
    public void setExpectedDateTimeTransfer(KanbanJob _kanbanJob)
    {
        PlanActivity                planActivity;
        LeanProductionFlowActivity  leanProductionFlowActivity;
        Seconds                     leadTimeSeconds;
        KanbanJobDueDateTime        dateTimeFrom;
        KanbanJobDueDateTime        dateTimeTo;
        CalendarId                  calendarId;

        if (   kanban
            && _kanbanJob)
        {
            KanbanJob kanbanJob = _kanbanJob.nextJob();

            if (   kanbanJob
                && !kanbanJob.type().canHaveStatus(LeanKanbanJobStatus::Planned))
            {
                KanbanJobDueDateTime expectedDateTime = _kanbanJob.ActualEndDateTime ? _kanbanJob.ActualEndDateTime : _kanbanJob.ExpectedDateTime;
                Map mapLeadTimes = this.mapDateCalcForward(expectedDateTime,kanbanJob.planActivity().RecId);

                // update all jobs downstream of the provided job if one was given, otherwise all jobs.
                ttsbegin;
                while select forupdate kanbanJob
                    order by Sequence
                    where kanbanJob.Kanban    == kanban.RecId
                       && kanbanJob.Sequence  >  _kanbanJob.Sequence
                    join PlanActivity from leanProductionFlowActivity
                        where leanProductionFlowActivity.RecId == kanbanJob.LeanProductionFlowActivity
                {
                    if (kanbanJob.type().canHaveStatus(LeanKanbanJobStatus::Planned))
                    {
                        // stop as soon as a job is encountered that needs to be planned on the schedule
                        break;
                    }
                    else
                    {
                        if (mapLeadTimes.exists(leanProductionFlowActivity.PlanActivity))
                        {
                            [planActivity,
                                leadTimeSeconds,
                                calendarId,
                                dateTimeFrom,
                                dateTimeTo] = mapLeadTimes.lookup(leanProductionFlowActivity.PlanActivity);
                        }
                        else
                        {
                            [planActivity,
                                leadTimeSeconds,
                                calendarId,
                                dateTimeFrom,
                                dateTimeTo] = [null,0,'',expectedDateTime,expectedDateTime];
                        }

                        if (kanbanJob.Status != LeanKanbanJobStatus::Completed)
                        {
                            kanbanJob.ExpectedDateTime = dateTimeTo;
                            kanbanJob.update();
                        }

                        expectedDateTime = dateTimeTo;
                    }
                }
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateKanbanJobDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a <c>KanbanJob</c> with the due date found in the lead time map.
    /// </summary>
    /// <param name="_kanbanJob">
    /// The <c>KanbanJob</c> record to update, must be selected for update.
    /// </param>
    /// <param name="_leanProductionFlowActivity">
    /// The production flow activity for the kanban job.
    /// </param>
    /// <param name="_mapLeadTimes">
    /// A map containing lead time and from/to date for plan activities.
    /// </param>
    /// <param name="_defaultDueDateTime">
    /// The dafault due date time to apply if the plan activity cannot be found in the map.
    /// </param>
    /// <param name="_createMode">
    /// A Boolean value that indicates whether kanban jobs are created.
    /// </param>
    /// <returns>
    /// The due date time of the kanbanJob.
    /// </returns>
    protected KanbanJobDueDateTime updateKanbanJobDueDate(
        KanbanJob                  _kanbanJob,
        LeanProductionFlowActivity _leanProductionFlowActivity,
        Map                        _mapLeadTimes,
        KanbanJobDueDateTime       _defaultDueDateTime,
        boolean                    _createMode)
    {
        PlanActivity            planActivity;
        Seconds                 leadTimeSeconds;
        KanbanJobDueDateTime    dateTimeFrom;
        KanbanJobDueDateTime    dateTimeTo;
        CalendarId              calendarId;

        if (_mapLeadTimes.exists(_leanProductionFlowActivity.PlanActivity))
        {
            [planActivity,
            leadTimeSeconds,
            calendarId,
            dateTimeFrom,
            dateTimeTo] = _mapLeadTimes.lookup(_leanProductionFlowActivity.PlanActivity);
        }
        else
        {
            [planActivity,
            leadTimeSeconds,
            calendarId,
            dateTimeFrom,
            dateTimeTo] = [null,0,'',_defaultDueDateTime,_defaultDueDateTime];
        }

        if (_kanbanJob.Status != LeanKanbanJobStatus::Completed)
        {
            _kanbanJob.DueDateTime = dateTimeTo;

            if (_kanbanJob.Status < LeanKanbanJobStatus::Planned)
            {
                _kanbanJob.setKanbanJobCapacitySum();
            }

            // for jobs that are not planned (transfer jobs) set the expected date/time to the due date/time
            if (!_kanbanJob.type().canHaveStatus(LeanKanbanJobStatus::Planned))
            {
                _kanbanJob.ExpectedDateTime = _kanbanJob.DueDateTime;
            }

            _kanbanJob.update(false,_createMode);
        }

        return dateTimeTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a calculation result.
    /// </summary>
    /// <param name="_planActivity">
    ///    A <c>PlanActivity</c> record that is used in the validation.
    /// </param>
    /// <param name="_transDate">
    ///    A date that is used in the validation.
    /// </param>
    /// <param name="_seconds">
    ///    A number of seconds value that is used in the validation.
    /// </param>
    /// <param name="_calendarId">
    ///    A calendar identification that is used in the validation.
    /// </param>
    /// <param name="_throwIfError">
    ///    A Boolean value that indicates whether an error must be thrown if the validation fails; optional.
    /// </param>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    No calendar was given for an activity that requires a calendar.
    /// </exception>
    protected boolean validate(
        PlanActivity _planActivity,
        TransDate    _transDate,
        real         _seconds,
        CalendarId   _calendarId,
        boolean      _throwIfError = true)
    {
        boolean result = true;

        if (   _seconds
            && _planActivity.PlanActivityType == PlanActivityType::Operate
            && !_calendarId)
        {
            result = false;

            if (_throwIfError)
            {
                throw error(strfmt("@SYS319604",_planActivity.Name,_transDate));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workCalendarSched</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates or retrieves a <c>WorkCalendarSched</c> object.
    /// </summary>
    /// <returns>
    ///    A <c>WorkCalendarSched</c> object.
    /// </returns>
    protected WorkCalendarSched workCalendarSched()
    {
        if (!workCalendarSched)
        {
            workCalendarSched = new WorkCalendarSched();
        }

        return workCalendarSched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanDateCalculation construct()
    {
        return new KanbanDateCalculation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanbanFlow</Name>
				<Source><![CDATA[
    public static KanbanDateCalculation newKanbanFlow(
        KanbanFlow  _kanbanFlow,
        ItemId      _itemId,
        InventQty   _inventQty,
        InventDimId _inventDimId = InventDim::findOrCreateBlank().InventDimId)
    {
        KanbanDateCalculation   kanbanDateCalculation = KanbanDateCalculation::construct();

        kanbanDateCalculation.parmKanbanFlow(_kanbanFlow);
        kanbanDateCalculation.parmItemId(_itemId);
        kanbanDateCalculation.parmInventQty(_inventQty);
        kanbanDateCalculation.parmInventDimId(_inventDimId);

        return kanbanDateCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanbanJob</Name>
				<Source><![CDATA[
    public static KanbanDateCalculation newKanbanJob(KanbanJob _kanbanJob)
    {
        return KanbanDateCalculation::newStandard(_kanbanJob.kanban());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    public static KanbanDateCalculation newStandard(Kanban _kanban)
    {
        KanbanDateCalculation   kanbanDateCalculation = KanbanDateCalculation::construct();

        kanbanDateCalculation.parmKanban(_kanban);
        kanbanDateCalculation.parmKanbanFlow(_kanban.kanbanFlow());
        kanbanDateCalculation.parmItemId(_kanban.ItemId);
        kanbanDateCalculation.parmInventQty(_kanban.QuantityOrdered);
        kanbanDateCalculation.parmInventDimId(_kanban.InventDimId);

        return kanbanDateCalculation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>