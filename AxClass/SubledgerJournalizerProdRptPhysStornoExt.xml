<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalizerProdRptPhysStornoExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerJournalizerProdRptPhysStornoExt</c> class is an extension for the
/// <c>SublegerJournalizer</c> class to handle product receipt physical storno.
/// </summary>
[
    SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_ProductReceipt), SourceDocument_ProductReceipt::ProductReceipt),
    SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_EmplAdvReport_RU), SourceDocument_EmplAdvReport_RU::EmplAdvReport)
]
public class SubledgerJournalizerProdRptPhysStornoExt extends SubledgerJournalizerExtension
{
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertingImportedSubAccEntryEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for imported subledger journal account entry being inserted to record list.
    /// </summary>
    /// <param name="_subledgerJournalEntry">
    /// <c>SubledgerJournalEntry</c> record being imported.
    /// </param>
    /// <param name="_subledgerJournalAccountEntry">
    /// <c>SubledgerJournalAccountEntry</c> record being imported.
    /// </param>
    /// <param name="_accountingDistributionTmp">
    /// <c>AccountingDistributionTmp</c> record being inserted.
    /// </param>
    /// <param name="_recordInsertList">
    /// record list in which the <c>AccountingDistributionTmp</c> record being inserted.
    /// </param>
    public void insertingImportedSubAccEntryEventHandler(SubledgerJournalEntry _subledgerJournalEntry, SubledgerJournalAccountEntry _subledgerJournalAccountEntry, AccountingDistributionTmp _accountingDistributionTmp, RecordInsertList _recordInsertList)
    {
        if (_accountingDistributionTmp.ReferenceRole == AccountingDistributionReferenceRole::Reversing &&
            _subledgerJournalAccountEntry.PostingType != LedgerPostingType::PurchOrderYearEnd)
        {
            if (subledgerJournalizer.parmSourceDocument().parmIsStornoForReversal_RU() &&
                (select firstonly TransactionCurrencyAmount from accountingDistribution
                    where accountingDistribution.RecId == _accountingDistributionTmp.AccountingDistribution).TransactionCurrencyAmount < 0)
            {
                _accountingDistributionTmp.IsCorrection = true;

                _accountingDistributionTmp.AmountSign   = _accountingDistributionTmp.TransactionCurrencyAmount > 0 ?
                        DebitCredit::Credit : DebitCredit::Debit;

                _accountingDistributionTmp.NegativeAmountSign = _accountingDistributionTmp.AmountSign == DebitCredit::Debit ?
                        DebitCredit::Credit : DebitCredit::Debit;
            }
            else
            {
                _accountingDistributionTmp.IsCorrection = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the subledger journalizer extension events.
    /// </summary>
    protected void subscribe()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            subledgerJournalizer.insertingImportedSubledgerAccEntry += eventhandler(this.insertingImportedSubAccEntryEventHandler);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SubledgerJournalizerProdRptPhysStornoExt construct()
    {
        return new SubledgerJournalizerProdRptPhysStornoExt();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>