<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanMultiDelete</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Deletes kanbans.
/// </summary>
public class KanbanMultiDelete extends RunBaseBatch implements BatchRetryable
{
    container   callerContainerBuffer;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        callerContainerBuffer
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static KanbanMultiDelete construct()
    {
        return new KanbanMultiDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:KanbanDelete";
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret;
        Integer     version = conpeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                ret = true;
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        var dialogRunbase = super();

        dialogRunbase.addGroup().frameType(FormFrameType::None);
        var ctrlGroup = dialogRunbase.form().design().control(dialogRunbase.curFormBuildGroup().name());
        ctrlGroup.columns(1);

        var ctrlNumberOfSelectedKanbans = ctrlGroup.addControl(FormControlType::StaticText, 'ctrlNumberOfSelectedKanbans');
        ctrlNumberOfSelectedKanbans.text(strfmt("@SCM:KanbanDeleteSelection", conLen(callerContainerBuffer)));

        var ctrlDeleteHelpText = ctrlGroup.addControl(FormControlType::StaticText, 'ctrlActionDescription');
        ctrlDeleteHelpText.text("@SCM:KanbanDeleteHelpText");

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    public boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerContainerBuffer</Name>
				<Source><![CDATA[
    public container parmCallerContainerBuffer(container _callerContainerBuffer = callerContainerBuffer)
    {
        callerContainerBuffer = _callerContainerBuffer;
        return callerContainerBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFromFormActiveKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the multi deletion of kanbans from a selected kanban record buffer.
    /// </summary>
    /// <param name = "_formActiveKanban">A active kanban record buffer.</param>
    public static void runFromFormActiveKanban(Kanban _formActiveKanban)
    {
        Args args = new Args();
        args.record(_formActiveKanban);
        new MenuFunction(menuitemActionStr(KanbanMultiDelete), MenuItemType::Action).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>KanbanMultiDelete</c> class provided an <c>Args</c> instance.
    /// </summary>
    /// <param name = "_args">An argumented instance with the kanbans selected for deletion.</param>
    /// <returns>An instance of the <c>KanbanMultiDelete</c> class.</returns>
    public static KanbanMultiDelete newArgs(Args _args)
    {
        KanbanMultiDelete kanbanMultiDelete = KanbanMultiDelete::construct();
        kanbanMultiDelete.parmCallerContainerBuffer(KanbanMulti::selectedFormRecordsToContainer(_args));

        return kanbanMultiDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs deletion on the provided kanbans.
    /// </summary>
    public void run()
    {
        using(KanbanJobDeferredSchedulingScope deferredSchedulingScope = new KanbanJobDeferredSchedulingScope())
        {
            if (callerContainerBuffer)
            {
                this.deleteKanbans();

                var reqEventProcessBatchScheduleTask = ReqEventProcessBatchScheduleTask::newStandard(/* schedule new kanbans */ false, /* clean up deleted kanbans */ true, 0);
                reqEventProcessBatchScheduleTask.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the selected kanbans.
    /// </summary>
    public void deleteKanbans()
    {
        Kanban kanban;

        // iterate over selected records in callers datasource
        for (int i = 1; i <= conLen(callerContainerBuffer); i++)
        {
            if (typeof(conpeek(callerContainerBuffer, i)) == Types::Record)
            {
                kanban = conpeek(callerContainerBuffer, i);
                try
                {
                    ttsbegin;
                    kanban = Kanban::find(kanban.RecId, true);
                            
                    if (kanban.RecId != 0)
                    {
                        kanban.delete();
                    }
                    ttscommit;
                }
                catch
                {
                    // only log error and proceed with deletion of other selected kanbans
                    error(strFmt("@SYS328969", kanban.KanbanId));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        KanbanMultiDelete kanbanMultiDelete = KanbanMultiDelete::newArgs(_args);
        
        if (kanbanMultiDelete.prompt())
        {
            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
            {
                kanbanMultiDelete.runOperation();
            }
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>