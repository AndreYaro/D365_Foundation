<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsCountingJournalToExcel</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rDeferralsCountingJournalToExcel extends RunBaseBatch implements BatchRetryable
{
    RDeferralsCountingJournal     deferralsCountingJournal;
    RDeferralsBookId              deferralsBookId;
    DialogField                   dialogBookId;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        deferralsBookId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a record can go batch.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// This method must be in this class because it is called from the <c>DialogRunBase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase   dialog          = null,
                         boolean         forceOnClient   = false)
    {
        DialogRunbase dialogRunbase = super();
        ;

        dialogBookId = dialogRunbase.addFieldValue(extendedTypeStr(RDeferralsBookId), deferralsBookId);

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        deferralsBookId = dialogBookId.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromArgs(Args _args)
    {
        if (! _args || _args.dataset() != tableNum(RDeferralsCountingJournal))
            throw(error(strFmt("@SYS19306", funcName())));

        deferralsCountingJournal = _args.record();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [ #CurrentVersion, #CurrentList ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a dialog box from a class dialog and waits for user input.
    /// </summary>
    /// <returns>
    /// true if the user clicks OK in the dialog box; otherwise, false.
    /// </returns>
    /// <remarks>
    ///  If the
    ///  <c>
    ///   RunBase.canSwapBetweenCS
    ///  </c>
    ///    and
    ///  <c>
    ///   RunBase.canSwapBetweenCSPrim
    ///  </c>
    ///    methods return true, the class is packed, sent to the client, unpacked, and the prompt is
    ///  executed there. When the dialog box is closed, the class is packed and returned to server where it
    ///  is unpacked. This method is called when
    ///  <list type="bullet">
    ///   <item>
    ///   <description>The user starts the class (typically from the main method)</description>
    ///   </item>
    ///   <item>
    ///   <description>The user wants to modify the settings of a queued batch job.</description>
    ///   </item>
    ///  </list>
    /// </remarks>
    public boolean prompt()
    {
        //printJobSettings.paperOrientation(PrinterOrientation::Landscape);
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        OXMLExcelReport_INV11_RU excelReport = OXMLExcelReport_INV11_RU::construct();
        Args args = new Args();

        args.record(deferralsCountingJournal);
        args.caller(this);

        excelReport.parmArgs(args);

        excelReport.parmDeferralsBookId(deferralsBookId);
        if (excelReport.init())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00094, funcName());
            excelReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version     = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RDeferralsCountingJournalToExcel construct()
    {
        return new RDeferralsCountingJournalToExcel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Name description()
    {
        return "@GLS113096";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    private static void main(Args _args)
    {
        RDeferralsCountingJournalToExcel journalToExcel = RDeferralsCountingJournalToExcel::construct();

        journalToExcel.initFromArgs(_args);
        journalToExcel.initParmDefault();
        if (journalToExcel.prompt())
        {
             journalToExcel.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>