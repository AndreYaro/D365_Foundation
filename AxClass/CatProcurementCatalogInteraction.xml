<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatProcurementCatalogInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CatProcurementCatalogInteraction extends ListPageInteraction
{
    boolean isEPinstalled;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentCatProcureCatalogTable</Name>
				<Source><![CDATA[
    private CatProcureCatalogTable currentCatProcureCatalogTable()
    {
        return this.listPage().activeRecord
                (
                    querydatasourcestr(CatProcurementCatalogListPage, CatProcureCatalogTable)
                ) as CatProcureCatalogTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    public void initializeQuery(Query _query)
    {
        super(_query);

        // Need to select UpdateType field explicitly as form's (CatprocurecatalogListPage) datasource's OnlyFetchActive property is set to 'Yes'.
        //   And fetching UpdateType field explicitly helps enabling/disabling the Publish catalog button.
        // Need Owner for calling CatProcureCatalogTable::canPreview.
        _query.dataSourceName(tablestr('CatProcureCatalogTable')).addSelectionField(fieldNum(CatProcureCatalogTable, UpdateType));
        _query.dataSourceName(tablestr('CatProcureCatalogTable')).addSelectionField(fieldNum(CatProcureCatalogTable, Owner));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializing</Name>
				<Source><![CDATA[
    public void initializing()
    {
        super();
        isEPinstalled = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    public void selectionChanged()
    {
        super();

        this.setControlState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlState</Name>
				<Source><![CDATA[
    private void setControlState()
    {
        CatProcureCatalogTable catProcureCatalogTable = this.currentCatProcureCatalogTable();
        boolean hasRecord = (catProcureCatalogTable.RecId);
        boolean published = hasRecord && (ProcureCatalogPublishingStatus::Active == catProcureCatalogTable.PublishingStatus);

        this.listPage().actionPaneControlEnabled(formcontrolstr(CatProcureCatalogListPage, CatProcureCatalogCloneMIBtn), hasRecord);
        this.listPage().actionPaneControlEnabled(formcontrolstr(CatProcureCatalogListPage, CatProcureCatalogModBtnGrp), hasRecord);
        this.listPage().actionPaneControlEnabled(formcontrolstr(CatProcureCatalogListPage, CatProcureCatalogPrvCmdBtn),
            CatProcureCatalogTable::canPreview(catProcureCatalogTable.RecId, catProcureCatalogTable.Owner, isEPinstalled)        );

        this.listPage().actionPaneControlEnabled(formcontrolstr(CatProcureCatalogListPage, CatProcureCatalogPubCmdBtn), (!published));
        this.listPage().actionPaneControlEnabled(formcontrolstr(CatProcureCatalogListPage, CommandButtonUnpublish), published);

        this.listPage().actionPaneControlEnabled(formcontrolstr(CatProcureCatalogListPage, catProcureCatalogSyncCmdBtn),
            (   (CatProcureCatalogTable.UpdateType == CatProcureCatalogUpdateType::Static)
            ||  (CatProcureCatalogTable.UpdateType == CatProcureCatalogUpdateType::Both)
            )
        );
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>