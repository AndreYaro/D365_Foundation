<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>InventDimQueryBuilder</c> builds inventory dimensions query clauses.
/// </summary>
public final class InventDimQueryBuilder
{
    InventDim               inventDim; 
    InventDim               inventDimCriteria;
    InventDimParm           inventDimParm;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the inventory dimensions query builder class.
    /// </summary>
    /// <param name = "_inventDim">The inventory dimension to join.</param>
    /// <param name = "_inventDimCriteria">The inventory dimension criteria for the join.</param>
    /// <param name = "_inventDimParm">The inventory dimension parameters.</param>
    /// <returns>An instance of <c>InventDimQueryBuilder</c> class.</returns>
    [Hookable(false)]
    public static InventDimQueryBuilder newFromQuery(InventDim _inventDim, InventDim _inventDimCriteria, InventDimParm _inventDimParm)
    {
        InventDimQueryBuilder queryBuilder = new InventDimQueryBuilder();

        queryBuilder.inventDim = _inventDim;
        queryBuilder.inventDimCriteria = _inventDimCriteria;
        queryBuilder.inventDimParm = _inventDimParm;

        return queryBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedInventDimClause</Name>
				<Source><![CDATA[
    private SysDaQueryExpression selectedInventDimClause()
    {
        SysDaQueryExpression selectedInventDimClause = new SysDaEqualsExpression(new SysDaValueExpression(true), new SysDaValueExpression(true));

        ListEnumerator dimFields   = InventDim::dimEnabledFieldList().getEnumerator();

        while (dimFields.moveNext())
        {
            FieldId dimFieldId = dimFields.current();

            if (inventDimParm.isFieldIdEnabled(dimFieldId))
            {
                selectedInventDimClause = selectedInventDimClause
                    .and(
                        new SysDaEqualsExpression(
                            new SysDaFieldExpression(inventDim, fieldId2Name(tableName2Id(tableStr(InventDim)), dimFieldId)),
                            new SysDaValueExpression(inventDimCriteria.(dimFieldId))));
            }
        }

        return selectedInventDimClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allInventDimClause</Name>
				<Source><![CDATA[
    private SysDaQueryExpression allInventDimClause()
    {
        if (inventDimParm.isAllEnabledFlagYes(true))
        {
            return new SysDaEqualsExpression(
                    new SysDaFieldExpression(inventDim, fieldStr(InventDim, SHA1HashHex)), 
                    new SysDaValueExpression(inventDimParm.inventDimHashForValuesAllFlags(inventDimCriteria, false)));
        }

        return new SysDaEqualsExpression(new SysDaValueExpression(true), new SysDaValueExpression(false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>enabledInventDimClause</Name>
				<Source><![CDATA[
    private SysDaQueryExpression enabledInventDimClause()
    {
        if (!inventDimParm.isAllEnabledFlagYes(false))
        {
            return this.selectedInventDimClause();
        }

        return new SysDaEqualsExpression(new SysDaValueExpression(true), new SysDaValueExpression(false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a clause for the inventory dimensions.
    /// </summary>
    /// <returns>A <c>SysDaQueryObject</c> with the join clause.</returns>
    [Hookable(false)]    
    public final SysDaQueryExpression inventDimClause()
    {
        return new SysDaOrExpression(this.allInventDimClause(), this.enabledInventDimClause());
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a join clause for the exists join for inventory dimensions.
    /// </summary>
    /// <returns>A <c>SysDaQueryObject</c> with the join clause.</returns>
    /// <remarks>The macro InventDimExistsJoin should be kept in sync with this clause, as long as the macro is supported.</remarks>
    [Hookable(false)]
    public final SysDaQueryObject joinClause(SysDaFieldExpression _inventDimIdFieldExpression)
    {
        SysDaQueryObject joinQuery = new SysDaQueryObject(inventDim);

        SysDaQueryExpression inventDimIdClause = new SysDaEqualsExpression(
            new SysDaFieldExpression(inventDim, fieldStr(InventDim, InventDimId)), _inventDimIdFieldExpression);
        
        joinQuery.whereClause(inventDimIdClause.and(this.inventDimClause()));

        return joinQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>