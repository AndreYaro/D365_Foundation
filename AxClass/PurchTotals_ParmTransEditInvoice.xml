<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTotals_ParmTransEditInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchTotals_ParmTransEditInvoice extends PurchTotals_ParmTransEdit
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateIsCreditNote</Name>
				<Source><![CDATA[
    protected void calculateIsCreditNote()
    {
        isCreditNote = this.determineIsCreditNote(this.purchTotalAmount(), this.qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a new <see cref="T:PurchTotals" /> object to calculate the totals from an associated
    /// table record.
    /// </summary>
    /// <param name="_source">
    /// The source table record.
    /// </param>
    /// <param name="_specQty">
    /// The quantity to use.
    /// </param>
    /// <param name="_parmId">
    /// A session identifier.
    /// </param>
    /// <param name="_sumPurchId">
    /// A purchase order identifier of the summary <see cref="T:PurchParmTable" /> or
    /// <c>VendInvoiceInfoTable</c> record.
    /// </param>
    /// <param name="_documentStatus">
    /// The document type.
    /// </param>
    /// <returns>
    /// An instance of the <see cref="T:PurchTotals_ParmTransEditInvoice" /> class.
    /// </returns>
    static public PurchTotals_ParmTransEditInvoice construct(
            Common _source,
            PurchUpdate _specQty,
            ParmId _parmId,
            PurchId _sumPurchId,
            DocumentStatus _documentStatus)
    {
        PurchTotals_ParmTransEditInvoice purchTotals_parmTransEditInvoice = new PurchTotals_ParmTransEditInvoice(_source, _specQty, _parmId, _sumPurchId, _documentStatus);

        if (_source.TableId == tableNum(VendInvoiceInfoTable))
        {
            VendInvoiceInfoTable vendInvoiceInfoTable = _source as VendInvoiceInfoTable;

            if (vendInvoiceInfoTable.InvoiceType == PurchInvoiceType::VendorAdvance)
            {
                purchTotals_parmTransEditInvoice.parmKeepEndDisc(true);
            }
        }

        return purchTotals_parmTransEditInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        TaxableDocumentDescriptor taxableDocumentDescriptor;

        if (parmTable.TableId == tableNum(VendInvoiceInfoTable))
        {
            VendInvoiceJour vendInvoiceJourLoc;
            VendInvoiceInfoTable vendInvoiceInfoTable = parmTable;

            select firstonly vendInvoiceJourLoc
                where vendInvoiceJourLoc.SourceDocumentHeader == vendInvoiceInfoTable.SourceDocumentHeader;

            if (vendInvoiceJourLoc)
            {
                taxableDocumentDescriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(vendInvoiceJourLoc);
            }
            else
            {
                taxableDocumentDescriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(vendInvoiceInfoTable);
            }
        }
        else
        {
            taxableDocumentDescriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(parmTable);
        }

        return taxableDocumentDescriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
            Common _source,
            PurchUpdate _specQty,
            ParmId _parmId,
            PurchId _sumPurchId,
            DocumentStatus _documentStatus)
    {
        super(_source, _specQty, _parmId, _sumPurchId, _documentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineMarkupTransExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if a <c>MarkupTrans</c> table record related to a <c>VendInvoiceInfoLine</c> table record exists.
    /// </summary>
    /// <returns>
    ///     true if a <c>MarkupTrans</c> table record exists; otherwise, false.
    /// </returns>
    internal boolean lineMarkupTransExist()
    {
        VendInvoiceInfoLine localVendInvoiceInfoLine;
        MarkupTrans localMarkUpTrans;

        select firstonly RecId from localMarkUpTrans
            where localMarkUpTrans.TransTableId == tableNum(VendInvoiceInfoLine)
                && localMarkUpTrans.IsDeleted == NoYes::No
            exists join localVendInvoiceInfoLine
                where localVendInvoiceInfoLine.ParmId == parmTable.ParmId
                    && localVendInvoiceInfoLine.TableRefId == parmTable.TableRefId
                    && localVendInvoiceInfoLine.RecId == localMarkUpTrans.TransRecId;

        return localMarkUpTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchNewTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the new total amounts during vendor invoicing.
    /// </summary>
    /// <returns>Calculated total amount</returns>
    public AmountCur purchNewTotalAmount()
    {
        newTotalAmount = super();

        if (purchTable
            && purchTable.ProjId
            && parmTable.TableId == tableNum(VendInvoiceInfoTable)
            && FeatureStateProvider::isFeatureEnabled(ProjEnablePendingVendorInvoiceRetentionCalcFlight::instance()))
        {
            ProjOpsManagementLogger logger = ProjOpsManagementLogger::createLogger(classStr(PurchTotals_ParmTransEditInvoice));

            using (var activityContext = logger.projOpsManagementActivity().calcPurchNewTotalAmountContext())
            {
                VendInvoiceInfoLine vendInvoiceInfoLine;
                PurchLine purchLineRetainage;

                if (parmTable.ParmJobStatus != ParmJobStatus::Executed)
                {
                    select sum(PSARetainageAmount), sum(PSAReleaseAmount) from vendInvoiceInfoLine
                        where vendInvoiceInfoLine.ParmId == parmTable.ParmId
                            && vendInvoiceInfoLine.TableRefId == parmTable.TableRefId
                        exists join purchLineRetainage
                            where purchLineRetainage.RecId == vendInvoiceInfoLine.PurchLineRecId
                                && purchLineRetainage.PSARetainScheduleId;
                }

                newTotalAmount -= vendInvoiceInfoLine.PSARetainageAmount;
                newTotalAmount += vendInvoiceInfoLine.PSAReleaseAmount;

                logger.logInformation(strFmt("Purchase order: %1, newTotalAmount: %2, PSARetainageAmount: %3, PSAReleaseAmount: %4",
					purchTable.RecId, newTotalAmount, vendInvoiceInfoLine.PSARetainageAmount, vendInvoiceInfoLine.PSAReleaseAmount));
            }
        }

        return newTotalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldRespectZeroTaxCashDiscPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the zero cash discount percent should be returned.
    /// </summary>
    /// <param name="_cashDiscAmount">The cash discount amount.</param>
    /// <remarks>
    /// If false is returned, the super taxCashDiscPercent() method will be called to determine the cash discount percent.
    /// </remarks>
    internal protected boolean shouldRespectZeroTaxCashDiscPercent(AmountCur _cashDiscAmount)
    {
        if (super(_cashDiscAmount))
        {
            return true;
        }

        // Cash discount can be modified to 0 in vendor invoice.
        // The 0 value is respected on such scenario.
        return (_cashDiscAmount == 0
            && TaxRemoveCashDiscInVendorInvoiceFlight::instance().isEnabled());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>