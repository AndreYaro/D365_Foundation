<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPaymReconcilImport_EP_Return_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendPaymReconcilImport_EP_Return_BR extends VendPaymReconciliationImport implements BatchRetryable
{
    #EP_Return_BR
    dataAreaId                 companyName;
    CustVendAC                 accountNum;
    date                       dueDate;
    VendInvoiceId              vendInvoiceId;
    TransDate                  transDate;
    VendCashDiscAmount         vendCashDiscAmount;
    FinInterestAmount_BR       finInterestAmount_BR;
    AmountCurDebCred           amountCurDebCred;
    RealBase                   feevalue;
    EP_FileReturnSequencialNum retFileSequenceNum;
    EPBankInvoiceId_BR         bankInvoiceId;
    EPCompanyDocument_BR       companyDocument;
    container                  datasizeBatchHeader[];
    FineAmount_BR              fineAmount_BR;
    container                  specRecID;
    boolean                    readFileHeader;
    EPLayoutReturnOccCode_BR   layoutReturnOccCode;
    boolean                    isFileRead;
    boolean                    check;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearLocalData</Name>
				<Source><![CDATA[
    void clearLocalData()
    {
        companyName          = '';
        accountNum           = '';
        vendInvoiceId        = '';
        vendCashDiscAmount   = 0 ;
        finInterestAmount_BR = 0 ;
        amountCurDebCred     = 0 ;
        feevalue             = 0 ;
        bankInvoiceId        = '';
        transDate            = dateNull();
        paymStatusCur        = CustVendPaymStatus::None;
        companyDocument      = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyUse</Name>
				<Source><![CDATA[
    void companyUse(str _companyUse)
    {
        if (_companyUse)
        {
            companyName = this.getFieldData_BR(substr(_companyUse, 1, 3));
            accountNum  = this.getFieldData_BR(substr(_companyUse, 4, 10));
            dueDate     = str2date(this.getFieldData_BR((substr(_companyUse, 16, 25))), 123);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountFromSpecTrans</Name>
				<Source><![CDATA[
    private Amount getAmountFromSpecTrans(
        Amount _amount, 
        CurrencyCode _vendTransCurrencyCode,
        CurrencyCode _ledgerJournalTransCurrencyCode,
        CurrencyCode _ledgerJournalTransRejCurrencyCode,
        TransDate _transDate)
    {
        Amount result;

        if (_vendTransCurrencyCode == _ledgerJournalTransCurrencyCode)
        {
            result = _amount;
        }
        else
        {
            result = CurrencyExchangeHelper::curAmount2CurAmount(_amount, _vendTransCurrencyCode, _ledgerJournalTransRejCurrencyCode, _transDate, true);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFineInterestAmt</Name>
				<Source><![CDATA[
    void getFineInterestAmt(
        InterestAmountCur       _fineAndInterestAmts,
        EPCompanyDocument_BR    _companyDocument)
    {
        LedgerJournalTransPayment_BR ledgerJournalTransPayment_BR;

        select FineAmountCur_BR from ledgerJournalTransPayment_BR
            where ledgerJournalTransPayment_BR.EPCompanyDocument_BR == _companyDocument;

        if (_fineAndInterestAmts)
        {
            if (ledgerJournalTransPayment_BR.FineAmountCur_BR <= _fineAndInterestAmts)
            {
                fineAmount_BR        = ledgerJournalTransPayment_BR.FineAmountCur_BR;
                finInterestAmount_BR = _fineAndInterestAmts - fineAmount_BR;
            }
            else
            {
                fineAmount_BR = _fineAndInterestAmts;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    ClassName interfaceName()
    {
        return "@GLS423";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalAssociatedWithPaymentSpecification</Name>
				<Source><![CDATA[
    private boolean isJournalAssociatedWithPaymentSpecification(
        Amount _amountConfirmed,
        PaymMode _ledgerJournalTransPaymMode,
        PaymMode _paymMode,
        ConfLayoutGroupId_BR _layoutGroupID,
        LedgerJournalId _journalNum)
    {
        return _amountConfirmed
            && _ledgerJournalTransPaymMode == _paymMode
            && _layoutGroupID
            && this.paymentStatus(_journalNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTransShouldBeUpdated</Name>
				<Source><![CDATA[
    private boolean ledgerJournalTransShouldBeUpdated(
        Amount _amountConfirmed,
        Amount _amountRecieved,
        Amount _amountRejected,
        ConfLayoutGroupId_BR _layoutGroupID,
        LedgerJournalTrans _ledgerJournalTrans)
    {
        return _amountConfirmed
            || ((_ledgerJournalTrans.PaymMode == paymMode) && _layoutGroupID && _amountRecieved)
            || (_amountRejected && _ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    boolean openFile()
    {
        boolean     ret = false;
        int         fieldcountloc;

        this.clearContainerData_BR();

        for (fieldcountloc = 1; fieldcountloc < this.parmFieldCount(); fieldcountloc += 1)
        {
            if (fieldDimensions[fieldcountloc])
                if (conpeek(fieldDimensions[fieldcountloc], 1) == #Command
                    && conpeek(fieldDimensions[fieldcountloc], 2) == #RegisterType
                    && conpeek(fieldDimensions[fieldcountloc], 5 ) !="")
            {
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::FixedLength)
                        datasize[1] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 8),
                                       conpeek(fieldDimensions[fieldcountloc], 5),
                                       conpeek(fieldDimensions[fieldcountloc], 4)];
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::Delimited)
                        datasize[1] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 5),
                                       conpeek(fieldDimensions[fieldcountloc], 4)];
            }

            if (conpeek(fieldDimensions[fieldcountloc], 1) == tablestr( LedgerJournalTransPayment_BR)
                    && conpeek(fieldDimensions[fieldcountloc], 2) == fieldstr(LedgerJournalTransPayment_BR, EPCompanyDocument_BR))
            {
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::FixedLength)
                        datasize[2] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 8),
                                       conpeek(fieldDimensions[fieldcountloc], 5)];
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::Delimited)
                        datasize[2] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 5)];
            }

            if (conpeek(fieldDimensions[fieldcountloc], 1) == tablestr(VendTrans)
                    && conpeek(fieldDimensions[fieldcountloc], 2) == fieldstr(VendTrans, Invoice))
            {
                if ( this.parmlayoutType() == ConfLayoutTypesChoice_BR::FixedLength)
                        datasize[3] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 8),
                                       conpeek(fieldDimensions[fieldcountloc], 5) ];
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::Delimited)
                        datasize[3] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 5)];
            }

            if ((conpeek(fieldDimensions[fieldcountloc], 1) == tablestr(VendTransOpen)
                    && conpeek(fieldDimensions[fieldcountloc], 2) == fieldstr(VendTransOpen, TransDate))
                    || (conpeek(fieldDimensions[fieldcountloc], 1) == tablestr(LedgerJournalTrans)
                    && conpeek(fieldDimensions[fieldcountloc], 2) == fieldstr(LedgerJournalTrans, TransDate)))
            {
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::FixedLength)
                        datasize[4] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 8),
                                       conpeek(fieldDimensions[fieldcountloc], 5),
                                       conpeek(fieldDimensions[fieldcountloc], 6)];
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::Delimited)
                        datasize[4] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 5),
                                       conpeek(fieldDimensions[fieldcountloc], 6)];
            }

            if (conpeek(fieldDimensions[fieldcountloc], 1) == tablestr(VendTransCashDisc)
                    && conpeek(fieldDimensions[fieldcountloc], 2) == fieldstr(VendTransCashDisc, CashDiscAmount))
            {
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::FixedLength)
                        datasize[5] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 8),
                                       conpeek(fieldDimensions[fieldcountloc], 5),
                                       conpeek(fieldDimensions[fieldcountloc], 6)];
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::Delimited)
                        datasize[5] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 5),
                                       conpeek(fieldDimensions[fieldcountloc], 6)];
            }
            if (conpeek(fieldDimensions[fieldcountloc], 1) == tablestr(LedgerJournalTransPayment_BR)
                    && conpeek(fieldDimensions[fieldcountloc], 2) == fieldstr(LedgerJournalTransPayment_BR, FinInterestAmountCur_BR))
            {
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::FixedLength)
                        datasize[6] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 8),
                                       conpeek(fieldDimensions[fieldcountloc], 5),
                                       conpeek(fieldDimensions[fieldcountloc], 6)];
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::Delimited)
                        datasize[6] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 5),
                                       conpeek(fieldDimensions[fieldcountloc], 6)];
            }
            if (conpeek(fieldDimensions[fieldcountloc], 1) == tablestr(VendTransOpen)
                    && conpeek(fieldDimensions[fieldcountloc], 2) == fieldstr(VendTransOpen, AmountCur))
            {
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::FixedLength)
                        datasize[7] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 8),
                                       conpeek(fieldDimensions[fieldcountloc], 5),
                                       conpeek(fieldDimensions[fieldcountloc], 6)];
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::Delimited)
                        datasize[7] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 5),
                                       conpeek(fieldDimensions[fieldcountloc], 6)];
            }
            if (conpeek(fieldDimensions[fieldcountloc], 1) == tablestr(CustVendPaymJournalFee)
                    && conpeek(fieldDimensions[fieldcountloc], 2) == fieldstr(CustVendPaymJournalFee, FeeValue))
            {
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::FixedLength)
                        datasize[8] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 8),
                                       conpeek(fieldDimensions[fieldcountloc], 5),
                                       conpeek(fieldDimensions[fieldcountloc], 6)];
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::Delimited)
                        datasize[8] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 5),
                                       conpeek(fieldDimensions[fieldcountloc], 6)];
            }
            if (conpeek(fieldDimensions[fieldcountloc], 1) == tablestr(EPRetOccCodes_BR)
                    && conpeek(fieldDimensions[fieldcountloc], 2) == fieldstr(EPRetOccCodes_BR, LayoutRetOccCode))
            {
                if (datasize[9] == connull())
                {
                    if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::FixedLength)
                            datasize[9] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                           conpeek(fieldDimensions[fieldcountloc], 8),
                                           conpeek(fieldDimensions[fieldcountloc], 5) ];
                    if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::Delimited)
                            datasize[9] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                           conpeek(fieldDimensions[fieldcountloc], 5)];
                }
            }

            if (conpeek(fieldDimensions[fieldcountloc], 1) == tablestr(VendTransOpen)
                    && conpeek(fieldDimensions[fieldcountloc], 3) == 'bankInvoiceId_BR')
            {
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::FixedLength)
                        datasize[10] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 8),
                                       conpeek(fieldDimensions[fieldcountloc], 5) ];
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::Delimited)
                        datasize[10] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 5)];
            }
            if (conpeek(fieldDimensions[fieldcountloc], 1) == tablestr(EP_FileSequenceNum_BR)
                    && conpeek(fieldDimensions[fieldcountloc], 2) == fieldstr(EP_FileSequenceNum_BR, FileReturnSequenceNumber)
                    && conpeek(fieldDimensions[fieldcountloc], 4) == ConfLayoutLineType_BR::Header)
            {
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::FixedLength)
                        datasize[11] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 8),
                                       conpeek(fieldDimensions[fieldcountloc], 5) ];
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::Delimited)
                        datasize[11] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 5)];
            }

            if (conpeek(fieldDimensions[fieldcountloc], 1) == tablestr(LedgerJournalTransPayment_BR)
                    && conpeek(fieldDimensions[fieldcountloc], 2) == fieldstr(LedgerJournalTransPayment_BR, FineAmountCur_BR))
            {
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::FixedLength)
                        datasize[12] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 8),
                                       conpeek(fieldDimensions[fieldcountloc], 5),
                                       conpeek(fieldDimensions[fieldcountloc], 6)];
                if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::Delimited)
                        datasize[12] = [conpeek(fieldDimensions[fieldcountloc], 7),
                                       conpeek(fieldDimensions[fieldcountloc], 5),
                                       conpeek(fieldDimensions[fieldcountloc], 6)];
            }
        }

        if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::FixedLength)
        {
            file = this.convertFileStreamToStreamIO();
        }

        if (this.parmlayoutType() == ConfLayoutTypesChoice_BR::Delimited)
        {
            file = this.convertFileStreamToStreamIO(StreamType::CommaIo);
        }

        if (file)
        {
            if (file.status())
            {
                throw error("@SYS52680");
            }
            file.inFieldDelimiter('\r\n');
            file.inRecordDelimiter('\r\n');
            if ( this.parmlayoutType() == ConfLayoutTypesChoice_BR::Delimited)
            file.inFieldDelimiter(delimiterChars);

            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if journal is associated with a payment specification or not
    /// </summary>
    /// <param name="_journalNum">
    /// Ledger journal number
    /// </param>
    /// <returns>
    /// True if there is a payment specification otherwise false
    /// </returns>
    boolean paymentStatus(LedgerJournalId _journalNum)
    {
        LedgerJournalTrans ledgerJournalTransLoc;
        SpecTrans          specTransLoc;
        boolean            ret = false;
        TransDate          transDateLoc;

        select firstonly RecId from specTransLoc
            where specTransLoc.PaymentStatus == CustVendPaymStatus::Recieved
                || specTransLoc.PaymentStatus == CustVendPaymStatus::Sent
                || specTransLoc.PaymentStatus == CustVendPaymStatus::None
            exists join ledgerJournalTransLoc
                where ledgerJournalTransLoc.JournalNum == _journalNum
                    && specTransLoc.SpecRecId == ledgerJournalTransLoc.RecId
                    && specTransLoc.SpecTableId == ledgerJournalTransLoc.TableId;

        if (!specTransLoc)
        {
            LedgerJournalTrans ledgerJournalTransExists;
            SpecTrans          specTransExists;

            select firstonly RecId from specTransLoc
                where specTransLoc.PaymentStatus == CustVendPaymStatus::Confirmed
                exists join ledgerJournalTransLoc
                    where ledgerJournalTransLoc.JournalNum == _journalNum
                        && specTransLoc.SpecRecId == ledgerJournalTransLoc.RecId
                        && specTransLoc.SpecTableId == ledgerJournalTransLoc.TableId
                exists join ledgerJournalTransExists
                    where ledgerJournalTransExists.JournalNum == _journalNum
                        && ledgerJournalTransExists.TransDate != ledgerJournalTransLoc.TransDate
                exists join specTransExists
                    where specTransExists.SpecRecId == ledgerJournalTransExists.RecId
                        && specTransExists.SpecTableId == ledgerJournalTransExists.TableId;
        }

        return specTransLoc ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecord</Name>
				<Source><![CDATA[
    void processRecord(container _record)
    {
        str    fileLine;
        str    regtypeloc;

        switch (this.parmlayoutType())

        {
            case ConfLayoutTypesChoice_BR::FixedLength:

                if (conpeek(_record, 1))
                {
                    fileLine = conpeek(_record, 1);
                }
                if (datasize[1])
                {
                    regtypeloc = this.getFieldData_BR( substr(fileLine, conpeek(datasize[1], 1), conpeek(datasize[1], 2)));
                }

                if (regtypeloc == this.getFieldData_BR(conpeek(datasize[1], 3)))
                {
                    if (datasize[11] == connull())
                    {
                        retFileSequenceNum = '0'; // Uninformed and not obligatory since it's not in the layout
                    }
                    else if (this.getFieldData_BR(substr(fileLine, conpeek(datasize[11], 1), conpeek(datasize[11], 2)))
                        && conpeek(datasize[1], 4)== ConfLayoutLineType_BR::Header)
                    {
                        if (EP_FileSequenceNum_BR::insertRetSeq(this.getFieldData_BR(substr(fileLine, conpeek(datasize[11], 1), conpeek(datasize[11], 2))), layoutGroupID) == true)
                        {
                            retFileSequenceNum = this.getFieldData_BR( substr(fileLine, conpeek(datasize[11], 1), conpeek(datasize[11], 2)));
                            isFileRead =true;
                        }
                        else
                        {
                            isFileRead = false;
                            isFileImportedAlready = true;
                            file = null;
                        }
                    }

                    if (substr(fileLine, conpeek(datasize[2], 1), conpeek(datasize[2], 2)))
                    {
                        companyDocument = this.getFieldData_BR( substr(fileLine, conpeek(datasize[2], 1), conpeek(datasize[2], 2)));
                    }

                    if (substr(fileLine, conpeek(datasize[3], 1), conpeek(datasize[3], 2)))
                    {
                        vendInvoiceId = this.getFieldData_BR( substr(fileLine, conpeek(datasize[3], 1), conpeek(datasize[3], 2)));
                    }

                    if (substr(fileLine, conpeek(datasize[4], 1), conpeek(datasize[4], 2)))
                    {
                        transDate = this.parseDate(this.getFieldData_BR( substr(fileLine, conpeek(datasize[4], 1), conpeek(datasize[4], 2))), conpeek(datasize[4], 4));
                        if (!transDate)
                        {
                            transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                        }
                    }

                    if (substr(fileLine, conpeek(datasize[5], 1), conpeek(datasize[5], 2)))
                    {
                        vendCashDiscAmount = this.processReturnAmount_BR(_record, 5, ConfLayoutTypesChoice_BR::FixedLength);
                    }

                    if (substr(fileLine, conpeek(datasize[6], 1), conpeek(datasize[6], 2)))
                    {
                        finInterestAmount_BR = this.processReturnAmount_BR(_record, 6, ConfLayoutTypesChoice_BR::FixedLength);
                    }

                    if (substr(fileLine, conpeek(datasize[7], 1), conpeek(datasize[7], 2)))
                    {
                        amountCurDebCred = this.processReturnAmount_BR(_record, 7, ConfLayoutTypesChoice_BR::FixedLength);
                    }

                    if (substr(fileLine, conpeek(datasize[8], 1), conpeek(datasize[8], 2)))
                    {
                        feevalue = this.processReturnAmount_BR(_record, 8, ConfLayoutTypesChoice_BR::FixedLength);
                    }

                    if (substr(fileLine, conpeek(datasize[9], 1), conpeek(datasize[9], 2)))
                    {
                        layoutReturnOccCode = this.getFieldData_BR( substr(fileLine, conpeek(datasize[9], 1), conpeek(datasize[9], 2)));
                        this.parmPaymentStatus(layoutGroupID, layoutReturnOccCode);
                    }

                    if (substr(fileLine, conpeek(datasize[10], 1), conpeek(datasize[10], 2)))
                    {
                        bankInvoiceId = this.getFieldData_BR( substr(fileLine, conpeek(datasize[10], 1), conpeek(datasize[10], 2)));
                    }

                    if (substr(fileLine, conpeek(datasize[12], 1), conpeek(datasize[12], 2)))
                    {
                        fineAmount_BR = this.processReturnAmount_BR( _record, 12, ConfLayoutTypesChoice_BR::FixedLength);
                    }
                }
                break;

            case ConfLayoutTypesChoice_BR::Delimited:
                if (datasize[1])
                {
                    regtypeloc =this.getFieldData_BR(conpeek(_record, conpeek(datasize[1], 1)));
                }

                if (regtypeloc == this.getFieldData_BR(conpeek(datasize[1], 2)))
                {
                    if (conpeek(_record, conpeek(datasize[11], 1)) && conpeek(datasize[1], 3)== ConfLayoutLineType_BR::Header)
                    {
                        if (EP_FileSequenceNum_BR::insertRetSeq(this.getFieldData_BR(conpeek(_record,conpeek(datasize[11], 1))),layoutGroupID) == true)
                        {
                            retFileSequenceNum = this.getFieldData_BR(conpeek(_record,conpeek(datasize[11], 1)));
                            isFileRead =true;
                        }
                        else
                        {
                            isFileRead =false;
                            isFileImportedAlready = true;
                            file = null;
                        }
                    }
                    else
                    {
                        retFileSequenceNum = '0';
                    }

                    if (conpeek(_record, conpeek(datasize[2], 1)))
                    {
                        companyDocument = this.getFieldData_BR(conpeek(_record,conpeek(datasize[2], 1)));
                    }

                    if (conpeek(_record, conpeek(datasize[3], 1)))
                    {
                        vendInvoiceId = this.getFieldData_BR(conpeek(_record,conpeek(datasize[3], 1)));
                    }

                    if (conpeek(_record, conpeek(datasize[4], 1)))
                    {
                        transDate = this.parseDate(conpeek(_record,conpeek(datasize[4], 1)), conpeek(datasize[4], 3));
                        if (!transDate)
                        {
                            transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                        }
                    }

                    if (conpeek(_record, conpeek(datasize[5], 1)))
                    {
                        vendCashDiscAmount = this.processReturnAmount_BR(_record, 5, ConfLayoutTypesChoice_BR::Delimited);
                    }

                    if (conpeek(_record, conpeek(datasize[6], 1)))
                    {
                        finInterestAmount_BR = this.processReturnAmount_BR(_record, 6, ConfLayoutTypesChoice_BR::Delimited);
                    }

                    if (conpeek(_record, conpeek(datasize[7], 1)))
                    {
                        amountCurDebCred = this.processReturnAmount_BR(_record, 7, ConfLayoutTypesChoice_BR::Delimited);
                    }

                    if (conpeek(_record, conpeek(datasize[8], 1)))
                    {
                        feevalue = this.processReturnAmount_BR(_record, 8, ConfLayoutTypesChoice_BR::Delimited);
                    }

                    if (conpeek(_record, conpeek(datasize[9], 1)))
                    {
                        layoutReturnOccCode = this.getFieldData_BR(conpeek(_record,conpeek(datasize[9], 1)));
                        this.parmPaymentStatus(layoutGroupID, layoutReturnOccCode);
                    }
                    if (conpeek(_record, conpeek(datasize[10], 1)))
                    {
                        bankInvoiceId = this.getFieldData_BR(conpeek(_record,conpeek(datasize[10], 1)));
                    }

                    if (substr(fileLine, conpeek(datasize[12], 1), conpeek(datasize[12], 2)))
                    {
                        fineAmount_BR = this.processReturnAmount_BR( _record, 12, ConfLayoutTypesChoice_BR::Delimited);
                    }
                }
                break;
        }

        if (paymStatusCur && companyDocument && retFileSequenceNum)
        {
            if (!transDate)
            {
                transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }
            this.setStatusOnInvoice(vendInvoiceId,
                                    paymStatusCur,
                                    '',
                                    companyDocument,
                                    transDate,
                                    -abs(vendCashDiscAmount),
                                    amountCurDebCred,
                                    finInterestAmount_BR,
                                    fineAmount_BR,
                                    -abs(feevalue),
                                    bankInvoiceId);
            this.clearLocalData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecordComplex_BR</Name>
				<Source><![CDATA[
    public void processRecordComplex_BR()
    {
        EPReturnFileReader_BR           returnFileReader;
        ConfImportEPComplex_BR          confImportEPComplex;
        ListEnumerator                  le;
        EPReturnValues_BR               epReturnValues;
        LedgerJournalTrans              ledgerJournalTrans;
        LedgerJournalTransPayment_BR    ledgerJournalTransPayment;

        returnFileReader = new EPReturnFileReader_BR();
        returnFileReader.setFile(file);

        confImportEPComplex = ConfImportEPComplex_BR::constructVendPaymForLayout(layoutGroupID);
        confImportEPComplex.setPaymMode(paymMode);
        confImportEPComplex.setFile(returnFileReader);
        confImportEPComplex.doImport();

        le = confImportEPComplex.getListOfProcessedDocuments().getEnumerator();
        while (le.MoveNext())
        {
            epReturnValues = confImportEPComplex.getValuesForProcessedDocument(le.current());

            if (!epReturnValues.parmPaymentDate())
            {
                epReturnValues.parmPaymentDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            }

            layoutReturnOccCode = epReturnValues.parmReturnOccuranceCode();

            if (!epReturnValues.parmCompanyDocument())
            {
                info(strFmt("@GLS223814",
                            tableId2pname(tableNum(LedgerJournalTrans))));
            }
            else
            {
                select RecId
                    from ledgerJournalTrans
                    join RecId from ledgerJournalTransPayment
                    where ledgerJournalTrans.RecId == ledgerJournalTransPayment.RefRecId
                        && ledgerJournalTransPayment.EPCompanyDocument_BR == epReturnValues.parmCompanyDocument();

                if (!ledgerJournalTrans)
                {
                    info(strFmt("@GLS223815",
                                epReturnValues.parmCompanyDocument()));
                }
            }

            this.setStatusOnInvoice('',
                                    epReturnValues.parmStatus(),
                                    '',
                                    epReturnValues.parmCompanyDocument(),
                                    epReturnValues.parmPaymentDate(),
                                    abs(epReturnValues.parmDiscountAmount()),
                                    epReturnValues.parmPaymentAmount(),
                                    epReturnValues.parmInterestAmount(),
                                    epReturnValues.parmFineAmount(),
                                    epReturnValues.parmFeeValue(),
                                    epReturnValues.parmBankInvoiceId());
        }

        isFileRead = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        if (! this.validate())
        {
            throw error("");
        }

        try
        {
            ttsbegin;
            this.getLayoutGroupID_BR(paymMode,sysModule);

            if (layoutGroupID
                && isFileRead)
            {
                this.updatePayments();
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusOnInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the vendor payment data on the invoice.
    /// </summary>
    /// <param name="_invoice">
    ///     The invoice number.
    /// </param>
    /// <param name="_status">
    ///     Status the invoice should be updated to. Represented by the base enum <c>CustVendPaymStatus</c>.
    /// </param>
    /// <param name="_errorCodePayment">
    ///     Error code reveived with the return message.
    /// </param>
    /// <param name="_companyDocument">
    ///     The number of the document on the company.
    /// </param>
    /// <param name="_creditDate">
    ///     The date when the credit was performed.
    /// </param>
    /// <param name="_discAmount">
    ///     The amount of discount applied to the payment.
    /// </param>
    /// <param name="_paymentAmount">
    ///     The amount paid.
    /// </param>
    /// <param name="_intAmount">
    ///     The interest amount applied to the payment.
    /// </param>
    /// <param name="_fineAmount">
    ///     The fine amount applied to the payment.
    /// </param>
    /// <param name="_paymentFee">
    ///     The fee amount applied to the payment.
    /// </param>
    /// <param name="_bankInvoiceId">
    ///     The number used for identification of invoice by the bank.
    /// </param>
    void setStatusOnInvoice(
        InvoiceId               _invoice,
        CustVendPaymStatus      _status,
        ErrorCodePayment        _errorCodePayment = '',
        EPCompanyDocument_BR    _companyDocument = '',
        date                    _creditDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        DiscAmount              _discAmount = 0.00,
        AmountCurDebit          _paymentAmount = 0.00,
        FinInterestAmount_BR    _intAmount = 0.00,
        FineAmount_BR           _fineAmount = 0.00,
        PaymFeeValue            _paymentFee = 0.00,
        EPBankInvoiceId_BR      _bankInvoiceId = ''
        )
    {
        SpecTrans                       specTrans;
        LedgerJournalTrans              ledgerJournalTransLoc;
        LedgerJournalTransPayment_BR    ledgerJournalTransPaymentLoc;

        if (_companyDocument == '')
        {
            return;
        }

        ttsbegin;

        select RecId, LedgerDimension, Voucher, JournalNum from ledgerJournalTransLoc
            join RecId from ledgerJournalTransPaymentLoc
                where ledgerJournalTransLoc.RecId == ledgerJournalTransPaymentLoc.RefRecId
                    && ledgerJournalTransLoc.PaymentStatus != CustVendPaymStatus::None
                    && ledgerJournalTransPaymentLoc.EPCompanyDocument_BR == _companyDocument;

        if (ledgerJournalTransLoc)
        {
            this.setStatusOnPaymentAccountVoucher(
                ledgerJournalTransLoc.JournalNum,
                LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTransLoc.LedgerDimension),
                ledgerJournalTransLoc.Voucher,
                _status,
                _errorCodePayment);
        }

        select forupdate specTrans
            where specTrans.SpecRecId  == ledgerJournalTransLoc.RecId;

        if (specTrans.RecId)
        {
            specTrans.PaymentStatus     = _status;
            specTrans.ErrorCodePayment  = _errorCodePayment;
            specTrans.update();

            if ( _status == CustVendPaymStatus::Confirmed)
            {
                this.updateVendConfirmStatusDetails(_invoice,_creditDate,_discAmount,_intAmount,_fineAmount,_paymentAmount,_paymentFee,_bankInvoiceId,specTrans.RecId);
            }

            this.updateVendReturnOccuranceDetails(_creditDate,_bankInvoiceId,specTrans.RecId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTrans</Name>
				<Source><![CDATA[
    private LedgerJournalId updateLedgerJournalTrans(
        Amount _amountConfirmed, 
        Amount _amountRecieved,
        Amount _amountRejected,
        LedgerJournalTable _ledgerJournalTable,
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans _ledgerJournalTransRejected,
        LedgerJournalId _errorLedgerJournalId)
    {
        LedgerJournalTable localNewLedgerJournalTable;
        LedgerJournalTrans ledgerJournalTransLoc;
        SpecTrans specTrans;
        CustVendPaymJournalFee custVendPaymJournalFeeLoc;
        LedgerJournalId errorLedgerJournalId = _errorLedgerJournalId;
        LedgerJournalTable ledgerJournalTable = _ledgerJournalTable;
        LedgerJournalTrans ledgerJournalTrans = _ledgerJournalTrans;
        LedgerJournalTrans ledgerJournalTransRejected = _ledgerJournalTransRejected;

        if (_amountRejected && ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::None)
        {
            ledgerJournalTrans.PaymentStatus    = CustVendPaymStatus::Rejected;
            ledgerJournalTrans.AmountCurCredit  = ledgerJournalTransRejected.AmountCurCredit;
            ledgerJournalTrans.AmountCurDebit   = ledgerJournalTransRejected.AmountCurDebit;

            update_recordset specTrans
                setting SpecRecId = ledgerJournalTrans.RecId
                where specTrans.SpecRecId == ledgerJournalTransRejected.RecId
                    && specTrans.SpecTableId == ledgerJournalTransRejected.TableId
                    && specTrans.SpecCompany == ledgerJournalTransRejected.company();

            ledgerJournalTransRejected.delete();
        }

        if (this.ledgerJournalTransShouldBeUpdated(
                _amountConfirmed,
                _amountRecieved,
                _amountRejected,
                layoutGroupID,
                ledgerJournalTrans))
        {
            ledgerJournalTrans.update();

            if (this.isJournalAssociatedWithPaymentSpecification(
                    _amountConfirmed,
                    ledgerJournalTrans.PaymMode,
                    paymMode,
                    layoutGroupID,
                    ledgerJournalTable.JournalNum))
            {
                if (!LedgerJournalTable::exist(errorLedgerJournalId))
                {
                    errorLedgerJournalId = JournalTableData::newTable(localNewLedgerJournalTable).nextJournalId();
                    localNewLedgerJournalTable.JournalName           = ledgerJournalTable.JournalName;
                    localNewLedgerJournalTable.JournalNum            = errorLedgerJournalId;
                    localNewLedgerJournalTable.Name                  = ledgerJournalTable.Name;
                    localNewLedgerJournalTable.OriginalJournalNum    = ledgerJournalTable.JournalNum;
                    localNewLedgerJournalTable.JournalType           = ledgerJournalTable.JournalType;
                    localNewLedgerJournalTable.parmOffsetLedgerDimension(ledgerJournalTable.parmOffsetLedgerDimension());
                    localNewLedgerJournalTable.OffsetAccountType     = ledgerJournalTable.OffsetAccountType;
                    localNewLedgerJournalTable.NumberSequenceTable   = ledgerJournalTable.NumberSequenceTable;
                    localNewLedgerJournalTable.LedgerJournalInclTax  = ledgerJournalTable.LedgerJournalInclTax;
                    localNewLedgerJournalTable.insert();
                    ledgerJournalTrans.JournalNum = errorLedgerJournalId;
                    ledgerJournalTrans.doUpdate();

                    select firstonly custVendPaymJournalFeeLoc
                        where custVendPaymJournalFeeLoc.RefRecId == ledgerJournalTrans.RecId;

                    if (custVendPaymJournalFeeLoc)
                    {
                        ledgerJournalTransLoc            = LedgerJournalTrans::findRecId(custVendPaymJournalFeeLoc.FeeTransRecId,true);
                        ledgerJournalTransLoc.JournalNum = errorLedgerJournalId;
                        ledgerJournalTransLoc.Voucher    = ledgerJournalTrans.Voucher;
                        ledgerJournalTransLoc.doUpdate();
                    }
                }
                else
                {
                    ledgerJournalTrans.JournalNum = errorLedgerJournalId;
                    ledgerJournalTrans.doUpdate();
                }
            }
        }

        return errorLedgerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates payment specifications
    /// </summary>
    void updatePayments()
    {
        LedgerJournalTable      ledgerJournalTable;
        LedgerJournalTrans      ledgerJournalTrans, ledgerJournalTransRejected;
        date                    dateloc;
        LedgerJournalId         errorLedgerJournalId;
        LedgerJournalId         journalnumLoc;

        errorLedgerJournalId = '';

        ttsbegin;

        while select ledgerJournalTable
            where ledgerJournalTable.JournalType == this.journalType()
                && ledgerJournalTable.Posted == NoYes::No
                join forupdate ledgerJournalTrans order by JournalNum, PaymentStatus, TransDate
                    where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                        && ledgerJournalTrans.PaymMode == paymMode
                        && (ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Sent
                        || ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Recieved
                        || ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Confirmed
                        || ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Rejected)
        {
            if (journalnumLoc != ledgerJournalTable.JournalNum)
            {
                errorLedgerJournalId = '';
                journalnumLoc = ledgerJournalTable.JournalNum;
            }
            else
            {
                dateLoc = (select firstonly TransDate from ledgerJournalTrans
                            where ledgerJournalTrans.JournalNum == errorLedgerJournalId).TransDate;
                if (dateLoc == ledgerJournalTrans.TransDate)
                {
                    journalnumLoc = ledgerJournalTable.JournalNum;
                }
                else
                {
                    errorLedgerJournalId = '';
                }
            }

            ledgerJournalTransRejected = null;
            PaymentSpecTransUpdatedResult_BR paymentSpecTransUpdatedResult = this.updatePaymentSpecTrans(ledgerJournalTrans, ledgerJournalTransRejected);
            ledgerJournalTrans.PaymentStatus = paymentSpecTransUpdatedResult.parmPaymentStatus();
            ledgerJournalTransRejected = paymentSpecTransUpdatedResult.parmLedgerJournalTransRejected();

            errorLedgerJournalId = this.updateLedgerJournalTrans(
                paymentSpecTransUpdatedResult.parmAmountConfirmed(),
                paymentSpecTransUpdatedResult.parmAmountRecieved(),
                paymentSpecTransUpdatedResult.parmAmountRejected(),
                ledgerJournalTable,
                ledgerJournalTrans,
                ledgerJournalTransRejected,
                errorLedgerJournalId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentSpecTrans</Name>
				<Source><![CDATA[
    private PaymentSpecTransUpdatedResult_BR updatePaymentSpecTrans(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans _ledgerJournalTransRejected)
    {
        VendTrans          vendTrans;
        VendTransOpen      vendTransOpen;
        SpecTrans          specTrans;
        Amount             amountConfirmed, amountRecieved, amountRejected;
        LedgerJournalTrans ledgerJournalTransRejected = _ledgerJournalTransRejected;
        CustVendPaymStatus ledgerJournalTransPaymentStatus = _ledgerJournalTrans.PaymentStatus;

        while select forupdate crosscompany specTrans
            where specTrans.SpecTableId == _ledgerJournalTrans.TableId
                && specTrans.SpecRecId == _ledgerJournalTrans.RecId
                && specTrans.SpecCompany == _ledgerJournalTrans.company()
                && (specTrans.PaymentStatus == CustVendPaymStatus::Confirmed
                    || specTrans.PaymentStatus == CustVendPaymStatus::Recieved
                    || specTrans.PaymentStatus == CustVendPaymStatus::Rejected)
            outer join RecId from vendTransOpen
                where vendTransOpen.TableId == specTrans.RefTableId
                    && vendTransOpen.RecId == specTrans.RefRecId
                    && vendTransOpen.DataAreaId == specTrans.RefCompany
                join CurrencyCode from vendTrans
                    where vendTrans.RecId == vendTransOpen.RefRecId
                        && vendTrans.DataAreaId == specTrans.RefCompany
        {
            CustVendPaymStatus paymentStatus = specTrans.PaymentStatus;
            AmountCur amount = this.getAmountFromSpecTrans(
                specTrans.Balance01,
                vendTrans.CurrencyCode,
                _ledgerJournalTrans.CurrencyCode,
                ledgerJournalTransRejected.CurrencyCode,
                ledgerJournalTransRejected.TransDate);

            switch (paymentStatus)
            {
                case CustVendPaymStatus::Confirmed :
                    ledgerJournalTransPaymentStatus = paymentStatus;
                    amountConfirmed += amount;
                    break;

                case CustVendPaymStatus::Recieved :
                    ledgerJournalTransPaymentStatus = paymentStatus;
                    amountRecieved += amount;
                    break;

                case CustVendPaymStatus::Rejected :
                    if (!ledgerJournalTransRejected.RecId)
                    {
                        ledgerJournalTransRejected.data(_ledgerJournalTrans);
                        ledgerJournalTransRejected.PaymentStatus = paymentStatus;
                        ledgerJournalTransRejected.RecId		 = 0;
                        ledgerJournalTransRejected.LineNum		 = LedgerJournalTrans::lastLineNum(_ledgerJournalTrans.JournalNum) + 1;
                        ledgerJournalTransRejected.insert();
                    }

                    specTrans.SpecRecId = ledgerJournalTransRejected.RecId;
                    specTrans.update();

                    amountRejected += amount;
                    break;

                default :
                    break;
            }
        }

        PaymentSpecTransUpdatedResult_BR paymentSpecTransUpdatedResult = new PaymentSpecTransUpdatedResult_BR();
        paymentSpecTransUpdatedResult.parmAmountConfirmed(amountConfirmed);
        paymentSpecTransUpdatedResult.parmAmountRecieved(amountRecieved);
        paymentSpecTransUpdatedResult.parmAmountRejected(amountRejected);
        paymentSpecTransUpdatedResult.parmPaymentStatus(ledgerJournalTransPaymentStatus);
        paymentSpecTransUpdatedResult.parmLedgerJournalTransRejected(ledgerJournalTransRejected);
        
        return paymentSpecTransUpdatedResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendConfirmStatusDetails</Name>
				<Source><![CDATA[
    private void updateVendConfirmStatusDetails(
        InvoiceId               _invoiceNumber,
        date                    _creditDate,
        DiscAmount              _discAmount,
        FinInterestAmount_BR    _intAmount,
        FineAmount_BR           _fineAmount,
        AmountCurDebit          _paymentAmount,
        PaymFeeValue            _paymentFee,
        EPBankInvoiceId_BR      _bankInvoiceId,
        RecId                   _specTransRecId)
    {
        if (_specTransRecId)
        {
            if (_paymentAmount)
            {
                this.updateVendPaymentAmount(_paymentAmount, _specTransRecId);
            }
            if (_creditDate)
            {
                this.updateVendCreditDate(_creditDate, _specTransRecId);
            }

            this.updateVendDiscAmount(_discAmount, _creditDate, _specTransRecId);
            this.updateVendFineAmount(_fineAmount, _specTransRecId);
            this.updateVendInterestAmount(_intAmount, _specTransRecId);
            this.updateVendPaymentFee(_paymentFee, _specTransRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendCreditDate</Name>
				<Source><![CDATA[
    private void updateVendCreditDate(
        date    _creditDate,
        Recid   _specTransRecId)
    {
        LedgerJournalTrans ledgerJournalTransLoc;
        SpecTrans          specTransLoc;

        ttsbegin;
        select RecId from specTransLoc
            where specTransLoc.RecId == _specTransRecId
                join forupdate ledgerJournalTransLoc
                    where ledgerJournalTransLoc.RecId == specTransLoc.SpecRecId;

        if (ledgerJournalTransLoc)
        {
            ledgerJournalTransLoc.TransDate = _creditDate;
            ledgerJournalTransLoc.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendDiscAmount</Name>
				<Source><![CDATA[
    private void updateVendDiscAmount(
        DiscAmount _discAmount,
        date       _creditDate,
        RecId      _specTransRecId)
    {
        VendTransOpen     vendTransOpenLoc;
        SpecTrans         specTransLoc;
        VendTransCashDisc vendTransCashDiscLoc;

        if (confind(specRecid, _specTransRecId) == 0)
        {
            ttsbegin;

            select forupdate specTransLoc where specTransLoc.RecId == _specTransRecId;

            if (specTransLoc.RefCompany)
            {
                changecompany(specTransLoc.RefCompany)
                {
                    delete_from vendTransCashDiscLoc
                        where vendTransCashDiscLoc.RefRecId == specTransLoc.RefRecId;

                    vendTransCashDiscLoc.CashDiscdate   = _creditDate;
                    vendTransCashDiscLoc.CashDiscAmount = _discAmount;
                    vendTransCashDiscLoc.RefRecId       = specTransLoc.RefRecId;
                    vendTransCashDiscLoc.RefTableId     = tablename2id(tablestr(VendTransOpen));
                    vendTransCashDiscLoc.CashDiscDue    = CashDiscDue::CashDisc;
                    vendTransCashDiscLoc.Manual         = NoYes::No;
                    vendTransCashDiscLoc.insert();

                    select forupdate vendTransOpenLoc where vendTransOpenLoc.RecId == specTransLoc.RefRecId;
                    vendTransOpenLoc.PossibleCashDisc   = _discAmount;
                    vendTransOpenLoc.update();
                }
            }

            specTransLoc.Balance01 = vendTransOpenLoc.AmountCur -_discAmount;
            specTransLoc.update();
            ttscommit;

            specRecid += _specTransRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendFineAmount</Name>
				<Source><![CDATA[
    private void updateVendFineAmount(
        FineAmount_BR   _fineAmount,
        RecId           _specTransRecId)
    {
        LedgerJournalTrans           ledgerJournalTransLoc;
        SpecTrans                    specTransLoc;
        VendTransOpen                vendTransOpenloc;
        LedgerJournalTransPayment_BR ledgerJournalTransPayment_BRloc;

        ttsbegin;
        select RefCompany, RefTableId, RefRecId
            from specTransLoc
            where specTransLoc.RecId == _specTransRecId
            join forupdate ledgerJournalTransLoc
                where ledgerJournalTransLoc.RecId == specTransLoc.SpecRecId
                    && ledgerJournalTransLoc.TableId == specTransLoc.SpecTableId
                    && ledgerJournalTransLoc.DataAreaId == specTransLoc.SpecCompany
            join forUpdate ledgerJournalTransPayment_BRloc
                where ledgerJournalTransPayment_BRloc.RefRecId == ledgerJournalTransLoc.RecId;

        if (ledgerJournalTransPayment_BRloc)

        {
            ledgerJournalTransPayment_BRloc.FineAmountCur_BR = _fineAmount;
            ledgerJournalTransPayment_BRloc.update();
        }

        if (specTransLoc.RefCompany)
        {
            changecompany(specTransLoc.RefCompany)
            {
                select forupdate  vendTransOpenloc
                    where vendTransOpenloc.RecId == specTransLoc.RefRecId
                        && vendTransOpenloc.TableId == specTransLoc.RefTableId
                        && vendTransOpenloc.DataAreaId == specTransLoc.RefCompany;

                if (vendTransOpenloc)
                {
                    vendTransOpenloc.FineAmount_BR        = -_fineAmount;
                    vendTransOpenloc.FineAmountPaymCur_BR = -_fineAmount;
                    vendTransOpenloc.update();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendInterestAmount</Name>
				<Source><![CDATA[
    private void updateVendInterestAmount(
        FinInterestAmount_BR    _intAmount,
        RecId                   _specTransRecId)
    {
        LedgerJournalTrans           ledgerJournalTransLoc;
        SpecTrans                    specTransLoc;
        VendTransOpen                vendTransOpenloc;
        LedgerJournalTransPayment_BR ledgerJournalTransPayment_BRloc;

        ttsbegin;
        select RefCompany, RefTableId, RefRecId from specTransLoc
            where specTransLoc.RecId == _specTransRecId
            join forupdate ledgerJournalTransLoc
                where ledgerJournalTransLoc.RecId == specTransLoc.SpecRecId
                    && ledgerJournalTransLoc.TableId == specTransLoc.SpecTableId
                    && ledgerJournalTransLoc.DataAreaId == specTransLoc.SpecCompany
            join forUpdate ledgerJournalTransPayment_BRloc
                where ledgerJournalTransPayment_BRloc.RefRecId == ledgerJournalTransLoc.RecId;

        if (ledgerJournalTransPayment_BRloc)
        {
            ledgerJournalTransPayment_BRloc.FinInterestAmountCur_BR = _intAmount;
            ledgerJournalTransPayment_BRloc.update();
        }

        if (specTransLoc.RefCompany)
        {
            changecompany(specTransLoc.RefCompany)
            {
                select forupdate vendTransOpenloc
                    where vendTransOpenloc.RecId == specTransLoc.RefRecId
                        && vendTransOpenloc.TableId == specTransLoc.RefTableId
                        && vendTransOpenloc.DataAreaId == specTransLoc.RefCompany;

                if (vendTransOpenloc )
                {
                    vendTransOpenloc.InterestAmount_BR        = -_intAmount;
                    vendTransOpenloc.InterestAmountPaymCur_BR = -_intAmount;
                    vendTransOpenloc.update();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendPaymentAmount</Name>
				<Source><![CDATA[
    private void updateVendPaymentAmount(
        AmountCurDebit          _paymentAmount,
        RecId                   _specTransRecId)
    {
        LedgerJournalTrans ledgerJournalTransLoc;
        SpecTrans          specTransLoc;

        ttsbegin;

        select forupdate ledgerJournalTransLoc
            exists join specTransLoc
            where specTransLoc.RecId                == _specTransRecId
               && ledgerJournalTransLoc.RecId       == specTransLoc.SpecRecId
               && ledgerJournalTransLoc.TableId     == specTransLoc.SpecTableId
               && ledgerJournalTransLoc.dataAreaId  == specTransLoc.SpecCompany;

        if (ledgerJournalTransLoc)
        {
            ledgerJournalTransLoc.AmountCurCredit = 0;
            ledgerJournalTransLoc.AmountCurDebit  = abs(_paymentAmount);
            ledgerJournalTransLoc.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendPaymentFee</Name>
				<Source><![CDATA[
    private void updateVendPaymentFee(
        PaymFeeValue    _paymentFee,
        RecId           _specTransRecId)
    {
        LedgerJournalTrans     ledgerJournalTransLoc;
        CustVendPaymJournalFee custVendPaymJournalFeeLoc;
        SpecTrans              specTransLoc;

        ttsbegin;
        select RefCompany from specTransLoc
            where specTransLoc.RecId == _specTransRecId
            join ledgerJournalTransLoc
                where ledgerJournalTransLoc.RecId == specTransLoc.SpecRecId;

        if (ledgerJournalTransLoc)
        {
            changecompany(specTransLoc.RefCompany)
            {
                select forupdate custVendPaymJournalFeeLoc where custVendPaymJournalFeeLoc.RefRecId == ledgerJournalTransLoc.RecId;

                if (custVendPaymJournalFeeLoc)
                {
                    if (custVendPaymJournalFeeLoc.FeeId)
                    {
                        if (_paymentFee != 0)
                        {
                            custVendPaymJournalFeeLoc.FeeValue = _paymentFee;
                            custVendPaymJournalFeeLoc.update();
                        }
                        else
                        {
                            custVendPaymJournalFeeLoc.delete();
                        }
                    }
                }
                else
                {
                    if (_paymentFee != 0)
                    {
                        custVendPaymJournalFeeLoc.RefRecId            = ledgerJournalTransLoc.RecId;
                        custVendPaymJournalFeeLoc.FeeValue            = _paymentFee;
                        custVendPaymJournalFeeLoc.FeeCurrency         = ledgerJournalTransLoc.CurrencyCode;
                        custVendPaymJournalFeeLoc.Module              = ModuleCustVend::Vend;
                        custVendPaymJournalFeeLoc.LedgerJournalACType = LedgerJournalACType::Ledger;
                        custVendPaymJournalFeeLoc.insert();
                    }
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendReturnOccuranceDetails</Name>
				<Source><![CDATA[
    private void updateVendReturnOccuranceDetails(
        date                _creditdate,
        EPBankInvoiceId_BR  _bankInvoiceId,
        RecId               _specTransRecId)
    {
        SpecTrans           specTransLoc;
        VendTransEPRemit_BR vendTransEPRemit_BR;
        EPRetOccCode_BR     epRetOccCode_BR;

        ttsbegin;
        select RefCompany, RefTableId, RefRecId from specTransLoc
            where specTransLoc.RecId == _specTransRecId;

        epRetOccCode_BR = str2enum(epRetOccCode_BR,this.parmReturnOccCode_BR(layoutGroupID, layoutReturnOccCode));

        if (specTransLoc.RefCompany)
        {
            changecompany(specTransLoc.RefCompany)
            {
                select forupdate vendTransEPRemit_BR
                    where vendTransEPRemit_BR.VendTransOpenRefRecId == specTransLoc.RefRecId;

                if (vendTransEPRemit_BR)
                {
                    vendTransEPRemit_BR.RetOccCode    =  epRetOccCode_BR;
                    vendTransEPRemit_BR.RetDate       =  _creditdate;
                    vendTransEPRemit_BR.BankInvoiceId = _bankInvoiceId;
                    vendTransEPRemit_BR.update();
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return new VendPaymReconcilImport_EP_Return_BR().interfaceName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>