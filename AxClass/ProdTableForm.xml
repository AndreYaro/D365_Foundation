<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdTableForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdTableForm implements ButtonStateProvider
{
    InventMovement          inventMovement;
    InventDimCtrl_Frm_Mov   inventDimFormSetup;
    boolean                 qualityManagementEnabled;

    FormDataSource          prodTable_ds;
    ProdTable               prodTable;
    FormDataSource          inventDim_ds;
    InventDim               inventDim;
    ProdTableProj           prodTableProjError;
    FormDataSource          prodTableProjError_ds;
    ProdTableProj           prodTableProjOver;
    FormDataSource          prodTableProjOver_ds;
    FormRun                 formRun;
    ProdTable               createProdTable;
    InventDim               createInventDim;

    ProdId                  createProdNum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkGanttEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the rule code for enabling or disabling the <c>Gantt</c> button that is displayed in the
    ///    caller form.
    /// </summary>
    /// <returns>
    ///    true if the <c>Gantt</c> button should be enabled; otherwise, false.
    /// </returns>
    public boolean checkGanttEnabled()
    {
        ProdStatusType prodStatus = prodTable.statusClient();
        return prodStatus.runGanttChart(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHasData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the rule code for enabling or disabling the buttons depending on whether data is
    ///    available in the caller form.
    /// </summary>
    /// <returns>
    ///    true if the <c>Gantt</c> button should be enabled; otherwise false.
    /// </returns>
    public boolean checkHasData()
    {
        return (prodTable) ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsProj</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the rule code to determine whether a project is linked to this production order.
    /// </summary>
    /// <returns>
    ///    true if a project is linked to the production order; otherwise false.
    /// </returns>
    public boolean checkIsProj()
    {
        return (prodTable.ProjId) ? (true) : (false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQualityManagementEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the rule code for showing or hiding the quality management controls on the caller form.
    /// </summary>
    /// <returns>
    ///    true if the buttons should be visible; otherwise false.
    /// </returns>
    public boolean checkQualityManagementEnabled()
    {
        return qualityManagementEnabled;
    }

]]></Source>
			</Method>	
			<Method>
				<Name>checkChangeGroupEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the rule code for showing or hiding the change group on the caller form.
    /// </summary>
    /// <returns>
    ///    true if the group should be visible; otherwise false.
    /// </returns>
    public boolean checkChangeGroupEnabled()
    {
        return ProdBOMChangeItemFeature::instance().isEnabled() ||
            ProdRouteChangeFeature::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs special actions regarding clearing advanced cache for the <c>ProdTableForm</c> class.
    /// </summary>
    /// <remarks>
    ///    No advanced caching is implemented in the <c>ProdTableForm</c>, thus the method is empty.
    /// </remarks>
    public void clearCache()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineButtonStates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Evaluates rules for the <c>ProdTableForm</c> class.
    /// </summary>
    /// <param name="_ruleFunctionName">
    ///    A string specifying the method name for the rule being evaluated
    /// </param>
    /// <remarks>
    ///    No advanced caching is implemented in the <c>ProdTableForm</c>, thus the method is empty.
    /// </remarks>
    public void determineButtonStates(str _ruleFunctionName)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleProdTableCreatePreSuper</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs all necessary actions for invoking a new production order form.
    /// </summary>
    /// <returns>
    ///    true if the new production order form was closed by the user with Ok; otherwise, false.
    /// </returns>
    public boolean handleProdTableCreatePreSuper()
    {
        this.prodTableForceWrite();

        createProdNum= '';

        Args args = this.initializeArgsFromFormRun(formRun);

        FormRun formCreate = classfactory.formRunClass(args);
        formCreate.init();
        formCreate.run();

        formCreate.wait();

        return (createProdNum && formCreate.closedOk());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeArgsFromFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes an <c>Args</c> instance and fills some fields based on the calling form.
    /// </summary>
    /// <param name = "_formRun">
    ///     The calling form.
    /// </param>
    /// <returns>
    ///     The created <c>Args</c> instance.
    /// </returns>
    protected Args initializeArgsFromFormRun(FormRun _formRun)
    {
        Args args = new Args();
        args.name(formstr(ProdTableCreate));
        args.caller(formRun);
        args.record(prodTable);

        if (formRun.args())
        {
            if (formRun.args().dataset() == tablenum(ProjTable))
            {
                args.parmEnumType(enumnum(ProdTableFormId));
                args.parmEnum(ProdTableFormId::Project);
            }
            else if (formRun.args().dataset() == tablenum(ProjInvoiceTable))
            {
                args.parmEnumType(enumnum(ProdTableFormId));
                args.parmEnum(ProdTableFormId::InvoiceProject);
            }
            else if (formRun.args().dataset() == tablenum(ProjWIPTable))
            {
                args.parmEnumType(enumnum(ProdTableFormId));
                args.parmEnum(ProdTableFormId::EstimateProject);
            }
            else if (formRun.args().parmEnumType() == enumnum(ProdTableFormId) && formRun.args().parmEnum() == ProdTableFormId::Project)
            {
                args.parmEnumType(enumnum(ProdTableFormId));
                args.parmEnum(ProdTableFormId::Project);
            }
        }

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleProdTableWritePostSuper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs all necessary actions when writing a record for the <c>ProdTable</c> data source.
    /// </summary>
    public void handleProdTableWritePostSuper()
    {
        if (prodTable.InventDimId != inventDim.InventDimId)
        {
            inventDim.data(InventDim::find(prodTable.InventDimId));
            inventDim_ds.setCurrent();
        }

        if (prodTable.isProjMethodConsumed())
        {
            if (prodTable.prodTableProj(ProjItemTypeProdTable::ErrorQuantity))
            {
                prodTableProjError.ProdId = prodTable.ProdId;
                prodTableProjError.Type = ProjItemTypeProdTable::ErrorQuantity;
                if (prodTableProjError.RecId)
                    prodTableProjError.update();
                else
                    prodTableProjError.insert();
            }
            if (prodTable.overDelivery())
            {
                prodTableProjOver.ProdId = prodTable.ProdId;
                prodTableProjOver.Type = ProjItemTypeProdTable::Overdelivery;
                if (prodTableProjOver.RecId)
                    prodTableProjOver.update();
                else
                    prodTableProjOver.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleProdTableWritePreSuper</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs before running <c>super</c> in the <c>write</c> method of the <c>ProdTable</c> data source.
    /// </summary>
    public void handleProdTableWritePreSuper()
    {
        prodTable.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFormSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventDimForm</c> object used for dimensions setup.
    /// </summary>
    /// <returns>
    ///    An Object which is the <c>InventDimFrm_Ctrl</c> to be used for dimensions setup.
    /// </returns>
    public Object inventDimFormSetup()
    {
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // get quality management setting
        qualityManagementEnabled = InventParameters::find().UseQualityManagement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateProdId</Name>
				<Source><![CDATA[
    public ProdId parmCreateProdId(ProdId _createProdNum = createProdNum)
    {
        createProdNum = _createProdNum;
        return createProdNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    FormRun parmFormRun(FormRun _formRun = formRun)
    {
        if (!prmisdefault(_formRun))
        {
            formRun = _formRun;
        }

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTableForceWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs actions that are to be executed when a write is forced on the <c>ProdTable</c> data source
    ///    of the production orders form.
    /// </summary>
    public void prodTableForceWrite()
    {
        if (prodTable.RecId && prodTable.isProjMethodConsumed())
        {
            if ((prodTable.prodTableProj(ProjItemTypeProdTable::ErrorQuantity) && !prodTableProjError.orig().equal(prodTableProjError)) ||
                (prodTable.overDelivery() && !prodTableProjOver.orig().equal(prodTableProjOver)))
                prodTable_ds.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the data source instances used by the helper class.
    /// </summary>
    /// <param name="datasources1">
    ///    A <c>ProdTable</c> table buffer.
    /// </param>
    /// <param name="datasources2">
    ///    An <c>InventDim</c> table buffer; optional.
    /// </param>
    /// <param name="datasources3">
    ///    A table buffer (<c>Common</c>) belonging to the 3rd data source instance. Not used; optional.
    /// </param>
    /// <param name="datasources4">
    ///    A table buffer (<c>Common</c>) belonging to the 4th data source instance. Not used; optional.
    /// </param>
    /// <param name="datasources5">
    ///    A table buffer (<c>Common</c>) belonging to the 5th data source instance. Not used; optional.
    /// </param>
    public void setDatasources(Common datasources1, Common datasources2 = null, Common datasources3 = null, Common datasources4 = null, Common datasources5 = null)
    {
        prodTable = datasources1;
        inventDim = datasources2;
        prodTableProjError = datasources3;
        prodTableProjOver = datasources3;
        prodTable_ds = FormDataUtil::getFormDataSource(prodTable);
        inventDim_ds = FormDataUtil::getFormDataSource(inventDim);
        prodTableProjError_ds = FormDataUtil::getFormDataSource(prodTableProjError);
        prodTableProjOver_ds = FormDataUtil::getFormDataSource(prodTableProjOver);

        if (!prodTable_ds &&
            !inventDim_ds)
        {
            checkFailed(strfmt("@SYS117974", classId2Name(classidget(this))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Triggers design updates to create or update the <c>InventDimFormSetup</c> helper.
    /// </summary>
    /// <param name="mode">
    ///    An <c>InventDimFormDesignUpdate</c> value specifying what type of action this is; for example,
    ///    init, or update.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    An invalid parameter was passed.
    /// </exception>
    public void updateDesign(InventDimFormDesignUpdate mode)
    {
        inventMovement = InventMovement::construct(prodTable);

        switch (mode)
        {
            case InventDimFormDesignUpdate::Init          :
                if (!inventDimFormSetup)
                {
                    inventDimFormSetup  = InventDimCtrl_Frm_Mov::newFromFormMovement(formRun,inventMovement);
                }

            case InventDimFormDesignUpdate::Active        :
                inventDimFormSetup.formActiveSetup(inventMovement.inventDimGroupSetup(),inventMovement);
                inventDimFormSetup.formSetControls(true);
                break;

            case InventDimFormDesignUpdate::FieldChange   :
                inventDimFormSetup.formActiveSetup(inventMovement.inventDimGroupSetup(),inventMovement);
                inventDimFormSetup.formSetControls(false);
                break;

            default : throw error(strfmt("@SYS54195",funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a new instance of the <c>ProdTableForm</c> helper class.
    /// </summary>
    /// <returns>
    ///    A new instance of <c>ProdTableForm</c> helper class.
    /// </returns>
    public static ProdTableForm construct()
    {
        ProdTableForm prodTableForm = new ProdTableForm();

        return prodTableForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a helper class for the production order form based on the actual <c>FormRun</c> data.
    /// </summary>
    /// <param name="_formRun">
    ///    An object representing the production order form.
    /// </param>
    /// <returns>
    ///    A new <c>ProdTableForm</c> instance.
    /// </returns>
    public static ProdTableForm newForm(FormRun _formRun)
    {
        ProdTableForm prodTableForm = new ProdTableForm();
        prodTableForm.parmFormRun (_formRun);

        return prodTableForm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>