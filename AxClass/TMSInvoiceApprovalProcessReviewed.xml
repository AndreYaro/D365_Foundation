<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSInvoiceApprovalProcessReviewed</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSInvoiceApprovalProcessReviewed</c> class is used to process invoice matches and reconciliations.
/// </summary>
public class TMSInvoiceApprovalProcessReviewed extends RunBaseBatch implements BatchRetryable
{
    private TMSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findReady2Process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds ready to be processed invoices.
    /// </summary>
    /// <returns>
    /// Set of invoices ready to be processed.
    /// </returns>
    protected Set findReady2Process()
    {
        TMSInvoiceLineReconcile lineReconcile;
        TMSFBInvMatch           invMatch;
        TMSInvoiceLine          invoiceLine;
        TMSInvoiceTable         invoiceTable;

        Set                     invoices = new Set(Types::Int64);

        while select forUpdate lineReconcile
            where lineReconcile.WorkflowStatus == TMSWorkflowStatus::ReadyToProcess
        {
            invoiceLine     = TMSInvoiceLine::findByRecId(lineReconcile.InvoiceLineRecId);
            invoiceTable    = TMSInvoiceTable::find(invoiceLine.InternalInvNumber);

            // Make sure the invoice is not in a submitted status
            if (!invoices.in(invoiceTable.RecId)                               &&
                invoiceTable.InvoiceStatus != TMSInvoiceStatus::Submitted   &&
                invoiceTable.InvoiceStatus != TMSInvoiceStatus::Resubmitted &&
                invoiceTable.InvoiceStatus != TMSInvoiceStatus::Pending)
            {
                invoices.add(invoiceTable.RecId);
            }
        }

        while select forUpdate invMatch
            where invMatch.WorkflowStatus == TMSWorkflowStatus::ReadyToProcess
        {
            invoiceLine     = TMSInvoiceLine::findByRecId(invMatch.InvoiceLineRecId);
            invoiceTable    = TMSInvoiceTable::find(invoiceLine.InternalInvNumber);

            if (!invoices.in(invoiceTable.RecId)                               &&
                invoiceTable.InvoiceStatus != TMSInvoiceStatus::Submitted   &&
                invoiceTable.InvoiceStatus != TMSInvoiceStatus::Resubmitted &&
                invoiceTable.InvoiceStatus != TMSInvoiceStatus::Pending)
            {
                invoices.add(invoiceTable.RecId);
            }
        }

        return invoices;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFreightBills</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reconciles freight bills to be set for auto reconciliation.
    /// </summary>
    protected void processFreightBills()
    {
        TMSFBDetailReconcile fbRec;

        select count(RecId) from fbRec
            where fbRec.AutoReconciled == NoYes::Yes;

        using (var activityContext = this.instrumentationLogger().reviewedFreightBillsAndInvoicesActivities().processFreightBills())
        {
            this.instrumentationLogger().logRecordInformation(fbRec);

            TMSInvoiceApproval::reconcileFreightBills(any2int(fbRec.RecId), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.processReviewedMatchesAndReconciliations();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReviewedMatchesAndReconciliations</Name>
				<Source><![CDATA[
    private void processReviewedMatchesAndReconciliations()
    {
        using (var activityContext = this.instrumentationLogger().reviewedFreightBillsAndInvoicesActivities().processReviewedMatchesAndReconciliations())
        {
            Set invoices = this.findReady2Process();

            this.processFreightBills();

            SetEnumerator se = invoices.getEnumerator();

            while (se.moveNext())
            {
                TMSInvoiceTable invoiceTable = TMSInvoiceTable::findByRecId(str2int64(strRem(se.toString(), '[]')));

                using (var invoiceActivityContext = this.instrumentationLogger().reviewedFreightBillsAndInvoicesActivities().processInvoice())
                {
                    this.instrumentationLogger().logRecordInformation(invoiceTable);

                    WorkflowVersionTable configTable = Workflow::findWorkflowConfigToActivateForType(workFlowTypeStr(TMSInvoiceApproval), invoiceTable.RecId, invoiceTable.TableId);

                    if (configTable.RecId)
                    {
                        // Submit
                        if (invoiceTable.InvoiceStatus == TMSInvoiceStatus::Open ||
                        invoiceTable.InvoiceStatus == TMSInvoiceStatus::PartiallyApproved)
                        {
                            TMSCommProxy::submitInvoiceApproval(invoiceTable.RecId);
                        }

                        // Resubmission
                        else
                        {
                            WorkflowWorkItemTable workflowWorkItem;

                            select firstOnly workflowWorkItem
                            where workflowWorkItem.RefRecId     == invoiceTable.RecId   &&
                                  workflowWorkItem.RefTableId   == invoiceTable.TableId &&
                                  workflowWorkItem.CompanyId    == curExt()             &&
                                  workflowWorkItem.Status       == WorkflowWorkItemStatus::Pending;

                            WorkflowWorkItemActionManager::dispatchWorkItemAction(
                                                                workflowWorkItem,
                                                                '',
                                                                TMSParameters::find().WorkflowUser,
                                                                WorkflowWorkItemActionType::Resubmit,
                                                                menuItemActionStr(TMSInvoiceApprovalResubmit));
                        }
                    }
                    else
                    {
                        TMSInvoiceApproval::submitInvoice(invoiceTable, true, false);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static TMSInvoiceApprovalProcessReviewed construct()
    {
        return new TMSInvoiceApprovalProcessReviewed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@TRX1316";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        TMSInvoiceApprovalProcessReviewed  processReviewed;

        processReviewed = TMSInvoiceApprovalProcessReviewed::construct();

        if (processReviewed.prompt())
        {
            processReviewed.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private TMSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = TMSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>