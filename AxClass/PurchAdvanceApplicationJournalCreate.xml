<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAdvanceApplicationJournalCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchAdvanceApplicationJournalCreate extends PurchInvoiceJournalCreate
{
    VendAdvanceApplicationTrans vendAdvanceApplicationTrans;
    boolean isReverseAdvanceApplication;
    boolean isInvoicePosted;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the journal can be created.
    /// </summary>
    /// <returns>
    /// true if the journal can be created; otherwise, false.
    /// </returns>
    protected boolean check()
    {
        if (!isInvoicePosted && (purchTotals.purchTotalAmount() < purchTotals.purchPreAppliedAmount()))
        {
            return checkFailed(strFmt("@AccountsPayable:PrepaymentAmountPostingValidation", "@AccountsPayable:AppliedPrepaymentAmount", "@SYS9458"));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAgreementLinks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the base with blank implementation as creating the links
    /// between the advance application line and the agreement lines are not needed.
    /// </summary>
    protected void createAgreementLinks()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the base with blank implementation as an advance application line is posted as the
    /// <c>VendInvoiceTrans</c> table record against existing applied invoice header.
    /// </summary>
    protected void createJournalHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    protected void createJournalLine(Common _invoiceHeader)
    {
        Factor factor;
        VendInvoiceTrans vendInvoiceTrans_Advance;
        VendInvoiceJour vendInvoiceJour_Advance;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        TaxReverseTax taxReverseTax;
        LedgerDimensionAccount emptyLedgerDimensionAccount;
        Voucher reverseVoucher;

        Debug::assert(_invoiceHeader.TableId == tableNum(VendInvoiceJour));
        vendInvoiceJour = _invoiceHeader;

        vendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(vendAdvanceApplicationTrans.AdvanceApplicationId);

        vendInvoiceTrans.clear();
        vendInvoiceTrans.initValue();

        vendInvoiceTrans.initFromVendInvoiceJour(_invoiceHeader);
        if (vendAdvanceApplicationTrans.SettlementPostingDate)
        {
            vendInvoiceTrans.InvoiceDate = vendAdvanceApplicationTrans.SettlementPostingDate;
        }

        if (!isReverseAdvanceApplication)
        {
            vendInvoiceTrans.LineType = PurchInvoiceLineType::AdvanceApplication;
        }
        else
        {
            vendInvoiceTrans.LineType = PurchInvoiceLineType::ReverseAdvanceApplication;
        }

        vendInvoiceTrans.LineAmount = vendAdvanceApplicationTrans.AppliedAmount;
        vendInvoiceTrans.SourceDocumentLine = vendInvoiceInfoLine.SourceDocumentLine;
        vendInvoiceTrans.ProcurementCategory = vendInvoiceInfoLine.ProcurementCategory;
        vendInvoiceTrans.InternalInvoiceId = voucher;
        vendInvoiceTrans.AdvanceApplicationId = vendAdvanceApplicationTrans.getAdvancedInvoiceRecId(isReverseAdvanceApplication);
        vendInvoiceTrans.DefaultDimension = vendInvoiceInfoLine.DefaultDimension;

        vendInvoiceTrans.insert();

        // Flush the cache for prepayment application line source document line item.
        // Since the child Tax Source document lines are created later for prepayment application lines,
        // when the document is fully distributed the cached source document line item object's data is stale and can't be re-used for posting.
        SourceDocumentLine advanceApplicationSourceDocLine = SourceDocumentLine::find(vendInvoiceInfoLine.SourceDocumentLine);
        if (advanceApplicationSourceDocLine.RecId != 0)
        {
            SourceDocumentLineItem::removeFromCache(advanceApplicationSourceDocLine);
        }

        // ----- Create the reversing taxes for the advance invoice -----

        if (isReverseAdvanceApplication)
        {
            // Retrieve the advance application line and its standard invoice header
            vendInvoiceTrans_Advance = VendInvoiceTrans::findRecId(vendAdvanceApplicationTrans.AdvancedInvoiceLineRecId);
            vendInvoiceJour_Advance = VendInvoiceJour::findRecId(vendAdvanceApplicationTrans.PostedInvoiceRecId);

            reverseVoucher = vendInvoiceTrans_Advance.InternalInvoiceId;
        }
        else
        {
            // Retrieve the advance invoice header and line being applied to
            vendInvoiceJour_Advance = VendInvoiceJour::findRecId(vendAdvanceApplicationTrans.AdvancedInvoiceHeaderRecId);
            
            select firstOnly vendInvoiceTrans_Advance
                where vendInvoiceTrans_Advance.PurchID == vendInvoiceJour_Advance.PurchId &&
                    vendInvoiceTrans_Advance.InvoiceId == vendInvoiceJour_Advance.InvoiceId &&
                    vendInvoiceTrans_Advance.InvoiceDate == vendInvoiceJour_Advance.InvoiceDate &&
                    vendInvoiceTrans_Advance.NumberSequenceGroup == vendInvoiceJour_Advance.NumberSequenceGroup &&
                    vendInvoiceTrans_Advance.InternalInvoiceId == vendInvoiceJour_Advance.InternalInvoiceId;

            reverseVoucher = vendInvoiceJour_Advance.LedgerVoucher;
        }
        // The factor holds the proportion of the advance application that is being relieved from the advance invoice
        if (vendInvoiceTrans_Advance.lineAmountInclTax() != 0)
        {
            factor = abs(vendAdvanceApplicationTrans.AppliedAmount / vendInvoiceTrans_Advance.lineAmountInclTax());
        }

        // Create the tax reversal class, using the voucher and date of the taxes to be reversed
        // vendInvoiceTrans.InvoiceDate is settlement posting date
        taxReverseTax = new TaxReverseTax(vendInvoiceJour.LedgerVoucher, vendInvoiceTrans.InvoiceDate, '');

        // Provide the SourceTableId & SourceRecId for the new tax records
        taxReverseTax.setReverseTableId(vendInvoiceInfoLine.TableId);
        taxReverseTax.setReverseRecId(vendInvoiceInfoLine.RecId);
        taxReverseTax.parmUseSubLedgerJournalLines(true);

        // Provide the HeadingTableId & HeadingRecId for the new tax records
        taxReverseTax.parmHeadingTableId(vendInvoiceInfoTable.TableId);
        taxReverseTax.parmHeadingRecId(vendInvoiceInfoTable.RecId);

        // Generate the reversing tax records for the full amount
        taxReverseTax.calcAndInsertTaxes(reverseVoucher, vendInvoiceJour_Advance.InvoiceDate);

        // Prorate the tax records based on the percentage of prepay being applied
        taxReverseTax.reverseByFactor(emptyLedgerDimensionAccount, factor, vendInvoiceInfoLine.TableId, vendInvoiceInfoLine.RecId);

        // Generate the TaxUncommitted records to be used by the subledger journalizer
        taxReverseTax.createTaxUncommitted(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the journal lines when updating the sales order, the purchase order, or the request for a
    /// quote.
    /// </summary>
    protected void createJournalLines()
    {
        if (isInvoicePosted)
        {
            this.createJournalLine(VendInvoiceJour::findRecId(vendAdvanceApplicationTrans.PostedInvoiceRecId));
        }
        else
        {
            this.createJournalLine(vendInvoiceJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides the base with blank implementation as an advance application line does not required packing slip posting as in base.
    /// </summary>
    protected void endCreate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getApplicationLine</Name>
				<Source><![CDATA[
    public VendInvoiceTrans getApplicationLine()
    {
        return vendInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current journal header.
    /// </summary>
    /// <returns>
    /// A journal header record.
    /// </returns>
    public Common getJournal()
    {
        if (isInvoicePosted)
        {
            return VendInvoiceJour::findRecId(vendAdvanceApplicationTrans.PostedInvoiceRecId);
        }
        else
        {
            return VendInvoiceJour::findSourceDocumentHeader(vendInvoiceInfoTable.SourceDocumentHeader);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the new voucher for an advance application line.
    /// </summary>
    protected void initJournalHeader()
    {
        numberSeq = NumberSeq::newGetVoucher(PurchParameters::numRefPurchAdvanceApplicationVoucher());
        voucher = numberSeq.voucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record lists for an advance application line.
    /// </summary>
    /// <remarks>
    /// Overridden from the base class. The initialization of records for links between invoice and its
    /// purchase order are not needed.
    /// </remarks>
    protected void initRecordList()
    {
        if (this.journalLineTableId())
        {
            recordListLine = new RecordInsertList(this.journalLineTableId());
            listLine = new List(Types::Record);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overriding the base with blank implementation because purchase table initialization is not required
    /// for an advance application.
    /// </summary>
    protected void initSourceTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the purchase invoice and its tax is not required when advance application voucher is
    /// being created.
    /// </summary>
    protected void initTotals()
    {
        purchTotals = totals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the advance application records to database.
    /// </summary>
    /// <remarks>
    /// Overridden from base because insertion of records for links between invoice and its purchase
    /// order are not needed. Only one invoice line is created, so recordList isn't necessary.
    /// </remarks>
    protected void insertRecordList()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the journal was created.
    /// </summary>
    /// <returns>
    /// true if the journal was created; otherwise, false.
    /// </returns>
    protected boolean isJournalCreated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether lines are in the order line parameter table.
    /// </summary>
    /// <returns>
    /// true if lines exists; otherwise, false.
    /// </returns>
    protected boolean linesExists()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsInvoicePosted</Name>
				<Source><![CDATA[
    public boolean parmIsInvoicePosted(boolean _isInvoicePosted = isInvoicePosted)
    {
        isInvoicePosted = _isInvoicePosted;

        return isInvoicePosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReverseAdvanceApplication</Name>
				<Source><![CDATA[
    public boolean parmIsReverseAdvanceApplication(boolean _isReverseAdvanceApplication = isReverseAdvanceApplication)
    {
        isReverseAdvanceApplication = _isReverseAdvanceApplication;

        return isReverseAdvanceApplication;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberSeq</Name>
				<Source><![CDATA[
    public NumberSeq parmNumberSeq(NumberSeq _numberSeq = numberSeq)
    {
        numberSeq = _numberSeq;

        return numberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendAdvanceApplicationTrans</Name>
				<Source><![CDATA[
    public void parmVendAdvanceApplicationTrans(VendAdvanceApplicationTrans _vendAdvanceApplicationTrans)
    {
        vendAdvanceApplicationTrans = _vendAdvanceApplicationTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoiceJour</Name>
				<Source><![CDATA[
    public VendInvoiceJour parmVendInvoiceJour(VendInvoiceJour _vendInvoiceJour = vendInvoiceJour)
    {
        vendInvoiceJour = _vendInvoiceJour;

        return vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden blank implementation because an advance application voucher does not require posting of
    /// packing slip.
    /// </summary>
    protected void postPackingSlip()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchAdvanceApplicationJournalCreate construct(VendAdvanceApplicationTrans _vendAdvanceApplicaitonTrans)
    {
        PurchAdvanceApplicationJournalCreate purchAdvanceApplicationJournalCreate = new PurchAdvanceApplicationJournalCreate();

        purchAdvanceApplicationJournalCreate.parmVendAdvanceApplicationTrans(_vendAdvanceApplicaitonTrans);
        return purchAdvanceApplicationJournalCreate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>