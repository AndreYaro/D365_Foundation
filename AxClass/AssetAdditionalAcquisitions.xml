<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetAdditionalAcquisitions</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetAdditionalAcquisitions
{
    /// <summary>
    ///    Determines whether additional acquisitions depreciation logic should be used.
    /// </summary>
    /// <param name="_assetDepreciationProfile">
    ///    An asset depreciation profile object.
    /// </param>
    /// <param name="_depreciationConvention">
    ///    The depreciation convention type that is related to the deprecation profile object.
    /// </param>
    /// <returns>
    ///    true if additional acquisitions logic should be used; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    In order for the
    ///    logic to be enabled, the following conditions must be fulfilled.
    ///    <list type="bullet">
    ///       <item>
    ///          <description>The depreciation method is straight line life remaining.</description>
    ///       </item>
    ///       <item>
    ///          <description>The depreciation accrual is not daily.</description>
    ///       </item>
    ///       <item>
    ///          <description>The user selected a checkbox for half-year or full-year depreciation on additional
    ///          acquisitions.</description>
    ///       </item>
    ///    </list>
    /// </remarks>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyAdditionalAcquistionsLogic</Name>
				<Source><![CDATA[
    public static boolean applyAdditionalAcquistionsLogic(AssetDepreciationProfile _assetDepreciationProfile,
        AssetDepreciationConvention _depreciationConvention = AssetDepreciationConvention::None)
    {
        return ((_assetDepreciationProfile.FullYearDepreciation_DE
                    && _assetDepreciationProfile.Method == AssetDepreciationMethod::StraightLineLifeRemaining)
                || (_assetDepreciationProfile.HalfYearDepreciation_AT
                    && AssetTableDepConv_HalfYearStart::isHalfYearDepreciationMethod_AT(_assetDepreciationProfile.Method)))
            && _assetDepreciationProfile.Accrual != AssetAccrual::Daily;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAcquisitionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the sum of the acquisition amounts for all of the <c>AssetTrans</c> records for a specified
    ///    date.
    /// </summary>
    /// <param name="_assetId">
    ///    The ID of the asset.
    /// </param>
    /// <param name="_bookId">
    ///    The ID of the value model assigned to the asset.
    /// </param>
    /// <param name="_transDate">
    ///    The date for which the transactions need to be calculated.
    /// </param>
    /// <returns>
    ///    The sum of the acquisition amounts for the specified asset and transaction date.
    /// </returns>
    /// <remarks>
    ///    Transactions of type <c>Acquisition</c> and <c>AcquisitionAdj</c> are treated as the same type. If
    ///    there are transactions of these types for the specified date, the method returns the sum of these
    ///    transactions.
    /// </remarks>
    public static AssetAmount getAcquisitionAmount(AssetId _assetId, AssetBookId _bookId, TransDate _transDate)
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTrans_Asset ledgerJournalTrans_Asset;
        AssetTrans assetTrans;

        // Get sum of the acquisiton amounts for the given date
        select sum(AmountMST)
            from assetTrans
            where assetTrans.AssetId == _assetId
                && assetTrans.BookId == _bookId
                && assetTrans.TransDate == _transDate
                && (assetTrans.TransType == AssetTransType::Acquisition
                    || assetTrans.TransType == AssetTransType::AcquisitionAdj)
            notexists join ledgerJournalTrans
            where ledgerJournalTrans.Voucher == assetTrans.Voucher
                && ledgerJournalTrans.TransDate == assetTrans.TransDate
            exists join ledgerJournalTable
            where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
            exists join ledgerJournalTrans_Asset
            where ledgerJournalTrans_Asset.RefRecId == ledgerJournalTrans.RecId
                && (ledgerJournalTrans_Asset.AssetTransSubType == AssetTransactionSubType::Split
                    || ledgerJournalTable.Name == "@SYS67430");


        return assetTrans.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAcquisitionAmountReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the sum of the acquisition reporting currency amounts for all of the <c>AssetTrans</c> records for a specified
    ///    date.
    /// </summary>
    /// <param name="_assetId">
    ///    The ID of the asset.
    /// </param>
    /// <param name="_bookId">
    ///    The ID of the value model assigned to the asset.
    /// </param>
    /// <param name="_transDate">
    ///    The date for which the transactions need to be calculated.
    /// </param>
    /// <returns>
    ///    The sum of the acquisition amounts for the specified asset and transaction date.
    /// </returns>
    /// <remarks>
    ///    Transactions of type <c>Acquisition</c> and <c>AcquisitionAdj</c> are treated as the same type. If
    ///    there are transactions of these types for the specified date, the method returns the sum of these
    ///    transactions.
    /// </remarks>
    public static AssetAmountReportingCurrency getAcquisitionAmountReportingCurrency(AssetId _assetId, AssetBookId _bookId, TransDate _transDate)
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTrans_Asset ledgerJournalTrans_Asset;
        AssetTrans assetTrans;

        // Get sum of the acquisiton reporting currency amounts for the given date
        select sum(ReportingCurrencyAmount)
            from assetTrans
            where assetTrans.AssetId == _assetId
                && assetTrans.BookId == _bookId
                && assetTrans.TransDate == _transDate
                && (assetTrans.TransType == AssetTransType::Acquisition
                    || assetTrans.TransType == AssetTransType::AcquisitionAdj)
            notexists join ledgerJournalTrans
            where ledgerJournalTrans.Voucher == assetTrans.Voucher
                && ledgerJournalTrans.TransDate == assetTrans.TransDate
            exists join ledgerJournalTable
            where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
            exists join ledgerJournalTrans_Asset
            where ledgerJournalTrans_Asset.RefRecId == ledgerJournalTrans.RecId
                && (ledgerJournalTrans_Asset.AssetTransSubType == AssetTransactionSubType::Split
                    || ledgerJournalTable.Name == "@SYS67430");

        return assetTrans.ReportingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAcquisitionAmountPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets the sum of the acquisition amounts for all of the AssetTrans records for a
    /// given pertiod.  Note these AssetTrans records all need to be of AssetTransType::Acquisition or AcquisitionAdj .
    /// </summary>
    /// <param name="_assetId">
    /// The Id value of a given asset.
    /// </param>
    /// <param name="_bookId">
    /// The Id value of the value model assigned the asset.
    /// </param>
    /// <param name="_startDate">
    /// The startdate for which the transactions need to be calculated.
    /// </param>
    /// <param name="_endDate">
    /// The end date for which the transactions need to be calculated.
    /// </param>
    /// <returns>
    /// An amount for the given asset and transaction date.
    /// </returns>
    /// <remarks>
    /// Transactions of type Acquisition and AcquisitionAdjustment are treated as the same type.
    /// If there are transactions of these types for the given period, the function returns the sum of these transactions.
    /// </remarks>
    public static AssetAmount getAcquisitionAmountPeriod(AssetId _assetId, AssetBookId _bookId, AssetTransDate _startDate, AssetTransDate _endDate)
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTrans_Asset ledgerJournalTrans_Asset;
        AssetTrans assetTrans;

        // Get sum of the acquisiton amounts for the given period
        select sum(AmountMST)
            from assetTrans
            where assetTrans.AssetId == _assetId
                && assetTrans.BookId == _bookId
                && assetTrans.TransDate >= _startDate
                && assetTrans.TransDate <= _endDate
                && (assetTrans.TransType == AssetTransType::Acquisition
                    || assetTrans.TransType == AssetTransType::AcquisitionAdj)
            notexists join ledgerJournalTrans
            where ledgerJournalTrans.Voucher == assetTrans.Voucher
                && ledgerJournalTrans.TransDate == assetTrans.TransDate
            exists join ledgerJournalTable
            where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
            exists join ledgerJournalTrans_Asset
            where ledgerJournalTrans_Asset.RefRecId == ledgerJournalTrans.RecId
                && (ledgerJournalTrans_Asset.AssetTransSubType == AssetTransactionSubType::Split
                    || ledgerJournalTable.Name == "@SYS67430");

        return assetTrans.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountToDepriciateAdjusted</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the base amount for depreciation calculation for all available Acquisition Adjustments,
    ///     Acquisitions, Capital Reserve Transfers, Revaluations, Write Down Adjustments, and Write Up
    ///     Adjustments until a specified date.
    /// </summary>
    /// <param name="_assetId">
    ///     The ID of the asset.
    /// </param>
    /// <param name="_bookId">
    ///     The ID of the value model assigned to the asset.
    /// </param>
    /// <param name="_assetTransDate">
    ///     A date for which transactions are searched.
    /// </param>
    /// <param name="_deprInterval">
    ///     The interval details of calendar.
    /// </param>
    /// <param name="_assetDepreciationProfile">
    ///     An asset depreciation profile object.
    /// </param>
    /// <returns>
    ///     The base amount for depreciation calculation.
    /// </returns>
    public static AssetAmount getAmountToDepriciateAdjusted(AssetId _assetId,
        AssetBookId _bookId,
        AssetTransDate _assetTransDate,
        AssetTableInterval _deprInterval,
        AssetDepreciationProfile _assetDepreciationProfile)
    {
        AssetTrans assetTrans;
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans_Asset ledgerJournalTrans_Asset;
        TransDate adjustedEndDate;

        if (_assetDepreciationProfile.HalfYearDepreciation_AT)
        {
            TransDate middleOfYear = _deprInterval.findMiddleOfYear(_assetTransDate);

            if (_assetTransDate < middleOfYear)
            {
                adjustedEndDate = middleOfYear - 1;
            }
            else
            {
                adjustedEndDate = _deprInterval.findLastDayOfYear(_assetTransDate);
            }
        }
        else if (_assetDepreciationProfile.FullYearDepreciation_DE)
        {
            adjustedEndDate = _deprInterval.findLastDayOfYear(_assetTransDate);
        }

        assetTrans.AmountMST = AssetTrans::acquisitionAmount(_assetId, adjustedEndDate, _bookId);

        AssetAmount assetAmount = AssetTrans::amountMSTPerDateTransTypes(
            _assetId,
            _bookId,
            [AssetTransType::Revaluation, AssetTransType::WriteDownAdj, AssetTransType::WriteUpAdj],
            dateNull(),
            _assetTransDate);

        AssetAmount ret = assetAmount + assetTrans.AmountMST;

        // Do not apply algorithm for additional acquisitions in case of splitting
        select sum(AmountMST)
            from assetTrans
            where assetTrans.AssetId == _assetId
                && assetTrans.BookId == _bookId
                && assetTrans.TransType == AssetTransType::AcquisitionAdj
                && assetTrans.TransDate > adjustedEndDate
            exists join ledgerJournalTrans
            where ledgerJournalTrans.Voucher == assetTrans.Voucher
                && ledgerJournalTrans.TransDate == assetTrans.TransDate
            exists join ledgerJournalTable
            where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
            exists join ledgerJournalTrans_Asset
            where ledgerJournalTrans_Asset.RefRecId == ledgerJournalTrans.RecId
                && (ledgerJournalTrans_Asset.AssetTransSubType == AssetTransactionSubType::Split
                    || ledgerJournalTable.Name == "@SYS67430");

        ret += assetTrans.AmountMST;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextAcquisitionDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the oldest acquisition date for an asset within the specified timeframe.
    /// </summary>
    /// <param name="_assetId">
    ///    The ID of the asset.
    /// </param>
    /// <param name="_bookId">
    ///    The ID of the value model assigned to the asset.
    /// </param>
    /// <param name="_transDateStart">
    ///    The start date for the acquisitions search.
    /// </param>
    /// <param name="_transDateEnd">
    ///    The end date for the acquisitions search.
    /// </param>
    /// <returns>
    ///    The date of the first acquisition transaction within the specified timeframe.
    /// </returns>
    public static TransDate getNextAcquisitionDate(AssetId _assetId, AssetBookId _bookId, TransDate _transDateStart, TransDate _transDateEnd)
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTrans_Asset ledgerJournalTrans_Asset;
        AssetTrans assetTrans;

        // Get the first (oldest) acquistion date
        select minof(TransDate)
            from assetTrans
            where assetTrans.AssetId == _assetId
                && assetTrans.BookId == _bookId
                && (assetTrans.TransType == AssetTransType::Acquisition
                    || assetTrans.TransType == AssetTransType::AcquisitionAdj)
                && assetTrans.TransDate > max(_transDateStart, AssetAdditionalAcquisitions::getPrimaryAcquisitionDate(_assetId, _bookId))
                && assetTrans.TransDate <= _transDateEnd
            notexists join ledgerJournalTrans
            where ledgerJournalTrans.Voucher == assetTrans.Voucher
                && ledgerJournalTrans.TransDate == assetTrans.TransDate
            exists join ledgerJournalTable
            where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
            exists join ledgerJournalTrans_Asset
            where ledgerJournalTrans_Asset.RefRecId == ledgerJournalTrans.RecId
                && (ledgerJournalTrans_Asset.AssetTransSubType == AssetTransactionSubType::Split
                    || ledgerJournalTable.Name == "@SYS67430");

        return assetTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfAdditionalAcquisitions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number of additional acquisitions within the specified timeframe.
    /// </summary>
    /// <param name="_assetId">
    ///    The ID of the asset.
    /// </param>
    /// <param name="_bookId">
    ///    The ID of the value model assigned to the asset.
    /// </param>
    /// <param name="_transDateStart">
    ///    The start date for the acquisitions search.
    /// </param>
    /// <param name="_transDateEnd">
    ///    The end date for the acquisitions search.
    /// </param>
    /// <returns>
    ///    An integer value that represents the number of acquisition transactions within the specified
    ///    timeframe.
    /// </returns>
    public static int64 getNumberOfAdditionalAcquisitions(AssetId _assetId, AssetBookId _bookId, TransDate _transDateStart, TransDate _transDateEnd)
    {
        int64 numOfRecords = 0;
        assetTrans  assetTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTrans_Asset ledgerJournalTrans_Asset;

        TransDate primaryAcqDate =  AssetAdditionalAcquisitions::getPrimaryAcquisitionDate(_assetId, _bookId);

        if (primaryAcqDate > _transDateStart)
        {
            _transDateStart = primaryAcqDate + 1;
        }

        if  (_transDateStart <= _transDateEnd)
        {
            select count(RecId) from assetTrans
                where assetTrans.AssetId == _assetId
                    && assetTrans.BookId == _bookId
                    && assetTrans.TransDate >= _transDateStart
                    && assetTrans.TransDate <= _transDateEnd
                    && (assetTrans.TransType == AssetTransType::Acquisition
                        || assetTrans.TransType == AssetTransType::AcquisitionAdj)
                notexists join ledgerJournalTrans
                where ledgerJournalTrans.Voucher == assetTrans.Voucher
                    && ledgerJournalTrans.TransDate == assetTrans.TransDate
                exists join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                exists join ledgerJournalTrans_Asset
                where ledgerJournalTrans_Asset.RefRecId == ledgerJournalTrans.RecId
                    && (ledgerJournalTrans_Asset.AssetTransSubType == AssetTransactionSubType::Split
                        || ledgerJournalTable.Name == "@SYS67430");

            numOfRecords = assetTrans.RecId;
        }

        return numOfRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryAcquisitionDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the oldest acquisition date for the specified asset.
    /// </summary>
    /// <param name="_assetId">
    ///    The ID of the asset.
    /// </param>
    /// <param name="_bookId">
    ///    The ID of the value model assigned to the asset.
    /// </param>
    /// <returns>
    ///    The date of the primary acquisition transaction.
    /// </returns>
    public static TransDate getPrimaryAcquisitionDate(AssetId _assetId, AssetBookId _bookId)
    {
        // Get the first (oldest) acquistion date
        return AssetTransTmp::getFirstTransactionDateByType(_assetId, _bookId, AssetTransType::Acquisition);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>