<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcRecordCacheUnitOfMeasure</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqCalcRecordCacheUnitOfMeasure</c> implements a record cache for <c>UnitOfMeasure</c> records.
/// </summary>
public class ReqCalcRecordCacheUnitOfMeasure extends ReqCalcRecordCache
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a key/value pair into the cache.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID.
    /// </param>
    /// <param name="_unitOfMeasure">
    ///    The <c>UnitOfMeasure</c> record to cache.
    /// </param>
    /// <returns>
    ///    true if the record was cached; otherwise, false.
    /// </returns>
    public boolean insert(
        ItemId        _itemId,
        UnitOfMeasure _unitOfMeasure)
    {
        return this.insertKey(this.key(_itemId),_unitOfMeasure);
    }

]]></Source>
			</Method>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a key for the cache.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID.
    /// </param>
    /// <returns>
    ///    A <c>container</c> that can be used as a key for the cache.
    /// </returns>
    protected container key(ItemId _itemId)
    {
        return [_itemId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Looks up a value in the cache.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID.
    /// </param>
    /// <returns>
    ///    The cached <c>UnitOfMeasure</c> record; otherwise, an empty buffer.
    /// </returns>
    public UnitOfMeasure lookup(ItemId _itemId)
    {
        return this.lookupKey(this.key(_itemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a key/value pair from the cache.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID.
    /// </param>
    /// <returns>
    ///    The cached <c>UnitOfMeasure</c> record; otherwise, an empty buffer.
    /// </returns>
    public boolean remove(ItemId _itemId)
    {
        return this.removeKey(this.key(_itemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static ReqCalcRecordCacheUnitOfMeasure construct()
    {
        return new ReqCalcRecordCacheUnitOfMeasure();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
        public static ReqCalcRecordCacheUnitOfMeasure newStandard()
    {
        ReqCalcRecordCache  reqCalcRecordCache = ReqCalcRecordCacheUnitOfMeasure::construct();

        reqCalcRecordCache.parmTableId(tableNum(UnitOfMeasure));

        return reqCalcRecordCache;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>