<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumDateEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Manages data for the <c>InventDimPhys</c> report.
/// </summary>
class InventSumDateEngine
{
    TransDate                   perDate;
    NoYes                       deleteZeroLines;
    InventDimParm               inventDimParm;
    InventSumDateTransReport    inventSumDateTransReport;

    InventDimItemTmp            inventDimItemTmpInventTrans;
    InventDimItemTmp            inventDimItemTmpInventSum;

    // These 3 member-variables will be used in insert_recordset statements as scalar values
    ParmId                      parmId;
    InventSumDateType           inventSumDateType;
    int                         minus;

    Query                       query;
    UserConnection              userConnection;
    private boolean             isInventSumDateEngineDenormalizeInventSumDateTransToggleEnabled = InventSumDateEngineDenormalizeInventSumDateTransToggle::instance().isEnabled();
    private boolean             isWarehouseInventoryTransactionStackEnabled = WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls all necessary methods one by one in order to fill the <c>InventSumDateTransReport</c> table
    ///    with records.
    /// </summary>
    public void calcData()
    {
        this.initMemberVariables();

        this.selectInventOnHand();

        this.selectInventTransPostingPhysical();
        this.selectInventTransPostingFinancial();
        this.selectWarehouseInventoryTransactions();

        this.updateSign();

        this.mergeRecords();

        this.deleteTransactions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearNotSelectedDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>InventDimId</c> field to only contain values that are printed.
    /// </summary>
    /// <remarks>
    ///    This is required to perform a correct merge of records.
    /// </remarks>
    private void clearNotSelectedDimensions()
    {
        #InventDimDevelop

        InventSumDateTrans      inventSumDateTrans;
        InventSumDateTrans      inventSumDateTransNew;
        InventDim               inventDimOld;
        InventDim               inventDimNew;

        if (userConnection)
        {
            inventSumDateTrans.setConnection(userConnection);
            inventSumDateTransNew.setConnection(userConnection);
            inventDimOld.setConnection(userConnection);
            inventDimNew.setConnection(userConnection);
        }

        update_recordset inventSumDateTrans
            setting InventDimId = inventDimNew.InventDimId
            where inventSumDateTrans.ParmId     == parmId
            join RecId from inventDimOld
                where inventDimOld.InventDimId       == inventSumDateTrans.InventDimId
                join InventDimId from inventDimNew
                where ((inventDimNew.ConfigId           == inventDimOld.ConfigId           && inventDimParm.ConfigIdFlag)           || (inventDimNew.ConfigId == ''                        && !inventDimParm.ConfigIdFlag))
                  &&  ((inventDimNew.InventSizeId       == inventDimOld.InventSizeId       && inventDimParm.InventSizeIdFlag)       || (inventDimNew.InventSizeId == ''                    && !inventDimParm.InventSizeIdFlag))
                  &&  ((inventDimNew.InventColorId      == inventDimOld.InventColorId      && inventDimParm.InventColorIdFlag)      || (inventDimNew.InventColorId == ''                   && !inventDimParm.InventColorIdFlag))
                  &&  ((inventDimNew.InventStyleId      == inventDimOld.InventStyleId      && inventDimParm.InventStyleIdFlag)      || (inventDimNew.InventStyleId == ''                   && !inventDimParm.InventStyleIdFlag))
                  &&  ((inventDimNew.InventVersionId    == inventDimOld.InventVersionId    && inventDimParm.InventVersionIdFlag)    || (inventDimNew.InventVersionId == ''                 && !inventDimParm.InventVersionIdFlag))
                  &&  ((inventDimNew.InventSiteId       == inventDimOld.InventSiteId       && inventDimParm.InventSiteIdFlag)       || (inventDimNew.InventSiteId == ''                    && !inventDimParm.InventSiteIdFlag))
                  &&  ((inventDimNew.InventLocationId   == inventDimOld.InventLocationId   && inventDimParm.InventLocationIdFlag)   || (inventDimNew.InventLocationId == ''                && !inventDimParm.InventLocationIdFlag))
                  &&  ((inventDimNew.wmsLocationId      == inventDimOld.wmsLocationId      && inventDimParm.wmsLocationIdFlag)      || (inventDimNew.wmsLocationId == ''                   && !inventDimParm.wmsLocationIdFlag))
                  &&  ((inventDimNew.LicensePlateId     == inventDimOld.LicensePlateId     && inventDimParm.LicensePlateFlag)       || (inventDimNew.LicensePlateId == ''                  && !inventDimParm.LicensePlateFlag))
                  &&  ((inventDimNew.InventStatusId     == inventDimOld.InventStatusId     && inventDimParm.InventStatusFlag)       || (inventDimNew.InventStatusId == ''                  && !inventDimParm.InventStatusFlag))
                  &&  ((inventDimNew.InventBatchId      == inventDimOld.InventBatchId      && inventDimParm.InventBatchIdFlag)      || (inventDimNew.InventBatchId == ''                   && !inventDimParm.InventBatchIdFlag))
                  &&  ((inventDimNew.InventSerialId     == inventDimOld.InventSerialId     && inventDimParm.InventSerialIdFlag)     || (inventDimNew.InventSerialId == ''                  && !inventDimParm.InventSerialIdFlag))
                  &&  ((inventDimNew.InventDimension1   == inventDimOld.InventDimension1   && inventDimParm.InventDimension1Flag)   || (inventDimNew.InventDimension1 == ''                && !inventDimParm.InventDimension1Flag))
                  &&  ((inventDimNew.InventDimension2   == inventDimOld.InventDimension2   && inventDimParm.InventDimension2Flag)   || (inventDimNew.InventDimension2 == ''                && !inventDimParm.InventDimension2Flag))
                  &&  ((inventDimNew.InventDimension3   == inventDimOld.InventDimension3   && inventDimParm.InventDimension3Flag)   || (inventDimNew.InventDimension3 == ''                && !inventDimParm.InventDimension3Flag))
                  &&  ((inventDimNew.InventDimension4   == inventDimOld.InventDimension4   && inventDimParm.InventDimension4Flag)   || (inventDimNew.InventDimension4 == ''                && !inventDimParm.InventDimension4Flag))
                  &&  ((inventDimNew.InventDimension5   == inventDimOld.InventDimension5   && inventDimParm.InventDimension5Flag)   || (inventDimNew.InventDimension5 == ''                && !inventDimParm.InventDimension5Flag))
                  &&  ((inventDimNew.InventDimension6   == inventDimOld.InventDimension6   && inventDimParm.InventDimension6Flag)   || (inventDimNew.InventDimension6 == ''                && !inventDimParm.InventDimension6Flag))
                  &&  ((inventDimNew.InventDimension7   == inventDimOld.InventDimension7   && inventDimParm.InventDimension7Flag)   || (inventDimNew.InventDimension7 == ''                && !inventDimParm.InventDimension7Flag))
                  &&  ((inventDimNew.InventDimension8   == inventDimOld.InventDimension8   && inventDimParm.InventDimension8Flag)   || (inventDimNew.InventDimension8 == ''                && !inventDimParm.InventDimension8Flag))
                  &&  ((inventDimNew.InventDimension9   == inventDimOld.InventDimension9   && inventDimParm.InventDimension9Flag)   || (inventDimNew.InventDimension9 == utcDateTimeNull() && !inventDimParm.InventDimension9Flag))
                  &&  ((inventDimNew.InventDimension10  == inventDimOld.InventDimension10  && inventDimParm.InventDimension10Flag)  || (inventDimNew.InventDimension10 == 0                && !inventDimParm.InventDimension10Flag))
                  &&  ((inventDimNew.InventDimension11  == inventDimOld.InventDimension11  && inventDimParm.InventDimension11Flag)  || (inventDimNew.InventDimension11== ''                && !inventDimParm.InventDimension11Flag))
                  &&  ((inventDimNew.InventDimension12  == inventDimOld.InventDimension12  && inventDimParm.InventDimension12Flag)  || (inventDimNew.InventDimension12== ''                && !inventDimParm.InventDimension12Flag))
                  // <GEERU>                                                                                                                                                               
                  &&  ((inventDimNew.InventGtdId_RU     == inventDimOld.InventGtdId_RU     && inventDimParm.InventGTDIdFlag_RU)     || (inventDimNew.InventGtdId_RU == ''                  && !inventDimParm.InventGTDIdFlag_RU))
                  &&  ((inventDimNew.InventProfileId_RU == inventDimOld.InventProfileId_RU && inventDimParm.InventProfileIdFlag_RU) || (inventDimNew.InventProfileId_RU == ''              && !inventDimParm.InventProfileIdFlag_RU))
                  &&  ((inventDimNew.InventOwnerId_RU   == inventDimOld.InventOwnerId_RU   && inventDimParm.InventOwnerIdFlag_RU)   || (inventDimNew.InventOwnerId_RU == ''                && !inventDimParm.InventOwnerIdFlag_RU))
                  // </GEERU>
                  ;

        // In case InventDimNew doesn't exist yet we need to create it
        while select InventDimId from inventSumDateTrans
            group by InventDimId
            where inventSumDateTrans.ParmId    == parmId
            exists join inventDimOld
                where inventDimOld.InventDimId  == inventSumDateTrans.InventDimId
                  &&  ((inventDimOld.ConfigId           && !inventDimParm.ConfigIdFlag)
                   ||  (inventDimOld.InventSizeId       && !inventDimParm.InventSizeIdFlag)
                   ||  (inventDimOld.InventColorId      && !inventDimParm.InventColorIdFlag)
                   ||  (inventDimOld.InventStyleId      && !inventDimParm.InventStyleIdFlag)
                   ||  (inventDimOld.InventVersionId    && !inventDimParm.InventVersionIdFlag)
                   ||  (inventDimOld.InventSiteId       && !inventDimParm.InventSiteIdFlag)
                   ||  (inventDimOld.InventLocationId   && !inventDimParm.InventLocationIdFlag)
                   ||  (inventDimOld.wmsLocationId      && !inventDimParm.wmsLocationIdFlag)
                   ||  (inventDimOld.LicensePlateId     && !inventDimParm.LicensePlateFlag)
                   ||  (inventDimOld.InventStatusId     && !inventDimParm.InventStatusFlag)
                   ||  (inventDimOld.InventBatchId      && !inventDimParm.InventBatchIdFlag)
                   ||  (inventDimOld.InventSerialId     && !inventDimParm.InventSerialIdFlag)
                   ||  (inventDimOld.InventDimension1   && !inventDimParm.InventDimension1Flag)
                   ||  (inventDimOld.InventDimension2   && !inventDimParm.InventDimension2Flag)
                   ||  (inventDimOld.InventDimension3   && !inventDimParm.InventDimension3Flag)
                   ||  (inventDimOld.InventDimension4   && !inventDimParm.InventDimension4Flag)
                   ||  (inventDimOld.InventDimension5   && !inventDimParm.InventDimension5Flag)
                   ||  (inventDimOld.InventDimension6   && !inventDimParm.InventDimension6Flag)
                   ||  (inventDimOld.InventDimension7   && !inventDimParm.InventDimension7Flag)
                   ||  (inventDimOld.InventDimension8   && !inventDimParm.InventDimension8Flag)
                   ||  (inventDimOld.InventDimension9   && !inventDimParm.InventDimension9Flag)
                   ||  (inventDimOld.InventDimension10  && !inventDimParm.InventDimension10Flag)
                   ||  (inventDimOld.InventDimension11  && !inventDimParm.InventDimension11Flag)
                   ||  (inventDimOld.InventDimension12  && !inventDimParm.InventDimension12Flag)
                   // <GEERU>
                   ||  (inventDimOld.InventGtdId_RU     && !inventDimParm.InventGTDIdFlag_RU)
                   ||  (inventDimOld.InventProfileId_RU && !inventDimParm.InventProfileIdFlag_RU)
                   ||  (inventDimOld.InventOwnerId_RU   && !inventDimParm.InventOwnerIdFlag_RU)
                   // </GEERU>
                   )
        {
            inventDimNew = InventDim::find(inventSumDateTrans.InventDimId);
            inventDimNew.clearNotSelectedDim(inventDimParm);
            inventDimNew = InventDim::findOrCreate(inventDimNew);

            update_recordset inventSumDateTransNew
                setting InventDimId = inventDimNew.InventDimId
                where inventSumDateTransNew.ParmId      == parmId
                   && inventSumDateTransNew.InventDimId == inventSumDateTrans.InventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearNotSelectedDimensionsWithNewInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>InventDimId</c> field to only contain values that are printed.
    /// </summary>
    /// <remarks>
    ///    This is required to perform a correct merge of records after creation of new inventDim.
    /// </remarks>
    private void clearNotSelectedDimensionsWithNewInventDim()
    {
        InventSumDateTrans      inventSumDateTrans;
        InventDim               inventDimOld;
        InventDim               inventDimNew;

        this.updateInventSumDateTransWithNewInventDimId();

        if (userConnection)
        {
            inventSumDateTrans.setConnection(userConnection);
            inventDimOld.setConnection(userConnection);
            inventDimNew.setConnection(userConnection);
        }

        // In case InventDimNew doesn't exist yet we need to create it
        while select InventDimId from inventSumDateTrans
            group by InventDimId
            where inventSumDateTrans.ParmId    == parmId
            exists join inventDimOld
                where inventDimOld.InventDimId  == inventSumDateTrans.InventDimId
                  &&  ((inventDimOld.ConfigId           && !inventDimParm.ConfigIdFlag)
                   ||  (inventDimOld.InventSizeId       && !inventDimParm.InventSizeIdFlag)
                   ||  (inventDimOld.InventColorId      && !inventDimParm.InventColorIdFlag)
                   ||  (inventDimOld.InventStyleId      && !inventDimParm.InventStyleIdFlag)
                   ||  (inventDimOld.InventVersionId    && !inventDimParm.InventVersionIdFlag)
                   ||  (inventDimOld.InventSiteId       && !inventDimParm.InventSiteIdFlag)
                   ||  (inventDimOld.InventLocationId   && !inventDimParm.InventLocationIdFlag)
                   ||  (inventDimOld.wmsLocationId      && !inventDimParm.wmsLocationIdFlag)
                   ||  (inventDimOld.LicensePlateId     && !inventDimParm.LicensePlateFlag)
                   ||  (inventDimOld.InventStatusId     && !inventDimParm.InventStatusFlag)
                   ||  (inventDimOld.InventBatchId      && !inventDimParm.InventBatchIdFlag)
                   ||  (inventDimOld.InventSerialId     && !inventDimParm.InventSerialIdFlag)
                   ||  (inventDimOld.InventDimension1   && !inventDimParm.InventDimension1Flag)
                   ||  (inventDimOld.InventDimension2   && !inventDimParm.InventDimension2Flag)
                   ||  (inventDimOld.InventDimension3   && !inventDimParm.InventDimension3Flag)
                   ||  (inventDimOld.InventDimension4   && !inventDimParm.InventDimension4Flag)
                   ||  (inventDimOld.InventDimension5   && !inventDimParm.InventDimension5Flag)
                   ||  (inventDimOld.InventDimension6   && !inventDimParm.InventDimension6Flag)
                   ||  (inventDimOld.InventDimension7   && !inventDimParm.InventDimension7Flag)
                   ||  (inventDimOld.InventDimension8   && !inventDimParm.InventDimension8Flag)
                   ||  (inventDimOld.InventDimension9   && !inventDimParm.InventDimension9Flag)
                   ||  (inventDimOld.InventDimension10  && !inventDimParm.InventDimension10Flag)
                   ||  (inventDimOld.InventDimension11  && !inventDimParm.InventDimension11Flag)
                   ||  (inventDimOld.InventDimension12  && !inventDimParm.InventDimension12Flag)
                   // <GEERU>
                   ||  (inventDimOld.InventGtdId_RU     && !inventDimParm.InventGTDIdFlag_RU)
                   ||  (inventDimOld.InventProfileId_RU && !inventDimParm.InventProfileIdFlag_RU)
                   ||  (inventDimOld.InventOwnerId_RU   && !inventDimParm.InventOwnerIdFlag_RU)
                   // </GEERU>
                   )
        {
            inventDimNew = InventDim::find(inventSumDateTrans.InventDimId);
            inventDimNew.clearNotSelectedDim(inventDimParm);
            InventDim::findOrCreate(inventDimNew);
        }

        this.updateInventSumDateTransWithNewInventDimId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventSumDateTransWithNewInventDimId</Name>
				<Source><![CDATA[
    private void updateInventSumDateTransWithNewInventDimId()
    {
        InventSumDateTrans      inventSumDateTrans;
        InventDim               inventDimOld;
        InventDim               inventDimNew;

        if (userConnection)
        {
            inventSumDateTrans.setConnection(userConnection);
            inventDimOld.setConnection(userConnection);
            inventDimNew.setConnection(userConnection);
        }

        update_recordset inventSumDateTrans
            setting InventDimId = inventDimNew.InventDimId
            where inventSumDateTrans.ParmId     == parmId
            join RecId from inventDimOld
                where inventDimOld.InventDimId       == inventSumDateTrans.InventDimId
                join InventDimId from inventDimNew
                where ((inventDimNew.ConfigId           == inventDimOld.ConfigId           && inventDimParm.ConfigIdFlag)           || (inventDimNew.ConfigId == ''                        && !inventDimParm.ConfigIdFlag))
                  &&  ((inventDimNew.InventSizeId       == inventDimOld.InventSizeId       && inventDimParm.InventSizeIdFlag)       || (inventDimNew.InventSizeId == ''                    && !inventDimParm.InventSizeIdFlag))
                  &&  ((inventDimNew.InventColorId      == inventDimOld.InventColorId      && inventDimParm.InventColorIdFlag)      || (inventDimNew.InventColorId == ''                   && !inventDimParm.InventColorIdFlag))
                  &&  ((inventDimNew.InventStyleId      == inventDimOld.InventStyleId      && inventDimParm.InventStyleIdFlag)      || (inventDimNew.InventStyleId == ''                   && !inventDimParm.InventStyleIdFlag))
                  &&  ((inventDimNew.InventVersionId    == inventDimOld.InventVersionId    && inventDimParm.InventVersionIdFlag)    || (inventDimNew.InventVersionId == ''                 && !inventDimParm.InventVersionIdFlag))
                  &&  ((inventDimNew.InventSiteId       == inventDimOld.InventSiteId       && inventDimParm.InventSiteIdFlag)       || (inventDimNew.InventSiteId == ''                    && !inventDimParm.InventSiteIdFlag))
                  &&  ((inventDimNew.InventLocationId   == inventDimOld.InventLocationId   && inventDimParm.InventLocationIdFlag)   || (inventDimNew.InventLocationId == ''                && !inventDimParm.InventLocationIdFlag))
                  &&  ((inventDimNew.wmsLocationId      == inventDimOld.wmsLocationId      && inventDimParm.wmsLocationIdFlag)      || (inventDimNew.wmsLocationId == ''                   && !inventDimParm.wmsLocationIdFlag))
                  &&  ((inventDimNew.LicensePlateId     == inventDimOld.LicensePlateId     && inventDimParm.LicensePlateFlag)       || (inventDimNew.LicensePlateId == ''                  && !inventDimParm.LicensePlateFlag))
                  &&  ((inventDimNew.InventStatusId     == inventDimOld.InventStatusId     && inventDimParm.InventStatusFlag)       || (inventDimNew.InventStatusId == ''                  && !inventDimParm.InventStatusFlag))
                  &&  ((inventDimNew.InventBatchId      == inventDimOld.InventBatchId      && inventDimParm.InventBatchIdFlag)      || (inventDimNew.InventBatchId == ''                   && !inventDimParm.InventBatchIdFlag))
                  &&  ((inventDimNew.InventSerialId     == inventDimOld.InventSerialId     && inventDimParm.InventSerialIdFlag)     || (inventDimNew.InventSerialId == ''                  && !inventDimParm.InventSerialIdFlag))
                  &&  ((inventDimNew.InventDimension1   == inventDimOld.InventDimension1   && inventDimParm.InventDimension1Flag)   || (inventDimNew.InventDimension1 == ''                && !inventDimParm.InventDimension1Flag))
                  &&  ((inventDimNew.InventDimension2   == inventDimOld.InventDimension2   && inventDimParm.InventDimension2Flag)   || (inventDimNew.InventDimension2 == ''                && !inventDimParm.InventDimension2Flag))
                  &&  ((inventDimNew.InventDimension3   == inventDimOld.InventDimension3   && inventDimParm.InventDimension3Flag)   || (inventDimNew.InventDimension3 == ''                && !inventDimParm.InventDimension3Flag))
                  &&  ((inventDimNew.InventDimension4   == inventDimOld.InventDimension4   && inventDimParm.InventDimension4Flag)   || (inventDimNew.InventDimension4 == ''                && !inventDimParm.InventDimension4Flag))
                  &&  ((inventDimNew.InventDimension5   == inventDimOld.InventDimension5   && inventDimParm.InventDimension5Flag)   || (inventDimNew.InventDimension5 == ''                && !inventDimParm.InventDimension5Flag))
                  &&  ((inventDimNew.InventDimension6   == inventDimOld.InventDimension6   && inventDimParm.InventDimension6Flag)   || (inventDimNew.InventDimension6 == ''                && !inventDimParm.InventDimension6Flag))
                  &&  ((inventDimNew.InventDimension7   == inventDimOld.InventDimension7   && inventDimParm.InventDimension7Flag)   || (inventDimNew.InventDimension7 == ''                && !inventDimParm.InventDimension7Flag))
                  &&  ((inventDimNew.InventDimension8   == inventDimOld.InventDimension8   && inventDimParm.InventDimension8Flag)   || (inventDimNew.InventDimension8 == ''                && !inventDimParm.InventDimension8Flag))
                  &&  ((inventDimNew.InventDimension9   == inventDimOld.InventDimension9   && inventDimParm.InventDimension9Flag)   || (inventDimNew.InventDimension9 == utcDateTimeNull() && !inventDimParm.InventDimension9Flag))
                  &&  ((inventDimNew.InventDimension10  == inventDimOld.InventDimension10  && inventDimParm.InventDimension10Flag)  || (inventDimNew.InventDimension10 == 0                && !inventDimParm.InventDimension10Flag))
                  &&  ((inventDimNew.InventDimension11  == inventDimOld.InventDimension11  && inventDimParm.InventDimension11Flag)  || (inventDimNew.InventDimension11== ''                && !inventDimParm.InventDimension11Flag))
                  &&  ((inventDimNew.InventDimension12  == inventDimOld.InventDimension12  && inventDimParm.InventDimension12Flag)  || (inventDimNew.InventDimension12 == ''               && !inventDimParm.InventDimension12Flag))
                  // <GEERU>
                  &&  ((inventDimNew.InventGtdId_RU     == inventDimOld.InventGtdId_RU     && inventDimParm.InventGTDIdFlag_RU)     || (inventDimNew.InventGtdId_RU == ''                  && !inventDimParm.InventGTDIdFlag_RU))
                  &&  ((inventDimNew.InventProfileId_RU == inventDimOld.InventProfileId_RU && inventDimParm.InventProfileIdFlag_RU) || (inventDimNew.InventProfileId_RU == ''              && !inventDimParm.InventProfileIdFlag_RU))
                  &&  ((inventDimNew.InventOwnerId_RU   == inventDimOld.InventOwnerId_RU   && inventDimParm.InventOwnerIdFlag_RU)   || (inventDimNew.InventOwnerId_RU == ''                && !inventDimParm.InventOwnerIdFlag_RU))
                  // </GEERU>
                  ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes transactions after the data has been transferred to the temporary database table.
    /// </summary>
    /// <remarks>
    ///    This method must be called after the data in the <c>InventSumDateTrans</c> table is no longer
    ///    needed.
    /// </remarks>
    protected void deleteTransactions()
    {
        InventSumDateTrans          inventSumDateTrans;

        if (userConnection)
        {
            inventSumDateTrans.setConnection(userConnection);
        }

        if (parmId)
        {
            delete_from inventSumDateTrans
                where inventSumDateTrans.ParmId == parmId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMemberVariables</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the member variables of the class.
    /// </summary>
    /// <remarks>
    ///    The <c>parmId</c> value is a unique value that is generated for each report that is run. This
    ///    variable uniqueness allows the management of several reports that are running at the same time.The
    ///    three variables initialized here will also be used as scalar values in some <c>insert_recordset</c>
    ///    statements.
    /// </remarks>
    protected void initMemberVariables()
    {
        parmId            = NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num();
        inventSumDateType = InventSumDateType::Base;
        minus             = -1;

        if (userConnection)
        {
            inventDimParm.setConnection(userConnection);
            inventSumDateTransReport.setConnection(userConnection);
            inventDimItemTmpInventTrans.setConnection(userConnection);
            inventDimItemTmpInventSum.setConnection(userConnection);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Groups records that were created earlier and prepares data for the report.
    /// </summary>
    protected void mergeRecords()
    {
        if (isInventSumDateEngineDenormalizeInventSumDateTransToggleEnabled)
        {
            this.constructInventSumDateTransReport();
        }
        else
        {
            InventSumDateTrans          inventSumDateTrans;
            InventSumDateTrans          inventSumDateTransNew;
            InventSumDateTransReport    inventSumDateTransReportTmp;
            InventDim                   inventDim;

            if (userConnection)
            {
                inventSumDateTrans.setConnection(userConnection);
                inventSumDateTransNew.setConnection(userConnection);
                inventSumDateTransReportTmp.setConnection(userConnection);
                inventDim.setConnection(userConnection);
            }

            inventSumDateType = InventSumDateType::Final;

            insert_recordset inventSumDateTransNew (ItemId, InventDimId,
                                                    ReceivedQty, DeductedQty, PostedQty, RegisteredQty, PickedQty,
                                                    ParmId, TransType, CostAmountPosted, CostAmountAdjustment)
                select ItemId, InventDimId,
                    sum(ReceivedQty), sum(DeductedQty), sum(PostedQty), sum(RegisteredQty), sum(PickedQty),
                    ParmId /*scalar*/, inventSumDateType /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment)
                    from inventSumDateTrans
                    group by ParmId, ItemId, InventDimId
                    where inventSumDateTrans.ParmId    == parmId
                       && inventSumDateTrans.TransType != InventSumDateType::Final;

            delete_from inventSumDateTrans
                where inventSumDateTrans.ParmId    == parmId
                   && inventSumDateTrans.TransType != InventSumDateType::Final;

            
            this.clearNotSelectedDimensionsWithNewInventDim();

            insert_recordset inventSumDateTransReportTmp (ItemId, InventDimId, PostedQty, DeductedQty, ReceivedQty, RegisteredQty, PickedQty, CostAmountPosted, CostAmountAdjustment)
                select ItemId, InventDimId, sum(PostedQty), sum(DeductedQty), sum(ReceivedQty), sum(RegisteredQty), sum(PickedQty), sum(CostAmountPosted), sum(CostAmountAdjustment) from inventSumDateTrans
                    group by ItemId, InventDimId
                    where inventSumDateTrans.ParmId == parmId;

            if (deleteZeroLines)
            {
                delete_from inventSumDateTransReportTmp
                    where inventSumDateTransReportTmp.PostedQty            == 0 &&
                          inventSumDateTransReportTmp.DeductedQty          == 0 &&
                          inventSumDateTransReportTmp.ReceivedQty          == 0 &&
                          inventSumDateTransReportTmp.RegisteredQty        == 0 &&
                          inventSumDateTransReportTmp.PickedQty            == 0;
            }

            QueryRun queryRun = new QueryRun(query);
            queryRun.setCursor(inventSumDateTransReportTmp);

            while (queryRun.next())
            {
                inventSumDateTransReportTmp = queryRun.get(tableNum(InventSumDateTransReport));
                inventDim                   = queryRun.get(tableNum(InventDim));

                inventSumDateTransReport.clear();

                inventSumDateTransReport.data(inventSumDateTransReportTmp);

                inventSumDateTransReport.ItemName = InventTable::name(inventSumDateTransReport.ItemId, inventDim);

                inventSumDateTransReport.initFromInventDim(inventDim);

                inventSumDateTransReport.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteZeroLines</Name>
				<Source><![CDATA[
    public NoYes parmDeleteZeroLines(NoYes _deleteZeroLines = deleteZeroLines)
    {
        deleteZeroLines = _deleteZeroLines;

        return deleteZeroLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParm(InventDimParm _inventDimParm = inventDimParm)
    {
        inventDimParm = _inventDimParm;

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSumDateTransReport</Name>
				<Source><![CDATA[
    public InventSumDateTransReport parmInventSumDateTransReport(InventSumDateTransReport _inventSumDateTransReport = inventSumDateTransReport)
    {
        inventSumDateTransReport = _inventSumDateTransReport;

        select inventSumDateTransReport;
        return inventSumDateTransReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPerDate</Name>
				<Source><![CDATA[
    public TransDate parmPerDate(TransDate _perDate = perDate)
    {
        perDate = _perDate;
        return perDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    public Query parmQuery(Query _query = query)
    {
        query = _query;

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserConnection</Name>
				<Source><![CDATA[
    public UserConnection parmUserConnection(UserConnection _userConnection = userConnection)
    {
        userConnection = _userConnection;

        return userConnection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInventDimTmpInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates a table with the result set from the query to be used when joining with the <c>InventSum</c> table.
    /// </summary>
    private void populateInventDimTmpInventSum()
    {
        Query targetQuery = new Query();
        InventSum inventSum;

        if (userConnection)
        {
            inventSum.setConnection(userConnection);
        }


        QueryBuildDataSource qbds = targetQuery.addDataSource(tableNum(InventSum));
        qbds.addRange(fieldNum(InventSum, Closed)).value(queryValue(NoYes::No));
        if (isWarehouseInventoryTransactionStackEnabled)
        {
            this.copyFieldRanges(query.dataSourceTable(tableNum(InventSumDateTransReport)), fieldNum(InventSumDateTransReport, ItemId), qbds, fieldNum(InventSum, ItemId));
        }
        else
        {
            int rangeCount = 1;
            QueryBuildRange sourceItemIdRange = query.dataSourceTable(tableNum(InventSumDateTransReport)).findRange(fieldNum(InventSumDateTransReport, ItemId), rangeCount);
            while (sourceItemIdRange)
            {
                qbds.addRange(fieldNum(InventSum, ItemId)).value(sourceItemIdRange.value());
                ++rangeCount;
                sourceItemIdRange = query.dataSourceTable(tableNum(InventSumDateTransReport)).findRange(fieldNum(InventSumDateTransReport, ItemId), rangeCount);
            }
        }
        qbds.addSelectionField(fieldNum(InventSum, ItemId));
        qbds.addSelectionField(fieldNum(InventSum, InventDimId));
        qbds.addOrderByField(fieldNum(InventSum, ItemId));
        qbds.addOrderByField(fieldNum(InventSum, InventDimId));
        qbds.orderMode(OrderMode::GroupBy);

        qbds = qbds.addDataSource(tableNum(InventDim));
        qbds.addLink(fieldNum(InventSum, InventDimId), fieldNum(InventDim, InventDimId));
        qbds.joinMode(JoinMode::ExistsJoin);

        SysQuery::mergeRanges(targetQuery, query, 2);

        QueryRun queryRun = new QueryRun(targetQuery);

        while (queryRun.next())
        {
            inventSum = queryRun.get(tableNum(inventSum));

            inventDimItemTmpInventSum.clear();
            inventDimItemTmpInventSum.itemId = inventSum.ItemId;
            inventDimItemTmpInventSum.inventDimId = inventSum.inventDimId;
            inventDimItemTmpInventSum.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInventDimTmpInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates a table with the result set from the query to be used when joining with the <c>InventTrans</c> table.
    /// </summary>
    private void populateInventDimTmpInventTrans()
    {
        Query targetQuery = new Query();

        InventTrans inventTrans;

        if (userConnection)
        {
            inventTrans.setConnection(userConnection);
        }

        QueryBuildDataSource qbds = targetQuery.addDataSource(tableNum(InventTrans));
        if (isWarehouseInventoryTransactionStackEnabled)
        {
            this.copyFieldRanges(query.dataSourceTable(tableNum(InventSumDateTransReport)), fieldNum(InventSumDateTransReport, ItemId), qbds, fieldNum(InventTrans, ItemId));
        }
        else
        {
            QueryBuildRange sourceItemIdRange = query.dataSourceTable(tableNum(InventSumDateTransReport)).findRange(fieldNum(InventSumDateTransReport, ItemId));
            if (sourceItemIdRange)
            {
                qbds.addRange(fieldNum(InventTrans, ItemId)).value(sourceItemIdRange.value());
            }
        }
        qbds.addRange(fieldNum(InventTrans, DateStatus)).value(queryRange(perDate, dateMax()));

        qbds.addSelectionField(fieldNum(inventTrans, ItemId));
        qbds.addSelectionField(fieldNum(inventTrans, InventDimId));
        qbds.addOrderByField(fieldNum(inventTrans, ItemId));
        qbds.addOrderByField(fieldNum(inventTrans, InventDimId));
        qbds.orderMode(OrderMode::GroupBy);

        qbds = qbds.addDataSource(tableNum(InventDim));
        qbds.addLink(fieldNum(inventTrans, InventDimId), fieldNum(inventDim, InventDimId));
        qbds.joinMode(JoinMode::ExistsJoin);

        SysQuery::mergeRanges(targetQuery, query, 2);

        QueryRun queryRun = new QueryRun(targetQuery);

        while (queryRun.next())
        {
            inventTrans = queryRun.get(tableNum(InventTrans));

            inventDimItemTmpInventTrans.clear();
            inventDimItemTmpInventTrans.itemId = inventTrans.ItemId;
            inventDimItemTmpInventTrans.inventDimId = inventTrans.inventDimId;
            inventDimItemTmpInventTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructInventSumDateTransReport</Name>
				<Source><![CDATA[
    private void constructInventSumDateTransReport()
    {
        if (InventSumDateEngineFilterFromOrigQueryFlight::instance().isEnabled())
        {
            this.constructInventSumDateTransReportByOrigQuery();
            return;
        }

        InventSumDateTrans  inventSumDateTrans;

        if (userConnection)
        {
            inventSumDateTrans.setConnection(userConnection);
        }

        Query targetQuery = new Query();

        QueryBuildDataSource qbds = targetQuery.addDataSource(tableNum(InventSumDateTrans));

        qbds.addRange(fieldNum(InventSumDateTrans, ParmId)).value(queryValue(parmId));
        qbds.addSelectionField(fieldNum(InventSumDateTrans, ItemId));
        qbds.addGroupByField(fieldNum(InventSumDateTrans, ItemId));
        
        Enumerator inventDimFieldsEnumerator = InventDim::dimEnabledFieldList().getEnumerator();
        while (inventDimFieldsEnumerator.moveNext())
        {
            FieldId inventDimFieldId = inventDimFieldsEnumerator.current();
            FieldId inventDimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);

            if (inventDimParm.(inventDimParmFieldId))
            {
                FieldId inventSumDateTransFieldId = InventSumDateTrans::getInventSumDateTransFieldIdFromInventDimFieldId(inventDimFieldId);
                qbds.addSelectionField(inventSumDateTransFieldId);
                qbds.addGroupByField(inventSumDateTransFieldId);
            }
        }

        qbds.addSelectionField(fieldNum(InventSumDateTrans, PostedQty), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(InventSumDateTrans, DeductedQty), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(InventSumDateTrans, ReceivedQty), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(InventSumDateTrans, RegisteredQty), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(InventSumDateTrans, PickedQty), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(InventSumDateTrans, CostAmountPosted), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(InventSumDateTrans, CostAmountAdjustment), SelectionField::Sum);

        LanguageId languageId = CompanyInfo::languageId();

        QueryRun queryRun = new QueryRun(targetQuery);
        queryRun.setCursor(inventSumDateTrans);

        while (queryRun.next())
        {
            inventSumDateTrans = queryRun.get(tableNum(InventSumDateTrans));

            if (!deleteZeroLines                         ||
                inventSumDateTrans.PostedQty        != 0 ||
                inventSumDateTrans.DeductedQty      != 0 ||
                inventSumDateTrans.ReceivedQty      != 0 ||
                inventSumDateTrans.RegisteredQty    != 0 ||
                inventSumDateTrans.PickedQty        != 0)
            {
                InventDim inventDim;

                inventDim.initFromInventSumDateTrans(inventSumDateTrans);

                inventSumDateTransReport.clear();

                inventSumDateTransReport.initFromInventSumDateTrans(inventSumDateTrans, inventDim);
                
                inventSumDateTransReport.ItemName = InventTable::find(inventSumDateTransReport.ItemId).getProductNameFromInventDim(languageId, inventDim);

                inventSumDateTransReport.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructInventSumDateTransReportByOrigQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updated version of constructInventSumDateTransReport(). Allows the origin filter query to take function.
    /// </summary>
    private void constructInventSumDateTransReportByOrigQuery()
    {
        InventSumDateTrans  inventSumDateTrans;
        InventSumDateTransReport    inventSumDateTransReportTmp;

        if (userConnection)
        {
            inventSumDateTrans.setConnection(userConnection);
            inventSumDateTransReportTmp.setConnection(userConnection);
        }

        insert_recordset inventSumDateTransReportTmp (ItemId, InventDimId, PostedQty, DeductedQty, 
            ReceivedQty, RegisteredQty, PickedQty, CostAmountPosted, CostAmountAdjustment, #InventDimGroupAllFields)
                select ItemId, InventDimId, sum(PostedQty), sum(DeductedQty), sum(ReceivedQty), 
                    sum(RegisteredQty), sum(PickedQty), sum(CostAmountPosted), sum(CostAmountAdjustment), #InventDimGroupAllFields from inventSumDateTrans
                group by ItemId, InventDimId, #InventDimGroupAllFields
                where inventSumDateTrans.ParmId == parmId;

        if (deleteZeroLines)
        {
            delete_from inventSumDateTransReportTmp
                    where inventSumDateTransReportTmp.PostedQty            == 0 &&
                          inventSumDateTransReportTmp.DeductedQty          == 0 &&
                          inventSumDateTransReportTmp.ReceivedQty          == 0 &&
                          inventSumDateTransReportTmp.RegisteredQty        == 0 &&
                          inventSumDateTransReportTmp.PickedQty            == 0;
        }

        QueryBuildDataSource qbds = query.dataSourceNo(1);

        qbds.addSelectionField(fieldNum(InventSumDateTransReport, ItemId));
        qbds.addGroupByField(fieldNum(InventSumDateTransReport, ItemId));
        
        Enumerator inventDimFieldsEnumerator = InventDim::dimEnabledFieldList().getEnumerator();
        while (inventDimFieldsEnumerator.moveNext())
        {
            FieldId inventDimFieldId = inventDimFieldsEnumerator.current();
            FieldId inventDimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);

            if (inventDimParm.(inventDimParmFieldId))
            {
                FieldId inventSumDateTransFieldId = InventSumDateTransReport::getInventSumDateTransReportFieldIdFromInventDimFieldId(inventDimFieldId);
                qbds.addSelectionField(inventSumDateTransFieldId);
                qbds.addGroupByField(inventSumDateTransFieldId);
            }
        }

        qbds.addSelectionField(fieldNum(InventSumDateTransReport, PostedQty), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(InventSumDateTransReport, DeductedQty), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(InventSumDateTransReport, ReceivedQty), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(InventSumDateTransReport, RegisteredQty), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(InventSumDateTransReport, PickedQty), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(InventSumDateTransReport, CostAmountPosted), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(InventSumDateTransReport, CostAmountAdjustment), SelectionField::Sum);

        QueryRun queryRun = new QueryRun(query);
        queryRun.setCursor(inventSumDateTransReportTmp);
        LanguageId languageId = CompanyInfo::languageId();
        while (queryRun.next())
        {
            inventSumDateTransReportTmp = queryRun.get(tableNum(InventSumDateTransReport));

            // Detect zero quantity lines again after grouping.
            if (!deleteZeroLines ||
                inventSumDateTransReportTmp.PostedQty != 0 ||
                inventSumDateTransReportTmp.DeductedQty != 0 ||
                inventSumDateTransReportTmp.ReceivedQty != 0 ||
                inventSumDateTransReportTmp.RegisteredQty != 0 ||
                inventSumDateTransReportTmp.PickedQty != 0)
            {
                inventSumDateTransReport.clear();
                inventSumDateTransReport.data(inventSumDateTransReportTmp);
                inventSumDateTransReport.ItemName = InventTable::find(inventSumDateTransReportTmp.ItemId).productName(languageId);
                inventSumDateTransReport.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventOnHand</Name>
				<Source><![CDATA[
    protected void selectInventOnHand()
    {
        InventSum               inventSum;
        InventTrans             inventTrans;
        InventSumDateTrans      inventSumDateTrans;

        if (userConnection)
        {
            inventSum.setConnection(userConnection);
            inventTrans.setConnection(userConnection);
            inventSumDateTrans.setConnection(userConnection);
        }

        this.populateInventDimTmpInventSum();
        this.populateInventDimTmpInventTrans();

        delete_from inventSumDateTrans
            where inventSumDateTrans.ParmId == parmId;

        if (isInventSumDateEngineDenormalizeInventSumDateTransToggleEnabled)
        {
            insert_recordset inventSumDateTrans (ItemId, PostedQty, ReceivedQty, DeductedQty, RegisteredQty, PickedQty, InventDimId, ParmId, TransType, CostAmountPosted, #InventDimGroupAllFields)
            select ItemId, sum(PostedQty), sum(Received), sum(Deducted), sum(Registered), sum(Picked),
                    InventDimId, parmId /*scalar*/, inventSumDateType /*scalar*/, sum(PostedValue), #InventDimGroupAllFields
            from inventSum
                group by ItemId, InventDimId, #InventDimGroupAllFields
                where inventSum.Closed == NoYes::No
            exists join inventDimItemTmpInventSum
                where inventDimItemTmpInventSum.itemId == inventSum.ItemId &&
                      inventDimItemTmpInventSum.inventDimId == inventSum.InventDimId;

            insert_recordset inventSumDateTrans (ItemId, PostedQty, ReceivedQty, DeductedQty, RegisteredQty, PickedQty, InventDimId, ParmId, TransType, CostAmountPosted, #InventDimGroupAllFields)
            select ItemId, sum(PostedQty), sum(Received), sum(Deducted), sum(Registered), sum(Picked),
                    InventDimId, parmId /*scalar*/, inventSumDateType /*scalar*/, sum(PostedValue), #InventDimGroupAllFields
            from inventSum
                group by ItemId, InventDimId, #InventDimGroupAllFields
                where inventSum.Closed == NoYes::Yes
            exists join inventTrans
                where inventTrans.ItemId      == inventSum.ItemId
                    && inventTrans.InventDimId == inventSum.InventDimId
                    && inventTrans.DateStatus  >= perDate
            exists join inventDimItemTmpInventTrans
                where inventDimItemTmpInventTrans.itemId == inventSum.ItemId &&
                      inventDimItemTmpInventTrans.inventDimId == inventSum.InventDimId;
        }
        else
        {
            insert_recordset inventSumDateTrans (ItemId, PostedQty, ReceivedQty, DeductedQty, RegisteredQty, PickedQty, InventDimId, ParmId, TransType, CostAmountPosted)
                select ItemId, sum(PostedQty), sum(Received), sum(Deducted), sum(Registered), sum(Picked),
                       InventDimId, parmId /*scalar*/, inventSumDateType /*scalar*/, sum(PostedValue)
                from inventSum
                    group by ItemId, InventDimId
                    where inventSum.Closed == NoYes::No
                exists join inventDimItemTmpInventSum
                    where inventDimItemTmpInventSum.itemId == inventSum.ItemId &&
                          inventDimItemTmpInventSum.inventDimId == inventSum.InventDimId;

            insert_recordset inventSumDateTrans (ItemId, PostedQty, ReceivedQty, DeductedQty, RegisteredQty, PickedQty, InventDimId, ParmId, TransType, CostAmountPosted)
                select ItemId, sum(PostedQty), sum(Received), sum(Deducted), sum(Registered), sum(Picked),
                       InventDimId, parmId /*scalar*/, inventSumDateType /*scalar*/, sum(PostedValue)
                from inventSum
                    group by ItemId, InventDimId
                    where inventSum.Closed == NoYes::Yes
                exists join inventTrans
                    where inventTrans.ItemId      == inventSum.ItemId
                       && inventTrans.InventDimId == inventSum.InventDimId
                       && inventTrans.DateStatus  >= perDate
                exists join inventDimItemTmpInventTrans
                    where inventDimItemTmpInventTrans.itemId == inventSum.ItemId &&
                          inventDimItemTmpInventTrans.inventDimId == inventSum.InventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventTransPostingFinancial</Name>
				<Source><![CDATA[
    protected void selectInventTransPostingFinancial()
    {
        InventTrans         inventTrans;
        
        InventSumDateTrans  inventSumDateTrans;
        InventSumDateTrans  inventSumDateTransNew;
        
        if (userConnection)
        {
            inventTrans.setConnection(userConnection);
            inventSumDateTrans.setConnection(userConnection);
            inventSumDateTransNew.setConnection(userConnection);
        }
        
        if (isInventSumDateEngineDenormalizeInventSumDateTransToggleEnabled)
        {
            // Purchased ReceivedQty += Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, #InventDimGroupAllFields, ReceivedQty, ParmId, CostAmountPosted, CostAmountAdjustment)
                    select forceplaceholders ItemId, InventDimId, #InventDimGroupAllFields from inventSumDateTrans
                        group by ItemId, InventDimId, #InventDimGroupAllFields
                        where inventSumDateTrans.ParmId    == parmId                  &&
                              inventSumDateTrans.TransType == InventSumDateType::Base
                        join sum(Qty), parmId /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                            where inventTrans.ItemId                                    == inventSumDateTrans.ItemId
                              &&  inventTrans.DateFinancial                             >  perDate
                              &&  inventTrans.InventDimId                               == inventSumDateTrans.InventDimId
                              &&  inventTrans.StatusReceipt                             == StatusReceipt::Purchased
                              &&  inventTrans.StatusIssue                               == StatusIssue::None;

            // Sold DeductedQty -= Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, #InventDimGroupAllFields, DeductedQty, ParmId, Sign, CostAmountPosted, CostAmountAdjustment)
                    select forceplaceholders ItemId, InventDimId, #InventDimGroupAllFields from inventSumDateTrans
                        group by ItemId, InventDimId, #InventDimGroupAllFields
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                        join sum(Qty), parmId /*scalar*/, minus /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                            where inventTrans.ItemId                                    == inventSumDateTrans.ItemId
                              &&  inventTrans.DateFinancial                             >  perDate
                              &&  inventTrans.InventDimId                               == inventSumDateTrans.InventDimId
                              &&  inventTrans.StatusReceipt                             == StatusReceipt::None
                              &&  inventTrans.StatusIssue                               == StatusIssue::Sold;
        
            // PackingSlipReturned PostedQty += Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, #InventDimGroupAllFields, PostedQty, ParmId, CostAmountPosted, CostAmountAdjustment)
                    select forceplaceholders ItemId, InventDimId, #InventDimGroupAllFields from inventSumDateTrans
                        group by ItemId, InventDimId, #InventDimGroupAllFields
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                        join sum(Qty), parmId /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                            where inventTrans.ItemId                                    == inventSumDateTrans.ItemId
                              &&  inventTrans.DateFinancial                             >  perDate
                              &&  inventTrans.InventDimId                               == inventSumDateTrans.InventDimId
                              &&  inventTrans.PackingSlipReturned                       != 0;
        
            // All PostedQty -= Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, #InventDimGroupAllFields, PostedQty, ParmId, Sign, CostAmountPosted, CostAmountAdjustment)
                    select forceplaceholders ItemId, InventDimId, #InventDimGroupAllFields from inventSumDateTrans
                        group by ItemId, InventDimId, #InventDimGroupAllFields
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                        join sum(Qty), parmId /*scalar*/, minus /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                            where inventTrans.ItemId                                    == inventSumDateTrans.ItemId
                              &&  inventTrans.DateFinancial                             >  perDate
                              &&  inventTrans.InventDimId                               == inventSumDateTrans.InventDimId;
        }
        else
        {
            // Purchased ReceivedQty += Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, ReceivedQty, ParmId, CostAmountPosted, CostAmountAdjustment)
                    select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                        group by ItemId, InventDimId
                        where inventSumDateTrans.ParmId    == parmId                  &&
                              inventSumDateTrans.TransType == InventSumDateType::Base
                        join sum(Qty), parmId /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                            where inventTrans.ItemId                                    == inventSumDateTrans.ItemId
                              &&  inventTrans.DateFinancial                             >  perDate
                              &&  inventTrans.InventDimId                               == inventSumDateTrans.InventDimId
                              &&  inventTrans.StatusReceipt                             == StatusReceipt::Purchased
                              &&  inventTrans.StatusIssue                               == StatusIssue::None;
        
            // Sold DeductedQty -= Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, DeductedQty, ParmId, Sign, CostAmountPosted, CostAmountAdjustment)
                    select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                        group by ItemId, InventDimId
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                        join sum(Qty), parmId /*scalar*/, minus /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                            where inventTrans.ItemId                                    == inventSumDateTrans.ItemId
                              &&  inventTrans.DateFinancial                             >  perDate
                              &&  inventTrans.InventDimId                               == inventSumDateTrans.InventDimId
                              &&  inventTrans.StatusReceipt                             == StatusReceipt::None
                              &&  inventTrans.StatusIssue                               == StatusIssue::Sold;
        
            // PackingSlipReturned PostedQty += Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, PostedQty, ParmId, CostAmountPosted, CostAmountAdjustment)
                    select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                        group by ItemId, InventDimId
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                        join sum(Qty), parmId /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                            where inventTrans.ItemId                                    == inventSumDateTrans.ItemId
                              &&  inventTrans.DateFinancial                             >  perDate
                              &&  inventTrans.InventDimId                               == inventSumDateTrans.InventDimId
                              &&  inventTrans.PackingSlipReturned                       != 0;
        
            // All PostedQty -= Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, PostedQty, ParmId, Sign, CostAmountPosted, CostAmountAdjustment)
                    select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                        group by ItemId, InventDimId
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                        join sum(Qty), parmId /*scalar*/, minus /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                            where inventTrans.ItemId                                    == inventSumDateTrans.ItemId
                              &&  inventTrans.DateFinancial                             >  perDate
                              &&  inventTrans.InventDimId                               == inventSumDateTrans.InventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventTransPostingPhysical</Name>
				<Source><![CDATA[
    protected void selectInventTransPostingPhysical()
    {
        InventTrans         inventTrans;
        
        InventSumDateTrans  inventSumDateTrans;
        InventSumDateTrans  inventSumDateTransNew;
        
        if (userConnection)
        {
            inventTrans.setConnection(userConnection);
            inventSumDateTrans.setConnection(userConnection);
            inventSumDateTransNew.setConnection(userConnection);
        }
        
        if (isInventSumDateEngineDenormalizeInventSumDateTransToggleEnabled)
        {
            // Received + Purchased: ReceivedQty -= Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, #InventDimGroupAllFields, ReceivedQty, ParmId, Sign, CostAmountPosted, CostAmountAdjustment)
                    select forceplaceholders ItemId, InventDimId, #InventDimGroupAllFields from inventSumDateTrans
                        group by ItemId, InventDimId, #InventDimGroupAllFields
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                        join sum(Qty), parmId /*scalar*/, minus /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                            where inventTrans.ItemId                        == inventSumDateTrans.ItemId
                              &&  inventTrans.DatePhysical                  > perDate
                              &&  inventTrans.InventDimId                   == inventSumDateTrans.InventDimId
                              &&  inventTrans.StatusIssue                   == StatusIssue::None
                              && (inventTrans.StatusReceipt                 == StatusReceipt::Received
                              ||  inventTrans.StatusReceipt                 == StatusReceipt::Purchased);
        
            // Deducted + Sold: DeductedQty += Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, #InventDimGroupAllFields, DeductedQty, ParmId, CostAmountPosted, CostAmountAdjustment)
                    select forceplaceholders ItemId, InventDimId, #InventDimGroupAllFields from inventSumDateTrans
                        group by ItemId, InventDimId, #InventDimGroupAllFields
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                        join sum(Qty), parmId /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                            where inventTrans.ItemId                        == inventSumDateTrans.ItemId
                              &&  inventTrans.DatePhysical                  >  perDate
                              &&  inventTrans.InventDimId                   == inventSumDateTrans.InventDimId
                              &&  inventTrans.StatusReceipt                 == StatusReceipt::None
                              && (inventTrans.StatusIssue                   == StatusIssue::Deducted
                              ||  inventTrans.StatusIssue                   == StatusIssue::Sold);
        
            // Registered: RegisteredQty += Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, #InventDimGroupAllFields, RegisteredQty, ParmId, CostAmountPosted, CostAmountAdjustment)
                    select forceplaceholders ItemId, InventDimId, #InventDimGroupAllFields from inventSumDateTrans
                        group by ItemId, InventDimId, #InventDimGroupAllFields
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                        join sum(Qty), parmId /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                            where inventTrans.ItemId                        == inventSumDateTrans.ItemId
                              &&  inventTrans.DatePhysical                  >  perDate
                              &&  inventTrans.InventDimId                   == inventSumDateTrans.InventDimId
                              &&  inventTrans.DateInvent                    != dateNull()
                              &&  inventTrans.DateInvent                    <= perDate
                              &&  inventTrans.Qty                           > 0;
        
            // Registered: RegisteredQty -= Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, #InventDimGroupAllFields, RegisteredQty, ParmId, Sign, CostAmountPosted, CostAmountAdjustment)
                    select forceplaceholders ItemId, InventDimId, #InventDimGroupAllFields from inventSumDateTrans
                        group by ItemId, InventDimId, #InventDimGroupAllFields
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                        join sum(Qty), parmId /*scalar*/, minus /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                            where inventTrans.ItemId         == inventSumDateTrans.ItemId
                              &&  inventTrans.StatusReceipt  == StatusReceipt::Registered
                              &&  inventTrans.StatusIssue    == StatusIssue::None
                              &&  inventTrans.InventDimId    == inventSumDateTrans.InventDimId
                              &&  inventTrans.ValueOpen      == InventTransOpen::Yes
                              &&  inventTrans.DateInvent     >  perDate;
        
            // Picked: PickedQty -= Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, #InventDimGroupAllFields, PickedQty, ParmId, Sign, CostAmountPosted, CostAmountAdjustment)
                    select forceplaceholders ItemId, InventDimId, #InventDimGroupAllFields from inventSumDateTrans
                        group by ItemId, InventDimId, #InventDimGroupAllFields
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                        join sum(Qty), parmId /*scalar*/, minus /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                            where inventTrans.ItemId                        == inventSumDateTrans.ItemId
                              &&  inventTrans.DatePhysical                  >  perDate
                              &&  inventTrans.InventDimId                   == inventSumDateTrans.InventDimId
                              &&  inventTrans.DateInvent                    != dateNull()
                              &&  inventTrans.DateInvent                    <= perDate
                              &&  inventTrans.Qty                           <= 0;
        
            // Picked: PickedQty += Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, #InventDimGroupAllFields, PickedQty, ParmId, CostAmountPosted, CostAmountAdjustment)
                    select forceplaceholders ItemId, InventDimId, #InventDimGroupAllFields from inventSumDateTrans
                        group by ItemId, InventDimId, #InventDimGroupAllFields
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                        join sum(Qty), parmId /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                            where inventTrans.ItemId         == inventSumDateTrans.ItemId
                              &&  inventTrans.StatusReceipt  == StatusReceipt::None
                              &&  inventTrans.StatusIssue    == StatusIssue::Picked
                              &&  inventTrans.InventDimId    == inventSumDateTrans.InventDimId
                              &&  inventTrans.ValueOpen      == InventTransOpen::Yes
                              &&  inventTrans.DateInvent     >  perDate;
        }
        else
        {
            // Received + Purchased: ReceivedQty -= Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, ReceivedQty, ParmId, Sign, CostAmountPosted, CostAmountAdjustment)
                    select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                        group by ItemId, InventDimId
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                        join sum(Qty), parmId /*scalar*/, minus /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                            where inventTrans.ItemId                        == inventSumDateTrans.ItemId
                              &&  inventTrans.DatePhysical                  > perDate
                              &&  inventTrans.InventDimId                   == inventSumDateTrans.InventDimId
                              &&  inventTrans.StatusIssue                   == StatusIssue::None
                              && (inventTrans.StatusReceipt                 == StatusReceipt::Received
                              ||  inventTrans.StatusReceipt                 == StatusReceipt::Purchased);
        
            // Deducted + Sold: DeductedQty += Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, DeductedQty, ParmId, CostAmountPosted, CostAmountAdjustment)
                    select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                        group by ItemId, InventDimId
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                        join sum(Qty), parmId /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                            where inventTrans.ItemId                        == inventSumDateTrans.ItemId
                              &&  inventTrans.DatePhysical                  >  perDate
                              &&  inventTrans.InventDimId                   == inventSumDateTrans.InventDimId
                              &&  inventTrans.StatusReceipt                 == StatusReceipt::None
                              && (inventTrans.StatusIssue                   == StatusIssue::Deducted
                              ||  inventTrans.StatusIssue                   == StatusIssue::Sold);
        
            // Registered: RegisteredQty += Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, RegisteredQty, ParmId, CostAmountPosted, CostAmountAdjustment)
                    select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                        group by ItemId, InventDimId
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                        join sum(Qty), parmId /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                            where inventTrans.ItemId                        == inventSumDateTrans.ItemId
                              &&  inventTrans.DatePhysical                  >  perDate
                              &&  inventTrans.InventDimId                   == inventSumDateTrans.InventDimId
                              &&  inventTrans.DateInvent                    != dateNull()
                              &&  inventTrans.DateInvent                    <= perDate
                              &&  inventTrans.Qty                           > 0;
        
            // Registered: RegisteredQty -= Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, RegisteredQty, ParmId, Sign, CostAmountPosted, CostAmountAdjustment)
                    select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                        group by ItemId, InventDimId
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                        join sum(Qty), parmId /*scalar*/, minus /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                            where inventTrans.ItemId         == inventSumDateTrans.ItemId
                              &&  inventTrans.StatusReceipt  == StatusReceipt::Registered
                              &&  inventTrans.StatusIssue    == StatusIssue::None
                              &&  inventTrans.InventDimId    == inventSumDateTrans.InventDimId
                              &&  inventTrans.ValueOpen      == InventTransOpen::Yes
                              &&  inventTrans.DateInvent     >  perDate;
        
            // Picked: PickedQty -= Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, PickedQty, ParmId, Sign, CostAmountPosted, CostAmountAdjustment)
                    select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                        group by ItemId, InventDimId
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                        join sum(Qty), parmId /*scalar*/, minus /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                            where inventTrans.ItemId                        == inventSumDateTrans.ItemId
                              &&  inventTrans.DatePhysical                  >  perDate
                              &&  inventTrans.InventDimId                   == inventSumDateTrans.InventDimId
                              &&  inventTrans.DateInvent                    != dateNull()
                              &&  inventTrans.DateInvent                    <= perDate
                              &&  inventTrans.Qty                           <= 0;
        
            // Picked: PickedQty += Qty
            insert_recordset inventSumDateTransNew (ItemId, InventDimId, PickedQty, ParmId, CostAmountPosted, CostAmountAdjustment)
                    select forceplaceholders ItemId, InventDimId from inventSumDateTrans
                        group by ItemId, InventDimId
                        where inventSumDateTrans.ParmId    == parmId
                          &&  inventSumDateTrans.TransType == InventSumDateType::Base
                        join sum(Qty), parmId /*scalar*/, sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
                            where inventTrans.ItemId         == inventSumDateTrans.ItemId
                              &&  inventTrans.StatusReceipt  == StatusReceipt::None
                              &&  inventTrans.StatusIssue    == StatusIssue::Picked
                              &&  inventTrans.InventDimId    == inventSumDateTrans.InventDimId
                              &&  inventTrans.ValueOpen      == InventTransOpen::Yes
                              &&  inventTrans.DateInvent     >  perDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectWarehouseInventoryTransactions</Name>
				<Source><![CDATA[
    private void selectWarehouseInventoryTransactions()
    {
        if (!isWarehouseInventoryTransactionStackEnabled)
        {
            return;
        }

        RecordInsertList recordInsertList;
        if (!userConnection)
        {
            recordInsertList = new RecordInsertList(tableNum(InventSumDateTrans));
        }

        QueryRun qr = new QueryRun(this.buildWarehouseInventoryTransactionsQuery());
        while (qr.next())
        {
            WHSInventoryTransactionView inventoryTransaction = qr.get(tableNum(WHSInventoryTransactionView));
            InventDim inventDim = inventoryTransaction.convertToInventDim(true);
            
            InventSumDateTrans  inventSumDateTransNew;
            inventSumDateTransNew.InventDimId = inventDim.inventDimId;
            inventSumDateTransNew.ParmId = parmId;
            inventSumDateTransNew.ItemId = inventoryTransaction.ItemId;

            if (isInventSumDateEngineDenormalizeInventSumDateTransToggleEnabled)
            {
                inventSumDateTransNew.InventSiteId = inventoryTransaction.InventSiteId;
                inventSumDateTransNew.InventLocationId = inventoryTransaction.InventLocationId;
                inventSumDateTransNew.wmsLocationId = inventoryTransaction.WMSLocationId;
                inventSumDateTransNew.LicensePlateId = inventoryTransaction.LicensePlateId;
                inventSumDateTransNew.configId = inventoryTransaction.ConfigId;
                inventSumDateTransNew.inventColorId = inventoryTransaction.InventColorId;
                inventSumDateTransNew.inventSizeId = inventoryTransaction.InventSizeId;
                inventSumDateTransNew.inventStyleId = inventoryTransaction.InventStyleId;
                inventSumDateTransNew.inventVersionId = inventoryTransaction.InventVersionId;
                inventSumDateTransNew.inventGtdId_RU = inventoryTransaction.InventGtdId_RU;
                inventSumDateTransNew.inventProfileId_RU = inventoryTransaction.InventProfileId_RU;
                inventSumDateTransNew.inventSerialId = inventoryTransaction.InventSerialId;
                inventSumDateTransNew.inventBatchId = inventoryTransaction.InventBatchId;
                inventSumDateTransNew.inventOwnerId_RU = inventoryTransaction.InventOwnerId_RU;
                inventSumDateTransNew.InventStatusId = inventoryTransaction.InventStatusId;
                inventSumDateTransNew.inventDimension1 = inventoryTransaction.InventDimension1;
                inventSumDateTransNew.inventDimension2 = inventoryTransaction.InventDimension2;
                inventSumDateTransNew.inventDimension3 = inventoryTransaction.InventDimension3;
                inventSumDateTransNew.inventDimension4 = inventoryTransaction.InventDimension4;
                inventSumDateTransNew.inventDimension5 = inventoryTransaction.InventDimension5;
                inventSumDateTransNew.inventDimension6 = inventoryTransaction.InventDimension6;
                inventSumDateTransNew.inventDimension7 = inventoryTransaction.InventDimension7;
                inventSumDateTransNew.inventDimension8 = inventoryTransaction.InventDimension8;
                inventSumDateTransNew.inventDimension9 = inventoryTransaction.InventDimension9;
                inventSumDateTransNew.inventDimension10 = inventoryTransaction.InventDimension10;
                inventSumDateTransNew.inventDimension11 = inventoryTransaction.InventDimension11;
                inventSumDateTransNew.inventDimension12 = inventoryTransaction.InventDimension12;
            }

            inventSumDateTransNew.PostedQty = -inventoryTransaction.InventoryQuantity;

            if (!userConnection)
            {
                recordInsertList.add(inventSumDateTransNew);
            }
            else
            {
                inventSumDateTransNew.setConnection(userConnection);
                inventSumDateTransNew.insert();
            }
        }

        if (!userConnection)
        {
            recordInsertList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWarehouseInventoryTransactionsQuery</Name>
				<Source><![CDATA[
    private Query buildWarehouseInventoryTransactionsQuery()
    {
        QueryBuildDataSource reportDataSource = query.dataSourceTable(tableNum(InventSumDateTransReport));
        Query q = new Query();
        QueryBuildDataSource qbds = q.addDataSource(tableNum(WHSInventoryTransactionView));

        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, ItemId));

        #InventDimDevelop

        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, InventSiteId));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, InventLocationId));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, WMSLocationId));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, LicensePlateId));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, configId));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, InventColorId));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, inventSizeId));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, inventStyleId));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, inventVersionId));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, inventGtdId_RU));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, inventProfileId_RU));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, inventSerialId));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, InventBatchId));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, InventOwnerId_RU));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, InventStatusId));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, inventDimension1));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, InventDimension2));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, InventDimension3));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, InventDimension4));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, InventDimension5));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, InventDimension6));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, InventDimension7));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, inventDimension8));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, InventDimension9));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, InventDimension10));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, InventDimension11));
        qbds.addGroupByAndSelectionField(fieldNum(WHSInventoryTransactionView, InventDimension12));
        qbds.addSelectionField(fieldNum(WHSInventoryTransactionView, InventoryQuantity), SelectionField::Sum);
        q.addHavingFilter(qbds, fieldStr(WHSInventoryTransactionView, InventoryQuantity), AggregateFunction::Sum).value(SysQuery::valueNot(0.0));

        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, ItemId), qbds, fieldNum(WHSInventoryTransactionView, ItemId));

        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, InventSiteId), qbds, fieldNum(WHSInventoryTransactionView, InventSiteId));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, InventLocationId), qbds, fieldNum(WHSInventoryTransactionView, InventLocationId));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, WMSLocationId), qbds, fieldNum(WHSInventoryTransactionView, WMSLocationId));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, LicensePlateId), qbds, fieldNum(WHSInventoryTransactionView, LicensePlateId));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, configId), qbds, fieldNum(WHSInventoryTransactionView, configId));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, InventColorId), qbds, fieldNum(WHSInventoryTransactionView, InventColorId));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, inventSizeId), qbds, fieldNum(WHSInventoryTransactionView, inventSizeId));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, inventStyleId), qbds, fieldNum(WHSInventoryTransactionView, inventStyleId));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, inventVersionId), qbds, fieldNum(WHSInventoryTransactionView, inventVersionId));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, inventGtdId_RU), qbds, fieldNum(WHSInventoryTransactionView, inventGtdId_RU));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, inventProfileId_RU), qbds, fieldNum(WHSInventoryTransactionView, inventProfileId_RU));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, inventSerialId), qbds, fieldNum(WHSInventoryTransactionView, inventSerialId));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, InventBatchId), qbds, fieldNum(WHSInventoryTransactionView, InventBatchId));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, InventOwnerId_RU), qbds, fieldNum(WHSInventoryTransactionView, InventOwnerId_RU));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, InventStatusId), qbds, fieldNum(WHSInventoryTransactionView, InventStatusId));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, inventDimension1), qbds, fieldNum(WHSInventoryTransactionView, inventDimension1));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, InventDimension2), qbds, fieldNum(WHSInventoryTransactionView, InventDimension2));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, InventDimension3), qbds, fieldNum(WHSInventoryTransactionView, InventDimension3));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, InventDimension4), qbds, fieldNum(WHSInventoryTransactionView, InventDimension4));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, InventDimension5), qbds, fieldNum(WHSInventoryTransactionView, InventDimension5));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, InventDimension6), qbds, fieldNum(WHSInventoryTransactionView, InventDimension6));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, InventDimension7), qbds, fieldNum(WHSInventoryTransactionView, InventDimension7));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, inventDimension8), qbds, fieldNum(WHSInventoryTransactionView, inventDimension8));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, InventDimension9), qbds, fieldNum(WHSInventoryTransactionView, InventDimension9));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, InventDimension10), qbds, fieldNum(WHSInventoryTransactionView, InventDimension10));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, InventDimension11), qbds, fieldNum(WHSInventoryTransactionView, InventDimension11));
        this.copyFieldRanges(reportDataSource, fieldNum(InventSumDateTransReport, InventDimension12), qbds, fieldNum(WHSInventoryTransactionView, InventDimension12));

        qbds.addRange(fieldNum(WHSInventoryTransactionView, TransDate)).value(queryRange(perDate, dateMax()));
        qbds.addRange(fieldNum(WHSInventoryTransactionView, Type)).value(queryValue(WHSInventoryTransactionTypeEnum::RegisteredReceipt));
        qbds.addRange(fieldNum(WHSInventoryTransactionView, Type)).value(queryValue(WHSInventoryTransactionTypeEnum::RegisteredIssue));

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFieldRanges</Name>
				<Source><![CDATA[
    private void copyFieldRanges(QueryBuildDataSource _fromDataSource, FieldId _fromFieldId, QueryBuildDataSource _toDataSource, FieldId _toFieldId)
    {
        int rangeCount = 1;
        QueryBuildRange fromDataSourceRange = _fromDataSource.findRange(_fromFieldId, rangeCount);
        while (fromDataSourceRange)
        {
            _toDataSource.addRange(_toFieldId).value(fromDataSourceRange.value());
            ++rangeCount;
            fromDataSourceRange = _fromDataSource.findRange(_fromFieldId, rangeCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSign</Name>
				<Source><![CDATA[
    protected void updateSign()
    {
        InventSumDateTrans          inventSumDateTrans;

        if (userConnection)
        {
            inventSumDateTrans.setConnection(userConnection);
        }

        update_recordset inventSumDateTrans
            setting ReceivedQty                     = -1 * inventSumDateTrans.ReceivedQty,
                    PostedQty                       = -1 * inventSumDateTrans.PostedQty,
                    DeductedQty                     = -1 * inventSumDateTrans.DeductedQty,
                    RegisteredQty                   = -1 * inventSumDateTrans.RegisteredQty,
                    PickedQty                       = -1 * inventSumDateTrans.PickedQty,
                    CostAmountPosted                = -1 * inventSumDateTrans.CostAmountPosted,
                    CostAmountAdjustment            = -1 * inventSumDateTrans.CostAmountAdjustment
            where inventSumDateTrans.ParmId == parmId
              &&  inventSumDateTrans.Sign   < 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventSumDateEngine construct()
    {
        return new InventSumDateEngine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>InventSumDateEngine</c> instance and initializes it with value for report.
    /// </summary>
    /// <param name="_perDate">
    /// The date to print the report for.
    /// </param>
    /// <param name="_inventDimParm">
    /// The set of inventory dimensions to print the report for.
    /// </param>
    /// <param name="_deleteZeroLines">
    /// true if lines without onhand should be removed.
    /// </param>
    /// <param name="_query">
    /// The <c>InventDimPhys</c> query to filter and sort the report data by item and inventory dimension values.
    /// </param>
    /// <returns>
    /// <c>InventSumDateEngine</c> instance
    /// </returns>
    public static InventSumDateEngine newParameters(
        TransDate       _perDate,
        InventDimParm   _inventDimParm,
        NoYes           _deleteZeroLines,
        Query           _query = new Query(queryStr(InventDimPhys)))
    {
        InventSumDateEngine inventSumDateEngine = InventSumDateEngine::construct();

        inventSumDateEngine.parmPerDate(_perDate);
        inventSumDateEngine.parmInventDimParm(_inventDimParm);
        inventSumDateEngine.parmDeleteZeroLines(_deleteZeroLines);
        inventSumDateEngine.parmQuery(_query);

        return inventSumDateEngine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>