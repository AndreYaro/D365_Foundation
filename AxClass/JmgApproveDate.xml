<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgApproveDate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgApproveDate</c> class approves the registrations for a complete day for workers that
///    belong to a specified approval group.
/// </summary>
public class JmgApproveDate extends RunBaseBatch implements BatchRetryable
{
    JmgGroupApproveId   jmgGroupApproveId;
    JmgDate             profileFromDate;
    JmgDate             profileToDate;

    private DialogField dfJmgGroupApproveId;
    private DialogField dfProfileFromDate;
    DialogField         dfProfileToDate;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        profileFromDate,
        profileToDate,
        jmgGroupApproveId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns true.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last choice that is stored in the last value table.
    /// </summary>
    /// <remarks>
    ///    If no record can be found or the <c>unpack</c> method returns false, the <c>initParmDefault</c>
    ///    method will be called.This method should not typically be overridden.
    /// </remarks>
    void getLast()
    {
        JmgDate tmpFromDate = profileFromDate;
        JmgDate tmpToDate = profileToDate;
        JmgGroupApproveId tmpApproveId = jmgGroupApproveId;

        super();

        if (tmpFromDate)
        {
            profileFromDate = tmpFromDate;
        }
        if (tmpToDate)
        {
            profileToDate = tmpToDate;
        }
        if (tmpApproveId)
        {
            jmgGroupApproveId = tmpApproveId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        JmgStampJournalTable    jmgStampJournalTable;
        Counter                 cnt;
        Counter                 errors;
        Counter                 approved;

        #AviFiles

        using(var activityContext = JmgInstrumentationLogger::createLogger(classStr(JmgApproveDate)).calcApprove().approveAll())
        {
            if(this.isInBatch())
            {
                this.setProfileDateInBatchRun();
            }

            try
            {
                JmgStampJournalTable::makeNonExistentLines(profileFromDate, profileToDate);

                this.progressInit(JmgApproveDate::description(),any2int(this.numberOfStampJournalTableRecordsToProcess()), #AviUpdate);

                ttsbegin;

                while select forupdate jmgStampJournalTable
                where jmgStampJournalTable.ProfileDate    >= profileFromDate &&
                      jmgStampJournalTable.ProfileDate    <= profileToDate &&
                      jmgStampJournalTable.ApproveGroupId == jmgGroupApproveId &&
                      jmgStampJournalTable.Approved       == NoYes::No
                {
                    progress.setText(HcmWorker::worker2Name(jmgStampJournalTable.Worker));
                    JmgStampJournalApprove::newFromJournalTable(jmgStampJournalTable).approve();
                    if (jmgStampJournalTable.Approved == NoYes::Yes)
                    {
                        approved++;
                    }
                    else
                    {
                        errors++;
                    }
                    cnt++;
                    progress.setCount(cnt);
                }

                ttscommit;

                info(strfmt("@SYS38977",approved));
                info(strfmt("@SYS38976",errors));
            }

            catch (Exception::Deadlock)
            {
                retry;
            }

            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProfileDateInBatchRun</Name>
				<Source><![CDATA[
    private void setProfileDateInBatchRun()
    {
        #TimeConstants

        date today = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        if (DateTimeUtil::getDifference(today, profileToDate) >= #secondsPerDay)
        {
            profileToDate = today;
        }

        // Do not allow to run Approve All for more than 1 month
        date potentialFromDate = DateTimeUtil::date(DateTimeUtil::addMonths(profileToDate, -1));
        profileFromDate = max(profileFromDate, potentialFromDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfStampJournalTableRecordsToProcess</Name>
				<Source><![CDATA[
    private int numberOfStampJournalTableRecordsToProcess()
    {
        return (select count(RecId) from jmgStampJournalTable
                where jmgStampJournalTable.ProfileDate     >= profileFromDate
                    && jmgStampJournalTable.ProfileDate    <= profileToDate
                    && jmgStampJournalTable.ApproveGroupId == jmgGroupApproveId
                    && jmgStampJournalTable.Approved       == NoYes::No).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    ///    return false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setApproveGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the approval group for which approval is run.
    /// </summary>
    /// <param name="jmgGroupApproveIdIn">
    /// The approval group ID to run approval on.
    /// </param>
    void setApproveGroup(JmgGroupApproveId jmgGroupApproveIdIn)
    {
        jmgGroupApproveId = jmgGroupApproveIdIn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProfileDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the profile date for which approval is run.
    /// </summary>
    /// <param name="_profileDate">
    /// The profile date to set.
    /// </param>
    void setProfileDate(JmgDate   _profileDate)
    {
        profileFromDate = _profileDate;
        profileToDate = _profileDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        #LOCALMACRO.List
            profileFromDate
        #ENDMACRO

        Integer     version      = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            case 1  :
                [version,#List] = packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS38485";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        JmgApproveDate          jmgApproveDate;
        JmgStampJournalTable    jmgStampJournalTableCurRec;
        JmgStampJournalTable    jmgStampJournalTable;
        if (!args || args.dataset() != tablenum(JmgStampJournalTable))
        {
            throw error(strfmt("@SYS25516",funcname()));
        }

        jmgStampJournalTable = args.record();

        jmgApproveDate = new JmgApproveDate();

        jmgApproveDate.setProfileDate(jmgStampJournalTable.ProfileDate);
        jmgApproveDate.setApproveGroup(jmgStampJournalTable.ApproveGroupId);

        if (args.dataset() != tablenum(JmgStampJournalTable))
        {
            throw error(strfmt("@SYS25516",funcname()));
        }

        if (jmgApproveDate.prompt())
        {
            jmgApproveDate.runOperation();
        }

        if (FormDataUtil::getFormDataSource(jmgStampJournalTable))
        {
            select firstonly jmgStampJournalTableCurRec
                where jmgStampJournalTableCurRec.RecId == jmgStampJournalTable.RecId;

            FormDataUtil::getFormDataSource(jmgStampJournalTable).research();
            FormDataUtil::getFormDataSource(jmgStampJournalTable).findRecord(jmgStampJournalTableCurRec);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method adds the FromDate, ToDate and Approval Group fields to the dialog.
    /// </summary>
    /// <returns>
    /// An object of the <c>Dialog</c> Class.
    /// </returns>
    public Object dialog()
    {
        Dialog ret = super();

        dfProfileFromDate   = ret.addField(extendedTypeStr(JmgDate), "@SYS80661", "@SCMManufacturingExecution:JmgApproveAllDateDialogHint");
        dfProfileToDate   = ret.addField(extendedTypeStr(JmgDate), "@SYS14656", "@SCMManufacturingExecution:JmgApproveAllDateDialogHint");
        dfJmgGroupApproveId = ret.addField(extendedtypestr(JmgGroupApproveId));

        dfJmgGroupApproveId.value(jmgGroupApproveId);
        dfProfileFromDate.value(profileFromDate);
        dfProfileToDate.value(profileToDate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the dialog values to the internal variables after the dialog is closed.
    /// </summary>
    /// <returns>
    /// True if user input is successfully validated; otherwise, false.
    /// </returns>
    /// <remarks>
    /// It checked that the profileToDate is greater than the profileFromDate.
    /// </remarks>
    public boolean getFromDialog()
    {
        boolean ret = super();

        jmgGroupApproveId = dfJmgGroupApproveId.value();
        profileFromDate   = dfProfileFromDate.value();
        profileToDate     = dfProfileToDate.value();

        if (profileToDate < profileFromDate)
        {
            ret = checkFailed("@SYP4881865");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>