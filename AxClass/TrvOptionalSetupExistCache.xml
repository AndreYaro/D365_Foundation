<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvOptionalSetupExistCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TrvOptionalSetupExistCache</c> class is used to cache the existence values for the optional
/// setup tables.
/// </summary>
/// <remarks>
/// The cache occurs if any entries exist in the Merchants, Destinations, Purpose and Line Purpose
/// tables.
/// </remarks>
class TrvOptionalSetupExistCache
{
    #define.CacheScope('TrvExpense')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>anyEntriesExistFor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether any entries exist in the optional setup tables.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID of the table.
    /// </param>
    /// <returns>
    /// true if any records exist in the optional setup table; otherwise, false.
    /// </returns>
    public static boolean anyEntriesExistFor(tableId _tableId)
    {
        SysGlobalObjectCache    sgoc = classFactory.globalObjectCache();
        str                     cacheKey = TrvOptionalSetupExistCache::getCacheKey(_tableId);
        container               cacheResult;
        boolean                 anyEntriesExist;

        cacheResult = sgoc.find(#CacheScope, [cacheKey]);
        if (cacheResult != conNull())
        {
            [anyEntriesExist] = cacheResult;
        }
        else
        {
            anyEntriesExist = TrvOptionalSetupExistCache::computeValue(_tableId);
            sgoc.insert(#CacheScope, [cacheKey], [anyEntriesExist]);
        }

        return anyEntriesExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the value to be cached.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID of the table.
    /// </param>
    /// <returns>
    /// true if any records exist in the optional setup table; otherwise, false.
    /// </returns>
    public static boolean computeValue(tableId _tableId)
    {
        SysDictTable    sysDictTable;
        Common          common;

        sysDictTable = new SysDictTable(_tableId);
        if (sysDictTable)
        {
            common = sysDictTable.makeRecord();
            select firstOnly RecId from common;
        }

        return (common.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>expireCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expires the cache value for the specified table.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID of a table.
    /// </param>
    public static void expireCache(tableId _tableId)
    {
        SysGlobalObjectCache    sgoc = classFactory.globalObjectCache();
        str                     cacheKey = TrvOptionalSetupExistCache::getCacheKey(_tableId);

        sgoc.remove(#CacheScope, [cacheKey]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the cache key for the specified table.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID of a table.
    /// </param>
    /// <returns>
    /// The cache key for the specified table.
    /// </returns>
    public static str getCacheKey(tableId _tableId)
    {
        return strFmt("%1_%2", _tableId, curext());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>