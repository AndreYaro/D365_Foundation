<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanCurrencyExchangeHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanCurrencyExchangeHelper</c> class is a helper class for currency conversion of budget plans transaction amount.
/// </summary>
class BudgetPlanCurrencyExchangeHelper
{
    CurrencyCode                    accountingCurrency, reportingCurrency;
    CurrencyExchangeHelper          currencyExchangeHelper;
    Map                             accountingCurrencyMultiplierMap = new Map(Types::Container, Types::Real);
    Map                             reportingCurrencyMultiplierMap = new Map(Types::Container, Types::Real);
    boolean                         isCurrencyExchangeHelperSetup = false;
    BudgetPlanCurrencyConversionTmp budgetPlanCurrencyConversionTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAccountingCurrencyAmountMultiplier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the value of the accounting currency amount multiplier.
    /// </summary>
    /// <param name = "_transactionCurrencyAmount">
    /// The value of the TransactionCurrencyAmount used in the calculation.
    /// </param>
    /// <param name = "_transactionCurrency">
    /// The value of the TransactionCurrencyCode used in the calculation.
    /// </param>
    /// <param name = "_effectiveDate">
    /// The value of the EffectiveDate used in the calculation.
    /// </param>
    /// <returns>
    /// The value of Accounting currency amount multiplier.
    /// </returns>
    public ExchRate calculateAccountingCurrencyAmountMultiplier(
        BudgetPlanCurrencyAmount    _transactionCurrencyAmount,
        CurrencyCode                _transactionCurrency,
        BudgetPlanLineEffectiveDate _effectiveDate)
    {
        BudgetPlanAccountingCurrencyAmount accountingCurrencyAmount;
        ExchRate                           accountingCurrencyMultiplierLocal;

        currencyExchangeHelper.parmExchangeDate(_effectiveDate);

        if (!accountingCurrencyMultiplierMap.exists([_effectiveDate, _transactionCurrency]))
        {
            if (_transactionCurrencyAmount && _transactionCurrency != accountingCurrency)
            {
                accountingCurrencyAmount = currencyExchangeHelper.calculateCurrencyToCurrency(
                                            _transactionCurrency,
                                            accountingCurrency,
                                            _transactionCurrencyAmount,
                                            true);

                accountingCurrencyMultiplierLocal = accountingCurrencyAmount/_transactionCurrencyAmount;

                accountingCurrencyMultiplierMap.insert([_effectiveDate, _transactionCurrency], accountingCurrencyMultiplierLocal);
            }
            else
            {
                accountingCurrencyMultiplierLocal = 1;
            }
        }
        else
        {
            accountingCurrencyMultiplierLocal = accountingCurrencyMultiplierMap.lookup([_effectiveDate, _transactionCurrency]);
        }

        return accountingCurrencyMultiplierLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateReportingCurrencyAmountMultiplier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the value of the reporting currency amount multiplier.
    /// </summary>
    /// <param name = "_transactionCurrencyAmount">
    /// The value of the transaction currency amount used in the calculation.
    /// </param>
    /// <param name = "_transactionCurrency">
    /// The value of the transaction currency code used in the calculation.
    /// </param>
    /// <param name = "_effectiveDate">
    /// The value of the effective date used in the calculation.
    /// </param>
    /// <returns>
    /// The value of Accounting currency amount multiplier.
    /// </returns>
    public ExchRate calculateReportingCurrencyAmountMultiplier(
        BudgetPlanCurrencyAmount    _transactionCurrencyAmount,
        CurrencyCode                _transactionCurrency,
        BudgetPlanLineEffectiveDate _effectiveDate)
    {
        BudgetPlanReportingCurrencyAmount reportingCurrencyAmount;
        ExchRate reportingCurrencyMultiplierLocal;

        currencyExchangeHelper.parmExchangeDate(_effectiveDate);

        if (!reportingCurrencyMultiplierMap.exists([_effectiveDate, _transactionCurrency]))
        {
            if (_transactionCurrencyAmount && _transactionCurrency != reportingCurrency)
            {
                reportingCurrencyAmount = currencyExchangeHelper.calculateCurrencyToCurrency(
                                            _transactionCurrency,
                                            reportingCurrency,
                                            _transactionCurrencyAmount,
                                            true);

                reportingCurrencyMultiplierLocal = reportingCurrencyAmount/_transactionCurrencyAmount;

                reportingCurrencyMultiplierMap.insert([_effectiveDate, _transactionCurrency], reportingCurrencyMultiplierLocal);
            }
            else
            {
                reportingCurrencyMultiplierLocal = 1;
            }
        }
        else
        {
            reportingCurrencyMultiplierLocal = reportingCurrencyMultiplierMap.lookup([_effectiveDate, _transactionCurrency]);
        }

        return reportingCurrencyMultiplierLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCurrencyExchangeHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>CurrencyExchangeHelper</c> class for the currency calculations.
    /// </summary>
    public void initializeCurrencyExchangeHelper(LedgerRecId _ledgerRecId)
    {
        if (!isCurrencyExchangeHelperSetup)
        {
            currencyExchangeHelper = CurrencyExchangeHelper::newLedger(_ledgerRecId);
            currencyExchangeHelper.parmExchangeRateTypeRecId(Ledger::budgetExchangeRateTypeByLedger(_ledgerRecId));
            currencyExchangeHelper.parmErrorType(AifErrorType::Fault);

            accountingCurrency = Ledger::accountingCurrencyByLedger(_ledgerRecId);
            reportingCurrency  = Ledger::reportingCurrencyByLedger(_ledgerRecId);

            isCurrencyExchangeHelperSetup = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateReportingCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>ReportingCurrencyAmount</c> field value on <c>BudgetPlanLine</c> record passed in.
    /// </summary>
    /// <param name = "_budgetPlanLine">
    /// The buffer of the <c>BudgetPlanLine</c> table.
    /// </param>
    public BudgetPlanReportingCurrencyAmount calculateReportingCurrencyAmount(BudgetPlanCurrencyAmount _transactionCurrencyAmount, BudgetPlanCurrencyCode _transactionCurrencyCode, BudgetPlanLineEffectiveDate _effectiveDate)
    {
        ExchRate                          reportingCurrencyMultiplierLocal;
        BudgetPlanReportingCurrencyAmount reportingCurrencyAmount;

        reportingCurrencyMultiplierLocal = this.calculateReportingCurrencyAmountMultiplier(_transactionCurrencyAmount, _transactionCurrencyCode, _effectiveDate);

        if (reportingCurrencyMultiplierLocal != 1)
        {
            reportingCurrencyAmount = CurrencyExchange::round(_transactionCurrencyAmount * reportingCurrencyMultiplierLocal, reportingCurrency);
        }
        else
        {
            reportingCurrencyAmount = _transactionCurrencyAmount;
        }

        return reportingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAccountingCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>AccountingCurrencyAmount</c> field value on <c>BudgetPlanLine</c> record passed in.
    /// </summary>
    /// <param name = "_budgetPlanLine">
    /// The buffer of the <c>BudgetPlanLine</c> table.
    /// </param>
    public BudgetPlanAccountingCurrencyAmount calculateAccountingCurrencyAmount(BudgetPlanCurrencyAmount _transactionCurrencyAmount, BudgetPlanCurrencyCode _transactionCurrencyCode, BudgetPlanLineEffectiveDate _effectiveDate)
    {
        ExchRate                           accountingCurrencyMultiplierLocal;
        BudgetPlanAccountingCurrencyAmount accountingCurrencyAmount;

        accountingCurrencyMultiplierLocal = this.calculateAccountingCurrencyAmountMultiplier(_transactionCurrencyAmount, _transactionCurrencyCode, _effectiveDate);

        if (accountingCurrencyMultiplierLocal != 1)
        {
            accountingCurrencyAmount = CurrencyExchange::round(_transactionCurrencyAmount * accountingCurrencyMultiplierLocal, reportingCurrency);
        }
        else
        {
            accountingCurrencyAmount = _transactionCurrencyAmount;
        }

        return accountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanCurrencyExchangeHelper construct()
    {
        BudgetPlanCurrencyExchangeHelper budgetPlanCurrencyExchangeHelper = new BudgetPlanCurrencyExchangeHelper();

        return budgetPlanCurrencyExchangeHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTransactionCurrencyAmountMultiplier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value for the transaction currency amount multiplier for the initialization of the target <c>BudgetPlanLine</c> record.
    /// </summary>
    /// <param name = "_sourceTransactionCurrencyAmount">
    /// The value of the source currency amount.
    /// </param>
    /// <param name = "_sourceBudgetPlanCurrencyCode">
    /// The value of the source currency code used in the calculation.
    /// </param>
    /// <param name = "_targetBudgetPlanCurrencyCode">
    /// The value of the target currency code used in the calculation.
    /// </param>
    /// <param name = "_effectiveDate">
    /// The value of the source budget plan line <c>EffectiveDate</c> field.
    /// </param>
    public ExchRate calculateTransactionCurrencyAmountMultiplier(
        BudgetPlanCurrencyAmount    _sourceTransactionCurrencyAmount,
        BudgetPlanCurrencyCode      _sourceBudgetPlanCurrencyCode,
        BudgetPlanCurrencyCode      _targetBudgetPlanCurrencyCode,
        BudgetPlanLineEffectiveDate _effectiveDate)
    {
        ExchRate                 transactionAmountRateMultiplier = 1;
        BudgetPlanCurrencyAmount targetTransactionCurrencyAmount;

        if (_sourceTransactionCurrencyAmount && _sourceBudgetPlanCurrencyCode != _targetBudgetPlanCurrencyCode)
        {
            select RecId, RateMultiplier from budgetPlanCurrencyConversionTmp
                where budgetPlanCurrencyConversionTmp.EffectiveDate == _effectiveDate
                      && budgetPlanCurrencyConversionTmp.SourceCurrencyCode == _sourceBudgetPlanCurrencyCode
                      && budgetPlanCurrencyConversionTmp.TargetCurrencyCode == _targetBudgetPlanCurrencyCode;

            if (budgetPlanCurrencyConversionTmp.RecId)
            {
                transactionAmountRateMultiplier = budgetPlanCurrencyConversionTmp.RateMultiplier;
            }
            else
            {
                currencyExchangeHelper.parmExchangeDate(_effectiveDate);

                targetTransactionCurrencyAmount = currencyExchangeHelper.calculateCurrencyToCurrency(
                                                    _sourceBudgetPlanCurrencyCode,
                                                    _targetBudgetPlanCurrencyCode,
                                                    _sourceTransactionCurrencyAmount,
                                                    true);

                transactionAmountRateMultiplier = targetTransactionCurrencyAmount/_sourceTransactionCurrencyAmount;

                this.insertIntoBudgetPlanCurrencyConversionTmp(_effectiveDate, transactionAmountRateMultiplier, _sourceBudgetPlanCurrencyCode, _targetBudgetPlanCurrencyCode);
            }
        }

        return transactionAmountRateMultiplier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the value of the transaction currency amount using the source and target currencies.
    /// </summary>
    /// <param name = "_sourceCurrencyAmount">
    /// The value of the source currency amount.
    /// </param>
    /// <param name = "_sourceBudgetPlanCurrencyCode">
    /// The value of the source currency code used in the calculation.
    /// </param>
    /// <param name = "_targetBudgetPlanCurrencyCode">
    /// The value of the target currency code used in the calculation.
    /// </param>
    /// <param name = "_effectiveDate">
    /// The value of the effective Date.
    /// </param>
    /// <returns>
    /// The calculated transaction currency amount.
	/// </returns>
    public BudgetPlanAccountingCurrencyAmount calculateTransactionCurrencyAmount(
        BudgetPlanCurrencyAmount    _sourceCurrencyAmount,
        BudgetPlanCurrencyCode      _sourceBudgetPlanCurrencyCode,
        BudgetPlanCurrencyCode      _targetBudgetPlanCurrencyCode,
        BudgetPlanLineEffectiveDate _effectiveDate)
    {
        ExchRate                           transactionCurrencyMultiplierLocal;
        BudgetPlanAccountingCurrencyAmount transactionCurrencyAmount;

        transactionCurrencyMultiplierLocal = this.calculateTransactionCurrencyAmountMultiplier(
                                    _sourceCurrencyAmount,
                                    _sourceBudgetPlanCurrencyCode,
                                    _targetBudgetPlanCurrencyCode,
                                    _effectiveDate);

        if (transactionCurrencyMultiplierLocal != 1)
        {
            transactionCurrencyAmount = CurrencyExchange::round(_sourceCurrencyAmount * transactionCurrencyMultiplierLocal, _targetBudgetPlanCurrencyCode);
        }
        else
        {
            transactionCurrencyAmount = _sourceCurrencyAmount;
        }

        return transactionCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoBudgetPlanCurrencyConversionTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a new currency conversion line in the <c>BudgetPlanCurrencyConversionTmp</c> table.
    /// </summary>
    /// <param name = "_effectiveDate">
    /// The value of the effective date.
    /// </param>
    /// <param name = "_transactionAmountRateMultiplier">
    /// The value of the amount rate multiplier between the source and target currencies.
    /// </param>
    /// <param name = "_sourceBudgetPlanCurrencyCode">
    /// The value of the source currency code used in the calculation.
    /// </param>
    /// <param name = "_targetBudgetPlanCurrencyCode">
    /// The value of the target currency code used in the calculation.
    /// </param>
    protected void insertIntoBudgetPlanCurrencyConversionTmp(
        BudgetPlanLineEffectiveDate _effectiveDate,
        ExchRate                    _transactionAmountRateMultiplier,
        BudgetPlanCurrencyCode      _sourceBudgetPlanCurrencyCode,
        BudgetPlanCurrencyCode      _targetBudgetPlanCurrencyCode)
    {
        budgetPlanCurrencyConversionTmp.clear();
        budgetPlanCurrencyConversionTmp.SourceCurrencyCode = _sourceBudgetPlanCurrencyCode;
        budgetPlanCurrencyConversionTmp.TargetCurrencyCode = _targetBudgetPlanCurrencyCode;
        budgetPlanCurrencyConversionTmp.EffectiveDate      = _effectiveDate;
        budgetPlanCurrencyConversionTmp.RateMultiplier     = _transactionAmountRateMultiplier;
        budgetPlanCurrencyConversionTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>