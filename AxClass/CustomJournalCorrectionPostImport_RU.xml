<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomJournalCorrectionPostImport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustomJournalCorrectionPostImport_RU extends CustomJournalGTDPostImport_RU
{
    CustomCorrectionTable_RU    customCorrectionTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFactureJour</Name>
				<Source><![CDATA[
    public void createFactureJour()
    {
        CustomJournalGTDFactureCreate_RU customJournalGTDFactureCreate;

        customJournalGTDFactureCreate = CustomJournalGTDFactureCreate_RU::construct(this.customDocument());
        customJournalGTDFactureCreate.parmJournalTable(customCorrectionTable);
        customJournalGTDFactureCreate.parmLedgerVoucher(ledgerVoucher.lastVoucher());
        customJournalGTDFactureCreate.parmFactureDate(customJournalTable.gtdDate);
        customJournalGTDFactureCreate.runOperation();
        factureId = customJournalGTDFactureCreate.factureId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>customDocument</Name>
				<Source><![CDATA[
    CustomDocument_RU customDocument()
    {
        return CustomDocument_RU::Correction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog dialog = new DialogRunbase("@GLS103583", this);

        dialog.addText(strfmt("@GLS115356", customCorrectionTable.CorrectionId,
                                           customCorrectionTable.CorrectionDate,
                                           customJournalTable.InventGTDId));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoOK</Name>
				<Source><![CDATA[
    void infoOK()
    {
        info(strfmt("@GLS115429", customCorrectionTable.CorrectionId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTable</Name>
				<Source><![CDATA[
    Common journalTable()
    {
        return customCorrectionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingTypeCharge</Name>
				<Source><![CDATA[
    LedgerPostingType ledgerPostingTypeCharge()
    {
        return LedgerPostingType::PurchFee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingTypeDuty</Name>
				<Source><![CDATA[
    LedgerPostingType ledgerPostingTypeDuty()
    {
        return LedgerPostingType::PurchFee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    Common parmJournalTable(Common _journalTable = customCorrectionTable)
    {
        customCorrectionTable = _journalTable;
        storno                = customCorrectionTable.Storno;

        if (! customJournalTable)
        {
            customJournalTable = CustomJournalTable_RU::find(customCorrectionTable.JournalId);
        }
        return customCorrectionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDutyCharge</Name>
				<Source><![CDATA[
    protected void postDutyCharge()
    {
        CustomJournalTrans_RU               customJournalTrans;
        CustomCorrectionTrans_RU            customCorrectionTrans;
        CustomAmount_RU                     dutyAmount;
        CustomJournalTotalAmounts_RU        customJournalTotalAmounts;
        CustomCorrectionTotalAmounts_RU     customCorrectionTotalAmounts;
        CustomCorrectionTotalAmounts_RU     customCorrectionTotalAmountsAll;
        CustomJournalTransOnDateAmounts_RU  customJournalTransOnDateAmounts;
        Map                                 chargeAdminAllocateMap;
        Map                                 chargeEscortAllocateMap;
        Map                                 chargeStorageAllocateMap;
        MarkupTable                         markupTableDuty;
        MarkupTable                         markupTableChargeAdmin;
        MarkupTable                         markupTableChargeEscort;
        MarkupTable                         markupTableChargeStorage;

        LedgerVoucherTransObject            ledgerVoucherTransObject;
        LedgerDimensionDefaultAccount       ledgerDefaultAccount;
        LedgerDimensionAccount              ledgerDimension;
        CurrencyExchangeHelper              exchangeRateHelper;

        boolean                             isErrorFullCostStornoCorrection = false;

        void    reverseAmountsMap(Map _map)
        {
            MapEnumerator   me = _map.getEnumerator();
            Amount          amount;

            while (me.moveNext())
            {
                amount = me.currentValue();
                _map.insert(me.currentKey(), -amount);
            }
        }

        markupTableDuty = MarkupTable::findByCustomPaymType_RU(CustomPaymType_RU::Duty);

        if (! markupTableDuty)
        {
            this.checkExistMarkup(null, markupTableDuty, CustomPaymType_RU::Duty);
        }

        markupTableChargeAdmin          = MarkupTable::findByCustomPaymType_RU(CustomPaymType_RU::ChargeAdmin);
        customCorrectionTotalAmounts    = CustomCorrectionTotalAmounts_RU::createFromCorrection(customCorrectionTable);

        if (customCorrectionTable.CostCorrection)
        {
            chargeAdminAllocateMap      = this.prepareChargeAllocMap(customCorrectionTotalAmounts.correctionAmount(CustomTotalType_RU::ChargeAdmin));
            this.checkExistMarkup(chargeAdminAllocateMap, markupTableChargeAdmin, CustomPaymType_RU::ChargeAdmin);

            if (customCorrectionTable.CorrectionReason == CustomCorrectionReason_RU::Error)
            {
                customJournalTotalAmounts       = CustomJournalTotalAmounts_RU::createFromJournal(customJournalTable);
                customCorrectionTotalAmountsAll = CustomCorrectionTotalAmounts_RU::createFromJournal(customJournalTable);
                if (CurrencyExchange::round(customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::Cost)
                                                + customCorrectionTotalAmountsAll.correctionAmount(CustomTotalType_RU::Cost),
                                                  customCurrencyCode) == 0.0)
                {
                    markupTableChargeEscort     = MarkupTable::findByCustomPaymType_RU(CustomPaymType_RU::ChargeEscort);
                    markupTableChargeStorage    = MarkupTable::findByCustomPaymType_RU(CustomPaymType_RU::ChargeStorage);
                    chargeEscortAllocateMap     = this.prepareChargeAllocMap(customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::ChargeEscort));
                    chargeStorageAllocateMap    = this.prepareChargeAllocMapStorage();
                    this.checkExistMarkup(chargeEscortAllocateMap, markupTableChargeEscort, CustomPaymType_RU::ChargeEscort);
                    this.checkExistMarkup(chargeStorageAllocateMap, markupTableChargeStorage, CustomPaymType_RU::ChargeStorage);
                    reverseAmountsMap(chargeEscortAllocateMap);
                    reverseAmountsMap(chargeStorageAllocateMap);
                    isErrorFullCostStornoCorrection = true;
                }
            }

            while select customCorrectionTrans
                where customCorrectionTrans.CorrectionJournalId == customCorrectionTable.CorrectionJournalId
            {
                dutyAmount          = customCorrectionTrans.CorrectionDuty;
                customJournalTrans  = customCorrectionTrans.customJournalTrans();
                if (this.isMarkupable(customJournalTrans, customJournalTable.InventGTDId))
                {
                    if (dutyAmount)
                    {
                        this.createMarkup(customJournalTrans, markupTableDuty, dutyAmount);
                        postedAmount += CurrencyExchangeHelper::mstAmount(dutyAmount, customCurrencyCode, this.transDate());
                    }

                    this.createChargeMarkupTrans(chargeAdminAllocateMap, markupTableChargeAdmin, CustomJournalTrans_RU::findRecId(customCorrectionTrans.JournalTransRecId));

                    if (isErrorFullCostStornoCorrection)
                    {
                        customJournalTransOnDateAmounts = CustomJournalTransOnDateAmounts_RU::createFromTransOnDate(customJournalTrans, this.transDate(), true);
                        if (CurrencyExchange::round(customJournalTransOnDateAmounts.amount(CustomTotalType_RU::Cost), customCurrencyCode) == 0.0)
                        {
                            this.createChargeMarkupTrans(chargeEscortAllocateMap, markupTableChargeEscort, customJournalTrans);
                            this.createChargeMarkupTrans(chargeStorageAllocateMap, markupTableChargeStorage, customJournalTrans);
                        }
                    }
                }
                else
                {
                    if (dutyAmount)
                    {
                        this.createInventAdjust(customJournalTrans, dutyAmount, markupTableDuty.MarkupCode);
                        postedAmount += CurrencyExchangeHelper::mstAmount(dutyAmount, customCurrencyCode, this.transDate());
                    }

                    this.createChargeInventAdjustTrans(chargeAdminAllocateMap, markupTableChargeAdmin, CustomJournalTrans_RU::findRecId(customCorrectionTrans.JournalTransRecId));

                    if (isErrorFullCostStornoCorrection)
                    {
                        customJournalTransOnDateAmounts = CustomJournalTransOnDateAmounts_RU::createFromTransOnDate(customJournalTrans, this.transDate(), true);
                        if (CurrencyExchange::round(customJournalTransOnDateAmounts.amount(CustomTotalType_RU::Cost), customCurrencyCode) == 0.0)
                        {
                            this.createChargeInventAdjustTrans(chargeEscortAllocateMap, markupTableChargeEscort, customJournalTrans);
                            this.createChargeInventAdjustTrans(chargeStorageAllocateMap, markupTableChargeStorage, customJournalTrans);
                        }
                    }
                }
            }
        }
        else
        {
            while select customCorrectionTrans
                where customCorrectionTrans.CorrectionJournalId == customCorrectionTable.CorrectionJournalId
            {
                dutyAmount          = customCorrectionTrans.CorrectionDuty;
                customJournalTrans  = customCorrectionTrans.customJournalTrans();

                if (dutyAmount)
                {
                    ledgerDefaultAccount = TaxLedgerAccountGroup::accountLedgerDimension(FEACCCustomRateTable_RU::findOnDate(customJournalTrans.feaccId,
                                                                                                                             TaxType_W::CustomDuty_RU,
                                                                                                                             CustomJournalCalc_RU::customAllImportExport(customJournalTable.CustomJournalType),
                                                                                                                             customJournalTrans.CountryRegionId,
                                                                                                                             this.transDate()),
                                                                                         this.taxDirection());

                    ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDefaultAccount, customJournalTrans.DefaultDimension);

                    exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                                 ledgerVoucherObject.parmAccountingDate());

                    ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(ledgerVoucherObject,
                                                                                                     this.ledgerPostingTypeDuty(),
                                                                                                     ledgerDimension,
                                                                                                     customCurrencyCode,
                                                                                                     dutyAmount,
                                                                                                     exchangeRateHelper);
                    ledgerVoucherTransObject.parmTaxParentReferenceTableId(customCorrectionTable.TableId);
                    ledgerVoucherTransObject.parmTaxParentReferenceRecId(customCorrectionTable.RecId);
                    ledgerVoucherTransObject.parmTransTxt();
                    ledgerVoucher.addTrans(ledgerVoucherTransObject);

                    postedAmount += CurrencyExchangeHelper::mstAmount(dutyAmount, customCurrencyCode, this.transDate());
                }
            }
            //this.createChargeLedgerTrans(CustomChargeType_RU::Administration, customCorrectionTotalAmounts.correctionAmount(CustomTotalType_RU::ChargeAdmin));
            this.createChargeLedgerTrans(CustomChargeType_RU::AdministrationImport, customCorrectionTotalAmounts.correctionAmount(CustomTotalType_RU::ChargeAdmin));

            // Reverse Escort and Storage fees if we have a full storno of GTD by KTS with Error specified in reason.
            if (customCorrectionTable.CorrectionReason == CustomCorrectionReason_RU::Error)
            {
                customJournalTotalAmounts = CustomJournalTotalAmounts_RU::createFromJournal(customJournalTable);
                customCorrectionTotalAmounts = CustomCorrectionTotalAmounts_RU::createFromJournal(customJournalTable);
                if (CurrencyExchange::round(customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::Cost)
                                                + customCorrectionTotalAmounts.correctionAmount(CustomTotalType_RU::Cost),
                                                  customCurrencyCode) == 0.0)
                {
                    this.createChargeLedgerTrans(CustomChargeType_RU::Escort,  -customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::ChargeEscort),  true);
                    this.createChargeLedgerTrans(CustomChargeType_RU::Storage, -customJournalTotalAmounts.estimativeAmount(CustomTotalType_RU::ChargeStorage), true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    TransDate transDate()
    {
        return customCorrectionTable.CorrectionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    TransTxt txt()
    {
        return  strfmt("@SYS4083207", customCorrectionTable.CorrectionId,
                                                        customCorrectionTable.CorrectionDate,
                                                        customJournalTable.InventGTDId,
                                                        customJournalTable.gtdDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournal</Name>
				<Source><![CDATA[
    void updateJournal()
    {
        customCorrectionTable.selectForUpdate(true);
        customCorrectionTable.reread();
        customCorrectionTable.LedgerVoucher    = ledgerVoucher.lastVoucher();
        customCorrectionTable.CorrectionStatus = CustomCorrectionStatus_RU::Posted;
        customCorrectionTable.FactureId        = factureId;
        customCorrectionTable.update();
        customCorrectionTable.createTransLink();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = true;

        if (customCorrectionTable.CorrectionStatus != CustomCorrectionStatus_RU::Project)
        {
            ret = checkFailed(strfmt("@GLS115395", enum2str(CustomCorrectionStatus_RU::Project)));
        }

        if ((select firstonly customCorrectionTable_RU
                where customCorrectionTable_RU.JournalId        == customCorrectionTable.JournalId        &&
                      customCorrectionTable_RU.CorrectionDate   < customCorrectionTable.CorrectionDate    &&
                      customCorrectionTable_RU.CorrectionStatus == CustomCorrectionStatus_RU::Project).RecId != 0)
        {
            ret = checkFailed(strfmt("@GLS115396", customJournalTable.CustomJournalId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOpenOnly</Name>
				<Source><![CDATA[
    protected NoYes updateOpenOnly()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>