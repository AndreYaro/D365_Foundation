<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMJournalCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CFMJournalCalc extends RunBase
{
    CFMJournalId journalId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
         journalId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static CFMJournalCalc construct(CFMJournalTable _journalTable)
    {
        CFMJournalCalc calc = new CFMJournalCalc();

        calc.parmJournalId(_journalTable.JournalId);

        return calc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (!_args || !_args.record() || _args.dataset() != tableNum(CFMJournalTable))
        {
            throw error(strFmt("@Cashflowmanagement:ClassRequiresActiveBufferOfType", classStr(CFMJournalCalc), tableId2Name(tableNum(CFMJournalTable))));
        }

        CFMJournalCalc calc = CFMJournalCalc::construct(_args.record());

        calc.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    protected void calculate(CFMJournalSourceList _sourceList, CFMJournalTransSaver _saver)
    {
        CFMJournalLineSearch search = CFMJournalLineSearch::constructFromCFMJournalSourceList(_sourceList, _saver);
        search.init();

        while (search.next())
        {
            RefRecId sourceRecId;
            RefRecId sourceHeaderRecId;

            CFMJournalTrans trans = search.getCFMJournalTrans();
            [sourceHeaderRecId, sourceRecId] = search.logRefRecId();
            _saver.addLine(trans, sourceRecId, sourceHeaderRecId);
        }

        _saver.flush();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteJournalLines</Name>
				<Source><![CDATA[
    protected void deleteJournalLines()
    {
        CFMJournalTrans journalTrans;

        delete_from journalTrans
            where journalTrans.JournalId == journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public CFMJournalId parmJournalId(CFMJournalId _journalId)
    {
        journalId = _journalId;

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        CFMJournalTable journalTable = CFMJournalTable::find(journalId);
        CFMJournalTransSaver saver = CFMJournalTransSaver::constructFromJournal(journalTable);

        if (CFMAnalyticDataEditUncommitted::isJournalExistUncommittedValues(journalTable.RecId))
        {
            checkFailed("@Cashflowmanagement:JourContainsUncommittedChanges");
            return;
        }

        ttsbegin;

        this.deleteJournalLines();

        CFMJournalSourceList sourceList;

        while select sourceList
            where sourceList.SourceRecId == journalTable.RecId
               && sourceList.SetupSourceType == CFMJournalName::tableIdToSourceType(tableNum(CFMJournalTable))
        {
            this.calculate(sourceList, saver);
        }

        ttscommit;

        CFMJournalCheckPost::checkPRIncludedOpenJours(journalTable.JournalId);

        info(strFmt("@Cashflowmanagement:PaymSchedJourSuccessCalculated", journalTable.JournalId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
   public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>