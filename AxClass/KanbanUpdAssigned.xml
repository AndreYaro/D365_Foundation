<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanUpdAssigned</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanUpdAssigned</c> class performs status updates for kanbans that have their target
///    status set to the assigned value.
/// </summary>
public class KanbanUpdAssigned extends KanbanUpd
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs actions for kanbans that have their status set to the assigned value.
    /// </summary>
    protected void runStatus()
    {
        this.setStatus(LeanKanbanStatus::Assigned);
        this.updateKanban();
        this.startFirstKanbanJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>startFirstKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the first kanban job for the parent kanban.
    /// </summary>
    protected void startFirstKanbanJob()
    {
        KanbanStatus            kanbanStatusLocal = kanban.status(updateJobs);

        if (kanbanStatusLocal.mustSynchronizeKanbanJobStatus())
        {
            LeanKanbanJobStatus leanKanbanJobStatus = kanbanStatusLocal.correspondingKanbanJobStatus(kanban.Status);
            KanbanJob kanbanJob = kanban.firstKanbanJob();
            if (kanbanJob.Status != leanKanbanJobStatus)
            {
                KanbanJobStatus kanbanJobStatus = KanbanJobStatus::newKanbanJobKanbanStatusUpdate(kanbanJob,kanbanStatusUpdate);
                kanbanJobStatus.run(leanKanbanJobStatus);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static KanbanUpd construct()
    {
        return new KanbanUpdAssigned();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
