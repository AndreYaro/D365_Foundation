<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanGenerateServiceAsset</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanGenerateServiceAsset</c> is used to generate budget plan data from fixed asset budget data.
/// </summary>
public class BudgetPlanGenerateServiceAsset extends BudgetPlanGenerateService
{
    BudgetPlanGenerateContractAsset budgetPlanGenerateContractAsset;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addGroupByFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the group by fields on given query.
    /// </summary>
    /// <param name="_query">
    /// The query to be used.
    /// </param>
    protected void addGroupByFields(Query _query)
    {
        QueryBuildDataSource assetBudgetQueryBuildDataSource;

        assetBudgetQueryBuildDataSource = _query.dataSourceTable(tableNum(AssetBudget));

        assetBudgetQueryBuildDataSource.addGroupByField(fieldNum(AssetBudget, AssetId));
        assetBudgetQueryBuildDataSource.addGroupByField(fieldNum(AssetBudget, LedgerDimension));
        assetBudgetQueryBuildDataSource.addGroupByField(fieldNum(AssetBudget, OffsetLedgerDimension));
        assetBudgetQueryBuildDataSource.addGroupByField(fieldNum(AssetBudget, TransDate));
        assetBudgetQueryBuildDataSource.addGroupByField(fieldNum(AssetBudget, CurrencyCode));
        assetBudgetQueryBuildDataSource.addGroupByField(fieldNum(AssetBudget, TransType));

        assetBudgetQueryBuildDataSource.addSelectionField(fieldNum(AssetBudget, AmountCur), SelectionField::Sum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGenerateFromAssetTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the budget plan can be generated from the asset transaction type.
    /// </summary>
    /// <param name="_assetTransType">
    /// The <c>AssetTransType</c> enum value to be used.
    /// </param>
    /// <returns>
    /// true if a budget plan can be generated for the asset transaction type; otherwise, false.
    /// </returns>
    protected boolean canGenerateFromAssetTransactionType(AssetTransType _assetTransType)
    {
        return _assetTransType == AssetTransType::Acquisition
            || _assetTransType == AssetTransType::AcquisitionAdj
            || _assetTransType == AssetTransType::Depreciation
            || _assetTransType == AssetTransType::Revaluation
            || _assetTransType == AssetTransType::WriteUpAdj
            || _assetTransType == AssetTransType::WriteDownAdj
            || _assetTransType == AssetTransType::DisposalSale
            || _assetTransType == AssetTransType::DisposalScrap
            || _assetTransType == AssetTransType::ExtraordinaryDepreciation
            || _assetTransType == AssetTransType::CapitalReserveTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query object according to the settings which the user defined on the dialog.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Query</c> class.
    /// </returns>
    protected Query createQuery()
    {
        Query                query;
        QueryBuildDataSource assetBudgetQueryBuildDataSource;

        query = new Query(SysOperationHelper::base64Decode(budgetPlanGenerateContractAsset.parmQueryBudgetPlanGenerateAsset()));

        assetBudgetQueryBuildDataSource = query.dataSourceTable(tableNum(AssetBudget));

        //Add ranges
        assetBudgetQueryBuildDataSource.addRange(fieldNum(AssetBudget, TransDate)).value(
            SysQuery::range(budgetPlanGenerateContractAsset.parmSourceFromDate(), budgetPlanGenerateContractAsset.parmSourceToDate()));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllMatchingBudgetPlanLine</Name>
				<Source><![CDATA[
    protected void deleteAllMatchingBudgetPlanLine(BudgetPlanLineDataGenerationTmp _budgetPlanLineDataGenerationTmp)
    {
        BudgetPlanLine       budgetPlanLine;

        delete_from budgetPlanLine
            where budgetPlanLine.BudgetPlanHeader    == _budgetPlanLineDataGenerationTmp.BudgetPlanHeader
                && budgetPlanLine.BudgetPlanScenario == _budgetPlanLineDataGenerationTmp.BudgetPlanScenario
                && budgetPlanLine.LedgerDimension    == _budgetPlanLineDataGenerationTmp.LedgerDimension
                && budgetPlanLine.EffectiveDate      == _budgetPlanLineDataGenerationTmp.EffectiveDate
                && budgetPlanLine.BudgetClass        == _budgetPlanLineDataGenerationTmp.BudgetClass
                && budgetPlanLine.AssetId            == _budgetPlanLineDataGenerationTmp.AssetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecordInTmpTable</Name>
				<Source><![CDATA[
    protected void findRecordInTmpTable(BudgetPlanLineDataGenerationTmp _budgetPlanLineDataGenerationTmp)
    {
        // All fields in the BudgetPlanLineIdx index are specified as where clauses in index order to improve read performance.
        select firstonly forupdate budgetPlanLineDataGenerationTmpBulkInsert
            where budgetPlanLineDataGenerationTmpBulkInsert.BudgetPlanHeader    == _budgetPlanLineDataGenerationTmp.BudgetPlanHeader
                && budgetPlanLineDataGenerationTmpBulkInsert.BudgetPlanScenario == _budgetPlanLineDataGenerationTmp.BudgetPlanScenario
                && budgetPlanLineDataGenerationTmpBulkInsert.LedgerDimension    == _budgetPlanLineDataGenerationTmp.LedgerDimension
                && budgetPlanLineDataGenerationTmpBulkInsert.EffectiveDate      == _budgetPlanLineDataGenerationTmp.EffectiveDate
                && budgetPlanLineDataGenerationTmpBulkInsert.BudgetClass        == _budgetPlanLineDataGenerationTmp.BudgetClass
                && budgetPlanLineDataGenerationTmpBulkInsert.AssetId            == _budgetPlanLineDataGenerationTmp.AssetId
                && budgetPlanLineDataGenerationTmpBulkInsert.HcmPosition        == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the data in the budget plan tables.
    /// </summary>
    protected void generateData()
    {
        Query                               userDefinedQuery;
        QueryRun                            userDefinedQueryRun;
        BudgetPlanHeader                    budgetPlanHeader;
        BudgetPlanLineDataGenerationTmp     budgetPlanLineDataGenerationTmp;
        AssetBudget                         assetBudget;
        boolean                             isValidQuery;
        DataAreaId                          dataAreaId;

        #OCCRetryCount

        userDefinedQuery = this.createQuery();
        this.addGroupByFields(userDefinedQuery);
        dataAreaId = CompanyInfo::getDataArea(ledger.PrimaryForLegalEntity);

        try
        {
            ttsbegin;

            changecompany (dataAreaId)
            {
                // creating or finding the budget header record.
                budgetPlanHeader = this.createOrUpdateBudgetPlanHeader();
                userDefinedQueryRun = new QueryRun(userDefinedQuery);

                while (userDefinedQueryRun.next() && userDefinedQueryRun.changed(tableNum(AssetBudget)))
                {
                    assetBudget = userDefinedQueryRun.get(tableNum(AssetBudget)) as AssetBudget;

                    if (this.canGenerateFromAssetTransactionType(assetBudget.TransType))
                    {
                        isValidQuery = true;

                        // Creates the budget plan line for originating ledger dimension
                        budgetPlanLineDataGenerationTmp.data(this.setBudgetPlanLineFields(
                                                                    budgetPlanHeader.RecId,
                                                                    assetBudget,
                                                                    ledger,
                                                                    true,
                                                                    dataAreaId));

                        this.createOrUpdateBudgetPlanLine(budgetPlanLineDataGenerationTmp);

                        // Creates the budget plan line for offset ledger dimension
                        budgetPlanLineDataGenerationTmp.data(this.setBudgetPlanLineFields(
                                                                    budgetPlanHeader.RecId,
                                                                    assetBudget,
                                                                    ledger,
                                                                    false,
                                                                    dataAreaId));

                        this.createOrUpdateBudgetPlanLine(budgetPlanLineDataGenerationTmp);
                    }
                }

                if (isValidQuery)
                {
                    this.bulkInsertOrUpdateBudgetPlanLines();
                    this.markAssetBudgetAsPosted();
                }
            }

            if (!isValidQuery || !isBudgetPlanLineCreated)
            {
                throw error(this.recordNotFoundErrorMessage());
            }

            if (budgetPlanHeader)
            {
                this.showTaskCompleteMessage();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            error("@SYS78886");
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the budget class for given ledger dimension account.
    /// </summary>
    /// <param name="_assetTransType">
    /// The <c>AssetTransType</c> enum value to be used.
    /// </param>
    /// <returns>
    /// The budget class of <c>BudgetPlanLine</c> table.
    /// </returns>
    protected BudgetClass getBudgetClass(AssetTransType _assetTransType)
    {
        return _assetTransType == AssetTransType::DisposalSale ? BudgetClass::Revenue: BudgetClass::Expense;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserDefinedQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query object according to the settings which the user defined on the dialog.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Query</c> class.
    /// </returns>
    public Query getUserDefinedQuery()
    {
        return this.createQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAssetBudgetAsPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the <c>AssetBudget</c> records as posted to budget plan.
    /// </summary>
    private void markAssetBudgetAsPosted()
    {
        Query       userDefinedQuery;
        QueryRun    userDefinedQueryRun;
        AssetBudget assetBudget;

        userDefinedQuery = this.createQuery();
        userDefinedQueryRun = new QueryRun(userDefinedQuery);

        while (userDefinedQueryRun.next())
        {
            assetBudget = userDefinedQueryRun.get(tableNum(AssetBudget)) as AssetBudget;
            assetBudget.BudgetPostingStatus = AssetBudgetPostingStatus::PostedToBudgetPlan;
            assetBudget.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanGenerateContract</Name>
				<Source><![CDATA[
    public BudgetPlanGenerateContract parmBudgetPlanGenerateContract(BudgetPlanGenerateContract _budgetPlanGenerateContract = budgetPlanGenerateContract)
    {
        super(_budgetPlanGenerateContract);

        budgetPlanGenerateContractAsset = _budgetPlanGenerateContract as BudgetPlanGenerateContractAsset;

        return budgetPlanGenerateContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPlanLineFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the fields on the <c>BudgetPlanLine</c> table according to fixed assets data generation.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of BudgetPlanHeader table.
    /// </param>
    /// <param name="_assetBudget">
    /// A record of <c>AssetBudget</c> table.
    /// </param>
    /// <param name="_ledger">
    /// A record of <c>Ledger</c> table.
    /// </param>
    /// <param name="_isOffsetLedgerDimension">
    /// A boolean flag to determine whether the ledger dimension is an offset ledger dimension.
    /// </param>
    /// </param>
    /// <param name="_dataAreaId">
    /// Source dataAreaId value.
    /// <returns>
    /// A record of <c>BudgetPlanLineDataGenerationTmp</c> table.
    /// </returns>
    protected BudgetPlanLineDataGenerationTmp setBudgetPlanLineFields(
        BudgetPlanHeaderRecId   _budgetPlanHeaderRecId,
        AssetBudget             _assetBudget,
        Ledger                  _ledger,
        boolean                 _isOffsetLedgerDimension,
        DataAreaId              _dataAreaId)
    {
        AmountCur transactionCurrencyAmount;

        budgetPlanLineDataGenerationTmpBulkInsert.clear();
        budgetPlanLineDataGenerationTmpBulkInsert.BudgetPlanHeader = _budgetPlanHeaderRecId;
        budgetPlanLineDataGenerationTmpBulkInsert.EffectiveDate    = _assetBudget.TransDate;

        if (_isOffsetLedgerDimension)
        {
            transactionCurrencyAmount = -_assetBudget.AmountCur;
            budgetPlanLineDataGenerationTmpBulkInsert.LedgerDimension = this.generateBudgetPlanningLedgerDim(_assetBudget.OffsetLedgerDimension);
        }
        else
        {
            transactionCurrencyAmount = _assetBudget.AmountCur;
            budgetPlanLineDataGenerationTmpBulkInsert.LedgerDimension = this.generateBudgetPlanningLedgerDim(_assetBudget.LedgerDimension);
        }

        budgetPlanLineDataGenerationTmpBulkInsert.TransactionCurrencyAmount = transactionCurrencyAmount;
        budgetPlanLineDataGenerationTmpBulkInsert.TransactionCurrencyCode   = _assetBudget.CurrencyCode;
        budgetPlanLineDataGenerationTmpBulkInsert.BudgetPlanScenario        = budgetPlanGenerateContract.parmTargetBudgetPlanScenario();
        budgetPlanLineDataGenerationTmpBulkInsert.BudgetClass               = this.getBudgetClass(_assetBudget.TransType);
        budgetPlanLineDataGenerationTmpBulkInsert.AssetId                   = _assetBudget.AssetId;
        budgetPlanLineDataGenerationTmpBulkInsert.SourceDataAreaId          = _dataAreaId;

        if (currencyCode == _assetBudget.CurrencyCode)
        {
            budgetPlanLineDataGenerationTmpBulkInsert.AccountingCurrencyAmount = transactionCurrencyAmount;
        }

        return budgetPlanLineDataGenerationTmpBulkInsert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the process of data generation.
    /// </summary>
    /// <param name="_contract">
    /// An instance of the <c>BudgetPlanGenerateContractAsset</c> class.
    /// </param>
    public void startProcess(BudgetPlanGenerateContractAsset _contract)
    {
        BudgetInstrumentationLogger budgetPlanLogger = BudgetInstrumentationLogger::createLogger(classStr(BudgetPlanGenerateServiceAsset));
        using (SysInstrumentationActivityContext budgetPlanGenerateServiceAssetContext = budgetPlanLogger.budgetPlanGeneration().assetContext(_contract))
        {
            this.parmBudgetPlanGenerateContract(_contract);
            this.initialize();
            this.generateData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>BudgetPlanGenerateServiceAsset</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>BudgetPlanGenerateServiceAsset</c> class.
    /// </returns>
    public static BudgetPlanGenerateServiceAsset construct()
    {
        return new BudgetPlanGenerateServiceAsset();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>