<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcProdOper_PmfCoProduct</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// BOMCalcProdOper_PmfCoProduct runs the Production line cost calculation
/// for production operations with a co/by product.
/// </summary>
class BomCalcProdOper_PmfCoProduct extends BOMCalcProdOper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initProdCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the global ProdCalcTrans record
    /// </summary>
    protected void initProdCalcTrans()
    {
        BOMCalcProd_PmfCoProduct    bomCalcProd_PmfCoProduct = this.parmParentBOMCalc();
        PmfProdCoBy                 pmfProdCoBy              = bomCalcProd_PmfCoProduct.coProduct();

        WrkCtrIdBase                wrkCtrId = prodRoute.getResource(true,
                                                         true,
                                                         dateNull(),
                                                         maxdate(),
                                                         prodRoute.prodTable().inventDim().InventSiteId,
                                                         true).WrkCtrId;
        prodCalcTransSetup.clear();
        prodCalcTransProcess.clear();
        prodCalcTransQty.clear();

        prodCalcTransSetup   = PmfCoByProdCalcTrans::findIdRefCalcType(prodRoute.TableId,
                                                                prodRoute.RecId,
                                                                pmfProdCoBy.RecId,
                                                                ItemCalcType::Setup,
                                                                true,
                                                                wrkCtrId,
                                                                prodRoute.OprId,
                                                                prodRoute.OprNum,
                                                                BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, RouteCostCategory::find(prodRoute.SetUpCategoryId).CostGroupId));
        prodCalcTransSetup.PmfIdRefCoByRecId = pmfProdCoBy.RecId;

        prodCalcTransProcess = PmfCoByProdCalcTrans::findIdRefCalcType(prodRoute.TableId,
                                                                prodRoute.RecId,
                                                                pmfProdCoBy.RecId,
                                                                ItemCalcType::Process,
                                                                true,
                                                                wrkCtrId,
                                                                prodRoute.OprId,
                                                                prodRoute.OprNum,
                                                                BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, RouteCostCategory::find(prodRoute.ProcessCategoryId).CostGroupId));
        prodCalcTransProcess.PmfIdRefCoByRecId = pmfProdCoBy.RecId;

        prodCalcTransQty     = PmfCoByProdCalcTrans::findIdRefCalcType(prodRoute.TableId,
                                                                prodRoute.RecId,
                                                                pmfProdCoBy.RecId,
                                                                ItemCalcType::Qty,
                                                                true,
                                                                wrkCtrId,
                                                                prodRoute.OprId,
                                                                prodRoute.OprNum,
                                                                BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, RouteCostCategory::find(prodRoute.QtyCategoryId).CostGroupId));
        prodCalcTransQty.PmfIdRefCoByRecId = pmfProdCoBy.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns new instance of the BOMCalcProdOper_PmfCoProduct class.
    /// </summary>
    /// <returns>
    /// New instance of the BOMCalcProdOper_PmfCoProduct class.
    /// </returns>
    public static BOMCalcProdOper_PmfCoProduct construct()
    {
        return new BOMCalcProdOper_PmfCoProduct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdRoute_PmfCoProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates new instance of BOMCalcProdOper_PmfCoProduct
    /// class based on imput parameters.
    /// </summary>
    /// <param name="_prodRoute">
    /// ProdRoute record used to initialize class.
    /// </param>
    /// <param name="_parentBOMCalcProd">
    /// BOMCalcProd parent object used to initialize class.
    /// </param>
    /// <param name="_lineNum">
    /// Line num used to initialize class.
    /// </param>
    /// <returns>
    /// Newly initialized BOMCalcProdOper_PmfCoProductclass object.
    /// </returns>
    public static BOMCalcProdOper_PmfCoProduct newProdRoute_PmfCoProduct(
        ProdRoute   _prodRoute,
        BOMCalcProd _parentBOMCalcProd,
        LineNum     _lineNum)
    {
        BOMCalcProdOper_PmfCoProduct bomCalcProdOper = BOMCalcProdOper_PmfCoProduct::construct();

        bomCalcProdOper.parmProdRoute(_prodRoute.data());
        bomCalcProdOper.parmLineNum(_lineNum);
        bomCalcProdOper.parmParentBOMCalc(_parentBOMCalcProd);

        return bomCalcProdOper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>