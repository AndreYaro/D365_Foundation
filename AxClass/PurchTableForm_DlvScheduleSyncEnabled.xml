<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTableForm_DlvScheduleSyncEnabled</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchTableForm_DlvScheduleSyncEnabled</c> class provides a non-mandatory synchronization
///    mechanism for delivery schedules.
/// </summary>
class PurchTableForm_DlvScheduleSyncEnabled
extends PurchTableForm
{
    PurchLine   orderLineOrig;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deliveryLinesSync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the delivery lines with the order line after a change on either the order line or a
    /// delivery line.
    /// </summary>
    /// <param name="_purchLine">
    /// The line that was changed.
    /// </param>
    /// <param name="_interactive">
    /// A Boolean value that indicates whether the synchronization should be interactive; optional.
    /// </param>
    /// <returns>
    /// true if any delivery schedule lines were changed and the form refresh is needed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the <paramref name="_interactive" /> parameter is false a positive answer is assumed for all
    /// question that would have been asked if it was in interactive mode.
    /// </remarks>
    boolean deliveryLinesSync(PurchLine _purchLine, boolean _interactive = true)
    {
        PurchLine orderLine;

        if (_purchLine.LineDeliveryType == LineDeliveryType::OrderLine)
            return false;

        if (_purchLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
        {
            orderLine = _purchLine;
        }
        else
        {
            orderLine = PurchDeliverySchedule::findOrderLineForDeliveryLine(_purchLine.InventTransId);
        }

        return this.syncDeliveryScheduleCommercialAttributes(orderLine, _interactive);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderLineOrig</Name>
				<Source><![CDATA[
    public PurchLine parmOrderLineOrig(PurchLine _value = orderLineOrig)
    {
        orderLineOrig = _value;
        return orderLineOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine_WritePreSuper</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Captures the order line before the update of a line that will trigger delivery schedule synchronization.
    /// </summary>
    /// <param name="_inputContract">
    ///     An instance of the  <c>PurchLineWritePreSuperInputContract</c> class.
    /// </param>
    /// <returns>
    ///     An instance of the  <c>PurchLineWritePreSuperOutPutContract</c> class.
    /// </returns>
    /// <remarks>
    ///     In previous version <c>purchLine</c> was passed in as parameter, now <c>purchLine</c> must be added to the input contract object passed in.
    /// </remarks>
    public PurchLineWritePreSuperOutputContract purchLine_WritePreSuper(PurchLineWritePreSuperInputContract _inputContract)
    {
        PurchLine localPurchLine = _inputContract.parmPurchLine();
        orderLineOrig.clear();

        switch (localPurchLine.LineDeliveryType)
        {
            case LineDeliveryType::OrderLineWithMultipleDeliveries:
                orderLineOrig.data(localPurchLine.orig().data());
                break;

            case LineDeliveryType::DeliveryLine:
                orderLineOrig = PurchDeliverySchedule::findOrderLineForDeliveryLine(localPurchLine.InventTransId);
                break;
        }

        return super(_inputContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDeliveryLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes delivery lines after the order line with multiple deliveries has changed.
    /// </summary>
    /// <param name="_purchLine">
    /// The selected purchase order line.
    /// </param>
    /// <remarks>
    /// It rereads the delivery lines found in the cache of the client one by one.It does not have to query
    /// the data source again, which would be time- for large orders.The assumption is that there will not
    /// be hundreds of delivery schedule lines and therefore rereading one by one will typically perform
    /// much better by taking into account the slow <c>findRecord</c> method that would must be called
    /// after another query.
    /// </remarks>
    protected void refreshDeliveryLines(PurchLine _purchLine)
    {
        PurchLine   localPurchLine;
        FormDataSource  purchLineDS = FormDataUtil::getFormDataSource(_purchLine);

        if (purchLineDS)
        {
            localPurchLine = purchLineDS.getFirst(0,false); // skip records not in memory.
            while (localPurchLine)
            {
                if (localPurchLine.LineDeliveryType == LineDeliveryType::DeliveryLine)
                {
                    localPurchLine.reread();
                }
                localPurchLine = purchLineDS.getNext();
            }

            // -1 means refresh all records, the default is -2 which refreshes only certain specific records (eg marked)
            purchLineDS.refreshEx(-1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDeliverySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the delivery schedule lines when an order or delivery line was modified.
    /// </summary>
    /// <param name="_purchLine">
    /// The changed purchase order line.
    /// </param>
    /// <param name="_resetPriceOnOrderLine">
    /// A Boolean value that indicates whether to recalculate the price on the order line.
    /// </param>
    /// <param name="_interactive">
    /// A Boolean value that indicates whether the synchronization should be interactive; optional.
    /// </param>
    /// <remarks>
    /// If the <paramref name="_interactive" /> parameter is false a positive answer is assumed for all
    /// questions that would have been asked if it was an interactive mode.
    /// </remarks>
    void refreshDeliverySchedule(PurchLine _purchLine, boolean _resetPriceOnOrderLine, boolean _interactive = true)
    {
        if (_purchLine.LineDeliveryType != LineDeliveryType::OrderLine)
        {
            if (_purchLine.LineDeliveryType == LineDeliveryType::DeliveryLine)
            {
                this.refreshOrderLineWithMultipleDeliveries(_purchLine, _resetPriceOnOrderLine);
            }

            if (this.deliveryLinesSync(_purchLine, _interactive))
            {
                // refresh if user wanted to update commercial attributes on delivery lines.
                _purchLine.reread();
                this.refreshDeliveryLines(_purchLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshOrderLineWithMultipleDeliveries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the order line with multiple deliveries if it was changed in the result of delivery line change.
    /// </summary>
    /// <param name="_purchLine">
    ///     The delivery line that changed.
    /// </param>
    /// <param name="_resetPrice">
    ///     A Boolean value that indicates whether price on the order line should be recalculated.
    /// </param>
    protected void refreshOrderLineWithMultipleDeliveries(PurchLine _purchLine, boolean _resetPrice)
    {
        PurchLine       localPurchLine;
        PurchLine       orderLine       = PurchDeliverySchedule::findOrderLineForDeliveryLine(_purchLine.InventTransId, _resetPrice);
        boolean         found           = false;
        FormDataSource  purchLineDS     = FormDataUtil::getFormDataSource(_purchLine);

        if (_resetPrice)
        {
            // recalculation after agreement disassociation has no way to discover that the order line
            // was previously linked so we need to force price recalculation.
            PurchLine::modifyPurchQty(orderLine, orderLine.inventDim(), _resetPrice);
            orderLine.update();
        }

        if (purchLineDS)
        {
            localPurchLine = purchLineDS.getFirst(0,false); // skip records not in memory.
            while (localPurchLine && !found)
            {
                if (localPurchLine.InventTransId == orderLine.InventTransId)
                {
                    localPurchLine.reread();
                    found = true;
                }
                localPurchLine = purchLineDS.getNext();
            }

            // -1 means refresh all records, the default is -2 which refreshes only certain specific records (eg marked)
            purchLineDS.refreshEx(-1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>haveCommercialAttributesChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detects whether any of the commercial attributes have changed on the order line.
    /// </summary>
    /// <param name = "_orderLine">The new order line.</param>
    /// <returns>true if the commercial attributes have changed; otherwise, false.</returns>
    protected boolean haveCommercialAttributesChanged(PurchLine _orderLine)
    {
        return (_orderLine.PurchPrice  !=  orderLineOrig.PurchPrice  ||
                _orderLine.PriceUnit   !=  orderLineOrig.PriceUnit   ||
                _orderLine.LineDisc    !=  orderLineOrig.LineDisc    ||
                _orderLine.LinePercent !=  orderLineOrig.LinePercent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCommercialAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the commercial attributes of the delivery line from the order line.
    /// </summary>
    /// <param name = "_deliveryLine">The delivery line.</param>
    /// <param name = "_orderLine">The order line.</param>
    protected void setCommercialAttributes(PurchLine _deliveryLine, PurchLine _orderLine)
    {
        if (_orderLine.PurchPrice  !=  orderLineOrig.PurchPrice)
        {
            _deliveryLine.PurchPrice = _orderLine.PurchPrice;
            _deliveryLine.modifiedField(fieldNum(PurchLine, PurchPrice));
        }
        if (_orderLine.PriceUnit   !=  orderLineOrig.PriceUnit)
        {
            _deliveryLine.PriceUnit = _orderLine.PriceUnit;
            _deliveryLine.modifiedField(fieldNum(PurchLine, PriceUnit));
        }
        if (_orderLine.LineDisc    !=  orderLineOrig.LineDisc)
        {
            _deliveryLine.LineDisc = _orderLine.LineDisc;
            _deliveryLine.modifiedField(fieldNum(PurchLine, LineDisc));
        }
        if (_orderLine.LinePercent !=  orderLineOrig.LinePercent)
        {
            _deliveryLine.LinePercent = _orderLine.LinePercent;
            _deliveryLine.modifiedField(fieldNum(PurchLine, LinePercent));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncDeliveryScheduleCommercialAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detects whether any of the commercial attributes have changed on the order line with multiple
    /// deliveries and prompts the user to specify whether to copy the changed attributes to all the
    /// delivery lines and, finally, copies them.
    /// </summary>
    /// <param name="_orderLine">
    /// The new order line with multiple deliveries.
    /// </param>
    /// <param name="_interactive">
    /// A Boolean value that indicates whether the synchronization should be interactive; optional.
    /// </param>
    /// <returns>
    /// true if delivery lines were changed; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If <paramref name="_interactive" /> parameter is false delivery lines are always updated with new
    /// commercial attributes. The commercial attributes are purchase price, price unit, line disc, line
    /// percent. This method detects change based on a comparison with the order line that is captured by
    /// the invocation of the <c>purchLine_Write</c> method before the actual update of the delivery
    /// schedule.
    /// </remarks>
    protected boolean syncDeliveryScheduleCommercialAttributes(PurchLine _orderLine, boolean _interactive = true)
    {
        #OCCRetryCount
        PurchLine               deliveryLine;
        PurchDeliverySchedule   purchDeliverySchedule;

        // The commercial attributes of the delivery schedule have changed. Do you want to update all the delivery lines?
        if (!this.haveCommercialAttributesChanged(_orderLine)
             || (_interactive && Box::yesNo("@SYS131418", DialogButton::Yes) == DialogButton::No))
        {
            // user doesn't want to update commercial attributes.
            return false;
        }

        try
        {
            ttsbegin;

            // invoice matched lines are not updated.
            while select forupdate deliveryLine
                where !deliveryLine.IsDeleted
                   && !deliveryLine.IsInvoiceMatched
                join purchDeliverySchedule
                        where purchDeliverySchedule.OrderLine    == _orderLine.InventTransId
                           && purchDeliverySchedule.DeliveryLine == deliveryLine.InventTransId
            {
                this.setCommercialAttributes(deliveryLine, _orderLine);
                deliveryLine.update();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            ttsabort;
            throw error("@SYS93835");
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>