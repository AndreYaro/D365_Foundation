<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NumberSequenceReferenceEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>NumberSequenceReferenceEventHandler</c> class is used to subscribe to delegates created in <c>NumberSequenceReference</c> table.
/// </summary>
class NumberSequenceReferenceEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateNumberSequenceIdChangedSubscriber</Name>
				<Source><![CDATA[
    [SubscribesTo(tablestr(NumberSequenceReference), delegatestr(NumberSequenceReference, validateNumberSequenceIdChanged))]
    static void validateNumberSequenceIdChangedSubscriber(NumberSequenceTable _sequenceTable)
    {
        SysInfoAction_MenuFunction action;

        action = SysInfoAction_MenuFunction::newMenuItem(menuitemDisplayStr(NumberSequenceDetails), MenuItemType::Display);
        action.parmCallerBuffer(_sequenceTable);

        //Reference is mapped to a sequence via a virtual company and can only be change from number sequence definition form.
        error("@SYS4000291", "", action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onValidateFieldValueSubscriber</Name>
				<Source><![CDATA[
    [SubscribesTo(tablestr(NumberSequenceReference), delegateStr(NumberSequenceReference, onValidateFieldValue)), Hookable(false)]
    public static void onValidateFieldValueSubscriber(EventHandlerResult _eventArgs, NumberSequenceReference _numberSequenceReference, fieldName _fieldName, int _arrayIndex)
    {
        #ISOCountryRegionCodes

        boolean ret = _eventArgs.result();

        if (ret)
        {
            NumberSequenceDatatype dataType = NumberSequenceDatatype::find(_numberSequenceReference.NumberSequenceDatatype, false);

            if (dataType.DatatypeId == extendedTypeNum(GeneralJournalEntryJournalNumber))
            {
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoDK])
                    && LedgerCheckContinuousNumSeqFlight_DK::instance().isEnabled()
                    && _numberSequenceReference.NumberSequenceId
                    && !NumberSequenceTable::find(_numberSequenceReference.NumberSequenceId, false).Continuous)
                {
                    ret = checkFailed(strFmt("@Ledger:ContinuousNumSeqRequiredForDK"));
                }
            }
        }

        _eventArgs.result(ret);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>