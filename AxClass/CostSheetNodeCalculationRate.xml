<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetNodeCalculationRate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CostSheetNodeCalculationRate extends CostSheetNodeCalculation
{
    CostCalculationRateSubtype     rateSubtype;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        rateSubtype
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowedSubtypeSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a <c>Set</c> object that contains the calculation subtypes that are allowed for this class.
    /// </summary>
    /// <returns>
    ///    The set that contains <c>CostCalculationUnitBasedSubtype</c> enumeration elements.
    /// </returns>
    public Set allowedSubtypeSet()
    {
        Set set = new Set(Types::Enum);
        set.add(CostCalculationRateSubtype::Process);
        set.add(CostCalculationRateSubtype::Setup);
        set.add(CostCalculationRateSubtype::Quantity);

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLowestLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the concrete amounts based on input data and costing sheet structure for leaf nodes.
    /// </summary>
    /// <param name="_costSheet">
    ///    The costing sheet object.
    /// </param>
    /// <param name="_costCalcTransData">
    ///    The <c>CostCalcTransData</c> object that has input data.
    /// </param>
    public void calcLowestLevel(
        CostSheet           _costSheet,
        CostCalcTransData   _costCalcTransData)  // ignore _costCalctTransData
    {
        super(_costSheet, _costCalcTransData);

        CostCalcTransData basisCostCalcTransData = this.collectBasisCostCalcTransData(_costSheet);
        if (basisCostCalcTransData == null)
        {
            calculated = false;
            return;
        }

        // all basis nodes are calculated, we can proceed

        CostTmpCalcTrans costTmpCalcTrans = basisCostCalcTransData.getCostTmpCalcTrans();

        select firstonly costTmpCalcTrans;
        // If basis contains records with amounts
        if (costTmpCalcTrans)
        {
            CostSheetCalculationFactor costSheetCalculationFactor = this.selectCostSheetCalculationFactor();
            if (costSheetCalculationFactor)
            {
                while select ConsumptionVariable, ConsumptionConstant from costTmpCalcTrans
                {
                    CostTmpCalcTrans initializedCostTmpCalcTrans = this.initializeCostTmpCalcTrans(costTmpCalcTrans, costSheetCalculationFactor);

                    this.getCostCalcTransData().addCostTmpCalcTrans(initializedCostTmpCalcTrans);
                }
            }
        }

        calculated = true;

        this.updateCostGroupImpactSet(_costSheet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCostTmpCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the cost transactions to calculate the lowest level.
    /// </summary>
    /// <param name = "_costTmpCalcTrans">A <c>CostTmpCalcTrans</c> record.</param>
    /// <param name = "_costSheetCalculationFactor">Calculation factor for the cost.</param>
    /// <returns>The initialized cost transactions.</returns>
    protected CostTmpCalcTrans initializeCostTmpCalcTrans(CostTmpCalcTrans _costTmpCalcTrans, CostSheetCalculationFactor _costSheetCalculationFactor)
    {
        CostTmpCalcTrans costTmpCalcTrans;
        
        costTmpCalcTrans.CostGroupId            = parentCostGroupId;
        costTmpCalcTrans.CostGroupBehavior      = BOMCostGroup::find(parentCostGroupId).CostGroupBehavior;
        costTmpCalcTrans.UnitId                 = _costTmpCalcTrans.UnitId;
        costTmpCalcTrans.TransType              = ItemCalcType::IndirectRate;
        costTmpCalcTrans.Resource               = this.getCode();
        costTmpCalcTrans.ContributionVariable   = _costTmpCalcTrans.ConsumptionVariable * _costSheetCalculationFactor.Amount;
        costTmpCalcTrans.ContributionConstant   = _costTmpCalcTrans.ConsumptionConstant * _costSheetCalculationFactor.Amount;
        costTmpCalcTrans.ConsumptionVariable    = _costTmpCalcTrans.ConsumptionVariable;
        costTmpCalcTrans.ConsumptionConstant    = _costTmpCalcTrans.ConsumptionConstant;
        costTmpCalcTrans.Level                  = this.getCostCalcTransData().getLevel();

        return costTmpCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCostSheetNodeTable</Name>
				<Source><![CDATA[
    protected CostSheetNodeTable editCostSheetNodeTable(boolean _set = false, CostSheetNodeTable _costSheetNodeTable = null)
    {
        CostSheetNodeTable costSheetNodeTable = super(_set, _costSheetNodeTable);

        if (_set)
        {
            rateSubtype = _costSheetNodeTable.CalculationRateSubtype;
        }

        costSheetNodeTable.CalculationRateSubtype = rateSubtype;

        return costSheetNodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    public boolean equal(Object _costSheetNode)
    {
        boolean ret = super(_costSheetNode);

        if (ret)
        {
            CostSheetNodeCalculationRate costSheetNodeCalculationRate = _costSheetNode;

            ret = rateSubtype == costSheetNodeCalculationRate.getRateSubtype();
            if (!ret)
            {
                return false;
            }

            ListEnumerator factorEnumerator = this.getFactorEnumerator();
            ListEnumerator factorToCompareEnumerator = costSheetNodeCalculationRate.getFactorEnumerator();
            while (factorEnumerator.moveNext())
            {
                if (!factorToCompareEnumerator.moveNext())
                {
                    return false;
                }

                CostSheetCalculationFactor costSheetCalculationFactor = factorEnumerator.current();
                CostSheetCalculationFactor costSheetCalculationFactorToCompare = factorToCompareEnumerator.current();

                if (!this.compareCostSheetCalculationFactorAndAmount(costSheetCalculationFactor, costSheetCalculationFactorToCompare))
                {
                    return false;
                }
            }

            if (factorToCompareEnumerator.moveNext())
            {
                return false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterBasisCostCalcTransData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Filters the data that was collected from the indirect cost basis lines by using the subtypes that
    ///    are assigned to the basis lines.
    /// </summary>
    /// <param name="_basisCostCalcTransData">
    ///    The collected indirect cost basis data.
    /// </param>
    /// <param name="_costSheetCalculationBasis">
    ///    The table buffer that represents a particular basis line.
    /// </param>
    /// <returns>
    ///    The filtered data.
    /// </returns>
    /// <remarks>
    ///    This method should be overwritten if there is a chance to modify subtypes on the indirect cost
    ///    basis lines.
    /// </remarks>
    protected CostCalcTransData filterBasisCostCalcTransData(
        CostCalcTransData           _basisCostCalcTransData,
        CostSheetCalculationBasis   _costSheetCalculationBasis)
    {
        // The subtype should have been set on the basis, but if it's not, use the one from the Rate node as a default
        CostCalculationRateSubtype subtype = _costSheetCalculationBasis.RateSubtype != CostCalculationRateSubtype::Undefined ?
                  _costSheetCalculationBasis.RateSubtype :
                  rateSubtype;

        CostCalcTransData filteredCostCalcTransData = CostCalcTransData::construct();
        filteredCostCalcTransData.initCostCalcTransData(_basisCostCalcTransData);

        CostTmpCalcTrans costTmpCalcTrans = _basisCostCalcTransData.getCostTmpCalcTrans();
        while select sum(ConsumptionVariable), sum(ConsumptionConstant), UnitId from costTmpCalcTrans
            group by UnitId
            where costTmpCalcTrans.Level == this.getCostCalcTransData().getLevel() // don't consider sublevel transactions for rates calculation
               && costTmpCalcTrans.TransType == CostSheetNodeCalculationRate::getSubTypeAsItemCalcType(subtype)
        {
            filteredCostCalcTransData.addCostTmpCalcTrans(costTmpCalcTrans);
        }

        return filteredCostCalcTransData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBasisSubtypeFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the name of the field in the <c>CostSheetCalculationBasis</c> table that stores subtype
    ///    values for this kind of indirect costs.
    /// </summary>
    /// <returns>
    ///    The field name.
    /// </returns>
    /// <remarks>
    ///    This method should be overridden if the indirect cost type allows for editing of the subtype on the
    ///    basis lines.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The indirect cost type cannot use other costing sheet nodes as the basis for calculation.
    /// </exception>
    protected FieldName getBasisSubtypeFieldName()
    {
        return fieldStr(CostSheetCalculationBasis, RateSubtype);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the resource index of the image that will represent this node in the editor.
    /// </summary>
    /// <returns>
    ///    The resource ID.
    /// </returns>
    public int getImage()
    {
        return #imageCalculationRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRateSubtype</Name>
				<Source><![CDATA[
    protected CostCalculationRateSubtype getRateSubtype()
    {
        return rateSubtype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubtypeFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the name of the field in the <c>CostSheetNodeTable</c> table that stores the subtype
    ///    values for this kind of indirect costs.
    /// </summary>
    /// <returns>
    ///    The field name.
    /// </returns>
    protected FieldName getSubtypeFieldName()
    {
        return fieldStr(CostSheetNodeTable, CalculationRateSubtype);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getType</Name>
				<Source><![CDATA[
    public CostSheetNodeType getType()
    {
        return CostSheetNodeType::CalculationRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes a new instance of the <c>CostSheetNodeCalculationRate</c> class.
    /// </summary>
    /// <param name="_costSheetNodeTable">
    ///     The record in the <c>CostSheetNodeTable</c> table that will be used to initialize this object.
    /// </param>
    /// <param name="_parentNodeId">
    ///     The ID of the parent node.
    /// </param>
    /// <param name="_modeStrategy">
    ///     The <c>CostSheetModeStrategy</c> object that controls the creation of the costing sheet.
    /// </param>
    /// <param name="_parentCostGroupId">
    ///     The ID of the <c>CostSheetNodeGroup</c> object that the calculation node belongs to.
    /// </param>
    protected void new(
        CostSheetNodeTable      _costSheetNodeTable,
        CostSheetNodeId         _parentNodeId,
        CostSheetModeStrategy   _modeStrategy,
        CostGroupId             _parentCostGroupId)
    {
        rateSubtype = _costSheetNodeTable.CalculationRateSubtype;

        super(_costSheetNodeTable, _parentNodeId, _modeStrategy, _parentCostGroupId);

        if (_modeStrategy.mustLoadCalculationBasisAndFactors())
        {
            CostSheetCalculationBasis costSheetCalculationBasis = _modeStrategy.getAbsorptionBasisCursor();

            while select costSheetCalculationBasis
                where costSheetCalculationBasis.SheetId == sheetId
                   && costSheetCalculationBasis.NodeId == nodeId
            {
                basisList.addEnd(costSheetCalculationBasis);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack(boolean _areSurchargesPackedByParentContext = false)
    {
        return [#CurrentVersion, this.getType(), #CurrentList] + [super(_areSurchargesPackedByParentContext)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>toBOMCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a <c>BOMCalcTrans</c> record based on this costing sheet node.
    /// </summary>
    /// <param name="_costProfitSet">
    ///     An element of the <c>CostProfitSet</c> enumeration that identifies the profit settings.
    /// </param>
    /// <param name="_transDate">
    ///     The date of the transaction.
    /// </param>
    /// <returns>
    ///     The <c>BOMCalcTrans</c> record.
    /// </returns>
    public BOMCalcTrans toBOMCalcTrans(CostProfitSet _costProfitSet, TransDate _transDate)
    {
        BOMCalcTrans bomCalcTrans = super(_costProfitSet, _transDate);

        if (rateSubtype == CostCalculationRateSubtype::Quantity)
        {
            bomCalcTrans.UnitId = this.getCostCalcTransData().getUnitID();
        }

        bomCalcTrans.CalcType = ItemCalcType::IndirectRate;

        return bomCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toPmfCoByProdCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PmfCoByProdCalcTrans</c> record
    /// </summary>
    /// <param name="_prodCalcMode">
    /// A <c>CostSheetProdCalcMode</c> enumeration value.
    /// </param>
    /// <param name="_costProfitSet">
    /// A <c>CostProfitSet</c> enumeration value; optional.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// A <c>PmfCoByProdCalcTrans</c> record
    /// </returns>
    public PmfCoByProdCalcTrans toPmfCoByProdCalcTrans(
        CostSheetProdCalcMode   _prodCalcMode,
        CostProfitSet           _costProfitSet = CostProfitSet::Standard,
        TransDate               _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        PmfCoByProdCalcTrans prodCalcTrans = super(_prodCalcMode, _costProfitSet, _transDate);

        if (rateSubtype == CostCalculationRateSubtype::Quantity)
        {
            prodCalcTrans.UnitId = this.getCostCalcTransData().getUnitID();
        }

        prodCalcTrans.CalcType = ItemCalcType::IndirectRate;

        return prodCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toProdCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a <c>ProdCalcTrans</c> record based on this costing sheet node.
    /// </summary>
    /// <param name="_prodCalcMode">
    ///     An element of the <c>CostSheetProdCalcMode</c> enumeration that identifies whether
    ///     the calculation is made for estimation or actual costing.
    /// </param>
    /// <param name="_costProfitSet">
    ///     An element of the <c>CostProfitSet</c> enumeration that identifies the profit settings.
    /// </param>
    /// <param name="_transDate">
    ///     The date of the transaction.
    /// </param>
    /// <returns>
    ///     The <c>ProdCalcTrans</c> record.
    /// </returns>
    public ProdCalcTrans toProdCalcTrans(
        CostSheetProdCalcMode  _prodCalcMode,
        CostProfitSet           _costProfitSet = CostProfitSet::Standard,
        TransDate               _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
        )
    {
        ProdCalcTrans prodCalcTrans = super(_prodCalcMode, _costProfitSet, _transDate);

        if (rateSubtype == CostCalculationRateSubtype::Quantity)
        {
            prodCalcTrans.UnitId = this.getCostCalcTransData().getUnitID();
        }

        prodCalcTrans.CalcType = ItemCalcType::IndirectRate;

        return prodCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toProdIndirectTrans</Name>
				<Source><![CDATA[
    public ProdIndirectTrans toProdIndirectTrans()
    {
        ProdIndirectTrans prodIndirectTrans = super();

        prodIndirectTrans.RateSubtype = rateSubtype;

        return prodIndirectTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container           base;
        boolean             ret;
        Integer             version = RunBase::getVersion(_packedClass);
        CostSheetNodeType  nodeType;

        switch (version)
        {
            case #CurrentVersion:
                [version, nodeType, #CurrentList, base] = _packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(CostSheet _costSheet)
    {
        boolean ret = super(_costSheet);

        ret = (rateSubtype == CostCalculationRateSubtype::Undefined ? this.checkFailed("@SYS105359") :
                                                                      true) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>CostSheetNodeCalculationRate</c> class.
    /// </summary>
    /// <param name="_costSheetNodeTable">
    ///     The record in the <c>CostSheetNodeTable</c> table that will be used to initialize this object.
    /// </param>
    /// <param name="_parentNodeId">
    ///     The ID of the parent node.
    /// </param>
    /// <param name="_modeStrategy">
    ///     The <c>CostSheetModeStrategy</c> object that controls the creation of the costing sheet.
    /// </param>
    /// <param name="_parentCostGroupId">
    ///     The ID of the <c>CostSheetNodeGroup</c> object that the calculation node belongs to.
    /// </param>
    /// <returns>
    ///     The new instance of the <c>CostSheetNodeCalculationRate</c> class.
    /// </returns>
    public static CostSheetNodeCalculationRate construct(
        CostSheetNodeTable      _costSheetNodeTable,
        CostSheetNodeId         _parentNodeId,
        CostSheetModeStrategy   _modeStrategy,
        CostGroupId             _parentCostGroupId)
    {
        return new CostSheetNodeCalculationRate(_costSheetNodeTable, _parentNodeId, _modeStrategy, _parentCostGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>CostSheetNodeCalculationRate</c> class.
    /// </summary>
    /// <param name="_packedNode">
    ///     A container that holds a serialized <c>CostSheetNodeCalculationRate</c> object.
    /// </param>
    /// <returns>
    ///     The new instance of the <c>CostSheetNodeCalculationRate</c> class.
    /// </returns>
    public static CostSheetNodeCalculationRate create(container _packedNode)
    {
        CostSheetNodeCalculationRate node = CostSheetNodeCalculationRate::construct(null, 0, CostSheetModeStrategyPackUnpack::construct(), '');
        boolean ret = node.unpack(_packedNode);

        return ret ? node : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubTypeAsItemCalcType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps the <c>CostCalculationRateSubtype</c> to the corresponding <c>ItemCalcType</c>.
    /// </summary>
    /// <param name = "_rateSubtype">A <c>CostCalculationRateSubtype</c> value.</param>
    /// <returns>The <c>ItemCalcType</c> corresponding to the specified <c>CostCalculationRateSubtype</c>.</returns>
    [Replaceable]
    protected static ItemCalcType getSubTypeAsItemCalcType(CostCalculationRateSubtype _rateSubtype)
    {
        ItemCalcType ret;

        switch (_rateSubtype)
        {
            case CostCalculationRateSubtype::Process :
                ret = ItemCalcType::Process;
                break;

            case CostCalculationRateSubtype::Setup :
                ret = ItemCalcType::Setup;
                break;

            case CostCalculationRateSubtype::Quantity :
                ret = ItemCalcType::Qty;
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>