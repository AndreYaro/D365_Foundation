<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTableType_CustPayment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalTableType_CustPayment</c> class is the derivative for the customer payment journal type.
/// </summary>
public class LedgerJournalTableType_CustPayment extends LedgerJournalTableType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultJournalType</Name>
				<Source><![CDATA[
    protected void defaultJournalType()
    {
        switch (operation)
        {
            case LedgerJournalOperation::Create:
                this.defaultFieldValue(fieldnum(LedgerJournalTable, JournalType), LedgerJournalType::CustPayment);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalNameValidJournalType</Name>
				<Source><![CDATA[
    protected boolean isJournalNameValidJournalType()
    {
        boolean journalTypeIsValid;

        if (ledgerJournalName
            && ledgerJournalName.JournalType == LedgerJournalType::CustPayment)
        {
            journalTypeIsValid = true;
        }
        else
        {
            journalTypeIsValid = false;
        }

        return journalTypeIsValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>LedgerJournalTableType_CustPayment</c> class by using the specified
    /// operation and interaction context.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// An instance of the <c>LedgerJournalTable</c> table.
    /// </param>
    /// <param name="_operation">
    /// An enumeration value that is used to determine which business logic should be executed.
    /// </param>
    /// <param name="_isInteractiveContext">
    /// A Boolean value that determines the context of the caller.
    /// </param>
    protected void new(
        LedgerJournalTable _ledgerJournalTable,
        LedgerJournalOperation _operation,
        boolean _isInteractiveContext)
    {
        Debug::assert(_operation == LedgerJournalOperation::Create);

        ledgerJournalTable = _ledgerJournalTable;
        operation = _operation;
        isInteractiveContext = _isInteractiveContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an initialized instance of the <c>LedgerJournalTableType_CustPayment</c> class with the specified
    /// operation and interaction context.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// An instance of the <c>LedgerJournalTable</c> table that is used to track state for the instance
    /// defaulting and validation logic is executed against.
    /// </param>
    /// <param name="_operation">
    /// An enumeration used to determine which business logic should be executed.
    /// </param>
    /// <param name="_isInteractiveContext">
    /// A Boolean value that determines the caller context.
    /// </param>
    /// <returns>
    /// A <c>LedgerJournalTableType_CustPayment</c> instance.
    /// </returns>
    public static LedgerJournalTableType_CustPayment construct(
        LedgerJournalTable _ledgerJournalTable,
        LedgerJournalOperation _operation,
        boolean _isInteractiveContext)
    {
        return new LedgerJournalTableType_CustPayment(_ledgerJournalTable, _operation, _isInteractiveContext);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>