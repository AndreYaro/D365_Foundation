<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>McrPriceHistoryUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRPriceHistoryUpdate</c> class.
/// </summary>
/// <remarks>
///     Class for updating price history that should be used for updates, instead of manipulating the tables
///     <c>MCRPriceHistory</c> and <c>MCRPriceHistoryRef</c>.
/// </remarks>
class McrPriceHistoryUpdate
{
    MCRPriceHistoryLine  mcrPriceHistoryLine;
    Set                  setFoundPriceHistoryRecId;
    boolean              useRetailPricing;

    private MCRPriceInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>combineLists</Name>
				<Source><![CDATA[
    ///    /// <summary>
    /// Combines two lists into a single list.
    /// </summary>
    /// <param name="_list1">
    /// The first list to be combined.
    /// </param>
    /// <param name="_list2">
    /// The second list to be combined.
    /// </param>
    /// <returns>
    /// A list that contains the two combined specified lists.
    /// </returns>
    private RecordSortedList combineLists(RecordSortedList _list1, RecordSortedList _list2)
    {
        boolean             moreRecords;
        PriceDiscTable      priceDiscTable;
        RecordSortedList    recordSortedList;
        // Build a new record list.
        recordSortedList = new RecordSortedList(tableNum(PriceDiscTable));
        recordSortedList.sortOrder(fieldNum(PriceDiscTable, RecId));

        if (_list1)
        {
            // Add all records from the first list to a new list.
            moreRecords = _list1.first(priceDiscTable);
            while (moreRecords)
            {
                recordSortedList.ins(priceDiscTable);
                moreRecords = _list1.next(priceDiscTable);
            }
        }

        if (_list2)
        {
            // Add all records from the second list to a new list.
            moreRecords = _list2.first(priceDiscTable);
            while (moreRecords)
            {
                recordSortedList.ins(priceDiscTable);
                moreRecords = _list2.next(priceDiscTable);
            }
        }

        return recordSortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceHistoryUpdateEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether price history is enabled and whether a price history
    /// update should ever be called.
    /// </summary>
    /// <param name="_moduleInventPurchSales">
    /// The module to use to determine whether price history is enabled.
    /// </param>
    /// <returns>
    /// true if price history update can occur; otherwise, false.
    /// </returns>
    public static boolean isPriceHistoryUpdateEnabled(ModuleInventPurchSales _moduleInventPurchSales)
    {
        return TradeModuleType::newFromModule(_moduleInventPurchSales).isMCRPriceHistoryUpdateEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateHistory</Name>
				<Source><![CDATA[
    public void findOrCreateHistory(Common _common)
    {
        MCRPriceHistory mcrPriceHistory;
        Version         version;

        // Find the latest version of price history for the table and record.
        select firstonly mcrPriceHistory order by Version desc
            where mcrPriceHistory.RefRecId      == _common.RecId
               && mcrPriceHistory.RefTableId    == _common.TableId;

        if (!mcrPriceHistory || !mcrPriceHistory.equal(_common))
        {
            version = mcrPriceHistory.Version + 1;

        mcrPriceHistory.clear();

        mcrPriceHistory.Version = version;
        mcrPriceHistory.initFrom(_common);

        if (mcrPriceHistory.validateWrite())
        {
            mcrPriceHistory.insert();
        }
        }

        setFoundPriceHistoryRecId.add(mcrPriceHistory.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPriceDisc_LineDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>PriceDisc_LineDisc</c> object from the price history line.
    /// </summary>
    /// <returns>
    /// An initialized <c>PriceDisc_LineDisc</c> object.
    /// </returns>
    /// <remarks>
    /// In case the object is not provided by the update method, this will create
    /// the object using all the price history line data.
    /// </remarks>
    private PriceDisc_LineDisc initPriceDisc_LineDisc()
    {
        PriceDisc_LineDisc priceDisc_LineDisc;

        priceDisc_LineDisc = PriceDisc_LineDisc::construct();

        // Initialize the discount search using price history line.
        priceDisc_LineDisc.parmModuleType(mcrPriceHistoryLine.parmModuleType());
        priceDisc_LineDisc.parmItemId(mcrPriceHistoryLine.parmItemId());
        priceDisc_LineDisc.parmInventDim(mcrPriceHistoryLine.parmInventDim());
        priceDisc_LineDisc.parmUnitID(mcrPriceHistoryLine.parmUnitId());
        priceDisc_LineDisc.parmDiscDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        priceDisc_LineDisc.parmQty(mcrPriceHistoryLine.parmQty());
        priceDisc_LineDisc.parmAccountNum(mcrPriceHistoryLine.parmAccountId());
        priceDisc_LineDisc.parmCurrencyCode(mcrPriceHistoryLine.parmCurrencyCode());
        priceDisc_LineDisc.parmAccountLineDiscCode(mcrPriceHistoryLine.parmLineDiscCode());
        priceDisc_LineDisc.parmItemLineDiscCode(mcrPriceHistoryLine.parmItemLineDiscCode());

        return priceDisc_LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>MCRPriceHistoryUpdate</c> object.
    /// </summary>
    /// <param name="_common">
    /// The record from which to initialize the price history update.
    /// </param>
    protected void new(Common _common)
    {
        mcrPriceHistoryLine = MCRPriceHistoryLine::construct(_common);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the price history and, if necessary, any price history references for
    /// the record that was recently updated and requires a price history.
    /// </summary>
    /// <param name="_priceDisc_Price">
    /// The object from which to retrieve already found <c>PriceDiscTable</c> prices; optional.
    /// </param>
    /// <param name="_priceDisc_LineDisc">
    /// The object from which to retrieve already found <c>PriceDiscTable</c> discounts; optional.
    /// </param>
    public void update(
        PriceDisc_Price     _priceDisc_Price    = null,
        PriceDisc_LineDisc  _priceDisc_LineDisc = null)
    {
        #OCCRetryCount

        RecordSortedList                    recordSortedListPriceDisc;

        if (mcrPriceHistoryLine.allowPriceHistoryUpdate())
        {
            using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().priceHistoryActivities().update())
            {
                setFoundPriceHistoryRecId = new Set(Types::Int64);

                try
                {
                    ttsbegin;

                    // If no PriceDisc_LineDisc object is provided, then need to create one
                    // either if price history is enabled or merchandising event is enabled.
                    if (! _priceDisc_LineDisc)
                    {
                        _priceDisc_LineDisc = this.initPriceDisc_LineDisc();
                    }

                    _priceDisc_LineDisc.parmUseRetailPricing(this.parmUseRetailPricing());

                    if (mcrPriceHistoryLine.isPriceDetailsEnabled())
                    {
                        recordSortedListPriceDisc = this.initializePriceDiscList(_priceDisc_Price, _priceDisc_LineDisc);

                        // Update PriceDisc history (trade agreements).
                        this.updatePriceDisc(recordSortedListPriceDisc);

                        // Update InventTableModule history (base price).
                        this.updateInventTableModule();
                    }

                    if (mcrPriceHistoryLine.isMerchandisingEventHistoryEnabled())
                    {
                        if (!MCRPriceHistoryLine.isPriceDetailsEnabled())
                        {
                            // Only need to look for merchandising event discounts if price details is
                            // disabled.  If price details is enabled, merchandising event discounts are
                            // already found in call to findLineDiscAgreement above.
                            _priceDisc_LineDisc.mcrFindTradePromoLineDisc();
                        }

                        this.updateMerchEventPricing(_priceDisc_LineDisc.parmMCRMerchEventList());
                    }

                    this.updatePriceHistoryLineReferences(false);

                    ttscommit;
                }
                catch (Exception::DuplicateKeyException)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::DuplicateKeyExceptionNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePriceDiscList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes price discount list.
    /// </summary>
    /// <param name = "_priceDisc_Price">
    ///     The list of prices.
    /// </param>
    /// <param name = "_priceDisc_LineDisc">
    ///     The list of discounts
    /// </param>
    /// <returns>
    ///     List of price discounts.
    /// </returns>
    protected RecordSortedList initializePriceDiscList(
        PriceDisc_Price     _priceDisc_Price,
        PriceDisc_LineDisc  _priceDisc_LineDisc)
    {
        RecordSortedList    recordSortedListPriceDisc;

        if (!_priceDisc_Price)
        {
            // PriceDisc_Price doesn't exist.  Create and find prices.
            _priceDisc_Price = this.initPriceDisc_Price();
            _priceDisc_Price.parmUseRetailPricing(this.parmUseRetailPricing());
            _priceDisc_Price.findPriceAgreement();
        }
        // search for price trade agreements if the caller didn't searched
        else if (_priceDisc_Price.parmMCRPriceDiscTableList() == null || _priceDisc_Price.parmUseRetailPricing())
        {
            _priceDisc_Price.findPriceAgreement();
        }

        // Search for discounts (includes searching for merchandising event discounts)
        _priceDisc_LineDisc.findLineDiscAgreement();

        // Combine price search results and discount search results.
        recordSortedListPriceDisc = this.combineLists(
                     _priceDisc_Price.parmMCRPriceDiscTableList(),
                     _priceDisc_LineDisc.parmMCRPriceDiscTableList());

        return recordSortedListPriceDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserting the references.
    /// </summary>
    /// <param name = "_setEnumerator">
    ///     Count off enumerator.
    /// </param>
    /// <param name = "_refForInsertingNew">
    ///     The RecId of a <c>MCROrderLine2PriceHistoryRef</c> table to use for
    /// setting the reference field of the price history line.
    /// </param>
    /// <param name = "_recordInsertListReferences">
    ///     The record list for inserting.
    /// </param>
    /// <returns>
    ///     Insert record list for inserting into data base.
    /// </returns>
    protected RecordInsertList insertReference(
        SetEnumerator                       _setEnumerator, 
        MCROrderLinePriceHistoryReference   _refForInsertingNew,
        RecordInsertList                    _recordInsertListReferences)
    {
        MCRPriceHistoryRef  mcrPriceHistoryRef;

        mcrPriceHistoryRef.clear();
        mcrPriceHistoryRef.PriceHistoryRecId            = _setEnumerator.current();
        mcrPriceHistoryRef.MCROrderLine2PriceHistoryRef = _refForInsertingNew;
        _recordInsertListReferences.add(mcrPriceHistoryRef);

        return _recordInsertListReferences;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTableModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates price history, if necessary, from <c>InventTableModule</c>.
    /// </summary>
    protected void updateInventTableModule()
    {
        InventTableModule   inventTableModule;

        // Find current InventTableModule record.
        inventTableModule = InventTableModule::find(
            mcrPriceHistoryLine.parmItemId(),
            mcrPriceHistoryLine.parmModuleType());

        if (inventTableModule)
        {
            this.findOrCreateHistory(inventTableModule);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMerchEventPricing</Name>
				<Source><![CDATA[
    private void updateMerchEventPricing(RecordSortedList _recordSortedListMerchEventPricing)
    {
        TAMMerchEventPricing    tamMerchEventPricing;
        boolean                 loopMerchEventPricing;

        // Create references for all found merchandising events.
        if (_recordSortedListMerchEventPricing.len() != 0)
        {
            loopMerchEventPricing = _recordSortedListMerchEventPricing.first(tamMerchEventPricing);
            while (loopMerchEventPricing)
            {
                this.findOrCreateHistory(tamMerchEventPricing);

                loopMerchEventPricing = _recordSortedListMerchEventPricing.next(tamMerchEventPricing);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMultiline</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the price history records.
    /// </summary>
    /// <param name="_priceDisc">
    /// The <c>PriceDisc</c> used to update the history record.
    /// </param>
    public void updateMultiline(PriceDisc _priceDisc)
    {
        if (mcrPriceHistoryLine.allowPriceHistoryUpdate())
        {
        ttsbegin;

            setFoundPriceHistoryRecId = new Set(Types::Int64);

            this.updatePriceDisc(_priceDisc.parmMCRPriceDiscTableList());

            this.updatePriceHistoryLineReferences(true);

        ttscommit;
    }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriceDisc</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates history (if necessary) for trade agreements.
    /// </summary>
    /// <param name="_recordSortedListPriceDisc">
    ///     A <c>RecordSortedList</c> based on class <c>PriceDisc</c>.
    /// </param>
    private void updatePriceDisc(RecordSortedList _recordSortedListPriceDisc)
    {
        PriceDiscTable      priceDiscTable;
        boolean             loopPriceDisc;

        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().priceHistoryActivities().updatePriceDisc())
        {
            // Create references for all found trade agreements.
            if (_recordSortedListPriceDisc.len() != 0)
            {
                loopPriceDisc = _recordSortedListPriceDisc.first(priceDiscTable);
                while (loopPriceDisc)
                {
                    this.findOrCreateHistory(priceDiscTable);

                    loopPriceDisc = _recordSortedListPriceDisc.next(priceDiscTable);
                }
            }

            activityContext
                .addCustomProperty('PriceDiscRecords', int2Str(_recordSortedListPriceDisc.len()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Instantiates class <c>MCRPriceHistoryUpdate</c>.
    /// </summary>
    /// <param name="_common">
    ///     A <c>common</c> data record used to instantiate class <c>MCRPriceHistoryUpdate</c>.
    /// </param>
    /// <returns>
    ///     A price history object if it can be built from _common; otherwise a null uninitiaizled object.
    /// </returns>
    /// <remarks>
    ///     Proper way to create instantiated class <c>MCRPriceHistoryUpdate</c>. It can be created from a buffer
    ///     or an object.
    /// </remarks>
    public static MCRPriceHistoryUpdate construct(Common _common)
    {
        MCRPriceHistoryUpdate mcrPriceHistoryUpdate;

        mcrPriceHistoryUpdate = new MCRPriceHistoryUpdate(_common);

        return mcrPriceHistoryUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructNoThrow</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Instantiates class <c>MCRPriceHistoryUpdate</c>.
    /// </summary>
    /// <param name="_common">
    ///     Buffer from which to construct update object.
    /// </param>
    /// <returns>
    ///     A price history object if it can be built from _common; otherwise a null uninitiaizled object.
    /// </returns>
    /// <remarks>
    ///     Build a price history update object if possible. An uninitialized object may be returned if
    ///     the buffer is not of the right type.
    ///     See map <c>SalesPurchLine</c> setPriceAgreement.
    /// </remarks>
    public static MCRPriceHistoryUpdate constructNoThrow(Common _common)
    {
        MCRPriceHistoryUpdate   mcrPriceHistoryUpdate;
        // Construct from buffer
        switch (_common.TableId)
        {
            case tableNum(PurchLine):
            case tableNum(SalesLine):
            case tableNum(SalesQuotationLine):
                mcrPriceHistoryUpdate = new MCRPriceHistoryUpdate(_common);
                break;
        }
        return mcrPriceHistoryUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseRetailPricing</Name>
				<Source><![CDATA[
    public boolean parmUseRetailPricing(boolean _useRetailPricing = useRetailPricing)
    {
        useRetailPricing = _useRetailPricing;
        return useRetailPricing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteNoLongerFoundReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes any references that the price history line has to price history
    /// records that are no longer applicable for the line.
    /// </summary>
    /// <param name="_setCurrentPriceHistoryRecId">
    /// A set that contains RecIds of <c>MCRPriceHistory</c> records for which
    /// the price history line currently has references.
    /// </param>
    /// <remarks>
    /// An example is that a trade agreement for which a line no longer qualifies
    /// due to quantity change or inventory dimension change.
    /// </remarks>
    private void deleteNoLongerFoundReferences(Set _setCurrentPriceHistoryRecId)
    {
        MCRPriceHistoryRef  mcrPriceHistoryRef;
        Set                 setNoLongerFoundPriceHistoryRecId;
        SetEnumerator       setEnumerator;
        TmpRecIdFilter      tmpRecIdFilter;

        setNoLongerFoundPriceHistoryRecId = new Set(Types::Int64);

        // RecIds that are in the current set but not in the found set are price history
        // records that represent trade agreements that no longer apply for the price
        // history line.
        setNoLongerFoundPriceHistoryRecId = Set::difference(
            _setCurrentPriceHistoryRecId,
            setFoundPriceHistoryRecId);

        if (!setNoLongerFoundPriceHistoryRecId.empty())
        {
            mcrPriceHistoryRef.skipDeleteMethod(true);

            setEnumerator = setNoLongerFoundPriceHistoryRecId.getEnumerator();

            if (setNoLongerFoundPriceHistoryRecId.elements() == 1)
            {
                // Advance to first element
                setEnumerator.moveNext();

                delete_from mcrPriceHistoryRef
                    where mcrPriceHistoryRef.MCROrderLine2PriceHistoryRef == mcrPriceHistoryLine.parmMCROrderLine2PriceHistoryRef()
                        && mcrPriceHistoryRef.PriceHistoryRecId            == setEnumerator.current();
            }
            else
            {
                // If there is more than one reference to delete, collect the RecIds
                // in temporary table.
                while (setEnumerator.moveNext())
                {
                    tmpRecIdFilter.clear();
                    tmpRecIdFilter.RefRecId = setEnumerator.current();
                    tmpRecIdFilter.doInsert();
                }

                // Delete the references to the price history RecIds gathered in the temp table.
                delete_from mcrPriceHistoryRef
                    where mcrPriceHistoryRef.MCROrderLine2PriceHistoryRef == mcrPriceHistoryLine.parmMCROrderLine2PriceHistoryRef()
                    exists join tmpRecIdFilter
                        where mcrPriceHistoryRef.PriceHistoryRecId == tmpRecIdFilter.RefRecId;
            }

            mcrPriceHistoryRef.skipDeleteMethod(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPriceDisc_Price</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>PriceDisc_LineDisc</c> object from the price history line.
    /// </summary>
    /// <returns>
    /// An initialized <c>PriceDisc_LineDisc</c> object.
    /// </returns>
    /// <remarks>
    /// In case the object is not provided by the update method, this will create
    /// the object using all the price history line data.
    /// </remarks>
    private PriceDisc_Price initPriceDisc_Price()
    {
        PriceDisc_Price priceDisc_Price;

        priceDisc_Price = PriceDisc_Price::construct();

        // Initialize the price search using price history line.
        priceDisc_Price.parmAccountNum(mcrPriceHistoryLine.parmAccountId());
        priceDisc_Price.parmCurrencyCode(mcrPriceHistoryLine.parmCurrencyCode());
        priceDisc_Price.parmInventDim(mcrPriceHistoryLine.parmInventDim());
        priceDisc_Price.parmItemId(mcrPriceHistoryLine.parmItemId());
        priceDisc_Price.parmModuleType(mcrPriceHistoryLine.parmModuleType());
        priceDisc_Price.parmPriceDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        priceDisc_Price.parmPriceGroupId(mcrPriceHistoryLine.parmPriceGroupId());
        priceDisc_Price.parmQty(mcrPriceHistoryLine.parmQty());
        priceDisc_Price.parmUnitID(mcrPriceHistoryLine.parmUnitId());

        return priceDisc_Price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSetCurrentPriceHistoryRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a set containing RecIds of <c>MCRPriceHistory</c> records to which
    /// the price history line currently refers.
    /// </summary>
    /// <param name="_multiLineUpdate">
    /// true if running a multi-line discount update; otherwise, false.
    /// </param>
    /// <returns>
    /// A set containing RecIds to which price history line refers.  If the price
    /// history line does not refer to anything, then an empty set.
    /// </returns>
    protected Set initSetCurrentPriceHistoryRecId(boolean _multiLineUpdate)
    {
        MCRPriceHistory                     mcrPriceHistory;
        MCRPriceHistoryRef                  mcrPriceHistoryRef;
        Set                                 setCurrentPriceHistoryRecId;
        MCROrderLinePriceHistoryReference   currentRef;

        setCurrentPriceHistoryRecId = new Set(Types::Int64);
        currentRef                  = mcrPriceHistoryLine.parmMCROrderLine2PriceHistoryRef();

        if (currentRef)
        {
            if (_multiLineUpdate)
            {
                while select RecId from mcrPriceHistoryRef
                    where mcrPriceHistoryRef.MCROrderLine2PriceHistoryRef == currentRef
                    join RecId from mcrPriceHistory
                        where mcrPriceHistoryRef.PriceHistoryRecId == mcrPriceHistory.RecId
                           && mcrPriceHistory.PriceHistoryType     == MCRPriceHistoryType::MultiLineDisc
                {
                    setCurrentPriceHistoryRecId.add(mcrPriceHistory.RecId);
                }
            }
            else
            {
                while select RecId from mcrPriceHistoryRef
                    where mcrPriceHistoryRef.MCROrderLine2PriceHistoryRef == currentRef
                    join RecId from mcrPriceHistory
                        where mcrPriceHistoryRef.PriceHistoryRecId == mcrPriceHistory.RecId
                           && mcrPriceHistory.PriceHistoryType     != MCRPriceHistoryType::MultiLineDisc
                {
                    setCurrentPriceHistoryRecId.add(mcrPriceHistory.RecId);
                }
            }
        }
        return setCurrentPriceHistoryRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewlyFoundReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts references to price history records that are found in the
    /// latest price/discount search and did not apply before.
    /// </summary>
    /// <param name="_setCurrentPriceHistoryRecId">
    /// A set that contains RecIds of <c>MCRPriceHistory</c> records for which
    /// the price history line currently has references.
    /// </param>
    /// <param name="_refForInsertingNew">
    /// The RecId of a <c>MCROrderLine2PriceHistoryRef</c> table to use for
    /// setting the reference field of the price history line.
    /// </param>
    private void insertNewlyFoundReferences(
        Set                                 _setCurrentPriceHistoryRecId,
        MCROrderLinePriceHistoryReference   _refForInsertingNew)
    {
        Set                 setNewlyFoundPriceHistoryRecId;
        SetEnumerator       setEnumerator;
        RecordInsertList    recordInsertListReferences;

        setNewlyFoundPriceHistoryRecId = new Set(Types::Int64);

        // RecIds that are in the found set but not in the current set are price history
        // records that represent trade agreements that apply but did not apply before.
        setNewlyFoundPriceHistoryRecId = Set::difference(
            setFoundPriceHistoryRecId,
            _setCurrentPriceHistoryRecId);

        if (!setNewlyFoundPriceHistoryRecId.empty())
        {
            // Use insert list to do bulk insert.
            recordInsertListReferences = new RecordInsertList(tableNum(mcrPriceHistoryRef));

            setEnumerator = setNewlyFoundPriceHistoryRecId.getEnumerator();

            while (setEnumerator.moveNext())
            {
                recordInsertListReferences = this.insertReference(setEnumerator, _refForInsertingNew, recordInsertListReferences);
            }

            recordInsertListReferences.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewOrderLineReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a new <c>MCROrderLine2PriceHistoryRef</c> record and updates
    /// the price history line's field from the newly inserted record.
    /// </summary>
    /// <returns>
    /// The RecId of the newly inserted <c>MCROrderLine2PriceHistoryRef</c>
    /// record.
    /// </returns>
    private MCROrderLinePriceHistoryReference insertNewOrderLineReference()
    {
        MCROrderLine2PriceHistoryRef mcrOrderLine2PriceHistoryRef;

        mcrOrderLine2PriceHistoryRef.insert();
        mcrPriceHistoryLine.updateMCROrderLine2PriceHistoryRef(mcrOrderLine2PriceHistoryRef.RecId);

        return mcrOrderLine2PriceHistoryRef.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriceHistoryLineReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or deletes references for the price history line based
    /// on the line's current references and the results of the price/discount
    /// search.
    /// </summary>
    /// <param name="_multiLineUpdate">
    /// true if running a multi-line discount update; otherwise, false.
    /// </param>
    private void updatePriceHistoryLineReferences(boolean _multiLineUpdate)
    {
        MCROrderLinePriceHistoryReference   origRef;
        MCROrderLinePriceHistoryReference   currentRef;
        MCROrderLinePriceHistoryReference   refForInsertingNew;
        Set                                 setCurrentPriceHistoryRecId;

        setCurrentPriceHistoryRecId = this.initSetCurrentPriceHistoryRecId(_multiLineUpdate);
        currentRef                  = mcrPriceHistoryLine.parmMCROrderLine2PriceHistoryRef();

        if (! currentRef)
        {
            // It is the first price/discount search so need new referece.
            currentRef = this.insertNewOrderLineReference();
        }

        // Only need to update the price history line's reference if the sets are not equal.
        // If the two sets are equal, then there is nothing to do.  The price history line
        // referes to the same trade agreements, merchandising events, and inventory module.
        if (!setCurrentPriceHistoryRecId.equal(setFoundPriceHistoryRecId))
        {
            refForInsertingNew = currentRef;
            origRef            = mcrPriceHistoryLine.parmOrigMCROrderLine2PriceHistoryRef();

            if (origRef && origRef == currentRef && !this.parmUseRetailPricing())
            {
                // There are differences, but reference field on the price history line
                // is the same as orig.  Need to create a new reference for new results.
                refForInsertingNew = this.insertNewOrderLineReference();

                this.insertReferenceHistory(origRef, refForInsertingNew);
            }

            this.deleteNoLongerFoundReferences(setCurrentPriceHistoryRecId);

            this.insertNewlyFoundReferences(setCurrentPriceHistoryRecId, refForInsertingNew);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReferenceHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts reference history.
    /// </summary>
    /// <param name = "_origRef">
    ///     The original price history reference record.
    /// </param>
    /// <param name = "_refForInsertingNew">
    ///     The new price history reference record.
    /// </param>
    protected void insertReferenceHistory(MCROrderLinePriceHistoryReference _origRef, MCROrderLinePriceHistoryReference _refForInsertingNew)
    {
        MCRPriceHistory                     mcrPriceHistory;
        MCRPriceHistoryRef                  mcrPriceHistoryRef;
        MCRPriceHistoryRef                  mcrPriceHistoryRefTemp;

        // Copy all original references to the new reference (regardless of whether multiline or not)
        insert_recordset mcrPriceHistoryRef(MCROrderLine2PriceHistoryRef, PriceHistoryRecId)
                    select _refForInsertingNew, PriceHistoryRecId from mcrPriceHistoryRefTemp
                        where mcrPriceHistoryRefTemp.MCROrderLine2PriceHistoryRef == _origRef
                        join mcrPriceHistory
                            where mcrPriceHistoryRefTemp.PriceHistoryRecId == mcrPriceHistory.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal MCRPriceInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = MCRPriceInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>