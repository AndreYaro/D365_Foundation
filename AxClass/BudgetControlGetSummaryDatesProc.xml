<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlGetSummaryDatesProc</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>BudgetControlGetSummaryDatesProc</c> is a budget control stored procedure.
/// </summary>
[ExportMetadata(enumStr(BudgetControlSQLObjectType), BudgetControlSQLObjectType::StoredProcedure),
 ExportAttribute(identifierstr(Dynamics.AX.Application.BudgetControlISQLObject))]
internal final class BudgetControlGetSummaryDatesProc implements BudgetControlISQLObject
{
    private const str procName = 'BudgetControlGetSummaryDatesProc';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    public str getName()
    {
        return procName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefinition</Name>
				<Source><![CDATA[
    public str getDefinition()
    {
        str sqlStatementText;

        sqlStatementText = @"
    CREATE PROCEDURE [BudgetControlGetSummaryDatesProc]
    (
         @PartitionId                       BIGINT
        ,@Interval                          INT
        ,@BudgetCycle                       BIGINT
        ,@TrackingDate                      DATETIME
        ,@SummaryTrackingDateBegin          DATETIME    OUTPUT
        ,@SummaryTrackingDateEnd            DATETIME    OUTPUT
        ,@ReturnMsg							NVARCHAR(4000) OUTPUT
        ,@logErrorFl                        CHAR(1) = 'N'
    )
    AS

    SET NOCOUNT ON

    -- declarations

    DECLARE  @SPName                 VARCHAR(126) = OBJECT_NAME(@@PROCID) -- the name of the stored proc
            ,@RetCode                INT = 0
            ,@ErrorTrying            NVARCHAR(4000) -- string describing command that failed
            ,@Rowcount               INT -- local variable for @@ROWCOUNT
            ,@Error_Number           INT -- from ERROR_NUMBER()
            ,@Error_Line             INT -- from ERROR_LINE()
            ,@Error_State            INT = 1 -- from ERROR_STATE()
            ,@Error_Severity         INT = 16 -- from ERROR_SEVERITY()
            ,@Error_Procedure        NVARCHAR(126) = OBJECT_NAME(@@PROCID) -- from ERROR_PROCEDURE()
            ,@ErrorMessage           NVARCHAR(4000) = N'' -- from ERROR_MESSAGE()
            ,@isIncludeErrorLineNum  CHAR(1) = 'Y'
            ,@BudgetControlBuildErrorMsg NVARCHAR(4000)

            ,@_INTERVAL_FiscalYear                                  INT     = 1
            ,@_INTERVAL_FiscalYearToDate                            INT     = 2
            ,@_INTERVAL_FiscalPeriod                                INT     = 3
            ,@_INTERVAL_TotalBudget                                 INT     = 4
            ,@_INTERVAL_BudgetToDate                                INT     = 5
            ,@_INTERVAL_Month                                       INT     = 6
            ,@_INTERVAL_Quarter                                     INT     = 7
            ,@_INTERVAL_MonthsToDate                                INT     = 8
            ,@_INTERVAL_QuartersToDate                              INT     = 9
    ;

    BEGIN TRY
        IF @Interval = @_INTERVAL_FiscalYear
          BEGIN
            SELECT @SummaryTrackingDateBegin = fy.[STARTDATE]
                    ,@SummaryTrackingDateEnd = fy.[ENDDATE]
            FROM    [BUDGETCONTROLCYCLEVIEW] vbc
            JOIN    [BUDGETCYCLETIMESPAN] bcts
                ON         vbc.[BUDGETCYCLETIMESPAN] = bcts.[RECID]
                AND        bcts.[PARTITION] = @PartitionId
            JOIN    [FISCALCALENDARYEAR] fy
                ON        bcts.[FISCALCALENDAR] = fy.[FISCALCALENDAR]
                AND       fy.[PARTITION] = @PartitionId
            WHERE    vbc.[RECID] = @BudgetCycle
                AND        @TrackingDate BETWEEN fy.[STARTDATE] AND fy.[ENDDATE]
            ;
          END
        ELSE IF @Interval = @_INTERVAL_FiscalYearToDate
          BEGIN
            SELECT @SummaryTrackingDateBegin = fy.[STARTDATE]
                    ,@SummaryTrackingDateEnd = fpen.[ENDDATE]
            FROM    [BUDGETCONTROLCYCLEVIEW] vbc
            JOIN    [BUDGETCYCLETIMESPAN] bcts
                ON        vbc.[BUDGETCYCLETIMESPAN] = bcts.[RECID]
                AND       bcts.[PARTITION] = @PartitionId
            JOIN    [FISCALCALENDARYEAR] fy
                ON        bcts.[FISCALCALENDAR] = fy.[FISCALCALENDAR]
                AND       fy.[PARTITION] = @PartitionId
            JOIN    [FISCALCALENDARPERIOD] fpen
                ON        fy.[RECID] = fpen.[FISCALCALENDARYEAR]
                AND       fpen.[PARTITION] = @PartitionId
            WHERE    vbc.[RECID] = @BudgetCycle
                AND    @TrackingDate BETWEEN fy.[STARTDATE] AND fy.[ENDDATE]
                AND @TrackingDate BETWEEN fpen.[STARTDATE] AND fpen.[ENDDATE]
            ;
          END
        ELSE IF @Interval = @_INTERVAL_FiscalPeriod
          BEGIN
            SELECT  @SummaryTrackingDateBegin = fp.[STARTDATE]
                    ,@SummaryTrackingDateEnd = fp.[ENDDATE]
            FROM    [BUDGETCONTROLCYCLEVIEW] vbc
            JOIN    [BudgetCycleTimeSpan] bcts
                ON      vbc.[BUDGETCYCLETIMESPAN] = bcts.[RECID]
                AND     bcts.[PARTITION] = @PartitionId
            JOIN    [FISCALCALENDARPERIOD] fp
                ON      fp.[STARTDATE] BETWEEN vbc.[STARTDATE] and vbc.[ENDDATE]
                AND     bcts.[FISCALCALENDAR] = fp.[FISCALCALENDAR]
                AND     @TrackingDate BETWEEN fp.[STARTDATE] AND fp.[ENDDATE]
                AND     fp.[PARTITION] = @PartitionId
            WHERE   vbc.[RECID] = @BudgetCycle
            ;
          END
        ELSE IF @Interval = @_INTERVAL_Month
          BEGIN
            SELECT  @SummaryTrackingDateBegin = MIN(fcp1.[STARTDATE])
                    ,@SummaryTrackingDateEnd = MAX(fcp1.[ENDDATE])
            FROM    [BUDGETCONTROLCYCLEVIEW] vbc
            JOIN    [BUDGETCYCLETIMESPAN] bcts
                ON      vbc.[BUDGETCYCLETIMESPAN] = bcts.[RECID]
                AND     bcts.[PARTITION] = @PartitionId
            JOIN    [FISCALCALENDARPERIOD] fcp
                ON      fcp.[STARTDATE] BETWEEN vbc.[STARTDATE] and vbc.[ENDDATE]
                AND     bcts.[FISCALCALENDAR] = fcp.[FISCALCALENDAR]
                AND     @TrackingDate BETWEEN fcp.[STARTDATE] AND fcp.[ENDDATE]
                AND     fcp.[PARTITION] = @PartitionId
            JOIN    [FISCALCALENDARPERIOD] fcp1
                ON      fcp1.[FISCALCALENDARYEAR] = fcp.[FISCALCALENDARYEAR]
                AND     fcp1.[MONTH] = fcp.[MONTH]
                AND     fcp1.[PARTITION] = @PartitionId
            WHERE   vbc.[RECID] = @BudgetCycle
            ;
          END
        ELSE IF @Interval = @_INTERVAL_MonthsToDate
          BEGIN
            SELECT    @SummaryTrackingDateBegin = fy.[STARTDATE]
                    ,@SummaryTrackingDateEnd = MAX(fcp1.[ENDDATE])
            FROM    [BUDGETCONTROLCYCLEVIEW] vbc
            JOIN    [BUDGETCYCLETIMESPAN] bcts
                ON        vbc.[BUDGETCYCLETIMESPAN] = bcts.[RECID]
                AND       bcts.[PARTITION] = @PartitionId
            JOIN    [FISCALCALENDARYEAR] fy
                ON        bcts.[FISCALCALENDAR] = fy.[FISCALCALENDAR]
                AND       fy.[PARTITION] = @PartitionId
            JOIN    [FISCALCALENDARPERIOD] fcp
                ON      fcp.[STARTDATE] BETWEEN fy.[STARTDATE] and fy.[ENDDATE]
                AND     bcts.[FISCALCALENDAR] = fcp.[FISCALCALENDAR]
                AND     @TrackingDate BETWEEN fcp.[STARTDATE] AND fcp.[ENDDATE]
                AND     fcp.[PARTITION] = @PartitionId
            JOIN    [FISCALCALENDARPERIOD] fcp1
                ON      ((fcp1.[FISCALCALENDARYEAR] = fy.[RECID]
                AND     fcp1.[MONTH] = fcp.[MONTH]
                )
                OR        fcp1.[RECID] = fcp.[RECID]
                )
                AND     fcp1.[PARTITION] = @PartitionId
            WHERE   vbc.[RECID] = @BudgetCycle
                AND     @TrackingDate BETWEEN fy.[STARTDATE] AND fy.[ENDDATE]
            GROUP BY fy.STARTDATE
            ;
          END

        ELSE IF @Interval = @_INTERVAL_Quarter
          BEGIN
            SELECT  @SummaryTrackingDateBegin = MIN(fcp1.[STARTDATE])
                    ,@SummaryTrackingDateEnd = MAX(fcp1.[ENDDATE])
            FROM    [BUDGETCONTROLCYCLEVIEW] vbc
            JOIN    [BUDGETCYCLETIMESPAN] bcts
                ON      vbc.[BUDGETCYCLETIMESPAN] = bcts.[RECID]
                AND     bcts.[PARTITION] = @PartitionId
            JOIN    [FISCALCALENDARPERIOD] fcp
                ON      fcp.[STARTDATE] BETWEEN vbc.[STARTDATE] and vbc.[ENDDATE]
                AND     bcts.[FISCALCALENDAR] = fcp.[FISCALCALENDAR]
                AND     @TrackingDate BETWEEN fcp.[STARTDATE] AND fcp.[ENDDATE]
                AND     fcp.[PARTITION] = @PartitionId
            JOIN    [FISCALCALENDARPERIOD] fcp1
                ON      fcp1.[FISCALCALENDARYEAR] = fcp.[FISCALCALENDARYEAR]
                AND     fcp1.[QUARTER] = fcp.[QUARTER]
                AND     fcp1.[PARTITION] = @PartitionId
            WHERE   vbc.[RECID] = @BudgetCycle
            ;
          END
        ELSE IF @Interval = @_INTERVAL_QuartersToDate
          BEGIN
            SELECT    @SummaryTrackingDateBegin = fy.[STARTDATE]
                    ,@SummaryTrackingDateEnd = MAX(fcp1.[ENDDATE])
            FROM    [BUDGETCONTROLCYCLEVIEW] vbc
            JOIN    [BUDGETCYCLETIMESPAN] bcts
                ON        vbc.[BUDGETCYCLETIMESPAN] = bcts.[RECID]
                AND       bcts.[PARTITION] = @PartitionId
            JOIN    [FISCALCALENDARYEAR] fy
                ON      bcts.[FISCALCALENDAR] = fy.[FISCALCALENDAR]
                AND     fy.[PARTITION] = @PartitionId
            JOIN    [FISCALCALENDARPERIOD] fcp
                ON      fcp.[STARTDATE] BETWEEN fy.[STARTDATE] and fy.[ENDDATE]
                AND     bcts.[FISCALCALENDAR] = fcp.[FISCALCALENDAR]
                AND     @TrackingDate BETWEEN fcp.[STARTDATE] AND fcp.[ENDDATE]
                AND     fcp.[PARTITION] = @PartitionId
            JOIN    [FISCALCALENDARPERIOD] fcp1
                ON      ((fcp1.[FISCALCALENDARYEAR] = fy.[RECID]
                AND     fcp1.[QUARTER] = fcp.[QUARTER]
                )
                OR        fcp1.[RECID] = fcp.[RECID]
                )
                AND       fcp1.[PARTITION] = @PartitionId
            WHERE   vbc.[RECID] = @BudgetCycle
                AND     @TrackingDate BETWEEN fy.[STARTDATE] AND fy.[ENDDATE]
            GROUP BY fy.STARTDATE
            ;
          END
        ELSE IF @Interval = @_INTERVAL_TotalBudget
          BEGIN
            SELECT  @SummaryTrackingDateBegin = vbc.[STARTDATE]
                    ,@SummaryTrackingDateEnd = vbc.[ENDDATE]
            FROM    [BUDGETCONTROLCYCLEVIEW] vbc
            WHERE   vbc.[RECID] = @BudgetCycle
            ;
          END
        ELSE IF @Interval = @_INTERVAL_BudgetToDate
          BEGIN
            SELECT  @SummaryTrackingDateBegin = vbc.[STARTDATE]
                    ,@SummaryTrackingDateEnd = fcpen.[ENDDATE]
            FROM    [BUDGETCONTROLCYCLEVIEW] vbc
            JOIN    [FISCALCALENDARPERIOD] fcpen
                ON      @TrackingDate BETWEEN fcpen.[STARTDATE] AND fcpen.[ENDDATE]
                AND     fcpen.[PARTITION] = @PartitionId
            WHERE   vbc.[RECID] = @BudgetCycle
            ;
          END;
    END TRY
    BEGIN CATCH
        SELECT   @Error_Number     = ERROR_NUMBER()
                ,@Error_Line       = ERROR_LINE()
                ,@Error_State      = ERROR_STATE()
                ,@Error_Severity   = ERROR_SEVERITY()
                ,@Error_Procedure  = ERROR_PROCEDURE()
                ,@ErrorMessage     = ERROR_MESSAGE();
        SELECT   @ErrorTrying = 'Set dates query';
        GOTO lblErrorTrap;
    END CATCH;

    -- normal termination

    RETURN (0)

    -- error termination

    lblErrorTrap:

    EXEC [BudgetControlBuildErrorMessageProc]  
         @callerProcedure       = @SPName
        ,@Error_Number          = @Error_Number
        ,@Error_Line            = @Error_Line
        ,@Error_State           = @Error_State
        ,@Error_Severity        = @Error_Severity
        ,@Error_Message         = @ErrorMessage
        ,@Error_Procedure       = @Error_Procedure
        ,@ErrorTrying           = @ErrorTrying
        ,@isIncludeErrorLineNum = @isIncludeErrorLineNum
        ,@ReturnErrorMsg		= @BudgetControlBuildErrorMsg OUTPUT
    ;

    IF @RetCode = 0
        BEGIN
            SELECT @RetCode = -1
        END

    SELECT @ReturnMsg = @BudgetControlBuildErrorMsg;

    RETURN (@RetCode)
        ";

        return sqlStatementText;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>