<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendCreatePaymJournalNote_Vend</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendCreatePaymJournalNote_Vend extends CustVendCreatePaymJournal_Vend implements BatchRetryable
{
    private CustVendNegInstStatus negInstStatus;
    private NoYes dueBillsOnly;
    private TransDate lackDate;
    private BankRemittanceType remittanceType;
    private LedgerJournalType ledgerJournalType;

    private DialogGroup dialogGroupNegInst;
    private DialogField dialogRemittanceType;

    protected DialogField dialogNegInstStatus;
    protected DialogField dialogDueBillsOnly;
    protected DialogField dialogLackDate;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        negInstStatus,
        lackDate,
        dueBillsOnly,
        remittanceType,
        ledgerJournalType
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    protected boolean calc(CustVendTransOpen    _vendTransOpen)
    {
        boolean ok = true;
        TransDate   dueDate;

        ok = ok && super(_vendTransOpen);

        if (ok && dueBillsOnly)
        {
            dueDate = _vendTransOpen.BankDiscNoticeDeadline ? _vendTransOpen.BankDiscNoticeDeadline
                :(_vendTransOpen.DueDate ? _vendTransOpen.DueDate : _vendTransOpen.TransDate);

            ok = ok && dueDate <= lackDate;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be built by using the <c>Dialog</c> class or by using a class that is created in
    /// the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        super();

        dialogPaymProposalType.visible(false);

        dialogGroupNegInst = dialog.addGroup("@SYS71440");

        dialogNegInstStatus = dialog.addFieldValue(enumstr(CustVendNegInstStatus), negInstStatus, "", "");

        if (LedgerJournalTable::find(ledgerJournalId).JournalType == LedgerJournalType::VendPromissoryNoteSettle)
        {
            dialogDueBillsOnly  = dialog.addFieldValue(enumstr(NoYes), dueBillsOnly, "@SYS73831", "@SYS73835");
            dialogLackDate      = dialog.addFieldValue(extendedtypestr(TransDate), lackDate, "@SYS14475", "@SYS73834");
            if (postingDateOption_IT)
            {
                dialogUseFutureDueDate.visible(false);
            }
        }

        // intercompany Promissory Note not supported - hide the selection which enables separate payment percompany and default it to false
        dialogProposeSeparatePaymentPerCompany.visible(false);
        dialogProposeSeparatePaymentPerCompany.value(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddOffsetAccountMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the menu item for the offset account that is associated with centralized payments processing
    ///    to the dialog box.
    /// </summary>
    /// <param name="_dialog">
    ///    The dialog box to which to add fields.
    /// </param>
    protected void dialogAddOffsetAccountMenuItem(Dialog _dialog)
    {
        // No offset account show for bill of exchange so method just initialized the backing values.
        this.parmDefaultOffsetAccountType(LedgerJournalACTypeForPaymProposal::None);
        this.parmDefaultOffsetLedgerDimension(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Transfers values from dialog box fields to the class member values that represent the user input.
    /// </summary>
    /// <returns>
    ///    The value of a call to the <c>super</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is invoked by the <c>RunBase</c> framework when the OK button of the dialog box is
    ///    pressed.
    /// </remarks>
    public boolean getFromDialog()
    {
        boolean     ret = true;

        negInstStatus = dialogNegInstStatus.value();

        if (dialogLackDate)
        {
            lackDate = dialogLackDate.value();
        }

        if (dialogDueBillsOnly)
        {
            dueBillsOnly = dialogDueBillsOnly.value();
        }

        ret = super();

        if (LedgerJournalTable::find(ledgerJournalId).JournalType == LedgerJournalType::VendPromissoryNoteSettle)
        {
            postingDate = lackDate;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalType</Name>
				<Source><![CDATA[
    public LedgerJournalType parmLedgerJournalType(LedgerJournalType _ledgerJournalType = ledgerJournalType)
    {
        ledgerJournalType = _ledgerJournalType;

        return ledgerJournalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the entry point of the payment proposal processing logic.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>RunBase</c> framework when the OK button is pressed.
    /// </remarks>
    public void run()
    {
        // intercompany Promissory Note not supported - setup to limit payment proposals to current company only
        limitPaymCreationToLedgerCompanyOnly = true;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);
        container   base;
        boolean     ret;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, base] = _packedClass;
                ret = super(base);
                break;

            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    protected void updateQuery()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryWithQueryRun</Name>
				<Source><![CDATA[
    protected void updateQueryWithQueryRun(QueryRun _queryRun)
    {
        QueryBuildDataSource    qbdsVendTrans;
        QueryBuildRange         qbrNegInstStatus;

        if (LedgerJournalTable::find(ledgerJournalId).JournalType != LedgerJournalType::VendPromissoryNoteDraw)
        {
            qbdsVendTrans = _queryRun.query().dataSourceTable(tablenum(VendTrans));

            qbrNegInstStatus = SysQuery::findOrCreateRange(qbdsVendTrans, fieldnum(VendTrans, PromissoryNoteStatus));

            qbrNegInstStatus.value(SysQuery::value(negInstStatus));
        }

        super(_queryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super();

        switch (LedgerJournalTable::find(ledgerJournalId).JournalType)
        {
            case LedgerJournalType::VendPaymRemittance :
                if (negInstStatus != CustVendNegInstStatus::Drawn      &&
                    negInstStatus != CustVendNegInstStatus::Redrawn    &&
                    negInstStatus != CustVendNegInstStatus::Invoiced)
                {
                    ret = checkFailed(strfmt("@SYS73045", negInstStatus));
                }
                break;

            case LedgerJournalType::VendPromissoryNoteRedraw:
                if (negInstStatus != CustVendNegInstStatus::Remitted    &&
                   negInstStatus != CustVendNegInstStatus::Honored)
                {
                    ret = checkFailed(strfmt("@SYS73045", negInstStatus));
                }
                break;

            case LedgerJournalType::VendPromissoryNoteSettle,
                 LedgerJournalType::VendPromissoryNoteDraw :
                break;

            default :
                ret = checkFailed("@SYS68235");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS75713";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        CustVendCreatePaymJournalNote_Vend custVendCreatePaymJournalNote_Vend;
        LedgerJournalTable ledgerJournalTable = args.caller().ledgerJournalTable();
        boolean canProceed;

        if (ledgerJournalTable.JournalNum)
        {
            if (ledgerJournalTable.JournalType == LedgerJournalType::VendPromissoryNoteDraw)
            {
                custVendCreatePaymJournalNote_Vend = new CustVendCreatePaymJournalNoteDraw();
            }
            else
            {
                custVendCreatePaymJournalNote_Vend = new CustVendCreatePaymJournalNote_Vend();
            }

            custVendCreatePaymJournalNote_Vend.getLast();
            custVendCreatePaymJournalNote_Vend.parmLedgerJournalId(ledgerJournalTable.JournalNum);
            custVendCreatePaymJournalNote_Vend.parmLedgerJournalType(ledgerJournalTable.JournalType);

            canProceed = custVendCreatePaymJournalNote_Vend.userInteraction(args).doPromptForCreatingPaymentProposal();

            if (canProceed)
            {
                custVendCreatePaymJournalNote_Vend.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>