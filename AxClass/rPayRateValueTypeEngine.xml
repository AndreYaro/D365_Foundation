<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayRateValueTypeEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayRateValueTypeEngine
{
    SysDictType         dictType;
    FormStringControl   stringControl;
    FormRealControl     realControl;
    FormComboBoxControl comboBoxControl;
    FormIntControl      intControl;
    FormCheckBoxControl critValueTypeControl;
    FormGroupControl    listValueGroupControl;
    RPayRateTrans       rPayRateTrans;
    RPayRateTable       rateTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Range displayValue(Common _common)
    {
        RPayRateTable payRateTable;
        RPayRateTrans payRateTrans;
        Range         rateValue;

        switch (_common.TableId)
        {
            case tableNum(RPayRateTable):
                payRateTable = _common;
                rateValue    = payRateTable.RateDefaultValue;
                break;
            case tableNum(RPayRateTrans):
                payRateTrans = _common;
                rateValue    = payRateTrans.RateValue;
                break;
        }
        return rateValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendedTypeId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected ExtendedTypeId extendedTypeId()
    {
        return extendedTypeNum(RPayRateValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayRateValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayRateValue getPayRateValue(Range _value, RPayRateCallContext _callContext)
    {
        return any2real(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControl</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initControl(Object _formControl)
    {
        _formControl.visible(true);

        if (dictType.labelDefined())
        {
            _formControl.label(dictType.label());
        }
        else
        {
            _formControl.label("@RUP99");
        }

        if (dictType.baseType() == Types::Enum)
        {
            _formControl.enumType(dictType.enumId());
        }
        else
        {
            _formControl.extendedDataType(dictType.id());
            if (dictType.relationObject())
            {
                _formControl.lookupButton(FormLookupButton::Always);
            }
            else
            {
                _formControl.lookupButton(FormLookupButton::Never);
            }
        }
        _formControl.displayLengthValue(dictType.displayLength());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void lookup(Object _formControl)
    {
        _formControl.performTypeLookup(this.extendedTypeId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new(FormRun _formRun)
    {
        if (_formRun)
        {
            this.setFormValueControls(_formRun);
        }
        dictType = new SysDictType(this.extendedTypeId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rPayRateTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayRateTable rPayRateTable(RPayRateTable _rateTable = rateTable)
    {
        rateTable = _rateTable;
        return rateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rPayRateTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayRateTrans rPayRateTrans(RPayRateTrans _rPayRateTrans = rPayRateTrans)
    {
        rPayRateTrans = _rPayRateTrans;
        return rPayRateTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormValueControls</Name>
				<Source><![CDATA[
    #define.stringControl("RateValueString")
    #define.realControl("RateValueReal")
    #define.intControl("RateValueInteger")
    #define.comboBoxControl("RateValueEnum")
    #define.critValueTypeControl("CritValueType")
    #define.defaultListValueGroup("DefaultListValueGroup")

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setFormValueControls(FormRun _formRun)
    {
        stringControl        = _formRun.design().controlName(#stringControl);
        realControl          = _formRun.design().controlName(#realControl);
        intControl           = _formRun.design().controlName(#intControl);
        comboBoxControl      = _formRun.design().controlName(#comboBoxControl);
        critValueTypeControl = _formRun.design().controlName(#critValueTypeControl);
        listValueGroupControl= _formRun.design().controlName(#defaultListValueGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTypedValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the values.
    /// </summary>
    /// <param name="_payRateValue">
    /// The value.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setTypedValue(anytype _payRateValue)
    {
        switch (dictType.baseType())
        {
            case Types::Real:
                rPayRateTrans.rateValueReal(true, _payRateValue);
                break;
            case Types::Integer:
                rPayRateTrans.rateValueInteger(true, _payRateValue);
                break;
            case Types::Enum:
                rPayRateTrans.rateValueEnum(true, _payRateValue);
                break;
            case Types::String:
                rPayRateTrans.rateValueString(true, _payRateValue);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateDesign()
    {
        realControl.visible(false);
        stringControl.visible(false);
        intControl.visible(false);
        comboBoxControl.visible(false);
        critValueTypeControl.allowEdit(false);
        if (listValueGroupControl)
        {
            listValueGroupControl.visible(false);
        }

        switch (dictType.baseType())
        {
            case Types::Real:
                this.initControl(realControl);
                break;
            case Types::Integer:
                this.initControl(intControl);
                break;
            case Types::Enum:
                this.initControl(comboBoxControl);
                break;
            case Types::String:
                this.initControl(stringControl);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validate(Object _ctrl)
    {
        DictRelation         dictRelation;
        boolean              ret = true;
        Query                relationQuery = new Query();
        QueryRun             relationQueryRun;
        QueryBuildDataSource relationDataSource;
        int                  i;

        dictRelation = dictType.relationObject();
        if (dictRelation && dictRelation.validate())
        {
            relationDataSource = relationQuery.addDataSource(dictRelation.table());
            for (i=1; i <= dictRelation.lines(); i++)
            {
                if (dictRelation.lineType(i) == TableRelation::ExternFixed)
                {
                    relationDataSource.addRange(dictRelation.lineExternTableValue(i)).value(queryValue(dictRelation.lineTableValue(i)));
                }
                else
                {
                    relationDataSource.addRange(dictRelation.lineExternTableValue(i)).value(queryValue(formControlValue(_ctrl,dictType.baseType())));
                }
            }
            relationQueryRun = new QueryRun(relationQuery);
            if (! relationQueryRun.next())
            {
                ret = false;
                info(strFmt("@GLS105985",
                             queryValue(formControlValue(_ctrl,dictType.baseType())),
                             tableId2pname(dictRelation.table())));
                _ctrl.undo();
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean validateValue(RPayRateTable _payRateTable,anytype _value)
    {
        DictRelation         dictRelation;
        boolean              ret = true;
        Query                relationQuery = new Query();
        QueryRun             relationQueryRun;
        QueryBuildDataSource relationDataSource;
        int                  i;

        dictRelation = dictType.relationObject();
        if (dictRelation && dictRelation.validate())
        {
            relationDataSource = relationQuery.addDataSource(dictRelation.table());
            for (i=1; i <= dictRelation.lines(); i++)
            {
                if (dictRelation.lineType(i) == TableRelation::ExternFixed)
                {
                    relationDataSource.addRange(dictRelation.lineExternTableValue(i)).value(queryValue(dictRelation.lineTableValue(i)));
                }
                else
                {
                    relationDataSource.addRange(dictRelation.lineExternTableValue(i)).value(queryValue(_value));
                }
            }
            relationQueryRun = new QueryRun(relationQuery);
            if (! relationQueryRun.next())
            {
                ret = false;
                info(strFmt("@GLS105985",
                             queryValue(_value),
                             tableId2pname(dictRelation.table())));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RpayRateValueTypeEngine construct(RpayRateValueType _payRateValueType = RpayRateValueType::RealValue,
                                                    FormRun           _formRun = null)
    {
        RpayRateValueTypeEngine rpayRateValueTypeEngine;

        switch (_payRateValueType)
        {
            case RpayRateValueType::RateValue:
                rpayRateValueTypeEngine = new RpayRateValueTypeEngine_RateValue(_formRun);
                break;

            case RpayRateValueType::NoYesValue:
                rpayRateValueTypeEngine = new RpayRateValueTypeEngine_NoYesValue(_formRun);
                break;

            case RpayRateValueType::TaxDeductionValue:
                rpayRateValueTypeEngine = new RpayRateValueTypeEngine_TaxDeductValue(_formRun);
                break;

            case RpayRateValueType::RealValue:
                rpayRateValueTypeEngine = new RpayRateValueTypeEngine_RealValue(_formRun);
                break;

            case RpayRateValueType::Criterion:
                rpayRateValueTypeEngine =  new RpayRateValueTypeEngine_CritValue(_formRun);
                break;

            case RpayRateValueType::CounterValue:
                rpayRateValueTypeEngine =  new RpayRateValueTypeEngine_CounterValue(_formRun);
                break;

            case RpayRateValueType::Enum:
                rpayRateValueTypeEngine =  new RpayRateValueTypeEngine_EnumValue(_formRun);
                break;

            default:
                rpayRateValueTypeEngine = new RpayRateValueTypeEngine(_formRun);
        }
        return rpayRateValueTypeEngine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>