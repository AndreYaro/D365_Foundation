<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetImpairmentTransactionsDP_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetImpairmentTransactionsDP_JP</c> class is the data provider for the <c>AssetImpairmentTransactions_JP</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(AssetImpairmentTransactionsContract_JP)),
    SRSReportQueryAttribute(queryStr(AssetImpairmentTransactions_JP))
]
public class AssetImpairmentTransactionsDP_JP extends SrsReportDataProviderPreProcessTempDB
{
    AssetImpairmentTransactionsTmp_JP       assetImpairmentTransactionsTmp;
    AssetImpairmentTransactionsContract_JP  contract;
    DimensionAttribute                      dimensionAttribute;
    QueryBuildDataSource                    qbdsAssetBookMerge;
    QueryBuildDataSource                    qbdsADTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetImpairmentTransactionsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>AssetImpairmentTransactionsTmp_JP</c> table.
    /// </summary>
    /// <returns>
    /// The <c>AssetImpairmentTransactionsTmp_JP</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetImpairmentTransactionsTmp_JP))
    ]
    public AssetImpairmentTransactionsTmp_JP getAssetImpairmentTransactionsTmp()
    {
        select assetImpairmentTransactionsTmp;
        return assetImpairmentTransactionsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the parameters.
    /// </summary>
    protected void initParameters()
    {
        contract            = this.parmDataContract();
        dimensionAttribute  = DimensionAttribute::findByLocalizedName(contract.parmDimensionAttribute());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetImpairmentTransactionsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>AssetImpairmentTransactionsTmp</c> table
    /// </summary>
    /// <param name="_query">
    /// The query.
    /// </param>
    protected void insertAssetImpairmentTransactionsTmp(Query _query)
    {
        QueryRun                            queryRun;
        AssetBook                           assetBook;
        AssetTrans                          assetTrans;
        AssetTable                          assetTable;
        AssetAmount                         transactionAmount;
        DimensionAttributeValueSetItemView  dimAttrSetItemView;

        queryRun = new QueryRun(_query);

        while (queryRun.next())
        {
            assetBook       = queryRun.get(tableNum(AssetBook)) as AssetBook;
            assetTable      = queryRun.get(tableNum(AssetTable)) as AssetTable;
            assetTrans      = queryRun.get(tableNum(AssetTrans)) as AssetTrans;

            assetImpairmentTransactionsTmp.clear();

            assetImpairmentTransactionsTmp.AquisitionValue          = assetBook.AcquisitionPrice;
            assetImpairmentTransactionsTmp.AssetGroup               = assetBook.AssetGroup;
            assetImpairmentTransactionsTmp.AssetGroupName           = AssetGroup::find(assetBook.AssetGroup).Name;
            assetImpairmentTransactionsTmp.AssetId                  = assetBook.AssetId;
            assetImpairmentTransactionsTmp.AssetName                = assetTable.Name;
            assetImpairmentTransactionsTmp.Location                 = assetTable.Location;
            assetImpairmentTransactionsTmp.Status                   = assetBook.Status;
            assetImpairmentTransactionsTmp.BookID                   = assetBook.BookId;
            assetImpairmentTransactionsTmp.NetBookValue             = assetBook.assetNetBookValue();
            assetImpairmentTransactionsTmp.TransDate                = assetTrans.TransDate;
            assetImpairmentTransactionsTmp.TransType                = assetTrans.TransType;
            assetImpairmentTransactionsTmp.AssetDocType             = AssetDocumentType_JP::AssetImpairment;
            assetImpairmentTransactionsTmp.Txt                      = assetTrans.Txt;
            assetImpairmentTransactionsTmp.Voucher                  = assetTrans.Voucher;
            assetImpairmentTransactionsTmp.CurrencyCode             = assetTrans.CurrencyCode;
            assetImpairmentTransactionsTmp.AmountCur                = assetTrans.AmountCur;
            assetImpairmentTransactionsTmp.AmountMst                = assetTrans.AmountMST;
            assetImpairmentTransactionsTmp.PreviousRunningAmountMST = transactionAmount;
            transactionAmount                                       += assetTrans.AmountMST;
            assetImpairmentTransactionsTmp.RunningAmountMST         = transactionAmount;
            assetImpairmentTransactionsTmp.ReasonCode               = ReasonTableRef::find(assetTrans.ReasonRefRecId).Reason;

            if (contract.parmFinancialDimension())
            {
                dimAttrSetItemView = queryRun.get(tableNum(DimensionAttributeValueSetItemView)) as DimensionAttributeValueSetItemView;

                assetImpairmentTransactionsTmp.DimensionName        = dimensionAttribute.localizedName();
                assetImpairmentTransactionsTmp.DimensionValue       = dimAttrSetItemView.DisplayValue;
                assetImpairmentTransactionsTmp.DimensionAttributeValueName
                    = DimensionAttributeValue::find(dimAttrSetItemView.DimensionAttributeValue).getName();
            }

            assetImpairmentTransactionsTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the <c>AssetTransactionListingPL</c>report.
    /// </summary>
    public void processReport()
    {
        Query   query;

        this.initParameters();

        // Gets the standard query
        query = this.parmQuery();

        //          AssetTrans, rebuilds query based on the standard query
        //          Adds trans type filter = WriteDownAdjustment
        //          Adds document tables and set document type range = Asset impairment
        query = this.rebuildQuery(query);
        this.insertAssetImpairmentTransactionsTmp(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebuildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query on different situations.
    /// </summary>
    /// <param name="_query">
    /// The query.
    /// </param>
    /// <returns>
    /// Returns the built query.
    /// </returns>
    protected Query rebuildQuery(Query _query)
    {
        QueryBuildDataSource    qbds;
        QueryBuildDataSource    qbdsAssetDocEntry;
        QueryBuildDataSource    qbdsAssetDocTable;
        QueryBuildDataSource    qbdsDimAttrSetItemView;

        qbds = _query.dataSourceTable(tableNum(AssetTrans));
        SysQuery::findOrCreateRange(qbds, fieldNum(AssetTrans, TransType)).value(queryValue(AssetTransType::WriteDownAdj));

        qbdsADTrans = qbds.addDataSource(tableNum(AssetDocumentTrans_JP));
        qbdsADTrans.joinMode(JoinMode::InnerJoin);
        qbdsADTrans.fetchMode(QueryFetchMode::One2One);
        qbdsADTrans.addLink(fieldNum(AssetTrans, RecId), fieldNum(AssetDocumentTrans_JP, RefRecId));
        SysQuery::findOrCreateRange(qbdsADTrans, fieldNum(AssetDocumentTrans_JP, RefTableId)).value(queryValue(tableNum(AssetTrans)));

        qbdsAssetDocEntry = qbdsADTrans.addDataSource(tableNum(AssetDocumentEntry_JP));
        qbdsAssetDocEntry.relations(true);
        qbdsAssetDocEntry.joinMode(JoinMode::InnerJoin);

        qbdsAssetDocTable = qbdsAssetDocEntry.addDataSource(tableNum(AssetDocumentTable_JP));
        SysQuery::findOrCreateRange(qbdsAssetDocTable, fieldNum(AssetDocumentTable_JP, Type)).value(queryValue(AssetDocumentType_JP::AssetImpairment));
        qbdsAssetDocTable.relations(true);
        qbdsAssetDocTable.joinMode(JoinMode::InnerJoin);

        if (contract.parmFinancialDimension())
        {
            qbdsDimAttrSetItemView = qbds.addDataSource(tableNum(DimensionAttributeValueSetItemView));
            qbdsDimAttrSetItemView.joinMode(JoinMode::InnerJoin);
            qbdsDimAttrSetItemView.fetchMode(QueryFetchMode::One2One);
            qbdsDimAttrSetItemView.addLink(fieldNum(AssetTrans, DefaultDimension), fieldNum(DimensionAttributeValueSetItemView, DimensionAttributeValueSet));
            SysQuery::findOrCreateRange(qbdsDimAttrSetItemView, fieldNum(DimensionAttributeValueSetItemView, DimensionAttributeValue)).value(SysQuery::valueNot(''));
            SysQuery::findOrCreateRange(qbdsDimAttrSetItemView, fieldNum(DimensionAttributeValueSetItemView, DimensionAttribute)).value(queryValue(dimensionAttribute.RecId));
        }

        return _query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>