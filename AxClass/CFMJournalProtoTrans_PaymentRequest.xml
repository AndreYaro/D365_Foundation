<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMJournalProtoTrans_PaymentRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
[CFMJournalSourceAttribute(CFMJournalTransSourceType::PaymentRequest)]
class CFMJournalProtoTrans_PaymentRequest extends CFMJournalProtoTrans
{
    CFMPaymentRequestTable paymentRequestTable;
    CFMPaymentRequestLine paymentRequestLine;
    CFMPaymentRequestType paymentRequestType;
    Map paymentRequestCashDiscMap;
    Map paymentRequestEarlierCashDiscMap;
    Map paymentRequestEarlierCashDiscDateMap;
    TransDate earlierCashDiscDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cashFlowDirection</Name>
				<Source><![CDATA[
    public CFMCashFlowDirection cashFlowDirection()
    {
        return paymentRequestType.Direction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>curAmountToPaymentAmount</Name>
				<Source><![CDATA[
    private CFMPaymentAmount curAmountToPaymentAmount(CFMPaymentAmount _amountCur, TransDate _transDate)
    {
        CFMPaymentAmount paymentAmount;
        CurrencyExchangeHelper currencyExchangeHelper;

        if (paymentRequestType.Direction == CFMCashFlowDirection::Outflow)
        {
            paymentAmount = -_amountCur;
        }
        else
        {
            paymentAmount = _amountCur;
        }

        if (paymentAmount && paymentRequestTable.CurrencyCode != paymentRequestTable.PaymentCurrency)
        {
            currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), _transDate);

            if (exchangeRateTypeRecId)
            {
                currencyExchangeHelper.parmExchangeRateTypeRecId(exchangeRateTypeRecId);
            }

            paymentAmount = currencyExchangeHelper.calculateCurrencyToCurrency(paymentRequestTable.CurrencyCode, paymentRequestTable.PaymentCurrency, paymentAmount,  true);
        }

        return paymentAmount;

    }

]]></Source>
			</Method>
			<Method>
				<Name>curPaymentAmount</Name>
				<Source><![CDATA[
    private CFMPaymentAmount curPaymentAmount()
    {
        return paymentRequestLine.BalanceAmountCur - this.getCashDiscAmount(this.headerCashDiscRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>curPaymentAmountEarlier</Name>
				<Source><![CDATA[
    private CFMPaymentAmount curPaymentAmountEarlier()
    {
        return paymentRequestLine.BalanceAmountCur - this.getCashDiscAmount(this.headerEarlierCashDiscRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode currencyCode()
    {
        return paymentRequestTable.PaymentCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>earlierCashDiscDate</Name>
				<Source><![CDATA[
    private TransDate earlierCashDiscDate()
    {
        if (!paymentRequestEarlierCashDiscDateMap.exists(paymentRequestTable.RecId))
        {
            this.updateEarlierCashDiscCache();
        }

        return paymentRequestEarlierCashDiscDateMap.lookup(paymentRequestTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscAmount</Name>
				<Source><![CDATA[
    private CFMCashDiscPositiveAmount getCashDiscAmount(RefRecId _headerCashDiscRecId)
    {
        CFMPaymentRequestLineCashDisc lineCashDisc;

        if (_headerCashDiscRecId)
        {
            lineCashDisc = CFMPaymentRequestLineCashDisc::find(paymentRequestLine.RecId, _headerCashDiscRecId);
        }

        return lineCashDisc.CashDiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerCashDiscRecId</Name>
				<Source><![CDATA[
    private RefRecId headerCashDiscRecId()
    {
        if (!paymentRequestCashDiscMap.exists(paymentRequestTable.RecId))
        {
            this.updateCashDiscCache();
        }

        return paymentRequestCashDiscMap.lookup(paymentRequestTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerEarlierCashDiscRecId</Name>
				<Source><![CDATA[
    private RefRecId headerEarlierCashDiscRecId()
    {
        if (!paymentRequestEarlierCashDiscMap.exists(paymentRequestTable.RecId))
        {
            this.updateEarlierCashDiscCache();
        }

        return paymentRequestEarlierCashDiscMap.lookup(paymentRequestTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSources</Name>
				<Source><![CDATA[
    protected void initSources(CFMJournalProtoTransParmContract _parmContract)
    {
        CFMJournalProtoTransParmContractPaymReq parmContract = _parmContract as CFMJournalProtoTransParmContract;

        paymentRequestTable = parmContract.parmPaymentRequestTable();
        paymentRequestLine  = parmContract.parmPaymentRequestLine();
        paymentRequestType  = parmContract.parmPaymentRequestType();
        dirPartyMap = parmContract.parmDirPartyMap();

        if (this.parmUseUncommittedValues())
        {
            uncommittedValues = parmContract.parmDataEditUncommitted();
        }

        if (journalUseCashDisc && correctionType == CFMCorrectionType::None)
        {
            earlierCashDiscDate = this.earlierCashDiscDate();
        }
        else
        {
            earlierCashDiscDate = dateNull();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>isConvertAsDefaultDim</Name>
				<Source><![CDATA[
    protected NoYes isConvertAsDefaultDim()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension</Name>
				<Source><![CDATA[
    protected CFMLedgerDimension ledgerDimension()
    {
        return paymentRequestLine.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logRefRecId</Name>
				<Source><![CDATA[
    public container logRefRecId()
    {
        return [paymentRequestTable.RecId, paymentRequestLine.RecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        paymentRequestCashDiscMap = new Map(Types::Int64, Types::Int64);
        paymentRequestEarlierCashDiscDateMap = new Map(Types::Int64, Types::Date);
        paymentRequestEarlierCashDiscMap = new Map(Types::Int64, Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAccountNum</Name>
				<Source><![CDATA[
    protected CFMPaymentAccountNum paymentAccountNum()
    {
        return this.parmUseUncommittedValues() ? uncommittedValues.PaymentAccountNum : paymentRequestTable.PaymentAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAccountType</Name>
				<Source><![CDATA[
    protected CFMPaymentAccountType paymentAccountType()
    {
        return this.parmUseUncommittedValues() ? uncommittedValues.PaymentAccountType : paymentRequestTable.PaymentAccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAmount</Name>
				<Source><![CDATA[
    protected CFMPaymentAmount paymentAmount()
    {
        return this.curAmountToPaymentAmount(this.curPaymentAmount(), this.transDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAmountEarlier</Name>
				<Source><![CDATA[
    private CFMPaymentAmount paymentAmountEarlier()
    {
        return this.curAmountToPaymentAmount(this.curPaymentAmountEarlier(), earlierCashDiscDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentPriority</Name>
				<Source><![CDATA[
    protected CFMPaymentPriorityRecId paymentPriority()
    {
        return paymentRequestTable.PaymentPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymMode</Name>
				<Source><![CDATA[
    protected PaymMode paymMode()
    {
        return this.parmUseUncommittedValues() ? uncommittedValues.PaymMode : paymentRequestTable.PaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestStatus</Name>
				<Source><![CDATA[
    protected CFMPaymentRequestStatus requestStatus()
    {
        return paymentRequestTable.Status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentAmount</Name>
				<Source><![CDATA[
    protected void setPaymentAmount(CFMJournalTrans _journalTrans)
    {
        super(_journalTrans);

        if (earlierCashDiscDate)
        {
            _journalTrans.PaymentAmountChanged = this.paymentAmountEarlier() * this.amountSign();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransDate</Name>
				<Source><![CDATA[
    protected void setTransDate(CFMJournalTrans _journalTrans)
    {
        super(_journalTrans);

        _journalTrans.TransDateChanged = earlierCashDiscDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDataArea</Name>
				<Source><![CDATA[
    protected SelectableDataArea sourceDataArea()
    {
        return paymentRequestTable.SourceDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceType</Name>
				<Source><![CDATA[
    protected CFMJournalTransSourceType sourceType()
    {
        return CFMJournalTransSourceType::PaymentRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    protected TransDate transDate()
    {
        return this.parmUseUncommittedValues() ? uncommittedValues.DueDate : paymentRequestTable.PaymentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCashDiscCache</Name>
				<Source><![CDATA[
    private void updateCashDiscCache()
    {
        paymentRequestCashDiscMap.insert(paymentRequestTable.RecId, CFMPaymentRequestCashDisc::findCashDiscOnDate(paymentRequestTable.RecId, this.transDate()).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEarlierCashDiscCache</Name>
				<Source><![CDATA[
    private void updateEarlierCashDiscCache()
    {
        CFMPaymentRequestCashDisc cashDisc;
        TransDate cashDiscDate;

        // find Cash for journal DateFrom
        cashDisc = CFMPaymentRequestCashDisc::findCashDiscOnDate(paymentRequestTable.RecId, journalTable.DateFrom);

        // set cashDiscDate only if cash discount is found and date is different from payment Date
        if (cashDisc &&
            cashDisc.CashDiscdate < this.transDate())
        {
            cashDiscDate = cashDisc.CashDiscdate;
        }

        paymentRequestEarlierCashDiscDateMap.insert(paymentRequestTable.RecId, cashDiscDate);

        paymentRequestEarlierCashDiscMap.insert(paymentRequestTable.RecId, cashDisc.RecId);

        if (cashDisc.CashDiscdate >= this.transDate())
        {
            paymentRequestCashDiscMap.insert(paymentRequestTable.RecId, cashDisc.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParmContractType</Name>
				<Source><![CDATA[
    protected boolean validateParmContractType(CFMJournalProtoTransParmContract _parmContract)
    {
        return _parmContract is CFMJournalProtoTransParmContractPaymReq;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>