<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMIMManagementFeatureVisibilityManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>HMIMManagementFeatureVisibilityManager</c> class handles event to hide or show hazardous materials forms/controls/menu items.
/// </summary>
internal static class HMIMManagementFeatureVisibilityManager
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>menuItemFeatureHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hides or show hazardous materials menu items.
    /// </summary>
    /// <param name = "_rootMenu">Root menu.</param>
    /// <param name = "_subMenu">Sub menu.</param>
    /// <param name = "_visible">Whether or not the submenu should be visible.</param>
    /// <remarks>This will only hide the individual menu items if they are contained in a group that we will also be hiding.</remarks>
    [SubscribesTo(classstr(SysMenuNavigationObjectFactory), staticdelegatestr(SysMenuNavigationObjectFactory, checkAddSubMenuDelegate))]
    public static void menuItemFeatureHandler(SysDictMenu _rootMenu, SysDictMenu _subMenu, SysBoxedBoolean _visible)
    {
        if (_subMenu.isMenuItem())
        {
            boolean isHMIMMaterialDivisionUniqueInClassFeatureEnabled = HMIMMaterialDivisionUniqueInClassFeature::instance().isEnabled();

            var metaElement = _subMenu.GetMenuItemMetaElement();
            if (metaElement != null)
            {
                switch (metaElement.Name)
                {
                    case menuItemDisplayStr(HMIMRegulationListDisplay):
                    case menuItemDisplayStr(HMIMClassGroupListDisplay):
                    case menuItemDisplayStr(HMIMClassListDisplay):
                    case menuItemDisplayStr(HMIMIdentificationListDisplay):
                    case menuItemDisplayStr(HMIMPackingGroupListDisplay):
                    case menuItemDisplayStr(HMIMLabelListDisplay):
                    case menuItemDisplayStr(HMIMTunnelListDisplay):
                    case menuItemDisplayStr(HMIMPackDescriptionListDisplay):
                    case menuItemDisplayStr(HMIMStowageListDisplay):
                    case menuItemDisplayStr(HMIMEMSListDisplay):
                    case menuItemDisplayStr(HMIMTechnicalNameDisplay):
                    case menuItemDisplayStr(HMIMPackingInstructionDisplay):
                    case menuItemDisplayStr(HMIMTransportCategoryDisplay):
                    case menuItemDisplayStr(HMIMCompatibilityGroupListDisplay):
                    case menuItemDisplayStr(HMIMItemList):
                    case menuItemDisplayStr(HMIMMultimodalDG):
                    case menuItemDisplayStr(HMIMCarrOfMerchByRoad):
                    case menuItemDisplayStr(HMIMShipperDeclaration):
                    case menuItemDisplayStr(HMIMStockListLimitsDisplay):
                        {
                            _visible.value = HMIMManagementFeatureVisibilityManager::isVisible();
                            break;
                        }
                    case menuItemDisplayStr(HMIMMaterialDivisionListDisplay):
                        {
                            _visible.value = isHMIMMaterialDivisionUniqueInClassFeatureEnabled && HMIMManagementFeatureVisibilityManager::isVisible();
                            break;
                        }
                    case menuItemDisplayStr(HMIMDivisionListDisplay):
                        {
                            _visible.value = !isHMIMMaterialDivisionUniqueInClassFeatureEnabled && HMIMManagementFeatureVisibilityManager::isVisible();
                            break;
                        }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFeatureState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return to default dashboard when feature is not enabled
    /// </summary>
    /// <param name = "_sender">The form.</param>
    private static void checkFeatureState(xFormRun _sender)
    {
        if (!HMIMManagementFeatureVisibilityManager::isVisible())
        {
            MenuFunction menuFunction = new MenuFunction(menuItemDisplayStr(DefaultDashboard), MenuItemType::Display);
            menuFunction.run();

            info("@SCM:FeatureErrorMessage");

            _sender.close();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMClassGroupListFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMClassGroupList</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMClassGroupList), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMClassGroupListFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMClassListFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMClassList</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMClassList), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMClassListFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMCMRConsignmentFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMCarrOfMerchByRoad</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMCarrOfMerchByRoad), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMCMRConsignmentFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMCMRConsignmentItemFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMCarrOfMerchByRoadItem</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMCarrOfMerchByRoadItem), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMCMRConsignmentItemFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMCompatibilityGroupListFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMCompatibilityGroupList</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMCompatibilityGroupList), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMCompatibilityGroupListFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMDivisionListFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMDivisionList</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMDivisionList), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMDivisionListFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMEMSListFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMEMSList</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMEMSList), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMEMSListFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMIdentificationListFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMIdentificationList</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMIdentificationList), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMIdentificationListFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMItemListFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMItemList</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMItemList), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMItemListFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMItemMaterialListFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMItemMaterialList</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMItemMaterialList), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMItemMaterialListFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMLabelListFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMLabelList</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMLabelList), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMLabelListFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMMaterialListFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMMaterialList</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMMaterialList), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMMaterialListFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMMMConsignmentItemFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMMultimodalDGItem</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMMultimodalDGItem), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMMMConsignmentItemFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMMMDGConsignmentFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMMultimodalDG</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMMultimodalDG), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMMMDGConsignmentFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMPackDescriptionListFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMPackDescriptionList</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMPackDescriptionList), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMPackDescriptionListFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMPackingGroupListFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMPackingGroupList</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMPackingGroupList), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMPackingGroupListFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMPackingInstructionListFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMPackingInstructionList</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMPackingInstructionList), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMPackingInstructionListFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMRegPrintSetupListFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMRegPrintSetupList</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMRegPrintSetupList), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMRegPrintSetupListFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMRegulationListFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMRegulationList</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMRegulationList), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMRegulationListFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMShipperDeclarationFormFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMShipperDeclaration</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMShipperDeclaration), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMShipperDeclarationFormFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMShipperDeclarationLineFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMShipperDeclarationItem</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMShipperDeclarationItem), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMShipperDeclarationLineFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMStockListLimitsFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMStockListLimits</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMStockListLimits), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMStockListLimitsFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMStowageListFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMStowageList</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMStowageList), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMStowageListFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMTechnicalNameListFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMTechnicalNameList</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMTechnicalNameList), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMTechnicalNameListFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMTransportCategoryListFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMTransportCategoryList</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMTransportCategoryList), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMTransportCategoryListFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingHMIMTunnelListFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents <c>HMIMTunnelList</c> form based on feature exposure.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(HMIMTunnelList), FormEventType::Initializing), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void initializingHMIMTunnelListFormHandler(xFormRun _sender, FormEventArgs _e)
    {
        HMIMManagementFeatureVisibilityManager::checkFeatureState(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ecoResProductDetailsExtendedInventTableDataSource_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Hides flag to indicate the item is Hazardous material or not.
    /// </summary>
    /// <param name="_sender">The form data source.</param>
    /// <param name="_e">Form data source event arguments.</param>
    [FormDataSourceEventHandler(formDataSourceStr(EcoResProductDetailsExtended, InventTable), FormDataSourceEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void ecoResProductDetailsExtendedInventTableDataSource_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        _sender.object(fieldNum(InventTable, HMIMIndicator)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ecoResProductDetailsExtended_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Hides flag to indicate the item is Hazardous material or not
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(EcoResProductDetailsExtended), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void ecoResProductDetailsExtended_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        _sender.design().controlName(formControlStr(EcoResProductDetailsExtended, HMIMItemMaterialListDisplay)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
        _sender.design().controlName(formControlStr(EcoResProductDetailsExtended, HMIMHazardousMaterial)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
    }

]]></Source>
			</Method>
			<Method>
				<Name>PdsMRCItemDetailsPdsMRCItemDetailsTableDataSource_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Hides the fields HMIMStockLimit & HMIMWarningLimit
    /// </summary>
    /// <param name="_sender">The form data source.</param>
    /// <param name="_e">Form data source event arguments.</param>
    [FormDataSourceEventHandler(formDataSourceStr(PdsMRCItemDetails, PdsMRCItemDetails), FormDataSourceEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void PdsMRCItemDetailsPdsMRCItemDetailsTableDataSource_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        _sender.object(fieldNum(PdsMRCItemDetails, HMIMStockLimit)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
        _sender.object(fieldNum(PdsMRCItemDetails, HMIMWarningLimit)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
    }

]]></Source>
			</Method>
			<Method>
				<Name>PdsMRCItemDetails_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Hides the HMIMHazardousMaterial control
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(PdsMRCItemDetails), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void PdsMRCItemDetails_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        _sender.design().controlName(formControlStr(PdsMRCItemDetails, HMIMHazardousMaterial)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLoadPlanningListPage_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Hides the HMIMADRPointsTotal, HMIMLimitedQuantityNetWeight control and HMIMCompatibilityCheck menu button in whsLoadPlanningListPage form.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(WHSLoadPlanningListPage), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void whsLoadPlanningListPage_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        _sender.design().controlName(formControlStr(WHSLoadPlanningListPage, HMIMADRPointsTotal)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
        _sender.design().controlName(formControlStr(WHSLoadPlanningListPage, HMIMLimitedQuantityNetWeight)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
        _sender.design().controlName(formControlStr(WHSLoadPlanningListPage, HMIMCompatibilityCheck)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLoadTable_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Hides the HMIMADRPoints, HMIMHazardousMaterial, HMIMLimitedQuantityNetWeight control and the HMIMCompatibilityCheck menu button in WHSLoadTable form.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(WHSLoadTable), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void whsLoadTable_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        _sender.design().controlName(formControlStr(WHSLoadTable, HMIMADRPoints)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
        _sender.design().controlName(formControlStr(WHSLoadTable, HMIMLimitedQuantityNetWeight)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
        _sender.design().controlName(formControlStr(WHSLoadTable, HMIMHazardousMaterial)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
        _sender.design().controlName(formControlStr(WHSLoadTable, HMIMCompatibilityCheck)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsParameters_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Hides the HMIMReports tab page in WHSParameters form.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(WHSParameters), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void whsParameters_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        _sender.design().controlName(formControlStr(WHSParameters, HMIMReports)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsShipmentDetails_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Hides the HMIMHazardousMaterialDocument, HMIMADRPoints, HMIMHazardousMaterial, HMIMLimitedQuantityNetWeight control 
    /// & the HMIMCompatibilityCheck menu button in WHSShipmentDetails form.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(WHSShipmentDetails), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void whsShipmentDetails_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        _sender.design().controlName(formControlStr(WHSShipmentDetails, HMIMHazardousMaterialDocument)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
        _sender.design().controlName(formControlStr(WHSShipmentDetails, HMIMADRPoints)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
        _sender.design().controlName(formControlStr(WHSShipmentDetails, HMIMLimitedQuantityNetWeight)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
        _sender.design().controlName(formControlStr(WHSShipmentDetails, HMIMHazardousMaterial)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
        _sender.design().controlName(formControlStr(WHSShipmentDetails, HMIMCompatibilityCheck)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsShipPlanningListPage_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Hides the HMIMHazardousMaterialDocument, HMIMADRPoints, HMIMLimitedQuantityNetWeight and the HMIMCompatibilityCheck menu button in in WHSShipPlanningListPage form.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(WHSShipPlanningListPage), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void whsShipPlanningListPage_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        _sender.design().controlName(formControlStr(WHSShipPlanningListPage, HMIMHazardousMaterialDocument)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
        _sender.design().controlName(formControlStr(WHSShipPlanningListPage, HMIMCompatibilityCheck)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
        _sender.design().controlName(formControlStr(WHSShipPlanningListPage, HMIMADRPoints)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
        _sender.design().controlName(formControlStr(WHSShipPlanningListPage, HMIMLimitedQuantityNetWeight)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
    }

]]></Source>
			</Method>
			<Method>
				<Name>EcoResProductParameters_OnInitialized</Name>
				<Source><![CDATA[
    // <summary>
    /// Hides the HazardousMaterialRegulation group control in EcoResProductParameters form.
    /// </summary>
    /// <param name="_sender">The opening form.</param>
    /// <param name="_e">The form event arguments.</param>
    [FormEventHandler(formStr(EcoResProductParameters), FormEventType::Initialized), SuppressBPWarningAttribute('BPParameterNotUsed', 'This is a feature code to hide or show some controls.')]
    public static void EcoResProductParameters_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        _sender.design().controlName(formControlStr(EcoResProductParameters, HazardousMaterialRegulation)).visible(HMIMManagementFeatureVisibilityManager::isVisible());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVisible</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean isVisible()
    {
        return isConfigurationkeyEnabled(configurationKeyNum(HMIMManagement));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>