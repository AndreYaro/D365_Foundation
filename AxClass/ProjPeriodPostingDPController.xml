<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjPeriodPostingDPController</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// The <c>ProjPeriodPostingDPController</c> class is the controller class for the
/// <c>ProjPeriodPosting</c> SSRS report.
/// </summary>
public class ProjPeriodPostingDPController extends SrsReportRunController implements BatchRetryable
{
    #define.reportFR('ProjPeriodPosting.Report')

    // internal parameter caches
    RecId                   tmpTableDataRecId;

    // temporary data stores
    ProjPeriodPostingTmp    projPeriodPostingTmp;
    TmpProjPeriodicLedger   tmpProjPeriodicLedger;
    TmpProjPeriodic         tmpProjPeriodic;
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>getTableDataRecId</Name>
        <Source><![CDATA[
    /// <summary>
    /// Gets the record ID that is associated with the report body information.
    /// </summary>
    /// <returns>
    /// The record ID that is associated with the report body information.
    /// </returns>
    public RecId getTableDataRecId()
    {
        return tmpTableDataRecId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>init</Name>
        <Source><![CDATA[
        public void init(Common _common)
    {
        tmpProjPeriodic.setTmpData(_common);

        while select tmpProjPeriodic
        {
            this.insert(tmpProjPeriodic.TransId);
        }

        tmpTableDataRecId = this.storeTmpTable(projPeriodPostingTmp);
    }

]]></Source>
      </Method>
      <Method>
        <Name>insert</Name>
        <Source><![CDATA[
        private void insert(ProjTransIdBase _transId)
    {
        DimensionProvider   dimProvider = new DimensionProvider();

        select tmpProjPeriodicLedger
                where tmpProjPeriodicLedger.TransId == _transId;

        projPeriodPostingTmp.AmountMST         = tmpProjPeriodicLedger.AmountMST;
        projPeriodPostingTmp.ProjId            = tmpProjPeriodic.ProjId;
        projPeriodPostingTmp.TransDate         = tmpProjPeriodic.TransDate;
        projPeriodPostingTmp.CategoryId        = tmpProjPeriodic.CategoryId;
        projPeriodPostingTmp.OffsetPostingType = tmpProjPeriodicLedger.OffsetPostingType;
        projPeriodPostingTmp.PostingType       = tmpProjPeriodicLedger.PostingType;
        projPeriodPostingTmp.TransType         = tmpProjPeriodic.TransType;
        projPeriodPostingTmp.TransId           = tmpProjPeriodic.TransId;

        projPeriodPostingTmp.DimensionDisplayValue        = dimProvider.getStringValueFromCursor(tmpProjPeriodicLedger, fieldstr(TmpProjPeriodicLedger, LedgerDimension));
        projPeriodPostingTmp.DimensionDisplayValueOffset  = dimProvider.getStringValueFromCursor(tmpProjPeriodicLedger, fieldstr(TmpProjPeriodicLedger, OffsetLedgerDimension));
        projPeriodPostingTmp.insert();
    }

]]></Source>
      </Method>
      <Method>
        <Name>preRunModifyContract</Name>
        <Source><![CDATA[
    /// <summary>
    /// Changes the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        ProjPeriodPostingDPContract    contract;

        if (this.parmArgs().caller())
        {
            tmpProjPeriodicLedger.setTmpData(this.parmArgs().caller().tmpProjPeriodicLedger());
        }

        this.init(this.parmArgs().record());

        contract = this.parmReportContract().parmRdpContract() as ProjPeriodPostingDPContract;
        contract.parmTmpTableDataRecId(this.getTableDataRecId());
    }

]]></Source>
      </Method>
      <Method>
        <Name>storeTmpTable</Name>
        <Source><![CDATA[
        private RecId storeTmpTable(Common tblToSend)
    {
        RecId recId;

        // storing the temp table data using SRSTmpTblMarshaller
        SRSReportRunPermission permission = new SRSReportRunPermission();
        permission.assert();

        // store the session context in the temporary cache
        recId = SRSTmpTblMarshaller::sendTmpTblToDataProvider(tblToSend);

        // revert the access permissions
        CodeAccessPermission::revertAssert();

        delete_from tblToSend;

        // return the key for the temp dataset
        return recId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
        public static void main(Args _args)
    {
        ProjPeriodPostingDPController controller = new ProjPeriodPostingDPController();

        controller.parmArgs(_args);
        controller.parmReportName(#reportFR);
        controller.startOperation();
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>