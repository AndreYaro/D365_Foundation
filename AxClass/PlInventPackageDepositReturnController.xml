<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlInventPackageDepositReturnController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PlInventPackageDepositReturnController</c> class is the helper class for the associated SRS Report.
/// </summary>
public class PlInventPackageDepositReturnController extends SrsReportRunController implements BatchRetryable
{
    #define.ReportName('PlInventPackageDepositReturn.Report')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferencePL00012, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides ability to modify the report contract before dialog is shown to user.
    /// </summary>
    /// <remarks>
    ///    Use this method to change the report contract, common use case is to add/change a Query Important
    ///    note: This method is called only during interactive scenario, before rendering the UI to user.For
    ///    batch scenario, we do not invoke this method, since there is no user interaction and contract
    ///    values are already saved in batch.DO NOT instantiate any instance varibles in this code if they are
    ///    used during the lifetime of controller, since these will fail in batch cases.
    /// </remarks>
    protected void prePromptModifyContract()
    {
        this.setRanges(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the report query and parameters based on caller settings.
    /// </summary>
    /// <param name="_query">
    /// The Query object.
    /// </param>
    /// <remarks>
    /// Assigns values to <c>Voucher</c> range and <c>TransDate</c> range. Or <c>RefTableId</c> and <c>RefRecId</c> range.
    /// </remarks>
    public void setRanges(Query _query)
    {
        PlInventPackageTrans    plInventPackageTrans;
        PlInventPackageReturn   plInventPackageReturn;
        QueryBuildRange         qbr;

        if (this.parmArgs())
        {
            _query.dataSourceTable(tableNum(PlInventPackageTrans)).clearRanges();
            if (this.parmArgs().dataset() == tableNum(PlInventPackageReturn))
            {
                plInventPackageReturn = this.parmArgs().record() as PlInventPackageReturn;
                qbr = SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(PlInventPackageTrans)),
                                            fieldNum(PlInventPackageTrans, RefTableId));
                qbr.value(SysQuery::value(plInventPackageReturn.TableId));
                qbr.status(RangeStatus::Hidden);
                qbr = SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(PlInventPackageTrans)),
                                            fieldNum(PlInventPackageTrans, RefRecId));
                qbr.value(SysQuery::value(plInventPackageReturn.RecId));
                qbr.status(RangeStatus::Hidden);
            }
            else
            {
                plInventPackageTrans = this.parmArgs().record() as PlInventPackageTrans;
                if (plInventPackageTrans.Voucher && plInventPackageTrans.TransDate)
                {
                    qbr = SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(PlInventPackageTrans)),
                                                fieldNum(PlInventPackageTrans, Voucher));
                    qbr.value(plInventPackageTrans.Voucher);
                    qbr.status(RangeStatus::Hidden);
                    qbr = SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(PlInventPackageTrans)),
                                                fieldNum(PlInventPackageTrans, TransDate));
                    qbr.value(strfmt("@SYS82282", plInventPackageTrans.TransDate));
                    qbr.status(RangeStatus::Hidden);
                }
                else
                {
                    qbr = SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(PlInventPackageTrans)),
                                                fieldNum(PlInventPackageTrans, RefTableId));
                    qbr.value(SysQuery::value(plInventPackageTrans.RefTableId));
                    qbr.status(RangeStatus::Hidden);
                    qbr = SysQuery::findOrCreateRange(_query.dataSourceTable(tableNum(PlInventPackageTrans)),
                                                fieldNum(PlInventPackageTrans, RefRecId));
                    qbr.value(SysQuery::value(plInventPackageTrans.RefRecId));
                    qbr.status(RangeStatus::Hidden);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
        public boolean showQuerySelectButton(str parameterName)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initailzes the controller, sets the print management, assigns parameter values and runs the SRS report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        PlInventPackageDepositReturnController controller = new PlInventPackageDepositReturnController();

        controller.parmReportName(#ReportName);
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>