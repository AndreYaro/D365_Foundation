<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjProfitLossProjDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListProjProfitLossProjDP</c> class provides data for the
///    <c>ProjListProjProfitLossProj</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(ProjStatementProject)),
    SRSReportParameterAttribute(classstr(ProjListProjProfitLossProjContract))
]

class ProjListProjProfitLossProjDP extends SrsReportDataProviderPreProcessTempDB
{
    #ProjReports

    ProjOptionTM            timeMaterial;
    ProjOptionFixedPrice    fixedPrice;
    ProjOptionInvestment    investment;
    ProjOptionInternal      internalCost;
    ProjOptionTime          time;
    NoYes                   timeMaterialBillingMethod;
    NoYes                   fixedPriceBillingMethod;
    ProjOptionHours         hour;
    ProjOptionCost          expenses;
    ProjOptionItem          item;
    ProjOptionRevenue       revenue;
    ProjOptionOnAcc         onAcc;
    TransDate               projFromDate;
    TransDate               projToDate;
    TransDate               ledgerFromDate;
    TransDate               ledgerToDate;
    ProjListColumnData      actualVsBudget;
    ForecastModelId         forecastModelId;
    ProjListStateProjType   stateProjType;
    Level                   level;
    boolean                 skipBlankId;
    boolean                 skipZero;
    ProjShowAmount          showAmount;
    ProjAmountQty           amountQty;
    ProjListProfitFactor    profitFactor;

    ProjListProjTrans_ProfitLoss    listProjTrans;
    ProjListProjTransLayout         listProjTransLayout;
    ProjListProjHelpClass           projHelpClass;
    ProjListProjProfitLossTmp       projListProjProfitLossTmp;

    ProjTable               projTable;

    QueryRun                qrun;

    ProjId                  projIdFound, projId;
    boolean                 firstRun;
    NumberSequenceFormat    oldLevelFormat;

    ProjQty                 tmpQtyHour;
    AmountMST               tmpSalary, tmpExpenses, tmpInventory, tmpTotalCost, tmpRevenue, tmpValueAdded, tmpMargin;

    int                     hourQtyDecimals, valueAddedDecimals, grossMarginDecimals, amountDecimals;
    int                     showContributionMargin, showCostExpense, showCostHour, showCostInventory, showGrossMarginPct,
                            showQtyHour, showRevenue, showTotalCost, showValueAdded, showValueFactor;
    ProjLabel               valueFactorLabel,grossMarginPctLabel, headerLabel, periodLabel;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the amounts that are needed for the report.
    /// </summary>
    void calculate()
    {
        projHelpClass.parmProjStatement().parmProjId(projIdFound);
        projHelpClass.setParmField();

        switch (amountQty)
        {
            case ProjAmountQty::Amount:
                tmpSalary      += projHelpClass.parmProjStatement().a310_Cost_Hour(false,ProjListStateType::ProfitLoss);
                break;

            case ProjAmountQty::Qty:
                tmpQtyHour     += projHelpClass.parmProjStatement().a310_Cost_Hour_Qty(false,ProjListStateType::ProfitLoss);
                break;

            case ProjAmountQty::AmountQty:
                tmpSalary      += projHelpClass.parmProjStatement().a310_Cost_Hour(false,ProjListStateType::ProfitLoss);
                tmpQtyHour     += projHelpClass.parmProjStatement().a310_Cost_Hour_Qty(false,ProjListStateType::ProfitLoss);
                break;
        }

        tmpExpenses    += projHelpClass.parmProjStatement().a330_Cost_Expenses()+
                       projHelpClass.parmProjStatement().a335_Accrued_Cost();
        tmpInventory   += projHelpClass.parmProjStatement().a315_Item_Total();
        tmpTotalCost   += projHelpClass.parmProjStatement().a300_Total_Cost();
        tmpRevenue     += projHelpClass.parmProjStatement().a100_Total_Revenue();
        tmpValueAdded  += projHelpClass.parmProjStatement().a400_Value_Added();
        tmpMargin      += projHelpClass.parmProjStatement().a500_Gross_Margin();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrintLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the line is to be printed based on the parameters.
    /// </summary>
    /// <returns>
    ///    true if the line should be printed; otherwise, false.
    /// </returns>
    boolean checkPrintLine()
    {
        if ((!skipZero || this.lineValue()) && listProjTransLayout.canPrintId(projHelpClass.id()))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeLineOne</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Evaluates whether the line should be printed and inserts it into a temporary table.
    /// </summary>
    /// <param name="projTableLocal">
    ///    A record buffer that contains information about a project.
    /// </param>
    void executeLineOne(ProjTable projTableLocal)
    {
        if (stateProjType == ProjListStateProjType::Project)
        {
            if ((projTableLocal.level() <= level) ||
                (projTableLocal.levelFormat(level)   != oldLevelFormat))
            {
                if (this.checkPrintLine())
                {
                    projHelpClass.setName();
                    this.insertProjListProjProfitLossTmp();
                    this.setFieldZero();
                }
            }
        }
        else
        {
            if (this.checkPrintLine())
            {
                projHelpClass.setName();
                this.insertProjListProjProfitLossTmp();
                this.setFieldZero();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjProfitLossTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data from the <c>projListProjProfitLossTmp</c> table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>projListProjProfitLossTmp</c> table.
    /// </returns>

    [SRSReportDataSetAttribute('projListProjProfitLossTmp')]
    public ProjListProjProfitLossTmp getProjListProjProfitLossTmp()
    {
        select * from projListProjProfitLossTmp;

        return projListProjProfitLossTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjListTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>ProjListProjTrans</c> class by using the parameters.
    /// </summary>
    private void initProjListTrans()
    {
        listProjTrans = ProjListProjTrans::construct(ProjListStateType::ProfitLoss, ProjListStateId::Project);
        listProjTransLayout = ProjListProjTransLayout::construct(listProjTrans);

        listProjTrans.parmTimeMaterial(timeMaterial);
        listProjTrans.parmFixedPrice(fixedPrice);
        listProjTrans.parmInvestment(investment);
        listProjTrans.parmInternalCost(internalCost);
        listProjTrans.parmTime(time);

        listProjTrans.parmHour(hour);
        listProjTrans.parmExpenses(expenses);
        listProjTrans.parmItem(item);
        listProjTrans.parmRevenue(revenue);
        listProjTrans.parmOnAcc(onAcc);

        listProjTrans.parmProjFromDate(projFromDate);
        listProjTrans.parmProjToDate(projToDate);
        listProjTrans.parmLedgerFromDate(ledgerFromDate);
        listProjTrans.parmLedgerToDate(ledgerToDate);

        listProjTrans.parmColumnData(actualVsBudget);
        listProjTrans.parmForecastModelId(forecastModelId);

        listProjTransLayout.parmStateProjType(stateProjType);
        listProjTransLayout.parmLevel(level);
        listProjTransLayout.parmSkipBlank(skipBlankId);
        listProjTransLayout.parmSkipZero(skipZero);

        listProjTransLayout.parmShowAmount(showAmount);
        listProjTransLayout.parmAmountQty(amountQty);
        listProjTransLayout.parmProfitFactor(profitFactor);

        if (listProjTransLayout.parmStateProjType() != ProjListStateProjType::Project)
        {
            listProjTransLayout.parmLevel(2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjListProjProfitLossTmpFields</Name>
				<Source><![CDATA[
    protected ProjListProjProfitLossTmp setProjListProjProfitLossTmpFields(
			ProjListProjProfitLossTmp _projListProjProfitLossTmp,
			ProjListProjTransLayout _listProjTransLayout)
    {
		// New Record
        if (_projListProjProfitLossTmp.RecId == 0)
        {
			if (projHelpClass.id())
			{
                _projListProjProfitLossTmp.Id = projHelpClass.id();
			}
			else
			{
                _projListProjProfitLossTmp.Id = "@SYS4082163";
			}
            _projListProjProfitLossTmp.IdLabel = enum2str(stateProjType);
            _projListProjProfitLossTmp.Name = projHelpClass.name();

            // set labels
            _projListProjProfitLossTmp.HeaderLabel   = headerLabel;
            _projListProjProfitLossTmp.PeriodLabel   = periodLabel;
            _projListProjProfitLossTmp.GrossMarginPctLabel = grossMarginPctLabel;
            _projListProjProfitLossTmp.ValueFactorLabel = valueFactorLabel;

            // set decimal values
            _projListProjProfitLossTmp.DecimalHourQty     = hourQtyDecimals;
            _projListProjProfitLossTmp.DecimalValueAdded  = valueAddedDecimals;
            _projListProjProfitLossTmp.DecimalGrossMargin = grossMarginDecimals;
            _projListProjProfitLossTmp.DecimalAmount      = amountDecimals;

            // set field visibility
            _projListProjProfitLossTmp.ShowContributionMargin = showContributionMargin;
            _projListProjProfitLossTmp.ShowCostExpense        = showCostExpense;
            _projListProjProfitLossTmp.ShowCostHour           = showCostHour;
            _projListProjProfitLossTmp.ShowCostInventory      = showCostInventory;
            _projListProjProfitLossTmp.ShowGrossMarginPct     = showGrossMarginPct;
            _projListProjProfitLossTmp.ShowQtyHour            = showQtyHour;
            _projListProjProfitLossTmp.ShowRevenue            = showRevenue;
            _projListProjProfitLossTmp.ShowTotalCost          = showTotalCost;
            _projListProjProfitLossTmp.ShowValueAdded         = showValueAdded;
            _projListProjProfitLossTmp.ShowValueFactor        = showValueFactor;
        }

        _projListProjProfitLossTmp.QtyHour += tmpQtyHour;
        _projListProjProfitLossTmp.CostHour += _listProjTransLayout.showAmountReport(tmpSalary, showAmount);
        _projListProjProfitLossTmp.CostExpense += _listProjTransLayout.showAmountReport(tmpExpenses, showAmount);
        _projListProjProfitLossTmp.CostInventory += _listProjTransLayout.showAmountReport(tmpInventory, showAmount);
        _projListProjProfitLossTmp.TotalCost += _listProjTransLayout.showAmountReport(tmpTotalCost, showAmount);
        _projListProjProfitLossTmp.Revenue += _listProjTransLayout.showAmountReport(tmpRevenue, showAmount);
        _projListProjProfitLossTmp.ValueAdded += _listProjTransLayout.showAmountReport(tmpValueAdded, showAmount);
        _projListProjProfitLossTmp.ContributionMargin+= _listProjTransLayout.showAmountReport(tmpMargin, showAmount);

        _projListProjProfitLossTmp.ValueFactor   = this.updateValueFactor(_projListProjProfitLossTmp);
        _projListProjProfitLossTmp.GrossMarginPct= ProjParameters::grossMarginPct(_projListProjProfitLossTmp.TotalCost, _projListProjProfitLossTmp.Revenue, _projListProjProfitLossTmp.ContributionMargin);

        return _projListProjProfitLossTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListProjProfitLossTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the required data and inserts it into the temporary table.
    /// </summary>
    private void insertProjListProjProfitLossTmp()
    {
        projListProjProfitLossTmp.clear();

        ttsbegin;
        if (projHelpClass.parmStateProjType() == ProjListStateProjType::FundingSource)
        {
            select firstOnly forupdate projListProjProfitLossTmp 
                    where ((projListProjProfitLossTmp.Id == projHelpClass.id())
                    || (projListProjProfitLossTmp.Id == "@SYS4082163" && projHelpClass.id()== "")) ;
        }

        projListProjProfitLossTmp = this.setProjListProjProfitLossTmpFields(projListProjProfitLossTmp, listProjTransLayout);

		if (projListProjProfitLossTmp.RecId)
        {
			projListProjProfitLossTmp.update();
        }
        else
        {
            projListProjProfitLossTmp.insert();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the amounts are equal to zero.
    /// </summary>
    /// <returns>
    ///    true if the values are not zero; otherwise false.
    /// </returns>
    boolean lineValue()
    {
        return (tmpExpenses  != 0 || tmpSalary != 0 || tmpInventory != 0 || tmpRevenue != 0 || tmpQtyHour != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the query ranges.
    /// </summary>
    void modifyQuery()
    {
        QueryBuildDataSource qbdsProjTable = qrun.query().dataSourceTable(tableNum(ProjTable));
        qbdsProjTable.addSortField(fieldNum(ProjTable, ProjId));

        QueryBuildRange rangeHide = qbdsProjTable.addRange(fieldNum(ProjTable, Type));
        rangeHide.status(RangeStatus::Hidden);

        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            QueryBuildDataSource qbdsPSAContractLineItems = qRun.query().dataSourceTable(tableNum(PSAContractLineItems));
            qbdsPSAContractLineItems.enabled(true);
            PSAContractLineItemRangesHelper::addBillingMethodRangesToDS(
                qbdsPSAContractLineItems,
                timeMaterialBillingMethod,
                fixedPriceBillingMethod);
            PSAContractLineItemRangesHelper::addTransactionTypeRangesToDS(
                qbdsPSAContractLineItems,
                hour,
                expenses,
                revenue,
                item,
                false);
        }
        else
        {
            if (timeMaterial == NoYes::Yes)
            {
                qbdsProjTable.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::TimeMaterial));
            }

            if (fixedPrice)
            {
                qbdsProjTable.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::FixedPrice));
            }

            if (investment)
            {
                qbdsProjTable.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::Investment));
            }

            if (internalCost)
            {
                qbdsProjTable.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::Cost));
                qbdsProjTable.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::Internal));
            }

            if (time)
            {
                qbdsProjTable.addRange(fieldNum(ProjTable, Type)).value(queryValue(ProjType::Time));
            }

            if (!(timeMaterial || fixedPrice || investment || internalCost || time))
            {
                QueryBuildRange rangeEmptyString = qbdsProjTable.addRange(fieldNum(ProjTable, Type));
                rangeEmptyString.value(queryValue(SysQuery::valueEmptyString()));
            }
        }

        if (skipZero)
        {
            QueryBuildDataSource qbdsProjectTrans;

            if (actualVsBudget == ProjListColumnData::Actual)
            {
                qbdsProjectTrans = qbdsProjTable.addDataSource((tableNum(ProjTransPosting)));
                qbdsProjectTrans.joinMode(JoinMode::ExistsJoin);
                qbdsProjectTrans.addLink(fieldNum(ProjTable, ProjId), fieldNum(ProjTransPosting, ProjId));
                qbdsProjectTrans.addRange(fieldNum(ProjTransPosting, ProjTransDate)).value(queryValue(listProjTrans.parmProjFromDate()) + '..' + queryValue(listProjTrans.parmProjToDate()));
                qbdsProjectTrans.addRange(fieldNum(ProjTransPosting, LedgerTransDate)).value(queryValue(listProjTrans.parmLedgerFromDate()) + '..' + queryValue(listProjTrans.parmLedgerToDate()));
            }
            else
            {
                qbdsProjectTrans = qbdsProjTable.addDataSource((tableNum(ProjTransBudget)));
                qbdsProjectTrans.joinMode(JoinMode::ExistsJoin);
                qbdsProjectTrans.addLink(fieldNum(ProjTable, ProjId), fieldNum(ProjTransBudget, ProjId));
                qbdsProjectTrans.addRange(fieldNum(ProjTransBudget, ProjTransDate)).value(queryValue(listProjTrans.parmProjFromDate()) + '..' + queryValue(listProjTrans.parmProjToDate()));
                qbdsProjectTrans.addRange(fieldNum(ProjTransBudget, LedgerTransDate)).value(queryValue(listProjTrans.parmLedgerFromDate()) + '..' + queryValue(listProjTrans.parmLedgerToDate()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the project level and calls the calculate method.
    /// </summary>
    void printProject()
    {
        ProjTable               projTableLocal;
        ProjFundingSource       projFundingSourceLocal;

        projTableLocal  = qrun.get(tablenum(ProjTable));
        projIdFound     = projTableLocal.ProjId;
        projId          = ProjListProjHelpClass::setProjId(projTableLocal,stateProjType,level);

        if (stateProjType == ProjListStateProjType::FundingSource)
        {
            projFundingSourceLocal = qrun.get(tablenum(ProjFundingSource));
        }
        projHelpClass.setId(projTableLocal, projId, projFundingSourceLocal);

        if (! listProjTransLayout.canPrintId(projHelpClass.idNew()))
        {
            projHelpClass.setOld();

            return;
        }

        if (! firstRun && projHelpClass.checkIdChanged())
        {
            this.executeLineOne(projTableLocal);
        }

        this.calculate();

        projHelpClass.setOld();
        oldLevelFormat  = projTableLocal.levelFormat(level);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SQL
    ///    Server Reporting Services (SSRS) at runtime. This method should compute data and populate the data
    ///    tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjListProjProfitLossProjContract contract = this.parmDataContract() as ProjListProjProfitLossProjContract;

        timeMaterial = contract.parmTimeMaterial();
        fixedPrice = contract.parmFixedPrice();
        investment = contract.parmInvestment();
        internalCost = contract.parmInternalCost();
        time = contract.parmTime();

        timeMaterialBillingMethod = contract.parmTimeMaterialBillingMethod();
        fixedPriceBillingMethod = contract.parmFixedPriceBillingMethod();

        hour = contract.parmHour();
        expenses = contract.parmExpenses();
        item = contract.parmItem();
        revenue = contract.parmRevenue();
        onAcc = contract.parmOnAcc();

        projFromDate = contract.parmProjFromDate();
        projToDate = contract.parmProjToDate();
        ledgerFromDate = contract.parmLedgerFromDate();
        ledgerToDate = contract.parmLedgerToDate();

        actualVsBudget = contract.parmActualVsBudget();
        forecastModelId = contract.parmForecastModelIdV2();

        stateProjType = contract.parmStateProjType();
        level = contract.parmLevel();
        skipBlankId = contract.parmSkipBlankId();
        skipZero = contract.parmSkipZero();

        showAmount = contract.parmShowAmount();
        amountQty = contract.parmAmountQty();
        profitFactor = contract.parmProfitFactor();

        firstRun = true;

        this.initProjListTrans();

        headerLabel   = listProjTrans.formatSelection(showAmount);
        periodLabel   = listProjTrans.formatPeriodLabel('',DateFlags::None);

        [valueFactorLabel, grossMarginPctLabel] = listProjTrans.setDisplayLabel(profitFactor);

        [showQtyHour, showCostHour, showCostExpense, showCostInventory,
         showTotalCost, showRevenue, showContributionMargin,
         showGrossMarginPct, showValueAdded, showValueFactor] = listProjTrans.setDisplayFlags(hour, expenses,
                                                                                              item, amountQty,
                                                                                              profitFactor);

        [hourQtyDecimals, amountDecimals,
        grossMarginDecimals, valueAddedDecimals] = listProjTrans.setNoOfDecimals(showAmount);

        projHelpClass       = ProjListProjHelpClass::newListProjConsumption(
                                projStatement::newProjListProfitLoss(listProjTrans,
                                stateProjType,
                                projListProjTrans2Period::columnData2ActualBudget(actualVsBudget),
                                amountQty,
                                forecastModelId),
                                stateProjType);

        qrun = new QueryRun(this.parmQuery());

        this.modifyQuery();
        this.setSortField();

        while (qrun.next())
        {
            this.printProject();
            firstRun = false;
        }

        if (this.checkPrintLine())
        {
            projHelpClass.setName();
            this.insertProjListProjProfitLossTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldZero</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the variables to zero.
    /// </summary>
    void setFieldZero()
    {
        tmpSalary      = 0;
        tmpExpenses    = 0;

        tmpInventory   = 0;
        tmpTotalCost   = 0;
        tmpRevenue     = 0;
        tmpValueAdded  = 0;
        tmpMargin      = 0;

        tmpQtyHour     = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSortField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the sort field for the query.
    /// </summary>
    void setSortField()
    {
        qrun.query().dataSourceTable(tablenum(ProjTable)).sortClear();

        switch (stateProjType)
        {
            case ProjListStateProjType::Project:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjId));
                break;

            case ProjListStateProjType::Customer:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,CustAccount));
                break;

            case ProjListStateProjType::ProjGroup:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjGroupId));
                break;

            case ProjListStateProjType::WIPProject:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,wipProject));
                break;

            case ProjListStateProjType::InvoiceProject:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjInvoiceProjId));
                break;

            case ProjListStateProjType::ResponsibleSales:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, WorkerResponsibleSales));
                break;

            case ProjListStateProjType::Responsible:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, WorkerResponsible));
                break;

            case ProjListStateProjType::ResponsibleFinancial:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, WorkerResponsibleFinancial));
                break;

            case ProjListStateProjType::Type:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,Type));
                break;

            case ProjListStateProjType::Sorting1:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, SortingId), SortOrder::Ascending, 1);
                break;

            case ProjListStateProjType::Sorting2:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, SortingId), SortOrder::Ascending, 2);
                break;

            case ProjListStateProjType::Sorting3:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, SortingId), SortOrder::Ascending, 3);
                break;

            case ProjListStateProjType::Asset:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,AssetId));
                break;

            case ProjListStateProjType::FundingSource:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjInvoiceProjId));

                qrun.query().dataSourceTable(tablenum(ProjTable)).addDataSource(tablenum(ProjInvoiceTable));
                qrun.query().dataSourceTable(tablenum(ProjInvoiceTable)).joinMode(JoinMode::InnerJoin);
                qrun.query().dataSourceTable(tablenum(ProjInvoiceTable)).addLink(fieldnum(ProjTable,ProjInvoiceProjId),fieldnum(ProjInvoiceTable,ProjInvoiceProjId));

                qrun.query().dataSourceTable(tablenum(ProjInvoiceTable)).addDataSource(tablenum(ProjFundingSource));
                qrun.query().dataSourceTable(tablenum(ProjFundingSource)).joinMode(JoinMode::InnerJoin);
                qrun.query().dataSourceTable(tablenum(ProjFundingSource)).addLink(fieldnum(ProjInvoiceTable,ProjInvoiceProjId), fieldnum(ProjFundingSource,ContractId));
                qrun.query().dataSourceTable(tablenum(ProjFundingSource)).addSortField(fieldnum(ProjFundingSource,FundingSourceId));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueFactor</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the value-added factor based on the project parameter setup.
    /// </summary>
    /// <returns>
    ///    The value-added factor.
    /// </returns>
    private ProjFactorValueAdded valueFactor()
    {
        switch (ProjParameters::find().ValueAddedDisplay)
        {
            case ProjValueAddedDisplay::ValueAddedMarkup:
                if (tmpSalary)
                {
                    return (tmpValueAdded / tmpSalary);
                }
                break;

            case ProjValueAddedDisplay::ValueAddedRation:
                if (tmpRevenue)
                {
                    return (tmpValueAdded * 100 / tmpRevenue);
                }
                break;

            case ProjValueAddedDisplay::ValueAddedMarupPct:
                if (tmpSalary)
                {
                    return (tmpValueAdded * 100 / tmpSalary);
                }
                break;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateValueFactor</Name>
				<Source><![CDATA[
    private ProjFactorValueAdded updateValueFactor(ProjListProjProfitLossTmp _projListProjProfitLossTmp)
    {
        switch (ProjParameters::find().ValueAddedDisplay)
        {
            case ProjValueAddedDisplay::ValueAddedMarkup:
                if (_projListProjProfitLossTmp.CostHour)
                {
                    return (_projListProjProfitLossTmp.ValueAdded / _projListProjProfitLossTmp.CostHour);
                }
                break;

            case ProjValueAddedDisplay::ValueAddedRation:
                if (_projListProjProfitLossTmp.Revenue)
                {
                    return (_projListProjProfitLossTmp.ValueAdded * 100 / _projListProjProfitLossTmp.Revenue);
                }
                break;

            case ProjValueAddedDisplay::ValueAddedMarupPct:
                if (_projListProjProfitLossTmp.CostHour)
                {
                    return (_projListProjProfitLossTmp.ValueAdded * 100 / _projListProjProfitLossTmp.CostHour);
                }
                break;
        }

        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>