<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Jour_Transfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventMov_Jour_Transfer</c> class is used when working with transfer orders that are in
///    inventory journals.
/// </summary>
abstract class InventMov_Jour_Transfer extends InventMov_Journal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
        // <GEERU>
        boolean     countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        if (! cacheAccountOperations)
        {
            if (this.transQty() >= 0)
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventInterUnitPayable));
            }
            else
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventInterUnitReceivable));
            }
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeAutoRepAsFinished</Name>
				<Source><![CDATA[
    public boolean  canBeAutoRepAsFinished()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnAllInventLocations</Name>
				<Source><![CDATA[
    public boolean  canBeOnAllInventLocations()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateEstimated</Name>
				<Source><![CDATA[
    public boolean checkUpdateEstimated(
        InventUpd_Estimated     _updateNow,
        InventMovement          _this_Orig)
    {
        return super(_updateNow, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransPosting</Name>
				<Source><![CDATA[
    public boolean createInventTransPosting()
    {
        if (inventJournalTrans.InventTransId == inventJournalTrans.ToInventTransId)
        {
            return this.transQty() >= 0 ? true : false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransfer</Name>
				<Source><![CDATA[
    // returns true if the movement is a transfer of items. This includes transfer orders and quarantine orders
    public NoYes isTransfer()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemPriceInventoryDimensions</Name>
				<Source><![CDATA[
    protected InventDim getItemPriceInventoryDimensions()
    {
        InventDim journalTransactionInventDim = InventDim::find(this.InventDimId());

        if (journalTransactionInventDim.InventOwnerId_RU)
        {
            InventOwner_RU legalEntityOwner = InventOwner_RU::findOrCreateCurrentLegalEntity();
            if (journalTransactionInventDim.InventOwnerId_RU != legalEntityOwner.InventOwnerId)
            {
                // Vendor owners can be used in transfer journals. In such case, find item price using the legal
                // entity owner. Otherwise, no price would be found, and journal posting would fail.
                journalTransactionInventDim.InventOwnerId_RU = legalEntityOwner.InventOwnerId;
            }
        }
        return journalTransactionInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalCheckTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>InventJournalTrans</c> transaction is valid.
    /// </summary>
    /// <returns>
    /// false if there is an error in the transaction object; otherwise, true.
    /// </returns>
    public boolean journalCheckTrans()
    {
        boolean ok = this.checkSign();
        ok = ok && super();
        ok = ok && InventTransferJournalLineTransactionValidator::newFromInventJournalTrans(inventJournalTrans).check();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSign</Name>
				<Source><![CDATA[
    private boolean checkSign()
    {
        boolean ok = true;

        if (this.transQty() * this.transSign() < 0)
        {
            ok = checkFailed("@SYS11089");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetItemId</Name>
				<Source><![CDATA[
    public boolean journalSetItemId(InventDim _inventDim)
    {
        if (!super(_inventDim))
        {
            return false;
        }

        this.journalSetQty();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetQty</Name>
				<Source><![CDATA[
    public void journalSetQty(
        NoYes   _transQtySignChangedToNegative = NoYes::No,
        boolean _showUserDialog                = true,
        boolean _doMinQtyCheck                 = true,
        boolean _doMaxQtyCheck                 = true)
    {
        inventJournalTrans.Qty= -abs(inventJournalTrans.Qty);
        inventJournalTrans.modifyInventJournalTransUnitQty();

        super(_transQtySignChangedToNegative, _showUserDialog, _doMinQtyCheck, _doMaxQtyCheck);

        // This check hits only once - when user create the new transfer line and select the item.
        // In all others cases - the super() method sets the correct CostAmount value(it will have the same
        // sign as the Qty)
        if (inventJournalTrans.Qty*inventJournalTrans.CostAmount < 0)
        {
            this.journalSetCostPrice();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedFinancially</Name>
				<Source><![CDATA[
    public boolean  mustBeBookedFinancially()
    {
        // <GEERU>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            InventMovement movementIssue = this.newMovement_TransferIssue();
            InventMovement movementReceipt = this.newMovement_TransferReceipt();

            if ( movementIssue                                                                  &&
                 movementReceipt                                                                &&
                (movementIssue.accountBalanceSheet() != movementReceipt.accountBalanceSheet()   ||
                 movementIssue.defaultDimension()    != movementReceipt.defaultDimension()))
            {
                return true;
            }

            if (!InventParameters::find().EnableTransferFinancialPosting_RU)
            {
                return false;
            }
        }
        // </GEERU>

        // old journals which have not been upgraded.
        if (inventJournalTrans.InventTransId == inventJournalTrans.ToInventTransId || !inventJournalTrans.ToInventTransId)
        {
            return false;
        }

        // if item normally don't post to ledger then don't do it here either.
        if (!super())
        {
            return false;
        }

        InventDim inventDimFrom = inventJournalTrans.inventDim();
        InventDim inventDimTo = inventJournalTrans.toInventDim();

        // only post to ledger if site or item dimensions are different.
        if (inventDimFrom.InventSiteId != inventDimTo.InventSiteId)
        {
            return true;
        }

        if (!inventDim::isInventDimEqualFinancialDim(this.inventDimGroupSetup(), inventDimFrom, inventDimTo))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeSameTransSign</Name>
				<Source><![CDATA[
    public boolean mustBeSameTransSign()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateInventTransOrigin</Name>
				<Source><![CDATA[
    public boolean mustUpdateInventTransOrigin()
    {
        return this.inventTable().isItemInventoryOwnerActivated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>InventMov_Jour_Transfer</c> class based on the specified record.
    /// </summary>
    /// <param name="_inventJournalTrans">
    ///    The record in the <c>InventJournalTrans</c> table for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_Jour_Transfer</c> class.
    /// </returns>
    public static InventMov_Jour_Transfer newFromInventJournalTrans(InventJournalTrans _inventJournalTrans, InventMovSubType _subType)
    {
        if (_subType != InventMovSubType::TransferReceipt)
        {
            return InventMov_Jour_TransferIssue::newFromInventJournalTrans(_inventJournalTrans);
        }
        else
        {
            InventMov_Jour_Transfer inventMov_Jour_Transfer = InventMov_Jour_TransferReceipt::newFromInventJournalTrans(_inventJournalTrans);
            inventMov_Jour_Transfer.inventMovSubType(InventMovSubType::TransferReceipt);
            return inventMov_Jour_Transfer;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_TransferIssue</Name>
				<Source><![CDATA[
    public InventMovement  newMovement_TransferIssue()
    {
        return InventMovement::construct(this.buffer(),InventMovSubType::None,this.childBuffer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_TransferReceipt</Name>
				<Source><![CDATA[
    public InventMovement  newMovement_TransferReceipt()
    {
        return InventMovement::construct(this.buffer(),InventMovSubType::TransferReceipt,this.childBuffer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    public LedgerPostingType postingOperations()
    {
        if (this.transQty() >= 0)
        {
            return LedgerPostingType::InventInterUnitPayable;
        }
        return LedgerPostingType::InventInterUnitReceivable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferIssueCostPriceInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the inventory dimension for a transfer issue.
    /// </summary>
    /// <returns>
    ///    The inventory dimension where the transfer was issued.
    /// </returns>
    /// <remarks>
    ///    Only the inventory dimension of the originating buffer are returned.
    /// </remarks>
    public InventDim transferIssueCostPriceInventDim()
    {
        return inventJournalTrans.inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public InventTransType transType()
    {
        return InventTransType::InventTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerFinancial</Name>
				<Source><![CDATA[
    public CostAmount updateLedgerFinancial(
        LedgerVoucher           _ledgerVoucher,
        InventUpd_Financial     _updateNow,
        boolean                 _allowNegative = false)
    {
        CostAmount costAmountMST;
        // Creating ledger transactions
        if (this.mustBeBookedFinancially())
        {
            costAmountMST = super(_ledgerVoucher, _updateNow, _allowNegative);
        }
        else
        {
            if (_updateNow.parmFinancial() > 0)
            {
                if (_updateNow.parmCurrencyCode() != CompanyInfoHelper::standardCurrency())
                {
                    throw error("@SYS2009");
                }

                costAmountMST = _updateNow.parmCostAmountCur();

                _updateNow.updOperationsAmountLedger(-_updateNow.parmCostAmountCur());
            }
            else
            {
                costAmountMST = 0;
            }
        }
        return costAmountMST;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>