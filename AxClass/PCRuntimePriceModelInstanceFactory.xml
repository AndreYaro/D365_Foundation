<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCRuntimePriceModelInstanceFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates an instance of <c>PCRuntimePriceModelInstance</c> class.
/// </summary>
class PCRuntimePriceModelInstanceFactory
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>PCRuntimePriceModelInstance</c> class.
    /// </summary>
    /// <param name="_currencyCode">
    /// A currency code from source order line.
    /// </param>
    /// <param name="_priceModel">
    /// A reference to price model.
    /// </param>
    /// <param name="_sourceDocumentLine">
    /// A buffer of source order line.
    /// </param>
    /// <param name="_productConfigurationModel">
    /// An instance of <c>PCproductConfigurationModel</c> table bufffer.
    /// </param>
    /// <param name="_runtimeMode">
    /// A <c>PCRuntimeMode</c> value.
    /// </param>
    /// <param name="_isRunningMultiCompany">
    /// Specifies, that the price model is required for intercompany configuration scenario.
    /// </param>
    /// <returns>
    /// An instance of <c>PCRuntimePriceModelInstance</c> class.
    /// </returns>
    public PCRuntimePriceModelInstance create(
        CurrencyCode                _currencyCode,
        RefRecId                    _priceModel,
        Common                      _sourceDocumentLine,
        PCproductConfigurationModel _productConfigurationModel,
        PCRuntimeMode               _runtimeMode,
        boolean                     _isRunningMultiCompany = false)
    {
        PCRuntimePriceModelInstance     runtimePriceModelInstance = PCRuntimePriceModelInstance::construct();
        RefRecId                        priceModelReference;

        if (_runtimeMode == PCRuntimeMode::Test)
        {
            runtimePriceModelInstance.parmCurrency(_currencyCode);
            runtimePriceModelInstance.parmPriceModelCurrency(_currencyCode);
            runtimePriceModelInstance.parmPriceModel(_priceModel);
        }
        else
        if (_runtimeMode == PCRunTimeMode::NewVariant || _runtimemode == PCRuntimeMode::EditVariant)
        {
            priceModelReference = this.findPriceModelForOrderLine(
                _sourceDocumentLine.RecId,
                _productConfigurationModel,
                _sourceDocumentLine.TableId,
                fieldNum(Common, RecId));

            if (!priceModelReference)
            {
                PCRuntimePriceModelInstanceFactory::warningNoPriceModelFound();
            }
            else
            {
                runtimePriceModelInstance.parmPriceModel(priceModelReference);
                this.updateWithCurrencies(_sourceDocumentLine, priceModelReference, runtimePriceModelInstance);
            }
        }

        return runtimePriceModelInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPriceModelForOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a price model, which should be used based on currenct context
    /// </summary>
    /// <param name="_sourceDocumentLineRecId">
    /// A reference to the source order line.
    /// </param>
    /// <param name="_productConfigurationModel">
    /// An instance of <c>PCproductConfigurationModel</c> table bufffer.
    /// </param>
    /// <param name="_orderLinetableId">
    /// A table ID of the order line buffer.
    /// </param>
    /// <param name="_orderLineRecId">
    /// A field ID of the <c>RecID</c> field on the order line buffer
    /// </param>
    /// <param name="_orderdate">
    /// A <c>Date</c> which is used to search for the valid price model criteria
    /// </param>
    /// <returns>
    /// A reference to price model.
    /// </returns>
    protected PCPriceModelRefRecId findPriceModelForOrderLine(
        RecId                               _sourceDocumentLineRecId,
        PCproductConfigurationModel         _productConfigurationModel,
        tableId                             _orderLinetableId,
        FieldId                             _orderLineRecId,
        Date                                _orderdate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
    {
        PCPriceModelSelectionCriteria       priceModelSelectionCriteria;
        PCOrderlineTypeSelectionCriteria    orderlineTypeSelectionCriteria;
        boolean                             priceModelFound;
        Query                               filterQuery;
        QueryRun                            queryRun;
        PCPriceModelRefRecId                priceModelReference;
        QueryBuildDataSource                qbds;

        while select priceModelSelectionCriteria
            order by priceModelSelectionCriteria.SearchSequence asc
                where priceModelSelectionCriteria.ProductConfigurationModel == _productConfigurationModel.RecId
                &&  priceModelSelectionCriteria.ValidFromDate <= _orderdate
                &&  priceModelSelectionCriteria.ValidToDate >= _orderdate
            exists join orderlineTypeSelectionCriteria
                where orderlineTypeSelectionCriteria.RecId == priceModelSelectionCriteria.OrderlineTypeSelectionCriteria
                && orderlineTypeSelectionCriteria.OrderlineType == _orderLinetableId
        {
            if (!priceModelFound && (priceModelSelectionCriteria.packedQuery!=conNull()))
            {
                filterQuery = new Query(priceModelSelectionCriteria.packedQuery);

                qbds = filterQuery.dataSourceTable(_orderLinetableId);
                qbds.addRange(_orderLineRecId).value(queryValue(_sourceDocumentLineRecId));

                queryRun = new queryRun(filterQuery);

                if (queryRun.next())
                {
                    priceModelFound = true;
                    priceModelReference = priceModelSelectionCriteria.priceModel;
                }
            }
        }

        return priceModelReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCodeFromOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>CurrencyCode</c> value from the order line.
    /// </summary>
    /// <param name="_map">
    /// An instance of <c>CurrencyCodeMap</c> object.
    /// </param>
    /// <returns>
    ///  A <c>CurrencyCode</c> value from the order line.
    /// </returns>
    protected CurrencyCode getCurrencyCodeFromOrderLine(CurrencyCodeMap _map)
    {
        return _map.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWithCurrencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates specified <c>PCRuntimePriceModelInstance</c> object with the order line and reporting currencies.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// A buffer of source order line.
    /// </param>
    /// <param name="_priceModelReference">
    /// A reference to price model.
    /// </param>
    /// <param name="_runtimePriceModelInstance">
    /// An instance of <c>PCRuntimePriceModelInstance</c> class.
    /// </param>
    protected void updateWithCurrencies(Common _sourceDocumentLine, RefRecId _priceModelReference, PCRuntimePriceModelInstance _runtimePriceModelInstance)
    {
        CurrencyCode currency = this.getCurrencyCodeFromOrderLine(_sourceDocumentLine);

        _runtimePriceModelInstance.parmCurrency(currency);

        if (!PCPriceModelCurrency::findByPriceModelAndCurrency(_priceModelReference, currency))
        {
            currency = EcoResProductParameters::find().Currency;
        }

        _runtimePriceModelInstance.parmPriceModelCurrency(currency);

        // Fail fast, if no exchange rates exists between price model currency and order line currency
        if (_runtimePriceModelInstance.parmPriceModelCurrency() != _runtimePriceModelInstance.parmCurrency())
        {
            ExchangeRateHelper::curPrice2CurPrice(1, _runtimePriceModelInstance.parmPriceModelCurrency(), _runtimePriceModelInstance.parmCurrency());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCRuntimePriceModelInstanceFactory construct()
    {
        return new PCRuntimePriceModelInstanceFactory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>warningNoPriceModelFound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Informs user with a warning, if no valid price model can be found based on the current order line context.
    /// </summary>
    public static void warningNoPriceModelFound()
    {
        Box::warning("@SYS4001956");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>