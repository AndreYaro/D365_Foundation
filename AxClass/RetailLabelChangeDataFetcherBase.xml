<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailLabelChangeDataFetcherBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailLabelChangeDataFetcherBase</c> class implements <c>RetailLabelChangeDataFetcher</c> and <c>RetailLabelChangeExclusionProvider</c>.
/// </summary>
abstract class RetailLabelChangeDataFetcherBase implements RetailLabelChangeDataFetcher, RetailLabelChangeExclusionProvider
{
    RetailStoreTable storeTable;

    ItemId itemId;
    RetailVariantId variantId;

    QueryRun qr;

    NoYes initWithQtyOnHand;

    PriceDate priceDate;
    OMOperatingUnitRefRecId operatingUnitId;
    RefRecId hierarchyRecId;
    EcoResCategoryId categoryId;
    RetailLabelChangeItemQtyValidator itemQtyValidator;

    Set storeExclusionSet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addSourceSpecificExistJoins</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds source specific exists joins to the query.
    /// </summary>
    /// <param name="_query">
    /// An initialized <c>Query</c> object.
    /// </param>
    /// <returns>
    /// Query with appended source specific exist joins.
    /// </returns>
    /// <remarks>
    /// This method should be overriden in the descendants that have some source specific exist joins.
    /// </remarks>
    protected Query addSourceSpecificExistJoins(Query _query)
    {
        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSourceSpecificQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a source specific query.
    /// </summary>
    /// <returns>
    /// An initialized <c>Query</c> object.
    /// </returns>
    /// <remarks>
    /// This method initializes a source specific part of the query which is then complemented with the common query part in the initQuery method.
    /// </remarks>
    protected abstract Query createSourceSpecificQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the current line.
    /// </summary>
    /// <returns>
    /// A container with the data for the current line.
    /// </returns>
    public container current()
    {
        Qty qty = 1;

        Qty calcQtyOnHand()
        {
            InventLocation storeLocation;
            InventSumDateDim inventSumDateDim;
            InventDimParm inventDimParm;
            InventDim inventDimOnHand;
            InventQty qtyOnHand;

            changeCompany(storeTable.inventLocationDataAreaId)
            {
                storeLocation = InventLocation::find(storeTable.inventLocation);
                inventDimOnHand.data(InventDimCombination::findVariantId(variantId).inventDim());
                inventDimOnHand.InventLocationId = storeLocation.InventLocationId;
                inventDimOnHand.initFromInventLocation(storeLocation);
                inventDimOnHand = InventDim::findOrCreate(inventDimOnHand);
                inventDimParm.initFromInventDim(inventDimOnHand);
                inventSumDateDim = InventSumDateDim::newParameters(priceDate, itemId, inventDimOnHand, inventDimParm);
                qtyOnHand = inventSumDateDim.postedQty() + inventSumDateDim.receivedQty() - inventSumDateDim.deductedQty();
            }

            return qtyOnHand;
        }

        if (initWithQtyOnHand)
        {
            qty = calcQtyOnHand();
        }

        return [itemId,
                variantId,
                qty,
                InventTableModule::find(itemId, ModuleInventPurchSales::Sales).UnitId,
                storeTable.StoreNumber,
                storeTable.OMOperatingUnitID,
                storeTable.generatesItemLabels,
                storeTable.generatesShelfLabels,
                storeTable.createLabelsForZeroPrice];
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the current line for the fetcher.
    /// </summary>
    /// <returns>
    /// true if the operation succeded; false otherwise.
    /// </returns>
    protected boolean fetchLine()
    {
        boolean ret;

        ret = qr.next();

        if (ret)
        {
            storeTable = qr.get(tableNum(RetailStoreTable));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemVariantId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current values of the ItemId and VariantId.
    /// </summary>
    /// <returns>
    /// A container containing [ItemId, VariantId].
    /// </returns>
    protected abstract container getItemVariantId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a query for the fetcher.
    /// </summary>
    /// <returns>
    /// An initialized <c>Query</c> object.
    /// </returns>
    protected Query initQuery()
    {
        EcoResCategory ecoResCategory;
        Query query = this.createSourceSpecificQuery();
        QueryBuildDataSource qbds, qbds_product, qbds_channelPriceGroup;
        QueryBuildFieldList qbfl;
        str operatingUnitsRangeStr;
        FieldId productFieldId;

        // Set qbds to point to the last data source in the query (this is the only way to add joined data source to the query)
        qbds = query.dataSourceNo(query.dataSourceCount());
        // RetailStoreTable
        qbds = qbds.addDataSource(tableNum(RetailStoreTable));
        qbds_channelPriceGroup = query.dataSourceTable(tableNum(RetailChannelPriceGroup));
        if (qbds_channelPriceGroup)
        {
            qbds.addLink(fieldNum(RetailChannelPriceGroup, RetailChannel), fieldNum(RetailStoreTable, RecId), qbds_channelPriceGroup.name());
        }
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbfl = qbds.fields();
        qbfl.clearFieldList();
        qbfl.addField(fieldNum(RetailStoreTable, StoreNumber), SelectionField::Database);
        qbfl.addField(fieldNum(RetailStoreTable, generatesItemLabels), SelectionField::Database);
        qbfl.addField(fieldNum(RetailStoreTable, generatesShelfLabels), SelectionField::Database);
        qbfl.addField(fieldNum(RetailStoreTable, createLabelsForZeroPrice), SelectionField::Database);
        qbfl.addField(fieldNum(RetailStoreTable, OMOperatingUnitID), SelectionField::Database);
        qbfl.addField(fieldNum(RetailStoreTable, InventLocation), SelectionField::Database);
        qbfl.addField(fieldNum(RetailStoreTable, InventLocationDataAreaId), SelectionField::Database);
        if (operatingUnitId)
        {
            operatingUnitsRangeStr = RetailLabelChangeDataFetcherBase::getOperatingUnitRangeStr(operatingUnitId, hierarchyRecId);
            if (operatingUnitsRangeStr)
            {
                qbds.addRange(fieldNum(RetailStoreTable, OMoperatingUnitID)).value(operatingUnitsRangeStr);
            }
        }
        // Extended query syntax
        qbds.addRange(fieldNum(RetailStoreTable, RecId)).value(
            strFmt(
                '((%1.%2 == %4) || (%1.%3 == %4))',
                qbds.name(),
                fieldStr(RetailStoreTable, generatesItemLabels),
                fieldStr(RetailStoreTable, generatesShelfLabels),
                enum2int(NoYes::Yes)));
        // Product
        if (this.productTableId())
        {
            qbds_product = query.dataSourceTable(this.productTableId());
        }
        // No product data source yet in the query, then we should add it
        if (!qbds_product)
        {
            qbds_product = qbds.addDataSource(tableNum(InventTable));
            qbds_product.addLink(this.itemFieldId(), fieldNum(InventTable, ItemId), query.dataSourceTable(this.itemTableId()).name());
            qbds_product.joinMode(JoinMode::InnerJoin);
            qbds_product.fetchMode(QueryFetchMode::One2One);
            qbfl = qbds_product.fields();
            qbfl.clearFieldList();
            qbfl.addField(fieldNum(InventTable, TableId), SelectionField::Database);
            productFieldId = fieldNum(InventTable, Product);
        }
        else
        {
            productFieldId = this.productFieldId();
        }
        // RetailChannelAssortedProductView
        qbds = qbds.addDataSource(tableNum(RetailChannelAssortedProductView));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(productFieldId, fieldNum(RetailChannelAssortedProductView, ProductID), qbds_product.name());
        qbds.addLink(fieldNum(RetailStoreTable, OMOperatingUnitID), fieldNum(RetailChannelAssortedProductView, OMOperatingUnitId));
        qbds.addRange(fieldNum(RetailChannelAssortedProductView, ValidFrom)).value(queryRange(DateTimeUtil::minValue(), DateTimeUtil::newDateTime(priceDate, 0)));
        qbds.addRange(fieldNum(RetailChannelAssortedProductView, ValidTo)).value(queryRange(DateTimeUtil::newDateTime(priceDate, 0), DateTimeUtil::maxValue()));

        // Add category filter if any
        if (categoryId)
        {
            ecoResCategory = EcoresCategory::find(categoryId);
            if (!ecoResCategory)
            {
                throw error(strFmt(EcoResCategory::txtNotExist(), tablePName(EcoResCategory), categoryId));
            }
            qbds = qbds.addDataSource(tableNum(EcoResProductCategory));
            qbds.addLink(productFieldId, fieldNum(EcoResProductCategory, Product), qbds_product.name());
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds = qbds.addDataSource(tableNum(EcoResCategory));
            qbds.relations(true);
            qbds.addRange(fieldNum(EcoResCategory, CategoryHierarchy)).value(queryValue(ecoResCategory.CategoryHierarchy));
            // Extended query syntax
            // Either this is the category itself or it is one of its descendants
            qbds.addRange(fieldNum(EcoResCategory, RecId)).value(
                strFmt('((%1 == %2) || ((%3 > %4) && (%5 < %6)))',
                    fieldStr(EcoResCategory, RecId),
                    ecoResCategory.RecId,
                    fieldStr(EcoResCategory, NestedSetLeft),
                    ecoResCategory.NestedSetLeft,
                    fieldStr(EcoResCategory, NestedSetRight),
                    ecoResCategory.NestedSetRight
                    ));
        }

        query = this.addSourceSpecificExistJoins(query);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ItemId field ID.
    /// </summary>
    /// <returns>
    /// Field ID.
    /// </returns>
    /// <remarks>
    /// Gets the itemId field ID that is used in the initQuery method to build a query.
    /// </remarks>
    protected abstract FieldId itemFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID containing the item field.
    /// </summary>
    /// <returns>
    /// Table ID.
    /// </returns>
    /// <remarks>
    /// Used in the initQuery method to build a query.
    /// </remarks>
    protected abstract TableId itemTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Advances the fetcher one step forward.
    /// </summary>
    /// <returns>
    /// true if the operation succeded; false otherwise.
    /// </returns>
    public boolean moveNext()
    {
        boolean ret = false;

        while (this.fetchLine())
        {
            this.retrieveItemVariantId();
            if (this.validateLine())
            {
                ret = true;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets parameters and creates an instance of <c>RetailLabelChangeItemQtyValidator</c>.
    /// </summary>
    /// <param name = "_priceDate">The price date.</param>
    /// <param name = "_hierarchyRecId">The Hyerarchy RecId.</param>
    /// <param name = "_operatingUnitId">The OM Operating Unit Id.</param>
    /// <param name = "_categoryId">The category Id.</param>
    /// <param name = "_itemQtyFilter">The Item quantity filter.</param>
    /// <param name = "_initWithQtyOnHand">The initial Quantity On Hand.</param>
    public void new(PriceDate _priceDate, RefRecId _hierarchyRecId, OMOperatingUnitRefRecId _operatingUnitId, EcoResCategoryId _categoryId, RetailItemQtyFilter _itemQtyFilter, NoYes _initWithQtyOnHand)
    {
        priceDate = _priceDate;
        hierarchyRecId = _hierarchyRecId;
        operatingUnitId = _operatingUnitId;
        categoryId = _categoryId;
        itemQtyValidator = RetailLabelChangeItemQtyValidator::construct(_itemQtyFilter);
        initWithQtyOnHand = _initWithQtyOnHand;
        qr = new QueryRun(this.initQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStoreExclusionSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets the Store Exclusion Set.
    /// </summary>
    /// <param name = "_storeExclusionSet">The new Store Exclusion Set.</param>
    /// <returns>a <c>Set</c> object containing the current Store Exclusion set.</returns>
    public Set parmStoreExclusionSet(Set _storeExclusionSet = storeExclusionSet)
    {
        storeExclusionSet = _storeExclusionSet;
        return storeExclusionSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the product field.
    /// </summary>
    /// <returns>
    /// Field ID.
    /// </returns>
    /// <remarks>
    /// This field is used for joining with the assortment table.
    /// </remarks>
    protected abstract FieldId productFieldId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>productTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the table containing the product field.
    /// </summary>
    /// <returns>
    /// Table ID.
    /// </returns>
    /// <remarks>
    /// This table is used for joining with the assortment table.
    /// </remarks>
    protected abstract TableId productTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets current fetcher.
    /// </summary>
    public void reset()
    {
        qr.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveItemVariantId</Name>
				<Source><![CDATA[
    private void retrieveItemVariantId()
    {
        [itemId, variantId] = this.getItemVariantId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the Store Number is not in a Exclusion set.
    /// </summary>
    /// <returns>true if Store Number is not in exclusion set, otherwise false.</returns>
    protected boolean validateLine()
    {
        InventDim inventDimLocal;
        InventLocation inventLocation;
        Set organizationTypes;
        boolean ret = true;

        boolean validateLabelSetup(RetailLabelTypeBase _labelType, boolean _dontAddToExclusionList = false)
        {
            RetailInventItemLabelSetup labelSetup;
            boolean result = false;

            while select OMInternalOrganization, OMHierarchyType from labelSetup
                where labelSetup.LabelType == _labeltype
                   && labelSetup.ItemId == itemId
            {
                if (!organizationTypes)
                {
                    organizationTypes = new Set(Types::Enum);
                    organizationTypes.add(OMInternalOrganizationType::OperatingUnit);
                }

                if (OMInternalOrganization::isInternalOrganizationInSubHierarchy(
                    storeTable.OMOperatingUnitID,
                    labelSetup.OMInternalOrganization,
                    labelSetup.OMHierarchyType,
                    DateTimeUtil::utcNow(),
                    organizationTypes))
                {
                    result = true;
                    break;
                }
            }

            if (!result)
            {
                switch (RetailParameters::find().ItemLabelSetupMissingAction)
                {
                    case RetailItemLabelSetupMissingAction::IncludeItem:
                        warning(strFmt("@SYP4880938", itemId, storeTable.StoreNumber));
                        result = true;
                        break;
                    case RetailItemLabelSetupMissingAction::SkipItem:
                        result = checkFailed(strFmt("@SYP4880939", itemId, storeTable.StoreNumber));
                        break;
                    case RetailItemLabelSetupMissingAction::CancelJournals:
                        if (!_dontAddToExclusionList)
                        {
                            if (!storeExclusionSet)
                            {
                                storeExclusionSet = new Set(Types::String);
                            }
                            // Add store to exclusion list to avoid generation of journals for this store from now on
                            storeExclusionSet.add(storeTable.StoreNumber);
                            warning(strFmt("@SYP4880940", itemId));
                        }
                        result = false;
                        break;
                }
            }

            return result;
        }

        if (storeExclusionSet && storeExclusionSet.in(storeTable.StoreNumber))
        {
            return false;
        }

        changeCompany(storeTable.inventLocationDataAreaId)
        {
            if (storeTable.generatesItemLabels)
            {
                ret = validateLabelSetup(RetailLabelTypeBase::ItemLabel, storeTable.generatesShelfLabels);
                if (!ret && !storeTable.generatesShelfLabels)
                {
                    return false;
                }
            }

            if (storeTable.generatesShelfLabels)
            {
                ret = validateLabelSetup(RetailLabelTypeBase::ShelfLabel, storeTable.generatesItemLabels && ret) || ret;
                if (!ret)
                {
                    return false;
                }
            }

            if (itemQtyValidator)
            {
                if (variantId)
                {
                    inventDimLocal.data(InventDimCombination::findVariantId(variantId).inventDim());
                }

                inventLocation = InventLocation::find(storeTable.inventLocation);
                if (!inventLocation)
                {
                    throw error(strFmt(InventLocation::txtNotExist(), storeTable.inventLocation));
                }

                inventDimLocal.InventLocationId = inventLocation.InventLocationId;
                inventDimLocal.initFromInventLocation(inventLocation);
                inventDimLocal = InventDim::findOrCreate(inventDimLocal);
                ret = itemQtyValidator.validate(itemId, inventDimLocal, priceDate);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperatingUnitRangeStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the operating unit range string.
    /// </summary>
    /// <param name="_operatingUnitId">
    /// Operating unit record ID.
    /// </param>
    /// <param name="_hierarchyRecId">
    /// Hierarchy type record ID.
    /// </param>
    /// <returns>
    /// A string containing the operating units record Ids from the sub hierarchy separated by comma that can be used as a query range.
    /// </returns>
    /// <remarks>
    /// The method iterates all the sub hierarchies having Retail assortment hierarchy prupose.
    /// </remarks>
    protected static str getOperatingUnitRangeStr(OMOperatingUnitRefRecId _operatingUnitId, RefRecId _hierarchyRecId)
    {
        str operatingUnitsRangeStr;
        Set operatingUnitsSet;
        Set organizationTypes = new Set(Types::Enum);
        SetEnumerator se;
        OMOperatingUnitRefRecId operatingUnitId;

        organizationTypes.add(OMInternalOrganizationType::OperatingUnit);
        operatingUnitsSet = OMInternalOrganization::getDescendantsAndSelf(_operatingUnitId, _hierarchyRecId, DateTimeUtil::utcNow(), organizationTypes);

        if (operatingUnitsSet)
        {
            se = operatingUnitsSet.getEnumerator();
            while (se.moveNext())
            {
                if (operatingUnitsRangeStr)
                {
                    operatingUnitsRangeStr += ',';
                }

                operatingUnitId = se.current();
                operatingUnitsRangeStr += int642str(operatingUnitId);
            }
        }

        return operatingUnitsRangeStr;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>