<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustGrossMarginByItemDP_NA</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SrsReportQuery(queryStr(CustGrossMarginbyItemV2_NA))]
[SRSReportParameterAttribute(classStr(CustGrossMarginByItemContract_NA))]
public final class CustGrossMarginByItemDP_NA extends SrsReportDataProviderPreProcessTempDB
{
    private CustGrossMarginByItemTmp_NA custGrossMarginByItemTmp;
    private CustGrossMarginByItemTmp_NA tempRowForInsert;
    private CustGrossMarginByItemTmp_NA detailForSummaryReport;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustGrossMarginByItemTmp_NA</Name>
				<Source><![CDATA[
    [SrsReportDataSet(tableStr(CustGrossMarginByItemTmp_NA))]
    internal CustGrossMarginByItemTmp_NA getCustGrossMarginByItemTmp_NA()
    {
        return custGrossMarginByItemTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a tempdb with report data for the <c>CustGrossMarginByItem_NA</c> report.
    /// </summary>
    [Hookable(false)]
    public void processReport()
    {
        detailForSummaryReport.setConnection(this.parmUserConnection());
        custGrossMarginByItemTmp.setConnection(this.parmUserConnection());

        CustGrossMarginByItemContract_NA contract = this.parmDataContract();
        boolean summaryMode = contract.parmSummaryMode();

        RecordInsertList insertList = this.createInsertList(summaryMode);

        QueryRun qr = new QueryRun(this.parmQuery());
        while (qr.next())
        {
            CustInvoiceJour invoiceJour = qr.get(tableNum(CustInvoiceJour));
            CustInvoiceTrans invoiceTrans = qr.get(tableNum(CustInvoiceTrans));
            this.insertReportRow(insertList, invoiceJour, invoiceTrans);            
        }

        insertList.insertDatabase();

        // If running in summary mode, transfer the detail data into the RDP table summarized.
        if (summaryMode)
        {
            insert_recordset custGrossMarginByItemTmp (ItemId, ItemName, LineAmountMST, CostValue, ContributionMarginMST)
            select ItemId, ItemName, sum(LineAmountMST), sum(CostValue), sum(ContributionMarginMST)
            from detailForSummaryReport
                group by detailForSummaryReport.ItemId, detailForSummaryReport.ItemName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInsertList</Name>
				<Source><![CDATA[
    private RecordInsertList createInsertList(boolean _summaryMode)
    {
        RecordInsertList insertList;

        if (_summaryMode)
        {
            // If running in summary mode, put the rows into a detail table to be aggregated later.
            insertList = new RecordInsertList(tableNum(CustGrossMarginByItemTmp_NA), true, true, true, false, false, detailForSummaryReport);
        }
        else
        {
            // If running in detail mode, put the rows directly into the RDP table.
            insertList = new RecordInsertList(tableNum(CustGrossMarginByItemTmp_NA), true, true, true, false, false, custGrossMarginByItemTmp);
        }

        return insertList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReportRow</Name>
				<Source><![CDATA[
    private void insertReportRow(RecordInsertList _insertlist, CustInvoiceJour _invoiceJour, CustInvoiceTrans _invoiceTrans)
    {
        tempRowForInsert.clear();

        tempRowForInsert.OrderAccount = _invoiceJour.OrderAccount;
        tempRowForInsert.ItemId = _invoiceTrans.ItemId;
        tempRowForInsert.Name = _invoiceTrans.Name;
        tempRowForInsert.Qty = _invoiceTrans.Qty;
        tempRowForInsert.InvoiceId = _invoiceJour.InvoiceId;
        tempRowForInsert.SalesUnit = _invoiceTrans.SalesUnit;
        tempRowForInsert.LineAmountMST = _invoiceTrans.LineAmountMST;
        tempRowForInsert.CostValue = 0 - _invoiceTrans.inventCostAmount();
        tempRowForInsert.ContributionMarginMST = tempRowForInsert.LineAmountMST - tempRowForInsert.CostValue;
        tempRowForInsert.ItemName = InventTable::find(_invoiceTrans.ItemId).defaultProductName();

        _insertlist.add(tempRowForInsert);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>