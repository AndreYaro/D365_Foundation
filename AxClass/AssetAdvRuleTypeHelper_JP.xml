<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetAdvRuleTypeHelper_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Asset advanced rule type helper
/// </summary>
class AssetAdvRuleTypeHelper_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTemplates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates templates
    /// </summary>
    /// <param name="_groupTypeSet">
    /// The group type set
    /// </param>
    /// <param name="_assetAdvancedRuleTemplateTmp">
    /// The asset advanced rule template temp table
    /// </param>
    /// <returns>
    /// Returns the created temp table
    /// </returns>
    public static AssetAdvancedRuleTemplateTmp_JP createTemplates(set _groupTypeSet, AssetAdvancedRuleTemplateTmp_JP _assetAdvancedRuleTemplateTmp = null)
    {
        AssetAdvancedRuleTemplateTmp_JP     assetAdvancedRuleTemplateTmp;
        ListEnumerator                      listEnumerator;
        SetEnumerator                       setEnumerator;
        AssetAdvancedRuleGroupType_JP       currentGroupType;

        if (_assetAdvancedRuleTemplateTmp.TableId == tableNum(AssetAdvancedRuleTemplateTmp_JP))
        {
            assetAdvancedRuleTemplateTmp.setTmpData(_assetAdvancedRuleTemplateTmp);
        }

        if (_groupTypeSet)
        {
            setEnumerator = _groupTypeSet.getEnumerator();
            while (setEnumerator.moveNext())
            {
                currentGroupType = setEnumerator.current();

                listEnumerator = AssetAdvRuleTypeHelper_JP::getRuleTemplateListForGroupType(currentGroupType).getEnumerator();
                while (listEnumerator.moveNext())
                {
                    assetAdvancedRuleTemplateTmp.clear();
                    assetAdvancedRuleTemplateTmp.GroupType = currentGroupType;

                    [
                        assetAdvancedRuleTemplateTmp.DisplayOrderKeyInGroup,
                        assetAdvancedRuleTemplateTmp.Name,
                        assetAdvancedRuleTemplateTmp.TypeEnumName,
                        assetAdvancedRuleTemplateTmp.TypeEnumValue
                    ] = listEnumerator.current();

                    assetAdvancedRuleTemplateTmp.insert();
                }
            }
        }

        return assetAdvancedRuleTemplateTmp;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getRuleTemplateListForGroupType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rule template list for group type
    /// </summary>
    /// <param name="_ruleGroupType">
    /// The rule group type
    /// </param>
    /// <returns>
    /// Returns the template list
    /// </returns>
    public static List getRuleTemplateListForGroupType(AssetAdvancedRuleGroupType_JP _ruleGroupType)
    {
        List        ret;
        boolean     inDebugMode = Debug::debugMode();

        SysGlobalObjectCache    sgoc    = classFactory.globalObjectCache();
        GlobalObjectCacheScope  scope   = funcName();
        container               key     = [_ruleGroupType];
        container               value;

        Map                                     groupType2TemplateList;
        MapEnumerator                           mapEnumerator;
        List                                    templateList;
        List                                    ruleClassList;
        ListEnumerator                          listEnumerator;
        DictClass                               dictClass;
        Object                                  attributeObj;
        AssetAdvancedRuleGroupTypeAttribute_JP  assetAdvancedRuleGroupTypeAttribute;
        AssetAdvancedRuleTypeAttribute_JP       assetAdvancedRuleTypeAttribute;

        DictEnum                                dictEnum;
        container                               packedTemplateList;
        int                                     i;

        value = sgoc.find(scope, key);
        if (value != conNull())
        {
            ret = List::create(conPeek(value, 1));
        }
        else
        {
            //
            // Refresh the cache for whole scope
            //

            sgoc.clear(scope);

            // Init the map for all group types.
            groupType2TemplateList = new Map(Types::Enum, Types::Class);
            dictEnum = new DictEnum(enumNum(AssetAdvancedRuleGroupType_JP));
            for (i = 0; i < dictEnum.values(); i++)
            {
                groupType2TemplateList.insert(dictEnum.index2Value(i), new List(Types::Container));
            }

            // Analysis the group type of each rule template
            dictClass = new DictClass(classNum(AssetAdvRuleType_JP));
            ruleClassList = dictClass.extendedBy(true);
            listEnumerator = ruleClassList.getEnumerator();
            while (listEnumerator.moveNext())
            {
                dictClass = new DictClass(listEnumerator.current());
                if (dictClass && !dictClass.isAbstract() && !dictClass.isInterface())
                {
                    // Currently, one rule pattern can only belong to one rule group.
                    attributeObj = dictClass.getAttribute(AttributeStr(AssetAdvancedRuleGroupTypeAttribute_JP));
                    if (attributeObj && attributeObj is AssetAdvancedRuleGroupTypeAttribute_JP)
                    {
                        assetAdvancedRuleGroupTypeAttribute = attributeObj as AssetAdvancedRuleGroupTypeAttribute_JP;

                        attributeObj = dictClass.getAttribute(AttributeStr(AssetAdvancedRuleTypeAttribute_JP));
                        if (attributeObj && attributeObj is AssetAdvancedRuleTypeAttribute_JP)
                        {
                            assetAdvancedRuleTypeAttribute = attributeObj as AssetAdvancedRuleTypeAttribute_JP;

                            if (inDebugMode)
                            {
                                Debug::assert(groupType2TemplateList.exists(assetAdvancedRuleGroupTypeAttribute.parmRuleGroupType()));
                            }

                            templateList = groupType2TemplateList.lookup(assetAdvancedRuleGroupTypeAttribute.parmRuleGroupType());

                            templateList.addEnd(
                                [
                                    assetAdvancedRuleGroupTypeAttribute.parmRuleDisplayOrderKeyInGroup(),
                                    assetAdvancedRuleGroupTypeAttribute.parmRuleTemplateLabelInGroup(),
                                    assetAdvancedRuleTypeAttribute.parmRuleTypeEnumName(),
                                    assetAdvancedRuleTypeAttribute.parmRuleTypeEnumValue()
                                ]);

                            groupType2TemplateList.insert(assetAdvancedRuleGroupTypeAttribute.parmRuleGroupType(), templateList);
                        }
                    }
                }
            }

            // Save to cache
            mapEnumerator = groupType2TemplateList.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                templateList        = mapEnumerator.currentValue();
                packedTemplateList  = templateList.pack();
                sgoc.insert(scope, [mapEnumerator.currentKey()], [packedTemplateList]);

                if (mapEnumerator.currentKey() == _ruleGroupType)
                {
                    ret = templateList;
                }
            }
        }

        if (inDebugMode)
        {
            Debug::assert(ret != null);
        }

        return ret;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>