<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjectRevenueSourceDoc</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_ProjectRevenue), SourceDocument_ProjectRevenue::ProjectRevenue, tableStr(ProjectRevenueHeader))]
public class ProjectRevenueSourceDoc extends SourceDocument
    implements SourceDocumentIChargeSource, SourceDocumentIDataProvider
{
    ProjectRevenueHeader    projectRevenueHeader;
    MarkupTrans             markupTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    public BusinessEvent documentsBusinessEvent()
    {
        BusinessEvent           businessEvent;

        businessEvent = new BusinessEvent(enumNum(BusinessEvent_ProjectRevenue), BusinessEvent_ProjectRevenue::RevenueForProjectServices);

        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance variables.
    /// </summary>
    /// <param name="_sourceDocumentImplementation">
    /// A source document implementation table.
    /// </param>
    protected void initializeImplementation(SourceDocumentHeaderImplementation    _sourceDocumentImplementation)
    {
        projectRevenueHeader = _sourceDocumentImplementation;
        referenceSourceDocument = SourceDocument::newFromSourceDocumentHeader(SourceDocumentHeader::find(projectRevenueHeader.ReferenceSourceDocumentHeader));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        AccountingDate accountingDate;

        accountingDate = super();

        return accountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBusinessEventDate</Name>
				<Source><![CDATA[
    public DocumentDate parmBusinessEventDate()
    {
        DocumentDate documentDate;

        documentDate = super();

        return documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChargeInputAmount</Name>
				<Source><![CDATA[
    public Amount parmChargeInputAmount()
    {
        ProjectRevenueLine  projectRevenueLine;
        Amount              chargeInputAmount;

        chargeInputAmount = (select sum(TransactionCurrencyAmount) from projectRevenueLine
                                where projectRevenueLine.ProjectRevenueHeader == projectRevenueHeader.RecId).TransactionCurrencyAmount;

        return chargeInputAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChargeQuantity</Name>
				<Source><![CDATA[
    public Qty parmChargeQuantity()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChargeSource</Name>
				<Source><![CDATA[
    public Common parmChargeSource(Common _markupTrans = markupTrans)
    {
        markupTrans = _markupTrans;
        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentVoucher</Name>
				<Source><![CDATA[
    public Voucher parmCurrentVoucher(DataAreaId _dataAreaId)
    {
        return referenceSourceDocument.parmCurrentVoucher(_dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmDefaultDimension()
    {
        SourceDocumentIDataProvider sourceDocumentIDataProvider;
        CustInvoiceSourceDoc        custInvoiceSourceDoc;
        DimensionDefault            dimensionDefault;

        // For intercompany, dimensions are taken from the customer that represents the other
        // legal entity. They are handled by the derivation classes.
        if (!projectRevenueHeader.IsIntercompany &&
            referenceSourceDocument is SourceDocumentIDataProvider)
        {
            sourceDocumentIDataProvider = referenceSourceDocument as SourceDocumentIDataProvider;
            dimensionDefault = sourceDocumentIDataProvider.parmDefaultDimension();
        }

        // For intercompany customer invoice, dimensions are taken from custInvoiceSourceDoc directly
        // when the accounting rule in the general ledger parameters is Source Document.
        if (projectRevenueHeader.IsIntercompany &&
            referenceSourceDocument is CustInvoiceSourceDoc &&
            LedgerParameters::find().DimensionValuesUsedForSummaryAccount == DimensionValuesToUseForSummaryAccount::SourceDocument)
        {
            custInvoiceSourceDoc = referenceSourceDocument as CustInvoiceSourceDoc;
            dimensionDefault = custInvoiceSourceDoc.parmDefaultDimension();
        }

        return dimensionDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistributionTemplateRecId</Name>
				<Source><![CDATA[
    public AccountingDistributionTemplateRecId parmDistributionTemplateRecId()
    {
        AccountingDistributionTemplateRecId  accountingDistributionTemplateRecId;

        return accountingDistributionTemplateRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRate1</Name>
				<Source><![CDATA[
    public ExchRate parmExchangeRate1()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRate2</Name>
				<Source><![CDATA[
    public ExchRate parmExchangeRate2()
    {
        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsTaxInChargeInputAmountIncluded</Name>
				<Source><![CDATA[
    public boolean parmIsTaxInChargeInputAmountIncluded()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantity</Name>
				<Source><![CDATA[
    public Qty parmQuantity()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalEntities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of <c>LegalEntity</c>s for the document.
    /// </summary>
    /// <returns>A <c>List</c> containing the RecIds of the <c>LegalEntity</c>s.</returns>
    protected List getLegalEntities()
    {
        var legalEntityList = new List(Types::Int64);
        ProjectRevenueLine  projectRevenueLine;

        while select AccountingLegalEntity from projectRevenueLine
            group by AccountingLegalEntity
            where projectRevenueLine.ProjectRevenueHeader == projectRevenueHeader.RecId
        {
            legalEntityList.addEnd(projectRevenueLine.AccountingLegalEntity);
        }

        return legalEntityList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>