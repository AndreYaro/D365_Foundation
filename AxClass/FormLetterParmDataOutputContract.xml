<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormLetterParmDataOutputContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FormLetterParmDataOutputContract</c> class will be used as the output data contract class for the <c>FormletterParmData</c> class.
/// </summary>
[DataContractAttribute]
class FormLetterParmDataOutputContract
implements SysPackable
{
    ParmId          parmId;
    Common          parmUpdate;
    boolean         wasQueryFormCancelled;
    boolean         giroAllSame;
    Counter         numberOfParmTablesCreated;
    //Packed query
    str             chooseLinesQueryPacked;
    RefRecId        lastParmTableRecId;

    str             activeInvoiceListPacked;
    str             invoicesInUseListPacked;
    int             activeInvoiceFlags;
    boolean         existMultipleLinesForVendorCurrency;
    boolean         wasMatchStatusReset;
    boolean         isPostingDateInClosedPeriod;

    //List of parameters common for FormLetter contract classes that needs to be packed
    //for the correct class transition between client and server.
    //If you need some additional parameters on the client, add them to this list.
    #define.CurrentVersion(3)
    #LOCALMACRO.ParmListCommon
        parmId,
        parmUpdate,
        wasQueryFormCancelled,
        giroAllSame,
        chooseLinesQueryPacked,
        lastParmTableRecId,
        numberOfParmTablesCreated,
        activeInvoiceListPacked,
        activeInvoiceFlags,
        existMultipleLinesForVendorCurrency,
        wasMatchStatusReset,
        isPostingDateInClosedPeriod,
        invoicesInUseListPacked
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#ParmListCommon];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActiveInvoiceListPacked</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public str parmActiveInvoiceListPacked(str _activeInvoiceListPacked = activeInvoiceListPacked)
    {
        activeInvoiceListPacked = _activeInvoiceListPacked;
        return activeInvoiceListPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoicesInUseListPacked</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public str parmInvoicesInUseListPacked(str _invoicesInUseListPacked = invoicesInUseListPacked)
    {
        invoicesInUseListPacked = _invoicesInUseListPacked;
        return invoicesInUseListPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActiveInvoiceFlags</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public int parmActiveInvoiceFlags(int _activeInvoiceFlags = activeInvoiceFlags)
    {
        activeInvoiceFlags = _activeInvoiceFlags;
        return activeInvoiceFlags;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChooseLinesQueryPacked</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public str parmChooseLinesQueryPacked(str _chooseLinesQueryPacked = chooseLinesQueryPacked)
    {
        chooseLinesQueryPacked = _chooseLinesQueryPacked;
        return chooseLinesQueryPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExistMultipleLinesForVendorCurrency</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public boolean parmExistMultipleLinesForVendorCurrency(boolean _existMultipleLinesForVendorCurrency = existMultipleLinesForVendorCurrency)
    {
        existMultipleLinesForVendorCurrency = _existMultipleLinesForVendorCurrency;
        return existMultipleLinesForVendorCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGiroAllSame</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public boolean parmGiroAllSame(boolean _giroAllSame = giroAllSame)
    {
        giroAllSame = _giroAllSame;
        return giroAllSame;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPostingDateInClosedPeriod</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public boolean parmIsPostingDateInClosedPeriod(boolean _isPostingDateInClosedPeriod = isPostingDateInClosedPeriod)
    {
        isPostingDateInClosedPeriod = _isPostingDateInClosedPeriod;
        return isPostingDateInClosedPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLastParmTableRecId</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public RefRecId parmLastParmTableRecId(RefRecId _lastParmTableRecId = lastParmTableRecId)
    {
        lastParmTableRecId = _lastParmTableRecId;
        return lastParmTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberOfParmTablesCreated</Name>
				<Source><![CDATA[
    public Counter parmNumberOfParmTablesCreated(Counter _numberOfParmTablesCreated = numberOfParmTablesCreated)
    {
        numberOfParmTablesCreated = _numberOfParmTablesCreated;
        return numberOfParmTablesCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmId</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public ParmId parmParmId(ParmId _parmId = parmId)
    {
        parmId = _parmId;
        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public Common parmParmUpdate(Common _parmUpdate = parmUpdate)
    {
        parmUpdate = _parmUpdate;
        return parmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWasMatchStatusReset</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public boolean parmWasMatchStatusReset(boolean _wasMatchStatusReset = wasMatchStatusReset)
    {
        wasMatchStatusReset = _wasMatchStatusReset;
        return wasMatchStatusReset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWasQueryFormCancelled</Name>
				<Source><![CDATA[
    public boolean parmWasQueryFormCancelled(boolean _wasQueryFormCancelled = wasQueryFormCancelled)
    {
        wasQueryFormCancelled = _wasQueryFormCancelled;
        return wasQueryFormCancelled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer  version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #ParmListCommon] = _packedClass;
                break;
            case 2:
                [version, #ParmListCommon] = _packedClass;
                break;
            case 1:
                [version, #ParmListCommon] = _packedClass;
                activeInvoiceFlags = 0;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public FormLetterParmDataOutputContract construct()
    {
        return new FormLetterParmDataOutputContract();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>