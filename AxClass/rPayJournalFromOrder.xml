<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayJournalFromOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The payroll journal from order creation class.
/// </summary>
class rPayJournalFromOrder extends RunBaseBatch implements BatchRetryable
{
    RPayJournalTable    rPayJournalTable;
    RefRecId            orderTableRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the payrol journal.
    /// </summary>
    /// <returns>
    /// True if validation passed without errors.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean check()
    {
        boolean ret = true;
        RPayJournalTrans rPayJournalTrans;
        RHRMOrderTable rhrmOrderTable;

        select firstonly RecId from rPayJournalTrans
            where rPayJournalTrans.JournalId == rPayJournalTable.JournalId;

        if (rPayJournalTrans.RecId)
        {
            ret = checkFailed(strFmt("@RUP6034",
                rPayJournalTable.JournalId));
        }

        rhrmOrderTable = RHRMOrderTable::find(orderTableRecId);

        if (rhrmOrderTable.JournalType != RHRMJournalType::Bonus)
        {
            ret = checkFailed(strFmt("@RUP6035",
                rPayJournalTable.JournalId));
        }

        if (!rhrmOrderTable.Posted)
        {
            ret = checkFailed(strFmt("@RUP6036",
                rPayJournalTable.JournalId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class from payroll journal.
    /// </summary>
    /// <returns>
    /// True if initialization passed without errors.
    /// </returns>
    public boolean init()
    {
        boolean ret;

        ret = super();

        if (!rPayJournalTable.rhrmOrderTable ||
            !RHRMOrderTable::exist(rPayJournalTable.rhrmOrderTable))
        {
            ret = checkFailed("@RUP6037");
        }
        else
        {
            orderTableRecId = rPayJournalTable.rhrmOrderTable;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPayJournalFromOrder</Name>
				<Source><![CDATA[
    private RPayJournalTrans initPayJournalFromOrder(
        RPayJournalTrans    _rPayJournalTrans,
        RHRMOrderTrans      _rhrmOrderTrans)
    {
        _rPayJournalTrans.TransType = RPayTypeString::Employee;
        _rPayJournalTrans.Number    = _rhrmOrderTrans.EmplId;
        _rPayJournalTrans.PayCtype  = RHRMBonusCode::find(RHRMOrderTable::findJournal(_rhrmOrderTrans.JournalId).BonusCode).PayCType;
        _rPayJournalTrans.Txt       = RPayTable::find(_rPayJournalTrans.PayCtype).Name;
        _rPayJournalTrans.Amount    = _rhrmOrderTrans.ValueSum;

        return _rPayJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRPayJournalTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayJournalTable parmRPayJournalTable(RPayJournalTable _rPayJournalTable = rPayJournalTable)
    {
        rPayJournalTable = _rPayJournalTable;
        return rPayJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        #OCCRetryCount
        RHRMOrderTrans      rhrmOrderTrans;
        RPayJournalTrans    rPayJournalTrans;
        RHRMOrderTable      orderTable;
        LineNum             lineNum = 1;

        if (this.check())
        {
            try
            {
                ttsbegin;

                while select rhrmOrderTrans
                        exists join orderTable
                            where orderTable.JournalId  == rhrmOrderTrans.JournalId
                               && orderTable.RecId      == orderTableRecId
                {
                    rPayJournalTrans.LineNum   = lineNum;
                    rPayJournalTrans.JournalId = rPayJournalTable.JournalId;
                    rPayJournalTrans.TransDate = RPayParameters::payPeriod(rhrmOrderTrans.EmplId);

                    rPayJournalTrans = this.initPayJournalFromOrder(rPayJournalTrans, rhrmOrderTrans);

                    if (rPayJournalTrans.validateWrite())
                    {
                        rPayJournalTrans.insert();
                        lineNum++;
                    }
                }
                JournalTableData::newTable(rPayJournalTable).initTotal();
                rPayJournalTable.selectForUpdate(true);
                rPayJournalTable.update();

                ttscommit;
                info(strFmt("@RUP6038", any2int(lineNum) - 1));
            }

            catch (Exception::Deadlock)
            {
                retry;
            }

            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayJournalFromOrder construct()
    {
        return new RPayJournalFromOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        RPayJournalFromOrder rPayJournalFromOrder;

        if (!_args || _args.dataset() != tableNum(RPayJournalTable))
        {
            throw error("@SYS25904");
        }

        rPayJournalFromOrder = RPayJournalFromOrder::newPayJournal(_args.record());

        rPayJournalFromOrder.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPayJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new payroll journal from another.
    /// </summary>
    /// <param name="_rPayJournalTable">
    /// The origin payroll journal.
    /// </param>
    /// <returns>
    /// The instance of a constructed <c>RPayJournalFromOrder</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Update has been cancelled.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayJournalFromOrder newPayJournal(RPayJournalTable _rPayJournalTable)
    {
        RPayJournalFromOrder rPayJournalFromOrder = RPayJournalFromOrder::construct();

        rPayJournalFromOrder.parmRPayJournalTable(_rPayJournalTable);

        if (!rPayJournalFromOrder.init())
        {
            throw error("@SYS25904");
        }

        return rPayJournalFromOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>