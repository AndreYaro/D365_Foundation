<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymProposalCleanupTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class PaymProposalCleanupTask implements IDataMaintenanceTask
{
    private SpecTrans specTrans;
    private CustVendPaymProposalLine proposalLine;
    private DataMaintenanceTaskResult taskResult;
    private CashManagementDataMaintainLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@CashManagement:PaymProposalCleanupTaskCaption");
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceTaskResult run()
    {
        taskResult = DataMaintenanceTaskResult::construct();
        logger = CashManagementDataMaintainLogger::createLogger(classStr(PaymProposalCleanupDataAction));
        taskResult.parmCount(this.deleteData());
        return taskResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteData</Name>
				<Source><![CDATA[
    private int deleteData()
    {
        return this.deleteSpecTransForPostedPaymentJournal()
            + this.deleteCustVendPaymProposalLinesForPostedPaymentJournal()
            + this.deleteCustVendPaymProposalLinesForDeletedPaymentJournal()
            + this.deleteSpecTransForDeletedPaymentProposal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSpecTransForPostedPaymentJournal</Name>
				<Source><![CDATA[
    private int deleteSpecTransForPostedPaymentJournal()
    {
        using (SysInstrumentationActivityContext activityContext = logger.activityContextWithCustomProperties(
            CashManagementDataMaintainInstrumentationConstants::DeleteSpecTransForPostedPaymentJournal))
        {
            int fixCount;

            while select SpecCompany from specTrans
                group by specTrans.SpecCompany
                where specTrans.SpecTableId == tableNum(CustVendPaymProposalLine)
                    && specTrans.SpecCompany
            {
                changecompany(specTrans.SpecCompany)
                {
                    SpecTrans specTransToDel;
                    CashManagementDataMaintainHelper::skipDeleteLogic(specTransToDel);
                    SysDaQueryObject queryObject = this.buildQuerySpecTransForPostedPaymentJournal(specTransToDel);
                    CashManagementDataMaintainHelper::statementDelete(queryObject);
                    fixCount += int642int(specTransToDel.RowCount());
                }
            }

            this.addMessage(fixCount, activityContext, "@CashManagement:PaymProposalCleanupResultSpecTransForPostedPaymentJournal");
            return fixCount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustVendPaymProposalLinesForPostedPaymentJournal</Name>
				<Source><![CDATA[
    private int deleteCustVendPaymProposalLinesForPostedPaymentJournal()
    {
        using (SysInstrumentationActivityContext activityContext = logger.activityContextWithCustomProperties(
            CashManagementDataMaintainInstrumentationConstants::DeleteCustVendPaymProposalLinesForPostedPaymentJournal))
        {
            int fixCount;

            while select crosscompany DataAreaId from proposalLine
                group by proposalLine.DataAreaId
            {
                changecompany(proposalLine.DataAreaId)
                {
                    CustVendPaymProposalLine proposalLineToDel;
                    CashManagementDataMaintainHelper::skipDeleteLogic(proposalLineToDel);
                    SysDaQueryObject queryObject = this.buildQueryCustVendPaymProposalLinesForPostedPaymentJournal(proposalLineToDel);
                    CashManagementDataMaintainHelper::statementDelete(queryObject);
                    fixCount += int642int(proposalLineToDel.RowCount());
                }
            }

            this.addMessage(fixCount, activityContext, "@CashManagement:PaymProposalCleanupResultCustVendPaymProposalLinesForPostedPaymentJournal");
            return fixCount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustVendPaymProposalLinesForDeletedPaymentJournal</Name>
				<Source><![CDATA[
    private int deleteCustVendPaymProposalLinesForDeletedPaymentJournal()
    {
        using (SysInstrumentationActivityContext activityContext = logger.activityContextWithCustomProperties(
            CashManagementDataMaintainInstrumentationConstants::DeleteCustVendPaymProposalLinesForDeletedPaymentJournal))
        {
            int fixCount;

            while select crosscompany DataAreaId from proposalLine
                group by proposalLine.DataAreaId
            {
                changecompany(proposalLine.DataAreaId)
                {
                    CustVendPaymProposalLine proposalLineToDel;
                    CashManagementDataMaintainHelper::skipDeleteLogic(proposalLineToDel);
                    SysDaQueryObject queryObject = this.buildQueryCustVendPaymProposalLinesForDeletedPaymentJournal(proposalLineToDel);
                    CashManagementDataMaintainHelper::statementDelete(queryObject);
                    fixCount += int642int(proposalLineToDel.RowCount());
                }
            }

            this.addMessage(fixCount, activityContext, "@CashManagement:PaymProposalCleanupResultCustVendPaymProposalLinesForDeletedPaymentJournal");
            return fixCount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSpecTransForDeletedPaymentProposal</Name>
				<Source><![CDATA[
    private int deleteSpecTransForDeletedPaymentProposal()
    {
        using (SysInstrumentationActivityContext activityContext = logger.activityContextWithCustomProperties(
            CashManagementDataMaintainInstrumentationConstants::DeleteSpecTransForDeletedPaymentProposal))
        {
            int fixCount;

            while select SpecCompany from specTrans
                group by specTrans.SpecCompany
                where specTrans.SpecTableId == tableNum(CustVendPaymProposalLine)
                    && specTrans.SpecCompany
            {
                changecompany(specTrans.SpecCompany)
                {
                    SpecTrans specTransToDel;
                    CashManagementDataMaintainHelper::skipDeleteLogic(specTransToDel);
                    SysDaQueryObject queryObject = this.buildQuerySpecTransForDeletedPaymentProposal(specTransToDel);
                    CashManagementDataMaintainHelper::statementDelete(queryObject);
                    fixCount += int642int(specTransToDel.RowCount());
                }
            }

            this.addMessage(fixCount, activityContext, "@CashManagement:PaymProposalCleanupResultSpecTransForDeletedPaymentJournal");
            return fixCount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuerySpecTransForPostedPaymentJournal</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildQuerySpecTransForPostedPaymentJournal(SpecTrans _specTrans)
    {
        LedgerJournalTable ledgerJournalTable;
        CustVendPaymProposalLine paymProposalLine;

        SysDaQueryObject specTransQuery = new SysDaQueryObject(_specTrans);
        specTransQuery.whereClause(
            new SysDaAndExpression(
                 new SysDaEqualsExpression(
                     new SysDaFieldExpression(_specTrans, fieldStr(SpecTrans, SpecTableId)),
                     new SysDaValueExpression(tableNum(CustVendPaymProposalLine))),
                 new SysDaEqualsExpression(
                     new SysDaFieldExpression(_specTrans, fieldStr(SpecTrans, SpecCompany)),
                     new SysDaValueExpression(curExt()))));

        SysDaQueryObject proposalLineQuery = new SysDaQueryObject(paymProposalLine);
        proposalLineQuery.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_specTrans, fieldStr(SpecTrans, SpecRecId)),
                new SysDaFieldExpression(paymProposalLine, fieldStr(CustVendPaymProposalLine, RecId))));

        specTransQuery.joinClause(SysDaJoinKind::ExistsJoin, proposalLineQuery);

        SysDaQueryObject ledgerJournalTableQuery = new SysDaQueryObject(ledgerJournalTable);
        ledgerJournalTableQuery.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(paymProposalLine, fieldStr(CustVendPaymProposalLine, JournalId)),
                new SysDaFieldExpression(ledgerJournalTable, fieldStr(LedgerJournalTable, JournalNum)))
            .and(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(ledgerJournalTable, fieldStr(LedgerJournalTable, Posted)),
                    new SysDaValueExpression(NoYes::Yes))));

        proposalLineQuery.joinClause(SysDaJoinKind::ExistsJoin, ledgerJournalTableQuery);

        return specTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryCustVendPaymProposalLinesForPostedPaymentJournal</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildQueryCustVendPaymProposalLinesForPostedPaymentJournal(CustVendPaymProposalLine _proposalLine)
    {
        LedgerJournalTable ledgerJournalTable;

        SysDaQueryObject proposalLineQuery = new SysDaQueryObject(_proposalLine);
        SysDaQueryObject ledgerJournalTableQuery = new SysDaQueryObject(ledgerJournalTable);

        ledgerJournalTableQuery.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_proposalLine, fieldStr(CustVendPaymProposalLine, JournalId)),
                new SysDaFieldExpression(ledgerJournalTable, fieldStr(LedgerJournalTable, JournalNum)))
            .and(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(ledgerJournalTable, fieldStr(LedgerJournalTable, Posted)),
                    new SysDaValueExpression(NoYes::Yes))));

        proposalLineQuery.joinClause(SysDaJoinKind::ExistsJoin, ledgerJournalTableQuery);

        return proposalLineQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuerySpecTransForDeletedPaymentProposal</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildQuerySpecTransForDeletedPaymentProposal(SpecTrans _specTrans)
    {
        CustVendPaymProposalLine paymProposalLine;

        SysDaQueryObject specTransQuery = new SysDaQueryObject(_specTrans);
        specTransQuery.whereClause(
            new SysDaAndExpression(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_specTrans, fieldStr(SpecTrans, SpecTableId)),
                    new SysDaValueExpression(tableNum(CustVendPaymProposalLine))),
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(_specTrans, fieldStr(SpecTrans, SpecCompany)),
                    new SysDaValueExpression(curExt()))));

        SysDaQueryObject proposalLineQuery = new SysDaQueryObject(paymProposalLine);
        proposalLineQuery.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_specTrans, fieldStr(SpecTrans, SpecRecId)),
                new SysDaFieldExpression(paymProposalLine, fieldStr(CustVendPaymProposalLine, RecId))));

        specTransQuery.joinClause(SysDaJoinKind::NotExistsJoin, proposalLineQuery);

        return specTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryCustVendPaymProposalLinesForDeletedPaymentJournal</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildQueryCustVendPaymProposalLinesForDeletedPaymentJournal(CustVendPaymProposalLine _proposalLine)
    {
        LedgerJournalTable ledgerJournalTable;

        SysDaQueryObject proposalLineQuery = new SysDaQueryObject(_proposalLine);
        SysDaQueryObject ledgerJournalTableQuery = new SysDaQueryObject(ledgerJournalTable);

        ledgerJournalTableQuery.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_proposalLine, fieldStr(CustVendPaymProposalLine, JournalId)),
                new SysDaFieldExpression(ledgerJournalTable, fieldStr(LedgerJournalTable, JournalNum))));

        proposalLineQuery.joinClause(SysDaJoinKind::NotExistsJoin, ledgerJournalTableQuery);

        return proposalLineQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMessage</Name>
				<Source><![CDATA[
    private void addMessage(int _fixRows, SysInstrumentationActivityContext _activityContext, str _message)
    {
        if (_fixRows)
        {
            taskResult.addMessage(
                DataMaintenanceMessageContract::constructForMessage(
                    Exception::Info,
                    strFmt(_message, int642Str(_fixRows))));
        }

        _activityContext.addCustomProperty(CashManagementDataMaintainInstrumentationConstants::CountOfChangesMade, int642Str(_fixRows));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>