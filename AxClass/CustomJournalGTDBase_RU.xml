<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomJournalGTDBase_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustomJournalGTDBase_RU extends RunBase
{
    CustomJournalTable_RU   customJournalTable;
    InventGTDId_RU          inventGTDId;

    str 250                 menuItemLabel;

    CustomPostId_RU         customPostId;
    DialogField             fieldCustomPostId;

    CustomGTDDate_RU        customGTDDate;
    DialogField             fieldStatementDate;

    Num                     statementNum;
    DialogField             fieldStatementNum;

    TransDate               gtdDate;
    DialogField             fieldGTDDate;

    NoYesId                 changeLocation;
    DialogField             fieldChangeLocation;

    private const int customPostIdLen = 8;
    private const int statementNumLen = 7;
    protected const int retryNum = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGTDUsage</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkGTDUsage()
    {
        boolean                 ret = true;
        CustomJournalTable_RU   customJournalTableLocal;

        customJournalTableLocal = CustomJournalTable_RU::findByGTDId(inventGTDId, customJournalTable.RecId);

        if (customJournalTableLocal)
        {
            ret = checkFailed(strfmt("@GLS115404", inventGTDId, customJournalTableLocal.CustomJournalId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLines</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkLines()
    {
        boolean                 ret = true;
        CustomJournalTrans_RU   customJournalTrans;
        DlvTerm                 dlvTerm;

        setprefix("@GLS115365");

        dlvTerm = DlvTerm::find(customJournalTable.DlvTermId);
        if (!dlvTerm)
        {
            dlvTerm = DlvTerm::find(
                AgreementHeaderDefault::findAgreementHeader(customJournalTable.agreementHeaderExt().AgreementHeader).DeliveryTerm);
        }

        while select * from customJournalTrans
            where customJournalTrans.CustomJournalId == customJournalTable.CustomJournalId
        {
            switch (dlvTerm.CustomInventTransStatus_RU)
            {
                case CustomInventTransStatus_RU::Purchased :
                    if (customJournalTrans.InvoiceId && customJournalTable.PlanArrivalDate < customJournalTrans.InvoiceDate)
                    {
                        ret = checkFailed(strfmt("@GLS115309", customJournalTrans.ItemId));
                    }

                    ret = ret && this.checkInventProfile(customJournalTrans);
                    break;

                default :
                    if (customJournalTrans.InvoiceId && gtdDate > customJournalTrans.InvoiceDate)
                    {
                        ret = checkFailed(strfmt("@GLS115367", customJournalTrans.InvoiceId, customJournalTrans.InvoiceDate));
                    }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventProfile</Name>
				<Source><![CDATA[
    private boolean checkInventProfile(CustomJournalTrans_RU _customJournalTrans)
    {
        boolean ret = true;

        if (customJournalTable.InventProfileId)
        {
            return ret;
        }

        InventDimGroupFieldSetup inventProfileSetup = EcoResDimensionGroupSetup::getFieldSetupForItem(_customJournalTrans.ItemId, fieldnum(InventDim, InventProfileId_RU));

        if (inventProfileSetup.isActive() && !inventProfileSetup.isInheritInventTransfer_RU())
        {
            ret = checkFailed(strfmt("@GLS115316", fieldid2pname(tablenum(CustomJournalTable_RU), fieldnum(CustomJournalTable_RU, InventProfileId))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog;
        DialogGroup     dialogGroup;

        dialog = super();

        dialog.caption("@GLS115082");

        if (menuItemLabel)
        {
            dialog.caption(menuItemLabel);
        }

        dialogGroup = dialog.addGroup('');
        dialogGroup.columns(3);
        dialogGroup.frameType(FormFrameType::None);

        fieldCustomPostId = dialog.addFieldValue(extendedTypeStr(CustomPostId_RU), customJournalTable.CustomPostId, "@GLS115400", "@GLS115401");
        fieldCustomPostId.enabled(false);
        fieldCustomPostId.displayLength(customPostIdLen);

        fieldStatementDate = dialog.addFieldValue(extendedTypeStr(CustomGTDDate_RU), date2str(customJournalTable.PlanArrivalDate, 0, 2, 0, 2, 0, 2, 0), "@SYS35673", "@GLS114891");
        fieldStatementDate.enabled(false);

        fieldStatementNum = dialog.addFieldValue(extendedTypeStr(Num), CustomJournalGTDBase_RU::getGTDSubNum(customJournalTable.InventGTDId), "@SYS35673", "@SYS97530");

        dialogGroup = dialog.addGroup('');
        dialogGroup.frameType(FormFrameType::None);
        fieldGTDDate = dialog.addFieldValue(extendedTypeStr(TransDate), gtdDate, "@GLS115402");
        fieldGTDDate.value(customJournalTable.gtdDate);
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld4_1_modified</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean fld4_1_modified()
    {
        boolean ret;

        ret = fieldGTDDate.fieldControl().modified();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            customPostId    = fieldCustomPostId.value();
            customGTDDate   = fieldStatementDate.value();
            statementNum    = fieldStatementNum.value();
            if (strlen(any2str(statementNum)) != statementNumLen)
            {
                ret = checkFailed(strfmt("@GLS115403", statementNumLen));
            }

            gtdDate         = fieldGTDDate.value();

            if (gtdDate < customJournalTable.PlanArrivalDate)
                ret = checkFailed(strfmt("@GLS115399"));

            inventGTDId     = CustomJournalGTDBase_RU::formatGTDId(customPostId, customGTDDate, statementNum);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomJournalTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustomJournalTable_RU parmCustomJournalTable(CustomJournalTable_RU _customJournalTable = customJournalTable)
    {
        customJournalTable = _customJournalTable;
        return customJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInputData</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void parmInputData(container _con)
    {
        [customPostId, customGTDDate, statementNum, gtdDate, inventGTDId] = _con;
        changeLocation = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInputDataExt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values for a list of parameters.
    /// </summary>
    /// <param name="_customPostId">
    /// The customs post id.
    /// </param>
    /// <param name="_customGTDDate">
    /// The date od customs declaration.
    /// </param>
    /// <param name="_statementNum">
    /// Customs statement num.
    /// </param>
    /// <param name="_gtdDate">
    /// Customs declaration date.
    /// </param>
    /// <param name="_inventGTDId">
    /// Inventory customs declaration inventory dimension value.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void parmInputDataExt(CustomPostId_RU _customPostId, CustomGTDDate_RU _customGTDDate, Num _statementNum, TransDate _gtdDate, InventGTDId_RU _inventGTDId)
    {
        ;
        customPostId  = _customPostId;
        customGTDDate = _customGTDDate;
        statementNum  = _statementNum;
        gtdDate       = _gtdDate;
        inventGTDId   = _inventGTDId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuItemLabel</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str parmMenuItemLabel(str _menuItemLabel = menuItemLabel)
    {
        menuItemLabel = _menuItemLabel;
        return menuItemLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        try
        {
            ttsbegin;

            customJournalTable.selectForUpdate(true);
            customJournalTable.reread();
            customJournalTable.InventGTDId      = inventGTDId;
            customJournalTable.gtdDate          = gtdDate;
            customJournalTable.update();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= retryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (! statementNum)
            ret = checkFailed("@GLS115397");

        if (! gtdDate)
            ret = checkFailed("@GLS115398");

        if (gtdDate < customJournalTable.PlanArrivalDate)
        {
            ret = checkFailed("@GLS115399");
        }

        ret = ret && this.checkGTDUsage();

        ret = ret && this.checkLines();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustomJournalGTDBase_RU construct(CustomCreateGTDOperation_RU _customCreateGTDOperation)
    {
        CustomJournalGTDBase_RU customJournalGTDBase;

        switch (_customCreateGTDOperation)
        {
            case CustomCreateGTDOperation_RU::Release:
                customJournalGTDBase = new CustomJournalGTDCreate_RU();
                break;

            case CustomCreateGTDOperation_RU::Create:
                customJournalGTDBase = new CustomJournalGTDBase_RU();
                break;
            case CustomCreateGTDOperation_RU::Cancel:
                customJournalGTDBase = new CustomJournalGTDCancel_RU();
                break;
        }
        return customJournalGTDBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static Description description()
    {
        return "@GLS115082";
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatGTDId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static InventGTDId_RU formatGTDId(CustomPostId_RU   _customPostId,
                                      CustomGTDDate_RU  _customGTDDate,
                                      Num               _statementNum)
    {
        InventGTDId_RU  inventGTDId;

        inventGTDId = strfmt("%1/%2/%3", _customPostId, _customGTDDate, _statementNum);

        return inventGTDId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGTDSubNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static Num getGTDSubNum(InventGTDId_RU _inventGTDId)
    {
        Num     ret;
        Integer posSlash;

        if (_inventGTDId)
        {
            posSlash = strfind(_inventGTDId, '/', 1, strlen(_inventGTDId));

            if (posSlash)
            {
                posSlash = strfind(_inventGTDId, '/', posSlash + 1, strlen(_inventGTDId) - posSlash);

                if (posSlash)
                {
                    ret = substr(_inventGTDId, posSlash + 1, strlen(_inventGTDId) - posSlash);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        CustomJournalGTDBase_RU customJournalGTDBase;
        FormDataSource          formDataSource;
        MenuFunction            menuFunction;

        if (! _args || _args.dataset() != tablenum(CustomJournalTable_RU))
            throw error(strfmt("@SYS25516", CustomJournalGTDBase_RU::description()));

        if (! _args.record() || ! FormDataUtil::isFormDataSource(_args.record()))
            throw error("@SYS82774");

        if (! _args.parmEnumType() || _args.parmEnumType() != enumnum(CustomCreateGTDOperation_RU))
            throw error("@SYS30498");

        formDataSource          = FormDataUtil::getFormDataSource(_args.record());
        customJournalGTDBase    = CustomJournalGTDBase_RU::construct(_args.parmEnum());
        customJournalGTDBase.parmCustomJournalTable(_args.record());

        if (_args.menuItemName())
        {
            menuFunction = new MenuFunction(_args.menuItemName(), _args.menuItemType());
            if (menuFunction && menuFunction.label())
            {
                customJournalGTDBase.parmMenuItemLabel(menuFunction.label());
            }
        }

        if (customJournalGTDBase.prompt())
        {
            customJournalGTDBase.runOperation();
        }

        if (formDataSource)
        {
            formDataSource.reread();
            formDataSource.refresh();
            formDataSource.active();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>