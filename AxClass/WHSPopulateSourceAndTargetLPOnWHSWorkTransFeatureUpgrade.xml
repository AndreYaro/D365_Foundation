<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPopulateSourceAndTargetLPOnWHSWorkTransFeatureUpgrade</Name>
	<SourceCode>
		<Declaration><![CDATA[
using RunTimeEventSource = Microsoft.Dynamics.ApplicationPlatform.XppServices.Instrumentation.XppRuntimeEventSource;

/// <summary>
/// The <c>WHSPopulateSourceAndTargetLPOnWHSWorkTransFeatureUpgrade</c> class is responsible for performing a data upgrade operation once the <c>WHSPopulateSourceAndTargetLPOnWHSWorkTransFeature</c> is activated.
/// It update the <c>InventDimId</c> and <c>TargetLicensePlateId</c> columns on the <c>WHSWorkTrans</c> table.
/// The <c>InventDimId</c> column should contain the source LP we are picking from. The <c>TargetLicensePlateId</c> column should be filled in consistently.
/// For performance reasons the data upgrade runs only on non-closed/cancelled works.
/// </summary>
internal final class WHSPopulateSourceAndTargetLPOnWHSWorkTransFeatureUpgrade
{
    private const str keyFormat = '%1#%2';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableFeature</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that all the necessary upgrades are performed for the <c>WHSPopulateSourceAndTargetLPOnWHSWorkTransFeature</c>
    /// to be enabled.
    /// </summary>
    [Hookable(false)]
    internal static void enableFeature()
    {
        ttsbegin;

        DataArea dataArea;

        while select DataArea where dataArea.isVirtual == NoYes::No
        {
            changecompany(dataArea.id)
            {
                WHSPopulateSourceAndTargetLPOnWHSWorkTransFeatureUpgrade::populateSourceAndTargetLicensePlateInformationOnUserActions();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSourceAndTargetLicensePlateInformationOnUserActions</Name>
				<Source><![CDATA[
    private static void populateSourceAndTargetLicensePlateInformationOnUserActions()
    {
        WHSWorkTable    workTable;
        WHSWorkLine     workLine;
        InventLocation  inventLocation;

        while select InventLocationId from inventLocation
            where inventLocation.WHSEnabled == NoYes::Yes
        {
            // presence of InventLocationId condition allows to use an index.
            while select WorkId from workTable
                where workTable.InventLocationId == inventLocation.InventLocationId
                    && workTable.WorkStatus != WHSWorkStatus::Closed
                    && workTable.WorkStatus != WHSWorkStatus::Cancelled
            {
                WHSWorkLine firstPutWorkLine = WHSWorkTable::getFirstPutWorkLine(workTable.WorkId);

                while select RecId, WorkId, LineNum from workLine
                    where workLine.WorkId == workTable.WorkId
                        && workLine.LineNum < firstPutWorkLine.LineNum          // only initial picks
                        && workLine.ItemId != ''                                // should be already the case since this is an initial pick, but to be on the safe side
                        && workLine.WorkType == WHSWorkType::Pick
                        && workLine.WorkStatus != WHSWorkStatus::Cancelled      // cancelled lines are ignored
                        && workLine.InventQtyRemain != workLine.InventQtyWork   // we care only about lines where some picking happened already
                {
                    WHSPopulateSourceAndTargetLPOnWHSWorkTransFeatureUpgrade::ensureCorrectSourceLicensePlateInfoOnWHSWorkTrans(workLine.WorkId, workLine.LineNum);
                    WHSPopulateSourceAndTargetLPOnWHSWorkTransFeatureUpgrade::ensureCorrectTargetLicensePlateInfoOnWHSWorkTrans(workLine.WorkId, workLine.LineNum);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureCorrectTargetLicensePlateInfoOnWHSWorkTrans</Name>
				<Source><![CDATA[
    private static void ensureCorrectTargetLicensePlateInfoOnWHSWorkTrans(WHSWorkId _workId, LineNum _lineNum)
    {
        WHSWorkTrans workTrans;
        WHSLicensePlateId calculatedTargetLicensePlateId;

        while select forupdate workTrans
            where workTrans.WorkId == _workId
                && workTrans.LineNum == _lineNum
                && workTrans.TargetLicensePlateId == ''
        {
            if (!calculatedTargetLicensePlateId)
            {
                calculatedTargetLicensePlateId = WHSPopulateSourceAndTargetLPOnWHSWorkTransFeatureUpgrade::getTargetLicensePlateIdForWorkLine(_workId, _lineNum);
            }

            workTrans.TargetLicensePlateId = calculatedTargetLicensePlateId;
            workTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTargetLicensePlateIdForWorkLine</Name>
				<Source><![CDATA[
    private static WHSLicensePlateId getTargetLicensePlateIdForWorkLine(WHSWorkId _workId, LineNum _lineNum)
    {
        InventDim inventTransDim;

        if (WHSInventoryTransactionConfigurationProvider::shouldUseWorkInventoryTransactionQuery(_workId))
        {
            WHSWorkInventoryTransactionDescriptor inventoryTransactionDescriptor = WHSWorkInventoryTransactionQuery::newFromWorkId(_workId).registeredReceiptByWorkLine(
                _lineNum,
                WHSWorkInventoryTransactionQueryParameters::construct().setFirstOnly(true));

            WHSWorkInventoryTransactionDescriptorElement inventoryTransactionDescriptorElement = inventoryTransactionDescriptor.firstOrDefault();

            if (inventoryTransactionDescriptorElement)
            {
                inventTransDim = inventoryTransactionDescriptorElement
                    .parmInventoryDimensionsDescriptor()
                    .convertToInventDim();
            }
        }
        else
        {
            WHSWorkInventTrans  workInventTrans;
            InventTransOrigin   inventTransOrigin;
            InventTrans         inventTrans;

            select firstonly TableId from workInventTrans
                where workInventTrans.WorkId == _workId
                    && workInventTrans.LineNum == _lineNum
                join TableId from inventTransOrigin
                    where inventTransOrigin.InventTransId == workInventTrans.InventTransIdTo    // transactions related to move of goods to user location
                join TableId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                        && inventTrans.StatusIssue == StatusIssue::None
                        && inventTrans.StatusReceipt == StatusReceipt::Purchased    // take only completed transactions, no reservations
                join wmsLocationId, LicensePlateId from inventTransDim
                    where inventTransDim.inventDimId == inventTrans.inventDimId;
        }

        return inventTransDim.LicensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureCorrectSourceLicensePlateInfoOnWHSWorkTrans</Name>
				<Source><![CDATA[
    private static void ensureCorrectSourceLicensePlateInfoOnWHSWorkTrans(WHSWorkId _workId, LineNum _lineNum)
    {
        InventQty totalInventQtyToMatch = 0;
        InventQty totalInventQtyMatched = 0;

        Map lpToQtyMapBasedOnInventTrans = WHSPopulateSourceAndTargetLPOnWHSWorkTransFeatureUpgrade::readLpToQtyMapBasedOnInventTrans(_workId, _lineNum);
        Map lpToQtyMapBasedOnWorkTrans   = WHSPopulateSourceAndTargetLPOnWHSWorkTransFeatureUpgrade::readLpToQtyMapBasedOnWorkTrans(_workId, _lineNum);

        [totalInventQtyToMatch, totalInventQtyMatched] = WHSPopulateSourceAndTargetLPOnWHSWorkTransFeatureUpgrade::calculateMatchingQuantities(
            lpToQtyMapBasedOnInventTrans,
            lpToQtyMapBasedOnWorkTrans);

        if (totalInventQtyToMatch != totalInventQtyMatched)
        {
            // There is unmatched qty, it means there is incorrect source license plate information on WHSWorkTrans.
            WHSPopulateSourceAndTargetLPOnWHSWorkTransFeatureUpgrade::matchByQuantity(
                lpToQtyMapBasedOnInventTrans,
                lpToQtyMapBasedOnWorkTrans);

            if (lpToQtyMapBasedOnWorkTrans.elements() > 0)
            {
                SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

                serializer.setValue(classStr(WHSPopulateSourceAndTargetLPOnWHSWorkTransFeatureUpgrade), funcName());
                serializer.setValue('workLineRecId', int642Str(WHSWorkLine::find(_workId, _lineNum).RecId));

                RunTimeEventSource::EventWriteInfoLogMark(Exception::Warning, serializer.toString());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchByQuantity</Name>
				<Source><![CDATA[
    private static void matchByQuantity(Map _lpToQtyMapBasedOnInventTrans, Map _lpToQtyMapBasedOnWorkTrans)
    {
        MapEnumerator lpToQtyMapBasedOnInventTransEnumerator = _lpToQtyMapBasedOnInventTrans.getEnumerator();
        while (lpToQtyMapBasedOnInventTransEnumerator.moveNext())
        {
            WMSLocationId       locationId;
            WHSLicensePlateId   licensePlateId;
            InventQty           inventTransQty;

            [locationId, licensePlateId, inventTransQty] = lpToQtyMapBasedOnInventTransEnumerator.currentValue();

            boolean foundMatchByQty = false;
            str matchingKey = '';

            MapEnumerator lpToQtyMapBasedOnWorkTransEnumerator = _lpToQtyMapBasedOnWorkTrans.getEnumerator();
            while (lpToQtyMapBasedOnWorkTransEnumerator.moveNext())
            {
                container workTransIds;
                InventQty totalWorkTransInventQty;

                [workTransIds, totalWorkTransInventQty] = lpToQtyMapBasedOnWorkTransEnumerator.currentValue();

                if (inventTransQty == totalWorkTransInventQty)
                {
                    // Found a match. Now should update the WHSWorkTrans records.
                    for (int i = 1; i <= conLen(workTransIds); i++)
                    {
                        WHSWorkTransId  workTransId;
                        InventQty       workTransQty;

                        [workTransId, workTransQty] = conPeek(workTransIds, i);

                        WHSPopulateSourceAndTargetLPOnWHSWorkTransFeatureUpgrade::updateWorkTrans(workTransId, locationId, licensePlateId);
                    }

                    foundMatchByQty = true;
                    matchingKey = lpToQtyMapBasedOnWorkTransEnumerator.currentKey();

                    break;
                }
                else if (conLen(workTransIds) > 1 && totalWorkTransInventQty > inventTransQty)
                {
                    // Maybe some specific work trans will match
                    for (int i = 1; i <= conLen(workTransIds); i++)
                    {
                        WHSWorkTransId  workTransId;
                        InventQty       workTransQty;

                        [workTransId, workTransQty] = conPeek(workTransIds, i);

                        if (workTransQty == inventTransQty)
                        {
                            WHSPopulateSourceAndTargetLPOnWHSWorkTransFeatureUpgrade::updateWorkTrans(workTransId, locationId, licensePlateId);

                            // Update the work trans map - remove the matched bit.
                            totalWorkTransInventQty -= workTransQty;
                            workTransIds = conDel(workTransIds, i, 1);

                            _lpToQtyMapBasedOnWorkTrans.add(lpToQtyMapBasedOnWorkTransEnumerator.currentKey(), [workTransIds, totalWorkTransInventQty]);

                            break;
                        }
                    }
                }
            }

            if (foundMatchByQty)
            {
                _lpToQtyMapBasedOnWorkTrans.remove(matchingKey);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkTrans</Name>
				<Source><![CDATA[
    private static void updateWorkTrans(WHSWorkTransId _workTransId, WMSLocationId _locationId, WHSLicensePlateId _licensePlateId)
    {
        WHSWorkTrans workTrans = WHSWorkTrans::find(_workTransId, true);     // selecting for update.
        InventDim workTransInventDim = workTrans.inventDim();

        // We don't want to modify the InventDim record itself.
        workTransInventDim.RecId = 0;
        workTransInventDim.WMSLocationId  = _locationId;
        workTransInventDim.LicensePlateId = _licensePlateId;

        workTrans.InventDimId = InventDim::findOrCreate(workTransInventDim).InventDimId;

        workTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMatchingQuantities</Name>
				<Source><![CDATA[
    private static container calculateMatchingQuantities(Map _lpToQtyMapBasedOnInventTrans, Map _lpToQtyMapBasedOnWorkTrans)
    {
        InventQty totalInventQtyToMatch = 0;
        InventQty totalInventQtyMatched = 0;

        List lpToQtyMapInventTransToRemove = new List(Types::String);
        List lpToQtyMapWorkTransToRemove = new List(Types::String);

        MapEnumerator lpToQtyMapBasedOnWorkTransEnumerator = _lpToQtyMapBasedOnWorkTrans.getEnumerator();
        while (lpToQtyMapBasedOnWorkTransEnumerator.moveNext())
        {
            container workTransIds;
            InventQty totalWorkTransInventQty;

            [workTransIds, totalWorkTransInventQty] = lpToQtyMapBasedOnWorkTransEnumerator.currentValue();

            totalInventQtyToMatch += totalWorkTransInventQty;

            if (_lpToQtyMapBasedOnInventTrans.exists(lpToQtyMapBasedOnWorkTransEnumerator.currentKey()))
            {
                WMSLocationId       locationId;
                WHSLicensePlateId   licensePlateId;
                InventQty           inventTransQty;

                [locationId, licensePlateId, inventTransQty] = _lpToQtyMapBasedOnInventTrans.lookup(lpToQtyMapBasedOnWorkTransEnumerator.currentKey());

                // check qty. If match - add to the 'matched set'. I.e. this pair should not be touched.
                if (totalWorkTransInventQty == inventTransQty)
                {
                    totalInventQtyMatched += totalWorkTransInventQty;

                    lpToQtyMapInventTransToRemove.addEnd(lpToQtyMapBasedOnWorkTransEnumerator.currentKey());
                    lpToQtyMapWorkTransToRemove.addEnd(lpToQtyMapBasedOnWorkTransEnumerator.currentKey());
                }
                else if (conLen(workTransIds) > 1 && totalWorkTransInventQty > inventTransQty)
                {
                    // Maybe part of the workTransInventQty matches the inventTransQty
                    for (int i = 1; i <= conLen(workTransIds); i++)
                    {
                        WHSWorkTransId workTransId;
                        InventQty workTransQty;

                        [workTransId, workTransQty] = conPeek(workTransIds, i);

                        if (workTransQty == inventTransQty)
                        {
                            workTransIds = conDel(workTransIds, i, 1);
                            totalWorkTransInventQty -= workTransQty;

                            totalInventQtyMatched += workTransQty;

                            _lpToQtyMapBasedOnWorkTrans.add(lpToQtyMapBasedOnWorkTransEnumerator.currentKey(), [workTransIds, totalWorkTransInventQty]);

                            lpToQtyMapInventTransToRemove.addEnd(lpToQtyMapBasedOnWorkTransEnumerator.currentKey());

                            break;
                        }
                    }
                }
            }
        }

        ListEnumerator lpToQtyMapInventTransToRemoveEnumerator = lpToQtyMapInventTransToRemove.getEnumerator();
        while (lpToQtyMapInventTransToRemoveEnumerator.moveNext())
        {
            _lpToQtyMapBasedOnInventTrans.remove(lpToQtyMapInventTransToRemoveEnumerator.current());
        }

        ListEnumerator lpToQtyMapWorkTransToRemoveEnumerator = lpToQtyMapWorkTransToRemove.getEnumerator();
        while (lpToQtyMapWorkTransToRemoveEnumerator.moveNext())
        {
            _lpToQtyMapBasedOnWorkTrans.remove(lpToQtyMapWorkTransToRemoveEnumerator.current());
        }

        return [totalInventQtyToMatch, totalInventQtyMatched];
    }

]]></Source>
			</Method>
			<Method>
				<Name>readLpToQtyMapBasedOnInventTrans</Name>
				<Source><![CDATA[
    private static Map readLpToQtyMapBasedOnInventTrans(WHSWorkId _workId, LineNum _workLineNum)
    {
        Map lpToQtyMapBasedOnInventTrans = new Map(Types::String, Types::Container);

        void addQtyToMap(WMSLocationId _locationId, WHSLicensePlateId _licensePlateId, InventQty _transQty)
        {
            str key = strFmt(keyFormat, _locationId, _licensePlateId);

            WMSLocationId       locationId;
            WHSLicensePlateId   licensePlateId;
            InventQty           transQty;

            if (lpToQtyMapBasedOnInventTrans.exists(key))
            {
                [locationId, licensePlateId, transQty] = lpToQtyMapBasedOnInventTrans.lookup(key);
            }
            else
            {
                locationId = _locationId;
                licensePlateId = _licensePlateId;
                transQty = 0;
            }

            transQty += abs(_transQty); // Sold transactions have negative Qty.

            lpToQtyMapBasedOnInventTrans.add(key, [locationId, licensePlateId, transQty]);
        }

        if (WHSInventoryTransactionConfigurationProvider::shouldUseWorkInventoryTransactionQuery(_workId))
        {
            WHSWorkInventoryTransactionDescriptor inventoryTransactionDescriptor = WHSWorkInventoryTransactionQuery::newFromWorkId(_workId).registeredIssueByWorkLine(
                _workLineNum,
                WHSWorkInventoryTransactionQueryParameters::construct());

            WHSWorkInventoryTransactionDescriptorEnumerator descriptorEnumerator = inventoryTransactionDescriptor.getEnumerator();
            while (descriptorEnumerator.moveNext())
            {
                WHSWorkInventoryTransactionDescriptorElement descriptorElement = descriptorEnumerator.current();

                WHSInventoryQuantityPair inventoryQuantity = WHSInventoryTransactionQuantityFormatConverter::convertFromWarehouseHandlingFormatToInventoryFormat(
                    descriptorElement.parmItemId(),
                    descriptorElement.parmHandlingQty(),
                    descriptorElement.parmHandlingWeight());

                var storageDimensions = descriptorElement.parmInventoryDimensionsDescriptor().parmStorageDimensions();

                addQtyToMap(
                    storageDimensions.parmWmsLocationId(),
                    storageDimensions.parmLicensePlateId(),
                    inventoryQuantity.parmInventQty());
            }
        }
        else
        {
            WHSWorkInventTrans  workInventTrans;
            InventTransOrigin   inventTransOrigin;
            InventTrans         inventTrans;
            InventDim           inventTransDim;

            while select TableId from workInventTrans
                where workInventTrans.WorkId == _workId
                    && workInventTrans.LineNum == _workLineNum
                join TableId from inventTransOrigin
                    where inventTransOrigin.InventTransId == workInventTrans.InventTransIdFrom
                join Qty from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                        && inventTrans.StatusIssue == StatusIssue::Sold     // take only completed transactions, no reservations
                        && inventTrans.StatusReceipt == StatusReceipt::None
                join wmsLocationId, LicensePlateId from inventTransDim
                    where inventTransDim.inventDimId == inventTrans.inventDimId
            {
                addQtyToMap(
                    inventTransDim.wMSLocationId,
                    inventTransDim.LicensePlateId,
                    inventTrans.Qty);
            }
        }

        return lpToQtyMapBasedOnInventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readLpToQtyMapBasedOnWorkTrans</Name>
				<Source><![CDATA[
    private static Map readLpToQtyMapBasedOnWorkTrans(WHSWorkId _workId, LineNum _workLineNum)
    {
        Map lpToQtyMapBasedOnWorkTrans = new Map(Types::String, Types::Container);

        WHSWorkTrans    workTrans;
        InventDim       workTransInventDim;

        while select WorkTransId, ItemId, InventDimId, Qty, UOM from workTrans
            where workTrans.WorkId == _workId
                && workTrans.LineNum == _workLineNum
            join wmsLocationId, LicensePlateId from workTransInventDim
                where workTransInventDim.inventDimId == workTrans.InventDimId
        {
            str key = strFmt(keyFormat, workTransInventDim.wmsLocationId, workTransInventDim.LicensePlateId);

            container workTransIds;
            InventQty totalWorkTransInventQty;

            if (lpToQtyMapBasedOnWorkTrans.exists(key))
            {
                [workTransIds, totalWorkTransInventQty] = lpToQtyMapBasedOnWorkTrans.lookup(key);
            }
            else
            {
                workTransIds = conNull();
                totalWorkTransInventQty = 0;
            }

            InventQty workTransInventQty = EcoResReleasedProductUnitConverter::construct().convert(
                workTrans.Qty,
                UnitOfMeasure::unitOfMeasureIdBySymbol(workTrans.UOM),
                UnitOfMeasure::unitOfMeasureIdBySymbol(InventTable::find(workTrans.ItemId).inventUnitId()),
                NoYes::No,
                workTrans.ItemId,
                workTrans.InventDimId,
                NoYes::No);

            workTransIds = conIns(workTransIds, 1, [workTrans.WorkTransId, workTransInventQty]);
            totalWorkTransInventQty += workTransInventQty;

            lpToQtyMapBasedOnWorkTrans.add(key, [workTransIds, totalWorkTransInventQty]);
        }

        return lpToQtyMapBasedOnWorkTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>