<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTrialBalanceDP_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(LedgerTrialBalanceDP))]
public final class LedgerTrialBalanceDP_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processReport_Simulation_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves records that are based on the parameters that were entered.
    /// </summary>
    public void processReport_Simulation_IT()
    {
        DimensionHierarchy primaryDimensionSet;

        NoYes includeSimulation = contract.parmIncludeSimulation_IT();

        primaryDimensionSet = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, contract.parmPrimaryDimensionFocus());
        this.processReportSummary_Simulation_IT(ledgerTrialBalanceTmp, primaryDimensionSet, includeSimulation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves records that are based on the parameters that were entered.
    /// </summary>
    public void processReport()
    {
        NoYes includeSimulation = contract.parmIncludeSimulation_IT();

        next processReport();

        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()) && includeSimulation == NoYes::Yes)
        {
            this.processReport_Simulation_IT();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReportSummary_Simulation_IT</Name>
				<Source><![CDATA[
    private void processReportSummary_Simulation_IT(LedgerTrialBalanceTmp _ledgerTrialBalanceTmp, DimensionHierarchy _primaryDimensionSet, boolean _includeSimulation)
    {
        ttsbegin;
        delete_from _ledgerTrialBalanceTmp;
        ttscommit;
        LedgerTrialBalanceTmp ledgerTrialBalanceTmpReference;

        ledgerTrialBalanceTmpReference.linkPhysicalTableInstance(_ledgerTrialBalanceTmp);

        // Get contract info
        TransDate startDate = contract.parmFromDate();
        TransDate endDate = contract.parmToDate();
        boolean includeOpening = contract.parmIncludeOpening();
        boolean includeClosingAdjustments = contract.parmIncludeClosingAdjustments();
        boolean includeClosingTransactions = contract.parmIncludeClosingTransactions();
        boolean displayMainAccountCategory = contract.parmDisplayMainAccountCategory();
        List postingLayers = contract.parmPostingLayers();
        Map dimensionRangeMap = contract.parmDimensionRangeMap();

        TransDate periodStartDate = LedgerFiscalCalendar::findOpeningStartDateByDate(Ledger::fiscalCalendar(CompanyInfo::current()), startDate);

        this.populateTmpTransSummary_Simulation_IT(
            _ledgerTrialBalanceTmp,
            _primaryDimensionSet,
            dimensionRangeMap,
            startDate,
            endDate,
            includeOpening,
            includeClosingAdjustments,
            includeClosingTransactions,
            postingLayers,
            _includeSimulation);

        this.calculateSummaryOpeningBalances_Simulation_IT(
            _ledgerTrialBalanceTmp,
            includeOpening,
            startDate,
            periodStartDate);

        this.calculateSummaryClosingTransactions_Simulation_IT(
            _ledgerTrialBalanceTmp,
            includeClosingAdjustments,
            includeClosingTransactions);

        this.updateSummaryMainFocusDescriptions_Simulation_IT(_ledgerTrialBalanceTmp, _primaryDimensionSet.Name);

        update_recordSet _ledgerTrialBalanceTmp
            setting
                NetChange = _ledgerTrialBalanceTmp.AmountDebit - _ledgerTrialBalanceTmp.AmountCredit,
                EndingBalance = (_ledgerTrialBalanceTmp.OpeningBalance
                    + _ledgerTrialBalanceTmp.AmountDebit
                    - _ledgerTrialBalanceTmp.AmountCredit
                    + _ledgerTrialBalanceTmp.ClosingAdjustments
                    + _ledgerTrialBalanceTmp.ClosingTransactions)
            where _ledgerTrialBalanceTmp.IsSimulation_IT == false;

        // Update account category
        if (displayMainAccountCategory)
        {
            MainAccount mainAccount;
            MainAccountCategory mainAccountCategory;
            DimensionAttributeValueCombination dimensionAttributeValueCombination;

            update_recordset _ledgerTrialBalanceTmp
                setting
                    MainAccountCategory = mainAccountCategory.AccountCategory
                join dimensionAttributeValueCombination
                    where dimensionAttributeValueCombination.RecId == _ledgerTrialBalanceTmp.LedgerDimension
                join mainAccount
                    where mainAccount.RecId == dimensionAttributeValueCombination.MainAccount
                join mainAccountCategory
                    where mainAccountCategory.AccountCategoryRef == mainAccount.AccountCategoryRef;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNoSimGroupSpecifiedDimCriteriaCreated</Name>
				<Source><![CDATA[
    private void insertNoSimGroupSpecifiedDimCriteriaCreated(
        LedgerTrialBalanceTmp _ledgerTrialBalanceTmp,
        TransDate _startDate,
        TransDate _endDate,
        DimensionHierarchy _primaryDimensionSet,
        LedgerPostingLayerTmp _postingLayersTmp,
        LedgerTransAccountTmp _ledgerTransAccountTmp,
        CreatedTransactionId _createdTransId,
        boolean _includeOpeningInDetail)
    {
        DimensionFocusBalanceSim_IT dimensionFocusBalanceSim;
        FiscalPeriodType operating = FiscalPeriodType::Operating;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        boolean isSim = true;
        insert_recordset _ledgerTrialBalanceTmp
            (AccountingDate, LedgerDimension, AmountDebit, AmountCredit, TransactionType, IsSimulation_IT, PrimaryFocus)
            select minOf(AccountingDate), FocusLedgerDimension, sum(DebitAccountingCurrencyAmount), sum(CreditAccountingCurrencyAmount),
                operating, isSim from dimensionFocusBalanceSim
                    group by dimensionFocusBalanceSim.FocusLedgerDimension, dimensionAttributeValueCombination.DisplayValue
                where dimensionFocusBalanceSim.FocusDimensionHierarchy == _primaryDimensionSet.RecId &&
                    dimensionFocusBalanceSim.Ledger == Ledger::current() &&
                  ((dimensionFocusBalanceSim.AccountingDate >= _startDate && dimensionFocusBalanceSim.FiscalCalendarPeriodType == FiscalPeriodType::Operating) ||
                   (dimensionFocusBalanceSim.AccountingDate == _startDate && dimensionFocusBalanceSim.FiscalCalendarPeriodType == FiscalPeriodType::Opening && _includeOpeningInDetail)) &&
                    dimensionFocusBalanceSim.AccountingDate <= _endDate &&
                    dimensionFocusBalanceSim.FiscalCalendarPeriodType != FiscalPeriodType::Closing
            join DisplayValue from dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == dimensionFocusBalanceSim.FocusLedgerDimension
            exists join _postingLayersTmp
                where dimensionFocusBalanceSim.PostingLayer == _postingLayersTmp.PostingLayer
            exists join _ledgerTransAccountTmp
                where _ledgerTransAccountTmp.LedgerDimension == dimensionFocusBalanceSim.FocusLedgerDimension
                    && _ledgerTransAccountTmp.createdTransactionId == _createdTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSimGroupSpecifiedDimCriteriaCreated</Name>
				<Source><![CDATA[
    private void insertSimGroupSpecifiedDimCriteriaCreated(
        LedgerTrialBalanceTmp _ledgerTrialBalanceTmp,
        TransDate _startDate,
        TransDate _endDate,
        DimensionHierarchy _primaryDimensionSet,
        LedgerPostingLayerTmp _postingLayersTmp,
        LedgerTransAccountTmp _ledgerTransAccountTmp,
        CreatedTransactionId _createdTransId,
        boolean _includeOpeningInDetail)
    {
        DimensionFocusBalanceSim_IT dimensionFocusBalanceSim;
        FiscalPeriodType operating = FiscalPeriodType::Operating;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        SimulationJournalGroupLine_IT simulationJournalGroupLine;
        boolean isSim = true;

        insert_recordset _ledgerTrialBalanceTmp
            (AccountingDate, LedgerDimension, AmountDebit, AmountCredit, TransactionType, IsSimulation_IT, PrimaryFocus)
            select minOf(AccountingDate), FocusLedgerDimension, sum(DebitAccountingCurrencyAmount), sum(CreditAccountingCurrencyAmount),
                operating, isSim from dimensionFocusBalanceSim
                    group by dimensionFocusBalanceSim.FocusLedgerDimension, dimensionAttributeValueCombination.DisplayValue
                where dimensionFocusBalanceSim.FocusDimensionHierarchy == _primaryDimensionSet.RecId &&
                    dimensionFocusBalanceSim.Ledger == Ledger::current() &&
                  ((dimensionFocusBalanceSim.AccountingDate >= _startDate && dimensionFocusBalanceSim.FiscalCalendarPeriodType == FiscalPeriodType::Operating) ||
                   (dimensionFocusBalanceSim.AccountingDate == _startDate && dimensionFocusBalanceSim.FiscalCalendarPeriodType == FiscalPeriodType::Opening && _includeOpeningInDetail)) &&
                    dimensionFocusBalanceSim.AccountingDate <= _endDate &&
                    dimensionFocusBalanceSim.FiscalCalendarPeriodType != FiscalPeriodType::Closing
            join DisplayValue from dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == dimensionFocusBalanceSim.FocusLedgerDimension
            exists join _postingLayersTmp
                where dimensionFocusBalanceSim.PostingLayer == _postingLayersTmp.PostingLayer
            exists join _ledgerTransAccountTmp
                where _ledgerTransAccountTmp.LedgerDimension == dimensionFocusBalanceSim.FocusLedgerDimension
                    && _ledgerTransAccountTmp.createdTransactionId == _createdTransId
            //Filter by simulation group
            join simulationJournalGroupLine
                where dimensionFocusBalanceSim.SimulationJournalNameId == simulationJournalGroupLine.JournalName
                    && simulationJournalGroupLine.SimulationJournalGroupId == contract.parmSimulationJournalGroupId_IT();

    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNoSimGroupSpecifiedDimCriteriaNotCreated</Name>
				<Source><![CDATA[
    private void insertNoSimGroupSpecifiedDimCriteriaNotCreated(
        LedgerTrialBalanceTmp _ledgerTrialBalanceTmp,
        TransDate _startDate,
        TransDate _endDate,
        DimensionHierarchy _primaryDimensionSet,
        LedgerPostingLayerTmp _postingLayersTmp,
        LedgerTransAccountTmp _ledgerTransAccountTmp,
        CreatedTransactionId _createdTransId,
        boolean _includeOpeningInDetail)
    {
        DimensionFocusBalanceSim_IT dimensionFocusBalanceSim;
        FiscalPeriodType operating = FiscalPeriodType::Operating;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        boolean isSim = true;
        insert_recordset _ledgerTrialBalanceTmp
            (AccountingDate, LedgerDimension, AmountDebit, AmountCredit, TransactionType, IsSimulation_IT, PrimaryFocus)
            select minOf(AccountingDate), FocusLedgerDimension, sum(DebitAccountingCurrencyAmount), sum(CreditAccountingCurrencyAmount),
                operating, isSim from dimensionFocusBalanceSim
                    group by dimensionFocusBalanceSim.FocusLedgerDimension, dimensionAttributeValueCombination.DisplayValue
                where dimensionFocusBalanceSim.FocusDimensionHierarchy == _primaryDimensionSet.RecId &&
                    dimensionFocusBalanceSim.Ledger == Ledger::current() &&
                  ((dimensionFocusBalanceSim.AccountingDate >= _startDate && dimensionFocusBalanceSim.FiscalCalendarPeriodType == FiscalPeriodType::Operating) ||
                   (dimensionFocusBalanceSim.AccountingDate == _startDate && dimensionFocusBalanceSim.FiscalCalendarPeriodType == FiscalPeriodType::Opening && _includeOpeningInDetail)) &&
                    dimensionFocusBalanceSim.AccountingDate <= _endDate &&
                    dimensionFocusBalanceSim.FiscalCalendarPeriodType != FiscalPeriodType::Closing
            join DisplayValue from dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == dimensionFocusBalanceSim.FocusLedgerDimension
            exists join _postingLayersTmp
                where dimensionFocusBalanceSim.PostingLayer == _postingLayersTmp.PostingLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSimGroupSpecifiedDimCriteriaNotCreated</Name>
				<Source><![CDATA[
    private void insertSimGroupSpecifiedDimCriteriaNotCreated(
        LedgerTrialBalanceTmp _ledgerTrialBalanceTmp,
        TransDate _startDate,
        TransDate _endDate,
        DimensionHierarchy _primaryDimensionSet,
        LedgerPostingLayerTmp _postingLayersTmp,
        LedgerTransAccountTmp _ledgerTransAccountTmp,
        CreatedTransactionId _createdTransId,
        boolean _includeOpeningInDetail)
    {
        DimensionFocusBalanceSim_IT dimensionFocusBalanceSim;
        FiscalPeriodType operating = FiscalPeriodType::Operating;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        SimulationJournalGroupLine_IT simulationJournalGroupLine;
        boolean isSim = true;

        insert_recordset _ledgerTrialBalanceTmp
            (AccountingDate, LedgerDimension, AmountDebit, AmountCredit, TransactionType, IsSimulation_IT, PrimaryFocus)
            select minOf(AccountingDate), FocusLedgerDimension, sum(DebitAccountingCurrencyAmount), sum(CreditAccountingCurrencyAmount),
                operating, isSim from dimensionFocusBalanceSim
                    group by dimensionFocusBalanceSim.FocusLedgerDimension, dimensionAttributeValueCombination.DisplayValue
                where dimensionFocusBalanceSim.FocusDimensionHierarchy == _primaryDimensionSet.RecId &&
                    dimensionFocusBalanceSim.Ledger == Ledger::current() &&
                  ((dimensionFocusBalanceSim.AccountingDate >= _startDate && dimensionFocusBalanceSim.FiscalCalendarPeriodType == FiscalPeriodType::Operating) ||
                   (dimensionFocusBalanceSim.AccountingDate == _startDate && dimensionFocusBalanceSim.FiscalCalendarPeriodType == FiscalPeriodType::Opening && _includeOpeningInDetail)) &&
                    dimensionFocusBalanceSim.AccountingDate <= _endDate &&
                    dimensionFocusBalanceSim.FiscalCalendarPeriodType != FiscalPeriodType::Closing
            join DisplayValue from dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == dimensionFocusBalanceSim.FocusLedgerDimension
            exists join _postingLayersTmp
                where dimensionFocusBalanceSim.PostingLayer == _postingLayersTmp.PostingLayer
            //Filter by simulation group
            join simulationJournalGroupLine 
                where dimensionFocusBalanceSim.SimulationJournalNameId == simulationJournalGroupLine.JournalName 
                    && simulationJournalGroupLine.SimulationJournalGroupId == contract.parmSimulationJournalGroupId_IT();

    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpTransSummary_Simulation_IT</Name>
				<Source><![CDATA[
    private void populateTmpTransSummary_Simulation_IT(
        LedgerTrialBalanceTmp _ledgerTrialBalanceTmp,
        DimensionHierarchy _primaryDimensionSet,
        Map _dimensionRangeMap,
        TransDate _startDate,
        TransDate _endDate,
        boolean _includeOpeningInDetail,
        boolean _includeClosingAdjustments,
        boolean _includeClosingTransactions,
        List _postingLayers,
        boolean _includeSimulation = false)
    {
        LedgerTransAccountTmp ledgerTransAccountTmp;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        FiscalPeriodType opening = FiscalPeriodType::Opening;
        FiscalPeriodType operating = FiscalPeriodType::Operating;
        FiscalPeriodType closing = FiscalPeriodType::Closing;
        DimensionFocusBalance dimensionFocusBalance;
        boolean isSim = true;
        DimensionFocusBalanceSim_IT dimensionFocusBalanceSim;
        SimulationJournalGroupLine_IT simulationJournalGroupLine;

        date periodStartDate = LedgerFiscalCalendar::findOpeningStartDateByDate(Ledger::fiscalCalendar(CompanyInfo::current()), _startDate);

        CreatedTransactionId createdTransId = appl.curTransactionId(true);

        boolean wasDimCriteriaCreated = LedgerTransAccountTmp::fillFromDimSetBalWithDimRanges(null, _primaryDimensionSet, _dimensionRangeMap, _startDate, _endDate);

        // Build a temporary table containing all the posting layers we are reporting on which can be joined into the query that populates the transactions
        LedgerPostingLayerTmp postingLayersTmp;

        if (_postingLayers)
        {
            ListEnumerator postingLayerLE = _postingLayers.getEnumerator();

            while (postingLayerLE.moveNext())
            {
                postingLayersTmp.PostingLayer = postingLayerLE.current();
                postingLayersTmp.insert();
            }
        }

        if (wasDimCriteriaCreated)
        {
            // Insert all operating trans records
            insert_recordset _ledgerTrialBalanceTmp
                (AccountingDate, LedgerDimension, AmountDebit, AmountCredit, TransactionType, PrimaryFocus)
            select minOf(AccountingDate), FocusLedgerDimension, sum(DebitAccountingCurrencyAmount), sum(CreditAccountingCurrencyAmount),
                operating from dimensionFocusBalance
                    group by dimensionFocusBalance.FocusLedgerDimension, dimensionAttributeValueCombination.DisplayValue
                where dimensionFocusBalance.FocusDimensionHierarchy == _primaryDimensionSet.RecId &&
                    dimensionFocusBalance.Ledger == Ledger::current() &&
                    dimensionFocusBalance.AccountingDate >= _startDate &&
                    dimensionFocusBalance.AccountingDate <= _endDate &&
                    ( dimensionFocusBalance.FiscalCalendarPeriodType == FiscalPeriodType::Operating
                        || (dimensionFocusBalance.FiscalCalendarPeriodType == FiscalPeriodType::Opening && _includeOpeningInDetail) )

            join DisplayValue from dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == dimensionFocusBalance.FocusLedgerDimension
            exists join postingLayersTmp
                where dimensionFocusBalance.PostingLayer == postingLayersTmp.PostingLayer
            exists join ledgerTransAccountTmp
                where ledgerTransAccountTmp.LedgerDimension == dimensionFocusBalance.FocusLedgerDimension
                    && ledgerTransAccountTmp.createdTransactionId == createdTransId;

            if (_includeSimulation)
            {
                if (!contract.parmSimulationJournalGroupId_IT())
                {
                    this.insertNoSimGroupSpecifiedDimCriteriaCreated(
                        _ledgerTrialBalanceTmp,
                        _startDate,
                        _endDate,
                        _primaryDimensionSet,
                        postingLayersTmp,
                        ledgerTransAccountTmp,
                        createdTransId,
                        _includeOpeningInDetail);
                }
                else
                {
                    this.insertSimGroupSpecifiedDimCriteriaCreated(
                        _ledgerTrialBalanceTmp,
                        _startDate,
                        _endDate,
                        _primaryDimensionSet,
                        postingLayersTmp,
                        ledgerTransAccountTmp,
                        createdTransId,
                        _includeOpeningInDetail);
                }
            }
        }
        else
        {
            // Insert all operating trans records
            insert_recordset _ledgerTrialBalanceTmp
                (AccountingDate,
                LedgerDimension,
                AmountDebit,
                AmountCredit,
                TransactionType,
                PrimaryFocus)
            select minOf(AccountingDate), FocusLedgerDimension, sum(DebitAccountingCurrencyAmount), sum(CreditAccountingCurrencyAmount),
                operating from dimensionFocusBalance
                    group by dimensionFocusBalance.FocusLedgerDimension, dimensionAttributeValueCombination.DisplayValue
                where dimensionFocusBalance.FocusDimensionHierarchy == _primaryDimensionSet.RecId &&
                    dimensionFocusBalance.Ledger == Ledger::current() &&
                    dimensionFocusBalance.AccountingDate >= _startDate &&
                    dimensionFocusBalance.AccountingDate <= _endDate &&
                    ( dimensionFocusBalance.FiscalCalendarPeriodType == FiscalPeriodType::Operating
                        || (dimensionFocusBalance.FiscalCalendarPeriodType == FiscalPeriodType::Opening && _includeOpeningInDetail) )
            join DisplayValue from dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == dimensionFocusBalance.FocusLedgerDimension
            exists join postingLayersTmp
                where dimensionFocusBalance.PostingLayer == postingLayersTmp.PostingLayer;

            if (_includeSimulation)
            {
                if (!contract.parmSimulationJournalGroupId_IT())
                {
                    this.insertNoSimGroupSpecifiedDimCriteriaNotCreated(
                        _ledgerTrialBalanceTmp,
                        _startDate,
                        _endDate,
                        _primaryDimensionSet,
                        postingLayersTmp,
                        ledgerTransAccountTmp,
                        createdTransId,
                        _includeOpeningInDetail);
                }
                else
                {
                    this.insertSimGroupSpecifiedDimCriteriaNotCreated(
                    _ledgerTrialBalanceTmp,
                        _startDate,
                        _endDate,
                        _primaryDimensionSet,
                        postingLayersTmp,
                        ledgerTransAccountTmp,
                        createdTransId,
                        _includeOpeningInDetail);
                }
            }
        }

        // Insert all closing transaction and adjustment records
        if (_includeClosingAdjustments || _includeClosingTransactions)
        {
            if (wasDimCriteriaCreated)
            {
                insert_recordset _ledgerTrialBalanceTmp
                    (AccountingDate,
                    LedgerDimension,
                    AmountDebit,
                    AmountCredit,
                    IsClosingTransaction,
                    TransactionType,
                    PrimaryFocus)
                select minOf(AccountingDate), FocusLedgerDimension, sum(DebitAccountingCurrencyAmount), sum(CreditAccountingCurrencyAmount),
                    IsSystemGeneratedUltimo, closing from dimensionFocusBalance
                        group by dimensionFocusBalance.FocusLedgerDimension,
                            dimensionAttributeValueCombination.DisplayValue,
                            dimensionFocusBalance.IsSystemGeneratedUltimo
                    where dimensionFocusBalance.FocusDimensionHierarchy == _primaryDimensionSet.RecId &&
                        dimensionFocusBalance.Ledger == Ledger::current() &&
                        dimensionFocusBalance.AccountingDate >= _startDate &&
                        dimensionFocusBalance.AccountingDate <= _endDate &&
                        dimensionFocusBalance.FiscalCalendarPeriodType == FiscalPeriodType::Closing
                join DisplayValue from dimensionAttributeValueCombination
                    where dimensionAttributeValueCombination.RecId == dimensionFocusBalance.FocusLedgerDimension
                exists join postingLayersTmp
                    where dimensionFocusBalance.PostingLayer == postingLayersTmp.PostingLayer
                exists join ledgerTransAccountTmp
                    where ledgerTransAccountTmp.LedgerDimension == dimensionFocusBalance.FocusLedgerDimension
                        && ledgerTransAccountTmp.createdTransactionId == createdTransId;
            }
            else
            {
                insert_recordset _ledgerTrialBalanceTmp
                    (AccountingDate,
                    LedgerDimension,
                    AmountDebit,
                    AmountCredit,
                    IsClosingTransaction,
                    TransactionType,
                    PrimaryFocus)
                select minOf(AccountingDate), FocusLedgerDimension, sum(DebitAccountingCurrencyAmount), sum(CreditAccountingCurrencyAmount),
                    IsSystemGeneratedUltimo, closing from dimensionFocusBalance
                        group by dimensionFocusBalance.FocusLedgerDimension,
                            dimensionAttributeValueCombination.DisplayValue,
                            dimensionFocusBalance.IsSystemGeneratedUltimo
                    where dimensionFocusBalance.FocusDimensionHierarchy == _primaryDimensionSet.RecId &&
                        dimensionFocusBalance.Ledger == Ledger::current() &&
                        dimensionFocusBalance.AccountingDate >= _startDate &&
                        dimensionFocusBalance.AccountingDate <= _endDate &&
                        dimensionFocusBalance.FiscalCalendarPeriodType == FiscalPeriodType::Closing
                join DisplayValue from dimensionAttributeValueCombination
                    where dimensionAttributeValueCombination.RecId == dimensionFocusBalance.FocusLedgerDimension
                exists join postingLayersTmp
                    where dimensionFocusBalance.PostingLayer == postingLayersTmp.PostingLayer;
            }
        }

        if (wasDimCriteriaCreated)
        {
            // Insert transactions prior to the start date as opening transactions
            insert_recordset _ledgerTrialBalanceTmp
                (AccountingDate,
                LedgerDimension,
                AmountDebit,
                AmountCredit,
                TransactionType,
                PrimaryFocus)
            select minOf(AccountingDate), FocusLedgerDimension, sum(DebitAccountingCurrencyAmount), sum(CreditAccountingCurrencyAmount),
                opening from dimensionFocusBalance
                    group by dimensionFocusBalance.FocusLedgerDimension, dimensionAttributeValueCombination.DisplayValue
                where dimensionFocusBalance.FocusDimensionHierarchy == _primaryDimensionSet.RecId &&
                    dimensionFocusBalance.Ledger == Ledger::current() &&
                    dimensionFocusBalance.AccountingDate >= periodStartDate &&
                    dimensionFocusBalance.AccountingDate < _startDate &&
                    dimensionFocusBalance.FiscalCalendarPeriodType != FiscalPeriodType::Closing
            join DisplayValue from dimensionAttributeValueCombination where
                dimensionAttributeValueCombination.RecId == dimensionFocusBalance.FocusLedgerDimension
            exists join postingLayersTmp
                where dimensionFocusBalance.PostingLayer == postingLayersTmp.PostingLayer
            exists join ledgerTransAccountTmp
                where ledgerTransAccountTmp.LedgerDimension == dimensionFocusBalance.FocusLedgerDimension
                    && ledgerTransAccountTmp.createdTransactionId == createdTransId;

            if (!_includeOpeningInDetail)
            {
                insert_recordset _ledgerTrialBalanceTmp
                    (AccountingDate,
                    LedgerDimension,
                    AmountDebit,
                    AmountCredit,
                    TransactionType,
                    PrimaryFocus)
                select minOf(AccountingDate), FocusLedgerDimension, sum(DebitAccountingCurrencyAmount), sum(CreditAccountingCurrencyAmount),
                    opening from dimensionFocusBalance
                        group by dimensionFocusBalance.FocusLedgerDimension, dimensionAttributeValueCombination.DisplayValue
                    where dimensionFocusBalance.FocusDimensionHierarchy == _primaryDimensionSet.RecId &&
                        dimensionFocusBalance.Ledger == Ledger::current() &&
                        dimensionFocusBalance.AccountingDate >= _startDate &&
                        dimensionFocusBalance.AccountingDate <= _endDate &&
                        dimensionFocusBalance.FiscalCalendarPeriodType == FiscalPeriodType::Opening
                join DisplayValue from dimensionAttributeValueCombination where
                    dimensionAttributeValueCombination.RecId == dimensionFocusBalance.FocusLedgerDimension
                exists join postingLayersTmp
                    where dimensionFocusBalance.PostingLayer == postingLayersTmp.PostingLayer
                exists join ledgerTransAccountTmp
                    where ledgerTransAccountTmp.LedgerDimension == dimensionFocusBalance.FocusLedgerDimension
                        && ledgerTransAccountTmp.createdTransactionId == createdTransId;
            }
        }
        else
        {
            // Insert transactions prior to the start date as opening transactions
            insert_recordset _ledgerTrialBalanceTmp
                (AccountingDate,
                LedgerDimension,
                AmountDebit,
                AmountCredit,
                TransactionType,
                PrimaryFocus)
            select minOf(AccountingDate), FocusLedgerDimension, sum(DebitAccountingCurrencyAmount), sum(CreditAccountingCurrencyAmount),
                opening from dimensionFocusBalance
                    group by dimensionFocusBalance.FocusLedgerDimension, dimensionAttributeValueCombination.DisplayValue
                where dimensionFocusBalance.FocusDimensionHierarchy == _primaryDimensionSet.RecId &&
                    dimensionFocusBalance.Ledger == Ledger::current() &&
                    dimensionFocusBalance.AccountingDate >= periodStartDate &&
                    dimensionFocusBalance.AccountingDate < _startDate &&
                    dimensionFocusBalance.FiscalCalendarPeriodType != FiscalPeriodType::Closing
            join DisplayValue from dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == dimensionFocusBalance.FocusLedgerDimension
            exists join postingLayersTmp
                where dimensionFocusBalance.PostingLayer == postingLayersTmp.PostingLayer;

            if (!_includeOpeningInDetail)
            {
                insert_recordset _ledgerTrialBalanceTmp
                    (AccountingDate,
                    LedgerDimension,
                    AmountDebit,
                    AmountCredit,
                    TransactionType,
                    PrimaryFocus)
                select minOf(AccountingDate), FocusLedgerDimension, sum(DebitAccountingCurrencyAmount), sum(CreditAccountingCurrencyAmount),
                    opening from dimensionFocusBalance
                        group by dimensionFocusBalance.FocusLedgerDimension, dimensionAttributeValueCombination.DisplayValue
                    where dimensionFocusBalance.FocusDimensionHierarchy == _primaryDimensionSet.RecId &&
                        dimensionFocusBalance.Ledger == Ledger::current() &&
                        dimensionFocusBalance.AccountingDate >= _startDate &&
                        dimensionFocusBalance.AccountingDate <= _endDate &&
                        dimensionFocusBalance.FiscalCalendarPeriodType == FiscalPeriodType::Opening
                join DisplayValue from dimensionAttributeValueCombination where
                    dimensionAttributeValueCombination.RecId == dimensionFocusBalance.FocusLedgerDimension
                exists join postingLayersTmp
                    where dimensionFocusBalance.PostingLayer == postingLayersTmp.PostingLayer;
            }
        }

        // Reverse the sign on the credit amounts since they are stored as a negative value in the focus table
        update_recordSet _ledgerTrialBalanceTmp
            setting AmountCredit = -_ledgerTrialBalanceTmp.AmountCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSummaryOpeningBalances_Simulation_IT</Name>
				<Source><![CDATA[
    private void calculateSummaryOpeningBalances_Simulation_IT(
        LedgerTrialBalanceTmp _ledgerTrialBalanceTmp,
        boolean _includeOpeningInDetail,
        TransDate _startDate,
        TransDate _periodStartDate)
    {
        LedgerTrialBalanceTmpAccumulated tmpAccumulated;
        FiscalPeriodType operating = FiscalPeriodType::Operating;
        LedgerTrialBalanceTmp ledgerTrialBalanceTmpReference;

        ledgerTrialBalanceTmpReference.linkPhysicalTableInstance(_ledgerTrialBalanceTmp);

        // Adjust opening transactions as necessary by first summing
        // into accumulated since update_recordset doesn't support summation
        insert_recordset tmpAccumulated
            (AccumulatedDebit, AccumulatedCredit, PrimaryFocus, LedgerDimension, IsSimulation_IT)
            select sum(AmountDebit), sum(AmountCredit), PrimaryFocus, LedgerDimension, IsSimulation_IT
                from _ledgerTrialBalanceTmp
                group by _ledgerTrialBalanceTmp.PrimaryFocus, _ledgerTrialBalanceTmp.LedgerDimension, _ledgerTrialBalanceTmp.IsSimulation_IT
                where (_ledgerTrialBalanceTmp.TransactionType == FiscalPeriodType::Opening // Include opening transactions *unless* opening in detail is specified
                    && (!_includeOpeningInDetail 
                        || _startDate > _periodStartDate) 
                    || (_ledgerTrialBalanceTmp.TransactionType == FiscalPeriodType::Operating // Include operating transactions prior to start date in opening balance
                        && _ledgerTrialBalanceTmp.AccountingDate < _startDate));

        // Insert new operating rows for accumulated opening values with no activity
        insert_recordset _ledgerTrialBalanceTmp
            (PrimaryFocus, LedgerDimension, TransactionType, AccountingDate, IsSimulation_IT)
            select PrimaryFocus, LedgerDimension, operating, _startDate, IsSimulation_IT
            from tmpAccumulated
                notexists join ledgerTrialBalanceTmpReference
                    where ledgerTrialBalanceTmpReference.PrimaryFocus == tmpAccumulated.PrimaryFocus
                        && ledgerTrialBalanceTmpReference.TransactionType == FiscalPeriodType::Operating
                        && ledgerTrialBalanceTmpReference.IsSimulation_IT == tmpAccumulated.IsSimulation_IT;

        // Update the opening amounts from tmpAccumulated
        update_recordSet _ledgerTrialBalanceTmp setting
            OpeningBalance = tmpAccumulated.AccumulatedDebit - tmpAccumulated.AccumulatedCredit
            where _ledgerTrialBalanceTmp.TransactionType == FiscalPeriodType::Operating
            join tmpAccumulated
                where tmpAccumulated.PrimaryFocus == _ledgerTrialBalanceTmp.PrimaryFocus
                   && tmpAccumulated.IsSimulation_IT == _ledgerTrialBalanceTmp.IsSimulation_IT;

        // Remove those opening transactions that were summed and so they are not printed
        delete_from _ledgerTrialBalanceTmp
            where _ledgerTrialBalanceTmp.TransactionType == FiscalPeriodType::Opening
                && (_ledgerTrialBalanceTmp.TransactionType == FiscalPeriodType::Opening
                && (!_includeOpeningInDetail 
                    || _startDate > _periodStartDate)
                || (_ledgerTrialBalanceTmp.TransactionType == FiscalPeriodType::Operating
                    && _ledgerTrialBalanceTmp.AccountingDate < _startDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSummaryClosingTransactions_Simulation_IT</Name>
				<Source><![CDATA[
    private void calculateSummaryClosingTransactions_Simulation_IT(
        LedgerTrialBalanceTmp _ledgerTrialBalanceTmp,
        boolean _includeClosingAdjustments,
        boolean _includeClosingTransactions)
    {
        FiscalPeriodType operating = FiscalPeriodType::Operating;
        LedgerTrialBalanceTmp ledgerTrialBalanceTmpReference;

        ledgerTrialBalanceTmpReference.linkPhysicalTableInstance(_ledgerTrialBalanceTmp);

        if (_includeClosingAdjustments || _includeClosingTransactions)
        {
            LedgerTrialBalanceTmpAccumulated tmpAccumulated;
            // Sum closing transactions as necessary by first summing
            // into accumulated since update_recordset doesn't support summation
            insert_recordset tmpAccumulated
                (AccumulatedDebit, AccumulatedCredit, PrimaryFocus, LedgerDimension, IsClosingTransaction, IsSimulation_IT)
            select sum(AmountDebit), sum(AmountCredit), PrimaryFocus, LedgerDimension, IsClosingTransaction, IsSimulation_IT from _ledgerTrialBalanceTmp
                group by _ledgerTrialBalanceTmp.PrimaryFocus, _ledgerTrialBalanceTmp.LedgerDimension, _ledgerTrialBalanceTmp.IsClosingTransaction, _ledgerTrialBalanceTmp.IsSimulation_IT
                where _ledgerTrialBalanceTmp.TransactionType == FiscalPeriodType::Closing;

            // Insert new operating rows for accumulated closing transactions with no operating activity
            insert_recordset _ledgerTrialBalanceTmp
                (PrimaryFocus, LedgerDimension, TransactionType, IsSimulation_IT)
            select PrimaryFocus, LedgerDimension, operating, IsSimulation_IT from tmpAccumulated
                group by tmpAccumulated.PrimaryFocus, tmpAccumulated.LedgerDimension, tmpAccumulated.IsSimulation_IT
                notexists join ledgerTrialBalanceTmpReference
                    where ledgerTrialBalanceTmpReference.PrimaryFocus == tmpAccumulated.PrimaryFocus
                        && ledgerTrialBalanceTmpReference.TransactionType == FiscalPeriodType::Operating;

            if (_includeClosingAdjustments)
            {
                // Update the closing adjustment amounts from tmpAccumulated
                update_recordSet _ledgerTrialBalanceTmp
                    setting ClosingAdjustments = tmpAccumulated.AccumulatedDebit - tmpAccumulated.AccumulatedCredit
                        where _ledgerTrialBalanceTmp.TransactionType == FiscalPeriodType::Operating
                join tmpAccumulated
                    where tmpAccumulated.PrimaryFocus == _ledgerTrialBalanceTmp.PrimaryFocus
                        && tmpAccumulated.IsClosingTransaction == NoYes::No;
            }

            if (_includeClosingTransactions)
            {
                // Update the closing transactions amounts from tmpAccumulated
                update_recordSet _ledgerTrialBalanceTmp
                    setting ClosingTransactions = tmpAccumulated.AccumulatedDebit - tmpAccumulated.AccumulatedCredit
                        where _ledgerTrialBalanceTmp.TransactionType == FiscalPeriodType::Operating
                join tmpAccumulated
                    where tmpAccumulated.PrimaryFocus == _ledgerTrialBalanceTmp.PrimaryFocus
                        && tmpAccumulated.IsClosingTransaction == NoYes::Yes;
            }
        }

        // Remove those closing amounts that were summed and so they are not printed individually
        delete_from _ledgerTrialBalanceTmp
            where _ledgerTrialBalanceTmp.TransactionType == FiscalPeriodType::Closing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSummaryMainFocusDescriptions_Simulation_IT</Name>
				<Source><![CDATA[
    private void updateSummaryMainFocusDescriptions_Simulation_IT(LedgerTrialBalanceTmp _ledgerTrialBalanceTmp, Name _primaryFocusName)
    {
        DimensionFocusNameTmp dimNameTmpDesc;

        insert_recordset dimNameTmpDesc (LedgerDimension)
            select LedgerDimension from _ledgerTrialBalanceTmp
                group by _ledgerTrialBalanceTmp.LedgerDimension;

        DimensionFocusNameTmp::generateFocusDescriptions(dimNameTmpDesc, _primaryFocusName, new Connection());

        // Update _ledgerTrialBalanceTmp with the main focus descriptions
        update_recordset _ledgerTrialBalanceTmp setting
            PrimaryFocusDescription = dimNameTmpDesc.FocusValue,
            DimensionValues[1] = dimNameTmpDesc.DimValue1,
            DimensionValues[2] = dimNameTmpDesc.DimValue2,
            DimensionValues[3] = dimNameTmpDesc.DimValue3,
            DimensionValues[4] = dimNameTmpDesc.DimValue4,
            DimensionValues[5] = dimNameTmpDesc.DimValue5,
            DimensionValues[6] = dimNameTmpDesc.DimValue6,
            DimensionValues[7] = dimNameTmpDesc.DimValue7,
            DimensionValues[8] = dimNameTmpDesc.DimValue8,
            DimensionValues[9] = dimNameTmpDesc.DimValue9,
            DimensionValues[10] = dimNameTmpDesc.DimValue10,
            DimensionValues[11] = dimNameTmpDesc.DimValue11
            join dimNameTmpDesc
                where dimNameTmpDesc.LedgerDimension == _ledgerTrialBalanceTmp.LedgerDimension;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>