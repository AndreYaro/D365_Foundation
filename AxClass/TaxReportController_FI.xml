<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportController_FI</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReportController_FI</c> class is the controller class for the <c>TaxReport_FI</c> report.
/// </summary>
[SysObsolete('This class is no longer used.', true, 01\12\2022)]
public class TaxReportController_FI extends SrsReportRunController implements BatchRetryable
{
    TaxReport taxReport;
    TaxReportVoucher taxReportVoucher;
    TaxReportCollection taxReportCollection;
    date fromDate;
    date toDate;
    TmpTaxReportById tmpTaxReportById;
    TmpTaxReportById tmpTaxReportByIdFinal;
    recId tmpTableDataRecId;
    CurrencyCode taxCurrencyCode, reportingCurrencyCode;
    boolean currencyRateOnReportingDate;
    TransDate reportingDate;

    private const TaxReportField TaxReportCode301 = 301;
    private const TaxReportField TaxReportCode302 = 302;
    private const TaxReportField TaxReportCode303 = 303;
    private const TaxReportField TaxReportCode304 = 304;
    private const TaxReportField TaxReportCode305 = 305;
    private const TaxReportField TaxReportCode306 = 306;
    private const TaxReportField TaxReportCode307 = 307;
    private const TaxReportField TaxReportCode308 = 308;
    private const TaxReportField TaxReportCode318 = 318;

    private const str FromDate1 = 'FromDate';
    private const str ToDate1 = 'ToDate';
    private const SRSCatalogItemName ReportNameFI = ssrsReportStr(TaxReport_FI, Report);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>TmpTaxReportById</c> records from the temporary table.
    /// </summary>
    public void calc()
    {
        TaxReportPropertiesBag_W propertiesBag = TaxReportPropertiesBag_W::construct();

        if (isRunningOnBatch() && !taxReportVoucher && !taxReport)
        {
            TaxReportContract_W contract = this.parmReportContract().parmRdpContract() as TaxReportContract_W;
            if (contract)
            {
                if (contract.parmTaxReportVoucherRecId())
                {
                    select firstonly taxReportVoucher
                        where taxReportVoucher.RecId == contract.parmTaxReportVoucherRecId();

                    if (fromDate == dateNull() || toDate == dateNull())
                    {
                        this.setDatesFromTaxReportVoucher();
                    }
                }
                else
                {
                    container taxReportPacked = contract.getTaxReportPacked();
                    if (taxReportPacked != conNull())
                    {
                        taxReport = new TaxReport();
                        taxReport.unpack(taxReportPacked);
                    }

                    if (fromDate == dateNull() || toDate == dateNull())
                    {
                        this.setDatesFromTaxReport();
                    }
                }
            }
        }

        propertiesBag.parmTaxCurrencyCode(taxCurrencyCode);
        propertiesBag.parmReportingCurrencyCode(reportingCurrencyCode);
        propertiesBag.parmCurrencyRateOnReportingDate(currencyRateOnReportingDate);
        propertiesBag.parmReportingDate(reportingDate);

        if (taxReportVoucher)
        {
            tmpTaxReportById = TaxTrans::taxAmountByReportId_Table(taxReportVoucher.FromDate,
                                                                   taxReportVoucher.ToDate,
                                                                   taxReportVoucher.TaxPeriod,
                                                                   taxReportVoucher.TaxRepVersion,
                                                                   taxReportVoucher.TaxRepCounter,
                                                                   NoYes::No,
                                                                   DebCredProposal::None,
                                                                   propertiesBag.pack());
        }
        else if (taxReport)
        {
            tmpTaxReportById = TaxTrans::taxAmountByReportId_Table(taxReport.fromDate(),
                                                                   taxReport.toDate(),
                                                                   taxReport.taxPeriod(),
                                                                   taxReport.taxRepVersion(),
                                                                   0,
                                                                   taxReport.update(),
                                                                   DebCredProposal::None,
                                                                   propertiesBag.pack());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <returns>
    ///    The record ID of the temporary table.
    /// </returns>
    public recId fetch( )
    {
        SRSReportRunPermission  permission;
        TaxBase totalAmount;
        TaxBase totalTaxInCostPrice;

        this.calc();

        while select tmpTaxReportById
            order by TaxReportField
            join taxReportCollection
                where tmpTaxReportById.TaxReportField       == taxReportCollection.TaxReportField
                    && taxReportCollection.TaxReportLayout  == TaxReportLayout::Finland
        {
            if (tmpTaxReportById.TaxReportField == TaxReportCode301 ||
                tmpTaxReportById.TaxReportField == TaxReportCode302 ||
                tmpTaxReportById.TaxReportField == TaxReportCode303 ||
                tmpTaxReportById.TaxReportField == TaxReportCode304 ||
                tmpTaxReportById.TaxReportField == TaxReportCode305 ||
                tmpTaxReportById.TaxReportField == TaxReportCode306 ||
                tmpTaxReportById.TaxReportField == TaxReportCode307 ||
                tmpTaxReportById.TaxReportField == TaxReportCode318)
            {
                totalAmount         += tmpTaxReportById.Amount;
                totalTaxInCostPrice += tmpTaxReportById.TaxInCostPrice;
            }

            tmpTaxReportByIdFinal.Amount         = this.taxAmount();
            tmpTaxReportByIdFinal.TaxInCostPrice = tmpTaxReportById.TaxInCostPrice;
            tmpTaxReportByIdFinal.TaxReportField = tmpTaxReportById.TaxReportField;
            tmpTaxReportByIdFinal.Description    = taxReportCollection.Name;
            tmpTaxReportByIdFinal.insert();
        }

        tmpTaxReportByIdFinal.Amount         = -(totalAmount-totalTaxInCostPrice);
        tmpTaxReportByIdFinal.TaxInCostPrice = totalTaxInCostPrice;
        tmpTaxReportByIdFinal.TaxReportField = TaxReportCode308;
        tmpTaxReportByIdFinal.Description    = "@SYS126607";
        tmpTaxReportByIdFinal.insert();

        permission = new SRSReportRunPermission();
        permission.assert();

        //Storing the temp table data using SRSTmpTblMarshaller
        tmpTableDataRecId = this.storeTmpTable();

        CodeAccessPermission::revertAssert();

        delete_from tmpTaxReportByIdFinal;

        return tmpTableDataRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
        private void initFromArgs()
    {
        if (this.parmArgs() && this.parmArgs().dataset() == tablenum(TaxReportVoucher))
        {
            taxReportVoucher = this.parmArgs().record();
            this.setDatesFromTaxReportVoucher();
        }

        if (this.parmArgs() && classidget(this.parmArgs().parmObject()) == classnum(TaxReport))
        {
            taxReport = this.parmArgs().parmObject();
            this.setDatesFromTaxReport();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatesFromTaxReportVoucher</Name>
				<Source><![CDATA[
    private void setDatesFromTaxReportVoucher()
    {
        fromDate = taxReportVoucher.FromDate;
        toDate = taxReportVoucher.ToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatesFromTaxReport</Name>
				<Source><![CDATA[
    private void setDatesFromTaxReport()
    {
        fromDate = taxReport.fromDate();
        toDate = taxReport.toDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
        protected void prePromptModifyContract()
    {
        TaxReportContract_W contract = this.parmReportContract().parmRdpContract() as TaxReportContract_W;

        this.parmShowDialog(true);

        super();

        this.initFromArgs();
        contract.parmReportingDate(toDate);

        contract.parmTaxReportVoucherRecId(taxReportVoucher ? taxReportVoucher.RecId : 0);
        contract.setTaxReportPacked(taxReport ? taxReport.pack() : conNull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
        protected void preRunModifyContract()
    {
        recId recId;
        //SrsTmpTblMarshallerContract contract;
        TaxReportContract_W contract;
        SrsReportRdlDataContract rdlContract;

        contract = this.parmReportContract().parmRdpContract() as TaxReportContract_W;

        taxCurrencyCode = contract.parmTaxCurrencyCode();
        reportingCurrencyCode = contract.parmReportingCurrencyCode();
        currencyRateOnReportingDate = contract.parmCurrencyRateOnReportingDate();
        reportingDate = contract.parmReportingDate();

        rdlContract = this.parmReportContract().parmRdlContract();

        //this.initFromArgs();

        recId = this.fetch();

        contract.parmSrsTmpTblMarshallerContract().parmTmpTableDataRecId(recId);

        rdlContract.setValue(FromDate1, DateTimeUtil::newDateTime(fromDate,0));
        rdlContract.setValue(ToDate1, DateTimeUtil::newDateTime(toDate,0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Stores the temporary table by using the <c>SRSTmpTblMarshaller</c> class.
    /// </summary>
    /// <returns>
    ///    The record ID of the temporary table.
    /// </returns>
    private recId storeTmpTable()
    {
        return SRSTmpTblMarshaller::sendTmpTblToDataProvider(tmpTaxReportByIdFinal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the tax amount value.
    /// </summary>
    /// <returns>
    ///    The tax amount value.
    /// </returns>
    private TaxAmount taxAmount()
    {
        TaxAmount taxAmount = tmpTaxReportById.Amount - tmpTaxReportById.TaxInCostPrice;

        if (tmpTaxReportById.TaxReportField != TaxReportCode307)
        {
            taxAmount = - taxAmount;
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        const str FeatureReference = 'FI-00012';
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        SrsReportRunController  controller = new TaxReportController_FI();
        controller.parmReportName(ReportNameFI);
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>