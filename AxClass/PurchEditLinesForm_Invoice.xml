<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchEditLinesForm_Invoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
[PurchEditLinesFormFactoryAttribute(DocumentStatus::Invoice)]
class PurchEditLinesForm_Invoice extends PurchEditLinesForm
{
    boolean isUserHeaderTaskOwner;
    VendInvoiceRequestStatus headerRequestStatus;
    boolean isUserLineTaskOwner;
    VendInvoiceRequestStatus lineRequestStatus;
    boolean isHeaderStatusChanged;
    boolean isNewInvoiceFromVendor;
    private VendInvoiceAutomationStatus headerAutomationStatus;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowHeaderCreate</Name>
				<Source><![CDATA[
    public boolean allowHeaderCreate()
    {
        if (purchFormLetter.isEGAISPosting_RU())
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowHeaderDelete</Name>
				<Source><![CDATA[
    public boolean allowHeaderDelete()
    {
        if (purchFormLetter.isEGAISPosting_RU())
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowLineCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if line can be created by default.
    /// </summary>
    /// <returns>
    /// true if line can be created by default; otherwise, false.
    /// </returns>
    public boolean allowLineCreate()
    {
        if (purchFormLetter.isEGAISPosting_RU())
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowLineDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if line can be deleted by default.
    /// </summary>
    /// <returns>
    /// true if line can be deleted by default; otherwise, false.
    /// </returns>
    public boolean allowLineDelete()
    {
        if (purchFormLetter.isEGAISPosting_RU())
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowPaymentDisbursement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables creating the payment disbursement.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>parmId</c> of the <c>VendInvoiceInfoTable</c> table that is used to enable creating the
    /// payment disbursement.
    /// </param>
    /// <param name="_vendInvoiceInfoTableRefId">
    /// The <c>vendInvoiceInfoTableRefId</c> of the <c>VendInvoiceInfoTable</c> table that is used to
    /// enable creating the payment disbursement.
    /// </param>
    /// <param name="_showError">
    /// A Boolean value that indicates whether to display the error message; optional.
    /// </param>
    /// <returns>
    /// true if the payment disbursement is enabled; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method checks the payment schedule that is defined in the <c>VendTable</c>, <c>PurchTable</c>,
    /// and the <c>VendInvoiceInfoTable</c> tables and checks the records count of a payment disbursement
    /// to perform the validation to enable the payment disbursement records creation.
    /// </remarks>
    public boolean allowPaymentDisbursement(ParmId _parmId,TradeLineRefId _vendInvoiceInfoTableRefId, boolean _showError = true)
    {
        int countPaymentDisbursement;
        boolean allowPaymentDisbursement = true;
        VendTable vendTableLocal;
        PurchTable purchTableLocal;
        VendInvoiceInfoTable vendInvoiceInfoTable;

        // gets the count of Payment disbursement records.
        countPaymentDisbursement = VendInvoiceInfo_PaymentDisbursement::getCountOfPurchPaymDisbursement(_parmId, _vendInvoiceInfoTableRefId);

        // check Payment schedule on PurchTable, VendTable and purchParmTable.
        // if found then returns false to not allow the payment disbursemnt.

        if (countPaymentDisbursement >= 1)
        {
            vendInvoiceInfoTable = VendInvoiceInfoTable::find(_parmId, _vendInvoiceInfoTableRefId);
            vendTableLocal = vendInvoiceInfoTable.vendTable_InvoiceAccount();

            if (vendInvoiceInfoTable.PurchId)
            {
                purchTableLocal = vendInvoiceInfoTable.purchTable();
            }

            if (vendInvoiceInfoTable.VendPaymentGroup
                || vendInvoiceInfoTable.PaymentSched
                || purchTableLocal.PaymentSched
                || (vendTableLocal.PaymSched && !isConfigurationkeyEnabled(configurationKeyNum(PublicSector))))
            {
                allowPaymentDisbursement = false;
            }

            if (!allowPaymentDisbursement && _showError)
            {
                if (vendInvoiceInfoTable.VendPaymentGroup)
                {
                    error("@SPS284");
                }
                else
                {
                    error("@SPS233");
                }
            }
        }

        return allowPaymentDisbursement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankLCImportLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the letter of credit line field should be visible.
    /// </summary>
    /// <returns>
    /// true if the letter of credit line field should be visible; otherwise, false.
    /// </returns>
    public boolean bankLCImportLine()
    {
        return BankLCImportFeatureChecker::checkBankLCImportEnabled()
            && !purchFormLetter.proforma();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAssetFieldsBeEdited</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the fixed asset fields can be edited.
    /// </summary>
    /// <param name="_parmTable">
    /// A table buffer that contains the current <c>PurchParmTable</c> or <c>VendInvoiceInfoTable</c> table
    /// values.
    /// </param>
    /// <param name="_parmLine">
    /// A table buffer that contains the current <c>PurchParmLine</c> or <c>VendInvoiceInfoLine</c> table
    /// values.
    /// </param>
    /// <returns>
    /// true if the asset fields can be edited; otherwise, false.
    /// </returns>
    /// <remarks>
    ///  The asset fields in a
    ///  <c>
    ///   PurchLine
    ///  </c>
    ///    table buffer can be edited providing the following criteria is met:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>The inventory reference type or the fixed asset type is empty.</description>
    ///   </item>
    ///   <item>
    ///   <description>The purchase type is a subscription, a blanket purchase order, or a purchase
    ///   order.</description>
    ///   </item>
    ///   <item>
    ///   <description>There is no project that is associated with the record.</description>
    ///   </item>
    ///   <item>
    ///   <description>There is no item quantity that is marked.</description>
    ///   </item>
    ///   <item>
    ///   <description>The purchase line is not originating from a Lean Subcontracting job.</description>
    ///   </item>
    ///  </list>
    /// </remarks>
    public boolean canAssetFieldsBeEdited(VendDocumentTableMap _parmTable, VendDocumentLineMap _parmLine)
    {
        boolean canAssetFieldBeEdited = true;

        if (_parmTable.purchTable())
        {
            canAssetFieldBeEdited = super(_parmTable, _parmLine);
        }

        return canAssetFieldBeEdited;
    }

]]></Source>
			</Method>
			<Method>
				<Name>classType</Name>
				<Source><![CDATA[
    str classType()
    {
        return "@SYS12128";
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctPhysical_RU</Name>
				<Source><![CDATA[
    public boolean correctPhysical_RU()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return true;
        }
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateCaption</Name>
				<Source><![CDATA[
    public str dateCaption()
    {
        return "@SYS14475";
    }

]]></Source>
			</Method>
			<Method>
				<Name>editBankLCImportLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the letter of credit line field should be editable.
    /// </summary>
    /// <returns>
    /// true if the letter of credit line field should be editable; otherwise, false.
    /// </returns>
    public boolean editBankLCImportLine()
    {
        boolean ret;

        if (purchTable)
        {
            ret = purchTable.isMarkedForBankLC();
        }
        else
        {
            if (purchFormLetter && purchFormLetter.purchTable())
            {
                ret = purchFormLetter.purchTable().isMarkedForBankLC();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReceiveNow</Name>
				<Source><![CDATA[
    public boolean editReceiveNow()
    {
        if (purchFormLetter.isEGAISPosting_RU())
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enablePerformBudgetCheckButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the buttons to perform budget checking should be enabled.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoTable</c> buffer used to determine the button status.
    /// </param>
    /// <returns>
    /// true if the buttons should be enabled; otherwise false.
    /// </returns>
    public boolean enablePerformBudgetCheckButtons(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return _vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    boolean exchRate(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return ExchangeRateHelper::mayExchangeRateBeModified(_vendInvoiceInfoTable.CurrencyCode, _vendInvoiceInfoTable.updateDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    boolean exchRateSecondary(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return ExchangeRateHelper::maySecondaryCurrencyBeModified(_vendInvoiceInfoTable.CurrencyCode, _vendInvoiceInfoTable.updateDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditReportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the reporting currency exchange rate field should be editable.
    /// </summary>
    /// <param name = "_vendInvoiceInfoTable">The vendor invoice header.</param>
    /// <returns>
    /// true if a reporting currency exists in the ledger and the reporting currency is different from both
    /// the accounting currency and the transaction currency; otherwise, false.
    /// </returns>
    internal boolean canEditReportingCurrencyExchangeRate(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return _vendInvoiceInfoTable.CustVendReportingCurrencyFixedExchangeRate::canEditReportingCurrencyFixedExchangeRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRate</Name>
				<Source><![CDATA[
    boolean fixedExchRate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterCaption</Name>
				<Source><![CDATA[
    str formLetterCaption()
    {
        return "@SYS12938";
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterCaptionHelpText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a string value that is used to set the caption for the <c>PrintFormLetter</c> field on the
    /// <c>PurchEditDocumentPrintSetup</c> dialog box.
    /// </summary>
    /// <returns>
    /// The string value that is used to set the caption for the <c>PrintFormLetter</c> field on the
    /// <c>PurchEditDocumentPrintSetup</c> dialog box.
    /// </returns>
    str formLetterCaptionHelpText()
    {
        return "@SYS128952";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceHeaderState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the invoice header status is changed or not and the user has a pending work item
    /// that is equal to a <c>Task</c> or <c>Approval</c> enumeration value.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoTable</c> record to evaluate.
    /// </param>
    /// <returns>
    /// true when the status of the header has changed; otherwise, false.
    /// </returns>
    public boolean initInvoiceHeaderState(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        isHeaderStatusChanged = false;

        if (headerRequestStatus != _vendInvoiceInfoTable.RequestStatus || headerAutomationStatus != _vendInvoiceInfoTable.AutomationStatus)
        {
            isHeaderStatusChanged = true;
            headerRequestStatus = _vendInvoiceInfoTable.RequestStatus;
            headerAutomationStatus = _vendInvoiceInfoTable.AutomationStatus;
        }

        switch (_vendInvoiceInfoTable.RequestStatus)
        {
            case VendInvoiceRequestStatus::InReview, VendInvoiceRequestStatus::Rejected:
                isUserHeaderTaskOwner = VendInvoiceWorkflow::isUserTaskOrApprovalOwner(_vendInvoiceInfoTable);
                break;
            case VendInvoiceRequestStatus::Approved:
                isUserHeaderTaskOwner = false;
                break;
        }

        return isHeaderStatusChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceLineState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the invoice line status is changed or not and the user has a pending work item
    /// that is equal to the <c>Task</c> or <c>Approval</c> type.
    /// </summary>
    /// <param name="_vendInvoiceInfoLine">
    /// The <c>VendInvoiceInfoLine</c> record to evaluate.
    /// </param>
    /// <returns>
    /// true when the status of the line has changed; otherwise, false.
    /// </returns>
    public boolean initInvoiceLineState(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        boolean islineStatusChanged;

        if (lineRequestStatus != _vendInvoiceInfoLine.RequestStatus)
        {
            islineStatusChanged = true;
            lineRequestStatus = _vendInvoiceInfoLine.RequestStatus;
        }

        if (isUserHeaderTaskOwner && _vendInvoiceInfoLine.RequestStatus == VendInvoiceRequestStatus::Draft)
        {
            isUserLineTaskOwner = true;
        }
        else if (_vendInvoiceInfoLine.RequestStatus == VendInvoiceRequestStatus::InReview || _vendInvoiceInfoLine.RequestStatus == VendInvoiceRequestStatus::Rejected)
        {
            isUserLineTaskOwner = VendInvoiceWorkflow::isUserLineTaskOwnerOrApprovalOwner(_vendInvoiceInfoLine);
        }
        else
        {
            isUserLineTaskOwner = false;
        }

        return islineStatusChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceHeaderAllowDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the invoice header is able to be deleted.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoTable</c> record to evaluate.
    /// </param>
    /// <returns>
    /// True if the <c>VendInvoiceRequestStatus</c> field for the invoice header is equal to any value other than <c>InReview</c> or <c>Rejected</c>
    /// enumeration value or if the invoice is included in process automation; otherwise, false.
    /// </returns>
    public boolean invoiceHeaderAllowDelete(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return !(_vendInvoiceInfoTable.isDocumentBeingProcessedInWorklow() || VendInvoiceAutomationStateManagement::isInvoiceReadOnly(_vendInvoiceInfoTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceHeaderEditFull</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the invoice header is editable.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoTable</c> record to evaluate.
    /// </param>
    /// <returns>
    /// true if the <c>VendInvoiceRequestStatus</c> field for the invoice header is equal to a <c>Draft</c>
    /// enumeration value; otherwise, false.
    /// </returns>
    public boolean invoiceHeaderEditFull(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return (_vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::Draft);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceHeaderEditNone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the invoice header is not editable.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoTable</c> record to evaluate.
    /// </param>
    /// <returns>
    /// true if the <c>VendInvoiceRequestStatus</c> field for the invoice header is equal to a
    /// <c>Approved</c> enumeration value; otherwise, false.
    /// </returns>
    public boolean invoiceHeaderEditNone(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return !this.invoiceHeaderEditFull(_vendInvoiceInfoTable) && !this.invoiceHeaderEditPartial(_vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceHeaderEditPartial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the invoice header is partially editable.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoTable</c> record to evaluate.
    /// </param>
    /// <returns>
    /// true if the <c>VendInvoiceRequestStatus</c> field for the header is equal to a <c>InReview</c> or
    /// <c>Rejected</c> enumeration value and if the user has a pending work item that is equal to a
    /// <c>Task</c> or <c>Approval</c> enumeration value; otherwise, false.
    /// </returns>
    public boolean invoiceHeaderEditPartial(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return isUserHeaderTaskOwner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceLineEditFull</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the invoice line is editable.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoLine</c> record to evaluate.
    /// </param>
    /// <returns>
    /// true if the <c>VendInvoiceRequestStatus</c> field for the invoice line is equal to the <c>Draft</c>
    /// enumeration value; otherwise, false.
    /// </returns>
    public boolean invoiceLineEditFull(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return this.invoiceHeaderEditFull(_vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceLineEditNone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the invoice line is not editable.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoLine</c> record to evaluate.
    /// </param>
    /// <returns>
    /// true if the user has no rights to modify the invoice; otherwise, false.
    /// </returns>
    public boolean invoiceLineEditNone(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        return !this.invoiceLineEditFull(_vendInvoiceInfoTable) && !this.invoiceLineEditPartial(_vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceLineEditPartial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the invoice line is partially editable.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The <c>VendInvoiceInfoLine</c> record to evaluate.
    /// </param>
    /// <returns>
    /// true if the <c>VendInvoiceRequestStatus</c> field for line is equal to the <c>InReview</c> or
    /// <c>Rejected</c> enumeration value and if the user has a pending work item that is equal to a
    /// <c>Task</c> or <c>Approval</c> enumeration value; otherwise, false.
    /// </returns>
    public boolean invoiceLineEditPartial(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        if (this.invoiceHeaderEditPartial(_vendInvoiceInfoTable))
        {
            return true;
        }
        else
        {
            return (_vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::InReview || _vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::Rejected) && isUserLineTaskOwner;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchingDetailsButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the MatchingDetails button should be visible.
    /// </summary>
    /// <returns>
    /// true if the MatchingDetails button should be visible on the form; otherwise, false.
    /// </returns>
    public boolean matchingDetailsButton()
    {
        return isConfigurationkeyEnabled(configurationKeyNum(PurchInvoiceMatching));
    }

]]></Source>
			</Method>
			<Method>
				<Name>MCRDropShipment</Name>
				<Source><![CDATA[
    public boolean MCRDropShipment()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        const int UNINIITALIZED = -1;

        super();

        lineRequestStatus = UNINIITALIZED;
        headerRequestStatus = UNINIITALIZED;
        headerAutomationStatus = UNINIITALIZED;
    }

]]></Source>
			</Method>
			<Method>
				<Name>num</Name>
				<Source><![CDATA[
    boolean num()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsNewInvoiceFromVendor</Name>
				<Source><![CDATA[
    public boolean parmIsNewInvoiceFromVendor(boolean _newInvoiceFromVendor = isNewInvoiceFromVendor)
    {
        if (!prmisDefault(_newInvoiceFromVendor))
        {
            isNewInvoiceFromVendor = _newInvoiceFromVendor;
        }
        return isNewInvoiceFromVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveWhenPrinting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the <c>PurchEditLines</c> form should let the user save when it prints.
    /// </summary>
    /// <returns>
    ///    true if the user is printing and not posting, and changes have been made to the
    ///    <c>PurchEditLines</c> form; otherwise, false.
    /// </returns>
    public boolean saveWhenPrinting()
    {
        return ((purchFormLetter.proforma() && purchFormLetter.printFormLetter()) && purchFormLetter.editLinesChanged());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupBankLCImportLineController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up the <c>BankLCImportLineNumController</c> field that is used for the <c>BankLCImportLine</c>
    /// table.
    /// </summary>
    public void setupBankLCImportLineController()
    {
        super();
        if (bankLCImportLineNumController)
        {
            bankLCImportLineNumController.parmAllowUpdatedPackingSlip(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAlcoholLicenseSeriesNum_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Controls the visibility of the <c>AlcoholLicenseSeriesNum_RU</c> field on the <c>VendEditInvoice</c> form.
    /// </summary>
    /// <returns>
    ///    true
    /// </returns>
    public boolean showAlcoholLicenseSeriesNum_RU()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAsset_RU</Name>
				<Source><![CDATA[
    public boolean showAsset_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCorrect_RU</Name>
				<Source><![CDATA[
    public boolean showCorrect_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCorrectedInvoiceId_RU</Name>
				<Source><![CDATA[
    public boolean showCorrectedInvoiceId_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDocNumberingCode_LT</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to find if the Numbering Code field should be visible on the Purchase Invoice form.
    /// </summary>
    /// <param name="_parmId">
    /// ParmId of the Purchase order transaction.
    /// </param>
    /// <returns>
    /// True if there exists a VendInvoiceInfoTable record with the given ParmId and has the DocRegister_LT field set.
    /// </returns>
    public boolean showDocNumberingCode_LT(ParmId _parmId)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceInfoTable_W vendInvoiceInfoTable_W;

        select firstonly RecId from vendInvoiceInfoTable
            join vendInvoiceInfoTable_W
            where vendInvoiceInfoTable.ParmId == _parmId &&
                vendInvoiceInfoTable_W.DocAutoNumbering_LT &&
                vendInvoiceInfoTable_W.VendInvoiceInfoTable == vendInvoiceInfoTable.recid;

        return (vendInvoiceInfoTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showExtra_RU</Name>
				<Source><![CDATA[
    public boolean showExtra_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInventProfileType_RU</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    public boolean showInventProfileType_RU()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showOfficials_RU</Name>
				<Source><![CDATA[
    public boolean showOfficials_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPostingProfile_RU</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    public boolean showPostingProfile_RU()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintAcceptanceReport_RU</Name>
				<Source><![CDATA[
    public boolean showPrintAcceptanceReport_RU()
    {
        return purchTable.PurchaseType != PurchaseType::ReturnItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintEUVatInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>VendEditInvoice</c> form printer settings should contain the Print Intra-community invoice option
    /// </summary>
    /// <returns>
    /// true if current country is Spain; otherwise, false.
    /// </returns>
    public boolean showPrintEUVatInvoice()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoES ]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintInventBaileeReport_RU</Name>
				<Source><![CDATA[
    public boolean showPrintInventBaileeReport_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showVATOnPayment_RU</Name>
				<Source><![CDATA[
    final public boolean showVATOnPayment_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specQtyAllowEdit</Name>
				<Source><![CDATA[
    public boolean specQtyAllowEdit()
    {
        boolean ret = super();

        if (purchFormLetter.isEGAISPosting_RU())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumBy</Name>
				<Source><![CDATA[
    public AccountOrder sumBy()
    {
        if (purchFormLetter.isEGAISPosting_RU())
        {
            return AccountOrder::Account;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumByAllowEdit</Name>
				<Source><![CDATA[
    public boolean sumByAllowEdit()
    {
        boolean ret = super();

        if (purchFormLetter.isEGAISPosting_RU())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumIncludePending</Name>
				<Source><![CDATA[
    public boolean sumIncludePending()
    {
        boolean ret = true;

        if (purchFormLetter.isEGAISPosting_RU())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumIncludePendingVisible</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the <c>PurchEditLines</c> form should display the <c>SumIncludePending</c> field
    ///    from the <c>PurchParmUpdate</c> table.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean sumIncludePendingVisible()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tabPaymentDisbursementShow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to display the Payment disbursement grid on the <c>PurchEditLines</c> form.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    boolean tabPaymentDisbursementShow()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateAllowEdit</Name>
				<Source><![CDATA[
    boolean transDateAllowEdit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>varianceApproved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>VarianceApproved</c> field should be visible.
    /// </summary>
    /// <returns>
    ///    true if the <c>VarianceApproved</c> field should be visible on the form; otherwise, false.
    /// </returns>
    boolean varianceApproved()
    {
        VendParameters parameters = VendParameters::find();

        return parameters.editUseInvoiceMatching() == NoYes::Yes &&
            parameters.PostInvoiceMatchDiscrepancies == InvoiceMatchPostingOption::RequireApproval;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>