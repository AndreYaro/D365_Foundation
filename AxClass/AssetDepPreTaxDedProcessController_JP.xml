<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepPreTaxDedProcessController_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The controller of asset depreciation pre-tax deduction process.
/// </summary>
class AssetDepPreTaxDedProcessController_JP extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates process.
    /// </summary>
    /// <returns>
    /// Returns <C>AssetDepPreTaxDedProcess_JP</C>
    /// </returns>
    protected AssetDepPreTaxDedProcess_JP createProcess()
    {
        Object                                  contractObject;
        AssetDepPreTaxDedProcessContract_JP     contract;
        AssetDepPreTaxDedProcess_JP             assetDepPreTaxDedProcess;

        contractObject = this.getDataContractObject();
        if (contractObject && contractObject is AssetDepPreTaxDedProcessContract_JP)
        {
            contract = contractObject as AssetDepPreTaxDedProcessContract_JP;

            assetDepPreTaxDedProcess.ProcessDate        = contract.parmToDate();
            assetDepPreTaxDedProcess.AutoPost           = contract.parmAutoPost();
            assetDepPreTaxDedProcess.LedgerJournalName  = contract.parmJournalName();
            assetDepPreTaxDedProcess.Status             = AssetDepPreTaxDedProcessStatus_JP::None;
            assetDepPreTaxDedProcess.insert();

            contract.parmProcessRecId(assetDepPreTaxDedProcess.RecId);
        }

        return assetDepPreTaxDedProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogClose</Name>
				<Source><![CDATA[
    protected void dialogClose()
    {
        AssetDepPreTaxDedProcess_JP     assetDepPreTaxDedProcess;

        super();

        if (!dialogCanceled)
        {
            assetDepPreTaxDedProcess = this.createProcess();
            if (assetDepPreTaxDedProcess)
            {
                this.refreshProcessForm(assetDepPreTaxDedProcess);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeServiceParameter</Name>
				<Source><![CDATA[
    protected Object initializeServiceParameter(DictMethod dictMethod, int parameterIndex)
    {
        Object                                  ret;
        AssetDepPreTaxDedProcessContract_JP     contract;

        ret = super(dictMethod, parameterIndex);

        if (ret && ret is AssetDepPreTaxDedProcessContract_JP)
        {
            contract = ret as AssetDepPreTaxDedProcessContract_JP;
            contract.parmToDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            contract.parmPeriod(
                strFmt(
                    "@SYP4881521",    // From %1 to %2
                    LedgerFiscalCalendar::findFirstDayOfYear(Ledger::fiscalCalendar(), contract.parmToDate()),
                    contract.parmToDate()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshProcessForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes proccess form.
    /// </summary>
    /// <param name="_assetDepPreTaxDedProcess">
    /// The process instance, defaulted null
    /// </param>
    protected void refreshProcessForm(AssetDepPreTaxDedProcess_JP _assetDepPreTaxDedProcess = null)
    {
        FormDataSource  formDataSource;

        if (args && args.caller() is FormDataSource)
        {
            formDataSource = args.caller() as FormDataSource;
            if (formDataSource.table() == tableNum(AssetDepPreTaxDedProcess_JP))
            {
                if (_assetDepPreTaxDedProcess)
                {
                    formDataSource.executeQuery();

                    formDataSource.positionToRecord(_assetDepPreTaxDedProcess);
                }
                else
                {
                    formDataSource.research(true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        const str FeatureReference = 'JP-00026';
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        AssetDepPreTaxDedProcessController_JP    controller;

        controller = new AssetDepPreTaxDedProcessController_JP(
            classStr(AssetDepPreTaxDedProcessService_JP),
            methodStr(AssetDepPreTaxDedProcessService_JP, runFullProcess),
            SysOperationExecutionMode::Synchronous);

        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>