<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalToGeneralLedgerTransferService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Provides service to transfer the subledger voucher to general ledger.
/// </summary>
[ExportMetadataAttribute(classStr(ProcessAutomationTask), classStr(SubledgerJournalToGeneralLedgerTransferService))]
[ExportAttribute('Microsoft.Dynamics.AX.Application.ProcessAutomationTask')]
internal final class SubledgerJournalToGeneralLedgerTransferService extends ProcessAutomationTask implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isProcessAutomationEnabledForThisTask</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isProcessAutomationEnabledForThisTask()
    {
        return SubledgerJournalTransferProcess::canUseProcessAutomationForTransfer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfWorkToBePerformed</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected List getListOfWorkToBePerformed()
    {
        LedgerFiscalCalendarPeriod ledgerFiscalCalendarPeriod;
        List subledgerToGeneralLedgerTransferBundle = new List(Types::Class);
        int64 countOfTransferInstanceCurrentlyExecuting = SubledgerJournalTransferOperation::numberOfBatchTransferInstancesExecuting();

        //verify that we do not have more transfer process in execution than what we allow if yes then we will skip this execution
        if (countOfTransferInstanceCurrentlyExecuting == 0)
        {        
            SubledgerJournalEntryNotTransferred subledgerJournalEntryNotTransferred;
            SubledgerJournalTransferRule subledgerJournalTransferRule;

            // intializing the in-memory temp table which captures the source document type specific info used for transfer
            SourceDocumentTmpTypeInformation sourceDocumentTmpTypeInformation = SourceDocumentType::getSourceDocumentTypeInformation(classStr(SubledgerJournalTransferController));

            select crosscompany SourceRelationType, Ledger from subledgerJournalEntryNotTransferred
                group by Ledger, SourceRelationType
            exists join subledgerJournalTransferRule
                where subledgerJournalTransferRule.Ledger == subledgerJournalEntryNotTransferred.Ledger &&
                    subledgerJournalTransferRule.TransferMode == SubledgerJournalTransferMode::AsynchronousBatch
            exists join sourceDocumentTmpTypeInformation
                where sourceDocumentTmpTypeInformation.SourceRelationType == subledgerJournalEntryNotTransferred.SourceRelationType &&
                    (subledgerJournalTransferRule.SourceDocumentType == sourceDocumentTmpTypeInformation.ClassId || subledgerJournalTransferRule.SourceDocumentType == 0)
            exists join ledgerFiscalCalendarPeriod
                where ledgerFiscalCalendarPeriod.FiscalCalendarPeriod == subledgerJournalEntryNotTransferred.FiscalCalendarPeriod
                    && ledgerFiscalCalendarPeriod.Ledger == subledgerJournalEntryNotTransferred.Ledger
                    && ledgerFiscalCalendarPeriod.Status == FiscalPeriodStatus::Open;

            if (subledgerJournalEntryNotTransferred)
            {
                int numberOfParallelTransferTask = this.numberOfParallelTaskToCreate();

                for (int i= 1; i <= numberOfParallelTransferTask; i++)
                {
                    SubledgerVoucherToGeneralLedgerTransferController transferController = SubledgerVoucherToGeneralLedgerTransferController::createSubledgerJournalTransferController();

                    SubledgerJournalTransferRequest subledgerJournalTransferRequestObj = transferController.getDataContractObject(classStr(SubledgerJournalTransferRequest));

                    subledgerJournalTransferRequestObj.parmExecutionId(this.parmProcessScheduleWorkItem().parmExecutionId());
                    subledgerJournalTransferRequestObj.parmProcessScheduleOccurrenceRecId(this.parmProcessScheduleWorkItem().parmProcessScheduleOccurrenceRecId());
                    subledgerJournalTransferRequestObj.parmProcessScheduleSeriesPatternRecId(this.parmProcessScheduleWorkItem().parmProcessScheduleSeriesPatternRecId());

                    subledgerToGeneralLedgerTransferBundle.addEnd(transferController);
                }
            }
            else
            {
                if (countOfTransferInstanceCurrentlyExecuting == 0)
                {
                    SubledgerJournalEntry subledgerJournalEntry;
                    SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
                    ledgerFiscalCalendarPeriod.clear();

                    select firstonly RecId from subledgerJournalEntry
                        where subledgerJournalEntry.Status == SubledgerJournalEntryStatus::TransferInProcess 
                    exists join ledgerFiscalCalendarPeriod
                        where ledgerFiscalCalendarPeriod.FiscalCalendarPeriod == subledgerJournalEntry.FiscalCalendarPeriod
                            && ledgerFiscalCalendarPeriod.Ledger == subledgerJournalEntry.Ledger
                            && ledgerFiscalCalendarPeriod.Status == FiscalPeriodStatus::Open
                    notexists join subledgerVoucherGeneralJournalEntry
                        where subledgerVoucherGeneralJournalEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId &&
                            subledgerVoucherGeneralJournalEntry.SubledgerJournalEntry != 0;
                    
                    if (subledgerJournalEntry.RecId)
                    {
                        SysOperationServiceController voucherRecoveryController = SubledgerVoucherTransferToGeneralLedgerRecoveryService::createSubledgerVoucherTransferToGeneralLedgerRecoveryServiceController();
                        subledgerToGeneralLedgerTransferBundle.addEnd(voucherRecoveryController);
                    }
                }
            }
        }

        return subledgerToGeneralLedgerTransferBundle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchJobCaption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected BatchCaption batchJobCaption()
    {
        return "@SYS317493";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfParallelTaskToCreate</Name>
				<Source><![CDATA[
    private int numberOfParallelTaskToCreate()
    {
        int numberOfParallelTransferTask;

        if (SubledgerJournalTransferParallelizationFlight::instance().isEnabled())
        {    
            int transferProcessTaskBundleSize = SubledgerJournalTransferOperation::findOrCreateTransferProcessParameterValues().TransferProcessTaskBundleSize;

            if (transferProcessTaskBundleSize > 0)
            {
                SubledgerJournalEntryNotTransferred subledgerJournalEntryNotTransferred;
                SubledgerJournalTransferRule subledgerJournalTransferRule;
                LedgerFiscalCalendarPeriod ledgerFiscalCalendarPeriod;

                select crosscompany count(AccountingEvent) from subledgerJournalEntryNotTransferred
                exists join subledgerJournalTransferRule
                    where subledgerJournalTransferRule.Ledger == subledgerJournalEntryNotTransferred.Ledger &&
                        subledgerJournalTransferRule.TransferMode == SubledgerJournalTransferMode::AsynchronousBatch
                exists join ledgerFiscalCalendarPeriod
                    where ledgerFiscalCalendarPeriod.FiscalCalendarPeriod == subledgerJournalEntryNotTransferred.FiscalCalendarPeriod
                        && ledgerFiscalCalendarPeriod.Ledger == subledgerJournalEntryNotTransferred.Ledger
                        && ledgerFiscalCalendarPeriod.Status == FiscalPeriodStatus::Open;

                if (subledgerJournalEntryNotTransferred.AccountingEvent > 0)
                {
                    numberOfParallelTransferTask = SubledgerJournalTransferOperation::numberOfParallelTransferTask
                        (transferProcessTaskBundleSize,
                        subledgerJournalEntryNotTransferred.AccountingEvent
                        );
                }                
            }
        }
        else
        {
            numberOfParallelTransferTask = 1;
        }
                
        return numberOfParallelTransferTask;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>