<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEcoResProductTemplateConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailEcoResProductTemplateConsistencyCheck</c> class is the top level consistency check for item templates.
/// </summary>
internal final class RetailEcoResProductTemplateConsistencyCheck extends SysConsistencyCheck
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Triggers the main logic of item templates consistency checker.
    /// </summary>
    public void run()
    {
        boolean doUpdate = (this.checkFix() == CheckFix::Fix);

        int numFixed = this.fixProductTemplates(doUpdate);

        if (doUpdate)
        {
            this.updateCorrected(numFixed);
        }

        this.updateNotCorrected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixProductTemplates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fixes or finds the corrupted templates.
    /// </summary>
    /// <param name = "_doUpdate">
    /// true, if the corrupted templates to be fixed; 
    /// false, if the corrupted templates to be found.
    /// </param>
    /// <returns>
    /// The number of corrupted templates found or fixed.
    /// </returns>
    private int fixProductTemplates(boolean _doUpdate)
    {
        RetailEcoResProductTemplateDataSourceOrderRebuilder templateDataSourceOrderRebuilder = RetailEcoResProductTemplateDataSourceOrderRebuilder::construct();

        templateDataSourceOrderRebuilder.parmDoUpdate(_doUpdate);
        container corruptedTemplateNames = templateDataSourceOrderRebuilder.replaceProductTemplatesDataWithCorrectOrder();
        container sharedCorruptedTemplateNames = conPeek(corruptedTemplateNames, 1);
        container personalCorruptedTemplateNames = conPeek(corruptedTemplateNames, 2);

        if (conLen(sharedCorruptedTemplateNames) > 0)
        {
            str message = _doUpdate ? "@Retail:RetailSharedTemplateInfoMsg" : "@Retail:RetailSharedTemplateConsistencyCheckMsg";
            
            for(int i=1; i <= conLen(sharedCorruptedTemplateNames); i++)
            {
                warning(strFmt(message, conPeek(sharedCorruptedTemplateNames, i)));
            }
        }
        if (conLen(personalCorruptedTemplateNames) > 0)
        {
            str message = _doUpdate ? "@Retail:RetailPersonalTemplateInfoMsg" : "@Retail:RetailPersonalTemplateConsistencyCheckMsg";
            
            for(int i=1; i <= conLen(personalCorruptedTemplateNames); i++)
            {
                container corruptedPersonalTemplate = conPeek(personalCorruptedTemplateNames, i);
                warning(strFmt(message, conPeek(corruptedPersonalTemplate, 2), conPeek(corruptedPersonalTemplate, 1)));
            }
        }

        if (conLen(sharedCorruptedTemplateNames) == 0 && conLen(personalCorruptedTemplateNames) == 0)
        {
            info("@Retail:RetailSharedTemplateNoCorruptedTemplateFound");
        }

        return conLen(sharedCorruptedTemplateNames) + conLen(personalCorruptedTemplateNames);
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public ConfigurationKeyId configurationKey()
    {
        return configurationKeyNum(Retail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Retail:EcoResProductTemplateConsistencyCheck_Description";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    public static HelpTxt helpText()
    {
        return "@Retail:EcoResProductTemplateConsistencyCheck_HelpText";
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    public ClassId treeParentClassId()
    {
        return classNum(EcoResConsistencyCheck);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>