<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>TrvExpenseController</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// The <c>TrvExpenseController</c> class is the controller class for the <c>TrvExpense</c> report.
/// </summary>
public class TrvExpenseController extends SrsReportRunController implements BatchRetryable
{
    TrvExpTable trvExpTable;
    TrvExpTrans trvExpTrans;
    const str fromDateParam = "FromDate";
    const str toDateParam = "ToDate";

}
]]></Declaration>
    <Methods>
      <Method>
        <Name>prePromptModifyContract</Name>
        <Source><![CDATA[
    /// <summary>
    /// Modifies the report query and parameters by using the caller settings.
    /// </summary>
    protected void prePromptModifyContract()
    {
        QueryBuildDataSource qbdsTrvExpTable;
        QueryBuildDataSource qbdsTrvExpTrans;
        Query                query;

        if (this.parmArgs().record())
        {
            this.setRecord();
            query = this.getFirstQuery();

            if (query)
            {
                qbdsTrvExpTable = query.dataSourceTable(tablenum(TrvExpTable));
                qbdsTrvExpTrans = query.dataSourceTable(tablenum(TrvExpTrans));

                qbdsTrvExpTable.clearRanges();
                qbdsTrvExpTrans.clearRanges();

                SysQuery::findOrCreateRange(qbdsTrvExpTable, fieldnum(TrvExpTable, ExpNumber)).value(trvExpTable.ExpNumber);
                SysQuery::findOrCreateRange(qbdsTrvExpTable, fieldnum(TrvExpTable, ReferenceDataAreaId)).value(trvExpTable.ReferenceDataAreaId);

                if (trvExpTrans.RecId)
                {
                    SysQuery::findOrCreateRange(qbdsTrvExpTrans, fieldnum(TrvExpTrans, RecId)).value(queryValue(trvExpTrans.RecId));
                }
            }
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>preRunModifyContract</Name>
        <Source><![CDATA[
    protected void preRunModifyContract()
    {
        FromDate            fromDate;
        ToDate              toDate;
        TrvExpenseContract  contract;

        contract    = this.parmReportContract().parmRdlContract() as TrvExpenseContract;
        toDate      = DateTimeUtil::date(contract.getValue(toDateParam));
        fromDate    = DateTimeUtil::date(contract.getValue(fromDateParam));

        if (toDate == dateNull())
        {
            toDate = dateMax();
        }

        SRSReportHelper::addFromAndToDateRangeToQuery(this.getFirstQuery(), fromDate, toDate, tablenum(TrvExpTrans), fieldnum(TrvExpTrans, TransDate));
    }

]]></Source>
      </Method>
      <Method>
        <Name>setRecord</Name>
        <Source><![CDATA[
    private void setRecord()
    {
        switch (this.parmArgs().record().TableId)
        {
            case tableNum(TrvExpTable):
                trvExpTable = this.parmArgs().record();
                break;

            case tableNum(TrvExpTrans):
                trvExpTrans = this.parmArgs().record();
                trvExpTable = TrvExpTable::find(trvExpTrans.ExpNumber);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
    public static void main(Args _args)
    {
        SrsReportRunController controller  = new TrvExpenseController();
        controller.parmArgs(_args);
        controller.parmReportName(ssrsReportStr(TrvExpense, Report));
        controller.startOperation();
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>