<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendImportOneTimeVendErrorReport_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendImportOneTimeVendErrorReport_PSN</c> class handles the creation of the <c>VendOneTimeVendorReport_PSN</c> report.
/// </summary>
public class VendImportOneTimeVendErrorReport_PSN
{
    container                   importOperationResult;
    Map                         errorMap;
    List                        contractList;
    int                         importedVendors;
    int                         importedInvoices;
    Filename                    inputFileName;
    Name                        accountStructure;
    VendOneTimeVendorTmp_PSN    vendOneTimeVendorStaging_PSNTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>VendImportOneTimeVendErrorReport_PSN</c>.
    /// </summary>
    /// <param name = "_importOperationResult">The results from the import operation</param>
    public void new(container _importOperationResult)
    {
        importOperationResult = _importOperationResult;
        this.initializeErrorMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createErrorReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if One Time Vendor imported file had errors and opens the <c>VendOneTimeVendorReport_PSN</c> report.
    /// </summary>
    public void createErrorReport()
    {
        if (this.hasErrors())
        {
            this.initializeImportOperationResults();
            this.createErrorReportData();

            if (vendOneTimeVendorStaging_PSNTmp)
            {
                this.openReport();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the imported data has errors.
    /// </summary>
    /// <returns>
    /// Returns true if imported data had errors.
    /// </returns>
    public boolean hasErrors()
    {
        return errorMap.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeErrorMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>Map</c> which contains import errors.
    /// </summary>
    private void initializeErrorMap()
    {
        if (conLen(importOperationResult) > 0)
        {
            errorMap = Map::create(conPeek(importOperationResult, 1));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImportOperationResults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the variables from the import operation results.
    /// </summary>
    private void initializeImportOperationResults()
    {
        contractList     = List::create(conPeek(importOperationResult, 2));
        importedVendors  = conPeek(importOperationResult, 3);
        importedInvoices = conPeek(importOperationResult, 4);
        inputFileName    = conPeek(importOperationResult, 5);
        accountStructure = conPeek(importOperationResult, 6);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the menu item for the <c>VendOneTimeVendorReport_PSN</c> report.
    /// </summary>
    private void openReport()
    {
        MenuFunction                        errorReportMenuFunction;
        VendOneTimeVendorReportContract_PSN vendOneTimeVendorReportContract_PSN;
        Args                                reportArgs;

        reportArgs = new Args();
        reportArgs.parmObject(vendOneTimeVendorReportContract_PSN);
        reportArgs.record(vendOneTimeVendorStaging_PSNTmp);
        errorReportMenuFunction = new MenuFunction(menuitemActionStr(VendOneTimeVendorReport_PSN) , MenuItemType::Action);
        errorReportMenuFunction.run(reportArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createErrorReportData</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Populates the VendOneTimeVendorTmp_PSN buffer with error report data.
    /// </summary>
    private void createErrorReportData()
    {
        int                                    errorRowNumber;
        MapIterator                            errorMapEnumerator;
        ListEnumerator                         unpackedListEnumerator, unpackedContractListEnumerator;
        DirPartyBaseType                       recordType;
        Counter                                counter;
        List                                   unpackedContracList;
        VendOneTimeVendStagingDataContract_PSN vendOneTimeVendStagingDataContract_PSN;

        unpackedContracList    = new List(Types::Class);
        unpackedListEnumerator = contractList.getEnumerator();

        // Unpacking file row data contracts.
        while (unpackedListEnumerator.moveNext())
        {
            vendOneTimeVendStagingDataContract_PSN = new VendOneTimeVendStagingDataContract_PSN();
            vendOneTimeVendStagingDataContract_PSN.unpack(unpackedListEnumerator.current());
            unpackedContracList.addEnd(vendOneTimeVendStagingDataContract_PSN);
        }

        unpackedContractListEnumerator = unpackedContracList.getEnumerator();
        errorMapEnumerator             = new MapIterator(errorMap);

        // Traversing invalid records for creating one-time vendor error report data.
        while (errorMapEnumerator.more())
        {
            errorRowNumber = errorMapEnumerator.key();
            unpackedContractListEnumerator.reset();
            counter = 1;

            // Traversing staging table contract <c>VendOneTimeVendStagingDataContract_PSN</c> list.
            while (unpackedContractListEnumerator.moveNext())
            {
                if (errorRowNumber == counter)
                {
                    vendOneTimeVendStagingDataContract_PSN = unpackedContractListEnumerator.current() ;

                    vendOneTimeVendorStaging_PSNTmp.clear();

                    vendOneTimeVendorStaging_PSNTmp.Address            = vendOneTimeVendStagingDataContract_PSN.parmStreet() + ' ' +
                        vendOneTimeVendStagingDataContract_PSN.parmZipCode() + ' ' +
                        vendOneTimeVendStagingDataContract_PSN.parmCity() + ' ' +
                        vendOneTimeVendStagingDataContract_PSN.parmCountryRegionId();
                    vendOneTimeVendorStaging_PSNTmp.InvoiceNumber      = vendOneTimeVendStagingDataContract_PSN.parmInvoiceNumber();
                    vendOneTimeVendorStaging_PSNTmp.ErrorRowNumber     = errorMapEnumerator.key();
                    vendOneTimeVendorStaging_PSNTmp.Error              = errorMapEnumerator.value();
                    vendOneTimeVendorStaging_PSNTmp.RecordType         = str2enum(recordType, vendOneTimeVendStagingDataContract_PSN.parmVendRecordType());
                    vendOneTimeVendorStaging_PSNTmp.Group              = vendOneTimeVendStagingDataContract_PSN.parmVendGroupId();
                    vendOneTimeVendorStaging_PSNTmp.AccountStructure   = accountStructure;
                    vendOneTimeVendorStaging_PSNTmp.FileName           = inputFileName;
                    vendOneTimeVendorStaging_PSNTmp.ImportedVendors    = int2str(importedVendors);
                    vendOneTimeVendorStaging_PSNTmp.ImportedInvoices   = int2str(importedInvoices);

                    // Populate Name field based on the record type in the import file.
                    if (vendOneTimeVendStagingDataContract_PSN.parmVendRecordType() == enum2str(DirPartyBaseType::Person))
                    {
                        vendOneTimeVendorStaging_PSNTmp.Name = vendOneTimeVendStagingDataContract_PSN.parmPersonFirstName() + ' ' +
                            vendOneTimeVendStagingDataContract_PSN.parmPersonMiddleName() + ' ' +
                            vendOneTimeVendStagingDataContract_PSN.parmPersonLastName();
                    }
                    else if (vendOneTimeVendStagingDataContract_PSN.parmVendRecordType() == enum2str(DirPartyBaseType::Organization))
                    {
                        vendOneTimeVendorStaging_PSNTmp.Name = vendOneTimeVendStagingDataContract_PSN.parmOrganizationName();
                    }

                    vendOneTimeVendorStaging_PSNTmp.insert();
                    errorMapEnumerator.next();
                }
                counter++;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>