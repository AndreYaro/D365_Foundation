<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchOrderSourceDocumentLineItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchOrderSourceDocLineItem</c> class provides the information to handle the
///    distributions and sub-ledger journal account entries for a purchase order line.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocumentLine_ProductOrder), SourceDocumentLine_ProductOrder::PurchaseOrderTotalsLine)]
public class PurchOrderSourceDocumentLineItem extends SourceDocumentLineItem
implements SourceDocumentLineItemIFinalize, SourceDocumentIPurchaseOrder
{
    PurchTable      purchTable;

    Amount          discountAmount;
    Amount          cashDiscountAmount;
    Amount          roundOffAmount;
    boolean         discountAmountInitialized;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateLegalEntityRecId</Name>
				<Source><![CDATA[
    protected LegalEntityRecId calculateLegalEntityRecId()
    {
        return purchTable.companyInfo().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSourceDocumentAmountMap</Name>
				<Source><![CDATA[
    protected SourceDocumentAmountMap calculateSourceDocumentAmountMap()
    {
        SourceDocumentAmountMap sourceDocumentAmountMap = SourceDocumentAmountMap::construct();
        SourceDocumentAmount    sourceDocumentAmount;

        this.initializeTotalAmounts();

        if (cashDiscountAmount)
        {
            sourceDocumentAmount = SourceDocumentAmount::newFromParameters(sourceDocumentLine, cashDiscountAmount,
                                                                        MonetaryAmount::CashDiscount);
            sourceDocumentAmountMap.insert(sourceDocumentAmount);
        }

        if (discountAmount)
        {
            sourceDocumentAmount = SourceDocumentAmount::newFromParameters(sourceDocumentLine, discountAmount,
                                                                        MonetaryAmount::TotalDiscountRounding);
            sourceDocumentAmountMap.insert(sourceDocumentAmount);
        }

        if (roundOffAmount)
        {
            sourceDocumentAmount = SourceDocumentAmount::newFromParameters(sourceDocumentLine, roundOffAmount,
                                                                        MonetaryAmount::RoundingAmount);
            sourceDocumentAmountMap.insert(sourceDocumentAmount);
        }

        return sourceDocumentAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAmountsAndTotalDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is used for calculating the amounts, which might be cached or not.
    /// </summary>
    /// <param name="_purchTable">
    /// <c>PurchTable</c> record for which is used for calculating amounts.
    /// </param>
    /// <returns>
    /// Calculated total discount amount.
    /// </returns>
    private Amount initializeAmountsAndTotalDiscount(PurchTable _purchTable)
    {
        Amount      calcTotalDiscount;
        container   amountsContainer;
        PurchTotals purchTotals;

        //Trying to retreive cache stored from calling the initializePurchTotalsDiscountCache method explicitly
        amountsContainer = PurchTotalRoundOffDiscountsCache::getCache(purchTable.RecId);

        if (amountsContainer == conNull())
        {
            boolean calculateTotalDiscount      = _purchTable.DiscPercent != 0.0;
            boolean calculateCashDiscountAmount = (_purchTable.CashDiscPercent && TaxParameters::canApplyCashDiscOnInvoice_ES());
            boolean calculateInclTax            = _purchTable.InclTax && PricesIncludeSalesTaxRecalculateTaxToggle::instance().isEnabled();
            boolean calculateRoundOff           = Currency::find(_purchTable.CurrencyCode).RoundOffPurch;

            if (calculateTotalDiscount || calculateCashDiscountAmount || calculateInclTax || calculateRoundOff)
            {
                purchTotals             = PurchTotals::newPurchTable(purchTable);
                purchTotals.calc(false, !(calculateCashDiscountAmount || calculateInclTax));

                //The amount container will not be persisted to cache
                amountsContainer = PurchOrderSourceDocumentLineItem::initializePurchTotalsDiscountCache(_purchTable, purchTotals, false);
            }
            else
            {
                amountsContainer = [0.0, 0.0, 0.0];
            }
        }

        [roundOffAmount, calcTotalDiscount, cashDiscountAmount] = amountsContainer;

        return calcTotalDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance variables.
    /// </summary>
    /// <param name="_sourceDocumentLineImplementation">
    /// A source document line implementation table.
    /// </param>
    /// <param name="_additionalInformation">
    /// A map to hold buffers of pre initiliazed objects need by the framework to the source document.
    /// </param>
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        PurchTableAllVersions purchTableAllVersions;

        if (_sourceDocumentLineImplementation.TableId == tableNum(PurchTableAllVersions))
        {
            purchTableAllVersions.data(_sourceDocumentLineImplementation);
            purchTable = PurchTable::find(purchTableAllVersions.PurchId);
        }
        else
        {
            purchTable.data(_sourceDocumentLineImplementation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTotalAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the totals amounts.
    /// </summary>
    private void initializeTotalAmounts()
    {
        Amount      lineTotalDiscount;
        Amount      calcTotalDiscount;
        PurchLine   purchLine;

        if (!discountAmountInitialized)
        {
            calcTotalDiscount = this.initializeAmountsAndTotalDiscount(purchTable);
            if (purchTable.DiscPercent)
            {
                while select * from purchLine
                    where purchLine.PurchId   == purchTable.PurchId
                       && purchLine.IsDeleted == NoYes::No
                {
                    lineTotalDiscount += purchLine.totalDiscountAmount();
                }

                discountAmount = - (calcTotalDiscount - lineTotalDiscount);
            }

            discountAmountInitialized        = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    public Description parmDescription()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTable</Name>
				<Source><![CDATA[
    public Common parmPurchTable(PurchTable _purchTable = purchTable)
    {
        purchTable = _purchTable;

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsTaxInChargeInputAmountIncluded</Name>
				<Source><![CDATA[
    public boolean parmIsTaxInChargeInputAmountIncluded()
    {
        return purchTable.InclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineFinalizedDate</Name>
				<Source><![CDATA[
    public AccountingDate parmSourceDocLineFinalizedDate()
    {
        return purchTable.FinalizeClosingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmTransactionCurrencyCode()
    {
        return purchTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePurchTotalsDiscountCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method for initializing the <c>PurchTotals</c> discount cached amounts.
    /// </summary>
    /// <param name="_purchTable">
    /// <c>PurchTable</c> class instance which will be used as key for caching values.
    /// </param>
    /// <param name="_purchTotals">
    /// <c>PurchTotals</c> class instance which is used for calculating amounts.
    /// </param>
    /// <param name="_persistCache">
    /// Boolean indicating whether to persist to cache or not - default is true.
    /// </param>
    /// <returns>
    /// <c>container</c> containing the amounts for: RoundOff, CalcTotalDiscount and CashDiscount.
    /// </returns>
    public static container initializePurchTotalsDiscountCache(PurchTable _purchTable, PurchTotals _purchTotals, boolean _persistCache = true)
    {
        Amount      roundOffAmount;
        Amount      calcTotalDiscount;
        Amount      cashDiscountAmount;

        roundOffAmount = _purchTotals.purchRoundOff();

        if (_purchTable.DiscPercent)
        {
            calcTotalDiscount = _purchTotals.endDisc();
        }

        if (_purchTable.CashDiscPercent && TaxParameters::canApplyCashDiscOnInvoice_ES())
        {
            cashDiscountAmount = _purchTotals.cashDiscAmount();
        }

        if (_persistCache)
        {
            PurchTotalRoundOffDiscountsCache::setCache(_purchTable.RecId, roundOffAmount, calcTotalDiscount, cashDiscountAmount);
        }

        return [roundOffAmount, calcTotalDiscount, cashDiscountAmount];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>