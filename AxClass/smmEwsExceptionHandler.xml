<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmEwsExceptionHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SmmEwsExceptionHandler</c> class manages exceptions from the exchange synchronization.
/// </summary>
public class SmmEwsExceptionHandler
{
    str exceptionMessage, stackTrace;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExceptionMessage</Name>
				<Source><![CDATA[
    public str parmExceptionMessage()
    {
        return exceptionMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStackTrace</Name>
				<Source><![CDATA[
    public str parmStackTrace()
    {
        return stackTrace;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>SmmEwsExceptionHandler</c> class instance to be used
    /// for handling exchange synchronization exceptions.
    /// </summary>
    /// <returns>Returns an instance of <c>SmmEwsExceptionHandler</c> class.</returns>
    public static smmEwsExceptionHandler construct()
    {
        return new smmEwsExceptionHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assembles stack trace and exception message and logs synchronization errors to the telemetry.
    /// </summary>
    /// <param name = "_methodName">A method name, which is a source of the exception.</param>
    /// <param name = "_exceptionType">A type of exception being thrown.</param>
    /// <param name = "_errorText">An error text to display; optional.</param>
    public static void logError(str _methodName, Exception _exceptionType, str _errorText = '')
    {
        error("@SYS85688" + _errorText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assembleClrExceptionMessageAndStackTrace</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exception message of the last clr exception thrown.
    /// </summary>
    private void assembleClrExceptionMessageAndStackTrace()
    {
        var perm = new InteropPermission(InteropKind::ClrInterop);
        perm.assert();

        System.Exception exception = CLRInterop::getLastException();
        if (exception)
        {
            ApplicationUnhandledExceptionLogger::logCLRException(exception);
            exceptionMessage = exception.get_Message();
            stackTrace = exception.ToString();

            System.Exception innerException = exception.get_InnerException();
            if (innerException)
            {
                exceptionMessage = innerException.get_Message();
                stackTrace = innerException.ToString();
            }
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assembleExceptionMessageAndStackTrace</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exception message of the last xpp exception thrown.
    /// </summary>
    private void assembleExceptionMessageAndStackTrace()
    {
        int i;
        container callStack = xSession::xppCallStack();
        exceptionMessage = infolog.text(infologLine());

        for (i=1; i <= conLen(callStack); i++)
        {
            stackTrace += conPeek(callStack, i);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>