<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQualityManagementCreateInvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventQualityManagementCreateInvent</c> class is a specialized version of the
///    <c>InventQualityManagementCreate</c> class that is responsible for quality order generation during
///    physical inventory update.
/// </summary>
class InventQualityManagementCreateInvent extends InventQualityManagementCreate
{
    InventTestUpdatedQuantityTmp    inventTestUpdatedQuantityTmp;
    boolean                         isUpdatedQuantityTempTablePassed;
    boolean                         isUpdatedQuantityTempTablePopulated;
    private boolean                 createQualityItemSamplingWork = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAdjustedReferenceInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the inventory dimensions for the referenced document taking into account
    /// the actual dimension values after physical inventory update.
    /// </summary>
    protected void calcAdjustedReferenceInventDimId()
    {
        InventDim                       inventDimBasic = InventDim::find(referenceType.inventDimId());
        InventTestUpdatedQuantityTmp    inventTestUpdatedQuantityTmpLocal;

        inventTestUpdatedQuantityTmpLocal.linkPhysicalTableInstance(inventTestUpdatedQuantityTmp);

        while select InventDimId from inventTestUpdatedQuantityTmpLocal
            group by InventDimId
        {
            InventDim inventDimRegistered = InventDim::find(inventTestUpdatedQuantityTmpLocal.InventDimId);
            inventDimBasic.clearMismatchingDimensions(inventDimRegistered);
        }

        adjustedReferenceInventDimId = InventDim::findOrCreate(inventDimBasic).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateQualityOrdersWithDiscrimination</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates separate quality orders based on quality association per unique combination of the
    /// inventory dimension subset specified in the related item sampling.
    /// </summary>
    /// <param name="_inventTestAssociationTable">
    /// A quality association.
    /// </param>
    /// <param name="_quantityToSample">
    /// A total quantity to be sampled.
    /// </param>
    /// <param name="_cwQuantityToSample">
    /// A total catch weight quantity to be sampled.
    /// </param>
    protected void generateQualityOrdersWithDiscrimination(
        InventTestAssociationTable  _inventTestAssociationTable,
        InventQty                   _quantityToSample,
        PdsCWInventQty              _cwQuantityToSample)
    {
        InventQty                       quantityToSample = _quantityToSample;
        PdsCWInventQty                  cwOrderQty;
        PdsCWInventQty                  totalUpdatedCWQuantity;
        PdsCWInventQty                  leftOverCWQuantity;
        PdsCWInventQty                  cwQuantityToSample = _cwQuantityToSample;
        boolean                         isCWItem = PdsGlobal::pdsIsCWItem(referenceType.itemId());
        InventQty                       minInventQty;
        InventQty                       leftOverQuantity = 0;
        Query                           query = new Query();
        InventDimParm                   inventDimParm;

        if (!isUpdatedQuantityTempTablePassed
            && !isUpdatedQuantityTempTablePopulated)
        {
            // only populate the temp table from the map if temp table itself was not passed from outside
            this.populateUpdatedQuantityTempTableFromMap();
        }
        InventQty totalUpdatedQuantity = InventTestUpdatedQuantityTmp::totalUpdatedQuantity(inventTestUpdatedQuantityTmp);

        if (isCWItem)
        {
            totalUpdatedCWQuantity = InventTestUpdatedQuantityTmp::pdsCWTotalUpdatedQuantity(inventTestUpdatedQuantityTmp);
            if (cwQuantityToSample > totalUpdatedCWQuantity)
            {
                InventTestUpdatedQuantityTmp::registerUpdatedQuantity(
                    inventTestUpdatedQuantityTmp,
                    this.adjustedReferenceInventDimId(),
                    PdsCatchWeight::inventQty(referenceType.itemId(), cwQuantityToSample - totalUpdatedCWQuantity),
                    cwQuantityToSample - totalUpdatedCWQuantity);
            }
            minInventQty = PdsCatchWeight::minInventQty(referenceType.itemId(), 1);
        }
        else
        // If full lot is sampled during partial update we need to register leftover quantity on the lot dimension
        if (quantityToSample > totalUpdatedQuantity)
        {
            leftOverQuantity = quantityToSample - totalUpdatedQuantity;
        }
        if (isCWItem && (cwQuantityToSample > totalUpdatedCWQuantity))
        {
            leftOverCWQuantity = cwQuantityToSample - totalUpdatedCWQuantity;
        }

        // Build a query on the temporary table with registered updated quantities
        QueryBuildDataSource qbdsInventTestUpdatedQuantityTmp = query.addDataSource(tablenum(InventTestUpdatedQuantityTmp));

        QueryBuildDataSource qbdsInventDim = qbdsInventTestUpdatedQuantityTmp.addDataSource(tablenum(InventDim));
        qbdsInventDim.relations(true);
        qbdsInventDim.joinMode(JoinMode::InnerJoin);
        qbdsInventDim.fetchMode(QueryFetchMode::One2One);

        // Add group by clauses for all inventory dimensions that are specified as discriminating
        inventDimParm.initFromInventDimFixed(inventItemSampling.DiscriminatingInventoryDimensions);
        inventDimParm.queryAddGroupByField(qbdsInventDim);

        qbdsInventTestUpdatedQuantityTmp.fields().addField(
            fieldnum(InventTestUpdatedQuantityTmp, UpdatedQuantity), SelectionField::Sum);
        qbdsInventTestUpdatedQuantityTmp.fields().addField(
            fieldnum(InventTestUpdatedQuantityTmp, PdsCWUpdatedQuantity), SelectionField::Sum);

        QueryRun queryRun = new QueryRun(query);
        // Force queryRun to fetch from the right temporary table
        queryRun.setRecord(inventTestUpdatedQuantityTmp);

        // Iterate all registered quantities
        while (queryRun.next())
        {
            InventTestUpdatedQuantityTmp inventTestUpdatedQuantityTmpLocal = queryRun.get(tablenum(InventTestUpdatedQuantityTmp));
            InventDim inventTestUpdatedQuantityTmpInventDim = queryRun.get(tablenum(InventDim));

            // Merge basic lot dimensions with inventory transaction dimensions
            InventDim inventDim = InventDim::find(
                this.adjustedReferenceInventDimId());
            inventDim.initFromInventDim(
                    inventTestUpdatedQuantityTmpInventDim,
                    inventDimParm.selectedDimFields());
            inventDim = InventDim::findOrCreate(inventDim);

            if (inventDim.InventDimId ==
                this.adjustedReferenceInventDimId()
            )
            {
                // Update these at the end to avoid full blocking to be created before all other blockings are created
                leftOverQuantity += inventTestUpdatedQuantityTmpLocal.UpdatedQuantity;
                leftOverCWQuantity += inventTestUpdatedQuantityTmpLocal.PdsCWUpdatedQuantity;
            }
            else
            {
                InventQty orderQty = min(abs(inventTestUpdatedQuantityTmpLocal.UpdatedQuantity), quantityToSample);
                if (isCWItem)
                {
                    cwOrderQty = min(abs(inventTestUpdatedQuantityTmpLocal.PdsCWUpdatedQuantity), cwQuantityToSample);
                    // There can be inventory transactions that have 0 CW quantity (because of the reservation).
                    // They shouldn't be sampled.
                    if (cwOrderQty == 0)
                    {
                        continue;
                    }

                    orderQty = max(orderQty, minInventQty);
                }

                // Track the LP and determine if we still need to create a Quality Order.
                if (referenceType.isItemAndWarehouseQualityManagementProcessEnabled())
                {
                    this.setMaxAllowedQuantity(inventDim.inventDimId);

                    if (maxAllowedQty > 0 && this.trackLP(_inventTestAssociationTable, inventDim))
                    {
                        this.createQualityOrder(
                            _inventTestAssociationTable,
                            orderQty,
                            inventDim.InventDimId,
                            cwOrderQty);
    
                        // Create Quality Item Sampling work
                        this.createQualityItemSamplingWork(_inventTestAssociationTable);
                    }
                }
                else if (this.mustCreateQualityOrderForInventDim(_inventTestAssociationTable, orderQty, inventDim.InventDimId, cwOrderQty))
                {
                    // Generate quality order
                    this.createQualityOrder(_inventTestAssociationTable,
                                            orderQty,
                                            inventDim.InventDimId,
                                            cwOrderQty);
                }

                cwQuantityToSample -= cwOrderQty;
                quantityToSample -= inventTestUpdatedQuantityTmpLocal.UpdatedQuantity;
            }
        }

        if (leftOverQuantity)
        {
            if (referenceType.isItemAndWarehouseQualityManagementProcessEnabled())
            {
                this.setMaxAllowedQuantity(this.adjustedReferenceInventDimId());
            }

            // Generate quality order
            this.createQualityOrder(_inventTestAssociationTable,
                                    min(abs(leftOverQuantity), quantityToSample),
                                    this.adjustedReferenceInventDimId(),
                                    cwQuantityToSample);

            if (referenceType.isItemAndWarehouseQualityManagementProcessEnabled()
                && maxAllowedQty > 0 
                && this.trackLP(_inventTestAssociationTable, InventDim::find(this.adjustedReferenceInventDimId())))
            {
                // Create Quality Item Sampling work
                this.createQualityItemSamplingWork(_inventTestAssociationTable);
            }

            cwQuantityToSample -= leftOverCWQuantity;
            quantityToSample -= leftOverQuantity;
        }
        if (isCWItem)
        {
            Debug::assert(cwQuantityToSample == 0);
        }
        else
        {
            Debug::assert(quantityToSample == 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTestUpdatedQuantityTmp</Name>
				<Source><![CDATA[
    public InventTestUpdatedQuantityTmp parmInventTestUpdatedQuantityTmp(InventTestUpdatedQuantityTmp _inventTestUpdatedQuantityTmp = inventTestUpdatedQuantityTmp)
    {
        inventTestUpdatedQuantityTmp = _inventTestUpdatedQuantityTmp;

        if (!prmisDefault(_inventTestUpdatedQuantityTmp) && _inventTestUpdatedQuantityTmp != null)
        {
            isUpdatedQuantityTempTablePassed = true;
        }

        return inventTestUpdatedQuantityTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateUpdatedQuantityTempTableFromMap</Name>
				<Source><![CDATA[
    private void populateUpdatedQuantityTempTableFromMap()
    {
        if (updatedQuantitiesPerDimMap != null)
        {
            MapEnumerator updatedQuantitiesMapEnumerator = updatedQuantitiesPerDimMap.getEnumerator();
            RecordInsertList updatedQuantitiesTempTableInsertList = new RecordInsertList(tableNum(InventTestUpdatedQuantityTmp),false,false,false,false,false,inventTestUpdatedQuantityTmp);
            while (updatedQuantitiesMapEnumerator.moveNext())
            {
                inventTestUpdatedQuantityTmp.InventDimId = updatedQuantitiesMapEnumerator.currentKey();
                [inventTestUpdatedQuantityTmp.UpdatedQuantity, inventTestUpdatedQuantityTmp.PdsCWUpdatedQuantity] = updatedQuantitiesMapEnumerator.currentValue();
                updatedQuantitiesTempTableInsertList.add(inventTestUpdatedQuantityTmp);
            }
            updatedQuantitiesTempTableInsertList.insertDatabase();
            isUpdatedQuantityTempTablePopulated = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventQualityManagementCreateInvent construct()
    {
        return new InventQualityManagementCreateInvent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventReceiptForTestRegistrator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the <c>InventQualityManagementCreateInvent</c> object when using an instance of <c>InventReceiptForTestRegistrator</c> class.
    /// </summary>
    /// <param name = "_inventQualityReferenceType">
    /// An instance of the <c>InventQualityReferenceType</c> class that contains the reference document.
    /// </param>
    /// <param name = "_inventReceiptForTestRegistrator">
    /// An instance of the <c>InventReceiptForTestRegistrator</c> class.
    /// </param>
    /// <returns>
    /// A new <c>InventQualityManagementCreateInvent</c> object.
    /// </returns>
    public static InventQualityManagementCreateInvent newFromInventReceiptForTestRegistrator(
        InventQualityReferenceType      _inventQualityReferenceType,
        InventReceiptForTestRegistrator _inventReceiptForTestRegistrator)
    {
        InventQualityManagementCreateInvent inventQualityManagementCreateInvent = InventQualityManagementCreateInvent::construct();
        inventQualityManagementCreateInvent.parmDocumentStatus(InventTestDocumentStatus::Registration);
        inventQualityManagementCreateInvent.parmExecution(InventTestExecution::None);
        inventQualityManagementCreateInvent.parmReferenceType(_inventQualityReferenceType);
        inventQualityManagementCreateInvent.parmUpdatedQuantity(_inventReceiptForTestRegistrator.parmTotalReceiptQuantity());
        inventQualityManagementCreateInvent.parmUpdatedCWQuantity(_inventReceiptForTestRegistrator.parmTotalReceiptCWQuantity());
        inventQualityManagementCreateInvent.parmUpdatedQuantitiesPerDimMap(_inventReceiptForTestRegistrator.parmUpdatedQuantitiesPerDimMap());
        inventQualityManagementCreateInvent.parmCreateQualityItemSamplingWork(_inventReceiptForTestRegistrator.parmCreateQualityItemSamplingWork());
        inventQualityManagementCreateInvent.parmMustBeQuarantineControlled(_inventReceiptForTestRegistrator.parmMustBeQuarantineControlled());
        return inventQualityManagementCreateInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQualityItemSamplingWork</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected void createQualityItemSamplingWork(InventTestAssociationTable _inventTestAssociationTable)
    {
        WHSInstrumentationLogger whsInstrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        using (var activityContext = whsInstrumentationLogger.qualityItemSamplingActivities().createSamplingWork())
        {
            whsInstrumentationLogger.logRecordInformation(_inventTestAssociationTable);

            int     samplingWorkCount;
            boolean createSamplingWork = this.shouldInboundQualityOrderWorkBeCreated(_inventTestAssociationTable);

            if (createSamplingWork)
            {
                InventItemSampling  itemSampling    = _inventTestAssociationTable.InventItemSampling();
                InventQty           runningQty      = workCreateQty;
                boolean             isCWItem        = PdsGlobal::pdsIsCWItem(referenceType.itemId());

                if (!isUpdatedQuantityTempTablePassed
                    && !isUpdatedQuantityTempTablePopulated)
                {
                    // only populate the temp table from the map if temp table itself was not passed from outside
                    this.populateUpdatedQuantityTempTableFromMap();
                }
    
                // Reference specified dimensions and discriminated dimensions must match the transactions work is created for.
                InventDimParm      inventDimParm;
                inventDimParm.initFromInventDim(InventDim::find(referenceType.inventDimId()));

                InventDimParm      inventDimParmDiscrim;
                InventDimFixedClass::inventDimFixed2InventDimParm(itemSampling.DiscriminatingInventoryDimensions, inventDimParmDiscrim);
                inventDimParm = InventDimParm::orParms(inventDimParm, inventDimParmDiscrim);
    
                WHSWorkCreateQualityItemSampling workCreate = WHSWorkCreateQualityItemSampling::newFromParms(_inventTestAssociationTable);
                workCreate.parmReferenceType(referenceType);
                workCreate.parmRelatedQualityOrderId(lastCreatedQualityOrder);
    
                RecordInsertList                    qualityOrderInventoryList = new RecordInsertList(tableNum(WHSQualityOrderInventory));
    
                // Need to get use new temp table to prevent memory reference issues with outer use of the tmpTable
                InventTestUpdatedQuantityTmp        tempInventTestUpdateQuantityTmp;
                tempInventTestUpdateQuantityTmp.linkPhysicalTableInstance(inventTestUpdatedQuantityTmp);
                InventDim                           inventDim;

                InventTable item = InventTable::find(referenceType.itemId());

                boolean keepLocationAndBelowDim = item.isItemSerialNumberActivated() || item.isItemBatchActivated();

                while select tempInventTestUpdateQuantityTmp
                    #inventDimJoin(tempInventTestUpdateQuantityTmp.inventDimId, inventDim, workInventDim, inventDimParm)
                {
                    if (runningQty <= 0)
                    {
                        break;
                    }

                    // Get difference between the qty we are updating for the specific dim and the amount that item sampling work has been created for already.
                    InventQty workDiffQty = (isCWItem ? tempInventTestUpdateQuantityTmp.PdsCWUpdatedQuantity : tempInventTestUpdateQuantityTmp.UpdatedQuantity)
                        - WHSWorkTable::calculateTotalQualityItemSamplingWork(referenceType.inventTransId(), tempInventTestUpdateQuantityTmp.InventDimId, referenceType.itemId(), keepLocationAndBelowDim);
    
                    if (workDiffQty <= 0)
                    {
                        break;
                    }

                    if (workDiffQty > runningQty)
                    {
                        workDiffQty = runningQty;
                        runningQty = 0;
                    }
                    else
                    {
                        runningQty -= workDiffQty;
                    }
    
                    workCreate.parmUpdateQty(workDiffQty);
                    workCreate.parmStartInventDim(tempInventTestUpdateQuantityTmp.InventDimId);

                    WHSLicensePlateId curLP = InventDim::find(tempInventTestUpdateQuantityTmp.InventDimId).LicensePlateId;

                    // Try to find workBuildId for exiting quality In Work if it's be created for part of this LP already.
                    WHSWorkBuildId workBuildId = WHSWorkTable::findQualityItemSamplingWorkBuildId(curLP);

                    if (workBuildId)
                    {
                        workCreate.parmWorkCreateId(workBuildId);
                    }
                    workBuildId = workCreate.createWork();
    
                    // Store location of current inventory for the quality order.
                    WHSQualityOrderInventory qualityOrderInventory;
                    qualityOrderInventory.QualityOrderId    = lastCreatedQualityOrder;
                    qualityOrderInventory.InventDimId       = tempInventTestUpdateQuantityTmp.InventDimId;
                    qualityOrderInventory.InventHandlingQty = workDiffQty;

                    qualityOrderInventoryList.add(qualityOrderInventory);
                    samplingWorkCount++;
                }

                qualityOrderInventoryList.insertDatabase();
            }

            whsInstrumentationLogger.qualityItemSamplingActivities().createdSamplingWork(activityContext, createSamplingWork, samplingWorkCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldInboundQualityOrderWorkBeCreated</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean shouldInboundQualityOrderWorkBeCreated(InventTestAssociationTable _inventTestAssociationTable)
    {
        return this.parmCreateQualityItemSamplingWork() && super(_inventTestAssociationTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateQualityItemSamplingWork</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal final boolean parmCreateQualityItemSamplingWork(boolean _createQualityItemSamplingWork = createQualityItemSamplingWork)
    {
        createQualityItemSamplingWork = _createQualityItemSamplingWork;
        return createQualityItemSamplingWork;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>