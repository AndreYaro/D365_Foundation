<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanReportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanReportController</c> class is the controller class for
/// <c>BundgetPlanListReport</c>, <c>BundgetPlanDimensionFocusTotalsReport</c> and <c>BudgetPlanBudgetTransAuditReport</c>
/// SSRS reports.
/// </summary>
public class BudgetPlanReportController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getValidationQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query used for pre-run validation.
    /// </summary>
    /// <returns>
    /// A <c>Query</c> object.
    /// </returns>
    private Query getValidationQuery()
    {
        Object                          contract;
        Query                           query;
        QueryBuildDataSource            queryBuildDataSource;
        QueryBuildRange                 queryBuildRangeScenario;
        QueryBuildRange                 queryBuildRangeEffectiveDate;
        BudgetPlanScenarioRecId         budgetPlanScenarioRecId;
        BudgetPlanLineEffectiveDate     effectiveFromDate;
        BudgetPlanLineEffectiveDate     effectiveToDate;

        query    = this.getFirstQuery();
        contract = this.parmReportContract().parmRdpContract();

        queryBuildDataSource = query.dataSourceTable(tableNum(BudgetPlanLine));

        effectiveFromDate       = contract.parmBudgetPlanLineEffectiveFromDate();
        effectiveToDate         = contract.parmBudgetPlanLineEffectiveToDate();

        queryBuildRangeEffectiveDate = SysQuery::findOrCreateRange(
                                        queryBuildDataSource,
                                        fieldNum(BudgetPlanLine, EffectiveDate));

        queryBuildRangeEffectiveDate.value(SysQuery::range(effectiveFromDate, effectiveToDate));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the opportunity for validation prior to running the report.
    /// </summary>
    /// <returns>
    /// A container containing two items. The first item is the <c>SrsReportPreRunState</c>
    /// enumeration. The second item is the message to show to the user.
    /// </returns>
    protected container preRunValidate()
    {
        int         warningLimit;
        container   validatedResult;
        int         rowCount;
        boolean     isCustType = false;
        Query       query;

        // Set the warning limit
        warningLimit = 5000;

        // Get the query with ranges applied
        query = this.getValidationQuery();

        // Using the query from the contract, count up to the warning limit + 1 since anything
        // over the warning limit will return the same warning.
        rowCount = QueryRun::getQueryRowCount(query, warningLimit + 1);

        if (rowCount > warningLimit)
        {
            validatedResult = [SrsReportPreRunState::Warning];
        }
        else
        {
            validatedResult = super();
        }

        return validatedResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BudgetPlanReportController</c> class.
    /// </summary>
    /// <param name="_args">
    /// Menu item arguments.
    /// </param>
    /// <returns>
    /// An instance of the <c>BudgetPlanReportController</c> class.
    /// </returns>
    public static BudgetPlanReportController construct(Args _args)
    {
        BudgetPlanReportController controller = new BudgetPlanReportController();

        controller.parmReportName(BudgetPlanReportController::getReportName(_args.menuItemName()));
        controller.parmArgs(_args);

        controller.prePromptModifyContract();
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the report name.
    /// </summary>
    /// <param name="_menuItemName">
    /// The <c>MenuItemName</c> value which is used to check the name of report.
    /// </param>
    /// <returns>
    /// The report name and the design name as <c>SRSCatalogItemName</c>.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws invalid action message if not called from appropriate menu item.
    /// </exception>
    public static SRSCatalogItemName getReportName(str _menuItemName)
    {
        SRSCatalogItemName reportName;

        switch (_menuItemName)
        {
            case menuitemOutputStr(BudgetPlanBudgetTransAuditReport):
                reportName = ssrsReportStr(BudgetPlanBudgetTransAuditReport, Report);
                break;

            default:
                throw error("@SYS300663");
        }

        return reportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BudgetPlanReportController::construct(_args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report query ranges.
    /// </summary>
    /// <param name="_query">
    /// Gets or Sets the _query object.
    /// </param>
    /// <param name="_reportMenuItemName">
    /// The name of menu item of the report.
    /// </param>
    public static void setRanges(Query _query, str _reportMenuItemName)
    {
        QueryBuildDataSource    qdbsBudgetPlanningProcess;
        QueryBuildRange         budgetPlanningProcessRange;

        qdbsBudgetPlanningProcess = _query.dataSourceTable(tableNum(BudgetPlanningProcess));

        // Adding range to filter the records for current ledger.
        budgetPlanningProcessRange = SysQuery::findOrCreateRange(
            qdbsBudgetPlanningProcess,
            fieldNum(BudgetPlanningProcess, Ledger));

        budgetPlanningProcessRange.status(RangeStatus::Hidden);
        budgetPlanningProcessRange.value(SysQuery::value(Ledger::current()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>