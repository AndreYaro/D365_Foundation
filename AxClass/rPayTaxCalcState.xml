<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTaxCalcState</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class implements integral type of the tax state calculation.
/// </summary>
class rPayTaxCalcState
{
    RPayTaxEmplSum      taxEmplSum;
    RPayTaxEmplTrans    taxEmplTrans;

    Map                 taxAmount2Refund; //stores amounts to be refunded (RPayTaxIncomeGroupCode, TaxAmount)
    Map                 deductionAmountNotRealized; //stores amounts not realized rights on deduction (RpayTaxDeductionCode, DeductionAmount)

    ReportPeriod_RU     prevPayPeriod; //pay period of previous calc state
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTaxAmount2Refund</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds tax amount to refund.
    /// </summary>
    /// <param name="_taxIncomeGroupCode">
    /// Income tax group code.
    /// </param>
    /// <param name="_corPeriod">
    /// The corrective period.
    /// </param>
    /// <param name="_branchId">
    /// The branch.
    /// </param>
    /// <param name="_taxAmount">
    /// The tax amount.
    /// </param>
    public void addTaxAmount2Refund(RpayTaxIncomeGroupCode  _taxIncomeGroupCode,
                                    RPayCorrectedPeriod     _corPeriod,
                                    BranchId_RU             _branchId,
                                    RPayAmount              _taxAmount)
    {
        if (_taxAmount)
        {
            taxAmount2Refund.insert([_taxIncomeGroupCode,
                                     _corPeriod,
                                     _branchId],
                                     this.getTaxAmount2Refund(_taxIncomeGroupCode,
                                                              _corPeriod,
                                                              _branchId) + _taxAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPeriodDependData</Name>
				<Source><![CDATA[
        private void createPeriodDependData()
    {
        taxAmount2Refund = new Map(Types::Container, Types::Real);
        deductionAmountNotRealized = new Map(Types::Integer, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmount2Refund</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax amount to refund.
    /// </summary>
    /// <param name="_taxIncomeGroupCode">
    /// Income tax group code.
    /// </param>
    /// <param name="_corPeriod">
    /// The corrective period.
    /// </param>
    /// <param name="_branchId">
    /// The branch.
    /// </param>
    /// <returns>
    /// An amount.
    /// </returns>
    public RPayAmount getTaxAmount2Refund(RpayTaxIncomeGroupCode    _taxIncomeGroupCode,
                                          RPayCorrectedPeriod       _corPeriod,
                                          BranchId_RU               _branchId)
    {
        RPayAmount taxAmount;

        if (taxAmount2Refund.exists([_taxIncomeGroupCode,
                                     _corPeriod,
                                     _branchId]))
        {
            taxAmount = taxAmount2Refund.lookup([_taxIncomeGroupCode,
                                                 _corPeriod,
                                                 _branchId]);
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDeductionAmountNotRealized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts deduction amount was not realized.
    /// </summary>
    /// <param name="_taxDeductionCode">
    /// The tax deduction code.
    /// </param>
    /// <param name="_deductionRightAmount">
    /// The deduction right amount.
    /// </param>
    public void insertDeductionAmountNotRealized(RpayTaxDeductionCode _taxDeductionCode, RPayAmount _deductionRightAmount)
    {
        if (_deductionRightAmount)
        {
            deductionAmountNotRealized.insert(_taxDeductionCode, this.removeDeductionAmountNotRealized(_taxDeductionCode) + _deductionRightAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        taxEmplSum.setTmp();
        taxEmplTrans.setTmp();

        this.createPeriodDependData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevPayPeriod</Name>
				<Source><![CDATA[
        public ReportPeriod_RU parmPrevPayPeriod(ReportPeriod_RU _prevPayPeriod = prevPayPeriod)
    {
        prevPayPeriod = _prevPayPeriod;

        return prevPayPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeDeductionAmountNotRealized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes deduction amount was not realized.
    /// </summary>
    /// <param name="_taxDeductionCode">
    /// The tax deduction code.
    /// </param>
    /// <returns>
    /// Removed deduction amount.
    /// </returns>
    public RPayAmount removeDeductionAmountNotRealized(RpayTaxDeductionCode _taxDeductionCode)
    {
        RPayAmount deductionRightAmount;

        if (deductionAmountNotRealized.exists(_taxDeductionCode))
        {
            deductionRightAmount = deductionAmountNotRealized.lookup(_taxDeductionCode);
            deductionAmountNotRealized.remove(_taxDeductionCode);
        }

        return deductionRightAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetInterChngYearData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resests inter change year data.
    /// </summary>
    public void resetInterChngYearData()
    {
        this.createPeriodDependData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount2RefundDeduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets deduction tax amounts to refund map.
    /// </summary>
    /// <returns>
    /// The <c>Map</c> of amounts.
    /// </returns>
    public Map taxAmount2RefundDeduction()
    {
        return taxAmount2Refund;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxEmplSumTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the temporary income tax calculation table record.
    /// </summary>
    /// <param name="_taxEmplSum">
    /// The <c>RPayTaxEmplSum</c> table record, set if spefied.
    /// </param>
    /// <returns>
    /// The <c>RPayTaxEmplSum</c> table record.
    /// </returns>
    public RPayTaxEmplSum taxEmplSumTmp(RPayTaxEmplSum _taxEmplSum = taxEmplSum)
    {
        taxEmplSum = _taxEmplSum;

        return taxEmplSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxEmplTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the temporary income tax calculation lines table record.
    /// </summary>
    /// <param name="_taxEmplTrans">
    /// The <c>RPayTaxEmplTrans</c> table record, set if spefied.
    /// </param>
    /// <returns>
    /// The <c>RPayTaxEmplTrans</c> table record.
    /// </returns>
    public RPayTaxEmplTrans taxEmplTransTmp(RPayTaxEmplTrans _taxEmplTrans = taxEmplTrans)
    {
        taxEmplTrans = _taxEmplTrans;
        return taxEmplTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>