<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAssetTaxInfoValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class helps to get the date effective value for the tax information fields.
/// </summary>
/// <remarks>
/// First this class searches for history records to get values.
/// If no history record exists, the value is taken from the initial table field (RAssetTable for example).
/// </remarks>
public class RAssetTaxInfoValue
{
    private RAssetTable assetTable;
    private RAssetDistribution assetDistribution;
    private TransDate periodDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDenominatorShare</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets denominator for the asset owned share.
    /// </summary>
    /// <returns>
    /// A denominator for the share.
    /// </returns>
    public RAssetOwnedShare getDenominatorShare()
    {
        RAssetOwnedShare denominatorShare;

        if (RAssetTaxAllowanceHistory::nonEmptyOwnedShareExists(assetTable.AccountNum, assetDistribution.RecId))
        {
            denominatorShare = RAssetTaxAllowanceHistory::findLastWithDistribution(periodDate, assetTable.AccountNum, false, assetDistribution.RecId).DenominatorShareOwned;
        }
        else
        {
            denominatorShare = assetDistribution
                ? assetDistribution.DenominatorShare
                : assetTable.DenominatorShare;
        }

        return denominatorShare;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLandCadastralNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a land cadastral number.
    /// </summary>
    /// <returns>
    /// A land cadastral number.
    /// </returns>
    public LandCadastralNum_W getLandCadastralNum()
    {
        LandCadastralNum_W cadastrialNum;

        if (RAssetTaxAllowanceHistory::nonEmptyLandCadastrialNumberExists(assetTable.AccountNum))
        {
            cadastrialNum = RAssetTaxAllowanceHistory::findLast(periodDate, assetTable.AccountNum).LandCadastralNum;
        }
        else
        {
            cadastrialNum = assetTable.LandCadastralNum;
        }

        return cadastrialNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLandType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a land type.
    /// </summary>
    /// <returns>
    /// A land type.
    /// </returns>
    public LandType_W getLandType()
    {
        LandType_W landType;

        if (RAssetTaxAllowanceHistory::nonEmptyLandTypeExists(assetTable.AccountNum))
        {
            landType = RAssetTaxAllowanceHistory::findLast(periodDate, assetTable.AccountNum).LandType;
        }
        else
        {
            landType = assetTable.LandType;
        }

        return landType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumeratorShare</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets numerator for the asset owned share.
    /// </summary>
    /// <returns>
    /// A numerator for the share.
    /// </returns>
    public RAssetOwnedShare getNumeratorShare()
    {
        RAssetOwnedShare numberatorShare;

        if (RAssetTaxAllowanceHistory::nonEmptyOwnedShareExists(assetTable.AccountNum, assetDistribution.RecId))
        {
            numberatorShare = RAssetTaxAllowanceHistory::findLastWithDistribution(periodDate, assetTable.AccountNum, false, assetDistribution.RecId).NumeratorShareOwned;
        }
        else
        {
            numberatorShare = assetDistribution
                ? assetDistribution.NumeratorShare
                : assetTable.NumeratorShare;
        }

        return numberatorShare;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRoomCadastralNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a room cadastral number.
    /// </summary>
    /// <returns>
    /// A room cadastral number.
    /// </returns>
    public RoomCadastralNum_RU getRoomCadastralNum()
    {
        RoomCadastralNum_RU cadastralNum;

        if (RAssetTaxAllowanceHistory::nonEmptyRoomCadastrialNumberExists(assetTable.AccountNum))
        {
            cadastralNum = RAssetTaxAllowanceHistory::findLast(periodDate, assetTable.AccountNum).RoomCadastralNum;
        }
        else
        {
            cadastralNum = assetTable.RoomCadastralNum;
        }

        return cadastralNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax base.
    /// </summary>
    /// <returns>
    /// A tax base.
    /// </returns>
    public TaxBase getTaxBase()
    {
        TaxBase taxBase;

        if (RAssetTaxAllowanceHistory::nonZeroTaxBaseExists(assetTable.AccountNum, assetDistribution.RecId))
        {
            taxBase = RAssetTaxAllowanceHistory::findLastWithDistribution(periodDate, assetTable.AccountNum, false, assetDistribution.RecId).TaxBase;
        }
        else
        {
            taxBase = assetDistribution
                ? assetDistribution.TaxBase
                : assetTable.TaxBase;
        }

        return taxBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetDistribution</Name>
				<Source><![CDATA[
    public RAssetDistribution parmAssetDistribution(RAssetDistribution _assetDistribution)
    {
        assetDistribution = _assetDistribution;
        return assetDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetTable</Name>
				<Source><![CDATA[
    public RAssetTable parmAssetTable(RAssetTable _assetTable)
    {
        assetTable = _assetTable;
        return assetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodDate</Name>
				<Source><![CDATA[
    public TransDate parmPeriodDate(TransDate _periodDate)
    {
        periodDate = _periodDate;
        return periodDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instanciates a new one <c>RAssetTaxInfoValue</c> based on input parameters.
    /// </summary>
    /// <param name = "_assetId">The fixed asset id.</param>
    /// <param name = "_assetDistributionRecId">The destribution id.</param>
    /// <param name = "_periodDate">The period date.</param>
    /// <returns>A new one instance of the <c>RAssetTaxInfoValue</c> class.</returns>
    public static RAssetTaxInfoValue newParameters(RAssetId _assetId, RefRecID _assetDistributionRecId, TransDate _periodDate)
    {
        RAssetTaxInfoValue assetTaxInfoValue = new RAssetTaxInfoValue();

        assetTaxInfoValue.parmAssetTable(RAssetTable::find(_assetId));
        assetTaxInfoValue.parmAssetDistribution(RAssetDistribution::findRecId(_assetDistributionRecId));
        assetTaxInfoValue.parmPeriodDate(_periodDate);

        return assetTaxInfoValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>