<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOnlineChannelActionHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailOnlineChannelActionHandler</c> extends runbase class used to set up the online channel stores.
/// </summary>
public class RetailOnlineChannelActionHandler extends RunBase
{
    #RetailChannel
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateChannelPublishingTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates publishing data for the specified channel in the specified table.
    /// </summary>
    /// <param name="_channelId">
    /// Reference RecID of the channel to publish.
    /// </param>
    public void populateChannelPublishingTables(RefRecId _channelId)
    {
        RetailPubRetailOnlineChannelTable::publishChannel(_channelId);
        RetailPubRetailOnlineChannelLanguages::publishChannel(_channelId);
        RetailPubChannelAttribute::publishChannel(_channelId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>publish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publishes the channel and sets the publish status, populates the publishing data for the specified channel.
    /// </summary>
    /// <param name="_channel">
    /// Record of the <c>RetailChannelTable</c> table holding the channel information.
    /// </param>
    /// <param name="_calledFromForm">
    /// Boolean value set to true.
    /// </param>
    private void publish(RetailChannelTable _channel, boolean _calledFromForm = true)
    {
        RetailOnlineChannelPublishStatus publishStatus;
        RetailInternalOrgUpdateChannel updateChannel;
        DialogButton dialogButton;

        if (_channel.RecId == 0)
        {
            // No associated record was found.
            return;
        }

        publishStatus = RetailOnlineChannelPublishStatus::findByChannel(_channel.RecId, true);
        if (publishStatus.RecId == 0)
        {
            // No publish status
            return;
        }

        if (publishStatus.canTransiteTo(RetailOnlineChannelPublishStatusType::InProgress))
        {
            if (this.validatePublish(_channel))
            {
                if (_calledFromForm)
                {
                    dialogButton = Box::yesNo("@RET261337", DialogButton::No, "@RET261331");
                }

                if (!_calledFromForm || dialogButton == DialogButton::Yes)
                {
                    ttsbegin;

                    // Populate category attributes
                    if (RetailMerchandisingKillSwitch::enableCategoryAttributesAndCategoryAttributeGroups())
                    {
                        RetailChannelCategoryAttribute::populateChannelCategoryAttributes(_channel.RecId);
                    }

                    // Populate product attribute metadata
                    updateChannel = RetailInternalOrgUpdateChannel::newFromChannel(_channel.RecId);
                    updateChannel.populateMetadata();

                    // Populate publishing tables
                    this.populateChannelPublishingTables(_channel.RecId);

                    // Change publishing status
                    publishStatus.PublishStatus = RetailOnlineChannelPublishStatusType::InProgress;
                    publishStatus.update();

                    ttscommit;
                }
            }
        }
        else
        {
             warning("@RET261338");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePublish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the channel to be published or not by checking for the CategoryHierarchy ID for the Specified channel.
    /// </summary>
    /// <param name="_channel">
    /// Record of the <c>RetailChannelTable</c> table holding the channel information.
    /// </param>
    /// <returns>
    /// Returns true if channel is validated to publish; else false.
    /// </returns>
    private boolean validatePublish(RetailChannelTable _channel)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides an entry point for the <c>RetailOnlineChannelActionHandler</c> class when it is called
    /// from a menu item
    /// </summary>
    /// <param name="_args">
    /// The arguments for the <c>RetailOnlineChannelActionHandler</c> class.
    /// </param>
    /// <param name="_calledFromForm">
    /// A Boolean value that indicates whether the form is displayed.
    /// </param>
    public static void main(Args _args, boolean _calledFromForm = true)
    {
        RetailChannelTable channel = _args.record();
        RetailOnlineChannelAction action = _args.parmEnum();
        RetailOnlineChannelActionHandler actionhanlder = new RetailOnlineChannelActionHandler();

        if (!channel)
        {
            // No associated record was found.
            info("@RET261327");
            return;
        }

        // Now there is only one action (publish) here, later we may do different things based on action type
        switch (action)
        {
            case RetailOnlineChannelAction::Publish:
                actionhanlder.publish(channel, _calledFromForm);
                break;

            default:
                // Not supported action
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>