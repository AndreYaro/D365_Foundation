<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlRebuildSummaryAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
/// <summary>
/// Data maintenance action to rebuild BudgetSourceTrackingSummary.
/// </summary>
[Export(identifierStr(Dynamics.AX.Application.IDataMaintenanceAction))]
internal class BudgetControlRebuildSummaryAction implements IDataMaintenanceAction, IDataMaintenanceOpportunity, IDataMaintenanceActionParameters
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@Budget:BudgetControlRebuildSummaryCaption");
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceDescription description()
    {
        return literalStr("@Budget:BudgetControlRebuildSummaryDescription");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabled()
    {
        return BudgetControlConfiguration::isAnyBudgetControlEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>category</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionCategory category()
    {
        return DataMaintenanceActionCategory::DataCorruption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ModuleAxapta module()
    {
        return ModuleAxapta::Budget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tasks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Array tasks()
    {
        Array tasks = new Array(Types::String);
        tasks.value(1, classStr(BudgetControlRebuildSummaryTask));
        return tasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>opportunityResult</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceOpportunityResult opportunityResult()
    {
        DataMaintenanceOpportunityResult scanResult = DataMaintenanceOpportunityResult::construct();
        scanResult.parmOpportunityFound(this.existsOppotunityForDataMaintenanceInBudgetControl());

        return scanResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>automaticallySchedule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean automaticallySchedule()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionParameters parameters()
    {
        DataMaintenanceActionParameters actionParameters = new DataMaintenanceActionParameters();
        actionParameters.IsSystemAction = true;

        return actionParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOppotunityForDataMaintenanceInBudgetControl</Name>
				<Source><![CDATA[
    private boolean existsOppotunityForDataMaintenanceInBudgetControl()
    {
        return this.isBudgetSourceTrackingSummaryOutOfSync();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetSourceTrackingSummaryOutOfSync</Name>
				<Source><![CDATA[
    private boolean isBudgetSourceTrackingSummaryOutOfSync()
    {
        // This method checks out of sync by checking disparity between BudgetSourceTrackingSummary and BudgetSourceDetailSummaryView.
        // If any record is detected, it means out of sync and rebuilding summary process is needed.
        boolean isBudgetSourceTrackingSummaryOutOfSync;

        BudgetControlTrackingSummaryRebuildCheckView budgetControlTrackingSummaryRebuildCheckView;

        // Set a range of tracking date between the beginning of last year and the end of this year
        // as more than two years old budget data would not be changed
        // and by setting a range of limited period, a query performance in actual processing is better.
        int currentYear = year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        TransDate fromDate = mkDate(1, 1, currentYear - 1);
        TransDate toDate = mkDate(31, 12, currentYear);

        // Check if there is any record having any value in VarianceAmountSum 
        // which is difference in accounting currency amounts between BudgetSourceTrackingSummary and BudgetSourceDetailSummaryView
        // Those records need to be either deleted or updated. 
        // Intentionally firstonly is not used here as it was found that a performance got worse when firstonly was used.
        select TrackingSummaryRecId from budgetControlTrackingSummaryRebuildCheckView
            where budgetControlTrackingSummaryRebuildCheckView.VarianceAmountSum != 0
                && budgetControlTrackingSummaryRebuildCheckView.TrackingDate >= fromDate
                && budgetControlTrackingSummaryRebuildCheckView.TrackingDate <= toDate;

        isBudgetSourceTrackingSummaryOutOfSync = budgetControlTrackingSummaryRebuildCheckView.TrackingSummaryRecId != 0;

        if(!isBudgetSourceTrackingSummaryOutOfSync)
        {
            BudgetControlDetailSummaryRebuildCheckView budgetControlDetailSummaryRebuildCheckView;

            // Check if there is any record existed not in BudgetSourceTrackingSummary but in BudgetSourceDetailSummaryView.
            // Those records need to be inserted to BudgetSourceTrackingSummary. 
            // Intentionally firstonly is not used here as it was found that a performance got worse when firstonly was used.
            select AccountingCurrencyAmount from budgetControlDetailSummaryRebuildCheckView
                where budgetControlDetailSummaryRebuildCheckView.TrackingSummaryRecId == 0
                    && budgetControlDetailSummaryRebuildCheckView.AccountingCurrencyAmount != 0
                    && budgetControlDetailSummaryRebuildCheckView.TrackingDate >= fromDate
                    && budgetControlDetailSummaryRebuildCheckView.TrackingDate <= toDate;

            isBudgetSourceTrackingSummaryOutOfSync = budgetControlDetailSummaryRebuildCheckView.AccountingCurrencyAmount != 0;
        }

        return isBudgetSourceTrackingSummaryOutOfSync;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>