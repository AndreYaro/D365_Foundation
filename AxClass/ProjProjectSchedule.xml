<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProjectSchedule</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjProjectSchedule extends ProjProjectComponent
{
    private ProjPlanVersion rootPlanVersion;
    private HierarchyIdBase versionOneHierarchyId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(ProjTable _projTable)
    {
        projTable = _projTable;
        super(_projTable);
        if (this.hierarchyId)
        {
            versionOneHierarchyId = ProjPlanVersionDetail::findLatestByHierarchyId(this.hierarchyId, false, false, ProjPlanVersionType::PublishedCurrent).HierarchyId;
            rootPlanVersion = ProjPlanVersion::getRootTask(versionOneHierarchyId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjProjectSchedule construct(ProjTable _projTable)
    {
        return new ProjProjectSchedule(_projTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalActualEffort</Name>
				<Source><![CDATA[
    /// <summary>
    /// computes the total actual effort for the project.
    /// </summary>
    /// <returns>Total actual effort logged against this project</returns>
    public Hours calculateTotalActualEffort()
    {
        ProjTaskActualEffortView    taskActualEffortView;
        Hours                       totalEffort = 0;

        select sum(TotalEffort) from taskActualEffortView
            where taskActualEffortView.ProjId == projTable.ProjId;

        return taskActualEffortView.totalEffort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getScheduleProgressPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get scheduling progress percentage.
    /// </summary>
    /// <param name = "_effortEAC">Estimated effort.</param>
    /// <param name = "_effortActual">Actual effort.</param>
    /// <returns>Prgress percentage as integer.</returns>
    public int getScheduleProgressPercent(Hours _effortEAC, Hours _effortActual)
    {
        int percentage;
        if (_effortEAC == 0 || (_effortActual > _effortEAC))
        {
            percentage = 100;
        }
        else
        {
            percentage = real2int(_effortActual/_effortEAC * 100);
        }
        return percentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalEffortAtComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// computes the total effort at complete for this project
    /// </summary>
    /// <returns>The effort at complete values at the root node</returns>
    public Hours calculateTotalEffortAtComplete()
    {
        Hours totalEffortAtComplete = 0.0;

        if (rootPlanVersion)
        {
            totalEffortAtComplete = rootPlanVersion.TaskEffortAtComplete;
        }

        return totalEffortAtComplete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCompletionByToday</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total effort that must have been completed by today as per the plan (including today)
    /// </summary>
    /// <returns>The total effort in hours.</returns>
    public Hours calculateCompletionByToday()
    {
        Hours                   expectedHours;
        ProjPlanVersion         planVersion;

        while select TaskFinishDate, TaskStartDate, TaskEffort, TaskDuration from planVersion
            where planVersion.HierarchyId == versionOneHierarchyId
            && planVersion.EndNode == FalseTrue::True
        {
            date taskEndDate    = planVersion.TaskFinishDate;
            date taskStartDate  = planVersion.TaskStartDate;
            date curDay = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            if (taskEndDate <= curDay)
            {
                expectedHours += planVersion.TaskEffort;
            }
            else if (curDay >= taskStartDate && curDay < taskEndDate)
            {
                real hoursPerDay = planVersion.TaskEffort / planVersion.TaskDuration;
                int daysSinceStartDate = (DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) - taskStartDate) + 1;
                expectedHours += daysSinceStartDate * hoursPerDay;
            }
        }
        
        return decround(expectedHours, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalPlannedEffort</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the total planned hours from the WBS Tree root node.
    /// </summary>
    /// <returns>
    /// The total planned hours.
    /// </returns>
    public Hours calculateTotalPlannedEffort()
    {
        Hours totalEffort;

        if (rootPlanVersion)
        {
            totalEffort = rootPlanVersion.TaskEffort;
        }

        return totalEffort;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>