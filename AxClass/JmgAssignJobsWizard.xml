<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgAssignJobsWizard</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgAssignJobsWizard</c> class supports the Time and attendance
/// configuration wizard.
/// </summary>
public class JmgAssignJobsWizard extends SysWizard
{
    boolean putJobsOnOperations;
    boolean putJobsOnProjects;
    boolean putJobsOnProjActivities;
    boolean putJobsOnHRMAbsenceCodeGroups;
    boolean putJobsOnHRMAbsenceCodes;
    boolean putSignInOutActivity;
    boolean putSystemActivity;
    boolean parametersUpdate;
    Integer lastTabno;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ensureActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that a <c>JmgIpcActivity</c> record with the specified type exists.
    /// </summary>
    /// <param name="signType">
    /// The type to check existence for.
    /// </param>
    /// <param name="_actId">
    /// The activity ID to use when creating a <c>JmgIpcActivity</c> record for the specified type.
    /// </param>
    /// <param name="describe">
    /// The description to use when creating a <c>JmgIpcActivity</c> record for the specified type.
    /// </param>
    /// <remarks>
    /// If the <c>JmgIpcActivity</c> record does not exist, it is created.
    /// </remarks>
    private void ensureActivity(JmgSignInOut signType, Description _actId, Description describe = '')
    {
        JmgIpcActivity      ipcActivity;
        JmgIpcCategory      ipcCategory;
        Integer             cnt;
        JmgIpcActivityId    actId;
        int                 activityStringMaxSize = strlen(strmax(extendedtypestr(JmgIpcActivityId)));

        describe    = describe ? describe : _actId;

        // truncate the input string to fit JmgIpcActivityId
        actId       = subStr(strrem(_actId,' -/\\'), 1, activityStringMaxSize);

        setprefix(actId);

        select ipcActivity
            where ipcActivity.SignInOut == signType;

        if (! ipcActivity)
        {
            ipcCategory = this.ensureSystemCategory();

            while ((select firstonly RecId from jmgIpcActivity where jmgIpcActivity.Activity == actId).RecId)
            {
                cnt++;
                actId = substr(actId,1,activityStringMaxSize-strlen(int2str(cnt)))+int2str(cnt);
            }

            this.insertActivity(actId, describe, ipcCategory, signType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureBreakActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that a break <c>JmgIpcActivity</c> record with the specified activity ID exists.
    /// </summary>
    /// <param name="_activityId">
    /// The activity ID to use when creating a <c>JmgIpcActivity</c> record.
    /// </param>
    /// <param name="_description">
    /// The description to use when creating a <c>JmgIpcActivity</c> record.
    /// </param>
    /// <param name="_ipcCategory">
    /// The <c>JmgIpcCategory</c> record to use when creating a <c>JmgIpcActivity</c> record.
    /// </param>
    /// <remarks>
    /// If the <c>JmgIpcActivity</c> record does not exist, it is created.
    /// </remarks>
    private void ensureBreakActivity(JmgIpcActivityId _activityId, JmgIpcActivityName _description, JmgIpcCategory _ipcCategory)
    {
        JmgIpcActivity ipcActivity;

        select firstonly ipcActivity
            where ipcActivity.Category == _ipcCategory.Category && ipcActivity.Activity == _activityId;

        if (!ipcActivity)
        {
            this.insertActivity(_activityId, _description, _ipcCategory, JmgSignInOut::Job);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a new <c>JmgIpcActivity</c> record.
    /// </summary>
    /// <param name="_activityId">
    /// The activity ID to use when creating a <c>JmgIpcActivity</c> record.
    /// </param>
    /// <param name="_description">
    /// The description to use when creating a <c>JmgIpcActivity</c> record.
    /// </param>
    /// <param name="_ipcCategory">
    /// The <c>JmgIpcCategory</c> record to use when creating a <c>JmgIpcActivity</c> record.
    /// </param>
    /// <param name="_signInOut">
    /// The <c>JmgSignInOut</c> type to use when creating a <c>JmgIpcActivity</c> record.
    /// </param>
    private void insertActivity(JmgIpcActivityId _activityId, JmgIpcActivityName _description, JmgIpcCategory _ipcCategory, JmgSignInOut _signInOut)
    {
        JmgIpcActivity ipcActivity;

        ttsbegin;

        ipcActivity.initValue(true);
        ipcActivity.Activity    = _activityId;
        ipcActivity.SignIn      = NoYes::Yes;
        ipcActivity.Category    = _ipcCategory.Category;
        ipcActivity.Type        = _ipcCategory.Type;
        ipcActivity.SignInOut   = _signInOut;
        ipcActivity.Description = _description;
        ipcActivity.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureSystemCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that a <c>JmgIpcCategory</c> record for system activities exist.
    /// </summary>
    /// <returns>
    /// The <c>JmgIpcCategory</c> record, which represents the category containing system activities.
    /// </returns>
    private JmgIpcCategory ensureSystemCategory()
    {
        JmgIpcCategory  ipcCategory;

        ttsbegin;

        select firstonly ipcCategory
            where ipcCategory.Category == "@SYS4278";
        if (! ipcCategory)
            select ipcCategory
                where ipcCategory.Category == "@SYS15320";
        if (! ipcCategory)
            select ipcCategory
                where ipcCategory.Category == "@SYS39151";

        if (! ipcCategory)
        {
            ipcCategory.Category    = "@SYS4278";
            ipcCategory.Description = "@SYS6698";
            ipcCategory.insert();
        }

        ttscommit;

        return ipcCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureBreakCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that a <c>JmgIpcCategory</c> record for break activities exist.
    /// </summary>
    /// <returns>
    /// The <c>JmgIpcCategory</c> record, which represents the category containing break activities.
    /// </returns>
    private JmgIpcCategory ensureBreakCategory()
    {
        JmgIpcCategory  ipcCategory;

        ttsbegin;

        select firstonly ipcCategory
            where ipcCategory.Category == "@SCM:Breaks";

        if (!ipcCategory)
        {
            ipcCategory.Category    = "@SCM:Breaks";
            ipcCategory.Description = "@SCM:BreaksDescription";
            ipcCategory.Type        = JmgStampTypeEnum::Break;
            ipcCategory.insert();
        }

        ttscommit;

        return ipcCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the form name, which contains the design for the Time and attendance configuration wizard.
    /// </summary>
    /// <returns>
    /// The form name, which contains the design for the Time and attendance configuration wizard.
    /// </returns>
    formName formName()
    {
        return formstr(JmgAssignJobsWizard);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Switches the displayed tab on the wizard to the next tab.
    /// </summary>
    void next()
    {
        super();

        if (this.curTab() == numberOfTabs)
        {
            formRun.endUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parametersUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes parameters that are used in time and attendance with default values.
    /// </summary>
    void parametersUpdate()
    {
        JmgResetParametersToDefault             resetSFCParams;
        JmgResetProdStartupParametersToDefault  resetProdStartupParams;
        JmgResetProdFinishedParametersToDefault resetProdFinishedParams;

        // Create default values for parameters, if they don't already exist.

        if (!JmgParameters::find())
        {
            resetSFCParams = new JmgResetParametersToDefault();
            resetSFCParams.runOperation();
        }

        if (!ProdParmStartUp::find(tablestr(JmgParameters),JmgParameters::version()))
        {
            resetProdStartupParams = new JmgResetProdStartupParametersToDefault();
            resetProdStartupParams.runOperation();
        }

        if (!ProdParmReportFinished::find(tablestr(JmgParameters),JmgParameters::version()))
        {
            resetProdFinishedParams = new JmgResetProdFinishedParametersToDefault();
            resetProdFinishedParams.runOperation();
        }

        if (! JmgTimeCalcParmeters::checkTimeParmsSetup(false))
        {
            JmgTimeCalcParmeters::restoreDefaultSetup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>putJobsOnHRMAbsence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns job IDs to existing absence code groups, and absence codes.
    /// </summary>
    void putJobsOnHRMAbsence()
    {
        HRMAbsenceCodeGroup hrmAbsenceCodeGroup;
        HRMAbsenceCode      hrmAbsenceCode;

        ttsbegin;

        if (putJobsOnHRMAbsenceCodeGroups)
        {
            while select forupdate hrmAbsenceCodeGroup
                where hrmAbsenceCodeGroup.JmgJobId == ''
            {
                hrmAbsenceCodeGroup.JmgJobId    = NumberSeq::newGetNum(JmgParameters::numRefIpcActivityId()).num();
                hrmAbsenceCodeGroup.update();
            }
        }

        if (putJobsOnHRMAbsenceCodes)
        {
            while select forupdate hrmAbsenceCode
                where hrmAbsenceCode.JmgJobId   == ''
            {
                hrmAbsenceCode.JmgJobId    = NumberSeq::newGetNum(JmgParameters::numRefIpcActivityId()).num();
                hrmAbsenceCode.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>putJobsOnOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns job IDs to existing <c>ProdRoute</c> records.
    /// </summary>
    private void putJobsOnOperations()
    {
        ProdRoute       prodRoute;

        ttsbegin;
        while select forupdate prodRoute
            where prodRoute.OprFinished == NoYes::No &&
                  ((! prodRoute.JobIdProcess) || (!prodRoute.JobIdSetup))
        {
            prodRoute.JobIdSetup   = NumberSeq::newGetNum(JmgParameters::numRefIpcActivityId()).num();
            prodRoute.JobIdProcess = NumberSeq::newGetNum(JmgParameters::numRefIpcActivityId()).num();
            prodRoute.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>putJobsOnProjects</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns job IDs to existing <c>ProjTable</c>, <c>ProjActivity</c>, and <c>ProjForecastEmpl</c>
    ///    records.
    /// </summary>
    void putJobsOnProjects()
    {
        ProjTable       projTable;
        ProjActivity    projActivity;

        // hierarchy
        Query                   query   = new Query();
        QueryRun                queryRun;
        container               con;
        // hierarchy

        ttsbegin;

        while select forupdate projTable
            where projTable.Status != ProjStatus::Completed
        {
            if (putJobsOnProjects && !projTable.JobId)
            {
                projTable.reread(); // the project might have been updated since running the query if its parent project was updated
                projTable.JobId = NumberSeq::newGetNum(JmgParameters::numRefIpcActivityId()).num();
                projTable.update();
            }

            // hierarchy
            if (putJobsOnProjActivities)
            {
                con = ProjActivity::queryActivities(tablenum(ProjTable), projTable.RecId);
                query = new Query(con);

                query.dataSourceTable(tablenum(ProjActivity)).addRange(fieldnum(ProjActivity, JobId)).value(SysQuery::valueEmptyString());
                queryRun = new QueryRun(query);
                while (queryRun.next())
                {
                    projActivity = queryRun.get(tablenum(ProjActivity));
                    projActivity.selectForUpdate(true);
                    projActivity.JobId      = NumberSeq::newGetNum(JmgParameters::numRefIpcActivityId()).num();
                    projActivity.update();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>putSignInOutActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates clock in, clock out, start assistance, stop assistance, change pilot, and stop break system activities.
    /// </summary>
    void putSignInOutActivity()
    {
        ttsbegin;

        this.ensureActivity(JmgSignInOut::SignIn,"@SYS38409");
        this.ensureActivity(JmgSignInOut::SignOut,"@SYS38411");
        this.ensureActivity(JmgSignInOut::StartTeam,"@SYS39228");
        this.ensureActivity(JmgSignInOut::StopTeam,"@SYS39229");
        this.ensureActivity(JmgSignInOut::SubmitPilote,"@SYS39248");
        this.ensureActivity(JmgSignInOut::StopBreak,"@SYS39233");

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>putSystemActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the System waiting system activity.
    /// </summary>
    public void putSystemActivity()
    {
        JmgIpcCategory  ipcCategory;
        JmgIpcActivity  ipcActivity;
        JmgParameters   jmgParameters;

        ttsbegin;

        jmgParameters = JmgParameters::find(true);

        ipcActivity = JmgIpcActivity::findJobId(JmgIpcActivity::findSignTypeJobId(JmgSignInOut::SysIndirect), true);

        if (!ipcActivity)
        {
            ipcCategory = this.ensureSystemCategory();

            ipcActivity.initValue(true);
            ipcActivity.Activity    = "@SYS3853";
            ipcActivity.SignIn      = NoYes::No;
            ipcActivity.Category    = ipcCategory.Category;
            ipcActivity.SignInOut   = JmgSignInOut::SysIndirect;
            ipcActivity.Description = "@SYS38493";
            ipcActivity.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>putBreaks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Break category and adds 2 break activites into it.
    /// </summary>
    public void putBreaks()
    {
        JmgIpcCategory ipcCategory = this.ensureBreakCategory();

        ttsbegin;

        this.ensureBreakActivity("@SCM:LunchBrk", "@SCM:LunchBrkDescription", ipcCategory);
        this.ensureBreakActivity("@SCM:DailyBrk", "@SCM:DailyBrkDescription", ipcCategory);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the updates to the system that are selected by the user in the wizard.
    /// </summary>
    void run()
    {
        ttsbegin;

        this.parametersUpdate();

        if (putJobsOnOperations)
            this.putJobsOnOperations();

        if (putJobsOnProjects || putJobsOnProjActivities)
            this.putJobsOnProjects();

        if (putSystemActivity)
        {
            this.putSignInOutActivity();
            this.putSystemActivity();
            this.putBreaks();
        }

        if (putJobsOnHRMAbsenceCodeGroups || putJobsOnHRMAbsenceCodes)
            this.putJobsOnHRMAbsence();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJobsOnHRMAbsenceCodeGroups</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets and gets the put job on absence code groups property.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether the value must be updated.
    /// </param>
    /// <param name="_value">
    ///    The value to set.
    /// </param>
    /// <returns>
    ///    true if job IDs must be assigned to absence code groups; otherwise, false.
    /// </returns>
    public boolean setJobsOnHRMAbsenceCodeGroups(boolean _set, boolean _value = false)
    {
        if (_set)
            putJobsOnHRMAbsenceCodeGroups = _value;

        return putJobsOnHRMAbsenceCodeGroups;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJobsOnHRMAbsenceCodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets and gets the put job on absence codes property.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether the value must be updated.
    /// </param>
    /// <param name="_value">
    ///    The value to set.
    /// </param>
    /// <returns>
    ///    true if job IDs must be assigned to absence codes; otherwise, false.
    /// </returns>
    public boolean setJobsOnHRMAbsenceCodes(boolean _set, boolean _value = false)
    {
        if (_set)
            putJobsOnHRMAbsenceCodes = _value;

        return putJobsOnHRMAbsenceCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJobsOnOperations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets and gets the put job on operations property.
    /// </summary>
    /// <param name="set">
    ///    A Boolean value that specifies whether the value must be updated.
    /// </param>
    /// <param name="selection">
    ///    The value to set.
    /// </param>
    /// <returns>
    ///    true if job IDs must be assigned to operations; otherwise, false.
    /// </returns>
    public boolean setJobsOnOperations(boolean set, boolean selection = false)
    {
        if (set)
            putJobsOnOperations = selection;

        return putJobsOnOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJobsOnProjActivities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets and gets the put job on project activities property.
    /// </summary>
    /// <param name="set">
    ///    A Boolean value that specifies whether the value must be updated.
    /// </param>
    /// <param name="selection">
    ///    The value to set.
    /// </param>
    /// <returns>
    ///    true if Job IDs must be assigned to project activities; otherwise, false.
    /// </returns>
    public boolean setJobsOnProjActivities(boolean set, boolean selection = false)
    {
        if (set)
            putJobsOnProjActivities = selection;

        return putJobsOnProjActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJobsOnProjects</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets and gets the put job on the projects property.
    /// </summary>
    /// <param name="set">
    ///    A Boolean value that specifies whether the value must be updated.
    /// </param>
    /// <param name="selection">
    ///    The value to set.
    /// </param>
    /// <returns>
    ///    true if job IDs must be assigned to projects; otherwise, false.
    /// </returns>
    public boolean setJobsOnProjects(boolean set, boolean selection = false)
    {
        if (set)
            putJobsOnProjects = selection;

        return putJobsOnProjects;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the next enabled property for the specified tab index.
    /// </summary>
    /// <param name="_enabled">
    ///    A Boolean value that specifies whether the specified tab must be enabled.
    /// </param>
    /// <param name="idx">
    ///    The index of the tab for which to set the enabled property.
    /// </param>
    void setNextEnabled(boolean _enabled, int idx = tabidx)
    {
        if (prmisdefault(idx))
            this.nextEnabled(_enabled);
        else
            this.nextEnabled(_enabled, idx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameterUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets and gets the update parameters property.
    /// </summary>
    /// <param name="set">
    ///    A Boolean value that specifies whether the value must be updated.
    /// </param>
    /// <param name="selection">
    ///    The value to set.
    /// </param>
    /// <returns>
    ///    true if parameters must be updated; otherwise, false.
    /// </returns>
    public boolean setParameterUpdate(boolean set, boolean selection = false)
    {
        if (set)
            parametersUpdate = selection;

        return parametersUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSignInOutActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets and gets the create system activities property.
    /// </summary>
    /// <param name="set">
    ///    A Boolean value that specifies whether the value must be updated.
    /// </param>
    /// <param name="selection">
    ///    The value to set.
    /// </param>
    /// <returns>
    ///    true if system activities must be created; otherwise, false.
    /// </returns>
    public boolean setSignInOutActivity(boolean set, boolean selection = false)
    {
        if (set)
            putSignInOutActivity = selection;

        return putSignInOutActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSystemActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets and gets the create system activities property.
    /// </summary>
    /// <param name="set">
    ///    A Boolean value that specifies whether the value must be updated.
    /// </param>
    /// <param name="selection">
    ///    The value to set.
    /// </param>
    /// <returns>
    ///    true if system activities must be created; otherwise, false.
    /// </returns>
    public boolean setSystemActivity(boolean set, boolean selection = false)
    {
        if (set)
            putSystemActivity = selection;

        return putSystemActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupNavigation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets up two arrays, the <c>nextEnabled</c> and <c>backEnabled</c> arrays. Call
    ///    <c>this.nextEnabled(boolean)</c> and <c>this.backEnabled(boolean)</c> to enable or disable the
    ///    button runtime.
    /// </summary>
    void setupNavigation()
    {
        nextEnabled[2] = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether values that are entered by the user are valid.
    /// </summary>
    /// <returns>
    ///    true if validation is successful; otherwise, false.
    /// </returns>
    boolean validate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the description of the <c>JmgAssignJobsWizard</c> class.
    /// </summary>
    /// <returns>
    /// the description of the <c>JmgAssignJobsWizard</c> class.
    /// </returns>
    static str description()
    {
        return "@SYS39008";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        JmgAssignJobsWizard wizard = new JmgAssignJobsWizard();
        if (wizard.prompt())
            wizard.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>