<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmBusRelListPageConvert2Vend</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmmBusRelListPageConvert2Vend
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args, boolean _showForm = true)
    {
        if (!args ||
            args.dataset() != tableNum(smmBusRelTable) ||
            !args.record() ||
            args.record().RecId == 0)
        {
            throw error("@SYS22996");
        }

        smmBusRelTable smmBusRelTableArgs = args.record();

        // Select the entire BusRelTable record, since the record passed in the Args
        // may not have selected all the fields
        smmBusRelTable    smmBusRelTable;
        select smmBusRelTable where smmBusRelTable.RecId == smmBusRelTableArgs.RecId;

        // Can conversion be done?
        if (!smmBusRelTable.canConvertToVendor())
        {
            return;
        }

        // Are you sure you want to convert the prospect to a vendor?
        if (_showForm  && Box::yesNo("@SYS99203", DialogButton::Yes) != DialogButton::Yes)
        {
            return;
        }

        // Convert to vendor
        NoYes conversionSuccessful = smmBusRelTable::convert2Vendor(smmBusRelTable);

        if (conversionSuccessful)
        {
            if (_showForm && smmParameters::getBusRelOpenVendForm())
            {
                // Open the Vendor form if configured to do so
                MenuFunction    menuFunction = new MenuFunction(menuitemDisplayStr(VendTable), MenuItemType::Display);
                Args            newArgs = new Args();

                newArgs.record(VendTable::findByPartyRecId(smmBusRelTable.Party));
                menuFunction.run(newArgs);

                // Do a refresh of Prospect form async
                Global::runAsync(classNum(SmmBusRelListPageConvert2Vend),
                    staticMethodStr(SmmBusRelListPageConvert2Vend, refreshCallerAsync), [smmBusRelTableArgs]);
            }
            else
            {
                // Refresh of Prospect form synchronously
                SmmBusRelListPageConvert2Vend::refreshCaller(smmBusRelTableArgs);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCallerAsync</Name>
				<Source><![CDATA[
    private static void refreshCallerAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        smmBusRelTable smmBusRelTable;
        [smmBusRelTable] = params;

        SmmBusRelListPageConvert2Vend::refreshCaller(smmBusRelTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCaller</Name>
				<Source><![CDATA[
    private static void refreshCaller(smmBusRelTable smmBusRelTable)
    {
        if (FormDataUtil::getFormDataSource(smmBusRelTable))
        {
            FormDataUtil::getFormDataSource(smmBusRelTable).research(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
