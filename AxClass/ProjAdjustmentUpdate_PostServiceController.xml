<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjAdjustmentUpdate_PostServiceController</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// Service controller class for <c>ProjAdjustmentUpdate_PostService</c>
/// </summary>
public class ProjAdjustmentUpdate_PostServiceController extends SysOperationServiceController implements BatchRetryable
{

}
]]></Declaration>
    <Methods>
      <Method>
        <Name>new</Name>
        <Source><![CDATA[
    public void new()
    {
        super();

        this.parmDialogCaption("@ProjAdjustment:ProjAdjBatchDescription");
        this.parmShowDialog(true);
        this.parmShowProgressForm(false);
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args == null || !_args.parm())
        {
            throw error("@SYS335393");
        }

        guid processId = str2Guid(_args.parm());

        ProjAdjustmentUpdate_PostServiceController controller = new ProjAdjustmentUpdate_PostServiceController();
        controller.parmClassName(classstr(ProjAdjustmentUpdate_PostService));
        controller.parmMethodName(methodstr(ProjAdjustmentUpdate_PostService, postAdjustments));
        controller.parmExecutionMode(SysOperationExecutionMode::Synchronous);

        ProjAdjustmentPostDataContract request = controller.getBaseDataContract() as ProjAdjustmentPostDataContract;

        request.parmProcessId(processId);

        controller.startOperation();

        if (controller.isDialogCancelled())
        {
            ProjAdjustmentUpdate_PostAsync::clearAdjustmentsCache(processId);
            SysGlobalCache cache = ClassFactory.globalCache();
            cache.set(classStr(ProjAdjustmentUpdate_PostServiceController), _args.parm(), true);
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>doBatch</Name>
        <Source><![CDATA[
    public Batch doBatch()
    {
        Batch ret;

        if (executionMode == SysOperationExecutionMode::ScheduledBatch)
        {
            BatchHeader batchheader = this.batchInfo().parmBatchHeader();
            batchheader.clearAllAlerts();

            batchheader.addUserAlerts(curUserId(), NoYes::Yes, NoYes::Yes, NoYes::Yes, NoYes::Yes, NoYes::No);
        }
    
        return super();
    }

]]></Source>
      </Method>
      <Method>
        <Name>isDialogCancelled</Name>
        <Source><![CDATA[
    /// <summary>
    ///     Verifies whether user has cancelled further execution of batch tasks by cancellation of the batch parameters dialog.
    /// </summary>
    /// <returns>
    ///     true if the user has cancelled further processing; otherwise false.
    /// </returns>
    public boolean isDialogCancelled()
    {
        return dialogCanceled;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>