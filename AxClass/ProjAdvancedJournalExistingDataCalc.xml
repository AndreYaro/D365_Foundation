<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdvancedJournalExistingDataCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class ProjAdvancedJournalExistingDataCalc
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRecordCountInGL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Counts the number of entries in GeneralJournalEntry table against the voucher mentioned in advanced journal line.
    /// </summary>
    /// <param name = "_projAdvancedJournalLine">The journal line <c>ProjAdvancedJournal</c> for which the count is to be calculated.</param>
    /// <returns>The count of entries in GeneralLedger having same voucher as advanced journal line.</returns>
    public static int getRecordCountInGL(ProjAdvancedJournalLine _projAdvancedJournalLine)
    {
        GeneralJournalEntry generalJournalEntry;

        select count(RecId) from generalJournalEntry
        group by generalJournalEntry.SubledgerVoucher
            where generalJournalEntry.SubledgerVoucher == _projAdvancedJournalLine.Voucher
            && generalJournalEntry.SubledgerVoucherDataAreaId == _projAdvancedJournalLine.DataAreaId;

        return generalJournalEntry.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordCountInProjectTransTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Counts the number of entries in Project tables against the voucher mentioned in advanced journal line.
    /// </summary>
    /// <param name = "_projAdvancedJournalLine">The journal line <c>ProjAdvancedJournalLine</c> for which the count is to be calculated.</param>
    /// <returns>The count of entries in Project subledger having same voucher as advanced journal line.</returns>
    public static int getRecordCountInProjectTransTable(ProjAdvancedJournalLine _projAdvancedJournalLine)
    {
        int recordCount;

        switch (_projAdvancedJournalLine.TransType)
        {
            case (ProjTransType::Hour):
                ProjEmplTrans projEmplTrans;
                select count(RecId) from projEmplTrans
                    group by projEmplTrans.VoucherJournal
                    where projEmplTrans.VoucherJournal == _projAdvancedJournalLine.Voucher;
                recordCount = projEmplTrans.RecId;
                break;

            case (ProjTranstype::Cost):
                ProjCostTrans projCostTrans;
                select count(RecId) from projCostTrans
                    group by projCostTrans.VoucherJournal
                    where projCostTrans.VoucherJournal == _projAdvancedJournalLine.Voucher;
                recordCount = projCostTrans.RecId;
                break;
        
            case (ProjTranstype::Item):
                ProjItemTrans projItemTrans;
                select count(RecId) from projItemTrans
                    group by projItemTrans.VoucherPackingSlip
                    where projItemTrans.VoucherPackingSlip == _projAdvancedJournalLine.Voucher;
                recordCount = projItemTrans.RecId;
                break;

            case (ProjTransType::Revenue):
                ProjRevenueTrans projRevenueTrans;
                select count(RecId) from projRevenueTrans
                    group by projRevenueTrans.VoucherJournal
                    where projRevenueTrans.VoucherJournal == _projAdvancedJournalLine.Voucher;
                recordCount = projRevenueTrans.RecId;
                break;

            default:
                recordCount = 0;
                break;
        }

        return recordCount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>