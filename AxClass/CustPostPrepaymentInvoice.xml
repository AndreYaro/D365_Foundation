<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPostPrepaymentInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustPostPrepaymentInvoice extends RunBase
{
    private CustPrepaymentInvoiceTable prepaymentInvoiceTable;

    private boolean isPostingOK;
    
    private Voucher voucherNumber;
    private RefRecId numberSequenceTableVoucher;
    private LedgerVoucherGroup ledgerVoucherGroup;
    private AmountCur sumTaxAmount;

    private CustTrans custTrans;
    private CustPrepaymentInvoiceCalcTax custPrepaymentInvoiceCalcTax;

    private CustPrepaymentInstrumentationLogger prepaymentInvoiceLogger;

    #ISOCountryRegionCodes
    #EECountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNumAndVoucher</Name>
				<Source><![CDATA[
    private container allocateNumAndVoucher()
    {
        RefRecId invoiceId, voucherId;
        Num invoiceNumber;
        RefRecId scopeId = NumberSeqScopeFactory::createDefaultScope().getId();
        NumberSequenceReference numberSequenceReference;
        NumberSequenceReference voucherSequenceReference;
        boolean voucherEqualsNumber;

        if (prepaymentInvoiceTable.NumberSequenceGroup)
        {
            switch (prepaymentInvoiceTable.Type)
            {
                case PrepaymentInvoiceType::Common:
                    invoiceId = NumberSequenceGroupRef::findNaturalKey(NumberSequenceDatatype::find(CustParameters::numRefCustPrepaymentInvoiceId().NumberSequenceDatatype).RecId, scopeId, prepaymentInvoiceTable.NumberSequenceGroup).NumberSequenceId;
                    voucherId = NumberSequenceGroupRef::findNaturalKey(NumberSequenceDatatype::find(CustParameters::numRefCustPrepaymentInvoiceVoucher().NumberSequenceDatatype).RecId, scopeId, prepaymentInvoiceTable.NumberSequenceGroup).NumberSequenceId;
                    break;

                case PrepaymentInvoiceType::Reversal:
                    invoiceId = NumberSequenceGroupRef::findNaturalKey(NumberSequenceDatatype::find(CustParameters::numRefCustPrepaymentReversalInvoiceId().NumberSequenceDatatype).RecId, scopeId,prepaymentInvoiceTable.NumberSequenceGroup).NumberSequenceId;
                    voucherId = NumberSequenceGroupRef::findNaturalKey(NumberSequenceDatatype::find(CustParameters::numRefCustPrepaymentInvoiceReversalVoucher().NumberSequenceDatatype).RecId, scopeId, prepaymentInvoiceTable.NumberSequenceGroup).NumberSequenceId;
                    break;

            }
        }

        if (!invoiceId)
        {
            switch (prepaymentInvoiceTable.Type)
            {
                case PrepaymentInvoiceType::Common:
                    numberSequenceReference = CustParameters::numRefCustPrepaymentInvoiceId();
                    break;

                case PrepaymentInvoiceType::Reversal:
                    numberSequenceReference = CustParameters::numRefCustPrepaymentReversalInvoiceId();
                    break;
            }

            invoiceId = numberSequenceReference.NumberSequenceId;
        }

        if (!voucherId)
        {
            switch (prepaymentInvoiceTable.Type)
            {
                case PrepaymentInvoiceType::Common:
                    voucherSequenceReference = CustParameters::numRefCustPrepaymentInvoiceVoucher();
                    break;
                
                case PrepaymentInvoiceType::Reversal:
                    voucherSequenceReference = CustParameters::numRefCustPrepaymentInvoiceReversalVoucher();
                    break;
            }

            voucherId = voucherSequenceReference.NumberSequenceId;
        }

        if (numberSequenceReference &&
            voucherSequenceReference &&
            voucherSequenceReference.AllowSameAs &&
            (NumberSequenceDatatype::find(numberSequenceReference.NumberSequenceDatatype).DatatypeId
                == NumberSequenceDatatype::find(voucherSequenceReference.NumberSequenceDatatype).DataTypeSameAsId))
        {
            voucherEqualsNumber = true;
            voucherNumber = invoiceNumber;
        }

        if (prepaymentInvoiceTable.CustPostingProfile)
        {
            [invoiceNumber, voucherNumber] = NumberSeq::newGetNumAndVoucherFromId(invoiceId, voucherId, voucherEqualsNumber).numAndVoucher();
            numberSequenceTableVoucher = NumberSequenceTable::find(voucherId).RecId;
        }
        else
        {
            invoiceNumber = NumberSeq::newGetNumFromId(invoiceId).num();
            voucherNumber = '';
        }

        return [invoiceNumber, voucherNumber];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        prepaymentInvoiceLogger = CustPrepaymentInstrumentationLogger::createLogger(classStr(CustPostPrepaymentInvoice));
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceTable</Name>
				<Source><![CDATA[
    public CustPrepaymentInvoiceTable parmInvoiceTable(CustPrepaymentInvoiceTable _prepaymentInvoiceTable = prepaymentInvoiceTable)
    {
        prepaymentInvoiceTable = _prepaymentInvoiceTable;
        return prepaymentInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustPrepaymentInvoiceTable prepaymentInvoiceTable;
        Object invoiceTable_ds;

        CustPostPrepaymentInvoice post;

        prepaymentInvoiceTable = _args.record();

        if (!prepaymentInvoiceTable)
        {
            throw error(strFmt("@SYS26860"));
        }

        if (FormDataUtil::isFormDataSource(prepaymentInvoiceTable))
        {
            invoiceTable_ds = FormDataUtil::getFormDataSource(prepaymentInvoiceTable);
        }

        post = new CustPostPrepaymentInvoice();
        post.parmInvoiceTable(prepaymentInvoiceTable);

        post.runOperation();

        if (invoiceTable_ds)
        {
            invoiceTable_ds.reRead();
            invoiceTable_ds.reFresh();
            invoiceTable_ds.active();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates and posts the prepayment invoice.
    /// </summary>
    public void run()
    {
        Counter infoCounter = infologLine();
        isPostingOK = false;

        try
        {
            if (this.isTaxCalculationEnabled())
            {
                this.callTaxIntegration();
            }
               
            if (!this.validate())
            {
                throw error("@SYS25904");
            }

            ttsbegin;

            this.initInvoiceTable();

            [prepaymentInvoiceTable.InvoiceId, prepaymentInvoiceTable.Voucher] = this.allocateNumAndVoucher();

            prepaymentInvoiceTable.calcDue();

            // initializes ledgerVoucherGroup
            this.post();
            
            prepaymentInvoiceTable.Posted = NoYes::Yes;
            prepaymentInvoiceTable.Status = CustPrepaymentInvoiceStatus::Pending;
            prepaymentInvoiceTable.Log = "";

            prepaymentInvoiceTable.update();

            // posts ledgerVoucherGroup
            this.endLedgerVoucher();

            ttscommit;

            if (prepaymentInvoiceTable.Type == PrepaymentInvoiceType::Common)
            {
                info(strFmt("@GLS108256", prepaymentInvoiceTable.InvoiceId));
            }

            isPostingOK = true;
        }
        catch (Exception::Error)
        {
            throw;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>callTaxIntegration</Name>
				<Source><![CDATA[
    private void callTaxIntegration()
    {
        ttsbegin;

        custPrepaymentInvoiceCalcTax = CustPrepaymentInvoiceCalcTax::newForSourceTable(prepaymentInvoiceTable);
        custPrepaymentInvoiceCalcTax.calcTax(null);
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    protected CustInvoiceJour createJournalHeader()
    {
        CustInvoiceJour custInvoiceJour;

        custInvoiceJour.clear();
        custInvoiceJour.initValue();

        custInvoiceJour.InvoiceDate = prepaymentInvoiceTable.InvoiceDate;
        custInvoiceJour.DocumentDate = prepaymentInvoiceTable.DocumentDate;

        custInvoiceJour.OrderAccount = prepaymentInvoiceTable.OrderAccount;
        custInvoiceJour.InvoiceAccount = prepaymentInvoiceTable.InvoiceAccount;
        custInvoiceJour.CustGroup = prepaymentInvoiceTable.CustGroup;

        custInvoiceJour.InvoicePostalAddress = prepaymentInvoiceTable.PostalAddress;
        custInvoiceJour.DeliveryPostalAddress = custInvoiceJour.InvoicePostalAddress;

        custInvoiceJour.DefaultDimension = prepaymentInvoiceTable.DefaultDimension;
        custInvoiceJour.Payment = prepaymentInvoiceTable.Payment;
        custInvoiceJour.CurrencyCode = prepaymentInvoiceTable.CurrencyCode;
        
        custInvoiceJour.PaymentSched = prepaymentInvoiceTable.PaymentSched;
        custInvoiceJour.DueDate = prepaymentInvoiceTable.DueDate;

        custInvoiceJour.ExchRate = prepaymentInvoiceTable.ExchRate;
        custInvoiceJour.ExchRateSecondary = prepaymentInvoiceTable.ExchRateSecond;
        custInvoiceJour.InvoiceId = prepaymentInvoiceTable.InvoiceId;
        custInvoiceJour.LedgerVoucher = prepaymentInvoiceTable.Voucher;
        
        custInvoiceJour.Updated = NoYes::Yes;
        custInvoiceJour.InvoiceAmount = prepaymentInvoiceTable.InvoiceAmount;
        custInvoiceJour.PostingProfile = prepaymentInvoiceTable.CustPostingProfile;
        custInvoiceJour.LanguageId = prepaymentInvoiceTable.LanguageId;
        custInvoiceJour.SalesId = prepaymentInvoiceTable.SalesId;
        custInvoiceJour.SalesType = SalesType::Prepayment;

        if (SalesOrderFinTagFeature::isEnabled())
        {
            custInvoiceJour.FinTag = prepaymentInvoiceTable.FinTag;
        }

        custInvoiceJour.insert();

        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    protected void createJournalLines(CustInvoiceJour _custInvoiceJour, LedgerVoucher _ledgerVoucher, CustPrepaymentInvoiceLine _prepaymentInvoiceLine, TaxAmount _taxAmount)
    {
        CustInvoiceTrans custInvoiceTrans;
       
        custInvoiceTrans.clear();
        custInvoiceTrans.initFromCustInvoiceJour(_custInvoiceJour);
        custInvoiceTrans.LineNum = _prepaymentInvoiceLine.LineNum;
        custInvoiceTrans.Name = _prepaymentInvoiceLine.Description;
        custInvoiceTrans.TaxGroup = _prepaymentInvoiceLine.TaxGroup;
        custInvoiceTrans.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_prepaymentInvoiceLine.DefaultDimension);
        custInvoiceTrans.DefaultDimension = prepaymentInvoiceTable.DefaultDimension;
        custInvoiceTrans.TaxItemGroup = _prepaymentInvoiceLine.TaxItemGroup;
        custInvoiceTrans.SalesCategory = prepaymentInvoiceTable.CategoryId;
        custInvoiceTrans.CurrencyCode = prepaymentInvoiceTable.CurrencyCode;
        custInvoiceTrans.LineAmountTax = -1*_taxAmount;
        custInvoiceTrans.LineAmountTaxMST = _custInvoiceJour.amountMST(custInvoiceTrans.LineAmountTax);
        custInvoiceTrans.LineAmount = _prepaymentInvoiceLine.LineAmount - custInvoiceTrans.LineAmountTax ;
        custInvoiceTrans.LineAmountMST = _custInvoiceJour.amountMST(_prepaymentInvoiceLine.LineAmount);
        custInvoiceTrans.TaxAmount = custInvoiceTrans.LineAmountTax;
        custInvoiceTrans.TaxAmountMST = custInvoiceTrans.LineAmountTaxMST;
        custInvoiceTrans.InventDimId = InventDim::inventDimIdBlank();
        custInvoiceTrans.insert();
 
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the invoice table and calculates the invoice amount.
    /// Sets the CustPostingProfile if it is not already set.
    /// Sets the exchange rate if the currency code is the standard currency or if the exchange rate is not set.
    /// Sets the exchange rate to the fixed exchange rate if it is greater than 0.0.
    /// </summary>
    protected void initInvoiceTable()
    {
        prepaymentInvoiceTable = CustPrepaymentInvoiceTable::findRecId(prepaymentInvoiceTable.RecId, true);
        prepaymentInvoiceTable.calcInvoiceAmount();

        if (!prepaymentInvoiceTable.CustPostingProfile)
        {
            prepaymentInvoiceTable.CustPostingProfile = prepaymentInvoiceTable.PostingProfile;
        }

        if (prepaymentInvoiceTable.CurrencyCode == CompanyInfoHelper::standardCurrency() || !prepaymentInvoiceTable.ExchRate)
        {
            prepaymentInvoiceTable.ExchRate = ExchangeRateHelper::exchRate(prepaymentInvoiceTable.CurrencyCode, prepaymentInvoiceTable.InvoiceDate);
            prepaymentInvoiceTable.ExchRateSecond = ExchangeRateHelper::exchRateSecond(prepaymentInvoiceTable.CurrencyCode, prepaymentInvoiceTable.InvoiceDate);
        }

        if (prepaymentInvoiceTable.FixedExchRate){
              
            prepaymentInvoiceTable.ExchRate = prepaymentInvoiceTable.FixedExchRate;
            prepaymentInvoiceTable.ExchRateSecond = prepaymentInvoiceTable.FixedExchRate;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the invoice table.
    /// </summary>
    /// <param name = "_calledFrom"> optional parameter</param>
    /// <returns>boolean</returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ok = super(_calledFrom);
        CustTable custTable;

        AmountCur amountOrigOpen;
        boolean oneCurrency;

        if (!prepaymentInvoiceTable)
        {
            throw error("@SYS26860");
        }

        if (prepaymentInvoiceTable.Posted)
        {
            ok = checkFailed("@GLS108255");
        }

        if (!CustTable::exist(prepaymentInvoiceTable.OrderAccount))
        {
            ok = checkFailed(strFmt(CustTable::txtNotExist(), prepaymentInvoiceTable.OrderAccount));
        }

        custTable = prepaymentInvoiceTable.custTable_InvoiceAccount();

        if (!custTable)
        {
            ok = checkFailed(strFmt(CustTable::txtNotExist(), prepaymentInvoiceTable.InvoiceAccount));
        }

        if (ok)
        {
            if (!custTable.checkAccountBlocked(prepaymentInvoiceTable.InvoiceAmount))
            {
                ok = false;
            }
        }

        boolean hasLine = CustPrepaymentInvoiceLine::isLinePresent(prepaymentInvoiceTable.RecId);

        if (ok && !hasLine)
        {
            ok = checkFailed("@AccountsReceivable:PrepaymentInvoiceHasLineValidationError");
        }

        if (ok && SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll) && prepaymentInvoiceTable.DocumentDate == dateNull())
        {
            ok = checkFailed(strFmt("@SYS84378", fieldPName(CustPrepaymentInvoiceTable, DocumentDate)));
        }

        if (ok && !prepaymentInvoiceTable.CustPostingProfile)
        {
            ok = checkFailed("@AccountsReceivable:PostingProfileInPrepaymentNotPresentError");
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endLedgerVoucher</Name>
				<Source><![CDATA[
    private void endLedgerVoucher()
    {
        if (ledgerVoucherGroup)
        {
            ledgerVoucherGroup.end();
            ledgerVoucherGroup = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    protected void post()
    {
        LedgerVoucher ledgerVoucher;
        LedgerVoucherObject ledgerVoucherObject;
        LedgerVoucherTransObject ledgerVoucherTransObject;
        LedgerPostingController ledgerPostingController;
       
        CustPrepaymentInvoiceLine prepaymentInvoiceLine;
        AmountCur lineAmountExclTax;
        CurrencyExchangeHelper exchangeRateHelper;
        CustVoucher custVoucher;

        CustInvoiceJour custInvoiceJour;

        TaxCustPrepayment taxCustPrepayment = this.getTaxCustPrepayment();
        TmpTaxWorkTrans taxWorkTrans;

        using (var createJournalActivityContext = prepaymentInvoiceLogger.activityContextWithCustomProperties(CustPrepaymentInstrumentationConstants::CustPostPrepaymentInvoiceRun))
        {
            // init ledger voucher
            ledgerVoucherObject = LedgerVoucherObject::newVoucher(prepaymentInvoiceTable.Voucher, prepaymentInvoiceTable.InvoiceDate, SysModule::Cust, LedgerTransType::SalesPrepayment);
            ledgerVoucherObject.parmVoucherCheck(false);

            ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary, SysModule::Cust, voucherNumber);
            ledgerVoucher.parmCompanyId(curext());
            ledgerVoucher.addVoucher(ledgerVoucherObject);

            ledgerVoucherGroup = LedgerVoucherGroup::construct();
            ledgerVoucherGroup.addLedgerVoucher(ledgerVoucher);

            // create customer transactions
            custVoucher = CustVendVoucher::construct(SysModule::Cust,
                                                 prepaymentInvoiceTable.InvoiceAccount,
                                                 prepaymentInvoiceTable.InvoiceAmount,
                                                 prepaymentInvoiceTable.CurrencyCode,
                                                 LedgerTransTxt::CustInvoiceCust,
                                                 prepaymentInvoiceTable.DefaultDimension,
                                                 prepaymentInvoiceTable.CustPostingProfile,
                                                 LedgerPostingType::CustBalance,
                                                 prepaymentInvoiceTable.Payment,
                                                 SettlementType::None,
                                                 HcmWorker::userId2Worker(curUserId()),
                                                 NoYes::Yes,
                                                 '',
                                                 dateNull(),
                                                 0,
                                                 prepaymentInvoiceTable.DueDate,
                                                 prepaymentInvoiceTable);

            custVoucher.parmDocumentDate(prepaymentInvoiceTable.DocumentDate);
            custVoucher.parmTransTxt("@AccountsReceivable:PrepaymentInvoice");

            custVoucher.parmExchRate(prepaymentInvoiceTable.ExchRate);
            custVoucher.parmExchRateSecondary(prepaymentInvoiceTable.ExchRateSecond);
            custVoucher.parmTypeOfCreditmaxCheck(CustParameters::find().CreditMaxCheck);

            custVoucher.setTransRef(CustTransRefType::Invoice, prepaymentInvoiceTable.Voucher);

            if (SalesOrderFinTagFeature::isEnabled())
            {
                custVoucher.parmFinTag(prepaymentInvoiceTable.FinTag);
            }

            custVoucher.post(ledgerVoucher, custTrans);

            custTrans.Invoice = prepaymentInvoiceTable.InvoiceId;

            switch (prepaymentInvoiceTable.Type)
            {
                case PrepaymentInvoiceType::Common:
                    custTrans.Txt = "@AccountsReceivable:PrepaymentInvoice";
                    break;

                case PrepaymentInvoiceType::Reversal:
                    custTrans.Txt = "@AccountsReceivable:PrepaymentInvoiceReversal";
                    break;

            }

            custTrans.doUpdate();

            custInvoiceJour = this.createJournalHeader();
            sumTaxAmount = 0;
            int sign = -1;

            // Add transactions to voucher
            while select prepaymentInvoiceLine
                where prepaymentInvoiceLine.CustPrepaymentInvoiceTable == prepaymentInvoiceTable.RecId
            {
                TaxAmount taxAmount;

                prepaymentInvoiceLine.DefaultDimension = InventPosting::itemLedgerDimensionFromParameter(InventPostingItemLedgerDimensionParameters::newFromParameters(
                                                                                                                                                        InventAccountType::SalesAdvance,
                                                                                                                                                        "",
                                                                                                                                                        "", prepaymentInvoiceTable.CategoryId));

                if (!taxCustPrepayment)
                {
                    taxCustPrepayment = TaxCustPrepayment::construct(prepaymentInvoiceTable, prepaymentInvoiceLine, prepaymentInvoiceLine.TaxGroup, prepaymentInvoiceLine.TaxItemGroup, NoYes::Yes, ledgerVoucher);
                    AmountCur baseAmount = Tax::baseAmountExclTax(prepaymentInvoiceLine.TaxGroup, prepaymentInvoiceLine.TaxItemGroup, prepaymentInvoiceTable.InvoiceDate, prepaymentInvoiceTable.CurrencyCode, prepaymentInvoiceLine.LineAmount, TaxModuleType::Sales);
                    taxCustPrepayment.taxCalcWithoutSource(prepaymentInvoiceLine.TaxGroup, prepaymentInvoiceLine.TaxItemGroup, prepaymentInvoiceTable.InvoiceDate, prepaymentInvoiceTable.CurrencyCode, -baseAmount, TaxModuleType::Sales);
                    lineAmountExclTax = baseAmount;
                    taxAmount = sign * (prepaymentInvoiceLine.LineAmount - baseAmount);
                }
                else
                {
                    taxAmount = taxCustPrepayment.totalTaxAmount();
                    lineAmountExclTax = prepaymentInvoiceLine.LineAmount + taxAmount;
                }
               
                taxWorkTrans = taxCustPrepayment.tmpTaxWorkTrans();
                sumTaxAmount = sumTaxAmount + taxAmount;
                exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), ledgerVoucherObject.parmAccountingDate());
                exchangeRateHelper.parmExchangeRate1(prepaymentInvoiceTable.ExchRate);
                exchangeRateHelper.parmExchangeRate2(prepaymentInvoiceTable.ExchRateSecond);

                ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                                                        ledgerVoucherObject,
                                                                        LedgerPostingType::SalesAdvance,
                                                                        LedgerDimensionFacade::serviceCreateLedgerDimension(prepaymentInvoiceLine.DefaultDimension, prepaymentInvoiceTable.DefaultDimension),
                                                                        prepaymentInvoiceTable.CurrencyCode,
                                                                        sign*lineAmountExclTax,
                                                                        exchangeRateHelper);

                ledgerVoucherTransObject.parmTaxParentReferenceTableId(prepaymentInvoiceLine.TableId);
                ledgerVoucherTransObject.parmTaxParentReferenceRecId(prepaymentInvoiceLine.RecId);

                ledgerVoucherObject.addTrans(ledgerVoucherTransObject);
                this.createJournalLines(custInvoiceJour, ledgerVoucher, prepaymentInvoiceLine, taxAmount);
            }

            custInvoiceJour.SumTax = (sumTaxAmount);
            custInvoiceJour.update();

            // post taxes
            ledgerPostingController = LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher);
            taxCustPrepayment.saveAndPost(ledgerPostingController);
           
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxCalculationEnabled</Name>
				<Source><![CDATA[
    private boolean isTaxCalculationEnabled()
    {
        return Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Sales);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCustPrepayment</Name>
				<Source><![CDATA[
    private TaxCustPrepayment getTaxCustPrepayment()
    {
        TaxCustPrepayment taxCustPrepayment;

        if (this.isTaxCalculationEnabled())
        {
            taxCustPrepayment = custPrepaymentInvoiceCalcTax.tax() as TaxCustPrepayment;
        }

        return taxCustPrepayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomerTransaction</Name>
				<Source><![CDATA[
    public CustTrans parmCustomerTransaction(CustTrans _custTrans = custTrans)
    {
        custTrans = _custTrans;
        return custTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>