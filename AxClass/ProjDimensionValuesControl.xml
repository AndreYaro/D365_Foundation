<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjDimensionValuesControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for unpivoting dimension values on <c>FormGridControls</c>.
/// </summary>
class ProjDimensionValuesControl
{   
    FormRun formRun;    
    FormDataSource formDataSource;    
    FormGridControl formGridControl;
    Map dimensionControlMap;     
        
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayFinancialDimensionsByHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds financial default dimensions in independent columns to a grid.
    /// </summary>
    /// <param name = "_dimensionHierarchy">The financial dimension set to determine which dimensions should be added to the grid.</param>
    /// <param name = "_startingControl">The control in the grid from which to add the financial dimension columns after.</param>
    public void displayFinancialDimensionsByHierarchy(DimensionHierarchy _dimensionHierarchy, FormControl _startingControl)
    {
        FormStringControl dimensionFormControl;  
        FormControl previousControl;

        this.initializeDimensionControlMap(formRun);

        if (_dimensionHierarchy.RecId)
        {
            int dimensionHierarchylevelCount = DimensionHierarchy::getLevelCount(_dimensionHierarchy.RecId);

            previousControl = _startingControl;            

            for (int i = 1; i <= dimensionHierarchylevelCount; i++)
            {
                DimensionHierarchyLevel dimHierarchyLevel = DimensionHierarchyLevel::findByDimensionHierarchyAndLevel(_dimensionHierarchy.RecId, i);
                DimensionAttribute dimensionAttribute = DimensionAttribute::find(dimHierarchyLevel.DimensionAttribute);
                previousControl = this.addDimensionControl(dimensionAttribute, previousControl);
            }
        } 
        else
        {
            // Workaround as removeControl() is not functioning properly
            this.addInvisiblePlaceholderControl(previousControl);  
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInvisiblePlaceholderControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a placeholder string control that is not visible.
    /// </summary>
    /// <param name = "_previousControl">
    /// Previous control in which to add this new control after.  Should be the last control on the grid.
    /// </param>
    /// <remarks>
    /// Workaround as removeControl() is not functioning properly.  In the case where the Dimension Set Name 
    ///  is changed back to blank, need to create a single control that is not visible in order for the previously 
    ///  removed controls to no longer show up.
    /// </remarks>
    private void addInvisiblePlaceholderControl(FormControl _previousControl)
    {       
        str controlName = 'ToAllowPriorControlsToBeRemoved';
        _previousControl = formGridControl.addControl(FormControlType::String, controlName, _previousControl);
        _previousControl.visible(false);

        dimensionControlMap.insert(controlName, _previousControl.id());
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAllFinancialDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds financial default dimensions in independent columns to a grid.  
    /// </summary>
    /// <param name = "_startingControl">The control in the grid from which to add the financial dimension columns after.</param>
    /// <remarks>
    /// All dimensions that are a part of the active account structures tied to the current Ledger will be included.
    /// </remarks>
    public void displayAllFinancialDimensions(FormControl _startingControl)
    {        	 	 
        FormStringControl dimensionFormControl;        

        this.initializeDimensionControlMap(formRun);

        DimensionEnumeration dimensionAttributeSetStorageRecId = DimensionCache::getDimensionAttributeSetForLedger();
        DimensionAttributeSetStorage storage = DimensionAttributeSetStorage::find(dimensionAttributeSetStorageRecId);        
		
		if (storage != null)
        {            						
            FormControl previousControl = _startingControl;

            for (int i = 1; i <= storage.elements(); i++)
            {
                DimensionAttribute dimensionAttribute = DimensionAttribute::find(storage.getAttributeByIndex(i));
                previousControl = this.addDimensionControl(dimensionAttribute, previousControl);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDimensionControl</Name>
				<Source><![CDATA[
	/// <summary>
    /// Adds a specific financial dimension control to the grid one at a time.
    /// </summary>
    /// <param name = "_dimensionAttribute">The financial dimension column to be added.</param>
    /// <param name = "_previousControl">The control in the grid from which to add the financial dimension columns after.</param>
    /// <returns>The current financial default dimension form string control that was just added.</returns>
    private FormControl addDimensionControl(DimensionAttribute _dimensionAttribute, FormControl _previousControl)
    {                
        FormStringControl control = formGridControl.addDataField(
            formDataSource.id(),
            fieldName2Id(tableNum(DimensionAttributeValueSet), _dimensionAttribute.DimensionValueColumnName),
            _previousControl);
        
        control.label(_dimensionAttribute.localizedName());

        dimensionControlMap.insert(_dimensionAttribute.localizedName(), control.id());

        return control;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(FormRun _projProposalForm, FormDataSource _formDataSource, FormGridControl _formGridControl)
    {
        formRun = _projProposalForm; 
        formDataSource = _formDataSource; 
        FormGridControl = _formGridControl;                        
		
        this.initializeDimensionControlMap(formRun);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDimensionControlMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the dimension control map if it was already in use; otherwise, simply instantiates it.
    /// </summary>
    /// <param name = "_formRun">The formRun on which the financial default dimensions are being added and removed from.</param>
    /// <remarks>
    /// When the financial dimension set is set to a new value the columns from the previous selection need to be removed.
    /// </remarks>
    private void initializeDimensionControlMap(FormRun _formRun)
    {
        if (dimensionControlMap && dimensionControlMap.elements() > 0)
        {
            MapEnumerator controlEnumerator = dimensionControlMap.getEnumerator();

            while (controlEnumerator.moveNext())
            {                
                _formRun.design().removeControl(controlEnumerator.currentValue());
            }
        }

        dimensionControlMap = new Map(Types::String, Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>ProjDimensionValuesControl</c> class.
    /// </summary>
    /// <param name = "_projProposalForm">The project proposal form instance.</param>
    /// <param name = "_formDataSource">The form datasource controlling the grid to which the financial default dimensions will be added.</param>
    /// <param name = "_formGridControl">The form grid to which the financial default dimensions will be added.</param>
    /// <returns>An instance of the <c>ProjDimensionValuesControl</c> class.</returns>
    public static ProjDimensionValuesControl construct(FormRun _projProposalForm, FormDataSource _formDataSource, FormGridControl _formGridControl)
    {
        return new ProjDimensionValuesControl(_projProposalForm, _formDataSource, _formGridControl);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>