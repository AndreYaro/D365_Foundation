<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnHandChangeSchedule</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DataContract]
public class InventOnHandChangeSchedule
{
    private str organizationId;
    private str productId;
    private str id;
    private InventOnHandChangeEventDimensionSet dimensions;
    private Map quantitiesByDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        dimensions = new InventOnHandChangeEventDimensionSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrganizationId</Name>
				<Source><![CDATA[
    [DataMember('organizationId')]
    public str parmOrganizationId(str _organizationId = organizationId)
    {
        organizationId = _organizationId;
        return organizationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductId</Name>
				<Source><![CDATA[
    [DataMember('productId')]
    public str parmProductId(str _productId = productId)
    {
        productId = _productId;
        return productId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantitiesByDate</Name>
				<Source><![CDATA[
    [DataMember('quantitiesByDate')]
    public Map parmQuantitiesByDate(Map _quantitiesByDate = quantitiesByDate)
    {
        quantitiesByDate = _quantitiesByDate;
        return quantitiesByDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    [DataMember('id')]
    public str parmId(str _id = id)
    {
        id = _id;
        return id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionSet</Name>
				<Source><![CDATA[
    [DataMember('dimensions')]
    public InventOnHandChangeEventDimensionSet parmDimensionSet(InventOnHandChangeEventDimensionSet _dimensions = dimensions)
    {
        dimensions = _dimensions;
        return dimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFromOhcsQueue</Name>
				<Source><![CDATA[
    public static InventOnHandChangeSchedule buildFromOhcsQueue(InventInventoryDataServiceOnhandChangeScheduleQueueTemp _ohcs)
    {
        Map quantitiesByDate = new Map(Types::String, Types::AnyType);
        Map quantitiesByDatasource = new Map(Types::String, Types::AnyType);
        Map quantities = new Map(Types::String, Types::Real);

        str physicalMeasure = _ohcs.StatusIssue == StatusIssue::None ? enum2Symbol(enumNum(StatusReceipt), _ohcs.StatusReceipt) : enum2Symbol(enumNum(StatusIssue), _ohcs.StatusIssue);
        quantities.add(physicalMeasure + 'Atp', _ohcs.Qty);
        quantitiesByDatasource.add('fno', quantities);

        TransDate userPreferredToday = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        TransDate utcToday = DateTimeUtil::date(DateTimeUtil::utcNow());

        utcdatetime utcDateExpected = DateTimeUtil::addDays(_ohcs.DateExpected, userPreferredToday - utcToday);

        quantitiesByDate.add(any2Str(utcDateExpected), quantitiesByDatasource);

        var changeSchedule = new InventOnHandChangeSchedule();
        changeSchedule.parmId(int642str(_ohcs.RecId));
        changeSchedule.parmProductId(_ohcs.ItemId);
        changeSchedule.parmOrganizationId(_ohcs.Company);
        changeSchedule.parmDimensionSet(InventOnHandChangeEventDimensionSet::BuildDimensionSetFromInventDim(InventDim::findInLegalEntity(_ohcs.InventDimId, _ohcs.Company)));
        changeSchedule.parmQuantitiesByDate(quantitiesByDate);

        return changeSchedule;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>