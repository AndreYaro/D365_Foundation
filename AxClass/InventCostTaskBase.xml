<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostTaskBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The base task for the cost calculation.
/// </summary>
abstract class InventCostTaskBase extends RunBaseBatch
{
    Voucher                     voucher;
    TransDate                   transDate;

    InventClosing               inventClosing;
    InventCostTaskController    inventCostTaskController;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        voucher,
        transDate
     #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the task.
    /// </summary>
    abstract protected void doRun()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaskDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    abstract protected ClassDescription getTaskDescription()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCostTaskController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an <c>InventCostTaskController</c> object.
    /// </summary>
    /// <returns>
    /// An <c>InventCostTaskController</c> object.
    /// </returns>
    protected InventCostTaskController inventCostTaskController()
    {
        return InventCostTaskController::newFromParameters( this.parmCurrentBatch().BatchJobId,
                                                            this.parmCurrentBatch().RecId,
                                                            voucher,
                                                            transDate,
                                                            inventClosing.RunNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls the execution of the task.
    /// </summary>
    /// <exception cref="Exception::UpdateConflictNotRecovered">
    /// An update conflict occurred, and kept occuring when it was retried.
    /// </exception>
    /// <exception cref="Exception::UpdateConflict">
    /// An update conflict occurred.
    /// </exception>
    public void run()
    {
        Integer logPointBegin = infologLine();

        #OCCRetryCount

        inventClosing = InventClosing::find(voucher, transDate);

        inventCostTaskController = this.inventCostTaskController();

        if (inventCostTaskController.continueExecution())
        {
            setPrefix(this.getTaskDescription());

            this.progressInit(InventCostClosing::prefixText(inventClosing.AdjustmentType, inventClosing.InventTransCurrency_RU),1,#AviUpdate);

            if (!this.isInBatch())
            {
                progress.setText(this.getTaskDescription());
                progress.update(true);
            }

            try
            {
                this.doRun();
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::CLRError)
            {
                ApplicationUnhandledExceptionLogger::processUnhandledCLRException();

                inventCostTaskController.handleError();
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    inventCostTaskController.handleError();
                    throw;
                }
            }
            catch
            {
                inventCostTaskController.handleError();
            }
            finally
            {
                if (inventClosing)
                {
                    LogId logId = guid2str(newGuid());
                    Integer logPointNow = infologLine();
                    if (logPointBegin + 1 <= logPointNow)
                    {
                        inventClosing.writeLog(infolog.cut(logPointBegin + 1, logPointNow), LogType::Misc, logId);
                    }
                }
            }

            this.progressKill();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer  version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>