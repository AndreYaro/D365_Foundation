<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SMADispatchBoardDataController</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SMADispatchBoardDataController extends AvailabilityViewDataController implements IAvailabilityViewDataController
{
    ResCommitType commitment;
    ResBookingType bookingType;
    ResourceCategoryRecId category;
    ActivityRecId activity;
    real allocation;
    str collectionKey;
    str actionName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes Dispatch board actions
    /// </summary>
    /// <param name = "_actionName">Name of action to execute</param>
    /// <returns>true when specified action is executed successfully; otherwise false</returns>
    public boolean executeAction(str _actionName)
    {
        ResAvailabilityViewContext context = this.control().controlContext();
        activity = context.Activity();
        actionName = _actionName;

        if (_actionName == identifierstr(Assign))
        {
            List collectionItem = this.control().selections().getCollectionItems();
            ListEnumerator enum = collectionItem.getEnumerator();
            int selectedCells = collectionItem.elements();
            if (enum.moveNext())
            {
                CollectionItemDataContract selectedItem = enum.current();
                collectionKey = selectedItem.collectionKey();
            }

            if (collectionKey)
            {
                SMAActivitySelectionParm selectionParm = SMAActivitySelectionParm::construct(collectionKey, context.StartDateTime(), context.EndDateTime());

                SMAActivitySelectionController activitySelection = SMAActivitySelectionController::construct();
                activitySelection.parmSelection(selectionParm);
                activitySelection.selectionsReady += eventhandler(this.assignmentComplete);
                return activitySelection.showForm();
            }
            else
            {
                return checkFailed("@ServiceManagement:SelectWorkerOnChart");
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignmentComplete</Name>
				<Source><![CDATA[
    protected void assignmentComplete()
    {
        this.raiseActionCompletedEvent(actionName);
        this.control().clearSelections();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new (AvailabilityView _control)
    {
        this.collectionController(SMADispatchBoardCollection::construct());
        this.timelineController(ResResourceAvailabilityTimeframe::construct());
        this.chartController(SMADispatchBoardChart::construct());
        super(_control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contructs a new instance of the Dispatch board data controller
    /// </summary>
    /// <returns>Returns an instance of the data controller</returns>
    public static IAvailabilityViewDataController construct(AvailabilityView _control = null)
    {
        IAvailabilityViewDataController dataController = new SMADispatchBoardDataController(_control);
        return dataController;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>