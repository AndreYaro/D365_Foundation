<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMCalcItemOper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BomCalcItemOper extends BOMCalcOper
{
    Route               route;
    RouteOpr            routeOpr;
    WrkCtrId            wrkCtrId;

    Qty                 seriesSize;
    Qty                 actualConsumption;

    BOMCalcData         bomCalcDataActual;

    Hours               calcSetupTime;
    Hours               calcProcessTime;
    Qty                 calcQty;

    BOMCalcTrans        bomCalcTransSetup;
    BOMCalcTrans        bomCalcTransProcess;
    BOMCalcTrans        bomCalcTransQty;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    void calc()
    {
        setprefix("@SYS28551");
        setprefix(#PreFixField(Route,OprNum));

        if (!this.validate())
        {
            throw Exception::Error;
        }

        this.init();

        if (!this.canCalc())
        {
            return;
        }

        this.calcConsumption();

        if (!calcSetupTime && !calcProcessTime && !calcQty)
        {
            return;
        }

        this.calcCost();

        this.insertBOMCalcTrans();

        this.updateParent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcConsumption</Name>
				<Source><![CDATA[
    void calcConsumption()
    {
        RouteCalcConsumption    routeCalcConsumption;
        BOMCalcItem             localParentBOMCalcItem = this.parmParentBOMCalc() as BOMCalcItem;

        Route                   primaryRoute;
        RouteOpr                primaryRouteOpr;

        Route                   secondaryRoute;
        RouteOpr                secondaryRouteOpr;
        InventQty               coProdQtyPerPlanningItem = 1;
        PmfFormulaCoBy          pmfFormulaCoBy;

        routeCalcConsumption = RouteCalcConsumption::construct(routeOpr.Formula);

        if (route.OprPriority == RouteOprPriority::Primary)
        {
            primaryRoute        = route;
            primaryRouteOpr     = routeOpr;
            secondaryRoute      = route;
            secondaryRouteOpr   = routeOpr;
        }
        else
        {
            primaryRoute        = route.primary();
            primaryRouteOpr     = primaryRoute.routeOpr(localParentBOMCalcItem.parmItemId(),
                                                        localParentBOMCalcItem.parmInventDim().ConfigId,
                                                        localParentBOMCalcItem.parmSiteId(),
                                                        null);
            secondaryRoute      = route;
            secondaryRouteOpr   = routeOpr;
        }

        // calculate actual consumption
        calcSetupTime   = routeCalcConsumption.calcSetUpTime(BOMCalcData, primaryRoute, primaryRouteOpr, secondaryRoute, secondaryRouteOpr);


        calcProcessTime   = routeCalcConsumption.calcProcessTime(bomCalcDataActual, primaryRoute, primaryRouteOpr, secondaryRoute, secondaryRouteOpr);


        calcQty         = routeCalcConsumption.calcOprQty(bomCalcDataActual, primaryRoute, primaryRouteOpr, secondaryRoute, secondaryRouteOpr);

        // Avoid numeric issues related to rounding when calculating the setup time
        if (!seriesSize)
        {
            calcSetupTime   = 0;
        }

        if (#PmfEnabled)
        {
            if (localParentBOMCalcItem.parmPmfFormulaCoBy())
            {
                pmfFormulaCoBy = localParentBOMCalcItem.parmPmfFormulaCoBy();
                coProdQtyPerPlanningItem = pmfFormulaCoBy.CoByQty / (pmfFormulaCoBy.CoByQtySerie ? pmfFormulaCoBy.CoByQtySerie : 1);
            }

            calcSetupTime   = calcSetupTime * localParentBOMCalcItem.parmPmfCostAllocationPct() / 100 / coProdQtyPerPlanningItem;
            calcProcessTime = calcProcessTime * localParentBOMCalcItem.parmPmfCostAllocationPct() / 100 / coProdQtyPerPlanningItem;
            calcQty         = calcQty * localParentBOMCalcItem.parmPmfCostAllocationPct() / 100 / coProdQtyPerPlanningItem;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCost</Name>
				<Source><![CDATA[
    void calcCost()
    {
        if (routeGroup.CalcSetUp && calcSetupTime)
        {
            this.calcCostSetup();
        }

        if (routeGroup.CalcProc && calcProcessTime)
        {
            this.calcCostProcess();
        }

        if (routeGroup.CalcQty && calcQty)
        {
            this.calcCostQty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostProcess</Name>
				<Source><![CDATA[
    void calcCostProcess()
    {
        CostPrice           costPrice;
        CostMarkup          costMarkup;
        SalesPrice          salesPrice;
        SalesMarkup         salesMarkup;
        CostGroupId         costGroupId;
        RouteCostCategory   routeCostCategory;
        // <GEERU>
        CostPrice           costPriceSecCur;
        CostMarkup          costMarkupSecCur;
        // </GEERU>

        routeCostCategory = RouteCostCategory::find(routeOpr.ProcessCategoryId);

        if (!routeCostCategory.checkValid())
        {
            throw Exception::Error;
        }

        costGroupId = BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, routeCostCategory.CostGroupId);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            [costPrice, costPriceSecCur] = this.getCostPrice(routeOpr.ProcessCategoryId, bomCalcTransProcess);
            costMarkupSecCur = 0;
        }
        else
        {
            [costPrice]   = this.getCostPrice(routeOpr.ProcessCategoryId, bomCalcTransProcess);
        }
        // </GEERU>

        costMarkup  = 0;

        salesPrice  = BOMCostProfit::calcSalesPrice(costPrice,
                                                    this.parmParentBOMCalc().parmProfitSet(),
                                                    costGroupId);
        salesMarkup = 0;

        bomCalcTransProcess.ConsumptionVariable  = calcProcessTime;
        bomCalcTransProcess.ConsumptionConstant  = 0;

        bomCalcTransProcess.CostGroupId  = costGroupId;
        bomCalcTransProcess.CalcType     = ItemCalcType::Process;

        this.updatePrices(bomCalcTransProcess,
                          costPrice,
                          costMarkup,
                          salesPrice,
                          // <GEERU>
                          salesMarkup,
                          costPriceSecCur,
                          costMarkupSecCur);
                          // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostQty</Name>
				<Source><![CDATA[
    void calcCostQty()
    {
        CostPrice           costPrice;
        CostMarkup          costMarkup;
        SalesPrice          salesPrice;
        SalesMarkup         salesMarkup;
        CostGroupId         costGroupId;
        RouteCostCategory   routeCostCategory;
        // <GEERU>
        CostPrice           costPriceSecCur;
        CostMarkup          costMarkupSecCur;
        // </GEERU>

        routeCostCategory = RouteCostCategory::find(routeOpr.QtyCategoryId);

        if (!routeCostCategory.checkValid())
        {
            throw Exception::Error;
        }

        costGroupId = BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, routeCostCategory.CostGroupId);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            [costPrice, costPriceSecCur] =  this.getCostPrice(routeOpr.QtyCategoryId, bomCalcTransQty);
            costPriceSecCur     = costPriceSecCur * this.phantomBOMFactor();
            costMarkupSecCur    = 0;
        }
        else
        {
            [costPrice]   =  this.getCostPrice(routeOpr.QtyCategoryId, bomCalcTransQty);
        }
        // </GEERU>

        costPrice   = costPrice * this.phantomBOMFactor();
        costMarkup  = 0;

        salesPrice  = BOMCostProfit::calcSalesPrice(costPrice,
                                                    this.parmParentBOMCalc().parmProfitSet(),
                                                    costGroupId);
        salesMarkup = BOMCostProfit::calcSalesMarkup(costMarkup,
                                                     this.parmParentBOMCalc().parmProfitSet(),
                                                     costGroupId);

        bomCalcTransQty.ConsumptionVariable = calcQty;
        bomCalcTransQty.ConsumptionConstant = 0;

        bomCalcTransQty.CostGroupId         = costGroupId;
        bomCalcTransQty.CalcType            = ItemCalcType::Qty;

        this.updatePrices(bomCalcTransQty,
                          costPrice,
                          costMarkup,
                          salesPrice,
                          // <GEERU>
                          salesMarkup,
                          costPriceSecCur,
                          costMarkupSecCur);
                          // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCostSetup</Name>
				<Source><![CDATA[
    void calcCostSetup()
    {
        CostPrice           costPrice;
        CostMarkup          costMarkup;
        SalesPrice          salesPrice;
        SalesMarkup         salesMarkup;
        CostGroupId         costGroupId;
        RouteCostCategory   routeCostCategory;
        // <GEERU>
        CostPrice           costPriceSecCur;
        CostMarkup          costMarkupSecCur;
        // </GEERU>

        routeCostCategory = RouteCostCategory::find(routeOpr.SetUpCategoryId);

        if (!routeCostCategory.checkValid())
        {
            throw Exception::Error;
        }

        costGroupId = BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, routeCostCategory.CostGroupId);

        costPrice   = 0;
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            costPriceSecCur = 0;
            [costMarkup, costMarkupSecCur] = this.getCostPrice(routeOpr.SetUpCategoryId, bomCalcTransSetup);
            costMarkup          = costMarkup * calcSetupTime;
            costMarkupSecCur    = costMarkupSecCur * calcSetupTime;
        }
        else
        {
            [costMarkup]  = this.getCostPrice(routeOpr.SetUpCategoryId, bomCalcTransSetup);
            costMarkup    = costMarkup * calcSetupTime;
        }
        // </GEERU>

        salesPrice  = BOMCostProfit::calcSalesPrice(costPrice,
                                                    this.parmParentBOMCalc().parmProfitSet(),
                                                    costGroupId);
        salesMarkup = BOMCostProfit::calcSalesMarkup(costMarkup,
                                                     this.parmParentBOMCalc().parmProfitSet(),
                                                     costGroupId);

        bomCalcTransSetup.ConsumptionVariable   = 0 ;
        bomCalcTransSetup.ConsumptionConstant   = calcSetupTime;

        bomCalcTransSetup.CostGroupId           = costGroupId;
        bomCalcTransSetup.CalcType              = ItemCalcType::Setup;

        this.updatePrices(bomCalcTransSetup,
                          costPrice,
                          costMarkup,
                          salesPrice,
                          // <GEERU>
                          salesMarkup,
                          costPriceSecCur,
                          costMarkupSecCur);
                          // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cost price.
    /// </summary>
    /// <param name="_costCategoryId">
    /// A cost category ID.
    /// </param>
    /// <param name="_bomCalcTrans">
    /// A bom calculation transaction.
    /// </param>
    /// <returns>
    /// The cost price.
    /// </returns>
    /// <remarks>
    /// The return type has been changed to include a secondary currency.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// if called with unknown calculation fallback type.
    /// </exception>
    public container getCostPrice(
        RouteCostCategoryId _costCategoryId /*in*/,
        BOMCalcTrans        _bomCalcTrans   /*in-out*/)
    {
        RouteCostCategoryPrice routeCostCategoryPrice;
        BOMCalcItem localParentBOMCalcItem = this.parmParentBOMCalc() as BOMCalcItem;
        if (localParentBOMCalcItem.parmCostingVersionId())
        {
            routeCostCategoryPrice = RouteCostCategoryPrice::findCostingVersion(_costCategoryId,
                                                                                localParentBOMCalcItem.parmCostingVersionId(),
                                                                                localParentBOMCalcItem.parmCalcDate(),
                                                                                localParentBOMCalcItem.parmSiteId());
        }
        else
        {
            routeCostCategoryPrice = RouteCostCategoryPrice::findCurrentFlex(_costCategoryId, localParentBOMCalcItem.parmSiteId());
        }

        if (!routeCostCategoryPrice)
        {
            switch (localParentBOMCalcItem.parmBOMCalcFallBack())
            {
                case BOMCalcFallBack::None :
                    // Do not fetch a price from the fallback system
                    break;

                case BOMCalcFallBack::CurrentActive :
                    routeCostCategoryPrice = RouteCostCategoryPrice::findCurrentFlex(_costCategoryId, localParentBOMCalcItem.parmSiteId());
                    break;

                case BOMCalcFallBack::Simulated :
                    routeCostCategoryPrice = RouteCostCategoryPrice::findCostingVersion(_costCategoryId,
                                                                                        localParentBOMCalcItem.parmFallBackVersionId(),
                                                                                        localParentBOMCalcItem.parmCalcDate(),
                                                                                        localParentBOMCalcItem.parmSiteId());
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        this.updateWarnings(_costCategoryId, routeCostCategoryPrice, _bomCalcTrans);
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) &&
            InventTable::modelGroupByItemId(this.parmParentBOMCalc().parmItemId()).PostOnhandFinancialSecCur_RU)
        {
            return [routeCostCategoryPrice.Price, routeCostCategoryPrice.PriceSecCur_RU];
        }

        return [routeCostCategoryPrice.Price, 0];
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        this.initParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    protected void initParameters()
    {
        BOMCalcItem localParentBOMCalcItem = this.parmParentBOMCalc() as BOMCalcItem;

        if (localParentBOMCalcItem.parmPmfParentCalcId())
        {
            seriesSize      = localParentBOMCalcItem.parmPmfFormulaSeriesSize();
            actualConsumption = seriesSize;
        }
        else
        {
            seriesSize          = this.parmParentBOMCalc().parmSeriesSize();
            actualConsumption   = localParentBOMCalcItem.parmActualConsumptionInventQty();
        }

        BOMCalcData         = BOMCalcData::newInventTable(seriesSize,
                                                          this.parmParentBOMCalc().parmInventTable());

        bomCalcDataActual   = BOMCalcData::newInventTable(actualConsumption,
                                                          this.parmParentBOMCalc().parmInventTable());

        routeOpr            = route.routeOpr(localParentBOMCalcItem.parmItemId(),
                                             localParentBOMCalcItem.parmInventDim().ConfigId,
                                             localParentBOMCalcItem.parmSiteId(),
                                             null);

        routeGroup          = RouteGroup::find(routeOpr.RouteGroupId);

        this.initWrkCtrId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWrkCtrId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the WrkCtrId class member with the resource ID from the
    /// corresponding route operation.
    /// </summary>
    protected void initWrkCtrId()
    {
        BOMCalcItem localParentBOMCalcItem = this.parmParentBOMCalc() as BOMCalcItem;

        wrkCtrId            = routeOpr.getResource(true,
                                                   localParentBOMCalcItem.parmCalcDate(),
                                                   localParentBOMCalcItem.parmCalcDate(),
                                                   localParentBOMCalcItem.parmSiteId(),
                                                   true).WrkCtrId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBOMCalcTrans</Name>
				<Source><![CDATA[
    void insertBOMCalcTrans()
    {
        if (routeGroup.CalcSetUp && calcSetupTime)
        {
            this.insertBOMCalcTransSetup();
        }

        if (routeGroup.CalcProc && calcProcessTime)
        {
            this.insertBOMCalcTransProcess();
        }

        if (routeGroup.CalcQty && calcQty)
        {
            this.insertBOMCalcTransQty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBOMCalcTransProcess</Name>
				<Source><![CDATA[
    void insertBOMCalcTransProcess()
    {
        this.updateBOMCalcTrans(bomCalcTransProcess);

        bomCalcTransProcess.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBOMCalcTransQty</Name>
				<Source><![CDATA[
    void insertBOMCalcTransQty()
    {
        this.updateBOMCalcTrans(bomCalcTransQty);

        bomCalcTransQty.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBOMCalcTransSetup</Name>
				<Source><![CDATA[
    void insertBOMCalcTransSetup()
    {
        this.updateBOMCalcTrans(bomCalcTransSetup);

        bomCalcTransSetup.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentBOMCalc</Name>
				<Source><![CDATA[
    BOMCalcBase parmParentBOMCalc(BOMCalcBase _parentBOMCalcItem = parentBOMCalc)
    {
        BOMCalcItem ret;

        ret = super(_parentBOMCalcItem) as BOMCalcItem;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRoute</Name>
				<Source><![CDATA[
    Route parmRoute(Route _route = route)
    {
        route = _route;
        return route;
    }

]]></Source>
			</Method>
			<Method>
				<Name>phantomBOMFactor</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the factor that is used for unit conversion for a phantom item.
    /// </summary>
    /// <returns>
    ///    The factor that is used for unit conversion for a phantom item
    /// </returns>
    Factor phantomBOMFactor()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOMCalcTrans</Name>
				<Source><![CDATA[
    void updateBOMCalcTrans(BOMCalcTrans _bomCalcTrans)
    {
        BOMCalcItem localParentBOMCalcItem = this.parmParentBOMCalc() as BOMCalcItem;
        this.setLineNum();
        this.updateUnitId(_bomCalcTrans);

        _bomCalcTrans.PriceCalcId           = localParentBOMCalcItem.parmPriceCalcId();

        _bomCalcTrans.TransDate             = localParentBOMCalcItem.parmCalcDate();
        _bomCalcTrans.Qty                   = localParentBOMCalcItem.topParentQty();
        _bomCalcTrans.Level                 = localParentBOMCalcItem.parmLevel() + 1;

        _bomCalcTrans.LineNum               = lineNum;

        _bomCalcTrans.OprPriority           = route.OprPriority;

        _bomCalcTrans.Resource              = wrkCtrId;
        _bomCalcTrans.OprId                 = route.OprId;
        _bomCalcTrans.InventDimStr          = '';

        _bomCalcTrans.bom                   = NoYes::No;
        _bomCalcTrans.CostPriceModelUsed    = BOMCalcCostPriceUsed::None;
        _bomCalcTrans.SalesPriceModelUsed   = BOMCalcSalesPriceUsed::None;

        _bomCalcTrans.OprNum                = route.OprNum;
        _bomCalcTrans.RouteLevel            = route.Level;
        _bomCalcTrans.OprNumNext            = route.OprNumNext;

        this.updateNumOfSeries(_bomCalcTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNumOfSeries</Name>
				<Source><![CDATA[
    void updateNumOfSeries(BOMCalcTrans _bomCalcTrans)
    {
        BOMCalcItem localParentBOMCalcItem = this.parmParentBOMCalc() as BOMCalcItem;

        if (this.parmParentBOMCalc().parmLevel() == 0                                                   ||
            localParentBOMCalcItem.parmBOM().type().mustBeDerivedDirectly()                           ||
            localParentBOMCalcItem.parmBomCalcExplosionMode() == BOMCalcExplosionMode::MakeToOrder    ||
            !_bomCalcTrans.CostMarkup)
        {
            _bomCalcTrans.NumOfSeries = 1;
        }
        else
        {
            if (actualConsumption && seriesSize)
            {
                _bomCalcTrans.NumOfSeries = actualConsumption / seriesSize;
            }
            else
            {
                _bomCalcTrans.NumOfSeries = 1;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParent</Name>
				<Source><![CDATA[
    void updateParent()
    {
        BOMCalcItem localParentBOMCalcItem = this.parmParentBOMCalc() as BOMCalcItem;
        if (routeGroup.CalcSetUp && calcSetupTime)
        {
            localParentBOMCalcItem.updateCalcPrices(bomCalcTransSetup);
            localParentBOMCalcItem.updateActualPrices(bomCalcTransSetup);
            localParentBOMCalcItem.updateCostCalcTransData(bomCalcTransSetup);
        }

        if (routeGroup.CalcProc && calcProcessTime)
        {
            localParentBOMCalcItem.updateCalcPrices(bomCalcTransProcess);
            localParentBOMCalcItem.updateActualPrices(bomCalcTransProcess);
            localParentBOMCalcItem.updateCostCalcTransData(bomCalcTransProcess);
        }

        if (routeGroup.CalcQty && calcQty)
        {
            localParentBOMCalcItem.updateCalcPrices(bomCalcTransQty);
            localParentBOMCalcItem.updateActualPrices(bomCalcTransQty);
            localParentBOMCalcItem.updateCostCalcTransData(bomCalcTransQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrices</Name>
				<Source><![CDATA[
    void updatePrices(BOMCalcTrans    _bomCalcTrans,
                      Amount          _costPrice,
                      Amount          _costMarkup,
                      Amount          _salesPrice,
                      Amount          _salesMarkup,
                      Amount          _costPriceSecCur  = 0,
                      Amount          _costMarkupSecCur = 0)
    {
        BOMCalcItem localParentBOMCalcItem = this.parmParentBOMCalc() as BOMCalcItem;
        Qty         totalConsump    = _bomCalcTrans.ConsumptionVariable + _bomCalcTrans.ConsumptionConstant;
        Qty         topParentQty    = localParentBOMCalcItem.topParentQty();

        _bomCalcTrans.CostPrice      = _costPrice;
        _bomCalcTrans.CostMarkup     = _costMarkup;
        _bomCalcTrans.CostPriceUnit  = 1;
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            _bomCalcTrans.CostPriceSecCur_RU    = _costPriceSecCur;
            _bomCalcTrans.CostMarkupSecCur_RU   = _costMarkupSecCur;
        }
        // </GEERU>

        _bomCalcTrans.SalesPrice     = _salesPrice;
        _bomCalcTrans.SalesMarkup    = _salesMarkup;
        _bomCalcTrans.SalesPriceUnit = 1;

        _bomCalcTrans.CostPriceQty   = _costPrice *  (totalConsump / topParentQty);
        _bomCalcTrans.CostMarkupQty  = _costMarkup;
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            _bomCalcTrans.CostPriceQtySecCur_RU     = _costPriceSecCur *  (totalConsump / topParentQty);
            _bomCalcTrans.CostMarkupQtySecCur_RU    = _costMarkupSecCur;
        }
        // </GEERU>
        _bomCalcTrans.SalesPriceQty  = _salesPrice * (totalConsump / topParentQty);
        _bomCalcTrans.SalesMarkupQty = _salesMarkup;

        if (_costMarkup || _salesMarkup)
        {
            // Constant costs are added to variable ones if the parent BOM has linetype 'Item'. When BOM level==0 it is the same as linetype Production.
            if (this.parmParentBOMCalc().parmLevel() != 0                           &&
                !localParentBOMCalcItem.parmBOM().type().mustBeDerivedDirectly()  &&
                localParentBOMCalcItem.parmBomCalcExplosionMode() != BOMCalcExplosionMode::MakeToOrder)
            {
                InventQty const2VarFactor = 1;
                if (FeatureStateProvider::isFeatureEnabled(CostBOMCalcConvertConst2VarianceFactorToggle::instance()))
                {
                    const2VarFactor = actualConsumption && seriesSize ? actualConsumption / seriesSize : 1;
                }
                _bomCalcTrans.CostPriceQty      = _bomCalcTrans.CostPriceQty  + (_bomCalcTrans.CostMarkupQty * const2VarFactor / topParentQty);
                _bomCalcTrans.SalesPriceQty     = _bomCalcTrans.SalesPriceQty + (_bomCalcTrans.SalesMarkupQty * const2VarFactor / topParentQty);
                _bomCalcTrans.CostMarkupQty     = 0;
                _bomCalcTrans.SalesMarkupQty    = 0;
                // <GEERU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
                {
                    _bomCalcTrans.CostPriceQtySecCur_RU     = _bomCalcTrans.CostPriceQtySecCur_RU  + (_bomCalcTrans.CostMarkupQtySecCur_RU / topParentQty);
                    _bomCalcTrans.CostMarkupQtySecCur_RU    = 0;
                }
                // </GEERU>
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUnitId</Name>
				<Source><![CDATA[
    void updateUnitId(BOMCalcTrans _bomCalcTrans)
    {
        switch (_bomCalcTrans.CalcType)
        {
            // Setup time
            case ItemCalcType::Setup    :
            // Process time
            case ItemCalcType::Process  :
                // no unit id
                break;

            // Process qty
            case ItemCalcType::Qty      :
                _bomCalcTrans.UnitId    = this.parmParentBOMCalc().parmInventUnitId();
                break;

            default:
                throw error("@SYS97917");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWarnings</Name>
				<Source><![CDATA[
    protected void updateWarnings(
        RouteCostCategoryId     _costCategoryId,
        RouteCostCategoryPrice  _routeCostCategoryPrice,
        BOMCalcTrans            _bomCalcTrans)
    {
        BOMCalcCheckOper bomCalcCheckOper;
        BOMCalcItem      localParentBOMCalcItem = this.parmParentBOMCalc() as BOMCalcItem;

        bomCalcCheckOper = BOMCalcCheckOper::newBOMCalcBase(this.parmParentBOMCalc());
        bomCalcCheckOper.checkUseFallBack(_costCategoryId, localParentBOMCalcItem.parmCostingVersionId(), _routeCostCategoryPrice.VersionId);
        bomCalcCheckOper.checkNoCostPrice(_costCategoryId, _routeCostCategoryPrice.RecId != 0);
        bomCalcCheckOper.checkZeroCostPrice(_costCategoryId, _routeCostCategoryPrice.Price, _routeCostCategoryPrice.RecId != 0);
        bomCalcCheckOper.checkNoResource(wrkCtrId);

        if (bomCalcCheckOper.hasMessages())
        {
            _bomCalcTrans.Infolog = bomCalcCheckOper.getMessages();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        boolean ret = true;

        if (!route)
        {
            ret = checkFailed(strfmt("@SYS29104", classstr(BOMCalcItemOper)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static BOMCalcItemOper construct()
    {
        return new BOMCalcItemOper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRoute</Name>
				<Source><![CDATA[
    static BOMCalcItemOper newRoute(Route        _route,
                                           BOMCalcItem  _parentBOMCalcItem)
    {
        BOMCalcItemOper bomCalcItemOper = BOMCalcItemOper::construct();

        bomCalcItemOper.parmRoute(_route.data());
        bomCalcItemOper.parmParentBOMCalc(_parentBOMCalcItem);

        return bomCalcItemOper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>