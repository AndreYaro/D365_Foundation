<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalFormTrans_Payment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalFormTrans_Payment</c> class helps with form initialization and managing the
///    enabled state of controls.
/// </summary>
class LedgerJournalFormTrans_Payment extends LedgerJournalFormTrans
{
    // <GEERU>
    FormTabPageControl ctrlOrderPaymentTab;
    // </GEERU>
    str prevEnablePaymStatusFieldsKey;

    private FormButtonControl ctrlSelectSettledBillsButton;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableAgreementFields_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables <c>AccountAgreementId_RU</c> and <c>OffsetAccountAgreementId_RU</c> fields for the active event for the data source.
    /// </summary>
    public void enableAgreementFields_RU()
    {
        boolean isPaymentOrder = (ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Rejected
            && (ledgerJournalTrans.BankCurrencyTransferLog_RU || ledgerJournalTrans.existBankPaymentOrderJour_RU()));

        if (!isPaymentOrder && !ledgerJournalTrans.BankChequeNum)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables controls for ledger journal payment lines forms.
    /// </summary>
    public void enableButtonsActive()
    {
        LedgerJournalTable ledgerJournalTable = ledgerJournalEngine.parmLedgerJournalTable();

        super();

        if (isProcessingPaymentOnAprovedJournal)
        {
            this.setFunctionAndSubmenuForProcessPayments();
        }

        switch (ledgerJournalTable.JournalType)
        {
            // Perform form-specific control enabling/disabling.
            case LedgerJournalType::Payment:
                this.setCreatePaymentsButtonEnabled();
                if (!isProcessingPaymentOnAprovedJournal)
                {
                    this.setChangePaymentMethodButtonEnabled();
                }

                if (CFMParameters::isPaymentRequestsEnabled())
                {
                    this.setPaymentProposalButtonEnabled();
                    this.setFunctionAndSubmenuForProcessPayments();
                }
                break;

            case LedgerJournalType::VendPromissoryNoteDraw:
                this.setCreatePaymentsButtonEnabled();
                this.setPaymentStatusButtonEnabled();
                this.setPaymentProposalButtonEnabled();
                break;

            case LedgerJournalType::VendPromissoryNoteRedraw:
                this.setCreatePaymentsButtonEnabled();
                this.setCancelPromissoryNoteButton();
                this.setPaymentStatusButtonEnabled();

                if (!isProcessingPaymentOnAprovedJournal)
                {
                    this.setCancelNoteOrDocumentButtonEnabled();
                    this.setSelectSettledNoteButtonEnabled();
                }
                break;

            case LedgerJournalType::VendPromissoryNoteSettle:
                this.setCreatePaymentsButtonEnabled();
                this.setPaymentProposalButtonEnabled();
                break;

            case LedgerJournalType::VendPaymRemittance:
                this.setCreatePaymentsButtonEnabled();
                this.setPaymentStatusButtonEnabled();
                this.setPaymentProposalButtonEnabled();
                break;

            case LedgerJournalType::CustPayment:
                this.setCreatePaymentsButtonEnabled();

                if (!isProcessingPaymentOnAprovedJournal)
                {
                    this.setImportPaymentsButtonEnabled();
                    this.setExecutionDateButtonEnabled();
                }
                break;

            case LedgerJournalType::CustBillOfExchangeDraw:
                this.setCreatePaymentsButtonEnabled();
                this.setPaymentStatusButtonEnabled();
                this.setPaymentProposalButtonEnabled();

                if (!isProcessingPaymentOnAprovedJournal)
                {
                    this.setCancelNoteOrDocumentButtonEnabled();
                }
                break;

            case LedgerJournalType::CustBillOfExchangeProtest:
                this.setCreatePaymentsButtonEnabled();
                this.setPaymentStatusButtonEnabled();
                this.setPaymentProposalButtonEnabled();

                if (LedgerJournalTransProtestBOEDisableSelectButtonWhenPostedFlight::instance().isEnabled()
                    && ctrlSelectSettledBillsButton && ctrlSelectSettledBillsButton.visible())
                {
                    ctrlSelectSettledBillsButton.enabled(!ledgerJournalTable.Posted);
                }

                if (!isProcessingPaymentOnAprovedJournal)
                {
                    this.setCancelNoteOrDocumentButtonEnabled();
                }
                break;

            case LedgerJournalType::CustBillOfExchangeRedraw:
                this.setCreatePaymentsButtonEnabled();
                this.setPaymentStatusButtonEnabled();
                this.setPaymentProposalButtonEnabled();

                if (!isProcessingPaymentOnAprovedJournal)
                {
                    this.setCancelNoteOrDocumentButtonEnabled();
                }
                break;

            case LedgerJournalType::CustBillOfExchangeSettle:
                this.setCreatePaymentsButtonEnabled();
                this.setPaymentProposalButtonEnabled();
                break;

            case LedgerJournalType::CustPaymRemittance:
                this.setCreatePaymentsButtonEnabled();
                this.setPaymentStatusButtonEnabled();
                this.setPaymentProposalButtonEnabled();
                break;

            case LedgerJournalType::PayrollDisbursement:
                this.setCreatePaymentsButtonEnabled();
                break;

            default:
                break;
        }

        if (ledgerJournalTrans.isBankDocumentPayment())
        {
            this.setPaymentReconciliationButtonEnabled();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCompanyField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Controls whether the <c>Company</c> field of the <c>LedgerJournalTrans</c> data source is editable
    ///    based on whether the <c>LedgerAdvIntercompanyAccounting</c> configuration key is enabled.
    /// </summary>
    public void enableCompanyField()
    {
        FormDataSource ledgerJournalDS = formRun.dataSource();

        if (ledgerJournalDS.table() == tableNum(LedgerJournalTrans))
        {
            ledgerJournalDS.object(fieldNum(LedgerJournalTrans, Company)).enabled(isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFieldsActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables fields on the active event for the data source.
    /// </summary>
    void enableFieldsActive()
    {
        super();

        this.enableCompanyField();
        this.enablePaymStatusFields();

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.enableOrderPaymentFields_RU();

            // it is need to call this function once more
            // because enablePaymStatusFields() enable all fields
            this.enableAgreementFields_RU();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableOrderPaymentFields_RU</Name>
				<Source><![CDATA[
    public void enableOrderPaymentFields_RU()
    {
        CustVendPaymModeTable custVendPaymModeTable;
        boolean show = false;

        if (!ctrlOrderPaymentTab)
        {
            return;
        }

        if (ledgerJournalTrans.PaymMode)
        {
            custVendPaymModeTable = CustVendPaymModeTable::findCommon(ledgerJournalTrans);

            if (custVendPaymModeTable)
            {
                show = custVendPaymModeTable.ClassId == classnum(CustOutPaym_MST_RU)
                    || custVendPaymModeTable.ClassId == classnum(VendOutPaym_MST_RU);
            }
        }

        ctrlOrderPaymentTab.visible(show);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditBasedOnPaymentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not allow edit should be considered based on payment status.
    /// </summary>
    /// <returns>true if allow edit should be considered; otherwise, false.</returns>
    protected boolean allowEditBasedOnPaymentStatus()
    {
        return ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Sent || ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Confirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enablePaymStatusFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Allows or disallows editing of the fields in the <c>LedgerJournalTrans</c> data source.
    /// </summary>
    public void enablePaymStatusFields()
    {
        if (!journalTrans_ds)
        {
            return;
        }

        DictTable dictTable = new DictTable(ledgerJournalTrans.TableId);
        boolean isAllowEdit;
        LedgerJournalTable ledgerJournalTable = ledgerJournalEngine.parmLedgerJournalTable();
        boolean isNotSubmitted = (ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::NotSubmitted);

        // <GEERU>
        boolean isPaymentOrder;
        // </GEERU>

        //  It is expensive to use reflection and turn off allow editing for each field.
        //  Use the current and previous keys to know when we need to reset .allowEdit(true/false).
        str enablePaymStatusFieldsKey = this.getEnablePaymStatusFieldsKey(isNotSubmitted);
        if (enablePaymStatusFieldsKey == prevEnablePaymStatusFieldsKey)
        {
            return;
        }

        boolean isBankDocumentPayment = ledgerJournalTrans.isBankDocumentPayment();

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            isPaymentOrder = (ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Rejected
                && (ledgerJournalTrans.BankCurrencyTransferLog_RU
                    || ledgerJournalTrans.existBankPaymentOrderJour_RU()));
        }
        // </GEERU>

        if (this.allowEditBasedOnPaymentStatus()
            || isBankDocumentPayment
            // <GEERU>
            || isPaymentOrder)
            // </GEERU>
        {
            if (enablePaymStatusFieldsKey != prevEnablePaymStatusFieldsKey)
            {
                for (int i = 1; i <= dictTable.fieldCnt(); i++)
                {
                    FieldId fieldId = dictTable.fieldCnt2Id(i);
                    FormDataObject objectLedgerJournalTrans = journalTrans_ds.object(fieldId);

                    if (objectLedgerJournalTrans)
                    {
                        if ((!ledgerJournalTrans.BankChequeNum)
                            // <GEERU>
                            && (!isPaymentOrder)
                            // </GEERU>
                            && (!ledgerJournalTrans.ElectronicPaymentNumber)
                            && (fieldNum(LedgerJournalTrans, DefaultDimension) == fieldId
                                || fieldNum(LedgerJournalTrans, Txt) == fieldId
                                || fieldNum(LedgerJournalTrans, OffsetTxt) == fieldId
                                || fieldNum(LedgerJournalTrans, ExchRate) == fieldId
                                || fieldNum(LedgerJournalTrans, PostingProfile) == fieldId
                                || fieldNum(LedgerJournalTrans, BankTransType) == fieldId
                                || (fieldNum(LedgerJournalTrans, PaymReference) == fieldId
                                    && !ledgerJournalTrans.BankChequeNum
                                    && !ledgerJournalTrans.ElectronicPaymentNumber)
                                // <GEERU>
                                || (fieldNum(LedgerJournalTrans, TransDate) == fieldId
                                    && ledgerJournalTrans.SettleVoucher != SettlementType::SelectedTransact)
                                || fieldNum(LedgerJournalTrans, AccountAgreementId_RU) == fieldId
                                || fieldNum(LedgerJournalTrans, OffsetAccountAgreementId_RU) == fieldId))
                                // </GEERU>
                        {
                            isAllowEdit = true;

                            if (fieldNum(LedgerJournalTrans, ExchRate) == fieldId && ledgerJournalTrans.BankCurrencyAmount != 0)
                            {
                                isAllowEdit = false;
                            }
                        }
                        else
                        {
                            isAllowEdit = isActiveWFApprovalDocument
                                && isNotSubmitted
                                && fieldNum(LedgerJournalTrans, PaymentStatus) == fieldId
                                && !ledgerJournalTrans.BankChequeNum;
                        }

                        objectLedgerJournalTrans.allowEdit(isAllowEdit);

                        // Dimension fields
                        if (fieldNum(LedgerJournalTrans, DefaultDimension) == fieldId)
                        {
                            LedgerJournalFormTrans_Payment::formDataSourceDimensionsAllowEdit(
                                journalTrans_ds,
                                fieldId,
                                isAllowEdit);
                        }

                        if (fieldNum(LedgerJournalTrans, ExchRate) == fieldId)
                        {
                            if (ctrlExchRate)
                            {
                                ctrlExchRate.allowEdit(isAllowEdit);
                            }
                        }
                    }
                }
            }

            if (ctrlExchRateSecond)
            {
                ctrlExchRateSecond.allowEdit(false);
            }
        }
        else
        {
            for (int i = 1; i <= dictTable.fieldCnt(); i++)
            {
                FieldId fieldId = dictTable.fieldCnt2Id(i);
                FormDataObject objectLedgerJournalTrans = journalTrans_ds.object(fieldId);
                if (objectLedgerJournalTrans)
                {
                    isAllowEdit = !isActiveWFApprovalDocument
                        || isNotSubmitted
                        || fieldNum(LedgerJournalTrans, PaymentStatus) != fieldId;

                    objectLedgerJournalTrans.allowEdit(isAllowEdit);

                    // Dimension fields
                    if (fieldNum(LedgerJournalTrans, DefaultDimension) == fieldId)
                    {
                        LedgerJournalFormTrans_Payment::formDataSourceDimensionsAllowEdit(
                            journalTrans_ds,
                            fieldId,
                            objectLedgerJournalTrans.allowEdit());
                    }
                }
            }

            // <GEERU>
            if (ledgerJournalTrans.SettleVoucher == SettlementType::SelectedTransact
                && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                FormDataObject objectLedgerJournalTrans = journalTrans_ds.object(fieldNum(LedgerJournalTrans, TransDate));
                if (objectLedgerJournalTrans)
                {
                    objectLedgerJournalTrans.allowEdit(false);
                }
            }
            // </GEERU>

            if (ctrlExchRate)
            {
                ctrlExchRate.allowEdit(true);
            }

            if (ctrlExchRateSecond)
            {
                ctrlExchRateSecond.allowEdit(true);
            }
        }
        prevEnablePaymStatusFieldsKey = enablePaymStatusFieldsKey;

        this.enablePaymStatusFields_W();
        if (ledgerJournalTable.isTaxIntegrationEnabled())
        {
            this.enablePaymStatusFieldsTaxExtension();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoDE])
            && this.ledgerJournalEngine is LedgerJournalEngine_VendPayment)
        {
            this.enablePaymStatusFields_DE();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enablePaymStatusFields_DE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows or disallows editing of the fields in the <c>PaymentMessageTable_DEDTAZV</c> <c>PaymentMessageLines_DEDTAZV</c> data source.
    /// </summary>
    protected void enablePaymStatusFields_DE()
    {
        FormDataSource paymentMessageTable_DS = getJoinChildFormDataSource(journalTrans_ds, tableNum(PaymentMessageTable_DEDTAZV));
        FormDataSource paymentMessageLines_DS = getJoinChildFormDataSource(paymentMessageTable_DS, tableNum(PaymentMessageLines_DEDTAZV));

        boolean enabled = ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::Sent
            && ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::Confirmed;

        paymentMessageTable_DS.allowEdit(enabled);
        paymentMessageLines_DS.allowCreate(enabled);
        paymentMessageLines_DS.allowEdit(enabled);
        paymentMessageLines_DS.allowDelete(enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditBasedOnPaymentStatus_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether allow edit should be true based on payment status.
    /// </summary>
    /// <returns>true is allow edit; otherwise, false.</returns>
    protected boolean allowEditBasedOnPaymentStatus_W()
    {
        return ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::Sent && ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::Confirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enablePaymStatusFields_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Allows or disallows editing of the fields in the <c>LedgerJournalTrans_W</c> data source.
    /// </summary>
    protected void enablePaymStatusFields_W()
    {
        FormDataSource ledgerJournalTrans_W_DS = getJoinChildFormDataSource(journalTrans_ds, tableNum(LedgerJournalTrans_W));
        if (ledgerJournalTrans_W_DS)
        {
            DictTable dictTable = new DictTable(tableNum(LedgerJournalTrans_W));
            boolean allowEdit = this.allowEditBasedOnPaymentStatus_W();

            for (int i = 1; i <= dictTable.fieldCnt(); i++)
            {
                FormDataObject objectLedgerJournalTrans_W = ledgerJournalTrans_W_DS.object(dictTable.fieldCnt2Id(i));
				
				if (objectLedgerJournalTrans_W)
                {
                    objectLedgerJournalTrans_W.allowEdit(allowEdit);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enablePaymStatusFieldsTaxExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows or disallows editing of the fields in the <c>LedgerJournalTransTaxExtension</c> data source.
    /// </summary>
    protected void enablePaymStatusFieldsTaxExtension()
    {
        FormDataSource ledgerJournalTransTaxExtension_DS = getJoinChildFormDataSource(journalTrans_ds, tableNum(LedgerJournalTransTaxExtension));

        if (ledgerJournalTransTaxExtension_DS)
        {
            boolean allowEdit = this.allowEditBasedOnPaymentStatus_W();
            DictTable dictTable = new DictTable(tableNum(LedgerJournalTrans));

            for (int i = 1; i <= dictTable.fieldCnt(); i++)
            {
                FormDataObject objectLedgerJournalTransTaxExtension = ledgerJournalTransTaxExtension_DS.object(dictTable.fieldCnt2Id(i));
                if (objectLedgerJournalTransTaxExtension)
                {
                    objectLedgerJournalTransTaxExtension.allowEdit(allowEdit);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldGetFieldsKeyBasedOnPaymentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not the fields key should be determined based off of payment status.
    /// </summary>
    /// <returns>true if the fields key should be determined based off of payment status; otherwise, false.</returns>
    protected boolean shouldGetFieldsKeyBasedOnPaymentStatus()
    {
        return ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Sent || ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Confirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnablePaymStatusFieldsKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Builds the enable payment status fields key based on the current <c>LedgerJournalTrans</c> information.
    /// </summary>
    /// <param name="_isNotSubmitted">
    ///  The workflow approval status not submitted is true, otherwise false.
    /// </param>
    /// <returns>
    ///  A key that identfies the information to allow enable payment status fields editing logic.
    /// </returns>
    protected str getEnablePaymStatusFieldsKey(boolean _isNotSubmitted)
    {
        str key;

        if (this.shouldGetFieldsKeyBasedOnPaymentStatus())
        {
            boolean isBankChequeNum = !ledgerJournalTrans.BankChequeNum;
            boolean isElectronicPaymentNumber = !ledgerJournalTrans.ElectronicPaymentNumber;
            boolean isSettleVoucher = ledgerJournalTrans.SettleVoucher != SettlementType::SelectedTransact;

            key = '0' + '|'
                + enum2str(isActiveWFApprovalDocument) + '|'
                + enum2str(_isNotSubmitted) + '|'
                + enum2str(isBankChequeNum) + '|'
                + enum2str(isElectronicPaymentNumber) + '|'
                + enum2str(isSettleVoucher);
        }
        else
        {
            key = '1' + '|'
                + enum2str(isActiveWFApprovalDocument) + '|'
                + enum2str(_isNotSubmitted);
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the current value of the LedgerJournalType which is used to verify if the Payment journal form needs to be opened or not. This is needed because
    /// the class gets initialized when the list page is opened which also tries to run the logic in the payment journal form without actually opening the form.
    /// </summary>
    /// <returns>
    /// Current value of the LedgerJournalType.
    /// </returns>
    public Integer getJournalTypeId()
    {
        return initJournalTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlOrderPaymentTab_RU</Name>
				<Source><![CDATA[
    public FormTabPageControl parmCtrlOrderPaymentTab_RU(FormTabPageControl _ctrlOrderPaymentTab = ctrlOrderPaymentTab)
    {
        ctrlOrderPaymentTab = _ctrlOrderPaymentTab;
        return ctrlOrderPaymentTab;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCancelNoteOrDocumentButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled state of the button.
    /// </summary>
    protected void setCancelNoteOrDocumentButtonEnabled()
    {
        if (ctrlCancelNoteOrDocumentButton)
        {
            boolean enabled = true;
            if (isActiveWFApprovalDocument)
            {
                enabled = enabled && isUIElementWFApprovalEnabled;
            }

            ctrlCancelNoteOrDocumentButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCancelPromissoryNoteButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled state of the button.
    /// </summary>
    protected void setCancelPromissoryNoteButton()
    {
        if (ctrlBankPromissoryNoteCancelButton)
        {
            boolean enabled = true;
            if (isActiveWFApprovalDocument)
            {
                enabled = enabled && isUIElementWFApprovalEnabled;
            }

            ctrlBankPromissoryNoteCancelButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setChangePaymentMethodButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled state of the button.
    /// </summary>
    protected void setChangePaymentMethodButtonEnabled()
    {
        if (ctrlChangePaymentMethodButton)
        {
            boolean enabled = this.isJournalEnabled();

            if (isActiveWFApprovalDocument)
            {
                enabled = enabled && isUIElementWFApprovalEnabled;
            }

            ctrlChangePaymentMethodButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCreatePaymentsButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled state of the button.
    /// </summary>
    protected void setCreatePaymentsButtonEnabled()
    {
        boolean enabled = this.isJournalEnabled();

        if (ctrlCreatePaymentButton)
        {
            // Determine if create payments is available for this journal type.
            switch  (ledgerJournalEngine.parmLedgerJournalTable().JournalType)
            {
                case LedgerJournalType::CustBillOfExchangeDraw,
                     LedgerJournalType::CustBillOfExchangeRedraw,
                     LedgerJournalType::CustPaymRemittance,
                     LedgerJournalType::VendPromissoryNoteDraw,
                     LedgerJournalType::VendPromissoryNoteRedraw,
                     LedgerJournalType::VendPaymRemittance,
                     LedgerJournalType::CustPayment,
                     LedgerJournalType::PayrollDisbursement,
                     LedgerJournalType::Payment:
                     // Create payments is available on these journals
                    break;

                default :
                     // Create payments is strictly disabled for other journal types
                    enabled = false;
            }

            if (isActiveWFApprovalDocument)
            {
                // The journal should only be enabled for approved journals.
                enabled = enabled && isProcessingPaymentOnAprovedJournal;
            }
            else
            {
                // The prior code only applied the approved condition to two journal types.
                // This functionality was retained, and investigation is under way if this is a bug.
                LedgerJournalType journalType = ledgerJournalEngine.parmLedgerJournalTable().JournalType;
                if (journalType == LedgerJournalType::Payment
                    || journalType == LedgerJournalType::CustBillOfExchangeDraw
                    || journalType == LedgerJournalType::VendPromissoryNoteDraw
                    || journalType == LedgerJournalType::CustPayment
                    || journalType == LedgerJournalType::CustBillOfExchangeReDraw
                    || journalType == LedgerJournalType::VendPromissoryNoteRedraw
                    || journalType == LedgerJournalType::CustPaymRemittance
                    || journalType == ledgerJournalType::VendPaymRemittance)
                {
                    enabled = enabled && ledgerJournalEngine.approved();
                }
            }

            ctrlCreatePaymentButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExecutionDateButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled state of the button.
    /// </summary>
    protected void setExecutionDateButtonEnabled()
    {
        if (ctrlExecutionDateButton)
        {
            boolean enabled = true;
            if (isActiveWFApprovalDocument)
            {
                enabled = enabled && isUIElementWFApprovalEnabled;
            }

            ctrlExecutionDateButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFunctionAndSubmenuForProcessPayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the function button and all of the menu items on that button, except for the Generate Payments
    /// menu item, to the correct enabled state for processing payments on approved journals mode.
    /// </summary>
    /// <remarks>
    /// The Generate Payments menu item is managed by the <c>setGeneratePaymentsButtonEnabled</c> method.
    /// </remarks>
    protected void setFunctionAndSubmenuForProcessPayments()
    {
        if (ctrlFunctionMenu)
        {
            // Enable the function menu.
            ctrlFunctionMenu.enabled(true);
        }

        // Disable most of the function menu's buttons.

        if (ctrlSettlementButton)
        {
            ctrlSettlementButton.enabled(false);

            if (CFMParameters::isPaymentRequestsEnabled())
            {
                ctrlSettlementButton.enabled(!CFMPaymentRequestPaymentLink::isGeneratedFromPaymentSchedule(ledgerJournalTrans));
            }
        }

        if (ctrlDepositSlipButton)
        {
            ctrlDepositSlipButton.enabled(false);
        }

        if (ctrlJournalTextsButton)
        {
            ctrlJournalTextsButton.enabled(false);
        }

        if (ctrlDeleteTransactionsButton)
        {
            ctrlDeleteTransactionsButton.enabled(false);
        }

        if (ctrlGetTransactionsButton)
        {
            ctrlGetTransactionsButton.enabled(false);
        }

        if (ctrlChangePaymentMethodButton)
        {
            ctrlChangePaymentMethodButton.enabled(false);
        }

        if (ctrlCancelNoteOrDocumentButton)
        {
            ctrlCancelNoteOrDocumentButton.enabled(false);
        }

        if (ctrlSelectSettledNoteButton)
        {
            ctrlSelectSettledNoteButton.enabled(false);
        }

        if (ctrlImportPaymentsButton)
        {
            ctrlImportPaymentsButton.enabled(false);
        }

        if (ctrlExecutionDateButton)
        {
            ctrlExecutionDateButton.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setImportPaymentsButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled state of the button.
    /// </summary>
    protected void setImportPaymentsButtonEnabled()
    {
        if (ctrlImportPaymentsButton)
        {
            boolean enabled = this.isJournalEnabled();
            if (isActiveWFApprovalDocument)
            {
                enabled = enabled && isUIElementWFApprovalEnabled;
            }

            ctrlImportPaymentsButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentProposalButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled state of the button.
    /// </summary>
    protected void setPaymentProposalButtonEnabled()
    {
        if (ctrlPaymentProposalMenu)
        {
            boolean enabled = this.isJournalEnabled();
            if (isActiveWFApprovalDocument)
            {
                enabled = enabled && isUIElementWFApprovalEnabled;
            }

            if (CFMParameters::isPaymentRequestsEnabled())
            {
                enabled = enabled && !CFMPaymentRequestPaymentLink::isGeneratedFromPaymentSchedule(ledgerJournalTrans);
            }

            ctrlPaymentProposalMenu.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentReconciliationButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled state of the payment reconciliation button.
    /// </summary>
    protected void setPaymentReconciliationButtonEnabled()
    {
        if (ctrlPaymentReconciliationButton)
        {
            boolean enabled = true;
            if (ledgerJournalTrans.isBankDocumentPayment())
            {
                if (BankDocument::construct(ledgerJournalTrans).getIsReconciled())
                {
                    enabled = false;
                }
            }

            ctrlPaymentReconciliationButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentStatusButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled state of the button.
    /// </summary>
    protected void setPaymentStatusButtonEnabled()
    {
        if (ctrlPaymentStatusMenu)
        {
            boolean enabled = true;
            if (isActiveWFApprovalDocument)
            {
                enabled = enabled && isPayStatusButtonAvailForWFApproval;
            }

            ctrlPaymentStatusMenu.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPostMenuButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the post button on the lines form.
    /// </summary>
    protected void setPostMenuButtonEnabled()
    {
        boolean enabled;
        ledgerJournalTable ledgerJournalTableLocal;

        super();

        // only test for Italian functionality if the menu item should be displayed
        // so current functionality is not overridden.
        if (ctrlPostJournalMenu)
        {
            enabled = ctrlPostJournalMenu.enabled();
        }
        else if (ctrlPostJournalButton)
        {
            // ctrlPostJournalButton and ctrlPostAndTransferJournalButton are linked
            // and should always share the same state.
            enabled = ctrlPostJournalButton.enabled();
        }
        else if (ctrlPostAndTransferJournalButton)
        {
            enabled = ctrlPostAndTransferJournalButton.enabled();
        }
        else
        {
            enabled = false;
        }

        if (ledgerJournalEngine && ledgerJournalEngine.parmLedgerJournalTable())
        {
            ledgerJournalTableLocal = ledgerJournalEngine.parmLedgerJournalTable();
        }
        else
        {
            ledgerJournalTableLocal = ledgerJournalTrans.ledgerJournalTable();
        }

        if (enabled
            && ledgerJournalTableLocal.JournalType == LedgerJournalType::Payment
            && (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT])))
        {
            enabled = ledgerJournalTableLocal.allowPosting_IT();
        }

        if (ctrlPostJournalMenu)
        {
            ctrlPostJournalMenu.enabled(enabled);
        }
        else
        {
            if (ctrlPostJournalButton)
            {
                ctrlPostJournalButton.enabled(enabled);
            }

            if (ctrlPostAndTransferJournalButton)
            {
                ctrlPostAndTransferJournalButton.enabled(enabled);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelectSettledNoteButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled state of the button.
    /// </summary>
    protected void setSelectSettledNoteButtonEnabled()
    {
        if (ctrlSelectSettledNoteButton)
        {
            boolean enabled = true;
            if (isActiveWFApprovalDocument)
            {
                enabled = enabled && isUIElementWFApprovalEnabled;
            }

            ctrlSelectSettledNoteButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCtrlSelectSettledBillsButton</Name>
				<Source><![CDATA[
    internal void setCtrlSelectSettledBillsButton(FormButtonControl _ctrlSelectSettledBillsButton)
    {
        ctrlSelectSettledBillsButton = _ctrlSelectSettledBillsButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formDataSourceDimensionsAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>allowEdit</c> property of the extended form data source fields for the dimension array.
    /// </summary>
    /// <param name="_formDataSource">
    ///    A form data source.
    /// </param>
    /// <param name="_fieldId">
    ///    The field ID of the dimension array field.
    /// </param>
    /// <param name="_allowEdit">
    ///    An allow edit flag.
    /// </param>
    /// <param name="_mapFieldObjects">
    ///    A map with already extended field objects that are used for accessing a set of individual array fields from the array; optional.
    /// </param>
    static void formDataSourceDimensionsAllowEdit(
        FormDataSource _formDataSource,
        fieldId _fieldId,
        boolean _allowEdit,
        Map _mapFieldObjects = null)
    {
        MapEnumerator mapEnumerator;

        if (_mapFieldObjects)
        {
            mapEnumerator = _mapFieldObjects.getEnumerator();
        }
        else
        {
            mapEnumerator = formDataSourceArrayFieldExtObjects(_formDataSource, _fieldId).getEnumerator();
        }

        while (mapEnumerator.moveNext())
        {
            FormDataObject formDataField = mapEnumerator.currentValue();
            formDataField.allowEdit(_allowEdit);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>