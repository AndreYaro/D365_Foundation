<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxDocumentTransitRuleEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The transit document rule handler for tax document.
/// </summary>
class TaxDocumentTransitRuleEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyTaxDocumentTransit_PostHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post-action after the copied transit document is inserted.
    /// </summary>
    /// <param name="_sourceTransitDocument">
    /// The source transit document.
    /// </param>
    /// <param name="_targetTransitDocument">
    /// The new transit document.
    /// </param>
    /// <param name = "_targetTransactionHeader">The record of the target transaction header table.</param>
    [SubscribesTo(classstr(TransitDocumentManager_IN), delegateStr(TransitDocumentManager_IN, copyTransitDocument_Post))]
    public static void copyTaxDocumentTransit_PostHandler(Common _sourceTransitDocument, Common _targetTransitDocument, Common _targetTransactionHeader)
    {
        TaxDocument                 sourceTaxDocTable;
        TaxDocumentTransitDocument  sourceTaxDocTransit;
        TaxDocumentTransitDocument  targetTaxDocTransit;
        ITaxDocument                taxDocumentObj;

        if (_sourceTransitDocument is TaxDocumentTransitDocument && _targetTransitDocument is TaxDocumentTransitDocument)
        {
            sourceTaxDocTransit = _sourceTransitDocument;
            targetTaxDocTransit = _targetTransitDocument; 

            sourceTaxDocTable = TaxDocument::findByGUID(sourceTaxDocTransit.TaxDocument);

            taxDocumentObj = sourceTaxDocTable.toObject();
            taxDocumentObj.updateGUID(targetTaxDocTransit.TaxDocument);

            TaxBusinessService::saveTaxDocument(taxDocumentObj);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTaxDocumentTransit_PreHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pre-action before the copied transit document is inserted.
    /// </summary>
    /// <param name="_sourceTransitDocument">
    /// The source transit document.
    /// </param>
    /// <param name="_targetTransitDocument">
    /// The new transit document.
    /// </param>
    /// <param name = "_targetTransactionHeader">The record of the target transaction header table.</param>
    [SubscribesTo(classstr(TransitDocumentManager_IN), delegateStr(TransitDocumentManager_IN, copyTransitDocument_Pre))]
    public static void copyTaxDocumentTransit_PreHandler(Common _sourceTransitDocument, Common _targetTransitDocument, Common _targetTransactionHeader)
    {
        TaxDocumentTransitDocument     targetTransitTaxDocument;

        if (_sourceTransitDocument is TaxDocumentTransitDocument && _targetTransitDocument is TaxDocumentTransitDocument)
        {
            targetTransitTaxDocument = _targetTransitDocument;
            targetTransitTaxDocument.TaxDocument = newGuid();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransitDocumentOnTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find target <c>TaxDocumentRow</c> record for line-level transition.
    /// </summary>
    /// <param name="_parameter">
    /// The transit parameter.
    /// </param>
    [SubscribesTo(classstr(TransitDocumentManager_IN), delegateStr(TransitDocumentManager_IN, findTransitDocumentOnTarget))]
    public static void findTransitDocumentOnTaxDocument(TransitDocumentCustomActionParameter_IN _parameter)
    {
        
        TaxDocumentRow                  sourceTaxDocumentRow;
        TaxDocumentRow                  targetTaxDocumentRow;
        TaxDocumentRowTransitDocument   sourceTaxDocRowTransit;
        TaxDocumentRowTransitDocument   targetTaxDocRowTransit;
        TaxDocument                     targetTaxDocument;
        TaxDocumentTransitDocument      targetTaxDocumentTransit;

        PurchTable                      purchTable;
        PurchLine                       purchLine;
        VendInvoiceInfoTable            vendInvoiceInfoTable;
        VendInvoiceInfoLine             vendInvoiceInfoLine;
        PurchParmTable                  purchParmTable;
        PurchParmLine                   purchParmLine;

        SalesTable                      salesTable;
        SalesLine                       salesLine;
        SalesParmTable                  salesParmTable;
        SalesParmLine                   salesParmLine;

        CustInvoiceTable                custInvoiceTable;
        CustInvoiceLine                 custInvoiceLine;

        SalesQuotationTable             salesQuotationTable;
        SalesQuotationLine              salesQuotationLine;
        SalesQuotationParmTable         salesQuotationParmTable;
        SalesQuotationParmLine          salesQuotationParmLine;

        InventTransferTable             inventTransferTable;
        InventTransferLine              inventTransferLine;
        InventTransferParmTable         inventTransferParmTable;
        InventTransferParmLine          inventTransferParmLine;
        InventTransferJour              inventTransferJour;
        InventTransferJourLine          inventTransferJourLine;

        LedgerJournalTrans                  ledgerJournalTrans;
        TaxEngineLedgerJournalTransHeader   taxEngineLedgerJournalTransHeader;

        TaxEngineTaxJournal             taxEngineTaxJournal;
        TaxEngineTaxJournalLine         taxEngineTaxJournalLine;

        Common                          targetHeaderTable;

        if (_parameter && _parameter.parmSourceTransitDocument() is TaxDocumentRowTransitDocument)
        {
            switch (_parameter.parmTargetTrans().TableId)
            {
                case tableNum(PurchLine):
                    select firstOnly purchTable
                        exists join purchLine
                            where purchLine.RecId    == _parameter.parmTargetTrans().RecId
                                && purchLine.PurchId == purchTable.PurchId;
                    targetHeaderTable = purchTable;
                    break;

                case tableNum(VendInvoiceInfoLine):
                    select firstOnly vendInvoiceInfoTable
                        exists join vendInvoiceInfoLine
                            where vendInvoiceInfoLine.RecId         == _parameter.parmTargetTrans().RecId
                                && vendInvoiceInfoLine.ParmId       == vendInvoiceInfoTable.ParmId
                                && vendInvoiceInfoLine.TableRefId   == vendInvoiceInfoTable.TableRefId;
                    targetHeaderTable = vendInvoiceInfoTable;
                    break;

                case tableNum(PurchParmLine):
                    select firstOnly purchParmTable
                        exists join purchParmLine
                            where purchParmLine.RecId        == _parameter.parmTargetTrans().RecId
                                && purchParmLine.ParmId      == purchParmTable.ParmId
                                && purchParmLine.TableRefId  == purchParmTable.TableRefId;
                    targetHeaderTable = purchParmTable;
                    break;

                case tableNum(SalesLine):
                    select firstOnly salesTable
                        exists join salesLine
                            where salesLine.RecId       == _parameter.parmTargetTrans().RecId
                                && salesLine.SalesId    == salesTable.SalesId;
                    targetHeaderTable = salesTable;
                    break;

                case tableNum(SalesParmLine):
                    select firstOnly salesParmTable
                        exists join salesParmLine
                            where salesParmLine.RecId       == _parameter.parmTargetTrans().RecId
                                && salesParmLine.ParmId     == salesParmTable.ParmId
                                && salesParmLine.TableRefId == salesParmTable.TableRefId;
                    targetHeaderTable = salesParmTable;
                    break;

                case tableNum(CustInvoiceLine):
                    select firstOnly custInvoiceTable
                        exists join custInvoiceLine
                            where custInvoiceLine.RecId        == _parameter.parmTargetTrans().RecId
                                && custInvoiceLine.ParentRecId == custInvoiceTable.RecId;
                    targetHeaderTable = custInvoiceTable;
                    break;

                case tableNum(LedgerJournalTrans):
                    if (TaxEngineTaxJournalUtil::isLedgerJournalTableCreatedFromTaxJournal(ledgerJournalTrans.ledgerJournalTable().RecId))
                    {
                        targetHeaderTable = ledgerJournalTrans.ledgerJournalTable();
                    }
                    else
                    {
                        select firstOnly taxEngineLedgerJournalTransHeader 
                            exists join ledgerJournalTrans
                                where ledgerJournalTrans.RecId        == _parameter.parmTargetTrans().RecId
                                    && ledgerJournalTrans.JournalNum  == taxEngineLedgerJournalTransHeader.JournalNum
                                    && ledgerJournalTrans.Voucher     == taxEngineLedgerJournalTransHeader.Voucher;
                        targetHeaderTable = taxEngineLedgerJournalTransHeader;
                    }
                    break;

                case tableNum(SalesQuotationLine):
                    select firstOnly salesQuotationTable
                        exists join salesQuotationLine
                            where salesQuotationLine.RecId          == _parameter.parmTargetTrans().RecId
                                && salesQuotationLine.QuotationId   == salesQuotationTable.QuotationId;
                    targetHeaderTable = salesQuotationTable;
                    break;

                case tableNum(SalesQuotationParmLine):
                    select firstOnly salesQuotationParmTable
                        exists join salesQuotationParmTable
                            where salesQuotationParmLine.RecId          == _parameter.parmTargetTrans().RecId
                                && salesQuotationParmLine.ParmId        == salesQuotationParmTable.ParmId
                                && salesQuotationParmLine.TableRefId    == salesQuotationParmTable.TableRefId
                                && salesQuotationParmLine.QuotationId   == salesQuotationParmTable.QuotationId;
                    targetHeaderTable = salesQuotationParmTable;
                    break;

                case tableNum(InventTransferLine):
                     select firstOnly inventTransferTable
                         exists join inventTransferLine
                             where inventTransferLine.RecId          == _parameter.parmTargetTrans().RecId
                                 && inventTransferLine.TransferId    == inventTransferTable.TransferId;
                    targetHeaderTable = inventTransferTable;
                    break;

                case tableNum(InventTransferParmLine):
                    select firstOnly inventTransferParmTable
                        exists join inventTransferParmLine
                            where inventTransferParmLine.RecId          == _parameter.parmTargetTrans().RecId
                                && inventTransferParmLine.ParmId        == inventTransferParmTable.ParmId
                                && inventTransferParmLine.TransferId    == inventTransferParmTable.TransferId;
                    targetHeaderTable = inventTransferParmTable;
                    break;

                case tableNum(InventTransferJourLine):
                    select firstOnly inventTransferJour
                        exists join inventTransferJourLine
                            where inventTransferJourLine.RecId          == _parameter.parmTargetTrans().RecId
                                && inventTransferJourLine.VoucherId     == inventTransferJour.VoucherId
                                && inventTransferJourLine.TransferId    == inventTransferJour.TransferId;
                    targetHeaderTable = inventTransferJour;
                    break;

                case tableNum(TaxEngineTaxJournalLine):
                    select firstOnly taxEngineTaxJournal
                        exists join taxEngineTaxJournalLine
                            where taxEngineTaxJournalLine.RecId == _parameter.parmTargetTrans().RecId
                            && taxEngineTaxJournalLine.TaxEngineTaxJournal == taxEngineTaxJournal.RecId;
                    targetHeaderTable = taxEngineTaxJournal;
                    break;
            }

            targetTaxDocumentTransit = TaxDocumentTransitUtil::findTransitDocForDocumentByTransaction(targetHeaderTable.TableId, targetHeaderTable.RecId);
            targetTaxDocument        = TaxDocument::findByGUID(targetTaxDocumentTransit.TaxDocument);
            sourceTaxDocRowTransit = _parameter.parmSourceTransitDocument();
            sourceTaxDocumentRow   = TaxDocumentRow::findByGUID(sourceTaxDocRowTransit.TaxDocumentRow);

            select firstOnly targetTaxDocumentRow
                where targetTaxDocumentRow.TaxDocument          == targetTaxDocument.RecId
                    && targetTaxDocumentRow.OriginSourceTableId == sourceTaxDocumentRow.OriginSourceTableId
                    && targetTaxDocumentRow.OriginSourceRecId   == sourceTaxDocumentRow.OriginSourceRecId;

            targetTaxDocRowTransit = TaxDocumentRowTransitDocument::findOrCreateByGUID(targetTaxDocumentRow.TaxDocumentRowGuid, targetTaxDocument.TaxDocumentGuid);

            _parameter.parmTargetTransitDocument(targetTaxDocRowTransit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransitDocumentRelationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction document transaction relation table.
    /// </summary>
    /// <param name = "_parameter">The parameter of the event.</param>
    [SubscribesTo(classstr(TransitDocumentManager_IN), delegateStr(TransitDocumentManager_IN, getTransitDocumentRelationTable))]
    public static void getTransitDocumentRelationTable(TransitDocumentManagerEventParameter_IN _parameter)
    {
        switch (_parameter.parmTransitDocTableId())
        {
            case tableNum(TaxDocumentTransitDocument):
                _parameter.parmTransitRelationTableId(tableNum(TaxDocumentTransitRelation));
                break;
            case tableNum(TaxDocumentRowTransitDocument):
                _parameter.parmTransitRelationTableId(tableNum(TaxDocumentRowTransitRelation));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTranstiDocumentTransactionRuleList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init transact document transaction rule list for tax document.
    /// </summary>
    /// <param name = "_ruleList">The list which is containing all rule objects.</param>
    [SubscribesTo(classstr(TransitDocumentTransactionRuleHelper_IN), delegateStr(TransitDocumentTransactionRuleHelper_IN,initTransitDocumentTransactionRuleList))]
    public static void initTranstiDocumentTransactionRuleList(List _ruleList)
    {
        TransitDocumentType_IN    taxDocumentType;
        TransitDocumentType_IN    taxDocumentRowType;

        if (!_ruleList)
        {
            return;
        }

        taxDocumentType = TransitDocumentType_IN::findOrDefineType(
        tableNum(TaxDocumentTransitDocument), 0, 0, NoYes::Yes);

        taxDocumentRowType = TransitDocumentType_IN::findOrDefineType(
        tableNum(TaxDocumentRowTransitDocument), 0, 0, NoYes::Yes);

        //Purchase Flow
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(PurchTable), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(PurchParmTable), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(VendPurchOrderJour), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(VendPackingSlipJour), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(VendReceiptsListJour), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustomsVendBOEJour_IN), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(VendInvoiceInfoTable), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(VendInvoiceJour), taxDocumentType));

        //Sales Flow
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesTable), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesParmTable), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustConfirmJour), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(WMSPickingRoute), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustPackingSlipJour), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustInvoiceJour), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustomsShippingBillJour_IN), taxDocumentType));

        //Free text invoice
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustInvoiceTable), taxDocumentType));

        //General journal
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(TaxEngineLedgerJournalTransHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(TaxEngineTaxJournal), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(LedgerJournalTable), taxDocumentType));

        //Sales Quotation
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesQuotationTable), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesQuotationParmTable), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustQuotationJour), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustQuotationConfirmJour), taxDocumentType));

        //Invent Transfer
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(InventTransferTable), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(InventTransferParmTable), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(InventTransferJour), taxDocumentType));

        //Quality order
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(TaxEngineQualityOrderTableHeader), taxDocumentType));

        //Purchase RFQ
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(PurchRFQReplyTable), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(PurchRFQParmTable), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(VendRFQJour), taxDocumentType));

        //Purchase REQ
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(TaxEnginePurchReqHeader), taxDocumentType));

        //Project transaction
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(TaxEngineProjOnAcctTransHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(TaxEngineProjOnAcctJourHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(TaxEngineProjRevenueTransHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(TaxEngineProjRevenueJourHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(TaxEngineProjCostTransHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(TaxEngineProjCostJourHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(TaxEngineProjItemTransHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(TaxEngineProjItemJourHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(TaxEngineProjEmplTransHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(TaxEngineProjEmplJourHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(TaxEngineProjItemSOTransHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(TaxEngineProjItemSOJourHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(TaxEngineProjRevenueSubTransHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(TaxEngineProjRevenueSubJourHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(TaxEngineProjAdvancedJournalLineHeader), taxDocumentType));

        //Purchase agreement and sales agreement
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesAgreementHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(PurchAgreementHeader), taxDocumentType));

        //Purchase flow - Lines
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(PurchLine), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(PurchParmLine), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(VendPackingSlipTrans), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(VendReceiptsListTrans), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(VendInvoiceInfoLine), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(VendInvoiceTrans), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustomsVendBOETrans_IN), taxDocumentRowType));

        //Sales flow - lines
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesLine), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesParmLine), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustInvoiceTrans), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustConfirmTrans), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustPackingSlipTrans), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(WmsOrderTrans), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustInvoiceLine), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustomsShippingBillTrans_IN), taxDocumentRowType));

        //General journal - lines
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(LedgerJournalTrans), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(TaxEngineTaxJournalLine), taxDocumentRowType));

        //Misc charge - lines
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(MarkupTrans), taxDocumentRowType));

        //Sales quotation - lines
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesQuotationLine), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(SalesQuotationParmLine), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustQuotationTrans), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(CustQuotationConfirmTrans), taxDocumentRowType));

        //Invent transfer - lines
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(InventTransferLine), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(InventTransferParmLine), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(InventTransferJourLine), taxDocumentRowType));

        //Quality order - lines
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(InventQualityOrderTable), taxDocumentRowType));

        //Purchase RFQ - lines
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(PurchRFQReplyLine), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(PurchRFQParmLine), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(VendRFQTrans), taxDocumentRowType));

        //Purchase REQ
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(PurchReqLine), taxDocumentRowType));

        //Project transactions - lines
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(ProjProposalOnAcc), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(ProjInvoiceOnAcc), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(ProjProposalRevenue), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(ProjInvoiceRevenue), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(ProjProposalCost), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(ProjInvoiceCost), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(ProjProposalItem), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(ProjInvoiceItem), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(ProjProposalEmpl), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(ProjInvoiceEmpl), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(ProjAdvancedJournalLine), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(ProjAdvancedJournalLineTaxExtensionIN), taxDocumentRowType));

        //Purchase agreement and sales agreement - lines
        _ruleList.addEnd(TransitDocumentTransactionRuleObject_IN::construct(tableNum(AgreementLine), taxDocumentRowType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransitDocumentTransRuleExtList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init transit document transaction rule extension list.
    /// </summary>
    /// <param name = "_ruleList">The list which is containing all rule extension objects.</param>
    [SubscribesTo(classstr(TransitDocumentTransactionRuleHelper_IN), delegateStr(TransitDocumentTransactionRuleHelper_IN, initTransitDocumentTransRuleExtList))]
    public static void initTransitDocumentTransRuleExtList(List _ruleList)
    {
        TransitDocumentType_IN    taxDocumentType;
        TransitDocumentType_IN    taxDocumentRowType;

        if (!_ruleList)
        {
            return;
        }

        taxDocumentType = TransitDocumentType_IN::findType(
        tableNum(TaxDocumentTransitDocument));

        taxDocumentRowType = TransitDocumentType_IN::findType(
        tableNum(TaxDocumentRowTransitDocument));

        //Purchase flow
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(PurchTable), tableNum(VendPurchOrderJour), taxDocumentType, TransitDocumentTransitAction_IN::Copy));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(PurchParmTable), tableNum(VendPurchOrderJour), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(PurchParmTable), tableNum(VendReceiptsListJour), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(PurchParmTable), tableNum(VendPackingSlipJour), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(PurchParmTable), tableNum(CustomsVendBOEJour_IN), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(VendInvoiceInfoTable), tableNum(VendInvoiceJour), taxDocumentType));

        //Sales flow
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(SalesParmTable), tableNum(CustConfirmJour), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(SalesParmTable), tableNum(WMSPickingRoute), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(SalesParmTable), tableNum(CustPackingSlipJour), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(SalesParmTable), tableNum(CustInvoiceJour), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(SalesParmTable), tableNum(CustomsShippingBillJour_IN), taxDocumentType));

        //Free text invoice
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(CustInvoiceTable), tableNum(CustInvoiceJour), taxDocumentType));

        //General journal
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(TaxEngineTaxJournal), tableNum(LedgerJournalTable), taxDocumentType));

        //Sales Quotation
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(SalesQuotationParmTable), tableNum(CustQuotationJour), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(SalesQuotationParmTable), tableNum(CustQuotationConfirmJour), taxDocumentType));

        //Invent Transfer
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(InventTransferParmTable),tableNum(InventTransferJour),  taxDocumentType));

        //Purchase RFQ and REQ
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(PurchRFQReplyTable), tableNum(PurchRFQParmTable), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(PurchRFQParmTable),tableNum(VendRFQJour), taxDocumentType));

        //Project transactions
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(TaxEngineProjOnAcctTransHeader), tableNum(TaxEngineProjOnAcctJourHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(TaxEngineProjRevenueTransHeader), tableNum(TaxEngineProjRevenueJourHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(TaxEngineProjCostTransHeader), tableNum(TaxEngineProjCostJourHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(TaxEngineProjItemTransHeader), tableNum(TaxEngineProjItemJourHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(TaxEngineProjEmplTransHeader), tableNum(TaxEngineProjEmplJourHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(TaxEngineProjItemSOTransHeader), tableNum(TaxEngineProjItemSOJourHeader), taxDocumentType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(TaxEngineProjRevenueSubTransHeader), tableNum(TaxEngineProjRevenueSubJourHeader), taxDocumentType));

        //Purchase flow - lines
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(PurchParmLine), tableNum(VendPackingSlipTrans), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(PurchParmLine), tableNum(VendReceiptsListTrans), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(VendInvoiceInfoLine), tableNum(VendInvoiceTrans), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(PurchParmLine), tableNum(CustomsVendBOETrans_IN), taxDocumentRowType));

        //Sales flow - lines
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(SalesParmLine), tableNum(CustInvoiceTrans), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(SalesParmLine), tableNum(CustConfirmTrans), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(SalesParmLine), tableNum(CustPackingSlipTrans), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(SalesParmLine), tableNum(WmsOrderTrans), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(SalesParmLine), tableNum(CustomsShippingBillTrans_IN), taxDocumentRowType));

        //Free text invoice - lines
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(CustInvoiceLine), tableNum(CustInvoiceTrans), taxDocumentRowType));

        //General journal - lines
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(TaxEngineTaxJournalLine), tableNum(LedgerJournalTrans), taxDocumentRowType));

        //Sales Quotation - lines
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(SalesQuotationParmLine), tableNum(CustQuotationTrans), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(SalesQuotationParmLine), tableNum(CustQuotationConfirmTrans), taxDocumentRowType));

        //Invent transfer - lines
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(InventTransferParmLine), tableNum(InventTransferJourLine), taxDocumentRowType));

        //Purchase RFQ - lines
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(PurchRFQReplyLine), tableNum(PurchRFQParmLine), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(PurchRFQParmLine), tableNum(VendRFQTrans), taxDocumentRowType));

        //Markup transaction
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(MarkupTrans), tableNum(MarkupTrans), taxDocumentRowType));

        //Project transactions - lines
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(ProjProposalOnAcc), tableNum(ProjInvoiceOnAcc), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(ProjProposalRevenue), tableNum(ProjInvoiceRevenue), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(ProjProposalCost), tableNum(ProjInvoiceCost), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(ProjProposalItem), tableNum(ProjInvoiceItem), taxDocumentRowType));
        _ruleList.addEnd(TransitDocumentTransRuleExtObject_IN::construct(tableNum(ProjProposalEmpl), tableNum(ProjInvoiceEmpl), taxDocumentRowType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitTaxAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transit adjustments information from source transaction to target transaction.
    /// </summary>
    /// <param name = "_sourceTrans">The source transaction.</param>
    /// <param name = "_targetTrans">The target transaction.</param>
    /// <param name = "_targetTransHeader">The target transaction header.</param>
    /// <param name = "transitRule">The transit rule.</param>
    [SubscribesTo(classstr(TransitDocumentManager_IN), delegateStr(TransitDocumentManager_IN, transitRelevantDocuments))]
    public static void transitTaxAdjustment(
        Common _sourceTrans,
        Common _targetTrans,
        Common _targetTransHeader,
        TransitDocumentTransactionRule_IN transitRule)
    {
        if (_sourceTrans && _targetTrans)
        {
            if (TransitDocumentType_IN::find(transitRule.TransitDocumentType).RefTableId == tableNum(TaxDocumentRowTransitDocument))
            {
                // transit measure adjustment
                TaxDocumentRowMeasureAdjustment::copyAdjustments(_sourceTrans, _targetTrans, NoYes::No, _targetTransHeader);

                // transit tax applicability
                TaxDocumentRowTaxDeterminedInfo::copyDeterminedInfo(_sourceTrans, _targetTrans, _targetTransHeader);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTransationDocumentsByHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all transit documents that are associated with the transaction header.
    /// </summary>
    /// <param name = "_transHeader">The transaction header.</param>
    [SubscribesTo(classstr(TransitDocumentManager_IN), delegateStr(TransitDocumentManager_IN, deleteTransationDocumentsByHeader))]
    public static void deleteTransationDocumentsByHeader(Common _transHeader)
    {
        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            TaxableDocumentObject taxableDocument = TaxableDocumentObject::construct(
                TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(_transHeader));

            TaxBusinessService::deleteTaxDocument(taxableDocument);

            TaxDocumentRowTaxDeterminedInfoUtils::removeTransHeaderTaxDeterminedInfo(_transHeader.TableId, _transHeader.RecId);
            TaxDocumentRowMeasureAdjustment::cleanAdjustmentForHeader(_transHeader.TableId, _transHeader.RecId);
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTransationDocumentsByLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all transit documents that are associated with the transaction line.
    /// </summary>
    /// <param name = "_transLine">The transaction line.</param>
    [SubscribesTo(classstr(TransitDocumentManager_IN), delegateStr(TransitDocumentManager_IN, deleteTransationDocumentsByLine))]
    public static void deleteTransationDocumentsByLine(Common _transLine)
    {
        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            TaxDocumentRowTaxDeterminedInfoUtils::removeTransLineTaxDeterminedInfo(_transLine.TableId, _transLine.RecId);
            TaxDocumentRowMeasureAdjustment::cleanAdjustment(_transLine.TableId, _transLine.RecId);
        }
        // </GTE>
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>