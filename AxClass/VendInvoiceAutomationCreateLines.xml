<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationCreateLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class VendInvoiceAutomationCreateLines
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    internal static void create(TradeLineRefId _tableRefId, 
                                PurchIdRange _purchIdRangeValue, 
                                Range _packingslipRangeValue)
    {
        PurchUpdate specQty;
        boolean createFromPO;

        if (_packingslipRangeValue)
        {
            specQty = PurchUpdate::PackingSlip;
            createFromPO = false;
        }
        else
        {
            VendParameters vendParameters = VendParameters::find();
            specQty = vendParameters.AutomationDefaultQuantityForInvoiceLinesCreation == VendInvoiceDefaultQuantityForAutomaticInvoiceLinesCreation::OrderedQuantity ?
                        PurchUpdate::All : PurchUpdate::PackingSlip;
            createFromPO = true;
        }

        ttsbegin;
        PurchFormLetter_Invoice purchFormLetter = PurchFormLetter::construct(DocumentStatus::Invoice);
        purchFormLetter.initNewPurchParmUpdate();
        
        ParmId parmId = purchFormLetter.parmId();

        PurchParmUpdate purchParmupdateLocal = VendInvoiceAutomationCreateLines::updateSpecQty(parmId, specQty);
        purchFormLetter.purchParmUpdate(purchParmupdateLocal);

        VendInvoiceInfoTable parmTable = VendInvoiceAutomationCreateLines::updateParmTable(_tableRefId, parmId);
        ttscommit;    
        
        if (createFromPO)
        {
            VendInvoiceAutomationCreateLines::createFromPurchaseOrder(purchFormLetter, _tableRefId, parmId, _purchIdRangeValue, specQty);
        }
        else
        {
            if (ImportHeaderOnlyInvoiceWithConsolidateFlightV2::instance().isEnabled())
            {
                VendInvoiceAutomationCreateLines::createFromPackingslip(purchFormLetter, _purchIdRangeValue, _packingslipRangeValue);
            }
            else
            {
                VendInvoiceAutomationCreateLines::createFromPackingslipV2(purchFormLetter, _purchIdRangeValue, _packingslipRangeValue, _tableRefId);
            }
            VendInvoiceAutomationCreateLines::createImportDocumentEventLog(parmId, parmTable.RecId);
            VendInvoiceAutomationCreateLines::moveInvoiceToAutomation(parmId);
            VendInvoiceAutomationCreateLines::updateHeader(parmId, parmTable);

            if (ImportHeaderOnlyInvoiceWithConsolidateFlightV2::instance().isEnabled())
            {
                VendInvoiceAutomationCreateLines::consolidateInvoices(purchFormLetter);
            }
        }

        if (InvoiceImportAutomationCreateInvoiceLinesSetupFlight::instance().isEnabled() 
            && !VendInvoiceAutomationCreateLines::checkVendInvoiceLineExists(parmId))
        {
            throw error("@AccountsPayable:VendInvoiceValidationNoInvoiceLineCheck");
        }

        ttsbegin;        
        VendInvoiceAutomationCreateLines::endProcess(parmId);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVendInvoiceLineExists</Name>
				<Source><![CDATA[
    internal static boolean checkVendInvoiceLineExists(ParmId _parmId)
    {
        VendInvoiceInfoTable localInvoiceTable;
        VendInvoiceInfoLine localInvoiceInfoLine;

        while select TableRefId, RecId from localInvoiceTable
            where localInvoiceTable.ParmId == _parmId
        {
            select firstonly RecId from localInvoiceInfoLine
                where localInvoiceInfoLine.TableRefId == localInvoiceTable.TableRefId;

            if (!localInvoiceInfoLine.RecId)
            {
                return false;
            }
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>consolidateInvoices</Name>
				<Source><![CDATA[
    internal static void consolidateInvoices(PurchFormLetter _purchFormletter)
    {
        PurchParmUpdate localPurchParmUpdate = PurchParmUpdate::find(_purchFormLetter.parmId(), true);
        if (localPurchParmUpdate.RecId)
        {
            ttsbegin;
            localPurchParmUpdate.SumBy = AccountOrder::Account;
            localPurchParmUpdate.SumIncludePending = NoYes::Yes;
            localPurchParmUpdate.SumPurchId = '';
            localPurchParmUpdate.SumNum = '';
            localPurchParmUpdate.update();
            ttscommit;
        }

        _purchFormletter.proforma(false);
        localPurchParmUpdate.reread();

        _purchFormletter.initParameters(localPurchParmUpdate.data());
        _purchFormletter.editLinesChanged(true);
        _purchFormletter.validateAll(false);
        _purchFormletter.reArrange(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromPurchaseOrder</Name>
				<Source><![CDATA[
    internal static void createFromPurchaseOrder(PurchFormLetter _purchFormletter,
                                                TradeLineRefId _tableRefId,
                                                ParmId _parmId,
                                                PurchIdRange _purchIdRangeValue,
                                                PurchUpdate _specQty)
    {        
        PurchSelectLinesManager purchSelectLinesManager = PurchSelectLinesManager::newPurchSelectLinesManager(_tableRefId);
        purchSelectLinesManager.parmParmId(_parmId);
        purchSelectLinesManager.initPurchSets();

        Query query = VendInvoiceAutomationCreateLines::buildQueryForPO(_purchIdRangeValue, _specQty);
        QueryRun queryRun = new QueryRun(query);

        VendInvoiceInfoTable invoiceTable;
        select invoiceTable where invoiceTable.ParmId == _parmId;

        while (queryRun.next())
        {
            PurchLine localPurchline = queryRun.get(tableNum(PurchLine));

            if (invoiceTable.InvoiceAccount != localPurchline.invoiceAccount())
            {
                throw error("@AccountsPayable:SameVendorValidationError");
            }
            purchSelectLinesManager.mark('', localPurchline.RecId, localPurchline, true, NoYes::No, true);
        }
        purchSelectLinesManager.passSets(_purchFormletter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromPackingslipV2</Name>
				<Source><![CDATA[
    [SysObsolete("The method has been deprecated", false, 08\05\2023)]
    internal static void createFromPackingslipV2(PurchFormLetter _purchFormletter,
                                                PurchIdRange _purchIdRangeValue,
                                                Range _packingslipRangeValue,
                                                TradeLineRefId _tableRefId)
    {
        boolean isInvoiceAccountValidationSuccess = false;
        List selectedList = new List(Types::Record);
        TmpFrmVirtual tmpFrmVirtual;
        VendInvoiceInfoTable invoiceTable;
        
        PurchSelectLinesManager purchSelectLinesManager = PurchSelectLinesManager::newPurchSelectLinesManager(_tableRefId);
        purchSelectLinesManager.initPurchSets();
        purchSelectLinesManager.parmParmId(_purchFormletter.parmId());
        
        select invoiceTable where invoiceTable.ParmId == _purchFormletter.parmId();
        
        Query query = VendInvoiceAutomationCreateLines::buildQueryForPackingslip(_purchIdRangeValue, _packingslipRangeValue);
        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            VendPackingSlipJour localVendPackingSlipJour = queryRun.get(tableNum(VendPackingSlipJour));

            tmpFrmVirtual.TableNum = tableNum(VendPackingSlipJour);
            tmpFrmVirtual.RecordNo = localVendPackingSlipJour.RecId;
            tmpFrmVirtual.NoYes = NoYes::Yes;
            tmpFrmVirtual.Id = localVendPackingSlipJour.PurchId;
            if (invoiceTable.InvoiceAccount != localVendPackingSlipJour.InvoiceAccount)
            {
                isInvoiceAccountValidationSuccess = false;
                throw Error("@AccountsPayable:SameVendorValidationError");
            }
            tmpFrmVirtual.insert();
            isInvoiceAccountValidationSuccess = true;
        }

        if (isInvoiceAccountValidationSuccess)
        {
            Map selectedPurchLineMap = new Map(Types::Int64, Types::Record);
            selectedPurchLineMap = VendInvoiceAutomationCreateLines::preparePurchSelectLineManagerFromVendPackingSlipJour(tmpFrmVirtual, _purchFormletter);
           
            MapEnumerator me = selectedPurchLineMap.getEnumerator();
            while (me.moveNext())
            {
                PurchLine  locPurchLine;
                locPurchLine = me.currentValue();
                purchSelectLinesManager.mark(locPurchLine.PurchId, locPurchLine.RecId, locPurchLine, NoYes::Yes, NoYes::No, true);
            }
            purchSelectLinesManager.passSets(_purchFormletter);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>preparePurchSelectLineManagerFromVendPackingSlipJour</Name>
				<Source><![CDATA[
    [SysObsolete("The method has been deprecated", false, 08\05\2023)]
    internal static map preparePurchSelectLineManagerFromVendPackingSlipJour(TmpFrmVirtual tmpFrmVirtual, PurchFormLetter _purchFormletter)
    {
        #ISOCountryRegionCodesVendInv_W
        #isoCountryRegionCodes

        VendPackingSlipJour vendPackingSlipJour;
        VendPackingSlipTrans vendPackingSlipTrans;
        PurchLine localPurchLine;
        PurchTable localPurchTable;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        
        Map purchIdLinesMap = new Map(Types::Int64, Types::Record);
        Map allowPostingMap = new Map(Types::String, Types::Enum);
        InventQty remainInventFinancial;

        // <GEERU>
        PostingProfile postingProfile_RU;
        InventProfileType_RU inventProfileType_RU;
        PurchLine_W localPurchLine_W;
        // </GEERU>

        while select tmpFrmVirtual
            order by Id
            join PackingSlipId, InventProfileType_RU from vendPackingSlipJour
                where tmpFrmVirtual.RecordNo == vendPackingSlipJour.RecId
                    && tmpFrmVirtual.TableNum == vendPackingSlipJour.TableId
            join vendPackingSlipTrans
                where vendPackingSlipJour.RecId == vendPackingSlipTrans.VendPackingSlipJour
                    && vendPackingSlipTrans.FullyMatched == NoYes::No
                join localPurchLine
                    where localPurchLine.InventTransId == vendPackingSlipTrans.InventTransId
                        && !localPurchLine.IsDeleted
        {
            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                localPurchTable = PurchTable::find(localPurchLine.PurchId);
                localPurchLine_W = localPurchLine.purchLine_W();

                if (vendInvoiceInfoTable && !(((localPurchLine_W.PostingProfile_RU && localPurchLine_W.PostingProfile_RU == postingProfile_RU) || (!localPurchLine_W.PostingProfile_RU && localPurchTable.PostingProfile == postingProfile_RU))
                    && vendPackingSlipJour.InventProfileType_RU == inventProfileType_RU))
                {
                    continue;
                }
            }
            // </GEERU>

            
            if (!allowPostingMap.exists(vendPackingSlipTrans.OrigPurchid))
            {
                localPurchTable = PurchTable::find(vendPackingSlipTrans.OrigPurchid);
                allowPostingMap.insert(vendPackingSlipTrans.OrigPurchid, PurchFormletterParmData::allowJournal(_purchFormletter.documentStatus(), localPurchTable));
            }
            if (!allowPostingMap.lookup(vendPackingSlipTrans.OrigPurchid))
            {
                continue;
            }

            if (localPurchLine.isStocked())
            {
                remainInventFinancial = vendPackingSlipTrans.remainInventFinancial();
                if ((remainInventFinancial == 0.0) ||
                    (vendPackingSlipTrans.InventQty * remainInventFinancial < 0) ||
                    (abs(vendPackingSlipTrans.InventQty) < abs(remainInventFinancial)))
                {
                    //The Inventory quantity to match for packing slip %1 item %2 cannot be reserved.
                    checkFailed(strFmt("@SYS111789", vendPackingSlipJour.PackingSlipId, localPurchLine.ItemId));
                    continue;
                }
            }

            if (!purchIdLinesMap.exists(localPurchLine.RecId))
            {
                purchIdLinesMap.insert(localPurchLine.RecId, localPurchLine);
            }

        }
        return purchIdLinesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromPackingslip</Name>
				<Source><![CDATA[
    internal static void createFromPackingslip(PurchFormLetter _purchFormletter,
                                               PurchIdRange _purchIdRangeValue,
                                               Range _packingslipRangeValue)
    {
        Query query = VendInvoiceAutomationCreateLines::buildQueryForPackingslip(_purchIdRangeValue, _packingslipRangeValue);
        QueryRun queryRun = new QueryRun(query);
        List selectedList = new List(Types::Record);
        
        VendInvoiceInfoTable invoiceTable;
        select invoiceTable where invoiceTable.ParmId == _purchFormletter.parmId();

        while (queryRun.next())
        {
            VendPackingSlipJour localVendPackingSlipJour = queryRun.get(tableNum(VendPackingSlipJour));
            
            TmpFrmVirtual tmpFrmVirtual;
            tmpFrmVirtual.TableNum = tableNum(VendPackingSlipJour);
            tmpFrmVirtual.RecordNo = localVendPackingSlipJour.RecId;
            tmpFrmVirtual.NoYes = NoYes::Yes;
            tmpFrmVirtual.Id = localVendPackingSlipJour.PurchId;
            if (invoiceTable.InvoiceAccount != localVendPackingSlipJour.InvoiceAccount)
            {                
                throw error("@AccountsPayable:SameVendorValidationError");
            }
        
            selectedList.addEnd(tmpFrmVirtual);
        }
        if (!selectedList.empty())
        {
            _purchFormletter.selectFromJournal(selectedList.pack());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSpecQty</Name>
				<Source><![CDATA[
    private static PurchParmUpdate updateSpecQty(ParmId _parmId, PurchUpdate _specQty)
    {
        PurchParmUpdate purchParmUpdateLocal = PurchParmUpdate::find(_parmId, true);
        if (purchParmUpdateLocal)
        {
            purchParmupdateLocal.SpecQty = _specQty;
            purchParmupdateLocal.doUpdate();
        }
        return purchParmUpdateLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmTable</Name>
				<Source><![CDATA[
    private static VendInvoiceInfoTable updateParmTable(TradeLineRefId _tableRefId, ParmId _parmId)
    {
        VendInvoiceInfoTable parmTable;

        select firstOnly parmTable
            where parmTable.TableRefId == _tableRefId;

        if (parmTable)
        {
            parmTable.selectForUpdate(true);
            parmTable.ParmId = _parmId;
            parmTable.doUpdate();
        }
        return parmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromHeader</Name>
				<Source><![CDATA[
    private static void copyFromHeader(VendInvoiceInfoTable _fromHeader, VendInvoiceInfoTable _toHeader)
    {
        _toHeader.DeliveryName = _fromHeader.DeliveryName;
        _toHeader.Ordering = _fromHeader.Ordering;
        _toHeader.BatchAdministration = _fromHeader.BatchAdministration;
        _toHeader.TransDate = _fromHeader.TransDate;
        _toHeader.Num = _fromHeader.Num;
        _toHeader.DocumentDate = _fromHeader.DocumentDate;
        _toHeader.DocumentNum = _fromHeader.DocumentNum;
        _toHeader.PaymId = _fromHeader.PaymId;
        _toHeader.CashDisc = _fromHeader.CashDisc;
        _toHeader.InvoiceRoundOff = _fromHeader.InvoiceRoundOff;
        _toHeader.TaxRoundOff = _fromHeader.TaxRoundOff;
        _toHeader.EndDisc = _fromHeader.EndDisc;
        _toHeader.Approved = _fromHeader.Approved;
        _toHeader.Approver = _fromHeader.Approver;
        _toHeader.PurchName = _fromHeader.PurchName;
        _toHeader.OrderAccount = _fromHeader.OrderAccount;
        _toHeader.CashDiscDate = _fromHeader.CashDiscDate;
        _toHeader.Storno = _fromHeader.Storno;
        _toHeader.InvoiceAccount = _fromHeader.InvoiceAccount;
        _toHeader.CurrencyCode = _fromHeader.CurrencyCode;
        _toHeader.Log = _fromHeader.Log;
        _toHeader.PaymMode = _fromHeader.PaymMode;
        _toHeader.PaymSpec = _fromHeader.PaymSpec;
        _toHeader.ReCalculate = _fromHeader.ReCalculate;
        _toHeader.VendBankAccountID = _fromHeader.VendBankAccountID;
        _toHeader.FixedExchRate = _fromHeader.FixedExchRate;
        _toHeader.euroTriangulation = _fromHeader.euroTriangulation;
        _toHeader.ExchRate = _fromHeader.ExchRate;
        _toHeader.ExchRateSecondary = _fromHeader.ExchRateSecondary;
        _toHeader.ReportingCurrencyExchangeRate = _fromHeader.ReportingCurrencyExchangeRate;
        _toHeader.FixedDueDate = _fromHeader.FixedDueDate;
        _toHeader.AddressRefRecId = _fromHeader.AddressRefRecId;
        _toHeader.AddressRefTableId = _fromHeader.AddressRefTableId;
        _toHeader.DeliveryPostalAddress = _fromHeader.DeliveryPostalAddress;
        _toHeader.Hold = _fromHeader.Hold;
        _toHeader.InvoiceReleaseDate = _fromHeader.InvoiceReleaseDate;
        _toHeader.ReleaseDateComment = _fromHeader.ReleaseDateComment;
        _toHeader.VendInvoiceSaveStatus = _fromHeader.VendInvoiceSaveStatus;
        _toHeader.VarianceApproved = _fromHeader.VarianceApproved;
        _toHeader.VarianceApprover = _fromHeader.VarianceApprover;
        _toHeader.VarianceApprovedDateTime = _fromHeader.VarianceApprovedDateTime;
        _toHeader.VarianceComment = _fromHeader.VarianceComment;
        _toHeader.DocumentOrigin = _fromHeader.DocumentOrigin;
        _toHeader.PoolRecId = _fromHeader.PoolRecId;
        _toHeader.ParmJobStatus = _fromHeader.ParmJobStatus;
        _toHeader.VendInvoiceGroup = _fromHeader.VendInvoiceGroup;
        _toHeader.PaymentSched = _fromHeader.PaymentSched;
        _toHeader.CashDiscCode = _fromHeader.CashDiscCode;
        _toHeader.CashDiscPercent = _fromHeader.CashDiscPercent;
        _toHeader.Payment = _fromHeader.Payment;
        _toHeader.TaxGroup = _fromHeader.TaxGroup;
        _toHeader.OverrideSalesTax = _fromHeader.OverrideSalesTax;
        _toHeader.vatNum = _fromHeader.vatNum;
        _toHeader.VATNumTableType = _fromHeader.VATNumTableType;
        _toHeader.VATNumRecId = _fromHeader.VATNumRecId;
        _toHeader.InclTax = _fromHeader.InclTax;
        _toHeader.EnterpriseNumber = _fromHeader.EnterpriseNumber;
        _toHeader.PostingProfile = _fromHeader.PostingProfile;
        _toHeader.SettleVoucher = _fromHeader.SettleVoucher;
        _toHeader.NumberSequenceGroup = _fromHeader.NumberSequenceGroup;
        _toHeader.TransactionCode = _fromHeader.TransactionCode;
        _toHeader.Transport = _fromHeader.Transport;
        _toHeader.Port = _fromHeader.Port;
        _toHeader.StatProcId = _fromHeader.StatProcId;
        _toHeader.CountyOrigDest = _fromHeader.CountyOrigDest;
        _toHeader.ListCode = _fromHeader.ListCode;
        _toHeader.VendPaymentGroup = _fromHeader.VendPaymentGroup;
        _toHeader.Description = _fromHeader.Description;
        _toHeader.LastMatchVariance = _fromHeader.LastMatchVariance;
        _toHeader.RemittanceLocation = _fromHeader.RemittanceLocation;
        _toHeader.IgnoreCalculatedSalesTax = _fromHeader.IgnoreCalculatedSalesTax;
        _toHeader.InvoiceType = _fromHeader.InvoiceType;
        _toHeader.MarkupGroup = _fromHeader.MarkupGroup;
        _toHeader.InventSiteId = _fromHeader.InventSiteId;
        _toHeader.InventLocationId = _fromHeader.InventLocationId;
        _toHeader.DefaultDimension = _fromHeader.DefaultDimension;
        _toHeader.AccountingDistributionTemplate = _fromHeader.AccountingDistributionTemplate;
        _toHeader.BankLCImportLine = _fromHeader.BankLCImportLine;
        _toHeader.VendorRequestedWorkerEmail = _fromHeader.VendorRequestedWorkerEmail;
        _toHeader.ImportedAmount = _fromHeader.ImportedAmount;
        _toHeader.ReceivedDate = _fromHeader.ReceivedDate;
        _toHeader.ImportedSalesTax = _fromHeader.ImportedSalesTax;
        _toHeader.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHeader</Name>
				<Source><![CDATA[
    private static void updateHeader(ParmId _parmId, VendInvoiceInfoTable _invoiceTable)
    {
        VendInvoiceInfoTable localInvoiceTable;

        while select forupdate localInvoiceTable
            where localInvoiceTable.ParmId == _parmId
        {
            ttsbegin;
            VendInvoiceAutomationCreateLines::copyFromHeader(_invoiceTable, localInvoiceTable);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endProcess</Name>
				<Source><![CDATA[
    private static void endProcess(ParmId _parmId)
    {        
        VendInvoiceAutomationCreateLines::updateAutogeneratedFlag(_parmId);
        VendInvoiceAutomationCreateLines::logDocumentHistoryForCreateLineEvent(_parmId);
        
        VendInvoiceInfoTable localInvoiceTable;

        while select localInvoiceTable 
            where localInvoiceTable.ParmId == _parmId
        {
            VendInvoiceInfoTable::moveFromActiveToSaved(localInvoiceTable);
        }
        purchParmUpdate::deleteWithoutUpdate(_parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForPO</Name>
				<Source><![CDATA[
    private static Query buildQueryForPO(PurchIdRange _purchIdRangeValue, PurchUpdate _specQty)
    {   
        Query query = new Query();
        QueryBuildDataSource qbdsPurchTable = query.addDataSource(tableNum(PurchTable));
    
        if (_purchIdRangeValue)
        {
            QueryBuildRange purchIdCriteria = qbdsPurchTable.addRange(fieldNum(PurchTable, PurchId));
            purchIdCriteria.value(VendInvoiceAutomationCreateLines::getRangeExpression(_purchIdRangeValue,
                                                                        tableStr(PurchTable),
                                                                        tableStr(PurchTable),
                                                                        fieldStr(PurchTable, PurchId)));
        }
        
        QueryBuildDataSource qbdsPurchLine = qbdsPurchTable.addDataSource(tablenum(PurchLine));
        qbdsPurchLine.joinMode(JoinMode::InnerJoin);
        qbdsPurchLine.relations(true);
     
        QueryBuildRange initialPOLineStatusCriteria;

        if (_specQty == PurchUpdate::All)
        {
            initialPOLineStatusCriteria = qbdsPurchLine.addRange(fieldNum(PurchLine, PurchStatus));
            initialPOLineStatusCriteria.value(strFmt('%1, %2', enum2str(PurchStatus::Backorder), enum2str(PurchStatus::Received)));
            initialPOLineStatusCriteria.status(RangeStatus::Locked);
        }
        else
        {
            initialPOLineStatusCriteria = qbdsPurchLine.addRange(fieldNum(PurchLine, PurchStatus));
            initialPOLineStatusCriteria.value(enum2str(PurchStatus::Backorder));
            initialPOLineStatusCriteria.status(RangeStatus::Locked);
    
            initialPOLineStatusCriteria = qbdsPurchLine.addRange(fieldNum(PurchLine, PurchStatus));
            initialPOLineStatusCriteria.value(enum2str(PurchStatus::Received));
            initialPOLineStatusCriteria.status(RangeStatus::Locked);

            QueryBuildDataSource vendPackingSlipTransqdbs;
            vendPackingSlipTransqdbs = qbdsPurchLine.addDataSource(tableNum(vendPackingSlipTrans));
            vendPackingSlipTransqdbs.joinMode(JoinMode::InnerJoin);
            vendPackingSlipTransqdbs.addLink(fieldNum(PurchLine, InventTransId), fieldNum(VendPackingSlipTrans, InventTransId));
        }

        QueryBuildRange initialPOLineStoppedCriteria = qbdsPurchLine.addRange(fieldNum(PurchLine, Blocked));
        initialPOLineStoppedCriteria.value(enum2str(NoYes::No));
        initialPOLineStoppedCriteria.status(RangeStatus::Locked);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForPackingslip</Name>
				<Source><![CDATA[
    private static Query buildQueryForPackingslip(PurchIdRange _purchIdRangeValue, Range _packingslipRangeValue)
    {
        Query query = new Query();
        QueryBuildDataSource qbdsVendInvoiceJour = query.addDataSource(tableNum(VendPackingSlipJour));

        if (_purchIdRangeValue)
        {
            QueryBuildRange purchIdRangeCriteria = qbdsVendInvoiceJour.addRange(fieldNum(VendPackingSlipJour, PurchId));
            purchIdRangeCriteria.value(VendInvoiceAutomationCreateLines::getRangeExpression(_purchIdRangeValue,
                                                                        tableStr(VendPackingSlipJour),
                                                                        tableStr(VendPackingSlipJour),
                                                                        fieldStr(VendPackingSlipJour, PurchId)));
        }
        if (_packingslipRangeValue)
        {
            QueryBuildRange packingslipIdCriteria = qbdsVendInvoiceJour.addRange(fieldNum(VendPackingSlipJour, PackingSlipId));
            packingslipIdCriteria.value(VendInvoiceAutomationCreateLines::getRangeExpression(_packingslipRangeValue,
                                                                        tableStr(VendPackingSlipJour),
                                                                        tableStr(VendPackingSlipJour),
                                                                        fieldStr(VendPackingSlipJour, PackingSlipId)));
        }
        
        QueryBuildDataSource qbdsVendPackingSlipTrans = qbdsVendInvoiceJour.addDataSource(tablenum(VendPackingSlipTrans));
        qbdsVendPackingSlipTrans.joinMode(JoinMode::ExistsJoin);
        qbdsVendPackingSlipTrans.relations(true);
        qbdsVendPackingSlipTrans.addRange(fieldnum(VendPackingSlipTrans, FullyMatched)).value(queryValue(NoYes::No));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createImportDocumentEventLog</Name>
				<Source><![CDATA[
    private static void createImportDocumentEventLog(ParmId _parmId, RecId _fromRecId)
    {
        DocumentEventLog documentEventLog;

        // Delete document logs for deleted invoice
        delete_from documentEventLog
            where documentEventLog.SourceTableId == tableNum(VendInvoiceInfoTable)
                && documentEventLog.SourceRecId == _fromRecId;

        VendInvoiceAutomationCreateLines::logDocumentHistoryForImportEvent(_parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAutogeneratedFlag</Name>
				<Source><![CDATA[
    private static void updateAutogeneratedFlag(ParmId _parmId)
    {
        VendInvoiceInfoLine invoiceLine;

        invoiceLine.skipDataMethods(true);

        update_recordset invoiceLine
            setting IsAutogenerated = NoYes::Yes
            where invoiceLine.ParmId == _parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveInvoiceToAutomation</Name>
				<Source><![CDATA[
    private static void moveInvoiceToAutomation(ParmId _parmId)
    {
        VendInvoiceInfoTable invoiceTable;

        invoiceTable.skipDataMethods(true);

        update_recordset invoiceTable
            setting DocumentOrigin = DocumentOrigin::Service,
                    AutomationStatus = VendInvoiceAutomationStatus::Included,
                    IncludeInAutomatedProcessing = NoYes::Yes
            where invoiceTable.ParmId == _parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDocumentHistoryForCreateLineEvent</Name>
				<Source><![CDATA[
    private static void logDocumentHistoryForCreateLineEvent(ParmId _parmId)
    {
        DocumentEventRequestDocumentsTmp documentEventRequestTmp;
        VendInvoiceInfoTable invoiceTable;
        VendInvoiceInfoLine invoiceLine;

        //Insert succeeded status        
        insert_recordset documentEventRequestTmp (SourceRecId)
            select RecId from invoiceTable
                where invoiceTable.ParmId == _parmId
                exists join invoiceLine
                    where invoiceLine.TableRefId == invoiceTable.TableRefId
                        && invoiceLine.ParmId == invoiceTable.ParmId;

        select firstonly RecId from documentEventRequestTmp;

        if (documentEventRequestTmp.RecId != 0)
        {
            //Log automatic create lines status
            DocumentEventLogRequest logRequest = new DocumentEventLogRequest();
            logRequest.eventEnumId = enumNum(VendInvoiceAutomationCreateLinesEvent);
            logRequest.eventEnumValue = VendInvoiceAutomationCreateLinesEvent::Succeeded;
            logRequest.sourceTableId = tableNum(VendInvoiceInfoTable);
            logRequest.sourceRecId = 0;
            logRequest.requestDocumentsTmp = documentEventRequestTmp;

            DocumentEventLog::logDocumentEvent(logRequest);
        }

        documentEventRequestTmp = null;

        //Insert failed status
        insert_recordset documentEventRequestTmp (SourceRecId)
            select RecId from invoiceTable
                where invoiceTable.ParmId == _parmId
            notexists join invoiceLine
            where invoiceLine.TableRefId == invoiceTable.TableRefId
            && invoiceLine.ParmId == invoiceTable.ParmId;

        select firstonly RecId from documentEventRequestTmp;

        if (documentEventRequestTmp.RecId != 0)
        {
            //Log automatic create lines status
            DocumentEventLogRequest logRequest = new DocumentEventLogRequest();
            logRequest.eventEnumId = enumNum(VendInvoiceAutomationCreateLinesEvent);
            logRequest.eventEnumValue = VendInvoiceAutomationCreateLinesEvent::Failed;
            logRequest.sourceTableId = tableNum(VendInvoiceInfoTable);
            logRequest.sourceRecId = 0;
            logRequest.requestDocumentsTmp = documentEventRequestTmp;

            DocumentEventLog::logDocumentEvent(logRequest);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDocumentHistoryForImportEvent</Name>
				<Source><![CDATA[
    private static void logDocumentHistoryForImportEvent(parmId _parmId)
    {
        DocumentEventRequestDocumentsTmp documentEventRequestTmp;
        VendInvoiceInfoTable localVendInvoiceInfoTable;

        insert_recordset documentEventRequestTmp (SourceRecId)
            select RecId from localVendInvoiceInfoTable
                where localVendInvoiceInfoTable.ParmId == _parmId;

        select firstonly RecId from documentEventRequestTmp;

        if (documentEventRequestTmp.RecId != 0)
        {
            //Log automatic create lines status
            DocumentEventLogRequest logRequest = new DocumentEventLogRequest();
            logRequest.eventEnumId = enumNum(VendInvoiceImportEvent);;
            logRequest.eventEnumValue = VendInvoiceImportEvent::Succeeded;
            logRequest.sourceTableId = tableNum(VendInvoiceInfoTable);
            logRequest.sourceRecId = 0;
            logRequest.requestDocumentsTmp = documentEventRequestTmp;

            DocumentEventLog::logDocumentEvent(logRequest);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRangeExpression</Name>
				<Source><![CDATA[
    private static str getRangeExpression(Range _rangeValue,
                                          str _queryBuildDataSourceName, 
                                          str _masterFormDataSourceName, 
                                          str _fieldName)
    {
        FilterOperators filterOperatorsLocal = FieldFilterExpression::getOperatorFromRangeValue(_rangeValue);
        List filterValues = FieldFilterExpression::getValueListFromRangeValue(_rangeValue, filterOperatorsLocal);
        
        FieldFilterExpression filterExpression = FieldFilterExpression::constructForQueryBuildDataSource(_queryBuildDataSourceName,
                                                                                                        _masterFormDataSourceName,
                                                                                                        _fieldName,
                                                                                                        filterOperatorsLocal,
                                                                                                        filterValues);
        return filterExpression ? filterExpression.parmValueAsString() : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAdvance</Name>
				<Source><![CDATA[
    internal static void createAdvance(TradeLineRefId _tableRefId,
                                       PurchIdRange _purchIdRangeValue,
                                       VendInvoiceImportedAmount _totalAmount)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::findTableRefId(_tableRefId, true);

        if (vendInvoiceInfoTable)
        {
            PurchTable purchTable = PurchTable::find(_purchIdRangeValue);
            ttsbegin;
            vendInvoiceInfoTable.initFromPurchTable(purchTable);
            vendInvoiceInfoTable.ParmJobStatus = ParmJobStatus::Waiting;
            vendInvoiceInfoTable.VendInvoiceSaveStatus = VendInvoiceSaveStatus::Pending;
            vendInvoiceInfoTable.LastMatchVariance = LastMatchVarianceOptions::OK;
            vendInvoiceInfoTable.doUpdate();

            VendInvoiceInfoLine vendInvoiceInfoLine = VendInvoiceAutomationCreateLines::createAdvanceLine(vendInvoiceInfoTable, _totalAmount);
            if (InvoiceImportAutomationCreateInvoiceLinesSetupFlight::instance().isEnabled()
                && !vendInvoiceInfoLine)
            {
                throw error("@AccountsPayable:VendInvoiceValidationNoInvoiceLineCheck");
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAdvanceLine</Name>
				<Source><![CDATA[
    private static VendInvoiceInfoLine createAdvanceLine(VendInvoiceInfoTable _vendInvoiceInfoTable, VendInvoiceImportedAmount _totalAmount)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        PurchPrepayTable purchPrepayTable = PurchPrepayTable::findPurchId(_vendInvoiceInfoTable.PurchId);

        if (_vendInvoiceInfoTable.RecId != 0 && purchPrepayTable.RecId != 0)
        {
            vendInvoiceInfoLine.LineType = PurchInvoiceLineType::Advance;
            vendInvoiceInfoLine.TableRefId = _vendInvoiceInfoTable.TableRefId;
            vendInvoiceInfoLine.OrigPurchId = _vendInvoiceInfoTable.PurchId;
            vendInvoiceInfoLine.defaultRow(null, null, 1.0);
            vendInvoiceInfoLine.PurchPrice = _totalAmount;
            vendInvoiceInfoLine.LineAmount = _totalAmount;

            vendInvoiceInfoLine.insert();

            if (!VendInvoiceInfoSubTable::exist('', vendInvoiceInfoLine.TableRefId, vendInvoiceInfoLine.OrigPurchId))
            {
                VendInvoiceInfoSubTable::createFromVendInvoiceInfoLine(vendInvoiceInfoLine, '', _vendInvoiceInfoTable.PurchName, true);
            }
        }
        
        return vendInvoiceInfoLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>