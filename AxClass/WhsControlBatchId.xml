<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsControlBatchId</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsControlBatchId</c> class is responsible for handling the batch ID controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#BatchId)]
public class WhsControlBatchId extends WhsControl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public boolean process()
    {
        if (this.isValidationRequired())
        {
            if (this.isCounting())
            {
                if (!controlData.validateBatchInLocationCycleCount(this.parmData()))
                {
                    if (pass.exists(#RFAddLP))
                    {
                        fieldValues.parmBatchId(this.parmData());
                        // Initialize the ExpirationDate to make sure we do not mark complete=true, if ExpDate is not yet populated.
                        fieldValues.insert(#ExpDate, pass.lookupStr(#ExpDate));
                        return true;
                    }
                    pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
                    pass.insert(#RFAddLP, 1);
                    return this.fail("@WAX1163");
                }
            }
            else if (this.mustValidateCurrentLocationOnly())
            {
                if (!this.canUseLocationForBatch(this.parmData()))
                {
                    return this.fail("@WAX1700");
                }
            }
            else if (this.isTransferOrderReceiving())
            {
                if (!controlData.validateBatchIdOnTOItemReceiving(this.parmData()))
                {
                    return this.fail("@WAX1163");
                }
            }
            else if (this.isReturnOrder())
            {
                if (!InventBatch::exist(this.parmData(), fieldValues.parmItemId()))
                {
                    return this.fail("@WAX1163");
                }
            }
            else
            {
                if (!InventBatch::exist(this.parmData(), fieldValues.parmItemId()))
                {
                    return this.fail("@WAX1163");
                }

                WHSWorkLine workLine = controlData.parmWorkLine();

                // Do not allow the user to scan a batch containing a disposition code that is unavailable for picking.
                if (workLine.WorkType == WHSWorkType::Pick
                        &&  !InventBatch::find(this.parmData(), fieldValues.parmItemId()).validateBatchDispCodeForPicking(workLine.whsWorkTable().WorkTransType))
                {
                    return this.fail(strFmt("@WAX5580", this.parmData()));
                }

                if (!pass.exists(#InventoryStatus) || pass.lookup(#InventoryStatus) == '')
                {
                    controlData.parmFromInventStatusId(controlData.getInventStatusId());
                }

                if (this.mustValidateBatchExistsInLocation())
                {
                    this.refreshInventoryStatusId();

                    if (!controlData.batchExistInLocation(this.parmData()))
                    {
                        return this.fail("@WAX1693");
                    }
                }

                if (workLine.WorkType == WHSWorkType::Pick
                    && InventTable::find(workLine.ItemId).whsBatchActive())
                {
                    boolean batchSellableDaysCheck;

                    if (workLine.whsWorkTable().WorkTransType == WHSWorkTransType::Sales)
                    {
                        batchSellableDaysCheck = controlData.checkBatchSellableDays(workLine, '', this.parmData());
                    }

                    if (!batchSellableDaysCheck &&
                                workLine.whsWorkTable().WorkTransType == WHSWorkTransType::Sales  &&
                                !WHSWorkLine::isPutBefore(workLine.WorkId, workLine.LineNum))
                    {
                        return this.fail("@WAX:BatchIsNotSellable");
                    }

                    if (this.parmEnabled()
                        &&      WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).PickOldestBatch != WHSPickOldestBatch::None
                        &&      mode != WHSWorkExecuteMode::Quarantine
                        &&      (!pass.exists(#FEFOWarnBatch)
                        ||      pass.lookup(#FEFOWarnBatch)        != this.parmData())
                        &&      workLine.inventDim().InventBatchId == '')
                    {
                        InventBatchExpDate batchExpDate;
                        if (batchSellableDaysCheck)
                        {
                            batchExpDate = this.batchExpiryDate(workLine);
                        }

                        Set oldestBatchSet = WHSRFControlData::getOldestBatchInLocForPickLine(workLine, batchExpDate);

                        boolean skipUsingEmptySet = !oldestBatchSet.empty();

                        if (skipUsingEmptySet
                            && !oldestBatchSet.in(this.parmData()))
                        {
                            var oldestBatchEnumerator = oldestBatchSet.getEnumerator();
                            oldestBatchEnumerator.moveNext();
                            this.fail(strFmt("@WAX4165", oldestBatchEnumerator.current()));

                            if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).PickOldestBatch == WHSPickOldestBatch::Warn)
                            {
                                pass.insert(#FEFOWarnBatch, this.parmData());
                                controlData.parmColorText(WHSRFColorText::Warning);
                            }
                            return false;
                        }
                    }
                }

                if (!WHSCheckForAlreadyValidatedLicensePlateIdOrBatchIdOnPickOldestBatchWarningFlight::instance().isEnabled())
                {
                    if (pass.exists(#FEFOWarnBatch))
                    {
                        pass.remove(#FEFOWarnBatch);
                    }
                }

                if (!pass.exists(#BatchId) || pass.lookup(#BatchId) == '')
                {
                    fieldValues.parmBatchId(this.parmData());

                    controlData.parmFromInventStatusId(controlData.getInventStatusId());
                    fieldValues.parmQty(controlData.getQty());
                }
            }
        }
        fieldValues.parmBatchId(this.parmData());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshInventoryStatusId</Name>
				<Source><![CDATA[
    private void refreshInventoryStatusId()
    {
        var displayContext = WHSWorkExecuteDisplayContext::current();

        if (displayContext && displayContext.con)
        {
            WhsWorkExecuteDisplay workExecuteDisplay = this.controlData.parmWHSWorkExecuteDisplay();

            if (!workExecuteDisplay)
            {
                return;
            }

            int statusControlLocation = workExecuteDisplay.getControlLocationInContainer(displayContext.con, #InventoryStatus);
                            
            if (statusControlLocation > 0)
            {
                container statusControl = conPeek(displayContext.con, statusControlLocation);
                                
                int statusControlEnabled = conPeek(statusControl, #enabled);
                str statusControlData    = conPeek(statusControl, #data);

                // Check if status has changed
                if (statusControlData                                   &&
                    statusControlEnabled                                &&
                    ((pass.exists(#SelectedValue)                       &&
                    pass.lookup(#SelectedValue)   != statusControlData) ||
                    (pass.exists(#InventoryStatus)                      &&
                    pass.lookup(#InventoryStatus) != statusControlData)))
                {
                    pass.insert(#InventoryStatus, statusControlData);
                    pass.insert(#SelectedValue, statusControlData);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateBatchExistsInLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to validate that the batch exists in the location.
    /// </summary>
    /// <returns>true if the batch must be validated to exist in location; otherwise, false.</returns>
    protected boolean mustValidateBatchExistsInLocation()
    {
        return mode != WHSWorkExecuteMode::MovementByTemplate
                && mode != WHSWorkExecuteMode::Quarantine
                && (mode != WHSWorkExecuteMode::MaterialConsumption
                    || !WHSMaterialConsumptionJournalHelper::isBatchNumberPickedForProdBOM(this.parmData(), pass.lookupStr(#ProdId), pass.lookup(#ItemId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchExpiryDate</Name>
				<Source><![CDATA[
    private InventBatchExpDate batchExpiryDate(WHSWorkLine _workLine)
    {
        InventBatchExpDate batchExpDate = dateNull();

        if (_workLine.LoadLineRefRecId)
        {
            batchExpDate = InventMovement::construct(
                                WHSLoadLine::findbyRecId(_workLine.LoadLineRefRecId).getOrderCommonFromLoadLine()).minAllowedExpiryDate();
        }

        return batchExpDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCounting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the control is used by a counting flow.
    /// </summary>
    /// <returns>true if the control is used by a counting flow; otherwise, false.</returns>
    [Replaceable]
    protected boolean isCounting()
    {
        if (controlData.parmWorkLine().WorkType == WHSWorkType::Count)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidationRequired</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the provided batch ID must be validated.
    /// </summary>
    /// <returns>
    ///    true if validation is required; otherwise, false.
    /// </returns>
    [Replaceable]
    protected boolean isValidationRequired()
    {
        if (this.isCounting())
        {
            return true;
        }

        switch (mode)
        {
            case WHSWorkExecuteMode::ReportAsFinished:
            case WHSWorkExecuteMode::ReportAsFinishedAndLocate:
            case WHSWorkExecuteMode::ReportAsFinishedBySerial:
            case WHSWorkExecuteMode::KanbanPut:
            case WHSWorkExecuteMode::KanbanPutAndLocate:
                return false;

            case WHSWorkExecuteMode::MixedLPReceiving:
            case WHSWorkExecuteMode::MixedLPReceivingAndLocate:
                WHSRFMenuItemTable rfMenuItem = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem));
                if (!WHSWorkExecuteDisplayReceivingRefactoringFlight::instance().isEnabled())
                {
                    return rfMenuItem.MixedLPReceivingMode != WHSMixedLPReceivingMode::LoadItemReceiving
                        && rfMenuItem.MixedLPReceivingMode != WHSMixedLPReceivingMode::POItemReceiving
                        && rfMenuItem.MixedLPReceivingMode != WHSMixedLPReceivingMode::POLineReceiving;
                }

                var workTransType = WHSRFMenuItemTable::getWorkTransTypeForMixedLPReceivingMode(rfMenuItem.MixedLPReceivingMode);
                return !WhsWorkTransactionType::singletonFromType(workTransType).isForExternalInboundShipment();
        }
        
        return !WHSWorkExecutionMode::newFromMode(mode).isInboundOrderOrLoadReceiving();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateCurrentLocationOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the only validation required is of the current location.
    /// </summary>
    /// <returns>true if only the current location must be validated; otherwise, false.</returns>
    [Replaceable]
    protected boolean mustValidateCurrentLocationOnly()
    {
        if (controlData.parmWorkLine().WorkType == WHSWorkType::Put)
        {
            return true;
        }

        switch (mode)
        {
            case WHSWorkExecuteMode::AdjustmentIn:
            case WHSWorkExecuteMode::LicensePlateLoading:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransferOrderReceiving</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the control is used by a transfer order receiving flow.
    /// </summary>
    /// <returns>true if the control is used by a transfer order receiving flow; otherwise, false.</returns>
    [Replaceable]
    protected boolean isTransferOrderReceiving()
    {
        return controlData.isTransferOrderReceiving();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the control is used by a return order flow.
    /// </summary>
    /// <returns>true if the control is used by a return order flow; otherwise, false.</returns>
    [Replaceable]
    protected boolean isReturnOrder()
    {
        switch (mode)
        {
            case WHSWorkExecuteMode::ReturnItemReceiving:
            case WHSWorkExecuteMode::ReturnOrder:
            case WHSWorkExecuteMode::ReturnOrderAndLocate:
                return true;

            case WHSWorkExecuteMode::MixedLPReceiving:
            case WHSWorkExecuteMode::MixedLPReceivingAndLocate:
                WHSRFMenuItemTable rfMenuItem = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem));
                return rfMenuItem.MixedLPReceivingMode == WHSMixedLPReceivingMode::ReturnOrderReceiving;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseLocationForBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current location can be used for the given batch.
    /// </summary>
    /// <param name="_batchId">
    ///    The batch number to check against.
    /// </param>
    /// <returns>
    ///    true if the current location can be used for the given batch; otherwise, false.
    /// </returns>
    public boolean canUseLocationForBatch(InventBatchId _batchId)
    {
        WMSLocation wmsLocation = controlData.wmsLocation();

        if (this.isMixedBatchesAllowedInlocation(wmsLocation))
        {
            return true;
        }

        return !wmsLocation.doesLocationHaveOtherBatches(_batchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMixedBatchesAllowedInlocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified location allows mixed batches.
    /// </summary>
    /// <param name="_wmsLocation">The <c>WMSLocation</c> to check.</param>
    /// <returns>true if the specified location allows mixed batches; otherwise, false.</returns>
    protected boolean isMixedBatchesAllowedInlocation(WMSLocation _wmsLocation)
    {
        return _wmsLocation.whsLocationProfile().AllowMixedBatches;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    public void populate()
    {
        if (mode == WHSWorkExecuteMode::AdjustmentIn)
        {
            if (fieldValues.parmLicensePlateId())
            {
                if (WHSLicensePlate::exist(fieldValues.parmLicensePlateId()))
                {
                    fieldValues.parmBatchId(this.getBatchId());
                }
            }
        }
        else if (controlData.parmWorkLine().WorkType != WHSWorkType::Count)
        {
            fieldValues.parmBatchId(this.getBatchId());
        }
        else if (!fieldValues.exists(#BatchId))
        {
            fieldValues.parmBatchId('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchId</Name>
				<Source><![CDATA[
    private str getBatchId()
    {
        str ret = controlData.getValueFromInventDimField(fieldNum(InventDim, InventBatchId));

        if (!ret
            && WHSBarcodeDataParserFactory::isBarcodeDataParsingEnabled())
        {
            ret = fieldValues.lookupStr(#BatchId);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>