<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsGenerateInspectionOrders</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// class for generating inspection orders
/// </summary>
public class PdsGenerateInspectionOrders extends RunBaseBatch implements BatchRetryable
{
    QueryRun    queryRun;
    boolean     pack;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        pack
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method overrides the runbasebatch - it can go batch
    /// </summary>
    /// <returns>
    /// returns true
    /// </returns>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// The object is intialized
    /// </summary>
    protected void new()
    {
        super();

        this.newQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new query based on batchId, itemId, production date
    /// </summary>
    /// <param name="_batchId">
    /// BatchId
    /// </param>
    /// <param name="_itemId">
    /// ItemId
    /// </param>
    /// <param name="_prodDate">
    /// Production date
    /// </param>
    private void newQuery(
        InventBatchId   _batchId = '',
        ItemId          _itemId = '',
        date            _prodDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        Query                   query = new Query(querystr(PdsInventBatchQuery));

        query.dataSourceTable(tablenum(InventBatch)).update(true);

        if (_batchId)
        {
            query.dataSourceTable(tablenum(InventBatch))
                .addRange(fieldnum(InventBatch, InventBatchId)).value(_batchId);
        }

        if (_itemId)
        {
            query.dataSourceTable(tablenum(InventBatch))
                .addRange(fieldnum(InventBatch, ItemId)).value(_itemId);
        }

        if (_prodDate)
        {
            query.dataSourceTable(tablenum(InventBatch))
                .addRange(fieldnum(InventBatch, ProdDate)).value(
                    queryValue(_prodDate));
        }

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// This creates a packed version of the query
    /// </summary>
    /// <returns>
    /// returns a packed query
    /// </returns>
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a queryrun object for the query
    /// </summary>
    /// <returns>
    /// returns queryrun object
    /// </returns>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method runs the query and generates the inspection orders
    /// </summary>
    public void run()
    {
        Counter             progressTotal;
        InventBatch         inventBatch;
        boolean             generated = false;

        progressTotal = SysQuery::countTotal(queryRun);
        this.progressInit("@PRO957", progressTotal, #AviUpdate);
        progress.setCount(0);

        ttsbegin;

        setprefix("@PRO947");

        while (queryRun.next())
        {
            inventBatch = queryRun.getNo(1);
            setprefix(
                "@PDS194"
                    + '\r\r\n'
                    + inventBatch.InventBatchId);

            progress.setText(strfmt("@PRO56", inventBatch.InventBatchId));

            if (inventBatch.PdsShelfAdviceDate
                && inventBatch.PdsShelfAdviceDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
            {
                InventQualityManagementCreateHandler::createPdsInspectionOrders(inventBatch);
                generated = true;
            }

            progress.incCount();
        }

        if (!generated)
        {
            info("@PRO958");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method overrides the runbasebatch - allow query values to be seen
    /// </summary>
    /// <returns>
    /// returns flag
    /// </returns>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method upacks the query and return true if it did
    /// </summary>
    /// <param name="_packedClass">
    /// packed container
    /// </param>
    /// <returns>
    /// returns flag if unpacked okay
    /// </returns>
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conpeek(_packedClass,1);
        container   packedQuery;
        boolean     ret = true;

        switch (version)
        {
            case #CurrentVersion  :
                [version, #CurrentList, packedQuery] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>
    /// returns instance
    /// </returns>
    public static PdsGenerateInspectionOrders construct()
    {
        return new PdsGenerateInspectionOrders();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an description of the class
    /// </summary>
    /// <returns>
    /// returns description
    /// </returns>
    public static ClassDescription description()
    {
        return "@PRO947";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method constructs an instance and runs the class
    /// </summary>
    /// <param name="_args">
    /// Any arguments passed
    /// </param>
    public static void main(Args _args)
    {
        PdsGenerateInspectionOrders     pdsGenerateInspectionOrders;
        InventBatch                     inventBatch;

        if (InventParameters::find().UseQualityManagement)
        {
            if (_args
                && _args.record()
                && _args.record().TableId == tablenum(InventBatch))
            {
                inventBatch = _args.record();
                pdsGenerateInspectionOrders =
                    PdsGenerateInspectionOrders::newBuffer(
                        inventBatch.InventBatchId,
                        inventBatch.ItemId,
                        inventBatch.ProdDate);
            }
            else
            {
                pdsGenerateInspectionOrders = PdsGenerateInspectionOrders::construct();
                pdsGenerateInspectionOrders.getLast();
            }

            if (pdsGenerateInspectionOrders.prompt())
            {
                pdsGenerateInspectionOrders.runOperation();
            }
        }
        else
        {
            warning("@PDS1150");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance and sets up a new query based on batchId, itemId, production date
    /// </summary>
    /// <param name="_batchId">
    /// BatchId
    /// </param>
    /// <param name="_itemId">
    /// ItemId
    /// </param>
    /// <param name="_prodDate">
    /// Production date
    /// </param>
    /// <returns>
    /// returns instance
    /// </returns>
    public static PdsGenerateInspectionOrders newBuffer(
        InventBatchId   _batchId = '',
        ItemId          _itemId = '',
        TransDate       _prodDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        PdsGenerateInspectionOrders  pdsGenerateInspectionOrders;

        pdsGenerateInspectionOrders = PdsGenerateInspectionOrders::construct();
        pdsGenerateInspectionOrders.getLast();
        pdsGenerateInspectionOrders.newQuery(_batchId, _itemId, _prodDate);

        return pdsGenerateInspectionOrders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>