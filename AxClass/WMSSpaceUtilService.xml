<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsSpaceUtilService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSSpaceUtilService</c> class provides an API for building the space utilization forecast.
/// </summary>
public class WmsSpaceUtilService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds space utilization forecast
    /// </summary>
    /// <param name="_dataContract">
    /// An instance of the <c>WMSSpaceUtilServiceDataContract</c> class.
    /// </param>
    public void buildForecast(WMSSpaceUtilServiceDataContract _dataContract)
    {
        WMSSpaceUtilPeriodTemplateBuilder   periodTemplateBuilder;
        WMSSpaceUtilSetupOptions            setupOptions;
        WMSSpaceUtilDatePeriodsBuilder      datePeriodsBuilder;
        WMSStorageLoadUnitBuilder           storageLoadUnitBuilder;
        WMSSpaceUtilPlanForecastProvider    planForecastProvider;
        WMSSpaceUtilForecastBuilder         forecastBuilder;
        WMSSpaceUtilInconsistencyLogger     inconsistencyLogger;

        ttsbegin;

        periodTemplateBuilder = WMSSpaceUtilPeriodTemplateBuilder::construct();
        periodTemplateBuilder.parmNumberOfDays(_dataContract.parmNumberOfDays());
        periodTemplateBuilder.parmReportSetup(_dataContract.parmReportSetupRecId());
        periodTemplateBuilder.createPeriodTemplate();

        setupOptions = WMSSpaceUtilSetupOptions::construct();
        setupOptions.parmPeriodTemplateName(periodTemplateBuilder.getPeriodTemplateName());
        setupOptions.parmFromDate(WMSReportSetup::getCompanyTodayDate());
        setupOptions.initFromWMSSPaceUtilServiceDataContract(_dataContract);

        datePeriodsBuilder = WMSSpaceUtilDatePeriodsBuilder::construct();
        datePeriodsBuilder.parmFromDate(setupOptions.parmFromDate());
        datePeriodsBuilder.parmReportSetup(setupOptions.parmReportSetupRecId());
        datePeriodsBuilder.parmWorkPeriodTemplate(WorkPeriodTemplate::findName(setupOptions.parmPeriodTemplateName()).RecId);
        datePeriodsBuilder.buildPeriods();

        storageLoadUnitBuilder = WMSStorageLoadUnitBuilder::construct();
        storageLoadUnitBuilder.parmSetupOptions(setupOptions);
        storageLoadUnitBuilder.buildStorageLoadUnits();

        inconsistencyLogger = WMSSpaceUtilInconsistencyLogger::construct();
        inconsistencyLogger.parmReportSetup(setupOptions.parmReportSetupRecId());

        planForecastProvider = WMSSpaceUtilPlanForecastProvider::construct();
        planForecastProvider.parmSetupOptions(setupOptions);
        planForecastProvider.parmInconsistencyLogger(inconsistencyLogger);
        planForecastProvider.processPlannedForecast();

        forecastBuilder = WMSSpaceUtilForecastBuilder::construct();
        forecastBuilder.parmSetupOptions(setupOptions);
        forecastBuilder.buildForecast();

        periodTemplateBuilder.deletePeriodTemplate();

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
