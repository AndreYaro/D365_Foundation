<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWarehouseReleaseLineCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWarehouseReleaseLineCreator</c> class is responsible for creating lines when releasing to warehouse.
/// </summary>
public class WhsWarehouseReleaseLineCreator
{
    private WHSInstrumentationLogger    instrumentationLogger = WHSInstrumentationLogger::createLogger(classStr(WhsWarehouseRelease));
    private WHSTmpReleaseToWarehouse    releaseToWarehouse;
    private WHSReleaseToWarehouseId     releaseToWarehouseId;
    private WHSModule                   whsModule;
    private boolean                     useCrossDocking;
    private boolean                     releaseAllQuantity;
    private boolean                     mustValidateReleaseQuantity;
    private boolean                     usePreviouseReleaseToWarehouseRecords;

    protected WHSInventTransSumDim    inventTransSumDim;
    protected boolean                 isCWItem;
    protected InventHandlingQty       reservedOrOnOrderQty;
    protected InventHandlingQty       releasedNotPickedQty;
    protected InventHandlingQty       reservedPhysicalQty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmInventTransSumDim</Name>
				<Source><![CDATA[
    public WHSInventTransSumDim parmInventTransSumDim(WHSInventTransSumDim _inventTransSumDim = inventTransSumDim)
    {
        inventTransSumDim = _inventTransSumDim;
        return inventTransSumDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseCrossDocking</Name>
				<Source><![CDATA[
    [SysObsolete('The parmReleaseAllQuantity method should be used instead.', false, 30\04\2022)]
    public boolean parmUseCrossDocking(boolean _useCrossDockng = useCrossDocking)
    {
        useCrossDocking = _useCrossDockng;
        return useCrossDocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseAllQuantity</Name>
				<Source><![CDATA[
    public boolean parmReleaseAllQuantity(boolean _releaseAllQuantity = releaseAllQuantity)
    {
        releaseAllQuantity = _releaseAllQuantity;
        return releaseAllQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMustValidateReleaseQuantity</Name>
				<Source><![CDATA[
    internal boolean parmMustValidateReleaseQuantity(boolean _mustValidateReleaseQuantity = mustValidateReleaseQuantity)
    {
        mustValidateReleaseQuantity = _mustValidateReleaseQuantity;
        return mustValidateReleaseQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUsePreviouseReleaseToWarehouseRecords</Name>
				<Source><![CDATA[
    internal boolean parmUsePreviouseReleaseToWarehouseRecords(boolean _usePreviouseReleaseToWarehouseRecords = usePreviouseReleaseToWarehouseRecords)
    {
        usePreviouseReleaseToWarehouseRecords = _usePreviouseReleaseToWarehouseRecords;
        return usePreviouseReleaseToWarehouseRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseToWarehouse</Name>
				<Source><![CDATA[
    public WHSTmpReleaseToWarehouse parmReleaseToWarehouse(WHSTmpReleaseToWarehouse _releaseToWarehouse = releaseToWarehouse)
    {
        releaseToWarehouse = _releaseToWarehouse;
        return releaseToWarehouse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseToWarehouseId</Name>
				<Source><![CDATA[
    public WHSReleaseToWarehouseId parmReleaseToWarehouseId(WHSReleaseToWarehouseId _releaseToWarehouseId = releaseToWarehouseId)
    {
        releaseToWarehouseId = _releaseToWarehouseId;
        return releaseToWarehouseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWhsModule</Name>
				<Source><![CDATA[
    public WHSModule parmWhsModule(WHSModule _whsModule = whsModule)
    {
        whsModule = _whsModule;
        return whsModule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WhsWarehouseReleaseLineCreator construct()
    {
        return new WhsWarehouseReleaseLineCreator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the line.
    /// </summary>
    /// <returns>true if the line was released; otherwise, false.</returns>
    [Wrappable(true), Replaceable(true)]
    internal boolean releaseLine()
    {
        isCWItem = PdsGlobal::pdsIsCWItem(inventTransSumDim.ItemId);

        reservedOrOnOrderQty = isCWItem ? -inventTransSumDim.SumOfPdsCWQty : -inventTransSumDim.SumOfQty; // The inventTransSumDim view only selects reserved or on order transactions
        releasedNotPickedQty = WHSWarehouseRelease::getReleasedNotPickedQty(inventTransSumDim.InventTransId, inventTransSumDim.InventDimId);

        if (usePreviouseReleaseToWarehouseRecords)
        {
            WHSTmpReleaseToWarehouse releaseToWarehousePrevious = WHSTmpReleaseToWarehouse::find(releaseToWarehouse, releaseToWarehouseId, inventTransSumDim.InventTransId, inventTransSumDim.inventDimId);
            releasedNotPickedQty += releaseToWarehousePrevious.ReleasedQty;
        }

        if (reservedOrOnOrderQty > releasedNotPickedQty)
        {
            reservedPhysicalQty = WHSTmpReleaseToWarehouse::reservePhysicalQtyFromInventTransSumDim(inventTransSumDim, reservedOrOnOrderQty);
              
            InventQty releaseQuantity = this.calculateQtyToRelease();
                
            return WHSTmpReleaseToWarehouse::tryCreateLineFromInventTransIdInventDimId(inventTransSumDim,
                                                                                      releaseToWarehouse,
                                                                                      releaseToWarehouseId,
                                                                                      whsModule,
                                                                                      releaseQuantity);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyToRelease</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity to release.
    /// </summary>
    /// <returns>The quantity to release.</returns>
    [Wrappable(true)]
    final protected InventQty calculateQtyToRelease()
    {
        if (   this.mustValidateReleaseQuantity()
            && !this.validateReleaseQuantity())
        {
            return 0;
        }

        return this.calculateReleaseQuantity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateReleaseQuantity</Name>
				<Source><![CDATA[
    private boolean mustValidateReleaseQuantity()
    {
        return (!releaseAllQuantity
            && !useCrossDocking)
            || mustValidateReleaseQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReleaseQuantity</Name>
				<Source><![CDATA[
    private boolean validateReleaseQuantity()
    {
        boolean isValid = true;

        if (reservedOrOnOrderQty > reservedPhysicalQty)
        {
            InventLocation inventLocation = InventDim::find(inventTransSumDim.inventDimId).inventLocation();
                    
            using (var activityContext = instrumentationLogger.warehouseRelease().checkReleaseToWarehouseRule(inventLocation.ReleaseToWarehouseRule))
            {
                instrumentationLogger.logRecordInformation(inventLocation);
            }

            if (inventLocation.ReleaseToWarehouseRule == WHSReleaseToWarehouseRule::RequireFullReservation)
            {
                isValid = false;

                if (this.mustPropagateErrorToOrderLevelOnAutoRelease(inventLocation)
                    && WHSAutoReleaseToWarehouseProcessingResultContext::current())
                {
                    WHSWarehouseReleaseProcessingResult processingResult = WHSAutoReleaseToWarehouseProcessingResultContext::current().processingResult;
                    processingResult.addOrderLevelError(strFmt("@WAX:Error_LoadLineRTWFailureForFullReservation",
                        inventTransSumDim.InventTransId,
                        InventTransOrigin::findByInventTransId(inventTransSumDim.InventTransId).ReferenceId,
                        inventLocation.InventLocationId));
                }
                else
                {
                    warning(strFmt("@WAX:Error_LoadLineRTWFailureForFullReservation",
                        inventTransSumDim.InventTransId,
                        InventTransOrigin::findByInventTransId(inventTransSumDim.InventTransId).ReferenceId,
                        inventLocation.InventLocationId));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPropagateErrorToOrderLevelOnAutoRelease</Name>
				<Source><![CDATA[
    private boolean mustPropagateErrorToOrderLevelOnAutoRelease(InventLocation _inventLocation)
    {
        return _inventLocation.ReleaseRuleFailureOption == WHSReleaseRuleFailureOption::ErrorSkipOrder
            && WHSAutoReleaseToWarehousePropagateFullReservErrorToOrderLevelFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateReleaseQuantity</Name>
				<Source><![CDATA[
    private InventQty calculateReleaseQuantity()
    {
        InventQty qtyToRelease;

        if (releaseAllQuantity
            || useCrossDocking)
        {
            qtyToRelease = reservedOrOnOrderQty - releasedNotPickedQty;
        }
        else
        {
            qtyToRelease = reservedPhysicalQty - releasedNotPickedQty;
        }

        return qtyToRelease;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>