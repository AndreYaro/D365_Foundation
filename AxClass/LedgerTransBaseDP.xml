<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransBaseDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerTransBaseDP</c> class declares the variables, tables, and so on, that are used in the
///    <c>LedgerTransBase</c> report.
/// </summary>
[SRSReportQuery(querystr(LedgerTransBase))]
[SRSReportParameterAttribute(classstr(LedgerTransBaseContract))]
public class LedgerTransBaseDP extends SrsReportDataProviderPreProcessTempDB
{
    LedgerTransBaseTmp ledgerTransBaseTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerTransBaseTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>LedgerTransBaseTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>LedgerTransBaseTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(LedgerTransBaseTmp))]
    public LedgerTransBaseTmp getLedgerTransBaseTmp()
    {
        select * from ledgerTransBaseTmp;

        return ledgerTransBaseTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipReportTransaction</Name>
				<Source><![CDATA[
    public boolean parmSkipReportTransaction(boolean _skipReportTransaction = skipReportTransaction)
    {
        if (FeatureStateProvider::isFeatureEnabled(LedgerSSRSReportSkipReportTransactionParmFlight::instance()))
        {
            skipReportTransaction = true;
        }
        return skipReportTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by
    /// SSRS at runtime. The method should compute data and populate the data tables that will be
    /// returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        Query reportQuery = this.parmQuery();
        LedgerTransBaseContract reportContract = this.parmDataContract() as LedgerTransBaseContract;

        using (SysInstrumentationActivityContext activityContext = this.logProcessReport())
        {
            this.queryInitialData(reportQuery, reportContract);

            this.querySubledgerData(reportContract);

            this.translateMainAccountNames();

            this.transferDebitCreditAmounts();

            this.setPageBreakField(reportContract);

            // Log the customer activity properties after the report data has been generated
            // because the query is adjusted based on user selections
            this.addActivityContextForReport(
                activityContext,
                reportContract,
                reportQuery);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryInitialData</Name>
				<Source><![CDATA[
    private void queryInitialData(Query _reportQuery, LedgerTransBaseContract _reportContract)
    {
        QueryBuildDataSource gjeDS = _reportQuery.dataSourceTable(tableNum(GeneralJournalEntry));
        GeneralJournalEntry::addSecureRangeForLedger(gjeDS);

        if (_reportContract.parmShowOperatingOnly())
        {
            QueryBuildDataSource fcpDS = _reportQuery.dataSourceTable(tableNum(FiscalCalendarPeriod));
            SysQuery::findOrCreateRange(fcpDS, fieldNum(FiscalCalendarPeriod, Type)).value(SysQuery::value(FiscalPeriodType::Operating));
        }

		if (_reportContract.parmFromDate() != dateNull()
			&& _reportContract.parmToDate() != dateNull())
		{
			QueryBuildRange dateRange = SysQuery::findOrCreateRange(gjeDS, fieldnum(GeneralJournalEntry, AccountingDate));
			dateRange.value(SysQuery::range(_reportContract.parmFromDate(), _reportContract.parmToDate()));
		}

        Map insertRecordsetMap = new Map(Types::String, Types::Container);

        this.buildFieldMap(_reportQuery, insertRecordsetMap);
        Query::insert_recordset(ledgerTransBaseTmp, insertRecordsetMap, _reportQuery);

        update_recordset ledgerTransBaseTmp setting Module = SysModule::Ledger;

        LedgerEntryJournalizing journalizing;
        update_recordset ledgerTransBaseTmp
            setting JournalizingNumber = journalizing.Journal
                where journalizing.GeneralJournalAccountEntry == ledgerTransBaseTmp.GeneralJournalAccountEntry;

        update_recordset ledgerTransBaseTmp
            setting Voucher = "@SYS342661"
                where ledgerTransBaseTmp.Voucher == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFieldMap</Name>
				<Source><![CDATA[
    private void buildFieldMap(Query _reportQuery, Map _fieldMap)
    {
        QueryBuildDataSource gjeDS = _reportQuery.dataSourceTable(tableNum(GeneralJournalEntry));
        QueryBuildDataSource gjaeDS = _reportQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry));
        QueryBuildDataSource maDS = _reportQuery.dataSourceTable(tableNum(MainAccount));

        if (!gjeDS || !gjaeDS || !maDS)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        _reportQuery.clearAllFields();

        // General journal entry fields
        int gjeUniqueId = gjeDS.uniqueId();
        QueryBuildFieldList gjeFL = gjeDS.fields();

        gjeFL.addField(fieldNum(GeneralJournalEntry, RecId));
        _fieldMap.insert(fieldStr(LedgerTransBaseTmp, GeneralJournalEntry), [gjeUniqueId, fieldStr(GeneralJournalEntry, RecId)]);

        gjeFL.addField(fieldNum(GeneralJournalEntry, SubledgerVoucher));
        _fieldMap.insert(fieldStr(LedgerTransBaseTmp, Voucher), [gjeUniqueId, fieldStr(GeneralJournalEntry, SubledgerVoucher)]);

        gjeFL.addField(fieldNum(GeneralJournalEntry, AccountingDate));
        _fieldMap.insert(fieldStr(LedgerTransBaseTmp, AccountingDate), [gjeUniqueId, fieldStr(GeneralJournalEntry, AccountingDate)]);

        gjeFL.addField(fieldNum(GeneralJournalEntry, JournalNumber));
        _fieldMap.insert(fieldStr(LedgerTransBaseTmp, JournalNumber), [gjeUniqueId, fieldStr(GeneralJournalEntry, JournalNumber)]);

        // General journal account entry fields
        int gjaeUniqueId = gjaeDS.uniqueId();
        QueryBuildFieldList gjaeFL = gjaeDS.fields();

        gjaeFL.addField(fieldNum(GeneralJournalAccountEntry, RecId));
        _fieldMap.insert(fieldStr(LedgerTransBaseTmp, GeneralJournalAccountEntry), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, RecId)]);

        gjaeFL.addField(fieldNum(GeneralJournalAccountEntry, Text));
        _fieldMap.insert(fieldStr(LedgerTransBaseTmp, Text), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, Text)]);

        gjaeFL.addField(fieldNum(GeneralJournalAccountEntry, IsCredit));
        _fieldMap.insert(fieldStr(LedgerTransBaseTmp, IsCredit), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, IsCredit)]);

        gjaeFL.addField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount));
        _fieldMap.insert(fieldStr(LedgerTransBaseTmp, AccountingCurrencyDebitAmount), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, AccountingCurrencyAmount)]);

        gjaeFL.addField(fieldNum(GeneralJournalAccountEntry, ReportingCurrencyAmount));
        _fieldMap.insert(fieldStr(LedgerTransBaseTmp, ReportingCurrencyDebitAmount), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, ReportingCurrencyAmount)]);

        gjaeFL.addField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyAmount));
        _fieldMap.insert(fieldStr(LedgerTransBaseTmp, TransactionCurrencyDebitAmount), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, TransactionCurrencyAmount)]);

        gjaeFL.addField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyCode));
        _fieldMap.insert(fieldStr(LedgerTransBaseTmp, TransactionCurrencyCode), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, TransactionCurrencyCode)]);

        gjaeFL.addField(fieldNum(GeneralJournalAccountEntry, LedgerAccount));
        _fieldMap.insert(fieldStr(LedgerTransBaseTmp, Id), [gjaeUniqueId, fieldStr(GeneralJournalAccountEntry, LedgerAccount)]);

        // Main account fields
        int maUniqueId = maDS.uniqueId();
        QueryBuildFieldList maFL = maDS.fields();

        maFL.addField(fieldNum(MainAccount, RecId));
        _fieldMap.insert(fieldStr(LedgerTransBaseTmp, MainAccount), [maUniqueId, fieldStr(MainAccount, RecId)]);

        maFL.addField(fieldNum(MainAccount, Name));
        _fieldMap.insert(fieldStr(LedgerTransBaseTmp, Name), [maUniqueId, fieldStr(MainAccount, Name)]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySubledgerData</Name>
				<Source><![CDATA[
    private void querySubledgerData(LedgerTransBaseContract _reportContract)
    {
        LedgerTransModule ledgerTransModule = LedgerTransModule::construct();
        ledgerTransModule.parmExcludeAsset(true);
        ledgerTransModule.parmExcludeGeneralLedger(false);

        ledgerTransModule.parmExcludeBank(!_reportContract.parmBank());
        ledgerTransModule.parmExcludeCustomer(!_reportContract.parmCust());
        ledgerTransModule.parmExcludeInventory(!_reportContract.parmInvent());
        ledgerTransModule.parmExcludeProduction(!_reportContract.parmProd());
        ledgerTransModule.parmExcludeProject(!_reportContract.parmProject());
        ledgerTransModule.parmExcludeTax(!_reportContract.parmTax());
        ledgerTransModule.parmExcludeVendor(!_reportContract.parmVend());

        ledgerTransModule.parmAccumulateTrans(true);
        ledgerTransModule.parmDelayMainAccountTranslation(true);
        ledgerTransModule.parmUserConnection(this.parmUserConnection());

        while select GeneralJournalEntry
            from ledgerTransBaseTmp
                group by ledgerTransBaseTmp.GeneralJournalEntry
        {
            ledgerTransModule.createTransModule(ledgerTransBaseTmp.GeneralJournalEntry, true);
        }

        LedgerTransModuleTmp transModuleTmp = ledgerTransModule.transModule();

        update_recordset ledgerTransBaseTmp
            setting TaxCode = transModuleTmp.TaxCodeString
        join transModuleTmp
            where transModuleTmp.RecordRecId == ledgerTransBaseTmp.GeneralJournalAccountEntry
                && transModuleTmp.RecordTableId == tableNum(GeneralJournalAccountEntry)
                && transModuleTmp.Module == SysModule::Ledger;

        // Generate a distinct list of voucher header records that can be used when inserting all the detail information
        LedgerTransBaseTmp voucherHeaders;
        this.takeOwnershipOfTempTable(voucherHeaders);

        insert_recordset voucherHeaders (
            Voucher,
            JournalNumber,
            JournalizingNumber,
            AccountingDate,
            GeneralJournalEntry)
        select Voucher,
            JournalNumber,
            JournalizingNumber,
            AccountingDate,
            GeneralJournalEntry
        from ledgerTransBaseTmp
            group by ledgerTransBaseTmp.Voucher,
            ledgerTransBaseTmp.JournalNumber,
            ledgerTransBaseTmp.JournalizingNumber,
            ledgerTransBaseTmp.AccountingDate,
            ledgerTransBaseTmp.GeneralJournalEntry;

        // Insert the subledger detail records from the Ledger transaction module
        insert_recordset ledgerTransBaseTmp (
            GeneralJournalEntry,
            Module,
            Id,
            Name,
            TaxCode,
            AccountingCurrencyDebitAmount,
            IsCredit,
            MainAccount,
            Voucher,
            JournalNumber,
            JournalizingNumber,
            AccountingDate)
        select
            GeneralJournalEntry,
            Module,
            id,
            IdName,
            TaxCodeString,
            Amount,
            IsCredit,
            MainAccount
        from transModuleTmp
            where transModuleTmp.Module != SysModule::Ledger
        join Voucher,
            JournalNumber,
            JournalizingNumber,
            AccountingDate
        from voucherHeaders
            where voucherHeaders.GeneralJournalEntry == transModuleTmp.GeneralJournalEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>translateMainAccountNames</Name>
				<Source><![CDATA[
    private void translateMainAccountNames()
    {
        MainAccountTranslation mainAccountTranslation;

        LanguageId currentLanguage = DimensionCache::currentDimensionValueLanguageId();
        if (currentLanguage != '')
        {
            update_recordSet ledgerTransBaseTmp
                setting Name = mainAccountTranslation.Name
            join Name from mainAccountTranslation
                where ledgerTransBaseTmp.MainAccount == mainAccountTranslation.MainAccount
                    && mainAccountTranslation.LanguageId == currentLanguage;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferDebitCreditAmounts</Name>
				<Source><![CDATA[
    private void transferDebitCreditAmounts()
    {
        update_recordset ledgerTransBaseTmp setting
            AccountingCurrencyCreditAmount = -ledgerTransBaseTmp.AccountingCurrencyDebitAmount,
            AccountingCurrencyDebitAmount = 0,
            ReportingCurrencyCreditAmount = -ledgerTransBaseTmp.ReportingCurrencyDebitAmount,
            ReportingCurrencyDebitAmount = 0,
            TransactionCurrencyCreditAmount = -ledgerTransBaseTmp.TransactionCurrencyDebitAmount,
            TransactionCurrencyDebitAmount = 0
                where ledgerTransBaseTmp.IsCredit == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPageBreakField</Name>
				<Source><![CDATA[
    private void setPageBreakField(LedgerTransBaseContract _reportContract)
    {
        if (_reportContract.parmNewPage())
        {
            update_recordset ledgerTransBaseTmp setting
                PageBreakGroupValue = ledgerTransBaseTmp.JournalNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessReport</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext logProcessReport()
    {
        const str InstrumentationNamespace = 'LedgerTransBase';

        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(InstrumentationNamespace);

        const str MetricName = methodStr(LedgerTransBaseDP, processReport);

        SysInstrumentationActivity activityContext = SysInstrumentationActivity::construct(
            MetricName,
            InstrumentationNamespace);

        return instrumentationLogger.activityContextWithCustomProperties(activityContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addActivityContextForReport</Name>
				<Source><![CDATA[
    private void addActivityContextForReport(
        SysInstrumentationActivityContext _activityContext,
        LedgerTransBaseContract _reportContract,
        Query _query)
    {
        int rowCount = QueryRun::getQueryRowCount(_query, maxInt());
        _activityContext.addCustomProperty('RowCountForReport', int2Str(rowCount));

        _activityContext.addCustomProperty('NewPage', _reportContract.parmNewPage() ? 'Yes' : 'No');
        _activityContext.addCustomProperty('FromDate', date2StrXpp(_reportContract.parmFromDate()));
        _activityContext.addCustomProperty('ToDate', date2StrXpp(_reportContract.parmToDate()));
        _activityContext.addCustomProperty('Cust', enum2Str(_reportContract.parmCust()));
        _activityContext.addCustomProperty('Vend', _reportContract.parmVend() ? 'Yes' : 'No');
        _activityContext.addCustomProperty('Invent', _reportContract.parmInvent() ? 'Yes' : 'No');
        _activityContext.addCustomProperty('Prod', _reportContract.parmProd() ? 'Yes' : 'No');
        _activityContext.addCustomProperty('Bank', _reportContract.parmBank() ? 'Yes' : 'No');
        _activityContext.addCustomProperty('Tax', _reportContract.parmTax() ? 'Yes' : 'No');
        _activityContext.addCustomProperty('Project', _reportContract.parmProject() ? 'Yes' : 'No');
        _activityContext.addCustomProperty('ShowOperatingOnly', _reportContract.parmShowOperatingOnly() ? 'Yes' : 'No');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>