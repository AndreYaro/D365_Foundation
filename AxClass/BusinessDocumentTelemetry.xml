<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentTelemetry</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides telemetry logging methods for the e-Invoicing Service Globalization Instrumentation.
/// </summary>
internal static class BusinessDocumentTelemetry
{
    private const str DefaultFeatureVersion = '1';
    private const str StartSuffix = 'Start';
    private const str FinishSuffix = 'Finish';
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>actionEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates an event to log a localization feature operation fact.
    /// </summary>
    /// <param name = "_event">An event description.</param>
    /// <param name = "_caller">An object which calls the event.</param>
    [Hookable(false)]
    public static void actionEvent(str _event, str _caller)
    {
        GlobalizationInstrumentationHelper::featureActionEvent(
            GlobalizationConstants::FeatureReferenceSRV00001,
            _event,
            _caller);
    }

]]></Source>
			</Method>
			<Method>
				<Name>startEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates an event to log a localization feature operation start.
    /// </summary>
    /// <param name = "_event">An event description.</param>
    /// <param name = "_caller">An object which calls the event.</param>
    [Hookable(false)]
    public static void startEvent(str _event, str _caller)
    {
        GlobalizationInstrumentationHelper::featureProcessingStartEvent(
            GlobalizationConstants::FeatureReferenceSRV00001,
            strFmt('%1:%2', _event, StartSuffix),
            _caller);
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates an event to log a localization feature operation finish.
    /// </summary>
    /// <param name = "_event">An event description.</param>
    /// <param name = "_caller">An object which calls the event.</param>
    /// <param name = "_success">true, if the feature run was successful; otherwise, false.</param>
    /// <param name = "_elapsedMilliseconds">Time elapsed from the start event.</param>    
    [Hookable(false)]
    public static void finishEvent(
        str _event,
        str _caller,
        boolean _success,
        int64 _elapsedMilliseconds)
    {
        GlobalizationInstrumentationHelper::featureProcessingFinishEvent(
            GlobalizationConstants::FeatureReferenceSRV00001,
            strFmt('%1:%2', _event, FinishSuffix),
            _caller,
            DefaultFeatureVersion,
            SysCountryRegionCode::countryInfo(),
            _elapsedMilliseconds, 
            true,
            _success,
            _elapsedMilliseconds);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>