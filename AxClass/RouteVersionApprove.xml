<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RouteVersionApprove</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RouteVersionApprove extends BOMRouteVersionApprove
{
    boolean         approveRoute;
    boolean         isRouteAlreadyApproved;

    DialogField     fieldApproveRoute;

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        ApproveRoute,
        isRouteAlreadyApproved
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>blockRemoveOfApproval</Name>
				<Source><![CDATA[
    public NoYes blockRemoveOfApproval()
    {
        return blockRemoveOfApproval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase   dialog  = super();

        if (!isRouteAlreadyApproved)
        {
            fieldApproveRoute = dialog.addField(enumstr(NoYes),"@SYS29135","@SYS50834");
            fieldApproveRoute.value(approveRoute);
        }
        else
        {
            approveRoute = false;
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        boolean ok;
        ok = super();

        if (fieldApproveRoute)
            approveRoute = fieldApproveRoute.value();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        boolean ret;
        RouteVersion         version;

        ret = super();

        blockRemoveOfApproval = RouteParameters::find().BlockRemoveApproval;
        isAlreadyApproved = RouteVersion::findRecId(this.parmRecId()).Approved;
        version = RouteVersion::findRecId(this.parmRecId());
        if (version.RecId)
        {
            isRouteAlreadyApproved = version.routeTable().Approved;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAlreadyApproved</Name>
				<Source><![CDATA[
    boolean isAlreadyApproved()
    {
        return isAlreadyApproved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApproveRoute</Name>
				<Source><![CDATA[
    public boolean parmApproveRoute(boolean _approveRoute = approveRoute)
    {
        if (!prmisdefault(_approveRoute))
        {
            approveRoute = _approveRoute;
        }

        return approveRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        RouteVersion    version;
        RouteApprove    routeApprove;

        if (! this.validate())
            throw error("@SYS27040");

        try
        {
            ttsbegin;

            version             = RouteVersion::findRecId(recId,true);

            if (approveRoute)
            {
                routeApprove = new RouteApprove();
                routeApprove.init();
                routeApprove.parmApprover(approver);
                routeApprove.parmRouteId(version.RouteId);
                routeApprove.runOperation();
            }

            if (remove)
            {
                version.Approved    = false;
                version.Approver    = 0;
                version.Active      = false;
            }
            else
            {
                version.Approved    = true;
                version.Approver    = approver;
            }
            if (! version.validateWrite())
                throw error("@SYS27040");

            if (    remove
                &&  this.isAlreadyApproved()
                &&  !this.blockRemoveOfApproval()
                &&  RouteParameters::find().BlockEditing)
            //
            // this is a special case, we are removing the approval
            // so we need to bypass table validation
            //
            {
                version.doUpdate();
            }
            else
            {
                version.update();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean         ret;
        RouteVersion    version = RouteVersion::findRecId(recId);

        ret = super() && RouteVersion::checkExistRecId(recId);
        if (version)
        {
            if (! version.routeTable().Approved && !approveRoute && !remove)
            {
                ret = checkFailed(strfmt("@SYS29134",version.RouteId)) && ret;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS26276";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RouteVersionApprove                 approve;
        SIGRouteVersionApproveProcedure     procedure; //SIG
        Common                              argsRecord;

        //SIG - start
        if (isConfigurationkeyEnabled(configurationkeynum(SIG)))
        {
            argsRecord = _args.record();
            if (argsRecord)
            {
                procedure = SIGRouteVersionApproveProcedure::newRouteVersion(argsRecord);
                if (procedure.signatureRequired())
                {
                    procedure.sign();
                    return;
                }
            }
        }
        //SIG - end

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
        {
            approve = BOMRouteVersionApprove::construct(_args);

            if (approve.prompt())
            {
                approve.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>