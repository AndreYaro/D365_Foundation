<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationFailureControlManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Manages AP automation failure controls on forms that display automation failures.
/// </summary>
internal final class VendInvoiceAutomationFailureControlManager 
{
    private FormGroupControl automationFailuresDetailGroup;
    private FormStringControl automationFailedStepString;
    private FormButtonControl automationFailureResultsButton;

    private Map automationEventTypeConfigurations;

    private VendInvoiceInfoTable vendorInvoice;
    private ProcessExecutionId mostRecentAutomationFailureExecutionId;
    private ProcessScheduleTypeName mostRecentAutomationFailureTypeName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormAutomationFailureControlContract</Name>
				<Source><![CDATA[
    internal static VendInvoiceAutomationFailureControlManager newFormAutomationFailureControlContract(VendInvoiceAutomationFailureControlContract _controlContract)
    {
        VendInvoiceAutomationFailureControlManager controlManager = new VendInvoiceAutomationFailureControlManager();
        controlManager.automationFailuresDetailGroup = _controlContract.getAutomationFailureFormGroupControl();
        controlManager.automationFailedStepString = _controlContract.getAutomationFailedStepFormStringControl();
        controlManager.automationFailureResultsButton = _controlContract.getAutomationFailureResultsFormButtonControl();
        controlManager.initializeEventTypeConfigurations();
        controlManager.initializeFailureResultsButton();

        return controlManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEventTypeConfigurations</Name>
				<Source><![CDATA[
    private void initializeEventTypeConfigurations()
    {
        // Multiple events can fail during automation and each event type should be displayed differently
        // on the automation failure controls, so map these event types to corresponding control configurations
        automationEventTypeConfigurations = new Map(Types::Integer, Types::Class);

        automationEventTypeConfigurations.add(enumNum(VendInvoiceMatchProductReceiptToInvoiceLineEvent), VendInvoiceAutomationFailureControlConfiguration::newForEventType(
            VendInvoiceMatchProductReceiptToInvoiceLineEvent::Failed,
            "@AccountsPayable:VendInvoiceAutomationMatchingFailedStep",
            VendInvoiceAutomationConstants::AutomationMatchingTypeName));

        automationEventTypeConfigurations.add(enumNum(VendInvoiceAutomationSubmitToWorkflow), VendInvoiceAutomationFailureControlConfiguration::newForEventType(
            VendInvoiceAutomationSubmitToWorkflow::Failed,
            "@AccountsPayable:VendInvoiceAutomationWorkflowSubmissionFailureStep",
            VendInvoiceAutomationWorkflowSubmissionTaskConstants::TypeName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFailureResultsButton</Name>
				<Source><![CDATA[
    private void initializeFailureResultsButton()
    {
        // Override the clicked event on the automation step results button to open the message log for the failed automation step
        automationFailureResultsButton.registerOverrideMethod(
            methodStr(FormButtonControl, clicked),
            methodStr(VendInvoiceAutomationFailureControlManager, openMessageLogDialogForAutomationFailure),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFailureControlsForInvoice</Name>
				<Source><![CDATA[
    internal void initializeFailureControlsForInvoice(VendInvoiceInfoTable _vendorInvoice)
    {
        this.setFailureControlsVisibility(false);

        // Only attempt to render automation failure controls if the invoice is in a paused state
        if (!VendInvoiceAutomationStateManagement::isIncludedInAutomatedProcessing(_vendorInvoice))
        {
            // Find the most recent document event log entry in the invoices automation history
            DocumentEventLog mostRecentAutomationStep = this.findMostRecentAutomationStepForInvoice(_vendorInvoice);

            if (mostRecentAutomationStep)
            {
                // Determine the document type of the most recent document event log entry
                EnumId mostRecentAutomationStepEventType = this.findMostRecentAutomationStepEventType(mostRecentAutomationStep);

                // If that type is supported by the failure group, begin rendering
                if (mostRecentAutomationStepEventType && automationEventTypeConfigurations.exists(mostRecentAutomationStepEventType))
                {
                    VendInvoiceAutomationFailureControlConfiguration mostRecentAutomationStepEventTypeConfiguration = 
                        automationEventTypeConfigurations.lookup(mostRecentAutomationStepEventType);

                    boolean didMostRecentAutomationStepFail =
                        mostRecentAutomationStepEventTypeConfiguration.getFailedStepEnumValue() == mostRecentAutomationStep.EventEnumValue;

                    if (didMostRecentAutomationStepFail)
                    {
                        // If the most recently finished automation step was a failure, render the automation failure controls
                        this.setFailureControlsVisibility(true);

                        // Initialize the necessary data for use upon clicking the view failure results button
                        vendorInvoice = _vendorInvoice;
                        mostRecentAutomationFailureExecutionId = mostRecentAutomationStep.ExecutionId;
                        mostRecentAutomationFailureTypeName = mostRecentAutomationStepEventTypeConfiguration.getAutomationStepProcessTypeName();

                        // Update the text shown for the most recent failed automation step
                        automationFailedStepString.text(mostRecentAutomationStepEventTypeConfiguration.getAutomationStepDescription());

                        // If the most recent automation step failure is associated with a Process Automation
                        // execution, make the failure results button visible
                        automationFailureResultsButton.visible(mostRecentAutomationFailureExecutionId != emptyGuid());
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFailureControlsVisibility</Name>
				<Source><![CDATA[
    private void setFailureControlsVisibility(boolean _shouldControlsBeVisible)
    {
        automationFailuresDetailGroup.visible(_shouldControlsBeVisible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMostRecentAutomationStepForInvoice</Name>
				<Source><![CDATA[
    private DocumentEventLog findMostRecentAutomationStepForInvoice(VendInvoiceInfoTable _vendorInvoiceInAutomation)
    {
        DocumentEvent documentEvent;
        DocumentEventLog documentEventLog;

        // Find the most recent document event log entry that is not an automation paused event as such
        // events are logged immediately after an automation failure
        select firstonly documentEventLog
            order by documentEventLog.Sequence desc
            where documentEventLog.SourceRecId == _vendorInvoiceInAutomation.RecId
               && documentEventLog.SourceTableId == _vendorInvoiceInAutomation.TableId
            notexists join documentEvent
                where documentEventLog.DocumentEvent == documentEvent.RecId
                   && documentEvent.EventEnumId == enumNum(VendInvoiceAutomationPausedFailedStepEvent);

        return documentEventLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMostRecentAutomationStepEventType</Name>
				<Source><![CDATA[
    private EnumId findMostRecentAutomationStepEventType(DocumentEventLog _mostRecentAutomationStepEvent)
    {
        DocumentEvent documentEvent;

        select firstonly EventEnumId from documentEvent
            where documentEvent.RecId == _mostRecentAutomationStepEvent.DocumentEvent;

        return documentEvent.EventEnumId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openMessageLogDialogForAutomationFailure</Name>
				<Source><![CDATA[
    private void openMessageLogDialogForAutomationFailure(FormButtonControl _buttonControl)
    {
        VendInvoiceAutomationExecutionResultsOpener::openMessageLogForInvoiceAutomationExecutionId(
            vendorInvoice,
            mostRecentAutomationFailureExecutionId,
            mostRecentAutomationFailureTypeName);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>