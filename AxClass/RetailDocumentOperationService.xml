<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDocumentOperationService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailDocumentOperationService</c> is used as a service class which expose public/interal api of Document Operation Framework
/// </summary>
internal static class RetailDocumentOperationService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>commitDocumentOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Commit a document operation
    /// </summary>
    /// <param name="request">
    /// The RetailDocumentOperationServiceCommitRequest object which contains RequestId, OperationName and Document
    /// </param>
    /// <returns>
    /// A RetailDocumentOperationServiceCommitResponse object which contains RequestId, CommitResult and CommitResultDetailCode
    /// </returns>
    /// <remarks>
    /// This method is used to commit a document operation.
    /// </remarks>
    public static RetailDocumentOperationServiceCommitResponse commitDocumentOperation(RetailDocumentOperationServiceCommitRequest request)
    {
        RetailDocumentOperationRequestId             requestId= request.getRequestId();
        RetailDocumentOperationOperationName         operationName = request.getOperationName();
        SelectableDataArea                           company = request.getCompany();
        RetailDocumentOperationRequestContainer      requestContainer = request.getRequestContainer();
        RetailDocumentOperation                      retailDocumentOperationTable;
        RetailDocumentOperationConfigurationManager  retailDocumentOperationConfigurationManager = RetailDocumentOperationConfigurationManager::instance;
        RetailDocumentOperationServiceCommitResponse response = RetailDocumentOperationServiceCommitResponse::construct(requestId, RetailDocumentOperationCommitResult::None, RetailDocumentOperationCommitResultCode::None);
        RetailDocumentOperationConfigurationBase     operationConfig;


        retailDocumentOperationTable = RetailDocumentOperation::findByRequestId(requestId);

        if (!retailDocumentOperationTable)
        {
            retailDocumentOperationTable = RetailDocumentOperationService::tryCommitDocumentOperation(request, retailDocumentOperationTable, response);
            if (retailDocumentOperationTable)
            {
                if(!RetailDocumentOperationService::tryExecuteDocumentOperation(request, retailDocumentOperationTable, response))
                {
                    operationConfig = retailDocumentOperationConfigurationManager.getOperationConfiguration(operationName);

                    if (operationConfig.isOperationQueuingEnabled())
                    {
                        // not able to execute the document operation, queue the operation
                        retailDocumentOperationTable.updateAsQueued();
                        RetailDocumentOperationService::setCommitResponse(retailDocumentOperationTable, RetailDocumentOperationCommitResult::Queued, RetailDocumentOperationCommitResultCode::ServerBusy, response);
                        RetailDocumentOperationLogger::logOperationCommitWarning(requestId,
                                                                                 retailDocumentOperationTable.RecId,
                                                                                 operationName,
                                                                                 RetailDocumentOperationCommitResultCode::ServerBusy);
                    }
                    else
                    {
                        // not able to execute the document operation and the operation queueing is not enabled so the operation is marked as failed
                        retailDocumentOperationTable.updateAsFailed(RetailDocumentOperationProcessingErrorCode::MaximumRunningOperationsExceeded, enum2Str(RetailDocumentOperationProcessingErrorCode::MaximumRunningOperationsExceeded));
                        RetailDocumentOperationService::setCommitResponse(retailDocumentOperationTable, RetailDocumentOperationCommitResult::Failed, RetailDocumentOperationCommitResultCode::ServerBusy, response);
                        RetailDocumentOperationLogger::logOperationCommitError(requestId,
                                                                                 retailDocumentOperationTable.RecId,
                                                                                 operationName,
                                                                                 RetailDocumentOperationCommitResultCode::ServerBusy);
                    }
                }
            }
        }
        else
        {
            // operation with same request id already exists
            RetailDocumentOperationService::setCommitResponseForDuplicateRequestId(retailDocumentOperationTable, request, response);
        }

        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentOperationStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a document operation status
    /// </summary>
    /// <param name="request">
    /// The RetailDocumentOperationServiceGetStatusRequest object which contains RequestId
    /// </param>
    /// <returns>
    /// A RetailDocumentOperationServiceGetStatusResponse object which contains ResponseDocument, Status and ProcessingErrorCode
    /// </returns>
    /// <remarks>
    /// This method is used to get a document operation status.
    /// </remarks>
    public static RetailDocumentOperationServiceGetStatusResponse getDocumentOperationStatus(RetailDocumentOperationServiceGetStatusRequest request)
    {
        RetailDocumentOperationResultContainer          resultContainer = ['', RetailDocumentOperationStatus::Succeeded, RetailDocumentOperationProcessingErrorCode::None];
        RetailDocumentOperation                         retailDocumentOperationTable;
        RetailDocumentOperationRequestId                requestId  = request.getRequestId();
        RetailDocumentOperationServiceGetStatusResponse response = RetailDocumentOperationServiceGetStatusResponse::construct(conNull(), RetailDocumentOperationStatus::RetriableError, RetailDocumentOperationProcessingErrorCode::None);

        retailDocumentOperationTable = RetailDocumentOperation::findByRequestId(requestId);
        if (retailDocumentOperationTable)
        {
            response.setResponseContainer(retailDocumentOperationTable.ResultContainer);
            response.setStatus(retailDocumentOperationTable.Status);
            response.setProcessingErrorCode(retailDocumentOperationTable.ProcessingErrorCode);
        }
        else
        {
            RetailDocumentOperationLogger::logOperationError(requestId,
                                                             retailDocumentOperationTable.RecId,
                                                             '',
                                                             RetailDocumentOperationProcessingErrorCode::OperationNotFound);

            response.setResponseContainer(["@RetailDocumentOperationLabels:ErrorOperationNotFound"]);
            response.setStatus(RetailDocumentOperationStatus::Failed);
            response.setProcessingErrorCode(RetailDocumentOperationProcessingErrorCode::OperationNotFound);
        }
        
        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retryDocumentOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retry a document operation
    /// </summary>
    /// <param name="operationRecId">
    /// The record id of document operation
    /// </param>
    /// <remarks>
    /// This method is used to retry document operation.
    /// </remarks>
    internal static void retryDocumentOperation(RefRecId operationRecId)
    {
        RetailDocumentOperation                     retailDocumentOperationRow;
        RetailDocumentOperationHistory              retailDocumentOperationHistoryRow;
        RetailDocumentOperationProcessorParameters  retailDocumentOperationProcessorParameters =
                RetailDocumentOperationProcessorParameters::construct(operationRecId);
        System.Exception                            exception;
        
        RetailDocumentOperationConfigurationManager configurationManagerInstance = RetailDocumentOperationConfigurationManager::instance;


        try
        {
            ttsbegin;
            retailDocumentOperationRow = RetailDocumentOperation::findByOperationRecId(operationRecId, true);
            RetailDocumentOperationConfigurationBase config = configurationManagerInstance.getOperationConfiguration(retailDocumentOperationRow.OperationName);

            retailDocumentOperationHistoryRow = RetailDocumentOperationHistory::initRetailDocumentOperationHistory(retailDocumentOperationRow);
            retailDocumentOperationHistoryRow.insert();
            retailDocumentOperationRow.RetryCount = retailDocumentOperationRow.RetryCount + 1;

            if (FeatureStateProvider::isFeatureEnabled(RetailEnhancedAsyncOrderCreationFeature::instance()) 
                || FeatureStateProvider::isFeatureEnabled(RetailAsyncOrderCancellationFeature::instance()))
            {
                int retryDelayInSeconds = config.calculateRetryDelayInSeconds(retailDocumentOperationRow.RetryCount);
                retailDocumentOperationRow.NextRetryTime = DateTimeUtil::addSeconds(DateTimeUtil::utcNow(), retryDelayInSeconds);
            }

            retailDocumentOperationRow.resetToCommitted();
            ttscommit;
        }
        catch (Exception::DuplicateKeyException)
        {
            // if duplicate key is detected, means the operation have been retried by other process
            // should log and return right now
            RetailDocumentOperationLogger::logOperationWarning(retailDocumentOperationRow.RequestId,
                                                               retailDocumentOperationRow.RecId,
                                                               retailDocumentOperationRow.OperationName,
                                                               RetailDocumentOperationProcessingErrorCode::OperationHistoryDuplicateDetected);
            return;
        }
        catch (exception)
        {
            // log error
            RetailDocumentOperationLogger::logOperationError(retailDocumentOperationRow.RequestId,
                                                             retailDocumentOperationRow.RecId,
                                                             retailDocumentOperationRow.OperationName,
                                                             RetailDocumentOperationProcessingErrorCode::InternalProcessingFailed);
            return;
        }

        RetailDocumentOperationService::processDocumentOperation(operationRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDocumentOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process a document operation
    /// </summary>
    /// <param name="operationRecId">
    /// The record id of document operation
    /// </param>
    /// <remarks>
    /// This method is used to process document operation.
    /// </remarks>
    internal static void processDocumentOperation(RefRecId operationRecId)
    {
        RetailDocumentOperationProcessorParameters retailDocumentOperationProcessorParameters = RetailDocumentOperationProcessorParameters::construct(operationRecId);

        RetailDocumentOperationService::invokeOperationProcessor(retailDocumentOperationProcessorParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOperationTerminated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if a document operation is terminated
    /// </summary>
    /// <param name="operationRecId">
    /// The record id of document operation
    /// </param>
    /// <returns>
    /// True if document operation is terminated, otherwise false
    /// </returns>
    /// <remarks>
    /// This method is used to check if a document operation is terminated or not.
    /// </remarks>
    internal static boolean isOperationTerminated(RefRecId operationRecId)
    {
        str   operationAppLockName = int642Str(operationRecId);

        using (ReqReaderWriterLock innerLock = ReqReaderWriterLock::construct())
        {
            if (innerLock.tryEnterUpdateLock(operationAppLockName))
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProcessingTimeout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if a document operation is processing timeout
    /// </summary>
    /// <param name="retailDocumentOperation">
    /// The record of the document operation table
    /// </param>
    /// <returns>
    /// True if document operation is processing timeout, otherwise false
    /// </returns>
    /// <remarks>
    /// This method is used to check if a document operation is processing timeout.
    /// </remarks>
    internal static boolean isProcessingTimeout(RetailDocumentOperation retailDocumentOperation)
    {
        RetailDocumentOperationConfigurationManager configurationManagerInstance = RetailDocumentOperationConfigurationManager::instance;
        RetailDocumentOperationConfigurationBase config = configurationManagerInstance.getOperationConfiguration(retailDocumentOperation.OperationName);
        int processingTimeLimitInSeconds = config.getProcessingTimeLimitInSeconds();

        utcdatetime now = DateTimeUtil::utcNow();
        utcdatetime operationStartTime = retailDocumentOperation.StartDateTime;
        utcdatetime operationTimeLimit = DateTimeUtil::addSeconds(operationStartTime, processingTimeLimitInSeconds);

        if (now > operationTimeLimit)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCommittedTimeout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if a document operation is committed timeout
    /// </summary>
    /// <param name="retailDocumentOperation">
    /// The record of the document operation table
    /// </param>
    /// <returns>
    /// True if document operation is committed timeout, otherwise false
    /// </returns>
    /// <remarks>
    /// This method is used to check if a document operation is committed timeout.
    /// </remarks>
    internal static boolean isCommittedTimeout(RetailDocumentOperation retailDocumentOperation)
    {
        RetailDocumentOperationConfigurationManager configurationManagerInstance = RetailDocumentOperationConfigurationManager::instance;

        utcdatetime now = DateTimeUtil::utcNow();
        utcdatetime operationCommittedTime = retailDocumentOperation.CommittedDateTime;
        RetailDocumentOperationConfigurationBase config = configurationManagerInstance.getOperationConfiguration(retailDocumentOperation.OperationName);
        utcdatetime committedTimeLimit = DateTimeUtil::addSeconds(operationCommittedTime, config.getCommittedTimeLimitInSeconds());

        if (now > operationCommittedTime)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOperationToRetriableError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update operation to retriable error status if possible
    /// </summary>
    /// <param name="operationRecId">
    /// The record id of document operation
    /// </param>
    /// <param name="processingErrorCode">
    /// The processing error code
    /// </param>
    /// <returns>
    /// True if update succeeded, otherwise false
    /// </returns>
    /// <remarks>
    /// This method is used to update operation to error status.
    /// </remarks>
    internal static boolean updateOperationToRetriableError(RefRecId operationRecId, RetailDocumentOperationProcessingErrorCode processingErrorCode)
    {
        RetailDocumentOperation retailDocumentOperationRow;
        retailDocumentOperationRow = RetailDocumentOperation::findByOperationRecId(operationRecId, true);
        RetailDocumentOperationConfigurationManager configurationManagerInstance = RetailDocumentOperationConfigurationManager::instance;
        RetailDocumentOperationConfigurationBase config = configurationManagerInstance.getOperationConfiguration(retailDocumentOperationRow.OperationName);
        if(retailDocumentOperationRow.Status != RetailDocumentOperationStatus::Succeeded)
        {
            if (config.isOperationQueuingEnabled() && retailDocumentOperationRow.RetryCount < config.getMaxRetryCount())
            {
                retailDocumentOperationRow.updateAsRetriableError(processingErrorCode, enum2Str(processingErrorCode));
                RetailDocumentOperationLogger::logOperationRetriableError(retailDocumentOperationRow.RequestId,
                                                                 retailDocumentOperationRow.RecId,
                                                                 retailDocumentOperationRow.OperationName,
                                                                 processingErrorCode);
            }
            else
            {
                retailDocumentOperationRow.updateAsFailed(processingErrorCode, enum2Str(processingErrorCode)); 
                RetailDocumentOperationLogger::logOperationError(retailDocumentOperationRow.RequestId,
                                                                 retailDocumentOperationRow.RecId,
                                                                 retailDocumentOperationRow.OperationName,
                                                                 processingErrorCode);
            }

            return true;
        }
        else
        {
            RetailDocumentOperationLogger::logOperationWarning(retailDocumentOperationRow.RequestId,
                                                                 retailDocumentOperationRow.RecId,
                                                                 retailDocumentOperationRow.OperationName,
                                                                 RetailDocumentOperationProcessingErrorCode::OperationAlreadySucceeded);
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOperationToFailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update operation to failed status
    /// </summary>
    /// <param name="operationRecId">
    /// The record id of document operation
    /// </param>
    /// <param name="processingErrorCode">
    /// The processing error code
    /// </param>
    /// <returns>
    /// True if update succeeded, otherwise false
    /// </returns>
    /// <remarks>
    /// This method is used to update operation to failed status.
    /// </remarks>
    internal static boolean updateOperationToFailed(RefRecId operationRecId, RetailDocumentOperationProcessingErrorCode processingErrorCode)
    {
        RetailDocumentOperation retailDocumentOperationRow;
        retailDocumentOperationRow = RetailDocumentOperation::findByOperationRecId(operationRecId, true);
        if(retailDocumentOperationRow.Status != RetailDocumentOperationStatus::Succeeded)
        {
            retailDocumentOperationRow.updateAsFailed(processingErrorCode, enum2Str(processingErrorCode));
            RetailDocumentOperationLogger::logOperationError(retailDocumentOperationRow.RequestId,
                                                         retailDocumentOperationRow.RecId,
                                                         retailDocumentOperationRow.OperationName,
                                                         processingErrorCode);
            return true;
        }
        else
        {
            RetailDocumentOperationLogger::logOperationError(retailDocumentOperationRow.RequestId,
                                                                 retailDocumentOperationRow.RecId,
                                                                 retailDocumentOperationRow.OperationName,
                                                                 RetailDocumentOperationProcessingErrorCode::OperationAlreadySucceeded);
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperationNumberByStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get number of operations by given status
    /// </summary>
    /// <param name="status">
    /// The operation status
    /// </param>
    /// <returns>
    /// the number of operations by given status
    /// </returns>
    internal static int64 getOperationNumberByStatus(RetailDocumentOperationStatus status)
    {
        RetailDocumentOperation retailDocumentOperation;
        select count(RecId) from retailDocumentOperation
            where retailDocumentOperation.Status == status;

        return retailDocumentOperation.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRunAsync</Name>
				<Source><![CDATA[
    private static void doRunAsync(container args)
    {
        RetailDocumentOperation                    retailDocumentOperationTable;
        RetailDocumentOperationProcessorParameters retailDocumentOperationProcessorParameters =
            RetailDocumentOperationProcessorParameters::constructEmpty();
        RetailDocumentOperationConfigurationManager configurationManagerInstance = RetailDocumentOperationConfigurationManager::instance;
        RetailDocumentOperationProcessorBase retailDocumentOperationProcessorBase;

        RetailDocumentOperationLogger::logOperationMessage(emptyGuid(),
                                                           0,
                                                           '',
                                                           'Asynchronous task for operation start executing');
        if (!retailDocumentOperationProcessorParameters.unpack(args))
        {
            RetailDocumentOperationLogger::logOperationError(emptyGuid(),
                                                             retailDocumentOperationProcessorParameters.getOperationRecId(),
                                                             '',
                                                             RetailDocumentOperationProcessingErrorCode::ProcessorParametersUnpackFailed);
            throw error(enum2Str(RetailDocumentOperationProcessingErrorCode::ProcessorParametersUnpackFailed));
        }

        RefRecId operationRecId = retailDocumentOperationProcessorParameters.getOperationRecId();
        retailDocumentOperationTable = RetailDocumentOperation::findByOperationRecId(retailDocumentOperationProcessorParameters.getOperationRecId(), false);
        RetailDocumentOperationSemaphoreManager semaphoreManager = configurationManagerInstance.getOperationConfiguration(retailDocumentOperationTable.OperationName).getSemaphoreManager();

        if (semaphoreManager.tryEnterConcurrentOperationsSemaphore())
        {
            try
            {
                RetailDocumentOperationService::invokeOperationProcessor(retailDocumentOperationProcessorParameters);
            }
            finally
            {
                int semaphoreCount = semaphoreManager.releaseConcurrentOperationsSemaphore();
                RetailDocumentOperationLogger::logOperationMessage(emptyGuid(), operationRecId, '', strFmt('Concurrent operations semaphore released successfully. %1 -> %2', semaphoreCount, semaphoreCount + 1));
            }
        }
        else
        {  
            RetailDocumentOperationLogger::logOperationCommitWarning(emptyGuid(),
                                                               operationRecId,
                                                               '',
                                                               RetailDocumentOperationCommitResultCode::ServerBusy);
            retailDocumentOperationTable = RetailDocumentOperation::findByOperationRecId(retailDocumentOperationProcessorParameters.getOperationRecId(), true);
            retailDocumentOperationTable.updateAsQueued();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCommitResponseForDuplicateRequestId</Name>
				<Source><![CDATA[
    private static void setCommitResponseForDuplicateRequestId(RetailDocumentOperation record, RetailDocumentOperationServiceCommitRequest request, RetailDocumentOperationServiceCommitResponse response)
    {
        // operation with same request id already exists
        if(record.OperationName == request.getOperationName())
        {
            response.setCommitResult(RetailDocumentOperationCommitResult::Succeeded);
            response.setCommitResultDetailCode(RetailDocumentOperationCommitResultCode::SameOperationAlreadyCommitted);
            RetailDocumentOperationLogger::logOperationCommitWarning(record.RequestId,
                                                                     record.RecId,
                                                                     record.OperationName,
                                                                     RetailDocumentOperationCommitResultCode::SameOperationAlreadyCommitted);
        }
        else
        {
            response.setCommitResult(RetailDocumentOperationCommitResult::Failed);
            response.setCommitResultDetailCode(RetailDocumentOperationCommitResultCode::OperationWithSameRequestIdAlreadyCommitted);
            RetailDocumentOperationLogger::logOperationCommitWarning(record.RequestId,
                                                                     record.RecId,
                                                                     request.getOperationName(),
                                                                     RetailDocumentOperationCommitResultCode::OperationWithSameRequestIdAlreadyCommitted);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCommitResponse</Name>
				<Source><![CDATA[
    private static void setCommitResponse(RetailDocumentOperation retailDocumentOperation, RetailDocumentOperationCommitResult commitResult, RetailDocumentOperationCommitResultCode commitResultDetailCode, RetailDocumentOperationServiceCommitResponse response)
    {
        response.setCommitResult(commitResult);
        response.setCommitResultDetailCode(commitResultDetailCode);

        if (commitResult == RetailDocumentOperationCommitResult::Failed)
        {
            RetailDocumentOperationLogger::logOperationCommitError(retailDocumentOperation.RequestId,
                                                                   retailDocumentOperation.RecId,
                                                                   retailDocumentOperation.OperationName,
                                                                   commitResultDetailCode);
        }
        else if(commitResult == RetailDocumentOperationCommitResult::Queued)
        {
            RetailDocumentOperationLogger::logOperationCommitWarning(retailDocumentOperation.RequestId,
                                                                     retailDocumentOperation.RecId,
                                                                     retailDocumentOperation.OperationName,
                                                                     commitResultDetailCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryCommitDocumentOperation</Name>
				<Source><![CDATA[
    private static RetailDocumentOperation tryCommitDocumentOperation(RetailDocumentOperationServiceCommitRequest request, RetailDocumentOperation retailDocumentOperationTable, RetailDocumentOperationServiceCommitResponse response)
    {
        RetailDocumentOperationRequestId        requestId = request.getRequestId();
        RetailDocumentOperationOperationName    operationName = request.getOperationName();
        SelectableDataArea                      company = request.getCompany();
        RetailDocumentOperationConfigurationManager retailDocumentOperationConfigurationManager = RetailDocumentOperationConfigurationManager::instance;

        if (!RetailDocumentOperationProcessorFactory::isOperationRegistered(operationName))
        {
            // operation type not registered
            RetailDocumentOperationService::setCommitResponse(retailDocumentOperationTable, RetailDocumentOperationCommitResult::Failed, RetailDocumentOperationCommitResultCode::OperationNotRegistered, response);
            RetailDocumentOperationLogger::logOperationCommitError(requestId,
                                                                       retailDocumentOperationTable.RecId,
                                                                       operationName,
                                                                       RetailDocumentOperationCommitResultCode::OperationNotRegistered);
            return retailDocumentOperationTable;
        }

        RetailDocumentOperationConfigurationBase operationConfig = retailDocumentOperationConfigurationManager.getOperationConfiguration(operationName);
        RetailDocumentOperationRequestContainer requestContainer = conNull();

        // if the operation is not going to be queued we don't need to store potentially big request object since we are passing it as 
        // a parameter to the processor and no retries will run.
        if (operationConfig.isOperationQueuingEnabled())
        {
            requestContainer = request.getRequestContainer();
        }

        RetailDocumentOperationLogger::logOperationMessage(requestId, retailDocumentOperationTable.RecId, operationName, 'Start creating operation record');

        try
        {
            retailDocumentOperationTable = RetailDocumentOperation::initOperationRecord(requestId, operationName, company, requestContainer);
            if (request.getRetailStaffId())
            {
                retailDocumentOperationTable.RetailStaffId = request.getRetailStaffId();
            }
            retailDocumentOperationTable.insert();
        }
        catch (Exception::DuplicateKeyException)
        {
            // select operation by request id again
            retailDocumentOperationTable = RetailDocumentOperation::findByRequestId(requestId);
            RetailDocumentOperationService::setCommitResponseForDuplicateRequestId(retailDocumentOperationTable, request, response);
            return retailDocumentOperationTable;
        }

        RetailDocumentOperationLogger::logOperationMessage(requestId, retailDocumentOperationTable.RecId, operationName, 'Operation record created successfully');
        return retailDocumentOperationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryExecuteDocumentOperation</Name>
				<Source><![CDATA[
    private static boolean tryExecuteDocumentOperation(RetailDocumentOperationServiceCommitRequest request, RetailDocumentOperation retailDocumentOperationTable, RetailDocumentOperationServiceCommitResponse response)
    {
        RetailDocumentOperationRequestId            requestId = request.getRequestId();
        RetailDocumentOperationOperationName        operationName = request.getOperationName();
        SelectableDataArea                          company = request.getCompany();
        RetailDocumentOperationRequestContainer     requestContainer = request.getRequestContainer();
        RetailDocumentOperationConfigurationManager configurationManagerInstance = RetailDocumentOperationConfigurationManager::instance;
        RetailDocumentOperationSemaphoreManager semaphoreManager = configurationManagerInstance.getOperationConfiguration(retailDocumentOperationTable.OperationName).getSemaphoreManager();

        RetailDocumentOperationProcessorParameters retailDocumentOperationProcessorParameters =
            RetailDocumentOperationProcessorParameters::construct(retailDocumentOperationTable.RecId, requestContainer);

       if (semaphoreManager.tryEnterConcurrentOperationsSemaphore())
        {
            try
            {
                RetailDocumentOperationLogger::logOperationMessage(requestId, retailDocumentOperationTable.RecId, operationName, 'Start scheduling asynchronous task for operation in current server');
                //have the semaphore, execute the operation
                Global::runAsync(
                                classNum(RetailDocumentOperationService),
                                staticMethodStr(RetailDocumentOperationService, doRunAsync),
                                retailDocumentOperationProcessorParameters.pack()
                            );
                RetailDocumentOperationLogger::logOperationMessage(requestId, retailDocumentOperationTable.RecId, operationName, 'Asynchronous task for operation scheduled successfully');
                RetailDocumentOperationService::setCommitResponse(retailDocumentOperationTable, RetailDocumentOperationCommitResult::Succeeded, RetailDocumentOperationCommitResultCode::None, response);
            }
            finally
            {
                int semaphoreCount = semaphoreManager.releaseConcurrentOperationsSemaphore();
                RetailDocumentOperationLogger::logOperationMessage(requestId, retailDocumentOperationTable.RecId, operationName, strFmt('Concurrent operations semaphore released successfully. %1 -> %2', semaphoreCount, semaphoreCount + 1));
            }
        }
        else
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeOperationProcessor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes operation processor for a stored operation with given parameters.
    /// </summary>
    /// <param name = "_processorParameters">The processor parameters to be passed to the processor</param>
    private static void invokeOperationProcessor(RetailDocumentOperationProcessorParameters _processorParameters)
    {
        RetailDocumentOperation                    retailDocumentOperationTable;
        RetailDocumentOperationProcessorBase       retailDocumentOperationProcessorBase;
        RefRecId                                   operationRecId = _processorParameters.getOperationRecId();
        str                                        operationAppLockName = int642Str(operationRecId);
        System.Exception                           exception;
        System.Diagnostics.Stopwatch               documentOperationStopWatch = new System.Diagnostics.Stopwatch();

        retailDocumentOperationTable = RetailDocumentOperation::findByOperationRecId(operationRecId, true);

        try
        {
            retailDocumentOperationProcessorBase = RetailDocumentOperationProcessorFactory::createProcessor(
                    _processorParameters,
                    retailDocumentOperationTable.ProcessorClassNumber
                    ) as RetailDocumentOperationProcessorBase;
        }
        catch (exception)
        {
            str message = exception.Message;
            RetailDocumentOperationProcessingErrorCode processingErrorCode;
            processingErrorCode = str2Enum(processingErrorCode, message);

            if (processingErrorCode == RetailDocumentOperationProcessingErrorCode::ProcessorClassDoesNotExist)
            {
                RetailDocumentOperationService::updateOperationToFailed(operationRecId, processingErrorCode);
            }
            else if (processingErrorCode == RetailDocumentOperationProcessingErrorCode::ProcessorMissingStaticConstructor)
            {
                RetailDocumentOperationService::updateOperationToFailed(operationRecId, processingErrorCode);
            }
            else
            {
                RetailDocumentOperationService::updateOperationToRetriableError(operationRecId, processingErrorCode);
            }
            return;
        }

        try
        {
            using (ReqReaderWriterLock innerLock = ReqReaderWriterLock::construct())
            {
                if (innerLock.tryEnterUpdateLock(operationAppLockName))
                {
                    documentOperationStopWatch.Start();
                    RetailDocumentOperationLogger::logOperationStarted(retailDocumentOperationProcessorBase.getRequestId(),
                                                                       retailDocumentOperationProcessorBase.getOperationRecId(),
                                                                       retailDocumentOperationProcessorBase.getOperationName());
                    retailDocumentOperationProcessorBase.process();
                    documentOperationStopWatch.Stop();
                    RetailDocumentOperationLogger::logOperationSucceeded(retailDocumentOperationProcessorBase.getRequestId(),
                                                                       retailDocumentOperationProcessorBase.getOperationRecId(),
                                                                       retailDocumentOperationProcessorBase.getOperationName(),
                                                                       documentOperationStopWatch.ElapsedMilliseconds);
                }
                else
                {
                    //no able to get app lock just log and quit since other instance is processing the operation
                    RetailDocumentOperationLogger::logOperationWarning(retailDocumentOperationProcessorBase.getRequestId(),
                                                                       retailDocumentOperationProcessorBase.getOperationRecId(),
                                                                       retailDocumentOperationProcessorBase.getOperationName(),
                                                                       RetailDocumentOperationProcessingErrorCode::AcquireAppLockFailed);
                }
            }
        }
        catch (exception)
        {
            // catch all exception here
            documentOperationStopWatch.Stop();
            RetailDocumentOperationLogger::logOperationFailed(retailDocumentOperationProcessorBase.getRequestId(),
                                                                       retailDocumentOperationProcessorBase.getOperationRecId(),
                                                                       retailDocumentOperationProcessorBase.getOperationName(),
                                                                       retailDocumentOperationProcessorBase.getErrorCode(),
                                                                       documentOperationStopWatch.ElapsedMilliseconds);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>