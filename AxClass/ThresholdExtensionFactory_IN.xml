<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ThresholdExtensionFactory_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ThresholdExtensionFactory_IN</c> class is a factory that creates new instances of base or
///     derived classes given a base class and an extension key.
/// </summary>
/// <remarks>
///     Use the <c>ThresholdAttribute_IN</c> and its derived attribute class attribute to add extension key metadata to
///     base and derived classes.This class realizes the singleton design pattern. Flush the client and
///     server <c>SysGlobalCache</c> object if an extension key is modified after the cache of base and
///     derived classes is built.
/// </remarks>
//      This is a framework class. Customizing this class may cause problems with future upgrades to the software.
public final class ThresholdExtensionFactory_IN
{
    #Define.MinimumKeyLength(1)
    #Define.MaximumKeyLength(2)
    Map             baseClassExtensionMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cacheClassExtension</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates derivedClassList.
    /// </summary>
    /// <param name="_extensionMap">
    ///     Indicates extensionMap.
    /// </param>
    /// <param name="_baseDictClass">
    ///     Indicates baseDictClass.
    /// </param>
    /// <param name="_derivedDictClass">
    ///     Indicates derivedDictClass.
    /// </param>
    /// <param name="_attributeClassName">
    ///     Indicates attribute class name.
    /// </param>
    private void cacheClassExtension(Map _extensionMap, DictClass _baseDictClass, DictClass _derivedDictClass, classname _attributeClassName)
    {
        ThresholdAttribute_IN   extensionAttribute;
        Array                   extensionAttributes;
        int                     i;
        List                    derivedClassList;

        Debug::assert(_extensionMap != null);
        Debug::assert(_baseDictClass != null);
        Debug::assert(_derivedDictClass != null);

        extensionAttributes = _derivedDictClass.getAttributes(_attributeClassName);

        if (extensionAttributes != null)
        {
            for (i = 1; i <= extensionAttributes.lastIndex(); i ++)
            {
                extensionAttribute = extensionAttributes.value(i);
                if (_extensionMap.exists(extensionAttribute.getExtensionKey()))
                {
                    derivedClassList = _extensionMap.lookup(extensionAttribute.getExtensionKey());
                }
                else
                {
                    derivedClassList = new List(Types::Integer);
                }
                derivedClassList.addEnd(_derivedDictClass.id());

                _extensionMap.insert(extensionAttribute.getExtensionKey(), derivedClassList);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheClassExtensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Cretae derivedClassList.
    /// </summary>
    /// <param name="_baseClassId">
    ///     Indicates baseClassId.
    /// </param>
    /// <param name="_attributeClassName">
    ///     Indicates attribute class name.
    /// </param>
    /// <returns>
    ///     Returns Map.
    /// </returns>
    private Map cacheClassExtensions(ClassId _baseClassId, classname _attributeClassName)
    {
        Map                             extensionMap;
        DictClass                       baseDictClass;
        DictClass                       derivedDictClass;
        List                            derivedClasses;
        ListEnumerator                  derivedClassesEnumerator;
        SysGlobalObjectCache            sgoc = new SysGlobalObjectCache();
        container                       result;

        result = sgoc.find(classStr(ThresholdExtensionFactory_IN), [_baseClassId]);
        if (result == conNull())
        {
            extensionMap = new Map(Types::Container, Types::Class);
            baseDictClass = new DictClass(_baseClassId);
            Debug::assert(baseDictClass != null);

            if (baseDictClass.isAbstract() == false)
            {
                this.cacheClassExtension(extensionMap, baseDictClass, baseDictClass, _attributeClassName);
            }

            derivedClasses = baseDictClass.extendedBy(true);

            derivedClassesEnumerator = derivedClasses.getEnumerator();

            while (derivedClassesEnumerator.moveNext())
            {
                derivedDictClass = new DictClass(derivedClassesEnumerator.current());
                this.cacheClassExtension(extensionMap, baseDictClass, derivedDictClass, _attributeClassName);
            }

            baseClassExtensionMap.insert(_baseClassId, extensionMap);

            result = extensionMap.pack();
            sgoc.insert(classStr(ThresholdExtensionFactory_IN), [_baseClassId], result);
        }

        return Map::create(result);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDerivedClassList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates derivedClassList.
    /// </summary>
    /// <param name="_extensionKey">
    ///     Indicates extensionKey.
    /// </param>
    /// <param name="_classExtensionMap">
    ///     Indicates class extension map.
    /// </param>
    /// <param name="_derivedClassList">
    ///     Indicates derivedClassList.
    /// </param>
    private void createDerivedClassList(
        ThresholdExtensionKey_IN    _extensionKey,
        Map                         _classExtensionMap,
        List                        _derivedClassList)
    {
        DictClass       dictClass;
        List            derivedClassIdList;
        ListEnumerator  derivedClassIdListEnumerator;

        derivedClassIdList = _classExtensionMap.lookup(_extensionKey);

        if (derivedClassIdList)
        {
            derivedClassIdListEnumerator = derivedClassIdList.getEnumerator();

            while (derivedClassIdListEnumerator.moveNext())
            {
                dictClass = new DictClass(derivedClassIdListEnumerator.current());

                Debug::assert(dictClass != null);

                _derivedClassList.addEnd(dictClass.makeObject());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClassExtensionMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets ClassExtensionMap.
    /// </summary>
    /// <param name="_baseClassId">
    ///     Indicates baseClassId.
    /// </param>
    /// <param name="_attributeClassName">
    ///     Indicates attribute class name.
    /// </param>
    /// <returns>
    ///     Returns ClassExtensionMap.
    /// </returns>
    private Map getClassExtensionMap(ClassId _baseClassId, classname _attributeClassName)
    {
        Map             classExtensionMap;

        if ( !baseClassExtensionMap.exists(_baseClassId))
        {
            classExtensionMap = this.cacheClassExtensions(_baseClassId, _attributeClassName);
        }
        else
        {
            classExtensionMap = baseClassExtensionMap.lookup(_baseClassId);
        }

        return classExtensionMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidExtensionKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets valid ExtensionKey.
    /// </summary>
    /// <param name="_extensionKey">
    ///     Indicates extensionKey.
    /// </param>
    /// <returns>
    ///     Returns valid ExtensionKey.
    /// </returns>
    private ThresholdExtensionKey_IN getValidExtensionKey(ThresholdExtensionKey_IN _extensionKey)
    {
        ThresholdExtensionKey_IN      extensionKey;

        Debug::assert(conLen(_extensionKey) >= #MinimumKeyLength && conLen(_extensionKey) <= #MaximumKeyLength);

        extensionKey = this.padKey(_extensionKey);

        return extensionKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     New method.
    /// </summary>
    protected void new()
    {
        baseClassExtensionMap = new Map(Types::Integer,Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newObjectListFromExtensionKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generate derivedClassList.
    /// </summary>
    /// <param name="_baseClassId">
    ///     Indicates baseClassId.
    /// </param>
    /// <param name="_attributeClassName">
    ///     Indicates attribute class name.
    /// </param>
    /// <param name="_extensionKey">
    ///     Indicates extensionKey.
    /// </param>
    /// <param name="_fallbackToBase">
    ///     Indicates fallbackToBase.
    /// </param>
    /// <param name="_createCommonExtensions">
    ///     Indicates createCommonExtensions.
    /// </param>
    /// <returns>
    ///     Returns derivedClassList.
    /// </returns>
    private List newObjectListFromExtensionKey(
        ClassId                     _baseClassId,
        classname                   _attributeClassName,
        ThresholdExtensionKey_IN    _extensionKey,
        boolean                     _fallbackToBase,
        boolean                     _createCommonExtensions)
    {
        DictClass                   dictClass;
        Map                         classExtensionMap;
        List                        derivedClassList;
        ThresholdExtensionKey_IN    commonExtensionKey;

        derivedClassList = new List(Types::Class);
        classExtensionMap = this.getClassExtensionMap(_baseClassId, _attributeClassName);

        if (classExtensionMap.exists(_extensionKey))
        {
            this.createDerivedClassList(_extensionKey, classExtensionMap, derivedClassList);
        }

        if (_createCommonExtensions)
        {
            commonExtensionKey = this.getValidExtensionKey(commonExtensionKey);

            if (classExtensionMap.exists(commonExtensionKey))
            {
                this.createDerivedClassList(commonExtensionKey, classExtensionMap, derivedClassList);
            }
        }

        // fall back to base class if it is concrete
        if (_fallbackToBase && derivedClassList.elements() == 0)
        {
            dictClass = new DictClass(_baseClassId);
            Debug::assert(dictClass != null);

            if (dictClass.isAbstract() == false)
            {
                derivedClassList.addEnd(dictClass.makeObject());
            }
        }

        return derivedClassList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>padKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates ThresholdExtensionKey.
    /// </summary>
    /// <param name="_extensionKey">
    ///     The extensionKey which used to generate ThresholdExtensionKey.
    /// </param>
    /// <returns>
    ///     Returns ThresholdExtensionKey
    /// </returns>
    private ThresholdExtensionKey_IN padKey(ThresholdExtensionKey_IN _extensionKey)
    {
        int                         counter;
        ThresholdExtensionKey_IN    extensionKey;

        extensionKey = _extensionKey;

        counter = #MaximumKeyLength - conLen(extensionKey);

        while (counter > 0)
        {
            extensionKey += [0];
            counter--;
        }

        return extensionKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>ThresholdExtensionFactory</c> class.
    /// </summary>
    /// <returns>
    ///     A new instance of the <c>ThresholdExtensionFactory</c> class.
    /// </returns>
    protected static ThresholdExtensionFactory_IN construct()
    {
        ThresholdExtensionFactory_IN   extensionFactory;
        SysGlobalCache              globalCache;

        globalCache = classfactory.globalCache();

        if (globalCache.isSet(classStr(ThresholdExtensionFactory_IN), classNum(ThresholdExtensionFactory_IN)))
        {
            extensionFactory = globalCache.get(classStr(ThresholdExtensionFactory_IN), classNum(ThresholdExtensionFactory_IN));
        }
        else
        {
            extensionFactory = new ThresholdExtensionFactory_IN();
            globalCache.set(classStr(ThresholdExtensionFactory_IN), classNum(ThresholdExtensionFactory_IN), extensionFactory);
        }

        return extensionFactory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newObject</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of a base or derived class by using the specified extension key.
    /// </summary>
    /// <param name="_baseClassId">
    ///     The ID of the base class.
    /// </param>
    /// <param name="_attributeClassName">
    ///     Indicates attribute class name.
    /// </param>
    /// <param name="_extensionKey">
    ///     The extension key.
    /// </param>
    /// <param name="_fallbackToBase">
    ///     Indicates whether the base class should be added to the object list when an extension is not found.
    /// </param>
    /// <param name="_createCommonExtensions">
    ///     Indicates whether the common extension classes should be created.
    /// </param>
    /// <returns>
    ///     A new instance of a base or derived class.
    /// </returns>
    public static Object newObject(
        ClassId                         _baseClassId,
        classname                       _attributeClassName,
        ThresholdExtensionKey_IN        _extensionKey,
        boolean                         _fallbackToBase = true,
        boolean                         _createCommonExtensions = false)
    {
        ThresholdExtensionFactory_IN        extensionFactory;
        List                                objectList;
        ListEnumerator                      objectListEnumerator;
        Object                              object;
        ClassId                             derivedClassId;
        container                           cacheResult;
        DictClass                           dictClass;
        container                           extensionKey;

        // based on baseclass id and extension key store object id map to class id
        cacheResult = LedgerCache::getValue(LedgerCacheScope::ExtensionFactoryClassIds, [_baseClassId, _extensionKey]);

        if (cacheResult != conNull())
        {
            derivedClassId = conPeek(cacheResult,1);
            dictClass = new DictClass(derivedClassId);
            object = dictClass.makeObject();
        }
        else
        {
            Debug::assert(_baseClassId != 0);
            extensionFactory = ThresholdExtensionFactory_IN::construct();
            extensionKey = _extensionKey;

            if (typeOf(conPeek(extensionKey,1)) == Types::String)
            {
                extensionKey = conPoke(extensionKey, 1, enumName2Id(conPeek(_extensionKey,1)));
            }

            objectList = extensionFactory.newObjectListFromExtensionKey(_baseClassId, _attributeClassName, extensionFactory.getValidExtensionKey(extensionKey), _fallbackToBase, _createCommonExtensions);

            if (objectList)
            {
                if (objectList.elements() > 1)
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }

                objectListEnumerator = objectList.getEnumerator();

                while (objectListEnumerator.moveNext())
                {
                    object = objectListEnumerator.current();
                }

                if (object != null)
                {
                    derivedClassId = classIdGet(object);
                    cacheResult = [derivedClassId];
                    LedgerCache::insertValue(LedgerCacheScope::ExtensionFactoryClassIds, [_baseClassId, _extensionKey], cacheResult);
                }
            }
        }

        return object;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>