<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgPieceRateCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgPieceRateCalc</c> class is used to calculate pay based on piece rate setup.
/// </summary>
class JmgPieceRateCalc
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>jmgStampJournalTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query for piece rates calculations.
    /// </summary>
    /// <param name="_jmgStampJournalTable">
    /// The <c>JmgStampJournalTable</c> record for which to generate piece rate pay.
    /// </param>
    /// <returns>
    /// The <c>Query</c> object.
    /// </returns>
    protected Query jmgStampJournalTransQuery(JmgStampJournalTable _jmgStampJournalTable)
    {
        Query query = new Query();

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(JmgStampJournalTrans));

        queryBuildDataSource.update(true);
        queryBuildDataSource.addRange(fieldNum(JmgStampJournalTrans, Worker)).value(queryValue(_jmgStampJournalTable.Worker));
        queryBuildDataSource.addRange(fieldNum(JmgStampJournalTrans, ProfileDate)).value(queryValue(_jmgStampJournalTable.ProfileDate));
        queryBuildDataSource.addRange(fieldNum(JmgStampJournalTrans, JobPayType)).value(queryValue(JmgJobPayTypeEnum::PieceRate));
        queryBuildDataSource.addRange(fieldNum(JmgStampJournalTrans, Module)).value(queryValue(JmgModuleEnum::PROD));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jmgStampJournalTransPieceRateIndividualQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query from <c>JmgPieceRateLine</c> table for piece rates calculations.
    /// </summary>
    /// <param name="_jmgStampJournalTable">
    /// The <c>JmgStampJournalTable</c> record for which to generate piece rate pay.
    /// </param>
    /// <param name="_jmgPieceRateLine">
    /// The piece rate line to which to write the calculated piece rate results.
    /// </param>
    /// <returns>
    /// The <c>Query</c> object.
    /// </returns>
    protected Query jmgStampJournalTransPieceRateIndividualQuery(JmgStampJournalTable _jmgStampJournalTable, JmgPieceRateLine _jmgPieceRateLine)
    {
        Query query = this.jmgStampJournalTransQuery(_jmgStampJournalTable);

        QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tableNum(JmgStampJournalTrans));

        queryBuildDataSource.addRange(fieldNum(JmgStampJournalTrans, JobRef)).value(queryValue(_jmgPieceRateLine.ProdId));
        queryBuildDataSource.addRange(fieldNum(JmgStampJournalTrans, OprNum)).value(queryValue(_jmgPieceRateLine.OprNum));

        if (_jmgPieceRateLine.JobId)
        {
            queryBuildDataSource.addRange(fieldNum(JmgStampJournalTrans, JobId)).value(queryValue(_jmgPieceRateLine.JobId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jmgStampTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>JmgStampTrans</c> table based query for piece rates calculations.
    /// </summary>
    /// <param name="_jmgStampJournalTable">
    /// The <c>JmgStampJournalTable</c> record for which to generate piece rate pay.
    /// </param>
    /// <param name="_jmgPieceRateLine">
    /// The piece rate line to which to write the calculated piece rate results.
    /// </param>
    /// <returns>
    /// The <c>Query</c> object.
    /// </returns>
    protected Query jmgStampTransQuery(JmgStampJournalTable _jmgStampJournalTable, JmgPieceRateLine _jmgPieceRateLine)
    {
        Query query = new Query();

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(JmgStampTrans));

        queryBuildDataSource.update(true);
        queryBuildDataSource.addRange(fieldNum(JmgStampTrans, Worker)).value(queryValue(_jmgStampJournalTable.Worker));
        queryBuildDataSource.addRange(fieldNum(JmgStampTrans, ProfileDate)).value(queryValue(_jmgStampJournalTable.ProfileDate));
        queryBuildDataSource.addRange(fieldNum(JmgStampTrans, JobPayType)).value(queryValue(JmgJobPayTypeEnum::PieceRate));
        queryBuildDataSource.addRange(fieldNum(JmgStampTrans, Module)).value(queryValue(JmgModuleEnum::PROD));

        queryBuildDataSource.addRange(fieldNum(JmgStampTrans, JobRef)).value(queryValue(_jmgPieceRateLine.ProdId));
        queryBuildDataSource.addRange(fieldNum(JmgStampTrans, OprNum)).value(queryValue(_jmgPieceRateLine.OprNum));

        if (_jmgPieceRateLine.JobId)
        {
            queryBuildDataSource.addRange(fieldNum(JmgStampTrans, JobId)).value(queryValue(_jmgPieceRateLine.JobId));
        }
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPieceRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the piece rates for the specified <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <param name="_jmgStampJournalTable">
    ///    The <c>JmgStampJournalTable</c> record for which to generate piece rate pay.
    /// </param>
    void calcPieceRate(JmgStampJournalTable _jmgStampJournalTable)
    {
        JmgStampJournalTrans    jmgStampJournalTrans;
        JmgPieceRateTable       jmgPieceRateTable;
        JmgPieceRateLine        jmgPieceRateLine;
        JmgStampTrans           jmgStampTrans;

        if (JmgProdParameters::find().PieceRateIndividual == NoYes::No)
        {
            while select jmgPieceRateTable
                order by EmplGroup, EmplIDGroupId
                where jmgPieceRateTable.Locked == NoYes::No
            {
                if ((jmgPieceRateTable.EmplGroup            == JmgEmplIdGroupId::All)               ||
                    ((jmgPieceRateTable.EmplGroup           == JmgEmplIdGroupId::EmplId)        &&
                     (jmgPieceRateTable.EmplIDGroupId       == int642str(_jmgStampJournalTable.Worker))    )   ||
                    ((jmgPieceRateTable.EmplGroup           == JmgEmplIdGroupId::GroupId)       &&
                     ((select firstonly RecId from jmgPieceRateEmpl
                            where jmgPieceRateEmpl.Worker   == _jmgStampJournalTable.Worker     &&
                                  jmgPieceRateEmpl.GroupId  == jmgPieceRateTable.EmplIDGroupId).RecId)))
                {
                    QueryRun queryRun = new QueryRun(this.jmgStampJournalTransQuery(_jmgStampJournalTable));

                    while (queryRun.next())
                    {
                        jmgStampJournalTrans = queryRun.get(tableNum(JmgStampJournalTrans));

                        this.calculate(jmgStampJournalTrans,jmgPieceRateTable);
                        jmgStampJournalTrans.PieceRatePayCostTypeMin = jmgPieceRateTable.MinPayCostType;
                        jmgStampJournalTrans.update();
                        JmgCalcApproveForm::construct().transactionUpdated(jmgStampJournalTrans);
                    }
                    break;
                }
            }
        }
        else
        {
            while select jmgPieceRateTable
                order by EmplGroup, EmplIDGroupId
                where (jmgPieceRateTable.Locked             == NoYes::No)
            {
                if ((jmgPieceRateTable.EmplGroup            == JmgEmplIdGroupId::All)               ||
                    ((jmgPieceRateTable.EmplGroup           == JmgEmplIdGroupId::EmplId)        &&
                     (jmgPieceRateTable.EmplIDGroupId       == int642str(_jmgStampJournalTable.Worker))    )   ||
                    ((jmgPieceRateTable.EmplGroup           == JmgEmplIdGroupId::GroupId)       &&
                     ((select firstonly RecId from jmgPieceRateEmpl
                            where jmgPieceRateEmpl.Worker   == _jmgStampJournalTable.Worker     &&
                                  jmgPieceRateEmpl.GroupId  == jmgPieceRateTable.EmplIDGroupId).RecId)))
                {
                    while select forupdate jmgPieceRateLine
                        where jmgPieceRateLine.PieceRateId  == jmgPieceRateTable.PieceRateId
                    {
                        QueryRun queryRun = new QueryRun(this.jmgStampJournalTransPieceRateIndividualQuery(_jmgStampJournalTable, jmgPieceRateLine));

                        while (queryRun.next())
                        {
                            jmgStampJournalTrans = queryRun.get(tableNum(JmgStampJournalTrans));

                            this.calculate(jmgStampJournalTrans,jmgPieceRateTable);
                            jmgStampJournalTrans.PieceRatePayCostTypeMin = jmgPieceRateTable.MinPayCostType;
                            jmgStampJournalTrans.update();
                            JmgCalcApproveForm::construct().transactionUpdated(jmgStampJournalTrans);
                        }

                        queryRun = new QueryRun(this.jmgStampTransQuery(_jmgStampJournalTable, jmgPieceRateLine));

                        while (queryRun.next())
                        {
                            jmgStampTrans = queryRun.get(tableNum(JmgStampTrans));

                            this.calculate(jmgStampTrans,jmgPieceRateTable);
                            jmgStampTrans.PieceRatePayCostTypeMin = jmgPieceRateTable.MinPayCostType;
                            jmgStampTrans.update();
                        }
                        this.updatePieceRateLine(jmgPieceRateTable, jmgPieceRateLine);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the piece rate for the specified registration by using the specified piece rate setup.
    /// </summary>
    /// <param name="stampTrans">
    ///    The registration for which to calculate piece rate.
    /// </param>
    /// <param name="pieceRateTable">
    ///    The piece rate setup to use when calculating piece rate.
    /// </param>
    void calculate(JmgStampTransMap     stampTrans,
                   JmgPieceRateTable    pieceRateTable)
    {
        real            planTimeJob;
        real            planTimeNorm;
        ProdRoute       prodRoute;

        if ((stampTrans.Module != JmgModuleEnum::PROD)  ||
            (! stampTrans.JobRef)                       ||
            (! stampTrans.OprNum)                       ||
            (! stampTrans.Seconds)                       )
        {
            return;
        }

        prodRoute = JmgPieceRateCalc::getProdRoute(stampTrans.JobId);

        if (prodRoute && prodRoute.CalcQty && (stampTrans.JobRefType == JmgJobRefTypeEnum::MrpProcess))
        {
            planTimeJob                 = prodRoute.CalcProc / prodRoute.CalcQty *3600;
            planTimeNorm                = this.reportedQty(stampTrans) * planTimeJob;
            stampTrans.PieceRatePayRate = (planTimeNorm / stampTrans.Seconds) * pieceRateTable.Price;
        }
        else
        {
            stampTrans.PieceRatePayRate = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the total reported quantity on the specified registration.
    /// </summary>
    /// <param name="stampTrans">
    ///    The registration for which to retrieve the quantity.
    /// </param>
    /// <returns>
    ///    The total reported quantity on the specified registration.
    /// </returns>
    private Qty reportedQty(JmgStampTransMap stampTrans)
    {
        return (stampTrans.SysQtyGood + stampTrans.SysQtyError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePieceRateLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the piece rate line with calculated results.
    /// </summary>
    /// <param name="_jmgPieceRateTable">
    ///    The piece rate setup to use when calculating piece rate results.
    /// </param>
    /// <param name="_jmgPieceRateLine">
    ///    The piece rate line to which to write the calculated piece rate results.
    /// </param>
    protected void updatePieceRateLine(JmgPieceRateTable _jmgPieceRateTable, JmgPieceRateLine _jmgPieceRateLine)
    {
        JmgStampJournalTrans    jmgStampJournalTrans;
        JmgStampTrans           jmgStampTrans;
        ProdRoute               prodRoute;
        select sum(Seconds), sum(SysQtyGood), sum(SysQtyError)
            from  jmgStampJournalTrans
            where jmgStampJournalTrans.JobPayType   == JmgJobPayTypeEnum::PieceRate &&
                  jmgStampJournalTrans.Module       == JmgModuleEnum::PROD          &&
                  jmgStampJournalTrans.JobRef       == _jmgPieceRateLine.ProdId     &&
                  jmgStampJournalTrans.OprNum       == _jmgPieceRateLine.OprNum     &&
                  (!_jmgPieceRateLine.JobId                                         ||
                    jmgStampJournalTrans.JobId      == _jmgPieceRateLine.JobId);

        _jmgPieceRateLine.TotalQty      = this.reportedQty(jmgStampJournalTrans);
        _jmgPieceRateLine.TotalSeconds  = jmgStampJournalTrans.Seconds;

        select sum(Seconds), sum(SysQtyGood), sum(SysQtyError)
            from  jmgStampTrans
            where jmgStampTrans.JobPayType  == JmgJobPayTypeEnum::PieceRate &&
                  jmgStampTrans.Module      == JmgModuleEnum::PROD          &&
                  jmgStampTrans.JobRef      == _jmgPieceRateLine.ProdId     &&
                  jmgStampTrans.OprNum      == _jmgPieceRateLine.OprNum     &&
                  (!_jmgPieceRateLine.JobId                                 ||
                    jmgStampTrans.JobId     == _jmgPieceRateLine.JobId);

        _jmgPieceRateLine.TotalQty      += this.reportedQty(jmgStampTrans);
        _jmgPieceRateLine.TotalSeconds  += jmgStampTrans.Seconds;

        if (_jmgPieceRateLine.TotalSeconds)
        {
            if (_jmgPieceRateLine.JobId)
            {
                prodRoute = JmgPieceRateCalc::getProdRoute(_jmgPieceRateLine.JobId);
            }

            if (!prodRoute)
            {
                prodRoute   = ProdRoute::find(_jmgPieceRateLine.ProdId, _jmgPieceRateLine.OprNum, RouteOprPriority::Primary);
            }

            if (prodRoute.CalcQty)
            {
                _jmgPieceRateLine.Price = ((prodRoute.CalcProc / prodRoute.CalcQty * 3600) * _jmgPieceRateLine.TotalQty) / _jmgPieceRateLine.TotalSeconds * _jmgPieceRateTable.Price;
                _jmgPieceRateLine.Price = max(JmgPayEmployee::getPayCostTypePrice(_jmgPieceRateTable.MinPayCostType, 0, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())), _jmgPieceRateLine.Price);
                _jmgPieceRateLine.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPieceRateFromStampTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the piece rates for the specified <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <param name="jmgStampJournalTable">
    ///    The <c>JmgStampJournalTable</c> record for which to generate piece rate pay.
    /// </param>
    static void calcPieceRateFromStampTable(JmgStampJournalTable jmgStampJournalTable)
    {
        JmgPieceRateCalc    jmgPieceRateCalc = JmgPieceRateCalc::construct(jmgStampJournalTable);

        if (jmgPieceRateCalc)
            jmgPieceRateCalc.calcPieceRate(jmgStampJournalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of one of the <c>JmgPieceRateCalc</c> subclasses.
    /// </summary>
    /// <param name="jmgStampJournalTable">
    ///    The <c>JmgStampJournalTable</c> record for which to calculate piece rates.
    /// </param>
    /// <returns>
    ///    A new instance of one of the <c>JmgPieceRateCalc</c> subclasses.
    /// </returns>
    /// <remarks>
    ///    The subclass that is used depends on the time and attendance parameter setup.
    /// </remarks>
    static JmgPieceRateCalc construct(JmgStampJournalTable jmgStampJournalTable)
    {
        JmgPieceRateType    pieceRateType   = JmgProdParameters::find().PieceRateType;
        JmgPieceRateCalc    pieceRateCalc;

        switch (pieceRateType)
        {
            case    JmgPieceRateType::basicQty   :
                pieceRateCalc   = new JmgPieceRateCalc();
                break;
            default             :
                pieceRateCalc   = new JmgPieceRateCalc();
        }
        return pieceRateCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a <c>ProdRoute</c> record, which is associated to the specified job ID.
    /// </summary>
    /// <param name="jobid">
    ///    The job ID for which to retrieve a <c>ProdRoute</c> record.
    /// </param>
    /// <returns>
    ///    A <c>ProdRoute</c> record, which is associated to the specified job ID.
    /// </returns>
    static ProdRoute getProdRoute(JmgJobId jobid)
    {
        ProdRoute       prodRoute;
        ProdRouteJob    prodRouteJob;
        prodRouteJob    = ProdRouteJob::findJobId(jobid);

        if (prodRouteJob)
        {
            prodRoute   = ProdRoute::find(prodRouteJob.ProdId,prodRouteJob.OprNum,prodRouteJob.OprPriority);
        }
        else
        {
            prodRoute   = ProdRoute::findJobId(jobid);
        }

        return prodRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jmgStampJournalTransInsertEventsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query for pay event calculations.
    /// </summary>
    /// <param name="_jmgStampJournalTable">
    /// The <c>JmgStampJournalTable</c> record to create pay events for.
    /// </param>
    protected Query jmgStampJournalTransInsertEventsQuery(JmgStampJournalTable _jmgStampJournalTable)
    {
        Query query = this.jmgStampJournalTransQuery(_jmgStampJournalTable);
        QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tableNum(JmgStampJournalTrans));

        queryBuildDataSource.update(true);
        queryBuildDataSource.addSortIndex(indexNum(JmgStampJournalTrans, EmplProfDateIdx));
        queryBuildDataSource.indexIsHint(true);
        queryBuildDataSource.addOrderByField(fieldNum(JmgStampJournalTrans, ProfileDate));
        queryBuildDataSource.addOrderByField(fieldNum(JmgStampJournalTrans, StartDate));
        queryBuildDataSource.addOrderByField(fieldNum(JmgStampJournalTrans, StartTime));
        queryBuildDataSource.addOrderByField(fieldNum(JmgStampJournalTrans, StopDate));
        queryBuildDataSource.addOrderByField(fieldNum(JmgStampJournalTrans, StopTime));
        queryBuildDataSource.addOrderByField(fieldNum(JmgStampJournalTrans, JourRegType));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates pay events for the calculated piece rates for the specified <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <param name="_jmgStampJournalTable">
    /// The <c>JmgStampJournalTable</c> record to create pay events for.
    /// </param>
    static void insertEvents(JmgStampJournalTable jmgStampJournalTable)
    {
        JmgPieceRateCalc::construct(jmgStampJournalTable).insertPayEvents(jmgStampJournalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPayEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates pay events for the calculated piece rates for the specified <c>JmgStampJournalTable</c> record.
    /// </summary>
    /// <param name="_jmgStampJournalTable">
    /// The <c>JmgStampJournalTable</c> record to create pay events for.
    /// </param>
    protected void insertPayEvents(JmgStampJournalTable _jmgStampJournalTable)
    {
        JmgPayEvents            jmgPayEvents;
        JmgStampJournalTrans    jmgStampJournalTrans;
        QueryRun                queryRun = new QueryRun(this.jmgStampJournalTransInsertEventsQuery(_jmgStampJournalTable));
        ttsbegin;

        while (queryRun.next())
        {
            jmgStampJournalTrans = queryRun.get(tableNum(JmgStampJournalTrans));
            jmgPayEvents.clear();

            jmgStampJournalTrans.PieceRatePayMinRate    = JmgPayEmployee::getPayCostTypePrice(jmgStampJournalTrans.PieceRatePayCostTypeMin, jmgStampJournalTrans.Worker, _jmgStampJournalTable.ProfileDate);
            jmgStampJournalTrans.update();
            JmgCalcApproveForm::construct().transactionUpdated(jmgStampJournalTrans);

            jmgPayEvents.Worker                         = _jmgStampJournalTable.Worker;
            jmgPayEvents.ProfileDate                    = _jmgStampJournalTable.ProfileDate;
            jmgPayEvents.PaySpecType                    = JmgPaySpecTypeEnum::PieceRate;
            jmgPayEvents.PaySeconds                     = jmgStampJournalTrans.SecondsOnTrans;
            jmgPayEvents.PayCostType                    = jmgStampJournalTrans.PieceRatePayCostTypeMin;
            jmgPayEvents.Price                          = max(jmgStampJournalTrans.PieceRatePayRate,jmgStampJournalTrans.PieceRatePayMinRate);
            jmgPayEvents.AbsenceActivityId              = '';
            jmgPayEvents.OprId                          = '';
            jmgPayEvents.PayCountSeconds                = 0;
            jmgPayEvents.PayCountId                     = '';
            jmgPayEvents.DefaultDimension               = jmgPayEvents.copyDimension(jmgStampJournalTrans.DefaultDimension);
            jmgPayEvents.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>