<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomRouteCopyJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BomRouteCopyJob extends RunBase
{
    // Packed
    BaseDataProd                fromType;
    ItemId                      fromItemId;
    EcoResItemConfigurationName fromConfigId;
    BOMId                       fromBOMId;
    TransDate                   fromBOMDate;
    RouteId                     fromRouteId;
    TransDate                   fromRouteDate;
    ProdId                      fromProdId;
    BaseDataProd                toType;
    BOMId                       toBOMId;
    RouteId                     toRouteId;
    ProdId                      toProdId;
    NoYes                       copyBOM;
    NoYes                       copyRoute;
    BOMCopyType                 copyType;
    BOMCopyMethod               copyMethod;
    RouteOprHandling            routeOprHandling;
    RouteOprReplace             routeOprReplace;
    boolean                     updateBOMId;
    boolean                     updateRouteId;
    boolean                     updateRoute;
    ItemId                      toItemId;
    EcoResItemConfigurationName toConfigId;
    InventSiteId                fromSiteId;
    InventSiteId                toSiteId;
    boolean                     skipValidation;
    RecId                       fromVerRecId;
    RecId                       toVerRecId;
    boolean                     copyCoByOnly;
    boolean                     creatingNewBom;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBaseData</Name>
				<Source><![CDATA[
    boolean checkBaseData()
    {
        boolean         ok = true;

        if (fromType == toType  && fromType== BaseDataProd::BaseData)
        {
            if (copyRoute && fromRouteId && fromRouteId == toRouteId)
            {
                ok = checkFailed("@SYS22147");
            }

            if (#PmfEnabled)
            {
                if (copyBOM && fromBOMId && fromBOMId == toBOMId && !copyCoByOnly)
                {
                    ok = checkFailed("@SYS22146");
                }
            }
            else
            {
                if (copyBOM && fromBOMId && fromBOMId == toBOMId)
                {
                    ok = checkFailed("@SYS22146");
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFrom</Name>
				<Source><![CDATA[
    boolean checkFrom()
    {
        boolean                         ok = true;
        InventTable                     inventTable;
        ProdTable                       prodTable;

        switch (fromType)
        {
            case BaseDataProd::BaseData:
                if (fromItemId)
                {
                    inventTable= InventTable::find(fromItemId);
                    if (! inventTable.checkValid(fromItemId))
                    {
                        ok = false;
                    }
                    else if (!inventTable.isFormulaOrBOMAllowed())
                    {
                        ok = checkFailed("@PRO1968");
                    }
                    else if (! inventTable.isStocked())
                    {
                        ok = checkFailed("@SYS301853");
                    }
                }
                if (fromItemId && fromConfigId)
                {
                    ok = EcoResProductVariantDimValue::newProductVariantDim_ConfigId().checkExist(inventTable.Product, fromConfigId) && ok;
                }
                if (copyRoute)
                {
                    if (fromRouteId)
                    {
                        ok = RouteTable::checkExist(fromRouteId) && ok;
                    }
                    else
                    {
                        ok = checkFailed("@SYS72813");
                    }
                }
                if (copyBOM)
                {
                    if (fromBOMId)
                    {
                        ok = BOMTable::checkExist(fromBOMId) && ok;
                    }
                    else
                    {
                        ok = checkFailed("@SYS72814");
                    }
                }
                break;

            case BaseDataProd::Production:
                prodTable = ProdTable::find(fromProdId);
                if (! prodTable.checkValid(fromProdId))
                {
                    ok = false;
                }
                break;

            default:
                ok = checkFailed("@SYS1602");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProd</Name>
				<Source><![CDATA[
    boolean checkProd()
    {
        boolean  ok = true;

        if (fromType       == toType                        &&
            fromType       == BaseDataProd::Production      &&
            fromProdId     == toProdId
           )
        {
            ok = checkFailed("@SYS5620");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTo</Name>
				<Source><![CDATA[
    boolean checkTo()
    {
        boolean                         ok = true;
        ProdTable                       prodTable;
        InventSiteId                    fromSiteIdcheck;

        switch (toType)
        {
            case BaseDataProd::BaseData:
                if (toSiteId)
                {
                    ok = InventSite::checkExist(toSiteId);
                }

                if (copyRoute && toItemId)
                {
                    ok = this.validateItem(ok);
                }

                if (copyRoute)
                {
                    ok = this.validateRoute(ok);
                }
                if (copyBOM)
                {
                    ok = this.validateBOM(ok);
                }
                break;

            case BaseDataProd::Production:
                prodTable = ProdTable::find(toProdId);
                if (! prodTable.checkValid(prodTable.ProdId))
                {
                    ok = false;
                }
                else if (! prodTable.status().prodCheckCopying())
                {
                    ok = false;
                }

                // Check site consistency
                if (ok)
                {
                    switch (fromType)
                    {
                        case BaseDataProd::BaseData:
                            fromSiteIdcheck = fromSiteId;
                            break;
                        case BaseDataProd::Production:
                            fromSiteIdcheck = ProdTable::find(fromProdId).inventDim().InventSiteId;
                            break;
                        default:
                            ok = checkFailed("@SYS1602");
                    }
                    if (fromSiteIdcheck != prodTable.inventDim().InventSiteId)
                    {
                        ok = checkFailed("@SYS109519");
                    }
                }
                break;

            default:
                ok = checkFailed("@SYS1602");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the item copied.
    /// </summary>
    /// <param name = "_previousValidation">
    /// A boolean indicates the result of the previous validation.
    /// </param>
    /// <returns>
    /// true if the item is valid; otherwise, false.
    /// </returns>
    protected boolean validateItem(boolean _previousValidation)
    {
        InventTable inventTable = InventTable::find(toItemId);
        if (! inventTable.checkValid(toItemId))
        {
            _previousValidation = false;
        }
        else if (!inventTable.isFormulaOrBOMAllowed())
        {
            _previousValidation = checkFailed("@PRO1969");
        }
        else if (!inventTable.isStocked())
        {
            _previousValidation = checkFailed("@SYS301853");
        }

        if (toConfigId)
        {
            _previousValidation  =  EcoResProductVariantDimValue::newProductVariantDim_ConfigId().checkExist(inventTable.Product, toConfigId) && _previousValidation;
        }
        return _previousValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRoute</Name>
				<Source><![CDATA[
    private boolean validateRoute(boolean _previousValidation)
    {
        if (toRouteId)
        {
            return RouteTable::checkExist(toRouteId) && _previousValidation;
        }
        return checkFailed("@SYS22929");
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBOM</Name>
				<Source><![CDATA[
    private boolean validateBOM(boolean _previousValidation)
    {
        if (toBOMId)
        {
            return this.validateBOMId(_previousValidation);
        }
        return checkFailed("@SYS22931");
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBOMId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>BOMId</c>.
    /// </summary>
    /// <param name = "_previousValidation">
    /// A boolean indicates the result of the previous validation.
    /// </param>
    /// <returns>
    /// true if the <c>BOMId</c> is valid; otherwise, false.
    /// </returns>
    //This is an extension point to control the validation of the BOM. 
    protected boolean validateBOMId(boolean _previousValidation)
    {
        return BOMTable::checkExist(toBOMId) && _previousValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructBOMCopy</Name>
				<Source><![CDATA[
    BOMCopyFrom constructBOMCopy()
    {
        BOMSearchBase search;
        switch (fromType)
        {
            case BaseDataProd::BaseData:
                search = BOMSearch_BOMCopyType::newBOMRouteCopy(this);
                break;

            case BaseDataProd::Production:
                search = ProdBOMSearch::newBOMRouteCopy(this);
                break;
        }

        OprNum oprOffset;
        switch (toType)
        {
            case BaseDataProd::BaseData:
                if (copyRoute && toRouteId)
                {
                    oprOffset = Route::lastOprNum(toRouteId);
                }
                return BOMCopyFrom::construct(
                        BOMCopyToBOM::newBOMRouteCopy(this,oprOffset),
                        search);

            case BaseDataProd::Production:
                if (copyRoute)
                {
                    oprOffset = ProdRoute::lastOprNum(toProdId);
                }
                return BOMCopyFrom::construct(
                        BOMCopyToProd::newBOMRouteCopy(this,oprOffset),
                        search);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCoByCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs new instance of PmfCoByCopyFrom class based on the types
    /// being copied from and to.
    /// </summary>
    /// <returns>
    /// New instance of the PmfCoByCopyFrom class derived from the BaseDataProd
    /// types being copied from and to.
    /// </returns>
    public PmfCoByCopyFrom constructCoByCopy()
    {
        PmfCoBySearchBase search;
        switch (fromType)
        {
            case BaseDataProd::BaseData:
                search = PmfCoBySearch_FormulaCopyType::newBOMRouteCopy(this);
                break;

            case BaseDataProd::Production:
                search = PmfProdCoBySearch::newBOMRouteCopy(this);
                break;
        }

        switch (toType)
        {
            case BaseDataProd::BaseData:
                return PmfCoByCopyFrom::construct(
                        PmfCoByCopyToFormula::newBOMRouteCopy(this),
                        search);

            case BaseDataProd::Production:
                return PmfCoByCopyFrom::construct(
                        PmfCoByCopyToProd::newBOMRouteCopy(this),
                        search);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructRouteCopy</Name>
				<Source><![CDATA[
    RouteCopyFrom constructRouteCopy()
    {
        SysSearchBase search;
        switch (fromType)
        {
            case BaseDataProd::BaseData:
                search = RouteSearch_Config::newBOMRouteCopy(this);
                break;

            case BaseDataProd::Production:
                search = ProdRouteSearch::newBOMRouteCopy(this);
                break;
        }

        switch (toType)
        {
            case BaseDataProd::BaseData:
                return RouteCopyFrom::construct(
                        RouteCopyToRoute::newBOMRouteCopy(this),
                        search);

            case BaseDataProd::Production:
                return RouteCopyFrom::construct(
                        RouteCopyToProd::newBOMRouteCopy(this),
                        search);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    Object dialog()
    {
        FormRun dialogForm;
        Args    args = new Args(formstr(BOMRouteCopyDialog));
        args.caller(this);
        if (creatingNewBom)
        {
            args.parmEnumeration(BOMCopyContext::NewBOM);
        }

        dialogForm = classfactory.formRunClass(args);
        dialogForm.init();

        return dialogForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doBOM</Name>
				<Source><![CDATA[
    void doBOM()
    {
        if (! copyBOM)
        {
            return;
        }

        BOMCopyFrom bomCopyFrom = this.constructBOMCopy();

        if (copyMethod == BOMCopyMethod::Replace)
        {
            bomCopyFrom.delete(this);
        }

        bomCopyFrom.copy();

        this.bomCopyUpdated(bomCopyFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomCopyUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to handle updates to other tables after a new BOM copy has been created
    /// </summary>
    /// <param name = "_bomCopyFrom">The source where the BOM is copied from.</param>
    public void bomCopyUpdated(BOMCopyFrom _bomCopyFrom)
    {
        switch (toType)
        {
            case BaseDataProd::Production:
                if (updateBOMId && _bomCopyFrom.isBOMUpdated())
                {
                    ProdTable prodTable = ProdTable::find(toProdId,true);
                    prodTable.bomId   = fromBOMId;
                    prodTable.BOMDate = fromBOMDate;
                    prodTable.update();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRoute</Name>
				<Source><![CDATA[
    void doRoute()
    {
        if (! copyRoute)
        {
            return;
        }

        RouteCopyFrom routeCopyFrom = this.constructRouteCopy();

        if (copyMethod == BOMCopyMethod::Replace)
        {
            routeCopyFrom.delete();
        }

        routeCopyFrom.copy();

        this.routeCopyUpdated(routeCopyFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeCopyUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to handle updates to other tables after a new Route copy has been created
    /// </summary>
    /// <param name = "_routeCopyFrom">The source where the Route is copied from.</param>
    public void routeCopyUpdated(RouteCopyFrom _routeCopyFrom)
    {
        switch (toType)
        {
            case BaseDataProd::Production:
                if (updateRouteId && _routeCopyFrom.isRouteUpdated())
                {
                    ProdTable prodTable = ProdTable::find(toProdId,true);
                    prodTable.RouteId = fromRouteId;
                    prodTable.update();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventDimFromItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an inventory dimension record from an item.
    /// </summary>
    /// <param name = "_inventTable">The item.</param>
    /// <returns>The inventory dimension.</returns>
    protected InventDim initializeInventDimFromItem(InventTable _inventTable)
    {
        InventDim inventDim;
        inventDim.InventSiteId = _inventTable.inventInventSiteId();
        inventDim = InventDim::findOrCreate(inventDim);
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromItemId</Name>
				<Source><![CDATA[
    void initFromItemId(ItemId _itemId)
    {
        this.parmFromItemId(_itemId);

        if (! _itemId)
        {
            return;
        }

        InventTable inventTable = InventTable::find(_itemId);
        if (! inventTable)
        {
            return;
        }

        if (copyBOM || copyRoute)
        {
            InventDim inventDim = this.initializeInventDimFromItem(inventTable);

            if (copyBOM)
            {
                BOMVersion bomVersion = BOMVersion::findActive(_itemId, fromBOMDate, inventTable.inventStandardQty(inventDim.InventDimId), inventDim);
                if (bomVersion)
                {
                    fromBOMId   = bomVersion.bomId;
                    fromSiteId  = bomVersion.inventSiteId();
                }
            }

            if (copyRoute)
            {
                RouteVersion routeVersion = RouteVersion::findActive(_itemId, fromRouteDate, inventTable.inventStandardQty(inventDim.InventDimId), inventDim);
                if (routeVersion)
                {
                    fromRouteId = routeVersion.RouteId;
                    fromSiteId  = routeVersion.inventSiteId();
                }
            }
        }

        // To site is defaulted as the from site
        toSiteId = fromSiteId;

        fromConfigId = inventTable.StandardConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        fromType            = BaseDataProd::BaseData;
        toType              = BaseDataProd::BaseData;

        copyBOM             = NoYes::No;
        copyRoute           = NoYes::No;
        routeOprHandling    = RouteOprHandling::CopySpecific;

        copyMethod          = BOMCopyMethod::AddTo;

        fromBOMDate         = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        fromRouteDate       = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyBOM</Name>
				<Source><![CDATA[
    NoYes parmCopyBOM(NoYes setBOM = copyBOM)
    {
        copyBOM = setBOM;
        return  copyBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyCoByOnly</Name>
				<Source><![CDATA[
    public boolean parmCopyCoByOnly(boolean _copyCoByOnly = copyCoByOnly)
    {
        copyCoByOnly = _copyCoByOnly;
        return copyCoByOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyRoute</Name>
				<Source><![CDATA[
    NoYes parmCopyRoute(NoYes setRoute = copyRoute)
    {
        copyRoute = setRoute;

        return  copyRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromBOMDate</Name>
				<Source><![CDATA[
    TransDate parmFromBOMDate(TransDate transDate = fromBOMDate)
    {
        fromBOMDate = transDate;
        return  fromBOMDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromBOMId</Name>
				<Source><![CDATA[
    BOMId parmFromBOMId(BOMId bomNum = fromBOMId)
    {
        fromBOMId = bomNum;
        return  fromBOMId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromConfigId</Name>
				<Source><![CDATA[
    EcoResItemConfigurationName  parmFromConfigId(EcoResItemConfigurationName config = fromConfigId)
    {
        fromConfigId = config;
        return  fromConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromItemId</Name>
				<Source><![CDATA[
    ItemIdProduction parmFromItemId(ItemId itemNum = fromItemId)
    {
        fromItemId = itemNum;
        return  fromItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromProdId</Name>
				<Source><![CDATA[
    ProdId parmFromProdId(ProdId prod = fromProdId)
    {
        fromProdId = prod;
        return  fromProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromRouteDate</Name>
				<Source><![CDATA[
    TransDate parmFromRouteDate(TransDate transDate = fromRouteDate)
    {
        fromRouteDate = transDate;
        return fromRouteDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromRouteId</Name>
				<Source><![CDATA[
    RouteId parmFromRouteId(RouteId route = fromRouteId)
    {
        fromRouteId = route;
        return  fromRouteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromSiteId</Name>
				<Source><![CDATA[
    InventSiteId parmFromSiteId(InventSiteId siteId = fromSiteId)
    {
        fromSiteId = siteId;
        return  fromSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromType</Name>
				<Source><![CDATA[
    BaseDataProd parmFromType(BaseDataProd type = fromType)
    {
        fromType = type;
        return fromType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMethod</Name>
				<Source><![CDATA[
    BOMCopyMethod parmMethod(BOMCopyMethod method = copyMethod)
    {
        copyMethod = method;

        return copyMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPmfFromVerRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the formula version record id of the copy source.
    /// </summary>
    /// <param name="_fromVerRecId">The formula version record id of the copy source.</param>
    /// <returns>The formula version record id of the copy source.</returns>
    public RecId parmPmfFromVerRecId(RecId _fromVerRecId = fromVerRecId)
    {
        fromVerRecId = _fromVerRecId;
        return  fromVerRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPmfToVerRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the formula version record id of the copy destination.
    /// </summary>
    /// <param name="_toVerRecId">The formula version record id of  the copy destination.</param>
    /// <returns>The formula version record id of  the copy destination.</returns>
    public RecId parmPmfToVerRecId(RecId _toVerRecId = toVerRecId)
    {
        toVerRecId = _toVerRecId;
        return  toVerRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteOprHandling</Name>
				<Source><![CDATA[
    RouteOprHandling parmRouteOprHandling(RouteOprHandling _routeOprHandling = routeOprHandling)
    {
        routeOprHandling = _routeOprHandling;

        return routeOprHandling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteOprReplace</Name>
				<Source><![CDATA[
    public RouteOprReplace parmRouteOprReplace(RouteOprReplace _routeOprReplace = routeOprReplace)
    {
        routeOprReplace = _routeOprReplace;

        return routeOprReplace;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipValidation</Name>
				<Source><![CDATA[
    public boolean parmSkipValidation(boolean _skipValidation = skipValidation)
    {
        skipValidation = _skipValidation;

        return skipValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToBOMId</Name>
				<Source><![CDATA[
    BOMId parmToBOMId(BOMId bomNum = toBOMId)
    {
        toBOMId = bomNum;

        return  toBOMId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToConfigId</Name>
				<Source><![CDATA[
    EcoResItemConfigurationName  parmToConfigId(EcoResItemConfigurationName config = toConfigId)
    {
        toConfigId = config;

        return  toConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToItemId</Name>
				<Source><![CDATA[
    ItemIdProduction parmToItemId(ItemId itemNum = toItemId)
    {
        toItemId = itemNum;

        return  toItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToProdId</Name>
				<Source><![CDATA[
    ProdId parmToProdId(ProdId prod = toProdId)
    {
        toProdId = prod;

        return  toProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToRouteId</Name>
				<Source><![CDATA[
    RouteId parmToRouteId(RouteId route = toRouteId)
    {
        toRouteId = route;

        return  toRouteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToSiteId</Name>
				<Source><![CDATA[
    InventSiteId parmToSiteId(InventSiteId siteId = toSiteId)
    {
        toSiteId = siteId;
        return  toSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToType</Name>
				<Source><![CDATA[
    BaseDataProd parmToType(BaseDataProd type = toType)
    {
        toType = type;

        return toType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateBOMId</Name>
				<Source><![CDATA[
    boolean parmUpdateBOMId(boolean _update = updateBOMId)
    {
        updateBOMId = _update;

        return updateBOMId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateRoute</Name>
				<Source><![CDATA[
    public NoYes parmUpdateRoute(NoYes _updateRoute = updateRoute)
    {
        updateRoute = _updateRoute;

        return updateRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateRouteId</Name>
				<Source><![CDATA[
    boolean parmUpdateRouteId(boolean _update = updateRouteId)
    {
        updateRouteId = _update;

        return updateRouteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfDoCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies CoBy products to the newly copied formula.
    /// </summary>
    public void pmfDoCoBy()
    {
        PmfCoByCopyFrom copyFrom;

        if (!copyBOM)
        {
            return;
        }

        copyFrom = this.constructCoByCopy();

        if (copyMethod == BOMCopyMethod::Replace)
        {
            copyFrom.delete(this);
        }

        copyFrom.copy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfIsFormula</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return if source of copy is a formula.
    /// </summary>
    /// <returns>Source of copy is formula or not..</returns>
    public boolean pmfIsFormula()
    {
        switch (fromType)
        {
            case BaseDataProd::BaseData:
                return BOMTable::find(fromBOMId).PmfBOMFormula == PmfBOMFormula::Formula;

            case BaseDataProd::Production:
                return ProdTable::find(fromProdId).ProdType == ProdType::Process;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        RouteTable  routeTable;

        try
        {
            ttsbegin;

            if (! this.validate())
            {
                throw error("@SYS18722");
            }

            if (!copyCoByOnly)
            {
                this.doBOM();
            }
            if (this.pmfIsFormula())
            {
                this.pmfDoCoBy();
            }

            this.doRoute();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        try
        {
            switch (toType)
            {
                case BaseDataProd::BaseData:
                    if (updateRoute)
                    {
                        routeTable = RouteTable::find(toRouteId);
                        if (routeTable)
                        {
                            routeTable.updateRoute(false);
                        }
                    }
                    break;
            }
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        boolean ok;

        if (skipValidation)
        {
            return true;
        }

        if (! copyBOM && ! copyRoute)
        {
            return checkFailed("@SYS22928");
        }

        ok = super();
        ok = this.checkTo()         && ok;
        ok = this.checkFrom()       && ok;
        ok = this.checkBaseData()   && ok;
        ok = this.checkProd()       && ok;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMRouteCopyJob construct()
    {
        return new BOMRouteCopyJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS26503";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRouteCopyJobFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BOMRouteCopyJob</c> based on the given set of <c>Args</c>.
    /// </summary>
    /// <param name = "_args">
    /// The arguments used to create <c>BOMRouteCopyJob</c>.
    /// </param>
    /// <returns>
    /// A <c>BOMRouteCopyJob</c>.
    /// </returns>
    protected static BOMRouteCopyJob getRouteCopyJobFromCaller(Args _args)
    {
        BOMRouteCopyJob copy;
        
        if (_args)
        {
            copy = BOMRouteCopyJob::getRouteCopyJobFromArgs(_args.dataset(), _args.record(), _args.caller());
        }
        
        if (!copy)
        {
            copy = BOMRouteCopyJob::construct();
        }

        return copy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRouteCopyJobFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BOMRouteCopyJob</c> based on the passed parameters.
    /// </summary>
    /// <param name = "_tableId">
    /// The passed <c>TableId</c>.
    /// </param>
    /// <param name = "_record">
    /// The record used to create <c>BOMRouteCopyJob</c>.
    /// </param>
    /// <param name = "_caller">
    /// The caller object.
    /// </param>
    /// <returns>
    /// A <c>BOMRouteCopyJob</c> object.
    /// </returns>
    protected static BOMRouteCopyJob getRouteCopyJobFromArgs(TableId _tableId, Common _record, Object _caller)
    {
        BOMRouteCopyJob copy;
        switch (_tableId)
        {
            case tablenum(Route):
                copy = BOMRouteCopyJob::newToRoute(_record, _caller);
                break;
            case tablenum(BOM):
                copy = BOMRouteCopyJob::newToBOM(_record, _caller);
                break;
            case tablenum(BOMTable):
                copy = BOMRouteCopyJob::newToBOMTable(_record);
                break;
            case tablenum(ProdBOM):
                copy = BOMRouteCopyJob::newToProdBOM(_record, _caller);
                break;
            case tablenum(ProdRoute):
                ProdRoute tmpProdRoute = _record;
                if (tmpProdRoute.isTmp())
                {
                    Route tmpRoute;
                    tmpRoute.RouteId = tmpProdRoute.ProdId;
                    tmpRoute.RouteMap::initFromRouteMap(tmpProdRoute);

                    copy = BOMRouteCopyJob::newToRoute(tmpRoute, _caller);
                }
                else
                {
                    copy = BOMRouteCopyJob::newToProdRoute(_record, _caller);
                }
                break;
            case tableNum(BOMVersion):
                copy = BOMRouteCopyJob::pmfNewToFormulaCoBy(_record);
                break;
        }

        return copy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        BOMRouteCopyJob copy;

        copy = BOMRouteCopyJob::getRouteCopyJobFromCaller(args);

        if (copy.prompt())
        {
            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(args))
            {
                copy.runOperation();
            }
        }

        if (BOMRouteCopyJob::shouldDoResearch(args.dataset()) && args.caller())
        {
            args.caller().doResearch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDoResearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the dataset requires the caller to call the <c>doResearch</c> method.
    /// </summary>
    /// <param name = "_dataset">The dataset this method was called with</param>
    /// <returns></returns>
    protected static boolean shouldDoResearch(TableId _dataset)
    {
        return _dataset == tablenum(Route)
            || _dataset == tablenum(BOM)
            || _dataset == tablenum(BOMTable)
            || _dataset == tablenum(ProdBOM)
            || _dataset == tablenum(ProdRoute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromToBOMId</Name>
				<Source><![CDATA[
    static BOMRouteCopyJob newFromToBOMId(BOMId fromId, BOMId toId, InventSiteId fromSiteId)
    {
        BOMRouteCopyJob copy = new BOMRouteCopyJob();

        copy.parmFromType(BaseDataProd::BaseData);
        copy.parmToType(BaseDataProd::BaseData);
        copy.parmCopyBOM(true);
        copy.parmCopyRoute(false);
        copy.parmFromBOMId(fromId);
        copy.parmToBOMId(toId);
        copy.parmFromSiteId(fromSiteId);
        copy.parmToSiteId(fromSiteId);
        copy.parmCopyCoByOnly(false);
        return copy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromToRouteId</Name>
				<Source><![CDATA[
    static BOMRouteCopyJob newFromToRouteId(RouteId fromId, RouteId toId, InventSiteId fromSiteId = '')
    {
        BOMRouteCopyJob    copy = new BOMRouteCopyJob();

        copy.parmFromType(BaseDataProd::BaseData);
        copy.parmToType(BaseDataProd::BaseData);
        copy.parmCopyRoute(true);
        copy.parmCopyBOM(false);
        copy.parmFromRouteId(fromId);
        copy.parmToRouteId(toId);
        copy.parmFromSiteId(fromSiteId);
        copy.parmToSiteId(fromSiteId);
        copy.parmCopyCoByOnly(false);
        return copy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newToBOM</Name>
				<Source><![CDATA[
    static BOMRouteCopyJob newToBOM(
        BOM     bom,
        Object  caller = null
        )
    {
        BOMRouteCopyJob     copy = new BOMRouteCopyJob();

        copy.parmToType(BaseDataProd::BaseData);
        copy.parmCopyBOM(true);
        copy.parmCopyRoute(false);

        if (bom)
        {
            copy.parmToBOMId(bom.bomId);
        }
        else
        {
            if (caller)
            {
                copy.parmToBOMId(caller.bomId());
            }
        }

        if (bom.bomTable(false).PmfBOMFormula
            != BOMTable::find(copy.parmFromBOMId()).PmfBOMFormula)
        {
            copy.parmFromBOMId('');
            copy.parmFromItemId('');
        }

        if (caller && caller.name() == formstr(BOMConsistOf))
        {
            if (! copy.parmFromItemId())
            {
                copy.parmFromItemId(caller.itemId());
            }

            copy.parmToItemId(copy.parmFromItemId());
            copy.parmToConfigId(caller.configId());
            copy.parmToSiteId(caller.siteId());
        }

        return copy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newToProd</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BOMRouteCopyJob</c> class.
    /// </summary>
    /// <param name="prodTable">
    ///    A record of type <c>ProdTable</c>.
    /// </param>
    /// <param name="newBOMId">
    ///    A string that holds a bill of materials ID.
    /// </param>
    /// <param name="newRouteId">
    ///    A string that holds a route ID.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BOMRouteCopyJob</c> class.
    /// </returns>
    /// <remarks>
    ///    The instance is used to replace a bill of materials and a route for the specified production order.
    /// </remarks>
    static BOMRouteCopyJob newToProd(
        ProdTable   prodTable,
        BOMId       newBOMId,
        RouteId     newRouteId)
    {
        BOMRouteCopyJob copy = new BOMRouteCopyJob();

        copy.parmFromType(BaseDataProd::BaseData);
        copy.parmToType(BaseDataProd::Production);
        copy.parmToProdId(prodTable.ProdId);
        copy.parmMethod(BOMCopyMethod::Replace);

        copy.parmFromItemId(prodTable.ItemId);
        copy.parmFromSiteId(prodTable.inventDim().InventSiteId);
        copy.parmFromConfigId(prodTable.inventDim().ConfigId);

        if (newBOMId)
        {
            copy.parmCopyBOM(true);
            copy.parmFromBOMId(newBOMId);
            copy.parmFromBOMDate(prodTable.DlvDate);
            copy.parmUpdateBOMId(true);
        }

        if (newRouteId)
        {
            copy.parmCopyRoute(true);
            copy.parmFromRouteId(newRouteId);
            copy.parmFromRouteDate(prodTable.DlvDate);
            copy.parmUpdateRouteId(true);
        }

        copy.parmCopyCoByOnly(false);

        return copy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newToProdBOM</Name>
				<Source><![CDATA[
    static BOMRouteCopyJob newToProdBOM(
        ProdBOM  prodBOM,
        Object  caller = null)
    {
        BOMRouteCopyJob copy = new BOMRouteCopyJob();

        copy.parmToType(BaseDataProd::Production);
        copy.parmCopyBOM(true);
        copy.parmCopyRoute(false);
        copy.parmCopyCoByOnly(false);

        if (prodBOM)
        {
            copy.parmToProdId(prodBOM.ProdId);
            copy.parmFromBOMId(prodBOM.bomId);
            copy.parmFromItemId(prodBOM.prodTable().ItemId);
            copy.parmFromSiteId(BOMTable::find(prodBOM.bomId).SiteId);
            copy.parmFromBOMDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }
        else
        {
            if (caller)
            {
                copy.parmToProdId(caller.prodId());
            }
        }

        return copy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newToProdRoute</Name>
				<Source><![CDATA[
    static BOMRouteCopyJob newToProdRoute(
        ProdRoute    prodRoute,
        Object      caller = null
        )
    {
        BOMRouteCopyJob copy = new BOMRouteCopyJob();
        RouteId         routeId;
        ProdTable       prodTable;

        copy.parmToType(BaseDataProd::Production);
        copy.parmCopyRoute(true);
        copy.parmCopyBOM(false);

        if (prodRoute)
        {
            copy.parmToProdId(prodRoute.ProdId);
            if (caller)
            {
                routeId = caller.routeId();
            }

            if (routeId)
            {
                copy.parmFromRouteId(routeId);
                copy.parmFromBOMDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                prodTable = prodRoute.prodTable();
                if (prodTable)
                {
                    copy.parmFromItemId(prodTable.ItemId);
                    copy.parmFromSiteId(prodTable.inventDim().InventSiteId);
                }
            }
        }
        else
        {
            if (caller)
            {
                copy.parmToProdId(caller.prodId());
            }
        }

        copy.parmCopyCoByOnly(false);

        return copy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newToRoute</Name>
				<Source><![CDATA[
    static BOMRouteCopyJob newToRoute(
        Route   route,
        Object  caller = null
        )
    {
        BOMRouteCopyJob copy = new BOMRouteCopyJob();

        copy.parmToType(BaseDataProd::BaseData);
        copy.parmCopyRoute(true);
        copy.parmCopyBOM(false);

        if (route)
        {
            copy.parmToRouteId(route.RouteId);
        }
        else
        {
            if (caller)
            {
                copy.parmToRouteId(caller.routeId());
            }
        }

        if (caller && caller.name() == formstr(RouteInventProd))
        {
            copy.parmFromItemId(caller.itemId());
            copy.parmFromConfigId(caller.findConfigId(false));
            copy.parmToItemId(copy.parmFromItemId());
            copy.parmToConfigId(caller.configId());
            copy.parmToSiteId(caller.siteId());
        }

        copy.parmCopyCoByOnly(false);

        return copy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfNewToFormulaCoBy</Name>
				<Source><![CDATA[
    static BOMRouteCopyJob pmfNewToFormulaCoBy(BOMVersion _bomVersion)
    {
        BOMRouteCopyJob     copy = new BOMRouteCopyJob();

        copy.parmToType(BaseDataProd::BaseData);
        copy.parmCopyBOM(true);
        copy.parmCopyRoute(false);
        copy.parmCopyCoByOnly(true);

        if (_bomVersion)
        {
            copy.parmToBOMId(_bomVersion.BOMId);
            copy.parmPmfToVerRecId(_bomVersion.RecId);
            copy.parmFromBOMId(_bomVersion.BOMId);
        }

        return copy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreatingNewBom</Name>
				<Source><![CDATA[
    boolean parmCreatingNewBom(boolean _creatingNewBom = creatingNewBom)
    {
        creatingNewBom = _creatingNewBom;

        return  _creatingNewBom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the title to use for the copy form.
    /// </summary>
    /// <returns>The caption to be used.</returns>
    public str formCaption()
    {
        if (copyBom == NoYes::Yes)
        {
            return "@SYS22489";
        }
        if (copyRoute == NoYes::Yes)
        {
            return "@SYS7193";
        }

        return BOMRouteCopyJob::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newToBOMTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BOMRouteCopyJob</c> class.
    /// </summary>
    /// <param name="_bomTable">
    ///    A Bill of Materials record.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BOMRouteCopyJob</c> class.
    /// </returns>
    static BOMRouteCopyJob newToBOMTable(BOMTable _bomTable)
    {
        BOMRouteCopyJob copy = new BOMRouteCopyJob();

        copy.parmToType(BaseDataProd::BaseData);
        copy.parmCopyBOM(true);
        copy.parmCopyRoute(false);
        copy.parmToBOMId(_bomTable.bomId);
        copy.parmCopyCoByOnly(false);
        copy.parmToSiteId(_bomTable.SiteId);

        return copy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>