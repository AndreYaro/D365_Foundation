<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTurnoverAndBalanceContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data contract <c>LedgerTurnoverAndBalanceContract</c> class for <c>LedgerTurnoverAndBalance</c> report.
/// </summary>
[
    SrsReportNameAttribute(ssrsReportStr(LedgerTurnoverAndBalance, Report)),
    SysOperationContractProcessingAttribute(classStr(LedgerTurnoverAndBalanceUIBuilder),
        SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly)
]
public class LedgerTurnoverAndBalanceContract implements SysOperationValidatable
{
    TransDate                   fromDate;
    TransDate                   toDate;
    boolean                     printClosingTransactions;
    boolean                     printZeroBalances;
    boolean                     printOpeningBalance;
    boolean                     separateBalance;
    CurrentOperationsTax        printPostingLayer;
    protected LedgerPostingLayerMultiSelection printPostingLayers;

    // string value of range
    SerializedDimensionRange    serializedDimensionRanges;

    // The following parameters are not shown to the user. They are set to a specific value in the Controller class
    str                         sysVersion;
    DirPartyName                userName;
    FreeText                    dimensionRange;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        Map oldmap;
        oldmap = new Map(Types::Int64, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionRange</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('DimensionRange')
    ]
    public FreeText parmDimensionRange(FreeText _dimensionRange = dimensionRange)
    {
        dimensionRange = _dimensionRange;
        return dimensionRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionRangeMap</Name>
				<Source><![CDATA[
    public Map parmDimensionRangeMap(Map _dimensionRangeMap = null)
    {
        XmlDocument xDoc;
        Map dimRangeMap;

        if (prmisDefault(_dimensionRangeMap))
        {
            if (serializedDimensionRanges)
            {
                xDoc = new XmlDocument();
                xDoc.loadXml(serializedDimensionRanges);

                dimRangeMap = Map::createFromXML(xDoc.root() as XmlNode);
            }
            else
            {
                dimRangeMap = new Map(Types::Int64, Types::String);
            }
        }
        else
        {
            if (_dimensionRangeMap == null)
            {
                _dimensionRangeMap = new Map(Types::Int64, Types::String);
            }
            else
            {
                this.parmSerializedDimensionRanges(_dimensionRangeMap.xml());
            }
            dimRangeMap = _dimensionRangeMap;
        }
        return dimRangeMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('FromDate')
    ]
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintClosingTransactions</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('PrintClosingTransactions')
    ]
    public boolean parmPrintClosingTransactions(boolean _printClosingTransactions = printClosingTransactions)
    {
        printClosingTransactions = _printClosingTransactions;
        return printClosingTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintOpeningBalance</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('PrintOpeningBalance')
    ]
    public boolean parmPrintOpeningBalance(boolean _printOpeningBalance = printOpeningBalance)
    {
        printOpeningBalance = _printOpeningBalance;
        return printOpeningBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintPostingLayer</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('PrintPostingLayer_old')
    ]
    public CurrentOperationsTax parmPrintPostingLayer(CurrentOperationsTax _printPostingLayer = printPostingLayer)
    {
        printPostingLayer = _printPostingLayer;
        return printPostingLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintPostingLayers</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('PrintPostingLayer')
    ]
    public LedgerPostingLayerMultiSelection parmPrintPostingLayers(LedgerPostingLayerMultiSelection _printPostingLayers = printPostingLayers)
    {
        printPostingLayers = _printPostingLayers;
        return printPostingLayers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintZeroBalances</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('PrintZeroBalances')
    ]
    public boolean parmPrintZeroBalances(boolean _printZeroBalances = printZeroBalances)
    {
        printZeroBalances = _printZeroBalances;
        return printZeroBalances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSeparateBalance</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('SeparateBalance')
    ]
    public boolean parmSeparateBalance(boolean _separateBalance = separateBalance)
    {
        separateBalance = _separateBalance;
        return separateBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSerializedDimensionRanges</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('SerializedDimensionRanges')
    ]
    public SerializedDimensionRange parmSerializedDimensionRanges(Description255 _serializedDimensionRanges = serializedDimensionRanges)
    {
        serializedDimensionRanges = _serializedDimensionRanges;
        return serializedDimensionRanges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSysVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>SysVersion</c> parameter of the data contract.
    /// </summary>
    /// <param name="_sysVersion">
    ///    The new value of the <c>SysVersion</c> parameter of the data contract; optional.
    /// </param>
    /// <returns>
    ///    The current value of the <c>SysVersion</c> parameter of the data contract.
    /// </returns>
    [
        DataMemberAttribute('SysVersion')
    ]
    public Description255 parmSysVersion(str _sysVersion = sysVersion)
    {
        sysVersion = _sysVersion;
        return sysVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('ToDate')
    ]
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserName</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('UserName')
    ]
    public DirPartyName parmUserName(DirPartyName _userName = userName)
    {
        userName = _userName;
        return userName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the SSRS report parameters.
    /// </summary>
    /// <returns>
    ///     true if all parameters are valid; otherwise false.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = true;

        if ((fromDate && toDate) && (fromDate > toDate))
        {
            isValid = checkFailed(strFmt("@SYS55013", date2StrUsr(fromDate, DateFlags::FormatAll), date2StrUsr(toDate, DateFlags::FormatAll)));
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>