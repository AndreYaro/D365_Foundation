<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkMileageHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Tms.Base.Data;
using Microsoft.Dynamics.Ax.Tms.Base.Utility;
using System.Xml.Linq;

/// <summary>
/// The <c>TMSFwkMileageHelper</c> class retrieves transportation mileage.
/// </summary>
class TMSFwkMileageHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSFwkMileageHelper construct()
    {
        return new TMSFwkMileageHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveMileage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves mileage for a shipping entity.
    /// </summary>
    /// <param name = "_transactionFacade">Payload for the transaction.</param>
    /// <param name = "_shippingEntity">Shipping entity.</param>
    /// <param name = "_mileageEngineCode">Mileage engine code.</param>
    /// <returns>Mileage result.</returns>
    public TMSFwkMileageHelperResponse retrieveMileage(
        TmsTransactionFacade    _transactionFacade,
        XElement                _shippingEntity,
        TMSMileageEngineCode    _mileageEngineCode)
    {
        TMSFwkIMileageEngine milageEngine = TMSFwkMileageEngineFactory::createMileageEngine(_mileageEngineCode);
        return milageEngine.retrieveMiles(_transactionFacade, _shippingEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveDefaultMileage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves mileage for a shipping entity, using default mileage engine or already pre-calculated mileage.
    /// </summary>
    /// <param name = "_transactionFacade">Payload for the transaction.</param>
    /// <param name = "_shippingEntity">Shipping entity.</param>
    /// <returns>Mileage result.</returns>
    public TMSFwkMileageHelperResponse retrieveDefaultMileage(TmsTransactionFacade _transactionFacade, XElement _shippingEntity)
    {
        TMSFwkMileageHelperResponse mileageHelperResponse = null;
        TMSMileageEngine defaultMileageEngine = TMSMileageEngine::findDefault();
        XElementList mileageElements = new XElementList(_shippingEntity.GetAddress(AddTypeXmlConstants::DropOff).Elements(ElementXmlConstants::Mileage));

        if (mileageElements.Count > 0)
        {
            XElement mileageElement;

            if (defaultMileageEngine.MileageEngineCode)
            {
                mileageElement = mileageElements.WhereMatchingStringElement(ElementXmlConstants::MileageEngineCode, defaultMileageEngine.MileageEngineCode).FirstOrDefault();
            }
            else
            {
                mileageElement = mileageElements.FirstOrDefault();
            }

            if (mileageElement)
            {
                mileageHelperResponse = this.createMileageHelperResponse(mileageElement);
            }
        }

        if (mileageHelperResponse == null)
        {
            if (defaultMileageEngine != null)
            {
                mileageHelperResponse = this.retrieveMileage(_transactionFacade, _shippingEntity, defaultMileageEngine.MileageEngineCode);
                this.addMileage(_shippingEntity.GetAddress(AddTypeXmlConstants::DropOff), mileageHelperResponse);
            }
            else
            {
                mileageHelperResponse = TMSFwkMileageHelperResponse::construct();
                mileageHelperResponse.parmErrorDto(TMSFwkErrorDtoBuilderGeneral::buildDefaultMileageEngine());
            }
        }

        return mileageHelperResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveMileageForCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Retrieves mileage for a shipping entity, using specific mileage engine.
    /// </summary>
    /// <param name = "_transactionFacade">Payload for the transaction.</param>
    /// <param name = "_shippingEntity">Shipping entity.</param>
    /// <param name = "_mileageEngineCode">Mileage engine code.</param>
    /// <returns>Mileage result.</returns>
    public TMSFwkMileageHelperResponse retrieveMileageForCode(
        TmsTransactionFacade    _transactionFacade,
        XElement                _shippingEntity,
        TMSMileageEngineCode    _mileageEngineCode)
    {
        TMSFwkMileageHelperResponse mileageHelperResponse = null;

        if (_mileageEngineCode)
        {
            XElementList mileageElements = new XElementList(_shippingEntity.GetAddress(AddTypeXmlConstants::DropOff).Elements(ElementXmlConstants::Mileage));

            if (mileageElements.Count > 0)
            {
                XElement mileageElement = mileageElements.WhereMatchingStringElement(ElementXmlConstants::MileageEngineCode, _mileageEngineCode).FirstOrDefault();

                if (mileageElement)
                {
                    mileageHelperResponse = this.createMileageHelperResponse(mileageElement);
                }
            }

            if (mileageHelperResponse == null)
            {
                mileageHelperResponse = this.retrieveMileage(_transactionFacade, _shippingEntity, _mileageEngineCode);
                this.addMileage(_shippingEntity.GetAddress(AddTypeXmlConstants::DropOff), mileageHelperResponse);
            }
        }

        return mileageHelperResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMileage</Name>
				<Source><![CDATA[
    private void addMileage(XElement _element, TMSFwkMileageHelperResponse mileageHelperResponse)
    {
        XElement mileageNode = new XElement(ElementXmlConstants::Mileage,
                new XElement(ElementXmlConstants::MileageEngineCode, mileageHelperResponse.parmMileageEngineCode()));

        if (mileageHelperResponse.parmErrorDto().Code == '')
        {
            mileageNode.Add(new XElement(ElementXmlConstants::Miles, mileageHelperResponse.parmMiles()));
        }
        else
        {
            mileageNode.AddError(mileageHelperResponse.parmErrorDto());
        }

        _element.Add(mileageNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMileageHelperResponse</Name>
				<Source><![CDATA[
    private TMSFwkMileageHelperResponse createMileageHelperResponse(XElement _mileageElement)
    {
        TMSFwkMileageHelperResponse mileageHelperResponse = TMSFwkMileageHelperResponse::construct();
        XElement errorElement = new XElementList(_mileageElement.Descendants(ElementXmlConstants::Error)).FirstOrDefault();
        ErrorDto errorDto = new ErrorDto();
        errorDto.Code = errorElement.RetrieveFirstInstanceDown(ElementXmlConstants::ErrorCode);
        errorDto.Description =  errorElement.RetrieveFirstInstanceDown(ElementXmlConstants::ErrorDescription);
        mileageHelperResponse.parmErrorDto(errorDto);
        mileageHelperResponse.parmMileageEngineCode(_mileageElement.GetString(ElementXmlConstants::MileageEngineCode));
        mileageHelperResponse.parmMiles(_mileageElement.GetDecimal(ElementXmlConstants::Miles));

        return mileageHelperResponse;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>