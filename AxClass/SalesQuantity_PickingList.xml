<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuantity_PickingList</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactory(DocumentStatus::PickingList)]
[DocumentStatusFactory(DocumentStatus::ProjectPickingList)]
public  class   SalesQuantity_PickingList extends SalesQuantity
{
    InventTransIdSum    inventTransIdSum;
    RecId               salesLineRecId;
    private boolean     shouldImprovePerformance = SalesTableCheckQuantityPerformanceImprovementFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateQtyUpdateInventDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for inventory.
    /// </summary>
    /// <param name = "_salesLine">The sales order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdateInventDelegate(SalesLine _salesLine, SalesUpdate _specQty, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldImprovePerformance</Name>
				<Source><![CDATA[
    protected boolean shouldImprovePerformance()
    {
        return shouldImprovePerformance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyInvent</Name>
				<Source><![CDATA[
    protected container calcQtyInvent(
        Common                   _salesLine,
        SalesUpdate              _specQty         = SalesUpdate::All,
        InventQty                _qty             = naReal(),
        boolean                  _creditRemaining = false,
        boolean                  _calcRemaining   = true,
        PackingSlipIdForUpdate_W _packingSlips    = '')
    {
        SalesLine            salesLine = _salesLine as SalesLine;
        InventQty            qtyUpdate;
        InventQty            numOfRemainOri;
        InventQty            qtyRemainNew;

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case SalesUpdate::DeliverNow:
                    qtyUpdate = salesLine.InventDeliverNow;
                    break;
            
                default:
                    EventHandlerResult result = EventHandlerResult::newSingleResponse();
                    this.calculateQtyUpdateInventDelegate(salesLine, _specQty, result);
                    if (result.hasResult())
                    {
                        qtyUpdate = result.result();
                    }
                    else if (salesLine.DeliveryType == TradeLineDlvType::DropShip)
                    {
                        qtyUpdate = salesLine.InventDeliverNow;
                    }
                    else if (salesLine.SalesType == SalesType::Subscription)
                    {
                        qtyUpdate = salesLine.RemainInventPhysical;
                    }
                    else
                    {
                        qtyUpdate = -this.getInventTransIdSum(salesLine).estimatedIssue();
                        if (PdsGlobal::pdsIsCWItem(salesLine.ItemId))
                        {
                            qtyUpdate = min(qtyUpdate,
                                        PdsCatchWeight::maxInventQty(
                                            salesLine.ItemId,
                                            -this.getInventTransIdSum(salesLine).pdsCWEstimatedIssue()));
                        }
                    }
                    break;
            }
        }

        if (_calcRemaining)
        {
            numOfRemainOri = salesLine.RemainInventPhysical;
            qtyRemainNew   = salesLine.RemainInventPhysical;
        }

        return [qtyUpdate,numOfRemainOri,qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyUpdateSalesDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for sales.
    /// </summary>
    /// <param name = "_salesLine">The sales order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdateSalesDelegate(SalesLine _salesLine, SalesUpdate _specQty, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtySales</Name>
				<Source><![CDATA[
    protected container calcQtySales(
        Common                     _salesLine,
        SalesUpdate                _specQty         = SalesUpdate::All,
        SalesQty                   _qty             = naReal(),
        boolean                    _creditRemaining = false,
        boolean                    _calcRemaining   = true,
        PackingSlipIdForUpdate_W   _packingSlips    = ''
        )
    {
        SalesLine           salesLine = _salesLine as SalesLine;
        SalesQty            qtyUpdate;
        SalesQty            numOfRemainOri;
        SalesQty            qtyRemainNew;

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case SalesUpdate::DeliverNow:
                    qtyUpdate = salesLine.SalesDeliverNow;
                    break;

                default:
                    EventHandlerResult result = EventHandlerResult::newSingleResponse();
                    this.calculateQtyUpdateSalesDelegate(salesLine, _specQty, result);
                    if (result.hasResult())
                    {
                        qtyUpdate = result.result();
                    }
                    else if (salesLine.DeliveryType == TradeLineDlvType::DropShip)
                    {
                        qtyUpdate = salesLine.SalesDeliverNow;
                    }
                    else if (salesLine.SalesType == SalesType::Subscription)
                    {
                        qtyUpdate = salesLine.RemainSalesPhysical;
                    }
                    else
                    {
                        if (!this.shouldImprovePerformance()
                            || salesLine.StockedProduct)
                        {
                            qtyUpdate = -this.getInventTransIdSum(salesLine).estimatedIssue();
                            if (PdsGlobal::pdsIsCWItem(salesLine.ItemId))
                            {
                                qtyUpdate = min(qtyUpdate,
                                            PdsCatchWeight::maxInventQty(
                                                salesLine.ItemId,
                                                -this.getInventTransIdSum(salesLine).pdsCWEstimatedIssue()));
                            }
                            qtyUpdate = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                                          salesLine.InventDimId,
                                                                                                          qtyUpdate,
                                                                                                          InventTableModule::find(salesLine.ItemId, ModuleInventPurchSales::Invent).UnitId,
                                                                                                          salesLine.SalesUnit,
                                                                                                          NoYes::Yes);
                        }
                    }
                    break;
            }
        }

        if (_calcRemaining)
        {
            numOfRemainOri = salesLine.RemainSalesPhysical;
            qtyRemainNew   = salesLine.RemainSalesPhysical;
        }

        return [qtyUpdate,numOfRemainOri,qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransIdSum</Name>
				<Source><![CDATA[
    public InventTransIdSum getInventTransIdSum(SalesLine _salesLine)
    {
        if (salesLineRecId != _salesLine.RecId)
        {
            inventTransIdSum    = InventTransIdSum::newTransIdNoChildType(InventTransOriginSalesLine::findInventTransOriginId(_salesLine.DataAreaId, _salesLine.InventTransId));
            salesLineRecId      = _salesLine.RecId;
        }

        return inventTransIdSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyUpdateInventCWDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for catch weight inventory.
    /// </summary>
    /// <param name = "_salesLine">The sales order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdateInventCWDelegate(SalesLine _salesLine, SalesUpdate _specQty, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantity when posting.
    /// </summary>
    /// <param name="_common">
    /// The transaction record.
    /// </param>
    /// <param name="_specQty">
    /// The quantity spec to process.
    /// </param>
    /// <param name="_qty">
    /// The catch weight quantity.
    /// </param>
    /// <param name="_creditRemaining">
    /// A Boolean value that indicates whether to credit the remaining quantity.
    /// </param>
    /// <param name="_calcRemaining">
    /// A Boolean value indicating whether to calculate the remaining quantities.
    /// </param>
    /// <returns>
    /// The container that contains catch weight quantities.
    /// </returns>
    /// <remarks>
    /// The container has the quantities in the following order: qty, remainBefore, remainAfter.
    /// </remarks>
    protected container pdsCWCalcQtyInvent(
        Common          _common,
        SalesUpdate     _specQty             = SalesUpdate::All,
        PdsCWInventQty  _qty                 = naReal(),
        boolean         _creditRemaining     = false,
        boolean         _calcRemaining       = true)
    {
        PdsCWInventQty      qtyUpdate;
        PdsCWInventQty      qtyRemainNew;
        PdsCWInventQty      numOfRemainOri;
        SalesLine           salesLine = _common;

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case SalesUpdate::DeliverNow:
                    qtyUpdate = salesLine.PdsCWInventDeliverNow;
                    break;

                default:
                    EventHandlerResult result = EventHandlerResult::newSingleResponse();
                    this.calculateQtyUpdateInventCWDelegate(salesLine, _specQty, result);
                    if (result.hasResult())
                    {
                        qtyUpdate = result.result();
                    }
                    else if (salesLine.DeliveryType == TradeLineDlvType::DropShip)
                    {
                        qtyUpdate = salesLine.PdsCWInventDeliverNow;
                    }
                    else if (salesLine.SalesType == SalesType::Subscription)
                    {
                        qtyUpdate = salesLine.PdsCWRemainInventPhysical;
                    }
                    else
                    {
                        qtyUpdate = -this.getInventTransIdSum(salesLine).pdsCWEstimatedIssue();
                    }
                    break;
            }
        }

        if (_calcRemaining)
        {
            numOfRemainOri  = salesLine.PdsCWRemainInventPhysical;
            qtyRemainNew    = salesLine.PdsCWRemainInventPhysical;
        }

        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>