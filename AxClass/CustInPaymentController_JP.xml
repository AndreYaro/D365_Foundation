<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInPaymentController_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustInPaymentController_JP</c> class is a controller class for the <c>CustInPayment_JP</c> report.
/// </summary>
class CustInPaymentController_JP extends SRSReportRunController implements BatchRetryable
{
    CustInPaym_JBA_JP   custInPaym_JBA_JP;
    CustInPaym_JBA_A_JP custInPaym_JBA_A_JP;
    CustInPaym_JBA_B_JP custInPaym_JBA_B_JP;
    CustInPaymTmp_JP    custInPaymTmp_JP;
    LedgerJournalTrans  ledgerJournalTrans;
    Amount              amount;
    CurrencyCode        currencyCode;
    BankAccount         bankAccountNum;
    DirPartyName        custNameKana;
    TransDate           transDate;
    LedgerJournalTransTxt txt;
    BankCode_JP         bankCode_JP;
    BranchCode_JP       branchCode;
    Name                custBankName;
    BranchName_JP       custBranchName;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertCustInPaymTmp_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the temporary table.
    /// </summary>
    public void insertCustInPaymTmp_JP( )
    {
        custInPaymTmp_JP.BankCode_JP    = bankCode_JP;
        custInPaymTmp_JP.BranchCode_JP  = branchCode;
        custInPaymTmp_JP.BankAccount    = bankAccountNum;
        custInPaymTmp_JP.TransDate      = transDate;
        custInPaymTmp_JP.CustNameKana   = custNameKana;
        custInPaymTmp_JP.Txt            = txt;
        custInPaymTmp_JP.Amount         = amount;
        custInPaymTmp_JP.CurrencyCode   = currencyCode;
        custInPaymTmp_JP.DocumentDate   = ledgerJournalTrans.DocumentDate;
        custInPaymTmp_JP.DocumentNum    = ledgerJournalTrans.DocumentNum;
        custInPaymTmp_JP.CustBankName   = custBankName;
        custInPaymTmp_JP.CustBranchName = custBranchName;

        custInPaymTmp_JP.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        Recid recid;

        SrsTmpTblMarshallerContract contract = this.parmReportContract().parmRdpContract() as SrsTmpTblMarshallerContract;

        //Set recid to the contract parameter.
        custInPaym_JBA_JP = this.parmArgs().caller();

        recid = this.processReport(custInPaym_JBA_JP);
        contract.parmTmpTableDataRecId(recid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class objects and processes the report business logic.
    /// </summary>
    /// <param name="_custInPaym_JBA_JP">
    /// The instance of <c>CustInPaym_JBA_JP</c> class.
    /// </param>
    /// <returns>
    /// Returns record id of the temporary table which was inserted into <c>SRSTmpDataStore</c> table.
    /// </returns>
    public Recid processReport(CustInPaym_JBA_JP _custInPaym_JBA_JP)
    {
        recId                   tmpTableDataRecId;
        Counter                 numOfRecord;
        SRSReportRunPermission  permission;

        if (_custInPaym_JBA_JP is CustInPaym_JBA_A_JP || _custInPaym_JBA_JP is CustInPaym_JBA_B_JP)
        {
            bankCode_JP     =   _custInPaym_JBA_JP.parmBankCode();
            bankAccountNum  =   _custInPaym_JBA_JP.parmBankAccount();
            branchCode      =   _custInPaym_JBA_JP.parmBranchCode();

            if (_custInPaym_JBA_JP.importedPayments() > 0)
            {
                for (numOfRecord = 1; numOfRecord <= _custInPaym_JBA_JP.importedPayments(); numOfRecord++)
                {
                    ledgerJournalTrans  =   _custInPaym_JBA_JP.ledgerJournalTrans(numOfRecord);
                    custBankName        =   _custInPaym_JBA_JP.custBankName(numOfRecord);
                    custBranchName      =   _custInPaym_JBA_JP.custBranchName(numOfRecord);
                    custNameKana        =   _custInPaym_JBA_JP.custNameKana(numOfRecord);
                    amount              =   ledgerJournalTrans.AmountCurCredit - ledgerJournalTrans.AmountCurDebit;
                    currencyCode        =   ledgerJournalTrans.CurrencyCode;
                    transDate           =   ledgerJournalTrans.TransDate;
                    txt                 =   ledgerJournalTrans.Txt;

                    this.insertCustInPaymTmp_JP();
                }

                permission  =   new SrsReportRunPermission();
                permission.assert();

                tmpTableDataRecId   =   SRSTmpTblMarshaller::SendTmpTblToDataProvider(custInPaymTmp_JP);
                delete_from custInPaymTmp_JP;
                CodeAccessPermission::revertAssert();
            }
        }

        return tmpTableDataRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides an entry point for the <c>CustInPaymentController_JP</c> class when it is called.
    /// </summary>
    /// <param name="_args">
    /// The arguments for the <c>CustInPaymentController_JP</c> class.
    /// </param>
    public static void main(Args _args)
    {
        CustInPaymentController_JP controller  = new CustInPaymentController_JP();

        controller.parmReportName(ssrsReportStr(CustInPayment_JP, Report));
        controller.parmArgs(_args);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>