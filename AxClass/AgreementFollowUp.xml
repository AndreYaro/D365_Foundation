<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementFollowUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AgreementFollowUp extends SrsReportRunController implements BatchRetryable
{
    ModuleSalesPurch            module;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the data source that is not used for selecting data.
    /// </summary>
    /// <param name="_enable">
    ///    A Boolean value that indicates whether the data source should be enabled.
    /// </param>
    protected void enableDataSources(boolean _enable = true)
    {
        Query query = this.getFirstQuery();
        QueryBuildDataSource qbds;

        if (module == ModuleSalesPurch::Sales)
        {
            qbds = query.dataSourceTable(tableNum(PurchAgreementHeader));
            qbds.enabled(_enable);
            qbds.findRange(fieldNum(PurchAgreementHeader, VendAccount)).status(_enable ? RangeStatus::Open : RangeStatus::Hidden);
            qbds.findRange(fieldNum(PurchAgreementHeader, PurchNumberSequence)).status(_enable ? RangeStatus::Open : RangeStatus::Hidden);
        }
        else
        {
            qbds = query.dataSourceTable(tableNum(SalesAgreementHeader));
            qbds.enabled(_enable);
            qbds.findRange(fieldNum(SalesAgreementHeader, CustAccount)).status(_enable ? RangeStatus::Open : RangeStatus::Hidden);
            qbds.findRange(fieldNum(SalesAgreementHeader, SalesNumberSequence)).status(_enable ? RangeStatus::Open : RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        container con;
        this.enableDataSources(); //enable all DSs before packing so the structure of the query will be the same as the original
        con  = super();
        this.enableDataSources(false); //disable the unwanted DS to proceed.
        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModule</Name>
				<Source><![CDATA[
        public ModuleSalesPurch parmModule(ModuleSalesPurch _module = module)
    {
        module = _module;

        return module;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares a query that will be used by the report.
    /// </summary>
    protected void prePromptModifyContract()
    {
        AgreementFollowUpRDPContract contract = this.parmReportContract().parmRdpContract() as AgreementFollowUpRDPContract;

        super();

        contract.parmModuleSalesPurch(module);
        this.enableDataSources(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container packedState)
    {
        boolean ret;

        ret = super(packedState);

        this.parmDialogCaption(this.parmModule() == ModuleSalesPurch::Purch ? "@SYS336051" : "@SYS336335");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>AgreementFollowUp</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>AgreementFollowUp</c> class.
    /// </returns>
    public static AgreementFollowUp construct()
    {
        return new AgreementFollowUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        AgreementFollowUp::newAgreementFollowUp(_args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAgreementFollowUp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an <c>AgreementFollowUp</c> object.
    /// </summary>
    /// <param name="_args">
    ///    The <c>Args</c> object to use.
    /// </param>
    /// <returns>
    ///    An <c>AgreementFollowUp</c> object.
    /// </returns>
    public static AgreementFollowUp newAgreementFollowUp(Args _args)
    {
        AgreementFollowUp agreementFollowUp = AgreementFollowUp::construct();

        agreementFollowUp.parmReportName(ssrsReportStr(AgreementFollowUp, Report));
        agreementFollowUp.parmArgs(_args);
        agreementFollowUp.parmModule(_args.parmEnum());

        return agreementFollowUp;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>