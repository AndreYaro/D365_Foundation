<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OxmlExcelReport_InventTurnoverReport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Class outputs Invent turnover report to excel
/// </summary>
class OxmlExcelReport_InventTurnoverReport_RU extends XMLExcelReport_RU implements BatchRetryable, ERIReportPostProcessingSupported
{
    boolean                             printRanges;
    InventTurnoverReportArgs_RU         reportArgs;
    QueryRun                            queryRun;

    InventSumDateFinancialDim_RU        reportLine;
    TmpInventTurnoverReportLineData_RU  reportLineData;
    TmpSysQuery                         tmpSysQuery;

    Counter                             lineNo;
    int                                 rowBody;

    Map                                 pageHeaderLabelsMap;

    #define.reportHeader('REPORTHEADER')
    #define.delimiter('DELIMITER')
    #define.rangesHeader('RANGESHEADER')
    #define.rangesBody('RANGESBODY')
    #define.pageHeader('PAGEHEADER')
    #define.reportBody('BODY')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates height of body section.
    /// </summary>
    /// <param name="_bookmark">
    ///     Name of the section.
    /// </param>
    /// <returns>
    ///     Height of the section.
    /// </returns>
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(15.00)

        return #minHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createColumns</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates report columns.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createColumns()
    {

        SysDictField        dictField;
        ListEnumerator      e = reportArgs.fields().getEnumerator();
        TableId             tableId;
        FieldId             fieldId;
        str                 label;
        real                labelWidth;
        int                 columnNum;

        int                 rowPageHeader;
        str                 worksheetName;

        OXMLWorksheet_RU    worksheet   = document.workbook().getWorksheet(1);
        ListEnumerator      fieldsLE    = reportArgs.fields().getEnumerator();
        int                 fieldsCount = reportArgs.fields().elements();

        [worksheetName, rowPageHeader]  = worksheet.workbook().definedNames().lookup([#pageHeader, #localSheetIdUndefined]);
        [worksheetName, rowBody]        = worksheet.workbook().definedNames().lookup([#reportBody, #localSheetIdUndefined]);

        worksheet.rowTemplate(rowPageHeader).multiplyCell(1, fieldsCount - 1);
        worksheet.rowTemplate(rowBody).multiplyCell(1, fieldsCount - 1);

        lineNo = rowPageHeader;

        document.workbook().getWorksheet(1).parmSaveColumnWidths(true);

        pageHeaderLabelsMap = new Map(Types::Integer, Types::String);

        while (e.moveNext())
        {
            columnNum++;
            [tableId, fieldId] = e.current();

            if (tableId              == tableNum(InventSumDateFinancialDim_RU) &&
                fieldExt2Id(fieldId) == fieldNum(InventSumDateFinancialDim_RU, Dimension))
            {
                label = DimensionAttribute::find(
                    DimensionHierarchyLevel::findByDimensionHierarchyAndLevel(
                        reportArgs.dimensionFocusId(), fieldExt2Idx(fieldId)).DimensionAttribute).localizedName();
            }
            else
            {
                dictField = new SysDictField(tableId, fieldId);
                label = dictField.label();
            }

            pageHeaderLabelsMap.insert(columnNum, label);
            labelWidth = this.getColumnLabelWidth(label);
            document.workbook().getWorksheet(1).columnWidth(columnNum, labelWidth);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Create ranges part of report for the specified query.
    /// </summary>
    /// <param name="_query">
    ///     <c>Query</c> which ranges to be processed.
    /// </param>
    private void createQueryRanges(Query _query)
    {
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        QueryFilter             sourceQueryFilter;
        DictTable               dictTable;
        SysDictField            sysDictField;
        LabelType               tableLabel;
        int                     dataSourceCnt;
        int                     tableOccurrence;
        int                     dataSourceNo;
        int                     i;

        dataSourceCnt = _query.dataSourceCount();

        for (dataSourceNo = 1;dataSourceNo <= dataSourceCnt;dataSourceNo++)
        {
            queryBuildDataSource = _query.dataSourceNo(dataSourceNo);
            if (queryBuildDataSource.enabled())
            {
                dictTable           = new DictTable(queryBuildDataSource.table());
                tableOccurrence     = SysQuery::tableOccurrence(_query, dictTable.id(), dataSourceNo);
                tableLabel          = dictTable.label() + SysQuery::tableOccurrenceText(tableOccurrence);

                for (i = 1;i <= queryBuildDataSource.rangeCount();i++)
                {
                    queryBuildRange      = queryBuildDataSource.range(i);

                    if (queryBuildRange.value() &&
                        queryBuildRange.status() != RangeStatus::Hidden)
                    {
                        sysDictField    = new SysDictField(dictTable.id(), queryBuildRange.field());
                        if (sysDictField)
                        {
                            tmpSysQuery.clear();
                            tmpSysQuery.DataSourceNo = queryBuildDataSource.uniqueId();
                            tmpSysQuery.Table_Id     = dictTable.id();
                            tmpSysQuery.Tablelabel   = tableLabel;
                            tmpSysQuery.Field_Id     = sysDictField.id();
                            tmpSysQuery.FieldLabel   = sysDictField.label();
                            tmpSysQuery.RangeValue   = queryBuildRange.value();
                            tmpSysQuery.insert();
                        }
                    }
                }
            }
        }

        for (i = 1; i <= _query.queryFilterCount(); i++)
        {
            sourceQueryFilter = _query.queryFilter(i);

            if (sourceQueryFilter.value() &&
                sourceQueryFilter.status() != RangeStatus::Hidden)
            {
                dictTable    = new DictTable(sourceQueryFilter.dataSource().table());
                tableLabel   = dictTable.label();
                sysDictField = new SysDictField(sourceQueryFilter.dataSource().table(), fieldName2id(sourceQueryFilter.dataSource().table(), sourceQueryFilter.field()));

                if (sysDictField)
                {
                    tmpSysQuery.clear();
                    tmpSysQuery.DataSourceNo = sourceQueryFilter.dataSource().uniqueId();
                    tmpSysQuery.Table_Id     = dictTable.id();
                    tmpSysQuery.Tablelabel   = tableLabel;
                    tmpSysQuery.Field_Id     = sysDictField.id();
                    tmpSysQuery.FieldLabel   = sysDictField.label();
                    tmpSysQuery.RangeValue   = sourceQueryFilter.value();
                    tmpSysQuery.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes report.
    /// </summary>
    protected void createReport()
    {
        this.initSectionMap();

        this.setCurrentWorksheetNum(1, reportArgs.fields().elements());

        this.execute(#ReportHeader);
        this.execute(#delimiter);

        if (printRanges)
        {
            this.execute(#rangesHeader);

            this.createQueryRanges(reportArgs.queryFromDialog());
            this.createQueryRanges(reportArgs.query());

            while select tmpSysQuery
                index FieldLabelIdx
            {
                this.execute(#rangesBody);
            }

            this.execute(#delimiter);
        }

        this.createColumns();
        this.execute(#pageHeader);

        queryRun = new QueryRun(reportArgs.query());

        queryRun.setRecord(reportArgs.reportLine());
        queryRun.setRecord(reportArgs.reportLineData());

        while (queryRun.next())
        {
            lineNo++;

            reportLine = queryRun.get(tableNum(InventSumDateFinancialDim_RU));
            reportLineData = queryRun.get(tableNum(TmpInventTurnoverReportLineData_RU));

            this.execute(#reportBody);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves name of the new report file.
    /// </summary>
    /// <returns>
    ///     Name of the new report file.
    /// </returns>
    protected Filename fileName()
    {
        #define.fileName('InventTurnover')

        return #fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves postfix of a new report file.
    /// </summary>
    /// <returns>
    ///     Postfix of a new report file; always empty string.
    /// </returns>
    protected Filename fileNamePostfix()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        QueryBuildRange reportDateRange = reportArgs.queryFromDialog().dataSourceTable(tableNum(InventSumDateFinancialTrans_RU)).findRange(fieldNum(InventSumDateFinancialTrans_RU, TransDate));
        str rangeValueStrFormatted = strReplace(strRem(reportDateRange.value(), '\/"'), ' .. ', '_');

        return this.fileName() + '_' + rangeValueStrFormatted + '.extension';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'InventTurnover';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills body section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillBody()
    {
        ListEnumerator      e = reportArgs.fields().getEnumerator();
        TableId             tableId;
        FieldId             fieldId;
        int                 columnNum;

        str value2str(anytype _value)
        {
            str strValue;

            switch (typeOf(_value))
            {
                case Types::Enum:
                    strValue = enum2str(_value);
                    break;
                case Types::Real:
                    strValue = num2str(_value, 1, 2, 2, 0);
                    break;
                case Types::String:
                    strValue = _value;
                    break;
                default:
                    throw error("@SYS40221");
            }

            return strValue;
        }

        while (e.moveNext())
        {
            columnNum++;
            [tableId, fieldId] = e.current();

            switch (tableId)
            {
                case tableNum(InventSumDateFinancialDim_RU):
                    document.insertValue(ComExcelDocument_RU::numToNameCell(columnNum, rowBody), value2str(reportLine.(fieldId)));
                    break;
                case tableNum( TmpInventTurnoverReportLineData_RU):
                    document.insertValue(ComExcelDocument_RU::numToNameCell(columnNum, rowBody), reportLineData.(fieldId));
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills report sections with data depending on section name.
    /// </summary>
    /// <param name="_bookmark">
    ///     Name of the section.
    /// </param>
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #reportHeader:
                this.fillReportHeader();
                break;
            case #rangesHeader:
                this.fillRangesHeader();
                break;
            case #rangesBody:
                this.fillRangesBody();
                break;
            case #pageHeader:
                this.fillPageHeader();
                break;
            case #reportBody:
                this.fillBody();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills page header section with column labels.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPageHeader()
    {
        ListEnumerator      e = reportArgs.fields().getEnumerator();
        TableId             tableId;
        FieldId             fieldId;
        str                 label;
        int                 columnNum;

        while (e.moveNext())
        {
            columnNum++;
            [tableId, fieldId] = e.current();

            if (pageHeaderLabelsMap.exists(columnNum))
            {
                label = pageHeaderLabelsMap.lookup(columnNum);
            }

            document.insertValue(ComExcelDocument_RU::numToNameCell(columnNum, lineNo), label);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRangesBody</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills ranges body section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillRangesBody()
    {
        #define.RangeTableLabel('RangeTable')
        #define.RangeFieldLabel('RangeField')
        #define.RangeValueLabel('RangeValue')

        this.insertValueToSection(#RangeTableLabel, tmpSysQuery.Tablelabel);
        this.insertValueToSection(#RangeFieldLabel, tmpSysQuery.FieldLabel);
        this.insertValueToSection(#RangeValueLabel, tmpSysQuery.RangeValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRangesHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills ranges header section with labels.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillRangesHeader()
    {
        #define.RangesTitle('RangesTitle')
        #define.RangeTableLabel('RangeTableLabel')
        #define.RangeFieldLabel('RangeFieldLabel')
        #define.RangeValueLabel('RangeValueLabel')

        this.insertValueToSection(#RangesTitle, "@SYS74558");

        this.insertValueToSection(#RangeTableLabel, "@SYS19874");
        this.insertValueToSection(#RangeFieldLabel, "@SYS8498");
        this.insertValueToSection(#RangeValueLabel, "@SYS24771");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills report header section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillReportHeader()
    {
        #define.ReportTitle('ReportTitle')

        this.insertValueToSection(#ReportTitle, "@GLS102102");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getColumnLabelWidth</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines column width by its label.
    /// </summary>
    /// <param name="_label">
    ///     Column label.
    /// </param>
    /// <returns>
    ///     Column width (points).
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected real getColumnLabelWidth(str _label)
    {
        #define.bodyCellLabel('BodyCellLabel')
        System.Drawing.Size                     size = new System.Drawing.Size(1000, 20);
        System.Drawing.Font                     font = document.workbook().getNamedRangeFont(#bodyCellLabel);
        System.Windows.Forms.Control            control = new System.Windows.Forms.Control();
        System.Drawing.Graphics                 graphics = control.CreateGraphics();

        System.Windows.Forms.TextFormatFlags    flags = System.Windows.Forms.TextFormatFlags::TextBoxControl;

        real                                    width,
                                                pixels2chars,
                                                dpi;

        dpi = graphics.get_DpiX();

        pixels2chars = 13/dpi;

        size = System.Windows.Forms.TextRenderer::MeasureText(_label, font, size, flags);
        width = size.get_Width();

        //converting to chars
        width = width * pixels2chars;

        return width + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Method initializes map which holds section data.
    /// </summary>
    protected void initSectionMap()
    {
        this.addSection(#reportHeader);
        this.addSection(#delimiter);
        this.addSection(#rangesHeader);
        this.addSection(#rangesBody);
        this.addSection(#pageHeader);
        this.addSection(#reportBody);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintRanges</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmPrintRanges(boolean _printRanges = printRanges)
    {
        printRanges = _printRanges;

        return printRanges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportArgs</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventTurnoverReportArgs_RU parmReportArgs(InventTurnoverReportArgs_RU _reportArgs = reportArgs)
    {
        reportArgs = _reportArgs;

        return reportArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves file name of the report template.
    /// </summary>
    /// <returns>
    ///     Report template file name.
    /// </returns>
    protected Filename templateName()
    {
        return resourceStr(InventTurnoverReport_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates number of cells to be filled with data.
    /// </summary>
    /// <returns>
    ///     Number of cells to be filled with data.
    /// </returns>
    protected Counter totalCells()
    {
        InventSumDateFinancialDim_RU reportLineLocal;

        reportLineLocal.setTmp();
        reportLineLocal.setTmpData(reportArgs.reportLine());

        select count(RecId) from reportLineLocal;

        return any2int(reportLineLocal.RecId) * widthCols;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>OXMLExcelReport_InventTurnoverReport_RU</c> class.
    /// </summary>
    /// <returns>
    ///     A new instance of the <c>OXMLExcelReport_InventTurnoverReport_RU</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static OXMLExcelReport_InventTurnoverReport_RU construct()
    {
        return new OXMLExcelReport_InventTurnoverReport_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>