<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsReservationHierarchyListBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>WHSReservationHierarchyListBuilder</c> class creates a list representation of a reservation hierarchy
///     fetched from the database.
/// </summary>
class WhsReservationHierarchyListBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addHierarchyElementToList</Name>
				<Source><![CDATA[
        private void addHierarchyElementToList(
        WHSReservationHierarchyElement      _element,
        WHSReservationHierarchySortOrder    _sortOrder,
        List                                _list)
    {
        WHSReservationHierarchyElementData elementData =
            WHSReservationHierarchyElementData::newFromParameters(
                _element.DimensionFieldId,
                _element.ReservationHierarchyLevel);

        if (_sortOrder == WHSReservationHierarchySortOrder::BottomUp)
        {
            _list.addStart(elementData);
        }
        else
        {
            _list.addEnd(elementData);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFullHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a full hierarchy list for the given item ID and sort order.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    ///     <c>RecId</c> of the <c>WHSReservationHierarchy</c> to look for.
    /// </param>
    /// <param name="_sortOrder">
    ///     The order in which the hierarchy should be sorted.
    /// </param>
    /// <returns>
    ///     List representing the requested hierarchy or an empty list.
    /// </returns>
    public List buildFullHierarchy(
        WHSReservationHierarchyRecId     _whsReservationHierarchyRecId,
        WHSReservationHierarchySortOrder _sortOrder)
    {
        List                            result = new List(Types::Class);
        WHSReservationHierarchyElement  buffer = this.selectHierarchyBuffer(_whsReservationHierarchyRecId);

        while (buffer)
        {
            this.addHierarchyElementToList(buffer, _sortOrder, result);
            next buffer;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPartialHierarchyAbove</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a partial hierarchy list above the cut-off dimension.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    ///     <c>RecId</c> of the <c>WHSReservationHierarchy</c> to look for.
    /// </param>
    /// <param name="_sortOrder">
    ///     The order in which the hierarchy should be sorted.
    /// </param>
    /// <param name="_cutOffDimFieldId">
    ///     <c>FieldId</c> of the cut-off dimension.
    /// </param>
    /// <param name="_inclusive">
    ///     true if the cut-off item should be included in the list; false otherwise.
    /// </param>
    /// <returns>
    ///     List representing the requested hierarchy or an empty list.
    /// </returns>
    public List buildPartialHierarchyAbove(
        WHSReservationHierarchyRecId     _whsReservationHierarchyRecId,
        WHSReservationHierarchySortOrder _sortOrder,
        FieldId                          _cutOffDimFieldId,
        boolean                          _inclusive)
    {
        List                            result = new List(Types::Class);
        WHSReservationHierarchyElement  buffer = this.selectHierarchyBuffer(_whsReservationHierarchyRecId);

        // Add fields above the cut-off field
        while (buffer && buffer.DimensionFieldId != _cutOffDimFieldId)
        {
            this.addHierarchyElementToList(buffer, _sortOrder, result);
            next buffer;
        }

        // Process the cut-off field
        if (buffer && _inclusive)
        {
            this.addHierarchyElementToList(buffer, _sortOrder, result);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPartialHierarchyBelow</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a partial hierarchy list below the cut-off dimension.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    ///     <c>RecId</c> of the <c>WHSReservationHierarchy</c> to look for.
    /// </param>
    /// <param name="_sortOrder">
    ///     The order in which the hierarchy should be sorted.
    /// </param>
    /// <param name="_cutOffDimFieldId">
    ///     <c>FieldId</c> of the cut-off dimension.
    /// </param>
    /// <param name="_inclusive">
    ///     true if the cut-off item should be included in the list; false otherwise.
    /// </param>
    /// <returns>
    ///     List representing the requested hierarchy or an empty list.
    /// </returns>
    public List buildPartialHierarchyBelow(
        WHSReservationHierarchyRecId     _whsReservationHierarchyRecId,
        WHSReservationHierarchySortOrder _sortOrder,
        FieldId                          _cutOffDimFieldId,
        boolean                          _inclusive)
    {
        List                            result = new List(Types::Class);
        WHSReservationHierarchyElement  buffer = this.selectHierarchyBuffer(_whsReservationHierarchyRecId);

        // Disregard hierarchy levels above cut-off field
        while (buffer && buffer.DimensionFieldId != _cutOffDimFieldId)
        {
            next buffer;
        }

        // Process the cut-off field
        if (buffer)
        {
            if (_inclusive)
            {
                this.addHierarchyElementToList(buffer, _sortOrder, result);
            }

            next buffer;
        }

        // Add fields below the cut-off field
        while (buffer)
        {
            this.addHierarchyElementToList(buffer, _sortOrder, result);
            next buffer;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectHierarchyBuffer</Name>
				<Source><![CDATA[
        private WHSReservationHierarchyElement selectHierarchyBuffer(WHSReservationHierarchyRecId _whsReservationHierarchyRecId)
    {
        WHSReservationHierarchyElement  buffer;
        WHSReservationHierarchy         whsReservationHierarchy;

        select buffer
            order by buffer.ReservationHierarchyLevel asc
            exists join whsReservationHierarchy
                where whsReservationHierarchy.RecId     == buffer.ReservationHierarchy
                      && whsReservationHierarchy.RecId  == _whsReservationHierarchyRecId;

        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static WHSReservationHierarchyListBuilder construct()
    {
        return new WHSReservationHierarchyListBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>