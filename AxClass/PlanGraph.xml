<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlanGraph</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PlanGraph</c> class builds a graph of the plan.
/// </summary>
/// <remarks>
///    Every end activity in a plan represents a root node in a graph.
/// </remarks>
public class PlanGraph
{
    #define.maxLevel(300)

    Plan                        plan;
    PlanReference               planReference;

    PlanPlanActivity            planPlanActivity;
    PlanActivity                planActivity;
    PlanActivity                relatedPlanActivity;
    PlanActivityRelationship    planActivityRelationship;

    boolean                     silent;
    boolean                     isValid;
    boolean                     validityChecked;

    Map                         mapPlanReferences;          //map recId -> record
    Map                         mapPlans;                   //map planReference recId -> record
    Map                         mapPlanActivities;          //map recId -> record
    Map                         mapChildren;                //map recId parent -> set of relationship records
    Map                         mapParents;                 //map recId child  -> set of relationship records

    Set                         setEndActivities;           //end activities are roots
    Set                         setStartActivities;         //start activities are leaves
    Set                         setCrossActivities;         //cross activities are activities with at least one parent in a different plan

    Set                         setErrorNodes;              //errors
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the graph.
    /// </summary>
    /// <returns>
    /// true if the build is successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The graph includes the plan it was called for and all plans with which it has direct or indirect
    /// relationships.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean build()
    {
        boolean result;

        this.init();
        this.readPlanData(plan);
        this.merge();
        this.initializeRootAndCross();
        this.initializeLeaves();
        result = this.validate();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>child</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the record ID of the child from the specified table buffer.
    /// </summary>
    /// <param name="_planActivityRelationship">
    ///    A <c>PlanActivityRelationship</c> table.
    /// </param>
    /// <returns>
    ///    A record ID from the specified table buffer that represents the child.
    /// </returns>
    /// <remarks>
    ///    The independent activity is the child because the end activities are the root.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RefRecId child(PlanActivityRelationship _planActivityRelationship)
    {
        return _planActivityRelationship.IndependentPlanActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class variables.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void init()
    {
        mapPlanReferences   = new Map(Types::Int64,Types::Record);
        mapPlans            = new Map(Types::Int64,Types::Record);
        mapPlanActivities   = new Map(Types::Int64,Types::Record);
        mapChildren         = new Map(Types::Int64,Types::Class);
        mapParents          = new Map(Types::Int64,Types::Class);
        setEndActivities    = new Set(Types::Int64);
        setStartActivities  = new Set(Types::Int64);
        setCrossActivities  = new Set(Types::Int64);
        setErrorNodes       = new Set(Types::Int64);

        planReference     = plan.planReference();

        //add current plan to map
        mapPlanReferences.insert(planReference.RecId,planReference);
        mapPlans.insert(planReference.RecId,plan);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBuffers</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the table buffers.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initBuffers()
    {
        planPlanActivity.clear();
        planActivity.clear();
        relatedPlanActivity.clear();
        planActivityRelationship.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLeaves</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>setStartActivities</c> set that represents the leaves of the graph.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initializeLeaves()
    {
        MapEnumerator   me;
        Set             setChildren;

        me = mapChildren.getEnumerator();
        while (me.moveNext())
        {
            setChildren = me.currentValue();
            if (   !setChildren
                || !setChildren.elements())
            {
                setStartActivities.add(me.currentKey());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeRootAndCross</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>setEndActivities</c> and <c>setCrossActivities</c> sets.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initializeRootAndCross()
    {
        MapEnumerator               me;
        Set                         setParents;
        SetEnumerator               se;
        PlanActivity                childPlanActivity;
        PlanActivity                parentPlanActivity;
        PlanActivityRelationship    planActivityRelationshipLocal;
        boolean                     foundCrossParent;

        me = mapParents.getEnumerator();
        while (me.moveNext())
        {
            setParents = me.currentValue();
            if (   !setParents
                || !setParents.elements())
            {
                setEndActivities.add(me.currentKey());
            }
            else
            {
                if (setParents)
                {
                    childPlanActivity = mapPlanActivities.lookup(me.currentKey());
                    foundCrossParent  = false;

                    se = setParents.getEnumerator();
                    while (    se.moveNext()
                           && !foundCrossParent)
                    {
                        planActivityRelationshipLocal = se.current();
                        parentPlanActivity            = mapPlanActivities.lookup(this.parent(planActivityRelationshipLocal));
                        if (childPlanActivity.PlanReference != parentPlanActivity.PlanReference)
                        {
                            setCrossActivities.add(childPlanActivity.RecId);
                            foundCrossParent = true;
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the plan is valid.
    /// </summary>
    /// <param name="_forceCheck">
    ///    A Boolean value that indicates whether a check must be executed even if it has been executed
    ///    previously; optional.
    /// </param>
    /// <returns>
    ///    true if the plan is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A plan is valid if it does not have any loops.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isValid(boolean _forceCheck = false)
    {
        if (   !validityChecked
            || _forceCheck)
        {
            isValid         = this.build();
            validityChecked = true;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>merge</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Merges the other plans into the current structure.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void merge()
    {
        Set             setMergedPlanReferences;
        MapEnumerator   me;
        RefRecId        refRecId;
        Plan            planToMerge;
        int             planReferences = 0;

        setMergedPlanReferences = new Set(Types::Int64);
        setMergedPlanReferences.add(planReference.RecId);   //add self

        while (setMergedPlanReferences.elements() < mapPlanReferences.elements())
        {
            me = mapPlanReferences.getEnumerator();
            planReferences = mapPlanReferences.elements();

            while (me.moveNext())
            {
                refRecId = me.currentKey();
                if (!setMergedPlanReferences.in(refRecId))
                {
                    setMergedPlanReferences.add(refRecId);
                    planToMerge = mapPlans.lookup(refRecId);
                    if (planToMerge)
                    {
                        this.readPlanData(planToMerge);     //merge

                        if (planReferences != mapPlanReferences.elements())
                        {
                            // downstream production flow/s added => reset, do not re-process already merged flows
                            planReferences = mapPlanReferences.elements();
                            me.reset();
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustIncludePlanActivityRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current relation must be included in the graph.
    /// </summary>
    /// <returns>
    /// true if the relation must be included; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustIncludePlanActivityRelationship()
    {
        Plan        relatedPlan;
        boolean     result = relatedPlanActivity.RecId != 0;

        if (result)
        {
            // the activity must be part of the related plan
            relatedPlan = this.relatedPlan(relatedPlanActivity.PlanReference);
            result      = PlanPlanActivity::findPlanActivity(relatedPlan.RecId,relatedPlanActivity.RecId).RecId != 0;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a record ID from the specified table buffer that represents the parent.
    /// </summary>
    /// <param name="_planActivityRelationship">
    ///    A <c>PlanActivityRelationship</c> table buffer.
    /// </param>
    /// <returns>
    ///    A record ID from the specified table buffer that represents the parent.
    /// </returns>
    /// <remarks>
    ///    The dependent activity is the parent because the end activities are the root.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RefRecId parent(PlanActivityRelationship _planActivityRelationship)
    {
        return _planActivityRelationship.DependentPlanActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlan</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Plan parmPlan(Plan _plan = plan)
    {
        plan = _plan;
        return plan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSilent</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean parmSilent(boolean _silent = silent)
    {
        silent = _silent;
        return silent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readPlanData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads the plan structure by inspecting the activities and relationships.
    /// </summary>
    /// <param name="_plan">
    ///    A <c>Plan</c> record to read.
    /// </param>
    /// <remarks>
    ///    All records will be represented in the <c>mapChildren</c> and <c>mapParents</c> map even though
    ///    they may not have children or parents.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void readPlanData(Plan _plan)
    {
        this.initBuffers();

        //all activities, including those that may not have any relations
        this.selectPlanPlanActivity(_plan);
        while (planPlanActivity)
        {
            this.updatePlanActivities(true);
            next planPlanActivity;
        }

        //all relations
        this.selectPlanActivityRelationship(_plan);
        while (planPlanActivity)
        {
            if (this.mustIncludePlanActivityRelationship())
            {
                //map of all activities
                this.updatePlanActivities();

                //children
                this.updateChildren();

                //parents
                this.updateParents();

                //plan references
                this.updatePlanReference();
            }

            next planPlanActivity;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedPlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a <c>Plan</c> record for the specified plan reference.
    /// </summary>
    /// <param name="_planReferenceRecId">
    ///    The record ID of a <c>PlanReference</c> record.
    /// </param>
    /// <returns>
    ///    The first plan that falls into the validity period of the original plan, prioritized by status.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Plan relatedPlan(RefRecId _planReferenceRecId)
    {
        Plan    relatedPlan;

        if (_planReferenceRecId)
        {
            if (   mapPlans
                && mapPlans.exists(_planReferenceRecId))
            {
                relatedPlan = mapPlans.lookup(_planReferenceRecId);
            }
            else
            {
                select firstonly relatedPlan
                    order by Status desc, ValidFrom asc
                    where relatedPlan.PlanReference == _planReferenceRecId
                       && ((relatedPlan.ValidFrom   <= plan.ValidFrom
                       &&   (relatedPlan.ValidTo    >= plan.ValidFrom
                       ||    !relatedPlan.ValidTo
                       ||    !plan.ValidTo))
                       ||  (relatedPlan.ValidFrom   >= plan.ValidFrom
                       &&   (relatedPlan.ValidFrom  <= plan.ValidTo
                       ||    !plan.ValidTo)));
            }
        }

        return relatedPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPlanActivityRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects a <c>PlanActivityRelationship</c> record and the related records for the specified plan.
    /// </summary>
    /// <param name="_plan">
    ///    A <c>Plan</c> record.
    /// </param>
    /// <remarks>
    ///    Use the <c>next</c> keyword to iterate over records.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void selectPlanActivityRelationship(Plan _plan)
    {
        select TableId from planPlanActivity
            where planPlanActivity.Plan == _plan.RecId
            join planActivity
                where planActivity.RecId             == planPlanActivity.PlanActivity
                  &&  (planActivity.PlanActivityType == PlanActivityType::Process
                  ||   planActivity.PlanActivityType == PlanActivityType::Transfer)
            join RecId, IndependentPlanActivity, DependentPlanActivity from planActivityRelationship
                where planActivityRelationship.IndependentPlanActivity  == planActivity.RecId
                   || planActivityRelationship.DependentPlanActivity    == planActivity.RecId
            join relatedPlanActivity
                where ((relatedPlanActivity.RecId                         == planActivityRelationship.IndependentPlanActivity
                   &&   (planActivityRelationship.IndependentPlanActivity != planActivity.RecId
                   ||    planActivityRelationship.IndependentPlanActivity == planActivityRelationship.DependentPlanActivity))
                   ||  (relatedPlanActivity.RecId                         == planActivityRelationship.DependentPlanActivity
                   &&   (planActivityRelationship.DependentPlanActivity   != planActivity.RecId
                   ||    planActivityRelationship.IndependentPlanActivity == planActivityRelationship.DependentPlanActivity)))
                   && (relatedPlanActivity.PlanActivityType               == PlanActivityType::Process
                   ||  relatedPlanActivity.PlanActivityType               == PlanActivityType::Transfer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPlanPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects the <c>PlanPlanActivity</c> records for the specified plan.
    /// </summary>
    /// <param name="_plan">
    ///    A <c>Plan</c> record.
    /// </param>
    /// <remarks>
    ///    This method iterates over the records by using the <c>next</c> keyword.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void selectPlanPlanActivity(Plan _plan)
    {
        select TableId from planPlanActivity
            where planPlanActivity.Plan == _plan.RecId
            join planActivity
                where planActivity.RecId == planPlanActivity.PlanActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setErrorNodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the set of <c>PlanActivity</c> record IDs that did not pass validation.
    /// </summary>
    /// <returns>
    ///    A set of <c>PlanActivity</c> record IDs that did not pass validation.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Set setErrorNodes()
    {
        return setErrorNodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChildren</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the map object for child activities.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateChildren()
    {
        Set setChildren;

        if (mapChildren.exists(planActivityRelationship.DependentPlanActivity))
        {
            setChildren = mapChildren.lookup(planActivityRelationship.DependentPlanActivity);
        }
        setChildren = setChildren ? setChildren : new Set(Types::Record);

        setChildren.add(planActivityRelationship);
        mapChildren.insert(planActivityRelationship.DependentPlanActivity,setChildren);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParents</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the map object for parent activities.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateParents()
    {
        Set setParents;

        if (mapParents.exists(planActivityRelationship.IndependentPlanActivity))
        {
            setParents = mapParents.lookup(planActivityRelationship.IndependentPlanActivity);
        }
        setParents = setParents ? setParents : new Set(Types::Record);

        setParents.add(planActivityRelationship);
        mapParents.insert(planActivityRelationship.IndependentPlanActivity,setParents);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePlanActivities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the map object for plan activities.
    /// </summary>
    /// <param name="_initParentsAndChildren">
    ///    A Boolean value that indicates whether the parent and child maps must be initialized.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updatePlanActivities(boolean _initParentsAndChildren = false)
    {
        if (planActivity)
        {
            mapPlanActivities.insert(planActivity.RecId,planActivity);

            if (   _initParentsAndChildren
                && !mapParents.exists(planActivity.RecId))
            {
                mapParents.insert(planActivity.RecId,null);
            }
            if (   _initParentsAndChildren
                && !mapChildren.exists(planActivity.RecId))
            {
                mapChildren.insert(planActivity.RecId,null);
            }
        }

        if (relatedPlanActivity)
        {
            mapPlanActivities.insert(relatedPlanActivity.RecId,relatedPlanActivity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePlanReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the map object for plan references.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updatePlanReference()
    {
        if (!mapPlanReferences.exists(planActivity.PlanReference))
        {
            mapPlanReferences.insert(planActivity.PlanReference,planActivity.planReference());
            mapPlans.insert(planActivity.PlanReference,this.relatedPlan(planActivity.PlanReference));
        }
        if (   planActivity.PlanReference != relatedPlanActivity.PlanReference
            && !mapPlanReferences.exists(relatedPlanActivity.PlanReference))
        {
            mapPlanReferences.insert(relatedPlanActivity.PlanReference,relatedPlanActivity.planReference());
            mapPlans.insert(relatedPlanActivity.PlanReference,this.relatedPlan(relatedPlanActivity.PlanReference));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the graph.
    /// </summary>
    /// <returns>
    ///    true if the validation succeeds; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validate()
    {
        SetEnumerator   se;
        boolean         result = true;

        se = setEndActivities.getEnumerator();

        while (se.moveNext())
        {
            result = this.validateNode(se.current(),new Set(Types::Int64)) && result;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a node in the graph.
    /// </summary>
    /// <param name="_nodeRefRecId">
    ///    The record ID of a <c>PlanActivity</c> record that represents the node to validate.
    /// </param>
    /// <param name="_usedNodes">
    ///    A set that contains all activities that are already used in the traversal.
    /// </param>
    /// <returns>
    ///    true if the validation succeeds; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The validation checks for loops. This method calls itself recursively.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The validation has been called incorrrectly.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validateNode(
        RefRecId _nodeRefRecId,
        Set      _usedNodes)
    {
        PlanActivity    nodePlanActivity;
        Set             setChildren;
        SetEnumerator   se;
        boolean         result = true;

        if (!_nodeRefRecId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        //check current node
        if (   _usedNodes
            && _usedNodes.in(_nodeRefRecId))
        {
            setErrorNodes.add(_nodeRefRecId);
            if (silent)
            {
                result = false;
            }
            else
            {
                nodePlanActivity = mapPlanActivities.lookup(_nodeRefRecId);
                result = checkFailed(strfmt("@SYS303307",nodePlanActivity.PlanActivityId));
            }
        }
        else
        {
            //maximum level reached?
            if (_usedNodes.elements() > #maxLevel)
            {
                setErrorNodes.add(_nodeRefRecId);

                if (silent)
                {
                    result = false;
                }
                else
                {
                    nodePlanActivity = mapPlanActivities.lookup(_nodeRefRecId);
                    result = checkFailed(strfmt("@SYS303308",nodePlanActivity.PlanActivityId,#maxLevel));
                }
            }
            else
            {
                //validate next level
                setChildren = mapChildren.lookup(_nodeRefRecId);        //always exists in map
                if (   setChildren
                    && setChildren.elements())
                {
                    _usedNodes.add(_nodeRefRecId);

                    se = setChildren.getEnumerator();
                    while (se.moveNext())
                    {
                        result = this.validateNode(this.child(se.current()),_usedNodes) && result;
                    }

                    _usedNodes.remove(_nodeRefRecId);
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static PlanGraph construct()
    {
        return new PlanGraph();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new <c>PlanGraph</c> object.
    /// </summary>
    /// <param name="_plan">
    ///    A <c>Plan</c> record to use to initialize the object.
    /// </param>
    /// <param name="_silent">
    ///    A Boolean value to use to initialize the object.
    /// </param>
    /// <returns>
    ///    A new <c>PlanGraph</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanGraph newPlan(
        Plan    _plan,
        boolean _silent = false)
    {
        PlanGraph   planGraph = PlanGraph::construct();

        planGraph.parmPlan(_plan);
        planGraph.parmSilent(_silent);

        return planGraph;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>