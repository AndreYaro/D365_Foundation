<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WordDocument_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Performs generation of word reports by using bookmarks in template file.
/// </summary>
public class WordDocument_RU implements System.IDisposable
{
    protected const str fileExtension = '.docx';

    private System.IO.MemoryStream wordDocumentStream = new System.IO.MemoryStream();
    private DocumentFormat.OpenXml.Packaging.WordprocessingDocument wordDocument;
    private System.Collections.IEnumerable bookmarks;
    private System.Reflection.MethodInfo methodInfoInsertAfter;
    private System.Reflection.MethodInfo methodInfoAppendChild;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets parameters for new instance.
    /// </summary>
    /// <param name = "_docStream">Stream representation of Word document.</param>
    public void new(System.IO.Stream _docStream)
    {
        this.initWordDocument(_docStream);
        this.getAllBookmarks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWordDocument</Name>
				<Source><![CDATA[
    private void initWordDocument(System.IO.MemoryStream _wordDocumentStream)
    {
        _wordDocumentStream.Seek(0, System.IO.SeekOrigin::Begin);
        _wordDocumentStream.CopyTo(this.wordDocumentStream);
        this.wordDocument = DocumentFormat.OpenXml.Packaging.WordprocessingDocument::Open(this.wordDocumentStream, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeWordDocument</Name>
				<Source><![CDATA[
    private void finalizeWordDocument()
    {
        wordDocument.Close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets bookmark value while filling document.
    /// </summary>
    /// <param name = "_bookmarkName">Name of bookmark to set value to.</param>
    /// <param name = "_value">Value to set.</param>
    public void insertValue( str _bookmarkName , str _value)
    {
        DocumentFormat.OpenXml.Wordprocessing.BookmarkStart bookmarkStart = this.getBookmarkByName(_bookmarkName);

        if (bookmarkStart != null)
        {
            DocumentFormat.OpenXml.Wordprocessing.Text text = new DocumentFormat.OpenXml.Wordprocessing.Text(_value);
            OpenXMLElementProxy bkmark = new OpenXMLElementProxy(bookmarkStart.Parent);
            OpenXMLElementProxy run = new OpenXMLElementProxy(new DocumentFormat.OpenXml.Wordprocessing.Run());
            run.AppendChild(text);
            bkmark.InsertAfter(run.openXmlElement, bookmarkStart);
        }
        else
        {
            warning(strfmt("@GLS102332", _bookmarkName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllBookmarks</Name>
				<Source><![CDATA[
    private void getAllBookmarks()
    {
        OpenXMLElementProxy oXMLProxy = new OpenXMLElementProxy(wordDocument.MainDocumentPart.RootElement);

        bookmarks = oXMLProxy.Descendants();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBookmarkByName</Name>
				<Source><![CDATA[
    private DocumentFormat.OpenXml.Wordprocessing.BookmarkStart getBookmarkByName(str _bookmarkStartName)
    {
        DocumentFormat.OpenXml.Wordprocessing.BookmarkStart foundBookmarkStart = null;
        var e = bookmarks.GetEnumerator();

        while (e.moveNext())
        {
            DocumentFormat.OpenXml.Wordprocessing.BookmarkStart b = e.Current;

            if (b.Name.ToString() == _bookmarkStartName)
            {
                foundBookmarkStart = b;

                break;
            }
        }

        return foundBookmarkStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveToStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the document to stream.
    /// </summary>
    /// <returns>The document stream.</returns>
    public System.IO.Stream saveToStream()
    {
        this.finalizeWordDocument();

        wordDocumentStream.Position = 0;

        return wordDocumentStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendFileToBrowser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides file for downloading. 
    /// </summary>
    /// <param name = "_fileName">File name to be predefined one.</param>
    public void sendFileToBrowser(str _fileName)
    {
        this.finalizeWordDocument();

        Browser br = new Browser();

        str downloadUrl = File::SendFileToTempStore(wordDocumentStream, System.IO.Path::ChangeExtension(_fileName, fileExtension), classstr(FileUploadTemporaryStorageStrategy), true);

        if (downloadUrl != "")
        {
            br.navigate(downloadUrl, true, false);
        }
        else
        {
            warning("@ApplicationPlatform:DownloadFailed");
        }
        this.Dispose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    public void Dispose()
    {
        if (wordDocumentStream)
        {
            wordDocumentStream.Dispose();
            wordDocumentStream = null;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>