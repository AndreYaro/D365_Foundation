<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayController</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayController extends RunBase
{
    QueryRun        queryRun;

    #define.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueryRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void buildQueryRun()
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        qbds = query.addDataSource(tableNum(RHRMEmplTable));
        qbds.addRange(fieldNum(RHRMEmplTable, EmployeeId));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        this.buildQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    #RpayModuleName
    #AviFiles
    public void run()
    {
        RPayTrans            rpayTransOld, rPayTransNew;
        RPayModuleTable      rPayModuleTable;
        ReportPeriod_RU      payPeriod;
        RPayCostType         costCompanyDebt, costEmplDebt;
        RPayParameters       rPayParameters;
        RPayAmount           debtAmount;
        SysOperationProgress operationProgress;
        RHRMEmplTable        emplTable;
        RHRMEmplTable        emplTable1;
        RPayEmplParameters   rPayEmplParameters;
        boolean              closePayroll;
        int                  countQuery;

        countQuery = SysQuery::countTotal(queryRun);
        select count(RecId) from emplTable;
        closePayroll = (emplTable.RecId == countQuery);

        if (closePayroll)
        {
            if (! RPayController::canClosePayment(true))
            {
                return;
            }
        }

        operationProgress = new SysOperationProgress();
        operationProgress.setCaption("@RUP675");
        operationProgress.setAnimation(#AviUpdate);
        operationProgress.setTotal(countQuery);

        ttsbegin;

        rPayParameters = RPayParameters::find(true);

        costCompanyDebt = rPayParameters.PayCostCompanyDebt;
        costEmplDebt    = rPayParameters.PayCostEmplDebt;

        while (queryRun.next())
        {
            emplTable = queryRun.get(tableNum(RHRMEmplTable));

            operationProgress.setText("@RUP372" + emplTable.EmployeeId);
            operationProgress.incCount();

            //only for "main" employee
            if (emplTable.EmployeeId != emplTable.PayMainEmplId)
                continue;

            if (! RPayController::canClosePayment(true, emplTable.EmployeeId))
                continue;

            if (closePayroll && RPayParameters::payPeriod(emplTable.EmployeeId) != RPayParameters::payPeriod())
                continue;

            payPeriod = endmth(nextMth(RPayParameters::payPeriod(emplTable.EmployeeId)));

            delete_from rpayTransOld
                where rpayTransOld.PayPeriod           == payPeriod &&
                      rpayTransOld.PayModuleCode       == #ModuleNameClosePayment
                exists join emplTable1
                    where emplTable1.EmployeeId        == rpayTransOld.Emplid &&
                          emplTable1.PayMainEmplId   == emplTable.PayMainEmplId;

            select sum(Amount) from rpayTransOld
                where rpayTransOld.PayPeriod       == RPayParameters::payPeriod(emplTable.EmployeeId)
            exists join emplTable1
                where emplTable1.EmployeeId       == rpayTransOld.Emplid &&
                        emplTable1.PayMainEmplId  == emplTable.PayMainEmplId;

            debtAmount = rpayTransOld.Amount > 0 ?
                         rpayTransOld.Amount - roundDown(rpayTransOld.Amount, rPayParameters.PaySheetRound) :
                         rpayTransOld.Amount;

            if (debtAmount != 0)
            {
                rPayTransNew.clear();
                rPayTransNew.SourceDate    = payPeriod;
                rPayTransNew.PayPeriod     = payPeriod;
                rPayTransNew.TransDate     = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                rPayTransNew.PayCtype      = debtAmount > 0 ? costCompanyDebt : costEmplDebt;
                rPayTransNew.Amount        = CurrencyExchangeHelper::amount(debtAmount);
                rPayTransNew.PayModuleCode = #ModuleNameClosePayment;
                rPayTransNew.initFromEmplTable(emplTable);
                rPayTransNew.doInsert();
            }

            if (! closePayroll)
            {
                //for all by-workers
                while select emplTable1
                    where emplTable1.rhrmPersonTable == emplTable.rhrmPersonTable
                {
                    rPayEmplParameters = RPayEmplParameters::find(emplTable1.EmployeeId, true);

                    if (rPayEmplParameters)
                    {
                        rPayEmplParameters.PayPeriod = payPeriod;
                        rPayEmplParameters.update();
                    }
                    else
                    {
                        rPayEmplParameters.EmplId    = emplTable1.EmployeeId;
                        rPayEmplParameters.PayPeriod = payPeriod;
                        rPayEmplParameters.insert();
                    }

                    if (emplTable1.EmployeeId != emplTable.EmployeeId)
                    {
                        info(strFmt("@RUP2741",
                                    emplTable1.EmployeeId, emplTable1.name(), emplTable.EmployeeId, emplTable.name()));
                    }
                }
            }
        }

        if (closePayroll)
        {
            payPeriod = endmth(nextMth(RPayParameters::payPeriod()));

            while select forupdate rPayModuleTable
            {
                if (rPayModuleTable.PayModuleSost != RPayModuleSost::UnUse)
                {
                    rPayModuleTable.PayModuleSost = RPayModuleSost::NoCalculate;
                }
                rPayModuleTable.SourceDate    = payPeriod;
                rPayModuleTable.TransDate     = (rPayModuleTable.TransDate == endmth(rPayModuleTable.TransDate) ?
                                                 endmth(nextMth(rPayModuleTable.TransDate)) : nextMth(rPayModuleTable.TransDate));
                rPayModuleTable.update();
            }

            RPayLevelRollHistory::createPayLevelRollHistory(rPayParameters);

            RPayParameters::setPayStatus(RPayStatus::NoCalc);
            rPayParameters = RPayParameters::find(true);
            rPayParameters.PayPeriod = payPeriod;
            rPayParameters.CalcDate  = RPayCalcSalaryPeriodicity::findNext(RPayParameters::calcDate()).CalcDate;
            rPayParameters.update();

            delete_from rPayEmplParameters
                where rPayEmplParameters.PayPeriod == payPeriod;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = conPeek(packedClass, 1);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion :
                [version, packedQuery] = packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    this.buildQueryRun();
                }
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDateChanged</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void calcDateChanged(RPayParameters _rPayParameters, RPayCalcDate _calcDate)
    {
        RPayModuleTable     rPayModuleTable;
        RPayModuleControl   rPayModuleControl;

        ttsbegin;

        if (_calcDate && _rPayParameters.CalcDate && _calcDate > _rPayParameters.CalcDate)
        {
            while select forupdate rPayModuleTable
                where rPayModuleTable.PayModuleSost == RPayModuleSost::Calculate
            {
                rPayModuleTable.PayModuleSost = RPayModuleSost::NoCalculate;
                rPayModuleTable.update();

                rPayModuleControl = rPayModuleTable.payModuleControl();
                rPayModuleControl.moduleSostModified(rPayModuleTable);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canArchivCalculate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean canArchivCalculate()
    {
        if (RPayController::existSalaryJournal())
        {
            return checkFailed("@GLS105872");
        }

        if ((select firstonly rPayModuleTable
                where rpayModuleTable.PayModuleSost == RPayModuleSost::NoCalculate).RecId)
        {
            return checkFailed("@RUP658");
        }

        if ((select firstonly rpayEmplCalculate).RecId)
        {
            return checkFailed("@RUP670");
        }

        if (! RPayCalcSalaryPeriodicity::isLastInPayPeriod(RPayParameters::calcDate(), RPayParameters::payPeriod()))
        {
            return checkFailed("@RUP2535");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCalcDateChange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean canCalcDateChange(RPayParameters   _payParameters,
                                                   NextPrevious     _nextPrevious)
    {
        if (! _payParameters.PayPeriod)
        {
            return checkFailed("@RUP2537");
        }

        if (_nextPrevious == NextPrevious::Previous)
        {
            if (Box::yesNo("@RUP2538", DialogButton::No, "@RUP2539", "@RUP971") == DialogButton::No)
            {
                return false;
            }
        }
        else
        {
            if (_payParameters.CalcDate)
            {
                if ((select firstonly rPaySheetTable
                        where rPaySheetTable.PayPeriod    == RPayParameters::payPeriod() &&
                              rPaySheetTable.TransDate    == RPayParameters::calcDate()  &&
                              rPaySheetTable.PaySheetType == RPaySheetType::Interim      &&
                              rPaySheetTable.PaySheetSost == RPaySheetSost::NoPaid).RecId != 0)
                {
                    return checkFailed(strFmt("@RUP2541", enum2str(RPaySheetType::Interim)));
                }

                if (Box::yesNo(strFmt("@RUP2540", enum2str(RPayModuleSost::NoCalculate)), DialogButton::No, "@RUP2539", "@RUP971") == DialogButton::No)
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canClosePayment</Name>
				<Source><![CDATA[
    private static boolean canClosePayment(boolean needMessage = true,
                                           RHRMEmplId  _mainEmplId = '')
    {
        ReportPeriod_RU nextPayPeriod   = endmth(nextMth(RPayParameters::payPeriod()));
        RPayCalcDate    nextCalcDate    = RPayCalcSalaryPeriodicity::findNext(RPayParameters::calcDate()).CalcDate;

        RPaySheetTable  rPaySheetTable;
        RPaySheetTrans  rPaySheetTrans;
        RHRMEmplTable   emplTable;
        if (! _mainEmplId)
        {
            if (RPayParameters::find().PayStatus == RPayStatus::NoCalc &&
                isConfigurationkeyEnabled(configurationKeyNum(RPayTax)))
            {
                if (needMessage)
                {
                    error("@RUP533");
                }
                return false;
            }

            if (!RPayController::existSalaryJournal())
            {
                if (needMessage)
                {
                    error("@RUP672");
                }

                return false;
            }
        }

        if (_mainEmplId)
        {
            select firstonly RecId from rPaySheetTable
                 where rPaySheetTable.PayPeriod      == RPayParameters::payPeriod(_mainEmplId) &&
                       rPaySheetTable.PaySheetSost   == RPaySheetSost::NoPaid
             join RecId from rPaySheetTrans
                where rPaySheetTrans.SheetTableRecId == rPaySheetTable.RecId
             exists join emplTable
                where emplTable.EmployeeId           == rPaySheetTrans.Emplid
                   && emplTable.PayMainEmplId        == _mainEmplId;

            if (rPaySheetTrans.RecId)
            {
                if (needMessage)
                {
                    error(strFmt("@RUP2737",
                                _mainEmplId, RHRMEmplTable::emplId2Name(_mainEmplId)));
                }
                return false;
            }
        }
        else
        {
            if ((select firstonly rPaySheetTable
                     where rPaySheetTable.PayPeriod    == RPayParameters::payPeriod() &&
                           rPaySheetTable.PaySheetSost == RPaySheetSost::NoPaid).RecId != 0)
            {
                if (needMessage)
                {
                    error("@RUP674");
                }
                return false;
            }
        }

        if (! _mainEmplId)
        {
            if (! RPayCalcSalaryPeriodicity::isLastInPayPeriod(RPayParameters::calcDate(), RPayParameters::payPeriod()))
            {
                if (needMessage)
                {
                    error("@RUP2535");
                }
                return false;
            }

            if (nextCalcDate && (nextCalcDate < dateStartMth(nextPayPeriod) || nextCalcDate > endmth(nextPayPeriod)))
            {
                if (needMessage)
                {
                    error(strFmt("@RUP2536", nextCalcDate, subStr(date2str(nextPayPeriod, 123, 2, 2, 2, 2, 4, 0), 4, 7)));
                }
                return false;
            }

            if (needMessage)
            {
                if ((select firstonly rPaySheetTable
                        where rPaySheetTable.PayPeriod    == RPayParameters::payPeriod() &&
                              rPaySheetTable.PaySheetType == RPaySheetType::Payment).RecId == 0)
                {
                    if (Box::yesNo("@RUP6177",DialogButton::No,"@RUP675","@RUP677") == DialogButton::No)
                    {
                        return false;
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateJournal</Name>
				<Source><![CDATA[
    public static boolean canCreateJournal(boolean _needMessage = true)
    {
        RPayTrans rPayTrans;
        RPayTable rPayTable;

        if (RPayParameters::find().PayStatus == RPayStatus::NoCalc &&
            isConfigurationkeyEnabled(configurationKeyNum(RPayTax)))
        {
            if (_needMessage)
            {
                info("@RUP533");
            }

            return false;
        }

        if ((select firstonly rpayEmplCalculate).RecId)
        {
            if (_needMessage)
            {
               info("@RUP670");
            }

            return false;
        }

        if (RPayController::existSalaryJournal())
        {
            if (_needMessage)
            {
                info("@RUP634");
            }

            return false;
        }

        if (! RPayCalcSalaryPeriodicity::isLastInPayPeriod(RPayParameters::calcDate(), RPayParameters::payPeriod()))
        {
            if (_needMessage)
            {
                info("@RUP2535");
            }

            return false;
        }

        if (_needMessage)
        {
            select firstonly RecId from rPayTrans
                where rPayTrans.Correct   == NoYes::No &&
                      rPayTrans.PayPeriod ==  RPayParameters::payPeriod()
                exists join rPayTable
                    where rPayTable.PayCtype == rPayTrans.PayCtype &&
                          rPayTable.Post     == NoYes::No;

            if (rPayTrans.RecId)
            {
                if (Box::yesNo("@RUP522",DialogButton::No,"@RUP616","@RUP617") == DialogButton::No)
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateReverseJournal</Name>
				<Source><![CDATA[
    public static boolean canCreateReverseJournal(boolean _needMessage = true)
    {
        if (!RPayController::existSalaryJournal(true))
        {
            if (_needMessage)
            {
                info("@GLS105881");
            }

            return false;
        }

        if (! RPayCalcSalaryPeriodicity::isLastInPayPeriod(RPayParameters::calcDate(), RPayParameters::payPeriod()))
        {
            if (_needMessage)
            {
                info("@RUP2535");
            }

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModuleChanged</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean canModuleChanged(boolean     _needMessage = true,
                                           RHRMEmplId  _emplId      = '')
    {
        boolean ret = true;

        if (RPayController::existSalaryJournal(false, _emplId))
        {
            if (_needMessage)
            {
                error("@GLS105872");
            }

            ret = false;
        }

        if ((select firstonly rpaySheetTable
                where rpaySheetTable.PaySheetType == RPaySheetType::Payment &&
                      rpaySheetTable.PayPeriod    == RPayParameters::payPeriod(_emplId)).RecId)
        {
            if (_needMessage)
            {
               error("@RUP659");
            }
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPayLevelRollChange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean canPayLevelRollChange(RPayParameters _payParameters)
    {
        RPayParameters payParametersOrig;
        boolean        ret = true;

        payParametersOrig = _payParameters.orig();

        if (payParametersOrig.PayLevelRoll != _payParameters.PayLevelRoll)
        {
            if (RPayController::existSalaryJournal())
            {
                ret = checkFailed("@GLS105872");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPayPeriodChange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean canPayPeriodChange(RPayParameters _payParameters)
    {
        RPayParameters payParametersOrig;

        payParametersOrig = _payParameters.orig();

        if (! payParametersOrig.PayPeriod)
        {
            return true;
        }

        if (endmth(payParametersOrig.PayPeriod) == endmth(_payParameters.PayPeriod))
        {
            return true;
        }

        if (endmth(payParametersOrig.PayPeriod) < endmth(_payParameters.PayPeriod))
        {
            return checkFailed("@RUP760");
        }

        if (endmth(prevMth(payParametersOrig.PayPeriod)) != endmth(_payParameters.PayPeriod))
        {
            return checkFailed("@RUP762");
        }

        if (_payParameters.PayStatus != RPayStatus::NoCalc &&
            isConfigurationkeyEnabled(configurationKeyNum(RPayTax)))
        {
            return checkFailed("@RUP761");
        }

        if (Box::yesNo("@RUP969",DialogButton::No, "@RUP970", "@RUP971") == DialogButton::No)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP675";
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSalaryJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if salary journal exists.
    /// </summary>
    /// <param name="_posted">
    /// The indicator what to look for: posted or unposted journals.
    /// </param>
    /// <param name="_emplId">
    /// The employee id.
    /// </param>
    /// <returns>
    /// True if the salary journal found.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean existSalaryJournal(
        boolean    _posted = false,
        RHRMEmplId _emplId = '')
    {
        LedgerJournalTable      ledgerJournalTable;
        LedgerJournalTable_W    ledgerJournalTable_W;

        select firstonly RecId from ledgerJournalTable
            where ledgerJournalTable.JournalType    == LedgerJournalType::Payroll_RU &&
                  (ledgerJournalTable.Posted        == NoYes::Yes || !_posted)
        exists join ledgerJournalTable_W
            where ledgerJournalTable_W.LedgerJournalTable   == ledgerJournalTable.RecId &&
                  ledgerJournalTable_W.ReportPeriod_RU      == RPayParameters::payPeriod(_emplId)   &&
                  ledgerJournalTable_W.ReverseType_RU       == JournalReverseType_RU::Main   &&
                  ledgerJournalTable_W.Reverse_RU           == NoYes::No;

        return ledgerJournalTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstPeriodFrequency</Name>
				<Source><![CDATA[
    #timeConstants
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReportPeriod_RU getFirstPeriodFrequency(ReportPeriod_RU         _payPeriod = RPayParameters::payPeriod(),
                                                                 RPayRatePeriodFrequency _payRatePeriodFrequency = RPayRatePeriodFrequency::Month,
                                                                 RPayRateCode            _payRateCode = '')
    {
        int             tmpLag;
        ReportPeriod_RU periodStart;

        switch (_payRatePeriodFrequency)
        {
            case RPayRatePeriodFrequency::Month:
                tmpLag = 1;
                break;
            case RPayRatePeriodFrequency::Quarter:
                tmpLag = #monthsPerQuarter;
                break;
            case RPayRatePeriodFrequency::HalfYear:
                tmpLag = #monthsPerHalfYear;
                break;
            case RPayRatePeriodFrequency::Year:
                tmpLag = #monthsPerYear;
                break;
            case RPayRatePeriodFrequency::Unlimeted:
                if (_payRateCode)
                {
                    periodStart = RPayRateTrans::find(_payRateCode).RateDate;
                }
                return periodStart;
            default:
                tmpLag = 0;
                break;
        }

        if (tmpLag)
        {
            periodStart = mkDate(dayOfMth(_payPeriod),((mthOfYr(_payPeriod) div tmpLag)+ (mthOfYr(_payPeriod) mod tmpLag ? 1 : 0))*
                                 tmpLag - tmpLag + 1,year(_payPeriod));
        }
        else
        {
            periodStart = _payPeriod;
        }

        return periodStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPayController rPayController = new RPayController();

        if (rPayController.prompt())
        {
            rPayController.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>payPeriodChanged</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void payPeriodChanged(RPayParameters _rPayParameters)
    {
        RPayModuleTable rPayModuleTable;
        RPayParameters payParametersOrig;
        ReportPeriod_RU payPeriod;

        payParametersOrig = _rPayParameters.orig();

        ttsbegin;

        if (_rPayParameters.PayPeriod != payParametersOrig.PayPeriod)
        {
            payPeriod = endmth(_rPayParameters.PayPeriod);
            while select forupdate rPayModuleTable
            {
                if (rPayModuleTable.PayModuleSost != RPayModuleSost::UnUse)
                {
                    rPayModuleTable.PayModuleSost = RPayModuleSost::Calculate;
                }
                rPayModuleTable.SourceDate    = payPeriod;
                rPayModuleTable.TransDate     = payPeriod;
                rPayModuleTable.update();
            }
            _rPayParameters.PayPeriod = payPeriod;
            _rPayParameters.CalcDate  = RPayCalcSalaryPeriodicity::findLastInPayPeriod(payPeriod).CalcDate;
            _rPayParameters.PayStatus = RPayStatus::Arhiv;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>