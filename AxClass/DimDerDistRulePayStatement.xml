<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimDerDistRulePayStatement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Dimension derivation distribution rule extension class for pay statements.
/// </summary>
[SourceDocumentClassExtensionAttribute(classStr(AccDistRulePayrollPayStatement))]
public class DimDerDistRulePayStatement extends DimensionDerivationRuleExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populatedDimAllocList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates the ledger dimension allocation list.
    /// </summary>
    /// <param name="_ledgerDimensionAllocationList">
    ///     The ledger dimension allocation list.
    /// </param>
    public void populatedDimAllocList(LedgerDimensionAllocationList _ledgerDimensionAllocationList)
    {
        LedgerDimensionAllocationList           newAllocationList;
        LedgerDimensionAllocationListEnumerator listEnum;
        LedgerDimensionAllocation               allocation;
        LedgerDimensionAllocation               newAllocation;
        LedgerDimensionAccount                  ledgerDimensionAccount;
        LedgerDimensionDefaultAccount           mainAccount;
        LedgerDimensionAccount                  newLedgerDimension;
        SourceDocumentLineItem                  sourceDocumentLineItem = this.parmDimensionDerivationRule().parmAccountingRule().parmSourceDocumentLineItem();
        dimensionDefault                        lineDimensionDefault = sourceDocumentLineItem.parmDefaultDimension();

        if (lineDimensionDefault == 0)
        {
            // Skip this logic since the line doesn't have a default dimension set
            return;
        }

        newAllocationList = LedgerDimensionAllocationList::construct();
        listEnum = _ledgerDimensionAllocationList.getEnumerator();

        // Loop through each distribution allocation
        while (listEnum.moveNext())
        {
            allocation = listEnum.current();
            ledgerDimensionAccount = allocation.parmLedgerDimension();

            // Get the main account that is set on the allocation
            mainAccount = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(ledgerDimensionAccount);

            //
            // Use the source document line's default dimension values as the primary values
            // and merge with the dimension values set in the allocation
            //
            newLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(mainAccount, lineDimensionDefault);
            newLedgerDimension = LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(newLedgerDimension, ledgerDimensionAccount);

            // Create a new allocation item based on the original allocation but with the new ledger dimension
            newAllocation = LedgerDimensionAllocation::newFromParameters(
                newLedgerDimension,
                allocation.parmAllocationFactor(),
                allocation.parmSide(),
                allocation.parmOppositeAccount(),
                allocation.parmReferenceAccountingDistribution(),
                allocation.parmDistributionReferenceRole(),
                allocation.parmParentAccountingDistribution(),
                allocation.parmLedgerPostingType());
            newAllocationList.addEnd(newAllocation);
        }

        this.parmDimensionDerivationRule().parmLedgerDimensionAllocList(newAllocationList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribe to dimension derivation rule events.
    /// </summary>
    protected void subscribe()
    {
        dimensionDerivationRule.populatingDimAllocListEventHandler += eventhandler(this.populatingDimAllocList);
        dimensionDerivationRule.populatedDimAllocListEventHandler += eventhandler(this.populatedDimAllocList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIdenticalProjectInformation</Name>
				<Source><![CDATA[
    private boolean hasIdenticalProjectInformation(AccountingDistributionRecId _firstProjAccountDistRecId, AccountingDistributionRecId secondProjAccountDistRecId)
    {
        ProjectAccountingDistribution firstProjAccountDist, secondProjAccountDist;
        boolean ret = false;

        firstProjAccountDist  = ProjectAccountingDistribution::findByAccountingDistribution(_firstProjAccountDistRecId);
        secondProjAccountDist = ProjectAccountingDistribution::findByAccountingDistribution(secondProjAccountDistRecId);

        if (firstProjAccountDist.ProjTable            == secondProjAccountDist.ProjTable
            && firstProjAccountDist.ProjCategory      == secondProjAccountDist.ProjCategory
            && firstProjAccountDist.SmmActivities     == secondProjAccountDist.SmmActivities
            && firstProjAccountDist.ProjFundingSource == secondProjAccountDist.ProjFundingSource
            && firstProjAccountDist.ProjLineProperty  == secondProjAccountDist.ProjLineProperty)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatingDimAllocList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates the ledger dimension allocation list for payroll pay statement earning lines
    ///     by duplicating the accounting distributions off the payroll earning statement lines and
    ///     merging lines that have identical main accounts, default dimensions, and project information
    /// </summary>
    /// <param name="_ledgerDimensionAllocationList">
    ///     The ledger dimension allocation list.
    /// </param>
    public void populatingDimAllocList(LedgerDimensionAllocationList _ledgerDimensionAllocationList)
    {
        SourceDocumentLineItem                      sourceDocumentLineItem;
        SourceDocumentLineItemIPayroll              iPayroll;
        AccountingDistribution                      accountingDistribution;

        PayrollPayStatementLine                     payrollPayStatementLine;
        PayrollPayStatementEarningLine              payrollPayStatementEarningLine;
        PayrollEarningStatementLine                 payrollEarningStatementLine;

        LedgerDimensionDefaultAccount               mainAccount;
        DimensionDefault                            dimensionDefault;
        LedgerDimensionAccount                      newLedgerDimension;
        LedgerDimensionAllocation                   ledgerDimensionAllocation;
        AllocationFactor                            factor;

        PayrollStatementAccountingCurrencyAmount    tempAllocationAmount;
        container                                   tempAccountDistInfo;
        List                                        tempList = new List(Types::Container);
        ListIterator                                listIterator;
        boolean                                     isMatchingLineFound;

        #DEFINE.MAIN_ACCOUNT(1)
        #DEFINE.DIMENSION_DEFAULT(2)
        #DEFINE.ALLOCATION_AMOUNT(3)
        #DEFINE.ACCOUNT_DIST_RECID(4)

        sourceDocumentLineItem = this.parmDimensionDerivationRule().parmAccountingRule().parmSourceDocumentLineItem();
        iPayroll = sourceDocumentLineItem as SourceDocumentLineItemIPayroll;

        if (iPayroll)
        {
            payrollPayStatementLine = iPayroll.parmPayStatementLine() as PayrollPayStatementLine;

            // Only earnings lines have distributions copied directly from the earnings statement, not benefit or tax lines
            if (payrollPayStatementLine.RecId && payrollPayStatementLine.InstanceRelationType == tableNum(PayrollPayStatementEarningLine))
            {
                // Retrieve the distributions off the original earning statement line
                while select RecId, LedgerDimension, AllocationFactor from accountingDistribution
                    join AccountingCurrencyAmount from payrollEarningStatementLine
                        where payrollEarningStatementLine.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                    exists join payrollPayStatementEarningLine
                        where payrollPayStatementEarningLine.RecId == payrollEarningStatementLine.PayStatementEarningLine
                            && payrollPayStatementEarningLine.RecId == payrollPayStatementLine.RecId
                {
                    mainAccount = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(accountingDistribution.LedgerDimension);
                    dimensionDefault = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(accountingDistribution.LedgerDimension);

                    // Calculate the amount of the current allocation
                    tempAllocationAmount = accountingDistribution.AllocationFactor * payrollEarningStatementLine.AccountingCurrencyAmount;

                    // Iterate over list and merge lines with identical main accounts, dimension values, and project information
                    listIterator = new ListIterator(tempList);
                    isMatchingLineFound = false;
                    while (listIterator.more())
                    {
                        tempAccountDistInfo = listIterator.value();

                        if (mainAccount == conPeek(tempAccountDistInfo, #MAIN_ACCOUNT)
                            && dimensionDefault == conPeek(tempAccountDistInfo, #DIMENSION_DEFAULT)
                            && this.hasIdenticalProjectInformation(accountingDistribution.RecId, conPeek(tempAccountDistInfo, #ACCOUNT_DIST_RECID)))
                        {
                            // Add the two allocation amounts together and create new container
                            tempAllocationAmount += conPeek(tempAccountDistInfo, #ALLOCATION_AMOUNT);
                            tempAccountDistInfo = conPoke(tempAccountDistInfo, #ALLOCATION_AMOUNT, tempAllocationAmount);

                            //Replace container in list with new merged container
                            listIterator.delete();
                            listIterator.insert(tempAccountDistInfo);

                            isMatchingLineFound = true;
                            break;
                        }
                        listIterator.next();
                    }

                    if (!isMatchingLineFound)
                    {
                        tempList.addEnd([mainAccount, dimensionDefault, tempAllocationAmount, accountingDistribution.RecId]);
                    }
                }

                // Iterate over unique information list and build up the ledger dimension allocation list
                listIterator = new ListIterator(tempList);
                while (listIterator.more())
                {
                    tempAccountDistInfo = listIterator.value();

                    newLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(conPeek(tempAccountDistInfo, #MAIN_ACCOUNT),
                                                                                                  conPeek(tempAccountDistInfo, #DIMENSION_DEFAULT));

                    // Only do the division if AccountingCurrencyAmount is not 0, preventing a divide by zero exception
                    if (payrollPayStatementLine.AccountingCurrencyAmount)
                    {
                        factor = abs(conPeek(tempAccountDistInfo, #ALLOCATION_AMOUNT) / payrollPayStatementLine.AccountingCurrencyAmount);
                    }
                    else
                    {
                        factor = 1;
                    }

                    ledgerDimensionAllocation =
                        LedgerDimensionAllocation::newFromParameters(
                            newLedgerDimension,
                            factor,
                            DebitCredit::Debit,
                            false,
                            // Any of the pre-merge distributions can serve as reference distribution on pay statement line distribution
                            conPeek(tempAccountDistInfo, #ACCOUNT_DIST_RECID));

                    _ledgerDimensionAllocationList.addEnd(ledgerDimensionAllocation);

                    listIterator.next();
                }

                this.parmDimensionDerivationRule().parmLedgerDimensionAllocList(_ledgerDimensionAllocationList);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>