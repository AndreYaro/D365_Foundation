<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementTaxLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankStatementTaxLine</c> is taxable line from bank statement.
/// </summary>
class BankStatementTaxLine implements TaxableLine
{
    BankStmtISOAccountStatement                 statement;
    BankStmtISOReportEntry                      statementLine;
    BankStatementLineBankDocumentInformation    statementLineDocumentInformation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCashDiscountAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the cash discount amount.
    /// </summary>
    /// <returns>
    ///    The cash discount amount.
    /// </returns>
    /// <remarks>
    ///    If both the cash discount amount and the cash discount percentage are supplied, tax calculations
    ///    will always use the cash discount amount instead of the cash discount percentage.
    /// </remarks>
    public AmountCur getCashDiscountAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscountPercent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the cash discount percentage.
    /// </summary>
    /// <returns>
    ///    The cash discount percentage.
    /// </returns>
    /// <remarks>
    ///    If both the cash discount amount and the cash discount percentage are supplied, tax calculations
    ///    will always use the cash discount amount instead of the cash discount percentage.
    /// </remarks>
    public Percent getCashDiscountPercent()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyExchangeInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an instance of the <c>CurrencyExchHelper</c> class that represents the transaction line.
    /// </summary>
    /// <returns>
    ///    An instance of <c>CurrencyExchHelper</c> class.
    /// </returns>
    /// <remarks>
    ///    The currency, exchange date, exchange rate, secondary exchange rate, and triangulation should be
    ///    set on the instance of the <c>CurrencyExchHelper</c> class.If the exchange rates and triangulation
    ///    are not set, default values will be used.
    /// </remarks>
    public CurrencyExchangeHelper getCurrencyExchangeInformation()
    {
        CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::construct();

        if (statementLine.AccountingDate &&
            (FeatureStateProvider::isFeatureEnabled(BankStatementPostPerLineFeature::instance())
                || FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance())))
        {
            currencyExchangeHelper.parmExchangeDate(statementLine.AccountingDate);
        }
        else if (statement.AccountingDate)
        {
            currencyExchangeHelper.parmExchangeDate(statement.AccountingDate);
        }
        else
        {
            currencyExchangeHelper.parmExchangeDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }

        return currencyExchangeHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentMiscellaneousCharge</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the current miscellaneous charge line.
    /// </summary>
    /// <returns>
    ///    An object which implements the <c>TaxableLine</c> interface.
    /// </returns>
    /// <remarks>
    ///    If miscellaneous charges do not exist or the transaction does not support miscellaneous charges,
    ///    null may be returned.
    /// </remarks>
    public TaxableLine getCurrentMiscellaneousCharge()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the default dimension from the transaction line.
    /// </summary>
    /// <returns>
    ///    The default dimension.
    /// </returns>
    /// <remarks>
    ///    The default dimension will be combined with the default accounts that are loaded from tax setup.
    /// </remarks>
    public DimensionDefault getDefaultDimension()
    {
        return statementLineDocumentInformation.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the default tax direction for the transaction.
    /// </summary>
    /// <param name="_taxGroupData">
    ///    The <c>TaxGroupData</c> table buffer that represents the tax code that is being considered.
    /// </param>
    /// <param name="_taxObligationCompany">
    ///    The company we have a tax obligation to.
    /// </param>
    /// <returns>
    ///    The default tax direction.
    /// </returns>
    /// <remarks>
    ///    A customer transaction will typically have a tax direction of sales tax payable.A vendor-facing
    ///    transaction will typically have a tax direction of sales tax receivable.
    /// </remarks>
    public TaxDirection getDefaultTaxDirection(TaxGroupData   _taxGroupData, SelectableDataArea _taxObligationCompany)
    {
        TaxDirection direction;

        if (statementLine.AmountCreditDebitIndicator == DebitCredit::Debit)
        {
            direction = TaxDirection::OutgoingTax;
        }
        else
        {
            direction = TaxDirection::IncomingTax;
        }

        return direction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDestinationCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines the destination company for an intercompany document.
    /// </summary>
    /// <returns>
    ///   The destination company.
    /// </returns>
    /// <remarks>
    ///   The destination company is company indicated on the source line that
    ///   contains the ledger account (usually an expense or revenue account).
    /// </remarks>
    public SelectableDataArea getDestinationCompany()
    {
        // Bank Statement does not support intercompany transactions so the
        // destination company is always the current company.
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstMiscellaneousCharge</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads the first miscellaneous charge.
    /// </summary>
    /// <returns>
    ///    true if a miscellaneous charge was found; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If miscellaneous charges do not exist or the transaction does not support miscellaneous charges,
    ///    false may be returned.
    /// </remarks>
    public boolean getFirstMiscellaneousCharge()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTHSTTaxType_CA</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the default GST/HST line amount type.
    /// </summary>
    /// <returns>
    ///   The default GST/HST line amount type.
    /// </returns>
    public GSTHSTTaxType_CA getGSTHSTTaxType_CA()
    {
        return GSTHSTTaxType_CA::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalizedLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the table buffer that represents the journalized line for the transaction.
    /// </summary>
    /// <returns>
    ///    The table buffer for the journalized line.
    /// </returns>
    /// <remarks>
    ///    For example, this would typically be the <c>VendInvoiceTrans</c> table if the transaction is
    ///    purchase order invoice. This is used to set the parent of the <c>TaxTrans</c> record.The table
    ///    buffer must have a <c>RecId</c> value assigned to it.
    /// </remarks>
    public Common getJournalizedLine()
    {
        return statementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextMiscellaneousCharge</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reads the next miscellaneous charge.
    /// </summary>
    /// <returns>
    ///    true if a miscellaneous charge was found; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If miscellaneous charges do not exist or the transaction does not support miscellaneous charges,
    ///    false may be returned.
    /// </remarks>
    public boolean getNextMiscellaneousCharge()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperationLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the operation ledger dimension.
    /// </summary>
    /// <param name="_taxObligationCompany">
    ///    The company we have a tax obligation to.
    /// </param>
    /// <returns>
    ///    The operation ledger dimension.
    /// </returns>
    /// <remarks>
    ///    The operation ledger dimension is usually the primary ledger dimension from the transaction line.
    /// </remarks>
    public LedgerDimensionAccount getOperationLedgerDimension(SelectableDataArea _taxObligationCompany)
    {
        return statementLineDocumentInformation.OffsetLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingType</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the default posting type.
    /// </summary>
    /// <returns>
    ///   The default posting type.
    /// </returns>
    public LedgerPostingType getPostingType()
    {
        return LedgerPostingType::Tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the transaction line from the source document.
    /// </summary>
    /// <returns>
    ///    The table buffer for the transaction line.
    /// </returns>
    /// <remarks>
    ///    This method is used before a document is journalized to determine the parent of the
    ///    <c>TaxUncommitted</c> record.The <c>RecId</c> value must be assigned.
    /// </remarks>
    public Common getSourceLine()
    {
        return statementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxableInventoriedLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an object that represents the inventoried transaction line.
    /// </summary>
    /// <returns>
    ///    The <c>TaxableInventoriedLine</c> object if the current line is inventoried; otherwise, null.
    /// </returns>
    /// <remarks>
    ///    This will be used to calculate taxes based on amounts per unit.If this interface is not
    ///    implemented, taxes based on amounts per unit will calculate 0 amounts.
    /// </remarks>
    public TaxableInventoriedLine getTaxableInventoriedLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the tax code for the transaction line.
    /// </summary>
    /// <returns>
    ///    The tax code.
    /// </returns>
    /// <remarks>
    ///    Specifying in a tax code on a transaction line implies that this transaction line is a direct tax
    ///    adjustment. No tax calculations will occur. Instead, the transaction amount is treated as the tax
    ///    amount and will be applied to this tax code. Specify an empty string if this functionality is not
    ///    desired.
    /// </remarks>
    public TaxCode getTaxCode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the tax group for the transaction line.
    /// </summary>
    /// <returns>
    ///   The tax group.
    /// </returns>
    public TaxGroup getTaxGroup()
    {
        return statementLineDocumentInformation.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the item tax group for the transaction line.
    /// </summary>
    /// <returns>
    ///   The item tax group.
    /// </returns>
    public TaxItemGroup getTaxItemGroup()
    {
        return statementLineDocumentInformation.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRateDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the date that will be used by the <c>Tax</c> class to look up tax rates.
    /// </summary>
    /// <param name="_taxObligationCompany">
    ///    The company we have a tax obligation to.
    /// </param>
    /// <returns>
    ///    The tax rate date.
    /// </returns>
    public TransDate getTaxRateDate(SelectableDataArea _taxObligationCompany)
    {
        TransDate taxCalculationDate;

        if (statementLine.AccountingDate &&
            (FeatureStateProvider::isFeatureEnabled(BankStatementPostPerLineFeature::instance())
                || FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance())))
        {
            taxCalculationDate = statementLine.AccountingDate;
        }
        else if (statement.AccountingDate)
        {
            taxCalculationDate = statement.AccountingDate;
        }
        else
        {
            taxCalculationDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        return taxCalculationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the transaction line amount.
    /// </summary>
    /// <returns>
    ///   The transaction line amount.
    /// </returns>
    public TaxBase getTransactionAmount()
    {
        AmountCur baseAmount = statementLine.getBankCurrencyAmount();

        return -baseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the transaction line currency.
    /// </summary>
    /// <returns>
    ///   The transaction line currency.
    /// </returns>
    public CurrencyCode getTransactionCurrency()
    {
        return statementLine.getBankCurrencyCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionText</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the transaction text for the transaction line.
    /// </summary>
    /// <returns>
    ///   The transaction text.
    /// </returns>
    public TransactionTextLarge getTransactionText()
    {
        return statementLineDocumentInformation.TransactionTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the amount per unit for the transaction line.
    /// </summary>
    /// <returns>
    ///    The amount per unit.
    /// </returns>
    /// <remarks>
    ///    This will be used by Tax for amount per unit tax calculations.
    /// </remarks>
    public PriceCur getUnitAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the class instance.
    /// </summary>
    protected void initialize()
    {
        statementLineDocumentInformation = BankStatementLineBankDocumentInformation::findByReportEntry(statementLine.RecId);
        statement = BankStmtISOAccountStatement::find(statementLine.BankStmtISOAccountStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrePayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the transaction line is a prepayment.
    /// </summary>
    /// <returns>
    ///    true if it is a prepayment; otherwise, false.
    /// </returns>
    public boolean isPrePayment()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatementLine</Name>
				<Source><![CDATA[
    public BankStmtISOReportEntry parmStatementLine(BankStmtISOReportEntry _statementLine = statementLine)
    {
        statementLine = _statementLine;
        return statementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportAmountByUnit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the tax calculation engine should calculate tax for the tax code Origin of
    ///    Amount Per Unit.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    Journals do not support amount by unit calculations, so this method always returns false.
    /// </remarks>
    public boolean supportAmountByUnit()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>BankStatementTaxLine</c>.
    /// </summary>
    /// <param name="_statementLine">
    /// The statement line buffer.
    /// </param>
    /// <returns>
    /// An instance of <c>BankStatementTaxLine</c>.
    /// </returns>
    public static BankStatementTaxLine construct(
        BankStmtISOReportEntry _statementLine)
    {
        BankStatementTaxLine                        taxLine;

        taxLine = new BankStatementTaxLine();
        taxLine.parmStatementLine(_statementLine);
        taxLine.initialize();

        return taxLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>