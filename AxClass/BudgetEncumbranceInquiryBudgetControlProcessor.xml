<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetEncumbranceInquiryBudgetControlProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the data retrieval from budget control tables based on the parameters.
/// </summary>
public final class BudgetEncumbranceInquiryBudgetControlProcessor
{
    private BudgetAnalysisRequest analysisRequest;
    private BudgetAnalysisDimensionSummaryTmp budgetAnalysisDimensionSummaryTmp;
    private BudgetAnalysisDimensionDetailTmp budgetAnalysisDetailTmp;
    private BudgetEncumbranceBudgetControlTransactionTmp budgetTransactionDetailTmp;
    private BudgetEncumbranceBudgetControlSourceDocumentReferenceTmp budgetControlSourceDocumentReferenceTmp;

    private boolean isLedgerBalanceFeatureEnabled = FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instance of the processor to retrieve budget control data with parameters.
    /// </summary>
    /// <param name = "_request">The parameters to retrieve budget control data.</param>
    /// <returns>The instance of the <c>BudgetEncumbranceInquiryBudgetControlProcessor</c>.</returns>
    internal static BudgetEncumbranceInquiryBudgetControlProcessor construct(BudgetAnalysisRequest _request)
    {
        BudgetEncumbranceInquiryBudgetControlProcessor budgetControlProcessor = new BudgetEncumbranceInquiryBudgetControlProcessor();

        budgetControlProcessor.setRequestParameter(_request);

        return budgetControlProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getbudgetControlSourceDocumentReferenceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the Budget control source document refrence.
    /// </summary>
    /// <returns><C>BudgetEncumbranceBudgetControlSourceDocumentReferenceTmp</C> buffer.</returns>
    internal BudgetEncumbranceBudgetControlSourceDocumentReferenceTmp getbudgetControlSourceDocumentReferenceTmp()
    {
        select budgetControlSourceDocumentReferenceTmp;

        return budgetControlSourceDocumentReferenceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run(BudgetEncumbranceBudgetControlTransactionTmp _detail, BudgetAnalysisDimensionSummaryTmp _summary)
    {
        budgetAnalysisDimensionSummaryTmp.linkPhysicalTableInstance(_summary);
        budgetTransactionDetailTmp.linkPhysicalTableInstance(_detail);

        this.retrieveBudgetControlData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveBudgetControlData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves budget control data.
    /// </summary>
    private void retrieveBudgetControlData()
    {
        // Generate budget source document reference data
        this.generateBudgetSourceDocumentReference();

        // Generate budget detail data
        this.generateBudgetDetailForEncumbranceAndPreEncumbrance();

        // Generate budget summary
        this.generateBudgetSummaryData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequestParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set budget analysis request parameter.
    /// </summary>
    /// <param name = "_request">Budget analysis request parameter</param>
    private void setRequestParameter(BudgetAnalysisRequest _request)
    {
        analysisRequest = _request;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBudgetSourceDocumentReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate budget control source document refrence data from relieved document.
    /// </summary>
    private void generateBudgetSourceDocumentReference()
    {
        // Store Budget control source document header and its relieved source document header and type if it has relieved doc.
        delete_from budgetControlSourceDocumentReferenceTmp;

        BudgetSourceTracking relievingTracking;
        BudgetSourceTracking budgetSourceTracking;
        BudgetSource budgetSource;
        SourceDocumentLine sourceDocumentLine;
        BudgetSourceTrackingDetail relievedTrackingDetail;
        BudgetSourceTracking relievedTracking;
        BudgetSource relievedSource;
        SourceDocumentLine relievedSourceLine;
        BudgetSourceTrackingRelievingDetail budgetTrackingRelievingDetail;

        insert_recordset budgetControlSourceDocumentReferenceTmp
        (
            BudgetSource,
            BudgetControlSourceIntegrator,
            SourceDocumentHeader,
            DocumentNumber
        )
        select
            RecId,
            BudgetControlSourceIntegrator
            from budgetSource
            join SourceDocumentHeader from sourceDocumentLine
                where budgetSource.SourceDocumentLine == sourceDocumentLine.RecId
            join TrackingNumber from budgetSourceTracking
                where budgetSource.RecId == budgetSourceTracking.BudgetSource
                    && budgetSourceTracking.TrackingDate >= analysisRequest.parmFromDate()
                    && budgetSourceTracking.TrackingDate <= analysisRequest.parmToDate();

        update_recordset budgetControlSourceDocumentReferenceTmp
            setting DocumentNumberReference = relievedTracking.TrackingNumber,
                BudgetSourceReference = relievedSource.RecId,
                BudgetControlSourceIntegratorReference = relievedSource.BudgetControlSourceIntegrator,
                SourceDocumentHeaderReference = relievedSourceLine.SourceDocumentHeader
                join relievingTracking
                    where budgetControlSourceDocumentReferenceTmp.BudgetSource == relievingTracking.BudgetSource
                join budgetTrackingRelievingDetail
                    where budgetTrackingRelievingDetail.RelievingBudgetSourceTracking == relievingTracking.RecId
                join relievedTrackingDetail
                    where relievedTrackingDetail.RecId == budgetTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail
                join TrackingNumber from relievedTracking
                    where relievedTrackingDetail.BudgetSourceTracking == relievedTracking.RecId
                join RecId, BudgetControlSourceIntegrator from relievedSource
                    where relievedSource.recid == relievedTracking.budgetsource
                join SourceDocumentHeader from relievedSourceLine
                    where relievedSourceLine.RecId == relievedSource.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBudgetDetailForEncumbranceAndPreEncumbrance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate the budget detail data for encumbrance and pre-encumbrance.
    /// </summary>
    private void generateBudgetDetailForEncumbranceAndPreEncumbrance()
    {
        this.generateBudgetDetail(BudgetAnalysisColumns::ExpenseColumnSetEncumbrance);

        this.generateBudgetDetail(BudgetAnalysisColumns::ExpenseColumnSetPreEncumbrance);

        //Update focus ledger dimension
        this.updateBudgetDetailForSourceAndLedgerDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBudgetDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate budget detail data.
    /// </summary>
    /// <param name = "_analysisColumn">BudgetAnalysisColumn enum</param>
    private void generateBudgetDetail(BudgetAnalysisColumns _analysisColumn)
    {
        delete_from budgetAnalysisDetailTmp;

        // We don't want to apply filter on focus ledger dimension as we are trying to get all the detail entries for given dimension set
        analysisRequest.parmFocusLedgerDimensionId(0);
        analysisRequest.parmDetailsTempTable(budgetAnalysisDetailTmp);
        analysisRequest.parmColumn(_analysisColumn);
        analysisRequest.parmRequestType(BudgetAnalysisRequestType::Details);

        BudgetAnalysisDataProcessor budgetAnalysisDetailDataProcessor = BudgetAnalysisDataProcessor::construct(analysisRequest);

        budgetAnalysisDetailDataProcessor.process();

        this.fillBudgetTransactionDetail(_analysisColumn == BudgetAnalysisColumns::ExpenseColumnSetEncumbrance ?  EncumbranceType::Encumbrance : EncumbranceType::PreEncumbrance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBudgetTransactionDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill budgetTransactionDetailTmp table from budgetAnalysisDetailTmp table
    /// </summary>
    /// <param name = "_isEncumbrance">Boolean value stating encumbrnace: true; preEncumbrance: false</param>
    private void fillBudgetTransactionDetail(EncumbranceType _encumbranceType)
    {
        insert_recordset budgetTransactionDetailTmp
        (
            Amount,
            DocumentNumber,
            LedgerDimension,
            TransactionDate,
            ReferenceSourceTracking,
            BudgetSource,
            TransactionNumber,
            TransactionRecId,
            EncumbranceType
        )
        select
            Amount,
            DocumentNumber,
            LedgerDimension,
            TransactionDate,
            ReferenceSourceTracking,
            RelievingBudgetSource,
            TransactionNumber,
            TransactionRecId,
            _encumbranceType
        from budgetAnalysisDetailTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetDetailForSourceAndLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the budget detail data for source document and focus ledger dimension.
    /// </summary>
    private void updateBudgetDetailForSourceAndLedgerDimension()
    {
        this.updateBudgetDetailForSourceDocument();

        this.updateBudgetDetailForFocusLedgerDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetDetailForSourceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the budget detail data for source document.
    /// </summary>
    private void updateBudgetDetailForSourceDocument()
    {
        // Update budget source
        update_recordset budgetTransactionDetailTmp
            setting BudgetSource = budgetTransactionDetailTmp.TransactionRecId
                where budgetTransactionDetailTmp.ReferenceSourceTracking == 0;

        // Update source document header
        update_recordset budgetTransactionDetailTmp
            setting SourceDocumentHeader = budgetControlSourceDocumentReferenceTmp.SourceDocumentHeader,
                OriginalSourceDocumentHeader = budgetControlSourceDocumentReferenceTmp.SourceDocumentHeader,
                DocumentNumber = budgetControlSourceDocumentReferenceTmp.DocumentNumber
            join SourceDocumentHeader, DocumentNumber from budgetControlSourceDocumentReferenceTmp
                where budgetControlSourceDocumentReferenceTmp.BudgetSource == budgetTransactionDetailTmp.BudgetSource;

        this.updateGroupSourceDocumentHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGroupSourceDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the group source document header for the budget detail data.
    /// </summary>
    private void updateGroupSourceDocumentHeader()
    {
        // Update Group source document header
        update_recordset budgetTransactionDetailTmp
            setting GroupSourceDocumentHeader = budgetTransactionDetailTmp.SourceDocumentHeader
            exists join budgetControlSourceDocumentReferenceTmp
                where budgetTransactionDetailTmp.DocumentNumber == budgetControlSourceDocumentReferenceTmp.DocumentNumber
                    && budgetTransactionDetailTmp.SourceDocumentHeader == budgetControlSourceDocumentReferenceTmp.SourceDocumentHeader
                    && budgetTransactionDetailTmp.BudgetSource == budgetControlSourceDocumentReferenceTmp.BudgetSource
                    && budgetTransactionDetailTmp.ReferenceSourceTracking == 0;

        update_recordset budgetTransactionDetailTmp
            setting GroupSourceDocumentHeader = budgetControlSourceDocumentReferenceTmp.SourceDocumentHeaderReference,
                SourceDocumentHeader = budgetControlSourceDocumentReferenceTmp.SourceDocumentHeaderReference,
                DocumentNumber = budgetControlSourceDocumentReferenceTmp.DocumentNumber
            join budgetControlSourceDocumentReferenceTmp
                where budgetTransactionDetailTmp.DocumentNumber == budgetControlSourceDocumentReferenceTmp.DocumentNumber
                    && budgetTransactionDetailTmp.SourceDocumentHeader == budgetControlSourceDocumentReferenceTmp.SourceDocumentHeader
                    && budgetTransactionDetailTmp.BudgetSource == budgetControlSourceDocumentReferenceTmp.BudgetSource
                    && budgetTransactionDetailTmp.ReferenceSourceTracking > 0;

        update_recordset budgetTransactionDetailTmp
            setting GroupSourceDocumentHeader = budgetTransactionDetailTmp.SourceDocumentHeader
                where budgetTransactionDetailTmp.GroupSourceDocumentHeader == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetDetailForFocusLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the budget detail data for focus ledger dimension.
    /// </summary>
    private void updateBudgetDetailForFocusLedgerDimension()
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            BudgetBalanceReportingDimensionReference dimensionReference;

            update_recordset budgetTransactionDetailTmp
                setting ReportingDimension = dimensionReference.ReportingDimension
                join dimensionReference
                    where dimensionReference.BudgetLedgerDimension == budgetTransactionDetailTmp.LedgerDimension
                        && dimensionReference.FocusDimensionHierarchy == analysisRequest.parmDimensionHierarchyId();
        }
        else
        {
            DimensionFocusLedgerDimensionReference focusLedgerDimensionReference;

            update_recordset budgetTransactionDetailTmp
                setting FocusLedgerDimension = focusLedgerDimensionReference.FocusLedgerDimension
                join focusLedgerDimensionReference
                    where focusLedgerDimensionReference.AccountEntryLedgerDimension == budgetTransactionDetailTmp.LedgerDimension
                        && focusLedgerDimensionReference.FocusDimensionHierarchy == analysisRequest.parmDimensionHierarchyId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBudgetSummaryData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate budget summary data.
    /// </summary>
    private void generateBudgetSummaryData()
    {
        BudgetAnalysisDimensionSummaryTmp encumbranceSummary = this.getEncumbranceSummary();
        BudgetAnalysisDimensionSummaryTmp preEncumbranceSummary = this.getPreEncumbranceSummary();

        this.insertEncumbranceAndPreEncumbranceWithSameLedgerAccount(encumbranceSummary, preEncumbranceSummary);

        this.deleteInsertedEncumbranceAndPreEncumbrance(encumbranceSummary, preEncumbranceSummary);

        this.insertEncumbranceAndPreEncumbranceWithDifferentLedgerAccount(encumbranceSummary, preEncumbranceSummary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEncumbranceAndPreEncumbranceWithDifferentLedgerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the budget summary data for encumbrance and pre-encumbrance having different ledger account.
    /// </summary>
    /// <param name = "_encumbranceSummary">Budget encumbrancy summary data buffer.</param>
    /// <param name = "_preEncumbranceSummary">Budget pre-encumbrancy summary data buffer.</param>
    private void insertEncumbranceAndPreEncumbranceWithDifferentLedgerAccount(BudgetAnalysisDimensionSummaryTmp _encumbranceSummary, BudgetAnalysisDimensionSummaryTmp _preEncumbranceSummary)
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            insert_recordset budgetAnalysisDimensionSummaryTmp
            (
                ReportingDimension,
                Encumbrance
            )
            select
                ReportingDimension,
                Encumbrance
                from _encumbranceSummary;

            insert_recordset budgetAnalysisDimensionSummaryTmp
            (
                ReportingDimension,
                PreEncumbrance
            )
            select
                ReportingDimension,
                PreEncumbrance
                from _preEncumbranceSummary;
        }
        else
        {
            insert_recordset budgetAnalysisDimensionSummaryTmp
            (
                FocusLedgerDimension,
                Encumbrance
            )
            select
                FocusLedgerDimension,
                Encumbrance
                from _encumbranceSummary;

            insert_recordset budgetAnalysisDimensionSummaryTmp
            (
                FocusLedgerDimension,
                PreEncumbrance
            )
            select
                FocusLedgerDimension,
                PreEncumbrance
                from _preEncumbranceSummary;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEncumbranceAndPreEncumbranceWithSameLedgerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert budget summary data for encumbrance and pre-encumbrance having same ledger account.
    /// </summary>
    /// <param name = "_encumbranceSummary">Budget encumbrancy summary data buffer.</param>
    /// <param name = "_preEncumbranceSummary">Budget pre-encumbrancy summary data buffer.</param>
    private void insertEncumbranceAndPreEncumbranceWithSameLedgerAccount(BudgetAnalysisDimensionSummaryTmp _encumbranceSummary, BudgetAnalysisDimensionSummaryTmp _preEncumbranceSummary)
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            insert_recordset budgetAnalysisDimensionSummaryTmp
            (
                ReportingDimension,
                Encumbrance,
                PreEncumbrance
            )
            select
                ReportingDimension,
                Encumbrance
                from _encumbranceSummary
                join
                    PreEncumbrance
                from _preEncumbranceSummary
                    where _encumbranceSummary.ReportingDimension == _preEncumbranceSummary.ReportingDimension;
        }
        else
        {
            insert_recordset budgetAnalysisDimensionSummaryTmp
            (
                FocusLedgerDimension,
                Encumbrance,
                PreEncumbrance
            )
            select
                FocusLedgerDimension,
                Encumbrance
                from _encumbranceSummary
                join
                    PreEncumbrance
                from _preEncumbranceSummary
                    where _encumbranceSummary.FocusLedgerDimension == _preEncumbranceSummary.FocusLedgerDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInsertedEncumbranceAndPreEncumbrance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the encumbrance and pre-encumbrance summary tmp data which has been added in budget analysis summary.
    /// </summary>
    /// <param name = "_encumbranceSummary">Budget encumbrancy summary data buffer.</param>
    /// <param name = "_preEncumbranceSummary">Budget pre-encumbrancy summary data buffer.</param>
    private void deleteInsertedEncumbranceAndPreEncumbrance(BudgetAnalysisDimensionSummaryTmp _encumbranceSummary, BudgetAnalysisDimensionSummaryTmp _preEncumbranceSummary)
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            delete_from _encumbranceSummary
                exists join budgetAnalysisDimensionSummaryTmp
                    where _encumbranceSummary.ReportingDimension == budgetAnalysisDimensionSummaryTmp.ReportingDimension;

            delete_from _preEncumbranceSummary
                exists join budgetAnalysisDimensionSummaryTmp
                    where _preEncumbranceSummary.ReportingDimension == budgetAnalysisDimensionSummaryTmp.ReportingDimension;
        }
        else
        {
            delete_from _encumbranceSummary
                exists join budgetAnalysisDimensionSummaryTmp
                    where _encumbranceSummary.FocusLedgerDimension == budgetAnalysisDimensionSummaryTmp.FocusLedgerDimension;

            delete_from _preEncumbranceSummary
                exists join budgetAnalysisDimensionSummaryTmp
                    where _preEncumbranceSummary.FocusLedgerDimension == budgetAnalysisDimensionSummaryTmp.FocusLedgerDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEncumbranceSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the encumbrance summary data.
    /// </summary>
    /// <returns><C>BudgetAnalysisDimensionSummaryTmp</C> buffer for encumbrance.</returns>
    private BudgetAnalysisDimensionSummaryTmp getEncumbranceSummary()
    {
        BudgetAnalysisDimensionSummaryTmp encumbranceSummary;

        if (isLedgerBalanceFeatureEnabled)
        {
            insert_recordset encumbranceSummary
            (
                ReportingDimension,
                Encumbrance
            )
            select
                ReportingDimension,
                sum(Amount)
                from budgetTransactionDetailTmp
                    group by budgetTransactionDetailTmp.ReportingDimension
                    where budgetTransactionDetailTmp.EncumbranceType == EncumbranceType::Encumbrance;
        }
        else
        {
            insert_recordset encumbranceSummary
            (
                FocusLedgerDimension,
                Encumbrance
            )
            select
                FocusLedgerDimension,
                sum(Amount)
                from budgetTransactionDetailTmp
                    group by budgetTransactionDetailTmp.FocusLedgerDimension
                    where budgetTransactionDetailTmp.EncumbranceType == EncumbranceType::Encumbrance;
        }

        return encumbranceSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreEncumbranceSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the pre-encumbrance summary data.
    /// </summary>
    /// <returns><C>BudgetAnalysisDimensionSummaryTmp</C> buffer for pre-encumbrance.</returns>
    private BudgetAnalysisDimensionSummaryTmp getPreEncumbranceSummary()
    {
        BudgetAnalysisDimensionSummaryTmp preEncumbranceSummary;

        if (isLedgerBalanceFeatureEnabled)
        {
            insert_recordset preEncumbranceSummary
            (
                ReportingDimension,
                Encumbrance
            )
            select
                ReportingDimension,
                sum(Amount)
                from budgetTransactionDetailTmp
                    group by budgetTransactionDetailTmp.ReportingDimension
                    where budgetTransactionDetailTmp.EncumbranceType == EncumbranceType::PreEncumbrance;
        }
        else
        {
            insert_recordset preEncumbranceSummary
            (
                FocusLedgerDimension,
                preEncumbrance
            )
            select
                FocusLedgerDimension,
                sum(Amount)
                from budgetTransactionDetailTmp
                    group by budgetTransactionDetailTmp.FocusLedgerDimension
                    where budgetTransactionDetailTmp.EncumbranceType == EncumbranceType::PreEncumbrance;
        }

        return preEncumbranceSummary;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>