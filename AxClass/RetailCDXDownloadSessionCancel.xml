<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXDownloadSessionCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Retail CDX download session cancellation.
/// </summary>
public class RetailCDXDownloadSessionCancel extends RunBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailCDXDownloadSessionDataStore downloadSessionDataStore, firstDownloadSessionDataStore;
        FormDataSource callingFormDataSource;
        FormRun caller;

        int totalSelectedRecords, totalUpdatedRecords;
        str msg = strFmt("@Retail:SessionDataStoreCanceledByUser", curUserId());

        if (!_args || !_args.dataset() || !_args.record() || !_args.caller())
        {
            return;
        }

        if (_args.dataset() == tableNum(RetailCDXDownloadSessionDataStore))
        {
            caller = _args.caller();
            callingFormDataSource = FormDataUtil::getFormDataSource(_args.record());

            if (callingFormDataSource)
            {
                firstDownloadSessionDataStore = callingFormDataSource.getFirst(true) ? callingFormDataSource.getFirst(true) : callingFormDataSource.cursor();

                // Get dialog message wrt the number of records selected on the grid.
                str dialogStr = RetailCDXDownloadSessionCancel::getDialogMessage(caller.gridSelectedCount(), firstDownloadSessionDataStore);

                if (Box::yesNo(dialogStr, DialogButton::Yes) == DialogButton::Yes)
                {
                    downloadSessionDataStore = firstDownloadSessionDataStore;
                    while (downloadSessionDataStore)
                    {
                        totalSelectedRecords++;

                        if (downloadSessionDataStore.isCancelable())
                        {
                            ttsBegin;

                            totalUpdatedRecords++;
                            downloadSessionDataStore.Status = RetailCDXDownloadSessionStatus::Canceled;
                            downloadSessionDataStore.Message = msg;
                            downloadSessionDataStore.update();

                            ttsCommit;
                        }

                        downloadSessionDataStore = callingFormDataSource.getNext();
                    }

                    info(strFmt("@Retail:CancelDownloadSessionCompletionLabel", totalUpdatedRecords, totalSelectedRecords));
                }

                callingFormDataSource.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDialogMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets message to display on dialog.
    /// </summary>
    /// <returns>Formatted string.</returns>
    private static str getDialogMessage(int _selectedRowsCount, RetailCDXDownloadSessionDataStore _downloadSessionDataStore)
    {
        str dialogMsg;
        const int singleSelect = 1;

        if (_selectedRowsCount > singleSelect)
        {
            dialogMsg = strFmt("@Retail:CancelDownloadSessionConfirmationMultiSelectLabel", _selectedRowsCount);
        }
        else
        {
            RetailCDXDownloadSession downloadSession;

            select firstOnly JobID, Session from downloadSession
                where downloadSession.RecId == _downloadSessionDataStore.Session;

            // Do you want to cancel download session: %1, Job: %2, for database: %3?
            dialogMsg = strFmt("@Retail:CancelDownloadSessionConfirmationLabel",downloadSession.Session, downloadSession.JobID, _downloadSessionDataStore.dataStoreName());
        }
        return dialogMsg;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>