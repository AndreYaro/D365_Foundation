<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostProdIndirect</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventCostProdIndirect</c> class calculates an indirect cost based on a cost amount or cost
/// breakdown.
/// </summary>
/// <remarks>
/// This class is used to calculate partially indirect costs that must be added to a production order
/// to calculate the full indirect cost. During the ending of a production order methods from the
/// <c>prodUpdHistoricalCost</c> class are used.
/// </remarks>
class InventCostProdIndirect extends InventCostIndirect
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRouteConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the indirect cost for a route transaction.
    /// </summary>
    /// <param name="_routeJobType">
    ///    A job type.
    /// </param>
    /// <param name="_routeTransList">
    ///    A list of route transactions as <c>ProdRouteTrans</c> records.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The job type is not setup or process.
    /// </exception>
    protected void addRouteConsumption(
        RouteJobType        _routeJobType,
        RecordSortedList    _routeTransList
        )
    {
        ProdRouteTrans              prodRouteTrans;

        boolean found = _routeTransList.first(prodRouteTrans);

        while (found)
        {
            switch (_routeJobType)
            {
                case RouteJobType::Setup :
                    if (prodRouteTrans.prodRoute().routeGroup().CalcSetUp == NoYes::Yes
                     && prodRouteTrans.TransType  ==  ProdRouteTransType::Time)
                    {
                        costCalcTransData.addCalcTrans(BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, prodRouteTrans.routeCostCategory().CostGroupId),
                                                       BOMCalcTransMap::calcHourUnit(),
                                                       ItemCalcType::Setup,
                                                       '',
                                                       prodRouteTrans.Amount,
                                                       0,
                                                       prodRouteTrans.Hours,
                                                       0,
                                                       indirectData.parmLevel(),
                                                       '');
                    }
                    break;

                case RouteJobType::Process :
                    if ((prodRouteTrans.prodRoute().routeGroup().CalcProc == NoYes::Yes) || (!prodRouteTrans.prodRoute())
                     && prodRouteTrans.TransType == ProdRouteTransType::Time)
                    {
                        costCalcTransData.addCalcTrans(BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, prodRouteTrans.routeCostCategory().CostGroupId),
                                                       BOMCalcTransMap::calcHourUnit(),
                                                       ItemCalcType::Process,
                                                       '',
                                                       prodRouteTrans.Amount,
                                                       0,
                                                       prodRouteTrans.Hours,
                                                       0,
                                                       indirectData.parmLevel(),
                                                       '');
                    }
                    else if (prodRouteTrans.prodRoute().routeGroup().CalcQty == NoYes::Yes
                          && prodRouteTrans.TransType == ProdRouteTransType::Qty)
                    {
                        costCalcTransData.addCalcTrans(BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, prodRouteTrans.routeCostCategory().CostGroupId),
                                                       '',
                                                       ItemCalcType::Qty,
                                                       '',
                                                       prodRouteTrans.Amount,
                                                       0,
                                                       prodRouteTrans.QtyGood + prodRouteTrans.QtyError,
                                                       0,
                                                       indirectData.parmLevel(),
                                                       '');
                    }
                    else if (prodRouteTrans.ServiceItemId && prodRouteTrans.TransType == ProdRouteTransType::Qty)
                    {
                        // Lean outsourcing case
                        CostGroupId costGroupId = BOMCostGroup::costGroupId(
                            CostGroupType::DirectOutsourcing,
                            InventTable::find(prodRouteTrans.ServiceItemId).CostGroupId);
                        costCalcTransData.addCalcTrans(costGroupId,
                                                       '',
                                                       ItemCalcType::Service,
                                                       '',
                                                       prodRouteTrans.Amount,
                                                       0,
                                                       prodRouteTrans.QtyGood + prodRouteTrans.QtyError,
                                                       0,
                                                       indirectData.parmLevel(),
                                                       '');
                    }
                    break;

                case RouteJobType::Burden:
                    return;

                default :
                    throw error(strFmt("@SCM:RouteJobTypeNotSupported", enum2Str(_routeJobType)));
            }

            found = _routeTransList.next(prodRouteTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the indirect cost for a route transaction.
    /// </summary>
    /// <param name="_prodIndirectData">
    ///    A route transaction for which an indirect cost should be calculated.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The job type is not setup or process.
    /// </exception>
    public void calcRoute(InventCostProdIndirectData_Route  _prodIndirectData)
    {
        this.init(_prodIndirectData);

        if (_prodIndirectData.parmJobTypeRouteTransListMap())
        {
            MapEnumerator mapEnum = _prodIndirectData.parmJobTypeRouteTransListMap().getEnumerator();

            while (mapEnum.moveNext())
            {
                // Now add the consumption to the costTransData object
                this.addRouteConsumption(mapEnum.currentKey(), mapEnum.currentValue());
            }
        }

        this.addToJournalIndirectCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>CostCalcTransData</c> class that will later be passed to a
    /// costing sheet for calculation.
    /// </summary>
    /// <param name="_indirectData">
    /// The inventory transactions for which the indirect cost should be calculated.
    /// </param>
    protected void init(InventCostIndirectData _indirectData)
    {
        indirectData = _indirectData;
        InventCostProdIndirectData prodIndirectData = _indirectData;

        costCalcTransData = CostCalcTransData::construct(prodIndirectData.parmFinishedGood(),
                                                         prodIndirectData.parmFinishedQty(),
                                                         transDate,
                                                         prodIndirectData.parmLevel(),
                                                         prodIndirectData.parmInventSiteId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();

        // Initialize class that will generate the indirect cost records
        journalIndirectCost = ProdJournalIndirectCost::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static InventCostProdIndirect construct()
    {
        return new InventCostProdIndirect();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventCostProdAdjust</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of this class for a given <c>InventCostProdAdjust</c> instance.
    /// </summary>
    /// <param name="_inventCostProdAdjust">
    ///    The <c>InventCostProdAdjust</c> instance that holds the data that is required to initialize this
    ///    class.
    /// </param>
    /// <returns>
    ///    An initialized instance of this class.
    /// </returns>
    /// <remarks>
    ///    When no <c>LedgerVoucher</c> instance is passed, the indirect cost will not be added to a ledger
    ///    voucher. Instead, they will be created and then be posted separately.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    No <c>InventCostProdAdjust</c> class is given.
    /// </exception>
    public static InventCostProdIndirect newFromInventCostProdAdjust(InventCostProdAdjust   _inventCostProdAdjust)
    {
        InventCostProdIndirect    inventCostProdIndirect;

        // A ledgerVoucher needs to be passed
        if (!_inventCostProdAdjust)
        {
            throw error("@SYS25407");
        }

        // Check if the inventCostProdAdjust has been initalized with a ledger Voucher
        if (_inventCostProdAdjust.parmLedgerVoucher() != null)
        {
            inventCostProdIndirect = InventCostProdIndirect::newFromLedgerVoucher(_inventCostProdAdjust.parmLedgerVoucher());
        }
        else
        {
            // Create instance
            inventCostProdIndirect = InventCostProdIndirect::construct();
            inventCostProdIndirect.parmVoucher(_inventCostProdAdjust.parmVoucher());
            inventCostProdIndirect.parmTransDate(_inventCostProdAdjust.parmTransDate());
        }

        return inventCostProdIndirect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>InventCostProdIndirect</c> class and initializes it with a
    ///    <c>LedgerVoucher</c> object.
    /// </summary>
    /// <param name="_ledgerVoucher">
    ///    The instance of the <c>LedgerVoucher</c> class.
    /// </param>
    /// <returns>
    ///    An initialized instance of the <c>InventCostProdIndirect</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The <c>LedgerVoucher</c> object was not specified.
    /// </exception>
    public static InventCostProdIndirect newFromLedgerVoucher(
        LedgerVoucher   _ledgerVoucher)
    {
        if (_ledgerVoucher == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        InventCostProdIndirect inventCostProdIndirect = InventCostProdIndirect::construct();
        inventCostProdIndirect.initFromLedgerVoucher(_ledgerVoucher);

        return inventCostProdIndirect;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>