<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTotalsSummaryController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     This class is responsible for calculating and storing purchase order totals and encumbrance summary amounts
///     in <c>PurchTotalsSummary</c> and <c>PurchEncumbranceSummary</c> tables respectively. These amounts are displayed on
///     purchase order details and list pages in factboxes.
/// </summary>
class PurchTotalsSummaryController
{
    PurchId purchId;
    boolean invalidateTotalsRecord;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the fields that affect totals amounts have been updated and sets the result in a class level variable.
    /// </summary>
    /// <param name="_common">
    ///     Buffer for the record being updated
    /// </param>
    /// <remarks>
    ///     This class handles table record updates in two steps. First <c>checkFields()</c> is called from table <c>update()</c> method before the <c>super()</c> call
    ///     to check if any of the fields that affects purchase order total amounts has been modified and a class level flag is set to indicate so.
    ///     Calling <c>checkFields()</c> before <c>super()</c> is needed becuase the <c>super()</c> call resets the original buffer. After the <c>super()</c> is called and
    ///     the updates have been written to the table a call to <c>onUpdate()</c> is made to write the class level varaible indicating the result from
    ///     <c>checkFields()</c> to <c>PurchTotalsSummary</c> table.
    /// </remarks>
    public void checkFields(Common _common)
    {
        PurchTable  purchTable;
        PurchLine   purchLine;
        MarkupTrans markupTrans;

        if (!_common || !PurchParameters::find().AutomaticFactBoxUpdateOnPO_PSN)
        {
            return;
        }

        switch (_common.TableId)
        {
            case tableNum(PurchTable):
                purchTable = _common as PurchTable;
                invalidateTotalsRecord = invalidateTotalsRecord || (purchTable.orig().CurrencyCode != purchTable.CurrencyCode);
                invalidateTotalsRecord  = invalidateTotalsRecord || (purchTable.orig().InclTax != purchTable.InclTax);
                if (TaxParameters::find().JournalInclTax)
                {
                    invalidateTotalsRecord  = invalidateTotalsRecord || (purchTable.orig().CashDisc != purchTable.CashDisc);
                }
                break;

            case tableNum(PurchLine):
                purchLine = _common as PurchLine;
                invalidateTotalsRecord  = invalidateTotalsRecord || (purchLine.orig().LineAmount != purchLine.LineAmount);
                invalidateTotalsRecord  = invalidateTotalsRecord || (purchLine.orig().PurchQty != purchLine.PurchQty);
                invalidateTotalsRecord  = invalidateTotalsRecord || (purchLine.orig().PurchPrice != purchLine.PurchPrice);
                invalidateTotalsRecord  = invalidateTotalsRecord || (purchLine.orig().TaxGroup != purchLine.TaxGroup);
                invalidateTotalsRecord  = invalidateTotalsRecord || (purchLine.orig().TaxItemGroup != purchLine.TaxItemGroup);
                break;

            case tableNum(MarkupTrans):
                markupTrans = _common as MarkupTrans;
                invalidateTotalsRecord  = invalidateTotalsRecord || (markupTrans.orig().MarkupCategory != markupTrans.MarkupCategory);
                invalidateTotalsRecord  = invalidateTotalsRecord || (markupTrans.orig().Value != markupTrans.Value);
                invalidateTotalsRecord  = invalidateTotalsRecord || (markupTrans.orig().CurrencyCode != markupTrans.CurrencyCode);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(PurchId _purchId)
    {
        purchId = _purchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method will invalidate the totals record if it was marked to be invalidated from the checkFields() and
    ///     then notifies the calling datasource about the invalid totals record.
    ///     This method gets called after the update() is called on the table.
    /// </summary>
    /// <param name="_common">
    ///     Table buffer to notify about the invalidation of the record
    /// </param>
    public void onUpdate(Common _common)
    {
        PurchTable  purchTable;
        PurchLine   purchLine;

        if (!_common || !PurchParameters::find().AutomaticFactBoxUpdateOnPO_PSN)
        {
            return;
        }

        if (invalidateTotalsRecord)
        {
            PurchTotalsSummaryController::setValidFlag(purchId, tableNum(PurchTotalsSummary), false);

            switch (_common.TableId)
            {
                case tableNum(PurchTable):
                    purchTable = _common as PurchTable;
                    PurchTotalsSummaryController::updateTotals(purchTable, tableNum(PurchTotalsSummary));
                    break;

                case tableNum(PurchLine):
                    purchLine = _common as PurchLine;
                    PurchTotalsSummaryController::updateTotals(PurchTable::find(purchLine.PurchId), tableNum(PurchTotalsSummary));
                    break;

                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAndUpdateTotalsSummary</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates or gets the totals for the purchase order and inserts the data in the <c>PurchTotalsSummary</c> table.
    /// </summary>
    /// <param name="_purchTable">
    ///     <c>PurchTable</c> record buffer for which to update the totals.
    /// </param>
    /// <param name="_purchTotalsSummary">
    ///     <c>PurchTotalsSummary</c> record buffer that needs to be updated; optional.
    /// </param>
    /// <param name="_purchTotals">
    ///     <c>PurchTotals</c> object that carries the totals values calculated; optional.
    /// </param>
    /// <returns>
    ///     true - indiating that the <c>PurchTotalsSummary</c> record was updated.
    /// </returns>
    public static boolean calculateAndUpdateTotalsSummary(PurchTable _purchTable, PurchTotalsSummary _purchTotalsSummary = null, PurchTotals _purchTotals = null)
    {
        ttsbegin;
        if (!_purchTotals)
        {
            _purchTotals = PurchTotals::newPurchTable(_purchTable, PurchUpdate::All);
            _purchTotals.calc();
        }

        if (!_purchTotalsSummary || !_purchTotalsSummary.selectForUpdate())
        {
            _purchTotalsSummary.data(PurchTotalsSummary::findByPurchId(_purchTable.PurchId, true));
        }
        _purchTotalsSummary.PurchId = _purchTable.PurchId;
        _purchTotalsSummary.CurrencyCode = _purchTotals.purchCurrency();
        _purchTotalsSummary.NetLines = _purchTotals.purchBalance();
        _purchTotalsSummary.LineDiscount = _purchTotals.purchLineDisc();
        _purchTotalsSummary.Discounts = _purchTotals.purchEndDisc();
        _purchTotalsSummary.SalesTax = _purchTotals.purchTaxTotal();
        _purchTotalsSummary.MiscCharges = _purchTotals.purchMarkup();
        _purchTotalsSummary.RoundOff = _purchTotals.purchRoundOff();
        _purchTotalsSummary.UseTax = _purchTotals.purchUseTax();
        _purchTotalsSummary.OtherCharges = _purchTotals.purchOtherMiscCharges();
        _purchTotalsSummary.TotalAmount = _purchTotals.purchTotalAmount();
        _purchTotalsSummary.CashDiscount = _purchTotals.purchCashDiscAmount();
        _purchTotalsSummary.IsValid = true;
        if (!_purchTotalsSummary)
        {
            _purchTotalsSummary.insert();
        }
        else
        {
            _purchTotalsSummary.update();
        }
        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates and returns an object of <c>PurchTotalsSummaryController</c> for the given purchase order id.
    /// </summary>
    /// <param name="_purchId">
    ///     Purchase order Id
    /// </param>
    /// <returns>
    ///     Object of <c>PurchTotalsSummaryController</c>
    /// </returns>
    public static PurchTotalsSummaryController construct(PurchId _purchId)
    {
        PurchTotalsSummaryController purchTotalsSummaryController = new PurchTotalsSummaryController(_purchId);
        return purchTotalsSummaryController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidateEncumbranceSummaryRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>isValid</c> field of the <c>PurchEncumbranceSummary</c> table to false so
    /// that the next time the <c>updateTotals</c> method is called the table will be updated.
    /// </summary>
    /// <param name="_purchId">
    /// The <c>PurchId</c> value of the record to invalidate.
    /// </param>
    public static void invalidateEncumbranceSummaryRecord(PurchId _purchId)
    {
        PurchTotalsSummaryController::setValidFlag(_purchId, tableNum(PurchEncumbranceSummary), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks the table buffer to see from which table record was deleted,
    ///     If a record is deleted from a table which affects totals then the totals record is invalidated.
    /// </summary>
    /// <param name="_common">
    ///     Buffer for delted record
    /// </param>
    public static void onDelete(Common _common)
    {
        PurchTable          purchTable;
        PurchLine           purchLine;
        MarkupTrans         markupTrans;
        PurchTotalsSummary  purchTotalsSummary;

        if (!_common || !PurchParameters::find().AutomaticFactBoxUpdateOnPO_PSN)
        {
            return;
        }

        switch (_common.TableId)
        {
            case tableNum(PurchLine):
            purchLine = _common as PurchLine;
            purchTotalsSummary = PurchTotalsSummary::findByPurchId(purchLine.PurchId, true);
            PurchTotalsSummaryController::setValidFlag(purchLine.PurchId, tableNum(PurchTotalsSummary), false, purchTotalsSummary);
            break;

            case tableNum(MarkupTrans):
            markupTrans = _common as MarkupTrans;
            purchTable = PurchTable::findRecId(markupTrans.TransRecId);
            PurchTotalsSummaryController::setValidFlag(purchTable.PurchId, tableNum(PurchTotalsSummary), false);
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onInsert</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks the table buffer to see in which table record was inserted.
    ///     If a record is inserted in PurchTable then records in totals tables are created,
    ///     otherwise records are invalidated if the insertion is in some other table that affects totals
    /// </summary>
    /// <param name="_common">
    ///     Buffer for new record
    /// </param>
    public static void onInsert(Common _common)
    {
        PurchTable          purchTable;
        PurchLine           purchLine;
        MarkupTrans         markupTrans;
        PurchTotalsSummary  purchTotalsSummary;

        if (!_common || !PurchParameters::find().AutomaticFactBoxUpdateOnPO_PSN)
        {
            return;
        }

        switch (_common.TableId)
        {
            case tableNum(PurchTable):
                purchTable = _common as PurchTable;
                PurchTotalsSummary::createRecord(purchTable.PurchId, purchTable.CurrencyCode);
				
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && (LedgerParameters::find().IsEncumbranceProcessEnabled == NoYes::Yes))
                {
                    PurchEncumbranceSummary::createRecord(purchTable.PurchId, purchTable.CurrencyCode);
                }

                break;

            case tableNum(PurchLine):
                purchLine = _common as PurchLine;
                purchTotalsSummary = PurchTotalsSummary::findByPurchId(purchLine.PurchId, true);
                PurchTotalsSummaryController::setValidFlag(purchLine.PurchId, tableNum(PurchTotalsSummary), false, purchTotalsSummary);
                break;

            case tableNum(MarkupTrans):
                markupTrans = _common as MarkupTrans;
                purchTable = PurchTable::findRecId(markupTrans.TransRecId);
                PurchTotalsSummaryController::setValidFlag(purchTable.PurchId, tableNum(PurchTotalsSummary), false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPostingSuccess</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Invalidates the <c>PurchEncumbranceSummary</c> record if some document related to purchase orders is posted.
    /// </summary>
    /// <param name="_postedJournalSet">
    ///     A <c>Set</c> object containing posted journal entries
    /// </param>
    public static void onPostingSuccess(Set _postedJournalSet)
    {
        SetEnumerator       enumerator;
        Common              commonBuffer;
        VendInvoiceJour     vendInvoiceJourLocal;
        VendPurchOrderJour  vendPurchOrderJourLocal;

        if (!isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
            || !PurchParameters::find().AutomaticFactBoxUpdateOnPO_PSN
            || LedgerParameters::find().IsEncumbranceProcessEnabled == NoYes::No)
        {
            return;
        }

        if (_postedJournalSet)
        {
            enumerator = _postedJournalSet.getEnumerator();
            while (enumerator.moveNext())
            {
                commonBuffer = enumerator.current();

                switch (commonBuffer.TableId)
                {
                    case tableNum(VendPurchOrderJour):
                        vendPurchOrderJourLocal = commonBuffer as VendPurchOrderJour;
                        PurchTotalsSummaryController::invalidateEncumbranceSummaryRecord(vendPurchOrderJourLocal.PurchId);
                        PurchTotalsSummaryController::populateEncumbranceSummaryValues(vendPurchOrderJourLocal.PurchId);
                        break;

                    case tableNum(VendInvoiceJour):
                        vendInvoiceJourLocal = commonBuffer as VendInvoiceJour;
                        PurchTotalsSummaryController::invalidateEncumbranceSummaryRecord(vendInvoiceJourLocal.PurchId);
                        PurchTotalsSummaryController::populateEncumbranceSummaryValues(vendInvoiceJourLocal.PurchId);
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateEncumbranceSummaryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>PurchEncumbranceSummary</c> record with encumbrance and relieving amounts for the purchase order.
    /// </summary>
    /// <param name="_purchId">
    /// Purchase order id for which to populate the record.
    /// </param>
    private static void populateEncumbranceSummaryValues(PurchId _purchId)
    {
        PurchTable purchTable;

        if (_purchId
            && isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
            && PurchParameters::find().AutomaticFactBoxUpdateOnPO_PSN
            && LedgerParameters::find().IsEncumbranceProcessEnabled == NoYes::Yes)
        {
            purchTable = PurchTable::find(_purchId);

            PurchTotalsSummaryController::updateTotals(purchTable, tableNum(PurchEncumbranceSummary));
            PurchTotalsSummaryController::setValidFlag(purchTable.PurchId, tableNum(PurchEncumbranceSummary), false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValidFlag</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the summary record's IsValid flag only if the new value is different from the one already stored.
    /// </summary>
    /// <param name="_purchId">
    ///     Purchase order id for which to update the record
    /// </param>
    /// <param name="_tableId">
    ///     Table id of the summary table
    /// </param>
    /// <param name="_isValid">
    ///     Value for the IsValid flag
    /// </param>
    /// <param name="_purchSummary">
    ///     PurchTotalsSummary or PurchEncumbranceSummary table whose record needs to be updated
    /// </param>
    private static void setValidFlag(PurchId _purchId, tableId _tableId, boolean _isValid = true, Common _purchSummary = null)
    {
        PurchTotalsSummary      purchTotalsSummary;
        PurchEncumbranceSummary purchEncumbranceSummary;

        switch (_tableId)
        {
            case tableNum(PurchTotalsSummary):

                purchTotalsSummary = _purchSummary as PurchTotalsSummary;

                if (!purchTotalsSummary ||!purchTotalsSummary.selectForUpdate())
                {
                    purchTotalsSummary = PurchTotalsSummary::findByPurchId(_purchId, true);
                }

                if (purchTotalsSummary && purchTotalsSummary.IsValid!=_isValid)
                {
                    purchTotalsSummary.IsValid = _isValid;
                    ttsbegin;
                    purchTotalsSummary.update();
                    ttscommit;
                }
                break;

            case tableNum(PurchEncumbranceSummary):
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && (LedgerParameters::find().IsEncumbranceProcessEnabled == NoYes::Yes))
                {
                    purchEncumbranceSummary = _purchSummary as PurchEncumbranceSummary;

                    if (!purchEncumbranceSummary ||!purchEncumbranceSummary.selectForUpdate())
                    {
                        purchEncumbranceSummary = PurchEncumbranceSummary::findByPurchId(_purchId, true);
                    }

                    if (purchEncumbranceSummary && purchEncumbranceSummary.IsValid!=_isValid)
                    {
                        purchEncumbranceSummary.IsValid = _isValid;
                        ttsbegin;
                        purchEncumbranceSummary.update();
                        ttscommit;
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the totals or encumbrance amounts for the purchase order, if invalid, based on the table id passed.
    /// </summary>
    /// <param name="_purchTable">
    ///     <c>PurcTable</c> record buffer for which to update the totals
    /// </param>
    /// <param name="_tableId">
    ///     Table Id of the table whose record needs to be updated
    /// </param>
    /// <param name="_purchSummary">
    ///     The <c>PurchTotalsSummary</c> or <c>PurchEncumbranceSummary</c> table whose record needs to be updated
    /// </param>
    /// <param name="_refreshButton">
    ///     A <c>boolean</c> value that signfies whether this method is being called from the <c>Refresh</c> button.
    ///     If it is then totals will be updated even if the <c>AutomaticFactBoxUpdateOnPO_PSN</c> parameter is not set.
    /// </param>
    /// <returns>
    ///     true if a summary record was updated, false otherwise
    /// </returns>
    public static boolean updateTotals(PurchTable _purchTable, tableId _tableId, Common _purchSummary = null, boolean _refreshButton = false)
    {
        PurchTotalsSummary                      purchTotalsSummary;
        AccountingDistributionOrderSummaryCalc  accountingDistributionOrderSummaryCalc;
        PurchEncumbranceSummary                 purchEncumbranceSummary;

        boolean recordUpdated = false;

        if (_refreshButton || PurchParameters::find().AutomaticFactBoxUpdateOnPO_PSN)
        {
        switch (_tableId)
        {
            case tableNum(PurchTotalsSummary):

                purchTotalsSummary = _purchSummary as PurchTotalsSummary;
                recordUpdated = PurchTotalsSummaryController::calculateAndUpdateTotalsSummary(_purchTable, purchTotalsSummary);
                break;

            case tableNum(PurchEncumbranceSummary):
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && (LedgerParameters::find().IsEncumbranceProcessEnabled == NoYes::Yes))
                {
                    purchEncumbranceSummary = _purchSummary as PurchEncumbranceSummary;

                    if (!purchEncumbranceSummary ||!purchEncumbranceSummary.selectForUpdate())
                    {
                        purchEncumbranceSummary = PurchEncumbranceSummary::findByPurchId(_purchTable.PurchId, true);
                    }

                    if (!purchEncumbranceSummary)
                    {
                        purchEncumbranceSummary = PurchEncumbranceSummary::createRecord(_purchTable.PurchId, _purchTable.CurrencyCode);
                    }

                    if (!purchEncumbranceSummary.IsValid)
                    {
                        accountingDistributionOrderSummaryCalc = new AccountingDistributionOrderSummaryCalc();
                        accountingDistributionOrderSummaryCalc.populateEncumbranceSummaryAmount(_purchTable.PurchId);

                        purchEncumbranceSummary.LastCalculatedOn = DateTimeUtil::getSystemDateTime();
                        purchEncumbranceSummary.CurrencyCode = _purchTable.CurrencyCode;
                        purchEncumbranceSummary.EncumberedAmount = accountingDistributionOrderSummaryCalc.parmTotalEncumbered();
                        purchEncumbranceSummary.RelievedAmount = accountingDistributionOrderSummaryCalc.parmTotalRelieved();
                        purchEncumbranceSummary.IsValid = true;

                        ttsbegin;
                        purchEncumbranceSummary.update();
                        ttscommit;

                        recordUpdated = true;
                    }
                }
                break;
        }
        }

        return recordUpdated;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>