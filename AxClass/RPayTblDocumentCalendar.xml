<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTblDocumentCalendar</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates time list from calendar.
/// </summary>
public class RPayTblDocumentCalendar implements RPayTblIDocument
{
    RPayTblTimeList     tblTimeList;
    RHRMEmplTable       emplTable;

    StartDate           startDate, employmentDate;
    EndDate             endDate;
    RHRMEmplId          emplId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFromCalendar</Name>
				<Source><![CDATA[
    private void createFromCalendar(RPayCalendarId _calendarId, RPayFormType _formType)
    {
        RPayTblTimeTable        tblTimeTable;
        RPayCalendarDateLine    calendarDateLine;

        while select PayTblTimeTypeCalc, PayTblTimeCode, PayFormType from tblTimeTable
            where tblTimeTable.PayFormType == _formType
            exists join calendarDateLine
                where calendarDateLine.PayCalendarTimeCode  == tblTimeTable.PayTblTimeCode  &&
                    calendarDateLine.CalendarId             == _calendarId                  &&
                    calendarDateLine.TransDate              >= startDate                    &&
                    calendarDateLine.TransDate              <= endDate
        {
            this.createFromTimeCode(_calendarId, tblTimeTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromTimeCode</Name>
				<Source><![CDATA[
    private void createFromTimeCode(RPayCalendarId _calendarId, RPayTblTimeTable    _tblTimeTable)
    {
        RPayDayHour             currentHr, prevHr;
        TransDate               currentDate;
        Stack                   dateStack = new Stack();
        StartDate               periodStartDate;
        EndDate                 periodEndDate;
        #timeConstants

        prevHr = -maxInt();

        for (currentDate = startDate; currentDate <= endDate; ++currentDate)
        {
            if (RHRMEmploymentStatus::Employed == emplTable.employmentStatusOnDate(currentDate))
            {
                currentHr = RPayCalendarDate::calcDefinedSeconds(_calendarId, currentDate, _tblTimeTable.PayTblTimeCode) / #SecondsPerHour;
            }
            else
            {
                currentHr = 0;
            }

            if (currentHr != prevHr || dayOfMth(currentDate) == 1)
            {
                if (dateStack.qty())
                {
                    [periodStartDate] = dateStack.pop();
                    periodEndDate     = currentDate - 1;
                    this.insertPeriod2List(periodStartDate, periodEndDate, prevHr, _tblTimeTable.PayTblTimeCode, _calendarId, _tblTimeTable.PayFormType, emplTable.EmployeeId);
                }

                dateStack.push([currentDate]); //start of the subperiod

                prevHr = currentHr;
            }
        }

        if (dateStack.qty())
        {
            [periodStartDate] = dateStack.pop();
            periodEndDate     = endDate;
            this.insertPeriod2List(periodStartDate, periodEndDate, currentHr, _tblTimeTable.PayTblTimeCode, _calendarId, _tblTimeTable.PayFormType, emplTable.EmployeeId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTimeList</Name>
				<Source><![CDATA[
    private void createTimeList()
    {
        tblTimeList = new RPayTblTimeList();
        emplTable   = RHRMEmplTable::find(emplId);

        this.createFromCalendar(emplTable.PayCalendarId, emplTable.PayFormType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimeList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets time list.
    /// </summary>
    /// <returns>
    /// The <c>RPayTblTimeList</c> list object.
    /// </returns>
    public RPayTblTimeList getTimeList()
    {
        if (!tblTimeList)
        {
            this.createTimeList();
        }

        return tblTimeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPeriod2List</Name>
				<Source><![CDATA[
private void insertPeriod2List(StartDate _startDate,
                                   EndDate _endDate,
                                   RPayDayHour _hours,
                                   RPayTblTimeCode _timeCode,
                                   RPayCalendarId _calendarId,
                                   RPayFormType _formType,
                                   RHRMEmplId   _emplId)
    {
        RPayTblTime         tblTime;
        RPayTblDimension    tblDimension;

        if (_hours || (_startDate >= emplTable.PayResignedDate && _hours == 0))
        {
            tblTime      = new RPayTblTime();
            tblDimension = tblTime.dimension();

            tblDimension.parmCalendarId(_calendarId);
            tblDimension.parmPayFormType(_formType);
            tblDimension.parmTimeCode(_timeCode);
            tblDimension.parmCorrectedPeriod(dateEndMth(_endDate));

            tblDimension.clone(tblTime.dimension());
            tblTime.parmStartDate(_startDate);
            tblTime.parmEndDate(_endDate);
            tblTime.parmHours(_hours);
            tblTime.parmSrcDocumentAttr(tableNum(RPayCalendarTable), 0);

            tblTimeList.addEnd(tblTime);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class instance from time context.
    /// </summary>
    /// <param name="_tblContext">
    /// The time context.
    /// </param>
    public void new(RPayTblContext _tblContext)
    {
        emplId      = _tblContext.parmEmpId();
        startDate   = _tblContext.parmStartDate();
        endDate     = _tblContext.parmEndDate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>