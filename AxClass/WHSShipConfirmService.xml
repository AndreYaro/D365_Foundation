<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipConfirmService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The service class that confirms shipments
/// </summary>
public class WHSShipConfirmService extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>shipConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ship confirms the load or shipment.
    /// </summary>
    /// <param name = "_contract">Holds the parameters used to determine which
    ///  loads/shipments to ship confirm.</param>
    public void shipConfirm(WHSShipConfirmContract _contract)
    {
        if (!_contract)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        this.modfiyQueryToFilterUnconfirmableLoads(_contract.parmQuery());
        QueryRun shipConfirmLoads	= new QueryRun(_contract.parmQuery());
        
        WHSLoadDirection loadDirection = this.getLoadDirectionFromMenuItemName(_contract.parmMenuItemName());

        List loadIds = this.getLoadIds(shipConfirmLoads, loadDirection);

        if (loadDirection == WHSLoadDirection::Outbound)
        {
            WHSShipConfirm shipConfirm = WHSShipConfirm::construct();
            if (_contract.parmLoadShippedDatesPacked())
            {
                shipConfirm.parmLoadsShippedDates(Map::create(_contract.parmLoadShippedDatesPacked()));
            }
            shipConfirm.shipConfirmAllLoads(loadIds);
        }
        else if (loadDirection == WHSLoadDirection::Inbound)
        {
            WHSPostPackingSlip::shipConfirmAllLoads(loadIds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modfiyQueryToFilterUnconfirmableLoads</Name>
				<Source><![CDATA[
    private void modfiyQueryToFilterUnconfirmableLoads(Query _query)
    {
        QueryBuildDataSource qbdsLoadLine = _query.dataSourceName(queryDatasourceStr(WHSLoadShipConfirm, WHSLoadLine));
        if (!qbdsLoadLine)
        {
            return;
        }

        QueryBuildRange qbrLoadLineQty = SysQuery::findOrCreateRange(qbdsLoadLine, fieldNum(WHSLoadLine, Qty));
        if (qbrLoadLineQty.value())
        {
            return;
        }

        qbrLoadLineQty.value('>0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLoadDirectionFromMenuItemName</Name>
				<Source><![CDATA[
    private WHSLoadDirection getLoadDirectionFromMenuItemName(MenuItemName _menuItemName)
    {
        WHSLoadDirection loadDirection;

        if (_menuItemName == menuItemActionStr(WHSOutboundShipConfirm) ||
            _menuItemName == menuItemActionStr(WHSOutboundShipmentConfirm) ||
            (_menuItemName == menuItemActionStr(WHSShipConfirm) && WHSShipConfirmServiceImplementsSplitShipmentInBatchFlight::instance().isEnabled()))
        {
            loadDirection = WHSLoadDirection::Outbound;
        }

        if (_menuItemName == menuItemActionStr(WHSInboundShipConfirm))
        {
            loadDirection = WHSLoadDirection::Inbound;
        }

        return loadDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLoadIds</Name>
				<Source><![CDATA[
    private List getLoadIds(QueryRun _shipConfirmLoads, WHSLoadDirection _loadDirection)
    {
        List loadIdList = new List(Types::String);

        while (_shipConfirmLoads.next())
        {
            WHSLoadTable loadTable = _shipConfirmLoads.get(tableNum(WHSLoadTable));

            // splitting loads at ship confirm is not supported when ran from the service class
            if (this.mustShowErrorOnAllowSplitShipConfirm(loadTable))
            {
                warning(strFmt("@WAX:ShipConfirmService_Error_AllowSplitShipConfirm", loadTable.LoadId));
            }
            else if (loadTable && loadTable.LoadDirection == _loadDirection)
            {
                loadIdList.addEnd(loadTable.LoadId);
            }
        }

        return loadIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowErrorOnAllowSplitShipConfirm</Name>
				<Source><![CDATA[
    private boolean mustShowErrorOnAllowSplitShipConfirm(WHSLoadTable _loadTable)
    {
        if (WHSShipConfirmServiceImplementsSplitShipmentInBatchFlight::instance().isEnabled())
        {
            return _loadTable.AllowLoadSplitShipConfirm && _loadTable.LoadSplitShipConfirmPolicy == WHSLoadSplitShipConfirmPolicy::ManualSelection;
        }

        return _loadTable.AllowLoadSplitShipConfirm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>