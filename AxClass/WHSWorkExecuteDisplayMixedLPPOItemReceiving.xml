<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayMixedLPPOItemReceiving</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Executes inbound order item receiving flow for mixed license plate receiving.
/// </summary>
[WHSMixedLPReceivingMode(WHSMixedLPReceivingMode::POItemReceiving)]
public class WHSWorkExecuteDisplayMixedLPPOItemReceiving extends WHSWorkExecuteDisplayMixedLPPOReceiving
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOrderProvider</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkExecuteDisplayReceivingOrderProvider createOrderProvider(boolean _throwOnNonReceiving)
    {
        return new WHSWorkExecuteDisplayReceivingPurchOrderProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNextRegistration</Name>
				<Source><![CDATA[
    protected container buildNextRegistration(
        container   _con,
        str         _extraText = '')
    {
        WHSRFMenuItemTable  rfMenuItem = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem));
        container           ret = _con;

        var orderProvider = this.receivingOrderProvider();
        boolean hasOrderNum = orderProvider.hasOrderNum(pass);

        ret += this.buildLPContainerControls(rfMenuItem.DisplayContainerTypeCode);
        ret += [this.buildControl(#RFText, orderProvider.orderKey(), orderProvider.orderFieldLabel(), 1, orderProvider.orderNum(pass), orderProvider.orderTypeId(), '', 0, !hasOrderNum)];

        if (hasOrderNum)
        {
            ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, '', extendedTypeNum(InventInventItemSearchItem), '', 0)];
        }

        ret += this.buildNextRegistrationButtonList();

        if (hasOrderNum)
        {
            ret += [this.buildControl(#RFButton, #RFChangePO, orderProvider.changeOrderFieldLabel(), 1, '', #WHSRFUndefinedDataType, '', 0)];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRegistering</Name>
				<Source><![CDATA[
    protected container buildRegistering(
        container   _con,
        str         _extraText = '',
        boolean     _enableContainerType = true)
    {
        WHSRFMenuItemTable  rfMenuItem = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem));
        InventDim           inventDim;
        container           ret = _con;
        boolean             contBuilding;
        boolean             additionalButtons;

        ret += [this.buildControl(#RFLabel, #MixedLPReceiving, pass.exists(#MenuItem) ? rfMenuItem.rfTitle : '', 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += this.buildLPContainerControls(rfMenuItem.DisplayContainerTypeCode, _enableContainerType);

        var orderProvider = this.receivingOrderProvider();
       
        if (orderProvider.hasOrderNum(pass))
        {
            ret += [this.buildControl(#RFText, orderProvider.orderKey(), orderProvider.orderFieldLabel(), 1, orderProvider.orderNum(pass), orderProvider.orderTypeId(), '', 0, false)];

            if (pass.hasValue(#ItemId))
            {
                if (!this.checkProductDimensionsInPass(pass.lookup(#ItemId)))
                {
                    ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.lookup(#ItemId), extendedTypeNum(InventInventItemSearchItem), '', 0)];
                    ret += this.buildItemDescription(pass.lookup(#ItemId));
                    ret = this.buildProductDimensionsFromInventTable(ret, InventTable::find(pass.parmItemId()));
                }
                else
                {
                    TradeLineNumber lineNum = this.getInboundOrderLineNum();

                    if (lineNum
                    &&  !overDeliveryError)
                    {
                        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.lookup(#ItemId), extendedTypeNum(InventInventItemSearchItem), '', 0)];
                        ret += this.buildItemDescription(pass.lookup(#ItemId));
                        ret += [this.buildControl(#RFText, orderProvider.lineKey(), orderProvider.lineFieldLabel(), 1, int642str(lineNum), extendedTypeNum(LineNum), '', 0, false)];
                        orderProvider.setLineNum(pass, lineNum);
                        contBuilding = true;
                    }
                    else
                    {
                        // It is possible to already have an error here if two users are receiving against the same PO line
                        if (overDeliveryError)
                        {
                            // Only want to display one error
                            ret = conDel(ret, 1, 1);
                            step = 1;
                        }
                        else
                        {
                            // It's possible that the line was completely received by another user.
                            overDeliveryError = true;
                        }

                        pass.remove(#Qty);
                        this.clearPassProductDimensions(pass.lookup(#ItemId));

                        ret = conIns(ret, 1, conPeek(this.addErrorLabel(conNull(), "@WAX:NoQtyForItemOnPO", WHSRFColorText::Error), 1));
                        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, '', extendedTypeNum(InventInventItemSearchItem), '', 0)];
                    }
                }
            }
            else
            {
                ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, '', extendedTypeNum(InventInventItemSearchItem), '', 0)];

                additionalButtons = true;
            }
        }
        else
        {
            ret += [this.buildControl(#RFText, orderProvider.orderKey(), orderProvider.orderFieldLabel(), 1, '', orderProvider.orderTypeId(), '', 0)];
            additionalButtons = true;
        }

        if (contBuilding)
        {
            if (pass.exists(#ItemId) && orderProvider.hasLineNum(pass))
            {
                inventDim = InventDim::find((this.getOrderLine() as WHSReceiptOrderLine).InventDimId);

                // Product variant could be uniquely identified, do not allow product dimensions to be changed
                ret = this.buildProductDimensionsFromInventDim(ret, pass.lookup(#ItemId), inventDim, false);
            }

            WHSProdQty defaultQty = WHSInventTable::find(pass.lookup(#ItemId)).ProdQty;

            if (pass.lookupStr(#SelectedValueUOM) == '')
            {
                pass.insert(#SelectedValueUOM, WHSUOMSeqGroupTable::getDefaultPurchUOM(pass.lookup(#ItemId)));
            }

            ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, defaultQty ? WHSWorkExecuteDisplay::num2StrDisplay(defaultQty) : pass.lookupStr(#Qty), extendedTypeNum(Qty), '', 0)];
            ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM));
            ret = this.buildCatchWeight(ret, pass.lookup(#ItemId));

            ret = this.buildConversion(ret);
        }
        
        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        if (additionalButtons)
        {
            ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

            if (WHSMixedLicensePlateReceipt::hasOpenRecord(pass.lookup(#LicensePlateId)))
            {
                ret += [this.buildControl(#RFButton, #RFLPComplete, "@WAX:MixedLPComplete", 1, '', #WHSRFUndefinedDataType, '', 0)];
                ret += [this.buildControl(#RFButton, #RFList, "@WAX:MixedLPShowList", 1, '', #WHSRFUndefinedDataType, '', 0)];
            }

            if (orderProvider.hasOrderNum(pass))
            {
                ret += [this.buildControl(#RFButton, #RFChangePO, orderProvider.changeOrderFieldLabel(), 1, '', #WHSRFUndefinedDataType, '', 0)];
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInboundOrderLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Inbound order line number if possible based on Order number and Item.
    /// </summary>
    /// <returns>
    /// The Line number of the Inbound order.
    /// </returns>
    private TradeLineNumber getInboundOrderLineNum()
    {
        TradeLineNumber ret;
        InventDim       inventDimCriteria;
        InventDimParm   inventDimParm;

        inventDimParm.setAllProductDimensions();
        inventDimParm.InventLocationIdFlag = NoYes::Yes;
        pass.initInventDimFromPassParm(inventDimCriteria, inventDimParm);

        InventSite::setReceivingWarehouseCriteria(inventDimCriteria, inventDimParm);

        boolean   foundLine;
        boolean   checkRegistered;
        InventDim inventDim;
        WHSReceiptOrderLine orderLine;

        while (!foundLine)
        {
            orderLine = this.selectOrderLine(inventDimCriteria, inventDimParm);

            while (orderLine)
            {
                if (this.checkPurchLine(orderLine.InventTransId, checkRegistered ? StatusReceipt::Registered : StatusReceipt::Ordered))
                {
                    ret = orderLine.LineNumber;
                    foundLine = true;
                    break;
                }

                next orderLine;
            }

            if (checkRegistered)
            {
                break;
            }

            checkRegistered = true;
        }

        if (ret && foundLine)
        {
            // Make sure it's not possible to receive a PO line in status cancelled
            PurchLine purchLine = orderLine as PurchLine;
            if (purchLine && purchLine.PurchStatus == PurchStatus::Canceled)
            {
                throw Error("@WAX:NoQtyForItemOnPO");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectOrderLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSReceiptOrderLine selectOrderLine(InventDim _inventDimCriteria, InventDimParm _inventDimParm)
    {
        PurchLine purchLine;
        InventDim inventDim;

        select LineNumber, InventTransId, PurchStatus from purchLine
            where purchLine.PurchId == pass.lookup(#PONum)
            &&    purchLine.ItemId  == pass.lookup(#ItemId)
            #InventDimExistsJoin(purchLine.InventDimId, inventDim, _inventDimCriteria, _inventDimParm);

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProductDimensionsFromInventTable</Name>
				<Source><![CDATA[
    private container buildProductDimensionsFromInventTable(container _con, InventTable _inventTable)
    {
        container   ret = _con;

        InventDim inventDim = WhsWorkExecuteInboundOrderItemReceivingDimensionFinder::getSingleUniqueInventDimForReceipt(_inventTable, this.getInventTransType(), this.receivingOrderProvider().orderNum(pass));
      
        if (inventDim)
        {
            ret = this.buildProductDimensionsFromInventDim(ret, _inventTable.ItemId, inventDim, false);
        }
        else
        {
            ret = this.buildProductDimensionsFromInventDim(ret, _inventTable.ItemId, null);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>