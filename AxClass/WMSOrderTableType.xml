<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsOrderTableType</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WmsOrderTableType extends InventType
{
    WMSOrder        wmsOrder;
    InventMovement  movement;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeDeletedByReferencedTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the inventory order record can be deleted by one of the tables referencing the inventory order record.
    /// </summary>
    /// <returns>
    /// true, if the inventory order can be deleted; otherwise, false.
    /// </returns>
    public boolean canBeDeletedByReferencedTable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventBeReserved</Name>
				<Source><![CDATA[
    public boolean canInventBeReserved()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdExpected</Name>
				<Source><![CDATA[
    public boolean canInventUpdExpected()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdFinancial</Name>
				<Source><![CDATA[
    public boolean canInventUpdFinancial()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdPhysical</Name>
				<Source><![CDATA[
    public boolean canInventUpdPhysical()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFix</Name>
				<Source><![CDATA[
    public void checkFix(WMSConsistencyCheck_WMSOrder wmsConsistencyCheck_WMSOrder)
    {
        WMSOrderTrans       wmsOrderTrans;
        InventTransIdSum    inventTransIdSum;
        InventQty           inventTransQty;
        boolean             anyCorrections = false;
        InventQty           errorQty, correctionQty;

        boolean         pdsIsCWItem = PdsGlobal::pdsIsCWItem(wmsOrder.ItemId);
        PdsCWInventQty  pdsCWQty, pdsCWErrorQty, pdsCWCorrectionQty;

        void handleStatus(WMSOrderStatus expectedStatus)
        {
            if (wmsOrder.Status != expectedStatus)
            {
                checkFailed(strfmt("@SYS59182", wmsOrder.Status, expectedStatus));
                if (wmsConsistencyCheck_WMSOrder.checkFix() == CheckFix::Fix)
                {
                    anyCorrections = true;
                    wmsOrder.Status = expectedStatus;
                    wmsConsistencyCheck_WMSOrder.updateCorrected();
                }
            }
        }

        while select wmsOrderTrans
            where wmsOrderTrans.OrderId == wmsOrder.OrderId
        {
            wmsOrderTrans.checkFix(wmsConsistencyCheck_WMSOrder);
        }

        if (wmsConsistencyCheck_WMSOrder.checkFix() == CheckFix::Fix) // error is found by kernelCheckRecord, so just fix it
        {
            if (wmsOrder.Customer && wmsOrder.InventTransType != InventTransType::Sales)
            {
                anyCorrections = true;
                wmsOrder.Customer = '';
                wmsConsistencyCheck_WMSOrder.updateCorrected();
            }
        }

        if (wmsOrder.Qty != wmsOrder.QtyNoShipment + wmsOrder.qtyRegistered() +
            wmsOrder.qtyActivated() + wmsOrder.qtyStarted() + wmsOrder.qtyCompleted())
        {
            checkFailed("@SYS68143");
            if (wmsConsistencyCheck_WMSOrder.checkFix() == CheckFix::Fix)
            {
                anyCorrections = true;
                wmsOrder.Qty =  wmsOrder.QtyNoShipment + wmsOrder.qtyRegistered() +
                                wmsOrder.qtyActivated() + wmsOrder.qtyStarted() + wmsOrder.qtyCompleted();

                if (pdsIsCWItem)
                {
                    wmsOrder.PdsCWQty = wmsOrder.PdsCWQtyNoShipment
                                        + wmsOrder.pdsCWQtyRegistered()
                                        + wmsOrder.pdsCWQtyActivated()
                                        + wmsOrder.pdsCWQtyStarted()
                                        + wmsOrder.pdsCWQtyCompleted();
                }

                wmsConsistencyCheck_WMSOrder.updateCorrected();
            }
        }

        if (!wmsOrder.PostTransfer)
        {
            inventTransIdSum = InventTransIdSum::newTransIdChildType(InventTransOrigin::findByInventTransId(wmsOrder.InventTransId).RecId, InventTransChildType::WMSOrder, wmsOrder.OrderId);
            inventTransQty = -inventTransIdSum.estimatedIssue();

            errorQty = wmsOrder.QtyNoShipment + wmsOrder.qtyRegistered() +
                       wmsOrder.qtyActivated()  + wmsOrder.qtyStarted() + inventTransQty;

            pdsCWQty = -inventTransIdSum.pdsCWEstimatedIssue();

            pdsCWErrorQty = wmsOrder.PdsCWQtyNoShipment
                    + wmsOrder.pdsCWQtyRegistered() + wmsOrder.pdsCWQtyActivated()
                    + wmsOrder.pdsCWQtyStarted() + pdsCWQty;

            if (errorQty != 0)
            {
                checkFailed("@SYS50646");
                if (wmsConsistencyCheck_WMSOrder.checkFix() == CheckFix::Fix)
                {
                    if (errorQty < 0)
                    {
                        wmsOrder.QtyNoShipment -= errorQty;
                        wmsOrder.Qty           -= errorQty;
                        errorQty = 0;

                        if (pdsIsCWItem)
                        {
                            wmsOrder.PdsCWQtyNoShipment -= pdsCWErrorQty;
                            wmsOrder.PdsCWQty           -= pdsCWErrorQty;
                            pdsCWErrorQty = 0;
                        }

                        anyCorrections = true;
                    }
                    else
                    {
                        if (wmsOrder.QtyNoShipment > 0)
                        {
                            correctionQty = min(errorQty, wmsOrder.QtyNoShipment);
                            wmsOrder.QtyNoShipment -= correctionQty;
                            wmsOrder.Qty           -= correctionQty;
                            errorQty               -= correctionQty;

                            if (pdsIsCWItem)
                            {
                                pdsCWCorrectionQty = min(
                                                    pdsCWErrorQty,
                                                    wmsOrder.PdsCWQtyNoShipment);
                                wmsOrder.PdsCWQtyNoShipment -= pdsCWCorrectionQty;
                                wmsOrder.PdsCWQty           -= pdsCWCorrectionQty;
                                pdsCWErrorQty               -= pdsCWCorrectionQty;
                            }

                            anyCorrections = true;
                        }
                        if (errorQty > 0 && wmsOrder.qtyRegistered() > 0)
                        {
                            correctionQty = min(errorQty, wmsOrder.qtyRegistered());

                            if (pdsIsCWItem)
                            {
                                pdsCWCorrectionQty = min(
                                                    pdsCWErrorQty,
                                                    wmsOrder.pdsCWQtyRegistered());
                            }

                            while select forupdate wmsOrderTrans
                                where wmsOrderTrans.OrderId             == wmsOrder.OrderId &&
                                      wmsOrderTrans.ExpeditionStatus    == WMSExpeditionStatus::Registered
                            {
                                if (wmsOrderTrans.Qty > correctionQty)
                                {
                                    wmsOrderTrans.split(wmsOrderTrans.Qty - correctionQty
                                        , pdsIsCWItem
                                            ? wmsOrderTrans.PdsCWQty - pdsCWCorrectionQty
                                            : 0
                                        );
                                }
                                wmsOrderTrans.doDelete();
                                wmsOrder.Qty                    -= wmsOrderTrans.Qty;
                                errorQty                        -= wmsOrderTrans.Qty;
                                correctionQty                   -= wmsOrderTrans.Qty;

                                if (pdsIsCWItem)
                                {
                                    wmsOrder.PdsCWQty   -= wmsOrderTrans.PdsCWQty;
                                    pdsCWErrorQty       -= wmsOrderTrans.PdsCWQty;
                                    pdsCWCorrectionQty  -= wmsOrderTrans.PdsCWQty;
                                }

                                anyCorrections = true;
                                if (correctionQty == 0)
                                {
                                    break;
                                }
                            }
                        }
                    }
                    if (errorQty == 0)
                        wmsConsistencyCheck_WMSOrder.updateCorrected();
                }
            }
        }

        if (wmsOrder.QtyNoShipment > 0)
        {
            handleStatus(WMSOrderStatus::New);
        }
        else if (wmsOrder.qtyCompleted() == wmsOrder.Qty)
        {
            handleStatus(WMSOrderStatus::Complete);
        }
        else
        {
            handleStatus(WMSOrderStatus::InExpedition);
        }

        if (anyCorrections)
        {
            wmsOrder.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before an inventory order record is deleted.
    /// </summary>
    public void deleting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after an inventory order record has been deleted.
    /// </summary>
    public void deleted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before an inventory order record is inserted.
    /// </summary>
    public void inserting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after an inventory order record has been inserted.
    /// </summary>
    public void inserted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovement</Name>
				<Source><![CDATA[
    public InventMovement inventMovement()
    {
        if (!movement)
        {
            movement = InventMov_WMSOrder::newFromWMSOrder(wmsOrder);
        }

        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInventUpdEstimated</Name>
				<Source><![CDATA[
    public boolean mustInventUpdEstimated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(WMSOrder _wmsOrder)
    {
        wmsOrder = _wmsOrder;

        super(_wmsOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSOrder</Name>
				<Source><![CDATA[
    final public WMSOrder parmWMSOrder()
    {
        return wmsOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before an inventory order record is updated.
    /// </summary>
    public void updating()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after an inventory order record has been updated.
    /// </summary>
    /// <param name="_wmsOrder_Orig">
    /// The original inventory order which is updated.
    /// </param>
    public void updated(WMSOrder _wmsOrder_Orig)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ok = true;

        // Deletion of the WMSOrder must be triggered from the WSMOrderTrans,
        // when transactions are started or physically updated
        if ((select firstonly RecId from wmsOrderTrans
                where   wmsOrderTrans.OrderId           == wmsOrder.OrderId             &&
                       (wmsOrderTrans.ExpeditionStatus  == WMSExpeditionStatus::Started ||
                        wmsOrderTrans.ExpeditionStatus  == WMSExpeditionStatus::Picked  ||
                        wmsOrderTrans.ExpeditionStatus  == WMSExpeditionStatus::Staged  ||
                        wmsOrderTrans.ExpeditionStatus  == WMSExpeditionStatus::Loaded  ||
                        wmsOrderTrans.ExpeditionStatus  == WMSExpeditionStatus::Complete)).RecId != 0)
        {
            ok = checkFailed(strFmt("@SYS126547",wmsOrder.OrderId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the selected item can be saved.
    /// </summary>
    /// <returns>
    /// true if the selected item can be saved; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        WHSInventTransferLine localWHSInventTransferLine;
        WHSSalesLine          localWHSSalesLine;
        boolean ret = true;

        var noWhsProcessCheck = WHSNoPickingProcessCheck::newFromWMSOrder(wmsOrder);
        if (!noWhsProcessCheck.run())
        {
            ret = checkFailed(noWhsProcessCheck.failureMessage());
        }

        // Do not allow non-inventoried items.
        if (!InventTable::find(wmsOrder.ItemId).isStocked())
        {
            ret = checkFailed("@SYS190614");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WMSOrderTableType construct(WMSOrder _wmsOrder)
    {
        switch (_wmsOrder.Type)
        {
            case WMSOrderType::OrderPick:
                return WMSOrderTableType_Output::newWMSOrder(_wmsOrder);
        }
        return new WMSOrderTableType(_wmsOrder);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>