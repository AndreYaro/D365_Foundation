<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmEntityDelete_Lead</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SmmEntityDelete_Lead extends SmmEntityDelete
{
    DialogField fieldOpportunities;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteLink</Name>
				<Source><![CDATA[
    public void deleteLink()
    {
        smmLeadRelTable  smmLeadRelTable;

        delete_from smmLeadRelTable
            where smmLeadRelTable.RefTableId  == common.TableId &&
                  smmLeadRelTable.RefRecId == common.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOpportunities</Name>
				<Source><![CDATA[
    private void deleteOpportunities()
    {
        smmOpportunityTable             smmOpportunityTable;
        smmLeadRelTable                 smmLeadRelTable, smmLeadRelTableLink;

        while select forupdate smmOpportunityTable
            exists join smmLeadRelTable
            where smmOpportunityTable.RecId == smmLeadRelTable.RefRecId &&
                  smmLeadRelTable.RefTableId == (tableNum(smmOpportunityTable)) &&
                  smmLeadRelTable.LeadId == common.(fieldId)
        {
            // Delete the link first so it will not conflict with validate
            delete_from smmLeadRelTableLink
                where smmLeadRelTableLink.LeadId == common.(fieldId) &&
                      smmLeadRelTableLink.RefTableId == tableNum(smmOpportunityTable) &&
                      smmLeadRelTableLink.RefRecId == smmOpportunityTable.RecId;

            if (smmOpportunityTable.validateDelete())
            {
                smmOpportunityTable.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProjects</Name>
				<Source><![CDATA[
    private void deleteProjects()
    {
        ProjTable                projTable;
        smmLeadRelTable          smmLeadRelTable, smmLeadRelTableLink;

        while select forupdate projTable
            exists join smmLeadRelTable
            where projTable.RecId == smmLeadRelTable.RefRecId &&
                  smmLeadRelTable.RefTableId == (tableNum(ProjTable)) &&
                  smmLeadRelTable.LeadId == common.(fieldId)
        {
            // Delete the link first so it will not conflict with validate
            delete_from smmLeadRelTableLink
                where smmLeadRelTableLink.LeadId == common.(fieldId) &&
                      smmLeadRelTableLink.RefTableId == tableNum(ProjTable) &&
                      smmLeadRelTableLink.RefRecId == projTable.RecId;

            if (projTable.validateDelete())
            {
                projTable.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecords</Name>
				<Source><![CDATA[
    public void deleteRecords()
    {
        if (includeOpportunities)
        {
            // Delete opportunities
            this.deleteOpportunities();
        }

        if (includeProjects)
        {
            // Delete projects
            this.deleteProjects();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        Object ret;

        ret = super();

        this.parmIncludeOpportunities(NoYes::Yes);

        fieldOpportunities      =   dialog.addFieldValue(extendedTypeStr(smmIncludeOpportunities),      includeOpportunities);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        this.parmIncludeOpportunities(fieldOpportunities.value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommonTable</Name>
				<Source><![CDATA[
    public Common parmCommonTable(Common _common = null)
    {
        Common ret;

        ret = super(_common);

        fieldId = fieldNum(smmLeadTable, LeadId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeOpportunities</Name>
				<Source><![CDATA[
    public smmIncludeOpportunities parmIncludeOpportunities(smmIncludeOpportunities _includeOpportunities = includeOpportunities)
    {
        includeOpportunities = _includeOpportunities;

        return includeOpportunities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS105089";
    }

]]></Source>
			</Method>
			<Method>
				<Name>Main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the lead passed as context.
    /// </summary>
    /// <param name="_args">
    /// A parameter that contains the calling context.
    /// </param>
    /// <param name="_formDataSource">
    /// The <c>FormDataSource</c> data source to be refreshed after delete.
    /// </param>
    public static void Main(xArgs _args, FormDataSource _formDataSource = null)
    {
        SmmEntityDelete smmEntityDelete;
        smmLeadTable smmLeadTable;
        Common common = _args.record();

        if (!_args || !_args.record())
        {
            throw error(strFmt("@SYS29104",classStr(SmmEntityDelete))); // Class %1 must be called with a buffer.
        }

        if (common.TableId == tableNum(smmLeadTable))
        {
            smmLeadTable = common;

            // You are about to delete record in %1. Delete record?
            // Leads
            if (Box::yesNo(strFmt("@SYS302359", "@SYS109326"), DialogButton::No) && smmLeadTable.validateDelete())
            {
                smmEntityDelete = SmmEntityDelete::construct(common, false);

                if (smmEntityDelete.prompt())
                {
                    smmEntityDelete.parmCommonTable(_args.record());
                    smmEntityDelete.runOperation();
                    smmLeadTable.delete();

                    if (_formDataSource)
                    {
                        _formDataSource.executeQuery();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>