<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionDynamicDefaultAccountResolver</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DimensionDynamicDefaultAccountResolver</c> class resolves dynamic default account dimension values.
/// </summary>
class DimensionDynamicDefaultAccountResolver extends DimensionResolver
{
    private boolean isEnumValueSet;
    private DimensionAccountType enumValue;
    private SelectableDataArea   companyValue;
    private ModuleInventCustVend secondaryEnumValue;
    private EnumName             enumName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// The account type of the dimension to resolve.
    /// </summary>
    /// <param name = "_enumValue">The value to set.</param>
    /// <returns>The value of the enumValue parameter.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int parmEnumValue(int _enumValue = enumValue)
    {
        this.enumValue = _enumValue;

        return this.enumValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanyValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// The company of the dimension to resolve.
    /// </summary>
    /// <param name = "_companyValue">The value to set.</param>
    /// <returns>The value of the companyValue parameter.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SelectableDataArea parmCompanyValue(SelectableDataArea _companyValue = companyValue)
    {
        this.companyValue = _companyValue;

        return this.companyValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnumName</Name>
				<Source><![CDATA[
    /// <summary>
    /// The Enum name of the dimension to resolve.
    /// </summary>
    /// <param name = "_enumName">The value to set.</param>
    /// <returns>The value of the enumName parameter.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public enumName parmEnumName(EnumName _enumName = enumName)
    {
        this.enumName = _enumName;

        return this.enumName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSecondaryEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// The secondary account type of the dimension to resolve.
    /// </summary>
    /// <param name = "_secondaryEnumValue">The value to set.</param>
    /// <returns>the value of the secondaryEnumValue.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int parmSecondaryEnumValue(int _secondaryEnumValue = secondaryEnumValue)
    {
        this.secondaryEnumValue = _secondaryEnumValue;

        return this.secondaryEnumValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newResolver</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>DimensionDynamicDefaultAccountResolver</c> class.
    /// </summary>
    /// <param name = "_dimensionValues">A single display value.</param>
    /// <param name = "_enumValue">The account type of the dimension to resolve.</param>
    /// <param name = "_companyValue">The company of the dimension to resolve.</param>
    /// <param name = "_enumId">The enum Id of the dimension to resolve.</param>
    /// <param name = "_secondaryAccountValue">The secondary account value of the dimension to resolve.</param>
    /// <returns>The new instance of an <c>DimensionDynamicDefaultAccountResolver</c> subclass.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static DimensionDynamicDefaultAccountResolver newResolver(
        DefaultDimensionIntegrationValues _dimensionValues,
        int _enumValue = enum2int(LedgerJournalACType::Ledger),
        SelectableDataArea _companyValue = curExt(),
        EnumName _enumName = enumStr(LedgerJournalACType),
        ModuleInventCustVend _secondaryAccountValue = ModuleInventCustVend::Cust)
    {
        DimensionDynamicDefaultAccountResolver dimensionDynamicDefaultAccountResolver =
            new DimensionDynamicDefaultAccountResolver();

        dimensionDynamicDefaultAccountResolver.parmDimensionValues(_dimensionValues);
        dimensionDynamicDefaultAccountResolver.parmEnumValue(_enumValue);
        dimensionDynamicDefaultAccountResolver.parmCompanyValue(_companyValue);

        dimensionDynamicDefaultAccountResolver.parmEnumName(_enumName);
        dimensionDynamicDefaultAccountResolver.parmSecondaryEnumValue(_secondaryAccountValue);

        dimensionDynamicDefaultAccountResolver.parmDimensionFormat(dimensionDynamicDefaultAccountResolver.getDimensionAttributeFormat());

        return dimensionDynamicDefaultAccountResolver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEntityRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates accounts are a single segment.
    /// </summary>
    /// <returns>true if the account is a single segment; otherwise, false.</returns>
    protected boolean validateEntityRequest()
    {
        boolean isValid = true;

        if (this.getDimensionValues().elements() > 1)
        {
            isValid = false;

            DictEnum dictEnum = new DictEnum(enumName2Id(this.parmEnumName()));
            error(strFmt(
                "@Dimension:EntitiesDimensionDynamicAccount",
                dictEnum.value2Label(this.parmEnumValue()),
                this.parmDimensionValues()),
                DimensionServiceFaults::ValidationFailed);
        }

        if (isValid)
        {
            isValid = super();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionContractValueList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the dimension contract from the dimension names and values, setting the company and account type.
    /// </summary>
    protected void buildDimensionContractValueList()
    {
        super();

        DimensionDynamicDefaultAccountContract dimensionDynamicDefaultAccountContract =
            this.getDimensionContract() as DimensionDynamicDefaultAccountContract;
        dimensionDynamicDefaultAccountContract.parmAccountType(this.parmEnumValue());
        dimensionDynamicDefaultAccountContract.parmCompany(this.parmCompanyValue());
        dimensionDynamicDefaultAccountContract.parmEnumName(this.parmEnumName());
        dimensionDynamicDefaultAccountContract.parmSecondaryAccountValue(this.parmSecondaryEnumValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionNameValueListServiceProvider</Name>
				<Source><![CDATA[
    protected DimensionNameValueListServiceProvider getDimensionNameValueListServiceProvider(
        DimensionNameValueListContract _dimensionNameValueListContract)
    {
        DimensionDynamicDefaultAccountServiceProvider serviceProvider =
            DimensionDynamicDefaultAccountServiceProvider::newForDynamicDefaultAccountContract(
                _dimensionNameValueListContract);

        return serviceProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAttributeValueToDimensionContract</Name>
				<Source><![CDATA[
    protected void addAttributeValueToDimensionContract(DimensionAttributeValueContract _attributeValueContract)
    {
        DimensionDynamicDefaultAccountContract dimensionDynamicDefaultAccountContract = this.getDimensionContract();

        if (this.parmEnumValue() == LedgerJournalACType::Ledger)
        {
            Name mainAccountAttributeName = DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)).Name;

            if (_attributeValueContract.parmName() == mainAccountAttributeName)
            {
                dimensionDynamicDefaultAccountContract.parmPrimaryDimensionAttributeValue(_attributeValueContract);
            }
        }
        else
        {
            if (strlen(_attributeValueContract.parmValue()) != 0)
            {
                dimensionDynamicDefaultAccountContract.parmPrimaryDimensionAttributeValue(_attributeValueContract);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStorageResultValidationMessages</Name>
				<Source><![CDATA[
    protected List getStorageResultValidationMessages(DimensionStorageResult _result)
    {
        List validationMessages;

        if (_result.parmStatus() == DimensionStorageResultStatus::InvalidDimensionAttributeValue)
        {
            validationMessages = new List(Types::String);

            DimensionDynamicDefaultAccountContract dimensionDynamicDefaultAccountContract =
                this.getDimensionContract() as DimensionDynamicDefaultAccountContract;

            if (dimensionDynamicDefaultAccountContract.parmAccountType() == LedgerJournalACType::Ledger)
            {
                if (_result.parmInvalidValue() && _result.parmInvalidValue().parmValue())
                {
                    changecompany (dimensionDynamicDefaultAccountContract.parmCompany())
                    {
                        // The specified main account was not found for the current chart of accounts.
                        Name ledgerCOAName = LedgerChartOfAccounts::find(LedgerChartOfAccounts::current()).Name;

                        validationMessages.addEnd(
                            strFmt("@SYS326023", _result.parmInvalidValue().parmValue(), ledgerCOAName));
                    }
                }
                else
                {
                    validationMessages.addEnd("@SYS324035");
                }
            }
            else
            {
                DictEnum dictEnum = new DictEnum(enumName2Id(dimensionDynamicDefaultAccountContract.parmEnumName()));
                validationMessages.addEnd(strFmt("@Dimension:DimensionEntitiesDimensionValueNotExist",
                    _result.parmInvalidValue().parmValue(),
                    dictEnum.value2Label(dimensionDynamicDefaultAccountContract.parmAccountType()),
                    this.parmDimensionValues()));
            }
        }
        else
        {
            validationMessages = super(_result);
        }

        return validationMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDimensionContract</Name>
				<Source><![CDATA[
    protected DimensionNameValueListContract constructDimensionContract()
    {
        return new DimensionDynamicDefaultAccountContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionAttributeFormat</Name>
				<Source><![CDATA[
    protected DefaultDimensionIntegrationStructureDisplay getDimensionAttributeFormat()
    {
        DefaultDimensionIntegrationStructureDisplay dimensionAttributesFormat;

        // Default format to ledger
        dimensionAttributesFormat = "@SYS343426";

        if (strLen(this.parmEnumName()) != 0)
        {
            DimensionHierarchyType dimensionHierarchyType = DimensionHierarchyHelper::getHierarchyTypeByAccountType(this.parmEnumValue(), enumName2Id(this.parmEnumName()), this.parmSecondaryEnumValue());

            // The hierarchy type of AccountStructure is handled as DefaultAccount for dynamic default accounts.
            if (dimensionHierarchyType != DimensionHierarchyType::AccountStructure)
            {
                RecId hierarchyId = DimensionHierarchy::getHierarchyIdByHierarchyType(dimensionHierarchyType);
                DimensionHierarchy dimensionHierarchy = DimensionHierarchy::find(hierarchyId);
                dimensionAttributesFormat = dimensionHierarchy.Name;
            }
        }

        return dimensionAttributesFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtendedDataTypeName</Name>
				<Source><![CDATA[
    protected ExtendedDataTypeName getExtendedDataTypeName()
    {
        return extendedtypestr(DimensionDynamicDefaultAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumValue</Name>
				<Source><![CDATA[
    protected DimensionAccountType getEnumValue()
    {
        return this.parmEnumValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumName</Name>
				<Source><![CDATA[
    protected EnumName getEnumName()
    {
        return this.parmEnumName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSecondaryAccoutValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected DimensionAccountType getSecondaryAccoutValue()
    {
        return this.parmSecondaryEnumValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionHierarchyName</Name>
				<Source><![CDATA[
    protected Name getDimensionHierarchyName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionHierarchyType</Name>
				<Source><![CDATA[
    protected DimensionHierarchyType getDimensionHierarchyType()
    {
        return DimensionHierarchyType::DataEntityLedgerDimensionFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCacheEntry</Name>
				<Source><![CDATA[
    protected void addCacheEntry(RefRecId _savedRecId)
    {
        changecompany (this.parmCompanyValue())
        {
            super(_savedRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheEntry</Name>
				<Source><![CDATA[
    protected DimensionDataEntitySFKCache getCacheEntry()
    {
        changecompany (this.parmCompanyValue())
        {
            return super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>