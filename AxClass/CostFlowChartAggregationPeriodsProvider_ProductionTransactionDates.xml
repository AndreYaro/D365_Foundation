<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostFlowChartAggregationPeriodsProvider_ProductionTransactionDates</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostFlowChartAggregationPeriodsProvider_ProductionTransactionDates</c> class provides single day
/// periods for a given production order for aggregating the flow data.
/// </summary>
class CostFlowChartAggregationPeriodsProvider_ProductionTransactionDates extends CostFlowChartAggregationPeriodsProvider
{
    ProdId prodId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmProdId</Name>
				<Source><![CDATA[
    public ProdId parmProdId(ProdId _prodId = prodId)
    {
        prodId = _prodId;
        return prodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>providePeriods</Name>
				<Source><![CDATA[
    public List providePeriods()
    {
        List list = new List(Types::Class);

        CostStatementView costStatementView;

        while select TransDate
            from costStatementView
            group by TransDate
            order by TransDate
            where costStatementView.StatementType == CostStatementType::WIP
               && costStatementView.ReferenceType == InventCostTransRefType::Production
               && costStatementView.Reference == prodId
        {
            this.addPeriodToList(list,
                                 costStatementView.TransDate,
                                 costStatementView.TransDate);
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostFlowChartAggregationPeriodsProvider_ProductionTransactionDates construct()
    {
        return new CostFlowChartAggregationPeriodsProvider_ProductionTransactionDates();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>