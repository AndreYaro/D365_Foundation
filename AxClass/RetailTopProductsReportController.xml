<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTopProductsReportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTopProductsReportController</c> class is the controller class for
/// the <c>RetailTopProducts</c> report.
/// </summary>
public class RetailTopProductsReportController extends SrsReportRunController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailTopProductsReportController controller = new RetailTopProductsReportController();

        controller.parmReportName(ssrsReportStr(RetailTopProducts, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        if (RetailTopProductsReportUsesStagingTableFlightV2::instance().isEnabled())
        {
            RetailReportParametersDataContract contract = this.parmReportContract().parmRdpContract() as RetailReportParametersDataContract;
            this.populateStagingTable(contract.parmFromDate(), contract.parmToDate(), contract.parmHierarchyRelationId());
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateStagingTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Cleans the RetailTopProductsReportTableStaging and populates it with data from RetailTopProductsView
    ///   based on dates selected in UI
    /// </summary>
    /// <param name = "_fromDate">Starting date.</param>
    /// <param name = "_toDate">Ending date.</param>
    /// <param name = "_hierarchyRelationshipId">The hierarchy relationship id for the selected entity.</param>
    private void populateStagingTable(TransDate _fromDate, TransDate _toDate, str _hierarchyRelationshipId)
    {
        RetailTopProductsReportStagingTable stagingTable;
        CustInvoiceTrans                    custInvoiceTrans;
        CustInvoiceJour                     custInvoiceJour;
        InventTableExpanded                 inventTableExpanded;
        InventTransOrigin                   inventTransOrigin;
        InventTransGrouped                  inventTransGrouped;
        RetailCustInvoiceJourTable          retailCustInvoiceJourTable;
        InventTable                         inventTable;
        EcoResProduct                       ecoResProduct;
        EcoResProductTranslation            ecoResProductTranslation;
        RetailReportChannelTable            reportChannelTable;
        SystemLanguageId                    systemLanguageId = SystemParameters::getSystemLanguageId();
        str                                 channelsSessionId = guid2Str(newGuid());
        RefRecId                            hierarchyRelationRecId = str2Int64(_hierarchyRelationshipId);

        ttsbegin;

        delete_from stagingTable;

        //Populate channels which are linked to hierarchy relationship id.
        this.populateExplodedChannels(hierarchyRelationRecId, channelsSessionId);

        /*
        Breaking down the insert_recordset operation into two steps:
            1. Inserting all required values except COGS - This ensures that default values are inserted for COGS.
            2. Updating COGS - The COGS is updated with respective values if a match is found; otherwise, it retains default values.
        Using a single insert_recordset for COGS would require an outer join with the InventTransGrouped table. If no records are fetched from the outer joined tables,
        null values are inserted, causing runtime errors stating that cannot insert the value NULL into column 'COGS'
        */

        insert_recordset stagingTable (ItemId, LineAmountMST, LineAmountTaxMST, InventQty, InvoiceDate, Qty, CustInvoiceTransRecId, RetailChannel)
        select ItemId, LineAmountMST, LineAmountTaxMST, InventQty, InvoiceDate, Qty, RecId from custInvoiceTrans
            where custInvoiceTrans.InvoiceDate >= _fromDate && custInvoiceTrans.InvoiceDate <= _toDate
            join custInvoiceJour
                where custInvoiceJour.SalesId == custInvoiceTrans.SalesId
                && custInvoiceJour.InvoiceId == custInvoiceTrans.InvoiceId
                && custInvoiceJour.InvoiceDate == custInvoiceTrans.InvoiceDate
                && custInvoiceJour.numberSequenceGroup == custInvoiceTrans.numberSequenceGroup
            join RetailChannel from retailCustInvoiceJourTable
                where retailCustInvoiceJourTable.CustInvoiceJour == custInvoiceJour.RecId
                // Channel filter
                exists join reportChannelTable
                    where reportChanneltable.RetailChannel == retailCustInvoiceJourTable.RetailChannel
                    && reportChannelTable.SessionId == channelsSessionId;

        // Update COGS.
        update_recordset stagingTable
            setting COGS = inventTransGrouped.COGS
        join RecId from custInvoiceTrans
            where custInvoiceTrans.RecId == stagingTable.CustInvoiceTransRecId
            join RecId from inventTransOrigin
                where inventTransOrigin.InventTransId == custInvoiceTrans.InventTransId
                join COGS from inventTransGrouped
                    where inventTransGrouped.InventTransOrigin == inventTransOrigin.RecId
                    && inventTransGrouped.InvoiceId == custInvoiceTrans.InvoiceId;

        // Update the Product name EcoResProductTranslation.Name for system's default language id.
        update_recordset stagingTable
            setting ProductName = ecoResProductTranslation.Name
            join RecId from inventTable
                where inventTable.ItemId == stagingTable.ItemId
            join RecId from ecoResProduct
                where ecoResProduct.RecId == inventTable.Product
            join Name from ecoResProductTranslation
                where ecoResProductTranslation.Product == ecoResProduct.RecId
                    && ecoResProductTranslation.LanguageId == systemLanguageId;

        // Fall back
        // Use DisplayProductNumber if the translation is not available for Product name in system default language
        update_recordset stagingTable
            setting ProductName = ecoResProduct.DisplayProductNumber
                where stagingTable.ProductName == ''
            join RecId from inventTable
                where inventTable.ItemId == stagingTable.ItemId
            join DisplayProductNumber from ecoResProduct
                where ecoResProduct.RecId == inventTable.Product;

        delete_from reportChannelTable
            where reportChannelTable.SessionId == channelsSessionId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateExplodedChannels</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method inserts the channels into the <c>RetailReportChannelTable</c> table
    /// for the passed hierarchy relationship id.
    /// </summary>
    /// <param name = "_hierarchyRelationshipId">The hierarchy relationship id for the selected entity.</param>
    /// <param name = "_sessionId">Unique value for session id.</param>
    private void populateExplodedChannels(RefRecId _hierarchyRelationshipId, str _sessionId)
    {
        RetailChannelTable channel;
        OMExplodedOrganizationSecurityGraph graph;
        OMHierarchyRelationship hierarchyRelationship;
        RetailReportChannelTable reportChannel;

        ttsbegin;

        insert_recordset reportChannel (SessionId, RetailChannel)
        select _sessionId, RecId from channel
            join graph
            join hierarchyRelationship
            group by channel.RecId
            where hierarchyRelationship.RecId == _hierarchyRelationshipId
                && channel.OMOperatingUnitID == graph.Organization
                && graph.OMHierarchyType == hierarchyRelationship.HierarchyType
                && hierarchyRelationship.ChildOrganization == graph.AncestorOrganization;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>