<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationPurchParmTableDataRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationPurchParmTableDataRetrieval</c> class retrieves data from <c>PurchParmTable</c>, etc.
/// </summary>
[TaxIntegrationDataRetrieval(tableStr(PurchParmTable))]
public class TaxIntegrationPurchParmTableDataRetrieval
    extends TaxIntegrationPurchTableDataRetrieval
{
    protected PurchParmTable purchParmTable;
    protected PurchParmLine purchParmLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (TaxIntegrationConstructWithSourceRecordPurchaseFlight::instance().isEnabled() && document.getLocalRecord())
        {
            purchParmTable = document.getLocalRecord();
            return SysDaQueryObjectBuilder::from(this.purchTable)
                .where(this.purchTable, fieldStr(PurchTable, PurchId))
                    .isEqualToLiteral(this.purchParmTable.PurchId)
                .outerJoin(this.transportationDocument) // primary key
                    .where(this.transportationDocument, fieldStr(TransportationDocument, RecId))
                        .isEqualTo(this.purchTable, fieldStr(PurchTable, TransportationDocument))
                .outerJoin(this.vendTable) // alternate key
                    .where(this.vendTable, fieldStr(VendTable, AccountNum))
                        .isEqualTo(this.purchTable, fieldStr(PurchTable, OrderAccount))
                .outerJoin(this.vendTableInvoice) // alternate key
                    .where(this.vendTableInvoice, fieldStr(VendTable, AccountNum))
                        .isEqualToLiteral(this.purchParmTable.InvoiceAccount)
                .toSysDaQueryObject();
        }
        else
        {
            return SysDaQueryObjectBuilder::from(this.purchParmTable)
                .where(this.purchParmTable, fieldStr(PurchParmTable, RecId))
                    .isEqualToLiteral(this.document.getLocalRecId())
                .innerJoin(this.purchTable) // alternate key
                    .where(this.purchTable, fieldStr(PurchTable, PurchId))
                        .isEqualTo(this.purchParmTable, fieldStr(PurchParmTable, PurchId))
                .outerJoin(this.transportationDocument) // primary key
                    .where(this.transportationDocument, fieldStr(TransportationDocument, RecId))
                        .isEqualTo(this.purchTable, fieldStr(PurchTable, TransportationDocument))
                .outerJoin(this.vendTable) // alternate key
                    .where(this.vendTable, fieldStr(VendTable, AccountNum))
                        .isEqualTo(this.purchTable, fieldStr(PurchTable, OrderAccount))
                .outerJoin(this.vendTableInvoice) // alternate key
                    .where(this.vendTableInvoice, fieldStr(VendTable, AccountNum))
                        .isEqualTo(this.purchParmTable, fieldStr(PurchParmTable, InvoiceAccount))
                .toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        SysDaQueryObjectBuilder queryBuilder = SysDaQueryObjectBuilder::from(this.purchParmLine)
            .where(this.purchParmLine, fieldStr(PurchParmLine, ParmId))
                .isEqualToLiteral(this.purchParmTable.ParmId)
            .where(this.purchParmLine, fieldStr(PurchParmLine, TableRefId))
                .isEqualToLiteral(this.purchParmTable.TableRefId)
            .innerJoin(this.purchLine) // primary key
                .where(this.purchLine, fieldStr(PurchLine, RecId))
                    .isEqualTo(this.purchParmLine, fieldStr(PurchParmLine, PurchLineRecId))
            .outerJoin(this.inventDim) // alternate key
                .where(this.inventDim, fieldStr(InventDim, inventDimId))
                    .isEqualTo(this.purchLine, fieldStr(PurchLine, InventDimId));

        if (TaxIntegrationUseOriginalDeliveryAddressForReturnOrderLineFlight::instance().isEnabled())
        {
            queryBuilder.outerJoin(this.originalPurchLine)
                .where(this.originalPurchLine, fieldStr(PurchLine, InventTransId))
                    .isEqualTo(this.purchLine, fieldStr(PurchLine, InventRefTransId));
        }

        return queryBuilder.toSysDaQueryObject();


    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document from <c>PurchParmTable</c>.
    /// </summary>
    protected void copyToDocumentFromHeaderTable()
    {
        super();
        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            switch(document.getDocumentStatus())
            {
                case DocumentStatus::ReceiptsList:
                    document.setReceiptsListDate(this.purchParmTable.TransDate);
                    break;
                case DocumentStatus::PackingSlip:
                    document.setProductReceiptDate(this.purchParmTable.TransDate);
                    break;
                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line of the document.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructLine()
    {
        TaxIntegrationLineObject line;

        PurchCalcTax purchCalcTax = this.document.getLegacyTax().purchCalcTax();
        // PurchCalcTax_PackingSlip can have different heading table: PurchParmTable and VendPackingSlipJour.
        // When heading table is PurchParmTable, it will use this data retrieval class.
        if (purchCalcTax is PurchCalcTax_PackingSlip)
        {
            line = TaxIntegrationLineObject::constructOnDocument(
                this.purchParmLine.TableId,
                this.purchParmLine.RecId,
                this.document);
        }

        if (!line)
        {
            line = super();
        }
        return line;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQuantityAndTransactionAmountToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's quatity and amount.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyQuantityAndTransactionAmountToLine(TaxIntegrationLineObject _line)
    {
        // no super();

        _line.setQuantity(this.purchParmLine.ReceiveNow);
        _line.setLineAmount(this.purchParmLine.LineAmount);
        _line.setTransactionAmount(_line.getLineAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTaxabilityForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether tax should be calculated for current line and set isTaxable.
    /// Refers to <c>PurchCalcTax_ParmTrans.skipTaxRecalculationsForLine</c>.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void determineTaxabilityForLine(TaxIntegrationLineObject _line)
    {
        _line.setTaxable(purchParmLine.PreviousReceiveNow != purchParmLine.ReceiveNow);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>