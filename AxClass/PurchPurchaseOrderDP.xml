<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchPurchaseOrderDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchPurchaseOrderDP</c> class provides data for the <c>PurchPurchaseOrderDP</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(PurchPurchaseOrderContract))]
public class PurchPurchaseOrderDP extends SrsReportDataProviderPreProcess
{
    VendPurchOrderJour                      vendPurchOrderJour;
    PurchConfirmationRequestJour            purchConfirmationRequestJour;
    
    private FormletterProformaPrint         formletterProformaPrint;
    private PurchPurchOrderJournalPrint     purchPurchOrderJournalPrint;

    private VendFormletterDocument          vendFormletterDocument;
    private VendFormletterParameters        vendFormletterParameters;
    private str                             agreementNote;
    private Set                             linesChangedFieldIdSet;
    private str                             quantityLabel;
    
    private boolean                         insertInventDim;
    
    private container                       inventDimSetup;
    private container                       inventDimProductSetup;
    private InventDimCtrl_Rep_Purch         inventDimReport;

    private PurchTableAllVersions           purchTableAllVersions;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data for the report.
    /// </summary>
    /// <param name="_contract">
    /// An instance of <c>PurchPurchaseOrderContract</c> report contract class.
    /// </param>
    public void createData(PurchPurchaseOrderContract _contract)
    {
        this.parmDataContract(_contract);

        this.createReportData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates report data for the purchase order document.
    /// </summary>
    /// <returns>
    /// The <c>PurchPurchaseOrderHeader</c> record which is the header for the report data.
    /// </returns>
    protected PurchPurchaseOrderHeader createReportData()
    {
        this.initializeReportData();

        this.initializeJournalAndVersion();

        return this.createOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTableAllVersions</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public PurchTableAllVersions parmPurchTableAllVersions()
    {
        return purchTableAllVersions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report data.
    /// </summary>
    protected void initializeReportData()
    {
        this.initializePrintingConfirmation();

        this.initializeInventDimReportSetup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the order document.
    /// </summary>
    /// <returns>
    /// The <c>PurchPurchaseOrderHeader</c> record which is the header for the report data.
    /// </returns>
    protected PurchPurchaseOrderHeader createOrder()
    {
        PurchPurchaseOrderHeader purchPurchaseOrderHeader = this.createOrderHeader();

        this.createOrderLines(purchPurchaseOrderHeader);

        this.createTaxLines(purchPurchaseOrderHeader);

        return purchPurchaseOrderHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrderLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the order lines.
    /// </summary>
    /// <param name = "_purchaseOrderHeader">
    /// A <c>PurchPurchaseOrderHeader</c> record which is the order header.
    /// </param>
    protected void createOrderLines(PurchPurchaseOrderHeader _purchaseOrderHeader)
    {
        boolean highlightUpdated = this.highlightUpdated();

        Enumerator enumerator = PurchPurchaseOrderDPOrderLineQuery::newQuery(this).getEnumerator();

        while (enumerator.moveNext())
        {
            PurchPurchaseOrderDPOrderLineQuerySelection orderLineSelection = enumerator.current() as PurchPurchaseOrderDPOrderLineQuerySelection;

            if (this.mustCreateOrderLine(_purchaseOrderHeader, orderLineSelection))
            {
                this.createOrderLine(_purchaseOrderHeader, highlightUpdated, orderLineSelection);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an order line must be created.
    /// </summary>
    /// <param name = "_purchaseOrderHeader">
    /// A <c>PurchPurchaseOrderHeader</c> record which is the order header.
    /// </param>
    /// <param name = "_orderLineSelection">
    /// A <c>PurchPurchaseOrderDPOrderLineQuerySelection</c> object which the order line should be created for.
    /// </param>
    /// <returns>
    /// true, if the order line must be created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The method is meant as an extension point to change the decision whether an order line must be created.
    /// </remarks>
    protected boolean mustCreateOrderLine(
        PurchPurchaseOrderHeader                    _purchaseOrderHeader, 
        PurchPurchaseOrderDPOrderLineQuerySelection _orderLineSelection)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the order tax lines.
    /// </summary>
    /// <param name = "_purchaseOrderHeader">
    /// A <c>PurchPurchaseOrderHeader</c> record which is the order header.
    /// </param>
    protected void createTaxLines(PurchPurchaseOrderHeader _purchaseOrderHeader)
    {
        if (this.parmVendFormletterParameters().TaxSpecPrintLevel != TaxSpecPrintLevel::None)
        {
            boolean printTaxAmountMST	= this.printTaxAmountMST();
            TaxSpec taxSpec				= this.instantiateTaxSpec(_purchaseOrderHeader);

            while (taxSpec.parmTaxSpec())
            {
                if (this.mustCreateTaxLine(_purchaseOrderHeader, TaxSpec))
                {
                    this.createTaxLine(_purchaseOrderHeader, taxSpec, printTaxAmountMST);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateTaxLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a tax line must be created.
    /// </summary>
    /// <param name = "_purchaseOrderHeader">
    /// A <c>PurchPurchaseOrderHeader</c> record which is the order header.
    /// </param>
    /// <param name = "_taxSpec">
    /// A <c>TaxSpec</c> object to create the tax line for.
    /// </param>
    /// <returns>
    /// true, if the tax line must be created; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The method is meant as an extension point to change the decision whether a tax line must be created.
    /// </remarks>
    protected boolean mustCreateTaxLine(PurchPurchaseOrderHeader _purchaseOrderHeader, TaxSpec _taxSpec)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printTaxAmountMST</Name>
				<Source><![CDATA[
    private boolean printTaxAmountMST()
    {
        boolean printTaxAmountMST = true;

		if (this.parmVendFormletterParameters().TaxSpecPrintLevel == TaxSpecPrintLevel::Currency ||
			((this.parmVendFormletterParameters().TaxSpecPrintLevel == TaxSpecPrintLevel::CurrencyMST) &&
            (this.parmpurchTableAllVersions().CurrencyCode == Ledger::accountingCurrency(CompanyInfo::current()))))
		{
			printTaxAmountMST = false;
		}

        return printTaxAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>highlightUpdated</Name>
				<Source><![CDATA[
    private boolean highlightUpdated()
    {
        boolean highlightUpdated = false;

        if (!this.parmPurchTableAllVersions().isFirstVersion())
        {
            if (this.isPurchConfirmationRequestJournal())
            {
                highlightUpdated = this.parmVendFormletterParameters().HighlightUpdatedLinesConfirmationRequest == NoYes::Yes;
            }
            else
            {
                highlightUpdated = this.parmVendFormletterParameters().HighlightUpdatedLines == NoYes::Yes;
            }
        }
        
        return highlightUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePrintingConfirmation</Name>
				<Source><![CDATA[
    private void initializePrintingConfirmation()
    {
        purchPurchOrderJournalPrint = this.unpackPurchFormLetter(this.parmPurchaseOrderContract().parmFormLetterRecordId());

        if (purchPurchOrderJournalPrint && purchPurchOrderJournalPrint.parmProforma())
        {
            formletterProformaPrint = FormletterProformaPrint::newUnpack(purchPurchOrderJournalPrint.parmFormletterProformaPrintPacked());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventDimReportSetup</Name>
				<Source><![CDATA[
    private void initializeInventDimReportSetup()
    {
        inventDimReport = InventDimCtrl_Rep_Purch::construct();
        inventDimReport.parmDocumentStatus(this.getDocumentStatus());
        inventDimReport.initDimParmVisible();
        inventDimSetup = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());
        inventDimReport.initProductDimParmVisible();
        inventDimProductSetup = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());

        insertInventDim = inventDimReport.isInventDimLine() || inventDimReport.isInventDimItemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateTaxSpec</Name>
				<Source><![CDATA[
    private TaxSpec instantiateTaxSpec(PurchPurchaseOrderHeader _purchaseOrderHeader)
    {
        TaxSpec taxSpec;

        if (this.isProformaPrint())
        {
            taxSpec = TaxSpec::construct('', naDate(), _purchaseOrderHeader.JournalRecId);
            taxSpec.setTmpTaxWorkTrans(this.tmpTaxWorkTrans(_purchaseOrderHeader));
        }
        else
        {
            taxSpec = this.getTaxJournalSpec();
        }

        return taxSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the corresponding <c>DocumentStatus</c> for current journal
    /// </summary>
    /// <returns>
    /// <c>DocumentStatus</c> enum value.
    /// </returns>
    private DocumentStatus getDocumentStatus()
    {
        return this.isPurchConfirmationRequestJournal() ? DocumentStatus::ConfirmationRequest : DocumentStatus::PurchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchaseOrderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns purchase order ID of current journal.
    /// </summary>
    /// <returns>
    /// An ID of a purchase order.
    /// </returns>
    private PurchaseOrderId getPurchaseOrderId()
    {
        return this.isPurchConfirmationRequestJournal() ? purchConfirmationRequestJour.DocumentNumber : vendPurchOrderJour.PurchaseOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchPurchaseOrderHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from the <c>PurchPurchaseOrderHeader</c> table.
    /// </summary>
    /// <returns>
    /// The <c>PurchPurchaseOrderHeader</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PurchPurchaseOrderHeader))]
    public PurchPurchaseOrderHeader getPurchPurchaseOrderHeader()
    {
        PurchPurchaseOrderHeader purchaseOrderHeader;

        this.setTransactionConnection(purchaseOrderHeader);

        select purchaseOrderHeader;

        return purchaseOrderHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchPurchaseOrderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from the <c>PurchPurchaseOrderTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>PurchPurchaseOrderTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PurchPurchaseOrderTmp))]
    public PurchPurchaseOrderTmp getPurchPurchaseOrderTmp()
    {
        PurchPurchaseOrderTmp purchaseOrderTmp;

        this.setTransactionConnection(purchaseOrderTmp);

        select purchaseOrderTmp;

        return purchaseOrderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDocuBrandDetailsRegular</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from <c>SysDocuBrandDetailsRegular</c> table.
    /// </summary>
    /// <returns>
    /// The <c>SysDocuBrandDetailsRegular</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SysDocuBrandDetailsRegular))]
    public SysDocuBrandDetailsRegular getSysDocuBrandDetailsRegular()
    {
        SysDocuBrandDetailsRegular docuBrandDetailsRegular;

        this.setTransactionConnection(docuBrandDetailsRegular);

        select docuBrandDetailsRegular;

        return docuBrandDetailsRegular;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTableVersionRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>PurchTableVersion</c> table record ID of current journal.
    /// </summary>
    /// <returns>
    /// An ID of a <c>PurchTableVersion</c> table record.
    /// </returns>
    [Wrappable(false)]
    protected PurchTableVersionRecId parmPurchTableVersionRecId()
    {
        return this.isPurchConfirmationRequestJournal() ? purchConfirmationRequestJour.PurchTableVersion : vendPurchOrderJour.PurchTableVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxJournalSpec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and returns <c>TaxJournalSpec</c> class instance.
    /// </summary>
    /// <returns>
    /// An instance of the <c>TaxJournalSpec</c> class.
    /// </returns>
    private TaxJournalSpec getTaxJournalSpec()
    {
        TaxJournalSpec      taxJournalSpec;
        if (this.isPurchConfirmationRequestJournal())
        {
            taxJournalSpec = new TaxJournalSpec(purchConfirmationRequestJour.TableId, purchConfirmationRequestJour.RecId);
        }
        else
        {
            taxJournalSpec = new TaxJournalSpec(vendPurchOrderJour.TableId, vendPurchOrderJour.RecId);
        }
        return taxJournalSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePurchaseInquiryHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the purchase inquiry order header.
    /// </summary>
    /// <param name = "_purchConfirmationRequestJour">
    /// A <c>PurchConfirmationRequestJour</c> purchase inquiry journal header which the order header is initialized from.
    /// </param>
    /// <returns>
    /// The initialized <c>PurchPurchaseOrderHeader</c> record.
    /// </returns>
    protected PurchPurchaseOrderHeader initializePurchaseInquiryHeader(PurchConfirmationRequestJour _purchConfirmationRequestJour)
    {
        PurchPurchaseOrderHeader purchPurchaseOrderHeader;
        this.setTransactionConnection(purchPurchaseOrderHeader);

        purchPurchaseOrderHeader.JournalRecId = _purchConfirmationRequestJour.RecId;
        purchPurchaseOrderHeader.PrintLogo    = NoYes::No;
        purchPurchaseOrderHeader.initFromVendFormletterParameters(this.parmVendFormletterParameters());
        purchPurchaseOrderHeader.initFromPurchTableAllVersions(this.parmPurchTableAllVersions(), true);
        purchPurchaseOrderHeader.initFromPurchConfirmationRequestJour(_purchConfirmationRequestJour);

        if (purchPurchaseOrderHeader.PrintTaxFreeBalance == NoYes::Yes && purchPurchaseOrderHeader.Amount)
        {
            purchPurchaseOrderHeader.calculcatePurchConfReqTaxBalances(_purchConfirmationRequestJour);
        }

        if (this.parmVendFormletterParameters().PrintEuroAmount && purchPurchaseOrderHeader.Amount)
        {
            purchPurchaseOrderHeader.CurrencyCodeEuro          = Currency::findEuroCurrencyCode();
            if (purchPurchaseOrderHeader.CurrencyCodeEuro && purchPurchaseOrderHeader.CurrencyCodeEuro != purchPurchaseOrderHeader.CurrencyCode)
            {
                purchPurchaseOrderHeader.calculateEuroAmountsPurchConfReqJour(_purchConfirmationRequestJour);
            }
            else
            {
                purchPurchaseOrderHeader.CurrencyCodeEuro          = ''; //empty Euro currency means that euro line will not be printed
            }
        }

        return purchPurchaseOrderHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePurchaseOrderHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the purchase order header.
    /// </summary>
    /// <param name = "_vendPurchOrderJour">
    /// A <c>VendPurchOrderJour</c> purchase order journal header which the order header is initialized from.
    /// </param>
    /// <returns>
    /// The initialized <c>PurchPurchaseOrderHeader</c> record.
    /// </returns>
    protected PurchPurchaseOrderHeader initializePurchaseOrderHeader(VendPurchOrderJour _vendPurchOrderJour)
    {
        PurchPurchaseOrderHeader purchPurchaseOrderHeader;
        this.setTransactionConnection(purchPurchaseOrderHeader);

        purchPurchaseOrderHeader.JournalRecId = _vendPurchOrderJour.RecId;
        purchPurchaseOrderHeader.PrintLogo    = NoYes::No;
        purchPurchaseOrderHeader.initFromVendFormletterParameters(this.parmVendFormletterParameters(), false);
        purchPurchaseOrderHeader.initFromPurchTableAllVersions(this.parmPurchTableAllVersions());
        purchPurchaseOrderHeader.initFromVendPurchOrderJour(_vendPurchOrderJour);

        if (purchPurchaseOrderHeader.PrintTaxFreeBalance == NoYes::Yes && _vendPurchOrderJour.AmountPurchaseOrder)
        {
            if (this.isProformaPrint())
            {
                purchPurchaseOrderHeader.calculcateProformaTaxBalances(_vendPurchOrderJour, this.tmpTaxWorkTrans(purchPurchaseOrderHeader));
            }
            else
            {
                purchPurchaseOrderHeader.calculcateJournalizedTaxBalances(_vendPurchOrderJour);
            }
        }

        if (this.parmVendFormletterParameters().PrintEuroAmount && _vendPurchOrderJour.AmountPurchaseOrder)
        {
            purchPurchaseOrderHeader.CurrencyCodeEuro          = Currency::findEuroCurrencyCode();
            if (purchPurchaseOrderHeader.CurrencyCodeEuro && purchPurchaseOrderHeader.CurrencyCodeEuro != purchPurchaseOrderHeader.CurrencyCode)
            {
                purchPurchaseOrderHeader.calculateEuroAmounts(_vendPurchOrderJour);
            }
            else
            {
                purchPurchaseOrderHeader.CurrencyCodeEuro          = ""; //empty Euro currency means that euro line will not be printed
            }
        }

        if (_vendPurchOrderJour.ConfirmingPO)
        {
            ConfirmingPO confirmingPO = ConfirmingPO::find(_vendPurchOrderJour.ConfirmingPO);

            if (confirmingPO && confirmingPO.ConfirmingPOMessage && this.parmPurchTableAllVersions().LanguageId == confirmingPO.LanguageId)
            {
                purchPurchaseOrderHeader.ConfirmingPOMessage = confirmingPO.ConfirmingPOMessage;
            }
        }

        return purchPurchaseOrderHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSysDocuBrandDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>SysDocuBrandDetailsRegular</c> record with header details.
    /// </summary>
    /// <param name = "_purchaseOrderHeader">
    /// A <c>PurchPurchaseOrderHeader</c> record which is the order header.
    /// </param>
    /// <returns>
    /// The created <c>SysDocuBrandDetailsRegular</c> record.
    /// </returns>
    protected SysDocuBrandDetailsRegular setSysDocuBrandDetails(PurchPurchaseOrderHeader _purchaseOrderHeader)
    {
        SysDocuBrandDetailsRegular docuBrandDetails = this.initializeDocuBrandDetails(_purchaseOrderHeader);

        this.insertDocuBrandDetails(docuBrandDetails);
        return docuBrandDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDocuBrandDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes document brand details.
    /// </summary>
    /// <param name = "_purchaseOrderHeader">
    /// A <c>PurchPurchaseOrderHeader</c> record which is the order header.
    /// </param>
    /// <returns>
    /// The initialized <c>SysDocuBrandDetailsRegular</c> record.
    /// </returns>
    protected SysDocuBrandDetailsRegular initializeDocuBrandDetails(PurchPurchaseOrderHeader _purchaseOrderHeader)
    {
        SysDocuBrandDetailsRegular docuBrandDetails;

        this.setTransactionConnection(docuBrandDetails);

        docuBrandDetails.data(SysDocuBrandDetails::getDocuBrandDetailsRegular(this).data());
        docuBrandDetails.PaymTermDescription     = PaymTerm::find(_purchaseOrderHeader.Payment).Description;
        docuBrandDetails.CurrencySymbol          = Currency::find(_purchaseOrderHeader.CurrencyCode).Symbol;

        return docuBrandDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDocuBrandDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts document brand details.
    /// </summary>
    /// <param name = "_docuBrandDetails">
    /// A <c>SysDocuBrandDetailsRegular</c> record containing brand details data.
    /// </param>
    protected void insertDocuBrandDetails(SysDocuBrandDetailsRegular _docuBrandDetails)
    {
        _docuBrandDetails.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineUpdated</Name>
				<Source><![CDATA[
    private boolean isLineUpdated(PurchLineAllVersions _purchLineAllVersions, PurchLine _purchLineUpdated, PurchLineHistory _purchLineHistoryUpdated)
    {
        if ((_purchLineUpdated.RecId != 0) || (_purchLineHistoryUpdated.RecId != 0))
        {
            // Find previous version
            PurchLineAllVersions    purchLineAllVersionsPrevious;

            select firstonly * from purchLineAllVersionsPrevious order by RecId desc
                where  purchLineAllVersionsPrevious.InventTransId == _purchLineAllVersions.InventTransId
                    && purchLineAllVersionsPrevious.RecId         != _purchLineAllVersions.RecId;

            SetEnumerator linesChangedFieldIdsEnumerator = this.parmLinesChangedFieldIds().getEnumerator();

            while (linesChangedFieldIdsEnumerator.moveNext())
            {
                FieldId fieldId = linesChangedFieldIdsEnumerator.current();

                if (_purchLineAllVersions.(fieldId) != purchLineAllVersionsPrevious.(fieldId))
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the current journal record is proforma.
    /// </summary>
    /// <returns>
    /// true if it is proforma; otherwise false.
    /// </returns>
    private boolean isProforma()
    {
        return this.isPurchConfirmationRequestJournal() ? false : vendPurchOrderJour.isProforma();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProformaPrint</Name>
				<Source><![CDATA[
    protected boolean isProformaPrint()
    {
        return formletterProformaPrint && this.isProforma();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchConfirmationRequestJournal</Name>
				<Source><![CDATA[
    protected boolean isPurchConfirmationRequestJournal()
    {
        return this.parmPurchaseOrderContract().parmIsPurchConfirmationRequestJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the item ID.
    /// </summary>
    /// <param name = "_purchLineAllVersions">The purchase line.</param>
    /// <param name = "_purchLineAllVersionsInventDim">The inventory dimensions for the purchase line.</param>
    /// <returns>
    ///    The item ID.
    /// </returns>
    protected ItemId itemId(PurchLineAllVersions _purchLineAllVersions, InventDim _purchLineAllVersionsInventDim)
    {
        ItemId  itemId = FormLetter::journalItemId(ModuleInventPurchSales::Purch, _purchLineAllVersions.ItemId, _purchLineAllVersions.ExternalItemId);

        if (inventDimReport.isInventDimItemId())
        {
            itemId += inventDimReport.reportStrItemId(_purchLineAllVersionsInventDim);
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgreementNote</Name>
				<Source><![CDATA[
    protected str parmAgreementNote()
    {
        if (!agreementNote)
        {
            PurchAgreementHeader purchAgreementHeader = PurchAgreementHeader::find(this.parmPurchTableAllVersions().MatchingAgreement);
            agreementNote = strFmt("@GLS180177", purchAgreementHeader.DocumentExternalReference ? purchAgreementHeader.DocumentExternalReference : purchAgreementHeader.PurchNumberSequence);
        }

        return agreementNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLinesChangedFieldIds</Name>
				<Source><![CDATA[
    public Set parmLinesChangedFieldIds()
    {
        if (!linesChangedFieldIdSet)
        {
            linesChangedFieldIdSet = PurchLineAllVersions::linesChangedFieldIdSet();
        }

        return linesChangedFieldIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseOrderContract</Name>
				<Source><![CDATA[
    public PurchPurchaseOrderContract parmPurchaseOrderContract()
    {
        return this.parmDataContract() as PurchPurchaseOrderContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveQuantityLabel</Name>
				<Source><![CDATA[
    private str retrieveQuantityLabel(LanguageId _languageId)
    {
        if (!quantityLabel)
        {
            quantityLabel = SysLabel::labelId2String(literalStr("@SYS321794"), _languageId);
        }

        return quantityLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendFormletterDocument</Name>
				<Source><![CDATA[
    public VendFormletterDocument parmVendFormletterDocument()
    {
        if (!vendFormletterDocument.RecId)
        {
            vendFormletterDocument = VendFormletterDocument::find();
        }

        return vendFormletterDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendFormletterParameters</Name>
				<Source><![CDATA[
    public VendFormletterParameters parmVendFormletterParameters()
    {
        if (!vendFormletterParameters.RecId)
        {
            vendFormletterParameters = VendFormletterParameters::find();
        }

        return vendFormletterParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDimHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the inventory quantity and inventory storage dimensions.
    /// </summary>
    /// <param name = "_orderLineSelection">
    /// A <c>PurchPurchaseOrderDPOrderLineQuerySelection</c> object which the quantity is calculated for.
    /// </param>
    /// <returns>
    /// A string with the inventory dimensions.
    /// </returns>
    protected str printDimHistory(PurchPurchaseOrderDPOrderLineQuerySelection _orderLineSelection)
    {
        PurchPurchaseOrderDPDimHistoryBuilder builder = PurchPurchaseOrderDPDimHistoryBuilder::construct();
        builder.parmPurchTableAllVersions(this.parmPurchTableAllVersions());
        builder.parmPurchLineAllVersions(_orderLineSelection.parmPurchLineAllVersions());
        builder.parmInventDimSetup(inventDimSetup);
        builder.parmDefaultInventDim(_orderLineSelection.parmPurchLineAllVersionsInventDim());
        builder.parmIsProforma(this.isProformaPrint());
        builder.parmPurchaseOrderId(this.getPurchaseOrderId());
        return builder.build();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic, calls the helper methods, and inserts data into the temporary
    /// table.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. It will be called by SQL
    /// Server Reporting Services (SSRS) at run time. The method should compute data and populate the data
    /// tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        PurchPurchaseOrderHeader purchPurchaseOrderHeader = PurchPurchaseOrderHeader::findJourRecId(this.parmPurchaseOrderContract().parmRecordId());

        if (purchPurchaseOrderHeader.RecId && purchPurchaseOrderHeader.IsProForma)
        {
            //the report data is already created so use it. this is the proforma scenario.
            this.copyReportData(purchPurchaseOrderHeader);
        }
        else
        {
            purchPurchaseOrderHeader = this.createReportData();
        }

        // set Document Branding Header
        this.setSysDocuBrandDetails(purchPurchaseOrderHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the report data for an order document.
    /// </summary>
    /// <param name = "_purchaseOrderHeader">
    /// A <c>PurchPurchaseOrderHeader</c> record which is the order to be copied.
    /// </param>
    protected void copyReportData(PurchPurchaseOrderHeader _purchaseOrderHeader)
    {
        this.copyHeader(_purchaseOrderHeader);
        this.copyLines(_purchaseOrderHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the order header.
    /// </summary>
    /// <param name = "_purchaseOrderHeader">
    /// A <c>PurchPurchaseOrderHeader</c> record to copy.
    /// </param>
    protected void copyHeader(PurchPurchaseOrderHeader _purchaseOrderHeader)
    {
        RecordSortedList recordList = new RecordSortedList(tableNum(PurchPurchaseOrderHeader));
        recordList.sortOrder(fieldNum(PurchPurchaseOrderHeader, RecId));
        recordList.ins(_purchaseOrderHeader);

        _purchaseOrderHeader.delete(); //the created data is copied so it should be deleted.

        recordList.insertDatabase(this.parmUserConnection()); //it is inserted within user user connection so the framework will delete it automatically after the report is done.
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies order and tax lines
    /// </summary>
    /// <param name = "_purchaseOrderHeader">
    /// A <c>PurchPurchaseOrderHeader</c> record which is the order header for the lines to copy.
    /// </param>
    protected void copyLines(PurchPurchaseOrderHeader _purchaseOrderHeader)
    {
        RecordSortedList recordList = new RecordSortedList(tableNum(PurchPurchaseOrderTmp));
        recordList.sortOrder(fieldNum(PurchPurchaseOrderTmp, RecId));

        PurchPurchaseOrderTmp      localPurchPurchaseOrderTmp;

        while select localPurchPurchaseOrderTmp
            where localPurchPurchaseOrderTmp.CreatedTransactionId == _purchaseOrderHeader.CreatedTransactionId
        {
            recordList.ins(localPurchPurchaseOrderTmp);
        }

        delete_from localPurchPurchaseOrderTmp //the created data is copied so it should be deleted.
        where localPurchPurchaseOrderTmp.CreatedTransactionId == _purchaseOrderHeader.CreatedTransactionId;

        recordList.insertDatabase(this.parmUserConnection()); //it is inserted within user user connection so the framework will delete it automatically after the report is done.
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchQuoteNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the consolidation quote number for the purchase line.
    /// </summary>
    /// <param name = "_purchLineAllVersions">
    /// A <c>PurchLineAllVersions</c> record which the consolidation quote number is retrieved for.
    /// </param>
    /// <returns>
    /// The consolidation quote number.
    /// </returns>
    protected PurchQuoteNumber purchQuoteNumber(PurchLineAllVersions _purchLineAllVersions)
    {
        PurchQuoteNumber        returnPurchQuoteNumber;
        PurchReqLineHistory     purchReqLineHistory;
        CatExternalCatalogQuote catExternalCatalogQuote;

        PurchReqLineExternalCatalogQuote    purchReqLineExternalCatalogQuote;
        utcdatetime versionDateTime = _purchLineAllVersions.VersionDateTime;

        if (_purchLineAllVersions.PurchReqId != '')
        {
            select firstonly validtimestate(versionDateTime) PurchReqLine, LineType, VendQuoteNumber
                from purchReqLineHistory
                where purchReqLineHistory.LineRefId == _purchLineAllVersions.PurchReqLineRefId;

            if (purchReqLineHistory.LineType == PurchReqLineType::External)
            {
                // PurchReqLineExternalCatalogQuote does not implement history pattern.
                select firstonly Number from catExternalCatalogQuote
                    exists join purchReqLineExternalCatalogQuote
                    where purchReqLineExternalCatalogQuote.ExternalCatalogQuote == catExternalCatalogQuote.RecId
                       && purchReqLineExternalCatalogQuote.PurchReqLine == purchReqLineHistory.PurchReqLine;

                returnPurchQuoteNumber = catExternalCatalogQuote.Number;
            }
            else
            {
                returnPurchQuoteNumber = purchReqLineHistory.VendQuoteNumber;
            }
        }

        return returnPurchQuoteNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the RFQ ID of the RFQ that is associated with the line.
    /// </summary>
    /// <param name = "_purchLineAllVersions">
    /// A <c>PurchLineAllVersions</c> record which the RFQ ID is retrieved from.
    /// </param>
    /// <returns>
    /// The ID of the associated RFQ.
    /// </returns>
    protected PurchRFQId purchRFQId(PurchLineAllVersions _purchLineAllVersions)
    {
        VendRFQTrans vendRFQTrans;
        PurchOrderRFQLineReference purchOrderRFQLineReference;

        select firstonly rfqId from vendRFQTrans
            exists join purchOrderRFQLineReference
            where purchOrderRFQLineReference.VendRFQTrans == vendRFQTrans.RecId
               && purchOrderRFQLineReference.PurchLineInventTransId == _purchLineAllVersions.InventTransId
               && purchOrderRFQLineReference.PurchLineDataAreaID == _purchLineAllVersions.DataAreaId;

        return vendRFQTrans.rfqId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchUnitTxt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the text of the <c>PurchUnitText</c> object.
    /// </summary>
    /// <param name = "_purchLineAllVersions">
    /// A <c>PurchLineAllVersions</c> record which the text created for.
    /// </param>
    /// <param name = "_languageId">
    /// A language id describing the language in which the text must be created.
    /// </param>
    /// <returns>
    /// The text of the <c>PurchUnit</c> object.
    /// </returns>
    private UnitOfMeasureReportingText purchUnitTxt(PurchLineAllVersions _purchLineAllVersions, LanguageId _languageId)
    {
        return UnitOfMeasureReportingTranslation::unitOfMeasureReportingText(UnitOfMeasure::unitOfMeasureIdBySymbol(_purchLineAllVersions.PurchUnit), _languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeJournalAndVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the purchase inquiry or order journal.
    /// </summary>
    private void initializeJournalAndVersion()
    {
        if (this.isPurchConfirmationRequestJournal())
        {
            select * from purchConfirmationRequestJour where purchConfirmationRequestJour.RecId == this.parmPurchaseOrderContract().parmRecordId()
            outer join firstonly * from purchTableAllVersions
                where purchTableAllVersions.PurchTableVersionRecId == purchConfirmationRequestJour.PurchTableVersion;
        }
        else
        {
            select * from vendPurchOrderJour where vendPurchOrderJour.RecId == this.parmPurchaseOrderContract().parmRecordId()
                    outer join firstonly * from purchTableAllVersions
                    where purchTableAllVersions.PurchTableVersionRecId == vendPurchOrderJour.PurchTableVersion;

        }

        if (this.isProforma())
        {
            purchTableAllVersions.initFromProformaPurchTableVersion(PurchTableVersion::find(this.parmPurchTableVersionRecId()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an order line.
    /// </summary>
    /// <param name = "_purchaseOrderHeader">
    /// A <c>PurchPurchaseOrderHeader</c> record which is the order header.
    /// </param>
    /// <param name = "_highlightUpdated">
    /// A Boolean describing whether an updated order line must be highlighted.
    /// </param>
    /// <param name = "_orderLineSelection">
    /// A <c>PurchPurchaseOrderDPOrderLineQuerySelection</c> object which the order line should be created for.
    /// </param>
    /// <returns>
    /// The created <c>PurchPurchaseOrderTmp</c> order line record.
    /// </returns>
    protected PurchPurchaseOrderTmp createOrderLine(
        PurchPurchaseOrderHeader                    _purchaseOrderHeader,
        boolean                                     _highlightUpdated,
        PurchPurchaseOrderDPOrderLineQuerySelection _orderLineSelection)
    {
        PurchPurchaseOrderTmp purchPurchaseOrderTmp = this.initializeOrderLine(_purchaseOrderHeader, _highlightUpdated, _orderLineSelection);
        
        this.insertOrderLine(purchPurchaseOrderTmp);

        return purchPurchaseOrderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchPurchaseOrderDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record field data into the temporary table.
    /// </summary>
    /// <param name="_purchOrderTransOrTaxTrans">
    /// A <c>Boolean</c> value that indicates whether the transaction has a trans or tax value.
    /// </param>
    [SysObsolete('use createOrderLine(), initializeOrderLine() and insertOrderLine() instead.', true, 30\11\2017)]
    protected void setPurchPurchaseOrderDetails(boolean _purchOrderTransOrTaxTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchPurchaseOrderHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts common data into the template table buffer.
    /// </summary>
    [SysObsolete('use createOrderHeader() and insertOrderHeader() instead.', true, 30\11\2017)]
    protected void setPurchPurchaseOrderHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an order line.
    /// </summary>
    /// <param name = "_purchaseOrderHeader">
    /// A <c>PurchPurchaseOrderHeader</c> record which is the order header.
    /// </param>
    /// <param name = "_highlightUpdated">
    /// A Boolean describing whether an updated order line must be highlighted.
    /// </param>
    /// <param name = "_orderLineSelection">
    /// A <c>PurchPurchaseOrderDPOrderLineQuerySelection</c> object which the order line should be created for.
    /// </param>
    /// <returns>
    /// The initialized <c>PurchPurchaseOrderTmp</c> order line record.
    /// </returns>
    protected PurchPurchaseOrderTmp initializeOrderLine(
        PurchPurchaseOrderHeader                    _purchaseOrderHeader,
        boolean                                     _highlightUpdated,
        PurchPurchaseOrderDPOrderLineQuerySelection _orderLineSelection)
    {
 
        PurchPurchaseOrderTmp purchPurchaseOrderTmp;
        this.setTransactionConnection(purchPurchaseOrderTmp);
        
        purchPurchaseOrderTmp.JournalRecId = _purchaseOrderHeader.JournalRecId;

        //Purch Order Trans
        purchPurchaseOrderTmp.ItemId                 = this.itemId(_orderLineSelection.parmPurchLineAllVersions(), _orderLineSelection.parmPurchLineAllVersionsInventDim());
        purchPurchaseOrderTmp.PurchaseLineLineNumber = _orderLineSelection.parmPurchLineAllVersions().LineNumber;
        purchPurchaseOrderTmp.PurchLineInventTransId = _orderLineSelection.parmPurchLineAllVersions().InventTransId;
        purchPurchaseOrderTmp.Name                   = _orderLineSelection.parmPurchLineAllVersions().Name;
        purchPurchaseOrderTmp.DeliveryDate           = _orderLineSelection.parmPurchLineAllVersions().DeliveryDate;
        if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            purchPurchaseOrderTmp.RequestedShipDate = _orderLineSelection.parmPurchLineAllVersions().RequestedShipDate;
        }

        purchPurchaseOrderTmp.Qty                    = _orderLineSelection.parmPurchLineAllVersions().PurchQty;
        purchPurchaseOrderTmp.PurchUnitTxt           = this.purchUnitTxt(_orderLineSelection.parmPurchLineAllVersions(), this.parmPurchTableAllVersions().LanguageId);
        purchPurchaseOrderTmp.PurchPrice             = _orderLineSelection.parmPurchLineAllVersions().PurchPrice;
        purchPurchaseOrderTmp.DiscPercent            = _orderLineSelection.parmPurchLineAllVersions().DiscPercent;
        purchPurchaseOrderTmp.DiscAmount             = _orderLineSelection.parmPurchLineAllVersions().DiscAmount;
        purchPurchaseOrderTmp.LineAmount             = _orderLineSelection.parmPurchLineAllVersions().LineAmount;
        purchPurchaseOrderTmp.CurrencyCode           = _orderLineSelection.parmPurchLineAllVersions().CurrencyCode;
        purchPurchaseOrderTmp.TaxWriteCode           = _orderLineSelection.parmPurchLineAllVersions().ConfirmedTaxWriteCode;

        purchPurchaseOrderTmp.PdsCWUnitId           = _orderLineSelection.parmPurchLineAllVersions().pdsCWUnitId();
        purchPurchaseOrderTmp.PdsCWQty              = _orderLineSelection.parmPurchLineAllVersions().PdsCWQty;

        purchPurchaseOrderTmp.IsUpdated              = _highlightUpdated ? this.isLineUpdated(_orderLineSelection.parmPurchLineAllVersions(), _orderLineSelection.parmPurchLineUpdated(), _orderLineSelection.parmPurchLineHistoryUpdated()) : false;

        if (_orderLineSelection.parmPurchLineAllVersions().MatchingAgreementLine)
        {
            purchPurchaseOrderTmp.AgreementReferenceNotes = this.parmAgreementNote();
        }

        //ExternalItemNum
        purchPurchaseOrderTmp.ExternalItemNum        = FormLetter::journalExternalItemId(ModuleInventPurchSales::Purch, _orderLineSelection.parmPurchLineAllVersions().ExternalItemId);

        if (this.isPurchConfirmationRequestJournal())
        {
            DocuRefSearch        confirmationRequestDocuRefSearch;
            PurchLine            confirmationRequestPurchLine;
                
            if (_orderLineSelection.parmPurchLineAllVersions().IsArchived)
            {
                confirmationRequestPurchLine = PurchLine::findInventTransId(_orderLineSelection.parmPurchLineAllVersions().InventTransId);
            }
            else
            {
                confirmationRequestPurchLine.RecId = _orderLineSelection.parmPurchLineAllVersions().RecId1;
            }
            confirmationRequestDocuRefSearch = DocuRefSearch::newTypeIdAndRestriction(confirmationRequestPurchLine, this.parmVendFormletterDocument().DocuTypePurchOrderConfirmationRequest, DocuRestriction::External);
            purchPurchaseOrderTmp.NotesTrans = Docu::concatDocuRefNotes(confirmationRequestDocuRefSearch);
        }
        else if ((this.parmVendFormletterDocument().DocuOnPurchOrder == DocuOnFormular::Line) || (this.parmVendFormletterDocument().DocuOnPurchOrder == DocuOnFormular::All))
        {
            DocuRefSearch        purchOrderDocuRefSearch;
            PurchLine            purchOrderPurchLine;

            if (_orderLineSelection.parmPurchLineAllVersions().IsArchived)
            {
                purchOrderPurchLine = PurchLine::findInventTransId(_orderLineSelection.parmPurchLineAllVersions().InventTransId);
            }
            else
            {
                purchOrderPurchLine.RecId = _orderLineSelection.parmPurchLineAllVersions().RecId1;
            }
            purchOrderDocuRefSearch = DocuRefSearch::newTypeIdAndRestriction(purchOrderPurchLine, this.parmVendFormletterDocument().DocuTypePurchOrder, DocuRestriction::External);
            purchPurchaseOrderTmp.NotesTrans        = Docu::concatDocuRefNotes(purchOrderDocuRefSearch);
        }

        purchPurchaseOrderTmp.InventDimQtyPrint     = this.printDimHistory(_orderLineSelection);

        if (insertInventDim)
        {
            purchPurchaseOrderTmp.InventDimStr      = FormLetter::inventDimReport(_orderLineSelection.parmPurchLineAllVersionsInventDim(), inventDimProductSetup, this.parmPurchTableAllVersions().LanguageId);
        }

        // RFQId and Quote Number
        purchPurchaseOrderTmp.rfqId                 = this.purchRFQId(_orderLineSelection.parmPurchLineAllVersions());
        purchPurchaseOrderTmp.QuoteNumber           = this.purchQuoteNumber(_orderLineSelection.parmPurchLineAllVersions());

        purchPurchaseOrderTmp.MCRDropShipComment    = _orderLineSelection.parmPurchLineAllVersions().MCRPurchLineHistory().MCRDropShipComment;

        purchPurchaseOrderTmp.PurchOrderTransOrTaxTrans = NoYes::Yes;

        return purchPurchaseOrderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the order line.
    /// </summary>
    /// <param name = "_purchaseOrderTmp">
    /// A <c>PurchPurchaseOrderTmp</c> order line record to insert.
    /// </param>
    protected void insertOrderLine(PurchPurchaseOrderTmp _purchaseOrderTmp)
    {
        _purchaseOrderTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a tax line.
    /// </summary>
    /// <param name = "_purchaseOrderHeader">
    /// A <c>PurchPurchaseOrderHeader</c> record which is the order header.
    /// </param>
    /// <param name = "_taxSpec">
    /// A <c>TaxSpec</c> object to create the tax line for.
    /// </param>
    /// <param name = "_printTaxAmountMST">
    /// A Boolean describing whether tax amounts in company currency must be printed.
    /// </param>
    /// <returns>
    /// The created <c>PurchPurchaseOrderTmp</c> tax line record.
    /// </returns>
    protected PurchPurchaseOrderTmp createTaxLine(PurchPurchaseOrderHeader _purchaseOrderHeader, TaxSpec _taxSpec, boolean _printTaxAmountMST)
    {
        PurchPurchaseOrderTmp purchPurchaseOrderTmp = this.initializeTaxLine(_purchaseOrderHeader, _taxSpec, _printTaxAmountMST);
        
        this.insertTaxLine(purchPurchaseOrderTmp);

        return purchPurchaseOrderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTaxLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a tax line.
    /// </summary>
    /// <param name = "_purchaseOrderHeader">
    /// A <c>PurchPurchaseOrderHeader</c> record which is the order header.
    /// </param>
    /// <param name = "_taxSpec">
    /// A <c>TaxSpec</c> object to initialize the tax line from.
    /// </param>
    /// <param name = "_printTaxAmountMST">
    /// A Boolean describing whether tax amounts in company currency must be printed.
    /// </param>
    /// <returns>
    /// The initialized <c>PurchPurchaseOrderTmp</c> tax line record.
    /// </returns>
    protected PurchPurchaseOrderTmp initializeTaxLine(PurchPurchaseOrderHeader _purchaseOrderHeader, TaxSpec _taxSpec, boolean _printTaxAmountMST)
    {
        PurchPurchaseOrderTmp purchPurchaseOrderTmp;
        this.setTransactionConnection(purchPurchaseOrderTmp);

        purchPurchaseOrderTmp.JournalRecId          = _purchaseOrderHeader.JournalRecId;

        purchPurchaseOrderTmp.PrintCode             = _taxSpec.taxWriteCode();
        purchPurchaseOrderTmp.TaxCode               = _taxSpec.taxCode();
        purchPurchaseOrderTmp.TaxBaseAmount         = _taxSpec.taxBaseAmount();
        purchPurchaseOrderTmp.TaxBaseQty            = _taxSpec.taxBaseQty();
        purchPurchaseOrderTmp.TaxAmount             = _taxSpec.taxAmount();
        if (_printTaxAmountMST)
        {
            purchPurchaseOrderTmp.TaxAmountMST      = _taxSpec.taxAmountMST();
        }
        purchPurchaseOrderTmp.TaxExemptDescription  = _taxSpec.taxExemptDescription();

        if (_purchaseOrderHeader.PrintTaxAmountSalesExchangeRate && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            purchPurchaseOrderTmp.TaxAmountMST      = _taxSpec.taxAmountMST();
            purchPurchaseOrderTmp.TaxBaseAmountMST  = _taxSpec.taxBaseAmountMST();
        }

        purchPurchaseOrderTmp.PurchOrderTransOrTaxTrans = NoYes::No;

        return purchPurchaseOrderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the tax line.
    /// </summary>
    /// <param name = "_purchaseOrderTmp">
    /// A <c>PurchPurchaseOrderTmp</c> tax line record to insert.
    /// </param>
    protected void insertTaxLine(PurchPurchaseOrderTmp _purchaseOrderTmp)
    {
        _purchaseOrderTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrderHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the order header.
    /// </summary>
    /// <returns>
    /// The created <c>PurchPurchaseOrderHeader</c> record.
    /// </returns>
    protected PurchPurchaseOrderHeader createOrderHeader()
    {
        PurchPurchaseOrderHeader purchPurchaseOrderHeader;

        if (this.isPurchConfirmationRequestJournal())
        {
            purchPurchaseOrderHeader = this.initializePurchaseInquiryHeader(purchConfirmationRequestJour);
        }
        else
        {
            purchPurchaseOrderHeader = this.initializePurchaseOrderHeader(vendPurchOrderJour);
        }

        this.insertOrderHeader(purchPurchaseOrderHeader);

        return purchPurchaseOrderHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrderHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the order header.
    /// </summary>
    /// <param name = "_purchaseOrderHeader">
    /// A <c>PurchPurchaseOrderHeader</c> record to insert.
    /// </param>
    protected void insertOrderHeader(PurchPurchaseOrderHeader _purchaseOrderHeader)
    {
        _purchaseOrderHeader.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>TmpTaxWorkTrans</c> data.
    /// </summary>
    /// <param name = "_purchaseOrderHeader">
    /// A <c>PurchPurchaseOrderHeader</c> record retrieve tax data for.
    /// </param>
    /// <returns>
    /// The <c>TmpTaxWorkTrans</c> record; otherwise, null.
    /// </returns>
    protected TmpTaxWorkTrans tmpTaxWorkTrans(PurchPurchaseOrderHeader _purchaseOrderHeader)
    {
        if (this.isProformaPrint())
        {
            return formletterProformaPrint.tmpTaxWorkTrans(_purchaseOrderHeader.JournalRecId);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackPurchFormLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks an instance of the <c>PurchPurchOrderJournalPrint</c> class from a record in the
    /// <c>srsTmpDataStore</c> table.
    /// </summary>
    /// <param name="_formLetterRecId">
    /// The ID of a record to be read.
    /// </param>
    /// <returns>
    /// Unpacked instance of a <c>PurchPurchOrderJournalPrint</c> class.
    /// </returns>
    private PurchPurchOrderJournalPrint unpackPurchFormLetter(RecId _formLetterRecId)
    {
        purchPurchOrderJournalPrint unpackedPurchPurchOrderJournalPrint;

        if (_formLetterRecId)
        {
            ttsbegin;

            SRSTmpDataStore         srsTmpDataStore;
            
            select forupdate firstonly srsTmpDataStore
                where srsTmpDataStore.RecId == _formLetterRecId;

            if (srsTmpDataStore.RecId)
            {
                unpackedPurchPurchOrderJournalPrint = PurchPurchOrderJournalPrint::construct();
                unpackedPurchPurchOrderJournalPrint.unpack(srsTmpDataStore.Value);
                srsTmpDataStore.delete();
            }
            ttscommit;
        }

        return unpackedPurchPurchOrderJournalPrint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the database transaction connection for a record from the connection associated with the report.
    /// </summary>
    /// <param name = "_reportRecord">
    /// A record to set database transaction for.
    /// </param>
    final protected void setTransactionConnection(Common _reportRecord)
    {
        var connection = this.parmUserConnection();

        if (connection)
        {
            _reportRecord.setConnection(connection);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>