<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBondMergeablesGeneralJour_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Holds mergeable properties for general journal posting
/// </summary>
/// <remarks>
///  General Journal transactions have properties, which are:
///    - not managed by bonding engine
///    - should be processed specific way when same transactions are merged
/// </remarks>
class LedgerBondMergeablesGeneralJour_RU
{
    // Usuals - properties, that are:
    //  - of primitive types
    //  - when merged, takes mre recent values
    container usuals;

    #localmacro.usualsToTables
        [
            _ledgerEntry.ConsolidatedCompany,
            _line.Text ,
            _ledgerEntry.PaymentMode,
            _ledgerEntry.ThirdPartyBankAccount ,
            _ledgerEntry.CompanyBankAccount ,
            _ledgerEntry.IsBridgingPosting
        ]
    #endmacro

    // Resoan code sshould have specific logic for processing
    RefRecId                         reasonRef;
    LedgerPostingOneToManyCollection taxTransactionRelationshipCollection;
    Set                              subLedgers;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCollections</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds contents of collections _toMerge to collections _merged
    /// </summary>
    /// <param name="_merged">
    ///  collection - receiver
    /// </param>
    /// <param name="_tomerge">
    ///  collection which content is added
    /// </param>
    private void addCollections(LedgerPostingOneToManyCollection _merged, LedgerPostingOneToManyCollection _tomerge)
    {
        boolean         found = _tomerge.first();
        SetEnumerator   setEnumerator;
        ;

        while (found)
        {
            setEnumerator = _tomerge.currentMany().getEnumerator();

            while (setEnumerator.moveNext())
            {
                _merged.add(_tomerge.currentOne(), setEnumerator.current());
            }

            found = _tomerge.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerVoucherTransObject</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes values from given _trans
    /// </summary>
    /// <param name="_trans">
    ///   Object to get values from
    /// </param>
    /// <param name="_subLedgers">
    ///  Linked sub ledger journal line recIDs set
    /// </param>
    void initFromLedgerVoucherTransObject(LedgerVoucherTransObject _trans, Set _subLedgers)
    {
        #define.IgnoreDuplicates(true)

        usuals =
           [
                _trans.parmLedgerEntry().ConsolidatedCompany,
                _trans.parmText(),
                _trans.parmPaymMode(),
                _trans.parmLedgerEntry().ThirdPartyBankAccount,
                _trans.parmLedgerEntry().CompanyBankAccount,
                _trans.parmIsBridgingPosting()
           ];

        reasonRef                            = _trans.parmReasonCode();
        taxTransactionRelationshipCollection = _trans.taxTransGenJourAcctEntryCollection_RU();

        if (taxTransactionRelationshipCollection == null)
        {
            taxTransactionRelationshipCollection = LedgerPostingOneToManyCollection::construct(
                Types::Int64, // use this instead of RecId for perf
                Types::Container,
                #IgnoreDuplicates);
        }

        if (_subLedgers)
        {
            subLedgers = Set::union(subLedgers, _subLedgers);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>merge</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Merges parameters of _first and _last and places result to 'this'
    /// </summary>
    /// <param name="_first">
    ///   First object to merge
    /// </param>
    /// <param name="_last">
    ///   Last object to merge
    /// </param>
    void merge(LedgerBondMergeablesGeneralJour_RU _first, LedgerBondMergeablesGeneralJour_RU _last)
    {
        usuals = _first.usuals();
        reasonRef = (_first.reasonRef() == _last.reasonRef()) ? _first.reasonRef() : 0;

        taxTransactionRelationshipCollection = this.mergeOneToMany(_first.taxTransactionRelationshipCollection(),
                                                                   _last.taxTransactionRelationshipCollection());

        subLedgers = Set::union(_first.subLedgers(), _last.subLedgers());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeOneToMany</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Returns collection, that containes all elements of _first and _last
    /// </summary>
    /// <param name="_first">
    ///  First collection to merge
    /// </param>
    /// <param name="_second">
    ///  Last collection to merge
    /// </param>
    /// <returns>
    ///  Result of merge
    /// </returns>
    protected LedgerPostingOneToManyCollection mergeOneToMany(LedgerPostingOneToManyCollection _first, LedgerPostingOneToManyCollection _second)
    {
        #define.IgnoreDuplicates(true)
        LedgerPostingOneToManyCollection ret = LedgerPostingOneToManyCollection::construct(
            Types::Int64, // use this instead of RecId for perf
            Types::Container,
            #IgnoreDuplicates);

        this.addCollections(ret, _first);
        this.addCollections(ret, _second);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        subLedgers = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reasonRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Current reason code value
    /// </summary>
    /// <returns>
    ///  Reason ref
    /// </returns>
    protected RefRecID reasonRef()
    {
        return reasonRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTables</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets fields of given tables to internally stored value
    /// </summary>
    /// <param name="_line">
    ///   GeneralJournalAccountEntry
    /// </param>
    /// <param name="_lineW">
    ///  The country specific general journal account entry table.
    /// </param>
    /// <param name="_ledgerEntry">
    ///  LedgerEntry
    /// </param>
    public void setTables(GeneralJournalAccountEntry _line, GeneralJournalAccountEntry_W _lineW, LedgerEntry _ledgerEntry)
    {
        #usualsToTables = usuals;
        _line.ReasonRef = reasonRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subLedgers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns set of SubLedgerJournalAccountEntries recIDs, linked to the record
    /// </summary>
    /// <returns>
    ///   Set of recID's
    /// </returns>
    public Set subLedgers()
    {
        return subLedgers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxTransactionRelationshipCollection</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Returns collections, containing the set of tax transactions which
    /// current record is linked to
    /// </summary>
    /// <returns>
    ///  Set of tax transactions
    /// </returns>
    LedgerPostingOneToManyCollection taxTransactionRelationshipCollection()
    {
        return taxTransactionRelationshipCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>usuals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fields, that are processed usual way
    /// </summary>
    /// <returns>
    ///  Properties thet are:
    ///  - of primitive types
    ///  - when merged, takes mre recent values
    /// </returns>
    protected container usuals()
    {
        return usuals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newByLedgerVoucherTransObject</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates <c>LedgerBondMergeablesGeneralJour_RU</c> by given <c>LedgerTransVoucherObject</c>
    /// </summary>
    /// <param name="_trans">
    ///   LedgerTransVoucherObject to get properties from
    /// </param>
    /// <param name="_subLedgers">
    ///  Linked SubLedgerJournalAccountEntries recIDs set
    /// </param>
    /// <returns>
    ///  New initialized object
    /// </returns>
    static LedgerBondMergeablesGeneralJour_RU newByLedgerVoucherTransObject(LedgerVoucherTransObject _trans, Set _subLedgers = null)
    {
        LedgerBondMergeablesGeneralJour_RU ret = new LedgerBondMergeablesGeneralJour_RU();
        ret.initFromLedgerVoucherTransObject(_trans, _subLedgers);
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>