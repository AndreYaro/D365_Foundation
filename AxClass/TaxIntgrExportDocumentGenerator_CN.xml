<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntgrExportDocumentGenerator_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntgExportDocumentGenerator_CN</c> is the public interface to create the export document.
/// </summary>
class TaxIntgrExportDocumentGenerator_CN
{
    RefRecId        sourceRecId;
    RefTableId      sourceRelationType;

    RefRecId        sourcePostingRecId;
    RefTableId      sourcePostingRelationType;

    TaxIntgrExportDocumentSourceMap_CN exportDocumentSourceMap;
    TaxIntgrExportDocSourcePostingMap_CN exportDocumentSourcePostingMap;
    TaxIntgrExportDocSourceChargesMap_CN exportDocumentSourceChargesMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the direct export.
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code.
    /// </param>
    /// <param name="_exportDocumentSourceRecId">
    /// The export document source record id.
    /// </param>
    protected void doExport(TaxCode _taxCode, RefRecId _exportDocumentSourceRecId)
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;

        query = new query(queryStr(TaxIntgrExportDocumentSourceView_CN));
        queryBuildDataSource = query.dataSourceTable(tableNum(TaxIntgrExportDocumentSource_CN));
        queryBuildDataSource.addRange(fieldNum(TaxIntgrExportDocumentSource_CN, RecId)).value(SysQuery::value(_exportDocumentSourceRecId));

        TaxIntgrExportDocumentExporter_CN::export(_taxCode, query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doGenerate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs generation.
    /// </summary>
    protected void doGenerate()
    {
        TaxIntgrExportDocumentSourceType_CN         exportDocumentSourceType;
        TaxIntgrExportDocumentValidate_CN           exportDocumentValidate;
        TaxIntgrExportDocumentSourceCreator_CN      exportDocumentSourceCreator;
        boolean                                     isCreateExportDocument;
        TaxProfileTable_CN                          taxProfileTable;
        RefRecId                                    exportDocumentSourceRecId;
        TaxIntgrExportDocumentSource_CN             exportDocumentSource;
        TaxIntgrExportDocumentOperator_CN           exportDocumentOperator;

        exportDocumentSourceType = TaxIntgrExportDocumentSourceType_CN::construct(exportDocumentSourceMap, exportDocumentSourcePostingMap, exportDocumentSourceChargesMap && tableNum(TaxIntgrExportDocSourceCharges_CN) == exportDocumentSourceChargesMap.TableId ? exportDocumentSourceChargesMap : null);
        exportDocumentValidate = TaxIntgrExportDocumentValidate_CN::validateExportDocument(exportDocumentSourceType);
        taxProfileTable = TaxProfileTable_CN::findByTaxCode(exportDocumentSourceType.parmTaxCode());

        if (exportDocumentValidate.getIsExportDocumentApplicable())
        {
            isCreateExportDocument = exportDocumentValidate.getIsValidExportDocument();
            if (!isCreateExportDocument)
            {
                throw error("@SYS21533");
            }
        }

        if (isCreateExportDocument)
        {
            exportDocumentSourceCreator = TaxIntgrExportDocumentSourceCreator_CN::construct(exportDocumentSourceType);
            exportDocumentSourceRecId = exportDocumentSourceCreator.createExportDocumentSource();

            exportDocumentSource = TaxIntgrExportDocumentSource_CN::find(exportDocumentSourceRecId);
            if (taxProfileTable.IsSplitDuringPosting()
                && exportDocumentSource.isOverAmountLimit())
            {
                TaxIntgrExportDocumentSplit_CN::splitExportDocumentAuto(exportDocumentSourceRecId);
            }
            else
            {
                exportDocumentOperator = TaxIntgrExportDocumentOperator_CN::construct(TaxIntgrExportDocumentOperationType_CN::None);
                exportDocumentOperator.setSourceRecId(exportDocumentSourceRecId);
                exportDocumentOperator.operation();
            }

            if (taxProfileTable.isDirectlyExport())
            {
                this.doExport(exportDocumentSourceType.parmTaxCode(), exportDocumentSourceRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeExportDocumentSourceMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes the export document map.
    /// </summary>
    protected void initializeExportDocumentSourceMap()
    {
        DictTable                                   dictTableSource;
        DictTable                                   dictTableSourcePosting;

        Debug::assert(SysDictTable::isTableMapped(exportDocumentSourceMap.TableId, sourceRelationType));
        Debug::assert(SysDictTable::isTableMapped(exportDocumentSourcePostingMap.TableId, sourcePostingRelationType));

        dictTableSource = new DictTable(sourceRelationType);
        exportDocumentSourceMap = dictTableSource.makeRecord();

        dictTableSourcePosting = new DictTable(sourcePostingRelationType);
        exportDocumentSourcePostingMap = dictTableSourcePosting.makeRecord();

        select firstOnly exportDocumentSourceMap
            where exportDocumentSourceMap.RecId == sourceRecId;

        select firstOnly exportDocumentSourcePostingMap
            where exportDocumentSourcePostingMap.RecId == sourcePostingRecId;

        TaxIntgrExportDocSourceChargesMap_CN taxIntgrExportDocSourceChargesMap = exportDocumentSourceMap.TaxIntgrExportDocumentSourceMap_CN::getExportDocSourceChargesMap(sourceRecId);

        exportDocumentSourceChargesMap = exportDocumentSourceMap.TaxIntgrExportDocumentSourceMap_CN::getExportDocSourceChargesAmtMap(sourceRecId);
        exportDocumentSourceChargesMap.DescriptionCharges = taxIntgrExportDocSourceChargesMap.DescriptionCharges;
        exportDocumentSourceChargesMap.TaxValue = taxIntgrExportDocSourceChargesMap.TaxValue;
        exportDocumentSourceChargesMap.ExemptTax = taxIntgrExportDocSourceChargesMap.ExemptTax;
        exportDocumentSourceChargesMap.TaxDirection = taxIntgrExportDocSourceChargesMap.TaxDirection;
        exportDocumentSourceChargesMap.LineNum = exportDocumentSourceMap.TaxIntgrExportDocumentSourceMap_CN::getExportDocSourceChargesLineNum(sourceRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourcePostingRecId</Name>
				<Source><![CDATA[
    public RefRecId parmSourcePostingRecId(RefRecId _sourcePostingRecId = sourcePostingRecId)
    {
        sourcePostingRecId = _sourcePostingRecId;

        return sourcePostingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourcePostingRelationType</Name>
				<Source><![CDATA[
    public RefTableId parmSourcePostingRelationType(RefTableId _sourcePostingRelationType = sourcePostingRelationType)
    {
        sourcePostingRelationType = _sourcePostingRelationType;

        return sourcePostingRelationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceRecId</Name>
				<Source><![CDATA[
    public RefRecId parmSourceRecId(RefRecId _sourceRecId = sourceRecId)
    {
        sourceRecId = _sourceRecId;

        return sourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceRelationType</Name>
				<Source><![CDATA[
    public RefTableId parmSourceRelationType(RefTableId _sourceRelationType = sourceRelationType)
    {
        sourceRelationType = _sourceRelationType;

        return sourceRelationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates export document.
    /// </summary>
    /// <param name="_sourceRecId">
    /// The source record id.
    /// </param>
    /// <param name="_sourceRelationType">
    /// The source relation type.
    /// </param>
    /// <param name="_sourcePostingRecId">
    /// The source posting record id.
    /// </param>
    /// <param name="_sourcePostingRelationType">
    /// The source posting relation type.
    /// </param>
    public static void generate(
        RefRecId    _sourceRecId,
        RefTableId  _sourceRelationType,
        RefRecId    _sourcePostingRecId,
        RefTableId  _sourcePostingRelationType)
    {
        TaxIntgrExportDocumentGenerator_CN exportDocumentGenerator;

        exportDocumentGenerator = new TaxIntgrExportDocumentGenerator_CN();
        exportDocumentGenerator.parmSourceRecId(_sourceRecId);
        exportDocumentGenerator.parmSourceRelationType(_sourceRelationType);
        exportDocumentGenerator.parmSourcePostingRecId(_sourcePostingRecId);
        exportDocumentGenerator.parmSourcePostingRelationType(_sourcePostingRelationType);

        exportDocumentGenerator.initializeExportDocumentSourceMap();

        exportDocumentGenerator.doGenerate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>