<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQAmendmendEmailNotifier</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchRFQAmendmendEmailNotifier</c> class is used to
/// </summary>
public class PurchRFQAmendmendEmailNotifier extends RunBaseBatch implements BatchRetryable
{
    PurchRFQCaseId purchRFQCaseId;
    Map            rfqVendorsJournalsToSend;
    Map            rfqVendorsEmails;
    Map            emailTagsRFQCaseMapping;
    Set            rfqVendorsList;
    boolean        isRFQCancel;

    private PurchRFQInstrumentationLogger instrumentationLogger;

    #DEFINE.CurrentVersion(2)

    #LOCALMACRO.CurrentList
        purchRFQCaseId,
        isRFQCancel
    #ENDMACRO

    #Define.ReasonForBidReturn("Reason for bid return")

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEmailMessageTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SysEmailMessageTable for the email notifier and related email template
    /// </summary>
    /// <param name = "_emailNotifier">Instance of email notifier</param>
    /// <returns></returns>
    public static SysEmailMessageTable getEmailMessageTable(PurchRFQAmendmendEmailNotifier _emailNotifier)
    {
        SysEmailId              emailId = _emailNotifier.getEmailTemplateId();
        SysEmailTable           emailTable = SysEmailTable::find(emailId);
        SysEmailMessageTable    emailMessageTable = SysEmailMessageTable::find(emailId, emailTable.DefaultLanguage);

        return emailMessageTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailMessageBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets text to be used as email message body
    /// </summary>
    /// <param name = "_emailNotifier">Instance of email notifier</param>
    /// <param name = "_message">Message table buffer</param>
    /// <returns></returns>
    public static str getEmailMessageBody(PurchRFQAmendmendEmailNotifier _emailNotifier, SysEmailMessageTable _messageTable)
    {
        str xmlData = '';
        Map mappings = _emailNotifier.emailTagsRFQCaseMapping;
        str messageBody;

        if (_messageTable)
        {
            messageBody = _messageTable.LayoutType == SysEmailLayoutType::StaticLayout ? _messageTable.Mail
                        : SysEmailBatch::doTransform(xmlData, _messageTable.xsltMail);

            messageBody = SysLabel::resolveLabels(messageBody, _messageTable.LanguageId);
            messageBody = SysEmailMessage::stringExpand(messageBody, SysEmailTable::htmlEncodeParameters(mappings));
            messageBody = strReplace(messageBody, '\n', '<br>');
        }

        return messageBody;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateReportOutput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the report file in the drive.
    /// </summary>
    /// <param name="_vendRFQJour">The record of the <c>VendRFQJour</c> table.</param>
    private void generateReportOutput(VendRFQJour _vendRFQJour)
    {
        using (var activityContext = this.instrumentationLogger().amendmentEmailNotifier().generateReportOutput())
        {
            Args reportArgs = new Args();
            reportArgs.record(_vendRFQJour);
            reportArgs.parmEnum(PrintCopyOriginal::Original);
            reportArgs.caller(this);

            // Generates and saves the output in the PDF format for the RFQ-Case and specific vendor
            purchRFQSendController::main(reportArgs);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds new email entries in the <c>SysOutEmailTable</c> table.
    /// </summary>
    /// <param name="_vendRFQJour">The record of the <c>VendRFQJour</c> table.</param>
    private void generateEmail(VendRFQJour _vendRFQJour)
    {
        using (var activityContext = this.instrumentationLogger().amendmentEmailNotifier().generateEmail())
        {
            SysEmailId      sysEmailId      = isRFQCancel ? PurchRFQParameters::find().CancelSysEmailTable : PurchRFQParameters::find().SysEmailTable;
            SysEmailTable   sysEmailTable   = SysEmailTable::find(sysEmailId);
            Map             vendorsEmails   = this.parmRFQVendorsEmails();
            VendAccount     vendorAccount   = _vendRFQJour.VendAccount;
            LanguageId      languageId      = _vendRFQJour.LanguageId != '' ? _vendRFQJour.LanguageId : VendTable::find(vendorAccount).languageId();

            // Sends email to all email addresses of a recipient.
            SysEmailTable::sendMail(
                sysEmailId,
                languageId,
                vendorsEmails.lookup(vendorAccount),
                this.getVendorEmailTagsRFQCaseMapping(vendorAccount),
                '',
                '',
                true,
                curUserId(),
                true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorEmailTagsRFQCaseMapping</Name>
				<Source><![CDATA[
    private Map getVendorEmailTagsRFQCaseMapping(VendAccount _vendAccount)
    {
        Map vendorEmailTags = Map::create(emailTagsRFQCaseMapping.pack());

        if (!rfqVendorsList.in(_vendAccount))
        {
            vendorEmailTags.insert(#ReasonForBidReturn, "");
        }

        return vendorEmailTags;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion, #CurrentList, emailTagsRFQCaseMapping.pack(), rfqVendorsList.pack(), rfqVendorsEmails.pack(), rfqVendorsJournalsToSend.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmailTagsRFQCaseMapping</Name>
				<Source><![CDATA[
    public Map parmEmailTagsRFQCaseMapping(Map _emailTagsRFQCaseMapping = emailTagsRFQCaseMapping)
    {
        emailTagsRFQCaseMapping = _emailTagsRFQCaseMapping;

        return emailTagsRFQCaseMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchRFQCaseId</Name>
				<Source><![CDATA[
    public PurchRFQCaseId parmPurchRFQCaseId(PurchRFQCaseId _purchRFQCaseId = purchRFQCaseId)
    {
        purchRFQCaseId = _purchRFQCaseId;

        return purchRFQCaseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRfqVendorsList</Name>
				<Source><![CDATA[
    public Set parmRfqVendorsList(Set _rfqVendorsList = rfqVendorsList)
    {
        rfqVendorsList = _rfqVendorsList;

        return rfqVendorsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRFQCanceled</Name>
				<Source><![CDATA[
    public boolean parmIsRFQCanceled(boolean _isRFQCancel = isRFQCancel)
    {
        isRFQCancel = _isRFQCancel;

        return isRFQCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRFQVendorsEmails</Name>
				<Source><![CDATA[
    public Map parmRFQVendorsEmails(Map _rfqVendorsEmails = rfqVendorsEmails)
    {
        rfqVendorsEmails = _rfqVendorsEmails;

        return rfqVendorsEmails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRFQVendorsJournalsToSend</Name>
				<Source><![CDATA[
    public Map parmRFQVendorsJournalsToSend(Map _rfqVendorsJournalsToSend = rfqVendorsJournalsToSend)
    {
        rfqVendorsJournalsToSend = _rfqVendorsJournalsToSend;

        return rfqVendorsJournalsToSend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEmailNotifications</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the report output and sends it as email attachement using the print management framework
    /// </summary>
    public void processEmailNotifications()
    {
        VendRFQJour vendRFQJour;
        Map         vendorJournalsMap = this.parmRFQVendorsJournalsToSend();

        if (vendorJournalsMap)
        {
            PurchRFQSendEmailMethod emailMethod = this.getSendEmailMethod();

            using (var activityContext = this.instrumentationLogger().amendmentEmailNotifier().processEmailNotifications(emailMethod, vendorJournalsMap.elements()))
            {
                MapEnumerator enumerator = vendorJournalsMap.getEnumerator();
                while (enumerator.moveNext())
                {
                    select firstOnly vendRFQJour
                       where vendRFQJour.RecId == enumerator.currentValue();

                    if (vendRFQJour.RecId)
                    {
                        switch (emailMethod)
                        {
                            case PurchRFQSendEmailMethod::SSRSReport:
                                // Print the journal report to email
                                this.generateReportOutput(vendRFQJour);
                                break;

                            case PurchRFQSendEmailMethod::EmailDistributor:
                                this.generateEmail(vendRFQJour);
                                break;

                            default:
                                throw error(Error::wrongUseOfFunction(funcName()));
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.processEmailNotifications();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version   version = RunBase::getVersion(packedClass);
        Container vendorsListContainer, keyMapContainer, vendorsEmailsContainer, vendorsJournalsContainer;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, keyMapContainer, vendorsListContainer, vendorsEmailsContainer, vendorsJournalsContainer] = packedClass;
                emailTagsRFQCaseMapping = Map::create(keyMapContainer);
                rfqVendorsList = Set::create(vendorsListContainer);
                rfqVendorsEmails = Map::create(vendorsEmailsContainer);
                rfqVendorsJournalsToSend = Map::create(vendorsJournalsContainer);
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintDestinationSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the print destination settings.
    /// </summary>
    /// <param name="_vendRFQJour">
    /// The rec Id of the <c>VendRFQJour</c> table.
    /// </param>
    /// <returns>
    /// An instance of the <c>SRSPrintDestinationSettings</c> class.
    /// </returns>
    public static SRSPrintDestinationSettings getPrintDestinationSettings(VendRFQJour _vendRFQJour)
    {
        SRSPrintDestinationSettings printDestinationSettings = new SRSPrintDestinationSettings();

        printDestinationSettings.printMediumType(SRSPrintMediumType::Email);
        printDestinationSettings.emailAttachmentFileFormat(SRSReportFileFormat::PDF);

        return printDestinationSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailTemplateId</Name>
				<Source><![CDATA[
    private SysEmailId getEmailTemplateId()
    {
        SysEmailId sysEmailId = isRFQCancel ? PurchRFQParameters::find().CancelSysEmailTable
                              : PurchRFQParameters::find().SysEmailTable;

        return sysEmailId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSendEmailMethod</Name>
				<Source><![CDATA[
    internal PurchRFQSendEmailMethod getSendEmailMethod()
    {
        if (PurchRFQSendEmailFeature::instance().isEnabled())
        {
            return isRFQCancel ? PurchRFQParameters::find().CancelSysEmailMethod
                                  : PurchRFQParameters::find().SysEmailMethod;
        }

        return PurchRFQSendEmailMethod::SSRSReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private PurchRFQInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchRFQInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>