<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanProdFlowStatusAction_Validate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanProdFlowStatusAction_Validate</c> class validates the production flows.
/// </summary>
public class LeanProdFlowStatusAction_Validate extends LeanProdFlowStatusAction implements BatchRetryable
{
    boolean                     allEndsAreFeeder;
    LeanProductionFlowGraph     leanProductionFlowGraph;
    Set                         setEndActivities;
    boolean                     forceRecalc;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a caption string.
    /// </summary>
    /// <returns>
    /// The caption.
    /// </returns>
    public ClassDescription caption()
    {
        return "@SYS303319";
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkConnected</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that all activities in the checked version are connected to at least one other activity.
    /// </summary>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkConnected()
    {
        PlanActivity                planActivity;
        PlanActivity                relatedPlanActivity;
        PlanPlanActivity            planPlanActivity;
        PlanPlanActivity            relatedPlanPlanActivity;
        PlanActivityRelationship    planActivityRelationship;
        PlanConstraint              planConstraint;
        boolean                     result    = true;
        Plan                        planLocal = this.plan();

        //number of top level activities
        select count(RecId) from planPlanActivity
            where planPlanActivity.Plan == planLocal.RecId
            exists join planActivity
                where planActivity.RecId == planPlanActivity.PlanActivity
                   && (planActivity.PlanActivityType == PlanActivityType::Process
                   ||  planActivity.PlanActivityType == PlanActivityType::Transfer);

        int countPlanActivities = any2int(planPlanActivity.RecId);

        //there must be at least one top level activity
        if (countPlanActivities == 0)
        {
            result = checkFailed(strFmt("@SYS303320",plan.VersionNum));
        }

        while select RecId, PlanActivityId, PlanActivityType from planActivity
            exists join planPlanActivity
                where planPlanActivity.Plan         == planLocal.RecId
                   && planPlanActivity.PlanActivity == planActivity.RecId
        {
            switch (planActivity.PlanActivityType)
            {
                case PlanActivityType::Process,
                     PlanActivityType::Transfer:
                    // all top level activities must be connected to at least one other top level activity within the same version.
                    if (countPlanActivities > 1)
                    {
                        select firstonly RecId from planActivityRelationship
                            where planActivityRelationship.IndependentPlanActivity  == planActivity.RecId
                               || planActivityRelationship.DependentPlanActivity    == planActivity.RecId
                        exists join relatedPlanActivity
                            where ((relatedPlanActivity.RecId                       == planActivityRelationship.IndependentPlanActivity
                               &&  planActivityRelationship.IndependentPlanActivity != planActivity.RecId)
                               ||  (relatedPlanActivity.RecId                       == planActivityRelationship.DependentPlanActivity
                               &&  planActivityRelationship.DependentPlanActivity   != planActivity.RecId))
                               && (relatedPlanActivity.PlanActivityType             == PlanActivityType::Process
                               ||  relatedPlanActivity.PlanActivityType             == PlanActivityType::Transfer)
                        exists join relatedPlanPlanActivity
                            where relatedPlanPlanActivity.PlanActivity == relatedPlanActivity.RecId
                               && relatedPlanPlanActivity.Plan         == planLocal.RecId;

                        if (!planActivityRelationship.RecId)
                        {
                            result = checkFailed(strFmt("@SYS303321",planActivity.PlanActivityId,plan.VersionNum)) && result;
                        }
                    }
                    break;
                default:
                    //all lower level activities must be 'dependent' an aggregation with an upper level activity
                    select firstonly RecId from planActivityRelationship
                        where planActivityRelationship.DependentPlanActivity == planActivity.RecId
                    exists join planConstraint
                        where planConstraint.RecId          == planActivityRelationship.Constraint
                           && planConstraint.ConstraintType == ConstraintTypes::Aggregation
                    exists join relatedPlanActivity
                        where relatedPlanActivity.RecId             == planActivityRelationship.IndependentPlanActivity
                           && (relatedPlanActivity.PlanActivityType == PlanActivityType::Process
                           ||  relatedPlanActivity.PlanActivityType == PlanActivityType::Transfer)
                    exists join relatedPlanPlanActivity
                        where relatedPlanPlanActivity.PlanActivity == relatedPlanActivity.RecId
                           && relatedPlanPlanActivity.Plan         == planLocal.RecId;

                    if (!planActivityRelationship.RecId)
                    {
                        result = checkFailed(strFmt("@SYS303322",
                                                    planActivity.PlanActivityId,
                                                    planActivity.PlanActivityType,
                                                    PlanActivityType::Process,
                                                    PlanActivityType::Transfer,
                                                    plan.VersionNum)) && result;
                    }
                    break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDefaultServiceActivities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that a default service exists for a production flow with subcontracted activities.
    /// </summary>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkDefaultServiceActivities()
    {
        PlanActivity                planActivity;
        PlanPlanActivity            planPlanActivity;
        boolean                     result    = true;
        Plan                        planLocal = this.plan();
        PlanActivityService         planActivityService;

        // Find all plan activities without service actvities
        while select planActivity
            exists join planPlanActivity
            where       planActivity.RecId     == planPlanActivity.PlanActivity
            &&          (planActivity.PlanActivityType == PlanActivityType::Process || planActivity.PlanActivityType == PlanActivityType::Transfer)
            &&          planPlanActivity.Plan  == planLocal.RecId
            notexists join planActivityService
            where          planActivityService.PlanActivity  == planActivity.RecId
            &&             planActivityService.IsDefault == NoYes::Yes
        {
            // If they are subcontracted they should have at least one (the default) service associated
            if (planActivity.isSubcontracted())
            {
                result = checkFailed(strFmt("@SYS332663", planActivity.Name));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEndActivities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the end activities of the production flow.
    /// </summary>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkEndActivities()
    {
        int                         feederBridgeCount;
        boolean                     result    = true;
        Plan                        planLocal = this.plan();

        setEndActivities = Set::create(leanProductionFlow.endLeanProductionFlowActivities(planLocal.ValidFrom,planLocal));

        if (   !setEndActivities
            || !setEndActivities.elements())
        {
            //must have one or more end activities.
            result = checkFailed(strFmt("@SYS303323",planLocal.VersionNum));
        }
        else
        {
            SetEnumerator se = setEndActivities.getEnumerator();
            while (se.moveNext())
            {
                LeanProductionFlowActivity leanProductionFlowActivity = LeanProductionFlowActivity::find(se.current());
                PlanActivity planActivity = leanProductionFlowActivity.planActivity();

                if (!planActivity.onHandUpdate(PlanActivityType::Receive))
                {
                    //the last receipt activities of a production flow must be inventory controlled
                    result = checkFailed(strFmt("@SYS303280",planActivity.PlanActivityId,planLocal.VersionNum));
                }

                //the unit of measure related to the process quantity of the activity time must
                //be a unit of measure that is convertible to the unit of measure related to the
                //'quantity per cycle' of the production flow version.
                Map mapPlanActivityTimes = planActivity.mapPlanActivityTimes();
                if (   mapPlanActivityTimes
                    && mapPlanActivityTimes.elements())
                {
                    MapEnumerator me = mapPlanActivityTimes.getEnumerator();
                    while (me.moveNext())
                    {
                        PlanActivityTime planActivityTime = me.currentValue();
                        if (!UnitOfMeasureConverter::canBeConverted(planActivityTime.QuantityUnitOfMeasure,
                                                                    leanProductionFlow.QuantityPerCycleUnitOfMeasure))
                        {
                            result = checkFailed(strFmt("@SYS303281",
                                                        planActivity.PlanActivityId,
                                                        planLocal.VersionNum,
                                                        UnitOfMeasure::find(planActivityTime.QuantityUnitOfMeasure).Symbol,
                                                        UnitOfMeasure::find(leanProductionFlow.QuantityPerCycleUnitOfMeasure).Symbol
                                                        ));
                        }
                    }
                }

                feederBridgeCount += leanProductionFlowActivity.FeederBridge ? 1 : 0;
            }

            allEndsAreFeeder = feederBridgeCount >= setEndActivities.elements();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFeederBridge</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the end activity cycle time for the feeder flows.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    This method must not run before the <c>checkEndActivities</c> method.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkFeederBridge()
    {
        if (   allEndsAreFeeder
            && setEndActivities)

        {
            SetEnumerator se = setEndActivities.getEnumerator();
            while (se.moveNext())
            {
                LeanProductionFlowActivity leanProductionFlowActivity = LeanProductionFlowActivity::find(se.current());
                if (leanProductionFlowActivity.CycleTime > leanProductionFlow.AverageTakt)
                {
                    info("@SYS303282");
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFeeders</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the feeder activities of the production flow.
    /// </summary>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkFeeders()
    {
        PlanActivity                planActivity;
        PlanActivity                relatedPlanActivity;
        PlanPlanActivity            planPlanActivity;
        PlanReference               relatedPlanReference;
        PlanActivityRelationship    planActivityRelationship;
        LeanProductionFlowActivity  leanProductionFlowActivity;
        boolean                     result    = true;
        Plan                        planLocal = this.plan();

        setPrefix("@SYS303283");

        //activities related to other flows either as dependent or independent
        while select TableId from planPlanActivity
            where planPlanActivity.Plan == planLocal.RecId
            join PlanActivityId from planActivity
                where planActivity.RecId             == planPlanActivity.PlanActivity
                  &&  (planActivity.PlanActivityType == PlanActivityType::Process
                  ||   planActivity.PlanActivityType == PlanActivityType::Transfer)
            join FeederBridge from leanProductionFlowActivity
                where leanProductionFlowActivity.PlanActivity == planActivity.RecId
            join TableId from  planActivityRelationship
                where planActivityRelationship.IndependentPlanActivity  == planActivity.RecId
            join PlanReference, PlanActivityId from relatedPlanActivity
                where relatedPlanActivity.RecId                         == planActivityRelationship.DependentPlanActivity
                   && (relatedPlanActivity.PlanActivityType             == PlanActivityType::Process
                   ||  relatedPlanActivity.PlanActivityType             == PlanActivityType::Transfer)
            exists join relatedPlanReference
                where relatedPlanReference.RecId == relatedPlanActivity.PlanReference
                   && relatedPlanReference.RecId != planLocal.PlanReference
        {
            if (!leanProductionFlowActivity.FeederBridge)
            {
                //activity is in fact a feeder bridge, but not marked as such
                result = checkFailed(strFmt("@SYS303508",
                                            planActivity.PlanActivityId,
                                            plan.VersionNum,
                                            planActivity.PlanActivityId,
                                            relatedPlanActivity.PlanActivityId));
            }

            Plan relatedPlan = this.leanProductionFlowGraph().relatedPlan(relatedPlanActivity.PlanReference);

            if (!relatedPlan)
            {
                result = checkFailed(strFmt("@SYS303509",relatedPlanActivity.PlanActivityId, planActivity.PlanActivityId,plan.VersionNum));
            }
            else
            {
                if (relatedPlan.Status != PlanStatus::Active)
                {
                    info(strFmt("@SYS303509",relatedPlanActivity.PlanActivityId,planActivity.PlanActivityId,plan.VersionNum));
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkKanbanRules</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the kanban rules for the plan.
    /// </summary>
    /// <returns>
    ///    true if the validation succeeds; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkKanbanRules()
    {
        boolean result = true;

        setPrefix("@SYS303287");

        try
        {
            LeanRulesEngine::onPlanValidation(plan);
        }
        catch
        {
            result = false;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLoops</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that there are no loops in the plan.
    /// </summary>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkLoops()
    {
        return this.leanProductionFlowGraph().isValid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStartPickActivities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the start picking activities of the production flow.
    /// </summary>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkStartPickActivities()
    {
        PlanActivity                dependentPlanActivity;
        PlanActivityRelationship    planActivityRelationship;
        PlanConstraint              planConstraint;
        boolean                     result    = true;
        Plan                        planLocal = this.plan();

        Set setStartActivities = leanProductionFlow.startLeanProductionFlowActivities(planLocal.ValidFrom,planLocal);

        if (   !setStartActivities
            || !setStartActivities.elements())
        {
            // must have one or more start activities.
            result = checkFailed(strFmt("@SYS303288",planLocal.VersionNum));
        }
        else
        {
            SetEnumerator se = setStartActivities.getEnumerator();
            while (se.moveNext())
            {
                LeanProductionFlowActivity leanProductionFlowActivity = LeanProductionFlowActivity::find(se.current());
                PlanActivity planActivity = leanProductionFlowActivity.planActivity();

                while select PlanActivityId from dependentPlanActivity
                    where dependentPlanActivity.PlanActivityType == PlanActivityType::Pick
                       && dependentPlanActivity.OnHandUpdate     == NoYes::No
                    exists join planActivityRelationship
                        where planActivityRelationship.IndependentPlanActivity == planActivity.RecId
                           && planActivityRelationship.DependentPlanActivity   == dependentPlanActivity.RecId
                    exists join planConstraint
                        where planConstraint.RecId          == planActivityRelationship.Constraint
                           && planConstraint.ConstraintType == ConstraintTypes::Aggregation
                {
                    result = checkFailed(strFmt("@SYS303289",
                                                planActivity.planActivityLocation().inventLocation().Name,
                                                planActivity.Name));
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkThroughput</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the calculated cycle time against the work cell capacity.
    /// </summary>
    /// <returns>
    ///    true if the validation was successful; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    A required unit of measure is not set up.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkThroughput()
    {
        #TimeConstants
        PlanActivity                    planActivity;
        PlanPlanActivity                planPlanActivity;
        LeanProductionFlowActivity      leanProductionFlowActivity;
        Plan                            planLocal = this.plan();
        LeanProductionFlow              leanProductionFlowLocal = LeanProductionFlow::findPlan(planLocal.RecId);
        real                            requiredCycleTimeSeconds;
        UnitOfMeasure                   unitOfMeasure;
        str                             strRequiredCycleTime;
        str                             strActivityCycleTime;
        boolean                         result = true;

        InventQty quantityPerActivityCycleTimeSeconds = leanProductionFlowLocal.QuantityPerCycle ? leanProductionFlowLocal.QuantityPerCycle : 1;
        RefRecId refRecIdQuantityPerActivityCycleTimeSecondsUnitOfMeasure = leanProductionFlowLocal.QuantityPerCycleUnitOfMeasure;

        while select TableId from planPlanActivity
            where planPlanActivity.Plan == planLocal.RecId
            join planActivity
                where planActivity.RecId            == planPlanActivity.PlanActivity
                   && planActivity.PlanActivityType == PlanActivityType::Process
            join CycleTime, PlanActivity from leanProductionFlowActivity
                where leanProductionFlowActivity.PlanActivity == planActivity.RecId
        {
            WrkCtrResourceGroup wrkCtrResourceGroup = planActivity.wrkCtrResourceGroup();
            LeanWorkCellScheduleCapacity leanWorkCellScheduleCapacity = LeanWorkCellScheduleCapacity::newStandard(wrkCtrResourceGroup,planLocal.ValidFrom);

            if (   leanWorkCellScheduleCapacity.modelType() == LeanProdFlowModelTypes::Throughput
                && leanWorkCellScheduleCapacity.leanCapacityPeriod() == LeanCapacityPeriods::StandardWorkday)
            {
                //capable units per period in unit unit of production flow 'quantityPerActivityCycleTimeSecondsUnit'
                LeanWorkCellCapacity leanWorkCellCapacity = leanWorkCellScheduleCapacity.leanWorkCellCapacity();
                RefRecId refRecIdAverageThroughputQuantityUnitOfMeasure = leanWorkCellCapacity.CapacityUnitOfMeasure;
                LeanAverageThroughputQuantity averageThroughputQuantity = leanWorkCellCapacity.AverageThroughputQuantity;

                if (!refRecIdQuantityPerActivityCycleTimeSecondsUnitOfMeasure)
                {
                    throw error(strFmt("@SYS327433",leanProductionFlowLocal.planReference().PlanName));
                }

                if (!refRecIdAverageThroughputQuantityUnitOfMeasure)
                {
                    throw error(strFmt("@SYS327434",leanWorkCellCapacity.wrkCtrId()));
                }

                averageThroughputQuantity = UnitOfMeasureConverter::convert(averageThroughputQuantity,
                                                                            refRecIdAverageThroughputQuantityUnitOfMeasure,
                                                                            refRecIdQuantityPerActivityCycleTimeSecondsUnitOfMeasure,
                                                                            NoYes::Yes);

                //the number of seconds available in a standard work day
                real standardWorkDaySeconds = ProdTimeUnitOfMeasure::convertValueTimeUnit(
                                                                         ProdTimeUnitType::Hours,
                                                                         leanWorkCellScheduleCapacity.standardWorkDayHours(),
                                                                         ProdTimeUnitType::Seconds);

                if (averageThroughputQuantity)
                {
                    //the minimum processing speed in order to be able to process 'averageThroughputQuantityUnit' units in a standard work day
                    requiredCycleTimeSeconds = standardWorkDaySeconds / averageThroughputQuantity;
                }

                //the calculated number of seconds is takes to process 'quantityPerActivityCycleTimeSeconds' units (from the production flow)
                leanProductionFlowLocal = leanProductionFlowActivity.leanProductionFlow(planLocal.ValidFrom);
                RefRecId refRecIdActivityCycleTimeUnitOfMeasure = leanProductionFlowLocal.TaktUnitOfMeasure;

                if (!refRecIdActivityCycleTimeUnitOfMeasure)
                {
                    throw error(strFmt("@SYS327432",leanProductionFlowLocal.planReference().PlanName));
                }

                real activityCycleTimeSeconds = ProdTimeUnitOfMeasure::convertValueToTimeUnit(refRecIdActivityCycleTimeUnitOfMeasure,
                                                                                              leanProductionFlowActivity.CycleTime,
                                                                                              ProdTimeUnitType::Seconds) / quantityPerActivityCycleTimeSeconds;

                if (!standardWorkDaySeconds)
                {
                    warning("@SYS308763");

                    result = false;
                }
                else
                {
                    if (requiredCycleTimeSeconds < activityCycleTimeSeconds)
                    {
                        RefRecId refRecIdSecondsUnitOfMeasure = ProdTimeUnitOfMeasure::unitOfMeasureByType(ProdTimeUnitType::Seconds);
                        real     activityCycleTimeUnit        = UnitOfMeasureConverter::convert(activityCycleTimeSeconds,
                                                                                                refRecIdSecondsUnitOfMeasure,
                                                                                                refRecIdActivityCycleTimeUnitOfMeasure,
                                                                                                NoYes::Yes);
                        real     requiredCycleTimeUnit        = UnitOfMeasureConverter::convert(requiredCycleTimeSeconds,
                                                                                                refRecIdSecondsUnitOfMeasure,
                                                                                                refRecIdActivityCycleTimeUnitOfMeasure,
                                                                                                NoYes::Yes);

                        if (   activityCycleTimeUnit != requiredCycleTimeUnit        //if the difference didn't get lost in rounding precision
                            && activityCycleTimeUnit != 0
                            && requiredCycleTimeUnit != 0)
                        {
                            unitOfMeasure        = UnitOfMeasure::find(refRecIdActivityCycleTimeUnitOfMeasure);
                            strRequiredCycleTime = num2str(requiredCycleTimeUnit,0,unitOfMeasure.DecimalPrecision,-1,-1);
                            strActivityCycleTime = num2str(activityCycleTimeUnit,0,unitOfMeasure.DecimalPrecision,-1,-1);
                            warning(strFmt("@SYS303291",planActivity.PlanActivityId));
                            warning(strFmt("@SYS311838",strRequiredCycleTime,unitOfMeasure.Symbol,strActivityCycleTime,unitOfMeasure.Symbol));
                            result = false;
                        }
                        else
                        {
                            unitOfMeasure        = UnitOfMeasure::find(refRecIdSecondsUnitOfMeasure);
                            strRequiredCycleTime = num2str(requiredCycleTimeSeconds,0,unitOfMeasure.DecimalPrecision,-1,-1);
                            strActivityCycleTime = num2str(activityCycleTimeSeconds,0,unitOfMeasure.DecimalPrecision,-1,-1);
                            if (strRequiredCycleTime != strActivityCycleTime)
                            {
                                warning(strFmt("@SYS303291",planActivity.PlanActivityId));
                                warning(strFmt("@SYS307318",strRequiredCycleTime,strActivityCycleTime));
                                result = false;
                            }
                        }                        
                    }
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidityPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the effective and expiration dates of the plan.
    /// </summary>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkValidityPeriod()
    {
        return this.plan().checkValidityPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanPlanStatusAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the action that is performed by the class.
    /// </summary>
    /// <returns>
    ///    A <c>LeanPlanStatusAction</c> enumeration value.
    /// </returns>
    public LeanPlanStatusAction leanPlanStatusAction()
    {
        return LeanPlanStatusAction::Validate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanProductionFlowGraph</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an instance of the <c>LeanProductionFlowGraph</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>LeanProductionFlowGraph</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LeanProductionFlowGraph leanProductionFlowGraph()
    {
        if (!leanProductionFlowGraph)
        {
            leanProductionFlowGraph = LeanProductionFlowGraph::newLeanProductionFlow(leanProductionFlow);
        }

        return leanProductionFlowGraph;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForceRecalc</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmForceRecalc(boolean _forceRecalc = forceRecalc)
    {
        forceRecalc = _forceRecalc;
        return forceRecalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postValidateProductionFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the production flow.
    /// </summary>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Always executes all tests and continues if a failure were to occur.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean postValidateProductionFlow()
    {
        boolean result = this.checkThroughput();
        result         = this.checkFeederBridge() && result;
        result         = this.checkKanbanRules()  && result;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatusAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the status action.
    /// </summary>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    public boolean runStatusAction()
    {
        ttsbegin;
        boolean result = this.validateProductionFlow();
        if (result)
        {
            result = this.setRequiredTakt();
            result = this.postValidateProductionFlow() && result;
        }
        ttscommit;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequiredTakt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the required takt if the flow is valid.
    /// </summary>
    /// <returns>
    ///    true if the required takt times were set in the database; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean setRequiredTakt()
    {
        return this.leanProductionFlowGraph().calculateRequiredTakt(true, forceRecalc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductionFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the production flow.
    /// </summary>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Always executes all tests and continues if a failure were to occur.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validateProductionFlow()
    {
        boolean result = this.checkConnected();
        result         = this.checkStartPickActivities()        && result;
        result         = this.checkEndActivities()              && result;
        result         = this.checkFeeders()                    && result;
        result         = this.checkLoops()                      && result;
        result         = this.checkDefaultServiceActivities()   && result;
        result         = this.checkValidityPeriod()             && result;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static LeanProdFlowStatusAction_Validate construct()
    {
        return new LeanProdFlowStatusAction_Validate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLeanProductionFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new <c>LeanProdFlowStatusAction_Validate</c> object.
    /// </summary>
    /// <param name="_leanProductionFlow">
    ///    A <c>LeanProductionFlow</c> record to use to initialize the object.
    /// </param>
    /// <returns>
    ///    A new <c>LeanProdFlowStatusAction_Validate</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanProdFlowStatusAction_Validate newLeanProductionFlow(LeanProductionFlow _leanProductionFlow)
    {
        LeanProdFlowStatusAction_Validate    leanProdFlowStatusAction = LeanProdFlowStatusAction_Validate::construct();

        leanProdFlowStatusAction.parmLeanProductionFlow(_leanProductionFlow);

        return leanProdFlowStatusAction;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>