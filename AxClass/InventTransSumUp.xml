<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransSumUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventTransSumUp   extends RunBase
{
    InventTrans     inventTrans;
    InventTransId   transId;

    DialogRunbase   dialog;
    DialogField     dialogTransId;

    #DEFINE.CurrentVersion(2)

    #LOCALMACRO.CurrentList
        TransId,
        InventTrans
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be built by using the <c>Dialog</c> class or by using a class that is created in the
    ///    Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        dialog          = super();

        dialogTransId   = dialog.addField(extendedTypeStr(InventTransId), "@SYS23057");
        dialogTransId.value(transId);
        dialogTransId.active(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        transId = dialogTransId.value();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTrans</Name>
				<Source><![CDATA[
    InventTrans parmInventTrans(InventTrans _inventTrans = inventTrans)
    {
        inventTrans = _inventTrans;
        return inventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransId</Name>
				<Source><![CDATA[
    InventTransId parmTransId(InventTransId _transId = transId)
    {
        transId = _transId;
        return transId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        InventTrans inventTransCopy;

        setPrefix(InventTransSumUp::description());

        try
        {
            ttsbegin;

            if (!this.validate())
                throw error("@SYS18447");

            select forupdate inventTransCopy
                where inventTransCopy.RecId == inventTrans.RecId;

            if (inventTransCopy.inventTransOrigin().InventTransId != transId)
            {
                throw error("@SYS18447");
            }

            if (!inventTransCopy.checkIsChanged(inventTrans))
            {
                throw error("@SYS18447");
            }

            inventTransCopy.updateSumUp(NoYes::Yes);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version      = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventTransSumUp construct()
    {
        return new InventTransSumUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS16096";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        if (!args || !args.caller() || !args.dataset())
            throw error(strFmt("@SYS19306",funcName()));

        switch (args.record().TableId)
        {
            case (tableNum(InventTrans)) :
                InventTrans inventTrans = args.record();
                InventTransSumUp inventTransSumUp = InventTransSumUp::newInventTransSumUp(inventTrans.RecId);

                if (inventTransSumUp.prompt())
                {
                    inventTransSumUp.runOperation();

                    Object callerForm = args.caller();
                    callerForm.doResearch();
                }
                break;

            default:
                throw error(strFmt("@SYS19306",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventTransSumUp</Name>
				<Source><![CDATA[
    static InventTransSumUp newInventTransSumUp(RecId inventTransRecid)
    {
        InventTrans       inventTrans       = InventTrans::findRecId(inventTransRecid);
        InventTransOrigin inventTransOrigin = inventTrans.inventTransOrigin();
        InventTransSumUp  inventTransSumUp  = InventTransSumUp::construct();
        inventTransSumUp.getLast();
        inventTransSumUp.parmInventTrans(inventTrans);
        inventTransSumUp.parmTransId(inventTransOrigin.InventTransId);
        return inventTransSumUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>