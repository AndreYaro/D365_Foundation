<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransOpenInterface</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
/// Base class providing an interface to common functionality applicable for tables mapped to the <c>CustVendTransOpen</c> table map.
/// </summary>
[ExportInterfaceAttribute()]
public abstract class CustVendTransOpenInterface
{
    protected CustVendTransOpen custVendTransOpen;
    private CustVendTransOpenInterface origInstance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeVendDocumentLine</Name>
				<Source><![CDATA[
    private void initializeVendDocumentLine(CustVendTransOpen _custVendTransOpen = custVendTransOpen)
    {
        custVendTransOpen = _custVendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransOpen</Name>
				<Source><![CDATA[
    public final CustVendTransOpen getCustVendTransOpen()
    {
        return custVendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>CustVendTransOpenInterface</c> object based on the provided <c>CustVendTransOpen</c> record.
    /// </summary>
    /// <param name = "_vendDocumentLineMap">A <c>CustVendTransOpen</c> record from which to create a <c>CustVendTransOpenInterface</c> instance.</param>
    /// <returns>The instantiated <c>CustVendTransOpenInterface</c> object.</returns>
    public static CustVendTransOpenInterface createInstance(CustVendTransOpen _custVendTransOpen)
    {
        SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();

        metadataCollection.SetManagedValue(classStr(CustVendTransOpenInterface), tableId2Name(_custVendTransOpen.tableId));
        CustVendTransOpenInterface instance = SysPluginFactory::Instance(identifierStr(Dynamics.AX.Application), classStr(CustVendTransOpenInterface), metadataCollection);

        if (!instance)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        instance.initializeVendDocumentLine(_custVendTransOpen);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a <c>CustVendTransOpenInterface</c> object based on the <c>CustVendTransOpen</c> orig-record.
    /// </summary>
    /// <returns>
    /// The instantiated <c>VendDocumentLineInterface</c> object.
    /// </returns>
    public final CustVendTransOpenInterface origInstance()
    {
        if (!origInstance)
        {
            origInstance = CustVendTransOpenInterface::createInstance(this.getCustVendTransOpen().orig());
        }

        return origInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendFine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CustVendFine_BR</c> map associated with this record.
    /// </summary>
    /// <returns>
    /// The <c>CustVendFine_BR</c> map associated with this record.
    /// </returns>
    public CustVendFine_BR custVendFine_BR()
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendInterest_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CustVendInterest_BR</c> map associated with this record.
    /// </summary>
    /// <returns>
    /// The <c>CustVendInterest_BR</c> map associated with this record.
    /// </returns>
    public CustVendInterest_BR custVendInterest_BR()
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the retrieved table buffer from the query for the concrete table represented by the map.
    /// </summary>
    /// <param name="_queryRun">
    ///    The query that contains the concrete table.
    /// </param>
    /// <returns>
    ///    The retrieved table buffer from the query for the concrete table represented by the map.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The map has not been associated with one of the concrete tables represented by the map.
    /// </exception>
    public CustVendTransOpen getFromQuery(QueryRun _queryRun)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets module type.
    /// </summary>
    /// <returns>
    /// The <c>ModuleCustVend</c> module type.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// TableId is not associated with any module type.
    /// </exception>
    public ModuleCustVend getModule()
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChangedInQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the concrete table represented by the map has changed in the query.
    /// </summary>
    /// <param name="_queryRun">
    ///    The query that contains the concrete table.
    /// </param>
    /// <returns>
    ///    true if the concrete table represented by the map has changed in the query; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The map has not been associated with one of the concrete tables represented by the map.
    /// </exception>
    public boolean hasChangedInQuery(QueryRun _queryRun)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches <c>CustTransOpen</c> or <c>VendTransOpen</c> by Record ID.
    /// </summary>
    /// <param name="_tableId">
    /// Table id - should be <c>CustTransOpen</c> or <c>VendTransOpen</c>.
    /// </param>
    /// <param name="_recId">
    /// The Record ID to look for.
    /// </param>
    /// <param name="_forupdate">
    /// Determines if record should be selected for update
    /// </param>
    /// <returns>
    /// Found <c>CustTransOpen</c> or <c>VendTransOpen</c> record.
    /// </returns>
    protected static CustVendTransOpen findByTable(TableId _tableId, RecId _recId, boolean _forupdate = false)
    {
        CustVendTransOpen ret;

        switch (_tableId)
        {
            case tablenum(CustTransOpen):
                ret = CustTransOpen::find(_recId, _forupdate);
                break;
            case tablenum(VendTransOpen):
                ret = VendTransOpen::find(_recId, _forupdate);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches <c>CustTransOpen</c> or <c>VendTransOpen</c> by Record ID.
    /// </summary>
    /// <param name="_tableId">
    /// Table id - should be <c>CustTransOpen</c> or <c>VendTransOpen</c>.
    /// </param>
    /// <param name="_recId">
    /// The Record ID to look for.
    /// </param>
    /// <param name="_forupdate">
    /// Determines if record should be selected for update
    /// </param>
    /// <returns>
    /// Found <c>CustTransOpen</c> or <c>VendTransOpen</c> record.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If table id is not populated after find.
    /// </exception>
    public static CustVendTransOpen find(TableId _tableId, RecId _recId, boolean _forupdate = false)
    {
        CustVendTransOpen ret = CustVendTransOpenInterface::findByTable(_tableId, _recId, _forupdate);

        if (!ret.TableId)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRefIdByTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches <c>CustTransOpen</c> or <c>VendTransOpen</c> by reference record ID.
    /// </summary>
    /// <param name="_tableId">
    /// Table id - should be <c>CustTrans</c> or <c>VendTrans</c>.
    /// </param>
    /// <param name="_recId">
    /// The reference record ID to look for.
    /// </param>
    /// <param name="_forupdate">
    /// Determines if record should be selected for update.
    /// </param>
    /// <returns>
    /// Found <c>CustTransOpen</c> or <c>VendTransOpen</c> record.
    /// </returns>
    protected static CustVendTransOpen findRefIdByTable(TableId _tableId, RecId _recId, boolean _forupdate = false)
    {
        CustVendTransOpen ret;

        switch (_tableId)
        {
            case tablenum(CustTrans):
                ret = CustTransOpen::findRefId(_recId, _forupdate);
                break;
            case tablenum(VendTrans):
                ret = VendTransOpen::findRefId(_recId, _forupdate);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches <c>CustTransOpen</c> or <c>VendTransOpen</c> by reference record ID.
    /// </summary>
    /// <param name="_tableId">
    /// Table id - should be <c>CustTrans</c> or <c>VendTrans</c>.
    /// </param>
    /// <param name="_recId">
    /// The reference record ID to look for.
    /// </param>
    /// <param name="_forupdate">
    /// Determines if record should be selected for update.
    /// </param>
    /// <returns>
    /// Found <c>CustTransOpen</c> or <c>VendTransOpen</c> record.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If table id is not populated after find.
    /// </exception>
    public static CustVendTransOpen findRefId(TableId _tableId, RecId _recId, boolean _forupdate = false)
    {
        CustVendTransOpen ret = CustVendTransOpenInterface::findRefIdByTable(_tableId, _recId, _forupdate);

        if (!ret.TableId)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmptyTableBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an empty table buffer for the concrete table represented by the map.
    /// </summary>
    /// <param name="_moduleCustVend">
    ///    The module consuming the map.
    /// </param>
    /// <returns>
    ///    An empty table buffer for the concrete table represented by the map.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The map has not been associated with one of the concrete tables represented by the map.
    /// </exception>
    public static CustVendTransOpen getEmptyTableBuffer(ModuleCustVend _moduleCustVend)
    {
        CustVendTransOpen custVendTransOpen;

        if (_moduleCustVend == ModuleCustVend::Cust)
        {
            CustTransOpen custTransOpen;
            custVendTransOpen = custTransOpen.data();
        }
        else
        {
            VendTransOpen vendTransOpen;
            custVendTransOpen = vendTransOpen.data();
        }

        return custVendTransOpen;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>