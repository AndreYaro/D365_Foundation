<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransToBeMarkedQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTransToBeMarkedQueryBuilder
{
    private InventTrans inventTransToBeMarked;
    private InventDim inventDimForSearch;
    private InventDim inventDimCriteria;
    private InventDimParm inventDimParmForValidateEnabled;
    private InventTransOriginId markInventTransOriginId;
    private InventQty markQty;
    private PackingSlipId packingSlipId;
    private InvoiceId invoiceId;
    private boolean isScrapTransaction;
    private Voucher markVoucherId;
    private boolean isStatusConditionAdded;
    private SortOrder markSortOrder;
    private InventTransOriginIdMarked markingRefInventTransOrigin;
    private boolean onlyFinancialPosted;
    private boolean isDeleteMarkingOperation;
    private boolean isUpdateMarkingOperation;
    private Voucher voucherPhysicalId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setMarkingRefInventTransOrigin</Name>
				<Source><![CDATA[
    public InventTransToBeMarkedQueryBuilder setMarkingRefInventTransOrigin(InventTransOriginIdMarked _markingRefInventTransOrigin)
    {
        this.markingRefInventTransOrigin = _markingRefInventTransOrigin;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOnlyFinancialPosted</Name>
				<Source><![CDATA[
    public InventTransToBeMarkedQueryBuilder setOnlyFinancialPosted(boolean _onlyFinancialPosted)
    {
        this.onlyFinancialPosted = _onlyFinancialPosted;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsDeleteMarkingOperation</Name>
				<Source><![CDATA[
    public InventTransToBeMarkedQueryBuilder setIsDeleteMarkingOperation(boolean _isDeleteMarkingOperation)
    {
        this.isDeleteMarkingOperation = _isDeleteMarkingOperation;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsUpdateMarkingOperation</Name>
				<Source><![CDATA[
    public InventTransToBeMarkedQueryBuilder setIsUpdateMarkingOperation(boolean _isUpdateMarkingOperation)
    {
        this.isUpdateMarkingOperation = _isUpdateMarkingOperation;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransToBeMarked</Name>
				<Source><![CDATA[
    public InventTransToBeMarkedQueryBuilder setInventTransToBeMarked(InventTrans _inventTransToBeMarked)
    {
        this.inventTransToBeMarked = _inventTransToBeMarked;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimForSearch</Name>
				<Source><![CDATA[
    public InventTransToBeMarkedQueryBuilder setInventDimForSearch(InventDim _inventDimForSearch)
    {
        this.inventDimForSearch = _inventDimForSearch;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimCriteria</Name>
				<Source><![CDATA[
    public InventTransToBeMarkedQueryBuilder setInventDimCriteria(InventDim _inventDimCriteria)
    {
        this.inventDimCriteria = _inventDimCriteria;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimParmForValidateEnabled</Name>
				<Source><![CDATA[
    public InventTransToBeMarkedQueryBuilder setInventDimParmForValidateEnabled(InventDimParm _inventDimParmForValidateEnabled)
    {
        this.inventDimParmForValidateEnabled = _inventDimParmForValidateEnabled;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkInventTransOriginId</Name>
				<Source><![CDATA[
    public InventTransToBeMarkedQueryBuilder setMarkInventTransOriginId(InventTransOriginId _markInventTransOriginId)
    {
        this.markInventTransOriginId = _markInventTransOriginId;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkQty</Name>
				<Source><![CDATA[
    public InventTransToBeMarkedQueryBuilder setMarkQty(InventQty _markQty)
    {
        this.markQty = _markQty;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsScrapTransaction</Name>
				<Source><![CDATA[
    public InventTransToBeMarkedQueryBuilder setIsScrapTransaction(boolean _isScrapTransaction)
    {
        this.isScrapTransaction = _isScrapTransaction;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkVoucherId</Name>
				<Source><![CDATA[
    public InventTransToBeMarkedQueryBuilder setMarkVoucherId(Voucher _markVoucherId)
    {
        this.markVoucherId = _markVoucherId;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsStatusConditionAdded</Name>
				<Source><![CDATA[
    public InventTransToBeMarkedQueryBuilder setIsStatusConditionAdded(boolean _isStatusConditionAdded)
    {
        this.isStatusConditionAdded = _isStatusConditionAdded;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkSortOrder</Name>
				<Source><![CDATA[
    public InventTransToBeMarkedQueryBuilder setMarkSortOrder(boolean _markSortOrder)
    {
        this.markSortOrder = _markSortOrder;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPackingSlipId</Name>
				<Source><![CDATA[
    public InventTransToBeMarkedQueryBuilder setPackingSlipId(PackingSlipId _packingSlipId)
    {
        this.packingSlipId = _packingSlipId;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceId</Name>
				<Source><![CDATA[
    public InventTransToBeMarkedQueryBuilder setInvoiceId(InvoiceId _invoiceId)
    {
        this.invoiceId = _invoiceId;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVoucherPhysicalId</Name>
				<Source><![CDATA[
    internal InventTransToBeMarkedQueryBuilder setVoucherPhysicalId(Voucher _voucherPhysicalId)
    {
        this.voucherPhysicalId = _voucherPhysicalId;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransWhereClause</Name>
				<Source><![CDATA[
    private SysDaQueryExpression buildInventTransWhereClause()
    {
        SysDaQueryExpression inventTransWhereClause = new SysDaEqualsExpression(
                                                        new SysDaFieldExpression(inventTransToBeMarked, fieldStr(InventTrans, ValueOpen)),
                                                        new SysDaValueExpression(InventTransOpen::Yes))
                                                    .and(new SysDaEqualsExpression(
                                                        new SysDaFieldExpression(inventTransToBeMarked, fieldStr(InventTrans, InventTransOrigin)),
                                                        new SysDaValueExpression(markInventTransOriginId)))
                                                    .and(new SysDaEqualsExpression(
                                                        new SysDaFieldExpression(inventTransToBeMarked, fieldStr(InventTrans, PackingSlipReturned)),
                                                        new SysDaValueExpression(false)));
        
        if (packingSlipId)
        {
            inventTransWhereClause = inventTransWhereClause.and(new SysDaEqualsExpression(
                                                        new SysDaFieldExpression(inventTransToBeMarked, fieldStr(InventTrans, PackingSlipId)),
                                                        new SysDaValueExpression(packingSlipId)));
        }

        if (invoiceId)
        {
            inventTransWhereClause = inventTransWhereClause.and(new SysDaEqualsExpression(
                                                        new SysDaFieldExpression(inventTransToBeMarked, fieldStr(InventTrans, InvoiceId)),
                                                        new SysDaValueExpression(invoiceId)));
        }
      
        return inventTransWhereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransMarkQtyLessThanZeroWhereClause</Name>
				<Source><![CDATA[
    private SysDaQueryExpression buildInventTransMarkQtyLessThanZeroWhereClause()
    {
        return new SysDaLessThanExpression(
                   new SysDaFieldExpression(inventTransToBeMarked, fieldStr(InventTrans, Qty)),
                   new SysDaValueExpression(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransMarkQtyGreaterThanZeroWhereClause</Name>
				<Source><![CDATA[
    private SysDaQueryExpression buildInventTransMarkQtyGreaterThanZeroWhereClause()
    {
        return new SysDaGreaterThanExpression(
                   new SysDaFieldExpression(inventTransToBeMarked, fieldStr(InventTrans, Qty)),
                   new SysDaValueExpression(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransVoucherIdWhereClause</Name>
				<Source><![CDATA[
    private SysDaQueryExpression buildInventTransVoucherIdWhereClause()
    {
        return new SysDaEqualsExpression(
                   new SysDaFieldExpression(inventTransToBeMarked, fieldStr(InventTrans, Voucher)),
                   new SysDaValueExpression(markVoucherId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransMarkingRefWhereClauseForUpdateOperation</Name>
				<Source><![CDATA[
    private SysDaQueryExpression buildInventTransMarkingRefWhereClauseForUpdateOperation()
    {
        return new SysDaEqualsExpression(
                   new SysDaFieldExpression(inventTransToBeMarked, fieldStr(InventTrans, MarkingRefInventTransOrigin)),
                   new SysDaValueExpression(0));         
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransMarkingRefWhereClauseForDeleteOperation</Name>
				<Source><![CDATA[
    private SysDaQueryExpression buildInventTransMarkingRefWhereClauseForDeleteOperation()
    {
        
        return new SysDaEqualsExpression(
                   new SysDaFieldExpression(inventTransToBeMarked, fieldStr(InventTrans, MarkingRefInventTransOrigin)),
                   new SysDaValueExpression(markingRefInventTransOrigin));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransStatusWhereClauseForDeleteMarkingOperation</Name>
				<Source><![CDATA[
    private SysDaQueryExpression buildInventTransStatusWhereClauseForDeleteMarkingOperation()
    {
        // <GEERU>
        return new SysDaOrExpression(
                   new SysDaEqualsExpression(
                       new SysDaFieldExpression(inventTransToBeMarked, fieldStr(InventTrans, StatusReceipt)),
                       new SysDaValueExpression(StatusReceipt::Purchased)),
                   new SysDaEqualsExpression(
                       new SysDaFieldExpression(inventTransToBeMarked, fieldStr(InventTrans, StatusIssue)),
                       new SysDaValueExpression(StatusIssue::Sold)));
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransVoucherPhysicalIdWhereClause</Name>
				<Source><![CDATA[
    private SysDaQueryExpression buildInventTransVoucherPhysicalIdWhereClause()
    {
        return new SysDaEqualsExpression(
                   new SysDaFieldExpression(inventTransToBeMarked, fieldStr(InventTrans, VoucherPhysical)),
                   new SysDaValueExpression(voucherPhysicalId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransOrderByClause</Name>
				<Source><![CDATA[
    protected void buildInventTransOrderByClause(SysDaQueryObject _inventTransQueryObject)
    {
        if (markSortOrder == SortOrder::Ascending)
        {
            _inventTransQueryObject.orderByClause().add(fieldStr(InventTrans, StatusReceipt));
            _inventTransQueryObject.orderByClause().add(fieldStr(InventTrans, StatusIssue));
        }
        else
        {
            _inventTransQueryObject.orderByClause().addDescending(fieldStr(InventTrans, StatusReceipt));
            _inventTransQueryObject.orderByClause().addDescending(fieldStr(InventTrans, StatusIssue));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransStatusWhereClauseForUpdateMarkingOperation</Name>
				<Source><![CDATA[
    private SysDaQueryExpression buildInventTransStatusWhereClauseForUpdateMarkingOperation()
    {
        return new SysDaLessThanOrEqualsExpression(
                   new SysDaFieldExpression(inventTransToBeMarked, fieldStr(InventTrans, StatusReceipt)),
                   new SysDaValueExpression(StatusReceipt::Arrived))
               .and(new SysDaLessThanOrEqualsExpression(
                   new SysDaFieldExpression(inventTransToBeMarked, fieldStr(InventTrans, StatusIssue)),
                   new SysDaValueExpression(StatusIssue::Picked)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransDimWhereClauseForUpdateMarkingOperation</Name>
				<Source><![CDATA[
    private SysDaQueryExpression buildInventTransDimWhereClauseForUpdateMarkingOperation(Set _inventDimIdSet)
    {
        if (!_inventDimIdSet)
        {
            return null;
        }

        InventDimId inventDimId;
        SysDaQueryExpression whereClause, whereClauseInventDim;
        SetEnumerator inventDimIdSetEnumerator = _inventDimIdSet.getEnumerator();
        while (inventDimIdSetEnumerator.moveNext())
        {
            inventDimId = inventDimIdSetEnumerator.current();
            whereClauseInventDim = new SysDaEqualsExpression(
                new SysDaFieldExpression(inventTransToBeMarked, fieldStr(InventTrans, InventDimId)),
                new SysDaValueExpression(inventDimId));

            if (whereClause)
            {
                whereClause = whereClause.or(whereClauseInventDim);
            }
            else
            {
                whereClause = whereClauseInventDim;
            }
        }

        return whereClause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransQuery</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public SysDaQueryObject buildInventTransQuery()
    {
        SysDaQueryObject markInventTransQueryObject = new SysDaQueryObject(inventTransToBeMarked);
        markInventTransQueryObject.forUpdateHint = true;
        this.buildInventTransOrderByClause(markInventTransQueryObject);

        SysDaQueryExpression whereClause = this.buildInventTransWhereClause();
        
        if (markQty < 0) 
        {
            whereClause = whereClause.and(this.buildInventTransMarkQtyLessThanZeroWhereClause());
        }
        else
        {
            whereClause = whereClause.and(this.buildInventTransMarkQtyGreaterThanZeroWhereClause());
        }
        
        if (isStatusConditionAdded  && isUpdateMarkingOperation)
        {
            whereClause = whereClause.and(this.buildInventTransStatusWhereClauseForUpdateMarkingOperation());
        }

        if (isDeleteMarkingOperation)
        {
            whereClause = whereClause.and(this.buildInventTransMarkingRefWhereClauseForDeleteOperation());
        }

        if (isDeleteMarkingOperation && onlyFinancialPosted)
        {
            whereClause = whereClause.and(this.buildInventTransStatusWhereClauseForDeleteMarkingOperation());
        }
        
        if (isUpdateMarkingOperation && isScrapTransaction == false)
        {
            whereClause = whereClause.and(this.buildInventTransMarkingRefWhereClauseForUpdateOperation());
        }
        
        if (isUpdateMarkingOperation && markVoucherId != '')
        {
            whereClause = whereClause.and(this.buildInventTransVoucherIdWhereClause());
        }
        
        if (isDeleteMarkingOperation && voucherPhysicalId)
        {
            whereClause = whereClause.and(this.buildInventTransVoucherPhysicalIdWhereClause());
        }

        if (InventQualityOrderQueryTransFromDimensionMapFlight::instance().isEnabled())
        {
            InventQualityOrderMapMarkingDimensionContext markingContext = InventQualityOrderMapMarkingDimensionContext::current();
            if (markingContext && markingContext.getInventDimIdSet())
            {
                SysDaQueryExpression whereMarkingInventDim = this.buildInventTransDimWhereClauseForUpdateMarkingOperation(markingContext.getInventDimIdSet());
                if (whereMarkingInventDim)
                {
                    whereClause = whereClause.and(whereMarkingInventDim);
                }
            }
        }

        markInventTransQueryObject.whereClause(whereClause);

        InventDim::dimAddInventDimExistsJoin(
            markInventTransQueryObject,
            new SysDaFieldExpression(inventTransToBeMarked, fieldStr(InventTrans, InventDimId)),
            inventDimForSearch,
            inventDimCriteria,
            inventDimParmForValidateEnabled);

        return markInventTransQueryObject;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>