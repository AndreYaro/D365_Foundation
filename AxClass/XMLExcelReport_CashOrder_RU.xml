<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>XmlExcelReport_CashOrder_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints unified forms KO-1 and KO-2 to excel
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
public class XmlExcelReport_CashOrder_RU extends XMLExcelReport_RU implements BatchRetryable, ERIReportPostProcessingSupported
{
    RCashTrans cashTrans;

    QueryRun queryRun;

    CompanyInfo companyInfo;
    RCashTransType transType;
    LanguageId languageId;

    boolean printRCashName;

    RNumDateInWordConverter converter;

    str notes1;
    str notes2;
    str notesQ1;
    str notesQ2;
    str notesQ3;
    str notesQ4;
    str amountTxt1;
    str amountTxt2;
    str amountTxtQ1;
    str amountTxtQ2;
    str amountTxtQ3;
    str reprPersonName1;
    str reprPersonName2;
    str vatAmountQ1;
    str vatAmountQ2;
    str txtAmountDisb1;
    str txtAmountDisb2;
    str attachmentDisb1;
    str attachmentDisb2;
    str represPersonCardDisb1;
    str represPersonCardDisb2;

    Filename fileNamePostfix;

    protected const str reimbursement = 'REIMBURSEMENT';
    protected const str disbursement = 'DISBURSEMENT';

    protected const int width = 114;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates height of resizeable sections section
    /// </summary>
    /// <param name="_bookmark">
    /// Name of section
    /// </param>
    /// <returns>
    /// not used in this report, because report has no resizeable sections
    /// </returns>
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes report
    /// </summary>
    protected void createReport()
    {
        curWorkSheetNum = 1;
        widthCols = width;

        this.printCashOrders();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Name of the new file
    /// </summary>
    /// <returns>
    /// Name of the new file
    /// </returns>
    protected Filename fileName()
    {
        return 'CashOrder';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Postfix for a new file
    /// </summary>
    /// <returns>
    /// Postfix for a new file
    /// </returns>
    protected Filename fileNamePostfix()
    {
        if (!fileNamePostfix)
        {
            QueryRun qrLocal = new QueryRun(queryRun.pack());
            RCashTrans rCashTransLocal;

            while (qrLocal.next())
            {
                rCashTransLocal = qrLocal.getNo(1);

                fileNamePostfix += strFmt('_%1', rCashTransLocal.DocId);
            }
        }

        return fileNamePostfix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'CashOrder';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills specified section with data
    /// </summary>
    /// <param name="_bookmark">
    /// Name of section
    /// </param>
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case reimbursement:
                this.fillReimbursementData();
                break;
            case disbursement:
                this.fillDisbursementData();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDisbursementData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills disbursement section with data
    /// </summary>
    protected void fillDisbursementData()
    {
        this.initSplitTextDisb();

        this.insertValueToSection('CompanyNameDisb'       , this.getCompanyName());
        this.insertValueToSection('DepartmentDescDisb'    , this.getDepartmentDesc());
        this.insertValueToSection('OKPODisb'              , this.getOKPO());
        this.insertValueToSection('DocumentNumDisb'       , cashTrans.DocId);
        this.insertValueToSection('TransDateDisb'         , cashTrans.TransDate);
        this.insertValueToSection('DepartmentNumDisb'     , this.getDepartmentNum());
        this.insertValueToSection('OffsetAccountDisb'     , this.getOffsetAccount());
        this.insertValueToSection('AnalysisCodeDisb'      , this.getAnalysisNum());
        this.insertValueToSection('LedgerAccountDisb'     , this.getLedgerAccount());
        this.insertValueToSection('AmountCurDisb'         , -cashTrans.AmountCur);
        this.insertValueToSection('PurposeNumDisb'        , this.getPurposeNum());
        this.insertValueToSection('RepresPersonNameDisb'  , this.getRepresPersonName());
        this.insertValueToSection('PaymentNotesDisb'      , cashTrans.PaymentNotes);
        this.insertValueToSection('TxtAmount1Disb'        , txtAmountDisb1);
        this.insertValueToSection('TxtAmount2Disb'        , txtAmountDisb2);
        this.insertValueToSection('Attachment1Disb'       , attachmentDisb1);
        this.insertValueToSection('Attachment2Disb'       , attachmentDisb2);
        this.insertValueToSection('DirectorTitleDisb'     , this.getDirectorTitle());
        this.insertValueToSection('DirectorNameDisb'      , this.getDirectorName());
        this.insertValueToSection('AccountantNameDisb'    , this.getAccountantName());
        this.insertValueToSection('TransDateTxtDisb'      , this.getTxtTransDate());
        this.insertValueToSection('RepresPersonCard1Disb' , represPersonCardDisb1);
        this.insertValueToSection('RepresPersonCard2Disb' , represPersonCardDisb2);
        this.insertValueToSection('CashierNameDisb'       , this.getCashierName());
        this.insertValueToSection('CurrencyTableDisb'     , this.getTxtCurrencyName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReimbursementData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills reimbursement section with data
    /// </summary>
    protected void fillReimbursementData()
    {
        this.initSplitTextReimb();

        this.insertValueToSection('CompanyName'       , this.getCompanyName());
        this.insertValueToSection('DepartmentDesc'    , this.getDepartmentDesc());
        this.insertValueToSection('OKPO'              , this.getOKPO());
        this.insertValueToSection('DocumentNum'       , cashTrans.DocId);
        this.insertValueToSection('TransDate'         , cashTrans.TransDate);
        this.insertValueToSection('AccountDebit'      , this.getLedgerAccount());
        this.insertValueToSection('DepartmentNum'     , this.getDepartmentNum());
        this.insertValueToSection('OffsetAccount'     , this.getOffsetAccount());
        this.insertValueToSection('AnalysisNum'       , this.getAnalysisNum());
        this.insertValueToSection('Amount'            , cashTrans.AmountCur);
        this.insertValueToSection('PurposeNum'        , this.getPurposeNum());
        this.insertValueToSection('Notes1'            , notes1);
        this.insertValueToSection('Notes2'            , notes2);
        this.insertValueToSection('TxtAmount1'        , amountTxt1);
        this.insertValueToSection('TxtAmount2'        , amountTxt2);
        this.insertValueToSection('TxtVATAmount'      , this.getTxtVATAmount());
        this.insertValueToSection('Attachment'        , this.getAttachement());
        this.insertValueToSection('AccountantName'    , this.getAccountantName());
        this.insertValueToSection('CashierName'       , this.getCashierName());
        this.insertValueToSection('RepresPersonName'  , this.getRepresPersonName());
        this.insertValueToSection('CurrencyTableReimb', this.getTxtCurrencyName());

        //Quittance
        this.insertValueToSection('CompanyNameQ'      , this.getCompanyName());
        this.insertValueToSection('DocumentNumQ'      , cashTrans.DocId);
        this.insertValueToSection('TxtTransDateQ'     , this.getTxtTransDate());
        this.insertValueToSection('RepresPersonNameQ1', reprPersonName1);
        this.insertValueToSection('RepresPersonNameQ2', reprPersonName2);
        this.insertValueToSection('NotesQ1'           , notesQ1);
        this.insertValueToSection('NotesQ2'           , notesQ2);
        this.insertValueToSection('NotesQ3'           , notesQ3);
        this.insertValueToSection('NotesQ4'           , notesQ4);
        this.insertValueToSection('TxtShortAmountQ'   , this.getTxtShortAmount());
        this.insertValueToSection('TxtAmountQ1'       , amountTxtQ1);
        this.insertValueToSection('TxtAmountQ2'       , amountTxtQ2);
        this.insertValueToSection('TxtAmountQ3'       , amountTxtQ3);
        this.insertValueToSection('VatAmountQ1'       , vatAmountQ1);
        this.insertValueToSection('VatAmountQ2'       , vatAmountQ2);
        this.insertValueToSection('TxtTransDateQ2'    , this.getTxtTransDate());
        this.insertValueToSection('AccountantNameQ'   , this.getAccountantName());
        this.insertValueToSection('CashierNameQ'      , this.getCashierName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountantName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return accountant name for current cashTrans
    /// </summary>
    /// <returns>
    /// Accountant name for current cashTrans
    /// </returns>
    protected Name getAccountantName()
    {
        return transType.offAccountantName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAnalysisNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets analisys dimension from cash trans
    /// </summary>
    /// <returns>
    /// Analisys dimension from cash trans
    /// </returns>
    protected DimensionValue getAnalysisNum()
    {
        DimensionAttributeValue dimensionAttributeValue = DimensionAttributeValue::find(transType.analysisDimensionValueId());

        return dimensionAttributeValue ? dimensionAttributeValue.getCode(): '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttachement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates string containing description of cash trans attachment
    /// </summary>
    /// <returns>
    /// String containing description of cash trans attachment
    /// </returns>
    protected PayeeDocument_RU getAttachement()
    {
        return transType.attachement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashierName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return cashier name for current cashTrans
    /// </summary>
    /// <returns>
    /// Cashier name for current cashTrans
    /// </returns>
    protected Name getCashierName()
    {
        return transType.offCashierName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns company name for current company
    /// </summary>
    /// <returns>
    /// Company name for current company
    /// </returns>
    protected CompanyName getCompanyName()
    {
        return CompanyInfo::find().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepartmentDesc</Name>
				<Source><![CDATA[
    /// <summary>
    /// If department name should be filled with RCashAccount data, returns rCashAccount's name, otherwise blank
    /// </summary>
    /// <returns>
    /// If department name should be filled with RCashAccount data, returns rCashAccount's name, otherwise blank
    /// </returns>
    protected Description getDepartmentDesc()
    {
        return printRCashName ? RCashTable::find(cashTrans.AccountNum).Name : #blank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepartmentNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets deparment dimension from cash trans
    /// </summary>
    /// <returns>
    /// Deparment dimension from cash trans
    /// </returns>
    protected DimensionValue getDepartmentNum()
    {
        DimensionAttributeValue dimensionAttributeValue = DimensionAttributeValue::find(transType.departmentDimensionValueId());

        return dimensionAttributeValue ? dimensionAttributeValue.getCode(): '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirectorName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return director name for current cashTrans
    /// </summary>
    /// <returns>
    /// Director name for current cashTrans
    /// </returns>
    protected Name getDirectorName()
    {
        return transType.offDirectorName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirectorTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return director title for current cashTrans
    /// </summary>
    /// <returns>
    /// Director title for current cashTrans
    /// </returns>
    protected Name getDirectorTitle()
    {
        return transType.offDirectorTitle();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets main account name from rcashTrans ledger dimension
    /// </summary>
    /// <returns>
    /// Main account name from rcashTrans ledger dimension
    /// </returns>
    protected MainAccountNum getLedgerAccount()
    {
        return LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(cashTrans.LedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffsetAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets main account name from rcashTrans offset ledger dimension
    /// </summary>
    /// <returns>
    /// Main account name from rcashTrans offset ledger dimension
    /// </returns>
    protected MainAccountNum getOffsetAccount()
    {
        return LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(cashTrans.OffsetLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOKPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method to get OKPO code
    /// </summary>
    /// <returns>
    /// Current company's OKPO Code
    /// </returns>
    protected OKPO_RU getOKPO()
    {
        return CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find(), cashTrans.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurposeNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets purpose dimension from cash trans
    /// </summary>
    /// <returns>
    /// Purpose dimension from cash trans
    /// </returns>
    protected DimensionValue getPurposeNum()
    {
        DimensionAttributeValue dimensionAttributeValue = DimensionAttributeValue::find(transType.purposeDimensionValueId());

        return dimensionAttributeValue ? dimensionAttributeValue.getCode(): '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRepresPersonCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets payee identification from cash trans
    /// </summary>
    /// <returns>
    /// Payee identification from cash trans
    /// </returns>
    protected PayeeDocument_RU getRepresPersonCard()
    {
        return transType.represPersonCard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRepresPersonName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets advance holder name from cash trans
    /// </summary>
    /// <returns>
    /// Advance holder name from cash trans
    /// </returns>
    protected EmplName getRepresPersonName()
    {
        return transType.represPersonName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTxtAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns cash trans amount converted to srting in words
    /// </summary>
    /// <returns>
    /// Cash trans amount converted to srting in words
    /// </returns>
    protected TempStr getTxtAmount()
    {
        return converter.numeralsToCurrency(cashTrans.AmountCur, cashTrans.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTxtCurrencyName</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns description of currency
    /// </summary>
    /// <returns>
    ///   Return value consists of name of currency and name of pennies
    /// </returns>
    protected TempStr getTxtCurrencyName()
    {
        const str colon = "; ";

        str shortName = CurrencyNameDeclension_RU::currencyExt(cashTrans.CurrencyCode, languageId);
        str shortNamePenny = CurrencyNameDeclension_RU::currencyPennyExt(cashTrans.CurrencyCode, languageId);

        return shortName && shortNamePenny ?
            shortName + colon + shortNamePenny :
            shortName + shortNamePenny;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTxtSalesTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns cash trans sales tax amount converted to srting in words
    /// </summary>
    /// <returns>
    /// Cash trans sales tax amount converted to srting in words
    /// </returns>
    protected TempStr getTxtSalesTaxAmount()
    {
        TaxAmount taxAmount = transType.salesTaxAmount();

        return taxAmount > 0 ?
            strFmt("@SYS53184", SysLabel::labelId2String(literalStr("@GLS102960"), languageId),
                converter.numeralsToCurrency(taxAmount, cashTrans.CurrencyCode)) :
            "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTxtShortAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns cash trans amount converted to srting in digits
    /// </summary>
    /// <returns>
    /// Cash trans amount converted to srting in digits
    /// </returns>
    protected TempStr getTxtShortAmount()
    {
        return CurrencyNameDeclension_RU::numeralsToCurrencyShort(cashTrans.AmountCur, cashTrans.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTxtTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets transaction date converted to string in words formatted
    /// </summary>
    /// <returns>
    /// Transaction date converted to string in words formatted
    /// </returns>
    protected TempStr getTxtTransDate()
    {
        return #space + strReplace(converter.date2str(cashTrans.TransDate, true), '\'', '"');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTxtVATAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns cash trans VAT amount converted to srting in words
    /// </summary>
    /// <returns>
    /// Cash trans VAT amount converted to srting in words
    /// </returns>
    protected TempStr getTxtVATAmount()
    {
        const str colon = "; ";
        TaxAmount taxAmount = transType.vatAmount();
        TempStr salesTaxTxt = this.getTxtSalesTaxAmount();

        return (taxAmount > 0 ?
            strFmt("@SYS53184", SysLabel::labelId2String(literalStr("@GLS111211"), languageId),
                converter.numeralsToCurrency(taxAmount, cashTrans.CurrencyCode)) :
            SysLabel::labelId2String(literalStr("@GLS102409"),languageId)) + (salesTaxTxt ? colon + salesTaxTxt : "");
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes report sections
    /// </summary>
    protected void initSectionMap()
    {
        this.addSection(reimbursement);
        this.addSection(disbursement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSplitTextDisb</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes texts in report which has to be splitted between several lines for disbursement slip
    /// </summary>
    protected void initSplitTextDisb()
    {
        const int txtAmountD1 = 97;
        [txtAmountDisb1, txtAmountDisb2] = XMLExcelReport_RU::splitStrByLines(this.getTxtAmount(), [txtAmountD1]);

        const int attachmentD1 = 92;
        [attachmentDisb1, attachmentDisb2] = XMLExcelReport_RU::splitStrByLines(this.getAttachement(), [attachmentD1]);

        const int represPersonCardD1 = 99;
        [represPersonCardDisb1, represPersonCardDisb2] = XMLExcelReport_RU::splitStrByLines(this.getRepresPersonCard(), [represPersonCardD1]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSplitTextReimb</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes texts in report which has to be splitted between several lines for reimbursement slip
    /// </summary>
    protected void initSplitTextReimb()
    {
        const int notes1Val = 49;
        [notes1, notes2] = XMLExcelReport_RU::splitStrByLines(cashTrans.PaymentNotes, [notes1Val]);

        const int notesQ1Val = 27;
        const int notesQ2Val = 35;
        const int notesQ3Val = 35;
        [notesQ1, notesQ2, notesQ3, notesQ4] = XMLExcelReport_RU::splitStrByLines(cashTrans.PaymentNotes, [notesQ1Val, notesQ2Val, notesQ3Val]);

        const int amountTxt1Val = 52;
        [amountTxt1, amountTxt2] = XMLExcelReport_RU::splitStrByLines(this.getTxtAmount(), [amountTxt1Val]);

        const int amountTxtQ1Val = 35;
        const int amountTxtQ2Val = 35;
        [amountTxtQ1, amountTxtQ2, amountTxtQ3] = XMLExcelReport_RU::splitStrByLines(this.getTxtAmount(), [amountTxtQ1Val, amountTxtQ2Val]);

        const int reprPersNameQ1Val = 27;
        [reprPersonName1, reprPersonName2] = XMLExcelReport_RU::splitStrByLines(this.getRepresPersonName(), [reprPersNameQ1Val]);

        const int vatAmountQ1Val = 26;
        [vatAmountQ1, vatAmountQ2] = XMLExcelReport_RU::splitStrByLines(this.getTxtVATAmount(), [vatAmountQ1Val]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintRCashName</Name>
				<Source><![CDATA[
    public boolean parmPrintRCashName(boolean _printRCashName = printRCashName)
    {
        printRCashName = _printRCashName;
        return printRCashName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryRun</Name>
				<Source><![CDATA[
    public QueryRun parmQueryRun(QueryRun _queryRun = queryRun)
    {
        queryRun = _queryRun;
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCashOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Outputs cash orders to excel depending on their type
    /// </summary>
    protected void printCashOrders()
    {
        this.initSectionMap();

        document.setWorksheetSpans(widthCols);

        languageId = CompanyInfo::languageId();
        converter = RNumDateInWordConverter::construct(languageId);

        while (queryRun.next())
        {
            cashTrans = queryRun.get(tableNum(RCashTrans));
            transType = cashTrans.type();
            transType.parmLanguageID(languageId);

            if (this.validateRCashDocType(transType.docType()))
            {
                document.insertPageBreak(currentRow, curWorkSheetNum);
            }
        }

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRCashDocType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether rows can be added to the document of the specified type. 
    /// </summary>
    /// <param name = "_docType">
    ///    A <c>RCashDocType</c> value. 
    /// </param>
    /// <returns>
    ///    true if rows can be added to the document; otherwise false.
    /// </returns>
    protected boolean validateRCashDocType(RCashDocType _docType)
    {
        boolean ret;

        switch (_docType)
        {
            case RCashDocType::ReimbursementSlip:
                this.execute(reimbursement);
                ret = true;
                break;
            case RCashDocType::DisbursementSlip:
                this.execute(disbursement);
                ret = true;
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns name of template for report
    /// </summary>
    /// <returns>
    /// name of template for report
    /// </returns>
    protected Filename templateName()
    {
        return resourceStr(RCashKO_1_2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of cells to be filled with data
    /// </summary>
    /// <returns>
    /// Number of cells to be filled with data
    /// </returns>
    protected Counter totalCells()
    {
        const int cellsDisbursement = 24;
        return SysQuery::countTotal(queryRun) * cellsDisbursement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static XMLExcelReport_CashOrder_RU construct()
    {
        return new XMLExcelReport_CashOrder_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>