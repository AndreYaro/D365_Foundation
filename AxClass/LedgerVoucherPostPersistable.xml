<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerVoucherPostPersistable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerVoucherPostPersistable</c> class accommodates posting to the general ledger cross commits.
/// </summary>
/// <remarks>
/// The state of the <c>LedgerVoucherPostPersistable</c> cannot be changed after it is persisted the first time.
/// New <c>LedgerVoucherObject</c>'s can be added after the <c>LedgerVoucherPostPersistable</c> is persisted, but the state of a <c>LedgerVoucherObject</c> 
/// cannot be changed after it is added to the <c>LedgerVoucher</c>.
/// New <c>LedgerVoucherTransObject</c>'s can also be added after the <c>LedgerVoucherPostPersistable</c> is persisted.
/// When the <c>LedgerVoucherPostPersistable</c> is persisted, then <c>LedgerVoucherTransObject</c>'s related to <c>LedgerVoucherObject</c>'s are validated and persisted. 
/// When the <c>LedgerVoucherPostPersistable</c> is posted, the persisted <c>LedgerVoucherObject</c>'s and <c>LedgerVoucherTransObject</c>'s are are loaded into memory and posted.
/// </remarks>
public class LedgerVoucherPostPersistable extends LedgerVoucherPost implements SysPackable
{
    RefTableId                              refTableId;
    RefRecId                                refRecId;
    LedgerVoucherPostPersistedRecId         ledgerVoucherPostPersistedRecId;
    Connection                              connection;
    TransDate                               unpackedLastTransDate;
    Voucher                                 unpackedLastVoucher;
    CurrentOperationsTax                    unpackedLastPostingLayer;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        refRecId,
        ledgerEntryJournal.JournalNumber,
        detailSummary,
        transactionLogType,
        transactionLogTxt,
        voucherSeriesCode,
        checkBlockedDimensions,
        checkTransOnInsert,
        skipBlockedForManualEntryCheck,
        lastVoucher,
        lastTransDate,
        lastPostingLayer,
        reversal,
        companyId,
        sysModuleDefault,
        voucherCN,
        ledgerVoucherTypeCN,
        openingSheet_ES
    ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a voucher to be posted.
    /// </summary>
    /// <param name = "_reference">The <c>LedgerVoucherObject</c> instance.</param>
    /// <remarks>
    /// When the voucher is added, the voucher is validated and persisted in the database. This makes it possible to use the voucher from another thread. 
    /// The state of the voucher cannot be changed after it is persisted.
    /// </remarks>
    public void addVoucher(LedgerVoucherObject _reference)
    {
        if (!_reference.check(this))
        {
            throw error("@SYS21533");
        }

        super(_reference);

        LedgerVoucherObjectPersisted ledgerVoucherObjectPersisted;
        Counter                      logCount = infologLine();
        
        try{
            connection.ttsbegin();

            ledgerVoucherObjectPersisted.setConnection(connection);
            ledgerVoucherObjectPersisted.RefTableId = refTableId;
            ledgerVoucherObjectPersisted.RefRecId = refRecId;
            ledgerVoucherObjectPersisted.Voucher = _reference.parmVoucher();
            ledgerVoucherObjectPersisted.AccountingDate = _reference.parmAccountingDate();
            ledgerVoucherObjectPersisted.PostingLayer = _reference.parmPostingLayer();
            ledgerVoucherObjectPersisted.PackedLedgerVoucherObject = _reference.pack();
            ledgerVoucherObjectPersisted.insert();

            connection.ttscommit();
        }
        catch(Exception::DuplicateKeyException)
        {
            if (xSession::lastDuplicateKeyViolatingTable() == ledgerVoucherObjectPersisted.TableId)
            {
                LedgerVoucherObjectPersisted ledgerVoucherObjectPersistedDB = this.findLedgerVoucherObjectPersisted(_reference.parmVoucher(), _reference.parmAccountingDate(), _reference.parmPostingLayer());

                if (ledgerVoucherObjectPersisted.PackedLedgerVoucherObject != ledgerVoucherObjectPersistedDB.PackedLedgerVoucherObject)
                {
                    throw Exception::DuplicateKeyException;
                }
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
            infolog.clear(logCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVoucherToMemory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a voucher to memory.
    /// </summary>
    /// <param name = "_reference">The <c>LedgerVoucherObject</c> instance.</param>
    protected void addVoucherToMemory(LedgerVoucherObject _reference)
    {
        _reference.parmGeneralJournalEntryRecId(this.getNextTemporaryRecId());
        ledgerVoucherList.add(_reference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLedgerVoucherObjectPersisted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the persisted voucher.
    /// </summary>
    /// <param name = "_subledgerVoucher">The voucher number of the instance of the <c>LedgerVoucherObject</c> class to load into memory.</param>
    /// <param name = "_accountingDate">The accounting date.</param>
    /// <param name = "_postingLayer">The posting layer.</param>
    /// <returns>The persisted voucher if it exists; otherwise null.</returns>
    protected LedgerVoucherObjectPersisted findLedgerVoucherObjectPersisted(Voucher _subledgerVoucher, TransDate _accountingDate, CurrentOperationsTax _postingLayer)
    {
        LedgerVoucherObjectPersisted ledgerVoucherObjectPersisted;
        ledgerVoucherObjectPersisted.setConnection(connection);

        select ledgerVoucherObjectPersisted
            where ledgerVoucherObjectPersisted.RefTableId == refTableId
                && ledgerVoucherObjectPersisted.RefRecId == refRecId
                && ledgerVoucherObjectPersisted.Voucher == _subledgerVoucher
                && ledgerVoucherObjectPersisted.AccountingDate == _accountingDate
                && ledgerVoucherObjectPersisted.PostingLayer == _postingLayer;

        return ledgerVoucherObjectPersisted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads a persisted voucher into memory if it exists.
    /// </summary>
    /// <param name = "_subledgerVoucher">The voucher number of the instance of the <c>LedgerVoucherObject</c> class to load into memory.</param>
    /// <param name = "_accountingDate">The accounting date.</param>
    /// <param name = "_postingLayer">The posting layer.</param>
    protected void loadReference(Voucher _subledgerVoucher, TransDate _accountingDate, CurrentOperationsTax _postingLayer)
    {
        LedgerVoucherObjectPersisted ledgerVoucherObjectPersisted = this.findLedgerVoucherObjectPersisted(_subledgerVoucher, _accountingDate, _postingLayer);

        if (ledgerVoucherObjectPersisted)
        {
            this.addVoucherToMemory(LedgerVoucherObject::create(ledgerVoucherObjectPersisted.PackedLedgerVoucherObject));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLedgerVoucherObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the instance of the <c>LedgerVoucherObject</c> class passed in as a parameter.
    /// </summary>
    /// <param name="_voucher">The voucher number of the instance of the <c>LedgerVoucherObject</c> class to find; optional.</param>
    /// <param name="_accountingDate">The accounting date of the instance of the <c>LedgerVoucherObject</c> class to find; optional.</param>
    /// <param name="_postingLayer">The posting layer of the instance of the <c>LedgerVoucherObject</c> class to find; optional.</param>
    /// <returns>The instance of the <c>LedgerVoucherObject</c> class found.</returns>
    /// <remarks>
    /// If no arguments were given, the method returns the last known <c>LedgerVoucherObject</c> object handled by the <c>LedgerVoucher</c> object.
    /// If the <c>LedgerVoucherPostPersistable</c> was instantiated from the persisted state, then the first call will return the last known 
    /// <c>LedgerVoucherObject</c> from the point in time when the <c>LedgerVoucherPostPersistable</c> was persisted the first time.
    /// </remarks>
    public LedgerVoucherObject findLedgerVoucherObject(Voucher _voucher = lastVoucher, TransDate _accountingDate = lastTransDate, CurrentOperationsTax _postingLayer = lastPostingLayer)
    {
        LedgerVoucherObject reference = super(_voucher, _accountingDate, _postingLayer);
        if (!reference)
        {
            this.loadReference(_voucher, _accountingDate, _postingLayer);
            reference = super(_voucher, _accountingDate, _postingLayer);
        }
        return reference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReference</Name>
				<Source><![CDATA[
    public LedgerVoucherObject findReference(Voucher _subledgerVoucher, TransDate _accountingDate, CurrentOperationsTax _postingLayer)
    {
        LedgerVoucherObject reference = super(_subledgerVoucher, _accountingDate, _postingLayer);
        if (!reference)
        {
            this.loadReference(_subledgerVoucher, _accountingDate, _postingLayer);
            reference = super(_subledgerVoucher, _accountingDate, _postingLayer);
        }

        return reference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateReferenceSecCur_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Finds or creates and returns the instance of the <c>LedgerVoucherObject</c> class for dual warehousing posting layer.
    /// </summary>
    /// <returns>
    /// The instance of the <c>LedgerVoucherObject</c> class found or created.
    /// </returns>
    /// <remarks>
    /// The method is not supported by the <c>LedgerVoucherPostPersistable</c> class.
    /// </remarks>
    public LedgerVoucherObject findOrCreateReferenceSecCur_RU()
    {
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLedgerVoucherList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the <c>LedgerVoucherObject</c> into memory.
    /// </summary>
    /// <param name = "loadLedgerVoucherTransList"></param>
    protected void loadLedgerVoucherList(boolean loadLedgerVoucherTransList = false)
    {
        LedgerVoucherObjectPersisted    ledgerVoucherObjectPersisted;

        var persistedLastTransDate = lastTransDate;
        var persistedLastVoucher = lastVoucher;
        var persistedLastPostingLayer = lastPostingLayer;

        while select ledgerVoucherObjectPersisted
            where ledgerVoucherObjectPersisted.RefTableId == refTableId
                && ledgerVoucherObjectPersisted.RefRecId == refRecId
        {
            LedgerVoucherObject ledgerVoucherObject = this.findReference(ledgerVoucherObjectPersisted.Voucher, ledgerVoucherObjectPersisted.AccountingDate, ledgerVoucherObjectPersisted.PostingLayer);
            if (loadLedgerVoucherTransList)
            {
                this.loadLedgerVoucherTransList(ledgerVoucherObjectPersisted, ledgerVoucherObject);
            }
        }

        lastTransDate = persistedLastTransDate;
        lastVoucher = persistedLastVoucher;
        lastPostingLayer = persistedLastPostingLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLedgerVoucherTransList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the persisted <c>LedgerVoucherTransObject</c>'s into memory.
    /// </summary>
    /// <param name = "_ledgerVoucherObjectPersisted">The persisted voucher.</param>
    /// <param name = "_reference">The voucher in memory.</param>
    protected void loadLedgerVoucherTransList(LedgerVoucherObjectPersisted _ledgerVoucherObjectPersisted, LedgerVoucherObject _reference)
    {
        LedgerVoucherTransList ledgerVoucherTransList = _reference.getInternalCollection();

        LedgerVoucherTransObjectPersisted ledgerVoucherTransObjectPersisted;
        while select ledgerVoucherTransObjectPersisted
            where ledgerVoucherTransObjectPersisted.ledgerVoucherObjectPersisted == _ledgerVoucherObjectPersisted.RecId
        {
            LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::create(ledgerVoucherTransObjectPersisted.PackedLedgerVoucherTransObject);
            ledgerVoucherTransObject.parmTempRecId(0);
            ledgerVoucherTransList.add(ledgerVoucherTransObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    protected boolean post()
    {
        this.loadLedgerVoucherList(true);
        this.cleanup();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the state.
    /// </summary>
    /// <remarks>
    /// On the fist call, the state of <c>LedgerVoucherPostPersistable</c> is persisted.
    /// On all calls <c>LedgerVoucherTransObject</c>'s added to the voucher since the last call/instantiation is persisted.
    /// </remarks>
    public void persistState()
    {
        if (!this.check())
        {
            throw error("@SYS21533");
        }
        this.persistLedgerVoucherPersistable();
        this.persistLedgerVoucherList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleanups the database.
    /// </summary>
    protected void cleanup()
    {
        LedgerVoucherObjectPersisted          ledgerVoucherObjectPersisted;
        LedgerVoucherTransObjectPersisted     ledgerVoucherTransObjectPersisted;

        delete_from ledgerVoucherTransObjectPersisted
            exists join ledgerVoucherObjectPersisted
            where ledgerVoucherObjectPersisted.RecId == ledgerVoucherTransObjectPersisted.LedgerVoucherObjectPersisted
               && ledgerVoucherObjectPersisted.RefTableId == refTableId
               && ledgerVoucherObjectPersisted.RefRecId == refRecId;

        delete_from ledgerVoucherObjectPersisted
            where ledgerVoucherObjectPersisted.RefTableId == refTableId
               && ledgerVoucherObjectPersisted.RefRecId == refRecId;

        LedgerVoucherPostPersisted ledgerVoucherPostPersisted;
        delete_from ledgerVoucherPostPersisted
            where ledgerVoucherPostPersisted.RefTableId == refTableId
               && ledgerVoucherPostPersisted.RefRecId == refRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLedgerVoucherStateChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the state of the persisted object was changed.
    /// </summary>
    /// <returns>true if the state of the persisted object was changed; otherwise false.</returns>
    protected boolean isLedgerVoucherStateChanged()
    {
        if (ledgerVoucherPostPersistedRecId)
        {
            LedgerVoucherPostPersisted ledgerVoucherPostPersisted = LedgerVoucherPostPersisted::findRef(refTableId, refRecId);

            lastVoucher = unpackedLastVoucher;
            lastTransDate = unpackedLastTransDate;
            lastPostingLayer = unpackedLastPostingLayer;

            return this.pack() != ledgerVoucherPostPersisted.PackedLedgerVoucherPersistable;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistLedgerVoucherPersistable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the instance of the object.
    /// </summary>
    protected void persistLedgerVoucherPersistable()
    {
        if (!ledgerVoucherPostPersistedRecId)
        {
            LedgerVoucherPostPersisted ledgerVoucherPostPersisted;

            ledgerVoucherPostPersisted.RefTableId = refTableId;
            ledgerVoucherPostPersisted.RefRecId = refRecId;
            ledgerVoucherPostPersisted.PackedLedgerVoucherPersistable = this.pack();
            ledgerVoucherPostPersisted.insert();
        }
        else
        {
            if (this.isLedgerVoucherStateChanged())
            {
                throw error(error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLedgerVoucherObjectStateChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the state of a persisted reference was changed.
    /// </summary>
    /// <param name = "_ledgerVoucherObject">The reference.</param>
    /// <returns>true if the state of a persisted reference was changed; otherwise false.</returns>
    protected boolean isLedgerVoucherObjectStateChanged(LedgerVoucherObject _ledgerVoucherObject)
    {
        LedgerVoucherObjectPersisted ledgerVoucherObjectPersisted = this.findLedgerVoucherObjectPersisted(_ledgerVoucherObject.parmVoucher(), _ledgerVoucherObject.parmAccountingDate(), _ledgerVoucherObject.parmPostingLayer());

        container packedLedgerVoucherObject = _ledgerVoucherObject.pack();

        return packedLedgerVoucherObject != ledgerVoucherObjectPersisted.PackedLedgerVoucherObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistLedgerVoucherList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the <c>LedgerVoucherTransObject</c>'s for all vouchers.
    /// </summary>
    protected void persistLedgerVoucherList()
    {
        boolean more = ledgerVoucherList.first();
        while (more)
        {
            LedgerVoucherObject reference = ledgerVoucherList.item();

            if (this.isLedgerVoucherObjectStateChanged(reference))
            {
                throw error(error::wrongUseOfFunction(funcName()));
            }
            this.persistLedgerVoucherTransList(reference);
            more = ledgerVoucherList.next();
        }
        ledgerVoucherList = LedgerVoucherList::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistLedgerVoucherTransList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the <c>LedgerVoucherTransObject</c>'s for a voucher.
    /// </summary>
    /// <param name = "_reference">The voucher.</param>
    protected void persistLedgerVoucherTransList(LedgerVoucherObject _reference)
    {
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(LedgerVoucherTransObjectPersisted));

        LedgerVoucherObjectPersisted  ledgerVoucherObjectPersisted;
        select ledgerVoucherObjectPersisted
            where ledgerVoucherObjectPersisted.RefTableId == refTableId
               && ledgerVoucherObjectPersisted.RefRecId == refRecId
               && ledgerVoucherObjectPersisted.Voucher == _reference.parmVoucher()
               && ledgerVoucherObjectPersisted.AccountingDate == _reference.parmAccountingDate()
               && ledgerVoucherObjectPersisted.PostingLayer == _reference.parmPostingLayer();

        LedgerVoucherTransList ledgerVoucherTransList = _reference.getInternalCollection();

        boolean more = ledgerVoucherTransList.first();
        while (more)
        {
            LedgerVoucherTransObjectPersisted ledgerVoucherTransObjectPersisted;
            ledgerVoucherTransObjectPersisted.ledgerVoucherObjectPersisted = ledgerVoucherObjectPersisted.RecId;
            ledgerVoucherTransObjectPersisted.PackedLedgerVoucherTransObject = ledgerVoucherTransList.item().pack();
            recordInsertList.add(ledgerVoucherTransObjectPersisted);
            more = ledgerVoucherTransList.next();
        }
        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefTableId</Name>
				<Source><![CDATA[
    RefTableId parmRefTableId(RefTableId _refTableId = refTableId)
    {
        refTableId = _refTableId;
        return refTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefRecId</Name>
				<Source><![CDATA[
    RefRecId parmRefRecId(RefRecId _refRecId = refRecId)
    {
        refRecId = _refRecId;
        return refRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,
                tableId2Name(refTableId),
                #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean success = false;
        Version version = RunBase::getVersion(_packedClass);
        TableName packedTableName;
    
        switch (version)
        {
            case #CurrentVersion:
                [
                    version,
                    packedTableName,
                    #CurrentList
                ] = _packedClass;
    
                refTableId = tableName2Id(packedTableName);
                success = true;
                break;
        }

        unpackedLastVoucher = lastVoucher;
        unpackedLastTransDate = lastTransDate;
        unpackedLastPostingLayer = lastPostingLayer;
    
        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        connection = new Connection();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLedgerPostPersistableSupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the configuration is supported by <c>LedgerVoucherPostPersistable</c>.
    /// </summary>
    /// <returns>true if the configuration is supported; otherwise false.</returns>
    /// <remarks>If the configuration isn't supported the class <c>LedgerVoucherPost</c> should the used for posting.</remarks>
    static boolean isLedgerPostPersistableSupported()
    {
        return !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) ||
               !TaxWithholdParameters_IN::checkTaxParameters() ||
               !TaxParameters::isServiceTaxEnable_IN() ||
               !LedgerInterunitBalancer::isBalancingEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerPostPersistable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of the <c>LedgerVoucherPostPersistable</c> class.
    /// </summary>
    /// <param name = "_common">The reference to the table buffer that is the master of the posting.</param>
    /// <param name = "_detailSummary">The detail summary.</param>
    /// <param name = "_sysModule">The sys module.</param>
    /// <param name = "_voucherSeriesCode">The voucher series code.</param>
    /// <param name = "_transactionLogType">The transaction log type.</param>
    /// <param name = "_transactionLogTxt">The transaction log txt.</param>
    /// <returns>A new instance of the <c>LedgerVoucherPostPersistable</c> class.</returns>
    static LedgerVoucher newLedgerPostPersistable(Common               _common,
                                                  DetailSummary        _detailSummary,
                                                  SysModule            _sysModule,
                                                  NumberSequenceCode   _voucherSeriesCode,
                                                  TransactionLogType   _transactionLogType = TransactionLogType::Unspecified,
                                                  TransTxt             _transactionLogTxt  = '')
    {
        LedgerVoucherPostPersistable ledgerVoucher;

        ledgerVoucher = new LedgerVoucherPostPersistable();

        ledgerVoucher.parmDetailSummary(_detailSummary);
        ledgerVoucher.parmSysModuleDefault(_sysModule);
        ledgerVoucher.parmTransactionLog(_transactionLogType, _transactionLogTxt);
        ledgerVoucher.parmVoucherSeriesCode(_voucherSeriesCode);
        ledgerVoucher.refTableId = _common.TableId;
        ledgerVoucher.refRecId = _common.RecId;

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPersistedLedgerPostPersistable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of the <c>LedgerVoucherPostPersistable</c> class from a persisted instance.
    /// </summary>
    /// <param name = "_common">The reference to the table buffer that is the master of the posting.</param>
    /// <returns>A new instance of the <c>LedgerVoucherPostPersistable</c> class if it exists; otherwise null.</returns>
    static LedgerVoucher newFromPersistedLedgerPostPersistable(Common _common)
    {
        LedgerVoucherPostPersisted ledgerVoucherPostPersisted = LedgerVoucherPostPersisted::findCommon(_common);
        LedgerVoucherPostPersistable ledgerVoucher;

        if (ledgerVoucherPostPersisted)
        {
            ledgerVoucher = new LedgerVoucherPostPersistable();
            ledgerVoucher.unpack(ledgerVoucherPostPersisted.PackedLedgerVoucherPersistable);
            ledgerVoucher.ledgerVoucherPostPersistedRecId = ledgerVoucherPostPersisted.RecId;
            ledgerVoucher.loadLedgerVoucherList();
        }

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPersistedLedgerPostPersistableRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of the <c>LedgerVoucherPostPersistable</c> class from a persisted instance.
    /// </summary>
    /// <param name = "_common">The reference to the table buffer that is the master of the posting.</param>
    /// <returns>A new instance of the <c>LedgerVoucherPostPersistable</c> class.</returns>
    private static LedgerVoucher newFromPersistedLedgerPostPersistableRef(RefTableId _refTableId, RefRecId _refRecId)
    {
        LedgerVoucherPostPersisted ledgerVoucherPostPersisted = LedgerVoucherPostPersisted::findRef(_refTableId, _refRecId);
        LedgerVoucherPostPersistable ledgerVoucherPostPersistable;

        if (ledgerVoucherPostPersisted)
        {
            ledgerVoucherPostPersistable = new LedgerVoucherPostPersistable();
            ledgerVoucherPostPersistable.unpack(ledgerVoucherPostPersisted.PackedLedgerVoucherPersistable);
            ledgerVoucherPostPersistable.ledgerVoucherPostPersistedRecId = ledgerVoucherPostPersisted.RecId;
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        return ledgerVoucherPostPersistable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvancePaymentWHT_IN</Name>
				<Source><![CDATA[
    public AmountCur parmAdvancePaymentWHT_IN(AmountCur _advancePaymentWHT = advancePaymentWHT)
    {
        // Not supported, Tax withholding
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllWHTInvoiceCompany_IN</Name>
				<Source><![CDATA[
    public container parmAllWHTInvoiceCompany_IN(container _companyId = allInvoiceCompany)
    {
        // Not supported, Tax withholding
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBackWardAmountWHT_IN</Name>
				<Source><![CDATA[
    public TaxWithholdAmountCur parmBackWardAmountWHT_IN(TaxWithholdAmountCur _backWardAmountWHT = backWardAmountWHT)
    {
        // Not supported, Tax withholding
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckBank_IN</Name>
				<Source><![CDATA[
    public boolean parmCheckBank_IN(boolean _checkBank = taxWithholdkBankStatus)
    {
        // Not supported, Tax withholding
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentCompany_IN</Name>
				<Source><![CDATA[
    public CompanyId parmCurrentCompany_IN(CompanyId _currentCompany_IN = currentCompany_IN)
    {
        // Not supported, Tax withholding
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterCompanyTransForST_IN</Name>
				<Source><![CDATA[
    public container parmInterCompanyTransForST_IN(container _checkSTForInterCompany = checkSTForInterCompany)
    {
        // Not supported, service tax
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsVATDeferment_IN</Name>
				<Source><![CDATA[
    public boolean parmIsVATDeferment_IN(boolean _isVATDeferment = isVATDeferment)
    {
        // Not supported, called from Indian form
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalId</Name>
				<Source><![CDATA[
    public LedgerJournalId parmLedgerJournalId(LedgerJournalId _ledgerJournalId = ledgerEntryJournal.JournalNumber)
    {
        // This method is obsolete and has been replaced with the parmJournalNumber method.
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostedInterCompanyWHT_IN</Name>
				<Source><![CDATA[
    public TaxWithholdAmountCur parmPostedInterCompanyWHT_IN(TaxWithholdAmountCur _postedWHT = postedInterCompanyWHT)
    {
        // Not supported
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdTrans_IN</Name>
				<Source><![CDATA[
    public TmpTaxWithholdTransInterCompany_IN parmTaxWithholdTrans_IN(TmpTaxWithholdTransInterCompany_IN _taxWithholdTransInterCompany = taxWithholdTransInterCompany)
    {
        // Not supported
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>