<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCatchWeightTagCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSCatchWeightTagCreator</c> class is responsible for creation of catch weight tags.
/// </summary>
public final class WHSCatchWeightTagCreator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of <c>WHSCatchWeightTagCreator</c>.
    /// </summary>
    /// <returns>Instance of <c>WHSCatchWeightTagCreator</c></returns>
    [Hookable(false)]
    public static WHSCatchWeightTagCreator construct()
    {
        return new WHSCatchWeightTagCreator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCatchWeightTags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates catch weight tags.
    /// </summary>
    /// <param name = "_tagSource">
    /// An instance of <c>WHSCatchWeightTagCreationSource</c> to create tags
    /// </param>
    /// <param name = "_parameters">
    /// An instance of <c>WHSCatchWeightTagCreationParameters</c> with the required parameter to generate the tags.
    /// </param>
    [Hookable(false)]
    public WHSCatchWeightTagCollection createCatchWeightTags(WHSCatchWeightTagCreationSource _tagSource,
                                                               WHSCatchWeightTagCreationMethod _parameters)
    {
        this.assertNumberOfTagsGreaterThanZero(_parameters.parmNumberOfTags());

        NumberSeq numSeq;
        if (_parameters.parmUseNumberSeqForTagCreation())
        {
            numSeq = NumberSeq::newGetNum(WHSParameters::numRefWHSCatchWeightTagNumber());
        }
        else
        {
            this.assertTagNumberIsNotEmpty(_parameters.parmTagNumber());
        }
                
        // Calculate weight per tag
        UnitOfMeasureDecimalPrecision decimals = InventTable::inventDecimals(_tagSource.parmItemId());
        WHSCapturedWeight tagWeight;
        
        if (_parameters.parmNumberOfTags() > 1)
        {
            tagWeight = WHSCatchWeightHelper::calculateAverageWeight(1, _parameters.parmNumberOfTags(), _parameters.parmTotalCapturedWeight(), decimals);
        }
        else
        {
            tagWeight = _parameters.parmTotalCapturedWeight();
        }

        _tagSource.transformInventDimForTagCreation();

        this.assertInventDimIsNotBlank(_tagSource.parmInventDim());
        
        WHSCatchWeightTagCollection tagNumberCollection = new WHSCatchWeightTagCollection();

        ttsbegin;
        for (int i = 1; i <= _parameters.parmNumberOfTags(); i++)
        {
            WHSCatchWeightTagNumber tagNumber = _parameters.parmUseNumberSeqForTagCreation() ? numSeq.num() : _parameters.parmTagNumber();
            this.assertTagNumberDoesNotExists(tagNumber);

            WHSCatchWeightTag catchWeightTag = this.create(_tagSource, tagNumber, tagWeight);

            tagNumberCollection.insertCurrentTagNumberIntoList(catchWeightTag);
        }
        ttscommit;

        return tagNumberCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a catch weight tag.
    /// </summary>
    /// <param name = "_tagSource">
    /// An instance of <c>WHSCatchWeightTagCreationSource</c> class to create tag.
    /// </param>
    /// <param name = "_tagNumber">
    /// Tag number.
    /// </param>
    /// <param name = "_capturedWeight">
    /// Captured weight of the tag.
    /// </param>
    private WHSCatchWeightTag create(WHSCatchWeightTagCreationSource _tagSource,
                                     WHSCatchWeightTagNumber _tagNumber,
                                     WHSCapturedWeight _capturedWeight)
    {
        ttsbegin;

        WHSCatchWeightTag catchWeightTag;

        this.initializeFromSource(catchWeightTag, _tagSource);
        catchWeightTag.TagNumber = _tagNumber;
        catchWeightTag.CapturedWeight = _capturedWeight;
        catchWeightTag.insert();

        this.tagRegistered(catchWeightTag, _tagSource.parmInventTransId());

        ttscommit;

        return catchWeightTag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromSource</Name>
				<Source><![CDATA[
    private void initializeFromSource(WHSCatchWeightTag _tag, WHSCatchWeightTagCreationSource _tagSource)
    {
        _tag.ItemId = _tagSource.parmItemId();
        _tag.InventDimId = WHSCatchWeightTag::inventDimWithTagSpecificDimensions(_tagSource.parmInventDim(), _tag.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tagRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Register a tag registered event post tag creation.
    /// </summary>
    /// <param name = "_tag">A <c>WHSCatchWeightTag</c> buffer.</param>
    /// <param name = "_inventTransId">Reference to the inventory transaction.</param>
    private void tagRegistered(WHSCatchWeightTag _tag, InventTransId _inventTransId)
    {
        if (_inventTransId)
        {
            WHSCatchWeightTagEventRegistration tagRegistration = WHSCatchWeightTagEventRegistration::instantiateFromTagRegistration(
                                                                                    WHSCatchWeightTagRegistrationEvent::TagRegistered);
            tagRegistration.parmInventTransId(_inventTransId);
            tagRegistration.registerEvent(_tag);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertNumberOfTagsGreaterThanZero</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures the total number of tags requested to be created is non-zero value.
    /// </summary>
    /// <param name = "_totalTagUnits">No of tags requested to be created.</param>
    private void assertNumberOfTagsGreaterThanZero(int _totalTagUnits)
    {
        if (_totalTagUnits <= 0)
        {
            throw error("@WAX:ErrorTotalTagUnitsCannotBeZeroOrNegative");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertTagNumberIsNotEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures tag number is not duplicate.
    /// </summary>
    /// <param name = "_tagNumber">Tag number to validate.</param>
    private void assertTagNumberIsNotEmpty(WHSCatchWeightTagNumber _tagNumber)
    {
        if (!_tagNumber)
        {
            throw error("@WAX:ErrorTagNumberCannotBeEmpty");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertTagNumberDoesNotExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures duplicate tags are not created with same tag number.
    /// </summary>
    /// <param name = "_tagNumber">Tag number to validate.</param>
    private void assertTagNumberDoesNotExists(WHSCatchWeightTagNumber _tagNumber)
    {
        if (WHSCatchWeightTag::exist(_tagNumber))
        {
            throw error(strFmt("@WAX:ErrorTagNumberCannotBeDuplicated", _tagNumber));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertInventDimIsNotBlank</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures tags are not creates blank inventory dimensions
    /// </summary>
    /// <param name = "_inventDim">Inventory dimensions to validate.</param>
    private void assertInventDimIsNotBlank(InventDim _inventDim)
    {
        if (!_inventDim.InventDimId || _inventDim.InventDimId == InventDim::inventDimIdBlank())
        {
            throw error("@WAX:ErrorInventDimIdCannotBeBlank");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>