<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatCXMLPurchRequestMaintain</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CatCXMLPurchRequestMaintain</c> class contains all the methods related to maintaining the Purch request
/// </summary>
internal class CatCXMLPurchRequestMaintain
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if there are any new Vendor acknowledged records in <c>cxmlPurchRequestHistory</c>
    /// </summary>
    /// <param name = "_purchID">
    /// The Purchase ID.
    /// </param>
    /// <returns>
    /// Return true if no new records, else false
    /// </returns>
    private static boolean checkHistory(PurchId _purchID)
    {
        CatCXMLPurchRequestHistory cxmlPurchRequestHistory;

        //See if there are any acknowledged records.
        select count(RecId) from cxmlPurchRequestHistory
            where cxmlPurchRequestHistory.PurchId == _purchID
            && cxmlPurchRequestHistory.PurchReqMessageType == PurchReqMessageType::New
            && cxmlPurchRequestHistory.PurchReqVendStatus == PurchReqVendStatus::VendorAcknowledged;

        if (CatCXMLPurchRequestConsiderUpdateNotSentRequestsAsNewFlight::instance().isEnabled())
        {
            if (cxmlPurchRequestHistory.RecId == 1)
            {
                return false;
            }
            else
            {
                return true;
            }
        }
        else
        {
            if (cxmlPurchRequestHistory.RecId == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enablePOSend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable the sending of Purchase order by setting the cxmlorderenable to true
    /// </summary>
    /// <param name = "_purchId">
    /// The Purchase ID
    /// </param>
    public static void enablePOSend(PurchId _purchId)
    {
        PurchTable  purchTable;
        VendTable   vendTable;
        boolean     orderEnable;

        purchTable = PurchTable::find(_purchId, true);
        vendTable = VendTable::find(purchTable.OrderAccount);

        If (vendTable.CXMLOrderEnable == TRUE)
        {
            orderEnable = TRUE;
            purchTable.updateCXMLOrderEnable(orderEnable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disablePOSend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disable the sending of Purchase order by setting the cxmlorderenable to false
    /// </summary>
    /// <param name = "_purchId">
    /// The Purchase ID
    /// </param>
    public static void disablePOSend(PurchId _purchId)
    {
        PurchTable  purchTable;
        VendTable   vendTable;
        boolean     orderEnable;

        purchTable = PurchTable::find(_purchId,true);
        vendTable = VendTable::find(purchTable.OrderAccount);

        If (vendTable.CXMLOrderEnable == TRUE)
        {
            orderEnable = FALSE;
            purchTable.updateCXMLOrderEnable(orderEnable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCatProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the external catalog setup details
    /// </summary>
    /// <param name = "_vendAccount">
    /// The vendor account number
    /// </param>
    /// <param name = "_catproperty">
    /// The Catalog property name
    /// </param>
    /// <returns>
    /// The catalog property value.
    /// </returns>
    private static CatPropertyValue findCatProperty(VendAccount _vendAccount, CatPropertyName _catproperty)
    {
        //External catalog related records.
        CatExternalCatalog              catExternalCatalog;
        CatExternalCatalogVendor        catExternalCatalogVendor;
        CatExternalCatalogProperties    catExternalCatalogProperties;
        DataAreaId                      currentDataArea;

        currentDataArea = curExt();

        //Get the external catalog setup details.
        select firstonly * from catExternalCatalogVendor
            where catExternalCatalogVendor.VendorDataAreaId == currentDataArea
            && catExternalCatalogVendor.VendorAccountNumber == _vendAccount
        join firstonly Name from catExternalCatalog
            where catExternalCatalog.RecId == catExternalCatalogVendor.ExternalCatalog
        join firstonly Name, Value from catExternalCatalogProperties
            where catExternalCatalogProperties.ExternalCatalog == catExternalCatalog.RecId
            && catExternalCatalogProperties.Name == _catproperty;

        return catExternalCatalogProperties.editCatPropertyName(false, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the vendor is enabled for sending PO but the ENABLEMANUALPO is set then reset the flag to avoid manual purchase orders
    ///  being sent. They can be flagged manually by the user if needed.
    /// </summary>
    /// <param name = "_vendAccount">
    /// The vendor account number
    /// </param>
    /// <param name = "_orderEnable">
    /// The order enable flag
    /// </param>
    /// <returns>
    /// the cxml order enable flag
    /// </returns>
    public static CXMLOrderEnable enableOrder(VendAccount _vendAccount, CXMLOrderEnable _orderEnable)
    {
        CatPropertyValue                catPropertyValue;
        CXMLOrderEnable                 vendorOrder;

        vendorOrder = _orderEnable;

        catPropertyValue = CatCXMLPurchRequestMaintain::findCatProperty(_vendAccount, 'ENABLEMANUALPO');

        if (catPropertyValue != '')
        {
            if (vendorOrder == TRUE)
            {
                if (catPropertyValue == 'TRUE' || catPropertyValue == 'true')
                {
                    _orderEnable = TRUE;
                }
                else
                {
                    _orderEnable = FALSE;
                }
            }
        }
        else
        {
            _orderEnable = FALSE;
        }

        return _orderEnable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>punchOutPOOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the vendor is enabled for sending PO but the PUNCHOUTPOONLY is set then reset the flag to avoid manual purchase orders
    /// being sent. They can be flagged manually by the user if needed.
    /// </summary>
    /// <param name = "_vendAccount">
    /// The vendor account number
    /// </param>
    /// <param name = "_lineType">
    /// The Purch req line type
    /// </param>
    /// <returns>
    /// the cxml order enable flag
    /// </returns>
    public static CXMLOrderEnable punchOutPOOnly(VendAccount _vendAccount, PurchReqLineType _lineType)
    {
        CatPropertyValue                catPropertyValue;
        CXMLOrderEnable                 orderEnable;
        
        catPropertyValue = CatCXMLPurchRequestMaintain::findCatProperty(_vendAccount, 'PUNCHOUTPOONLY');
        orderEnable = VendTable::find(_vendAccount).CXMLOrderEnable;

        if (catPropertyValue != '')
        {
            if (catPropertyValue == 'TRUE' || catPropertyValue == 'true')
            {
                if (_lineType == PurchReqLineType::External)
                {
                    orderEnable = TRUE;
                }
                else
                {
                    orderEnable = FALSE;
                }
            }
        }

        return orderEnable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markForDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark the Purchase record for delete
    /// </summary>
    /// <param name = "_purchID">
    /// An instance of <c>PurchId</c> data type
    /// </param>
    public static void markForDelete(PurchId _purchID)
    {
        PurchTableVersion           purchTableVersion;
        CatCXMLPurchRequestHistory  cxmlPurchRequestHistory, cxmPurchRequestHistoryDel;

        ttsBegin;

        //find the latest history record to update to being a delete message.
        cxmlPurchRequestHistory = CatCXMLPurchRequestHistory::findByCurrent(_purchID,true);

        purchTableVersion = PurchTableVersion::find(cXMLPurchRequestHistory.PurchTableVersion);

        //If the last update was sent and acknowledged then we need to send a new request with the delete.
        if (cxmlPurchRequestHistory.PurchReqSendStatus == PurchReqSendStatus::Sent &&
            cxmlPurchRequestHistory.PurchReqVendStatus == PurchReqVendStatus::VendorAcknowledged)
        {

            cxmPurchRequestHistoryDel.initValue();
            cxmPurchRequestHistoryDel.PurchId = cxmlPurchRequestHistory.PurchId;
            cxmPurchRequestHistoryDel.PurchTableVersion = cxmlPurchRequestHistory.PurchTableVersion;
            cxmPurchRequestHistoryDel.PurchaseOrderId = cxmlPurchRequestHistory.PurchaseOrderId;
            cxmPurchRequestHistoryDel.VendPurchOrderJour = cxmlPurchRequestHistory.VendPurchOrderJour;
            cxmPurchRequestHistoryDel.PurchOrderDocNum = cxmlPurchRequestHistory.PurchOrderDocNum;
            cxmPurchRequestHistoryDel.PurchReqDateTime = purchTableVersion.VersionDateTime;
            cxmPurchRequestHistoryDel.VendorDataAreaId = curext();

            cxmPurchRequestHistoryDel.PurchReqMessageType = PurchReqMessageType::Delete;

            //As this is a delete reset the request to waiting.
            CatCXMLPurchRequestMaintain::upatePRStatus(_purchID);

            //Update the existing lines to be archived.
            CatCXMLPurchRequestMaintain::updatePRHStatus(_purchID);

            //The status will be set to waiting to get picked up in the next batch run.
            cxmPurchRequestHistoryDel.PurchReqSendStatus = PurchReqSendStatus::Waiting;
            cxmPurchRequestHistoryDel.PurchReqStatusChangedDateTime = DateTimeUtil::getSystemDateTime();
            cxmPurchRequestHistoryDel.PurchReqVendStatus = PurchReqVendStatus::Waiting;

            cxmPurchRequestHistoryDel.insert();

        }

        else
        {
            //As this is a delete reset the request to waiting.
            CatCXMLPurchRequestMaintain::upatePRStatus(_purchID);

            cxmlPurchRequestHistory.PurchReqMessageType = PurchReqMessageType::Delete;
            cxmlPurchRequestHistory.PurchReqStatusChangedDateTime = DateTimeUtil::getSystemDateTime();
            cxmlPurchRequestHistory.PurchReqSendStatus = PurchReqSendStatus::Waiting;
            cxmlPurchRequestHistory.PurchReqVendStatus = PurchReqVendStatus::Waiting;
            cxmlPurchRequestHistory.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveXmlToFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save the xml to a file
    /// </summary>
    /// <param name = "filename">
    /// The file name
    /// </param>
    /// <param name = "xml">
    /// The xml to be saved
    /// </param>
    public static void saveXmlToFile(str filename, str xml)
    {
        System.Xml.XmlReaderSettings    readerSettings;
        System.Xml.XmlWriterSettings    writerSettings;
        const str                       encoding = 'UTF-8';

        new FileIOPermission(filename,'W').demand();

        //Setup reader settings
        readerSettings = new System.Xml.XmlReaderSettings();
        //As the cXML files use DTD's then we needs to turn this parsing on otherwise the reader will fail.
        readerSettings.set_DtdProcessing(System.Xml.DtdProcessing::Parse);

        //Setup reader. Read the string parsed in and then load it into the XMLReader.
        using(System.IO.StringReader stringReader = new System.IO.StringReader(xml))
        {
            using(System.Xml.XmlReader reader = System.Xml.XmlReader::Create(stringReader,readerSettings))
            {
                reader.Read();
                
                //Setup writer settings.
                writerSettings = new System.Xml.XmlWriterSettings();
                writerSettings.set_Indent(true);
                writerSettings.set_Encoding(System.Text.Encoding::GetEncoding(encoding));

                //Setup writer
                using(System.Xml.XmlWriter writer = System.Xml.XmlWriter::Create(filename, writerSettings))
                {
                    //Go through the notes.
                    while (reader.get_NodeType() != System.Xml.XmlNodeType::None)
                        writer.WriteNode(reader, false);
                }
            }
        }
       
    }

]]></Source>
			</Method>
			<Method>
				<Name>upatePRStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the Purchase record status
    /// </summary>
    /// <param name = "_purchID">
    /// An instance of <c>PurchId</c> data type
    /// </param>
    public static void upatePRStatus(PurchId _purchID)
    {
        CatCXMLPurchRequest        cxmlPurchRequest;

        ttsBegin;

        //This sets the cxMlPurchRequest to waiting if the Purchase order was reconfirmed
        cxmlPurchRequest = CatCXMLPurchRequest::findByPurchId(_purchID, true);
        cxmlPurchRequest.PurchReqSendStatus = PurchReqSendStatus::Waiting;
        cxmlPurchRequest.PurchReqVendStatus = PurchReqVendStatus::Waiting;

        cxmlPurchRequest.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrderer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the orderer
    /// </summary>
    /// <param name = "_purchId">
    /// An instance of <c>PurchId</c> data type
    /// </param>
    public static void updateOrderer(PurchId _purchId)
    {
        CatCXMLPurchRequest        cxmlPurchRequest;

        ttsBegin;

        //This sets the cxMlPurchRequest to waiting if the Purchase order was reconfirmed
        cxmlPurchRequest = CatCXMLPurchRequest::findByPurchId(_purchID, true);

        //Update the Orderer in case it was changed before the next confirmation.
        cxmlPurchRequest.PurchPlacer = purchTable::find(_purchID).WorkerPurchPlacer;

        cxmlPurchRequest.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrderJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the Order Jour
    /// </summary>
    /// <param name = "_vendPurchOrderJour">
    /// An instance of <c>VendPurchOrderJour</c> data type
    /// </param>
    public static void updateOrderJour(VendPurchOrderJour _vendPurchOrderJour)
    {
        CatCXMLPurchRequest         cxmlPurchRequest;
        CatCXMLPurchRequestHistory  cxmlPurchRequestHistory;
        PurchTable                  purchTable;
        PurchTableVersion           purchTableVersion;

        //Get the related verion record.
        purchTableVersion = PurchTableVersion::find(_vendPurchOrderJour.PurchTableVersion);
        purchTable = purchTable::find(_vendPurchOrderJour.PurchId);

        if (purchTable.CXMLOrderEnable == NoYes::Yes)
        {
            
            CatCXMLPurchRequestMaintain::createCatCXMLPurchRequestRecord(cxmlPurchRequest, purchTable, purchTableVersion, _vendPurchOrderJour);

            ttsBegin;
            //This will get hit each time  first time there is a VendPurchOrderJour is created
            //so create the initial cXMLPurchRequestHistory record.
            cxmlPurchRequestHistory.initValue();
            cxmlPurchRequestHistory.PurchId             = purchTableVersion.PurchId;
            cxmlPurchRequestHistory.PurchTableVersion   = purchTableVersion.RecId;
            cxmlPurchRequestHistory.PurchaseOrderId     = _vendPurchOrderJour.PurchaseOrderId;
            cxmlPurchRequestHistory.VendPurchOrderJour  = _vendPurchOrderJour.RecId;
            cxmlPurchRequestHistory.PurchOrderDocNum    = _vendPurchOrderJour.PurchOrderDocNum;
            cxmlPurchRequestHistory.PurchReqDateTime    = purchTableVersion.VersionDateTime;
            cxmlPurchRequestHistory.VendorDataAreaId    = curext();

            //Update order
            CatCXMLPurchRequestMaintain::updateOrderer(_vendPurchOrderJour.PurchId);

            //If this is the first history entry for this purchID then set the type as new. else update
            if (!(CatCXMLPurchRequestHistory::findByPurchId(purchTableVersion.PurchId).RecId))
            {
                cxmlPurchRequestHistory.PurchReqMessageType = PurchReqMessageType::New;
            }
            else
            {
                //Need to check if any of the prior messages have been sent as it might not be an update it should still be new.
                if (CatCXMLPurchRequestMaintain::checkHistory(_vendPurchOrderJour.PurchId))
                {
                    cxmlPurchRequestHistory.PurchReqMessageType = PurchReqMessageType::New;
                }
                else
                {
                    cxmlPurchRequestHistory.PurchReqMessageType = PurchReqMessageType::Update;
                }

                //If this is an update reset the request to waiting.
                CatCXMLPurchRequestMaintain::upatePRStatus(_vendPurchOrderJour.PurchId);
                //Update the existing lines to be archived.
                CatCXMLPurchRequestMaintain::updatePRHStatus(_vendPurchOrderJour.PurchId);
            }

            //The status will be set to waiting to get picked up in the next batch run.
            cxmlPurchRequestHistory.PurchReqSendStatus = PurchReqSendStatus::Waiting;
            cxmlPurchRequestHistory.PurchReqStatusChangedDateTime = DateTimeUtil::getSystemDateTime();
            cxmlPurchRequestHistory.PurchReqVendStatus = PurchReqVendStatus::Waiting;

            cxmlPurchRequestHistory.insert();

            ttsCommit;

        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>createCatCXMLPurchRequestRecord</Name>
				<Source><![CDATA[
    private static void createCatCXMLPurchRequestRecord(CatCXMLPurchRequest         cxmlPurchRequest
                                                       ,PurchTable                  purchTable
                                                       ,PurchTableVersion           purchTableVersion
                                                       ,VendPurchOrderJour          _vendPurchOrderJour)
    {
        
        if(CatCXMLPurchRequest::findByPurchId(_vendPurchOrderJour.PurchId).RecId == 0)
        {
            ttsbegin;

            cxmlPurchRequest.initValue();
            cxmlPurchRequest.PurchId            = purchTableVersion.PurchId;
            cxmlPurchRequest.VendAccount        = purchTable.OrderAccount;
            cxmlPurchRequest.PurchPlacer        = purchTable.WorkerPurchPlacer;
            cxmlPurchRequest.PurchReqSendStatus = PurchReqSendStatus::Waiting;
            cxmlPurchRequest.PurchReqVendStatus = PurchReqVendStatus::Waiting;
            cxmlPurchRequest.VendorDataAreaId   = curext();
            cxmlPurchRequest.insert();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePRHStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the Purch request history status
    /// </summary>
    /// <param name = "_purchID">
    /// An instance of <c>PurchId</c> data type
    /// </param>
    public static void updatePRHStatus(PurchId _purchID)
    {
        PurchTableVersion           purchTableVersion;
        CatCXMLPurchRequestHistory  cxmlPurchRequestHistory;

        //find all the history records for the PurchId and update the Archive status.
        while select cxmlPurchRequestHistory
            where cxmlPurchRequestHistory.PurchId == _purchID
        {
            //Find the version to check if it's been archived.
            purchTableVersion = PurchTableVersion::find(cxmlPurchRequestHistory.PurchTableVersion);

            if (purchTableVersion.IsArchived)
            {
                ttsBegin;

                cxmlPurchRequestHistory.selectForUpdate(true);
                cxmlPurchRequestHistory.PurchReqDateTime = purchTableVersion.VersionDateTime;
                cxmlPurchRequestHistory.PurchReqSendStatus = PurchReqSendStatus::Archived;
                cxmlPurchRequestHistory.PurchReqStatusChangedDateTime = DateTimeUtil::getSystemDateTime();
                cxmlPurchRequestHistory.update();

                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCatalogDefaults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the catalog default properties
    /// </summary>
    /// <param name = "_catRecID">
    /// The catalog rec ID
    /// </param>
    public static void populateCatalogDefaults(RecId _catRecID)
    {

        if (_catRecID != 0)
        {
            CatCXMLPopulateCatalogProperties::main(_catRecID);
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>