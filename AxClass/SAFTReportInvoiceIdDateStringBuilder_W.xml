<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SAFTReportInvoiceIdDateStringBuilder_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Text;

internal final class SAFTReportInvoiceIdDateStringBuilder_W
{
    internal const str DefaultItemSeparator = ', ';
    internal const str DefaultDateFormat = 'yyyy-MM-dd';
    internal const boolean DefaultIgnoreEmptyInvoiceId = true;

    private StringBuilder invoiceIds = new StringBuilder();
    private StringBuilder invoiceDates = new StringBuilder();
    private str itemSeparator = DefaultItemSeparator;
    private str dateFormat = DefaultDateFormat;
    private boolean ignoreEmptyInvoiceId = DefaultIgnoreEmptyInvoiceId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>append</Name>
				<Source><![CDATA[
    internal void append(str _invoiceId, System.DateTime _invoiceDate)
    {
        if (ignoreEmptyInvoiceId && !_invoiceId)
        {
            return;
        }

        if (invoiceIds.Length)
        {
            invoiceIds.Append(itemSeparator);
            invoiceDates.Append(itemSeparator);
        }

        invoiceIds.Append(_invoiceId);
        invoiceDates.Append(_invoiceDate.ToString(dateFormat));
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendContainer</Name>
				<Source><![CDATA[
    internal void appendContainer(container _invoiceIdDate)
    {
        InvoiceId invoiceId;
        InvoiceDate invoiceDate;

        [invoiceId, invoiceDate] = _invoiceIdDate;

        this.append(invoiceId, invoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendInvoiceData</Name>
				<Source><![CDATA[
    internal void appendInvoiceData(SAFTInvoiceData_W _invoiceData)
    {
        this.append(_invoiceData.parmInvoiceId(), _invoiceData.parmInvoiceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendEnumerator</Name>
				<Source><![CDATA[
    private void appendEnumerator(Enumerator _enumerator)
    {
        if (!_enumerator.moveNext())
        {
            return;
        }

        anytype item = _enumerator.current();

        switch (typeOf(item))
        {
            case Types::Container:
                this.appendContainer(item);
                this.appendContainersEnumerator(_enumerator);
                return;

            case Types::Class:
                if (classIdGet(item) == classNum(SAFTInvoiceData_W))
                {
                    this.appendInvoiceData(item);
                    this.appendInvoiceDataEnumerator(_enumerator);
                    return;
                }
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendContainersEnumerator</Name>
				<Source><![CDATA[
    private void appendContainersEnumerator(Enumerator _enumerator)
    {
        while (_enumerator.moveNext())
        {
            this.appendContainer(_enumerator.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendInvoiceDataEnumerator</Name>
				<Source><![CDATA[
    private void appendInvoiceDataEnumerator(Enumerator _enumerator)
    {
        while (_enumerator.moveNext())
        {
            this.appendInvoiceData(_enumerator.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceIds</Name>
				<Source><![CDATA[
    internal str getInvoiceIds()
    {
        return invoiceIds.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDates</Name>
				<Source><![CDATA[
    internal str getInvoiceDates()
    {
        return invoiceDates.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceIdDateStringContainer</Name>
				<Source><![CDATA[
    internal container getInvoiceIdDateStringContainer()
    {
        if (this.isEmpty())
        {
            return conNull();
        }

        return [this.getInvoiceIds(), this.getInvoiceDates()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmpty</Name>
				<Source><![CDATA[
    internal boolean isEmpty()
    {
        return invoiceIds.Length == 0 && invoiceDates.Length == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemSeparator</Name>
				<Source><![CDATA[
    internal str parmItemSeparator(str _itemSeparator = itemSeparator)
    {
        itemSeparator = _itemSeparator;

        return itemSeparator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateFormat</Name>
				<Source><![CDATA[
    internal str parmDateFormat(str _dateFormat = dateFormat)
    {
        dateFormat = _dateFormat;

        return dateFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIgnoreEmptyInvoiceId</Name>
				<Source><![CDATA[
    internal boolean parmIgnoreEmptyInvoiceId(boolean _ignoreEmptyInvoiceId = ignoreEmptyInvoiceId)
    {
        ignoreEmptyInvoiceId = _ignoreEmptyInvoiceId;

        return ignoreEmptyInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static SAFTReportInvoiceIdDateStringBuilder_W construct()
    {
        return new SAFTReportInvoiceIdDateStringBuilder_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    internal static SAFTReportInvoiceIdDateStringBuilder_W newFromParameters(
        str _itemSeparator = DefaultItemSeparator,
        str _dateFormat = DefaultDateFormat,
        boolean _ignoreEmptyInvoiceId = DefaultIgnoreEmptyInvoiceId)
    {
        SAFTReportInvoiceIdDateStringBuilder_W instance = SAFTReportInvoiceIdDateStringBuilder_W::construct();

        instance.parmItemSeparator(_itemSeparator);
        instance.parmDateFormat(_dateFormat);
        instance.parmIgnoreEmptyInvoiceId(_ignoreEmptyInvoiceId);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromEnumerator</Name>
				<Source><![CDATA[
    internal static SAFTReportInvoiceIdDateStringBuilder_W newFromEnumerator(
        Enumerator _enumerator,
        str _itemSeparator = DefaultItemSeparator,
        str _dateFormat = DefaultDateFormat,
        boolean _ignoreEmptyInvoiceId = DefaultIgnoreEmptyInvoiceId)
    {
        if (!_enumerator)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        SAFTReportInvoiceIdDateStringBuilder_W instance = SAFTReportInvoiceIdDateStringBuilder_W::newFromParameters(
            _itemSeparator,
            _dateFormat,
            _ignoreEmptyInvoiceId);

        instance.appendEnumerator(_enumerator);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInvoiceIdDateSet</Name>
				<Source><![CDATA[
    internal static SAFTReportInvoiceIdDateStringBuilder_W newFromInvoiceIdDateSet(
        Set _invoiceIdDates,
        str _itemSeparator = DefaultItemSeparator,
        str _dateFormat = DefaultDateFormat,
        boolean _ignoreEmptyInvoiceId = DefaultIgnoreEmptyInvoiceId)
    {
        if (!_invoiceIdDates)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return SAFTReportInvoiceIdDateStringBuilder_W::newFromEnumerator(
            _invoiceIdDates.getEnumerator(),
            _itemSeparator,
            _dateFormat,
            _ignoreEmptyInvoiceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInvoiceIdDateList</Name>
				<Source><![CDATA[
    internal static SAFTReportInvoiceIdDateStringBuilder_W newFromInvoiceIdDateList(
        List _invoiceIdDates,
        str _itemSeparator = DefaultItemSeparator,
        str _dateFormat = DefaultDateFormat,
        boolean _ignoreEmptyInvoiceId = DefaultIgnoreEmptyInvoiceId)
    {
        if (!_invoiceIdDates)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return SAFTReportInvoiceIdDateStringBuilder_W::newFromEnumerator(
            _invoiceIdDates.getEnumerator(),
            _itemSeparator,
            _dateFormat,
            _ignoreEmptyInvoiceId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>