<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerExchAdjPostingCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerExchAdjPostingCache</c> class provides the caching of configuration of foreign currency revaluation posting ledger dimension.
/// </summary>
public class LedgerExchAdjPostingCache
{
    private const GlobalObjectCacheScope CurrencyAccountLedgerDimensionKey = 'LedgerExchAdjPostingCache_CALD';
    private const GlobalObjectCacheScope CurrencyAccountLedgerDefaultLevel = 'LedgerExchAdjPostingCache_DL';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertLedgerDimensionIntoCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts retrieved ledger dimension into the cache
    /// </summary>
    /// <param name = "_cacheParameters">A search parameter used to retrieve the posting ledger dimension</param>
    /// <param name = "_cacheLedgerDimension">Retrieved ledger dimension based on search parameters</param>
    [Hookable(false)]
    public static void insertLedgerDimensionIntoCache(LedgerExchAdjPostingSearchParameters _cacheParameters, LedgerDimensionDefaultAccount _cacheLedgerDimension)
    {
        container key = LedgerExchAdjPostingCache::constructKeyFromParameters(_cacheParameters);

        classfactory.globalObjectCache().insert(CurrencyAccountLedgerDimensionKey, key, [_cacheLedgerDimension]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDefaultLevelIntoCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts new lowest default level into the cache
    /// </summary>
    /// <param name = "_cacheLedger">Current ledger</param>
    /// <param name = "_cacheNewDefaultLevel">New lowest default level</param>
    [Hookable(false)]
    public static void insertDefaultLevelIntoCache(LedgerRecId _cacheLedger, LedgerExchAdjPostingDefaultLevel _cacheNewDefaultLevel)
    {
        classfactory.globalObjectCache().insert(CurrencyAccountLedgerDefaultLevel, [_cacheLedger], [_cacheNewDefaultLevel]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the cache
    /// </summary>
    [Hookable(false)]
    public static void clearCache()
    {
        classfactory.globalObjectCache().clear(CurrencyAccountLedgerDimensionKey);
        classfactory.globalObjectCache().clear(CurrencyAccountLedgerDefaultLevel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionFromCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cached ledger dimension based on search parameter
    /// </summary>
    /// <param name = "_cacheParameters">A search parameter used to cache the posting ledger dimension</param>
    /// <returns>The cached posting ledger dimension for the search parameter</returns>
    [Hookable(false)]
    public static container getLedgerDimensionFromCache(LedgerExchAdjPostingSearchParameters _cacheParameters)
    {
        container key = LedgerExchAdjPostingCache::constructKeyFromParameters(_cacheParameters);

        return classfactory.globalObjectCache().find(CurrencyAccountLedgerDimensionKey, key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultLevelFromCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves current lowest default level from the cache
    /// </summary>
    /// <param name = "_cacheLedger">Current ledger</param>
    [Hookable(false)]
    public static container getDefaultLevelFromCache(LedgerRecId _cacheLedger)
    {
        return classfactory.globalObjectCache().find(CurrencyAccountLedgerDefaultLevel, [_cacheLedger]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructKeyFromParameters</Name>
				<Source><![CDATA[
    private static container constructKeyFromParameters(LedgerExchAdjPostingSearchParameters _cacheParameters)
    {
        str key = '';

        // Create fixed key part - Use a string for the key since at most 5 elements can exist in the key container
        key += curext(); // Global object cache is shared between legal entities, so we need to track this as well.

        key += '~';
        key += int2str(enum2int(_cacheParameters.parmModule()));

        key += '~';
        key += int2str(enum2int(_cacheParameters.parmAccountType()));

        key += '~';
        key += _cacheParameters.parmCurrency();

        key += '~';
        key += _cacheParameters.parmAccountNum();

        key += '~';
        key += _cacheParameters.parmAccountGroup();

        return [key];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>