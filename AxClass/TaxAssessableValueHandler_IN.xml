<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxAssessableValueHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to calculate assessable value in transaction currency and accounting currency
/// </summary>
class TaxAssessableValueHandler_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAssessableValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value in transaction currency
    /// </summary>
    /// <param name="_assessableValueAccountingCurrency_IN">
    /// The amount in accounting currency for which Assessable Value is to be calculated in transaction currency
    /// </param>
    /// <param name="_toCurrency">
    /// The currency in which the Assessable Value should be converted
    /// </param>
    /// <param name="_exchangeRateDate">
    /// The date according to which custom import exchange rate will be fetched
    /// </param>
    /// <returns>
    /// Assessable value in transaction currency
    /// </returns>
    public static AmountCur calcAssessableValue(AmountCur _assessableValueAccountingCurrency_IN, CurrencyCode _toCurrency, date _exchangeRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        CurrencyExchangeHelper  currencyExchangeHelper;
        LedgerExtensionIN       ledgerExtensionIN;
        AmountCur               assessableValue;
        Ledger                  ledger;

        if (_toCurrency)
        {
            ledger = ledger::find(Ledger::current());
            ledgerExtensionIN = LedgerExtensionIN::findByLedger(ledger.Recid);
            currencyExchangeHelper = CurrencyExchangeHelper::construct();
            currencyExchangeHelper.parmExchangeDate(_exchangeRateDate);
            currencyExchangeHelper.parmLedgerRecId(ledger.RecId);
            currencyExchangeHelper.parmExchangeRateTypeRecId(ledgerExtensionIN.CustomsImportExchangeRateType);
            assessableValue = currencyExchangeHelper.calculateAccountingToTransaction(_toCurrency,_assessableValueAccountingCurrency_IN,true);
        }
        else
        {
            assessableValue = _assessableValueAccountingCurrency_IN;
        }

        return assessableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAssessableValueAccountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value in accounting currency.
    /// </summary>
    /// <param name="_assessableValue_IN">
    /// The amount in transaction currency for which Assessable Value is to be calculated in accounting currency
    /// </param>
    /// <param name="_fromCurrency">
    /// The currency from which the Assessable Value should be converted into accounting currency
    /// </param>
    /// <param name="_exchangeRateDate">
    /// The date according to which custom import exchange rate will be fetched
    /// </param>
    /// <returns>
    /// Returns the value of Assessable value in accounting currency
    /// </returns>
    public static AmountMST calcAssessableValueAccountingCurrency(AmountCur _assessableValue_IN, CurrencyCode _fromCurrency, date _exchangeRateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        CurrencyExchangeHelper  currencyExchangeHelper;
        LedgerExtensionIN       ledgerExtensionIN;
        AmountMST               assessableValueAccountingCurrency;
        Ledger                  ledger;

        if (_fromCurrency)
        {
            ledger = ledger::find(Ledger::current());
            ledgerExtensionIN = LedgerExtensionIN::findByLedger(ledger.Recid);
            currencyExchangeHelper = CurrencyExchangeHelper::construct();
            currencyExchangeHelper.parmExchangeDate(_exchangeRateDate);
            currencyExchangeHelper.parmLedgerRecId(ledger.RecId);
            currencyExchangeHelper.parmExchangeRateTypeRecId(ledgerExtensionIN.CustomsImportExchangeRateType);
            assessableValueAccountingCurrency = currencyExchangeHelper.calculateTransactionToAccounting(_fromCurrency, _assessableValue_IN, true);
        }
        else
        {
            assessableValueAccountingCurrency = _assessableValue_IN;
        }

        return assessableValueAccountingCurrency;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>