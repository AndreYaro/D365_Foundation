<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalFormTransProd</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdJournalFormTransProd extends ProdJournalFormTrans
{
    ProdJournalProd             prodJournalProd;
    FormFunctionButtonControl   ctrlPickingList;
    PdsCWFormCtrl               cwFormCtrl;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowDimEdit</Name>
				<Source><![CDATA[
    boolean allowDimEdit()
    {
        if (prodJournalProd.isInventReturn())
        {
            return true;
        }
        if (prodJournalProd.isCoBy())
        {
            return !prodJournalProd.pmfProdCoBy().mandatoryRegister();
        }
        return !prodJournalProd.prodTable().mandatoryRegister();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGoodQuantityUnitDecimals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates number or decimal digits in Good Quantity <c>fieldModifiedQtyGood</c>.
    /// </summary>
    private boolean checkGoodQuantityUnitDecimals()    
    {
        if (numOfDec(prodJournalProd.QtyGood) > InventTable::inventDecimals(prodJournalProd.ItemId))      
        {
            return false;     
        }
    
        return true;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceActivePost</Name>
				<Source><![CDATA[
    void datasourceActivePost()
    {
        super();
        if (inventDim_ds)
        {
            inventDim_ds.allowEdit(this.allowDimEdit());
            inventDim_ds.active();
        }
        this.updateDesign(InventDimFormDesignUpdate::Active);
        if (cwFormCtrl)
        {
            cwFormCtrl.dataSourceActivePost();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceCreatePost</Name>
				<Source><![CDATA[
    void datasourceCreatePost()
    {
        inventDim_ds.allowEdit(true);
        if (prodJournalProd.InventDimId)
        {
            inventDim.data(InventDim::find(prodJournalProd.InventDimId));
            inventDim_ds.setCurrent();
        }
        if (cwFormCtrl)
        {
            cwFormCtrl.dataSourceCreatePre();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitPost</Name>
				<Source><![CDATA[
    void datasourceInitPost(JournalTransMap _journalTrans)
    {
        super(_journalTrans);
        prodJournalProd  = _journalTrans;
        if (cwFormCtrl)
        {
            cwFormCtrl.dataSourceInitPost(_journalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitValuePre</Name>
				<Source><![CDATA[
    void datasourceInitValuePre()
    {
        super();
        if (journalTableData)
            prodJournalProd.initFromProdJournalTable(journalTableData.journalTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceWritePost</Name>
				<Source><![CDATA[
    void datasourceWritePost()
    {
        super();

        if (prodJournalProd.InventDimId != inventDim.InventDimId)
        {
            inventDim.data(InventDim::find(prodJournalProd.InventDimId));
            inventDim_ds.setCurrent();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceWritePre</Name>
				<Source><![CDATA[
    void datasourceWritePre()
    {
        prodJournalProd.InventDimId    = InventDim::findOrCreate(inventDim).InventDimId;
        super();
        if (cwFormCtrl)
        {
            cwFormCtrl.dataSourceWritePre();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsActive</Name>
				<Source><![CDATA[
    protected void enableButtonsActive()
    {
        super();

        if (journalTransData)
        {
            if (ctrlPickingList)
                ctrlPickingList.enabled(prodJournalProd.ProdPickListJournalId || !journalTableData.journalTable().Posted);
            // <GEERU>
            if (ctrlReleaseCreate_RU)
            {
                ctrlReleaseCreate_RU.enabled(prodJournalProd.ProdId && prodJournalProd.prodTable().useReleaseFromProduction_RU());
            }
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedPdsCWBatchErr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the catch weight quantity error modified event passing on the catch weight form control
    /// class.
    /// </summary>
    public void fieldModifiedPdsCWBatchErr()
    {
        if (cwFormCtrl)
        {
            cwFormCtrl.fieldModified(fieldNum(ProdJournalProd,PdsCWBatchErr));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedPdsCWBatchGood</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the catch weight quantity good modified event passing on the catch weight form control
    /// class.
    /// </summary>
    public void fieldModifiedPdsCWBatchGood()
    {
        if (cwFormCtrl)
        {
            cwFormCtrl.fieldModified(fieldNum(ProdJournalProd,PdsCWBatchGood));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProdIdPost</Name>
				<Source><![CDATA[
    void fieldModifiedProdIdPost()
    {
        super();

        // if its not a batch order
        if (prodJournalProd.prodTable().ProdType != ProdType::Process)
        {
            prodJournalProd.initFromProdTable(prodJournalProd.prodTable());
        }

        if (this.allowDimEdit())
        {
            inventDim.data(InventDim::find(prodJournalProd.InventDimId));
            inventDim_ds.allowEdit(true);
        }
        else
            inventDim_ds.allowEdit(false);

        // <GEERU>
        if (ctrlReleaseCreate_RU)
        {
            ctrlReleaseCreate_RU.enabled(prodJournalProd.ProdId && prodJournalProd.prodTable().useReleaseFromProduction_RU());
        }
        // </GEERU>

        this.updateDesign(InventDimFormDesignUpdate::FieldChange);

        if (cwFormCtrl)
        {
            cwFormCtrl.fieldModified(fieldNum(ProdJournalProd,ItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQtyError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the quantity error modified event passing on the catch weight form control class.
    /// </summary>
    public void fieldModifiedQtyError()
    {
        if (cwFormCtrl)
        {
            cwFormCtrl.fieldModified(fieldNum(ProdJournalProd,QtyError));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQtyGood</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the quantity good modified event passing on the catch weight form control class.
    /// </summary>
    public void fieldModifiedQtyGood()
    {
        if (this.checkGoodQuantityUnitDecimals())        
        {
            this.fieldModifiedQtyGoodCode();
            inventDim_ds.allowEdit(this.allowDimEdit());         
        }
        else    
        {
            prodJournalProd.QtyGood = 0;
            checkFailed(strFmt('@SYS83631', InventTable::inventDecimals(prodJournalProd.ItemId)));    
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQtyGoodCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Encapsulates the code called from the method <c>fieldModifiedQtyGood</c>.
    /// </summary>
    protected void fieldModifiedQtyGoodCode()
    {
        if (cwFormCtrl)
        {
            cwFormCtrl.fieldModified(fieldNum(ProdJournalProd,QtyGood));
        }
        // <GEERU>
        if (countryRegion_RU)
        {
            this.setPhysicalStorno_RU();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    void formInitPost()
    {
        super();

        if (journalTableData)
            this.updateDesign(InventDimFormDesignUpdate::Init);
        if (cwFormCtrl)
        {
            cwFormCtrl.initPost();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDatasourceAllow</Name>
				<Source><![CDATA[
    protected void initDatasourceAllow()
    {
        boolean allow = this.allowEditAndCreateLines();

        super();

        inventDim_ds.allowEdit(allow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovement</Name>
				<Source><![CDATA[
    InventMovement inventMovement()
    {
        return InventMovement::construct(prodJournalProd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes the object, overrides the default and sets up the catch weight form control
    /// class.
    /// </summary>
    /// <param name="_formRun">
    /// The form from which the method is being called.
    /// </param>
    public void new(FormRun _formRun)
    {
        super(_formRun);

        if (#PdsCatchWeightEnabled)
        {
            cwFormCtrl = PdsCWFormCtrl::constructFromForm(_formRun);
            cwFormCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
                    [[fieldNum(ProdJournalProd, QtyGood),
                      fieldNum(ProdJournalProd,PdsCWBatchGood)],
                     [fieldNum(ProdJournalProd,QtyError),
                      fieldNum(ProdJournalProd,PdsCWBatchErr)]]));
            cwFormCtrl.parmItemFieldId(fieldNum(ProdJournalProd, ItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlPickingList</Name>
				<Source><![CDATA[
    FormFunctionButtonControl parmCtrlPickingList(FormFunctionButtonControl _ctrlPickingList = ctrlPickingList)
    {
        ctrlPickingList = _ctrlPickingList;
        return ctrlPickingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPhysicalStorno_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets physical storno value.
    /// </summary>
    protected void setPhysicalStorno_RU()
    {
        prodJournalProd.StornoPhysical_RU = (prodJournalProd.isInventReturn() && InventParameters::find().StornoPhysicalPosting_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignInit</Name>
				<Source><![CDATA[
    protected void updateDesignInit(InventMovement _movement)
    {
        if (!inventDimFormSetup)
            inventDimFormSetup  = InventDimCtrl_Frm_Mov_ProdRepFinish::newFromFormMovement(formRun,_movement);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>