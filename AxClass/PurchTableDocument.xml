<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTableDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchTableDocument</c> class is the workflow document class for the <c>PurchTable</c> table.
/// </summary>
/// <remarks>
///    This class is required in order to provide a unique workflow document for purchase order.
/// </remarks>
[WorkflowDocIsQueueEnabledAttribute(true,"@SYS304650"),
ExpressionCurrencyFieldMapAttribute(methodStr(PurchTableDocument, parmCalcTotalAmountCur), fieldStr(PurchTable, CurrencyCode))]

class   PurchTableDocument
extends WorkflowDocument implements SysErrorMessageHelpScopeIWorkflow
{
    PurchTable      purchTable;
    PurchTotals     purchTotals;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcHistoryInvoiceAmount</Name>
				<Source><![CDATA[
    private InvoiceAmountMST calcHistoryInvoiceAmount(RecId _recId)
    {
        PurchTableVersion       purchTableVersion;
        PurchLineHistory        purchLineHistory;
        PurchLine               purchLine;
        AmountMST               historyAmountMST;
        utcdatetime             versionDateTime;

        if (!purchTable)
        {
            purchTable = PurchTable::findRecId(_recId);
        }

        if (purchTable)
        {
            purchTableVersion = PurchTableVersion::findLatest(purchTable.PurchId, purchTable.DataAreaId);

            if (purchTableVersion)
            {
                if (purchTableVersion.IsArchived)
                {
                    versionDateTime = purchTableVersion.VersionDateTime;
                    select validTimeState(versionDateTime) sum(LineAmount) from purchLineHistory
                        where purchLineHistory.PurchId == purchTable.PurchId;

                    historyAmountMST = CurrencyExchangeHelper::amountCur2MST(purchLineHistory.LineAmount, PurchTableHistory::find(purchTable.PurchId, versionDateTime).CurrencyCode);
                }
                else
                {
                    select sum(LineAmount) from purchLine
                        where purchLine.PurchId == purchTable.PurchId
                           && purchLine.IsDeleted == NoYes::No;

                    historyAmountMST = CurrencyExchangeHelper::amountCur2MST(purchLine.LineAmount, purchTable.CurrencyCode);
                }
            }
            else
            {
                historyAmountMST = 0;
            }
        }

        return historyAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the line amount for the purchase order.
    /// </summary>
    /// <param name="_recId">
    /// The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    /// The sum of the purchase order line amount for the purchase order.
    /// </returns>
    private InvoiceAmountMST calcLineInvoiceAmount(RecId _recId)
    {
        PurchLine           purchLine;
        AmountMST           currentAmountMST;

        this.getPurchTable(_recId);

        select sum(LineAmount) from purchLine
            where  purchLine.PurchId == purchTable.PurchId
                && !purchLine.IsDeleted;

        currentAmountMST    = CurrencyExchangeHelper::amountCur2MST(purchLine.LineAmount, purchTable.CurrencyCode);

        return currentAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchTable</Name>
				<Source><![CDATA[
    private PurchTable getPurchTable(RecId  _recId)
    {
        if (!purchTable)
        {
            purchTable = PurchTable::findRecId(_recId);
        }

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchTotals</Name>
				<Source><![CDATA[
    private PurchTotals getPurchTotals()
    {
        if (!purchTotals)
        {
            using (PurchaseWorkflowPurchTotalsCalcContext context = PurchaseWorkflowPurchTotalsCalcContext::construct())
            {
                context.parmIsPurchTotalsCalculation(true);
                purchTotals = PurchTotals::newPurchTable(purchTable);
                purchTotals.calc();
            }
        }

        return purchTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the query to use for the document.
    /// </summary>
    /// <returns>
    ///    The name of the query to use for the document.
    /// </returns>
    QueryName getQueryName()
    {
        return queryStr(PurchTableDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>BudgetSourceCheckResult</c> for all the purch line records associated with the
    ///    <c>PurchTable</c> record.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID corresponding to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID corresponding to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID corresponding to the workflow instance.
    /// </param>
    /// <returns>
    ///    The <c>BudgetSourceCheckResult</c> for all the purch line records associated with the
    ///    <c>PurchTable</c> record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The table ID must be <c>PurchTable</c>.
    /// </exception>
    public BudgetSourceCheckResult parmBudgetCheckResult(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        PurchTable purchTableLocal;
        BudgetSourceCheckResult budgetSourceCheckResult;

        if (_tableId != tableNum(PurchTable))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Debug::assert(_companyId != '');

        changecompany(_companyId)
        {
            purchTableLocal = PurchTable::findRecId(_recId);

            if (purchTableLocal)
            {
                budgetSourceCheckResult = purchTableLocal.getBudgetCheckResult();
            }
        }

        return budgetSourceCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetCheckResultForDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>BudgetSourceCheckResult</c> for all the purch line records associated with the
    ///    <c>PurchTable</c> record.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID corresponding to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID corresponding to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID corresponding to the workflow instance.
    /// </param>
    /// <returns>
    ///    The <c>BudgetSourceCheckResult</c> for all the purch line records associated with the
    ///    <c>PurchTable</c> record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The table ID must be <c>PurchTable</c>.
    /// </exception>
    public PurchTableDocumentBudgetCheckResult parmBudgetCheckResultForDocument(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        PurchTable purchTableLocal;
        BudgetSourceSourceDocumentHeader budgetSourceSourceDocumentHeader;
        PurchTableDocumentBudgetCheckResult budgetSourceCheckResult;

        if (_tableId != tableNum(PurchTable))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Debug::assert(_companyId != '');

        changecompany(_companyId)
        {
            purchTableLocal = PurchTable::findRecId(_recId);

            if (purchTableLocal.SourceDocumentHeader)
            {
                // Get the budget check result for the entire document and do not exclude the line results
                budgetSourceSourceDocumentHeader = BudgetSourceSourceDocumentHeader::newBudgetSourceSourceDocumentHeader(purchTableLocal.SourceDocumentHeader);

                budgetSourceCheckResult = budgetSourceSourceDocumentHeader.getHeaderBudgetCheckResult();
            }
        }

        return budgetSourceCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the balance for the actual purchase order.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    The purchase order balance.
    /// </returns>
    public OrderBalanceMST parmCalcBalance(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        AmountMST  amountMST;

        this.getPurchTable(_recId);

        if (purchTable)
        {
            this.getPurchTotals();

            amountMST   = purchTotals.purchBalance();
            amountMST   = CurrencyExchangeHelper::amountCur2MST(amountMST, purchTable.CurrencyCode);
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcCashDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the purchase totals cash discount converted into company currency.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    The purchase order cash discount.
    /// </returns>
    public CashDiscountMST parmCalcCashDiscount(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        AmountMST  amountMST;

        this.getPurchTable(_recId);

        if (purchTable)
        {
            this.getPurchTotals();

            amountMST   = purchTotals.purchCashDiscAmount();
            amountMST   = CurrencyExchangeHelper::amountCur2MST(amountMST, purchTable.CurrencyCode);
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcDeltaInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the difference between the purchase order invoice amount and the latest approved
    /// purchase order.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    /// The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    /// The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    /// A <c>CalcInvoiceAmount</c> value.
    /// </returns>
    public InvoiceAmountDeltaMST parmCalcDeltaInvoiceAmount(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        AmountMST   amountMST;
        AmountMST   currentAmountMST;
        AmountMST   historyAmountMST;

        this.getPurchTable(_recId);

        if (purchTable)
        {
            historyAmountMST = this.calcHistoryInvoiceAmount(_recId);

            currentAmountMST = this.calcLineInvoiceAmount(_recId);
        }

        amountMST = currentAmountMST - historyAmountMST;

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcDeltaInvoiceAmountPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates, as a percentage, the difference between the actual purchase order invoice amount and
    /// the latest approved purchase order.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    /// The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    /// The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    /// A <c>CalcInvoiceAmount</c> value, multiplied by 100; otherwise, 100.
    /// </returns>
    public InvoiceAmountDeltaPct parmCalcDeltaInvoiceAmountPct(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        AmountMST   historyAmountMST;
        Percent     percent = 0;

        historyAmountMST = this.calcHistoryInvoiceAmount(_recId);

        if (historyAmountMST)
        {
            percent = ((this.calcLineInvoiceAmount(_recId) - historyAmountMST)
                    /  historyAmountMST)
                    *  100;
        }

        return percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total purchase order invoice amount and converts it company currency.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    The total purchase order invoice amount.
    /// </returns>
    public InvoiceAmountMST parmCalcInvoiceAmount(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        AmountMST   amountMST;

        this.getPurchTable(_recId);

        if (purchTable)
        {
            this.getPurchTotals();

            amountMST   = purchTotals.purchTotalAmount();
            amountMST   = CurrencyExchangeHelper::amountCur2MST(amountMST, purchTable.CurrencyCode);
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcLineDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total purchase order line discount and converts it into company currency.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    The total purchase order line discount.
    /// </returns>
    public OrderLineDiscountMST parmCalcLineDiscount(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        AmountMST  amountMST;

        this.getPurchTable(_recId);

        if (purchTable)
        {
            this.getPurchTotals();

            amountMST          = purchTotals.purchLineDisc();
            amountMST          = CurrencyExchangeHelper::amountCur2MST(amountMST, purchTable.CurrencyCode);
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcLineDiscountPct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculated as in Purchase Totals Line discount percentage of the invoice amount.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    The total purchase order line discount percentage.
    /// </returns>
    public OrderLineDiscountPct parmCalcLineDiscountPct(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        AmountMST   invoiceAmount;
        AmountMST   lineDiscAmount;
        Percent     percent = 0;

        invoiceAmount = this.parmCalcInvoiceAmount(_companyId, _tableId, _recId);

        if (invoiceAmount)
        {
            lineDiscAmount = this.parmCalcLineDiscount(_companyId, _tableId, _recId);

            percent = (lineDiscAmount
                    /  (invoiceAmount+lineDiscAmount))
                    *  100;
        }

        return percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total purchase order amount and converts it into company currency.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    The total purchase order amount.
    /// </returns>
    public MSTPurchTotalAmount parmCalcTotalAmount(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        MSTPurchTotalAmount  purchTotalAmount;

        this.getPurchTable(_recId);

        if (purchTable)
        {
            this.getPurchTotals();
            purchTotalAmount = CurrencyExchangeHelper::amountCur2MST(purchTotals.purchTotalAmount(), purchTable.CurrencyCode);
        }

        return purchTotalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcTotalAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total purchase order amount.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    The total purchase order amount.
    /// </returns>
    public PurchTotalAmountCur parmCalcTotalAmountCur(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        PurchTotalAmountCur  purchTotalAmount;

        this.getPurchTable(_recId);

        if (purchTable)
        {
            this.getPurchTotals();
            purchTotalAmount = purchTotals.purchTotalAmount();
        }

        return purchTotalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcTotalDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total purchase order total discount and converts it into company currency.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    The total purchase order total discount.
    /// </returns>
    public TotalDiscountMST parmCalcTotalDiscount(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        AmountMST  amountMST;

        this.getPurchTable(_recId);

        if (purchTable)
        {
            this.getPurchTotals();

            amountMST   = purchTotals.purchEndDisc();
            amountMST   = CurrencyExchangeHelper::amountCur2MST(amountMST, purchTable.CurrencyCode);
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcTotalMiscCharges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total purchase order miscellaneous charges and converts it into company currency.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    The total purchase order miscellaneous charges.
    /// </returns>
    public TotalMiscChargesMST parmCalcTotalMiscCharges(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        AmountMST  amountMST;

        this.getPurchTable(_recId);

        if (purchTable)
        {
            this.getPurchTotals();

            amountMST   = purchTotals.purchMarkup();
            amountMST   = CurrencyExchangeHelper::amountCur2MST(amountMST, purchTable.CurrencyCode);
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcTotalMiscChargesPct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates, as a percentage, the total purchase order miscellaneous charges of the invoice amount.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    The total purchase order miscellaneous charges of the invoice amount as a percentage.
    /// </returns>
    public TotalMiscChargesPct parmCalcTotalMiscChargesPct(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        AmountMST   invoiceAmount;
        Percent     percent = 0;

        invoiceAmount = this.parmCalcInvoiceAmount(_companyId, _tableId, _recId);

        if (invoiceAmount)
        {
            percent = (this.parmCalcTotalMiscCharges(_companyId, _tableId, _recId)
                    /  invoiceAmount)
                    *  100;
        }

        return percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequiresReApproval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a given purchase order requires approval.
    /// </summary>
    /// <param name="_companyId">
    /// The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    /// The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    /// The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    /// true if approval is required; otherwise, false .
    /// </returns>
    public PurchReApprovalRequired parmRequiresReApproval(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        if (!purchTable)
        {
            purchTable = PurchTable::findRecId(_recId);
        }

        if (purchTable
            && PurchReApprovalPolicyRule::evaluate(purchTable))
        {
            return NoYes::Yes;
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVersionExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a version exists for a given purchase order.
    /// </summary>
    /// <param name="_companyId">
    ///    The company ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_tableId">
    ///    The table ID that corresponds to the workflow instance.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that corresponds to the workflow instance.
    /// </param>
    /// <returns>
    ///    true if a version of the specified <c>PurchTable</c> record exists; otherwise, false.
    /// </returns>
    public VersioningExists parmVersionExists(CompanyId _companyId, TableId _tableId, RecId _recId)
    {
        if (!purchTable)
        {
            purchTable = PurchTable::findRecId(_recId);
        }

        if (purchTable && VersioningPurchaseOrder::newPurchaseOrder(purchTable).doesHistoryExist())
        {
            return NoYes::Yes;
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchTableDocument construct()
    {
        return new PurchTableDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableErrorMessageHelpScopeAndShowLink</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean enableErrorMessageHelpScopeAndShowLink()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>