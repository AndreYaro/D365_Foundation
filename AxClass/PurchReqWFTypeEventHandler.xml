<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqWFTypeEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchReqWFTypeEventHandler</c> class is used as an event handler for the purchase
/// requisition workflow types.
/// </summary>

public class PurchReqWFTypeEventHandler implements
    WorkflowStartedEventHandler,
    WorkflowCanceledEventHandler,
    WorkflowCompletedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activateFromWorkflowType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Wrapper for calling Workflow::activateFromWorkflowType, using the <c>runAs</c> method, with a single <c>container</c> representing params.
    /// </summary>
    /// <param name = "_c">The <c>container</c> for passing params to the Workflow::activateFromWorkflowType method.</param>
    /// <returns></returns>
    public static container activateFromWorkflowType(container _c)
    {
        WorkflowTypeName      workflowTemplateName;
        RecId                 recId;
        WorkflowComment       initialNote;
        NoYes                 activatingFromWeb;
        WorkflowUser          submittingUser;
        WorkflowCorrelationId results;

        [workflowTemplateName, recId, initialNote, activatingFromWeb, submittingUser] = _c;

        results = Workflow::activateFromWorkflowType(workflowTemplateName, recId, initialNote, activatingFromWeb, submittingUser);

        return [results];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>Status</c> fields on the <c>PurchReqTable</c> table to the <c>PurchReqRequisitionStatus::Draft</c> enumeration value.
    /// </summary>
    /// <param name="_workflowEventArgs">
    ///    A <c>WorkflowEventArgs</c> instance.
    /// </param>
    /// <remarks>
    ///    This method is called from workflow framework when the workflow is cancelled.
    /// </remarks>
    public void canceled(WorkflowEventArgs _workflowEventArgs)
    {
        #OCCRetryCount

        try
        {
            WorkflowContext wfContext = _workflowEventArgs.parmWorkflowContext();
            PurchReqTable purchReqTable = PurchReqTable::find(wfContext.parmRecId());

            if (purchReqTable.IsWorkflowToBeResubmitted)
            {
                if (PurchReqWFTypeEventHandlerSubworkflowFlight::instance().isEnabled() 
                    && WorkflowTrackingStatusTable::findByCorrelation(wfContext.parmWorkflowCorrelationId()).WorkflowType == WorkflowTrackingStatusWorkflowType::DependentSubworkflow)
                {
                    return;
                }

                WorkflowTrackingTable wfTrackingTable = Workflow::findLastWorkflowTrackingRecord(wfContext.parmWorkflowCorrelationId());
                WorkflowTrackingCommentTable wfTrackingCommentTable;
                UserId currentUser;

                wfTrackingTable = Workflow::findLastWorkflowTrackingRecord(wfContext.parmWorkflowCorrelationId());

                if (wfTrackingTable.RecId != 0)
                {
                    wfTrackingCommentTable = WorkflowTrackingCommentTable::findTrackingRecId(wfTrackingTable.RecId);
                    currentUser            = wfTrackingTable.User;
                }

                UserId submitter = DirPersonUserEx::worker2UserId(purchReqTable.Originator);

                if (currentUser && currentUser != curUserId()) // If currentUser is not Admin, call the method within runAs.
                {
                    new RunAsPermission(currentUser).assert();

                    runAs(currentUser, classNum(PurchReqWFTypeEventHandler), staticMethodStr(PurchReqWFTypeEventHandler, activateFromWorkflowType),
                        [workFlowTypeStr(PurchReqReview),
                        purchReqTable.RecId,
                        wfTrackingCommentTable.RecId != 0 ? wfTrackingCommentTable.Comment : "",
                        false,
                        submitter]);

                        CodeAccessPermission::revertAssert();
                }
                else
                {
                    Workflow::activateFromWorkflowType(workFlowTypeStr(PurchReqReview),
                        purchReqTable.RecId,
                        wfTrackingCommentTable.RecId != 0 ? wfTrackingCommentTable.Comment : "",
                        false,
                        submitter);
                }

                PurchReqWFStatusTransitionHelper::setPurchReqTable2InReview(purchReqTable.RecId);
            }
            else
            {
                PurchReqWFStatusTransitionHelper::setPurchReqTable2Draft(purchReqTable.RecId);
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the <c>Status</c> field on the <c>PurchReqTable</c> table to the
    /// <c>PurchReqRequisitionStatus::Approved</c> enumeration value.
    /// </summary>
    /// <param name="_workflowEventArgs">
    /// An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    /// <remarks>
    /// This method is called from the workflow framework when the workflow is completed.
    /// </remarks>
    public void completed(WorkflowEventArgs _workflowEventArgs)
    {
        #OCCRetryCount

        try
        {
            PurchInstrumentationLogger instrumentationLogger = PurchInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

            using (var activityContext = instrumentationLogger.workflowActivities().completed(_workflowEventArgs))
            {
                WorkflowContext workflowContext = _workflowEventArgs.parmWorkflowContext();

                if (workflowContext.parmTableId() == tableNum(PurchReqTable))
                {
                    PurchReqTable purchReqTable = PurchReqTable::find(workflowContext.parmRecId());

                    if (purchReqTable.RequisitionStatus != PurchReqRequisitionStatus::Closed)
                    {
                        PurchReqWFStatusTransitionHelper::setPurchReqTable2Approved(purchReqTable.RecId);
                    }
                }
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status on purchase requisition lines that are being resubmitted.
    /// </summary>
    /// <param name="_workflowEventArgs">
    /// An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    public void started(WorkflowEventArgs _workflowEventArgs)
    {
        #OCCRetryCount

        try
        {
            PurchReqLine purchReqLine;
            while select recId from  purchReqLine where
                purchReqLine.PurchReqTable     == _workflowEventArgs.parmWorkflowContext().parmRecId() &&
                purchReqLine.RequisitionStatus == PurchReqRequisitionStatus::Rejected
            {
                purchReqWFStatusTransitionHelper::setPurchReqLineStatus(purchReqLine.RecId, PurchReqRequisitionStatus::InReview);
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>