<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAvailabilityFormCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventAvailabilityFormCache</c> class is responsible for caching available on hand quantities
/// per item per inventory dimension combination.
/// </summary>
class InventAvailabilityFormCache
{
    Map                         itemDimQuantitiesMap;
    Map                         whsSpecificMap;
    str                         selectedItemDimKey;
    private Map                 cwItemDimQuantitiesMap;

    //cache the last quantities calculated
    InventAvailabilitySnapshot      availabilitySnapshot;
    WHSSpecificInventAvailability   whsSpecificAvailability;
    private PdsCWInventAvailabilitySnapshot cwInventAvailabilitySnapshot;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>availability</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the availability based on the specified on hand record and inventory dimensions.
    /// </summary>
    /// <param name="_inventSum">
    /// The record of the <c>InventSum</c> table used to get the availability.
    /// </param>
    /// <param name="_inventDim">
    /// The record of the <c>InventDim</c> table used to get the availability.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventIAvailability</c> interface.
    /// </returns>
    public InventIAvailability availability(
        InventSum _inventSum,
        InventDim _inventDim)
    {
        this.updateCachedValuesSum(_inventSum, _inventDim);

        return availabilitySnapshot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>availabilityByItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the availability based on the specified item ID and inventory dimensions.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID used to get the availability.
    /// </param>
    /// <param name="_inventDim">
    /// The record of the <c>InventDim</c> table used to get the availability.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventIAvailability</c> interface.
    /// </returns>
    public InventIAvailability availabilityByItemId(
        ItemId      _itemId,
        InventDim   _inventDim)
    {
        this.updateCachedValuesItem(_itemId, _inventDim);

        return availabilitySnapshot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>availabilityFromDimJoinedWithSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the availability based on the specified on hand record and joined inventory dimensions.
    /// </summary>
    /// <param name="_inventDim">
    /// The record of the <c>InventDim</c> table used to get the availability.
    /// </param>
    /// <param name="_inventSumFormDataSource">
    /// The form data source of the <c>InventSum</c> table used to get the availability.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventIAvailability</c> interface.
    /// </returns>
    /// <remarks>
    /// The on hand record specified in <paramref name="_inventDim"/> parameter must have a joined <c>InventSum</c> record.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// An exception is thrown if the <paramref name="_inventDim"/> parameter is not joined with a <c>InventSum</c> record.
    /// </exception>
    public InventIAvailability availabilityFromDimJoinedWithSum(
        InventDim       _inventDim,
        FormDataSource  _inventSumFormDataSource)
    {
        // The formJoinedRecord API can return a Common buffer therefore the return type must be of type Common.
        Common inventSumJoined = formJoinedRecord(_inventDim, _inventSumFormDataSource);

        if (inventSumJoined
            && inventSumJoined.TableId == tableNum(InventSum))
        {
            this.updateCachedValuesSum(inventSumJoined, _inventDim);
        }
        else
        {
            throw error(strFmt("@SYS22828",funcName()));
        }

        return availabilitySnapshot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>availabilityFromSumJoinedWithDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the availability based on the specified on hand record and joined inventory dimensions.
    /// </summary>
    /// <param name="_inventSum">
    /// The record of the <c>InventSum</c> table used to get the availability.
    /// </param>
    /// <param name="_inventDimFormDataSource">
    /// The form data source of the <c>InventDim</c> table used to get the availability.
    /// </param>
    /// <returns>
    /// An instance of the <c>InventIAvailability</c> interface.
    /// </returns>
    /// <remarks>
    /// The on hand record specified in <paramref name="_inventSum"/> parameter must have a joined <c>InventDim</c> record.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// An exception is thrown if the <paramref name="_inventSum"/> parameter is not joined with a <c>InventDim</c> record.
    /// </exception>
    public InventIAvailability availabilityFromSumJoinedWithDim(
        InventSum       _inventSum,
        FormDataSource  _inventDimFormDataSource)
    {
        // The formJoinedRecord API can return a Common buffer therefore the return type must be of type Common.
        Common inventDimJoined = formJoinedRecord(_inventSum, _inventDimFormDataSource);

        if (this.isJoinedTableInventDim(inventDimJoined))
        {
            this.updateCachedValuesSum(_inventSum, inventDimJoined);
        }
        else
        {
            throw error(strFmt("@SYS22828",funcName()));
        }

        return availabilitySnapshot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJoinedTableInventDim</Name>
				<Source><![CDATA[
    private boolean isJoinedTableInventDim(Common _joinedTable)
    {
        return (_joinedTable.TableId == tableNum(InventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsSpecificAvailabilityFromSumJoinedWithDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the warehouse specific availability based on the specified on hand record and joined inventory dimensions.
    /// </summary>
    /// <param name="_inventSum">
    /// The record of the <c>InventSum</c> table used to get the availability.
    /// </param>
    /// <param name="_inventDimFormDataSource">
    /// The form data source of the <c>InventDim</c> table used to get the availability.
    /// </param>
    /// <returns>
    /// An instance of the <c>WHSSpecificInventAvailability</c> class.
    /// </returns>
    /// <remarks>
    /// The on hand record specified in <paramref name="_inventSum"/> parameter must have a joined <c>InventDim</c> record.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// An exception is thrown if the <paramref name="_inventSum"/> parameter is not joined with a <c>InventDim</c> record.
    /// </exception>
    public WHSSpecificInventAvailability whsSpecificAvailabilityFromSumJoinedWithDim(
        InventSum       _inventSum,
        FormDataSource  _inventDimFormDataSource)
    {
        // Get the data using base class call
        this.availabilityFromSumJoinedWithDim(_inventSum, _inventDimFormDataSource);

        return whsSpecificAvailability;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cwSpecificAvailabilityFromSumJoinedWithDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight specific availability based on the specified on hand record and joined inventory dimensions.
    /// </summary>
    /// <param name="_inventSum">
    /// The record of the <c>InventSum</c> table used to get the availability.
    /// </param>
    /// <param name="_inventDimFormDataSource">
    /// The form data source of the <c>InventDim</c> table used to get the availability.
    /// </param>
    /// <returns>
    /// An instance of the <c>PDSCWInventAvailabilitySnapshot</c> class.
    /// </returns>
    /// <remarks>
    /// The on hand record specified in <paramref name="_inventSum"/> parameter must have a joined <c>InventDim</c> record.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// An exception is thrown if the <paramref name="_inventSum"/> parameter is not joined with a <c>InventDim</c> record.
    /// </exception>
    [Hookable(false)]
    public final PDSCWInventAvailabilitySnapshot cwSpecificAvailabilityFromSumJoinedWithDim(
        InventSum       _inventSum,
        FormDataSource  _inventDimFormDataSource)
    {
        // Get the data using base class call
        this.availabilityFromSumJoinedWithDim(_inventSum, _inventDimFormDataSource);

        return cwInventAvailabilitySnapshot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCachedValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the cached availability for the the item ID and and inventory dimensions.
    /// </summary>
    /// <param name="_itemId">
    ///     The item ID used to get the availability.
    /// </param>
    /// <param name="_inventDim">
    ///     The record of the <c>InventDim</c> table used to execute the calculations.
    /// </param>
    /// <returns>
    ///     true if the availability is found in the cache; otherwise, false.
    /// </returns>
    private boolean getCachedValues(ItemId _itemId, InventDim _inventDim)
    {
        boolean found = true;

        str newItemDimKey = this.makeItemDimKey(_itemId, _inventDim);

        if (selectedItemDimKey != newItemDimKey)
        {
            if (!itemDimQuantitiesMap)
            {
                this.initializeCache();
            }

            selectedItemDimKey = newItemDimKey;

            if (itemDimQuantitiesMap.exists(selectedItemDimKey))
            {
                availabilitySnapshot = itemDimQuantitiesMap.lookup(selectedItemDimKey);
                whsSpecificAvailability = whsSpecificMap.lookup(selectedItemDimKey);
                cwInventAvailabilitySnapshot = cwItemDimQuantitiesMap.lookup(selectedItemDimKey);
            }
            else
            {
                found = false;
            }
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the availability form cache.
    /// </summary>
    protected void initializeCache()
    {
        itemDimQuantitiesMap = new Map(Types::String, Types::Class);
        whsSpecificMap = new Map(Types::String, Types::Class);
        cwItemDimQuantitiesMap = new Map(Types::String, Types::Class);

        selectedItemDimKey = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the availability form cache.
    /// </summary>
    public void refreshCache()
    {
        this.initializeCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCachedValuesItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and caches the inventory quantities based on the item ID and and inventory dimensions.
    /// </summary>
    /// <param name="_itemId">
    ///     The item ID used to execute the calculations.
    /// </param>
    /// <param name="_inventDim">
    ///     The record of the <c>InventDim</c> table used to execute the calculations.
    /// </param>
    public void updateCachedValuesItem(ItemId _itemId, InventDim _inventDim)
    {
        if (!_itemId)
        {
            this.setAvailabilityNoItem(_inventDim);
        }
        else if (!this.getCachedValues(_itemId, _inventDim))
        {
            this.setAvailability(
                InventAvailabilityProvider::findByItemIdDim(_itemId, _inventDim).parmInventAvailability());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCachedValuesSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and caches the inventory quantities based on the specified record.
    /// </summary>
    /// <param name="_inventSum">
    ///     The record of the <c>InventSum</c> table used to execute the calculations.
    /// </param>
    /// <param name="_inventDim">
    ///     The record of the <c>InventDim</c> table used to execute the calculations.
    /// </param>
    public void updateCachedValuesSum(InventSum _inventSum, InventDim _inventDim)
    {
        if (!_inventSum.ItemId)
        {
            this.setAvailabilityNoItem(_inventDim);
        }
        else if (!this.getCachedValues(_inventSum.ItemId, _inventDim))
        {
            this.setAvailability(
                InventAvailabilityProvider::findBySumDim(_inventSum, _inventDim).parmInventAvailability());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventAvailabilityFormCache construct()
    {
        return new InventAvailabilityFormCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAvailabilityNoItem</Name>
				<Source><![CDATA[
    private void setAvailabilityNoItem(InventDim _inventDim)
    {
        // Availability should not be cached and set a snapshot with all quantities being zero
        selectedItemDimKey = this.makeItemDimKey('', _inventDim);
        availabilitySnapshot = InventAvailabilitySnapshot::zero();
        whsSpecificAvailability = WHSSpecificInventAvailability::zero();
        cwInventAvailabilitySnapshot = PdsCWInventAvailabilitySnapshot::zero();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAvailability</Name>
				<Source><![CDATA[
    private void setAvailability(InventIAvailability _availability)
    {
        availabilitySnapshot = InventAvailabilitySnapshot::convertToSnapshot(_availability);
        itemDimQuantitiesMap.insert(selectedItemDimKey, availabilitySnapshot);

        whsSpecificAvailability = WHSSpecificInventAvailability::newFromAvailability(_availability);
        whsSpecificMap.insert(selectedItemDimKey, whsSpecificAvailability);

        cwInventAvailabilitySnapshot = PdsCWInventAvailabilitySnapshot::newFromAvailability(_availability);
        cwItemDimQuantitiesMap.insert(selectedItemDimKey, cwInventAvailabilitySnapshot);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeItemDimKey</Name>
				<Source><![CDATA[
    private str makeItemDimKey(ItemId _itemId, InventDim _inventDim)
    {
        return _itemId + '#' + _inventDim.mapKey();
    }

]]></Source>
			</Method>
			<Method>
				<Name>CWInventAvailabilitySnapshot</Name>
				<Source><![CDATA[
    public PdsCWInventAvailabilitySnapshot CWInventAvailabilitySnapshot()
    {
        return cwInventAvailabilitySnapshot;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>