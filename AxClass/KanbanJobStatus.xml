<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanJobStatus</c> class is the base class that is used to control the status of kanban
///    jobs.
/// </summary>
/// <remarks>
///    The status of a kanban job can be:
///    <list type="bullet">
///       <item>
///          <description>Created.</description>
///       </item>
///       <item>
///          <description>Planned.</description>
///       </item>
///       <item>
///          <description>Prepared.</description>
///       </item>
///       <item>
///          <description>Started.</description>
///       </item>
///       <item>
///          <description>Ended.</description>
///       </item>
///    </list>
/// </remarks>
public abstract class KanbanJobStatus
{
    KanbanJob               kanbanJob;
    boolean                 updateKanban;
    KanbanStatusUpdate      kanbanStatusUpdate;
    LeanCostingFacadeBase   leanCostingFacade;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canAcceptComplete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a job can accept the completed status.
    /// </summary>
    /// <returns>
    ///    true if the status could be accepted; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A job can accept the completed status, if all previous jobs are completed or are at a minimum ready
    ///    to be prepared.
    /// </remarks>
    public boolean canAcceptComplete()
    {
        KanbanJob       kanbanJobTest;
        KanbanJobStatus kanbanJobStatusTest;
        boolean         result = true;

        if (kanbanJob.Status == LeanKanbanJobStatus::Completed)
        {
            return true;
        }

        if (kanbanJob.existPreviousJobNotInStatus(LeanKanbanJobStatus::Completed))
        {
            kanbanJobTest = kanbanJob.previousJob();
            if (kanbanJobTest)
            {
                kanbanJobStatusTest = kanbanJobTest.status(false);
                result              = kanbanJobStatusTest.canAcceptComplete();
            }
        }

        kanbanJobTest.data(kanbanJob);
        switch (kanbanJobTest.Status)
        {
            case LeanKanbanJobStatus::NotPlanned,
                 LeanKanbanJobStatus::Planned:
                kanbanJobStatusTest  = kanbanJobTest.status(false);
                result               = result && kanbanJobStatusTest.isReadyForStatusUpdate(LeanKanbanJobStatus::Prepared,true);
                break;
            default:
                result = true;
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a kanban job can be deleted.
    /// </summary>
    /// <returns>
    ///    true if the kanban job can be deleted; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns false.
    /// </remarks>
    public boolean canDelete()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveReceivedQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a kanban job can have a received quantity.
    /// </summary>
    /// <returns>
    ///    true if the job can have a received quantity; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns false.
    /// </remarks>
    public boolean canHaveReceivedQty()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveScrapQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a kanban job can have a scrap quantity.
    /// </summary>
    /// <returns>
    ///    true if the job can have a scrap quantity; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns false.
    /// </remarks>
    public boolean canHaveScrapQty()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReassignSameStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the status can be reassigned if the kanban job is already in this status.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    By default, a status cannot be reassigned unless a status overrides this method.
    /// </remarks>
    public boolean canReassignSameStatus()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correspondingKanbanStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the corresponding kanban status for a given kanban job status.
    /// </summary>
    /// <param name="_status">
    ///    A <c>LeanKanbanJobStatus</c> enumeration value; optional.
    /// </param>
    /// <returns>
    ///    A corresponding <c>LeanKanbanStatus</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method retrieves a value of <c>LeanKanbanStatus::Created</c> when no status that corresponds
    ///    exists.
    /// </remarks>
    public LeanKanbanStatus correspondingKanbanStatus(LeanKanbanJobStatus _status = kanbanJob.Status)
    {
        LeanKanbanStatus leanKanbanStatus;

        switch (_status)
        {
            case LeanKanbanJobStatus::Prepared,
                 LeanKanbanJobStatus::InProgress:
                leanKanbanStatus = LeanKanbanStatus::Assigned;
                break;
            case LeanKanbanJobStatus::Completed:
                leanKanbanStatus = LeanKanbanStatus::Received;
                break;
            default:
                leanKanbanStatus = LeanKanbanStatus::NotAssigned;
                break;
        }

        return leanKanbanStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a kanban job record is deleted.
    /// </summary>
    public void deleting()
    {
        kanbanJob.type().deleting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a kanban job record has been deleted.
    /// </summary>
    public void deleted()
    {
        kanbanJob.type().deleted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPreviousStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>KanbanJobStatusUpdate</c> table buffer in preparation for a
    ///    status update.
    /// </summary>
    /// <param name="_kanbanJobStatusUpdate">
    ///    The target status <c>KanbanJobStatusUpdate</c> table buffer.
    /// </param>
    /// <returns>
    ///    An initialized <c>KanbanJobStatusUpdate</c> table buffer.
    /// </returns>
    protected KanbanJobStatusUpdate initPreviousStatusUpdate(KanbanJobStatusUpdate _kanbanJobStatusUpdate)
    {
        KanbanJob               targetKanbanJob;
        KanbanJobStatusUpdate   kanbanJobStatusUpdate;

        targetKanbanJob.data(kanbanJob);
        targetKanbanJob.Status = this.prevStatus(_kanbanJobStatusUpdate.Type);
        KanbanJobStatus targetKanbanJobStatus = KanbanJobStatus::newKanbanJob(targetKanbanJob,updateKanban);

        kanbanJobStatusUpdate.data(_kanbanJobStatusUpdate);
        kanbanJobStatusUpdate.ParmId                  = '';
        kanbanJobStatusUpdate.LineNum                 = 0;
        kanbanJobStatusUpdate.RecId                   = 0;
        kanbanJobStatusUpdate.JobStatus               = ParmJobStatus::Waiting;
        kanbanJobStatusUpdate.ExecutedDateTime        = DateTimeUtil::minValue();
        kanbanJobStatusUpdate.AutoUpdate              = NoYes::Yes;
        kanbanJobStatusUpdate.Type                    = targetKanbanJob.Status;

        if (   kanbanJobStatusUpdate.QuantityScrapped != 0
            && !targetKanbanJobStatus.canHaveScrapQty())
        {
            kanbanJobStatusUpdate.QuantityReceived += kanbanJobStatusUpdate.QuantityScrapped;
            kanbanJobStatusUpdate.QuantityScrapped  = 0;
        }

        return kanbanJobStatusUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>KanbanJobStatusUpdate</c> table buffer.
    /// </summary>
    /// <param name="_kanbanJobStatusUpdate">
    ///    The <c>KanbanJobStatusUpdate</c> table to initialize.
    /// </param>
    /// <param name="_leanKanbanJobStatus">
    ///    The status update target status.
    /// </param>
    /// <returns>
    ///    The initialized <c>KanbanJobStatusUpdate</c> table buffer.
    /// </returns>
    public KanbanJobStatusUpdate initStatusUpdate(
        KanbanJobStatusUpdate _kanbanJobStatusUpdate,
        LeanKanbanJobStatus   _leanKanbanJobStatus)
    {
        KanbanJob               targetKanbanJob;

        targetKanbanJob.data(kanbanJob);
        targetKanbanJob.Status = _leanKanbanJobStatus;
        KanbanJobStatus targetKanbanJobStatus = KanbanJobStatus::newKanbanJob(targetKanbanJob,updateKanban);

        _kanbanJobStatusUpdate.initParmDefault();
        _kanbanJobStatusUpdate.initFromKanbanJob(kanbanJob);
        _kanbanJobStatusUpdate.FirstTimeThrough    = NoYes::Yes;
        _kanbanJobStatusUpdate.QuantityScrapped    = 0;
        _kanbanJobStatusUpdate.TransactionDateTime = DateTimeUtil::getSystemDateTime();
        _kanbanJobStatusUpdate.PlanAfterType       = LeanPlanJobReferenceTypes::LineNumber;
        _kanbanJobStatusUpdate.PlanAfterLineNum    = KanbanJobSchedule::lastSequence(kanbanJob.WorkCell,
                                                                        DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(
                                                                        _kanbanJobStatusUpdate.TransactionDateTime,DateTimeUtil::getCompanyTimeZone())));
        _kanbanJobStatusUpdate.AutoUpdate          = kanbanStatusUpdate.RecId ? NoYes::Yes : NoYes::No;
        _kanbanJobStatusUpdate.Type                = targetKanbanJob.Status;
        _kanbanJobStatusUpdate.WantedStatus        = targetKanbanJob.Status;

        if (kanbanStatusUpdate.RecId)
        {
            _kanbanJobStatusUpdate.initFromKanbanStatusUpdate(kanbanStatusUpdate);
        }

        if (   _kanbanJobStatusUpdate.QuantityScrapped != 0
            && !targetKanbanJobStatus.canHaveScrapQty())
        {
            _kanbanJobStatusUpdate.QuantityScrapped  = 0;
        }

        return _kanbanJobStatusUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a kanban job record is inserted.
    /// </summary>
    public void inserting()
    {
        kanbanJob.type().inserting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a kanban job record has been inserted.
    /// </summary>
    public void inserted()
    {
        kanbanJob.type().inserted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReadyForStatusReset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether all preconditions are met and the <c>KanbanJob</c> object is ready for a
    ///    specified target status update.
    /// </summary>
    /// <param name="_status">
    ///    The target status.
    /// </param>
    /// <param name="_silent">
    ///    A Boolean value that specified whether the method can add warnings to the Infolog; optional.
    /// </param>
    /// <returns>
    ///    true if the kanban job is ready for the status update; otherwise, false.
    /// </returns>
    public boolean isReadyForStatusReset(
        LeanKanbanJobStatus _status = this.prevStatus(),
        boolean             _silent = false)
    {
        boolean     result     = true;
        Kanban      kanban     = kanbanJob.kanban();
        KanbanRule  kanbanRule = kanban.kanbanRule();

        if (   kanban.Status != LeanKanbanStatus::Emptied
            || _status       == LeanKanbanJobStatus::Completed)
        {
            switch (kanbanJob.Status)
            {
                case LeanKanbanJobStatus::NotPlanned:
                    result = false;
                    break;

                case LeanKanbanJobStatus::Planned:
                    if (   result
                        && !kanbanRule.type().canJobResetFromStatus(LeanKanbanJobStatus::Planned))
                    {
                        result = _silent ? false : checkFailed(strFmt("@SYS136078",kanban.KanbanId,kanbanJob.PlanActivityName));
                    }

                    if (   result
                        && !KanbanJobPickingList::canDeleteWMSOrder(kanbanJob.RecId))
                    {
                        result = _silent ? false : checkFailed(strFmt("@SYS322200",kanban.KanbanId,kanbanJob.PlanActivityName));
                    }
                    break;
                case LeanKanbanJobStatus::Completed:
                    if (   result
                        && (kanbanJob.existLaterJobInStatus(LeanKanbanJobStatus::Completed)
                        ||  kanbanJob.existLaterJobInStatus(LeanKanbanJobStatus::InProgress)))
                    {
                        result = _silent ? false : checkFailed(strFmt("@SYS136079",kanban.KanbanId,kanbanJob.PlanActivityName,
                                                               LeanKanbanJobStatus::InProgress,LeanKanbanJobStatus::Completed));
                    }

                    if (   result
                        && kanbanJob.isInventoryUpdatedFinancial())
                    {
                        result = _silent ? false : checkFailed(strFmt("@SYS136081",kanban.KanbanId));
                    }
                    break;
                default:
                    result = true;
                    break;
            }

            if (   result
                && !kanbanRule.type().canJobResetFromStatus(kanbanJob.Status))
            {
                result = _silent ? false : checkFailed(strFmt("@SYS138286",kanban.KanbanId,kanbanJob.PlanActivityName,kanbanJob.Status));
            }
        }
        else
        {
            result = _silent ? false : checkFailed(strFmt("@SYS310071",kanban.KanbanId,kanbanJob.PlanActivityName,kanban.Status));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReadyForStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether all preconditions are met and the <c>KanbanJob</c> object is ready for a given
    ///    target status update.
    /// </summary>
    /// <param name="_status">
    ///    The target status.
    /// </param>
    /// <param name="_silent">
    ///    A Boolean value that specifies whether the method can add warnings to the Infolog; optional.
    /// </param>
    /// <returns>
    ///    true if the kanban job is ready for the status update; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Kanban jobs cannot end when previous jobs are still open.
    /// </remarks>
    public boolean isReadyForStatusUpdate(
        LeanKanbanJobStatus _status = this.nextStatus(),
        boolean             _silent = false)
    {
        boolean     result = true;

        switch (_status)
        {
            case LeanKanbanJobStatus::InProgress:
                result = !kanbanJob.existPreviousJobNotInStatus(LeanKanbanJobStatus::Completed);
                result = result ? result : _silent ? false : checkFailed(strFmt("@SYS134366",kanbanJob.kanbanId(),kanbanJob.PlanActivityName,_status));
                if (result)
                {
                    result =    !KanbanJobPickingList::existsOpenWMSOrder(kanbanJob.RecId)
                             && !kanbanJob.existsOpenWMSOrder();
                    result = result ? result : _silent ? false : checkFailed(strFmt("@SYS322199",kanbanJob.kanbanId(),kanbanJob.PlanActivityName,_status));
                }
                break;
            case LeanKanbanJobStatus::Completed:
                result = !kanbanJob.existPreviousJobNotInStatus(LeanKanbanJobStatus::Completed);
                result = result ? result : _silent ? false : checkFailed(strFmt("@SYS134366",kanbanJob.kanbanId(),kanbanJob.PlanActivityName,_status));
                break;
            default:
                result = true;
                break;
        }

        if (   _status >= LeanKanbanJobStatus::InProgress
            && kanbanJob.QuantityOrdered != 0
            && !kanbanJob.kanban().kanbanCard())
        {
            result =    result
                     && _silent ? false : checkFailed(strFmt("@SYS135901",kanbanJob.kanbanId(),kanbanJob.PlanActivityName,_status));
        }

        if (   updateKanban
            && _status != LeanKanbanJobStatus::Completed)
        {
            result =    result
                     && kanbanJob.kanban().status(false).isReadyForStatusUpdate(this.correspondingKanbanStatus(_status),_silent);
        }

        result =    result
                 && LeanRuleEvent::validateKanbanPeggingReceived(kanbanJob, _status);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStatusResetAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a status update to a given target status is enabled.
    /// </summary>
    /// <param name="_status">
    ///    The target status; optional.
    /// </param>
    /// <param name="_silent">
    ///    A Boolean value that specifies whether the method can add warnings to the Infolog; optional.
    /// </param>
    /// <returns>
    ///    true if the status reset is enabled; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The status update is enabled when the following conditions are true
    ///    <list type="bullet">
    ///       <item>
    ///          <description>All preconditions are met.</description>
    ///       </item>
    ///       <item>
    ///          <description>The current status is before the target status.</description>
    ///       </item>
    ///       <item>
    ///          <description>The target status is valid for the kanban job.</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public boolean isStatusResetAllowed(
        LeanKanbanJobStatus _status = this.nextStatus(),
        boolean             _silent = false)
    {
        return    this.isReadyForStatusReset(_status,_silent)
               && kanbanJob.Status > _status
               && kanbanJob.type().canHaveStatus(_status)
              && kanbanJob.checkValid(kanbanJob.RecId,_silent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStatusUpdateAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a status update to a given target status is enabled.
    /// </summary>
    /// <param name="_status">
    ///    The target status; optional.
    /// </param>
    /// <param name="_silent">
    ///    A Boolean value that specifies whether the method can add warnings to the Infolog; optional.
    /// </param>
    /// <returns>
    ///    true if the status update is enabled; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The status update is enabled when the following conditions are true
    ///    <list type="bullet">
    ///       <item>
    ///          <description>All preconditions are met.</description>
    ///       </item>
    ///       <item>
    ///          <description>The current status is before the target status.</description>
    ///       </item>
    ///       <item>
    ///          <description>The target status is valid for the kanban job.</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public boolean isStatusUpdateAllowed(
        LeanKanbanJobStatus _status = this.nextStatus(),
        boolean             _silent = false)
    {
        return    this.isReadyForStatusUpdate(_status,_silent)
               && kanbanJob.Status  <= _status
               && (kanbanJob.Status != _status
               ||  this.canReassignSameStatus())
               && kanbanJob.type().canHaveStatus(_status)
               && kanbanJob.checkValid(kanbanJob.RecId,_silent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRunPreviousStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a previous status update must run in order to go from the current status to the
    ///    given status.
    /// </summary>
    /// <param name="_toStatus">
    ///    The <c>LeanKanbanJobStatus</c> enumeration value to test.
    /// </param>
    /// <returns>
    ///    true if at least one previous status update must run to achieve the given status; otherwise, false.
    /// </returns>
    protected boolean mustRunPreviousStatus(LeanKanbanJobStatus _toStatus)
    {
        return    _toStatus != kanbanJob.Status
               && this.nextStatus() != _toStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSynchronizeKanbanStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a status update must be synchronized to the parent kanban.
    /// </summary>
    /// <param name="_reset">
    ///    A Boolean value that indicates whether the status is reset; optional.
    /// </param>
    /// <returns>
    ///    true if the kanban status must be synchronized; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns false.This method should be called from an instance that represents
    ///    the new status.
    /// </remarks>
    public boolean mustSynchronizeKanbanStatus(boolean _reset = false)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        leanCostingFacade = LeanCostingFacade::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the next job status for the <c>KanbanJob</c> table buffer.
    /// </summary>
    /// <param name="_status">
    ///    The current status; optional.
    /// </param>
    /// <returns>
    ///    The next status.
    /// </returns>
    /// <remarks>
    ///    This method retrieves the same as the current value, if the final status has already been reached.
    /// </remarks>
    public LeanKanbanJobStatus nextStatus(LeanKanbanJobStatus _status = kanbanJob.Status)
    {
        LeanKanbanJobStatus leanKanbanJobStatus = _status;
        boolean             statusOK            = true;
        SysDictEnum         dictStatus          = new SysDictEnum(enumNum(LeanKanbanJobStatus));

        if (leanKanbanJobStatus != dictStatus.lastValue())
        {
            KanbanJobType kanbanJobType = kanbanJob.type();
            do
            {
                leanKanbanJobStatus = dictStatus.nextValue(leanKanbanJobStatus);
                statusOK            = kanbanJobType.canHaveStatus(leanKanbanJobStatus);
            }
            while (   !statusOK
                   && leanKanbanJobStatus != dictStatus.lastValue());
        }

        return statusOK ? leanKanbanJobStatus : kanbanJob.Status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJob</Name>
				<Source><![CDATA[
    public KanbanJob parmKanbanJob(KanbanJob _kanbanJob = kanbanJob)
    {
        kanbanJob = _kanbanJob;
        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanStatusUpdate</Name>
				<Source><![CDATA[
    public KanbanStatusUpdate parmKanbanStatusUpdate(KanbanStatusUpdate _kanbanStatusUpdate = kanbanStatusUpdate)
    {
        kanbanStatusUpdate = _kanbanStatusUpdate;
        return kanbanStatusUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanCostingFacade</Name>
				<Source><![CDATA[
    public LeanCostingFacadeBase parmLeanCostingFacade(LeanCostingFacadeBase _leanCostingFacade = leanCostingFacade)
    {
        leanCostingFacade = _leanCostingFacade;
        return leanCostingFacade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateKanban</Name>
				<Source><![CDATA[
    public boolean parmUpdateKanban(boolean _updateKanban = updateKanban)
    {
        updateKanban = _updateKanban;
        return updateKanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the previous job status for the <c>KanbanJob</c> table buffer.
    /// </summary>
    /// <param name="_status">
    ///    The current status; optional.
    /// </param>
    /// <returns>
    ///    The previous status.
    /// </returns>
    /// <remarks>
    ///    This method retrieves the same as the current value, if the first status has already been reached.
    /// </remarks>
    public LeanKanbanJobStatus prevStatus(LeanKanbanJobStatus _status = kanbanJob.Status)
    {
        LeanKanbanJobStatus leanKanbanJobStatus     = _status;
        boolean             statusOK                = true;
        SysDictEnum         dictStatus              = new SysDictEnum(enumNum(LeanKanbanJobStatus));

        if (leanKanbanJobStatus != dictStatus.firstValue())
        {
            KanbanJobType kanbanJobType = kanbanJob.type();
            do
            {
                LeanKanbanJobStatus previousLeanKanbanJobStatus = dictStatus.firstValue();
                while (dictStatus.nextValue(previousLeanKanbanJobStatus) != leanKanbanJobStatus)
                {
                    previousLeanKanbanJobStatus = dictStatus.nextValue(previousLeanKanbanJobStatus);
                }

                leanKanbanJobStatus = previousLeanKanbanJobStatus;
                statusOK            = kanbanJobType.canHaveStatus(leanKanbanJobStatus);
            }
            while (   !statusOK
                   && leanKanbanJobStatus != dictStatus.firstValue());
        }

        return statusOK ? leanKanbanJobStatus : kanbanJob.Status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the status for the current kanban job.
    /// </summary>
    /// <param name="_leanKanbanJobStatus">
    ///    The target status.
    /// </param>
    /// <param name="_validateOnly">
    ///    A Boolean value that indicates whether the update must be executed or validated; optional.
    /// </param>
    /// <returns>
    ///    true if the update can be executed or was successfully executed, based on the <paramref
    ///    name="_validateOnly" /> parameter; otherwise, false.
    /// </returns>
    public boolean run(
        LeanKanbanJobStatus _leanKanbanJobStatus,
        boolean             _validateOnly = false)
    {
        return this.runStatusUpdate(KanbanJobStatusUpdate::makeParameters(this,_leanKanbanJobStatus),_leanKanbanJobStatus,_validateOnly);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs a status update reset for the current kanban job.
    /// </summary>
    /// <param name="_leanKanbanJobStatus">
    ///    The target status.
    /// </param>
    /// <param name="_validateOnly">
    ///    A Boolean value that indicates whether the update must be executed or just validated; optional.
    /// </param>
    /// <returns>
    ///    true if the update can be executed or was successfully executed, based on the <paramref
    ///    name="_validateOnly" /> parameter; otherwise, false.
    /// </returns>
    public boolean runReset(
        LeanKanbanJobStatus _leanKanbanJobStatus,
        boolean             _validateOnly = false)
    {
        return this.runStatusReset(KanbanJobStatusUpdate::makeParameters(this,_leanKanbanJobStatus),_leanKanbanJobStatus,_validateOnly);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatusReset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the status for the current kanban job using a specified <c>KanbanJobStatusUpdate</c> record.
    /// </summary>
    /// <param name="_kanbanJobStatusUpdate">
    ///    The <c>KanbanJobStatusUpdate</c> record.
    /// </param>
    /// <param name="_status">
    ///    The target status of the update; optional.
    /// </param>
    /// <param name="_validateOnly">
    ///    A Boolean value that indicates whether the update must be executed or validated; optional.
    /// </param>
    /// <param name="_multi">
    ///    A <c>RunbaseRecsMapable</c> object that is used in the status update; optional.
    /// </param>
    /// <returns>
    ///    true if the update can be executed or was successfully executed, based on the <paramref
    ///    name="_validateOnly" /> parameter; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The target status and parameter record do not match.
    /// </exception>
    public boolean runStatusReset(
        KanbanJobStatusUpdate _kanbanJobStatusUpdate,
        LeanKanbanJobStatus   _status       = _kanbanJobStatusUpdate.WantedStatus,
        boolean               _validateOnly = false,
        RunbaseRecsMapable    _multi        = null)
    {
        boolean               canReset = this.isStatusResetAllowed(_status);

        if (_validateOnly)
        {
            return canReset;
        }

        if (canReset)
        {
            ttsBegin;

            _kanbanJobStatusUpdate.updateDateTimeFromOriginalTrans(kanbanJob);
            kanbanJob.type().runStatusReset(_kanbanJobStatusUpdate, updateKanban, this, _multi);
            KanbanJobStatusUpdate kanbanJobStatusUpdate = this.initPreviousStatusUpdate(_kanbanJobStatusUpdate);
            kanbanJob = KanbanJob::find(kanbanJob.RecId);
            while (   kanbanJob.Status > _kanbanJobStatusUpdate.WantedStatus
                   && this.isStatusResetAllowed(_status))
            {
                kanbanJob.type().runStatusReset(kanbanJobStatusUpdate,updateKanban,this,_multi);
                kanbanJobStatusUpdate = this.initPreviousStatusUpdate(kanbanJobStatusUpdate);
                kanbanJob             = KanbanJob::find(kanbanJob.RecId);
            }

            ttsCommit;
        }
        else
        {
            throw error(strFmt("@SYS134358",kanbanJob.kanbanId(),kanbanJob.PlanActivityName,_kanbanJobStatusUpdate.WantedStatus));
        }

        return kanbanJob.Status == _kanbanJobStatusUpdate.WantedStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the status for the current kanban job using a given <c>KanbanJobStatusUpdate</c> record.
    /// </summary>
    /// <param name="_kanbanJobStatusUpdate">
    ///    The <c>KanbanJobStatusUpdate</c> record.
    /// </param>
    /// <param name="_status">
    ///    The target status of the update; optional.
    /// </param>
    /// <param name="_validateOnly">
    ///    A Boolean value that indicates whether the update must be executed or validated; optional.
    /// </param>
    /// <param name="_multi">
    ///    A <c>RunbaseRecsMapable</c> object that is used in the status update; optional.
    /// </param>
    /// <returns>
    ///    true if the update can be executed or was successfully executed, depending on the <paramref
    ///    name="_validateOnly" /> parameter; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If provided, the target status must match the update parameter record. The parameter is required
    ///    for calls where the <paramref name="_validateOnly" /> parameter is true.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The target status and parameter record do not match.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The status update cannot be executed.
    /// </exception>
    public boolean runStatusUpdate(
        KanbanJobStatusUpdate _kanbanJobStatusUpdate,
        LeanKanbanJobStatus   _status       = _kanbanJobStatusUpdate.Type,
        boolean               _validateOnly = false,
        RunbaseRecsMapable    _multi        = null)
    {
        boolean                 canUpdate     = this.isStatusUpdateAllowed(_status);
        KanbanJobType           kanbanJobType = kanbanJob.type();

        if (_validateOnly)
        {
            return canUpdate;
        }

        if (_status != _kanbanJobStatusUpdate.Type)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!canUpdate)
        {
            throw error(strFmt("@SYS134358", kanbanJob.kanbanId(), kanbanJob.PlanActivityName, _kanbanJobStatusUpdate.Type));
        }

        if (this.mustRunPreviousStatus(_kanbanJobStatusUpdate.Type))
        {
            KanbanJobStatusUpdate kanbanJobStatusUpdate = this.initPreviousStatusUpdate(_kanbanJobStatusUpdate);
            this.runStatusUpdate(kanbanJobStatusUpdate, kanbanJobStatusUpdate.Type, _validateOnly, _multi);
        }

        kanbanJobType.runStatusUpdate(_kanbanJobStatusUpdate, updateKanban, this, _multi);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a kanban job is updated.
    /// </summary>
    public void updating()
    {
        kanbanJob.type().updating();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a kanban job record has been updated.
    /// </summary>
    /// <param name="_kanbanJobOrig">
    /// The original kanban job which is updated.
    /// </param>
    public void updated(KanbanJob _kanbanJobOrig)
    {
        kanbanJob.type().updated(_kanbanJobOrig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>KanbanJobStatus</c> class.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    The <c>KanbanJob</c> table buffer used to instantiate the class.
    /// </param>
    /// <param name="_updateKanban">
    ///    A Boolean value that indicates whether the parent kanban must be updated when the job is updated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>KanbanJobStatus</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The specified value is not a <c>LeanKanbanJobStatus</c> enumeration value.
    /// </exception>
    public static KanbanJobStatus newKanbanJob(
        KanbanJob _kanbanJob,
        boolean   _updateKanban)
    {
        LeanKanbanJobStatusFactoryAttribute attr = new LeanKanbanJobStatusFactoryAttribute(_kanbanJob.Status);
        KanbanJobStatus kanbanJobStatus = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(KanbanJobStatus), attr);

        if (!kanbanJobStatus)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        kanbanJobStatus.parmKanbanJob(_kanbanJob);
        kanbanJobStatus.parmUpdateKanban(_updateKanban);

        return kanbanJobStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanbanJobKanbanStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>KanbanJobStatus</c> class.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    The <c>KanbanJob</c> table buffer used to instantiate the class.
    /// </param>
    /// <param name="_kanbanStatusUpdate">
    ///    The <c>KanbanStatusUpdate</c> table buffer used to instantiate the class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>KanbanJobStatus</c> class.
    /// </returns>
    public static KanbanJobStatus newKanbanJobKanbanStatusUpdate(
        KanbanJob          _kanbanJob,
        KanbanStatusUpdate _kanbanStatusUpdate)
    {
        KanbanJobStatus kanbanJobStatus = KanbanJobStatus::newKanbanJob(_kanbanJob,false);
        kanbanJobStatus.parmKanbanStatusUpdate(_kanbanStatusUpdate);

        return kanbanJobStatus;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>