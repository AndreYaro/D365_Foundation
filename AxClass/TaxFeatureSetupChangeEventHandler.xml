<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxFeatureSetupChangeEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.Tax.Core;

internal final class TaxFeatureSetupChangeEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>TaxIntegrationTaxServiceParameters_onFeatureSetupChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for the case that the tax feature setup changed.
    /// </summary>
    /// <param name = "_oldFeatureSetupId">The original tax feature setup Id.</param>
    /// <param name = "_newFeatureSetupId">The new tax feature setup Id.</param>
    [SubscribesTo(tableStr(TaxIntegrationTaxServiceParameters), delegateStr(TaxIntegrationTaxServiceParameters, onFeatureSetupChanged))]
    public static void TaxIntegrationTaxServiceParameters_onFeatureSetupChanged(TaxIntegrationFeatureSetupId _oldFeatureSetupId, TaxIntegrationFeatureSetupId _newFeatureSetupId)
    {
        SysGlobalObjectCache globalObjectCache = classFactory.globalObjectCache();

        if (_oldFeatureSetupId)
        {
            container companiesWithTheFeature = globalObjectCache.find(
                TaxIntegrationTaxServiceConstants::TaxFeatureSetupCacheScope,
                [_oldFeatureSetupId]);

            int pos = conFind(companiesWithTheFeature, curExt());
            if (pos)
            {
                companiesWithTheFeature = conDel(companiesWithTheFeature, pos, 1);
            }

            if (conLen(companiesWithTheFeature) == 0)
            {
                // If the feature setup is not used anymore, clear the cache.
                GTEPlus.TaxEngineService::ClearTaxSolutionCache(_oldFeatureSetupId);
                globalObjectCache.remove(TaxIntegrationTaxServiceConstants::TaxFeatureSetupCacheScope, [_oldFeatureSetupId]);
            }
            else
            {
                globalObjectCache.insert(TaxIntegrationTaxServiceConstants::TaxFeatureSetupCacheScope, [_oldFeatureSetupId], companiesWithTheFeature);
            }
        }

        if (_newFeatureSetupId)
        {
            container companiesWithTheFeature = globalObjectCache.find(
                TaxIntegrationTaxServiceConstants::TaxFeatureSetupCacheScope,
                [_newFeatureSetupId]);

            companiesWithTheFeature += curExt();

            globalObjectCache.insert(TaxIntegrationTaxServiceConstants::TaxFeatureSetupCacheScope, [_newFeatureSetupId], companiesWithTheFeature);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>