<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DemoDataPostFreeTextInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Processes and posts free text invoices with a query based on a demo data run document constraints.
/// </summary>
[DemoDataPostBaseFactoryAttribute(DemoDataPostDocument::FreeTextInvoice)]
public class DemoDataPostFreeTextInvoice extends DemoDataPostBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build the selection of free text invoices to attempt to post.
    /// </summary>
    /// <returns>A query against free text invoices.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Query buildQuery()
    {
        Query postQuery = new Query();

        QueryBuildDataSource qbds = postQuery.addDataSource(tableNum(CustInvoiceTable));

        qbds.addRange(fieldNum(CustInvoiceTable, InvoiceId)).value(SysQuery::valueEmptyString());

        this.buildQueryInvoiceDateRange(qbds);

        return postQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryInvoiceDateRange</Name>
				<Source><![CDATA[
    private void buildQueryInvoiceDateRange(QueryBuildDataSource _qbds)
    {
        QueryBuildRange invoiceDateRange;
        if (_qbds)
        {
            invoiceDateRange = _qbds.addRange(fieldNum(CustInvoiceTable, InvoiceDate));
        }

        if (invoiceDateRange)
        {
            str dateRange = DemoDataPostJournalHelper::buildDateRange(demoDataPostRunDocument.FromDocumentDate, demoDataPostRunDocument.ToDocumentDate);

            if (dateRange)
            {
                invoiceDateRange.value(dateRange);
            }
            else
            {
                invoiceDateRange.value(SysQuery::valueUnlimited());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocument</Name>
				<Source><![CDATA[
    public DemoDataPostDocument getDocument()
    {
        return DemoDataPostDocument::FreeTextInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postFreeTextInvoice</Name>
				<Source><![CDATA[
    private void postFreeTextInvoice(Query _query)
    {
        if (_query == null)
        {
            throw error(strFmt("@DemoDataPost:ProcessDocumentsQueryFailure", demoDataPostRunDocument.RunId));
        }

        CustInvoiceTable custInvoiceTable;
        DemoDataPostRunDocumentStatus documentStatus;
        DemoDataPostDocumentStatus status;

        QueryRun qRun = new QueryRun(_query);

        while (qRun.next())
        {
            status = DemoDataPostDocumentStatus::Failed;

            custInvoiceTable = qRun.get(tableNum(CustInvoiceTable));

            CustPostInvoice custPostInvoice = CustPostInvoice::construct(
                custInvoiceTable,
                CustParameters::find().CreditMaxCheck,
                NoYes::No);

            documentStatus = DemoDataPostRunDocumentStatus::addDocumentForProcessing(
                runId,
                demoDataPostRunDocument.RecId,
                custInvoiceTable.RecId,
                custInvoiceTable.TableId,
                "@SYS11670");

            try
            {
                custPostInvoice.run();

                status = DemoDataPostDocumentStatus::Success;
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0 && xSession::currentRetryCount() < DemoDataPostConstants::MaxRetryCount)
                {
                    retry;
                }
            }
            catch
            {
                Global::exceptionTextFallThrough();
            }
            finally
            {
                custInvoiceTable.reread();

                if (custInvoiceTable.InvoiceId != '')
                {
                    documentStatus.DocumentName = custInvoiceTable.InvoiceId;
                }

                ttsbegin;

                documentStatus.DocumentStatus = status;
                documentStatus.CompletionTime = DateTimeUtil::getSystemDateTime();
                documentStatus.update();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public void process()
    {
        Query query = this.buildQuery();

        this.postFreeTextInvoice(query);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>