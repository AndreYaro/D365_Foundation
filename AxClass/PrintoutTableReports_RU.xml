<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PrintoutTableReports_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class PrintoutTableReports_RU extends RunBaseBatch
{
    QueryRun            queryRun;

    str                 locationId;
    str                 salesPurchId;
    str                 custVendAccount;
    str                 documentId;
    str                 documentDate;

    boolean             showQueryDialog,
                        showQueryForm,
                        creation;

    RecordSortedList    journalList;

    Common              common;
    Object              caller;

    #define.separator(",")
    #define.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addValueToStr</Name>
				<Source><![CDATA[
    protected str addValueToStr(anytype _value, str _string)
    {
        str strVal = queryValue(_value),
            ret    = _string;
        int pos;

        pos  = strScan(_string, strVal, 1, strLen(_string));
        if (! pos)
            ret += strVal + #separator;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateNum</Name>
				<Source><![CDATA[
    abstract protected NumberSeq allocateNum(PrintoutTypeTable_RU _transType,
                                              InventLocationId    _locationId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNumSeq</Name>
				<Source><![CDATA[
    final protected boolean checkNumSeq(NumberSequenceCode _code,
                                        str                _moduleName,
                                        extendedTypeId     _type = 0)
    {
        NumberSequenceTable table = NumberSequenceTable::findByNaturalKey(_code);
        boolean             ok    = true;

        if (table.Manual)
        {
            ok = checkFailed(strFmt("@GLS104926", new DictType(_type).label(), _moduleName));
        }

        if (! table.Continuous)
        {
            ok = checkFailed(strFmt("@SYS26207", new DictType(_type).label()));
        }

        if (! ok)
        {
            throw error("@SYS18447");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanup</Name>
				<Source><![CDATA[
    protected void cleanup()
    {
        locationId      = "";
        salesPurchId    = "";
        custVendAccount = "";
        documentId      = "";
        documentDate    = "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>creation</Name>
				<Source><![CDATA[
    public boolean creation(boolean _creation = creation)
    {
        creation = _creation;

        return creation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        return this.showQueryDialog() ? super() : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmMode</Name>
				<Source><![CDATA[
    abstract public void initParmMode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    public void initQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    abstract public void initValue()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaller</Name>
				<Source><![CDATA[
    public Object parmCaller(Object _caller = caller)
    {
        caller = _caller;
        return caller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommon</Name>
				<Source><![CDATA[
    public Common parmCommon(Common _common = common)
    {
        common = _common;
        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalList</Name>
				<Source><![CDATA[
    public RecordSortedList parmJournalList(RecordSortedList _journalList)
    {
        journalList = _journalList;
        return journalList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeSeparator</Name>
				<Source><![CDATA[
    protected str removeSeparator(str _string)
    {
        return subStr(_string, 1, strLen(_string)-1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    abstract public void run()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryDialog</Name>
				<Source><![CDATA[
    public boolean showQueryDialog(boolean _showQueryDialog = showQueryDialog)
    {
        showQueryDialog = _showQueryDialog;

        return showQueryDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                    this.initQuery();
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static PrintoutTableReports_RU construct(PrintoutType_RU _printoutType)
    {
        PrintoutTableReports_RU printoutTableReports;

        switch (_printoutType)
        {
            case PrintoutType_RU::SalesInvoiceM15 :
                printoutTableReports = new PrintoutTableReports_CustInvoiceM15_RU();
                break;

            case PrintoutType_RU::PurchSlipsM4M7  :
                printoutTableReports = new PrintoutTableReports_SlipsM4M7_RU();
                break;

            case PrintoutType_RU::InventTransferInvoiceM15 :
                printoutTableReports = new PrintoutTableReports_TransferInvM15_RU();
                break;

            default:
                throw error(strFmt("@SYS26908", _printoutType));
        }

        return printoutTableReports;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceM15</Name>
				<Source><![CDATA[
    public static void createInvoiceM15(CustInvoiceJour _invoiceJour)
    {
        PrintoutTableReports_RU printout;

        printout = PrintoutTableReports_RU::construct(PrintoutType_RU::SalesInvoiceM15);
        printout.parmCommon(_invoiceJour);
        printout.initValue();

        printout.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSlipM4M7</Name>
				<Source><![CDATA[
    public static void createSlipM4M7(VendPackingSlipJour         _slipJour,
                                      PurchPackingSlipJournalCreate _packingSlipJournalCreate)
    {
        PrintoutTableReports_RU printout;

        printout = PrintoutTableReports_RU::construct(PrintoutType_RU::PurchSlipsM4M7);
        printout.parmCaller(_packingSlipJournalCreate);
        printout.parmCommon(_slipJour);

        printout.initValue();
        printout.initParmMode();
        printout.initQuery();

        printout.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferInvoiceM15</Name>
				<Source><![CDATA[
    public static void createTransferInvoiceM15(InventTransferJour _inventTransferJour)
    {
        PrintoutTableReports_RU printout;

        printout = PrintoutTableReports_RU::construct(PrintoutType_RU::InventTransferInvoiceM15);
        printout.parmCommon(_inventTransferJour);
        printout.initValue();
        printout.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>