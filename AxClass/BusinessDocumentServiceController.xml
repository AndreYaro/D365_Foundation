<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentServiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;
using Newtonsoft.Json.Linq;
using System.Runtime.Serialization;
using System.IO;
using System.Text;
using System.IO.Compression;
using System.Collections;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Globalization;
using System.Diagnostics;
using MM = Microsoft.Dynamics365.LocalizationFramework.ModelMapping;

/// <summary>
/// The class implements integration logic for generating a business document and communication with the Business Document Submission Service. 
/// </summary>
public class BusinessDocumentServiceController
{
    private RefTableId documentTableId;
    private RefRecId documentRecId;
    private ERModelMappingID erModelMappingIDContext;
    private ERModelMappingID erModelMappingIDBusinessDocument;
    private NoYes cdsIntegration;
    private NoYes isBatchSubmission;
    private BusinessDocumentResubmitType resubmitType;
    private JObject submitResponse;
    private RefRecId parentSubmissionRecId;
    private Description stageDescription;
    private int stage;
    private SysGuid uid;
    private BusinessDocumentExternalAgents channel;
    private container fileNameAndId;
    protected JObject contextObject;

    private const str ServiceName = 'businessdocumentsubmission';
    private const str ServiceNameRoute = 'electronicinvoicing';

    //Routes
    private const str BusinessDocumentsApiRoute = 'businessdocumentsubmission';
    private const str ExecutionsApiRoute = 'executions';

    private const str ExecutionVariableApiPath = 'variable';
    private const str ExecutionActionOutputApiPath = 'output';

    //Request headers
    private const str EnvironmentHeader = 'x-ms-client-subscription';
    private const str AuthorizationHeader = 'Authorization';
    private const str BearerTokenPrefix = 'Bearer ';
    private const str AcceptLanguageHeader = 'Accept-Language';
    private const str TimeZoneHeader = 'x-ms-client-timezone';
    public const str CorrelationIdHeader = 'x-ms-correlation-id';
    public const str CountryRegionCodeHeader = 'x-ms-client-countrycode';
    public const str LegalEntityIdHeader = 'x-ms-client-legalentity';

    //JSON
    public const str RootCollectionToken = 'items';
    public const str PayloadToken = 'payload';
    public const str ErrorLogToken = 'logs';
    public const str IdToken = 'id';
    public const str DocumentIdentificationToken = 'identification';
    public const str DocumentDetailsToken = 'details';
    public const str DocumentExecutionsToken = 'executions';
    public const str ExecutionStatusToken = 'status';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>completeDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the document state as completed.
    /// </summary>
    [Hookable(false)]
    public void completeDocument()
    {
        this.setDocumentState(
            BusinessDocumentServiceActions::Complete, 
            BusinessDocumentState::Completed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the document state as cancelled.
    /// </summary>
    [Hookable(false)]
    public void cancelDocument()
    {
        this.setDocumentState(
            BusinessDocumentServiceActions::Cancel, 
            BusinessDocumentState::Canceled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>failDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the document state as failed.
    /// </summary>
    [Hookable(false)]
    public void failDocument()
    {
        this.setDocumentState(
            BusinessDocumentServiceActions::Fail, 
            BusinessDocumentState::Failed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSubmissionRecId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public RefRecId parmParentSubmissionRecId(RefRecId _parentSubmissionRecId = parentSubmissionRecId)
    {
        parentSubmissionRecId = _parentSubmissionRecId;
        return parentSubmissionRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStageDescription</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Description parmStageDescription(Description _stageDescription = stageDescription)
    {
        stageDescription = _stageDescription;
        return stageDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int parmStage(int _stage = stage)
    {
        stage = _stage;
        return stage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUID</Name>
				<Source><![CDATA[
    [Hookable(false)]
	public SysGuid parmUID(SysGuid _uid = uid)
    {
        uid = _uid;
        return uid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResubmitType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public BusinessDocumentResubmitType parmResubmitType(BusinessDocumentResubmitType _resubmitType = resubmitType)
    {
        resubmitType = _resubmitType;
        return resubmitType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChannel</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public BusinessDocumentExternalAgents parmChannel(BusinessDocumentExternalAgents _channel = channel)
    {
        channel = _channel;
        return channel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewSubmission</Name>
				<Source><![CDATA[
    private boolean isNewSubmission(BusinessDocumentSubmission _submission)
    {
        return !_submission.UID || parentSubmissionRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentState</Name>
				<Source><![CDATA[
    private void setDocumentState(
        str _setStatusAction,
        BusinessDocumentState _state) 
    {
        boolean isSuccess;

        ERForInvoicingActivities activities = ERForInvoicingActivities::newFromCategory(classStr(BusinessDocumentServiceController));
        using (var activityContext = activities.setDocumentState())
        {
            try
            {
                BusinessDocumentSubmission submission = BusinessDocumentSubmission::findStage(
                    documentTableId,
                    documentRecId,
                    stage);

                JObject response = BusinessDocumentServiceController::requestServiceForJSON(
                    '',
                    _setStatusAction,
                    submission.documentUidStr(),
                    false,
                    BusinessDocumentWebHelper::HttpPost);

                if (response)
                {
                    JToken exception = response.SelectToken(BusinessDocumentWebHelper::ExceptionToken);

                    ttsbegin;

                    submission.selectForUpdate(true);
                    submission.Log += BusinessDocumentWebHelper::getErrorLog(response);

                    if (!exception)
                    {
                        submission.State = _state;
                    }
            
                    submission.write();

                    ttscommit;
                }

                isSuccess = true;
            }
            catch (Exception::CLRError)
            {
                str message = SRSProxy::getLastClrExceptionMessage();
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyError, message);
                error(message);
            }
            finally
            {
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyIsSuccess, any2Str(isSuccess));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init(
        RefTableId _documentTableId,
        RefRecId _documentRecId)
    {
        documentTableId = _documentTableId;
        documentRecId = _documentRecId;

        BusinessDocumentTypes documentType = this.getDocumentType();

        erModelMappingIDContext = documentType.ERModelMappingContext;
        erModelMappingIDBusinessDocument = documentType.ERModelMappingBusinessDocument;
        cdsIntegration = documentType.CDSIntegration;
        isBatchSubmission = documentType.BatchSubmission;
        fileNameAndId = documentType.getFileNameAndId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentType</Name>
				<Source><![CDATA[
    protected BusinessDocumentTypes getDocumentType()
    {
        return BusinessDocumentTypes::find(tableId2Name(documentTableId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContextObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns a context information for a business document.
    /// </summary>
    /// <returns>A JSON structure containing context execution information.</returns>
    public JObject getContextObject()
    {
        if (!contextObject)
        {
            ERModelMappingTable erModelMappingTable = ERModelMappingTable::find(erModelMappingIDContext);

            if (!erModelMappingTable)
            {
                throw error("@BusinessDocumentSubmissionService:BusDocContextNotSetup");
            }

            contextObject = BusinessDocumentSubmissionFunctions::createModelMappingRunToJson(
                erModelMappingTable, 
                documentTableId, 
                documentRecId, 
                classStr(BusinessDocumentServiceController),
                null);
        }

        return contextObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContextStr</Name>
				<Source><![CDATA[
    private str getContextStr()
    {
        str contextStr;
        JObject context = this.getContextObject();
        
        if (context)
        {
            JArray array = context.SelectToken(BusinessDocumentSubmissionConstants::ContextProperty);
            for (int i = 0; i < array.Count; i++)
            {
                JObject parameter = array.get_Item(i);
                JToken name = parameter.SelectToken('Name');
                JToken value = parameter.SelectToken('Value');

                if (name && value)
                {
                    contextStr += (contextStr ? ', ' : '') +
                        name.ToString() + ': ' +
                        value.ToString();
                }
            }
        }

        if (contextStr)
        {
            contextStr = "@SYS76571" + ': [' + contextStr + ']';
        }
 
        return contextStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubmitResponse</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns the service response for a submission request.
    /// </summary>
    /// <returns>A JSON structure containing the service response for a submission request.</returns>
    public JObject getSubmitResponse()
    {
        return submitResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDocumentInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns the business document submission information.
    /// </summary>
    /// <returns>A <c>BusinessDocumentInfo</c> class instance containing the business document submission information.</returns>
    public BusinessDocumentInfo lookupDocumentInfo()
    {
        BusinessDocumentInfo documentInfo;
        boolean isSuccess;

        ERForInvoicingActivities activities = ERForInvoicingActivities::newFromCategory(classStr(BusinessDocumentServiceController));
        using (var activityContext = activities.lookupDocumentInfo())
        {
            try
            {
                BusinessDocumentSubmission submission = BusinessDocumentSubmission::findStage(
                    documentTableId,
                    documentRecId,
                    stage);

                if (submission || uid)
                {
                    if (!submission)
                    {
                        submission.UID =  uid;
                    }

                    JObject response = BusinessDocumentServiceController::requestServiceForJSON(
                        '',
                        '',
                        submission.documentUidStr(),
                        true);

                    if (response)
                    {
                        JToken exception = response.SelectToken(BusinessDocumentWebHelper::ExceptionToken);

                        if (!exception)
                        {
                            documentInfo = BusinessDocumentInfo::newFromJSON(response);
                            documentInfo.parmSubmission(submission);
                        }

                        BusinessDocumentWebHelper::showErrorLog(response);
                    }
                }

                isSuccess = true;
            }
            catch (Exception::CLRError)
            {
                str message = SRSProxy::getLastClrExceptionMessage();
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyError, message);
                error(message);
            }
            finally
            {
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyIsSuccess, any2Str(isSuccess));
            }
        }

        return documentInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method runs a submission to the external channel.
    /// </summary>
    [Hookable(false)]
    public void runChannel()
    {
        if (!channel.AgentId ||
            !channel.LegalEntityId ||
            !channel.ERModelMappingContext)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        BusinessDocumentTelemetry::startEvent(
            ERForInvoicingInstrumentationConstants::GenerateDocument,
            funcName());
        
        Stopwatch stopwatch = Stopwatch::StartNew();
        boolean success;
        str contextStr;
        var requestJson = new JObject();

        try
        {
            erModelMappingIDContext = channel.ERModelMappingContext;

            changecompany(channel.LegalEntityId)
            {
                submitResponse = this.getContextObject();
            }
            contextStr = this.getContextStr();
        
            var jContext = contextObject.SelectToken(BusinessDocumentSubmissionConstants::ContextProperty);
            var jIdentification = contextObject.SelectToken('Identification');
            if (!jIdentification)
            {
                jIdentification = new JArray();
            }

            BusinessDocumentSubmissionFunctions::convertSerializedProperties(jContext);
            BusinessDocumentSubmissionFunctions::convertSerializedProperties(jIdentification);

            requestJson.Add(new JProperty(BusinessDocumentSubmissionConstants::ContextProperty, jContext));
            requestJson.Add(new JProperty(BusinessDocumentSubmissionConstants::IdentificationProperty, jIdentification));
            
            success = true;
        }
        finally
        {
            stopwatch.Stop();
            BusinessDocumentTelemetry::finishEvent(
                ERForInvoicingInstrumentationConstants::GenerateDocument,
                funcName(),
                success,
                stopwatch.ElapsedMilliseconds);
        }

        BusinessDocumentTelemetry::startEvent(
            ERForInvoicingInstrumentationConstants::SendDocument,
            funcName());

        stopwatch = Stopwatch::StartNew();
        success = false;

        try
        {
            var response = BusinessDocumentServiceController::requestServiceForJSON(
                requestJson.ToString(),
                channel.ChannelType == BusinessDocumentChannelType::Import ? BusinessDocumentServiceActions::Submit : BusinessDocumentServiceActions::ByAgentIdExport,
                '',
                false,
                BusinessDocumentWebHelper::HttpPost);

            if (response)
            {
                var exception = response.SelectToken(BusinessDocumentWebHelper::ExceptionToken);
                if (exception)
                {
                    BusinessDocumentWebHelper::showErrorLog(response);
                    warning(contextStr);
                }
                else
                {
                    success = true;
                }
            }

        }
        finally
        {
            stopwatch.Stop();
            BusinessDocumentTelemetry::finishEvent(
                ERForInvoicingInstrumentationConstants::SendDocument,
                funcName(),
                success,
                stopwatch.ElapsedMilliseconds);
        }

        BusinessDocumentTelemetry::actionEvent(
            strFmt(ERForInvoicingInstrumentationConstants::SubmissionFromChannel, channel.AgentId),
            funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method runs the business document submission process.
    /// </summary>
    public void run()
    {
        BusinessDocumentTelemetry::startEvent(
            ERForInvoicingInstrumentationConstants::GenerateDocument, 
            funcName());
        
        Stopwatch stopwatch = Stopwatch::StartNew();
        boolean success;
        
        JObject requestJson;
        JToken jContext;
        boolean isNewSubmission;
        BusinessDocumentSubmission submission;
        str contextStr;

        try
        {
            submission = BusinessDocumentSubmission::findStage(
                documentTableId,
                documentRecId,
                stage);
            
            requestJson = new JObject();
            submitResponse = this.getContextObject();
            contextStr = this.getContextStr();
            jContext = contextObject.SelectToken(BusinessDocumentSubmissionConstants::ContextProperty);
            JToken jIdentification = contextObject.SelectToken(BusinessDocumentSubmissionConstants::IdentificationProperty);
            JToken jInputParameters = contextObject.SelectToken(BusinessDocumentSubmissionConstants::InputParametersProperty);
            JToken jAdditionalVariables = contextObject.SelectToken(BusinessDocumentSubmissionConstants::AdditionalVariablesProperty);
            JToken jIntegrationEndpoint = contextObject.SelectToken('CDSIntegrationEndpoint');

            BusinessDocumentSubmissionFunctions::convertSerializedProperties(jContext);
            BusinessDocumentSubmissionFunctions::convertSerializedProperties(jIdentification);

            isNewSubmission = this.isNewSubmission(submission);
            if (isNewSubmission)
            {
                submission.Filename = conPeek(fileNameAndId, 1);

                requestJson.Add(new JProperty(BusinessDocumentSubmissionConstants::ContextProperty, jContext));
                requestJson.Add(new JProperty(BusinessDocumentSubmissionConstants::IdentificationProperty, jIdentification));

                if (FeatureStateProvider::isFeatureEnabled(BusinessDocumentExtendedDocumentIdentificationInSubmissionLogFeature::instance()))
                {
                    JToken jDetails = contextObject.SelectToken(BusinessDocumentSubmissionConstants::DetailsProperty);

                    if (jDetails)
                    {
                        BusinessDocumentSubmissionFunctions::convertSerializedProperties(jDetails);
                        requestJson.Add(new JProperty(BusinessDocumentSubmissionConstants::DetailsProperty, jDetails));
                    }
                }

                JArray flowVariables = new JArray();

                if (!cdsIntegration 
                    || !jInputParameters
                    || !jIntegrationEndpoint)
                {
                    this.addDocumentDataModel(
                        jContext.ToString(), 
                        flowVariables,
                        contextStr);
                }
                else
                {
                    this.addIntegrationPoint(jIntegrationEndpoint, flowVariables);
                    BusinessDocumentSubmissionFunctions::addInputParametersForCDS(jInputParameters, flowVariables);
                }

                var fileNameVariableId = conPeek(fileNameAndId, 2);
                if (fileNameVariableId)
                {
                    BusinessDocumentSubmissionFunctions::addFlowVariable(
                        fileNameVariableId,
                        'string',
                        submission.Filename,
                        flowVariables);
                }

                if (jAdditionalVariables)
                {
                    BusinessDocumentSubmissionFunctions::addAdditionalFlowVariablesFromContext(jAdditionalVariables, flowVariables);
                }

                BusinessDocumentSubmissionFunctions::convertSerializedProperties(flowVariables);

                requestJson.Add(new JProperty('FlowVariables', flowVariables));
            }

            success = true;
        }
        finally
        {
            stopwatch.Stop();
            BusinessDocumentTelemetry::finishEvent(
                ERForInvoicingInstrumentationConstants::GenerateDocument,
                funcName(), 
                success,
                stopwatch.ElapsedMilliseconds);
        }

        if (!success)
        {
            return;
        }

        BusinessDocumentTelemetry::startEvent(
            ERForInvoicingInstrumentationConstants::SendDocument,
            funcName());

        stopwatch = Stopwatch::StartNew();
        success = false;

        try
        {
            str action = isNewSubmission
                    ? this.getNewSubmissionAction()
                    : this.getResubmitAction(submission);

            JObject response = BusinessDocumentServiceController::requestServiceForJSON(
                isNewSubmission ?
                    requestJson.ToString() :
                    jContext.ToString(),
                action,
                isNewSubmission ?
                    this.getNewSubmissionKey() :
                    submission.documentUidStr(),
                false,
                BusinessDocumentWebHelper::HttpPost);

            if (response)
            {
                success = this.processSubmissionResponse(
                              submission,
                              response,
                              isNewSubmission,
                              contextStr);
            }
        }
        finally
        {
            this.postSubmission();
            stopwatch.Stop();
            BusinessDocumentTelemetry::finishEvent(
                ERForInvoicingInstrumentationConstants::SendDocument,
                funcName(), 
                success,
                stopwatch.ElapsedMilliseconds);
        }

        BusinessDocumentTelemetry::actionEvent(
            strFmt(ERForInvoicingInstrumentationConstants::Submission,
                isNewSubmission ?
                    ERForInvoicingInstrumentationConstants::SubmissionTypeNewSubmission :
                    ERForInvoicingInstrumentationConstants::SubmissionTypeResubmission,
                tableId2Name(documentTableId)),
            funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSubmission</Name>
				<Source><![CDATA[
    protected void postSubmission()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewSubmissionAction</Name>
				<Source><![CDATA[
    protected str getNewSubmissionAction()
    {
        return BusinessDocumentServiceActions::Submit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewSubmissionKey</Name>
				<Source><![CDATA[
    protected str getNewSubmissionKey()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResubmitAction</Name>
				<Source><![CDATA[
    private str getResubmitAction(BusinessDocumentSubmission _submission)
    {
        str ret = BusinessDocumentServiceActions::Resubmit;

        switch (this.parmResubmitType())
        {
            case BusinessDocumentResubmitType::ResubmitFromFailedAction:
                if (!_submission || _submission.State == BusinessDocumentState::Failed)
                {
                    ret = BusinessDocumentServiceActions::ResubmitFromFailedAction;
                }

                break;

            case BusinessDocumentResubmitType::ResubmitToExecuteUpdateActions:
                if (_submission && _submission.State == BusinessDocumentState::PendingUpdateActionsExecution)
                {
                    ret = BusinessDocumentServiceActions::ExecutePendingUpdateAction;
                }

                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addIntegrationPoint</Name>
				<Source><![CDATA[
    private void addIntegrationPoint(
        JToken _integrationEndpoint,
        JArray _flowVariables)
    {
        BusinessDocumentSubmissionFunctions::addFlowVariable(
            'IntegrationPoint', 
            'string', 
            _integrationEndpoint.ToString(),
            _flowVariables);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDocumentDataModel</Name>
				<Source><![CDATA[
    private void addDocumentDataModel(
        str _contextPayload,
        JArray _flowVariables,
        str _contextStr)
    {
        MM.DataModelUsageSpecification specification = this.getDataModelUsageSpecification(_contextPayload, _contextStr);
            
        ERModelMappingTable erModelMappingTable = this.getBusinesDocumentModelMappingTable();
        System.String compressedDocumentContent = this.getCompressedDocumentContent(specification, erModelMappingTable);

        this.processDocumentDataModel(compressedDocumentContent, _flowVariables);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDocumentDataModel</Name>
				<Source><![CDATA[
    protected void processDocumentDataModel(System.String _compressedDocumentContent, JArray _flowVariables)
    {
        BusinessDocumentSubmissionFunctions::addFlowVariable(
            'BusinessDocumentDataModel',
            'compressedFile',
            _compressedDocumentContent,
            _flowVariables);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompressedDocumentContent</Name>
				<Source><![CDATA[
    private System.String getCompressedDocumentContent(
        MM.DataModelUsageSpecification _specification,
        ERModelMappingTable _erModelMappingTable)
    {
        JObject jdocumentData = this.buildDocumentDataModel(_specification, _erModelMappingTable);

        System.Byte[] documentContent = Encoding::UTF8.GetBytes(jdocumentData.ToString());

        return BusinessDocumentServiceController::compressDocumentContent(documentContent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDocumentDataModel</Name>
				<Source><![CDATA[
    protected JObject buildDocumentDataModel(
        MM.DataModelUsageSpecification _specification,
        ERModelMappingTable _erModelMappingTable)
    {
        return BusinessDocumentSubmissionFunctions::createModelMappingRunToJson(
            _erModelMappingTable,
            documentTableId,
            documentRecId,
            classStr(BusinessDocumentServiceController),
            _specification);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusinesDocumentModelMappingTable</Name>
				<Source><![CDATA[
    private ERModelMappingTable getBusinesDocumentModelMappingTable()
    {
        ERModelMappingTable erModelMappingTable;

        if (erModelMappingIDBusinessDocument != 0)
        {
            erModelMappingTable = ERModelMappingTable::find(erModelMappingIDBusinessDocument);
        }
        else
        {
            erModelMappingTable = ERModelMappingTable::findByGUID(str2Guid(contextObject.SelectToken('ModelMappingID').ToString()));
        }

        return erModelMappingTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataModelUsageSpecification</Name>
				<Source><![CDATA[
    private MM.DataModelUsageSpecification getDataModelUsageSpecification(str _contextPayload, str _contextStr)
    {
        MM.DataModelUsageSpecification ret;
        JObject response = BusinessDocumentServiceController::requestServiceForJSON(
            _contextPayload,
            BusinessDocumentServiceActions::GetModelSpecification,
            '',
            true,
            BusinessDocumentWebHelper::HttpPost);

        JToken exception = response.SelectToken(BusinessDocumentWebHelper::ExceptionToken);
        if (exception)
        {
            BusinessDocumentWebHelper::showErrorLog(response);
            warning(_contextStr);

            throw error("@ElectronicReporting:OperationCanceled");
        }

        JObject modelMappingSpec = response.SelectToken(PayloadToken) as JObject;
        if (modelMappingSpec)
        {
            IEnumerable children = modelMappingSpec.SelectTokens('$.*');
            IEnumerator enumerator = children.GetEnumerator();

            while (enumerator.MoveNext())
            {
                JObject usedPaths = enumerator.Current;
                JArray paths = usedPaths.SelectToken('usedPaths');

                if (paths && paths.Count)
                {
                    ret = new MM.DataModelUsageSpecification();
                    var pathList = ret.UsedPaths;

                    for (int idx = 0; idx < paths.Count; idx++)
                    {
                        JToken path = paths.get_Item(idx);
                        pathList.Add(path.ToString());
                    }

                    ret = new MM.DataModelUsageSpecification(pathList);
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSubmissionResponse</Name>
				<Source><![CDATA[
    private boolean processSubmissionResponse(
        BusinessDocumentSubmission _submission,
        JObject _response,
        boolean _isNewSubmission,
        str _contextStr)
    {
        boolean success = true;

        JToken key = _response.SelectToken(IdToken);
        JToken executions = _response.SelectToken(DocumentExecutionsToken);
        JToken exception = _response.SelectToken(BusinessDocumentWebHelper::ExceptionToken);

        if (!exception)
        {
            submitResponse = _response;
        }

        ttsbegin;
            
        if (_submission)
        {
            _submission.selectForUpdate(true);
        }
        else
        {
            _submission.RefTableId = documentTableId;
            _submission.RefRecId = documentRecId;
        }

        if (_isNewSubmission && key)
        {
            _submission.UID = guidFromString(key.ToString());
        }

        if (_isNewSubmission && executions)
        {
            JArray executionsArray = executions as JArray;
            _submission.ExecutionId = this.getScheduledExecutionId(executions);
        }
        else if (!_isNewSubmission && key)
        {
            _submission.ExecutionId = guidFromString(key.ToString());
        }

        if (_isNewSubmission)
        {
            _submission.Log = conNull();
            _submission.SubmittedDateTime = Global::utcDateTime2SystemDateTime(DateTimeUtil::applyTimeZoneOffset(
                                                DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone())).ToString();
        }

        if (exception)
        {
            success = false;

            var errorLog = BusinessDocumentWebHelper::getErrorLog(_response) + _contextStr;
            _submission.Log += errorLog;

            BusinessDocumentWebHelper::showErrorLog(_response);
            warning(_contextStr);
        }
        
        _submission.State = exception ? BusinessDocumentState::Failed : BusinessDocumentState::Scheduled;
        _submission.setTimestampTicks(System.DateTime::UtcNow);

        if (parentSubmissionRecId)
        {
            _submission.ParentRefRecId = parentSubmissionRecId;
            _submission.StageDescription = stageDescription;
            _submission.insert();
        }
        else
        {
            _submission.StageDescription = "@BusinessDocumentSubmissionService:InitialSubmissionDesc";
            _submission.write();
        }

        ttscommit;

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getScheduledExecutionId</Name>
				<Source><![CDATA[
    private guid getScheduledExecutionId(JArray _executions)
    {
        guid ret;
        int i;
        while (_executions && i < _executions.Count)
        {
            JObject execution = _executions.get_Item(i);
            JValue executionStatus = execution.SelectToken(ExecutionStatusToken);
            if (executionStatus && executionStatus.ToString() == enum2Str(BusinessDocumentState::Scheduled))
            {
                ret = guidFromString(execution.SelectToken(IdToken).ToString());
                break;
            }
            i++;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExecutionVariable</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns an execution variable contents.
    /// </summary>
    /// <param name = "_executionRequestId">The execution request ID.</param>
    /// <param name = "_variableName">The variable name.</param>
    /// <returns>The execution variable contents.</returns>
    [Hookable(false)]
    public static str getExecutionVariable(SysGuid _executionRequestId, str _variableName)
    {
        str executionRequestId = strLwr(guid2StrWithoutBraces(_executionRequestId));

        str fileContents;
        boolean exception;
        boolean isSuccess;

        ERForInvoicingActivities activities = ERForInvoicingActivities::newFromCategory(classStr(BusinessDocumentServiceController));
        using (var activityContext = activities.getExecutionVariable())
        {
            try
            {
                using (var webHelper = BusinessDocumentServiceController::createWebHelper(ExecutionsApiRoute))
                {
                    [exception, fileContents] = webHelper.callWebService(
                        BusinessDocumentWebHelper::HttpGet,
                        executionRequestId,
                        _variableName);
                }
                isSuccess = true;
            }
            catch (Exception::CLRError)
            {
                str message = SRSProxy::getLastClrExceptionMessage();
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyError, message);
                error(message);
            }
            finally
            {
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyIsSuccess, any2Str(isSuccess));
            }
        }

        return exception ? '' : fileContents;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExecutionVariableV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns an execution variable contents.
    /// </summary>
    /// <param name = "_executionRequestVariableId">The execution request variable ID.</param>
    /// <returns>The execution variable contents.</returns>
    [Hookable(false)]
    public static str getExecutionVariableV2(RefRecId _executionRequestVariableId)
    {
        str executionRequestVariableId = int642Str(_executionRequestVariableId);

        str fileContents;
        boolean exception;
        boolean isSuccess;

        ERForInvoicingActivities activities = ERForInvoicingActivities::newFromCategory(classStr(BusinessDocumentServiceController));
        using (var activityContext = activities.getExecutionVariable())
        {
            try
            {
                using (var webHelper = BusinessDocumentServiceController::createWebHelper(ExecutionsApiRoute))
                {
                    [exception, fileContents] = webHelper.callWebService(
                        BusinessDocumentWebHelper::HttpGet,
                        ExecutionVariableApiPath,
                        executionRequestVariableId);
                }
                isSuccess = true;
            }
            catch (Exception::CLRError)
            {
                str message = SRSProxy::getLastClrExceptionMessage();
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyError, message);
                error(message);
            }
            finally
            {
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyIsSuccess, any2Str(isSuccess));
            }
        }

        return exception ? '' : fileContents;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutputFileByExecutionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns zip file with documents created for executions.  
    /// </summary>
    /// <param name = "_executionIds">List of execution ids.</param>
    /// <returns>Stream containing zip file.</returns>
    [Hookable(false)]
    public static System.IO.Stream getOutputFileByExecutionId(JArray _executionIds)
    {
        System.IO.Stream responseStream;
        boolean isSuccess;

        ERForInvoicingActivities activities = ERForInvoicingActivities::newFromCategory(classStr(BusinessDocumentServiceController));
        using (var activityContext = activities.getOutputFileByExecutionId())
        {
            try
            {
                using (var webHelper = BusinessDocumentServiceController::createWebHelper(ExecutionsApiRoute))
                {
                    HttpResponseMessage responseMessage; 
                    str exceptionMessage;
                    [exceptionMessage, responseMessage] = webHelper.callWebServiceAndGetResponse(
                        BusinessDocumentWebHelper::HttpPost,
                        '',
                        BusinessDocumentServiceActions::DownloadExportable,
                        _executionIds.ToString());
                
                    if (responseMessage && responseMessage.Content && responseMessage.IsSuccessStatusCode)
                    {
                        responseStream = responseMessage.Content.ReadAsStreamAsync().Result;
                        isSuccess = true;
                    }

                    if (responseMessage && !responseMessage.IsSuccessStatusCode && exceptionMessage)
                    {
                        activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyError, exceptionMessage);
                        error(exceptionMessage);
                    }
                }
            }
            catch (Exception::CLRError)
            {
                str message = SRSProxy::getLastClrExceptionMessage();
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyError, message);
                error(message);
            }
            finally
            {
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyIsSuccess, any2Str(isSuccess));
            }
        }

        return responseStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutputFileById</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns an output file contents.
    /// </summary>
    /// <param name = "_documentId">The business document ID.</param>
    /// <param name = "_executionRequestId">The execution request ID.</param>
    /// <param name = "_executionActionId">The execution action ID.</param>
    /// <param name = "_outputParamId">The output parameter ID.</param>
    /// <returns>The output file contents.</returns>
    [Hookable(false)]
    public static str getOutputFileById(
        SysGuid _documentId,
        SysGuid _executionRequestId,
        SysGuid _executionActionId,
        str _outputParamId)
    {
        str guidStr(SysGuid _guid)
        {
            return strLwr(guid2StrWithoutBraces(_guid));
        }
        
        str fileContents;
        boolean exception;
        boolean isSuccess;

        ERForInvoicingActivities activities = ERForInvoicingActivities::newFromCategory(classStr(BusinessDocumentServiceController));
        using (var activityContext = activities.getOutputFileById())
        {
            try
            {
                using (var webHelper = BusinessDocumentServiceController::createWebHelper())
                {
                    [exception, fileContents] = webHelper.callWebService(
                        BusinessDocumentWebHelper::HttpGet,
                        guidStr(_documentId),
                        guidStr(_executionRequestId) + '/' +
                        guidStr(_executionActionId) + '/' +
                        _outputParamId);
                }
                isSuccess = true;
            }
            catch (Exception::CLRError)
            {
                str message = SRSProxy::getLastClrExceptionMessage();
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyError, message);
                error(message);
            }
            finally
            {
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyIsSuccess, any2Str(isSuccess));
            }
        }

        return exception ? '' : fileContents;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutputFileByIdV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns an output file contents.
    /// </summary>
    /// <param name = "_outputParameterId">The business document execution action output parameter ID.</param>
    /// <returns>The output file contents.</returns>
    [Hookable(false)]
    public static str getOutputFileByIdV2(
        RefRecId _outputParameterId)
    {        
        str fileContents;
        boolean exception;
        boolean isSuccess;

        ERForInvoicingActivities activities = ERForInvoicingActivities::newFromCategory(classStr(BusinessDocumentServiceController));
        using (var activityContext = activities.getOutputFileById())
        {
            try
            {
                using (var webHelper = BusinessDocumentServiceController::createWebHelper(ExecutionsApiRoute))
                {
                    [exception, fileContents] = webHelper.callWebService(
                        BusinessDocumentWebHelper::HttpGet,
                        ExecutionActionOutputApiPath,
                        int642Str(_outputParameterId));
                }
                isSuccess = true;
            }
            catch (Exception::CLRError)
            {
                str message = SRSProxy::getLastClrExceptionMessage();
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyError, message);
                error(message);
            }
            finally
            {
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyIsSuccess, any2Str(isSuccess));
            }
        }

        return exception ? '' : fileContents;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static BusinessDocumentServiceController construct()
    {
        return new BusinessDocumentServiceController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method instantiates the controller based on the incoming business document header.
    /// </summary>
    /// <param name = "_document">The business document header.</param>
    /// <returns>The controller instance.</returns>
    public static BusinessDocumentServiceController newDocument(Common _document)
    {
        if (!_document)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        if (_document.TableId == tableNum(BusinessDocumentBatchSubmission))
        {
            BusinessDocumentBatchSubmission batchSubmission = _document as BusinessDocumentBatchSubmission;
            BusinessDocumentBatchSubmissionController controller = BusinessDocumentBatchSubmissionController::newBatchSubmission(batchSubmission.Id, batchSubmission.DocumentTypeTableName);

            return controller;
        }
        else
        {
            BusinessDocumentServiceController controller = BusinessDocumentServiceController::construct();

            controller.init(_document.TableId, _document.RecId);

            return controller;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSubmission</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method instantiates the controller based on the incoming business document submission.
    /// </summary>
    /// <param name = "_submission">The business document submission.</param>
    /// <returns>The controller instance.</returns>
    public static BusinessDocumentServiceController newSubmission(BusinessDocumentSubmission _submission)
    {
        if (!_submission)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        var controller = BusinessDocumentServiceController::newDocument(_submission.getDocument());
        controller.parmStage(_submission.Stage);
        controller.parmUID(_submission.UID);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSubmissionByExternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method instantiates the controller based on the incoming business document submission.
    /// </summary>
    /// <param name = "_submission">The business document submission.</param>
    /// <returns>The controller instance.</returns>
    public static BusinessDocumentServiceController newSubmissionByExternal(BusinessDocumentSubmissionExternal _submission)
    {
        if (!_submission)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        var commonDoc = _submission.getDocument();
        BusinessDocumentServiceController controller;
        if (commonDoc)
        {
            controller = BusinessDocumentServiceController::newDocument(commonDoc);
        }
        else
        {
            controller = new BusinessDocumentServiceController();
        }

        controller.parmUID(_submission.UID);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method instantiates the controller based on the incoming channel setup.
    /// </summary>
    /// <param name = "_channel">The external channel setup.</param>
    /// <returns>The controller instance.</returns>
    [Hookable(false)]
    public static BusinessDocumentServiceController newChannel(BusinessDocumentExternalAgents _channel)
    {
        if (!_channel)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        var controller = new BusinessDocumentServiceController();
        controller.parmChannel(_channel);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the class with the specified arguments.
    /// </summary>
    /// <param name = "_args">The specified arguments.</param>
    public static void main(Args _args)
    {
        SysAnyType sysAnyType = _args.parmObject();
        
        Common common;
        
        [common] = sysAnyType.value();
 
        BusinessDocumentServiceController::newDocument(common).run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRequestHeaders</Name>
				<Source><![CDATA[
    private static void addRequestHeaders(HttpRequestMessage _request)
    {
        HttpRequestHeaders headers = _request.Headers;
 
        BusinessDocumentApiConfigurationProvider provider = BusinessDocumentApiConfigurationProvider::construct();
        headers.Add(EnvironmentHeader, provider.getEnvironmentId());
        
        var culture = infolog.language();
        headers.Add(AcceptLanguageHeader, culture);

        str timeZoneId = DateTimeUtil::getTimeZoneId(DateTimeUtil::GetUserPreferredTimeZone());
        headers.Add(TimeZoneHeader, timeZoneId);

        headers.Date = System.DateTimeOffset::UtcNow;

        str correlationId = strLwr(guid2StrWithoutBraces(newGuid()));
        headers.Add(CorrelationIdHeader, correlationId);

        headers.Add(CountryRegionCodeHeader, SysCountryRegionCode::countryInfo());
        headers.Add(LegalEntityIdHeader, curExt());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAuthorizationHeader</Name>
				<Source><![CDATA[
    private static void addAuthorizationHeader(HttpRequestMessage _request)
    {
        List serviceNames = new List(Types::String);
        serviceNames.addEnd(ServiceName);

        ERForInvoicingSecurityServiceClient::addTokenToRequest(_request, serviceNames);
    }

]]></Source>
			</Method>
			<Method>
				<Name>compressDocumentContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// The methods compresses the document content with GZip compression.
    /// </summary>
    /// <param name = "_bytes">The input bytes with the document content.</param>
    /// <returns>A base64-encoded compressed document content.</returns>
    [Hookable(false)]
    public static System.String compressDocumentContent(System.Byte[] _bytes)
    {
        using (var originalStream = new MemoryStream(_bytes))
        {
            using (var compressedStream = new MemoryStream())
            {
                using (var compressionStream = new GZipStream(compressedStream, CompressionMode::Compress, true))
                {
                    originalStream.CopyTo(compressionStream);
                }
                        
                compressedStream.Seek(0, SeekOrigin::Begin);
                System.Byte[] streamBytes = compressedStream.ToArray();
                
                return streamBytes != null ? System.Convert::ToBase64String(streamBytes) : '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestServiceForJSON</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method calls a Web API service method expecting the result in JSON format.
    /// </summary>
    /// <param name = "_jsonBody">The JSON body of the HTTP request.</param>
    /// <param name = "_action">The name of controller action.</param>
    /// <param name = "_key">The ID of a business document. </param>
    /// <param name = "_fullJSON">A flag specifying if a full HTTP request should be returned.</param>
    /// <param name = "_method">The HTTP request method.</param>
    /// <returns>A <c>JObject</c> containing the server response or result/exception information.</returns>
    public static JObject requestServiceForJSON(
        str _jsonBody,
        str _action,
        str _key,
        boolean _fullJSON = false,
        str _method = BusinessDocumentWebHelper::HttpPost)
    {
        boolean isSuccess = true;
        JObject reducedResponse;

        ERForInvoicingActivities activities = ERForInvoicingActivities::newFromCategory(classStr(BusinessDocumentServiceController));
        using (var activityContext = activities.requestWebServiceForJson())
        {
            activityContext.addCustomProperty(BusinessDocumentInstrumentationConstants::CustomPropertyAction, _action);
            try
            {
                if (prmIsDefault(_method) && ! _jsonBody)
                {
                    _method = BusinessDocumentWebHelper::HttpGet;
                }

                str responseText;
                boolean exception;
                using (var webHelper = BusinessDocumentServiceController::createWebHelper())
                {
                    [exception, responseText] = webHelper.callWebService(
                        _method,
                        _key,
                        _action,
                        _jsonBody);
                }
        
                if (strStartsWith(responseText, '['))
                {
                    responseText = strFmt('{"%1" : %2}', RootCollectionToken, responseText);
                }
        
                JObject response;
                try
                {
                    if (strStartsWith(responseText, '{'))
                    {
                        response = Newtonsoft.Json.JsonConvert::DeserializeObject(responseText);
                    }
                }
                catch
                {
                }

                reducedResponse = new JObject();
                if (exception)
                {
                    reducedResponse.Add(new JProperty(BusinessDocumentWebHelper::ExceptionToken, exception));
                    if (response)
                    {
                        BusinessDocumentWebHelper::copyJsonToken(
                            response,
                            reducedResponse,
                            ErrorLogToken,
                            ErrorLogToken);
                    }
                    else
                    {
                        reducedResponse.Add(new JProperty(BusinessDocumentWebHelper::ErrorMessageToken, responseText));
                    }

                    isSuccess = false;
                    activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyError, reducedResponse.ToString());

                    return reducedResponse;
                }

                if (_fullJSON)
                {
                    return response ? response : reducedResponse;
                }

                BusinessDocumentWebHelper::copyJsonToken(
                    response,
                    reducedResponse,
                    ErrorLogToken,
                    ErrorLogToken);

                JToken payload = response.SelectToken(PayloadToken);
                JArray array = payload as JArray;

                response = array && array.Count > 0
                    ? array.get_Item(0)
                    : payload as JObject;
                    
                BusinessDocumentWebHelper::copyJsonToken(
                    response,
                    reducedResponse,
                    IdToken,
                    IdToken);

                BusinessDocumentWebHelper::copyJsonToken(
                    response,
                    reducedResponse,
                    DocumentIdentificationToken,
                    DocumentIdentificationToken);

                if (FeatureStateProvider::isFeatureEnabled(BusinessDocumentExtendedDocumentIdentificationInSubmissionLogFeature::instance()))
                {
                    BusinessDocumentWebHelper::copyJsonToken(
                        response,
                        reducedResponse,
                        DocumentDetailsToken,
                        DocumentDetailsToken);
                }

                BusinessDocumentWebHelper::copyJsonToken(
                    response,
                    reducedResponse,
                    DocumentExecutionsToken,
                    DocumentExecutionsToken);
            }
            catch (Exception::CLRError)
            {
                isSuccess = false;
                str message = SRSProxy::getLastClrExceptionMessage();
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyError, message);
                error(message);
            }
            finally
            {
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyIsSuccess, any2Str(isSuccess));
            }
        }
        
        return reducedResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestByChannels</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method requests for a collection of documents by channels.
    /// </summary>
    /// <param name = "_channels">Channels to retrieve documents for.</param>
    /// <param name = "_createdAfterDateTimeUtc">Timestamp to retrieve documents after.</param>
    /// <returns>A <c>JObject</c> containing documents collection.</returns>
    [Hookable(false)]
    public static JObject requestByChannels(container _channels, str _createdAfterDateTimeUtc)
    {
        ERForInvoicingActivities activities = ERForInvoicingActivities::newFromCategory(classStr(BusinessDocumentServiceController));
        using (var activityContext = activities.requestDocumentsByAgentIds())
        {
            return BusinessDocumentServiceController::requestForOutsideRelatedDocuments(
                BusinessDocumentServiceActions::ByAgentIdWithExecutions,
                _createdAfterDateTimeUtc,
                activityContext,
                _channels);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestResumed</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method requests for a collection of resumed documents.
    /// </summary>
    /// <param name = "_resumedAfterDateTimeUtc">Timestamp to retrieve documents after.</param>
    /// <returns>A <c>JObject</c> containing documents collection.</returns>
    [Hookable(false)]
    public static JObject requestResumed(str _resumedAfterDateTimeUtc)
    {
        ERForInvoicingActivities activities = ERForInvoicingActivities::newFromCategory(classStr(BusinessDocumentServiceController));
        using (var activityContext = activities.requestResumedDocuments())
        {
            return BusinessDocumentServiceController::requestForOutsideRelatedDocuments(
                BusinessDocumentServiceActions::Resumed,
                _resumedAfterDateTimeUtc,
                activityContext);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestForOutsideRelatedDocuments</Name>
				<Source><![CDATA[
    private static JObject requestForOutsideRelatedDocuments(
        str _apiMethod,
        str _effectiveDateUtc,
        SysInstrumentationActivityContext _activityContext,
        container _channels = conNull())
    {
        JObject documents;
        boolean isSuccess;

        try
        {
            JArray channels = new JArray();
            for (int idx = 1; idx <= conLen(_channels); idx++)
            {
                channels.Add(conPeek(_channels, idx));
            }
            JObject requestJson = new JObject();
            requestJson.Add(new JProperty('channels', channels));
            requestJson.Add(new JProperty('createdAfterDateTimeUtc', _effectiveDateUtc));

            documents = BusinessDocumentServiceController::requestServiceForJSON(
                    requestJson.ToString(),
                    _apiMethod,
                    '',
                    true,
                    BusinessDocumentWebHelper::HttpPost);

            isSuccess = true;
        }
        catch (Exception::CLRError)
        {
            str message = SRSProxy::getLastClrExceptionMessage();
            _activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyError, message);
            error(message);
        }
        finally
        {
            _activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyIsSuccess, any2Str(isSuccess));
        }

        return documents;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestByAgentIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method requests for a collection of documents by agent id.
    /// </summary>
    /// <param name = "_agentId">Agent Ids to retrieve documents for.</param>
    /// <param name = "_state">State of busines documents.</param>
    /// <param name = "_afterDate">After date filter.</param>
    /// <returns>A <c>JObject</c> containing documents collection.</returns>
    [Hookable(false)]
    public static JObject requestByAgentIds(container _agentId, BusinessDocumentState _state, str _afterDate = null)
    {
        JObject documents = BusinessDocumentServiceController::requestByChannels(_agentId, _afterDate);
        str state = enum2Str(_state);
        JArray documentsPayload = documents.SelectToken(BusinessDocumentServiceController::PayloadToken);

        if (documentsPayload)
        {
            for (int idx = 0; idx < documentsPayload.Count; idx++)
            {
                JObject document = documentsPayload.get_Item(idx);
                JToken stateToken = document.SelectToken('state');
                if (stateToken && stateToken.ToString() != state)
                {
                    documentsPayload.RemoveAt(idx);
                }
            }
        }

        return documents;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceVanityEndpoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns the service Vanity URL if it is available, otherwise the endpoint from the Electronic document parameters form.
    /// </summary>
    /// <returns>The service Vanity URL if it is available, otherwise the endpoint from the Electronic document parameters form.</returns>
	[Hookable(false)]
	public static str serviceVanityEndpoint()
    {
        System.String endpoint = SysHttpCommunicationEnvironmentSettings::getMicroservicesApiEndpoint();
        if (endpoint)
        {
            if (!endpoint.EndsWith('/'))
            {
                endpoint += '/';
            }
            endpoint += ServiceNameRoute;
        }
        else
        {
            endpoint = BusinessDocumentParameters::find().serviceCanonicalEndpoint();
        }

        return endpoint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWebHelper</Name>
				<Source><![CDATA[
    private static BusinessDocumentWebHelper createWebHelper(str _apiRoute = BusinessDocumentsApiRoute)
    {
        str finalApiRoute = '';
        if (ERForInvoicingRouteSwitch::shouldUseV2())
        {
            str environmentId = SysHttpCommunicationEnvironmentSettings::getEnvironmentId();
            finalApiRoute = '/api/environments/' + environmentId + '/' + _apiRoute;
        }
        else
        {
            finalApiRoute = '/api/' + _apiRoute;
        }
        var webHelper = new BusinessDocumentWebHelper(BusinessDocumentServiceController::serviceVanityEndpoint(), finalApiRoute);

        webHelper.addHttpRequestHeadersHandler += eventhandler(BusinessDocumentServiceController::addRequestHeaders);
        webHelper.addHttpRequestAuthorizationHeadersHandler += eventhandler(BusinessDocumentServiceController::addAuthorizationHeader);

        return webHelper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>