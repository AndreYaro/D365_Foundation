<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStatusController_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is a controller class for <c>InventStatus_CN</c> report.
/// </summary>
class InventStatusController_CN extends InventValueReportController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        #ISOcountryRegionCodes
        super();

        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes(
            [ [#isoJP, GlobalizationConstants::FeatureReferenceCN00007],
              [#isoCN, GlobalizationConstants::FeatureReferenceCN00128] ],
            funcName()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        super();

        InventStatusContract_CN contract = this.parmReportContract().parmRdpContract() as InventStatusContract_CN;

        switch (contract.parmReportType())
        {
            case InventSumReportType_CN::Period:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00140, funcName());

                this.parmDialogCaption("@GLS63234");
                break;

            case InventSumReportType_CN::ByItem:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00139, funcName());

                this.parmReportContract().parmReportName(ssrsReportStr(InventStatus_CN, TransForSingleItem));
                this.parmDialogCaption("@GLS63219");
                break;

            case InventSumReportType_CN::ByType:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00138, funcName());

                this.parmReportContract().parmReportName(ssrsReportStr(InventStatus_CN, SummaryByTransType));
                this.parmDialogCaption("@GLS63235");
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventStatusController_CN controller = new InventStatusController_CN();
        controller.parmArgs(_args);

        controller.parmReportName(ssrsReportStr(InventStatus_CN, Summary));
        controller.parmDisplayQueryFilter(true);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        InventStatusContract_CN inventValueReportContract = this.parmReportContract().parmRdpContract() as InventStatusContract_CN;

        this.processContract(inventValueReportContract);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set proper contract value and create report configuration needed on the fly.
    /// </summary>
    /// <param name = "_contract">The contract to be set.</param>
    protected void processContract(InventStatusContract_CN _contract)
    {
        InventValueReport inventValueReportSetup;

        _contract.updateInventDimWithUserSelection();

        str reportSetupId = subStr(guid2Str(newGuid()), 0, 10);

        ttsbegin;
        // Fixed settings for Inventory status report.
        inventValueReportSetup.ReportId = reportSetupId;
        inventValueReportSetup.Name = reportSetupId;
        inventValueReportSetup.SelectDateRange = InventValueReportSelectDateRange::TransDate;
        inventValueReportSetup.ViewInventory = NoYes::Yes;
        inventValueReportSetup.ViewResourceGroup = NoYes::Yes;
        inventValueReportSetup.ViewResourceId = NoYes::Yes;
        inventValueReportSetup.IncludeNotPostedValue = NoYes::Yes;
        inventValueReportSetup.DetailLevel = TotalTrans::Trans;
        inventValueReportSetup.ViewMaterial = NoYes::Yes;
        inventValueReportSetup.IncludeBeginningBalance = NoYes::Yes;
        inventValueReportSetup.insert();

        InventValueReportDimension inventValueReportDimension;

        if (_contract.parmIsViewConfigId())
        {
            inventValueReportDimension = inventValueReportDimension::findByInventValueReportFieldId(
                inventValueReportSetup.RecId, fieldNum(InventDim, ConfigId), true);
            inventValueReportDimension.View = NoYes::Yes;
            inventValueReportDimension.update();
        }
        if (_contract.parmIsViewInventSizeId())
        {
            inventValueReportDimension = inventValueReportDimension::findByInventValueReportFieldId(
                inventValueReportSetup.RecId, fieldNum(InventDim, InventSizeId), true);
            inventValueReportDimension.View = NoYes::Yes;
            inventValueReportDimension.update();
        }
        if (_contract.parmIsViewInventColorId())
        {
            inventValueReportDimension = inventValueReportDimension::findByInventValueReportFieldId(
                inventValueReportSetup.RecId, fieldNum(InventDim, InventColorId), true);
            inventValueReportDimension.View = NoYes::Yes;
            inventValueReportDimension.update();
        }
        if (_contract.parmIsViewInventStyleId())
        {
            inventValueReportDimension = inventValueReportDimension::findByInventValueReportFieldId(
                inventValueReportSetup.RecId, fieldNum(InventDim, InventStyleId), true);
            inventValueReportDimension.View = NoYes::Yes;
            inventValueReportDimension.update();
        }
        if (_contract.parmIsViewInventVersionId())
        {
            inventValueReportDimension = inventValueReportDimension::findByInventValueReportFieldId(
                inventValueReportSetup.RecId, fieldNum(InventDim, InventVersionId), true);
            inventValueReportDimension.View = NoYes::Yes;
            inventValueReportDimension.update();
        }
        if (_contract.parmIsViewInventSiteId())
        {
            inventValueReportDimension = inventValueReportDimension::findByInventValueReportFieldId(
                inventValueReportSetup.RecId, fieldNum(InventDim, InventSiteId), true);
            inventValueReportDimension.View = NoYes::Yes;
            inventValueReportDimension.update();
        }
        if (_contract.parmIsViewInventLocationId())
        {
            inventValueReportDimension = inventValueReportDimension::findByInventValueReportFieldId(
                inventValueReportSetup.RecId, fieldNum(InventDim, InventLocationId), true);
            inventValueReportDimension.View = NoYes::Yes;
            inventValueReportDimension.update();
        }
        if (_contract.parmIsViewWMSLocationId())
        {
            inventValueReportDimension = inventValueReportDimension::findByInventValueReportFieldId(
                inventValueReportSetup.RecId, fieldNum(InventDim, WMSLocationId), true);
            inventValueReportDimension.View = NoYes::Yes;
            inventValueReportDimension.update();
        }
        if (_contract.parmIsViewInventBatchId())
        {
            inventValueReportDimension = inventValueReportDimension::findByInventValueReportFieldId(
                inventValueReportSetup.RecId, fieldNum(InventDim, InventBatchId), true);
            inventValueReportDimension.View = NoYes::Yes;
            inventValueReportDimension.update();
        }
        if (_contract.parmIsViewInventSerialId())
        {
            inventValueReportDimension = inventValueReportDimension::findByInventValueReportFieldId(
                inventValueReportSetup.RecId, fieldNum(InventDim, InventSerialId), true);
            inventValueReportDimension.View = NoYes::Yes;
            inventValueReportDimension.update();
        }
        if (_contract.parmIsViewInventStatus())
        {
            inventValueReportDimension = inventValueReportDimension::findByInventValueReportFieldId(
                inventValueReportSetup.RecId, fieldNum(InventDim, InventStatusId), true);
            inventValueReportDimension.View = NoYes::Yes;
            inventValueReportDimension.update();
        }

        ttscommit;

        _contract.parmReportId(reportSetupId);
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>