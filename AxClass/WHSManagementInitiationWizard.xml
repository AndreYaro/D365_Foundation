<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSManagementInitiationWizard</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class WHSManagementInitiationWizard extends SysWizard
{
    private str createdTypeAndProfileRecords = "@WAX:InitiationManagementWizard_LocationAndProfile";
    private str createdFormatRecords = "@WAX:InitiationManagementWizard_LocationFormat";
    private str createdInventoryStatusAndWorkUserRecords = "@WAX:InitiationManagementWizard_InventoryStatus";
    private boolean workUserCreated = false;
    internal WHSManagementInitiationWizardContext context;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSManagementInitiationWizard construct()
    {
        return new WHSManagementInitiationWizard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        context = WHSManagementInitiationWizardContext::construct();
        xSysLastValue::getLast(context);

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WHSManagementInitiationWizard wizard = new WHSManagementInitiationWizard();
        
        wizard.init();
        if (wizard.prompt())
        {
            wizard.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formname</Name>
				<Source><![CDATA[
    internal FormName formname()
    {
        return formStr(WHSManagementInitiationWizard);
    }

]]></Source>
			</Method>
			<Method>
				<Name>context</Name>
				<Source><![CDATA[
    public WHSManagementInitiationWizardContext context()
    {
        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finish</Name>
				<Source><![CDATA[
    public void finish()
    {
        xSysLastValue::saveLast(context);

        ListEnumerator locationTypeAndProfileValues = context.constructLocationTypesAndProfiles();
        
        ttsbegin;

        if (!context.genericLocationFormat)
        {
            this.createLocationFormat(locationTypeAndProfileValues);
        }
        else 
        {
            this.createGenericLocation(context.locationFormat);
        }
        
        this.createLocationTypeAndProfile(locationTypeAndProfileValues);
        this.regenerateLoadPostMethodForm();
        this.generateWorkerUser(context.defaultWorkUserId);
        this.createInventoryStatus(context.defaultInventoryStatus);
        this.createWMParameters();
        this.regenerateWaveProcessMethods();
        this.setMobileDeviceUserMenu(context.defaultWorkUserId);
        ttscommit;
        
        str infoMessage = createdTypeAndProfileRecords + ' ' + createdFormatRecords + ' ' + createdInventoryStatusAndWorkUserRecords;
        info(strFmt("@WAX:InitiationManagementWizard_SubmitInformationMessage", infoMessage));
        
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLocationTypeAndProfile</Name>
				<Source><![CDATA[
    private void createLocationTypeAndProfile(ListEnumerator _locationTypeAndProfiles)
    {
        _locationTypeAndProfiles.reset();
        while (_locationTypeAndProfiles.moveNext())
        {
            this.createLocationType(_locationTypeAndProfiles.current());
            this.createLocationProfile(_locationTypeAndProfiles.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLocationType</Name>
				<Source><![CDATA[
    private void createLocationType(WHSLocType _locationTypeValue)
    {
        if(_locationTypeValue && !WHSLocationType::exist(_locationTypeValue))
        {
            WHSLocationType locationType;
            locationType.Description = _locationTypeValue;
            locationType.Loctype = _locationTypeValue;
            locationType.insert();            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLocationProfile</Name>
				<Source><![CDATA[
    private void createLocationProfile(WHSLocProfileName _locationProfileValue)
    {
        if(_locationProfileValue && !WHSLocationProfile::exist(_locationProfileValue))
        {
            WHSLocationProfile locationProfile;
            locationProfile.locprofileid = _locationProfileValue;
            locationProfile.locprofilename = _locationProfileValue;
            if(!context.genericLocationFormat)
            {
                locationProfile.locformatid = _locationProfileValue;
            }else
            {
                locationProfile.locformatid = context.locationFormat;
            }
            locationProfile.Loctype = _locationProfileValue;
            locationProfile.AllowMixedItems =  NoYes::Yes;
            locationProfile.AllowMixedstatus =  NoYes::Yes;
            locationProfile.AllowMixedBatches =  NoYes::Yes;
            locationProfile.LpControlled =  NoYes::Yes;
            locationProfile.insert();
            
            createdTypeAndProfileRecords = createdTypeAndProfileRecords + ', ' + _locationProfileValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGenericLocation</Name>
				<Source><![CDATA[
    private void createGenericLocation(WHSLocFormatName _formatName)
    {
        if(_formatName != null && !WHSLocationFormat::exist(_formatName))
        {
            WHSLocationFormat locationFormat;
            locationFormat.Locformatname = _formatName;
            locationFormat.Locformatid = _formatName;
            locationFormat.insert();

            WHSLocationFormatLine formatLine;
            formatLine.SegmentDescription= _formatName;
            formatLine.LocFormatId = _formatName;
            formatLine.insert();
            
            createdFormatRecords = createdFormatRecords + ' ' + _formatName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLocationFormat</Name>
				<Source><![CDATA[
    private void createLocationFormat(ListEnumerator _locationTypeAndProfiles)
    {
        while (_locationTypeAndProfiles.moveNext())
        {
            WHSLocFormatName locFormatName = _locationTypeAndProfiles.current();
            
            if(locFormatName && !WHSLocationFormat::exist(locFormatName))
            {
                WHSLocationFormat locationFormat;
                locationFormat.Locformatname = locFormatName;
                locationFormat.Locformatid = locFormatName;
                locationFormat.insert();

                WHSLocationFormatLine formatLine;
                formatLine.SegmentDescription = locFormatName;
                formatLine.SegmentLength = 10;
                formatLine.LineNum= 1;
                formatLine.LocFormatId = locFormatName;
                formatLine.insert();
                
                createdFormatRecords = createdFormatRecords + ' ' + locFormatName;
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventoryStatus</Name>
				<Source><![CDATA[
    private void createInventoryStatus(Name _defaultInventoryStatus)
    {
        if (_defaultInventoryStatus)
        {
            WHSInventStatus whsInventStatus;

            if(!WHSInventStatus::findByName(_defaultInventoryStatus))
            {
                whsInventStatus.Name = _defaultInventoryStatus;
                whsInventStatus.InventStatusID = _defaultInventoryStatus;
                whsInventStatus.insert();
                createdInventoryStatusAndWorkUserRecords = createdInventoryStatusAndWorkUserRecords + ' ' + _defaultInventoryStatus;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateWorkerUser</Name>
				<Source><![CDATA[
    private void generateWorkerUser(WHSUserId _defaultWorkUserId)
    {
        if (_defaultWorkUserId)
        {
            if (!WHSWorkUser::exist(_defaultWorkUserId))
            {
                WHSWorker worker = this.findOrCreateWarehouseWorker();

                if (!worker)
                {
                    warning("@WAX:InitiationManagementWizard_UserWarning");
                    return;
                }
            
                this.createWarehouseWorkUser(_defaultWorkUserId, worker);
            }
        
            workUserCreated = true;

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWarehouseWorkUser</Name>
				<Source><![CDATA[
    private void createWarehouseWorkUser(WHSUserId _defaultWorkUserId, WHSWorker _worker)
    {
        WHSWorkUser workUser;

        workUser.UserName   = _defaultWorkUserId;
        workUser.UserId     = _defaultWorkUserId;
        workUser.Worker     = _worker.RecId;
        workUser.insert();

        WHSWorkUser::changePassword(workUser, context.workUserPassword);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateWarehouseWorker</Name>
				<Source><![CDATA[
    private WHSWorker findOrCreateWarehouseWorker()
    {
        WHSWorker worker = WHSWorker::findByWorker();

        if (!worker)
        {
            HcmWorkerRecId workerRecId = HcmWorkerLookup::currentWorker();

            if (workerRecId)
            {
                worker.Worker = workerRecId;
                worker.insert();
            }
        }

        return worker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWMParameters</Name>
				<Source><![CDATA[
    private void createWMParameters()
    {
        WHSParameters whsParameters = WHSParameters::find(true);

        if (whsParameters)
        {
            if (context.stagingLocation)
            {
                whsParameters.StageLocType = context.stagingLocation;
            }
            if (context.userProfile)
            {
                whsParameters.UserLocType = context.userProfile;
            }
            if (context.packagingLocation)
            {
                whsParameters.PackingLocationType = context.packagingLocation;
            }
            if (context.finalShippingLocation)
            {
                whsParameters.ShipFinalLocType = context.finalShippingLocation;
            }
            if (context.sortingLocation)
            {
                whsParameters.SortingLocationType = context.sortingLocation;
            }
            if (context.defaultWorkUserId && workUserCreated)
            {
                whsParameters.GenericWorkUserId = context.defaultWorkUserId;
            }
            if (context.defaultInventoryStatus)
            {
                whsParameters.DefaultStatusId = context.defaultInventoryStatus;
            }
            WHSParameters.update();
        }
        else
        {
            whsParameters.StageLocType = context.stagingLocation;
            whsParameters.UserLocType = context.userProfile;
            whsParameters.PackingLocationType = context.packagingLocation;
            whsParameters.ShipFinalLocType = context.finalShippingLocation;
            whsParameters.SortingLocationType = context.sortingLocation;
            whsParameters.GenericWorkUserId = context.defaultWorkUserId;
            whsParameters.DefaultStatusId = context.defaultInventoryStatus;
            WHSParameters.insert();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>regenerateLoadPostMethodForm</Name>
				<Source><![CDATA[
    private void regenerateLoadPostMethodForm()
    {
        WHSLoadPostMethodForm loadPostMethodForm = WHSLoadPostMethodForm::construct();
        WHSLoadPostMethod loadPostMethod;
        loadPostMethodForm.regenerate(loadPostMethod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>regenerateWaveProcessMethods</Name>
				<Source><![CDATA[
    private void regenerateWaveProcessMethods()
    {
        WhsPostMethodForm whsPostMethodForm = new WHSPostMethodForm();
        WhsPostMethodForm.regenerate_clicked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMobileDeviceUserMenu</Name>
				<Source><![CDATA[
    private void setMobileDeviceUserMenu(WHSUserId _defaultWorkUserId)
    {
        if (context.mobileDeviceMenu)
        {
            if (!WHSRFMenuTable::exist(context.mobileDeviceMenu))
            {
                WHSRFMenuTable menuTable;
                menuTable.MenuName = context.mobileDeviceMenu;
                menuTable.Description = context.mobileDeviceMenu;
                menuTable.insert();
            }
            if (WHSWorkUser::exist(_defaultWorkUserId))
            {
                WHSWorkUser whsWorkUser = WHSWorkUser::find(_defaultWorkUserId, true);
                whsWorkUser.MenuName = context.mobileDeviceMenu;
                whsWorkUser.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    internal boolean validate()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>