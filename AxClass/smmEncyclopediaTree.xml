<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmEncyclopediaTree</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SmmEncyclopediaTree extends smmFormTreeDatasource
{
    #macrolib.resAppl

    recId                   recId;
    tableId                 idOfTable;
    smmEncyclopediaItems    smmEncyclopediaItems;
    CaseDetailBase          caseDetailBase;

    Map                     treeRecId;

    Query                   caseQuery;
    QueryBuildRange         caseQueryBuildRange;
    QueryBuildDataSource    caseQueryBuildDataSource;
    QueryRun                caseQueryRun;

    RecId                   argsRecId;
    int                     argsParmEnum;
    int                     firstIdx;
    smmKASource             kaSource;
    RecId                   kaSourceRecId;
    RecId                   kaCaseRecId;
    FormDataSource          dataSource;
    smmEncyclopediaItemId   itemId;

    #localMacro.fieldList
        itemId,
        description,
        recId,
        type
    #endMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildCategoryCaseQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the query which contains the records associated to the case and category forms.
    /// </summary>
    /// <remarks>
    ///    The query is used only for marking the items in the tree to visually see the associated records
    /// </remarks>
    void buildCategoryCaseQuery()
    {
        smmKACategoryRelation   smmKACategoryRelation;
        smmKACaseRelation       smmKACaseRelation;

        caseQuery = new Query();
        caseQueryBuildDataSource = caseQuery.addDataSource(tablenum(smmEncyclopediaItems));

        switch (argsParmEnum)
        {
            case smmKAOpenFrom::CategoryDetail :
                caseQueryBuildDataSource = caseQueryBuildDataSource.addDataSource(tablenum(smmKACategoryRelation));
                caseQueryBuildDataSource.relations(true);
                caseQueryBuildDataSource.joinMode(JoinMode::ExistsJoin);
                caseQueryBuildDataSource.addRange(fieldnum(smmKACategoryRelation, RecId)).value(queryValue(argsRecId));
                break;

            case smmKAOpenFrom::CategoryAll :
                caseQueryBuildDataSource = caseQueryBuildDataSource.addDataSource(tablenum(smmKACategoryRelation));
                caseQueryBuildDataSource.relations(true);
                caseQueryBuildDataSource.joinMode(JoinMode::ExistsJoin);
                caseQueryBuildDataSource.addRange(fieldnum(smmKACategoryRelation, CategoryRecId)).value(queryValue(argsRecId));
                break;

            case smmKAOpenFrom::CaseAll :
                caseDetailBase = CaseDetailBase::findRec(argsRecId);
                while select ItemId from smmKACategoryRelation
                    where smmKACategoryRelation.CategoryRecId == caseDetailBase.CategoryRecId
                {
                    caseQueryBuildDataSource.addRange(fieldnum(smmEncyclopediaItems, ItemId)).value(queryValue(smmKACategoryRelation.ItemId));
                }
                while select ItemId from smmKACaseRelation
                    where smmKACaseRelation.CaseRecId == caseDetailBase.RecId
                {
                    caseQueryBuildDataSource.addRange(fieldnum(smmEncyclopediaItems, ItemId)).value(queryValue(smmKACaseRelation.ItemId));
                }
                if (!caseQueryBuildDataSource.findRange(fieldnum(smmEncyclopediaItems, ItemId)))
                {
                    caseQueryBuildDataSource.addRange(fieldnum(smmEncyclopediaItems, ItemId)).value(SysQuery::valueEmptyString());
                }
                break;

            case smmKAOpenFrom::CaseDetail :
                if (kaSource == smmKASource::Category)
                {
                    caseQueryBuildDataSource = caseQueryBuildDataSource.addDataSource(tablenum(smmKACategoryRelation));
                    caseQueryBuildDataSource.relations(true);
                    caseQueryBuildDataSource.joinMode(JoinMode::ExistsJoin);
                    caseQueryBuildDataSource.addRange(fieldnum(smmKACategoryRelation, RecId)).value(queryValue(kaSourceRecId));
                }
                else if (kaSource == smmKASource::Case)
                {
                    caseQueryBuildDataSource = caseQueryBuildDataSource.addDataSource(tablenum(smmKACaseRelation));
                    caseQueryBuildDataSource.relations(true);
                    caseQueryBuildDataSource.joinMode(JoinMode::ExistsJoin);
                    caseQueryBuildDataSource.addRange(fieldnum(smmKACaseRelation, RecId)).value(queryValue(kaSourceRecId));
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSubTree</Name>
				<Source><![CDATA[
    protected int buildSubTree(int _parentIdx, anytype _parentValue, boolean _rebuild = false)
    {
        FormTreeItem            formTreeItem;
        Common                  childRecord;
        QueryRun                childQueryRun;
        int                     children = 0;
        int                     idxCurrentRecord;
        anytype                 idValue;

        childQueryRun = this.initializeChildQueryRun(_parentIdx,_parentValue,_rebuild);

        if (childQueryRun)
        {
            while (childQueryRun.next())
            {
                childRecord = childQueryRun.get(formDataSource.table());
                this.getChildRecord(childRecord);

                idValue = childRecord.(id);
                formTreeItem = new FormTreeItem(this.itemText(childRecord.(id),
                                                childRecord.(txt)),
                                                this.getImageListIdx(childRecord.TableId,
                                                childRecord.RecId),
                                                this.subTreeQueryRun(childRecord.(id)).next(),
                                                idValue);

                if (childRecord.TableId == tablenum(smmEncyclopediaItems))
                {
                    smmEncyclopediaItems = childRecord;
                    basicRecId = smmEncyclopediaItems.RecId;

                    formTreeItem.text(smmEncyclopediaItems.ItemName);
                }
                idxCurrentRecord = this.addItem(formTreeItem,_parentIdx,childRecord,children,idValue);

                if (argsRecId)
                {
                    treeRecId.insert(smmEncyclopediaItems.RecId, idxCurrentRecord);
                }

                children++;
            }

            formTreeItem = tree.getItem(_parentIdx);
            formTreeItem.children(children);
            tree.setItem(formTreeItem);
        }

        return idxCurrentRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the knowledge article create form to add a new item.
    /// </summary>
    /// <returns>
    ///    true if the record is created; false if creation is canceled.
    /// </returns>
    /// <remarks>
    ///    This is the main driver to also associate the newly created item to either case or category.
    /// </remarks>
    public boolean create()
    {
        Args                    args;
        Object                  formObj;
        RecId                   kaRecId;
        #Task
        args = new Args(formstr(smmEncyclopediaTreeCreate));
        if (formDataSource.table() == tablenum(smmEncyclopediaItems))
        {
            args.record(formDataSource.getFirst());
        }

        createDialogFormRun = ClassFactory::formRunClassOnClient(args);
        createDialogFormRun.init();
        createDialogFormRun.run();
        createDialogFormRun.task(#taskNew);

        createDialogFormRun.wait(true);
        formObj = createDialogFormRun;
        if (createDialogFormRun.closedOk() ||
            (formHasMethod(formObj, identifierstr(isFileUploadCompleted)) && formObj.isFileUploadCompleted()))
        {
            smmEncyclopediaItems = formObj.smmEncyclopediaItems();
            kaRecId = smmEncyclopediaItems.RecId;
            this.created();

            if (argsRecId)
            {
                this.createAndRefreshRelations(kaRecId);
            }
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndRefreshRelations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a relation record in either the <c>smmKACategoryRelation</c> or <c>smmKACaseRelation</c> and refresh the calling form.
    /// </summary>
    /// <param name = "_recId">
    /// The record ID of the newly created item.
    /// </param>
    public void createAndRefreshRelations(RecId _recId)
    {
        this.createRelation(_recId);
        if (argsParmEnum == smmKAOpenFrom::CategoryAll || argsParmEnum == smmKAOpenFrom::CaseAll)
        {
            this.buildCategoryCaseQuery();
        }
        this.markCategoryCaseItems();
        if (dataSource)
        {
            dataSource.executeQuery();
            dataSource.positionToRecordByValue(fieldnum(Common,RecId), int642str(argsRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>created</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the sub-tree if it not already created and then selects the original node.
    /// </summary>
    public void created()
    {
        int                     idx = tree.getSelection();
        str                     parentIdTmp;
        int                     idxTmp;
        FormTreeItem            treeItemTmp;
        if (smmEncyclopediaItems)
        {
            basicRecId = smmEncyclopediaItems.RecId;
            this.itemId(smmEncyclopediaItems.ItemId);
            tree.setFocus();

            // Get the root
            idxTmp = tree.getRoot();

            // Navigate through the visible nodes and if selected parent is among them ,rebuild it
            while (idxtmp)
            {
                treeItemTmp = tree.getItem(idxTmp);
                parentIdTmp = treeItemTmp.data();

                // If parent is among visible nodes
                if (parentIdTmp == smmEncyclopediaItems.ParentId)
                {
                    this.buildSubTree(idxTmp, tree.getItem(idxtmp).data(), true);
                    idxTmp = 0;
                }
                else
                {
                    // Get the next visible node
                    idxTmp = tree.getNextVisible(idxTmp);
                }
            }

            // Select the original node
            tree.select(idx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a relation record in either the <c>smmKACategoryRelation</c> or <c>smmKACaseRelation</c>
    ///    table
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the newly created item.
    /// </param>
    /// <remarks>
    ///    User has option to select which entity to associate the item, case, or category forms with.
    /// </remarks>
    void createRelation(RecId _recId)
    {
        smmEncyclopediaItems  encyclopediaTable = smmEncyclopediaItems::findRecId(_recId);

        // Only add if the parent type is not Folder
        if (encyclopediaTable.Type == smmEncyclopediaItemType::Folder)
        {
            return;
        }

        if (argsRecId)
        {
            if (argsParmEnum == smmKAOpenFrom::CategoryDetail) // passed category relation rec id
            {
                smmKACategoryRelation::createNew(encyclopediaTable.ItemId,smmKACategoryRelation::find(argsRecId).CategoryRecId);
            }
            else if (argsParmEnum == smmKAOpenFrom::CategoryAll) // passed category rec id
            {
                smmKACategoryRelation::createNew(encyclopediaTable.ItemId,argsRecId);
            }
            else if (argsParmEnum == smmKAOpenFrom::CaseAll) // passed case rec id
            {
                if (Box::yesNo(strfmt("@SYS134749", encyclopediaTable.ItemName, CaseCategoryHierarchyDetail::find(caseDetailBase.CategoryRecId).CaseCategory),DialogButton::Yes))
                {
                    smmKACategoryRelation::createNew(encyclopediaTable.ItemId,caseDetailBase.CategoryRecId);
                }
                else
                {
                    smmKACaseRelation::createNew(encyclopediaTable.ItemId,argsRecId);
                }
            }
            else if (argsParmEnum == smmKAOpenFrom::CaseDetail) // passed tmp table rec id
            {
                caseDetailBase = CaseDetailBase::findRec(kaCaseRecId);
                if (Box::yesNo(strfmt("@SYS134749", encyclopediaTable.ItemName, CaseCategoryHierarchyDetail::find(caseDetailBase.CategoryRecId).CaseCategory),DialogButton::Yes))
                {
                    smmKACategoryRelation::createNew(encyclopediaTable.ItemId,caseDetailBase.CategoryRecId);
                }
                else
                {
                    smmKACaseRelation::createNew(encyclopediaTable.ItemId,caseDetailBase.RecId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>drop</Name>
				<Source><![CDATA[
    /// <summary>
    /// Drops the tree node to a particular spot.
    /// </summary>
    /// <param name="_dragSource">
    /// The source form control.
    /// </param>
    /// <param name="_x">
    /// The x position at which to drop the node.
    /// </param>
    /// <param name="_y">
    /// The y position at which to drop the node.
    /// </param>
    public void drop(FormControl _dragSource, int _x, int _y)
    {
        int                 idx;
        anytype             data;
        anytype             parentData;
        FormTreeItem        formTreeItem;
        Name                name;
        DictTable           dictTable;
        Common              common;
        Common              parentCommon;

        [idx] = tree.hitTest(_x, _y);

        if (_dragSource.equal(tree))
        {
            formTreeItem    = tree.getItem(dragIdx);

            if (!formTreeItem)
            {
                return;
            }

            name            = formTreeItem.text();
            data            = formTreeItem.data();
            formTreeItem    = tree.getItem(idx);

            if (!formTreeItem)
            {
                return;
            }

            parentData = formTreeItem.data();

            if (idx == dragIdx)
            {
                return;
            }

            dictTable       = new DictTable(formDataSource.cursor().TableId);
            parentCommon    = dictTable.makeRecord();

            if (!this.validateMove(parentCommon, data, parentData))
            {
                // '%1' cannot be moved to '%2'
                throw warning(strfmt("@SYS80046", name, formTreeItem.text()));
            }

            if (!this.validateParentType(parentCommon, parentData))
            {
                // Cannot add node to a link or document type
                throw warning("@SYS134429");
            }

            // Move '%1'?
            if (Box::yesNo(strfmt("@SYS80047", name),DialogButton::No) == DialogButton::Yes)
            {
                common      = dictTable.makeRecord();

                ttsbegin;

                select forupdate common where common.(id) == data;

                common.(parentId) = parentData;
                common.update();

                ttscommit;

                if (common)
                {
                    tree.moveItem(dragIdx, idx);
                    doneNode.add([idx]);
                    doneNode.add([dragIdx]);
                }
            }
        }

        tree.select(idx);

        tree.expand(idx, FormTreeExpand::Expand);
    }

]]></Source>
			</Method>
			<Method>
				<Name>focusCategoryCaseItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the pointer of the tree to the first record in the query.
    /// </summary>
    /// <remarks>
    ///    This is more useful when the item to be displayed is only one, which is true if the item is
    ///    selected from the category and case detail forms.
    /// </remarks>
    void focusCategoryCaseItem()
    {
        if (firstIdx)
        {
            tree.select(firstIdx);
            tree.setFocus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImageListIdx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the image list ID based on the record.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID.
    /// </param>
    /// <param name="_recId">
    /// The record ID.
    /// </param>
    /// <returns>
    /// The <c>Int</c> value of the image.
    /// </returns>
    public int getImageListIdx(tableId _tableId, recId _recId)
    {
        #define.IMAGEONE(1)
        #define.IMAGETWO(2)
        #define.IMAGETHREE(3)

        if (_tableId == tablenum(smmEncyclopediaItems))
        {
            smmEncyclopediaItems = smmEncyclopediaItems::findRecId(_recId);

            if (smmEncyclopediaItems.Type == smmEncyclopediaItemType::File)
            {
                return #IMAGETHREE;
            }
            else
            if (smmEncyclopediaItems.Type == smmEncyclopediaItemType::Link)
            {
                return #IMAGETWO;
            }
            else
            if (smmEncyclopediaItems.Type == smmEncyclopediaItemType::Folder)
            {
                return #IMAGEONE;
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of images.
    /// </summary>
    /// <returns>
    /// The image list.
    /// </returns>
    public Imagelist imageList()
    {
        #macrolib.resource

        Imagelist imagelist;

        imagelist = new Imagelist(Imagelist::smallIconWidth(), Imagelist::smallIconHeight());
        imagelist.add(new Image(#RES_NODE_COMPANY));
        imagelist.add(new Image(#RES_NODE_OPEN));
        imagelist.add(new Image(#RES_WEBPAGES));
        imagelist.add(new Image(#RES_NODE_REPORT));

        return imagelist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTreeRelatedToCase</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the root of the knowledge article tree and expands it.
    /// </summary>
    /// <param name="_args">
    ///    The arguments from menu items that are used by the case and category forms.
    /// </param>
    /// <param name="_txt">
    ///    The name of the tree root. Use label "@SYS81149" to name the tree root.
    /// </param>
    /// <param name="_rootValue">
    ///    A blank value.
    /// </param>
    /// <param name="_rootImage">
    ///    A default value.
    /// </param>
    /// <remarks>
    ///    This is only called when the knowledge article form is opened from either the case or category
    ///    forms through the <c>init</c> method of the knowledge article form.
    /// </remarks>
    public void initTreeRelatedToCase(Args _args, str 250 _txt, anytype _rootValue, int _rootImage = 0)
    {
        int             idx;
        FormTreeItem    formTreeItem = new FormTreeItem(_txt, _rootImage, 1, _rootValue);

        tree.deleteAll();

        treeRecId     = new Map(typeName2Type(extendedtypestr(recId)),Types::Integer);

        doneNode    = null;
        doneNode    = new Set(Types::Container);
        idx         = tree.addItem(0, 0, formTreeItem);

        if (_args.parmEnumType() == enumnum(smmKAOpenFrom))
        {
            argsParmEnum = _args.parmEnum();
            argsRecId    = _args.record().RecId;
            dataSource   = FormDataUtil::getFormDataSource(_args.record());

            if (argsParmEnum == smmKAOpenFrom::CaseDetail)
            {
                kaSource      = _args.caller().parmKASource();
                kaSourceRecId = _args.caller().parmKASourceRecId();
                kaCaseRecId   = _args.caller().parmCaseRecId();
            }

            this.buildCategoryCaseQuery();
            SysFormTreeControl::expandTree(tree, tree.getRoot());
            this.focusCategoryCaseItem();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCategoryCaseItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs through the query to mark or bold the items in the tree.
    /// </summary>
    /// <remarks>
    ///    Marks the first item in the query to set the focus on after the tree is shown.
    /// </remarks>
    void markCategoryCaseItems()
    {
        smmEncyclopediaItems        encyclopediaTable;
        FormTreeItem                treeItem;

        if (caseQuery)
        {
            firstIdx = 0;

            // mark all that exists in the query
            caseQueryRun = new QueryRun(caseQuery);
            while (caseQueryRun.next())
            {
                encyclopediaTable = caseQueryRun.get(tablenum(smmEncyclopediaItems));

                if (treeRecId.exists(encyclopediaTable.RecId))
                {
                    treeItem = tree.getItem(treeRecId.lookup(encyclopediaTable.RecId));

                    if (treeItem)
                    {
                        treeItem.stateBold(true);
                        tree.setItem(treeItem);

                        if (!firstIdx)
                            firstIdx = treeItem.idx();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the modified event.
    /// </summary>
    public void modified()
    {
        FormTreeItem    newFormTreeItem;
        Common          queryCommon = formDataSource.cursor();

        newFormTreeItem = tree.getItem(newIdx);
        newFormTreeItem.text(smmEncyclopediaItems::find(queryCommon.(id)).ItemName);

        tree.setItem(newFormTreeItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rename the primary key for the form tree.
    /// </summary>
    public void renamePrimaryKey()
    {
        FormTreeItem    formTreeItem;
        Common          queryCommon;
        anytype         idValue;

        formTreeItem = tree.getItem(tree.getSelection());

        queryCommon = formDataSource.cursor();

        if (formTreeItem)
        {
            if (queryCommon.(id) != formTreeItem.data())
            {
                idValue = queryCommon.(id);
                formTreeItem.text(this.itemText(queryCommon.(id), queryCommon.(txt)));
                formTreeItem.data(idValue);
                tree.setItem(formTreeItem);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subTreeQueryRun</Name>
				<Source><![CDATA[
    protected QueryRun subTreeQueryRun(anytype _parentValue)
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryRun                queryRun;
        QueryBuildRange         criteriaParentId;

        queryRun                = new QueryRun(originalQuery);
        query                   = queryRun.query();
        queryBuildDataSource    = query.dataSourceTable(formDataSource.table());
        criteriaParentId        = queryBuildDataSource.addRange(parentId);

        if (!queryBuildDataSource.sortFieldCount())
        {
            queryBuildDataSource.addSortField(id);
        }

        if (_parentValue)
        {
            criteriaParentId.value(_parentValue);
        }
        else
        {
            criteriaParentId.value(strfmt('"%1"', queryValue(_parentValue)));
        }

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTreeForDroppedFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the tree after a file is dropped.
    /// </summary>
    /// <param name="_parentId">
    /// The parent node ID.
    /// </param>
    /// <param name="_itemRecId">
    /// The item record ID.
    /// </param>
    /// <returns>
    /// A flag that indicates whether the tree was updated.
    /// </returns>
    public boolean updateTreeForDroppedFile(smmEncyclopediaItemId _parentId, recId _itemRecId)
    {
        int   idx = tree.getSelection();
        int   idxCurrentRecord;

        basicRecId = _itemRecId;

        tree.setFocus();

        idxCurrentRecord = this.buildSubTree(idx, _parentId, true);

        tree.expand(idx, FormTreeExpand::Expand);

        if (idxCurrentRecord && tree.select(idx))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParentType</Name>
				<Source><![CDATA[
    private boolean validateParentType(Common  _parentCommon,
                                       anytype _toData)
    {
        smmEncyclopediaItems kaItems;
        boolean ret = true;

        select _parentCommon where _parentCommon.(id) == _toData;

        if (_parentCommon.TableId == tablenum(smmEncyclopediaItems))
        {
            kaItems = _parentCommon;

            // Check that parent type is Folder
            if (kaItems.Type && kaItems.Type != smmEncyclopediaItemType::Folder)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPath</Name>
				<Source><![CDATA[
    static smmKAPath getPath(smmEncyclopediaItemId _itemId)
    {
        smmKAPath kaPath;
        smmEncyclopediaItemId kaid = _itemId;
        smmEncyclopediaItems kaItems;

        while (kaid)
        {
            kaItems = smmEncyclopediaItems::find(kaid);

            if (kaItems)
            {
                if (kaItems.ParentId)
                    kaPath = ">" + kaItems.ItemName + kaPath;
                else
                    kaPath = kaItems.ItemName + kaPath;
            }

            kaid = kaItems.ParentId;
        }
        return kaPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandAndSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expands the tree and selects the tree node with the specified item.
    /// </summary>
    /// <param name = "_smmEncyclopediaItemId">Id of the node to be selected.</param>
    public void expandAndSelect(smmEncyclopediaItemId  _smmEncyclopediaItemId)
    {
        Stack                   stack;
        smmEncyclopediaItemId   smmEncyclopediaItemsId, smmEncyclopediaItemsIdTree;
        int                     idx;

        if (!_smmEncyclopediaItemId)
        {
            return;
        }

        stack = new Stack();
        this.getParent(_smmEncyclopediaItemId, stack);

        this.initSelectIdx();

        this.initRoot("@SYS81149", '');

        tree.lockWindowUpdate(true);
        idx = tree.getRoot();
        while (stack.qty())
        {
            [smmEncyclopediaItemsId]     = stack.pop();
            smmEncyclopediaItemsIdTree   = tree.getItem(idx).data();

            while (smmEncyclopediaItemsIdTree != smmEncyclopediaItemsId)
            {
                idx = tree.getNextVisible(idx);
                smmEncyclopediaItemsIdTree   = tree.getItem(idx).data();
            }

            tree.select(idx);

            if (stack.qty())
            {
                tree.expand(idx, FormTreeExpand::Expand);
            }
        }

        tree.lockWindowUpdate(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the parent node of the selected node.
    /// </summary>
    /// <param name = "_smmEncyclopediaItemId">Id of the node for which parent node to be selected.</param>
    /// <param name = "_stack">Stack object.</param>
    public void getParent(smmEncyclopediaItemId _smmEncyclopediaItemId, Stack _stack)
    {
        smmEncyclopediaItems    smmEncyclopediaItemsLoc;

        select firstonly RecId, ItemId, ParentId from smmEncyclopediaItemsLoc where smmEncyclopediaItemsLoc.ItemId == _smmEncyclopediaItemId;

        if (smmEncyclopediaItemsLoc.RecId)
        {
            _stack.push([smmEncyclopediaItemsLoc.ItemId]);
            this.getParent(smmEncyclopediaItemsLoc.ParentId, _stack);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSelectIdx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the selected id to zero.
    /// </summary>
    public void initSelectIdx()
    {
        selectIdx = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the id of the selected node.
    /// </summary>
    /// <param name = "_itemId">Id of the item.</param>
    /// <returns>Id of the selected node.</returns>
    public smmEncyclopediaItemId ItemId(smmEncyclopediaItemId _itemId = itemId)
    {
        itemId  = _itemId;

        return itemId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>