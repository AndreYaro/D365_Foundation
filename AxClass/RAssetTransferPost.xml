<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetTransferPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetTransferPost extends RunBaseBatch implements BatchRetryable
{
    QueryRun             queryRun;
    RAssetTransferTable  assetTransferTable;

    Counter              progressCounter;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    protected boolean canGoBatchJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLine</Name>
				<Source><![CDATA[
    protected boolean checkLine(RAssetTransferTrans _assetTransferTrans)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    private void displayProgress(RAssetId _assetId)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(strFmt("@GLS116533", _assetId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMoveHist</Name>
				<Source><![CDATA[
    protected RAssetMoveHist initMoveHist(RAssetTransferTrans _assetTransferTrans,
                                          RAssetMoveHist      _assetMoveHist)
    {
        _assetMoveHist.AccountNum           = _assetTransferTrans.AccountNum;
        _assetMoveHist.ChangeDate           = assetTransferTable.TransDate;
        _assetMoveHist.Userid               = curUserId();
        _assetMoveHist.AttachDocumentDate   = assetTransferTable.TransDate;
        _assetMoveHist.AttachDocumentNumber = assetTransferTable.JournalNum;
        _assetMoveHist.TransferTransRecId   = _assetTransferTrans.RecId;

        return _assetMoveHist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(RAssetTransferTable _assetTransferTable)
    {
        Query                   query           = new Query();
        QueryBuildDataSource    queryDataSource = query.addDataSource(tableNum(RAssetTransferTrans));
        ;

        assetTransferTable = _assetTransferTable;

        queryDataSource.addRange(fieldNum(RAssetTransferTrans, TransferTableRecId)).value(queryValue(assetTransferTable.RecId));

        queryRun  = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLine</Name>
				<Source><![CDATA[
    protected void postLine(RAssetTransferTrans _assetTransferTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        boolean             ret;
        ;

        if (! RAssetTransferTrans::findRecRef(assetTransferTable.RecId))
        {
            return checkFailed("@SYS27671");
        }

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RAssetTransferTrans     assetTransferTrans;
        Counter                 progressTotal;
        #macrolib.AviFiles
        ;

        progressTotal               = SysQuery::countTotal(queryRun);

        this.progressInit("@GLS116659", progressTotal, #AviUpdate);
        progress = this.parmProgress();

        try
        {
            ttsbegin;

            while (queryRun.next())
            {
                assetTransferTrans = queryRun.get(tableNum(RAssetTransferTrans));
                this.displayProgress(assetTransferTrans.AccountNum);

                if (! this.checkLine(assetTransferTrans))
                    throw error("@GLS101992");

                this.postLine(assetTransferTrans);
            }

            this.updateStatus();

            ttscommit;
        }
        catch (Exception::Error)
        {
            error(strFmt("@SYS19378", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    public void updateStatus()
    {
        assetTransferTable.selectForUpdate(true);
        assetTransferTable.Posted = NoYes::Yes;
        assetTransferTable.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static RAssetTransferPost construct(RAssetTransferTable _assetTransferTable,
                                                boolean             _unPosted = false)
    {
        RAssetTransferPost assetTransferPost;

        switch (_assetTransferTable.MoveType)
        {
            case RAssetMoveType::CompanyIssue:
                if (_unPosted)
                    assetTransferPost = new RAssetTransferUnPost_CompanyIssue();
                else
                    assetTransferPost = new RAssetTransferPost_CompanyIssue();
                break;
            case RAssetMoveType::CompanyReceipt:
                assetTransferPost = new RAssetTransferPost_CompanyReceipt();
                break;
            case RAssetMoveType::Transfer:
                if (_unPosted)
                    assetTransferPost = new RAssetTransferUnPost_Both();
                else
                    assetTransferPost = new RAssetTransferPost_Both();
                break;
            default:
                throw error("@SYS59121");
        }
        return assetTransferPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    private static void main(Args _args)
    {
        RAssetTransferPost assetTransferPost = RAssetTransferPost::construct(_args.record(), _args.parmEnum());
        ;

        assetTransferPost.initValue(_args.record());

        if (assetTransferPost.prompt())
        {
            assetTransferPost.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>