<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkExecuteDisplayLicensePlateBreak</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to handle license plate break.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::LicensePlateBreak)]
class WhsWorkExecuteDisplayLicensePlateBreak extends WHSWorkExecuteDisplay
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildGetNestedLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state to get LP from user in Remove LP From Parent screen.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_extraText">
    /// Label text.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    container buildGetNestedLicensePlate(container _con, str _extraText = '')
    {
        container   ret = _con;
        str         finalLabel = _extraText ? _extraText : "@WAX3898";     // Remove LP From Parent

        ret += [this.buildControl(#RFLabel, #RFTitle, WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, #ParentLP, strFmt("@WAX3895", pass.lookup(#ParentLP)), 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, #Scan, finalLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFText, #ChildLP, "@WAX1198", 1, '', extendedTypeNum(WHSLicensePlateId), '', 0)];

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFDone, "@SYS112206", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGetParentLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for Scan a Parent LP screen during license plate break.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_extraText">
    /// Label text.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    container buildGetParentLicensePlate(container _con, str _extraText = '')
    {
        container   ret = _con;
        str         finalLabel = _extraText ? _extraText : "@WAX3894";     // Scan a Parent LP

        ret += [this.buildControl(#RFLabel, #RFTitle, WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, #Scan, finalLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFText, #ParentLP, "@WAX1198", 1, '', extendedTypeNum(WHSLicensePlateId), '', 0)];

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    container displayForm(container _con, str _buttonClicked = '')
    {
        container               ret = conNull();
        container               con = _con;
        container               tmpFieldValues;
        int                     hasError = 0;
        WHSRFPassthrough        fieldValues;
        boolean                 complete;

        mode = WHSWorkExecuteMode::LicensePlateBreak;
        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        hasError = this.hasError(_con);

        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);

            if (!pass.exists(#InventLocationId))
            {
                pass.insert(#InventLocationId, WHSWorkUserSession::find(userId).InventLocationId);
            }
        }

        if (_buttonClicked == #RFDone)
        {
            step = 0;
        }

        switch (step)
        {
            case 0:
                ret = this.buildGetParentLicensePlate(ret);
                step = 1;
                break;

            case 1:
                hasError = this.hasError(con);

                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);

                [ret, complete] = this.processFieldValues(con, fieldValues);

                if (complete)
                {
                    ret = conNull();
                    ret = this.buildGetNestedLicensePlate(ret);
                    step = 2;
                }
                break;

            case 2:
                hasError = this.hasError(con);

                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);

                [ret, complete] = this.processFieldValues(con, fieldValues);

                if (complete)
                {
                    WHSLicensePlate::removeFromParentLP(pass.lookup(#ChildLP), userId);

                    ret = conNull();
                    ret = this.addErrorLabel(ret, strFmt("@WAX3920", pass.lookup(#ChildLP)), WHSRFColorText::Success);
                    ret = this.buildGetNestedLicensePlate(ret);
                }
                break;
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>