<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysWorkflowApprovalWorkitemService</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
public class SysWorkflowApprovalWorkItemService
{
    #define.ToStr('\%1')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyActionOnMultipleItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies action (approve or reject) on item list of items
    /// </summary>
    /// <param name="_ids">
    /// List of workflow work items id`s to apply action for.
    /// </param>
    /// <param name="_action">
    /// Action id to apply.
    /// </param>
    /// <param name="_comment">
    /// Comment for the action to add.
    /// </param>
    //prototype function
    [AifCollectionTypeAttribute('_ids', Types::Guid, 'WorkflowInstanceId')]
    public void applyActionOnMultipleItems(List _ids, WorkflowOutcomeName _action, WorkflowComment _comment)
    {
        WorkflowWorkItemTable           workItemTable;
        WorkflowActionTable             actionTable;
        WorkflowElementType             elementType;
        WorkflowElementTable            elementTable;
        ListEnumerator                  listEnum;

        listEnum                        = _ids.getEnumerator();
        while (listEnum.moveNext())
        {
            select Id, UserId from workItemTable
                where workItemTable.Id == listEnum.current()
                && workItemTable.UserId == curUserId()
            exists join ElementId, ElementType from elementTable
                where elementTable.ElementId == workItemTable.ElementId
                && elementType == WorkflowElementType::Approval
            exists join IsOutcome, Enabled, WorkflowElementTable from actionTable
                where actionTable.WorkflowElementTable == elementTable.RecId
                && actionTable.Name == _action
                && actionTable.IsOutcome
                && actionTable.Enabled;

            if (workItemTable)
            {
                try
                {
                    ttsbegin;
                    workItemTable.selectForUpdate(true);
                    WorkflowWorkItem::takeAction(workItemTable.Id, _action, _comment, curUserId());
                    ttscommit;
                }
                catch
                {
                    //silently catching exception
                    infolog.clear();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// This creates the mapping between the print archive record (<c>PrintJobHeader</c>) and the report configuration.
    /// </summary>
    /// <param name="_callId">
    /// Guid for the call Id generated from the report process.
    /// </param>
    /// <param name="_configReportRecId">
    /// The record Id from <c>SysWindowsAppApprovalsConfigReports</c> table.
    /// </param>
    /// <param name="_contextTableId">
    /// Reference table Id from the workflow item context.
    /// </param>
    /// <param name="_contextRecId">
    /// Reference record Id from the workflow item context.
    /// </param>
    /// <returns>
    /// <c>SysWindowsAppReportsMapping</c> record that has been created.
    /// </returns>
    private SysWindowsAppReportsMapping createReportMapping(guid _callId, RefRecId _configReportRecId, RefTableId _contextTableId, RefRecId _contextRecId)
    {
        PrintJobHeader              printJobHeader;
        SysWindowsAppReportsMapping reportsMapping;
        DocuRef                     docuRef;

        select RecId, DataAreaId from printJobHeader
                where printJobHeader.JobDescription == guid2str(_callId)
            join RecId from docuRef
                where docuRef.RefTableId == printJobHeader.TableId &&
                        docuRef.RefRecId == printJobHeader.RecId &&
                        docuRef.ActualCompanyId == printJobHeader.DataAreaId;

        if (printJobHeader)
        {
            reportsMapping.clear();
            reportsMapping.initValue();
            reportsMapping.ApprovalsConfigReportRecId = _configReportRecId;
            reportsMapping.PrintJobHeaderDataAreaId = printJobHeader.DataAreaId;
            reportsMapping.PrintJobHeaderRecId = printJobHeader.RecId;
            reportsMapping.DocuRef = docuRef.RecId;
            reportsMapping.RefTableId = _contextTableId;
            reportsMapping.RefRecId = _contextRecId;
            reportsMapping.RefCompanyId = curext();
            reportsMapping.insert();
        }

        return reportsMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the SSRS report based on the report configuration and the workflow context record.
    /// </summary>
    /// <param name="_configReportRecId">
    /// The record Id from <c>SysWindowsAppApprovalsConfigReports</c> table.
    /// </param>
    /// <param name="_contextTableId">
    /// Reference table Id from the workflow item context.
    /// </param>
    /// <param name="_contextRecId">
    /// Reference record Id from the workflow item context.
    /// </param>
    /// <returns>
    /// A guid value of the process Id.
    /// </returns>
    private guid generateReport(RefRecId _configReportRecId, RefTableId _contextTableId, RefRecId _contextRecId)
    {
        DocumentFileDataContract                fileDataContract = new DocumentFileDataContract();
        SysWindowsAppSrsReportProxy             proxyCtrlr;
        SysWindowsAppSrsReportProxyDataContract proxyDataContract;
        SysWindowsAppApprovalsConfigReports     appConfigReports;
        SysOperationStartResult                 result;
        Args                                    args;
        guid                                    callId;

        // Generate the report if the link is for SSRS report
        if (_configReportRecId)
        {
            select ReportDesignName from appConfigReports
                where appConfigReports.RecId == _configReportRecId;

            if (appConfigReports)
            {
                args = new Args();
                callId = newGuid();
                proxyDataContract = new SysWindowsAppSrsReportProxyDataContract();
                proxyDataContract.parmContextTableId(_contextTableId);
                proxyDataContract.parmContextRecId(_contextRecId);
                proxyDataContract.parmCallId(callId);
                args.parmObject(proxyDataContract);
                args.parm(queryValue(appConfigReports.RecId));
                proxyCtrlr = new SysWindowsAppSrsReportProxy();
                proxyCtrlr.parmReportName(appConfigReports.ReportDesignName);
                proxyCtrlr.parmArgs(args);
                proxyCtrlr.parmReportContract().parmReportCaption(guid2str(callId));
                proxyCtrlr.parmReportContract().parmPrintSettings().printMediumType(SRSPrintMediumType::Archive);
                proxyCtrlr.parmReportContract().parmPrintSettings().overwriteFile(true);
                proxyCtrlr.parmReportContract().parmPrintSettings().fileFormat(SRSReportFileFormat::PDF);
                proxyCtrlr.parmShowDialog(false);
                result = proxyCtrlr.startOperation();
            }
        }

        return callId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAlternateKey</Name>
				<Source><![CDATA[
    private container getAlternateKey(RefTableId _tableId, RefRecId _recId)
    {
        CompanyId           companyId;
        str                 alternateKey;
        SysDictTable        dictTable = new SysDictTable(_tableId);
        ExecutePermission   perm;

        if (tableHasStaticMethod(dictTable, identifierStr(getAlternateKey)))
        {
            // Grant permission to execute variable method calls
            perm = new ExecutePermission();
            perm.assert();
            [companyId, alternateKey] = dictTable.callStatic(identifierStr(getAlternateKey), _recId);
            // Close the code access permission scope.
            CodeAccessPermission::revertAssert();
        }

        return [companyId, alternateKey];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttachmentContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the content of the document.
    /// </summary>
    /// <param name="_docuRefRecId">
    /// The record Id from <c>DocuRef</c> table. This means that we are downloading the content directly from <c>DocuRef</c> table.
    /// </param>
    /// <param name="_configReportRecId">
    /// The record Id from <c>SysWindowsAppApprovalsConfigReports</c> table. This means that the report needs to be generated.
    /// </param>
    /// <param name="_contextTableId">
    /// Reference table Id from the workflow item context.
    /// </param>
    /// <param name="_contextRecId">
    /// Reference record Id from the workflow item context.
    /// </param>
    /// <returns>
    /// <c>DocumentFileDataContract</c> data contract object.
    /// </returns>
    public DocumentFileDataContract getAttachmentContent(DocuRefRecId _docuRefRecId, RefRecId _configReportRecId, RefTableId _contextTableId, RefRecId _contextRecId)
    {
        DocumentHandlingService     documentService;
        SysWindowsAppReportsMapping reportsMapping;
        guid                        result;

        // Get the attachment from DocuRef
        if (_docuRefRecId)
        {
            documentService = new DocumentHandlingService();
            return documentService.getFile(_docuRefRecId);
        }

        // Get the attachment from the report mapping, generateReport() should be called first
        if (_configReportRecId)
        {
            result = this.generateReport(_configReportRecId, _contextTableId, _contextRecId);

            if (result)
            {
                reportsMapping = this.createReportMapping(result, _configReportRecId, _contextTableId, _contextRecId);

                if (reportsMapping.DocuRef)
                {
                    documentService = new DocumentHandlingService();
                    return documentService.getFile(reportsMapping.DocuRef);
                }
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of attachments for the workflow based on the context record.
    /// </summary>
    /// <param name="_contextCompanyId">
    /// Company Id from the workflow item context.
    /// </param>
    /// <param name="_contextTableId">
    /// Reference table Id from the workflow item context.
    /// </param>
    /// <param name="_contextRecId">
    /// Reference record Id from the workflow item context.
    /// </param>
    /// <param name="_correlationId">
    /// Workflow correlation Id.
    /// </param>
    /// <param name="_elementId">
    /// Workflow item element Id.
    /// </param>
    /// <param name="_downloadAttachment">
    /// Optional. true if the actual contents of the document needs to be downloaded; otherwise, false.
    /// </param>
    /// <returns>
    /// <c>WorkflowApprovalWorkItemAttachment</c> object.
    /// </returns>
    public WorkflowApprovalWorkItemAttachment getAttachments(CompanyId                _contextCompanyId,
                                                             WorkflowContextTableId   _contextTableId,
                                                             WorkflowContextRecId     _contextRecId,
                                                             WorkflowCorrelationId    _correlationId,
                                                             WorkflowElementId        _elementId,
                                                             boolean                  _downloadAttachment = false)
    {
        #SRSFramework
        #Admin
        WorkflowApprovalWorkItemAttachment  workItemAttachments;
        DocumentHandlingService             documentService;
        DocumentDataContract                documentContract;
        List                                documentList;
        WorkflowElementTable                elementTable = WorkflowElementTable::find(_elementId);
        SysWindowsAppApprovalsConfig        appConfig;
        SysWindowsAppApprovalsConfigReports appConfigReports;
        SysWindowsAppReportsMapping         appReportsMapping;
        DocuRef                             docuRef;
        DocuValue                           docuValue;
        DictTable                           workflowDocumentTable = new DictTable(_contextTableId);

        // Validate if the user has access to the workflow document
        if (!this.hasAccessToWorkItem(_correlationId))
        {
            return null;
        }

        // Get the regular attachments
        documentService = new DocumentHandlingService();
        documentList = documentService.getList(_contextTableId, _contextRecId, workflowDocumentTable.dataPrCompany() ? _contextCompanyId : #DATCompany, _downloadAttachment);

        // Get the reports from configuration
        elementTable = WorkflowElementTable::find(_elementId);

        if (elementTable && elementTable.ElementType == WorkflowElementType::Approval)
        {
            while select RecId, ReportLabel from appConfigReports
                exists join appConfig
                where appConfig.ApprovalName == elementTable.ElementName &&
                      appConfig.RecId == appConfigReports.ApprovalsConfig
            {
                documentContract = new DocumentDataContract();

                // Check whether the report has already been printed/generated, otherwise get the config value
                select appReportsMapping
                    where appReportsMapping.ApprovalsConfigReportRecId == appConfigReports.RecId &&
                          appReportsMapping.RefCompanyId == _contextCompanyId &&
                          appReportsMapping.RefTableId == _contextTableId &&
                          appReportsMapping.RefRecId == _contextRecId
                    join RecId, ValueRecId, TypeId, CreatedDateTime from docuRef
                        where docuRef.RefTableId == tableNum(PrintJobHeader) &&
                              docuRef.RefRecId == appReportsMapping.PrintJobHeaderRecId &&
                              docuRef.ActualCompanyId == appReportsMapping.PrintJobHeaderDataAreaId
                    outer join FileType from docuValue
                        where docuValue.RecId == docuRef.ValueRecId;

                if (appReportsMapping)
                {
                    documentContract.parmRefTableId(_contextTableId);
                    documentContract.parmRefRecId(_contextRecId);
                    documentContract.parmRefCompanyId(_contextCompanyId);
                    documentContract.parmAttachmentRef(docuRef.ValueRecId);
                    documentContract.parmRecId(docuRef.RecId);
                    documentContract.parmTypeId(docuRef.TypeId);
                    documentContract.parmCreatedDateTime(docuRef.CreatedDateTime);
                    documentContract.parmFileType(docuValue.FileType);
                    documentContract.parmDescription(SysLabel::labelId2String2(appConfigReports.ReportLabel));
                    if (_downloadAttachment)
                    {
                        documentContract.parmAttachment(documentService.getFileFromDocuRef(docuRef));
                    }
                }
                else
                {
                    documentContract.parmRefTableId(tableNum(SysWindowsAppApprovalsConfigReports));
                    documentContract.parmRefRecId(appConfigReports.RecId);
                    documentContract.parmTypeId("@SYS326579");
                    documentContract.parmDescription(SysLabel::labelId2String2(appConfigReports.ReportLabel));
                }
                documentList.addEnd(documentContract);
            }
        }

        workItemAttachments = new WorkflowApprovalWorkItemAttachment();
        workItemAttachments.parmCorrelationId(_correlationId);
        workItemAttachments.parmAttachments(documentList);

        return workItemAttachments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets string that contains xml that represents work`s item workflow field group.
    /// </summary>
    /// <param name="_contextCompanyId">
    /// Company id from the workflow item context.
    /// </param>
    /// <param name="_contextTableId">
    /// Reference table ID from the workflow item context.
    /// </param>
    /// <param name="_contextRecId">
    /// Reference record ID from the workflow item context.
    /// </param>
    /// <param name="_correlationId">
    /// Workflow correlation Id.
    /// </param>
    /// <param name="_elementRecord">
    /// <c>WorkflowElementTable</c> Workflow element record.
    /// </param>
    /// <param name="_isSummary">
    /// Flag that indicates type of information to return: summary or detailed data.
    /// </param>
    /// <returns>
    /// List of <c>WorkflowGenericList</c> that contains the generic data.
    /// </returns>
    private List getData(CompanyId              _contextCompanyId,
                        WorkflowContextTableId  _contextTableId,
                        WorkflowContextRecId    _contextRecId,
                        WorkflowCorrelationId   _correlationId,
                        WorkflowElementTable    _elementRecord,
                        boolean                 _isSummary = true)
    {
        WorkflowContext             workflowContext;
        SysDictTable                sysDictTable;
        SysDictField                sysDictField;
        SysDictType                 sysDictType;
        QueryRun                    documentQueryRun;
        Common                      documentRecord;
        FieldValue                  value;
        List                        dataList = new List(Types::Class);
        WorkflowGenericList         genericList;

        Query                       qConfigFields;
        QueryBuildDataSource        qbdsConfig, qbdsConfigFields;
        QueryRun                    qrConfigFields;
        QueryBuildRange             qbrFieldType;

        SysWindowsAppApprovalsConfigFields  configFields;
        SurrogateFKReplacementHelper        surrogateHelper;
        ExecutePermission                   perm;
        Object                              workflowDocument;
        WorkflowTypeName                    templateName;
        SysDictWorkflowType                 workflowTemplate;
        SysDictClass                        sysDictClass;

        try
        {
            if (_elementRecord && _elementRecord.ElementType == WorkflowElementType::Approval)
            {
                // Grant permission to execute variable method calls
                perm = new ExecutePermission();
                perm.assert();

                // Get the document record
                workflowContext = WorkflowContext::newWorkflowContext(_contextCompanyId, _contextTableId, _contextRecId, _correlationId);
                templateName = _elementRecord.workflowVersionTable().workflowTable().TemplateName;
                documentQueryRun = SysWorkflowHelper::getDocumentQueryRun(workflowContext, templateName);

                // Query configuration fields table
                qConfigFields = new Query();
                qbdsConfigFields = qConfigFields.addDataSource(tableNum(SysWindowsAppApprovalsConfigFields));
                qbdsConfigFields.addOrderByField(fieldNum(SysWindowsAppApprovalsConfigFields, TileFieldType));
                qbdsConfigFields.addOrderByField(fieldNum(SysWindowsAppApprovalsConfigFields, LineNum));
                qbdsConfig = qbdsConfigFields.addDataSource(tableNum(SysWindowsAppApprovalsConfig));
                qbdsConfig.relations(true);
                qbdsConfig.joinMode(JoinMode::ExistsJoin);
                qbdsConfig.addRange(fieldNum(SysWindowsAppApprovalsConfig, ApprovalName)).value(_elementRecord.ElementName);

                qbrFieldType = qbdsConfigFields.addRange(fieldNum(SysWindowsAppApprovalsConfigFields, TileFieldType));

                if (_isSummary)
                {
                    // Summary fields
                    qbrFieldType.value(SysQuery::valueNot(SysWindowsAppTileFieldType::Generic));
                }
                else
                {
                    // Overview
                    qbrFieldType.value(SysQuery::value(SysWindowsAppTileFieldType::Generic));
                }

                qrConfigFields = new QueryRun(qConfigFields);
                while (qrConfigFields.next())
                {
                    surrogateHelper = null;
                    configFields = qrConfigFields.get(tableNum(SysWindowsAppApprovalsConfigFields));

                    if (configFields.DocumentTableId)
                    {
                        documentRecord = documentQueryRun.get(configFields.DocumentTableId);
                    }

                    switch (configFields.DocumentFieldType)
                    {
                        case WorkflowDocumentFieldType::Method :
                            // Display method
                            sysDictTable = new SysDictTable(configFields.DocumentTableId);

                            if (sysDictTable)
                            {
                                sysDictType = new SysDictType(configFields.DocumentFieldId); // DocumentFieldId is EDT for display methods
                                if (sysDictType.isExtending(extendedTypeNum(RefRecId)))
                                {
                                    surrogateHelper = SurrogateFKReplacementHelper::constructForEDT(sysDictType.name());
                                }
                                changecompany (SysWorkflowHelper::getCompanyId(_contextCompanyId))
                                {
                                    value = this.getValue(sysDictTable.callObject(configFields.DocumentFieldName, documentRecord), configFields.DocumentBaseType, configFields.DocumentEnumId, surrogateHelper);
                                }
                            }
                            else
                            {
                                // Get the display value from the class document
                                workflowTemplate = new SysDictWorkflowType(templateName);
                                if (workflowTemplate)
                                {
                                    sysDictClass = new SysDictClass(className2Id(workflowTemplate.document()));
                                    if (sysDictClass && sysDictClass.isExtending(classNum(WorkflowDocument)) && sysDictClass.hasObjectMethod(configFields.DocumentFieldName))
                                    {
                                        workflowDocument = sysDictClass.makeObject();
                                        changecompany (SysWorkflowHelper::getCompanyId(_contextCompanyId))
                                        {
                                            value = sysDictClass.callObject(configFields.DocumentFieldName, workflowDocument, _contextCompanyId, _contextTableId, _contextRecId);
                                        }
                                    }
                                }
                            }
                            break;

                        case WorkflowDocumentFieldType::Field :
                            // Table field
                            sysDictField = new SysDictField(configFields.DocumentTableId, configFields.DocumentFieldId);
                            if (sysDictField.isSurrogateForeignKey())
                            {
                                surrogateHelper = SurrogateFKReplacementHelper::construct(AbsoluteFieldBinding::construct(sysDictField.name(), sysDictField.tableName()));
                            }
                            value = this.getValue(documentRecord.getFieldValue(configFields.DocumentFieldName), configFields.DocumentBaseType, configFields.DocumentEnumId, surrogateHelper);
                            break;
                    }

                    genericList = new WorkflowGenericList();
                    genericList.parmFieldName(configFields.DocumentFieldName);
                    genericList.parmFieldValue(value);
                    genericList.parmFieldLabel(SysLabel::labelId2String2(configFields.DocumentFieldLabel));
                    genericList.parmFieldType(configFields.DocumentBaseType);
                    genericList.parmTileFieldType(configFields.TileFieldType);
                    dataList.addEnd(genericList);
                }
                // Close the code access permission scope.
                CodeAccessPermission::revertAssert();
            }
        }
        catch
        {
            dataList.empty();
        }

        return dataList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the translated label value of the enum.
    /// </summary>
    /// <param name="_enumId">
    /// The enum ID.
    /// </param>
    /// <param name="_enumIndex">
    /// The enum index value.
    /// </param>
    /// <returns>
    /// The string translated label.
    /// </returns>
    /// <remarks>
    /// Translate boolean enum types to NoYes.
    /// </remarks>
    private str getEnumValue(EnumId _enumId, int _enumIndex)
    {
        SysDictEnum sysDictEnum;

        if (enumId2Name(_enumId) == identifierStr(boolean))
        {
            sysDictEnum = new SysDictEnum(enumNum(NoYes));
        }
        else
        {
            sysDictEnum = new SysDictEnum(_enumId);
        }
        return sysDictEnum.index2Label(_enumIndex);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the workflow item history.
    /// </summary>
    /// <param name="_id">
    /// Item correlation Id.
    /// </param>
    /// <returns>
    /// <c>WorkflowAprovalWorkItemHistory</c> object that contains information about work item history.
    /// </returns>
    public WorkflowApprovalWorkItemHistory getHistory(WorkflowCorrelationId _id)
    {
        List                                    comments;
        WorkflowApprovalWorkItemComment         workItemComment;
        WorkflowApprovalWorkItemHistory         workItemHistory;
        WorkflowTrackingTable                   trackingRecord;
        WorkflowTrackingStatusTable             trackingStatus;
        WorkflowTrackingCommentTable            trackingComment;
        DirPersonInfoService                    personInfoService;
        DirPersonInfoData                       personInfoData;

        // Validate if the user has access to the workflow document
        if (!this.hasAccessToWorkItem(_id))
        {
            return null;
        }

        comments = new List(Types::Class);
        personInfoService = new DirPersonInfoService();

        while select User, TrackingId, TrackingContext, TrackingType from trackingRecord order by trackingRecord.CreatedDateTime desc where
           ((trackingRecord.TrackingContext == WorkflowTrackingContext::WorkItem &&
              trackingRecord.TrackingType != WorkflowTrackingType::Creation) ||
            ((trackingRecord.TrackingType == WorkflowTrackingType::Submission ||
              trackingRecord.TrackingType == WorkflowTrackingType::SubmitOnBehalf ||
              trackingRecord.TrackingType == WorkflowTrackingType::Cancellation ||
              trackingRecord.TrackingType == WorkflowTrackingType::Resume) &&
             trackingRecord.TrackingContext == WorkflowTrackingContext::Workflow) ||
             (trackingRecord.TrackingType == WorkflowTrackingType::Resubmission) ||
             (trackingRecord.TrackingContext == WorkflowTrackingContext::LineItemWorkflow &&
              trackingRecord.TrackingType == WorkflowTrackingType::Creation))
        join Comment, CreatedDateTime, TrackingId, MessageLabelId from trackingComment
            where trackingComment.TrackingId == trackingRecord.TrackingId
        exists join trackingStatus
            where trackingStatus.RecId == trackingRecord.WorkflowTrackingStatusTable &&
                  trackingStatus.CorrelationId == _id
        {
            workItemComment = new WorkflowApprovalWorkItemComment();
            workItemComment.parmComment(trackingComment.Comment);
            workItemComment.parmUserId(trackingRecord.User);
            workItemComment.parmDateTime(trackingComment.CreatedDateTime);
            workItemComment.parmActionLabel(trackingComment.getLocalizeTrackingMessage());
            workItemComment.parmWorkflowTrackingType(trackingRecord.TrackingType);
            personInfoData = personInfoService.getPersonInfoFromUserId(trackingRecord.User);
            workItemComment.parmCommunicatorSignIn(personInfoData.parmPersonCommunicatorSignIn());
            workItemComment.parmUser(personInfoData.parmPersonName());
            comments.addEnd(workItemComment);
        }

        workItemHistory = new WorkflowApprovalWorkItemHistory();
        workItemHistory.parmCorrelationId(_id);
        workItemHistory.parmComments(comments);

        return workItemHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHistoryByDocumentRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the workflow item history given the document recId and table name.
    /// </summary>
    /// <param name="_tableName">
    /// The name of the table.
    /// </param>
    /// <param name="_recId">
    /// The RecId of the document.
    /// </param>
    /// <returns>
    /// A <c>WorkflowAprovalWorkItemHistory</c> object that contains information about work item history.
    /// </returns>
    public WorkflowApprovalWorkItemHistory getHistoryByDocumentRecId(TableName _tableName, RecId _recId)
    {
        WorkflowTrackingStatusTable workflowTrackingStatusTable;

        select firstonly RecId, CorrelationId from workflowTrackingStatusTable
            order by CreatedDateTime desc where
                workflowTrackingStatusTable.ContextRecId   == _recId &&
                workflowTrackingStatusTable.ContextTableId == tableName2id(_tableName);

        if (!workflowTrackingStatusTable.RecId)
        {
            throw error("@SYS303332");
        }

        return this.getHistory(workflowTrackingStatusTable.CorrelationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets overview data for worklfow item.
    /// </summary>
    /// <param name="_contextCompanyId">
    /// Company id from the workflow item context.
    /// </param>
    /// <param name="_contextTableId">
    /// Reference table ID from the workflow item context.
    /// </param>
    /// <param name="_contextRecId">
    /// Reference record ID from the workflow item context.
    /// </param>
    /// <param name="_correlationId">
    /// Workflow correlation Id.
    /// </param>
    /// <param name="_elementId">
    /// Workflow item element Id.
    /// </param>
    /// <returns>
    /// String that contains workflow overview data.
    /// </returns>
    public WorkflowApprovalWorkItemOverview getItem(CompanyId               _contextCompanyId,
                                                    WorkflowContextTableId  _contextTableId,
                                                    WorkflowContextRecId    _contextRecId,
                                                    WorkflowCorrelationId   _correlationId,
                                                    WorkflowElementId       _elementId)
    {
        WorkflowApprovalWorkItemOverview    result;
        WorkflowWorkItemTable               workflowWorkItemTable;
        WorkflowGenericList                 instructionField;
        SysDictField                        sysDictField;
        WorkflowElementTable                elementTable;

        result = new WorkflowApprovalWorkItemOverview();
        elementTable = WorkflowElementTable::find(_elementId);

        result.parmCorrelationId(_correlationId);
        result.parmFieldGroup(this.getData(_contextCompanyId,
                            _contextTableId,
                            _contextRecId,
                            _correlationId,
                            elementTable,
                            false));

        select firstonly Description
            from workflowWorkItemTable
            where workflowWorkItemTable.CorrelationId == _correlationId
                && workflowWorkItemTable.UserId == curUserId();
        sysDictField = new SysDictField(tableNum(WorkflowWorkItemTable), fieldNum(WorkflowWorkItemTable, Description));
        instructionField = new WorkflowGenericList();
        // Following is being done so that the name of the field comes as Instructions in UI and not Description.
        instructionField.parmFieldLabel("@SYS110260");
        instructionField.parmFieldName(sysDictField.name());
        instructionField.parmFieldType(sysDictField.baseType());
        instructionField.parmFieldValue(workflowWorkItemTable.Description);

        result.parmFieldGroup().addStart(instructionField);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the information about currently active approval work items.
    /// </summary>
    /// <param name="_pending">
    /// If true get pending approvals else get approved/rejected approvals.
    /// </param>
    /// <param name="_numberOfDaysToShow">
    /// Number of days to show the recent approvals for.
    /// </param>
    /// <returns>
    /// A list of <c>WorkflowApprovalsItem</c> objects that contains information about
    /// workflow work items.
    /// </returns>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(WorkflowApprovalWorkItem))]
    public List getItems(boolean _pending = true, int _numberOfDaysToShow = 30)
    {
        //general tables
        WorkflowTrackingTable           trackingRecord;
        WorkflowTrackingStatusTable     trackingStatusTable;
        WorkflowWorkItemTable           workflowWorkItem;
        WorkflowElementTable            elementTable;
        SysWindowsAppApprovalsConfig    approvalsConfig;
        Common                          common;

        //utility vars
        SysDictTable                    sysDictTable;
        DictEnum                        dictEnum;
        utcdatetime                     offsetDateTime;
        WorkflowUser                    submitterUserId;

        //results
        List                            workflowItems;
        WorkflowApprovalWorkItem        workflowApprovalsItem;
        List                            summary;
        str                             companyId;
        str                             alternateKey;

        boolean recordExists(CompanyId _companyId, RefRecId _refRecId)
        {
            if (sysDictTable)
            {
                common = sysDictTable.makeRecord();
                changecompany (SysWorkflowHelper::getCompanyId(_companyId))
                {
                    select firstonly RecId from common where common.RecId == _refRecId;
                }
                return (common.RecId != 0);
            }
            return false;
        }

        // Load defaults if the table is empty.
        select firstonly approvalsConfig;
        if (!approvalsConfig)
        {
            unchecked (Uncheck::TableSecurityPermission)
            {
                SysWindowsAppApprovalsConfig::loadDefaults();
            }
        }

        workflowItems = new List(Types::Class);
        dictEnum = new DictEnum(enumNum(WorkflowWorkItemStatus));

        if (_pending)
        {
            // Retrieves information about all pending work items for the current user
            while select RefTableId, RefRecId, Status, CorrelationId, Id, ElementId, CompanyId, DueDateTime
                from workflowWorkItem
                where workflowWorkItem.Status == WorkflowWorkItemStatus::Pending
                    && workflowWorkItem.UserId == curUserId()
                    && (workflowWorkItem.Type == WorkflowWorkItemType::WorkItem ||
                        workflowWorkItem.Type == WorkflowWorkItemType::FinalApprover ||
                        workflowWorkItem.Type == WorkflowWorkItemType::Escalated)
                join Document, InstanceNumber, RecId, CreatedDateTime
                from trackingStatusTable
                where trackingStatusTable.CorrelationId == workflowWorkItem.CorrelationId
            {
                // Filling the common fields
                workflowApprovalsItem = new WorkflowApprovalWorkItem();
                sysDictTable = new SysDictTable(workflowWorkItem.RefTableId);

                // Check whether the context record exists or not
                if (!recordExists(workflowWorkItem.CompanyId, workflowWorkItem.RefRecId))
                {
                    continue;
                }

                workflowApprovalsItem.parmWorkItemId(workflowWorkItem.Id);
                workflowApprovalsItem.parmStatus(enum2int(workflowWorkItem.Status));
                workflowApprovalsItem.parmElementId(workflowWorkItem.ElementId);
                workflowApprovalsItem.parmItemType(sysDictTable.name());
                workflowApprovalsItem.parmItemTypeGroupLabel(sysDictTable.label());
                workflowApprovalsItem.parmItemTypeLabel(SysLabel::labelId2String2(sysDictTable.singularLabel()));
                workflowApprovalsItem.parmStatusLabel(dictEnum.index2Label(workflowWorkItem.Status));
                submitterUserId = this.getSubmitterUserId(trackingStatusTable.RecId);
                workflowApprovalsItem.parmSubmitter(SysWorkflowHelper::getDirPartyNameFromUserId(submitterUserId));
                workflowApprovalsItem.parmSubmitterUserId(submitterUserId);
                workflowApprovalsItem.parmSubmittedDate(trackingStatusTable.CreatedDateTime);
                workflowApprovalsItem.parmDueDate(workflowWorkItem.DueDateTime);
                workflowApprovalsItem.parmCorrelationId(workflowWorkItem.CorrelationId);
                workflowApprovalsItem.parmCompanyId(workflowWorkItem.CompanyId);
                [companyId,alternateKey] = this.getAlternateKey(workflowWorkItem.RefTableId, workflowWorkItem.RefRecId);
                if (!workflowWorkItem.CompanyId)
                {
                    workflowApprovalsItem.parmCompanyId(companyId);
                }
                workflowApprovalsItem.parmInstanceNumber(alternateKey);
                workflowApprovalsItem.parmTableId(workflowWorkItem.RefTableId);
                workflowApprovalsItem.parmRecId(workflowWorkItem.RefRecId);

                // Get the tile information
                elementTable = WorkflowElementTable::find(workflowWorkItem.ElementId);
                summary = this.getData(workflowWorkItem.CompanyId,
                                        workflowWorkItem.RefTableId,
                                        workflowWorkItem.RefRecId,
                                        workflowWorkItem.CorrelationId,
                                        elementTable);
                workflowApprovalsItem.parmSummary(summary);

                select firstonly approvalsConfig where approvalsConfig.ApprovalName == elementTable.ElementName;

                if (approvalsConfig)
                {
                    workflowApprovalsItem.parmTileColor(approvalsConfig.TileColor);
                    workflowApprovalsItem.parmTileStyle(approvalsConfig.TileStyle);
                }

                workflowItems.addEnd(workflowApprovalsItem);
            }
        }
        else
        {
            offsetDateTime  = DateTimeUtil::addDays(DateTimeUtil::getSystemDateTime(), -1*_numberOfDaysToShow);
            // Retrieves information about all approved or rejected work items for the current user
            while select ElementId, User, CreatedDateTime, TrackingType, TrackingId
                from trackingRecord order by trackingRecord.CreatedDateTime desc
                where trackingRecord.TrackingContext == WorkflowTrackingContext::WorkItem
                    && (trackingRecord.TrackingType == WorkflowTrackingType::Approval
                        || trackingRecord.TrackingType == WorkflowTrackingType::Rejection)
                    && trackingRecord.User == curUserId()
                    && trackingRecord.CreatedDateTime > offsetDateTime
                join Document, CreatedDateTime, ContextCompanyId, ContextTableId, ContextRecId, CorrelationId, InstanceNumber, RecId
                from trackingStatusTable
                where trackingStatusTable.RecId == trackingRecord.WorkflowTrackingStatusTable
            {
                //filling the common fields
                workflowApprovalsItem = new WorkflowApprovalWorkItem();
                workflowApprovalsItem.parmCorrelationId(trackingStatusTable.CorrelationId);
                sysDictTable = new SysDictTable(trackingStatusTable.ContextTableId);

                // Check whether the context record exists or not
                if (!recordExists(trackingStatusTable.ContextCompanyId, trackingStatusTable.ContextRecId))
                {
                    continue;
                }

                workflowApprovalsItem.parmItemType(sysDictTable.name());
                workflowApprovalsItem.parmItemTypeGroupLabel(sysDictTable.label());
                workflowApprovalsItem.parmItemTypeLabel(SysLabel::labelId2String2(sysDictTable.singularLabel()));
                workflowApprovalsItem.parmStatus(enum2int(WorkflowWorkItemStatus::Completed));
                workflowApprovalsItem.parmStatusLabel(dictEnum.index2Label(WorkflowWorkItemStatus::Completed));
                workflowApprovalsItem.parmActionTaken(enum2int(trackingRecord.TrackingType));
                workflowApprovalsItem.parmSubmittedDate(trackingStatusTable.CreatedDateTime);
                workflowApprovalsItem.parmApprovedDate(trackingRecord.CreatedDateTime);
                submitterUserId = this.getSubmitterUserId(trackingStatusTable.RecId);
                workflowApprovalsItem.parmSubmitter(SysWorkflowHelper::getDirPartyNameFromUserId(submitterUserId));
                workflowApprovalsItem.parmSubmitterUserId(submitterUserId);
                workflowApprovalsItem.parmElementId(trackingRecord.ElementId);
                workflowApprovalsItem.parmWorkItemId(trackingRecord.TrackingId);
                workflowApprovalsItem.parmTableId(trackingStatusTable.ContextTableId);
                workflowApprovalsItem.parmRecId(trackingStatusTable.ContextRecId);
                workflowApprovalsItem.parmCompanyId(trackingStatusTable.ContextCompanyId);
                [companyId,alternateKey] = this.getAlternateKey(trackingStatusTable.ContextTableId, trackingStatusTable.ContextRecId);
                if (!trackingStatusTable.ContextCompanyId)
                {
                    workflowApprovalsItem.parmCompanyId(companyId);
                }
                workflowApprovalsItem.parmInstanceNumber(alternateKey);

                // Get the tile information
                elementTable = WorkflowElementTable::find(trackingRecord.ElementId);
                summary = this.getData(trackingStatusTable.ContextCompanyId,
                                          trackingStatusTable.ContextTableId,
                                          trackingStatusTable.ContextRecId,
                                          trackingStatusTable.CorrelationId,
                                          elementTable);
                workflowApprovalsItem.parmSummary(summary);

                select approvalsConfig where approvalsConfig.ApprovalName == elementTable.ElementName;

                if (approvalsConfig)
                {
                    workflowApprovalsItem.parmTileColor(approvalsConfig.TileColor);
                    workflowApprovalsItem.parmTileStyle(approvalsConfig.TileStyle);
                }

                workflowItems.addEnd(workflowApprovalsItem);
            }
        }

        return workflowItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubmitterUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets submitter user id.
    /// </summary>
    /// <param name="_recId">
    /// Workflow tracking starus table record id.
    /// </param>
    /// <returns>
    /// Submitter user id.
    /// </returns>
    private WorkflowUser getSubmitterUserId(RefRecId _recId)
    {
        WorkflowTrackingTable workflowTrackingTable;

        select firstonly User from workflowTrackingTable
            order by CreatedDateTime desc, RecId desc
            where  workflowTrackingTable.WorkflowTrackingStatusTable   ==   _recId
                && ((workflowTrackingTable.TrackingContext == WorkflowTrackingContext::Workflow
                && (workflowTrackingTable.TrackingType == WorkflowTrackingType::Submission
                || workflowTrackingTable.TrackingType == WorkflowTrackingType::SubmitOnBehalf))
                || (workflowTrackingTable.TrackingContext == WorkflowTrackingContext::LineItemWorkflow
                && workflowTrackingTable.TrackingType == WorkflowTrackingType::Creation));

        return workflowTrackingTable.User;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSurrogateReplacement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the surrogate key replacement.
    /// </summary>
    /// <param name="_surrogateHelper">
    /// <c>SurrogateFKReplacementHelper</c> object created based on either the EDT or table field information.
    /// </param>
    /// <param name="_refRecId">
    /// The record ID of the surrogate key.
    /// </param>
    /// <returns>
    /// The string value of the replacement field(s).
    /// </returns>
    private str getSurrogateReplacement(SurrogateFKReplacementHelper _surrogateHelper, int64 _refRecId)
    {
        str strValue;
        FieldFilterValue filterValue;
        ListEnumerator bindingValuesEnumerator;
        int countVal;
        List displayFieldValues;

        displayFieldValues = _surrogateHelper.displayValuesFromRecID(_refRecId, SurrogateFKReplacementHelper::implicitReplacementFieldGroupName());
        bindingValuesEnumerator = displayFieldValues.getEnumerator();
        if (bindingValuesEnumerator)
        {
            countVal = 1;
            while (bindingValuesEnumerator.moveNext())
            {
                filterValue = bindingValuesEnumerator.current();
                if (countVal == 1)
                {
                    strValue = filterValue.value();
                }
                else
                {
                    strValue = strValue + ' ' + filterValue.value();
                }
                countVal++;
            }
        }
        return strValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the proper string representation of the generic field value depending on the type via <c>SysDictField</c>
    /// </summary>
    /// <param name="_rawValue">
    /// The raw value to convert to string.
    /// </param>
    /// <param name="_baseType">
    /// The base type value.
    /// </param>
    /// <param name="_enumId">
    /// The enumId of the field, if enum type.
    /// </param>
    /// <param name="_surrogateHelper">
    /// The <c>SurrogateFKReplacementHelper</c> object if the field is a foreign key.
    /// </param>
    /// <returns>
    /// A string representation of the raw value.
    /// </returns>
    private str getValue(anytype _rawValue, Types _baseType, EnumId _enumId, SurrogateFKReplacementHelper _surrogateHelper = null)
    {
        str strValue;

        switch (_baseType)
        {
            case Types::Enum:
                strValue = this.getEnumValue(_enumId, _rawValue);
                break;

            case Types::Int64:
                // Replace with surrogate key
                if (_surrogateHelper)
                {
                    strValue = this.getSurrogateReplacement(_surrogateHelper, _rawValue);
                }
                break;

            case Types::Real:
                strValue = _rawValue;
                break;
        }

        if (!strValue)
        {
            strValue = strFmt(#ToStr, _rawValue);
        }

        return strValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAccessToWorkItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the user has access to the workflow work item
    /// </summary>
    /// <param name="_correlationId">
    /// <c>WorkflowCorrelationId</c> identifier of the workflow record.
    /// </param>
    /// <returns>
    /// true if the user has access to the workflow work item; otherwise, false.
    /// </returns>
    public boolean hasAccessToWorkItem(WorkflowCorrelationId _correlationId)
    {
        WorkflowWorkItemTable       workItemTable;
        WorkflowTrackingStatusTable trackingStatusTable;
        WorkflowTrackingTable       trackingTable;

        // Check for pending approvals first
        select firstOnly RecId from workItemTable
            where workItemTable.CorrelationId == _correlationId
                && workItemTable.UserId == curUserId();

        if (workItemTable.RecId)
        {
            return true;
        }

        // Then try recent approvals
        select firstOnly RecId from trackingStatusTable
            where trackingStatusTable.CorrelationId == _correlationId
            exists join trackingTable
                where trackingTable.WorkflowTrackingStatusTable == trackingStatusTable.RecId
                    && trackingTable.User == curUserId();

        if (trackingStatusTable.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssignedToMessageLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and returns an AssignedTo message from the workflow tracking argument.
    /// </summary>
    /// <param name="_trackingComment">
    /// The <c>WorkflowTrackingCommentTable</c> table buffer.
    /// </param>
    /// <returns>
    /// AssignedTo message from the workflow tracking argument.
    /// </returns>
    public static str getAssignedToMessageLabel(WorkflowTrackingCommentTable _trackingComment)
    {
        WorkflowTrackingArgumentTable   argumentTable;
        str                             userName,
                                        datetimeStr,
                                        assignedToUserName;
        utcdatetime                     defaultDateTime = DateTimeUtil::minValue();
        SysDictType                     sysDictType;
        str                             argumentLabel;
        
        while select TrackingDate, Value, DataType from argumentTable
            order by WorkflowTrackingCommentTable, Sequence
            where argumentTable.WorkflowTrackingCommentTable == _trackingComment.RecId
        {
            if (defaultDateTime != argumentTable.TrackingDate)
            {
                datetimeStr = datetime2str(DateTimeUtil::applyTimeZoneOffset(argumentTable.TrackingDate, DateTimeUtil::getUserPreferredTimeZone()), DateFlags::FormatAll);
            }
            else
            {
                sysDictType = new SysDictType(extendedTypeName2Id(argumentTable.DataType));
                if (sysDictType &&
                        (sysDictType.id() == extendedTypeNum(userId) || sysDictType.isExtending(extendedTypeNum(userId)) ||
                        sysDictType.id() == extendedTypeNum(createdBy) || sysDictType.isExtending(extendedTypeNum(createdBy)) ||
                        sysDictType.id() == extendedTypeNum(modifiedBy) || sysDictType.isExtending(extendedTypeNum(modifiedBy)) ||
                        sysDictType.id() == extendedTypeNum(WorkflowUser) || sysDictType.isExtending(extendedTypeNum(WorkflowUser))))
                {
                    userName = SysWorkflowHelper::getDirPartyNameFromUserId(argumentTable.Value);
                }
                else
                {
                    datetimeStr = argumentTable.Value;
                }
            }
        }
              
        // Create a string with the following format: "Assigned to: <user name>"
        assignedToUserName = strFmt("@SYS76766", "@SYS121188", userName);
        
        // When due date is defined, we want the result to look like: "Assigned to: <user name> [Due date: <due date>]"
        if (datetimeStr != '')
        {
            argumentLabel = strFmt("@SYS110264", assignedToUserName, datetimeStr);
        }
        else
        {
            // When due date is not defined, the result will look like: "Assigned to: <user name>"
            argumentLabel = assignedToUserName;
        }

        return argumentLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowHistoryMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetch the workflow history message.
    /// </summary>
    /// <param name="_workflowTrackingCommentTable">
    /// The <c> WorkflowTrackingCommentTable</c> table buffer.
    /// </param>
    /// <returns>
    ///  Workflow history message.
    /// </returns>
    public static str getWorkflowHistoryMessage(WorkflowTrackingCommentTable _workflowTrackingCommentTable)
    {
        WorkflowTrackingTable   workflowTrackingTableLocal;

        select firstonly TrackingContext, TrackingType from workflowTrackingTableLocal
                where workflowTrackingTableLocal.TrackingId == _workflowTrackingCommentTable.TrackingId;

        if (workflowTrackingTableLocal.TrackingContext  == WorkflowTrackingContext::WorkItem &&
                    workflowTrackingTableLocal.TrackingType == WorkflowTrackingType::Creation)
        {
            return SysWorkflowApprovalWorkitemService::getAssignedToMessageLabel(_workflowTrackingCommentTable);
        }
        else
        {
            return _workflowTrackingCommentTable.getLocalizeTrackingMessage();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>