<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferLine_RU_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransferLine_RU_ApplicationSuite_Extension</c> class is an extension class for the InventTransferLine table.
/// </summary>
#ISOcountryRegionCodes
[ExtensionOf(tableStr(InventTransferLine))]
internal final class InventTransferLine_RU_ApplicationSuite_Extension
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && this.existsPhysicallyPostedInventTrans())
        {
            throw error("@Inventory_Localization:InventTransferLineDeleteValidationError");
        }

        next delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsPhysicallyPostedInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether corresponding physically posted <c>InventTrans</c> record exists or not.
    /// </summary>
    /// <returns>
    /// true if corresponding physically posted <c>InventTrans</c> record exists; otherwise false.
    /// </returns>
    private boolean existsPhysicallyPostedInventTrans()
    {
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;

        select firstonly RecId from inventTransOrigin
            where inventTransOrigin.InventTransId == this.InventTransId
            exists join inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    && inventTrans.DatePhysical != dateNull();

        return inventTransOrigin.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = next validateWrite();

        InventTransferLine itlOrig = this.orig();
        ret = this.validateInventProfileId_RU(this.inventDim(), itlOrig.inventDim()) && ret;
        ret = this.validateInventProfileId_RU(this.inventDimTo_RU(), itlOrig.inventDimTo_RU(), true) && ret;
        ret = InventTransferLine::validateInventProfileTypes_RU(this.inventDim(), this.inventDimTo_RU()) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventProfileTypes_RU</Name>
				<Source><![CDATA[
    internal static boolean validateInventProfileTypes_RU(InventDim _inventDim, InventDim _inventDimTo)
    {
        boolean ok = true;
        if (_inventDim.InventProfileId_RU &&
            _inventDimTo.InventProfileId_RU &&
            InventProfile_RU::find(_inventDim.InventProfileId_RU).InventProfileType != InventProfile_RU::find(_inventDimTo.InventProfileId_RU).InventProfileType)
        {
            ok = checkFailed("@GLS115650");
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventProfileId_RU</Name>
				<Source><![CDATA[
    internal boolean validateInventProfileId_RU(InventDim _inventDim, InventDim _inventDimOrig, boolean _checkHeaderInventProfileTo = false)
    {
        boolean ok = true;

        if (EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(this.ItemId, fieldNum(InventDim, InventProfileId_RU)) &&
            _inventDim.InventProfileId_RU &&
            _inventDim.InventProfileId_RU != _inventDimOrig.InventProfileId_RU)

        {
            InventTransferTable inventTransferTable = this.inventTransferTable();

            if (inventTransferTable.InventProfileType_RU &&  inventTransferTable.InventProfileType_RU != _inventDim.inventProfile_RU().InventProfileType)
            {
                ok = checkFailed(strFmt("@GLS113736", _inventDim.InventProfileId_RU, inventTransferTable.InventProfileType_RU));
            }

            boolean headerInvProfileHasToBeUsed = inventTransferTable.InventProfileId_RU && inventTransferTable.InventProfileId_RU != _inventDim.InventProfileId_RU;

            if (headerInvProfileHasToBeUsed ||
                (_checkHeaderInventProfileTo && inventTransferTable.InventProfileIdTo_RU && inventTransferTable.InventProfileIdTo_RU != _inventDim.InventProfileId_RU))
            {
                InventProfileId_RU headerProfileId = headerInvProfileHasToBeUsed ?
                    inventTransferTable.InventProfileId_RU:
                    inventTransferTable.InventProfileIdTo_RU;
                if (inventTransferTable.InventProfileUseRelated_RU == NoYes::Yes)
                {
                    if (!InventProfileRelation_RU::find(inventTransferTable.InventProfileId_RU, _inventDim.InventProfileId_RU))
                    {
                        ok = checkFailed(strFmt("@GLS113731", _inventDim.InventProfileId_RU, headerProfileId));
                    }
                }
                else
                {
                    ok = checkFailed(strFmt("@GLS113733", _inventDim.InventProfileId_RU, headerProfileId));
                }
            }
        }
        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>