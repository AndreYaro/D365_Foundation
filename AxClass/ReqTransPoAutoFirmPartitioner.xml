<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransPoAutoFirmPartitioner</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqTransPoAutoFirmPartitioner</c> class partitions a set of orders by sorting them by level and splitting the list in several bundles.
/// </summary>
class ReqTransPoAutoFirmPartitioner
{
    public const int PossibleBiggestBomLevel = 999;
    internal const int PartitionOrdersForPostProcessingBundlesLevel = PossibleBiggestBomLevel + 1;
    internal const int OrdersPostPorcessingBundlesLevel = PossibleBiggestBomLevel + 2;
    internal const int MaxBundleLevel = OrdersPostPorcessingBundlesLevel;

    #Req

    private ReqParameters reqParameters;
    private ProdPurch prodPurch;
    private ProdPurch prodPurchDerivedDirectly;
    private boolean groupPurchaseOrders;
    private int nextBundleId;
    private ReqProcessId processId;
    private ReqCalcTaskController reqCalcTaskController;
    private RecordInsertList unfirmedOrdersInsertList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        reqParameters = ReqParameters::find();
        prodPurch = ProdPurch::newFromReqParameters(reqParameters);
        prodPurchDerivedDirectly = ProdPurch::newProd();
        groupPurchaseOrders = prodPurch.isPurchaseOrderGroupingEnabled(); // We don't need to check prodPurchDerivedDirectly.isGroupingPurchaseOrdersOn() since directly derived orders will be firmed when expanding BOM for a corresponding planned production order.
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqTransPoAutoFirmPartitioner construct(ReqPlanData _reqPlanData)
    {
        return new ReqTransPoAutoFirmPartitioner();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBundles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Partitions the orders.
    /// This is done by sorting orders by level.
    /// Then iterating over sorted orders and grouping them to bundles that hold orders for the same level and items' number does not exceed predefined threshold.
    /// One task bundle and a task is created for each bundle.
    /// </summary>
    /// <param name="_mapReqTransMark">
    ///    Map ReqTrans.RecId to ReqTrans that hold all ReqTrans records that should be automatically firmed.
    /// </param>
    /// <param name="_processId">
    ///    ProcessId for the current master planning run.
    /// </param>
    /// <param name="_reqCalcTaskController">
    ///    ReqCalcTaskController object for the creation of tasks and task bundles.
    /// </param>
    public void createBundles(Map _mapReqTransMark,
                              ReqProcessId _processId,
                              ReqCalcTaskController _reqCalcTaskController)
    {
        if (_mapReqTransMark.empty())
        {
            return;
        }

        processId = _processId;
        reqCalcTaskController = _reqCalcTaskController;
        unfirmedOrdersInsertList = new RecordInsertList(tableNum(ReqUnfirmedOrders));
        nextBundleId = 1;

        Map mapReqTransMark = ReqTransPoMarkFirm::createReqTransMarkMapSortedByLevel(_mapReqTransMark);
        
        this.createScheduleResourcesBundles(mapReqTransMark);
        this.createFinalizeLevelTasks(mapReqTransMark);
        reqCalcTaskController.saveTaskAndBundleList();
        this.insertUnfirmedOrders();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFinalizeLevelTasks</Name>
				<Source><![CDATA[
    // Note that we assume that the input map is sorted by BOM level
    private void createFinalizeLevelTasks(Map _mapReqTrans)
    {
        int lastBundleLevel = -1;

        var me = _mapReqTrans.getEnumerator();
        while (me.moveNext())
        {
            ReqTrans reqTrans = me.currentValue();
            
            if (reqTrans.Level != lastBundleLevel)
            {
                reqCalcTaskController.initTaskAndBundle(ReqProcessStatus::AutoFirming, PossibleBiggestBomLevel - reqTrans.Level, ReqLevelState::FinalizeLevel);
                lastBundleLevel = reqTrans.Level;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createScheduleResourcesBundles</Name>
				<Source><![CDATA[
    // Note that we assume that the input map is sorted by BOM level
    private void createScheduleResourcesBundles(Map _mapReqTrans)
    {
        BOMLevel lastBundleLevel = -1;
        int currentBundleSize = 0;
        int bundleSizeLimit = reqParameters.FirmingBundleSize;
        int currentBundleId;
        var purchaseBundles = new Map(Types::String, Types::Integer);
        var purchaseBundlesSizes = new Map(Types::String, Types::Integer);

        var me = _mapReqTrans.getEnumerator();
        while (me.moveNext())
        {
            ReqTrans reqTrans = me.currentValue();
        
            if (groupPurchaseOrders && reqTrans.RefType == ReqRefType::ItemPlannedOrder)
            {
                var reqPo = reqTrans.reqPo();
                var bundleKey = int2Str(reqTrans.Level) + this.reqTransPurchIdKey(reqTrans, reqPo);
                
                ReqOrderBundle bundleId;

                if (purchaseBundles.exists(bundleKey) && 
                    (reqPO.PurchId != '' ||  // If PurchId is specified we are disregarding bundleSizeLimit so that all these orders are firmed together and we do not need to handle duplicate key exceptions when adding lines and we can use standard logic for assigning line numbers
                     purchaseBundlesSizes.lookup(bundleKey) < bundleSizeLimit))
                {
                    bundleId = purchaseBundles.lookup(bundleKey);
                    purchaseBundlesSizes.insert(bundleKey, purchaseBundlesSizes.lookup(bundleKey) + 1);
                }
                else 
                {
                    bundleId = this.nextScheduleResourcesBundle(reqTrans.Level);
                    purchaseBundles.insert(bundleKey, bundleId);
                    purchaseBundlesSizes.insert(bundleKey, 1);
                }

                this.addUnfirmedOrder(reqTrans.RecId, bundleId);
            }
            else 
            {                
                if (reqTrans.Level != lastBundleLevel
                    || (bundleSizeLimit && (currentBundleSize >= bundleSizeLimit)))
                {
                    // A bundle needs to be in the same transaction level.
                    // The bundle gets inserted if there is a difference in transaction level or if the size limit is reached.
                    currentBundleSize = 0;
                    lastBundleLevel = reqTrans.Level;
                    currentBundleId = this.nextScheduleResourcesBundle(reqTrans.Level);
                }

                this.addUnfirmedOrder(reqTrans.RecId, currentBundleId);
                currentBundleSize++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addUnfirmedOrder</Name>
				<Source><![CDATA[
    private void addUnfirmedOrder(RecId _reqTransRecId, ReqOrderBundle _bundleId)
    {
        ReqUnfirmedOrders reqUnfirmedOrders;
        reqUnfirmedOrders.RefId = _reqTransRecId;
        reqUnfirmedOrders.ProcessId = processId;
        reqUnfirmedOrders.OrderBundle = _bundleId;
        unfirmedOrdersInsertList.add(reqUnfirmedOrders);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertUnfirmedOrders</Name>
				<Source><![CDATA[
    private void insertUnfirmedOrders()
    {
        unfirmedOrdersInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initScheduleResourcesBundleAndTask</Name>
				<Source><![CDATA[
    private void initScheduleResourcesBundleAndTask(BOMLevel _level, ReqOrderBundle _bundleId)
    {
        reqCalcTaskController.initTaskAndBundle(ReqProcessStatus::AutoFirming, PossibleBiggestBomLevel - _level, ReqLevelState::ScheduleResources, _bundleId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextScheduleResourcesBundle</Name>
				<Source><![CDATA[
    private ReqOrderBundle nextScheduleResourcesBundle(BOMLevel _level)
    {
        this.initScheduleResourcesBundleAndTask(_level, nextBundleId);
        nextBundleId++;
        return nextBundleId - 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransPurchIdKey</Name>
				<Source><![CDATA[
    private str reqTransPurchIdKey(ReqTrans _reqTrans, ReqPo _reqPo)
    {
        // it is important that we group planned orders with specified PurchId together so that we can use standard lines numbering logic
        if (_reqPo.PurchId)
        {
            return '#PurchId:' + _reqPo.PurchId;
        }

        // We are not properly computing the grouping key, since we do not want the performance penalty of computing salesLine and AgreementLine
        return _reqTrans.IsDerivedDirectly ?
                   prodPurchDerivedDirectly.reqTransPurchIdKey(_reqTrans, _reqPo, '', '', '') :
                   prodPurch.reqTransPurchIdKey(_reqTrans, _reqPo, '', '', '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBundlesForOrdersPostProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates bundles for the post processing phase of auto-firming.
    /// </summary>
    /// <param name = "_firmingRunId">The firming run id of the firming run to be used.</param>
    /// <param name = "_reqCalcTaskController">The <c>ReqCalcTaskController</c> instance for the creation of tasks and task bundles.</param>
    internal static void createBundlesForOrdersPostProcessing(ReqFirmingRunId _firmingRunId, ReqCalcTaskController _reqCalcTaskController)
    {
        int bundleId = 0;
        UnitofWork groupFirmingParametersList = new unitOfWork();

        ttsbegin;
        ReqPlannedOrderGroupFirmingParameters groupFirmingParameters;
       
        while select groupFirmingParameters
            where groupFirmingParameters.FirmingRunId == _firmingRunId
        {
            bundleId++;
            ReqTransPoAutoFirmPartitioner::initOrdersPostProcessingTaskAndBundle(bundleId, _reqCalcTaskController);
            groupFirmingParameters.OrderBundle = bundleId;
            groupFirmingParametersList.updateonSaveChanges(groupFirmingParameters);
        }

        _reqCalcTaskController.saveTaskAndBundleList();
        groupFirmingParametersList.saveChanges();
        ttscommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>initOrdersPostProcessingTaskAndBundle</Name>
				<Source><![CDATA[
    private static void initOrdersPostProcessingTaskAndBundle(int _bundleId, ReqCalcTaskController _reqCalcTaskController)
    {
        _reqCalcTaskController.initTaskAndBundle(ReqProcessStatus::AutoFirming, ReqTransPoAutoFirmPartitioner::OrdersPostPorcessingBundlesLevel, ReqLevelState::OrdersPostProcessing, _bundleId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPartitionOrdersForPostProcessingTaskAndBundle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes task and bundle for partitioning orders for post processing phase of auto-firming.
    /// </summary>
    /// <param name = "_reqCalcTaskController">The <c>ReqCalcTaskController</c> instance for the creation of tasks and task bundles.</param>
    internal static void initPartitionOrdersForPostProcessingTaskAndBundle(ReqCalcTaskController _reqCalcTaskController)
    {
        _reqCalcTaskController.initTaskAndBundle(ReqProcessStatus::AutoFirming, ReqTransPoAutoFirmPartitioner::PartitionOrdersForPostProcessingBundlesLevel, ReqLevelState::PartitionOrdersForPostProcessing, 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>