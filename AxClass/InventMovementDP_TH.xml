<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMovementDP_TH</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventMovementDP_TH</c> class is the report data provider class for the
///    <c>InventMovement_TH</c> report.
/// </summary>
/// <remarks>
///    This is the report data provider class for the <c>InventMovement_TH</c> SSRS report.
/// </remarks>
[
    SRSReportQueryAttribute(querystr(InventMovement_TH)),
    SRSReportParameterAttribute(classstr(InventMovementContract_TH))
]
public class InventMovementDP_TH extends SRSReportDataProviderPreProcessTempDB
{
    InventDim               inventDim;
    InventTrans             inventTrans;

    StartDate               monthStart;
    Qty                     balanceQty;
    Qty                     openBalQtty;
    Query                   reportQuery;
    CostPrice               totalBal;
    CostPrice               openBalPrice;
    LogText                 headerTextInventModelType;
    LogText                 headerTextWarehouseName;
    ItemId                  itemId;
    InventLocationId        inventLocationId;
    CostPrice               grandTotal;
    QueryRun                qr;
    QueryBuildDataSource    qbds;
    InventTable             inventTable;
    str                     inventTransStatusRangeStr;

    DialogField             dialogMonthEnd;
    DialogField             dialogGroupByLocation;

    EndDate                 monthEnd;
    boolean                 groupByLocation;

    InventMovementTmp_TH    inventMovementTmp_TH;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeSection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Assigns default values to variables.
    /// </summary>
    public void executeSection()
    {
        InventDimParm       inventDimParm;
        InventSum           inventSum;

        inventSum.ItemId = inventTrans.ItemId;
        InventDim inventDimSum             = InventDim::find(inventTrans.InventDimId);
        inventDimParm.InventLocationIdFlag = NoYes::Yes;
        inventDimParm.ItemIdFlag           = NoYes::Yes;

        InventSumFinancial inventSumFinancial = InventSumFinancial::newSumReport(monthStart-1, inventSum, inventDimSum, inventDimParm);
        balanceQty = inventSumFinancial.qty();
        totalBal = inventSumFinancial.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventMovementTmp_TH</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets records in the <c>InventMovementTmp_TH</c> table.
    /// </summary>
    /// <returns>
    ///    The records in the <c>InventMovementTmp_TH</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(InventMovementTmp_TH))
    ]
    public InventMovementTmp_TH getInventMovementTmp_TH()
    {
        select inventMovementTmp_TH;
        return inventMovementTmp_TH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventMovementTmp_TH</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts records into the <c>inventMovementTmp_TH</c> table.
    /// </summary>
    public void insertInventMovementTmp_TH()
    {
        inventMovementTmp_TH.clear();
        inventMovementTmp_TH.TranseDate					= inventTrans.DateFinancial;
        inventMovementTmp_TH.InvoiceId					= inventTrans.InvoiceId;
        inventMovementTmp_TH.PackingSlipId				= inventTrans.PackingSlipId;
        inventMovementTmp_TH.InventBatchId				= inventTrans.inventBatchId();
        inventMovementTmp_TH.Amount						= abs(inventTrans.costValue());
        inventMovementTmp_TH.BalanceQty					= balanceQty;
        inventMovementTmp_TH.OpenBalQtty				= openBalQtty;
        inventMovementTmp_TH.OpenBalPrice				= openBalPrice;
        inventMovementTmp_TH.TotalBalance				= totalBal;
        inventMovementTmp_TH.HeaderTxtInventModelType   = headerTextInventModelType;
        inventMovementTmp_TH.HeaderTxtWarehouseName     = headerTextWarehouseName;
        inventMovementTmp_TH.ItemId						= inventTrans.ItemId;

        if (inventTrans.Qty > 0)
        {
             inventMovementTmp_TH.ReceivedQty   = abs(inventTrans.Qty);
             inventMovementTmp_TH.ReceivedCost  = abs(inventTrans.costPrice());
             inventMovementTmp_TH.IssuedCost    = 0;
             inventMovementTmp_TH.IssuedQty     = 0;
        }
        else
        {
             inventMovementTmp_TH.ReceivedQty   = 0;
             inventMovementTmp_TH.ReceivedCost  = 0;
             inventMovementTmp_TH.IssuedCost    = abs(inventTrans.costPrice());
             inventMovementTmp_TH.IssuedQty     = abs(inventTrans.Qty);
        }
        if (balanceQty)
        {
            inventMovementTmp_TH.BalanceCost    = totalBal / balanceQty;
        }
        else
        {
            inventMovementTmp_TH.BalanceCost    = 0;
        }
        inventMovementTmp_TH.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderByItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts records into the table and order by the item ID.
    /// </summary>
    public void orderByItemId()
    {
        qbds = reportQuery.dataSourceTable(tableNum(InventTrans));
        qbds.addRange(fieldnum(InventTrans, DateFinancial)).value(queryRange(monthStart, monthEnd));
        qbds.addRange(fieldnum(InventTrans, RecId)).value(inventTransStatusRangeStr);
        qbds.addSortField(fieldnum(InventTrans, ItemId));
        qbds.addSortField(fieldnum(InventTrans, InventDimId));
        qbds.addSortField(fieldnum(InventTrans, DateFinancial));
        qbds.addSortField(fieldnum(InventTrans, RecId));

        qr = new QueryRun(reportQuery);

        while (qr.next())
        {
            inventTrans = qr.get(tablenum(InventTrans));

            if (itemId != inventTrans.ItemId)
            {
                if (itemId)
                {
                    inventLocationId = "";
                    grandTotal       = 0;
                }
                itemId						= inventTrans.ItemId;
                inventTable					= InventTable::find(itemId);
                headerTextInventModelType	= enum2str(inventTable.modelGroup().InventModel);
                this.executeSection();
                openBalQtty     = balanceQty;
                openBalPrice    = totalBal;
            }
            if (inventLocationId != inventTrans.inventLocationId())
            {
                inventLocationId		= inventTrans.inventLocationId();
                headerTextWarehouseName = InventLocation::find(inventLocationId).Name;
            }

            balanceQty  += inventTrans.Qty;
            totalBal    += inventTrans.costValue();

            this.insertInventMovementTmp_TH();
            openBalQtty     = 0;
            openBalPrice    = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderByLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts records into the table and order by the location.
    /// </summary>
    public void orderByLocation()
    {
        qbds = reportQuery.dataSourceTable(tableNum(InventTrans));
        qbds.addRange(fieldnum(InventTrans, DateFinancial)).value(queryRange(monthStart, monthEnd));
        qbds.addRange(fieldnum(InventTrans, RecId)).value(inventTransStatusRangeStr);
        qbds.addSortField(fieldnum(InventTrans, InventDimId));
        qbds.addSortField(fieldnum(InventTrans, ItemId));
        qbds.addSortField(fieldnum(InventTrans, DateFinancial));
        qbds.addSortField(fieldnum(InventTrans, RecId));

        qr = new QueryRun(reportQuery);

        while (qr.next())
        {
            inventTrans         = qr.get(tablenum(InventTrans));

            if (inventLocationId != inventTrans.inventLocationId())
            {
                if (inventLocationId)
                {
                    itemId      = "";
                    grandTotal  = 0;
                }
                inventLocationId		= inventTrans.inventLocationId();
                headerTextWarehouseName = InventLocation::find(inventLocationId).Name;
                this.executeSection();
            }
            if (itemId     != inventTrans.ItemId)
            {
                itemId						= inventTrans.ItemId;
                inventTable					= InventTable::find(itemId);
                headerTextInventModelType	= enum2str(inventTable.modelGroup().InventModel);
                this.executeSection();
                openBalQtty     = balanceQty;
                openBalPrice    = totalBal;
            }

            balanceQty  += inventTrans.Qty;
            totalBal    += inventTrans.costValue();

            this.insertInventMovementTmp_TH();
            openBalQtty     = 0;
            openBalPrice    = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        InventMovementContract_TH contract = this.parmDataContract() as InventMovementContract_TH;

        TransDate tmpDate = contract.parmDate();
        monthStart        = dateStartMth(tmpDate);
        monthEnd          = tmpDate;
        groupByLocation   = contract.parmGroupByLocation();

        reportQuery                 = this.parmQuery();
        inventTransStatusRangeStr   = strfmt('((%1 == %3) || (%2 == %4))',
            fieldstr(InventTrans,StatusIssue),
            fieldstr(InventTrans,StatusReceipt),
            any2int(StatusIssue::Sold),
            any2int(StatusReceipt::Purchased));

        if (groupByLocation)
        {
             this.orderByLocation();
        }
        else
        {
             this.orderByItemId();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>