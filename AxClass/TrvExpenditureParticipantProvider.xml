<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpenditureParticipantProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvExpenditureParticipantProvider extends WorkflowParticipantProvider_Expend
{
    container userListContainer;
    int position;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentType</Name>
				<Source><![CDATA[
    public WorkflowParticipantExpenDocumentType documentType()
    {
        return WorkflowParticipantExpenDocumentType::Expense;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParticipantTokens</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list that has the <c>WorkflowParticipantExpenToken.Name</c> field to display in the workflow
    ///    configuration UI.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>WorkflowParticipantTokenList</c> class that contains the
    ///    <c>WorkflowParticipantExpenToken.Name</c> field number as the participant token ID and the
    ///    <c>WorkflowParticipantExpenToken.Name</c> as the participant token name.
    /// </returns>
    public WorkflowParticipantTokenList getParticipantTokens()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resolves the expense or travel requisition dimensions to a list of users.
    /// </summary>
    /// <param name="_context">
    ///    An instance of the <c>WorkflowContext</c> class.
    /// </param>
    /// <param name="_participantTokenName">
    ///    The expense or travel requisition participant token.
    /// </param>
    /// <returns>
    ///    An instance of the <c>WorkflowUserList</c> class that contains all the enabled users from the token.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The participant token does not exist
    /// </exception>
    public WorkflowUserList resolve(WorkflowContext          _context,
                                WorkflowParticipantToken _participantTokenName)
    {
        WorkflowUserList userList = WorkflowUserList::construct();
        RefTableId childTableId;
        fieldId parentFieldId;
        fieldId recIdFieldId;
        fieldId projFieldId;
        fieldId legalEntityFieldId;
        fieldId interCompanyLEFieldId;
        fieldId sourceDocumentLineFieldId;
        Common parentRecord;

        if (!_participantTokenName)
        {
            throw error("@SYS105453");
        }

        userListContainer = conNull();

        WorkflowParticipantExpenToken workflowParticipantExpenToken = WorkflowParticipantExpenToken::findName(WorkflowParticipantExpenDocumentType::Expense,
                                                                            _participantTokenName);

        if (this.checkExistWorkflowParticipantExpenToken(workflowParticipantExpenToken))
        {
            throw error(strFmt("@SYS313865", _participantTokenName));
        }

        switch (_context.parmTableId())
        {
            case tableNum(TrvExpTable):
            case tableNum(TrvExpTrans):
                childTableId = tableNum(TrvExpTrans);
                parentFieldId = fieldNum(TrvExpTrans, TrvExpTable);
                recIdFieldId = fieldNum(TrvExpTrans, RecId);
                projFieldId = fieldNum(TrvExpTrans, ProjId);
                legalEntityFieldId = fieldNum(TrvExpTrans, LegalEntity);
                interCompanyLEFieldId = fieldNum(TrvExpTrans, IntercompanyLE);
                sourceDocumentLineFieldId = fieldNum(TrvExpTrans, SourceDocumentLine);
                if (_context.parmTableId() == tableNum(TrvExpTable))
                {
                    parentRecord = TrvExpTable::findRecId(_context.parmRecId());
                }
                else
                {
                    parentRecord = TrvExpTable::findRecId(TrvExpTrans::find(_context.parmRecId()).TrvExpTable);
                }

                TrvExpTable trvExpTableLocal = parentRecord;
                SourceDocumentProcessorFacade::submitSourceDocumentLinesForHeader(trvExpTableLocal, SourceDocumentLineAccountingStatus::FullyDistributed);

                break;

            case tableNum(TrvRequisitionTable):
            case tableNum(TrvRequisitionLine):
                childTableId = tableNum(TrvRequisitionLine);
                parentFieldId = fieldNum(TrvRequisitionLine, TrvRequisitionTable);
                recIdFieldId = fieldNum(TrvRequisitionLine, RecId);
                legalEntityFieldId = fieldNum(TrvRequisitionLine, LegalEntity);
                sourceDocumentLineFieldId = fieldNum(TrvRequisitionLine, SourceDocumentLine);
                if (_context.parmTableId() == tableNum(TrvRequisitionTable))
                {
                    parentRecord = TrvRequisitionTable::find(_context.parmRecId());
                }
                else
                {
                    parentRecord = TrvRequisitionTable::find(TrvRequisitionLine::find(_context.parmRecId()).TrvRequisitionTable);
                }

                TrvRequisitionTable trvRequisitionTableLocal = parentRecord;
                SourceDocumentProcessorFacade::submitSourceDocumentLinesForHeader(trvRequisitionTableLocal, SourceDocumentLineAccountingStatus::FullyDistributed);

                break;
        }

        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(childTableId);
        queryBuildDataSource.addRange(parentFieldId).value(SysQuery::value(parentRecord.RecId));
        if (_context.parmTableId() == childTableId)
        {
            queryBuildDataSource.addRange(recIdFieldId).value(SysQuery::value(_context.parmRecId()));
        }

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            Common childRecord = queryRun.get(childTableId);

            changecompany(CompanyInfo::findRecId(childRecord.(legalEntityFieldId)).DataArea)
            {
                TrvLegalEntity intercompanyLE;
                ProjId projId;

                WorkflowParticipantExpenTokenLine workflowParticipantExpenTokenLine = WorkflowParticipantExpenTokenLine::findTokenLine(workflowParticipantExpenToken.RecId,
                                                                                                 childRecord.(legalEntityFieldId));
                if (interCompanyLEFieldId && projFieldId)
                {
                    intercompanyLE = childRecord.(interCompanyLEFieldId);
                    projId = childRecord.(projFieldId);
                }
                this.resolveUserFromReferences(workflowParticipantExpenToken, workflowParticipantExpenTokenLine, childRecord.RecId, childRecord.(sourceDocumentLineFieldId), intercompanyLE, projId, childTableId);
            }
        }

        // At least one user must be resolved from the project distribution or the organization dimension.
        if (conLen(userListContainer) == 0)
        {
            throw error(strFmt("@SYS313866", _participantTokenName));
        }
        else
        {
            TrvWorkflowExpProviderCache trvWorkflowExpProviderCache;
            RecordInsertList insertUserList = new RecordInsertList(tableNum(TrvWorkflowExpProviderCache), true);
            int pos,i;
            int strLength;
            RefRecId childRecId;
            str key, accountingDistRecId;
            UserId user;
            Amount transactionAmount;

            for (i=1;i+3 <= conLen(userListContainer); i = i + 4)
            {
                key = conpeek(userListContainer, i);
                user = conpeek(userListContainer, i + 1);
                childRecId = conpeek(userListContainer, i + 2);
                transactionAmount = conpeek(userListContainer, i + 3);
                userList.add(user);
                strLength = strLen(key);

                pos = strFind(key, ' ', 1, strLength);
                if (!pos)
                {
                    pos = strLength+1;
                }

                accountingDistRecId = subStr(key, 1, pos-1);

                if (!TrvWorkflowExpProviderCache::exist(parentRecord.RecId, str2int64(accountingDistRecId), user))
                {
                    trvWorkflowExpProviderCache.clear();
                    trvWorkflowExpProviderCache.WorkflowUser = user;
                    trvWorkflowExpProviderCache.AccountingDistribution = str2int64(accountingDistRecId);
                    trvWorkflowExpProviderCache.TrvExpTable = parentRecord.RecId;
                    trvWorkflowExpProviderCache.TrvExpTrans = childRecId;
                    trvWorkflowExpProviderCache.WorkflowCorrelationId = _context.parmWorkflowCorrelationId();
                    trvWorkflowExpProviderCache.TransactionAmount = transactionAmount;
                    insertUserList.add(trvWorkflowExpProviderCache);
                }
            }

            insertUserList.insertDatabase();
        }

        return userList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistWorkflowParticipantExpenToken</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the workflow participant expenditure token exists.
    /// </summary>
    /// <param name = "_workflowParticipantExpenToken">
    /// The <c>WorkflowParticipantExpenToken</c> buffer.
    /// </param>
    /// <returns>
    /// Returns true if the workflow participant expenditure token does not exists; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean checkExistWorkflowParticipantExpenToken(
        WorkflowParticipantExpenToken _workflowParticipantExpenToken)
    {
        return (!_workflowParticipantExpenToken);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveUserFromReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves references of project distributions, project dimension, organization dimension for user.
    /// </summary>
    /// <param name = "_workflowParticipantExpenToken">
    /// The <c>WorkflowParticipantExpenToken</c> buffer.
    /// </param>
    /// <param name = "_workflowParticipantExpenTokenLine">
    /// The company policy to use for this resolution.
    /// </param>
    /// <param name = "_childRecId">
    /// The expense line <c>RecId</c>.
    /// </param>
    /// <param name = "_sourceDocumentLine">
    /// The <c>RecId</c> referencing the source document line of the expense line.
    /// </param>
    /// <param name = "_interCompanyLE">
    /// The intercompany legal entity of the expense line.
    /// </param>
    /// <param name = "_projId">
    /// The intercompany project ID of the expense line.
    /// </param>
    /// <param name = "_childTableId">
    /// The expense line <c>TableId</c>.
    /// </param>
    [Wrappable(true)]
    protected final void resolveUserFromReferences(
        WorkflowParticipantExpenToken _workflowParticipantExpenToken,
        WorkflowParticipantExpenTokenLine _workflowParticipantExpenTokenLine,
        RefRecId _childRecId,
        RefRecId _sourceDocumentLine,
        TrvLegalEntity _interCompanyLE,
        ProjId _projId,
        RefTableId _childTableId)
    {
        RefRecId dimensionAttributeSetRecId;

        if (_workflowParticipantExpenTokenLine)
        {
            if (_childTableId == tableNum(TrvExpTrans) &&
                    CompanyInfo::findRecId(_workflowParticipantExpenTokenLine.LegalEntity).DataArea != _interCompanyLE)
            {
                // Intercompany expense lines have no project distributions. In this case, apply the original company project policy
                // using the intercompany project for this.
                this.resolveFromInterCompanyProjectAuthority(_sourceDocumentLine, _childRecId,  _workflowParticipantExpenTokenLine, _projId, _interCompanyLE);
            }
            else
            {
                // Resolve users from Project Distributions for the non-intercompany scenario.
                this.resolveFromProjectDistributions(_sourceDocumentLine, _childRecId,  _workflowParticipantExpenTokenLine, _workflowParticipantExpenToken.RecId);
            }

            // Only if a user was found by resolving project distributions, resolve additional users from the project dimension.
            if (conLen(userListContainer) > 0)
            {
                dimensionAttributeSetRecId  = _workflowParticipantExpenTokenLine.ProjectDimensionAttributeSet;
                this.resolveFromDimensions(_sourceDocumentLine, _childRecId, dimensionAttributeSetRecId);
            }

            // Always resolve users from the organization dimension.
            dimensionAttributeSetRecId  = _workflowParticipantExpenTokenLine.OrganizationDimensionAttributeSet;
            this.resolveFromDimensions(_sourceDocumentLine, _childRecId,  dimensionAttributeSetRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveFromDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves users from the given dimensions.
    /// </summary>
    /// <param name = "_sourceDocumentLineRecId">
    /// The record ID of the <c>SourceDocumentLine</c> buffer.
    /// </param>
    /// <param name = "_childRecId">
    /// The record ID related to the current workflow context.
    /// </param>
    /// <param name = "_dimensionAttributeSetRecId">
    /// The record ID of the <c>DimensionAttributeSet</c> buffer.
    /// </param>
    [Wrappable(true)]
    protected final void resolveFromDimensions(
        RefRecId _sourceDocumentLineRecId,
        RefRecId _childRecId,
        RecId _dimensionAttributeSetRecId)
    {
        AccountingDistribution                      accountingDistribution;
        DimensionAttributeValue                     dimensionAttributeValue;
        DimensionAttributeSetItem                   dimensionAttributeSetItem;
        DimensionAttributeValueGroup                dimensionAttributeValueGroup;
        DimensionAttributeValueGroupCombination     dimensionAttributeValueGroupCombination;
        DimensionAttributeValueCombination          dimensionAttributeValueCombination;
        DimensionAttributeLevelValue                dimensionAttributeLevelValue;
        DimensionAttrValueLedgerOverride            dimensionAttrValueLedgerOverride;
        str                                         key;
        userId                                      user;
        Amount                                      transactionAmount;

        while select LedgerDimension,TransactionCurrencyAmount from accountingDistribution where
                accountingDistribution.SourceDocumentLine  == _sourceDocumentLineRecId
        {
            while select Owner from dimensionAttributeValue where dimensionAttributeValue.Owner != 0
                join RecId from dimensionAttributeSetItem where
                    dimensionAttributeSetItem.DimensionAttribute    == dimensionAttributeValue.DimensionAttribute &&
                    dimensionAttributeSetItem.DimensionAttributeSet == _dimensionAttributeSetRecId &&
                    dimensionAttributeSetItem.EnumerationValue      == NoYes::Yes
                join RecId from dimensionAttributeLevelValue where
                        dimensionAttributeLevelValue.DimensionAttributeValue == dimensionAttributeValue.RecId
                    join RecId from dimensionAttributeValueGroup where
                            dimensionAttributeValueGroup.RecId  == dimensionAttributeLevelValue.DimensionAttributeValueGroup
                        join RecId from dimensionAttributeValueGroupCombination where
                                dimensionAttributeValueGroupCombination.DimensionAttributeValueGroup        == dimensionAttributeValueGroup.RecId &&
                                dimensionAttributeValueGroupCombination.DimensionAttributeValueCombination  == accountingDistribution.LedgerDimension
                        exists join dimensionAttributeValueCombination where
                            dimensionAttributeValueCombination.RecId           == dimensionAttributeValueGroupCombination.DimensionAttributeValueCombination
            {
                this.updateUserListContainer(dimensionAttributeValue.Owner, accountingDistribution, _childRecId);
            }

            while select DimensionAttributeValue, Owner, Ledger from dimensionAttrValueLedgerOverride
                where dimensionAttrValueLedgerOverride.Owner != 0 &&
                    dimensionAttrValueLedgerOverride.Ledger == Ledger::current()
                        join RecId, DimensionAttribute from dimensionAttributeValue
                            where dimensionAttributeValue.RecId == dimensionAttrValueLedgerOverride.DimensionAttributeValue
                        join RecId from dimensionAttributeSetItem where
                            dimensionAttributeSetItem.DimensionAttribute    == dimensionAttributeValue.DimensionAttribute &&
                            dimensionAttributeSetItem.DimensionAttributeSet == _dimensionAttributeSetRecId &&
                            dimensionAttributeSetItem.EnumerationValue      == NoYes::Yes
                        join RecId from dimensionAttributeLevelValue where
                            dimensionAttributeLevelValue.DimensionAttributeValue == dimensionAttributeValue.RecId
                        join RecId from dimensionAttributeValueGroup where
                            dimensionAttributeValueGroup.RecId  == dimensionAttributeLevelValue.DimensionAttributeValueGroup
                        join RecId from dimensionAttributeValueGroupCombination where
                            dimensionAttributeValueGroupCombination.DimensionAttributeValueGroup        == dimensionAttributeValueGroup.RecId &&
                            dimensionAttributeValueGroupCombination.DimensionAttributeValueCombination  == accountingDistribution.LedgerDimension
                        exists join dimensionAttributeValueCombination where
                            dimensionAttributeValueCombination.RecId == dimensionAttributeValueGroupCombination.DimensionAttributeValueCombination
            {
                this.updateUserListContainer(dimensionAttrValueLedgerOverride.Owner, accountingDistribution, _childRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveFromInterCompanyProjectAuthority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves which project authorities are needed to approve a document that contains/is an intercompany expense line.
    /// </summary>
    /// <param name = "_sourceDocumentLine">A <c>RecId</c> referencing the source document line of the expense line.</param>
    /// <param name = "_childRecId">The expense line's <c>RecId</c></param>
    /// <param name = "_workflowParticipantExpenTokenLine">The company policy to use for this resolution.</param>
    /// <param name = "_projId">The optional intercompany project ID of the line.</param>
    /// <param name = "_trvInterCompanyLE">The intercompany legal entity of the expense line.</param>
    private void resolveFromInterCompanyProjectAuthority(RefRecId _sourceDocumentLine,
                                                         RefRecId _childRecId,
                                                         WorkflowParticipantExpenTokenLine _workflowParticipantExpenTokenLine,
                                                         ProjId _projId = '',
                                                         TrvLegalEntity _trvInterCompanyLE = curext())
    {
        AccountingDistribution  accountingDistribution;
        ProjTable               projTable;

        changeCompany(_trvInterCompanyLE)
        {
            select firstonly WorkerResponsible, WorkerResponsibleSales, WorkerResponsibleFinancial, ProjId, RecId
            from projTable
            where projTable.ProjId == _projId;
        }

        if (projTable.RecId != 0)
        {
            while select RecId, TransactionCurrencyAmount
            from accountingDistribution
            where accountingDistribution.SourceDocumentLine == _sourceDocumentLine
            {
                this.resolveProjectAuthorities(_childRecId, _workflowParticipantExpenTokenLine, accountingDistribution, projTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveFromProjectDistributions</Name>
				<Source><![CDATA[
    private void resolveFromProjectDistributions(RefRecId _sourceDocumentLine, RefRecId _childRecId, WorkflowParticipantExpenTokenLine _workflowParticipantExpenTokenLine, RecId _workflowParticipantExpenTokenRecId = 0)
    {
        AccountingDistribution          accountingDistribution;
        ProjectAccountingDistribution   projectAccountingDistribution;
        ProjTable                       projTable;

        // key consists of concatenation of AccountingDist Recid and UserID
        // since one AccountingDist can have multiple Approvers assigned
        while select RecId,SourceDocumentLine,TransactionCurrencyAmount,AccountingLegalEntity from accountingDistribution join
                 ProjTable, AccountingDistribution from projectAccountingDistribution
                 where accountingDistribution.RecId == projectAccountingDistribution.AccountingDistribution &&
                       accountingDistribution.SourceDocumentLine == _sourceDocumentLine
        {
            if (_workflowParticipantExpenTokenRecId != 0 &&
            accountingDistribution.AccountingLegalEntity != _workflowParticipantExpenTokenLine.LegalEntity)
            {
                _workflowParticipantExpenTokenLine = WorkflowParticipantExpenTokenLine::findTokenLine(_workflowParticipantExpenTokenRecId,
                                                                                                 accountingDistribution.AccountingLegalEntity);
            }
            changeCompany(CompanyInfo::findRecId(accountingDistribution.AccountingLegalEntity).DataArea)
            {
                select firstonly WorkerResponsible,WorkerResponsibleSales,WorkerResponsibleFinancial,ProjId,RecId from projTable where projTable.RecId == projectAccountingDistribution.ProjTable;

                if (projTable.RecId != 0)
                {
                    this.resolveProjectAuthorities(_childRecId, _workflowParticipantExpenTokenLine, accountingDistribution, projTable);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveProjectAuthorities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves which project authorities are needed to approve a document that references a project.
    /// </summary>
    /// <param name = "_childRecId">The documents's <c>RecId</c></param>
    /// <param name = "_workflowParticipantExpenTokenLine">The company policy to use for this resolution.</param>
    /// <param name = "_accountingDistribution">An accounting distribution of the document.</param>
    /// <param name = "_projTable">A table buffer representing the project that the document references.</param>
    [Wrappable(true)]
    protected final void resolveProjectAuthorities(
        RefRecId _childRecId,
        WorkflowParticipantExpenTokenLine _workflowParticipantExpenTokenLine,
        AccountingDistribution accountingDistribution,
        ProjTable projTable)
    {
        UserId user;
        str key;
        Amount transactionAmount;

        if (_workflowParticipantExpenTokenLine.IsProjectManagerAuthority && projTable.WorkerResponsible)
        {
            this.updateUserListContainer(projTable.WorkerResponsible, accountingDistribution, _childRecId);
        }

        if (_workflowParticipantExpenTokenLine.IsProjectSalesManagerAuthority && projTable.WorkerResponsibleSales)
        {
            this.updateUserListContainer(projTable.WorkerResponsibleSales, accountingDistribution, _childRecId);
        }

        if (_workflowParticipantExpenTokenLine.IsProjectControllerAuthority && projTable.WorkerResponsibleFinancial)
        {
            this.updateUserListContainer(projTable.WorkerResponsibleFinancial, accountingDistribution, _childRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUserListContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Given a worker resolved to be an approver of the current document, update the internal list of approvers.
    /// </summary>
    /// <param name = "hcmWorkerRecId">The worker to approve the document.</param>
    /// <param name = "accountingDistribution">An accounting distribution of the document.</param>
    /// <param name = "_childRecId">The <c>RecId</c> of the document.</param>
    private void updateUserListContainer(HcmWorkerRecId hcmWorkerRecId, AccountingDistribution accountingDistribution, RefRecId _childRecId)
    {
        Amount transactionAmount;
        UserId user = DirPersonUserEx::worker2UserId(hcmWorkerRecId);
        str    key  = int642str(accountingDistribution.RecId) + ' ' + user;
        position    = conFind(userListContainer, key);

        if (!position)
        {
            userListContainer += [key, user, _childRecId, accountingDistribution.TransactionCurrencyAmount];
        }
        else
        {
            transactionAmount = conpeek(userListContainer, position + 3);
            userListContainer = conpoke(userListContainer, position + 3, transactionAmount + accountingDistribution.TransactionCurrencyAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TrvExpenditureParticipantProvider construct()
    {
        return new TrvExpenditureParticipantProvider();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>