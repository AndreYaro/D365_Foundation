<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxPost_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(TaxPost))]
public final class TaxPost_ApplicationSuite_Extension
{
    public boolean isInSaveAndPostSubLedgerJournalLines_IT = false;
    public boolean isInSaveAndPostFromTaxUncommitted_IT = false;

    public Plafond_IT plafond_IT;
    public PlafondUpdate_IT plafondUpdate_IT;
    public boolean plafondUsed_IT;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>saveAndPost</Name>
				<Source><![CDATA[
    public void saveAndPost(LedgerPostingController _ledgerPostingController, SelectableDataArea _companyToPost)
    {
        next saveAndPost(_ledgerPostingController, _companyToPost);

        if (FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            this.postCustIntentLetterSet_IT();
        }

        if (FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance()))
        {
            this.postPlafond_IT();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxUncommitted</Name>
				<Source><![CDATA[
    protected void initFromTaxUncommitted(TaxTrans _taxTrans, TaxUncommitted _taxUncommitted, TaxOrigin _taxOrigin)
    {
        if (isInSaveAndPostSubLedgerJournalLines_IT && _taxUncommitted.TaxDirection == TaxDirection::IncomingTax)
        {
            this.initPlafond_IT(_taxUncommitted.SourceTableId, _taxUncommitted.SourceRecId, _taxUncommitted.TaxCode);
        }

        next initFromTaxUncommitted( _taxTrans, _taxUncommitted, _taxOrigin);

        if (isInSaveAndPostFromTaxUncommitted_IT)
        {
            this.initPlafond_IT(_taxUncommitted.SourceTableId, _taxUncommitted.SourceRecId, _taxUncommitted.TaxCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxWorkTrans</Name>
				<Source><![CDATA[
    protected void initFromTaxWorkTrans(TaxTrans _taxTrans, TmpTaxWorkTrans _taxWorkTrans, TaxOrigin _taxOrigin)
    {
        next initFromTaxWorkTrans(_taxTrans, _taxWorkTrans, _taxOrigin);
        this.initPlafond_IT(taxWorkTrans.SourceTableId, taxWorkTrans.SourceRecId, taxWorkTrans.TaxCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAndPostSubLedgerJournalLines</Name>
				<Source><![CDATA[
    protected void saveAndPostSubLedgerJournalLines(LedgerPostingController _ledgerPostingController, SelectableDataArea _companyToPost)
    {
        if (FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance()))
        {
            isInSaveAndPostSubLedgerJournalLines_IT = true;
        }

        next saveAndPostSubLedgerJournalLines( _ledgerPostingController, _companyToPost);
        isInSaveAndPostSubLedgerJournalLines_IT = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAndPostFromTaxUncommitted</Name>
				<Source><![CDATA[
    protected void saveAndPostFromTaxUncommitted(LedgerPostingController _ledgerPostingController, SelectableDataArea _companyToPost)
    {
        if (FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance()))
        {
            isInSaveAndPostFromTaxUncommitted_IT = true;
        }

        next saveAndPostFromTaxUncommitted(_ledgerPostingController, _companyToPost);
        isInSaveAndPostFromTaxUncommitted_IT = false;

    }

]]></Source>
			</Method>
			<Method>
				<Name>initPlafond_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes plafond.
    /// </summary>
    /// <param name = "_sourceTableId">The source table Id.</param>
    /// <param name = "_sourceRecId">THe source record Id.</param>
    /// <param name = "_taxCode">THe tax code.</param>
    protected void initPlafond_IT(TableId _sourceTableId, RecId _sourceRecId, TaxCode _taxCode)
    {

        if (_sourceTableId != tableNum(LedgerJournalTrans)
            || LedgerJournalTrans::findRecId(_sourceRecId, false).TransactionType != LedgerTransType::GeneralJournal)
        {
            TaxTable taxTable = TaxTable::find(_taxCode);

            if (taxTable.AffectPlafond_IT && !plafond_IT)
            {
                PlafondDate_IT plafondDate = this.getplafondDate_IT(_sourceTableId, _sourceRecId);

                if (taxTable.AffectPlafond_IT && !plafondDate)
                {
                    throw error("@ExtendedItallianLocalization:PlafondDateNotSpecified");
                }

                plafond_IT = Plafond_IT::findActivePlafond(plafondDate, true);

                if (plafond_IT)
                {
                    plafondUpdate_IT = PlafondUpdate_IT::construct(plafond_IT);
                    plafondUpdate_IT.parmPlafondDate(plafondDate);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPlafond_IT</Name>
				<Source><![CDATA[
    protected void postPlafond_IT()
    {
        if (plafond_IT && plafondUsed_IT)
        {
            plafondUpdate_IT.post();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxTransPlafond_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets intent letter fields on sales tax.
    /// </summary>
    /// <param name = "_taxTrans">Sales tax to update.</param>
    protected void setTaxTransPlafond_IT(TaxTrans _taxTrans)
    {
        boolean isPrepaymReversal;

        if (_taxTrans.SourceTableId == tableNum(VendInvoiceInfoLine))
        {
            VendInvoiceJour vendInvoiceJourPrepaym;
            VendAdvanceApplicationTrans advanceApplTransPrepaym;

            select firstonly RecId from vendInvoiceJourPrepaym
                where vendInvoiceJourPrepaym.InvoiceType == PurchInvoiceType::VendorAdvance
                exists join advanceApplTransPrepaym
                    where vendInvoiceJourPrepaym.RecId == advanceApplTransPrepaym.AdvanceInvoiceId
                        && advanceApplTransPrepaym.AdvanceApplicationId == _taxTrans.SourceRecId;

            if (vendInvoiceJourPrepaym)
            {
                isPrepaymReversal = true;
            }

        }

        if ((!_taxTrans.TaxBookSection && !isPrepaymReversal)
            || TaxTable::find(_taxTrans.TaxCode).AffectPlafond_IT == NoYes::No
            || _taxTrans.existsReversedTaxTransWithSameVoucher_IT())
        {
            TaxTrans_IT taxTrans_IT = _taxTrans.taxTrans_IT();
            taxTrans_IT.PlafondId = '';
            taxTrans_IT.PlafondDate = dateNull();
            taxTrans_IT.IntentLetterOrigin = IntentLetterOrigin_IT::None;
            taxTrans_IT.IntentLetterId = '';
            _taxTrans.packTaxTrans_IT(taxTrans_IT);
        }

        if (plafond_IT
            && TaxTable::find(_taxTrans.TaxCode).AffectPlafond_IT == NoYes::Yes
            && _taxTrans.TaxDirection == TaxDirection::IncomingTax
            && _taxTrans.TaxPeriod == plafond_IT.TaxPeriod)
        {
            TaxTrans_IT taxTrans_IT = _taxTrans.taxTrans_IT();
            taxTrans_IT.PlafondId = plafond_IT.PlafondId;
            taxTrans_IT.PlafondDate = plafondUpdate_IT.parmPlafondDate();
            taxTrans_IT.IntentLetterOrigin = this.intentLetterOrigin_IT();
            taxTrans_IT.IntentLetterId = this.intentLetterId_IT(_taxTrans.SourceTableId, _taxTrans.SourceRecId);
            _taxTrans.packTaxTrans_IT(taxTrans_IT);

            if (!plafondUpdate_IT.addTaxTrans(_taxTrans))
            {
                throw error(strfmt("@ExtendedItallianLocalization:ErrorUpdatingPlafond", plafond_IT.PlafondId));
            }

            plafondUsed_IT = true;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>