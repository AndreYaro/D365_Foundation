<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSRFControlDataLocationProductDimensionMixingFieldValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSRFControlDataLocationProductDimensionMixingFieldValidator</c> class is responsible for
/// verifying that location product dimension mixing rules are respected for a specific given field.
/// </summary>
internal class WHSRFControlDataLocationProductDimensionMixingFieldValidator
{
    private WMSLocation   location;
    private InventDimParm inventDimParm;
    private InventDim     productDims;
    private FieldId       dimensionFieldToCheckId;
    private boolean       isCWItem;
    private boolean       isLocationProductDimensionMixingEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLocationItemInventDimFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>WHSRFControlDataLocationProductDimensionMixingFieldValidator</c> class.
    /// </summary>
    /// <param name = "_location">
    /// The location to validate against.
    /// </param>
    /// <param name = "_itemId">
    /// The item going into the location.
    /// </param>
    /// <param name = "_productDim">
    /// The dimension set going into the location.
    /// </param>
    /// <param name = "_dimensionFieldIdToCheck">
    /// The <c>InventDim</c> field id to validate.
    /// </param>
    /// <returns>
    /// An initialized instance of the <c>WHSLocationProductDimensionMixingValidator</c> class.
    /// </returns>
    [Hookable(false)]
    internal static WHSRFControlDataLocationProductDimensionMixingFieldValidator newFromLocationItemInventDimFieldId(
        WMSLocation _location,
        ItemId      _itemId,
        InventDim   _productDim,
        FieldId     _dimensionFieldIdToCheck)
    {
        WHSRFControlDataLocationProductDimensionMixingFieldValidator productDimensionMixingFieldValidator = new WHSRFControlDataLocationProductDimensionMixingFieldValidator();

        productDimensionMixingFieldValidator.location                = _location;
        productDimensionMixingFieldValidator.productDims             = _productDim;
        productDimensionMixingFieldValidator.dimensionFieldToCheckId = _dimensionFieldIdToCheck;
        productDimensionMixingFieldValidator.isCWItem                = PdsGlobal::pdsIsCWItem(_itemId);
        productDimensionMixingFieldValidator.isLocationProductDimensionMixingEnabled = _location.whsLocationProfile().EnableLocationProductDimensionSpecificMixing;
        productDimensionMixingFieldValidator.initInventDimParm();

        return productDimensionMixingFieldValidator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParm</Name>
				<Source><![CDATA[
    private void initInventDimParm()
    {
        inventDimParm.initFromInventDimFixed(location.whsLocationProfile().ProductDimFixed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocationProductDimensionFieldMixingOnHand</Name>
				<Source><![CDATA[
    private boolean validateLocationProductDimensionFieldMixingOnHand()
    {
        InventSum inventSum;
        InventDim inventDim;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            // Check for inventory that has different value for the product dimension.            
            FieldId inventSumFieldId = InventDim::getInventSumFieldIdFromInventDimFieldId(dimensionFieldToCheckId);

            select firstOnly RecId from inventSum
                where inventSum.ClosedQty                   == NoYes::No
                &&    inventSum.InventLocationId            == location.inventLocationId
                &&    inventSum.wMSLocationId               == location.wMSLocationId
                &&    inventSum.(inventSumFieldId)          != productDims.(dimensionFieldToCheckId)
                &&    inventSum.PhysicalInvent              != 0;           
        }
        else
        {
            // Check for inventory that has different value for the product dimension.
            select firstOnly RecId from inventSum
            exists join inventDim
                where inventSum.InventDimId                 == inventDim.inventDimId
                &&    inventSum.ClosedQty                   == NoYes::No
                &&    inventDim.InventLocationId            == location.inventLocationId
                &&    inventDim.wMSLocationId               == location.wMSLocationId
                &&    inventDim.(dimensionFieldToCheckId)   != productDims.(dimensionFieldToCheckId)
                &&    inventSum.PhysicalInvent              != 0;
        }

        return inventSum.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocationProductDimensionFieldMixingOnWork</Name>
				<Source><![CDATA[
    private boolean validateLocationProductDimensionFieldMixingOnWork()
    {
        WHSWorkLine  locWorkLine;
        WHSWorkTable locWorkTable;
        InventDim    inventDim;
    
        // Check for open or inprocess work that has a put with a different value for the product dimension.
        select firstOnly RecId from locWorkLine
            where (locWorkLine.WorkStatus       == WHSWorkStatus::Open
            ||     locWorkLine.WorkStatus       == WHSWorkStatus::InProcess)
            &&     locWorkLine.WorkType         == WHSWorkType::Put
            &&     locWorkLine.WMSLocationId    == location.wMSLocationId
            exists join locWorkTable
                where locWorkTable.InventLocationId == location.inventLocationId
                &&    locWorkTable.WorkId           == locWorkLine.WorkId
                exists join inventDim
                    where inventDim.inventDimId     == locWorkLine.InventDimId
                    &&    inventDim.(dimensionFieldToCheckId) != productDims.(dimensionFieldToCheckId);

        return locWorkLine.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocationProductDimensionFieldMixing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether or not the given field is allowed to go in the given location.
    /// </summary>
    /// <returns>
    /// True if values for the given field in the <c>InventDim</c> can go into the location, otherwise false.
    /// </returns>
    [Hookable(false)]
    internal boolean validateLocationProductDimensionFieldMixing()
    {
        FieldId parmFieldId = InventDim::dim2dimParm(dimensionFieldToCheckId);
        boolean ret         = true;

        if (isLocationProductDimensionMixingEnabled
            &&  inventDimParm.(parmFieldId) == NoYes::No)
        {
            ret = this.validateLocationProductDimensionFieldMixingOnHand()
                && this.validateLocationProductDimensionFieldMixingOnWork();
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>