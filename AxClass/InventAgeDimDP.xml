<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAgeDimDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventAgeDimDP</c> class is the report data provider class for the <c>InventAgeDim</c>
///    report, which contains the declaration of the global variables.
/// </summary>
/// <remarks>
///    This class provides methods to fetch the data that is used by the <c>InventAgeGroup</c> and
///    <c>InventAgeDim</c> reports.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(InventAgeDim)),
    SRSReportParameterAttribute(classStr(InventAgeGroupDimContract))
]
public class InventAgeDimDP extends SRSReportDataProviderBase
{
    protected InventAgeGroupDimTmp inventAgeGroupDimTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initInventDimParam</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the inventory dimension parameters used to calculate dimensions.
    /// </summary>
    /// <param name = "_qbdsInventDim">
    ///     A query data source for inventory dimensions to be initialized with the parameters.
    /// </param>
    /// <returns>
    ///     The inventory dimension parameters used to calculate dimensions.
    /// </returns>
    protected InventDimParm initInventDimParam(QueryBuildDataSource _qbdsInventDim)
    {
        InventDimParm inventDimParm;
        InventDimParm inventDimParmTmp;

        inventDimParm.initFromQueryAutoSumFields(_qbdsInventDim);
        inventDimParm.initFromQueryBuildRange(_qbdsInventDim);
        inventDimParmTmp.initProductDimensionsAllGroups();
        inventDimParm = InventDimParm::orParms(inventDimParm,inventDimParmTmp);
        inventDimParm.ItemIdFlag = NoYes::Yes;
        inventDimParm.ClosedFlag = NoYes::Yes;
        inventDimParm.InventOwnerIdFlag_RU = NoYes::Yes;   // Ensure that the report only includes transactions owned by legal entity

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCalcAllDimQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the query used to calculate all inventory dimensions.
    /// </summary>
    /// <param name = "_qbdsInventDim">
    ///     A query data source for inventory dimensions.
    /// </param>
    /// <param name = "_inventDimParm">
    ///     The inventory dimension parameters used to build the query.
    /// </param>
    /// <returns>
    ///     The query used to calculate all inventory dimensions.
    /// </returns>
    protected Query buildCalcAllDimQuery(QueryBuildDataSource _qbdsInventDim, InventDimParm _inventDimParm)
    {
        Query                   queryTmpInventAge               = this.parmQuery();
        QueryBuildDataSource    queryBuildDatasouceTmpInventAge = queryTmpInventAge.dataSourceTable(tableNum(TmpInventAge));

        Query                   queryInventSum                  = new Query();
        QueryBuildDataSource    qbdsInventSum                   = queryInventSum.addDataSource(tableNum(InventDim));
        qbdsInventSum.addDataSource(tableNum(InventSum));

        InventDimParm inventDimParmCriteria;
        inventDimParmCriteria.ClosedFlag = NoYes::Yes;

        container sumFields = InventDim::getSumFields(_qbdsInventDim);
        InventDim::setSumFields(qbdsInventSum, sumFields);

        Query query = InventDim::newQueryInventSum(queryInventSum,'', null, inventDimParmCriteria, _inventDimParm);
        QueryBuildDataSource    queryBuildDatasouceInventSum    = query.dataSourceTable(tableNum(InventSum));

        if (!queryBuildDatasouceTmpInventAge)
        {
            queryBuildDatasouceTmpInventAge = queryTmpInventAge.addDataSource(tableNum(TmpInventAge));
        }

        QueryBuildRange rangeItemIdTmpInventAge = queryBuildDatasouceTmpInventAge.findRange(fieldNum(TmpInventAge, ItemId));
        if (rangeItemIdTmpInventAge)
        {
            QueryBuildRange rangeItemIdInventSum = queryBuildDatasouceInventSum.findRange(fieldNum(InventSum, ItemId));
            if (!rangeItemIdInventSum)
            {
                rangeItemIdInventSum = queryBuildDatasouceInventSum.addRange(fieldNum(InventSum, ItemId));
            }
            rangeItemIdInventSum.value(rangeItemIdTmpInventAge.value());
        }

        queryBuildDatasouceInventSum.addRange(fieldNum(InventSum, IsExcludedFromInventoryValue)).value(queryValue(NoYes::No));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAllDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the final query with the required ranges and provides the base data.
    /// </summary>
    /// <param name = "_inventAgeReport">
    ///     The <c>InventAgeDim</c> report.
    /// </param>
    /// <remarks>
    ///    The base data is filtered according to the parameters and ranges that are provided and performs the
    ///    necessary calculations that are used by the process method to insert the data into the temporary
    ///    table.
    /// </remarks>
    public void calcAllDim(InventReport_Age _inventAgeReport)
    {
        Query                queryInventDim = this.parmQuery();
        QueryBuildDataSource qbdsInventDim  = queryInventDim.dataSourceTable(tableNum(InventDim));
        InventDimParm        inventDimParm  = this.initInventDimParam(qbdsInventDim);

        Query query = this.buildCalcAllDimQuery(qbdsInventDim, inventDimParm);
        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            InventSum inventSum = queryRun.get(tableNum(InventSum)) as InventSum;
            InventDim inventDim = queryRun.get(tableNum(InventDim)) as InventDim;
            this.calcInventSumDim(_inventAgeReport, inventSum, inventDim, inventDimParm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInventSumDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the necessary calculations depending on the specified parameters.
    /// </summary>
    /// <param name = "_inventAgeReport">
    ///     The <c>InventAgeDim</c> report.
    /// </param>
    /// <param name="_inventSum">
    /// The <c>InventSum</c> table buffer.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> table buffer.
    /// </param>
    /// <param name="_inventDimParm">
    /// The <c>InventDimParm</c> table buffer that defines dimensions that will be used in the calculation.
    /// </param>
    /// <remarks>
    /// The data is modified based on the specified parameters.
    /// </remarks>
    public void calcInventSumDim(
        InventReport_Age _inventAgeReport,
        InventSum       _inventSum,
        InventDim       _inventDim,
        InventDimParm   _inventDimParm)
    {
        if (! _inventSum.inventTable().inventItemType().mustInventBeControlled())
        {
            return;
        }

        InventDim inventDimCriteria = InventDim::findOrCreate(_inventDim);
        _inventAgeReport.calc(_inventSum.ItemId, inventDimCriteria, _inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventAgeDimTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data table to the calling method.
    /// </summary>
    /// <returns>
    ///    The required report data.
    /// </returns>
    [SRSReportDataSetAttribute('InventAgeDimTmp')]
    public InventAgeGroupDimTmp getInventAgeDimTmp()
    {
        select * from inventAgeGroupDimTmp;
        return inventAgeGroupDimTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventAgeDimTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the record for the temporary table.
    /// </summary>
    /// <param name = "_inventAgeReport">
    ///     The <c>InventAgeDim</c> report.
    /// </param>
    /// <param name="_tmpInventAge">
    ///    The <c>TmpInventAge</c> table buffer with item quantity and value data to be inserted.
    /// </param>
    protected void createInventAgeDimTmp(
        InventReport_Age     _inventAgeReport,
        TmpInventAge         _tmpInventAge)
    {
        this.initInventAgeDimTmp(_inventAgeReport, _tmpInventAge);

        this.insertInventAgeDimTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventAgeDimTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts the record for the temporary table.
    /// </summary>
    protected void insertInventAgeDimTmp()
    {
        inventAgeGroupDimTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventAgeDimTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the record for the temporary table.
    /// </summary>
    /// <param name="_tmpInventAge">
    ///    The <c>TmpInventAge</c> table buffer with item quantity and value data to be inserted.
    /// </param>
    protected void initInventAgeDimTmp( 
        InventReport_Age     _inventAgeReport,
        TmpInventAge         _tmpInventAge)
    {
        InventTable         inventTable     = InventTable::find(_tmpInventAge.ItemId);
        InventDim           inventDim       = InventDim::find(_tmpInventAge.InventDimId);

        inventAgeGroupDimTmp.ItemId         = _tmpInventAge.ItemId;
        inventAgeGroupDimTmp.ItemName       = inventTable.defaultProductName();
        inventAgeGroupDimTmp.ItemGroupId    = _tmpInventAge.ItemGroupId;
        inventAgeGroupDimTmp.TmpInventAge   = _tmpInventAge.RecId;

        if (_inventAgeReport.parmValueQty() == ValueQty::Qty)
        {
            inventAgeGroupDimTmp.ValQty1       = _tmpInventAge.Qty1;
            inventAgeGroupDimTmp.ValQty2       = _tmpInventAge.Qty2;
            inventAgeGroupDimTmp.ValQty3       = _tmpInventAge.Qty3;
            inventAgeGroupDimTmp.ValQty4       = _tmpInventAge.Qty4;
            inventAgeGroupDimTmp.ValQty5       = _tmpInventAge.Qty5;
            inventAgeGroupDimTmp.ValQtySum     = _tmpInventAge.QtySum;
        }
        else if (_inventAgeReport.parmValueQty() == ValueQty::Value)
        {
            inventAgeGroupDimTmp.ValQty1       = _tmpInventAge.Value1;
            inventAgeGroupDimTmp.ValQty2       = _tmpInventAge.Value2;
            inventAgeGroupDimTmp.ValQty3       = _tmpInventAge.Value3;
            inventAgeGroupDimTmp.ValQty4       = _tmpInventAge.Value4;
            inventAgeGroupDimTmp.ValQty5       = _tmpInventAge.Value5;
            inventAgeGroupDimTmp.ValQtySum     = _tmpInventAge.ValueSum;
        }

        inventAgeGroupDimTmp.InventDimFieldsMap::initProductDimensionsFrom(inventDim);
        inventAgeGroupDimTmp.CutOffDate1    = _inventAgeReport.parmDateI(1);
        inventAgeGroupDimTmp.CutOffDate2    = _inventAgeReport.parmDateI(2);
        inventAgeGroupDimTmp.CutOffDate3    = _inventAgeReport.parmDateI(3);
        inventAgeGroupDimTmp.CutOffDate4    = _inventAgeReport.parmDateI(4);
        inventAgeGroupDimTmp.BeforeDate1    = _inventAgeReport.parmDateI(1) - 1;
        inventAgeGroupDimTmp.BeforeDate2    = _inventAgeReport.parmDateI(2) - 1;
        inventAgeGroupDimTmp.BeforeDate3    = _inventAgeReport.parmDateI(3) - 1;
        inventAgeGroupDimTmp.BeforeDate4    = _inventAgeReport.parmDateI(4) - 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrMergeInventAgeDimTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Merges the record into the existing one in temporary table, or creates a new one.
    /// </summary>
    /// <param name = "_inventAgeReport">
    ///     The <c>InventAgeDim</c> report.
    /// </param>
    /// <param name="_tmpInventAge">
    ///    The <c>TmpInventAge</c> table buffer with item quantity and value data to be merged to the existing one.
    /// </param>
    protected void createOrMergeInventAgeDimTmp(
        InventReport_Age _inventAgeReport,
        TmpInventAge     _tmpInventAge)
    {
        Query query = this.buildQueryForMergingDimensions(_tmpInventAge);

        QueryRun queryRun = new QueryRun(query);
        queryRun.setRecord(inventAgeGroupDimTmp);

        // Select the existing record for update based on product and product dimensions.
        // A row merge is needed for dimensions that are not shown as columns in the report.
        ttsbegin;
        if (queryRun.next())
        {
            inventAgeGroupDimTmp = queryRun.get(tableNum(InventAgeGroupDimTmp));
            this.mergeInventAgeDimTmp(_inventAgeReport, _tmpInventAge);
        }
        else
        {
            this.createInventAgeDimTmp(_inventAgeReport, _tmpInventAge);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForMergingDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query used to look up an existing record that can be merged with the specified buffer.
    /// </summary>
    /// <param name = "_tmpInventAge">
    ///     The <c>TmpInventAge</c> table buffer with item quantity and value data to be merged to the existing one.
    /// </param>
    /// <returns>The query used to look up an existing record that can be merged with the specified buffer.</returns>
    protected Query buildQueryForMergingDimensions(TmpInventAge _tmpInventAge)
    {
        InventDim inventDim = InventDim::find(_tmpInventAge.InventDimId);

        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(InventAgeGroupDimTmp));
        qbds.update(true);
        qbds.addRange(fieldNum(InventAgeGroupDimTmp, ItemId)).value(queryValue(_tmpInventAge.ItemId));
        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            InventProductDimension dimension = enum.current() as InventProductDimension;
            FieldId fieldIdOnTmpTable = InventAgeGroupDimTmp::fieldIdForDimension(classId2Name(classidget(dimension)));
            if (fieldIdOnTmpTable)
            {
                qbds.addRange(fieldIdOnTmpTable).value(queryValue(inventDim.(dimension.parmInventDimFieldId())));
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeInventAgeDimTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Merges the record into the existing one in temporary table.
    /// </summary>
    /// <param name = "_inventAgeReport">
    ///     The <c>InventAgeDim</c> report.
    /// </param>
    /// <param name="_tmpInventAge">
    ///    The <c>TmpInventAge</c> table buffer with item quantity and value data to be merged to the existing one.
    /// </param>
    protected void mergeInventAgeDimTmp(
        InventReport_Age     _inventAgeReport,
        TmpInventAge         _tmpInventAge)
    {
        this.mergeUpdateInventAgeDimValues(_inventAgeReport, _tmpInventAge);

        this.updateInventAgeDimTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventAgeDimTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the record in the temporary table.
    /// </summary>
    protected void updateInventAgeDimTmp()
    {
        inventAgeGroupDimTmp.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeUpdateInventAgeDimValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the fields in the temporary table with the values from <c>_tmpinventAge</c>.
    /// </summary>
    /// <param name = "_inventAgeReport">
    ///     The <c>InventAgeDim</c> report.
    /// </param>
    /// <param name = "_tmpInventAge">
    ///     The <c>TmpInventAge</c> table buffer with item quantity and value data to be merged to the existing one.
    /// </param>
    protected void mergeUpdateInventAgeDimValues(
        InventReport_Age     _inventAgeReport,
        TmpInventAge         _tmpInventAge)
    {
        inventAgeGroupDimTmp.TmpInventAge       = _tmpInventAge.RecId;

        if (_inventAgeReport.parmValueQty() == ValueQty::Qty)
        {
            inventAgeGroupDimTmp.ValQty1       += _tmpInventAge.Qty1;
            inventAgeGroupDimTmp.ValQty2       += _tmpInventAge.Qty2;
            inventAgeGroupDimTmp.ValQty3       += _tmpInventAge.Qty3;
            inventAgeGroupDimTmp.ValQty4       += _tmpInventAge.Qty4;
            inventAgeGroupDimTmp.ValQty5       += _tmpInventAge.Qty5;
            inventAgeGroupDimTmp.ValQtySum     += _tmpInventAge.QtySum;
        }
        else if (_inventAgeReport.parmValueQty() == ValueQty::Value)
        {
            inventAgeGroupDimTmp.ValQty1       += _tmpInventAge.Value1;
            inventAgeGroupDimTmp.ValQty2       += _tmpInventAge.Value2;
            inventAgeGroupDimTmp.ValQty3       += _tmpInventAge.Value3;
            inventAgeGroupDimTmp.ValQty4       += _tmpInventAge.Value4;
            inventAgeGroupDimTmp.ValQty5       += _tmpInventAge.Value5;
            inventAgeGroupDimTmp.ValQtySum     += _tmpInventAge.ValueSum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic, which is used by the
    ///    <c>InventAgeGroup</c> and <c>InventAgeDim</c> reports.
    /// </remarks>
    public void processReport()
    {
        InventAgeGroupDimContract   contract = this.parmDataContract() as InventAgeGroupDimContract;

        InventReport_Age inventAgeReport = InventReport_Age::construct();

        inventAgeReport.setParameters(contract.parmPerDate(),
                                        contract.parmShowZeroLines(),
                                        contract.parmValueQty(),
                                        contract.parmCutOffPeriod1(),
                                        contract.parmCutOffPeriod2(),
                                        contract.parmCutOffPeriod3(),
                                        contract.parmCutOffPeriod4());

        this.calcAllDim(inventAgeReport);

        QueryRun queryRun = new QueryRun(this.parmQuery());
        queryRun.setRecord(inventAgeReport.parmTmpInventAge());

        while (queryRun.next())
        {
            TmpInventAge tmpInventAge = queryRun.get(tableNum(TmpInventAge)) as TmpInventAge;
            this.createOrMergeInventAgeDimTmp(inventAgeReport, tmpInventAge);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>