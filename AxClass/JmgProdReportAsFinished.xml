<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgProdReportAsFinished</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgProdReportAsFinished</c> class prompts the user to report a production job as finished.
/// </summary>
/// <remarks>
///    The production job must be specified through a <see cref="T:JmgTmpJobStatus" /> record in the args
///    object specified to the <see cref="M:JmgProdReportAsFinished::main" /> method.
/// </remarks>
class JmgProdReportAsFinished extends RunBase
{
    JmgJobId    jobId;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        jobId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOrUpdateMatchingStopJob</Name>
				<Source><![CDATA[
    private void createOrUpdateMatchingStopJob(JmgTermReg _startJob)
    {
        JmgTermReg stopJob;
        //try to find existing stop job to update finished code on registration
        select forUpdate stopJob where stopJob.MatchRecIdStartStop   == _startJob.RecId;
        if (stopJob)
        {
            stopJob.FinishedCode    = JmgFeedbackStatus::Completed;
            stopJob.doUpdate();
        }
        else
        {
            stopJob.data(_startJob);
            stopJob.FinishedCode    = JmgFeedbackStatus::Completed;
            stopJob.MatchRecIdStartStop = _startJob.RecId;
            stopJob.RegType = JmgTermRegType::JobStop;
            stopJob.insert();

            _startJob.MatchRecIdStartStop = stopJob.RecId;
            _startJob.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods described by the <see cref="T:RunBaseDialogable" />
    ///    interface.
    /// </summary>
    /// <param name="dialog">
    ///    An already initialized dialog can be passed.
    /// </param>
    /// <param name="forceOnClient">
    ///    Specifies if the dialog must be instantiated on the client.
    /// </param>
    /// <returns>
    ///    A <c>runbaseDialogable.</c>
    /// </returns>
    /// <remarks>
    ///    The <c>JmgProdReportAsFinished</c> class adds a text that asks the user to confirm whether the job
    ///    ID should be reported as finished.A dialog can either be built using the <see cref="T:Dialog" />
    ///    system or using a class created in the AOT.
    /// </remarks>
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        Dialog ret = this.dialogInternal(dialog, forceOnClient);

        ret.caption("@SYS12772");
        ret.addText(strfmt("@SYS39912", jobId));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMostRecentJob</Name>
				<Source><![CDATA[
    private JmgTermReg findMostRecentJob(JmgJobId _jobId)
    {
        JmgTermReg startJob;

        select firstonly forUpdate ProfileDate, Worker, JobId, RegDateTime
            from startJob
            order by RegDateTime desc
        where startJob.JobId    == _jobId;

        return startJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJobActive</Name>
				<Source><![CDATA[
    private boolean isJobActive(JmgJobId _jobId)
    {
        return ((select firstonly RecId from jmgTermReg
                where jmgTermReg.JobId == _jobId &&
                jmgTermReg.JobActive == NoYes::Yes).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJmgJobId</Name>
				<Source><![CDATA[
    private JmgJobId parmJmgJobId(JmgJobId _jobId = jobId)
    {
        jobId = _jobId;
        return jobId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    /// <remarks>
    ///    The specified job ID is reported as finished by selecting the last known registration on the job in
    ///    the
    ///    <c>
    ///       JmgStampJournalTrans
    ///    </c>
    ///     table, and sets the
    ///    <c>
    ///          JobFinished
    ///    </c>
    ///     field to
    ///    <c>
    ///          NoYes::Yes
    ///    </c>
    ///     .An error is thrown in the following cases:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>The job ID is not a production job.</description>
    ///       </item>
    ///       <item>
    ///          <description>The job is not started.</description>
    ///       </item>
    ///       <item>
    ///          <description>An employee is currently active on the job.</description>
    ///       </item>
    ///       <item>
    ///          <description>No journal lines exist for the job.</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public void run()
    {
        JmgStampJournalTrans        jmgStampJournalTrans;
        JmgTermJob                  job;
        JmgTermReg                  startJob;
        JmgPostStandardSystem       jmgPostStandardSystem;
        JmgProdMultiReportFinished  jmgProdMultiReportFinished;

        JmgWorkerRecId              worker;
        JmgProfileDate              profileDate;
        JmgDateTime                 regDateTime;

        super();

        job = JmgTermJob::construct(jobId);

        if (job.module() != JmgModuleEnum::PROD)
        {
            throw error(strfmt("@SYS39907", jobId));
        }

        if (job.reportedFinish())
        {
            throw error(strfmt("@SYS39909", jobId));
        }

        if (this.isJobActive(jobId))
        {
            throw error(strfmt("@SYS39910", jobId));
        }

        ttsbegin;

        startJob = this.findMostRecentJob(jobid);

        if (!startJob)
        {
            // if there is no start job we need to find worker id of person
            // who is now reporting job as finished
            worker = HcmWorkerLookup::currentWorker();
            if (!worker)
            {
                throw error(strfmt("@SYS330290", jobId));
            }

            profileDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            regDateTime = DateTimeUtil::getSystemDateTime();
        }
        else
        {
            worker = startJob.Worker;
            profileDate = startJob.ProfileDate;
            regDateTime = startJob.RegDateTime;

            this.createOrUpdateMatchingStopJob(startJob);
        }

        // Post changes to production
        jmgStampJournalTrans.JobId                  = jobId;
        jmgStampJournalTrans.ProfileDate            = profileDate;
        jmgStampJournalTrans.Worker                 = worker;
        jmgStampJournalTrans.setJournalTransTypes(JmgTermJob::commonJob(startJob.JobId));
        jmgStampJournalTrans.Module                 = JmgModuleEnum::PROD;
        jmgStampJournalTrans.StartDate              = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(regDateTime, DateTimeUtil::getOriginatingTimeZone(regDateTime)));
        jmgStampJournalTrans.StartTime              = DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(regDateTime, DateTimeUtil::getOriginatingTimeZone(regDateTime)));
        jmgStampJournalTrans.JobFinished            = NoYes::Yes;

        jmgPostStandardSystem   = JmgPostStandardSystem::constructJmgStampJournalTrans(jmgStampJournalTrans);
        jmgProdMultiReportFinished = jmgPostStandardSystem.createReportFinishedJournal();

        if (jmgProdMultiReportFinished && jmgProdMultiReportFinished.parmUserCanceled())
        {
            throw error("@SYS18447");
        }

        if (jmgProdMultiReportFinished)
        {
            jmgProdMultiReportFinished.runOperation();
        }

        jmgPostStandardSystem.postQty(jmgStampJournalTrans);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean         ret;
        Integer         version = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>JmgProdReportAsFinished</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>JmgProdReportAsFinished</c> class.
    /// </returns>
    public static JmgProdReportAsFinished construct()
    {
        return new JmgProdReportAsFinished();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS12772";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        JmgProdReportAsFinished jmgProdReportAsFinished = JmgProdReportAsFinished::construct();

        if (_args   &&
            _args.dataset() == tablenum(JmgJobTable))
        {
            JmgJobTable jmgJobTable = _args.record();
            jmgProdReportAsFinished.getLast();
            jmgProdReportAsFinished.parmJmgJobId(jmgJobTable.JobId);
        }

        if (jmgProdReportAsFinished.prompt())
        {
            jmgProdReportAsFinished.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>