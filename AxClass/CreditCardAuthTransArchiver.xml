<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardAuthTransArchiver</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>CreditCardAuthTransArchiver</c> class provides the functionality to archive credit card payment data in CreditCardAuthTrans table.
/// </summary>
internal final class CreditCardAuthTransArchiver extends RunBaseBatch implements BatchRetryable  
{
    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        daysAgo
    #ENDMACRO

    private const PositiveDays MinRetentionDays = 90;
    private const str CardTokenRequestFilename = "CardTokenRequest.txt";
    private const str CardTokenResultFilename = "CardTokenResult.txt";
    private const int NumOfTasks = 4;
    private const str CreditCardAuthTransDataUploadFailureLogMessage = 'Logging error message: CreditCardAuthTrans credit card transaction upload to blob failed for RecId %1: %2';

    internal PositiveDays daysAgo;
    internal DialogField dialogFieldDaysAgo;
    internal DialogField dialogFieldArchiveEndDate;
    internal ApprovedDateTime endDate;
    internal ApprovedDateTime startDate = dateNull();
    internal int maxArchiveThreshold = CustParameters::find().CreditCardAuthTransArchiveThreshold;

    private boolean isChildTask = false;
    private RecId maxTaskRecId;
    private RecId minTaskRecId;
    private int taskId;

    private int maxRetryAttempts;
    private int backOffWait;
    private str tempPath;
    private RecIdCount successCount, failureCount;
    private DialogRunbase dialogRunbase;

    private static CustInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        tempPath = System.IO.Path::GetTempPath() + System.Guid::NewGuid().ToString() + '\\';
        maxRetryAttempts = 3;
        backOffWait = RandomGenerate::construct().randomInt(100, 5000);
        successCount = 0;
        failureCount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CreditCardAuthTransArchiver construct()
    {
        return new CreditCardAuthTransArchiver();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container pack()
    {
        container packed = [#CurrentVersion, #CurrentList];
        packed = this.appendVariableToPack(packed, varStr(isChildTask), isChildTask);
        packed = this.appendVariableToPack(packed, varStr(maxTaskRecId), maxTaskRecId);
        packed = this.appendVariableToPack(packed, varStr(minTaskRecId), minTaskRecId);
        packed = this.appendVariableToPack(packed, varStr(taskId), taskId);
        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean unpack(container _packed)
    {
        Version version = RunBase::getVersion(_packed);

        switch (version)
        {
            case 1:
            case #CurrentVersion:
                [version, #CurrentList] = _packed;
                isChildTask = this.extractPackedVariable(_packed, varStr(isChildTask));
                maxTaskRecId = this.extractPackedVariable(_packed, varStr(maxTaskRecId));
                minTaskRecId = this.extractPackedVariable(_packed, varStr(minTaskRecId));
                taskId = this.extractPackedVariable(_packed, varStr(taskId));
                this.calculateEndDate();
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractPackedVariable</Name>
				<Source><![CDATA[
    private anytype extractPackedVariable(container _pack, str _variableName)
    {
        anytype value;
        [value] = SysPackExtensions::unpack(this.createXppPrePostArgsWithPack(_pack), this.getVariablePackKey(_variableName));
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendVariableToPack</Name>
				<Source><![CDATA[
    private container appendVariableToPack(container _pack, str _variableName, anytype _value)
    {
        XppPrePostArgs packArgs = this.createXppPrePostArgsWithPack(_pack);
        SysPackExtensions::pack(packArgs, this.getVariablePackKey(_variableName), [_value]);
        return packArgs.getReturnValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXppPrePostArgsWithPack</Name>
				<Source><![CDATA[
    private XppPrePostArgs createXppPrePostArgsWithPack(container _pack)
    {
        XppPrePostArgs prePostArgs = new XppPrePostArgs(_pack, '',  XppEventHandlerCalledWhen::Post);
        prePostArgs.setReturnValue(_pack);
        return prePostArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVariablePackKey</Name>
				<Source><![CDATA[
    private ClassName getVariablePackKey(str _variableName)
    {
        return classStr(CreditCardAuthTransArchiver) + '.' + _variableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    internal static void main(Args _args)
    {
        CreditCardAuthTransArchiver::construct().prompt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogClosedWithOk</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void dialogClosedWithOk(Object _dialog)
    {
        super(_dialog);

        Args args = new Args();
        args.name(formstr(CreditCardAuthTransArchiveDialog));
        args.parm(int642Str(min(this.getTransactionCount(), maxArchiveThreshold)));

        FormRun creditCardAuthTransArchiveDialog = classfactory.formRunClass(args);
        creditCardAuthTransArchiveDialog.run();
        creditCardAuthTransArchiveDialog.wait();

        if (!creditCardAuthTransArchiveDialog.closedOk())
        {
            this.batchInfo().parmBatchExecute(NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void run()
    {
        if (isChildTask)
        {
            using (SysInstrumentationActivityContext activityContext = this.getActivityContextForRun())
            {
                this.uploadPaymentData(activityContext);

                activityContext.addCustomProperty(CustCreditCardInstrumentationConstants::SuccessCount, ApplicationCommonInstrumentationMagnitude::log10Magnitude(successCount));
                activityContext.addCustomProperty(CustCreditCardInstrumentationConstants::FailureCount, ApplicationCommonInstrumentationMagnitude::log10Magnitude(failureCount));
                activityContext.addCustomProperty(CustCreditCardInstrumentationConstants::TaskId, int2Str(taskId));
            }
        }
        else if (this.getTransactionCount() > 0)
        {
            this.createChildTask();
        }

        try
        {
            if (System.IO.Directory::Exists(tempPath))
            {
                System.IO.Directory::Delete(tempPath, true);
            }
        }
        catch
        {
            // Ignore.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToChildTask</Name>
				<Source><![CDATA[
    internal void setToChildTask()
    {
        isChildTask = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecIdRanges</Name>
				<Source><![CDATA[
    internal void setRecIdRanges(RecId minRecId, RecId maxRecId)
    {
        minTaskRecId = minRecId;
        maxTaskRecId = maxRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createChildTask</Name>
				<Source><![CDATA[
    private void createChildTask()
    {
        BatchHeader batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
        container datapoints = this.getDatapointsByPercentile();

        for (int i = 1; i <= NumOfTasks; i++)
        {
            taskId = i;
            CreditCardAuthTransArchiver batchBundlingTask = CreditCardAuthTransArchiver::construct();
            batchBundlingTask.unpack(this.pack());
            batchBundlingTask.setToChildTask();
            batchBundlingTask.setRecIdRanges(conPeek(datapoints, i), conPeek(datapoints, i + 1));

            batchBundlingTask.batchInfo().parmGroupId(this.parmCurrentBatch().GroupId);
            batchBundlingTask.batchInfo().parmCaption(strFmt("@AccountsReceivable:CreditCardAuthTransArchiveLogProcessingTask", taskId));
            batchHeader.addRuntimeTask(batchBundlingTask, this.parmCurrentBatch().RecId);
        }

        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadPaymentData</Name>
				<Source><![CDATA[
    private void uploadPaymentData(SysInstrumentationActivityContext _activityContext)
    {
        System.Exception systemException;
        Microsoft.Dynamics.Ax.Xpp.DeadlockException deadLockException;
        Microsoft.Dynamics.Ax.Xpp.UpdateConflictException updateConflictException;
        Microsoft.Dynamics.Ax.Xpp.TransientSqlConnectionError transientSqlConnectionError;
        CreditCardAuthTrans creditCardAuthTrans;
        
        while select forupdate CardTokenRequest, CardTokenResult, IsPaymentDataArchived, 
            ApprovedDateTime, LineNum, RecId
            from creditCardAuthTrans
            order by creditCardAuthTrans.ApprovedDateTime asc
            where !creditCardAuthTrans.IsPaymentDataArchived
                && creditCardAuthTrans.ApprovedDateTime < endDate
                && creditCardAuthTrans.ApprovedDateTime >= startDate
                && creditCardAuthTrans.RecId > minTaskRecId
                && creditCardAuthTrans.RecId <= maxTaskRecId
        {
            try
            {
                List archiveBlobList = this.prepareArchiveList(creditCardAuthTrans);
                if (!archiveBlobList.empty())
                {
                    RetailArchiver::performArchive(archiveBlobList, creditCardAuthTrans);
                }

                creditCardAuthTrans.CardTokenRequest = '';
                creditCardAuthTrans.CardTokenResult = '';
                creditCardAuthTrans.IsPaymentDataArchived = NoYes::Yes;

                ttsbegin;
                creditCardAuthTrans.update();
                ttscommit;

                successCount++;
            }
            catch (deadLockException)
            {
                if (xSession::currentRetryCount() <= maxRetryAttempts)
                {
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
                else
                {
                    this.logWarningMessage(_activityContext, creditCardAuthTrans.RecId, deadLockException);
                    failureCount++;
                }
            }
            catch (updateConflictException)
            {
                if (xSession::currentRetryCount() <= maxRetryAttempts)
                {
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
                else
                {
                    this.logWarningMessage(_activityContext, creditCardAuthTrans.RecId, updateConflictException);
                    failureCount++;
                }
            }
            catch (transientSqlConnectionError)
            {
                if (xSession::currentRetryCount() <= maxRetryAttempts)
                {
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
                else
                {
                    this.logAndThrowException(_activityContext, creditCardAuthTrans.RecId, transientSqlConnectionError);
                }
            }
            catch (systemException)
            {
                this.logAndThrowException(_activityContext, creditCardAuthTrans.RecId, systemException);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDatapointsByPercentile</Name>
				<Source><![CDATA[
    private container getDatapointsByPercentile()
    {
        var builder = new System.Text.StringBuilder();
        this.buildGetDatapointsSQLString(builder);
        str getDatapointsSQL = builder.ToString();

        Connection sessionConn = new Connection();
        Statement statement = sessionConn.createStatement();

        new SqlStatementExecutePermission(getDatapointsSQL).assert();
        ResultSet getDatapointsResult = Statement.executeQueryWithParameters(getDatapointsSQL, SqlParams::create());
        CodeAccessPermission::revertAssert();

        getDatapointsResult.next();
        container getDatapoints;
        for (int i = 1; i <= NumOfTasks + 1; i++)
        {
            getDatapoints += getDatapointsResult.getInt64(i);
        }

        getDatapoints = conPoke(getDatapoints, 1, conPeek(getDatapoints, 1) - 1);

        return getDatapoints;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGetDatapointsSQLString</Name>
				<Source><![CDATA[
    private void buildGetDatapointsSQLString(System.Text.StringBuilder _builder)
    {
        /* Actual SQL statement example for the following SQL string
            SELECT
                PERCENTILE_CONT(0.00) WITHIN GROUP(ORDER BY T.RECID) over(),
                PERCENTILE_CONT(0.25) WITHIN GROUP(ORDER BY T.RECID) over(),
                PERCENTILE_CONT(0.50) WITHIN GROUP(ORDER BY T.RECID) over(),
                PERCENTILE_CONT(0.75) WITHIN GROUP(ORDER BY T.RECID) over(),
                PERCENTILE_CONT(1.00) WITHIN GROUP(ORDER BY T.RECID) over()
            FROM (
                SELECT TOP 1000 RECID
                FROM CREDITCARDAUTHTRANS T
                WHERE T.PARTITION = 5637144576
                    AND T.DATAAREAID = 'USMF'
                    AND T.ISPAYMENTDATAARCHIVED = 0
                    AND T.APPROVEDDATETIME < '2021-08-31 00:00:00.000'
                    AND T.APPROVEDDATETIME >= '1900-01-01 00:00:00.000'
            ) AS T
        */

        DictTable dictTable = new DictTable(tableNum(CreditCardAuthTrans));
        str creditCardAuthTransTableName = dictTable.name(DbBackend::Sql);
        str approvalDate = DictTable.fieldName(fieldNum(CreditCardAuthTrans, ApprovedDateTime), DbBackend::Sql);
        str isPaymentDataArchived = DictTable.fieldName(fieldNum(CreditCardAuthTrans, isPaymentDataArchived), DbBackend::Sql);
        str dataAreaId = DictTable.fieldName(fieldNum(CreditCardAuthTrans, dataAreaId), DbBackend::Sql);
        str partition = DictTable.fieldName(fieldNum(CreditCardAuthTrans, partition), DbBackend::Sql);
        const real interval = 1 / NumOfTasks;
        real percent = 0.00;
        
        _builder.Append('SELECT ');

        for (int i = 0; i < NumOfTasks; i++)
        {
            _builder.Append('PERCENTILE_CONT(').Append(percent).Append(') WITHIN GROUP(ORDER BY T.RECID) over(), ');
            percent += interval;
        }

        _builder.Append('PERCENTILE_CONT(').Append(percent).Append(') WITHIN GROUP(ORDER BY T.RECID) over() ');
        _builder.Append('FROM (SELECT TOP ').Append(maxArchiveThreshold);
        _builder.Append(' RECID FROM ').Append(creditCardAuthTransTableName).Append(' T WHERE T.').Append(partition).Append(' = ').Append(getCurrentPartitionRecId());
        _builder.Append(' AND T.').Append(dataAreaId).Append(' = \'').Append(curExt()).Append('\' AND T.').Append(isPaymentDataArchived).Append(' = 0 ');
        _builder.Append('AND T.').Append(approvalDate).Append(' < \'').Append(endDate).Append('\' AND T.');
        _builder.Append(approvalDate).Append(' >= \'').Append(startDate).Append('\') AS T');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContextForRun</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext getActivityContextForRun()
    {
        logger = CustInstrumentationLogger::newFromInstrumentationNameSpace(CustCreditCardInstrumentationConstants::InstrumentationNamespace);
        return logger.activityContext(logger.activity(
            CustCreditCardInstrumentationConstants::CreditCardAuthTransArchiverProcess,
            CustCreditCardInstrumentationConstants::InstrumentationNamespace));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logAndThrowException</Name>
				<Source><![CDATA[
    private void logAndThrowException(SysInstrumentationActivityContext _activityContext, RecId _recId, System.Exception _exception)
    {
        _activityContext.addCustomProperty(
            CustCreditCardInstrumentationConstants::ErrorMsg,
            strFmt(CreditCardAuthTransDataUploadFailureLogMessage, _recId, _exception.ToString())
        );
        throw _exception;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWarningMessage</Name>
				<Source><![CDATA[
    private void logWarningMessage(SysInstrumentationActivityContext _activityContext, RecId _recId, System.Exception _exception)
    {
        _activityContext.addCustomProperty(
            CustCreditCardInstrumentationConstants::WarningMsg,
            strFmt(CreditCardAuthTransDataUploadFailureLogMessage, _recId, _exception.ToString())
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareArchiveList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the list of payment blobs.
    /// </summary>
    /// <param name = "_creditCardAuthTrans">The payment transaction record.</param>
    /// <returns>A list of payment blobs.</returns>
    private List prepareArchiveList(CreditCardAuthTrans _creditCardAuthTrans)
    {
        List archiveList = new List(Types::Class);

        if (_creditCardAuthTrans.RecId == 0)
        {
            return archiveList;
        }

        str identifier = int642Str(_creditCardAuthTrans.RecId);

        if (_creditCardAuthTrans.CardTokenRequest != '')
        {
            archiveList.addEnd(RetailArchiveBlob::initFromBlobAndIdentifier(
                _creditCardAuthTrans.CardTokenRequest,
                strFmt("%1_%2", identifier, CardTokenRequestFilename)));
        }

        if (_creditCardAuthTrans.CardTokenResult != '')
        {
            archiveList.addEnd(RetailArchiveBlob::initFromBlobAndIdentifier(
                _creditCardAuthTrans.CardTokenResult,
                strFmt("%1_%2", identifier, CardTokenResultFilename)));
        }

        return archiveList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Object dialog()
    {
        dialogRunbase = new DialogRunbase("@AccountsReceivable:CreditCardAuthTransArchiver", this);

        DialogGroup dialogGroupBase = dialogRunbase.addGroup(strMin());
        dialogGroupBase.frameType(FormFrameType::None);
        dialogGroupBase.columns(1);

        dialogFieldDaysAgo = dialogRunbase.addField(
            extendedTypeStr(PositiveDays),
            "@AccountsReceivable:CreditCardAuthTransArchiverParameter",
            "@AccountsReceivable:CreditCardAuthTransArchiverParameterHelp");

        dialogFieldDaysAgo.value(daysAgo);

        dialogFieldArchiveEndDate = dialogRunbase.addField(
            extendedTypeStr(ApprovedDateTime),
            "@AccountsReceivable:CreditCardAuthTransArchiveEndDate");
        
        this.calculateEndDate();
        dialogFieldArchiveEndDate.value(endDate);
        dialogFieldArchiveEndDate.enabled(false);

        this.showBatchTab(true);

        dialogRunbase.formBuildDesign().control('OKButton').text("@ApplicationFoundation:NextFrame");

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(dialogRunbase);

        FormRun formRun = _dialog.dialogForm().formRun();
        if (formRun)
        {
            dialogFieldDaysAgo.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(CreditCardAuthTransArchiver, modifiedDaysAgo), this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedDaysAgo</Name>
				<Source><![CDATA[
    private boolean modifiedDaysAgo(FormIntControl _control)
    {
        boolean res = _control.modified();

        if (res)
        {
            daysAgo = str2Num(_control.valueStr());
            this.calculateEndDate();
            dialogFieldArchiveEndDate.value(endDate);
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateEndDate</Name>
				<Source><![CDATA[
    private void calculateEndDate()
    {
        this.endDate = any2Date(DateTimeUtil::addDays(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), -this.daysAgo));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean getFromDialog()
    {
        daysAgo = dialogFieldDaysAgo.value();
        this.calculateEndDate();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean validate(Object _object = null)
    {
        return super() && this.validateActiveBatchJobExist() && this.validateMinimumAgeLimit() && this.validateTransactionCount() && this.validateMaxArchiveThreshold();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMinimumAgeLimit</Name>
				<Source><![CDATA[
    private boolean validateMinimumAgeLimit()
    {
        boolean isValid = true;

        if (daysAgo < MinRetentionDays)
        {
            isValid = checkFailed(strFmt("@AccountsReceivable:CreditCardAuthTransArchiverMinimumAgeLimit", MinRetentionDays));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransactionCount</Name>
				<Source><![CDATA[
    private boolean validateTransactionCount()
    {
        boolean isValid = true;

        if (this.getTransactionCount() == 0)
        {
            isValid = checkFailed("@AccountsReceivable:CreditCardAuthTransArchiverNoTransaction");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActiveBatchJobExist</Name>
				<Source><![CDATA[
    private boolean validateActiveBatchJobExist()
    {
        boolean isValid = true;

        if (this.doesActiveBatchJobExist())
        {
            isValid = checkFailed("@AccountsReceivable:CreditCardAuthTransArchiverBatchJobExist");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMaxArchiveThreshold</Name>
				<Source><![CDATA[
    private boolean validateMaxArchiveThreshold()
    {
        boolean isValid = true;

        if (this.maxArchiveThreshold == 0)
        {
            isValid = checkFailed("@CashManagement:CreditCardAuthTransArchiverMaxNumIsZero");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCount</Name>
				<Source><![CDATA[
    private RecIdCount getTransactionCount()
    {
        this.calculateEndDate();

        CreditCardAuthTrans creditCardAuthTrans;
        creditCardAuthTrans.disableCache(true);

        select count(RecId) from creditCardAuthTrans
            where !creditCardAuthTrans.IsPaymentDataArchived
                && creditCardAuthTrans.ApprovedDateTime < endDate
                && creditCardAuthTrans.ApprovedDateTime >= startDate;

        return creditCardAuthTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesActiveBatchJobExist</Name>
				<Source><![CDATA[
    private boolean doesActiveBatchJobExist()
    {
        Batch batch;

        select firstonly batch
            where batch.ClassNumber == classNum(CreditCardAuthTransArchiver)
                && batch.Company == curExt()
                && (batch.Status == BatchStatus::Ready
                    || batch.Status == BatchStatus::Waiting
                    || batch.Status == BatchStatus::Scheduled
                    || batch.Status == BatchStatus::Executing);

        return batch.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static ClassDescription description()
    {
        return "@AccountsReceivable:CreditCardAuthTransArchiver";
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>