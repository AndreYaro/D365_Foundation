<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTraceCrimsonLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class for writing master planning trace messages to the Windows Event log using Crimson.
/// </summary>
class ReqTraceCrimsonLogger implements ReqTraceLoggerInterface
{
    #define.MRPKEYWORD(0x0000020000000000)

    ReqTraceLogSinkProviderInterface sinkProvider;
    guid lastLoggedEntryEventId;

    boolean logKeywordEnabled;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        private void init()
    {
        new InteropPermission(InteropKind::ClrInterop).assert();

        Microsoft.Dynamics.AX.Planning.JobScheduling.JobSchedulingEngineInteropFactory::EnsureLoggerSink();

        logKeywordEnabled = xClassTrace::isTracingEnabled(#MRPKEYWORD);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loggingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if logging is enabled.
    /// </summary>
    /// <returns>
    /// true if logging is enabled; otherwise, false.
    /// </returns>
    public boolean loggingEnabled()
    {
        return logKeywordEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSinkProvider</Name>
				<Source><![CDATA[
        public ReqTraceLogSinkProviderInterface parmSinkProvider(ReqTraceLogSinkProviderInterface _sinkProvider = sinkProvider)
    {
        sinkProvider = _sinkProvider;
        return sinkProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the message and the context to the event log.
    /// </summary>
    /// <param name="_context">
    /// The context in which the message has been recorded.
    /// </param>
    /// <param name="_message">
    /// The message.
    /// </param>
    public void writeLog(ReqTraceLogContext _context, ReqTraceLogMessage _message)
    {
        if (!this.loggingEnabled())
        {
            // Do not write the event to Crimson
            return;
        }

        if (classIdGet(_message) == classNum(ReqTraceLogMessageEntry))
        {
            this.writeLogEntry(_context, _message);
        }
        else
        {
            this.writeLogDetails(_context, _message);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLogDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs detailed message.
    /// </summary>
    /// <param name="_context">
    /// Execution context.
    /// </param>
    /// <param name="_message">
    /// Message to be logged.
    /// </param>
    protected void writeLogDetails(ReqTraceLogContext _context, ReqTraceLogMessageDetail _message)
    {
        System.Collections.ArrayList parameterValues;

        SysDictEnum dictEnum    = new SysDictEnum(enumNum(ReqTraceMessageDetailType));
        str messageText         = ReqTraceLogMessage::getText(dictEnum.value2Label(_message.parmMessageDetailType()), _message.parmMessageCon());
        guid eventId            = newGuid();

        parameterValues = new System.Collections.ArrayList(6);
        parameterValues.Add(_context.parmTraceId());
        parameterValues.Add(eventId);
        parameterValues.Add(lastLoggedEntryEventId);
        parameterValues.Add(_context.parmSequence());
        parameterValues.Add(enum2int(_message.parmMessageDetailType()));
        parameterValues.Add(ReqTraceCrimsonLogger::prepareForSerialization(_message.parmMessageCon()));

        sinkProvider.writeToLog(
            messageText,
            Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingEventType::ReqTaskExplanationDetail,
            parameterValues);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLogEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs message.
    /// </summary>
    /// <param name="_context">
    /// Execution context.
    /// </param>
    /// <param name="_message">
    /// Message to be logged.
    /// </param>
    protected void writeLogEntry(ReqTraceLogContext _context, ReqTraceLogMessageEntry _message)
    {
        System.Collections.ArrayList parameterValues;

        SysDictEnum dictEnum    = new SysDictEnum(enumNum(ReqTraceMessageType));
        str messageText         = ReqTraceLogMessage::getText(dictEnum.value2Label(enum2int(_message.parmMessageType())), _message.parmMessageCon());
        guid eventId            = newGuid();

        lastLoggedEntryEventId = eventId;

        parameterValues = new System.Collections.ArrayList(11);
        parameterValues.Add(_context.parmTraceId());
        parameterValues.Add(eventId);
        parameterValues.Add(_message.parmPlanVersion());
        parameterValues.Add(_context.parmBOMLevel());
        parameterValues.Add(enum2int(_context.parmReqLevelState()));
        parameterValues.Add(enum2int(_context.parmReqProcessStatus()));
        parameterValues.Add(_context.parmSequence());
        parameterValues.Add(_message.parmItemId());
        parameterValues.Add(_message.parmReqTransRefRecId());
        parameterValues.Add(ReqTraceCrimsonLogger::prepareForSerialization(_message.parmMessageCon()));
        parameterValues.Add(enum2int(_message.parmMessageType()));

        sinkProvider.writeToLog(
            messageText,
            Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingEventType::ReqTaskExplanation,
            parameterValues);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static ReqTraceCrimsonLogger construct()
    {
        return new ReqTraceCrimsonLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSinkProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is constructor that serves as dependecy injector.
    /// </summary>
    /// <param name="_sinkProvider">
    /// Object that takes care of logging to Crimson. Real implementation to be injected.
    /// </param>
    /// <returns>
    /// Constructed object with dependency injected.
    /// </returns>
    public static ReqTraceCrimsonLogger newSinkProvider(ReqTraceLogSinkProviderInterface _sinkProvider)
    {
        ReqTraceCrimsonLogger   reqTraceCrimsonLogger = ReqTraceCrimsonLogger::construct();

        reqTraceCrimsonLogger.parmSinkProvider(_sinkProvider);
        reqTraceCrimsonLogger.init();

        return reqTraceCrimsonLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareForSerialization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares container content for serialization by storing length and data types along with values.
    /// </summary>
    /// <param name="_container">
    /// Container to be serialized.
    /// </param>
    /// <returns>
    /// Serialized container.
    /// </returns>
    /// <remarks>
    /// All information that is used for generating message is contained in returned container.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Not all values are supperted in container. If unsoperted values happens this exception is thrown.
    /// </exception>
    private static container prepareForSerialization(container _container)
    {
        Types       type;
        int         i;
        int         cnt;
        container   result;

        cnt = conLen(_container);

        if (cnt == 0)
        {
            return conNull();
        }

        result += cnt;

        for (i = 1; i <= cnt; i++)
        {
            type = typeOf(conPeek(_container, i));

            switch (type)
            {
                case Types::Date :
                case Types::Guid :
                case Types::Int64 :
                case Types::Integer :
                case Types::Real :
                case Types::RString :
                case Types::String :
                case Types::Time :
                case Types::UtcDateTime :
                    result += type;
                    result += conPeek(_container, i);
                    break;
                case Types::Container :
                    result += type;
                    result += ReqTraceCrimsonLogger::prepareForSerialization(conPeek(_container, i));
                    break;
                case Types::Enum :
                case Types::AnyType :
                case Types::BLOB :
                case Types::Class :
                case Types::Record :
                case Types::UserType :
                case Types::VarArg :
                case Types::VarString :
                case Types::void :
                    throw error('Unsupported type');
            }
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>