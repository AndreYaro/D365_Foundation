<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetLock</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CostSheetLock</c> class locks the costing sheet for edition by more than one user at a time.
/// </summary>
public class CostSheetLock
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>releaseLock</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Releases the obtained lock for the default costing sheet in the current company
    ///    by removing the database entry holding the session information
    /// </summary>
    /// <param name = "_forceRelease">true if the release should be forced; optional.</param>
    public void releaseLock(boolean _forceRelease = false)
    {
        if (_forceRelease || this.hasValidLock())
        {
            this.updateSessionInfo(0, utcDateTimeNull(), null);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSessionInfo</Name>
				<Source><![CDATA[
    private void updateSessionInfo(SessionId _sessionId, SessionLoginDateTime _sessionLoginDateTime, UserId _userId)
    {
        ttsbegin;

        CostSheetTable costSheetTable = costSheetTable::find(CostSheetTable::defaultCostSheetTable().SheetId, true);

        // CostSheetTable is OCCEnabled = false, so the record will be locked until ttscommit
        costSheetTable.SessionId = _sessionId;
        costSheetTable.SessionLoginDateTime = _sessionLoginDateTime;
        costSheetTable.UserId = _userId;
        costSheetTable.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>holdLock</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Holds locks on cost sheet for the default costing sheet in the current company.
    /// </summary>
    /// <remarks>
    ///    Execution of this method should be followed by the execution of the <c>release</c> method
    ///    when the lock is no longer necessary.
    /// </remarks>
    public void holdLock()
    {
        if (this.isCostSheetInUse() && !this.overrideCostSheetLock())
        {
            throw error("@SYS126824");
        }
        else
        {
            this.setLocks();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideCostSheetLock</Name>
				<Source><![CDATA[
    /// <summary>
    ///     If the user owns the lock in another active session, it prompts user to discard those changes and open costing sheet in a new session.
    /// </summary>
    /// <returns>True if user decides to override the existing session.</returns>
    protected boolean overrideCostSheetLock()
    {
        boolean ret             = false;
        var costSheetTable      = CostSheetTable::defaultCostSheetTable();
        xSession currentSession = new xSession(sessionId());
        if (currentSession.userId() == costSheetTable.UserId)
        {
            DialogButton dialogButton = Box::yesNo("@SCM:OverrideCostingSheetLock", DialogButton::No);
            switch (dialogButton)
            {
                case DialogButton::Yes :
                    ret = true;
                    break;

                case DialogButton::No :
                    break;

                default:
                    Debug::assert(false);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCostSheetInUse</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if the costing sheet is already in use for current company by checking the database entry and session.
    /// </summary>
    /// <returns>True if in use, false otherwise.</returns>
    protected boolean isCostSheetInUse()
    {
        boolean ret = false;
        var costSheetTable = CostSheetTable::defaultCostSheetTable();

        if (costSheetTable.SessionId != 0)
        {
            if (isSessionActive(costSheetTable.SessionId, costSheetTable.SessionLoginDateTime))
            {
                ret = true;
            }
            else
            {
                this.releaseLock(true);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocks</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Locks the costing sheet by updating the database entry with the current session information.
    /// </summary>
    private void setLocks()
    {
        xSession    currentSession = new xSession(sessionId());
        this.updateSessionInfo(currentSession.sessionid(), currentSession.loginDateTime(), currentSession.userId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostSheetLock construct()
    {
        return new CostSheetLock();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasValidLock</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if the current user has a valid lock on the costing sheet.
    /// </summary>
    /// <returns>Returns true if the user has a valid cost sheet lock for this session.</returns>
    public boolean hasValidLock()
    {
        boolean ret = false;
        var costSheetTable = CostSheetTable::defaultCostSheetTable();

        if (costSheetTable.SessionId != 0)
        {
                xSession    currentSession = new xSession(sessionId());
                if ((currentSession.userId() == costSheetTable.UserId) &&
                    (currentSession.sessionid() == costSheetTable.SessionId) &&
                    (currentSession.loginDateTime() == costSheetTable.SessionLoginDateTime))
                {
                    ret = true;
                }
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
