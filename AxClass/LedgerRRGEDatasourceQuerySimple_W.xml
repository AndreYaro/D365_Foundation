<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGEDatasourceQuerySimple_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGEDatasourceQuerySimple_W extends LedgerRRGEDatasourceQuery_W
{
    QueryRun            queryRun;
    Common              record;
    private const int   CompanyInfoFieldINN     = -1000;
    private const int   CompanyInfoFieldKPP     = -1001;
    private const int   CompanyInfoFieldOKPO    = -1002;
    private const int   CompanyInfoFieldOKDP    = -1003;
    private const int   CompanyInfoFieldOKATO   = -1004;
    private const int   CompanyInfoFieldOGRN    = -1005;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findValue</Name>
				<Source><![CDATA[
    protected str findValue(int _fieldId, int _tableId = 1)
    {
        SysDictTable    dictTable;
        SysDictField    dictField;
        DictRelation    dictRelation;
        str             relationName;
        int             i;
        boolean         fkRelationFound;
        DictTable       relatedDictTable;
        DictIndex       relatedNaturalKeyIndex;
        FieldId         relatedValueFieldId;
        Common          relatedRecord;
        CompanyInfo     companyInfo;
        TransDate       transDate;

        str errorValue(str _errorMessage = Error::wrongUseOfFunction(funcName()))
        {
            error(_errorMessage);
            return "@SYS330170";
        }

        if (!queryRun)
        {
            return errorValue();
        }

        if (!record || record.TableId != _tableId)
        {
            if (queryRun.query().dataSourceTable(_tableId))
            {
                record = queryRun.get(_tableId);
            }
            else
            {
                return errorValue();
            }
        }

        if (record.TableId != _tableId)
        {
            return errorValue();
        }

        if (_tableId == tableNum(CompanyInfo))
        {
            transDate = document && document.Period ? document.Period : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            companyInfo = record;

            switch (_fieldId)
            {
                case CompanyInfoFieldINN:
                    return CompanyInfoHelper::partyINNasOfDate_RU(companyInfo, transDate);

                case CompanyInfoFieldKPP:
                    return CompanyInfoHelper::partyKPPasOfDate_RU(companyInfo, transDate);

                case CompanyInfoFieldOKPO:
                    return CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo, transDate);

                case CompanyInfoFieldOKDP:
                    return CompanyInfoHelper::partyOKDPasOfDate_RU(companyInfo, transDate);

                case CompanyInfoFieldOKATO:
                    return CompanyInfoHelper::partyOKATOasOfDate_RU(companyInfo, transDate);

                case CompanyInfoFieldOGRN:
                    return CompanyInfoHelper::partyOGRNasOfDate_RU(companyInfo, transDate);
            }
        }

        dictTable = SysDictTable::newTableId(_tableId);
        if (!dictTable)
        {
            return errorValue();
        }

        dictField = dictTable.fieldObject(_fieldId);
        if (!dictField)
        {
            return errorValue(strFmt("@SYS138292", _fieldId, dictTable.name()));
        }

        if (!SysDictType::isEqualOrExtending(dictField.typeId(), extendedTypeNum(RecId)))
        {
            return strFmt('%1', record.(_fieldId));
        }

        // loop through each relation in the table
        for (i = 1; i <= dictTable.relationCnt(); i++)
        {
            // get name of relation
            relationName = dictTable.relation(i);

            // load the relation via its name
            dictRelation = new SysDictRelation(dictTable.id());
            dictRelation.loadNameRelation(relationName);

            if (fieldExt2Id(dictRelation.lineTableValue(1)) == _fieldId && DictRelation::isSurrogateForeignKeyRelation(dictTable.id(), relationName))
            {
                fkRelationFound     = true;
                relatedDictTable    = new DictTable(dictRelation.externTable());
                break;
            }
        }

        if (!fkRelationFound)
        {
            return strFmt('%1', record.(_fieldId));
        }

        if (relatedDictTable)
        {
            relatedRecord = relatedDictTable.makeRecord();
            select firstonly relatedRecord
                where relatedRecord.RecId == record.(_fieldId);

            relatedNaturalKeyIndex = new DictIndex(relatedDictTable.id(), relatedDictTable.replacementKey());

            if (relatedNaturalKeyIndex)
            {
                relatedValueFieldId = relatedNaturalKeyIndex.field(1);
            }

            if (relatedValueFieldId && relatedRecord)
            {
                return strFmt('%1', relatedRecord.(relatedValueFieldId));
            }
        }

        return errorValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCompanyInfoFields</Name>
				<Source><![CDATA[
    private void initCompanyInfoFields()
    {
        this.addField(tableNum(CompanyInfo), CompanyInfoFieldINN,      strLTrim(strRTrim("@LedgerRRG:LedgerRRG_INN")), strLTrim(strRTrim("@LedgerRRG:LedgerRRG_INN")));
        this.addField(tableNum(CompanyInfo), CompanyInfoFieldKPP,      strLTrim(strRTrim("@LedgerRRG:LedgerRRG_RRC")), strLTrim(strRTrim("@LedgerRRG:LedgerRRG_RRC")));
        this.addField(tableNum(CompanyInfo), CompanyInfoFieldOKPO,     strLTrim(strRTrim("@LedgerRRG:LedgerRRG_OKPO")), strLTrim(strRTrim("@LedgerRRG:LedgerRRG_OKPO")));
        this.addField(tableNum(CompanyInfo), CompanyInfoFieldOKDP,     strLTrim(strRTrim("@LedgerRRG:LedgerRRG_OKDP")), strLTrim(strRTrim("@LedgerRRG:LedgerRRG_OKDP")));
        this.addField(tableNum(CompanyInfo), CompanyInfoFieldOKATO,    strLTrim(strRTrim("@LedgerRRG:LedgerRRG_RCOAD")), strLTrim(strRTrim("@LedgerRRG:LedgerRRG_RCOAD")));
        this.addField(tableNum(CompanyInfo), CompanyInfoFieldOGRN,     strLTrim(strRTrim("@LedgerRRG:LedgerRRG_OGRN")), strLTrim(strRTrim("@LedgerRRG:LedgerRRG_OGRN")));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialized</Name>
				<Source><![CDATA[
    public boolean initialized(int _tableId)
    {
        return queryRun != null && super(_tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initQueryRun()
    {
        QueryBuildDataSource    qbds;
        int                     i;

        if (!eQuery)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        record      = null;
        queryRun    = eQuery.getSysQueryRun();

        if (queryRun && queryRun.query())
        {
            if (document)
            {
                qbds = queryRun.query().dataSourceTable(tableNum(LedgerRRGEDocuments_W));
                if (qbds)
                {
                    findOrCreateRange_W(qbds, fieldNum(LedgerRRGEDocuments_W, DocumentId), document.DocumentId);
                }
            }

            qbds = queryRun.query().dataSourceTable(tableNum(CompanyInfo));
            if (qbds)
            {
                findOrCreateRange_W(qbds, fieldNum(CompanyInfo, DataArea), curext());
                for (i = qbds.childDataSourceCount(); i; i--)
                {
                    if (qbds.childDataSourceNo(i).table() == tableNum(DirPartyPostalAddressView))
                    {
                        qbds.childDataSourceNo(i).addLink(fieldNum(CompanyInfo, RecId), fieldNum(DirPartyPostalAddressView, Party));
                    }
                }
            }

            this.updateRangesQuery(queryRun.query());

            queryRun.reset();
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTables</Name>
				<Source><![CDATA[
    public void initTables()
    {
        Query           query;
        int             refTableId;
        SysDictTable    sysDictTable;
        SysDictField    sysDictField;
        int             datasourceNo, fieldNo;

        super();

        if (!queryRun)
        {
            this.initQueryRun();
        }

        query = queryRun.query();

        for(datasourceNo = 1; datasourceNo <= query.dataSourceCount(); datasourceNo++)
        {
            refTableId      = query.dataSourceNo(datasourceNo).table();
            sysDictTable    = SysDictTable::newTableId(refTableId);
            if (sysDictTable)
            {
                this.addTable(refTableId, strLTrim(strRTrim(sysDictTable.label())));

                for (fieldNo = 1; fieldNo <= sysDictTable.fieldCnt(); fieldNo++)
                {
                    sysDictField = new SysDictField(refTableId, sysDictTable.fieldCnt2Id(fieldNo));

                    if (sysDictField && sysDictField.isSql())
                    {
                        this.addField(refTableId, sysDictField.id(), strLTrim(strRTrim(sysDictField.label())));
                    }
                }

                if (refTableId == tableNum(CompanyInfo))
                {
                    this.initCompanyInfoFields();
                }
            }
            else
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next(int _tableId)
    {
        if (!queryRun)
        {
            this.initQueryRun();
        }

        if (queryRun.next())
        {
            this.setInitialized(_tableId);
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset(int _tableId)
    {
       
        super(_tableId);

        queryRun    = null;
        record      = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRangesDatasource</Name>
				<Source><![CDATA[
    private void updateRangesDatasource(QueryBuildDataSource _qbds)
    {
        int             i;
        QueryBuildRange range;

        if (_qbds)
        {
            for (i = _qbds.rangeCount(); i; i--)
            {
                range = _qbds.range(i);
                if (range)
                {
                    range.value(LedgerRRGEProperties_W::replaceMacroValue(range.value(), document, evaluator));
                }
            }

            for (i = _qbds.childDataSourceCount(); i; i--)
            {
                this.updateRangesDatasource(_qbds.childDataSourceNo(i));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRangesQuery</Name>
				<Source><![CDATA[
    private void updateRangesQuery(Query _query)
    {
        int i;

        if (_query)
        {
            for (i = _query.dataSourceCount(); i; i--)
            {
                this.updateRangesDatasource(_query.dataSourceNo(i));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public LedgerRRGEDatasourceQuerySimple_W construct()
    {
        return new LedgerRRGEDatasourceQuerySimple_W();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>