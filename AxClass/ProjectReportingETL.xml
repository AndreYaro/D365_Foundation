<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjectReportingETL</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjectReportingETL
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteDimensionsAndMeasures</Name>
				<Source><![CDATA[
    private void deleteDimensionsAndMeasures()
    {
        ProjectDimension            projDim;
        ProjCategoryDimension       projCategoryDim;
        ProjDateDimension           projDateDim;
        ProjCustomerDimension       projCustDim;
        ProjectCostFact             costFact;
        ProjectRevenueFact          revenueFact;

        ttsBegin;
        delete_from costFact;
        delete_from revenueFact;
        delete_from projDim;
        delete_from projCategoryDim;
        delete_from projDateDim;
        delete_from projCustDim;
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadProjectDimension</Name>
				<Source><![CDATA[
    private void loadProjectDimension()
    {
        ProjTable           projDimensionSource;
        ProjectDimension    projDimensionDest;
        ProjectDimension    projDimensionDestNotExists;
        HcmWorker           workerTable;
        DirPerson           personTable;

        //ProjectManagerName
        insert_recordset projDimensionDest(ProjID, Name, ProjGroupId, Type, ProjectManagerRecID)
        select ProjID, Name, ProjGroupId, Type, WorkerResponsible from projDimensionSource
            notexists join projDimensionDestNotExists
                where projDimensionDestNotExists.ProjID == projDimensionSource.ProjID;

        update_recordSet projDimensionDest
        setting ProjectManagerName = personTable.Name
        join workerTable
            where workerTable.RecId == projDimensionDest.ProjectManagerRecID
        join Name from personTable
            where personTable.RecId == workerTable.Person;

        ttsbegin;
        while select forupdate projDimensionDest
        {
            projDimensionDest.ProjTypeName = enum2str(projDimensionDest.Type);
            projDimensionDest.doUpdate();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadProjCategoryDimension</Name>
				<Source><![CDATA[
    private void loadProjCategoryDimension()
    {
        ProjCategory            projCategoryDimensionSource;
        ProjCategoryDimension   projCategoryDimensionDest;
        ProjCategoryDimension   projCategoryDimensionNotExists;

        insert_recordset projCategoryDimensionDest(CategoryId, Name, ProjCategoryGroup, CategoryType)
        select CategoryId, Name, CategoryGroupId, CategoryType from projCategoryDimensionSource
            notexists join projCategoryDimensionNotExists
                where projCategoryDimensionNotExists.CategoryId == projCategoryDimensionSource.CategoryId;

        while select forUpdate projCategoryDimensionDest
        {
            ttsBegin;
            projCategoryDimensionDest.CategoryTypeName = enum2str(projCategoryDimensionDest.CategoryType);
            projCategoryDimensionDest.doUpdate();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadCustomerDimension</Name>
				<Source><![CDATA[
    private void loadCustomerDimension()
    {
        CustTable               custDimensionSource;
        ProjCustomerDimension   custDimensionDest;
        ProjCustomerDimension   custDimensionDestNotExists;
        DirPartyTable           dirParty;
        LogisticsPostalAddress  lpa;
        DirPartyLocation        dpl;

        insert_recordset custDimensionDest(CustID, CustGroup, Name)
        select AccountNum, CustGroup from custDimensionSource
            join Name from dirParty
            where custDimensionSource.Party == dirParty.RecId
            notexists join custDimensionDestNotExists
                where custDimensionDestNotExists.CustID == custDimensionSource.AccountNum;

        // Load state and country information for customers

        while select custDimensionSource
            join firstonly dpl
                where dpl.Party == custDimensionSource.Party
                   && dpl.IsPostalAddress == NoYes::Yes
                   && dpl.IsPrimary == NoYes::Yes
            join firstonly lpa
                where lpa.location == dpl.recid
        {
            select forupdate firstonly custDimensionDest
            where custDimensionDest.CustID == custDimensionSource.AccountNum;
            if (custDimensionDest)
            {
                ttsbegin;
                custDimensionDest.CountryRegionId = lpa.CountryRegionId;
                custDimensionDest.StateId = lpa.State;
                custDimensionDest.City = lpa.City;
                custDimensionDest.doUpdate();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDateDimension</Name>
				<Source><![CDATA[
    private void loadDateDimension()
    {
        FiscalCalendarPeriod    fiscalCalendarPeriod;
        FiscalCalendarYear      fiscalYear;
        TransDate               transStartDate, transEndDate, currentDate;
        RecId                   calendarRecId;
        //utcDateTime             currentUtcDate;
        ProjDateDimension       projDateDimension;

        projDateDimension.skipDatabaseLog(true);
        projDateDimension.skipDataMethods(true);

        calendarRecId = Ledger::fiscalCalendar(CompanyInfo::current());
        select firstOnly StartDate from fiscalCalendarPeriod
        order by fiscalCalendarPeriod.StartDate asc
            where fiscalCalendarPeriod.FiscalCalendar == calendarRecId;
        transStartDate = fiscalCalendarPeriod.StartDate;

        select firstOnly EndDate from fiscalCalendarPeriod
        order by fiscalCalendarPeriod.StartDate desc
            where fiscalCalendarPeriod.FiscalCalendar == calendarRecId;
        transEndDate = fiscalCalendarPeriod.EndDate;

        currentDate = transStartDate;
        while (currentDate <= transEndDate)
        {
            fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(calendarRecId, currentDate, FiscalPeriodType::Operating);

            projDateDimension.FullDate = currentDate;
            projDateDimension.FiscalQuarter = enum2str(fiscalCalendarPeriod.Quarter);
            projDateDimension.Year = year(currentDate);
            projDateDimension.Month = mthOfYr(currentDate);
            projDateDimension.Day = dayOfMth(currentDate);
            projDateDimension.MonthName = mthName(projDateDimension.Month);
            select firstOnly Name from fiscalYear
            where fiscalYear.RecId == fiscalCalendarPeriod.FiscalCalendarYear;
            projDateDimension.FiscalYearName = fiscalYear.Name;
            projDateDimension.insert();

            // Add a day to the current Date
            currentDate++;
            /*currentUtcDate = DateTimeUtil::newDateTime(currentDate, 0);
            currentUtcDate = DateTimeUtil::addDays(currentUtcDate, 1);
            currentDate = DateTimeUtil::date(currentUtcDate);*/
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadCostMeasures</Name>
				<Source><![CDATA[
    private void loadCostMeasures()
    {
        this.loadForecastCost();
        this.loadActualCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadForecastCost</Name>
				<Source><![CDATA[
    private void loadForecastCost()
    {
        ProjForecastEmpl            hourForecast;
        ProjForecastCost            costForecast;
        ForecastSales               itemForecast;

        ProjectCostFact             costFact;
        ProjCategoryDimension       projCategoryDimension;
        ProjectDimension            projDimension;
        ProjDateDimension           projDateDimension;

        ttsBegin;
        // Hour Costs and Revenue
        while select hourForecast
        join firstOnly RecId from projCategoryDimension
            where projCategoryDimension.CategoryId == hourForecast.CategoryId
        join firstOnly RecId from projDimension
            where projDimension.ProjID == hourForecast.ProjId
        join firstOnly RecId from projDateDimension
            where projDateDimension.FullDate == hourForecast.SchedFromDate
        {
            costFact.CategoryDim_FK    = projCategoryDimension.RecId;
            costFact.ProjectDateDim_FK = projDateDimension.RecId;
            costFact.ProjectDim_FK     = projDimension.RecId;
            costFact.ForecastCost      = hourForecast.costAmount();
            costFact.insert();
        }

        // Expense Costs and Revenue
        while select costForecast
        join firstOnly RecId from projCategoryDimension
            where projCategoryDimension.CategoryId == costForecast.CategoryId
        join firstOnly RecId from projDimension
            where projDimension.ProjID == costForecast.ProjId
        join firstOnly RecId from projDateDimension
            where projDateDimension.FullDate == costForecast.StartDate

        {
            costFact.CategoryDim_FK    = projCategoryDimension.RecId;
            costFact.ProjectDateDim_FK = projDateDimension.RecId;
            costFact.ProjectDim_FK     = projDimension.RecId;
            costFact.ForecastCost      = costForecast.CostPrice * costForecast.Qty;
            costFact.insert();
        }

        // Item Forecast
        while select itemForecast
        where itemForecast.ProjId != ''
        join firstOnly RecId from projCategoryDimension
            where projCategoryDimension.CategoryId == itemForecast.ProjCategoryId
        join firstOnly RecId from projDimension
            where projDimension.ProjID == itemForecast.ProjId
        join firstOnly RecId from projDateDimension
            where projDateDimension.FullDate == itemForecast.StartDate
        {
            costFact.CategoryDim_FK    = projCategoryDimension.RecId;
            costFact.ProjectDateDim_FK = projDateDimension.RecId;
            costFact.ProjectDim_FK     = projDimension.RecId;
            costFact.ForecastCost      = itemForecast.costAmount();
            costFact.insert();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadActualCost</Name>
				<Source><![CDATA[
    private void loadActualCost()
    {
        ProjTransPosting            projTransPosting;
        ProjectCostFact             costFact;
        ProjectDimension            projectDim;
        ProjDateDimension           projDateDim;
        ProjCategoryDimension       categoryDim;

        ttsBegin;

        insert_recordset costFact(ActualCost, PostingType, ProjectDim_FK, ProjectDateDim_FK, CategoryDim_FK)
        select AmountMST, PostingType from projTransPosting
            where (projTransPosting.PostingType == LedgerPostingType::ProjCost
                || projTransPosting.PostingType == LedgerPostingType::ProjNeverLedger
                || projTransPosting.PostingType == LedgerPostingType::ProjNoLedger
                || projTransPosting.PostingType == LedgerPostingType::ProjOffsetAccountItem)
        join firstOnly RecId from projectDim
            where projectDim.ProjID == projTransPosting.ProjId
        join firstOnly RecId from projDateDim
            where projDateDim.FullDate == projTransPosting.ProjTransDate
        join firstOnly RecId from categoryDim
        where categoryDim.CategoryId == projTransPosting.CategoryId;

        insert_recordset costFact(WIPCost, PostingType, ProjectDim_FK, ProjectDateDim_FK, CategoryDim_FK)
        select AmountMST, PostingType from projTransPosting
            where (projTransPosting.PostingType == LedgerPostingType::ProjWIPCostvalue
                || projTransPosting.PostingType == LedgerPostingType::ProjStatusAccountItem)
        join firstOnly RecId from projectDim
            where projectDim.ProjID == projTransPosting.ProjId
        join firstOnly RecId from projDateDim
            where projDateDim.FullDate == projTransPosting.ProjTransDate
        join firstOnly RecId from categoryDim
        where categoryDim.CategoryId == projTransPosting.CategoryId;

        while select forupdate costFact
            where costFact.ActualCost != 0
        {
            costFact.postingTypeName = enum2str(costFact.PostingType);
            costFact.doUpdate();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadRevenueMeasures</Name>
				<Source><![CDATA[
    private void loadRevenueMeasures()
    {
        this.loadForecastRevenue();
        this.loadActualRevenue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadForecastRevenue</Name>
				<Source><![CDATA[
    private void loadForecastRevenue()
    {
        ProjForecastEmpl            hourForecast;
        ProjForecastCost            costForecast;
        ProjForecastRevenue         feeForecast;
        ForecastSales               itemForecast;

        ProjectRevenueFact          revenueFact;
        ProjectDimension            projDimension;
        ProjDateDimension           projDateDimension;
        ProjCustomerDimension       custDimension;
        ProjCategoryDimension       projCategoryDimension;
        ProjTable                   projTable;
        ProjFundingSource           fundingSource;

        ttsBegin;
        // Hour Costs and Revenue
        while select hourForecast
        where hourForecast.SalesPrice != 0
           && hourForecast.Qty != 0
        join firstOnly RecId from projCategoryDimension
            where projCategoryDimension.CategoryId == hourForecast.CategoryId
        join firstOnly RecId from projDimension
            where projDimension.ProjID == hourForecast.ProjId
        join firstOnly RecId from projDateDimension
            where projDateDimension.FullDate == hourForecast.SchedFromDate
        outer join firstOnly CustAccount from projTable
            where projTable.ProjId == hourForecast.ProjId
        outer join firstOnly RecId from custDimension
            where custDimension.CustID == projTable.CustAccount
        outer join firstOnly CustAccount from fundingSource
            where fundingSource.RecId == hourForecast.ProjFundingSource

        {
            revenueFact.ProjectDateDim_FK = projDateDimension.RecId;
            revenueFact.ProjectDim_FK     = projDimension.RecId;
            revenueFact.CategoryDim_FK    = projCategoryDimension.Recid;
            if (hourForecast.ProjFundingSource)
            {
                select firstOnly RecId from custDimension
                where custDimension.CustID == fundingSource.CustAccount;
            }
            revenueFact.CustomerDim_FK    = custDimension.RecId;
            revenueFact.ForecastRevenue   = hourForecast.SalesPrice * hourForecast.Qty;
            revenueFact.insert();
        }

        // Expense Costs and Revenue
        while select costForecast
        where costForecast.SalesPrice != 0
           && costForecast.Qty != 0
        join firstOnly RecId from projCategoryDimension
            where projCategoryDimension.CategoryId == costForecast.CategoryId
        join firstOnly RecId from projDimension
            where projDimension.ProjID == costForecast.ProjId
        join firstOnly RecId from projDateDimension
            where projDateDimension.FullDate == costForecast.StartDate
        outer join firstOnly CustAccount from projTable
            where projTable.ProjId == costForecast.ProjId
        outer join firstOnly RecId from custDimension
            where custDimension.CustID == projTable.CustAccount
        outer join firstOnly CustAccount from fundingSource
            where fundingSource.RecId == costForecast.ProjFundingSource
        {
            revenueFact.ProjectDateDim_FK = projDateDimension.RecId;
            revenueFact.ProjectDim_FK     = projDimension.RecId;
            revenueFact.CategoryDim_FK    = projCategoryDimension.Recid;
            if (costForecast.ProjFundingSource)
            {
                select firstOnly RecId from custDimension
                where custDimension.CustID == fundingSource.CustAccount;
            }
            revenueFact.CustomerDim_FK    = custDimension.RecId;
            revenueFact.ForecastRevenue     = costForecast.SalesPrice * costForecast.Qty;
            revenueFact.insert();
        }

        // Revenue/Fee Forecast
        while select feeForecast
        where feeForecast.SalesPrice != 0
           && feeForecast.Qty != 0
        join firstOnly RecId from projCategoryDimension
            where projCategoryDimension.CategoryId == feeForecast.CategoryId
        join firstOnly RecId from projDimension
            where projDimension.ProjID == feeForecast.ProjId
        join firstOnly RecId from projDateDimension
            where projDateDimension.FullDate == feeForecast.StartDate
        outer join firstOnly CustAccount from projTable
            where projTable.ProjId == feeForecast.ProjId
        outer join firstOnly RecId from custDimension
            where custDimension.CustID == projTable.CustAccount
        outer join firstOnly CustAccount from fundingSource
            where fundingSource.RecId == feeForecast.ProjFundingSource
        {
            revenueFact.ProjectDateDim_FK = projDateDimension.RecId;
            revenueFact.ProjectDim_FK     = projDimension.RecId;
            revenueFact.CategoryDim_FK    = projCategoryDimension.Recid;
            if (feeForecast.ProjFundingSource)
            {
                select firstOnly RecId from custDimension
                where custDimension.CustID == fundingSource.CustAccount;
            }
            revenueFact.CustomerDim_FK    = custDimension.RecId;
            revenueFact.ForecastRevenue   = feeForecast.SalesPrice * feeForecast.Qty;
            revenueFact.insert();
        }

        // Item Forecast
        while select itemForecast
        where itemForecast.ProjId != ''
           && itemForecast.SalesQty != 0
           && itemForecast.SalesPrice != 0
        join firstOnly RecId from projCategoryDimension
            where projCategoryDimension.CategoryId == itemForecast.ProjCategoryId
        join firstOnly RecId from projDimension
            where projDimension.ProjID == itemForecast.ProjId
        join firstOnly RecId from projDateDimension
            where projDateDimension.FullDate == itemForecast.StartDate
        outer join firstOnly CustAccount from projTable
            where projTable.ProjId == itemForecast.ProjId
        outer join firstOnly RecId from custDimension
            where custDimension.CustID == projTable.CustAccount
        outer join firstOnly CustAccount from fundingSource
            where fundingSource.RecId == itemForecast.ProjFundingSource
        {
            revenueFact.ProjectDateDim_FK = projDateDimension.RecId;
            revenueFact.ProjectDim_FK     = projDimension.RecId;
            revenueFact.CategoryDim_FK    = projCategoryDimension.recid;
            if (itemForecast.ProjFundingSource)
            {
                select firstOnly RecId from custDimension
                where custDimension.CustID == fundingSource.CustAccount;
            }
            revenueFact.CustomerDim_FK    = custDimension.RecId;
            revenueFact.ForecastRevenue   = itemForecast.salesAmount();
            revenueFact.insert();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadActualRevenue</Name>
				<Source><![CDATA[
    private void loadActualRevenue()
    {
        ProjTransPosting            projTransPosting;
        ProjectRevenueFact          revenueFact;
        ProjectDimension            projectDim;
        ProjDateDimension           projDateDim;
        ProjCustomerDimension       custDim;
        ProjFundingSource           fundingSource;
        ProjCategoryDimension       categoryDim;

        ttsBegin;

        insert_recordset revenueFact(ActualRevenue, PostingType, ProjectDim_FK, ProjectDateDim_FK, CustomerDim_FK, CategoryDim_FK)
        select AmountMST, PostingType from projTransPosting
            where (projTransPosting.PostingType == LedgerPostingType::ProjTurnover
               || ProjTransPosting.PostingType == LedgerPostingType::ProjSalesValueOffset)
               && projTransPosting.ProjFundingSource != 0
        join firstOnly RecId from projectDim
            where projectDim.ProjID == projTransPosting.ProjId
        join firstOnly RecId from projDateDim
            where projDateDim.FullDate == projTransPosting.ProjTransDate
        join firstOnly fundingSource
            where fundingSource.RecId == projTransPosting.ProjFundingSource
        join firstOnly RecId from custDim
            where custDim.CustID == fundingSource.CustAccount
        join firstonly RecId from categoryDim
            where categoryDim.CategoryId == projTransPosting.CategoryId;

        insert_recordset revenueFact(ActualRevenue, PostingType, ProjectDim_FK, ProjectDateDim_FK, CustomerDim_FK)
        select AmountMST, PostingType from projTransPosting
            where projTransPosting.PostingType == LedgerPostingType::ProjOnAccount ||
                  projTransPosting.PostingType == LedgerPostingType::ProjWIPInvoicedOnAccount
               && projTransPosting.ProjFundingSource != 0
        join firstOnly RecId from projectDim
            where projectDim.ProjID == projTransPosting.ProjId
        join firstOnly RecId from projDateDim
            where projDateDim.FullDate == projTransPosting.ProjTransDate
        join firstOnly fundingSource
            where fundingSource.RecId == projTransPosting.ProjFundingSource
        join firstOnly RecId from custDim
            where custDim.CustID == fundingSource.CustAccount;

        update_recordset revenueFact
            setting ActualRevenue = -revenueFact.ActualRevenue
        where revenueFact.PostingType != LedgerPostingType::ProjSalesValueOffset;

        while select forupdate revenueFact
        {
            revenueFact.PostingTypeName = enum2str(revenueFact.PostingType);
            revenueFact.doUpdate();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadMeasures</Name>
				<Source><![CDATA[
    private void loadMeasures()
    {
        this.loadCostMeasures();
        this.loadRevenueMeasures();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ttsbegin;
        this.deleteDimensionsAndMeasures();
        this.loadProjectDimension();
        this.loadCustomerDimension();
        this.loadProjCategoryDimension();
        this.loadDateDimension();
        this.loadMeasures();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        ProjectReportingETL etl = new ProjectReportingETL();
        etl.run();
        info('done');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
