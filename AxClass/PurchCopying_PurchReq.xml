<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCopying_PurchReq</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesPurchCopyFactory(SalesPurchCopy::CopyAllHeader, tablestr(PurchReqTable))]
[SalesPurchCopyFactory(SalesPurchCopy::CopyAllLines, tablestr(PurchReqTable))]
public class PurchCopying_PurchReq extends PurchCopyingBase
{
    PurchReqTable                            purchReqTable;
    PurchReqInternalOrgManager_LegalEntity   purchReqInternalOrgManager_LegalEntity;
    PurchReqInternalOrgManager_OperatingUnit purchReqInternalOrgManager_OperatingUnit;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the first record of the <c>TmpFrmVirtual</c> table.
    /// </summary>
    void copyHeader()
    {
        select firstonly tmpFrmVirtualHeader;

        if (tmpFrmVirtualHeader.RecId)
        {
            tmpFrmVirtualHeader.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>PurchReqLine</c> table.
    /// </summary>
    /// <param name="_tmpFrmVirtualLines">
    /// A table buffer of the <c>TmpFrmVirtual</c> table.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The buying legal entity is not valid.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The receiving operating unit is not valid.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The current employee can not submit on behalf of the employee that was entered in the
    /// <c>Requisitioner</c> field.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The line item is not valid.
    /// </exception>
    protected void copyLine(TmpFrmVirtual _tmpFrmVirtualLines)
    {
        PurchReqLine            fromPurchReqLine;
        PurchReqLine            purchReqLine;
        PurchReqLineValidate    purchReqLineValidate = new PurchReqLineValidate();
        ProjInventJournalTransMapForm   projInventJournalTransMapForm;

        purchReqLine.clear();

        purchReqLine.initFromPurchReqTable(purchReqTable);

        purchReqLine.initValue();

        fromPurchReqLine = PurchReqLine::find(_tmpFrmVirtualLines.RecordNo);

        changecompany(fromPurchReqLine.buyingLegalEntity2DataArea())
        {
            purchReqLine.initFromPurchReqLine(fromPurchReqLine);

            if (fromPurchReqLine.isConsumption() && fromPurchReqLine.LineType != PurchReqLineType::Category)
            {
                purchReqLine.salesPurchLineInterface().resetPriceAgreement();
                purchReqLine.setPriceDisc(purchReqLine.inventDim());
                purchReqLine.LineAmount  = purchReqLine.calcLineAmount();
            }

            if (purchReqTable.ProjId && (purchReqLine.ProjId != purchReqTable.ProjId || purchReqLine.ProjIdDataArea != purchReqTable.ProjIdDataArea))
            {
                purchReqLine.ProjId           = purchReqTable.ProjId;
                purchReqLine.ProjIdDataArea   = purchReqTable.ProjIdDataArea;
                purchReqLine.DefaultDimension = 0;
                purchReqLine.setDefaultDimension();
                projInventJournalTransMapForm = ProjInventJournalTransMapForm::construct(purchReqLine);
                projInventJournalTransMapForm.fieldModifiedProjIdPost();
            }

            if (copyQty)
            {
                purchReqLine.PurchQty = _tmpFrmVirtualLines.Qty;
                if (purchReqLine.isConsumption())
                {
                    purchReqLine.LineAmount  = purchReqLine.calcLineAmount();
                }
            }

            if (!purchReqInternalOrgManager_LegalEntity.validate(purchReqLine.Requisitioner, purchReqLine.BuyingLegalEntity))
            {
                throw error(strFmt("@SYS304398", fieldPName(PurchReqLine, BuyingLegalEntity)));
            }
            if (purchReqLine.ReceivingOperatingUnit &&
                !purchReqInternalOrgManager_OperatingUnit.validate(purchReqLine.Requisitioner, purchReqLine.ReceivingOperatingUnit))
            {
                throw error(strFmt("@SYS304398", fieldPName(PurchReqLine, ReceivingOperatingUnit)));
            }
            if (!purchReqLine.checkSubmitOnBehalf())
            {
                throw error(strFmt("@SYS311159", curUserId(), HcmWorker::worker2Name(purchReqLine.Requisitioner)));
            }

            purchReqLineValidate.parmPurchReqLine(purchReqLine);

            if (purchReqLine.isConsumption() && !purchReqLineValidate.validateVendor())
            {
                purchReqLine.VendAccount         = "";
                purchReqLine.VendAccountDataArea = "";
            }

            if (purchReqLineValidate.validateItem())
            {
                purchReqLine.insert();

                purchReqLine.DeliveryName           = fromPurchReqLine.DeliveryName;
                purchReqLine.DeliveryPostalAddress  = fromPurchReqLine.DeliveryPostalAddress;
                purchReqLine.update();

                if (copyMarkup && purchReqLine.LineType == PurchReqLineType::Category)
                {
                    Markup::copy(NoYes::No, fromPurchReqLine, purchReqLine);
                }
            }
            else
            {
                throw error(strFmt("@SYS306982", purchReqLine.LineNum));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records from the <c>PurchReqLine</c> table.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// A purchase requisition line cannot be deleted.
    /// </exception>
    void deleteLines()
    {
        PurchReqLine   purchReqLine;

        while select forupdate purchReqLine where purchReqLine.PurchReqTable == purchReqTable.RecId
        {
            if (purchReqLine.validateDelete())
            {
                purchReqLine.delete(false);
            }
            else
            {
                // Copying has been interrupted.
                throw error("@SYS18722");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    void initParameters(PurchCopyingContract _contract)
    {
        purchReqTable = _contract.parmCallingTable() as PurchReqTable;

        super(_contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        purchReqInternalOrgManager_LegalEntity   = new PurchReqInternalOrgManager_LegalEntity();
        purchReqInternalOrgManager_OperatingUnit = new PurchReqInternalOrgManager_OperatingUnit();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>