<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AxAccountingDistribution</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AxAccountingDistribution extends AxApplicationBase
{
    AccountingDistribution  accountingDistribution;
    MonetaryAmount          monetaryAmountType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountingDistribution</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AccountingDistribution accountingDistribution(AccountingDistribution _accountingDistribution = accountingDistribution)
    {
        if (!prmisDefault(_accountingDistribution))
        {
            this.setCurrentRecordFromExternal(_accountingDistribution);
        }

        return this.currentRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>axOrig</Name>
				<Source><![CDATA[
    public AxInternalBase axOrig()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the current record for the <c>AxBC</c> table class.
    /// </summary>
    /// <param name="_accountingDistribution">
    /// The <c>AxAccountingDistribution</c> record to set.
    /// </param>
    /// <returns>
    /// A record from the <c>Common</c> table for the class.
    /// </returns>
    public Common currentRecord(Common _accountingDistribution = accountingDistribution)
    {
        if (!prmisDefault(_accountingDistribution))
        {
            super(_accountingDistribution);
            accountingDistribution = _accountingDistribution;
        }
        else
        {
            super();
        }

        return accountingDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an empty record for the table that the accounting distribution class relates to.
    /// </summary>
    /// <returns>
    ///    An empty record from the table from the <c>AccountingDistribution</c> table.
    /// </returns>
    protected Common emptyRecord()
    {
        AccountingDistribution localAccountingDistribution;
        ;
        return localAccountingDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AccountingDate parmAccountingDate(AccountingDate _accountingDate = dateNull())
    {
        if (!prmisDefault(_accountingDate))
        {
            this.setField(fieldNum(AccountingDistribution, AccountingDate), _accountingDate);
        }

        return accountingDistribution.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingEvent</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmAccountingEvent(RefRecId _accountingEvent = 0)
    {
        //     To avoid this problem the fields property Visible can be set to NO
        if (!prmisDefault(_accountingEvent))
        {
            this.setField(fieldNum(AccountingDistribution, AccountingEvent), _accountingEvent);
        }

        return accountingDistribution.AccountingEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingLegalEntity</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmAccountingLegalEntity(RefRecId    _accountingLegalEntity = 0)
    {
        if (!prmisDefault(_accountingLegalEntity))
        {
            this.setField(fieldNum(AccountingDistribution, AccountingLegalEntity), _accountingLegalEntity);
        }

        return accountingDistribution.AccountingLegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllocationFactor</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AllocationFactor parmAllocationFactor(AllocationFactor _allocationFactor = 0)
    {
        if (!prmisDefault(_allocationFactor))
        {
            this.setField(fieldNum(AccountingDistribution, AllocationFactor), _allocationFactor);
        }

        return accountingDistribution.AllocationFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountSource</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DistributionAmountSource parmAmountSource(DistributionAmountSource _amountSource = DistributionAmountSource::PrimaryAmount)
    {
        if (!prmisDefault(_amountSource))
        {
            this.setField(fieldNum(AccountingDistribution, AmountSource), _amountSource);
        }

        return accountingDistribution.AmountSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinalizeAccountingEvent</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmFinalizeAccountingEvent(RefRecId _finalizeAccountingEvent = 0)
    {
        //     To avoid this problem the fields property Visible can be set to NO
        if (!prmisDefault(_finalizeAccountingEvent))
        {
            this.setField(fieldNum(AccountingDistribution, FinalizeAccountingEvent), _finalizeAccountingEvent);
        }

        return accountingDistribution.FinalizeAccountingEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimension</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerDimensionAccount parmLedgerDimension(LedgerDimensionAccount _ledgerDimension = 0)
    {
        if (!prmisDefault(_ledgerDimension))
        {
            this.setField(fieldNum(AccountingDistribution, LedgerDimension), _ledgerDimension);
        }

        return accountingDistribution.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMonetaryAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public MonetaryAmount parmMonetaryAmount(MonetaryAmount _monetaryAmount = MonetaryAmount::ExtendedPrice)
    {
        if (!prmisDefault(_monetaryAmount))
        {
            this.setField(fieldNum(AccountingDistribution, MonetaryAmount), _monetaryAmount);
        }

        return accountingDistribution.MonetaryAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMonetaryAmountType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public MonetaryAmount parmMonetaryAmountType(MonetaryAmount _monetaryAmountType = MonetaryAmount::ExtendedPrice)
    {
        if (!prmisDefault(_monetaryAmountType))
        {
            monetaryAmountType  = _monetaryAmountType;
        }

        return monetaryAmountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumber</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AccountingDistributionNumber parmNumber(AccountingDistributionNumber _number = 0)
    {
        if (!prmisDefault(_number))
        {
            this.setField(fieldNum(AccountingDistribution, Number), _number);
        }

        return accountingDistribution.Number;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentDistribution</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmParentDistribution(RefRecId _parentDistribution = 0)
    {
        //     To avoid this problem the fields property Visible can be set to NO
        if (!prmisDefault(_parentDistribution))
        {
            this.setField(fieldNum(AccountingDistribution, ParentDistribution), _parentDistribution);
        }

        return accountingDistribution.ParentDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceDistribution</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmReferenceDistribution(RefRecId _referenceDistribution = 0)
    {
        //     To avoid this problem the fields property Visible can be set to NO
        if (!prmisDefault(_referenceDistribution))
        {
            this.setField(fieldNum(AccountingDistribution, ReferenceDistribution), _referenceDistribution);
        }

        return accountingDistribution.ReferenceDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceRole</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AccountingDistributionReferenceRole parmReferenceRole(AccountingDistributionReferenceRole _referenceRole = 0)
    {
        if (!prmisDefault(_referenceRole))
        {
            this.setField(fieldNum(AccountingDistribution, ReferenceRole), _referenceRole);
        }

        return accountingDistribution.ReferenceRole;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmSourceDocumentHeader(RefRecId _sourceDocumentHeader = 0)
    {
        //     To avoid this problem the fields property Visible can be set to NO
        if (!prmisDefault(_sourceDocumentHeader))
        {
            this.setField(fieldNum(AccountingDistribution, SourceDocumentHeader), _sourceDocumentHeader);
        }

        return accountingDistribution.SourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmSourceDocumentLine(RefRecId _sourceDocumentLine = 0)
    {
        //     To avoid this problem the fields property Visible can be set to NO
        if (!prmisDefault(_sourceDocumentLine))
        {
            this.setField(fieldNum(AccountingDistribution, SourceDocumentLine), _sourceDocumentLine);
        }

        return accountingDistribution.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrency</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str parmTransactionCurrency(str _transactionCurrency = '')
    {
        DictField   dictField;
        ;
        if (!prmisDefault(_transactionCurrency))
        {
            dictField = new DictField(tableNum(AccountingDistribution),fieldNum(AccountingDistribution,TransactionCurrency));
            this.validateInboundCurrencyString(_transactionCurrency,dictField);

            if (this.valueMappingInbound())
            {
                _transactionCurrency = this.axCurrencyCode(_transactionCurrency);
            }

            this.setField(fieldNum(AccountingDistribution, TransactionCurrency), _transactionCurrency);
        }

        if (this.valueMappingOutbound())
        {
            return this.axCurrencyCode(accountingDistribution.TransactionCurrency);
        }
        else
        {
            return accountingDistribution.TransactionCurrency;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Amount parmTransactionCurrencyAmount(Amount _transactionCurrencyAmount = 0)
    {
        if (!prmisDefault(_transactionCurrencyAmount))
        {
            this.setField(fieldNum(AccountingDistribution, TransactionCurrencyAmount), _transactionCurrencyAmount);
        }

        return accountingDistribution.TransactionCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmType</Name>
				<Source><![CDATA[
    [SysObsolete('Please use parmReferenceRole instead', false, 30\11\2017)]
    public AccountRole parmType(AccountRole _type = AccountRole::Adjusting)
    {
        if (!prmisDefault(_type))
        {
            this.setField(fieldNum(AccountingDistribution, Type), _type);
        }

        return accountingDistribution.Type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountingEvent</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setAccountingEvent()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(AccountingDistribution, AccountingEvent)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountingLegalEntity</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setAccountingLegalEntity()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(AccountingDistribution, AccountingLegalEntity)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmountSource</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setAmountSource()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(AccountingDistribution, AmountSource)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerDimension</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setLedgerDimension()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(AccountingDistribution, LedgerDimension)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParentDistribution</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setParentDistribution()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(AccountingDistribution, ParentDistribution)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReferenceDistribution</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setReferenceDistribution()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(AccountingDistribution, ReferenceDistribution)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceDocumentHeader</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setSourceDocumentHeader()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(AccountingDistribution, SourceDocumentHeader)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceDocumentLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setSourceDocumentLine()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(AccountingDistribution, SourceDocumentLine)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls all of the default methods that must be called before a record is inserted or updated.
    /// </summary>
    protected void setTableFields()
    {
        super();

        useMapPolicy = false;

        this.setAccountingLegalEntity();
        this.setTransactionCurrency();
        this.setTransactionCurrencyAmount();
        this.setLedgerDimension();
        this.setAmountSource();
        this.setReferenceDistribution();
        this.setAccountingEvent();
        this.setSourceDocumentHeader();
        this.setSourceDocumentLine();
        this.setParentDistribution();

        useMapPolicy = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionCurrency</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setTransactionCurrency()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(AccountingDistribution, TransactionCurrency)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setTransactionCurrencyAmount()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(AccountingDistribution, TransactionCurrencyAmount)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static AxAccountingDistribution construct()
    {
        return new AxAccountingDistribution();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAccountingDistribution</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AxAccountingDistribution newAccountingDistribution(AccountingDistribution _accountingDistribution)
    {
        AxAccountingDistribution axAccountingDistribution = AxAccountingDistribution::construct();
        ;
        axAccountingDistribution.accountingDistribution(_accountingDistribution);

        return axAccountingDistribution;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>