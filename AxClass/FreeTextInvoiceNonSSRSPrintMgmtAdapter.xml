<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FreeTextInvoiceNonSSRSPrintMgmtAdapter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FreeTextInvoiceNonSSRSPrintMgmtAdapter</c> class used to allow
/// use of print management for non-SSRS (for example, Microsoft Office Excel)
/// invoice report printed from invoice with cust free invoice as source.
/// </summary>
[NonSSRSPrintMgmtAdapterAttribute(PrintMgmtDocumentType::SalesFreeTextInvoice)]
class FreeTextInvoiceNonSSRSPrintMgmtAdapter extends FormLetterNonSSRSPrintMgmtAdapter
{
    SalesFormLetter_FreeText salesFormLetter;
    FreeTextInvoiceContract contract;
    RecordSortedList journalList;
    CustInvoiceJour custInvoiceJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report and sets the print management.
    /// </summary>
    public void initFormLetterReport()
    {
        Args localArgs = this.parmArgs();
        CustInvoiceDuplicateTable_W custInvoiceDuplicateTable_W;
        
        if (localArgs.dataset() == tableNum(CustInvoiceDuplicateTable_W) && localArgs.record() is CustInvoiceDuplicateTable_W)
        {
            custInvoiceDuplicateTable_W = localArgs.record();
            localArgs.record(localArgs.record().custInvoiceJour());
        }

        printCopyOriginal = localArgs.parmEnum();

        if (classIdGet(localArgs.caller()) == classNum(SalesFormLetter_FreeText))
        {
            salesFormLetter = localArgs.caller();
        }

        journalList = localArgs.record() ? FormLetter::createJournalListCopy(localArgs.record()) : localArgs.object();

        if (!journalList || !journalList.first(custInvoiceJour))
        {
            throw error("@SYS26348");
        }

        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::SalesFreeTextInvoice);
        formLetterReport.parmPrintType(printCopyOriginal);

        if (salesFormLetter)
        {
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(salesFormLetter.printerSettingsFormletter(PrintSetupOriginalCopy::Copy)));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(salesFormLetter.printerSettingsFormletter(PrintSetupOriginalCopy::Original)));
            
            if (!salesFormLetter.usePrintManagement())
            {
                var packedExtensionsSettings = salesFormLetter.printManagementExtensionsSettings();
                if (packedExtensionsSettings)
                {
                    var unpackedExtensionsSettings = new NonSSRSPrintMgmtPromptExtensionParameters();
                    if (unpackedExtensionsSettings.unpack(packedExtensionsSettings))
                    {
                        extensionsSettings = unpackedExtensionsSettings;
                    }
                }
            }

            formLetterReport.parmUsePrintMgmtDestinations(salesFormLetter.usePrintManagement());
            formLetterReport.parmUseUserDefinedDestinations(salesFormLetter.parmUseUserDefinedDestinations());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }
        
        if (custInvoiceDuplicateTable_W)
        {
            localArgs.record(custInvoiceDuplicateTable_W);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId2RecID</Name>
				<Source><![CDATA[
    /// <summary>
    /// When printing a proforma Free Text Invoice ID, the custInvoiceJour.InvoiceId is concatenation of # and the custInvoiceJour.RecId
    /// This method will strip the leading # and cast the string to a int64.
    /// </summary>
    /// <param name="_invoiceId">
    /// Id of invoice
    /// </param>
    /// <returns>
    /// RecId of invoice being printed.
    /// </returns>
    protected RecId invoiceId2RecID(InvoiceId _invoiceId)
    {
        return str2int64(subStr(_invoiceId, 2, strLen(_invoiceId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method runs the print report.
    /// </summary>
    protected void runPrintMgmt()
    {
        CustInvoiceTable custInvoiceTable;

        if (!journalList || !journalList.first(custInvoiceJour))
        {
            throw error("@SYS26348");
        }

        do
        {
            if (custInvoiceJour.isProforma())
            {
                // custInvoiceJour.InvoiceId is # + Recid so we must strip the leading #
                select custInvoiceTable
                    where custInvoiceTable.RecId == this.invoiceId2RecID(custInvoiceJour.InvoiceId);
            }
            else
            {
                select custInvoiceTable
                    where custInvoiceTable.InvoiceId == custInvoiceJour.InvoiceId &&
                            custInvoiceTable.InvoiceDate == custInvoiceJour.InvoiceDate &&
                            custInvoiceTable.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup;
            }
            formLetterReport.parmSSRS(PrintMgmtSSRS::NonSSRS);
            formLetterReport.loadPrintSettings(custInvoiceJour, custInvoiceTable, custInvoiceJour.LanguageId);

            this.outputReports();
        }
        while (journalList.next(custInvoiceJour));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used to set record id parameter of record being processed
    /// </summary>
    protected void setRecordId()
    {
        recordId = custInvoiceJour.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>