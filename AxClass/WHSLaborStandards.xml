<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLaborStandards</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLaborStandards</c> class is used to compute estimated time of a work to be finished.
/// </summary>
class WHSLaborStandards
{
    WHSWorkBuildId  workbuildId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateLineTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the estimated time in seconds for a work line to finish.
    /// </summary>
    /// <param name="_workLine">
    /// The work line that estimated time will be calculated for.
    /// </param>
    /// <param name="_standardsLine">
    /// The labor standards line that matches with the work line.
    /// </param>
    /// <returns>
    /// The estimated time in seconds for a work line to finish.
    /// </returns>
    WHSEstimatedTime calculateLineTime(WHSWorkLine              _workLine,
                                       WHSLaborStandardsLine    _standardsLine)
    {
        return this.calculateLineTimeByItem(_workLine.InventQtyWork, _workLine.ItemId, _workLine.InventDimId, _standardsLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLineTimeByItem</Name>
				<Source><![CDATA[
    private WHSEstimatedTime calculateLineTimeByItem(
        InventHandlingQty       _inventHandlingQty,
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        WHSLaborStandardsLine   _standardsLine)
    {
        WHSEstimatedTime    estimatedTime;

        if (_standardsLine.Value != 0)
        {
            Qty                 workQty;
            real                workWeight;
            real                workVolume;
            UnitOfMeasureSymbol handlingUOM = WHSCatchWeightHelper::inventHandlingUnitId(_itemId);

            switch (_standardsLine.LaborMeasurementType)
            {
                case WHSLaborMeasurementType::UOM:
                    // Convert the workline qty to the same unit of measure as the standards line
                    workQty = InventTable::unitConvertValue(_itemId, handlingUOM, _standardsLine.UOM, handlingUOM, _inventHandlingQty, _inventDimId);

                    // Get estimated time in seconds
                    estimatedTime = (workQty * 3600) / _standardsLine.Value;
                    break;

                case WHSLaborMeasurementType::Transactions:
                    estimatedTime = 3600 / _standardsLine.Value;
                    break;

                case WHSLaborMeasurementType::Volume:
                    workQty = WHSCatchWeightHelper::convertInventQuantity(_itemId, handlingUOM, _inventHandlingQty, _inventDimId);
                    workVolume = workQty * InventTable::find(_itemId).UnitVolume;
                    estimatedTime = (workVolume * 3600) / _standardsLine.Value;
                    break;

                case WHSLaborMeasurementType::Weight:
                    workQty = WHSCatchWeightHelper::convertInventQuantity(_itemId, handlingUOM, _inventHandlingQty, _inventDimId);
                    workWeight = workQty * InventTable::find(_itemId).grossWeight();
                    estimatedTime = (workWeight * 3600) / _standardsLine.Value;
                    break;
            }
        }
        return estimatedTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeEstimatedTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the estimated time for a work to be completed.
    /// </summary>
    public void computeEstimatedTime()
    {
        WHSWorkTable            workTable;
        InventLocation          inventLocation;

        while select forUpdate workTable
            where workTable.WorkBuildId == workBuildId
        exists join inventLocation
            where inventLocation.InventLocationId   == workTable.InventLocationId
                  && inventLocation.AllowLaborStandards == NoYes::Yes
        {
            this.computeEstimatedTimeForWorkTable(workTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeEstimatedTimeForWorkTable</Name>
				<Source><![CDATA[
    private void computeEstimatedTimeForWorkTable(WHSWorkTable _workTable)
    {
        WHSWorkLine             workLine;
        WHSLaborStandardsLine   standardsLine;

        while select forUpdate workLine
            where workLine.WorkId == _workTable.WorkId
        {
            // If Pick/Put go to next section, we don't want to clear out the standards line
            if (standardsLine.WorkTypePickPut != WHSWorkTypePickPut::PickPut)
            {
                // Find the labor standard
                standardsLine = this.findLaborStandard(_workTable, workLine);

                if (standardsLine)
                {
                    // If standards line is for Work Units set the time and break out
                    if (standardsLine.LaborMeasurementType == WHSLaborMeasurementType::WorkUnits)
                    {
                        this.setWorkLineForWorkUnitStandards(workLine.WorkId, standardsLine);
                        break;
                    }

                    if (standardsLine.WorkTypePickPut != WHSWorkTypePickPut::PickPut)
                    {
                        // Calculate the amount of time based on labor standards and save on the work line
                        WHSEstimatedTime lineTime = this.calculateLineTime(workLine, standardsLine);

                        ttsBegin;
                        workLine.EstimatedTime = lineTime;
                        workLine.update();
                        ttsCommit;
                    }
                }
            }

            if (standardsLine.WorkTypePickPut == WHSWorkTypePickput::PickPut)
            {
                ttsBegin;
                workLine.EstimatedTime = this.calculateLineTime(workLine, standardsLine);
                workLine.update();
                ttsCommit;

                // If the workLine is a put
                if (workLine.WorkType == WHSWorkType::Put)
                {
                    // Clear the standards line so we can find a new one with the next workLine
                    standardsLine.clear();
                }
            }
        }

        this.updateWorkTableWithEstimatedTime(_workTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkTableWithEstimatedTime</Name>
				<Source><![CDATA[
    private void updateWorkTableWithEstimatedTime(WHSWorkTable _workTable)
    {
        WHSWorkLine workLineTime;

        select Sum(EstimatedTime) from workLineTime
            where workLineTime.WorkId == _workTable.WorkId;

        WHSEstimatedTime totalTime = workLineTime.EstimatedTime;

        // Stamp the totalTime onto the header for the total time the work will take
        ttsBegin;
        _workTable.EstimatedTime = totalTime;
        _workTable.update();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeEstimatedTimeFromTmpWorkLine</Name>
				<Source><![CDATA[
    public WHSEstimatedTime computeEstimatedTimeFromTmpWorkLine(WHSWorkTemplateCode _workTemplateCode, WHSTmpWorkLine _tmpWorkLine)
    {
        WHSWorkClassId workClassId;
        LineNum        lineNum;

        [lineNum, workClassId] = WHSWorkTemplateTable::getWorkTemplateDetail(_workTemplateCode, _tmpWorkLine.WorkType, _tmpWorkLine.WorkTransType);

        WHSLaborStandardsLine standardsLine = this.findLaborStandardByItem(_tmpWorkLine.WorkTransType,
                                                                 _tmpWorkLine.InventLocationId,
                                                                 _tmpWorkLine.ItemId,
                                                                 _tmpWorkLine.WMSLocationId,
                                                                 workClassId,
                                                                 _tmpWorkLine.WorkType);

        WHSEstimatedTime      estimatedTime = this.calculateLineTimeByItem(_tmpWorkLine.InventQty, _tmpWorkLine.ItemId, _tmpWorkLine.InventDimId, standardsLine);

        return estimatedTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLaborStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a labor standard that matches with the work line.
    /// </summary>
    /// <param name="_workTable">
    /// The work header of the line.
    /// </param>
    /// <param name="_workLine">
    /// The work line to be matched.
    /// </param>
    /// <returns>
    /// The labor standards line that matches with work line.
    /// </returns>
    WHSLaborStandardsLine findLaborStandard(WHSWorkTable _workTable,
                                            WHSWorkLine  _workLine)
    {
        return this.findLaborStandardByItem(_workTable.WorkTransType,
                                        _workTable.InventLocationId,
                                        _workLine.ItemId,
                                        _workLine.WMSLocationId,
                                        _workLine.WorkClassId,
                                        _workLine.WorkType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLaborStandardByItem</Name>
				<Source><![CDATA[
    private WHSLaborStandardsLine findLaborStandardByItem(
        WHSWorkTransType _workTransType,
        InventLocationId _inventLocationId,
        ItemId           _itemId,
        WmsLocationId    _wmsLocationId,
        WHSWorkClassId   _workClassId,
        WHSWorkType      _workType)
    {
        WHSLaborStandardsTable  standardsTable;
        WHSLaborStandardsLine   standardsLine;
        WHSLaborStandardsId     laborStandardsId;
        WHSLaborSeqNum          seqNum;

        // Find the labor standards header and save the LaborStandardsId
        while select standardsTable
            where standardsTable.WorkTransType == _workTransType
        {
            QueryRun queryItem = new QueryRun(standardsTable.ItemQuery);
            if (_itemId)
            {
                queryItem.query().dataSourceTable(tableNum(InventTable)).addRange(fieldNum(InventTable, ItemId)).value(queryValue(_itemId));
            }
            else
            {
                QueryFilter range = queryItem.query().findQueryFilter(queryItem.query().dataSourceTable(tableNum(InventTable)), fieldStr(inventTable, ItemId));
                if (range)
                {
                    continue;
                }
            }
            queryItem.next();
            InventTable inventTable = queryItem.get(tableNum(InventTable));

            QueryRun    queryLoc    = new QueryRun(standardsTable.LocationQuery);
            queryLoc.query().dataSourceTable(tableNum(WMSLocation)).addRange(fieldNum(WMSLocation, InventLocationId)).value(queryValue(_inventLocationId));
            if (_wMSLocationId)
            {
                queryLoc.query().dataSourceTable(tableNum(WMSLocation)).addRange(fieldNum(WMSLocation, WMSLocationId)).value(queryValue(_wMSLocationId));
            }
            queryLoc.next();
            WMSLocation wmsLocation = queryLoc.get(tableNum(WMSLocation));

            if (inventTable && wmsLocation)
            {
                laborStandardsId = standardsTable.LaborStandardsId;
                break;
            }
        }

        // Find the labor standards sequence number
        while select standardsLine order by LaborSeqNum
            where standardsLine.LaborStandardsId == laborStandardsId
                && (!standardsLine.WorkClassId
                || standardsLine.WorkClassId == _workClassId)
        {
            seqNum = this.laborStandardsSequenceNumber(standardsLine, _workType);
            
            if (seqNum)
            {
                break;
            }
        }

        standardsLine = WHSLaborStandardsLine::find(laborStandardsId, seqNum);

        return standardsLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>laborStandardsSequenceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the labor standards sequence number based on the <c>WHSWorkType</c>.
    /// </summary>
    /// <param name = "_standardsLine">A <c>WHSLaborStandardsLine</c> buffer.</param>
    /// <param name = "_workType">The <c>WHSWorkType</c> used to find the sequence number.</param>
    /// <returns>The labor standards sequence number.</returns>
    [Hookable]
    protected WHSLaborSeqNum laborStandardsSequenceNumber(WHSLaborStandardsLine _standardsLine, WHSWorkType _workType)
    {
        WHSLaborSeqNum seqNum;

        if (_standardsLine.WorkTypePickPut  == WHSWorkTypePickPut::Pick &&
            _workType                       == WHSWorkType::Pick)
        {
            seqNum = _standardsLine.LaborSeqNum;
        }
        else if (_standardsLine.WorkTypePickPut == WHSWorkTypePickPut::Put &&
                 _workType                      == WHSWorkType::Put)
        {
            seqNum = _standardsLine.LaborSeqNum;
        }
        else if (_standardsLine.WorkTypePickPut == WHSWorkTypePickPut::PickPut &&
                 _workType                      == WHSWorkType::Pick)
        {
            seqNum = _standardsLine.LaborSeqNum;
        }

        return seqNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor method with work build id as parameter.
    /// </summary>
    /// <param name="_workBuildId">
    /// Work build id.
    /// </param>
    void new(WHSWorkBuildId _workBuildId)
    {
        workBuildId = _workBuildId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeLaborStandardsForWorkTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the estimated time for a work to be completed.
    /// </summary>
    /// <param name = "_workTable">The work table to be used for time estimation.</param>
    [Hookable(false)]
    internal static void computeLaborStandardsForWorkTable(WHSWorkTable _workTable)
    {
        InventLocation inventLocation = InventLocation::find(_workTable.InventLocationId);

        if (inventLocation.AllowLaborStandards)
        {
            // The work build id, that we pass in the new method, is used to
            // find all the related work tables and calculate the labor standards
            // for each one of them. There is no need here to initialize the work
            // build id in this case, as we have the work table we nned to update.
            WHSLaborStandards laborStandards = new WHSLaborStandards('');
            laborStandards.computeEstimatedTimeForWorkTable(_workTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkLineForWorkUnitStandards</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets estimated time for each work line when the labor measurement type of the standard is set for work unit.
    /// </summary>
    /// <param name="_workId">
    /// Work id of the work lines.
    /// </param>
    /// <param name="_standardsLine">
    /// Labor standards line that has the labor measurement type set to Work Unit.
    /// </param>
    /// <remarks>
    /// It assumes that each work line will be executed in the same estimated time.
    /// </remarks>
    void setWorkLineForWorkUnitStandards(WHSWorkId              _workId,
                                         WHSLaborStandardsLine  _standardsLine)
    {
        WHSWorkLine workLine;
        WHSWorkLine workLineCount;

        select Count(RecId) from workLineCount
            where workLineCount.WorkId == _workId;
        int64 lines = workLineCount.RecId;

        while select forUpdate workLine
            where workLine.WorkId == _workId
        {
            ttsbegin;
            workline.EstimatedTime = (3600/_standardsLine.Value)/lines;
            workLine.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>