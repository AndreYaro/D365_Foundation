<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgRegistrationForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgRegistrationForm</c> class supports the <c>JmgRegistration</c> form.
/// </summary>
public class JmgRegistrationForm extends JmgRegistrationFormBase
{
    // Maps buttonFunctions to Buttons
    Map buttonFunctionsToButtons;
    // Maps field names to grid fields
    Map fieldNameToGridField;
    // Maps field names to preview pane fields
    Map fieldNameToPreviewField_PROD;
    Map fieldNameToPreviewField_PROJ;
    Map fieldNameToPreviewField_IPC;

    RefRecId          currentActionPaneSetupId;
    JmgGridSetupRecID currentGridSetupId;
    JmgGridSetupRecID currentProdGridSetupId;
    JmgGridSetupRecID currentProjGridSetupId;
    JmgGridSetupRecID currentIpcGridSetupId;

    JmgRegistrationSetup    jmgRegistrationUserSetup;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes a new instance of the <c>JmgRegistrationForm</c> class.
    /// </summary>
    /// <param name="_form">
    ///    A reference to the <c>FormRun</c> object of the <c>JmgRegistrationForm</c>.
    /// </param>
    /// <param name="_enableBundleInteraction">
    ///    Enable bundle to communicate via Infologs
    /// </param>
    public static JmgRegistrationForm construct(FormRun _form, boolean _enableBundleInteraction = true)
    {
        JmgRegistrationForm jmgRegistrationForm = new JmgRegistrationForm(_form, _enableBundleInteraction);
        jmgRegistrationForm.form = _form;
        jmgRegistrationForm.enableBundleInteraction = _enableBundleInteraction;
        return jmgRegistrationForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enabledButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Event for extensions to enable buttons.
    /// </summary>
    /// <param name="_jmgRegistrationForm">
    ///    The caller of the event.
    /// </param>
    /// <param name="_function">
    ///    The button function for which to enable buttons.
    /// </param>
    delegate void enabledButton(JmgRegistrationForm _jmgRegistrationForm, JmgSignInButtonFunction _function)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonEnable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables buttons with the specified button function.
    /// </summary>
    /// <param name="_function">
    ///    The button function for which to enable buttons.
    /// </param>
    private void buttonEnable(JmgSignInButtonFunction _function = JmgSignInButtonFunction::Blank)
    {
        if (_function == JmgSignInButtonFunction::Blank)
        {
            return;
        }
        if (_function == JmgSignInButtonFunction::SelectedJobs          ||
            _function == JmgSignInButtonFunction::IPC                   ||
            _function == JmgSignInButtonFunction::Jobs                  ||
            _function == JmgSignInButtonFunction::Production            ||
            _function == JmgSignInButtonFunction::Project               ||
            _function == JmgSignInButtonFunction::ShowCurrentActivities ||
            _function == JmgSignInButtonFunction::Bundle)
        {
            this.lookupAndEnableButton(JmgSignInButtonFunction::Project,true);
            this.lookupAndEnableButton(JmgSignInButtonFunction::Production,true);
            this.lookupAndEnableButton(JmgSignInButtonFunction::IPC,true);
            this.lookupAndEnableButton(JmgSignInButtonFunction::SelectedJobs,true);
            this.lookupAndEnableButton(JmgSignInButtonFunction::Jobs,true);
            this.lookupAndEnableButton(JmgSignInButtonFunction::ShowCurrentActivities,true);
            this.lookupAndEnableButton(JmgSignInButtonFunction::Bundle,true);
        }

        switch (_function)
        {
            case JmgSignInButtonFunction::Production:
            case JmgSignInButtonFunction::Jobs:
            case JmgSignInButtonFunction::ShowCurrentActivities:
                this.lookupAndEnableButton(_function,false);
                break;
            case JmgSignInButtonFunction::Project:
            case JmgSignInButtonFunction::IPC:
            case JmgSignInButtonFunction::SelectedJobs:
                this.lookupAndEnableButton(_function,false);
                this.lookupAndEnableButton(JmgSignInButtonFunction::Bundle,false);
                break;
            case JmgSignInButtonFunction::Bundle:
                this.lookupAndEnableButton(JmgSignInButtonFunction::Project,!currentBundle.continueBundle());
                this.lookupAndEnableButton(JmgSignInButtonFunction::IPC,!currentBundle.continueBundle());
                this.lookupAndEnableButton(JmgSignInButtonFunction::Assistance,!currentBundle.continueBundle());
                this.lookupAndEnableButton(JmgSignInButtonFunction::Break,!currentBundle.continueBundle());
                this.lookupAndEnableButton(JmgSignInButtonFunction::SwitchCode,!currentBundle.continueBundle());
                break;
            default:
                this.enabledButton(this, _function);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableDisableButtons</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables buttons in action pane, depending on the selected jobs.
    /// </summary>
    void enableDisableButtons(boolean _isFeedbackEnabled)
    {
        boolean areThereJobs  = currentBundle && currentBundle.bundleSize();
        boolean isBudleEnable = (currentBundle && currentBundle.jobsAdded()) ? (this.getCurrJobIdsCon() == conNull() ? false : true) : false;
        this.lookupAndEnableButton(JmgSignInButtonFunction::Approve,areThereJobs);
        this.lookupAndEnableButton(JmgSignInButtonFunction::Bundle,isBudleEnable);
        this.lookupAndEnableButton(JmgSignInButtonFunction::Feedback, _isFeedbackEnabled);
        this.lookupAndEnableButton(JmgSignInButtonFunction::FeedbackComplete, _isFeedbackEnabled);
        this.lookupAndEnableButton(JmgSignInButtonFunction::FeedbackInProgress, _isFeedbackEnabled);
        this.lookupAndEnableButton(JmgSignInButtonFunction::FeedbackStopped, _isFeedbackEnabled);
        this.lookupAndEnableButton(JmgSignInButtonFunction::StopBreak, this.workerHasActiveBreak());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAndEnableButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables a button specified by a button function.
    /// </summary>
    /// <param name="_function">
    /// Button function to look up.
    /// </param>
    /// <param name="_enable">
    /// True to enable button; false to disable button.
    /// </param>
    /// <remarks>
    /// Looks up button function in the map <c>buttonFunctionsToButtons</c> and enables or disables resulting button.
    /// </remarks>
    protected void lookupAndEnableButton(JmgSignInButtonFunction _function, boolean _enable)
    {
        FormControl button = null;

        if (buttonFunctionsToButtons && buttonFunctionsToButtons.exists(_function))
        {
            button = buttonFunctionsToButtons.lookup(_function);
        }

        if (button != null)
        {
            button.enabled(_enable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfSelectedJobChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event to be triggered when the form's active job data source changes.
    /// </summary>
    /// <param name="_jmgJobTable">
    /// The new active job record.
    /// </param>
    public void pmfSelectedJobChanged(JmgJobTable _jmgJobTable)
    {
        if (buttonFunctionsToButtons)
        {
            this.lookupAndEnableButton(JmgSignInButtonFunction::pmfCoByProducts, JmgTermJob::constructJobTable(_jmgJobTable).pmfCanHaveCoProducts());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupPreviewPane</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rearranges fields on the registration form into a preview pane group, depending on the registration setup.
    /// </summary>
    /// <param name="_paneToSetUp">
    /// A group control in which the fields should be moved.
    /// </param>
    /// <param name="_configToSetUpFrom">
    /// A reference to the setup that denotes which fields to move into the preview pane.
    /// </param>
    /// <param name="_mapToUse">
    /// A mapping between field types to actual fields, that is to be used.
    /// </param>
    void setupPreviewPane(FormGroupControl _paneToSetUp, JmgGridSetupRecID _configToSetUpFrom, Map _mapToUse)
    {
        JmgClientFieldTable     fieldTable;
        FormControl             currentControl;
        Object                  controlObject;
        FormGroupControl        hiddenGroup = form.getHiddenPane();
        int                     fieldCounter = 0;

        if (!_configToSetUpFrom)
        {
            return;
        }

        while (_paneToSetUp.controlCount())
        {
            currentControl = _paneToSetUp.controlNum(1);
            hiddenGroup.moveControl(currentControl.id());
        }

        while select FieldName, GridSetupId, GridAppearance, Sequence, Label from fieldTable
            order by Sequence desc
            where   fieldTable.GridSetupId      == _configToSetUpFrom    &&
                    fieldTable.GridAppearance   == JmgGridAppearance::PreviewPane
        {
            if (_mapToUse.exists(fieldTable.FieldName))
            {
                currentControl = _mapToUse.lookup(fieldTable.FieldName);
            }
            else
            {
                currentControl = null;
            }

            if (currentControl != null)
            {
                controlObject = currentControl;

                if (fieldTable.Label)
                {
                    controlObject.label(fieldTable.Label);
                }
                else
                {
                    controlObject.label(enum2str(fieldTable.FieldName));
                }
                _paneToSetUp.moveControl(currentControl.id());
                fieldCounter++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupPreviewPanes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up three different preview panes for Production, Project and Indirect activities jobs.
    /// </summary>
    void setupPreviewPanes()
    {
        FormGroupControl    prodPane    = form.getProdPane();
        FormGroupControl    projPane    = form.getProjPane();
        FormGroupControl    ipcPane     = form.getIPCPane();
        FormGroupControl    hiddenPane  = form.getHiddenPane();

        hiddenPane.visible(false);
        if (!lastRegSetup.RecId)
        {
            return;
        }

        if (lastRegSetup.ProdGridSetupID != currentProdGridSetupId)
        {
            this.setupPreviewPane(prodPane,lastRegSetup.ProdGridSetupID,fieldNameToPreviewField_PROD);
            currentProdGridSetupId = lastRegSetup.ProdGridSetupID;
        }

        if (lastRegSetup.ProjGridSetupID != currentProjGridSetupId)
        {
            this.setupPreviewPane(projPane,lastRegSetup.ProjGridSetupID,fieldNameToPreviewField_PROJ);
            currentProjGridSetupId = lastRegSetup.ProjGridSetupID;
        }

        if (lastRegSetup.ipcGridSetupID!= currentIpcGridSetupId)
        {
            this.setupPreviewPane(ipcPane,lastRegSetup.ipcGridSetupID,fieldNameToPreviewField_IPC);
            currentIpcGridSetupId = lastRegSetup.ipcGridSetupID;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existingTabs</Name>
				<Source><![CDATA[
    private List existingTabs(FormActionPaneControl _actionPane)
    {
        List result = new List(Types::Class);

        for (int i = 1; i <= _actionPane.controlCount(); i++)
        {
            if (_actionPane.controlNum(i) is FormActionPaneTabControl)
            {
                result.addEnd(_actionPane.controlNum(i));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearActionPaneTab</Name>
				<Source><![CDATA[
    private void clearActionPaneTab(FormActionPaneTabControl _tab)
    {
        FormDesign design = _tab.formRun().design();

        for (int i = _tab.controlCount(); i >= 1; i--)
        {
            FormControl oldControl = _tab.controlNum(i);
            design.removeControl(oldControl.id());
        }

        // We are reusing a tab that may have been marked as not visible before. We need to mark it visible again.
        _tab.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupActionPane</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the layout of the action pane to match the button configuration setup.
    /// </summary>
    /// <param name="_jmgRegistrationSetup">
    ///    The registration form configuration, which describes how to set up the action pane.
    /// </param>
    void setupActionPane(JmgRegistrationSetup _jmgRegistrationSetup)
    {
        FormActionPaneControl       actionPane;
        FormActionPaneTabControl    currentActionPaneTab;
        FormButtonGroupControl      currentButtonGroup;
        FormControl                 currentButton;
        FormDropDialogButtonControl formDropDialogButtonControl;
        FormFunctionButtonControl   formFunctionButtonControl;
        FormButtonControl           formButtonControl;
        FormDesign                  formDesign = form.design();

        int                         currentButtonCount;
        int                         currentTabCount;
        int                         currentButtonGroupCount;
        str                         menuItemName;
        JmgRegistrationButtonTable  jmgRegistrationButtonTable;
        boolean                     isDropDialog;

        str                         controlText;

        actionPane  = form.getActionPane();
        actionPane.visible(this.isActionPaneVisible());
        actionPane.enabled(true);
        if (currentActionPaneSetupId == _jmgRegistrationSetup.ActionPaneSetupID)
        {
            return;
        }
        currentActionPaneSetupId = _jmgRegistrationSetup.ActionPaneSetupID;

        List previousTabs = this.existingTabs(actionPane);
        ListEnumerator previousTabsEnum = previousTabs.getEnumerator();

        buttonFunctionsToButtons    = new Map(Types::Enum, Types::Class);
        currentTabCount             = 0;
        currentButtonGroupCount     = 0;
        while select ButtonSetupType, Label, ButtonFunction
            from  jmgRegistrationButtonTable
            order by Sequence
            where jmgRegistrationButtonTable.ActionPaneSetupID    == _jmgRegistrationSetup.ActionPaneSetupID
        {
            switch (jmgRegistrationButtonTable.ButtonSetupType)
            {
                case JmgButtonSetupType::Tab:
                    currentTabCount++;
                    currentButtonGroupCount = 0;
                    
                    str tabName = 'tab'+int2str(currentTabCount);

                    if (previousTabsEnum.moveNext())
                    {
                        currentActionPaneTab = previousTabsEnum.current();

                        // Iterate over all the existing tabs until we find one matching our naming convention. For compatibility reasons, we can't put our butons on tabs that don't match the convention (e.g. the system defined "Options" tab page),
                        // so we'll need to hide them from the form.
                        while (currentActionPaneTab && currentActionPaneTab.name() != tabName)
                        {
                            // We can't just delete the tab. If the client already chose it for displaying, it would get confused and subsequent calls to set the active tab wouldn't work.
                            currentActionPaneTab.visible(false);

                            if (previousTabsEnum.moveNext())
                            {
                                currentActionPaneTab = previousTabsEnum.current();
                            }
                            else
                            {
                                currentActionPaneTab = null;
                            }
                        }

                        if (currentActionPaneTab)
                        {
                            // A tab following our naming convention exists. Remove all the buttons from it so that we can populate it with the right ones.
                            this.clearActionPaneTab(currentActionPaneTab);
                        }
                        else
                        {
                            // Need to create a new tab.
                            currentActionPaneTab = actionPane.addControl(FormControlType::ActionPaneTab, tabName);
                        }
                    }
                    else
                    {
                        currentActionPaneTab = actionPane.addControl(FormControlType::ActionPaneTab, tabName);
                    }
                    currentActionPaneTab.hideIfEmpty(false);
                    controlText = ((jmgRegistrationButtonTable.Label == '') ? "@SYS55406" : jmgRegistrationButtonTable.Label);
                    currentActionPaneTab.caption(controlText);
                    currentActionPaneTab.visible(true);
                    currentActionPaneTab.enabled(true);
                    break;
                case JmgButtonSetupType::ButtonGroup:
                    if (currentActionPaneTab)
                    {
                        currentButtonGroupCount++;
                        currentButtonCount = 0;
                        currentButtonGroup  = currentActionPaneTab.addControl(FormControlType::ButtonGroup, 'bgrp'+int2str(currentTabCount)+int2str(currentButtonGroupCount)/*guid2str(newguid()), currentButtonGroup*/);
                        currentButtonGroup.visible(true);
                        currentButtonGroup.enabled(true);
                        currentButtonGroup.caption(jmgRegistrationButtonTable.Label ? jmgRegistrationButtonTable.Label : "@SYS55406");
                    }
                    break;
                case JmgButtonSetupType::Button:
                    if (currentButtonGroup && jmgRegistrationButtonTable.ButtonFunction != JmgSignInButtonFunction::Blank)
                    {
                        menuItemName = jmgMESClientSelection::buttonFunction2MenuItemStr(jmgRegistrationButtonTable.ButtonFunction);
                        // menuItemName will be empty for DEL_ functions after upgrade
                        if (!menuItemName)
                        {
                            continue;
                        }
                        currentButtonCount++;
                        isDropDialog = JmgRegistrationForm::isDropDialog(menuItemName);
                        currentButton = currentButtonGroup.addControl((isDropDialog ? FormControlType::DropDialogButton : FormControlType::MenuFunctionButton),currentButtonGroup.name()+'control'+int2str(currentButtonCount));
                        currentButton.visible(true);
                        currentButton.enabled(true);

                        controlText = ((jmgRegistrationButtonTable.Label == '') ? enum2str(jmgRegistrationButtonTable.ButtonFunction) : jmgRegistrationButtonTable.Label);
                        switch (classIdGet(currentButton))
                        {
                            case classNum(FormDropDialogButtonControl):
                                formDropDialogButtonControl = currentButton;
                                formDropDialogButtonControl.big(true);
                                formDropDialogButtonControl.text(controlText);
                                formDropDialogButtonControl.multiSelect(true);
                                formDropDialogButtonControl.menuItemName(jmgMESClientSelection::buttonFunction2MenuItemStr(jmgRegistrationButtonTable.ButtonFunction,false));
                                this.registerButton(jmgRegistrationButtonTable.ButtonFunction, formDropDialogButtonControl);
                                this.rememberButton(formDropDialogButtonControl, jmgRegistrationButtonTable.ButtonFunction);
                                break;
                            case classNum(FormButtonControl):
                                formButtonControl = currentButton;
                                formButtonControl.big(true);
                                formButtonControl.text(controlText);
                                formButtonControl.multiSelect(true);
                                this.rememberButton(formButtonControl, jmgRegistrationButtonTable.ButtonFunction);
                                this.registerButton(jmgRegistrationButtonTable.ButtonFunction, formButtonControl);
                                break;
                            case classNum(FormFunctionButtonControl):
                                formFunctionButtonControl = currentButton;
                                formFunctionButtonControl.text(controlText);
                                formFunctionButtonControl.big(true);
                                formFunctionButtonControl.multiSelect(true);
                                formFunctionButtonControl.menuItemName(jmgMESClientSelection::buttonFunction2MenuItemStr(jmgRegistrationButtonTable.ButtonFunction,false));
                                formFunctionButtonControl.menuItemType(jmgMESClientSelection::buttonFunction2MenuItemType(jmgRegistrationButtonTable.ButtonFunction));
                                formFunctionButtonControl.normalResource(JmgRegistrationForm::imageFromMenuItem(jmgMESClientSelection::buttonFunction2MenuItemStr(jmgRegistrationButtonTable.ButtonFunction)));
                                this.registerButton(jmgRegistrationButtonTable.ButtonFunction, formFunctionButtonControl);
                                this.rememberButton(formFunctionButtonControl, jmgRegistrationButtonTable.ButtonFunction);
                                break;
                        }
                    }
                    break;
            }
        }

        // The previous setup used more tabs than the current one. We need to hide the excessive ones.
        while(previousTabsEnum.moveNext())
        {
            FormActionPaneTabControl unusedTabPage = previousTabsEnum.current();
            unusedTabPage.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Maps a button function to a <c>FormButtonControl</c> control.
    /// </summary>
    /// <param name="_function">
    ///    The button function to map to a button.
    /// </param>
    /// <param name="_button">
    ///    The <c>FormControl</c> object to which the button function is mapped.
    /// </param>
    private void registerButton(JmgSignInButtonFunction _function, FormControl _button)
    {
        if (!buttonFunctionsToButtons)
        {
            buttonFunctionsToButtons = new Map(Types::Enum, Types::Class);
        }
        buttonFunctionsToButtons.insert(_function, _button);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeWrkCtr</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prompts the user to enter the resource for which to display jobs.
    /// </summary>
    public void changeWrkCtr()
    {
        form.promptForResource();
        this.showProd();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCurrentActivities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Tells the registration form to filter the job list to show the current activities.
    /// </summary>
    public void showCurrentActivities()
    {
        JmgSignInButtonFunction jmgSignInButtonFunction;
        JmgTermJob              jobTemp;

        form.showCurrentActivities();
        this.buttonEnable(JmgSignInButtonFunction::ShowCurrentActivities);

        jobTemp = this.getFirstActiveJob();

        if (jobTemp.isValidJobId())
        {
            switch (jobTemp.module())
            {
                case JmgModuleEnum::IPC:
                    jmgSignInButtonFunction = JmgSignInButtonFunction::IPC;
                    break;

                case JmgModuleEnum::PROD:
                    jmgSignInButtonFunction = JmgSignInButtonFunction::Production;
                    break;

                case JmgModuleEnum::PROJ:
                    jmgSignInButtonFunction = JmgSignInButtonFunction::Project;
                    break;

                default:
                    jmgSignInButtonFunction = JmgSignInButtonFunction::ShowCurrentActivities;
            }
        }
        else
        {
            jmgSignInButtonFunction = JmgSignInButtonFunction::ShowCurrentActivities;
        }

        this.setupGrid(jmgSignInButtonFunction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showGridGroup</Name>
				<Source><![CDATA[
    private void showGridGroup(boolean _visible, FormGridControl _grid = form.getGrid())
    {
        _grid.visible(_visible);
        form.setupPreviewTab(lastRegSetup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showIPC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the job list grid to display IPC jobs.
    /// </summary>
    public void showIPC()
    {
        form.showIPC();
        this.buttonEnable(JmgSignInButtonFunction::IPC);
        this.setupGrid(JmgSignInButtonFunction::IPC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showProd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the job list grid to display production jobs.
    /// </summary>
    public void showProd()
    {
        form.showProductionJobs();
        this.buttonEnable(JmgSignInButtonFunction::Production);
        this.setupGrid(JmgSignInButtonFunction::Production);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showProj</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the job list grid to display project jobs.
    /// </summary>
    public void showProj()
    {
        form.showProject();
        this.buttonEnable(JmgSignInButtonFunction::Project);
        this.setupGrid(JmgSignInButtonFunction::Project);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showSelectedJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the job list grid to show the jobs currently selected by the worker.
    /// </summary>
    public void showSelectedJobs()
    {
        if (currentBundle)
        {
            form.showSelectedJobs();
            this.buttonEnable(JmgSignInButtonFunction::SelectedJobs);
            this.setupGrid(JmgSignInButtonFunction::SelectedJobs);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the job list grid to display scheduled jobs.
    /// </summary>
    void showJobs()
    {
        form.showJobs();
        this.buttonEnable(JmgSignInButtonFunction::Jobs);
        this.setupGrid(JmgSignInButtonFunction::Jobs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeGridCaption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the caption on the specified tab control.
    /// </summary>
    /// <param name="_caption">
    ///    The text to set as a caption.
    /// </param>
    /// <param name="_ftpc">
    ///    The <c>FormTabPageControl</c> control on which to update the caption.
    /// </param>
    public void changeGridCaption(str _caption, FormTabPageControl _ftpc)
    {
        _ftpc.caption(_caption);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActionPaneVisible</Name>
				<Source><![CDATA[
    public boolean isActionPaneVisible()
    {
        return !noButtonsOnConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>signInStartPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the layout of the registration form to display the
    /// start page, which is setup in the registration form configuration.
    /// </summary>
    /// <param name="_jmgRegistrationSetup">
    /// The registration form configuration, which refers to the start page to display.
    /// </param>
    void signInStartPage(JmgRegistrationSetup _jmgRegistrationSetup)
    {
        switch (_jmgRegistrationSetup.SignInStartPage)
        {
            case JmgSignInStartPage::Jobs:
                this.showJobs();
                break;
            case JmgSignInStartPage::Project:
                this.showProj();
                break;
            case JmgSignInStartPage::IPC:
                this.showIPC();
                break;
            case JmgSignInStartPage::CurrentActivities:
                this.showCurrentActivities();
                break;
            case JmgSignInStartPage::Production:
            default:
                this.showProd();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGridSetupIdDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for getting the <c>GridSetupId</c> for a button function.
    /// </summary>
    /// <param name = "_buttonFunction">An enumeration value denoting which grid setup should be used.</param>
    /// <param name = "_lastRegSetup">A record with the possible values to pick from.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> object for returning the <c>GridSetupId</c>.</param>
    delegate void getGridSetupIdDelegate(JmgSignInButtonFunction _buttonFunction, JmgRegistrationSetup _lastRegSetup, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupGrid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rearranges fields on the registration form into a grid, depending on the registration setup.
    /// </summary>
    /// <param name="_buttonFunction">
    /// An enumeration value denoting which grid setup should be used.
    /// </param>
    private void setupGrid(JmgSignInButtonFunction _buttonFunction)
    {
        FormGridControl     grid;
        FormGridControl     hiddenGrid;
        FormControl         currentControl;
        Object              controlObject;
        JmgGridSetupRecID   gridSetupId;

        JmgClientFieldTable fieldTable;

        grid = form.getGrid();

        if (!lastRegSetup.RecId)
        {
            this.showGridGroup(false, grid);
            return;
        }

        switch (_buttonFunction)
        {
            case JmgSignInButtonFunction::Production :
                gridSetupId = lastRegSetup.ProdGridSetupID;
                break;
            case JmgSignInButtonFunction::Project :
                gridSetupId = lastRegSetup.ProjGridSetupID;
                break;
            case JmgSignInButtonFunction::IPC :
                gridSetupId = lastRegSetup.ipcGridSetupID;
                break;
            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.getGridSetupIdDelegate(_buttonFunction, lastRegSetup, result);

                if (result.hasResult())
                {
                    gridSetupId = result.result();
                }
                else
                {
                    gridSetupId = lastRegSetup.ProdGridSetupID;
                }
                break;
        }

        if (gridSetupId == 0)
        {
            this.showGridGroup(false, grid);
            return;
        }

        this.showGridGroup(true, grid);

        // do not setup grid again if it is already set up
        if (gridSetupId == currentGridSetupId)
        {
            return;
        }
        currentGridSetupId = gridSetupId;

        hiddenGrid  = form.getHiddenGrid();
        while (grid.controlCount())
        {
            currentControl = grid.controlNum(1);
            hiddenGrid.moveControl(currentControl.id());
        }
        while select FieldName, GridSetupId, GridAppearance, Sequence, Label from fieldTable
            order by Sequence desc
            where   fieldTable.GridSetupId      == gridSetupId                  &&
                    fieldTable.GridAppearance   == JmgGridAppearance::Column
        {
            if (fieldNameToGridField.exists(fieldTable.FieldName))
            {
                currentControl = fieldNameToGridField.lookup(fieldTable.FieldName);
            }
            else
            {
                currentControl = null;
            }

            if (currentControl != null)
            {
                controlObject = currentControl;

                if (fieldTable.Label)
                {
                    controlObject.label(fieldTable.Label);
                }
                else
                {
                    controlObject.label(enum2str(fieldTable.FieldName));
                }
                grid.moveControl(controlObject.id());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerAllGridFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers all fields in a grid control to a map.
    /// </summary>
    /// <param name="_fgc">
    /// Grid control with the fields that should be registered.
    /// </param>
    public void registerAllGridFields(FormGridControl _fgc)
    {
        int         i;
        FormControl currentControl;

        for (i = 1; i <= _fgc.controlCount(); i++)
        {
            currentControl = _fgc.controlNum(i);

            Set set = new Set(Types::Enum);
            this.mapGridFieldControlToFieldNameDelegate(currentControl.name(), set);

            SetEnumerator enum = set.getEnumerator();
            while (enum.moveNext())
            {
                this.registerGridField(enum.current(), currentControl);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapGridFieldControlToFieldNameDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for mapping a grid field control to <c>JmgFieldName</c> enumerations.
    /// </summary>
    /// <param name = "_controlName">The name of the control to map.</param>
    /// <param name = "_fieldNames">A collection where the mapped enumerations can be returned</param>
    delegate void mapGridFieldControlToFieldNameDelegate(FormControlName _controlName, Set _fieldNames)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapGridFieldControlToFieldNameDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate handler for mapping a grid field control to <c>JmgFieldName</c> enumerations.
    /// </summary>
    /// <param name = "_controlName">The name of the control to map.</param>
    /// <param name = "_fieldNames">A collection where the mapped enumerations can be returned</param>
    [SubscribesTo(classStr(JmgRegistrationForm), delegateStr(JmgRegistrationForm, mapGridFieldControlToFieldNameDelegate))]
    public static void mapGridFieldControlToFieldNameDelegateHandler(FormControlName _controlName, Set _fieldNames)
    {
        switch (_controlName)
        {
            case formControlStr(JmgRegistration,locked):
                _fieldNames.add(JmgFieldName::Lock);
                break;
            case formControlStr(JmgRegistration,JmgJobTable_ModuleRefId):
                _fieldNames.add(JmgFieldName::ReferenceID);
                _fieldNames.add(JmgFieldName::ProdOrder);
                _fieldNames.add(JmgFieldName::ProjectID);
                break;
            case formControlStr(JmgRegistration,JmgJobTable_Description):
                _fieldNames.add(JmgFieldName::Description);
                break;
            case formControlStr(JmgRegistration,itemName):
                _fieldNames.add(JmgFieldName::ItemName);
                break;
            case formControlStr(JmgRegistration,JmgJobTable_OprNum):
                _fieldNames.add(JmgFieldName::OprNum);
                break;
            case formControlStr(JmgRegistration,JmgJobTable_Type):
                _fieldNames.add(JmgFieldName::JobType);
                break;
            case formControlStr(JmgRegistration,startedQuantity):
                _fieldNames.add(JmgFieldName::Quantity);
                break;
            case formControlStr(JmgRegistration,startQty):
                _fieldNames.add(JmgFieldName::startQty);
                break;
            case formcontrolstr(JmgRegistration,pdsCWStartedQuantity):
                _fieldNames.add(JmgFieldName::PdsCWQuantity);
                break;
            case formcontrolstr(JmgRegistration,pdsCWStartQty):
                _fieldNames.add(JmgFieldName::PdsCWStartQty);
                break;
            case formControlStr(JmgRegistration,jobStatus):
                _fieldNames.add(JmgFieldName::Status);
                break;
            case formControlStr(JmgRegistration,JmgJobTable_WrkCtrId):
                _fieldNames.add(JmgFieldName::WrkCtrId);
                break;
            case formControlStr(JmgRegistration,JmgJobTable_EmplId):
                _fieldNames.add(JmgFieldName::Employees);
                break;
            case formControlStr(JmgRegistration,grid_FromDate):
                _fieldNames.add(JmgFieldName::FromDate);
                break;
            case formControlStr(JmgRegistration,grid_FromTime):
                _fieldNames.add(JmgFieldName::FromTime);
                break;
            case formControlStr(JmgRegistration,grid_ToTime):
                _fieldNames.add(JmgFieldName::ToTime);
                break;
            case formControlStr(JmgRegistration,grid_ToDate):
                _fieldNames.add(JmgFieldName::ToDate);
                break;
            case formControlStr(JmgRegistration,grid_JobId):
                _fieldNames.add(JmgFieldName::JobID);
                break;
            case formControlStr(JmgRegistration,grid_OprActId):
                _fieldNames.add(JmgFieldName::OperationActivity);
                break;
            case formControlStr(JmgRegistration,grid_ItemId):
                _fieldNames.add(JmgFieldName::ItemNumber);
                break;
            case formControlStr(JmgRegistration,grid_Sequence):
                _fieldNames.add(JmgFieldName::Sequence);
                break;
            case formControlStr(JmgRegistration,grid_badQuantity):
                _fieldNames.add(JmgFieldName::BadQty);
                break;
            case formControlStr(JmgRegistration,grid_goodQuantity):
                _fieldNames.add(JmgFieldName::goodQty);
                break;
            case formControlStr(JmgRegistration,grid_remainingQuantity):
                _fieldNames.add(JmgFieldName::RemainingQty);
                break;
            case formControlStr(JmgRegistration,grid_prevOpr):
                _fieldNames.add(JmgFieldName::prevOpr);
                break;
            case formControlStr(JmgRegistration,grid_nextOpr):
                _fieldNames.add(JmgFieldName::NextOpr);
                break;
            case formControlStr(JmgRegistration,grid_prevJobStatus):
                _fieldNames.add(JmgFieldName::prevOprJobStatus);
                break;
            case formControlStr(JmgRegistration,grid_prevOperationQtyGood):
                _fieldNames.add(JmgFieldName::prevOprQtyGood);
                break;
            case formControlStr(JmgRegistration,grid_projStage):
                _fieldNames.add(JmgFieldName::projStatus);
                break;
            case formControlStr(JmgRegistration,grid_projStartDate):
                _fieldNames.add(JmgFieldName::projStartDate);
                break;
            case formControlStr(JmgRegistration,grid_imageModule):
                _fieldNames.add(JmgFieldName::imageModule);
                break;
            case formControlStr(JmgRegistration,grid_ProjSiblings):
                _fieldNames.add(JmgFieldName::projSiblings);
                break;
            case formControlStr(JmgRegistration,grid_ProjSubProjs):
                _fieldNames.add(JmgFieldName::projSubProjs);
                break;
            case formControlStr(JmgRegistration,grid_ProjParent):
                _fieldNames.add(JmgFieldName::projParent);
                break;
            case formControlStr(JmgRegistration,grid_reqQty):
                _fieldNames.add(JmgFieldName::reqQty);
                break;
            case formcontrolstr(JmgRegistration,grid_pdsCWReqQty):
                _fieldNames.add(JmgFieldName::PdsCWReqQty);
                break;
            case formControlStr(JmgRegistration,grid_ResourceName):
                _fieldNames.add(JmgFieldName::ResourceName);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerAllPreviewFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers all fields in a group control to a map.
    /// </summary>
    /// <param name="_fgc">
    /// Group control with the fields that should be registered.
    /// </param>
    public void registerAllPreviewFields(FormGroupControl _fgc)
    {
        int             i;
        FormControl     currentControl;
        str             controlName;
        JmgModuleEnum   module;
        int             underScorePos;

        for (i = 1; i <= _fgc.controlCount(); i++)
        {
            currentControl  = _fgc.controlNum(i);
            controlName     = currentControl.name();
            underscorePos   = strFind(controlName,'_',7,2);
            controlName     = subStr(controlName,1,underscorePos-1);
            module          = controlName == 'preProd' ? JmgModuleEnum::PROD: controlName == 'preProj' ? JmgModuleEnum::PROJ: JmgModuleEnum::IPC;
            controlName     = currentControl.name();

            Set set = new Set(Types::Enum);
            this.mapPreviewFieldControlToFieldNameDelegate(currentControl.name(), set);

            SetEnumerator enum = set.getEnumerator();
            while (enum.moveNext())
            {
                this.registerPreviewField(enum.current(), currentControl, module);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPreviewFieldControlToFieldNameDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for mapping a preview field control to <c>JmgFieldName</c> enumerations.
    /// </summary>
    /// <param name = "_controlName">The name of the control to map.</param>
    /// <param name = "_fieldNames">A collection where the mapped enumerations can be returned</param>
    delegate void mapPreviewFieldControlToFieldNameDelegate(FormControlName _controlName, Set _fieldNames)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPreviewFieldControlToFieldNameDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate handler for mapping a preview field control to <c>JmgFieldName</c> enumerations.
    /// </summary>
    /// <param name = "_controlName">The name of the control to map.</param>
    /// <param name = "_fieldNames">A collection where the mapped enumerations can be returned</param>
    [SubscribesTo(classStr(JmgRegistrationForm), delegateStr(JmgRegistrationForm, mapPreviewFieldControlToFieldNameDelegate))]
    public static void mapPreviewFieldControlToFieldNameDelegateHandler(FormControlName _controlName, Set _fieldNames)
    {
        switch (_controlName)
        {
            case formControlStr(JmgRegistration,preProd_prodOrder):
                _fieldNames.add(JmgFieldName::ProdOrder);
                break;
            case formControlStr(JmgRegistration,preProd_OprActId):
                _fieldNames.add(JmgFieldName::OperationActivity);
                break;
            case formControlStr(JmgRegistration,preProd_Type):
            case formControlStr(JmgRegistration,preProj_Type):
            case formControlStr(JmgRegistration,preIPC_Type):
                _fieldNames.add(JmgFieldName::JobType);
                break;
            case formControlStr(JmgRegistration,preProd_reqQty):
                _fieldNames.add(JmgFieldName::reqQty);
                break;
            case formControlStr(JmgRegistration,preProd_jobStatus):
            case formControlStr(JmgRegistration,preProj_jobStatus):
            case formControlStr(JmgRegistration,preIPC_jobStatus):
                _fieldNames.add(JmgFieldName::Status);
                break;
            case formControlStr(JmgRegistration,preProd_JobId):
            case formControlStr(JmgRegistration,preProj_jobId):
                _fieldNames.add(JmgFieldName::JobID);
                break;
            case formControlStr(JmgRegistration,preProd_Description):
            case formControlStr(JmgRegistration,preProj_Description):
            case formControlStr(JmgRegistration,preIPC_Description):
                _fieldNames.add(JmgFieldName::Description);
                break;
            case formControlStr(JmgRegistration,preProd_itemName):
            case formControlStr(JmgRegistration,preProj_itemName):
                _fieldNames.add(JmgFieldName::ItemName);
                break;
            case formControlStr(JmgRegistration,preProd_WrkCtrId):
            case formControlStr(JmgRegistration,preProj_WrkCtrId):
                _fieldNames.add(JmgFieldName::WrkCtrId);
                break;
            case formControlStr(JmgRegistration,preProd_emplWorking):
            case formControlStr(JmgRegistration,preProj_emplWorking):
                _fieldNames.add(JmgFieldName::Employees);
                break;
            case formControlStr(JmgRegistration,preProd_badQuantity):
                _fieldNames.add(JmgFieldName::BadQty);
                break;
            case formControlStr(JmgRegistration,preProd_goodQuantity):
                _fieldNames.add(JmgFieldName::goodQty);
                break;
            case formControlStr(JmgRegistration,preProd_remainingQuantity):
                _fieldNames.add(JmgFieldName::RemainingQty);
                break;
            case formControlStr(JmgRegistration,preProd_FromDate):
            case formControlStr(JmgRegistration,preProj_FromDate):
                _fieldNames.add(JmgFieldName::FromDate);
                break;
            case formControlStr(JmgRegistration,preProd_FromTime):
                _fieldNames.add(JmgFieldName::FromTime);
                break;
            case formControlStr(JmgRegistration,preProd_ToDate):
            case formControlStr(JmgRegistration,preProj_ToDate):
                _fieldNames.add(JmgFieldName::ToDate);
                break;
            case formControlStr(JmgRegistration,preProd_ToTime):
                _fieldNames.add(JmgFieldName::ToTime);
                break;
            case formControlStr(JmgRegistration,preProd_previousOperation):
                _fieldNames.add(JmgFieldName::prevOpr);
                break;
            case formControlStr(JmgRegistration,preProd_nextOperation):
                _fieldNames.add(JmgFieldName::NextOpr);
                break;
            case formControlStr(JmgRegistration,preProd_prevJobStatus):
                _fieldNames.add(JmgFieldName::prevOprJobStatus);
                break;
            case formControlStr(JmgRegistration,preProd_prevOperationQtyGood):
                _fieldNames.add(JmgFieldName::prevOprQtyGood);
                break;
            case formControlStr(JmgRegistration,preProd_itemNumber):
            case formControlStr(JmgRegistration,preProj_itemNumber):
                _fieldNames.add(JmgFieldName::ItemNumber);
                break;
            case formControlStr(JmgRegistration,preProd_OprNum):
                _fieldNames.add(JmgFieldName::OprNum);
                break;
            case formControlStr(JmgRegistration,preProd_startedQuantity):
                _fieldNames.add(JmgFieldName::Quantity);
                break;
            case formControlStr(JmgRegistration,preProj_ProjectId):
                _fieldNames.add(JmgFieldName::ProjectID);
                break;
            case formControlStr(JmgRegistration,preProj_showProjStatus):
                _fieldNames.add(JmgFieldName::projStatus);
                break;
            case formControlStr(JmgRegistration,preProj_showProjParent):
                _fieldNames.add(JmgFieldName::projParent);
                break;
            case formControlStr(JmgRegistration,preProj_showProjSubProjs):
                _fieldNames.add(JmgFieldName::projSubProjs);
                break;
            case formControlStr(JmgRegistration,preProj_showProjSiblings):
                _fieldNames.add(JmgFieldName::projSiblings);
                break;
            case formControlStr(JmgRegistration,preIPC_ModuleRefId):
                _fieldNames.add(JmgFieldName::ReferenceID);
                break;
            case formControlStr(JmgRegistration,preProd_RouteImage):
                _fieldNames.add(JmgFieldName::showRoute);
                break;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPreviewField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers a single fields to one of three maps.
    /// </summary>
    /// <param name="_fieldName">
    /// An enumeration value denoting which type of field is being registered.
    /// </param>
    /// <param name="_field">
    /// The field control that is being registered.
    /// </param>
    /// <param name="_module">
    /// An enumeration value denoting which module the field relates to.
    /// </param>
    /// <remarks>
    /// If the module parameter has the value <c>JmgModuleEnum::PROD</c>, the control will be registered in the map <c>fieldNameToPreviewField_PROD</c>.
    /// If the module parameter has the value <c>JmgModuleEnum::PROJ</c>, the control will be registered in the map <c>fieldNameToPreviewField_PROJ</c>.
    /// If the module parameter has the value <c>JmgModuleEnum::IPC</c>, the control will be registered in the map <c>fieldNameToPreviewField_IPC</c>.
    /// </remarks>
    private void registerPreviewField(JmgFieldName _fieldName, FormControl _field, JmgModuleEnum _module)
    {
        if (!fieldNameToPreviewField_PROD || !fieldNameToPreviewField_PROJ || !fieldNameToPreviewField_IPC)
        {
            fieldNameToPreviewField_PROD = new Map(Types::Enum, Types::Class);
            fieldNameToPreviewField_PROJ = new Map(Types::Enum, Types::Class);
            fieldNameToPreviewField_IPC = new Map(Types::Enum, Types::Class);
        }

        switch (_module)
        {
            case JmgModuleEnum::PROD :
                fieldNameToPreviewField_PROD.insert(_fieldName, _field);
                break;
            case JmgModuleEnum::PROJ :
                fieldNameToPreviewField_PROJ.insert(_fieldName, _field);
                break;
            case JmgModuleEnum::IPC :
                fieldNameToPreviewField_IPC.insert(_fieldName, _field);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerGridField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers a single fields to a map.
    /// </summary>
    /// <param name="_fieldName">
    /// An enumeration value denoting which field name is being registered.
    /// </param>
    /// <param name="_field">
    /// The field control that is being registered.
    /// </param>
    private void registerGridField(JmgFieldName _fieldName, FormControl _field)
    {
        if (!fieldNameToGridField)
        {
            fieldNameToGridField = new Map(Types::Enum, Types::Class);
        }
        fieldNameToGridField.insert(_fieldName, _field);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preApprove</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows any mandatory documents to the worker, which must be read before approving job registrations.
    /// </summary>
    /// <returns>
    ///    true if the worker reads the documents; otherwise, false.
    /// </returns>
    boolean preApprove()
    {
        JmgDialogFormClass  dlgForm;
        boolean ret = true;

        docHand.findRequestedReading();

        if (docHand.isThereRequestedReading())
        {
            using(var activityContext = JmgInstrumentationLogger::createLogger(classStr(JmgRegistrationForm)).registration().viewAttachmentsOnStart())
            {
            //"The job(s) you are starting contains attachments that have to be read before the job can be started.","View Attachments");
            dlgForm = new JmgDialogFormClass("@SYS302294","@SYS302291","@SYS302287", false, 6000, form);
            dlgForm.openAttachmentDialog(docHand,true);
            ret = dlgForm.wasFormClosedOK();
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the attachments that are mandatory reading for the selected jobs.
    /// </summary>
    void showAttachments()
    {
        JmgDialogFormClass  dlgForm = new JmgDialogFormClass("@SYS302292","@SYS302291", "@SYS302287", false, 6000, form);
        docHand.updateDocs(currentBundle.worker(),this.getSelectedJobIdsCon());
        dlgForm.openAttachmentDialog(docHand);
    }

]]></Source>
			</Method>
			<Method>
				<Name>approveMarkedPost</Name>
				<Source><![CDATA[
    void approveMarkedPost(JmgJobBundle _localCurrentBundle)
    {
        // Show info about started jobs to user.
        JmgDialogFormClass          dlgForm;
        container jobsToStart = this.getJobIdsCon(_localCurrentBundle);
        if (conLen(jobsToStart) > 0)
        {
            dlgForm = new JmgDialogFormClass("@SYS302295","@SYS39424", "@SYS5473", true, 6000, form);
            dlgForm.openStartJobsDialog(jobsToStart,docHand);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endBreakPost</Name>
				<Source><![CDATA[
    void endBreakPost()
    {
        JmgDialogFormClass  dlgForm;
        dlgForm = new JmgDialogFormClass("@SYS300130","@SYS39233", "@SYS5473", true, 6000, form);
        dlgForm.openBreakDialog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>haveBreakPost</Name>
				<Source><![CDATA[
    void haveBreakPost(JmgJobId _jobId)
    {
        JmgDialogFormClass  dlgForm;

        dlgForm = new JmgDialogFormClass(strFmt("@SYS309983",strLwr(JmgJobTable::find(_jobId).Description)),"@SYS39230", "@SYS5473", true, 6000, form);
        dlgForm.openBreakDialog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>startAssistancePost</Name>
				<Source><![CDATA[
    public void startAssistancePost()
    {
        JmgDialogFormClass dlgForm;
        dlgForm = new JmgDialogFormClass("@SYS301150","@SYS38408", "@SYS5473", true, 6000, form);
        dlgForm.openBreakDialog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageFromMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the normal image property for a given menu item.
    /// </summary>
    /// <param name="_menuItemName">
    /// Name of the menu item for which the image property should be retrieved.
    /// </param>
    /// <returns>
    /// The image ID of the given menu item.
    /// </returns>
    static private int imageFromMenuItem(str _menuItemName)
    {
        TreeNode                        treeNode;
        int                             imgId;
        #AOT
        #Properties

        treeNode = TreeNode::findNode(#MenuItemsPath + '\\' + _menuItemName);
        if (!treeNode)
        {
            return 0;
        }

        imgId = treeNode.AOTgetProperty(#PropertyNormalImage);

        return imgId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDropDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a button on the action pane, which refers to the specified menu item, must be
    ///    displayed using a drop dialog button.
    /// </summary>
    /// <param name="_menuItemName">
    ///    The menu item to test whether it must be displayed using a drop-down list box.
    /// </param>
    /// <returns>
    ///    true if the specified menu item must be displayed using a menu item; otherwise, false.
    /// </returns>
    static private boolean isDropDialog(str _menuItemName)
    {
        TreeNode                        treeNode;
        str                             objType;
        str                             formName;
        str                             style;
        #AOT
        #Properties

        treeNode = TreeNode::findNode(#MenuItemsPath + '\\' + _menuItemName);
        if (!treeNode)
        {
            return false;
        }
        objType = treeNode.AOTgetProperty(#PropertyObjectType);
        if (objType != 'Form')
            return false;
        formName = treeNode.AOTgetProperty('Object');
        treeNode = TreeNode::findNode(@'\Forms\'+formName+@'\Designs\Design');
        style = treeNode.AOTgetProperty('Style');

        return style == 'DropDialog';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJmgRegistrationUserSetup</Name>
				<Source><![CDATA[
    public JmgRegistrationSetup parmJmgRegistrationUserSetup(JmgRegistrationSetup _jmgRegistrationUserSetup = jmgRegistrationUserSetup)
    {
        jmgRegistrationUserSetup = _jmgRegistrationUserSetup;
        return jmgRegistrationUserSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadRegistrationUserSetup</Name>
				<Source><![CDATA[
    public JmgRegistrationSetup loadRegistrationUserSetup()
    {
        jmgRegistrationUserSetup = JmgRegistrationSetup::findConfigurationForCurrentUser(false);

        if (!jmgRegistrationUserSetup.RecId)
        {
            // There is no configuration assigned for the current user. Prompt to select one...
            var args = new Args();
            args.caller(this);
            FormRun formRun = new MenuFunction(menuItemDisplayStr(JmgRegistrationJobQueueDialog), MenuItemType::Display).create(args);
            formRun.run();
            formRun.wait();

            if (!formRun.closedCancel() && !jmgRegistrationUserSetup.RecId)
            {
                Box::stop("@SCM:CannotOpenJmgRegistrationWithoutConfiguration");
            }
        }

        return jmgRegistrationUserSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerJobStartQtyScanner</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Start a scanned job with the specified quantity.
    /// </summary>
    /// <param name="_jobToStart">
    ///     The job which will be started.
    /// </param>
    public void registerJobStartQtyScanner(JmgJobTable _jobToStart)
    {
        MenuFunction menuFunctionTable = new MenuFunction(menuItemDisplayStr(JmgRegistrationStartJob), MenuItemType::Display);
        Args args = new Args();
        args.caller(this.form);
        args.record(_jobToStart);
        menuFunctionTable.run(args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>