<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookProcessVATEngine_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class BookProcessVATEngine_RU
{
    SalesPurchBookDataMap_RU                processLogTrans;
    SalesPurchBookVATProcessLogTransOper_RU processLogTransOper;

    Map                                     mapCurrentAmounts,
                                            mapOperCurrentAmounts,
                                            mapOperCurrentPercent;

    #VATTransitionPeriod_RU

    #localmacro.transKey
        processLogTrans.RecId,
        processLogTrans.FactureId,
        processLogTrans.InvoiceRecIdRef,
        processLogTrans.PaymentRecIdRef,
        processLogTrans.LogTableRefRecId
    #endmacro

    #localmacro.operationKey
        processLogTransOper.RefRecId,
        processLogTransOper.LogTableRefRecId,
        processLogTransOper.TaxCode,
        processLogTransOper.DefaultDimension,
        processLogTransOper.InventTransId,
        // document type is valid only during transition period
       (processLogTransOper.TransDate > #TransitionEndDate ||
        processLogTransOper.TableId == tablenum(TmpSalesBookVATProcessLogTransOper_RU)) ?
        PurchBookVATDocumentType_RU::Unknown                              :
        processLogTransOper.DocumentType
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addOperAmounts</Name>
				<Source><![CDATA[
    private BookStructSmallVATAmounts_RU addOperAmounts(BookVATAmountType_RU            _amountType,
                                                        BookStructSmallVATAmounts_RU    _amounts,
                                                        Percent                         _percent = processLogTransOper.Percent)
    {
        BookStructSmallVATAmounts_RU  transAmounts;
        Percent                       percent;
        anytype                       anyZero = 0;

        switch (_amountType)
        {
            case BookVATAmountType_RU::CurrentAmount  :
                if (mapOperCurrentAmounts.exists([#operationKey]))
                {
                    transAmounts = mapOperCurrentAmounts.lookup([#operationKey]);
                }
                else
                {
                    transAmounts = new BookStructSmallVATAmounts_RU();
                }
                transAmounts.addAmounts2(_amounts);
                mapOperCurrentAmounts.insert([#operationKey], transAmounts);
                if (_percent)
                {
                    percent = mapOperCurrentPercent.exists([#operationKey]) ? mapOperCurrentPercent.lookup([#operationKey]) : anyZero;

                    if (percent + processLogTransOper.Percent > 100)
                    {
                        processLogTransOper.Percent = 100 - percent;
                        percent = 100;
                    }
                    else
                    {
                       percent += _percent;
                    }

                    mapOperCurrentPercent.insert([#operationKey], percent);
                }
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        this.addTransAmounts(_amountType, processLogTransOper.TaxCode, _amounts);

        return transAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransAmounts</Name>
				<Source><![CDATA[
    private BookStructVATAmounts_RU addTransAmounts(BookVATAmountType_RU         _amountType,
                                                    TaxCode                      _taxCode,
                                                    BookStructSmallVATAmounts_RU _amounts)
    {
        BookStructVATAmounts_RU  transAmounts;

        switch (_amountType)
        {
            case BookVATAmountType_RU::CurrentAmount  :
                if (mapCurrentAmounts.exists([#transKey]))
                {
                    transAmounts = mapCurrentAmounts.lookup([#transKey]);
                }
                else
                {
                    transAmounts = new BookStructVATAmounts_RU();
                }
                transAmounts.addSmallAmounts2(_taxCode, _amounts);
                mapCurrentAmounts.insert([#transKey], transAmounts);
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return transAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperAmounts</Name>
				<Source><![CDATA[
    public BookStructSmallVATAmounts_RU getOperAmounts(BookVATAmountType_RU _amountType)
    {
        BookStructSmallVATAmounts_RU  transAmounts, settledAmounts, usedAmounts, currentAmounts;

        switch (_amountType)
        {
            case BookVATAmountType_RU::FacturedAmount  :
                transAmounts = BookStructSmallVATAmounts_RU::create(processLogTransOper.FactureAmounts);
                break;

            case BookVATAmountType_RU::SettledAmount   :
                transAmounts = BookStructSmallVATAmounts_RU::create(processLogTransOper.SettledAmounts);
                break;

            case BookVATAmountType_RU::UsedAmount      :
                transAmounts = BookStructSmallVATAmounts_RU::create(processLogTransOper.UsedAmounts);
                break;

            case BookVATAmountType_RU::CurrentAmount   :
                if (mapOperCurrentAmounts.exists([#operationKey]))
                {
                    transAmounts = mapOperCurrentAmounts.lookup([#operationKey]);
                }
                else
                {
                    transAmounts = new BookStructSmallVATAmounts_RU();
                }

                break;

            case BookVATAmountType_RU::NotUsedAmount   :
                settledAmounts = this.getOperAmounts(BookVATAmountType_RU::SettledAmount);
                usedAmounts    = this.getOperAmounts(BookVATAmountType_RU::UsedAmount);

                transAmounts = new BookStructSmallVATAmounts_RU();
                transAmounts.addAmounts2(settledAmounts);
                transAmounts.subAmounts2(usedAmounts);
                break;

            case BookVATAmountType_RU::AvaliableAmount :
                settledAmounts = this.getOperAmounts(BookVATAmountType_RU::SettledAmount);
                usedAmounts    = this.getOperAmounts(BookVATAmountType_RU::UsedAmount);
                currentAmounts = this.getOperAmounts(BookVATAmountType_RU::CurrentAmount);

                transAmounts = new BookStructSmallVATAmounts_RU();
                transAmounts.addAmounts2(settledAmounts);
                transAmounts.subAmounts2(usedAmounts);
                transAmounts.subAmounts2(currentAmounts);
                break;
        }

        return transAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransAmounts</Name>
				<Source><![CDATA[
    public BookStructVATAmounts_RU getTransAmounts(BookVATAmountType_RU _amountType)
    {
        BookStructVATAmounts_RU  transAmounts, settledAmounts, usedAmounts, currentAmounts;

        switch (_amountType)
        {
            case BookVATAmountType_RU::FacturedAmount  :
                transAmounts = BookStructVATAmounts_RU::create(processLogTrans.FactureAmounts);
                break;

            case BookVATAmountType_RU::SettledAmount   :
                transAmounts = BookStructVATAmounts_RU::create(processLogTrans.SettledAmounts);
                break;

            case BookVATAmountType_RU::UsedAmount      :
                transAmounts = BookStructVATAmounts_RU::create(processLogTrans.UsedAmounts);
                break;

            case BookVATAmountType_RU::CurrentAmount   :
                if (mapCurrentAmounts.exists([#transKey]))
                {
                    transAmounts = mapCurrentAmounts.lookup([#transKey]);
                }
                else
                {
                    transAmounts = new BookStructVATAmounts_RU();
                }
                break;

            case BookVATAmountType_RU::NotUsedAmount   :
                settledAmounts = this.getTransAmounts(BookVATAmountType_RU::SettledAmount);
                usedAmounts    = this.getTransAmounts(BookVATAmountType_RU::UsedAmount);

                transAmounts   = new BookStructVATAmounts_RU();
                transAmounts.addAmounts2(settledAmounts);
                transAmounts.subAmounts2(usedAmounts);
                break;

            case BookVATAmountType_RU::AvaliableAmount :
                settledAmounts = this.getTransAmounts(BookVATAmountType_RU::SettledAmount);
                usedAmounts    = this.getTransAmounts(BookVATAmountType_RU::UsedAmount);
                currentAmounts = this.getTransAmounts(BookVATAmountType_RU::CurrentAmount);

                transAmounts   = new BookStructVATAmounts_RU();
                transAmounts.addAmounts2(settledAmounts);
                transAmounts.subAmounts2(usedAmounts);
                transAmounts.subAmounts2(currentAmounts);
                break;
        }

        return transAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        mapCurrentAmounts       = new Map(Types::Container, Types::Class);
        mapOperCurrentAmounts   = new Map(Types::Container, Types::Class);
        mapOperCurrentPercent   = new Map(Types::Container, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>operAmountModified</Name>
				<Source><![CDATA[
    public void operAmountModified(AmountMST                    _newAmountMst,
                                   BookStructSmallVATAmounts_RU _oldAmounts = new BookStructSmallVATAmounts_RU(),
                                   Percent                      _oldPercent = 0)
    {
        Percent                         percent = 0;
        Factor                          factor;
        BookStructSmallVATAmounts_RU    currentAmounts, newCurrentAmounts, settledAmounts,notUsedAmounts;
        AmountMST                       amountMST, newAmountMST = _newAmountMST;
        TaxAmount                       taxAmount;

        settledAmounts      = this.getOperAmounts(BookVATAmountType_RU::SettledAmount);
        currentAmounts      = this.getOperAmounts(BookVATAmountType_RU::CurrentAmount);
        notUsedAmounts      = this.getOperAmounts(BookVATAmountType_RU::NotUsedAmount);

        if ((settledAmounts.amountLiableToVAT() * newAmountMST) < 0)
        {
            newAmountMST = - newAmountMST;
        }

        amountMST = currentAmounts.amountLiableToVAT() - _oldAmounts.amountLiableToVAT() + newAmountMST;

        if (abs(notUsedAmounts.amountLiableToVAT()) < abs(amountMST))
        {
            throw error(strfmt("@GLS104833", notUsedAmounts.amountLiableToVAT(), CompanyInfoHelper::standardCurrency(), amountMST));
        }

        currentAmounts = this.subOperAmounts(BookVATAmountType_RU::CurrentAmount, _oldAmounts, _oldPercent);

        factor  = abs(newAmountMST / notUsedAmounts.amountLiableToVAT());

        if (currentAmounts.amountLiableToVAT() + newAmountMST == notUsedAmounts.amountLiableToVAT())
        {
            notUsedAmounts = this.getOperAmounts(BookVATAmountType_RU::AvaliableAmount);
            taxAmount      = notUsedAmounts.taxAmountVAT();
        }
        else
        {
            taxAmount = CurrencyExchangeHelper::amount(notUsedAmounts.taxAmountVAT() * factor);
        }

        percent = BookProcessVATEngine_RU::roundPercent(factor * 100);

        processLogTransOper.AmountLiableToVAT = newAmountMST;
        processLogTransOper.TaxAmount         = taxAmount;
        processLogTransOper.Percent           = percent;

        newCurrentAmounts = new BookStructSmallVATAmounts_RU();
        newCurrentAmounts.addAmounts(newAmountMST + taxAmount, newAmountMST, taxAmount);
        this.addOperAmounts(BookVATAmountType_RU::CurrentAmount, newCurrentAmounts);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCursors</Name>
				<Source><![CDATA[
    public void setCursors(SalesPurchBookDataMap_RU                _processLogTrans,
                           SalesPurchBookVATProcessLogTransOper_RU _processLogTransOper)
    {
        processLogTrans     = _processLogTrans;
        processLogTransOper = _processLogTransOper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subOperAmounts</Name>
				<Source><![CDATA[
    public BookStructSmallVATAmounts_RU subOperAmounts(BookVATAmountType_RU            _amountType,
                                                       BookStructSmallVATAmounts_RU    _amounts,
                                                       Percent                         _oldPercent)
    {
        BookStructSmallVATAmounts_RU  transAmounts;
        Percent                       percent;
        anytype                       anyZero = 0;

        switch (_amountType)
        {
            case BookVATAmountType_RU::CurrentAmount  :
                if (mapOperCurrentAmounts.exists([#operationKey]))
                {
                    transAmounts = mapOperCurrentAmounts.lookup([#operationKey]);
                }
                else
                {
                    transAmounts = new BookStructSmallVATAmounts_RU();
                }
                transAmounts.subAmounts2(_amounts);
                mapOperCurrentAmounts.insert([#operationKey], transAmounts);

                if (_oldPercent)
                {
                    percent  = mapOperCurrentPercent.exists([#operationKey]) ? mapOperCurrentPercent.lookup([#operationKey]) : anyZero;
                    if (percent >= _oldPercent)
                    {
                        percent -= _oldPercent;
                        mapOperCurrentPercent.insert([#operationKey], percent);
                    }
                    else
                    {
                        error(strfmt("@GLS110528", percent, _oldPercent));
                    }
                }
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        this.subTransAmounts(_amountType, processLogTransOper.TaxCode, _amounts);

        return transAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subTransAmounts</Name>
				<Source><![CDATA[
    private BookStructVATAmounts_RU subTransAmounts(BookVATAmountType_RU         _amountType,
                                                    TaxCode                      _taxCode,
                                                    BookStructSmallVATAmounts_RU _amounts)
    {
        BookStructVATAmounts_RU  transAmounts;

        switch (_amountType)
        {
            case BookVATAmountType_RU::CurrentAmount  :
                if (mapCurrentAmounts.exists([#transKey]))
                {
                    transAmounts = mapCurrentAmounts.lookup([#transKey]);
                }
                else
                {
                    transAmounts = new BookStructVATAmounts_RU();
                }
                transAmounts.subSmallAmounts2(_taxCode, _amounts);
                mapCurrentAmounts.insert([#transKey], transAmounts);
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return transAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public static BookProcessVATEngine_RU create(SalesPurchBookDataMap_RU                _processLogTrans,
                                                               SalesPurchBookVATProcessLogTransOper_RU _processLogTransOper)
    {
        BookProcessVATEngine_RU         bookProcessVATEngine = new BookProcessVATEngine_RU();
        BookStructSmallVATAmounts_RU    operCurrentAmounts;

        while select _processLogTrans
        {
            while select _processLogTransOper
                where _processLogTrans.RecId             == _processLogTransOper.RefRecId &&
                      _processLogTrans.LogTableRefRecId  == _processLogTransOper.LogTableRefRecId
            {
                bookProcessVATEngine.setCursors(_processLogTrans, _processLogTransOper);

                operCurrentAmounts = new BookStructSmallVATAmounts_RU();
                operCurrentAmounts.addAmounts(_processLogTransOper.AmountLiableToVAT + _processLogTransOper.TaxAmount,
                                              _processLogTransOper.AmountLiableToVAT,
                                              _processLogTransOper.TaxAmount);

                bookProcessVATEngine.addOperAmounts(BookVATAmountType_RU::CurrentAmount, operCurrentAmounts, _processLogTransOper.Percent);
            }
        }

        return bookProcessVATEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pct</Name>
				<Source><![CDATA[
    public static Percent pct(AmountMST _amountFirst, AmountMST _amountSecond)
    {
        return _amountSecond ? BookProcessVATEngine_RU::roundPercent(abs(percent(_amountFirst, _amountSecond))) : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundPercent</Name>
				<Source><![CDATA[
    public static Percent roundPercent(Percent _percent)
    {
        #define.roundForPercent(2)

        return decround(_percent, #roundForPercent);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
