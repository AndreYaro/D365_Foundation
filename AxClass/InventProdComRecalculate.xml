<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventProdComRecalculate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventProdComRecalculate</c> is responsible for relculation of <c>InventProdComLineWithCode</c> record.
/// </summary>
class InventProdComRecalculate
{
    RefRecId inventProdComPeriodRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static InventProdComRecalculate construct()
    {
        return new InventProdComRecalculate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the lines from the <c>InventProdComLineWithCode</c> table that have no corresponding
    /// matching lines in the <c>InventProdComLineDetail</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void deleteLines()
    {
        InventProdComLineWithCode inventProdComLineWithCode;
        InventProdComLineDetail   inventProdComLineDetail;

        ttsbegin;

        delete_from inventProdComLineWithCode
            where inventProdComLineWithCode.InventProdComTable  == inventProdComPeriodRecId
        notexists join inventProdComLineDetail
            where inventProdComLineWithCode.BranchNumber        == inventProdComLineDetail.BranchNumber
               && inventProdComLineWithCode.InventProdComTable  == inventProdComLineDetail.InventProdComTable
               && inventProdComLineWithCode.ColumnA             == inventProdComLineDetail.InventProdComItemCodeId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs recalculation for specified <c>InventProdComLineWithCode</c> record.
    /// </summary>
    /// <param name = "_args">Parameters for recalculcation.</param>
    public static void main(Args _args)
    {
        InventProdComRecalculate        inventProdComRecalculate = InventProdComRecalculate::construct();
        InventProdComLineDetail         details;
        boolean                         recalculate = true;

        if (_args.dataset() == tablenum(InventProdComLineWithCode))
        {
            InventProdComLineWithCode inventProdComLineWithCode = _args.record();
            if (InventProdComParameters::find().AutomaticRecalculation == NoYes::No)
            {
                recalculate = (Box::yesNo("@SYS92101", DialogButton::Yes) == DialogButton::Yes);
            }
            if (recalculate)
            {
                inventProdComRecalculate.initFields(inventProdComLineWithCode.InventProdComTable);
                while select details
                    group by BranchNumber, InventProdComItemCodeId
                    where details.InventProdComTable == inventProdComLineWithCode.InventProdComTable
                {
                    inventProdComRecalculate.recalculateWithCode(details.InventProdComItemCodeId, details.BranchNumber);
                }
                inventProdComRecalculate.deleteLines();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFields</Name>
				<Source><![CDATA[
    private void initFields(RefRecid _inventProdComPeriodRecId)
    {
        inventProdComPeriodRecId = _inventProdComPeriodRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateWithCode</Name>
				<Source><![CDATA[
    private void recalculateWithCode(InventProdComItemCodeId    _inventProdComItemCodeId,
                                     TaxBranchNumber            _branchNumber)
    {
        InventProdComLineDetail   inventProdComLineDetail;
        InventProdComTransfer     inventProdComTransfer = new InventProdComTransfer();
        real                      f , g, h, i, j, k, l, m, n, o;

        ttsbegin;
        InventProdComLineWithCode inventProdComLineWithCode = InventProdComLineWithCode::findOnItem(_inventProdComItemCodeId, inventProdComPeriodRecId, _branchNumber, true);
        if (! inventProdComLineWithCode)
        {
            inventProdComLineWithCode.ColumnA               = _inventProdComItemCodeId;
            inventProdComLineWithCode.InventProdComTable    = inventProdComPeriodRecId;
            inventProdComLineWithCode.BranchNumber          = _branchNumber;
            inventProdComLineWithCode.insert();
        }

        while select UnitId, ItemId, OtherDelivery, SalesQty, SalesPrice, CustAccount, CreationWork, LineNum, SalesId from inventProdComLineDetail
               where inventProdComLineDetail.InventProdComTable         == inventProdComPeriodRecId
                  && inventProdComLineDetail.InventProdComItemCodeId    == _inventProdComItemCodeId
                  && inventProdComLineDetail.BranchNumber               == _branchNumber
        {
            SalesLine salesLine;

            // We can always link to sales line because even if inventProdComLineDetail is built
            // up with a projInvoiceItem record, the lineNum is found with the salesLine.
            select firstonly InventDimId from salesLine
                where salesLine.SalesId == inventProdComLineDetail.SalesId
                   && salesLine.LineNum == inventProdComLineDetail.LineNum;

            EcoResProductUnitConverter converter = inventProdComTransfer.createProductUnitConverter(
                                                        inventProdComLineDetail.UnitId,
                                                        inventProdComLineWithCode.ColumnC,
                                                        inventProdComLineDetail.ItemId,
                                                        salesLine.InventDimId);

            if (inventProdComLineDetail.OtherDelivery == NoYes::Yes)
            {
                f += inventProdComTransfer.convertValue(inventProdComLineDetail.SalesQty, converter);
                i += inventProdComLineDetail.SalesQty * inventProdComLineDetail.SalesPrice;
                if (CustTable::find(inventProdComLineDetail.CustAccount).postalAddress().CountryRegionId == CompanyInfo::find().postalAddress().CountryRegionId)
                {
                    g += inventProdComTransfer.convertValue(inventProdComLineDetail.SalesQty, converter);
                    j += inventProdComLineDetail.SalesQty * inventProdComLineDetail.SalesPrice;
                }
                else
                {
                    h += inventProdComTransfer.convertValue(inventProdComLineDetail.SalesQty, converter);
                    k += inventProdComLineDetail.SalesQty * inventProdComLineDetail.SalesPrice;
                }
            }
            if (inventProdComLineDetail.CreationWork == NoYes::Yes)
            {
                if (CustTable::find(inventProdComLineDetail.CustAccount).postalAddress().CountryRegionId == CompanyInfo::find().postalAddress().CountryRegionId)
                {
                    l += inventProdComTransfer.convertValue(inventProdComLineDetail.SalesQty, converter);
                    m += inventProdComLineDetail.SalesQty * inventProdComLineDetail.SalesPrice;
                }
                else
                {
                    n += inventProdComTransfer.convertValue(inventProdComLineDetail.SalesQty, converter);
                    o += inventProdComLineDetail.SalesQty * inventProdComLineDetail.SalesPrice;
                }
            }
        }

        inventProdComLineWithCode.ColumnF = f;
        inventProdComLineWithCode.ColumnI = i;
        inventProdComLineWithCode.ColumnG = g;
        inventProdComLineWithCode.ColumnH = h;
        inventProdComLineWithCode.ColumnJ = j;
        inventProdComLineWithCode.ColumnK = k;
        inventProdComLineWithCode.ColumnL = l;
        inventProdComLineWithCode.ColumnM = m;
        inventProdComLineWithCode.ColumnN = n;
        inventProdComLineWithCode.ColumnO = o;
        inventProdComLineWithCode.update();

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>