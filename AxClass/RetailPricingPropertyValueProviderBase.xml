<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingPropertyValueProviderBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Runtime.DataModel;
using CrtPricingPropertyDefinition = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPropertyDefinition;

/// <summary>
/// The interface of property value providers.
/// </summary>
/// <remarks>
/// If there are multiple property providers for a pricing property, an arbitrary one will be picked to resolve the property value.
/// Therefore, if you want to extend the logic for an existing property, hook on the <c>Resolve</c> method rather than adding new providers.
/// </remarks>
public abstract class RetailPricingPropertyValueProviderBase
{
    // The order item temp table re-used for perf perposes. In order to get rid of creating extra temp tables in each property handler.
    protected RetailTempOrderItem mTmpOrderItem;

    protected RetailTransactionId mTransactionId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// We're using <c>SysPluginFactory</c> which doesn't allow passing constructor parameters.
    /// </summary>
    public void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailTempOrderItem</Name>
				<Source><![CDATA[
    public RetailTempOrderItem parmRetailTempOrderItem(RetailTempOrderItem _tempOrderItem = mTmpOrderItem)
    {
        mTmpOrderItem = _tempOrderItem;

        return _tempOrderItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionId</Name>
				<Source><![CDATA[
    public RetailTransactionId parmTransactionId(RetailTransactionId _transactionId = mTransactionId)
    {
        mTransactionId = _transactionId;

        return _transactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsPropertySupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exam if the CrtPricingPropertyDefinition is supported by this property provider.
    /// </summary>
    /// <param name = "definition">The property definition.</param>
    /// <returns>A boolean indicating if the definition is supported.</returns>
    public abstract boolean IsPropertySupported(CrtPricingPropertyDefinition definition)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>Resolve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolve the value for all properties supported by this provider for a given sales transaction.
    /// </summary>
    /// <param name = "propertyValueContext">The property value context.</param>
    /// <param name = "salesTransaction">The sales transaction.</param>
    public abstract void Resolve(PricingPropertyValueContext propertyValueContext, SalesTransaction salesTransaction)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>