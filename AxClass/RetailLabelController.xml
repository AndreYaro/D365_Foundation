<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailLabelController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is used for report rendering and running.
/// </summary>
class RetailLabelController extends SrsReportRunController implements BatchRetryable
{
    RetailInventItemLabel   itemLabelTable;
    RecordSortedList        recordList;
    boolean                 printSpecificLabel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args = args)
    {
        if (_args)
        {
            args = _args;
        }
        else
        {
            throw error("@RET4207");
        }

        if (args.dataset() == tableNum(RetailInventItemLabel))
        {
            recordList = args.object();
            itemLabelTable = args.record();
            printSpecificLabel = args.parmEnum();
        }

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportName</Name>
				<Source><![CDATA[
    public SRSCatalogItemName parmReportName(SRSCatalogItemName _reportName = reportName)
    {
        str menuItemName = args.menuItemName();
        MenuFunction menuFunc;
        str report;
        str reportDesign;
        str menuReportName;

        //If menu item passed through args
        if (menuItemName)
        {
            menuFunc = new MenuFunction(menuItemName, MenuItemType::Output);
            report = menuFunc.linkedPermissionObject();
            reportDesign = menuFunc.linkedPermissionObjectChild();
            //If menu contains report name and design
            if (report && reportDesign)
        {
                menuReportName = strFmt('%1.%2',report, reportDesign);
            }
        }

        return menuReportName ? menuReportName : super(_reportName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method sets the boolean value to show the dialog and to set the range.
    /// </summary>
    protected void prePromptModifyContract()
    {
        super();
        this.parmShowDialog(false);
        this.setRanges(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds and sets the value of ranges to the report query.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> of the report.
    /// </param>
    /// <remarks>
    /// These ranges filter out the labels required to be printed.
    /// </remarks>
    public void setRanges(Query _query)
    {
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;
        boolean                 haveMoreValue;

        qbds = SysQuery::findOrCreateDataSource(_query, tableNum(RetailInventItemLabel));
        qbds.clearRanges();
        if (printSpecificLabel)
        {
            if (qbds)
            {
                qbr = SysQuery::findOrCreateRange(qbds, fieldNum(RetailInventItemLabel, RecId));
                haveMoreValue = recordList.first(itemLabelTable);
                while (haveMoreValue)
                {
                    qbds.addRange(fieldNum(RetailInventItemLabel, RecId)).value(queryValue(itemLabelTable.RecId));
                    haveMoreValue = recordList.next(itemLabelTable);
                }
            }
        }
        else
        {
            qbr = SysQuery::findOrCreateRange(qbds, fieldNum(RetailInventItemLabel, ReportName));

            if (qbr)
            {
                qbr.value(itemLabelTable.ReportName);
            }

            qbr = SysQuery::findOrCreateRange(qbds, fieldNum(RetailInventItemLabel, StoreId));

            if (qbr)
            {
                qbr.value(itemLabelTable.StoreId);
            }

            qbr = SysQuery::findOrCreateRange(qbds, fieldNum(RetailInventItemLabel, ValidOnDate));

            if (qbr)
            {
                qbr.value(queryValue(itemLabelTable.ValidOnDate));
            }

            qbr = SysQuery::findOrCreateRange(qbds, fieldNum(RetailInventItemLabel, LabelType));

            if (qbr)
            {
                qbr.value(queryValue(itemLabelTable.LabelType));
            }

            qbr = SysQuery::findOrCreateRange(qbds, fieldNum(RetailInventItemLabel, Printed));

            if (qbr)
            {
                qbr.value(queryValue(itemLabelTable.Printed));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Main</Name>
				<Source><![CDATA[
    public static void Main(Args _args)
    {
        RetailLabelController controller = new RetailLabelController();
        SrsReportDataContract dataContract;
        SRSPrintDestinationSettings printSettings;

        controller.parmArgs(_args);

        dataContract = controller.parmReportContract();
        if (dataContract)
        {
            printSettings = dataContract.parmPrintSettings();
            if (printSettings)
            {
                printSettings.fileName(controller.parmReportName() + '.pdf');

                controller.setPrintSettings(printSettings);
            }
        }

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set print settings for the report
    /// </summary>
    /// <param name = "_printSettings">The object of <c>SRSPrintDestinationSettings</c> class.</param>
    public void setPrintSettings(SRSPrintDestinationSettings _printSettings)
    {
        if (_printSettings)
        {
            // Download the report in pdf format.
            _printSettings.printMediumType(SRSPrintMediumType::File);
            _printSettings.fileFormat(SRSReportFileFormat::PDF);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>