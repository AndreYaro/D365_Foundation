<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>AuditPolicyCaseBuilder</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
///    The <c>AuditPolicyCaseBuilder</c> class is used to create audit cases.
/// </summary>
class AuditPolicyCaseBuilder extends RunBaseBatch implements BatchRetryable
{
    RefRecId    batchId;
    utcdatetime executionTime;
    RefRecId    numberSeqTableRecId;
    boolean     canSubmitToWorkFlow;
    RefRecId    policyLegalEntityId;
    RefRecId    policyRecId;
    Map         groupByFieldMap;
    int         caseCount;
    int         documentCount;
    utcdatetime minDateValue;
    utcdatetime maxDateValue;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        batchId,
        executionTime,
        numberSeqTableRecId,
        policyLegalEntityId,
        policyRecId,
        documentCount
    #ENDMACRO

    #Define.RetryNum(3)
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>canGoBatch</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Determines whether the job can be executed in a batch framework.
    /// </summary>
    /// <returns>
    ///    true if the job can be executed in batch; otherwise, false.
    /// </returns>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
      </Method>
      <Method>
        <Name>checkBatchErrorExists</Name>
        <Source><![CDATA[
    /// <summary>
    /// Indicates whether all tasks for creating violation records has ended successfully.
    /// </summary>
    /// <returns>
    /// true if any task raised an error; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkBatchErrorExists()
    {
        Batch batch;
        boolean status = false;

        select firstonly RecId from batch
            where batch.BatchJobId == this.parmCurrentBatch().RecId &&
                  batch.Status == BatchStatus:: Error;

        if (batch.RecId)
        {
            status =  true;
        }

        return status;
    }

]]></Source>
      </Method>
      <Method>
        <Name>createAssociatedRecordsByAuditPolicyRule</Name>
        <Source><![CDATA[
    /// <summary>
    /// Creates the audit cases and association records.
    /// </summary>
    /// <param name="_sourceDocument">
    /// The name of the root entity.
    /// </param>
    private void createAssociatedRecordsByAuditPolicyRule(tableName _sourceDocument)
    {
        AuditPolicyRuleViolation                allAuditRuleViolation;
        AuditPolicyRuleViolation                auditRuleViolation;
        AuditPolicyRuleViolation                auditRuleViolationCaseDetail;
        RefRecId                                caseDetailBaseRefRecId;
        RefRecId                                ruleId;
        SysPolicySourceDocumentRule             sysPolicySourceDocumentRule;
        SysPolicySourceDocumentRuleType         sysPolicySourceDocumentRuleType;
        SysPolicySourceDocumentRuleViolation    allRuleViolation;
        SysPolicySourceDocumentRuleViolation    sdRuleViolation;
        SysPolicyTypeSourceDocumentQuery        sysPolicyTypeSourceDocumentQuery;
        tableId                                 sourceDocumentTableId;

        // select only those policy rule violations which have the same root entity as _sourceDocumentId parameter
        // and the query classification for those rules is not equal to duplicate since duplicate rules are handled differently.
        while select validTimeState(minDateValue, maxDateValue) PolicySourceDocumentRule from allRuleViolation
            group by PolicySourceDocumentRule
            join RecId from allAuditRuleViolation
                where allAuditRuleViolation.PolicySourceDocumentRuleViolation   == allRuleViolation.RecId &&
                      allAuditRuleViolation.BatchJob                            == batchId &&
                      allAuditRuleViolation.PolicyExecutionTimestamp            == executionTime
            join PolicyRuleType from sysPolicySourceDocumentRule
                where sysPolicySourceDocumentRule.RecId                         == allRuleViolation.PolicySourceDocumentRule
            join PolicyTypeSourceDocumentQuery from sysPolicySourceDocumentRuleType
                where sysPolicySourceDocumentRuleType.RecId                     == sysPolicySourceDocumentRule.PolicyRuleType
            join SourceRelationType from sysPolicyTypeSourceDocumentQuery
                where sysPolicyTypeSourceDocumentQuery.RecId                    == sysPolicySourceDocumentRuleType.PolicyTypeSourceDocumentQuery &&
                      sysPolicyTypeSourceDocumentQuery.SourceRelationType       == _sourceDocument &&
                      sysPolicySourceDocumentRuleType.QueryClassification       != QueryClassification::Duplicate
        {
            ruleId = allRuleViolation.PolicySourceDocumentRule;
            sourceDocumentTableId = tableName2id(_sourceDocument);
            caseDetailBaseRefRecId = this.createCaseDetail(ruleId);

            // for each policy rule violation, add that record as a case association
            while select RecId from sdRuleViolation
                where sdRuleViolation.PolicySourceDocumentRule == ruleId
                join RecId from auditRuleViolation
                    where auditRuleViolation.PolicySourceDocumentRuleViolation  == sdRuleViolation.RecId &&
                          auditRuleViolation.BatchJob                           == batchId &&
                          auditRuleViolation.PolicyExecutionTimestamp           == executionTime
            {
                auditRuleViolationCaseDetail = AuditPolicyRuleViolation::find(auditRuleViolation.RecId, true);
                if (auditRuleViolationCaseDetail.RecId)
                {
                    auditRuleViolationCaseDetail.CaseDetailBase = caseDetailBaseRefRecId;
                    auditRuleViolationCaseDetail.update();
                    this.createCaseAssociation(sdRuleViolation.RecId, caseDetailBaseRefRecId, sourceDocumentTableId);
                }
            }
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>createAssociatedRecordsByDocAttributes</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Creates the audit cases and association records.
    /// </summary>
    /// <param name="_sourceDocument">
    ///    The table name of the root entity.
    /// </param>
    /// <param name="_auditPolicyCaseGroupRecId">
    ///    The ID of the group criteria.
    /// </param>
    private void createAssociatedRecordsByDocAttributes(tableName _sourceDocument, RefRecId _auditPolicyCaseGroupRecId)
    {
        Array                                   groupByFieldList;
        AuditPolicyCaseGroupAttribute           auditPolicyCaseGroupAttribute;
        AuditPolicyRuleViolation                allAuditRuleViolation;
        AuditPolicyRuleViolation                auditRuleViolationCaseDetail;
        boolean                                 isGroupingFieldspecified;
        boolean                                 isSourceDocumentLine;
        fieldName                               sdField;
        int                                     groupByFieldCount;
        Query                                   sourceDocumentQuery = new Query();
        QueryBuildDataSource                    auditRuleViolationQbds;
        QueryBuildDataSource                    sourceDocumentQbds;
        QueryBuildDataSource                    sdRuleViolationQbds;
        QueryRun                                queryRun;
        RefRecId                                caseDetailBaseRefRecId;
        SysPolicyRule                           sysPolicyRule;
        SysPolicyRuleType                       sysPolicyRuleType;
        SysPolicySourceDocumentRule             sysPolicySourceDocumentRule;
        SysPolicySourceDocumentRuleType         sysPolicySourceDocumentRuleType;
        SysPolicySourceDocumentRuleViolation    allRuleViolation;
        SysPolicySourceDocumentRuleViolation    auditRuleViolation;
        SysPolicySourceDocumentRuleViolation    ruleViolationQueryData;
        SysPolicyTypeSourceDocumentQuery        sysPolicyTypeSourceDocumentQuery;
        tableId                                 sourceDocumentTableId = tableName2id(_sourceDocument);

        sourceDocumentQbds = sourceDocumentQuery.addDataSource(sourceDocumentTableId);
        sourceDocumentQuery.allowCrossCompany(true);
        sdRuleViolationQbds = sourceDocumentQbds.addDataSource(tablenum(SysPolicySourceDocumentRuleViolation));

        // Determine if the source document is a header or line document
        // Also, find the field on the source document that relates to the SourceDocumentHeader or SourceDocumentLine table
        [sdField, isSourceDocumentLine] = AuditPolicyExecutionTask::getSourceDocumentFieldAndFlag(sourceDocumentTableId);
        if (sdField)
        {
            if (isSourceDocumentLine == false)
            {
                sdRuleViolationQbds.addLink(fieldname2id(sourceDocumentTableId, sdField), fieldnum(SysPolicySourceDocumentRuleViolation, SourceDocumentHeader));
            }
            else
            {
                sdRuleViolationQbds.addLink(fieldname2id(sourceDocumentTableId, sdField), fieldnum(SysPolicySourceDocumentRuleViolation, SourceDocumentLine));
            }

            // Add BatchId value to the AuditPolicyRuleViolation table
            auditRuleViolationQbds = sdRuleViolationQbds.addDataSource(tablenum(AuditPolicyRuleViolation));
            auditRuleViolationQbds.relations(true);
            auditRuleViolationQbds.addRange(fieldnum(AuditPolicyRuleViolation, BatchJob)).value(queryValue(batchId));
            auditRuleViolationQbds.addRange(fieldnum(AuditPolicyRuleViolation, PolicyExecutionTimestamp)).value(queryValue(executionTime));

            groupByFieldList = new Array(Types::String);
            groupByFieldMap = new Map(Types::String, Types::String);
            groupByFieldCount = 1;

            // Add the groupby fields to the source document's selection list and sort list
            while select SourceAttribute from auditPolicyCaseGroupAttribute
                where auditPolicyCaseGroupAttribute.AuditPolicyCaseGroup == _auditPolicyCaseGroupRecId
            {
                sourceDocumentQbds.addSelectionField(fieldname2id(sourceDocumentTableId, auditPolicyCaseGroupAttribute.SourceAttribute));
                sourceDocumentQbds.addSortField(fieldname2id(sourceDocumentTableId, auditPolicyCaseGroupAttribute.SourceAttribute));
                groupByFieldList.value(groupByFieldCount, auditPolicyCaseGroupAttribute.SourceAttribute);
                isGroupingFieldspecified = true;
                groupByFieldCount++;
            }

            if (isGroupingFieldspecified)
            {
                // select all those violations from the violation table which have the same root entity as _sourceDocument parameter;
                // except those for a 'Duplicate' query classification since duplicate rules are handled differently.
                while select validTimeState(minDateValue, maxDateValue) PolicySourceDocumentRule from allRuleViolation
                    group by PolicySourceDocumentRule
                    join RecId from allAuditRuleViolation
                        where   allAuditRuleViolation.PolicySourceDocumentRuleViolation == allRuleViolation.RecId &&
                                allAuditRuleViolation.BatchJob == batchId &&
                                allAuditRuleViolation.PolicyExecutionTimestamp == executionTime
                    join PolicyRuleType from sysPolicySourceDocumentRule
                        where sysPolicySourceDocumentRule.RecId == allRuleViolation.PolicySourceDocumentRule
                    join PolicyTypeSourceDocumentQuery from sysPolicySourceDocumentRuleType
                        where   sysPolicySourceDocumentRuleType.RecId == sysPolicySourceDocumentRule.PolicyRuleType &&
                                sysPolicySourceDocumentRuleType.QueryClassification != QueryClassification::Duplicate
                    join SourceRelationType from sysPolicyTypeSourceDocumentQuery
                        where   sysPolicyTypeSourceDocumentQuery.RecId == sysPolicySourceDocumentRuleType.PolicyTypeSourceDocumentQuery &&
                                sysPolicyTypeSourceDocumentQuery.SourceRelationType == _sourceDocument
                {
                    // Add the record id of the selected records to the query range
                    sdRuleViolationQbds.addRange(fieldnum(SysPolicySourceDocumentRuleViolation, PolicySourceDocumentRule)).value(queryValue(allRuleViolation.PolicySourceDocumentRule));
                }

                queryRun = new QueryRun(sourceDocumentQuery);
                while (queryRun.next())
                {
                    if (this.isGroupByFieldChange(queryRun.get(sourceDocumentTableId), groupByFieldCount, groupByFieldList))
                    {
                        ruleViolationQueryData = queryRun.get(tablenum(SysPolicySourceDocumentRuleViolation));
                        caseDetailBaseRefRecId = this.createCaseDetail(ruleViolationQueryData.PolicySourceDocumentRule);
                    }

                    auditRuleViolation = queryRun.get(tablenum(SysPolicySourceDocumentRuleViolation));
                    auditRuleViolationCaseDetail = AuditPolicyRuleViolation::find(auditRuleViolation.RecId, true);
                    if (auditRuleViolationCaseDetail.RecId)
                    {
                        auditRuleViolationCaseDetail.CaseDetailBase = caseDetailBaseRefRecId;
                        auditRuleViolationCaseDetail.update();
                        this.createCaseAssociation(ruleViolationQueryData.RecId, caseDetailBaseRefRecId, sourceDocumentTableId);
                    }
                }
            }
            else
            {
                select firstonly validTimeState(minDateValue, maxDateValue) PolicyRuleType from sysPolicyRule
                    where sysPolicyRule.RecId == allRuleViolation.PolicySourceDocumentRule;

                sysPolicyRuleType = SysPolicyRuleType::find(SysPolicyType::findByEnum(SysPolicyTypeEnum::AuditPolicy).RecId, sysPolicyRule.PolicyRuleType);

                throw error(strfmt("@SYS330002", SysPolicy::find(policyRecId).Name, sysPolicyRuleType.Name));
            }
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>createAssociatedRecordsForDuplicate</Name>
        <Source><![CDATA[
    /// <summary>
    /// Creates the audit cases and association records for duplicate rule type.
    /// </summary>
    private void createAssociatedRecordsForDuplicate()
    {
        AuditPolicyRuleViolation                allAuditRuleViolation;
        AuditPolicyRuleViolation                auditRuleViolation;
        AuditPolicyRuleViolation                auditRuleViolationCaseDetail;
        RefRecId                                caseDetailBaseRefRecId;
        RefRecId                                ruleId;
        SysPolicySourceDocumentRule             sysPolicySourceDocumentRule;
        SysPolicySourceDocumentRuleType         sysPolicySourceDocumentRuleType;
        SysPolicySourceDocumentRuleViolation    allRuleViolation;
        SysPolicySourceDocumentRuleViolation    sdRuleViolation;
        SysPolicyTypeSourceDocumentQuery        sysPolicyTypeSourceDocumentQuery;
        tableId                                 sourceDocumentTableId;

        while select validTimeState(minDateValue, maxDateValue) PolicySourceDocumentRule from allRuleViolation
            group by PolicySourceDocumentRule
            join InstanceID from allAuditRuleViolation
                group by InstanceID
                where allAuditRuleViolation.PolicySourceDocumentRuleViolation == allRuleViolation.RecId &&
                  allAuditRuleViolation.BatchJob == batchId &&
                  allAuditRuleViolation.PolicyExecutionTimestamp == executionTime
            join PolicyRuleType from sysPolicySourceDocumentRule
                where sysPolicySourceDocumentRule.RecId == allRuleViolation.PolicySourceDocumentRule
            join PolicyTypeSourceDocumentQuery from sysPolicySourceDocumentRuleType
                where sysPolicySourceDocumentRuleType.RecId == sysPolicySourceDocumentRule.PolicyRuleType
            join SourceRelationType from sysPolicyTypeSourceDocumentQuery
                group by SourceRelationType
                where   sysPolicyTypeSourceDocumentQuery.RecId == sysPolicySourceDocumentRuleType.PolicyTypeSourceDocumentQuery &&
                        sysPolicySourceDocumentRuleType.QueryClassification == QueryClassification::Duplicate
        {
            ruleId                  = allRuleViolation.PolicySourceDocumentRule;
            sourceDocumentTableId   = tableName2id(sysPolicyTypeSourceDocumentQuery.SourceRelationType);
            caseDetailBaseRefRecId  = this.createCaseDetail(ruleId);

            while select RecId from sdRuleViolation
                where sdRuleViolation.PolicySourceDocumentRule == ruleId
                join RecId from auditRuleViolation
                    where auditRuleViolation.PolicySourceDocumentRuleViolation  == sdRuleViolation.RecId &&
                          auditRuleViolation.BatchJob                           == batchId &&
                          auditRuleViolation.PolicyExecutionTimestamp           == executionTime &&
                          auditRuleViolation.InstanceID                         == allAuditRuleViolation.InstanceID
            {
                auditRuleViolationCaseDetail = AuditPolicyRuleViolation::find(auditRuleViolation.RecId, true);
                if (auditRuleViolationCaseDetail.RecId)
                {
                    auditRuleViolationCaseDetail.CaseDetailBase = caseDetailBaseRefRecId;
                    auditRuleViolationCaseDetail.update();
                    this.createCaseAssociation(sdRuleViolation.RecId, caseDetailBaseRefRecId, sourceDocumentTableId);
                }
            }
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>createCaseAssociation</Name>
        <Source><![CDATA[
    /// <summary>
    /// Creates the association record between the case and original document.
    /// </summary>
    /// <param name="_externalRecord">
    /// The record ID of the original document.
    /// </param>
    /// <param name="_caseRecId">
    /// The case detail record ID.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the original document.
    /// </param>
    /// <returns>
    /// A buffer that contains the case association record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected CaseAssociation createCaseAssociation(RefRecId _externalRecord, RefRecId _caseRecId, tableId _tableId)
    {
        CaseAssociation                         caseAssociation;
        Query                                   query = new Query();
        QueryBuildDataSource                    documentQbds, sourceDocumentQbds;
        QueryRun                                queryRun;
        RefRecId                                externalRecordId;
        SysPolicySourceDocumentRuleViolation    sdRuleViolation;
        FieldName                               sourceDocumentFieldName;
        FieldId                                 sourceDocumentFieldId;

        sdRuleViolation = SysPolicySourceDocumentRuleViolation::find(_externalRecord);
        documentQbds    = query.addDataSource(_tableId);
        query.allowCrossCompany(true);

        // Get the source document field name from the table.
        sourceDocumentFieldName = AuditPolicyExecutionTask::getSourceDocumentField(_tableId);
        sourceDocumentFieldId = fieldName2Id(_tableId, sourceDocumentFieldName);

        if (sdRuleViolation.RecId != 0 && documentQbds)
        {
            if (sdRuleViolation.IsForSourceDocumentLine == true)
            {
                sourceDocumentQbds = documentQbds.addDataSource(tablenum(SourceDocumentLine));

                // Add the link in the code instead of using relations since there are cases where multiple foreign key relations
                // present on the source document fields will result in incorrect join links.
                sourceDocumentQbds.relations(false);
                sourceDocumentQbds.joinMode(JoinMode::InnerJoin);
                sourceDocumentQbds.addLink(sourceDocumentFieldId, fieldNum(SourceDocumentLine, RecId));
                sourceDocumentQbds.addRange(fieldnum(SourceDocumentLine, RecId)).value(queryValue(sdRuleViolation.SourceDocumentLine));
            }
            else
            {
                sourceDocumentQbds = documentQbds.addDataSource(tablenum(SourceDocumentHeader));

                // Add the link in the code instead of using relations since there are cases where multiple foreign key relations
                // present on the source document fields will result in incorrect join links.
                sourceDocumentQbds.relations(false);
                sourceDocumentQbds.joinMode(JoinMode::InnerJoin);
                sourceDocumentQbds.addLink(sourceDocumentFieldId, fieldNum(SourceDocumentHeader, RecId));
                sourceDocumentQbds.addRange(fieldnum(SourceDocumentHeader, RecId)).value(queryValue(sdRuleViolation.SourceDocumentHeader));
            }

            queryRun = new QueryRun(query);
            if (sourceDocumentQbds && queryRun && queryRun.next())
            {
                externalRecordId = queryRun.getNo(1).getFieldValue('RecId');
            }

            Common record = new DictTable(_tableId).makeRecord();

            select firstonly RecId from caseAssociation
                where   caseAssociation.CaseRecId == _caseRecId &&
                        caseAssociation.RefRecId == externalRecordId &&
                        caseAssociation.EntityType == CaseAssociation::getTypeForRecord(record);

            if (caseAssociation.RecId == 0)
            {
                caseAssociation.IsPrimary = NoYes::No;
                caseAssociation.CaseRecId = _caseRecId;
                caseAssociation.RefRecId = externalRecordId;
                caseAssociation.EntityType = CaseAssociation::getTypeForRecord(record);
                caseAssociation.insert();
            }
        }

        return caseAssociation;
    }

]]></Source>
      </Method>
      <Method>
        <Name>createCaseCategory</Name>
        <Source><![CDATA[
    /// <summary>
    /// Creates the case <c>CaseCategoryHierarchyDetail</c> record if it does not exist.
    /// </summary>
    /// <param name="_ruleRecId">
    /// The rule ID against which the category record needs to be created.
    /// </param>
    /// <returns>
    /// The record ID of the case category record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected recId createCaseCategory(RefRecId _ruleRecId)
    {
        recId                           caseCategory;
        SysPolicyRule                   sysPolicyRule;
        CaseCategoryHierarchyDetail     caseCategoryHierarchyDetail;
        SysPolicy                       sysPolicy;

        select firstonly Name from sysPolicy
            join Policy from sysPolicyRule
                where   sysPolicy.RecId == sysPolicyRule.Policy &&
                        sysPolicyRule.RecId == _ruleRecId;

        select RecId from caseCategoryHierarchyDetail
            where   caseCategoryHierarchyDetail.CaseCategory == sysPolicy.Name &&
                    caseCategoryHierarchyDetail.CategoryType == CaseCategoryType::Audit;

        if (caseCategoryHierarchyDetail.RecId == 0)
        {
            caseCategoryHierarchyDetail.CaseCategory = sysPolicy.Name;
            caseCategoryHierarchyDetail.CategoryType = CaseCategoryType::Audit;
            caseCategoryHierarchyDetail.ParentRecId = 0;
            caseCategoryHierarchyDetail.DefaultOwnerWorker = 0;
            caseCategoryHierarchyDetail.insert();
        }

        caseCategory = caseCategoryHierarchyDetail.RecId;

        return caseCategory;
    }

]]></Source>
      </Method>
      <Method>
        <Name>createCaseDetail</Name>
        <Source><![CDATA[
    /// <summary>
    /// Creates the case record.
    /// </summary>
    /// <param name="_ruleRecId">
    /// The rule Id against which the case is created.
    /// </param>
    /// <returns>
    /// The record Id of the case record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected recId createCaseDetail(RefRecId _ruleRecId)
    {
        recId                           caseCategory;
        recId                           caseDetailRecId;
        CaseDetail                      caseDetail;
        NumberSeq                       numberSeq;
        Description                     description;
        SysPolicySourceDocumentRule     policyRule;
        SysPolicySourceDocumentRuleType spsDocumentRuleType;

        policyRule = SysPolicySourceDocumentRule::find(_ruleRecId);

        spsDocumentRuleType = SysPolicySourceDocumentRuleType::find(policyRule.PolicyRuleType);

        description = strfmt("@SYS328536", spsDocumentRuleType.Name ) ;

        numberSeq = NumberSeq::newGetNum(CaseDetailForm::numRefCaseId());
        caseCategory = this.createCaseCategory(_ruleRecId);

        caseDetail.initValue();
        caseDetail.CaseId = numberSeq.num();
        caseDetail.Description = description;
        caseDetail.CategoryRecId = caseCategory;
        caseDetail.Party = policyLegalEntityId;
        caseDetail.insert();
        if (canSubmitToWorkFlow)
        {
            //submitting the document to workflow.
            Workflow::activateFromWorkflowType('CaseDocumentTemplate', caseDetail.RecId, '', false);
        }
        caseDetailRecId = caseDetail.RecId;
        caseCount++;

        return caseDetailRecId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isGroupByFieldChange</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Indicates whether the group by field values is change for the current entity.
    /// </summary>
    /// <param name="_rootEntity">
    ///    The root entity of the query.
    /// </param>
    /// <param name="_groupByFieldCount">
    ///    An integer value that determines the count of group by field.
    /// </param>
    /// <param name="_groupByFieldList">
    ///    An array that contains the group by field name.
    /// </param>
    /// <returns>
    ///    true if the group by field values is changed; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isGroupByFieldChange(Common _rootEntity, int _groupByFieldCount, Array _groupByFieldList)
    {
        int loop = 1;
        str currentValue;
        str previousValue;
        str currentKey;
        boolean isGroupByFieldChange = false;

        for (loop = 1; loop < _groupByFieldCount; loop++)
        {
            currentKey =  _groupByFieldList.value(loop);
            if (groupByFieldMap.exists(currentKey))
            {
                previousValue = any2str(groupByFieldMap.lookup(currentKey));
                currentValue = _rootEntity.getFieldValue(currentKey);
                // verify the field is change or not
                if (previousValue != currentValue)
                {
                    // field in the group by is changed, so breaking the loop
                    isGroupByFieldChange = true;
                    break;
                }
            }
            else
            {
                // since the field is not found in the map, so breaking the loop.
                isGroupByFieldChange = true;
                break;
            }
        }

        if (isGroupByFieldChange)
        {
            groupByFieldMap = new Map(Types::String, Types::String);
            // inserting the new values of group by field in the  Map
            for (loop = 1; loop < _groupByFieldCount; loop++)
            {
                currentKey =  _groupByFieldList.value(loop);
                currentValue = _rootEntity.getFieldValue(currentKey);
                groupByFieldMap.insert(currentKey, currentValue);
            }
        }
        return isGroupByFieldChange;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isWorkFlowEnable</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Indicates whether workflow is enabled.
    /// </summary>
    /// <returns>
    ///    true if workflow is enabled; otherwise, false.
    /// </returns>
    private boolean isWorkFlowEnable()
    {
        WorkflowTable workflowTable;
        WorkflowVersionTable workflowVersionTable;
        boolean ret = false;
        WorkflowTypeName caseDocumentTemplate = workflowTypeStr(CaseDocumentTemplate);

        select firstonly RecId from workflowTable
            where workflowTable.TemplateName == caseDocumentTemplate
                && workflowTable.DataArea == curExt()
                && workflowTable.DefaultConfiguration == NoYes::Yes;

        if (workflowTable.RecId)
        {
            ret = true;
        }
        else
        {
            select firstonly RecId from workflowTable exists join workflowVersionTable
                where   workflowTable.TemplateName == caseDocumentTemplate &&
                        workflowTable.Type == WorkflowConfigurationType::Definition &&
                        workflowTable.DataArea == curExt() &&
                        workflowVersionTable.WorkflowTable == workflowTable.RecId &&
                        workflowVersionTable.Enabled == NoYes::Yes;

            if (workflowTable.RecId)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
      </Method>
      <Method>
        <Name>new</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Initializes the current class object.
    /// </summary>
    protected void new()
    {
        super();
        minDateValue = DateTimeUtil::minValue();
        maxDateValue = DateTimeUtil::maxValue();
    }

]]></Source>
      </Method>
      <Method>
        <Name>pack</Name>
        <Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmBatchId</Name>
        <Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmBatchId(RefRecId _batchId = batchId)
    {
        batchId  = _batchId;
        return batchId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmDocumentCount</Name>
        <Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int parmDocumentCount(int _documentCount = documentCount)
    {
        documentCount  = _documentCount;
        return documentCount;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmExecutionTime</Name>
        <Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public utcdatetime parmExecutionTime(utcdatetime _executionTime = executionTime)
    {
        executionTime  = _executionTime;
        return executionTime;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmGroupByFieldMap</Name>
        <Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Map parmGroupByFieldMap(Map _groupByFieldMap = groupByFieldMap)
    {
        groupByFieldMap  = _groupByFieldMap;
        return groupByFieldMap;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmNumberSeqTableRecId</Name>
        <Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmNumberSeqTableRecId(RefRecId _numberSeqTableRecId = numberSeqTableRecId)
    {
        numberSeqTableRecId  = _numberSeqTableRecId;
        return numberSeqTableRecId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmPolicyLegalEntityId</Name>
        <Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmPolicyLegalEntityId(RefRecId _policyLegalEntityId)
    {
        policyLegalEntityId  = _policyLegalEntityId;
        return policyLegalEntityId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmPolicyRecId</Name>
        <Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmPolicyRecId(RefRecId _policyRecId = policyRecId)
    {
        policyRecId  = _policyRecId;
        return policyRecId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>process</Name>
        <Source><![CDATA[
    /// <summary>
    /// Creates the audit cases.
    /// </summary>
    private void process()
    {
        AuditPolicyCaseGroup                auditPolicyCaseGroup;
        SysPolicyName                       policyName;
        AuditPolicyRuleViolation            allRuleViolation;

        policyName = SysPolicy::find(policyRecId).Name;
        caseCount = 0;
        if (this.checkBatchErrorExists())
        {
            // since all the task not end successfully, so clean up the violation table and return.
            AuditPolicyRuleViolation::deleteAll(batchId, executionTime);
            return;
        }

        // determine whether any violation document is created.
        select count(RecId) from allRuleViolation
            where allRuleViolation.BatchJob == batchId &&
                  allRuleViolation.PolicyExecutionTimestamp == executionTime;

        // determine whether workflow is enabled.
        canSubmitToWorkFlow = this.isWorkFlowEnable();

        info(strfmt("@SYS330003", policyName));
        info(strfmt("@SYS329998", allRuleViolation.RecId));

        try
        {
            ttsbegin;
            if (allRuleViolation.RecId != 0)
            {
                //Creating case record for duplicate rules, as they are independent of policy ‘case grouping criteria’.
                this.createAssociatedRecordsForDuplicate();

                while select AuditPolicyCaseGroupType, SourceRelationType, RecId from  auditPolicyCaseGroup
                {
                    switch (auditPolicyCaseGroup.AuditPolicyCaseGroupType)
                    {
                        case AuditPolicyCaseGroupType::AuditPolicyRule:
                                                        this.createAssociatedRecordsByAuditPolicyRule(auditPolicyCaseGroup.SourceRelationType);
                                                        break;
                        case AuditPolicyCaseGroupType::DocumentAttributes:
                                                        this.createAssociatedRecordsByDocAttributes(auditPolicyCaseGroup.SourceRelationType, auditPolicyCaseGroup.RecId);
                                                        break;
                    }
                }
            }

            this.updateDocumentSelectionDate();
            AuditPolicyExecution::deleteNumberSequence(numberSeqTableRecId);
            ttscommit;

            info(strfmt("@SYS330001", caseCount));
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    ttsabort;
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            ttsabort;
            AuditPolicyRuleViolation::deleteAll(batchId, executionTime);
            throw error("@SYS18447");
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>run</Name>
        <Source><![CDATA[
    /// <summary>
    /// Creates the audit cases.
    /// </summary>
    public void run()
    {
        super();

        // creating the object from default value.
        AuditPolicyCaseBuilder auditPolicyCaseBuilder = AuditPolicyCaseBuilder::construct(0, DateTimeUtil::utcNow(), 0, 0, 0);

        // Init. the object with last save value.
        auditPolicyCaseBuilder.unpack(this.pack());

        auditPolicyCaseBuilder.process();
    }

]]></Source>
      </Method>
      <Method>
        <Name>runsImpersonated</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Indicates whether a job can be executed in impersonate mode.
    /// </summary>
    /// <returns>
    ///    true if the job can be executed in impersonate mode; otherwise, false.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
      </Method>
      <Method>
        <Name>unpack</Name>
        <Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList]    = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
      </Method>
      <Method>
        <Name>updateDocumentSelectionDate</Name>
        <Source><![CDATA[
    /// <summary>
    /// Updates the dates in the <c>AuditPolicyAdditionalOption</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateDocumentSelectionDate()
    {
        AuditPolicyAdditionalOption             auditPolicyAdditionalOption;
        utcdatetime                             newTodate;
        utcdatetime                             newFromdate;

        auditPolicyAdditionalOption = AuditPolicyAdditionalOption::findByPolicy(policyRecId, true);

        if (auditPolicyAdditionalOption.RecId != 0)
        {
            //date is blank
            if (!auditPolicyAdditionalOption.DocumentSelectionToDate)
            {
                newFromdate = executionTime;
                newFromdate = DateTimeUtil::addSeconds(newFromdate, 1);
                newTodate = DateTimeUtil::maxValue();
            }
            else
            {
                if (auditPolicyAdditionalOption.DocumentSelectionToDate <= executionTime)
                {
                    newFromdate = auditPolicyAdditionalOption.DocumentSelectionToDate;
                    newFromdate = DateTimeUtil::addSeconds(newFromdate, 1);
                    newTodate = DateTimeUtil::maxValue();
                }
                else
                {
                    newFromdate = executionTime;
                    newFromdate = DateTimeUtil::addSeconds(newFromdate, 1);
                    newTodate = auditPolicyAdditionalOption.DocumentSelectionToDate;
                }
            }
            //Updating the policy execution date.
            auditPolicyAdditionalOption.DocumentSelectionToDate = newTodate;
            auditPolicyAdditionalOption.DocumentSelectionFromDate = newFromdate;
            auditPolicyAdditionalOption.update();
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>construct</Name>
        <Source><![CDATA[
    /// <summary>
    /// Creates an object of the <c>AuditPolicyCaseBuilder</c> class.
    /// </summary>
    /// <param name="_batchId">
    /// The batch ID of the current batch.
    /// </param>
    /// <param name="_executionTime">
    /// The execution time of the job.
    /// </param>
    /// <param name="_numberSeqTableRecId">
    /// The record ID of the number sequence.
    /// </param>
    /// <param name="_policyRecId">
    /// The record ID of the policy.
    /// </param>
    /// <param name="_documentCount">
    /// The count of document selected for audit.
    /// </param>
    /// <returns>
    /// An object of <c>AuditPolicyCaseBuilder</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AuditPolicyCaseBuilder construct(RefRecId _batchId, utcdatetime _executionTime,RefRecId _numberSeqTableRecId, RefRecId _policyRecId, int _documentCount)
    {
        AuditPolicyCaseBuilder auditPolicyCaseBuilder;

        auditPolicyCaseBuilder = new AuditPolicyCaseBuilder();
        auditPolicyCaseBuilder.parmBatchId(_batchId);
        auditPolicyCaseBuilder.parmExecutionTime(_executionTime);
        auditPolicyCaseBuilder.parmNumberSeqTableRecId(_numberSeqTableRecId);
        auditPolicyCaseBuilder.parmPolicyRecId(_policyRecId);
        auditPolicyCaseBuilder.parmDocumentCount(_documentCount);

        return auditPolicyCaseBuilder;
    }

]]></Source>
      </Method>
      <Method>
        <Name>create</Name>
        <Source><![CDATA[
    /// <summary>
    /// Creates the object of the <c>AuditPolicyCaseBuilder</c> class.
    /// </summary>
    /// <param name="_packedObject">
    /// A container that contains the serialized data of the <c>AuditPolicyCaseBuilder</c> class.
    /// </param>
    /// <returns>
    /// An object of the <c>AuditPolicyCaseBuilder</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AuditPolicyCaseBuilder create(container _packedObject)
    {
        AuditPolicyCaseBuilder auditPolicyCaseBuilder = new AuditPolicyCaseBuilder();

        // Init. the object with last save value which come from base class.
        auditPolicyCaseBuilder.unpack(_packedObject);
        return auditPolicyCaseBuilder;
    }

]]></Source>
      </Method>
      <Method>
        <Name>canRunInNewSession</Name>
        <Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>