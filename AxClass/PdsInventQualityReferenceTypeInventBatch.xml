<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsInventQualityReferenceTypeInventBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
[InventQualityReferenceTableName(tableStr(InventBatch))]
class PdsInventQualityReferenceTypeInventBatch extends InventQualityReferenceTypeInventory
{
    InventBatch     inventBatch;
    InventOnHandQty inventOnhand;
    InventSiteId    inventSiteId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initDimensionCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the dimension criteria to be used on the on-hand query.
    /// </summary>
    private void initDimensionCriteria()
    {
        InventDim       inventDim;
        InventDimParm   inventDimParm;

        // set the site for the on-hand criteria
        inventDim.InventSiteId  = inventSiteId;
        inventDim.InventBatchId = inventBatch.InventBatchId;
        inventOnhand.parmInventDim(inventDim);

        inventDimParm = inventOnhand.parmInventDimParm();
        inventDimParm.InventBatchIdFlag  = NoYes::Yes;
        inventDimParm.InventSiteIdFlag   = NoYes::Yes;
        inventOnhand.parmInventDimParm(inventDimParm);

        // sets the dim id for the generated quality orders
        inventDimId = InventDim::findOrCreate(inventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventRefQty</Name>
				<Source><![CDATA[
    public InventQty inventRefQty()
    {
        return inventOnhand.availPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId inventSiteId()
    {
        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    public Common parmBuffer(Common _buffer = inventBatch)
    {
        if (!(_buffer is InventBatch))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        inventBatch   = _buffer;
        itemId        = inventBatch.ItemId;
        inventOnhand  = InventOnHandQty::newInventBatch(inventBatch);

        return inventBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmPdsInventSiteId(InventSiteId _inventSiteId = this.inventSiteId())
    {
        inventSiteId = _inventSiteId;
        this.initDimensionCriteria();
        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWInventRefQty</Name>
				<Source><![CDATA[
    public PdsCWInventQty pdsCWInventRefQty()
    {
        return inventOnhand.pdsCWAvailPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PdsInventQualityReferenceTypeInventBatch construct()
    {
        return new PdsInventQualityReferenceTypeInventBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a query to iterate all physical available refered inventory transactions.
    /// </summary>
    /// <param name="_inventTestDocumentStatus">
    ///    A document status value.
    /// </param>
    /// <param name="_inventTestExecution">
    ///    A test execution value.
    /// </param>
    /// <param name="_discriminatingInventoryDimensions">
    ///    An integer that represents discriminating inventory dimensions.
    /// </param>
    /// <returns>
    ///    A query that iterates all referred inventory transactions.
    /// </returns>
    public Query queryInventTrans(
        InventTestDocumentStatus            _inventTestDocumentStatus,
        InventTestExecution                 _inventTestExecution,
        InventTestDiscriminatingInventDims  _discriminatingInventoryDimensions)
    {
        Query                   query;

        query = super(_inventTestDocumentStatus, _inventTestExecution, _discriminatingInventoryDimensions);
        query.dataSourceTable(tablenum(InventTransOrigin)).addRange(fieldnum(InventTransOrigin, itemId)).value(itemId);
        query.dataSourceTable(tablenum(InventDim)).addRange(fieldnum(InventDim, InventBatchId)).value(inventBatch.InventBatchId);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusReceiptRangeValue</Name>
				<Source><![CDATA[
    protected void setStatusReceiptRangeValue(
        QueryBuildRange          _qbrStatusReceipt,
        InventTestDocumentStatus _inventTestDocumentStatus,
        InventTestExecution      _inventTestExecution)
    {

        // Create inspection order on available onhand..
        _qbrStatusReceipt.value(strFmt('(((%1.%2 >= %4) && (%1.%2 <= %5)) || ((%1.%3 >= %6) && (%1.%3 <= %7)))',
            _qbrStatusReceipt.dataSource().name(),
            fieldStr(InventTrans, StatusReceipt),
            fieldStr(InventTrans, StatusIssue),
            enum2int(StatusReceipt::Purchased),
            enum2int(StatusReceipt::Registered),
            enum2int(StatusIssue::Sold),
            enum2int(StatusIssue::ReservPhysical)));
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusIssueRangeValue</Name>
				<Source><![CDATA[
    protected void setStatusIssueRangeValue(
        QueryBuildRange _qbrStatusIssue,
        InventTestDocumentStatus _inventTestDocumentStatus,
        InventTestExecution _inventTestExecution)
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryInventTransOrdering</Name>
				<Source><![CDATA[
    protected void setQueryInventTransOrdering(
        QueryBuildDataSource _qbdsInventTrans,
        InventTestDocumentStatus _inventTestDocumentStatus,
        InventTestExecution _inventTestExecution)
    {

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>