<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsTransferWorkTransactionType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsTransferWorkTransactionType</c> class handles the common transfer issue and receipt logic.
/// </summary>
abstract class WhsTransferWorkTransactionType extends WhsWorkTransactionType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isForShipment</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isForShipment()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMoveReservationFromWorkLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canMoveReservationFromWorkLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventTransOrigin</Name>
				<Source><![CDATA[
    protected boolean hasInventTransOrigin()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSingleOrderLocationDirectiveScopeSupported</Name>
				<Source><![CDATA[
    protected internal boolean isSingleOrderLocationDirectiveScopeSupported()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationDirectiveQuerySingleOrder</Name>
				<Source><![CDATA[
    public void buildLocationDirectiveQuerySingleOrder(WhsLocationDirectiveTableQueryParameters _parameters)
    {
        if (_parameters.orderNum &&
            _parameters.locDirTable.locateBy != WHSLocDirLocateBy::Cluster)
        {
            SysQuery::findOrCreateRange(_parameters.query.dataSourceTable(tableNum(InventTransferTable)), fieldNum(InventTransferTable, TransferId)).value(queryValue(_parameters.orderNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationDirectiveQuery</Name>
				<Source><![CDATA[
    public void buildLocationDirectiveQuery(WhsLocationDirectiveTableQueryParameters _parameters)
    {
        this.addInventTransIdRange(_parameters.inventTransId, _parameters.query, tableNum(InventTransferLine), fieldNum(InventTransferLine, InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>openSourceOrder</Name>
				<Source><![CDATA[
    public void openSourceOrder(WHSWorkTable _whsWorkTable)
    {
        super(_whsWorkTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceOrderMenuItemDisplayStr</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str sourceOrderMenuItemDisplayStr()
    {
        return menuitemDisplayStr(InventTransferOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceOrderByWorkOrder</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Common findSourceOrderByWorkOrder(WHSWorkOrderInterface _workOrder)
    {
        return InventTransferTable::find(_workOrder.parmOrderNum());
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrderLineNumFromInventTransId</Name>
				<Source><![CDATA[
    public LineNum findOrderLineNumFromInventTransId(InventTransId _inventTransId)
    {
        return InventTransferLine::findTransIdShip(_inventTransId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromName</Name>
				<Source><![CDATA[
    public WHSFromName findFromName(WhsWorkTable _whsWorkTable, WHSLicensePlateLabel _label)
    {
        return InventTransferTable::find(_label.OrderNum).locationNameFrom();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findToName</Name>
				<Source><![CDATA[
    public WHSToName findToName(WhsWorkTable _whsWorkTable, WHSLicensePlateLabel _label)
    {
        return InventTransferTable::find(_label.OrderNum).locationNameTo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromAddress</Name>
				<Source><![CDATA[
    public LogisticsPostalAddress findFromAddress(WhsWorkTable _whsWorkTable, WHSLicensePlateLabel _label)
    {
        return LogisticsPostalAddress::findRecId(InventTransferTable::find(_label.OrderNum).FromPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findToAddress</Name>
				<Source><![CDATA[
    public LogisticsPostalAddress findToAddress(WhsWorkTable _whsWorkTable, WHSLicensePlateLabel _label)
    {
        return LogisticsPostalAddress::findRecId(InventTransferTable::find(_label.OrderNum).ToPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrderedAndRemainQty</Name>
				<Source><![CDATA[
    public container findOrderedAndRemainQty(WhsWorkTable _whsWorkTable, WhsWorkLine _whsWorkLine)
    {
        InventTransferLine inventTransferLine = InventTransferLine::findTransIdShip(_whsWorkLine.InventTransId);

        if (inventTransferLine.RecId && PdsGlobal::pdsIsCWItem(inventTransferLine.ItemId))
        {
            return [inventTransferLine.PdsCWQtyTransfer, inventTransferLine.PdsCWQtyRemainReceive];
        }

        return [inventTransferLine.QtyTransfer, inventTransferLine.QtyRemainReceive];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>