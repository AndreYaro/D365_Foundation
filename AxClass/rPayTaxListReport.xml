<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTaxListReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rPayTaxListReport extends OXMLExcelReport_RPay implements BatchRetryable
{
    RPayTaxListTable        taxListTable, taxListTableCaller;
    RPayTaxListTrans        taxListTrans;
    RPayTaxListTransDetails transDetails;
    QueryRun            reportQR;
    int                 stateCurrent;
    boolean             evtTableChanged, evtTransChanged, evtDetailsChanged, evtNewPage, isRegInfo;

    GniCode_RU          taxAuthorityEventual;
    INN_RU              inn;
    KPPU_RU             kpp;
    OKATO_RU            okato;
    Name                name;
    Set                 handledLines;

    #define.ReportHeader('ReportHeader')
    #define.TableHeader('TableHeader')
    #define.Body('Body')
    #define.Footer('Footer')
    #define.NewPage('NewPage') //pseudo section used to define new page action

    #define.FileName('Реестр сведений о доходах физических лиц')

    #define.StateStart  (0)
    #define.StatePrint  (1)
    #define.StateEnd    (2)

    #define.WidthPage(115)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        return 21.75;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        handledLines = new Set(Types::Container);

        this.modifyQuery();
        this.initSectionMap();
        this.setCurrentWorksheetNum(1, #WidthPage);

        stateCurrent = #StateStart;

        while (reportQR.next())
        {
            taxListTable = reportQR.get(tableNum(RPayTaxListTable));
            taxListTrans = reportQR.get(tableNum(RPayTaxListTrans));
            transDetails = reportQR.get(tableNum(RPayTaxListTransDetails));

            if (handledLines.in([taxListTable.RecId, taxListTrans.EmplId, transDetails.RecId]))
            {
                continue;
            }

            evtTableChanged   = reportQR.changed(tableNum(RPayTaxListTable));
            evtTransChanged   = reportQR.changed(tableNum(RPayTaxListTrans));
            evtDetailsChanged = reportQR.changed(tableNum(RPayTaxListTransDetails));
            evtNewPage = this.isNewPage();

            this.handleAction(this.defineActionSeq());

            evtTableChanged   = false;
            evtTransChanged   = false;
            evtDetailsChanged = false;
            evtNewPage        = false;

            handledLines.add([taxListTable.RecId, taxListTrans.EmplId, transDetails.RecId]);
        }

        if (this.isSectionPrinted())
        {
            this.handleAction(this.defineActionSeq());
            this.setPrintArea();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineActionSeq</Name>
				<Source><![CDATA[
    private container defineActionSeq()
    {
        container con;

        switch (stateCurrent)
        {
            case #StateStart:
                if (evtTableChanged && evtTransChanged)
                {
                    con = [#ReportHeader, #TableHeader, #Body];
                    stateCurrent = #StatePrint;
                }
                else
                {
                    stateCurrent = #StateEnd;
                }
                break;
            case #StatePrint:
                if (evtTransChanged)
                {
                    if (evtTableChanged || evtDetailsChanged)
                    {
                        con = [#Footer, #NewPage, #ReportHeader, #TableHeader];
                    }

                    if (evtNewPage && !(evtTableChanged || evtDetailsChanged))
                    {
                        con = [#NewPage, #TableHeader];
                    }

                    con += #Body;
                }

                if (taxListTable.RecId == 0)
                {
                    con = [#Footer];
                    stateCurrent = #StateEnd;
                }

                break;
            case #StateEnd:
                break;
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return #FileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + curUserId() + '_' + strRem(DateTimeUtil::toStr(DateTimeUtil::utcNow()), ':');
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    private void fillBody()
    {
        this.insertValueToSection('RefNumber', taxListTrans.ReferenceNumber);
        this.insertValueToSection('FIO', RHRMEmplTable::find(taxListTrans.EmplId).personTable().fio());
        this.insertValueToSection('BirthDate', RHRMEmplTable::find(taxListTrans.EmplId).personTable().hcmPersonPrivateDetails().BirthDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #ReportHeader:
                this.fillReportHeader();
                break;
            case #TableHeader:
                this.fillTableHeader();
                break;
            case #Body:
                this.fillBody();
                break;
            case #Footer:
                this.fillFooter();
                break;
            case #NewPage:
                this.newPage();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFooter</Name>
				<Source><![CDATA[
    private void fillFooter()
    {
        this.insertValueToSection('TaxAgentName', OfficialsTrans_RU::find(taxListTable.OffSessionId, OffReportType_RU::RPayTaxList, OffPosition_RU::Responsible).Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    private void fillReportHeader()
    {
        if (!isRegInfo)
        {
            this.initCompanyInfo();
        }

        this.insertValueToSection('ReportName', this.getTitle());
        this.insertValueToSection('ReportDescription', this.getDescription());
        this.insertValueToSection('FileName', this.getFileName());
        this.insertValueToSection('CompanyName', name);
        this.insertValueToSection('INN', strFmt("@GLS110628", inn, kpp));
        this.insertValueToSection('OKATO', okato);
        this.insertValueToSection('TaxSign', this.getReportSign());
        this.insertValueToSection('DocumentQty', transDetails ? transDetails.DocumentQty : taxListTable.DocumentAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTableHeader</Name>
				<Source><![CDATA[
    private void fillTableHeader()
    {
        this.insertValueToSection('RefNoTxt', "@RUP2219");
        this.insertValueToSection('FIOTxt', "@RUP318");
        this.insertValueToSection('BirthDateTxt', "@SYS78855");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    private TempStr getDescription()
    {
        str tmpListNum;

        tmpListNum = strFmt(transDetails ? "@GLS110628" : "@SYS82282", taxListTable.ListNumber, transDetails.ListAddNum);

        return strFmt("@RUP3406", tmpListNum, taxListTable.TransDate, taxAuthorityEventual);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileName</Name>
				<Source><![CDATA[
    #File
    private Filename getFileName()
    {
        Filename  filename;
        container con;

        con      = str2con_RU(transDetails ? transDetails.Filename : taxListTable.FileName, #FilePathDelimiter);
        filename = conPeek(con, conLen(con));

        return strFmt("@RUP3405", filename);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportSign</Name>
				<Source><![CDATA[
    private TempStr getReportSign()
    {
        if (transDetails)
        {
            return int2str(transDetails.EmplSign);
        }
        else
        {
            return int2str(taxListTrans.ReportSign);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTitle</Name>
				<Source><![CDATA[
    private TempStr getTitle()
    {
        #File
        return strUpr(strFmt("@GLS106692", strUpr("@RUP2546") + #delimiterEnter + "@RUP3404", year(taxListTable.PayPeriod)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleAction</Name>
				<Source><![CDATA[
    private void handleAction(container _actions)
    {
        int i;

        for (i = 1; i <= conLen(_actions); ++i)
        {
            if (conPeek(_actions, i) == #NewPage)
            {
                this.newPage();
            }
            else
            {
                this.execute(conPeek(_actions, i));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCompanyInfo</Name>
				<Source><![CDATA[
    private void initCompanyInfo()
    {
        VendTable       vendTable;
        CompanyInfo     companyInfo = CompanyInfo::find();

        vendTable = VendTable::find(Branches_RU::find(taxListTrans.BranchId).VendAccount);
        taxAuthorityEventual    = taxListTrans.BranchId ? TaxAuthorityAddress::find(taxListTable.EventualTaxAuthority).GniCode_RU         : RPayTaxListTable::primaryTaxAuthority().GniCode_RU;
        inn                     = taxListTrans.BranchId ? vendTable.partyINN_RU()                                                         : CompanyInfoHelper::partyINN_RU(companyInfo);
        kpp                     = taxListTrans.BranchId ? vendTable.partyKPPasOfDate_RU()                                                 : CompanyInfoHelper::partyKPP_RU(companyInfo);
        okato                   = taxListTrans.BranchId ? vendTable.partyOKATOasOfDate_RU()                                               : CompanyInfoHelper::partyOKATO_RU(companyInfo);
        name                    = taxListTrans.BranchId ? vendTable.name()                                                                : companyInfo.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    private void initFromArgs(Args _args)
    {
        if (_args && _args.dataset() == tableNum(RPayTaxListTable) && _args.record())
        {
            taxListTableCaller = _args.record();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        reportQR = new QueryRun(this.initQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    private Query initQuery()
    {
        QueryBuildDataSource    tableDS, transDS;
        QueryBuildRange         queryBuildRange;
        Query                   query;

        query = new Query();

        tableDS = query.dataSourceTable(tableNum(RPayTaxListTable));

        if (!tableDS)
        {
            tableDS = query.addDataSource(tableNum(RPayTaxListTable));
        }

        queryBuildRange = tableDS.findRange(fieldNum(RPayTaxListTable, ListNumber));

        if (!queryBuildRange)
        {
            queryBuildRange = tableDS.addRange(fieldNum(RPayTaxListTable, ListNumber));
        }

        if (tableDS)
        {
            queryBuildRange.value(queryValue(taxListTableCaller.ListNumber));
        }

        queryBuildRange = tableDS.findRange(fieldNum(RPayTaxListTable, PayPeriod));

        if (!queryBuildRange)
        {
            queryBuildRange = tableDS.addRange(fieldNum(RPayTaxListTable, PayPeriod));
        }

        if (taxListTableCaller)
        {
            queryBuildRange.value(queryValue(taxListTableCaller.PayPeriod));
        }

        transDS = query.dataSourceTable(tableNum(RPayTaxListTrans));

        if (!transDS)
        {
            transDS = tableDS.addDataSource(tableNum(RPayTaxListTrans));
            transDS.relations(true);
            transDS.addRange(fieldNum(RPayTaxListTrans, EmplId));
            transDS.addSortField(fieldNum(RPayTaxListTrans, ReferenceNumber));
            transDS.addSortField(fieldNum(RPayTaxListTrans, DetailsRefRecId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#ReportHeader);
        this.addSection(#TableHeader);
        this.addSection(#Body);
        this.addSection(#Footer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewPage</Name>
				<Source><![CDATA[
    private boolean isNewPage()
    {
        real    requiredHeight;

        requiredHeight = this.getRangeHeight(#Body);

        return (pageHeight - currentHeight < requiredHeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    private void modifyQuery()
    {
        Query    qDetails;
        QueryBuildDataSource transDS, detailsDS;

        qDetails  = this.queryRun().query();
        transDS   = qDetails.dataSourceTable(tableNum(RPayTaxListTrans));
        detailsDS = transDS.addDataSource(tableNum(RPayTaxListTransDetails));
        detailsDS.relations(true);
        detailsDS.joinMode(JoinMode::OuterJoin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPage</Name>
				<Source><![CDATA[
    private void newPage()
    {
        document.insertPageBreak(currentRow);
        currentHeight = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return reportQR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayTaxListReport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP743";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayTaxListReport rPayTaxListReport = new RPayTaxListReport();

        rPayTaxListReport.initFromArgs(_args);
        rPayTaxListReport.getLast();

        if (rPayTaxListReport.prompt())
        {
            rPayTaxListReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>