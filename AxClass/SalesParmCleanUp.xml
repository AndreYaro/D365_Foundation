<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesParmCleanUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesParmCleanUp extends RunBaseBatch implements BatchRetryable
{
    SalesPurchParmCleanUpMode   cleanUpMode;
    TransDate                   cleanupDate;
    boolean                     setDaysAgo;
    PositiveDays                daysAgo;
    DialogRunbase               dialog;

    DialogField                 dialogCleanUpMode;
    DialogField                 dialogCleanupDate;
    DialogField                 dialogSetDaysAgo;
    DialogField                 dialogDaysAgo;

    private SalesInstrumentationLogger logger;

    #DEFINE.CurrentVersion(3)
    #DEFINE.Version2(2)

    #LOCALMACRO.CurrentList
        cleanUpMode,
        cleanupDate,
        setDaysAgo,
        daysAgo
    #Endmacro

    #LOCALMACRO.Version2List
        cleanUpMode,
        cleanupDate
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteSalesParmTables</Name>
				<Source><![CDATA[
    [HookableAttribute(true)]
    protected void deleteSalesParmTables()
    {
        this.ensureLoggerInstantiated();

        SalesParmTable      salesParmTable;
        SalesParmUpdate     salesParmUpdate;
        SalesParmSubTable   salesParmSubTable;
        SalesParmLine       salesParmLine;
        SalesParmSubLine    salesParmSubLine;

        utcdatetime cleanUpDateTime = datetoendUtcDateTime(cleanupDate, DateTimeUtil::getUserPreferredTimeZone());

        using (var activityContext = logger.salesParmCleanupActivities().legacyDeleteSalesParmTable())
        {
            activityContext.addCustomProperty("cleanUpDateTime", DateTimeUtil::toStr(cleanUpDateTime));

            this.deleteFromSalesParmTable(cleanUpDateTime);
        }

        using (var activityContext = logger.salesParmCleanupActivities().legacyDeleteSalesParmUpdate())
        {
            this.skipDeleteLogic(salesParmUpdate);

            if (SalesCleanUpConsiderSalesParmUpdateCreatedDateFlight::instance().isEnabled())
            {
                delete_from salesParmUpdate
                    where salesParmUpdate.CreatedDateTime <= cleanUpDateTime
                        notexists join salesParmTable
                            where salesParmUpdate.ParmId == salesParmTable.ParmId;
            }
            else
            {
                delete_from salesParmUpdate
                    notexists join salesParmTable
                        where salesParmUpdate.ParmId == salesParmTable.ParmId;
            }
        }

        using (var activityContext = logger.salesParmCleanupActivities().legacyDeleteSalesParmSubTable())
        {
            this.skipDeleteLogic(salesParmSubTable);
            delete_from salesParmSubTable
                notexists join salesParmTable
                    where salesParmSubTable.ParmId  == salesParmTable.ParmId   &&
                        salesParmSubTable.TableRefId  == salesParmTable.TableRefId;
        }

        using (var activityContext = logger.salesParmCleanupActivities().legacyDeleteSalesParmLine())
        {
            this.skipDeleteLogic(salesParmLine);
            delete_from salesParmLine
                notexists join salesParmTable
                    where salesParmLine.ParmId  == salesParmTable.ParmId   &&
                        salesParmLine.TableRefId  == salesParmTable.TableRefId;
        }

        using (var activityContext = logger.salesParmCleanupActivities().legacyDeleteSalesParmSubLine())
        {
            this.skipDeleteLogic(salesParmSubLine);
            delete_from salesParmSubLine
                notexists join salesParmLine
                    where salesParmSubLine.LineRefRecId == salesParmLine.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDeleteLogic</Name>
				<Source><![CDATA[
    private void skipDeleteLogic(Common _common)
    {
        _common.skipDataMethods(true);
        _common.skipDeleteActions(true);
        _common.skipEvents(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromSalesParmTable</Name>
				<Source><![CDATA[
    private void deleteFromSalesParmTable(utcdatetime _cleanUpDateTime)
    {
        SalesParmTable salesParmTable;

        SysDaQueryObject sysDaQueryObject = new SysDaQueryObject(salesParmTable);

        if (this.isSingleSalesOrder())
        {
            sysDaQueryObject = this.buildWhereClauseForSalesParmTableSingleSalesOrder(sysDaQueryObject, salesParmTable);
        }
        else if (cleanUpMode == SalesPurchParmCleanUpMode::All)
        {
            sysDaQueryObject = this.buildWhereClauseForSalesParmTableAll(sysDaQueryObject, salesParmTable, _cleanUpDateTime);
        }
        else if (cleanUpMode == SalesPurchParmCleanUpMode::Executed)
        {
            sysDaQueryObject = this.buildWhereClauseForSalesParmTableExecuted(sysDaQueryObject, salesParmTable, _cleanUpDateTime);
        }
        else if (cleanUpMode == SalesPurchParmCleanUpMode::Waiting)
        {
            sysDaQueryObject = this.buildWhereClauseForSalesParmTableWaiting(sysDaQueryObject, salesParmTable, _cleanUpDateTime);
        }
        else
        {
            sysDaQueryObject = this.buildWhereClauseForSalesParmTableExecutedOrWithErrors(sysDaQueryObject, salesParmTable, _cleanUpDateTime);
        }

        SysDaDeleteStatement sysDaDeleteStatement = new SysDaDeleteStatement();
        SysDaDeleteObject sysDaDeleteObject = new SysDaDeleteObject(sysDaQueryObject);
        
        this.skipDeleteLogic(salesParmTable);
        ttsbegin;
        sysDaDeleteStatement.executeQuery(sysDaDeleteObject);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereClauseForSalesParmTableSingleSalesOrder</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal SysDaQueryObject buildWhereClauseForSalesParmTableSingleSalesOrder(SysDaQueryObject _sysDaQueryObject, SalesParmTable _salesParmTable)
    {
        SysDaQueryExpression whereClause = new SysDaEqualsExpression(
            new SysDaFieldExpression(_salesParmTable, fieldStr(SalesParmTable, SalesId)),
            new SysDaValueExpression(this.getSalesId()));

        _sysDaQueryObject.whereClause(whereClause);

        return _sysDaQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesId</Name>
				<Source><![CDATA[
    internal SalesId getSalesId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereClauseForSalesParmTableExecuted</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal SysDaQueryObject buildWhereClauseForSalesParmTableExecuted(SysDaQueryObject _sysDaQueryObject, SalesParmTable _salesParmTable, utcdatetime _cleanUpDateTime)
    {
        SysDaQueryExpression whereClause = new SysDaLessThanOrEqualsExpression(
            new SysDaFieldExpression(_salesParmTable, fieldStr(SalesParmTable, CreatedDateTime)),
            new SysDaValueExpression(_cleanUpDateTime))
        .and (new SysDaEqualsExpression(
            new SysDaFieldExpression(_salesParmTable, fieldStr(SalesParmTable, ParmJobStatus)),
            new SysDaValueExpression(ParmJobStatus::Executed)));

        _sysDaQueryObject.whereClause(whereClause);

        return _sysDaQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereClauseForSalesParmTableWaiting</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal SysDaQueryObject buildWhereClauseForSalesParmTableWaiting(SysDaQueryObject _sysDaQueryObject, SalesParmTable _salesParmTable, utcdatetime _cleanUpDateTime)
    {
        SysDaQueryExpression whereClause = new SysDaLessThanOrEqualsExpression(
            new SysDaFieldExpression(_salesParmTable, fieldStr(SalesParmTable, CreatedDateTime)),
            new SysDaValueExpression(_cleanUpDateTime))
        .and (new SysDaEqualsExpression(
            new SysDaFieldExpression(_salesParmTable, fieldStr(SalesParmTable, ParmJobStatus)),
            new SysDaValueExpression(ParmJobStatus::Waiting)));

        _sysDaQueryObject.whereClause(whereClause);

        return _sysDaQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereClauseForSalesParmTableAll</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal SysDaQueryObject buildWhereClauseForSalesParmTableAll(SysDaQueryObject _sysDaQueryObject, SalesParmTable _salesParmTable, utcdatetime _cleanUpDateTime)
    {
        SysDaQueryExpression whereClause = new SysDaLessThanOrEqualsExpression(
            new SysDaFieldExpression(_salesParmTable, fieldStr(SalesParmTable, CreatedDateTime)),
            new SysDaValueExpression(_cleanUpDateTime));

        _sysDaQueryObject.whereClause(whereClause);

        return _sysDaQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereClauseForSalesParmTableExecutedOrWithErrors</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal SysDaQueryObject buildWhereClauseForSalesParmTableExecutedOrWithErrors(SysDaQueryObject _sysDaQueryObject, SalesParmTable _salesParmTable, utcdatetime _cleanUpDateTime)
    {
        SysDaQueryExpression whereClause = new SysDaLessThanOrEqualsExpression(
            new SysDaFieldExpression(_salesParmTable, fieldStr(SalesParmTable, CreatedDateTime)),
            new SysDaValueExpression(_cleanUpDateTime))
        .and ((new SysDaEqualsExpression(
            new SysDaFieldExpression(_salesParmTable, fieldStr(SalesParmTable, ParmJobStatus)),
            new SysDaValueExpression(ParmJobStatus::Executed)))
        .or (new SysDaEqualsExpression(
            new SysDaFieldExpression(_salesParmTable, fieldStr(SalesParmTable, ParmJobStatus)),
            new SysDaValueExpression(ParmJobStatus::ContainErrors))));

        _sysDaQueryObject.WhereClause(whereClause);

        return _sysDaQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        dialog = super();

        dialogCleanUpMode = dialog.addFieldValue(enumStr(SalesPurchParmCleanUpMode), cleanUpMode);

        dialogCleanupDate = dialog.addFieldValue(extendedTypeStr(TransDate), cleanupDate, "@SYS75241", "@SCM:SalesParmCleanUpCreatedUntil_HelpText");
        dialogSetDaysAgo = dialog.addFieldValue(enumStr(NoYes), setDaysAgo, "@SCM:SalesParmCleanUpSetDaysAgo", "@SCM:SalesParmCleanUpSetDaysAgo_HelpText");
        dialogDaysAgo = dialog.addFieldValue(extendedTypeStr(PositiveDays), daysAgo, "@SCM:SalesParmCleanUpDaysAgo", "@SCM:SalesParmCleanUpDaysAgo_HelpText");

        dialogSetDaysAgo.control().registerOverrideMethod(methodStr(FormCheckBoxControl, modified), methodStr(SalesParmCleanUp, setDaysAgoModified), this);

        this.setEnabled();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDaysAgoModified</Name>
				<Source><![CDATA[
    private boolean setDaysAgoModified(FormCheckBoxControl _callerControl)
    {
        this.setEnabled();
        return _callerControl.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabled</Name>
				<Source><![CDATA[
    private void setEnabled()
    {
        if (dialogSetDaysAgo.value())
        {
            dialogCleanupDate.Value(dateNull());
            dialogCleanupDate.enabled(false);
            dialogDaysAgo.enabled(true);
        }
        else
        {
            dialogDaysAgo.Value(0);
            dialogDaysAgo.enabled(false);
            dialogCleanupDate.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        cleanUpMode = dialogCleanUpMode.value();
        cleanupDate = dialogCleanupDate.value();

        setDaysAgo = dialogSetDaysAgo.value();
        daysAgo = dialogDaysAgo.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        if (!this.validateCleanUpMode())
        {
            return;
        }
        
        cleanupDate = setDaysAgo ? DateTimeUtil::date(DateTimeUtil::addDays(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), -daysAgo)) : cleanupDate;
        this.chooseCleanupImplementation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseCleanupImplementation</Name>
				<Source><![CDATA[
    private void chooseCleanupImplementation()
    {
        this.ensureLoggerInstantiated();

        if (!this.isSingleSalesOrder() && SalesParmCleanupStoredProcedureFeature::instance().isEnabled())
        {
            using (var activityContext = logger.salesParmCleanupActivities().storedProcedureRun())
            {
                this.storedProcedureImplementation(activityContext);
            }
        }
        else
        {
            using (var activityContext = logger.salesParmCleanupActivities().legacyQueryRun())
            {
                this.legacyQueryImplementation(activityContext);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>storedProcedureImplementation</Name>
				<Source><![CDATA[
    private void storedProcedureImplementation(SysInstrumentationActivityContext _callerActivityContext)
    {
        // Run in batches (SalesParmTable records), and for a max duration
        int batchSize = this.getStoredProcedureBatchSize();
        int maxCleanupDurationHours = this.getStoredProcedureMaxCleanupDurationHours();
        int daysRetention = this.getNumberOfDaysRetention();
        int64 numHeadersToCleanup = this.getHeaderCountToCleanup();

        _callerActivityContext.addCustomProperty("cleanupDateTime", DateTimeUtil::toStr(cleanupDate));
        _callerActivityContext.addCustomProperty("cleanUpMode", enum2Value(cleanUpMode));
        _callerActivityContext.addCustomProperty("batchSize", int2Str(batchSize));
        _callerActivityContext.addCustomProperty("maxCleanupDurationHours", int2Str(maxCleanupDurationHours));
        _callerActivityContext.addCustomProperty("daysRetention", int2Str(daysRetention));
        _callerActivityContext.addCustomProperty("numHeadersToCleanup", int642Str(numHeadersToCleanup));

        if (numHeadersToCleanup < 1) return;

        str batchExecuteStatement = this.getStoredProcedureExecuteStatement(daysRetention, batchSize);

        Connection connection = new Connection();
        SqlStatementExecutePermission permission = new SqlStatementExecutePermission(batchExecuteStatement);
        permission.assert();
        Statement statement = connection.createStatement();

        var cleanupStartTime = DateTimeUtil::utcNow();

        try
        {
            // Delete while there are headers to delete (based on cleanUpDate and cleanUpMode) and max duration has not been exceeded
            while (numHeadersToCleanup > 0 && DateTimeUtil::utcNow() < DateTimeUtil::addHours(cleanupStartTime, maxCleanupDurationHours))
            {
                using (var activityContext = logger.salesParmCleanupActivities().storedProcedureBatch())
                {
                    activityContext.addCustomProperty("numHeadersToCleanup", int642Str(numHeadersToCleanup));

                    statement.executeUpdate(batchExecuteStatement);
                }

                numHeadersToCleanup -= batchSize;
            }

            // If max duration has still not been exceeded, clean-up some orphaned records:
            str referenceDataExecuteStatement = strFmt("%1, @deleteReferenceDataOnly = 1", batchExecuteStatement);

            while (DateTimeUtil::utcNow() < DateTimeUtil::addHours(cleanupStartTime, maxCleanupDurationHours) && this.orphanedRecordsExist())
            {
                using (var activityContext = logger.salesParmCleanupActivities().storedProcedureReferenceDataOnly())
                {
                    statement.executeUpdate(referenceDataExecuteStatement);
                }
            }
        }
        finally
        {
            statement.close();
            CodeAccessPermission::revertAssert();
            connection.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStoredProcedureBatchSize</Name>
				<Source><![CDATA[
    protected int getStoredProcedureBatchSize()
    {
        return 250000;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStoredProcedureMaxCleanupDurationHours</Name>
				<Source><![CDATA[
    protected int getStoredProcedureMaxCleanupDurationHours()
    {
        return 2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfDaysRetention</Name>
				<Source><![CDATA[
    private int getNumberOfDaysRetention()
    {
        int daysRetention = DateTimeUtil::getDifference(DateTimeUtil::date(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())), cleanUpDate) / 60 /*mins*/ / 60 /*hours*/ / 24 /*days*/;
        
        return daysRetention;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderCountToCleanup</Name>
				<Source><![CDATA[
    private int64 getHeaderCountToCleanup()
    {
        utcdatetime cleanUpDateTime = datetoendUtcDateTime(cleanupDate, DateTimeUtil::getUserPreferredTimeZone());

        SalesParmTable salesParmTable;

        using (var activityContext = logger.salesParmCleanupActivities().storedProcedureHeaderCount())
        {
            activityContext.addCustomProperty("cleanUpDateTime", DateTimeUtil::toStr(cleanupDate));

            if (cleanUpMode == SalesPurchParmCleanUpMode::All)
            {
                select count(RecId) from salesParmTable
                    where salesParmTable.CreatedDateTime <= cleanUpDateTime
                        && (salesParmTable.IsSimulatePosting == NoYes::No
                            || salesParmTable.CustPackingSlipJour == 0
                            || salesParmTable.CustInvoiceJourRecId == 0);
            }
            else if (cleanUpMode == SalesPurchParmCleanUpMode::Executed)
            {
                select count(RecId) from salesParmTable
                    where salesParmTable.ParmJobStatus == ParmJobStatus::Executed
                        && salesParmTable.CreatedDateTime <= cleanUpDateTime
                        && (salesParmTable.IsSimulatePosting == NoYes::No
                            || salesParmTable.CustPackingSlipJour == 0
                            || salesParmTable.CustInvoiceJourRecId == 0);
            }
            else if (cleanUpMode == SalesPurchParmCleanUpMode::Waiting)
            {
                select count(RecId) from salesParmTable
                    where salesParmTable.ParmJobStatus == ParmJobStatus::Waiting
                        && salesParmTable.CreatedDateTime <= cleanUpDateTime
                        && (salesParmTable.IsSimulatePosting == NoYes::No
                            || salesParmTable.CustPackingSlipJour == 0
                            || salesParmTable.CustInvoiceJourRecId == 0);
            }
            else
            {
                select count(RecId) from salesParmTable
                    where (salesParmTable.ParmJobStatus == ParmJobStatus::Executed
                            || salesParmTable.ParmJobStatus == ParmJobStatus::ContainErrors)
                        && salesParmTable.CreatedDateTime <= cleanUpDateTime
                        && (salesParmTable.IsSimulatePosting == NoYes::No
                            || salesParmTable.CustPackingSlipJour == 0
                            || salesParmTable.CustInvoiceJourRecId == 0);
            }
        }

        return salesParmTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orphanedRecordsExist</Name>
				<Source><![CDATA[
    private boolean orphanedRecordsExist()
    {
        SalesParmTable salesParmTable;

        SalesParmUpdate salesParmUpdate;
        select count(RecId) from salesParmUpdate
            notexists join salesParmTable
            where salesParmUpdate.ParmId == salesParmTable.ParmId;
        if (salesParmUpdate.RecId > 1000) return true;

        SalesParmSubTable salesParmSubTable;
        select count(RecId) from salesParmSubTable
            notexists join salesParmTable
            where salesParmSubTable.ParmId == salesParmTable.ParmId
            && salesParmSubTable.TableRefId  == salesParmTable.TableRefId;
        if (salesParmSubTable.RecId > 1000) return true;

        SalesParmLine salesParmLine;
        select count(RecId) from salesParmLine
            notexists join salesParmTable
            where salesParmLine.ParmId == salesParmTable.ParmId
            && salesParmLine.TableRefId == salesParmTable.TableRefId;
        if (salesParmLine.RecId > 1000) return true;

        SalesParmSubLine salesParmSubLine;
        select count(RecId) from salesParmSubLine
            notexists join salesParmLine
            where salesParmSubLine.LineRefRecId == salesParmLine.RecId;
        if (salesParmSubLine.RecId > 1000) return true;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStoredProcedureExecuteStatement</Name>
				<Source><![CDATA[
    private str getStoredProcedureExecuteStatement(int _daysRetention, int _batchSize)
    {
        str executeStatement = strFmt("EXEC [DBO].[%1] @daysRetention = %2, @numHeadersToDelete = %3, @partition = %4, @dataAreaId = '%5', @cleanUpMode = %6",
            SalesParmCleanupStoredProcedureBuilder::spName_SalesParmCleanupController,
            int2Str(_daysRetention),
            int2Str(_batchSize),
            int642Str(getCurrentPartitionRecId()),
            curExt(),
            this.getStoredProcedureCleanUpMode(cleanUpMode)
        );

        return executeStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStoredProcedureCleanUpMode</Name>
				<Source><![CDATA[
    private str getStoredProcedureCleanUpMode(SalesPurchParmCleanUpMode _cleanUpMode)
    {
        str ret;

        switch (_cleanUpMode)
        {
            case SalesPurchParmCleanUpMode::Executed :
                ret = "0";
                break;
            case SalesPurchParmCleanUpMode::ExecutedAndErrors :
                ret = "1";
                break;
            case SalesPurchParmCleanUpMode::All :
                ret = "2";
                break;
            case SalesPurchParmCleanUpMode::Waiting :
                ret = "3";
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>legacyQueryImplementation</Name>
				<Source><![CDATA[
    private void legacyQueryImplementation(SysInstrumentationActivityContext _callerActivityContext)
    {
        #OCCRetryCount
        try
        {
            _callerActivityContext.addCustomProperty("currentRetryCount", int2Str(xSession::currentRetryCount()));

            ttsbegin;

            this.deleteSalesParmTables();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job is run by using the account of the user who created the job.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you want a batch job that extends this class to run on a client, you must override this method
    /// to return false. Jobs that cause this method to return true must not access any client-side
    /// functionality. If true is returned, the batch server executes the job by using the <c>runAs</c>
    /// method.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;
            case #Version2 :
                [version, #Version2List] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        if (!cleanupDate && !setDaysAgo)
        {
            ret = checkFailed("@SYS24455");
        }

        return ret && this.validateCleanUpMode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCleanUpMode</Name>
				<Source><![CDATA[
    private boolean validateCleanUpMode()
    {
        boolean ret = true;
 
        if (cleanUpMode == SalesPurchParmCleanUpMode::Waiting
            && !SalesPurchParmCleanUpForWaitingFlight::instance().isEnabled())
        {
            ret = checkFailed("@SCM:CleanupWaitingSalesUpdateHistoryNotSupported");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesParmCleanUp construct()
    {
        return new SalesParmCleanUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SCM:CleanUpSalesUpdateHistory";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        SalesParmCleanUp          salesParmCleanUp = SalesParmCleanUp::newStandard(args);

        if (! salesParmCleanUp.prompt())
        return;

        salesParmCleanUp.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    static SalesParmCleanUp newStandard(Args _args)
    {
        SalesParmCleanUp          salesParmCleanUp = SalesParmCleanUp::construct();

        salesParmCleanUp.getLast();
        salesParmCleanUp.init();

        return salesParmCleanUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDeleteSalesParmTablesHandlerPackadge</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(SalesParmCleanUp), methodStr(SalesParmCleanUp, deleteSalesParmTables))]
    /// <summary>
    /// Handles the associated inventory packing records when you delete a <c>SalesParmTable</c> record.
    /// </summary>
    /// <param name="_args">
    /// An instance of the <c>XppPrePostArgs</c> class.
    /// </param>
    public static void postDeleteSalesParmTablesHandlerPackadge(XppPrePostArgs _args)
    {
        SalesParmTable      salesParmTable;
        SalesParmLine       salesParmLine;
        PlInventPackageParm inventPackageParm;

        inventPackageParm.skipDataMethods(true);
        inventPackageParm.skipDeleteActions(true);
        inventPackageParm.skipEvents(true);

        delete_from inventPackageParm
            where inventPackageParm.RefTableId == salesParmTable.TableId
            notexists join salesParmTable
                where inventPackageParm.RefTableId == salesParmTable.TableId &&
                      inventPackageParm.RefRecId   == salesParmTable.RecId;

        delete_from inventPackageParm
            where inventPackageParm.RefTableId == salesParmLine.TableId
        notexists join salesParmLine
            where inventPackageParm.RefTableId == salesParmLine.TableId &&
                  inventPackageParm.RefRecId   == salesParmLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDeleteSalesParmTablesPricing</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(SalesParmCleanUp), methodStr(SalesParmCleanUp, deleteSalesParmTables))]
    /// <summary>
    /// Handles the associated pricing calculation records when you delete a <c>SalesParmTable</c> record.
    /// </summary>
    /// <param name="_args">
    /// An instance of the <c>XppPrePostArgs</c> class.
    /// </param>
    public static void postDeleteSalesParmTablesPricing(XppPrePostArgs _args)
    {
        SalesParmLine                       salesParmLine;
        PDSSalesParmLinePricingCalculation  pdsSalesParmLinePricingCalculation;

        ttsBegin;

        pdsSalesParmLinePricingCalculation.skipDataMethods(true);
        pdsSalesParmLinePricingCalculation.skipDeleteActions(true);
        pdsSalesParmLinePricingCalculation.skipEvents(true);

        delete_from pdsSalesParmLinePricingCalculation
            notexists join salesParmLine
                where pdsSalesParmLinePricingCalculation.SalesParmLine == salesParmLine.RecId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSingleSalesOrder</Name>
				<Source><![CDATA[
    internal boolean isSingleSalesOrder()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureLoggerInstantiated</Name>
				<Source><![CDATA[
    private void ensureLoggerInstantiated()
    {
        if (!logger)
        {
            logger = SalesInstrumentationLogger::createLogger(classStr(SalesParmCleanUp));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>