<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailGiftCardClosing</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailGiftCardClosing</c> class is the base class used to close expired gift cards.
/// </summary>
abstract class RetailGiftCardClosing extends RunBaseBatch
{
    RetailGiftCardId giftCardId;

    boolean skipGiftCardUpdate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>closeGiftCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes expired gift card.
    /// </summary>
    /// <param name="_giftCardId">
    /// The gift card number.
    /// </param>
    protected void closeGiftCard(RetailGiftCardId _giftCardId)
    {
        AmountCur                   closeBalance;
        CurrencyCode                currency;
        TransDate                   closeDate;
        int                         closeTime;

        if (RetailGiftCardTransactions::unpostedTransactionExist(_giftCardId))
            return;

        closeDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        closeTime = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());

        ttsBegin;

        [currency, closeBalance] = this.updateGiftCard(_giftCardId, closeDate, closeTime);
        this.postGiftCardClosing(_giftCardId, closeDate, currency, closeBalance);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        skipGiftCardUpdate = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGiftCardId</Name>
				<Source><![CDATA[
    public RetailGiftCardId parmGiftCardId(RetailGiftCardId _giftCardId = giftCardId)
    {
        giftCardId = _giftCardId;

        return giftCardId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipGiftCardUpdate</Name>
				<Source><![CDATA[
    public boolean parmSkipGiftCardUpdate(boolean _skipGiftCardUpdate = skipGiftCardUpdate)
    {
        skipGiftCardUpdate = _skipGiftCardUpdate;

        return skipGiftCardUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGiftCardClosing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts gift card closing.
    /// </summary>
    /// <param name="_giftCardId">
    /// The gift card number.
    /// </param>
    /// <param name="_closeDate">
    /// The close date.
    /// </param>
    /// <param name="_currency">
    /// The gift card currency.
    /// </param>
    /// <param name="_closeBalance">
    /// The gift card balance.
    /// </param>
    protected void postGiftCardClosing(RetailGiftCardId _giftCardId, date _closeDate, CurrencyCode _currency, AmountCur _closeBalance)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RetailGiftCardTable giftCardTable;

        // Processing all expired gift cards or only one chosen gift card
        // it can be active because cards for voiding are active
        while select EntryId from giftCardTable
            where (! giftCardId && giftCardTable.Status == RetailGiftCardStatus::Expired) ||
                  (giftCardId && giftCardTable.entryId == giftCardId)
        {
            this.closeGiftCard(giftCardTable.EntryId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGiftCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates gift card status and closes gift card balance.
    /// </summary>
    /// <param name="_giftCardId">
    /// The gift card number.
    /// </param>
    /// <param name="_closeDate">
    /// The close date.
    /// </param>
    /// <param name="_closeTime">
    /// The close time.
    /// </param>
    /// <returns>
    /// Container [gift card currency, gift card closing balance].
    /// </returns>
    protected container updateGiftCard(RetailGiftCardId _giftCardId, date _closeDate, int _closeTime)
    {
        RetailGiftCardTable         giftCard;
        RetailGiftCardTransactions  closeTrans;
        AmountCur                   closeBalance;

        giftCard = RetailGiftCardTable::find(_giftCardId, !skipGiftCardUpdate);

        closeBalance = giftCard.balance();

        if (!skipGiftCardUpdate)
        {
            giftCard.Status = RetailGiftCardStatus::Closed;
            giftCard.update();

            closeTrans.TransDate  = _closeDate;
            closeTrans.TransTime  = _closeTime;
            closeTrans.cardNumber = _giftCardId;
            closeTrans.amount     = - closeBalance;
            closeTrans.operation  = RetailGiftCardOperation::Close;
            closeTrans.insert();
        }

        return [giftCard.currencyCode, closeBalance];
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>RetailGiftCardClosing</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>RetailGiftCardClosing</c> class.
    /// </returns>
    public static RetailGiftCardClosing construct()
    {
        RetailGiftCardClosing classInstance;

        if (RetailParameters::find().ProcessGiftCardsAsPrepayments_RU)
        {
            classInstance = new RetailGiftCardClosing_Prepayments_RU();
        }
        else
        {
            classInstance = new RetailGiftCardClosing_Standard();
        }

        return classInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYP4880781";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RetailGiftCardClosing giftCardClosing;

        RetailGiftCardClosing::validateSettings();

        giftCardClosing = RetailGiftCardClosing::construct();

        if (giftCardClosing.prompt())
        {
            giftCardClosing.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates requeried settings.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// The procedure must be run in the Gift card company.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The Use gift card policies parameter is not enebled.
    /// </exception>
    private static void validateSettings()
    {
        RetailParameters retailParameters = RetailParameters::find();

        if (retailParameters.GiftCardCompany != curext())
            throw error(strFmt("@SYP4880785",
                SysDictMenu::newMenuItem(menuitemActionStr(RetailGiftCardClosing), MenuItemType::Action).label()));

        if (!retailParameters.UseGiftCardPolicies)
            throw error(strFmt("@SYP4880788",
                SysDictMenu::newMenuItem(menuitemActionStr(RetailGiftCardClosing), MenuItemType::Action).label()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>