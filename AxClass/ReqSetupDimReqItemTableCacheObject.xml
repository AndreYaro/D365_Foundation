<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqSetupDimReqItemTableCacheObject</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class stores the values of a <c>ReqItemTable</c> buffer needed in the <c>ReqSetupDim</c> class.
/// </summary>
class ReqSetupDimReqItemTableCacheObject
{
    public ReqSafetyKeyId MinSafetyKeyId;
    public TimeFenceAuthorization AuthorizationTimeFence;
    public CalendarDays CalendarDaysProduction;
    public CalendarDays CalendarDaysPurchase;
    public CalendarDays CalendarDaysTransfer;
    public TimeFenceCapacity CapacityTimeFence;
    public NoYesId CovFieldsActive;
    public ReqCovInventDimId CovInventDimId;
    public ReqCovPeriod CovPeriod;
    public ReqCovRule CovRule;
    public TimeFenceCoverage CovTimeFence;
    public TimeFenceExplosion ExplosionTimeFence;
    public InventLocationIdReqMain InventLocationIdReqMain;
    public NoYesId ItemCovFieldsActive;
    public ItemId ItemId;
    public LeadTime LeadTimeProduction;
    public NoYesId LeadTimeProductionActive;
    public LeadTime LeadTimePurchase;
    public NoYesId LeadTimePurchaseActive;
    public LeadTimeTransfer LeadTimeTransfer;
    public NoYesId LeadTimeTransferActive;
    public TimeFenceLocking LockingTimeFence;
    public InventQtyMaxOnhand MaxInventOnhand;
    public ReqMaxNegativeDays MaxNegativeDays;
    public ReqMaxPositiveDays MaxPositiveDays;
    public ReqSafetyKeyId MaxSafetyKeyId;
    public InventQtyMinOnhand MinInventOnhand;
    public ReqMinSafetyPeriod MinSafetyPeriod;
    public ReqMinSatisfy MinSatisfy;
    public ReqGroupId ReqGroupId;
    public ReqPOType ReqPOType;
    public NoYesId ReqPOTypeActive;
    public TimeFenceBackRequisition TimeFenceBackRequisition;
    public NoYesId TimeFenceFieldsActive;
    public VendAccount VendId;
    public NoYesId OnHandActive;
    public ReqOnHandConsumptionStrategy OnHandConsumptionStrategy;
    public ReqMustUseLatestPossibleSupplyFirst MustUseLatestPossibleSupplyFirst;

    private boolean IsInitialized;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ReqSetupReqItemTableCacheObject</c> instnace from a <c>ReqItemTable</c> record.
    /// </summary>
    /// <param name = "_record">A <c>ReqItemTable</c> record.</param>
    public void initFromRecord(ReqItemTable _record)
    {
        IsInitialized = true;

        MinSafetyKeyId = _record.MinSafetyKeyId;
        AuthorizationTimeFence = _record.AuthorizationTimeFence;
        CalendarDaysProduction = _record.CalendarDaysProduction;
        CalendarDaysPurchase = _record.CalendarDaysPurchase;
        CalendarDaysTransfer = _record.CalendarDaysTransfer;
        CapacityTimeFence = _record.CapacityTimeFence;
        CovFieldsActive = _record.CovFieldsActive;
        CovInventDimId = _record.CovInventDimId;
        CovPeriod = _record.CovPeriod;
        CovRule = _record.CovRule;
        CovTimeFence = _record.CovTimeFence;
        ExplosionTimeFence = _record.ExplosionTimeFence;
        InventLocationIdReqMain = _record.InventLocationIdReqMain;
        ItemCovFieldsActive = _record.ItemCovFieldsActive;
        ItemId = _record.ItemId;
        LeadTimeProduction = _record.LeadTimeProduction;
        LeadTimeProductionActive = _record.LeadTimeProductionActive;
        LeadTimePurchase = _record.LeadTimePurchase;
        LeadTimePurchaseActive = _record.LeadTimePurchaseActive;
        LeadTimeTransfer = _record.LeadTimeTransfer;
        LeadTimeTransferActive = _record.LeadTimeTransferActive;
        LockingTimeFence = _record.LockingTimeFence;
        MaxInventOnhand = _record.MaxInventOnhand;
        MaxNegativeDays = _record.MaxNegativeDays;
        MaxPositiveDays = _record.MaxPositiveDays;
        MaxSafetyKeyId = _record.MaxSafetyKeyId;
        MinInventOnhand = _record.MinInventOnhand;
        MinSafetyPeriod = _record.MinSafetyPeriod;
        MinSatisfy = _record.MinSatisfy;
        ReqGroupId = _record.ReqGroupId;
        ReqPOType = _record.ReqPOType;
        ReqPOTypeActive = _record.ReqPOTypeActive;
        TimeFenceBackRequisition = _record.TimeFenceBackRequisition;
        TimeFenceFieldsActive = _record.TimeFenceFieldsActive;
        VendId = _record.VendId;
        OnHandActive = _record.OnHandActive;
        OnHandConsumptionStrategy = _record.OnHandConsumptionStrategy;
        MustUseLatestPossibleSupplyFirst = _record.MustUseLatestPossibleSupplyFirst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>ReqItemTable</c> record from the cache object, and returns it.
    /// </summary>
    /// <returns>A <c>ReqItemTable</c> record.</returns>
    [Hookable(false)]
    public ReqItemTable toRecord()
    {
        ReqItemTable record;

        record.MinSafetyKeyId = this.MinSafetyKeyId;
        record.AuthorizationTimeFence = this.AuthorizationTimeFence;
        record.CalendarDaysProduction = this.CalendarDaysProduction;
        record.CalendarDaysPurchase = this.CalendarDaysPurchase;
        record.CalendarDaysTransfer = this.CalendarDaysTransfer;
        record.CapacityTimeFence = this.CapacityTimeFence;
        record.CovFieldsActive = this.CovFieldsActive;
        record.CovPeriod = this.CovPeriod;
        record.CovInventDimId = this.CovInventDimId;
        record.CovRule = this.CovRule;
        record.CovTimeFence = this.CovTimeFence;
        record.ExplosionTimeFence = this.ExplosionTimeFence;
        record.InventLocationIdReqMain = this.InventLocationIdReqMain;
        record.ItemCovFieldsActive = this.ItemCovFieldsActive;
        record.ItemId = this.ItemId;
        record.LeadTimeProduction = this.LeadTimeProduction;
        record.LeadTimeProductionActive = this.LeadTimeProductionActive;
        record.LeadTimePurchase = this.LeadTimePurchase;
        record.LeadTimePurchaseActive = this.LeadTimePurchaseActive;
        record.LeadTimeTransfer = this.LeadTimeTransfer;
        record.LeadTimeTransferActive = this.LeadTimeTransferActive;
        record.LockingTimeFence = this.LockingTimeFence;
        record.MaxInventOnhand = this.MaxInventOnhand;
        record.MaxNegativeDays = this.MaxNegativeDays;
        record.MaxPositiveDays = this.MaxPositiveDays;
        record.MaxSafetyKeyId = this.MaxSafetyKeyId;
        record.MinInventOnhand = this.MinInventOnhand;
        record.MinSafetyPeriod = this.MinSafetyPeriod;
        record.MinSatisfy = this.MinSatisfy;
        record.ReqGroupId = this.ReqGroupId;
        record.ReqPOType = this.ReqPOType;
        record.ReqPOTypeActive = this.ReqPOTypeActive;
        record.TimeFenceBackRequisition = this.TimeFenceBackRequisition;
        record.TimeFenceFieldsActive = this.TimeFenceFieldsActive;
        record.VendId = this.VendId;
        record.OnHandActive = this.OnHandActive;
        record.OnHandConsumptionStrategy = this.OnHandConsumptionStrategy;
        record.MustUseLatestPossibleSupplyFirst = this.MustUseLatestPossibleSupplyFirst;

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCacheInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the cache object has been initialized.
    /// </summary>
    /// <returns>true if the cache object is initialized; otherwise, false.</returns>
    public boolean isCacheInitialized()
    {
        return IsInitialized;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>