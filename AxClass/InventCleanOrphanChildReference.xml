<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCleanOrphanChildReference</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A <c>InventCleanOrphanChildReference</c> encapsulates the logic of detection and cleanup of orphan child references { production picking list, report as finished, output order } that might block inventory estimation or transaction deprecation.
/// Orphan child references derived from original child document might be retained despite the fact child origin is deleted OR posted, further blocking parent origin posting.
/// This orphan child references detection and cleanup is a self healing rule executed as part of inventory estimation and is a complementary logic to existing inventory consistency check job.
/// </summary>
internal class InventCleanOrphanChildReference
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkChildReference</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void checkChildReference(InventMovement _movement)
    {
        QueryRun queryRun = new QueryRun(_movement.buildQueryInventTransTransChild());
        Set orphanChildReferences = new Set(Types::Container);

        while (queryRun.next())
        {
            InventTrans inventTrans = queryRun.get(tableNum(InventTrans));
            if (inventTrans.hasOrphanChildReference())
            {
                orphanChildReferences.add([inventTrans.InventTransOrigin, inventTrans.TransChildRefId, inventTrans.TransChildType]);
            }
        }

        InventCleanOrphanChildReference::addToCache(InventTransOrigin::find(_movement.inventTransOriginId()), orphanChildReferences);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToCache</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void addToCache(InventTransOrigin _originKey, Set _orphanChildReferences)
    {        
        if (_orphanChildReferences.elements() > 0)
        {
            SysGlobalCache globalCache = classfactory.globalCache(); 
            if (!globalCache.isSet(classStr(InventCleanOrphanChildReference), _originKey.ReferenceId))
            {
                globalCache.set(classStr(InventCleanOrphanChildReference), _originKey.ReferenceId, _orphanChildReferences);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromCache</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static Set getFromCache(InventTransOrigin _originKey)
    {
        SysGlobalCache globalCache = classfactory.globalCache();
        Set orphanChildReferences;
        var owner = classStr(InventCleanOrphanChildReference);

        if (globalCache.isSet(owner, _originKey.ReferenceId))
        {
            orphanChildReferences = globalCache.get(owner, _originKey.ReferenceId, "");
            globalCache.remove(owner, _originKey.ReferenceId);
        }

        return orphanChildReferences;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearChildReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears child reference from inventory transactions, detected as orphaned that lock corresponding transaction despite the fact the related document is deleted or posted.
    /// </summary>
    /// <param name="_orphanChildReferences">
    ///     A set that contains a child reference to clear
    /// </param>
    [Hookable(false)]
    internal static void clearChildReference(Set _orphanChildReferences)
    {
        #OCCRetryCount
        if (!_orphanChildReferences || !_orphanChildReferences.elements())
        {
            return;
        }

        try
        {
            int64 inventTransOriginResolved;
            SetEnumerator setEnumerator = _orphanChildReferences.getEnumerator();
            while (setEnumerator.moveNext())
            {
                InventTransOriginId   inventTransOrigin;
                InventTransChildRefId transChildRefId;
                InventTransChildType  transChildType;

                [inventTransOrigin, transChildRefId, transChildType] = setEnumerator.current();
                if (!inventTransOrigin || !transChildRefId)
                {
                    continue;
                }

                using (var instrumentationSegment = ProdInstrumentationSegmentFactory::create(ProdInstrumentationActivities::CleanupOrphanChildReference, inventTransOrigin,
                                                        new SysInstrumentationAdditionalParameters().add(ProdInstrumentationActivities::ChildReferenceType, enum2Symbol(enumNum(InventTransChildType), enum2int(transChildType)))))
                {
                    InventTrans inventTrans;

                    ttsbegin;
                    while select forupdate inventTrans
                        where inventTrans.InventTransOrigin == inventTransOrigin
                           && inventTrans.TransChildRefId   == transChildRefId
                           && inventTrans.TransChildType    == transChildType
                    {
                        inventTrans.clearChildReference();
                    }
                    ttscommit;

                    if (!inventTransOriginResolved || inventTransOriginResolved != inventTransOrigin)
                    {
                        info(strFmt("@SCM:InventCleanOrphanChildReferences", InventTransOrigin::find(inventTransOrigin).InventTransId));
                        inventTransOriginResolved = inventTransOrigin;
                    }
                }
            }                                      
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>