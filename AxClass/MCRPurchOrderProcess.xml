<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRPurchOrderProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRPurchOrderProcess</c> updates
/// drop shipment information on the purchase orders.
/// </summary>
class MCRPurchOrderProcess
{
    PurchTable  purchTable;
    NoYes       isProforma;
    NoYes       printFormLetter;
    
    private MCRDropShipInstrumentationLogger dropShipInstrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findOrCreateEmailForVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the <c>Email</c> address for the vendor on the passed <c>PurchTable</c> record.
    /// </summary>
    /// <param name="_purchTable">
    /// The <c>PurchTable</c> record for which this method finds or creates an email address.
    /// </param>
    /// <param name="_email">
    /// The <c>Email</c> object to be set for the vendor on the passed <c>PurchTable</c> record.
    /// </param>
    protected void findOrCreateEmailForVendor(PurchTable _purchTable, Email _email )
    {
        VendTable   vendTable;
        vendTable   = vendTable::find(_purchTable.OrderAccount);
        if (!VendTable.email())
        {
            vendTable.MCRFindOrCreateEmail(_email);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PurchTable</c> record for the <c>MCRPurchOrderProcess</c> class.
    /// </summary>
    /// <param name="_purchTable">
    /// The <c>PurchTable</c> record to be initialized for the <c>MCRPurchOrderProcess</c> class.
    /// </param>
    protected void initPurchTable(PurchTable _purchTable)
    {
        purchTable = _purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets proforma variable.
    /// </summary>
    /// <param name="_isProforma">
    ///     A variable used to tell the purchase order print is in proforma mode.
    /// </param>
    /// <param name="_printFormLetter">
    ///     A variable used to tell the purchase order print; optional.
    /// </param>
    protected void new(NoYes _isProforma, NoYes _printFormLetter = NoYes::Yes)
    {
        isProforma = _isProforma;
        printFormLetter = _printFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the logic to post the packing slip or purchase order.
    /// </summary>
    /// <remarks>
    /// Overridden in child classes to post the appropriate journal.
    /// </remarks>
    public void run()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchaseOrderDropShipStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status for the drop shipment purchase order.
    /// </summary>
    /// <param name="_mcrDropShipStatus">
    /// The <c>MCRDropShipStatus</c> status to be set for the purchase order.
    /// </param>
    protected void updatePurchaseOrderDropShipStatus(MCRDropShipStatus _mcrDropShipStatus)
    {
        PurchLine   purchLine;
        ttsbegin;

        purchLine.skipDataMethods(true);
        if (purchLine.shouldSkipEvents())
        {
            purchLine.skipEvents(true);
        }

        update_recordset purchLine
            setting MCRDropShipStatus   = _mcrDropShipStatus
            where   purchLine.PurchId   ==  purchTable.PurchId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesOrderDropShipStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status for the drop shipment sales order.
    /// </summary>
    /// <param name="_mcrDropShipStatus">
    /// The <c>MCRDropShipStatus</c> status to be set for the sales order.
    /// </param>
    protected void updateSalesOrderDropShipStatus(MCRDropShipStatus _mcrDropShipStatus)
    {
        SalesLine   salesLine;
        PurchLine   purchLine;
        MCRSalesLineDropShipment mcrSalesLineDropShipment;
        
        if (MCRPurchOrderProcessDropShipStatusUpdateFlight::instance().isEnabled())
        {
            using (SysInstrumentationActivityContext activityContext = this.dropShipInstrumentationLogger().dropShipStatusActivities().updatePurchOrderProcessDropShipStatus(purchTable))
            {
                ttsbegin;
                salesLine.skipDataMethods(true);
                while select forupdate mcrSalesLineDropShipment
                    join salesLine
                        where salesLine.RecId == mcrSalesLineDropShipment.salesline
                    join  purchLine
                        where purchLine.PurchId         == purchTable.PurchId
                            && purchLine.InventTransId   == salesLine.InventRefTransId
                {
                    mcrSalesLineDropShipment.DropShipStatus = _mcrDropShipStatus;
                    mcrSalesLineDropShipment.update();
                }
                ttscommit;
            }
        }
        else
        {
            using (SysInstrumentationActivityContext activityContext = this.dropShipInstrumentationLogger().dropShipStatusActivities().updateRecordSetPurchOrderProcessDropShipStatus(purchTable))
            {
                ttsbegin;
                salesLine.skipDataMethods(true);
                update_recordset mcrSalesLineDropShipment
                    setting DropShipStatus = _mcrDropShipStatus
                    join salesLine
                    where salesLine.RecId == mcrSalesLineDropShipment.salesline
                    join  purchLine
                    where purchLine.PurchId         == purchTable.PurchId
                       && purchLine.InventTransId   == salesLine.InventRefTransId;

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePrinterSetting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the passed printer settings against the passed <c>PurchTable</c> record.
    /// </summary>
    /// <param name="_purchTable">
    /// The <c>PurchTable</c> record for which this method validates printer settings.
    /// </param>
    /// <param name="_printerSettings">
    /// The <c>PrintJobSettings</c> object being validated.
    /// </param>
    /// <returns>
    /// true if the passed <c>PrintJobSettings</c> are valid; otherwise, false.
    /// </returns>
    protected PrintJobSettings validatePrinterSetting(PurchTable _purchTable, PrintJobSettings _printerSettings)

    {
        container           dialogVal;
        Email               email;

        switch (_printerSettings.getTarget())
        {
            case PrintMedium::Mail:
                if (!_printerSettings.mailTo())
                {
                    dialogVal = MCRPurchOrderProcess::emailDialogPrompt();
                    [email] = dialogVal;
                    if (email)
                    {
                        this.findOrCreateEmailForVendor(_purchTable, email);
                    }
                    else
                    {
                        // Throw an error based on an email address not being provided.
                        throw error("@MCR10734");
                    }
                }
                _printerSettings.mailTo(email );
                _printerSettings.mailSubject("@MCR10735");
                break;
            default:
                break;
        }

        return _printerSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of this class.
    /// </summary>
    /// <param name="_documentStatus">
    /// The document status used to determine which child to instantiate.
    /// </param>
    /// <param name="_isProforma">
    /// A <c>boolean</c> used to determine whether the purchase order is pro-forma.
    /// </param>
    /// <param name="_printFormLetter">
    /// A <c>boolean</c> used to determine whether to print the purchase order; optional.
    /// </param>
    /// <returns>
    /// A new instance of the appropriate child class.
    /// </returns>
    public static MCRPurchOrderProcess  construct(
        DocumentStatus    _documentStatus,
        NoYes             _isProforma,
        NoYes             _printFormLetter = NoYes::Yes)
    {
        switch (_documentStatus)
        {
            case DocumentStatus::PurchaseOrder:
                return new MCRPurchOrderProcess_PurchaseOrder(_isProforma, _printFormLetter);
            case DocumentStatus::PackingSlip:
                return new MCRPurchOrderProcess_PackingSlip(_isProforma);
            default:
                throw error(strFmt("@SYS19306", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>emailDialogPrompt</Name>
				<Source><![CDATA[
    private static container emailDialogPrompt()
    {
        Dialog              dialog;
        DialogField         fieldEmailAddress;
        DialogText          fieldText;
        dialog              = new Dialog("@MCR10633");
        fieldText           = dialog.addText("@MCR10634");
        fieldEmailAddress   = dialog.addField(extendedTypeStr(Email));

        if (!dialog.run())
        {
            return conNull();
        }

        return [fieldEmailAddress.value() ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMCRDirectDeliveryNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the direct delivery receipt number for the direct delivery purchase order.
    /// </summary>
    /// <returns>
    /// Direct delivery receipt number for the direct delivery puchase order.
    /// </returns>
    static Num getMCRDirectDeliveryNum()
    {
        return NumberSeq::newGetNumFromCode(PurchParameters::MCRNumRefMCRDirectDeliveryNum().numberSequenceTable().NumberSequence).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Processes a purchase order and create a journal via <c>MCRPurchOrderProcess</c> class.
    /// </summary>
    /// <param name="args">
    ///     A set of <c>Args</c> from the calling object.
    /// </param>
    /// <remarks>
    ///     Process a purchase order creating a purchase order journal and packing slip journal within
    ///     <c>MCRPurchOrderProcess</c> class.
    /// </remarks>
    public static void main(Args args)
    {
        MCRPurchOrderProcess    mcrPurchOrderProcess;
        PurchTable              purchTable;
        PurchLine               purchLine;
        Common                  record;
        FormDataSource          formDataSource;
        boolean                 isProforma;
        boolean                 printFormLetter;

        if (!args)
        {
            throw error("@SYS25407");
        }

        isProforma  = args.parm() ? NoYes::Yes: NoYes::No;
        printFormLetter = (args.menuItemName() == menuitemActionStr(MCRPurchOrderProcess_PurchaseOrderNoPrnt)) ? NoYes::No : NoYes::Yes;

        mcrPurchOrderProcess  = MCRPurchOrderProcess::construct(args.parmEnum(), isProforma, printFormLetter);

        // Process all selected purchase orders
        formDataSource      = FormDataUtil::getFormDataSource(args.record());
        for (record = formDataSource.getFirst(true) ? formDataSource.getFirst(true): args.record();
            record;
            record = formDataSource.getNext())
        {
            if (record)
            {
                switch (record.TableId)
                {
                    case tableNum(PurchTable):
                        purchTable  = record;
                        mcrPurchOrderProcess.initPurchTable(purchTable);
                        break;
                    case tableNum(PurchLine):
                        purchLine   = record;
                        mcrPurchOrderProcess.initPurchTable(PurchTable::find(purchLine.PurchId));
                        break;
                    default                 :
                        throw error(strfmt("@SPS1272",funcname()));
                }
            }
            mcrPurchOrderProcess.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dropShipInstrumentationLogger</Name>
				<Source><![CDATA[
    final internal MCRDropShipInstrumentationLogger dropShipInstrumentationLogger()
    {
        if (!dropShipInstrumentationLogger)
        {
            dropShipInstrumentationLogger = MCRDropShipInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return dropShipInstrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>