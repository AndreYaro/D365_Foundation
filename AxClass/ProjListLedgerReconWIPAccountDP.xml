<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListLedgerReconWIPAccountDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListLedgerReconWIPAccountDP</c> class contains the declaration of the global variables
///    to be used in the <c>ProjListLedgerReconWIPAccount</c> report.
/// </summary>
/// <remarks>
///    This class provides methods to fetch the data that is used by the
///    <c>ProjListLedgerReconWIPAccount</c> SQL Server Reporting Services report.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(ProjListLedgerReconWIPAccount)),
    SRSReportParameterAttribute(classStr(ProjListLedgerReconContract))
]
public class ProjListLedgerReconWIPAccountDP extends SRSReportDataProviderPreProcessTempDB
{
    TransDate           reconDate;
    boolean             skipZero;
    boolean             specifyLedger;
    boolean             total;
    AmountMST           balanceAmount;
    AmountMST           balanceTotal;
    ProjTrans           projTrans;
    int                 counter, check;
    boolean             bltotal;
    AccountName         accountName;
    MainAccount         mainAccount;
    DimensionDisplayValue               displayValue;
    ProjListLedgerReconWIPAccountTmp    tmpProjListLedgerReconWIPAccount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>emplItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>EmplId</c> or <c>ItemId</c> value to display on the report.
    /// </summary>
    /// <returns>
    ///    The <c>EmplId</c> or <c>ItemId</c> value, based on the specified enumeration value.
    /// </returns>
    public ProjItemId emplItemId()
    {
        switch (projTrans.transType())
        {
            case ProjTransType::Hour:
            case ProjTransType::Revenue:
            case ProjTransType::Cost:
                return ResourceFacade::getID(projTrans.resource());

            case ProjTransType::Item:
                return projTrans.itemId();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpProjListLedgerReconWIPAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the temporary table to retrieve the required data.
    /// </summary>
    /// <returns>
    ///    The required report data from the temporary table.
    /// </returns>
    [
    SRSReportDataSetAttribute('ProjListLedgerReconWIPAccountTmp')
]
public ProjListLedgerReconWIPAccountTmp getTmpProjListLedgerReconWIPAccount()
    {
        select tmpProjListLedgerReconWIPAccount;
        return tmpProjListLedgerReconWIPAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListLedgerReconWIPAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the required data and inserts it into the temporary table.
    /// </summary>
    /// <param name="_projTransPosting">
    ///    The <c>ProjTransPosting</c> table to use to assign values to the temporary table columns.
    /// </param>
    public void insertProjListLedgerReconWIPAccount(ProjTransPosting _projTransPosting)
    {
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalEntry                 generalJournalEntry;
        DimensionAttributeValueCombination  davc;

        tmpProjListLedgerReconWIPAccount.clear();

        if (!check == 0)
        {
            tmpProjListLedgerReconWIPAccount.ProjId     = _projTransPosting.ProjId;
            tmpProjListLedgerReconWIPAccount.Voucher    = _projTransPosting.Voucher;
            tmpProjListLedgerReconWIPAccount.Amount1    = balanceAmount;
            tmpProjListLedgerReconWIPAccount.DimensionDisplayValue = displayValue;

            if (!bltotal)
            {
                tmpProjListLedgerReconWIPAccount.Amount2 = balanceAmount;

                LedgerRecId projPostingLedgerRecId = Ledger::findByLegalEntity(CompanyInfo::current(_projTransPosting.DataAreaId)).RecId;

                select sum(AccountingCurrencyAmount) from generalJournalAccountEntry
                    where generalJournalAccountEntry.PostingType == _projTransPosting.PostingType
                        exists join davc
                            where davc.MainAccount == mainAccount.RecId
                               && generaljournalAccountEntry.LedgerDimension == davc.RecId
                                    exists join generalJournalEntry
                                        where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                                            && generalJournalEntry.SubledgerVoucher == _projTransPosting.Voucher
                                            && generalJournalEntry.AccountingDate == _projTransPosting.LedgerTransDate
                                            && generalJournalEntry.Ledger == projPostingLedgerRecId;

                if (generalJournalAccountEntry)
                {
                    tmpProjListLedgerReconWIPAccount.LedgerAmount = generalJournalAccountEntry.AccountingCurrencyAmount;
                }

                tmpProjListLedgerReconWIPAccount.Deviation = tmpProjListLedgerReconWIPAccount.Amount1 - tmpProjListLedgerReconWIPAccount.LedgerAmount;
            }
            else
            {
                tmpProjListLedgerReconWIPAccount.Amount2    = 0;
            }

            tmpProjListLedgerReconWIPAccount.BalanceTotal       = balanceTotal;
            tmpProjListLedgerReconWIPAccount.AmountMST          = _projTransPosting.AmountMst;
            tmpProjListLedgerReconWIPAccount.PostingType        = _projTransPosting.PostingType;
            tmpProjListLedgerReconWIPAccount.PostingVoucher     = _projTransPosting.Voucher;
            tmpProjListLedgerReconWIPAccount.LedgerTransDate    = _projTransPosting.LedgerTransDate;
            tmpProjListLedgerReconWIPAccount.ProjTransType      = _projTransPosting.ProjTransType;
            tmpProjListLedgerReconWIPAccount.AccountName        = accountName;
            tmpProjListLedgerReconWIPAccount.GroupId            = counter;
        }
        else
        {
            tmpProjListLedgerReconWIPAccount.AccountName        = accountName;
        }

        tmpProjListLedgerReconWIPAccount.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineZero</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks for zero values for columns in each row.
    /// </summary>
    /// <param name="_tmpProjTransWIP">
    ///    The <c>TmpProjTransWIP</c> table that contains the values to manipulate.
    /// </param>
    /// <returns>
    ///    true if the line is zero; otherwise, false.
    /// </returns>
    private boolean isLineZero(TmpProjTransWIP _tmpProjTransWIP)
    {
        if (_tmpProjTransWIP.Cost       == 0 &&
        _tmpProjTransWIP.Production == 0 &&
        _tmpProjTransWIP.Sales      == 0 &&
        _tmpProjTransWIP.Profit     == 0 &&
        _tmpProjTransWIP.OnAccount  == 0)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This class provides the ability to write the report business logic. It will be called by SQL Server
    ///    Reporting Services (SSRS) at run time. The method should compute data and populate the data tables
    ///    that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        #define.hide(2)

        ProjTransPosting        projTransPostingSpec,projTransPosting;
        MainAccountNum          mainAccountNum;
        QueryBuildDataSource    qbs;
        QueryRun                queryRun;

        DimensionProvider dimProvider = new DimensionProvider();
        ProjListLedgerReconContract contract = this.parmDataContract() as ProjListLedgerReconContract;

        reconDate           = contract.parmProjReconDate();
        skipZero            = contract.parmProjSkipZero();
        specifyLedger       = contract.parmProjSpecifyLedger();

        queryRun = new QueryRun(this.parmQuery());
        qbs = queryRun.query().dataSourceTable(tableNum(ProjTransPosting));
        qbs.addRange(fieldNum(ProjTransPosting, LedgerTransDate)).status(#hide);
        qbs.addRange(fieldNum(ProjTransPosting, LedgerTransDate)).value(strFmt("%1..%2",dateNull(),queryValue(reconDate)));

        check = 0;
        while (queryRun.next())
        {
            check = 1;
            projTransPosting = queryRun.get(tableNum(ProjTransPosting));
            if (projTransPosting.LedgerDimension)
            {
                mainAccountNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(projTransPosting.LedgerDimension);
                mainAccount = MainAccount::findByMainAccountId(mainAccountNum);
                accountName = mainAccount.localizedName();
                displayValue = dimProvider.getStringValueFromCursor(projTransPosting, fieldStr(ProjPosting, LedgerDimension));

                balanceAmount   = projTransPosting.AmountMst;

                if (balanceAmount || ! skipZero)
                {
                    balanceTotal    += balanceAmount;
                    if (specifyLedger)
                    {
                        while select projTransPostingSpec
                        where projTransPostingSpec.LedgerDimension    == projTransPosting.LedgerDimension
                           && projTransPostingSpec.Voucher            == projTransPosting.Voucher
                           && projTransPostingSpec.LedgerTransDate    <= reconDate
                        {
                            this.insertProjListLedgerReconWIPAccount(projTransPostingSpec);
                            bltotal = true;
                        }
                        bltotal = false;
                        counter++;
                    }
                    else
                    {
                        this.insertProjListLedgerReconWIPAccount(projTransPosting);
                    }

                    total   = true;
                }
            }
        }

        if (check == 0)
        {
            this.insertProjListLedgerReconWIPAccount(projTransPostingSpec);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets the resource category ID to be shown on the report.
    /// </summary>
    /// <returns>
    /// The resource category ID.
    /// </returns>
    public ResourceCategoryID resourceCategoryId()
    {
        return ResourceCategoryFacade::getID(projTrans.resourceCategory());
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets the worker personnel number or the item ID to be shown on the report.
    /// </summary>
    /// <returns>
    /// The worker personnel number or the item ID, which is based on the specified enumeration value.
    /// </returns>
    public ResResourceID workerItemId()
    {
        switch (projTrans.transType())
        {
            case ProjTransType::Hour:
            case ProjTransType::Revenue:
            case ProjTransType::Cost:
                return ResourceFacade::getID(projTrans.resource());

            case ProjTransType::Item:
                return projTrans.itemId();
        }

        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>