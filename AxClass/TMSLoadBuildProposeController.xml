<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSLoadBuildProposeController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSLoadBuildProposeController</c> class is the controller class for proposing loads
/// operation defined on <c>TMSLoadBuildProposeService</c> class.
/// </summary>
class TMSLoadBuildProposeController extends SysOperationServiceController implements BatchRetryable
{
    boolean proposeLoadsSuccess;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        operationReturnValue,
        proposeLoadsSuccess
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@SYP4861196";
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedState)
    {
        container packedSuper;
        int version;

        version = SysOperationHelper::getVersion(packedState);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedSuper] = packedState;

                return super(packedSuper);

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
         return [#CurrentVersion,#CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterOperation</Name>
				<Source><![CDATA[
    protected void afterOperation(SysOperationExecutionMode _executionMode, AifAsyncResult _asyncResult)
    {
        TMSLoadBuildSession loadBuildSession;

        super(_executionMode, _asyncResult);

        proposeLoadsSuccess = false;

        if (_asyncResult.parmIsCompleted() && !_asyncResult.parmHasException())
        {
            loadBuildSession = TMSLoadBuildSession::find(this.operationReturnValue());

            if (loadBuildSession)
            {
                if (loadBuildSession.SessionState == TMSLoadBuildSessionState::LoadsProposed)
                {
                    proposeLoadsSuccess = true;
                }
                else
                {
                    throw error(strFmt("@SYP4861089", loadBuildSession.SessionState, TMSLoadBuildSessionState::LoadsProposed));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProposeLoadsSuccess</Name>
				<Source><![CDATA[
    public boolean getProposeLoadsSuccess()
    {
        return proposeLoadsSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super(classStr(TMSLoadBuildProposeService),
            methodStr(TMSLoadBuildProposeService, proposeLoads),
            SysOperationExecutionMode::Synchronous);

        this.parmShowDialog(false);
        this.parmShowProgressForm(false);
        proposeLoadsSuccess = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSLoadBuildProposeController construct()
    {
        return new TMSLoadBuildProposeController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TMSLoadBuildProposeController   operation;
        TMSLoadBuildProposeDataContract callerDataContract;
        TMSLoadBuildProposeDataContract operationDataContract;
        TMSLoadBuildSessionId           loadBuildSessionId;

        if (_args == null)
        {
            throw error("@SYS18626");
        }

        callerDataContract = _args.parmObject() as TMSLoadBuildProposeDataContract;

        if (!callerDataContract
            || _args.parmEnumType() != enumNum(NoYes))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        operation = TMSLoadBuildProposeController::construct();
        operation.parmExecutionMode(SysOperationExecutionMode::Synchronous);
        operationDataContract = operation.getDataContractObject();
        operationDataContract.copy(callerDataContract);
        operation.startOperation();

        if (operation.getProposeLoadsSuccess() && _args.parmEnum() == NoYes::Yes)
        {
            loadBuildSessionId = operation.operationReturnValue();

            TMSLoadBuildProposeController::openProposedLoads(
                loadBuildSessionId,
                callerDataContract.parmLoadBuildSupplyDemandType(),
                _args.caller());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openProposedLoads</Name>
				<Source><![CDATA[
    private static void openProposedLoads(
        TMSLoadBuildSessionId           _loadBuildSessionId,
        TMSLoadBuildSupplyDemandType    _supplyDemandType,
        Object                          _caller)
    {
        TMSLoadBuildSession loadBuildSession = TMSLoadBuildSession::find(_loadBuildSessionId);
        Args                args = new Args();
        MenuFunction        loadBuildProposals;

        args.record(loadBuildSession);
        args.parmEnumType(enumNum(TMSLoadBuildSupplyDemandType));
        args.parmEnum(_supplyDemandType);
        args.caller(_caller);
        loadBuildProposals = new MenuFunction(menuitemDisplayStr(TMSLoadBuildProposals), MenuItemType::Display);
        loadBuildProposals.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>