<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ExilFeaturesSysSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ExilFeaturesSysSetup</c> class is responsible for populating the <c>EXILFeatures_IT</c> table based on feature status.
/// </summary>
[SysSetupTable(tableStr(EXILFeatures_IT))]
[SysSetupConfig(false, 300, 1.1)]
internal final class ExilFeaturesSysSetup extends SysSetupAsync implements SysSetup
{      
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void loadData()
    {
        CompanyInfo companyInfo;

        while select companyInfo
        {
            changecompany(companyInfo.DataArea)
            {
                container features = EXILFeaturesTmp_IT::getFeatures();
                EXILFeatures_IT exilFeatures = EXILFeatures_IT::find(true);
                Set featuresEnabledSet = exilFeatures.getEnabledFeaturesSet();

                for (int j = 1; j <= conLen(features); j++)
                {
                    EXILFeature feature = conPeek(features, j);

                    switch (feature)
                    {
                        case EXILFeature::Exil2131:
                            if (FeatureStateProvider::isFeatureEnabled(SeparateAcctForCreditNoteFeature::instance()))
                            {
                                featuresEnabledSet.add(feature);
                            }
                            break;

                        default:
                            break;
                    }
                }

                ttsbegin;

                exilFeatures.EnabledFeatures = featuresEnabledSet.pack();
                exilFeatures.update();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>