<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvSharedCategoryRolesEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvSharedCategoryRolesEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateSystemDefinedSubCategories</Name>
				<Source><![CDATA[
    private static void populateSystemDefinedSubCategories(SharedCategoryRoles _roles)
    {
        TrvExpenseType trvExpenseType;
        SharedCategory sharedCategory;

        if (_roles.GlobalCategoryRoleType == SharedCategoryRoleType::findRoleType(CategoryRoleType::Expense).RecId && _roles.ExpenseType != TrvExpType::Empty)
        {
            select firstonly RecId, CategoryId from sharedCategory where sharedCategory.RecId == _roles.GlobalCategory;
            if (sharedCategory.RecId)
            {
                trvExpenseType = TrvExpenseType::construct(_roles.ExpenseType);
                trvExpenseType.populateSystemSubCategory(sharedCategory.CategoryId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SharedCategoryRoles_onUpdating</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the expense role type is changing, delete the existing sub categories.
    /// </summary>
    /// <param name="sender">The form data object raising the event.</param>
    /// <param name="e">Args for the event.</param>
    [DataEventHandler(tableStr(SharedCategoryRoles), DataEventType::Updating)]
    public static void SharedCategoryRoles_onUpdating(Common sender, DataEventArgs e)
    {
        SharedCategoryRoles sharedCategoryRole = sender as SharedCategoryRoles;
        if (sharedCategoryRole.GlobalCategoryRoleType == SharedCategoryRoleType::findRoleType(CategoryRoleType::Expense).RecId)
        {
            if (sharedCategoryRole.ExpenseType != sharedCategoryRole.orig().ExpenseType && 
                    TrvSharedSubCategory::hasReferencedSharedCategory(sharedCategoryRole.GlobalCategory))
            {
                TrvSharedSubCategory trvSharedSubCategory;
                delete_from trvSharedSubCategory where trvSharedSubCategory.SharedCategory == sharedCategoryRole.GlobalCategory;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SharedCategoryRoles_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the expense type was changed, delete all of the subcategories and recreate them.
    /// </summary>
    /// <param name="sender">The form data object raising the event.</param>
    /// <param name="e">Args for the event.</param>
    [DataEventHandler(tableStr(SharedCategoryRoles), DataEventType::Updated)]
    public static void SharedCategoryRoles_onUpdated(Common sender, DataEventArgs e)
    {
        TrvSharedCategoryRolesEventHandler::populateSystemDefinedSubCategories(sender as SharedCategoryRoles);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SharedCategoryRoles_onValidatingWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that there are is an expense type when the category has a role type of expense.
    /// </summary>
    /// <param name="sender">The form data object raising the event.</param>
    /// <param name="e">Args for the event.</param>
    [DataEventHandler(tableStr(SharedCategoryRoles), DataEventType::ValidatingWrite)]
    public static void SharedCategoryRoles_onValidatingWrite(Common sender, DataEventArgs e)
    {
        SharedCategoryRoles sharedCategoryRoles = sender as SharedCategoryRoles;
        ValidateEventArgs ve = e as ValidateEventArgs;
        ve.parmValidateResult(sharedCategoryRoles.validateField(fieldNum(SharedCategoryRoles, ExpenseType)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>SharedCategoryRoles_onValidatingField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the expense type is populated and isn't changed once used.
    /// </summary>
    /// <param name="sender">The form data object raising the event.</param>
    /// <param name="e">Args for the event.</param>
    [DataEventHandler(tableStr(SharedCategoryRoles), DataEventType::ValidatingField)]
    public static void SharedCategoryRoles_onValidatingField(Common sender, DataEventArgs e)
    {
        SharedCategoryRoles sharedCategoryRoles = sender as SharedCategoryRoles;
        ValidateEventArgs ve = e as ValidateEventArgs;
        SharedCategory sharedCategory = SharedCategory::findRecId(sharedCategoryRoles.GlobalCategory);
        TrvCostType trvCostType;
        CategoryTable categoryTable;

        if (sharedCategory.canBeUsedInExpense(false, false))
        {
            if (sharedCategoryRoles.ExpenseType == TrvExpType::Empty)
            {
                ve.parmValidateResult(checkFailed("@SYS190130"));
                return;
            }
        }

        while select crossCompany RecId, DataAreaId from trvCostType 
            where trvCostType.CostType == sharedCategory.CategoryId 
                && trvCostType.ExpType != sharedCategoryRoles.ExpenseType
        {
            select firstonly crosscompany RecId from categoryTable 
                where categoryTable.DataAreaId == trvCostType.DataAreaId 
                    && categoryTable.SharedCategory == sharedCategory.RecId;
            if (categoryTable.RecId)
            {
                ve.parmValidateResult(checkFailed("@SYS190124"));
                return;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>