<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTrans_BR_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension methods for the <c>LedgerJournalTrans</c> class.
/// </summary>
public static class LedgerJournalTrans_BR_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findVendTransOpen_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the VendTransOpen record assigned to this journal record.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    /// A record in the VendTransOpen table; otherwise, an empty record.
    /// </returns>
    public static VendTransOpen findVendTransOpen_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        SpecTrans specTrans;
        VendTransOpen vendTransOpen;

        specTrans = SpecTrans::findBySpec(_ledgerJournalTrans.company(), _ledgerJournalTrans.TableId, _ledgerJournalTrans.RecId);

        if (specTrans)
        {
            vendTransOpen = specTrans.vendTransOpen();
        }

        return vendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceIssueDate_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoices issue date.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>The invoice issue date.</returns>
    public static TransDate invoiceIssueDate_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        TransDate   transDate;
        LedgerJournalType   ledgerJournalType;

        ledgerJournalType = LedgerJournalTable::find(_ledgerJournalTrans.JournalNum).JournalType;

        switch (ledgerJournalType)
        {
            case LedgerJournalType::Payment:
                LedgerJournalTrans_BR::checkFieldViewAccessLevel_BR(tableNum(VendTransOpen), fieldNum(VendTransOpen, TransDate));
                transDate = _ledgerJournalTrans.findVendTransOpen_BR().TransDate;
                break;

            case LedgerJournalType::CustPayment:
                LedgerJournalTrans_BR::checkFieldViewAccessLevel_BR(tableNum(CustTransOpen), fieldNum(CustTransOpen, TransDate));
                transDate = _ledgerJournalTrans.findCustTransOpen_BR().TransDate;
                break;

            default:
                transDate = dateNull();
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>affectsOtherWithholdCalcs_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a journal transaction affects withholding calculations.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>true if it affects withholding calculations; otherwise, false.</returns>
    public static boolean affectsOtherWithholdCalcs_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        RecId               minId;
        RecId               maxId;
        date                periodEnd;
        date                periodStart;
        TaxWithholdTrans    taxCodes;
        TaxWithholdTrans    withhold;
        DirPartyNumber      partyId;

        select firstonly crosscompany RecId, PartyId_BR
            from    withhold
            where   withhold.LedgerJourTransRecId_BR  == _ledgerJournalTrans.RecId
                &&  withhold.TaxWithholdBaseAmount != 0;

        if (!withhold.RecId)
        {
            return false;
        }

        partyId = withhold.PartyId_BR;

        select crosscompany minof(RecId)
            from withhold where withhold.LedgerJourTransRecId_BR  == _ledgerJournalTrans.RecId;
        minId = withhold.RecId;

        periodStart = Global::dateStartMth(_ledgerJournalTrans.TransDate);
        periodEnd   = Global::dateEndMth(periodStart);

        while select crosscompany TaxWithholdCode
            from     taxCodes
            group by TaxWithholdCode
            where    taxCodes.LedgerJourTransRecId_BR  == _ledgerJournalTrans.RecId
                &&   taxCodes.TaxWithholdBaseAmount != 0
        {
            select firstonly crosscompany RecId
                from    withhold
                order by RecId
                where   withhold.LedgerJourTransRecId_BR       != _ledgerJournalTrans.RecId
                    &&  withhold.PartyId_BR                 == partyId
                    &&  withhold.TransDate                  >= periodStart
                    &&  withhold.TransDate                  <= periodEnd
                    &&  withhold.TaxWithholdCode            == taxCodes.TaxWithholdCode
                    &&  withhold.TaxWithholdBaseAmount      != 0
                    &&  withhold.RecId                      > minId
                    &&  withhold.CanBeReversed_BR           == NoYes::Yes;

            if (!withhold.RecId)
            {
                continue;
            }

            maxId = withhold.RecId;

            select firstonly crosscompany RecId
                from    withhold
                where   withhold.LedgerJourTransRecId_BR    != _ledgerJournalTrans.RecId
                    &&  withhold.PartyId_BR                 == partyId
                    &&  withhold.TransDate                  >= periodStart
                    &&  withhold.TransDate                  <= periodEnd
                    &&  withhold.TaxWithholdCode            == taxCodes.TaxWithholdCode
                    &&  withhold.TaxWithholdBaseAmount      != 0
                    &&  withhold.InvoiceTaxWithholdAmount   != 0
                    &&  withhold.RecId                      < maxId
                    &&  withhold.CanBeReversed_BR           == NoYes::Yes;

            if (!withhold.RecId)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCloseTaxWithholdEditStatus_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the journal can close the tax withholding status.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>true if it can close; otherwise, false.</returns>
    public static boolean canCloseTaxWithholdEditStatus_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        return _ledgerJournalTrans.getPaymentExtension_BR().TaxWithholdEditStatus_BR == LedgerTransTaxWithholdEditStatus_BR::Opened;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReopenTaxWithholdEditStatus_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the journal can reopen tax withholding status.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>true if the tax withholding status can be reopened.</returns>
    public static boolean canReopenTaxWithholdEditStatus_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        return  _ledgerJournalTrans.getPaymentExtension_BR().TaxWithholdEditStatus_BR == LedgerTransTaxWithholdEditStatus_BR::Closed
            &&  _ledgerJournalTrans.ledgerJournalTable().Posted == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyName_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the journal line company's name.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    /// The journal line company's name.
    /// </returns>
    public static CompanyName companyName_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        return CompanyInfo::findDataArea(_ledgerJournalTrans.DataAreaId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compCityName_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the journal line company's primary address city.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    /// The journal line company's primary address city.
    /// </returns>
    public static LogisticsAddressCityName compCityName_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        return DirParty::primaryPostalAddress(
            DirPartyTable::findRec(CompanyInfo::findDataArea(_ledgerJournalTrans.DataAreaId).RecId, false, DirPartyType::LegalEntity).RecId
            ).City;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compCNPJCPFNum_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the journal line company's CNPJ/CPF number.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    /// The journal line company's CNPJ/CPF number.
    /// </returns>
    public static CNPJNum_BR compCNPJCPFNum_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        return CompanyInfo::findDataArea(_ledgerJournalTrans.DataAreaId).cnpjCPFNumber_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>compDistrictName_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the journal line company's address district name.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    /// The journal line company's address district name.
    /// </returns>
    public static LogisticsAddressStreet compDistrictName_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        return DirParty::primaryPostalAddress(
            DirPartyTable::findRec(CompanyInfo::findDataArea(_ledgerJournalTrans.DataAreaId).RecId, false, DirPartyType::LegalEntity).RecId
            ).DistrictName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compStateName_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the journal line company's address state name.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    /// The journal line company's address state name.
    /// </returns>
    public static AddressStatename compStateName_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        return DirParty::primaryPostalAddress(
            DirPartyTable::findRec(CompanyInfo::findDataArea(_ledgerJournalTrans.DataAreaId).RecId, false, DirPartyType::LegalEntity).RecId
            ).State;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compStreetName_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the journal line company's address street.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    /// The journal line company's address street.
    /// </returns>
    public static LogisticsAddressStreet compStreetName_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        return DirParty::primaryPostalAddress(
            DirPartyTable::findRec(CompanyInfo::findDataArea(_ledgerJournalTrans.DataAreaId).RecId, false, DirPartyType::LegalEntity).RecId
            ).Street;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compStreetNumber_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the StreetNumber of the company.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    ///    Company StreetNumber.
    /// </returns>
    public static LogisticsAddressStreetNumber compStreetNumber_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        return DirParty::primaryPostalAddress(
            DirPartyTable::findRec(CompanyInfo::findDataArea(_ledgerJournalTrans.DataAreaId).RecId, false, DirPartyType::LegalEntity).RecId
            ).StreetNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compZipCode_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the journal line company's address zip code.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    /// The journal line company's address zip code.
    /// </returns>
    public static LogisticsAddressZipCodeId compZipCode_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        return DirParty::primaryPostalAddress(
            DirPartyTable::findRec(CompanyInfo::findDataArea(_ledgerJournalTrans.DataAreaId).RecId, false, DirPartyType::LegalEntity).RecId
            ).ZipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustTransOpen_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the CustTransOpen record assigned to this journal record.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    /// A record in the CustTransOpen table; otherwise, an empty record.
    /// </returns>
    public static CustTransOpen findCustTransOpen_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        SpecTrans specTrans;
        CustTransOpen custTransOpen;

        specTrans = SpecTrans::findBySpec(_ledgerJournalTrans.company(), _ledgerJournalTrans.TableId, _ledgerJournalTrans.RecId);

        if (specTrans)
        {
            custTransOpen = specTrans.custTransOpen();
        }

        return custTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatTransactionText_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the transaction text for Brazil.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    public static void formatTransactionText_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        TransactionTxt     transactionTxt;

        transactionTxt = TransactionTxt::construct();
        transactionTxt.setDate(_ledgerJournalTrans.TransDate);
        transactionTxt.setVoucher(_ledgerJournalTrans.Voucher);
        transactionTxt.setKey1(_ledgerJournalTrans.accountDisplay());
        transactionTxt.setCustVendName(_ledgerJournalTrans.accountName());

        _ledgerJournalTrans.Txt = transactionTxt.txt(_ledgerJournalTrans.Txt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentExtension_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>LedgerJournalTransPayment_BR</c> object
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <param name="_packNewExtensionTable">
    /// A boolean value; optional
    /// </param>
    /// <returns>
    /// A <c>LedgerJournalTransPayment_BR</c> object
    /// </returns>
    public static LedgerJournalTransPayment_BR getPaymentExtension_BR(LedgerJournalTrans _ledgerJournalTrans, boolean _packNewExtensionTable = true)
    {
        return _ledgerJournalTrans.SysExtensionSerializerMap::getExtensionTable(tableNum(LedgerJournalTransPayment_BR), _packNewExtensionTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleDeleteTaxWithholdEditStatus_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the Tax withholding status.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    public static void handleDeleteTaxWithholdEditStatus_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (_ledgerJournalTrans.getPaymentExtension_BR().TaxWithholdEditStatus_BR == LedgerTransTaxWithholdEditStatus_BR::Closed
            && _ledgerJournalTrans.hasTaxWithholdingTransactions_BR())
        {
            throw error("@Brazil:TaxWithhold_CannotDeleteJournalLine");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleWriteTaxWithholdEditStatus_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the tax withholding status will allow the line to be writen.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>true if valid; otherwise false;</returns>
    public static boolean handleWriteTaxWithholdEditStatus_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ok = true;

        _ledgerJournalTrans.setTaxWithholdEditStatus_BR();

        if (_ledgerJournalTrans.hasConflictingTaxWithholdEditStatus_BR())
        {
            ok  = checkFailed("@GLS2071");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasConflictingTaxWithholdEditStatus_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns true when there's another payment line in the same month, with the same LedgerTransTaxWithholdEditStatus_BR::Opened for the current party.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    ///     True when another payment line is found, for the current party number in the same month with the same TaxWithholdEditStatus_BR
    ///     Otherwise returns false
    /// </returns>
    /// <remarks>
    ///     Used to prevent a new payment line subject to withholding tax be created when there is another payment line with the open state.
    /// </remarks>
    public static boolean hasConflictingTaxWithholdEditStatus_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        Query q;
        QueryRun qr;
        QueryBuildDataSource taxWithholdTransDS;
        QueryBuildFieldList qbfields;

        TaxWithholdTrans taxWithholdTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTransPayment_BR ledgerJournalTransPaym;

        DirPartyNumber       partyNumber;

        date                        periodStart;
        date                        periodEnd;

        if (_ledgerJournalTrans.getPaymentExtension_BR().TaxWithholdEditStatus_BR != LedgerTransTaxWithholdEditStatus_BR::Opened)
        {
            return false;
        }

        periodStart = dateStartMth(_ledgerJournalTrans.TransDate);
        periodEnd   = dateEndMth(periodStart);

        switch (_ledgerJournalTrans.AccountType)
        {
            case LedgerJournalACType::Cust :
                partyNumber = DirPartyTable::findRec(CustTable::find(_ledgerJournalTrans.parmAccount()).Party).PartyNumber;
                break;

            case LedgerJournalACType::Vend :
                partyNumber = DirPartyTable::findRec(VendTable::find(_ledgerJournalTrans.parmAccount()).Party).PartyNumber;
                break;
        }

        q = new Query();

        switch (_ledgerJournalTrans.AccountType)
        {
            case LedgerJournalACType::Cust :
                q.allowCrossCompany(SalesParameters::find().TaxWithholdCalculateCrossCompany_BR);

                break;

            case LedgerJournalACType::Vend :
                q.allowCrossCompany(PurchParameters::find().TaxWithholdCalculateCrossCompany_BR);
                break;

            default :
                q.allowCrossCompany(false);
                break;
        }

        taxWithholdTransDS = q.addDataSource(tableNum(TaxWithholdTrans));
        taxWithholdTransDS.addRange(fieldNum(TaxWithholdTrans, PartyId_BR)).value(partyNumber);
        taxWithholdTransDS.addRange(fieldNum(TaxWithholdTrans, Posted)).value(queryValue(NoYes::No));
        taxWithholdTransDS.addRange(fieldNum(TaxWithholdTrans, LedgerJourTransRecId_BR)).value(SysQuery::valueNot(_ledgerJournalTrans.RecId));
        taxWithholdTransDS.addRange(fieldNum(TaxWithholdTrans,TransDate)).value(queryRange(periodStart,periodEnd));
        qbfields = taxWithholdTransDS.fields();
        qbfields.dynamic(false);
        taxWithholdTransDS.addGroupByField(fieldNum(TaxWithholdTrans, LedgerJourTransRecId_BR));

        qr = new QueryRun(q);

        while (qr.next())
        {
            taxWithholdTrans = qr.get(tableNum(TaxWithholdTrans));

            select firstonly crossCompany RecId from ledgerJournalTrans
                where ledgerJournalTrans.RecId == taxWithholdTrans.LedgerJourTransRecId_BR
                    && ledgerJournalTrans.AccountType == _ledgerJournalTrans.AccountType
                join RecId from ledgerJournalTransPaym
                    where ledgerJournalTransPaym.RefRecId == ledgerJournalTrans.RecId
                        && ledgerJournalTransPaym.TaxWithholdEditStatus_BR == LedgerTransTaxWithholdEditStatus_BR::Opened;

            if (ledgerJournalTrans)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustVendTransOpen_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current journal transaction has a related open transaction.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    /// true if there is an open transaction related to the journal line; otherwise, false.
    /// </returns>
    public static boolean hasCustVendTransOpen_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        SpecTrans           specTrans;
        CustVendTransOpen   custVendTransOpen;
        CustTransOpen       custTransOpen;
        VendTransOpen       vendTransOpen;

        switch (_ledgerJournalTrans.AccountType)
        {
            case LedgerJournalACType::Cust :
                custVendTransOpen   = custTransOpen;
                break;
            case LedgerJournalACType::Vend :
                custVendTransOpen   = vendTransOpen;
                break;
            default :
                return false;
        }

        select firstonly crossCompany RecId from specTrans
            where specTrans.SpecRecId     == _ledgerJournalTrans.RecId
                && specTrans.SpecTableId   == _ledgerJournalTrans.TableId
                && specTrans.SpecCompany   == _ledgerJournalTrans.company()
        join RecId from custVendTransOpen
            where custVendTransOpen.TableId == specTrans.RefTableId
                && custVendTransOpen.RecId   == specTrans.RefRecId
                && custVendTransOpen.DataAreaId == specTrans.RefCompany;

        return specTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTaxWithholdingTransactions_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the journal line has tax withholding status.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>true if there is tax withholding status; otherwise, false.</returns>
    public static boolean hasTaxWithholdingTransactions_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        TaxWithholdTrans    withhold;

        select firstonly RecId
        from    withhold
        where   withhold.LedgerJourTransRecId_BR == _ledgerJournalTrans.RecId
            &&  withhold.TaxWithholdBaseAmount  != 0;

        return withhold.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTaxWithholdSetting_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the journals tax withholding group is valid.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>true if valid; otherwise, false.</returns>
    public static boolean hasTaxWithholdSetting_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        TaxWithholdGroupData    taxWithholdGroup;
        TaxWithholdTable        taxWithholdTable;

        if (!_ledgerJournalTrans.TaxWithholdGroup)
        {
            return false;
        }

        select firstonly RecId
            from taxWithholdGroup
            exists join taxWithholdTable
            where   taxWithholdGroup.TaxWithholdGroup    == _ledgerJournalTrans.TaxWithholdGroup
                &&  taxWithholdGroup.TaxWithholdCode     == taxWithholdTable.TaxWithholdCode
                &&  taxWithholdTable.TaxWithholdBaseType == TaxWithholdBaseType::PctGrsAmtMonth;

        return taxWithholdGroup.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxWithholdEditStatus_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the tax withholding status on the journal line.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    public static void setTaxWithholdEditStatus_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean isCustVendAccType = (_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust || _ledgerJournalTrans.AccountType == LedgerJournalACType::Vend);

        if (!(isCustVendAccType)
             || ((isCustVendAccType) && _ledgerJournalTrans.Invoice)
             || !_ledgerJournalTrans.hasTaxWithholdSetting_BR())
        {
            _ledgerJournalTrans.setNotApplicableTaxWithholdEditStatus_BR();
        }
        else if (_ledgerJournalTrans.getPaymentExtension_BR().TaxWithholdEditStatus_BR != LedgerTransTaxWithholdEditStatus_BR::Closed)
        {
            if (_ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::None || _ledgerJournalTrans.NoEdit ==  NoYes::Yes)
            {
                _ledgerJournalTrans.closeTaxWithholdEditStatus_BR();
            }
            else // since it could have been in NotApplicable status at this moment
            {
                _ledgerJournalTrans.openTaxWithholdEditStatus_BR();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPost_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Runs after the insert() method of <c>LedgerJournalTrans</c> table in order to create
    ///     extension tables for Brazil.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    public static void insertPost_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (!_ledgerJournalTrans.RecId)
        {
            return;
        }

        if (_ledgerJournalTrans.parmAccount())
        {
            if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
            {
                CustEPRemitInfo_BR::setEPRemitInfo(_ledgerJournalTrans);
            }
            else if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
            {
                VendEPRemitInfo_BR::setEPRemitInfo(_ledgerJournalTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmount_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the journal lines invoice amount.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>The invoice amount.</returns>
    public static AmountCur invoiceAmount_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalType   ledgerJournalType;
        AmountCur amountCur;
        SpecTrans           foundSpecTrans;

        ledgerJournalType = LedgerJournalTable::find(_ledgerJournalTrans.JournalNum).JournalType;

        switch (ledgerJournalType)
        {
            case LedgerJournalType::Payment:
                LedgerJournalTrans_BR::checkFieldViewAccessLevel_BR(tableNum(VendTransOpen), fieldNum(VendTransOpen, AmountCur));

                while select crossCompany foundSpecTrans
                    where foundSpecTrans.SpecCompany    == _ledgerJournalTrans.company()
                        && foundSpecTrans.SpecTableId   == _ledgerJournalTrans.TableId
                        && foundSpecTrans.SpecRecId     == _ledgerJournalTrans.RecId
                {
                    amountCur += foundSpecTrans.vendTransOpen().AmountCur;
                }
                break;

            case LedgerJournalType::CustPayment:
                LedgerJournalTrans_BR::checkFieldViewAccessLevel_BR(tableNum(CustTransOpen), fieldNum(CustTransOpen, AmountCur));

                while select crossCompany foundSpecTrans
                    where foundSpecTrans.SpecCompany    == _ledgerJournalTrans.company()
                        && foundSpecTrans.SpecTableId   == _ledgerJournalTrans.TableId
                        && foundSpecTrans.SpecRecId     == _ledgerJournalTrans.RecId
                {
                    amountCur += foundSpecTrans.custTransOpen().AmountCur;
                }
                break;

            default:
                amountCur = 0;
        }
        return abs(amountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDueDate_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoices due date.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>The due date.</returns>
    public static DueDate invoiceDueDate_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        DueDate dueDate;
        LedgerJournalType   ledgerJournalType;

        ledgerJournalType = LedgerJournalTable::find(_ledgerJournalTrans.JournalNum).JournalType;

        switch (ledgerJournalType)
        {
            case LedgerJournalType::Payment:
                LedgerJournalTrans_BR::checkFieldViewAccessLevel_BR(tableNum(VendTransOpen), fieldNum(VendTransOpen, DueDate));
                dueDate = _ledgerJournalTrans.findVendTransOpen_BR().DueDate;
                break;

            case LedgerJournalType::CustPayment:
                LedgerJournalTrans_BR::checkFieldViewAccessLevel_BR(tableNum(CustTransOpen), fieldNum(CustTransOpen, DueDate));
                dueDate = _ledgerJournalTrans.findCustTransOpen_BR().DueDate;
                break;

            default:
                dueDate = dateNull();
        }
        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceNumber_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the journal lines invoice number.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>The invoice number.</returns>
    public static InvoiceId invoiceNumber_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalType   ledgerJournalType;
        InvoiceId           invoiceId;
        VendTransOpen       vendTransOpen;
        CustTransOpen       custTransOpen;

        ledgerJournalType = LedgerJournalTable::find(_ledgerJournalTrans.JournalNum).JournalType;

        switch (ledgerJournalType)
        {
            case LedgerJournalType::Payment:
                LedgerJournalTrans_BR::checkFieldViewAccessLevel_BR(tableNum(VendTrans), fieldNum(VendTrans, Invoice));
                vendTransOpen = _ledgerJournalTrans.findVendTransOpen_BR();
                invoiceId = VendTrans::findByCompany(vendTransOpen.company(), vendTransOpen.RefRecId).Invoice;
                break;

            case LedgerJournalType::CustPayment:
                LedgerJournalTrans_BR::checkFieldViewAccessLevel_BR(tableNum(CustTrans), fieldNum(CustTrans, Invoice));
                custTransOpen = _ledgerJournalTrans.findCustTransOpen_BR();
                invoiceId = CustTrans::findByCompany(custTransOpen.company(), custTransOpen.RefRecId).Invoice;
                break;

            default:
                invoiceId = '';
        }
        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openTaxWithholdEditStatus_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the tax withholding status to open.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    public static void openTaxWithholdEditStatus_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTransPayment_BR ledgerJournalTransPaym = _ledgerJournalTrans.getPaymentExtension_BR();

        ledgerJournalTransPaym.TaxWithholdEditStatus_BR = LedgerTransTaxWithholdEditStatus_BR::Opened;
        _ledgerJournalTrans.packExtensionTable(ledgerJournalTransPaym);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAmount_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payment amount.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>The payment amount.</returns>
    public static AmountCur paymentAmount_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (!(hasFieldAccess(_ledgerJournalTrans.TableId, fieldNum(LedgerJournalTrans, AmountCurDebit))
            && hasFieldAccess(_ledgerJournalTrans.TableId, fieldNum(LedgerJournalTrans, AmountCurCredit))))
        {
            throw error("@SYS57330");
        }

        return _ledgerJournalTrans.AmountCurDebit ? abs(_ledgerJournalTrans.AmountCurDebit) : abs(_ledgerJournalTrans.AmountCurCredit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reopenTaxWithholdEditStatus_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reopens the tax withholding status.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    public static void reopenTaxWithholdEditStatus_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTransPayment_BR ledgerJournalTransPayment;

        ledgerJournalTransPayment = _ledgerJournalTrans.getPaymentExtension_BR();

        if (_ledgerJournalTrans.ledgerJournalTable().Posted == NoYes::Yes)
        {
            ledgerJournalTransPayment.TaxWithholdEditStatus_BR = ledgerJournalTransPayment.orig().TaxWithholdEditStatus_BR;
            _ledgerJournalTrans.packExtensionTable(ledgerJournalTransPayment);
            throw error("@GLS2085");
        }

        ledgerJournalTransPayment.TaxWithholdEditStatus_BR = LedgerTransTaxWithholdEditStatus_BR::Opened;

        if (_ledgerJournalTrans.hasConflictingTaxWithholdEditStatus_BR())
        {
            ledgerJournalTransPayment.TaxWithholdEditStatus_BR = ledgerJournalTransPayment.orig().TaxWithholdEditStatus_BR;
            _ledgerJournalTrans.packExtensionTable(ledgerJournalTransPayment);
            throw error("@GLS2084");
        }

        if (_ledgerJournalTrans.affectsOtherWithholdCalcs_BR())
        {
            ledgerJournalTransPayment.TaxWithholdEditStatus_BR = ledgerJournalTransPayment.orig().TaxWithholdEditStatus_BR;
            _ledgerJournalTrans.packExtensionTable(ledgerJournalTransPayment);
            throw error("@GLS2083");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEPRemitInfo_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the EP Remit info.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    public static void setEPRemitInfo_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust && _ledgerJournalTrans.RecId)
        {
            if (_ledgerJournalTrans.PaymMode)
            {
                CustEPRemitInfo_BR::setEPRemitInfo(_ledgerJournalTrans);
            }
            else
            {
                CustEPRemitInfo_BR::clearEPRemitInfo(_ledgerJournalTrans.RecId);
            }
        }
        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend && _ledgerJournalTrans.RecId)
        {
            if (_ledgerJournalTrans.PaymMode)
            {
                VendEPRemitInfo_BR::setEPRemitInfo(_ledgerJournalTrans);
            }
            else
            {
                VendEPRemitInfo_BR::clearEPRemitInfo(_ledgerJournalTrans.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInterestAndFine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts <c>LedgerJournalTrans</c> fields (FinInterestAmount / FineAmount )
    /// in response to a change in the  <c>LedgerJournalTrans</c> AmountCurDebit or AmountCurCredit value.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <param name="_fieldId">
    /// The field that was modified.
    /// </param>
    public static void setInterestAndFine_BR(LedgerJournalTrans _ledgerJournalTrans, FieldId _fieldId)
    {
        SpecTrans           specTransLoc;
        VendTransOpen       vendTransOpenLoc;
        CustTransOpen       custTransOpenLoc;
        AmountCur           invoiceAmountCur;
        AmountCur           finInterestAmountCur;
        AmountCur           fineAmountCur;
        LedgerJournalTransPayment_BR payment_BR;

        specTransLoc    = SpecTrans::findBySpec(_ledgerJournalTrans.company(), _ledgerJournalTrans.TableId, _ledgerJournalTrans.RecId);

        payment_BR = _ledgerJournalTrans.getPaymentExtension_BR();

        if (specTransLoc)
        {
            switch (_fieldId)
            {
                case fieldNum(LedgerJournalTrans, AmountCurDebit):
                    if (LedgerJournalTable::find(_ledgerJournalTrans.JournalNum).JournalType == LedgerJournalType::Payment)
                    {
                        invoiceAmountCur        = 0;
                        finInterestAmountCur    = 0;
                        fineAmountCur           = 0;
                        while select  crosscompany  specTransLoc
                              where     specTransLoc.SpecCompany == _ledgerJournalTrans.company() &&
                                        specTransLoc.SpecTableId == _ledgerJournalTrans.TableId &&
                                        specTransLoc.SpecRecId   == _ledgerJournalTrans.RecId
                              join      AmountCur, InterestAmountPaymCur_BR, FineAmountPaymCur_BR from vendTransOpenLoc
                              where     vendTransOpenLoc.TableId == specTransLoc.RefTableId &&
                                        vendTransOpenLoc.RecId   == specTransLoc.RefRecId
                        {
                            invoiceAmountCur       += vendTransOpenLoc.AmountCur;
                            finInterestAmountCur   += vendTransOpenLoc.InterestAmountPaymCur_BR;
                            fineAmountCur          += vendTransOpenLoc.FineAmountPaymCur_BR;
                        }

                        if (_ledgerJournalTrans.AmountCurDebit < abs(invoiceAmountCur + finInterestAmountCur + fineAmountCur))
                        {
                            payment_BR.FinInterestAmountCur_BR = 0;
                            payment_BR.FineAmountCur_BR        = 0;
                        }
                    }
                    break;

                case fieldNum(LedgerJournalTrans, AmountCurCredit):
                    if (LedgerJournalTable::find(_ledgerJournalTrans.JournalNum).JournalType == LedgerJournalType::CustPayment)
                    {
                        invoiceAmountCur        = 0;
                        finInterestAmountCur    = 0;
                        fineAmountCur           = 0;

                        while select crosscompany   specTransLoc
                              where     specTransLoc.SpecCompany == _ledgerJournalTrans.company() &&
                                        specTransLoc.SpecTableId == _ledgerJournalTrans.TableId &&
                                        specTransLoc.SpecRecId   == _ledgerJournalTrans.RecId
                              join      AmountCur, InterestAmountPaymCur_BR, FineAmountPaymCur_BR from custTransOpenLoc
                              where     custTransOpenLoc.TableId == specTransLoc.RefTableId &&
                                        custTransOpenLoc.RecId   == specTransLoc.RefRecId
                        {
                            invoiceAmountCur       += custTransOpenLoc.AmountCur;
                            finInterestAmountCur   += custTransOpenLoc.InterestAmountPaymCur_BR;
                            fineAmountCur          += custTransOpenLoc.FineAmountPaymCur_BR;
                        }

                        if (_ledgerJournalTrans.AmountCurDebit < abs(invoiceAmountCur + finInterestAmountCur + fineAmountCur))
                        {
                            payment_BR.FinInterestAmountCur_BR = 0;
                            payment_BR.FineAmountCur_BR        = 0;
                        }
                    }
                default:
                    payment_BR.FinInterestAmountCur_BR = 0;
                    payment_BR.FineAmountCur_BR        = 0;
                    break;
            }
        }
        else
        {
            payment_BR.FinInterestAmountCur_BR = 0;
            payment_BR.FineAmountCur_BR        = 0;
        }

        _ledgerJournalTrans.packExtensionTable(payment_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNotApplicableTaxWithholdEditStatus_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the tax withholding status to not applicable.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    public static void setNotApplicableTaxWithholdEditStatus_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTransPayment_BR ledgerJournalTransPaym = _ledgerJournalTrans.getPaymentExtension_BR();

        ledgerJournalTransPaym.TaxWithholdEditStatus_BR = LedgerTransTaxWithholdEditStatus_BR::NotApplicable;
        if (!FormDataUtil::isFormDataSource(_ledgerJournalTrans))
        {
            _ledgerJournalTrans.packExtensionTable(ledgerJournalTransPaym);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustEPRemitInfo_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates DocumnetType, BankFolder, Instrcution_1 and Instruction_2 in <c>CustEPRemitInfo_BR</c> table.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <param name="_custTransEPRemit">
    /// A reference to the <c>CustTransEPRemit_BR</c> table.
    /// </param>
    public static void updateCustEPRemitInfo_BR(LedgerJournalTrans _ledgerJournalTrans, CustTransEPRemit_BR _custTransEPRemit)
    {
        CustEPRemitInfo_BR  custEPRemitInfoLoc;
        CustTransEPRemit_BR custTransEPRemitLoc;

        custTransEPRemitLoc = _custTransEPRemit;
        ttsbegin;
        if (CustEPRemitInfo_BR::find(_ledgerJournalTrans.RecId,true))
        {
            select firstonly forupdate custEPRemitInfoLoc
                where custEPRemitInfoLoc.LedgerJournalTrans == _ledgerJournalTrans.RecId;

            custEPRemitInfoLoc.DocumentType  = custTransEPRemitLoc.DocumentType ;
            custEPRemitInfoLoc.BankFolder    = custTransEPRemitLoc.BankFolder ;
            custEPRemitInfoLoc.Instruction_1 = custTransEPRemitLoc.Instruction_1;
            custEPRemitInfoLoc.Instruction_2 = custTransEPRemitLoc.Instruction_2 ;
            custEPRemitInfoLoc.update();
        }
        else
        {
            custEPRemitInfoLoc.initFromLedgerJournalTrans(_ledgerJournalTrans);
            custEPRemitInfoLoc.DocumentType  = custTransEPRemitLoc.DocumentType ;
            custEPRemitInfoLoc.BankFolder    = custTransEPRemitLoc.BankFolder ;
            custEPRemitInfoLoc.Instruction_1 = custTransEPRemitLoc.Instruction_1;
            custEPRemitInfoLoc.Instruction_2 = custTransEPRemitLoc.Instruction_2 ;
            custEPRemitInfoLoc.insert();
        }
        ttscommit;
        custEPRemitInfoLoc.reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEPRemitInfo_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the TypedLine, EPBarCodeInfo_BR in <c>VendEPRemitInfo_BR</c> table and
    /// EPPaymentType_BR, EPPaymentWay_BR in <c>LedgerJournalTransPayment_BR</c> table when EPBarcodeInfo_BR
    /// in <c>VendTransPayment_BR</c> changed.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    public static void updateEPRemitInfo_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        SpecTrans                       specTransLoc;
        VendEPRemitInfo_BR              vendEPRemitInfoLoc;
        CustTransEPRemit_BR             custTransEPRemitLoc;
        SpecTransManager                specTransManager;
        LedgerJournalTransPayment_BR    ledgerJournalTransPayment_BR;

        DataAreaId                      a;
        VendTransOpen                   vendTransOpenLoc;

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
        {
            specTransManager = SpecTransManager::newFromSpec(_ledgerJournalTrans);
            var specTransCount = specTransManager.getSpecTransCount();

            if (specTransCount >= 1)
            {
                select firstonly * from specTransLoc
                    where specTransLoc.SpecRecId == _ledgerJournalTrans.RecId
                        && specTransLoc.SpecTableId == tableNum(LedgerJournalTrans)
                        && specTransLoc.SpecCompany == _ledgerJournalTrans.company();

                select firstonly epBarCodeInfo_BR from vendTransOpenLoc
                    where vendTransOpenLoc.DataAreaId == specTransLoc.RefCompany
                        && vendTransOpenLoc.TableId   == specTransLoc.RefTableId
                        && vendTransOpenLoc.RecId     == specTransLoc.RefRecId;

                if (vendTransOpenLoc.epBarCodeInfo_BR)
                {
                    if (VendEPRemitInfo_BR::find(_ledgerJournalTrans.RecId))
                    {
                        ttsbegin;
                        select firstonly forupdate vendEPRemitInfoLoc
                            where vendEPRemitInfoLoc.LedgerJournalTrans == _ledgerJournalTrans.RecId;

                        vendEPRemitInfoLoc.BarCodeInfo = vendTransOpenLoc.epBarCodeInfo_BR;
                        vendEPRemitInfoLoc.TypedLine   = VendTransPayment_BR::find(specTransLoc.vendTrans().RecId).TypedLine_BR;
                        vendEPRemitInfoLoc.update();
                        ttscommit;
                    }
                    else
                    {
                        ttsbegin;
                        vendEPRemitInfoLoc.initFromLedgerJournalTrans(_ledgerJournalTrans);
                        vendEPRemitInfoLoc.BarCodeInfo = vendTransOpenLoc.epBarCodeInfo_BR;
                        vendEPRemitInfoLoc.TypedLine   = VendTransPayment_BR::find(specTransLoc.vendTrans().RecId).TypedLine_BR;
                        vendEPRemitInfoLoc.insert();
                        ttscommit;
                    }
                    vendEPRemitInfoLoc.reread();
                }
                ttsbegin;

                ledgerJournalTransPayment_BR = _ledgerJournalTrans.getPaymentExtension_BR();
                if (!ledgerJournalTransPayment_BR)
                {
                    ledgerJournalTransPayment_BR.initFromLedgerJournalTrans(_ledgerJournalTrans);
                }
                ledgerJournalTransPayment_BR.epPaymentType_BR = VendTransPayment_BR::find(specTransLoc.vendTrans().RecId).epPaymentType_BR;
                ledgerJournalTransPayment_BR.epPaymentWay_BR  = VendTransPayment_BR::find(specTransLoc.vendTrans().RecId).epPaymentWay_BR;
                _ledgerJournalTrans.packExtensionTable(ledgerJournalTransPayment_BR);

                // If we have more than one spec trans, set PaymMode and PaymSpec as blank
                _ledgerJournalTrans.PaymMode = specTransCount == 1 ? VendTrans::find(specTransLoc.vendTrans().RecId).PaymMode : '';
                _ledgerJournalTrans.PaymSpec = specTransCount == 1 ? VendTrans::find(specTransLoc.vendTrans().RecId).PaymSpec : '';

                _ledgerJournalTrans.paymModeModified();
                _ledgerJournalTrans.update();
                ttscommit;

                _ledgerJournalTrans.reread();
            }
        }
        else if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
        {
            specTransManager = SpecTransManager::newFromSpec(_ledgerJournalTrans);
            if (specTransManager.getSpecTransCount() >= 1)
            {
                a = _ledgerJournalTrans.company();

                select firstonly crosscompany * from specTransLoc
                    where   specTransLoc.SpecRecId == _ledgerJournalTrans.RecId
                        && specTransLoc.SpecCompany == a;

                select firstonly * from custTransEPRemitLoc
                    where   custTransEPRemitLoc.CustTransOpenRefRecId == specTransLoc.custTransOpen().RecId;

                if (custTransEPRemitLoc)
                {
                    if (_ledgerJournalTrans.PaymMode)
                    {
                        if ((CustPaymModeTable::find(_ledgerJournalTrans.PaymMode).ExportLayoutGroupId_BR ==
                            CustPaymModeTable::find(specTransLoc.custTrans().PaymMode).ExportLayoutGroupId_BR))
                        {
                            _ledgerJournalTrans.updateCustEPRemitInfo_BR(custTransEPRemitLoc);
                        }
                        else if ((CustPaymModeTable::find(_ledgerJournalTrans.PaymMode).ExportLayoutGroupId_BR !=
                            CustPaymModeTable::find(specTransLoc.custTrans().PaymMode).ExportLayoutGroupId_BR))
                        {
                            if (Box::yesNo("@GLS1171",DialogButton::Yes == DialogButton::Yes ))
                            {
                                _ledgerJournalTrans.updateCustEPRemitInfo_BR(custTransEPRemitLoc);
                            }
                        }
                    }
                    else
                    {
                        _ledgerJournalTrans.updateCustEPRemitInfo_BR(custTransEPRemitLoc);
                    }
                }

                ttsbegin;

                ledgerJournalTransPayment_BR = _ledgerJournalTrans.getPaymentExtension_BR();
                if (!ledgerJournalTransPayment_BR)
                {
                    ledgerJournalTransPayment_BR.initFromLedgerJournalTrans(_ledgerJournalTrans);
                }
                if (!FormDataUtil::isFormDataSource(ledgerJournalTransPayment_BR))
                {
                    ledgerJournalTransPayment_BR.epPaymentType_BR = CustTransPayment_BR::find(specTransLoc.custTrans().RecId).epPaymentType_BR;
                    ledgerJournalTransPayment_BR.epPaymentWay_BR  = CustTransPayment_BR::find(specTransLoc.custTrans().RecId).epPaymentWay_BR;
                    _ledgerJournalTrans.packExtensionTable(ledgerJournalTransPayment_BR);
                }

                _ledgerJournalTrans.PaymMode = CustTrans::find(specTransLoc.custTrans().RecId).PaymMode;
                _ledgerJournalTrans.PaymSpec = CustTrans::find(specTransLoc.custTrans().RecId).PaymSpec;
                _ledgerJournalTrans.paymModeModified();
                _ledgerJournalTrans.update();

                ttscommit;

                _ledgerJournalTrans.reread();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateIncomeCodeFromSettledInvoice</Name>
				<Source><![CDATA[
    public static void populateIncomeCodeFromSettledInvoice(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (!_ledgerJournalTrans.IncomeClassificationId_BR)
        {
            LedgerJournalType journalType = LedgerJournalTable::find(_ledgerJournalTrans.JournalNum).JournalType;

            if (journalType == LedgerJournalType::Payment)
            {
                SpecTrans specTransCur;

                while select crosscompany RefCompany, RefRecId from specTransCur
                    where specTransCur.SpecCompany == _ledgerJournalTrans.Company
                        && specTransCur.SpecTableId == _ledgerJournalTrans.TableId
                        && specTransCur.SpecRecId == _ledgerJournalTrans.RecId
                        && specTransCur.RefTableId == tableNum(VendTransOpen)
                {
                    changecompany(specTransCur.RefCompany)
                    {
                        VendTrans vendTrans;
                        VendInvoiceJour vendInvoiceJour;
                        VendInvoiceTrans vendInvoiceTrans;
                        FiscalDocumentLine_BR fiscalDocumentLine;
                        TaxServiceCode_BR taxServiceCode;
                        IncomeClassification_BR incomeClassification;

                        VendTransOpen vendTransOpen = VendTransOpen::find(specTransCur.RefRecId);

                        select firstonly TableId from vendTrans
                            where vendTrans.RecId == vendTransOpen.RefRecId
                            join TableId from vendInvoiceJour
                                where vendInvoiceJour.LedgerVoucher == vendTrans.Voucher
                                    && vendInvoiceJour.InvoiceAccount == vendTrans.AccountNum
                                    && vendInvoiceJour.InvoiceDate == vendTrans.TransDate
                            join TableId from vendInvoiceTrans
                                where vendInvoiceTrans.PurchID == vendInvoiceJour.PurchId
                                    && vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId
                                    && vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate
                                    && vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup
                                    && vendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId
                            join TableId from fiscalDocumentLine
                                where fiscalDocumentLine.RefTableId == vendInvoiceTrans.TableId
                                    && fiscalDocumentLine.RefRecId == vendInvoiceTrans.RecId
                            join TableId from taxServiceCode
                                where fiscalDocumentLine.ServiceCode == taxServiceCode.ServiceCodeId
                            join CodeId from incomeClassification
                                where taxServiceCode.IncomeCode == incomeClassification.RecId;

                        if (incomeClassification.CodeId)
                        {
                            _ledgerJournalTrans.IncomeClassificationId_BR = incomeClassification.CodeId;

                            break;
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscAmount_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cash discount amount.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>The cash discount amount.</returns>
    public static AmountCur cashDiscAmount_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        VendTransOpen       vendTransOpen;
        CustTransOpen       custTransOpen;
        LedgerJournalType   ledgerJournalType;
        AmountCur           amountCur;
        SpecTrans           foundSpecTrans;

        ledgerJournalType = LedgerJournalTable::find(_ledgerJournalTrans.JournalNum).JournalType;

        switch (ledgerJournalType)
        {
            case LedgerJournalType::Payment:

                LedgerJournalTrans_BR::checkFieldViewAccessLevel_BR(tableNum(VendTransCashDisc), fieldNum(VendTransCashDisc, CashDiscAmount));

                while select crossCompany foundSpecTrans
                    where foundSpecTrans.SpecCompany    == _ledgerJournalTrans.Company
                        && foundSpecTrans.SpecTableId   == _ledgerJournalTrans.TableId
                        && foundSpecTrans.SpecRecId     == _ledgerJournalTrans.RecId
                {
                    vendTransOpen   = foundSpecTrans.vendTransOpen();
                    if (vendTransOpen.UseCashDisc != UseCashDisc::Never)
                    {
                        changecompany(vendTransOpen.company())
                        {
                            amountCur += VendTransCashDisc::findCashDisc(vendTransOpen.TableId, vendTransOpen.RecId).CashDiscAmount;
                        }
                    }
                }
                break;
            case LedgerJournalType::CustPayment:

                LedgerJournalTrans_BR::checkFieldViewAccessLevel_BR(tableNum(CustTransCashDisc), fieldNum(CustTransCashDisc, CashDiscAmount));

                while select crossCompany foundSpecTrans
                    where foundSpecTrans.SpecCompany    == _ledgerJournalTrans.Company
                        && foundSpecTrans.SpecTableId   == _ledgerJournalTrans.TableId
                        && foundSpecTrans.SpecRecId     == _ledgerJournalTrans.RecId
                {
                    custTransOpen = foundSpecTrans.custTransOpen();
                    if (custTransOpen.UseCashDisc != UseCashDisc::Never)
                    {
                        changecompany(custTransOpen.company())
                        {
                            amountCur += CustTransCashDisc::findCashDisc(custTransOpen.TableId, custTransOpen.RecId).CashDiscAmount;
                        }
                    }
                }
                break;
            default:
                amountCur = 0;
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeTaxWithholdEditStatus_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the tax withholding status to closed.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    public static void closeTaxWithholdEditStatus_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTransPayment_BR ledgerJournalTransPaym = _ledgerJournalTrans.getPaymentExtension_BR();
        ledgerJournalTransPaym.TaxWithholdEditStatus_BR = LedgerTransTaxWithholdEditStatus_BR::Closed;
        _ledgerJournalTrans.packExtensionTable(ledgerJournalTransPaym);
    }

]]></Source>
			</Method>
			<Method>
				<Name>compAddressComplement_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the building name of the company.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    ///    Company BuildingCompliment.
    /// </returns>
    public static LogisticsAddressBuildingCompliment compAddressComplement_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        return DirParty::primaryPostalAddress(
                DirPartyTable::findRec(CompanyInfo::findDataArea(_ledgerJournalTrans.DataAreaId).RecId, false, DirPartyType::LegalEntity).RecId
                ).BuildingCompliment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTransOpen_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the VendTransOpen record assigned to this journal record.
    /// </summary>
    /// <param name="_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    /// A record in the VendTransOpen table; otherwise, an empty record.
    /// </returns>
    public static VendTransOpen getVendTransOpen_BR(LedgerJournalTrans _ledgerJournalTrans)
    {
        SpecTrans specTrans;
        VendTransOpen vendTransOpen;

        specTrans = SpecTrans::findBySpec(_ledgerJournalTrans.company(), _ledgerJournalTrans.TableId, _ledgerJournalTrans.RecId);

        if (specTrans)
        {
            vendTransOpen = specTrans.vendTransOpen();
        }

        return vendTransOpen;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>