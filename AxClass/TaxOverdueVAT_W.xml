<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxOverdueVAT_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>TaxOverdueVAT_W</c> used for posting of reversal of tax on overdue debt.
/// </summary>
class TaxOverdueVAT_W extends TaxReverse
{
    CustVendTrans               custVendTrans;
    OverdueTurnJournalLine_W    overdueTurnJournalLine;

    TaxAmount       taxAmountTotal, taxInCostPriceMSTTotal;
    TaxBase         taxBaseAmountTotal;
    TaxAmountCur    taxAmountCurTotal, sourceTaxAmountCurTotal, taxInCostPriceCurTotal, taxInCostPriceTotal;
    TaxBaseCur      taxBaseAmountCurTotal, sourceTaxBaseAmountCurTotal;
    protected TaxAmountCur    taxAmountRepTotal;
    protected TaxBaseCur      taxBaseAmountRepTotal;
   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAndInsertTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax and inserts it to <c>TmpTaxWorkTrans</c> table.
    /// </summary>
    /// <returns>
    /// Tax amount.
    /// </returns>
    protected TaxAmount calcAndInsertTaxes()
    {
        TaxTrans   taxTrans;
        TaxAmount  taxAmount;
        TaxTable   taxTable;
        boolean     isTotalRestore, isTotalReverse;
        AmountCur   totalOverdueDebt;
        Counter     numOfLines, counter;
        ;
        if (overdueTurnJournalLine.OverdueAmountCur != custVendTrans.AmountCur)
        {
            totalOverdueDebt = this.calcTotalOverdueDebt();

            isTotalRestore = (totalOverdueDebt == 0);
            isTotalReverse = (totalOverdueDebt == custVendTrans.AmountCur);
        }

        ttsBegin;

        select count(RecId) from taxTrans
            where taxTrans.Voucher            == custVendTrans.Voucher   &&
                  taxTrans.TransDate          == custVendTrans.TransDate &&
                  taxTrans.TaxAmount          != 0                       &&
                 (taxTrans.TaxDirection        == TaxDirection::IncomingTax ||
                  taxTrans.TaxDirection        == TaxDirection::OutgoingTax)
            exists join taxTable
                where taxTable.TaxCode == taxTrans.TaxCode &&
                     (taxTable.TaxType_W == TaxType_W::VAT ||
                      taxTable.TaxType_W == TaxType_W::VATReduced ||
                      taxTable.TaxType_W == TaxType_W::VATZero);

        numOfLines = int642int(taxTrans.RecId);

        // Accumulate the Tax Base amount of 0 TaxTrans before processing normal TaxTrans,
        // in case of taxBaseAmountTotal missing some base amount from TaxTrans which TaxAmount == 0.
        if (!isTotalReverse && !isTotalRestore)
        {
            while select * from taxTrans
            where taxTrans.Voucher == custVendTrans.Voucher
                && taxTrans.TransDate == custVendTrans.TransDate
                && taxTrans.TaxAmount == 0
                && (taxTrans.TaxDirection == TaxDirection::IncomingTax
                    || taxTrans.TaxDirection == TaxDirection::OutgoingTax)
            join TableId from taxTable
                where taxTable.TaxCode == taxTrans.TaxCode
                    && (taxTable.TaxType_W == TaxType_W::VAT
                        || taxTable.TaxType_W == TaxType_W::VATReduced
                        || taxTable.TaxType_W == TaxType_W::VATZero)
            {
                this.insertTaxWorkTransByFactor(taxTrans, false);
            }
        }

        while select * from taxTrans
            where taxTrans.Voucher            == custVendTrans.Voucher   &&
                  taxTrans.TransDate          == custVendTrans.TransDate &&
                  taxTrans.TaxAmount          != 0                       &&
                 (taxTrans.TaxDirection        == TaxDirection::IncomingTax ||
                  taxTrans.TaxDirection        == TaxDirection::OutgoingTax)
            join TableId from taxTable
                where taxTable.TaxCode == taxTrans.TaxCode &&
                     (taxTable.TaxType_W == TaxType_W::VAT ||
                      taxTable.TaxType_W == TaxType_W::VATReduced ||
                      taxTable.TaxType_W == TaxType_W::VATZero)

        {
            if (isTotalReverse || isTotalRestore)
            {
                taxAmount += this.insertTaxWorkTransByTotalRemain(taxTrans, isTotalRestore);
            }
            else
            {
                counter++;
                taxAmount += this.insertTaxWorkTransByFactor(taxTrans, counter == numOfLines);
            }
        }

        ttsCommit;

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and posts tax reversal on overdue debt for given invoice.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// <c>LedgerPostingController</c> class which is used for posting.
    /// </param>
    /// <param name="_overdueTurnJournalLine">
    /// <c>OverdueTurnJournalLine_W</c> record which is summarized by invoice.
    /// </param>
    /// <returns>
    /// Tax amount.
    /// </returns>
    public AmountCur calcAndPost(
        LedgerPostingController  _ledgerPostingController,
        OverdueTurnJournalLine_W _overdueTurnJournalLine)
    {
        AmountCur   amountCur;
        ;
        overdueTurnJournalLine = _overdueTurnJournalLine;
        custVendTrans          = overdueTurnJournalLine.custVendTrans();

        voucher = _ledgerPostingController.getReference().parmVoucher();
        taxDate = _ledgerPostingController.getReference().parmAccountingDate();

        amountCur = this.calcAndInsertTaxes();
        this.saveAndPost(_ledgerPostingController);

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalOverdueDebt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total overdue debt by invoice.
    /// </summary>
    /// <returns>
    /// Amount of total overdue debt by invoice.
    /// </returns>
    public AmountCur calcTotalOverdueDebt()
    {
        CustOverdueVATDebtJournalLine_W   custLine;
        VendOverdueVATDebtJournalLine_W   vendLine;

        OverdueDebtJournalLine_W    overdueDebtJournalLine;
        ;

        switch (custVendTrans.TableId)
        {
            case tableNum(CustTrans):
                overdueDebtJournalLine = custLine.data();
                break;
            case tableNum(VendTrans):
                overdueDebtJournalLine = vendLine.data();
                break;
        }

        select sum(OverdueAmountCur) from overdueDebtJournalLine
            where overdueDebtJournalLine.JournalId     == overdueTurnJournalLine.JournalId &&
                  overdueDebtJournalLine.TransRefRecId == overdueTurnJournalLine.TransRefRecId;

        return overdueDebtJournalLine.OverdueAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns exchange rate used for posting.
    /// </summary>
    /// <returns>
    /// <c>ExchRate</c> value.
    /// </returns>
    public ExchRate exchRate()
    {
        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes tax amounts on <c>TmpTaxWorkTrans</c> record.
    /// </summary>
    /// <param name="_taxTrans">
    /// <c>TaxTrans</c> record used initializing.
    /// </param>
    /// <param name="_tmpTaxWorkTrans">
    /// <c>TmpTaxWorkTrans</c> record being initialized
    /// </param>
    private void initTaxAmounts(TaxTrans _taxTrans, TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        _tmpTaxWorkTrans.TaxAmount                 = -_taxTrans.TaxAmount;
        _tmpTaxWorkTrans.TaxAmountCur              = -_taxTrans.TaxAmountCur;
        _tmpTaxWorkTrans.TaxAmountRep              = -_taxTrans.TaxAmountRep;
        _tmpTaxWorkTrans.TaxBaseAmount             = -_taxTrans.TaxBaseAmount;
        _tmpTaxWorkTrans.TaxBaseAmountCur          = -_taxTrans.TaxBaseAmountCur;
        _tmpTaxWorkTrans.TaxBaseAmountRep          = -_taxTrans.TaxBaseAmountRep;

        _tmpTaxWorkTrans.TaxInCostPriceMST         = -_taxTrans.TaxInCostPriceMST;
        _tmpTaxWorkTrans.TaxInCostPriceCur         = -_taxTrans.TaxInCostPriceCur;
        _tmpTaxWorkTrans.TaxInCostPriceRep         = -_taxTrans.TaxInCostPriceRep;

        _tmpTaxWorkTrans.TaxBaseQty                = -_taxTrans.TaxBaseQty;

        if (_tmpTaxWorkTrans.SourceRegulateAmountCur)
        {
            _tmpTaxWorkTrans.SourceTaxAmountCur  = -_taxTrans.SourceRegulateAmountCur;
        }
        else
        {
            _tmpTaxWorkTrans.SourceTaxAmountCur        = -_taxTrans.SourceTaxAmountCur;
        }

        if (_taxTrans.SourceBaseAmountCurRegulated)
        {
            _tmpTaxWorkTrans.SourceBaseAmountCur = -_taxTrans.SourceBaseAmountCurRegulated;
        }
        else
        {
            _tmpTaxWorkTrans.SourceBaseAmountCur       = -_taxTrans.SourceBaseAmountCur;
        }

        if (_taxTrans.TaxInCostPriceRegulated)
        {
            _tmpTaxWorkTrans.TaxInCostPrice      = -_taxTrans.TaxInCostPriceRegulated;
        }
        else
        {
            _tmpTaxWorkTrans.TaxInCostPrice            = -_taxTrans.TaxInCostPrice;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>TmpTaxWorkTrans</c> record with values from <c>TaxTrans</c>
    /// </summary>
    /// <param name="_taxTrans">
    /// <c>TaxTrans</c> record used for initializing.
    /// </param>
    /// <returns>
    /// Initialized <c>TmpTaxWorkTrans</c> record.
    /// </returns>
    private TmpTaxWorkTrans initTaxWorkTrans(TaxTrans _taxTrans)
    {
        TaxTrans_W  taxTrans_W = _taxTrans.taxTrans_W();

        sourceCurrencyCode = _taxTrans.SourceCurrencyCode;
        triangulation = _taxTrans.euroTriangulation;

        taxWorkTrans.clear();
        taxWorkTrans.HeadingRecId = headingRecId;

        taxWorkTrans.SourceTableId              = this.sourceTableId();
        taxWorkTrans.SourceRecId                = this.sourceRecId();
        taxWorkTrans.TaxCode                    = _taxTrans.TaxCode;
        taxWorkTrans.TaxGroup                   = _taxTrans.TaxGroup;
        taxWorkTrans.TaxItemGroup               = _taxTrans.TaxItemGroup;
        taxWorkTrans.Source                     = _taxTrans.Source;
        taxWorkTrans.Voucher                    = voucher;
        taxWorkTrans.TransDate                  = taxDate;
        taxWorkTrans.CalculationDate            = taxDate;
        taxWorkTrans.TaxDirection               = _taxTrans.TaxDirection;
        taxWorkTrans.CurrencyCode               = _taxTrans.CurrencyCode;
        taxWorkTrans.SourceCurrencyCode         = sourceCurrencyCode;
        taxWorkTrans.euroTriangulation          = _taxTrans.euroTriangulation;

        taxWorkTrans.TaxReports                 = NoYes::Yes;
        taxWorkTrans.ExemptTax                  = _taxTrans.ExemptTax;
        taxWorkTrans.TaxAutogenerated           = NoYes::Yes;
        taxWorkTrans.TaxOrigin                  = TaxOrigin::Tax;

        if (this.headingTableId())
        {
            taxWorkTrans.HeadingTableId             = this.headingTableId();
        }
        else
        {
            taxWorkTrans.HeadingTableId             = _taxTrans.HeadingTableId;
        }

        taxWorkTrans.SourceDocumentLine         = _taxTrans.SourceDocumentLine;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            taxWorkTrans.VatDueDate_W    = taxDate;
            taxWorkTrans.Addressing_PL   = taxTrans_W.Addressing_PL;
            taxWorkTrans.DocumentDate_PL = taxTrans_W.DocumentDate_PL;
            taxWorkTrans.CustVendName_PL = taxTrans_W.CustVendName_PL;
            taxWorkTrans.VATNum_PL       = taxTrans_W.VATNum_PL;
        }

        this.initTaxWorkTransLedgerDimensions(_taxTrans);

        return taxWorkTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxWorkTransByFactor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>TmpTaxWorkTrans</c> record by factor, which is relation of overdue amount by invoice to total amount by invoice.
    /// </summary>
    /// <param name="_taxTrans">
    /// <c>TaxTrans</c> table record.
    /// </param>
    /// <param name="_isLastLine">
    /// Indicates that current tax line is last line.
    /// </param>
    /// <returns>
    /// Calculated tax amount.
    /// </returns>
    /// <remarks>
    /// The rounding errors moved to last record to avoid  difference between journal lines and actual tax amount posted.
    /// </remarks>
    protected AmountCur insertTaxWorkTransByFactor(TaxTrans _taxTrans, boolean _isLastLine)
    {
        Factor      factorCur, factorMST;

        CurrencyCode    standardCurrency = CompanyInfoHelper::standardCurrency();
        CurrencyCode    reportingCurrency = Ledger::reportingCurrency(this.companyInfo().RecId);
        ;

        taxWorkTrans = this.initTaxWorkTrans(_taxTrans);

        if (custVendTrans.AmountCur)
        {
            factorCur = overdueTurnJournalLine.OverdueAmountCur/custVendTrans.AmountCur;
        }
        else
        {
            factorCur = 1;
        }

        if (custVendTrans.AmountMST)
        {
            factorMST = overdueTurnJournalLine.OverdueAmountMST/custVendTrans.AmountMST;
        }
        else
        {
            factorMST = 1;
        }

        taxWorkTrans.TaxBaseAmount     = - CurrencyExchangeHelper::amount(_taxTrans.TaxBaseAmount * factorMST);
        taxWorkTrans.TaxAmount         = - CurrencyExchangeHelper::amount(_taxTrans.TaxAmount * factorMST);
        taxWorkTrans.TaxInCostPriceMST = - CurrencyExchangeHelper::amount(_taxTrans.TaxInCostPriceMST * factorMST);

        taxWorkTrans.TaxBaseAmountCur  = - CurrencyExchangeHelper::amount(_taxTrans.TaxBaseAmountCur * factorMST, _taxTrans.CurrencyCode);
        taxWorkTrans.TaxAmountCur      = - CurrencyExchangeHelper::amount(_taxTrans.TaxAmountCur * factorMST, _taxTrans.CurrencyCode);
        taxWorkTrans.TaxInCostPriceCur = - CurrencyExchangeHelper::amount(_taxTrans.TaxInCostPriceCur * factorMST, _taxTrans.CurrencyCode);

        taxWorkTrans.TaxBaseAmountRep  = - CurrencyExchangeHelper::amount(_taxTrans.TaxBaseAmountRep * factorMST, reportingCurrency);
        taxWorkTrans.TaxAmountRep      = - CurrencyExchangeHelper::amount(_taxTrans.TaxAmountRep * factorMST, reportingCurrency);
        taxWorkTrans.TaxInCostPriceRep = - CurrencyExchangeHelper::amount(_taxTrans.TaxInCostPriceRep * factorMST, reportingCurrency);

        taxWorkTrans.TaxBaseQty        = - _taxTrans.TaxBaseQty * factorMST;

        if (_taxTrans.SourceRegulateAmountCur)
        {
            taxWorkTrans.SourceTaxAmountCur = - CurrencyExchangeHelper::amount(_taxTrans.SourceRegulateAmountCur * factorCur, _taxTrans.SourceCurrencyCode);
        }
        else
        {
            taxWorkTrans.SourceTaxAmountCur = - CurrencyExchangeHelper::amount(_taxTrans.SourceTaxAmountCur * factorCur, _taxTrans.SourceCurrencyCode);
        }

        if (_taxTrans.SourceBaseAmountCurRegulated)
        {
            taxWorkTrans.SourceBaseAmountCur = - CurrencyExchangeHelper::amount(_taxTrans.SourceBaseAmountCurRegulated * factorCur, _taxTrans.SourceCurrencyCode);
        }
        else
        {
            taxWorkTrans.SourceBaseAmountCur = - CurrencyExchangeHelper::amount(_taxTrans.SourceBaseAmountCur * factorCur, _taxTrans.SourceCurrencyCode);
        }

        if (_taxTrans.TaxInCostPriceRegulated)
        {
            taxWorkTrans.TaxInCostPrice = - CurrencyExchangeHelper::amount(_taxTrans.TaxInCostPriceRegulated * factorCur, _taxTrans.SourceCurrencyCode);
        }
        else
        {
            taxWorkTrans.TaxInCostPrice = - CurrencyExchangeHelper::amount(_taxTrans.TaxInCostPrice * factorCur, _taxTrans.SourceCurrencyCode);
        }

        taxAmountTotal               += taxWorkTrans.TaxAmount;
        taxBaseAmountTotal           += taxWorkTrans.TaxBaseAmount;
        taxAmountCurTotal            += taxWorkTrans.TaxAmountCur;
        taxAmountRepTotal            += taxWorkTrans.TaxAmountRep;
        taxBaseAmountCurTotal        += taxWorkTrans.TaxBaseAmountCur;
        taxBaseAmountRepTotal        += taxWorkTrans.TaxBaseAmountRep;
        sourceTaxAmountCurTotal      += taxWorkTrans.SourceTaxAmountCur;
        sourceTaxBaseAmountCurTotal  += taxWorkTrans.SourceBaseAmountCur;

        if (taxWorkTrans.TaxInCostPrice)
        {
            taxInCostPriceMSTTotal       += taxWorkTrans.TaxInCostPriceMST;
            taxInCostPriceCurTotal       += taxWorkTrans.TaxInCostPriceCur;
            taxInCostPriceTotal          += taxWorkTrans.TaxInCostPrice;
        }

        if (!taxWorkTrans.TaxAmount)
        {
            return 0;
        }

        if (_isLastLine)
        {
            //Total amounts already have negated sign
            taxWorkTrans.TaxAmount          -= overdueTurnJournalLine.OverdueTaxAmountMST + taxAmountTotal - taxInCostPriceMSTTotal;
            taxWorkTrans.TaxBaseAmount      += overdueTurnJournalLine.overdueBaseAmountMST()  - taxBaseAmountTotal - taxInCostPriceMSTTotal;

            if (taxWorkTrans.CurrencyCode == custVendTrans.CurrencyCode)
            {
                taxWorkTrans.TaxAmountCur       -= overdueTurnJournalLine.OverdueTaxAmountCur + taxAmountCurTotal - taxInCostPriceCurTotal;
                taxWorkTrans.TaxBaseAmountCur   += overdueTurnJournalLine.overdueBaseAmountCur() - taxBaseAmountCurTotal - taxInCostPriceCurTotal;
            }
            else if (taxWorkTrans.CurrencyCode == standardCurrency)
            {
                taxWorkTrans.TaxAmountCur       -= (overdueTurnJournalLine.OverdueTaxAmountMST + taxAmountCurTotal - taxInCostPriceCurTotal);
                taxWorkTrans.TaxBaseAmountCur   += overdueTurnJournalLine.overdueBaseAmountMST() - taxBaseAmountCurTotal - taxInCostPriceCurTotal;
            }

            if (taxWorkTrans.SourceCurrencyCode == custVendTrans.CurrencyCode)
            {
                taxWorkTrans.SourceTaxAmountCur  -= overdueTurnJournalLine.OverdueTaxAmountCur + sourceTaxAmountCurTotal - taxInCostPriceTotal;
                taxWorkTrans.SourceBaseAmountCur += overdueTurnJournalLine.overdueBaseAmountCur() - sourceTaxBaseAmountCurTotal - taxInCostPriceTotal;
            }
            else if (taxWorkTrans.SourceCurrencyCode == standardCurrency)
            {
                taxWorkTrans.SourceTaxAmountCur  -= overdueTurnJournalLine.OverdueTaxAmountMST + sourceTaxAmountCurTotal - taxInCostPriceTotal;
                taxWorkTrans.SourceBaseAmountCur += overdueTurnJournalLine.overdueBaseAmountMST() - sourceTaxBaseAmountCurTotal - taxInCostPriceTotal;
            }
        }
        taxWorkTrans.insert();

        taxWorkTransTaxTransMap.insert(taxWorkTrans.RecId, _taxTrans.RecId);

        return this.taxAmount(taxWorkTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxWorkTransByTotalRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>TmpTaxWorkTrans</c> record in case tax amount for invoice if invoice is fully overdue or fully paid.
    /// </summary>
    /// <param name="_taxTrans">
    /// <c>TaxTrans</c> table.
    /// </param>
    /// <param name="_isTotalRestore">
    /// Indicates that restoration of previously reversed VAT must be performed.
    /// </param>
    /// <returns>
    /// Calculated tax amount for record created.
    /// </returns>
    protected AmountCur insertTaxWorkTransByTotalRemain(TaxTrans _taxTrans, boolean _isTotalRestore)
    {
        TaxTrans            taxTransReversed;
        TaxTrans_W          taxTransReversed_W;

        taxWorkTrans = this.initTaxWorkTrans(_taxTrans);

        if (!_isTotalRestore)
        {
            this.initTaxAmounts(_taxTrans, taxWorkTrans);
        }

        select
            sum (TaxAmount),
            sum (TaxAmountCur),
            sum (TaxAmountRep),
            sum (SourceTaxAmountCur),
            sum (TaxBaseAmount),
            sum (TaxBaseAmountCur),
            sum (TaxBaseAmountRep),
            sum (SourceBaseAmountCur),
            sum (TaxBaseQty),
            sum (TaxInCostPrice),
            sum (TaxInCostPriceMST),
            sum (TaxInCostPriceCur),
            sum (TaxInCostPriceRep)
        from taxTransReversed
        exists join taxTransReversed_W
            where taxTransReversed_W.TaxTrans                == taxTransReversed.RecId &&
                  taxTransReversed_W.ReversedTaxTransRecId_W == _taxTrans.RecId;

        taxWorkTrans.TaxAmount                 -= taxTransReversed.TaxAmount;
        taxWorkTrans.TaxAmountCur              -= taxTransReversed.TaxAmountCur;
        taxWorkTrans.TaxAmountRep              -= taxTransReversed.TaxAmountRep;
        taxWorkTrans.TaxBaseAmount             -= taxTransReversed.TaxBaseAmount;
        taxWorkTrans.TaxBaseAmountCur          -= taxTransReversed.TaxBaseAmountCur;
        taxWorkTrans.TaxBaseAmountRep          -= taxTransReversed.TaxBaseAmountRep;
        taxWorkTrans.TaxInCostPrice            -= taxTransReversed.TaxInCostPrice;
        taxWorkTrans.TaxInCostPriceMST         -= taxTransReversed.TaxInCostPriceMST;
        taxWorkTrans.TaxInCostPriceCur         -= taxTransReversed.TaxInCostPriceCur;
        taxWorkTrans.TaxInCostPriceRep         -= taxTransReversed.TaxInCostPriceRep;
        taxWorkTrans.SourceTaxAmountCur        -= taxTransReversed.SourceTaxAmountCur;
        taxWorkTrans.SourceBaseAmountCur       -= taxTransReversed.SourceBaseAmountCur;
        taxWorkTrans.TaxBaseQty                -= taxTransReversed.TaxBaseQty;

        taxWorkTrans.insert();

        taxWorkTransTaxTransMap.insert(taxWorkTrans.RecId, _taxTrans.RecId);

        return this.taxAmount(taxWorkTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets offset account for posting of tax reversal.
    /// </summary>
    /// <param name="_taxCode">
    /// <c>TaxCode</c> value.
    /// </param>
    /// <param name="_taxDirection">
    /// <c>TaxDirection</c> value.
    /// </param>
    /// <returns>
    /// Ledger account.
    /// </returns>
    protected LedgerDimensionDefaultAccount offsetLedgerDimension(TaxCode _taxCode, TaxDirection _taxDirection)
    {
        return TaxLedgerAccountGroup::find(TaxTable::findAccountGroup(_taxCode)).taxReverseOffsetLedgerDimension_W(_taxDirection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves <c>TaxTrans</c> records and posts them to general ledger.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// <c>LedgerPostingController</c> used for posting.
    /// </param>
    public void saveAndPost(LedgerPostingController _ledgerPostingController)
    {
        TaxTrans            taxTrans;
        TaxAmountCur        taxAmountCur;
        TaxAmountCur        taxInCostPrice;
        CurrencyExchangeHelper  exchangeRateHelper;
        RecordInsertList        insertList;
        TaxTable                taxTable;
        TaxTrans_W              taxTrans_W;
        List                    codesList = new List(Types::String);

        insertList = new RecordInsertList(taxSourceLineSummaryTmp.TableId, false, false, false, false, true, taxSourceLineSummaryTmp);

        this.validateForPost();

        ttsbegin;

        while select *
        from taxworkTrans
        order by taxWorkTrans.SourceRecId
        where taxworkTrans.HeadingRecId  == this.headingRecId() &&
                (taxworkTrans.TaxOrigin     != TaxOrigin::TaxReversed ||
                this.allowPostingOfReversals()) &&
                taxworkTrans.IsDeleted      == NoYes::No
        {
            if (taxworkTrans.TaxCode)
            {
                if (taxWorkTrans.SourceTaxAmountCur)
                {
                    exchRate = taxWorkTrans.TaxAmount * 100 / taxWorkTrans.SourceTaxAmountCur;
                }

                exchangeRateHelper = CurrencyExchangeHelper::newLedger(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId));
                exchangeRateHelper.parmExchangeRate1(this.exchRate());
                exchangeRateHelper.parmExchangeRate2(this.exchRateSecondary());

                this.validateWarningsForPost(taxworkTrans.Warning, taxworkTrans.TaxCode, false);

                if (taxSourceLineSummaryTmp.SourceRecId != taxWorkTrans.SourceRecId)
                {
                    taxSourceLineSummaryTmp.PrintCode = strList2str(codesList, ', ');
                    if (taxSourceLineSummaryTmp.PrintCode)
                    {
                        insertList.add(taxSourceLineSummaryTmp);
                    }

                    taxSourceLineSummaryTmp.SourceRecId = taxWorkTrans.SourceRecId;
                    taxSourceLineSummaryTmp.SourceTableId = taxWorkTrans.SourceTableId;
                    taxSourceLineSummaryTmp.ActualTransactionTaxAmount = 0;

                    codesList = new List(Types::String);
                }

                taxTable = taxTable::find(taxWorkTrans.TaxCode);
                if (taxTable.PrintCode)
                {
                    codesList.addEnd(taxTable.PrintCode);
                }

                taxSourceLineSummaryTmp.ActualTransactionTaxAmount += taxWorkTrans.SourceRegulateAmountCur;

                taxTrans.clear();
                this.initFromTaxWorkTrans(taxTrans, taxworkTrans, this.taxOrigin(taxworkTrans.TaxOrigin));

                if (taxRegulationExist)  // why override the setting from initFromTaxWorkTrans() above?
                    taxTrans.TaxAutogenerated = NoYes::No; // likely needs to be left at taxWorkTrans.TaxAutogenerated
                taxTrans.euroTriangulation = triangulation;
                taxTrans.Voucher           = voucher;
                taxTrans.JournalNum        = this.journalNum();
                if (!taxTrans.TaxAutogenerated)
                {
                    taxAmountCur = taxTrans.SourceRegulateAmountCur;
                    taxInCostPrice = taxTrans.TaxInCostPriceRegulated;
                    this.taxAmountRegulation(taxTrans,
                                             taxTrans.SourceRegulateAmountCur,
                                             this.exchRate(),
                                             this.exchRateSecondary());
                    this.taxInCostPriceReporting(taxTrans,
                                                 taxTrans.TaxInCostPriceRegulated,
                                                 this.exchRate(),
                                                 this.exchRateSecondary());
                }
                else
                {
                    taxAmountCur           = taxTrans.SourceTaxAmountCur;
                    taxInCostPrice         = taxTrans.TaxInCostPrice;
                }

                taxTrans_W = taxTrans.taxTrans_W();

                this.setVatDueDate_W(taxTrans_W);

                taxTrans_W.ReversedTaxTransRecId_W = taxWorkTransTaxTransMap.lookup(taxWorkTrans.RecId);
                taxTrans.packTaxTrans_W(taxTrans_W);

                taxTrans.insert();

                this.post(
                    _ledgerPostingController,
                    taxTrans,
                    taxAmountCur,
                    taxInCostPrice,
                    exchangeRateHelper,
                    taxworkTrans.LedgerDimension,
                    taxworkTrans.OperationLedgerDimension,
                    taxworkTrans.TaxOffsetUseTaxLedgerDimension,
                    LedgerDetailLevel::AsDefault,
                    null,
                    LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(
                        this.offsetLedgerDimension(
                            taxWorkTrans.TaxCode,
                            taxWorkTrans.TaxDirection),
                        taxWorkTrans.LedgerDimension));

                if (this.canChargeBePostedByTax())
                {
                    this.postCharge(_ledgerPostingController, taxTrans, taxTrans.TaxInCostPrice, exchangeRateHelper, taxworkTrans.OperationLedgerDimension);
                }
            }
        }

        if (taxSourceLineSummaryTmp.SourceRecId && taxSourceLineSummaryTmp.SourceTableId)
        {
            taxSourceLineSummaryTmp.PrintCode = strList2str(codesList, ', ');
            if (taxSourceLineSummaryTmp.PrintCode)
            {
                insertList.add(taxSourceLineSummaryTmp);
            }
        }

        insertList.insertDatabase();

        TaxCalculationAdjustment::deleteTaxRegulation(this);

        ttscommit;

        if (MultipleTaxIdReportingHelper::isLegalEntityOrTaxCodeInCountryRegion(
            taxTrans.TaxCode, [#isoIT], MultipleTaxIdScope::VATDeclaration))
        {
            info(strFmt("@SYS75076", taxTrans.Voucher));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax amount on tax transaction.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// <c>TmpTaxWorkTrans</c> table.
    /// </param>
    /// <returns>
    /// Tax amount.
    /// </returns>
    protected TaxAmount taxAmount(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return _tmpTaxWorkTrans.SourceTaxAmountCur - _tmpTaxWorkTrans.TaxInCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVatDueDate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the date of VAT register when country region is PL and exits payment journal.
    /// </summary>
    protected void setVatDueDate_W(TaxTrans_W _taxTrans_W)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL])
            && this.custVendTrans)
        {
            OverdueJournalSettings_W overdueJournalSettings_W;

            switch (this.custVendTrans.TableId)
            {
                case tableNum(CustTrans):
                    overdueJournalSettings_W
                        = OverdueJournalSettings_W::findJournalType(OverdueJournalType_W::CustVATJournal);
                    break;
                case tableNum(VendTrans):
                    overdueJournalSettings_W
                        = OverdueJournalSettings_W::findJournalType(OverdueJournalType_W::VendVATJournal);
                    break;
            }

            if (overdueJournalSettings_W)
            {
                if (!custVendTrans.LastSettleVoucher)
                {
                    switch (overdueJournalSettings_W.CalcType)
                    {
                        case OverdueCalcType_W::InvoiceDate:
                            _taxTrans_W.VatDueDate_W = this.custVendTrans.TransDate + overdueJournalSettings_W.MinDays;
                            break;
                        case OverdueCalcType_W::DueDate:
                            _taxTrans_W.VatDueDate_W = this.custVendTrans.DueDate + overdueJournalSettings_W.MinDays;
                            break;
                    }
                }
                else
                {
                    switch (this.custVendTrans.TableId)
                    {
                        case tableNum(CustTrans):
                            CustSettlement custSettlement;
                            select firstonly TransDate from custSettlement
                                order by custSettlement.RecId desc
                                where custSettlement.TransRecId == this.custVendTrans.RecId;
                            _taxTrans_W.VatDueDate_W = custSettlement.TransDate;
                            break;

                        case tableNum(VendTrans):
                            VendSettlement vendSettlement;
                            select firstonly TransDate from vendSettlement
                                order by vendSettlement.RecId desc
                                where vendSettlement.TransRecId == this.custVendTrans.RecId;
                            _taxTrans_W.VatDueDate_W = vendSettlement.TransDate;
                            break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>TaxOverdueVAT_W</c> class.
    /// </summary>
    /// <returns>
    /// <c>TaxOverdueVAT_W</c> class instance.
    /// </returns>
    /// <remarks>
    /// Percent parameter is not used in calculations.
    /// </remarks>
    public static TaxOverdueVAT_W construct()
    {
        return new TaxOverdueVAT_W(0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>