<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ERParametersCustomDialogHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;
using SL = Microsoft.Dynamics365.LocalizationFramework.XppSupportLayer;

/// <summary>
/// This class manages user input parameters (UIPs) from ER in the provided dialog.
/// </summary>
internal class ERParametersCustomDialogHandler implements SysPackable
{
    private Dialog dialog;
    private Map mapDialogFieldsToParameterNames;
    private Map mapParametersNamesToParameterValues;
    private Map mapDialogFieldNamesToEnumParameterDataContract;

    #define.CurrentVersion(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDialog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Dialog parmDialog(Dialog _dialog = dialog)
    {
        dialog = _dialog;
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        mapDialogFieldsToParameterNames = new Map(Types::Class, Types::String);
        mapParametersNamesToParameterValues = new Map(Types::String, Types::AnyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ERParametersCustomDialogHandler construct(Dialog _dialog)
    {
        ERParametersCustomDialogHandler handler = new ERParametersCustomDialogHandler();
        handler.parmDialog(_dialog);
        return handler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFormatGenerationParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds user input parameters and enum user input parameters from GER format.
    /// </summary>
    /// <param name = "_formatMappingRun">GER format runner.</param>
    [Hookable(false)]
    public void addFormatGenerationParameters(ERIFormatMappingRun _formatMappingRun)
    {
        if (_formatMappingRun == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        var parameters = _formatMappingRun.getDatasourceDefinitionParameters();
        var parametersEnumerator = parameters.getEnumerator();

        boolean formatNameAdded = false;

        while (parametersEnumerator.moveNext())
        {
            ERAnyType currentParameter =  parametersEnumerator.currentValue();
            ERIUserParameterValue currentUserParameter = ERCast::asAny(currentParameter.value()) as ERIUserParameterValue;
            if (currentUserParameter)
            {
                if (!formatNameAdded)
                {
                    var erFormatInfo = _formatMappingRun.getFormatInfo();
                    dialog.addText(erFormatInfo.getDescription() ? erFormatInfo.getDescription() : erFormatInfo.getName());
                    formatNameAdded = true;
                }

                DialogField field = this.addParameterToDialog(_formatMappingRun, currentUserParameter);

                if (field)
                {
                    var parameterValue = currentUserParameter.parmValue() 
                        ? currentUserParameter.parmValue() 
                        : nullValue(currentUserParameter.parmValue());
                    var parameterName = parametersEnumerator.currentKey().ToString();

                    mapDialogFieldsToParameterNames.insert(field, parameterName);
                    mapParametersNamesToParameterValues.insert(parameterName, parameterValue);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatParameterValuesFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets values from closed dialog.
    /// </summary>
    [Hookable(false)]
    public void getFormatParameterValuesFromDialog()
    {
        if (mapDialogFieldsToParameterNames)
        {
            MapEnumerator mapDialogFieldsToParameterNamesEnumerator = mapDialogFieldsToParameterNames.getEnumerator();

            while (mapDialogFieldsToParameterNamesEnumerator.moveNext())
            {
                DialogField dialogField = mapDialogFieldsToParameterNamesEnumerator.currentKey() as DialogField;
                if (dialogField)
                {
                    mapParametersNamesToParameterValues.insert(mapDialogFieldsToParameterNamesEnumerator.currentValue().ToString(), dialogField.value());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModelDefinitionInputParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Put values into further ER processing.
    /// </summary>
    /// <returns>A <c>ERModelDefinitionInputParametersAction</c> instance.</returns>
    [Hookable(false)]
    public ERModelDefinitionInputParametersAction getModelDefinitionInputParameters()
    {
        ERModelDefinitionInputParametersAction retVal = new ERModelDefinitionInputParametersAction();

        var mapParametersNamesToParameterValuesEnumerator = mapParametersNamesToParameterValues.getEnumerator();

        while (mapParametersNamesToParameterValuesEnumerator.moveNext())
        {
            str parameterName = mapParametersNamesToParameterValuesEnumerator.currentKey().ToString();
            retVal.addParameter(parameterName, this.applyValueTransaformation(mapParametersNamesToParameterValuesEnumerator.currentValue()));
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParameterToDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds GER format input parameters to the dialog.
    /// </summary>
    /// <param name = "_formatMappingRun">GER format runner.</param>
    /// <param name = "_userParameter">GER user input parameter to add.</param>
    /// <returns>Dialog field for the specified user parameter.</returns>
    private DialogField addParameterToDialog(ERIFormatMappingRun _formatMappingRun, ERIUserParameterValue _userParameter)
    {
        DialogField ret;
        if (_userParameter is ERIUserParameterDataContract)
        {
            ERIUserParameterDataContract currentUserParameter =  _userParameter as ERIUserParameterDataContract;
            ret = this.addUserParameterToDialog(_formatMappingRun, currentUserParameter);
        }
        if (_userParameter is ERIEnumParameterDataContract)
        {
            ERIEnumParameterDataContract currentUserParameter = _userParameter as ERIEnumParameterDataContract;
            ret = this.addEnumParameterToDialog(_formatMappingRun, currentUserParameter);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addUserParameterToDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds GER format user input parameters to the dialog.
    /// </summary>
    /// <param name = "_formatMappingRun">GER format runner.</param>
    /// <param name = "_userParameter">GER user input parameter to add.</param>
    /// <returns>Dialog field for the specified user parameter.</returns>
    private DialogField addUserParameterToDialog(ERIFormatMappingRun _formatMappingRun, ERIUserParameterDataContract _userParameter)
    {
        var labelRepository = _formatMappingRun.parmLabelRepository();
        var parameterLabel = labelRepository.getTranslatedText(_userParameter.parmLabel(), currentUserLanguage());
        var parameterExtDataType = _userParameter.getDataSource().parmExtendedDataTypeName();
        var parameterHelpText = labelRepository.getTranslatedText(_userParameter.parmHelpText(), currentUserLanguage());

        return dialog.addFieldValue(parameterExtDataType, _userParameter.parmValue(), parameterLabel, parameterHelpText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupEnum</Name>
				<Source><![CDATA[
    /// <summary>
    /// A lookup method for enum field.
    /// </summary>
    /// <param name = "_control">Control with enum.</param>
    private void lookupEnum(FormStringControl _control)
    {
        ERIEnumParameterDataContract enumParamContract = mapDialogFieldNamesToEnumParameterDataContract.lookup(_control.name());
        enumParamContract.lookupEnumElements(_control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEnumParameterToDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds GER format enum user input parameters to the dialog.
    /// </summary>
    /// <param name = "_formatMappingRun">GER format runner.</param>
    /// <param name = "_userParameter">GER user input parameter to add.</param>
    /// <returns>Dialog field for the specified user parameter.</returns>
    private DialogField addEnumParameterToDialog(ERIFormatMappingRun _formatMappingRun, ERIEnumParameterDataContract _userParameter)
    {
        var labelRepository = _formatMappingRun.parmLabelRepository();
        var parameterLabel = labelRepository.getTranslatedText(_userParameter.parmLabel(), currentUserLanguage());
        var parameterHelpText = labelRepository.getTranslatedText(_userParameter.parmHelpText(), currentUserLanguage());

        DialogField dialogField = dialog.addField(extendedTypeStr(Name), parameterLabel, parameterHelpText);
        if (typeOf(_userParameter.parmValue()) != Types::AnyType)
        {
            dialogField.value(_userParameter.parmValue());
        }
        dialogField.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(ERParametersCustomDialogHandler, lookupEnum), this);

        if (mapDialogFieldNamesToEnumParameterDataContract == null)
        {
            mapDialogFieldNamesToEnumParameterDataContract = new Map(Types::String, Types::Class);
        }
        mapDialogFieldNamesToEnumParameterDataContract.insert(dialogField.name(), _userParameter);

        return dialogField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyValueTransaformation</Name>
				<Source><![CDATA[
    private anytype applyValueTransaformation(anytype _localDateTime)
    {
        var retVal = _localDateTime;

        if (SL.TypeHelper::IsUtcDateTimeType(retVal.GetType()))
        {
            if (retVal.GetType() is SL.utcdatetime)
            {
                retVal = ERDateTimeUtils::convertFromUserTimeZoneToUTC(retVal);
            }
            else
            {
                retVal = ERDateTimeUtils::convertFromUserTimeZoneToUTC(ERLFConvert::fromUtcdatetime(retVal));
            }
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container pack()
    {
        container packed = [#CurrentVersion];
        packed = this.appendVariableToPack(packed, varStr(mapParametersNamesToParameterValues), mapParametersNamesToParameterValues.pack());
        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendVariableToPack</Name>
				<Source><![CDATA[
    private container appendVariableToPack(container _pack, str _variableName, anytype _value)
    {
        XppPrePostArgs packArgs = this.createXppPrePostArgsWithPack(_pack);
        SysPackExtensions::pack(packArgs, this.getVariablePackKey(_variableName), [_value]);
        return packArgs.getReturnValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXppPrePostArgsWithPack</Name>
				<Source><![CDATA[
    private XppPrePostArgs createXppPrePostArgsWithPack(container _pack)
    {
        XppPrePostArgs prePostArgs = new XppPrePostArgs(_pack, '',  XppEventHandlerCalledWhen::Post);
        prePostArgs.setReturnValue(_pack);
        return prePostArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVariablePackKey</Name>
				<Source><![CDATA[
    private ClassName getVariablePackKey(str _variableName)
    {
        return classStr(ERParametersCustomDialogHandler) + '.' + _variableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean unpack(container packedClass)
    {
        Integer         version = RunBase::getVersion(packedClass);
        container       packedValuesMap;

        switch (version)
        {
            case #CurrentVersion:
                [version] = packedClass;
                packedValuesMap = this.extractPackedVariable(packedClass, varStr(mapParametersNamesToParameterValues));
                if (packedValuesMap)
                {
                    mapParametersNamesToParameterValues = Map::create(packedValuesMap);
                }

                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractPackedVariable</Name>
				<Source><![CDATA[
    private anytype extractPackedVariable(container _pack, str _variableName)
    {
        anytype value;
        [value] = SysPackExtensions::unpack(this.createXppPrePostArgsWithPack(_pack), this.getVariablePackKey(_variableName));
        return value;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>