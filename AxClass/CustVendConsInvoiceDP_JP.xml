<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendConsInvoiceDP_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Report Data Provider class for CustVendConsInvoice_JP SSRS report.
/// </summary>
[
    SRSReportParameterAttribute(ClassStr(CustVendConsInvoiceContract_JP))
]
class CustVendConsInvoiceDP_JP extends SrsReportDataProviderBase
{
    private CustVendConsInvoicePrintTaxesTmp_JP custVendConsInvoicePrintTaxesTmp;
    CustVendConsInvoicePrintTmp_JP custVendConsInvoicePrintTmp;
    CustVendConsInvoicePrintHeaderTmp_JP custVendConsInvoicePrintHeaderTmp;
    CustVendInvoiceTrans custVendInvoiceTrans;
    CustVendInvoiceJour custVendInvoiceJour;
    CustTrans custTrans;

    CustVendConsInvoice_JP custVendConsInvoice;

    TableId custVendConsInvoiceTableId;
    TableId custVendInvoiceTransTableId;
    TableId custVendInvoiceJourTableId;
    private boolean showMSTtaxes;
    private boolean showTaxTable;

    MenuItemName menuItemName;
    RecId recId;
    SalesPurch salesPurch;

    private Map taxAdjustmentMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustVendConsInvoicePrintTaxesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches data from <c>CustVendConsInvoicePrintTaxesTmp_JP</c> Table.
    /// </summary>
    /// <returns>
    ///     <c>CustVendConsInvoicePrintTaxesTmp_JP</c> cursor for displaying the report.
    /// </returns>
    [SRSReportDataSetAttribute('CustVendConsInvoicePrintTaxesTmp_JP')]
    public CustVendConsInvoicePrintTaxesTmp_JP getCustVendConsInvoicePrintTaxesTmp()
    {
        select * from custVendConsInvoicePrintTaxesTmp;
        return custVendConsInvoicePrintTaxesTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendConsInvoicePrintHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches data from CustVendConsInvoicePrintHeaderTmp_JP Table.
    /// </summary>
    /// <returns>
    ///     CustVendConsInvoicePrintHeaderTmp_JP Data for the report.
    /// </returns>
    [SRSReportDataSetAttribute('CustVendConsInvoicePrintHeaderTmp_JP')]
    public CustVendConsInvoicePrintHeaderTmp_JP getCustVendConsInvoicePrintHeaderTmp()
    {
        select * from custVendConsInvoicePrintHeaderTmp;
        return custVendConsInvoicePrintHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendConsInvoicePrintTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches data from CustVendConsInvoicePrintTmp_JP Table.
    /// </summary>
    /// <returns>
    ///     CustVendConsInvoicePrintTmp_JP Data for the report.
    /// </returns>
    [SRSReportDataSetAttribute('CustVendConsInvoicePrintTmp_JP')]
    public CustVendConsInvoicePrintTmp_JP getCustVendConsInvoicePrintTmp()
    {
        select * from custVendConsInvoicePrintTmp;
        return custVendConsInvoicePrintTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets table id according to menuitem name.
    /// </summary>
    private void getTableId()
    {
        switch (menuItemName)
        {
            case menuItemOutputStr(CustConsInvoicePrint_JP):
                custVendConsInvoiceTableId  = tablenum(CustConsInvoice_JP);
                custVendInvoiceTransTableId = tablenum(CustInvoiceTrans);
                custVendInvoiceJourTableId  = tablenum(CustInvoiceJour);
                break;

            case menuItemOutputStr(VendConsInvoicePrint_JP):
                custVendConsInvoiceTableId  = tablenum(VendConsInvoice_JP);
                custVendInvoiceTransTableId = tablenum(VendInvoiceTrans);
                custVendInvoiceJourTableId  = tablenum(VendInvoiceJour);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInvoiceReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches the required data for the custVendConsInvoice report.
    /// </summary>
    private void processInvoiceReport()
    {
        Query       query;
        QueryRun    qr;
        Num         salesPurchIdOrig;

        this.getTableId();

        ttsbegin;

        this.populatePrintTaxesTmp();
        custVendConsInvoicePrintHeaderTmp.insertReportData(custVendConsInvoice);

        ttscommit;

        query = CustVendConsInvoiceType_JP::buildPrintQuery(
            custVendConsInvoiceTableId,
            custVendInvoiceJourTableId,
            custVendInvoiceTransTableId,
            recId);

        qr = new QueryRun(query);

        ttsbegin;

        while (qr.next())
        {
            custVendInvoiceTrans = qr.get(custVendInvoiceTransTableId);

            if (salesPurchIdOrig != custVendInvoiceTrans.SalesPurchOrigId_JP)
            {
                if (salesPurchIdOrig)
                {
                    custVendConsInvoicePrintTmp.insertFromInvoiceJour(custVendInvoiceJour);
                }
                salesPurchIdOrig    = custVendInvoiceTrans.SalesPurchOrigId_JP;
                custVendInvoiceJour = qr.get(custVendInvoiceJourTableId).data();
            }
            custVendConsInvoicePrintTmp.insertFromInvoiceTrans(custVendInvoiceTrans, salesPurch);
        }

        if (custVendInvoiceJour.RecId != 0)
        {
            custVendConsInvoicePrintTmp.insertFromInvoiceJour(custVendInvoiceJour);
        }
        custVendConsInvoicePrintHeaderTmp.HideMSTfields = !showMSTtaxes;
        custVendConsInvoicePrintHeaderTmp.HideTaxTable = !showTaxTable;

        CustInvoiceQualifiedInvoiceIssuerParameters custInvoiceQualifiedInvoiceIssuerParameters = new CustInvoiceQualifiedInvoiceIssuerParameters(InvoiceType_JP::ConsolidatedInvoice);
        custVendConsInvoicePrintHeaderTmp.ShowQIILabel = custInvoiceQualifiedInvoiceIssuerParameters.parmShowQIILabel();
        custVendConsInvoicePrintHeaderTmp.ShowQIINum = custInvoiceQualifiedInvoiceIssuerParameters.parmShowQIINumber();
        custVendConsInvoicePrintHeaderTmp.QIINum = custInvoiceQualifiedInvoiceIssuerParameters.parmQIINumber();
        custVendConsInvoicePrintHeaderTmp.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPaymSlipReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches the required data for the paymSlip report.
    /// </summary>
    private void processPaymSlipReport()
    {
        Query       query;
        QueryRun    qr;

        query = CustVendConsInvoiceType_JP::buildPaymSlipPrintQuery(custVendConsInvoice.ConsInvoice_JP);

        ttsbegin;

        custVendConsInvoicePrintHeaderTmp.insertReportData(custVendConsInvoice, true);

        ttscommit;

        qr = new QueryRun(query);

        ttsbegin;

        while (qr.next())
        {
            custTrans = qr.get(tablenum(CustTrans));
            if ((custTrans.TransType == LedgerTransType::Payment
                && custTrans.CancelledPayment == NoYes::No)
                || (custTrans.TransType == LedgerTransType::None
                && custTrans.BillOfExchangeID != '')
                || custTrans.SettleAmountMST != 0)
            {
                custVendConsInvoicePrintTmp.insertFromCustTrans(custTrans);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches the required data for the report.
    /// </summary>
    public void processReport()
    {
        CustVendConsInvoiceContract_JP	contract;

        contract = this.parmDataContract() as CustVendConsInvoiceContract_JP;

        recId        = contract.parmRecordId();
        menuItemName = contract.parmMenuItemName();

        if (menuItemName == menuItemOutputStr(VendConsInvoicePrint_JP))
        {
            custVendConsInvoice  = VendConsInvoice_JP::find(recId);
            salesPurch = SalesPurch::Purch;
        }
        else if (menuItemName == menuItemOutputStr(CustConsInvoicePrint_JP) ||
             menuItemName == menuItemOutputStr(CustConsInvoicePaymSlipPrint_JP))
        {
            custVendConsInvoice  = CustConsInvoice_JP::find(recId);
            salesPurch = SalesPurch::Sales;
        }

        if (menuItemName == menuItemOutputStr(CustConsInvoicePaymSlipPrint_JP))
        {
            this.processPaymSlipReport();
        }
        else
        {
            this.processInvoiceReport();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePrintTaxesTmp</Name>
				<Source><![CDATA[
    private void populatePrintTaxesTmp()
    {
        int sign = 1;
        RefTableId custVendTransTableId;
        RefTableId custVendTrans_WTableId;
        RefFieldId consInvoice_JPFieldId;
        TaxSpecPrintLevel taxSpecPrintLevel;
        boolean isTaxAdjustmentPrintFlightEnabled = CustVendConsInvoiceTaxAdjustmentPrintFlight_JP::instance().isEnabled();

        switch (custVendConsInvoice.TableId)
        {
            case tablenum(CustConsInvoice_JP):
                custVendTransTableId = tableNum(CustTrans);
                custVendTrans_WTableId = tableNum(CustTrans_W);
                consInvoice_JPFieldId = fieldNum(CustTrans_W, CustConsInvoice_JP);
                taxSpecPrintLevel = CustFormletterParameters::find().TaxSpecPrintLevel;
                sign = -1;
                break;

            case tablenum(VendConsInvoice_JP):
                custVendTransTableId = tableNum(VendTrans);
                custVendTrans_WTableId = tableNum(VendTrans_W);
                consInvoice_JPFieldId = fieldNum(VendTrans_W, VendConsInvoice_JP);
                taxSpecPrintLevel = VendFormletterParameters::find().TaxSpecPrintLevel;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }


        QueryRun queryRun = new QueryRun(this.getTaxTransQuery(
            custVendTransTableId,
            custVendTrans_WTableId,
            consInvoice_JPFieldId,
            custVendConsInvoice.RecId));

        CurrencyCode currencyMST = Ledger::accountingCurrency();
        boolean cumulativeTaxAdjustmentZero = isTaxAdjustmentPrintFlightEnabled && this.iscumulativeTaxAdjustmentZero(custVendConsInvoice.RecId, custVendConsInvoice.TableId);

        while (queryRun.next())
        {
            TaxTrans taxTrans = queryRun.get(tableNum(TaxTrans));
            TaxAmount adjustmentAmountPerTaxCode = 0;

            custVendConsInvoicePrintTaxesTmp.TaxCode = taxTrans.TaxCode;
            custVendConsInvoicePrintTaxesTmp.PrintCode = this.getPrintCode(taxTrans);
            custVendConsInvoicePrintTaxesTmp.SourceBaseAmountCur = taxTrans.SourceBaseAmountCur * sign;

            if (TaxConsInvoice_JP::isTaxDifferencePostingOnConsInvoiceEnabled(false))
            {
                custVendConsInvoicePrintTaxesTmp.TaxBaseQty = taxTrans.TaxBaseQty * sign;

                // Only if the cons invoice is posted because then only the tax
                // adjustment amount per tax code is present in taxTrans table.
                if (custVendConsInvoice.Posted == NoYes::Yes && isTaxAdjustmentPrintFlightEnabled)
                {
                    adjustmentAmountPerTaxCode = this.getTaxAdjustmentPerTaxCode(taxTrans.TaxCode);

                    // If there is non-zero tax adjustment amount per tax code
                    custVendConsInvoicePrintTaxesTmp.TaxAdjustmentAmount = adjustmentAmountPerTaxCode * sign;
                }
            }
            else
            {
                custVendConsInvoicePrintTaxesTmp.TaxBaseQty = taxTrans.TaxBaseQty;
            }

            // Only when the cumulative tax adjustment amount is zero,
            // no custTrans entry is posted, that's why we need to manually
            // add the tax adjustment amounts to per tax code tax values.
            if (isTaxAdjustmentPrintFlightEnabled && cumulativeTaxAdjustmentZero && adjustmentAmountPerTaxCode)
            {
                taxTrans.SourceTaxAmountCur += adjustmentAmountPerTaxCode;
                taxTrans.TaxAmount += adjustmentAmountPerTaxCode;   
            }

            custVendConsInvoicePrintTaxesTmp.SourceTaxAmountCur = taxTrans.SourceTaxAmountCur * sign;
            custVendConsInvoicePrintTaxesTmp.TaxBaseAmount = taxTrans.TaxBaseAmount * sign;
            custVendConsInvoicePrintTaxesTmp.TaxAmount = taxTrans.TaxAmount * sign;
            custVendConsInvoicePrintTaxesTmp.TaxExemptDescription = TaxExemptCodeTable::txt(taxTrans.ExemptCode);
            custVendConsInvoicePrintTaxesTmp.insert();
            showTaxTable = true;
            showMSTtaxes = showMSTtaxes || taxTrans.CurrencyCode != currencyMST;
        }

        showTaxTable = showTaxTable && (taxSpecPrintLevel != TaxSpecPrintLevel::None);
        showMSTtaxes = showMSTtaxes && (taxSpecPrintLevel == TaxSpecPrintLevel::CurrencyMST);

    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransQuery</Name>
				<Source><![CDATA[
    private Query getTaxTransQuery(
        RefTableId _custVendTransTableId, 
        RefTableId _custVendTrans_WTableId,
        RefFieldId _consInvoice_JPFieldId,
        RefRecId   _consInvoice_JPRecIdValue)
    {
        Query query = new Query();
        QueryBuildDataSource qbdsTaxTrans = query.addDataSource(tableNum(TaxTrans));
        qbdsTaxTrans.orderMode(OrderMode::GroupBy);

        qbdsTaxTrans.addSelectionField(fieldNum(TaxTrans, SourceBaseAmountCur), SelectionField::Sum);
        qbdsTaxTrans.addSelectionField(fieldNum(TaxTrans, TaxBaseAmount), SelectionField::Sum);
        qbdsTaxTrans.addSelectionField(fieldNum(TaxTrans, TaxBaseQty), SelectionField::Sum);
        qbdsTaxTrans.addSelectionField(fieldNum(TaxTrans, SourceTaxAmountCur), SelectionField::Sum);
        qbdsTaxTrans.addSelectionField(fieldNum(TaxTrans, TaxAmount), SelectionField::Sum);
        qbdsTaxTrans.addSelectionField(fieldNum(TaxTrans, SourceRegulateAmountCur), SelectionField::Sum);
        
        qbdsTaxTrans.addSortField(fieldNum(TaxTrans, TaxCode));
        qbdsTaxTrans.addSortField(fieldNum(TaxTrans, ExemptCode));
        qbdsTaxTrans.addSortField(fieldNum(TaxTrans, TaxValue));
        qbdsTaxTrans.addSortField(fieldNum(TaxTrans, CurrencyCode));

        QueryBuildDataSource qbdsCustVendTrans = qbdsTaxTrans.addDataSource(_custVendTransTableId);
        qbdsCustVendTrans.relations(true);
        qbdsCustVendTrans.joinMode(JoinMode::ExistsJoin);

        QueryBuildDataSource qbdsCustVendTrans_W = qbdsCustVendTrans.addDataSource(_custVendTrans_WTableId);
        qbdsCustVendTrans_W.relations(true);
        qbdsCustVendTrans_W.joinMode(JoinMode::ExistsJoin);
        qbdsCustVendTrans_W.addRange(_consInvoice_JPFieldId).value(queryValue(_consInvoice_JPRecIdValue));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintCode</Name>
				<Source><![CDATA[
    private TaxWriteCode getPrintCode(TaxTrans _taxTrans)
    {
        TaxWriteCode printCode;
        TaxTable taxTable = taxTable::find(_taxTrans.TaxCode);
        if (taxTable.TaxWriteSelection == TaxWriteSelection::TaxRate)
        {
            SysDictType dictType = new SysDictType(extendedTypeNum(TaxValue));
            printCode = num2str(_taxTrans.TaxValue, -1, dictType.noOfDecimals(), -1, -1);
        }
        else
        {
            printCode = taxTable.PrintCode;
        }
        return printCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentPerTaxCode</Name>
				<Source><![CDATA[
    private TaxAmount getTaxAdjustmentPerTaxCode(TaxCode _taxCode)
    {
        TaxAmount taxAdjustmentAmount = 0;

        if (taxAdjustmentMap.exists(_taxCode))
        {
            taxAdjustmentAmount = taxAdjustmentMap.lookup(_taxCode);
        }

        return taxAdjustmentAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>iscumulativeTaxAdjustmentZero</Name>
				<Source><![CDATA[
    private boolean iscumulativeTaxAdjustmentZero(RefRecId _consInvoiceRecId, TableId _tableId)
    {
        TaxTrans taxTrans;
        AmountMST totalAdjustment = 0;
        taxAdjustmentMap = new Map(Types::String, Types::Real);

        CustConsInvoiceHistory_JP custConsInvoiceHistory;
        VendConsInvoiceHistory_JP vendConsInvoiceHistory;

        switch (_tableId)
        {
            case tablenum(CustConsInvoice_JP):
                while select sum(SourceRegulateAmountCur), TaxCode
                from taxTrans
                    group by TaxCode
                    join JournalNum from custConsInvoiceHistory
                        where custConsInvoiceHistory.JournalNum == taxTrans.JournalNum
                        && custConsInvoiceHistory.ConsInvoiceRecId == _consInvoiceRecId
                        && custConsInvoiceHistory.Reversed ==NoYes::No
                {
                    taxAdjustmentMap.insert(taxTrans.TaxCode, taxTrans.SourceRegulateAmountCur);
                    totalAdjustment += taxTrans.SourceRegulateAmountCur;
                }
                break;

            case tablenum(VendConsInvoice_JP):
                while select sum(SourceRegulateAmountCur), TaxCode
                from taxTrans
                    group by TaxCode
                    join JournalNum from vendConsInvoiceHistory
                        where vendConsInvoiceHistory.JournalNum == taxTrans.JournalNum
                        && vendConsInvoiceHistory.ConsInvoiceRecId == _consInvoiceRecId
                        && vendConsInvoiceHistory.Reversed ==NoYes::No
                {
                    taxAdjustmentMap.insert(taxTrans.TaxCode, taxTrans.SourceRegulateAmountCur);
                    totalAdjustment += taxTrans.SourceRegulateAmountCur;
                }
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return totalAdjustment == 0;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>