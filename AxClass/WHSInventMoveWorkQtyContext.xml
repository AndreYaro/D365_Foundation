<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventMoveWorkQtyContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     A work quantity movement context. It allows to pass additional information to the downstream methods from a high-level process.
/// </summary>
internal final class WHSInventMoveWorkQtyContext implements System.IDisposable
{
    private const str SkipCheckMultiStatusLPKey = 'SkipCheckMultiStatusLPKey';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWithSkipCheckMultiStatusLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>WHSInventMoveWorkQtyContext</c> class.
    /// </summary>
    /// <param name = "_canSkipCheckMultiStatusLP">Defines if multi-status on a single license plate check can be skipped.</param>
    /// <returns>An instance of the <c>WHSInventMoveWorkQtyContext</c> class.</returns>
    [Hookable(false)]
    public static WHSInventMoveWorkQtyContext constructWithSkipCheckMultiStatusLP(boolean _canSkipCheckMultiStatusLP)
    {
        SysTransactionScopeCache::set(classStr(WHSInventMoveWorkQtyContext), SkipCheckMultiStatusLPKey, _canSkipCheckMultiStatusLP);

        return new WHSInventMoveWorkQtyContext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSkipCheckMultiStatusLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if it is allowed to skip multi-status on a single license plate check.
    /// </summary>
    /// <returns>true if can skip a check; false otherwise.</returns>
    /// <remarks>
    /// If no context is created, it is not allowed to skip a check and false is returned.
    /// </remarks>
    [Hookable(false)]
    public static boolean canSkipCheckMultiStatusLP()
    {
        return SysTransactionScopeCache::get(classStr(WHSInventMoveWorkQtyContext), SkipCheckMultiStatusLPKey, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements <c>System.IDisposable</c> interface.
    /// Cleans up context data from transaction cache.
    /// </summary>
    [Hookable(false)]
    public void dispose()
    {
        SysTransactionScopeCache::clear(classStr(WHSInventMoveWorkQtyContext));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>