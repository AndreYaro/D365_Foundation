<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPlanVersionsManagerInstance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Instance class to wrap static class <c>ProjPlanVersion</c> related functions.
/// </summary>
class ProjPlanVersionsManagerInstance
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies tasks from hierarchy to hierarchy.
    /// </summary>
    /// <param name = "_planVersionsManagerContract"><c>ProjPlanVersionsManagerDataContract</c> object is used to specify the source hierarchy ID only.</param>
    /// <param name = "_destHierarchyId">Destination hierarchy ID.</param>
    /// <param name = "_copyRoot">Specifies if hierarchy root task should be copied.</param>
    /// <param name = "_copySmmActivityLinks">Specifies if links to <c>smmActivities</c>should be copied.</param>
    /// <remarks>To specify customized parameters by <c>ProjPlanVersionsManagerDataContract</c>, please use copyHierarchyByDataContract() method.</remarks>
    [Replaceable]
    public void copyHierarchy(  
        ProjPlanVersionsManagerDataContract _planVersionsManagerContract,
        HierarchyIdBase _destHierarchyId,
        boolean _copyRoot = true,
        boolean _copySmmActivityLinks = true)
    {
        if (_planVersionsManagerContract.parmHierarchyId() && _destHierarchyId)
        {
            ProjPlanVersionsManager::copyHierarchy(_planVersionsManagerContract.parmHierarchyId(), _destHierarchyId, _copyRoot, _copySmmActivityLinks);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyHierarchyByDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies tasks from hierarchy to hierarchy by data contract class.
    /// </summary>
    /// <param name = "_planVersionsManagerContract"><c>ProjPlanVersionsManagerDataContract</c> object to specify the source hierarchy ID and customized parameters.</param>
    /// <param name = "_destHierarchyId">Destination hierarchy ID.</param>
    /// <param name = "_copyRoot">Specifies if hierarchy root task should be copied.</param>
    /// <param name = "_copySmmActivityLinks">Specifies if links to <c>smmActivities</c>should be copied.</param>
    public void copyHierarchyByDataContract(
        ProjPlanVersionsManagerDataContract _planVersionsManagerContract,
        HierarchyIdBase _destHierarchyId,
        boolean _copyRoot = true,
        boolean _copySmmActivityLinks = true)
    {
        HierarchyIdBase sourceHierarchyId = _planVersionsManagerContract.parmHierarchyId();

        if (sourceHierarchyId && _destHierarchyId)
        {
            ttsbegin;

            // If this is a project WBS, get the latest published hierarchy ID.
            if (ProjPlanVersionDetail::isProjectHierarchy(sourceHierarchyId))
            {
                HierarchyIdBase publishedHierarchyId = ProjPlanVersionDetail::getNewDataModelPublishedHierarchyId(sourceHierarchyId);
                if (publishedHierarchyId && publishedHierarchyId != sourceHierarchyId)
                {
                    _planVersionsManagerContract.parmHierarchyId(publishedHierarchyId);
                }
            }
        
            ProjPlanVersionCopyHierarchy copyHierarchy = ProjPlanVersionCopyHierarchy::newForInsert(
                _planVersionsManagerContract,
                _destHierarchyId,
                ProjPlanVersion::getRootTaskId(_planVersionsManagerContract.parmHierarchyId()),
                _copyRoot,
                _copySmmActivityLinks);

            copyHierarchy.insert();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDraft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a draft version for the newly created project.
    /// </summary>
    /// <param name = "_planVersionsManagerContract"><c>ProjPlanVersionsManagerDataContract</c> object is used to specify the hierarchy ID.</param>
    /// <param name = "_rootName">Root task name.</param>
    /// <param name = "_startDate">Start date.</param>
    /// <param name = "_endDate">End date.</param>
    /// <param name = "_projId">Project ID.</param>
    public void createDraft(    ProjPlanVersionsManagerDataContract _planVersionsManagerContract,
                                ProjTaskName    _rootTaskName,
                                SchedFromDate   _startDate = dateNull(),
                                SchedToDate     _endDate   = dateNull(),
                                ProjId          _projId    = '')
    {
        if (_planVersionsManagerContract.parmHierarchyId())
        {
            ProjPlanVersionsManager::createDraft(_planVersionsManagerContract.parmHierarchyId(), _rootTaskName, _startDate, _endDate, _projId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTemplateHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates template hierarchy.
    /// </summary>
    /// <param name = "_planVersionsManagerContract"><c>ProjPlanVersionsManagerDataContract</c> object is used to specify the hierarchy ID.</param>
    /// <param name = "_rootName">Root task name.</param>
    public void createTemplateHierarchy(    ProjPlanVersionsManagerDataContract _planVersionsManagerContract,
                                            ProjTaskName _rootTaskName)
    {
        if (_planVersionsManagerContract.parmHierarchyId())
        {
            ProjPlanVersionsManager::createTemplateHierarchy(_planVersionsManagerContract.parmHierarchyId(), _rootTaskName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct <c>ProjPlanVersionsManagerInstance</c> class object.
    /// </summary>
    /// <returns>New instance of <c>ProjPlanVersionsManagerInstance</c> class object.</returns>
    public static ProjPlanVersionsManagerInstance construct()
    {
        ProjPlanVersionsManagerInstance planVersionsManagerInstance = new ProjPlanVersionsManagerInstance();
        return planVersionsManagerInstance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>