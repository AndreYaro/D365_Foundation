<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjIntercompanyCustomerInvoiceCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for creating a customer invoice, i.e.
/// issued by the legal entity loaning an employee's work, in a
/// intercompany scenario.
/// </summary>
class ProjIntercompanyCustomerInvoiceCreator
{
    List                    origTransList;
    InvoiceDate             invoiceDate;
    LedgerDimensionAccount  lineLedgerDimension;
    int                     lineNum;
    CustInvoiceTable        custInvoiceTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a customer invoice.
    /// </summary>
    /// <returns>
    /// The <c>CustInvoiceTable</c> that was created.
    /// </returns>
    public CustInvoiceTable createInvoice()
    {
        ListEnumerator                      origTransEnum;
        ProjIntercompanyInvoiceOrigTrans    origTrans;

        origTransEnum = origTransList.getEnumerator();
        ttsBegin;
        while (origTransEnum.moveNext())
        {
            origTrans = origTransEnum.current();
            if (!custInvoiceTable)
            {
                custInvoiceTable = this.createInvoiceHeader(origTrans);
            }
            this.createInvoiceLine(origTrans , custInvoiceTable);
        }
        ttsCommit;

        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCustInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>CustInvoiceTable</c> fields.
    /// </summary>
    /// <param name="_custTable">
    /// The <c>CustTable</c> record to use for initializing <c>CustInvoiceTable</c> fields.
    /// </param>
    /// <param name="_origTrans">
    /// The original transaction to use for initializing <c>CustInvoiceTable</c> fields.
    /// </param>
    /// <param name="_invoiceDate">
    /// The invoice date for the customer invoice.
    /// </param>
	/// <returns>
	/// The <c>CustInvoiceTable</c> record.
	/// </returns>
   protected CustInvoiceTable initializeCustInvoiceTable(CustTable _custTable, ProjIntercompanyInvoiceOrigTrans _origTrans, InvoiceDate _invoiceDate)
    {
        WorkflowTable workflowTable = WorkflowTable::findActiveTemplate('CustFreeTextInvoiceTemplate');

        custInvoiceTable.initFromCustTable(_custTable);
        custInvoiceTable.InvoiceDate = invoiceDate;
        custInvoiceTable.ProjIntercompany = _origTrans.getProjectDataAreaId();

        if (workflowTable && workflowTable.DataArea == curExt())
        {
            custInvoiceTable.WorkflowApprovalStatus = CustFreeInvoiceWFApprovalStatus::Draft;
        }

        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceHeader</Name>
				<Source><![CDATA[
    private CustInvoiceTable createInvoiceHeader(ProjIntercompanyInvoiceOrigTrans _origTrans)
    {
		InterCompanyTradingPartner tradingPartner = InterCompanyTradingPartner::findTradingCustomer(_origTrans.getDataAreaId(), _origTrans.getProjectDataAreaId());
		CustTable custTable = CustTable::findByPartyRecId(tradingPartner.CustomerParty);

        if (!tradingPartner || !custTable)
        {
            throw error(strFmt("@SYS4005055", _origTrans.getProjectDataAreaId()));
        }
        custInvoiceTable = this.initializeCustInvoiceTable(custTable, _origTrans, invoiceDate);
        custInvoiceTable.setListCode();

        custInvoiceTable.insert();

        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionForProjPosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the ledger dimension for the specified combination for ledger posting.
    /// </summary>
    /// <param name = "_origTrans">
    ///     An instance of <c>CustInvoiceTable</c> buffer.
    /// </param>
    /// <param name = "_invoice">
    ///     An instance of <c>CustInvoiceTable</c> buffer.
    /// </param>
    /// <returns>
    ///     The ledger dimension.
    /// </returns>
    [Wrappable(true)]
    protected final LedgerDimensionAccount getLedgerDimensionForProjPosting(ProjIntercompanyInvoiceOrigTrans _origTrans, CustInvoiceTable _invoice)
    {       

        LedgerDimensionAccount ledgerDimension = ProjPosting::findprojPosting(ProjAccountType::IntercompanyRevenue,
                                                                              _origTrans.getProjectId(), 
                                                                              _origTrans.getProjectCategoryId(),
                                                                              0,
                                                                              false,
                                                                              _invoice.taxGroup,
                                                                              curExt(),
                                                                              _invoice.ProjIntercompany).LedgerDimension;
        
        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the intercompany invoice line.
    /// </summary>
    /// <param name = "_origTrans">
    /// An instance of the <c>ProjIntercompanyInvoiceOrigTrans</c>.
    /// </param>
    /// <param name = "_invoice">
    /// An instance of <c>CustInvoiceTable</c> buffer.
    /// </param>
    /// <returns>
    /// returns the created customer invoice line.
    /// </returns>
    protected CustInvoiceLine createInvoiceLine(ProjIntercompanyInvoiceOrigTrans _origTrans, CustInvoiceTable _invoice)
    {
        CustInvoiceLine newLine;
        CustInvoiceLineInterProj newLineProj;
        // <GIN>
        CustInvoiceLineTaxExtensionIN newLineTaxExtensionIN;
        #isoCountryRegionCodes
        // </GIN>

        newLine.initFromCustInvoiceTable(_invoice);

        newLine.LineNum = lineNum;
        lineNum++;

        newLine.ParentRecId = _invoice.RecId;
        newLine.AmountCur = CurrencyExchangeHelper::curAmount2CurAmount(_origTrans.getAmountCur(), _origTrans.getCurrencyCode(), _invoice.CurrencyCode, invoiceDate, false);
        newLine.Quantity = _origTrans.getQuantity();
        newLine.UnitPrice = ExchangeRateHelper::curPrice2CurPrice(_origTrans.getUnitPrice(), _origTrans.getCurrencyCode(), _invoice.CurrencyCode, invoiceDate);

        // Swapping the negative sign for the negative expense report
        if (newLine.Quantity > 0 && newLine.UnitPrice < 0)
        {
            newLine.Quantity = -newLine.Quantity;
            newLine.UnitPrice = -newLine.UnitPrice;
        }

        newLine.Description = _origTrans.getDescription();
        newLine.InvoiceTxt  = _origTrans.getDescription();
        newLine.TaxItemGroup = _origTrans.getTaxItemGroup();
        if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            newLine.TaxGroup = _origTrans.getTaxGroup();
        }
        
        lineLedgerDimension = this.getLedgerDimensionForProjPosting(_origTrans, _invoice);

        newLine.LedgerDimension = lineLedgerDimension;
        newLine.DefaultDimension = _invoice.mergeDimension(_origTrans.getDefaultDimension(), _invoice.DefaultDimension);
        newLine.insert();

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            newLineTaxExtensionIN.CustInvoiceLine = newLine.RecId;
            newLineTaxExtensionIN.AssessableValueTransactionCurrency = newline.AmountCur;
            newLineTaxExtensionIN.insert();
        }
        // </GIN>

        newLineProj.CustInvoiceLine = newLine.RecId;
        this.initfromOrigTrans(newLineProj, _origTrans);

        newLineProj.insert();

        _origTrans.setBilled(true);

        return newLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromOrigTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes fields for the customer invoice line record with values from the specified <c>ProjIntercompanyInvoiceOrigTrans</c> record.
    /// </summary>
    /// <param name = "_newLineProj">
    ///     Instance of <c>CustInvoiceLineInterProj</c>.
    /// </param>
    /// <param name = "_origTrans">
    ///     Instance of <c>ProjIntercompanyInvoiceOrigTrans</c>.
    /// </param>
    protected void initFromOrigTrans(CustInvoiceLineInterProj   _newLineProj, ProjIntercompanyInvoiceOrigTrans  _origTrans)
    {
        _newLineProj.ProjDataArea                = _origTrans.getProjectDataAreaId();
        _newLineProj.ProjId                      = _origTrans.getProjectId();
        _newLineProj.ActivityNumber              = _origTrans.getActivityNumber();
        _newLineProj.ProjCategoryId              = _origTrans.getProjectCategoryId();
        _newLineProj.HcmWorker                   = _origTrans.getWorker();
        _newLineProj.TransType                   = _origTrans.getTransType();
        _newLineProj.TransDate                   = _origTrans.getTransDate();
        _newLineProj.ProjLinePropertyId          = _origTrans.getLinePropertyId();
        _newLineProj.OrigTransRecId              = _origTrans.getRecId();
        _newLineProj.OrigTransCurrency           = _origTrans.getCostCurrency();
        _newLineProj.CostPrice                   = abs(_origTrans.getCostPrice());
        _newLineProj.SalesPrice                  = abs(_origTrans.getSalesPrice());
        _newLineProj.SalesPriceCurrency          = _origTrans.getCurrencyCode();
        _newLineProj.IndirectComponentAmount     = _origTrans.getIndirectCost();
        _newLineProj.OrigTransSourceDocumentLine = _origTrans.getSourceDocumentLine();
        _newLineProj.TransactionOrigin           = _origTrans.getTransOrigin();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>ProjIntercompanyCustomerInvoiceCreator</c>.
    /// </summary>
    /// <param name="_origTransList">
    /// A <c>List</c> of <c>ProjIntercompanyInvoiceOrigTrans</c> objects to create the invoice from.
    /// </param>
    /// <param name="_invoiceDate">
    /// The date to be used in the invoices to be created.
    /// </param>
    /// <param name="_custInvoiceTable">
    /// An optional <c>CustInvoiceTable</c> where the lines will be added to.
    /// </param>
    protected void new(List _origTransList, InvoiceDate _invoiceDate, CustInvoiceTable _custInvoiceTable)
    {
        Debug::assert(_origTransList != null);

        custInvoiceTable    = _custInvoiceTable;
        origTransList       = _origTransList;
        invoiceDate         = _invoiceDate;
        lineNum             = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>ProjIntercompanyCustomerInvoiceCreator</c>.
    /// </summary>
    /// <param name="_origTransList">
    /// A <c>List</c> of <c>ProjIntercompanyInvoiceOrigTrans</c> objects to create the invoice from.
    /// </param>
    /// <param name="_invoiceDate">
    /// The date to be used in the invoices to be created.
    /// </param>
    /// <param name="_existingInvoice">
    /// An optional <c>CustInvoiceTable</c> where the lines will be added to.
    /// </param>
    /// <returns>
    /// <c>ProjIntercompanyCustomerInvoiceCreator</c> created from the given parameters.
    /// </returns>
    public static ProjIntercompanyCustomerInvoiceCreator construct(List             _origTransList,
                                                                   InvoiceDate      _invoiceDate,
                                                                   CustInvoiceTable _existingInvoice = null)
    {
        return new ProjIntercompanyCustomerInvoiceCreator(_origTransList, _invoiceDate, _existingInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFromOrigTransList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a project intercompany invoice from a <c>ProjTmpIntercompanyTransactionSelection</c> record,
    /// which is a temporary table with a "select" field that enable users to choose which transactions to invoice.
    /// </summary>
    /// <param name="_origTransList">
    /// A <c>List</c> of <c>ProjIntercompanyInvoiceOrigTrans</c> objects to create the invoice from.
    /// </param>
    /// <param name="_invoiceDate">
    /// The invoice date for the new invoice.
    /// </param>
    /// <param name="_existingInvoice">
    /// An optional <c>CustInvoiceTable</c> where the lines will be added to.
    /// </param>
    /// <returns>
    /// <c>CustInvoiceTable</c> created from the given parameters.
    /// </returns>
    public static CustInvoiceTable runFromOrigTransList(List             _origTransList,
                                                               InvoiceDate      _invoiceDate,
                                                               CustInvoiceTable _existingInvoice = null)
    {
        ProjIntercompanyCustomerInvoiceCreator  invoiceCreator;

        invoiceCreator = new ProjIntercompanyCustomerInvoiceCreator(_origTransList, _invoiceDate, _existingInvoice);
        return invoiceCreator.createInvoice();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>