<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationConfirmationController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesQuotationCofirmationController</c> class is the controller class for the associated SQL
/// ServerReporting Services report.
/// </summary>
class SalesQuotationConfirmationController extends TradeDocumentReportController implements BatchRetryable
{
    CustQuotationConfirmJour            custQuotationConfirmJour;
    SalesQuotationEditLinesForm         salesQuotationEditLines;
    str                                 inqueryType;
    boolean                             printNonCharge;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Sales Quotation Confirmation report title.
    /// </summary>
    /// <returns>
    /// The report title.
    /// </returns>
    protected str documentTitle()
    {
        str quotationTxt;

        if ((inqueryType != "@SYS12529" ) || (custQuotationConfirmJour.showQuotationStatus() != SalesQuotationStatus::Confirmed))
        {
            if (printCopyOriginal == PrintCopyOriginal::Copy)
            {
                if (custQuotationConfirmJour.isProforma())
                {
                    quotationTxt = literalStr("@SYS70791");
                }
                else
                {
                    quotationTxt = literalStr("@SYS24431");
                }
            }
            else
            {
                if (custQuotationConfirmJour.isProforma())
                {
                    quotationTxt = literalStr("@SYS269");
                }
                else
                {
                    quotationTxt = literalStr("@SYS5864");
                }
            }
        }
        else
        {
            if (printCopyOriginal == PrintCopyOriginal::Copy)
            {
                if (custQuotationConfirmJour.isProforma())
                {
                    quotationTxt = literalStr("@SYS70793");
                }
                else
                {
                    quotationTxt = literalStr("@SYS24432");
                }
            }
            else
            {
                if (custQuotationConfirmJour.isProforma())
                {
                    quotationTxt = literalStr("@SYS7845");
                }
                else
                {
                    quotationTxt = literalStr("@SYS12529");
                }
            }
        }

        return quotationTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentIdentifier</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected str documentIdentifier()
    {
        return custQuotationConfirmJour.QuotationDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleReportExceptions</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected boolean handleReportExceptions()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExceptionContextTableId</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected TableId reportExceptionContextTableId()
    {
        return custQuotationConfirmJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExceptionContextRecordId</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected RecId reportExceptionContextRecordId()
    {
        return custQuotationConfirmJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstJournal</Name>
				<Source><![CDATA[
    protected boolean getFirstJournal()
    {
        return journalList.first(custQuotationConfirmJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextJournal</Name>
				<Source><![CDATA[
    protected boolean getNextJournal()
    {
        return journalList.next(custQuotationConfirmJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the journal record to be passed to the contract.
    /// </summary>
    /// <returns>
    /// The record ID of the journal record.
    /// </returns>
    protected RecId getRecordId()
    {
        return custQuotationConfirmJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report and sets the print management.
    /// </summary>
    protected void initFormLetterReport()
    {
        printCopyOriginal = this.parmArgs().parmEnum();

        if (classIdGet(this.parmArgs().caller()) == classNum(SalesQuotationEditLinesForm_Sales_Confir) || classIdGet(this.parmArgs().caller()) == classNum(SalesQuotationEditLinesForm_Proj_Confir))
        {
            salesQuotationEditLines = this.parmArgs().caller();
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                printNonCharge = salesQuotationEditLines.parmPSAPrintNonCharge();
            }
        }
        if (this.parmArgs().record())
        {
            journalList = SalesQuotationEditLinesForm::createJournalListCopy(this.parmArgs().record());
        }
        else
        {
            journalList = this.parmArgs().object();
        }
        if (this.parmArgs().parm())
        {
            inqueryType = this.parmArgs().parm();
        }
        else
        {
            inqueryType = '';
        }

        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::Confirmation);
        formLetterReport.parmPrintType(printCopyOriginal);

        if (salesQuotationEditLines)
        {
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(salesQuotationEditLines.printerSettingsFormletter()));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(salesQuotationEditLines.printerSettingsFormletter()));
            formLetterReport.parmUsePrintMgmtDestinations(salesQuotationEditLines.usePrintManagement());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>SRSReportParameters</c> values to the report contract.
    /// </summary>
    protected void modifyContract()
    {
        SRSTmpDataStore srsTmpDataStore;
        SalesQuotationConfirmationContract  salesQuotationConfirmationContract = contract as SalesQuotationConfirmationContract;

        if (salesQuotationEditLines)
        {
            srsTmpDataStore.Value = salesQuotationEditLines.pack();
            srsTmpDataStore.insert();
            salesQuotationConfirmationContract.parmSalesQuotationEditLinesRecId(srsTmpDataStore.RecId);
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                salesQuotationConfirmationContract.parmPrintNonCharge(printNonCharge);
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    protected void output()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().documentReport().output(this.reportExceptionContextTableId(), this.reportExceptionContextRecordId()))
        {
            formLetterReport.loadPrintSettings(custQuotationConfirmJour,custQuotationConfirmJour.salesQuotationTable(),custQuotationConfirmJour.LanguageId);
            this.parmReportContract().parmRdlContract().parmLanguageId(custQuotationConfirmJour.LanguageId);
            this.parmReportContract().parmRdlContract().parmLabelLanguageId(custQuotationConfirmJour.LanguageId);

            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataContractRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values of the <c>CustQuotationConfirmJour</c> record.
    /// </summary>
    /// <param name="_common">
    /// A <c>CustQuotationConfirmJour</c> record.
    /// </param>
    protected void setDataContractRecord(Common _common)
    {
        custQuotationConfirmJour = _common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesQuotationConfirmationController construct()
    {
        return new SalesQuotationConfirmationController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initailzes the controller, sets the print management, assigns parameter values and runs the SRS report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        SalesQuotationConfirmationController formLetterController = SalesQuotationConfirmationController::construct();

        formLetterController.initArgs(_args, PrintMgmtDocType::construct(PrintMgmtDocumentType::Confirmation).getDefaultReportFormat());
        formLetterController.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDataContract</Name>
				<Source><![CDATA[
    public static SrsReportDataContract newDataContract(Args _args)
    {
        SalesQuotationConfirmationController formLetterController = SalesQuotationConfirmationController::construct();

        if (_args.dataset() != tableNum(CustQuotationConfirmJour))
        {
            throw error(strFmt("@SYS19306",funcName()));
        }

        formLetterController.initDataContract(_args, PrintMgmtDocType::construct(PrintMgmtDocumentType::Confirmation).getDefaultReportFormat());

        return formLetterController.parmReportContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>