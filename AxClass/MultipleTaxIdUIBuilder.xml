<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MultipleTaxIdUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The UIBuilder class of multiple tax id tranfer or reporting.
/// </summary>
public class MultipleTaxIdUIBuilder extends SysOperationAutomaticUIBuilder
{
    private TaxRegistrationRecId taxRegistrationRecId;

    private DialogField dialogField;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDialogField</Name>
				<Source><![CDATA[
    protected DialogField addDialogField(IdentifierName _methodName, Object _dataContract = this.dataContractObject())
    {
        switch (_methodName)
        {
            case methodStr(MultipleTaxIdContract, parmTaxRegistrationRecId):
                MultipleTaxIdContract contract = _dataContract as MultipleTaxIdContract;
                taxRegistrationRecId = contract.parmTaxRegistrationRecId();
                TaxRegistration taxRegistration = TaxRegistration::find(contract.parmTaxRegistrationRecId());
                dialogField = this.dialog().addFieldValue(extendedTypeStr(TaxRegistrationNumber), taxRegistration.RegistrationNumber);
                dialogField.registerOverrideMethod(
                    methodStr(FormStringControl, lookup),
                    methodStr(MultipleTaxIdUIBuilder, taxIdlookup), this);
                dialogField.registerOverrideMethod(
                    methodStr(FormStringControl, modified), 
                    methodStr(MultipleTaxIdUIBuilder, taxIdModified), this);
                break;

            default:
                dialogField = super(_methodName, _dataContract);
                break;
        }

        return dialogField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public void getFromDialog()
    {
        super();

        MultipleTaxIdContract contract = this.dataContractObject() as MultipleTaxIdContract;
        if (contract)
        {
            contract.parmTaxRegistrationRecId(taxRegistrationRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxIdModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax registration number if the value was specified manually.
    /// </summary>
    /// <param name = "_formControl">The <c>FormControl</c> to be lookuped.</param>
    /// <returns>True, if the validation was succeeded; otherwise false.</returns>
    public boolean taxIdModified(FormStringControl _formControl)
    {
        boolean valueWasModified = true;

        TaxRegistrationNumber taxIdValue = dialogField.value();

        if (!taxIdValue)
        {
            valueWasModified = checkFailed("@IntrastatByTaxId:TaxRegNumNotSpecified");
        }

        if (TaxRegistration::find(taxRegistrationRecId).RegistrationNumber != taxIdValue)
        {
            valueWasModified = checkFailed("@EUSalesListCommon:TaxidCorrectField");
        }

        return valueWasModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxIdlookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares and performs query to be used for lookup for the multiple Tax id selector.
    /// </summary>
    /// <param name = "_formControl">The <c>FormControl</c> to be lookuped.</param>
    public void taxIdlookup(FormStringControl _formControl)
    {
        CompanyInfo companyInfo = CompanyInfo::find();

        Query query = new Query();
        query.validTimeStateDateRange(dateNull(), dateMax());

        QueryBuildDataSource qbdsRegistrationNumber = query.addDataSource(tableNum(TaxRegistration));

        QueryBuildDataSource qbdsTaxRegistrationLegislationTypes = qbdsRegistrationNumber.addDataSource(tableNum(TaxRegistrationLegislationTypes));
        qbdsTaxRegistrationLegislationTypes.joinMode(JoinMode::InnerJoin);
        qbdsTaxRegistrationLegislationTypes.relations(false);
        qbdsTaxRegistrationLegislationTypes.addLink(
            fieldNum(TaxRegistration, TaxRegistrationTypeApplicabilityRule),
            fieldNum(TaxRegistrationLegislationTypes, TaxRegistrationTypeApplicabilityRule));
        qbdsTaxRegistrationLegislationTypes.addRange(
            fieldNum(TaxRegistrationLegislationTypes, TaxRegistrationTypesList))
            .value(queryValue(TaxRegistrationTypesList::TAXID));
        
        QueryBuildDataSource qbdsDirPartyLocation = qbdsRegistrationNumber.addDataSource(tableNum(DirPartyLocation));
        qbdsDirPartyLocation.joinMode(JoinMode::InnerJoin);
        qbdsDirPartyLocation.relations(false);
        qbdsDirPartyLocation.addLink(
            fieldNum(TaxRegistration, DirPartyLocation),
            fieldNum(DirPartyLocation, RecId));
        qbdsDirPartyLocation.addRange(fieldNum(DirPartyLocation, Party)).value(queryValue(companyInfo.RecId));
        
        TableLookup_RU lookUp = TableLookup_RU::newParameters(tableNum(TaxRegistration), _formControl);
        lookUp.addLookupfield(fieldNum(TaxRegistration, RegistrationNumber));
        lookUp.addLookupfield(fieldNum(TaxRegistration, TaxRegistrationTypeApplicabilityRule));
        lookUp.parmQuery(query);
        lookUp.performFormLookup();
        
        if (lookUp.getFoundCursor())
        {
            taxRegistrationRecId = lookUp.getFoundCursor().RecId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>