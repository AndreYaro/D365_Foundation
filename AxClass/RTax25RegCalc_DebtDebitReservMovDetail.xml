<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegCalc_DebtDebitReservMovDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RTax25RegCalc_DebtDebitReservMovDetail extends RTax25RegCalc_DebtDebitReservMovement implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        const int ReservePos = 6;
        const int TotalStartPos = 4;
        const int AccObject = 1;
        const int PostingDate = 2;
        const int DueDate = 3;
        AmountMST               regPrevReserveAmount,  // Bad debt reserve for a previous period
                                regBadDebtAmount,      // Bad debt amount

                                regUsedReserve,        // Reserve used for bad debt cancellation
                                regUnusedReserve,      // Unused reserve remain

                                regReserveExcess;      // Excess of bad debt amount over reserve amount

        RTax25RegisterJournalTrans  journalTrans, inventoryJounalTrans;
        RTax25Query                 query, inventoryQuery;
        RTax25DebtAmounts           debtAmounts;
        RefRecId                    profitTableRecId = 0;
        RTax25DebtModelPeriod       debtPeriod;
        RefTableId                  refTableId;
        RefRecId                    refRecId;
        int                         i;
        container                   newLine, docInfo;
        container                   totals = ['', dateNull(), dateNull(), dateNull(),0,0,0,0,0];
        boolean                     isTaxModel = regType.badDebtModel() == CustParameters::rTax25DebtModelTax();

        try
        {
            ttsbegin;

            this.preCalc();

            debtAmounts = RTax25DebtAmounts::newModelParameters(
                dateTo,
                RTax25DebtType::Debit,
                NoYes::No,
                1,
                1,
                isTaxModel);

            if (dateTo == debtAmounts.getToDate())
            {
                select count(DaysFrom) from debtPeriod
                where debtPeriod.DebtModel == regType.badDebtModel() &&
                        debtPeriod.Percent  != 0;

                journalTrans = debtAmounts.getRegisterJourTrans();

                inventoryJounalTrans = RTax25RegCalcController::findChildJournalTrans(this.inventoryRegType(), journalTrans);

                inventoryQuery = RTax25Query::newParameters(this.inventoryRegType(), inventoryJounalTrans, true);

                if (inventoryQuery.first())
                {
                    regQuery.addHeaderRecord();

                    do
                    {
                        refTableId          = inventoryQuery.getRecord().RefTableId;
                        refRecId            = inventoryQuery.getRecord().RefRecId;
                        profitTableRecId    = inventoryQuery.getRecord().rTax25ProfitTable;

                        debtAmounts.parmRefTableId(refTableId);
                        debtAmounts.parmRefRecId(refRecId);
                        debtAmounts.initSourceTrans();

                        regUsedReserve   = debtAmounts.getUsedReserve();
                        regBadDebtAmount = debtAmounts.getWrittenOffAmount();

                        query = RTax25Query::newParameters(this.reserveRegType(), journalTrans, true);

                        query.createRegQuery();
                        query.addRangeValue(fieldName2Id(query.getRecord().TableId, 'RefTableId'), queryValue(refTableId));
                        query.addRangeValue(fieldName2Id(query.getRecord().TableId, 'RefRecId'), queryValue(refRecId));

                        regPrevReserveAmount = 0;
                        regReserveExcess     = 0;
                        regUnusedReserve     = 0;
                        profitTableRecId     = 0;

                        if (query.first())
                        {
                            regPrevReserveAmount = query.getField(ReservePos + debtPeriod.DaysFrom);
                            profitTableRecId = query.getRecord().rTax25ProfitTable;
                        }

                        if (regBadDebtAmount > regPrevReserveAmount)
                        {
                            regReserveExcess = regBadDebtAmount - regPrevReserveAmount;
                        }
                        else
                        {
                            regUnusedReserve = regPrevReserveAmount - regBadDebtAmount;
                        }

                        docInfo = [ inventoryQuery.getField(AccObject),
                                inventoryQuery.getField(PostingDate),
                                inventoryQuery.getField(DueDate),
                                journalTrans.toDate()];

                        newLine = [ regPrevReserveAmount,
                                regBadDebtAmount,
                                regUsedReserve,
                                regUnusedReserve,
                                regReserveExcess];

                        if (regPrevReserveAmount || regBadDebtAmount)
                        {
                            regQuery.addBodyRecord(profitTableRecId,
                                                docInfo + newLine,
                                                refTableId,
                                                refRecId,
                                                "",
                                                0,
                                                regReserveExcess);

                            for (i = 1; i <= conLen(newLine); i++)
                            {
                                totals = conPoke(totals, TotalStartPos + i, conPeek(totals, TotalStartPos + i) + conPeek(newLine, i));
                            }
                        }
                    }
                    while (inventoryQuery.next());

                    regQuery.addFooterRecord(0, totals, 0);
                }
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventoryRegType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a relevant inventory register type.
    /// </summary>
    /// <returns>
    /// A relevant inventory register type.
    /// </returns>
    protected RTax25RegisterType inventoryRegType()
    {
        return RTax25RegisterType::DebtDebitInventory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveRegType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a relevant reserve register type.
    /// </summary>
    /// <returns>
    /// A relevant reserve register type.
    /// </returns>
    protected RTax25RegisterType reserveRegType()
    {
        return RTax25RegisterType::DebtDebitReservationDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>