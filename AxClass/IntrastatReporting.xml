<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatReporting</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;
using SL = Microsoft.Dynamics365.LocalizationFramework.XppSupportLayer;

/// <summary>
/// The <c>IntrastatReporting</c> class is responsible for generating file and report for Intrastat
/// </summary>
public class  IntrastatReporting extends RunBaseBatch implements BatchRetryable
{
    private const str LocalizationFeatureReference = 'EUR-00002';
    const str erModelName = 'Intrastat';

    DialogRunbase                       dialog;
    QueryRun                            queryRun;
    FromDate                            fromDate;
    ToDate                              toDate;
    ERFileName                          filename;
    ERFileName                          reportName;
    NoYesId                             generateFile;
    NoYesId                             showReport;
    IntrastatReportDirection            reportDirection;
    NoYesId                             correctionOnly;
    VATNum                              primaryVATNumber;
    Map                                 mapERParametersWithDialogs;
    Map                                 mapERParametersValues;
    ERIFormatMappingRun                 erFormatMappingReport;
    ERIFormatMappingRun                 erFormatMappingFile;
    Map                                 mapEREnumContractsWithDialogs;
    TaxAuthority                        taxAuthority;
    Num                                 xmlNum;

    DialogGroup                         dialogGroupDate;
    DialogGroup                         dialogGroupExportOptions;
    DialogField                         dialogFromDate;
    DialogField                         dialogToDate;
    DialogField                         dialogGenerateFile;
    DialogField                         dialogFilename;
    DialogField                         dialogGenerateReport;
    DialogField                         dialogReportName;

    ERIFileDestination                  fileDestination;
    private ERIFileDestination          defaultDestination;

    protected TaxRegistrationRecId       taxRegistrationRecId;
    private TaxRegistrationTypeCountryId countryRegionId;
    
    protected IntrastatExternalCode intrastatExternalCode;
    protected IntrastatReportLevel intrastatReportLevel;

    private boolean executeReportInTheSameTask = FeatureStateProvider::isFeatureEnabled(IntrastatExecuteERInTheSameBatchTaskFeature::instance());

    private const Version currentVersion = 2;
	
    #ISOCountryRegionCodes

    #define.Version1(1)
    #localmacro.List1
        fromDate,
        toDate,
        generatefile,
        filename,
        showReport,
        reportName
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return IntrastatReporting::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the AOT.
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        //Date group
        dialogGroupDate           = dialog.addGroup("@SYS7402");
        dialogFromDate            = dialog.addFieldValue(extendedTypeStr(FromDate), fromDate);
        dialogToDate              = dialog.addFieldValue(extendedTypeStr(ToDate), toDate);
        dialogGroupExportOptions  = dialog.addGroup("@SYS55059");

        if (this.canGenerateFile())
        {
            //Export option group
            dialogGenerateFile = dialog.addFieldValue(extendedTypeStr(NoYesId), generateFile, "@SYS100854", "@SYS100855");
            dialogFilename = dialog.addFieldValue(extendedTypeStr(ERFileName), filename);
        }

        dialogGenerateReport = dialog.addFieldValue(extendedTypeStr(NoYesId), showReport, "@Intrastat:GenerateReport");
        dialogReportName = dialog.addFieldValue(extendedTypeStr(ERFileName), reportName, "@Intrastat:ReportFileName");

        dialog.addGroup("@AccountsReceivable:FileFormatMapping");
        this.addERFormatGenerationParameters(erFormatMappingFile);
        dialog.addGroup("@AccountsReceivable:ReportFormatMapping");
        this.addERFormatGenerationParameters(erFormatMappingReport);

        dialog.curFormGroup(dialogGroupExportOptions.formGroup());

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets printers settings and registers event handlers.
    /// </summary>
    /// <param name="_dialog">
    /// The <c>runbase</c> dialog.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        this.registerEventHandlers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets values from dialog.
    /// </summary>
    /// <returns>
    /// true, if it gets value successfully; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        fromDate            = dialogFromDate.value();
        toDate              = dialogToDate.value();
        generateFile        = false;
        showReport          = false;

        if (this.canGenerateFile())
        {
            filename            = dialogFilename.value();
            generateFile        = dialogGenerateFile.value();
        }

        if (this.canShowReport())
        {
            showReport = dialogGenerateReport.value();
            reportName = dialogReportName.value();
        }

        if (mapERParametersWithDialogs)
        {
            MapEnumerator   mapERParametersEnumerator = mapERParametersWithDialogs.getEnumerator();

            while (mapERParametersEnumerator.moveNext())
            {
                if (mapERParametersEnumerator.currentKey() is DialogField)
                {
                    DialogField dialogField = mapERParametersEnumerator.currentKey() as DialogField;
                    mapERParametersValues.insert(mapERParametersEnumerator.currentValue().ToString(), dialogField.value());
                }
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when no <c>SysLastValue</c> record can be found when it calls the
    /// <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();
        queryRun = new QueryRun(queryStr(Intrastat));
        mapERParametersWithDialogs = new Map(Types::AnyType, Types::AnyType);
        mapERParametersValues = new Map(Types::String, Types::AnyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        var erParametersValues = mapERParametersValues ? mapERParametersValues.pack() : new Map(Types::String, Types::AnyType).pack();
        return [currentVersion, fromDate, toDate, generatefile, filename, showReport, 
            reportName, reportDirection, super(), queryRun.pack(), erParametersValues];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query run, which is used by the query prompt.
    /// </summary>
    /// <returns>
    /// The query run which is used by the query prompt.
    /// </returns>
    /// <remarks>
    /// Do not instantiate the <c>queryRun</c> whenever the method is called. This should be done in the
    /// <c>unpack</c> method and the <c>initParmDefault</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandlers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers event handlers.
    /// </summary>
    public void registerEventHandlers()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        setPrefix("@GLS107660");
        this.preRun();

        if (generateFile || showReport)
        {
            this.prepareQuery();
            this.validateQuery();

            if (generateFile)
            {
                if (erFormatMappingFile == null)
                {
                    throw error("@AccountsReceivable:ExpectedFormatMappingNotFound");
                }

                var outputFileName = this.generateFile();
                this.postGenerateFile(outputFileName);
            }

            if (showReport)
            {
                this.runReport();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version   version = RunBase::getVersion(packedClass);
        container packedSuper;
        container packedQuery;
        container packedERParameters;

        switch (version)
        {
            case currentVersion:
                [version, fromDate, toDate, generatefile, filename, showReport, reportName, reportDirection,
                    packedSuper, packedQuery, packedERParameters] = packedClass;
                break;

            case #Version1:
                [version, #List1, packedSuper, packedQuery, packedERParameters] = packedClass;
                break;

            default:
                return false;
        }

        if (packedQuery)
        {
            queryRun      = new QueryRun(packedQuery);
        }

        if (packedERParameters)
        {
            mapERParametersValues = Map::create(packedERParameters);
        }

        if (packedSuper)
        {
            return super(packedSuper);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates all the necessary conditions.
    /// </summary>
    /// <param name="_calledFrom">
    /// The object calling the method.
    /// </param>
    /// <returns>
    /// true if validation is successful; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean             ret = true;

        if (fromDate && toDate)
        {
            if (fromDate > toDate)
            {
                ret = checkFailed("@SYS120590");
            }
        }

        if (generateFile == NoYes::No && showReport == NoYes::No)
        {
            ret = checkFailed("@Intrastat:NeedToPrintReportOrFile");
        }

        if (generateFile)
        {
            if (fromDate == dateNull())
            {
                ret = checkFailed("@SYS91557");
            }

            if (toDate == dateNull())
            {
                ret = checkFailed("@SYS90868");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>IntrastatReporting</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>IntrastatReporting</c> class.
    /// </returns>
    public static IntrastatReporting construct()
    {
        IntrastatReporting reporting = SysExtensionAppClassFactory::getClassFromSysAttribute(
            classStr(IntrastatReporting),
            new IntrastatCountryRegionAttribute(SysCountryRegionCode::countryInfo()));

        reporting.checkFormatMappingParameters();

        return reporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Intrastat:IntrastatReport";
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats addresses by replacing enter with space.
    /// </summary>
    /// <param name="_address">
    /// The address to be formatted.
    /// </param>
    /// <returns>
    /// The address after format.
    /// </returns>
    public static LogisticsAddressing formatAddress(LogisticsAddressing _address)
    {
        #File

        LogisticsAddressing outputAddress;

        outputAddress = strReplace(_address, #delimiterEnter, #delimiterSpace);

        return outputAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        #OCCRetryCount
        IntrastatReporting intrastatReporting = IntrastatReporting::construct();

        if (intrastatReporting.prompt())
        {
            try
            {
                intrastatReporting.runOperation();
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }

            catch (Exception::Error)
            {
                throw error("@SYS93835");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        GlobalizationInstrumentationHelper::featureRun(LocalizationFeatureReference, funcName());

        fileDestination = ERObjectsFactory::createFileDestinationBrowser();
        defaultDestination = fileDestination;
        reportDirection = IntrastatReportDirection::Both;
        mapERParametersValues = new Map(Types::String, Types::AnyType);
        mapERParametersWithDialogs = new Map(Types::AnyType, Types::AnyType);

        if (!TaxIntegrationUtils::isMultipleTaxIdEnabledForIntrastat())
        {
            this.initERParameters();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileDestination</Name>
				<Source><![CDATA[
    public ERIFileDestination parmFileDestination(ERIFileDestination _fileDestination = fileDestination)
    {
        fileDestination = _fileDestination;
        return fileDestination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = FromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGenerateFile</Name>
				<Source><![CDATA[
    public NoYesId parmGenerateFile(NoYes _generateFile = generateFile)
    {
        generateFile = _generateFile;
        return generateFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowlReport</Name>
				<Source><![CDATA[
    public NoYesId parmShowlReport(NoYes _showReport = showReport)
    {
        showReport = _showReport;
        return showReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectionOnly</Name>
				<Source><![CDATA[
    public NoYes parmCorrectionOnly(NoYes _correctionOnly = correctionOnly)
    {
        correctionOnly = _correctionOnly;
        return correctionOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileName</Name>
				<Source><![CDATA[
    public ERFileName parmFileName(ERFileName _fileName = filename)
    {
        filename = _filename;
        return filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>direction2ReportDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transforms enum <c>IntrastatDirection</c> into enum <c>IntrastatReportDirection</c>.
    /// </summary>
    /// <param name = "_intrastatDirection"><c>IntrastatDirection</c> enum.</param>
    /// <returns><c>IntrastatReportDirection</c> enum.</returns>
    static IntrastatReportDirection direction2ReportDirection(IntrastatDirection _intrastatDirection)
    {
        IntrastatReportDirection ret;

        switch (_intrastatDirection)
        {
            case IntrastatDirection::Import:
                ret = IntrastatReportDirection::Import;
                break;

            case IntrastatDirection::Export:
                ret = IntrastatReportDirection::Export;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportDirection2DirectionRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transforms enum <c>IntrastatReportDirection</c> into <c>IntrastatDirection</c> range for <c>Intrastat</c> table.
    /// </summary>
    /// <param name = "_intrastatReportDirection"><c>IntrastatReportDirection</c> enum.</param>
    /// <returns><c>IntrastatDirection</c> range for <c>Intrastat</c> table.</returns>
    static str reportDirection2DirectionRange(IntrastatReportDirection _intrastatReportDirection)
    {
        str ret;

        switch (_intrastatReportDirection)
        {
            case IntrastatReportDirection::Import:
                ret = enum2Str(IntrastatDirection::Import);
                break;

            case IntrastatReportDirection::Export:
                ret = enum2Str(IntrastatDirection::Export);
                break;

            case IntrastatReportDirection::Both:
                ret = strFmt('%1, %2', IntrastatDirection::Import, IntrastatDirection::Export);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportDirection</Name>
				<Source><![CDATA[
    IntrastatReportDirection parmReportDirection(IntrastatReportDirection _reportDirection = reportDirection)
    {
        reportDirection = _reportDirection;
        return reportDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrimaryVATNumber</Name>
				<Source><![CDATA[
    public VATNum parmPrimaryVATNumber(VATNum _primaryVATNumber = primaryVATNumber)
    {
        primaryVATNumber = _primaryVATNumber;
        return primaryVATNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAuthority</Name>
				<Source><![CDATA[
    public TaxAuthority parmTaxAuthority(TaxAuthority _taxAuthority = taxAuthority)
    {
        taxAuthority = _taxAuthority;
        return taxAuthority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileNum</Name>
				<Source><![CDATA[
    public Num parmFileNum(Num _xmlNum = xmlNum)
    {
        xmlNum = _xmlNum;
        return xmlNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyCoRegNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company tax registration number.
    /// </summary>
    /// <returns>
    /// The company tax registration number.
    /// </returns>
    public CompanyCoRegNum companyCoRegNum()
    {
        return TaxRegistration::getCompanyTaxRegNum_W(toDate, fieldNum(CompanyInfo, CoRegNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyImportVATNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company import VAT identification number.
    /// </summary>
    /// <returns>
    /// The company import VAT identification number.
    /// </returns>
    public VATNum companyImportVATNum()
    {
        return TaxRegistration::getCompanyTaxRegNum_W(toDate, fieldNum(CompanyInfo, ImportVATNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyExportVATNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company export VAT identification number.
    /// </summary>
    /// <returns>
    /// The company export VAT identification number.
    /// </returns>
    public VATNum companyExportVATNum()
    {
        return TaxRegistration::getCompanyTaxRegNum_W(toDate, fieldNum(CompanyInfo, VATNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initERParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes ER parameters.
    /// </summary>
    protected void initERParameters()
    {
        IntrastatParameters intrastatParameters = IntrastatParameters::find();

        var fileERFormatMappingId = intrastatParameters.FileERFormatMappingID;
        erFormatMappingFile = fileERFormatMappingId == 0 ? null: ERObjectsFactory::createFormatMappingRunByFormatMappingId(fileERFormatMappingId);

        var reportERFormatMappingId = intrastatParameters.ReportERFormatMappingID;
        erFormatMappingReport = reportERFormatMappingId == 0 ? null: ERObjectsFactory::createFormatMappingRunByFormatMappingId(reportERFormatMappingId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initERParametersByCountry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes ER parameters based on country.
    /// </summary>
    public void initERParametersByCountry()
    {
        EUSalesListReportingParameter reportingParameter = EUSalesListReportingParameter::findByCountryRegionIdAndReport(countryRegionId, ReportingParameterReportCallerName::Intrastat);

        var fileERFormatMappingId = reportingParameter.FileERFormatMappingID;
        var reportERFormatMappingId = reportingParameter.ReportERFormatMappingID;

        erFormatMappingFile = fileERFormatMappingId == 0 ? null: ERObjectsFactory::createFormatMappingRunByFormatMappingId(fileERFormatMappingId);
        erFormatMappingReport = reportERFormatMappingId == 0 ? null: ERObjectsFactory::createFormatMappingRunByFormatMappingId(reportERFormatMappingId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFormatMappingParameters</Name>
				<Source><![CDATA[
	protected void checkFormatMappingParameters()
    {
        boolean hasError = false;

        if(erFormatMappingFile == null)
        {
            hasError = true;
            error(ERFormatMappingTableHelper::txtFormatNotSet("@AccountsReceivable:FileFormatMapping", "@SYS71587"));
        }
        
        if(erFormatMappingReport == null)
        {
            hasError = true;
            error(ERFormatMappingTableHelper::txtFormatNotSet("@AccountsReceivable:ReportFormatMapping", "@SYS71587"));
        }

        if (hasError)
        {
            throw Exception::Error;
        }
	}

]]></Source>
			</Method>
			<Method>
				<Name>preRun</Name>
				<Source><![CDATA[
    protected void preRun()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates query.
    /// </summary>
    protected void validateQuery()
    {
        Intrastat intrastat;
        boolean isEmpty = true;
        IntrastatParameters intrastatParameters = IntrastatParameters::find();

        while (queryRun.next())
        {
            isEmpty = false;
            intrastat = queryRun.get(tableNum(Intrastat));

            if (!intrastat.validateRecord() && intrastatParameters.CheckSetupErrorTolerance == ErrorWarning::Error)
            {
                throw Exception::Error;
            }
        }

        if (isEmpty)
        {
            if (this.throwOnEmptyReport())
            {
                throw error("@SYS26947");
            }
            else
            {
                warning("@SYS26947");
            }
        }

        queryRun.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies any runtime filters and order on the query for data selection.
    /// </summary>
    /// <returns>
    /// A <c>QueryBuildDataSource</c> data source with query criteria applied.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// An exception is thrown when the <c>Intrastat</c> data source table is not found.
    /// </exception>
    protected QueryBuildDataSource prepareQuery()
    {
        QueryBuildDataSource dataSource = queryRun.query().dataSourceTable(tableNum(Intrastat));

        if (dataSource)
        {
            dataSource.addRange(fieldNum(Intrastat, TransDate)).value(queryRange(fromDate, toDate));
            dataSource.addOrderByField(fieldNum(Intrastat, DispatchId));
            dataSource.addOrderByField(fieldNum(Intrastat, SeqNum));
            dataSource.addOrderByField(fieldNum(Intrastat, Direction));
            dataSource.addOrderByField(fieldNum(Intrastat, AccountNum));
            dataSource.addOrderByField(fieldNum(Intrastat, TransDate));
            dataSource.addOrderByField(fieldNum(Intrastat, IntrastatCommodity));
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (taxRegistrationRecId)
        {
            dataSource.allowAdd(QueryAllowAdd::NoFields);
            findOrCreateRange_W(dataSource, fieldNum(Intrastat, TaxId), queryValue(taxRegistrationRecId));
        }

        return dataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs report.
    /// </summary>
    /// <returns>
    /// The output file name.
    /// </returns>
    protected ERFileName runReport()
    {
        if (strLen(reportName))
        {
            erFormatMappingReport.parmFileName(reportName);
        }

        return this.runER(erFormatMappingReport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGenerateFile</Name>
				<Source><![CDATA[
    protected void postGenerateFile(ERFileName _fileName)
    {
        if (FeatureStateProvider::isFeatureEnabled(IntrastatReportingArchiveFeature::instance()))
        {
            LogisticsAddressCountryRegionISOCode countryISOCode = TaxIntegrationUtils::isMultipleTaxIdEnabledForIntrastat() && countryRegionId
                ? LogisticsAddressCountryRegion::find(countryRegionId).ISOcode
                : SysCountryRegionCode::countryInfo();

            if (countryISOCode != #isoBE)
            {
                IntrastatArchiveGeneral::createIntrastatArchive(_fileName, taxRegistrationRecId, queryRun);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwOnEmptyReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if an exception should be shown if report is empty.
    /// </summary>
    /// <returns>
    /// false by default.
    /// </returns>
    /// <remarks>
    /// By default an exception is not thrown if nothing is to be reported. Otherwise, this method should be overridden.
    /// </remarks>
    protected boolean throwOnEmptyReport()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates exporting file via ER solution.
    /// </summary>
    /// <returns>
    /// The generated file name.
    /// </returns>
    protected ERFileName generateFile()
    {
        if (strLen(filename))
        {
            erFormatMappingFile.parmFileName(filename);
            erFormatMappingFile.parmShowPromptDialog(true);
        }
        

        return this.runER(erFormatMappingFile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGenerateFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether file generation is supported.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// Descendant classes can override this method and return false if file generation support is not
    /// required.
    /// </remarks>
    protected boolean canGenerateFile()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShowReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether report is supported.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// Descendant classes can override this method and return false if report support is not
    /// required.
    /// </remarks>
    protected boolean canShowReport()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addERFormatGenerationParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds user input parameters and enum user input parameters from GER format.
    /// </summary>
    /// <param name = "_formatMappingRun">GER format.</param>
    protected void addERFormatGenerationParameters(ERIFormatMappingRun _formatMappingRun)
    {
        if (_formatMappingRun == null)
        {
            return;
        }

        var parameters = _formatMappingRun.getDatasourceDefinitionParameters();
        var parametersEnumerator = parameters.getEnumerator();

        boolean formatNamesAdded = false;

        while (parametersEnumerator.moveNext())
        {
            ERAnyType currentParameter =  parametersEnumerator.currentValue();
            ERIUserParameterValue currentUserParameter = ERCast::asAny(currentParameter.value()) as ERIUserParameterValue;
            if (currentUserParameter)
            {
                if (!formatNamesAdded)
                {
                    var erFormatInfo = _formatMappingRun.getFormatInfo();
                    dialog.addText(erFormatInfo.getDescription() ? erFormatInfo.getDescription() : erFormatInfo.getName());
                    formatNamesAdded = true;
                }

                DialogField dlg = this.addERParameterToDialog(_formatMappingRun, currentUserParameter);

                if (dlg)
                {
                    var formatMappingId  = this.getFormatMappingId(_formatMappingRun);
                    var parameterValue = currentUserParameter.parmValue() ? currentUserParameter.parmValue() : '';
                    var parameterName = parametersEnumerator.currentKey().ToString();
                    var parameterKey = this.getERParameterKey(formatMappingId, parameterName);

                    mapERParametersWithDialogs.insert(dlg, parameterKey);
                    mapERParametersValues.insert(parameterKey, parameterValue);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addERParameterToDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds GER format input parameters to the dialog.
    /// </summary>
    /// <param name = "_formatMappingRun">GER format.</param>
    /// <param name = "_userParameter">GER user input parameter to add.</param>
    /// <returns>Dialog field for the specified user parameter.</returns>
    protected DialogField addERParameterToDialog(ERIFormatMappingRun _formatMappingRun, ERIUserParameterValue _userParameter)
    {
        DialogField ret;
        if (_userParameter is ERIUserParameterDataContract)
        {
            ERIUserParameterDataContract currentUserParameter =  _userParameter as ERIUserParameterDataContract;
            ret = this.addERUserParameterToDialog(_formatMappingRun, currentUserParameter);
        }
        if (_userParameter is ERIEnumParameterDataContract)
        {
            ERIEnumParameterDataContract currentUserParameter = _userParameter as ERIEnumParameterDataContract;
            ret = this.addEREnumParameterToDialog(_formatMappingRun, currentUserParameter);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addERUserParameterToDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds GER format user input parameters to the dialog.
    /// </summary>
    /// <param name = "_formatMappingRun">GER format.</param>
    /// <param name = "_userParameter">GER user input parameter to add.</param>
    /// <returns>Dialog field for the specified user parameter.</returns>
    protected DialogField addERUserParameterToDialog(ERIFormatMappingRun _formatMappingRun, ERIUserParameterDataContract _userParameter)
    {
        var labelRepository = _formatMappingRun.parmLabelRepository();
        var parameterLabel = labelRepository.getTranslatedText(_userParameter.parmLabel(), currentUserLanguage());
        var parameterExtDataType = _userParameter.getDataSource().parmExtendedDataTypeName();
        var parameterHelpText = labelRepository.getTranslatedText(_userParameter.parmHelpText(), currentUserLanguage());

        return dialog.addFieldValue(parameterExtDataType, _userParameter.parmValue(), parameterLabel, parameterHelpText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupEnum</Name>
				<Source><![CDATA[
    /// <summary>
    /// A lookup method for enum field.
    /// </summary>
    /// <param name = "_control">Control with enum.</param>
    protected void lookupEnum(FormStringControl _control)
    {
        ERIEnumParameterDataContract enumParamContract = mapEREnumContractsWithDialogs.lookup(_control.name());
        enumParamContract.lookupEnumElements(_control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEREnumParameterToDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds GER format enum user input parameters to the dialog.
    /// </summary>
    /// <param name = "_formatMappingRun">GER format.</param>
    /// <param name = "_userParameter">GER user input parameter to add.</param>
    /// <returns>Dialog field for the specified user parameter.</returns>
    protected DialogField addEREnumParameterToDialog(ERIFormatMappingRun _formatMappingRun, ERIEnumParameterDataContract _userParameter)
    {
        var labelRepository = _formatMappingRun.parmLabelRepository();
        var parameterLabel = labelRepository.getTranslatedText(_userParameter.parmLabel(), currentUserLanguage());
        var parameterHelpText = labelRepository.getTranslatedText(_userParameter.parmHelpText(), currentUserLanguage());

        DialogField dialogField = dialog.addField(extendedTypeStr(Name), parameterLabel, parameterHelpText);
        if (typeOf(_userParameter.parmValue()) != Types::AnyType)
        {
            dialogField.value(_userParameter.parmValue());
        }
        dialogField.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(IntrastatReporting, lookupEnum), this);

        if (mapEREnumContractsWithDialogs == null)
        {
            mapEREnumContractsWithDialogs = new Map(Types::String, Types::Class);
        }
        mapEREnumContractsWithDialogs.insert(dialogField.name(), _userParameter);

        return dialogField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getERParameterKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets key for the GER format paramter.
    /// </summary>
    /// <param name = "_formatMappingId">Id of the GER format.</param>
    /// <param name = "_parameterName">Name of the GER format parameter.</param>
    /// <returns>Key for the GER format paramter.</returns>
    protected str getERParameterKey(ERFormatMappingId _formatMappingId, str _parameterName)
    {
        return int642Str(_formatMappingId) + _parameterName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getERParameterFromKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets name of the GER format paramter name from key.
    /// </summary>
    /// <param name = "_formatMappingId">Id of the GER format.</param>
    /// <param name = "_key">Name of the GER format parameter.</param>
    /// <returns>Name of the GER format paramter.</returns>
    protected str getERParameterFromKey(ERFormatMappingId _formatMappingId, str _key)
    {
        return subStr(_key, strLen(int642Str(_formatMappingId)) + 1, strLen(_key));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initERFormatMappingRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of <c>ERIFormatMappingRun</c> class by the given format mapping Id.
    /// </summary>
    /// <param name = "_formatMappingRun">Id of the GER format.</param>
    /// <returns><c>ERIFormatMappingRun</c> for the specified GER format Id.</returns>
    protected ERIFormatMappingRun initERFormatMappingRun(ERIFormatMappingRun _formatMappingRun)
    {
        if (!executeReportInTheSameTask || fileDestination != defaultDestination)
        {
            _formatMappingRun
                .withFileDestination(fileDestination);
        }

        _formatMappingRun
            .withParameter(this.getERFormatParameters(_formatMappingRun))
            .withCreatingObjectParameter(erModelName, classStr(IntrastatReporting), this);
        
        if (!executeReportInTheSameTask)
        {
            _formatMappingRun.withRunInBatchMode(inBatch);
        }
        
        return _formatMappingRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getERFormatParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets GER format parameters
    /// </summary>
    /// <param name = "_formatMappingRun">GER format.</param>
    /// <returns><c>ERModelDefinitionParamsUIActionComposite</c> class intance.</returns>
    protected ERModelDefinitionParamsUIActionComposite getERFormatParameters(ERIFormatMappingRun _formatMappingRun)
    {
        return new ERModelDefinitionParamsUIActionComposite()
        .add(this.getERModelDefinitionDatabaseContext())
        .add(this.getERModelDefinitionInputParameters(_formatMappingRun));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getERModelDefinitionDatabaseContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// <c>ERModelDefinitionDatabaseContext</c> for Intrastat.
    /// </summary>
    /// <returns><c>ERModelDefinitionDatabaseContext</c> for Intrastat.</returns>
    protected ERModelDefinitionDatabaseContext getERModelDefinitionDatabaseContext()
    {
        return new ERModelDefinitionDatabaseContext()
            .addQuery(tableNum(Intrastat), this.queryRun().query())
            .addValue(tableNum(CompanyInfo), fieldNum(CompanyInfo, DataArea), curExt());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getERModelDefinitionInputParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>ERModelDefinitionDatabaseContext</c> for Intrastat.
    /// </summary>
    /// <param name = "_formatMappingRun">GER format.</param>
    /// <returns><c>ERModelDefinitionDatabaseContext</c> for Intrastat</returns>
    protected ERModelDefinitionInputParametersAction getERModelDefinitionInputParameters(ERIFormatMappingRun _formatMappingRun)
    {
        ERModelDefinitionInputParametersAction retVal = new ERModelDefinitionInputParametersAction();

        var mapERParametersEnumerator = mapERParametersValues.getEnumerator();
        var formatMappingId  = this.getFormatMappingId(_formatMappingRun);

        while (mapERParametersEnumerator.moveNext())
        {
            str currentKey = mapERParametersEnumerator.currentKey().ToString();
            if (strScan(currentKey, int642Str(formatMappingId), 1, strLen(currentKey)) > 0)
            {
                retVal.addParameter(this.getERParameterFromKey(formatMappingId, currentKey), this.applyValueTransaformation(mapERParametersEnumerator.currentValue()));
            }
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyValueTransaformation</Name>
				<Source><![CDATA[
    private anytype applyValueTransaformation(anytype _localDateTime)
    {
        var retVal = _localDateTime;

        if (SL.TypeHelper::IsUtcDateTimeType(retVal.GetType()))
        {
            if (retVal.GetType() is SL.utcdatetime)
            {
                retVal = ERDateTimeUtils::convertFromUserTimeZoneToUTC(retVal);
            }
            else
            {
                retVal = ERDateTimeUtils::convertFromUserTimeZoneToUTC(ERLFConvert::fromUtcdatetime(retVal));
            }
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatMappingId</Name>
				<Source><![CDATA[
    private RecId getFormatMappingId(ERIFormatMappingRun _formatMappingRun)
    {
        return _formatMappingRun.getFormatMappingTableRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runER</Name>
				<Source><![CDATA[
    private ERFileName runER(ERIFormatMappingRun _formatMappingRun)
    {
        var formatMappingRun = this.initERFormatMappingRun(_formatMappingRun);
        
        ERFileName outputFileName;
        if (this.isInBatch() && this.executeReportInTheSameTask)
        {
            // getController applys parameter action to parameters            
            // so adjustments in initERFormatMappingRun take effect.
            ERIFormatMappingRunControllerWithModelDefinitionParameters formatRunController = formatMappingRun.getController();
            formatMappingRun.withFormatMappingRunJobCaption(currentBatch.Caption);
            outputFileName = formatMappingRun.runBatch(currentBatch.batchJobId, formatRunController.getModelDefinitionParameters());
        }
        else
        {
            outputFileName = formatMappingRun.run();
        }
        return outputFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructByCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>IntrastatReporting</c> class with Country Region Id parameter.
    /// </summary>
    /// <param name = "_countyRegionId">A country/region ISO code.</param>
    /// <returns>A new instance of the <c>IntrastatReporting</c> class.</returns>
    public static IntrastatReporting constructByCountryRegionId(LogisticsAddressCountryRegionISOCode _countyRegionId)
    {
        return SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(IntrastatReporting), new IntrastatCountryRegionAttribute(_countyRegionId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxRegistrationRecID</Name>
				<Source><![CDATA[
    public TaxRegistrationRecId parmTaxRegistrationRecID(TaxRegistrationRecId _taxRegistrationRecId = taxRegistrationRecId)
    {
        taxRegistrationRecId = _taxRegistrationRecId;
        return taxRegistrationRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCountryRegionId</Name>
				<Source><![CDATA[
    public TaxRegistrationTypeCountryId parmCountryRegionId(TaxRegistrationTypeCountryId _countryRegionId)
    {
        countryRegionId = _countryRegionId;
        return countryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntrastatExternalCode</Name>
				<Source><![CDATA[
    public IntrastatExternalCode parmIntrastatExternalCode(IntrastatExternalCode _intrastatExternalCode = intrastatExternalCode)
    {
        intrastatExternalCode = _intrastatExternalCode;
        return intrastatExternalCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntrastatReportLevel</Name>
				<Source><![CDATA[
    public IntrastatReportLevel parmIntrastatReportLevel(IntrastatReportLevel _intrastatReportLevel = intrastatReportLevel)
    {
        intrastatReportLevel = _intrastatReportLevel;
        return intrastatReportLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>