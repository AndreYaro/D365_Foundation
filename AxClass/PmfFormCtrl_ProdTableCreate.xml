<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ProdTableCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PmfFormCtrl_ProdTableCreate</c> class is the form control handler for the
/// <c>ProdTableCreate</c> form.
/// </summary>
public class PmfFormCtrl_ProdTableCreate
    extends PmfFormCtrl
{
    InventDim       inventDim;

    boolean         calledFromProdProcessBatch;

    boolean         calledFromProdListPage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>reinitializeFromBOMVersion</Name>
				<Source><![CDATA[
    private void reinitializeFromBOMVersion(ProdTable _prodTable, BOMVersion _bomVersion, boolean _assignQty)
    {
        ProdQtySched origQtySched = _prodTable.QtySched;
        _prodTable.initFromBOMVersion(_bomVersion, _assignQty);

        if (_prodTable.QtySched != origQtySched)
        {
            _prodTable.initRouteVersion();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeBOMRouteVersionsPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles post execution events when new <c>BOM</c> and <c>Route</c> records get assigned.
    /// </summary>
    /// <param name="_inventDim">
    /// A new inventory dimension.
    /// </param>
    /// <param name="_assignYieldPct">
    /// true if the <c>PmfYieldPct</c> field should be set; otherwise false.
    /// </param>
    /// <param name="_assignQty">
    /// true if the quantity fields should be set; otherwise false.
    /// </param>
    public void changeBOMRouteVersionsPost(
        InventDim _inventDim,
        boolean   _assignYieldPct,
        boolean   _assignQty = true)
    {
        ProdTable       prodTable = buffer;
        RouteVersion    routeVersion;
        BOMVersion      bomVersion;
        InventMovement  movement;

        if (_assignYieldPct)
        {
            bomVersion = BOMVersion::findActive(
                                prodTable.ItemId,
                                prodTable.bomDate,
                                prodTable.QtySched,
                                _inventDim);

            if (this.isFormulaEnabled())
            {
                this.reinitializeFromBOMVersion(prodTable, bomVersion, _assignQty);
            }

            formDS.refresh();
        }

        if (this.isFormulaEnabled())
        {
            movement = InventMovement::construct(prodTable);
            movement.inventdim(InventDim::findOrCreate(inventDim));
            if (!this.isReworkEnabled())
            {
                prodTable.QtySched = movement.pmfSetMinMaxQty();

                if (prodTable.QtySched != prodTable.orig().QtySched)
                {
                    bomVersion = BOMVersion::findActive(
                                prodTable.ItemId,
                                prodTable.bomDate,
                                prodTable.QtySched,
                                _inventDim);
                    routeVersion = RouteVersion::findActive(
                                prodTable.ItemId,
                                prodTable.bomDate,
                                prodTable.QtySched,
                                _inventDim);

                    prodTable.bomId = bomVersion.bomId;
                    prodTable.RouteId = routeVersion.RouteId;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProdTypeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the production order type field should be editable.
    /// </summary>
    /// <returns>
    /// true if the field is editable; otherwise, false.
    /// </returns>
    public boolean checkProdTypeEnabled()
    {
        if (calledFromProdProcessBatch)
        {
            // prodType must be locked to process.
            return false;
        }

        return !this.isReworkEnabled() || this.isCalledFromListPage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>closedOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be executed during the <c>closedOk</c> event of the form
    /// </summary>
    /// <remarks>
    /// refresh the caller datasource and find the new record
    /// </remarks>
    public void closedOk()
    {
        Common         common;
        Common         commonDim;
        FormDataSource common_ds;
        FormDataSource commonDim_ds;

        if (#PmfEnabled
            && this.isCallerReworkOrder()
            && this.args().dataset() == tablenum(ProdTable))
        {
            common      = this.args().record();
            common_ds   = FormDataUtil::getFormDataSource(common);

            common_ds.executeQuery();
            common_ds.findRecord(buffer);
            common_ds.reread();
            common_ds.refresh();

            commonDim       = common.joinChild();

            if (commonDim.TableId == tablenum(InventDim))
            {
                commonDim_ds    = FormDataUtil::getFormDataSource(commonDim);

                commonDim.data(InventDim::find(inventDim.InventDimId));
                commonDim_ds.setCurrent();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after the <c>active</c> event has been processed for the data source.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// The form element has not been set for this class.
    /// </exception>
    public void dataSourceActivePost()
    {
        ProdTable prodTable;

        super();

        if (!this.parmFormRun())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (this.isFormulaEnabled())
        {
            prodTable = buffer;

            this.parmFormRun().design().caption(
                strfmt("@PRO96", prodTable.ProdId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after the <c>ProdTable</c> data source has been initialized.
    /// </summary>
    /// <param name="_buffer">
    /// The record buffer that is associated to the data source.
    /// </param>
    public void dataSourceInitPost(Common _buffer)
    {
        FormDataSource  localProdTable_ds = FormDataUtil::getFormDataSource(_buffer);
        ProdTable       prodTable = _buffer;

        super(_buffer);

        if (this.isFormulaEnabled())
        {
            localProdTable_ds.query().dataSourceTable(
                tablenum(ProdTable)).addRange(
                fieldnum(ProdTable, ProdType)).value(
                    SysQuery::value(ProdType::Process));

            localProdTable_ds.object(fieldnum(ProdTable, ProdType)).enabled(false);

            prodTable.initReworkOrderFields();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInitValuePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called before the <c>initValue</c> event of the data source.
    /// </summary>
    /// <param name="_buffer">
    /// The buffer that is associated to the data source.
    /// </param>
    public void dataSourceInitValuePre(Common _buffer)
    {
        ProdTable prodTable;

        prodTable = _buffer;

        if (this.isFormulaEnabled())
        {
            prodTable.ProdType = ProdType::Process;
        }

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that writing a record on the form data source.
    /// </summary>
    /// <returns>
    /// true if the record can be written; otherwise, false.
    /// </returns>
    public boolean dataSourceValidateWrite()
    {
        boolean ret;
        Object prodTableCreateForm = this.parmFormRun();
        InventDimCtrl_Frm_Mov inventDimFormSetup;
        ProdTable prodTable;

        ret = super();

        prodTable = buffer;

        if (this.isFormulaEnabled())
        {
            if (!prodTableCreateForm)
            {
                throw error(Error::wrongUseOfFunction(funcname()));
            }

            inventDimFormSetup = prodTableCreateForm.inventDimSetupObject();

            if (inventDimFormSetup.parmDimParmEnabled().ConfigIdFlag
                    == NoYes::Yes)
            {
                if (inventDim.ConfigId)
                {
                    ret = ret
                        && prodTable.inventTable().checkConfigId(
                            inventDim.ConfigId);
                }
                else
                {
                    ret = checkFailed(strfmt("@SYS25771",prodTable.ItemId));
                }
            }

            if (ret && !prodTable.bomId && !prodTable.PmfReworkBatch)
            {
                ret = checkFailed("@PRO2410");
            }

            if (ret
                && !prodTable.PmfReworkBatch
                && BOMTable::isBOMApproveEnabled()
                && !BOMVersion::findApproved(prodTable.ItemId,
                        prodTable.bomId,
                        true,
                        prodTable.bomDate,
                        prodTable.bomDate,
                        prodTable.QtySched,
                        false))
            {
                ret = checkFailed("@PRO2682");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceWriteOnThrow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to run when an exception is thrown while writing the datasource
    /// </summary>
    /// <remarks>
    /// show an additional error message to the user if a production batch
    /// order was being created
    /// </remarks>
    public void dataSourceWriteOnThrow()
    {
        if (this.isFormulaEnabled())
        {
            error("@PRO998");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceWritePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called before the <c>write</c> operation of the data source will be processed.
    /// </summary>
    /// <remarks>
    /// Adjusts the quantity fields based on the type of the item to be produced.
    /// </remarks>
    public void dataSourceWritePre()
    {
        ProdTable prodTable;

        super();

        prodTable = buffer;
        prodTable.pmfSetInitialRemainInventPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the fields on the <c>ProdTable</c> record.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the field for which to handle the lookup.
    /// </param>
    /// <param name="_formControl">
    /// The <c>FormControl</c> object that indicates the lookup.
    /// </param>
    /// <param name="_filterStr">
    /// Additional filter for the lookup.
    /// </param>
    public void fieldLookup(
        fieldId _fieldId,
        FormControl _formControl,
        str _filterStr)
    {
        boolean         handled = true;
        ProdTable       prodTable;
        InventLookup    lookup;

        switch (_fieldId)
        {
            case fieldnum(ProdTable, ItemId) :
                handled = true;
                if (this.isFormulaEnabled())
                {
                    InventTable::lookupFormulaItemId(_formControl);
                }
                else
                {
                    lookup = new InventLookup(_formControl, new Query(), formStr(InventItemIdLookupPurchase));
                    lookup.run();
                }

                break;

            case fieldnum(ProdTable, bomId) :
                handled = true;
                prodTable = buffer;
                if (this.isFormulaEnabled())
                {
                    InventTable::lookupFormulaId(_formControl, prodTable.ItemId,
                        inventDim);
                }
                else
                {
                    InventTable::lookupBOMId(_formControl, prodTable.ItemId,
                        inventDim);
                }

                break;
        }

        if (!handled)
        {
            super(_fieldId, _formControl, _filterStr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the modification of fields for the <c>ProdTable</c> data source.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the field that has changed.
    /// </param>
    public void fieldModified(fieldId _fieldId)
    {
        BOMVersion bomVersion;
        ProdTable prodTable;
        boolean handled = false;
        InventQty preQty;
        Object prodTableCreateForm = this.parmFormRun();

        prodTable = buffer;

        switch (_fieldId)
        {
            case fieldnum(ProdTable, ItemId) :
                if (this.isFormulaEnabled() && prodTable.BOMId)
                {
                    prodTable.QtySched =
                            prodTable.inventTable().inventStandardQty(
                                inventDim.InventDimId);

                    select firstonly bomVersion
                        order by FromQty desc
                        where bomVersion.ItemId     == prodTable.ItemId
                            && bomVersion.Active    == true
                            && bomVersion.BOMId     == prodTable.BOMId
                            && bomVersion.FromDate  <= prodTable.DlvDate
                            && (bomVersion.ToDate   >= prodTable.DlvDate
                                || !bomVersion.ToDate)
                            && bomVersion.FromQty   <= prodTable.QtySched;
                    if (!bomVersion.RecId)
                    {
                        select firstonly bomVersion
                            order by FromQty asc
                            where bomVersion.ItemId     == prodTable.ItemId
                                && bomVersion.Active    == true
                                && bomVersion.BOMId     == prodTable.BOMId
                                && bomVersion.FromDate  <= prodTable.DlvDate
                                && (bomVersion.ToDate   >= prodTable.DlvDate
                                    || !bomVersion.ToDate);
                    }

                    this.reinitializeFromBOMVersion(prodTable, bomVersion, prodTable.QtySched < bomVersion.PmfBatchSize);
                }

                break;

            case fieldnum(ProdTable, bomId) :
                if (this.isFormulaEnabled())
                {
                    bomVersion = BOMVersion::findApproved(
                        prodTable.ItemId,
                        prodTable.bomId,
                        true,
                        prodTable.bomDate,
                        prodTable.bomDate,
                        prodTable.QtySched);

                    if (!bomVersion.RecId)
                    {
                        bomVersion = BOMVersion::findApproved(
                            prodTable.ItemId,
                            prodTable.bomId,
                            true,
                            prodTable.bomDate,
                            prodTable.bomDate,
                            maxint());
                    }

                    if (bomVersion.RecId)
                    {
                        this.reinitializeFromBOMVersion(prodTable, bomVersion, true);
                        formDS.refresh();
                    }
                }

                break;

            case fieldnum(ProdTable, PdsCWBatchSched) :
                handled = true;
                preQty = prodTable.QtySched;

                super(_fieldId);

                if (preQty != prodTable.QtySched)
                {
                    if (!prodTableCreateForm)
                    {
                        throw error(Error::wrongUseOfFunction(funcname()));
                    }

                    prodTableCreateForm.changeBOMRouteVersions(
                                            prodTable.DlvDate,
                                            false);
                }

                InventMovement::setMinMaxQty(prodTable);

                break;

            case fieldnum(ProdTable, PmfReworkBatch) :
                prodTable.initReworkOrderFields();

                if (prodTable.PmfReworkBatch)
                {
                    info("@PRO2251");
                    prodTable.bomId = '';
                    prodTable.bomDate = dateNull();
                }
                else
                {
                    prodTableCreateForm.changeBOMRouteVersions(
                                            prodTable.DlvDate,
                                            true);
                }

                this.updateDesign();
                break;
        }

        if (!handled)
        {
            super(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterPmfProductTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a set of product types that should be filtered on when looking up items.
    /// </summary>
    /// <returns>
    /// A set of product types.
    /// </returns>
    protected Set filterPmfProductTypes()
    {
        Set set = new Set(Types::Enum);

        if (this.isFormulaEnabled())
        {
            set.add(PmfProductType::Formula);
            set.add(PmfProductType::MainItem);
        }
        else
        {
            set.add(PmfProductType::BOM);
        }

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        xArgs args = this.parmFormRun().args();

        if (#PMFEnabled
            && args.record()
            && args.record().TableId == tablenum(ProdTable)
            && args.parmEnumType() == enumnum(NoYes))
        {
            NoYes parmEnum = args.parmEnum();
            if (parmEnum && buffer.TableId == tablenum(ProdTable))
            {
                buffer.(fieldnum(ProdTable,PmfReworkBatch)) = NoYes::Yes;
            }
        }

        this.registerCtrlRule(
            formRun.design().controlName(formControlStr(ProdTableCreate, Production)),
            formRun.design().controlName(formControlStr(ProdTableCreate, Production_PdsCWBatchSched)),
            methodstr(PmfFormCtrl_ProdTableCreate, isFormulaAndCWEnabled),
            ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
            formRun.design().controlName(formControlStr(ProdTableCreate, Production)),
            formRun.design().controlName(formControlStr(ProdTableCreate, Production_M_PdsCWUnitId)),
            methodstr(PmfFormCtrl_ProdTableCreate, isFormulaAndCWEnabled),
            ButtonRuleEffectType::Visible);

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        this.registerCtrlRuleNoGroup(
                    formRun.design().controlName(formControlStr(ProdTableCreate, Production_ProdType)),
                    methodstr(PmfFormCtrl_ProdTableCreate, checkProdTypeEnabled),
                    ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTableCreate, PmfBatch)),
                methodstr(PmfFormCtrl_ProdTableCreate, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTableCreate, Identification)),
                formRun.design().controlName(formControlStr(ProdTableCreate, Identification_ProdId)),
                methodstr(PmfFormCtrl_ProdTableCreate, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PDS1470");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTableCreate, Identification)),
                formRun.design().controlName(formControlStr(ProdTableCreate, Identification_ProdId)),
                methodstr(PmfFormCtrl_ProdTableCreate, isFormulaEnabled),
                ButtonRuleEffectType::HelpText,
                "@PDS1471");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTableCreate, BOMroute)),
                formRun.design().controlName(formControlStr(ProdTableCreate, BOMroute_BOMId)),
                methodstr(PmfFormCtrl_ProdTableCreate, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO101");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(ProdTableCreate, BOMroute)),
                formRun.design().controlName(formControlStr(ProdTableCreate, BOMroute_BOMDate)),
                methodstr(PmfFormCtrl_ProdTableCreate, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO94");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTableCreate, BOMroute)),
                methodstr(PmfFormCtrl_ProdTableCreate, isFormulaEnabled),
                ButtonRuleEffectType::Caption,
                "@PRO119");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTableCreate, PmfReworkBatch)),
                methodstr(PmfFormCtrl_ProdTableCreate, isReworkBatchEnabled),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTableCreate, BOMroute)),
                methodstr(PmfFormCtrl_ProdTableCreate, notCheckEnabledReworkItem),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTableCreate, PmfBatch)),
                methodstr(PmfFormCtrl_ProdTableCreate, notCheckEnabledReworkItem),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTableCreate, Grouping)),
                methodstr(PmfFormCtrl_ProdTableCreate, notCheckEnabledReworkItem),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTableCreate, Setup)),
                methodstr(PmfFormCtrl_ProdTableCreate, notCheckEnabledReworkItem),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTableCreate, PmfReworkBatch)),
                methodstr(PmfFormCtrl_ProdTableCreate, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(ProdTableCreate, Setup_PmfTotalCostAllocation)),
                methodstr(PmfFormCtrl_ProdTableCreate, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        if (Project::Enabled())
        {
            this.registerCtrlRuleNoGroup(
                    formRun.design().controlName(formControlStr(ProdTableCreate, Project)),
                    methodstr(PmfFormCtrl_ProdTableCreate, isProjectEnabled),
                    ButtonRuleEffectType::Visible);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class form control caller variables before form initialization.
    /// </summary>
    public void initPre()
    {
        ItemId      defaultCallerItemId;
        SalesLine   salesLine;
        Object      formCallerObject = this.caller();

        if (this.parmFormRun() && formCallerObject)
        {
            if (formCallerObject is formRun && formHasMethod(formCallerObject, identifierstr(parmItemId)))
            {
                defaultCallerItemId = formCallerObject.parmItemId();
            }

            if ((this.parmFormRun().args() &&
                ((this.parmFormRun().args().menuItemName() == menuitemDisplayStr(PmfBatchOrderNew))
                 || (this.parmFormRun().args().menuItemName() == menuitemActionStr(PmfBatchOrderCreateOpen))))
                || (defaultCallerItemId && InventTable::find(defaultCallerItemId).isFormulaAllowed()))
            {
                calledFromProdProcessBatch = true;
            }
            else
            {
                switch (this.parmFormRun().args().dataset())
                {
                    case tablenum(SalesLine) :
                        salesLine = this.parmFormRun().args().record();
                        calledFromProdProcessBatch = salesLine.inventTable().isFormulaAllowed();
                        break;
                }
            }
        }

        calledFromProdListPage = formCallerObject
                                && formCallerObject.name() == formstr(ProdTable)
                                && formCallerObject.pmfIsCalledFromListPage();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalledFromListPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the form is being started from the production order list page.
    /// </summary>
    /// <returns>
    /// true if the form has been started from the list page; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The method is being used by the button manager to set fields properties appropriately.
    /// </remarks>
    public boolean isCalledFromListPage()
    {
        return calledFromProdListPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCallerReworkOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the form is being called for a rework order batch.
    /// </summary>
    /// <returns>
    /// true if the form has been started to create a rework order; otherwise, false.
    /// </returns>
    public Common isCallerReworkOrder()
    {
        ProdTable   prodTable;
        FormRun     formRunCaller = this.parmFormRun();
        xArgs       args;

        if (formRunCaller && formRunCaller.args())
        {
            args = formRunCaller.args();

            if (args.caller() && args.record())
            {
                if (args.record().TableId == tablenum(ProdTable)
                    && args.parmEnumType() == enumnum(NoYes)
                    && args.parmEnum() == NoYes::Yes)
                {
                    prodTable = args.record();
                }
            }
        }

        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaAndCWEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether both formula and catch weight is enabled.
    /// </summary>
    /// <returns>
    /// true if both formula and catch weight are enabled; otherwise, false.
    /// </returns>
    public NoYes isFormulaAndCWEnabled()
    {
        return #PdsEnabled && this.isFormulaEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a production batch order should be created.
    /// </summary>
    /// <returns>
    /// true if a batch order should be created; otherwise, false.
    /// </returns>
    public NoYes isFormulaEnabled()
    {
        ProdTable prodTable;

        prodTable = buffer;

        return #PmfEnabled
            && calledFromProdProcessBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the project fields are enabled.
    /// </summary>
    /// <returns>
    /// true if the project fields can be enabled; otherwise, false.
    /// </returns>
    public NoYes isProjectEnabled()
    {
        return !this.isFormulaEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReworkBatchEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the rework batch value is enabled.
    /// </summary>
    /// <returns>
    /// true if the value should be enabled; otherwise, false.
    /// </returns>
    public NoYes isReworkBatchEnabled()
    {
        return this.isFormulaEnabled()
            && #PmfReworkBatchEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReworkEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the rework batch value is set.
    /// </summary>
    /// <returns>
    /// true if the value is set; otherwise, false.
    /// </returns>
    public NoYes isReworkEnabled()
    {
        ProdTable prodTable = buffer;

        return prodTable.PmfReworkBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>notCheckEnabledReworkItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the rework batch value is not set.
    /// </summary>
    /// <returns>
    /// <c>true</c> if the value is not set; otherwise, <c>false</c> .
    /// </returns>
    private boolean notCheckEnabledReworkItem()
    {
        return !(this.isReworkBatchEnabled() && this.isReworkEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number sequence form handler for production batch orders.
    /// </summary>
    /// <returns>
    /// The number sequence form handler, if the order is a production batch order.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The form element has not been set for the class.
    /// </exception>
    public NumberSeqFormHandler numberSeqFormHandler()
    {
        NumberSeqFormHandler numberSeqFormHandler;
        Object prodTableCreateForm = this.parmFormRun();

        if (this.isFormulaEnabled())
        {
            if (!prodTableCreateForm)
            {
                throw error(Error::wrongUseOfFunction(funcname()));
            }

            numberSeqFormHandler = NumberSeqFormHandler::newForm(
                ProdParameters::pmfNumRefProcessBatchId().NumberSequenceId,
                prodTableCreateForm,
                formDS,
                fieldnum(ProdTable,ProdId)
                );
        }

        return numberSeqFormHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the data sources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A <c>Common</c> table buffer that belongs to the first data source.
    /// </param>
    /// <param name="_datasources2">
    /// A <c>Common</c> table buffer that belongs to the second data source.
    /// </param>
    /// <param name="_datasources3">
    /// A <c>Common</c> table buffer that belongs to the third data source.
    /// </param>
    /// <param name="_datasources4">
    /// A <c>Common</c> table buffer that belongs to the fourth data source.
    /// </param>
    /// <param name="_datasources5">
    /// A <c>Common</c> table buffer that belongs to the fifth data source.
    /// </param>
    /// <remarks>
    /// Up to five data sources can be passed. If the implementation requires more data sources additional
    /// custom methods should be implemented on the rule implementer class.The method is called by the
    /// <c>FormButtonManager</c> class on the rule class that implements the <c>ButtonStateProvider</c>
    /// interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(ProdTable))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (_datasources2.TableId != tablenum(InventDim))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        inventDim = _datasources2;

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReworkFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the rework order fields.
    /// </summary>
    /// <param name="_prodTable">
    /// The batch order record for which to set the fields.
    /// </param>
    /// <param name="_caller">
    /// The caller record to set the fields from
    /// </param>
    /// <returns>
    /// The batch order record with the rework order fields set.
    /// </returns>
    public ProdTable setReworkFields(ProdTable _prodTable,ProdTable _caller)
    {
        _prodTable.initFromReworkProdTable(_caller);

        return _prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form design.
    /// </summary>
    public void updateDesign()
    {
        super();

        this.refreshManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the <c>updateDesign</c> method of the form element.
    /// </summary>
    /// <param name="_mode">
    /// The mode of the update to occur.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The <c>FormRun</c> element has not been set for the class.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The <c>InventDim</c> record has not been set for the class
    /// </exception>
    public void updateDesignPost(InventDimFormDesignUpdate _mode)
    {
        Object                  prodTableCreateForm = this.parmFormRun();
        InventDimCtrl_Frm_Mov   inventDimFormSetup;
        FormDataSource          inventDim_ds;

        switch (_mode)
        {
            case InventDimFormDesignUpdate::FieldChange   :

                if (this.isFormulaEnabled())
                {
                    if (!prodTableCreateForm)
                    {
                        throw error(Error::wrongUseOfFunction(funcname()));
                    }

                    if (!inventDim)
                    {
                        throw error(Error::wrongUseOfFunction(funcname()));
                    }

                    inventDim_ds = FormDataUtil::getFormDataSource(inventDim);

                    inventDimFormSetup =
                        prodTableCreateForm.inventDimSetupObject();

                    if (inventDimFormSetup.parmDimParmEnabled().ConfigIdFlag
                            == NoYes::Yes)
                    {
                        inventDim_ds.object(
                            fieldnum(InventDim,ConfigId)).mandatory(true);
                    }
                    else
                    {
                        inventDim_ds.object(
                            fieldnum(InventDim,ConfigId)).mandatory(false);
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_ProdTableCreate construct()
    {
        return new PmfFormCtrl_ProdTableCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>PmfFormCtrl_ProdTableCreate</c> class.
    /// </summary>
    /// <param name="_fr">
    /// A <c>FormRun</c> object.
    /// </param>
    /// <returns>
    /// An instance of the <c>PmfFormCtrl_ProdTableCreate</c> class.
    /// </returns>
    public static PmfFormCtrl_ProdTableCreate newFromForm(
        FormRun _fr)
    {
        PdsCWFormCtrl cwFormCtrl;
        PmfFormCtrl_ProdTableCreate frmCtrl;

        frmCtrl = PmfFormCtrl_ProdTableCreate::construct();
        frmCtrl.parmFormRun(_fr);

        if (#PdsCatchWeightEnabled)
        {
            cwFormCtrl = PdsCWFormCtrl::constructFromForm(_fr);
            cwFormCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
                    [[fieldnum(ProdTable,QtySched),
                        fieldnum(ProdTable,PdsCWBatchSched),
                        false]]));
            cwFormCtrl.parmItemFieldId(fieldnum(ProdTable,ItemId));
            cwFormCtrl.parmUnitMethodStr(tablemethodstr(ProdTable,pdsCWUnitId));
            frmCtrl.addSubFormCtrl(cwFormCtrl);
        }

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>