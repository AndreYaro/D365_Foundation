<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCopyingContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>PurchCopyingContract</c> class is used as data contract for the <c>PurchCopying</c> class.
/// </summary>
class PurchCopyingContract implements SysPackable
{
    Common         callingTable;
    RecId          callingTableRecId;
    TableName      callingTableName;
    container      packedTmpFrmVirtualLines;
    container      packedTmpFrmVirtualHeader;
    Qty            qtyFactor;
    NoYes          reverseSign;
    NoYes          recalculateAmount;
    NoYes          copyMarkup;
    NoYes          copyPrecisely;
    NoYes          deleteLines;
    NoYes          taxAsPerOriginalInv;

    boolean                 convertCurrency;
    CurrencyCode            headerCurrencyCode;
    TradeCurencyConversion  tradeCurencyConversion;
    boolean                 deleteSettlement;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        callingTableRecId,
        callingTableName,
        packedTmpFrmVirtualLines,
        packedTmpFrmVirtualHeader,
        qtyFactor,
        reverseSign,
        recalculateAmount,
        copyMarkup,
        copyPrecisely,
        deleteLines,
        taxAsPerOriginalInv,
        convertCurrency,
        headerCurrencyCode,
        tradeCurencyConversion,
        deleteSettlement
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCallingTable</Name>
				<Source><![CDATA[
    public Common parmCallingTable(Common _callingTable = callingTable)
    {
        DictTable   dictTable;

        if (prmisDefault(_callingTable) && !_callingTable && callingTableName != "")
        {
            dictTable = new DictTable(tableName2id(callingTableName));
            _callingTable = dictTable.makeRecord();
            select forupdate _callingTable where _callingTable.RecId == callingTableRecId;
        }

        callingTable        = _callingTable;
        callingTableRecId   = callingTable.RecId;
        callingTableName    = tableId2name(callingTable.TableId);

        return callingTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConvertCurrency</Name>
				<Source><![CDATA[
    public boolean parmConvertCurrency(boolean _convertCurrency = convertCurrency)
    {
        convertCurrency = _convertCurrency;
        return convertCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyMarkup</Name>
				<Source><![CDATA[
    public NoYes parmCopyMarkup(NoYes _copyMarkup = copyMarkup)
    {
        copyMarkup = _copyMarkup;
        return copyMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyPrecisely</Name>
				<Source><![CDATA[
    public NoYes parmCopyPrecisely(NoYes _copyPrecisely = copyPrecisely)
    {
        copyPrecisely = _copyPrecisely;
        return copyPrecisely;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteLines</Name>
				<Source><![CDATA[
    public NoYes parmDeleteLines(NoYes _deleteLines = deleteLines)
    {
        deleteLines = _deleteLines;
        return deleteLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteSettlement</Name>
				<Source><![CDATA[
    public boolean parmDeleteSettlement(boolean _deleteSettlement = deleteSettlement)
    {
        deleteSettlement = _deleteSettlement;
        return deleteSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHeaderCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmHeaderCurrencyCode(CurrencyCode _headerCurrencyCode = headerCurrencyCode)
    {
        headerCurrencyCode = _headerCurrencyCode;
        return headerCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedTmpFrmVirtualHeader</Name>
				<Source><![CDATA[
    public container parmPackedTmpFrmVirtualHeader(container _packedTmpFrmVirtualHeader = packedTmpFrmVirtualHeader)
    {
        packedTmpFrmVirtualHeader = _packedTmpFrmVirtualHeader;
        return packedTmpFrmVirtualHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedTmpFrmVirtualLines</Name>
				<Source><![CDATA[
    public container parmPackedTmpFrmVirtualLines(container _packedTmpFrmVirtualLines = packedTmpFrmVirtualLines)
    {
        packedTmpFrmVirtualLines = _packedTmpFrmVirtualLines;
        return packedTmpFrmVirtualLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyFactor</Name>
				<Source><![CDATA[
    public Qty parmQtyFactor(Qty _qtyFactor = qtyFactor)
    {
        qtyFactor = _qtyFactor;
        return qtyFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecalculateAmount</Name>
				<Source><![CDATA[
    public NoYes parmRecalculateAmount(NoYes _recalculateAmount = recalculateAmount)
    {
        recalculateAmount = _recalculateAmount;
        return recalculateAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReverseSign</Name>
				<Source><![CDATA[
    public NoYes parmReverseSign(NoYes _reverseSign = reverseSign)
    {
        reverseSign = _reverseSign;
        return reverseSign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAsPerOrginalInvoice_IN</Name>
				<Source><![CDATA[
    public NoYes parmTaxAsPerOrginalInvoice_IN(NoYes _taxAsPerOriginalInv = taxAsPerOriginalInv)
    {
        taxAsPerOriginalInv = _taxAsPerOriginalInv;
        return taxAsPerOriginalInv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeCurencyConversion</Name>
				<Source><![CDATA[
    public TradeCurencyConversion parmTradeCurencyConversion(TradeCurencyConversion _tradeCurencyConversion = tradeCurencyConversion)
    {
        tradeCurencyConversion = _tradeCurencyConversion;
        return tradeCurencyConversion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchCopyingContract construct()
    {
        return new PurchCopyingContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates an instance of the <c>PurchCopyingContract</c> class.
    /// </summary>
    /// <param name="_callerTable">
    ///   A record.
    /// </param>
    /// <returns>
    ///   An instance of the <c>PurchCopyingContract</c> class.
    /// </returns>
    static public PurchCopyingContract newContract(Common _callerTable)
    {
        switch (_callerTable.TableId)
        {
            case tableNum(PurchTable):
                return PurchCopyingPurchTableContract::construct();

            default :
                return PurchCopyingContract::construct();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version     = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates an instance of the <c>PurchCopyingContract</c> class based on a container from a prior call to <c>PurchCopyingContract.pack</c> method.
    /// </summary>
    /// <param name="_packedClass">
    ///   A <c>Container</c> holding the packed class.
    /// </param>
    /// <param name="_callerTable">
    ///   A record.
    /// </param>
    /// <returns>
    ///     An instance of the <c>PurchCopyingContract</c> class identical to the one that was packed into the <c>container</c>.
    /// </returns>
    static public PurchCopyingContract create(container _packedClass, Common _callerTable)
    {
        PurchCopyingContract contract = PurchCopyingContract::newContract(_callerTable);
        contract.unpack(_packedClass);
        return contract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>