<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendChequeSlipTextCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendChequeSlipTextCalculator</c> class calculates slip text area required during printing of cheque.
/// </summary>
/// <remarks>
/// All lengths used in this class are in millimeters.
/// </remarks>
public class CustVendChequeSlipTextCalculator
{
    protected Counter numOfSlips;
    private ReportPosition chequeTop;
    private ReportPosition slipTop1;
    private ReportPosition slipTop2;
    private Counter rowNumberPerPage;
    private Counter chequeTopDropLines;
    private AmountCur lastProcessedAmountInSlipTxt = 0.0;
    private RecId lastProcessedBankChequePaymTrans = 0;

    protected BankChequeLayout bankChequeLayout;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>CustVendChequeSlipTextCalculator</c> based on the provided check layout.
    /// </summary>
    /// <param name = "_bankChequeLayout">The <c>BankChequeLayout</c> to base the calculator on.</param>
    /// <returns>An instance of <c>CustVendChequeSlipTextCalculator</c>.</returns>
    public static CustVendChequeSlipTextCalculator construct(BankChequeLayout _bankChequeLayout)
    {
        CustVendChequeSlipTextCalculator calculator;

        if (_bankChequeLayout.UseGER)
        {
            calculator = new CustVendChequeSlipTextCalculator_GER();
        }
        else
        {
            calculator = new CustVendChequeSlipTextCalculator();
        }

        calculator.bankChequeLayout = _bankChequeLayout;

        return calculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBothSlipTextLinesAboveCheque</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the number of slip text lines in each slip text area.
    /// </summary>
    /// <param name = "_args">
    ///     An instance of <c>CustVendChequeSlipTextBothSlipsCalculateParameters</c> class.
    /// </param>
    /// <returns>
    ///     An instance of <c>CustVendChequeSlipTextBothSlipsCalculateReturn</c> class.
    /// </returns>
    [Wrappable(true)]
    protected final CustVendChequeSlipTextBothSlipsCalculateReturn calculateBothSlipTextLinesAboveCheque(CustVendChequeSlipTextBothSlipsCalculateParameters _args)
    {
        const real AmplifyingFactor = 100.0;

        CustVendChequeSlipTextBothSlipsCalculateReturn ret = CustVendChequeSlipTextBothSlipsCalculateReturn::construct();

        ret.slipTextArea = _args.areaAboveChequeLength / 2;
        ret.slipTop1 = 0;
        ret.slipTop2 = real2int(ret.slipTextArea * AmplifyingFactor);
        ret.chequeTopDropLines = this.getMaxSlipLines(_args.areaAboveChequeLength) - (2 * this.getMaxSlipLines(ret.slipTextArea));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSlipTextLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of slip text lines in each slip text area.
    /// </summary>
    /// <param name = "_bankChequeLayout">BankChequeLayout buffer that is used for calculation.</param>
    /// <returns>Number of slip text lines.</returns>
    public Counter calculateSlipTextLines(BankChequeLayout _bankChequeLayout = bankChequeLayout)
    {
        const real AmplifyingFactor = 100.0;
        const ChequeLength ChequeInitialTopPosition_FR = 124.0;
        const ChequeLength HeaderFooterLineSize_FR = 2.79; // 2.79mm = 7.5pt(font) + 2pt(padding)
        const ChequeLength RowSize_FR = 6.35; // 6.35mm = textbox height

        Counter slipLineMax;
        ChequeLength slipTextArea;

        ChequeLength paperLength = this.convertToMm(_bankChequeLayout.PaperSize, _bankChequeLayout.PaperSizeUnit);
        ChequeLength chequeDocLength = this.getChequeDocLength(_bankChequeLayout.ChequeFormType);
        ChequeLength unprintableReportArea = this.getUnprintableReportArea(_bankChequeLayout.ChequeFormType);
        ChequeLength minimumReportLength = chequeDocLength + unprintableReportArea;

        if (paperLength < minimumReportLength)
        {
            throw error(strFmt("@CashManagement:PrintableAreaTooSmall", minimumReportLength));
        }

        ChequeLength topMarginLength = this.convertToMm(_bankChequeLayout.TopMargin, _bankChequeLayout.TopMarginUnit);
        ChequeLength bottomMarginLength = this.convertToMm(_bankChequeLayout.BottomMargin, _bankChequeLayout.BottomMarginUnit);
        ChequeLength chequeStartPositionLength = this.convertToMm(_bankChequeLayout.ChequeStartPosition, _bankChequeLayout.ChequePositionUnit);
        ChequeLength actualPrintablePaperLength = paperLength - unprintableReportArea - topMarginLength - bottomMarginLength;

        ChequeLength areaAboveChequeLength = chequeStartPositionLength;
        ChequeLength areaBelowChequeLength = actualPrintablePaperLength - chequeDocLength - areaAboveChequeLength;

        if (areaBelowChequeLength < 0)
        {
            throw error("@SYS51016");
        }

        numOfSlips = _bankChequeLayout.ChequeSlipCopies;

        if (numOfSlips == 0)
        {
            chequeTopDropLines = this.getMaxSlipLines(areaAboveChequeLength);
        }

        if (_bankChequeLayout.ChequeFormType == ChequeFormType::FRStyle)
        {
            ChequeLength frChequeBasePos;
            int frLineCnt;

            frChequeBasePos = ChequeInitialTopPosition_FR;

            if (_bankChequeLayout.FRHeader)
            {
                frLineCnt = conLen(str2con(_bankChequeLayout.FRHeader, '\n'));

                if (frLineCnt > 5)
                {
                    frLineCnt = 5;
                }

                frChequeBasePos += (frLineCnt - 1) * HeaderFooterLineSize_FR;
            }

            if (_bankChequeLayout.FRFooter)
            {
                frLineCnt = conLen(str2con(_bankChequeLayout.FRFooter, '\n'));

                if (frLineCnt > 5)
                {
                    frLineCnt = 5;
                }

                frChequeBasePos += (frLineCnt - 1) * HeaderFooterLineSize_FR;
            }

            if (paperLength < (frChequeBasePos + chequeDocLength))
            {
                throw error(strFmt("@CashManagement:PrintableAreaTooSmall", (frChequeBasePos + chequeDocLength)));
            }

            rowNumberPerPage = 1;

            if (chequeStartPositionLength > frChequeBasePos)
            {
                rowNumberPerPage += real2int((chequeStartPositionLength - frChequeBasePos) / RowSize_FR);
            }
        }
        else if (numOfSlips > 0)
        {
            if (numOfSlips > 2)
            {
                numOfSlips = 2;
            }

            if (numOfSlips == 1)
            {
                CustVendChequeSlipTextSingleSlipLinesCalculateParameters calcParm = CustVendChequeSlipTextSingleSlipLinesCalculateParameters::construct();
                calcParm.areaAboveChequeLength = areaAboveChequeLength;
                calcParm.areaBelowChequeLength = areaBelowChequeLength;
                calcParm.chequeDocLength = chequeDocLength;
                CustVendChequeSlipTextSingleSlipLinesCalculateReturn calcReturn = this.calculateSingleSlipLine(calcParm);
                slipTop1 = calcReturn.slipTop1;
                slipTextArea = calcReturn.slipTextArea;
                chequeTopDropLines = calcReturn.chequeTopDropLines;
            }

            if (numOfSlips == 2)
            {
                if (this.shouldPrintBothSlipsAboveCheque(areaAboveChequeLength, areaBelowChequeLength))
                {
                    CustVendChequeSlipTextBothSlipsCalculateParameters args = CustVendChequeSlipTextBothSlipsCalculateParameters::construct();
                    args.areaAboveChequeLength = areaAboveChequeLength;
                    args.chequeDocLength = chequeDocLength;
                    args.topMarginLength = topMarginLength;
                    args.chequeStartPositionLength = chequeStartPositionLength;

                    CustVendChequeSlipTextBothSlipsCalculateReturn result = this.calculateBothSlipTextLinesAboveCheque(args);

                    slipTextArea = result.slipTextArea;
                    slipTop1 = result.slipTop1;
                    slipTop2 = result.slipTop2;
                    chequeTopDropLines = result.chequeTopDropLines;
                }
                else
                {
                    if (this.shouldPrintBothSlipsBelowCheque(areaAboveChequeLength, areaBelowChequeLength))
                    {
                        slipTextArea = areaBelowChequeLength / 2;
                        slipTop1 = real2int((areaAboveChequeLength + chequeDocLength) * AmplifyingFactor);
                        slipTop2 = real2int((areaAboveChequeLength + chequeDocLength + slipTextArea) * AmplifyingFactor);
                        chequeTopDropLines = this.getMaxSlipLines(areaAboveChequeLength);
                    }
                    else
                    {
                        slipTextArea = min(areaAboveChequeLength, areaBelowChequeLength);

                        slipTop1 = 0;
                        slipTop2 = real2int((areaAboveChequeLength + chequeDocLength) * AmplifyingFactor);
                        chequeTopDropLines = this.getMaxSlipLines(areaAboveChequeLength) - this.getMaxSlipLines(slipTextArea);
                    }
                }
            }

            slipLineMax = this.getMaxSlipLines(slipTextArea);

            if (slipLineMax <= 0)
            {
                throw error(strFmt("@SYS56616", numOfSlips));
            }
        }

        chequeTop = real2int(chequeStartPositionLength * AmplifyingFactor);

        return slipLineMax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumOfSlips</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of cheque slips on the cheque.
    /// </summary>
    /// <returns>
    /// The number of cheque slips on the cheque.
    /// </returns>
    public Counter getNumOfSlips()
    {
        return numOfSlips;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChequeTop</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value to determine the position of the both slip texts.
    /// </summary>
    /// <returns>
    /// The value to determine the position of the both slip texts.
    /// </returns>
    public ReportPosition getChequeTop()
    {
        return chequeTop;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSlipTop1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value to determine the position of the first slip text.
    /// </summary>
    /// <returns>
    /// The value to determine the position of the first slip text.
    /// </returns>
    public ReportPosition getSlipTop1()
    {
        return slipTop1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSlipTop2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value to determine the position of the second slip text.
    /// </summary>
    /// <returns>
    /// The value to determine the position of the second slip text.
    /// </returns>
    public ReportPosition getSlipTop2()
    {
        return slipTop2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRowNumberPerPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of slip text rows that can fit on a page.
    /// </summary>
    /// <returns>
    /// The number of slip text rows that can fit on a page.
    /// </returns>
    public Counter getRowNumberPerPage()
    {
        return rowNumberPerPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChequeTopDropLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of lines to add to position the cheque.
    /// </summary>
    /// <returns>
    /// The number of lines to add to position the cheque.
    /// </returns>
    public Counter getChequeTopDropLines()
    {
        return chequeTopDropLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChequeTopDrop</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the text for positioning the cheque.
    /// </summary>
    /// <returns>
    /// The text to position the cheque.
    /// </returns>
    public ChequeSlipTxt getChequeTopDrop()
    {
        ChequeSlipTxt chequeSlipText;
        Counter c = this.getChequeTopDropLines();

        if (c > 0)
        {
            chequeSlipText = strRep('\n', c);
        }

        return chequeSlipText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToMm</Name>
				<Source><![CDATA[
    private ChequeLength convertToMm(ChequeLength _value, ChequeFormatUnit _unit)
    {
        return units2mm(_value, _unit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPrintBothSlipsAboveCheque</Name>
				<Source><![CDATA[
    private boolean shouldPrintBothSlipsAboveCheque(ChequeLength _areaAboveChequeLength, ChequeLength _areaBelowChequeLength)
    {
        return (_areaAboveChequeLength / 2) > _areaBelowChequeLength;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPrintBothSlipsBelowCheque</Name>
				<Source><![CDATA[
    private boolean shouldPrintBothSlipsBelowCheque(ChequeLength _areaAboveChequeLength, ChequeLength _areaBelowChequeLength)
    {
        return (_areaBelowChequeLength / 2) > _areaAboveChequeLength;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChequeDocLength</Name>
				<Source><![CDATA[
    protected ChequeLength getChequeDocLength(ChequeFormType _chequeFormType)
    {
        const real ChequeSizeDefault = 88.89;
        const real ChequeSize_DK = 79.73;
        const real ChequeSize_BR = 77.00;
        const real ChequeSize_DE = 105.81;
        const real ChequeSize_USPayroll = 88.89;

        ChequeLength chequeLength;

        switch (_chequeFormType)
        {
            case ChequeFormType::USStyle,
                ChequeFormType::UKStyle,
                ChequeFormType::ESStyle,
                ChequeFormType::MXStyle,
                ChequeFormType::CAStyle,
                ChequeFormType::FRStyle:
                chequeLength = ChequeSizeDefault;
                break;

            case ChequeFormType::DKStyle:
                chequeLength = ChequeSize_DK;
                break;

            case ChequeFormType::BRStyle:
                chequeLength = ChequeSize_BR;
                break;

            case ChequeFormType::DEStyle:
                chequeLength = ChequeSize_DE;
                break;

            case ChequeFormType::USPayrollStyle :
                chequeLength = ChequeSize_USPayroll;
                break;

            default:
                EventHandlerResult eventResult = new EventHandlerResult();
                this.getChequeDocLengthDelegate(_chequeFormType, eventResult);
                if (!eventResult.hasResult())
                {
                    throw error("@SYS26828");
                }
                else
                {
                    chequeLength = eventResult.result();
                }
        }

        return chequeLength;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChequeDocLengthDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to be called in the default case within the getChequeDocLength method for executing cheque form types.
    /// </summary>
    /// <param name = "_chequeFormType">The cheque form type used for execution.</param>
    /// <param name = "_result">The <c>EventHandlerResult</c> instance to be assigned to prior to exiting the method once the work is completed.</param>
    delegate void getChequeDocLengthDelegate(ChequeFormType _chequeFormType, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxSlipLines</Name>
				<Source><![CDATA[
	/// <summary>
    /// Gets the maximum number of lines necessary to print the slip text.
    /// </summary>
    /// <param name = "_length">
    /// The legth of the cheque.
	/// </param>
    /// <returns>
    /// The maximum number of lines necessary to print the slip text.
	/// </returns>
    [Wrappable(true)]
    protected final int getMaxSlipLines(chequeLength _length)
    {
        const real MmPerLine = 4.0;

        return real2int(_length / MmPerLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinimumSlipLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the minimum number of lines necessary to print the slip text
    /// for the given cheque format.
    /// </summary>
    /// <param name = "_chequeFormType">The format used by the cheque.</param>
    /// <returns>The minimum number of lines necessary to print the slip text.</returns>
    public Counter getMinimumSlipLines(ChequeFormType _chequeFormType)
    {
        switch (_chequeFormType)
        {
            case ChequeFormType::DKStyle:
                return 3;

            case ChequeFormType::DEStyle,
                ChequeFormType::UKStyle,
                ChequeFormType::ESStyle:
                return 7;

            case ChequeFormType::USStyle,
                ChequeFormType::MXStyle,
                ChequeFormType::CAStyle:
                return 8;

            default: // FR and BR don't use slip lines.
                return 7;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSlipTextTitleAndEndLinesForSubTotalOrTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the slip text title and end lines for subtotal and total for a page of a cheque report.
    /// </summary>
    /// <param name = "_args">
    ///    An instance of <c>CustVendChequeSlipTextCalcDeterminSlipTextForTotalParameters</c> class.
    /// </param>
    /// <returns>
    ///     An instance of <c>CustVendChequeSlipTextCalcDeterminSlipTextForTotalReturn</c> class.
    /// </returns>
    protected CustVendChequeSlipTextCalcDeterminSlipTextForTotalReturn determineSlipTextTitleAndEndLinesForSubTotalOrTotal(CustVendChequeSlipTextCalcDeterminSlipTextForTotalParameters _args)
    {
        CustVendChequeSlipTextCalcDeterminSlipTextForTotalReturn totalReturn = CustVendChequeSlipTextCalcDeterminSlipTextForTotalReturn::construct();
        totalReturn.chequeSlipTxt = strFmt('\n%1 %2', strLFix(_args.chequeSlipTxtLabel, 66), num2str(_args.TotalAmountCur, 16, 2, -1, -1));
        totalReturn.endLines = -1;

        return totalReturn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSlipText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string containing the slip text for a page of a cheque report.
    /// </summary>
    /// <param name="_bankChequeTable">
    /// The <c>BankChequeTable</c> record containing the cheque information.
    /// </param>
    /// <param name="_startLines">
    /// The number of <c>BankChequePaymTrans</c> lines that have already been added
    /// to the slip text on previous pages.
    /// </param>
    /// <param name="_endLines">
    /// The number of lines that should be after the check slip information.
    /// </param>
    /// <param name="_totalBankChequePaymTransLines">
    /// The number of lines in BankChequePaymTrans for a specific cheque of a bank.
    /// </param>
    /// <param name="_chequeFormType">
    /// The <c>CheckFormType</c> of the cheque.
    /// </param>
    /// <returns>
    /// A container that contains the <c>ChequeSlipText</c> text, the total slip lines added,
    /// and the remaining slip lines for the current page.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Thrown if the _ledgerJournalTrans parameter contains an invalid AccountType value.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Thrown if an invalid _chequeFormType parameter value is passed in.
    /// </exception>
    public container fillSlipText(
        BankChequeTable _bankChequeTable,
        Counter _startLines,
        Counter _endLines,
        Counter _totalBankChequePaymTransLines,
        ChequeFormType _chequeFormType)
    {
        ChequeSlipTxt chequeSlipText = '';
        Counter endLines = _endLines;

        ChequeSlipTxt chequeSlipTxtTmp;
        Counter endLinesTmp;

        [chequeSlipTxtTmp, endLinesTmp] = this.determineSlipTextTitleAndEndLinesAdjustmentForChequeFormType(
            _bankChequeTable, 
            _chequeFormType);

        chequeSlipText = chequeSlipTxtTmp;
        endLines += endLinesTmp;

        Counter bankChequePaymTransLines = _startLines;

        if (_totalBankChequePaymTransLines > 0)
        {
            [chequeSlipTxtTmp, endLinesTmp] = this.determineSlipTextTitleAndEndLinesAdjustmentForChequeRecipientType(
                _bankChequeTable,
                _chequeFormType);

            chequeSlipText += chequeSlipTxtTmp;
            endLines += endLinesTmp;

            [chequeSlipTxtTmp, endLinesTmp] = this.determineSlipTextTitleAndEndLinesAdjustmentForColumnHeaders(
                _bankChequeTable,
                _chequeFormType);

            chequeSlipText += chequeSlipTxtTmp;
            endLines += endLinesTmp;

            BankChequePaymTrans bankChequePaymTrans;
            boolean subTotalPrinted = false;
            AmountCur totalAmountCur = this.getLastProcessedAmountInSlipTxt();
            RecId recIdToProcessFrom = this.getLastProcessedBankChequePaymTrans();
            CustVendChequeSlipTextCalcDeterminSlipTextForTotalParameters determinSlipTextTotalParameters = CustVendChequeSlipTextCalcDeterminSlipTextForTotalParameters::construct();

            QueryRun queryRun = new QueryRun(this.buildQueryForFillSlipText(_bankChequeTable, recIdToProcessFrom));

            while(queryRun.next())
            {
                if (endLines <= 1
                    || (endLines <= 2
                        && (_chequeFormType == ChequeFormType::MXStyle
                            || _chequeFormType == ChequeFormType::CAStyle)))
                {
                    break;
                }

                bankChequePaymTrans = queryRun.get(tableNum(BankChequePaymTrans));

                totalAmountCur -= bankChequePaymTrans.PaymentAmountCur;

                bankChequePaymTransLines++;

                [chequeSlipTxtTmp, endLinesTmp] = this.determineSlipTextAndEndLinesAdjustmentForBankChequePaymTrans(bankChequePaymTrans);
                chequeSlipText += chequeSlipTxtTmp;
                endLines += endLinesTmp;

                boolean shouldPrintSubTotal = this.shouldPrintSubTotal(endLines, bankChequePaymTransLines, _totalBankChequePaymTransLines, _chequeFormType);
                if (shouldPrintSubTotal)
                {
                    determinSlipTextTotalParameters.bankChequePaymTrans = bankChequePaymTrans;
                    determinSlipTextTotalParameters.totalAmountCur = totalAmountCur;
                    determinSlipTextTotalParameters.endLines = endLines;
                    determinSlipTextTotalParameters.recidToProcessFrom = recIdToProcessFrom;
                    determinSlipTextTotalParameters.chequeSlipTxtLabel = "@SYS7470";

                    CustVendChequeSlipTextCalcDeterminSlipTextForTotalReturn subTotalText = this.determineSlipTextTitleAndEndLinesForSubTotalOrTotal(determinSlipTextTotalParameters);
                    chequeSlipText += subTotalText.chequeSlipTxt;
                    subTotalPrinted = true;
                    endLines += subTotalText.endLines;
                }

                this.setLastProcessedBankChequePaymTrans(bankChequePaymTrans.RecId);
            }

            boolean shouldPrintTotal = this.shouldPrintTotal(subTotalPrinted, bankChequePaymTransLines, _totalBankChequePaymTransLines, _chequeFormType);

            if (shouldPrintTotal)
            {
                determinSlipTextTotalParameters.bankChequePaymTrans = null;
                determinSlipTextTotalParameters.totalAmountCur = totalAmountCur;
                determinSlipTextTotalParameters.endLines = endLines;
                determinSlipTextTotalParameters.recidToProcessFrom = recIdToProcessFrom;
                determinSlipTextTotalParameters.chequeSlipTxtLabel = "@SYS809";

                CustVendChequeSlipTextCalcDeterminSlipTextForTotalReturn totalText = this.determineSlipTextTitleAndEndLinesForSubTotalOrTotal(determinSlipTextTotalParameters);
                chequeSlipText += totalText.chequeSlipTxt;
                endLines += totalText.endLines;
            }

            this.setLastProcessedAmountInSlipTxt(totalAmountCur);
        }

        return [chequeSlipText, bankChequePaymTransLines, endLines];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastProcessedBankChequePaymTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the last processed bank cheque payment transaction record id value.
    /// </summary>
    /// <returns>
    ///     The the last processed bank cheque payment transaction record id.
    /// </returns>
    protected final RecId getLastProcessedBankChequePaymTrans()
    {
        return lastProcessedBankChequePaymTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLastProcessedBankChequePaymTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the last processed bank cheque payment transaction record id.
    /// </summary>
    /// <param name = "_bankChequePaymTrans">
    ///     The record id of <c>BankChequePaymTrans</c> table.
    /// </param>
    protected final void setLastProcessedBankChequePaymTrans(RecId _bankChequePaymTrans)
    {
        lastProcessedBankChequePaymTrans = _bankChequePaymTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastProcessedAmountInSlipTxt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the last processed amount in slip text.
    /// </summary>
    /// <returns>
    ///     The last processed payment amount in slip text.
    /// </returns>
    protected final AmountCur getLastProcessedAmountInSlipTxt()
    {
        return lastProcessedAmountInSlipTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLastProcessedAmountInSlipTxt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the last processed amount in slip text.
    /// </summary>
    /// <param name = "_totalAmountCur">
    ///     The total payment amount.
    /// </param>
    protected final void setLastProcessedAmountInSlipTxt(AmountCur _totalAmountCur)
    {
        lastProcessedAmountInSlipTxt = _totalAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForFillSlipText</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the query for a string containing the slip text for a page of a cheque report.
    /// </summary>
    /// <param name = "_bankChequeTable">
    ///     A <c>CustCollectionLetterTrans</c> table buffer.
    /// </param>
    /// <param name = "_recIdToProcessFrom">
    ///     The RecId.
    /// </param>
    /// <returns>
    ///     The query for slip text.
    /// </returns>
    [Wrappable(true)]
    protected final Query buildQueryForFillSlipText(BankChequeTable _bankChequeTable, RefRecId _recIdToProcessFrom)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsBankChequePaymTrans = query.addDataSource(tableNum(BankChequePaymTrans));
        qbdsBankChequePaymTrans.addOrderByField(fieldNum(BankChequePaymTrans, RecId));
        qbdsBankChequePaymTrans.addRange(fieldNum(BankChequePaymTrans, AccountId)).value(queryValue(_bankChequeTable.AccountID));
        qbdsBankChequePaymTrans.addRange(fieldNum(BankChequePaymTrans, ChequeNum)).value(queryValue(_bankChequeTable.ChequeNum));
        qbdsBankChequePaymTrans.addRange(fieldNum(BankChequePaymTrans, RecId)).value(
            strFmt('(%1 > %2)',
            fieldStr(BankChequePaymTrans, RecId),
            queryValue(_recIdToProcessFrom)));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSlipTextTitleAndEndLinesAdjustmentForChequeFormType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine slip text title and end lines adjustment for check form type.
    /// </summary>
    /// <param name = "_bankChequeTable">The bank check table.</param>
    /// <param name = "_chequeFormType">The check form type.</param>
    /// <returns>The slip text and the end lines adjustment.</returns>
    public container determineSlipTextTitleAndEndLinesAdjustmentForChequeFormType(
        BankChequeTable _bankChequeTable,
        ChequeFormType _chequeFormType)
    {
        ChequeSlipTxt chequeSlipText;
        Counter endLines;

        switch (_chequeFormType)
        {
            case ChequeFormType::USStyle,
                ChequeFormType::ESStyle,
                ChequeFormType::MXStyle,
                ChequeFormType::CAStyle:

                chequeSlipText = "@SYS22495" + ' ' + _bankChequeTable.ChequeNum + '\n\n';
                endLines = -2;
                break;
        }

        return [chequeSlipText, endLines];
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSlipTextTitleAndEndLinesAdjustmentForChequeRecipientType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine slip text tile and end lines adjustment for the check recipient type.
    /// </summary>
    /// <param name = "_bankChequeTable">The bank check table.</param>
    /// <param name = "_chequeFormType">The check form type.</param>
    /// <returns>The slip text and the end lines adjustment.</returns>
    public container determineSlipTextTitleAndEndLinesAdjustmentForChequeRecipientType(
        BankChequeTable _bankChequeTable,
        ChequeFormType _chequeFormType)
    {
        ChequeSlipTxt chequeSlipText;
        Counter endLines;

        switch (_bankChequeTable.RecipientType)
        {
            case BankChequeRecipientType::Vend:
                VendTable vendTable = VendTable::findByCompany(_bankChequeTable.RecipientCompany, _bankChequeTable.RecipientAccountNum);

                if (vendTable)
                {
                    chequeSlipText = strFmt('%1 : %2, %3\n', "@SYS9455", vendTable.AccountNum, vendTable.name());
                    endLines = -1;
                }

                break;

            case BankChequeRecipientType::Cust:
                CustTable custTable = CustTable::findByCompany(_bankChequeTable.RecipientCompany, _bankChequeTable.RecipientAccountNum);

                if (custTable)
                {
                    chequeSlipText = strFmt('%1 : %2, %3\n', "@SYS302", custTable.AccountNum, custTable.name());
                    endLines = -1;
                }

                break;
        }

        return [chequeSlipText, endLines];
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSlipTextTitleAndEndLinesAdjustmentForColumnHeaders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine slip text title and end lines adjustment for column headers.
    /// </summary>
    /// <param name = "_bankChequeTable">The bank check table.</param>
    /// <param name = "_chequeFormType">The check form type.</param>
    /// <returns>The slip text and the end lines adjustment.</returns>
    public container determineSlipTextTitleAndEndLinesAdjustmentForColumnHeaders(
        BankChequeTable _bankChequeTable,
        ChequeFormType _chequeFormType)
    {
        ChequeSlipTxt chequeSlipText;
        Counter endLines;

        switch (_chequeFormType)
        {
            case ChequeFormType::USStyle,
                ChequeFormType::ESStyle,
                ChequeFormType::MXStyle,
                ChequeFormType::CAStyle,
                ChequeFormType::DEStyle,
                ChequeFormType::UKStyle:

                chequeSlipText += strFmt(
                    '%1  %2  %3  %4  %5  %6\n\n',
                    "@SYS4726", "@SYS7572", "@SYS7354", "@SYS11818", "@SYS4376", "@SYS1943");
                endLines = -2;
                break;

            case ChequeFormType::DKStyle:
                chequeSlipText += strFmt(
                    '%1  %2  %3  %4  %5  %6\n',
                    "@SYS4726", "@SYS7572", "@SYS7354", "@SYS11818", "@SYS4376", "@SYS1943");
                endLines = -1;
                break;

        }

        return [chequeSlipText, endLines];
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSlipTextAndEndLinesAdjustmentForBankChequePaymTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine slip text and end lines adjustment for <c>BankChequePaymTrans</c>.
    /// </summary>
    /// <param name = "bankChequePaymTrans">The bank payment transaction.</param>
    /// <returns>The slip text and the end lines adjustment.</returns>
    protected container determineSlipTextAndEndLinesAdjustmentForBankChequePaymTrans(BankChequePaymTrans bankChequePaymTrans)
    {
        ChequeSlipTxt chequeSlipText;
        Counter endLines;

        FromDate invoiceDate = bankChequePaymTrans.InvoiceDate;
        CashDiscAmount cashDiscAmount = bankChequePaymTrans.CashDiscAmountCur;

        chequeSlipText += strFmt(
            '%1  %2  %3  %4  %5  %6\n',
            strLFix(bankChequePaymTrans.InvoiceId, 14),
            strLFix(bankChequePaymTrans.CurrencyCode, 8),
            strLFix(date2StrUsr(invoiceDate), 12),
            strRFix(num2str(-bankChequePaymTrans.InvoiceAmountCur, 0, 2, -1, -1), 12),
            strRFix(num2str(cashDiscAmount, 0, 2, -1, -1), 13),
            strRFix(num2str(-bankChequePaymTrans.PaymentAmountCur, 0, 2, -1, -1), 14));

        endLines = -1;

        return [chequeSlipText, endLines];
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPrintSubTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should print sub total.
    /// </summary>
    /// <param name = "_endLines">The count of remaining lines.</param>
    /// <param name = "_bankChequePaymTransLines">The count of the bank check payment transaction lines.</param>
    /// <param name = "_totalBankChequePaymTransLines">The count of the total bank check payment transaction lines.</param>
    /// <param name = "_chequeFormType">The check form type.</param>
    /// <returns>True when the subtotal should be printed; otherwise false.</returns>
    protected boolean shouldPrintSubTotal(Counter _endLines, Counter _bankChequePaymTransLines, Counter _totalBankChequePaymTransLines, ChequeFormType _chequeFormType)
    {
        boolean shouldPrintSubTotal = _endLines == 2
            && _totalBankChequePaymTransLines != _bankChequePaymTransLines
            && _chequeFormType == ChequeFormType::USStyle;

        return shouldPrintSubTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPrintTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should print total.
    /// </summary>
    /// <param name = "_subTotalPrinted">Identifies when the sub total has been printed.</param>
    /// <param name = "_bankChequePaymTransLines">The count of the bank check payment transaction lines.</param>
    /// <param name = "_totalBankChequePaymTransLines">The count of the total bank check payment transaction lines.</param>
    /// <param name = "_chequeFormType">The check form type.</param>
    /// <returns>True when the total should be printed; otherwise false.</returns>
    protected boolean shouldPrintTotal(boolean _subTotalPrinted, Counter _bankChequePaymTransLines, Counter _totalBankChequePaymTransLines, ChequeFormType _chequeFormType)
    {
        boolean shouldPrintTotal = !_subTotalPrinted
            && _totalBankChequePaymTransLines == _bankChequePaymTransLines
            && (_chequeFormType == ChequeFormType::USStyle
                || _chequeFormType == ChequeFormType::MXStyle
                || _chequeFormType == ChequeFormType::CAStyle);

        return shouldPrintTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnprintableReportArea</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the unprintable area that accounts for whitespaces and borders in rectangle3 and rectangle2 controls of report design.
    /// </summary>
    /// <param name = "_chequeFormType">The format used by the cheque.</param>
    [Wrappable(true)]
    protected final ChequeLength getUnprintableReportArea(ChequeFormType _chequeFormType)
    {
        const ChequeLength USUnprintableArea = 4.00;
        const ChequeLength DefaultUnprintableArea = 11.34;
        ChequeLength unprintableArea;

        switch (_chequeFormType)
        {
            case ChequeFormType::USStyle:
                unprintableArea = USUnprintableArea;
                break;

            default:
                unprintableArea = DefaultUnprintableArea;
                break;
        }

        return unprintableArea;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSingleSlipLine</Name>
				<Source><![CDATA[
	/// <summary>
    /// Initializes the values for <c>CustVendChequeSlipTextSingleSlipLinesCalculateReturn</c> class variables.
    /// </summary>
    /// <param name = "_args">
    /// The instance of <c>CustVendChequeSlipTextSingleSlipLinesCalculateParameters</c> class.
	/// </param>
    /// <returns>
    /// Returns instance and initializes the values for <c>CustVendChequeSlipTextSingleSlipLinesCalculateReturn</c> class variables.
	/// </returns>
    protected CustVendChequeSlipTextSingleSlipLinesCalculateReturn calculateSingleSlipLine(CustVendChequeSlipTextSingleSlipLinesCalculateParameters _args)
    {
        CustVendChequeSlipTextSingleSlipLinesCalculateReturn calculationResult = CustVendChequeSlipTextSingleSlipLinesCalculateReturn::construct();

        if (_args.areaAboveChequeLength > _args.areaBelowChequeLength)
        {
            calculationResult.slipTop1 = 0;
            calculationResult.slipTextArea = _args.areaAboveChequeLength;
            calculationResult.chequeTopDropLines = 0;
        }
        else
        {
            const real AmplifyingFactor = 100.0;

            calculationResult.slipTop1 = real2int((_args.areaAboveChequeLength + _args.chequeDocLength) * AmplifyingFactor);
            calculationResult.slipTextArea = _args.areaBelowChequeLength;
            calculationResult.chequeTopDropLines = this.getMaxSlipLines(_args.areaAboveChequeLength);;
        }

        return calculationResult;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>