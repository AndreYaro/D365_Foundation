<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFDIWithholdingGenerate_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>CFDIWithholdingGenerate_MX</c> class is the entry point to generate CFDI withholding journal.
/// </summary>
public class CFDIWithholdingGenerate_MX extends RunBaseBatch implements BatchRetryable
{
    TransDate fromDate;
    TransDate toDate;
    VendAccount vendAccount;

    DialogField dialogFromDate;
    DialogField dialogToDate;
    DialogField dialogVendAccount;
    DialogField dialogWithholdingType;

    FiscalCalendarRecId fiscalCalendar;

    private const int currentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createEInvoiceJour</Name>
				<Source><![CDATA[
    private void createEInvoiceJour(Map _withholdingJournalRecIdMap)
    {
        CFDIWithholdingXMLFormat_MX xmlFormat;
        MapEnumerator me = _withholdingJournalRecIdMap.getEnumerator();

        while (me.moveNext())
        {
            xmlFormat = CFDIWithholdingXMLFormat_MX::construct();

            EInvoiceCFDIParameters_MX params = EInvoiceCFDIParameters_MX::find();
            CFDIWithholdingJour_MX withholdingJour= CFDIWithholdingJour_MX::find(me.currentValue());

            EInvoiceJour_MX eInvoiceJour;
            eInvoiceJour.cfdi = true;
            eInvoiceJour.CertificateSubject = params.CertificateSubject;
            eInvoiceJour.cfdiStatus = EInvoiceCFDIStatus_MX::Blank;
            eInvoiceJour.cfdiMessageType = EInvoiceCFDIMessageType_MX::Submit;
            eInvoiceJour.cfdiMessageStatus = EInvoiceCFDIMessageStatus_MX::Waiting;
            eInvoiceJour.RefTableId = withholdingJour.TableId;
            eInvoiceJour.RefRecId = withholdingJour.RecId;
            eInvoiceJour.InvoiceDateTime = withholdingJour.createdDateTime;
            eInvoiceJour.CFDIDocType = CFDIDocType_MX::Withholding;

            [eInvoiceJour.xmlDoc, eInvoiceJour.cfdiOriginalString] = this.generateXML(xmlFormat, eInvoiceJour);

            eInvoiceJour.insert();

            info(strFmt("@MexicoCFDIWithholding:CFDIWithholdingJournalCreated_info", vendAccount, me.currentKey()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogFromDate = dialog.addFieldValue(extendedTypeStr(TransDate), fromDate, "@SYS5209");
        dialogFromDate.control().registerOverrideMethod(methodStr(FormDateControl, modified), methodStr(CFDIWithholdingGenerate_MX, fromDateModified), this);

        dialogToDate = dialog.addFieldValue(extendedTypeStr(TransDate), toDate, "@SYS14656");
        dialogToDate.control().registerOverrideMethod(methodStr(FormDateControl, modified), methodStr(CFDIWithholdingGenerate_MX, toDateModified), this);

        dialogVendAccount = dialog.addFieldValue(extendedTypeStr(VendAccount), vendAccount);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDateModified</Name>
				<Source><![CDATA[
    private boolean fromDateModified(FormDateControl _fromDateControl)
    {
        boolean returnValue = _fromDateControl.modified();

        if (returnValue)
        {
            FromDate currentDate = _fromDateControl.dateValue();

            if (!FiscalCalendarYear::findYearByCalendarDate(fiscalCalendar, currentDate))
            {
                currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }

            FromDate startPeriodDate = LedgerFiscalCalendar::findFirstDayofPeriod(fiscalCalendar, currentDate);

            if (currentDate && startPeriodDate && currentDate != startPeriodDate)
            {
                info(strFmt("@MexicoCFDIWithholding:FromDateChanged_info", _fromDateControl.dateValue(), startPeriodDate));
            }

            if (startPeriodDate && currentDate != startPeriodDate)
            {
                _fromDateControl.dateValue(startPeriodDate);
                _fromDateControl.update();
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXML</Name>
				<Source><![CDATA[
    private container generateXML(CFDIWithholdingXMLFormat_MX _xmlFormat, EInvoiceJour_MX _eInvoiceJour)
    {
        CFDIWithholdingJour_MX withholdingJour = CFDIWithholdingJour_MX::find(_eInvoiceJour.RefRecId);
        int64 linesCount = this.getLinesCount(withholdingJour);
        XMLDocument xmlDocument;
        str originalString;

        System.Diagnostics.Stopwatch stopwatch = System.Diagnostics.Stopwatch::StartNew();

        try
        {
            _xmlFormat.generateXML(_eInvoiceJour, withholdingJour);
        }

        catch
        {
            stopwatch.Stop();
            this.updateTelemetry(
                false,
                linesCount,
                stopwatch.ElapsedMilliseconds);
            throw Exception::Error;
        }

        finally
        {
            stopwatch.Stop();
            xmlDocument = _xmlFormat.getXMLDocument();
            originalString = _xmlFormat.getOriginalString();
            this.updateTelemetry(
                originalString != '',
                linesCount,
                stopwatch.ElapsedMilliseconds);
        }

        return [xmlDocument.toString(), originalString];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        fromDate = dialogFromDate.value();
        toDate = dialogToDate.value();
        vendAccount = dialogVendAccount.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();
        TransDate currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        fromDate = FiscalCalendars::findFirstDayofYear(fiscalCalendar, currentDate);
        toDate = FiscalCalendars::findLastDayofYear(fiscalCalendar, currentDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        fiscalCalendar = Ledger::fiscalCalendar(CompanyInfo::current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, fromDate, toDate, vendAccount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendAccount</Name>
				<Source><![CDATA[
    public VendAccount parmVendAccount(VendAccount _vendAccount = vendAccount)
    {
        vendAccount = _vendAccount;

        return vendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (this.validatePrerequisites())
        {
            ttsBegin;

            CFDIWithholdingJourCreator_MX withholdingJourCreator = CFDIWithholdingJourCreator_MX::newFromPeriodAndVendor(fromDate, toDate, vendAccount);
            withholdingJourCreator.create();
            Map withholdingJournalRecIdMap = withholdingJourCreator.getWithholdingJournalRecIdMap();

            if (withholdingJournalRecIdMap.empty())
            {
                info("@MexicoCFDIWithholding:NoTaxTransactionsSelected_info");
            }
            else
            {
                this.createEInvoiceJour(withholdingJournalRecIdMap);
            }

            ttsCommit;

            info("@MexicoCFDIWithholding:CFDIWithholdingJournalGenerationCompleted_info");
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>toDateModified</Name>
				<Source><![CDATA[
    private boolean toDateModified(FormDateControl _toDateControl)
    {
        boolean returnValue = _toDateControl.modified();

        if (returnValue)
        {
            ToDate currentDate = _toDateControl.dateValue();

            if (!FiscalCalendarYear::findYearByCalendarDate(fiscalCalendar, currentDate))
            {
                currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());;
            }

            ToDate endPeriodDate = LedgerFiscalCalendar::findLastDayofPeriod(fiscalCalendar, currentDate);

            if (currentDate && endPeriodDate && currentDate != endPeriodDate)
            {
                info(strFmt("@MexicoCFDIWithholding:ToDateChanged_info", _toDateControl.dateValue(), endPeriodDate));
            }

            if (endPeriodDate && currentDate != endPeriodDate)
            {
                _toDateControl.dateValue(endPeriodDate);
                _toDateControl.update();
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret = true;
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case currentVersion:
                [version, fromDate, toDate, vendAccount] = packedClass;
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = true;

        if (!fromDate)
        {
            ret = checkFailed(strFmt("@GLS223025", "@SYS5209"));
        }

        if (ret && !toDate)
        {
            ret = checkFailed(strFmt("@GLS223025", "@SYS14656"));
        }

        if (ret && !vendAccount)
        {
            ret = checkFailed(strFmt("@GLS223025", "@SYS14048"));
        }

        if (ret && fromDate > toDate)
        {
            ret = checkFailed(strFmt("@GLS221292"));
        }

        if (ret && !FiscalCalendars::areDatesInSameFiscalYear(CompanyInfoHelper::fiscalCalendarRecId(), fromDate, toDate))
        {
            ret = checkFailed("@SYS693");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePrerequisites</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates prerequisites.
    /// </summary>
    /// <returns>
    /// Returns true if prerequisites are ok; false otherwise.
    /// </returns>
    protected boolean validatePrerequisites()
    {
        boolean ret = true;

        if (!EinvoiceCFDIParameters_MX::isCFDIWithholdingEnabled())
        {
            ret = checkFailed("@MexicoCFDIWithholding:CFDIWithholdingNotEnabled_error");
        }

        if (ret && !CertificateHelper_MX::isCurrentCFDIPrivateKeyReadable())
        {
            ret = checkFailed("@SYS341994");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CFDIWithholdingGenerate_MX withholdingJourGenerate = new CFDIWithholdingGenerate_MX();

        if (withholdingJourGenerate.prompt())
        {
            withholdingJourGenerate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinesCount</Name>
				<Source><![CDATA[
    private int64 getLinesCount(CFDIWithholdingJour_MX _withholdingJour)
    {
        int64 linesCount;
        CFDIWithholdingComplementType_MX withholdingComplementType = CFDIWithholdingType_MX::find(_withholdingJour.WithholdingTypeCode).ComplementType;

        switch (withholdingComplementType)
        {
            case CFDIWithholdingComplementType_MX::Interests:

                linesCount = (select count(RecId) from CFDIWithholdingComplInterest_MX
                    where CFDIWithholdingComplInterest_MX.WithholdingJourRecId == _withholdingJour.RecId).RecId;
                break;

            case CFDIWithholdingComplementType_MX::ForeignResidentPaym:

                linesCount = (select count(RecId) from CFDIWithholdingComplPaymBeneficiary_MX
                    where CFDIWithholdingComplPaymBeneficiary_MX.WithholdingJourRecId == _withholdingJour.RecId).RecId;
                break;
        }

        return linesCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTelemetry</Name>
				<Source><![CDATA[
    private void updateTelemetry(
        boolean _result,
        int64 _linesCount,
        int64 _elapsedTime)
    {
        real elapsedTimePerLine = _linesCount ? _elapsedTime / _linesCount : 0;

        GlobalizationInstrumentationHelper::featureRunWithPerformance(
                GlobalizationConstants::FeatureReferenceMX00012,
                funcName(),
                GlobalizationInstrumentationHelper::DefaultFeatureVersion,
                SysCountryRegionCode::countryInfo(),
                _elapsedTime,
                false,
                _result,
                elapsedTimePerLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>