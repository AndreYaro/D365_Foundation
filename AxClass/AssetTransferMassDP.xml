<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTransferMassDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>AssetTransferMassDP</c> class preprocesses and inserts data into the temp table for the SSRS report <c>AssetTransferMassReport</c>.
/// </summary>
[
    SRSReportParameterAttribute(classStr(AssetTransferMassReportContract)),
    SRSReportQueryAttribute(queryStr(AssetTransferMass))
]
public class AssetTransferMassDP extends SRSReportDataProviderPreProcessTempDB
{
    AssetTransferMassTmp assetTransferMassTmp;
    CreatedTransactionId createdTransactionId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetTransferMassTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    ///     The temporary table <c>AssetTransferMassTmp</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute('AssetTransferMassTmp')
    ]
    public AssetTransferMassTmp getAssetTransferMassTmp()
    {
        new SkipAOSValidationPermission().assert();

        select * from assetTransferMassTmp
            where assetTransferMassTmp.createdTransactionId == createdTransactionId;

        CodeAccessPermission::revertAssert();

        return assetTransferMassTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreatedTransactionId</Name>
				<Source><![CDATA[
    private CreatedTransactionId getCreatedTransactionId()
    {
        AssetTransferMassTmp transTmp;
        UserConnection connection = this.parmUserConnection();

        // The kernel currently doesn't provide a way to get the createdtransactionid value when
        // set on a secondary userconnection. The only workaround is to physically insert a record
        // and see what value it received, then delete that record.
        this.setUserConnection(transTmp);

        transTmp.insert();
        createdTransactionId = transTmp.CreatedTransactionId;

        if (connection)
        {
            transTmp.delete();
        }
        else
        {
            transTmp.delete();
        }

        return createdTransactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionAttributeSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the concatenated <c>DimensionDisplayValue</c> value of the dimenion attibutes.
    /// </summary>
    /// <returns>
    ///     The <c>DimensionDisplayValue</c> string of the dimension attributes.
    /// </returns>
    protected DimensionDisplayValue getDimensionAttributeSet()
    {
        DimensionEnumeration        dimensionSetId;
        DimensionDisplayValue       dimensionOrder;
        DimensionAttribute          dimensionAttribute;
        DimensionAttributeSetItem   dimnsionAttributeSetItem;

        dimensionOrder = '';
        dimensionSetId = DimensionCache::getDimensionAttributeSetForLedger();

        while select Name from dimensionAttribute
            order by Name
                where dimensionAttribute.Type != DimensionAttributeType::MainAccount
            join RecId from dimnsionAttributeSetItem
                where dimnsionAttributeSetItem.DimensionAttribute == dimensionAttribute.RecId
                   && dimnsionAttributeSetItem.DimensionAttributeSet == dimensionSetId
        {
            dimensionOrder = strFmt('%1-%2', dimensionOrder, dimensionAttribute.Name);
        }

        if (strLen(dimensionOrder) > 0)
        {
            dimensionOrder = subStr(dimensionOrder, 2, strLen(dimensionOrder));
        }

        return dimensionOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionAttributeValueSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the concatenated <c>DimensionDisplayValue</c> value of the dimenion attibute values for the given default dimension.
    /// </summary>
    /// <param name="_defaultDimension">
    ///     Reference of the default dimension to get the value string.
    /// </param>
    /// <returns>
    ///     The <c>DimensionDisplayValue</c> string of the dimension attribute value set items.
    /// </returns>
    protected DimensionDisplayValue getDimensionAttributeValueSet(DimensionDefault _defaultDimension)
    {
        DimensionDisplayValue               displayValue;
        DimensionAttribute                  dimensionAttribute;
        DimensionAttributeValueSetItemView  dimensionAttributeValueSetItemView;

        displayValue = '';

        while select DisplayValue from dimensionAttributeValueSetItemView
            where dimensionAttributeValueSetItemView.DimensionAttributeValueSet == _defaultDimension
            join RecId from dimensionAttribute
                order by dimensionAttribute.Name
                where dimensionAttributeValueSetItemView.DimensionAttribute == dimensionAttribute.RecId
        {
            displayValue = strFmt('%1-%2', displayValue, dimensionAttributeValueSetItemView.DisplayValue);
        }

        if (strLen(displayValue) > 0)
        {
            displayValue = subStr(displayValue, 2, strLen(displayValue));
        }

        return displayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSourceDimensionField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates the source dimension field of the <c>AssetTransferMassTmp</c> temporary table.
    /// </summary>
    public void populateSourceDimensionField()
    {
        AssetTransferMassTmp            localAssetTransferMassTmp;

        DimensionDisplayValue           dimensionOrder;
        DimensionAttribute              dimensionAttribute;
        DimensionAttributeValue         dimensionAttributeValue;
        DimensionAttributeValueSetItem  dimensionAttributeValueSetItem;

        int                             counter = 0;
        Name                            dimensionName;
        ListEnumerator                  listEnumerator;
        List                            dimensionAttrNames;

        dimensionOrder      = this.getDimensionAttributeSet();
        dimensionAttrNames  = con2List(str2con(dimensionOrder, '-'));
        listEnumerator      = dimensionAttrNames.getEnumerator();

        while (listEnumerator.moveNext())
        {
            dimensionName = listEnumerator.current();

            update_recordset assetTransferMassTmp
                setting
                    DimensionSource = localAssetTransferMassTmp.DimensionSource +
                        (counter ? '-': '') +
                        dimensionAttributeValueSetItem.DisplayValue
                    where assetTransferMassTmp.createdTransactionId == createdTransactionId
                join localAssetTransferMassTmp
                    where localAssetTransferMassTmp.AssetId == assetTransferMassTmp.AssetId
                        && localAssetTransferMassTmp.BookId == assetTransferMassTmp.BookId
                        && localAssetTransferMassTmp.createdTransactionId == createdTransactionId
                join DisplayValue from dimensionAttributeValueSetItem
                    where dimensionAttributeValueSetItem.DimensionAttributeValueSet == localAssetTransferMassTmp.DefaultDimension
                join RecId from dimensionAttributeValue
                    where dimensionAttributeValueSetItem.DimensionAttributeValue == dimensionAttributeValue.RecId
                join RecId from dimensionAttribute
                    where dimensionAttributeValue.DimensionAttribute == dimensionAttribute.RecId
                        && dimensionAttribute.Name == dimensionName;

            counter++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the record based on the selected criteria and populate the data into <c>AssetTransferMassTmp</c> table of the report.
    /// </summary>
    public void processReport()
    {
        AssetBook                           assetBook;
        AssetTrans                          assetTrans;
        AssetTransferMassStagingTmp         assetTransferMassStagTmp;

        AssetTransferMassReportContract     contract;
        RecordInsertList                    recordInsertList;

        Query                               query;
        QueryRun                            queryRun;
        QueryBuildDataSource                assetBookDataSource;
        QueryBuildDataSource                assetTableDataSource;

        DimensionDisplayValue               dimensionOrder;
        DimensionDisplayValue               dimensionTarget;

        this.setUserConnection(assetTransferMassTmp);
        this.setUserConnection(assetTransferMassStagTmp);
        createdTransactionId = this.getCreatedTransactionId();

        query           = this.parmQuery();
        dimensionOrder  = this.getDimensionAttributeSet();
        contract        = this.parmDataContract() as AssetTransferMassReportContract;
        dimensionTarget = this.getDimensionAttributeValueSet(contract.parmTargetDefaultDimension());

        if (!SysQuery::queryHasRangesOrFilters(query, true))
        {
            // Using AssetTrans Table because all of the Asset that we'll be transferring or showing on report
            // are all acquired ones and there would always be a corresponding record in AssetTrans table.
            insert_recordset assetTransferMassTmp
                (AssetID, BookId, AssetGroup, TransferValue, DimensionOrder, DimensionTarget, DefaultDimension)
                select AssetId, BookId, AssetGroup, sum(AmountMST) from assetTrans
                    group by assetTrans.AssetId, assetTrans.BookId, assetTrans.AssetGroup, assetBook.DefaultDimension
                    where (assetTrans.TransType     == AssetTransType::Acquisition
                        || assetTrans.TransType     == AssetTransType::AcquisitionAdj
                        || assetTrans.TransType     == AssetTransType::DisposalSale
                        || assetTrans.TransType     == AssetTransType::DisposalScrap
                        || assetTrans.TransType     == AssetTransType::Depreciation
                        || assetTrans.TransType     == AssetTransType::DepreciationAdj
                        || assetTrans.TransType     == AssetTransType::ExtraordinaryDepreciation
                        || assetTrans.TransType     == AssetTransType::BonusDepreciation
                        || assetTrans.TransType     == AssetTransType::Revaluation
                        || assetTrans.TransType     == AssetTransType::WriteUpAdj
                        || assetTrans.TransType     == AssetTransType::WriteDownAdj
                        || assetTrans.TransType     == AssetTransType::CapitalReserve
                        || assetTrans.TransType     == AssetTransType::CapitalReserveTransfer
                        || assetTrans.TransType     == AssetTransType::ProfitLoss)
                    join dimensionOrder, dimensionTarget, DefaultDimension from assetBook
                        where assetBook.BookId      == assetTrans.BookId
                            && assetBook.AssetId    == assetTrans.AssetId
                            && assetBook.Status     == AssetStatus::Open;

            this.populateSourceDimensionField();
        }
        else
        {
            new SkipAOSValidationPermission().assert();
            recordInsertList = new RecordInsertList(tableNum(AssetTransferMassTmp), true, true, true, true, true, assetTransferMassTmp);

            // Removing the extra fields to improve performance
            assetTableDataSource    = query.dataSourceTable(tableNum(AssetTable));
            assetBookDataSource     = query.dataSourceTable(tableNum(AssetBook));

            assetTableDataSource.fields().clearFieldList();
            assetBookDataSource.fields().clearFieldList();

            assetTableDataSource.fields().addField(fieldNum(AssetTable, AssetId));

            assetBookDataSource.fields().addField(fieldNum(AssetBook, AssetId));
            assetBookDataSource.fields().addField(fieldNum(AssetBook, BookId));
            assetBookDataSource.fields().addField(fieldNum(AssetBook, DefaultDimension));
            assetBookDataSource.fields().addField(fieldNum(AssetBook, AssetGroup));

            assetBookDataSource.addSortIndex(indexNum(AssetBook, AssetBookIdx));

            queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                if (queryRun.changed(tableNum(AssetBook)))
                {
                    assetBook = queryRun.get(tableNum(AssetBook)) as AssetBook;

                    assetTransferMassTmp.clear();
                    assetTransferMassTmp.AssetId            = assetBook.AssetId;
                    assetTransferMassTmp.BookId             = assetBook.BookId;
                    assetTransferMassTmp.AssetGroup         = assetBook.AssetGroup;
                    assetTransferMassTmp.DefaultDimension   = assetBook.DefaultDimension;

                    recordInsertList.add(assetTransferMassTmp);
                }
            }

            recordInsertList.insertDatabase();

            insert_recordset assetTransferMassStagTmp (AssetId, BookId, TransferValue)
                    select AssetId, Bookid, sum(AmountMST) from assetTrans
                    group by assetTrans.AssetId, assetTrans.BookId
                    where  (assetTrans.TransType        == AssetTransType::Acquisition
                            || assetTrans.TransType     == AssetTransType::AcquisitionAdj
                            || assetTrans.TransType     == AssetTransType::DisposalSale
                            || assetTrans.TransType     == AssetTransType::DisposalScrap
                            || assetTrans.TransType     == AssetTransType::Depreciation
                            || assetTrans.TransType     == AssetTransType::DepreciationAdj
                            || assetTrans.TransType     == AssetTransType::ExtraordinaryDepreciation
                            || assetTrans.TransType     == AssetTransType::BonusDepreciation
                            || assetTrans.TransType     == AssetTransType::Revaluation
                            || assetTrans.TransType     == AssetTransType::WriteUpAdj
                            || assetTrans.TransType     == AssetTransType::WriteDownAdj
                            || assetTrans.TransType     == AssetTransType::CapitalReserve
                            || assetTrans.TransType     == AssetTransType::CapitalReserveTransfer
                            || assetTrans.TransType     == AssetTransType::ProfitLoss)
                    exists join assetTransferMassTmp
                    where assetTransferMassTmp.BookId == assetTrans.BookId
                        && assetTransferMassTmp.AssetId == assetTrans.AssetId
                        && assetTransferMassTmp.createdTransactionId == createdTransactionId;

            update_recordset assetTransferMassTmp
                    setting
                        TransferValue = assetTransferMassStagTmp.TransferValue,
                        DimensionOrder = dimensionOrder,
                        DimensionTarget = dimensionTarget
                    where assetTransferMassTmp.createdTransactionId == createdTransactionId
                    join TransferValue from assetTransferMassStagTmp
                        where assetTransferMassStagTmp.BookId == assetTransferMassTmp.BookId
                            && assetTransferMassStagTmp.AssetId == assetTransferMassTmp.AssetId;

            this.populateSourceDimensionField();
            CodeAccessPermission::revertAssert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserConnection</Name>
				<Source><![CDATA[
    private void setUserConnection(Common _common)
    {
        // If the DP is launched from a caller other than SRS then the user connection may not be set
        // In these cases the buffers should use the default connection
        // and this code should not set the connection.
        UserConnection con = this.parmUserConnection();
        if (con)
        {
            _common.setConnection(con);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>