<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailAssetLibraryHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Linq;
using System.Collections.Generic;
using System.Security.Cryptography.X509Certificates;
using Microsoft.Dynamics.Commerce.Deployment.RetailLcsClient;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailAssetLibraryHelper</c> class provides methods that are being used in LCS Asset Library.
/// </summary>
internal class RetailAssetLibraryHelper
{
    // List of const defined by LCS.
    private const int SelfServiceAssetType = 28;
    private const int SelfServicePackageTypePropertyId = 35;
    private const int RetailVersionPropId = 34;
    private const int CompanyNamePropId = 37;

    // Default top paging.
    private const int DefaultTop = 100;

    private AssetLibraryProxy assetLibProxy;
    private int64 lcsProjectId = 0;
    private int projectAssetsFound = 0;
    private int sharedAssetsFound = 0;

    private const str StatusCodeStr = 'StatusCode';
    private const str ResponseMessageStr = 'ResponseMessage';
    private const str ParseErrorMesageStr = 'ParseErrorMesage';
    private const str ExceptionMessageStr = 'ExceptionMessage';
    private const str StackTraceStr = 'StackTrace';
    private const str ActivityIdStr = 'ActivityId';

    private static CommerceHQEventSource logger = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of <c>RetailAssetLibraryHelper</c>.
    /// </summary>
    /// <param name = "certificate">The LCS certificate.</param>
    /// <param name = "lcsEndpoint">The LCS endpoint url.</param>
    /// <param name = "projectId">The LCS project identifier.</param>
    internal void new(X509Certificate2 certificate, System.Uri lcsEndpoint, int64 projectId = 0)
    {
        if (!certificate)
        {
            throw new System.ArgumentNullException('certificate');
        }
        else if (!lcsEndpoint)
        {
            throw new System.ArgumentNullException('lcsEndpoint');
        }

        this.assetLibProxy = new AssetLibraryProxy(certificate, lcsEndpoint);
        this.lcsProjectId = projectId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the LCS project identifier.
    /// </summary>
    /// <returns>The LCS project identifier.</returns>
    internal int64 getProjectId()
    {
        return this.lcsProjectId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectAssetsFound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of project assets found on LCS Asset library.
    /// </summary>
    /// <returns>The number of project assets found.</returns>
    internal int getProjectAssetsFound()
    {
        return this.projectAssetsFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSharedAssetsFound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of shared assets found on LCS Asset library.
    /// </summary>
    /// <returns>The number of shared assets found.</returns>
    internal int getSharedAssetsFound()
    {
        return this.sharedAssetsFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAssetsFound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the number of assets found.
    /// </summary>
    internal void resetAssetsFound()
    {
        this.projectAssetsFound = 0;
        this.sharedAssetsFound = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjectIdFromEnvironmentCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the project identifier associated with this environment certificate.
    /// </summary>
    internal void setProjectIdFromEnvironmentCertificate()
    {
        try
        {
            logger.EventWriteSelfServiceGetProjectIdBegin();
            this.lcsProjectId = this.assetLibProxy.GetProjectIdAsync().Result;
            logger.EventWriteSelfServiceGetProjectIdEnd();
        }
        catch (Exception::CLRError)
        {
            System.Exception clrException = RetailUtilities::getLatestClrException();

            if (clrException is LcsServerException)
            {
                LcsServerException lcsException = clrException as LcsServerException;
                Map expProps = this.getLcsExceptionProperties(lcsException);

                if (lcsException.LcsActivityId != System.Guid::Empty)
                {
                    Global::warning(strFmt("@RetailSelfServiceInstaller:LcsActivityIdMessage", lcsException.LcsActivityId));
                }

                logger.EventWriteSelfServiceGetProjectIdFailed(
                    expProps.lookup(StatusCodeStr),
                    expProps.lookup(ActivityIdStr),
                    expProps.lookup(ResponseMessageStr),
                    expProps.lookup(ParseErrorMesageStr),
                    expProps.lookup(ExceptionMessageStr),
                    expProps.lookup(StackTraceStr));
            }
            else
            {
                logger.EventWriteSelfServiceGetProjectIdFailed(
                    '',
                    System.Guid::Empty,
                    '',
                    '',
                    clrException.Message,
                    clrException.StackTrace);
            }

            throw clrException;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePackageDownloadLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate a Url download link for user to download the selected package.
    /// </summary>
    /// <param name = "mergedPackagesRecId">The record identifier from table <c>RetailSelfServiceMergedPackages</c>.</param>
    /// <returns>A url for user to download the self-service installer package.</returns>
    internal str generatePackageDownloadLink(RefRecId mergedPackagesRecId)
    {
        str downloadLink;
        str exceptionMessage;

        logger.EventWriteSelfServiceGenerateLcsPackageDownloadLinkBegin(mergedPackagesRecId);

        // Get download link from LCS table (RetailSelfServicePackageLcsInfo)
        RetailSelfServicePackageLcsInfo lcsTable;
        RetailSelfServiceMergedPackages mergedPackagesTable;

        select firstonly lcsTable
        join mergedPackagesTable
        where mergedPackagesTable.RecId == mergedPackagesRecId
            && mergedPackagesTable.PackageOrigin == RetailSelfServicePackageOrigin::Lcs
            && lcsTable.RecId == mergedPackagesTable.TableReferenceId;

        if (!lcsTable)
        {
            // Association is not found on tables RetailSelfServiceMergedPackages.
            exceptionMessage = strFmt("@RetailSelfServiceInstaller:AssociationNotFoundOnTable", tableStr(RetailSelfServicePackageLcsInfo),
                tableStr(RetailSelfServiceMergedPackages), mergedPackagesRecId);
            logger.EventWriteSelfServiceGenerateLcsPackageDownloadLinkFailed(mergedPackagesRecId, exceptionMessage, System.Environment::StackTrace);
            throw Global::error(exceptionMessage);
        }
        else
        {
            System.Guid assetGuid = lcsTable.FileAssetId;
            FileAsset asset;

            if (lcsTable.IsCustomizationPackage)
            {
                // Customization package is from the project asset library.
                if (this.lcsProjectId <= 0)
                {
                    // Value 'LCS.ProjectId' on AOS configuration file is not a number
                    // or not a positive, nonzero number.
                    exceptionMessage = "@RetailSelfServiceInstaller:MissingProjectId";
                    logger.EventWriteSelfServiceGenerateLcsPackageDownloadLinkFailed(mergedPackagesRecId, exceptionMessage, System.Environment::StackTrace);
                    throw Global::error(exceptionMessage);
                }
                else
                {
                    // Get the project asset library.
                    asset = this.getProjectAssetDetails(this.lcsProjectId, assetGuid);
                }
            }
            else
            {
                // Otherwise, package is from shared asset library.
                asset = this.getSharedAssetDetails(assetGuid);
            }

            if (!asset)
            {
                // Cannot get FileAsset instance given the asset guid.
                exceptionMessage = strFmt("@RetailSelfServiceInstaller:AssetIdNotFound", assetGuid);
                logger.EventWriteSelfServiceGenerateLcsPackageDownloadLinkFailed(mergedPackagesRecId, exceptionMessage, System.Environment::StackTrace);
                throw Global::error(exceptionMessage);
            }

            downloadLink = asset.FileLocation;
        }

        logger.EventWriteSelfServiceGenerateLcsPackageDownloadLinkEnd(mergedPackagesRecId);
        return downloadLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshLcsSharedAssets</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the updated shared assets from LCS asset library.
    /// </summary>
    /// <param name = "packageType">The package type.</param>
    /// <param name = "refreshAssetLocationurl">True if user wants to download the asset file immediately, false otherwise.</param>
    /// <param name = "validStatusOnly">True if user wants to get the validated assets only, false otherwise.</param>
    /// <param name = "beginCreatedDatetime">The start range of asset created date and time.</param>
    /// <param name = "endCreatedDatetime">The end range of asset created date and time.</param>
    internal void refreshLcsSharedAssets(PackageType packageType, boolean refreshAssetLocationurl, boolean validStatusOnly,
        utcdatetime beginCreatedDatetime, utcdatetime endCreatedDatetime)
    {
        this.refreshLcsAssets(0, packageType, SelfServiceAssetType, false, false, beginCreatedDatetime, endCreatedDatetime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshLcsProjectAssets</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the updated project assets from LCS asset library.
    /// </summary>
    /// <param name = "packageType">The package type.</param>
    /// <param name = "refreshAssetLocationurl">True if user wants to download the asset file immediately, false otherwise.</param>
    /// <param name = "validStatusOnly">True if user wants to get the validated assets only, false otherwise.</param>
    /// <param name = "beginCreatedDatetime">The start range of asset created date and time.</param>
    /// <param name = "endCreatedDatetime">The end range of asset created date and time.</param>
    internal void refreshLcsProjectAssets(PackageType packageType, boolean refreshAssetLocationurl, boolean validStatusOnly,
        utcdatetime beginCreatedDatetime, utcdatetime endCreatedDatetime)
    {
        if (this.lcsProjectId <= 0)
        {
            throw Global::error("@RetailSelfServiceInstaller:MissingProjectId");
        }
        else
        {
            this.refreshLcsAssets(this.lcsProjectId, packageType, SelfServiceAssetType, false, false, beginCreatedDatetime, endCreatedDatetime);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshLcsAssets</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the updated assets from LCS asset library.
    /// </summary>
    /// <param name = "projectId">The project identifier, if asset belongs to project asset library.</param>
    /// <param name = "packageType">The package type.</param>
    /// <param name = "assetType">The asset type.</param>
    /// <param name = "refreshAssetLocationurl">True if user wants to download the asset file immediately, false otherwise.</param>
    /// <param name = "validStatusOnly">True if user wants to get the validated assets only, false otherwise.</param>
    /// <param name = "beginCreatedDatetime">The start range of asset created date and time.</param>
    /// <param name = "endCreatedDatetime">The end range of asset created date and time.</param>
    private void refreshLcsAssets(int64 projectId, PackageType packageType, int assetType, boolean refreshAssetLocationurl, boolean validStatusOnly,
        utcdatetime beginCreatedDatetime, utcdatetime endCreatedDatetime)
    {
        boolean continuePaging = true;
        int skip = 0;
        int top = DefaultTop;

        // Define asset filter
        FileAssetFilter assetFilter = new FileAssetFilter();
        assetFilter.AssetType = assetType;
        assetFilter.RefreshAssetLocationUrl = refreshAssetLocationUrl;
        assetFilter.BeginCreatedDatetime = beginCreatedDatetime;
        assetFilter.EndCreatedDatetime = endCreatedDatetime;
        assetFilter.ValidStatusOnly = validStatusOnly;
        assetFilter.IncludeAssetProperties = true;

        // Define asset filter with the given package type
        List propList = new List(Types::AnyType);
        FileAssetProperty assetProp = new FileAssetProperty();
        assetProp.FileTypePropertyId = SelfServicePackageTypePropertyId;
        assetProp.PropertyValue = int2Str(enum2int(packageType));

        System.Collections.Generic.List<FileAssetProperty> propertyList = new System.Collections.Generic.List<FileAssetProperty>();
        propertyList.Add(assetProp);
        System.Reflection.PropertyInfo propertyFilter = assetFilter.GetType().GetProperty('PropertyFilter');
        propertyFilter.SetValue(assetFilter, propertyList);

        int newAssetsFound = 0;
        int assetsUpdated = 0;

        while (continuePaging)
        {
            assetFilter.Skip = skip;
            assetFilter.Top = top;
            CLRObject assetResultList;

            if (projectId > 0)
            {
                // Get project asset library.
                assetResultList = this.getProjectAssets(projectId, assetFilter, packageType);
            }
            else
            {
                // Get shared asset library.
                assetResultList = this.getSharedAssets(assetFilter, packageType);
            }

            if (!assetResultList)
            {
                return;
            }

            CLRObject assetResultListEnumerator = assetResultList.getEnumerator();
            int elementCount = 0;

            Map assetDictionary = new Map(Types::Guid, Types::AnyType);
            str assetQueryVal = '';

            // Store assets in a dictionary.
            while (assetResultListEnumerator.moveNext())
            {
                FileAsset asset = assetResultListEnumerator.get_Current();
                assetDictionary.insert(asset.Id, asset);
                assetQueryVal = assetQueryVal + ',' + guid2Str(asset.Id);

                ++elementCount;
            }

            continuePaging = elementCount == top;
            skip = skip + top;

            if (assetDictionary.empty())
            {
                break;
            }

            assetQueryVal = strDel(assetQueryVal, 1, 1); // remove the first comma located on first position.

            Query lcsAssetQuery = new Query();
            QueryBuildDataSource lcsQbds = lcsAssetQuery.addDataSource(tableNum(RetailSelfServicePackageLcsInfo));
            lcsQbds.addRange(fieldNum(RetailSelfServicePackageLcsInfo, FileAssetId)).value(assetQueryVal);

            QueryRun lcsQueryRun = new QueryRun(lcsAssetQuery);

            //  Query existing assets that are part of the dictionary.
            while (lcsQueryRun.next())
            {
                RetailSelfServicePackageLcsInfo lcsPackageInfo = lcsQueryRun.get(tableNum(RetailSelfServicePackageLcsInfo));
                FileAsset assetDetails = assetDictionary.lookup(lcsPackageInfo.FileAssetId);
                Map assetProperties = this.getAssetProperties(assetDetails);

                if (!this.hasPropertiesUpdated(lcsPackageInfo, assetDetails))
                {
                    this.updateExistingAssetProperties(lcsPackageInfo, assetDetails);
                    assetsUpdated = assetsUpdated + 1;
                }

                this.logUnsupportedPropertyChange(lcsPackageInfo, assetDetails, assetProperties);

                // Remove this asset from dictionary.
                // After the loop ends, the remaining assets would be the ones that are
                // not yet inserted to AOS table.
                assetDictionary.remove(lcsPackageInfo.FileAssetId);
            }

            MapEnumerator newAssetEnumerator = assetDictionary.getEnumerator();

            while (newAssetEnumerator.moveNext())
            {
                // Asset is not yet in the table. Upload file asset to table RetailSelfServicePackageLcsInfo.
                FileAsset assetDetails = newAssetEnumerator.currentValue();
                Map assetProperties = this.getAssetProperties(assetDetails);
                this.insertNewAsset(assetDetails, assetProperties, projectId > 0);
                newAssetsFound = newAssetsFound + 1;
            }
        }

        this.logAssetUpdates(packageType, projectId > 0, newAssetsFound, assetsUpdated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a a dictionary of asset properties..
    /// </summary>
    /// <param name = "asset">The LCS asset instance.</param>
    /// <returns>The hashtable of asset properties.</returns>
    private Map getAssetProperties(FileAsset asset)
    {
        Map assetProperties = new Map(Types::Integer, Types::AnyType);

        var assetPropertiesEnumerator = asset.AssetProperties.getEnumerator();

        while (assetPropertiesEnumerator.moveNext())
        {
            FileAssetProperty fileProp = assetPropertiesEnumerator.current;
            assetProperties.insert(fileProp.FileTypePropertyId, fileProp.PropertyValue);
        }

        this.insertAssetPropertyDefaultValues(assetProperties, RetailVersionPropId, '');
        this.insertAssetPropertyDefaultValues(assetProperties, CompanyNamePropId, '');

        return assetProperties;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetPropertyDefaultValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts asset property default values if key does not exists.
    /// </summary>
    /// <param name = "assetPropertiesMap">Asset properties map.</param>
    /// <param name = "propertyKey">Property key to be validated.</param>
    /// <param name = "defaultValue">Default property value.</param>
    private void insertAssetPropertyDefaultValues(Map assetPropertiesMap, int propertyKey, str defaultValue)
    {
        if (!assetPropertiesMap.exists(propertyKey))
        {
            assetPropertiesMap.insert(propertyKey,defaultValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSharedAssets</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a list of shared assets from LCS.
    /// </summary>
    /// <param name = "assetFilter">The asset filter.</param>
    /// <param name = "packageType">The package type.</param>
    /// <returns>The list of shared assets from LCS.</returns>
    private CLRObject getSharedAssets(FileAssetFilter assetFilter, PackageType packageType)
    {
        CLRObject assetResultList;

        try
        {
            logger.EventWriteSelfServiceGetSharedAssetsBegin(enum2Str(packageType));
            assetResultList = this.assetLibProxy.GetFilteredSharedAssetsAsync(assetFilter).Result;

            int packagesFound = 0;

            if (assetResultList)
            {
                packagesFound = assetResultList.get_Count();
            }

            logger.EventWriteSelfServiceGetSharedAssetsEnd(enum2Str(packageType), packagesFound);
        }
        catch (Exception::CLRError)
        {
            System.Exception clrException = RetailUtilities::getLatestClrException();

            if (clrException is LcsServerException)
            {
                LcsServerException lcsException = clrException as LcsServerException;
                Map expProps = this.getLcsExceptionProperties(lcsException);

                if (lcsException.LcsActivityId != System.Guid::Empty)
                {
                    Global::warning(strFmt("@RetailSelfServiceInstaller:LcsActivityIdMessage", lcsException.LcsActivityId));
                }

                logger.EventWriteSelfServiceGetSharedAssetsFailed(
                    enum2Str(packageType),
                    expProps.lookup(StatusCodeStr),
                    expProps.lookup(ActivityIdStr),
                    expProps.lookup(ResponseMessageStr),
                    expProps.lookup(ParseErrorMesageStr),
                    expProps.lookup(ExceptionMessageStr),
                    expProps.lookup(StackTraceStr));
            }
            else
            {
                logger.EventWriteSelfServiceGetSharedAssetsFailed(
                    enum2Str(packageType),
                    '',
                    System.Guid::Empty,
                    '',
                    '',
                    clrException.Message,
                    clrException.StackTrace);
            }

            throw clrException;
        }

        return assetResultList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectAssets</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a list of project assets from LCS.
    /// </summary>
    /// <param name = "projectId">The LCS project identifier.</param>
    /// <param name = "assetFilter">The asset filter.</param>
    /// <param name = "packageType">The package type.</param>
    /// <returns>The list of shared assets from LCS.</returns>
    private CLRObject getProjectAssets(int64 projectId, FileAssetFilter assetFilter, PackageType packageType)
    {
        CLRObject assetResultList;

        try
        {
            logger.EventWriteSelfServiceGetProjectAssetsBegin(projectId, enum2Str(packageType));
            assetResultList = this.assetLibProxy.GetFilteredProjectAssetsAsync(projectId, assetFilter).Result;
            int packagesFound = 0;

            if (assetResultList)
            {
                packagesFound = assetResultList.get_Count();
            }

            logger.EventWriteSelfServiceGetProjectAssetsEnd(projectId, enum2Str(packageType), packagesFound);
        }
        catch (Exception::CLRError)
        {
            System.Exception clrException = RetailUtilities::getLatestClrException();

            if (clrException is LcsServerException)
            {
                LcsServerException lcsException = clrException as LcsServerException;
                Map expProps = this.getLcsExceptionProperties(lcsException);

                if (lcsException.LcsActivityId != System.Guid::Empty)
                {
                    Global::warning(strFmt("@RetailSelfServiceInstaller:LcsActivityIdMessage", lcsException.LcsActivityId));
                }

                logger.EventWriteSelfServiceGetProjectAssetsFailed(
                    projectId,
                    enum2Str(packageType),
                    expProps.lookup(StatusCodeStr),
                    expProps.lookup(ActivityIdStr),
                    expProps.lookup(ResponseMessageStr),
                    expProps.lookup(ParseErrorMesageStr),
                    expProps.lookup(ExceptionMessageStr),
                    expProps.lookup(StackTraceStr));
            }
            else
            {
                logger.EventWriteSelfServiceGetProjectAssetsFailed(
                    projectId,
                    enum2Str(packageType),
                    '',
                    System.Guid::Empty,
                    '',
                    '',
                    clrException.Message,
                    clrException.StackTrace);
            }

            throw clrException;
        }

        return assetResultList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSharedAssetDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a shared asset details from LCS.
    /// </summary>
    /// <param name="assetId">The LCS asset identifier.</param>
    /// <returns>The asset details associated with the given asset identifier.</returns>
    private FileAsset getSharedAssetDetails(guid assetId)
    {
        FileAsset fileAsset;

        try
        {
            logger.EventWriteSelfServiceGetSharedAssetDetailsBegin(assetId);
            fileAsset = this.assetLibProxy.GetFileAssetAsync(null, assetId).Result;
            logger.EventWriteSelfServiceGetSharedAssetDetailsEnd(assetId);
        }
        catch (Exception::CLRError)
        {
            System.Exception clrException = RetailUtilities::getLatestClrException();

            if (clrException is LcsServerException)
            {
                LcsServerException lcsException = clrException as LcsServerException;
                Map expProps = this.getLcsExceptionProperties(lcsException);

                if (lcsException.LcsActivityId != System.Guid::Empty)
                {
                    Global::warning(strFmt("@RetailSelfServiceInstaller:LcsActivityIdMessage", lcsException.LcsActivityId));
                }

                logger.EventWriteSelfServiceGetSharedAssetDetailsFailed(
                    assetId,
                    expProps.lookup(StatusCodeStr),
                    expProps.lookup(ActivityIdStr),
                    expProps.lookup(ResponseMessageStr),
                    expProps.lookup(ParseErrorMesageStr),
                    expProps.lookup(ExceptionMessageStr),
                    expProps.lookup(StackTraceStr));
            }
            else
            {
                logger.EventWriteSelfServiceGetSharedAssetDetailsFailed(
                    assetId,
                    '',
                    System.Guid::Empty,
                    '',
                    '',
                    clrException.Message,
                    clrException.StackTrace);
            }

            throw clrException;
        }

        return fileAsset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectAssetDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a shared asset details from LCS.
    /// </summary>
    /// <param name="projectId">The LCS project identifier.</param>
    /// <param name="assetId">The LCS asset identifier.</param>
    /// <returns>The asset details associated with the given asset identifier.</returns>
    private FileAsset getProjectAssetDetails(int64 projectId, guid assetId)
    {
        FileAsset fileAsset;

        try
        {
            logger.EventWriteSelfServiceGetProjectAssetDetailsBegin(projectId, assetId);
            fileAsset = this.assetLibProxy.GetFileAssetAsync(projectId, assetId).Result;
            logger.EventWriteSelfServiceGetProjectAssetDetailsEnd(projectId, assetId);
        }
        catch (Exception::CLRError)
        {
            System.Exception clrException = RetailUtilities::getLatestClrException();

            if (clrException is LcsServerException)
            {
                LcsServerException lcsException = clrException as LcsServerException;
                Map expProps = this.getLcsExceptionProperties(lcsException);

                if (lcsException.LcsActivityId != System.Guid::Empty)
                {
                    Global::warning(strFmt("@RetailSelfServiceInstaller:LcsActivityIdMessage", lcsException.LcsActivityId));
                }

                logger.EventWriteSelfServiceGetProjectAssetDetailsFailed(
                    projectId,
                    assetId,
                    expProps.lookup(StatusCodeStr),
                    expProps.lookup(ActivityIdStr),
                    expProps.lookup(ResponseMessageStr),
                    expProps.lookup(ParseErrorMesageStr),
                    expProps.lookup(ExceptionMessageStr),
                    expProps.lookup(StackTraceStr));
            }
            else
            {
                logger.EventWriteSelfServiceGetProjectAssetDetailsFailed(
                    projectId,
                    assetId,
                    '',
                    System.Guid::Empty,
                    '',
                    '',
                    clrException.Message,
                    clrException.StackTrace);
            }

            throw clrException;
        }

        return fileAsset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExistingAssetProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates existing asset properties.
    /// </summary>
    /// <param name = "lcsPackage">The LCS package stored from AOS.</param>
    /// <param name = "fileAsset">The file asset from LCS.</param>
    private void updateExistingAssetProperties(RetailSelfServicePackageLcsInfo lcsPackage, FileAsset fileAsset)
    {
        // We already have the asset on the table. Just update the asset Name and Description since
        // on LCS UI, user is only able to update the aforementioned properties.
        if (!this.hasPropertiesUpdated(lcsPackage, fileAsset))
        {
            ttsbegin;

            RetailSelfServicePackageLcsInfo updatePackage;
            update_recordset updatePackage
                    setting
                        FileAssetName = fileAsset.Name,
                        FileAssetDescription = fileAsset.FileDescription
                    where updatePackage.FileAssetId == fileAsset.Id;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUnsupportedPropertyChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// There are some properties on FileAsset that customer won't be able to change. In case the properties changed, log it so we can investigate further later.
    /// </summary>
    /// <param name = "lcsPackage">The LCS package record.</param>
    /// <param name = "fileAsset">The LCS file asset instance.</param>
    /// <param name = "assetPropertiesMap">The map contains other file asset properties.</param>
    private void logUnsupportedPropertyChange(RetailSelfServicePackageLcsInfo lcsPackage, FileAsset fileAsset, Map assetPropertiesMap)
    {
        if (int2Str(enum2int(lcsPackage.PackageType)) != assetPropertiesMap.lookup(SelfServicePackageTypePropertyId))
        {
            logger.EventWriteSelfServiceAssetPropertyUpdateNotSupported(
                fileAsset.Id, fieldStr(RetailSelfServicePackageLcsInfo, PackageType), int2Str(enum2int(lcsPackage.PackageType)),
                'PackageType', int2Str(enum2int(assetPropertiesMap.lookup(SelfServicePackageTypePropertyId))));
        }

        if (lcsPackage.FileAssetFileName != fileAsset.FileName)
        {
            logger.EventWriteSelfServiceAssetPropertyUpdateNotSupported(
                fileAsset.Id, fieldStr(RetailSelfServicePackageLcsInfo, FileAssetFileName), lcsPackage.FileAssetFileName,
                'FileName', FileAsset.FileName);
        }

        if (lcsPackage.LcsPackageVersion != fileAsset.Version)
        {
            logger.EventWriteSelfServiceAssetPropertyUpdateNotSupported(
                fileAsset.Id, fieldStr(RetailSelfServicePackageLcsInfo, LcsPackageVersion), int642Str(lcsPackage.LcsPackageVersion),
                'Version', int642Str(FileAsset.Version));
        }

        if (lcsPackage.Publisher != assetPropertiesMap.lookup(CompanyNamePropId))
        {
            logger.EventWriteSelfServiceAssetPropertyUpdateNotSupported(
                fileAsset.Id, fieldStr(RetailSelfServicePackageLcsInfo, Publisher), lcsPackage.Publisher,
                'Publisher', assetPropertiesMap.lookup(SelfServicePackageTypePropertyId));
        }

        if (lcsPackage.IsCustomizationPackage)
        {
            if (lcsPackage.CustomizationPackageVersion != assetPropertiesMap.lookup(RetailVersionPropId))
            {
                logger.EventWriteSelfServiceAssetPropertyUpdateNotSupported(
                    fileAsset.Id, fieldStr(RetailSelfServicePackageLcsInfo, CustomizationPackageVersion), lcsPackage.CustomizationPackageVersion,
                    'Retail version', assetPropertiesMap.lookup(RetailVersionPropId));
            }
        }
        else
        {
            if (lcsPackage.RetailPackageVersion != assetPropertiesMap.lookup(RetailVersionPropId))
            {
                logger.EventWriteSelfServiceAssetPropertyUpdateNotSupported(
                    fileAsset.Id, fieldStr(RetailSelfServicePackageLcsInfo, RetailPackageVersion), lcsPackage.RetailPackageVersion,
                    'Retail version', assetPropertiesMap.lookup(RetailVersionPropId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewAsset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert a new asset to table <c>RetailSelfServicePackageLcsInfo</c>.
    /// </summary>
    /// <param name = "asset">The LCS asset instance.</param>
    /// <param name = "assetPropertiesMap">The LCS asset properties.</param>
    /// <param name = "isProjectAsset">True if asset comes from project asset, false if from shared asset.</param>
    private void insertNewAsset(FileAsset asset, Map assetPropertiesMap, boolean isProjectAsset)
    {
        if (!assetPropertiesMap.exists(SelfServicePackageTypePropertyId))
        {
            Global::warning(strFmt("@RetailSelfServiceInstaller:MissingLcsMandatoryPropertyValue",
                fieldStr(RetailSelfServicePackageLcsInfo, PackageType), asset.Id));
            logger.EventWriteSelfServiceAssetMandatoryPropertyMissing(asset.Id, fieldStr(RetailSelfServicePackageLcsInfo, PackageType));
            return;
        }

        ttsbegin;

        RetailSelfServicePackageLcsInfo newPackage;
        newPackage.initValue();
        newPackage.FileAssetId = asset.Id;
        newPackage.FileAssetName = asset.Name;
        newPackage.PackageType = str2Int(assetPropertiesMap.lookup(SelfServicePackageTypePropertyId));
        newPackage.FileAssetFileName = asset.FileName;
        newPackage.FileAssetDescription = asset.FileDescription;

        // customization package comes from project asset library.
        newPackage.IsCustomizationPackage = isProjectAsset ? NoYes::Yes : NoYes::No;
        newPackage.LcsPackageVersion = asset.Version;
        newPackage.Publisher = assetPropertiesMap.lookup(CompanyNamePropId);

        anytype createdDateTime = asset.CreatedDate;
        newPackage.PackageCreatedTime = createdDateTime;

        if (newPackage.IsCustomizationPackage)
        {
            newPackage.CustomizationPackageVersion = assetPropertiesMap.lookup(RetailVersionPropId);
        }
        else
        {
            newPackage.RetailPackageVersion = assetPropertiesMap.lookup(RetailVersionPropId);
        }

        newPackage.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logAssetUpdates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Write a log for LCS asset updates.
    /// </summary>
    /// <param name = "packageType">The package type.</param>
    /// <param name = "isProjectAssets">True if asset is a project asset, false if asset is a shared asset.</param>
    /// <param name = "newAssetsFound">A number of new assets found.</param>
    /// <param name = "existingAssetsUpdated">A number of existing assets updated.</param>
    private void logAssetUpdates(PackageType packageType, boolean isProjectAssets, int newAssetsFound, int existingAssetsUpdated)
    {
        int totalAssetsUpdated = newAssetsFound + existingAssetsUpdated;

        if (isProjectAssets)
        {
            this.projectAssetsFound = this.projectAssetsFound + totalAssetsUpdated;
            logger.EventWriteSelfServiceCheckForPackageUpdateResult(enum2str(packageType), 'Project Asset', newAssetsFound, existingAssetsUpdated);
        }
        else
        {
            this.sharedAssetsFound = this.sharedAssetsFound + totalAssetsUpdated;
            logger.EventWriteSelfServiceCheckForPackageUpdateResult(enum2str(packageType), 'Shared Asset', newAssetsFound, existingAssetsUpdated);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPropertiesUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether a package from AOS has all the properties updated compared to the ones from LCS.
    /// </summary>
    /// <param name = "lcsPackage">The LCS package stored from AOS.</param>
    /// <param name = "fileAsset">The file asset from LCS.</param>
    /// <returns>True if a package has all the properties updated, false otherwise.</returns>
    private boolean hasPropertiesUpdated(RetailSelfServicePackageLcsInfo lcsPackage, FileAsset fileAsset)
    {
        // Check only properties that user on LCS UI can edit.
        return lcsPackage.FileAssetName == fileAsset.Name && lcsPackage.FileAssetDescription == fileAsset.FileDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLcsExceptionProperties</Name>
				<Source><![CDATA[
    private Map getLcsExceptionProperties(LcsServerException lcsException)
    {
        System.Net.Http.HttpResponseMessage response = lcsException.Response;
        str statusCode = response.StatusCode.ToString();

        Map expProps = new Map(Types::String, Types::AnyType);
        expProps.insert(StatusCodeStr, statusCode);
        expProps.insert(ActivityIdStr, lcsException.LcsActivityId);
        expProps.insert(ResponseMessageStr, lcsException.ResponseMessage);
        expProps.insert(ParseErrorMesageStr, lcsException.HttpContentErrorMessage);
        expProps.insert(ExceptionMessageStr, lcsException.Message);
        expProps.insert(StackTraceStr, lcsException.StackTrace);

        return expProps;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>