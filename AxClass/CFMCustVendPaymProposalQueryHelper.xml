<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMCustVendPaymProposalQueryHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class helps configure query to select payment requests to create payments for customers and vendors based on their debt.
/// </summary>
abstract class CFMCustVendPaymProposalQueryHelper
{
    Query sourcePaymProposalQuery;
    container dataAreaIdCollection;
    boolean crossCompanyQuery;
    RefRecId cfmJournalRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CFMCustVendPaymProposalQueryHelper construct(CFMAccountType _accountType,
        Query _sourcePaymProposalQuery,
        boolean _crossCompanyQuery,
        container _dataAreaIdCollection,
        RefRecId _journalTableRecId = 0)
    {
        CFMCustVendPaymProposalQueryHelper queryHelper;

        switch (_accountType)
        {
            case CFMAccountType::Cust:
                queryHelper = new CFMCustPaymProposalQueryHelper();
                break;

            case CFMAccountType::Vend:
                queryHelper = new CFMVendPaymProposalQueryHelper();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        queryHelper.parmSourceQuery(_sourcePaymProposalQuery);
        queryHelper.parmDataAreaFilter(_dataAreaIdCollection);
        queryHelper.parmCrosscompanyQuery(_crossCompanyQuery);
        queryHelper.parmCFMJournalRecId(_journalTableRecId);

        return queryHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines account type.
    /// </summary>
    /// <returns>
    /// Returns account type.
    /// </returns>
    abstract protected CFMAccountType accountType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEntity</Name>
				<Source><![CDATA[
    private void addEntity(QueryBuildDataSource _paymentRequestDatasource)
    {
        SysQuery::findOrCreateRange(_paymentRequestDatasource, fieldNum(CFMPaymentRequestTable, AccountType)).value(queryValue(this.accountType()));

        QueryBuildDataSource vendTableDS = _paymentRequestDatasource.addDataSource(this.custVendTableId());
        vendTableDS.relations(true);
        vendTableDS.joinMode(JoinMode::ExistsJoin);

        QueryBuildDataSource dirPartyTableDS = vendTableDS.addDataSource(tableNum(DirPartyTable));
        dirPartyTableDS.joinMode(JoinMode::ExistsJoin);
        dirPartyTableDS.relations(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    public void buildQuery()
    {
        QueryBuildDataSource qbdsCustVendTransOpen = sourcePaymProposalQuery.dataSourceTable(this.custVendTransOpenTableId());

        QueryBuildDataSource qbdsPaymentRequest = qbdsCustVendTransOpen.addDataSource(tableNum(CFMPaymentRequestTable));

        DictRelation openTransRelation = new DictRelation(tableNum(CFMPaymentRequestTable));
        openTransRelation.loadTableRelation(this.custVendTransOpenTableId());
        qbdsPaymentRequest.addRelation(openTransRelation);
        qbdsPaymentRequest.fetchMode(QueryFetchMode::One2One);

        SysQuery::findOrCreateRange(qbdsPaymentRequest, fieldNum(CFMPaymentRequestTable, OnHold)).value(queryValue(NoYes::No));
        SysQuery::findOrCreateRange(qbdsPaymentRequest, fieldNum(CFMPaymentRequestTable, Status)).value(queryValue(CFMPaymentRequestStatus::Accepted));

        this.addEntity(qbdsPaymentRequest);

        QueryBuildDataSource qbdsJournalTransLog = qbdsPaymentRequest.addDataSource(tableNum(CFMJournalTransLog));
        qbdsJournalTransLog.relations(true);
        qbdsJournalTransLog.joinMode(JoinMode::ExistsJoin);
        qbdsJournalTransLog.addRange(fieldNum(CFMJournalTransLog, Outdated)).value(queryValue(NoYes::No));

        QueryBuildDataSource qbdsCashFlowJournal = qbdsJournalTransLog.addDataSource(tableNum(CFMJournalTable));
        qbdsCashFlowJournal.joinMode(JoinMode::ExistsJoin);
        qbdsCashFlowJournal.relations(true);

        SysQuery::findOrCreateRange(qbdsCashFlowJournal, fieldNum(CFMJournalTable, Posted)).value(queryValue(NoYes::Yes));
        SysQuery::findOrCreateRange(qbdsCashFlowJournal, fieldNum(CFMJournalTable, JournalType)).value(queryValue(CFMJournalType::Fact));

        if (cfmJournalRecId)
        {
            SysQuery::findOrCreateRange(qbdsCashFlowJournal, fieldNum(CFMJournalTable, RecId)).value(queryValue(cfmJournalRecId));
        }

        QueryBuildDataSource qbdsPaymentRequestType = qbdsPaymentRequest.addDataSource(tableNum(CFMPaymentRequestType));
        qbdsPaymentRequestType.relations(true);
        qbdsPaymentRequestType.joinMode(JoinMode::ExistsJoin);
        SysQuery::findOrCreateRange(qbdsPaymentRequestType, fieldNum(CFMPaymentRequestType, Direction)).value(queryValue(CFMCashFlowDirection::Outflow));

        QueryBuildDataSource qbdsPaymentPriority = qbdsPaymentRequest.addDataSource(tableNum(CFMPaymentPriority));
        qbdsPaymentPriority.relations(true);
        qbdsPaymentPriority.joinMode(JoinMode::ExistsJoin);

        QueryBuildDataSource qbdsPaymentLink = qbdsPaymentRequest.addDataSource(tableNum(CFMPaymentRequestPaymentLink));
        qbdsPaymentLink.relations(true);
        qbdsPaymentLink.joinMode(JoinMode::NoExistsJoin);

        if (crossCompanyQuery)
        {
            this.configureCrossCompany(qbdsPaymentRequest);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureCrossCompany</Name>
				<Source><![CDATA[
    private void configureCrossCompany(QueryBuildDataSource _paymentRequestDatasource)
    {
        CFMPRQuerySourceCompanyFilter sourceCompanyFilter;

        if (CFMParameters::isCompanyCentralizedPaymentCompany())
        {
            if (dataAreaIdCollection == conNull())
            {
                sourceCompanyFilter = CFMPRQuerySourceCompanyFilter::construct(sourcePaymProposalQuery, CFMParameters::getCentralizedPaymentCompanies(curext()));
            }
            else
            {
                sourceCompanyFilter = CFMPRQuerySourceCompanyFilter::construct(sourcePaymProposalQuery, dataAreaIdCollection);
            }
        }
        else
        {
            sourceCompanyFilter = CFMPRQuerySourceCompanyFilter::construct(sourcePaymProposalQuery, [curext()]);
        }

        sourceCompanyFilter.filter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPaymentRequestQueryRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies ranges from query that contains <c>CFMPaymentRequestTable</c> as a datasource.
    /// </summary>
    /// <param name="_sourceQuery">
    /// Variable of <c>Query</c> type with <c>CFMPaymentRequestTable</c> as a datasource.
    /// </param>
    public void copyPaymentRequestQueryRange(Query _sourceQuery)
    {
        QueryBuildDataSource paymentRequestDSFrom = _sourceQuery.dataSourceTable(tableNum(CFMPaymentRequestTable));
        QueryBuildDataSource paymentRequestDSTo = sourcePaymProposalQuery.dataSourceTable(tableNum(CFMPaymentRequestTable));

        if (paymentRequestDSFrom && paymentRequestDSTo)
        {
            this.copyRange(paymentRequestDSFrom, paymentRequestDSTo, [fieldNum(CFMPaymentRequestTable, SourceDataAreaId), fieldNum(CFMPaymentRequestTable, PaymentDataAreaId)]);
        }

        QueryBuildDataSource paymentPriorityDSFrom = _sourceQuery.dataSourceTable(tableNum(CFMPaymentPriority));
        QueryBuildDataSource paymentPriorityDSTo = sourcePaymProposalQuery.dataSourceTable(tableNum(CFMPaymentPriority));

        if (paymentPriorityDSFrom && paymentPriorityDSTo)
        {
            this.copyRange(paymentPriorityDSFrom, paymentPriorityDSTo);
        }

        QueryBuildDataSource paymentTypeDSFrom = _sourceQuery.dataSourceTable(tableNum(CFMPaymentRequestType));
        QueryBuildDataSource paymentTypeDSTo = sourcePaymProposalQuery.dataSourceTable(tableNum(CFMPaymentRequestType));

        if (paymentTypeDSFrom && paymentTypeDSTo)
        {
            this.copyRange(paymentTypeDSFrom, paymentTypeDSTo);
        }

        QueryBuildDataSource dirPartyDSFrom = _sourceQuery.dataSourceTable(tableNum(DirPartyTable));
        QueryBuildDataSource dirPartyDSTo = sourcePaymProposalQuery.dataSourceTable(tableNum(DirPartyTable));

        if (dirPartyDSFrom && dirPartyDSTo)
        {
            this.copyRange(dirPartyDSFrom, dirPartyDSTo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRange</Name>
				<Source><![CDATA[
    private void copyRange(QueryBuildDataSource _sourceDS, QueryBuildDataSource _targetDS, container _notCopiedFieldId = conNull())
    {
        int rc = _sourceDS.rangeCount();

        for (int i = 1; i<= rc; i++)
        {
            QueryBuildRange qbrFrom = _sourceDS.range(i);

            if (_notCopiedFieldId != conNull() && conFind(_notCopiedFieldId, qbrFrom.field()))
            {
                continue;
            }

            if (qbrFrom.value())
            {
                QueryBuildRange qbrTo = SysQuery::findOrCreateRange(_targetDS, qbrFrom.field());
                qbrTo.value(qbrFrom.value());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines table id that represents customer or vendor entity.
    /// </summary>
    /// <returns>
    /// Table id of customer or vendor entity.
    /// </returns>
    abstract protected TableId custVendTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTransOpenTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines table id that represents open debt for customer or vendor.
    /// </summary>
    /// <returns>
    /// Table id of customer or vendor debt.
    /// </returns>
    abstract protected TableId custVendTransOpenTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCFMJournalRecId</Name>
				<Source><![CDATA[
    public RefRecId parmCFMJournalRecId(RefRecId _cfmJournalrecId = cfmJournalrecId)
    {
        cfmJournalrecId = _cfmJournalrecId;

        return cfmJournalrecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCrosscompanyQuery</Name>
				<Source><![CDATA[
    public boolean parmCrosscompanyQuery(boolean _crossCompanyQuery = crossCompanyQuery)
    {
        crossCompanyQuery = _crossCompanyQuery;

        return crossCompanyQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataAreaFilter</Name>
				<Source><![CDATA[
    public container parmDataAreaFilter(container _dataAreaIdCollection = dataAreaIdCollection)
    {
        dataAreaIdCollection = _dataAreaIdCollection;

        return dataAreaIdCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceQuery</Name>
				<Source><![CDATA[
    public Query parmSourceQuery(Query _sourceQuery = sourcePaymProposalQuery)
    {
        sourcePaymProposalQuery = _sourceQuery;

        return sourcePaymProposalQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>