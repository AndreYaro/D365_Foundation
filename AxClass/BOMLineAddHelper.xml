<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMLineAddHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for the <c>EcoResProductReleasedSelectBOMComponent</c> dialog
/// </summary>
public class BOMLineAddHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        // The class should not be used without context provided, instead use the addLineUsingDialog static method
        throw error(Error::wrongUseOfFunction(classStr(BOMLineAddHelper)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a dialog to select items.
    /// </summary>
    /// <param name = "_caller">The caller of the dialog.</param>
    /// <param name = "_siteIdContext">The Site context.</param>
    /// <returns>A temporary buffer with the selected item and dimension.</returns>
    public static InventDimItemTmp selectItems(Object _caller, InventSiteId _siteIdContext)
    {
        InventDimItemTmp tmpResult;

        Args args = new  Args();
        args.caller(_caller);
        args.record(tmpResult);
        args.parm(_siteIdContext);

        MenuFunction productSelect = new MenuFunction(menuItemDisplayStr(EcoResProductReleasedSelectBOMComponent), MenuItemType::Display);

        FormRun formRun = productSelect.create(args);
        formRun.run();
        formRun.wait(true);

        return tmpResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLineUsingDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new BOM line using a dialog to select an item.
    /// </summary>
    /// <param name = "_BOMNew">The record to add (must be initialized with bomId and line number).</param>
    /// <param name = "_caller">The caller form.</param>
    /// <param name = "_siteIdContext">The Id of a site to filter based on.</param>
    /// <param name = "_autoEdit">A boolean that determines if the edit dialog should always be shown; false if the edit dialog should only be shown in case the validation of the line fails.</param>
    /// <returns>true a new BOM line was added; otherwise, false.</returns>
    public static boolean addLineUsingDialog(BOM _BOMNew, Object _caller, InventSiteId _siteIdContext, boolean _autoEdit)
    {
        // Prompt to get the item and product dimension to add
        InventDimItemTmp tmpResult = BOMLineAddHelper::selectItems(_caller, _siteIdContext);
        if (!tmpResult.itemId)
        {
            return false;
        }

        _BOMNew.initValue();

        // Set item data based on dialog result
        _BOMNew.InventDimId = tmpResult.inventDimId;

        InventTable inventTable = InventTable::find(tmpResult.itemId);
        _BOMNew.initFromInventTable(inventTable);

        _BOMNew.bomQty = inventTable.inventStandardQty(_BOMNew.InventDimId);

        // catch weight items may not be placed as lines on regular BOMs
        if (    PdsGlobal::pdsIsCWItem(_BOMNew.ItemId)
            &&  _BOMNew.bomTable().PmfBOMFormula == PmfBOMFormula::BOM)
        {
            return checkFailed("@PDS138");
        }

        if (!BOMLineAddHelper::bomLineCircularityCheck(_BOMNew))
        {
            return false;
        }

        if (_autoEdit || !_BOMNew.validateWrite(false))
        {
            FormRun editDialog = BOMDesignerEditBOMHelper::openDialogAndWait(_caller, _BOMNew);

            return editDialog.closedOk();
        }
        else
        {
            if (!_BOMNew.validateWrite(false))
            {
                return false;
            }

            ttsbegin;

            _boMnew.insert();

            ttscommit;

            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomLineCircularityCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if BOM contains any circularity.
    /// </summary>
    /// <param name = "_bom">The BOM to check for circularity.</param>
    /// <returns>true if no circularity exists; otherwise false.</returns>
    private static boolean bomLineCircularityCheck(BOM _bom)
    {
        if (!BOMParameters::find().mustCheckPerLine())
        {
            return true;
        }

        ttsbegin;

        // The BOM record needs to be written before the BOM line circularity check will work
        _bom.write();

        boolean checkBOMLine = _bom.checkNotCircularity();

        // We abort the transactions since the BOM line is inserted later depeding on the result of validateWrite
        ttsabort;

        return checkBOMLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>