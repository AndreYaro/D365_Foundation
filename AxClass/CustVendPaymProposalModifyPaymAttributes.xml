<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymProposalModifyPaymAttributes</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendPaymProposalModifyPaymAttributes</c> class modifies payment attributes of
///    transactions in the payment proposal.
/// </summary>
class CustVendPaymProposalModifyPaymAttributes extends RunBase
{
    LedgerJournalId         ledgerJournalId;
    ModuleCustVend          moduleCustVend;
    List                    transList;
    CustVendPaymProposal    paymProposal;

    boolean                 changeDueDate;
    boolean                 changePaymDate;
    boolean                 changePaymMode;
    boolean                 changePaymSpec;
    boolean                 changeCompanyBankAccount;
    boolean                 changePaymId;

    DueDate                 dueDate;
    TransDate               paymDate;
    PaymMode                paymMode;
    PaymSpec                paymSpec;
    CompanyBankAccountId    companyBankAccountId;
    PaymId                  paymId;

    date                    systemDate;

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        changeDueDate,
        changePaymDate,
        changePaymMode,
        changePaymSpec,
        changeCompanyBankAccount,
        changePaymId,
        dueDate,
        paymDate,
        paymMode,
        paymSpec,
        companyBankAccountId,
        paymId,
        ledgerJournalId,
        moduleCustVend
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertAmountTransCurToAmountPaymCur_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the specified amount from the currency of the open transaction to the currency of the payment.
    /// </summary>
    /// <param name="_amountToBeconverted">
    /// Amount to be converted
    /// </param>
    /// <param name="_paymProposalLine">
    /// <c>CustVendPaymProposalLine</c> related to the payment.
    /// </param>
    /// <param name="_specTrans">
    /// <c>SpecTrans</c> of this transaction.
    /// </param>
    /// <param name="_custVendTransOpen">
    /// <c>CustVendTransOpen</c> being paid.
    /// </param>
    /// <returns>
    /// The amount convrted to the payment currency.
    /// </returns>
    public AmountCur convertAmountTransCurToAmountPaymCur_BR(
                                        AmountCur                _amountToBeconverted,
                                        CustVendPaymProposalLine _paymProposalLine,
                                        SpecTrans                _specTrans,
                                        CustVendTransOpen        _custVendTransOpen)
    {
        CurrencyExchangeHelper  currencyExchHelper;
        AmountCur               interimAmount;
        CurrencyCode            pmtCompanyMstCurrency = '';
        CurrencyCode            transCurrency;
        CurrencyExchangeHelper  displayExchRateHelper;
        AmountCur               amountPaymCur;

        displayExchRateHelper   = CurrencyExchangeHelper::construct();
        currencyExchHelper      = CurrencyExchangeHelper::construct();

        // Get the currency for the open transaction
        transCurrency = CustVendTransOpenData::construct(_custVendTransOpen).custVendTrans().CurrencyCode;

        // convert transaction currency value to the payment currency
        if (transCurrency == _paymProposalLine.CurrencyCode)
        {
            // same currency code, no conversion necessary
            amountPaymCur = _amountToBeconverted;
        }
        else if (_specTrans.RecId != 0 && _specTrans.CrossRate != 0)
        {
            // Cross rate is specified, convert directly from payment to marked transaction currency
            amountPaymCur = CurrencyExchange::round(CurrencyExchange::calculateAmount(_amountToBeconverted, _specTrans.CrossRate), _paymProposalLine.CurrencyCode);
        }
        else
        {
            // convert from transaction currency amount to transaction MST
            currencyExchHelper.parmLedgerRecId(Ledger::primaryLedger(CompanyInfo::findDataArea(_custVendTransOpen.company()).RecId));
            currencyExchHelper.parmExchangeDate(_paymProposalLine.PaymDate);
            interimAmount = currencyExchHelper.calculateTransactionToAccounting(transCurrency, _amountToBeconverted, false);

            if (pmtCompanyMstCurrency == '')
            {
                // get the MST currency of the payment company
                changecompany(_paymProposalLine.AccountNumCompany)
                {
                    pmtCompanyMstCurrency = CompanyInfoHelper::standardCurrency();
                }
            }

            // convert from transaction MST to payment MST using the transaction company's exchange rate
            interimAmount = currencyExchHelper.calculateAccountingToTransaction(pmtCompanyMstCurrency, interimAmount, false);

            // convert from payment MST to payment currency
            displayExchRateHelper.parmExchangeDate(_paymProposalLine.PaymDate);
            amountPaymCur = displayExchRateHelper.calculateAccountingToTransaction(_paymProposalLine.CurrencyCode, interimAmount, true);
        }

        return amountPaymCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTransStatic</Name>
				<Source><![CDATA[
    private CustVendTransStatic custVendTransStatic()
    {
        return CustVendTransStatic::newModuleCustVend(moduleCustVend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be built by using the <c>Dialog</c> class or by using a class that is created in the
    ///    Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        FormRun dialogForm;
        Args    args = new Args(formstr(CustVendPaymProposalModPaymAttribDialog));

        args.caller(this);

        dialogForm = classfactory.formRunClass(args);
        dialogForm.init();

        return dialogForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public identifierName lastValueElementName()
    {
        identifierName  ret;
        DictEnum        dictEnum = new DictEnum(enumnum(ModuleCustVend));

        ret = super() + dictEnum.value2Symbol(moduleCustVend);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packedModifyPaymAttributes = [#CurrentVersion, #CurrentList, transList.pack()];

        if (paymProposal != null)
        {
            packedModifyPaymAttributes += [paymProposal.pack()];
        }

        return packedModifyPaymAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeCompanyBankAccount</Name>
				<Source><![CDATA[
    public boolean parmChangeCompanyBankAccount(boolean _changeCompanyBankAccount = changeCompanyBankAccount)
    {
        changeCompanyBankAccount = _changeCompanyBankAccount;

        return changeCompanyBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeDueDate</Name>
				<Source><![CDATA[
    public boolean parmChangeDueDate(boolean _changeDueDate = changeDueDate)
    {
        changeDueDate = _changeDueDate;

        return changeDueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangePaymDate</Name>
				<Source><![CDATA[
    public boolean parmChangePaymDate(boolean _changePaymDate = changePaymDate)
    {
        changePaymDate = _changePaymDate;

        return changePaymDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangePaymId</Name>
				<Source><![CDATA[
    public boolean parmChangePaymId(boolean _changePaymId = changePaymId)
    {
        changePaymId = _changePaymId;

        return changePaymId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangePaymMode</Name>
				<Source><![CDATA[
    public boolean parmChangePaymMode(boolean _changePaymMode = changePaymMode)
    {
        changePaymMode = _changePaymMode;

        return changePaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangePaymSpec</Name>
				<Source><![CDATA[
    public boolean parmChangePaymSpec(boolean _changePaymSpec = changePaymSpec)
    {
        changePaymSpec = _changePaymSpec;

        return changePaymSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanyBankAccountId</Name>
				<Source><![CDATA[
    public CompanyBankAccountId parmCompanyBankAccountId(CompanyBankAccountId _companyBankAccountId = companyBankAccountId)
    {
        companyBankAccountId = _companyBankAccountId;

        return companyBankAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDueDate</Name>
				<Source><![CDATA[
    public DueDate parmDueDate(DueDate _dueDate = dueDate)
    {
        dueDate = _dueDate;

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalId</Name>
				<Source><![CDATA[
    public LedgerJournalId parmLedgerJournalId(LedgerJournalId _ledgerJournalId = ledgerJournalId)
    {
        ledgerJournalId = _ledgerJournalId;

        return ledgerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleCustVend</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>moduleCustVend</c> parameter.
    /// </summary>
    /// <param name="_moduleCustVend">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>moduleCustVend</c> parameter.
    /// </returns>
    public ModuleCustVend parmModuleCustVend(ModuleCustVend _moduleCustVend = moduleCustVend)
    {
        moduleCustVend = _moduleCustVend;

        return moduleCustVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymDate</Name>
				<Source><![CDATA[
    public TransDate parmPaymDate(TransDate _paymDate = paymDate)
    {
        paymDate = _paymDate;

        return paymDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymId</Name>
				<Source><![CDATA[
    public PaymId parmPaymId(PaymId _paymId = paymId)
    {
        paymId = _paymId;

        return paymId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymMode</Name>
				<Source><![CDATA[
    public PaymMode parmPaymMode(PaymMode _paymMode = paymMode)
    {
        paymMode = _paymMode;

        return paymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymProposal</Name>
				<Source><![CDATA[
    public CustVendPaymProposal parmPaymProposal(CustVendPaymProposal _paymProposal = paymProposal)
    {
        paymProposal = _paymProposal;

        return paymProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymSpec</Name>
				<Source><![CDATA[
    public PaymSpec parmPaymSpec(PaymSpec _paymSpec = paymSpec)
    {
        paymSpec = _paymSpec;

        return paymSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransList</Name>
				<Source><![CDATA[
    public List parmTransList(List _transList = transList)
    {
        transList = _transList;

        return transList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSystemDate</Name>
				<Source><![CDATA[
    [SysObsoleteAttribute('The system date is no longer considered to restrict the payment date', false, 30\6\2020)]
    public date parmSystemDate(date _systemDate = systemDate)
    {
        systemDate = _systemDate;

        return systemDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        ListEnumerator          transListEnumerator;
        CustVendTransOpen       custVendTransOpen;
        CustVendTransOpen       custVendTransOpenForUpdate;
        CustVendTrans           custVendTrans;
        CustVendTransOpenData   custVendTransOpenData;
        CustVendTransData       custVendTransData;
        CustVendPaymProposalLine custVendPaymProposalLine;
        DiscGraceDays           discGraceDays;
        DiscGraceDays           oldDiscGraceDays;
        TransDate               newPaymDate;
        DiscAmount              oldCashDiscAmount;
        LedgerJournalAC         newPaymAccount;
        // <GBR>
        CustVendPaymProposalLine    custVendPaymProposalLine_br;
        LedgerJournalType           journalType;
        VendTransPayment_BR         vendTransPayment_BR;
        CustTransPayment_BR         custTransPayment_BR;
        // </GBR>

        Debug::assert(paymProposal != null);
        Debug::assert(ledgerJournalId != '');
        Debug::assert(paymProposal.parmLedgerJournalTableCompany() == curext());

        if (! this.validate())
        {
            throw error("@SYS21628");
        }

        try
        {
            transListEnumerator = transList.getEnumerator();

            boolean isCustFineInterestCalculated;
            boolean isVendFineInterestCalculated;
            ttsbegin;

            while (transListEnumerator.moveNext())
            {
                custVendTransOpen = transListEnumerator.current();
                paymProposal.parmChangePaymMode(changePaymMode);

                // <GBR>
                if (BrazilParameters::isEnabled())
                {
                    changeCompany(paymProposal.parmLedgerJournalTableCompany())
                    {
                        custVendPaymProposalLine_br = paymProposal.trans2PaymLine(custVendTransOpen);
                        custVendPaymProposalLine_br.selectForUpdate(true);
                        journalType                 = LedgerJournalTable::find(ledgerJournalId).JournalType;
                    }
                }
                // </GBR>

                custVendPaymProposalLine = paymProposal.trans2PaymLine(custVendTransOpen);

                changecompany(custVendTransOpen.company())
                {
                    custVendTransOpenForUpdate  = this.custVendTransStatic().custVendTransOpen();
                    custVendTrans               = this.custVendTransStatic().custVendTrans();

                    select firstonly forupdate custVendTransOpenForUpdate
                        where custVendTransOpenForUpdate.RecId == custVendTransOpen.RecId;

                    if (changeDueDate)
                    {
                        custVendTransOpenForUpdate.DueDate = dueDate;
                        custVendTransOpenForUpdate.update();
                    }

                    if (BrazilParameters::isEnabled() && (changeDueDate || changePaymDate))
                    {
                        this.updateInterest_BR(custVendPaymProposalLine_br,
                                                custVendTransOpenForUpdate,
                                                custVendTrans,
                                                journalType,
                                                changePaymDate ? paymDate : custVendPaymProposalLine_br.PaymDate);
                        this.updateFine_BR(custVendPaymProposalLine_br,
                                            custVendTransOpenForUpdate,
                                            custVendTrans,
                                            journalType,
                                            changePaymDate ? paymDate : custVendPaymProposalLine_br.PaymDate);
                        if (!isCustFineInterestCalculated && custVendTransOpenForUpdate.TableId == tableNum(CustTransOpen))
                        {
                            isCustFineInterestCalculated = true;
                        }
                        if (!isVendFineInterestCalculated && custVendTransOpenForUpdate.TableId == tableNum(VendTransOpen))
                        {
                            isVendFineInterestCalculated = true;
                        }
                    }

                    // Can't join this with select forupdate custVendTransOpenForUpdate statement above because the update call
                    //  on that table buffer also updates the custVendTrans record.  This causes an update conflict if joined as
                    //  the custVendTrans record is open for edit during that update.
                    select firstonly forUpdate custVendTrans
                        where custVendTrans.RecId == custVendTransOpenForUpdate.RefRecId;

                    if (changePaymDate || changePaymMode)
                    {
                        custVendTransData = custVendTransData::construct(custVendTrans);
                        oldDiscGraceDays = custVendTransData.findPaymModeTable().DiscGraceDays;
                    }

                    if (changePaymMode && changePaymSpec)
                    {
                        custVendTrans.PaymMode  = paymMode;
                        custVendTrans.PaymSpec  = paymSpec;
                    }
                    else
                    {
                        if (changePaymMode || changePaymSpec)
                        {
                            switch (moduleCustVend)
                            {
                                case ModuleCustVend::Cust:
                                    if (changePaymMode && CustPaymModeTable::checkExist(paymMode))
                                    {
                                        custVendTrans.PaymMode = paymMode;
                                        custVendTrans.PaymModeMap::modifiedPaymMode();
                                    }

                                    if (changePaymSpec && CustPaymModeSpec::checkExistForPaymMode(paymSpec, custVendTrans.PaymMode))
                                    {
                                        custVendTrans.PaymSpec = paymSpec;
                                    }
                                    break;

                                case ModuleCustVend::Vend:
                                    if (changePaymMode && VendPaymModeTable::checkExist(paymMode))
                                    {
                                        custVendTrans.PaymMode = paymMode;
                                        custVendTrans.PaymModeMap::modifiedPaymMode();
                                    }

                                    if (changePaymSpec && VendPaymModeSpec::checkExistForPaymMode(paymSpec, custVendTrans.PaymMode))
                                    {
                                        custVendTrans.PaymSpec = paymSpec;
                                    }
                                    break;
                            }
                        }
                    }

                    if (changeCompanyBankAccount)
                    {
                        custVendTrans.CompanyBankAccountId = companyBankAccountId;
                        paymProposal.parmChangeCompanyBankAccount(changeCompanyBankAccount);
                    }

                    if (changePaymId)
                    {
                        custVendTrans.PaymId = paymId;
                    }

                    // <GBR>
                    if (BrazilParameters::isEnabled())
                    {
                        if (custVendTrans.TableId == tableNum(VendTrans))
                        {
                            vendTransPayment_BR = custVendTrans.getPaymentExtension_BR();
                            vendTransPayment_BR.paymspecModified_BR(custVendTrans.PaymMode, custVendTrans.PaymSpec);
                            custVendTrans.packExtensionTable(vendTransPayment_BR);
                        }
                        else if (custVendTrans.TableId == tableNum(CustTrans))
                        {
                            custTransPayment_BR = custVendTrans.getPaymentExtension_BR();
                            custTransPayment_BR.paymspecModified_BR(custVendTrans.PaymMode, custVendTrans.PaymSpec);
                            custVendTrans.packExtensionTable(custTransPayment_BR);
                        }
                    }
                    // </GBR>

                    custVendTrans.update();
                }

                if (changePaymDate || changePaymMode || changeCompanyBankAccount)
                {
                    if (changePaymDate)
                    {
                        // use the date provided by the user
                        newPaymDate = paymDate;
                    }
                    else
                    {
                        // user did not provide a new payment date, use the original payment date
                        newPaymDate = custVendPaymProposalLine.PaymDate;
                    }

                    if (custVendPaymProposalLine.PaymAccountType == LedgerJournalACType::Bank && changeCompanyBankAccount)
                    {
                        newPaymAccount = custVendTrans.CompanyBankAccountId;
                    }
                    else
                    {
                        // Bank account change is effective if the account type is bank in the CustVendPaymProposalLine. And other cases also it set to empty string.
                        newPaymAccount = '';
                    }

                    if (LedgerJournalTable::find(ledgerJournalId).JournalType   == LedgerJournalType::Payment ||
                        LedgerJournalTable::find(ledgerJournalId).JournalType   == LedgerJournalType::CustPayment)
                    {
                        // modify the proposal amount based upon any change in possible cash discount
                        changecompany(custVendTransOpenForUpdate.company())
                        {
                            custVendTransOpenData = CustVendTransOpenData::construct(custVendTransOpenForUpdate);
                            discGraceDays = custVendTransOpenData.findPaymModeTable(false).DiscGraceDays;
                            custVendTransOpenData.setCashDisc(newPaymDate, discGraceDays);

                            if (custVendTransOpenForUpdate.PossibleCashDisc != custVendTransOpen.PossibleCashDisc)
                            {
                                custVendTransOpenForUpdate.update();
                            }

                            oldCashDiscAmount = custVendTransOpenData.findCashDisc(
                                custVendPaymProposalLine.PaymDate,
                                oldDiscGraceDays).CashDiscAmount;
                        }

                        // <GBR>
                        if (BrazilParameters::isEnabled() &&
                            paymProposal.transMatchesProposalLine(custVendTransOpenForUpdate, paymDate)) //shouldn't newPaymDate go here
                        {
                            this.updateInterest_BR(custVendPaymProposalLine_br,
                                                   custVendTransOpenForUpdate,
                                                   custVendTrans,
                                                   journalType,
                                                   newPaymDate);

                            this.updateFine_BR(custVendPaymProposalLine_br,
                                               custVendTransOpenForUpdate,
                                               custVendTrans,
                                               journalType,
                                               newPaymDate);
                            if (!isCustFineInterestCalculated && custVendTransOpenForUpdate.TableId == tableNum(CustTransOpen))
                            {
                                isCustFineInterestCalculated = true;
                            }
                            if (!isVendFineInterestCalculated && custVendTransOpenForUpdate.TableId == tableNum(VendTransOpen))
                            {
                                isVendFineInterestCalculated = true;
                            }
                        }
                        // </GBR>

                        if (custVendTransOpenForUpdate.PossibleCashDisc != oldCashDiscAmount)
                        {
                            SpecTrans specTrans = SpecTrans::find(
                                custVendPaymProposalLine.company(),
                                tableNum(CustVendPaymProposalLine),
                                custVendPaymProposalLine.RecId,
                                custVendTransOpen.company(),
                                custVendTransOpen.TableId,
                                custVendTransOpen.RecId);

                            AmountCur newPaymentAmount = custVendTransOpenData.remainAmountCashDisc(
                                newPaymDate,
                                discGraceDays,
                                true,
                                specTrans.Balance01,
                                specTrans.CashDiscToTake);

                            paymProposal.reorgCustVendTransOpen(
                                custVendTransOpen,
                                newPaymDate,
                                custVendPaymProposalLine.CurrencyCode,
                                newPaymAccount,
                                newPaymentAmount,
                                0);
                        }
                        else
                        {
                            paymProposal.reorgCustVendTransOpen(
                                custVendTransOpenForUpdate,
                                newPaymDate,
                                custVendPaymProposalLine.CurrencyCode,
                                newPaymAccount);
                        }
                    }
                    else
                    {
                        paymProposal.reorgCustVendTransOpen(
                            custVendTransOpenForUpdate,
                            newPaymDate,
                            custVendPaymProposalLine.CurrencyCode,
                            newPaymAccount);

                        // <GBR>
                        if (BrazilParameters::isEnabled() &&
                            paymProposal.transMatchesProposalLine(custVendTransOpenForUpdate, paymDate)) //shouldn't newPaymDate go here
                        {
                            this.updateInterest_BR(custVendPaymProposalLine_br,
                                                   custVendTransOpenForUpdate,
                                                   custVendTrans,
                                                   journalType,
                                                   newPaymDate);

                            this.updateFine_BR(custVendPaymProposalLine_br,
                                               custVendTransOpenForUpdate,
                                               custVendTrans,
                                               journalType,
                                               newPaymDate);
                            if (!isCustFineInterestCalculated && custVendTransOpenForUpdate.TableId == tableNum(CustTransOpen))
                            {
                                isCustFineInterestCalculated = true;
                            }
                            if (!isVendFineInterestCalculated && custVendTransOpenForUpdate.TableId == tableNum(VendTransOpen))
                            {
                                isVendFineInterestCalculated = true;
                            }
                        }
                        // </GBR>
                    }
                }
                else
                {
                    if (changeDueDate)
                    {
                        // if modifying the due date then ensure the payment date is recalculated & applied
                        paymProposal.parmPaymProposalCalcPaym().calc(custVendTransOpenForUpdate);
                        paymProposal.reorgCustVendTransOpen(
                            custVendTransOpenForUpdate,
                            paymProposal.parmPaymProposalCalcPaym().paymDate(),
                            custVendPaymProposalLine.CurrencyCode);
                    }
                    else
                    {
                        paymProposal.reorgCustVendTransOpen(
                            custVendTransOpenForUpdate,
                            custVendPaymProposalLine.PaymDate,
                            custVendPaymProposalLine.CurrencyCode);
                    }
                }
            }

            ttscommit;

            if (isCustFineInterestCalculated)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00066, funcName());
            }
            else if (isVendFineInterestCalculated)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00065, funcName());
            }

        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version     = RunBase::getVersion(_packedClass);
        container   packedTransList;
        container packedPaymProposal;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedTransList, packedPaymProposal] = _packedClass;

                if (packedTransList)
                {
                    transList = List::create(packedTransList);
                }

                if (packedPaymProposal != conNull())
                {
                    if (paymProposal == null)
                    {
                        paymProposal = CustVendPaymProposal::newLedgerJournal(ledgerJournalId);
                    }

                    paymProposal.unpack(packedPaymProposal);
                }

                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFine_BR</Name>
				<Source><![CDATA[
    public void updateFine_BR(CustVendPaymProposalLine  _paymProposalLine,
                              CustVendTransOpen         _custVendTransOpen,
                              CustVendTrans             _custVendTrans,
                              LedgerJournalType         _journalType,
                              TransDate                 _paymDate)
    {
        CustVendFine_BR             custVendFine;
        CustTransOpen               custTransOpen;
        VendTransOpen               vendTransOpen;
        SpecTrans                   specTrans;
        CustVendPaymProposalLine    custVendPaymProposalLineFieldList;
        CustVendTransOpenData       custVendTransOpenData;
        FineCalculator_BR           fineCalc;
        AmountCur                   specBalance;

        custVendTransOpenData   = CustVendTransOpenData::construct(_custVendTransOpen);

        select firstonly forupdate crosscompany Balance01, SpecCompany from specTrans
            where specTrans.RefRecId == _custVendTransOpen.RecId
                && specTrans.RefTableId == _custVendTransOpen.TableId
                && specTrans.RefCompany == _custVendTransOpen.company()
            join PaymDate, PaymMode from custVendPaymProposalLineFieldList
                where custVendPaymProposalLineFieldList.JournalId == ledgerJournalId
                    && custVendPaymProposalLineFieldList.TableId == specTrans.SpecTableId
                    && custVendPaymProposalLineFieldList.RecId == specTrans.SpecRecId;

        if (_journalType == LedgerJournalType::CustPayment || _journalType == LedgerJournalType::Payment)
        {
            custVendFine       = _custVendTransOpen.custVendTransOpen::custVendFine_BR();
        }

        specBalance = specTrans.Balance01 - _custVendTransOpen.FineAmount_BR;

        fineCalc = new FineCalculator_BR(custVendFine,
                                         _paymDate,
                                         _custVendTransOpen.DueDate,
                                         _custVendTransOpen.AmountCur,
                                         custVendTransOpenData.custVendTrans().CurrencyCode,
                                         _custVendTransOpen.getCalendarDerivation_BR());

        if ((_journalType == LedgerJournalType::CustPayment && _custVendTransOpen.AmountCur > 0) ||
            (_journalType == LedgerJournalType::Payment &&_custVendTransOpen.AmountCur < 0))
        {
            _custVendTransOpen.FineAmount_BR = fineCalc.calculate();
        }
        else
        {
            _custVendTransOpen.FineAmount_BR = 0;
        }

        // updating Fine Amount Payment Currency
        _custVendTransOpen.FineAmountPaymCur_BR = this.convertAmountTransCurToAmountPaymCur_BR(_custVendTransOpen.FineAmount_BR, _paymProposalLine, specTrans, _custVendTransOpen);

        specBalance = specBalance + _custVendTransOpen.FineAmount_br;

        ttsbegin;
        changecompany(specTrans.SpecCompany)
        {
            specTrans.Balance01 = specBalance;
            specTrans.update();
        }

        changecompany(_custVendTransOpen.company())
        {
            if (_journalType == LedgerJournalType::CustPayment)
            {
                select firstonly forupdate custTransOpen
                    where custTransOpen.RecId == _custVendTransOpen.RecId;

                custTransOpen.FineAmount_BR        = _custVendTransOpen.FineAmount_BR;
                custTransOpen.FineAmountPaymCur_BR = _custVendTransOpen.FineAmountPaymCur_BR;
                custTransOpen.update();
            }
            else if (_journalType == LedgerJournalType::Payment)
            {
                select firstonly forupdate vendTransOpen
                    where vendTransOpen.RecId == _custVendTransOpen.RecId;

                vendTransOpen.FineAmount_BR        = _custVendTransOpen.FineAmount_BR;
                vendTransOpen.FineAmountPaymCur_BR = _custVendTransOpen.FineAmountPaymCur_BR;
                vendTransOpen.update();
            }
        }
        ttscommit;

        paymProposal.removeCustVendTransOpen(_custVendTransOpen);
        paymProposal.addCustVendTransOpen(_custVendTransOpen,
                                          _paymDate,
                                          custVendTransOpenData.custVendTrans().CurrencyCode,
                                          specBalance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInterest_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the interest
    /// </summary>
    /// <param name="_custVendPaymProposalLine">
    /// The <c>CustVendPaymProposalLine</c> table record
    /// </param>
    /// <param name="_custVendTransOpen">
    /// The <c>CustVendTransOpen</c> table record
    /// </param>
    /// <param name="_custVendTrans">
    /// The <c>CustVendTrans</c> table record
    /// </param>
    /// <param name="_journalType">
    /// The journal type
    /// </param>
    /// <param name="_paymDate">
    /// The payment date
    /// </param>
    public void updateInterest_BR(
                                     CustVendPaymProposalLine   _custVendPaymProposalLine,
                                     CustVendTransOpen          _custVendTransOpen,
                                     CustVendTrans              _custVendTrans,
                                     LedgerJournalType          _journalType,
                                     TransDate                  _paymDate)
    {
        CustVendInterest_BR         custVendFinInterest;
        CustTransOpen               custTransOpen;
        VendTransOpen               vendTransOpen;
        SpecTrans                   specTrans;
        CustVendPaymProposalLine    custVendPaymProposalLineFieldList;
        CustVendTransOpenData       custVendTransOpenData;

        InterestCalculator_Br       finInterestCalc;
        AmountCur                   specBalance;

        custVendTransOpenData   = CustVendTransOpenData::construct(_custVendTransOpen);

        select firstonly forupdate crosscompany Balance01, SpecCompany from specTrans
            where specTrans.RefRecId == _custVendTransOpen.RecId
                && specTrans.RefTableId == _custVendTransOpen.TableId
                && specTrans.RefCompany == _custVendTransOpen.company()
            join PaymDate, PaymMode from custVendPaymProposalLineFieldList
                where custVendPaymProposalLineFieldList.JournalId == ledgerJournalId
                    && custVendPaymProposalLineFieldList.TableId == specTrans.SpecTableId
                    && custVendPaymProposalLineFieldList.RecId == specTrans.SpecRecId;

        if (_journalType == LedgerJournalType::CustPayment ||
            _journalType == LedgerJournalType::Payment)
        {
            custVendFinInterest       = _custVendTransOpen.custVendTransOpen::custVendInterest_BR();
        }

        specBalance = specTrans.Balance01 - _custVendTransOpen.InterestAmount_BR;

        finInterestCalc = new InterestCalculator_Br(custVendFinInterest,
                                                    _paymDate,
                                                    _custVendTransOpen.DueDate,
                                                    _custVendTransOpen.AmountCur,
                                                    custVendTransOpenData.custVendTrans().CurrencyCode,
                                                    _custVendTransOpen.getCalendarDerivation_BR());

        if ((_journalType == LedgerJournalType::CustPayment && _custVendTransOpen.AmountCur > 0) ||
            (_journalType == LedgerJournalType::Payment &&_custVendTransOpen.AmountCur < 0))
        {
            _custVendTransOpen.InterestAmount_BR = finInterestCalc.calculate();
        }
        else
        {
            _custVendTransOpen.InterestAmount_BR = 0;
        }

        // updating Interest Amount Payment Currency
        _custVendTransOpen.InterestAmountPaymCur_BR = this.convertAmountTransCurToAmountPaymCur_BR(_custVendTransOpen.InterestAmount_BR, _custVendPaymProposalLine, specTrans, _custVendTransOpen);

        specBalance = specBalance + _custVendTransOpen.InterestAmount_BR;

        ttsbegin;
        changecompany(specTrans.SpecCompany)
        {
            specTrans.Balance01 = specBalance;
            specTrans.update();
        }

        changecompany(_custVendTransOpen.company())
        {
            if (_journalType == LedgerJournalType::CustPayment)
            {
                select  firstonly forupdate crosscompany custTransOpen
                    where custTransOpen.RecId == _custVendTransOpen.RecId;

                custTransOpen.InterestAmount_BR         = _custVendTransOpen.InterestAmount_BR;
                custTransOpen.InterestAmountPaymCur_BR  = _custVendTransOpen.InterestAmountPaymCur_BR;
                custTransOpen.update();
            }
            else if (_journalType == LedgerJournalType::Payment)
            {
                select firstonly forupdate vendTransOpen
                    where vendTransOpen.RecId == _custVendTransOpen.RecId;

                vendTransOpen.InterestAmount_BR         = _custVendTransOpen.InterestAmount_BR;
                vendTransOpen.InterestAmountPaymCur_BR  = _custVendTransOpen.InterestAmountPaymCur_BR;
                vendTransOpen.update();
            }
        }
        ttscommit;

        paymProposal.removeCustVendTransOpen(_custVendTransOpen);
        paymProposal.addCustVendTransOpen(_custVendTransOpen,
                                          _paymDate,
                                          custVendTransOpenData.custVendTrans().CurrencyCode,
                                          specBalance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super();

        if (changePaymMode)
        {
            switch (moduleCustVend)
            {
                case ModuleCustVend::Cust :
                    ret = CustPaymModeTable::checkExist(paymMode) && ret;
                    break;

                case ModuleCustVend::Vend :
                    ret = VendPaymModeTable::checkExist(paymMode) && ret;
                    break;
            }
        }

        if (changePaymSpec)
        {
            switch (moduleCustVend)
            {
                case ModuleCustVend::Cust :
                    ret = CustPaymModeSpec::checkExist(paymSpec) && ret;
                    break;

                case ModuleCustVend::Vend :
                    ret = VendPaymModeSpec::checkExist(paymSpec) && ret;
                    break;
            }
        }

        if (changePaymMode && changePaymSpec)
        {
            switch (moduleCustVend)
            {
                case ModuleCustVend::Cust :
                    ret = CustPaymModeSpec::checkExistForPaymMode(paymSpec, paymMode) && ret;
                    break;

                case ModuleCustVend::Vend :
                    ret = VendPaymModeSpec::checkExistForPaymMode(paymSpec, paymMode) && ret;
                    break;
            }
        }

        if (changeCompanyBankAccount)
        {
            if (changePaymDate)
            {
                ret = BankAccountTable::checkIsActive(companyBankAccountId, paymDate) && ret;
            }
            else
            {
                ret = this.verifyBankAccountWithSeletedTrans() && ret;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendPaymProposalModifyPaymAttributes construct()
    {
        return new CustVendPaymProposalModifyPaymAttributes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS89109";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args   _args)
    {
        CustVendPaymProposalModifyPaymAttributes    modifyPaymAttributes;
        CustVendPaymProposal                        paymProposal;
        SpecTrans                                   specTrans;
        CustVendTransOpen                           custVendTransOpen;
        FormDataSource                              formDS;
        List                                        transList;

        if (_args && _args.parmObject() &&
            (classidget(_args.parmObject()) == classnum(CustVendPaymProposal) ||
             new DictClass(classidget(_args.parmObject())).extend() == classnum(CustVendPaymProposal)))
        {
            modifyPaymAttributes = CustVendPaymProposalModifyPaymAttributes::construct();

            modifyPaymAttributes.getLast();

            // use the CustVendPaymProposal instance from the calling window, this includes reference to CustVendPaymProposalCalcPaym
            paymProposal = _args.parmObject();

            modifyPaymAttributes.initializeFromPaymentProposal(paymProposal);
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        formDS = FormDataUtil::getFormDataSource(_args.record());
        transList = new List(Types::Record);
        custVendTransOpen = paymProposal.custVendTransStatic().custVendTransOpen();

        for (specTrans = formDS.getFirst(true) ? formDS.getFirst(true) : _args.record();
             specTrans;
             specTrans = formDS.getNext())
        {
            select firstonly crossCompany custVendTransOpen
                where custVendTransOpen.DataAreaId == specTrans.RefCompany
                   && custVendTransOpen.TableId == specTrans.RefTableId
                   && custVendTransOpen.RecId   == specTrans.RefRecId;

            transList.addEnd(custVendTransOpen);
        }

        modifyPaymAttributes.parmTransList(transList);

        if (modifyPaymAttributes.prompt())
        {
            modifyPaymAttributes.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPaymProposal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>CustVendPaymProposalModifyPaymAttributes</c> class initialized
    ///    with values from the supplied parameters.
    /// </summary>
    /// <param name="_paymProposal">
    ///    The <c>CustVendPaymProposal</c> object used to initialize the
    ///    <c>CustVendPaymProposalModifyPaymAttributes</c> object.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>CustVendPaymProposalModifyPaymAttributes</c> class.
    /// </returns>
    public static CustVendPaymProposalModifyPaymAttributes newPaymProposal(CustVendPaymProposal _paymProposal)
    {
        CustVendPaymProposalModifyPaymAttributes custVendPaymProposalModifyPaymAttributes;

        custVendPaymProposalModifyPaymAttributes = CustVendPaymProposalModifyPaymAttributes::construct();

        custVendPaymProposalModifyPaymAttributes.initializeFromPaymentProposal(_paymProposal);

        return custVendPaymProposalModifyPaymAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromPaymentProposal</Name>
				<Source><![CDATA[
    private void initializeFromPaymentProposal(CustVendPaymProposal _paymProposal)
    {
        this.parmPaymProposal(_paymProposal);
        this.parmLedgerJournalId(_paymProposal.ledgerJournalId());
        this.parmModuleCustVend(_paymProposal.custVendTransStatic().moduleCustVend());
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyBankAccountWithSeletedTrans</Name>
				<Source><![CDATA[
    private boolean verifyBankAccountWithSeletedTrans()
    {
        ListEnumerator transListEnumerator = transList.getEnumerator();
        while (transListEnumerator.moveNext())
        {
            CustVendTransOpen custVendTransOpen = transListEnumerator.current();
            CustVendPaymProposalLine custVendPaymProposalLine = paymProposal.trans2PaymLine(custVendTransOpen);

            if (!BankAccountTable::checkIsActive(CompanyBankAccountId, custVendPaymProposalLine.PaymDate))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>