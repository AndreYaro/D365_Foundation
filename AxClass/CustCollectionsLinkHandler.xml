<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionsLinkHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// CustCollectionsLinkHandler handles linking between CustCollections objects
/// </summary>
class CustCollectionsLinkHandler
{
    Object caller;
    CustCollectionsLinkContext context;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>callBackCaller</Name>
				<Source><![CDATA[
    private void callBackCaller()
    {
        var iCollections = caller as CustCollectionsICallbackRequest;

        if (iCollections)
        {
            iCollections.linkActionCompleted(context);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaller</Name>
				<Source><![CDATA[
    public Object parmCaller(Object _caller = caller)
    {
        caller = _caller;
        return caller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContext</Name>
				<Source><![CDATA[
    public CustCollectionsLinkContext parmContext(CustCollectionsLinkContext _context = context)
    {
        context = _context;
        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLink</Name>
				<Source><![CDATA[
    private void removeLink(TableId _tableId, RecId _recId, ListEnumerator _reference)
    {
        CustCollectionsLinkTable linkTable;

        while (_reference.moveNext())
        {
            delete_from linkTable
                where linkTable.PrimaryRecId == _recId
                    && linkTable.RefRecId == _reference.current()
                    && linkTable.InstanceRelationType == _tableId;
        }
        _reference.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesActivityAndCaseLinkExist</Name>
				<Source><![CDATA[
    private boolean doesActivityAndCaseLinkExist(smmActivityNumber _activityNum, CaseRecId _caseRecId)
    {
        smmActivityParentLinkTable parentTable;

        select firstonly RecId from parentTable
            where parentTable.RefRecId == _caseRecId
                && parentTable.ActivityNumber == _activityNum
                && parentTable.ParentType == smmActivityParentType::Case;

        return parentTable.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>associateTransactionsToCases</Name>
				<Source><![CDATA[
    private void associateTransactionsToCases(RecId _primaryRecId, RecId _referenceRecId, NoYes _removeFromCase = NoYes::No)
    {
        CustTrans custTrans;
        custTrans.RecId = _referenceRecId;

        if (!_removeFromCase && !smmAssociationLink::doesCaseAssociationExist(NoYes::No, custTrans, _primaryRecId))
        {
            smmAssociationLink::createCaseAssociation(NoYes::No, custTrans, _primaryRecId);
        }
        else if (_removeFromCase)
        {
            CaseAssociation caseAssociation;

            delete_from caseAssociation
                where caseAssociation.CaseRecId == _primaryRecId
                    && caseAssociation.RefRecId == _referenceRecId
                    && caseAssociation.EntityType == CaseEntityType::CustTrans
                    && caseAssociation.IsPrimary == NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>associateActivitiesToCases</Name>
				<Source><![CDATA[
    private void associateActivitiesToCases(RecId _primaryRecId, RecId _referenceRecId, NoYes _removeFromCase = NoYes::No)
    {
        CustCollectionsLinkCasesActivities linkTable;
        smmActivities activity;
        container allCompanies = CustVendOpenTransManager::findSharedServiceCompanies(curext());

        select firstonly crosscompany: allcompanies ActivityNumber, DataAreaId from activity
            where activity.RecId == _referenceRecId;

        if (activity && !_removeFromCase)
        {
            changecompany(activity.company())
            {
                if (!this.doesActivityAndCaseLinkExist(activity.ActivityNumber, _primaryRecId))
                {
                    smmActivityParentLink::insertLink(activity.ActivityNumber,  smmActivityParentType::Case, _primaryRecId);
                }
            }

            linkTable.RefRecId = _referenceRecId;
            linkTable.PrimaryRecId = _primaryRecId;
            linkTable.insert();
        }
        else if (activity && _removeFromCase)
        {
            smmActivityParentLinkTable parentTable;

            changecompany(activity.company())
            {
                delete_from parentTable
                    where parentTable.ActivityNumber == activity.ActivityNumber
                        && parentTable.ParentType == smmActivityParentType::Case
                        && parentTable.RefRecId == _primaryRecId;
            }

            delete_from linkTable
                where linkTable.PrimaryRecId == _primaryRecId
                    && linkTable.RefRecId == _referenceRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCaseAssociation</Name>
				<Source><![CDATA[
    private void createCaseAssociation(Common _recordType, ListEnumerator _primary, ListEnumerator _reference, NoYes _removeFromCase = NoYes::No)
    {
        while (_primary.moveNext())
        {
            while (_reference.moveNext())
            {
                switch (_recordType.TableId)
                {
                    case tableNum(CustTrans):
                        this.associateTransactionsToCases(_primary.current(), _reference.current(), _removeFromCase);
                        break;
                    case tableNum(smmActivities):
                        this.associateActivitiesToCases(_primary.current(), _reference.current(), _removeFromCase);
                        break;
                }
            }
            _reference.reset();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLink</Name>
				<Source><![CDATA[
    private void createLink(TableId _tableId, RecId _recId, ListEnumerator _reference)
    {
        var linkTable = new DictTable(_tableId).makeRecord();
        var primaryField = fieldName2id(_tableId, 'PrimaryRecId');
        var refField = fieldName2Id(_tableId, 'RefRecId');

        while (_reference.moveNext())
        {
            linkTable.(primaryField) =  _recId;
            linkTable.(refField) = _reference.current();
            linkTable.insert();
        }
        _reference.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkRecords</Name>
				<Source><![CDATA[
    private void linkRecords(Common _linkBuffer, ListEnumerator _primary, ListEnumerator _reference, NoYes _removeLink = NoYes::No)
    {
        while (_primary.moveNext())
        {
            if (_removeLink == NoYes::No)
            {
                this.createLink(_linkBuffer.TableId, _primary.current(), _reference);
            }
            else
            {
                this.removeLink(_linkBuffer.TableId, _primary.current(), _reference);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run CustCollectionsLinkHandler class dependent on CustCollectionsLinkContext action
    /// </summary>
    public void run()
    {
        Common buffer;
        ListEnumerator primaryEnumerator = context.parmPrimaryList().getEnumerator();
        ListEnumerator referenceEnumerator = context.parmReferenceList().getEnumerator();

        switch (context.parmAction())
        {
            case CustCollectionsLinkAction::LinkActivityAndTransaction:
                this.linkRecords(buffer as CustCollectionsLinkActivitiesCustTrans, primaryEnumerator, referenceEnumerator);
                break;
            case CustCollectionsLinkAction::UnlinkActivityAndTransaction:
                this.linkRecords(buffer as CustCollectionsLinkActivitiesCustTrans, primaryEnumerator, referenceEnumerator, NoYes::Yes);
                break;
            case CustCollectionsLinkAction::LinkActivitiesToCase:
                this.createCaseAssociation(buffer as smmActivities, primaryEnumerator, referenceEnumerator);
                break;
            case CustCollectionsLinkAction::UnlinkActivitiesFromCase:
                this.createCaseAssociation(buffer as smmActivities, primaryEnumerator, referenceEnumerator, NoYes::Yes);
                break;
            case CustCollectionsLinkAction::LinkTransactionsToCase:
                this.createCaseAssociation(buffer as CustTrans, primaryEnumerator, referenceEnumerator);
                break;
            case CustCollectionsLinkAction::UnlinkTransactionsFromCase:
                this.createCaseAssociation(buffer as CustTrans, primaryEnumerator, referenceEnumerator, NoYes::Yes);
                break;
            case CustCollectionsLinkAction::CloseCase:
                while (primaryEnumerator.moveNext())
                {
                    CustCollectionsCaseDetail::closeCase(
                        primaryEnumerator.current(),
                        CustTable::findByPartyRecId(context.parmDirPartyRecId()).RecId,
                        context.parmHandleDisputedTransactions());
                }
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (caller)
        {
            this.callBackCaller();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContextFromCaller</Name>
				<Source><![CDATA[
    private void setContextFromCaller(Object _caller, CustCollectionsLinkAction _action)
    {
        caller = _caller;
        var iCollections = caller as CustCollectionsICallbackRequest;

        if (iCollections)
        {
            context = iCollections.getLinkContext(_action);
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize and run CustCollectionsLinkHandler class
    /// </summary>
    /// <param name = "_args">Args containing CustCollectionsLinkAction and caller to determine use of class</param>
    public static void main(Args _args)
    {
        var handler = new CustCollectionsLinkHandler();

        handler.setContextFromCaller(_args.caller(), _args.parmEnum());
        handler.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustCollectionsLinkHandler construct()
    {
        return new CustCollectionsLinkHandler();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>