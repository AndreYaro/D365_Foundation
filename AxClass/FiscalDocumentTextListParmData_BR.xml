<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentTextListParmData_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>FiscalDocumentTextListParmData_BR</c> provides functions to Fiscal document texts list.
/// </summary>
class FiscalDocumentTextListParmData_BR
{
    List             textList;
    ListEnumerator   textEnumerator;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a Fiscal document text to the list.
    /// </summary>
    /// <param name="_textParmData">
    /// A instance of class <c>FiscalDocumentTextParmData_BR</c>.
    /// </param>
    public void add(FiscalDocumentTextParmData_BR _textParmData)
    {
        if (!this.hasEqual(_textParmData))
        {
            textList.addEnd(_textParmData);
            textEnumerator = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a Fiscal document text object from a given TextID.
    /// </summary>
    /// <param name="_textID">
    /// The TextID (<c>FiscalDocumentTextID_BR</c>) that indexes a Fiscal document source textParmData (table <c>FiscalDocumentSourceText_BR</c>).
    /// </param>
    /// <param name="_type">
    /// The type (<c>FiscalDocumentTextType_BR</c>) to be assigned to newly created Fiscal document text. Optional.
    /// </param>
    /// <param name="_tagReplacer">
    /// An optional <c>FiscalDocumentTextTagReplacer_BR</c> to replace tags from the text.
    /// </param>
    /// <remarks>
    /// An instance of the class <c>FiscalDocumentTextParmData_BR</c>.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Thrown if there is no Document type configured at Brazil parameters.
    /// </exception>
    public void addText(FiscalDocumentTextID_BR             _textID,
                        FiscalDocumentTextType_BR           _type   = FiscalDocumentTextType_BR::Blank,
                        FiscalDocumentTextTagReplacer_BR    _tagReplacer = null)
    {
        FiscalDocumentTextParmData_BR           textParmData;
        FiscalDocumentSourceText_BR             sourceText;
        FiscalDocSourceTextReferenceProcess_BR  sourceTextReferenceProcess;
        FiscalDocumentRefProcessParmData_BR     fiscalDocumentRefProcessParmData;

        sourceText = FiscalDocumentSourceText_BR::findByTextID(_textID);

        if (sourceText)
        {
            textParmData = FiscalDocumentTextParmData_BR::construct();

            textParmData.parmName(sourceText.Name);
            textParmData.parmNotes(sourceText.Notes);
            textParmData.parmRestriction(sourceText.Restriction);
            textParmData.parmFiscalInformation(sourceText.FiscalInformation);
            textParmData.parmTextID(sourceText.TextID);
            textParmData.parmType(_type);

            if (_tagReplacer)
            {
                _tagReplacer.replaceFiscalReferenceTags(textParmData);
                _tagReplacer.replaceTags(textParmData);
            }

            while select sourceTextReferenceProcess
                where sourceTextReferenceProcess.FiscalDocumentSourceText_BR == sourceText.RecId
            {
                fiscalDocumentRefProcessParmData = new fiscalDocumentRefProcessParmData_BR();

                fiscalDocumentRefProcessParmData.parmAgency(sourceTextReferenceProcess.Agency);
                fiscalDocumentRefProcessParmData.parmProcessNumber(sourceTextReferenceProcess.ProcessNumber);
                fiscalDocumentRefProcessParmData.parmConcessionaryActType(sourceTextReferenceProcess.ConcessionaryActType);

                textParmData.addFiscalRefProcess(fiscalDocumentRefProcessParmData);
            }

            this.add(textParmData);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends a list of Fiscal document text to the current list.
    /// </summary>
    /// <param name="_fiscalDocumentList">
    /// A instance of class <c>FiscalDocumentTextListParmData_BR</c>. containing the list of <c>FiscalDocumentTextParmData_BR</c> to be appended.
    /// </param>
    public void appendList(FiscalDocumentTextListParmData_BR _fiscalDocumentList)
    {
        FiscalDocumentTextParmData_BR   fiscalDocumentText;

        _fiscalDocumentList.reset();
        while (_fiscalDocumentList.moveNext())
        {
            fiscalDocumentText = _fiscalDocumentList.getCurrent();
            this.add(fiscalDocumentText);
        }

        textEnumerator = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllTextsAsString</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the set of fiscal document texts contatenated into a single string.
    /// </summary>
    /// <param name="_separator">
    ///     The string to be used to separate each text from another when building the final contatenated string.
    /// </param>
    /// <returns>
    ///     A string with the contatenation of all fiscal document texts existing in the list.
    /// </returns>
    public str getAllTextsAsString(str _separator = ' ')
    {
        container                       allTexts;
        ListEnumerator                  le;
        FiscalDocumentTextParmData_BR   textParmData;

        le = textList.getEnumerator();
        while (le.moveNext())
        {
            textParmData = le.current();
            allTexts += textParmData.parmNotes();
        }

        return con2Str(allTexts, _separator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the number of Fiscal document texts in the list.
    /// </summary>
    /// <returns>
    /// The number of elements.
    /// </returns>
    public int getCount()
    {
        return textList.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the current Fiscal document text.
    /// </summary>
    /// <returns>
    /// An instance of <c>FiscalDocumentTextParmData_BR</c>.
    /// </returns>
    public FiscalDocumentTextParmData_BR getCurrent()
    {
        if (!textEnumerator)
        {
            textEnumerator = textList.getEnumerator();
        }

        return textEnumerator.current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasEqual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the list have an equal Fiscal document text to the given one.
    /// </summary>
    /// <param name="_candidateText">
    /// The <c>FiscalDocumentTextParmData_BR</c> to be searched.
    /// </param>
    /// <returns>
    /// True if the list has an equal Fiscal document text; false if has not.
    /// </returns>
    /// <remarks>
    /// This method is similar to exists() in other containers, but it uses isEqual() method from <c>FiscalDocumentTextParmData_BR</c>.
    /// </remarks>
    /// <seealso>
    /// See class <c>FiscalDocumentTextParmData_BR</c>.
    /// </seealso>
    private boolean hasEqual(FiscalDocumentTextParmData_BR _candidateText)
    {
        boolean                         found;
        ListEnumerator                  le;
        FiscalDocumentTextParmData_BR   thisTextParmData;

        le = textList.getEnumerator();
        while (le.moveNext())
        {
            thisTextParmData = le.current();

            if (thisTextParmData.isEqual(_candidateText))
            {
                found = true;
                break;
            }
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEqual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the Fiscal document text list has the same Fiscal document texts as another one.
    /// </summary>
    /// <param name="_otherList">
    /// The other instance of <c>FiscalDocumentTextListParmData_BR</c> to be compared against.
    /// </param>
    /// <returns>
    /// True if they are equal; false if not.
    /// </returns>
    public boolean isEqual(FiscalDocumentTextListParmData_BR _otherList)
    {
        boolean found;

        if (this.getCount() == _otherList.getCount())
        {
            found = true;

            _otherList.reset();
            while (_otherList.moveNext())
            {
                if (!this.hasEqual(_otherList.getCurrent()))
                {
                    found = false;
                    break;
                }
            }
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Move the internal enumerator to the next Fiscal document text.
    /// </summary>
    /// <returns>
    /// True if there is a next Fiscal document text, false if it reached the end.
    /// </returns>
    /// <remarks>
    /// The internal enumerator is reset after calls to methods <c>addFiscalDocumentText()</c>, <c>moveLegalTextsTo()</c> and <c>removeDuplicates()</c>.
    /// </remarks>
    public boolean moveNext()
    {
        if (!textEnumerator)
        {
            textEnumerator = textList.getEnumerator();
        }

        return textEnumerator.moveNext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        textList = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeDuplicates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove all Fiscal document texts that have the sames Notes parameter.
    /// </summary>
    /// <returns>
    /// The number of Fiscal document texts removed.
    /// </returns>
    /// <remarks>
    /// It should be used after the tag replacements.
    /// In case of duplicates the text with Fiscal information = true (Legal texts) is kept.
    /// </remarks>
    public int removeDuplicates()
    {
        Set                          removeList   = new Set(Types::Class);
        Set                          notesList    = new Set(Types::String);
        ListIterator                   le;
        FiscalDocumentTextParmData_BR textParmData;

        if (!textList.empty())
        {
            le = new ListIterator( textList);
            while (le.more())
            {
                textParmData = le.value();

                if (textParmData.parmFiscalInformation() == NoYes::Yes
                    &&  !notesList.add(textParmData.parmNotes()))
                {
                    removeList.add(textParmData);
                }
                le.next();
            }

            le.begin();
            while (le.more())
            {
                textParmData = le.value();

                if (textParmData.parmFiscalInformation() == NoYes::No
                    &&  !notesList.add(textParmData.parmNotes()))
                {
                    removeList.add(textParmData);
                }
                le.next();
            }

            le.begin();
            while (le.more())
            {
                if (removeList.in(le.value()))
                {
                    le.delete();
                }
                else
                {
                    le.next();
                }
            }
        }

        textEnumerator = null;

        return removeList.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the internal enumerator of Fiscal document texts.
    /// </summary>
    public void reset()
    {
        if (!textEnumerator)
        {
            textEnumerator = textList.getEnumerator();
        }
        else
        {
            textEnumerator.reset();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FiscalDocumentTextListParmData_BR construct()
    {
        return new FiscalDocumentTextListParmData_BR();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>