<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalFormTrans_TagCount</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventJournalFormTrans_TagCount extends InventJournalFormTrans implements InventDistinctProductOrderDefaulting
{
    InventDimCtrl_Frm_TagCounting   inventDimFormSetup;
    InventJournalTrans_Tag          inventJournalTrans_Tag;

    PdsCWFormCtrl                   cwFormCtrl;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>datasourceActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method performs a call to the cwFormCtrl
    /// dataSourceActivePost if necessary.
    /// </summary>
    /// <remarks>
    /// <syntax>
    /// public void datasourceActivePost()
    /// </syntax>
    /// </remarks>
    public void datasourceActivePost()
    {
        super();

        if (#PdsCatchWeightEnabled
            && cwFormCtrl)
        {
            cwFormCtrl.dataSourceActivePost();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim_fieldModified_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method invoked instead of the <c>InventDim</c> fields' modified() methods.
    /// </summary>
    /// <param name = "_formDataObject">The field's <c>FormDataObject</c> object.</param>
    public void inventDim_fieldModified_OnModified(FormDataObject _formDataObject)
    {
        _formDataObject.modified();

        InventDim inventDimLocal = inventDim_ds.cursor();

        if (!InventDistinctProductValidator::construct().isDistinctProductFullySpecified(inventJournalTrans_Tag.ItemId, inventDimLocal))
        {
            return;
        }

        inventJournalTrans_Tag.setInventDimId(InventDim::findOrCreate(inventDimLocal).inventDimId);

        var inventDistinctProductOrderDefaultingController = InventDistinctProductOrderDefaultingController::constructFromFieldId(_formDataObject.fieldId());
        var defaultingArguments = InventDistinctProductDimensionSpecificDefaultingArgs::construct(inventJournalTrans_Tag.inventTable(), false, InventItemOrderSetupType::Invent);

        this.setInventDim(inventDistinctProductOrderDefaultingController.inventDimModified(this,
                                                                                     inventDimLocal,
                                                                                     defaultingArguments));
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandlersOnInventDimDataSource</Name>
				<Source><![CDATA[
    public void registerEventHandlersOnInventDimDataSource()
    {
        ListEnumerator enumerator  = InventDim::dimFieldsList().getEnumerator();

        while (enumerator.moveNext())
        {
            FieldId dimFieldId = enumerator.current();
            inventDim_ds.object(dimFieldId).registerOverrideMethod(methodStr(FormDataObject, Modified), methodStr(InventJournalFormTrans_TagCount, inventDim_fieldModified_OnModified), this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceCreatePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>datasourceCreatePre</c> method from the <c>PdsCWFormCtrl</c> class if it is required.
    /// </summary>
    public void datasourceCreatePre()
    {
        super();

        if (#PdsCatchWeightEnabled
            && cwFormCtrl)
        {
            cwFormCtrl.dataSourceCreatePre();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitPost</Name>
				<Source><![CDATA[
    public void datasourceInitPost(JournalTransMap _journalTrans)
    {
        super(_journalTrans);

        inventJournalTrans_Tag  = _journalTrans;

        if (#PdsCatchWeightEnabled && cwFormCtrl)
        {
            cwFormCtrl.dataSourceInitPost(_journalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceWritePost</Name>
				<Source><![CDATA[
    public void datasourceWritePost()
    {
        super();

        if (inventJournalTrans_Tag.InventDimId != inventDim.InventDimId)
        {
            inventDim.data(InventDim::find(inventJournalTrans_Tag.InventDimId));
            inventDim_ds.setCurrent();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceWritePre</Name>
				<Source><![CDATA[
    public void datasourceWritePre()
    {
        ttsbegin;
        inventJournalTrans_Tag.InventDimId    = InventDim::findOrCreate(inventDim).InventDimId;

        super();

        if (#PdsCatchWeightEnabled && cwFormCtrl)
        {
            cwFormCtrl.dataSourceWritePre();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedItemIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedItemIdPost()
    {
        InventDistinctProductOrderDefaultingController::itemIdModified(this, InventDistinctProductDimensionSpecificDefaultingArgs::construct(inventJournalTrans_Tag.inventTable(), true, InventItemOrderSetupType::Invent));

        this.updateDesign(InventDimFormDesignUpdate::FieldChange);

        if (#PdsCatchWeightEnabled && cwFormCtrl)
        {
            cwFormCtrl.fieldModified(cwFormCtrl.parmItemFieldId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedPdsCWQtyPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method performs a call to the cwFormCtrl field modified, with
    /// PdsCWQty as a parameter, and performs a data source refresh.
    /// </summary>
    /// <remarks>
    /// <syntax>
    /// public void fieldModifiedPdsCWQtyPost()
    /// </syntax>
    /// </remarks>
    public void fieldModifiedPdsCWQtyPost()
    {
        if (cwFormCtrl)
        {
            InventQty preQty = inventJournalTrans_Tag.Qty;
            cwFormCtrl.fieldModified(fieldnum(InventJournalTrans_Tag,PdsCWQty));
            if (inventJournalTrans_Tag.Qty != preQty)
            {
                FormDataUtil::getFormDataSource(inventJournalTrans_Tag).refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQtyPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>fieldModified</c> method in the PdsCWFormCtrl class by using the <c>Qty</c> value as a
    /// parameter, and performs a data source refresh.
    /// </summary>
    public void fieldModifiedQtyPost()
    {
        if (#PdsCatchWeightEnabled
            && cwFormCtrl)
        {
            cwFormCtrl.fieldModified(fieldnum(InventJournalTrans_Tag,Qty));
            FormDataUtil::getFormDataSource(inventJournalTrans_Tag).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedUnitIdPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method performs a call to the cwFormCtrl field modified, with
    /// UnitId as a parameter, and performs a data source refresh.
    /// </summary>
    /// <remarks>
    /// <syntax>
    /// public void fieldModifiedUnitIdPost()
    /// </syntax>
    /// </remarks>
    public void fieldModifiedUnitIdPost()
    {
        if (cwFormCtrl)
        {
            InventQty preQty = inventJournalTrans_Tag.Qty;
            cwFormCtrl.fieldModified(fieldnum(InventJournalTrans_Tag,UnitID));
            if (inventJournalTrans_Tag.Qty != preQty)
            {
                FormDataUtil::getFormDataSource(inventJournalTrans_Tag).refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidateItemId</Name>
				<Source><![CDATA[
    public boolean fieldValidateItemId()
    {
        inventJournalTrans_Tag.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
        InventDimId inventDimId = inventJournalTrans_Tag.InventDimId;

        boolean ret = inventJournalTrans_Tag.validateField(fieldNum(InventJournalTrans_Tag, ItemId));

        if (inventJournalTrans_Tag.InventDimId != inventDimId)
        {
            inventDim.data(InventDim::find(inventJournalTrans_Tag.InventDimId));
            inventDim_ds.setCurrent();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    public InventDimCtrl_Frm_TagCounting inventDimSetupObject()
    {
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCWFormCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the cwFormCtrl.
    /// </summary>
    /// <param name="_cwFormCtrl">
    /// The CW form control to be set.
    /// </param>
    /// <returns>CW Form control class</returns>
    /// <remarks>
    /// <syntax>
    /// public PdsCWFormCtrl parmCWFormCtrl(PdsCWFormCtrl _cwFormCtrl)
    /// </syntax>
    /// </remarks>
    public PdsCWFormCtrl parmCWFormCtrl(PdsCWFormCtrl _cwFormCtrl = cwFormCtrl)
    {
        if (!prmisdefault(_cwFormCtrl))
        {
            cwFormCtrl = _cwFormCtrl;
        }

        return cwFormCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    protected void updateDesign(InventDimFormDesignUpdate _mode)
    {
        switch (_mode)
        {
            case InventDimFormDesignUpdate::Init          :
                if (!inventDimFormSetup)
                {
                    inventDimFormSetup  = InventDimCtrl_Frm_TagCounting::newFromForm(formRun);
                }
                // no break
            case InventDimFormDesignUpdate::Active        :
                InventJournalTable inventJournalTable = journalFormTable.journalTableData().journalTable();
                inventDimFormSetup.initParmFixed(inventJournalTable.InventDimFixed);
                inventDimFormSetup.formActiveSetup(InventDimGroupSetup::newItemId(inventJournalTrans_Tag.ItemId));
                inventDimFormSetup.formSetControls(true);
                break;

            case InventDimFormDesignUpdate::LinkActive:
                inventJournalTable = journalFormTable.journalTableData().journalTable();
                inventDimFormSetup.initParmFixed(inventJournalTable.InventDimFixed);
                break;

            case InventDimFormDesignUpdate::FieldChange   :
                inventDimFormSetup.formActiveSetup(InventDimGroupSetup::newItemId(inventJournalTrans_Tag.ItemId));
                inventDimFormSetup.formSetControls(false);
                break;

            default :
                throw error(strFmt("@SYS54195",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStorageDimensionsFromHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes storage dimensions from header.
    /// </summary>
    public void initStorageDimensionsFromHeader()
    {
        InventJournalTable inventJournalTable = journalFormTable.journalTableData().journalTable();

        if (inventJournalTable.InventSiteId)
        {
            inventDim.InventSiteId = inventJournalTable.InventSiteId;
        }

        if (inventJournalTable.InventLocationId)
        {
            inventDim.InventLocationId = inventJournalTable.InventLocationId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>InventDim</c> record buffer.
    /// </summary>
    /// <param name = "_inventDim">An <c>InventDim</c> record buffer.</param>
    public void setInventDim(InventDim _inventDim)
    {
        inventDim.data(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventDim</c> record buffer.
    /// </summary>
    /// <returns>An <c>InventDim</c> record buffer.</returns>
    public InventDim inventDim()
    {
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReleasedProductSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes settings that are based on the released product.
    /// </summary>
    /// <param name = "_inventTable">An <c>InventTable</c> record buffer.</param>
    public void initReleasedProductSpecificDefaulting(InventTable _inventTable)
    {
        if (inventJournalTrans_Tag.ItemId)
        {
            if (! inventJournalTrans_Tag.checkInitFromInventTable(inventJournalTrans_Tag.inventTable()))
            {
                inventJournalTrans_Tag.ItemId = inventJournalTrans_Tag.orig().ItemId;
                return;
            }

            inventJournalTrans_Tag.initFromInventTable(inventJournalTrans_Tag.inventTable());
            inventDim.data(inventJournalTrans_Tag.inventDim());
        }
        else
        {
            inventDim.data(InventDim::find(InventDim::inventDimIdBlank()));
            inventJournalTrans_Tag.UnitID = '';
        }

        this.initStorageDimensionsFromHeader();

        inventDim_ds.setCurrent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionsSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes product dimension specific order defaulting.
    /// </summary>
    /// <param name = "_inventDistinctProductDimensionSpecificDefaultingArgs">Product dimension specific order defaulting arguments.</param>
    public void initDimensionsSpecificDefaulting(InventDistinctProductDimensionSpecificDefaultingArgs _inventDistinctProductDimensionSpecificDefaultingArgs)
    {
        inventDim_ds.setCurrent();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
