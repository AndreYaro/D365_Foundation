<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPaySheetEngine_Common</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPaySheetEngine_Common extends RPaySheetEngine
{
    #AviFiles
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createSheet</Name>
				<Source><![CDATA[
    public void createSheet()
    {
        RPayTrans               payTrans;
        RPaySheetTrans          rPaySheetTrans;
        RHRMEmplId              tekEmplid ='', curEmplId;
        Amount                  emplAmount = 0;
        RHRMEmplTable           emplTable;
        RpayHRMOrganizationId   currentHrmOrgId;
        NumberSeq               numberSeqLocal;
        SysOperationProgress    operationProgress;
        Map                     sheetTableMap = null, tmpMap;
        MapEnumerator           tmpMapEnumerator, sheetTableMapEnumerator;

        void insertOrUpdateSheetTable(RHRMEmplId _emplId = "")
        {
            ttsbegin;
            currentHrmOrgId = _emplId ? RPayHistory::getHistoryLineByDate(_emplId,
                                                                          this.parmSheetTransDate()).HrmOrganizationId : "";
            if (! sheetTableMap.exists(currentHrmOrgId))
            {
                numberSeqLocal                  = NumberSeq::newGetNum(RPayParameters::numRefSheetNum(),true);
                paySheetTable.clear();
                paySheetTable.Name              = this.description();
                paySheetTable.PaySheetNum       = numberSeqLocal.num();
                paySheetTable.PayPeriod         = endmth(ctrlPayPeriod.dateValue());
                paySheetTable.TransDate         = this.parmSheetTransDate();
                paySheetTable.PaySheetType      = this.paySheetType();
                paySheetTable.PaySheetSost      = RPaySheetSost::NoPaid;
                paySheetTable.PaySheetRound     = RPayParameters::find().PaySheetRound;
                paySheetTable.HrmOrganisationId = currentHrmOrgId;
                paySheetTable.SumSheet          = roundDown(emplAmount, paySheetTable.PaySheetRound);
                paySheetTable.insert();

                tmpMap = new Map(Types::Int64, Types::Class);
                tmpMap.insert(paySheetTable.RecId, numberSeqLocal);
                sheetTableMap.insert(currentHrmOrgId, tmpMap);
            }
            else
            {
                tmpMap           = sheetTableMap.lookup(currentHrmOrgId);
                tmpMapEnumerator = tmpMap.getEnumerator();
                tmpMapEnumerator.moveNext();

                select firstonly forupdate paySheetTable
                    where paySheetTable.HrmOrganisationId == currentHrmOrgId &&
                          paySheetTable.RecId             == tmpMapEnumerator.currentKey();

                 paySheetTable.SumSheet += roundDown(emplAmount,paySheetTable.PaySheetRound);
                 paySheetTable.update();
            }
            ttscommit;
        }

        void updateSheetTrans()
        {
            emplAmount = roundDown(emplAmount,paySheetTable.PaySheetRound);
            if (emplAmount > 0)
            {
                if ((select firstonly forupdate rPaySheetTrans
                        where rPaySheetTrans.Emplid          == tekEmplid &&
                              rPaySheetTrans.SheetTableRecId == paySheetTable.RecId ).RecId != 0)
                {
                    rPaySheetTrans.Amount = emplAmount;
                    rPaySheetTrans.update();
                }
                else
                {
                    rPaySheetTrans.SheetTableRecId = paySheetTable.RecId;
                    rPaySheetTrans.Emplid = tekEmplid;
                    rPaySheetTrans.Amount = emplAmount;
                    rPaySheetTrans.BankPayment = RHRMEmplTable::find(tekEmplid).PayBankPayment;
                    rPaySheetTrans.insert();
                }
            }
            tekEmplid = payTrans.Emplid;
            emplAmount = 0;
        }

        if (! this.paySheetCreateDialog())
        {
            return;
        }

        sheetTableMap = new Map(Types::String, Types::Class);

        switch (this.parmPaySheetTypeCreate())
        {
            case RpaySheetTypeCreate::Plant:
                insertOrUpdateSheetTable();
                this.createSheetTrans(numberSeqLocal);
                if (paySheetTable.SumSheet == 0)
                {
                   paySheetTable.delete();
                }
                sheetTableDs.research();
                return;
            case RpaySheetTypeCreate::SubDivision:
                 break;
        }

        if (this.paySheetCreateQueryDialog())
        {
            this.updateQuery();

            operationProgress = new SysOperationProgress();
            operationProgress.setCaption("@RUP550");
            operationProgress.setAnimation(#AviUpdate);
            operationProgress.setTotal(SysQuery::countTotal(queryRun));

            ttsbegin;

            if (queryRun.next())
            {
                payTrans        =  queryRun.get(tablenum(RPayTrans));
                emplTable       =  queryRun.get(tablenum(RHRMEmplTable));
                tekEmplid       =  payTrans.Emplid;
                curEmplId       =  payTrans.Emplid;
                emplAmount      += payTrans.Amount;
                operationProgress.setText("@RUP372" + emplTable.EmployeeId);
                operationProgress.incCount();
            }
            while (queryRun.next())
            {
                payTrans  = queryRun.get(tablenum(RPayTrans));
                emplTable = queryRun.get(tablenum(RHRMEmplTable));
                operationProgress.setText("@RUP372" + emplTable.EmployeeId);
                operationProgress.incCount();
                curEmplId = payTrans.Emplid;

                if ( payTrans.Emplid != tekEmplid)
                {
                    insertOrUpdateSheetTable(tekEmplid);
                    updateSheetTrans();
                }
                emplAmount += payTrans.Amount;
            }
            insertOrUpdateSheetTable(curEmplId);
            updateSheetTrans();

            sheetTableMapEnumerator = sheetTableMap.getEnumerator();

            while (sheetTableMapEnumerator.moveNext())
            {
                tmpMap           = sheetTableMapEnumerator.currentValue();
                tmpMapEnumerator = tmpMap.getEnumerator();
                tmpMapEnumerator.moveNext();

                select firstonly forupdate paySheetTable
                    where paySheetTable.RecId == tmpMapEnumerator.currentKey();

                if (paySheetTable.SumSheet)
                {
                    numberSeqLocal = tmpMapEnumerator.currentValue();
                    numberSeqLocal.used();
                }
                else
                {
                    paySheetTable.delete();
                }
            }
            ttscommit;

            sheetTableDs.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSheetTrans</Name>
				<Source><![CDATA[
    #AviFiles
    public void createSheetTrans(NumberSeq _numberSeq = null)
    {
        RPayTrans                               payTrans;
        RHRMEmplId                              tekEmplid;
        Amount                                  emplAmount,sumAmount, taxAmount, taxAmountSum, taxAmountSumTotal;
        PaymentOrderBudgetReceiptClassCode_RU   budgetClassCode;
        boolean                                 isBudgetClassCodeChanged;
        SysOperationProgress                    operationProgress;

        void createOrUpdateTrans(boolean _isBudgetClassCodeChanged)
        {
            RPaySheetTrans                          rPaySheetTrans;

            if (RPayParameters::payPeriod(tekEmplId) == endMth(ctrlPayPeriod.dateValue()))
            {
                emplAmount = roundDown(emplAmount, paySheetTable.PaySheetRound);
                if (emplAmount > 0)
                {
                    select forupdate firstonly rPaySheetTrans
                        where rPaySheetTrans.Emplid                 == tekEmplid
                           && (! _isBudgetClassCodeChanged
                                || rPaySheetTrans.BudgetReceiptClassCode == budgetClassCode)
                           && rPaySheetTrans.SheetTableRecId        == paySheetTable.RecId;

                    if (rPaySheetTrans.RecId != 0)
                    {
                        rPaySheetTrans.Amount                 = emplAmount;
                        rPaySheetTrans.TaxAmount              = taxAmountSum;
                        rPaySheetTrans.BudgetReceiptClassCode = budgetClassCode;
                        rPaySheetTrans.update();
                    }
                    else
                    {
                        rPaySheetTrans.SheetTableRecId        = paySheetTable.RecId;
                        rPaySheetTrans.Emplid                 = tekEmplid;
                        rPaySheetTrans.BudgetReceiptClassCode = budgetClassCode;
                        rPaySheetTrans.Amount                 = emplAmount;
                        rPaySheetTrans.TaxAmount              = taxAmountSum;
                        rPaySheetTrans.BankPayment            = RHRMEmplTable::find(tekEmplid).PayBankPayment;
                        if (rPaySheetTrans.TaxAmount != 0 && this.paySheetType() == RPaySheetType::Interim)
                        {
                            rPaySheetTrans.BranchId = RPaySheetEngine::getBranchId(rPaySheetTrans.Emplid, endmth(paySheetTable.PayPeriod));
                        }
                        if (!rPaySheetTrans.validateWrite())
                            throw Exception::Error;
                        rPaySheetTrans.insert();
                    }
                    sumAmount += emplAmount;
                    taxAmountSumTotal += taxAmountSum;
                }
            }
        }

        if (this.paySheetCreateQueryDialog())
        {
            this.updateQuery();

            operationProgress = new SysOperationProgress();
            operationProgress.setCaption("@RUP550");
            operationProgress.setAnimation(#AviUpdate);
            operationProgress.setTotal(SysQuery::countTotal(queryRun));

            ttsbegin;

            if ( queryRun.next())
            {
                payTrans = queryRun.get(tablenum(RPayTrans));

                tekEmplid       = payTrans.Emplid;
                budgetClassCode = paySheetTable.Pn ? payTrans.budgetReceiptClassCode() : '';

                emplAmount      += payTrans.Amount;
                taxAmount       =  this.calcTaxAmount(payTrans);
                taxAmountSum    = taxAmount;

                operationProgress.setText("@RUP372" + payTrans.Emplid);
                operationProgress.incCount();
            }

            while (queryRun.next())
            {
                payTrans = queryRun.get(tablenum(RPayTrans));
                operationProgress.setText("@RUP372" + payTrans.Emplid);
                operationProgress.incCount();

                isBudgetClassCodeChanged = paySheetTable.Pn                  &&
                                           budgetClassCode                   &&
                                           payTrans.budgetReceiptClassCode() &&
                                           payTrans.budgetReceiptClassCode() != budgetClassCode;

                if (payTrans.Emplid != tekEmplid || isBudgetClassCodeChanged)
                {
                    createOrUpdateTrans(isBudgetClassCodeChanged);
                    tekEmplid       = payTrans.Emplid;
                    emplAmount      = 0;
                    taxAmountSum    = 0;
                }

                budgetClassCode = paySheetTable.Pn ? payTrans.budgetReceiptClassCode() : '';

                taxAmount     = this.calcTaxAmount(payTrans);
                emplAmount   += payTrans.Amount;
                taxAmountSum += taxAmount;
            }

            createOrUpdateTrans(true);

            ttscommit;

            if (sumAmount > 0)
            {
                paySheetTable.SumSheet = sumAmount;
                sheetTableDs.write();
                sheetTransDs.research();

                if (_numberSeq)
                {
                    _numberSeq.used();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    protected TempStr description()
    {
        return "@RUP6342";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaySheetTable</Name>
				<Source><![CDATA[
    public void initPaySheetTable()
    {
        super();
        paySheetTable.PaySheetRound = RPayParameters::find().PaySheetRound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FormRun _formRun)
    {
        super(_formRun);
        ctrlCreate.visible(true);
        ctrlDeleteAll.visible(false);
        ctrlPrint.visible(true);
        ctrlPay.visible(true);
        ctrlSetSumm.visible(true);
        ctrlQuery.visible(true);
        ctrlPaySheetType.visible(false);
        ctrlTax.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>passToCash</Name>
				<Source><![CDATA[
    #AviFiles
    public boolean passToCash()
    {
        SysOperationProgress operationProgress;
        RPayTrans            payTrans;
        RPaySheetTrans       paySheetTrans;

        if (! super())
            return false;

        operationProgress = new SysOperationProgress();
        operationProgress.setCaption("@RUP542" + paySheetTable.PaySheetNum);
        operationProgress.setAnimation(#AviUpdate);

        select count(RecId) from paySheetTrans
            where paySheetTrans.SheetTableRecId == paySheetTable.RecId;

        operationProgress.setTotal(paySheetTrans.RecId);

        ttsbegin;

        while select Emplid, Amount, RecId, TableId from  paySheetTrans
            where paySheetTrans.SheetTableRecId == paySheetTable.RecId
        {
            operationProgress.setText("@RUP372" + paySheetTrans.Emplid);
            operationProgress.incCount();
            payTrans.Amount = -paySheetTrans.Amount;
            payTrans.TransDate = paySheetTable.TransDate;
            payTrans.PayPeriod = endmth(ctrlPayPeriod.dateValue());
            payTrans.CorrectedPeriod = endmth(ctrlPayPeriod.dateValue());
            payTrans.SourceDate = endmth(ctrlPayPeriod.dateValue());
            payTrans.SourceTableId = paySheetTrans.TableId;
            payTrans.SourceRecId = paySheetTrans.RecId;
            payTrans.Emplid = paySheetTrans.Emplid;
            payTrans.HrmOrganisationId = RHRMEmplTable::find(paySheetTrans.Emplid).PayHRMOrganizationId;
            payTrans.PayCtype = RPayParameters::find().PayCostMrv;
            payTrans.updatePosting();
            payTrans.doInsert();
        }

        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paySheetType</Name>
				<Source><![CDATA[
    protected RPaySheetType paySheetType()
    {
        return RPaySheetType::Common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormDesign</Name>
				<Source><![CDATA[
    public void updateFormDesign()
    {
        super();
        if (this.canSheetChange(false))
        {
           sheetTableDs.allowCreate(true);
           ctrlCreate.enabled(true);
        }
        else
        {
           sheetTableDs.allowCreate(false);
           ctrlCreate.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    protected void updateQuery()
    {
        super();
        FindOrCreateRange_W(queryRun.query().dataSourceTable(tablenum(RPayTrans)), fieldnum(RPayTrans, TaxRedemption), queryValue(NoYes::No));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>