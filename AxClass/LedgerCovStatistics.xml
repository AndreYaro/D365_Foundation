<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCovStatistics</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class LedgerCovStatistics
{
    private LedgerCovStatisticsContract contract;
    private LedgerCovStatisticsResult result;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateStatistics</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static container calculateStatistics(container _contract)
    {
        LedgerCovStatisticsContract contract = LedgerCovStatisticsContract::construct();
        contract.unpack(_contract);

        LedgerCovStatistics statistics = LedgerCovStatistics::construct();
        statistics.init(contract);

        return statistics.process().pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    private LedgerCovStatisticsResult process()
    {
        //Average Days
        this.calculateCustAverageDaysFromDeliveryToInvoice();
        this.calculateCustAverageDaysFromInvoiceToPayment();

        this.calculateVendAverageDaysFromDeliveryToInvoice();
        this.calculateVendAverageDaysFromInvoiceToPayment();

        //Statistics
        this.processCustomerStatistics();
        this.processVendorStatistics();

        return this.result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCustomerStatistics</Name>
				<Source><![CDATA[
    private void processCustomerStatistics()
    {
        LedgerCovSummaryStatistics summaryStatistics;

        summaryStatistics = LedgerCovSummaryStatistics::newFromModule(ModuleCustVend::Cust, contract.companies, contract.useSystemCurrency);
        this.calculateCustOpenBalance(summaryStatistics);
        this.calculateCustOverDueBalanceAndCount(summaryStatistics);
        this.calculateCustNotDueBalance(summaryStatistics);
        this.calculateCustAmountOverDuePercent(summaryStatistics);
        this.calculateCustDaysSalesOutstanding30Days(summaryStatistics);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processVendorStatistics</Name>
				<Source><![CDATA[
    private void processVendorStatistics()
    {
        LedgerCovSummaryStatistics summaryStatistics;

        summaryStatistics = LedgerCovSummaryStatistics::newFromModule(ModuleCustVend::Vend, contract.companies, contract.useSystemCurrency);
        this.calculateVendOpenBalance(summaryStatistics);
        this.calculateVendOverDueBalanceAndCount(summaryStatistics);
        this.calculateVendNotDueBalance(summaryStatistics);
        this.calculateVendAmountOverDuePercent(summaryStatistics);
        this.calculateVendDaysPurchasesOutstanding30Days(summaryStatistics);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCustAverageDaysFromDeliveryToInvoice</Name>
				<Source><![CDATA[
    private void calculateCustAverageDaysFromDeliveryToInvoice()
    {
        if (contract.shouldCalculateCustAverageDaysFromDeliveryToInvoice)
        {
            result.custAverageDaysFromDeliveryToInvoice = LedgerCovAvgAverageStatistics::calculateAverageDaysFromSelector(
                LedgerCovAvgAverageDaysSelector::CustAverageDaysFromDeliveryToInvoice,
                contract.companies);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateVendAverageDaysFromDeliveryToInvoice</Name>
				<Source><![CDATA[
    private void calculateVendAverageDaysFromDeliveryToInvoice()
    {
        if (contract.shouldCalculateVendAverageDaysFromDeliveryToInvoice)
        {
            result.vendAverageDaysFromDeliveryToInvoice = LedgerCovAvgAverageStatistics::calculateAverageDaysFromSelector(
                LedgerCovAvgAverageDaysSelector::VendAverageDaysFromDeliveryToInvoice,
                contract.companies);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCustAverageDaysFromInvoiceToPayment</Name>
				<Source><![CDATA[
    private void calculateCustAverageDaysFromInvoiceToPayment()
    {
        if (contract.shouldCalculateCustAverageDaysFromInvoiceToPayment)
        {
            result.custAverageDaysFromInvoiceToPayment = LedgerCovAvgAverageStatistics::calculateAverageDaysFromSelector(
                LedgerCovAvgAverageDaysSelector::CustAverageDaysFromInvoiceToPayment,
                contract.companies);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateVendAverageDaysFromInvoiceToPayment</Name>
				<Source><![CDATA[
    private void calculateVendAverageDaysFromInvoiceToPayment()
    {
        if (contract.shouldCalculateVendAverageDaysFromInvoiceToPayment)
        {
            result.vendAverageDaysFromInvoiceToPayment = LedgerCovAvgAverageStatistics::calculateAverageDaysFromSelector(
                LedgerCovAvgAverageDaysSelector::VendAverageDaysFromInvoiceToPayment,
                contract.companies);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCustOpenBalance</Name>
				<Source><![CDATA[
    private void calculateCustOpenBalance(LedgerCovSummaryStatistics _summaryStatistics)
    {
        if (contract.shouldCalculateCustOpenBalance)
        {
            result.custOpenBalance = _summaryStatistics.calculateOpenBalance();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateVendOpenBalance</Name>
				<Source><![CDATA[
    private void calculateVendOpenBalance(LedgerCovSummaryStatistics _summaryStatistics)
    {
        if (contract.shouldCalculateVendOpenBalance)
        {
            result.vendOpenBalance = _summaryStatistics.calculateOpenBalance();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCustOverDueBalanceAndCount</Name>
				<Source><![CDATA[
    private void calculateCustOverDueBalanceAndCount(LedgerCovSummaryStatistics _summaryStatistics)
    {
        if (contract.shouldCalculateCustOverDueBalance
            || contract.shouldCalculateCustOverDueCount)
        {
            [result.custOverDueBalance, result.custOverDueCount] = _summaryStatistics.calculateOverDueBalanceAndCount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateVendOverDueBalanceAndCount</Name>
				<Source><![CDATA[
    private void calculateVendOverDueBalanceAndCount(LedgerCovSummaryStatistics _summaryStatistics)
    {
        if (contract.shouldCalculateVendOverDueBalance
            || contract.shouldCalculateVendOverDueCount)
        {
            [result.vendOverDueBalance, result.vendOverDueCount] = _summaryStatistics.calculateOverDueBalanceAndCount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCustNotDueBalance</Name>
				<Source><![CDATA[
    private void calculateCustNotDueBalance(LedgerCovSummaryStatistics _summaryStatistics)
    {
        if (contract.shouldCalculateCustNotDueBalance)
        {
            result.custNotDueBalance = result.custOpenBalance - result.custOverDueBalance;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateVendNotDueBalance</Name>
				<Source><![CDATA[
    private void calculateVendNotDueBalance(LedgerCovSummaryStatistics _summaryStatistics)
    {
        if (contract.shouldCalculateVendNotDueBalance)
        {
            result.vendNotDueBalance = result.vendOpenBalance - result.vendOverDueBalance;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCustAmountOverDuePercent</Name>
				<Source><![CDATA[
    private void calculateCustAmountOverDuePercent(LedgerCovSummaryStatistics _summaryStatistics)
    {
        if (contract.shouldCalculateCustAmountOverDuePercent)
        {
            if (result.custOpenBalance != 0)
            {
                result.custAmountOverDuePercent = decRound((result.custOverDueBalance / result.custOpenBalance) * 100, 2);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateVendAmountOverDuePercent</Name>
				<Source><![CDATA[
    private void calculateVendAmountOverDuePercent(LedgerCovSummaryStatistics _summaryStatistics)
    {
        if (contract.shouldCalculateVendAmountOverDuePercent)
        {
            if (result.vendOpenBalance != 0)
            {
                result.vendAmountOverDuePercent = decRound((result.vendOverDueBalance / result.vendOpenBalance) * 100, 2);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCustDaysSalesOutstanding30Days</Name>
				<Source><![CDATA[
    private void calculateCustDaysSalesOutstanding30Days(LedgerCovSummaryStatistics _summaryStatistics)
    {
        if (contract.shouldCalculateCustDaysSalesOutstanding30Days)
        {
            AmountCur totalSales30Days = _summaryStatistics.calculateTotalSales(-30);
            if (totalSales30Days != 0)
            {
                result.custDaysSalesOutstanding30Days = real2int(round((result.custOpenBalance / totalSales30Days * 30), 0));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateVendDaysPurchasesOutstanding30Days</Name>
				<Source><![CDATA[
    private void calculateVendDaysPurchasesOutstanding30Days(LedgerCovSummaryStatistics _summaryStatistics)
    {
        if (contract.shouldCalculateVendDaysPurchasesOutstanding30Days)
        {
            AmountCur costOfGoodsSold30Days = _summaryStatistics.calculateCostOfGoodsSold(-30);

            if (costOfGoodsSold30Days != 0)
            {
                result.vendDaysPurchasesOutstanding30Days = real2int(round((result.vendOpenBalance / costOfGoodsSold30Days * 30), 0));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static LedgerCovStatistics construct()
    {
        return new LedgerCovStatistics();;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init(LedgerCovStatisticsContract _contract)
    {
        contract = _contract;

        this.initCustContractDependencies();
        this.initVendContractDependencies();

        result = LedgerCovStatisticsResult::construct();
        result.companies = contract.companies;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustContractDependencies</Name>
				<Source><![CDATA[
    private void initCustContractDependencies()
    {
        if (contract.shouldCalculateCustNotDueBalance)
        {
            contract.shouldCalculateCustOpenBalance = true;
            contract.shouldCalculateCustOverDueBalance = true;
        }

        if (contract.shouldCalculateCustAmountOverDuePercent)
        {
            contract.shouldCalculateCustOpenBalance = true;
            contract.shouldCalculateCustOverDueBalance = true;
        }

        if (contract.shouldCalculateCustDaysSalesOutstanding30Days)
        {
            contract.shouldCalculateCustOpenBalance = true;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendContractDependencies</Name>
				<Source><![CDATA[
    private void initVendContractDependencies()
    {
        if (contract.shouldCalculateVendNotDueBalance)
        {
            contract.shouldCalculateVendOpenBalance = true;
            contract.shouldCalculateVendOverDueBalance = true;
        }

        if (contract.shouldCalculateVendAmountOverDuePercent)
        {
            contract.shouldCalculateVendOpenBalance = true;
            contract.shouldCalculateVendOverDueBalance = true;
        }

        if (contract.shouldCalculateVendDaysPurchasesOutstanding30Days)
        {
            contract.shouldCalculateVendOpenBalance = true;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>