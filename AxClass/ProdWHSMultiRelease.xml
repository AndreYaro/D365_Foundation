<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdWHSMultiRelease</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdWHSMultiRelease</c> class controls the prompt that collects criteria for parts of the production orders to release.
/// </summary>
public class ProdWHSMultiRelease extends ProdMultiRelease implements BatchRetryable
{ 
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ProdWHSMultiRelease prodWHSMultiRelease = ProdWHSMultiRelease::construct(_args);
        
        RunBaseMultiParm::initFromForm(prodWHSMultiRelease, _args);
        
        if (prodWHSMultiRelease.isNotBatchBalanceEnabled()
        &&	prodWHSMultiRelease.prompt())
        {
            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
            {
                prodWHSMultiRelease.releaseToWarehouse();
            }
            prodWHSMultiRelease.refreshCaller(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ProdWHSMultiRelease construct(Args _args = null)
    {
        ProdWHSMultiRelease prodWHSMultiRelease = new ProdWHSMultiRelease();

        return prodWHSMultiRelease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseToWarehouse</Name>
				<Source><![CDATA[
    private void releaseToWarehouse()
    {
        using(var activityContext = ProdInstrumentationLogger::createLogger(classStr(ProdWHSMultiRelease)).whs().multiRelease())
        {
            ProdParmRelease prodParmRelease = this.setProduction();

            while (prodParmRelease)
            {
                ProdWHSRelease::newFromProdParmRelease(prodParmRelease).whsReleaseSingleOrder(ProdTable::find(prodParmRelease.ProdId));

                next prodParmRelease;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the form to use as prompt.
    /// </summary>
    /// <returns>The form name used as a prompt.</returns>
    public formName formName()
    {
        return formstr(ProdParmReleaseToWarehouse);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNotBatchBalanceEnabled</Name>
				<Source><![CDATA[
    private boolean isNotBatchBalanceEnabled()
    {
        ttsbegin;

        boolean			isNotBatchBalanceEnabled;
        ProdParmRelease setProdParmRelease = this.setProductionForUpdate();

        while (setProdParmRelease)
        {
            if (ProdTable::find(setProdParmRelease.ProdId).isBatchBalancingEnabled())
            {
                info(strFmt("@WAX:BatchBalancingEnabled", setProdParmRelease.ProdId));
                setProdParmRelease.delete();
            }
            else
            {
                isNotBatchBalanceEnabled = true;
            }

            next setProdParmRelease;
        }

        ttscommit;

        return isNotBatchBalanceEnabled;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>