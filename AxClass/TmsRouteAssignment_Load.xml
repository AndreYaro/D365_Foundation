<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSRouteAssignment_Load</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Assigns routes to a load.
/// </summary>
class TmsRouteAssignment_Load extends TMSRouteAssignment
{
    WHSLoadId       loadId;
    boolean         isScheduledRoute;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRouteSegmentLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Inserts a route segment load line record.
    /// </summary>
    /// <param name="_segment">
    ///  Segment table record
    /// </param>
    /// <param name="_segmentLine">
    ///  Rate route line record
    /// </param>
    /// <param name="_loadLine">
    ///  Load line record
    /// </param>
    /// <param name="_segmentShipmentRecId">
    ///  Record Id for <c>TMSRouteSegmentShipment</c>
    /// </param>
    private void addRouteSegmentLoadLine(
        TMSRouteSegment     _segment,
        TMSRateRouteLine    _segmentLine,
        WHSLoadLine         _loadLine,
        RecId               _segmentShipmentRecId)
    {
        TMSRouteSegmentLoadLine     line;

        line.RouteCode              = _segment.RouteCode;
        line.Sequence               = _segment.Sequence;
        line.OriginPostalCode       = _segment.originPostalAddress().ZipCode;
        line.DestinationPostalCode  = _segment.destinationPostalAddress().ZipCode;
        line.CurrencyCode           = _segment.CurrencyCode;
        line.InventTransId          = _segmentLine.InventTransId;
        line.Id                     = loadId;
        line.LoadLineRecId          = _loadLine.RecId;
        line.Generated              = NoYes::Yes;
        line.ShipmentRefRecId       = _segmentShipmentRecId;
        line.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignSegmentLinesToSegment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ties the segment load lines to the segment
    /// </summary>
    /// <param name="_segment">
    /// Segment table record
    /// </param>
    /// <param name="_segmentTable">
    /// Staging record for segment
    /// </param>
    public void assignSegmentLinesToSegment(TMSRouteSegment _segment, TMSRouteSegmentTable _segmentTable)
    {
        TMSRateRouteLine            segmentLine;
        WHSLoadLine                 loadLine;
        TMSRouteSegmentShipment     segmentShipment;

        if (isScheduledRoute && !TMSFeatureFlightState::TMSDistributeShipmentToRouteSegmentFeature())
        {
            select InventTransId, LoadLineRecId from segmentLine
                where segmentLine.RefTableId    == _segmentTable.TableId
                   && segmentLine.RefRecId      == _segmentTable.RecId;

            loadLine    = WHSLoadLine::findbyRecId(segmentLine.LoadLineRecId);
            loadId      = loadLine.LoadId;

            segmentShipment= TMSRouteSegmentShipment::find(_segment.RouteCode, _segment.Sequence, loadLine.ShipmentId);
            this.addRouteSegmentLoadLine(_segment, segmentLine, loadLine, segmentShipment.RecId);

            this.setLoadAndShipmentXRef(_segment, loadLine);
        }
        else
        {
            while select InventTransId, LoadLineRecId from segmentLine
                where segmentLine.RefTableId    == _segmentTable.TableId
                   && segmentLine.RefRecId      == _segmentTable.RecId
            {
                loadLine    = WHSLoadLine::findbyRecId(segmentLine.LoadLineRecId);
                loadId      = loadLine.LoadId;

                segmentShipment= TMSRouteSegmentShipment::find(_segment.RouteCode, _segment.Sequence, loadLine.ShipmentId);
                this.addRouteSegmentLoadLine(_segment, segmentLine, loadLine, segmentShipment.RecId);

                this.setLoadAndShipmentXRef(_segment, loadLine);
            }
        }

        this.assignRouteRateDetail(segmentShipment, _segmentTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluateSegments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evalutes segments of a routeTable and eitehr updates scheduled route segements or adds new segements to the route.
    /// </summary>
    protected void evaluateSegments()
    {
        TMSRouteSegmentTable segmentTable;

        while select segmentTable
            where segmentTable.RouteRecId == routeTable.RecId
        {
            // Segments have already been generated for scheduledRoutes
            if (route.RouteSchedule != 0)
            {
                isScheduledRoute = true;

                this.updateSegmentOnRoute(segmentTable);
            }
            else
            {
                this.addSegmentToRoute(segmentTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findValidScheduledRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Finds a scheduled route code that meets shipping date criteria
    /// </summary>
    /// <param name="_routeTable">
    ///  <c>TMSRouteTable</c> buffer
    /// </param>
    /// <param name="_routeCode">
    ///  Route code to validate, default is blank
    /// </param>
    /// <returns>
    ///  Returns a valid route code for a scheduled route
    /// </returns>
    public TMSRouteCode findValidScheduledRoute(
        TMSRouteTable   _routeTable,
        TMSRouteCode    _routeCode = '')

    {
        TMSRoute        scheduledRoute;
        TMSRouteCode    validRouteCode;

        // Route result must have a shipping date to evaluate against
        if (_routeTable.ShipUTCDateTime)
        {
            // User has already choosen an existing route to assign load to
            if (_routeCode)
            {
                select firstOnly ShipUTCDateTime, RouteCode from scheduledRoute
                    where scheduledRoute.RouteCode == _routeCode;

                if (DateTimeUtil::date(scheduledRoute.ShipUTCDateTime) == DateTimeUtil::date(_routeTable.ShipUTCDateTime))
                {
                    return _routeCode;
                }
            }

            RecId routeGuideRecId = _routeTable.getRouteGuideRecId();
            WHSLoadTable loadTable;
            TMSShipUTCDateTime shipDate = _routeTable.ShipUTCDateTime;
			// We only care about date not time comparison.
            shipDate = DateTimeUtil::newDateTime(DateTimeUtil::date(shipDate), 0);

            // Either user assignment failed or the user has choosen to assign a route without selecting an existing one
            // Match a route that is not already tied to a load based upon the route plan and route guide
            select firstonly ShipUTCDateTime, RouteCode from scheduledRoute
                order by ShipUTCDateTime asc
                    where scheduledRoute.RouteGuideRecId == routeGuideRecId
                    &&    scheduledRoute.RoutePlanName   == _routeTable.RoutePlanName
                    &&    scheduledRoute.RouteConfigCode == _routeTable.RouteConfigCode
					&&    scheduledRoute.ShipUTCDateTime >= shipDate
                    notExists join loadTable
                        where loadTable.RouteCode == scheduledRoute.RouteCode;

            if (scheduledRoute.RouteCode)
            {
                validRouteCode = scheduledRoute.RouteCode;

                // User selected a route with an invalid shipping date
                if (_routeCode)
                {
                    this.scheduledRouteAssignmentException(_routeTable, validRouteCode);
                }
            }
        }

        return validRouteCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSegmentToRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns a segment to a route
    /// </summary>
    /// <param name="_segmentTable">
    /// Staging segment record
    /// </param>
    protected void addSegmentToRoute(TMSRouteSegmentTable _segmentTable)
    {
        TMSRouteSegment         segment;
        LogisticsPostalAddress  postalAddressOrigin;
        LogisticsPostalAddress  postalAddressDestination;

        sequence = (select firstonly Sequence
                        from tmsRouteSegment
                        order by Sequence desc
                        where tmsRouteSegment.RouteCode == route.RouteCode).Sequence;

        postalAddressOrigin = TMSAddressPhone::retrieveMatchingPostalAddress(
                                    _segmentTable.OriginName,
                                    _segmentTable.OriginAddress,
                                    _segmentTable.OriginCity,
                                    _segmentTable.OriginCounty,
                                    _segmentTable.OriginPostalCode,
                                    _segmentTable.OriginState,
                                    _segmentTable.OriginCountryRegion,
                                    _segmentTable.OriginalOriginPostalAddress);

        postalAddressDestination = TMSAddressPhone::retrieveMatchingPostalAddress(
                                    _segmentTable.DestinationName,
                                    _segmentTable.DestinationAddress,
                                    _segmentTable.DestinationCity,
                                    _segmentTable.DestinationCounty,
                                    _segmentTable.DestinationPostalCode,
                                    _segmentTable.DestinationState,
                                    _segmentTable.DestinationCountryRegion,
                                    _segmentTable.OriginalDestinationPostalAddress);

        ++sequence;
        segment.RouteCode                           = route.RouteCode;
        segment.Sequence                            = sequence;
        segment.OriginName                          = _segmentTable.OriginName;
        segment.OriginLocation                      = postalAddressOrigin.Location;
        segment.OriginResidential                   = _segmentTable.OriginResidential;
        segment.DestinationName                     = _segmentTable.DestinationName;
        segment.DestinationLocation                 = postalAddressDestination.Location;
        segment.DestinationResidential              = _segmentTable.DestinationResidential;
        segment.CarrierGroupCode                    = _segmentTable.CarrierGroupCode;
        segment.CarrierCode                         = _segmentTable.CarrierCode;
        segment.CarrierServiceCode                  = _segmentTable.CarrierServiceCode;
        segment.ModeCode                            = _segmentTable.ModeCode;
        segment.RateCur                             = _segmentTable.TotalRate;
        segment.CurrencyCode                        = _segmentTable.CurrencyCode;
        segment.Miles                               = _segmentTable.Miles;
        segment.DlvTermId                           = _segmentTable.FreightTermCode;
        segment.ResponsibleForPayment               = _segmentTable.ResponsibleForPayment;
        segment.VendorCode                          = _segmentTable.VendorCode;
        segment.VendorInvoiceCode                   = _segmentTable.VendorInvoiceCode;
        segment.OriginResponsibleForPayment         = _segmentTable.OriginResponsibleForPayment;
        segment.OriginVendorCode                    = _segmentTable.OriginVendorCode;
        segment.OriginVendorInvoiceCode             = _segmentTable.OriginVendorInvoiceCode;
        segment.DestinationResponsibleForPayment    = _segmentTable.DestinationResponsibleForPayment;
        segment.DestinationVendorCode               = _segmentTable.DestinationVendorCode;
        segment.DestinationVendorInvoiceCode        = _segmentTable.DestinationVendorInvoiceCode;
        segment.ScheduledShipUTCDateTime            = _segmentTable.ShipUTCDateTime;
        segment.ScheduledArrivalUTCDateTime         = _segmentTable.DeliveryUTCDateTime;
        segment.OriginHubCode                       = _segmentTable.OriginHubCode;
        segment.DestinationHubCode                  = _segmentTable.DestinationHubCode;
        segment.TransitTime                         = _segmentTable.TransitTime;
        segment.ShipperRate                         = _segmentTable.ShipperRate;
        segment.CustomerRate                        = _segmentTable.CustomerRate;
        segment.insert();

        if ((select count(RecId) from tmsRateRouteLine
                where tmsRateRouteLine.RefTableId == _segmentTable.TableId &&
                    tmsRateRouteLine.RefRecId == _segmentTable.RecId).RecId > 0)
        {
            this.assignSegmentLinesToSegment(segment, _segmentTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assign the carrier/service or route to a Load record.
    /// </summary>
    public void assignRoute()
    {
        boolean                 ignoreRoute;

        this.initFromRouteTable();
        ignoreRoute = this.initFromCommon(common);

        if (!ignoreRoute)
        {
            route.insert();

            this.insertSegments();
            this.insertChargeOverride();
            this.updateEmissionOnLoad();

            routeCode = route.RouteCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignRouteRateDetail</Name>
				<Source><![CDATA[
    /// <summary>
	/// Assigns route rate details of a shipment or load.
	/// </summary>
	/// <param name="_shipment">
	/// The route segment and shipment association record.
	/// </param>
	/// <param name="_segmentTable">
	/// The route segment record.
	/// </param>
    void assignRouteRateDetail(TMSRouteSegmentShipment _shipment, TMSRouteSegmentTable _segmentTable)
    {
        TMSRateDetails              details;
        TMSRouteRateDetail          routeDetail;

        while select details
            where details.RefTableId    == _segmentTable.TableId &&
                  details.RefRecId      == _segmentTable.RecId
        {
            routeDetail.RouteCode                    = route.RouteCode;
            routeDetail.Sequence                     = sequence;

            if (_shipment.RecId != 0)
            {
                routeDetail.Id                           = _shipment.Id;
                routeDetail.RouteAccessorialLevel        = TMSRouteAccessorialLevel::Shipment;
                routeDetail.AccessorialAssignmentLevel   = TMSAccessorialAssignmentLevel::Shipment;
            }
            else
            {
                routeDetail.Id                           = loadId;
                routeDetail.RouteAccessorialLevel        = TMSRouteAccessorialLevel::Load;
                routeDetail.AccessorialAssignmentLevel   = TMSAccessorialAssignmentLevel::Load;
            }

            routeDetail.RateId                       = details.Id;
            routeDetail.RateType                     = details.RateType;
            routeDetail.RateCur                         = details.RateCur;
            routeDetail.ShipperRate                  = details.ShipperRate;
            routeDetail.CustomerRate                 = details.CustomerRate;
            routeDetail.CurrencyCode                    = details.CurrencyCode;
            routeDetail.RateNote                     = details.RateNote;
            routeDetail.MarkupCode                      = details.MarkupCode;
            routeDetail.RateUnitRate                 = details.RateUnitRate;
            routeDetail.Generated                    = NoYes::Yes;
            routeDetail.ResponsibleForPayment        = details.ResponsibleForPayment;
            routeDetail.VendorCode                   = details.VendorCode;
            routeDetail.VendorInvoiceCode            = details.VendorInvoiceCode;
            routeDetail.RateUnit                     = details.RateUnit;
            routeDetail.CarrierCode                  = _segmentTable.CarrierCode;
            routeDetail.CarrierServiceCode           = _segmentTable.CarrierServiceCode;

            if (details.RateType == TMSRateType::Hub)
            {
                routeDetail.HubMasterCode                = details.Id;
            }

            routeDetail.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignToExistingRoute</Name>
				<Source><![CDATA[
    /// <summary>
	/// Assigns load to existing route.
	/// </summary>
	/// <param name="_routeCode">
	/// <c>TMSRouteCode</c> of the route to be assigned.
	/// </param>
    public void assignToExistingRoute(TMSRouteCode _routeCode)
    {
        boolean                 ignoreRoute;

        route = TMSRoute::find(_routeCode);
        ignoreRoute = this.initFromCommon(common);

        if (!ignoreRoute)
        {
            this.evaluateSegments();

            routeCode = route.RouteCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCommon</Name>
				<Source><![CDATA[
    /// <summary>
	/// Deletes old route segments assigned to load and initializes route from load.
	/// </summary>
	/// <param name="_common">
	/// <c>WHSLoadTable</c> record to be assigned to a route.
	/// </param>
	/// <returns>
	/// True if route is ignored.
	/// </returns>
    boolean initFromCommon(Common _common)
    {
        WHSLoadTable            loadTable;
        TMSRouteSegmentLoad     segmentLoad;
        TMSRouteSegmentShipment segmentShipment;
        Dialog                  dialog;
        DialogText              dialogText;
        WHSShipmentTable        shipmentTable;
        boolean                 ret;

        loadTable               = _common;
        loadId                  = loadTable.LoadId;

        if ((select count(RecId) from tmsRouteSegmentLoad
                where tmsRouteSegmentLoad.Id         == loadTable.LoadId  &&
                      tmsRouteSegmentLoad.RouteCode  != route.RouteCode).RecId != 0)
        {
            select firstonly segmentLoad
                where segmentLoad.Id         == loadTable.LoadId &&
                      segmentLoad.RouteCode  != route.RouteCode;

            dialog = new Dialog("@SYS866", ctrl);
            dialogText = dialog.addText(strFmt("@TRX704", segmentLoad.RouteCode));

            dialog.run();

            if (!dialog.closedOk())
            {
                ret = true;
            }
            else
            {
                ttsbegin;

                while select forupdate segmentLoad
                    where segmentLoad.Id             == loadTable.LoadId &&
                          segmentLoad.RouteCode      != route.RouteCode
                {
                    segmentLoad.delete();
                }

                while select forupdate segmentShipment
                    join shipmentTable
                    where segmentShipment.Id         == shipmentTable.ShipmentId  &&
                          shipmentTable.LoadId       == loadTable.LoadId          &&
                          segmentShipment.RouteCode  != route.RouteCode
                {
                    segmentShipment.delete();
                }

                ttscommit;
            }
        }

        route.ApptUTCDateTime   = loadTable.LoadSchedShipUTCDateTime;
        route.InventSiteId      = loadTable.InventSiteId;
        route.InventLocationId  = loadTable.InventLocationId;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRouteTable</Name>
				<Source><![CDATA[
    private void initFromRouteTable()
    {
        route.setRouteCode();
        route.Name                  = routeTable.RouteGuideName;
        route.RoutePlanName         = routeTable.RoutePlanName;
        route.RouteConfigCode       = routeTable.RouteConfigCode;
        route.ShipUTCDateTime       = routeTable.ShipUTCDateTime;
        route.DeliveryUTCDateTime   = routeTable.DeliveryUTCDateTime;
        route.CurrencyCode          = routeTable.CurrencyCode;
        if (route.CurrencyCode == '')
        {
            route.CurrencyCode = CompanyInfoHelper::standardCurrency();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSegments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates segment records
    /// </summary>
    public void insertSegments()
    {
        TMSRouteSegment         segment;
        TMSRouteSegmentTable    segmentTable;
        WHSLoadTable            loadTable = WHSLoadTable::find(loadId);
        LogisticsPostalAddress  postalAddressOrigin;
        LogisticsPostalAddress  postalAddressDestination;

        while select segmentTable
            where segmentTable.RouteId      == routeTable.RouteId
                && segmentTable.RefTableId  == routeTable.RefTableId
                && segmentTable.RefRecId    == routeTable.RefRecId
                && segmentTable.RouteRecId  == routeTable.RecId
        {
            if (loadTable.LoadDirection == WHSLoadDirection::Inbound)
            {
                sequence        += 100;
                segment.Manual  = NoYes::Yes;
            }
            else
            {
                ++sequence;
            }

            postalAddressOrigin = TMSAddressPhone::retrieveMatchingPostalAddress(
                                    segmentTable.OriginName,
                                    segmentTable.OriginAddress,
                                    segmentTable.OriginCity,
                                    segmentTable.OriginCounty,
                                    segmentTable.OriginPostalCode,
                                    segmentTable.OriginState,
                                    segmentTable.OriginCountryRegion,
                                    segmentTable.OriginalOriginPostalAddress);

            postalAddressDestination = TMSAddressPhone::retrieveMatchingPostalAddress(
                                    segmentTable.DestinationName,
                                    segmentTable.DestinationAddress,
                                    segmentTable.DestinationCity,
                                    segmentTable.DestinationCounty,
                                    segmentTable.DestinationPostalCode,
                                    segmentTable.DestinationState,
                                    segmentTable.DestinationCountryRegion,
                                    segmentTable.OriginalDestinationPostalAddress);

            segment.RouteCode                           = route.RouteCode;
            segment.Sequence                            = sequence;
            segment.OriginName                          = segmentTable.OriginName;
            segment.OriginLocation                      = postalAddressOrigin.Location;
            segment.OriginResidential                   = segmentTable.OriginResidential;
            segment.DestinationName                     = segmentTable.DestinationName;
            segment.DestinationLocation                 = postalAddressDestination.Location;
            segment.DestinationResidential              = segmentTable.DestinationResidential;
            segment.CarrierGroupCode                    = segmentTable.CarrierGroupCode;
            segment.CarrierCode                         = segmentTable.CarrierCode;
            segment.CarrierServiceCode                  = segmentTable.CarrierServiceCode;
            segment.ModeCode                            = segmentTable.ModeCode;
            segment.RateCur                             = segmentTable.TotalRate;
            segment.ShipperRate                         = segmentTable.ShipperRate;
            segment.CustomerRate                        = segmentTable.CustomerRate;
            segment.CurrencyCode                        = segmentTable.CurrencyCode;
            segment.Miles                               = segmentTable.Miles;
            segment.DlvTermId                           = segmentTable.FreightTermCode;
            segment.ResponsibleForPayment               = segmentTable.ResponsibleForPayment;
            segment.VendorCode                          = segmentTable.VendorCode;
            segment.VendorInvoiceCode                   = segmentTable.VendorInvoiceCode;
            segment.OriginResponsibleForPayment         = segmentTable.OriginResponsibleForPayment;
            segment.OriginVendorCode                    = segmentTable.OriginVendorCode;
            segment.OriginVendorInvoiceCode             = segmentTable.OriginVendorInvoiceCode;
            segment.DestinationResponsibleForPayment    = segmentTable.DestinationResponsibleForPayment;
            segment.DestinationVendorCode               = segmentTable.DestinationVendorCode;
            segment.DestinationVendorInvoiceCode        = segmentTable.DestinationVendorInvoiceCode;
            segment.ScheduledShipUTCDateTime            = segmentTable.ShipUTCDateTime;
            segment.ScheduledArrivalUTCDateTime         = segmentTable.DeliveryUTCDateTime;
            segment.OriginHubCode                       = segmentTable.OriginHubCode;
            segment.DestinationHubCode                  = segmentTable.DestinationHubCode;
            segment.TransitTime                         = segmentTable.TransitTime;
            segment.TMSRouteSegmentConfig               = segmentTable.TMSRouteSegmentConfig;
            if (segment.CurrencyCode == '')
            {
                segment.CurrencyCode = CompanyInfoHelper::standardCurrency();
            }
            segment.insert();

            if ((select count(RecId) from tmsRateRouteLine
                    where tmsRateRouteLine.RefTableId == segmentTable.TableId &&
                        tmsRateRouteLine.RefRecId == segmentTable.RecId).RecId > 0)
            {
                this.assignSegmentLinesToSegment(segment, segmentTable);
            }
        }

        if (loadTable.LoadDirection == WHSLoadDirection::Inbound)
        {
            route.addOriginToRoute(loadId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduledRouteAssignmentException</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Create a rate exception when a new route has been selected to meet shipping date criteria.
    /// </summary>
    /// <param name="_routeTable">
    ///  <c>TMSRouteTable</c> buffer
    /// </param>
    /// <param name="_routeCode">
    ///  Updated route id.
    /// </param>
    private void scheduledRouteAssignmentException(
        TMSRouteTable   _routeTable,
        TMSRouteCode    _routeCode)
    {
        TMSRateDetails  rateDetailsException;

        ttsBegin;
        rateDetailsException.CurrencyCode   = _routeTable.CurrencyCode;
        rateDetailsException.RefRecId       = _routeTable.RefRecId;
        rateDetailsException.RefTableId     = _routeTable.RefTableId;
        rateDetailsException.RateType       = TMSRateType::Error;
        rateDetailsException.Id             = _routeTable.RouteId;
        rateDetailsException.RateNote       = strFmt("@TRX:MessageScheduledRouteUpdatedFromRoute", _routeCode);
        rateDetailsException.insert();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLoadAndShipmentXRef</Name>
				<Source><![CDATA[
    /// <summary>
	/// Creates association records for route segments and loads/shipments.
	/// </summary>
	/// <param name="_segment">
	/// The route segment record.
	/// </param>
	/// <param name="_loadLine">
	/// The load line record.
	/// </param>
    void setLoadAndShipmentXRef(TMSRouteSegment _segment, WHSLoadLine _loadLine)
    {
        TMSRouteSegmentLoad     segmentLoad;
        TMSRouteSegmentShipment segmentShipment;
        WHSLoadTable            load                = WHSLoadTable::find(_loadLine.LoadId, true);
        WHSShipmentTable        shipment            = WHSShipmentTable::find(_loadLine.ShipmentId, true);

        ttsbegin;

        if (load.RouteCode == '')
        {
            load.RouteCode           = _segment.RouteCode;
            load.CarrierCode         = _segment.CarrierCode;
            load.CarrierServiceCode  = _segment.CarrierServiceCode;
            load.ModeCode            = TMSCarrier::find(_segment.CarrierCode).ModeCode;
            load.ETA                 = _segment.ScheduledArrivalUTCDateTime;
            load.LoadSchedShipUTCDateTime = _segment.ScheduledShipUTCDateTime;
            load.write();
        }

        if (!TMSRouteSegmentLoad::exist(_segment.RouteCode, _segment.Sequence, _loadLine.LoadId))
        {
            segmentLoad.initFromSegment(_segment);
            segmentLoad.Id               = _loadLine.LoadId;
            segmentLoad.BillOfLadingId   = load.BillOfLadingId;
            segmentLoad.HouseBill        = load.HouseBill;
            segmentLoad.VoyageNum        = load.VoyageNum;
            segmentLoad.VesselName       = load.VesselName;
            segmentLoad.BookingNum       = load.BookingNum;
            segmentLoad.insert();
        }

        if (_loadLine.ShipmentId && !TMSRouteSegmentShipment::exist(_segment.RouteCode, _segment.Sequence, _loadLine.ShipmentId))
        {
            segmentShipment.initFromSegment(_segment);
            segmentShipment.Id               = _loadLine.ShipmentId;
            segmentShipment.WayBill          = shipment.WayBill;
            segmentShipment.ProNum           = shipment.ProNum;
            segmentShipment.BillOfLadingId   = shipment.BillOfLadingId;
            segmentShipment.DlvTermId           = shipment.DlvTermId;
            segmentShipment.insert();
        }

        if (_loadLine.ShipmentId)
        {
            if (shipment.RouteCode == '')
            {
                shipment.RouteCode = _segment.RouteCode;
            }
            shipment.CarrierCode             = _segment.CarrierCode;
            shipment.CarrierServiceCode      = _segment.CarrierServiceCode;
            shipment.ModeCode                = TMSCarrier::find(_segment.CarrierCode).ModeCode;
            shipment.ShipmentArrivalUTCDateTime  = route.DeliveryUTCDateTime;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
	/// Constructs the class instance.
	/// </summary>
	/// <returns>
	/// The class instance.
	/// </returns>
    static TMSRouteAssignment_Load construct()
    {
        TMSRouteAssignment_Load  routeAssignment;

        routeAssignment = new TMSRouteAssignment_Load();

        return routeAssignment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Assign the load to the selected route code,
    ///     unless it is already assigned to that route code.
    /// </summary>
    /// <param name="_routeTable">
    ///     The <c>TMSRouteTable</c> buffer for the chosen route.
    /// </param>
    /// <param name="_ctrl">
    ///     Calling control.
    /// </param>
    /// <param name="_loadTable">
    ///     Buffer for the record type.
    /// </param>
    /// <returns>
    ///     Returns the initialized <c>TMSRouteAssignment_Load</c> object.
    /// </returns>
    public static TMSRouteAssignment_Load newStandard(
        TMSRouteTable   _routeTable,
        Object          _ctrl,
        WHSLoadTable    _loadTable)
    {
        TMSRouteAssignment_Load  routeAssignment;

        routeAssignment = TMSRouteAssignment_Load::construct();
        routeAssignment.parmRouteTable(_routeTable);
        routeAssignment.parmCTRL(_ctrl);
        routeAssignment.parmCommon(_loadTable);

        return routeAssignment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadShippingDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Update a load's shipping date to the assigned scheduled route's shipping date.
    /// </summary>
    /// <param name="_routeCode">
    ///  The assigned scheduled route code
    /// </param>
    public void updateLoadShippingDate(TMSRouteCode _routeCode)
    {
        if (common is WHSLoadTable)
        {
            WHSLoadTable loadTable = common as WHSLoadTable;

            TMSRoute scheduledRoute = TMSRoute::find(_routeCode);

            if (DateTimeUtil::date(loadTable.LoadSchedShipUTCDateTime) != DateTimeUtil::date(scheduledRoute.ShipUTCDateTime))
            {
                ttsBegin;

                loadTable = WHSLoadTable::find(loadTable.LoadId, true);
                loadTable.LoadSchedShipUTCDateTime = scheduledRoute.ShipUTCDateTime;

                if (!loadTable.validateWrite())
                {
                    throw error(strFmt("@TRX:LoadShippingDateValidationError", loadTable.LoadId, scheduledRoute.ShipUTCDateTime, scheduledRoute.RoutePlanName));
                }

                loadTable.update();

                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRouteSegmentDatesFromRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Update shipping and delivery dates for route table segements.
    /// </summary>
    /// <param name="_routeTable">
    ///  Route table buffer
    /// </param>
    /// <param name="_secondsDifference">
    ///  The difference in seconds to shift the existing shipping and delivery dates
    /// </param>
    private void updateRouteSegmentDatesFromRoute(
        TMSRouteTable   _routeTable,
        int64           _secondsDifference)
    {
        TMSRouteSegmentTable    routeSegmentTable;

        ttsBegin;

        while select forUpdate DeliveryUTCDateTime, ShipUTCDateTime from routeSegmentTable
			where routeSegmentTable.RouteRecId == _routeTable.RecId
        {
            routeSegmentTable.ShipUTCDateTime       = _routeTable.ShipUTCDateTime       ? DateTimeUtil::addSeconds(routeSegmentTable.ShipUTCDateTime, -_secondsDifference) : utcDateTimeNull();
            routeSegmentTable.DeliveryUTCDateTime   = _routeTable.DeliveryUTCDateTime   ? DateTimeUtil::addSeconds(routeSegmentTable.DeliveryUTCDateTime, -_secondsDifference) : utcDateTimeNull();

            if (!routeSegmentTable.validateWrite())
            {
                throw error(strFmt("@TRX:RouteSegmentDatesValidationError", _routeTable.RoutePlanName));
            }

            routeSegmentTable.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduledRouteDates</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Modify the shipping and delivery dates during rating and assignment of a load to reflect existing scheduled route dates.
    /// </summary>
    /// <param name="_routeTable">
    ///  Route table buffer
    /// </param>
    /// <param name="_routeCode">
    ///  Route code to validate, default is blank
    /// </param>
    /// <param name="_updateLoadShippingDate">
    ///  Defines whether or not the scheduled shipping date on a load should be updated
    /// </param>
    public void updateScheduledRouteDates(
        TMSRouteTable       _routeTable,
        TMSRouteCode        _routeCode = '',
        boolean             _updateLoadShippingDate = false)
    {
        TMSRouteTable       localRouteTable;
        TMSRouteCode        scheduledRouteCode;
        TMSShipUTCDateTime  shipUTCDateTime;
        int64               secondsDifference = 0;

        // Use the route code parameter if it is set, otherwise determine a valid code to use based upon the route table
        scheduledRouteCode = _routeCode ? _routeCode : this.findValidScheduledRoute(_routeTable);

        if (scheduledRouteCode)
        {
            shipUTCDateTime = TMSRoute::find(scheduledRouteCode).ShipUTCDateTime;
        }
        else
        {
            shipUTCDateTime = utcDateTimeNull();
        }

        if (DateTimeUtil::date(_routeTable.ShipUTCDateTime) != DateTimeUtil::date(shipUTCDateTime))
        {
            if (shipUTCDateTime)
            {
                // Find the difference between the scheduled route shipping date and the shipping date assocaited with the route table
                secondsDifference = DateTimeUtil::getDifference(_routeTable.ShipUTCDateTime, shipUTCDateTime);
            }

            ttsBegin;

            localRouteTable = TMSRouteTable::find(_routeTable.RecId, true);

            localRouteTable.ShipUTCDateTime = shipUTCDateTime;

            // If a shipping date exists, increment the delivery date based upon the total number of days associated with the scheduled route, otherwise clear this value by assigning an empty field
            localRouteTable.DeliveryUTCDateTime = localRouteTable.ShipUTCDateTime ? DateTimeUtil::addSeconds(localRouteTable.DeliveryUTCDateTime, -secondsDifference) : utcDateTimeNull();

            if (!localRouteTable.validateWrite())
            {
                throw error(strFmt("@TRX:RouteTableDatesValidationError", localRouteTable.RoutePlanName));
            }

            localRouteTable.update();

            this.updateRouteSegmentDatesFromRoute(localRouteTable, secondsDifference);

            ttsCommit;
        }

        if (_updateLoadShippingDate
        &&  scheduledRouteCode)
        {
            this.updateLoadShippingDate(scheduledRouteCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSegmentOnRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a segment on a route
    /// </summary>
    /// <param name="_segmentTable">
    /// Staging segment record
    /// </param>
    protected void updateSegmentOnRoute(TMSRouteSegmentTable _segmentTable)
    {
        TMSRouteSegment         segment;
        TMSRateRouteLine        tmsRateRouteLine;

        ttsBegin;

        select forUpdate segment
            where segment.RouteCode             == route.RouteCode
            &&    segment.OriginHubCode         == _segmentTable.OriginHubCode
            &&    segment.DestinationHubCode    == _segmentTable.DestinationHubCode;

        if (segment)
        {
            segment.OriginResidential                   = segment.OriginResidential                 ? segment.OriginResidential : _segmentTable.OriginResidential;
            segment.DestinationResidential              = segment.DestinationResidential            ? segment.DestinationResidential : _segmentTable.DestinationResidential;
            segment.CarrierGroupCode                    = segment.CarrierGroupCode                  ? segment.CarrierGroupCode : _segmentTable.CarrierGroupCode;
            segment.CarrierCode                         = segment.CarrierCode                       ? segment.CarrierCode :_segmentTable.CarrierCode;
            segment.CarrierServiceCode                  = segment.CarrierServiceCode                ? segment.CarrierServiceCode : _segmentTable.CarrierServiceCode;
            segment.ModeCode                            = segment.ModeCode                          ? segment.ModeCode : _segmentTable.ModeCode;
            segment.RateCur                             = segment.RateCur                           ? segment.RateCur : _segmentTable.TotalRate;
            segment.CurrencyCode                        = segment.CurrencyCode                      ? segment.CurrencyCode : _segmentTable.CurrencyCode;
            segment.Miles                               = segment.Miles                             ? segment.Miles : _segmentTable.Miles;
            segment.DlvTermId                           = segment.DlvTermId                         ? segment.DlvTermId : _segmentTable.FreightTermCode;
            segment.ResponsibleForPayment               = segment.ResponsibleForPayment             ? segment.ResponsibleForPayment : _segmentTable.ResponsibleForPayment;
            segment.VendorCode                          = segment.VendorCode                        ? segment.VendorCode : _segmentTable.VendorCode;
            segment.VendorInvoiceCode                   = segment.VendorInvoiceCode                 ? segment.VendorInvoiceCode : _segmentTable.VendorInvoiceCode;
            segment.OriginResponsibleForPayment         = segment.OriginResponsibleForPayment       ? segment.OriginResponsibleForPayment : _segmentTable.OriginResponsibleForPayment;
            segment.OriginVendorCode                    = segment.OriginVendorCode                  ? segment.OriginVendorCode : _segmentTable.OriginVendorCode;
            segment.OriginVendorInvoiceCode             = segment.OriginVendorInvoiceCode           ? segment.OriginVendorInvoiceCode : _segmentTable.OriginVendorInvoiceCode;
            segment.DestinationResponsibleForPayment    = segment.DestinationResponsibleForPayment  ? segment.DestinationResponsibleForPayment : _segmentTable.DestinationResponsibleForPayment;
            segment.DestinationVendorCode               = segment.DestinationVendorCode             ? segment.DestinationVendorCode : _segmentTable.DestinationVendorCode;
            segment.DestinationVendorInvoiceCode        = segment.DestinationVendorInvoiceCode      ? segment.DestinationVendorInvoiceCode : _segmentTable.DestinationVendorInvoiceCode;
            segment.ScheduledShipUTCDateTime            = segment.ScheduledShipUTCDateTime          ? segment.ScheduledShipUTCDateTime : _segmentTable.ShipUTCDateTime;
            segment.ScheduledArrivalUTCDateTime         = segment.ScheduledArrivalUTCDateTime       ? segment.ScheduledArrivalUTCDateTime : _segmentTable.DeliveryUTCDateTime;
            segment.TransitTime                         = segment.TransitTime                       ? segment.TransitTime : _segmentTable.TransitTime;
            segment.ShipperRate                         = segment.ShipperRate                       ? segment.ShipperRate : _segmentTable.ShipperRate;
            segment.CustomerRate                        = segment.CustomerRate                      ? segment.CustomerRate : _segmentTable.CustomerRate;
            segment.update();
        }

        ttsCommit;

        select count(RecId) from tmsRateRouteLine
            where tmsRateRouteLine.RefTableId == _segmentTable.TableId
            &&    tmsRateRouteLine.RefRecId == _segmentTable.RecId;

        if (tmsRateRouteLine.RecId > 0)
        {
            this.assignSegmentLinesToSegment(segment, _segmentTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEmissionOnLoad</Name>
				<Source><![CDATA[
    protected void updateEmissionOnLoad()
    {
        if (TMSSustainabilityIntegrationFeature::instance().isEnabled())
        {
            TMSParameters tmsParameters = TMSParameters::find();
            if (tmsParameters.SustainabilityEngineEnabled)
            {
                ttsbegin;

                WHSLoadTable loadTable = WHSLoadTable::find(loadId, true);
                loadTable.CarbonEmission = routeTable.CarbonEmission;
                loadTable.CarbonEmissionUnit = routeTable.CarbonEmissionUnit;
                loadTable.update();
    
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>