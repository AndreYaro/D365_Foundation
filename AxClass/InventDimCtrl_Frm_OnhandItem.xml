<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_OnhandItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventDimCtrl_Frm_OnhandItem</c> class is used for controlling the dimension display and
/// creating the temporary data needed on the <c>InventOnhand</c> form.
/// </summary>
class InventDimCtrl_Frm_OnhandItem extends InventDimCtrl_Frm_OnHand
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowResizeOfFormControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the form controls should be resized.
    /// </summary>
    /// <returns>
    /// true if the form controls should be resized; otherwise, false.
    /// </returns>
    public boolean allowResizeOfFormControls()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQueryTmpBatchSel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>InventDim</c> table form control query.
    /// </summary>
    /// <param name="_inventSum_DS">
    /// The <c>InventSum</c> for which to update query.
    /// </param>
    /// <param name="_inventDim_DS">
    /// The inventory dimension for which to update query.
    /// </param>
    /// <param name="_inventLocId">
    /// The inventory location ID for which to update query.
    /// </param>
    /// <remarks>
    /// Updates the inventory dimension as it affects the <c>TmpPdsBatchAttriSelect</c> form data sources
    /// </remarks>
    public void modifyQueryTmpBatchSel(
        FormDataSource      _inventSum_DS,
        FormDataSource      _inventDim_DS,
        InventLocationId    _inventLocId = ''
        )
    {
        boolean                 doHint;
        InventDimParm           inventDimParmRange;

        #COSNumbers

        QueryBuildDataSource qbsSum = _inventSum_DS.query().dataSourceName(_inventSum_DS.name());

        qbsSum.sortClear();

        QueryBuildRange criteriaClosed = SysQuery::findOrCreateRange(
                                            qbsSum,
                                            fieldnum(InventSum,Closed));
        if (dimParmVisibleGrid.ClosedFlag)
        {
            criteriaClosed.value('');
        }
        else
        {
            criteriaClosed.value(queryValue(NoYes::No));
        }

        QueryBuildRange criteriaClosedQty = SysQuery::findOrCreateRange(
                                                qbsSum,
                                                fieldnum(InventSum,ClosedQty));

        if (dimParmVisibleGrid.ClosedQtyFlag)
        {
            criteriaClosedQty.value(queryValue(NoYes::No));
        }
        else
        {
            criteriaClosedQty.value('');
        }

        QueryBuildDataSource qbsDim = _inventDim_DS.query().dataSourceName(_inventDim_DS.name());

        if (_inventLocId != '')
        {
            QueryBuildRange criteriaWH = SysQuery::findOrCreateRange(
                                            qbsDim,
                                            fieldnum(InventDim, InventLocationId));

            criteriaWH.value(queryValue(_inventLocId));
        }
        qbsDim.sortClear();

        doHint = InventDim::queryAddHintFromCaller(qbsDim,callingElement.args())
                    && doHint;

        qbsSum.orderMode(OrderMode::GroupBy);
        qbsSum.addSortField(fieldnum(InventSum,ItemId));

        dimParmLockedRightClick.queryAddSortField(qbsDim);
        if (!dimParmVisibleGrid.queryAddSortField(qbsDim))
        {
            qbsDim.addSortField(fieldnum(InventDim, TableId));
            qbsDim.orderMode(OrderMode::GroupBy);
        }

        if (!doHint
            && ! inventDimParmRange.isFlagSelective()
            && ! dimParmVisibleGrid.ClosedFlag)
        {
            qbsSum.addSortIndex(indexnum(InventSum,ClosedItemDimIdx));
            qbsSum.indexIsHint(true);

            qbsDim.addSortIndex(indexnum(InventDim,DimIdIdx));
            qbsDim.indexIsHint(true);

            doHint = true;
        }

        if (doHint)
        {
            _inventDim_DS.query().literals(#2);
        }
        else
        {
            _inventDim_DS.query().literals(0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupShowClosed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether closed transactions should be visible on the dimension setup form.
    /// </summary>
    /// <returns>
    ///    true always.
    /// </returns>
    public boolean setupShowClosed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupShowClosedQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the sum without values should be shown.
    /// </summary>
    /// <returns>
    ///    true always.
    /// </returns>
    public boolean setupShowClosedQty()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimCtrl_Frm_OnhandItem construct()
    {
        return new InventDimCtrl_Frm_OnhandItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    public static InventDimCtrl_Frm_OnhandItem newFromForm(FormRun _formRun)
    {
        InventDimCtrl_Frm_OnhandItem    inventDimCtrl = InventDimCtrl_Frm_OnhandItem::construct();
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.init();

        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
