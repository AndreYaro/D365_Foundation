<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailTransactionPost</c> create and invoice sales order based on retail transaction data.
/// </summary>
[SysObsolete('This class is obsolete. As RetailStoreOrderSynchronizer class is deprecated.', true, 31\05\2024)]
class RetailTransactionPost extends RunBaseBatch implements BatchRetryable
{
    boolean finalizeOrder;
    RetailStatementId statementId;
    List packedRecords;

    #define.CurrentVersion(2)

    #localmacro.CurrentList
            finalizeOrder
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, packedRecords.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                container packedTransactionTable;
                [version, #CurrentList, packedTransactionTable] = _packedClass;
                packedRecords = List::create(packedTransactionTable);
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();

        packedRecords = new List(Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a new retail transaction post instance.
    /// </summary>
    /// <param name = "finalizeOrder">
    ///     A boolean value indicate if the Sales Order is finalized.
    ///     A finalized order will be invoiced immidiately after it is created, in addition an exception will be thrown when error occurs.
    /// </param>
    /// <param name = "_statementId">Statement Id</param>
    /// <returns>
    ///     A new instance of this class if it is possible; otherwise, null.
    /// </returns>
    public static RetailTransactionPost construct(boolean _finalizeOrder, RetailStatementId _statementId = '')
    {
        RetailTransactionPost transactionPost = new RetailTransactionPost();

        transactionPost.parmFinalizeOrder(_finalizeOrder);
        transactionPost.parmStatementId(_statementId);

        return transactionPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinalizeOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set/Get finalizeOrder parameter.
    /// </summary>
    /// <param name = "finalizeOrder">
    ///     A boolean value indicate if the Sales Order is finalized.
    ///     A finalized order will be invoiced immidiately after it is created, in addition an exception will be thrown when error occurs.
    /// </param>
    /// <returns>Finalize Order flag</returns>
    public boolean parmFinalizeOrder(boolean _finalizeOrder = finalizeOrder)
    {
        finalizeOrder = _finalizeOrder;
        return finalizeOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatementId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set/Get StatementId parameter.
    /// </summary>
    /// <param name = "_statementId">Statement id of the statement to be posted</param>
    /// <returns>Statement Id</returns>
    public RetailStatementId parmStatementId(RetailStatementId _statementId = statementId)
    {
        statementId = _statementId;
        return statementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Start a batch task if the task is run in batch and the staging temporary table is not empty.
    /// </summary>
    /// <param name = "batchHeader">Batch header if the job is run in batch job.</param>
    /// <param name = "batchTaskToRun">Batch task to follow up.</param>
    public void postBatch(BatchHeader batchHeader, Batchable batchTaskToRun)
    {
        if (batchHeader && !packedRecords.empty())
        {
            this.batchInfo().parmCaption(strFmt("@Retail:PostSalesOrderBatchJobTitle", this.parmStatementId()));

            batchHeader.addRuntimeTask(this, BatchHeader::getCurrentBatchTask().RecId);
            if (batchTaskToRun)
            {
                batchHeader.addDependency(batchTaskToRun, this, BatchDependencyStatus::Finished);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post a selected retail transaction record.
    /// </summary>
    /// <param name = "transactionTable">The selected transaction record.</param>
    /// <param name = "batchHeader">Batch header if the job is run in batch job.</param>
    /// <param name = "batchTaskToRun">Batch task to follow up.</param>
    /// <param name = "maxBatchSize">Maximum number of transaction to be processed in one batch.</param>
    /// <returns>True if a batch task has been started, otherwise false.</returns>
    /// <remarks>
    ///     Directly post a transaction if it is not in a batch job.
    ///     If the task is run in batch job, stage the transaction in temporary table, and start a batch task
    ///     whenever the current size exceeds the maximum batch size.
    /// </remarks>
    public boolean post(RetailTransactionTable transactionTable,
                     BatchHeader batchHeader,
                     Batchable batchTaskToRun,
                     int maxBatchSize)
    {
        boolean batchScheduled = false;

        if (batchHeader)
        {
            packedRecords.addEnd(buf2Con(transactionTable));

            if (maxBatchSize != 0 && packedRecords.elements() >= maxBatchSize)
            {
                this.postBatch(batchHeader, batchTaskToRun);
                batchScheduled = true;
            }
        }
        else
        {
            RetailStoreOrderSynchronizer::PostRetailTransaction(transactionTable, finalizeOrder);
        }

        return batchScheduled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post all transactions staged in the temporary table.
    /// </summary>
    public void run()
    {
        ListEnumerator le = packedRecords.getEnumerator();

        int fromLine = Global::infologLine();
        boolean errorHappened = false;

        while (le.moveNext())
        {
            try
            {
                RetailStoreOrderSynchronizer::PostRetailTransaction(con2Buf(le.current()), finalizeOrder);
            }
            catch
            {
                errorHappened = true;
            }
        }

        if (errorHappened)
        {
            throw  error(RetailTransactionServiceUtilities::getInfologMessages(fromLine));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false (e.g., the class is not designed for execution of the operation in a new session).
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>