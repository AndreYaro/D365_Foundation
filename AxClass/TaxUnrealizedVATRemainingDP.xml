<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxUnrealizedVATRemainingDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The class is the report data provider class that supports the <c>TaxUnrealizedVATRemaining</c>
///    report.
/// </summary>
[   SRSReportQueryAttribute(queryStr(TaxUnrealizedVATRemaining)),
    SRSReportParameterAttribute(classStr(TaxUnrealizedVATRemainingContract))
]
public class TaxUnrealizedVATRemainingDP extends SrsReportDataProviderPreProcessTempDB
{
    TaxTrans                                  taxTransInvoice;
    TaxTransExtensionTH                       taxTransExtensionTHInvoice;
    TaxTrans                                  taxTransPayment;
    TaxTrans                                  taxTransPaymentGainLoss;
    TaxTransExtensionTH                       taxTransExtensionTHPayment;
    TaxTransExtensionTH                       taxTransExtensionTHPaymentGainLoss;
    TaxUnrealizedVATRemainingTmp              tmpTable;
    TaxBranch                                 taxBranchTable;
    TaxAmount                                 taxRemainingAmount;
    TaxBranchCode                             taxBranchCodeParameter;
    TaxBranchCode                             taxBranchCode;
    boolean                                   insertToTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeSection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the report logic based on the <c>TaxTrans</c> source value.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void executeSection()
    {
        switch (taxTransInvoice.SourceTableId)
        {
            case tableNum(VendTrans):
            case tableNum(VendInvoiceTrans):
                this.findFromVendInvoiceTrans();
                break;
            case tableNum(LedgerJournalTrans):
                this.findFromLedgerJournalTrans();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the report logic for the <c>LedgerJournalTrans</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void findFromLedgerJournalTrans()
    {
        DimensionDefault    defaultDimension;

        defaultDimension = LedgerJournalTrans::findRecId(taxTransInvoice.SourceRecId, false).DefaultDimension;

        taxBranchCode = TaxBranchType ::getTBDisplayValueByDefaultDimension(defaultDimension);
        if (!taxBranchCodeParameter || taxBranchCode == taxBranchCodeParameter)
        {
            insertToTmp = true;
        }
        else
        {
            insertToTmp = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromVendInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the report logic for the <c>VendTrans</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void findFromVendInvoiceTrans()
    {
        DimensionDefault    defaultDimension;

        defaultDimension = VendInvoiceTrans::findRecId(taxTransInvoice.SourceRecId).DefaultDimension;

        taxBranchCode = TaxBranchType::getTBDisplayValueByDefaultDimension(defaultDimension);
        if (!taxBranchCodeParameter || taxBranchCode == taxBranchCodeParameter)
        {
            insertToTmp = true;
        }
        else
        {
            insertToTmp = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxUnrealizedVATRemainingTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data table from the <c>TaxUnrealizedVATRemainingTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The required report data table.
    /// </returns>
    [SRSReportDataSetAttribute('TaxUnrealizedVATRemainingTmp'), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public  TaxUnrealizedVATRemainingTmp getTaxUnrealizedVATRemainingTmp()
    {
        select * from tmpTable;
        return tmpTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Insert the tmp table data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insert()
    {
        CustVendTrans   custVendTrans;
        CustVendTable   custVendTable;

        tmpTable.Voucher                    = taxTransInvoice.Voucher;

        custVendTrans                       = VendTrans::findVoucherDate(taxTransInvoice.Voucher, taxTransInvoice.TransDate);
        custVendTable                       = VendTable::find(custVendTrans.AccountNum);

        tmpTable.VendAccount                = custVendTrans.AccountNum;
        tmpTable.VendorName                 = custVendTable.name();

        tmpTable.TaxBaseAmount              = taxTransInvoice.TaxBaseAmount;
        tmpTable.TaxAmount                  = taxTransInvoice.TaxAmount - taxTransInvoice.TaxInCostPriceRegulated;
        tmpTable.TaxRemainingAmount         = taxRemainingAmount;
        tmpTable.InvoiceReceiptDate         = taxTransExtensionTHInvoice.InvoiceReceiptDate;
        tmpTable.InvoiceNumber              = custVendTrans.Invoice;
        tmpTable.InvoiceDate                = taxTransExtensionTHInvoice.InvoiceDate;

        tmpTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic that is used by <c>TaxUnrealizedVATRemaining</c> report.
    /// </remarks>
    public void processReport()
    {
        TaxUnrealizedVATRemainingContract       contract;
        QueryRun                                qr;
        QueryBuildDataSource                    qbds;

        Query   query          = this.parmQuery();

        qbds = query.dataSourceTable(tableNum(VendTrans));
        if (qbds.findRange(fieldNum(VendTrans, Invoice)).value() != '')
        {
            qbds.joinMode(JoinMode::ExistsJoin);
        }

        if (TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled())
        {
            query.dataSourceTable(tableNum(TaxTrans)).addRange(fieldNum(TaxTrans, TaxDirection)).value(enum2Value(TaxDirection::IncomingTax_W));
        }

        contract               = this.parmDataContract() as TaxUnrealizedVATRemainingContract;
        taxBranchCodeParameter = contract.parmTaxBranch();
        qr     = new QueryRun(query);
        while (qr.next())
        {
            taxRemainingAmount = 0;
            taxTransInvoice             = qr.get(tableNum(TaxTrans));
            taxTransExtensionTHInvoice  = qr.get(tableNum(TaxTransExtensionTH));

            this.executeSection();

            select sum(TaxAmount) from taxTransPayment
                    where taxTransPayment.TaxOrigin == TaxOrigin::Payment
                exists join taxTransExtensionTHPayment
                    where taxTransExtensionTHPayment.TaxTrans               == taxTransPayment.RecId
                        && taxTransExtensionTHPayment.TaxUnrealizedRefRecId == taxTransInvoice.RecId;

            select sum(TaxAmount) from taxTransPaymentGainLoss
                    where taxTransPaymentGainLoss.TaxOrigin == TaxOrigin::TaxReversed
                exists join taxTransExtensionTHPaymentGainLoss
                    where taxTransExtensionTHPaymentGainLoss.TaxTrans               == taxTransPaymentGainLoss.RecId
                        && taxTransExtensionTHPaymentGainLoss.TaxUnrealizedRefRecId == taxTransInvoice.RecId
                        && taxTransExtensionTHPaymentGainLoss.IsReversalGainLoss    == NoYes::Yes;
            
            if (taxTransPayment.TaxAmount == taxTransInvoice.TaxAmount)
            {
                taxRemainingAmount = 0;
            }
            else
            {
                if (taxTransInvoice.TaxAmount == 0)
                {
                    taxRemainingAmount = 0;
                }
                else
                {
                    taxRemainingAmount = (taxTransInvoice.TaxAmount - taxTransInvoice.TaxInCostPriceRegulated) * (taxTransInvoice.TaxAmount - taxTransPayment.TaxAmount + taxTransPaymentGainLoss.TaxAmount) / taxTransInvoice.TaxAmount;
                }
            }

            if (taxRemainingAmount && insertToTmp )
            {
                this.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>