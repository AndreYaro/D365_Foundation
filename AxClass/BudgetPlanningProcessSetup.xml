<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanningProcessSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanningProcessSetup</c> class provides information for
///
///   <dl>
///     <dt><c>BudgetPlanningProcess</c></dt>
///     <dt><c>BudgetPlanningStageRule</c></dt>
///     <dt><c>BudgetPlanPriorityConstraint</c></dt>
///     <dt><c>BudgetPlanAttachmentDirectory</c></dt>
///     <dt><c>BudgetPlanningProcessAdministration</c></dt>
///   </dl>
///
/// tables.
/// </summary>
public class BudgetPlanningProcessSetup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates the <c>BudgetPlanningProcess</c> record by setting the process approval
    /// state to in process.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <returns>
    /// true if budget planning process is activated; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The budget planning process record has to be inserted before being avtived.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// The <paramref name="_budgetPlanningProcessRecId"/> parameter must be specified.
    /// </exception>
    public static boolean activateProcess(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        boolean isActivated = false;

        if (!_budgetPlanningProcessRecId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (BudgetPlanningProcessSetup::validateForActivation(_budgetPlanningProcessRecId))
        {
            BudgetPlanningProcessSetup::changeProcessState(_budgetPlanningProcessRecId, BudgetPlanningApprovalProcessState::InProcess);
            info("@GLS70575");
            isActivated = true;
        }

        return isActivated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activeProcessCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the count of the active processes.
    /// </summary>
    /// <returns>
    /// The count of the active processes.
    /// </returns>
    private static Counter activeProcessCount()
    {
        BudgetPlanningProcess planningProcess;

        select count(recId) from planningProcess
            where planningProcess.ApprovalProcessState == BudgetPlanningApprovalProcessState::InProcess;

        return int642int(planningProcess.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeProcessState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the <c>BudgetPlanningProcess</c> approval state.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_budgetPlanningApprovalProcessState">
    /// The <c>BudgetPlanningProcess</c> approval state to change to.
    /// </param>
    /// <returns>
    /// true if budget planning process approval process state changed; otherwise, false.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The <paramref name="_budgetPlanningProcessRecId"/> parameter must be specified.
    /// </exception>
    public static boolean changeProcessState(
        BudgetPlanningProcessRecId         _budgetPlanningProcessRecId,
        BudgetPlanningApprovalProcessState _budgetPlanningApprovalProcessState)
    {
        boolean                 stateChanged = false;
        BudgetPlanningProcess   budgetPlanningProcess;

        budgetPlanningProcess = BudgetPlanningProcess::find(_budgetPlanningProcessRecId, true);

        if (!budgetPlanningProcess)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        ttsBegin;

        budgetPlanningProcess.ApprovalProcessState = _budgetPlanningApprovalProcessState;
        budgetPlanningProcess.update();

        ttsCommit;

        stateChanged = true;

        return stateChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanningProcessSetup construct()
    {
        return new BudgetPlanningProcessSetup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAllProcessStageRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>BudgetPlanningStageRule</c> records associated with <c>BudgetPlanningProcess</c>
    /// record and <c>BudgetPlanningWorkflow</c> record.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_budgetPlanningWorkflowRecId">
    /// The record ID of the <c>BudgetPlanningWorkflow</c> record.
    /// </param>
    public static void createAllProcessStageRules(BudgetPlanningProcessRecId _budgetPlanningProcessRecId, BudgetPlanningWorkflowRecId _budgetPlanningWorkflowRecId)
    {
        BudgetPlanningStageRule             budgetPlanningStageRule;
        BudgetPlanningWorkflowStage         budgetPlanningWorkflowStage;
        BudgetPlanningWorkflowStageRecId    budgetPlanningWorkflowStageRecId;
        RecordInsertList                    processStageRuleList;

        if (_budgetPlanningProcessRecId && _budgetPlanningWorkflowRecId)
        {
            processStageRuleList = new RecordInsertList(tableNum(budgetPlanningStageRule));

            // Initialize the head pointer to null
            budgetPlanningWorkflowStageRecId = 0;

            budgetPlanningStageRule.BudgetPlanningProcess = _budgetPlanningProcessRecId;

            // get the next budget plan workflow stage
            do
            {
                select firstOnly RecId from budgetPlanningWorkflowStage
                    where budgetPlanningWorkflowStage.BudgetPlanningWorkflow == _budgetPlanningWorkflowRecId
                       && budgetPlanningWorkflowStage.PriorBudgetPlanningWorkflowStage == budgetPlanningWorkflowStageRecId;

                if (!budgetPlanningWorkflowStage)
                {
                    // No more BudgetPlanningWorkflowStage records associated with the BudgetPlanningWorkflow
                    break;
                }

                // Assign the fields to BudgetPlanningStageRule buffer and insert into the list.
                budgetPlanningStageRule.BudgetPlanningWorkflowStage = budgetPlanningWorkflowStage.RecId;
                processStageRuleList.add(budgetPlanningStageRule);
                budgetPlanningWorkflowStageRecId = budgetPlanningWorkflowStage.RecId;
            } while (budgetPlanningWorkflowStageRecId);

            processStageRuleList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProcessAdministration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>BudgetPlanningProcessAdministration</c> record associated
    /// with the budgeting organization structure for a budget planning process.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_organizationHierarchyTypeRecId">
    /// The record ID of the <c>OMHierarchyType</c> record.
    /// </param>
    public static void createProcessAdministration(
            BudgetPlanningProcessRecId     _budgetPlanningProcessRecId,
            OrganizationHierarchyTypeRecId _organizationHierarchyTypeRecId)
    {
        OMHierarchyRelationship                 hierarchyRelationship;
        BudgetPlanningProcessAdministration     budgetPlanningProcessAdministration;
        BudgetPlanningProcess                   budgetPlanningProcess;
        utcDateTime                             uTcDateTimeNow = DateTimeUtil::utcNow();

        if (_budgetPlanningProcessRecId)
        {
            // Assign the budget planning process field once
            budgetPlanningProcessAdministration.BudgetPlanningProcess = _budgetPlanningProcessRecId;

            insert_recordset budgetPlanningProcessAdministration (BudgetPlanningProcess, BudgetingOrganization)
                select validTimeState(uTcDateTimeNow) RecId from budgetPlanningProcess
                    where budgetPlanningProcess.RecId == _budgetPlanningProcessRecId
                join ChildOrganization from hierarchyRelationship
                    where hierarchyRelationship.HierarchyType == _organizationHierarchyTypeRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deactivateProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deactivates the <c>BudgetPlanningProcess</c> record by setting the process approval
    /// state to draft.
    /// </summary>
    /// <param name="_budgetPlanningProcessName">
    /// The field <c>Name</c> of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_budgetPlanningApprovalProcessState">
    /// The field <c>ApprovalProcessState</c> of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <returns>
    /// true if budget planning process is deactivated; otherwise, false.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The <paramref name="_budgetPlanningProcessRecId"/> parameter must be specified.
    /// </exception>
    public static boolean deactivateProcess(
        BudgetPlanningProcessName          _budgetPlanningProcessName,
        BudgetPlanningApprovalProcessState _budgetPlanningApprovalProcessState,
        BudgetPlanningProcessRecId         _budgetPlanningProcessRecId)
    {
        boolean isDeactivated = false;

        if (!_budgetPlanningProcessRecId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        // If the user attempts to deactivate a budget planning process associated with
        // budget plans that are not completed.
        if (_budgetPlanningApprovalProcessState != BudgetPlanningApprovalProcessState::Completed
            && BudgetPlanningProcessSetup::existsBudgetPlanForBudgetPlanningProcess(_budgetPlanningProcessRecId))
        {
            isDeactivated = checkFailed("@GLS70594");
        }
        else
        {
            BudgetPlanningProcessSetup::changeProcessState(_budgetPlanningProcessRecId, BudgetPlanningApprovalProcessState::Draft);
            info("@GLS70595");
            isDeactivated = true;
        }

        return isDeactivated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllProcessAdministrationForProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all <c>BudgetPlanningProcessAdministration</c> records associated with
    /// <c>BudgetPlanningProcess</c> record.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    public static void deleteAllProcessAdministrationForProcess(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;

        ttsBegin;

        delete_from budgetPlanningProcessAdministration
            where budgetPlanningProcessAdministration.BudgetPlanningProcess == _budgetPlanningProcessRecId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllProcessStageRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete all <c>BudgetPlanningStageRule</c> records associated with the specified <c>BudgetPlanningProcess</c> record
    /// and delete all <c>BudgetPlanningWorkflowStage</c> records associated with the specified <c>BudgetPlanningWorkflow</c> record.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_budgetPlanningWorkflowRecId">
    /// The record ID of the <c>BudgetPlanningWorkflow</c> record.
    /// </param>
    public static void deleteAllProcessStageRules(BudgetPlanningProcessRecId _budgetPlanningProcessRecId, BudgetPlanningWorkflowRecId _budgetPlanningWorkflowRecId)
    {
        BudgetPlanningStageRule     budgetPlanningStageRule;
        BudgetPlanningWorkflowStage budgetPlanningWorkflowStage;

        ttsBegin;

        delete_from budgetPlanningStageRule
            where budgetPlanningStageRule.BudgetPlanningProcess == _budgetPlanningProcessRecId
            exists join RecId from budgetPlanningWorkflowStage
                where budgetPlanningWorkflowStage.RecId == budgetPlanningStageRule.BudgetPlanningWorkflowStage
                   && budgetPlanningWorkflowStage.BudgetPlanningWorkflow == _budgetPlanningWorkflowRecId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAndCreateAllProcessStageRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete then create all <c>BudgetPlanningStageRule</c> associated with <c>BudgetPlanningProcess</c> record.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_budgetPlanningWorkflowRecId">
    /// The record ID of the <c>BudgetPlanningWorkflow</c> record.
    /// </param>
    public static void deleteAndCreateAllProcessStageRules(BudgetPlanningProcessRecId _budgetPlanningProcessRecId, BudgetPlanningWorkflowRecId _budgetPlanningWorkflowRecId)
    {
        BudgetPlanningWorkflow budgetPlanningWorkflow;
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;

        // Delete all the budget planning stage rules for the process and workflows not associated with budget planning process administration
        while select RecId from budgetPlanningWorkflow
            notExists join budgetPlanningProcessAdministration
            where budgetPlanningProcessAdministration.BudgetPlanningWorkflow == budgetPlanningWorkflow.RecId
            &&    budgetPlanningProcessAdministration.BudgetPlanningProcess == _budgetPlanningProcessRecId
        {
            BudgetPlanningProcessSetup::deleteAllProcessStageRules(_budgetPlanningProcessRecId, budgetPlanningWorkflow.RecId);
        }

        budgetPlanningProcessAdministration.clear();

        BudgetPlanningWorkflowStage workflowStage;
        BudgetPlanningStageRule     stageRule;

        // Create all the budget planning stage rules for the process and selected workflow, only for the first
        // record on budget planning process administration gets associated with specific budget planning workflow.
        select count(RecId) from budgetPlanningProcessAdministration
            where budgetPlanningProcessAdministration.BudgetPlanningProcess == _budgetPlanningProcessRecId
                && budgetPlanningProcessAdministration.BudgetPlanningWorkflow == _budgetPlanningWorkflowRecId
                exists join workflowStage
                    where workflowStage.BudgetPlanningWorkflow == _budgetPlanningWorkflowRecId
                    notexists join stageRule
                        where stageRule.BudgetPlanningProcess           == _budgetPlanningProcessRecId
                            && stageRule.BudgetPlanningWorkflowStage    == workflowStage.RecId;

        if (budgetPlanningProcessAdministration.RecId == 1)
        {
            BudgetPlanningProcessSetup::createAllProcessStageRules(_budgetPlanningProcessRecId, _budgetPlanningWorkflowRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsBudgetPlanForBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an unapproved or draft <c>BudgetPlanHeader</c> record exist for the
    /// specified <c>BudgetPlanningProcess</c> reference.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>Budget planning process</c> record.
    /// </param>
    /// <returns>
    /// true if budget planning process associated with an unapproved or draft budget plan header; otherwise, false.
    /// </returns>
    public static boolean existsBudgetPlanForBudgetPlanningProcess(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        BudgetPlanHeader budgetPlanHeader;

        if (_budgetPlanningProcessRecId)
        {
            select firstonly RecId from budgetPlanHeader
                where budgetPlanHeader.BudgetPlanningProcess == _budgetPlanningProcessRecId
                    && (budgetPlanHeader.DocumentStatus != BudgetPlanStatus::Finalized
                        || budgetPlanHeader.WorkflowStatus != BudgetPlanWorkflowStatus::Approved);
        }

        return budgetPlanHeader.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>BudgetPlanningProcess</c> record with an active approval state.
    /// </summary>
    /// <returns>
    /// A record in the <c>BudgetPlanningProcess</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetPlanningProcess findActiveProcess()
    {
        BudgetPlanningProcess planningProcess;

        // Determine if there is any active budget planning process is active
        if (BudgetPlanningProcessSetup::activeProcessCount() == 1)
        {
            select firstOnly planningProcess
                where planningProcess.ApprovalProcessState == BudgetPlanningApprovalProcessState::InProcess;
        }

        return planningProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the <c>Ledger</c> table based on the <c>BudgetPlanHeader</c> record which is being used in current budget plan process.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// The record ID of the <c>Ledger</c> record.
    /// </returns>
    public static LedgerRecId getLedgerRecId(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        return BudgetPlanningProcess::find(BudgetPlanHeader::find(_budgetPlanHeaderRecId).BudgetPlanningProcess).Ledger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProcessActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>BudgetPlanningProcess</c> record ID passed in belongs to an active process.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record whose state needs to be determined.
    /// </param>
    /// <returns>
    /// true if the process is active; false otherwise.
    /// </returns>
    public static boolean isProcessActive(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        BudgetPlanningApprovalProcessState processApprovalState;

        processApprovalState = BudgetPlanningProcess::find(_budgetPlanningProcessRecId).ApprovalProcessState;

        return processApprovalState == BudgetPlanningApprovalProcessState::InProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetPlanAttachmentDirectory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>BudgetPlanAttachmentDirectory</c> records.
    /// </summary>
    /// <param name="_ctrl">
    /// The form reference control for which to perform the lookup.
    /// </param>
    /// <param name="_currentBudgetPlanAttachmentDirectory">
    /// The record ID of the currently selected <c>BudgetPlanAttachmentDirectory</c> record.
    /// </param>
    /// <returns>
    /// The <c>BudgetPlanAttachmentDirectory</c> record selected by the lookup.
    /// </returns>
    public static BudgetPlanAttachmentDirectory lookupBudgetPlanAttachmentDirectory(FormReferenceControl _ctrl, BudgetPlanAttachmentDirectoryRecId _currentBudgetPlanAttachmentDirectory = 0)
    {
        Args                          budgetPlanAttachmentDirLookupArgs;
        BudgetPlanAttachmentDirectory budgetPlanAttachmentDirectory;
        FormRun                       budgetPlanAttachmentDirFormLookup;

        budgetPlanAttachmentDirLookupArgs = new Args(formStr(BudgetPlanAttachmentDirectoryLookup));
        budgetPlanAttachmentDirLookupArgs.caller(_ctrl);

        if (_currentBudgetPlanAttachmentDirectory)
        {
            budgetPlanAttachmentDirLookupArgs.record(BudgetPlanAttachmentDirectory::find(_currentBudgetPlanAttachmentDirectory));
        }

        budgetPlanAttachmentDirFormLookup = ClassFactory::formRunClassOnClient(budgetPlanAttachmentDirLookupArgs);

        budgetPlanAttachmentDirFormLookup.init();

        // Perform the lookup.
        _ctrl.performFormLookup(budgetPlanAttachmentDirFormLookup);

        budgetPlanAttachmentDirectory = budgetPlanAttachmentDirFormLookup.selectRecordModeSelectedRecord() as BudgetPlanAttachmentDirectory;

        return budgetPlanAttachmentDirectory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupOrganizationHierarchyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>OMHierarchyType</c> records.
    /// </summary>
    /// <param name="_ctrl">
    /// The form reference control for which to perform the lookup.
    /// </param>
    /// <param name="_hierarchyPurpose">
    /// The <c>HierarchyPurpose</c> type to filter the lookup on.
    /// </param>
    /// <param name="_currentOrganizationHierarchyType">
    /// The record ID of the currently selected <c>OMHierarchyType</c> record.
    /// </param>
    /// <returns>
    /// The <c>OMHierarchyType</c> record selected by the lookup.
    /// </returns>
    public static OMHierarchyType lookupOrganizationHierarchyType(FormReferenceControl _ctrl, HierarchyPurpose _hierarchyPurpose, OrganizationHierarchyTypeRecId _currentOrganizationHierarchyType)
    {
        Args            hierarchyTypeLookupArgs;
        OMHierarchyType hierarchyType;
        FormRun         hierarchyTypeFormLookup;

        hierarchyTypeLookupArgs = new Args(formStr(OrganizationHierarchyLookup));
        hierarchyTypeLookupArgs.caller(_ctrl);
        hierarchyTypeLookupArgs.record(OMHierarchyType::find(_currentOrganizationHierarchyType));

        hierarchyTypeLookupArgs.parmEnumType(enumNum(HierarchyPurpose));
        hierarchyTypeLookupArgs.parmEnum(enum2int(_hierarchyPurpose));

        hierarchyTypeFormLookup = ClassFactory::formRunClassOnClient(hierarchyTypeLookupArgs);

        hierarchyTypeFormLookup.init();

        // Perform the lookup.
        _ctrl.performFormLookup(hierarchyTypeFormLookup);

        hierarchyType = hierarchyTypeFormLookup.selectRecordModeSelectedRecord() as OMHierarchyType;

        return hierarchyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPlanningAdministrationWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>BudgetingOrganization</c> field of the <c>BudgetPlanningProcessAdministration</c> records.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_operatingUnitType">
    /// The organization <c>OMOperatingUnitType</c> of the <c>BudgetPlanningProcessAdministration</c> record.
    /// </param>
    /// <param name="_budgetPlanningWorkflowName">
    /// The name of the <c>BudgetPlanningWorkflow</c> record.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The <paramref name="_budgetPlanningProcessRecId"/> parameter and <paramref
    /// name="_budgetPlanningWorkflowName"/> parameter must be specified.
    /// </exception>
    public static void setBudgetPlanningAdministrationWorkflow(
        BudgetPlanningProcessRecId _budgetPlanningProcessRecId,
        OMOperatingUnitType        _operatingUnitType,
        BudgetPlanningWorkflowName _budgetPlanningWorkflowName)
    {
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;
        OMOperatingUnit                     operatingUnit;
        BudgetPlanningWorkflowRecId         budgetPlanningWorkflowRecId;

        if (!_budgetPlanningProcessRecId || _budgetPlanningWorkflowName == '')
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        budgetPlanningWorkflowRecId = BudgetPlanningWorkflow::findByName(_budgetPlanningWorkflowName).RecId;

        switch (_operatingUnitType)
        {
            case OMOperatingUnitType::None:
                // This is a legal entity
                update_recordSet budgetPlanningProcessAdministration
                    setting  BudgetPlanningWorkflow = budgetPlanningWorkflowRecId
                    where budgetPlanningProcessAdministration.BudgetPlanningProcess == _budgetPlanningProcessRecId
                    notExists join operatingUnit
                        where operatingUnit.RecId == budgetPlanningProcessAdministration.BudgetingOrganization;

                break;

            case OMOperatingUnitType::OMAnyOU:
                update_recordSet budgetPlanningProcessAdministration
                    setting  BudgetPlanningWorkflow = budgetPlanningWorkflowRecId
                    where budgetPlanningProcessAdministration.BudgetPlanningProcess == _budgetPlanningProcessRecId;

                break;

            default:
                // Reset by operating unit type
                update_recordSet budgetPlanningProcessAdministration
                    setting  BudgetPlanningWorkflow = budgetPlanningWorkflowRecId
                    where budgetPlanningProcessAdministration.BudgetPlanningProcess == _budgetPlanningProcessRecId
                    join operatingUnit
                        where operatingUnit.RecId == budgetPlanningProcessAdministration.BudgetingOrganization
                        && operatingUnit.OMOperatingUnitType == _operatingUnitType;

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetPlanningProcessDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies <c>BudgetPlanningProcess</c> before delete.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_budgetPlanningApprovalProcessState">
    /// The field <c>ApprovalProcessState</c> of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <returns>
    /// true if <c>BudgetPlanningProcess</c> record can be deleted; otherwise, false.
    /// </returns>
    public static boolean validateBudgetPlanningProcessDelete(
        BudgetPlanningProcessRecId         _budgetPlanningProcessRecId,
        BudgetPlanningApprovalProcessState _budgetPlanningApprovalProcessState)
    {
        boolean          isValid = true;

        if (_budgetPlanningApprovalProcessState == BudgetPlanningApprovalProcessState::InProcess)
        {
            isValid = checkFailed("@GLS70576");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateForActivation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the required fields are set.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <returns>
    /// true if required fields in <c>BudgetPlanningProcessAdministration</c> and <c>BudgetPlanningStageRule</c> tables have been set; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Determines whether the following tables' fields are assigned values in the mandatory fields.
    /// This additional validation is required since we create the records in these tables ahead of time
    /// and then require the user to enter the missing data.
    ///    <dl>
    ///      <dt><c>BudgetPlanningProcessAdministration</c></dt>
    ///        <dd>BudgetPlanningWorkflow</dd>
    ///      <dt><c>BudgetPlanningStageRule</c></dt>
    ///        <dd>BudgetPlanWorksheetTemplate</dd>
    ///    </dl>
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// The <paramref name="_budgetPlanningProcessRecId"/> parameter must be specified.
    /// </exception>
    public static boolean validateForActivation(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        boolean                             isValid = true;
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;

        if (!_budgetPlanningProcessRecId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        // verify all required fields BudgetPlanWorkflow in BudgetPlanningAdministration table are set.
        select firstOnly RecId from budgetPlanningProcessAdministration
            where budgetPlanningProcessAdministration.BudgetPlanningProcess == _budgetPlanningProcessRecId
              && (budgetPlanningProcessAdministration.BudgetPlanningWorkflow == 0);

        if (budgetPlanningProcessAdministration)
        {
            isValid = checkFailed(strFmt("@Budget:FieldMustBeFilledIn", "@Budget:Workflow"));
        }

        if (isValid)
        {
            // Get the list of the workflows associated with current budget planning process
            container workflowContainer = BudgetPlanningWorkflow::getWorkflowsForBudgetPlanningProcess(_budgetPlanningProcessRecId);

            for (int counter = 1; counter <= conLen(workflowContainer); counter++)
            {
                BudgetPlanningStageRule     budgetplanningStageRule;
                BudgetPlanningWorkflowStage budgetPlanningWorkflowStage;
                BudgetPlanningWorkflowRecId budgetPlanningWorkflowRecId = conPeek(workflowContainer, counter);

                // Verify the required field Layout in BudgetPlanningStageRule table is set.
                select firstOnly RecId from budgetPlanningStageRule
                    where budgetPlanningStageRule.BudgetPlanningProcess == _budgetPlanningProcessRecId
                       && budgetPlanningStageRule.Layout                == 0
                    join RecId from budgetPlanningWorkflowStage
                        where budgetPlanningWorkflowStage.RecId                  == budgetPlanningStageRule.BudgetPlanningWorkflowStage
                           && budgetPlanningWorkflowStage.BudgetPlanningWorkflow == budgetPlanningWorkflowRecId;

                if (budgetPlanningStageRule)
                {
                    isValid = checkFailed(strFmt("@Budget:FieldMustBeFilledIn", "@Budget:LayoutDisplayNameSingular"));
                    break;
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllActiveProcessData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that all active processes have valid data setup.
    /// </summary>
    /// <returns> true, if all active processes have a valid data setup; otherwise, false. </returns>
    public static boolean validateAllActiveProcessData()
    {
        boolean                             isValid = true;
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;
        BudgetPlanningProcess               budgetPlanningProcess;
        BudgetPlanningStageRule             budgetPlanningStageRule;

        select firstonly RecId, BudgetPlanningProcess from budgetPlanningProcessAdministration
            where budgetPlanningProcessAdministration.BudgetPlanningWorkflow == 0
            exists join budgetPlanningProcess
                where budgetPlanningProcess.RecId == budgetPlanningProcessAdministration.BudgetPlanningProcess
                    && budgetPlanningProcess.ApprovalProcessState == BudgetPlanningApprovalProcessState::InProcess;

        if (budgetPlanningProcessAdministration.RecId)
        {
            isValid = checkFailed(strFmt("@Budget:BudgetPlanning_ForSuffix", strFmt("@Budget:FieldMustBeFilledIn", "@Budget:Workflow"), BudgetPlanningProcessTranslation::getLocalizedName(budgetPlanningProcessAdministration.BudgetPlanningProcess)));
        }

        if (isValid)
        {
            select firstonly RecId, BudgetPlanningProcess from budgetPlanningStageRule
                where budgetPlanningStageRule.Layout == 0
                exists join budgetPlanningProcess
                    where budgetPlanningProcess.RecId == budgetPlanningStageRule.BudgetPlanningProcess
                        && budgetPlanningProcess.ApprovalProcessState == BudgetPlanningApprovalProcessState::InProcess;

            if (budgetPlanningStageRule.RecId)
            {
                isValid = checkFailed(strFmt("@Budget:BudgetPlanning_ForSuffix", strFmt("@Budget:FieldMustBeFilledIn", "@Budget:LayoutDisplayNameSingular"), BudgetPlanningProcessTranslation::getLocalizedName(budgetPlanningStageRule.BudgetPlanningProcess)));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>