<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustDisputeHistoryAutomation</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CustDisputeHistoryAutomation
{
    CustTrans custTransPayment;
    CustTrans custTransOrig;
    CustDispute custDispute;
    CustDisputeHistory custDisputeHistoryLast;
    CustVendDisputeStatus lastStatus;
    CustDisputeHistoryAutomationAction action;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustDisputeHistoryAutomation construct(CustDisputeHistoryAutomationAction _action)
    {
        CustDisputeHistoryAutomation helper;
        switch (_action)
        {
            case CustDisputeHistoryAutomationAction::Payment:
                return new CustDisputeHistoryAutomationPayment();
            case CustDisputeHistoryAutomationAction::Aging:
                return new CustDisputeHistoryAutomationAging();
            default:
                break;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the logic to run the class.
    /// </summary>
    public void run()
    {
        this.updateCustDisputeHistory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustDisputeHistory</Name>
				<Source><![CDATA[
    abstract void updateCustDisputeHistory()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustDisputeRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>CustDispute</c> record.
    /// </summary>
    /// <param name = "_custDispute">The <c>CustDispute</c> record.</param>
    /// <returns>The <c>CustDispute</c> record.</returns>
    public CustDispute parmCustDisputeRecord(CustDispute _custDispute = custDispute)
    {
        custDispute = _custDispute;
        return custDispute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustTransPaymentRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>CustTrans</c> payment record.
    /// </summary>
    /// <param name = "_custTrans">The <c>CustTrans</c> payment record.</param>
    /// <returns>The <c>CustTrans</c> payment record.</returns>
    public CustTrans parmCustTransPaymentRecord(CustTrans _custTrans = custTransPayment)
    {
        custTransPayment = _custTrans;
        return custTransPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>CustTrans</c> record that a payment is being settled against.
    /// </summary>
    /// <param name = "_originalCustTrans">The <c>CustTrans</c> record a payment is being settled against.</param>
    /// <returns>The <c>CustTrans</c> record a payment is being settled against.</returns>
    public CustTrans parmOriginalCustTrans(CustTrans _originalCustTrans = custTransOrig)
    {
        custTransOrig = _originalCustTrans;
        return custTransOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLastStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the last status for a <c>CustTrans</c> record being tracked by collections.
    /// </summary>
    /// <param name = "_status">The last status for the <c>CustTrans</c> record.</param>
    /// <returns>The last status for the <c>CustTrans</c> record.</returns>
    public CustVendDisputeStatus parmLastStatusUpdate(CustVendDisputeStatus _status = lastStatus)
    {
        lastStatus = _status;
        return lastStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the automation action.
    /// </summary>
    /// <param name = "_action">The action of the class.</param>
    /// <returns>The action of the class.</returns>
    public CustDisputeHistoryAutomationAction parmAction(CustDisputeHistoryAutomationAction _action)
    {
        action = _action;
        return action;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesDisputeExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>CustTrans</c> is being tracked by collections status.
    /// </summary>
    /// <param name = "_custTransRecId">The <c>CustTrans</c> <c>RecId</c>.</param>
    /// <param name = "_isPaymentCancelled">Whether or not this is a payment cancellation.</param>
    /// <returns>Existence of the <c>CustDispute</c>.</returns>
    public static boolean doesDisputeExist(RecId _custTransRecId, NoYes _isPaymentCancelled = false)
    {
        CustTrans custTrans = CustTrans::find(_custTransRecId);

        if (_isPaymentCancelled)
        {
            CustSettlement custSettlement;

            select firstonly OffsetRecId from custSettlement
                where custSettlement.TransRecId == custTrans.OffsetRecId
                    && custSettlement.OffsetRecId != _custTransRecId;

            return CustDispute::findByCustTrans(custSettlement.OffsetRecId).RecId ? true : false;
        }

        return ((CustDispute::findByCustTrans(CustTrans::findByVoucher(custTrans.LastSettleVoucher).RecId).RecId) ?
            true : (CustDispute::findByCustTrans(custTrans.RecId).RecId ? true : false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesDisputeExistForJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a dispute exists for an invoice marked in an unposted payment journal.
    /// </summary>
    /// <param name = "_journalNum">The journal id.</param>
    /// <returns>Existance of a <c>CustDispute</c> record associated with a marked invoice in the journal.</returns>
    public static boolean doesDisputeExistForJournal(LedgerJournalId _journalNum)
    {
        LedgerJournalTrans ledgerJournalTrans;
        SpecTrans specTrans;
        CustTrans custTrans;
        CustDispute custDispute;
        CustTransOpen custTransOpen;

        select firstonly RecId from ledgerJournalTrans 
            where ledgerJournalTrans.JournalNum == _journalNum
                && ledgerJournalTrans.TransactionType == LedgerTransType::Payment
            exists join specTrans 
                where specTrans.SpecTableId == tableNum(LedgerJournalTrans)
                    && specTrans.SpecRecId == ledgerJournalTrans.RecId
                    && specTrans.RefTableId == tableNum(CustTransOpen)
            exists join custTransOpen 
                where custTransOpen.RecId == specTrans.RefRecId
            exists join custTrans
                where custTrans.RecId == custTransOpen.RefRecId
            exists join custDispute
                where custDispute.CustTrans == custTrans.RecId;

        return (ledgerJournalTrans.RecId != 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>