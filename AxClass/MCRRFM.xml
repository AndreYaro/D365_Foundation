<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRRFM</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRRFM</c> class calculates, assigns and generates summary info regarding
///     RFM scores.
/// </summary>
final class MCRRFM
{
    MCRRFMDefinition    trfmDefinition;
    str                 strRecencyMultiplier;
    str                 strFrequencyMultiplier;
    str                 strMonetaryMultiplier;
    str                 strEndDate;
    str                 datePart;
    EndDate             endDate;
    #define.R('R')
    #define.F('F')
    #define.M('M')
    #define.d('d')
    #define.wk('wk')
    #define.m('m')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildFrequencyRankingSQL</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the SQL needed to create the frequency definition.
    /// </summary>
    /// <param name="_calledBy">
    /// The operation context.
    /// </param>
    /// <returns>
    /// The SQL needed to create the frequency definition.
    /// </returns>
    public str buildFrequencyRankingSQL(str _calledBy = '')
    {
        str         sqlStatement = '';
        str         sqlHigherPrecedence = '';
        str         precedence1, precedence2;
        int         fieldIncrementer = 0;

        str         sqlStatementPartitionBy = '';

        str         sqlJoinStatement = '';

        if (trfmDefinition.FrequencyPrecedence != MCRPriority::High &&
           (trfmDefinition.FrequencyPrecedence <  trfmDefinition.RecencyPrecedence ||
            trfmDefinition.FrequencyPrecedence <  trfmDefinition.MonetaryPrecedence) )
        {
            if (trfmDefinition.RecencyPrecedence == trfmDefinition.MonetaryPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY A.RECENCYSCORE, A.MONETARYSCORE ';
                sqlHigherPrecedence = ' A.RECENCYSCORE, A.MONETARYSCORE, ';
                precedence1 = #R;
                precedence2 = #M;
                fieldIncrementer = 2;
            }
            else if (trfmDefinition.RecencyPrecedence > trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.MonetaryPrecedence > trfmDefinition.FrequencyPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY A.RECENCYSCORE, A.MONETARYSCORE ';
                sqlHigherPrecedence = ' A.RECENCYSCORE, A.MONETARYSCORE, ';
                precedence1 = #R;
                precedence2 = #M;
                fieldIncrementer = 2;
            }
            else if (trfmDefinition.MonetaryPrecedence <= trfmDefinition.FrequencyPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY A.RECENCYSCORE ';
                sqlHigherPrecedence = ' A.RECENCYSCORE, ';
                precedence1 = #R;
                precedence2 = '';
                fieldIncrementer = 1;
            }
            else if (trfmDefinition.RecencyPrecedence < trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.RecencyPrecedence > trfmDefinition.FrequencyPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY A.MONETARYSCORE, A.RECENCYSCORE ';
                sqlHigherPrecedence = ' A.MONETARYSCORE, A.RECENCYSCORE, ';
                precedence1 = #M;
                precedence2 = #R;
                fieldIncrementer = 2;
            }
            else if (trfmDefinition.RecencyPrecedence <= trfmDefinition.FrequencyPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY A.MONETARYSCORE ';
                sqlHigherPrecedence = ' A.MONETARYSCORE, ';
                precedence1 = #M;
                precedence2 = '';
                fieldIncrementer = 1;
            }

            if (precedence2 == #R ||
               (precedence2 == '' && precedence1 == #R) )
            {
                sqlJoinStatement = ' JOIN(';
                sqlJoinStatement += this.buildRecencyRankingSQL('BUILDRECENCYRANKINGSQL');
                sqlJoinStatement += ' ) B ON A.CUSTACCOUNT = B.CUSTACCOUNT AND A.DATAAREAID = B.DATAAREAID';
            }
            else if (precedence2 == #M ||
                    (precedence2 == '' && precedence1 == #M) )// #M - monetary
            {
                sqlJoinStatement = ' JOIN(';
                sqlJoinStatement += this.buildMonetaryRankingSQL('BUILDRECENCYRANKINGSQL');
                sqlJoinStatement += ' ) B ON A.CUSTACCOUNT = B.CUSTACCOUNT AND A.DATAAREAID = B.DATAAREAID';
            }
        }
        else if (_calledBy == 'BUILDRECENCYRANKINGSQL' &&
                 trfmDefinition.FrequencyPrecedence == trfmDefinition.MonetaryPrecedence)
        {
            sqlStatementPartitionBy = ' PARTITION BY A.MONETARYSCORE ';
            sqlHigherPrecedence = ' A.MONETARYSCORE, ';
            fieldIncrementer = 1;

            sqlJoinStatement = ' JOIN(';
            sqlJoinStatement += this.buildMonetaryRankingSQL('BUILDFREQUENCYRANKINGSQL');
            sqlJoinStatement += ' ) B ON A.CUSTACCOUNT = B.CUSTACCOUNT AND A.DATAAREAID = B.DATAAREAID';
        }
        else if (_calledBy == 'BUILDMONETARYRANKINGSQL' &&
                 trfmDefinition.FrequencyPrecedence == trfmDefinition.RecencyPrecedence)
        {
            sqlStatementPartitionBy = ' PARTITION BY A.RECENCYSCORE ';
            sqlHigherPrecedence = ' A.RECENCYSCORE, ';
            fieldIncrementer = 1;

            sqlJoinStatement = ' JOIN(';
            sqlJoinStatement += this.buildRecencyRankingSQL('BUILDFREQUENCYRANKINGSQL');
            sqlJoinStatement += ' ) B ON A.CUSTACCOUNT = B.CUSTACCOUNT AND A.DATAAREAID = B.DATAAREAID';
        }

        sqlStatement += 'SELECT A.CUSTACCOUNT, A.DATAAREAID, ';
        sqlStatement += sqlHigherPrecedence;
        sqlStatement += '    NTILE(' + int2str(trfmDefinition.FrequencyDivisions) + ') ';
        sqlStatement += ' OVER(' + sqlStatementPartitionBy + ' ORDER BY ORDERFREQUENCY ASC) * '  + strFrequencyMultiplier + ' AS FREQUENCYSCORE ';
        sqlStatement += ' , ORDERFREQUENCY AS ORDERCOUNT';
        sqlStatement += '    FROM MCRSALESSTATSCUSTTABLE A ';
        sqlStatement += sqlJoinStatement;
        sqlStatement += '    WHERE A.DATAAREAID = \'' + getCompany(tableNum(MCRSalesStatsCustTable), curext()) + '\'';
        sqlStatement += '    AND ORDERFREQUENCY > 0 ';

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMonetaryRankingSQL</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the SQL needed to create the monetary definition.
    /// </summary>
    /// <param name="_calledBy">
    /// The operation context.
    /// </param>
    /// <returns>
    /// The SQL needed to create the monetary definition.
    /// </returns>
    public str buildMonetaryRankingSQL(str _calledBy = '')
    {
        str         sqlStatement = '';
        str         sqlHigherPrecedence = '';
        str         precedence1, precedence2;
        int         fieldIncrementer = 0;

        str         sqlStatementPartitionBy = '';

        str         sqlJoinStatement = '';
        str         sqlMonetaryCalcStatement = '';

        if (trfmDefinition.MonetaryPrecedence != MCRPriority::High &&
           (trfmDefinition.MonetaryPrecedence <  trfmDefinition.FrequencyPrecedence ||
            trfmDefinition.MonetaryPrecedence <  trfmDefinition.RecencyPrecedence) )
        {
            if (trfmDefinition.RecencyPrecedence == trfmDefinition.FrequencyPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY A.RECENCYSCORE, A.FREQUENCYSCORE ';
                sqlHigherPrecedence = ' A.RECENCYSCORE, A.FREQUENCYSCORE, ';
                precedence1 = #R;
                precedence2 = #F;
                fieldIncrementer = 2;
            }
            else if (trfmDefinition.RecencyPrecedence > trfmDefinition.FrequencyPrecedence &&
                trfmDefinition.FrequencyPrecedence > trfmDefinition.MonetaryPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY A.RECENCYSCORE, A.FREQUENCYSCORE ';
                sqlHigherPrecedence = ' A.RECENCYSCORE, A.FREQUENCYSCORE, ';
                precedence1 = #R;
                precedence2 = #F;
                fieldIncrementer = 2;
            }
            else if (trfmDefinition.FrequencyPrecedence <= trfmDefinition.MonetaryPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY A.RECENCYSCORE ';
                sqlHigherPrecedence = ' A.RECENCYSCORE, ';
                precedence1 = #R;
                fieldIncrementer = 1;
            }
            else if (trfmDefinition.RecencyPrecedence < trfmDefinition.FrequencyPrecedence &&
                trfmDefinition.RecencyPrecedence > trfmDefinition.MonetaryPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY A.FREQUENCYSCORE, A.RECENCYSCORE ';
                sqlHigherPrecedence = ' A.FREQUENCYSCORE, A.RECENCYSCORE, ';
                precedence1 = #F;
                precedence2 = #R;
                fieldIncrementer = 2;
            }
            else if (trfmDefinition.RecencyPrecedence <= trfmDefinition.MonetaryPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY A.FREQUENCYSCORE ';
                sqlHigherPrecedence = ' A.FREQUENCYSCORE, ';
                precedence1 = #F;
                fieldIncrementer = 1;
            }

            if (precedence2 == #F ||
               (precedence2 == '' && precedence1 == #F) )
            {
                sqlJoinStatement = ' JOIN(';
                sqlJoinStatement += this.buildFrequencyRankingSQL('BUILDRECENCYRANKINGSQL');
                sqlJoinStatement += ' ) B ON A.CUSTACCOUNT = B.CUSTACCOUNT AND A.DATAAREAID = B.DATAAREAID';
            }
            else if (precedence2 == #R ||
                    (precedence2 == '' && precedence1 == #R) )// #R - recency
            {
                sqlJoinStatement = ' JOIN(';
                sqlJoinStatement += this.buildRecencyRankingSQL('BUILDRECENCYRANKINGSQL');
                sqlJoinStatement += ' ) B ON A.CUSTACCOUNT = B.CUSTACCOUNT AND A.DATAAREAID = B.DATAAREAID';
            }
        }
        else if (_calledBy == 'BUILDFREQUENCYRANKINGSQL' &&
                 trfmDefinition.MonetaryPrecedence == trfmDefinition.RecencyPrecedence)
        {
            sqlStatementPartitionBy = ' PARTITION BY A.RECENCYSCORE ';
            sqlHigherPrecedence = ' A.RECENCYSCORE, ';
            fieldIncrementer = 1;

            sqlJoinStatement = ' JOIN(';
            sqlJoinStatement += this.buildRecencyRankingSQL('BUILDMONETARYRANKINGSQL');
            sqlJoinStatement += ' ) B ON A.CUSTACCOUNT = B.CUSTACCOUNT AND A.DATAAREAID = B.DATAAREAID';
        }
        else if (_calledBy == 'BUILDRECENCYRANKINGSQL' &&
                 trfmDefinition.MonetaryPrecedence == trfmDefinition.FrequencyPrecedence)
        {
            sqlStatementPartitionBy = ' PARTITION BY A.FREQUENCYSCORE ';
            sqlHigherPrecedence = ' A.FREQUENCYSCORE, ';
            fieldIncrementer = 1;

            sqlJoinStatement = ' JOIN(';
            sqlJoinStatement += this.buildFrequencyRankingSQL('BUILDMONETARYRANKINGSQL');
            sqlJoinStatement += ' ) B ON A.CUSTACCOUNT = B.CUSTACCOUNT AND A.DATAAREAID = B.DATAAREAID';
        }

        if (trfmDefinition.rfmGrossOrNet == MCRRFMGrossOrNet::Net &&
            trfmDefinition.rfmSubtractReturns == NoYes::No    )
        {
            sqlMonetaryCalcStatement = ' (TOTALINVOICEAMOUNTMST - TOTALINVOICECOSTAMOUNTMST)/CAST(ORDERFREQUENCY AS NUMERIC(36, 12)) ';
        }
        else if (trfmDefinition.rfmGrossOrNet == MCRRFMGrossOrNet::Net &&
                trfmDefinition.rfmSubtractReturns == NoYes::Yes    )
        {
            sqlMonetaryCalcStatement = ' (TOTALINVOICEAMOUNTMST - TOTALINVOICECOSTAMOUNTMST + TOTALRETURNINVOICEDAMOUNTMST)/CAST(ORDERFREQUENCY AS NUMERIC(36, 12)) ';
        }
        else if (trfmDefinition.rfmGrossOrNet == MCRRFMGrossOrNet::Gross &&
                trfmDefinition.rfmSubtractReturns == NoYes::Yes    )
        {
            sqlMonetaryCalcStatement = ' (TOTALINVOICEAMOUNTMST + TOTALRETURNINVOICEDAMOUNTMST)/CAST(ORDERFREQUENCY AS NUMERIC(36, 12)) ';
        }
        else
        {
            sqlMonetaryCalcStatement = ' AVGINVOICEAMOUNTMST ';
        }

        sqlStatement += 'SELECT A.CUSTACCOUNT, A.DATAAREAID, ';
        sqlStatement += sqlHigherPrecedence;
        sqlStatement += '    NTILE(' + int2str(trfmDefinition.MonetaryDivisions) + ') ';
        sqlStatement += ' OVER(' + sqlStatementPartitionBy + ' ORDER BY ' + sqlMonetaryCalcStatement + ' ASC) * '  + strMonetaryMultiplier + ' AS MONETARYSCORE ';
        sqlStatement +=  ', ' + sqlMonetaryCalcStatement +' AS AVGSALES ';
        sqlStatement += '    FROM MCRSALESSTATSCUSTTABLE A ';
        sqlStatement += sqlJoinStatement;
        sqlStatement += '    WHERE A.DATAAREAID = \'' + getCompany(tableNum(MCRSalesStatsCustTable), curext()) + '\'';
        sqlStatement += '    AND ORDERFREQUENCY > 0 ';

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRecencyRankingSQL</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the SQL needed to create the recency definition.
    /// </summary>
    /// <param name="_calledBy">
    /// The operation context.
    /// </param>
    /// <returns>
    /// The SQL needed to create the recency definition.
    /// </returns>
    public str buildRecencyRankingSQL(str _calledBy = '')
    {
        str         sqlStatement = '';
        str         sqlHigherPrecedence = '';
        str         precedence1, precedence2;
        int         fieldIncrementer = 0;

        str         sqlStatementPartitionBy = '';

        str         sqlJoinStatement = '';

        if (trfmDefinition.RecencyPrecedence != MCRPriority::High &&
           (trfmDefinition.RecencyPrecedence <  trfmDefinition.FrequencyPrecedence ||
            trfmDefinition.RecencyPrecedence <  trfmDefinition.MonetaryPrecedence) )
        {
            if (trfmDefinition.FrequencyPrecedence == trfmDefinition.MonetaryPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY A.FREQUENCYSCORE, A.MONETARYSCORE ';
                sqlHigherPrecedence = ' A.FREQUENCYSCORE, A.MONETARYSCORE, ';
                precedence1 = #F;
                precedence2 = #M;
                fieldIncrementer = 2;
            }
            else if (trfmDefinition.FrequencyPrecedence > trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.MonetaryPrecedence > trfmDefinition.RecencyPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY A.FREQUENCYSCORE, A.MONETARYSCORE ';
                sqlHigherPrecedence = ' A.FREQUENCYSCORE, A.MONETARYSCORE, ';
                precedence1 = #F;
                precedence2 = #M;
                fieldIncrementer = 2;
            }
            else if (trfmDefinition.MonetaryPrecedence <= trfmDefinition.RecencyPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY A.FREQUENCYSCORE ';
                sqlHigherPrecedence = ' A.FREQUENCYSCORE, ';
                precedence1 = #F;
                precedence2 = '';
                fieldIncrementer = 1;
            }
            else if (trfmDefinition.FrequencyPrecedence < trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.FrequencyPrecedence > trfmDefinition.RecencyPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY A.MONETARYSCORE, A.FREQUENCYSCORE ';
                sqlHigherPrecedence = ' A.MONETARYSCORE, A.FREQUENCYSCORE, ';
                precedence1 = #M;
                precedence2 = #F;
                fieldIncrementer = 2;
            }
            else if (trfmDefinition.FrequencyPrecedence <= trfmDefinition.RecencyPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY A.MONETARYSCORE ';
                sqlHigherPrecedence = ' A.MONETARYSCORE, ';

                precedence1 = #M;
                precedence2 = '';
                fieldIncrementer = 1;
            }

            if (precedence2 == #F ||
               (precedence2 == '' && precedence1 == #F) )
            {
                sqlJoinStatement = ' JOIN(';
                sqlJoinStatement += this.buildFrequencyRankingSQL('BUILDRECENCYRANKINGSQL');
                sqlJoinStatement += ' ) B ON A.CUSTACCOUNT = B.CUSTACCOUNT AND A.DATAAREAID = B.DATAAREAID';
            }
            else if (precedence2 == #M ||
                    (precedence2 == '' && precedence1 == #M) )// #M - monetary
            {
                sqlJoinStatement = ' JOIN(';
                sqlJoinStatement += this.buildMonetaryRankingSQL('BUILDRECENCYRANKINGSQL');
                sqlJoinStatement += ' ) B ON A.CUSTACCOUNT = B.CUSTACCOUNT AND A.DATAAREAID = B.DATAAREAID';
            }
        }
        else if (_calledBy == 'BUILDFREQUENCYRANKINGSQL' &&
                 trfmDefinition.RecencyPrecedence == trfmDefinition.MonetaryPrecedence)
        {
            sqlStatementPartitionBy = ' PARTITION BY A.MONETARYSCORE ';
            sqlHigherPrecedence = ' A.MONETARYSCORE, ';
            fieldIncrementer = 1;

            sqlJoinStatement = ' JOIN(';
            sqlJoinStatement += this.buildMonetaryRankingSQL('BUILDRECENCYRANKINGSQL');
            sqlJoinStatement += ' ) B ON A.CUSTACCOUNT = B.CUSTACCOUNT AND A.DATAAREAID = B.DATAAREAID';
        }
        else if (_calledBy == 'BUILDMONETARYRANKINGSQL' &&
                 trfmDefinition.RecencyPrecedence == trfmDefinition.FrequencyPrecedence)
        {
            sqlStatementPartitionBy = ' PARTITION BY A.FREQUENCYSCORE ';
            sqlHigherPrecedence = ' A.FREQUENCYSCORE, ';
            fieldIncrementer = 1;

            sqlJoinStatement = ' JOIN(';
            sqlJoinStatement += this.buildFrequencyRankingSQL('BUILDRECENCYRANKINGSQL');
            sqlJoinStatement += ' ) B ON A.CUSTACCOUNT = B.CUSTACCOUNT AND A.DATAAREAID = B.DATAAREAID';
        }

        sqlStatement += 'SELECT A.CUSTACCOUNT, A.DATAAREAID, ';
        sqlStatement += sqlHigherPrecedence;
        sqlStatement += '    NTILE(' + int2str(trfmDefinition.RecencyDivisions) + ') ';
        sqlStatement += ' OVER(' + sqlStatementPartitionBy + ' ORDER BY DATEDIFF(' + datePart + ', STATLASTORDERDATE, \''+ strEndDate +'\' ) DESC) * ' + strRecencyMultiplier + ' AS RECENCYSCORE ';
        sqlStatement += ' , DATEDIFF(' + datePart + ', STATLASTORDERDATE, \''+ strEndDate +'\' ) AS PASTTIME';
        sqlStatement += '    FROM MCRSALESSTATSCUSTTABLE A ';
        sqlStatement += sqlJoinStatement;
        sqlStatement += '    WHERE A.DATAAREAID = \'' + getCompany(tableNum(MCRSalesStatsCustTable), curext()) + '\'';
        sqlStatement += '    AND ORDERFREQUENCY > 0 ';

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSQLFrequencyRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the SQL needed to create the frequency definition.
    /// </summary>
    /// <returns>
    /// The SQL needed to create the frequency definition.
    /// </returns>
    public str buildSQLFrequencyRanges()
    {
        str         sqlStatementFreq = '';

        str         sqlHigherPrecedence = '';

        if (trfmDefinition.FrequencyPrecedence != MCRPriority::High &&
           (trfmDefinition.FrequencyPrecedence <  trfmDefinition.RecencyPrecedence ||
            trfmDefinition.FrequencyPrecedence <  trfmDefinition.MonetaryPrecedence) )
        {
            if (trfmDefinition.RecencyPrecedence == trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' RECENCYSCORE, MONETARYSCORE, ';
            }
            else if (trfmDefinition.RecencyPrecedence > trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.MonetaryPrecedence > trfmDefinition.FrequencyPrecedence)
            {
                sqlHigherPrecedence = ' RECENCYSCORE, MONETARYSCORE, ';
            }
            else if (trfmDefinition.MonetaryPrecedence <= trfmDefinition.FrequencyPrecedence)
            {
                sqlHigherPrecedence = ' RECENCYSCORE, ';
            }
            else if (trfmDefinition.RecencyPrecedence < trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.RecencyPrecedence > trfmDefinition.FrequencyPrecedence)
            {
                sqlHigherPrecedence = ' MONETARYSCORE, RECENCYSCORE, ';
            }
            else if (trfmDefinition.RecencyPrecedence <= trfmDefinition.FrequencyPrecedence)
            {
                sqlHigherPrecedence = ' MONETARYSCORE, ';
            }
        }

        sqlStatementFreq += 'SELECT ' +  sqlHigherPrecedence + ' FREQUENCYSCORE, MIN(ORDERCOUNT) AS START, MAX(ORDERCOUNT) AS [END]';
        sqlStatementFreq += 'FROM ( ';
        sqlStatementFreq += this.buildFrequencyRankingSQL();
        sqlStatementFreq += ') AS A ';
        sqlStatementFreq += 'GROUP BY ' + sqlHigherPrecedence + ' FREQUENCYSCORE';

        return sqlStatementFreq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSQLMonetaryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the SQL needed to create the monetary definition.
    /// </summary>
    /// <returns>
    /// The SQL needed to create the monetary definition.
    /// </returns>
    public str buildSQLMonetaryRanges()
    {
        str         sqlStatementRec = '';
        str         sqlHigherPrecedence = '';

        if (trfmDefinition.MonetaryPrecedence != MCRPriority::High &&
           (trfmDefinition.MonetaryPrecedence <  trfmDefinition.FrequencyPrecedence ||
            trfmDefinition.MonetaryPrecedence <  trfmDefinition.RecencyPrecedence) )
        {
            if (trfmDefinition.RecencyPrecedence == trfmDefinition.FrequencyPrecedence)
            {
                sqlHigherPrecedence = ' RECENCYSCORE, FREQUENCYSCORE, ';
            }
            else if (trfmDefinition.RecencyPrecedence > trfmDefinition.FrequencyPrecedence &&
                trfmDefinition.FrequencyPrecedence > trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' RECENCYSCORE, FREQUENCYSCORE, ';
            }
            else if (trfmDefinition.FrequencyPrecedence <= trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' RECENCYSCORE, ';
            }
            else if (trfmDefinition.RecencyPrecedence < trfmDefinition.FrequencyPrecedence &&
                trfmDefinition.RecencyPrecedence > trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' FREQUENCYSCORE, RECENCYSCORE, ';
            }
            else if (trfmDefinition.RecencyPrecedence <= trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' FREQUENCYSCORE, ';
            }
        }

        sqlStatementRec += 'SELECT ' +  sqlHigherPrecedence + ' MONETARYSCORE, MIN(AVGSALES) AS START, MAX(AVGSALES) AS [END]';
        sqlStatementRec += 'FROM ( ';
        sqlStatementRec += this.buildMonetaryRankingSQL();
        sqlStatementRec += ') AS A ';
        sqlStatementRec += 'GROUP BY ' + sqlHigherPrecedence + ' MONETARYSCORE';

        return sqlStatementRec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSQLRecencyRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the SQL needed to create the recency definition.
    /// </summary>
    /// <returns>
    /// The SQL needed to create the recency definition.
    /// </returns>
    public str buildSQLRecencyRanges()
    {
        str         sqlStatementRec = '';

        str         sqlHigherPrecedence = '';

        if (trfmDefinition.RecencyPrecedence != MCRPriority::High &&
           (trfmDefinition.RecencyPrecedence <  trfmDefinition.FrequencyPrecedence ||
            trfmDefinition.RecencyPrecedence <  trfmDefinition.MonetaryPrecedence) )
        {
            if (trfmDefinition.FrequencyPrecedence == trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' FREQUENCYSCORE, MONETARYSCORE, ';
            }
            else if (trfmDefinition.FrequencyPrecedence > trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.MonetaryPrecedence > trfmDefinition.RecencyPrecedence)
            {
                sqlHigherPrecedence = ' FREQUENCYSCORE, MONETARYSCORE, ';
            }
            else if (trfmDefinition.MonetaryPrecedence <= trfmDefinition.RecencyPrecedence)
            {
                sqlHigherPrecedence = ' FREQUENCYSCORE, ';
            }
            else if (trfmDefinition.FrequencyPrecedence < trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.FrequencyPrecedence > trfmDefinition.RecencyPrecedence)
            {
                sqlHigherPrecedence = ' MONETARYSCORE, FREQUENCYSCORE, ';
            }
            else if (trfmDefinition.FrequencyPrecedence <= trfmDefinition.RecencyPrecedence)
            {
                sqlHigherPrecedence = ' MONETARYSCORE, ';
            }
        }

        sqlStatementRec += 'SELECT ' +  sqlHigherPrecedence + ' RECENCYSCORE, MIN(PASTTIME) AS START, MAX(PASTTIME) AS [END]';
        sqlStatementRec += 'FROM ( ';
        sqlStatementRec += this.buildRecencyRankingSQL();
        sqlStatementRec += ') AS A ';
        sqlStatementRec += 'GROUP BY ' + sqlHigherPrecedence + ' RECENCYSCORE';

        return sqlStatementRec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEvenDistRFM</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates recency score and assigns based on the past RFM definition.
    /// </summary>
    /// <param name="_setRFMComposite">
    /// Indicates that the RFM composite should be set; optional.
    /// </param>
    public void calcEvenDistRFM(boolean _setRFMComposite = false)
    {
        MCRSalesStatsCustTable salesStatsCustTable;

        if (_setRFMComposite)
        {
                    update_recordset salesStatsCustTable
                    setting
                            RecencyScore = 0,
                            FrequencyScore = 0,
                            MonetaryScore = 0,
                            mcrrfmComposite = 0;
        }
        else
        {
            update_recordset salesStatsCustTable
                    setting
                            RecencyScore = 0,
                            FrequencyScore = 0,
                            MonetaryScore = 0;
        }

        if (trfmDefinition.RecencyPrecedence == MCRPriority::High)
        {
            // Calcualte Recency
            this.calculateRecencyEvenDist(_setRFMComposite);
        }

        if (trfmDefinition.FrequencyPrecedence == MCRPriority::High)
        {
            // Calcualte Frequency
            this.calculateFrequencyEvenDist(_setRFMComposite);
        }

        if (trfmDefinition.MonetaryPrecedence == MCRPriority::High)
        {
            // Calcualte Monetary
            this.calculateMonetaryEvenDist(_setRFMComposite);
        }

        if (trfmDefinition.RecencyPrecedence == MCRPriority::Medium)
        {
            // Calcualte Recency
            this.calculateRecencyEvenDist(_setRFMComposite);
        }

        if (trfmDefinition.FrequencyPrecedence == MCRPriority::Medium)
        {
            // Calcualte Frequency
            this.calculateFrequencyEvenDist(_setRFMComposite);
        }

        if (trfmDefinition.MonetaryPrecedence == MCRPriority::Medium)
        {
            // Calcualte Monetary
            this.calculateMonetaryEvenDist(_setRFMComposite);
        }

        if (trfmDefinition.RecencyPrecedence == MCRPriority::Low)
        {
            // Calcualte Recency
            this.calculateRecencyEvenDist(_setRFMComposite);
        }

        if (trfmDefinition.FrequencyPrecedence == MCRPriority::Low)
        {
            // Calcualte Frequency
            this.calculateFrequencyEvenDist(_setRFMComposite);
        }

        if (trfmDefinition.MonetaryPrecedence == MCRPriority::Low)
        {
            // Calcualte Monetary
            this.calculateMonetaryEvenDist(_setRFMComposite);
        }

        this.createRMFSummaries();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFairDistRFM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the fair customer FRM score and refreshes the RFM summary records
    /// </summary>
    public void calcFairDistRFM()
    {
        this.setFairCustomerRFMScore();

        this.refreshFairRFMSummary();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFrequencyEvenDist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates frequency score and assigns based on the past RFM definition.
    /// </summary>
    /// <param name="_setRFMComposite">
    /// Indicates that the RFM composite should be set; optional.
    /// </param>
    private void calculateFrequencyEvenDist(boolean _setRFMComposite = false)
    {
        ResultSet resultSet;
        Statement statement;
        Connection connection;
        str sqlStatement = '';
        str sqlStatementPartitionBy = '';
        str sqlStatementRFMComposite = '';

        connection = new Connection();
        statement = connection.createStatement();

        if (trfmDefinition.FrequencyPrecedence != MCRPriority::High &&
           (trfmDefinition.FrequencyPrecedence <  trfmDefinition.RecencyPrecedence ||
            trfmDefinition.FrequencyPrecedence <  trfmDefinition.MonetaryPrecedence) )
        {
            if (trfmDefinition.RecencyPrecedence == trfmDefinition.MonetaryPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY RECENCYSCORE, MONETARYSCORE';
            }
            else if (trfmDefinition.RecencyPrecedence > trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.MonetaryPrecedence > trfmDefinition.FrequencyPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY RECENCYSCORE, MONETARYSCORE';
            }
            else if (trfmDefinition.MonetaryPrecedence <= trfmDefinition.FrequencyPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY RECENCYSCORE';
            }
            else if (trfmDefinition.RecencyPrecedence < trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.RecencyPrecedence > trfmDefinition.FrequencyPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY MONETARYSCORE, RECENCYSCORE ';
            }
            else if (trfmDefinition.RecencyPrecedence <= trfmDefinition.FrequencyPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY MONETARYSCORE';
            }
        }

        if (_setRFMComposite)
        {
            if (trfmDefinition.AddScores == NoYes::Yes)
            {
                sqlStatementRFMComposite = '  MCRRFMCOMPOSITE = A.RECENCYSCORE + B.FREQRANKING +  A.MONETARYSCORE, ' ;
            }
            else
            {
                sqlStatementRFMComposite = '  MCRRFMCOMPOSITE = CAST(CAST(CAST(A.RECENCYSCORE AS INT) AS NVARCHAR) +  CAST(CAST(B.FREQRANKING ' +
                                            ' AS INT) AS NVARCHAR) +  CAST(CAST(A.MONETARYSCORE AS INT) AS NVARCHAR) AS FLOAT), ' ;
            }
        }

        sqlStatement += 'UPDATE MCRSALESSTATSCUSTTABLE  ';
        sqlStatement += 'SET FREQUENCYSCORE = B.FREQRANKING, ';
        sqlStatement += sqlStatementRFMComposite;
        sqlStatement += '    RECVERSION = RECVERSION + 97 ';
        sqlStatement += 'FROM MCRSALESSTATSCUSTTABLE A ';
        sqlStatement += 'JOIN (SELECT CUSTACCOUNT, DATAAREAID         ';
        sqlStatement += '    , NTILE(' + int2str(trfmDefinition.FrequencyDivisions) + ') ';
        sqlStatement +=  'OVER(' + sqlStatementPartitionBy + ' ORDER BY ORDERFREQUENCY ASC) * ' + strFrequencyMultiplier + ' AS FREQRANKING ';
        sqlStatement += '        FROM MCRSALESSTATSCUSTTABLE ';
        sqlStatement += '        WHERE DATAAREAID = \'' + getCompany(tableNum(MCRSalesStatsCustTable), curext()) + '\' ';
        sqlStatement += '        AND ORDERFREQUENCY > 0 ';
        sqlStatement += '    ) B ';
        sqlStatement += '    ON A.CUSTACCOUNT = B.CUSTACCOUNT ';
        sqlStatement += '    AND A.DATAAREAID = B.DATAAREAID ';

        new SqlStatementExecutePermission(sqlStatement).assert();

        statement.executeUpdate(sqlStatement);
        resultSet = statement.executeQuery(sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMonetaryEvenDist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates monetary score and assigns based on the past RFM definition.
    /// </summary>
    /// <param name="_setRFMComposite">
    /// Indicates that the RFM composite should be set; optional.
    /// </param>
    public void calculateMonetaryEvenDist(boolean _setRFMComposite = false)
    {
        ResultSet resultSet;
        Statement statement;
        Connection connection;
        str sqlStatement = '';
        str sqlMonetaryCalcStatement = '';
        str sqlStatementPartitionBy = '';
        str sqlStatementRFMComposite = '';

        connection = new Connection();
        statement = connection.createStatement();

        if (trfmDefinition.MonetaryPrecedence != MCRPriority::High &&
           (trfmDefinition.MonetaryPrecedence <  trfmDefinition.FrequencyPrecedence ||
            trfmDefinition.MonetaryPrecedence <  trfmDefinition.RecencyPrecedence) )
        {
            if (trfmDefinition.RecencyPrecedence == trfmDefinition.FrequencyPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY RECENCYSCORE, FREQUENCYSCORE';
            }
            else if (trfmDefinition.RecencyPrecedence > trfmDefinition.FrequencyPrecedence &&
                trfmDefinition.FrequencyPrecedence > trfmDefinition.MonetaryPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY RECENCYSCORE, FREQUENCYSCORE';
            }
            else if (trfmDefinition.FrequencyPrecedence <= trfmDefinition.MonetaryPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY RECENCYSCORE';
            }
            else if (trfmDefinition.RecencyPrecedence < trfmDefinition.FrequencyPrecedence &&
                trfmDefinition.RecencyPrecedence > trfmDefinition.MonetaryPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY FREQUENCYSCORE, RECENCYSCORE ';
            }
            else if (trfmDefinition.RecencyPrecedence <= trfmDefinition.MonetaryPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY FREQUENCYSCORE';
            }
        }

        if (_setRFMComposite)
        {
            if (trfmDefinition.AddScores == NoYes::Yes)
            {
                sqlStatementRFMComposite = ' MCRRFMCOMPOSITE = A.RECENCYSCORE + A.FREQUENCYSCORE +  B.MONETARYRANKING, ' ;
            }
            else
            {
                sqlStatementRFMComposite = ' MCRRFMCOMPOSITE = CAST(CAST(CAST(A.RECENCYSCORE AS INT) AS NVARCHAR) + ' +
                                            'CAST(CAST(A.FREQUENCYSCORE AS INT) AS NVARCHAR) +  CAST(CAST(B.MONETARYRANKING AS INT) AS NVARCHAR) AS FLOAT), ' ;
            }
        }

        if (trfmDefinition.rfmGrossOrNet == MCRRFMGrossOrNet::Net &&
            trfmDefinition.rfmSubtractReturns == NoYes::No    )
        {
            sqlMonetaryCalcStatement = ' (TOTALINVOICEAMOUNTMST - TOTALINVOICECOSTAMOUNTMST)/CAST(ORDERFREQUENCY AS NUMERIC(36, 12)) ';
        }
        else if (trfmDefinition.rfmGrossOrNet == MCRRFMGrossOrNet::Net &&
                trfmDefinition.rfmSubtractReturns == NoYes::Yes    )
        {
            sqlMonetaryCalcStatement = ' (TOTALINVOICEAMOUNTMST - TOTALINVOICECOSTAMOUNTMST + TOTALRETURNINVOICEDAMOUNTMST)/CAST(ORDERFREQUENCY AS NUMERIC(36, 12)) ';
        }
        else if (trfmDefinition.rfmGrossOrNet == MCRRFMGrossOrNet::Gross &&
                trfmDefinition.rfmSubtractReturns == NoYes::Yes    )
        {
            sqlMonetaryCalcStatement = ' (TOTALINVOICEAMOUNTMST + TOTALRETURNINVOICEDAMOUNTMST)/CAST(ORDERFREQUENCY AS NUMERIC(36, 12)) ';
        }
        else
        {
            sqlMonetaryCalcStatement = ' AVGINVOICEAMOUNTMST ';
        }

        sqlStatement += 'UPDATE MCRSALESSTATSCUSTTABLE  ';
        sqlStatement += 'SET MONETARYSCORE = B.MONETARYRANKING, ';
        sqlStatement += sqlStatementRFMComposite;
        sqlStatement += '    RECVERSION = RECVERSION + 97 ';
        sqlStatement += 'FROM MCRSALESSTATSCUSTTABLE A ';
        sqlStatement += 'JOIN (SELECT CUSTACCOUNT, DATAAREAID         ';
        sqlStatement += '    , NTILE(' + int2str(trfmDefinition.MonetaryDivisions) + ') ';
        sqlStatement +=  'OVER(' + sqlStatementPartitionBy + ' ORDER BY ' + sqlMonetaryCalcStatement + ' ASC) * ' + strMonetaryMultiplier + ' AS MONETARYRANKING ' ;
        sqlStatement += '        FROM MCRSALESSTATSCUSTTABLE ';
        sqlStatement += '        WHERE DATAAREAID = \'' + getCompany(tableNum(MCRSalesStatsCustTable), curext()) + '\' ';
        sqlStatement += '        AND ORDERFREQUENCY > 0         ';
        sqlStatement += '    ) B ';
        sqlStatement += '    ON A.CUSTACCOUNT = B.CUSTACCOUNT ';
        sqlStatement += '    AND A.DATAAREAID = B.DATAAREAID     ';

        new SqlStatementExecutePermission(sqlStatement).assert();

        statement.executeUpdate(sqlStatement);
        resultSet = statement.executeQuery(sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRecencyEvenDist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates recency score and assigns based on the past RFM definition.
    /// </summary>
    /// <param name="_setRFMComposite">
    /// Indicates that the RFM composite should be set; optional.
    /// </param>
    private void calculateRecencyEvenDist(boolean _setRFMComposite = false)
    {
        ResultSet resultSet;
        Statement statement;
        Connection connection;
        str sqlStatement = '';
        str sqlStatementScore = '';
        str sqlStatementPartitionBy = '';

        str sqlStatementRFMComposite = '';

        connection = new Connection();
        statement = connection.createStatement();

        if (trfmDefinition.RecencyPrecedence != MCRPriority::High &&
           (trfmDefinition.RecencyPrecedence <  trfmDefinition.FrequencyPrecedence ||
            trfmDefinition.RecencyPrecedence <  trfmDefinition.MonetaryPrecedence) )
        {
            if (trfmDefinition.FrequencyPrecedence == trfmDefinition.MonetaryPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY FREQUENCYSCORE, MONETARYSCORE';
            }
            else if (trfmDefinition.FrequencyPrecedence > trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.MonetaryPrecedence > trfmDefinition.RecencyPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY FREQUENCYSCORE, MONETARYSCORE';
            }
            else if (trfmDefinition.MonetaryPrecedence <= trfmDefinition.RecencyPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY FREQUENCYSCORE';
            }
            else if (trfmDefinition.FrequencyPrecedence < trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.FrequencyPrecedence > trfmDefinition.RecencyPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY MONETARYSCORE, FREQUENCYSCORE ';
            }
            else if (trfmDefinition.FrequencyPrecedence <= trfmDefinition.RecencyPrecedence)
            {
                sqlStatementPartitionBy = ' PARTITION BY MONETARYSCORE';
            }
        }

        if (_setRFMComposite)
        {
            if (trfmDefinition.AddScores == NoYes::Yes)
            {
                sqlStatementRFMComposite = ' MCRRFMCOMPOSITE = B.RECRANKING + A.FREQUENCYSCORE +  A.MONETARYSCORE, ' ;
            }
            else
            {
                sqlStatementRFMComposite = ' MCRRFMCOMPOSITE = CAST(CAST(CAST(B.RECRANKING AS INT) AS NVARCHAR) + ' +
                                                'CAST(CAST(A.FREQUENCYSCORE AS INT) AS NVARCHAR) +  CAST(CAST(A.MONETARYSCORE AS INT) AS NVARCHAR) AS FLOAT), ' ;
            }
        }

        sqlStatement += 'UPDATE MCRSALESSTATSCUSTTABLE  ';
        sqlStatement += 'SET RECENCYSCORE = B.RECRANKING, ';
        sqlStatement += sqlStatementRFMComposite;
        sqlStatement += 'RECVERSION = RECVERSION + 97 ';
        sqlStatement += 'FROM MCRSALESSTATSCUSTTABLE A ';
        sqlStatement += 'JOIN (SELECT CUSTACCOUNT, DATAAREAID         ';
        sqlStatement += '    , NTILE(' + int2str(trfmDefinition.RecencyDivisions) + ') ';
        sqlStatement += ' OVER(' + sqlStatementPartitionBy + ' ORDER BY DATEDIFF(' + datePart + ', STATLASTORDERDATE, \''+ strEndDate +'\' ) DESC) * ' + strRecencyMultiplier + ' AS RECRANKING ';
        sqlStatement += '    FROM MCRSALESSTATSCUSTTABLE  ';
        sqlStatement += '    WHERE DATAAREAID = \'' + getCompany(tableNum(MCRSalesStatsCustTable), curext()) + '\'';
        sqlStatement += '    AND ORDERFREQUENCY > 0 ';
        sqlStatement += '    ) B ';
        sqlStatement += '    ON A.CUSTACCOUNT = B.CUSTACCOUNT ';
        sqlStatement += '    AND A.DATAAREAID = B.DATAAREAID ';

        new SqlStatementExecutePermission(sqlStatement).assert();

        statement.executeUpdate(sqlStatement);
        resultSet = statement.executeQuery(sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRFM</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and assigns RFM scores to customers with
    ///     more than 1 order in the system based on the past
    ///     RFM definition.
    /// </summary>
    public void calculateRFM()
    {
        Args        custStatsArgs;
        MCRSalesStatsCustTable salesStatsCustTable;

        MCRSalesStatsCustTable salesStatsCustTableA;
        MCRSalesStatsCustTable salesStatsCustTableB;
        MCRRecencyDefinition   recencyDefinitionMinCreated;

        // get date range of last statistics and the last run date
        select minof(StartDate), maxof(EndDate), maxof(CreatedDateTime) from salesStatsCustTableA
            where salesStatsCustTableA.OrderFrequency > 0;

        select minof(EndDate) from salesStatsCustTableB
            where salesStatsCustTableB.OrderFrequency > 0;

        select minof(CreatedDateTime) from recencyDefinitionMinCreated;

        if (salesStatsCustTableA.StartDate != trfmDefinition.StartDate ||
            salesStatsCustTableA.EndDate != trfmDefinition.EndDate ||
            salesStatsCustTableB.EndDate == dateNull() ||
            DateTimeUtil::newDateTime(salesStatsCustTableA.EndDate, str2time('T23:59:999')) > recencyDefinitionMinCreated.CreatedDateTime)
        {
            if (Box::yesNo("@MCR33911", DialogButton::No) == DialogButton::Yes)
            {
                // Run stats for timeframe
                custStatsArgs = new Args();
                custStatsArgs.record(trfmDefinition);
                MCRSalesStatsCust::main(custStatsArgs);
            }
            else
            {
                return;
            }
        }

        // Clear existing RFM values
        update_recordset salesStatsCustTable
            setting
                    RecencyScore = 0,
                    FrequencyScore = 0,
                    MonetaryScore = 0;

        if (trfmDefinition.EvenDistribution == NoYes::Yes)
        {
            this.calcEvenDistRFM();
        }
        else
        {
            this.calcFairDistRFM();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the RFM history records.
    /// </summary>
    public void clearHistory()
    {
        MCRCustRFMScore custRFMScore;
        if (Box::yesNo("@MCR35683", DialogButton::No) == DialogButton::Yes)
        {
            delete_from custRFMScore where custRFMScore.rfmDefinitionName == trfmDefinition.rfmDefinitionName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFairFreqRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the current frequency summaries to not descriminate based on database order.
    /// </summary>
    /// <remarks>
    /// Code calls calculate RFM which always evenly distributes the customers among each
    ///     divisions (i.e, could have a 2 customrs, 1 w/ a recency score of 5 and the other
    ///     w/ a 4 even though each has a last order date of 23 days ago just so there are
    ///     the same number of 4's as 5's).  This code is inteded to adjust the ranges after
    ///     the summaries have been generated to produce equality amongst customers scores.
    /// </remarks>
    public void createFairFreqRanges()
    {
        ResultSet   resultSet;
        Statement   statement;
        Connection  connection;
        str         sqlStatementFreq = '';

        str         sqlHigherPrecedence = '';
        str         sqlJoinOn = ' ON F1.FREQUENCYSCORE  = F2.FREQUENCYSCORE - ' + strFrequencyMultiplier;
        str         precedence1, precedence2;
        int         fieldIncrementer = 0;

        MCRFrequencyDefinition     frequencyDefinition;

        // clear summary definitions
        delete_from frequencyDefinition where frequencyDefinition.rfmDefinitionName == trfmDefinition.rfmDefinitionName;

        // build recency
        connection = new Connection();
        statement = connection.createStatement();

        if (trfmDefinition.FrequencyPrecedence != MCRPriority::High &&
           (trfmDefinition.FrequencyPrecedence <  trfmDefinition.RecencyPrecedence ||
            trfmDefinition.FrequencyPrecedence <  trfmDefinition.MonetaryPrecedence) )
        {
            if (trfmDefinition.RecencyPrecedence == trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' F1.RECENCYSCORE, F1.MONETARYSCORE, ';
                precedence1 = #R;
                precedence2 = #M;
                fieldIncrementer = 2;
                sqlJoinOn += ' AND F1.RECENCYSCORE = F2.RECENCYSCORE ';
                sqlJoinOn += ' AND F1.MONETARYSCORE = F2.MONETARYSCORE ';
            }
            else if (trfmDefinition.RecencyPrecedence > trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.MonetaryPrecedence > trfmDefinition.FrequencyPrecedence)
            {
                sqlHigherPrecedence = ' F1.RECENCYSCORE, F1.MONETARYSCORE, ';
                precedence1 = #R;
                precedence2 = #M;
                fieldIncrementer = 2;
                sqlJoinOn += ' AND F1.RECENCYSCORE = F2.RECENCYSCORE ';
                sqlJoinOn += ' AND F1.MONETARYSCORE = F2.MONETARYSCORE ';
            }
            else if (trfmDefinition.MonetaryPrecedence <= trfmDefinition.FrequencyPrecedence)
            {
                sqlHigherPrecedence = ' F1.RECENCYSCORE, ';
                precedence1 = #R;
                precedence2 = '';
                fieldIncrementer = 1;
                sqlJoinOn += ' AND F1.RECENCYSCORE = F2.RECENCYSCORE ';
            }
            else if (trfmDefinition.RecencyPrecedence < trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.RecencyPrecedence > trfmDefinition.FrequencyPrecedence)
            {
                sqlHigherPrecedence = ' F1.MONETARYSCORE, F1.RECENCYSCORE, ';
                precedence1 = #M;
                precedence2 = #R;
                fieldIncrementer = 2;
                sqlJoinOn += ' AND F1.MONETARYSCORE = F2.MONETARYSCORE ';
                sqlJoinOn += ' AND F1.RECENCYSCORE = F2.RECENCYSCORE ';
            }
            else if (trfmDefinition.RecencyPrecedence <= trfmDefinition.FrequencyPrecedence)
            {
                sqlHigherPrecedence = ' F1.MONETARYSCORE, ';
                precedence1 = #M;
                precedence2 = '';
                fieldIncrementer = 1;
                sqlJoinOn += ' AND F1.MONETARYSCORE = F2.MONETARYSCORE ';
            }
        }

        sqlStatementFreq += 'SELECT ' +  sqlHigherPrecedence + ' F1.FREQUENCYSCORE ';
        sqlStatementFreq += ', CASE WHEN F1.FREQUENCYSCORE = ' + strFrequencyMultiplier + ' THEN  1 ELSE F1.[START] END AS START ';
        sqlStatementFreq += ', CASE WHEN F1.FREQUENCYSCORE = '  + int2Str(trfmDefinition.FrequencyDivisions) + ' * ' + strFrequencyMultiplier;
        sqlStatementFreq += ' THEN 999999999 WHEN F2.[START] - 1 > = F1.START THEN F2.[START] - 1 ELSE ISNULL(F1.[START], 999999999) END AS [END] ';
        sqlStatementFreq += ', F1.[START], F1.[END] ';
        sqlStatementFreq += ' FROM (' ;
        sqlStatementFreq += this.buildSQLFrequencyRanges();
        sqlStatementFreq += ') AS F1 ';
        sqlStatementFreq += 'LEFT JOIN(';
        sqlStatementFreq += this.buildSQLFrequencyRanges();
        sqlStatementFreq += ') AS F2 ';
        sqlStatementFreq += sqlJoinOn;

        new SqlStatementExecutePermission(sqlStatementFreq).assert();

        resultSet = statement.executeQuery(sqlStatementFreq);

        while (resultSet.next())
        {
            frequencyDefinition.rfmDefinitionName = trfmDefinition.rfmDefinitionName;

            if (precedence1 == #R)
            {
                frequencyDefinition.RecencyScore = resultSet.getReal(1);

                if (precedence2 == #M)
                {
                    frequencyDefinition.MonetaryScore = resultSet.getReal(2);
                }
            }
            else if (precedence1 == #M)
            {
                frequencyDefinition.MonetaryScore = resultSet.getReal(1);

                if (precedence2 == #R)
                {
                    frequencyDefinition.RecencyScore = resultSet.getReal(2);
                }
            }

            frequencyDefinition.Score  = resultSet.getReal(1 + fieldIncrementer);
            frequencyDefinition.FrequencyStart  = resultSet.getInt(2 + fieldIncrementer);
            frequencyDefinition.FrequencyEnd = resultSet.getInt(3 + fieldIncrementer);
            frequencyDefinition.ActualStart = resultSet.getInt(4 + fieldIncrementer);
            frequencyDefinition.ActualEnd = resultSet.getInt(5 + fieldIncrementer);

            if (frequencyDefinition.validateWrite())
            {
                frequencyDefinition.insert();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFairMonRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the current monetary summaries to not descriminate based on database order.
    /// </summary>
    /// <remarks>
    /// Code calls calculate RFM which always evenly distributes the customers among each
    ///     divisions (i.e, could have a 2 customrs, 1 w/ a recency score of 5 and the other
    ///     w/ a 4 even though each has a last order date of 23 days ago just so there are
    ///     the same number of 4's as 5's).  This code is inteded to adjust the ranges after
    ///     the summaries have been generated to produce equality amongst customers scores.
    /// </remarks>
    public void createFairMonRanges()
    {
        ResultSet   resultSet;
        Statement   statement;
        Connection  connection;
        str         sqlStatementMon = '';

        str         sqlHigherPrecedence = '';
        str         sqlJoinOn = ' ON M1.MONETARYSCORE  = M2.MONETARYSCORE - ' + strMonetaryMultiplier;
        str         precedence1, precedence2;
        int         fieldIncrementer = 0;

        MCRMonetaryDefinition     monetaryDefinition;

        // build monetary
        connection = new Connection();
        statement = connection.createStatement();

        // clear summary definitions
        delete_from monetaryDefinition where monetaryDefinition.rfmDefinitionName == trfmDefinition.rfmDefinitionName;

        if (trfmDefinition.MonetaryPrecedence != MCRPriority::High &&
           (trfmDefinition.MonetaryPrecedence <  trfmDefinition.FrequencyPrecedence ||
            trfmDefinition.MonetaryPrecedence <  trfmDefinition.RecencyPrecedence) )
        {
            if (trfmDefinition.RecencyPrecedence == trfmDefinition.FrequencyPrecedence)
            {
                sqlHigherPrecedence = ' M1.RECENCYSCORE, M1.FREQUENCYSCORE, ';
                precedence1 = #R;
                precedence2 = #F;
                fieldIncrementer = 2;
                sqlJoinOn += ' AND M1.RECENCYSCORE = M2.RECENCYSCORE ';
                sqlJoinOn += ' AND M1.FREQUENCYSCORE = M2.FREQUENCYSCORE ';
            }
            else if (trfmDefinition.RecencyPrecedence > trfmDefinition.FrequencyPrecedence &&
                trfmDefinition.FrequencyPrecedence > trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' M1.RECENCYSCORE, M1.FREQUENCYSCORE, ';
                precedence1 = #R;
                precedence2 = #F;
                fieldIncrementer = 2;
                sqlJoinOn += ' AND M1.RECENCYSCORE = M2.RECENCYSCORE ';
                sqlJoinOn += ' AND M1.FREQUENCYSCORE = M2.FREQUENCYSCORE ';
            }
            else if (trfmDefinition.FrequencyPrecedence <= trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' M1.RECENCYSCORE, ';
                precedence1 = #R;
                fieldIncrementer = 1;
                sqlJoinOn += ' AND M1.RECENCYSCORE = M2.RECENCYSCORE ';
            }
            else if (trfmDefinition.RecencyPrecedence < trfmDefinition.FrequencyPrecedence &&
                trfmDefinition.RecencyPrecedence > trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' M1.FREQUENCYSCORE, M1.RECENCYSCORE, ';
                precedence1 = #F;
                precedence2 = #R;
                fieldIncrementer = 2;
                sqlJoinOn += ' AND M1.RECENCYSCORE = M2.RECENCYSCORE ';
                sqlJoinOn += ' AND M1.FREQUENCYSCORE = M2.FREQUENCYSCORE ';
            }
            else if (trfmDefinition.RecencyPrecedence <= trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' M1.FREQUENCYSCORE, ';
                precedence2 = #F;
                fieldIncrementer = 1;
                sqlJoinOn += ' AND M1.FREQUENCYSCORE = M2.FREQUENCYSCORE ';
            }
        }

        sqlStatementMon += 'SELECT ' +  sqlHigherPrecedence + ' M1.MONETARYSCORE ';
        sqlStatementMon += ', CASE WHEN M1.MONETARYSCORE = ' + strMonetaryMultiplier + ' THEN  -999999999 ELSE M1.[START] END AS START ';
        sqlStatementMon += ', CASE WHEN M1.MONETARYSCORE = '  + int2Str(trfmDefinition.MonetaryDivisions) + ' * ' + strMonetaryMultiplier +  ' THEN 999999999 ELSE ISNULL(M2.[START]  - .01, 999999999) END AS [END] ';
        sqlStatementMon += ', M1.[START], M1.[END] ';
        sqlStatementMon += ' FROM (' ;
        sqlStatementMon += this.buildSQLMonetaryRanges();
        sqlStatementMon += ') AS M1 ';
        sqlStatementMon += 'LEFT JOIN(';
        sqlStatementMon += this.buildSQLMonetaryRanges();
        sqlStatementMon += ') AS M2 ';
        sqlStatementMon += sqlJoinOn;

        new SqlStatementExecutePermission(sqlStatementMon).assert();

        resultSet = statement.executeQuery(sqlStatementMon);

        while (resultSet.next())
        {
            monetaryDefinition.rfmDefinitionName = trfmDefinition.rfmDefinitionName;

            if (precedence1 == #R)
            {
                monetaryDefinition.RecencyScore = resultSet.getReal(1);

                if (precedence2 == #F)
                {
                    monetaryDefinition.FrequencyScore = resultSet.getReal(2);
                }
            }
            else if (precedence1 == #F)
            {
                monetaryDefinition.FrequencyScore = resultSet.getReal(1);

                if (precedence2 == #R)
                {
                    monetaryDefinition.RecencyScore = resultSet.getReal(2);
                }
            }

            monetaryDefinition.Score  = resultSet.getReal(1 + fieldIncrementer);
            monetaryDefinition.MonetaryStartDollars  = resultSet.getReal(2 + fieldIncrementer);
            monetaryDefinition.MonetaryEndDollars = resultSet.getReal(3 + fieldIncrementer);
            monetaryDefinition.ActualStart = resultSet.getReal(4 + fieldIncrementer);
            monetaryDefinition.ActualEnd = resultSet.getReal(5 + fieldIncrementer);

            if (monetaryDefinition.validateWrite())
            {
                monetaryDefinition.insert();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFairRecRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the current recency summaries to not descriminate based on database order.
    /// </summary>
    /// <remarks>
    /// Code calls calculate RFM which always evenly distributes the customers among each
    ///     divisions (i.e, could have a 2 customrs, 1 w/ a recency score of 5 and the other
    ///     w/ a 4 even though each has a last order date of 23 days ago just so there are
    ///     the same number of 4's as 5's).  This code is inteded to adjust the ranges after
    ///     the summaries have been generated to produce equality amongst customers scores.
    /// </remarks>
    public void createFairRecRanges()
    {
        ResultSet   resultSet;
        Statement   statement;
        Connection  connection;
        str         sqlStatementRec = '';

        str         sqlHigherPrecedence = '';
        str         sqlJoinOn = ' ON R1.RECENCYSCORE  = R2.RECENCYSCORE - ' + strRecencyMultiplier;
        str         precedence1, precedence2;
        int         fieldIncrementer = 0;

        MCRRecencyDefinition     recencyDefinition;
    //    str         sqlStatementPartitionBy = '';

        // clear summary definitions
        delete_from recencyDefinition where recencyDefinition.rfmDefinitionName == trfmDefinition.rfmDefinitionName;

        // build recency
        connection = new Connection();
        statement = connection.createStatement();

        if (trfmDefinition.RecencyPrecedence != MCRPriority::High &&
           (trfmDefinition.RecencyPrecedence <  trfmDefinition.FrequencyPrecedence ||
            trfmDefinition.RecencyPrecedence <  trfmDefinition.MonetaryPrecedence) )
        {
            if (trfmDefinition.FrequencyPrecedence == trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' R1.FREQUENCYSCORE, R1.MONETARYSCORE, ';
                precedence1 = #F;
                precedence2 = #M;
                fieldIncrementer = 2;
                sqlJoinOn += ' AND R1.FREQUENCYSCORE = R2.FREQUENCYSCORE ';
                sqlJoinOn += ' AND R1.MONETARYSCORE = R2.MONETARYSCORE ';
            }
            else if (trfmDefinition.FrequencyPrecedence > trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.MonetaryPrecedence > trfmDefinition.RecencyPrecedence)
            {
                sqlHigherPrecedence = ' R1.FREQUENCYSCORE, R1.MONETARYSCORE, ';
                precedence1 = #F;
                precedence2 = #M;
                fieldIncrementer = 2;
                sqlJoinOn += ' AND R1.FREQUENCYSCORE = R2.FREQUENCYSCORE ';
                sqlJoinOn += ' AND R1.MONETARYSCORE = R2.MONETARYSCORE ';
            }
            else if (trfmDefinition.MonetaryPrecedence <= trfmDefinition.RecencyPrecedence)
            {
                sqlHigherPrecedence = ' R1.FREQUENCYSCORE, ';
                precedence1 = #F;
                precedence2 = '';
                fieldIncrementer = 1;
                sqlJoinOn += ' AND R1.FREQUENCYSCORE = R2.FREQUENCYSCORE ';
            }
            else if (trfmDefinition.FrequencyPrecedence < trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.FrequencyPrecedence > trfmDefinition.RecencyPrecedence)
            {
                sqlHigherPrecedence = ' R1.MONETARYSCORE, R1.FREQUENCYSCORE, ';
                precedence1 = #M;
                precedence2 = #F;
                fieldIncrementer = 2;
                sqlJoinOn += ' AND R1.FREQUENCYSCORE = R2.FREQUENCYSCORE ';
                sqlJoinOn += ' AND R1.MONETARYSCORE = R2.MONETARYSCORE ';
            }
            else if (trfmDefinition.FrequencyPrecedence <= trfmDefinition.RecencyPrecedence)
            {
                sqlHigherPrecedence = ' R1.MONETARYSCORE, ';

                precedence1 = #M;
                precedence2 = '';
                fieldIncrementer = 1;
                sqlJoinOn += ' AND R1.MONETARYSCORE = R2.MONETARYSCORE ';
            }
        }

        sqlStatementRec += 'SELECT ' +  sqlHigherPrecedence + ' R1.RECENCYSCORE ';
        sqlStatementRec += ', CASE WHEN R1.RECENCYSCORE = ' + int2Str(trfmDefinition.RecencyDivisions) + ' * ' + strRecencyMultiplier + ' THEN  0 ELSE R2.[END] + 1 END AS START ';
        sqlStatementRec += ', CASE WHEN R1.RECENCYSCORE = ' + strRecencyMultiplier + ' THEN 999999999 ELSE R1.[END] END AS [END] ';
        sqlStatementRec += ', R1.[START], R1.[END] ';
        sqlStatementRec += ' FROM (' ;
        sqlStatementRec += this.buildSQLRecencyRanges();
        sqlStatementRec += ') AS R1 ';
        sqlStatementRec += 'LEFT JOIN(';
        sqlStatementRec += this.buildSQLRecencyRanges();
        sqlStatementRec += ') AS R2 ';
        sqlStatementRec += sqlJoinOn;

        new SqlStatementExecutePermission(sqlStatementRec).assert();

        resultSet = statement.executeQuery(sqlStatementRec);

        while (resultSet.next())
        {
            recencyDefinition.rfmDefinitionName = trfmDefinition.rfmDefinitionName;

            if (precedence1 == #F)
            {
                recencyDefinition.FrequencyScore = resultSet.getReal(1);

                if (precedence2 == #M)
                {
                    recencyDefinition.MonetaryScore = resultSet.getReal(2);
                }
            }
            else if (precedence1 == #M)
            {
                recencyDefinition.MonetaryScore = resultSet.getReal(1);

                if (precedence2 == #F)
                {
                    recencyDefinition.FrequencyScore = resultSet.getReal(2);
                }
            }

            recencyDefinition.Score  = resultSet.getReal(1 + fieldIncrementer);
            recencyDefinition.RecencyStart  = resultSet.getInt(2 + fieldIncrementer);
            recencyDefinition.RecencyEnd = resultSet.getInt(3 + fieldIncrementer);
            recencyDefinition.ActualStart = resultSet.getInt(4 + fieldIncrementer);
            recencyDefinition.ActualEnd = resultSet.getInt(5 + fieldIncrementer);

            if (recencyDefinition.validateWrite())
            {
                recencyDefinition.insert();
            }
            else
            {
                throw error("@SYS104318");
            }
            }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFrequencySummary</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the frequency summary for the current frequency scores given to the customer.
    /// </summary>
    public void createFrequencySummary()
    {
        MCRFrequencyDefinition   frequencyDefinition;

        MCRSalesStatsCustTable   salesStatsCustTableTotals;

        ResultSet   resultSet;
        Statement   statement;
        Connection  connection;
        str         sqlStatement = '';
        str         sqlHigherPrecedence = '';
        str         sqlOrderBy = ' ORDER BY  FREQUENCYSCORE DESC ';
        str         precedence1, precedence2;
        int         fieldIncrementer = 0;
        int         prevStart;

        // clear summary definitions
        delete_from frequencyDefinition where frequencyDefinition.rfmDefinitionName == trfmDefinition.rfmDefinitionName;

        connection = new Connection();
        statement = connection.createStatement();

        // get overall total to calculate percentages
        select sum(TotalInvoiceAmountMST), sum(OrderFrequency) from salesStatsCustTableTotals;

        if (trfmDefinition.FrequencyPrecedence != MCRPriority::High &&
           (trfmDefinition.FrequencyPrecedence <  trfmDefinition.RecencyPrecedence ||
            trfmDefinition.FrequencyPrecedence <  trfmDefinition.MonetaryPrecedence) )
        {
            if (trfmDefinition.RecencyPrecedence == trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' RECENCYSCORE, MONETARYSCORE, ';
                sqlOrderBy  = ' ORDER BY RECENCYSCORE DESC, MONETARYSCORE DESC, FREQUENCYSCORE DESC ';
                precedence1 = #R;
                precedence2 = #M;
                fieldIncrementer = 2;
            }
            else if (trfmDefinition.RecencyPrecedence > trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.MonetaryPrecedence > trfmDefinition.FrequencyPrecedence)
            {
                sqlHigherPrecedence = ' RECENCYSCORE, MONETARYSCORE, ';
                sqlOrderBy  = ' ORDER BY RECENCYSCORE DESC, MONETARYSCORE DESC, FREQUENCYSCORE DESC ';
                precedence1 = #R;
                precedence2 = #M;
                fieldIncrementer = 2;
            }
            else if (trfmDefinition.MonetaryPrecedence <= trfmDefinition.FrequencyPrecedence)
            {
                sqlHigherPrecedence = ' RECENCYSCORE, ';
                sqlOrderBy  = ' ORDER BY RECENCYSCORE DESC, FREQUENCYSCORE DESC ';
                precedence1 = #R;
                precedence2 = '';
                fieldIncrementer = 1;
            }
            else if (trfmDefinition.RecencyPrecedence < trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.RecencyPrecedence > trfmDefinition.FrequencyPrecedence)
            {
                sqlHigherPrecedence = ' MONETARYSCORE, RECENCYSCORE, ';
                sqlOrderBy  = ' ORDER BY MONETARYSCORE DESC, RECENCYSCORE DESC, FREQUENCYSCORE DESC ';
                precedence1 = #M;
                precedence2 = #R;
                fieldIncrementer = 2;
            }
            else if (trfmDefinition.RecencyPrecedence <= trfmDefinition.FrequencyPrecedence)
            {
                sqlHigherPrecedence = ' MONETARYSCORE, ';
                sqlOrderBy  = ' ORDER BY MONETARYSCORE DESC, FREQUENCYSCORE DESC ';
                precedence1 = #M;
                precedence2 = '';
                fieldIncrementer = 1;
            }
        }

        // Build SQL statement to retrieve new score summary data
        sqlStatement += 'SELECT  ';
        sqlStatement += sqlHigherPrecedence;
        sqlStatement += '    FREQUENCYSCORE, ';
        sqlStatement += '     MIN(ORDERFREQUENCY) AS STARTRANGE, ';
        sqlStatement += '     MAX(ORDERFREQUENCY) AS ENDRANGE, ';
        sqlStatement += '     SUM(TOTALINVOICEAMOUNTMST) AS TOTALSALES, ';
        sqlStatement += '     COUNT(CUSTACCOUNT) AS CUSTCOUNT, ';
        sqlStatement += '     SUM(ORDERFREQUENCY) AS ORDERCOUNT   ';
        sqlStatement += 'FROM MCRSALESSTATSCUSTTABLE ';
        sqlStatement += 'WHERE ORDERFREQUENCY > 0 AND DATAAREAID = \'' + getCompany(tableNum(MCRSalesStatsCustTable), curext()) + '\'';
        sqlStatement += 'GROUP BY ' + sqlHigherPrecedence + 'FREQUENCYSCORE  ';
        sqlStatement += sqlOrderBy;

        new SqlStatementExecutePermission(sqlStatement).assert();

        resultSet = statement.executeQuery(sqlStatement);

        while (resultSet.next())
        {
            frequencyDefinition.rfmDefinitionName = trfmDefinition.rfmDefinitionName;

            if (precedence1 == #R)
            {
                frequencyDefinition.RecencyScore = resultSet.getReal(1);

                if (precedence2 == #M)
                {
                    frequencyDefinition.MonetaryScore = resultSet.getReal(2);
                }
            }
            else if (precedence1 == #M)
            {
                frequencyDefinition.MonetaryScore = resultSet.getReal(1);

                if (precedence2 == #R)
                {
                    frequencyDefinition.RecencyScore = resultSet.getReal(2);
                }
            }

            frequencyDefinition.Score    = resultSet.getReal(1 + fieldIncrementer);

            if (frequencyDefinition.Score == 1)
            {
                frequencyDefinition.FrequencyStart = 0;
                frequencyDefinition.ActualStart = resultSet.getInt(2 + fieldIncrementer);
            }
            else
            {
                frequencyDefinition.FrequencyStart = resultSet.getInt(2 + fieldIncrementer);
                frequencyDefinition.ActualStart = frequencyDefinition.FrequencyStart;
            }

            if (frequencyDefinition.Score == trfmDefinition.FrequencyDivisions)
            {
                frequencyDefinition.FrequencyEnd = 999999999;
                frequencyDefinition.ActualEnd = resultSet.getInt(3 + fieldIncrementer);
            }
            else
            {
                frequencyDefinition.FrequencyEnd = resultSet.getInt(3 + fieldIncrementer);
                frequencyDefinition.ActualEnd = frequencyDefinition.FrequencyEnd;

                if (prevStart -1 > frequencyDefinition.FrequencyEnd)
                {
                    frequencyDefinition.FrequencyEnd = prevStart - 1;
                }
            }

            prevStart = frequencyDefinition.FrequencyStart;

            frequencyDefinition.SalesAmount = resultSet.getReal(4 + fieldIncrementer);
            frequencyDefinition.SalePercent = 100 * (frequencyDefinition.SalesAmount/salesStatsCustTableTotals.TotalInvoiceAmountMST);
            frequencyDefinition.CustomerCount = resultSet.getInt(5 + fieldIncrementer);
            frequencyDefinition.TransactionCount = resultSet.getInt(6 + fieldIncrementer);
            frequencyDefinition.TransactionPercent = 100 * (frequencyDefinition.TransactionCount/salesStatsCustTableTotals.OrderFrequency);

            if (frequencyDefinition.validateWrite())
            {
                frequencyDefinition.insert();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMonetarySummary</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the monetary summary for the current monetary scores given to the customer.
    /// </summary>
    public void createMonetarySummary()
    {
        MCRMonetaryDefinition    monetaryDefinition;

        MCRSalesStatsCustTable   salesStatsCustTableTotals;

        ResultSet   resultSet;
        Statement   statement;
        Connection  connection;
        str         sqlStatement = '';
        str         sqlHigherPrecedence = '';
        str         sqlOrderBy = ' ORDER BY MONETARYSCORE DESC ';
        str         sqlMonetaryCalcStatement = '';
        str         precedence1, precedence2;
        int         fieldIncrementer = 0;
        real   prevStart;

        // clear summary definitions
        delete_from monetaryDefinition where monetaryDefinition.rfmDefinitionName == trfmDefinition.rfmDefinitionName;

        connection = new Connection();
        statement = connection.createStatement();

        // get overall total to calculate percentages
        select sum(TotalInvoiceAmountMST), sum(OrderFrequency) from salesStatsCustTableTotals;

        if (trfmDefinition.MonetaryPrecedence != MCRPriority::High &&
           (trfmDefinition.MonetaryPrecedence <  trfmDefinition.FrequencyPrecedence ||
            trfmDefinition.MonetaryPrecedence <  trfmDefinition.RecencyPrecedence) )
        {
            if (trfmDefinition.RecencyPrecedence == trfmDefinition.FrequencyPrecedence)
            {
                sqlHigherPrecedence = ' RECENCYSCORE, FREQUENCYSCORE, ';
                sqlOrderBy  = ' ORDER BY RECENCYSCORE DESC, FREQUENCYSCORE DESC, MONETARYSCORE DESC';
                precedence1 = #R;
                precedence2 = #F;
                fieldIncrementer = 2;
            }
            else if (trfmDefinition.RecencyPrecedence > trfmDefinition.FrequencyPrecedence &&
                trfmDefinition.FrequencyPrecedence > trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' RECENCYSCORE, FREQUENCYSCORE, ';
                sqlOrderBy  = ' ORDER BY RECENCYSCORE DESC, FREQUENCYSCORE DESC, MONETARYSCORE DESC';
                precedence1 = #R;
                precedence2 = #F;
                fieldIncrementer = 2;
            }
            else if (trfmDefinition.FrequencyPrecedence <= trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' RECENCYSCORE, ';
                sqlOrderBy  = ' ORDER BY RECENCYSCORE DESC, MONETARYSCORE DESC';
                precedence1 = #R;
                precedence2 = '';
                fieldIncrementer = 1;
            }
            else if (trfmDefinition.RecencyPrecedence < trfmDefinition.FrequencyPrecedence &&
                trfmDefinition.RecencyPrecedence > trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' FREQUENCYSCORE, RECENCYSCORE, ';
                sqlOrderBy  = ' ORDER BY FREQUENCYSCORE DESC, RECENCYSCORE DESC, MONETARYSCORE DESC';
                precedence1 = #F;
                precedence2 = #R;
                fieldIncrementer = 2;
            }
            else if (trfmDefinition.RecencyPrecedence <= trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' FREQUENCYSCORE, ';
                sqlOrderBy  = ' ORDER BY FREQUENCYSCORE DESC, MONETARYSCORE DESC';
                precedence1 = #F;
                precedence2 = '';
                fieldIncrementer = 1;
            }
        }

        if (trfmDefinition.rfmGrossOrNet == MCRRFMGrossOrNet::Net &&
            trfmDefinition.rfmSubtractReturns == NoYes::No    )
        {
            sqlMonetaryCalcStatement = ' (TOTALINVOICEAMOUNTMST - TOTALINVOICECOSTAMOUNTMST)/CAST(ORDERFREQUENCY AS NUMERIC(36, 12)) ';
        }
        else if (trfmDefinition.rfmGrossOrNet == MCRRFMGrossOrNet::Net &&
                trfmDefinition.rfmSubtractReturns == NoYes::Yes    )
        {
            sqlMonetaryCalcStatement = ' (TOTALINVOICEAMOUNTMST - TOTALINVOICECOSTAMOUNTMST + TOTALRETURNINVOICEDAMOUNTMST)/CAST(ORDERFREQUENCY AS NUMERIC(36, 12)) ';
        }
        else if (trfmDefinition.rfmGrossOrNet == MCRRFMGrossOrNet::Gross &&
                trfmDefinition.rfmSubtractReturns == NoYes::Yes    )
        {
            sqlMonetaryCalcStatement = ' (TOTALINVOICEAMOUNTMST + TOTALRETURNINVOICEDAMOUNTMST)/CAST(ORDERFREQUENCY AS NUMERIC(36, 12)) ';
        }
        else
        {
            sqlMonetaryCalcStatement = ' AVGINVOICEAMOUNTMST ';
        }

        // Build SQL statement to retrieve new score summary data
        sqlStatement += 'SELECT  ';
        sqlStatement += sqlHigherPrecedence;
        sqlStatement += '    MONETARYSCORE, ';
        sqlStatement += '     MIN(' + sqlMonetaryCalcStatement + ') AS STARTRANGE, ';
        sqlStatement += '     MAX(' + sqlMonetaryCalcStatement + ') AS ENDRANGE, ';
        sqlStatement += '     SUM(TOTALINVOICEAMOUNTMST) AS TOTALSALES, ';
        sqlStatement += '     COUNT(CUSTACCOUNT) AS CUSTCOUNT, ';
        sqlStatement += '     SUM(ORDERFREQUENCY) AS ORDERCOUNT   ';
        sqlStatement += 'FROM MCRSALESSTATSCUSTTABLE ';
        sqlStatement += 'WHERE ORDERFREQUENCY > 0 AND DATAAREAID = \'' + getCompany(tableNum(MCRSalesStatsCustTable), curext()) + '\'';
        sqlStatement += 'GROUP BY ' + sqlHigherPrecedence + 'MONETARYSCORE  ';
        sqlStatement += sqlOrderBy;

        new SqlStatementExecutePermission(sqlStatement).assert();

        resultSet = statement.executeQuery(sqlStatement);

        while (resultSet.next())
        {
            monetaryDefinition.rfmDefinitionName = trfmDefinition.rfmDefinitionName;

            if (precedence1 == #R)
            {
                monetaryDefinition.RecencyScore = resultSet.getReal(1);

                if (precedence2 == #F)
                {
                    monetaryDefinition.FrequencyScore = resultSet.getReal(2);
                }
            }
            else if (precedence1 == #F)
            {
                monetaryDefinition.FrequencyScore = resultSet.getReal(1);

                if (precedence2 == #R)
                {
                    monetaryDefinition.RecencyScore = resultSet.getReal(2);
                }
            }

            monetaryDefinition.Score    = resultSet.getInt(1 + fieldIncrementer);

            if (monetaryDefinition.Score == 1)
            {
                monetaryDefinition.MonetaryStartDollars = -999999999.99;
                monetaryDefinition.ActualStart = resultSet.getReal(2 + fieldIncrementer);
            }
            else
            {
                monetaryDefinition.MonetaryStartDollars = resultSet.getReal(2 + fieldIncrementer);
                monetaryDefinition.ActualStart = monetaryDefinition.MonetaryStartDollars;
            }

            if (monetaryDefinition.Score == trfmDefinition.MonetaryDivisions)
            {
                monetaryDefinition.MonetaryEndDollars = 999999999.99;
                monetaryDefinition.ActualEnd = resultSet.getReal(3 + fieldIncrementer);
            }
            else
            {
                monetaryDefinition.MonetaryEndDollars = resultSet.getReal(3 + fieldIncrementer);
                monetaryDefinition.ActualEnd = monetaryDefinition.MonetaryEndDollars;

                if (prevStart -0.01 > monetaryDefinition.MonetaryEndDollars)
                {
                    monetaryDefinition.MonetaryEndDollars = prevStart - 0.01;
                }
            }

            prevStart = monetaryDefinition.MonetaryStartDollars;

            monetaryDefinition.SalesAmount = resultSet.getReal(4 + fieldIncrementer);
            monetaryDefinition.SalePercent = 100 * (monetaryDefinition.SalesAmount/salesStatsCustTableTotals.TotalInvoiceAmountMST);
            monetaryDefinition.CustomerCount = resultSet.getInt(5 + fieldIncrementer);
            monetaryDefinition.TransactionCount = resultSet.getInt(6 + fieldIncrementer);
            monetaryDefinition.TransactionPercent = 100 * (monetaryDefinition.TransactionCount/salesStatsCustTableTotals.OrderFrequency);

            if (monetaryDefinition.validateWrite())
            {
                monetaryDefinition.insert();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecencySummary</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the recency summary for the current recency scores given to the customer.
    /// </summary>
    private void createRecencySummary()
    {
        MCRRecencyDefinition     recencyDefinition;

        MCRSalesStatsCustTable   salesStatsCustTableTotals;

        ResultSet   resultSet;
        Statement   statement;
        Connection  connection;
        str         sqlStatement = '';
        str         sqlHigherPrecedence = '';
        str         sqlOrderBy = ' ORDER BY RECENCYSCORE DESC ';
        str         precedence1, precedence2;
        int         fieldIncrementer = 0;

        int         prevEnd;
        // clear summary definitions
        delete_from recencyDefinition where recencyDefinition.rfmDefinitionName == trfmDefinition.rfmDefinitionName;

        connection = new Connection();
        statement = connection.createStatement();

        // get overall total to calculate percentages
        select sum(TotalInvoiceAmountMST), sum(OrderFrequency) from salesStatsCustTableTotals;

        if (trfmDefinition.RecencyPrecedence != MCRPriority::High &&
           (trfmDefinition.RecencyPrecedence <  trfmDefinition.FrequencyPrecedence ||
            trfmDefinition.RecencyPrecedence <  trfmDefinition.MonetaryPrecedence) )
        {
            if (trfmDefinition.FrequencyPrecedence == trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' FREQUENCYSCORE, MONETARYSCORE, ';
                sqlOrderBy  = ' ORDER BY FREQUENCYSCORE DESC, MONETARYSCORE DESC, RECENCYSCORE DESC ';
                precedence1 = #F;
                precedence2 = #M;
                fieldIncrementer = 2;
            }
            else if (trfmDefinition.FrequencyPrecedence > trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.MonetaryPrecedence > trfmDefinition.RecencyPrecedence)
            {
                sqlHigherPrecedence = ' FREQUENCYSCORE, MONETARYSCORE, ';
                sqlOrderBy  = ' ORDER BY FREQUENCYSCORE DESC, MONETARYSCORE DESC, RECENCYSCORE DESC ';
                precedence1 = #F;
                precedence2 = #M;
                fieldIncrementer = 2;
            }
            else if (trfmDefinition.MonetaryPrecedence <= trfmDefinition.RecencyPrecedence)
            {
                sqlHigherPrecedence = ' FREQUENCYSCORE, ';
                sqlOrderBy  = ' ORDER BY FREQUENCYSCORE DESC, RECENCYSCORE DESC ';
                precedence1 = #F;
                precedence2 = '';
                fieldIncrementer = 1;
            }
            else if (trfmDefinition.FrequencyPrecedence < trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.FrequencyPrecedence > trfmDefinition.RecencyPrecedence)
            {
                sqlHigherPrecedence = ' MONETARYSCORE, FREQUENCYSCORE, ';
                sqlOrderBy  = ' ORDER BY MONETARYSCORE DESC, FREQUENCYSCORE DESC, RECENCYSCORE DESC ';
                precedence1 = #M;
                precedence2 = #F;
                fieldIncrementer = 2;
            }
            else if (trfmDefinition.FrequencyPrecedence <= trfmDefinition.RecencyPrecedence)
            {
                sqlHigherPrecedence = ' MONETARYSCORE, ';
                sqlOrderBy  = ' ORDER BY MONETARYSCORE DESC, RECENCYSCORE DESC ';
                precedence1 = #M;
                precedence2 = '';
                fieldIncrementer = 1;
            }
        }

        // Build SQL statement to retrieve new score summary data
        sqlStatement += 'SELECT  ';
        sqlStatement += sqlHigherPrecedence;
        sqlStatement += '    RECENCYSCORE, ';
        sqlStatement += '     MIN(DATEDIFF(' + datePart + ', STATLASTORDERDATE, \'' + strEndDate + '\')) AS STARTRANGE, ';
        sqlStatement += '     MAX(DATEDIFF(' + datePart + ', STATLASTORDERDATE, \'' + strEndDate + '\')) AS ENDRANGE, ';
        sqlStatement += '     SUM(TOTALINVOICEAMOUNTMST) AS TOTALSALES, ';
        sqlStatement += '     COUNT(CUSTACCOUNT) AS CUSTCOUNT, ';
        sqlStatement += '     SUM(ORDERFREQUENCY) AS ORDERCOUNT   ';
        sqlStatement += 'FROM MCRSALESSTATSCUSTTABLE ';
        sqlStatement += 'WHERE ORDERFREQUENCY > 0 AND DATAAREAID = \'' + getCompany(tableNum(MCRSalesStatsCustTable), curext()) + '\'';
        sqlStatement += 'GROUP BY ' + sqlHigherPrecedence + 'RECENCYSCORE  ';
        sqlStatement += sqlOrderBy;

        new SqlStatementExecutePermission(sqlStatement).assert();

        resultSet = statement.executeQuery(sqlStatement);

        while (resultSet.next())
        {
            recencyDefinition.rfmDefinitionName = trfmDefinition.rfmDefinitionName;

            if (precedence1 == #F)
            {
                recencyDefinition.FrequencyScore = resultSet.getReal(1);

                if (precedence2 == #M)
                {
                    recencyDefinition.MonetaryScore = resultSet.getReal(2);
                }
            }
            else if (precedence1 == #M)
            {
                recencyDefinition.MonetaryScore = resultSet.getReal(1);

                if (precedence2 == #F)
                {
                    recencyDefinition.FrequencyScore = resultSet.getReal(2);
                }
            }

            recencyDefinition.Score  = resultSet.getReal(1 + fieldIncrementer);

            if (recencyDefinition.Score == trfmDefinition.RecencyDivisions * trfmDefinition.RecencyMultiplier)
            {
                recencyDefinition.RecencyStart = 0;
                recencyDefinition.ActualStart = resultSet.getInt(2 + fieldIncrementer);
            }
            else
            {
                recencyDefinition.RecencyStart = resultSet.getInt(2 + fieldIncrementer);
                recencyDefinition.ActualStart = recencyDefinition.RecencyStart;

                if (prevEnd + 1 < recencyDefinition.RecencyStart)
                {
                    recencyDefinition.RecencyStart = prevEnd + 1;
                }
            }

            if (recencyDefinition.Score == trfmDefinition.RecencyMultiplier)
            {
                recencyDefinition.RecencyEnd = 999999999;
                recencyDefinition.ActualEnd = resultSet.getInt(3 + fieldIncrementer);
            }
            else
            {
                recencyDefinition.RecencyEnd = resultSet.getInt(3 + fieldIncrementer);
                recencyDefinition.ActualEnd = recencyDefinition.RecencyEnd;
            }

            prevEnd = recencyDefinition.RecencyEnd;

            recencyDefinition.SalesAmount = resultSet.getReal(4 + fieldIncrementer);
            recencyDefinition.SalePercent = 100 * (recencyDefinition.SalesAmount/salesStatsCustTableTotals.TotalInvoiceAmountMST);
            recencyDefinition.CustomerCount = resultSet.getInt(5 + fieldIncrementer);
            recencyDefinition.TransactionCount = resultSet.getInt(6 + fieldIncrementer);
            recencyDefinition.TransactionPercent = 100 * (recencyDefinition.TransactionCount/salesStatsCustTableTotals.OrderFrequency);

            if (recencyDefinition.validateWrite())
            {
                recencyDefinition.insert();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRMFSummaries</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the RFM summaries fields based on the current scores given to the customers.
    /// </summary>
    public void createRMFSummaries()
    {
        this.createRecencySummary();
        this.createFrequencySummary();
        this.createMonetarySummary();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of this class.
    /// </summary>
    /// <param name="_mcrrfmDefinitionName">
    /// The <c>MCRRFMDefinitionName</c> for which RFM data is generated.
    /// </param>
    public void new(MCRRFMDefinitionName _mcrrfmDefinitionName)
    {
        trfmDefinition = MCRRFMDefinition::find(_mcrrfmDefinitionName);

        switch (trfmDefinition.RecencyDatePart)
        {
            case MCRRecencyDatePart::Day:
                datePart = #d;
                break;
            case MCRRecencyDatePart::Week:
                datePart = #wk;
                break;
            case MCRRecencyDatePart::Month:
                datePart = #m;
                break;
            default:
                datePart = #d;
        }

        endDate = trfmDefinition.EndDate;

        if ((endDate) == dateNull())
        {
            endDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        // get the number in string for SQL script
        strRecencyMultiplier = num2Str(trfmDefinition.RecencyMultiplier,0,2,DecimalSeparator::Dot,ThousandSeparator::None);
        strFrequencyMultiplier = num2Str(trfmDefinition.FrequencyMultiplier,0,2,DecimalSeparator::Dot,ThousandSeparator::None);
        strMonetaryMultiplier = num2Str(trfmDefinition.MonetaryMultiplier,0,2,DecimalSeparator::Dot,ThousandSeparator::None);

        // Date in YYYY-MM-DD format for SQL script
        strEndDate = date2Str(endDate, 321, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2, DateSeparator::Hyphen, DateYear::Digits4);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFairDistRFM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the fair RFM customer scores.
    /// </summary>
    public void refreshFairDistRFM()
    {
        MCRSalesStatsCustTable salesStatsCustTable;
        MCRSalesStatsCustTable salesStatsCustTableMinEnd;
        MCRRecencyDefinition recencyDefinitionMinCreated;

        Args    custStatsArgs;
        // get date range of last statistics and the last run date
        select minof(StartDate), maxof(EndDate), maxof(CreatedDateTime) from salesStatsCustTable
            where salesStatsCustTable.OrderFrequency > 0;

        select minof(EndDate) from salesStatsCustTableMinEnd
            where salesStatsCustTableMinEnd.OrderFrequency > 0;

        select minof(CreatedDateTime) from recencyDefinitionMinCreated;

        if (salesStatsCustTable.StartDate != trfmDefinition.StartDate ||
            salesStatsCustTable.EndDate != trfmDefinition.EndDate)
        {
            if (Box::yesNo("@MCR33911", DialogButton::No) == DialogButton::Yes)
            {
                // Run stats
                custStatsArgs = new Args();
                custStatsArgs.record(trfmDefinition);
                MCRSalesStatsCust::main(custStatsArgs);
            }
            else
            {
                return;
            }
        }
        // check for open ended date range
        else if (salesStatsCustTableMinEnd.EndDate == dateNull() ||
                salesStatsCustTable.EndDate >= any2date(recencyDefinitionMinCreated.CreatedDateTime))
        {
            // if open ended date range check if user would like to recalc stats
            if (Box::yesNo("@MCR34511", DialogButton::No) == DialogButton::Yes)
            {
                // Run stats
                custStatsArgs = new Args();
                custStatsArgs.record(trfmDefinition);
                MCRSalesStatsCust::main(custStatsArgs);
            }
        }

        this.setFairCustomerRFMScore(true, false);

        this.refreshFairRFMSummary();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFairRFMSummary</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Refreshes the statistical info for level breaks in each of
    ///     the corresponding summaries.
    /// </summary>
    public void refreshFairRFMSummary()
    {
        this.refreshRecencySummary();
        this.refreshFrequencySummary();
        this.refreshMonetarySummary();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFrequencySummary</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates the frequency summary.
    /// </summary>
    public void refreshFrequencySummary()
    {
        MCRSalesStatsCustTable   salesStatsCustTableTotals;

        Statement   statement;
        Connection  connection;
        str         sqlStatement = '';
        str         sqlHigherPrecedence = '';
        str         sqlJoinOn = ' ON A.DATAAREAID = B.DATAAREAID ';
        connection = new Connection();
        statement = connection.createStatement();

        // get overall total to calculate percentages
        select sum(TotalInvoiceAmountMST), sum(OrderFrequency) from salesStatsCustTableTotals;

        sqlJoinOn += '   AND A.SCORE = B.FREQUENCYSCORE ';

        if (trfmDefinition.FrequencyPrecedence != MCRPriority::High &&
           (trfmDefinition.FrequencyPrecedence <  trfmDefinition.RecencyPrecedence ||
            trfmDefinition.FrequencyPrecedence <  trfmDefinition.MonetaryPrecedence) )
        {
            if (trfmDefinition.RecencyPrecedence == trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' RECENCYSCORE, MONETARYSCORE, ';
                sqlJoinOn += '   AND A.RECENCYSCORE = B.RECENCYSCORE ';
                sqlJoinOn += '   AND A.MONETARYSCORE = B.MONETARYSCORE ';
            }
            else if (trfmDefinition.RecencyPrecedence > trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.MonetaryPrecedence > trfmDefinition.FrequencyPrecedence)
            {
                sqlHigherPrecedence = ' RECENCYSCORE, MONETARYSCORE, ';
                sqlJoinOn += '   AND A.RECENCYSCORE = B.RECENCYSCORE ';
                sqlJoinOn += '   AND A.MONETARYSCORE = B.MONETARYSCORE ';
            }
            else if (trfmDefinition.MonetaryPrecedence <= trfmDefinition.FrequencyPrecedence)
            {
                sqlHigherPrecedence = ' RECENCYSCORE, ';
                sqlJoinOn += '   AND A.RECENCYSCORE = B.RECENCYSCORE ';
            }
            else if (trfmDefinition.RecencyPrecedence < trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.RecencyPrecedence > trfmDefinition.FrequencyPrecedence)
            {
                sqlHigherPrecedence = ' MONETARYSCORE, RECENCYSCORE, ';
                sqlJoinOn += '   AND A.RECENCYSCORE = B.RECENCYSCORE ';
                sqlJoinOn += '   AND A.MONETARYSCORE = B.MONETARYSCORE ';
            }
            else if (trfmDefinition.RecencyPrecedence <= trfmDefinition.FrequencyPrecedence)
            {
                sqlHigherPrecedence = ' MONETARYSCORE, ';
                sqlJoinOn += '   AND A.MONETARYSCORE = B.MONETARYSCORE ';
            }
        }

        sqlStatement += 'UPDATE MCRFREQUENCYDEFINITION ';
        sqlStatement += '   SET CUSTOMERCOUNT = B.CUSTCOUNT ';
        sqlStatement += '   , SALESAMOUNT = B.TOTALSALES ';
        sqlStatement += '   , SALEPERCENT = B.SALESPCT * 100 ';
        sqlStatement += '   , TRANSACTIONCOUNT = B.ORDERCOUNT ';
        sqlStatement += '   , TRANSACTIONPERCENT = B.ORDERCOUNTPCT * 100 ';
        sqlStatement += 'FROM MCRFREQUENCYDEFINITION A ';
        sqlStatement += 'JOIN ( ';
        sqlStatement += '   SELECT  DATAAREAID, ' + sqlHigherPrecedence;
        sqlStatement += '       FREQUENCYSCORE, ';
        sqlStatement += '       SUM(TOTALINVOICEAMOUNTMST) AS TOTALSALES, ';
        sqlStatement += '       SUM(TOTALINVOICEAMOUNTMST)/' + num2Str(salesStatsCustTableTotals.TotalInvoiceAmountMST,0,2,DecimalSeparator::Dot,ThousandSeparator::None) + ' AS SALESPCT, ';
        sqlStatement += '       COUNT(CUSTACCOUNT) AS CUSTCOUNT, ';
        sqlStatement += '       SUM(ORDERFREQUENCY) AS ORDERCOUNT, ';
        sqlStatement += '       SUM(ORDERFREQUENCY)/CAST(' + int2Str(salesStatsCustTableTotals.OrderFrequency) + ' AS NUMERIC(36, 12)) AS ORDERCOUNTPCT';
        sqlStatement += '   FROM MCRSALESSTATSCUSTTABLE ';
        sqlStatement += '   WHERE ORDERFREQUENCY > 0 AND DATAAREAID = \'' + getCompany(tableNum(MCRSalesStatsCustTable), curext()) + '\'';
        sqlStatement += '   GROUP BY DATAAREAID, ' + sqlHigherPrecedence + ' FREQUENCYSCORE  ';
        sqlStatement += '   ) B ';
        sqlStatement +=  sqlJoinOn;
        sqlStatement += 'WHERE A.DATAAREAID = \'' + getCompany(tableNum(MCRFrequencyDefinition), curext()) + '\' AND A.RFMDEFINITIONNAME = \'' + trfmDefinition.rfmDefinitionName + '\'';

        new SqlStatementExecutePermission(sqlStatement).assert();

        statement.executeUpdate(sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshMonetarySummary</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates the monetary summary.
    /// </summary>
    public void refreshMonetarySummary()
    {
        MCRSalesStatsCustTable   salesStatsCustTableTotals;

        Statement   statement;
        Connection  connection;
        str         sqlStatement = '';
        str         sqlHigherPrecedence = '';
        str         sqlJoinOn = ' ON A.DATAAREAID = B.DATAAREAID ';

        connection = new Connection();
        statement = connection.createStatement();

        // get overall total to calculate percentages
        select sum(TotalInvoiceAmountMST), sum(OrderFrequency) from salesStatsCustTableTotals;

        sqlJoinOn += '   AND A.SCORE = B.MONETARYSCORE ';

        if (trfmDefinition.MonetaryPrecedence != MCRPriority::High &&
           (trfmDefinition.MonetaryPrecedence <  trfmDefinition.FrequencyPrecedence ||
            trfmDefinition.MonetaryPrecedence <  trfmDefinition.RecencyPrecedence) )
        {
            if (trfmDefinition.RecencyPrecedence == trfmDefinition.FrequencyPrecedence)
            {
                sqlHigherPrecedence = ' RECENCYSCORE, FREQUENCYSCORE, ';
                sqlJoinOn += '   AND A.RECENCYSCORE = B.RECENCYSCORE ';
                sqlJoinOn += '   AND A.FREQUENCYSCORE = B.FREQUENCYSCORE ';
            }
            else if (trfmDefinition.RecencyPrecedence > trfmDefinition.FrequencyPrecedence &&
                trfmDefinition.FrequencyPrecedence > trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' RECENCYSCORE, FREQUENCYSCORE, ';
                sqlJoinOn += '   AND A.RECENCYSCORE = B.RECENCYSCORE ';
                sqlJoinOn += '   AND A.FREQUENCYSCORE = B.FREQUENCYSCORE ';
            }
            else if (trfmDefinition.FrequencyPrecedence <= trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' RECENCYSCORE, ';
                sqlJoinOn += '   AND A.RECENCYSCORE = B.RECENCYSCORE ';
            }
            else if (trfmDefinition.RecencyPrecedence < trfmDefinition.FrequencyPrecedence &&
                trfmDefinition.RecencyPrecedence > trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' FREQUENCYSCORE, RECENCYSCORE, ';
                sqlJoinOn += '   AND A.RECENCYSCORE = B.RECENCYSCORE ';
                sqlJoinOn += '   AND A.FREQUENCYSCORE = B.FREQUENCYSCORE ';
            }
            else if (trfmDefinition.RecencyPrecedence <= trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' FREQUENCYSCORE, ';
                sqlJoinOn += '   AND A.FREQUENCYSCORE = B.FREQUENCYSCORE ';
            }
        }

        sqlStatement += 'UPDATE MCRMONETARYDEFINITION ';
        sqlStatement += '   SET CUSTOMERCOUNT = B.CUSTCOUNT ';
        sqlStatement += '   , SALESAMOUNT = B.TOTALSALES ';
        sqlStatement += '   , SALEPERCENT = B.SALESPCT * 100 ';
        sqlStatement += '   , TRANSACTIONCOUNT = B.ORDERCOUNT ';
        sqlStatement += '   , TRANSACTIONPERCENT = B.ORDERCOUNTPCT * 100 ';
        sqlStatement += 'FROM MCRMONETARYDEFINITION A ';
        sqlStatement += 'JOIN ( ';
        sqlStatement += '   SELECT  DATAAREAID, ' + sqlHigherPrecedence;
        sqlStatement += '       MONETARYSCORE, ';
        sqlStatement += '       SUM(TOTALINVOICEAMOUNTMST) AS TOTALSALES, ';
        sqlStatement += '       SUM(TOTALINVOICEAMOUNTMST)/' + num2Str(salesStatsCustTableTotals.TotalInvoiceAmountMST,0,2,DecimalSeparator::Dot,ThousandSeparator::None) + ' AS SALESPCT, ';
        sqlStatement += '       COUNT(CUSTACCOUNT) AS CUSTCOUNT, ';
        sqlStatement += '       SUM(ORDERFREQUENCY) AS ORDERCOUNT, ';
        sqlStatement += '       SUM(ORDERFREQUENCY)/CAST(' + int2Str(salesStatsCustTableTotals.OrderFrequency) + ' AS NUMERIC(36, 12)) AS ORDERCOUNTPCT';
        sqlStatement += '   FROM MCRSALESSTATSCUSTTABLE ';
        sqlStatement += '   WHERE ORDERFREQUENCY > 0 AND DATAAREAID = \'' + getCompany(tableNum(MCRSalesStatsCustTable), curext()) + '\'';
        sqlStatement += '   GROUP BY DATAAREAID, ' + sqlHigherPrecedence + ' MONETARYSCORE  ';
        sqlStatement += '   ) B ';
        sqlStatement +=  sqlJoinOn;
        sqlStatement += 'WHERE A.DATAAREAID = \'' + getCompany(tableNum(MCRMonetaryDefinition), curext()) + '\' AND A.RFMDEFINITIONNAME = \'' + trfmDefinition.rfmDefinitionName + '\'';

        new SqlStatementExecutePermission(sqlStatement).assert();

        statement.executeUpdate(sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshRecencySummary</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates the recency summary.
    /// </summary>
    public void refreshRecencySummary()
    {
        MCRSalesStatsCustTable   salesStatsCustTableTotals;

        Statement   statement;
        Connection  connection;
        str         sqlStatement = '';
        str         sqlHigherPrecedence = '';
        str         sqlJoinOn = ' ON A.DATAAREAID = B.DATAAREAID ';

        connection = new Connection();
        statement = connection.createStatement();

        // get overall total to calculate percentages
        select sum(TotalInvoiceAmountMST), sum(OrderFrequency) from salesStatsCustTableTotals;

        sqlJoinOn += '   AND A.SCORE = B.RECENCYSCORE ';

        if (trfmDefinition.RecencyPrecedence != MCRPriority::High &&
           (trfmDefinition.RecencyPrecedence <  trfmDefinition.FrequencyPrecedence ||
            trfmDefinition.RecencyPrecedence <  trfmDefinition.MonetaryPrecedence) )
        {
            if (trfmDefinition.FrequencyPrecedence == trfmDefinition.MonetaryPrecedence)
            {
                sqlHigherPrecedence = ' FREQUENCYSCORE, MONETARYSCORE, ';
                sqlJoinOn += '   AND A.FREQUENCYSCORE = B.FREQUENCYSCORE ';
                sqlJoinOn += '   AND A.MONETARYSCORE = B.MONETARYSCORE ';
            }
            else if (trfmDefinition.FrequencyPrecedence > trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.MonetaryPrecedence > trfmDefinition.RecencyPrecedence)
            {
                sqlHigherPrecedence = ' FREQUENCYSCORE, MONETARYSCORE, ';
                sqlJoinOn += '   AND A.FREQUENCYSCORE = B.FREQUENCYSCORE ';
                sqlJoinOn += '   AND A.MONETARYSCORE = B.MONETARYSCORE ';
            }
            else if (trfmDefinition.MonetaryPrecedence <= trfmDefinition.RecencyPrecedence)
            {
                sqlHigherPrecedence = ' FREQUENCYSCORE, ';
                sqlJoinOn += '   AND A.FREQUENCYSCORE = B.FREQUENCYSCORE ';
            }
            else if (trfmDefinition.FrequencyPrecedence < trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.FrequencyPrecedence > trfmDefinition.RecencyPrecedence)
            {
                sqlHigherPrecedence = ' MONETARYSCORE, FREQUENCYSCORE, ';
                sqlJoinOn += '   AND A.FREQUENCYSCORE = B.FREQUENCYSCORE ';
                sqlJoinOn += '   AND A.MONETARYSCORE = B.MONETARYSCORE ';
            }
            else if (trfmDefinition.FrequencyPrecedence <= trfmDefinition.RecencyPrecedence)
            {
                sqlHigherPrecedence = ' MONETARYSCORE, ';
                sqlJoinOn += '   AND A.MONETARYSCORE = B.MONETARYSCORE ';
            }
        }

        sqlStatement += 'UPDATE MCRRECENCYDEFINITION ';
        sqlStatement += '   SET CUSTOMERCOUNT = B.CUSTCOUNT ';
        sqlStatement += '   , SALESAMOUNT = B.TOTALSALES ';
        sqlStatement += '   , SALEPERCENT = B.SALESPCT * 100 ';
        sqlStatement += '   , TRANSACTIONCOUNT = B.ORDERCOUNT ';
        sqlStatement += '   , TRANSACTIONPERCENT = B.ORDERCOUNTPCT * 100 ';
        sqlStatement += 'FROM MCRRECENCYDEFINITION A ';
        sqlStatement += 'JOIN ( ';
        sqlStatement += '   SELECT  DATAAREAID, ' + sqlHigherPrecedence;
        sqlStatement += '       RECENCYSCORE, ';
        sqlStatement += '       SUM(TOTALINVOICEAMOUNTMST) AS TOTALSALES, ';
        sqlStatement += '       SUM(TOTALINVOICEAMOUNTMST)/' + num2Str(salesStatsCustTableTotals.TotalInvoiceAmountMST,0,2,DecimalSeparator::Dot,ThousandSeparator::None)  + ' AS SALESPCT, ';
        sqlStatement += '       COUNT(CUSTACCOUNT) AS CUSTCOUNT, ';
        sqlStatement += '       SUM(ORDERFREQUENCY) AS ORDERCOUNT, ';
        sqlStatement += '       SUM(ORDERFREQUENCY)/CAST(' + int2Str(salesStatsCustTableTotals.OrderFrequency) + ' AS NUMERIC(36, 12)) AS ORDERCOUNTPCT ';
        sqlStatement += '   FROM MCRSALESSTATSCUSTTABLE ';
        sqlStatement += '   WHERE ORDERFREQUENCY > 0 AND DATAAREAID = \'' + getCompany(tableNum(MCRSalesStatsCustTable), curext()) + '\'';
        sqlStatement += '   GROUP BY DATAAREAID, ' + sqlHigherPrecedence + ' RECENCYSCORE  ';
        sqlStatement += '   ) B ';
        sqlStatement +=  sqlJoinOn;
        sqlStatement += 'WHERE A.DATAAREAID = \'' + getCompany(tableNum(MCRRecencyDefinition), curext()) + '\' AND A.RFMDEFINITIONNAME = \'' + trfmDefinition.rfmDefinitionName + '\'';

        new SqlStatementExecutePermission(sqlStatement).assert();

        statement.executeUpdate(sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCustomerRFMScores</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Resets the customer RFM Scores based on the current RFM definitions.
    /// </summary>
    /// <param name="_resetRecency">
    /// Indicates the recency should be reset.
    /// </param>
    /// <param name="_resetFrequency">
    /// Indicates the frequency should be reset.
    /// </param>
    /// <param name="_resetMonetary">
    /// Indicates the monetary should be reset.
    /// </param>
    /// <param name="_setRFMComposite">
    ///  Indicates the RFM composite should be set; optional.
    /// </param>
    /// <param name="_rerunStats">
    /// Indicates the statistics should be refreshed; optional.
    /// </param>
    /// <param name="_createSummary">
    /// Indicates the summaries should be created; optional.
    /// </param>
    /// <remarks>
    /// The purpose
    ///     is to allow the user to modify the ranges generated by the system and then rescore the
    ///     customer base.
    /// </remarks>
    public void resetCustomerRFMScores(boolean _resetRecency,
                                       boolean _resetFrequency,
                                       boolean _resetMonetary,
                                       boolean _setRFMComposite = false,
                                       boolean _rerunStats = false,
                                       boolean _createSummary = false)
    {
        MCRSalesStatsCustTable   salesStatsCustTable;

        Statement statement;
        Connection connection;
        str sqlStatement = '';

        str sqlRecencySetStatement = '';
        str sqlFrequencySetStatement = '';
        str sqlMonetarySetStatement = '';

        str sqlRecencyJoinStatement = '';
        str sqlFrequencyJoinStatement = '';
        str sqlMonetaryJoinStatement = '';
        str sqlMonetaryCalculation = '';

        str sqlRFMCompositeStatement = '';

        str recencyscorefield   = 'A.RECENCYSCORE';
        str frequencyscorefield = 'A.FREQUENCYSCORE';
        str monetaryscorefield  = 'A.MONETARYSCORE';

        Args        custStatsArgs;

        if (!_resetRecency && !_resetFrequency && !_resetMonetary)
        {
            return;
        }

        if (_rerunStats)
        {
            // Run stats for timeframe
            custStatsArgs = new Args();
            custStatsArgs.record(trfmDefinition);
            MCRSalesStatsCust::main(custStatsArgs);
        }

        // Clear existing RFM values
        if (_setRFMComposite)
        {
            update_recordset salesStatsCustTable
                setting
                        RecencyScore = 0,
                        FrequencyScore = 0,
                        MonetaryScore = 0,
                        mcrrfmComposite = 0;
        }
        else
        {
            update_recordset salesStatsCustTable
                setting
                        RecencyScore = 0,
                        FrequencyScore = 0,
                        MonetaryScore = 0;
        }

        connection = new Connection();
        statement = connection.createStatement();

        if (_resetRecency)
        {
            sqlRecencySetStatement = '    , RECENCYSCORE = B.SCORE ';
            recencyscorefield = 'B.SCORE';

            sqlRecencyJoinStatement += ' JOIN MCRRECENCYDEFINITION B ';
            sqlRecencyJoinStatement += '    ON A.DATAAREAID = B.DATAAREAID AND B.RFMDEFINITIONNAME = \'' + trfmDefinition.rfmDefinitionName + '\' ';
            sqlRecencyJoinStatement += '    AND  DATEDIFF(' + datePart + ', A.STATLASTORDERDATE, \'' + strEndDate;
            sqlRecencyJoinStatement += '\') BETWEEN ISNULL(b.RecencyStart, DATEDIFF(' + datePart + ', A.STATLASTORDERDATE, \'' + strEndDate;
            sqlRecencyJoinStatement += '\') - 1) AND ISNULL(B.RECENCYEND, DATEDIFF(' + datePart + ', A.STATLASTORDERDATE, \'' + strEndDate;
            sqlRecencyJoinStatement += '\') + 1) ';
        }

        if (_resetFrequency)
        {
            sqlFrequencySetStatement = '    , FREQUENCYSCORE = C.SCORE ';
            frequencyscorefield = 'C.SCORE';

            sqlFrequencyJoinStatement += ' JOIN MCRFREQUENCYDEFINITION C ';
            sqlFrequencyJoinStatement += '    ON A.DATAAREAID = C.DATAAREAID AND C.RFMDEFINITIONNAME = \'' + trfmDefinition.rfmDefinitionName + '\' ';
            sqlFrequencyJoinStatement += '    AND A.ORDERFREQUENCY BETWEEN ISNULL(C.FREQUENCYSTART, A.ORDERFREQUENCY - 1) AND ISNULL(C.FREQUENCYEND, A.ORDERFREQUENCY + 1) ';
        }

        if (_resetMonetary)
        {
            sqlMonetarySetStatement = '    , MONETARYSCORE = D.SCORE ';
            monetaryscorefield  = 'D.SCORE';

            sqlMonetaryJoinStatement += ' JOIN MCRMONETARYDEFINITION D ';
            sqlMonetaryJoinStatement += '    ON A.DATAAREAID = D.DATAAREAID AND D.RFMDEFINITIONNAME = \'' + trfmDefinition.rfmDefinitionName + '\' ';

            if (trfmDefinition.rfmGrossOrNet == MCRRFMGrossOrNet::Net &&
               trfmDefinition.rfmSubtractReturns == NoYes::No    )
            {
                sqlMonetaryCalculation = ' (TOTALINVOICEAMOUNTMST - TOTALINVOICECOSTAMOUNTMST)/CAST(ORDERFREQUENCY AS NUMERIC(36, 12) ';
            }
            else if (trfmDefinition.rfmGrossOrNet == MCRRFMGrossOrNet::Net &&
                    trfmDefinition.rfmSubtractReturns == NoYes::Yes    )
            {
                sqlMonetaryCalculation = ' (TOTALINVOICEAMOUNTMST - TOTALINVOICECOSTAMOUNTMST + TOTALRETURNINVOICEDAMOUNTMST)/CAST(ORDERFREQUENCY AS NUMERIC(36, 12) ';
            }
            else if (trfmDefinition.rfmGrossOrNet == MCRRFMGrossOrNet::Gross &&
                    trfmDefinition.rfmSubtractReturns == NoYes::Yes    )
            {
                sqlMonetaryCalculation = ' (TOTALINVOICEAMOUNTMST + TOTALRETURNINVOICEDAMOUNTMST)/CAST(ORDERFREQUENCY AS NUMERIC(36, 12) ';
            }
            else
            {
                sqlMonetaryCalculation = ' AVGINVOICEAMOUNTMST ';
            }

            sqlMonetaryJoinStatement += '    AND ' + sqlMonetaryCalculation + ' BETWEEN ISNULL(D.MONETARYSTARTDOLLARS, ' + sqlMonetaryCalculation + ' - 1) AND ISNULL(D.MONETARYENDDOLLARS, ' + sqlMonetaryCalculation + ' + 1) ';
        }

        if (_setRFMComposite)
        {
            if (trfmDefinition.AddScores == NoYes::Yes)
            {
                sqlRFMCompositeStatement = ' , MCRRFMCOMPOSITE =  ' + recencyscorefield + ' + ' + frequencyscorefield + ' + ' + monetaryscorefield + ' ';
            }
            else
            {
                sqlRFMCompositeStatement = ' , MCRRFMCOMPOSITE =  ' + 'CAST(CAST(' + recencyscorefield + ' AS NVARCHAR) + CAST(' + frequencyscorefield + ' AS NVARCHAR) + CAST(' + monetaryscorefield + ' AS NVARCHAR) AS INT) ';
            }
        }

        sqlStatement += 'UPDATE MCRSALESSTATSCUSTTABLE ';
        sqlStatement += '    SET RECVERSION = A.RECVERSION + 97 ';
        sqlStatement += sqlRecencySetStatement + sqlFrequencySetStatement + sqlMonetarySetStatement;
        sqlStatement += sqlRFMCompositeStatement;
        sqlStatement += 'FROM MCRSALESSTATSCUSTTABLE A ';
        sqlStatement += sqlRecencyJoinStatement + sqlFrequencyJoinStatement + sqlMonetaryJoinStatement;
        sqlStatement += 'WHERE A.ORDERFREQUENCY > 0 AND A.DATAAREAID = \'' + getCompany(tableNum(MCRSalesStatsCustTable), curext()) + '\'';

        new SqlStatementExecutePermission(sqlStatement).assert();

        statement.executeUpdate(sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveCustomerRFMHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Saves off the current RFM values along with the values used to base those values.
    /// </summary>
    public void saveCustomerRFMHistory()
    {
        MCRCustRFMScore mcrCustRFMScore;
        MCRSalesStatsCustTable mcrSalesStatsCustTable;
        MCRRFMDefinitionName rfmDefName = trfmDefinition.rfmDefinitionName;
        date effdate;

        effdate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        // clear out any same day values
        delete_from mcrCustRFMScore
            where mcrCustRFMScore.EffectiveDate == effdate &&
                mcrCustRFMScore.rfmDefinitionName == trfmDefinition.rfmDefinitionName;

        insert_recordset mcrCustRFMScore
            (LastOrderDate, OrderFrequency, AvgInvoiceAmountMST,
             RecencyScore, FrequencyScore, MonetaryScore, RFMComposite,
             EffectiveDate, CustAccount, RFMDefinitionName)
        select StatLastOrderDate, OrderFrequency, AvgInvoiceAmountMST,
                RecencyScore, FrequencyScore, MonetaryScore, mcrrfmComposite,
                effdate , CustAccount, rfmDefName from mcrSalesStatsCustTable
            where mcrSalesStatsCustTable.OrderFrequency > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomerRFMScore</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the RFM composite score
    ///     on the customer statistics table based on either a fair distribution or
    ///     an even one and then flag the definition to indicate which one
    ///     is being used to currently score the customers.
    /// </summary>
    public void setCustomerRFMScore()
    {
        MCRRFMDefinition     trfmDefinitionUpdate;

        str sqlStatement = '';
        str sqlStatementRFMComposite = '';

        if (trfmDefinition.EvenDistribution == NoYes::Yes)
        {
            this.calcEvenDistRFM(true);
        }
        else
        {
            this.setFairCustomerRFMScore(true, true);
        }

        ttsBegin;
        update_recordset trfmDefinitionUpdate
            setting Active = NoYes::No;

        select forupdate trfmDefinitionUpdate
            where trfmDefinitionUpdate.rfmDefinitionName == trfmDefinition.rfmDefinitionName;
        trfmDefinitionUpdate.Active = NoYes::Yes;
        if (trfmDefinitionUpdate.validateWrite())
        {
            trfmDefinitionUpdate.update();
        }
        else
        {
            throw error("@SYS104318");
        }

        ttsCommit;

        trfmDefinition.reread();

        if (trfmDefinition.SaveHistory == NoYes::Yes)
        {
            this.saveCustomerRFMHistory();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFairCustomerRFMScore</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the RFM composite score
    ///     on the customer statistics table based on either a fair distribution or
    ///     an even one and then flag the definition to indicate which one
    ///     is being used to currently score the customers.
    /// </summary>
    /// <param name="_useExistingRanges">
    /// Indicator whether or not to use the existing range calcualtions or not
    /// </param>
    /// <param name="_setRFMComposite">
    /// Indicates the RFM composite should be set; optional.
    /// </param>
    public void setFairCustomerRFMScore(boolean _useExistingRanges = false,
                                        boolean _setRFMComposite = false)
    {
        MCRSalesStatsCustTable salesStatsCustTable;
        if (_setRFMComposite)
        {
                    update_recordset salesStatsCustTable
                    setting
                            RecencyScore = 0,
                            FrequencyScore = 0,
                            MonetaryScore = 0,
                            mcrrfmComposite = 0;
        }
        else
        {
            update_recordset salesStatsCustTable
                    setting
                            RecencyScore = 0,
                            FrequencyScore = 0,
                            MonetaryScore = 0;
        }

        if (trfmDefinition.RecencyPrecedence == MCRPriority::High)
        {
            // Calcualte Recency
            if (_useExistingRanges == false)
            {
                this.createFairRecRanges();
            }

            this.setRecencyScore(_setRFMComposite);
        }

        if (trfmDefinition.FrequencyPrecedence == MCRPriority::High)
        {
            // Calcualte Frequency
            if (_useExistingRanges == false)
            {
                this.createFairFreqRanges();
            }

            this.setFrequencyScore(_setRFMComposite);
        }

        if (trfmDefinition.MonetaryPrecedence == MCRPriority::High)
        {
            // Calcualte Monetary
            if (_useExistingRanges == false)
            {
                this.createFairMonRanges();
            }

            this.setMonetaryScore(_setRFMComposite);
        }

        if (trfmDefinition.RecencyPrecedence == MCRPriority::Medium)
        {
            // Calcualte Recency
            if (_useExistingRanges == false)
            {
                this.createFairRecRanges();
            }

            this.setRecencyScore(_setRFMComposite);
        }

        if (trfmDefinition.FrequencyPrecedence == MCRPriority::Medium)
        {
            // Calcualte Frequency
            if (_useExistingRanges == false)
            {
                this.createFairFreqRanges();
            }

            this.setFrequencyScore(_setRFMComposite);
        }

        if (trfmDefinition.MonetaryPrecedence == MCRPriority::Medium)
        {
            // Calcualte Monetary
            if (_useExistingRanges == false)
            {
                this.createFairMonRanges();
            }

            this.setMonetaryScore(_setRFMComposite);
        }

        if (trfmDefinition.RecencyPrecedence == MCRPriority::Low)
        {
            // Calcualte Recency
            if (_useExistingRanges == false)
            {
                this.createFairRecRanges();
            }

            this.setRecencyScore(_setRFMComposite);
        }

        if (trfmDefinition.FrequencyPrecedence == MCRPriority::Low)
        {
            // Calcualte Frequency
            if (_useExistingRanges == false)
            {
                this.createFairFreqRanges();
            }
            this.setFrequencyScore(_setRFMComposite);
        }

        if (trfmDefinition.MonetaryPrecedence == MCRPriority::Low)
        {
            // Calcualte Monetary
            if (_useExistingRanges == false)
            {
                this.createFairMonRanges();
            }

            this.setMonetaryScore(_setRFMComposite);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFrequencyScore</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the frequency score on the customer statistics table based on the current frequency ranges.
    /// </summary>
    /// <param name="_setRFMComposite">
    /// Indicates the RFM composite should be set; optional.
    /// </param>
    public void setFrequencyScore(boolean _setRFMComposite = false)
    {
        Statement statement;
        Connection connection;
        str sqlStatement = '';

        str sqlFrequencySetStatement = '';
        str sqlFrequencyJoinStatement = '';
        str frequencyscorefield   = 'A.FREQUENCYSCORE';
        str sqlStatementRFMComposite = '';

        connection = new Connection();
        statement = connection.createStatement();

        sqlFrequencySetStatement = '    , FREQUENCYSCORE = B.SCORE ';
        frequencyscorefield = 'B.SCORE';

        sqlFrequencyJoinStatement += ' JOIN MCRFREQUENCYDEFINITION B ';
        sqlFrequencyJoinStatement += '    ON A.DATAAREAID = B.DATAAREAID AND B.RFMDEFINITIONNAME = \'' + trfmDefinition.rfmDefinitionName + '\' ';
        sqlFrequencyJoinStatement += '    AND A.ORDERFREQUENCY BETWEEN ISNULL(B.FREQUENCYSTART, A.ORDERFREQUENCY - 1) AND ISNULL(B.FREQUENCYEND, A.ORDERFREQUENCY + 1) ';

        if (trfmDefinition.FrequencyPrecedence != MCRPriority::High &&
           (trfmDefinition.FrequencyPrecedence <  trfmDefinition.RecencyPrecedence ||
            trfmDefinition.FrequencyPrecedence <  trfmDefinition.MonetaryPrecedence) )
        {
            if (trfmDefinition.RecencyPrecedence == trfmDefinition.MonetaryPrecedence)
            {
                sqlFrequencyJoinStatement += ' AND B.RECENCYSCORE = A.RECENCYSCORE ';
                sqlFrequencyJoinStatement += ' AND B.MONETARYSCORE = A.MONETARYSCORE ';
            }
            else if (trfmDefinition.RecencyPrecedence > trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.MonetaryPrecedence > trfmDefinition.FrequencyPrecedence)
            {
                sqlFrequencyJoinStatement += ' AND B.RECENCYSCORE = A.RECENCYSCORE ';
                sqlFrequencyJoinStatement += ' AND B.MONETARYSCORE = A.MONETARYSCORE ';
            }
            else if (trfmDefinition.MonetaryPrecedence <= trfmDefinition.FrequencyPrecedence)
            {
                sqlFrequencyJoinStatement += ' AND B.RECENCYSCORE = A.RECENCYSCORE ';
            }
            else if (trfmDefinition.RecencyPrecedence < trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.RecencyPrecedence > trfmDefinition.FrequencyPrecedence)
            {
                sqlFrequencyJoinStatement += ' AND B.RECENCYSCORE = A.RECENCYSCORE ';
                sqlFrequencyJoinStatement += ' AND B.MONETARYSCORE = A.MONETARYSCORE ';
            }
            else if (trfmDefinition.RecencyPrecedence <= trfmDefinition.FrequencyPrecedence)
            {
                sqlFrequencyJoinStatement += ' AND B.MONETARYSCORE = A.MONETARYSCORE ';
            }
        }

        if (_setRFMComposite)
        {
            if (trfmDefinition.AddScores == NoYes::Yes)
            {
                sqlStatementRFMComposite = ' , MCRRFMCOMPOSITE = A.RECENCYSCORE + B.SCORE +  A.MONETARYSCORE  ' ;
            }
            else
            {
                sqlStatementRFMComposite = ' , MCRRFMCOMPOSITE = CAST(CAST(CAST(A.RECENCYSCORE AS INT) AS NVARCHAR) +  CAST(CAST(B.SCORE ' +
                                            ' AS INT) AS NVARCHAR) +  CAST(CAST(A.MONETARYSCORE AS INT) AS NVARCHAR) AS FLOAT) ' ;
            }
        }

        sqlStatement += 'UPDATE MCRSALESSTATSCUSTTABLE ';
        sqlStatement += '    SET RECVERSION = A.RECVERSION + 97 ';
        sqlStatement += sqlFrequencySetStatement;
        sqlStatement += sqlStatementRFMComposite;
        sqlStatement += 'FROM MCRSALESSTATSCUSTTABLE A ';
        sqlStatement += sqlFrequencyJoinStatement;
        sqlStatement += 'WHERE A.ORDERFREQUENCY > 0 AND A.DATAAREAID = \'' + getCompany(tableNum(MCRSalesStatsCustTable), curext()) + '\'';

        new SqlStatementExecutePermission(sqlStatement).assert();

        statement.executeUpdate(sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMonetaryScore</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the monetary score on the customer statistics table based on the current monetary ranges.
    /// </summary>
    /// <param name="_setRFMComposite">
    /// Indicates the RFM composite should be set; optional.
    /// </param>
    public void setMonetaryScore(boolean _setRFMComposite = false)
    {
        Statement statement;
        Connection connection;
        str sqlStatement = '';

        str sqlMonetarySetStatement = '';
        str sqlMonetaryJoinStatement = '';
        str sqlMonetaryCalculation = '';

        str monetaryscorefield   = 'A.MONETARYSCORE';
        str sqlStatementRFMComposite = '';

        connection = new Connection();
        statement = connection.createStatement();

        sqlMonetarySetStatement = '    , MONETARYSCORE = B.SCORE ';
        monetaryscorefield  = 'B.SCORE';

        sqlMonetaryJoinStatement += ' JOIN MCRMONETARYDEFINITION B ';
        sqlMonetaryJoinStatement += '    ON A.DATAAREAID = B.DATAAREAID AND B.RFMDEFINITIONNAME = \'' + trfmDefinition.rfmDefinitionName + '\' ';

        if (trfmDefinition.rfmGrossOrNet == MCRRFMGrossOrNet::Net &&
           trfmDefinition.rfmSubtractReturns == NoYes::No    )
        {
            sqlMonetaryCalculation = ' (TOTALINVOICEAMOUNTMST - TOTALINVOICECOSTAMOUNTMST)/CAST(ORDERFREQUENCY AS NUMERIC(36, 12)) ';
        }
        else if (trfmDefinition.rfmGrossOrNet == MCRRFMGrossOrNet::Net &&
                trfmDefinition.rfmSubtractReturns == NoYes::Yes    )
        {
            sqlMonetaryCalculation = ' (TOTALINVOICEAMOUNTMST - TOTALINVOICECOSTAMOUNTMST + TOTALRETURNINVOICEDAMOUNTMST)/CAST(ORDERFREQUENCY AS NUMERIC(36, 12)) ';
        }
        else if (trfmDefinition.rfmGrossOrNet == MCRRFMGrossOrNet::Gross &&
                trfmDefinition.rfmSubtractReturns == NoYes::Yes    )
        {
            sqlMonetaryCalculation = ' (TOTALINVOICEAMOUNTMST + TOTALRETURNINVOICEDAMOUNTMST)/CAST(ORDERFREQUENCY AS NUMERIC(36, 12)) ';
        }
        else
        {
            sqlMonetaryCalculation = ' AVGINVOICEAMOUNTMST ';
        }

        sqlMonetaryJoinStatement += '    AND ' + sqlMonetaryCalculation + ' BETWEEN ISNULL(B.MONETARYSTARTDOLLARS, ' + sqlMonetaryCalculation + ' - 1) AND ISNULL(B.MONETARYENDDOLLARS, ' + sqlMonetaryCalculation + ' + 1) ';

        if (trfmDefinition.MonetaryPrecedence != MCRPriority::High &&
           (trfmDefinition.MonetaryPrecedence <  trfmDefinition.FrequencyPrecedence ||
            trfmDefinition.MonetaryPrecedence <  trfmDefinition.RecencyPrecedence) )
        {
            if (trfmDefinition.RecencyPrecedence == trfmDefinition.FrequencyPrecedence)
            {
                sqlMonetaryJoinStatement += ' AND B.RECENCYSCORE = A.RECENCYSCORE ';
                sqlMonetaryJoinStatement += ' AND B.FREQUENCYSCORE = A.FREQUENCYSCORE ';
            }
            else if (trfmDefinition.RecencyPrecedence > trfmDefinition.FrequencyPrecedence &&
                trfmDefinition.FrequencyPrecedence > trfmDefinition.MonetaryPrecedence)
            {
                sqlMonetaryJoinStatement += ' AND B.RECENCYSCORE = A.RECENCYSCORE ';
                sqlMonetaryJoinStatement += ' AND B.FREQUENCYSCORE = A.FREQUENCYSCORE ';
            }
            else if (trfmDefinition.FrequencyPrecedence <= trfmDefinition.MonetaryPrecedence)
            {
                sqlMonetaryJoinStatement += ' AND B.FREQUENCYSCORE = A.FREQUENCYSCORE ';
            }
            else if (trfmDefinition.RecencyPrecedence < trfmDefinition.FrequencyPrecedence &&
                trfmDefinition.RecencyPrecedence > trfmDefinition.MonetaryPrecedence)
            {
                sqlMonetaryJoinStatement += ' AND B.FREQUENCYSCORE = A.FREQUENCYSCORE ';
                sqlMonetaryJoinStatement += ' AND B.RECENCYSCORE = A.RECENCYSCORE ';
            }
            else if (trfmDefinition.RecencyPrecedence <= trfmDefinition.MonetaryPrecedence)
            {
                sqlMonetaryJoinStatement += ' AND B.FREQUENCYSCORE = A.FREQUENCYSCORE ';
            }
        }

        if (_setRFMComposite)
        {
            if (trfmDefinition.AddScores == NoYes::Yes)
            {
                sqlStatementRFMComposite = ' , MCRRFMCOMPOSITE = A.RECENCYSCORE + A.FREQUENCYSCORE +  B.SCORE  ' ;
            }
            else
            {
                sqlStatementRFMComposite = ' , MCRRFMCOMPOSITE = CAST(CAST(CAST(A.RECENCYSCORE AS INT) AS NVARCHAR) + ' +
                                            'CAST(CAST(A.FREQUENCYSCORE AS INT) AS NVARCHAR) +  CAST(CAST(B.SCORE AS INT) AS NVARCHAR) AS FLOAT) ' ;
            }
        }

        sqlStatement += 'UPDATE MCRSALESSTATSCUSTTABLE ';
        sqlStatement += '    SET RECVERSION = A.RECVERSION + 97 ';
        sqlStatement += sqlMonetarySetStatement;
        sqlStatement += sqlStatementRFMComposite;
        sqlStatement += 'FROM MCRSALESSTATSCUSTTABLE A ';
        sqlStatement += sqlMonetaryJoinStatement;
        sqlStatement += 'WHERE A.ORDERFREQUENCY > 0 AND A.DATAAREAID = \'' + getCompany(tableNum(MCRSalesStatsCustTable), curext()) + '\'';

        new SqlStatementExecutePermission(sqlStatement).assert();

        statement.executeUpdate(sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecencyScore</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the recency score on the customer statistics table based on the current Recency ranges.
    /// </summary>
    /// <param name="_setRFMComposite">
    /// Indicates the RFM composite should be set; optional.
    /// </param>
    public void setRecencyScore(boolean _setRFMComposite = false)
    {
        Statement statement;
        Connection connection;
        str sqlStatement = '';

        str sqlRecencySetStatement = '';
        str sqlRecencyJoinStatement = '';
        str recencyscorefield   = 'A.RECENCYSCORE';
        str sqlStatementRFMComposite = '';

        connection = new Connection();
        statement = connection.createStatement();

        sqlRecencySetStatement = '    , RECENCYSCORE = B.SCORE ';
        recencyscorefield = 'B.SCORE';

        sqlRecencyJoinStatement += ' JOIN MCRRECENCYDEFINITION B ';
        sqlRecencyJoinStatement += '    ON A.DATAAREAID = B.DATAAREAID AND B.RFMDEFINITIONNAME = \'' + trfmDefinition.rfmDefinitionName + '\' ';
        sqlRecencyJoinStatement += '    AND  DATEDIFF(' + datePart + ', A.STATLASTORDERDATE, \'' + strEndDate;
        sqlRecencyJoinStatement += '\') BETWEEN ISNULL(B.RECENCYSTART, DATEDIFF(' + datePart + ', A.STATLASTORDERDATE, \'' + strEndDate;
        sqlRecencyJoinStatement += '\') - 1) AND ISNULL(B.RECENCYEND, DATEDIFF(' + datePart + ', A.STATLASTORDERDATE, \'' + strEndDate;
        sqlRecencyJoinStatement += '\') + 1) ';

        if (trfmDefinition.RecencyPrecedence != MCRPriority::High &&
           (trfmDefinition.RecencyPrecedence <  trfmDefinition.FrequencyPrecedence ||
            trfmDefinition.RecencyPrecedence <  trfmDefinition.MonetaryPrecedence) )
        {
            if (trfmDefinition.FrequencyPrecedence == trfmDefinition.MonetaryPrecedence)
            {
                sqlRecencyJoinStatement += ' AND B.FREQUENCYSCORE = A.FREQUENCYSCORE ';
                sqlRecencyJoinStatement += ' AND B.MONETARYSCORE = A.MONETARYSCORE ';
            }
            else if (trfmDefinition.FrequencyPrecedence > trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.MonetaryPrecedence > trfmDefinition.RecencyPrecedence)
            {
                sqlRecencyJoinStatement += ' AND B.FREQUENCYSCORE = A.FREQUENCYSCORE ';
                sqlRecencyJoinStatement += ' AND B.MONETARYSCORE = A.MONETARYSCORE ';
            }
            else if (trfmDefinition.MonetaryPrecedence <= trfmDefinition.RecencyPrecedence)
            {
                sqlRecencyJoinStatement += ' AND B.FREQUENCYSCORE = A.FREQUENCYSCORE ';
            }
            else if (trfmDefinition.FrequencyPrecedence < trfmDefinition.MonetaryPrecedence &&
                trfmDefinition.FrequencyPrecedence > trfmDefinition.RecencyPrecedence)
            {
                sqlRecencyJoinStatement += ' AND B.MONETARYSCORE = A.MONETARYSCORE ';
                sqlRecencyJoinStatement += ' AND B.FREQUENCYSCORE = A.FREQUENCYSCORE ';
            }
            else if (trfmDefinition.FrequencyPrecedence <= trfmDefinition.RecencyPrecedence)
            {
                sqlRecencyJoinStatement += ' AND B.MONETARYSCORE = A.MONETARYSCORE ';
            }
        }

        if (_setRFMComposite)
        {
            if (trfmDefinition.AddScores == NoYes::Yes)
            {
                sqlStatementRFMComposite = ' , MCRRFMCOMPOSITE = B.SCORE + A.FREQUENCYSCORE +  A.MONETARYSCORE ' ;
            }
            else
            {
                sqlStatementRFMComposite = ' , MCRRFMCOMPOSITE = CAST(CAST(CAST(B.SCORE AS INT) AS NVARCHAR) + ' +
                                                'CAST(CAST(A.FREQUENCYSCORE AS INT) AS NVARCHAR) +  CAST(CAST(A.MONETARYSCORE AS INT) AS NVARCHAR) AS FLOAT) ' ;
            }
        }

        sqlStatement += 'UPDATE MCRSALESSTATSCUSTTABLE ';
        sqlStatement += '    SET RECVERSION = A.RECVERSION + 97 ';
        sqlStatement += sqlRecencySetStatement;
        sqlStatement += sqlStatementRFMComposite;
        sqlStatement += 'FROM MCRSALESSTATSCUSTTABLE A ';
        sqlStatement += sqlRecencyJoinStatement;
        sqlStatement += 'WHERE A.ORDERFREQUENCY > 0 AND A.DATAAREAID = \'' + getCompany(tableNum(MCRSalesStatsCustTable), curext()) + '\'';

        new SqlStatementExecutePermission(sqlStatement).assert();
        statement.executeUpdate(sqlStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MCRRFM construct(MCRRFMDefinitionName _mcrrfmDefinitionName)
    {
        return new MCRRFM(_mcrrfmDefinitionName);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>