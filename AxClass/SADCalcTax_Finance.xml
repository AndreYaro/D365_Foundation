<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SADCalcTax_Finance</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SADCalcTax_Finance extends SADCalcTax
{
    PlSADFinanceTable financeTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newForSourceTable</Name>
				<Source><![CDATA[
    public static SADCalcTax_Finance newForSourceTable(PlSADFinanceTable _financeTable)
    {
        SADCalcTax_Finance calcTax = new SADCalcTax_Finance();
        calcTax.init(_financeTable);
        return calcTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init(Common _common)
    {
        super(_common);
        financeTable = _common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDate</Name>
				<Source><![CDATA[
    public TransDate taxDate()
    {
        return financeTable.VATDueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    public DocumentDate documentDate()
    {
        return financeTable.SADDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionDate</Name>
				<Source><![CDATA[
    public TransDate transactionDate()
    {
        return financeTable.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxcode</Name>
				<Source><![CDATA[
    public void validateTaxcode(boolean _shouldBlock = NoYes::No, RecId _sourceRecId = 0)
    {
        TmpTaxWorkTrans tmpTaxWorkTrans = this.tax().tmpTaxWorkTrans();
        str taxcodes;
        if (_sourceRecId)
        {
            while select TaxCode from tmpTaxWorkTrans
            group by TaxCode
            where tmpTaxWorkTrans.SourceRecId == _sourceRecId
                && (tmpTaxWorkTrans.ExemptTax == NoYes::Yes
                    || tmpTaxWorkTrans.ReverseCharge_W == NoYes::Yes
                    || tmpTaxWorkTrans.TaxDirection == TaxDirection::UseTax)
            {
                taxcodes += strFmt('%1,', tmpTaxWorkTrans.TaxCode);
            }
        }
        else
        {
            while select TaxCode from tmpTaxWorkTrans
                group by TaxCode
                where tmpTaxWorkTrans.ExemptTax == NoYes::Yes
                    || tmpTaxWorkTrans.ReverseCharge_W == NoYes::Yes
                    || tmpTaxWorkTrans.TaxDirection == TaxDirection::UseTax
            {
                taxcodes += strFmt('%1,', tmpTaxWorkTrans.TaxCode);
            }
        }
        if (strLen(taxcodes))
        {
            taxcodes = subStr(taxcodes, 0, strLen(taxcodes) - 1);
            if (_shouldBlock)
            {
                throw error(strFmt('@TaxIntegration:SADDocumentVATCodeFailure', taxcodes));
            }
            else
            {
                warning(strFmt('@TaxIntegration:SADDocumentVATCodeFailure', taxcodes));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendAccount</Name>
				<Source><![CDATA[
    protected VendAccount getVendAccount()
    {
        VendAccount vendAccount;
        if (TaxSADDocumentGLMultipleVATIDFlight::instance().isEnabled()
            && TaxIntegrationUtils::isMultipleTaxIdEnabledForTaxService())
        {
            vendAccount = PlSADFinanceInvTrans::getUniqueVendor(financeTable.SADNumber, financeTable.SADDate);
        }
        else
        {
            vendAccount = financeTable.SADGovDuty;
        }

        return vendAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>