<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalData_Loss_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class InventJournalData_Loss_RU extends InventJournalData_RU
{
    #InventJournalReport_Loss_RU

    CostAmount totalCostAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createXML</Name>
				<Source><![CDATA[
    public XmlDocument createXML(InventJournalReportId_RU  _reportId,
                                 JournalId                 _journalId,
                                 TransDate                 _transDate,
                                 OffSessionId_RU           _offsessionId)
    {
        InventJournalTrans inventJournalTrans;
        Set                locationNameSet  = new Set(Types::String),
                           ledgerAccountSet = new Set(Types::String);

        while select inventJournalTrans
            where inventJournalTrans.Qty        < 0 &&
                  inventJournalTrans.JournalId == _journalId &&
                  inventJournalTrans.TransDate == _transDate
        {
            this.setAddLocation(InventLocation::find(InventDim::find(inventJournalTrans.InventDimId).InventLocationId),
                                locationNameSet);

            this.setAdd(ledgerAccountSet, LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(this.getOffsetAccount(inventJournalTrans)));

            this.initInvoiceSection(inventJournalTrans);
            this.initInventTableSection(inventJournalTrans);
        }

        this.initPrologSection(_reportId, _transDate, _offsessionId, this.setGet(locationNameSet));

        this.initOffsessionSection(_offsessionId, OffPosition_RU::Chairman, #ChairManSection, #ChairmanTitle, #ChairmanName);
        this.initOffsessionSection(_offsessionId, OffPosition_RU::Member,   #MemberSection,   #MemberTitle,   #MemberName);
        this.initOffsessionSection(_offsessionId, OffPosition_RU::InCharge, #InChargeSection, #InChargeTitle, #InChargeName);

        this.initTotalsTxtSection(totalCostAmount);

        this.initFinalSection(MainAccount::getLocalizedNameByMainAccountId(this.setGet(ledgerAccountSet)));

        return xmlDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinePriceAndAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines line price and amount.
    /// </summary>
    /// <param name="_inventJournalTrans">
    /// <c>InventJournalTrans</c> record.
    /// </param>
    /// <returns>
    /// Container with line price and line amount.
    /// </returns>
    abstract protected container getLinePriceAndAmount(InventJournalTrans _inventJournalTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffsetAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines line offset account.
    /// </summary>
    /// <param name="_inventJournalTrans">
    /// <c>InventJournalTrans</c> record.
    /// </param>
    /// <returns>
    /// Line offset account.
    /// </returns>
    abstract protected LedgerDimensionDefaultAccount getOffsetAccount(InventJournalTrans _inventJournalTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFinalSection</Name>
				<Source><![CDATA[
    private void initFinalSection(AccountName _ledgerAccountName)
    {
        XmlElement  xmlElement = xmlDocument.createElement(#FinalSection);

        xmlElement.setAttribute(#Directive, "@GLS106730");
        xmlElement.setAttribute(#AccountName, _ledgerAccountName);

        xmlRootElement.appendChild(xmlElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTableSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills lines section of xml document with data
    /// </summary>
    /// <param name="_inventJournalTrans">
    /// InventJournalTrans which will be printed
    /// </param>
    /// <remarks>
    /// ItemName initialized from inventTable.ItemName and inventDimCombination.Name
    /// </remarks>
    private void initInventTableSection(InventJournalTrans _inventJournalTrans)
    {
        XmlElement      xmlElement  = xmlDocument.createElement(#InventTableSection);
        InventTable     inventTable = _inventJournalTrans.inventTable();
        Price           price;
        Amount          lineAmount;

        xmlElement.setAttribute(#ItemId,       inventTable.ItemId);
        xmlElement.setAttribute(#ItemName,     _inventJournalTrans.itemName());
        xmlElement.setAttribute(#BOMUnitId,    inventTable.inventUnitId());
        xmlElement.setAttribute(#CodeOkei,     UnitOfMeasure_RU::codeOKEI_RU(UnitOfMeasure::findBySymbol(inventTable.bomUnitId)));
        xmlElement.setAttribute(#QtyMultiples, strFmt("@GLS106745", abs(_inventJournalTrans.Qty)));
        xmlElement.setAttribute(#Weight,       strFmt("@GLS106745", inventTable.NetWeight));
        xmlElement.setAttribute(#GrossWeight,  strFmt("@GLS106745", abs(_inventJournalTrans.Qty) * inventTable.NetWeight));

        [price, lineAmount] = this.getLinePriceAndAmount(_inventJournalTrans);

        xmlElement.setAttribute(#PriceUnit,    strFmt("@GLS106745", price));
        xmlElement.setAttribute(#LineAmount,   strFmt("@GLS106745", lineAmount));
        xmlElement.setAttribute(#Remark, '');

        xmlRootElement.appendChild(xmlElement);

        totalCostAmount += abs(lineAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes invoice section of the report.
    /// </summary>
    /// <param name="_inventJournalTrans">
    /// <c>InventJournalTrans</c> record.
    /// </param>
    abstract protected void initInvoiceSection(InventJournalTrans _inventJournalTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOffsessionSection</Name>
				<Source><![CDATA[
    private void initOffsessionSection(OffSessionId_RU _offsessionId,
                                       OffPosition_RU  _position,
                                       str             _sectionName,
                                       str             _titleAttr,
                                       str             _nameAttr)
    {
        OfficialsTrans_RU officialsTrans;

        while select officialsTrans
            where officialsTrans.OffSessionId == _offsessionId &&
                  officialsTrans.ReportType   == offReportType &&
                  officialsTrans.Position     == _position
        {
            XmlElement xmlElement = xmlDocument.createElement(_sectionName);

            xmlElement.setAttribute(_titleAttr, officialsTrans.Title);
            xmlElement.setAttribute(_nameAttr,  officialsTrans.Name);

            xmlRootElement.appendChild(xmlElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrologSection</Name>
				<Source><![CDATA[
    private void initPrologSection(InventJournalReportId_RU _reportId,
                                   TransDate                _reportDate,
                                   OffSessionId_RU          _offsessionId,
                                   InventLocationName       _inventLocationName)
    {
        XmlElement          xmlElement  = xmlDocument.createElement(#PrologSection);
        CompanyInfo         companyInfo = CompanyInfo::find();
        OfficialsTrans_RU   officialsTrans;

        xmlElement.setAttribute(#OrderNum,     _reportId);
        xmlElement.setAttribute(#OrderDate,    strFmt("@GLS106745", _reportDate));
        xmlElement.setAttribute(#DocumentNum,  _reportId);
        xmlElement.setAttribute(#DocumentDate, strFmt("@GLS106745",_reportDate));
        xmlElement.setAttribute(#CompanyName,  companyInfo.name());
        xmlElement.setAttribute(#Department,   _inventLocationName);
        xmlElement.setAttribute(#OKPD,         CompanyInfoHelper::partyOKDPasOfDate_RU(companyInfo, _reportDate));
        xmlElement.setAttribute(#OKPO,         CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo, _reportDate));

        select firstonly officialsTrans
            where officialsTrans.OffSessionId == _offsessionId &&
                  officialsTrans.ReportType   == offReportType &&
                  officialsTrans.Position     == OffPosition_RU::Director;

        xmlElement.setAttribute(#BossTitle, officialsTrans.Title);
        xmlElement.setAttribute(#BossName, officialsTrans.Name);

        xmlRootElement.appendChild(xmlElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotalsTxtSection</Name>
				<Source><![CDATA[
    private void initTotalsTxtSection(CostAmount _totalAmount)
    {
        XmlElement xmlElement   = xmlDocument.createElement(#TotalsTxtSection);
        int        rAmount      = any2int(round(abs(_totalAmount), 0));
        int        cAmount      = any2int(frac(abs(_totalAmount)) * 100);

        RNumDateInWordConverter converter = RNumDateInWordConverter::construct(infolog.language());

        xmlElement.setAttribute(#TotalAmount, strFmt("@GLS106745",abs(_totalAmount)));
        xmlElement.setAttribute(#AmountRTxt,  converter.numeralsToTxt(rAmount));
        xmlElement.setAttribute(#AmountCTxt,  cAmount < 10 ? "@SYS24272" + int2str(cAmount) : int2str(cAmount));

        xmlRootElement.appendChild(xmlElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        offReportType  = InventJournalReport_RU::inventJournalReportType2OffReportType(InventJournalReportType_RU::Loss);
        xmlDocument    = XmlDocument::newBlank();
        xmlRootElement = xmlDocument.createElement(this.reportName());
        xmlDocument.appendChild(xmlRootElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportName</Name>
				<Source><![CDATA[
    private reportName reportName()
    {
        return classStr(InventJournalReport_Loss_RU);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
