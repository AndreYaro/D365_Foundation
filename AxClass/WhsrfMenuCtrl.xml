<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSRFMenuCtrl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsrfMenuCtrl</c> class is used to create tree control for RF menus.
/// </summary>
class WhsrfMenuCtrl
{
    FormTreeControl         tree;

    WHSRFMenuTable          menuTable;

    FormTreeControl         treeMenuStruct;
    FormTreeItem            treeItem;

    WHSSeqNum               nextSeqNum;
    WHSSeqNum               prevSeqNum;
    WHSSeqNum               currSeqNum;

    #WHSRF
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToMenu</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new menu item to the selected menu
    /// </summary>
    public void addToMenu()
    {
        WHSRFMenuLine   menuLine;
        WHSRFMenuLine   menuLineToUpdate;
        str             type;
        str             item;

        if (menuTable.MenuName
            && treeItem
            && treeItem.data())
        {
            ttsbegin;

            [type, item] = str2con(treeItem.data(), ',');

            // Move the other objects down one in the sequence
            while select forupdate menuLineToUpdate
                order by SeqNum desc
                where menuLineToUpdate.RefMenuName  == menuTable.MenuName
                    && menuLineToUpdate.SeqNum      >= nextSeqNum
            {
                ++menuLineToUpdate.SeqNum;
                menuLineToUpdate.update();
            }

            menuLine.RefMenuName = menuTable.MenuName;
            menuLine.SeqNum = nextSeqNum;

            if (type == #MenuItemCtrl) // MenuItem
            {
                menuLine.MenuItemName = item;
            }
            else
            {
                menuLine.MenuName = item;
            }

            if (!menuLine.validateWrite())
            {
                throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSRFMenuLine)));
            }
            else
            {
                menuLine.insert();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMenuItemInfo</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds menu item info.
	/// </summary>
	/// <param name="_menuLine">
	/// Menu line that represents a menu item or menu defined in system.
	/// </param>
	/// <returns>
	/// Menu item info.
	/// </returns>
    public str buildMenuItemInfo(WHSRFMenuLine _menuLine)
    {
        WHSRFMenuItemTable  menuItemTable = WHSRFMenuItemTable::find(_menuLine.MenuItemName);
        WHSRFMenuTable      locMenuTable;
        str                 ret;

        if (menuItemTable)  // Menu Item
        {
            ret = menuItemTable.MenuItemName;
        }
        else    // Menu
        {
            locMenuTable = WHSRFMenuTable::find(_menuLine.MenuName);
            ret = locMenuTable.MenuName;
        }

        if (_menuLine.Hidden && WHSRFMenuLineHiddenFlight::instance().isEnabled())
        {
            ret += ' ' + "@WAX:HiddenPostfix";
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNodes</Name>
				<Source><![CDATA[
    /// <summary>
	/// Builds menu line nodes on tree.
	/// </summary>
	/// <param name="_treeNode">
	/// Parent node.
	/// </param>
    /// <param name="_selectedMenuLine">
    /// The selected menu line; optional.
    /// </param>
    /// <returns>
    /// The index of the selected tree item.
    /// </returns>
    public TreeItemIdx buildNodes(TreeItemIdx _treeNode, WHSRFMenuLine _selectedMenuLine = null)
    {
        WHSRFMenuLine   menuLine;
        TreeItemIdx     selectedItemIdx;

        while select menuLine
            where menuLine.RefMenuName == menuTable.MenuName
        {
            var idx = SysFormTreeControl::addTreeItem(tree,
                                            this.buildMenuItemInfo(menuLine),
                                            _treeNode,
                                            strFmt('%1,%2', menuLine.RefMenuName, menuLine.SeqNum));

            if (menuLine.RecId == _selectedMenuLine.RecId)
            {
                selectedItemIdx = idx;
            }
        }

        return selectedItemIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTree</Name>
				<Source><![CDATA[
    /// <summary>
	/// Builds menu tree.
	/// </summary>
    /// <param name="_selectedMenuLine">
    /// The selected menu line.
    /// </param>
    /// <returns>
    /// The index of the selected tree item.
    /// </returns>
    public TreeItemIdx buildTree(WHSRFMenuLine _selectedMenuLine = null)
    {
        TreeItemIdx     rootItemIdx;
        TreeItemIdx     selectedItemIdx;

        tree.deleteAll();

        if (menuTable)
        {
            rootItemIdx = SysFormTreeControl::addTreeItem(tree,
                                                          menuTable.MenuName,
                                                          FormTreeAdd::Root,
                                                          menuTable.MenuName);

            selectedItemIdx = this.buildNodes(rootItemIdx, _selectedMenuLine);

            SysFormTreeControl::expandTree(tree, tree.getRoot(), 3);
        }

        return selectedItemIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delFromMenu</Name>
				<Source><![CDATA[
    /// <summary>
	/// Deletes a menu line from tree.
	/// </summary>
	/// <param name="_data">
	/// Menu line data.
	/// </param>
    public void delFromMenu(str _data)
    {
        WHSRFMenuLine   menuLine;
        WHSMenuName     menuName;
        WHSSeqNum       seqNum;

        [menuName, seqNum] = str2con(_data, ',');

        if (menuName && seqNum)
        {
            delete_from menuLine
                where menuLine.RefMenuName   == menuName &&
                      menuLine.SeqNum        == seqNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentSeqNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sequence number of the currently selected menu item
    /// </summary>
    /// <returns>
    /// Returns the sequence number of the currently selected item
    /// </returns>
    private WHSSeqNum getCurrentSeqNum()
    {
        if (WhsRFMenuCtrlUseDataInsteadOfTextFlight::instance().isEnabled())
        {
            WHSMenuName treeItemMenuName;
            WHSSeqNum treeItemSeqNum;
            [treeItemMenuName, treeItemSeqNum] = str2con(treeItem.data());

            return treeItemSeqNum;
        }
        else
        {
            return (select firstonly SeqNum from whsrfMenuLine
                    where whsrfMenuLine.RefMenuName     == menuTable.MenuName
                        && (whsrfMenuLine.MenuItemName  == treeItem.text()
                        ||  whsrfMenuLine.MenuName      == treeItem.text())).SeqNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrevSeqNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the previous sequence number based on the drop location of a given menu item
    /// </summary>
    /// <returns>
    /// Returns the previous sequence number
    /// </returns>
    private WHSSeqNum getPrevSeqNum()
    {
        return (select firstonly SeqNum from whsrfMenuLine
                    order by SeqNum desc
                    where whsrfMenuLine.RefMenuName == menuTable.MenuName
                        && whsrfMenuLine.SeqNum     <  nextSeqNum).SeqNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRFMenuTable</Name>
				<Source><![CDATA[
    public WHSRFMenuTable parmRFMenuTable(WHSRFMenuTable _menuTable = menuTable)
    {
        menuTable = _menuTable;

        return menuTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTree</Name>
				<Source><![CDATA[
    public FormTreeControl parmTree(FormTreeControl _tree = tree)
    {
        tree = _tree;

        return tree;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTreeItem</Name>
				<Source><![CDATA[
    public FormTreeItem parmTreeItem(FormTreeItem _treeItem = treeItem)
    {
        treeItem = _treeItem;

        return treeItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTreeMenuStruct</Name>
				<Source><![CDATA[
    public FormTreeControl parmTreeMenuStruct(FormTreeControl _treeMenuStruct = treeMenuStruct)
    {
        treeMenuStruct = _treeMenuStruct;

        return treeMenuStruct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>positionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not the menu item has changed position in the tree
    /// </summary>
    /// <returns>
    /// Returns a boolean value indicating whether or not the menu item has changed position on the menu
    /// </returns>
    public boolean positionChanged()
    {
        boolean ret;

        prevSeqNum = this.getPrevSeqNum();
        currSeqNum = this.getCurrentSeqNum();

        if (currSeqNum < prevSeqNum || currSeqNum > nextSeqNum)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reorderMenu</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reorders the selected RF menu
    /// </summary>
    public void reorderMenu()
    {
        WHSRFMenuLine   menuLine;
        WHSRFMenuLine   menuLineToUpdate;
        WHSSeqNum       seqNum;

        if (menuTable.MenuName)
        {
            seqNum = currSeqNum;

            // Move the other objects down one in the sequence
            ttsbegin;

            while select forupdate menuLineToUpdate
                order by SeqNum desc
                where menuLineToUpdate.RefMenuName  == menuTable.MenuName
                    && menuLineToUpdate.SeqNum      >= nextSeqNum
            {
                if (seqNum == menuLineToUpdate.SeqNum)
                {
                    seqNum++;
                }

                ++menuLineToUpdate.SeqNum;
                menuLineToUpdate.update();
            }

            // Update the sequence number of the current item in the list
            menuLine = WHSRFMenuLine::find(menuTable.MenuName, seqNum, true);

            if (menuLine)
            {
                menuLine.SeqNum = nextSeqNum;
                menuLine.update();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextSeqNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the next sequence number based on the drop location of a given menu item
    /// </summary>
    /// <param name="_idx">
    /// The drop location in the tree
    /// </param>
    public void setNextSeqNum(TreeItemIdx _idx)
    {
        TreeItemIdx nextIdx;

        // Get the index of the next item in the list
        nextIdx = treeMenuStruct.getNextSibling(_idx);

        if (nextIdx && treeMenuStruct.getParent(_idx))
        {
            if (WhsRFMenuCtrlUseDataInsteadOfTextFlight::instance().isEnabled())
            {
                WHSMenuName menuName;
                [menuName, nextSeqNum] = str2con(treeMenuStruct.getItem(nextIdx).data());
            }
            else
            {
                nextSeqNum = (select firstonly SeqNum from whsrfMenuLine
                              where whsrfMenuLine.RefMenuName       == menuTable.MenuName
                                  && (whsrfMenuLine.MenuItemName    == treeMenuStruct.getItem(nextIdx).text()
                                  ||  whsrfMenuLine.MenuName        == treeMenuStruct.getItem(nextIdx).text())).SeqNum;
            }
        }
        // Item was added to the very end of the list or item was dropped in the whitespace and not on anything
        else if (treeMenuStruct.getParent(_idx) || !_idx)
        {
            nextSeqNum = (select firstonly whsrfMenuLine
                              order by SeqNum desc
                              where whsrfMenuLine.RefMenuName   == menuTable.MenuName).SeqNum + 1;
        }
        // This item was dropped on the parent node so add to top of list
        else
        {
            nextSeqNum = 1;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>