<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GeneralLedgerAdjustmentDisplayFormFilterManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles filtering for implementations of <c>GeneralLedgerAdjustmentIDisplayProposedAdjustments</c> that display adjustment data.
/// </summary>
internal final class GeneralLedgerAdjustmentDisplayFormFilterManager
{
    private GeneralLedgerAdjustmentIDisplayProposedAdjustments adjustmentDisplay;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>newForAdjustmentDisplay</Name>
				<Source><![CDATA[
    internal static GeneralLedgerAdjustmentDisplayFormFilterManager newForAdjustmentDisplay(GeneralLedgerAdjustmentIDisplayProposedAdjustments _adjustmentDisplay)
    {
        GeneralLedgerAdjustmentDisplayFormFilterManager formFilterManager = new GeneralLedgerAdjustmentDisplayFormFilterManager();
        formFilterManager.adjustmentDisplay = _adjustmentDisplay;

        return formFilterManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDefaultFilteringOnAdjustmentsDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies default filtering on the adjustment display data source, ensuring the filtering on the initial form reflects the 
    /// data initialzied in the adjustment display form context.
    /// </summary>
    internal void applyDefaultFilteringOnAdjustmentsDataSource()
    {
        GeneralLedgerAdjustmentDisplayFormContext formContext = adjustmentDisplay.getAdjustmentDisplayFormContext();

        GeneralLedgerAdjustmentImportInfo importContext = formContext.parmImportInfo();
        DataAreaId companyContext = formContext.parmCompany();
        GeneralLedgerAdjustmentResultFilter statusContext = formContext.parmAdjustmentStatus();

        QueryBuildDataSource adjustmentQbds = this.getAdjustmentDataSourceFromAdjustmentDisplay();

        // Filter data fix results to only show those that belong to the current import context
        QueryBuildRange adjustmentImportRange = adjustmentQbds.addRange(fieldNum(GeneralLedgerAdjustmentProposedAdjustment, ImportInfoRecId));
        adjustmentImportRange.value(SysQuery::value(importContext.RecId));

        // Filter data fix results to only show those that belong to the selected company on the form
        QueryBuildRange adjustmentCompanyRange = adjustmentQbds.addRange(fieldNum(GeneralLedgerAdjustmentProposedAdjustment, VoucherDataAreaId));
        adjustmentCompanyRange.value(companyContext);

        // Default form only shows proposed adjustments, so filter out any adjustments that have already been sent to an adjustment journal
        QueryBuildRange adjustmentJournalRange = adjustmentQbds.addRange(fieldNum(GeneralLedgerAdjustmentProposedAdjustment, AdjustmentJournalNumber));
        this.updateAdjustmentJournalRangeForAdjustmentStatus(adjustmentJournalRange, statusContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterForSelectedImportContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates adjustment display data source filtering in response to a newly selected import of adjustments.
    /// </summary>
    /// <param name = "_importInfo">The newly selected import.</param>
    internal void filterForSelectedImportContext(GeneralLedgerAdjustmentImportInfo _importInfo)
    {
        QueryBuildDataSource adjustmentQbds = this.getAdjustmentDataSourceFromAdjustmentDisplay();

        // Update the import range on the adjustment datasource to reflect the newly selected import filter
        QueryBuildRange adjustmentImportRange = adjustmentQbds.findRange(fieldNum(GeneralLedgerAdjustmentProposedAdjustment, ImportInfoRecId));
        adjustmentImportRange.value(SysQuery::value(_importInfo.RecId));

        this.AdjustmentDataSourceExecuteQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterForSelectedCompanyContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates adjustment display data source filtering in response to a selected company.
    /// </summary>
    /// <param name = "_company">The newly selected company filter.</param>
    internal void filterForSelectedCompanyContext(DataAreaId _company)
    {
        QueryBuildDataSource adjustmentQbds = this.getAdjustmentDataSourceFromAdjustmentDisplay();
                
        // Update the company range on the adjustment data source to reflect the newly selected company filter
        QueryBuildRange adjustmentCompanyRange = adjustmentQbds.findRange(fieldNum(GeneralLedgerAdjustmentProposedAdjustment, VoucherDataAreaId));
        adjustmentCompanyRange.value(_company);

        this.AdjustmentDataSourceExecuteQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterForSelectedAdjustmentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates adjustment display data source filtering in response to a selected adjustment status filter.
    /// </summary>
    /// <param name = "_status">The newly selected adjustment status.</param>
    internal void filterForSelectedAdjustmentStatus(GeneralLedgerAdjustmentResultFilter _status)
    {
        QueryBuildDataSource adjustmentQbds = this.getAdjustmentDataSourceFromAdjustmentDisplay();
        QueryBuildRange adjustmentJournalRange = adjustmentQbds.findRange(fieldNum(GeneralLedgerAdjustmentProposedAdjustment, AdjustmentJournalNumber));

        // Update the AdjustmentJournalNum range on the data fix results according to the selected filter
        this.updateAdjustmentJournalRangeForAdjustmentStatus(adjustmentJournalRange, _status);
        this.AdjustmentDataSourceExecuteQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAdjustmentJournalRangeForAdjustmentStatus</Name>
				<Source><![CDATA[
    private void updateAdjustmentJournalRangeForAdjustmentStatus(QueryBuildRange _adjustmentJournalRange, GeneralLedgerAdjustmentResultFilter _status)
    {
        if (_status == GeneralLedgerAdjustmentResultFilter::All)
        {
            // If filtering for all adjustments, leave the range wide open
            _adjustmentJournalRange.value(SysQuery::valueUnlimited());
        }
        else if (_status == GeneralLedgerAdjustmentResultFilter::Proposed)
        {
            // If filtering for proposed adjustments, look for only adjustments with an empty journal field
            _adjustmentJournalRange.value(SysQuery::valueEmptyString());
        }
        else if (_status == GeneralLedgerAdjustmentResultFilter::SentToJournal)
        {
            // If filtering for adjustments sent to a journal, look for adjustments with a journal specified
            _adjustmentJournalRange.value(SysQuery::valueNotEmptyString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustmentDataSourceFromAdjustmentDisplay</Name>
				<Source><![CDATA[
    private QueryBuildDataSource getAdjustmentDataSourceFromAdjustmentDisplay()
    {
        FormDataSource adjustmentsDataSource = adjustmentDisplay.getAdjustmentsDataSource();
        return adjustmentsDataSource.queryBuildDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>AdjustmentDataSourceExecuteQuery</Name>
				<Source><![CDATA[
    private void AdjustmentDataSourceExecuteQuery()
    {
        FormDataSource adjustmentsDataSource = adjustmentDisplay.getAdjustmentsDataSource();
        adjustmentsDataSource.executeQuery();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>