<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NonSSRSPrintMgmtPromptExtensionParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Parameters for Non-SSRS printing extensions.
/// </summary>
/// <remarks>
///  Extensions can add their parameters by key after asking user to fill in and later get them when 
///  printing is being done.
/// </remarks>
public class NonSSRSPrintMgmtPromptExtensionParameters implements SysPackable
{
    Map parameterByKey = new Map(Types::String, Types::Class);
    const int CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Add a parameter by key.
    /// </summary>
    /// <param name = "_key">Key should be unique through extensions, so use some specific to extension class name for that.</param>
    /// <param name = "_value">A parameter.</param>
    public void add(str _key, SysPackable _value)
    {
        parameterByKey.insert(_key, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>get</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return parameter by key.
    /// </summary>
    /// <param name = "_key">A key to identify particular parameter.</param>
    /// <returns>A parameter or null if it does not exist.</returns>
    public SysPackable get(str _key)
    {
        return parameterByKey.exists(_key) ? 
            parameterByKey.lookup(_key) : 
            null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Returns true, if no items exist.
    /// </summary>
    /// <returns>True, if no items exist; otherwise - false.</returns>
    public boolean isEmpty()
    {
        return parameterByKey.empty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, parameterByKey.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packed)
    {
        var ret = false;
        var packedVersion = RunBase::getVersion(_packed);
        if (packedVersion == CurrentVersion)
        {
            container packedParameterByKey;
            [packedVersion, packedParameterByKey] = _packed;
            var newValue = Map::create(packedParameterByKey);
            if (newValue)
            {
                ret = true;
                parameterByKey = newValue;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPacked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>NonSSRSPrintMgmtPromptExtensionParameters</c> class from the packed values.
    /// </summary>
    /// <param name="_packed">
    /// The packed values.
    /// </param>
    /// <returns>The new instance of the <c>NonSSRSPrintMgmtPromptExtensionParameters</c> class from the packed values.</returns>
    [Hookable(false)]
    public static NonSSRSPrintMgmtPromptExtensionParameters newFromPacked(container _packed)
    {
        NonSSRSPrintMgmtPromptExtensionParameters extensionsSettings = new NonSSRSPrintMgmtPromptExtensionParameters();

        if (extensionsSettings.unpack(_packed))
        {
            return extensionsSettings;
        }

        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>