<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysDataSharingApplicationSuiteTableDataEventContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>SysDataSharingApplicationSuiteTableDataEventContext</c> is used to transfer context related to table events dor cross company data sharing.
/// </summary>
internal final class SysDataSharingApplicationSuiteTableDataEventContext implements System.IDisposable
{
    private static SysDataSharingApplicationSuiteTableDataEventContext instance;

    private Set companyList = new Set(Types::String);
    private TableName tableName;
    private DataEventType dataEventType;
    private boolean validateWriteState;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dispose</Name>
				<Source><![CDATA[
    public void dispose()
    {
        instance = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        if (instance)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        instance = this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static SysDataSharingApplicationSuiteTableDataEventContext construct()
    {
        return new SysDataSharingApplicationSuiteTableDataEventContext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTableEvent</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static SysDataSharingApplicationSuiteTableDataEventContext newTableEvent(TableName _tableName, DataEventType _dataEventType)
    {
        SysDataSharingApplicationSuiteTableDataEventContext context = SysDataSharingApplicationSuiteTableDataEventContext::construct();
        context.tableName = _tableName;
        context.dataEventType = _dataEventType;
        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static SysDataSharingApplicationSuiteTableDataEventContext current(TableName _tableName, DataEventType _dataEventType)
    {
        if (instance && instance.tableName == _tableName && instance.dataEventType == _dataEventType)
        {
            return instance;
        }

        Debug::assert(instance == null);
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessedCompanies</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Set parmProcessedCompanies()
    {
        return instance.companyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidateWriteState</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmValidateWriteState(boolean _validateWriteState = validateWriteState)
    {
        validateWriteState = _validateWriteState;
        return validateWriteState;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>