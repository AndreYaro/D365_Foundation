<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementSourceDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankStatementSourceDocument</c> is source document from bank statement.
/// </summary>
[SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_BankStatement), SourceDocument_BankStatement::BankStatement, tableStr(BankStmtISOAccountStatement))]
class BankStatementSourceDocument extends SourceDocument
implements SourceDocumentIBank, SourceDocumentILineVoucher
{
    BankStmtISOAccountStatement bankStatement;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets documents business event.
    /// </summary>
    /// <returns>
    /// The instance of the <c>BusinessEvent</c> class.
    /// </returns>
    public BusinessEvent documentsBusinessEvent()
    {
        return new BusinessEvent(enumnum(BusinessEvent_BankStatement), BusinessEvent_BankStatement::Reconciliation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    protected void initializeImplementation(SourceDocumentHeaderImplementation _sourceDocumentImplementation)
    {
        bankStatement = _sourceDocumentImplementation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        return bankStatement.getAccountingDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankAccount</Name>
				<Source><![CDATA[
    public CompanyBankAccount parmBankAccount()
    {
        return bankStatement.BankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBusinessEventDate</Name>
				<Source><![CDATA[
    public DocumentDate parmBusinessEventDate()
    {
        DocumentDate ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentVoucher</Name>
				<Source><![CDATA[
    public Voucher parmCurrentVoucher(DataAreaId _dataAreaId)
    {
        return bankStatement.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmDefaultDimension()
    {
        return bankStatement.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentNumber</Name>
				<Source><![CDATA[
    public DocumentNum parmDocumentNumber()
    {
        return bankStatement.Identification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentLineVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current line voucher number.
    /// </summary>
    /// <param name = "_accountingEvent">
    /// Accounting event details.
    /// </param>
    /// <returns>
    /// Voucher number for the statement line.
    /// </returns>
    public Voucher parmCurrentLineVoucher(AccountingEvent _accountingEvent)
    {
        Voucher voucher = bankStatement.Voucher;

        if (!voucher)
        {
            BankStmtISOReportEntry statementLine;
            AccountingDistribution accountingDistribution;

            select firstonly Voucher from statementLine
                exists join accountingDistribution
                    where accountingDistribution.SourceDocumentLine == statementLine.SourceDocumentLine
                        && accountingDistribution.AccountingEvent == _accountingEvent.RecId;

            voucher = statementLine.Voucher;
        }

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineVouchers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets map containing voucher numbers.
    /// </summary>
    /// <returns>
    /// Map with voucher numbers.
    /// </returns>
    public Map parmLineVouchers()
    {
        return new Map(Types::String, Types::String);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>