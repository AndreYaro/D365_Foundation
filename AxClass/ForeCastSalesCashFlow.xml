<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ForecastSalesCashFlow</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>ForecastSalesCashFlow</c> class is the implementation between forecasted sales and cash flow.
/// </summary>
[ExportMetadata(classStr(LedgerCovIDocument), 'ForecastSales'), ExportAttribute('Dynamics.AX.Application.LedgerCovIDocument')]
public class ForecastSalesCashFlow implements LedgerCovIDocument, LedgerCovIDocumentSingleTransactionScope
{
    private LedgerCovContext ledgerCovContext;
    private SysInstrumentationProgressLogger progressLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateCashFlow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates cash flow.
    /// </summary>
    /// <param name = "_allNew">
    /// Identifies when cash flow is generated for only new documents or all documents.
    /// </param>
    public void generateCashFlow(AllNew _allNew)
    {
        this.init();

        if (LedgerCovDocumentSingleTransactionScopeKillSwitchFlight::isEnabled())
        {
            this.generateCashFlowSetBased(_allNew);
        }
        else
        {
            this.generateCashFlowForProcessSet(_allNew);
            this.deleteCompletedRows();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCashFlowForProcessSet</Name>
				<Source><![CDATA[
    private void generateCashFlowForProcessSet(AllNew _allNew)
    {
        const int SetSize = 1000;

        RecId lastRecId;
        RecId fromRecId;
        RecId toRecId;

        Query countByRecIdQuery = this.buildRecIdQuery(_allNew);
        QueryRun countByRecIdQueryRun = new QueryRun(countByRecIdQuery);
        int i = 0;

        while (countByRecIdQueryRun.next())
        {
            i++;

            ForecastSales forecastSales = countByRecIdQueryRun.get(tableNum(ForecastSales));

            RecId currentRecId = forecastSales.RecId;

            if (i == 1)
            {
                fromRecId = currentRecId;
            }

            if (i == SetSize)
            {
                toRecId = currentRecId;

                this.processCashFlowForProcessSet(_allNew, fromRecId, toRecId);

                i = 0;
                fromRecId = 0;
                toRecId = 0;
            }

            lastRecId = currentRecId;
        }

        if (i > 0 )
        {
            toRecId = lastRecId;

            this.processCashFlowForProcessSet(_allNew, fromRecId, toRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCashFlowForProcessSet</Name>
				<Source><![CDATA[
    private void processCashFlowForProcessSet(AllNew _allNew,  RecId _fromRecId, RecId _toRecId)
    {
        #OCCRetryCount
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::ActivityNameCashFlowSalesForecast))
        {
            System.Exception exception;
            RecId forecastSalesRecId;
            try
            {
                ForecastSales forecastSales;

                ttsbegin;

                LedgerCoverage ledgerCoverage = LedgerCoverage::construct(forecastSales, NoYes::Yes);

                Query q = this.buildGenerateCashFlowQueryForSet(_allNew, _fromRecId, _toRecId);

                QueryRun qr = new QueryRun(q);
                while (qr.next())
                {
                    forecastSales = qr.get(tableNum(ForecastSales));
                    forecastSalesRecId = forecastSales.RecId;
                    forecastSales.updateLedgerCov(ledgerCoverage);
                }

                LedgerCov::deleteForTransTableIdAndFilter(tableNum(ForecastSales), ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                ledgerCoverage.insertDatabase();

                LedgerCovDocument::deleteForTransTableIdAndFilter(tableNum(ForecastSales), ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                this.insertLedgerCovDocumentRows(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                this.updateForecastSalesCovStatus(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }

            #StandardRetryCatchBlock

            catch (exception)
            {
                this.logProcessExecutionMessage(Exception::Error, strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedError", this.getDocumentName(), this.getDocumentNum(tableNum(ForecastSales), forecastSalesRecId), exception.Message));
                progressLogger.logError(strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedErrorLocked", identifierStr(ForecastSales), forecastSalesRecId, exception.Message));

                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGenerateCashFlowQueryForSet</Name>
				<Source><![CDATA[
    private Query buildGenerateCashFlowQueryForSet(AllNew _allNew, RecId _fromRecId, RecId _toRecId)
    {
        Query query = this.buildGenerateCashFlowQuery(_allNew);
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(ForecastSales));

        QueryBuildRange qbr = SysQuery::findOrCreateRange(qbds, fieldNum(ForecastSales, RecId));
        qbr.value(SysQuery::range(_fromRecid, _toRecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRecIdQuery</Name>
				<Source><![CDATA[
    private Query buildRecIdQuery(AllNew _allNew)
    {
        Query query = this.buildGenerateCashFlowQuery(_allNew);

        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(ForecastSales));

        qbds.addSelectionField(fieldNum(ForecastSales, RecId));
        qbds.addOrderByField(fieldNum(ForecastSales, RecId), SortOrder::Ascending);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        progressLogger = this.createProgressLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerCovContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initLedgerCovContext(LedgerCovContext _ledgerCovContext)
    {
        this.ledgerCovContext = _ledgerCovContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProgressLogger</Name>
				<Source><![CDATA[
    private SysInstrumentationProgressLogger createProgressLogger()
    {
        return SysInstrumentationProgressLogger::createLogger(CustVendInstrumentationConstants::SourceNameCashFlowForecasting, CustVendInstrumentationConstants::InstrumentationNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessExecutionMessage</Name>
				<Source><![CDATA[
    private void logProcessExecutionMessage(Exception _exceptionType, SysInfoLogStr _message, URL _helpUrl = '', SysInfoAction _sysInfoAction = null)
    {
        if (ledgerCovContext != null && ledgerCovContext.parmProcessExecutionSourceLinkRecId() != 0)
        {
            ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::construct();
            messageLogItem.parmException(_exceptionType);
            messageLogItem.parmProcessExecutionSourceLink(ledgerCovContext.parmProcessExecutionSourceLinkRecId());
            messageLogItem.parmMessage(_message);

            ProcessExecutionMessageLog::insertMessage(messageLogItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findForecastSalesRecIds</Name>
				<Source><![CDATA[
    private TmpDataAreaRecIdFilter findForecastSalesRecIds()
    {
        ForecastSales forecastSales;
        ForecastModel forecastModel;
        TmpDataAreaRecIdFilter filter;

        insert_recordset filter(RefRecId)
            select RecId
            from forecastSales
                where forecastSales.ExpandId == 0
                    && forecastSales.Report == NoYes::Yes
                    && forecastSales.Active == NoYes::Yes
                    && forecastSales.Cov == NoYes::Yes
                join forecastModel
                    where forecastSales.ModelId == forecastModel.ModelId
                        && forecastSales.ModelId == forecastModel.SubModelId
                        && forecastModel.Type == HeadingSub::Heading
                        && forecastModel.Cov == NoYes::Yes;

        return filter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedRows</Name>
				<Source><![CDATA[
    private void deleteCompletedRows()
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            TmpDataAreaRecIdFilter validFilter = this.findForecastSalesRecIds();
            this.deleteCompletedLedgerCovRows(validFilter);
            this.deleteCompletedLedgerCovDocumentRows(validFilter);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                sleep(xSession::currentRetryCount() * backOffWait);
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }

        #StandardRetryCatchBlock
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedLedgerCovRows</Name>
				<Source><![CDATA[
    private void deleteCompletedLedgerCovRows(TmpDataAreaRecIdFilter _validFilter)
    {
        LedgerCov ledgerCov;

        delete_from ledgerCov
            where ledgerCov.TransTableId == tableNum(ForecastSales)
                notexists join _validFilter
                    where ledgerCov.TransRecId == _validFilter.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void deleteCompletedLedgerCovDocumentRows(TmpDataAreaRecIdFilter _validFilter)
    {
        LedgerCovDocument ledgerCovDocument;

        delete_from ledgerCovDocument
            where ledgerCovDocument.TransTableId == tableNum(ForecastSales)
                notexists join _validFilter
                    where ledgerCovDocument.TransRecId == _validFilter.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCashFlowSetBased</Name>
				<Source><![CDATA[
    private void generateCashFlowSetBased(AllNew _allNew)
    {
        #OCCRetryCount
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::ActivityNameCashFlowSalesForecast))
        {
            System.Exception exception;
            RecId forecastSalesRecId;
            try
            {
                ForecastSales forecastSales;

                ttsbegin;

                LedgerCoverage ledgerCoverage = LedgerCoverage::construct(forecastSales, NoYes::Yes);

                Query q = this.buildGenerateCashFlowQuery(_allNew);
                QueryRun qr = new QueryRun(q);
                while (qr.next())
                {
                    forecastSales = qr.get(tableNum(ForecastSales));
                    forecastSalesRecId = forecastSales.RecId;
                    forecastSales.updateLedgerCov(ledgerCoverage);
                }

                this.deleteLedgerCovRows(_allNew, ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                ledgerCoverage.insertDatabase();

                this.deleteLedgerCovDocumentRows(_allNew, ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                this.insertLedgerCovDocumentRows(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                this.updateForecastSalesCovStatus(ledgerCoverage.parmUpdatedCashFlowDocumentRows());

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }

            #StandardRetryCatchBlock

            catch (exception)
            {
                this.logProcessExecutionMessage(Exception::Error, strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedError", this.getDocumentName(), this.getDocumentNum(tableNum(ForecastSales), forecastSalesRecId), exception.Message));
                progressLogger.logError(strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedErrorLocked", identifierStr(ForecastSales), forecastSalesRecId, exception.Message));

                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForecastSalesCovStatus</Name>
				<Source><![CDATA[
    private void updateForecastSalesCovStatus(TmpDataAreaRecIdFilter _updatedForecastSalesRows)
    {
        ForecastSales forecastSales;

        forecastSales.skipDataMethods(true);
        forecastSales.skipDatabaseLog(true);
        forecastSales.skipEvents(true);

        update_recordset forecastSales
            setting CovStatus = 1
            exists join _updatedForecastSalesRows
                where forecastSales.RecId == _updatedForecastSalesRows.RefRecId
                    && _updatedForecastSalesRows.RefTableId == tableNum(ForecastSales)
                    && _updatedForecastSalesRows.RefDataAreaId == curExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedgerCovRows</Name>
				<Source><![CDATA[
    private void deleteLedgerCovRows(AllNew _allNew, TmpDataAreaRecIdFilter _filter)
    {
        if (_allNew == AllNew::Total)
        {
            LedgerCov::deleteForTransTableId(tableNum(ForecastSales));
        }
        else
        {
            LedgerCov::deleteForTransTableIdAndFilter(tableNum(ForecastSales), _filter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void deleteLedgerCovDocumentRows(AllNew _allNew, TmpDataAreaRecIdFilter _filter)
    {
        if (_allNew == AllNew::Total)
        {
            LedgerCovDocument::deleteForTransTableId(tableNum(ForecastSales));
        }
        else
        {
            LedgerCovDocument::deleteForTransTableIdAndFilter(tableNum(ForecastSales), _filter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void insertLedgerCovDocumentRows(TmpDataAreaRecIdFilter _filter)
    {
        LedgerCovDocument ledgerCovDocument;
        ForecastSales forecastSales;
        CustTable custTable;
        DirPartyTable dirPartyTable;

        TableId forecastSalesTableId = tableNum(ForecastSales);
        LedgerCovDocumentType type = LedgerCovDocumentType::ForecastSales;
        Voucher voucher;
        DueDate dueDate;
        CurrencyCode accountingCurrency = Ledger::accountingCurrency();

        insert_recordset ledgerCovDocument
            (TransTableId,
            TransRecId,
            TransDate,
            Type,
            AccountingCurrency,
            Number,
            Voucher,
            AccountNumber,
            DueDate,
            AccountName)
            select forecastSalesTableId,
                RecId,
                StartDate,
                type,
                accountingCurrency,
                ItemId,
                voucher,
                CustAccountId,
                dueDate
                from forecastSales
            join _filter
                where forecastSales.TableId == _filter.RefTableId
                    && forecastSales.RecId == _filter.RefRecId
                    && forecastSales.CustAccountId != ''
            join custTable
                where custTable.AccountNum == forecastSales.CustAccountId
            join Name
                from dirPartyTable
                    where dirPartyTable.RecId == custTable.Party;

        insert_recordset ledgerCovDocument
            (TransTableId,
            TransRecId,
            TransDate,
            Type,
            AccountingCurrency,
            Number,
            Voucher,
            AccountNumber,
            DueDate)
            select forecastSalesTableId,
                RecId,
                StartDate,
                type,
                accountingCurrency,
                ItemId,
                voucher,
                CustAccountId,
                dueDate
                from forecastSales
            join _filter
                where forecastSales.TableId == _filter.RefTableId
                    && forecastSales.RecId == _filter.RefRecId
                    && forecastSales.CustAccountId == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGenerateCashFlowQuery</Name>
				<Source><![CDATA[
    private Query buildGenerateCashFlowQuery(AllNew _allNew)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(ForecastSales));
       
        qbds.addRange(fieldNum(ForecastSales, ExpandId)).value(queryValue(0));
        qbds.addRange(fieldNum(ForecastSales, Report)).value(queryValue(NoYes::Yes));
        qbds.addRange(fieldNum(ForecastSales, Active)).value(queryValue(NoYes::Yes));
        qbds.addRange(fieldNum(ForecastSales, Cov)).value(queryValue(NoYes::Yes));

        if (_allNew == AllNew::New)
        {
            qbds.addRange(fieldNum(ForecastSales, CovStatus)).value(queryValue(0));
        }

        QueryBuildDataSource qbdsModel = qbds.addDataSource(tableNum(ForecastModel));
        qbdsModel.addLink(fieldNum(ForecastSales, ModelId), fieldNum(ForecastModel, ModelId));
        qbdsModel.addLink(fieldNum(ForecastSales, ModelId), fieldNum(ForecastModel, SubModelId));
        qbdsModel.addRange(fieldNum(ForecastModel, Type)).value(queryValue(HeadingSub::Heading));
        qbdsModel.addRange(fieldNum(ForecastModel, Cov)).value(queryValue(NoYes::Yes));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentName</Name>
				<Source><![CDATA[
    /// <summary>
    /// The document name.
    /// </summary>
    /// <returns>The document name.</returns>
    public str getDocumentName()
    {
        return "@SYS15056";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// The number of the document.
    /// </summary>
    /// <param name = "_tableId">Identifies the document table.</param>
    /// <param name = "_recId">Identifies the row of the document.</param>
    /// <returns>The number of the document.</returns>
    public Name getDocumentNum(TableId _tableId, RecId _recId)
    {
        Name documentNum;

        if (_tableId == tableNum(ForecastSales))
        {
            ForecastSales forecastSales;

            select firstonly forecastSales
                where forecastSales.RecId == _recId;

            documentNum = forecastSales.ItemId;
        }

        return documentNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>