<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkUserSessionStateFacade</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides an abstraction over the work user session state (Mode, Step, Pass, XML, error log, etc.)
/// </summary>
public class WHSWorkUserSessionStateFacade
{
    protected WHSWorkUserSession workUserSession;
    protected WHSWorkUserSessionState sessionState;
    protected boolean creatingNewSession;

    private WHSWorkExecuteMode mode;
    private WHSWorkExecuteStep step;
    private WHSWorkExecutePassThrough pass;
    private WHSWorkUserSessionStateCheck sessionStateCheck;
    private WHSRFErrorLog errorLog;
    private XML sessionXml;
    private WHSPrevPass prevPass;

    private container changedFields;
    private boolean populatedFieldsFlight;

    #WHSRF
    #WHSWorkExecuteControlElements

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWorkUserSession</Name>
				<Source><![CDATA[
    private void initFromWorkUserSession(WHSWorkUserSession _workUserSession, boolean _forUpdate)
    {
        workUserSession = _workUserSession;
        workUserSession.selectForUpdate(_forUpdate);

        creatingNewSession = workUserSession.RecId == 0;

        if (creatingNewSession)
        {
            sessionState.initValue();
        }
        else
        {
            sessionState = WHSWorkUserSessionState::findCurrent(_workUserSession.RecId, _forUpdate);
        }

        this.setFieldsFromWorkUserSessionState(sessionState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsFromWorkUserSessionState</Name>
				<Source><![CDATA[
    protected void setFieldsFromWorkUserSessionState(WHSWorkUserSessionState _sessionState)
    {
        this.parmMode(_sessionState.WorkExecuteMode);
        this.parmStep(_sessionState.WorkExecuteStep);
        this.parmPass(_sessionState.WorkExecutePassThrough);
        this.parmSessionStateCheck(_sessionState.SessionStateCheck);
        this.parmErrorLog(_sessionState.RFErrorLog);
        this.parmXml(_sessionState.XML);
        this.parmPrevPass(_sessionState.PrevPass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsFromWorkUserSession</Name>
				<Source><![CDATA[
    [SysObsolete('Use setFieldsFromWorkUserSessionState() instead.', false, 31\10\2022)]
    protected void setFieldsFromWorkUserSession(WHSWorkUserSession _workUserSession)
    {
        this.parmMode(_workUserSession.WorkExecuteMode);
        this.parmStep(_workUserSession.WorkExecuteStep);
        this.parmPass(_workUserSession.WorkExecutePassThrough);
        this.parmSessionStateCheck(_workUserSession.SessionStateCheck);
        this.parmErrorLog(_workUserSession.RFErrorLog);
        this.parmXml(_workUserSession.XML);
        this.parmPrevPass(_workUserSession.PrevPass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkUserSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSWorkUserSessionStateFacade newFromWorkUserSession(WHSWorkUserSession _workUserSession, boolean _forUpdate = false)
    {
        var sessionState = new WHSWorkUserSessionStateFacade();
        sessionState.initFromWorkUserSession(_workUserSession, _forUpdate);

        return sessionState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkUserSessionStateFields</Name>
				<Source><![CDATA[
    protected void setWorkUserSessionStateFields()
    {
        sessionState.WorkUserSession = workUserSession.RecId;

        sessionState.WorkExecuteMode = this.parmMode();
        sessionState.WorkExecuteStep = this.parmStep();
        sessionState.WorkExecutePassThrough = this.parmPass();
        sessionState.SessionStateCheck = this.parmSessionStateCheck();
        sessionState.RFErrorLog = this.parmErrorLog();
        sessionState.XML = this.parmXml();
        sessionState.PrevPass = this.parmPrevPass();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkUserSessionFields</Name>
				<Source><![CDATA[
    [SysObsolete('Use setWorkUserSessionStateFields() instead.', false, 31\10\2022)]
    protected void setWorkUserSessionFields()
    {
        workUserSession.WorkExecuteMode = this.parmMode();
        workUserSession.WorkExecuteStep = this.parmStep();
        workUserSession.WorkExecutePassThrough = this.parmPass();
        workUserSession.SessionStateCheck = this.parmSessionStateCheck();
        workUserSession.RFErrorLog = this.parmErrorLog();
        workUserSession.XML = this.parmXml();
        workUserSession.PrevPass = this.parmPrevPass();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeData</Name>
				<Source><![CDATA[
    private void writeData(Common _sessionRecord)
    {
        _sessionRecord.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void createOrUpdate()
    {
        this.writeData(workUserSession);
        this.setWorkUserSessionStateFields();
        this.writeData(sessionState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMode</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWorkExecuteMode parmMode(WHSWorkExecuteMode _mode = this.mode)
    {
        if (!prmIsDefault(_mode))
        {
            this.mode = _mode;
        }
        return this.mode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStep</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWorkExecuteStep parmStep(WHSWorkExecuteStep _step = this.step)
    {
        if (!prmIsDefault(_step))
        {
            this.step = _step;
        }
        return this.step;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmXml</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public XML parmXml(XML _xml = this.sessionXml)
    {
        if (!prmIsDefault(_xml))
        {
            this.sessionXml = _xml;
        }
        return this.sessionXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPass</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWorkExecutePassThrough parmPass(WHSWorkExecutePassThrough _pass = this.pass)
    {
        if (!prmIsDefault(_pass))
        {
            this.pass = _pass;
        }
        return this.pass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSessionStateCheck</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSWorkUserSessionStateCheck parmSessionStateCheck(WHSWorkUserSessionStateCheck _sessionStateCheck = this.sessionStateCheck)
    {
        if (!prmIsDefault(_sessionStateCheck))
        {
            this.sessionStateCheck = _sessionStateCheck;
        }
        return this.sessionStateCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmErrorLog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSRFErrorLog parmErrorLog(WHSRFErrorLog _errorLog = this.errorLog)
    {
        if (!prmIsDefault(_errorLog))
        {
            this.errorLog = _errorLog;
        }
        return this.errorLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevPass</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSPrevPass parmPrevPass(WHSPrevPass _prevPass = this.prevPass)
    {
        if (!prmIsDefault(_prevPass))
        {
            this.prevPass = _prevPass;
        }
        return this.prevPass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSessionType</Name>
				<Source><![CDATA[
    public WHSWorkUserSessionType parmSessionType()
    {
        return sessionState.SessionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveDetours</Name>
				<Source><![CDATA[
    public boolean canHaveDetours()
    {
        return this.parmSessionType() != WHSWorkUserSessionState::lastDetourLevel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnterDetour</Name>
				<Source><![CDATA[
    public boolean canEnterDetour()
    {
        // The second check prevents recursively entering secondary detour while building primary detour
        return this.canHaveDetours() && this.parmPass();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEmptyDetour</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void deleteEmptyDetour()
    {
        if (this.parmSessionType() == WHSWorkUserSessionType::Main || this.parmPass())
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        ttsbegin;
        sessionState.delete();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnFromDetour</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal container returnFromDetour(container _detourFormContainer, container _messageControl, WHSServiceXMLTranslator _xmlTranslator)
    {
        if (this.parmSessionType() == WHSWorkUserSessionType::Main)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        ttsbegin;

        container detourSessionCon = WHSWorkExecuteDisplay::readXML(sessionState.XML);
        WHSRFPassthrough detourSessionPass = WHSRFPassthrough::create(conPeek(detourSessionCon, #PassthroughInfo));
        
        // Delete the detour session state record
        sessionState.delete();

        ttscommit;

        // Create a new facade which will load the main (or previous detour) session state
        var mainSessionState = WHSWorkUserSessionStateFacade::newFromWorkUserSession(workUserSession, workUserSession.selectForUpdate());

        boolean whsMobileDetoursUseTheLastMainSessionXmlFlightEnabled = WhsMobileDetoursUseTheLastMainSessionXmlFlight::instance().isEnabled();
        XML mainSessionXml;
        if (whsMobileDetoursUseTheLastMainSessionXmlFlightEnabled)
        {
            mainSessionXml = sessionState.XMLInput ? sessionState.XMLInput : mainSessionState.parmXml();
        }
        else
        {
            mainSessionXml = mainSessionState.parmXml();
        }

        container mainSessionCon = WHSWorkExecuteDisplay::readXML(mainSessionXml);

        container passthroughInfo = conPeek(mainSessionCon, #PassthroughInfo);
        WHSRFPassthrough mainSessionPass = WHSRFPassthrough::create(passthroughInfo);

        mainSessionCon = conPoke(mainSessionCon, #StateInfo, [mainSessionState.parmMode(), mainSessionState.parmStep()]);
        mainSessionCon = conPoke(mainSessionCon, #PassThroughInfo, mainSessionState.parmPass());

        if (whsMobileDetoursUseTheLastMainSessionXmlFlightEnabled)
        {
            mainSessionCon = this.resetDetourButtons(mainSessionCon);
        }
        boolean hasChanged;
        [hasChanged, mainSessionCon] = this.removeOrReplaceErrorLabel(mainSessionCon, _messageControl);

        container modifiedMainSessionCon;
        boolean hasBeenPopulated;
        str xmlState;
        [modifiedMainSessionCon, hasBeenPopulated, xmlState] = this.runDetour(WHSMobileAppFlowStepDetourFieldDirection::FromDetourToMain, mainSessionState.getMenuItemName(),
            mainSessionPass.parmMobileAppStepId(), detourSessionPass.parmMobileAppStepId(), _detourFormContainer, mainSessionCon, _xmlTranslator);

        hasChanged = hasChanged || hasBeenPopulated;
        if (!hasChanged)
        {
            mainSessionXml = this.updateAuthToken(mainSessionXml, workUserSession.UserSessionId);
        }

        return [hasChanged, mainSessionCon, modifiedMainSessionCon, mainSessionXml];
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetDetourButtons</Name>
				<Source><![CDATA[
    private container resetDetourButtons(container _sessionCon)
    {
        container controlCon;
        for (int i = #FieldControlStartLoc; i <= conLen(_sessionCon); i++)
        {
            controlCon = conPeek(_sessionCon, i);
            if (conPeek(controlCon, #controlType) == #RFDetourButton)
            {
                controlCon = conPoke(controlCon, #data, '0');
                _sessionCon = conPoke(_sessionCon, i, controlCon);
            }
        }

        return _sessionCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeOrReplaceErrorLabel</Name>
				<Source><![CDATA[
    private container removeOrReplaceErrorLabel(container _sessionCon, container _messageControl)
    {
        boolean hasModified;
        int len = conLen(_sessionCon);
        for (int i = #FieldControlStartLoc; i <= len; ++i)
        {
            container controlCon = conPeek(_sessionCon, i);
            if (conPeek(controlCon, #name) == #RFError && conPeek(controlCon, #controlType) == #RFlabel)
            {
                _sessionCon = _messageControl != conNull()
                    ? conPoke(_sessionCon, i, _messageControl)
                    : conDel(_sessionCon, i, 1);
                hasModified = true;
                break;
            }
        }

        if (!hasModified && _messageControl != conNull())
        {
            _sessionCon = conIns(_sessionCon, #RFErrorLoc, _messageControl);
            hasModified = true;
        }

        return [hasModified, _sessionCon];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAuthToken</Name>
				<Source><![CDATA[
    private str updateAuthToken(XML _sessionXml, WHSWorkUserSessionId _userSessionId)
    {
        str searchPattern = 'sessionId="{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}"';
        return strReplace(_sessionXml, searchPattern, strFmt('sessionId="%1"', _userSessionId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemName</Name>
				<Source><![CDATA[
    private WHSMenuItemName getMenuItemName()
    {
        WHSRFPassthrough rfPass = WHSRFPassthrough::create(pass);
        return rfPass.parmMenuItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>navigateToDetour</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void navigateToDetour(XML _xmlInputToStore)
    {
        if (!this.canHaveDetours())
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        WHSWorkUserSessionState::initializeDetourSession(workUserSession, this.parmSessionType(), _xmlInputToStore);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDetourData</Name>
				<Source><![CDATA[
    protected container populateDetourData(
        WHSMobileAppFlowStepDetourFieldDirection _direction,
        WHSMenuItemName                          _mainSessionMenuItemName,
        WHSMobileAppStepId                       _mainSessionStepId,
        WHSMobileAppStepId                       _currentStepId,
        container                                _fromContainer,
        container                                _toContainer,
        container                                _submittedFields = conNull())
    {
        if (populatedFieldsFlight)
        {
            return WHSWorkExecutionDetourFieldsAutoPopulationHandler::construct(_mainSessionMenuItemName,
                                                                                this.getMenuItemName(),
                                                                                _mainSessionStepId,
                                                                                _currentStepId,
                                                                                _direction,
                                                                                _fromContainer,
                                                                                _submittedFields,
                                                                                this.parmChangedFields()).populateFields(_toContainer);
        }
        else
        {
            return WHSWorkExecutionDetourFieldsAutoPopulationHandler::construct(_mainSessionMenuItemName,
                                                                            this.getMenuItemName(),
                                                                            _mainSessionStepId,
                                                                            _currentStepId,
                                                                            _direction,
                                                                            _fromContainer,
                                                                            _submittedFields).populateFields(_toContainer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDetour</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal container runDetour(
        WHSMobileAppFlowStepDetourFieldDirection _direction,
        WHSMenuItemName                          _mainSessionMenuItemName,
        WHSMobileAppStepId                       _mainSessionStepId,
        WHSMobileAppStepId                       _currentStepId,
        container                                _fromContainer,
        container                                _toContainer,
        WHSServiceXMLTranslator                  _xmlTranslator)
    {
        container modifiedToContainer;
        boolean   hasChanged;
        boolean   autoSubmit;
        container submittedFields;
        str       xmlState;

        populatedFieldsFlight = WHSRunDetourAutoSubmitProcessPopulatedFieldsFlight::instance().isEnabled();

        if (populatedFieldsFlight)
        {
            [modifiedToContainer, hasChanged, autoSubmit, submittedFields, changedFields]
                = this.populateDetourData(_direction, _mainSessionMenuItemName, _mainSessionStepId, _currentStepId, _fromContainer, _toContainer);
        }
        else
        {
            [modifiedToContainer, hasChanged, autoSubmit, submittedFields]
                = this.populateDetourData(_direction, _mainSessionMenuItemName, _mainSessionStepId, _currentStepId, _fromContainer, _toContainer);
        }

        while (autoSubmit)
        {
            if (WHSRunDetourAutoSubmitProcessComboboxControlFlight::instance().isEnabled())
            {
                modifiedToContainer = this.processComboBoxControls(modifiedToContainer);
            }

            [modifiedToContainer, xmlState] = WHSWorkExecuteDisplay::getNextFormState(modifiedToContainer, _xmlTranslator);

            if (populatedFieldsFlight)
            {
                [modifiedToContainer, hasChanged, autoSubmit, submittedFields, changedFields]
                = this.populateDetourData(_direction, _mainSessionMenuItemName, _mainSessionStepId, _currentStepId, _fromContainer, modifiedToContainer, submittedFields);
            }
            else
            {
                [modifiedToContainer, hasChanged, autoSubmit, submittedFields]
                = this.populateDetourData(_direction, _mainSessionMenuItemName, _mainSessionStepId, _currentStepId, _fromContainer, modifiedToContainer, submittedFields);
            }

            if (hasChanged)
            {
                xmlState = '';
            }

            hasChanged = true;
        }

        return [modifiedToContainer, hasChanged, xmlState];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processComboBoxControls</Name>
				<Source><![CDATA[
    private container processComboBoxControls(container _con)
    {
        container ret = _con;
        int length = conLen(ret);

        for (int i = 3; i <= length; i++)
        {
            container controlContainer = conPeek(ret, i);
            str controlType = conPeek(controlContainer, #controlType);

            if (controlType == #RFComboBox)
            {
                str selected = conPeek(controlContainer, #selected);

                if (selected != '')
                {
                    controlContainer = conPoke(controlContainer, #data, selected);
                    ret = conPoke(ret, i, controlContainer);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangedFields</Name>
				<Source><![CDATA[
    [Hookable(false)]
    private container parmChangedFields(container _changedFields = changedFields)
    {
        changedFields = _changedFields;
        return changedFields;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>