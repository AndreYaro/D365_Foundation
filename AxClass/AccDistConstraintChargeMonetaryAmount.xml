<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccDistConstraintChargeMonetaryAmount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AccDistConstraintChargeMonetaryAmount</c> class is an accounting distribution constraint
/// that restricts the degree of modification of an accounting constraint.
/// </summary>
[
SourceDocumentExtensionAttribute(MonetaryAmount::Charge)
]
public class AccDistConstraintChargeMonetaryAmount extends AccountingDistributionConstraint
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doesSourceDocumentLineItemImplementICharge</Name>
				<Source><![CDATA[
    private boolean doesSourceDocumentLineItemImplementICharge()
    {
        boolean iChargeImplemented = false;
        if (sourceDocumentLineItem is SourceDocumentLineItemICharge)
        {
            iChargeImplemented = true;
        }

        return iChargeImplemented;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkupTableFromSourceDocumentLineItem</Name>
				<Source><![CDATA[
    private MarkupTable getMarkupTableFromSourceDocumentLineItem()
    {
        MarkupTable markupTable;
        if (sourceDocumentLineItem is SourceDocumentLineItemICharge)
        {
            SourceDocumentLineItemICharge iCharge = sourceDocumentLineItem as SourceDocumentLineItemICharge;
            markupTable = iCharge.parmMarkupTable();
        }

        return markupTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMiscellaneousChargeNotItem</Name>
				<Source><![CDATA[
    private boolean isMiscellaneousChargeNotItem(MarkupTable _markupTable)
    {
        return (_markupTable.CustType == MarkupType::CustVend
               || _markupTable.CustType == MarkupType::LedgerAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActiveDistributionNotReversing</Name>
				<Source><![CDATA[
    private boolean isActiveDistributionNotReversing()
    {
        return this.activeDistributionReferenceRole() != AccountingDistributionReferenceRole::Reversing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the ledger dimension of an active accounting distribution can be edited.
    /// </summary>
    /// <returns>
    /// true if the ledger dimension can be edited; otherwise, false.
    /// </returns>
    public boolean canEditLedgerDimension()
    {
        boolean     canEdit;
        MarkupTable markupTable;

        if (sourceDocumentLineItem)
        {
            if (this.doesSourceDocumentLineItemImplementIcharge()
                && sourceDocumentLineItem.parmSourceDocumentLine().ParentSourceDocumentLine != 0)
            {
                markupTable = this.getMarkupTableFromSourceDocumentLineItem();

                canEdit = this.isActiveDistributionNotReversing()
                    && !this.activeDistributionIsReferenced()
                    && !this.sourceDocumentLineIsConfirmed()
                    && !this.isSourceDocumentProcessed()
                    && this.isMiscellaneousChargeNotItem(markupTable);
            }
            else
            {
                canEdit = super();
            }
        }

        return canEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanRedistributeAmounts</Name>
				<Source><![CDATA[
    public boolean parmCanRedistributeAmounts()
    {
        boolean canRedistribute = false;

        if (this.doesSourceDocumentLineItemImplementICharge() &&
            sourceDocumentLineItem.parmSourceDocumentLine().ParentSourceDocumentLine == 0)
        {
            canRedistribute = true;
        }

        return canRedistribute;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>