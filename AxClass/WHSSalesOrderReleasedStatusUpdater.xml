<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSalesOrderReleasedStatusUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSSalesOrderReleasedStatusUpdater</c> class is responsible for updating the Released status on sales orders.
/// </summary>
public class WHSSalesOrderReleasedStatusUpdater
{
    private WHSSetSalesOrderReleasedStatusParameters parameters;	
	
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustUpdateStatusBasedOnLines</Name>
				<Source><![CDATA[
	private boolean mustUpdateStatusBasedOnLines()
    {
        if (this.hasSalesLine())
        {
            if (parameters.LineInserted)
            {
                return this.mustUpdateStatusOnLineCreation();
            }
            
			if (parameters.LineQtyUpdated)
            {
                return this.mustUpdateStatusOnLineQtyUpdate();
            }
            
			if (parameters.LineDeleted)
            {
                return this.mustUpdateStatusOnLineDeletion();
            }
        }        

        return true;
	}

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the released status for a sales order if needed.
    /// </summary>
    public void update()
    {
        ttsbegin;

        if (this.mustUpdateStatusBasedOnLines())
        {
            this.updateBasedOnLines();
        }
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableReleaseStatus</Name>
				<Source><![CDATA[
	private WHSReleaseStatus salesTableReleaseStatus()
    {
        return SalesTable::find(parameters.SalesId, true).ReleaseStatus;
	}

]]></Source>
			</Method>
			<Method>
				<Name>hasSalesLine</Name>
				<Source><![CDATA[
	private boolean hasSalesLine()
    {
        return (parameters.SalesLine.SalesId != '');
	}

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateStatusOnLineDeletion</Name>
				<Source><![CDATA[
    private boolean mustUpdateStatusOnLineDeletion()
    {
        switch (this.salesTableReleaseStatus())
        {
            case WHSReleaseStatus::Open:	return false;
            default:						return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateStatusOnLineCreation</Name>
				<Source><![CDATA[
    private boolean mustUpdateStatusOnLineCreation()
    {
        switch (this.salesTableReleaseStatus())
        {
            case WHSReleaseStatus::Open:            return false;
            case WHSReleaseStatus::PartialReleased: return false;
            default:                                return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateStatusOnLineQtyUpdate</Name>
				<Source><![CDATA[
    private boolean mustUpdateStatusOnLineQtyUpdate()
    {
        switch (this.salesTableReleaseStatus())
        {
            case WHSReleaseStatus::Open:            return false;
            //if qty was increased and the load is partially released it will stay that way. If qty is reduced we may need to end in Released.
            case WHSReleaseStatus::PartialReleased: return (parameters.DeltaLineInventQty < 0); 
            default:                                return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBasedOnLines</Name>
				<Source><![CDATA[
    private void updateBasedOnLines()
    {
        WHSSalesLine        whsSalesLineSummed;
        SalesLine           salesLineSummed;
        WHSInventEnabled    whsInventEnabled;

        // Determine to use either CW process or non-CW.
        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            InventHandlingQty   totalReleasedQty;
            InventHandlingQty   totalRemainingQuantity;
            InventHandlingQty   totalDeliveredQty;
            InventHandlingQty   cwReleasedQty;
            InventHandlingQty   cwRemainingQty;
            InventHandlingQty   cwDeliveredQty;

            [totalReleasedQty, totalRemainingQuantity, totalDeliveredQty] = this.sumNonCWSalesLinesQty();
            [cwReleasedQty, cwRemainingQty, cwDeliveredQty] = this.sumCWSalesLineQty();

            totalReleasedQty += cwReleasedQty;
            totalRemainingQuantity += cwRemainingQty;
            totalDeliveredQty += cwDeliveredQty;

            WHSReleaseStatus calculatedReleaseStatus = this.determineReleaseStatusUsingQuantities(totalReleasedQty, totalRemainingQuantity, totalDeliveredQty);

            this.updateSalesTableReleaseStatus(calculatedReleaseStatus);
        }
        else
        {
            WHSRemainingSalesLineQuantityTotals whsSalesLineQuantityTotals;

            select sum(ReleasedQty), sum(RemainInventPhysical), sum(DeliveredQty) from whsSalesLineQuantityTotals
                where whsSalesLineQuantityTotals.SalesId == parameters.SalesId;

            WHSReleaseStatus calculatedReleaseStatus = this.determineReleaseStatusUsingQuantities(whsSalesLineQuantityTotals.ReleasedQty, whsSalesLineQuantityTotals.RemainInventPhysical, whsSalesLineQuantityTotals.DeliveredQty);

            this.updateSalesTableReleaseStatus(calculatedReleaseStatus);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumNonCWSalesLinesQty</Name>
				<Source><![CDATA[
    private container sumNonCWSalesLinesQty()
    {
        PdsCatchWeightItem  pdsCatchWeightItem;

        WHSRemainingSalesLineQuantityTotals whsSalesLineQuantityTotals;

        select sum(ReleasedQty), sum(RemainInventPhysical), sum(DeliveredQty) from whsSalesLineQuantityTotals
            where whsSalesLineQuantityTotals.SalesId == parameters.SalesId
            notexists join pdsCatchWeightItem
                where pdsCatchWeightItem.ItemId == whsSalesLineQuantityTotals.ItemId;

        return [whsSalesLineQuantityTotals.ReleasedQty, whsSalesLineQuantityTotals.RemainInventPhysical, whsSalesLineQuantityTotals.DeliveredQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumCWSalesLineQty</Name>
				<Source><![CDATA[
    private container sumCWSalesLineQty()
    {
        PdsCatchWeightItem  pdsCatchWeightItem;
        WHSRemainingSalesLineQuantityTotals whsSalesLineQuantityTotals;

        select sum(ReleasedQty), sum(PdsCWRemainInventPhysical), sum(PdsCWDeliveredQty) from whsSalesLineQuantityTotals
            where whsSalesLineQuantityTotals.SalesId == parameters.SalesId
            exists join pdsCatchWeightItem
                where pdsCatchWeightItem.ItemId == whsSalesLineQuantityTotals.ItemId;

        return [whsSalesLineQuantityTotals.ReleasedQty, whsSalesLineQuantityTotals.PdsCWRemainInventPhysical, whsSalesLineQuantityTotals.PdsCWDeliveredQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineReleaseStatusUsingQuantities</Name>
				<Source><![CDATA[
    private WHSReleaseStatus determineReleaseStatusUsingQuantities(WHSReleasedQty _releasedQuantity, InventQty _remainingQuantity, InventQty _deliveredQuantity)
    {
        InventQty   totalOrderedQty = _remainingQuantity + _deliveredQuantity;

        // If total released qty is not zero continue to find total sales line ordered qty
        if (_releasedQuantity != 0)
        {
            // Compare total released qty and total ordered qty
            if (totalOrderedQty > _releasedQuantity)
            {
                // If ordered qty is greater than the status is partial released
                return WHSReleaseStatus::PartialReleased;
            }
            else if (totalOrderedQty == _releasedQuantity)
            {
                // If ordered qty is equal to released qty then the status is released
                return WHSReleaseStatus::Released;
            }
        }
        else
        {
            // If released quantity and remaining quantity is zero and any sales lines has ordered quantity set the release status to Released.
            if (_remainingQuantity == _releasedQuantity)
            {
                SalesLine salesLine;

                select firstOnly RecId from salesLine
                    where salesLine.SalesId == parameters.SalesId
                       && salesLine.QtyOrdered > 0
                       && salesLine.SalesStatus != SalesStatus::Canceled;

                if (salesLine.RecId != 0)
                {
                    return WHSReleaseStatus::Released;
                }
            }
            else if (_remainingQuantity != _releasedQuantity && this.hasSalesLineWithWarehouseItemsStillToBeReleased())
            {
                return WHSReleaseStatus::PartialReleased;
            }
        }
            
        // If there is no released qty or less than remaining qty then the status is open
        return WHSReleaseStatus::Open;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSalesLineWithWarehouseItemsStillToBeReleased</Name>
				<Source><![CDATA[
    private boolean hasSalesLineWithWarehouseItemsStillToBeReleased()
    {
        SalesLine           salesLine, totalNumOfLinesPerSO;
        WHSInventEnabled    whsInventEnabled;

        select firstonly count(RecId) from salesLine
            where  salesLine.SalesId                == parameters.SalesId
                && salesLine.RemainInventPhysical   > 0
            join whsInventEnabled
            where whsInventEnabled.ItemId           == salesLine.ItemId;

        select firstonly count(RecId) from totalNumOfLinesPerSO
            where totalNumOfLinesPerSO.SalesId == parameters.SalesId
                && totalNumOfLinesPerSO.SalesStatus != SalesStatus::Canceled
        join whsInventEnabled
            where whsInventEnabled.ItemId == totalNumOfLinesPerSO.ItemId;

        return totalNumOfLinesPerSO.RecId > salesLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTableReleaseStatus</Name>
				<Source><![CDATA[
    private void updateSalesTableReleaseStatus(WHSReleaseStatus _calculatedReleaseStatus)
    {
        SalesTable salesTable;

        salesTable = SalesTable::find(parameters.SalesId, true);
            
        if (salesTable.ReleaseStatus != _calculatedReleaseStatus)
        {
            salesTable.skipBusinessEvents(true);
            salesTable.skipDataMethods(true);
            salesTable.skipEvents(true);
            
            ttsbegin;
            salesTable.ReleaseStatus = _calculatedReleaseStatus;
            salesTable.doUpdate();
            ttscommit;
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSSalesOrderReleasedStatusUpdater construct()
    {
        return new WHSSalesOrderReleasedStatusUpdater();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the class based on the <c>WHSSetSalesOrderReleasedStatusParameters</c> parameters.
    /// </summary>
    /// <param name = "_parameters">Parameters used by the class.</param>
    /// <returns>A new instance of the class.</returns>
    public static WHSSalesOrderReleasedStatusUpdater newFromParameters(WHSSetSalesOrderReleasedStatusParameters _parameters)
    {
        WHSSalesOrderReleasedStatusUpdater updater = WHSSalesOrderReleasedStatusUpdater::construct();

        updater.Parameters = _parameters;

        return updater;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
	protected void new()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>commitDeferredUpdates</Name>
				<Source><![CDATA[
    static private void commitDeferredUpdates()
    {
        SysTransactionScope transactionScope = appl.transactionScope();
        var enum = transactionScope.parmTransactionScopeCache().get(classStr(WHSSalesOrderReleasedStatusUpdater), 0, new Map(Types::String, Types::Class)).getEnumerator();
        while (enum.moveNext())
        {
            var parameters = enum.currentValue() as WHSSetSalesOrderReleasedStatusParameters;
            
            if (parameters.DataAreaId != curExt())
            {
                changecompany(parameters.DataAreaId)
                {
                    WHSSalesOrderReleasedStatusUpdater::newFromParameters(parameters).update();
                }
            }
            else
            {
                WHSSalesOrderReleasedStatusUpdater::newFromParameters(parameters).update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deferUpdate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    static internal void deferUpdate(WHSSetSalesOrderReleasedStatusParameters _parameters)
    {
        SysTransactionScope transactionScope = appl.transactionScope();
        Map deferredUpdates = transactionScope.parmTransactionScopeCache().get(classStr(WHSSalesOrderReleasedStatusUpdater), 0, null);

        if (deferredUpdates == null)
        {
            deferredUpdates = new Map(Types::String, Types::Class);
            transactionScope.parmTransactionScopeCache().set(classStr(WHSSalesOrderReleasedStatusUpdater), 0, deferredUpdates);
            transactionScope.ttsCommitting += eventhandler(WHSSalesOrderReleasedStatusUpdater::commitDeferredUpdates);
        }
        deferredUpdates.insert(_parameters.hashKey(), _parameters);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>