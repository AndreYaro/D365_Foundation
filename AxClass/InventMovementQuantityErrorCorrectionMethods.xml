<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMovementQuantityErrorCorrectionMethods</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>InventMovementQuantityErrorCorrectionMethods</c> carries information
/// about methods for correcting various types of inventory movement quantity constraint conflicts.
/// </summary>
class InventMovementQuantityErrorCorrectionMethods implements SysPackable
{
    const int CurrentVersion = 1;

    InventMovementQuantityErrorCorrectionMethod lowerLimitErrorCorrectionMethod;
    InventMovementQuantityErrorCorrectionMethod upperLimitErrorCorrectionMethod;
    InventMovementQuantityErrorCorrectionMethod multiplicityErrorCorrectionMethod;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the standard error correction methods.
    /// </summary>
    /// <returns>A new instance of the <c>InventMovementQuantityErrorCorrectionMethods</c> class.</returns>
    public static InventMovementQuantityErrorCorrectionMethods newStandard()
    {
        InventMovementQuantityErrorCorrectionMethods strategy = InventMovementQuantityErrorCorrectionMethods::construct();
        strategy.initStandard();
        return strategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPacked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>InventMovementQuantityErrorCorrectionMethods</c> based on the serialized instance of the class.
    /// </summary>
    /// <param name="_packed">The container that contains the serialized instance of the class.</param>
    /// <returns>A new instance of the <c>InventMovementQuantityErrorCorrectionMethods</c> class.</returns>
    public static InventMovementQuantityErrorCorrectionMethods newFromPacked(container _packed)
    {
        InventMovementQuantityErrorCorrectionMethods strategy = InventMovementQuantityErrorCorrectionMethods::construct();
        strategy.unpack(_packed);
        return strategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acceptUserInputWithWarning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates correction methods where the strategy of accepting user input with a warning is used for all types of constraints.
    /// </summary>
    /// <returns>A new instance of the <c>InventMovementQuantityErrorCorrectionMethods</c> class.</returns>
    public static InventMovementQuantityErrorCorrectionMethods acceptUserInputWithWarning()
    {
        InventMovementQuantityErrorCorrectionMethods strategy = InventMovementQuantityErrorCorrectionMethods::construct();
        strategy.setAllErrorCorrectionMethods(InventMovementQuantityErrorCorrectionMethod::AcceptUserInputWithWarning);
        return strategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates correction methods where the strategy of prompting the user to make the decision is used for all types of constraints.
    /// </summary>
    /// <returns>A new instance of the <c>InventMovementQuantityErrorCorrectionMethods</c> class.</returns>
    public static InventMovementQuantityErrorCorrectionMethods promptUser()
    {
        InventMovementQuantityErrorCorrectionMethods strategy = InventMovementQuantityErrorCorrectionMethods::construct();
        strategy.setAllErrorCorrectionMethods(InventMovementQuantityErrorCorrectionMethod::PromptUser);
        return strategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of the <c>InventMovementQuantityErrorCorrectionMethods</c> class based on the specified parameters.
    /// </summary>
    /// <param name = "_showUsrDialog">
    /// A boolean parameter that controls how to resolve constraint conflicts.
    /// When set to false it will force the system to automatically accept the corrected quantity suggested by the system without notifying the user; optional.
    /// </param>
    /// <param name = "_doMinQtyCheck">A boolean parameter that indicates whether the lower limit quantity check must be performed; optional.</param>
    /// <param name = "_doMaxQtyCheck">A boolean parameter that indicates whether the upper limit quantity check must be performed; optional.</param>
    /// <returns>A new instance of the <c>InventMovementQuantityErrorCorrectionMethods</c> class.</returns>
    public static InventMovementQuantityErrorCorrectionMethods newParameters(
        boolean     _showUsrDialog          = true,
        boolean     _doMinQtyCheck          = true,
        boolean     _doMaxQtyCheck          = true)
    {
        InventMovementQuantityErrorCorrectionMethods strategy = InventMovementQuantityErrorCorrectionMethods::construct();
        strategy.initParameters(_showUsrDialog, _doMinQtyCheck, _doMaxQtyCheck);
        return strategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParametersWithMultipleQtyCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of the <c>InventMovementQuantityErrorCorrectionMethods</c> class based on the specified parameters.
    /// </summary>
    /// <param name = "_showUsrDialog">
    /// A boolean parameter that controls how to resolve constraint conflicts.
    /// When set to false it will force the system to automatically accept the corrected quantity suggested by the system without notifying the user; optional.
    /// </param>
    /// <param name = "_doMinQtyCheck">A boolean parameter that indicates whether the lower limit quantity check must be performed; optional.</param>
    /// <param name = "_doMaxQtyCheck">A boolean parameter that indicates whether the upper limit quantity check must be performed; optional.</param>
    /// <param name = "_doMultipleQtyCheck">A boolean parameter that indicates whether the multiple limit quantity check must be performed; optional.</param>
    /// <returns>A new instance of the <c>InventMovementQuantityErrorCorrectionMethods</c> class.</returns>    /// <remarks>
    /// The missing parameter _doMultipleQtyCheck leads to auto correct user input according to default order setting.
    /// This will cause batch merge cannot be posted because the it will not pass error correction method validation.
    /// And this method should be used afterward instead of calling method 'newParameters'.
    /// </remarks>
    public static InventMovementQuantityErrorCorrectionMethods newParametersWithMultipleQtyCheck(
        boolean     _showUsrDialog          = true,
        boolean     _doMinQtyCheck          = true,
        boolean     _doMaxQtyCheck          = true,
        boolean     _doMultipleQtyCheck     = true)
    {
        InventMovementQuantityErrorCorrectionMethods strategy = InventMovementQuantityErrorCorrectionMethods::construct();
        strategy.initParametersWithMultipleQtyCheckParm(_showUsrDialog, _doMinQtyCheck, _doMaxQtyCheck, _doMultipleQtyCheck);
        return strategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllErrorCorrectionMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that the specified error correction method will be used for all types of quantity constraints.
    /// </summary>
    /// <param name = "_errorCorrectionMethod">The error correction method.</param>
    public void setAllErrorCorrectionMethods(InventMovementQuantityErrorCorrectionMethod _errorCorrectionMethod)
    {
        lowerLimitErrorCorrectionMethod = _errorCorrectionMethod;
        upperLimitErrorCorrectionMethod = _errorCorrectionMethod;
        multiplicityErrorCorrectionMethod = _errorCorrectionMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the class into a container.
    /// </summary>
    /// <returns>The container that represents the serialized instance of the class.</returns>
    public container pack()
    {
        return [CurrentVersion, lowerLimitErrorCorrectionMethod, upperLimitErrorCorrectionMethod, multiplicityErrorCorrectionMethod];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the class from a container.
    /// </summary>
    /// <param name = "_packed">The container that represents a serialized instance of the class.</param>
    public boolean unpack(container _packed)
    {
        if (_packed == conNull()
            || conPeek(_packed, 1) != CurrentVersion)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        int currentVersionLocal;
        [currentVersionLocal, lowerLimitErrorCorrectionMethod, upperLimitErrorCorrectionMethod, multiplicityErrorCorrectionMethod] = _packed;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLowerLimitErrorCorrectionMethod</Name>
				<Source><![CDATA[
    public InventMovementQuantityErrorCorrectionMethod parmLowerLimitErrorCorrectionMethod(
        InventMovementQuantityErrorCorrectionMethod _errorCorrectionMethod = lowerLimitErrorCorrectionMethod)
    {
        lowerLimitErrorCorrectionMethod = _errorCorrectionMethod;
        return lowerLimitErrorCorrectionMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpperLimitErrorCorrectionMethod</Name>
				<Source><![CDATA[
    public InventMovementQuantityErrorCorrectionMethod parmUpperLimitErrorCorrectionMethod(
        InventMovementQuantityErrorCorrectionMethod _errorCorrectionMethod = upperLimitErrorCorrectionMethod)
    {
        upperLimitErrorCorrectionMethod = _errorCorrectionMethod;
        return upperLimitErrorCorrectionMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultiplicityErrorCorrectionMethod</Name>
				<Source><![CDATA[
    public InventMovementQuantityErrorCorrectionMethod parmMultiplicityErrorCorrectionMethod(
        InventMovementQuantityErrorCorrectionMethod _errorCorrectionMethod = multiplicityErrorCorrectionMethod)
    {
        multiplicityErrorCorrectionMethod = _errorCorrectionMethod;
        return multiplicityErrorCorrectionMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventMovementQuantityErrorCorrectionMethods construct()
    {
        return new InventMovementQuantityErrorCorrectionMethods();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStandard</Name>
				<Source><![CDATA[
    private void initStandard()
    {
        if (hasGUI())
        {
            this.setAllErrorCorrectionMethods(InventMovementQuantityErrorCorrectionMethod::PromptUser);
        }
        else
        {
            this.setAllErrorCorrectionMethods(InventMovementQuantityErrorCorrectionMethod::AcceptUserInput);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    private void initParameters(
        boolean     _showUsrDialog,
        boolean     _doMinQtyCheck,
        boolean     _doMaxQtyCheck)
    {
        if (!_showUsrDialog)
        {
            this.setAllErrorCorrectionMethods(InventMovementQuantityErrorCorrectionMethod::AutoCorrectUserInput);
        }
        else if (hasGUI())
        {
            this.setAllErrorCorrectionMethods(InventMovementQuantityErrorCorrectionMethod::PromptUser);
        }
        else
        {
            this.setAllErrorCorrectionMethods(InventMovementQuantityErrorCorrectionMethod::AutoCorrectUserInputWithWarning);
        }

        if (!_doMinQtyCheck)
        {
            lowerLimitErrorCorrectionMethod = InventMovementQuantityErrorCorrectionMethod::AcceptUserInput;
        }

        if (!_doMaxQtyCheck)
        {
            upperLimitErrorCorrectionMethod = InventMovementQuantityErrorCorrectionMethod::AcceptUserInput;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParametersWithMultipleQtyCheckParm</Name>
				<Source><![CDATA[
    private void initParametersWithMultipleQtyCheckParm(
        boolean     _showUsrDialog,
        boolean     _doMinQtyCheck,
        boolean     _doMaxQtyCheck,
        boolean     _doMultipleQtyCheck)
    {
        this.initParameters(_showUsrDialog, _doMinQtyCheck, _doMaxQtyCheck);
        if (!_doMultipleQtyCheck)
        {
            multiplicityErrorCorrectionMethod = InventMovementQuantityErrorCorrectionMethod::AcceptUserInput;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>