<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesComplInvoiceCalcTax</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates tax amount and provides data to tax engine for sales complementary invoices.
/// </summary>
class SalesComplInvoiceCalcTax extends ComplementaryInvoiceCalcTax
{
    SalesComplementaryInvoiceHeader complInvHeader;
    SalesComplementaryInvoiceLine   complInvLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>additionalICMSAmount</Name>
				<Source><![CDATA[
    public TaxAmount additionalICMSAmount()
    {
        if (TaxSalesComplementaryInvoiceAdditionalTaxSignFlight::instance().isEnabled() && this.isIncomingFiscalDocument())
        {
            return complInvLine.AdditionalICMSAmount;
        }

        return -complInvLine.AdditionalICMSAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalIPIAmount</Name>
				<Source><![CDATA[
    public TaxAmount additionalIPIAmount()
    {
        if (TaxSalesComplementaryInvoiceAdditionalTaxSignFlight::instance().isEnabled() && this.isIncomingFiscalDocument())
        {
            return complInvLine.AdditionalIPIAmount;
        }

        return -complInvLine.AdditionalIPIAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseAmount</Name>
				<Source><![CDATA[
    AmountCur  baseAmount()
    {
        return -complInvLine.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>complementaryType</Name>
				<Source><![CDATA[
    public InvoiceComplementaryType_BR complementaryType()
    {
        return complInvHeader.ComplementaryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return complInvHeader.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return complInvLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public Name description()
    {
        return complInvLine.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    public date documentDate()
    {
        return complInvHeader.DocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    CustExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return complInvHeader.exchRate(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return complInvHeader.exchRateSecondary(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    void  initCursor()
    {
        Query     query = new Query();

        query.addDataSource(tablenum(SalesComplementaryInvoiceLine));
        query.dataSourceTable(tablenum(SalesComplementaryInvoiceLine)).addRange(fieldnum(SalesComplementaryInvoiceLine, SalesComplementaryInvoiceHeader)).value(queryValue(complInvHeader.RecId));

        queryTransact = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    TransDate invoiceDate()
    {
        return complInvHeader.DocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucher</Name>
				<Source><![CDATA[
    public Voucher ledgerVoucher()
    {
        return complInvHeader.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new <c>SalesComplInvoiceCalcTax</c> object for a given <c>SalesComplementaryInvoiceHeader</c> record.
    /// </summary>
    /// <param name="_header">
    /// <c>SalesComplementaryInvoiceHeader</c> record for which the tax will be calculated.
    /// </param>
    public void new(SalesComplementaryInvoiceHeader _header)
    {
        complInvHeader = _header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    Common nextLine()
    {
        complInvLine = null;

        while (queryTransact.next())
        {
            complInvLine = this.queryGet(queryTransact);
            if (complInvLine)
                break;
        }
        return complInvLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccount</Name>
				<Source><![CDATA[
    LedgerDimensionAccount operationAccount()
    {
        return complInvLine.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationPosting</Name>
				<Source><![CDATA[
    LedgerPostingType operationPosting()
    {
        return LedgerPostingType::CustRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post(LedgerPostingController _ledgerPostingController)
    {
        TaxPost taxPost = TaxPost::newForSourceType(TaxSourceType::ComplementaryInvoice, this, true);
        taxPost.updateAndPost(_ledgerPostingController);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    common queryGet(QueryRun _queryRun)
    {
        SalesComplementaryInvoiceLine queryComplLine;

        if (_queryRun.changed(tablenum(SalesComplementaryInvoiceLine)))
            queryComplLine = _queryRun.get(tablenum(SalesComplementaryInvoiceLine));

        return queryComplLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recID</Name>
				<Source><![CDATA[
    recId  recID()
    {
        return complInvHeader.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    tableId  tableId()
    {
        return complInvHeader.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxationOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the taxation origin of the current complementary invoice line.
    /// </summary>
    /// <returns>
    /// A taxation origin
    /// </returns>
    /// <remarks>
    /// If some criteria is satisfied, the taxation origin will be retrieved from the ImportedContentPerItem_BR table.
    /// Otherwise, the taxation origin associated with the invent table record will be used.
    /// </remarks>
    public FITaxationOrigin_BR taxationOrigin()
    {
        FITaxationOrigin_BR             taxationOrigin;

        ImportedContentPerItem_BR importedContentPerItem = FciIdentifier_BR::getFciAndTaxationOrigin(complInvHeader.fiscalEstablishment().FiscalEstablishmentId,
                                                                                                     complInvHeader.fiscalDocumentModel(),
                                                                                                     FiscalDocumentIssuer_BR::OwnEstablishment,
                                                                                                     FiscalDocDirection_BR::Outgoing,
                                                                                                     this.documentDate(),
                                                                                                     CFOPTable_BR::find(complInvLine.CFOPTable_BR).CFOPId,
                                                                                                     complInvLine.ItemCode);

        if (importedContentPerItem)
        {
            taxationOrigin = importedContentPerItem.TaxationOrigin;
        }
        else
        {
            taxationOrigin = InventTable::find(complInvLine.ItemCode).TaxationOrigin_BR;
        }

        return taxationOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxModuleType</Name>
				<Source><![CDATA[
    public TaxModuleType taxModuleType()
    {
        return TaxModuleType::SalesInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxGroup</Name>
				<Source><![CDATA[
    TaxGroup transTaxGroup()
    {
        return complInvLine.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxItemGroup</Name>
				<Source><![CDATA[
    TaxItemGroup transTaxItemGroup()
    {
        return complInvLine.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAndConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the operation is for a final user or not.
    /// </summary>
    /// <returns>True if is a final user use otherwise false</returns>
    public boolean useAndConsumption()
    {
        return complInvHeader.CustFinalUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIncomingFiscalDocument</Name>
				<Source><![CDATA[
    private boolean isIncomingFiscalDocument()
    {
        boolean ret;

        FiscalDocument_BR fiscalDocument = FiscalDocument_BR::find(complInvHeader.ComplementedFiscalDocument);
        ret = fiscalDocument && fiscalDocument.Direction == FiscalDocDirection_BR::Incoming;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>