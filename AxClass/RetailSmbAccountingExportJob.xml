<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSmbAccountingExportJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Retail SMB Accounting Export Job
/// </summary>
/// <remarks>
/// Calculates the balances of accounts from the Export Profile in preparation for exporting to an external system.
/// </remarks>
class RetailSmbAccountingExportJob extends RunBaseBatch implements BatchRetryable
{
    #define.TracerArea('RetailSmbAccountingExportJob')

    TransDate exportStartDate;
    TransDate exportEndDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ExportAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Export account balances
    /// </summary>
    /// <remarks>
    /// Calculate the account balance during the given date ranges for each account in the profile.
    /// </remarks>
    private void ExportAccounts()
    {
        MainAccount mainaccount;
        RetailSmbAccountExportProfileLine profileline;
        RetailSmbAccountExportResult resultHeader;
        RetailSmbAccountExportResultLine resultLines;
        RetailSmbAccountExportProfileRecId profileRecId;

        AmountMST           credit, debit;
        InfoLogData         infoLogData;

        RetailTracer::Info(#TracerArea, 'ExportAccounts', 'Begin method.');

        profileRecId = RetailParameters::find().AccountExportProfile;

        if (profileRecId)
        {
            // Force all main accounts to update balances.
            if (DimensionFocusBalanceUpdateByLedgerFlight::instance().isEnabled())
            {
                MainAccountEventArgs args = MainAccountEventArgs::construct();
                args.parmBalanceLedgerRecId(Ledger::current());

                MainAccount::updateBalancesWithArgs(args);
            }
            else
            {
                MainAccount::updateBalances();
            }

            //Initialize the date range
            this.InitDateRange();

            if (exportStartDate < exportEndDate)
            {
                // Insert a header record for this export run
                ttsBegin;
                resultHeader.ExportDate = DateTimeUtil::getSystemDateTime();
                resultHeader.StartDate = exportstartDate;
                resultHeader.endDate = exportendDate;
                resultHeader.insert();
                ttsCommit;

                try
                {
                    ttsBegin;

                    //Iterate over each profile line for the profile configured in RetailParameters
                    while
                        select ExternalAccountId from profileline join mainaccount
                                where profileline.MainAccount == mainaccount.RecId
                                    && profileline.AccountExportProfile == profileRecId
                    {
                        //Get the activity balance for the account defined by the profile line.
                        [credit, debit] = this.GetAccountCreditDebit(mainaccount.MainAccountId);

                        //Add lines for each computed balance
                        resultLines.AccountExportResult = resultHeader.RecId;
                        resultLines.AmountCredit = credit;
                        resultLines.AmountDebit = debit;
                        resultLines.ExternalAccountId= profileline.ExternalAccountId;
                        resultLines.AccountId = mainaccount.MainAccountId;
                        resultLines.insert();
                    }
                    ttsCommit;
                }
                catch
                {
                    // Record the infolog if errors occurred
                    ttsBegin;
                    resultHeader.reread();
                    if (resultHeader.RecId)
                    {
                        infoLogData = infolog.export();
                        resultHeader.selectForUpdate(true);
                        resultHeader.ExportInfoLog = infoLogData;
                        resultHeader.Update();
                    }
                    ttsCommit;
                }
            }
            else
            {
                RetailTracer::Info(#TracerArea, 'ExportAccounts', 'Invalid data range: StartDate is greater than EndDate.');
                info("@REX1555");
            }
        }
        else
        {
            RetailTracer::Info(#TracerArea, 'ExportAccounts', 'Missing Accounting Export Profile.');
            info("@REX1494");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetAccountCreditDebit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the credit/debit balance for the given account.
    /// </summary>
    /// <param name="_mainAccountId">
    /// Main Account id
    /// </param>
    /// <returns>
    /// Container of [Credit, Debit] amounts.
    /// </returns>
    /// <remarks>
    /// Calculate the credit/debit balance for the given account.
    /// </remarks>
    private container GetAccountCreditDebit(str _mainAccountId)
    {
        AmountMST credit, debit;
        LedgerBalanceMainAccountAmounts amounts = LedgerBalanceMainAccountAmounts::construct();
        MainAccount main = MainAccount::findByMainAccountId(_mainAccountId);

        RetailTracer::Info(#TracerArea, 'GetAccountCreditDebit', 'Begin method.');

        amounts.parmAccountingDateRange(exportStartDate, exportEndDate);
        amounts.parmSeparateDebitsAndCredits(true);
        amounts.parmIncludeRegularPeriod(true);
        amounts.calculateBalance(main);

        credit = amounts.getAccountingCurrencyCreditBalance();
        debit = amounts.getAccountingCurrencyDebitBalance();

        return [credit, debit];
    }

]]></Source>
			</Method>
			<Method>
				<Name>InitDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the date range
    /// </summary>
    /// <remarks>
    /// Set the date used to calculate the account balances for this job instance.
    /// </remarks>
    private void InitDateRange()
    {
        RetailSmbAccountExportResult exportResults;
        #RetailSMB;

        RetailTracer::Info(#TracerArea, 'InitDateRange', 'Begin method.');

        if (!exportEndDate)
        {
            //End-date = (Today-1)
            exportEndDate = utcDateTime2SystemDateTime(DateTimeUtil::addDays(DateTimeUtil::utcNow(), -1));
        }

        if (!exportStartDate)
        {
            select maxof(EndDate) from exportResults;
            if (exportResults.EndDate)
            {
                // Start-date is the previous end-date of the last set of results
                exportStartDate = exportResults.EndDate;
            }
            else
            {
                // Otherwise, if there are no prior results, get activity for the last 7 days
                exportStartDate = utcDateTime2SystemDateTime(
                                    DateTimeUtil::addDays(DateTimeUtil::utcNow(), (-1 * #DefaultExportNumberOfDays)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>OverrideDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override date range for the export job
    /// </summary>
    /// <param name="_startDate">
    /// The override start date
    /// </param>
    /// <param name="_endDate">
    /// The override end date
    /// </param>
    /// <remarks>
    /// Causes the job to use the given start/end dates instead of the default calculated dates.
    /// </remarks>
    public void OverrideDateRange(TransDate _startDate, TransDate _endDate)
    {
        RetailTracer::Info(#TracerArea, 'OverrideDateRange', 'Begin method.');

        exportStartDate = _startDate;
        exportEndDate = _endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.ExportAccounts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailSmbAccountingExportJob scheduler = new RetailSmbAccountingExportJob();

        if (scheduler.prompt())
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ViewLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// View the infolog data recorded for the given result record.
    /// </summary>
    /// <remarks>
    /// View the infolog data recorded for the given result record.
    /// </remarks>
    /// <param name="_resultRecord">RetailSmbAccountExportResult record to show infolog entries for.</param>
    public static void ViewLog(RetailSmbAccountExportResult _resultRecord)
    {
        RetailTracer::Info(#TracerArea, 'ViewLog', 'Begin method.');

        if (_resultRecord)
        {
            infolog.import(_resultRecord.ExportInfoLog);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailSmbAccountingExportJob</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailSmbAccountingExportJob</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>