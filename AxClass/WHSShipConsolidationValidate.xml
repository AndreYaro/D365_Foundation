<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipConsolidationValidate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSShipConsolidationValidate</c> class contains the validation logic for shipment consolidation.
/// </summary>
public class WHSShipConsolidationValidate extends WHSShipConsolidationValidateBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmBaseShipment</Name>
				<Source><![CDATA[
    public WHSShipmentTable parmBaseShipment(WHSShipmentTable _baseShipment = baseShipment)
    {
        return super(_baseShipment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipments</Name>
				<Source><![CDATA[
    public container parmShipments(container _shipments = shipments)
    {
        return super(_shipments);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
	/// Runs validation dialog for the exceeding weight and different final shipping locations.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Exception is thrown if consolidation is cancelled.
    /// </exception>
    public void run()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateShipDialog</Name>
				<Source><![CDATA[
	/// <summary>
	/// Asks user to proceed to consolidate if the shipment has goods on different final shipping location.
	/// </summary>
	/// <param name="_shipmentId">
	/// Id of the shipment to be validated.
	/// </param>
	/// <returns>
	/// Yes or No.
	/// </returns>
    [SysObsolete('This method is no longer supported.', false, 31\05\2023)]
    public DialogButton validateShipDialog(WHSShipmentId _shipmentId)
    {
        return Box::yesNo(strfmt("@WAX2198", _shipmentId), DialogButton::Yes, "@WAX2197");
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateShipWeightDialog</Name>
				<Source><![CDATA[
	/// <summary>
	/// Creates dialog for exceeded weight confirmation.
	/// </summary>
	/// <param name="_weight">
	/// The weight exceeded in the load.
	/// </param>
	/// <returns>
	/// The response from dialog box.
    /// </returns>
    [SysObsolete('This method is no longer supported.', false, 31\05\2023)]
    protected DialogButton validateShipWeightDialog(Weight _weight)
    {
        return Box::yesNo(strFmt("@WAX2184", abs(_weight)), DialogButton::Yes, "@WAX2185");
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSShipConsolidationValidate construct()
    {
        return new WHSShipConsolidationValidate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentsToValidate</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the shipments that have work already executed and in different shipping location than the base shipment.
	/// </summary>
	/// <param name="_shipments">
	/// Shipments container containing ids of shipments to be consolidated.
	/// </param>
	/// <param name="_baseShipment">
	/// Base shipment.
	/// </param>
	/// <returns>
	/// Container containing the shipments that need to be validated.
	/// </returns>
    public static container getShipmentsToValidate(container _shipments, WHSShipmentTable _baseShipment)
    {
        container        promptShipments;
        boolean          ret = true;

        int numberOfShipments = conLen(_shipments);

        for (int i = 1; i <= numberOfShipments; ++i)
        {
            WHSWorkTable workTable;
            WHSShipmentTable shipmentTable = WHSShipmentTable::find(conPeek(_shipments, i), true);

            while select WorkId from workTable
                where workTable.ShipmentId == shipmentTable.ShipmentId
            {
                WHSWorkLine workLine;
                WHSWorkLine baseFinalWorkLine;

                select firstOnly WMSLocationId, WorkStatus from workLine
                    order by workLine.LineNum desc
                    where workLine.WorkId == workTable.WorkId;

                select firstonly WMSLocationId from baseFinalWorkLine
                    order by baseFinalWorkLine.LineNum desc
                    where baseFinalWorkLine.ShipmentId == _baseShipment.ShipmentId;

                if (baseFinalWorkLine.wmsLocationId != workLine.wmsLocationId)
                {
                    if (workLine.WorkStatus != WHSWorkStatus::Open)
                    {
                        promptShipments += shipmentTable.ShipmentId;
                    }
                }
            }
        }

        return promptShipments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWeightDiff</Name>
				<Source><![CDATA[
	/// <summary>
	/// Calculates the weight difference between maximum weight of the base shipment load
	/// and the total weight after shipment consolidation.
	/// </summary>
	/// <param name="_baseShipment">
	/// Base shipment record.
	/// </param>
	/// <param name="_shipments">
	/// Container containing shipment ids.
	/// </param>
	/// <returns>
	/// The weight difference.
	/// </returns>
    public static Weight getWeightDiff(WHSShipmentTable _baseShipment, container _shipments)
    {
        int     i;
        Weight  totalWeight;
        Weight  weightDiff;
        

        for (i = 1; i <= conLen(_shipments); i++)
        {
            WHSShipmentTable shipmentTable = WHSShipmentTable::find(conPeek(_shipments, i));

            if (_baseShipment.LoadId != shipmentTable.LoadId)
            {
                totalWeight += WHSShipmentTable::find(conPeek(_shipments, i)).displayTotalWeight();
            }
        }

        if (_baseShipment.LoadId)
        {
            WHSLoadTable loadTable = WHSLoadTable::find(_baseShipment.LoadId);

            totalWeight += loadTable.displayTotalWeight();
            weightDiff = WHSLoadTemplate::find(loadTable.LoadTemplateId).LoadMaxWeight - totalWeight;
        }
        else
        {
            weightDiff = -totalWeight;
        }

        return weightDiff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
	/// <summary>
	/// Constructor method of the class with given parameters.
	/// </summary>
	/// <param name="_baseShipment">
	/// Base shipment record to set to instance.
	/// </param>
	/// <param name="_shipments">
	/// Shipments container to be set to instance.
	/// </param>
	/// <returns>
	/// The created instance.
	/// </returns>
    public static WHSShipConsolidationValidate newStandard(WHSShipmentTable _baseShipment, container _shipments)
    {
        WHSShipConsolidationValidate whsConsolidateShipments = WHSShipConsolidationValidate::construct();
        whsConsolidateShipments.parmBaseShipment(_baseShipment);
        whsConsolidateShipments.parmShipments(_shipments);

        return whsConsolidateShipments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addValidationError</Name>
				<Source><![CDATA[
    protected boolean addValidationError(
        NoYes           _errorHardStop,
        WHSShipmentId   _shipmentId,
        LabelId         _labelId,
        str             _errorParm1 = '',
        str             _errorParm2 = '',
        str             _errorParm3 = '',
        str             _errorParm4 = '')
    {
        str validationErrorMessage = strFmt(SysLabel::labelId2String(_labelId), _errorParm1, _errorParm2, _errorParm3, _errorParm4);

        if (_errorHardStop == NoYes::No)
        {
            boolean userAcceptsValidationError = this.userAcceptsValidationError(validationErrorMessage) == DialogButton::Yes;

            if (userAcceptsValidationError)
            {
                return true;
            }
        }

        return checkFailed(validationErrorMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>userAcceptsValidationError</Name>
				<Source><![CDATA[
    private DialogButton userAcceptsValidationError(str _dialogMessage)
    {
        return Box::yesNo(strFmt('%1 %2', _dialogMessage, "@WAX2197"), DialogButton::Yes);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>