<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOutPaym_Cheque</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendOutPaym_Cheque extends VendOutPaym
{
    CustVendCheque          custVendCheque;

    BankChequeStartNum      firstChequeNum;
    BankChequeQty           numOfBlankCheque;
    ChequeNumMethod         chequeNumMethod;
    BankCheckNumCreated     startChequeNum;
    AddressCity             companyCity;

    DialogField             dialogAccountId;
    DialogField             dialogFromChequeNum;
    DialogField             dialogNumOfBlankCheque;
    DialogField             dialogLookupChequeNum;
    DialogField             dialogCompanyCity;

    // <GBR>
    DialogField             dialogUsePrintManagement;
    NoYes                   usePrintManagement;
    List                    checks_BR;
    // </GBR>

    // <GBR>
    #DEFINE.CurrentVersion(7)
    // </GBR>
    #LOCALMACRO.CurrentList
        accountId
        // <GBR>
        , usePrintManagement
        // </GBR>
    #ENDMACRO

    #LOCALMACRO.CurrentSwappingList
        accountId,
        firstChequeNum,
        numOfBlankCheque,
        chequeNumMethod,
        startChequeNum,
        companyCity
        // <GBR>
        , usePrintManagement
        // </GBR>
    #ENDMACRO

    // This list defines which fields will be persisted and restored via the system's
    // SysLastValue functionality.
    // <GBR>
    #DEFINE.SysLastValuesCurrentVersion(3)
    // </GBR>
    #LOCALMACRO.SysLastValuesList
        firstChequeNum,
        numOfBlankCheque,
        chequeNumMethod,
        startChequeNum,
        companyCity
        // <GBR>
        , usePrintManagement
        // </GBR>
    #ENDMACRO

    // <GBR>
    #LOCALMACRO.SysLastValuesListV1
        firstChequeNum,
        numOfBlankCheque,
        chequeNumMethod,
        startChequeNum,
        companyCity
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>callPrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a printer settings dialog box for the specified payment document type.
    /// </summary>
    /// <param name="_documentType">
    /// The payment document type.
    /// </param>
    /// <returns>
    /// true if the printer settings dialog box was closed with the Ok button; otherwise, false.
    /// </returns>
    boolean callPrinterSettings(PaymDocumentType _documentType)
    {
        SrsPrintDestinationSettings printSettings;
        boolean ok;

        if (_documentType == PaymDocumentType::Document)
        {
            printSettings = new SrsPrintDestinationSettings();
            printSettings.unpack(this.getPrinterSettings(_documentType));

            printSettings.fromPage(1);
            printSettings.toPage(99999999);
            printSettings.printMediumType(
                    custVendCheque.tmpChequePrintout().ChequeFormType == ChequeFormType::ESStyle ?
                    SRSPrintMediumType::Screen : SRSPrintMediumType::Printer);

            ok = SrsReportRunUtil::showSettingsDialog(printSettings);

            if (ok)
            {
                this.updatePrinterSettings(_documentType, printSettings.pack());
            }
        }
        else
        {
            ok = super(_documentType);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the epilogue of the media.
    /// </summary>
    /// <remarks>
    /// For example, an end record for a file.
    /// </remarks>
    void close()
    {
        // <GBR>
        TmpChequePrintout   tmpChequePrintoutAux_BR;
        ListEnumerator      listEnumerator_BR;
        // </GBR>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            listEnumerator_BR   = checks_BR.getEnumerator();

            while (listEnumerator_BR.moveNext())
            {
                tmpChequePrintoutAux_BR.data(listEnumerator_BR.current());
                tmpChequePrintoutAux_BR.insert();
            }

            this.printDocument_BR(tmpChequePrintoutAux_BR);
        }
        else
        {
        // </GBR>

        if (!custVendCheque.tmpChequePrintout().ChequeNum)
        {
            return;
        }

        this.printDocument();
        // <GBR>
        }
        // </GBR>

        if (printPaymAdvice)
        {
            this.printPaymAdvice();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public configurationKeyId configurationKey()
    {
        return configurationkeynum(BankCheque);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendOutPaymRecordRootClassId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the class ID of the corresponding parent of the <c>VendOutPaym_Cheque</c> class.
    /// </summary>
    /// <returns>
    /// The class ID.
    /// </returns>
    /// <remarks>
    /// The class must be inherited from the <c>CustVendOutPaymRecord</c> class.
    /// </remarks>
    public classId custVendOutPaymRecordRootClassId()
    {
        return classnum(VendOutPaymRecord_Cheque);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase   dialog = super();

        if (chequeNumMethod == ChequeNumMethod::Fixed)
        {
            firstChequeNum = 0;
        }

        custVendCheque.parmAccountId            (accountId);
        custVendCheque.parmFirstChequeNum       (firstChequeNum);
        custVendCheque.parmNumOfBlankCheque     (numOfBlankCheque);
        custVendCheque.parmChequeNumMethod      (chequeNumMethod);
        custVendCheque.parmLedgerJournalACType  (LedgerJournalACType::Vend);

        custVendCheque.initChequeNumEx(false);

        startChequeNum = int2str(custVendCheque.parmFirstChequeNum());
        dialogAccountId         = dialog.addFieldValue(extendedTypeStr(CompanyBankAccountId), accountId);
        dialogAccountId.allowEdit(false);

        BankChequeLayout bankChequeLayout = BankChequeLayout::find(custVendCheque.parmAccountId());

        if (bankChequeLayout.ChequeFormType == ChequeFormType::FRStyle)
        {
            if (companyCity == "")
            {
                companyCity = CompanyInfo::find().postalAddress().City;
            }
            dialogCompanyCity   = dialog.addFieldValue(extendedTypeStr(AddressCity), companyCity);
        }

        dialogLookupChequeNum   = dialog.addFieldValue(extendedTypeStr(BankCheckNumCreated), startChequeNum,"@SYS4083");

        if (BankParameters::find().AllowCheckReuse == NoYes::Yes)
        {
            dialogLookupChequeNum.allowEdit(true);
        }
        else
        {
            dialogLookupChequeNum.allowEdit(chequeNumMethod == ChequeNumMethod::Free);
        }

        dialogNumOfBlankCheque = dialog.addFieldValue(extendedtypestr(BankChequeQty), numOfBlankCheque, "@SYS24080");
        dialogNumOfBlankCheque.visible(!BankParameters::find().AllowCreateBlankStatusChecks);

        if (!bankChequeLayout.UseGER)
        {
            this.dialogAddPrintOption(PaymDocumentType::Document, dialog);
        }

        if (BrazilParameters::isEnabled())
        {
            this.dialogAddPrintDocument(PaymDocumentType::PaymAdvice, dialog, true);

            this.initParmDefault();
            dialogUsePrintManagement = dialog.addFieldValue(enumStr(NoYes), usePrintManagement, "@SYS93922", "@SYS93923");

            if (custVendCheque.shouldBlockOverride_BR())
            {
                dialogUsePrintManagement.value(true);
                dialogUsePrintManagement.enabled(false);
            }
        }
        else
        {
            this.dialogAddPrintDocument(PaymDocumentType::PaymAdvice, dialog, true, true, true);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates vendor payment for journal lines.
    /// </summary>
    public void generatePaymentLines()
    {
        #OCCRetryCount
        LedgerJournalTrans          ledgerJournalTrans;
        VendOutPaymRecord_Cheque    vendOutPaymRecord;

        int64 paymentLinesToProcess = this.findQueryRecordCount();
        int64 paymentLinesProcessed;

        SysInstrumentationProgressLogger progresslogger = this.createProgressLogger();
        SysInstrumentationProgressStage progressStage = progressLogger.createStage(CustVendInstrumentationConstants::PaymentGenerationGeneratePaymentLines, paymentLinesToProcess);

        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextWithProgressMonitor(progressStage))
        {
            activityContext.addCustomProperty(CustVendInstrumentationConstants::ClassName, this.getClassName());

            try
            {
                ttsbegin;

                setPrefix("@SYS17561");

                queryRun.reset();
                outPaymRecordList = new List(Types::Class);

                while (queryRun.next())
                {
                    ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));

                    paymentLinesProcessed++;
                    progressLogger.trackProgress(paymentLinesProcessed);

                    if (!this.isOffsetAccountValid(ledgerJournalTrans))
                    {
                        continue;
                    }

                    if (!this.isVendorAccountActiveForDate(ledgerJournalTrans))
                    {
                        warning(strFmt("@SYS115093", ledgerJournalTrans.Voucher));
                        continue;
                    }

                    vendOutPaymRecord = CustVendOutPaymRecord::construct(ledgerJournalTrans.PaymMode,
                                                                            ledgerJournalTrans.PaymSpec,
                                                                            this,
                                                                            this.vendPaym(ledgerJournalTrans));

                    if (vendOutPaymRecord.checkValues(ledgerJournalTrans, this.parmProgress()))
                    {
                        if (!(ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank &&
                                ledgerJournalTrans.BankChequeNum))
                        {
                            if (custVendCheque.checkDataOk(ledgerJournalTrans))
                            {
                                ledgerJournalTrans.reread();
                                custVendCheque.processChequeNum(ledgerJournalTrans);
                                custVendCheque.parmPrintJobSettingsPacked(this.getPrinterSettings(PaymDocumentType::Document));
                                vendOutPaymRecord.parmCustVendCheque(custVendCheque);
                                vendOutPaymRecord.output();

                                vendOutPaymRecord.parmCustVendPaym().ledgerJournalTrans(ledgerJournalTrans.data());
                                outPaymRecordList.addEnd(vendOutPaymRecord);

                                if (ledgerJournalTrans.PaymReference ||
                                    ledgerJournalTrans.BankChequeNum)
                                {
                                    this.setRemittanceAddressAndPaymentStatus(ledgerJournalTrans);
                                    ledgerJournalTrans.update();
                                }
                            }
                        }
                        else
                        {
                            throw error("@SYS18447");
                        }
                    }
                }

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                progressLogger.logRetryOnDeadlock();

                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        progressLogger.logRetryOnUpdateConflict();

                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemittanceAddressAndPaymentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates payment status and address for <c>LegderJournalTrans</c>.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">
    ///     Current <c>LedgerJournalTrans</c>.
    /// </param>>
    protected void setRemittanceAddressAndPaymentStatus(LedgerJournalTrans _ledgerJournalTrans)
    {
        LogisticsPostalAddress logisticsPostalAddress = LogisticsLocationEntity::location2PostalAddress(_ledgerJournalTrans.RemittanceLocation, DateTimeUtil::getSystemDateTime(), true);
        _ledgerJournalTrans.RemittanceAddress = logisticsPostalAddress.RecId;
        _ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::Sent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneratePaymentLinesSort</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sorts the generated payment lines before they are processed.
    /// </summary>
    /// <param name="_queryRun">
    /// The generate payment lines query run.
    /// </param>
    protected void addGeneratePaymentLinesSort(QueryRun _queryRun)
    {
        if (BrazilParameters::isEnabled()
            && VendPaymModeTable::find(paymMode).Posting_BR != Posting_BR::None)
        {
            return;
        }
        else
        {
            super(_queryRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLines_BR</Name>
				<Source><![CDATA[
    public void generatePaymentLines_BR(Posting_BR _postingLevel)
    {
        #OCCRetryCount
        List                        oneVouchers;
        ListEnumerator              oneVouchersEnumerator;
        ChequeOneVoucher_BR         oneVoucher;

        try
        {
            ttsbegin;

            if (!this.checkBankAccountNumber())
            {
                throw error("@SYS18447");
            }

            setPrefix("@SYS17561");

            this.sortQuery_BR(_postingLevel);

            oneVouchers = this.groupLedgerJournalTrans_BR(_postingLevel);

            oneVouchersEnumerator = oneVouchers.getEnumerator();

            while (oneVouchersEnumerator.moveNext())
            {
                oneVoucher = oneVouchersEnumerator.current();

                if (!oneVoucher.checkValues(this.parmProgress()))
                {
                    continue;
                }

                if (custVendCheque.checkDataOk_BR(oneVoucher))
                {
                    custVendCheque.processChequeNum_BR(oneVoucher);
                    custVendCheque.output_BR(oneVoucher);
                    oneVoucher.updateVoucherTransactions();
                }

                checks_BR.addEnd(custVendCheque.tmpChequePrintout());
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        accountId           = dialogAccountId.value();

        if (BankParameters::find().AllowCreateBlankStatusChecks)
        {
            numOfBlankCheque = 0;
        }
        else
        {
            numOfBlankCheque = dialogNumOfBlankCheque.value();
        }

        chequeNumMethod     = BankChequeLayout::find(accountId).ChequeNumMethod;
        startChequeNum      = dialogLookupChequeNum.value();
        firstChequeNum      = str2int(startChequeNum);

        custVendCheque.parmAccountId        (accountId);
        custVendCheque.parmFirstChequeNum   (firstChequeNum);
        custVendCheque.parmNumOfBlankCheque (numOfBlankCheque);
        custVendCheque.parmChequeNumMethod  (chequeNumMethod);

        if (BankChequeLayout::find(custVendCheque.parmAccountId()).ChequeFormType == ChequeFormType::FRStyle)
        {
            custVendCheque.parmCompanyCity(dialogCompanyCity.value());
            companyCity = dialogCompanyCity.value();
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            usePrintManagement  = dialogUsePrintManagement.value();
        }
        // </GBR>

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupLedgerJournalTrans_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Groups the journal lines according to the posting level for the cheque voucher.
    /// </summary>
    /// <param name="_postingLevel">
    /// The posting level to determine the journal lines grouping criteria.
    /// </param>
    /// <returns>
    /// A list of cheque vouchers.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected List groupLedgerJournalTrans_BR(Posting_BR _postingLevel)
    {
        LedgerJournalTrans  ledgerJournalTrans;
        ChequeOneVoucher_BR oneVoucher;
        List                oneVouchers;

        oneVouchers = new List(Types::Class);
        oneVoucher  = new ChequeOneVoucher_BR(_postingLevel);

        queryRun.reset();
        while (queryRun.next())
        {
            ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));

            if (!this.isOffsetAccountValid(ledgerJournalTrans))
                    continue;

            if (oneVoucher.canAddLedgerJournalTrans(ledgerJournalTrans))
            {
                oneVoucher.addLedgerJournalTrans(ledgerJournalTrans);
            }
            else
            {
                if (oneVoucher.parmVoucherTrans().elements() > 0)
                {
                    oneVouchers.addEnd(oneVoucher);
                }

                oneVoucher = new ChequeOneVoucher_BR(_postingLevel);
                oneVoucher.initFromLedgerJournalTrans(ledgerJournalTrans);
                oneVoucher.addLedgerJournalTrans(ledgerJournalTrans);
            }
        }

        if (oneVoucher.parmVoucherTrans().elements() > 0)
        {
            oneVouchers.addEnd(oneVoucher);
        }

        return oneVouchers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        usePrintManagement  = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the format to be displayed in the user interface.
    /// </summary>
    /// <returns>
    /// The name of the format to be displayed in the user interface.
    /// </returns>
    /// <remarks>
    /// The method must return the name of the format to be displayed in the user interface. Formats
    /// without an interface name cannot be used in electronic banking as export formats. Though, they can
    /// serve as parents for other formats.
    /// </remarks>
    PaymInterfaceName interfaceName()
    {
        return "@SYS22495";
    }

]]></Source>
			</Method>
			<Method>
				<Name>interval</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    BankChequeNum interval()
    {
        return custVendCheque.interval();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        custVendCheque = new CustVendCheque();

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            checks_BR   = new List(Types::Record);
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the media and creates the header of the media.
    /// </summary>
    /// <remarks>
    /// For example, creates a start record for a file
    /// </remarks>
    void open()
    {
        custVendCheque.parmAccountId            (accountId);
        custVendCheque.parmFirstChequeNum       (firstChequeNum);
        custVendCheque.parmNumOfBlankCheque     (numOfBlankCheque);
        custVendCheque.parmChequeNumMethod      (chequeNumMethod);
        custVendCheque.parmLedgerJournalACType  (LedgerJournalACType::Vend);
        custVendCheque.parmCompanyCity          (companyCity);

        custVendCheque.initChequeNumEx(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (this.isSwappingPrompt())
        {
            return [#CurrentVersion, #CurrentSwappingList] + [super()];
        }
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the data required for <c>SysLastValues</c>.
    /// </summary>
    /// <returns>
    /// A container that stores the data to be persisted by <c>SysLastValues</c>.
    /// </returns>
    /// <remarks>
    /// The pack and unpack pattern does not have provisions for supporting different serialization and
    /// <c>SysLastValues</c> pack lists. This separate packing mechanism has been implemented for
    /// <c>SysLastValues</c> and is first defined on the class one level above the <c>RunBase</c> or
    /// <c>RunBaseBatch</c> class. Derivative classes also implement this method so that a whole object can
    /// be packed for <c>SysLastValues</c>.
    /// </remarks>
    public container packSysLastValues()
    {
        return [#SysLastValuesCurrentVersion,#SysLastValuesList, custVendPaymPrinterSettings.getAllPrinterSettingsPacked(), super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankAccountID</Name>
				<Source><![CDATA[
    public CompanyBankAccountId parmBankAccountID(CompanyBankAccountId _accountID = accountID)
    {
        CompanyBankAccountId oldAccountId       = accountID;
        ChequeNumMethod      oldChequeNumMethod = chequeNumMethod;

        super(_accountID);
        chequeNumMethod = BankChequeLayout::find(accountID).ChequeNumMethod;

        if (accountID != oldAccountId || chequeNumMethod != oldChequeNumMethod)
        {
            this.resetChequeNum();
        }

        return accountID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocument</Name>
				<Source><![CDATA[
    public void printDocument()
    {
        BankChequePrint bankChequePrint;
        Args            args;

        if (custVendCheque.tmpChequePrintout())
        {
            if (custVendCheque.tmpChequePrintout().ChequeFormType == ChequeFormType::ESStyle
                && this.getPrinterSettings(PaymDocumentType::Document) == conNull())
            {
               this.callPrinterSettings(PaymDocumentType::Document);
            }

            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                if (custVendCheque.tmpChequePrintout().ChequeFormType == ChequeFormType::BRStyle && !usePrintManagement)
                {
                    if (!this.callPrinterSettings(PaymDocumentType::Document))
                    {
                        return;
                    }
                }
            }
            // </GBR>

            bankChequePrint = BankChequePrint::construct(custVendCheque.tmpChequePrintout(),
                                                         this.getPrinterSettings(PaymDocumentType::Document),
                                                         custVendCheque);

            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                bankChequePrint.parmUsePrintManagement_BR(usePrintManagement);
            }
            // </GBR>
            if (LedgerJournalTable::find(this.parmLedgerJournalId()).JournalType == LedgerJournalType::PayrollDisbursement)
            {
                bankChequePrint.parmCustVendCheque(custVendCheque);
                args = new Args();
                args.caller(bankChequePrint.parmCustVendCheque());
            }
            else
            {
                bankChequePrint.printDocument();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocument_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts printing cheque process
    /// </summary>
    /// <param name="_tmpChequePrintout">
    /// In memory table reference
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void printDocument_BR(TmpChequePrintout _tmpChequePrintout)
    {
        BankChequePrint bankChequePrint;

        if (_tmpChequePrintout)
        {
            if (_tmpChequePrintout.ChequeFormType == ChequeFormType::ESStyle
                && this.getPrinterSettings(PaymDocumentType::Document) == conNull())
            {
               this.callPrinterSettings(PaymDocumentType::Document);
            }

            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                if (_tmpChequePrintout.ChequeFormType == ChequeFormType::BRStyle && !usePrintManagement)
                {
                    if (!this.callPrinterSettings(PaymDocumentType::Document))
                    {
                        return;
                    }
                }
            }
            // </GBR>

            bankChequePrint = BankChequePrint::construct(_tmpChequePrintout,
                                                         this.getPrinterSettings(PaymDocumentType::Document),
                                                         custVendCheque);

            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                bankChequePrint.parmUsePrintManagement_BR(usePrintManagement);
            }
            // </GBR>

            bankChequePrint.printDocument();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPaymAdvice</Name>
				<Source><![CDATA[
    public void printPaymAdvice()
    {
        Args args = new Args();

        if (BrazilParameters::isEnabled())
        {
            this.runReport(menuitemoutputstr(BankPaymAdviceChequePrint_BR));
        }
        else if (BankPaymAdviceReportV2FeatureExposure::isEnabled())
        {
            BankPaymAdviceDefaultParameters defaultParameters = BankPaymAdviceDefaultParameters::newForPaymAdvicePrintRun(
                this.getPaymRecords(),
                new SrsPrintDestinationSettings(this.getPrinterSettings(PaymDocumentType::PaymAdvice)),
                printPaymAdvicePrintMgmt);

            args.parmObject(defaultParameters);

            new MenuFunction(menuitemOutputStr(BankPaymAdviceVendV2), MenuItemType::Output).run(args);
        }
        else
        {
            args.caller(this);
            args.parmObject(this.getPaymRecords());
            args.parmEnumType(enumNum(NoYes));
            args.parmEnum(printPaymAdvicePrintMgmt);

            new MenuFunction(menuitemOutputStr(BankPaymAdviceVend), MenuItemType::Output).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetChequeNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears check related class variables.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void resetChequeNum()
    {
        numOfBlankCheque = 0;
        firstChequeNum   = 0;
        startChequeNum   = "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortQuery_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sorts the query in order to facilitate the journal lines grouping.
    /// </summary>
    /// <param name="_postingLevel">
    /// The posting level to determine the journal lines grouping criteria.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void sortQuery_BR(Posting_BR _postingLevel)
    {
        if (_postingLevel == Posting_BR::Vendor)
        {
            queryRun.query().dataSourceTable(tableNum(LedgerJournalTrans)).addSortField(fieldNum(LedgerJournalTrans, OffsetLedgerDimension));
            queryRun.query().dataSourceTable(tableNum(LedgerJournalTrans)).addSortField(fieldNum(LedgerJournalTrans, TransDate));
            queryRun.query().dataSourceTable(tableNum(LedgerJournalTrans)).addSortField(fieldNum(LedgerJournalTrans, LedgerDimension));
        }
        else if (_postingLevel == Posting_BR::Bank)
        {
            queryRun.query().dataSourceTable(tableNum(LedgerJournalTrans)).addSortField(fieldNum(LedgerJournalTrans, OffsetLedgerDimension));
            queryRun.query().dataSourceTable(tableNum(LedgerJournalTrans)).addSortField(fieldNum(LedgerJournalTrans, TransDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean     ret;
        Integer     version = RunBase::getVersion(packedClass);
        container   base;

        // <GBR>
        #LOCALMACRO.ListV6
            accountId
        #ENDMACRO
        // </GBR>

        switch (version)
        {
            case #CurrentVersion:
                if (!this.isSwappingPrompt())
                {
                    [version, #CurrentList, base] = packedClass;
                }
                else
                {
                    [version, #CurrentSwappingList, base] = packedClass;
                }

                ret = super(base);
                break;

            // <GBR>
            case 6:
                if (!this.isSwappingPrompt())
                {
                    [version, #ListV6, base] = packedClass;
                }
                else
                {
                    [version, #CurrentSwappingList, base] = packedClass;
                }

                ret = super(base);
                break;
            // </GBR>

            default :
                return false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the data required for <c>SysLastValues</c>.
    /// </summary>
    /// <param name="_packedValues">
    /// The values stored by the <c>SysLastValues</c> framework that are to be unpacked.
    /// </param>
    /// <remarks>
    /// The pack and unpack pattern does not have provisions for supporting different serialization and
    /// <c>SysLastValues</c> pack lists. This separate packing mechanism has been implemented for
    /// <c>SysLastValues</c> and is first defined on the class one level above the <c>RunBase</c> or
    /// <c>RunBaseBatch</c> class. Derivative classes also implement this method so that a whole object can
    /// be unpacked for <c>SysLastValues</c>.
    /// </remarks>
    public void unpackSysLastValues(container _packedValues)
    {
        container   baseClassPackedValues;
        container   packedPrinterSettings;
        Version     version = RunBase::getVersion(_packedValues);

        switch (version)
        {
            case #SysLastValuesCurrentVersion:
                [version, #SysLastValuesList, packedPrinterSettings, baseClassPackedValues] = _packedValues;
                super(baseClassPackedValues);
                break;
            // <GBR>
            case 2:
                [version, #SysLastValuesListV1, packedPrinterSettings, baseClassPackedValues] = _packedValues;
                super(baseClassPackedValues);
                break;
            // </GBR>
        }

        if (packedPrinterSettings)
        {
            // Recreate the object from the packed values.
            custVendPaymPrinterSettings = CustVendPaymPrinterSettings::newForPackedPrinterSettings(packedPrinterSettings);
        }
        else
        {
            custVendPaymPrinterSettings = new CustVendPaymPrinterSettings();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the state of the internal variables.
    /// </summary>
    /// <param name="_calledFrom">
    /// Identifies the object from which this method is called; otherwise, null.
    /// </param>
    /// <returns>
    /// true if the internal variables are valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method must validate the state of the internal variables. It is called before closing the
    /// dialog box, and is called in the <c>run</c> method.It must only contain code that adds warnings to
    /// the Infolog.Throw is not allowed within this method.The method returns errors using the
    /// <c>Global::CheckFailed</c> method.Export formats that are designed to handle only one method of
    /// payment per payment media must call the <c>checkUniquePaymMode</c> method.
    /// </remarks>
    boolean validate(Object _calledFrom = null)
    {
        boolean             ret;
        BankChequeLayout    bankChequeLayout = BankChequeLayout::find(accountID);

        ret = bankChequeLayout.checkBitmapsExist();

        if (!accountID)
        {
            ret = checkFailed("@SYS28489");
        }
        else
        {
            ret = BankAccountTable::checkIsActive(accountID);
        }

        if (!BankChequeLayout::find(accountID))
        {
            ret = checkFailed(strfmt("@SYS28490", accountID));
        }

        if (BankChequeLayout::find(custVendCheque.parmAccountId()).ChequeFormType == ChequeFormType::FRStyle && !companyCity)
        {
            ret = checkFailed("@SYS117931");
        }

        ret = ret && custVendCheque.validateFreeChequeNumber(startChequeNum);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS24060";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>