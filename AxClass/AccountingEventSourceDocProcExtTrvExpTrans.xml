<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccountingEventSourceDocProcExtTrvExpTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AccountingEventSourceDocProcExtTrvExpTrans</c> class handles accounting event creation for multiple vendor scenarios.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_ExpenseReport), SourceDocument_ExpenseReport::ExpenseReport)]
public class AccountingEventSourceDocProcExtTrvExpTrans extends AccountingEventSourceDocumentProcessorExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAccountingEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>AccountingEvent</c> record for the specified source document with the specified accounting date, accounting type, and accounting event state.
    /// </summary>
    /// <param name="_sourceDocumentHeaderId">
    /// The record identity of the <c>SourceDocumentHeader</c>.
    /// </param>
    /// <param name="_accountingDate">
    /// The new accounting date.
    /// </param>
    /// <param name="_accountingEventType">
    /// The accounting event type.
    /// </param>
    /// <param name="_accountingEventState">
    /// The new accounting event state.
    /// </param>
    /// <param name="_voucher">
    /// Voucher number.
    /// </param>
    /// <returns>
    /// Accounting event recId.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AccountingEventRecId createAccountingEvent(
        SourceDocumentHeaderRecId    _sourceDocumentHeaderId,
        AccountingDate               _accountingDate,
        AccountingEventType          _accountingEventType,
        AccountingEventState         _accountingEventState,
        Voucher                      _voucher)

    {
        AccountingEvent                 accountingEvent;

        ttsbegin;

        //Insert any new accounting events that we need to create for the source document
        accountingEvent.SourceDocumentHeader    = _sourceDocumentHeaderId;
        accountingEvent.Type                    = _accountingEventType;
        accountingEvent.State                   = _accountingEventState;
        accountingEvent.AccountingDate          = _accountingDate;
        accountingEvent.insert();

        //Update the distributions with the newly created events
        AccountingEventSourceDocProcExtTrvExpTrans::updateDistributionsForEvent(accountingEvent.RecId, _accountingDate, _sourceDocumentHeaderId, _voucher);

        ttscommit;

        return accountingEvent.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTrvAccountingEventVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts accounting event voucher in the table <c>TrvAccountingEventVoucher</c>.
    /// </summary>
    /// <param name="_sourceDocumentHeaderId">
    /// The record identity of the <c>SourceDocumentHeader</c>.
    /// </param>
    /// <param name="_voucher">
    /// The voucher identity.
    /// </param>
    /// <param name="_accountingEventRecId">
    /// The accounting event RecId.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertTrvAccountingEventVoucher(SourceDocumentHeaderRecId _sourceDocumentHeaderId, Voucher _voucher, AccountingEventRecId _accountingEventRecId)

    {
        TrvAccountingEventVoucher   trvAccountingEventVoucher;

        ttsBegin;

        trvAccountingEventVoucher.AccountingEvent = _accountingEventRecId;
        trvAccountingEventVoucher.Voucher = _voucher;
        trvAccountingEventVoucher.SourceDocumentHeader = _sourceDocumentHeaderId;
        trvAccountingEventVoucher.insert();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the accounting event source document processor extension events.
    /// </summary>
    protected void subscribe()
    {
        super();

        accountingEventSourceDocumentProcessor.creatingAccountingEvents += eventhandler(this.trvAccVoucherPerAccEventsEventHandler);
    }

]]></Source>
			</Method>
			<Method>
				<Name>trvAccVoucherPerAccEventsEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>AccountingEvent</c> record for the specified source document with the specified accounting type, and accounting event state.
    /// </summary>
    /// <param name="_sourceDocumentHeaderId">
    /// The record identity of the <c>SourceDocumentHeader</c>.
    /// </param>
    /// <param name="_accountingEventType">
    /// The accounting event type.
    /// </param>
    /// <param name="_accountingEventState">
    /// The new accounting event state.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void trvAccVoucherPerAccEventsEventHandler(
        SourceDocumentHeaderRecId       _sourceDocumentHeaderId,
        AccountingEventType             _accountingEventType,
        AccountingEventState            _accountingEventState)
    {
        SourceDocumentLine              sourceDocumentLine;
        AccountingDistribution          accountingDistribution;
        AccountingEvent                 existingAccountingEvent;
        TrvExpTable                     trvExpTable;
        TrvExpTrans                     trvExpTrans;
        RefRecId                        accountingEventRecId;

        // Must create each event individually because more than one accounting event of the same event type can exist on a given day.
        while select Voucher from trvExpTrans
            group by trvExpTrans.Voucher, accountingDistribution.AccountingDate
            join RecId, SourceDocumentHeader from trvExpTable
                where trvExpTable.RecId == trvExpTrans.TrvExpTable
                    && trvExpTable.SourceDocumentHeader == _sourceDocumentHeaderId
            join AccountingDate from accountingDistribution
            where accountingDistribution.AccountingEvent == 0 &&
                    accountingDistribution.SourceDocumentHeader == _sourceDocumentHeaderId &&
                    accountingDistribution.SourceDocumentLine == trvExpTrans.SourceDocumentLine
            exists join sourceDocumentLine
                where sourceDocumentLine.RecId == accountingDistribution.SourceDocumentLine &&
                    (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Completed ||
                            sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Canceled)
            notexists join existingAccountingEvent
                where existingAccountingEvent.AccountingDate == accountingDistribution.AccountingDate &&
                    existingAccountingEvent.SourceDocumentHeader == _sourceDocumentHeaderId &&
                    existingAccountingEvent.State == AccountingEventState::Started &&
                    existingAccountingEvent.Type == _accountingEventType
        {
            accountingEventRecId = this.createAccountingEvent(_sourceDocumentHeaderId, accountingDistribution.AccountingDate, _accountingEventType, _accountingEventState, trvExpTrans.Voucher);

            //Update the distributions with the newly created events
            AccountingEventSourceDocProcExtTrvExpTrans::updateDistributionsForEvent(accountingEventRecId, accountingDistribution.AccountingDate, _sourceDocumentHeaderId, trvExpTrans.Voucher);

            this.insertTrvAccountingEventVoucher(_sourceDocumentHeaderId, trvExpTrans.Voucher, accountingEventRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDistributionsForEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the accounting event for the related distributions.
    /// </summary>
    /// <param name = "_accountingEventRecId">
    /// Accounting event recid.
    /// </param>
    /// <param name = "_accountingDate">
    /// The accounting date.
    /// </param>
    /// <param name = "_sourceDocumentRecId">
    /// The accounting event RecId.
    /// </param>
    /// <param name = "_voucher">
    /// The voucher identity.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void updateDistributionsForEvent(recId _accountingEventRecId, AccountingDate _accountingDate, recId _sourceDocumentRecId, Voucher _voucher)
    {
        AccountingDistribution      accountingDistribution;
        AccountingDistribution      accountingDistributionChild;
        AccountingDistribution      accountingDistributionParent;
        SourceDocumentLine          sourceDocumentLine;
        TrvExpTrans                 trvExpTrans;

        ttsBegin;

        update_recordSet accountingDistribution
            setting AccountingEvent = _accountingEventRecId
            where accountingDistribution.AccountingDate == _accountingDate
               && accountingDistribution.AccountingEvent == 0
               && accountingDistribution.SourceDocumentHeader == _sourceDocumentRecId
            join sourceDocumentLine
            where sourceDocumentLine.RecId == accountingDistribution.SourceDocumentLine
               && (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Completed || sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Canceled)
            join trvExpTrans
            where trvExpTrans.SourceDocumentLine == accountingDistribution.SourceDocumentLine
               && trvExpTrans.Voucher == _voucher;

        // update child distributions with this accounting event -- like tax distributions.
        update_recordSet accountingDistributionChild
            setting AccountingEvent = accountingDistributionParent.AccountingEvent
                where accountingDistributionChild.AccountingEvent == 0
            join accountingDistributionParent
                where accountingDistributionParent.RecId == accountingDistributionChild.ParentDistribution
                && accountingDistributionParent.AccountingEvent != 0;

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>