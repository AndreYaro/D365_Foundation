<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocFactory_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EFDocFactory_BR
{
    #FiscalDocumentModels_BR
    private const StateIBGECode_BR ParanaIbgeStateCode = '41';
    private const StateIBGECode_BR BahiaIbgeStateCode  = '29';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAccessKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates an access key for a NF-e.
    /// </summary>
    /// <param name="_version">The NF-e version.</param>
    /// <param name="_numericCode">The numeric code for the electronic fiscal document.</param>
    /// <param name="_fiscalDocument">The <c>FiscalDocument_BR</c> record of the fiscal document from which to generate the access key.</param>
    /// <returns>A string with the access key.</returns>
    public str createAccessKey(EFiscalDocVersion_BR _version, int _numericCode, FiscalDocument_BR _fiscalDocument)
    {
        str accessKey = this.createAccesKeyEFiscalDocVersionSwitch(_version, _numericCode, _fiscalDocument);

        if (!accessKey)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return accessKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAccesKeyEFiscalDocVersionSwitch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates an access key for a NF-e.
    /// </summary>
    /// <param name="_version">The NF-e version.</param>
    /// <param name="_numericCode">The numeric code for the electronic fiscal document.</param>
    /// <param name="_fiscalDocument">The <c>FiscalDocument_BR</c> record of the fiscal document from which to generate the access key.</param>
    /// <returns>A string with the access key.</returns>
    protected str createAccesKeyEFiscalDocVersionSwitch(
        EFiscalDocVersion_BR _version,
        int _numericCode,
        FiscalDocument_BR _fiscalDocument)
    {
        str ret;

        switch (_version)
        {
            case EFiscalDocVersion_BR::V4:
            case EFiscalDocVersion_BR::V31:
            case EFiscalDocVersion_BR::V40:
                ret = EFDocAccessKeyV4_BR::construct().generate(_numericCode, _fiscalDocument);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCancelBySubstitutionMsgFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the message format for cancellation by substitution XML messages.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The fiscal establishment that owns the message.
    /// </param>
    /// <returns>
    /// An <c>IEFEventDocMsgFormat_BR</c> object representing a cancelling by substitution XML message.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws an error if the version of the cancel web service does not have a format class associated.
    /// </exception>
    [Hookable(false)]
    internal EFEventDocMsgFormat_Cancel_BR createCancelBySubstitutionMsgFormat(FiscalEstablishment_BR _fiscalEstablishment)
    {
        EFDocWebServiceParameters_BR parameters = this.getEventParameters(_fiscalEstablishment);

        switch (parameters.Version)
        {
            case EFDocConstants_BR::EFDocLayoutVersion100:
                return new EFEventDocMsgFormat_CancelBySub_BR(
                    EFDocAuthority_BR::findById(parameters.Authority).convertAccentedCharacters);

            default:
                throw Error(strfmt("@GLS62697", EFDocWebService_BR::Events));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCancelEventMsgFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the message format for cancellation XML messages.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The fiscal establishment that owns the message.
    /// </param>
    /// <returns>
    /// An <c>IEFEventDocMsgFormat_BR</c> object representing a cancelling XML message.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws an error if the version of the cancel web service does not have a format class associated.
    /// </exception>
    [Hookable(false)]
    internal IEFEventDocMsgFormat_BR createCancelEventMsgFormat(FiscalEstablishment_BR _fiscalEstablishment)
    {
        EFDocWebServiceParameters_BR parameters = this.getEventParameters(_fiscalEstablishment);;
        EFDocAuthority_BR authority = EFDocAuthority_BR::findById(parameters.Authority);
        
        switch (parameters.Version)
        {
            case EFDocConstants_BR::EFDocLayoutVersion100:
                return new EFEventDocMsgFormat_Cancel_BR(authority.convertAccentedCharacters);
            
            default:
                throw Error(strfmt("@GLS62697", EFDocWebService_BR::Events));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEventTransport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the message transport to be used when sending event XML messages.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The fiscal establishment that owns the message.
    /// </param>
    /// <returns>
    /// An <c>IEFDocMsgTransport</c> object that is the transport to be used for event messages.
    /// </returns>
    [Hookable(false)]
    internal IEFDocMsgTransport createEventTransport(FiscalEstablishment_BR _fiscalEstablishment)
    {
        EFDocWebServiceParameters_BR parameters = this.getEventParameters(_fiscalEstablishment);

        return EFDocMsgTransport_WebService_BR::newFromEvent(
            _fiscalEstablishment,
            parameters.Version,
            parameters.URL);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInquireMsgFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an object that formats the XML message.
    /// </summary>
    /// <param name="_authorityId">
    /// The Id of the authority that will be used to create the transport.
    /// </param>
    /// <param name="_formatVersion">
    /// The version of the format classes to be used
    /// </param>
    /// <returns>
    /// An object that implements <c>IEFDocMsgFormat</c> interface for the given webservice.
    /// </returns>
    /// <remarks>
    /// This is a simpler version of the method that constructs the Inquire Message Format so that it can be used to inquire Nfes issued by third parties
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// The format class for the SubmitInquire webservice could not be found
    /// </exception>
    public IEFDocMsgFormat createInquireMsgFormat(EFDocAuthorityId_BR _authorityId, EFiscalDocVersion_BR _formatVersion)
    {
        SysDictClass                    sysDictClass;
        EFDocWebServiceConfigurator_BR  configurator;
        EFDocWebService_BR inquireWebService = EFDocWebService_BR::SubmitInquire;

        configurator = new EFDocWebServiceConfigurator_BR(EFDocEnvironment_BR::Production,
                                                          _formatVersion,
                                                          _authorityId,
                                                          inquireWebService);

        if (!configurator.getFormatClassId())
        {
            throw Error(strfmt("@GLS62697", inquireWebService));
        }

        sysDictClass = new SysDictClass(configurator.getFormatClassId());

        return sysDictClass.makeObject(configurator.shouldConvertAccentedChars());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInquireTransport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an inquire transport object for a given message type.
    /// </summary>
    /// <param name="_fiscalEstablishment">Fiscal establishment from which to retrieve the date.</param>
    /// <param name="_messageType">Type of the message to be inquired.</param>
    /// <param name="_contingencyMode">The contingency mode for which to create the transport.</param>
    /// <param name="_fiscalDocumentModel">
    /// The fiscal document model that will be used to create the transport
    /// </param>
    /// <returns>An object that implements IEFDocMsgTransport interface.</returns>
    public IEFDocMsgTransport createInquireTransport(FiscalEstablishment_BR _fiscalEstablishment, EFDocMessageType_BR _messageType, EFDocContingMode_BR _contingencyMode, FiscalDocumentModel_BR _fiscalDocumentModel = #FiscalDocModel_55)
    {
        IEFDocMsgTransport transport = this.createInquireTransportEFiscalDocVersionSwitch(
            _fiscalEstablishment,
            _messageType,
            _contingencyMode,
            _fiscalDocumentModel);

        if (!transport)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return transport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInquireTransportEFiscalDocVersionSwitch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an inquire transport object for a given message type.
    /// </summary>
    /// <param name="_fiscalEstablishment">Fiscal establishment from which to retrieve the date.</param>
    /// <param name="_messageType">Type of the message to be inquired.</param>
    /// <param name="_contingencyMode">The contingency mode for which to create the transport.</param>
    /// <param name="_fiscalDocumentModel">
    /// The fiscal document model that will be used to create the transport
    /// </param>
    /// <returns>An object that implements IEFDocMsgTransport interface.</returns>
    protected IEFDocMsgTransport createInquireTransportEFiscalDocVersionSwitch(
        FiscalEstablishment_BR _fiscalEstablishment,
        EFDocMessageType_BR _messageType,
        EFDocContingMode_BR _contingencyMode,
        FiscalDocumentModel_BR _fiscalDocumentModel)
    {
        IEFDocMsgTransport transport;

        EFiscalDocVersion_BR efDocVersion = _fiscalDocumentModel == EFDocConstants_BR::Model65
            ? _fiscalEstablishment.ConsumerEFDocVersion
            : _fiscalEstablishment.EFDocVersion;

        switch (efDocVersion)
        {
            case EFiscalDocVersion_BR::V4 :
            case EFiscalDocVersion_BR::V31 :
            case EFiscalDocVersion_BR::V40 :
                switch (_messageType)
                {
                    case EFDocMessageType_BR::Submit :
                        transport = EFDocMsgTransport_WebService_BR::newFromWebService(
                            _fiscalEstablishment,
                            EFDocWebService_BR::SubmitInquire,
                            this.getAuthorityIdByModel(_fiscalEstablishment, _contingencyMode, _fiscalDocumentModel),
                            _fiscalDocumentModel);

                        break;
                }

                break;
        }

        return transport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMsgFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an object that formats the XML message.
    /// </summary>
    /// <param name="_fiscalEstablishment">Fiscal establishment related to the message.</param>
    /// <param name="_webService">The webservice that will receive the message.</param>
    /// <param name="_fiscaldocument">Fiscal document related to the message.</param>
    /// <returns>An object that implements <c>IEFDocMsgFormat</c> interface for the given webservice.</returns>
    public IEFDocMsgFormat createMsgFormat(FiscalEstablishment_BR _fiscalEstablishment, EFDocWebService_BR _webService, FiscalDocument_BR _fiscaldocument = null)
    {
        SysDictClass                    sysDictClass;
        EFDocWebServiceConfigurator_BR  configurator;

        EFiscalDocVersion_BR            eFiscalDocVersion;
        EFDocEnvironment_BR             eFDocEnvironment;
        EFDocAuthorityId_BR             authorityId;

        if (_fiscaldocument.Model == EFDocConstants_BR::Model65)
        {
            authorityId         = _fiscalEstablishment.ConsumerEFDocAuthority;
            eFiscalDocVersion   = _fiscalEstablishment.ConsumerEFDocVersion;
            eFDocEnvironment    = _fiscalEstablishment.ConsumerEFDocEnvironment;
        }
        else
        {
            authorityId         = _fiscalEstablishment.EFDocAuthority;
            eFiscalDocVersion   = _fiscalEstablishment.EFDocVersion;
            eFDocEnvironment    = _fiscalEstablishment.EFDocEnvironment;
        }

        configurator = new EFDocWebServiceConfigurator_BR(eFDocEnvironment,
                                                          eFiscalDocVersion,
                                                          authorityId,
                                                          _webService);

        if (!configurator.getFormatClassId())
        {
            throw Error(strfmt("@GLS62697", _webService));
        }

        sysDictClass = new SysDictClass(configurator.getFormatClassId());

        return sysDictClass.makeObject(configurator.shouldConvertAccentedChars());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnTransport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a return transport object for the given message type.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// Fiscal establishment to which the transport will be created.
    /// </param>
    /// <param name="_messageType">
    /// The type of the message to be returned.
    /// </param>
    /// <param name="_contingencyMode">
    /// The contingency mode for which to create the transport.
    /// </param>
    /// <param name="_fiscalDocumentModel">
    /// The fiscal document model that will be used to create the transport
    /// </param>
    /// <returns>An object that implements <c>IEFDocMsgTransport</c> interface for the returns transport.</returns>
    public IEFDocMsgTransport createReturnTransport(FiscalEstablishment_BR _fiscalEstablishment, EFDocMessageType_BR _messageType, EFDocContingMode_BR _contingencyMode, FiscalDocumentModel_BR _fiscalDocumentModel = #FiscalDocModel_55)
    {
        IEFDocMsgTransport transport = this.createReturnTransportEFiscalDocVersionSwitch(
            _fiscalEstablishment,
            _messageType,
            _contingencyMode,
            _fiscalDocumentModel);

        if (!transport)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return transport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReturnTransportEFiscalDocVersionSwitch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a return transport object for the given message type.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// Fiscal establishment to which the transport will be created.
    /// </param>
    /// <param name="_messageType">
    /// The type of the message to be returned.
    /// </param>
    /// <param name="_contingencyMode">
    /// The contingency mode for which to create the transport.
    /// </param>
    /// <param name="_fiscalDocumentModel">
    /// The fiscal document model that will be used to create the transport
    /// </param>
    /// <returns>An object that implements <c>IEFDocMsgTransport</c> interface for the returns transport.</returns>
    public IEFDocMsgTransport createReturnTransportEFiscalDocVersionSwitch(
        FiscalEstablishment_BR _fiscalEstablishment,
        EFDocMessageType_BR _messageType,
        EFDocContingMode_BR _contingencyMode,
        FiscalDocumentModel_BR _fiscalDocumentModel)
    {
        IEFDocMsgTransport transport;

        switch (_fiscalEstablishment.EFDocVersion)
        {
            case EFiscalDocVersion_BR::V4 :
            case EFiscalDocVersion_BR::V31 :
            case EFiscalDocVersion_BR::V40 :
                switch (_messageType)
                {
                    case EFDocMessageType_BR::Submit :
                        transport = EFDocMsgTransport_WebService_BR::newFromWebService(_fiscalEstablishment, EFDocWebService_BR::SubmitReturn, this.getAuthorityId(_fiscalEstablishment, _contingencyMode), _fiscalDocumentModel);
                        break;

                    default : throw Error(strfmt("@GLS62695", _messageType));
                }
                break;
        }

        return transport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSendTransport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a submit transport object for the given message type.
    /// </summary>
    /// <param name="_fiscalEstablishment">Fiscal establishment related to the message</param>
    /// <param name="_messageType">The type of the message to be submitted.</param>
    /// <param name="_contingencyMode">The contingency mode for which to create the transport.</param>
    /// <param name="_fiscalDocumentModel">
    /// The fiscal document model that will be used to create the transport
    /// </param>
    /// <returns>An object that implements <c>IEFDocMsgTransport</c> interface for the submit transport.</returns>
    public IEFDocMsgTransport createSendTransport(FiscalEstablishment_BR _fiscalEstablishment, EFDocMessageType_BR _messageType, EFDocContingMode_BR _contingencyMode, FiscalDocumentModel_BR _fiscalDocumentModel = #FiscalDocModel_55)
    {
        EFDocWebService_BR webService;

        switch (_messageType)
        {
            case EFDocMessageType_BR::Submit    : webService = EFDocWebService_BR::Submit;      break;
            case EFDocMessageType_BR::Cancel    : webService = EFDocWebService_BR::Cancel;      break;
            case EFDocMessageType_BR::Discard   : webService = EFDocWebService_BR::Discard;     break;

            default : throw Error(strfmt("@GLS62696", _messageType));
        }

        IEFDocMsgTransport transport = this.createSendTransportEFiscalDocVersionSwitch(
            _fiscalEstablishment,
            webService,
            _contingencyMode,
            _fiscalDocumentModel);

        if (!transport)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return transport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSendTransportEFiscalDocVersionSwitch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a submit transport object for the given web service type.
    /// </summary>
    /// <param name="_fiscalEstablishment">Fiscal establishment related to the message</param>
    /// <param name="_webService">The type of web service.</param>
    /// <param name="_contingencyMode">The contingency mode for which to create the transport.</param>
    /// <param name="_fiscalDocumentModel">
    /// The fiscal document model that will be used to create the transport
    /// </param>
    /// <returns>An object that implements <c>IEFDocMsgTransport</c> interface for the submit transport.</returns>
    public IEFDocMsgTransport createSendTransportEFiscalDocVersionSwitch(
        FiscalEstablishment_BR _fiscalEstablishment,
        EFDocWebService_BR _webService,
        EFDocContingMode_BR _contingencyMode,
        FiscalDocumentModel_BR _fiscalDocumentModel)
    {
        IEFDocMsgTransport transport;

        switch (_fiscalEstablishment.EFDocVersion)
        {
            case EFiscalDocVersion_BR::V4 :
            case EFiscalDocVersion_BR::V31 :
            case EFiscalDocVersion_BR::V40 :
                transport = EFDocMsgTransport_WebService_BR::newFromWebService(_fiscalEstablishment, _webService, this.getAuthorityId(_fiscalEstablishment, _contingencyMode), _fiscalDocumentModel);
                break;
        }

        return transport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createServiceInquireTransport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an inquire transport object for a given message type.
    /// </summary>
    /// <param name="_efDocServiceInquireParams">Params to create the transport from.</param>
    /// <returns>An object that implements IEFDocMsgTransport interface.</returns>
    public IEFDocMsgTransport createServiceInquireTransport(EFDocServiceInquireParams_BR _efDocServiceInquireParams)
    {
        IEFDocMsgTransport transport;

        transport = EFDocMsgTransport_WebService_BR::newFromServiceInquire(_efDocServiceInquireParams);

        return transport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createThirdPartyDocInquireTransport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an inquire transport object
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The fiscal establishment to create the transport to
    /// </param>
    /// <param name="_authorityId">
    /// The id of the authority to create the transport to
    /// </param>
    /// <param name="_stateIbgeCode">
    /// The IBGE code of the state
    /// </param>
    /// <returns>
    /// An object that implements IEFDocMsgTransport interface
    /// </returns>
    /// <remarks>
    /// This is a simpler version of the method that constructs the Inquire Transport so that it can be used to inquire Nfes issued by third parties
    /// </remarks>
    public IEFDocMsgTransport createThirdPartyDocInquireTransport(FiscalEstablishment_BR _fiscalEstablishment, EFDocAuthorityId_BR _authorityId, StateIBGECode_BR _stateIbgeCode = '')
    {
        EFDocMsgTransport_WebService_BR transport = this.createThirdPartyDocInquireTransportEFiscalDocVersionSwitch(
            _fiscalEstablishment,
            _authorityId);

        if (!transport)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        transport.parmEnvironment(EFDocEnvironment_BR::Production);
        transport.parmIssuingStateCode(_stateIbgeCode);

        return transport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createThirdPartyDocInquireTransportEFiscalDocVersionSwitch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an inquire transport object
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The fiscal establishment to create the transport to
    /// </param>
    /// <param name="_authorityId">
    /// The id of the authority to create the transport to
    /// </param>
    /// <returns>
    /// An object that implements IEFDocMsgTransport interface
    /// </returns>
    /// <remarks>
    /// This is a simpler version of the method that constructs the Inquire Transport so that it can be used to inquire Nfes issued by third parties
    /// </remarks>
    protected IEFDocMsgTransport createThirdPartyDocInquireTransportEFiscalDocVersionSwitch(
        FiscalEstablishment_BR _fiscalEstablishment,
        EFDocAuthorityId_BR _authorityId)
    {
        EFDocMsgTransport_WebService_BR transport;

        switch (_fiscalEstablishment.EFDocVersion)
        {
            case EFiscalDocVersion_BR::V4 :
            case EFiscalDocVersion_BR::V31 :
            case EFiscalDocVersion_BR::V40 :
                transport = EFDocMsgTransport_WebService_BR::newFromWebService(_fiscalEstablishment, EFDocWebService_BR::SubmitInquire, _authorityId);
                break;
        }

        return transport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWebServiceData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an EFDocWebServiceData_BR object which provides information about the web service proxy classes.
    /// </summary>
    /// <param name="_version">The NF-e version.</param>
    /// <param name="_environment">The environment being used.</param>
    /// <param name="_webService">The type of web service to be contacted.</param>
    /// <param name="_issuingStateIbgeCode">The IBGE code of the state that the NF-e is being issued to.</param>
    /// <param name="_authority">The authority that will receive the NF-e.</param>
    /// <returns>The proper instance of EFDocWebServiceData_BR class.</returns>
    public EFDocWebServiceData_BR createWebServiceData(EFiscalDocVersion_BR _version, EFDocEnvironment_BR _environment, EFDocWebService_BR _webService, CityIBGECode_BR _issuingStateIbgeCode = '', EFDocAuthority_BR _authority = null)
    {
        EFDocWebServiceData_BR webServiceData = this.createWebServiceDataEFiscalDocVersionSwitch(
            _version,
            _environment,
            _webService,
            _issuingStateIbgeCode,
            _authority);

        if (!webServiceData)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return webServiceData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWebServiceDataEFiscalDocVersionSwitch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an EFDocWebServiceData_BR object which provides information about the web service proxy classes.
    /// </summary>
    /// <param name="_version">The NF-e version.</param>
    /// <param name="_environment">The environment being used.</param>
    /// <param name="_webService">The type of web service to be contacted.</param>
    /// <param name="_issuingStateIbgeCode">The IBGE code of the state that the NF-e is being issued to.</param>
    /// <param name="_authority">The authority that will receive the NF-e.</param>
    /// <returns>The proper instance of EFDocWebServiceData_BR class.</returns>
    protected EFDocWebServiceData_BR createWebServiceDataEFiscalDocVersionSwitch(
        EFiscalDocVersion_BR _version,
        EFDocEnvironment_BR _environment,
        EFDocWebService_BR _webService,
        CityIBGECode_BR _issuingStateIbgeCode,
        EFDocAuthority_BR _authority)
    {
        EFDocWebServiceData_BR webServiceData;

        switch (_version)
        {
            case EFiscalDocVersion_BR::V4:
                switch (_webService)
                {
                    case EFDocWebService_BR::Submit:
                        webServiceData = new EFDocWebServiceDataSubmit_BR(_environment, _webService);
                        break;

                    case EFDocWebService_BR::Cancel:
                        webServiceData = new EFDocWebServiceDataCancel_BR(_environment, _webService);
                        break;

                    case EFDocWebService_BR::Discard:
                        webServiceData = new EFDocWebServiceDataDiscard_BR(_environment, _webService);
                        break;

                    case EFDocWebService_BR::SubmitInquire:
                        webServiceData = new EFDocWebServiceDataSubmitInquire_BR(_environment, _webService);
                        break;

                    case EFDocWebService_BR::SubmitReturn: 
                        webServiceData = new EFDocWebServiceDataSubmitReturn_BR(_environment, _webService);
                        break;

                    case EFDocWebService_BR::Events:
                        webServiceData = new EFDocWebServiceDataEvent_BR(_environment, _webService);
                        break;

                    case EFDocWebService_BR::ServiceInquire:
                        webServiceData = new EFDocWebServiceDataServiceInquire_BR(_environment, _webService);
                        break;

                    default :
                        throw error(Error::wrongUseOfFunction(funcname()));
                }
                break;

            case EFiscalDocVersion_BR::V31:
                if (_authority.AuthorityType == EFDocAuthorityType_BR::Common && _issuingStateIbgeCode == ParanaIbgeStateCode)
                {
                    webServiceData = this.createWebServiceDataForParanaV3(_environment, _webService);
                }
                else if (_authority.AuthorityType == EFDocAuthorityType_BR::Common && _issuingStateIbgeCode == BahiaIbgeStateCode)
                {
                    webServiceData = this.createWebServiceDataForBahiaV3(_environment, _webService);
                }
                else
                {
                    webServiceData = this.createWebServiceDataV3(_environment, _webService);
                }
                break;

            case EFiscalDocVersion_BR::V40:
                webServiceData = this.createWebServiceDataV4(_environment, _webService);
                break;
        }

        return webServiceData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWebServiceDataForBahiaV3</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an EFDocWebServiceData_BR object which provides information about the web service proxy classes (particular for Bahia State)
    /// </summary>
    /// <param name="_environment">The environment being used.</param>
    /// <param name="_webService">The type of web service to be contacted.</param>
    /// <returns>The proper instance of EFDocWebServiceData_BR class.</returns>
    protected EFDocWebServiceData_BR createWebServiceDataForBahiaV3(EFDocEnvironment_BR _environment, EFDocWebService_BR _webService)
    {
        switch (_webService)
        {
            case EFDocWebService_BR::Submit         : return new EFDocWebServiceDataSubmitV3_BA_BR(_environment, _webService);
            case EFDocWebService_BR::Cancel         : return new EFDocWebServiceDataEventV3_BA_BR(_environment, _webService);
            case EFDocWebService_BR::Discard        : return new EFDocWebServiceDataDiscardV3_BA_BR(_environment, _webService);
            case EFDocWebService_BR::SubmitInquire  : return new EFDocWebServiceDataSubmitInquireV3_BA_BR(_environment, _webService);
            case EFDocWebService_BR::SubmitReturn   : return new EFDocWebServiceDataSubmitReturnV3_BA_BR(_environment, _webService);
            case EFDocWebService_BR::Events         : return new EFDocWebServiceDataEventV3_BA_BR(_environment, _webService);
            case EFDocWebService_BR::ServiceInquire : return new EFDocWebServiceDataServiceInquirV3_BA_BR(_environment, _webService);

            default :
                    throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWebServiceDataForParanaV3</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an <c>EFDocWebServiceData_BR</c> object which provides information about the web service proxy classes (particular for Parana State)
    /// </summary>
    /// <param name="_environment">The environment being used.</param>
    /// <param name="_webService">The type of web service to be contacted.</param>
    /// <returns>The proper instance of EFDocWebServiceData_BR class.</returns>
    protected EFDocWebServiceData_BR createWebServiceDataForParanaV3(EFDocEnvironment_BR _environment, EFDocWebService_BR _webService)
    {
        switch (_webService)
        {
            case EFDocWebService_BR::Submit         : return new EFDocWebServiceDataSubmitV3_PR_BR(_environment, _webService);
            case EFDocWebService_BR::Cancel         : return new EFDocWebServiceDataEvent_BR(_environment, _webService);
            case EFDocWebService_BR::Discard        : return new EFDocWebServiceDataDiscardV3_PR_BR(_environment, _webService);
            case EFDocWebService_BR::SubmitInquire  : return new EFDocWebServiceDataSubmitInquireV3_PR_BR(_environment, _webService);
            case EFDocWebService_BR::SubmitReturn   : return new EFDocWebServiceDataSubmitReturnV3_PR_BR(_environment, _webService);
            case EFDocWebService_BR::Events         : return new EFDocWebServiceDataEvent_BR(_environment, _webService);
            case EFDocWebService_BR::ServiceInquire : return new EFDocWebServiceDataServiceInquirV3_PR_BR(_environment, _webService);

            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWebServiceDataV3</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an EFDocWebServiceData_BR object which provides information about the web service proxy classes
    /// </summary>
    /// <param name="_environment">The environment being used.</param>
    /// <param name="_webService">The type of web service to be contacted.</param>
    /// <returns>The proper instance of EFDocWebServiceData_BR class.</returns>
    protected EFDocWebServiceData_BR createWebServiceDataV3(EFDocEnvironment_BR _environment, EFDocWebService_BR _webService)
    {
        switch (_webService)
        {
            case EFDocWebService_BR::Submit         : return new EFDocWebServiceDataSubmitV3_BR(_environment, _webService);
            case EFDocWebService_BR::Cancel         : return new EFDocWebServiceDataEvent_BR(_environment, _webService);
            case EFDocWebService_BR::Discard        : return new EFDocWebServiceDataDiscard_BR(_environment, _webService);
            case EFDocWebService_BR::SubmitInquire  : return new EFDocWebServiceDataSubmitInquire_BR(_environment, _webService);
            case EFDocWebService_BR::SubmitReturn   : return new EFDocWebServiceDataSubmitReturnV3_BR(_environment, _webService);
            case EFDocWebService_BR::Events         : return new EFDocWebServiceDataEvent_BR(_environment, _webService);
            case EFDocWebService_BR::ServiceInquire : return new EFDocWebServiceDataServiceInquire_BR(_environment, _webService);

            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWebServiceDataV4</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an <c>EFDocWebServiceData_BR</c> object which provides information about the web service proxy classes
    /// for electronic fiscal document Version 4.00
    /// </summary>
    /// <param name="_environment">The environment being used.</param>
    /// <param name="_webService">The type of web service to be contacted.</param>
    /// <returns>The proper instance of <c>EFDocWebServiceData_BR</c> class.</returns>
    protected EFDocWebServiceData_BR createWebServiceDataV4(EFDocEnvironment_BR _environment, EFDocWebService_BR _webService)
    
    {
        switch (_webService)
        {
            case EFDocWebService_BR::Submit         : return new EFDocWebServiceDataSubmitV4_BR(_environment, _webService);
            case EFDocWebService_BR::Cancel         : return new EFDocWebServiceDataEventV4_BR(_environment, _webService);
            case EFDocWebService_BR::Discard        : return new EFDocWebServiceDataDiscardV4_BR(_environment, _webService);
            case EFDocWebService_BR::SubmitInquire  : return new EFDocWebServiceDataSubmitInquireV4_BR(_environment, _webService);
            case EFDocWebService_BR::SubmitReturn   : return new EFDocWebServiceDataSubmitReturnV4_BR(_environment, _webService);
            case EFDocWebService_BR::Events         : return new EFDocWebServiceDataEventV4_BR(_environment, _webService);
            case EFDocWebService_BR::ServiceInquire : return new EFDocWebServiceDataServiceInquireV4_BR(_environment, _webService);
            
            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAuthorityId</Name>
				<Source><![CDATA[
    private EFDocAuthorityId_BR getAuthorityId(FiscalEstablishment_BR _fiscalEstablishment, EFDocContingMode_BR _contingencyMode)
    {
        EFDocAuthorityId_BR authorityId;
        EFDocAuthority_BR   fiscalEstablishmentAuthority;

        fiscalEstablishmentAuthority    = EFDocAuthority_BR::findById(_fiscalEstablishment.EFDocAuthority);
        switch (_contingencyMode)
        {
            case EFDocContingMode_BR::SvcAn:
            case EFDocContingMode_BR::SvcRs:
                authorityId = fiscalEstablishmentAuthority.SVCAuthorityId;
                break;
            case EFDocContingMode_BR::Off:
            case EFDocContingMode_BR::SecurityForm:
            case EFDocContingMode_BR::SecurityFormDA:
                authorityId = fiscalEstablishmentAuthority.AuthorityId;
                break;
            case EFDocContingMode_BR::ConsumerEFDocOffline:
                authorityId = _fiscalEstablishment.ConsumerEFDocAuthority;
                break;
        }
        return authorityId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAuthorityIdByModel</Name>
				<Source><![CDATA[
    private EFDocAuthorityId_BR getAuthorityIdByModel(
        FiscalEstablishment_BR _fiscalEstablishment,
        EFDocContingMode_BR _contingencyMode,
        FiscalDocumentModel_BR _model)
    {
        if (_model == EFDocConstants_BR::Model65)
        {
            return _fiscalEstablishment.ConsumerEFDocAuthority;
        }

        return this.getAuthorityId(_fiscalEstablishment, _contingencyMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the web service parameters record for the Events web service for a given fiscal establishment.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The fiscal establishment for which to select the web service parameters.
    /// </param>
    /// <returns>
    /// A record of the web service parameters for the Events web service or an empty buffer if none is found.
    /// </returns>
    /// <remarks>
    /// Considers the contingency mode when fetching the web service parameters.
    /// </remarks>
    private EFDocWebServiceParameters_BR getEventParameters(FiscalEstablishment_BR _fiscalEstablishment)
    {
        EFDocWebServiceParameters_BR parameters;

        select firstOnly parameters
            where parameters.Environment == _fiscalEstablishment.EFDocEnvironment
                && parameters.WebService == EFDocWebService_BR::Events
                && parameters.Authority == _fiscalEstablishment.ConsumerEFDocAuthority;

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>EFDocFactory_BR</c> object.
    /// </summary>
    /// <returns>A <c>EFDocFactory_BR</c> object.</returns>
    public static EFDocFactory_BR construct()
    {
        return new EFDocFactory_BR();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>