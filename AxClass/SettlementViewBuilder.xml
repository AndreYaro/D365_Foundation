<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementViewBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SettlementViewBuilder</c> class manages the creation of a set of related settlement transactions based on an originating document.
/// </summary>
public class SettlementViewBuilder
{
    protected ModuleCustVend module;
    protected DimensionDynamicAccount originAccountLedgerDimension;
    protected NoYes includePaymentJournals;
    protected NoYes restrictSearchToOriginalDocument;

    private container availableLegalEntities;
    private CustVendTrans originatingTransaction;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateSettlementAmountsAgainstOriginTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the settlement amounts for all search result transactions to record the amount settled against the origin transaction
    /// rather than the full settlement amount on the document.
    /// </summary>
    /// <param name = "_settlementView">The set of settlement transactions.</param>
    private void calculateSettlementAmountsAgainstOriginTransaction(SettlementView _settlementView)
    {
        SettlementView summarySettleAmountTmp;
        RefRecId originatingTransactionRecId = this.parmOriginatingTransaction().RecId;

        if (module == ModuleCustVend::Cust)
        {
            CustSettlement custSettlement;

            insert_recordset summarySettleAmountTmp
                (SettleAmountCur, SettleAmountMST, ReportingCurrencyAmount, RefRecId)
                select sum(SettleAmountCur), sum(SettleAmountMST), sum(SettleAmountReporting), TransRecId from custSettlement
                    group by TransRecId
                    where custSettlement.OffsetRecId == originatingTransactionRecId;
        }
        else if (module == ModuleCustVend::Vend)
        {
            VendSettlement vendSettlement;

            insert_recordset summarySettleAmountTmp
                (SettleAmountCur, SettleAmountMST, ReportingCurrencyAmount, RefRecId)
                select sum(SettleAmountCur), sum(SettleAmountMST), sum(SettleAmountReporting), TransRecId from vendSettlement
                    group by TransRecId
                    where vendSettlement.OffsetRecId == originatingTransactionRecId;
        }

        update_recordset _settlementView
            setting SettleAmountMST = summarySettleAmountTmp.SettleAmountMST,
                SettleAmountCur = summarySettleAmountTmp.SettleAmountCur,
                ReportingCurrencyAmount = summarySettleAmountTmp.ReportingCurrencyAmount
            join summarySettleAmountTmp
                where summarySettleAmountTmp.RefRecId == _settlementView.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSettlementNodeFromOrigin</Name>
				<Source><![CDATA[
    private SettlementViewNodeTmp createSettlementNodeFromOrigin(CustVendTrans _originatingCustVendTrans)
    {
        SettlementViewNodeTmp nodeQueue;

        if (_originatingCustVendTrans)
        {
            nodeQueue.Node = _originatingCustVendTrans.RecId;
            nodeQueue.LegalEntity = _originatingCustVendTrans.DataAreaId;
            nodeQueue.Depth = 0;
            nodeQueue.insert();
        }

        return nodeQueue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the set of settlement records for a given transaction.
    /// </summary>
    /// <param name = "_originatingCustVendTrans">The originating transaction.</param>
    /// <returns>The settlement view.</returns>
    public SettlementView createView(CustVendTrans _originatingCustVendTrans)
    {
        Set processedCompanies = new Set(Types::String);
        container legalEntitiesToProcess = [curExt()];

        this.parmOriginatingTransaction(_originatingCustVendTrans);
        this.setModule();
        this.findCustVendLedgerDimension();

        SettlementViewNodeTmp settlementNodes = this.createSettlementNodeFromOrigin(_originatingCustVendTrans);

        while (conLen(legalEntitiesToProcess) > 0)
        {
            processedCompanies.add(conPeek(legalEntitiesToProcess, 1));

            changecompany(conPeek(legalEntitiesToProcess, 1))
            {
                settlementNodes = this.findRelatedTransactions(settlementNodes);
            }

            legalEntitiesToProcess = this.findNextLegalEntitiesForProcessing(settlementNodes, processedCompanies);
        }

        return this.createSettlementHistorySetBased(settlementNodes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendLedgerDimension</Name>
				<Source><![CDATA[
    private void findCustVendLedgerDimension()
    {
        LedgerJournalACType custVendAccountType;

        if (module == ModuleCustVend::Cust)
        {
            custVendAccountType = LedgerJournalACType::Cust;
        }
        else if (module == ModuleCustVend::Vend)
        {
            custVendAccountType = LedgerJournalACType::Vend;
        }

        originAccountLedgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(this.parmOriginatingTransaction().AccountNum, custVendAccountType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLegalEntitiesForThisSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the set of legal entities for all settlement transactions involved with the current settlement view.
    /// </summary>
    /// <param name = "_settlementNodes">The set of settlement records currently prepared for processing.</param>
    /// <returns>The set of legal entities involved with the current settlement view.</returns>
    /// <remarks>If no legal entities are provided, the current legal entity context is returned.</remarks>
    private container findLegalEntitiesForThisSettlement(SettlementViewNodeTmp _settlementNodes)
    {
        container legalEntities;

        while select _settlementNodes
            group by LegalEntity
        {
            if (_settlementNodes.LegalEntity)
            {
                legalEntities += [_settlementNodes.LegalEntity];
            }
        }

        if (conLen(legalEntities) == 0)
        {
            legalEntities = [curExt()];
        }

        return legalEntities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextLegalEntitiesForProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the set of legal entities for the provided nodes which have not yet been processed.
    /// </summary>
    /// <param name = "_settlementNodes">The set of settlement records currently prepared for processing.</param>
    /// <param name = "_processedLegalEntities">The set of legal entities which have already been searched.</param>
    /// <returns>The container of legal entities still to be processed, if any.</returns>
    private container findNextLegalEntitiesForProcessing(SettlementViewNodeTmp _settlementNodes, Set _processedLegalEntities)
    {
        container legalEntities;

        while select _settlementNodes
            group by LegalEntity
        {
            if (_settlementNodes.LegalEntity
                && conFind(availableLegalEntities, _settlementNodes.LegalEntity)
                && !_processedLegalEntities.in(_settlementNodes.LegalEntity))
            {
                legalEntities += [_settlementNodes.LegalEntity];
            }
        }

        return legalEntities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches related transactions as a breadth-first search tree. Only the current set of leaf nodes
    /// of the provided set are searched; all other records are transferred to the new set without modification.
    /// </summary>
    /// <param name = "_nodeQueue">The set of record references to search.</param>
    /// <returns>The set of searched records.</returns>
    private SettlementViewNodeTmp findRelatedTransactions(SettlementViewNodeTmp _nodeQueue)
    {
        SettlementViewNodeTmp processedItems; // A record of items which have been processed.
        SettlementViewNodeTmp settlementNodes; // A compilation of the final set of transactions records.

        select maxof(Depth) from _nodeQueue;
        Counter depth = _nodeQueue.Depth;

        if (depth != 0)
        {
            // Insert items from any previous search runs.
            insert_recordset settlementNodes
                (Node, Depth, LegalEntity)
                select Node, depth, LegalEntity from _nodeQueue
                    where _nodeQueue.Depth < depth;
        }

        select count(RecId) from _nodeQueue where _nodeQueue.Depth == depth;

        while (_nodeQueue.RecId != 0)
        {
            // Record items at the current depth
            insert_recordset settlementNodes
                (Node, Depth, LegalEntity)
                select Node, depth, LegalEntity from _nodeQueue
                    where _nodeQueue.Depth == depth
                    notexists join settlementNodes
                        where settlementNodes.Node == _nodeQueue.Node;

            // Mark items at the current depth as processed
            insert_recordset processedItems
                (Node)
                select Node from _nodeQueue
                    where _nodeQueue.Depth == depth;

            // If the search is restricted to original document, never search on leaf nodes.
            if (depth > 0 && restrictSearchToOriginalDocument)
            {
                break;
            }

            // Find related transactions for items at this depth.
            if (includePaymentJournals)
            {
                this.findRelatedTransFromPaymentSetBased(_nodeQueue, processedItems, depth);
            }

            this.findRelatedTransFromSettlementSetBased(_nodeQueue, processedItems, depth);
            this.findRelatedTransFromOffsetRecId(_nodeQueue, processedItems, depth);
            this.findRelatedTransCrossCompanyFromSettlementGroup(_nodeQueue, processedItems, depth);

            // Move to the next level of the search tree.
            depth++;

            // Verify that the next level of the tree has at last one node to search.
            select count(RecId) from _nodeQueue where _nodeQueue.Depth == depth;
        }

        return settlementNodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedTransCrossCompanyFromSettlementGroup</Name>
				<Source><![CDATA[
    private void findRelatedTransCrossCompanyFromSettlementGroup(
        SettlementViewNodeTmp _nodeQueue,
        SettlementViewNodeTmp _processedItems,
        Counter _depth)
    {
        Counter nextLevel = _depth + 1;
        SettlementViewNodeTmp crossCompanySettlementNodes;
        CustVendSettlement custVendSettlement = CustVendSettlement::getEmptyTableBuffer(module);

        // Determine what legal entities, if any, require processing for intercompany transactions.
        insert_recordset crossCompanySettlementNodes
            (Node, LegalEntity, SettlementGroup)
            select OffsetRecId, OffsetCompany, SettlementGroup from custVendSettlement
                exists join _nodeQueue
                    where custVendSettlement.TransRecId == _nodeQueue.Node
                        && custVendSettlement.OffsetCompany != curExt()
                        && _nodeQueue.Depth == _depth;

        select count(RecId) from crossCompanySettlementNodes;

        if (crossCompanySettlementNodes.RecId)
        {
            Set processedLegalEntities = new Set(Types::String);
            processedLegalEntities.add(curExt());

            container legalEntitiesToSearch = [curExt()];
            legalEntitiesToSearch += this.findNextLegalEntitiesForProcessing(crossCompanySettlementNodes, processedLegalEntities);

            // For each intercompany context, find related transactions by settlement group.
            // The settlement group will include intercompany due-to and due-from transactions.
            for (Counter i = 1; i <= conLen(legalEntitiesToSearch); i++)
            {
                changecompany (conPeek(legalEntitiesToSearch, i))
                {
                    // The settlement buffer must be reinitialized in the current legal entity context
                    // since empty buffers retain the legal entity context in which they were instantiated.
                    custVendSettlement = CustVendSettlement::getEmptyTableBuffer(module);
                    SettlementViewNodeTmp candidateNodes;

                    insert_recordset candidateNodes
                        (Node, LegalEntity, Depth)
                        select TransRecId, TransCompany, nextLevel from custVendSettlement
                            exists join crossCompanySettlementNodes
                                where custVendSettlement.SettlementGroup == crossCompanySettlementNodes.SettlementGroup;

                    this.transferDistinctNodes(candidateNodes, _nodeQueue);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedTransFromPaymentSetBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Discovers related transactions based on payment journals records.
    /// </summary>
    /// <param name = "_nodeQueue">The set of transactions in queue.</param>
    /// <param name = "_processedItems">The set of items processed.</param>
    /// <param name = "_depth">The processing level.</param>
    /// <remarks>
    /// All payment lines for a given payment journal are considered to be related
    /// for the purposes of the settlement view. Any transaction associated with a
    /// payment journal line will be included.
    /// </remarks>
    private void findRelatedTransFromPaymentSetBased(
        SettlementViewNodeTmp _nodeQueue,
        SettlementViewNodeTmp _processedItems,
        Counter _depth)
    {
        Counter nextLevel = _depth + 1;
        DataAreaId curCompany = curExt();
        LedgerJournalTrans ledgerJournalTrans;
        SettlementViewNodeTmp paymentJournalNumbers;
        SettlementViewNodeTmp candidateNodes;

        if (module == ModuleCustVend::Cust)
        {
            // Discover journals related to the set of customer transactions.
            insert_recordset paymentJournalNumbers
                (JournalNum)
                select JournalNum from ledgerJournalTrans
                    exists join _nodeQueue
                        where ledgerJournalTrans.CustTransId == _nodeQueue.Node
                            && _nodeQueue.Depth == _depth
                    notexists join _processedItems
                        where ledgerJournalTrans.JournalNum == _processedItems.JournalNum;

            // Remember the journals visited to prevent attempting to add the same journal multiple times.
            insert_recordset _processedItems
                (JournalNum)
                select JournalNum from paymentJournalNumbers;

            // Queue the payment journal line related customer transactions if they have not been visited or queued at any depth
            insert_recordset candidateNodes
                (Node, Depth, LegalEntity)
                select CustTransId, nextLevel, curCompany from ledgerJournalTrans
                    group by CustTransId
                    exists join paymentJournalNumbers
                        where ledgerJournalTrans.JournalNum == paymentJournalNumbers.JournalNum
                            && LedgerJournalTrans.AccountType == LedgerJournalACType::Cust
                            && ledgerJournalTrans.LedgerDimension == originAccountLedgerDimension
                    notexists join _nodeQueue
                        where ledgerJournalTrans.CustTransId == _nodeQueue.Node
                    notexists join _processedItems
                        where ledgerJournalTrans.CustTransId == _processedItems.Node;
        }
        else if (module == ModuleCustVend::Vend)
        {
            // Discover journals related to the set of vendor transactions.
            insert_recordset paymentJournalNumbers
                (JournalNum)
                select JournalNum from ledgerJournalTrans
                    exists join _nodeQueue
                        where ledgerJournalTrans.VendTransId == _nodeQueue.Node
                            && _nodeQueue.Depth == _depth
                    notexists join _processedItems
                        where ledgerJournalTrans.JournalNum == _processedItems.JournalNum;

            // Remember the journals visited to prevent attempting to add the same journal multiple times.
            insert_recordset _processedItems
                (JournalNum)
                select JournalNum from paymentJournalNumbers;

            // Queue the payment journal line related vendor transactions if they have not been visited or queued at any depth
            insert_recordset candidateNodes
                (Node, Depth, LegalEntity)
                select VendTransId, nextLevel, curCompany from ledgerJournalTrans
                    group by VendTransId
                    exists join paymentJournalNumbers
                        where ledgerJournalTrans.JournalNum == paymentJournalNumbers.JournalNum
                            && LedgerJournalTrans.AccountType == LedgerJournalACType::Vend
                            && ledgerJournalTrans.LedgerDimension == originAccountLedgerDimension
                    notexists join _nodeQueue
                        where ledgerJournalTrans.VendTransId == _nodeQueue.Node
                    notexists join _processedItems
                        where ledgerJournalTrans.VendTransId == _processedItems.Node;
        }

        this.transferDistinctNodes(candidateNodes, _nodeQueue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedTransFromSettlementSetBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Discovers related transactions based on settlement records.
    /// </summary>
    /// <param name = "_nodeQueue">The set of transactions in queue.</param>
    /// <param name = "_processedItems">The set of items processed.</param>
    /// <param name = "_depth">The processing level.</param>
    private void findRelatedTransFromSettlementSetBased(
        SettlementViewNodeTmp _nodeQueue,
        SettlementViewNodeTmp _processedItems,
        Counter _depth)
    {
        Counter nextLevel = _depth + 1;
        DataAreaId curCompany = curExt();
        SettlementViewNodeTmp candidateNodes;
        CustVendSettlement custVendSettlement = CustVendSettlement::getEmptyTableBuffer(module);

        // Discover offset records from the transaction record.
        insert_recordset candidateNodes
            (Node, Depth, LegalEntity)
            select OffsetRecid, nextLevel, OffsetCompany from custVendSettlement
                group by OffsetRecid, OffsetCompany
                exists join _nodeQueue
                    where custVendSettlement.OffsetRecid != 0
                        && custVendSettlement.TransRecId == _nodeQueue.Node
                        && _nodeQueue.Depth == _depth
                notexists join _processedItems
                    where custVendSettlement.OffsetRecid == _processedItems.Node;

        // Discover transactions from their offset record.
        // This is necessary in cases such as foreign currency revaluation where there may be N offset transactions
        // referencing a single originating transaction.
        insert_recordset candidateNodes
            (Node, Depth, LegalEntity)
            select TransRecId, nextLevel, TransCompany from custVendSettlement
                group by TransRecId, TransCompany
                exists join _nodeQueue
                    where custVendSettlement.OffsetRecId == _nodeQueue.Node
                        && _nodeQueue.Depth == _depth
                notexists join _processedItems
                    where custVendSettlement.TransRecId == _processedItems.Node
                notexists join candidateNodes
                    where custVendSettlement.TransRecId == candidateNodes.Node;

        this.transferDistinctNodes(candidateNodes, _nodeQueue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedTransFromOffsetRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Discovers related transactions based on offset record.
    /// </summary>
    /// <param name = "_nodeQueue">The set of transactions in queue.</param>
    /// <param name = "_processedItems">The set of items processed.</param>
    /// <param name = "_depth">The processing level.</param>
    /// <remarks>
    /// The offset record may be required in cases of related transactions without settlement
    /// such as invoice reversals.
    /// </remarks>
    private void findRelatedTransFromOffsetRecId(
        SettlementViewNodeTmp _nodeQueue,
        SettlementViewNodeTmp _processedItems,
        Counter _depth)
    {
        Counter nextLevel = _depth + 1;
        DataAreaId curCompany = curExt();
        SettlementViewNodeTmp candidateNodes;
        CustVendTrans custVendTrans = CustVendTrans::getEmptyTableBuffer(module);

        insert_recordset candidateNodes
            (Node, Depth, LegalEntity)
            select OffsetRecId, nextLevel, curCompany from custVendTrans
                exists join _nodeQueue
                    where custVendTrans.OffsetRecId != 0
                        && custVendTrans.RecId == _nodeQueue.Node
                        && _nodeQueue.Depth == _depth
                notexists join _processedItems
                    where custVendTrans.OffsetRecId == _processedItems.Node;

        this.transferDistinctNodes(candidateNodes, _nodeQueue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferDistinctNodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers the set of new, distinct nodes from an origin table to a target table, removing duplicate rows.
    /// </summary>
    /// <param name = "_fromNodes">The origin table.</param>
    /// <param name = "_toNodes">The target table.</param>
    /// <remarks>
    /// The originating table may have duplicate rows.
    /// The originating table is responsible for excluding null (zero) nodes before transfer.
    /// </remarks>
    private void transferDistinctNodes(SettlementViewNodeTmp _fromNodes, SettlementViewNodeTmp _toNodes)
    {
        insert_recordset _toNodes
            (Node, Depth, LegalEntity)
            select Node, Depth, LegalEntity from _fromNodes
                group by Node, Depth, LegalEntity
                notexists join _toNodes
                    where _fromNodes.Node == _toNodes.Node;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSettlementHistorySetBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes a set of transaction records to generate the settlement view data.
    /// </summary>
    /// <param name = "_settlementNodes">The set of transaction records.</param>
    /// <returns>The new settlement view data.</returns>
    protected SettlementView createSettlementHistorySetBased(SettlementViewNodeTmp _settlementNodes)
    {
        SettlementView settlementView;

        container legalEntitiesForSettlement = this.findLegalEntitiesForThisSettlement(_settlementNodes);

        for (Counter i = 1; i <= conLen(legalEntitiesForSettlement); i++)
        {
            changecompany(conPeek(legalEntitiesForSettlement, i))
            {
                this.insertCustVendTransData(_settlementNodes, settlementView);

                if (this.parmRestrictSearchToOriginalDocument())
                {
                    this.calculateSettlementAmountsAgainstOriginTransaction(settlementView);
                }
            }
        }

        return settlementView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        this.initLegalEntities();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLegalEntities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the set of legal entities which the current session can access.
    /// </summary>
    private void initLegalEntities()
    {
        container sharedServiceCompanies = CustVendOpenTransManager::findSharedServiceCompanies(curExt());

        MyLegalEntities myLegalEntities;

        while select myLegalEntities
        {
            if (conFind(sharedServiceCompanies, myLegalEntities.DataArea))
            {
                availableLegalEntities += [myLegalEntities.DataArea];
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustVendTransData</Name>
				<Source><![CDATA[
    private void insertCustVendTransData(SettlementViewNodeTmp _settlementNodes, SettlementView _settlementView)
    {
        TableId sourceTableId;
        DirPartyTable partyTable;
        CustVendTrans custVendTrans = CustVendTrans::getEmptyTableBuffer(module);
        CustVendTable custVendTable = CustVendTable::getEmptyTableBuffer(module);

        if (module == ModuleCustVend::Cust)
        {
            sourceTableId = tableNum(CustTrans);
        }
        else if (module == ModuleCustVend::Vend)
        {
            sourceTableId = tableNum(VendTrans);
        }

        insert_recordset _settlementView
            (Module,
            RefRecId,
            RefTableId,
            AccountNum,
            Voucher,
            VoucherDataAreaId,
            TransDate,
            SettleDate,
            DocumentAmount,
            DocumentSettleAmount,
            SettleAmountCur,
            SettleAmountMST,
            ReportingCurrencyAmount,
            CurrencyCode,
            TransactionType,
            PaymReference,
            ExchAdjustment,
            Invoice)
        select
            module,
            RecId,
            sourceTableId,
            AccountNum,
            Voucher,
            DataAreaId,
            TransDate,
            LastSettleDate,
            AmountCur,
            SettleAmountCur,
            SettleAmountCur,
            SettleAmountMST,
            SettleAmountReporting,
            CurrencyCode,
            TransType,
            PaymReference,
            ExchAdjustment,
            Invoice
        from custVendTrans
            exists join _settlementNodes
                where custVendTrans.RecId == _settlementNodes.Node;

        // Set party name
        update_recordset _settlementView
            setting AccountName = partyTable.Name
            join custVendTable
                where custVendTable.AccountNum == _settlementView.AccountNum
            join partyTable
                where partyTable.RecId == custVendTable.Party;

        // Mark discovered records as search results.
        update_recordset _settlementView
            setting IsSearchResult = NoYes::Yes
            exists join _settlementNodes
                where _settlementView.RefRecId == _settlementNodes.Node
                && _settlementNodes.Depth != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludePaymentJournals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the data should include related lines from the same customer or vendor
    /// in payment journals during compilation of the settlement view.
    /// </summary>
    /// <param name = "_includePaymentJournals">true if other payment lines from a journal should be included; otherwise, false.</param>
    /// <returns>Whether other payment journal lines should be included.</returns>
    public NoYes parmIncludePaymentJournals(NoYes _includePaymentJournals = includePaymentJournals)
    {
        includePaymentJournals = _includePaymentJournals;
        return includePaymentJournals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginatingTransaction</Name>
				<Source><![CDATA[
    private CustVendTrans parmOriginatingTransaction(CustVendTrans _originatingTransaction = originatingTransaction)
    {
        originatingTransaction = _originatingTransaction;
        return originatingTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRestrictSearchToOriginalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the settlement view search should restrict search results to the direct links
    /// of the originating document. When true, the search tree will terminate at the leaf nodes of the origin.
    /// </summary>
    /// <param name = "_restrictSearchToOriginalDocument"></param>
    /// <returns>Whether the settlement view search should restrict search to the original document.</returns>
    public NoYes parmRestrictSearchToOriginalDocument(NoYes _restrictSearchToOriginalDocument = restrictSearchToOriginalDocument)
    {
        restrictSearchToOriginalDocument = _restrictSearchToOriginalDocument;
        return restrictSearchToOriginalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setModule</Name>
				<Source><![CDATA[
    private void setModule()
    {
        if (this.parmOriginatingTransaction().TableId == tableNum(CustTrans))
        {
            module = ModuleCustVend::Cust;
        }
        else if (this.parmOriginatingTransaction().TableId == tableNum(VendTrans))
        {
            module = ModuleCustVend::Vend;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new settlement view builder object.
    /// </summary>
    /// <returns>The settlement view builder.</returns>
    public static SettlementViewBuilder construct()
    {
        SettlementViewBuilder settlementBuilder = new SettlementViewBuilder();
        settlementBuilder.init();

        return settlementBuilder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>