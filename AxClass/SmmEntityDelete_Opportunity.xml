<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmEntityDelete_Opportunity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SmmEntityDelete_Opportunity extends SmmEntityDelete
{
    DialogField fieldQuotes;
    DialogField fieldLeads;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteLeads</Name>
				<Source><![CDATA[
    private void deleteLeads()
    {
        smmLeadTable                    smmLeadTable;
        smmOpportunityRelTable          smmOpportunityRelTable, smmOpportunityRelTableLink;

        while select forupdate smmLeadTable
            exists join smmOpportunityRelTable
            where smmLeadTable.RecId == smmOpportunityRelTable.RefRecId &&
                  smmOpportunityRelTable.RefTableId == (tableNum(smmLeadTable)) &&
                  smmOpportunityRelTable.OpportunityId == common.(fieldId)
        {
            // Delete the link first so it will not conflict with validate
            delete_from smmOpportunityRelTableLink
                where smmOpportunityRelTableLink.OpportunityId == common.(fieldId) &&
                      smmOpportunityRelTableLink.RefTableId == tableNum(smmLeadTable) &&
                      smmOpportunityRelTableLink.RefRecId == smmLeadTable.RecId;

            if (smmLeadTable.validateDelete())
            {
                smmLeadTable.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLink</Name>
				<Source><![CDATA[
    public void deleteLink()
    {
        smmOpportunityRelTable  smmOpportunityRelTable;

        delete_from smmOpportunityRelTable
            where smmOpportunityRelTable.RefTableId  == common.TableId &&
                  smmOpportunityRelTable.RefRecId == common.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProjects</Name>
				<Source><![CDATA[
    private void deleteProjects()
    {
        ProjTable                       projTable;
        smmOpportunityRelTable          smmOpportunityRelTable, smmOpportunityRelTableLink;

        while select forupdate projTable
            exists join smmOpportunityRelTable
            where projTable.RecId == smmOpportunityRelTable.RefRecId &&
                  smmOpportunityRelTable.RefTableId == (tableNum(ProjTable)) &&
                  smmOpportunityRelTable.OpportunityId == common.(fieldId)
        {
            // Delete the link first so it will not conflict with validate
            delete_from smmOpportunityRelTableLink
                where smmOpportunityRelTableLink.OpportunityId == common.(fieldId) &&
                      smmOpportunityRelTableLink.RefTableId == tableNum(ProjTable) &&
                      smmOpportunityRelTableLink.RefRecId == projTable.RecId;

            if (projTable.validateDelete())
            {
                projTable.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteQuotes</Name>
				<Source><![CDATA[
    private void deleteQuotes()
    {
        SalesQuotationTable             salesQuotationTable;

        while select forupdate salesQuotationTable
            where salesQuotationTable.OpportunityId == common.(fieldId)
        {
            if (salesQuotationTable.validateDelete())
            {
                salesQuotationTable.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecords</Name>
				<Source><![CDATA[
    public void deleteRecords()
    {
        if (includeLeads)
        {
            // Delete leads
            this.deleteLeads();
        }

        if (includeProjects)
        {
            // Delete projects
            this.deleteProjects();
        }

        if (includeQuotes)
        {
            // Delete quotes
            this.deleteQuotes();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        Object ret;

        ret = super();

        this.parmIncludeQuotes(NoYes::Yes);
        this.parmIncludeLeads(NoYes::Yes);

        fieldQuotes             =   dialog.addFieldValue(extendedTypeStr(smmIncludeQuotes),      includeQuotes);
        fieldLeads              =   dialog.addFieldValue(extendedTypeStr(smmIncludeLeads),       includeLeads);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        this.parmIncludeQuotes(fieldQuotes.value());
        this.parmIncludeLeads(fieldLeads.value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommonTable</Name>
				<Source><![CDATA[
    public Common parmCommonTable(Common _common = null)
    {
        Common ret;

        ret = super(_common);

        fieldId = fieldNum(smmOpportunityTable, OpportunityId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS104177";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args, FormDataSource _formDataSource = null)
    {
        SmmEntityDelete smmEntityDelete;
        smmOpportunityTable smmOpportunityTable;
        Common common = _args.record();

        if (!_args || !_args.record())
        {
            throw error(strFmt("@SYS29104",classStr(SmmEntityDelete))); // Class %1 must be called with a buffer.
        }

        if (common.TableId == tableNum(smmOpportunityTable))
        {
            smmOpportunityTable = common;

            if (Box::yesNo(strFmt("@SYS302359", "@SYS81484"), DialogButton::No) && smmOpportunityTable.validateDelete())
            {
                smmEntityDelete = SmmEntityDelete::construct(common, false);

                if (smmEntityDelete.prompt())
                {
                    smmEntityDelete.parmCommonTable(_args.record());
                    smmEntityDelete.runOperation();
                    smmOpportunityTable.delete();

                    if (_formDataSource)
                    {
                        _formDataSource.executeQuery();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>