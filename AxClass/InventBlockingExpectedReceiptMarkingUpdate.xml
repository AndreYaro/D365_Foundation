<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBlockingExpectedReceiptMarkingUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventBlockingExpectedReceiptMarkingUpdate</c> class removes and reapplies the markings
/// for the inventory blocking expected receipts transactions when updating the blocking record.
/// </summary>
public class InventBlockingExpectedReceiptMarkingUpdate
{
    private InventBlocking          inventBlocking;
    private InventTransMarkingMap   expectedReceiptBlockingMarking;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeInventBlocking</Name>
				<Source><![CDATA[
    final protected void initializeInventBlocking(InventBlocking _inventBlocking)
    {
        inventBlocking = _inventBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        expectedReceiptBlockingMarking  = InventTransMarkingMap::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventBlocking</Name>
				<Source><![CDATA[
    public InventBlocking parmInventBlocking()
    {
        return inventBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreExpectedReceiptMarking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restores existing markings for the inventory blocking expected receipt.
    /// </summary>
    public void restoreExpectedReceiptMarking()
    {
        InventTransOriginId     inventBlockingTransOriginIdReceipt = InventTransOrigin::findByInventTransId(inventBlocking.InventTransIdReceipt).RecId;
        InventQty               qty;
        PdsCWInventQty          cwQty;
        InventDimParm           inventDimParm;
        PmfQtyDataCarrier       outQuantities = new PmfQtyDataCarrier();

        if (!inventBlockingTransOriginIdReceipt)
        {
            return;
        }

        // start iterating local marking storage from the beginning
        MapEnumerator currentMarking = expectedReceiptBlockingMarking.getEnumerator();

        // process all stored markings
        while (currentMarking.moveNext())
        {
            InventTransMarkingKey key = InventTransMarkingKey::newString(currentMarking.currentKey());

            [qty, cwQty] = currentMarking.currentValue();

            InventTransOriginId keyInventTransOriginId = key.getInventTransOriginId();
            InventDim inventDim = InventDim::find(key.getInventDimId());
            inventDimParm.initFromInventDim(inventDim);

            // mark in one direction
            InventQty markedQty = InventTransOrigin::updateMarking(inventBlockingTransOriginIdReceipt,
                keyInventTransOriginId,
                qty,
                '',
                SortOrder::Descending,
                true,
                inventDim,
                inventDimParm,
                cwQty,
                outQuantities);

            PdsCWInventQty cwMarkedQty = outQuantities.parmCwQty();

            // mark in reverse direction
            InventTransOrigin::updateMarking(keyInventTransOriginId,
                inventBlockingTransOriginIdReceipt,
                markedQty,
                '',
                SortOrder::Descending,
                true,
                inventDim,
                inventDimParm,
                cwMarkedQty);

            // update marking reservations
            this.updateMarkingReservation(keyInventTransOriginId, inventBlockingTransOriginIdReceipt);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeExpectedReceiptMarking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores existing markings for the inventory blocking expected receipt.
    /// </summary>
    public void storeExpectedReceiptMarking()
    {
        InventTransOriginId     inventBlockingTransOriginIdReceipt = InventTransOrigin::findByInventTransId(inventBlocking.InventTransIdReceipt).RecId;

        if (!inventBlockingTransOriginIdReceipt)
        {
            return;
        }

        InventTransEnumerable inventTransEnumerable = InventTransRepository::construct().getMarkedTransactionsForReceipt(inventBlockingTransOriginIdReceipt);

        InventTransEnumerator inventTransEnumerator = inventTransEnumerable.getEnumerator() as InventTransEnumerator;

        while (inventTransEnumerator.moveNext())
        {
            InventTrans inventTransReceipt = inventTransEnumerator.current();

            // storing marking
            expectedReceiptBlockingMarking.addMarking(inventTransReceipt.MarkingRefInventTransOrigin,
                inventTransReceipt.InventDimId,
                inventTransReceipt.Qty,
                inventTransReceipt.PdsCWQty
                );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkingReservation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates a reservation for the specified inventory transaction originator.
    /// </summary>
    /// <param name="_inventTransOriginIdIssue">
    ///    The ID of the inventory transaction originator for which a reservation is updated.
    /// </param>
    /// <param name="_inventTransOriginIdReceipt">
    ///    The ID of the inventory transaction originator with which the transactions must be marked.
    /// </param>
    protected void updateMarkingReservation(
        InventTransOriginId     _inventTransOriginIdIssue,
        InventTransOriginId     _inventTransOriginIdReceipt)
    {
        InventTrans             inventTransIssue;

        // update reservation for the issue.
        select firstonly inventTransIssue
            where   inventTransIssue.InventTransOrigin              == _inventTransOriginIdIssue
                &&  inventTransIssue.StatusReceipt                  == StatusReceipt::None
                &&  inventTransIssue.StatusIssue                    == StatusIssue::OnOrder
                &&  inventTransIssue.MarkingRefInventTransOrigin    == _inventTransOriginIdReceipt;
        if (inventTransIssue)
        {
            using (InventUpdateReserveRefTransIdFromBlockingMarkingSyncContext context = InventUpdateReserveRefTransIdFromBlockingMarkingSyncContext::construct())
            {
                context.parmIsUpdateMarkingReservationForOnOrderInventTransIssue(true);
                InventUpd_Reservation::updateReserveRefTransId(inventTransIssue.inventMovement());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventBlockingExpectedReceiptMarkingUpdate construct()
    {
        return new InventBlockingExpectedReceiptMarkingUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventBlocking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>InventBlockingExpectedReceiptMarkingUpdate</c> class from parameters.
    /// </summary>
    /// <param name="_inventBlocking">
    /// An <c>InventBlocking</c> table record.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventBlockingExpectedReceiptMarkingUpdate</c> class.
    /// </returns>
    public static InventBlockingExpectedReceiptMarkingUpdate newFromInventBlocking(InventBlocking _inventBlocking)
    {
        var expectedReceiptMarkingUpdate = InventBlockingExpectedReceiptMarkingUpdate::construct();

        expectedReceiptMarkingUpdate.initializeInventBlocking(_inventBlocking);

        return expectedReceiptMarkingUpdate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>