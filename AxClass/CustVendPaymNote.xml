<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymNote</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendPaymNote</c> class builds a payment note string based on information from
///    transactions that are marked for settlement with a given record buffer.
/// </summary>
/// <remarks>
///    This class is used to fill the payment note field on journal lines. See the
///    <c>CustVendPaymProposalLine.paymNote</c> table method for an example.
/// </remarks>
public class CustVendPaymNote
{
    CustVendTransStatic custVendTransStatic;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildPaymNote</Name>
				<Source><![CDATA[
    public PaymNote buildPaymNote(
        CompanyId   _specCompany,
        RefTableId  _specTableId,
        RefRecId    _specRecId,
        LanguageId  _languageId = '')
    {
        CustVendTransOpen   custVendTransOpen;
        CustVendTrans       custVendTrans;
        CustVendTable       custVendTable;
        SpecTrans           specTrans;
        TransactionTxt      transactionTxt;
        TransTxt            transTxt;
        LanguageId          languageId          = _languageId;
        PaymNote            paymNote;
        DirPartyTable       partyTable;
        PaymId              paymId;
        DictType            dictType;
        int                 paymNoteLength;
        container           companies;
        CustTrans                   custTrans;
        VendTrans                   vendTrans;
        TransactionTextContext      transactionTextContext;

        if (!custVendTransStatic)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        dictType            = new DictType(extendedTypeNum(PaymNote));
        paymNoteLength      = dictType.stringLen();
        custVendTransOpen   = custVendTransStatic.custVendTransOpen();
        custVendTrans       = custVendTransStatic.custVendTrans();
        custVendTable       = custVendTransStatic.custVendTable();

        if (!languageId)
        {
            companies = CustVendOpenTransManager::findSharedServiceCompanies(curext());

            select firstonly crossCompany:companies Party, AccountNum, PaymId from custVendTable
                join LanguageId from partyTable
                    where partyTable.RecId == custVendTable.Party
                join custVendTransOpen
                    where custVendTransOpen.AccountNum == custVendTable.AccountNum
                join RecId from specTrans
                    where specTrans.SpecCompany == _specCompany
                       && specTrans.SpecTableId == _specTableId
                       && specTrans.SpecRecId   == _specRecId
                       && specTrans.RefCompany  == custVendTransOpen.DataAreaId
                       && specTrans.RefTableId  == custVendTransOpen.TableId
                       && specTrans.RefRecId    == custVendTransOpen.RecId;

            languageId = partyTable.LanguageId;
        }

        if (custVendTable.TableId == tableNum(VendTable))
            transactionTxt = TransactionTxt::construct(LedgerTransTxt::VendPaymentVend, languageId);
        else
            transactionTxt = TransactionTxt::construct(LedgerTransTxt::CustPaymentCust, languageId);

        custVendTrans.skipPostLoad(true);
        while select crossCompany RecId from specTrans
            order by specTrans.RecId
            where specTrans.SpecCompany == _specCompany
               && specTrans.SpecTableId == _specTableId
               && specTrans.SpecRecId   == _specRecId
            join RecId from custVendTransOpen
                where custVendTransOpen.DataAreaId == specTrans.RefCompany
                   && custVendTransOpen.TableId == specTrans.RefTableId
                   && custVendTransOpen.RecId   == specTrans.RefRecId
            join TransDate, DocumentNum, Invoice, PaymId, Voucher from custVendTrans
                where custVendTrans.RecId == custVendTransOpen.RefRecId
        {
            paymId = custVendTrans.PaymId;

            if (!paymId && custVendTable.TableId == tableNum(VendTable))
                paymId = custVendTable.PaymId;

            transactionTxt.setDate(custVendTrans.TransDate);
            transactionTxt.setFormLetter(custVendTrans.DocumentNum ? custVendTrans.DocumentNum : custVendTrans.Invoice);
            transactionTxt.setKey1(paymId);
            transactionTxt.setVoucher(custVendTrans.Voucher);

            if (custVendTrans.TableId == tableNum(vendTrans))
            {
                if (TransactionTextContext::isTypeSupported(LedgerTransTxt::VendPaymentVend))
                {
                    transactionTextContext = TransactionTextContext::newForTransactionType(LedgerTransTxt::VendPaymentVend);
                    vendTrans = VendTrans::find(custVendTrans.RecId);
                    transactionTextContext.setTableBuffer(vendTrans);
                }
            }
            else
            {
                if (TransactionTextContext::isTypeSupported(LedgerTransTxt::CustPaymentCust))
                {
                    transactionTextContext = TransactionTextContext::newForTransactionType(LedgerTransTxt::CustPaymentCust);
                    custTrans = CustTrans::find(custVendTrans.RecId);
                    transactionTextContext.setTableBuffer(custTrans);
                }
            }

            transactionTxt.setTransactionTextContext(transactionTextContext);

            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                if (custVendTrans.TableId == tableNum(vendTrans))
                {
                    vendTrans = VendTrans::find(custVendTrans.RecId);
                    transactionTxt.setCustVendName(vendTrans.vendTableName());
                }
                else
                {
                    custTrans = CustTrans::find(custVendTrans.RecId);
                    transactionTxt.setCustVendName(custTrans.custTableName());
                }
            }
            // </GBR>
            transTxt = transactionTxt.txt();

            if (paymNote)
            {
                paymNote += '\n';
            }
            if (strLen(paymNote + transTxt) < (paymNoteLength - 5))
            {
                paymNote += transTxt;
            }
            else
            {
                paymNote += '...';
                warning("@SYS88939");
                break;
            }
        }

        return paymNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendTransStatic</Name>
				<Source><![CDATA[
    public CustVendTransStatic parmCustVendTransStatic(CustVendTransStatic _custVendTransStatic = custVendTransStatic)
    {
        custVendTransStatic = _custVendTransStatic;

        return custVendTransStatic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendPaymNote construct()
    {
        return new CustVendPaymNote();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustVendTransStatic</Name>
				<Source><![CDATA[
    static public CustVendPaymNote newCustVendTransStatic(CustVendTransStatic  _custVendTransStatic)
    {
        CustVendPaymNote    custVendPaymNote = CustVendPaymNote::construct();

        custVendPaymNote.parmCustVendTransStatic(_custVendTransStatic);

        return custVendPaymNote;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>