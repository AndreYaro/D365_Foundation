<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchGoodsReceiptNoteDP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchGoodsReceiptNoteDP_IN</c> is the report Data Provider class for <c>PurchGoodsReceiptNote_IN</c> SSRS report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(TradeDocumentReportContract))
]
public class PurchGoodsReceiptNoteDP_IN extends SrsReportDataProviderPreProcess
{
    VendPackingSlipJour vendPackingSlipJour;
    VendPackingSlipTrans vendPackingSlipTrans;
    VendPackingSlipVersion vendPackingSlipVersion;
    PurchGoodsReceiptNoteTmp_IN goodsReceiptNoteTmp_IN;
    InventDim inventDim;
    PurchGoodsReceiptNoteTmp_IN goodsReceiptNoteTmpTemplate_IN;
    PurchGoodsReceiptNoteHeaderTmp_IN goodsReceiptNoteHeaderTmp_IN;
    container inventDimSetup;
    container inventDimProductSetup;
    InventDimCtrl_Rep_Purch inventDimReport;
    boolean insertData;
    str dimHistoryStr;
    int counter;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>externalItemNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ItemId in the <c>ExternalItemId</c> field.
    /// </summary>
    /// <returns>
    /// The ItemId value in the <c>ExternalItemId</c> field.
    /// </returns>
    private ExternalItemId externalItemNum()
    {
        switch (VendFormletterParameters::find().ItemNum)
        {
            case OurYourBoth::Our : return '';
            case OurYourBoth::Your : return '';
            case OurYourBoth::Both : return vendPackingSlipTrans.ExternalItemId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGoodsReceiptNoteHeaderTmp_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from <c>GoodsReceiptNoteHeaderTmp_IN</c> Temp Table.
    /// </summary>
    /// <returns>
    /// The <c>GoodsReceiptNoteHeaderTmp_IN</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PurchGoodsReceiptNoteHeaderTmp_IN))
    ]
    public PurchGoodsReceiptNoteHeaderTmp_IN getGoodsReceiptNoteHeaderTmp_IN()
    {
        select goodsReceiptNoteHeaderTmp_IN;
        return goodsReceiptNoteHeaderTmp_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGoodsReceiptNoteTmp_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from <c>GoodsReceiptNoteTmp_IN</c> Temp Table.
    /// </summary>
    /// <returns>
    /// The <c>GoodsReceiptNoteTmp_IN</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(PurchGoodsReceiptNoteTmp_IN))
    ]
    public PurchGoodsReceiptNoteTmp_IN getGoodsReceiptNoteTmp_IN()
    {
        select goodsReceiptNoteTmp_IN;
        return goodsReceiptNoteTmp_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the Invent Quantity and Invent Storage Dimensions.
    /// </summary>
    /// <returns>
    /// The string with the inventory dimensions.
    /// </returns>
    /// <remarks>
    /// This method is called for each of the transactions.
    /// </remarks>
    private str insertInventTrans()
    {
        InventQty qtyRemain = vendPackingSlipTrans.InventQty;
        InventQty qtyTrans;
        InventTransOrigin localInventTransOrigin;
        InventTrans inventTrans;
        InventDim localInventDim;
        InventReportDimHistory inventReportDimHistory;

        void inventDimInsert()
        {
            InventQty purchQty;
            str inventDimString;
            #xppTexts

            str quantityLabel = SysLabel::labelId2String(literalStr("@SYS321794"), vendPackingSlipJour.LanguageId);

            if (inventReportDimHistory.Qty && localInventDim)
            {
                inventDimString = FormLetter::inventDimReport(localInventDim, inventDimSetup, '');
                if (inventDimString)
                {
                    purchQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                        vendPackingSlipTrans.ItemId,
                        vendPackingSlipTrans.InventDimId,
                        inventReportDimHistory.Qty,
                        InventTable::find(vendPackingSlipTrans.ItemId).inventUnitId(),
                        vendPackingSlipTrans.PurchUnit, 
                        NoYes::Yes);

                    dimHistoryStr = strFmt(quantityLabel, abs(purchQty), inventDimString);
                    this.setGoodsReceiptNoteTmp_IN();
                    insertData = true;
                }
            }
        }

        if (vendPackingSlipJour.isProforma())
        {
            if (qtyRemain)
            {
                while select inventTrans
                    order by StatusReceipt, InventDimId
                        where (inventTrans.StatusReceipt == StatusReceipt::Ordered
                            || inventTrans.StatusReceipt == StatusReceipt::Arrived
                            || inventTrans.StatusReceipt == StatusReceipt::Registered)
                            && inventTrans.StatusIssue == StatusIssue::None
                    join localInventDim
                        where localInventDim.InventDimId == inventTrans.InventDimId
                    exists join localInventTransOrigin
                        where localInventTransOrigin.InventTransId == vendPackingSlipTrans.InventTransId
                            && inventTrans.InventTransOrigin == localInventTransOrigin.RecId

                {
                    if (qtyRemain)
                    {
                        if (abs(inventTrans.Qty) > qtyRemain)
                        {
                            qtyTrans = qtyRemain;
                            qtyRemain = 0;
                        }
                        else
                        {
                            qtyTrans = inventTrans.Qty;
                            qtyRemain -= abs(qtyTrans);
                        }

                        inventReportDimHistory.Qty = qtyTrans;
                        inventDimInsert();
                    }
                    else
                    {
                        break;
                    }
                }
            }
        }
        else
        {
            while select inventReportDimHistory
                where inventReportDimHistory.InventTransId == vendPackingSlipTrans.InventTransId
                    && inventReportDimHistory.TransRefId == vendPackingSlipVersion.InternalPackingSlipId
                    && inventReportDimHistory.TransactionLogType == InventReportDimHistoryLogType::PurchPackingSlip
                join localInventDim
                    where localInventDim.InventDimId == inventReportDimHistory.InventDimId
            {
                inventDimInsert();
            }
        }

        return dimHistoryStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Item ID.
    /// </summary>
    /// <returns>
    /// The Item ID.
    /// </returns>
    private ItemId itemId()
    {
        ItemId itemId;

        switch (VendFormletterParameters::find().ItemNum)
        {
            case OurYourBoth::Our : itemId = vendPackingSlipTrans.ItemId; break;
            case OurYourBoth::Your : itemId = vendPackingSlipTrans.ExternalItemId; break;
            case OurYourBoth::Both : itemId = vendPackingSlipTrans.ItemId; break;
        }

        if (inventDimReport.isInventDimItemId())
        {
            itemId += inventDimReport.reportStrItemId(inventDim);
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic. Calls helper methods and inserts data to temporary table.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by
    /// SSRS at runtime. The method should compute data and populate the data tables that will be
    /// returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        TradeDocumentReportContract objContract = this.parmDataContract() as TradeDocumentReportContract;
        VendPackingSlipTransHistory vendPackingSlipTransHistory;
        Query tradeLoopTransQuery;
        QueryRun tradeLoopTrans;
        QueryBuildDataSource vendPackingSlipTransHistoryQBDS;
        QueryBuildDataSource vendPackingSlipTransQBDS;
        QueryBuildDataSource qbds;
        boolean insertInventDim;
        boolean isVersionArchived;
        recId packingSlipVersionRecId = objContract.parmRecordId();

        vendPackingSlipVersion = VendPackingSlipVersion::find(packingSlipVersionRecId);
        vendPackingSlipJour = VendPackingSlipJour::findRecId(vendPackingSlipVersion.VendPackingSlipJour);
        isVersionArchived = vendPackingSlipVersion.isArchived();

        inventDimReport = InventDimCtrl_Rep_Purch::construct();
        inventDimReport.parmDocumentStatus(DocumentStatus::PackingSlip);
        inventDimReport.initDimParmVisible();
        inventDimSetup = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());
        inventDimReport.initProductDimParmVisible();
        inventDimProductSetup = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());

        //Set header Buffer;
        goodsReceiptNoteHeaderTmp_IN.setConnection(this.parmUserConnection());
        this.setGoodsReceiptNoteHeaderTmp_IN();

        tradeLoopTransQuery = new TradeLoopTrans(vendPackingSlipJour, tableNum(VendPackingSlipTrans)).buildQuery();
        if (isVersionArchived)
        {
            tradeLoopTransQuery.validTimeStateAsOfDateTime(vendPackingSlipVersion.VersionDateTime);
            vendPackingSlipTransQBDS = tradeLoopTransQuery.dataSourceTable(tableNum(VendPackingSlipTrans));
            vendPackingSlipTransHistoryQBDS = vendPackingSlipTransQBDS.addDataSource(tableNum(VendPackingSlipTransHistory));
            vendPackingSlipTransHistoryQBDS.relations(true);
            vendPackingSlipTransHistoryQBDS.joinMode(JoinMode::InnerJoin);
            vendPackingSlipTransHistoryQBDS.fetchMode(QueryFetchMode::One2One);
        }

        if (inventDimReport.isInventDimLine() || inventDimReport.isInventDimItemId())
        {
            vendPackingSlipTransQBDS = tradeLoopTransQuery.dataSourceTable(tableNum(VendPackingSlipTrans));
            qbds = vendPackingSlipTransQBDS.addDataSource(tableNum(InventDim));
            qbds.joinMode(JoinMode::OuterJoin);
            qbds.fetchMode(QueryFetchMode::One2One);
            qbds.addLink(fieldNum(VendPackingSlipTrans ,InventDimId), fieldNum(InventDim ,InventDimId));
            insertInventDim = true;
        }

        tradeLoopTrans = new QueryRun(tradeLoopTransQuery);
        counter = 0;

        goodsReceiptNoteTmp_IN.setConnection(this.parmUserConnection());
        while (tradeLoopTrans.next())
        {
            counter++;
            insertData = false;
            vendPackingSlipTrans = tradeLoopTrans.get(tableNum(VendPackingSlipTrans));
            if (isVersionArchived)
            {
                vendPackingSlipTransHistory = tradeLoopTrans.get(tableNum(VendPackingSlipTransHistory));
                vendPackingSlipTrans.initFromVendPackingSlipTransHistory(vendPackingSlipTransHistory);
            }

            if (insertInventDim)
            {
                inventDim = tradeLoopTrans.get(tableNum(InventDim));
            }
            this.insertInventTrans();

            if (!insertData)
            {
                this.setGoodsReceiptNoteTmp_IN();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGoodsReceiptNoteHeaderTmp_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>GoodsReceiptNoteHeaderTmp_IN</c> table with header details.
    /// </summary>
    private void setGoodsReceiptNoteHeaderTmp_IN()
    {
        CompanyInfo companyInfo = CompanyInfo::find();
        TaxInformation_IN taxInformation;
        TaxRegistrationNumbers_IN taxRegistrationNumbers;

        taxInformation = TaxInformation_IN::findDefaultbyLocation(DirParty::primaryPostalAddressLocationRecId(companyinfo.RecId));

        select firstonly RegistrationNumber, RecId from taxRegistrationNumbers
            where taxRegistrationNumbers.RecId == taxInformation.SalesTaxRegistrationNumber;

        goodsReceiptNoteHeaderTmp_IN.CompanyName = vendPackingSlipJour.DeliveryName;
        goodsReceiptNoteHeaderTmp_IN.CompanyAddress = vendPackingSlipJour.deliveryAddress();
        goodsReceiptNoteHeaderTmp_IN.CompanyPhone = companyInfo.phone();
        goodsReceiptNoteHeaderTmp_IN.CompanyTeleFax = companyInfo.teleFax();
        goodsReceiptNoteHeaderTmp_IN.CompanyGiro = companyInfo.Giro;
        goodsReceiptNoteHeaderTmp_IN.TaxRegistrationNumber = taxRegistrationNumbers.RegistrationNumber;
        goodsReceiptNoteHeaderTmp_IN.CompanyLogo = FormLetter::companyLogo();
        if (conLen(goodsReceiptNoteHeaderTmp_IN.CompanyLogo) == 0)
        {
            goodsReceiptNoteHeaderTmp_IN.PrintLogo = NoYes::No;
        }
        else
        {
            goodsReceiptNoteHeaderTmp_IN.PrintLogo = NoYes::Yes;
        }
        goodsReceiptNoteHeaderTmp_IN.CompanyEnterpriseNumber = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, vendPackingSlipJour.DeliveryDate);

        goodsReceiptNoteHeaderTmp_IN.VendName = vendPackingSlipJour.vendName();
        goodsReceiptNoteHeaderTmp_IN.VendAddress = vendPackingSlipJour.vendAddress();
        goodsReceiptNoteHeaderTmp_IN.GrnNumber_IN = vendPackingSlipJour.GRNNumber_IN;
        goodsReceiptNoteHeaderTmp_IN.DeliveryDate = vendPackingSlipJour.DeliveryDate;
        goodsReceiptNoteHeaderTmp_IN.PurchId = vendPackingSlipJour.PurchId;

        goodsReceiptNoteHeaderTmp_IN.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGoodsReceiptNoteTmp_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>GoodsReceiptNoteTmp_IN</c> table record.
    /// </summary>
    private void setGoodsReceiptNoteTmp_IN()
    {
        this.initGoodsReceiptNoteTmp_IN();
        goodsReceiptNoteTmp_IN.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGoodsReceiptNoteTmp_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>GoodsReceiptNoteTmp_IN</c> table with details.
    /// </summary>
    protected void initGoodsReceiptNoteTmp_IN()
    {
        goodsReceiptNoteTmp_IN.ItemId = this.itemId();
        goodsReceiptNoteTmp_IN.GrnNumber_IN = vendPackingSlipJour.GRNNumber_IN;
        goodsReceiptNoteTmp_IN.Name = vendPackingSlipTrans.Name;
        goodsReceiptNoteTmp_IN.Ordered = vendPackingSlipTrans.Ordered;
        goodsReceiptNoteTmp_IN.PurchUnitTxt = vendPackingSlipTrans.purchUnitTxt();
        goodsReceiptNoteTmp_IN.Qty = vendPackingSlipTrans.Qty;
        goodsReceiptNoteTmp_IN.ReceivedQty_IN = vendPackingSlipTrans.ReceivedQty_IN;
        goodsReceiptNoteTmp_IN.AcceptedQty_IN = vendPackingSlipTrans.AcceptedQty_IN;
        goodsReceiptNoteTmp_IN.RejectedQty_IN = vendPackingSlipTrans.RejectedQty_IN;
        goodsReceiptNoteTmp_IN.RemainingQty = vendPackingSlipTrans.Remain;

        if (inventDim)
        {
            goodsReceiptNoteTmp_IN.InventDimProduct = FormLetter::inventDimReport(
                inventDim,
                inventDimProductSetup,
                '');
        }

        goodsReceiptNoteTmp_IN.InventDimPrint = dimHistoryStr;
        goodsReceiptNoteTmp_IN.ExternalItemNum = this.externalItemNum();
        goodsReceiptNoteTmp_IN.ItemCounter = counter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>