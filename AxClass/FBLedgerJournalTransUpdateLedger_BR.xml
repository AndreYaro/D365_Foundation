<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBLedgerJournalTransUpdateLedger_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBLedgerJournalTransUpdateLedger_BR</c> class controls posted actions after the ledger journal posting.
/// </summary>
class FBLedgerJournalTransUpdateLedger_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelTaxAssessementAdjustment</Name>
				<Source><![CDATA[
    private static void cancelTaxAssessementAdjustment(LedgerJournalTrans _ledgerJournalTrans)
    {
        FBTaxAssessmentAdjustment_BR taxAssessmentAdjustmentToCancel;
        LedgerJournalTrans           ledgerJournalTransToCancel;

        update_recordSet taxAssessmentAdjustmentToCancel
            setting IsCancelled = true, CancelVoucher = _ledgerJournalTrans.Voucher, CancelTransDate = _ledgerJournalTrans.TransDate
            join ledgerJournalTransToCancel
                where ledgerJournalTransToCancel.Company == taxAssessmentAdjustmentToCancel.VoucherDataArea
                    && ledgerJournalTransToCancel.Voucher == taxAssessmentAdjustmentToCancel.Voucher
                    && ledgerJournalTransToCancel.TransDate == taxAssessmentAdjustmentToCancel.TransDate
                    && ledgerJournalTransToCancel.RecId == _ledgerJournalTrans.RevRecId;

        update_recordSet ledgerJournalTransToCancel
            setting RevRecId = _ledgerJournalTrans.RecId
                where ledgerJournalTransToCancel.RecId == _ledgerJournalTrans.RevRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelTaxAssessementFiscalDocAdjustment</Name>
				<Source><![CDATA[
    private static void cancelTaxAssessementFiscalDocAdjustment(LedgerJournalTrans _ledgerJournalTrans)
    {
        FBFiscalDocumentAdjustment_BR   fiscalDocTaxAssessmentAdjustToCancel;
        LedgerJournalTrans              ledgerJournalTransToCancel;

        update_recordSet fiscalDocTaxAssessmentAdjustToCancel
            setting IsCancelled = true, CancelVoucher = _ledgerJournalTrans.Voucher, CancelTransDate = _ledgerJournalTrans.TransDate
            join ledgerJournalTransToCancel
                where ledgerJournalTransToCancel.Company == fiscalDocTaxAssessmentAdjustToCancel.VoucherDataArea
                    && ledgerJournalTransToCancel.Voucher == fiscalDocTaxAssessmentAdjustToCancel.Voucher
                    && ledgerJournalTransToCancel.TransDate == fiscalDocTaxAssessmentAdjustToCancel.TransDate
                    && ledgerJournalTransToCancel.RecId == _ledgerJournalTrans.RevRecId;

        update_recordSet ledgerJournalTransToCancel
            setting RevRecId = _ledgerJournalTrans.RecId
                where ledgerJournalTransToCancel.RecId == _ledgerJournalTrans.RevRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPisCofinsCreditType</Name>
				<Source><![CDATA[
    public static boolean checkPisCofinsCreditType(FBLedgerJournalTrans_FiscalBooks_BR _ledgerJournalTransFiscalBooks)
    {
        FBGeneralAdjustmentCodePISCOFINS_BR generalAdjustmentCode;
        FBContribCreditType_BR              creditType;
        boolean                             ret = true;

        if (_ledgerJournalTransFiscalBooks.TaxType == TaxType_BR::PIS || _ledgerJournalTransFiscalBooks.TaxType == TaxType_BR::COFINS)
        {
            generalAdjustmentCode = FBGeneralAdjustmentCode_BR::find(_ledgerJournalTransFiscalBooks.GeneralAdjustmentCode) as FBGeneralAdjustmentCodePISCOFINS_BR;
            creditType            = FBContribCreditType_BR::find(_ledgerJournalTransFiscalBooks.FBContribCreditType_BR);

            if (FBTaxAssessmentAdjustment_BR::isCreditTypeMandatory(generalAdjustmentCode.AdjustmentType))
            {
                if (creditType.ValidTo != dateNull() && creditType.ValidTo < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                {
                    ret = checkFailed(strFmt("@SYS122855","@SYS345176"));
                }
                if (creditType.ValidFrom > DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
                {
                    ret = checkFailed(strFmt("@SYS122855","@SYS345174"));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxAmountValue</Name>
				<Source><![CDATA[
    public static boolean checkTaxAmountValue(FBLedgerJournalTrans_FiscalBooks_BR _ledgerJournalTransFiscalBooks)
    {
        FBTaxBaseAmount_BR taxBaseAmount;
        FBTaxAmount_BR taxAmount;
        FBTaxValue_BR taxValue;

        taxBaseAmount = _ledgerJournalTransFiscalBooks.TaxBaseAmount;
        taxAmount = _ledgerJournalTransFiscalBooks.TaxAmount;
        taxValue = _ledgerJournalTransFiscalBooks.TaxValue;

        if (taxBaseAmount != 0 && taxAmount != 0 && taxValue != 0)
        {
            CurrencyCode currencyCode = Ledger::accountingCurrency();

            if (abs(taxAmount - CurrencyExchange::round(taxBaseAmount * taxValue / 100, currencyCode)) > 0.5)
            {
                return checkFailed("@SYP4882311");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxAssessment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>FBTaxAssessment_BR</c> table.
    /// </summary>
    /// <param name="_taxType">
    /// A <c>TaxType_BR</c> tax type.
    /// </param>
    /// <param name="_transDate">
    /// Date of the transaction.
    /// </param>
    /// <param name="_fiscalEstablishmentRecId">
    /// A record ID of the fiscal establihsment table.
    /// </param>
    /// <param name="_state">
    /// A brazilian state.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>FBTaxAssessment_BR</c> table; otherwise, an empty record.
    /// </returns>
    public static FBTaxAssessment_BR findTaxAssessment(TaxType_BR _taxType, TransDate _transDate, FiscalEstablishmentRecId_BR _fiscalEstablishmentRecId, LogisticsAddressStateId _state, boolean _forUpdate = false)
    {
        FBTaxAssessment_BR      fbTaxAssessment;
        FBBookingPeriod_BR      fbBookingPeriod;
        FiscalEstablishment_BR  fiscalEstablishment;
        FiscalOrganization_BR                   fiscalOrganization;

        if (_fiscalEstablishmentRecId)
        {
            fbTaxAssessment.selectForUpdate(_forUpdate);

            select firstOnly * from fbTaxAssessment
                where fbTaxAssessment.FromDate <= _transDate
                    && fbTaxAssessment.ToDate >= _transDate
                    && fbTaxAssessment.TaxType == _taxType
                    && fbTaxAssessment.State   == _state
                    exists join fbBookingPeriod
                        where fbBookingPeriod.RecId == fbTaxAssessment.FBBookingPeriod_BR
                            exists join fiscalEstablishment
                                where fiscalEstablishment.dataAreaId == fbBookingPeriod.FiscalEstablishmentDataArea
                                    && fiscalEstablishment.FiscalEstablishmentId == fbBookingPeriod.FiscalEstablishmentId
                                    && fiscalEstablishment.RecId == _fiscalEstablishmentRecId;

            if (!fbTaxAssessment && (_taxType == TaxType_BR::PIS || _taxType == TaxType_BR::COFINS))
            {
                fiscalEstablishment = FiscalEstablishment_BR::find(_fiscalEstablishmentRecId);
                // The branch booking period must exist
                fbBookingPeriod = FBBookingPeriod_BR::findByFiscalEstablishmentAndPeriod(fiscalEstablishment.FiscalEstablishmentId, fiscalEstablishment.dataAreaId, mthOfYr(_transDate), year(_transDate));

                if (fbBookingPeriod)
                {
                    // Search for a tax assessment related to the fiscal organization
                    select firstOnly * from fbTaxAssessment
                        where fbTaxAssessment.FromDate  <= _transDate
                            && fbTaxAssessment.ToDate   >= _transDate
                            && fbTaxAssessment.TaxType  == _taxType
                        exists join fbBookingPeriod
                            where   fbBookingPeriod.RecId == fbTaxAssessment.FBBookingPeriod_BR
                        exists join fiscalOrganization
                            where   fiscalOrganization.RecId                        == fiscalEstablishment.FiscalOrganization_BR
                                &&  fiscalOrganization.FiscalEstablishmentDataArea  == fbBookingPeriod.FiscalEstablishmentDataArea
                                &&  fiscalOrganization.FiscalEstablishmentId        == fbBookingPeriod.FiscalEstablishmentId;
                }
            }
        }

        return fbTaxAssessment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCheckWhenPostHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Event handler for checkWhenPost method.
    /// </summary>
    /// <param name="_args">
    ///     <c>XppPrePostArgs</c> argument class.
    /// </param>
    [PostHandlerFor(classStr(LedgerJournalTransUpdateLedger), methodStr(LedgerJournalTransUpdateLedger, checkWhenPost))]
    public static void postCheckWhenPostHandler(XppPrePostArgs _args)
    {
        LedgerJournalTrans                      ledgerJournalTrans;
        LedgerJournalTrans                      originalLedgerJournalTrans;
        boolean                                 ok;
        FBLedgerJournalTrans_FiscalBooks_BR     ledgerJournalTransFiscalBooks;
        FBTaxAssessment_BR                      taxAssessment;

        if (!BrazilParameters::isEnabled())
            return;

        ok = _args.getReturnValue();

        ledgerJournalTrans = _args.getArg(identifierStr(_ledgerJournalTrans));
        ledgerJournalTransFiscalBooks = ledgerJournalTrans.SysExtensionSerializerMap::getExtensionTable(tableNum(FBLedgerJournalTrans_FiscalBooks_BR));

        taxAssessment = FBLedgerJournalTransUpdateLedger_BR::findTaxAssessment(ledgerJournalTransFiscalBooks.TaxType, ledgerJournalTrans.TransDate, ledgerJournalTransFiscalBooks.FiscalEstablishment_BR, ledgerJournalTransFiscalBooks.State);

        if (taxAssessment && taxAssessment.isClosed())
        {
            ok = checkFailed("@SYS4001755");
        }

        ledgerJournalTrans = _args.getArg(identifierStr(_ledgerJournalTrans));
        originalLedgerJournalTrans = _args.getArg(identifierStr(_originalLedgerJournalTrans));

        if (ledgerJournalTrans.LedgerDimension == originalLedgerJournalTrans.LedgerDimension && ledgerJournalTrans.TaxCode)
        {
            ttsBegin;

            ledgerJournalTransFiscalBooks = ledgerJournalTrans.SysExtensionSerializerMap::getExtensionTable(tableNum(FBLedgerJournalTrans_FiscalBooks_BR));

            if (ledgerJournalTransFiscalBooks)
            {
                taxAssessment = FBLedgerJournalTransUpdateLedger_BR::findTaxAssessment(ledgerJournalTransFiscalBooks.TaxType, ledgerJournalTrans.TransDate, ledgerJournalTransFiscalBooks.FiscalEstablishment_BR, ledgerJournalTransFiscalBooks.State);

                switch (ledgerJournalTransFiscalBooks.AdjustmentType)
                {
                    case FBTaxAssessmentAdjustmentType_BR::General:
                        ok = FBLedgerJournalTransUpdateLedger_BR::checkTaxAmountValue(ledgerJournalTransFiscalBooks) &&
                             FBLedgerJournalTransUpdateLedger_BR::checkPisCofinsCreditType(ledgerJournalTransFiscalBooks);

                        break;

                    case FBTaxAssessmentAdjustmentType_BR::FiscalDocument :
                        if (ledgerJournalTransFiscalBooks.TaxAmount == 0)
                        {
                            ok = checkFailed(strFmt("@SYS26332", fieldId2pname(tableNum(FBLedgerJournalTrans_FiscalBooks_BR), fieldnum(FBLedgerJournalTrans_FiscalBooks_BR, TaxAmount))));
                        }

                        if (ledgerJournalTransFiscalBooks.TaxType != TaxType_BR::IPI)
                        {
                            if (ledgerJournalTransFiscalBooks.TaxValue == 0)
                            {
                                ok = checkFailed(strFmt("@SYS26332", fieldId2pname(tableNum(FBLedgerJournalTrans_FiscalBooks_BR), fieldnum(FBLedgerJournalTrans_FiscalBooks_BR, TaxValue))));
                            }

                            if (ledgerJournalTransFiscalBooks.TaxBaseAmount == 0)
                            {
                                ok = checkFailed(strFmt("@SYS26332", fieldId2pname(tableNum(FBLedgerJournalTrans_FiscalBooks_BR), fieldnum(FBLedgerJournalTrans_FiscalBooks_BR, TaxBaseAmount))));
                            }
                        }

                        if (ledgerJournalTransFiscalBooks.ObservationCodeTable == 0)
                        {
                            ok = checkFailed(strFmt("@SYS26332", fieldId2pname(tableNum(FBLedgerJournalTrans_FiscalBooks_BR), fieldnum(FBLedgerJournalTrans_FiscalBooks_BR, ObservationCodeTable))));
                        }

                        if (ledgerJournalTransFiscalBooks.FiscalDocument_BR == 0)
                        {
                            ok = checkFailed("@FBK4520029");
                        }

                        if (ledgerJournalTransFiscalBooks.FiscalDocumentTaxTrans_BR == 0 && ledgerJournalTransFiscalBooks.TaxType == TaxType_BR::IPI)
                        {
                            ok = checkFailed("@FBK4520029");
                        }
    
                        break;
                }
            }

            ttsCommit;
        }

        _args.setReturnValue(ok);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdateNowHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Event handler for updateNow method.
    /// </summary>
    /// <param name="_args">
    ///     <c>XppPrePostArgs</c> argument class.
    /// </param>
    [PostHandlerFor(classStr(LedgerJournalTransUpdateLedger), methodStr(LedgerJournalTransUpdateLedger, updateNow))]
    public static void postUpdateNowHandler(XppPrePostArgs _args)
    {
        LedgerJournalTrans                      ledgerJournalTrans;
        LedgerJournalTrans                      originalLedgerJournalTrans;
        FBLedgerJournalTrans_FiscalBooks_BR     ledgerJournalTransFiscalBooks;
        FBTaxAssessmentAdjustment_BR            taxAssessmentAdjustment;
        FBTaxAssessment_BR                      taxAssessment;
        FBFiscalDocumentAdjustment_BR           fiscalDocumentAdjustmentICMS;
        boolean                                 isCancel;

        if (!BrazilParameters::isEnabled())
            return;

        ledgerJournalTrans = _args.getArg(identifierStr(_ledgerJournalTrans));
        originalLedgerJournalTrans = _args.getArg(identifierStr(_originalLedgerJournalTrans));

        if (ledgerJournalTrans.LedgerDimension == originalLedgerJournalTrans.LedgerDimension && ledgerJournalTrans.TaxCode )
        {
            ttsBegin;

            ledgerJournalTransFiscalBooks = ledgerJournalTrans.SysExtensionSerializerMap::getExtensionTable(tableNum(FBLedgerJournalTrans_FiscalBooks_BR));

            if (ledgerJournalTransFiscalBooks)
            {
                isCancel = ledgerJournalTrans.RevRecId != 0;
                taxAssessment = FBLedgerJournalTransUpdateLedger_BR::findTaxAssessment(ledgerJournalTransFiscalBooks.TaxType, ledgerJournalTrans.TransDate, ledgerJournalTransFiscalBooks.FiscalEstablishment_BR, ledgerJournalTransFiscalBooks.State);

                switch (ledgerJournalTransFiscalBooks.AdjustmentType)
                {
                    case FBTaxAssessmentAdjustmentType_BR::General :
                        if (isCancel)
                        {
                            FBLedgerJournalTransUpdateLedger_BR::cancelTaxAssessementAdjustment(ledgerJournalTrans);
                        }

                        if (taxAssessment.RecId)
                        {
                            taxAssessmentAdjustment.FBTaxAssessment_BR = taxAssessment.RecId;
                        }

                        taxAssessmentAdjustment.initTaxAssessmentAdjustmentFromLedgerJournalTrans(ledgerJournalTrans);
                        taxAssessmentAdjustment.insert();
                        break;

                    case FBTaxAssessmentAdjustmentType_BR::FiscalDocument :
                        if (isCancel)
                        {
                            FBLedgerJournalTransUpdateLedger_BR::cancelTaxAssessementFiscalDocAdjustment(ledgerJournalTrans);
                        }

                        try
                        {
                            fiscalDocumentAdjustmentICMS.FBTaxAssessment_BR = taxAssessment.RecId;
                            fiscalDocumentAdjustmentICMS.initFromLedgerJournalTrans(ledgerJournalTrans);
                            fiscalDocumentAdjustmentICMS.insert();
                        }
                        catch (Exception::DuplicateKeyException)
                        {
                            throw Exception::Error;
                        }
                        break;
                }
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>