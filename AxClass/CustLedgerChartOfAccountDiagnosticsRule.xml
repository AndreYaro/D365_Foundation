<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustLedgerChartOfAccountDiagnosticsRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustLedgerChartOfAccountDiagnosticsRule</c> class is used to check whether customer posting profiles are set up correctly.
/// </summary>
[DiagnosticsRuleAttribute]
public final class CustLedgerChartOfAccountDiagnosticsRule implements IDiagnosticsRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether customer posting profiles are set up correctly.
    /// </summary>
    /// <returns>
    /// An instance of <c>DiagnosticsRuleValidationResult</c> which contains the validation result.
    /// </returns>
    [DiagnosticsRuleSubscriptionAttribute(DiagnosticsArea::Financial, "@AccountsReceivable:CustLedgerChartOfAccountRuleName", DiagnosticsRunFrequency::Monthly, "@AccountsReceivable:CustLedgerChartOfAccountRuleDescription")]
    public DiagnosticsRuleValidationResult validate()
    {
        DiagnosticsRuleValidationResult validationResult = DiagnosticsRuleValidationResult::construct();
        DimensionAttributeValueCombination  davc;
        MainAccount             mainAccount;
        Ledger                  ledger;
        LedgerChartOfAccounts   coaLedger;
        CustLedgerAccounts      custLedgerAccounts;
        CompanyInfo             companyInfo;
        DataArea                dataArea;
        Map mainAccounts = new Map(Types::Int64, Types::Container);

        while select id from dataArea
        {
            changecompany(dataArea.id)
            {
                custLedgerAccounts.clear();
                davc.clear();
                mainAccount.clear();
                companyInfo.clear();
                ledger.clear();
                coaLedger.clear();

                // Clearling ledger dimension check
                if (isConfigurationkeyEnabled(configurationKeyNum(CashFlowForecasting)))
                {
                    while select ClearingLedgerDimension, DataAreaId
                        from custLedgerAccounts
                        join MainAccount from davc
                            where davc.RecId == custLedgerAccounts.ClearingLedgerDimension
                        join MainAccountId, LedgerChartOfAccounts from mainAccount
                            where mainAccount.RecId == davc.MainAccount
                        join DataArea from companyInfo
                            where companyInfo.DataArea == custLedgerAccounts.DataAreaId
                        Join PrimaryForLegalEntity, ChartOfAccounts from ledger
                            where ledger.PrimaryForLegalEntity == companyInfo.RecId
                        join Name from coaLedger
                            where coaLedger.RecId == ledger.ChartOfAccounts
                            && mainAccount.LedgerChartOfAccounts != ledger.ChartOfAccounts
                    {
                        if (!mainAccounts.exists(mainAccount.RecId))
                        {
                            mainAccounts.insert(mainAccount.RecId, ["@SYS3286", coaLedger.Name, mainAccount.MainAccountId]);
                        }
                    }
                }

                // Liabilities for discount ledger dimension check
                while select LiabilitiesForDiscountLedgerDimension, DataAreaId
                    from custLedgerAccounts
                    join MainAccount from davc
                        where davc.RecId == custLedgerAccounts.LiabilitiesForDiscountLedgerDimension
                    join MainAccountId, LedgerChartOfAccounts from mainAccount
                        where mainAccount.RecId == davc.MainAccount
                    join DataArea from companyInfo
                        where companyInfo.DataArea == custLedgerAccounts.DataAreaId
                    Join PrimaryForLegalEntity, ChartOfAccounts from ledger
                        where ledger.PrimaryForLegalEntity == companyInfo.RecId
                    join Name from coaLedger
                        where coaLedger.RecId == ledger.ChartOfAccounts
                        && mainAccount.LedgerChartOfAccounts != ledger.ChartOfAccounts
                {
                    if (!mainAccounts.exists(mainAccount.RecId))
                    {
                        mainAccounts.insert(mainAccount.RecId, ["@SYS73426", coaLedger.Name, mainAccount.MainAccountId]);
                    }
                }

                // Summary account ledger dimension check
                while select SummaryLedgerDimension, DataAreaId
                    from custLedgerAccounts
                    join MainAccount from davc
                        where davc.RecId == custLedgerAccounts.SummaryLedgerDimension
                    join MainAccountId, LedgerChartOfAccounts from mainAccount
                        where mainAccount.RecId == davc.MainAccount
                    join DataArea from companyInfo
                        where companyInfo.DataArea == custLedgerAccounts.DataAreaId
                    Join PrimaryForLegalEntity, ChartOfAccounts from ledger
                        where ledger.PrimaryForLegalEntity == companyInfo.RecId
                    join Name from coaLedger
                        where coaLedger.RecId == ledger.ChartOfAccounts
                        && mainAccount.LedgerChartOfAccounts != ledger.ChartOfAccounts
                {
                    if (!mainAccounts.exists(mainAccount.RecId))
                    {
                        mainAccounts.insert(mainAccount.RecId, ["@SYS11733", coaLedger.Name, mainAccount.MainAccountId]);
                    }
                }

                // Sales tax prepayments ledger dimension check
                while select VATPrepaymentsLedgerDimension, DataAreaId
                    from custLedgerAccounts
                    join MainAccount from davc
                        where davc.RecId == custLedgerAccounts.VATPrepaymentsLedgerDimension
                    join MainAccountId, LedgerChartOfAccounts from mainAccount
                        where mainAccount.RecId == davc.MainAccount
                    join DataArea from companyInfo
                        where companyInfo.DataArea == custLedgerAccounts.DataAreaId
                    Join PrimaryForLegalEntity, ChartOfAccounts from ledger
                        where ledger.PrimaryForLegalEntity == companyInfo.RecId
                    join Name from coaLedger
                        where coaLedger.RecId == ledger.ChartOfAccounts
                        && mainAccount.LedgerChartOfAccounts != ledger.ChartOfAccounts
                {
                    if (!mainAccounts.exists(mainAccount.RecId))
                    {
                        mainAccounts.insert(mainAccount.RecId, ["@SYS68656", coaLedger.Name, mainAccount.MainAccountId]);
                    }
                }

                // Write-off account ledger dimension check
                while select WriteOffLedgerDimension, DataAreaId
                    from custLedgerAccounts
                    join MainAccount from davc
                        where davc.RecId == custLedgerAccounts.WriteOffLedgerDimension
                    join MainAccountId, LedgerChartOfAccounts from mainAccount
                        where mainAccount.RecId == davc.MainAccount
                    join DataArea from companyInfo
                        where companyInfo.DataArea == custLedgerAccounts.DataAreaId
                    Join PrimaryForLegalEntity, ChartOfAccounts from ledger
                        where ledger.PrimaryForLegalEntity == companyInfo.RecId
                    join Name from coaLedger
                        where coaLedger.RecId == ledger.ChartOfAccounts
                        && mainAccount.LedgerChartOfAccounts != ledger.ChartOfAccounts
                {
                    if (!mainAccounts.exists(mainAccount.RecId))
                    {
                        mainAccounts.insert(mainAccount.RecId, ["@SYS134966", coaLedger.Name, mainAccount.MainAccountId]);
                    }
                }
            }
        }

        if (mainAccounts.elements())
        {
            validationResult.addValidationResult("@AccountsReceivable:CustLedgerChartOfAccountRuleMessage", DiagnosticsValidationSeverity::High, "@AccountsReceivable:CustLedgerChartOfAccountRuleRecommendation");
            MapEnumerator mainAccountEnumerator = mainAccounts.getEnumerator();

            while (mainAccountEnumerator.moveNext())
            {
                str coaName, mainAccountId, accountType;

                [accountType, coaName, mainAccountId] = mainAccountEnumerator.currentValue();
                validationResult.addValidationDetail("@SYS342312", accountType);
                validationResult.addValidationDetail("@SYS40787", coaName);
                validationResult.addValidationDetail("@SYS129344", mainAccountId);
                validationResult.addValidationDetail("@SYS3676", mainAccountEnumerator.currentKey());
            }
        }

        return validationResult;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>