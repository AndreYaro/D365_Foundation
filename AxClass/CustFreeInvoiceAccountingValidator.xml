<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustFreeInvoiceAccountingValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Validates free text invoice posting data. This will not validate proforma invoices.
/// </summary>
[ExportMetadataAttribute(enumStr(SourceDocument_CustomerInvoice), SourceDocument_CustomerInvoice::CustomerFreeTextInvoice)]
[ExportAttribute('Microsoft.Dynamics.AX.Application.SubledgerJournalizerDocumentValidationIProvider')]
internal final class CustFreeInvoiceAccountingValidator implements SubledgerJournalizerDocumentValidationIProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validation based on <c>SubledgerJournalizerDocumentValidationIProvider</c> for free text invoice posting.
    /// </summary>
    /// <param name = "_accountingEvent">The accounting event for the journalization task using source document accounting processor</param>
    /// <param name = "_voucher">The voucher used for the posting to ledger; if no accounting is generated then this will be blank</param>
    /// <param name = "_sourceDocumentLineSubmittedForProcessing">All the source document lines that are submitted to source document accounting processor</param>
    /// <param name = "_accountingDistributionTmpForValidation">Accounting distribution detail for the document submitted for processing</param>
    /// <param name = "_subledgerJournalAccountEntryTmpForValidation">Detail accounting of the voucher that is getting posted</param>
    [Hookable(false)]
    public void validateDocument(
        AccountingEvent _accountingEvent,
        Voucher _voucher,
        SourceDocumentLineRecIdTmp _sourceDocumentLineSubmittedForProcessing,
        AccountingDistributionTmpForValidation _accountingDistributionTmpForValidation,
        SubledgerJournalAccountEntryTmpForValidation _subledgerJournalAccountEntryTmpForValidation)
    {
        if (FeatureStateProvider::isFeatureEnabled(CustFreeInvoiceAccountingValidatorFeature::instance()))
        {
            this.validateSourceDocumentHeaderLinkToCustInvoiceJour(_sourceDocumentLineSubmittedForProcessing);
            this.validateSourceDocumentLineLinkToCustInvoiceTrans(_sourceDocumentLineSubmittedForProcessing);
            this.validateExistingCustTransForAccEvent(_sourceDocumentLineSubmittedForProcessing);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSourceDocumentHeaderLinkToCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to ensure that source document header has a valid reference to invoice journal.
    /// </summary>
    /// <param name = "_sourceDocumentLineSubmittedForProcessing">source document lines to process</param>
    private void validateSourceDocumentHeaderLinkToCustInvoiceJour(SourceDocumentLineRecIdTmp _sourceDocumentLineSubmittedForProcessing)
    {
        
        CustInvoiceJour custInvoiceJour;
        
        select firstonly SourceDocumentHeader from _sourceDocumentLineSubmittedForProcessing
            where (_sourceDocumentLineSubmittedForProcessing.SourceRelationType == tableNum(CustInvoiceTrans) ||
                    _sourceDocumentLineSubmittedForProcessing.SourceRelationType == tableNum(CustInvoiceLine))
            notexists join custInvoiceJour
            where custInvoiceJour.SourceDocumentHeader == _sourceDocumentLineSubmittedForProcessing.SourceDocumentHeader;

        if (_sourceDocumentLineSubmittedForProcessing.SourceDocumentHeader != 0)
        {
            throw error('@AccountsReceivable:CustFreeInvoiceValidateHeaderAccountingError');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSourceDocumentLineLinkToCustInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to ensure that source document header has a valid reference to invoice lines.
    /// </summary>
    /// <param name = "_sourceDocumentLineSubmittedForProcessing">source document lines to process</param>
    private void validateSourceDocumentLineLinkToCustInvoiceTrans(SourceDocumentLineRecIdTmp _sourceDocumentLineSubmittedForProcessing)
    {
        CustInvoiceTrans custInvoiceTrans;
        
        select firstonly SourceDocumentLineRecId from _sourceDocumentLineSubmittedForProcessing
            where (_sourceDocumentLineSubmittedForProcessing.SourceRelationType == tableNum(CustInvoiceTrans) ||
                    _sourceDocumentLineSubmittedForProcessing.SourceRelationType == tableNum(CustInvoiceLine))
            notexists join custInvoiceTrans
            where custInvoiceTrans.SourceDocumentLine == _sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId;

        if (_sourceDocumentLineSubmittedForProcessing.SourceDocumentLineRecId != 0)
        {
            throw error('@AccountsReceivable:CustFreeInvoiceValidateLineAccountingError');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExistingCustTransForAccEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to ensure that <c>custTrans</c> do not exist for accounting event.
    /// </summary>
    /// <param name = "_sourceDocumentLineSubmittedForProcessing">source document lines to process</param>
    private void validateExistingCustTransForAccEvent(SourceDocumentLineRecIdTmp _sourceDocumentLineSubmittedForProcessing)
    {
        AccountingEvent accountingEvent;
        CustTrans custTrans;

        select firstonly SourceDocumentHeader from _sourceDocumentLineSubmittedForProcessing
            where _sourceDocumentLineSubmittedForProcessing.SourceRelationType == tableNum(CustInvoiceLine)
            join accountingEvent
            where accountingEvent.SourceDocumentHeader == _sourceDocumentLineSubmittedForProcessing.SourceDocumentHeader;

        // If we get an accounting event then make sure there is only 0 or 1 associated cust trans record
        // If we find more than 1 cust trans records then this is a duplicate posting and we should error out
        if (accountingEvent)
        {
            select count(RecId) from custTrans
                where custTrans.AccountingEvent == accountingEvent.RecId;

            if (custTrans.RecId > 1)
            {
                throw error('@AccountsReceivable:CustFreeInvoiceValidateExistingCustTransForAccEventError');
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>