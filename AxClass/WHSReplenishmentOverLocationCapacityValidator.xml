<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReplenishmentOverLocationCapacityValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSReplenishmentOverLocationCapacityValidator</c> contains replenishment overflow capacity validation logic.
/// </summary>
internal final class WHSReplenishmentOverLocationCapacityValidator
{
    private WMSLocation         wmsLocation;
    private WHSLocationProfile  locationProfile;

    private ItemId                  currentWorkItemId;
    private InventHandlingQty       currentWorkQty;
    private UnitOfMeasureSymbol     currentWorkUnitId;
    private InventDimId             currentWorkInventDimId;
    private WHSWorkId               currentWorkId;

    private EcoResProductUnitConverter unitConverter;

    private WHSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>WHSReplenishmentOverLocationCapacityUnblockValidator</c> class.
    /// </summary>
    /// <param name = "_replenishmentPutLine">
    /// <c>WHSWorkLine</c> record that is the final put for replenishment work.
    /// </param>
    /// </summary>
    /// <returns>
    /// New instance of <c>WHSReplenishmentOverLocationCapacityUnblockValidator</c> class.
    /// </returns>
    [Hookable(false)]
    internal static WHSReplenishmentOverLocationCapacityValidator newFromWorkLine(WHSWorkLine _replenishmentPutLine)
    {
        if (_replenishmentPutLine.whsWorkTable().WorkTransType != WHSWorkTransType::Replenishment)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        
        WHSReplenishmentOverLocationCapacityValidator replenishmentOverLocationCapacitValidator = new WHSReplenishmentOverLocationCapacityValidator();

        replenishmentOverLocationCapacitValidator.initParameters(_replenishmentPutLine);
        
        return replenishmentOverLocationCapacitValidator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    private void initParameters(WHSWorkLine _workLine)
    {
        wmsLocation         = WMSLocation::find(_workLine.WMSLocationId, _workLine.whsWorkTable().InventLocationId);
        locationProfile     = WHSLocationProfile::find(wmsLocation.LocProfileId);

        currentWorkItemId       = _workLine.ItemId;
        currentWorkQty          = _workLine.QtyRemain;
        currentWorkUnitId       = _workLine.UnitId;
        currentWorkInventDimId  = _workLine.InventDimId;
        currentWorkId           = _workLine.WorkId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkQtyWithinReplenishmentOverflowCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the work quantity will fit in the location based on replenishment overflow parameters.
    /// </summary>
    /// <returns>
    /// true if the quantity fits in the replenishment overflow location; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean isWorkQtyWithinReplenishmentOverflowCapacity()
    {
        using (var activityContext = this.instrumentationLogger().replenishmentActivities().isWorkQtyWithinReplenishmentOverflowCapacity(locationProfile.WorkAvailabilityThresholdType))
        {
            this.instrumentationLogger().logRecordInformation(wmsLocation);
            this.instrumentationLogger().logRecordInformation(locationProfile);

            boolean isQtyWithinCapacity;

            if (locationProfile.WorkAvailabilityThresholdType == WHSWorkAvailabilityThresholdType::Percent)
            {
                isQtyWithinCapacity = this.isWorkQtyWithinReplenishmentOverflowPercentageCapacity();
            }
            else
            {
                isQtyWithinCapacity = this.isWorkQtyWithinReplenishmentOverflowQtyCapacity();
            }

            this.instrumentationLogger().replenishmentActivities().wasWorkQtyWithinReplenishmentOverflowCapacity(activityContext, isQtyWithinCapacity);

            return isQtyWithinCapacity;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkQtyWithinReplenishmentOverflowPercentageCapacity</Name>
				<Source><![CDATA[
    private boolean isWorkQtyWithinReplenishmentOverflowPercentageCapacity()
    {
        InventHandlingQty   allowedQty;
        UnitOfMeasureSymbol allowedUnitId;

        [allowedQty, allowedUnitId] = WHSLocationLimit::retrieveQuantityAndUnitLimitForLocation(wmsLocation.inventLocationId, wmsLocation.wmsLocationId, false);

        boolean stockingLimitsSetup = allowedQty != 0;
        boolean volumetricsSetup    = locationProfile.isVolumeConstraintEnabled();

        using (var activityContext = this.instrumentationLogger().replenishmentActivities().isWorkQtyWithinReplenishmentOverflowPercentageCapacity(stockingLimitsSetup, volumetricsSetup))
        {
            Percent workPercent;

            if (stockingLimitsSetup)
            {
                this.createUnitConverterGivenToUnitOfMeasureSymbol(allowedUnitId);
            
                InventHandlingQty workQty = this.calculateInProcessReplenishmentQtyForLocationIncludingCurrentWork();

                workPercent = workQty / allowedQty * 100;
            }
            else
            {
                workPercent = this.calculateWorkPercentByVolume();
            }

            boolean isQtyWithinPercentageCapacity = ((wmsLocation.whsPCTFilled() + workPercent) <= locationProfile.ReplenishmentOverflowCapacityPercent);

            this.instrumentationLogger().replenishmentActivities().wasWorkQtyWithinReplenishmentOverflowPercentageCapacity(activityContext, isQtyWithinPercentageCapacity);

            return isQtyWithinPercentageCapacity;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInProcessReplenishmentQtyForLocationIncludingCurrentWork</Name>
				<Source><![CDATA[
    private InventHandlingQty calculateInProcessReplenishmentQtyForLocationIncludingCurrentWork()
    {
        return this.convertCurrentWorkQty()
             + this.calculateInProcessReplenishmentQtyForLocation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrentWorkQty</Name>
				<Source><![CDATA[
    private InventHandlingQty convertCurrentWorkQty()
    {
        if (unitConverter.canValueBeConverted())
        {
            currentWorkQty = unitConverter.convertValue(currentWorkQty);
        }

        return currentWorkQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWorkPercentByVolume</Name>
				<Source><![CDATA[
    private Percent calculateWorkPercentByVolume()
    {
        Percent workPercent;
        Volume  maxFillVolume = locationProfile.maxFillVolume();

        if (maxFillVolume != 0)
        {
            WHSPhysDimUOM   physDimUOM = WHSPhysDimUOM::getPhysDimUOMByItem(currentworkItemId, locationProfile.StorageUnit ? locationProfile.StorageUnit : currentWorkUnitId);
            Volume          workVolume = physDimUOM.displayVolume() * this.calculateWorkQtyFromInProcessAndCurrentWork();
            
            workPercent = workVolume / maxFillVolume * 100;
        }

        return workPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWorkQtyFromInProcessAndCurrentWork</Name>
				<Source><![CDATA[
    private InventHandlingQty calculateWorkQtyFromInProcessAndCurrentWork()
    {
        if (locationProfile.StorageUnit)
        {
            this.createUnitConverterGivenToUnitOfMeasureSymbol(locationProfile.StorageUnit);

            this.convertCurrentWorkQty();
        }
        else
        {
            this.createUnitConverterGivenToUnitOfMeasureSymbol(currentWorkUnitId);
        }

        return currentWorkQty + this.calculateInProcessReplenishmentQtyForLocation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUnitConverterGivenToUnitOfMeasureSymbol</Name>
				<Source><![CDATA[
    private void createUnitConverterGivenToUnitOfMeasureSymbol(UnitOfMeasureSymbol _toUnitOfMeasureSymbol)
    {
        unitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(currentWorkItemId, 
                                                                                          currentWorkInventDimId, 
                                                                                          currentWorkUnitId,
                                                                                          _toUnitOfMeasureSymbol,
                                                                                          NoYes::No,
                                                                                          NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkQtyWithinReplenishmentOverflowQtyCapacity</Name>
				<Source><![CDATA[
    private boolean isWorkQtyWithinReplenishmentOverflowQtyCapacity()
    {
        using (var activityContext = this.instrumentationLogger().replenishmentActivities().isWorkQtyWithinReplenishmentOverflowQtyCapacity())
        {
            this.createUnitConverterGivenToUnitOfMeasureSymbol(locationProfile.ReplenishmentOverflowCapacityUnit);

            InventHandlingQty workQty   = this.calculateInProcessReplenishmentQtyForLocationIncludingCurrentWork();
            InventHandlingQty onHandQty = this.calculateOnHandQtyInReplenishmentOverflowUnit();

            boolean isQtyWithinQtyCapacity = (workQty + onHandQty <= locationProfile.ReplenishmentOverflowCapacityQty);

            this.instrumentationLogger().replenishmentActivities().wasWorkQtyWithinReplenishmentOverflowQtyCapacity(activityContext, isQtyWithinQtyCapacity);

            return isQtyWithinQtyCapacity;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOnHandQtyInReplenishmentOverflowUnit</Name>
				<Source><![CDATA[
    private InventHandlingQty calculateOnHandQtyInReplenishmentOverflowUnit()
    {
        WHSLocationOnHandConstraintQueryType queryType = this.createLocationOnHandConstraintQueryType();

        WHSLocationOnHandConstraintQryEnumerator onHandEnumerator = WHSLocationOnHandConstraintQuery::getEnumeratorByLocationId(queryType, wmsLocation.inventLocationId, wmsLocation.wMSLocationId);

        InventHandlingQty onHandQty;

        while (onHandEnumerator.moveNext())
        {
            this.updateUnitConverter(onHandEnumerator.currentItemId(),
                                     onHandEnumerator.currentInventDim().InventDimId,
                                     onHandEnumerator.currentHandlingUnitOfMeasureRecId());

            if (unitConverter.canValueBeConverted())
            {
                onHandQty += unitConverter.convertValue(onHandEnumerator.currentHandlingPhysicalInvent());
            }
        }

        return onHandQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLocationOnHandConstraintQueryType</Name>
				<Source><![CDATA[
    private WHSLocationOnHandConstraintQueryType createLocationOnHandConstraintQueryType()
    {
        WHSLocationOnHandConstraintQueryType queryType = WHSLocationOnHandConstraintQueryType::newWithDelta();

        queryType.parmGroupByItem(true);
        queryType.parmGroupByVariant(true);

        return queryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUnitConverter</Name>
				<Source><![CDATA[
    private void updateUnitConverter(
        ItemId              _itemId,
        InventDimId         _inventDimId,
        UnitOfMeasureRecId  _unitId)
    {
        unitConverter.parmItemId(_itemId);
        unitConverter.parmInventDimId(_inventDimId);
        unitConverter.parmFromUnitOfMeasureRecId(_unitId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInProcessReplenishmentQtyForLocation</Name>
				<Source><![CDATA[
    private InventHandlingQty calculateInProcessReplenishmentQtyForLocation()
    {
        InventHandlingQty   inProcessQty;

        WHSWorkTable        inProcessWork;
        WHSWorkLine         workLine;
        
        while select workLine
            where workLine.WorkType == WHSWorkType::Put
                && workLine.WMSLocationId == wmsLocation.wmsLocationId
                && workLine.WorkStatus != WHSWorkStatus::Cancelled
                && workLine.WorkStatus != WHSWorkStatus::Combined
                && workLine.WorkStatus != WHSWorkStatus::Closed
                && workLine.WorkId != currentWorkId
            exists join inProcessWork
                where inProcessWork.WorkId == workLine.WorkId
                    && inProcessWork.InventLocationId == wmsLocation.InventLocationId
                    && inProcessWork.WorkTransType == WHSWorkTransType::Replenishment
                    && inProcessWork.WorkStatus == WHSWorkStatus::InProcess
        {
            this.updateUnitConverter(workLine.ItemId,
                                     workLine.InventDim().inventDimId,
                                     UnitOfMeasure::unitOfMeasureIdBySymbol(workLine.UnitId));
            
            inProcessQty += unitConverter.canValueBeConverted()
                            ? unitConverter.convertValue(workLine.QtyRemain)
                            : workLine.QtyRemain;
        }

        return inProcessQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>