<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTermJob_Proj</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgTermJob_Proj</c> class represents jobs of type project.
/// </summary>
/// <remarks>
///    These jobs originate from the <c>ProjTable</c>, <c>ProjActivity</c>, and <c>ProjForecastEmpl</c>
///    tables.
/// </remarks>
class JmgTermJob_Proj extends JmgTermJob
{
    ProjTable           projTable;
    ProjActivity        projActivity;
    ProjForecastEmpl    projForecastEmpl;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>actOprId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the operation or activity ID of the job.
    /// </summary>
    /// <returns>
    ///    The activity ID of the job.
    /// </returns>
    /// <remarks>
    ///    The return values of the
    ///    <c>
    ///       actOprId
    ///    </c>
    ///     method depend on which record the job is based on. The records and their respective return values
    ///    are as follows:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>
    ///             The <c>ProjTable</c> record returns an empty string.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             The <c>ProjActivity</c> record returns a project activity ID.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             The <c>ProjForecastempl</c> record returns a project activity ID.
    ///          </description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public JmgActOprID actOprId()
    {
        JmgActOprID ret;

        ret = super();

        if (projActivity)
        {
            ret = projActivity.ActivityNumber;
        }
        else if (projForecastEmpl)
        {
            ret = projForecastEmpl.ActivityNumber;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether employees can register on the job.
    /// </summary>
    /// <returns>
    ///    true if employees can make registrations on the job; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Employees can make registrations on project jobs if the project status is in progress.For a code
    ///    example that uses the <c>allow</c> method, see the <see cref="M:JmgTermJob.allow" />.
    /// </remarks>
    boolean allow()
    {
        if (!jobid)
        {
            return false;
        }

        if (projTable.Header    == NoYes::Yes)
        {
            return false;
        }

        return projTable.status().journalCheckStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTimeHours</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the estimated time that should be used on this particular project job.
    /// </summary>
    /// <returns>
    ///    The estimated time that should be used on the project job.
    /// </returns>
    /// <remarks>
    ///    This method only returns a value for project jobs that originate from the <c>ProjForecastEmpl</c> table. These jobs are the only project jobs with a time associated with them.
    /// </remarks>
    public ProjQty calcTimeHours()
    {
        if (projForecastEmpl)
        {
            return projForecastEmpl.Qty;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads into memory the source data that the job is based on.
    /// </summary>
    /// <param name="_jmgJobTable">
    /// The <c>JmgJobTable</c> record that has the corresponding job ID.
    /// </param>
    /// <param name="_sourceData">
    /// If the source data has already been fetched from the database, the source data can be supplied as a
    /// parameter; optional.
    /// </param>
    /// <remarks>
    ///  This method is a part of the initialization procedure of an instance. For project jobs, the source
    ///  data is a record from one of the following tables:
    ///  <list type="bullet">
    ///   <item>
    ///    <description>
    ///    The <c>ProjTable</c> table.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    The <c>ProjActivity</c> table.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    The <c>ProjForecastEmpl</c> table.
    ///    </description>
    ///   </item>
    ///  </list>
    ///
    ///  For a code example that uses this method, see the <see cref="M:JmgTermJob.initSourceData" />
    ///  .
    /// </remarks>
    protected void initSourceData(JmgJobTable _jmgJobTable, Common _sourceData = null)
    {
        if (_sourceData && _sourceData.TableId == tablenum(ProjTable))
        {
            projTable = _sourceData;
        }
        else if (_sourceData && _sourceData.TableId == tablenum(ProjActivity))
        {
            projActivity = _sourceData;
        }
        else if (_sourceData && _sourceData.TableId == tablenum(ProjForecastEmpl))
        {
            projForecastEmpl = _sourceData;
        }
        else
        {
            switch (_jmgJobTable.Type)
            {
                case JmgJobTableType::ProjProject:
                    projTable = ProjTable::find(_jmgJobTable.ModuleRefId, selectSourceDataForUpdate);
                    if (!projTable)
                    {
                        projTable = ProjTable::findJobId(jobid, selectSourceDataForUpdate);
                    }
                    break;
                case JmgJobTableType::ProjActivity:
                    projActivity    = ProjActivity::findJobId(jobid, selectSourceDataForUpdate);
                    projTable       = HierarchyTreeTable_Extension::findAssociation(smmActivities::find(projActivity.ActivityNumber), tablenum(ProjTable));
                    break;
                case JmgJobTableType::ProjBudget:
                    projForecastEmpl = ProjForecastEmpl::findJobId(jobid, selectSourceDataForUpdate);
                    projTable       = projForecastEmpl.projTable();
                    break;
                default:
                    throw error(strfmt("@SYS22828", funcname()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a description of the job.
    /// </summary>
    /// <returns>
    ///    The description associated with the job.
    /// </returns>
    /// <remarks>
    ///    For jobs based on a <c>ProjTable</c> record, the value of the name field is returned.For jobs based
    ///    on a <c>ProjActivity</c> record, the value of the text field is returned.For jobs based on a
    ///    <c>ProjForecastEmpl</c> record, the value of the text field is returned.For a code example that
    ///    uses the <c>jobDescription</c> method, see the <see cref="M:JmgTermJob.jobDescription" />.
    /// </remarks>
    public JmgDescription jobDescription()
    {
        return jmgJobTable.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the job reference for this job. For project jobs, this is the project ID.
    /// </summary>
    /// <returns>
    ///    The job reference of this job.
    /// </returns>
    JmgJobRef jobRef()
    {
        if (projActivity)
        {
            projTable = HierarchyTreeTable_Extension::findAssociation(smmActivities::find(projActivity.ActivityNumber), tablenum(ProjTable));
            return projTable.ProjId;
        }
        else if (projForecastEmpl)
        {
            return projForecastEmpl.ProjId;
        }
        return projTable.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourRegType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the journal registration type that this kind of job corresponds to.
    /// </summary>
    /// <returns>
    ///    The type of journal line to create when registering on this kind of job.
    /// </returns>
    /// <remarks>
    ///    For project jobs, the journal registration type is either the <c>JmgJourRegTypeEnum::PrjProject</c>
    ///    or <c>JmgJourRegTypeEnum::PrjActivity</c> enumeration value, depending on where the project jobs
    ///    originated.For a code example that uses the <c>jourRegType</c> method, see the <see
    ///    cref="M:JmgTermJob.jourRegType" />.
    /// </remarks>
    public JmgJourRegType jourRegType()
    {
        JmgJourRegType ret;

        if (projActivity)
        {
            ret = JmgJourRegTypeEnum::PrjActivity;
        }
        else if (projForecastEmpl)
        {
            if (projForecastEmpl.ActivityNumber)
            {
                ret = JmgJourRegTypeEnum::PrjActivity;
            }
            else
            {
                ret = JmgJourRegTypeEnum::PrjProject;
            }
        }
        else
        {
            ret = JmgJourRegTypeEnum::PrjProject;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeFeedback</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to provide feedback on a started job
    /// </summary>
    /// <param name="_worker">
    /// The ID of the worker making the feedback.
    /// </param>
    /// <param name="_regParameters">
    /// An instance of the <c>JmgRegistrationParameters</c> class, which encapsulates the parameters to the
    /// registration.
    /// </param>
    /// <param name="_regDate">
    /// Date where the feedback is made.
    /// </param>
    /// <param name="_regTime">
    /// Time where the feedback is made.
    /// </param>
    /// <remarks>
    /// Use this method to enter feedback regarding number of good items that are produced, the number of
    /// scrap items, and whether the job is finished. If the user has indicated that she is no longer
    /// working on the job, a stop job registration will be inserted also.This method is only used with
    /// production jobs, as these are the only type of jobs on which feedback can be made.
    /// </remarks>
    public void makeFeedback(JmgWorkerRecId _worker, JmgRegistrationParameters _regParameters, JmgDate _regDate, JmgTime _regTime)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method creates a start or a stop job registration on this job.
    /// </summary>
    /// <param name="_worker">
    ///    The worker that is making the registration.
    /// </param>
    /// <param name="_date">
    ///    The date of the registration.
    /// </param>
    /// <param name="_time">
    ///    The time of the registration.
    /// </param>
    /// <param name="_start">
    ///    true if it is a start registration; false if it is a stop registration. This parameter is optional
    ///    and the default value is true.
    /// </param>
    /// <param name="_registrationParameters">
    ///    Additional registration parameters, which should be used to make the registration; optional.
    /// </param>
    /// <param name="_autoStamp">
    ///    A <c>NoYes::Yes</c> enumeration value if this this registration is made by an employee; a
    ///    <c>NoYes::No</c> enumeration value if it is made by some function started by a supervisor. This
    ///    parameter is optional with a default value of the <c>NoYes::No</c> enumeration value.
    /// </param>
    /// <remarks>
    ///    If an error is detected when the registration is made, an error is thrown.
    /// </remarks>
    public void makeRegistration(
        JmgWorkerRecId _worker,
        JmgDate _date,
        JmgTime _time,
        boolean _start = true,
        JmgRegistrationParameters _registrationParameters = new JmgRegistrationParameters(),
        NoYes                       _autoStamp = NoYes::No)
    {
        JmgTermReg jmgTermReg;
        ttsbegin;
        this.initCommon(jmgTermReg, _worker, _date, _time, _autoStamp, _registrationParameters);
        if (_start)
        {
            jmgTermReg.RegType = JmgTermRegType::JobStart;
            jmgTermReg.CostCategory = _registrationParameters.costCategory();
        }
        else
        {
            jmgTermReg.RegType = JmgTermRegType::JobStop;
        }
        jmgTermReg.ResNo                = _registrationParameters.wrkCtrId();
        jmgTermReg.insert();
        ttscommit;

        if (jmgTermReg.RegType == JmgTermRegType::JobStop && JmgProductionFloorExecutionProjectFlight::instance().isEnabled())
        {
            infolog.insertMessage(MessageSeverity::Informational, strFmt("@SCM:JmgProjectJobStopped", jmgTermReg.jobRef()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the module that the job originated from, which is <c>JmgModuleEnum::Proj</c>.
    /// </summary>
    /// <returns>
    ///    <c>JmgModuleEnum::Proj</c>
    /// </returns>
    /// <remarks>
    ///    For a code example that uses the <c>module</c> method, see the <see cref="M:JmgTermJob.module" />.
    /// </remarks>
    JmgModuleEnum module()
    {
        return JmgModuleEnum::PROJ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <see cref="T:JmgTermJob_Proj" />.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean data specifies whether to select the source data for update; optional.
    /// </param>
    /// <remarks>
    ///    An instance of the <c>JmgTermJob_Proj</c> class should be instantiated by using this method.
    ///    Instead, create instances of the <c>JmgTermReg</c> subclasses by using the <see
    ///    cref="M:JmgTermJob::construct" /> or the <see cref="M:JmgTermJob::constructJobTable" />.
    /// </remarks>
    void new(boolean _forUpdate = false)
    {
        super();
        selectSourceDataForUpdate = _forUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>ProjTable</c> record, which is associated to the project job.
    /// </summary>
    /// <returns>
    /// The <c>ProjTable</c> record, which is associated to the project job.
    /// </returns>
    public ProjTable projTable()
    {
        return projTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedFinish</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method returns whether the job is reported as finished in shop floor control.
    /// </summary>
    /// <returns>
    ///    true if an employee has reported the job as finished; otherwise, false.
    /// </returns>
    boolean reportedFinish()
    {
        return jmgJobTable.ReportedFinished == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedStarted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether the job has been reported as started. If the project that the job is associated
    ///    with has the <c>InProgress</c> status, returns true; otherwise, false.
    /// </summary>
    /// <returns>
    ///    true if the job is started; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    For a code example that uses the <c>reportedStarted</c> method, see the <see
    ///    cref="M:JmgTermJob.reportedStarted" />.
    /// </remarks>
    public boolean reportedStarted()
    {
        boolean ret;

        if (projTable.Status == ProjStatus::InProcess)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requireFeedbackInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether additional feedback is needed. No feedback is needed for project jobs.
    /// </summary>
    /// <param name="_regParameters">
    ///    The registration parameters already given; optional.
    /// </param>
    /// <returns>
    ///    false.
    /// </returns>
    /// <remarks>
    ///    For a code example that uses the <c>requireFeedbackInfo</c> method, see the <see
    ///    cref="M:JmgTermJob.requireFeedbackInfo" />.
    /// </remarks>
    public boolean requireFeedbackInfo(JmgRegistrationParameters _regParameters = new JmgRegistrationParameters())
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requireStartupInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves whether additional startup information is needed.
    /// </summary>
    /// <param name="_regParameters">
    ///    The registration parameters that have already been given; optional.
    /// </param>
    /// <returns>
    ///    true if <c>_regParameters.costCategory</c> has not been specified; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A set of startup parameters is supplied to the method. The set determines whether additional
    ///    feedback is required to make a start registration for the job. For project jobs, specify a cost
    ///    category when a start registration is made for the job.For a code example that uses the
    ///    <c>requireStartupInfo</c> method, see the <see cref="M:JmgTermJob.requireStartupInfo" />.
    /// </remarks>
    public boolean requireStartupInfo(JmgRegistrationParameters _regParameters = new JmgRegistrationParameters())
    {
        if (_regParameters.costCategory())
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides access to the source data record that the job originated from.
    /// </summary>
    /// <returns>
    /// The source record that the job originated from.
    /// </returns>
    /// <remarks>
    ///  This method returns a record from one of the following tables:
    ///  <list type="bullet">
    ///   <item>
    ///    <description>
    ///    The <c>ProjTable</c> table.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    The <c>ProjActivity</c> table.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    The <c>ProjForecastEmpl</c> table.
    ///    </description>
    ///   </item>
    ///  </list>
    ///
    ///  The origin of the project job determines which record is returned.If the returned record will be
    ///  updated, the instance of the
    ///  <c>
    ///  JmgTermJob_Proj
    ///  </c>
    ///   class must be created by using either the <see cref="M:JmgTermJob::construct" />
    ///   method or the <see cref="M:JmgTermJob::constructJobTable" />
    ///   method with the <paramref name="_forUpdate" />
    ///   parameter set to true.
    /// </remarks>
    public Common sourceData()
    {
        Common ret;

        if (projForecastEmpl)
        {
            ret = projForecastEmpl;
        }
        else if (projActivity)
        {
            ret = projActivity;
        }
        else
        {
            ret = projTable;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stampType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>JmgStampTypeEnum::Work</c> stamp type that is associated with this job.
    /// </summary>
    /// <returns>
    ///    <c>JmgStampTypeEnum::Work</c>.
    /// </returns>
    /// <remarks>
    ///    For a code example that uses the <c>stampType</c> method, see the <see
    ///    cref="M:JmgTermJob.stampType" />.
    /// </remarks>
    public JmgStampTypeEnum stampType()
    {
        JmgStampTypeEnum ret;

        ret = JmgStampTypeEnum::Work;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStampJournalTransWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <param name="_jmgStampJournalTrans">
    /// The <c>JmgStampJournalTrans</c> record to be validated.
    /// </param>
    /// <returns>
    /// true if the validation is successful; otherwise, false.
    /// </returns>
    public boolean validateStampJournalTransWrite(JmgStampJournalTrans _jmgStampJournalTrans)
    {
        boolean             ret = true;
        ProjValCheckTrans   projValCheckTrans;
        ProjId              origProjId;

        if (!_jmgStampJournalTrans.ProjCategory)
        {
            ret = checkFailed("@SYS78502");
        }

        if (ret)
        {
            projValCheckTrans = new ProjValCheckTrans();
            if (_jmgStampJournalTrans.JobId != _jmgStampJournalTrans.orig().JobId ||
                _jmgStampJournalTrans.JobId)
            {
                origProjId                      = _jmgStampJournalTrans.JobRef;
                _jmgStampJournalTrans.JobRef    = JmgTermJob::construct(_jmgStampJournalTrans.JobId).jobRef();
                ret                             = projValCheckTrans.validateMandatory(_jmgStampJournalTrans);
                _jmgStampJournalTrans.JobRef    = origProjId;
            }
            else
            {
                ret = projValCheckTrans.validateMandatory(_jmgStampJournalTrans);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>