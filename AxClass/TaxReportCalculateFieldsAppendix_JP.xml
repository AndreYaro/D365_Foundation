<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportCalculateFieldsAppendix_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal abstract class TaxReportCalculateFieldsAppendix_JP extends TaxReportCalculateFields_JP
{
    protected Map taxTypeValues;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateTaxReportLines</Name>
				<Source><![CDATA[
    protected void calculateTaxReportLines()
    {
        MapEnumerator taxValueEnumerator = taxTypeValues.getEnumerator();
        while (taxValueEnumerator.moveNext())
        {
            this.calculateTaxValue(trunc(taxValueEnumerator.currentKey()), taxValueEnumerator.currentValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxValue</Name>
				<Source><![CDATA[
    protected void calculateTaxValue(TaxValue _taxValue, Map _taxTypes)
    {
        MapEnumerator taxTypeEnumerator = _taxTypes.getEnumerator();
        while (taxTypeEnumerator.moveNext())
        {
            this.calculateTaxValueType(_taxValue, taxTypeEnumerator.currentKey(), TaxReportAmounts_JP::newFromAmountsMap(taxTypeEnumerator.currentValue()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxValueType</Name>
				<Source><![CDATA[
    protected abstract void calculateTaxValueType(TaxValue _taxValue, TaxType_JP _taxType, TaxReportAmounts_JP _amounts)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inititializeTaxCalcTrans</Name>
				<Source><![CDATA[
    protected LedgerConsumptionTaxCalcTrans_JP inititializeTaxCalcTrans(TaxValue _taxValue, TaxType_JP _taxType)
    {
        LedgerConsumptionTaxCalcTrans_JP taxCalcTrans = this.getTaxCalcTrans(_taxValue, _taxType, dataLayout, false, true);

        if (!taxCalcTrans)
        {
            taxCalcTrans.PeriodOfTaxationFrom = fromDate;
            taxCalcTrans.PeriodOfTaxationTo = toDate;
            taxCalcTrans.SettlementPeriod = taxPeriod;
            taxCalcTrans.TypeOfDeclaration = typeOfDeclaration;
            taxCalcTrans.CalcMethod = calcMethod;
            taxCalcTrans.TaxValue = _taxValue;
            taxCalcTrans.TaxType = _taxType;
            taxCalcTrans.Version = TaxRepVersion::Original;
            taxCalcTrans.DataLayout = dataLayout;
            taxCalcTrans.Apellative = companyInfo.CompanyRepresentative_JP;
        }
        
        if (amendment)
        {
            taxCalcTrans.CalcMethod = calcMethod;
            taxCalcTrans.Modified = false;
            taxCalcTrans.CalcItem1 = 0;
            taxCalcTrans.CalcItem2 = 0;
            taxCalcTrans.CalcItem3 = 0;
            taxCalcTrans.CalcItem4 = 0;
            taxCalcTrans.CalcItem5 = 0;
            taxCalcTrans.CalcItem6 = 0;
            taxCalcTrans.CalcItem7 = 0;
            taxCalcTrans.CalcItem8 = 0;
            taxCalcTrans.CalcItem9 = 0;
            taxCalcTrans.CalcItem10 = 0;
            taxCalcTrans.CalcItem11 = 0;
            taxCalcTrans.CalcItem12 = 0;
            taxCalcTrans.CalcItem13 = 0;
            taxCalcTrans.CalcItem14 = 0;
            taxCalcTrans.CalcItem15 = 0;
            taxCalcTrans.CalcItem16 = 0;
            taxCalcTrans.CalcItem17 = 0;
            taxCalcTrans.CalcItem18 = 0;
            taxCalcTrans.CalcItem19 = 0;
            taxCalcTrans.CalcItem20 = 0;
            taxCalcTrans.CalcItem21 = 0;
            taxCalcTrans.CalcItem22 = 0;
            taxCalcTrans.CalcItem23 = 0;
            taxCalcTrans.CalcItem24 = 0;
            taxCalcTrans.CalcItem25 = 0;
            taxCalcTrans.CalcItem26 = 0;
            taxCalcTrans.CalcItem27 = 0;
            taxCalcTrans.CalcItem28 = 0;
        }

        return taxCalcTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>