<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconBridgedAutoClearing</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Automatically clears bridged payment transactions during bank reconciliation.
/// </summary>
internal class BankReconBridgedAutoClearing
{
    internal boolean isCleared;

    private BankDocumentTable bankDocumentTable;
    private BankChequeTable bankChequeTable;
    private LedgerJournalTrans ledgerJournalTransBridged;
    private LedgerJournalTable ledgerJournalTableClearing;
    private LedgerJournalTrans ledgerJournalTransClearing;
    private BankBridgingTrans bankBridgingTrans;
    private LedgerEntry ledgerEntry;
    private TransDate clearingDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal final static BankReconBridgedAutoClearing construct(BankDocumentTable _bankDocumentTable, TransDate _clearingDate)
    {
        BankReconBridgedAutoClearing clearing;
        
        if (_bankDocumentTable.RecId)
        {
            clearing = new BankReconBridgedAutoClearing(_bankDocumentTable, _clearingDate);
        }

        return clearing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(BankDocumentTable _bankDocumentTable, TransDate _clearingDate)
    {
        bankDocumentTable = _bankDocumentTable;
        clearingDate = _clearingDate;

        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the bank bridged transaction clearing.
    /// </summary>
    internal void process()
    {
        if (!this.isBridged() || BankReconBridgedAutoClearing::isClearingTransExist(ledgerEntry))
        {
            return;
        }

        this.createAndPostClearingJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isClearingTransExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the clearing transaction already exists.
    /// </summary>
    /// <param name = "_ledgerEntry">The <c>LedgerEntry</c> table records.</param>
    /// <returns>true if the clearing transaction already exists, else false.s</returns>
    internal static boolean isClearingTransExist(LedgerEntry _ledgerEntry)
    {
        LedgerJournalTrans ledgerJournalTransClearing;

        select firstonly RecId from ledgerJournalTransClearing
            where ledgerJournalTransClearing.FurtherPostingRecId == _ledgerEntry.RecId;

        return ledgerJournalTransClearing.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClearingTransTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the clearing transaction text.
    /// </summary>
    /// <param name = "_ledgerJournalTransBridged">The bridged payment ledger journal transaction.</param>
    /// <returns>The clearing transaction text.</returns>
    internal static LedgerJournalTransTxt getClearingTransTxt(LedgerJournalTrans _ledgerJournalTransBridged)
    {
        return strFmt(
            "@Bank:BankReconBridgedClearingLedgerJournalTransTxt",
            _ledgerJournalTransBridged.JournalNum,
            _ledgerJournalTransBridged.Voucher,
            enum2Str(_ledgerJournalTransBridged.AccountType),
            _ledgerJournalTransBridged.accountDisplay());
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBridgedTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the bridged transaction exists for the specified bank reconciliation.
    /// </summary>
    /// <param name = "_reconciliationHeaderRecId">The record id of <c>BankReconciliationHeader</c>.</param>
    /// <returns>true if the bridged transaction exists, else false.</returns>
    internal static boolean existBridgedTrans(RecId _reconciliationHeaderRecId)
    {
        boolean ret = false;

        BankBridgingTrans bankBridgingTrans;
        LedgerJournalTrans ledgerJournalTransBridged;
        BankDocumentTable bankDocumentTable;
        BankReconciliationMatchingItemView matchingItemView;

        select firstonly RecId from bankBridgingTrans
            exists join ledgerJournalTransBridged
                where ledgerJournalTransBridged.RecId == bankBridgingTrans.BridgedLedgerJournalTransRecId
                    && bankBridgingTrans.BridgingStatus == BankBridgingStatus::Bridged
            exists join bankDocumentTable
                where bankDocumentTable.SourceRelationType == ledgerJournalTransBridged.TableId
                    && bankDocumentTable.SourceRecId == ledgerJournalTransBridged.RecId
            exists join matchingItemView
                where matchingItemView.BankDocumentTable == bankDocumentTable.RecId
                    && matchingItemView.BankReconciliationHeader == _reconciliationHeaderRecId;

        if (bankBridgingTrans.RecId)
        {
            ret = true;
        }
        else
        {
            BankChequeTable bankChequeTable;

            select firstonly RecId from bankBridgingTrans
                exists join bankChequeTable
                    where bankChequeTable.RecId == bankBridgingTrans.BankChequeTableRecId
                        && bankBridgingTrans.BridgingStatus == BankBridgingStatus::Bridged
                exists join bankDocumentTable
                    where bankDocumentTable.SourceRelationType == bankChequeTable.TableId
                        && bankDocumentTable.SourceRecId == bankChequeTable.RecId
                exists join matchingItemView
                    where matchingItemView.BankDocumentTable == bankDocumentTable.RecId
                        && matchingItemView.BankReconciliationHeader == _reconciliationHeaderRecId;

            ret = bankBridgingTrans.RecId ? true : false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        switch (bankDocumentTable.SourceRelationType)
        {
            case tableNum(LedgerJournalTrans):
                ledgerJournalTransBridged = LedgerJournalTrans::findRecId(bankDocumentTable.SourceRecId, false);
                bankBridgingTrans = BankBridgingTrans::findByBridgedLedgerJournalTransRecId(ledgerJournalTransBridged.RecId);
                break;

            case tableNum(BankChequeTable):
                bankChequeTable = BankChequeTable::findByRecId(bankDocumentTable.SourceRecId);
                ledgerJournalTransBridged = LedgerJournalTrans::findRecId(bankChequeTable.SourceRecId, false);
                bankBridgingTrans = BankBridgingTrans::findByBankChequeTableRecId(bankChequeTable.RecId);
                break;

            default:
                break;
        }

        if (this.isBridged())
        {
            ledgerEntry = LedgerEntry::find(bankBridgingTrans.LedgerEntryRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBridged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the bridged payment transaction is bridged.
    /// </summary>
    /// <returns>true if the bridged payment transaction is bridged, else false. Default is false.</returns>
    private boolean isBridged()
    {
        return bankBridgingTrans.BridgingStatus == BankBridgingStatus::Bridged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndPostClearingJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and posts the clearing legder journal transaction.
    /// </summary>
    private void createAndPostClearingJournal()
    {
        BankBridgedTransClearingLock bankBridgedTransClearingLock = new BankBridgedTransClearingLock(ledgerJournalTransBridged.RecId);

        try
        {
            bankBridgedTransClearingLock.enterBridgeClearingLock(true);

            if (bankBridgedTransClearingLock.lockAcquired)
            {
                // Check if clearing transaction already exists again to avoid manually clearing has been finished and lock already exited between isClearingTransExist and tryEnterWriteLock
                if (!BankReconBridgedAutoClearing::isClearingTransExist(ledgerEntry))
                {
                    CustVendPDCRegister custVendPDCRegister = CustVendPDCRegister::findByReference(ledgerJournalTransBridged.RecId);
                    if (custVendPDCRegister)
                    {
                        // Porcess PDC
                        CustVendPDCManager::settleClearingTransactionsV2(custVendPDCRegister, clearingDate);
                    }
                    else
                    {
                        this.initLedgerJournalTableClearing();
                        ledgerJournalTableClearing.insert();

                        this.initLedgerJournalClearingTrans();

                        LedgerJournalEngine ledgerJournalEngine = LedgerJournalEngine::construct(ledgerJournalTableClearing.JournalType);
                        ledgerJournalEngine.initOffsetDefaultDimension(ledgerJournalTransClearing);

                        ledgerJournalTransClearing.insert();

                        this.createCustVendPaymJournalFee();

                        LedgerJournalCheckPost ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(ledgerJournalTableClearing, NoYes::Yes, false);
                        LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);
                    }

                    if (!bankChequeTable)
                    {
                        // Post correction amount
                        BankDocumentBankBridgingTrans bankDocument = BankDocument::newFromBankDocumentTable(bankDocumentTable);
                        BankDocumentState bankDocumentState = BankDocumentState::newFromBankDocument(bankDocument);
                        bankDocumentState.parmBankDocumentStatusChangeType(BankDocumentStatusChangeType::Reconcile);
                        bankDocument.bankDocumentStateChanged(bankDocumentState);
                    }

                    isCleared = true;
                }
            }
        }
        finally
        {
            bankBridgedTransClearingLock.exitBridgeClearingLock();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalTableClearing</Name>
				<Source><![CDATA[
    private void initLedgerJournalTableClearing()
    {
        LedgerJournalNameId journalNameId = BankParameters::find().BridgedTransClearingJournalName;

        ledgerJournalTableClearing.initFromLedgerJournalName(journalNameId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustVendPaymJournalFee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the customer or vendor payment journal fee.
    /// </summary>
    private void createCustVendPaymJournalFee()
    {
        LedgerTransFurtherPosting ledgerTransFurtherPosting;

        select firstonly AccountType, AccountNum, PaymMode, PaymSpec, RefRecId, RecId from ledgerTransFurtherPosting
            where ledgerTransFurtherPosting.RefRecId == ledgerEntry.RecId;

        if (ledgerTransFurtherPosting.AccountType == LedgerJournalACType::Cust
            || ledgerTransFurtherPosting.AccountType == LedgerJournalACType::Vend)
        {
            LedgerJournalTrans ledgerJournalTransSource = ledgerJournalTransClearing.data();
            ledgerJournalTransSource.parmAccount(
                ledgerTransFurtherPosting.AccountNum,
                ledgerTransFurtherPosting.AccountType,
                ledgerJournalTransBridged ? ledgerJournalTransBridged.Company : ledgerJournalTransClearing.Company);
            ledgerJournalTransSource.PaymMode = ledgerTransFurtherPosting.PaymMode;
            ledgerJournalTransSource.PaymSpec = ledgerTransFurtherPosting.PaymSpec;

            if (ledgerTransFurtherPosting.AccountType == LedgerJournalACType::Cust)
            {
                CustVendPaymJournalFee::createJournalFeeCust(ledgerJournalTransClearing, ledgerJournalTransSource);
            }
            else if (ledgerTransFurtherPosting.AccountType == LedgerJournalACType::Vend)
            {
                CustVendPaymJournalFee::createJournalFeeVend(ledgerJournalTransClearing, ledgerJournalTransSource);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalClearingTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the clearing ledger journal transaction.
    /// </summary>
    private void initLedgerJournalClearingTrans()
    {
        ledgerJournalTransClearing.AccountType = LedgerJournalACType::Ledger;
        ledgerJournalTransClearing.LedgerDimension = bankBridgingTrans.FloatAccountLedgerDimension;
        ledgerJournalTransClearing.AmountCurDebit = ledgerJournalTransBridged.AmountCurDebit;
        ledgerJournalTransClearing.AmountCurCredit = ledgerJournalTransBridged.AmountCurCredit;

        ledgerJournalTransClearing.PaymMode = ledgerEntry.PaymentMode;
        ledgerJournalTransClearing.FurtherPostingType = ledgerEntry.IsBridgingPosting;
        ledgerJournalTransClearing.FurtherPostingRecId = ledgerEntry.RecId;

        ledgerJournalTransClearing.PaymReference = ledgerJournalTransBridged.PaymReference;
        ledgerJournalTransClearing.Qty = ledgerJournalTransBridged.Qty;
        ledgerJournalTransClearing.TransDate = clearingDate;
        ledgerJournalTransClearing.AcknowledgementDate = ledgerJournalTransBridged.AcknowledgementDate;
        ledgerJournalTransClearing.DocumentDate = ledgerJournalTransBridged.DocumentDate;
        ledgerJournalTransClearing.DocumentNum = ledgerJournalTransBridged.DocumentNum;

        ledgerJournalTransClearing.Voucher = NumberSeq::newGetVoucherFromId(ledgerJournalTableClearing.NumberSequenceTable, false).voucher();
        ledgerJournalTransClearing.JournalNum = ledgerJournalTableClearing.JournalNum;
        ledgerJournalTransClearing.LineNum = LedgerJournalTrans::lastLineNum(ledgerJournalTableClearing.JournalNum) + 1;
        ledgerJournalTransClearing.CurrencyCode = ledgerJournalTransBridged.CurrencyCode;
        ledgerJournalTransClearing.Company = ledgerJournalTransBridged.Company;

        ledgerJournalTransClearing.BankDepositVoucher = ledgerJournalTransBridged.BankDepositVoucher;

        ledgerJournalTransClearing.ExchRate = ledgerJournalTransBridged.ExchRate;

        ledgerJournalTransClearing.OffsetAccountType = LedgerJournalACType::Bank;
        ledgerJournalTransClearing.parmOffsetAccount(bankBridgingTrans.AccountId, ledgerJournalTransClearing.OffsetAccountType);
        ledgerJournalTransClearing.BankTransType = ledgerJournalTransBridged.BankTransType;

        ledgerJournalTransClearing.Txt = BankReconBridgedAutoClearing::getClearingTransTxt(ledgerJournalTransBridged);

        if (bankChequeTable)
        {
            ledgerJournalTransClearing.BankChequeNum = bankChequeTable.ChequeNum;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>