<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReverseTaxCustVendSettle_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class used for calculatiion and posting of tax when reversing settlement
/// </summary>
class TaxReverseTaxCustVendSettle_RU extends TaxReverseTax
{
    LedgerPostingType   ledgerPostingType;
    AmountMSTSecondary  amountMSTSecondary;
    SourceDocumentLine  sourceDocumentLine;
    boolean             skipDistribution;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowExemptTax_RU</Name>
				<Source><![CDATA[
        protected boolean allowExemptTax_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAndPost</Name>
				<Source><![CDATA[
        public AmountCur calcAndPost(
        LedgerPostingController _ledgerPostingController,
        Voucher _originalVoucher,
        TransDate _originalTransDate,
        boolean _posting = true,
        CustVendTransPostingLogRecId_RU _postingLog = 0)
    {
        AmountCur amountCur;
        this.deleteTaxWorkTrans();
        this.parmCustVendTransPostingLog_RU(_postingLog);

        if (_ledgerPostingController.getJournal() == null)
        {
            throw error(Error::missingParameter(this));
        }

        temporaryLedgerPostingJournal = _ledgerPostingController.getJournal();

        amountCur = this.calcAndInsertTaxes(_originalVoucher, _originalTransDate);

        // 'posting' now means 'don't create tax transactions'
        this.saveAndPost(_ledgerPostingController, _posting);

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTaxWorkTrans</Name>
				<Source><![CDATA[
        protected void deleteTaxWorkTrans()
    {
        delete_from taxWorkTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountMSTSecondary</Name>
				<Source><![CDATA[
        public AmountMSTSecondary parmAmountMSTSecondary(AmountMSTSecondary _amountMSTSecondary = amountMSTSecondary)
    {
        ;
        amountMSTSecondary = _amountMSTSecondary;
        return amountMSTSecondary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
        public LedgerPostingType parmLedgerPostingType(LedgerPostingType _ledgerPostingType = ledgerPostingType)
    {
        ;
        ledgerPostingType = _ledgerPostingType;

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipDistribution</Name>
				<Source><![CDATA[
        public boolean parmSkipDistribution(boolean _value=skipDistribution)
    {
        skipDistribution = _value;
        return skipDistribution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentLine</Name>
				<Source><![CDATA[
        public SourceDocumentLine parmSourceDocumentLine(SourceDocumentLine _sourceDocumentLine = sourceDocumentLine)
    {
        sourceDocumentLine = _sourceDocumentLine;

        return sourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxDate</Name>
				<Source><![CDATA[
        public TransDate parmTaxDate(TransDate _taxDate = taxDate)
    {
        taxDate = _taxDate;
        return taxDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates tax transaction and posts taxes to GL
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// <c>LedgerPostingController</c> used for posting of taxes
    /// </param>
    /// <param name="_posting">
    /// Determines whether tax transactions should be created; Optional
    /// </param>
    /// <remarks>
    /// Parameter posting used in descendants
    /// </remarks>
    public void saveAndPost(LedgerPostingController _ledgerPostingController, boolean _posting=true)
    {
        super(_ledgerPostingController);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns source table id for tax, can be overridden
    /// </summary>
    /// <param name="_taxTrans">
    /// Tax transaction
    /// </param>
    /// <returns>
    /// Source table id for tax
    /// </returns>
    public RefTableId sourceTableId_RU(TaxTrans _taxTrans)
    {
        if (_taxTrans && _taxTrans.SourceTableId)
        {
            return _taxTrans.SourceTableId;
        }

        return this.sourceTableId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>SourceDocumentLineImplementation</c> for given source table id and source record id
    /// </summary>
    /// <param name="_sourceTableId">
    /// Source table id to look for
    /// </param>
    /// <param name="_sourceRecId">
    /// Source record id to look for
    /// </param>
    /// <returns>
    /// Found <c>SourceDocumentLineImplementation</c> record
    /// </returns>
    public static SourceDocumentLine sourceDocumentLine(TableId _sourceTableId, RecId _sourceRecId)
    {
        SourceDocumentLineImplementation record;

        if (_sourceTableId && _sourceRecId && SysDictTable::isTableMapped(tableNum(SourceDocumentLineImplementation), _sourceTableId))
        {
            record = SysDictTable::newTableId(_sourceTableId).makeRecord();
            select firstonly SourceDocumentLine from record where record.RecId == _sourceRecId;
        }

        return SourceDocumentLine::find(record.SourceDocumentLine);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>