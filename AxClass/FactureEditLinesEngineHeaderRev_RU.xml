<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureEditLinesEngineHeaderRev_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>FactureEditLinesEngineHeaderRev_RU</c> used for management of form <c>FactureEditLines_RU</c>
/// when revision on facture header updated.
/// </summary>
abstract class FactureEditLinesEngineHeaderRev_RU extends FactureEditLinesEngine_RU
{
    FactureJour_RU factureJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks invoice journal, in this case always returns true.
    /// </summary>
    /// <param name="_jour">
    /// Customer or vendor invoice journal.
    /// </param>
    /// <param name="_proforma">
    /// Determines if proforma updated.
    /// </param>
    /// <returns>
    /// In this case always returns true.
    /// </returns>
    protected boolean checkJour(CustVendInvoiceJour _jour, boolean _proforma = false)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks invoice line, in this case always returns true.
    /// </summary>
    /// <param name="_trans">
    /// Customer or vendor invoice line.
    /// </param>
    /// <returns>
    /// In this case always returns true.
    /// </returns>
    protected boolean checkTrans(CustVendInvoiceTrans _trans)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentInit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes contragent controls with values.
    /// </summary>
    public void contragentInit()
    {
        this.contragent(factureJour.CustVendInvoiceAccount);
        consignee = factureJour.Consignee;
        consignor = factureJour.Consignor;

        consigneeControl.text(consignee);
        consignorControl.text(consignor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>contragentInitDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes contragent controls with default values.
    /// </summary>
    public void contragentInitDefault()
    {
        contragentSec = this.contragent();

        if (confind([FactureModule_RU::Cust,
                     FactureModule_RU::TaxCorrectionSales,
                     FactureModule_RU::TaxCorrectionPurch_Cust], factureCreate.module()))
        {
            customerControl.text(contragent);
            factureCustomerControl.text(contragentSec);
            factureCustomerControl.enabled(false);
        }
        else
        {
            vendorControl.text(contragent);
            factureVendorControl.text(contragentSec);
            factureVendorControl.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>extFactureIdNumSeqCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns number sequence code for external facture number.
    /// </summary>
    /// <returns>
    /// Not used in this case, empty string.
    /// </returns>
    public NumberSequenceCode extFactureIdNumSeqCode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns facture journal type.
    /// </summary>
    /// <returns>
    /// <c>FactureType_RU</c> value.
    /// </returns>
    public FactureType_RU factureType()
    {
        return factureJour.FactureType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJourByTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Seaarches source journal by given its trans.
    /// </summary>
    /// <param name="_trans">
    /// Trans line record.
    /// </param>
    protected void findJourByTrans(Common _trans)
    {
        FactureTrans_RU trans = _trans as FactureTrans_RU;
        tmpJour = FactureJour_RU::find(trans.FactureId, trans.Module);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransByJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searche trans line by given journal.
    /// </summary>
    /// <param name="_jour">
    /// <c>FactureJour_RU</c> record.
    /// </param>
    protected void findTransByJour(Common _jour)
    {
        FactureJour_RU jour = _jour.getActualJour();

        select tmpTrans
            where tmpTrans.FactureId     == jour.FactureId &&
                  tmpTrans.FactureModule == jour.Module;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCorrectionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes correction group on form.
    /// </summary>
    public void initCorrectionGroup()
    {
        Object form = editLinesForm;
        ;

        super();

        correctionTypeControl.selection(FactureCorrectionType_RU::Revision);
        form.editCorrFactureExternalId(true, factureJour.FactureExternalId);
        form.editCorrFactureDate(true, factureJour.RefRevisedFacture                                        ?
                                       FactureJour_RU::findRecId(factureJour.RefRevisedFacture).FactureDate :
                                       factureJour.FactureDate);
        form.initCorrFactureDisplay();

        factureExternalIdControl.enabled(false);
        correctionGroupControl.enabled(false);
        correctedPeriodControl.visible(false);
        correctedFactureExternalIdControl.allowEdit(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCorrectionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes correction type control on form.
    /// </summary>
    public void initCorrectionType()
    {
        correctionTypeControl.selection(FactureCorrectionType_RU::Revision);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes credit note control on form.
    /// </summary>
    public void initCreditNote()
    {
        if (factureJour.FactureType == FactureType_RU::Invoice)
        {
            creditNoteControl.value(factureJour.creditNote());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventOwnerId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes invent owner control on form.
    /// </summary>
    public void initInventOwnerId()
    {
        super();
        inventOwnerIdControl.text(factureJour.InventOwnerId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventProfileType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes invent profile control on form.
    /// </summary>
    public void initInventProfileType()
    {
        super();
        inventProfileTypeControl.selection(factureJour.InventProfileType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes source group control on form.
    /// </summary>
    public void initSourceGroup()
    {
        sourceGroupControl.caption("@GLS114478");
        sourceGroupControl.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVATOnPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes vat on payment control on form.
    /// </summary>
    public void initVATOnPayment()
    {
        vatOnPaymentControl.value(factureJour.vatOnPayment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJourWithUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts source journal id to set for further processing.
    /// </summary>
    /// <param name="_jour">
    /// Source journal to be inserted.
    /// </param>
    protected void insertJourWithUpdate(CustVendInvoiceJour _jour)
    {
        jourSet.add(this.decodeTableRecId(_jour.RecId));
        factureCreate.parmLanguageId(_jour.LanguageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns source journal table id.
    /// </summary>
    /// <returns>
    /// Source journal table id.
    /// </returns>
    protected tableId jourTableId()
    {
        return tablenum(FactureJour_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns query run used for lines selection.
    /// </summary>
    /// <returns>
    /// Lines are not displayed on form, so always null.
    /// </returns>
    protected QueryRun mainQueryRun()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>FactureEditLinesEngineHeaderRev_RU</c> class.
    /// </summary>
    /// <param name="_factureCreate">
    /// <c>FactureJourCreate</c> class which calls form.
    /// </param>
    public void new(FactureJourCreate_RU _factureCreate)
    {
        super(_factureCreate);

        tmpJour     = new DictTable(tablenum(FactureJour_RU)).makeRecord();
        localJour   = new DictTable(tablenum(FactureJour_RU)).makeRecord();
        tmpTrans    = new DictTable(tablenum(FactureTrans_RU)).makeRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>offAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns account to use for officials creation.
    /// </summary>
    /// <returns>
    /// Account to use for officials creation.
    /// </returns>
    protected CustVendAC offAccount()
    {
        return this.contragent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>offInit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes officials.
    /// </summary>
    public void offInit()
    {
        OfficialsTrans_RU offTransSrc, offTrans;

        if (factureJour.FactureType == FactureType_RU::Prepayment)
        {
            offTabPageControl.visible(false);
            return;
        }

        super();

        if (offServ)
        {
            ttsbegin;

            while select offTransSrc
                where offTransSrc.OffSessionId == factureJour.OffSessionId
            {
                offTrans = OfficialsTrans_RU::findSessionId(offServ.newId(), offTransSrc.Position, true);
                if (offTrans)
                {
                    offTrans.Name   = offTransSrc.Name;
                    offTrans.Title  = offTransSrc.Title;
                    offTrans.update();
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFactureExternalIdControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes facture external id control.
    /// </summary>
    public void refreshFactureExternalIdControl()
    {
        if (factureExternalIdControl)
        {
            factureExternalIdControl.visible(false);
            factureExternalIdControl.enabled(false);
            factureExtIdNumSegGroupIdControl.visible(false);

            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>researchDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Researches line datasource, since lines are not displayed does nothing.
    /// </summary>
    protected void researchDS()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets source record for facture update.
    /// </summary>
    /// <param name="_sourceRecord">
    /// <c>FactureJour_RU</c> record to be revised.
    /// </param>
    public void setSourceRecord(Common _sourceRecord)
    {
        super(_sourceRecord);

        factureJour = _sourceRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets controls visible or invisible on form.
    /// </summary>
    public void setVisibleControls()
    {
        creditNoteControl.visible(true);
        positiveControl.visible(false);
        showJournalsControl.visible(false);
        externalDateGroupControl.visible(true);
        vatOnPaymentControl.visible(true);
        correctControl.visible(true);
        correctionGroupControl.visible(true);
        inventProfileTypeControl.visible(true);
        inventOwnerIdControl.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleTabs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets tab controls visible or invisible on form.
    /// </summary>
    public void setVisibleTabs()
    {
        custTabControl.visible(false);
        vendTabControl.visible(false);
        emplTabControl.visible(false);
        ledgTabControl.visible(false);
        addrTabPageControl.visible(isTableUserEnabled(tablenum(LogisticsPostalAddress), AccessType::View));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transHeaderName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns name for trans line group.
    /// </summary>
    /// <returns>
    /// Name for trans line group.
    /// </returns>
    final protected str transHeaderName()
    {
        return "@GLS104583";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns name for trans line.
    /// </summary>
    /// <param name="_trans">
    /// <c>CustVendInvoiceTrans</c> record.
    /// </param>
    /// <returns>
    /// Name of trans lines, always empty as no lines are displayed.
    /// </returns>
    final protected str transName(CustVendInvoiceTrans _trans)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns lines table id.
    /// </summary>
    /// <returns>
    /// Lines table id.
    /// </returns>
    protected tableId transTableId()
    {
        return tablenum(FactureTrans_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns tree control displayed on form.
    /// </summary>
    /// <returns>
    /// Tree control displayed on form.
    /// </returns>
    protected FormTreeControl treeControl()
    {
        return custTreeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>FactureEditLinesEngineHeaderRev_RU</c> class.
    /// </summary>
    /// <param name="_factureJourCreate">
    /// Caller <c>FactureJourCreate</c> class.
    /// </param>
    /// <returns>
    /// new instance of <c>FactureEditLinesEngineHeaderRev_RU</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Error thrown if facture has incorrect module.
    /// </exception>
    static FactureEditLinesEngine_RU construct(FactureJourCreate_RU _factureJourCreate)
    {
        FactureEditLinesEngine_RU editLinesEngine;

        switch (_factureJourCreate.module())
        {
            case FactureModule_RU::Vend                    :
            case FactureModule_RU::TaxCorrectionPurch      :
            case FactureModule_RU::TaxCorrectionSales_Vend :
                editLinesEngine = new FactureEditLinesEngineHeaderRevVend_RU(_factureJourCreate);
                break;

            case FactureModule_RU::Cust                    :
            case FactureModule_RU::TaxCorrectionSales      :
            case FactureModule_RU::TaxCorrectionPurch_Cust :
                editLinesEngine = new FactureEditLinesEngineHeaderRevCust_RU(_factureJourCreate);
                break;

            default                                        :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return editLinesEngine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>