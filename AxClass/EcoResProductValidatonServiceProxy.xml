<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductValidatonServiceProxy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EcoResProductValidationServiceProxy</c> class is the proxy client class that calls the
/// <c>EcoResProductValidatonService.validateProducts</c> method.
/// </summary>
class EcoResProductValidatonServiceProxy
{
    FormDataSource productDataSource;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>callService</Name>
				<Source><![CDATA[
    protected void callService(EcoResProductValidatonDataContract _dataContract)
    {
        EcoResProductValidatonService   service = new EcoResProductValidatonService();
        service.validateProducts(_dataContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmProductDataSource(FormDataSource _productDataSource = productDataSource)
    {
        productDataSource = _productDataSource;

        return productDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductsFromDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified products per company by calling the
    /// <c>EcoResProductValidatonService.validateProducts</c> method.
    /// </summary>
    public void validateProductsFromDataSource()
    {
        container                           packedProductsPerCompanyInfo;
        Common                              record;

        for (record = productDataSource.getFirst(true)
                    ? productDataSource.getFirst(true)
                    : productDataSource.cursor();
                record;
                record = productDataSource.getNext())
        {
            InventTable inventTable = record as InventTable;
            packedProductsPerCompanyInfo += [[inventTable.ItemId]];
        }

        if (conLen(packedProductsPerCompanyInfo) > 0)
        {
            EcoResProductValidatonDataContract dc = new EcoResProductValidatonDataContract();

            dc.packedProductsPerCompanyData(SysOperationHelper::base64Encode(packedProductsPerCompanyInfo));

            this.callService(dc);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResProductValidatonServiceProxy construct()
    {
        return new EcoResProductValidatonServiceProxy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
        {
            EcoResProductValidatonServiceProxy productValidatonServiceProxy = EcoResProductValidatonServiceProxy::newFromArgs(_args);

            productValidatonServiceProxy.validateProductsFromDataSource();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>EcoResProductValidatonServiceProxy</c> class.
    /// </summary>
    /// <param name="_args">
    ///    Input arguments.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>EcoResProductValidatonServiceProxy</c> class.
    /// </returns>
    public static EcoResProductValidatonServiceProxy newFromArgs(Args _args)
    {
        if (_args == null || !(_args.record() is InventTable) || !FormDataUtil::getFormDataSource(_args.record()))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        EcoResProductValidatonServiceProxy productValidatonServiceProxy = EcoResProductValidatonServiceProxy::construct();
        productValidatonServiceProxy.parmProductDataSource(FormDataUtil::getFormDataSource(_args.record()));

        return productValidatonServiceProxy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>