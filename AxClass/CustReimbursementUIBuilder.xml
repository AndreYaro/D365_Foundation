<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustReimbursementUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustReimbursementUIBuilder</c> class builds the UI for the <c>CustReimbursement</c> SSRS report parameters.
/// </summary>
class CustReimbursementUIBuilder extends SrsReportDataContractUIBuilder
{
    DialogField billingClassificationField;

    #define.BillingClassification('billingClassification')
    #define.InclTransWithNoBillingClass('includeTransWithNoBillingClassification')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>billingClassificationLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a multi-select billing classification lookup dialog box field.
    /// </summary>
    public void billingClassificationLookup()
    {
        Query       query               = new Query(queryStr(CustBillingClassificationLookup));
        TableId     multiSelectTableNum = tableNum(CustBillingClassification);
        container   selectedFields      = [multiSelectTableNum, fieldName2id(multiSelectTableNum, fieldStr(CustBillingClassification, BillingClassification))];

        SysLookupMultiSelectCtrl::constructWithQuery(this.dialog().dialogForm().formRun(), billingClassificationField.control(), query, false, selectedFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>CustReimbursement</c> report parameter form that is based on billing classification.
    /// </summary>
    public void build()
    {
        boolean                     isBillingClassEnabled;
        DialogField                 inclTransWithNoBillingClassField;
        CustReimbursementContract   custReimbursementContract;

        super();

        custReimbursementContract = this.dataContractObject() as CustReimbursementContract;

        billingClassificationField          = this.bindInfo().getDialogField(custReimbursementContract, #BillingClassification);
        inclTransWithNoBillingClassField    = this.bindInfo().getDialogField(custReimbursementContract, #InclTransWithNoBillingClass);

        billingClassificationField.helpText(literalStr("@SPS677"));
        inclTransWithNoBillingClassField.label(literalStr("@SPS691"));
        inclTransWithNoBillingClassField.helpText(literalStr("@SPS1009"));

        if (billingClassificationField && inclTransWithNoBillingClassField)
        {
            isBillingClassEnabled = CustParameters::isBillingClassificationEnabled();
            billingClassificationField.visible(isBillingClassEnabled);
            inclTransWithNoBillingClassField.visible(isBillingClassEnabled);
            billingClassificationField.lookupButton(FormLookupButton::Always);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the functionality that is supposed to execute after run.
    /// </summary>
    public void postRun()
    {
        if (CustParameters::isBillingClassificationEnabled())
        {
            this.billingClassificationLookup();
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>