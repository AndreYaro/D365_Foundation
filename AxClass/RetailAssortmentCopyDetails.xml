<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailAssortmentCopyDetails</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailAssortmentCopyDetails</c> is a dialog class used to copy the assortment.
/// </summary>
class RetailAssortmentCopyDetails extends RunBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a copy of the channels and products associated to the
    /// specified retail assortment.
    /// </summary>
    /// <param name="_args">
    /// An instance of <c>Args</c> class.
    /// </param>
    public static void main(Args _args)
    {
        RetailAssortmentTable targetAssortment;
        RetailAssortmentStatusType sourceAssortmentLineStatus;
        RetailAssortmentTable sourceAssortment = _args.record();
        MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(RetailAssortmentDetails), MenuItemType::Display);
        DialogButton dialogButton;
        RetailAssortmentID newAssortmentId;
        Dialog manualInputAssortmentIdDialog;
        DialogField assortmentIdField;

        if (!sourceAssortment)
        {
            // No associated record was found.
            return;
        }

        // Verify if user wants to copy the assortment.
        dialogButton = Box::yesNo("@RET260940", DialogButton::No, "@RET260941");
        if (dialogButton != DialogButton::Yes)
        {
            return;
        }

        // Check if the number sequence for copy assortment is manual.
        if (RetailParameters::numRefAssortmentId().numberSequenceTable().Manual)
        {
            // If the number sequence is manual, display the dialog to input the manual assortment identifier.
            manualInputAssortmentIdDialog = new Dialog("@RET260454");
            assortmentIdField = manualInputAssortmentIdDialog.addField(extendedTypeStr(RetailAssortmentID), "@RET260588");
            if (manualInputAssortmentIdDialog.run())
            {
                // Save new assortment identifier.
                newAssortmentId = assortmentIdField.value();
            }
        }
        else
        {
            // If the number sequence is not manual, generate the assortment identifier via number sequence.
            newAssortmentId = NumberSeq::newGetNum(RetailParameters::numRefAssortmentId()).num();
        }

        // If new assortment identifier is not generated, fail and throw an error.
        if (!newAssortmentId)
        {
            checkFailed(strFmt("@SYS84753", "@RET260588"));
            return;
        }

        ttsBegin;

        // Copy the assortment definition
        targetAssortment.AssortmentID = newAssortmentId;
        targetAssortment.name = strFmt("@RET260942", sourceAssortment.AssortmentID);
        targetAssortment.Status = RetailAssortmentStatusType::Draft;
        targetAssortment.PublishedDateTime = DateTimeUtil::minValue();
        targetAssortment.ValidFrom = sourceAssortment.ValidFrom;
        targetAssortment.ValidTo = sourceAssortment.ValidTo;
        targetAssortment.insert();

        // If source Assortment is expired, then use as Published status for RetailAssortmentChannelLine and RetailAssortmentProductLine.
        if (sourceAssortment.Status == RetailAssortmentStatusType::Expired)
        {
            sourceAssortmentLineStatus = RetailAssortmentStatusType::Published;
        }
        else // Else use Assortment Status from sourceAssortment.Status for RetailAssortmentChannelLine and RetailAssortmentProductLine.
        {
            sourceAssortmentLineStatus = sourceAssortment.Status;
        }

        // Copy the associated channels
        RetailAssortmentChannelLine::copyChannelLines(
            sourceAssortment.RecId,
            sourceAssortmentLineStatus,
            targetAssortment.RecId,
            targetAssortment.Status);

        // Copy the associated products
        RetailAssortmentProductLine::copyProductLines(
            sourceAssortment.RecId,
            sourceAssortmentLineStatus,
            targetAssortment.RecId,
            targetAssortment.Status);

        ttsCommit;

        _args.record(_args.lookupRecord(targetAssortment));
        menuFunction.run(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>