<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Journal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventMov_Journal</c> class is the base class of the <c>InventMovement</c> class for
/// inventory journals.
/// </summary>
abstract class InventMov_Journal extends InventMovement
{
    InventJournalTrans  inventJournalTrans;
    List                activeFinancialDimFieldslist;
    boolean             itemIdModified = true; //Initialized as true to have backward compatibility to all references, which assume this to be true.
    boolean             costPriceModified = false;
    boolean             qtyModified = false;
    InventJournalCheckConsolidatedQty inventJournalCheckConsolidatedQty;

    private boolean checkTrackingDimFlight = InventJournalValidateNumGroupDeactivateInventFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a <c>LedgerAccount</c> that is needed for the account balance sheet.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerAccount</c> needed for the account balance sheet.
    /// </returns>
    /// <remarks>
    ///    When a fixed asset is assigned to the record and there is a ledger account for
    ///    <c>InventIssueFA</c>, use that instead of the account defined for the <c>InventIssue</c> inventory
    ///    account type.
    /// </remarks>
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        // <GEERU>
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        if (!cacheAccountBalanceSheet)
        {
            // <GEERU>
            boolean receipt = this.transQty() >= 0;
            if (countryRegion_RU
                && inventJournalTrans.Storno_RU)
            {
                receipt = ! receipt;
            }

            if (receipt)
            {
                // </GEERU>
                // <GEERU>
                if (countryRegion_RU)
                {
                    cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventReceipt));
                }
                else
                {
                    // </GEERU>
                    // <GCN>
                    if (InventPostingExtendParm_CN::checkExtendParmEnabled())
                    {
                        cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                        InventAccountType::InventReceipt,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().itemGroupId());
                    }
                    else
                    {
                        // </GCN>
                        cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventReceipt, InventTable::itemGroupIdByItemId(this.itemId())));
                        // <GCN>
                    }
                    // </GCN>
                    // <GEERU>
                }
                // </GEERU>
            }
            else
            {
                if (this.assetId())
                {
                    // <GEERU>
                    if (countryRegion_RU)
                    {
                        cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventIssueFixedAsset));
                    }
                    else
                    {
                        // </GEERU>
                        cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventIssueFixedAsset, InventTable::itemGroupIdByItemId(this.itemId())));
                        // <GEERU>
                    }
                    // </GEERU>
                }
                if (!cacheAccountBalanceSheet)
                {
                    // <GEERU>
                    if (countryRegion_RU)
                    {
                        cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventIssue));
                    }
                    else
                    {
                        // </GEERU>
                        // <GCN>
                        if (InventPostingExtendParm_CN::checkExtendParmEnabled())
                        {
                            cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                            InventAccountType::InventIssue,
                            InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                            this.itemId(),
                            this.inventTable().itemGroupId());
                        }
                        else
                        {
                            // </GCN>
                            cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventIssue, InventTable::itemGroupIdByItemId(this.itemId())));
                            // <GCN>
                        }
                        // </GCN>
                        // <GEERU>
                    }
                    // </GEERU>
                }
            }
        }
        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        
        if (!cacheAccountOperations)
        {
            boolean profit = this.transQty() >= 0;
            if (countryRegion_RU
                && inventJournalTrans.Storno_RU)
            {
                profit = ! profit;
            }

            if (profit)
            {
                if (countryRegion_RU)
                {
                    cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventProfit));
                }
                else
                {
                    cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventProfit, InventTable::itemGroupIdByItemId(this.itemId())));
                }
            }
            else
            {
                if (countryRegion_RU)
                {
                    cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventLoss));
                }
                else
                {
                    cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventLoss, InventTable::itemGroupIdByItemId(this.itemId())));
                }
            }
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber activityNumber()
    {
        return inventJournalTrans.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowInventoryUpdateWhenInventTransIdIsEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the movement check whether InventTransId is empty.
    /// </summary>
    /// <returns>true if the movement doesn't check whether InventTransId is empty; otherwise, false.</returns>
    public boolean allowInventoryUpdateWhenInventTransIdIsEmpty()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsCheckLocationAndLP</Name>
				<Source><![CDATA[
    public boolean whsCheckLocationAndLP(InventTrans _inventTrans)
    {
        WMSLocation         wmsLocation;
        InventDim           inventDimLP;

        if (!WHSInventEnabled::exist(_inventTrans.ItemId))
        {
            return true;
        }

        boolean ret = super(_inventTrans);

        inventDimLP = InventDim::find(_inventTrans.InventDimId);
        wmsLocation = WMSLocation::find(inventDimLP.wmsLocationId, inventDimLP.InventLocationId);

        if (inventDimLP.LicensePlateId)
        {
            if (!wmsLocation.whsLocationIsLPControlled())
            {
                ret = checkFailed(strFmt("@SCM:LicensePlateSpecifiedOnNonPLControlledLocation", inventDimLP.LicensePlateId, wmsLocation.wMSLocationId, wmsLocation.inventLocationId));
            }
        }
        else
        {
            if (wmsLocation.whsLocationIsLPControlled())
            {
                InventLocation warehouseLocation = InventLocation::find(inventDimLP.InventLocationId);
                if (warehouseLocation && warehouseLocation.FSHStore && warehouseLocation.WHSEnabled)
                {
                    return ret;
                }
                else
                {
                    ret = checkFailed(strFmt("@SCM:LicensePlateMustBeSpecified", wmsLocation.wMSLocationId, wmsLocation.inventLocationId));
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetId</Name>
				<Source><![CDATA[
    public AssetId assetId()
    {
        return inventJournalTrans.AssetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCostValuebeChanged</Name>
				<Source><![CDATA[
    protected boolean canCostValuebeChanged()
    {
        if ( ! this.inventModelGroup().StandardCost && (
            this.transType() == InventTransType::BOMMain && this.transSign() > 0 ||
            this.inventTable().inventItemType().isServiceItem()))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDimChangeAffectCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a dimension change can lead to a different the cost price on the journal.
    /// </summary>
    /// <param name="_inventDimNew">
    /// The new inventory dimension.
    /// </param>
    /// <param name="_inventDimOld">
    /// The old inventory dimension.
    /// </param>
    /// <returns>
    /// true if the change can lead to a different cost price on the journal; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If a financial dimension is changed the cost price might be different.
    /// </remarks>
    protected boolean canDimChangeAffectCostPrice(
        InventDim   _inventDimNew,
        InventDim   _inventDimOld)
    {
        ListEnumerator le = this.getEnumeratorActiveFinancialInvDim();

        while (le.moveNext())
        {
            FieldId inventDimFieldId = le.current();

            if (_inventDimOld.(inventDimFieldId) != _inventDimNew.(inventDimFieldId))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllowPosting</Name>
				<Source><![CDATA[
    protected boolean checkAllowPosting(MainAccountNum _mainAccount,
                                        LedgerPostingType _posting = LedgerPostingType::None,
                                        boolean _mandatory = false,
                                        boolean _validateIsBlockedForManualEntry = true,
                                        boolean _checkUser = true,
                                        RecId _ledgerChartOfAccounts = LedgerChartOfAccounts::current(),
                                        LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
    {
        return MainAccount::checkAllowPosting(_mainAccount, _posting, _mandatory, _validateIsBlockedForManualEntry, _checkUser, _ledgerChartOfAccounts, _ledgerPostingMessageCollection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccountOperations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the account operation is valid.
    /// </summary>
    /// <returns>
    ///    true if the account operation is valid for posting; otherwise, false.
    /// </returns>
    protected boolean checkAccountOperations()
    {
        boolean         ok = true;

        if (!this.accountOperations())
        {
            ok = checkFailed(strFmt("@SYS25235", this.postingOperations()));
        }
        else
        {
            MainAccount mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.accountOperations());

            if (!this.checkAllowPosting(mainAccount.MainAccountId, this.ledgerPostingType()))
            {
                ok = false;
            }

            if (!MainAccount::checkPostingType(mainAccount.RecId, this.postingOperations()))
            {
                ok = false;
            }

            if (!mainAccount.checkForPosting(mainAccount.PostingType))
            {
                ok = false;
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotSubDelivery</Name>
				<Source><![CDATA[
    protected boolean checkNotSubDelivery(
        InventQty       _physicalNow,
        InventQty       _remainPhysicalNow,
        boolean         _isPhysicalUpdate,
        PdsCWInventQty  _pdsCWPhysicalNow,
        PdsCWInventQty  _pdsCWRemainPhysicalNow
        )
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventDimForInventDimField</Name>
				<Source><![CDATA[
    protected boolean checkInventDimForInventDimField(
        InventQty                       _qty,
        InventDim                       _inventDim,
        InventDimGroupFieldSetup        _inventDimGroupFieldSetup,
        boolean                         _finalCheck,
        boolean                         _showError
        )
    {
        boolean ret = super(_qty, _inventDim, _inventDimGroupFieldSetup, _finalCheck, _showError);

        if (checkTrackingDimFlight && ret && _qty > 0 && _inventDimGroupFieldSetup.isActive() && !this.dimAllowBlankReceipt(_inventDimGroupFieldSetup))
        {
            FieldId inventDimFieldId = _inventDimGroupFieldSetup.dimFieldId();

            if (! _inventDim.(inventDimFieldId))
            {
                switch (inventDimFieldId)
                {
                    case fieldNum(InventDim, InventBatchId):
                        InventNumGroup inventBatchNumGroup = InventNumGroup::find(this.inventTable().BatchNumGroupId);

                        if (inventBatchNumGroup.RecId && !inventBatchNumGroup.isTransTypeActivated(this.transType()))
                        {
                            ret = checkFailed(strFmt("@SYS53724", fieldId2pname(tableNum(InventDim), fieldNum(InventDim, InventBatchId))));
                        }
                        break;
                    case fieldNum(InventDim, InventSerialId):
                        InventNumGroup inventSerialNumGroup = InventNumGroup::find(this.inventTable().SerialNumGroupId);

                        if (inventSerialNumGroup.RecId && !inventSerialNumGroup.isTransTypeActivated(this.transType()))
                        {
                            ret = checkFailed(strFmt("@SYS53724", fieldId2pname(tableNum(InventDim), fieldNum(InventDim, InventSerialId))));
                        }
                        break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSerialNumbersDoNotExist</Name>
				<Source><![CDATA[
	private boolean checkSerialNumbersDoNotExist()
    {
        InventTrans         inventTransReceipt;
        InventTransOrigin   inventTransOriginReceipt;
        InventDim           inventDimReceipt;
        InventTrans         inventTransIssue;
        InventTransOrigin   inventTransOriginIssue;
        InventDim           inventDimIssue;
        InventJournalTrans  inventJournalTransIssue;
        boolean             ret = true;

        if ((inventJournalCheckConsolidatedQty && inventJournalCheckConsolidatedQty.isSerialNumberChecked(inventJournalTrans.ItemId, ''))
            || EcoResTrackingDimensionGroup::find(this.inventTable().trackingDimensionGroup()).IsSerialNumberControlEnabled)
        {
            if (inventJournalCheckConsolidatedQty)
            {
                inventJournalCheckConsolidatedQty.addCheckedSerialNumber(inventJournalTrans.ItemId, '');
            }

            //For serial numbers on the receipt transactions of the current journal line, if they are not
            //present on any issue transaction of the same journal, we should check that the serial number
            //is not currently in inventory.
            while select RecId from inventTransOriginReceipt
            where inventTransOriginReceipt.InventTransId == inventJournalTrans.InventTransId
            join inventTransReceipt
            where inventTransReceipt.InventTransOrigin  == inventTransOriginReceipt.RecId
                && inventTransReceipt.StatusReceipt     != StatusReceipt::None
                && inventTransReceipt.StatusIssue       == StatusIssue::None
            join inventSerialId from inventDimReceipt
                where inventDimReceipt.inventDimId      == inventTransReceipt.inventDimId
                   && inventDimReceipt.inventSerialId   != ''
            notexists join inventJournalTransIssue
                where inventJournalTransIssue.JournalType   == inventJournalTrans.JournalType
                    && inventJournalTransIssue.JournalId    == inventJournalTrans.JournalId
                    && inventJournalTransIssue.ItemId       == inventJournalTrans.ItemId
            exists join inventTransOriginIssue
                where inventTransOriginIssue.InventTransId == inventJournalTransIssue.InventTransId
            exists join inventTransIssue
                where inventTransIssue.InventTransOrigin == inventTransOriginIssue.RecId
                    && inventTransIssue.StatusIssue      != StatusIssue::None
                    && inventTransIssue.StatusReceipt    == StatusReceipt::None
                exists join inventDimIssue
                    where inventDimIssue.inventDimId        == inventTransIssue.inventDimId
                        && inventDimIssue.inventSerialId    == inventDimReceipt.inventSerialId
            {
                if (!this.checkSerialNum(inventTransReceipt, inventDimReceipt.inventSerialId))
                {
                    ret = false;
                    break;
                }
                else if (inventJournalCheckConsolidatedQty)
                {
                    if (inventJournalCheckConsolidatedQty.isSerialNumberChecked(inventJournalTrans.ItemId, inventDimReceipt.inventSerialId))
                    {
                        ret = checkFailed(strFmt("@SCM:AddOnHandTwiceForOneSerialNumber", inventDimReceipt.inventSerialId));
                        break;
                    }
                    else
                    {
                        inventJournalCheckConsolidatedQty.addCheckedSerialNumber(inventJournalTrans.ItemId, inventDimReceipt.inventSerialId);
                    }
                }
            }

            if (InventJournalCheckSerialNumberInPostOrderToggle::instance().isEnabled()
                && inventJournalCheckConsolidatedQty
                && inventJournalTrans.JournalType != InventJournalType::BOM)
            {
                while select RecId from inventTransOriginReceipt
                where inventTransOriginReceipt.InventTransId == inventJournalTrans.InventTransId
                join inventTransReceipt
                    where inventTransReceipt.InventTransOrigin  == inventTransOriginReceipt.RecId
                join inventSerialId from inventDimReceipt
                    where inventDimReceipt.inventDimId == inventTransReceipt.inventDimId
                       && inventDimReceipt.inventSerialId != ''
                {
                    if (ret && !this.checkSerialNumWithMultiLines(
                        inventTransReceipt,
                        inventDimReceipt.inventSerialId,
                        inventJournalCheckConsolidatedQty.getAccumulatdQtyForSerialNumber(inventTransReceipt.ItemId, inventDimReceipt.inventSerialId)))
                    {
                        ret = false;
                    }

                    boolean isFullVisibilityItem = PdsGlobal::pdsIsCWFullVisItem(inventTransReceipt.ItemId);

                    if (isFullVisibilityItem)
                    {
                        inventJournalCheckConsolidatedQty.addQtyForSerialNumber(inventTransReceipt.ItemId, inventDimReceipt.inventSerialId, inventTransReceipt.PdsCWQty);
                    }
                    else
                    {
                        inventJournalCheckConsolidatedQty.addQtyForSerialNumber(inventTransReceipt.ItemId, inventDimReceipt.inventSerialId, inventTransReceipt.Qty);
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costValueChanged</Name>
				<Source><![CDATA[
    protected CostAmount costValueChanged(InventTrans _inventTrans)
    {
        CostAmount costAmount;

        if (inventJournalTrans.CostAmount)
        {
            if (inventJournalTrans.ProjId && inventJournalTrans.ProjUnitID != inventJournalTrans.Unit)
            {
                costAmount = inventJournalTrans.CostAmount * Sign(_inventTrans.Qty);
            }
            else
            {
                costAmount = _inventTrans.Qty * inventJournalTrans.CostAmount / inventJournalTrans.Qty;
            }
        }

        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && inventJournalTrans)
        {
            InventTransOriginJournalTrans::writeOriginOwnerRelationship(inventJournalTrans.DataAreaId, inventJournalTrans.JournalId, inventJournalTrans.LineNum, originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the relationship between the inventory transactions originator and the owner that
    ///    corresponds.
    /// </summary>
    public void deleteOriginOwnerRelationship()
    {
        if (inventJournalTrans)
        {
            InventTransOriginJournalTrans::deleteOwnerRelationship(inventJournalTrans.DataAreaId, inventJournalTrans.JournalId, inventJournalTrans.LineNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumeratorActiveFinancialInvDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an <c>ListEnumerator</c> enumerator that can be used to enumerate over the active and financial inventory dimensions fields.
    /// </summary>
    /// <returns>
    /// An <c>ListEnumerator</c> enumerator that can be used to enumerate over the active and financial inventory dimension fields.
    /// </returns>
    private ListEnumerator getEnumeratorActiveFinancialInvDim()
    {
        InventDimParm inventDimParmFinancialActive;

        if (activeFinancialDimFieldslist == null)
        {
            this.inventDimGroupSetup().inventDimParmActiveFinancialInventory(inventDimParmFinancialActive);

            activeFinancialDimFieldslist = inventDimParmFinancialActive.selectedDimFields();
        }

        return activeFinancialDimFieldslist.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    public InventDimId inventDimId()
    {
        return inventJournalTrans.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The new value of the ID of the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transaction originator that corresponds to the movement.
    /// </returns>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }
        else
        {
            if (!inventTransOriginId)
            {
                inventTransOriginId = InventTransOriginJournalTrans::findInventTransOriginId(inventJournalTrans.DataAreaId, inventJournalTrans.JournalId, inventJournalTrans.LineNum);
            }
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturned</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the movement should be returned.
    /// </summary>
    /// <param name="_qty">
    ///    The inventory quantity of the movement; optional.
    /// </param>
    /// <returns>
    ///    true if the movement should be returned; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    An inventory journal transaction is considered returned if the related inventory transaction is a
    ///    receipt and the <c>inventTransIdReturn</c> value is specified.
    /// </remarks>
    public boolean isReturned(InventQty _qty = 0)
    {
        return _qty >= 0 && inventJournalTrans.InventTransIdReturn != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    public ItemId itemId()
    {
        return inventJournalTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalCheckTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>InventJournalTrans</c> transaction is valid.
    /// </summary>
    /// <returns>
    /// false if there is an error in the transaction object; otherwise, true.
    /// </returns>
    public boolean  journalCheckTrans()
    {
        boolean             ok = true;

        InventDimParm       inventDimParm;

        if (! inventJournalTrans.checkAmount())
        {
            ok = false;
        }

        if (inventJournalTrans.InventTransId)
        {
            InventUpd_Physical physical = InventUpd_Physical::newCheckPostInventJournalTrans(this);

            // We must override the check for physical availability if the journal transaction contains a blocking status
            if (WHSInventStatus::isBlockingStatus(inventJournalTrans.inventDim().InventStatusId)
            &&  this.allowNegativePhysicalForBlockingStatus()
            &&  inventJournalTrans.Qty < 0)
            {
                inventDimParm.initFromInventDim(inventDim);

                InventQty physicalInvent = InventOnHandQty::newParameters(inventJournalTrans.ItemId, inventDim, inventDimParm).physicalInvent();

                if (physicalInvent >= abs(inventJournalTrans.Qty))
                {
                    physical.parmAllowNegativePhysical(true);
                }
            }

            if (! physical.check(inventJournalTrans.TransDate))
            {
                ok = false;
            }

            ok = this.checkSerialNumbersDoNotExist() && ok;
        }
        else
        {
            ok = checkFailed("@SYS50830");
        }

        // Tests whether an item price exists for standard cost items
        if (this.mustCheckItemPrice())
        {
            InventItemPrice inventItemPrice = InventItemPrice::stdCostFindDate(inventTable, inventJournalTrans.TransDate, '', this.getItemPriceInventoryDimensions());
   
            if (!inventItemPrice)
            {
                ok = checkFailed("@SYS112593");
            }
   
            ok = ok && InventCostTransCostList::checkStdCostList(inventItemPrice.RecId);
        }

        // Checks for missing item group id
        if (!inventTable.inventItemGroupItem().ItemGroupId)
        {
            ok = checkFailed(strFmt("@SYS313291", fieldPName(InventItemGroupItem, ItemGroupId)));
        }
        else if (this.mustBeBookedFinancially())
        {
            ok = this.checkAccountOperations() && ok;

            if (!this.accountBalanceSheet())
            {
                ok = checkFailed(strFmt("@SYS25235",this.postingBalanceSheet()));
            }
            else
            {
                MainAccount mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(this.accountBalanceSheet());

                if (! MainAccount::checkAllowPosting(mainAccount.MainAccountId))
                {
                    ok = false;
                }

                if (! MainAccount::checkPostingType(mainAccount.RecId, this.postingBalanceSheet()))
                {
                    ok = false;
                }

                if (! mainAccount.checkForPosting(mainAccount.PostingType))
                {
                    ok = false;
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckItemPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an item price must exist for this movement.
    /// </summary>
    /// <returns>true whether an item price must exist for this movement; otherwise, false.</returns>
    protected boolean mustCheckItemPrice()
    {
        return inventTable.modelGroup().inventModelType().stdCostBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemPriceInventoryDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory dimensions used for finding the cost price.
    /// </summary>
    /// <returns>The inventory dimensions used for finding the cost price.</returns>
    protected inventDim getItemPriceInventoryDimensions()
    {
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalPostTransFinancialUpdate</Name>
				<Source><![CDATA[
    protected void journalPostTransFinancialUpdate(
        LedgerVoucher           _ledgerVoucher,
        InventUpd_Financial     _financial      = null,
        CostAmount              _costAmount     = 0)
    {
        if (!_financial)
        {
            _financial = InventUpd_Financial::newCheckPostInventJournalTrans(this, _ledgerVoucher, _costAmount);
        }

        _financial.updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalPostTrans</Name>
				<Source><![CDATA[
    public void journalPostTrans(
        LedgerVoucher           _ledgerVoucher,
        InventUpd_Financial     _financial      = null,
        CostAmount              _costAmount     = 0)
    {
        if (!_ledgerVoucher)
        {
            throw error(strFmt("@SYS3458",tablePName(InventJournalTrans)));
        }
        if (_ledgerVoucher.lastVoucher()  != inventJournalTrans.Voucher )
        {
            throw error(strFmt("@SYS3458",tablePName(InventJournalTrans)));
        }

        if (_ledgerVoucher.lastTransDate() != inventJournalTrans.TransDate)
        {
            throw error("@SYS19456");
        }

        if (this.transQty() != 0)
        {
            this.journalPostTransFinancialUpdate(_ledgerVoucher, _financial, _costAmount);

            if (#PdsBatchAttribEnabled
                && inventJournalTrans.PdsCopyBatchAttrib)
            {
                this.pdsCopyBatchAttrib();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetCostAmount</Name>
				<Source><![CDATA[
    public void journalSetCostAmount()
    {
        inventJournalTrans.CostMarkup = 0;
        inventJournalTrans.PriceUnit = 1;
        inventJournalTrans.CostPrice = PriceDisc::amount2Price(inventJournalTrans.CostAmount,
                                                      0,
                                                      0,
                                                      inventJournalTrans.Qty,
                                                      0,
                                                      1,
                                                      '',
                                                      0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetCostMarkup</Name>
				<Source><![CDATA[
    public void journalSetCostMarkup()
    {
        if (inventJournalTrans.CostPrice)
        {
            inventJournalTrans.CostAmount = inventJournalTrans.calcCostAmount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetCostPrice</Name>
				<Source><![CDATA[
    public void journalSetCostPrice()
    {
        inventJournalTrans.CostAmount = inventJournalTrans.calcCostAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetCounted</Name>
				<Source><![CDATA[
    public void journalSetCounted()
    {
        inventJournalTrans.Counted  = decRound(inventJournalTrans.Counted,InventTable::inventDecimals(inventJournalTrans.ItemId));
        inventJournalTrans.Qty      = inventJournalTrans.Counted - inventJournalTrans.InventOnHand;

        this.journalSetQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetInventDimField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the specified inventory dimension value on the journal line record
    /// and sets field values which should be defaulted based on the specified dimension value.
    /// </summary>
    /// <param name = "_inventDim">The <c>InventDim</c> record that contains the new dimension field value.</param>
    /// <param name = "_dimFieldId">The ID of the inventory dimension that must be set.</param>
    public void journalSetInventDimField(
        InventDim       _inventDim,
        FieldId         _dimFieldId)
    {
        this.journalSetInventDimFields(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetInventDimFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the specified inventory dimension values on the journal line record
    /// and sets field values which should be defaulted based on the specified dimension values.
    /// </summary>
    /// <param name = "_inventDim">The <c>InventDim</c> record that contains the new dimension field values.</param>
    public void journalSetInventDimFields(InventDim _inventDim)
    {
        boolean dimensionChangeAffectsCostPrice = this.canDimChangeAffectCostPrice(_inventDim,inventJournalTrans.inventDim());

        InventDim newInventDim = InventDim::findOrCreate(_inventDim);
        this.setInventDimId(newInventDim.InventDimId);

        if (dimensionChangeAffectsCostPrice)
        {
            inventJournalTrans.setCostPrice('', newInventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemIdModified</Name>
				<Source><![CDATA[
    public boolean parmItemIdModified(boolean _itemIdModified = itemIdModified)
    {
        itemIdModified = _itemIdModified;
        return itemIdModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostPriceModified</Name>
				<Source><![CDATA[
    public boolean parmCostPriceModified(boolean _costPriceModified = costPriceModified)
    {
        costPriceModified = _costPriceModified;
        return costPriceModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyModified</Name>
				<Source><![CDATA[
    public boolean parmQtyModified(boolean _qtyModified = qtyModified)
    {
        qtyModified = _qtyModified;
        return qtyModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal from an inventory item.
    /// </summary>
    /// <param name = "_initQty">A Boolean flag controlling if quantity should be initialized.</param>
    /// <param name = "_initInventDim">A Boolean flag controlling if inventory dimensions should be initialized.</param>
    /// <param name = "_initCostPrice">A Boolean flag controlling if cost price should be initialized.</param>
    /// <param name = "_initInventoryStatus">A Boolean flag controlling if inventory status should be initialized.</param>
    protected void initFromInventTable(
        boolean         _initQty,
        boolean         _initInventDim,
        boolean         _initCostPrice,
        boolean         _initInventoryStatus)
    {
        inventJournalTrans.initFromInventTable(this.inventTable(), _initQty, _initInventDim, _initCostPrice, _initInventoryStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetItemId</Name>
				<Source><![CDATA[
    public boolean journalSetItemId(InventDim _inventDim)
    {
        if (!inventJournalTrans.checkInitFromInventTable(this.inventTable(), _inventDim, itemIdModified))
        {
            inventJournalTrans.ItemId = inventJournalTrans.orig().ItemId;
            return false;
        }

        boolean initQty                = !qtyModified;
        boolean initInventDim          = true;
        boolean initCostPrice          = !costPriceModified;
        boolean initInventoryStatus    = true;

        this.initFromInventTable(initQty, initInventDim, initCostPrice, initInventoryStatus);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetPriceUnit</Name>
				<Source><![CDATA[
    public void journalSetPriceUnit()
    {
        inventJournalTrans.CostAmount   = inventJournalTrans.calcCostAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetQty</Name>
				<Source><![CDATA[
    public void journalSetQty(
        NoYes   _transQtySignChangedToNegative = NoYes::No,
        boolean _showUserDialog                = true,
        boolean _doMinQtyCheck                 = true,
        boolean _doMaxQtyCheck                 = true)
    {
        this.journalSetQtyBySign(_transQtySignChangedToNegative);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetQtyWithQtyCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// A wrapper method for journalSetQty and introduce a new parameter _doMultipleQtyCheck as multiple quantity check indicator.
    /// </summary>
    /// <param name="_transQtySignChangedToNegative">The indicator of sign of transactional quantity is negative or not; optional.</param>
    /// <param name = "_showUserDialog">A Boolean parameter that controls how to resolve constraint conflicts. When set to false it will force the system to automatically accept the correction quantity suggested by the system without notifying the user; optional.</param>
    /// <param name = "_doMinQtyCheck">A Boolean parameter that indicates whether the lower limit quantity check must be performed; optional.</param>
    /// <param name = "_doMaxQtyCheck">A Boolean parameter that indicates whether the upper limit quantity check must be performed; optional.</param>
    /// <param name = "_doMultipleQtyCheck">A Boolean parameter that indicates whether the multiple limit quantity check must be performed; optional.</param>
    /// <remarks>
    /// The missing parameter _doMultipleQtyCheck leads to auto correct user input according to default order setting.
    /// This will cause batch merge cannot be posted because the it will not pass error correction method validation.
    /// And this method should be used afterward instead of calling method 'journalSetQty'.
    /// </remarks>
    public void journalSetQtyWithQtyCheck(
        NoYes   _transQtySignChangedToNegative = NoYes::No,
        boolean _showUserDialog                = true,
        boolean _doMinQtyCheck                 = true,
        boolean _doMaxQtyCheck                 = true,
        boolean _doMultipleQtyCheck            = true)
    {
        this.journalSetQtyBySign(_transQtySignChangedToNegative);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetQtyBySign</Name>
				<Source><![CDATA[
    private void journalSetQtyBySign(NoYes _transQtySignChangedToNegative = NoYes::No)
    {
        inventJournalTrans.Qty = decRound(inventJournalTrans.Qty,InventTable::inventDecimals(inventJournalTrans.ItemId));

        if (this.transSign() < 0)
        {
            if ( (this.newMovement_Orig() && this.newMovement_Orig().transSign() > 0) || _transQtySignChangedToNegative == NoYes::Yes)
            {
                inventJournalTrans.setCostPrice(this.inventDimId(),this.inventdim(), this.inventTableInvent());
            }
        }
        if (inventJournalTrans.CostPrice)
        {
            inventJournalTrans.CostAmount = inventJournalTrans.calcCostAmount();
        }

        if (this.transType() == InventTransType::BOMLine)
        {
            inventJournalTrans.SalesAmount = inventJournalTrans.calcSalesAmountBOMLine();
        }

        inventJournalTrans.modifyInventJournalTransUnitQty();

        if (FormDataUtil::isFormDataSource(inventJournalTrans))
        {
            FormDataUtil::getFormDataSource(inventJournalTrans).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingType</Name>
				<Source><![CDATA[
    protected LedgerPostingType ledgerPostingType()
    {
        return LedgerPostingType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingRefInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the marked transaction origin.
    /// </summary>
    /// <returns>
    ///    zero if the whole movement is not marked; otherwise, the ID of the transaction origin.
    /// </returns>
    public InventTransOriginId markingRefInventTransOrigin()
    {
        return InventTransOrigin::findByInventTransId(inventJournalTrans.InventRefTransId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAutoReserved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>inventMovement</c> must be autoreserved.
    /// </summary>
    /// <returns>
    ///    true if the <c>inventMovement</c> must be autoreserved; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is often called together with the <c>canBeReserved</c> method, which returns a default
    ///    Boolean value from the <c>inventType</c> class hierarchy.
    /// </remarks>
    public boolean mustBeAutoReserved()
    {
        if (!this.inventTable().inventItemType().canBeAutoReserved())
        {
            return false;
        }
        return inventJournalTrans.inventJournalTable().Reservation == ItemReservation::Automatic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
    public boolean mustBeBookedPhysically()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeQuarantineControlled</Name>
				<Source><![CDATA[
    public boolean mustBeQuarantineControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckOverDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current <c>InventMovement</c> object requires checking for over delivery.
    /// </summary>
    /// <param name="_direction">
    /// The <c>InventDirection</c> value of the update that is being made.
    /// </param>
    /// <returns>
    /// true if over delivery must be checked; otherwise, false.
    /// </returns>
    public NoYes mustCheckOverDelivery(InventDirection _direction)
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        InventJournalTrans  _inventJournalTrans,
        InventType          _inventType = new InventType(_inventJournalTrans))
    {
        inventJournalTrans = _inventJournalTrans;
        super(inventJournalTrans,_inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overDeliveryPct</Name>
				<Source><![CDATA[
    public Percent overDeliveryPct()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsAdjustInventoryQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the inventory quantity in the <c>InventJournalTrans</c> record.
    /// </summary>
    /// <param name="_inventQty">
    /// The quantity in inventory units.
    /// </param>
    public void pdsAdjustInventoryQuantity(InventQty _inventQty)
    {
        this.setTransQty(this.transQty() + _inventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCopyBatchAttrib</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the <c>PdsBatchAttributes</c> value from the 'From' to the 'To' batch
    /// </summary>
    /// <remarks>
    /// Copying of the attributes is determined when there is a corresponding batch attributes record.
    /// </remarks>
    private void pdsCopyBatchAttrib()
    {
        PdsBatchAttributes  fromBatchAttributes,toBatchAttributes;

        if (this.pdsCheckCopyBatchAttrib(inventJournalTrans.toInventDim()))
        {
            ttsbegin;
            while select fromBatchAttributes
                where  fromBatchAttributes.ItemId == inventJournalTrans.ItemId
                    && fromBatchAttributes.InventBatchId
                        == inventJournalTrans.inventDim().InventBatchId
            {
                toBatchAttributes.initValue();
                toBatchAttributes.ItemId = fromBatchAttributes.ItemId;
                toBatchAttributes.InventBatchId
                    = inventJournalTrans.toInventDim().InventBatchId;
                toBatchAttributes.PdsBatchAttribId
                    = fromBatchAttributes.PdsBatchAttribId;
                toBatchAttributes.PdsBatchAttribQualityOrderId
                    = fromBatchAttributes.PdsBatchAttribQualityOrderId;
                toBatchAttributes.PdsBatchAttribValue
                    = fromBatchAttributes.PdsBatchAttribValue;
                toBatchAttributes.insert();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWJournalSetCounted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets catch weight quantities for the movement journal.
    /// </summary>
    public void pdsCWJournalSetCounted()
    {
        inventJournalTrans.PdsCWInventQtyCounted =
                decRound(inventJournalTrans.PdsCWInventQtyCounted,
                    UnitOfMeasure::findBySymbol(inventJournalTrans.pdsCWUnitId()).DecimalPrecision);
        inventJournalTrans.PdsCWQty = inventJournalTrans.PdsCWInventQtyCounted
                                        - inventJournalTrans.PdsCWInventOnHand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the remaining physical quantity.
    /// </summary>
    /// <returns>
    /// The remaining physical catch weight quantity.
    /// </returns>
    public PdsCWInventQty pdsCWRemainPhysical()
    {
        return this.pdsCWTransQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReserveQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight reserve quantity.
    /// </summary>
    /// <returns>
    /// The catch weight quantity.
    /// </returns>
    public PdsCWInventQty pdsCWReserveQty()
    {
        if (this.transSign() > 0)
        {
            return 0;
        }

        if (!InventJournalTable::find(inventJournalTrans.JournalId).Reservation)
        {
            return 0;
        }

        return abs(inventJournalTrans.PdsCWQty) * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the catch weight quantity.
    /// </summary>
    /// <param name="_cwQtyInvent">
    /// The catch weight quantity to set.
    /// </param>
    public void pdsCWSetTransQty(PdsCWInventQty _cwQtyInvent)
    {
        if (this.transSign() * inventJournalTrans.Qty >= 0)
        {
            inventJournalTrans.PdsCWQty = _cwQtyInvent;
        }
        else
        {
            inventJournalTrans.PdsCWQty = -_cwQtyInvent;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight transaction quantity.
    /// </summary>
    /// <returns>
    /// The catch weight quantity.
    /// </returns>
    public PdsCWInventQty pdsCWTransQty()
    {
        return abs(inventJournalTrans.PdsCWQty) * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsMustConsiderBatchAttrib</Name>
				<Source><![CDATA[
    public PdsBatchAttribAutoRes pdsMustConsiderBatchAttrib()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a <c>LedgerPostingType</c> that contains the account for transaction type.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> that contains the account for transaction type.
    /// </returns>
    public LedgerPostingType postingBalanceSheet()
    {
        // <GEERU>
        boolean receipt = this.transQty() >= 0;
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        if (countryRegion_RU
            && inventJournalTrans.Storno_RU)
        {
            receipt = ! receipt;
        }
        // </GEERU>
        // <GEERU>
        if (receipt)
        // </GEERU>
        {
            return LedgerPostingType::InventReceipt;
        }

        return (this.assetId()) ?   LedgerPostingType::InventIssueFixedAsset :
                                    LedgerPostingType::InventIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    public LedgerPostingType postingOperations()
    {
        // <GEERU>
        boolean profit = this.transQty() >= 0;
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        if (countryRegion_RU
            && inventJournalTrans.Storno_RU)
        {
            profit = ! profit;
        }
        // </GEERU>
        // <GEERU>
        if (profit)
        // </GEERU>
        {
            return LedgerPostingType::InventProfit;
        }

        return LedgerPostingType::InventLoss;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId projCategoryId()
    {
        return inventJournalTrans.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    public ProjId projId()
    {
        return inventJournalTrans.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    public InventQty remainPhysical()
    {
        return this.transQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveQty</Name>
				<Source><![CDATA[
    public InventQty reserveQty()
    {
        if (this.transSign() > 0
         || !InventJournalTable::find(inventJournalTrans.JournalId).Reservation)
        {
            return 0;
        }

        return abs(inventJournalTrans.Qty) * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    public void setInventDimId(InventDimId _dimId)
    {
        inventJournalTrans.setInventDimId(_dimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventRefFields</Name>
				<Source><![CDATA[
    public boolean setInventRefFields(
        InventRefType           _inventRefType,
        InventRefId             _inventRefId,
        InventTransOriginId     _markingRefInventTransOrigin)
    {
        if (! inventJournalTrans.inventJournalTable().Posted)
        {
            inventJournalTrans.InventRefType       = _inventRefType;
            inventJournalTrans.InventRefId         = _inventRefId;
            inventJournalTrans.InventRefTransId    = InventTransOrigin::find(_markingRefInventTransOrigin).InventTransId;

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPreTransEstimated</Name>
				<Source><![CDATA[
    public void setPreTransEstimated(
        InventMovement        _this_Orig,
        InventUpd_Estimated   _updateNow)
    {
        if (inventJournalTrans.inventJournalTable().Posted)
        {
            _updateNow.parmPreEstimated(0);
            _updateNow.parmTransEstimated(0);
        }
        else
        {
            super(_this_Orig, _updateNow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
    public void setTransQty(InventQty  _qtyInvent)
    {
        InventQty   transQtyOrig = this.transQty();
        Integer     transSignOrig = this.transSign();

        if (this.transSign() * inventJournalTrans.Qty >= 0)
        {
            inventJournalTrans.Qty  = _qtyInvent;
        }
        else
        {
            inventJournalTrans.Qty  = -_qtyInvent;
        }

        // For catch weight items we need to update cost amount on the journal items
        // when changing the transaction quantity.
        // For non catch weight items it is only possible to increase quantity through the
        // journal lines form and cost adjustment is handled there. Decreasing quantity splits the line
        // and therefore does not change the cost.
        if ((transQtyOrig != this.transQty() || transSignOrig != this.transSign())
            && inventJournalTrans.CostPrice != 0
            && this.pdsCWItem())
        {
            this.journalSetQty(transSignOrig >= 0 && this.transSign() < 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subDeliveryPct</Name>
				<Source><![CDATA[
    protected Percent subDeliveryPct()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return inventJournalTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    public InventTransId transId()
    {
        return inventJournalTrans.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transInventRefType</Name>
				<Source><![CDATA[
    public InventRefType transInventRefType()
    {
        return InventRefType::InventJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    public InventQty transQty()
    {
        return abs(inventJournalTrans.Qty) * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
    public InventTransRefId transRefId()
    {
        return inventJournalTrans.JournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    public Integer transSign()
    {
        if (inventJournalTrans.Qty >= 0)
        {
            return  1;
        }
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the right inventory movement sub-class of <c>InventMov_Journal</c> class depending on the provided arguments.
    /// </summary>
    /// <param name = "_inventJournalTrans">Inventory journal lines record.</param>
    /// <param name = "_subType">Movement subtype; defaults to None.</param>
    /// <param name = "_childBuffer">Child buffer for creating the inventory movement.</param>
    /// <returns>A new instance of <c>InventMov_Journal</c> sub-class; null if the inventory movement sub-class could not be constructed.</returns>
    /// <remarks>
    /// Add a post-method handler to return the right sub-class when extending the <c>InventJournalType</c> enumeration.
    /// </remarks>
    public static InventMov_Journal newFromInventJournalTrans(
        InventJournalTrans _inventJournalTrans,
        InventMovSubType   _subType     = InventMovSubType::None,
        Common             _childBuffer = null)
    {
        switch (_inventJournalTrans.JournalType)
        {
            case InventJournalType::Movement:
                return InventMov_Jour_Movement::newFromInventJournalTrans(_inventJournalTrans);
            case InventJournalType::LossProfit:
                return InventMov_Jour_LossProfit::newFromInventJournalTrans(_inventJournalTrans);
            case InventJournalType::project:
                return InventMov_Jour_Loss_Project::newFromInventJournalTrans(_inventJournalTrans);
            case InventJournalType::Asset:
                return InventMov_Jour_Loss_Asset::newFromInventJournalTrans(_inventJournalTrans);
            case InventJournalType::Transfer:
                return InventMov_Jour_Transfer::newFromInventJournalTrans(_inventJournalTrans, _subType);
            case InventJournalType::BOM:
                if (_inventJournalTrans.bomLine== NoYes::Yes)
                {
                    return InventMov_Jour_BOMLine::newFromInventJournalTrans(_inventJournalTrans);
                }
                return InventMov_Jour_BOM::newFromInventJournalTrans(_inventJournalTrans);
            case InventJournalType::Count:
                return InventMov_Jour_Loss_SumUp::newFromInventJournalTrans(_inventJournalTrans);
            case InventJournalType::OwnershipChange:
                return InventMov_Jour_OwnershipChange::newFromInventJournalTrans(_inventJournalTrans);
            default:
                return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventJournalCheckConsolidatedQty</Name>
				<Source><![CDATA[
    public InventJournalCheckConsolidatedQty parmInventJournalCheckConsolidatedQty(InventJournalCheckConsolidatedQty _inventJournalCheckConsolidatedQty = inventJournalCheckConsolidatedQty)
    {
        inventJournalCheckConsolidatedQty = _inventJournalCheckConsolidatedQty;  
        return inventJournalCheckConsolidatedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveDimensionDefault2ForBalanceSheetUpdateLedger</Name>
				<Source><![CDATA[
    protected DimensionDefault retrieveDimensionDefault2ForBalanceSheetUpdateLedger()
    {
        return this.getMainAccountDefaultDimension(this.accountBalanceSheet());
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveDimensionDefault2ForOperationsUpdateLedger</Name>
				<Source><![CDATA[
    protected DimensionDefault retrieveDimensionDefault2ForOperationsUpdateLedger()
    {
        return this.getMainAccountDefaultDimension(this.accountOperations());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>