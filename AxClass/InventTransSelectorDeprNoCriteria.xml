<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransSelectorDeprNoCriteria</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransSelectorDeprNoCriteria</c> provides the select statement for the inventory transactions that are elegible
/// for depriciation and that are either not constrained by any inventory dimensions or that are constrained by all inventory dimensions.
/// </summary>
[
InventTransSelectorDepreciationAttribute(InventDirection::Issue, NoYes::No, NoYes::No),
InventTransSelectorDepreciationAttribute(InventDirection::Receipt, NoYes::No, NoYes::No)
]
class InventTransSelectorDeprNoCriteria extends InventTransSelectorDepreciation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>select</Name>
				<Source><![CDATA[
    public void select(InventTrans _inventTrans)
    {
        InventDim   inventDim;
        InventBatch inventBatch;

        #macro.QueryInventTransWhereClause
        where _inventTrans.InventTransOrigin == movement.inventTransOriginId()
                    && _inventTrans.TransChildType   == movement.transChildType()
                    && _inventTrans.TransChildRefId  == movement.transChildRefId()
                    && _inventTrans.StatusIssue      >= fromStatusIssue
                    && _inventTrans.StatusIssue      <= toStatusIssue
                    && _inventTrans.StatusReceipt    >= fromStatusReceipt
                    && _inventTrans.StatusReceipt    <= toStatusReceipt
                    && ((   selectMarkedTrans && _inventTrans.MarkingRefInventTransOrigin != 0)
                        ||(!selectMarkedTrans && _inventTrans.MarkingRefInventTransOrigin == 0))
                    && (inventDimParm.isAllFlagNo() || _inventTrans.InventDimId == inventDimCriteria.InventDimId);
        #endmacro

        // InventBatch filter on FEFO date controlled item
        #macro.QueryInventTransWhereClauseWithBatchFilter
        where _inventTrans.InventTransOrigin == movement.inventTransOriginId()
                    && _inventTrans.TransChildType   == movement.transChildType()
                    && _inventTrans.TransChildRefId  == movement.transChildRefId()
                    && _inventTrans.StatusIssue      >= fromStatusIssue
                    && _inventTrans.StatusIssue      <= toStatusIssue
                    && _inventTrans.StatusReceipt    >= fromStatusReceipt
                    && _inventTrans.StatusReceipt    <= toStatusReceipt
                    && ((   selectMarkedTrans && _inventTrans.MarkingRefInventTransOrigin != 0)
                        ||(!selectMarkedTrans && _inventTrans.MarkingRefInventTransOrigin == 0))
                    && (inventDimParm.isAllFlagNo() || _inventTrans.InventDimId == inventDimCriteria.InventDimId)
                    join TableId from inventDim
                                    where inventDim.inventDimId == _inventTrans.inventDimId
                                // Here outer join is used to make sure inventTrans can be selected if no batch is specified.
                                outer join TableId from inventBatch
                                    where inventBatch.inventBatchId == inventDim.inventBatchId
                                       && inventBatch.itemId        == _inventTrans.ItemId;
        #endmacro

        // Need to process none 'intercompany inventdim transfer' transaction firstly for intercompany transaction, only for receipt transaction
        boolean needConsiderIntercompanyInventDimTransferOrderBy = ( fromStatusIssue == StatusIssue::None
                                &&  toStatusIssue == StatusIssue::None
                                &&  movement.interCompanyTransaction());

        if (InventTable::find(movement.itemId()).pdsCheck() &&
            InventDimParm::activeDimFlag(movement.inventDimGroupSetup()).InventBatchIdFlag)
        {
            if (InventTable::find(movement.itemId()).modelGroup().PdsPickCriteria == PdsPickCriteria::ExpiryDate)
            {
                if (needConsiderIntercompanyInventDimTransferOrderBy)
                {
                    select noFetch forupdate _inventTrans
                    order by _inventTrans.StatusReceipt desc, _inventTrans.StatusIssue desc, inventBatch.expDate desc, InterCompanyInventDimTransferred asc, _inventTrans.InventDimId desc
                        #QueryInventTransWhereClauseWithBatchFilter
                }
                else
                {
                    select noFetch forupdate _inventTrans
                    order by _inventTrans.StatusReceipt desc, _inventTrans.StatusIssue desc, inventBatch.expDate desc, _inventTrans.InventDimId desc
                        #QueryInventTransWhereClauseWithBatchFilter
                }
            }
            else
            {
                if (needConsiderIntercompanyInventDimTransferOrderBy)
                {
                    select noFetch forupdate _inventTrans
                        order by _inventTrans.StatusReceipt desc, _inventTrans.StatusIssue desc, inventBatch.PdsBestBeforeDate desc, InterCompanyInventDimTransferred asc, _inventTrans.InventDimId desc
                        #QueryInventTransWhereClauseWithBatchFilter
                }
                else
                {
                    select noFetch forupdate _inventTrans
                        order by _inventTrans.StatusReceipt desc, _inventTrans.StatusIssue desc, inventBatch.PdsBestBeforeDate desc, _inventTrans.InventDimId desc
                        #QueryInventTransWhereClauseWithBatchFilter
                }
            }
        }
        else
        {
            // Need to process empty batch number transaction firstly when no criteria, only for receipt transaction
            boolean needConsiderEmptyBatchNumberOrderBy = fromStatusIssue == StatusIssue::None
                                                          && toStatusIssue == StatusIssue::None
                                                          && inventDimParm.isAllFlagNo()
                                                          && InventDimParm::activeDimFlag(movement.inventDimGroupSetup()).InventBatchIdFlag;
            if (needConsiderEmptyBatchNumberOrderBy)
            {
                if (needConsiderIntercompanyInventDimTransferOrderBy)
                {
                    select noFetch forupdate _inventTrans
                        order by StatusReceipt desc, StatusIssue desc, InterCompanyInventDimTransferred asc, inventBatch.inventBatchId asc, inventDim.inventDimId desc
                        #QueryInventTransWhereClauseWithBatchFilter
                }
                else
                {
                    select noFetch forupdate _inventTrans
                        order by StatusReceipt desc, StatusIssue desc, inventBatch.inventBatchId asc, inventDim.inventDimId desc
                        #QueryInventTransWhereClauseWithBatchFilter
                }
            }
            else
            {
                if (needConsiderIntercompanyInventDimTransferOrderBy)
                {
                    select noFetch forupdate _inventTrans
                        order by StatusReceipt desc, StatusIssue desc, InterCompanyInventDimTransferred asc, InventDimId desc
                        #QueryInventTransWhereClause
                }
                else
                {
                    select noFetch forupdate _inventTrans
                        order by StatusReceipt desc, StatusIssue desc, InventDimId desc
                        #QueryInventTransWhereClause
                }
            }
                
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>