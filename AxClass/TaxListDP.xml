<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxListDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxListDP</c> class declares the variables that are required for the <c>TaxList</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(TaxList))
    ,SRSReportParameterAttribute(classStr(TaxListContract))
]
public class TaxListDP extends SrsReportDataProviderPreProcessTempDB
{
    TaxListTmp          taxListTmp;
    TaxListTaxTransTmp  taxListTaxTransTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInsertFieldMapping</Name>
				<Source><![CDATA[
    private void addInsertFieldMapping(QueryBuildFieldList _fieldList, Map _fieldMapping, int _sourceTableUniqueId, FieldId _sourceFieldId, FieldName _sourceFieldName, FieldName _destinationFieldName)
    {
        _fieldList.addField(_sourceFieldId);
        _fieldMapping.insert(_destinationFieldName, [_sourceTableUniqueId, _sourceFieldName]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxListTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual data for the report from the <c>TaxListTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The <c>TaxListTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxListTmp))
    ]
    public TaxListTmp getTaxListTmp()
    {
        select taxListTmp;
        return taxListTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxListTaxTmpData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts records into <c>taxListTaxTransTmp</c> temporary table representing the primary row in the report for a <c>TaxTrans</c> record.
    /// </summary>
    private void insertTaxListTaxTmpData()
    {
        Query                   query;
        Map                     insertRecordsetMap = new Map(Types::String,Types::Container);
        QueryBuildDataSource    qbds;
        QueryBuildFieldList     qbfl;
        int                     dataSourceUniqueId;
        // <GEEU>
        QueryBuildRange         qbr;
        // </GEEU>

        query = new Query(this.parmQuery());
        if (TaxParameters::find().PurchTaxOnOperations)
        {
            this.createPurchTaxOnOperationsRange(query);
        }

        // <GEEU>
        if (TaxParameters::reportUseVatDueDate_W())
        {
            findOrCreateRange_W(query.dataSourceTable(tableNum(taxTrans_W)),fieldNum(TaxTrans_W, VatDueDate_W));

            // update the TaxReportPeriod From/To ranges to compare to the TaxTrans record's VatDueDate
            qbr = SysQuery::findOrCreateRange(query.dataSourceTable(tablenum(TaxReportPeriod)), fieldNum(TaxReportPeriod,FromDate));
            qbr.value(strfmt("(%1 <= %2.%3)", fieldstr(TaxReportPeriod,FromDate), query.dataSourceTable(tablenum(TaxTrans_W)).name(), fieldstr(TaxTrans_W,VatDueDate_W)));

            qbr = SysQuery::findOrCreateRange(query.dataSourceTable(tablenum(TaxReportPeriod)), fieldNum(TaxReportPeriod,ToDate));
            qbr.value(strfmt("(%1 >= %2.%3)", fieldstr(TaxReportPeriod,ToDate), query.dataSourceTable(tablenum(TaxTrans_W)).name(), fieldstr(TaxTrans_W,VatDueDate_W)));
        }
        // </GEEU>

        // Clear all selection fields so mapping for insert recordset is guaranteed correct
        query.clearAllFields();

        // Map fields from TaxTrans
        qbds = query.dataSourceTable(tableNum(TaxTrans));
        qbfl = qbds.fields();
        dataSourceUniqueId = qbds.uniqueId();
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(TaxTrans, RecId), fieldStr(TaxTrans, RecId), fieldStr(TaxListTaxTransTmp, TaxTrans));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(TaxTrans, CurrencyCode), fieldStr(TaxTrans, CurrencyCode), fieldStr(TaxListTaxTransTmp, CurrencyCode));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(TaxTrans, TaxAmount), fieldStr(TaxTrans, TaxAmount), fieldStr(TaxListTaxTransTmp, TaxAmount));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(TaxTrans, TaxAmountCur), fieldStr(TaxTrans, TaxAmountCur), fieldStr(TaxListTaxTransTmp, TaxAmountCur));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(TaxTrans, TaxBaseAmount), fieldStr(TaxTrans, TaxBaseAmount), fieldStr(TaxListTaxTransTmp, TaxBaseAmount));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(TaxTrans, TaxBaseQty), fieldStr(TaxTrans, TaxBaseQty), fieldStr(TaxListTaxTransTmp, TaxBaseQty));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(TaxTrans, TaxCode), fieldStr(TaxTrans, TaxCode), fieldStr(TaxListTaxTransTmp, TaxCode));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(TaxTrans, TaxDirection), fieldStr(TaxTrans, TaxDirection), fieldStr(TaxListTaxTransTmp, TaxDirection));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(TaxTrans, TaxInCostPriceMST), fieldStr(TaxTrans, TaxInCostPriceMST), fieldStr(TaxListTaxTransTmp, TaxInCostPriceMST));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(TaxTrans, TaxInCostPriceCur), fieldStr(TaxTrans, TaxInCostPriceCur), fieldStr(TaxListTaxTransTmp, TaxInCostPriceCur));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(TaxTrans, TaxOrigin), fieldStr(TaxTrans, TaxOrigin), fieldStr(TaxListTaxTransTmp, TaxOrigin));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(TaxTrans, Source), fieldStr(TaxTrans, Source), fieldStr(TaxListTaxTransTmp, Source));
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(TaxTrans, SourceDocumentLine), fieldStr(TaxTrans, SourceDocumentLine), fieldStr(TaxListTaxTransTmp, SourceDocumentLine));

        // Map fields from TaxTable
        qbds = query.dataSourceTable(tableNum(TaxTable));
        qbfl = qbds.fields();
        dataSourceUniqueId = qbds.uniqueId();
        this.addInsertFieldMapping(qbfl, insertRecordsetMap, dataSourceUniqueId, fieldNum(TaxTable, TaxName), fieldStr(TaxTable, TaxName), fieldStr(TaxListTaxTransTmp, TaxName));

        // Insert the data as an insert recordset
        Query::insert_recordset(taxListTaxTransTmp, insertRecordsetMap, query);

        this.updateTaxListTaxTmpData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpDetailRowsWithoutSourceDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a row in the <c>TaxListTmp</c> temporary table representing the detail tax amount row in the report for a <c>TaxTrans</c> record
    /// which does not have sourceDocumentLine associated.
    /// </summary>
    private void insertTmpDetailRowsWithoutSourceDocLine()
    {
        TaxTransGeneralJournalAccountEntry          taxTransGenJourAcctEntry;
        DimensionAttributeValueCombination          dimAttrValueCombo;
        MainAccount                                 mainAccount;

        //Insert record for TotalAmount
        insert_recordset taxListTmp
             (TaxAmount, TaxCode, TaxName, TaxDirection, HideDetailedTaxAmount, FullyQualifiedAccount, MainAccount, AccountName, MainAccountRecId)
             select sum(CalculatedTaxAmount), TaxCode, TaxName, TaxDirection, HideDetailedTaxAmount
                    from taxListTaxTransTmp
                group by taxListTaxTransTmp.TaxCode, taxListTaxTransTmp.TaxName, taxListTaxTransTmp.TaxDirection, taxListTaxTransTmp.HideDetailedTaxAmount,
                        dimAttrValueCombo.DisplayValue, mainAccount.MainAccountId, mainAccount.Name, mainAccount.RecId
                    where taxListTaxTransTmp.TaxTransGenJrnAcctEntryTaxRelation != 0
                join taxTransGenJourAcctEntry
                    where taxTransGenJourAcctEntry.RecId == taxListTaxTransTmp.TaxTransGenJrnAcctEntryTaxRelation
                join DisplayValue from dimAttrValueCombo
                    where dimAttrValueCombo.RecId == taxTransGenJourAcctEntry.LedgerDimension
                join MainAccountId, Name, RecId from mainAccount
                    where mainAccount.RecId == dimAttrValueCombo.MainAccount;

        insert_recordset taxListTmp
             (TaxAmount, TaxCode, TaxName, TaxDirection, HideDetailedTaxAmount, FullyQualifiedAccount, MainAccount, AccountName, MainAccountRecId)
             select sum(CalculatedUseTaxPayableAmount), TaxCode, TaxName, TaxDirection, HideDetailedTaxAmount
                    from taxListTaxTransTmp
                group by taxListTaxTransTmp.TaxCode, taxListTaxTransTmp.TaxName, taxListTaxTransTmp.TaxDirection, taxListTaxTransTmp.HideDetailedTaxAmount,
                        dimAttrValueCombo.DisplayValue, mainAccount.MainAccountId, mainAccount.Name, mainAccount.RecId
                where taxListTaxTransTmp.TaxTransGenJrnAcctEntryTaxPayRelation != 0
                join taxTransGenJourAcctEntry
                    where taxTransGenJourAcctEntry.RecId == taxListTaxTransTmp.TaxTransGenJrnAcctEntryTaxPayRelation
                join DisplayValue from dimAttrValueCombo
                    where dimAttrValueCombo.RecId == taxTransGenJourAcctEntry.LedgerDimension
                join MainAccountId, Name, RecId from mainAccount
                    where mainAccount.RecId == dimAttrValueCombo.MainAccount;

        //Insert record for amount = 0
        insert_recordset taxListTmp
            (TaxCode, TaxDirection, HideDetailedTaxAmount, TaxName, FullyQualifiedAccount, MainAccount, AccountName, MainAccountRecId)
            select TaxCode, TaxDirection, HideDetailedTaxAmount, TaxName
                from taxListTaxTransTmp
                group by taxListTaxTransTmp.TaxCode, taxListTaxTransTmp.TaxName, taxListTaxTransTmp.TaxDirection, taxListTaxTransTmp.HideDetailedTaxAmount,
                         dimAttrValueCombo.DisplayValue, mainAccount.MainAccountId, mainAccount.Name, mainAccount.RecId
                where (taxListTaxTransTmp.TaxTransGenJrnAcctEntryTaxRelation == 0 ||
                        taxListTaxTransTmp.TaxTransGenJrnAcctEntryTaxPayRelation == 0) &&
                        !(taxListTaxTransTmp.SourceDocumentLine != 0 &&
                        taxListTaxTransTmp.TaxOrigin != TaxOrigin::Payment &&
                        taxListTaxTransTmp.TaxOrigin != TaxOrigin::TaxReversed &&
                        taxListTaxTransTmp.TaxOrigin != TaxOrigin::CashDisc)
                join taxTransGenJourAcctEntry
                    where taxTransGenJourAcctEntry.TaxTrans == taxListTaxTransTmp.TaxTrans &&
                          (taxTransGenJourAcctEntry.TaxTransRelationship == TaxTransRelationshipType::Tax ||
                          taxTransGenJourAcctEntry.TaxTransRelationship == TaxTransRelationshipType::UseTaxPayable)
                join DisplayValue from dimAttrValueCombo
                    where dimAttrValueCombo.RecId == taxTransGenJourAcctEntry.LedgerDimension
                join MainAccountId, Name, RecId from mainAccount
                    where mainAccount.RecId == dimAttrValueCombo.MainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpDetailRowsWithSourceDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a row in the <c>TaxListTmp</c> temporary table representing the detail tax amount row in the report for a <c>TaxTrans</c> record.
    /// which has sourceDocumentLine associated.
    /// </summary>
    private void insertTmpDetailRowsWithSourceDocLine()
    {
        AccountingDistribution                      acctDistribution;
        SubledgerJournalAccountEntryDistribution    acctEntryDistribution;
        SubledgerJournalAccountEntry                acctEntry;
        DimensionAttributeValueCombination          dimAttrValueCombo;
        MainAccount                                 mainAccount;

        insert_recordset taxListTmp
            (TaxAmount, TaxCode, TaxName, TaxDirection, HideDetailedTaxAmount, FullyQualifiedAccount, MainAccount, AccountName, MainAccountRecId)
                select sum(AccountingCurrencyAmount) from acctEntryDistribution
                    group by taxListTaxTransTmp.TaxCode, taxListTaxTransTmp.TaxName, taxListTaxTransTmp.TaxDirection, taxListTaxTransTmp.HideDetailedTaxAmount,
                        dimAttrValueCombo.DisplayValue, mainAccount.MainAccountId, mainAccount.Name, mainAccount.RecId,
                        taxListTaxTransTmp.SourceDocumentLine
                join acctEntry
                     where acctEntry.RecId == acctEntryDistribution.SubledgerJournalAccountEntry &&
                           acctEntry.PostingType == LedgerPostingType::Tax
                join acctDistribution
                     where acctDistribution.RecId == acctEntryDistribution.AccountingDistribution &&
                           acctDistribution.AmountSource == DistributionAmountSource::PrimaryAmount
                join TaxCode, TaxName, TaxDirection, HideDetailedTaxAmount from taxListTaxTransTmp
                     where taxListTaxTransTmp.TaxTrans != 0 &&
                           taxListTaxTransTmp.SourceDocumentLine == acctDistribution.SourceDocumentLine&&
                           taxListTaxTransTmp.SourceDocumentLine &&
                           taxListTaxTransTmp.TaxOrigin != TaxOrigin::Payment &&
                           taxListTaxTransTmp.TaxOrigin != TaxOrigin::TaxReversed &&
                           taxListTaxTransTmp.TaxOrigin != TaxOrigin::CashDisc
                join DisplayValue from dimAttrValueCombo
                    where dimAttrValueCombo.RecId == acctEntry.LedgerDimension
                join MainAccountId, Name, RecId from mainAccount
                    where mainAccount.RecId == dimAttrValueCombo.MainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpForPrimaryTaxTrans</Name>
				<Source><![CDATA[
/// <summary>
    ///    Inserts records into <c>taxListTmp</c> temporary table representing the primary row in the report for a <c>TaxTrans</c> record.
    /// </summary>
    private void insertTmpForPrimaryTaxTrans()
    {
        insert_recordset taxListTmp
        (TaxCode, TaxName, TaxDirection, TaxBaseAmount, TaxBaseQty, TaxInCostPriceMST)
            select TaxCode, TaxName, TaxDirection, sum(TaxBaseAmount), sum(TaxBaseQty), sum(TaxInCostPriceMST) from taxListTaxTransTmp
                group by taxListTaxTransTmp.TaxCode, taxListTaxTransTmp.TaxName, taxListTaxTransTmp.TaxDirection
                where taxListTaxTransTmp.TaxTrans != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic and inserts data to <c>TaxListTmp</c> temporary table.
    /// </summary>
    public void processReport()
    {
        Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
        System.Diagnostics.Stopwatch stopWatch;
        guid identifier;
        NoYes isSuccessfulReport;

        try
        {
            stopWatch = new System.Diagnostics.Stopwatch();
            identifier = newGuid();
            taxEventSourceLog.TaxReportStart(identifier);
            stopWatch.Start();

            taxListTaxTransTmp.setConnection(this.parmUserConnection());

            this.insertTaxListTaxTmpData();
            this.insertTmpForPrimaryTaxTrans();
            this.insertTmpDetailRowsWithSourceDocLine();
            this.insertTmpDetailRowsWithoutSourceDocLine();
            this.updateMainAccountName();

            isSuccessFulReport = NoYes::Yes;
        }
        catch (Exception::Error)
        {
            isSuccessfulReport = NoYes::No;
            throw Exception::Error;
        }
        finally
        {
            stopWatch.Stop();
            taxEventSourceLog.TaxReportStop(identifier, SysCountryRegionCode::countryInfo(), new MenuFunction(menuItemOutputStr(TaxList), MenuItemType::Output).label(), 'TaxList', isSuccessfulReport, stopWatch.ElapsedMilliseconds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMainAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update main account name in the <c>TaxListTmp</c> temporary table based on the MainAccountRecId field
    /// </summary>
    private void updateMainAccountName()
    {
        LanguageId              languageId;
        MainAccountTranslation  mainAccountTranslation;

        languageId = DimensionCache::currentDimensionValueLanguageId();

        if (languageId)
        {
            update_recordSet taxListTaxTransTmp
                setting AccountName = mainAccountTranslation.Name
                where taxListTaxTransTmp.MainAccountRecId != 0
                join Name from mainAccountTranslation
                    where mainAccountTranslation.MainAccount == taxListTaxTransTmp.MainAccountRecId &&
                          mainAccountTranslation.LanguageId == languageId;

            // taxListTmp
            update_recordSet taxListTmp
                setting AccountName = mainAccountTranslation.Name
                where taxListTmp.MainAccountRecId != 0
                join Name from mainAccountTranslation
                    where mainAccountTranslation.MainAccount == taxListTmp.MainAccountRecId &&
                          mainAccountTranslation.LanguageId == languageId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxListTaxTmpData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update records <c>taxListTaxTransTmp</c> in temporary table for a <c>TaxTrans</c> record that is associated with <c>TaxTransGeneralJournalAccountEntry</c> records.
    /// </summary>
    public void updateTaxListTaxTmpData()
    {
        TaxTransGeneralJournalAccountEntry          taxTransGenJourAcctEntry;
        CurrencyCode                                companyInfoCurrencyCode = CompanyInfoHelper::standardCurrency();

        //Set TaxTransGenJrnAcctEntryTaxRelation FK and set Account information
        update_recordSet taxListTaxTransTmp
            setting TaxTransGenJrnAcctEntryTaxRelation = taxTransGenJourAcctEntry.RecId
                where taxListTaxTransTmp.TaxTrans != 0 &&
                      !(taxListTaxTransTmp.SourceDocumentLine != 0 &&
                      taxListTaxTransTmp.TaxOrigin != TaxOrigin::Payment &&
                      taxListTaxTransTmp.TaxOrigin != TaxOrigin::TaxReversed &&
                      taxListTaxTransTmp.TaxOrigin != TaxOrigin::CashDisc)
            join RecId from taxTransGenJourAcctEntry
                where taxTransGenJourAcctEntry.TaxTrans == taxListTaxTransTmp.TaxTrans &&
                      taxTransGenJourAcctEntry.TaxTransRelationship == TaxTransRelationshipType::Tax;

        //For the 100% exempt tax, system dont have tax link for the TaxTransRelationship = Tax in that case we are using the
            // record TaxTransRelationship = TaxInCostPrice
        
        update_recordSet taxListTaxTransTmp
            setting TaxTransGenJrnAcctEntryTaxRelation = taxTransGenJourAcctEntry.RecId
                where taxListTaxTransTmp.TaxTransGenJrnAcctEntryTaxRelation == 0 &&
                    taxListTaxTransTmp.TaxTrans != 0 &&
                    !(taxListTaxTransTmp.SourceDocumentLine != 0 &&
                        taxListTaxTransTmp.TaxOrigin != TaxOrigin::Payment &&
                        taxListTaxTransTmp.TaxOrigin != TaxOrigin::TaxReversed &&
                        taxListTaxTransTmp.TaxOrigin != TaxOrigin::CashDisc)
            join RecId from taxTransGenJourAcctEntry
                where taxTransGenJourAcctEntry.TaxTrans == taxListTaxTransTmp.TaxTrans &&
                      taxTransGenJourAcctEntry.TaxTransRelationship == TaxTransRelationshipType::TaxInCostPrice;

        //Set TaxTransGenJrnAcctEntryTaxPayRelation FK and set Account information
        update_recordSet taxListTaxTransTmp
            setting TaxTransGenJrnAcctEntryTaxPayRelation = taxTransGenJourAcctEntry.RecId
                where taxListTaxTransTmp.TaxTrans != 0 &&
                      !(taxListTaxTransTmp.SourceDocumentLine != 0 &&
                      taxListTaxTransTmp.TaxOrigin != TaxOrigin::Payment &&
                      taxListTaxTransTmp.TaxOrigin != TaxOrigin::TaxReversed &&
                      taxListTaxTransTmp.TaxOrigin != TaxOrigin::CashDisc)
            join RecId from taxTransGenJourAcctEntry
                where taxTransGenJourAcctEntry.TaxTrans == taxListTaxTransTmp.TaxTrans &&
                      taxTransGenJourAcctEntry.TaxTransRelationship == TaxTransRelationshipType::UseTaxPayable;

        this.updateTaxListTaxTmpData_Reverse();

        //Calculate Tax amount from MST amount
        update_recordSet taxListTaxTransTmp
            setting CalculatedTaxAmount = taxListTaxTransTmp.TaxAmount,
                CalculatedUseTaxPayableAmount = taxListTaxTransTmp.TaxAmount
            where taxListTaxTransTmp.TaxTrans != 0 &&
                  (taxListTaxTransTmp.TaxTransGenJrnAcctEntryTaxRelation != 0 ||
                  taxListTaxTransTmp.TaxTransGenJrnAcctEntryTaxPayRelation != 0);

        //Reverse Tax amount if TaxTransGenJrnAcctEntryTaxPayRelation FK exists
        update_recordSet taxListTaxTransTmp
            setting CalculatedUseTaxPayableAmount = taxListTaxTransTmp.CalculatedUseTaxPayableAmount * -1
            join taxTransGenJourAcctEntry
                where taxTransGenJourAcctEntry.RecId == taxListTaxTransTmp.TaxTransGenJrnAcctEntryTaxPayRelation;

        //Set hideDetailedTaxAmount = True if there exists more than one taxTransGenJourAcctEntry with TaxTransRelationshipType::tax
        update_recordSet taxListTaxTransTmp
            setting HideDetailedTaxAmount = NoYes::Yes
            where taxListTaxTransTmp.TaxTransGenJrnAcctEntryTaxRelation != 0
            exists join taxTransGenJourAcctEntry
                where taxTransGenJourAcctEntry.TaxTrans == taxListTaxTransTmp.TaxTrans &&
                      taxTransGenJourAcctEntry.RecId != taxListTaxTransTmp.TaxTransGenJrnAcctEntryTaxRelation &&
                      taxTransGenJourAcctEntry.TaxTransRelationship == TaxTransRelationshipType::Tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchTaxOnOperationsRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// The query for create purch tax on operation range.
    /// </summary>
    /// <param name = "_query">
    /// The buffer of query object.
    /// </param>
    protected void createPurchTaxOnOperationsRange(Query _query)
    {
        _query.dataSourceTable(tableNum(TaxTrans)).addRange(fieldNum(TaxTrans, TaxDirection));
        _query.dataSourceTable(tableNum(TaxTrans)).rangeField(fieldNum(TaxTrans, TaxDirection)).value(strFmt('%1,%2,%3,%4',
                                                                        SysQuery::value(TaxDirection::OutgoingTax),
                                                                        SysQuery::value(TaxDirection::UseTax),
                                                                        SysQuery::value(TaxDirection::TaxExemptPurchase),
                                                                            SysQuery::value(TaxDirection::TaxExemptSales)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxListTaxTmpData_Reverse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverse tax amount.
    /// </summary>
    protected void updateTaxListTaxTmpData_Reverse()
    {
        if (TaxParameters::find().PurchTaxOnOperations)
        {
            update_recordSet taxListTaxTransTmp
                setting TaxAmountCur = taxListTaxTransTmp.TaxAmountCur * -1,
                        TaxAmount = taxListTaxTransTmp.TaxAmount * -1,
                        TaxInCostPriceCur = 0,
                        TaxInCostPriceMST = 0
                where taxListTaxTransTmp.TaxTrans != 0 &&
                    (taxListTaxTransTmp.TaxDirection == TaxDirection::UseTax &&
                    !(taxListTaxTransTmp.Source == TaxModuleType::Voucher &&
                     taxListTaxTransTmp.TaxOrigin == TaxOrigin::Transfer)) &&
                    (taxListTaxTransTmp.TaxTransGenJrnAcctEntryTaxRelation != 0 ||
                    taxListTaxTransTmp.TaxTransGenJrnAcctEntryTaxPayRelation != 0);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>