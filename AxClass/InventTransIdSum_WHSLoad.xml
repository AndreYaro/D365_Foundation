<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransIdSum_WHSLoad</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>InventTransIdSum_WHSLoad</c> class calculates the sum of the <c>InventTrans</c> records based on the load marked on the <c>InventTrans</c> record.
/// </summary>
final internal class InventTransIdSum_WHSLoad extends InventTransIdSum
{
    private WHSLoadId loadId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcSumImplementation</Name>
				<Source><![CDATA[
    protected void calcSumImplementation()
    {
        InventTrans     inventTrans;
        
        if (filterDimensions)
        {
            InventDim       inventDimTest;

            while select sum(PdsCWQty), sum(Qty)
                from inventTrans
                group by StatusIssue, StatusReceipt
                where   inventTrans.InventTransOrigin     == transOriginId
                    &&  inventTrans.LoadId                == loadId
                    && (inventTrans.TransChildType        == childType    || !perChildType)
                    && (inventTrans.TransChildRefId       == childRefId   || !perChildType)                             
                #InventDimExistsJoin(inventTrans.inventDimId, inventDimTest, inventDimCriteria, inventDimParmCriteria)
            {
                this.addInventTransToTotals(inventTrans);
            }
        }
        else
        {
            while select sum(PdsCWQty), sum(Qty)
                from inventTrans
                group by StatusIssue, StatusReceipt
                where   inventTrans.InventTransOrigin     == transOriginId
                    &&  inventTrans.LoadId                == loadId
                    && (inventTrans.TransChildType        == childType    || !perChildType)
                    && (inventTrans.TransChildRefId       == childRefId   || !perChildType)                
            {
                this.addInventTransToTotals(inventTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSLoadId parmLoadId(WHSLoadId _loadId = loadId)
    {
        loadId = _loadId;
        return loadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventTransIdSum_WHSLoad</c> class for a given inventory movement and load.
    /// </summary>
    /// <param name = "_transOriginId">The reference to the inventory movement for which the results are calculated.</param>
    /// <param name = "_loadId">The ID of the load.</param>
    /// <param name = "_perChildType">True if the result should be calculated for the specified child type and reference; otherwise, false.</param>
    /// <param name = "_childType">The type of the inventory reference.</param>
    /// <param name = "_childRefId">The ID of the inventory reference.</param>
    /// <returns>
    /// A new instance of the <c>InventTransIdSum_WHSLoad</c> class.
    /// </returns>
    [Hookable(false)]
    internal static InventTransIdSum_WHSLoad newLoad(
        InventTransOriginId   _transOriginId,
        WHSLoadId             _loadId,
        boolean               _perChildType   = false,
        InventTransChildType  _childType      = InventTransChildType::None,
        InventTransChildRefId _childRefId     = '')
    {
        InventTransIdSum_WHSLoad inventTransIdSum_WHSLoad = InventTransIdSum_WHSLoad::newTransOriginId(_transOriginId);
        inventTransIdSum_WHSLoad.parmLoadId(_loadId);
        inventTransIdSum_WHSLoad.parmPerChildType(_perChildType);
        inventTransIdSum_WHSLoad.parmChildType(_childType);
        inventTransIdSum_WHSLoad.parmChildRefId(_childRefId);

        return inventTransIdSum_WHSLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventTransIdSum_WHSLoad</c> class for a given inventory movement.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventTransIdSum_WHSLoad</c> class.
    /// </returns>
    [Hookable(false)]
    private static InventTransIdSum_WHSLoad newTransOriginId(InventTransOriginId _transOriginId)
    {
        return new InventTransIdSum_WHSLoad(_transOriginId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>