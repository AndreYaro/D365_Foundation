<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>XmlExcelReport_KO3_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints unified form KO-3 to excel.
/// </summary>
public class XmlExcelReport_KO3_RU extends XMLExcelReport_RU implements BatchRetryable, ERIReportPostProcessingSupported
{
    RCashTrans rCashTrans;

    ArrayExtend_RU reimbId;
    ArrayExtend_RU disbId;
    ArrayExtend_RU reimbAmount;
    ArrayExtend_RU disbAmount;
    ArrayExtend_RU reimbNotes;
    ArrayExtend_RU disbNotes;
    ArrayExtend_RU reimbDocId;
    ArrayExtend_RU disbDocId;

    int maxIndex;
    int i;
    int pageNum;

    Counter lineCounter;

    RCashReport_DocJournal cashSlipReport;

    TransDate toDate;
    TransDate fromDate;
    boolean printProlog;
    TitleId personTitle;
    Name personName;
    NoYes printCorrections;
    NoYes printOnSeparatePage;
    NoYes printRCashName;

    LanguageId languageId;

    QueryRun queryRun;

    protected const int CharacterNum = 10;
    protected const int DecimalNum = 2;
    protected const int DecimalSeparator = 2;
    protected const int ThousandSeparator = 0;

    protected const str TitlePage = 'TITLEPAGE';
    protected const str PageHeader = 'PAGEHEADER';
    protected const str Body = 'BODY';

    protected const int Width = 92;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates height of body section.
    /// </summary>
    /// <param name="_bookmark">
    /// Name of section.
    /// </param>
    /// <returns>
    /// Height of body section.
    /// </returns>
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        return max(document.getNamedRangeHeightWrapped('PKONotes', this.getNotesPKO()),
            document.getNamedRangeHeightWrapped('RKONotes', this.getNotesRKO()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>codeOkpo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method to get OKPO code.
    /// </summary>
    /// <returns>
    /// Current company's OKPO Code.
    /// </returns>
    protected Name codeOkpo()
    {
        return CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find(), toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns company name for current company.
    /// </summary>
    /// <returns>
    /// Company name for current company.
    /// </returns>
    protected Name companyName()
    {
        return CompanyInfo::find().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes report.
    /// </summary>
    protected void createReport()
    {
        widthCols = Width;

        curWorkSheetNum = 1;
        this.printRCashJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMainTrans</Name>
				<Source><![CDATA[
    private RCashTrans findMainTrans(RCashTrans _cashTrans)
    {
        RCashTrans cashTransLocal;

        if (_cashTrans.RefRecId && _cashTrans.RefRecId != _cashTrans.RecId)
        {
            cashTransLocal = RCashTrans::findRecId(_cashTrans.RefRecId);
        }

        return cashTransLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReturnValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Update reimbursement and disbursement values based on <c>CashTrans</c> document type.
    /// </summary>
    /// <param name = "_cashTrans"></param>
    /// <param name = "_cashTransInit"></param>
    protected void updateReturnValues(RCashTrans _cashTrans, RCashTrans _cashTransInit)
    {

        switch (_cashTrans.DocType)
        {
            case RCashDocType::ReimbursementSlip :
                if (!reimbId.ArrayScan(_cashTrans.RecId))
                {
                    reimbId.AddElement(_cashTrans.RecId);
                }

                _cashTransInit = this.findMainTrans(_cashTrans);
                reimbDocId.value(reimbId.ArrayScan(_cashTrans.RecId), _cashTransInit ? _cashTransInit.DocId : _cashTrans.DocId);
                reimbAmount.value(reimbId.ArrayScan(_cashTrans.RecId), _cashTrans.AmountCur);
                reimbNotes.value(reimbId.ArrayScan(_cashTrans.RecId), _cashTrans.CurrencyCode + ". " + _cashTrans.Txt);
                break;

            case RCashDocType::DisbursementSlip :
                if (!disbId.ArrayScan(_cashTrans.RecId))
                {
                    disbId.AddElement(_cashTrans.RecId);
                }

                _cashTransInit = this.findMainTrans(_cashTrans);
                disbDocId.value(disbId.ArrayScan(_cashTrans.RecId), _cashTransInit ? _cashTransInit.DocId : _cashTrans.DocId);
                disbAmount.value(disbId.ArrayScan(_cashTrans.RecId), - _cashTrans.AmountCur);
                disbNotes.value(disbId.ArrayScan(_cashTrans.RecId), _cashTrans.CurrencyCode + ". " + _cashTrans.Txt);
                break;

            case RCashDocType::Correction :
                _cashTransInit = this.findMainTrans(_cashTrans);

                if ((!_cashTransInit && _cashTrans.AmountCur <= 0) ||
                        (_cashTransInit && _cashTransInit.DocType == RCashDocType::ReimbursementSlip))
                {
                    if (!reimbId.ArrayScan(_cashTrans.RecId))
                    {
                        reimbId.AddElement(_cashTrans.RecId);
                    }

                    _cashTransInit = this.findMainTrans(_cashTrans);
                    reimbDocId.value(reimbId.ArrayScan(_cashTrans.RecId), _cashTransInit ? _cashTransInit.DocId : _cashTrans.DocId);
                    reimbAmount.value(reimbId.ArrayScan(_cashTrans.RecId), _cashTrans.AmountCur);
                    reimbNotes.value(reimbId.ArrayScan(_cashTrans.RecId), _cashTrans.CurrencyCode + ". " + _cashTrans.Txt);
                }
                else if ((!_cashTransInit && _cashTrans.AmountCur > 0) ||
                        (_cashTransInit && _cashTransInit.DocType == RCashDocType::DisbursementSlip))
                {
                    if (!disbId.ArrayScan(_cashTrans.RecId))
                    {
                        disbId.AddElement(_cashTrans.RecId);
                    }

                    _cashTransInit = this.findMainTrans(_cashTrans);
                    disbDocId.value(disbId.ArrayScan(_cashTrans.RecId), _cashTransInit ? _cashTransInit.DocId : _cashTrans.DocId);
                    disbAmount.value(disbId.ArrayScan(_cashTrans.RecId), - _cashTrans.AmountCur);
                    disbNotes.value(disbId.ArrayScan(_cashTrans.RecId), _cashTrans.CurrencyCode + ". " + _cashTrans.Txt);
                }
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execOnDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report with data on current date.
    /// </summary>
    /// <remarks>
    /// First, data inserted into arrays to determine number of records and appropiate report rendering.
    /// Second, they printed to a report.
    /// </remarks>
    protected void execOnDate()
    {
        RCashTrans tmpCashTrans;
        RCashTrans rCashTransLocal;

        disbId = new ArrayExtend_RU(typeName2Type(extendedTypeStr(recId)));
        reimbId = new ArrayExtend_RU(typeName2Type(extendedTypeStr(recId)));
        disbDocId = new ArrayExtend_RU(Types::String);
        reimbDocId = new ArrayExtend_RU(Types::String);
        disbAmount = new ArrayExtend_RU(Types::Real);
        reimbAmount = new ArrayExtend_RU(Types::Real);
        disbNotes = new ArrayExtend_RU(Types::String);
        reimbNotes = new ArrayExtend_RU(Types::String);

        while select tmpCashTrans
            order by TransDate, DocId, DocType
                where tmpCashTrans.TransDate == rCashTrans.TransDate &&
                    (!rCashTrans.AccountNum || tmpCashTrans.AccountNum == rCashTrans.AccountNum) &&
                    tmpCashTrans.DocType != RCashDocType::ExchRateDifference&&
                    ((printCorrections == NoYes::No && tmpCashTrans.DocType != RCashDocType::Correction) ||
                    printCorrections == NoYes::Yes)
        {
            this.updateReturnValues(tmpCashTrans, rCashTransLocal);
        }

        if (printOnSeparatePage || !pageNum)
        {
            this.newPage();
        }

        maxIndex = max(reimbId.lastIndex(), disbId.lastIndex());

        for (i = 1; i <= maxIndex; i++)
        {
            lineCounter++;

            if (pageHeight - currentHeight < this.calcRangeHeight(Body))
            {
                this.newPage();

                lineCounter = 1;
            }

            this.execute(Body);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Name of the new file.
    /// </summary>
    /// <returns>
    /// Name of the new file.
    /// </returns>
    protected Filename fileName()
    {
        return 'KO3';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Postfix for a new file.
    /// </summary>
    /// <returns>
    /// Postfix for a new file.
    /// </returns>
    protected Filename fileNamePostfix()
    {
        return strFmt("%1_%2",
            date2str(fromDate, 123, 2, 0,2,0,2, DateFlags::None),
            date2str(toDate, 123, 2, 0,2,0,2, DateFlags::None));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'KO3';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills body section with data.
    /// </summary>
    protected void fillBody()
    {
        this.insertValueToSection('PKOTransDate', this.getTransDatePKO());
        this.insertValueToSection('PKONum', this.getNumPKO());
        this.insertValueToSection('PKOSum', this.getSumPKO());
        this.insertValueToSection('PKONotes', this.getNotesPKO());
        this.insertValueToSection('RKOTransDate', this.getTransDateRKO());
        this.insertValueToSection('RKONum', this.getNumRKO());
        this.insertValueToSection('RKOSum', this.getSumRKO());
        this.insertValueToSection('RKONotes', this.getNotesRKO());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills specified section with data.
    /// </summary>
    /// <param name="_bookmark">
    /// Name of section.
    /// </param>
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case TitlePage:
                this.fillTitlePage();
                break;
            case PageHeader:
                this.fillPageHeader();
                break;
            case Body:
                this.fillBody();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page header section with data.
    /// </summary>
    protected void fillPageHeader()
    {
        this.insertValueToSection('CompanyNamePage', this.companyName());
        this.insertValueToSection('PageNum', this.pageNum());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTitlePage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills title page section with data.
    /// </summary>
    protected void fillTitlePage()
    {
        this.insertValueToSection('CompanyName', this.companyName());
        this.insertValueToSection('CodeOKPO', this.codeOkpo());
        this.insertValueToSection('Year', this.yearOfBook());
        this.insertValueToSection('Department', this.getDepartmentName());
        this.insertValueToSection('PersonTitle', personTitle);
        this.insertValueToSection('PersonName', personName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepartmentName</Name>
				<Source><![CDATA[
    /// <summary>
    /// If department name should be filled with RCashAccount data, returns rCashAccount's name, otherwise blank.
    /// </summary>
    /// <returns>
    /// If department name should be filled with RCashAccount data, returns rCashAccount's name, otherwise blank.
    /// </returns>
    protected Description getDepartmentName()
    {
        return printRCashName ? RCashTable::find(cashSlipReport.parmCashAccount()).Name : #blank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesPKO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets notes for current reimbursement slip.
    /// </summary>
    /// <returns>
    /// Notes for current reimbursement slip.
    /// </returns>
    protected TempStr getNotesPKO()
    {
        if (reimbId.lastIndex() >= i)
        {
            return reimbNotes.value(i);
        }
        else
        {
            return "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesRKO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets notes for current disbursement slip.
    /// </summary>
    /// <returns>
    /// Notes for current disbursement slip.
    /// </returns>
    protected TempStr getNotesRKO()
    {
        if (disbId.lastIndex() >= i)
        {
            return disbNotes.value(i);
        }
        else
        {
            return "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumPKO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets doc number for current reimbursement slip.
    /// </summary>
    /// <returns>
    /// Doc number for current reimbursement slip.
    /// </returns>
    protected TempStr getNumPKO()
    {
        if (reimbId.lastIndex() >= i)
        {
            return reimbDocId.value(i);
        }
        else
        {
            return "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumRKO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets doc number for current disbursement slip.
    /// </summary>
    /// <returns>
    /// Doc number for current disbursement slip.
    /// </returns>
    protected TempStr getNumRKO()
    {
        if (disbId.lastIndex() >= i)
        {
            return disbDocId.value(i);
        }
        else
        {
            return "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumPKO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets amount for current reimbursement slip.
    /// </summary>
    /// <returns>
    /// Amount for current reimbursement slip in formatted string.
    /// </returns>
    protected TempStr getSumPKO()
    {
        return reimbId.lastIndex() >= i ? num2str(reimbAmount.value(i), CharacterNum, DecimalNum, DecimalSeparator, ThousandSeparator) : "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumRKO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets amount for current disbursement slip.
    /// </summary>
    /// <returns>
    /// Amount for current disbursement slip in formatted string.
    /// </returns>
    protected TempStr getSumRKO()
    {
        return disbId.lastIndex() >= i ? num2str(disbAmount.value(i), CharacterNum, DecimalNum, DecimalSeparator, ThousandSeparator) : "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDatePKO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets transaction date for current reimbursement slip.
    /// </summary>
    /// <returns>
    /// Transaction date for current reimbursement slip.
    /// </returns>
    protected TransDate getTransDatePKO()
    {
        return reimbId.lastIndex() >= i ? rCashTrans.TransDate : dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDateRKO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets transaction date for current disbursement slip.
    /// </summary>
    /// <returns>
    /// Transaction date for current disbursement slip.
    /// </returns>
    protected TransDate getTransDateRKO()
    {
        return disbId.lastIndex() >= i ? rCashTrans.TransDate : dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes report with parameters specified at caller.
    /// </summary>
    /// <returns>
    /// True, if successful.
    /// </returns>
    public boolean init()
    {
        cashSlipReport = args.caller();

        if (!cashSlipReport)
        {
            throw error(strFmt("@SYS22338",funcName()));
        }

        fromDate = cashSlipReport.parmFromDate();
        toDate = cashSlipReport.parmToDate();
        printProlog = cashSlipReport.parmPrintProlog();
        printCorrections = cashSlipReport.parmPrintCorrections();
        personTitle = cashSlipReport.parmPersonTitle();
        personName = cashSlipReport.parmPersonName();
        printOnSeparatePage = cashSlipReport.parmPrintOnSeparatePage();
        printRCashName = cashSlipReport.parmPrintRCashName();

        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(RCashTrans));

        qbds.addSortField(fieldNum(RCashTrans, TransDate));
        qbds.orderMode(OrderMode::GroupBy);

        if (cashSlipReport.parmCashAccount())
        {
            qbds.addSortField(fieldNum(RCashTrans, AccountNum));
            qbds.addRange(fieldNum(RCashTrans, AccountNum)).value(queryValue(cashSlipReport.parmCashAccount()));
        }

        if (fromDate && toDate)
        {
            qbds.addRange(fieldNum(RCashTrans, TransDate)).value(queryRange(fromDate,toDate));
        }

        Range docTypeRange = queryValue(RCashDocType::ReimbursementSlip);
        docTypeRange = queryRangeConcat(docTypeRange,RCashDocType::DisbursementSlip);

        if (printCorrections)
        {
            docTypeRange = queryRangeConcat(docTypeRange,RCashDocType::Correction);
        }

        qbds.addRange(fieldNum(RCashTrans, DocType)).value(docTypeRange);

        queryRun = new QueryRun(query);

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method initializes map which holds section data.
    /// </summary>
    protected void initSectionMap()
    {
        this.addSection(TitlePage);
        this.addSection(PageHeader);
        this.addSection(Body, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new page of report.
    /// </summary>
    protected void newPage()
    {
        pageNum++;
        currentHeight = 0;
        lineCounter = 0;

        document.insertPageBreak(currentRow, curWorksheetNum);

        this.execute(PageHeader);

        if (!printProlog && pageNum == 1)
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns string containing page number for current page.
    /// </summary>
    /// <returns>
    /// String containing page number for current page.
    /// </returns>
    protected PageNum_RU pageNum()
    {
        return strFmt("@SYS24160", pageNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printRCashJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains main logic of report.
    /// </summary>
    protected void printRCashJournal()
    {
        this.initSectionMap();

        document.setWorksheetSpans(widthCols, curWorksheetNum);

        pageHeight = document.getPageHeight(curWorkSheetNum);

        real bodyHeight = conPeek(mapSections.lookup(Body), #posSectionHeight);
        real pageHeaderHeight = conPeek(mapSections.lookup(PageHeader), #posSectionHeight);

        if (printProlog)
        {
            this.execute(TitlePage);
        }

        int datesCounter;

        while (queryRun.next())
        {
            rCashTrans = queryRun.get(tableNum(RCashTrans));

            this.execOnDate();

            datesCounter++;
        }

        if (!datesCounter)
        {
            this.newPage();
        }

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns name of template for report.
    /// </summary>
    /// <returns>
    /// name of template for report.
    /// </returns>
    protected Filename templateName()
    {
        return resourceStr(RCashKO_3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of cells to be filled with data.
    /// </summary>
    /// <returns>
    /// Number of cells to be filled with data.
    /// </returns>
    protected Counter totalCells()
    {
        const int cellsBody = 8;
        const int cellsOther = 6;

        return SysQuery::countTotal(queryRun) * cellsBody + cellsOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>yearOfBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns year of journal.
    /// </summary>
    /// <returns>
    /// Year of journal.
    /// </returns>
    protected int yearOfBook()
    {
        return year(fromDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static XMLExcelReport_KO3_RU construct()
    {
        return new XMLExcelReport_KO3_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>