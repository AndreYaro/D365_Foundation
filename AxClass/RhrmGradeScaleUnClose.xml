<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmGradeScaleUnClose</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RhrmGradeScaleUnClose extends RunBaseBatch implements BatchRetryable
{
    RHRMGradeScaleTable rhrmGradeScaleTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeScaleStatus</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void changeScaleStatus()
    {
        RHRMGradeScaleTable rhrmGradeScaleTableLocal;
        ;

        rhrmGradeScaleTableLocal = RHRMGradeScaleTable::findByRecId(rhrmGradeScaleTable.RecId, true);

        rhrmGradeScaleTableLocal.Active            = NoYes::No;
        rhrmGradeScaleTableLocal.TransferJournalId = '';
        rhrmGradeScaleTableLocal.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean check()
    {
        boolean                 ret = true;
        RHRMOrderTable          rhrmOrderTable;
        RPayHistory             rPayHistory;
        RHRMStaffListHistory    rhrmStaffListHistory;
        ;

        if (RHRMGradeScaleTable::findActive(rhrmGradeScaleTable.GradeScaleId, maxDate()).StartDate > rhrmGradeScaleTable.StartDate)
        {
            ret = checkFailed(strFmt("@RUP2482", rhrmGradeScaleTable.GradeScaleId, rhrmGradeScaleTable.StartDate));
        }

        rhrmOrderTable = RHRMOrderTable::findJournal(rhrmGradeScaleTable.TransferJournalId);

        if (rhrmOrderTable.Posted)
        {
            ret = checkFailed(strFmt("@RUP2483", rhrmOrderTable.OrderNum, rhrmOrderTable.TransDate));
        }

        select firstonly RecId from rPayHistory
            where rPayHistory.GradeScaleId   == rhrmGradeScaleTable.GradeScaleId &&
                  (rPayHistory.OperationType == RHRMJournalType::Receive         ||
                   rPayHistory.OperationType == RHRMJournalType::Transfer)       &&
                  rPayHistory.StartDate      >= rhrmGradeScaleTable.StartDate;

        if (rPayHistory.RecId)
        {
            ret = checkFailed("@RUP2484");
        }

        select firstonly RecId from rhrmStaffListHistory
            where rhrmStaffListHistory.GradeScaleId == rhrmGradeScaleTable.GradeScaleId &&
                  rhrmStaffListHistory.StartDate    >= rhrmGradeScaleTable.StartDate;

        if (rhrmStaffListHistory.RecId)
        {
            ret = checkFailed("@RUP2485");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTransferOrder</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void deleteTransferOrder()
    {
        RHRMOrderTable  rhrmOrderTable;

        rhrmOrderTable = RHRMOrderTable::findJournal(rhrmGradeScaleTable.TransferJournalId, true);
        rhrmOrderTable.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialog.caption("@RUP2486");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initValue(RHRMGradeScaleTable _gradeScaleTable)
    {
        ;
        rhrmGradeScaleTable = _gradeScaleTable;
        rhrmGradeScaleTable.selectForUpdate(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ;

        if (this.check())
        {
            ttsbegin;
            this.changeScaleStatus();
            this.deleteTransferOrder();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public ClassDescription description()
    {
        return "@RUP2486";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RHRMGradeScaleUnClose gradeScaleUnClose;
        ;

        if (!_args || _args.dataset() != tableNum(RHRMGradeScaleTable))
        {
            throw error(strFmt("@SYS25516", RHRMGradeScaleUnClose::description()));
        }

        gradeScaleUnClose = new RHRMGradeScaleUnClose();
        gradeScaleUnClose.initValue(_args.record());

        if (gradeScaleUnClose.prompt() && gradeScaleUnClose.check())
        {
            gradeScaleUnClose.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>