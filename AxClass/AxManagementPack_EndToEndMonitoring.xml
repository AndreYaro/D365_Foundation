<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AxManagementPack_EndToEndMonitoring</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AxManagementPack_EndToEndMonitoring</c> class holds methods that are used by management pack
///    to determine AOS health.
/// </summary>
public class AxManagementPack_EndToEndMonitoring
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSessionSPID</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the session identifier for a particular user session.
    /// </summary>
    /// <param name="id">
    ///    The session ID.
    /// </param>
    /// <returns>
    ///    The SPID that corresponds to the session.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    SPIDString getSessionSPID(int id)
    {
        xSession sess;
        str spids;

        sess = new xSession(id);
        spids = sess.databaseSpid();

        return spids;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setServerStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the server status to accept or reject client sessions.
    /// </summary>
    /// <param name="aosid">
    ///    The server for which the status is to be set
    /// </param>
    /// <param name="status">
    ///    A Boolean value that indicates whether the server can accept or reject sessions.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void setServerStatus(ServerId aosid, SysServerStatus status)
    {
        SysServerSessions ssc;
        ;
        ssc.ttsbegin();
        select forupdate ssc where ssc.AOSId == aosid && ssc.Status > 0;
        ssc.Status = status;
        ssc.update();
        ssc.ttscommit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>testBasicServiceCall</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the AOS is reachable.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    True.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    int testBasicServiceCall()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>testDatabaseFetch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the AOS is reachable and can be used to fetch data from the database.
    /// </summary>
    /// <param name="aosid">
    ///    The server for which the <c>SysServerConfig</c> table is to be queried.
    /// </param>
    /// <returns>
    ///    true if the database is available; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method makes sure that the data can be accessed by using a service call.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    int testDatabaseFetch(ServerId aosid)
    {
        SysServerConfig ssc;
        ;

        select ssc where ssc.ServerId == aosid;
        if (ssc)
            return true;
        else
            return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
