<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPaySheetEngine_Prepayment</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RPaySheetEngine_Prepayment extends RPaySheetEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSheetChange</Name>
				<Source><![CDATA[
        protected boolean canSheetChange(boolean _needMessage = true)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSheet</Name>
				<Source><![CDATA[
        #AviFiles
    public void createSheet()
    {
        RPayTrans               payTrans;
        RPaySheetTrans          rPaySheetTransLocal;
        RHRMEmplId              tekEmplid, curEmplId;
        Amount                  emplAmount = 0;
        RHRMEmplTable           emplTable;
        RpayHRMOrganizationId   currentHrmOrgId;
        NumberSeq               numberSeqLocal;
        SysOperationProgress    operationProgress;
        RPayTrans               rPayTrans;
        Map                     sheetTableMap = null, tmpMap;
        MapEnumerator           tmpMapEnumerator, sheetTableMapEnumerator;

        void insertOrUpdateSheetTable(RHRMEmplId _emplId = "")
        {
            ttsbegin;
            currentHrmOrgId = _emplId ? RPayHistory::getHistoryLineByDate(_emplId,
                                                                          this.parmSheetTransDate()).HrmOrganizationId : "";
            if (! sheetTableMap.exists(currentHrmOrgId))
            {
                numberSeqLocal = NumberSeq::newGetNum(RPayParameters::numRefSheetNum(),true);
                paySheetTable.clear();
                paySheetTable.Name              = this.description();
                paySheetTable.PaySheetNum       = numberSeqLocal.num();
                paySheetTable.PayPeriod         = endmth(ctrlPayPeriod.dateValue());
                paySheetTable.TransDate         = this.parmSheetTransDate();
                paySheetTable.PaySheetType      = this.paySheetType();
                paySheetTable.PaySheetSost      = RPaySheetSost::NoPaid;
                paySheetTable.HrmOrganisationId = currentHrmOrgId;
                paySheetTable.SumSheet          = - emplAmount;
                paySheetTable.insert();

                tmpMap = new Map(Types::Int64, Types::Class);
                tmpMap.insert(paySheetTable.RecId, numberSeqLocal);
                sheetTableMap.insert(currentHrmOrgId, tmpMap);
            }
            else
            {
                tmpMap           = sheetTableMap.lookup(currentHrmOrgId);
                tmpMapEnumerator = tmpMap.getEnumerator();
                tmpMapEnumerator.moveNext();

                select firstonly forupdate paySheetTable
                    where paySheetTable.HrmOrganisationId == currentHrmOrgId &&
                          paySheetTable.RecId             == tmpMapEnumerator.currentKey();

                 paySheetTable.SumSheet += - emplAmount;
                 paySheetTable.update();
            }
            ttscommit;
        }

        void updateSheetTrans()
        {
            ttsbegin;
            emplAmount = - emplAmount;

            rPaySheetTransLocal.selectForUpdate(true);
            if (emplAmount > 0)
            {
                rPaySheetTransLocal.Amount = emplAmount;
                rPaySheetTransLocal.update();
            }
            else
            {
                while select forupdate rPayTrans
                    where rPayTrans.RefSheetTransRecid == rPaySheetTransLocal.RecId
                {
                    rPayTrans.RefSheetTransRecid = 0;
                    rPayTrans.doUpdate();
                }
                rPaySheetTransLocal.delete();
            }
            ttscommit;
            tekEmplid = payTrans.Emplid;
            emplAmount = 0;
        }

        void insertSheetTrans()
        {
             rPaySheetTransLocal.skipTTSCheck(true);
             rPaySheetTransLocal.selectForUpdate(true);
             rPaySheetTransLocal.SheetTableRecId = paySheetTable.RecId;
             rPaySheetTransLocal.Emplid = tekEmplid;
             rPaySheetTransLocal.BankPayment = RHRMEmplTable::find(tekEmplid).PayBankPayment;
             rPaySheetTransLocal.insert();
        }
        ;

        if (! this.paySheetCreateDialog())
        {
            return;
        }

        sheetTableMap = new Map(Types::String, Types::Class);

        switch (this.parmPaySheetTypeCreate())
        {
            case RpaySheetTypeCreate::Plant:
                insertOrUpdateSheetTable();
                this.createSheetTrans(numberSeqLocal);

                if (paySheetTable.SumSheet == 0)
                {
                    this.deleteSheet();
                    paySheetTable.delete();
                }
                sheetTableDs.research();
                return;

            case RpaySheetTypeCreate::SubDivision:
                 break;
        }

        if (this.paySheetCreateQueryDialog())
        {
            this.updateQuery();

            operationProgress = new SysOperationProgress();
            operationProgress.setCaption("@RUP550");
            operationProgress.setAnimation(#AviUpdate);
            operationProgress.setTotal(SysQuery::countTotal(queryRun));

            queryRun.next();
            payTrans  = queryRun.get(tablenum(RPayTrans));
            emplTable = queryRun.get(tablenum(RHRMEmplTable));
            tekEmplid = payTrans.Emplid;
            curEmplId = payTrans.Emplid;

            insertOrUpdateSheetTable(tekEmplid);
            insertSheetTrans();

            if (RPayTable::find(payTrans.PayCtype).PayChargeType == RPayChargeType::Deduction &&
                payTrans.RefSheetTransRecid == 0 )
            {
                emplAmount += payTrans.Amount;
                payTrans.RefSheetTransRecid = rPaySheetTransLocal.RecId;

                payTrans.skipTTSCheck(true);
                payTrans.selectForUpdate(true);
                payTrans.doUpdate();
            }

            while (queryRun.next())
            {
                payTrans  = queryRun.get(tablenum(RPayTrans));
                emplTable = queryRun.get(tablenum(RHRMEmplTable));
                curEmplId = payTrans.Emplid;

                operationProgress.setText("@RUP372" + emplTable.EmployeeId);
                operationProgress.incCount();

                if (payTrans.Emplid != tekEmplid)
                {
                    insertOrUpdateSheetTable(tekEmplid);
                    updateSheetTrans();
                    insertOrUpdateSheetTable(payTrans.Emplid);
                    insertSheetTrans();
                }

                if (RPayTable::find(payTrans.PayCtype).PayChargeType == RPayChargeType::Deduction &&
                   payTrans.RefSheetTransRecid == 0)
                {
                    emplAmount += payTrans.Amount;
                    payTrans.RefSheetTransRecid = rPaySheetTransLocal.RecId;

                    payTrans.skipTTSCheck(true);
                    payTrans.selectForUpdate(true);
                    payTrans.doUpdate();
                }
            }

            insertOrUpdateSheetTable(curEmplId);
            updateSheetTrans();

            sheetTableMapEnumerator = sheetTableMap.getEnumerator();
            ttsbegin;
            while (sheetTableMapEnumerator.moveNext())
            {
                tmpMap           = sheetTableMapEnumerator.currentValue();
                tmpMapEnumerator = tmpMap.getEnumerator();
                tmpMapEnumerator.moveNext();

                select firstonly forupdate paySheetTable
                    where paySheetTable.RecId == tmpMapEnumerator.currentKey();

                if (paySheetTable.SumSheet)
                {
                    numberSeqLocal = tmpMapEnumerator.currentValue();
                    numberSeqLocal.used();
                }
                else
                {
                    this.deleteSheet();
                    paySheetTable.delete();
                }
            }
            ttscommit;
            sheetTableDs.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSheetTrans</Name>
				<Source><![CDATA[
        #AviFiles
    public void createSheetTrans(NumberSeq _numberSeq = null)
    {
        RPayTrans            payTrans;
        RPaySheetTrans       rPaySheetTrans;
        RHRMEmplId           tekEmplid;
        Amount               emplAmount,sumAmount, taxAmount, taxAmountSum, taxAmountSumTotal;
        SysOperationProgress operationProgress;

        void deleteSheetTrans()
        {
            RPayTrans       rPayTrans;

            update_recordSet rPayTrans
                setting RefSheetTransRecid = 0
                where rPayTrans.RefSheetTransRecid == rPaySheetTrans.RecId;

            rPaySheetTrans.delete();
        }

        if (this.paySheetCreateQueryDialog())
        {
            this.updateQuery();

            operationProgress = new SysOperationProgress();
            operationProgress.setCaption("@RUP550");
            operationProgress.setAnimation(#AviUpdate);
            operationProgress.setTotal(SysQuery::countTotal(queryRun));

            ttsbegin;
            queryRun.next();

            payTrans.selectForUpdate(true);
            payTrans = queryRun.get(tablenum(RPayTrans));

            tekEmplid = payTrans.Emplid;

            if (RPayParameters::payPeriod(tekEmplId) == endMth(ctrlPayPeriod.dateValue()))
            {
                rPaySheetTrans.SheetTableRecId = paySheetTable.RecId;
                rPaySheetTrans.Emplid          = tekEmplid;
                rPaySheetTrans.BankPayment     = RHRMEmplTable::find(tekEmplid).PayBankPayment;
                if (!rPaySheetTrans.validateWrite())
                    throw Exception::Error;
                rPaySheetTrans.insert();

                if (RPayTable::find(payTrans.PayCtype).PayChargeType == RPayChargeType::Deduction &&
                   payTrans.RefSheetTransRecid == 0)
                {
                    taxAmount = this.calcTaxAmount(payTrans);
                    emplAmount      += payTrans.Amount - taxAmount;
                    taxAmountSum    += taxAmount;
                    payTrans.RefSheetTransRecid = rPaySheetTrans.RecId;
                    payTrans.doUpdate();
                }
            }

            operationProgress.setText("@RUP372" + payTrans.Emplid);
            operationProgress.incCount();

            while (queryRun.next())
            {
                payTrans.selectForUpdate(true);
                payTrans = queryRun.get(tablenum(RPayTrans));

                if (payTrans.Emplid != tekEmplid)
                {
                    if (RPayParameters::payPeriod(tekEmplId) == endMth(ctrlPayPeriod.dateValue()))
                    {
                        emplAmount = -emplAmount;
                        if (emplAmount > 0)
                        {
                            taxAmount = this.calcTaxAmount(payTrans);
                            rPaySheetTrans.Amount       = emplAmount - taxAmount;
                            rPaySheetTrans.TaxAmount    = taxAmountSum;
                            if (rPaySheetTrans.TaxAmount != 0)
                            {
                                rPaySheetTrans.BranchId = RPaySheetEngine::getBranchId(rPaySheetTrans.Emplid, endmth(paySheetTable.PayPeriod));
                            }
                            else
                            {
                                rPaySheetTrans.BranchId = '';
                            }
                            rPaySheetTrans.update();
                            sumAmount += emplAmount;
                            taxAmountSumTotal += taxAmountSum;
                        }
                        else
                        {
                            deleteSheetTrans();
                        }
                    }

                    tekEmplid = payTrans.Emplid;
                    emplAmount   = 0;
                    taxAmountSum = 0;

                    if (RPayParameters::payPeriod(tekEmplId) == endMth(ctrlPayPeriod.dateValue()))
                    {
                        rPaySheetTrans.SheetTableRecId = paySheetTable.RecId;
                        rPaySheetTrans.Emplid          = tekEmplid;
                        rPaySheetTrans.BankPayment     = RHRMEmplTable::find(tekEmplid).PayBankPayment;
                        if (!rPaySheetTrans.validateWrite())
                            throw Exception::Error;
                        rPaySheetTrans.insert();
                    }
                }

                if (RPayParameters::payPeriod(tekEmplId) == endMth(ctrlPayPeriod.dateValue()))
                {
                    if (RPayTable::find(payTrans.PayCtype).PayChargeType == RPayChargeType::Deduction &&
                        payTrans.RefSheetTransRecid == 0)
                    {
                        taxAmount = this.calcTaxAmount(payTrans);
                        emplAmount      += payTrans.Amount - taxAmount;
                        taxAmountSum    += taxAmount;

                        payTrans.RefSheetTransRecid = rPaySheetTrans.RecId;
                        payTrans.doUpdate();
                    }
                }

                operationProgress.setText("@RUP372" + payTrans.Emplid);
                operationProgress.incCount();
            }

            if (RPayParameters::payPeriod(tekEmplId) == endMth(ctrlPayPeriod.dateValue()))
            {
                emplAmount = -emplAmount;

                if (emplAmount > 0)
                {
                    rPaySheetTrans.Amount    = emplAmount;
                    rPaySheetTrans.TaxAmount = taxAmountSum;
                    if (rPaySheetTrans.TaxAmount != 0)
                    {
                        rPaySheetTrans.BranchId = RPaySheetEngine::getBranchId(rPaySheetTrans.Emplid, endmth(paySheetTable.PayPeriod));
                    }
                    else
                    {
                        rPaySheetTrans.BranchId = '';
                    }

                    rPaySheetTrans.update();
                    sumAmount += emplAmount;
                    taxAmountSumTotal += taxAmountSum;
                }
                else
                {
                    deleteSheetTrans();
                }
            }

            if (sumAmount > 0)
            {
                paySheetTable.SumSheet = sumAmount;
                sheetTableDs.write();
                sheetTransDs.research();
                if (_numberSeq)
                {
                    _numberSeq.used();
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSheet</Name>
				<Source><![CDATA[
        public void deleteSheet()
    {
        RPaySheetTrans paySheetTrans;
        RPayTrans      rPayTrans;

        update_recordSet rPayTrans
            setting RefSheetTransRecid = 0
                join paySheetTrans
                where paySheetTrans.SheetTableRecId == paySheetTable.RecId
                   && rPayTrans.RefSheetTransRecid == paySheetTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTrans</Name>
				<Source><![CDATA[
        public void deleteTrans()
    {
        RPayTrans       rPayTrans;
        RPaySheetTrans  paySheetTrans;

        super();

        paySheetTrans = sheetTransDs.cursor();

        update_recordSet rPayTrans
            setting RefSheetTransRecid = 0
            where rPayTrans.RefSheetTransRecid == paySheetTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        protected TempStr description()
    {
        return "@RUP752";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaySheetTable</Name>
				<Source><![CDATA[
        public void initPaySheetTable()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(FormRun _formRun)
    {
        super(_formRun);
        ctrlCreate.visible(true);
        ctrlDeleteAll.visible(false);
        ctrlPrint.visible(true);
        ctrlPay.visible(true);
        ctrlSetSumm.visible(false);
        ctrlQuery.visible(false);
        ctrlPaySheetType.visible(false);
        ctrlTax.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paySheetType</Name>
				<Source><![CDATA[
        protected RPaySheetType paySheetType()
    {
        return RPaySheetType::Prepayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormDesign</Name>
				<Source><![CDATA[
        public void updateFormDesign()
    {
        super();
        sheetTableDs.allowCreate(false);
        sheetTransDs.allowCreate(false);
        sheetTransDs.allowEdit(false);
        if (endmth(ctrlPayPeriod.dateValue()) < RPayParameters::payPeriod())
        {
            ctrlCreate.enabled(false);
        }
        else
        {
            ctrlCreate.enabled(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>