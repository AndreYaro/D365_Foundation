<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransferOpeningContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerTransferOpeningContract</c> class is the Data Contract class for the
/// <c>LedgerTransferOpening</c> report.
/// </summary>
[
    DataContractAttribute,
    SysOperationGroupAttribute('FiscalYear', "@SYS13292", '1'),
    SysOperationGroupAttribute('PrintOut', "@SYS12608", '2')
]
public class LedgerTransferOpeningContract implements SysOperationValidatable
{
    TransDate periodEnd;
    TransDate periodNext;
    boolean calledFromMenu;
    OpeningMethod methodStatus;
    OpeningMethod methodOperations;
    MainAccountNum transferResult;
    PeriodStartClosing periodEndInput;
    boolean frontPage;

    // <GEEPL>
    // The following parameters are not shown to the user.
    str hiddenSysVersion;
    DirPartyName userName;
    boolean displayDescription;
    // </GEEPL>

    int session;
    utcDateTime processTimestamp;
    boolean showReportingCurrency = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCalledFromMenu</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter CalledFromMenu.
    /// </summary>
    /// <param name="_calledFromMenu">
    /// The new value of the datacontract parameter CalledFromMenu; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter CalledFromMenu
    /// </returns>
    [DataMemberAttribute('CalledFromMenu')]
    public boolean parmCalledFromMenu(boolean _calledFromMenu = calledFromMenu)
    {
        calledFromMenu = _calledFromMenu;
        return calledFromMenu;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisplayDescription</Name>
				<Source><![CDATA[
    [DataMemberAttribute(identifierStr(DisplayDescription))]
    public boolean parmDisplayDescription(boolean _displayDescription = displayDescription)
    {
        displayDescription = _displayDescription;
        return displayDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFrontPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FrontPage.
    /// </summary>
    /// <param name="_frontPage">
    /// The new value of the datacontract parameter FrontPage; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter FrontPage
    /// </returns>
    [
        DataMemberAttribute('FrontPage'),
        SysOperationLabelAttribute(literalstr("@SYS16146")),
        SysOperationHelpTextAttribute(literalstr("@SYS22141")),
        SysOperationGroupMemberAttribute('PrintOut'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public boolean parmFrontPage(boolean _frontPage = frontPage)
    {
        frontPage = _frontPage;
        return frontPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMethodOperations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter MethodOperations.
    /// </summary>
    /// <param name="_methodOperations">
    /// The new value of the datacontract parameter MethodOperations; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter MethodOperations
    /// </returns>
    [DataMemberAttribute('MethodOperations')]
    public OpeningMethod parmMethodOperations(OpeningMethod _methodOperations = methodOperations)
    {
        methodOperations = _methodOperations;
        return methodOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMethodStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter MethodStatus.
    /// </summary>
    /// <param name="_methodStatus">
    /// The new value of the datacontract parameter MethodStatus; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter MethodStatus
    /// </returns>
    [DataMemberAttribute('MethodStatus')]
    public OpeningMethod parmMethodStatus(OpeningMethod _methodStatus = methodStatus)
    {
        methodStatus = _methodStatus;
        return methodStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter PeriodEnd.
    /// </summary>
    /// <param name="_periodEnd">
    /// The new value of the datacontract parameter PeriodEnd; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter PeriodEnd
    /// </returns>
    [DataMemberAttribute('PeriodEnd')]
    public TransDate parmPeriodEnd(TransDate _periodEnd = periodEnd)
    {
        periodEnd = _periodEnd;
        return periodEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodEndInput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter PeriodEndInput.
    /// </summary>
    /// <param name="_periodEndInput">
    /// The new value of the datacontract parameter PeriodEndInput; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter PeriodEndInput
    /// </returns>
    [
        DataMemberAttribute('PeriodEndInput'),
        SysOperationLabelAttribute(literalstr("@SYS22882")),
        SysOperationGroupMemberAttribute('FiscalYear'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public PeriodStartClosing parmPeriodEndInput(PeriodStartClosing _periodEndInput = periodEndInput)
    {
        periodEndInput = _periodEndInput;
        return periodEndInput;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter PeriodNext.
    /// </summary>
    /// <param name="_periodNext">
    /// The new value of the datacontract parameter PeriodNext; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter PeriodNext
    /// </returns>
    [DataMemberAttribute('PeriodNext')]
    public TransDate parmPeriodNext(TransDate _periodNext = periodNext)
    {
        periodNext = _periodNext;
        return periodNext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessTimestamp</Name>
				<Source><![CDATA[
    [DataMemberAttribute('ProcessTimestamp')]
    public utcDateTime parmProcessTimestamp(utcDateTime _processTimestamp = processTimestamp)
    {
        processTimestamp = _processTimeStamp;

        return processTimestamp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSession</Name>
				<Source><![CDATA[
    [DataMemberAttribute('Session')]
    public int parmSession(int _session = session)
    {
        session = _session;

        return session;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSysVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>HiddenSysVersion</c> parameter of the data contract.
    /// </summary>
    /// <param name="_sysVersion">
    ///    The new value of the <c>SysVersion</c> parameter of the data contract; optional.
    /// </param>
    /// <returns>
    ///    The current value of the <c>HiddenSysVersion</c> parameter of the data contract.
    /// </returns>
    [DataMemberAttribute(identifierStr(SysVersion))]
    public Description255 parmSysVersion(Description255 _sysVersion = hiddenSysVersion)
    {
        hiddenSysVersion = _sysVersion;
        return hiddenSysVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter TransferResult.
    /// </summary>
    /// <param name="_transferResult">
    /// The new value of the datacontract parameter TransferResult; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter TransferResult
    /// </returns>
    [DataMemberAttribute('TransferResult')]
    public MainAccountNum parmTransferResult(MainAccountNum _transferResult = transferResult)
    {
        transferResult = _transferResult;
        return transferResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserName</Name>
				<Source><![CDATA[
    [DataMemberAttribute(identifierStr(UserName))]
    public DirPartyName parmUserName(DirPartyName _userName = userName)
    {
        userName = _userName;
        return userName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the SSRS report parameters.
    /// </summary>
    /// <returns>
    ///    true if validation is successful; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean ret = true;
        FiscalCalendarRecId calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        if (calledFromMenu)
        {
            periodEnd = LedgerFiscalCalendar::findYearEndClosingPeriodByDate(calendarRecId, periodEndInput).StartDate;
        }

        if (ret && !periodEndInput && calledFromMenu)
        {
            ret = checkFailed("@SYS27232");
        }
        if (ret && !periodEnd && calledFromMenu)
        {
            ret = checkFailed("@SYS68959");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hidden parameter for reporting currency column visibility.
    /// </summary>
    /// <param name = "_showReportingCurrency">
    /// boolean value.
    /// </param>
    /// <returns>
    /// Returns True if the current ledger's reporting currency is not blank and it is not same as accounting currency.
    /// </returns>
    [
        DataMemberAttribute('ShowReportingCurrency'),
        SysOperationControlVisibilityAttribute(false)
    ]
    public boolean parmShowReportingCurrency(boolean _showReportingCurrency = showReportingCurrency)
    {
        if (Ledger::reportingCurrency() && Ledger::accountingCurrency() != Ledger::reportingCurrency())
        {
            showReportingCurrency = true;
        }
        else
        {
            showReportingCurrency = _showReportingCurrency;
        }

        return showReportingCurrency;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>