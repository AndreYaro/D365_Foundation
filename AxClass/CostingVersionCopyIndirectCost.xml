<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostingVersionCopyIndirectCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CostingVersionCopyIndirectCost</c> class is used to bulk copy indirect cost rates between
///    costing versions.
/// </summary>
class CostingVersionCopyIndirectCost extends CostingVersionCopy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Bulk copies the prices between costing versions according to the selected parameters.
    /// </summary>
    protected void copy()
    {
        CostSheetCalculationFactor  costSheetCalculationFactor;
        CostSheetCalculationFactor  costSheetCalculationFactorJudgement;
        CostSheetCalculationFactor  oldCostSheetCalculationFactor;

        CostingVersion dsToCostingVersion = CostingVersion::find(toCostingVersion);

        QueryBuildDataSource qbdsCostSheetCalculationFactor = queryRun.query().dataSourceTable(tableNum(CostSheetCalculationFactor));
        if (useFromVersionAsSource)
        {
            SysQuery::findOrCreateRange(qbdsCostSheetCalculationFactor, fieldNum(CostSheetCalculationFactor, VersionId)).value(queryValue(fromCostingVersion));
        }

        qbdsCostSheetCalculationFactor.sortClear();

        qbdsCostSheetCalculationFactor.addSortField(fieldNum(CostSheetCalculationFactor, SheetId));
        qbdsCostSheetCalculationFactor.addSortField(fieldNum(CostSheetCalculationFactor, NodeId));
        qbdsCostSheetCalculationFactor.addSortField(fieldNum(CostSheetCalculationFactor, InventSiteId));
        qbdsCostSheetCalculationFactor.addSortField(fieldNum(CostSheetCalculationFactor, FromDate), SortOrder::Descending);
        qbdsCostSheetCalculationFactor.addSortField(fieldNum(CostSheetCalculationFactor, CostingVersionStatus));
        qbdsCostSheetCalculationFactor.addSortField(fieldNum(CostSheetCalculationFactor, LineId), SortOrder::Descending);

        if (asPerDate != dateNull())
        {
            qbdsCostSheetCalculationFactor.addRange(fieldNum(CostSheetCalculationFactor, FromDate)).value(queryValue(dateNull()) + '..' + queryValue(asPerDate));
        }

        QueryBuildDataSource qbdsCostSheetNodeTable = qbdsCostSheetCalculationFactor.addDataSource(tableNum(CostSheetNodeTable));
        qbdsCostSheetNodeTable.addLink(fieldNum(CostSheetCalculationFactor, SheetId), fieldNum(CostSheetNodeTable, SheetId));
        qbdsCostSheetNodeTable.addLink(fieldNum(CostSheetCalculationFactor, NodeId), fieldNum(CostSheetNodeTable, NodeId));
        qbdsCostSheetNodeTable.joinMode(JoinMode::InnerJoin);

        while (queryRun.next())
        {
            costSheetCalculationFactor  = queryRun.get(tableNum(CostSheetCalculationFactor));

            if (this.skip(oldCostSheetCalculationFactor, costSheetCalculationFactor))
            {
                continue;
            }

            this.initNewCostSheetCalculationFactor(costSheetCalculationFactor, dsToCostingVersion);

            select firstonly costSheetCalculationFactorJudgement
                    where costSheetCalculationFactorJudgement.SheetId               ==   costSheetCalculationFactor.SheetId
                       && costSheetCalculationFactorJudgement.NodeId                ==   costSheetCalculationFactor.NodeId
                       && costSheetCalculationFactorJudgement.InventSiteId          ==   costSheetCalculationFactor.InventSiteId
                       && costSheetCalculationFactorJudgement.FromDate              ==   costSheetCalculationFactor.FromDate
                       && costSheetCalculationFactorJudgement.CostingVersionStatus  ==   costSheetCalculationFactor.CostingVersionStatus
                       && costSheetCalculationFactorJudgement.VersionId             ==   costSheetCalculationFactor.VersionId
                       && costSheetCalculationFactorJudgement.ItemRelation          ==   costSheetCalculationFactor.ItemRelation
                       && costSheetCalculationFactorJudgement.ItemCode              ==   costSheetCalculationFactor.ItemCode;

            if (costSheetCalculationFactorJudgement.RecId == 0)
            {
                costSheetCalculationFactor.insert();
            }

            oldCostSheetCalculationFactor.data(costSheetCalculationFactor);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skip</Name>
				<Source><![CDATA[
    protected boolean skip(CostSheetCalculationFactor _oldCostSheetCalculationFactor, CostSheetCalculationFactor _costSheetCalculationFactor)
    {
        if ( (useFromVersionAsSource
           && !includeActive
           && _costSheetCalculationFactor.CostingVersionStatus != CostingVersionStatus::Pending)
         ||  (!useFromVersionAsSource
           && _costSheetCalculationFactor.CostingVersionStatus == CostingVersionStatus::Pending) )
        {
            return true;
        }

        // If 'asPerDate' is provided, we only need to include one price per the combination of indirect cost code and site
        if (_costSheetCalculationFactor.SheetId        == _oldCostSheetCalculationFactor.SheetId
         && _costSheetCalculationFactor.NodeId         == _oldCostSheetCalculationFactor.NodeId
         && _costSheetCalculationFactor.InventSiteId   == _oldCostSheetCalculationFactor.InventSiteId
         && _costSheetCalculationFactor.ItemRelation   == _oldCostSheetCalculationFactor.ItemRelation
         && _costSheetCalculationFactor.ItemCode       == _oldCostSheetCalculationFactor.ItemCode
         && asPerDate != dateNull())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNewCostSheetCalculationFactor</Name>
				<Source><![CDATA[
    protected void initNewCostSheetCalculationFactor(CostSheetCalculationFactor _costSheetCalculationFactor, CostingVersion _dsToCostingVersion)
    {
        _costSheetCalculationFactor.VersionId = _dsToCostingVersion.VersionId;
        _costSheetCalculationFactor.FromDate = this.calcFromDate(_costSheetCalculationFactor.FromDate);

        CostSheetNodeTable costSheetNodeTable = queryRun.get(tableNum(CostSheetNodeTable));
        if (costSheetNodeTable.Type == CostSheetNodeType::CalculationSurcharge)
        {
            _costSheetCalculationFactor.Percentage = this.calcPrice(_costSheetCalculationFactor.Percentage, priceFactor, priceMarkup);
        }
        else
        {
            _costSheetCalculationFactor.Amount = this.calcPrice(_costSheetCalculationFactor.Amount, priceFactor, priceMarkup);
        }

        _costSheetCalculationFactor.CostingVersionStatus = CostingVersionStatus::Pending;
        _costSheetCalculationFactor.LineId = 0;

        if (changeSite)
        {
            _costSheetCalculationFactor.InventSiteId = toSiteId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogBuildSection_ChangePrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a group to the dialog that represents the variables related to changing the amounts.
    /// </summary>
    /// <param name="_dialog">
    ///    The <c>Dialog</c> object that will display the settings of the bulk copy.
    /// </param>
    protected void dialogBuildSection_ChangePrice(Dialog _dialog /*in-out*/)
    {
        // Change in price
        _dialog.addGroup("@SYS309751");
            // Factor = Factor *
        dialogFieldPriceFactor = _dialog.addFieldValue(extendedTypeStr(Factor), priceFactor, "@SYS309752");
            // +
        dialogFieldPriceMarkup = _dialog.addFieldValue(extendedTypeStr(MarkupAmount), priceMarkup,' + ');
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogBuildSection_SelectionCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a group to the dialog that represents the variables that are related to changing the selection
    ///    criteria.
    /// </summary>
    /// <param name="_dialog">
    ///    The <c>Dialog</c> object that will display the settings of the bulk copy.
    /// </param>
    protected void dialogBuildSection_SelectionCriteria(Dialog _dialog /*in-out*/)
    {
        // Copy from version
        dialogGroupVersion = _dialog.addGroup("@SYS117843");
        dialogGroupVersion.frameOptionButton(FormFrameOptionButton::Radio);
        dialogGroupVersion.optionValue(useFromVersionAsSource);
            // Include active
        dialogFieldIncludeActive = _dialog.addFieldValue(enumStr(NoYes), includeActive, "@SYS117844");
        // Copy from active
        dialogGroupActive = _dialog.addGroup("@SYS117845");
        dialogGroupActive.frameOptionButton(FormFrameOptionButton::Radio);
        dialogGroupActive.optionValue(!useFromVersionAsSource);

        // Display a dummy field to prevent the dialogGroupActive from hiding
        DialogField dummyField = _dialog.addFieldValue(enumStr(InventItemCostingType), InventItemCostingType::Default, "@SYS111755");
        dummyField.allowEdit(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        Query query = new Query();
        query.addDataSource(tableNum(CostSheetNodeTable));
        QueryBuildDataSource qbdsCostSheetNodeTable = query.dataSourceTable(tableNum(CostSheetNodeTable));
        qbdsCostSheetNodeTable.addRange(fieldNum(CostSheetNodeTable, Code));
        QueryBuildRange qbrType = qbdsCostSheetNodeTable.addRange(fieldNum(CostSheetNodeTable, Type));
        qbrType.status(RangeStatus::Locked);
        qbrType.value(SysQueryRangeUtil::queryListRange(CostSheetNodeCalculation::calculationNodeTypeList()));

        QueryBuildDataSource qbdsCostSheetCalculationFactor = qbdsCostSheetNodeTable.addDataSource(tableNum(CostSheetCalculationFactor));
        qbdsCostSheetCalculationFactor.addLink(fieldNum(CostSheetNodeTable, SheetId), fieldNum(CostSheetCalculationFactor, SheetId));
        qbdsCostSheetCalculationFactor.addLink(fieldNum(CostSheetNodeTable, NodeId), fieldNum(CostSheetCalculationFactor, NodeId));
        qbdsCostSheetCalculationFactor.addRange(fieldNum(CostSheetCalculationFactor, VersionId)).status(RangeStatus::Hidden);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostingVersionCopyIndirectCost construct()
    {
        return new CostingVersionCopyIndirectCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS309749";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        CostingVersionCopy costingVersionCopy = CostingVersionCopyIndirectCost::construct();
        costingVersionCopy.getLast();

        if (args == null
         || args.record().RecId == 0
         || args.dataset() != tableNum(CostingVersion))
        {
            throw error(Error::missingFormActiveBuffer(CostingVersionCopyIndirectCost::description(), tableStr(CostingVersion)));
        }

        CostingVersion costingVersion = args.record();
        costingVersionCopy.parmFromCostingVersion(costingVersion.VersionId);
        if (costingVersionCopy.prompt())
        {
            costingVersionCopy.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>