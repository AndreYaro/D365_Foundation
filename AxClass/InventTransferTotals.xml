<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>InventTransferTotals</c> class calculates the transfer order totals.
/// </summary>
public abstract class InventTransferTotals extends TradeTotalsBase
{
    private Common orderTable;
    private TaxAmount taxTotal;
    private boolean calculateCostValue;
    private boolean calculateBalance;
    private boolean calculateQuantities;
    private boolean calculateTaxAmount;
    private boolean taxAmountCalculated;
    private boolean balanceCalculated;
    private boolean costValueCalculated;
    private boolean quantitiesCalculated;
    private InventTransferCalcTax transferCalcTax;
    private Tax tax;
    private InventTransferUpdateType updateType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Instantiates the <c>InventTransferTotals</c> object.
    /// </summary>
    /// <param name="_common">
    ///     The source record.
    /// </param>
    /// <param name="_parmId">
    ///     The parmId, when called from transfer order update.
    /// </param>
    public void new(Common _common, ParmId _parmId = '')
    {
        orderTable = _common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the <c>InventTransferTotals</c> object.
    /// </summary>
    /// <param name="_common">
    ///     The record used to initialize the <c>InventTransferTotals</c> class.
    /// </param>
    /// <param name="_parmId">
    ///     The parmId, when called from transfer order update.
    /// </param>
    /// <returns>
    ///     A new instance of <c>InventTransferTotals</c>.
    /// </returns>
    public static InventTransferTotals construct(Common _common, ParmId _parmId = '')
    {
        switch (_common.TableId)
        {
            case tableNum(InventTransferParmTable):
                return new InventTransferTotals_Parm(_common, _parmId);
            case tableNum(InventTransferTable):
                return new InventTransferTotals_Order(_common, _parmId);
            case tableNum(InventTransferJour):
                return new InventTransferTotals_Invoice(_common, _parmId);
        }

        throw error(Error::wrongUseOfFunction(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordSortedListLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a record sorted list of lines for which the totals object was created.
    /// </summary>
    /// <returns>
    ///     The record sorted list of lines.
    /// </returns>
    public RecordSortedList recordSortedListLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Shows the temporary sales tax form.
    /// </summary>
    /// <param name="_menuItemDisplayStr">
    ///     The menu item that opens the <c>TaxTmpWorkTrans</c> form.
    /// </param>
    /// <param name="_inventTransferTable">
    ///     The <c>InventTransferTable</c> record.
    /// </param>
    /// <param name="_updateType">
    ///     Judges if it is from shipment or not.
    /// </param>
    /// <returns>
    ///     The <c>FormRun</c> object.
    /// </returns>
    public static FormRun showTax(
        str _menuItemDisplayStr,
        InventTransferTable _inventTransferTable,
        InventTransferUpdateType _updateType)
    {
        InventTransferTotals inventTransferTotals = InventTransferTotals::construct(_inventTransferTable);
        inventTransferTotals.setUpdateType(_updateType);
        inventTransferTotals.calc();
        return Tax::showTaxes(_menuItemDisplayStr, inventTransferTotals.tax(), _inventTransferTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructTransferCalcTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the <c>InventTransferCalcTax</c> object.
    /// </summary>
    /// <returns>
    ///     A new instance of <c>InventTransferCalcTax</c>.
    /// </returns>
    protected InventTransferCalcTax constructTransferCalcTax()
    {
        return InventTransferCalcTax::construct(orderTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets or sets the <c>Tax</c> class.
    /// </summary>
    /// <param name="_tax">
    ///     The <c>Tax</c> class.
    /// </param>
    /// <returns>
    ///     The <c>Tax</c> class.
    /// </returns>
    public TaxInventTransfer tax(TaxInventTransfer _tax = tax)
    {
        if (!tax && !_tax)
        {
            this.calculateTotalAmount();
            _tax = tax;
        }

        tax = _tax;
        return tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalAmount</Name>
				<Source><![CDATA[
    private void calculateTotalAmount()
    {
        if (!taxAmountCalculated || !balanceCalculated)
        {
            this.prepareTotalAmountCalculation();
            this.calc();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareBalanceCalculation</Name>
				<Source><![CDATA[
    private void prepareBalanceCalculation()
    {
        calculateBalance = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTaxAmountCalculation</Name>
				<Source><![CDATA[
    private void prepareTaxAmountCalculation()
    {
        calculateTaxAmount = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTotalAmountCalculation</Name>
				<Source><![CDATA[
    private void prepareTotalAmountCalculation()
    {
        this.prepareBalanceCalculation();
        this.prepareTaxAmountCalculation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpdateType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets current invent transfer update type.
    /// </summary>
    /// <returns>
    ///     Invent transfer update type.
    /// </returns>
    public InventTransferUpdateType getUpdateType()
    {
        return this.updateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpdateType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets invent transfer update type.
    /// </summary>
    /// <param name = "_value">
    ///     The invent transfer update type.
    /// </param>
    public void setUpdateType(InventTransferUpdateType _value)
    {
        this.updateType = _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the transfer order totals.
    /// </summary>
    public void calc()
    {
        if (!calculateBalance
            && !balanceCalculated
            && !calculateQuantities
            && !quantitiesCalculated
            && !calculateTaxAmount
            && !taxAmountCalculated)
        {
            calculateBalance = true;
            calculateCostValue = true;
            calculateQuantities = true;
            calculateTaxAmount = true;
        }

        if (calculateTaxAmount && !taxAmountCalculated)
        {
            calculateBalance = true;
        }

        if (calculateBalance)
        {
            calculateBalance = !balanceCalculated;
        }

        if (calculateQuantities)
        {
            calculateQuantities = !quantitiesCalculated;
        }

        if (calculateTaxAmount)
        {
            calculateTaxAmount = !taxAmountCalculated;
        }

        if (!(calculateBalance
            || calculateCostValue
            || calculateQuantities
            || calculateTaxAmount))
        {
            return;
        }

        transferCalcTax = this.constructTransferCalcTax();

        if (calculateTaxAmount)
        {
            taxTotal = transferCalcTax.calcTax(this);
            this.tax(transferCalcTax.tax());
        }

        if (calculateBalance)
        {
            balanceCalculated = true;
        }

        if (calculateTaxAmount)
        {
            taxAmountCalculated = true;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>