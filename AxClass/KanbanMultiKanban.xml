<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanMultiKanban</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanMultiKanban</c> class handles status updates for kanbans. It is based on the
///    <c>RunbaseMultiParm</c> class.
/// </summary>
public abstract class KanbanMultiKanban extends KanbanMulti
{
    KanbanStatusUpdate   standardKanbanStatusUpdate;
    boolean              notifyChangeStatus;

    private KanbanInstrumentationLogger instrumentationLogger;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        standardKanbanStatusUpdate,
        notifyChangeStatus
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the <c>Kanban</c> buffer.
    /// </summary>
    /// <param name="_kanban">
    ///    The <c>Kanban</c> table buffer to check.
    /// </param>
    /// <returns>
    ///    true if the record is valid and the End status update can be performed; otherwise, false.
    /// </returns>
    public boolean checkBuffer(Common _kanban)
    {
        Kanban kanban = _kanban as Kanban;
        Common anyBuffer;

        return !KanbanStatusUpdate::existParmIdKanban(parmId,_kanban.RecId) &&
                 kanban.status().runStatusUpdate(anyBuffer,this.targetKanbanStatus(kanban),true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables any cleanup that must be done after a dialog box has been canceled.
    /// </summary>
    public void cleanupDialog()
    {
        super();
        KanbanStatusUpdate::deleteParameters(this.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the default <c>ParmBuffer</c> map table buffer.
    /// </summary>
    /// <returns>
    ///    A blank <c>KanbanStatusUpdate</c> table buffer.
    /// </returns>
    public ParmBuffer defaultParmBuffer()
    {
        KanbanStatusUpdate   kanbanStatusUpdate;
        return kanbanStatusUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the form that is used to specify parameters for the status update.
    /// </summary>
    /// <returns>
    ///    The name of the form.
    /// </returns>
    public FormName formName()
    {
        return formStr(KanbanStatusUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>Kanban</c> record.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    The <c>Kanban</c> table buffer.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The provided record ID is not valid.
    /// </exception>
    protected Kanban initKanban(RecId  _recId,boolean _forUpdate = false)
    {
        Kanban kanban = Kanban::find(_recId,_forUpdate);

        if (!kanban.checkValid(kanban.RecId))
        {
            throw error("@SYS18447");
        }

        return kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>ParmBuffer</c> record buffer.
    /// </summary>
    /// <param name="_kanbanStatusUpdate">
    ///    A <c>ParmBuffer</c> mapped record buffer.
    /// </param>
    public void initParmBuffer(ParmBuffer _kanbanStatusUpdate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes and inserts a record into the <c>KanbanStatusUpdate</c> table.
    /// </summary>
    /// <param name="_common">
    ///    A <c>Kanban</c> record that is used to initialize the record.
    /// </param>
    /// <param name="_parmBuffer">
    ///    The <c>KanbanStatusUpdate</c> record to insert.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The kanban cannot be updated to the requested status, or the provided table buffers are unexpected.
    ///    The method must be called by using a <c>Kanban</c> and a <c>KanbanStatusUpdate</c> buffer.
    /// </exception>
    public void insert(Common _common,ParmBuffer _parmBuffer)
    {
        Kanban              kanban;
        KanbanStatusUpdate  kanbanStatusUpdate;

        if (_common.TableId     == tableNum(Kanban) &&
            _parmBuffer.TableId == tableNum(KanbanStatusUpdate))
        {
            kanban             = _common;
            kanbanStatusUpdate = _parmBuffer;
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        LeanKanbanStatus targetKanbanStatus = this.targetKanbanStatus(kanban);

        KanbanStatus kanbanStatus = kanban.status();

        if ((!this.isStatusReset() &&
            kanbanStatus.isStatusUpdateAllowed(targetKanbanStatus)) ||
            (this.isStatusReset() &&
            kanbanStatus.isStatusResetAllowed(kanbanStatusUpdate, targetKanbanStatus)))
        {
            if (!parmId)
            {
                RunBaseMultiParm::initParm(this);
            }

            super(kanban,kanbanStatusUpdate);

            kanbanStatusUpdate = kanbanStatus.initStatusUpdate(kanbanStatusUpdate,targetKanbanStatus);
            kanbanStatusUpdate.insert();
        }
        else
        {
            throw error(strFmt("@SYS134896",kanban.KanbanId,targetKanbanStatus));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the highest line number in the <c>KanbanStatusUpdate</c> record for the current parameter
    ///    ID.
    /// </summary>
    /// <returns>
    ///    The highest line number.
    /// </returns>
    public LineNum lastLineNum()
    {
        return KanbanStatusUpdate::lastLineNum(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNotifyChangeStatus</Name>
				<Source><![CDATA[
        public boolean parmNotifyChangeStatus(boolean _notifyChangeStatus = notifyChangeStatus)
    {
        notifyChangeStatus = _notifyChangeStatus;
        return notifyChangeStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardParm</Name>
				<Source><![CDATA[
        public ParmBuffer parmStandardParm(ParmBuffer _standardKanbanStatusUpdate = standardKanbanStatusUpdate)
    {
        standardKanbanStatusUpdate = _standardKanbanStatusUpdate;
        return standardKanbanStatusUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the status update.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The validation failed.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict occurred and was not recovered.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict occurred.
    /// </exception>
    public void run()
    {
        this.initStatusUpdate();

        // dialog if needed
        boolean doRun = this.parmId()
                && (!this.mustUseDialog()
                ||  this.prompt());

        // run
        if (doRun)
        {
            if (! this.validate())
            {
                throw error("@SYS18447");
            }
            
            this.preRun();

            KanbanStatusUpdate kanbanStatusUpdate = this.setParmBuffer();

            while (kanbanStatusUpdate)
            {
                boolean isStatusReset = this.isStatusReset();

                using (var a = this.logger().kanbanActivities().runKanbanStatusUpdate(kanbanStatusUpdate.WantedStatus, isStatusReset))
                {
                    try
                    {
                        if (isStatusReset)
                        {
                            this.runStatusReset(kanbanStatusUpdate);
                        }
                        else
                        {
                            this.runStatus(kanbanStatusUpdate);
                        }

                        next kanbanStatusUpdate;
                    }
                    catch (Exception::Error)
                    {
                        // In case of error in one of the status updates,
                        // continue processing the remaining ones
                        next kanbanStatusUpdate;
                    }
                }
            }

            this.postRun();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logger</Name>
				<Source><![CDATA[
    private KanbanInstrumentationLogger logger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = KanbanInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the status update for a <c>KanbanStatusUpdate</c> record.
    /// </summary>
    /// <param name="_kanbanStatusUpdate">
    ///    The <c>KanbanStatusUpdate</c> record.
    /// </param>
    protected void runStatus(KanbanStatusUpdate _kanbanStatusUpdate)
    {
        this.initKanban(_kanbanStatusUpdate.Kanban).status().runStatusUpdate(_kanbanStatusUpdate,
                                                                             _kanbanStatusUpdate.Type,
                                                                             false,
                                                                             this,
                                                                             notifyChangeStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatusReset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the status reset for a <c>KanbanStatusUpdate</c> record.
    /// </summary>
    /// <param name="_kanbanStatusUpdate">
    ///    The <c>KanbanStatusUpdate</c> record.
    /// </param>
    protected void runStatusReset(KanbanStatusUpdate _kanbanStatusUpdate)
    {
        this.initKanban(_kanbanStatusUpdate.Kanban).status().runStatusReset(_kanbanStatusUpdate,
                                                                            _kanbanStatusUpdate.WantedStatus,
                                                                            false,
                                                                            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>targetKanbanStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a <c>LeanKanbanStatus</c> enumeration value that represents the target status.
    /// </summary>
    /// <param name="_kanban">
    ///    A <c>Kanban</c> table buffer; optional.
    /// </param>
    /// <returns>
    ///    The target status.
    /// </returns>
    /// <remarks>
    ///    The base class method is abstract.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    Because no <c>Kanban</c> table buffer is passed.
    /// </exception>
    public LeanKanbanStatus targetKanbanStatus(Kanban _kanban = null)
    {
        if (!_kanban)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return this.isStatusReset() ? _kanban.status().prevStatus() : _kanban.status().nextStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        boolean     ret;
        Integer     version     = conPeek(_packedClass,1);
        container   base;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList,base] = _packedClass;
                ret = super(base);
                break;
            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        public static ClassDescription description()
    {
        return "@SYS131645";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the class.
    /// </summary>
    /// <param name="_args">
    ///    A <c>Args</c> object to use to initiate the <c>KanbanMultiKanban</c> class instance.
    /// </param>
    /// <param name="_leanKanbanStatus">
    ///    A <c>LeanKanbanStatus</c> enumeration value used to initiate the <c>KanbanMultiKanban</c> class
    ///    instance.
    /// </param>
    /// <param name="_reset">
    ///    A Boolean value that indicates whether a reset object must be initiated; optional.
    /// </param>
    /// <returns>
    ///    An instance of the <c>KanbanMultiKanban</c> class.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="_leanKanbanStatus" /> parameter indicates the <c>KanbanMultiKanban</c> class
    ///    that is initialized.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The method was incorrectly called.
    /// </exception>
    public static KanbanMultiKanban newArgs(
        Args             _args,
        LeanKanbanStatus _leanKanbanStatus,
        boolean          _reset = false)
    {
        container           kanbanRecords;

        if (xGlobal::hasClient())
        {
            kanbanRecords = KanbanMulti::selectedFormRecordsToContainer(_args);
        }
        else if (_args && _args.record())
        {
            Common common = _args.record();
            kanbanRecords = [common];
        }
        else
        {
            kanbanRecords = conNull();
        }

        KanbanMultiKanban kanbanMultiKanban = KanbanMultiKanban::newParameters(_leanKanbanStatus,
                                                                               _reset,KanbanMulti::kanbanMultiMode(_args),
                                                                               _args.parm(),
                                                                               null,
                                                                               kanbanRecords);

        return kanbanMultiKanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCallerBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>KanbanMultiKanban</c> class.
    /// </summary>
    /// <param name="_leanKanbanStatus">
    ///    A <c>LeanKanbanStatus</c> enumeration value to use to initialize the class.
    /// </param>
    /// <param name="_callerBuffer">
    ///    A <c>Kanban</c> record to use to initialize the class.
    /// </param>
    /// <param name="_silent">
    ///    A Boolean value that indicates whether processing must occur silently; optional.
    /// </param>
    /// <param name="_caller">
    ///    An <c>Object</c> that represents the caller.
    /// </param>
    /// <param name="_reset">
    ///    A Boolean value that indicates whether a reset object must be initialized.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>KanbanMultiKanban</c> class.
    /// </returns>
    /// <remarks>
    ///    The caller should be the calling form if one is available. Messages will be sent to this form,
    ///    provided that a message board is present.
    /// </remarks>
    public static KanbanMultiKanban newCallerBuffer(
        LeanKanbanStatus _leanKanbanStatus,
        Kanban           _callerBuffer,
        boolean          _silent = true,
        Object           _caller = null,
        boolean          _reset  = false)
    {
        KanbanMultiKanban kanbanMultiKanban = KanbanMultiKanban::newParameters(_leanKanbanStatus,
                                                                               _reset,
                                                                               _silent ? KanbanMultiMode::Silent : KanbanMultiMode::Form,
                                                                               '',
                                                                               _callerBuffer,
                                                                               conNull());

        return kanbanMultiKanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCallerListBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>KanbanMultiKanban</c> class.
    /// </summary>
    /// <param name="_leanKanbanStatus">
    ///    A <c>LeanKanbanStatus</c> enumeration value used to initiate the class.
    /// </param>
    /// <param name="_callerListBuffer">
    ///    A list of the records to use to initiate the class.
    /// </param>
    /// <param name="_silent">
    ///    A Boolean value that indicates whether the records that are processed must be processed silently;
    ///    optional.
    /// </param>
    /// <param name="_reset">
    ///    A Boolean value that indicates if a reset object must be initiated.
    /// </param>
    /// <returns>
    ///    A new <c>KanbanMultiKanban</c> class instance.
    /// </returns>
    /// <remarks>
    ///    The list must be a list of the kanban records.The caller must be a calling form if one is
    ///    available. This form will be used to send messages to, provided that a message board is present.
    /// </remarks>
    public static KanbanMultiKanban newCallerListBuffer(
        LeanKanbanStatus _leanKanbanStatus,
        List             _callerListBuffer,
        boolean          _silent = true,
        boolean          _reset  = false)
    {
        KanbanMultiKanban kanbanMultiKanban = KanbanMultiKanban::newParameters(_leanKanbanStatus,
                                                                               _reset,
                                                                               _silent ? KanbanMultiMode::Silent : KanbanMultiMode::Form,
                                                                               '',
                                                                               null,
                                                                               _callerListBuffer.pack());

        return kanbanMultiKanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the class.
    /// </summary>
    /// <param name="_leanKanbanStatus">
    ///    A <c>LeanKanbanJobStatus</c> enumeration value used to initiate the <c>KanbanMultiKanban</c>
    ///    instance.
    /// </param>
    /// <param name="_reset">
    ///    A Boolean value that indicates whether a reset object must be initiated.
    /// </param>
    /// <param name="_kanbanMultiMode">
    ///    A <c>KanbanMultiMode</c> enumeration value.
    /// </param>
    /// <param name="_parmId">
    ///    A <c>ParmId</c> enumeration value.
    /// </param>
    /// <param name="_callerBuffer">
    ///    A <c>Kanban</c> record buffer.
    /// </param>
    /// <param name="_containerRecords">
    ///    A container of the record buffers, or null elements that must be either a <c>Kanban</c> or
    ///    <c>KanbanJob</c> record.
    /// </param>
    /// <returns>
    ///    An instance of the <c>KanbanMultiKanban</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    Cannot instantiate the object that corresponds to the given <c>LeanKanbanStatus</c> enumeration
    ///    value.
    /// </exception>
    protected static KanbanMultiKanban newParameters(
        LeanKanbanStatus    _leanKanbanStatus,
        boolean             _reset,
        KanbanMultiMode     _kanbanMultiMode,
        ParmId              _parmId,
        Kanban              _callerBuffer,
        container           _containerRecords)
    {
        KanbanMultiKanban  kanbanMultiKanban;

        if (_reset)
        {
            switch (_leanKanbanStatus)
            {
                case LeanKanbanStatus::NotAssigned:
                    kanbanMultiKanban = KanbanMultiKanbanResetNotAssigned::construct();
                    break;
                default:
                    kanbanMultiKanban = KanbanMultiKanbanReset::construct();
                    break;
            }
        }
        else
        {
            switch (_leanKanbanStatus)
            {
                case LeanKanbanStatus::Assigned:
                    kanbanMultiKanban = KanbanMultiKanbanAssign::construct();
                    break;
                case LeanKanbanStatus::Received:
                    kanbanMultiKanban = KanbanMultiKanbanReceive::construct();
                    break;
                case LeanKanbanStatus::Emptied:
                    kanbanMultiKanban = KanbanMultiKanbanEmpty::construct();
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        kanbanMultiKanban.parmkanbanMultiMode(_kanbanMultiMode);
        kanbanMultiKanban.parmId(_parmId);
        kanbanMultiKanban.parmCallerBuffer(_callerBuffer);
        kanbanMultiKanban.parmCallerContainerBuffer(_containerRecords);

        return kanbanMultiKanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParmId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>KanbanMultiKanban</c> class.
    /// </summary>
    /// <param name="_leanKanbanStatus">
    ///    A <c>LeanKanbanStatus</c> enumeration value to use to initiate the class.
    /// </param>
    /// <param name="_parmId">
    ///    A <c>ParmId</c> string value to use to initiate the class.
    /// </param>
    /// <param name="_silent">
    ///    A Boolean value that indicates whether processing must happen silently; optional.
    /// </param>
    /// <param name="_reset">
    ///    A Boolean value that indicates if a reset object must be initiated.
    /// </param>
    /// <returns>
    ///    A new <c>KanbanMultiKanban</c> instance.
    /// </returns>
    public static KanbanMultiKanban newParmId(
        LeanKanbanStatus _leanKanbanStatus,
        ParmId           _parmId,
        boolean          _silent = true,
        boolean          _reset  = false)
    {
        KanbanMultiKanban kanbanMultiKanban = KanbanMultiKanban::newParameters(_leanKanbanStatus,
                                                                               _reset,
                                                                               _silent ? KanbanMultiMode::Silent : KanbanMultiMode::Form,
                                                                               _parmId,
                                                                               null,
                                                                               conNull());

        return kanbanMultiKanban;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>