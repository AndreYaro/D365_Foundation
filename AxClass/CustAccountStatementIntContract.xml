<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAccountStatementIntContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for <c>CustAccountStatementInt</c> SSRS report.
/// </summary>
/// <remarks>
/// This is the Data Contract class for the <c>CustAccountStatementInt</c> SSRS Report.
/// </remarks>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classStr(CustAccountStatementIntUIBuilder), SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly),
    SysOperationGroupAttribute('Criteria', "@SYS1046", '1')
]
class CustAccountStatementIntContract implements SysOperationValidatable
    , SysOperationInitializable
{
    FromDate fromDate;
    ToDate toDate;
    TransDate assessmentDate;
    DiscCurrency details;
    boolean onlyOpen;
    boolean offsetAccount;
    boolean incReversed;
    boolean sPaySchedule;
    boolean withoutTrans;
    boolean newPage;
    BankLCBankDocumentType bankLCBankDocumentType;
    BankLCExportEnable bankLCExportEnable;

    List billingClassification;
    NoYes inclTransWithNoBillingClass;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data contract values.
    /// </summary>
    public void initialize()
    {
        billingClassification = new List(Types::String);

        if (!CustParameters::isBillingClassificationEnabled())
        {
            billingClassification.addEnd(SysLabel::labelId2String(literalStr("@GLS223107")));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssessmentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter AssessmentDate.
    /// </summary>
    /// <param name="_assessmentDate">
    /// The new value of the datacontract parameter AssessmentDate; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter AssessmentDate.
    /// </returns>
    [
        DataMemberAttribute('AssessmentDate'),
        SysOperationLabelAttribute(literalStr("@SYS67320")),
        SysOperationHelpTextAttribute(literalStr("@SYS67321")),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('3')
    ]
    public TransDate parmAssessmentDate(TransDate _assessmentDate = assessmentDate)
    {
        assessmentDate = _assessmentDate;
        return assessmentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankLCBankDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter BankLCBankDocumentType.
    /// </summary>
    /// <param name="_bankLCBankDocumentType">
    /// The new value of the datacontract parameter BankLCBankDocumentType; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter BankLCBankDocumentType.
    /// </returns>
    [
        DataMemberAttribute('BankLCBankDocumentType'),
        SysOperationLabelAttribute(literalStr("@SYS313726")),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('11')
    ]
    public BankLCBankDocumentType parmBankLCBankDocumentType(BankLCBankDocumentType _bankLCBankDocumentType = bankLCBankDocumentType)
    {
        bankLCBankDocumentType = _bankLCBankDocumentType;
        return bankLCBankDocumentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankLCExportEnable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter BankLCExportEnable.
    /// </summary>
    /// <param name="_bankLCExportEnable">
    /// The new value of the datacontract parameter BankLCExportEnable; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter BankLCExportEnable.
    /// </returns>
    [
        DataMemberAttribute('BankLCExportEnable'),
        SysOperationLabelAttribute(literalStr("@SYS313655")),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('12')
    ]
    public boolean parmBankLCExportEnable(boolean _bankLCExportEnable = bankLCExportEnable)
    {
        bankLCExportEnable = _bankLCExportEnable;
        return bankLCExportEnable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBillingClassification</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('BillingClassification'),
        SysOperationLabelAttribute(literalStr("@SPS371")),
        SysOperationHelpTextAttribute(literalStr("@SPS677")),
        SysOperationDisplayOrderAttribute('0'),
        AifCollectionTypeAttribute('return', Types::String)
    ]
    public List parmBillingClassification(List _billingClassification = billingClassification)
    {
        billingClassification = _billingClassification;

        return billingClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Details.
    /// </summary>
    /// <param name="_details">
    /// The new value of the datacontract parameter Details; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter Details.
    /// </returns>
    [
        DataMemberAttribute('Details'),
        SysOperationLabelAttribute(literalStr("@SYS80118")),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('4')
    ]
    public DiscCurrency parmDetails(DiscCurrency _details = details)
    {
        details = _details;
        return details;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FromDate.
    /// </summary>
    /// <param name="_fromDate">
    /// The new value of the datacontract parameter FromDate; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter FromDate.
    /// </returns>
    [
        DataMemberAttribute('FromDate'),
        SysOperationHelpTextAttribute(literalStr("@SYS26930")),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInclTransWithNoBillingClass</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('InclTransWithNoBillingClass'),
        SysOperationLabelAttribute(literalStr("@SPS691")),
        SysOperationHelpTextAttribute(literalStr("@SPS1009")),
        SysOperationDisplayOrderAttribute('0')
    ]
    public NoYes parmInclTransWithNoBillingClass(NoYes _inclTransWithNoBillingClass = inclTransWithNoBillingClass)
    {
        inclTransWithNoBillingClass = _inclTransWithNoBillingClass;

        return inclTransWithNoBillingClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncReversed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter IncReversed.
    /// </summary>
    /// <param name="_incReversed">
    /// The new value of the datacontract parameter IncReversed; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter IncReversed.
    /// </returns>
    [
        DataMemberAttribute('IncReversed'),
        SysOperationLabelAttribute(literalStr("@SYS78625")),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('6')
    ]
    public boolean parmIncReversed(boolean _incReversed = incReversed)
    {
        incReversed = _incReversed;
        return incReversed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter NewPage.
    /// </summary>
    /// <param name="_newPage">
    /// The new value of the datacontract parameter NewPage; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter NewPage.
    /// </returns>
    [
        DataMemberAttribute('NewPage'),
        SysOperationLabelAttribute(literalStr("@SYS15349")),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('9')
    ]
    public boolean parmNewPage(boolean _newPage = newPage)
    {
        newPage = _newPage;
        return newPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffsetAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter OffsetAccount.
    /// </summary>
    /// <param name="_offsetAccount">
    /// The new value of the datacontract parameter OffsetAccount; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter OffsetAccount.
    /// </returns>
    [
        DataMemberAttribute('OffsetAccount'),
        SysOperationLabelAttribute(literalStr("@SYS11162")),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('10')
    ]
    public boolean parmOffsetAccount(boolean _offsetAccount = offsetAccount)
    {
        offsetAccount = _offsetAccount;
        return offsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter OnlyOpen.
    /// </summary>
    /// <param name="_onlyOpen">
    /// The new value of the datacontract parameter OnlyOpen; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter OnlyOpen.
    /// </returns>
    [
        DataMemberAttribute('OnlyOpen'),
        SysOperationLabelAttribute(literalStr("@SYS6319")),
        SysOperationHelpTextAttribute(literalStr("@SYS24962")),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('5')
    ]
    public boolean parmOnlyOpen(boolean _onlyOpen = onlyOpen)
    {
        onlyOpen = _onlyOpen;
        return onlyOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSPaySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter SPaySchedule.
    /// </summary>
    /// <param name="_sPaySchedule">
    /// The new value of the datacontract parameter SPaySchedule; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter SPaySchedule.
    /// </returns>
    [
        DataMemberAttribute('SPaySchedule'),
        SysOperationLabelAttribute(literalStr("@SYS67749")),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('7')
    ]
    public boolean parmSPaySchedule(boolean _sPaySchedule = sPaySchedule)
    {
        sPaySchedule = _sPaySchedule;
        return sPaySchedule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ToDate.
    /// </summary>
    /// <param name="_toDate">
    /// The new value of the datacontract parameter ToDate; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter ToDate.
    /// </returns>
    [
        DataMemberAttribute('ToDate'),
        SysOperationHelpTextAttribute(literalStr("@SYS26929")),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWithoutTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter WithoutTrans.
    /// </summary>
    /// <param name="_withoutTrans">
    /// The new value of the datacontract parameter WithoutTrans; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter WithoutTrans.
    /// </returns>
    [
        DataMemberAttribute('WithoutTrans'),
        SysOperationLabelAttribute(literalStr("@SYS7749")),
        SysOperationGroupMemberAttribute('Criteria'),
        SysOperationDisplayOrderAttribute('8')
    ]
    public boolean parmWithoutTrans(boolean _withoutTrans = withoutTrans)
    {
        withoutTrans = _withoutTrans;
        return withoutTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the dialog values for errors.
    /// </summary>
    /// <returns>
    /// false if an error has occurred in the dialog values; otherwise true .
    /// </returns>
    /// <remarks>
    /// The dialog values are handled through the contract.
    /// </remarks>
    public boolean validate()
    {
        boolean valid = true;

        if (this.parmFromDate() > this.parmToDate())
        {
            valid = checkFailed("@SYS16982");
        }

        if (valid && (!BrazilParameters::isEnabled()))
        {
            valid = CustBillingClassificationReportManager::validate(billingClassification, inclTransWithNoBillingClass);
        }

        return valid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>