<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsCWUpdateRegister</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is an abstact class that is meant to be extended and have the method overriden.
/// </summary>
abstract class PdsCWUpdateRegister
{
    InventMovement          movement;
    InventTransWMS_Register inventTransWMS;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method performs the standard funtionality for new.  Overriden to make protected.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// set/get the buffer that the class is operating on. This method must be overloaded by derived classes
    /// </summary>
    /// <param name="_buffer">Record that the class should operate on. If the call is intended to just get the current
    /// buffer, the parameter must be omitted.</param>
    /// <returns>The record the class is operating on</returns>
    public abstract Common parmBuffer(Common _buffer = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransWMS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and returns the global InventTransWMS object.
    /// </summary>
    /// <param name="_inventTransWMS">InventTransWMS class object used to update register.</param>
    /// <returns>Returns the global object of type InventTransWMS.</returns>
    public InventTransWMS_Register parmInventTransWMS(
        InventTransWMS_Register _inventTransWMS = null)
    {
        if (!prmisdefault(_inventTransWMS))
        {
            inventTransWMS = _inventTransWMS;
        }

        return inventTransWMS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and returns the global movement object.
    /// </summary>
    /// <param name="_movement">InventMovement class object used to update register.</param>
    /// <returns>Returns the global object movement of type InventMovement.</returns>
    public InventMovement parmMovement(InventMovement _movement = null)
    {
        if (!prmisdefault(_movement))
        {
            movement = _movement;
        }

        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// Abstract method to be overridden by deriving classes. The method should update the buffer that the class is operating on, with the
    /// registered quantity.
    /// </summary>
    public abstract void updateRegister()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is a new method which determines which class type to use and returns a new instance of that child class.
    /// </summary>
    /// <param name="_buffer">Tables buffer used to determine return type, and used in child class.</param>
    /// <param name="_movement">Movement passed on to child class.</param>
    /// <returns>New instance of PdsCWUpdateRegister child class.</returns>
    public static PdsCWUpdateRegister newBuffer(
        Common          _buffer,
        InventMovement  _movement)
    {
        PdsCWUpdateRegister updateRegister = null;

        switch (_buffer.TableId)
        {
            case tablenum(ProdParmReportFinished) :
                updateRegister
                    = PdsCWUpdateRegister_ProdParmReportFinish::construct();
                break;
            default :
                return null;
        }

        updateRegister.parmMovement(_movement);
        updateRegister.parmBuffer(_buffer);

        return updateRegister;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>