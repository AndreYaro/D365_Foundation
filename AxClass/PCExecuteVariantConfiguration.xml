<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcExecuteVariantConfiguration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCExecuteVariantConfiguration</c> class is responsible for starting the configurator.
/// </summary>
class PcExecuteVariantConfiguration
{
    Common                          sourceLine;
    PCVariantConfiguration          variantConfiguration;       // the one that exists

    PCProductConfigurationModel     productConfigurationModel;
    PCProductModelVersion           productModelVersion;
    PCRuntimeMode                   runtimeMode;
    InventDim                       demandInventDim;
    InventDim                       supplyInventDim;
    InventTable                     item;
    PCConstraintBasedConfigurationName  configurationName;
    PCConfigurationState            configurationState;
    EcoResProductMaster             productMaster;

    PCBackEndConfiguration          backEndConfiguration;

    PCExecuteSupplyLocation         executeSupplyLocation;
    EcoResConfigurationName         appliedSupplyConfigurationName;
    PCValidationNumberSequence      validationNumberSequence;
    PCXmlParseConfigurationInstance xmlParseConfigurationInstance;
    PCRuntimePriceBreakdownUpdater  priceBreakdownUpdater;

    PCConfigurationProductVariantFactory configurationProductVariantFactory;
    PCConfigurationProductVariantDelete  configurationProductVariantDelete;
    PCRuntimeConfiguratorFormFactory     runtimeConfiguratorFormFactory;

    PCSourceDocumentLineUtility     sourceDocumentLineUtility;

    List    releaseLegalEntities;

    BOMId           bomId;
    RouteId         routeId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the delivery date for the current configuration.
    /// </summary>
    /// <returns>
    ///    The calculated date.
    /// </returns>
    public date calculateDeliveryDate()
    {
        date calculateDeliveryDate;

        try
        {
            ttsbegin;
            this.runBackEndConfiguration();

            calculateDeliveryDate = this.runDeliveryDateCalculation();

            ttsabort;
        }
        catch
        {
            //we will abort anyway
            error("@SYS136738");
        }

        this.postCalculationCleanUp();

        return calculateDeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the price for the current configuration.
    /// </summary>
    /// <returns>
    ///    The calculated price.
    /// </returns>
    public real calculatePrice()
    {
        PriceCur calculatedPrice;

        try
        {
            ttsbegin;

            this.runBackEndConfiguration();
            calculatedPrice = this.runPriceCalculation();

            ttsabort;
        }
        catch
        {
            //we will abort anyway
            error("@SYS21990");
        }


        this.postCalculationCleanUp();

        return calculatedPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculationArgumentSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up an argument instance required for calculation of price or ship date.
    /// </summary>
    /// <returns>
    /// An initialized argument instance.
    /// </returns>
    protected args calculationArgumentSetup()
    {
        Args    args = new Args();
        Common  calculationLineRecord;

        PCCalculateInitializeSourceLine calculateInitializeSourceLine = PCCalculateInitializeSourceLine::construct();

        calculationLineRecord = calculateInitializeSourceLine.getSourceLineForCalculation(sourceLine);

        args.record(calculationLineRecord);

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructExecuteSupplyLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>PCExecuteSupplyLocation</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PCExecuteSupplyLocation</c> class.
    /// </returns>
    /// <remarks>
    /// This method is the factory method for constructing an instance of the
    /// <c>PCExecuteSupplyLocation</c> class.
    /// </remarks>
    protected PCExecuteSupplyLocation constructExecuteSupplyLocation()
    {
        return PCExecuteSupplyLocation::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSupplyInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the supply inventory dimension.
    /// </summary>
    /// <returns>
    /// An inventory dimension.
    /// </returns>
    public InventDim getSupplyInventDim()
    {
        return supplyInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSourceDocumentUtility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes inventory dimensions.
    /// </summary>
    protected void initializeSourceDocumentUtility()
    {
        sourceDocumentLineUtility.initialize(sourceLine);

        demandInventDim = sourceDocumentLineUtility.getInventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConfigurationReuse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the configuration is reused or not.
    /// </summary>
    /// <returns>
    /// true if the configuration is reused; otherwise, false.
    /// </returns>
    protected boolean isConfigurationReuse()
    {
        return backEndConfiguration.isConfigurationReused();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMultiCompanyScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the configurator is running in a multiple company scenario.
    /// </summary>
    /// <returns>
    /// true if the configuration is running in a multiple company scenario; otherwise, false.
    /// </returns>
    public boolean isMultiCompanyScenario()
    {
        return demandInventDim.company() != supplyInventDim.company();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        executeSupplyLocation               = PCExecuteSupplyLocation::construct();
        sourceDocumentLineUtility           = PCSourceDocumentLineUtility::construct();
        validationNumberSequence            = PCValidationNumberSequence::construct();
        backEndConfiguration                = PCBackEndConfiguration::construct();
        xmlParseConfigurationInstance       = PCXmlParseConfigurationInstance::construct();
        configurationProductVariantFactory  = PCConfigurationProductVariantFactory::construct();
        configurationProductVariantDelete   = PCConfigurationProductVariantDelete::construct();
        releaseLegalEntities                = new List(Types::Record);
        runtimeConfiguratorFormFactory      = PCRuntimeConfiguratorFormFactory::construct();
        priceBreakdownUpdater               = PCRuntimePriceBreakdownUpdater::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBackEndConfiguration</Name>
				<Source><![CDATA[
    public PCBackEndConfiguration parmBackEndConfiguration(PCBackEndConfiguration _backEndConfiguration = backEndConfiguration)
    {
        backEndConfiguration = _backEndConfiguration;

        return backEndConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfigurationName</Name>
				<Source><![CDATA[
    public PCConstraintBasedConfigurationName parmConfigurationName(PCConstraintBasedConfigurationName _configurationName = configurationName)
    {
        configurationName = _configurationName;

        return configurationName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfigurationProductVariantDelete</Name>
				<Source><![CDATA[
    public PCConfigurationProductVariantDelete parmConfigurationProductVariantDelete(PCConfigurationProductVariantDelete _configurationProductVariantDelete = configurationProductVariantDelete)
    {
        configurationProductVariantDelete = _configurationProductVariantDelete;

        return configurationProductVariantDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfigurationProductVariantFactory</Name>
				<Source><![CDATA[
    public PCConfigurationProductVariantFactory parmConfigurationProductVariantFactory(PCConfigurationProductVariantFactory _configurationProductVariantFactory = configurationProductVariantFactory)
    {
        configurationProductVariantFactory = _configurationProductVariantFactory;

        return configurationProductVariantFactory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfigurationState</Name>
				<Source><![CDATA[
    public Object parmConfigurationState(Object _configurationState = configurationState)
    {
        configurationState = _configurationState;

        return configurationState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExecuteSupplyLocation</Name>
				<Source><![CDATA[
    public PCExecuteSupplyLocation parmExecuteSupplyLocation(PCExecuteSupplyLocation _executeSupplyLocation = executeSupplyLocation)
    {
        executeSupplyLocation = _executeSupplyLocation;

        return executeSupplyLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItem</Name>
				<Source><![CDATA[
    public InventTable parmItem(InventTable _item = item)
    {
        item = _item;

        return item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductConfigurationModel</Name>
				<Source><![CDATA[
    public PCProductConfigurationModel parmProductConfigurationModel(PCProductConfigurationModel _productConfigurationModel=productConfigurationModel)
    {
        productConfigurationModel = _productConfigurationModel;

        return productConfigurationModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductMaster</Name>
				<Source><![CDATA[
    public EcoResProductMaster parmProductMaster(EcoResProductMaster _productMaster = productMaster)
    {
        productMaster = _productMaster;

        return productMaster;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseLegalEntities</Name>
				<Source><![CDATA[
    public List parmReleaseLegalEntities(List _releaseLegalEntities = releaseLegalEntities)
    {
        releaseLegalEntities = _releaseLegalEntities;

        return releaseLegalEntities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRuntimeConfiguratorFormFactory</Name>
				<Source><![CDATA[
    public PCRuntimeConfiguratorFormFactory parmRuntimeConfiguratorFormFactory(PCRuntimeConfiguratorFormFactory _runtimeConfiguratorFormFactory = runtimeConfiguratorFormFactory)
    {
        runtimeConfiguratorFormFactory = _runtimeConfiguratorFormFactory;

        return runtimeConfiguratorFormFactory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentLineUtility</Name>
				<Source><![CDATA[
    public PCSourceDocumentLineUtility parmSourceDocumentLineUtility(PCSourceDocumentLineUtility _sourceDocumentLineUtility = sourceDocumentLineUtility)
    {
        sourceDocumentLineUtility = _sourceDocumentLineUtility;

        return sourceDocumentLineUtility;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceLine</Name>
				<Source><![CDATA[
    public Common parmSourceLine(Common _sourceLine = sourceLine)
    {
        sourceLine = _sourceLine;

        return sourceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidationNumberSequence</Name>
				<Source><![CDATA[
    public PCValidationNumberSequence parmValidationNumberSequence(PCValidationNumberSequence _validationNumberSequence = validationNumberSequence)
    {
        validationNumberSequence = _validationNumberSequence;

        return validationNumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVariantConfiguration</Name>
				<Source><![CDATA[
    public PCVariantConfiguration parmVariantConfiguration(PCVariantConfiguration _variantConfiguration = variantConfiguration)
    {
        variantConfiguration = _variantConfiguration;

        return variantConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmXmlParseConfigurationInstance</Name>
				<Source><![CDATA[
    public PCXmlParseConfigurationInstance parmXmlParseConfigurationInstance(PCXmlParseConfigurationInstance _xmlParseConfigurationInstance = xmlParseConfigurationInstance)
    {
        xmlParseConfigurationInstance = _xmlParseConfigurationInstance;

        return xmlParseConfigurationInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCalculationCleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up number sequences used during calculation of price or ship date.
    /// </summary>
    protected void postCalculationCleanUp()
    {
        //re-reading the sales line, as we aborted
        sourceLine.reread();

        // do not release numbersequence values if the configuration is reused, because no value will have been pulled from the numbersequence
        if (!this.isConfigurationReuse())
        {
            validationNumberSequence.release(bomId, routeId, configurationName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBackEndConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the back-end configuration.
    /// </summary>
    protected void runBackEndConfiguration()
    {
        this.setupBackendConfiguration();

        //at this point we need to run the actual "post" configuration
        backEndConfiguration.run();

        this.updateDemandSourceDocumentLine();

        this.updatePriceBreakDownWithVariantReference();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupBackendConfiguration</Name>
				<Source><![CDATA[
    protected void setupBackendConfiguration()
    {
        backEndConfiguration.setup(
                variantConfiguration,
                productModelVersion,
                item.ItemId,
                configurationName,
                supplyInventDim,
                demandInventDim,
                configurationState.parmPrice(),
                configurationState.parmDeliveryDate(),
                null,
                PCRuntimeLibrary::docuGenerateNoYes(),
                configurationState.parmBoundValues(),
                sourceLine,
                productConfigurationModel,
                sourceDocumentLineUtility.getInventQuantity(),
                sourceDocumentLineUtility.getIssueDate());

       backEndConfiguration.setupReleaseLegalEntities(this.releaseLegalEntities);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDeliveryDateCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the calculation of the delivery date.
    /// </summary>
    /// <returns>
    /// A calculated delivery date.
    /// </returns>
    public date runDeliveryDateCalculation()
    {
        date                    calculateDeliveryDate;
        Args                    args;
        ReqCalcExplodeSales_PC reqCalcExplodeSales_PC;

        args = this.calculationArgumentSetup();

        reqCalcExplodeSales_PC = ReqCalcExplodeSales_PC::construct(args);
        calculateDeliveryDate   = reqCalcExplodeSales_PC.forecastDeliveryDate(args.record());

        return calculateDeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runMain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the constraint-based configurator.
    /// </summary>
    protected void runMain()
    {
        this.setupToRunOrCalculate();

        // change company to the supply company to make sure BOM and Route information is loaded from the supply company
        changecompany(supplyInventDim.company())
        {
            runtimeConfiguratorFormFactory.parmIsRunningMultiCompany(this.isMultiCompanyScenario());
            runtimeConfiguratorFormFactory.parmDemandLegalEntity(demandInventDim.company());
            runtimeConfiguratorFormFactory.parmProductConfiguration(variantConfiguration);
            runtimeConfiguratorFormFactory.parmPriceMethod(productModelVersion.PriceMethod);
            runtimeConfiguratorFormFactory.parmSourceDocumentLine(sourceLine);
            runtimeConfiguratorFormFactory.parmRuntimeMode(runtimeMode);
            runtimeConfiguratorFormFactory.parmCaller(this);
            runtimeConfiguratorFormFactory.parmItemId(item.ItemId);
            runtimeConfiguratorFormFactory.parmProductName(EcoResProductTranslation::findByProductLanguage(productMaster.RecId, SystemParameters::getSystemLanguageId()).Name);

            configurationState = runtimeConfiguratorFormFactory.createAndRun(productConfigurationModel);
        }

        if (configurationState.parmIsClosedOK())
        {
            this.saveConfiguration();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPriceCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the bill of material based price calculation.
    /// </summary>
    /// <returns>
    /// A calculated price.
    /// </returns>
    protected AmountCur runPriceCalculation()
    {
        Args            args = this.calculationArgumentSetup();
        BomCalcJob_PC   bomCalc = BomCalcJob_PC::construct(args);
        bomCalc.runOperation();

        BOMCalcItem     bomCalcItem = bomCalc.bomCalcItem();

        PriceCur        calculatedPrice;

        if (bomCalcItem)
        {
            PriceCalcId calculatedPriceId = bomCalcItem.parmPriceCalcId();

            calculatedPrice = ExchangeRateHelper::curPrice(
                                    EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                        bomCalc.parmItemId(), 
                                        bomCalc.parmInventDimId(), 
                                        BOMCalcTable::find(calculatedPriceId).salesPricePcs(),
                                        bomCalc.parmSalesUnit(),
                                        item.inventUnitId(),
                                        NoYes::Yes,
                                        NoYes::No),
                                    bomCalc.parmCurrencyCode());
        }

        return calculatedPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the current configuration.
    /// </summary>
    public void saveConfiguration()
    {
        this.runBackEndConfiguration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRuntimeMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the runtime mode.
    /// </summary>
    protected void setRuntimeMode()
    {
        //fetch variant
        variantConfiguration = PCVariantConfiguration::findByProductMasterAndProductDimensions(
            productMaster,
            configurationName,
            '' /* size dim is not supported */,
            '' /* color dim is not supported */,
            '' /* style dim is not supported */,
            '' /* version dim is not supported */);

        //determine runtime mode
        if (variantConfiguration)
        {
            if (sourceDocumentLineUtility.isSourceLineEditable())
            {
                runtimeMode = PCRuntimeMode::EditVariant;
            }
            else
            {
                runtimeMode = PCRuntimeMode::ViewVariant;
            }
        }
        else
        {
            //we need to signal the post configuration that this record is to be deleted in case of reuse.
            runtimeMode = PCRuntimeMode::NewVariant;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupProductModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up the product model to execute.
    /// </summary>
    protected void setupProductModel()
    {
        EcoResProductName   productName;

        //validate active versions
        productModelVersion = PCProductModelVersion::findApprovedActiveVersion(productMaster.RecId);

        if (!productModelVersion)
        {
            productName = EcoResProductTranslation::findByProductLanguage(productMaster.RecId, SystemParameters::getSystemLanguageId()).Name;
            throw error(strFmt("@SCM:PCExecuteVariantConfigurationMissingVersion", productName));
        }

        //fetch the model
        productConfigurationModel = productModelVersion.getProductConfigurationModel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupSupplyLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the supply location based on the intercompany chain based on the related Purchase order, 
    /// if any, otherwise based on the configuration item's setup.
    /// </summary>
    protected void setupSupplyLocation()
    {
        InventDim initSupplyInventDim = sourceDocumentLineUtility.getInventDim();
        CompanyId supplyCompanyId = curExt(); 
        PurchLine purchLine = sourceLine as PurchLine;

        if (purchLine.RecId)

        {
            PurchTable purchTable = PurchTable::find(purchLine.PurchId);

            if (purchTable.RecId && purchTable.InterCompanyOrder && purchTable.InterCompanyCompanyId)
            {
                supplyCompanyId = purchTable.InterCompanyCompanyId;
            
                changecompany(supplyCompanyId)
                {
                    initSupplyInventDim = InventDim::findOrCreateBlank();
                }
            }
        }
        
        changecompany(supplyCompanyId)
        {
            // get the supply location based on item coverage
            supplyInventDim = executeSupplyLocation.GetSupplyLocation(
                                                    item.ItemId,
                                                    initSupplyInventDim,
                                                    sourceDocumentLineUtility.getInventQuantity(),
                                                    sourceDocumentLineUtility.getIssueDate(),
                                                    releaseLegalEntities);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpToExecute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes this instance before executing the configuration.
    /// </summary>
    /// <param name="_sourceLine">
    ///    The source line.
    /// </param>
    /// <param name="_itemId">
    ///    The ID of the item associated with a configuration.
    /// </param>
    /// <param name="_configurationName">
    ///    The name of the configuration.
    /// </param>
    public void setUpToExecute(Common _sourceLine, ItemId _itemId, EcoResConfigurationName _configurationName = '')
    {
        InventTable inventTable;

        inventTable = InventTable::find(_itemId);

        this.parmSourceLine(_sourceLine);
        this.parmConfigurationName(_configurationName);
        this.parmItem(inventTable);
        this.parmProductMaster(EcoResProductMaster::find(inventTable.Product));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupToRunOrCalculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up this instance as needed before it runs or calculates a configuration.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// The source line is not valid, there is no active product version, or a number sequence was
    /// incorrectly set up.
    /// </exception>
    public void setupToRunOrCalculate()
    {
        this.initializeSourceDocumentUtility();

        this.validateNumberSequence();

        this.setupProductModel();

        this.setupSupplyLocation();

        this.setRuntimeMode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDemandInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the demand inventory dimension.
    /// </summary>
    /// <param name="_configurationName">
    /// A configuration name.
    /// </param>
    protected void updateDemandInventDim(EcoResConfigurationName _configurationName)
    {
        demandInventDim.ConfigId = _configurationName;
        demandInventDim = InventDim::findOrCreate(demandInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDemandSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a source document line.
    /// </summary>
    protected void updateDemandSourceDocumentLine()
    {
        // this needs to be called in the supply company scope
        EcoResDistinctProductVariant distinctProductVariant;
        changecompany(supplyInventDim.company())
        {
            distinctProductVariant = backEndConfiguration.getAppliedDistinctProductVariant();
        }

        changecompany(demandInventDim.company())
        {
            demandInventDim.ConfigId = backEndConfiguration.getAppliedConfigurationName();

            // in the multi company scenario, the inventDim should always exists, in a single company the inventDim may not exists if it is a
            // multi site scenario
            if (this.isMultiCompanyScenario())
            {
                configurationProductVariantFactory.ensureVariantIsReleased(distinctProductVariant);
            }

            demandInventDim = InventDim::findOrCreate(demandInventDim);

            ttsbegin;

            if (!this.isMultiCompanyScenario())
            {
                bomId   = backEndConfiguration.getGeneratedBOMId();
                routeId = backEndConfiguration.getGeneratedRouteId();
            }

            sourceLine = sourceDocumentLineUtility.updateLineDetails(
                sourceLine,
                bomId,
                routeId,
                backEndConfiguration.getPrice(),
                configurationState.parmDeliveryDate(),
                demandInventDim.InventDimId);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSupplyInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the supply inventory dimension.
    /// </summary>
    /// <param name="_configurationName">A configuration name.</param>
    protected void updateSupplyInventDim(EcoResConfigurationName _configurationName)
    {
        changecompany(supplyInventDim.company())
        {
            supplyInventDim.ConfigId = _configurationName;
            supplyInventDim = InventDim::findOrCreate(supplyInventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the product configuration number sequence is set up.
    /// </summary>
    protected void validateNumberSequence()
    {
        //validate that the setup for numberSequence is correct
        if (!validationNumberSequence.validateSetup())
        {
            //the error messages are already included in the infolog
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCExecuteVariantConfiguration construct()
    {
        return new PCExecuteVariantConfiguration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes a variant configuration for the specified arguments.
    /// </summary>
    /// <param name="_sourceLine">
    ///    The item line that contains the configuration and the configured item.
    /// </param>
    /// <param name="_itemId">
    ///    The item ID of the item in the item line.
    /// </param>
    /// <param name="_configurationName">
    ///    The name of the current configuration that is attached to the item line.
    /// </param>
    /// <param name="_skipRuntime">
    ///    A Boolean value that indicates whether the configuration section should be skipped; optional.
    /// </param>
    /// <returns>
    ///    An instance of the <c>PCExecuteVariantConfiguration</c> class.
    /// </returns>
    public static PCExecuteVariantConfiguration execute(Common _sourceLine, ItemId _itemId, EcoResConfigurationName _configurationName = '', boolean _skipRuntime = false)
    {
        PCExecuteVariantConfiguration   executeVariantConfiguration;
        
        if(PCExecuteVariantConfiguration::addSourceLineCaptionToErrorContext())
        {
            setPrefix(strFmt("@SYS4160062", _sourceLine.caption()));
        }
        
        if (PCExecuteVariantConfiguration::skipReqItemTableCircularityCheck() || ReqItemTable::checkCircularity(_itemId))
        {
            executeVariantConfiguration = PCExecuteVariantConfiguration::construct();

            // Pass in a copy of the buffer since the form does not support dyna link
            executeVariantConfiguration.setUpToExecute(_sourceLine.data(), _itemId, _configurationName);

            if (!_skipRuntime)
            {
                executeVariantConfiguration.runMain();
            }

            return executeVariantConfiguration;
        }
        else
        {
            throw error("@SYS4160063");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceBreakdownUpdater</Name>
				<Source><![CDATA[
    public PCRuntimePriceBreakdownUpdater parmPriceBreakdownUpdater(PCRuntimePriceBreakdownUpdater _priceBreakdownUpdater = priceBreakdownUpdater)
    {
        priceBreakdownUpdater = _priceBreakdownUpdater;

        return priceBreakdownUpdater;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriceBreakDownWithVariantReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the price break down with a product variant reference.
    /// </summary>
    protected void updatePriceBreakDownWithVariantReference()
    {
        if (PCRuntimePriceMode::supportsAttributeBasedPricing(productModelVersion.PriceMethod, PCRuntimeMode::NewVariant, sourceLine, true))
        {
            changecompany(demandInventDim.company())
            {
                priceBreakdownUpdater.updateConfigurationReference(sourceLine, backEndConfiguration.getAppliedConfigurationName());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipReqItemTableCircularityCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to skip the circularity check for the ReqItemTable.
    /// </summary>
    /// <returns>
    ///  true if circularity check should be skipped; otherwise false
    /// </returns>
    protected static boolean skipReqItemTableCircularityCheck()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSourceLineCaptionToErrorContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add source line caption to error context.
    /// </summary>
    /// <returns>
    ///  true to add source line caption to error context; otherwise false
    /// </returns>
    protected static boolean addSourceLineCaptionToErrorContext()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>