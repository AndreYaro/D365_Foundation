<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CzCustVendTransOpenFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CzCustVendTransOpenFilter extends RunBase
{
    SalesId         salesId;
    PurchId         purchId;

    boolean         skipPrompt;
    CustVendAC      custVendAccount;

    DialogField     dlgSalesPurchId;
    str             filterStr;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        purchId,
        salesId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
        public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        _dialog.formRun().controlMethodOverload(true);
        _dialog.formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterStr</Name>
				<Source><![CDATA[
        protected str filterStr()
    {
        if (skipPrompt || this.prompt())
        {
            this.run();
        }

        return filterStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFilterStr</Name>
				<Source><![CDATA[
        abstract protected void findFilterStr()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [ #CurrentVersion, #CurrentList ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendAccount</Name>
				<Source><![CDATA[
        protected CustVendAC parmCustVendAccount(CustVendAC _custVendAccount)
    {
        custVendAccount = _custVendAccount;
        return custVendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchId</Name>
				<Source><![CDATA[
        protected PurchId parmPurchId(PurchId _purchId = purchId)
    {
        if (purchId != _purchId)
        {
            purchId = _purchId;

            if (purchId)
            {
                skipPrompt  = true;
            }
        }

        return purchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesId</Name>
				<Source><![CDATA[
        protected SalesId parmSalesId(SalesId _salesId = salesId)
    {
        if (salesId != _salesId)
        {
            salesId = _salesId;

            if (salesId)
            {
                skipPrompt  = true;
            }
        }

        return salesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        if (! this.validate())
            throw error("@GLS111730");

        this.findFilterStr();

        if (!filterStr)
            filterStr = SysQuery::valueEmptyString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromCallerArgs</Name>
				<Source><![CDATA[
        private static CzCustVendTransOpenFilter constructFromCallerArgs(Object _caller, Common _record)
    {
        CzCustVendTransOpenFilter   custVendTransOpenFilter;

        if (_caller && _record)
        {
            switch (_record.TableId)
            {
                case tablenum(CustTable):
                case tablenum(SalesTable):
                    custVendTransOpenFilter = CzCustTransOpenFilter::newFromCommon(_record);
                    break;

                case tablenum(VendTable):
                case tablenum(PurchTable):
                    custVendTransOpenFilter = CzVendTransOpenFilter::newFromCommon(_record);
                    break;

                case tablenum(LedgerJournalTrans):
                    if (_caller.name() == formstr(CustOpenTrans))
                    {
                        custVendTransOpenFilter = CzCustTransOpenFilter::newFromCommon(_record);
                    }
                    else if (_caller.name() == formstr(VendOpenTrans))
                    {
                        custVendTransOpenFilter = CzVendTransOpenFilter::newFromCommon(_record);
                    }
                    break;

                case tablenum(CustInvoiceTable):
                    custVendTransOpenFilter = CzCustInvoiceFilter::newFromCommon(_record);
                    break;
            }
        }

        return custVendTransOpenFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filter</Name>
				<Source><![CDATA[
        public static str filter(Object _caller, Common _record)
    {
        CzCustVendTransOpenFilter custVendTransOpenFilter = CzCustVendTransOpenFilter::constructFromCallerArgs(_caller, _record);
        str recIdStr;

        if (custVendTransOpenFilter)
        {
            recIdStr = custVendTransOpenFilter.filterStr();
        }

        return recIdStr;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>