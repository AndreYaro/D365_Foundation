<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryTransactionWorkController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventoryTransactionWorkController</c> class controls the interaction of the warehouse work execution 
/// with the warehouse inventory transaction stack.
/// </summary>
public class WHSInventoryTransactionWorkController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>moveFullItemSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the given <c>WHSWorkInventTrans</c> record in full qty.
    /// </summary>
    /// <param name = "_workInventTrans">The <c>WHSWorkInventTrans</c> record to execute.</param>
    /// <param name = "_inventDimFrom">Inventory dimensions to pick from.</param>
    /// <param name = "_inventDimTo">Inventory dimensions to put to.</param>
    /// <param name = "_updateWorkInventTransDimBeforeUpdate">Specifies if dimensions on the <c>WHSWorkInventTrans</c> record should be updated.</param>
    public void moveFullItemSet(
        WHSWorkInventTrans  _workInventTrans,
        InventDim           _inventDimFrom,
        InventDim           _inventDimTo,
        boolean             _updateWorkInventTransDimBeforeUpdate = true)
    {
        var itemSetToMove = WHSInventoryItemSetDescriptor::newFromValues(
            _workInventTrans.ItemSetId,
            _workInventTrans.Qty,
            _workInventTrans.TransactionWeight);

        this.moveSpecificItemSet(
            _workInventTrans,
            itemSetToMove,
            itemSetToMove,
            WHSInventoryStorageDimensions::newFromInventDim(_inventDimFrom),
            WHSInventoryStorageDimensions::newFromInventDim(_inventDimTo),
            _updateWorkInventTransDimBeforeUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveForInitialPickWithDimTracking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes work initial pick inventory transaction based on <c>WHSDimTracking</c> records.
    /// </summary>
    /// <param name = "_workInventTrans">The <c>WHSWorkInventTrans</c> record to execute.</param>
    /// <param name = "_inventDimFrom">Inventory dimensions to pick from.</param>
    /// <param name = "_inventDimTo">Inventory dimensions to put to.</param>
    /// <param name = "_updateWorkInventTransDimBeforeUpdate">Specifies if dimensions on the <c>WHSWorkInventTrans</c> record should be updated.</param>
    /// <remarks>
    /// This method updates the item set linked to the <c>WHSWorkInventTrans</c> record to represent exact dimensions and quantities being picked.
    /// </remarks>
    public void moveForInitialPickWithDimTracking(
        WHSWorkInventTrans  _workInventTrans,
        InventDim           _inventDimFrom,
        InventDim           _inventDimTo,
        boolean             _updateWorkInventTransDimBeforeUpdate = true)
    {
        // the expectation is that this method is used only for the initial picks.
        Debug::assert(WHSWorkLine::find(_workInventTrans.WorkId, _workInventTrans.LineNum).isInitialPickLine());

        List fieldListDimBelowLicensePlate = 
            WHSReservationHierarchyInventDimUtil::hierarchyList2FieldIdList(WHSReservationHierarchyProvider::construct()
                .getDimListBelowLicensePlate(InventTable::find(_workInventTrans.ItemId), WHSReservationHierarchySortOrder::TopDown));

        ttsbegin;

        WHSInventoryTransactionHandlingQty handlingQtySum = 0;
        WHSInventoryTransactionHandlingWeight handlingWeightSum = 0;

        // 1. Build item sets for issue and receipt transactions
        // The issue and receipt item sets can be different when we assign serials during picking.
        // In this case we need to issue without serial and recipt with serial.
        var receiptItemSetUpdate = new WHSInventoryItemSetUpdate();
        var issueItemSetUpdate = new WHSInventoryItemSetUpdate();

        WHSDimTracking whsDimTracking;
        InventDim trackingDimensions;

        while select forupdate whsDimTracking
            where   whsDimTracking.WorkId              == _workInventTrans.WorkId
                &&  whsDimTracking.LineNum             == _workInventTrans.LineNum
                &&  whsDimTracking.InventTransIdParent == _workInventTrans.InventTransIdParent
        join trackingDimensions
            where  trackingDimensions.inventDimId      == whsDimTracking.InventDimId
                && trackingDimensions.LicensePlateId   == _inventDimFrom.LicensePlateId
        {
            if (trackingDimensions.InventSerialId)
            {
                InventSerial::ensureExists(trackingDimensions.InventSerialId, _workInventTrans.ItemId);
            }

            WHSInventoryTransactionHandlingQty    handlingQty;
            WHSInventoryTransactionHandlingWeight handlingWeight;

            [handlingQty, handlingWeight] = WHSInventoryTransactionQuantityFormatConverter::convertFromCwFormatToWarehouseHandlingFormat(
                _workInventTrans.ItemId,
                whsDimTracking.Qty,
                whsDimTracking.CapturedWeight);

            handlingQtySum += handlingQty;
            handlingWeightSum += handlingWeight;

            // We need to ensure that the from and to dimensions include all dimensions that have been specified as part of the flow/process
            InventDim inventDimFromMerged, inventDimToMerged;
            [inventDimFromMerged, inventDimToMerged] = WhsInvent::mergeTrackingDimensions(_inventDimFrom, _inventDimTo, trackingDimensions, fieldListDimBelowLicensePlate);

            issueItemSetUpdate.addElement(_workInventTrans.ItemId, inventDimFromMerged.InventDimId, handlingQty, handlingWeight);
            receiptItemSetUpdate.addElement(_workInventTrans.ItemId, inventDimToMerged.InventDimId, handlingQty, handlingWeight);

            whsDimTracking.Processed = NoYes::Yes;
            whsDimTracking.update();
        }

        WHSInventoryItemSetDescriptor itemSetToIssue = WHSInventoryItemSetDescriptor::newFromValues(
            issueItemSetUpdate.createItemSet(),
            handlingQtySum,
            handlingWeightSum);

        WHSInventoryItemSetDescriptor itemSetToReceipt = WHSInventoryItemSetDescriptor::newFromValues(
            receiptItemSetUpdate.createItemSet(),
            handlingQtySum,
            handlingWeightSum);

        this.moveSpecificItemSet(
            _workInventTrans,
            itemSetToIssue,
            itemSetToReceipt,
            WHSInventoryStorageDimensions::newFromInventDim(_inventDimFrom),
            WHSInventoryStorageDimensions::newFromInventDim(_inventDimTo),
            _updateWorkInventTransDimBeforeUpdate);

        // Add picked inventory to the ItemSet on the workInventTrans (we are always dealing with pick work lines in this method).
        receiptItemSetUpdate.updateItemSet(_workInventTrans.ItemSetId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveSpecificQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes inventory movement for the given <c>WHSWorkInventTrans</c> record for the given quantity.
    /// </summary>
    /// <param name = "_workInventTrans">The <c>WHSWorkInventTrans</c> record to execute.</param>
    /// <param name = "_inventDimFrom">Inventory dimensions to pick from.</param>
    /// <param name = "_inventDimTo">Inventory dimensions to put to.</param>
    /// <param name = "_qty">The inventory quantity being moved.</param>
    /// <param name = "_cwQty">The catch-weight quantity being moved.</param>
    /// <param name = "_updateWorkInventTransDimBeforeUpdate">Specifies if dimensions on the <c>WHSWorkInventTrans</c> record should be updated.</param>
    /// <remarks>
    /// This method updates the item set linked to the <c>WHSWorkInventTrans</c> record to represent exact dimensions and quantities being picked
    /// if executing the picking work line.
    /// </remarks>
    public void moveSpecificQty(
        WHSWorkInventTrans  _workInventTrans,
        InventDim           _inventDimFrom,
        InventDim           _inventDimTo,
        InventQty           _qty,
        PdsCWInventQty      _cwQty,
        boolean             _updateWorkInventTransDimBeforeUpdate = true)
    {
        ttsbegin;

        WHSInventoryTransactionHandlingQty    handlingQty;
        WHSInventoryTransactionHandlingWeight handlingWeight;

        [handlingQty, handlingWeight] = WHSInventoryTransactionQuantityFormatConverter::convertFromCwFormatToWarehouseHandlingFormat(
            _workInventTrans.ItemId,
            _qty,
            _cwQty);

        WHSInventoryItemSetDescriptor itemSetToMove = this.constructInventoryItemSet(
            _workInventTrans.ItemId,
            _inventDimFrom,
            handlingQty,
            handlingWeight);

        this.moveSpecificItemSet(
            _workInventTrans,
            itemSetToMove,
            itemSetToMove,
            WHSInventoryStorageDimensions::newFromInventDim(_inventDimFrom),
            WHSInventoryStorageDimensions::newFromInventDim(_inventDimTo),
            _updateWorkInventTransDimBeforeUpdate);

        // Add new element (item) to the ItemSet on the workInventTrans if dealing with the pick line.
        if (WHSWorkLine::find(_workInventTrans.WorkId, _workInventTrans.LineNum).WorkType == WHSWorkType::Pick)
        {
            this.addToItemSet(
                _workInventTrans.ItemSetId,
                _workInventTrans.ItemId,
                _inventDimFrom,
                handlingQty,
                handlingWeight);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTrackingDimesions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the tracking dimensions for the given <c>WHSWorkInventTrans</c> record for the given quantity.
    /// </summary>
    /// <param name = "_workInventTrans">The <c>WHSWorkInventTrans</c> record to execute.</param>
    /// <param name = "_inventDimFrom">Inventory dimensions with initial tracking dimensions.</param>
    /// <param name = "_inventDimTo">Inventory dimensions with tracking dimenstions to update to.</param>
    /// <param name = "_qty">The inventory quantity for which the tracking dimensions are updated.</param>
    /// <param name = "_cwQty">The catch-weight quantity being updated.</param>
    /// <param name = "_updateWorkInventTransDimBeforeUpdate">Specifies if dimensions on the <c>WHSWorkInventTrans</c> record should be updated.</param>
    /// <remarks>
    /// The _inventDimFrom and the _inventDimTo should have the same storage dimensions.
    /// </remarks>
    public void updateTrackingDimesions(
        WHSWorkInventTrans  _workInventTrans,
        InventDim           _inventDimFrom,
        InventDim           _inventDimTo,
        InventQty           _qty,
        PdsCWInventQty      _cwQty,
        boolean             _updateWorkInventTransDimBeforeUpdate = true)
    {
        // The inventory is not moving, i.e. storage dimensions should be the same.
        Debug::assert(WHSInventoryStorageDimensions::haveEqualStorageDimensions(_inventDimFrom, _inventDimTo));

        WHSInventoryTransactionHandlingQty    handlingQty;
        WHSInventoryTransactionHandlingWeight handlingWeight;

        [handlingQty, handlingWeight] = WHSInventoryTransactionQuantityFormatConverter::convertFromCwFormatToWarehouseHandlingFormat(
            _workInventTrans.ItemId,
            _qty,
            _cwQty);

        WHSInventoryItemSetDescriptor itemSetFrom = this.constructInventoryItemSet(_workInventTrans.ItemId, _inventDimFrom, handlingQty, handlingWeight);
        WHSInventoryItemSetDescriptor itemSetTo = this.constructInventoryItemSet(_workInventTrans.ItemId, _inventDimTo, handlingQty, handlingWeight);

        var storageDimensions = WHSInventoryStorageDimensions::newFromInventDim(_inventDimFrom);
        this.moveSpecificItemSet(
            _workInventTrans,
            itemSetFrom,
            itemSetTo,
            storageDimensions,
            storageDimensions,
            _updateWorkInventTransDimBeforeUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>putAwayToLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Puts away inventory to a location.
    /// </summary>
    /// <param name = "_workPutFlow">The put away flow to execute.</param>
    /// <param name = "_workLine">The put work line to execute.</param>
    /// <param name = "_workInventTrans">The <c>WHSWorkInventTrans</c> record to execute.</param>
    /// <param name = "_sourceLicensePlateId">The source license plate.</param>
    /// <param name = "_targetLocationId">The location the quantity is being moved to.</param>
    /// <param name = "_targetLicensePlateId">The target license plate.</param>
    /// <returns>The quantity moved.</returns>
    public Qty putAwayToLocation(
        WHSWorkPutFlow      _workPutFlow,
        WHSWorkLine         _workLine,
        WHSWorkInventTrans  _workInventTrans,
        WHSLicensePlateId   _sourceLicensePlateId,
        WMSLocationId       _targetLocationId,
        WHSLicensePlateId   _targetLicensePlateId)
    {
        this.assertPutAwayParameters(_workLine, _workInventTrans);

        InventDim inventDimFrom = this.prepareInventDimFromForPutAway(_workInventTrans, _sourceLicensePlateId);

        InventDim inventDimTo = inventDimFrom.data();
        inventDimTo.wmsLocationId = _targetLocationId;
        inventDimTo.LicensePlateId = _targetLicensePlateId;

        if (this.canPutAwayFullItemSet(_workPutFlow, _workLine))
        {
            this.moveFullItemSet(
                _workInventTrans,
                inventDimFrom,
                inventDimTo);

            return _workInventTrans.Qty;
        }
        else if (_workInventTrans.InventQtyRemain != 0 || !WHSSkipZeroQuantityWorkInventTransOnPutFlight::instance().isEnabled())
        {
            WHSInventoryItemSetDescriptor putAwayItemSet = WHSWorkPutAwaySplitCalculator::calculate(_workPutFlow, _workInventTrans);

            this.moveSpecificItemSet(
                _workInventTrans,
                putAwayItemSet,
                putAwayItemSet,
                WHSInventoryStorageDimensions::newFromInventDim(inventDimFrom),
                WHSInventoryStorageDimensions::newFromInventDim(inventDimTo));

            return putAwayItemSet.parmHandlingQty();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>putAwaySpecificItemSetToLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Puts away specific item set to a location.
    /// </summary>
    /// <param name = "_workPutFlow">The put away flow to execute.</param>
    /// <param name = "_workLine">The put work line to execute.</param>
    /// <param name = "_workInventTrans">The <c>WHSWorkInventTrans</c> record to execute.</param>
    /// <param name = "_putAwayItemSet">The item set to be put away.</param>
    /// <param name = "_sourceLicensePlateId">The source license plate.</param>
    /// <param name = "_targetLocationId">The location the quantity is being moved to.</param>
    /// <param name = "_targetLicensePlateId">The target license plate.</param>
    /// <returns>The quantity moved.</returns>
    public Qty putAwaySpecificItemSetToLocation(
        WHSWorkPutFlow                  _workPutFlow,
        WHSWorkLine                     _workLine,
        WHSWorkInventTrans              _workInventTrans,
        WHSInventoryItemSetDescriptor   _putAwayItemSet,
        WHSLicensePlateId               _sourceLicensePlateId,
        WMSLocationId                   _targetLocationId,
        WHSLicensePlateId               _targetLicensePlateId)
    {
        this.assertPutAwayParameters(_workLine, _workInventTrans);

        InventDim inventDimFrom = this.prepareInventDimFromForPutAway(_workInventTrans, _sourceLicensePlateId);

        InventDim inventDimTo = inventDimFrom.data();
        inventDimTo.wmsLocationId = _targetLocationId;
        inventDimTo.LicensePlateId = _targetLicensePlateId;

        this.moveSpecificItemSet(
            _workInventTrans,
            _putAwayItemSet,
            _putAwayItemSet,
            WHSInventoryStorageDimensions::newFromInventDim(inventDimFrom),
            WHSInventoryStorageDimensions::newFromInventDim(inventDimTo));

        return _putAwayItemSet.parmHandlingQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareInventDimFromForPutAway</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the from inventory dimension used for put away.
    /// </summary>
    /// <param name = "_workInventTrans">The <c>WHSWorkInventTrans</c> record to put away.</param>
    /// <param name = "_sourceLicensePlateId">The source license plate to put away.</param>
    /// <returns>The from <c>InventDim</c> used for put away.</returns>
    protected InventDim prepareInventDimFromForPutAway(
        WHSWorkInventTrans  _workInventTrans,
        WHSLicensePlateId   _sourceLicensePlateId)
    {
        InventDim inventDimFrom = InventDim::find(_workInventTrans.InventDimIdFrom);
        inventDimFrom.LicensePlateId = _sourceLicensePlateId;

        return inventDimFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveSpecificItemSet</Name>
				<Source><![CDATA[
    private void moveSpecificItemSet(
        WHSWorkInventTrans             _workInventTrans,
        WHSInventoryItemSetDescriptor  _itemSetToIssue,
        WHSInventoryItemSetDescriptor  _itemSetToReceive,
        WHSInventoryStorageDimensions  _moveFromStorageDimensions,
        WHSInventoryStorageDimensions  _moveToStorageDimensions,
        boolean                        _updateWorkInventTransDimBeforeUpdate = true)
    {
        ttsbegin;

        // item set quantity should not be larger that the total work inventory transaction remaining quantity
        Debug::assert(_itemSetToIssue.parmHandlingQty() <= _workInventTrans.InventQtyRemain);
        Debug::assert(_itemSetToIssue.parmHandlingWeight() <= _workInventTrans.RemainingTransactionWeight);

        // both items sets have the same quantity
        Debug::assert(_itemSetToIssue.parmHandlingQty() == _itemSetToReceive.parmHandlingQty());
        Debug::assert(_itemSetToIssue.parmHandlingWeight() == _itemSetToReceive.parmHandlingWeight());

        // 1. remove old reservation
        this.removeReservation(
            _workInventTrans,
            _itemSetToIssue.parmHandlingQty(),
            _itemSetToIssue.parmHandlingWeight());

        // 2. add registered issue transaction with full dims
        this.createRegisteredIssueTransaction(
            _workInventTrans,
            _itemSetToIssue.parmItemSetId(),
            _moveFromStorageDimensions);

        // 3. add registered receipt transaction with full dims
        if (_updateWorkInventTransDimBeforeUpdate)
        {
            this.updateWorkInventTransToDimension(_workInventTrans, _moveToStorageDimensions);
        }

        var receiptValidationParameters = WHSInventoryTransactionActionValidationParameters::newReceiptRegistration()
            .setCheckMultiStatusLP(_moveFromStorageDimensions.parmLicensePlateId() != _moveToStorageDimensions.parmLicensePlateId()); // We can skip verfication of multi-status on a single LP if license plate is the same.

        this.createRegisteredReceiptTransaction(
            _workInventTrans,
            _itemSetToReceive.parmItemSetId(),
            _moveToStorageDimensions,
            receiptValidationParameters);

        // 4. Update remaining quantity on the WHSWorkInventTrans record.
        this.reduceWorkInventTransRemainQty(
            _workInventTrans,
            _itemSetToIssue.parmHandlingQty(),
            _itemSetToIssue.parmHandlingWeight());

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPutAwayFullItemSet</Name>
				<Source><![CDATA[
    private boolean canPutAwayFullItemSet(WHSWorkPutFlow _workPutFlow, WHSWorkLine _workLine)
    {
        return _workPutFlow == WHSWorkPutFlow::MoveAll                  // we don't have several put work lines
            && _workLine.InventQtyWork == _workLine.InventQtyRemain;    // "Split put" button was NOT used
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeReservation</Name>
				<Source><![CDATA[
    private void removeReservation(
        WHSWorkInventTrans _workInventTrans,
        WHSInventoryTransactionHandlingQty _handlingQty,
        WHSInventoryTransactionHandlingWeight _handlingWeight)
    {
        InventDim workInventTransInventDimFrom = InventDim::find(_workInventTrans.InventDimIdFrom);

        WHSInventoryItemSetDescriptor itemSetToUnreserve = this.constructInventoryItemSet(
            _workInventTrans.ItemId,
            workInventTransInventDimFrom,
            _handlingQty,
            _handlingWeight);

        this.createReservationRemovalTransaction(
            _workInventTrans,
            itemSetToUnreserve.parmItemSetId(),
            workInventTransInventDimFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkInventTransToDimension</Name>
				<Source><![CDATA[
    private void updateWorkInventTransToDimension(WHSWorkInventTrans _workInventTrans, WHSInventoryStorageDimensions _receiptToStorageDimensions)
    {
        // It's possible that the inventDimTo stored in the workInventTrans is different from the desired _inventDimTo.
        // In this case, update the workInventTrans with a correct inventDimTo.
        InventDim oldInventDimTo  = InventDim::find(_workInventTrans.InventDimIdTo);

        if (oldInventDimTo.wmsLocationId != _receiptToStorageDimensions.parmWMSLocationId())
        {
            oldInventDimTo.wmsLocationId = _receiptToStorageDimensions.parmWMSLocationId();

            _workInventTrans.InventDimIdTo = InventDim::findOrCreate(oldInventDimTo).InventDimId;
            _workInventTrans.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReservationRemovalTransaction</Name>
				<Source><![CDATA[
    private void createReservationRemovalTransaction(
        WHSWorkInventTrans      _workInventTrans,
        WHSInventoryItemSetId   _itemSetIdToUnreserve,
        InventDim               _inventDimFrom)
    {
        WHSInventoryTransactionSource source = WHSInventoryTransactionSource::newFromValues(
            WHSInventoryTransactionReferenceCategoryEnum::Work,
            _workInventTrans.WorkId,
            _workInventTrans.InventoryTransactionOriginId);

        WHSInventoryTransactionActionRemoveReservationParameters actionParams = WHSInventoryTransactionActionRemoveReservationParameters::newFromValues(
            source,
            _itemSetIdToUnreserve,
            WHSInventoryStorageDimensions::newFromInventDim(_inventDimFrom));
        
        WHSInventoryTransactionRemoveReservationAction::construct().execute(actionParams);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRegisteredIssueTransaction</Name>
				<Source><![CDATA[
    private void createRegisteredIssueTransaction(
        WHSWorkInventTrans              _workInventTrans,
        WHSInventoryItemSetId           _itemSetIdToIssue,
        WHSInventoryStorageDimensions   _issueFromStorageDimensions)
    {
        WHSInventoryTransactionSource source = WHSInventoryTransactionSource::newFromValues(
            WHSInventoryTransactionReferenceCategoryEnum::Work,
            _workInventTrans.WorkId,
            _workInventTrans.InventoryTransactionOriginId);

        // if item is stamped on work inventory transaction and it is not a CW-item, can skip adjusting weights.
        boolean shouldAdjustOnhandWeightWithinThresholds = PdsGlobal::pdsIsCWItem(_workInventTrans.ItemId);

        WHSInventoryTransactionActionIssueRegistrationParameters actionParams = WHSInventoryTransactionActionIssueRegistrationParameters::newFromValues(
            source,
            _itemSetIdToIssue,
            _issueFromStorageDimensions,
            WHSInventoryTransactionActionValidationParameters::newIssueRegistration(),
            shouldAdjustOnhandWeightWithinThresholds);
        
        WHSInventoryTransactionIssueRegistrationAction::construct().execute(actionParams);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRegisteredReceiptTransaction</Name>
				<Source><![CDATA[
    private void createRegisteredReceiptTransaction(
        WHSWorkInventTrans _workInventTrans,
        WHSInventoryItemSetId _itemSetIdToReceive,
        WHSInventoryStorageDimensions _receiptToStorageDimensions,
        WHSInventoryTransactionActionValidationParameters _validationParameters)
    {
        WHSInventoryTransactionSource source = WHSInventoryTransactionSource::newFromValues(
            WHSInventoryTransactionReferenceCategoryEnum::Work,
            _workInventTrans.WorkId,
            _workInventTrans.InventoryTransactionOriginId);

        WHSInventoryTransactionActionReceiptRegistrationParameters actionParams = WHSInventoryTransactionActionReceiptRegistrationParameters::newFromValues(
            source,
            _itemSetIdToReceive,
            _receiptToStorageDimensions,
            _validationParameters);
        
        WHSInventoryTransactionReceiptRegistrationAction::construct().execute(actionParams);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructInventoryItemSet</Name>
				<Source><![CDATA[
    private WHSInventoryItemSetDescriptor constructInventoryItemSet(
        ItemId                                  _itemId,
        InventDim                               _inventDim,
        WHSInventoryTransactionHandlingQty      _handlingQty,
        WHSInventoryTransactionHandlingWeight   _handlingWeight)
    {
        WHSInventoryItemSetId itemSetId = WHSSequentialGuidGenerator::generateSequentialGuid();

        this.addToItemSet(
            itemSetId,
            _itemId,
            _inventDim,
            _handlingQty,
            _handlingWeight);

        return WHSInventoryItemSetDescriptor::newFromValues(
            itemSetId,
            _handlingQty,
            _handlingWeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToItemSet</Name>
				<Source><![CDATA[
    private void addToItemSet(
        WHSInventoryItemSetId                   _itemSetId,
        ItemId                                  _itemId,
        InventDim                               _inventDim,
        WHSInventoryTransactionHandlingQty      _handlingQty,
        WHSInventoryTransactionHandlingWeight   _handlingWeight)
    {
        WHSInventoryItemSetElement::insertItemSetElement(
            _itemSetId,
            _itemId,
            _inventDim,
            _handlingQty,
            _handlingWeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceWorkInventTransRemainQty</Name>
				<Source><![CDATA[
    private void reduceWorkInventTransRemainQty(
        WHSWorkInventTrans                      _workInventTrans,
        WHSInventoryTransactionHandlingQty      _handlingQty,
        WHSInventoryTransactionHandlingWeight   _handlingWeight)
    {
        _workInventTrans.InventQtyRemain -= _handlingQty;
        _workInventTrans.RemainingTransactionWeight -= _handlingWeight;

        _workInventTrans.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertPutAwayParameters</Name>
				<Source><![CDATA[
    private void assertPutAwayParameters(WHSWorkLine _workLine, WHSWorkInventTrans _workInventTrans)
    {
        Debug::assert(_workLine.WorkType == WHSWorkType::Put);
        Debug::assert(_workInventTrans.WorkId == _workLine.WorkId);
        Debug::assert(_workInventTrans.LineNum == _workLine.LineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSInventoryTransactionWorkController construct()
    {
        return new WHSInventoryTransactionWorkController();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>