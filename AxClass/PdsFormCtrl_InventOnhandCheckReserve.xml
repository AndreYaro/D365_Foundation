<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsFormCtrl_InventOnhandCheckReserve</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class serves as a FormCtrl for form InventOnhandCheckReserv.
/// </summary>
class PdsFormCtrl_InventOnhandCheckReserve extends PmfFormCtrl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasBatchAttribByItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if current item has any batch attributes defined
    /// </summary>
    /// <returns>
    /// true,if batch attributes have been defined for item; otherwise false
    /// </returns>
    /// <remarks>
    /// The method first checks if the batch attributes config key is enabled
    /// before doing the select.
    /// </remarks>
    public boolean hasBatchAttribByItem()
    {
        ItemId     itemId;
        Common     common;

        if (this.callerBuffer().TableId == tablenum(SalesLine))
        {
            common = this.callerBuffer();
            itemId = common.(fieldnum(SalesLine,ItemId));
        }

        return #PdsBatchAttribEnabled
                && PdsBatchAttribByItem::existItemIdAny(itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden method to be called after the form has been initialized
    /// </summary>
    /// <remarks>
    /// Overriding classes need to set the from datasources.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// thrown, if the formrun has not been set
    /// </exception>
    public void initPost()
    {
        if (!this.parmFormRun())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (#PmfEnabled)
        {
            this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(InventOnhandCheckReserve, AvailResBatchAttrib)),
                methodstr(PdsFormCtrl_InventOnhandCheckReserve,
                          hasBatchAttribByItem),
                ButtonRuleEffectType::Visible);
            this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formControlStr(InventOnhandCheckReserve, ReserveMaxBatchAttrib)),
                methodstr(PdsFormCtrl_InventOnhandCheckReserve,
                          hasBatchAttribByItem),
                ButtonRuleEffectType::Visible);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method initializes a new instance of the
    /// PdsFormCtrl_InventOnhandCheckReserve class.
    /// </summary>
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// Form Data source used by class - InventSum
    /// </param>
    /// <param name="_datasources2">
    /// Form Data source used by class - InventDim
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// Default value - null.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common _datasources1,
        Common _datasources2 = null,
        Common _datasources3 = null,
        Common _datasources4 = null,
        Common _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(InventSum))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (_datasources2.TableId != tablenum(InventDim))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the PdsFormCtrl_InventOnhandCheckReserve class.
    /// </summary>
    /// <returns>
    /// New instance of the PdsFormCtrl_InventOnhandCheckReserve class.
    /// </returns>
    public static PdsFormCtrl_InventOnhandCheckReserve construct()
    {
        return new PdsFormCtrl_InventOnhandCheckReserve();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize new instance <c>PdsFormCtrl_InventOnhandCheckReserve</c> class
    /// </summary>
    /// <param name="_fr">
    /// Calling formRun object
    /// </param>
    /// <returns>
    /// New instance of the <c>PdsFormCtrl_InventOnhandCheckReserve</c> class
    /// </returns>
    /// <remarks>
    /// Class FormRun variable also set.
    /// </remarks>
    public static PdsFormCtrl_InventOnhandCheckReserve newFromForm(FormRun _fr)
    {
        PdsFormCtrl_InventOnhandCheckReserve    frmCtrl;

        frmCtrl = PdsFormCtrl_InventOnhandCheckReserve::construct();
        frmCtrl.parmFormRun(_fr);

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>