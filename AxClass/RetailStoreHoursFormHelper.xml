<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStoreHoursFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;

/// <summary>
/// The <c>RetailStoreHoursFormHelper</c> class is the class that is used for data validation in <c>RetailStoreHoursForm</c>.
/// </summary>
class RetailStoreHoursFormHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateSelectedOperatingUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the selected organization units.
    /// Regarding the validation, take the following organization hierarchy for example
    /// Contoso Retail
    /// |-- Contoso Retail USA
    /// |   |-- East
    /// |   |   |-- Boston
    /// |   |   |-- New York
    /// |   |-- West
    /// |       |-- Seattle
    /// |       |-- Los Angeles
    /// |-- Contoso Retail FR
    ///     |-- Nice
    ///     |-- Paris
    ///
    /// Three types of validation will be performed:
    /// 1. If some org unit already has store hours template, this org unit cannot be selected again.
    /// 2. Selected org units cannot overlap each other, e.g. Boston and East cannot be selected at the same time, because East contains Boston.
    /// 3. Selected org units cannot overlap existing org units in RetailStoreHoursChannel table.
    ///    e.g. if East and Paris are in RetailStoreHoursChannel, which means they already have retail store hours template,
    ///         Boston cannot be selected because East contains Boston;
    ///         Contoso Retail USA and Contoso Retail cannot be selected because both of them contains East;
    ///         Contoso Retail FR cannot be selected because it contains Paris;
    ///         Nice, West can be selected because they don't overlap existing org units.
    /// </summary>
    /// <param name = "selectedOMInternalOrganizationIds">Selected organization units.</param>
    /// <returns>
    /// True if selected organization units pass all 3 types of validation;
    /// False otherwise.
    /// </returns>
    public static boolean validateSelectedOperatingUnit(Set selectedOMInternalOrganizationIds)
    {
        Set existingStoreHoursOrganizationIds = new Set(Types::Int64);
        RetailStoreHoursChannel storeHoursChannel;

        // Retrieve existing org units.
        while select OMInternalOrganizationId from storeHoursChannel
        {
            existingStoreHoursOrganizationIds.add(storeHoursChannel.OMInternalOrganizationId);
        }

        // Perform validation 1.
        if (RetailStoreHoursFormHelper::containsOrganizationOverlap(selectedOMInternalOrganizationIds, existingStoreHoursOrganizationIds) ||
            RetailStoreHoursFormHelper::containsOrganizationOverlap(existingStoreHoursOrganizationIds, selectedOMInternalOrganizationIds) ||
        // Perform validation 2.
        RetailStoreHoursFormHelper::containsOrganizationOverlap(selectedOMInternalOrganizationIds, selectedOMInternalOrganizationIds) ||
        // Perform validation 3.
        !Set::intersection(existingStoreHoursOrganizationIds, selectedOMInternalOrganizationIds).empty())
        {
            ApplicationEventSource::EventWriteRetailStoreHoursFormHelperValidateInfoLog(funcName(), 'Failed to add selected channels because they overlap each other or existing channels.');
            error("@Retail:StoreHoursChannelsOverlapError");

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containsOrganizationOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// In the organization units hierarchy, assume Set A denotes all the parent nodes of _childOrgs (excluding _childOrgs themselves),
    /// determine if Set A contains any node from _parentOrgs.
    /// </summary>
    /// <param name = "_parentsOrgs">
    /// A set of organization units which will be considered as parent nodes.
    /// </param>
    /// <param name = "_childrenOrgs">
    /// A set of organization units which will be considered as child nodes.
    /// </param>
    /// <returns>
    /// True if Set A contains at least one node from _parentOrgs.
    /// False otherwise.
    /// </returns>
    private static boolean containsOrganizationOverlap(Set _parentOrgs, Set _childOrgs)
    {
        if (_parentOrgs.empty() || _childOrgs.empty())
        {
            return false;
        }

        // Build the query to retrieve all the parent node of _childOrgs.
        Query orgGraphQuery;
        QueryRun orgGraphQueryRun;
        QueryBuildDataSource orgGraphDataSource;
        QueryBuildRange graphOrgRange;

        orgGraphQuery = new Query();
        orgGraphDataSource = orgGraphQuery.addDataSource(tableNum(OMExplodedOrganizationSecurityGraph));

        SetEnumerator childrenEnumerator = _childOrgs.getEnumerator();
        while (childrenEnumerator.moveNext())
        {
            graphOrgRange = orgGraphDataSource.addRange(fieldNum(OMExplodedOrganizationSecurityGraph, Organization));
            graphOrgRange.value(queryValue(childrenEnumerator.current()));
        }

        graphOrgRange = orgGraphDataSource.addRange(fieldNum(OMExplodedOrganizationSecurityGraph, Distance));
        graphOrgRange.value(">0");

        // Determine if _parentOrgs contains any node from _childOrgs' parent nodes.
        orgGraphQueryRun = new QueryRun(orgGraphQuery);
        OMExplodedOrganizationSecurityGraph graph;
        if (orgGraphQueryRun.next())
        {
            graph = orgGraphQueryRun.get(tableNum(OMExplodedOrganizationSecurityGraph));
        }

        while (graph)
        {
            if (_parentOrgs.in(graph.AncestorOrganization))
            {
                return true;
            }

            next graph;
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>