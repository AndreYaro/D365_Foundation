<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SCTCacheManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Manages cached data access for Supply chain traceability.
/// </summary>
internal class SCTCacheManager
{
    private const str activityConfigCacheScope = 'SCTCacheManager_ActivityConfiguration';
    private const str productConfigCacheScope = 'SCTCacheManager_ProductConfiguration';
    private const str cacheContextScope = 'SCTCacheManager_CacheContext';

    private const str cacheExpiryTimeKey = 'SCTCacheManager_CacheContextScope_CacheExpiryTime';

    private const int64 cacheExpiryTime = 15 * 60; // 15 minutes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkTracingEnabledForItem</Name>
				<Source><![CDATA[
    public static boolean checkTracingEnabledForItem(ItemId _itemId)
    {
        SysGlobalObjectCache objectCache = ClassFactory.globalObjectCache();
        SCTCacheManager::refreshConfigCacheIfRequired(objectCache);

        container itemExclusionCon = objectCache.find(productConfigCacheScope, [curExt(), _itemId]);
        if (itemExclusionCon != conNull())
        {
            return false;
        }
        else
        {
            InventTable invent = InventTable::find(_itemId);
            return invent.isItemBatchActivated() || invent.isItemSerialNumberActivated();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTracingEnabledForActivityCode</Name>
				<Source><![CDATA[
    public static boolean checkTracingEnabledForActivityCode(SCTActivityCode _activityCode)
    {
        SysGlobalObjectCache objectCache = ClassFactory.globalObjectCache();
        SCTCacheManager::refreshConfigCacheIfRequired(objectCache);

        container activityConfigCon = objectCache.find(activityConfigCacheScope, [curExt(), _activityCode]);
        container activityConfigWildcardCon = objectCache.find(activityConfigCacheScope, ['*', _activityCode]);

        if (activityConfigCon != conNull())
        {
            return conPeek(activityConfigCon, 1);
        }
        else if (activityConfigWildcardCon != conNull())
        {
            return conPeek(activityConfigWildcardCon, 1);
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshConfigCache</Name>
				<Source><![CDATA[
    internal static void refreshConfigCache()
    {
        SysGlobalObjectCache objectCache = ClassFactory.globalObjectCache();
        objectCache.remove(cacheContextScope, [cacheExpiryTimeKey]);

        objectCache.clear(activityConfigCacheScope);
        objectCache.clear(productConfigCacheScope);

        SCTCacheManager::readConfigurationsToGlobalCache(objectCache);

        objectCache.insert(cacheContextScope, [cacheExpiryTimeKey], [DateTimeUtil::utcNow()]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshConfigCacheIfRequired</Name>
				<Source><![CDATA[
    private static void refreshConfigCacheIfRequired(SysGlobalObjectCache _objectCache)
    {
        container expiryTimeCon = _objectCache.find(cacheContextScope, [cacheExpiryTimeKey]);
        if (expiryTimeCon != conNull() && !SCTCacheManager::shouldExpire(conPeek(expiryTimeCon, 1)) )
        {
            return;
        }

        SCTCacheManager::refreshConfigCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldExpire</Name>
				<Source><![CDATA[
    private static boolean shouldExpire(utcdatetime _utcDateTime)
    {
        return DateTimeUtil::getDifference(DateTimeUtil::utcNow(), _utcDateTime) > cacheExpiryTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readConfigurationsToGlobalCache</Name>
				<Source><![CDATA[
    private static void readConfigurationsToGlobalCache(SysGlobalObjectCache objectCache)
    {
        SCTTracingConfigurations configurations;
        while select configurations
        {
            ListEnumerator enumerator;
            switch (configurations.SectionName)
            {
                case SCTTracingConfigurationSection::Activity:
                    List activityConfigurations = FormJSONSerializer::deserializeCollection(classNum(List), configurations.ConfigurationJson, Types::Class, classStr(SCTTracingActivityConfigurationContract));
                    enumerator = activityConfigurations.getEnumerator();
                    while (enumerator.moveNext())
                    {
                        SCTTracingActivityConfigurationContract activityConfiguration = enumerator.current() as SCTTracingActivityConfigurationContract;
                        str companyCode = activityConfiguration.parmCompanyCode();
                        boolean isTracingEnabled = activityConfiguration.parmIsEnabled();
                        objectCache.insert(activityConfigCacheScope, [companyCode, activityConfiguration.parmActivityCode()], [isTracingEnabled]);
                    }
                    break;

                case SCTTracingConfigurationSection::Product:
                    List productConfigurations = FormJSONSerializer::deserializeCollection(classNum(List), configurations.ConfigurationJson, Types::Class, classStr(SCTTracingProductConfigurationContract));
                    enumerator = productConfigurations.getEnumerator();
                    while (enumerator.moveNext())
                    {
                        SCTTracingProductConfigurationContract productConfiguration = enumerator.current() as SCTTracingProductConfigurationContract;
                        str companyCode = productConfiguration.parmCompanyCode();
                        objectCache.insert(productConfigCacheScope, [companyCode, productConfiguration.parmProductNumber()], [false]);
                    }
                    break;

                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>