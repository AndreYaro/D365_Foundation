<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCAdaptorVisitorPersistValues</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Visitor responsible for persisting configuration values.
/// </summary>
class PCAdaptorVisitorPersistValues extends PCAdaptorVisitor
{
    PCProductConfiguration configuration;

    PCStack componentInstanceStack;
    PCStack componentInstanceValueStack;

    PCComponentInstance         componentInstance;
    PCComponentInstanceValue    componentInstanceValue;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCAdaptorVisitorPersistValues construct()
    {
        return new PCAdaptorVisitorPersistValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        visitAttributes = true;
        componentInstanceStack      = PCStack::construct();
        componentInstanceValueStack = PCStack::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the visitor.
    /// </summary>
    /// <param name = "_configuration">The configuration to persist.</param>
    public void initialize(PCProductConfiguration _configuration)
    {
        configuration = _configuration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfiguration</Name>
				<Source><![CDATA[
    public PCProductConfiguration parmConfiguration(PCProductConfiguration _configuration = configuration)
    {
        configuration = _configuration;

        return configuration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitRootComponentStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits an instance of a root-component adaptor.
    /// </summary>
    /// <param name="_rootComponent">
    /// An instance of the <c>PCAdaptorRootComponent</c> class.
    /// </param>
    public void visitRootComponentStart(PCAdaptorRootComponent _rootComponent)
    {
        PCContractNotNull::assertRecord(configuration, funcName());

        PCComponentInstanceRootComponent rootComponentInstance;

        PCRuntimeLibrary::clearConfiguration(configuration);

        this.createComponentInstance();

        rootComponentInstance.RootComponentClass = _rootComponent.getComponent().RecId;
        rootComponentInstance.ComponentInstance  = componentInstance.RecId;
        rootComponentInstance.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitSubComponentStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits an instance of a sub-component adaptor.
    /// </summary>
    /// <param name="_subComponent">
    /// An instance of the <c>PCAdaptorSubComponent</c> class.
    /// </param>
    public void visitSubComponentStart(PCAdaptorSubComponent _subComponent)
    {
        PCComponentInstanceSubComponent subComponentInstanceRelation;
        PCComponentInstance             parentComponentInstance;

        parentComponentInstance.data(componentInstance);

        this.createComponentInstance();

        subComponentInstanceRelation.SubComponent = _subComponent.getSubComponent().RecId;
        subComponentInstanceRelation.ParentComponentInstance = parentComponentInstance.RecId;
        subComponentInstanceRelation.ChildComponentInstance = componentInstance.RecId;
        subComponentInstanceRelation.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createComponentInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a component instance.
    /// </summary>
    protected void createComponentInstance()
    {
        componentInstance.ProductConfiguration = configuration.RecId;
        componentInstance.insert();

        componentInstanceValue.ComponentInstance = componentInstance.RecId;
        componentInstanceValue.insert();

        componentInstanceStack.push(componentInstance.RecId);
        componentInstanceValueStack.push(componentInstanceValue.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitSubComponentEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Visits an instance of a sub component adaptor.
    /// </summary>
    /// <param name="_subComponent">
    /// An instance of the <c>PCAdaptorSubComponent</c> class.
    /// </param>
    public void visitSubComponentEnd(PCAdaptorSubComponent _subComponent)
    {
        componentInstanceStack.pop();
        componentInstanceValueStack.pop();

        componentInstance = PCComponentInstance::find(componentInstanceStack.pull());
        componentInstanceValue = PCComponentInstanceValue::find(componentInstanceValueStack.pull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Visits an instance of an attribute adaptor.
    /// </summary>
    /// <param name="_attribute">
    ///     An instance of the <c>PCAdaptorAttribute</c> class.
    /// </param>
    public void visitAttribute(PCAdaptorAttribute _attribute)
    {
        if (!_attribute.hasValue())
        {
            return;
        }
        
        EcoResAttributeValue attributeValue;

        switch (_attribute.getValueType())
        {
            case AttributeDataType::Integer:
                EcoResIntValue intValue;
                intValue.IntValue = _attribute.parmIntegerValue();

                if ( _attribute.isUserSelected())
                {
                    intValue.insert();
                }
                attributeValue.Value = intValue.RecId;

                break;
            case AttributeDataType::TrueFalse:
                EcoResBooleanValue   booleanValue;
                booleanValue.BooleanValue = _attribute.parmBooleanValue();
                if (_attribute.isUserSelected())
                {
                    booleanValue.insert();
                }
                attributeValue.Value = booleanValue.RecId;

                break;
            case AttributeDataType::Decimal:
            case AttributeDataType::Text:
                EcoResTextValue textValue;
                textValue.TextValue = _attribute.parmTextValue();

                if (_attribute.isUserSelected())
                {
                    textValue.insert();
                }
                attributeValue.Value = textValue.RecId;
                break;
            default:
                if (!this.visitAttributeDefault(_attribute))
                {
                    throw error(strFmt("@SYS89175", tableStr(EcoResAttribute)));
                }
        }

        attributeValue.Attribute = _attribute.getAttribute().RecId;
        attributeValue.InstanceValue = componentInstanceValue.RecId;
        
        if (_attribute.isUserSelected())
        {
            attributeValue.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitAttributeDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Visits a default instance of an attribute adaptor.
    /// </summary>
    /// <param name="_attribute">
    ///     An instance of the <c>PCAdaptorAttribute</c> class.
    /// </param>
    [Replaceable]
    protected boolean visitAttributeDefault(PCAdaptorAttribute _attribute)
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>