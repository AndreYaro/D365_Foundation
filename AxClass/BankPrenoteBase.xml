<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPrenoteBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankPrenoteBase</c> class is an abstract class which serves as a base class for generating
/// prenotes.
/// </summary>
abstract class BankPrenoteBase extends RunBase
{
    protected DialogEnumComboBox dialogEnumComboBox;
    protected CompanyBankAccount companyBankAccount;
    protected Filename prenoteFilename;
    protected StreamIo prenoteFile;
    protected PrenoteExportFormats prenoteExportFormats;
    protected PrenoteAccountType prenoteAccountType;
    protected Args args;
    protected PrenoteTypes prenoteType;
    protected CustVendAC accountNum;
    protected BankAccountTable bankAccountTable;
    protected EffectiveDate effectiveEntryDate;
    protected List prenoteTrans;
    protected boolean isSendingFileToUser = true;

    protected DialogRunbase dialog;
    protected DialogField dialogCompanyBankAccount;
    protected DialogField dialogPrenoteExportFormats;
    protected DialogField dialogType;

    internal DialogField dialogEffectiveEntryDate;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        companyBankAccount,
        prenoteFilename,
        prenoteExportFormats,
        accountNum
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds fields to prenotes dialog.
    /// </summary>
    /// <returns>
    /// A <c>DialogRunBase</c> object.
    /// </returns>
    public Object dialog()
    {
        dialog = super();
        dialogCompanyBankAccount = dialog.addField(extendedtypestr(CompanyBankAccount), "@SYS22737", "@SYS128518");
        dialogPrenoteExportFormats = dialog.addField(extendedtypestr(PrenoteExportFormats), "@SYS10194", "@SYS128506");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEffectiveEntryDateToDialog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected final void addEffectiveEntryDateToDialog(DialogRunbase _dialog)
    {
        DialogGroup dialogGroup = _dialog.addGroup('');
        dialogGroup.columns(1);
        dialogGroup.frameType(FormFrameType::None);

        dialogEffectiveEntryDate = _dialog.addFieldValue(extendedTypeStr(EffectiveDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);
        _dialog.formRun().controlMethodOverload(true);
        _dialog.formRun().controlMethodOverloadObject(this);

        super(_dialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSelectCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// When using the dialog class for dialog, this method is called whenever a control is selected.
    /// </summary>
    /// <remarks>
    /// To enable this callback, the <c>allowUpdateOnSelectCtrl</c> method must have been set true.
    /// </remarks>
    public void dialogSelectCtrl()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    public abstract void execute()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBankAccountTable</Name>
				<Source><![CDATA[
    public BankAccountTable findBankAccountTable()
    {
        return BankAccountTable::find(companyBankAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fields from the dialog.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean getFromDialog()
    {
        companyBankAccount = dialogCompanyBankAccount.value();
        prenoteExportFormats = dialogPrenoteExportFormats.value();
        prenoteFilename = this.generateFileName();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBankPrenote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the company bank account prenote requirement.
    /// </summary>
    /// <returns>
    /// true if company bank account requires prenotes; otherwise, false.
    /// </returns>
    public boolean isBankPrenote()
    {
        bankAccountTable = BankAccountTable::find(companyBankAccount);
        return bankAccountTable.IsBankPrenote == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountNum</Name>
				<Source><![CDATA[
    public CustVendAC parmAccountNum(CustVendAC _accountNum = accountNum)
    {
        accountNum = _accountNum;
        return _accountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEffectiveEntryDate</Name>
				<Source><![CDATA[
    public EffectiveDate parmEffectiveEntryDate(EffectiveDate _effectiveEntryDate = effectiveEntryDate)
    {
        effectiveEntryDate = _effectiveEntryDate;
        return effectiveEntryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args = args)
    {
        prenoteType = _args.parmEnum();
        args = _args;
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanyBankAccount</Name>
				<Source><![CDATA[
    public CompanyBranchId parmCompanyBankAccount(CompanyBankAccount _companyBankAccount = companyBankAccount)
    {
        companyBankAccount = _companyBankAccount;
        return _companyBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrenoteAccountType</Name>
				<Source><![CDATA[
    public PrenoteAccountType parmPrenoteAccountType(PrenoteAccountType _prenoteAccountType = prenoteAccountType)
    {
        prenoteAccountType = _prenoteAccountType;
        return _prenoteAccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrenoteExportFormats</Name>
				<Source><![CDATA[
    public PrenoteExportFormats parmPrenoteExportFormats(PrenoteExportFormats _prenoteExportFormats = prenoteExportFormats)
    {
        prenoteExportFormats = _prenoteExportFormats;
        return _prenoteExportFormats;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrenoteFilename</Name>
				<Source><![CDATA[
    public Filename parmPrenoteFilename(Filename _prenoteFilename = prenoteFilename)
    {
        prenoteFilename = _prenoteFilename;
        return _prenoteFilename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrenoteFile</Name>
				<Source><![CDATA[
    public StreamIo parmPrenoteFile(StreamIo _prenoteFile = prenoteFile)
    {
        prenoteFile = _prenoteFile;
        return _prenoteFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrenoteTypes</Name>
				<Source><![CDATA[
    public PrenoteTypes parmPrenoteTypes(PrenoteTypes _prenoteType = prenoteType)
    {
        prenoteType = _prenoteType;
        return _prenoteType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSendingFileToUser</Name>
				<Source><![CDATA[
    public boolean parmIsSendingFileToUser(boolean _isSendingFileToUser = isSendingFileToUser)
    {
        isSendingFileToUser = _isSendingFileToUser;
        return _isSendingFileToUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        this.validate(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a select button is to be added to the dialog. If you change the return value to
    /// true, the button will be added.
    /// </summary>
    /// <returns>
    /// false by default.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> object.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendFileToUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the prenote file to the user if the file is ready to be sent.
    /// </summary>
    public void sendFileToUser()
    {
        if (this.isFileReadyToSend())
        {
            File::SendFileToUser(prenoteFile.getStream(), prenoteFilename);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFileReadyToSend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the output file is ready to be sent to the user.
    /// </summary>
    /// <returns>
    /// true if the file is ready to be sent to the user; otherwise, false.
    /// </returns>
    public boolean isFileReadyToSend()
    {
        return isSendingFileToUser && prenoteFile != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (!this.validateBankAccount())
        {
            ret = checkFailed(strfmt("@SYS116347", "@SYS129002"));
        }

        if (ret && !this.isBankPrenote())
        {
            ret = checkFailed(strfmt("@SYS129282", companyBankAccount));
        }

        if (ret && !this.validateFile())
        {
            ret = checkFailed(strfmt("@SYS116347", "@SYS16423"));
        }

        if (ret && !this.validateFileFormat())
        {
            ret = checkFailed("@SYS62665");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the company bank account information.
    /// </summary>
    /// <returns>
    /// true if the company bank account is specified; otherwise, false.
    /// </returns>
    public boolean validateBankAccount()
    {
        return companyBankAccount != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFile</Name>
				<Source><![CDATA[
    public boolean validateFile()
    {
        return prenoteFilename != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFileFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the file format information.
    /// </summary>
    /// <returns>
    /// true if correct file format specified; otherwise, false.
    /// </returns>
    public boolean validateFileFormat()
    {
        boolean ret;

        ret = false;

        if (prenoteExportFormats == NACHAFormats::CCD
            || prenoteExportFormats == NACHAFormats::CTX
            || prenoteExportFormats == NACHAFormats::PPD)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BankPrenoteBase construct(PrenoteTypes _prenoteTypes)
    {
        BankPrenoteBase bankPrenoteBase;

        switch (_prenoteTypes)
        {
            case PrenoteTypes::AP :
                 bankPrenoteBase = new VendBankPrenoteGeneration();
                 break;

            case PrenoteTypes::AR :
                 bankPrenoteBase = new CustBankPrenoteGeneration();
                 break;

            case PrenoteTypes::Bank :
                 bankPrenoteBase = new BankPrenoteGeneration();
                 break;
        }

        return bankPrenoteBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS128497";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BankPrenoteBase bankPrenoteBase;

        bankPrenoteBase = BankPrenoteBase::construct(_args.parmEnum());
        bankPrenoteBase.parmArgs(_args);

        if (bankPrenoteBase.prompt())
        {
            bankPrenoteBase.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFileName</Name>
				<Source><![CDATA[
    private Filename generateFileName()
    {
        // Defines the sequence of the date, -1 applies the current user's preferences
        int monthDayYearSequence = -1;
        str currentDateTime = DateTimeUtil::toFormattedStr(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getUserPreferredTimeZone()),
            monthDayYearSequence,
            DateDay::Digits2,
            DateSeparator::None,
            DateMonth::Digits2,
            DateSeparator::None,
            DateYear::Digits4,
            TimeSeparator::Dot,
            TimeSeparator::Dot,
            DateFlags::None);

        return strFmt('%1_%2_%3.txt', companyBankAccount, prenoteExportFormats, currentDateTime);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>