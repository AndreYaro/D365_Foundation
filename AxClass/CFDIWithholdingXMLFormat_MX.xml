<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFDIWithholdingXMLFormat_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CFDIWithholdingXMLFormat_MX</c> prepares output xml file for CFDI withholding tax format.
/// </summary>
class CFDIWithholdingXMLFormat_MX
{
    const str schemaVersion = '1.0';
    const str retencionesPrefix = 'retenciones';
    const str retencionesNamespace = 'http://www.sat.gob.mx/esquemas/retencionpago/1';
    const str retencionesSchema ='http://www.sat.gob.mx/esquemas/retencionpago/1/retencionpagov1.xsd';
    const str retencionesXsltLocation = 'http://www.sat.gob.mx/esquemas/retencionpago/1/retenciones.xslt';


    const str pagosaextranjerosPrefix = 'pagosaextranjeros';
    const str pagosaextranjerosNamespace = 'http://www.sat.gob.mx/esquemas/retencionpago/1/pagosaextranjeros';
    const str pagosaextranjerosSchema = 'http://www.sat.gob.mx/esquemas/retencionpago/1/pagosaextranjeros/pagosaextranjeros.xsd';

    const str interesesPrefix = 'intereses';
    const str interesesNamespace = 'http://www.sat.gob.mx/esquemas/retencionpago/1/intereses';
    const str interesesSchema = 'http://www.sat.gob.mx/esquemas/retencionpago/1/intereses/intereses.xsd';

    str                                     currentPrefix, currentNamespace, schemaLocation;
    str                                     xsltFileLocation;
    str                                     xsdFileLocation;
    XmlDocument                             xmlDocument;
    str                                     originalString;
    XmlElement                              retencionesElement;


    EInvoiceJour_MX                         eInvoiceJour;
    CFDIWithholdingJour_MX                  withholdingJour;
    CFDIWithholdingType_MX                  withholdingType;
    VendTable                               vendTable;

    EInvoiceParameters_MX                   eInvoiceParam;
    EInvoiceCFDIParameters_MX               eInvoiceCFDIParam;

    XMLSchemaValidator_W                    schemaValidator;
    protected RoundOff                      roundingPrecision;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addSchemaLocacation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds new scheme location.
    /// </summary>
    /// <param name="_namespace">
    /// Namespace.
    /// </param>
    /// <param name="_schemeLocation">
    /// Scheme location.
    /// </param>
    protected void addSchemaLocacation(str _namespace, str _schemeLocation)
    {
        schemaLocation += strFmt(' %1 %2', _namespace, _schemeLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changePrefixAndXmlns</Name>
				<Source><![CDATA[
    private void changePrefixAndXmlns(str _prefix, str _namespace)
    {
        currentPrefix = _prefix;
        currentNamespace = _namespace;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createComplementoElement</Name>
				<Source><![CDATA[
    private XmlElement createComplementoElement()
    {
        XmlElement complementoElement = this.createElement('Complemento');
        switch (withholdingType.ComplementType)
        {
            case CFDIWithholdingComplementType_MX::Interests:
                this.createIntereses(complementoElement);
                break;

            case CFDIWithholdingComplementType_MX::ForeignResidentPaym:
                this.createPagosaextranjeros(complementoElement);
                break;

            default:
                break;
        }

        return complementoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createElement</Name>
				<Source><![CDATA[
    protected XmlElement createElement(str _elementName)
    {
        return xmlDocument.createElement3(currentPrefix, _elementName, currentNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmisorElement</Name>
				<Source><![CDATA[
    protected XmlElement createEmisorElement()
    {
        XmlElement emisorElement = this.createElement('Emisor');
        CompanyInfo cmpInfo = CompanyInfo::find();

        emisorElement.setAttribute(this.rfcEmisorAttributeName(), cmpInfo.Rfc_MX);
        if (cmpInfo.Name)
        {
            emisorElement.setAttribute('NomDenRazSocE', cmpInfo.Name);
        }
        if (cmpInfo.Curp_MX && this.shouldSetCURPE())
        {
            emisorElement.setAttribute('CURPE', cmpInfo.Curp_MX);
        }

        return emisorElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createImpRetenidosElements</Name>
				<Source><![CDATA[
    protected void createImpRetenidosElements(XmlElement _totalesElement)
    {
        TaxTrans taxTrans;
        TaxTable taxTable;
        CFDIWithholdingTrans_MX witholdingTrans;

        while select witholdingTrans
            where witholdingTrans.CFDIWithholdingJour == withholdingJour.RecId
        join sum(TaxBaseAmount), sum(TaxAmount) from taxTrans
            where taxTrans.RecId == witholdingTrans.TaxTrans
        join TaxType_MX, TaxCode from taxTable
            group by taxTable.TaxType_MX
            where taxTable.TaxCode == taxTrans.TaxCode

        {
            XmlElement ImpRetenidosElement = this.createElement('ImpRetenidos');
            ImpRetenidosElement.setAttribute('BaseRet', this.formatXMLAmount(taxTrans.TaxBaseAmount));
            ImpRetenidosElement.setAttribute(this.impuestoAttributeName(), this.getXmlTaxType(taxTable.TaxType_MX));
            ImpRetenidosElement.setAttribute(this.montoRetAttributeName(), this.formatXMLAmount(abs(taxTrans.TaxAmount)));
            ImpRetenidosElement.setAttribute('TipoPagoRet', this.tipoPagoRet(taxTable.TaxType_MX));

            _totalesElement.appendChild(ImpRetenidosElement);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>createIntereses</Name>
				<Source><![CDATA[
    private void createIntereses(XmlElement _parentNode)
    {
        this.addSchemaLocacation(interesesNamespace, interesesSchema);

        this.changePrefixAndXmlns(interesesPrefix, interesesNamespace);

        this.setXmlNsAttribute(retencionesElement);

        CFDIWithholdingComplInterest_MX complement;
        while select complement
            where complement.WithholdingJourRecId == withholdingJour.RecId
        {
            XmlElement interesesElement = this.createElement('Intereses');
            interesesElement.setAttribute('Version', schemaVersion);

            interesesElement.setAttribute('SistFinanciero', this.xmlBool(complement.FinancialSystem));
            interesesElement.setAttribute('RetiroAORESRetInt', this.xmlBool(complement.InterestCashedInTheCurrentPeriod));
            interesesElement.setAttribute('OperFinancDerivad', this.xmlBool(complement.InterestBelongsDerivedFinOp));

            interesesElement.setAttribute('MontIntNominal', this.formatXmlAmount(complement.InterestNominalAmount));
            interesesElement.setAttribute('MontIntReal', this.formatXmlAmount(complement.InterestRealAmount));
            interesesElement.setAttribute('Perdida', this.formatXmlAmount(complement.InterestLossAmount));

            _parentNode.appendChild(interesesElement);
        }

        this.changePrefixAndXmlns(retencionesPrefix, this.retencionesNamespace());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPagosaextranjeros</Name>
				<Source><![CDATA[
    private void createPagosaextranjeros(XmlElement _parentNode)
    {

        this.addSchemaLocacation(pagosaextranjerosNamespace, pagosaextranjerosSchema);

        this.changePrefixAndXmlns(pagosaextranjerosPrefix, pagosaextranjerosNamespace);

        this.setXmlNsAttribute(retencionesElement);

        CFDIWithholdingComplPaymBeneficiary_MX complement;
        while select Description, BeneficiaryRetains from complement
            where complement.WithholdingJourRecId == withholdingJour.RecId
        {
            XmlElement childElement;
            XmlElement pagosaextranjerosElement = this.createElement('Pagosaextranjeros');
            pagosaextranjerosElement.setAttribute('Version', schemaVersion);
            pagosaextranjerosElement.setAttribute('EsBenefEfectDelCobro', this.xmlBool(complement.BeneficiaryRetains));
            if (complement.BeneficiaryRetains)
            {
                childElement = this.createElement('Beneficiario');
                childElement.setAttribute('RFC', vendTable.LegalRepresentativeRfc_MX);
                childElement.setAttribute('CURP', vendTable.LegalRepresentativeCurp_MX);

                childElement.setAttribute('NomDenRazSocB', vendTable.LegalRepresentativeName_MX ? vendTable.LegalRepresentativeName_MX : vendTable.name());
            }
            else
            {
                childElement = this.createElement('NoBeneficiario');
                childElement.setAttribute('PaisDeResidParaEfecFisc', LogisticsAddressCountryRegion::find(vendTable.postalAddress().CountryRegionId).ISOcode);
            }

            childElement.setAttribute('ConceptoPago', this.getTypeOfTaxPayer());
            childElement.setAttribute('DescripcionConcepto', complement.Description ? complement.Description : withholdingType.Description);

            pagosaextranjerosElement.appendChild(childElement);
            _parentNode.appendChild(pagosaextranjerosElement);
        }

        this.changePrefixAndXmlns(retencionesPrefix, this.retencionesNamespace());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPeriodoElement</Name>
				<Source><![CDATA[
    private XmlElement createPeriodoElement()
    {
        XmlElement periodoElement = this.createElement('Periodo');

        int month = withholdingJour.periodStartMonthOfFY();
        periodoElement.setAttribute('MesIni', this.month2str(month));

        month = withholdingJour.periodEndMonthOfFY();
        periodoElement.setAttribute('MesFin', this.month2str(month));

        str fiscalYear = withholdingJour.periodFiscalYearName();
        periodoElement.setAttribute(this.ejercAttributeName(), fiscalYear);

        return periodoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReceptorElement</Name>
				<Source><![CDATA[
    protected XmlElement createReceptorElement()
    {
        XmlElement receptorDetails;
        XmlElement receptorElement = this.createElement('Receptor');

        if (vendTable.VendorType_MX == VendorType_MX::ForeignVendor)
        {
            receptorElement.setAttribute(this.nacionalidadAttributeName(), 'Extranjero');

            receptorDetails = this.createElement('Extranjero');
            receptorDetails.setAttribute(this.numRegIdTribAttributeName(), vendTable.ForeignTaxRegistration_MX);
            receptorDetails.setAttribute('NomDenRazSocR', vendTable.name());
        }
        else
        {
            receptorElement.setAttribute(this.nacionalidadAttributeName(), 'Nacional');

            receptorDetails = this.createElement('Nacional');
            receptorDetails.setAttribute(this.rfcRecepAttributeName(), vendTable.Rfc_MX);
            receptorDetails.setAttribute('NomDenRazSocR', vendTable.name());
            if (vendTable.Curp_MX)
            {
                receptorDetails.setAttribute(this.curpRAttributeName(), vendTable.Curp_MX);
            }
        }

        receptorElement.appendChild(receptorDetails);

        return receptorElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRetencionesElement</Name>
				<Source><![CDATA[
    protected void createRetencionesElement()
    {
        System.Security.Cryptography.X509Certificates.X509Certificate2 certificate = CertificateHelper_MX::getCurrentDigitalCertificate();

        this.initRetencionesElement();

        retencionesElement.setAttribute('Version', this.retencionesSchemaVersion());
        retencionesElement.setAttribute('FolioInt', withholdingJour.WithholdingJournalID);
        retencionesElement.setAttribute(this.numCertAttributeName(), CertificateHelper_MX::getCertificateSerialNumber(certificate));
        retencionesElement.setAttribute(this.certAttributeName(), CertificateHelper_MX::getCertificateInBase64(certificate));
        retencionesElement.setAttribute('FechaExp', this.getJournalDateTimeStr());
        retencionesElement.setAttribute('CveRetenc', withholdingJour.WithholdingTypeCode);
        retencionesElement.setAttribute('DescRetenc', withholdingType.Description);

        retencionesElement.appendChild(this.createEmisorElement());
        retencionesElement.appendChild(this.createReceptorElement());
        retencionesElement.appendChild(this.createPeriodoElement());
        retencionesElement.appendChild(this.createTotalesElement());

        if (withholdingType.ComplementType != CFDIWithholdingComplementType_MX::None)
        {
            retencionesElement.appendChild(this.createComplementoElement());
        }

        XmlAttribute schemaLocationAttribute = xmlDocument.createAttribute2('xsi:schemaLocation', 'http://www.w3.org/2001/XMLSchema-instance');
        schemaLocationAttribute.value(schemaLocation);
        this.setXmlNsAttribute(retencionesElement);
        retencionesElement.setAttributeNode(schemaLocationAttribute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTotalesElement</Name>
				<Source><![CDATA[
    protected XmlElement createTotalesElement()
    {
        XmlElement totalesElement = this.createElement('Totales');

        totalesElement.setAttribute('montoTotOperacion', this.formatXMLAmount(withholdingJour.OperationAmount));
        totalesElement.setAttribute('montoTotGrav', this.formatXMLAmount(withholdingJour.TaxBaseAmount));
        totalesElement.setAttribute('montoTotExent', this.formatXMLAmount(withholdingJour.ExemptAmount));
        totalesElement.setAttribute('montoTotRet', this.formatXMLAmount(abs(withholdingJour.WithholdingAmount)));

        this.createImpRetenidosElements(totalesElement);

        return totalesElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatXmlAmount</Name>
				<Source><![CDATA[
    protected str formatXmlAmount(real _number)
    {
        Currency currency  = Currency::find(Ledger::accountingCurrency(CompanyInfo::current()));
        real precision = roundingPrecision ? roundingPrecision : (currency.RoundingPrecision ? currency.RoundingPrecision : 0.01);
        str valueStr  = new SysAnyType(precision).value();
        int decimals  = strLen(valueStr) - strFind(valueStr, '.', 1, strLen(valueStr));

        return num2str
                    (
                        _number,
                        1,
                        decimals,   // decimal digits
                        1,          // Decimal separator (.)
                        0           // No Thousands separator
                    );
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateOriginalString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates original string for the xml using the XSL transformation.
    /// </summary>
    protected void generateOriginalString()
    {
        System.Xml.Xsl.XslCompiledTransform xslCompiledTransform = new System.Xml.Xsl.XslCompiledTransform();
        using (System.IO.StringWriter transformedStringWriter = new System.IO.StringWriter())
        {
            using (System.Xml.XmlReader originalReader = System.Xml.XmlReader::Create(new System.IO.StringReader(xmlDocument.toString())))
            {

                if (!originalReader || !transformedStringWriter || !xslCompiledTransform)
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }

                xslCompiledTransform.Load(
                    xsltFileLocation,
                    new System.Xml.Xsl.XsltSettings(false, false),
                    new System.Xml.XmlUrlResolver());

                try
                {
                    xslCompiledTransform.Transform(originalReader, new System.Xml.Xsl.XsltArgumentList(), transformedStringWriter);
                    originalString = transformedStringWriter.ToString();
                }
                catch
                {
                    throw error(AifUtil::getClrErrorMessage());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates XML file for withholding journal.
    /// </summary>
    /// <param name="_eInvoiceJour">
    /// Electronic invoice journal.
    /// </param>
    /// <param name="_withholdingJour">
    /// Withholding journal.
    /// </param>
    public void generateXML(EInvoiceJour_MX _eInvoiceJour, CFDIWithholdingJour_MX _withholdingJour)
    {
        eInvoiceJour = _eInvoiceJour;
        withholdingJour = _withholdingJour;
        withholdingType = CFDIWithholdingType_MX::find(withholdingJour.WithholdingTypeCode);
        vendTable = VendTable::find(withholdingJour.AccountNum);

        xmlDocument = XmlDocument::newBlank();

        this.createRetencionesElement();
        xmlDocument.appendChild(retencionesElement);

        this.generateOriginalString();

        str sello = '';
        using (CFDIWithholdingContext context = new CFDIWithholdingContext())
        {
            context.isWithholding = true;
            sello = EInvoiceSignXmlDoc_MX::getSello(originalString, eInvoiceCFDIParam.WithholdingDigestAlgorithm);
        }
        retencionesElement.setAttribute('Sello', sello);

        if (EInvoiceCFDIParameters_MX::find().EnabledXsdValidation)
        {
            this.validateXML();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalDateTimeStr</Name>
				<Source><![CDATA[
    private str getJournalDateTimeStr()
    {
        utcDateTime documentDate = DateTimeUtil::applyTimeZoneOffset(eInvoiceJour.InvoiceDateTime, DateTimeUtil::getUserPreferredTimeZone());
        System.DateTime netDttm = Global::utcDateTime2SystemDateTime(documentDate);
        str formattedStr = netDttm.ToString(this.getJournalDateTimeFormat());

        return formattedStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets original string.
    /// </summary>
    /// <returns>
    /// Original string.
    /// </returns>
    public str getOriginalString()
    {
        return originalString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTypeOfTaxPayer</Name>
				<Source><![CDATA[
    private str getTypeOfTaxPayer()
    {
        return int2str(enum2int(vendTable.WithholdingTaxPayerType_MX));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXMLDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets XML document.
    /// </summary>
    /// <returns>
    /// XML document.
    /// </returns>
    public XmlDocument getXMLDocument()
    {
        return xmlDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXmlTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets XML tax type string.
    /// </summary>
    /// <param name="_taxType">
    /// Tax type.
    /// </param>
    /// <returns>
    /// The string with tax type.
    /// </returns>
    protected str getXmlTaxType(TaxType_MX _taxType)
    {
        str taxTypeStr;

        switch(_taxType)
        {
            case TaxType_MX::ISR:
                taxTypeStr = '01';
                break;
            case TaxType_MX::IVA:
                taxTypeStr = '02';
                break;
            case TaxType_MX::IEPS:
                taxTypeStr = '03';
                break;
            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        return taxTypeStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        this.changePrefixAndXmlns(retencionesPrefix, this.retencionesNamespace());

        eInvoiceParam = EInvoiceParameters_MX::find();
        eInvoiceCFDIParam = EInvoiceCFDIParameters_MX::find();

        xsdFileLocation = (eInvoiceCFDIParam.WithholdingXsdFile) ? eInvoiceCFDIParam.WithholdingXsdFile : this.retencionesSchema();
        xsltFileLocation = (eInvoiceCFDIParam.WithholdingXsltFile) ? eInvoiceCFDIParam.WithholdingXsltFile : retencionesXsltLocation;

        this.addSchemaLocacation(this.retencionesNamespace(), this.retencionesSchema());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setXmlNsAttribute</Name>
				<Source><![CDATA[
    private void setXmlNsAttribute(XmlElement _xmlElement)
    {
        _xmlElement.setAttribute('xmlns:' + currentPrefix, currentNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateXML</Name>
				<Source><![CDATA[
    private void validateXML()
    {
        XMLSchemaValidator_W validator = XMLSchemaValidator_W::construct();
        EInvoiceCFDIParameters_MX parameters = EInvoiceCFDIParameters_MX::find();
        boolean schemasAdded =
            validator.tryAddSchemaFromStream(EInvoiceCFDIParameters_MX::getSchemaStream(parameters.DocuRefWithholding))
            && validator.tryAddSchemaFromUri(pagosaextranjerosNamespace, pagosaextranjerosSchema)
            && validator.tryAddSchemaFromUri(interesesNamespace, interesesSchema);

        if (!schemasAdded)
        {
            throw error("@MexicoCFDI:XSDSchemaLoadingError");
        }
        validator.validateXMLString(xmlDocument.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>xmlBool</Name>
				<Source><![CDATA[
    private str xmlBool(NoYes _noYes)
    {
        return _noYes ? 'SI' : 'NO';
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CFDIWithholdingXMLFormat_MX construct()
    {
        EInvoiceCFDIParameters_MX eInvoiceCFDIParam = EInvoiceCFDIParameters_MX::find();

        switch (eInvoiceCFDIParam.CFDIVersion)
        {
            case EInvoiceCFDIVersion_MX::V3:
            case EInvoiceCFDIVersion_MX::V3_2:
            case EInvoiceCFDIVersion_MX::V3_3:
                return new CFDIWithholdingXMLFormat_MX();

            case EInvoiceCFDIVersion_MX::V4:
                return new CFDIWithholdingXMLFormat_V4_MX();

            default:
                throw Error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retencionesSchemaVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns version of the "Retenciones" element.
    /// </summary>
    /// <returns>Version of the "Retenciones" element.</returns>
    protected str retencionesSchemaVersion()
    {
        return '1.0';
    }

]]></Source>
			</Method>
			<Method>
				<Name>retencionesNamespace</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns namespace of the "Retenciones" element.
    /// </summary>
    /// <returns>Namespace of the "Retenciones" element.</returns>
    protected str retencionesNamespace()
    {
        return 'http://www.sat.gob.mx/esquemas/retencionpago/1';
    }

]]></Source>
			</Method>
			<Method>
				<Name>retencionesSchema</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns schema of the "Retenciones" element.
    /// </summary>
    /// <returns>Schema of the "Retenciones" element.</returns>
    protected str retencionesSchema()
    {
        return 'http://www.sat.gob.mx/esquemas/retencionpago/1/retencionpagov1.xsd';
    }

]]></Source>
			</Method>
			<Method>
				<Name>montoRetAttributeName</Name>
				<Source><![CDATA[
    protected str montoRetAttributeName()
    {
        return 'montoRet';
    }

]]></Source>
			</Method>
			<Method>
				<Name>impuestoAttributeName</Name>
				<Source><![CDATA[
    protected str impuestoAttributeName()
    {
        return 'Impuesto';
    }

]]></Source>
			</Method>
			<Method>
				<Name>ejercAttributeName</Name>
				<Source><![CDATA[
    protected str ejercAttributeName()
    {
        return 'Ejerc';
    }

]]></Source>
			</Method>
			<Method>
				<Name>rfcEmisorAttributeName</Name>
				<Source><![CDATA[
    protected str rfcEmisorAttributeName()
    {
        return 'RFCEmisor';
    }

]]></Source>
			</Method>
			<Method>
				<Name>rfcRecepAttributeName</Name>
				<Source><![CDATA[
    protected str rfcRecepAttributeName()
    {
        return 'RFCRecep';
    }

]]></Source>
			</Method>
			<Method>
				<Name>numCertAttributeName</Name>
				<Source><![CDATA[
    protected str numCertAttributeName()
    {
        return 'NumCert';
    }

]]></Source>
			</Method>
			<Method>
				<Name>certAttributeName</Name>
				<Source><![CDATA[
    protected str certAttributeName()
    {
        return 'Cert';
    }

]]></Source>
			</Method>
			<Method>
				<Name>nacionalidadAttributeName</Name>
				<Source><![CDATA[
    protected str nacionalidadAttributeName()
    {
        return 'Nacionalidad';
    }

]]></Source>
			</Method>
			<Method>
				<Name>curpRAttributeName</Name>
				<Source><![CDATA[
    protected str curpRAttributeName()
    {
        return 'CURPR';
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRegIdTribAttributeName</Name>
				<Source><![CDATA[
    protected str numRegIdTribAttributeName()
    {
        return 'NumRegIdTrib';
    }

]]></Source>
			</Method>
			<Method>
				<Name>month2str</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns The string representation of the month.
    /// </summary>
    /// <param name = "_month">Month to convert to string.</param>
    /// <returns>The string representation of the month.</returns>
    protected str month2str(int _month)
    {
        return int2str(_month);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tipoPagoRet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the string representation of the tax type to be used in the "TipoPagoRet" attribute.
    /// </summary>
    /// <param name = "_taxType">Tax type.</param>
    /// <returns>The string representation of the tax type to be used in the "TipoPagoRet" attribute.</returns>
    protected str tipoPagoRet(TaxType_MX _taxType)
    {
        return _taxType == TaxType_MX::IVA ? 'Pago definitivo' : 'Pago provisional';
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSetCURPE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if CURPE attribute should be set.
    /// </summary>
    /// <returns>Always returns true.</returns>
    protected boolean shouldSetCURPE()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRetencionesElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes "Retenciones" element.
    /// </summary>
    protected void initRetencionesElement()
    {
        retencionesElement = this.createElement('Retenciones');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalDateTimeFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the format of date/time to be used in the output XML.
    /// </summary>
    /// <returns>The format of date/time to be used in the output XML</returns>
    protected str getJournalDateTimeFormat()
    {
        return 'yyyy-MM-ddThh:mm:sszzz';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>