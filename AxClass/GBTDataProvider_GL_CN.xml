<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GBTDataProvider_GL_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GBTDataProvider_GL_CN</c> class provides data for GBT generating General ledger xml.
/// </summary>
class GBTDataProvider_GL_CN extends GBTDataProvider_CN
{
    const int AdditionalDimensionNumber1 = 1;
    const int AdditionalDimensionNumber2 = 2;
    const int AdditionalDimensionNumber3 = 3;
    GBTFileGenerationDataProvider_CN GBTFileGenerationDataProvider;
    Map mainAccountMap;
    Set mainAccountNumSet;
    Set mainAccountAddtionalNumberSet;
    Set mainAccountSet;
    const str Separator = '|';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillAccountBalanceAndNetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Account balance and Net amount dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_AccountBalanceAndNetAmount), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillAccountBalanceAndNetAmount(System.Data.DataTable _dt)
    {
        FiscalCalendarPeriod    tmpFiscalCalendarPeriod;
        int                     i;

        mainAccountMap = new Map(Types::String, Types::Class);
        mainAccountAddtionalNumberSet = new Set(Types::String);

        i = 1;
        while (i <= conLen(fiscalPeriodRecIdCon))
        {
            mainAccountNumSet = new Set(Types::String);
            tmpFiscalCalendarPeriod = FiscalCalendarPeriod::find(conPeek(fiscalPeriodRecIdCon, i));
            this.insertDimensionCombBalanceAndNetAmount(_dt, tmpFiscalCalendarPeriod);
            this.insertTotalMainAccBalanceAndNetAmount(_dt, tmpFiscalCalendarPeriod);
            i++;
        }

        MainAccount mainAccount;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        str additionalNumber;
        MapEnumerator mapEnumerator = mainAccountMap.getEnumerator();

        void insertAccountBalanceWithoutVoucherTransaction()
        {
            newRow = _dt.NewRow();
            this.setValue(newRow, #ColumnName_LegerAccount, mainAccount.MainAccountId);
            //fills additional dimensions
            this.insertAdditionalDimensions(dimensionAttributeValueCombination.RecId, newRow);
            //Currency code
            this.setValue(newRow, #ColumnName_CurrencyCode, mainAccount.CurrencyCode ? mainAccount.CurrencyCode : Ledger::accountingCurrency());
            //Unit of measure
            this.setValue(newRow, #ColumnName_UnitOfMeasure, '');
            //Fiscal year
            this.setValue(newRow, #ColumnName_FiscalYear, fiscalYearName);
            //Fiscal period
            this.setValue(newRow, #ColumnName_FiscalPeriod, mapEnumerator.currentKey());
            this.setValue(newRow, #ColumnName_DBCROfTheBeginningBalance, this.getDebitCreditSymbol(mainAccount));
            //DB/CR of the ending balance
            this.setValue(newRow, #ColumnName_DBCROfTheEndingBalance, this.getDebitCreditSymbol(mainAccount));

            drc.Add(newRow);
        }

        while (mapEnumerator.moveNext())
        {
            mainAccountNumSet = mapEnumerator.currentValue();

            while select MainAccountId, LedgerChartOfAccounts, CurrencyCode, DebitCreditProposal, Type from mainAccount
                outer join RecId from dimensionAttributeValueCombination
                    where dimensionAttributeValueCombination.MainAccount == mainAccount.RecId
            {
                additionalNumber = GBTFileGenerationHelper_CN::getAdditionalDimensions(dimensionAttributeValueCombination.RecId);
                if (additionalNumber)
                {
                    str key = mapEnumerator.currentKey() + Separator + mainAccount.MainAccountId + Separator + additionalNumber;
                    // Populates the assist accounting info without voucher transaction record
                    if (!mainAccountAddtionalNumberSet.in(key))
                    {
                        insertAccountBalanceWithoutVoucherTransaction();
                    }
                }
                else
                {
                    // Populates the main accounting info without voucher transaction record
                    if (!mainAccountNumSet.in(mainAccount.MainAccountId))
                    {
                        insertAccountBalanceWithoutVoucherTransaction();
                        mainAccountNumSet.add(mainAccount.MainAccountId);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAccountStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Account structre dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_AccountStructure), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillAccountStructure(System.Data.DataTable _dt)
    {
        MainAccount mainAccount;
        DimensionHierarchy dimensionHierarchy;
        LedgerStructure ledgerStructure;
        DimensionAttribute dimensionAttribute;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;

        mainAccountSet = new Set(Types::String);
        List dimensionAttributeList = new List(Types::Int64);
        drc = _dt.get_Rows();

        // Account structures
        while select dimensionAttributeValueCombination
            where dimensionAttributeValueCombination.RecId
            join MainAccountId from mainAccount
                where mainAccount.RecId  == dimensionAttributeValueCombination.MainAccount
            exists join dimensionHierarchy
                where dimensionHierarchy.RecId == dimensionAttributeValueCombination.AccountStructure
                    && dimensionHierarchy.IsDraft   == NoYes::NO
            exists join RecId from ledgerStructure
                where ledgerStructure.DimensionHierarchy == dimensionHierarchy.RecId
                    && ledgerStructure.Ledger == Ledger::current()
        {
            if (!mainAccountSet.in(mainAccount.MainAccountId))
            {
                dimensionAttributeList = GBTFileGenerationHelper_CN::getAssistAccounting(dimensionAttributeValueCombination.RecId);

                if (dimensionAttributeList)
                {
                    ListEnumerator listEnumerator = dimensionAttributeList.getEnumerator();
                    while (listEnumerator.moveNext())
                    {
                        newRow = _dt.NewRow();
                        dimensionAttribute = dimensionAttribute::find(listEnumerator.current());
                        this.setValue(newRow, #Columnname_AccountNumber, mainAccount.MainAccountId);
                        this.setValue(newRow, #Columnname_AdditionalDimension, dimensionAttribute.localizedName());
                        this.setValue(newRow, #Columnname_AdditionalDimensionName, dimensionAttribute.ReportColumnName);
                        this.setValue(newRow, #Columnname_DimensionValueFrom, GBTFileGenerationHelper_CN::getDimensionValueFrom(dimensionAttribute.Name));
                        this.setValue(newRow, #Columnname_DimensionDescription, dimensionAttribute.localizedName());
                        drc.Add(newRow);
                        mainAccountSet.add(mainAccount.MainAccountId);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCashflowInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Cashflow info dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_CashflowInfo), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillCashflowInfo(System.Data.DataTable _dt)
    {
        DimensionAttribute      dimAttr;
        Query                   dimAttrValueQuery;
        QueryRun                dimAttrValueQueryRun;
        QueryBuildDataSource    qbsDimAttrValue;
        QueryBuildDataSource    qbsDimAttrDirCategory;
        boolean                 fromCustomDimension = false;
        Common                  common;
        DimensionValue          dimValue;
        DimensionAttributeValue dimAttrValue;
        DimensionAttributeValue dimAttrValueTmp;
        Common                  commonTmp;
        DimensionValue          parentCashflowItem;
        DictTable               dictTable;

        drc = _dt.get_Rows();

        //From cashflow dimension value, which is set up in GBT parameters, and also should be used in financial statement: cashflow main body.
        dimAttr = DimensionAttribute::findByLocalizedName(GBTParameters.CashFlowDimension);
        fromCustomDimension = (dimAttr.BackingEntityTableId == tableNum(DimensionFinancialTag));
        dimAttrValueQuery = new Query();

        qbsDimAttrValue = dimAttrValueQuery.addDataSource(dimAttr.BackingEntityType);
        if (fromCustomDimension)
        {
            qbsDimAttrDirCategory = qbsDimAttrValue.addDataSource(tableNum(DimensionAttributeDirCategory));
            qbsDimAttrDirCategory.addLink(fieldNum(DimensionFinancialTag, FinancialTagCategory), fieldNum(DimensionAttributeDirCategory, DirCategory));
            qbsDimAttrDirCategory.addRange(fieldNum(DimensionAttributeDirCategory, DimensionAttribute)).value(queryValue(dimAttr.RecId));
        }
        dimAttrValueQueryRun = new QueryRun(dimAttrValueQuery);
        while (dimAttrValueQueryRun.next())
        {
            common      = dimAttrValueQueryRun.get(dimAttr.BackingEntityType);
            dimValue    = common.(dimAttr.ValueAttribute);
            newRow      = _dt.NewRow();

            dimAttrValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(dimAttr.RecId, common.RecId);

            this.setValue(newRow, #Columnname_CashflowCode, dimValue);
            this.setValue(newRow, #Columnname_CashflowCodeName, common.(dimAttr.NameAttribute));
            this.setValue(newRow, #Columnname_CashflowCodeDescription, common.(dimAttr.NameAttribute));
            int level = GBTFileGenerationHelper_CN::getCashflowItemLevelByLength(strLen(dimValue));
            this.setValue(newRow, #Columnname_Level, level);
            this.setValue(newRow, #Columnname_IsTheEndLevel, level == 3 ? 1 : 0);

            // Checks parent cashflow dimension item whether exist
            parentCashflowItem = GBTFileGenerationHelper_CN::getCashflowItemParentNode(dimValue);
            dictTable = new DictTable(dimAttr.BackingEntityType);
            commonTmp = dictTable.makeRecord();
            select firstOnly RecId, EntityInstance from dimAttrValueTmp
                where dimAttrValueTmp.DimensionAttribute == dimAttr.RecId
                join commonTmp
                    where commonTmp.TableId == dimAttr.BackingEntityType
                        && commonTmp.RecId == dimAttrValueTmp.EntityInstance
                        && commonTmp.(dimAttr.ValueAttribute) == parentCashflowItem;

            if (dimAttrValueTmp.RecId)
            {
                this.setValue(newRow, #Columnname_ParentCashFlowCode, parentCashflowItem);
            }
            else
            {
                this.setValue(newRow, #Columnname_ParentCashFlowCode, '');
            }

            this.setValue(newRow, #Columnname_CashflowDataFrom, #CashflowDataFrom_Part1);
            this.setValue(newRow, #Columnname_CashflowCodeType, dimAttrValue.GroupDimension);
            drc.Add(newRow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCashflowVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Cashflow voucher dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_CashflowVoucher), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillCashflowVoucher(System.Data.DataTable _dt)
    {
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalEntry_W               generalJournalEntryW;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        LedgerVoucherType_CN                ledgerVoucherType;
        DimensionAttribute                  dimensionAttribute;
        DimensionAttributeLevelValueView    dimAttrLevelValueView;
        int                                 cashflowVourchLineNum;
        RecId                               currentGeneralJournalEntryRecId;
        DimensionAttributeTranslation       dimensionAttributeTranslation;
        GBTFillCashFlowInfoDataHelper_CN    fillCashFlowInfoDataHelper = new GBTFillCashFlowInfoDataHelper_CN();

        fillCashFlowInfoDataHelper.initCashflowDimInfoMap();
        drc = _dt.get_Rows();
        while select Text, LedgerDimension, TransactionCurrencyAmount, AccountingCurrencyAmount, GeneralJournalEntry, TransactionCurrencyCode from generalJournalAccountEntry
            order by GeneralJournalEntry
            join AccountingDate from generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
                    && generalJournalEntry.AccountingDate <= endFiscalCalendarPeriod.EndDate
                    && generalJournalEntry.AccountingDate >= startFiscalCalendarPeriod.StartDate
            outer join Voucher_CN, LedgerVoucherType_CN from generalJournalEntryW
                where generalJournalEntryW.GeneralJournalEntry == generalJournalEntry.RecId
            outer join id, Num from ledgerVoucherType
                where ledgerVoucherType.RecId   == generalJournalEntryW.LedgerVoucherType_CN
            join DimensionAttribute, DisplayValue from dimAttrLevelValueView
                where dimAttrLevelValueView.ValueCombinationRecId == generalJournalAccountEntry.LedgerDimension
            join dimensionAttribute
                where dimensionAttribute.RecId == dimAttrLevelValueView.DimensionAttribute
            join dimensionAttributeTranslation
                where dimensionAttributeTranslation.DimensionAttribute == dimensionAttribute.RecId
                    && dimensionAttributeTranslation.LanguageId == currentUserLanguage()
                    && dimensionAttributeTranslation.Name == GBTParameters.CashFlowDimension
        {
            newRow = _dt.NewRow();
            this.setValue(newRow, #ColumnName_VoucherType, ledgerVoucherType.Num);
            this.setValue(newRow, #ColumnName_ChineseVoucherNumber, generalJournalEntryW.Voucher_CN);
            this.setValue(newRow, #ColumnName_CurrencyCode, GeneraljournalAccountEntry.TransactionCurrencyCode);

            if (currentGeneralJournalEntryRecId != generalJournalAccountEntry.GeneralJournalEntry)
            {
                cashflowVourchLineNum = 1;
                currentGeneralJournalEntryRecId = generalJournalAccountEntry.GeneralJournalEntry;
            }

            this.setValue(newRow, #ColumnName_CashflowVoucherLineNumber, cashflowVourchLineNum);
            cashflowVourchLineNum++;

            this.setValue(newRow, #ColumnName_CashflowCode, dimAttrLevelValueView.DisplayValue);
            this.setValue(newRow, #ColumnName_CashflowText, GBTFileGenerationHelper_CN::getDimensionValueDescription(DimensionAttribute::find(dimAttrLevelValueView.DimensionAttribute), dimAttrLevelValueView.DisplayValue));
            this.setValue(newRow, #ColumnName_CashflowType, DimensionAttributeValue::findByDimensionAttributeAndValueNoError(dimensionAttribute, dimAttrLevelValueView.DisplayValue).GroupDimension);
            this.setValue(newRow, #ColumnName_TransactionCurrencyAmount, generalJournalAccountEntry.TransactionCurrencyAmount);
            this.setValue(newRow, #ColumnName_AccountingCurrencyAmount, generaljournalAccountEntry.AccountingCurrencyAmount);
            drc.Add(newRow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillChartOfAccountParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Chart of account parameters dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_ChartOfAccountParameters), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillChartOfAccountParameters(System.Data.DataTable _dt)
    {
        DimensionAttribute                  dimAttr;
        DictField                           dimValueDictField;
        LedgerChartOfAccountsTree_CN        ledgerChartOfAccountTree;
        LedgerChartOfAccountsTreeLevel_CN   ledgerChartOfAccountsTreeLevel;
        str                                 formatOfAccountNumber;

        ledgerChartOfAccountTree = LedgerChartOfAccountsTree_CN::findByLedgerChartOfAccounts(LedgerChartOfAccounts::current());

        drc     = _dt.get_Rows();
        newRow  = _dt.NewRow();

        this.setValue(newRow, #ColumnName_Separator, DimensionParameters::find().DimensionSegmentDelimiter);
        //Calculates format Of account number base on ledgerChartOfAccountsTreeLevel setups
        while select Level, Length from ledgerChartOfAccountsTreeLevel order by Level
                where ledgerChartOfAccountsTreeLevel.LedgerChartOfAccountsTree_CN == ledgerChartOfAccountTree.RecId
        {
            if (ledgerChartOfAccountsTreeLevel.Level == 1)
            {
                formatOfAccountNumber = int2str(ledgerChartOfAccountsTreeLevel.Length);
            }
            else
            {
                formatOfAccountNumber += #Dash + int2str(ledgerChartOfAccountsTreeLevel.Length);
            }
        }
        this.setValue(newRow, #ColumnName_FormatOfAccountNumber, formatOfAccountNumber);

        //Calculates the string length of cashflow dimension value
        dimAttr = DimensionAttribute::findByName(GBTParameters.CashFlowDimension);
        dimValueDictField = new DictField(dimAttr.BackingEntityTableId, dimAttr.BackingEntityValueFieldId);
        this.setValue(newRow, #ColumnName_FormatOfCashFlowCode, GBTParameters.CashflowCodeFormat);

        this.setValue(newRow, #ColumnName_VoucherHeaderAdditionalfields, '');
        this.setValue(newRow, #ColumnName_AdditionalFieldsPrimaryTable, '');
        this.setValue(newRow, #ColumnName_VoucherLineAdditionalFields, '');
        this.setValue(newRow, #ColumnName_VoucherLineAdditionalFieldsPrimaryTable, '');
        drc.Add(newRow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Ledger voucher dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_LedgerVoucher), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillLedgerVoucher(System.Data.DataTable _dt)
    {
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalEntry_W               generalJournalEntryW;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        LedgerVoucherType_CN                ledgerVoucherType;
        LedgerJournalTrans                  ledgerJournalTrans;
        LedgerEntryJournal                  ledgerEntryJournal;
        int                                 lineNum;
        RecId                               gjeRecIdTmp;
        ExchangeRateTypeName                exchRateTypeName;
        RecordInsertList                    ledgerVoucherTmpList;
        GBTLedgerVoucherTmp_CN              ledgerVoucherTmp;
        DictEnum                            dictEnum = new DictEnum(enumNum(LedgerPostingType));
        Set setSubledgerVoucher = new Set(Types::String);

        ledgerVoucherTmpList = new RecordInsertList(tableNum(GBTLedgerVoucherTmp_CN), true, true, true, true, true, ledgerVoucherTmp);

        exchRateTypeName = ExchangeRateType::find(Ledger::defaultExchangeRateType(CompanyInfo::current())).Name;
        drc = _dt.get_Rows();

        while select Text, LedgerDimension, TransactionCurrencyCode, TransactionCurrencyAmount, PostingType, AccountingCurrencyAmount, GeneralJournalEntry, IsCredit from generalJournalAccountEntry
            order by GeneralJournalEntry.AccountingDate
            join AccountingDate, DocumentNumber, DocumentDate, CreatedBy, LedgerEntryJournal, SubledgerVoucher from generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
                    && generalJournalEntry.AccountingDate <= endFiscalCalendarPeriod.EndDate
                    && generalJournalEntry.AccountingDate >= startFiscalCalendarPeriod.StartDate
            outer join Voucher_CN, LedgerVoucherType_CN from generalJournalEntryW
                where generalJournalEntryW.GeneralJournalEntry == generalJournalEntry.RecId
            outer join id, Num, DefaultPreparedByWorker, DefaultApprover from ledgerVoucherType
                where ledgerVoucherType.RecId == generalJournalEntryW.LedgerVoucherType_CN
        {
            MainAccountNum mainAccountNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(GeneraljournalAccountEntry.LedgerDimension);
            str key = mainAccountNum + generalJournalEntry.SubledgerVoucher + enum2Str(generalJournalAccountEntry.IsCredit);
            GeneralJournalAccountEntry generalJournalAccountEntrySum;
            GeneralJournalEntry generalJournalEntrySum;

            if (setSubledgerVoucher.in(key))
            {
                continue;
            }
            else
            {
                select sum(TransactionCurrencyAmount), sum(AccountingCurrencyAmount) from generalJournalAccountEntrySum
                    group by generalJournalAccountEntrySum.LedgerDimension, generalJournalEntrySum.SubledgerVoucher
                    where generalJournalAccountEntrySum.LedgerDimension == GeneraljournalAccountEntry.LedgerDimension
                        && generalJournalAccountEntrySum.IsCredit == generalJournalAccountEntry.IsCredit
                    join generalJournalEntrySum
                        where generalJournalEntrySum.RecId == generalJournalAccountEntrySum.GeneralJournalEntry
                            && generalJournalEntrySum.Ledger == Ledger::current()
                            && generalJournalEntrySum.SubledgerVoucher == generalJournalEntry.SubledgerVoucher;
                setSubledgerVoucher.add(key);
            }

            newRow = _dt.NewRow();
            this.setValue(newRow, #ColumnName_VoucherDate, generalJournalEntry.AccountingDate);
            this.setValue(newRow, #ColumnName_FiscalYear, fiscalYearName);
            this.setValue(newRow, #ColumnName_FiscalPeriod, startFiscalCalendarPeriod.Name);
            this.setValue(newRow, #ColumnName_VoucherType, ledgerVoucherType.Num);
            this.setValue(newRow, #ColumnName_ChineseVoucherNumber, generalJournalEntryW.Voucher_CN);
            if (gjeRecIdTmp != generalJournalAccountEntry.GeneralJournalEntry)
            {
                lineNum = 1;
                gjeRecIdTmp = generalJournalAccountEntry.GeneralJournalEntry;
            }

            this.setValue(newRow, #ColumnName_VoucherLineNumber, lineNum);
            lineNum++;

            this.setValue(newRow, #ColumnName_TransactionText, generalJournalAccountEntry.Text);

            this.setValue(newRow, #ColumnName_LegerAccount, LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(GeneraljournalAccountEntry.LedgerDimension));

            //fills additional dimension
            this.insertAdditionalDimensions(GeneraljournalAccountEntry.LedgerDimension, newRow);

            this.setValue(newRow, #ColumnName_CurrencyCode, GeneraljournalAccountEntry.TransactionCurrencyCode);
            this.setValue(newRow, #ColumnName_UnitOfMeasure, #StringBlank);
            this.setValue(newRow, #ColumnName_DebitQuantity, #Quantity_Zero);
            this.setValue(newRow, #ColumnName_CreditQuantity, #Quantity_Zero);
            if (generalJournalAccountEntry.IsCredit)
            {
                this.setValue(newRow, #ColumnName_DebitAmountInTransactionCurrency, #Amount_Zero);
                this.setValue(newRow, #ColumnName_DebitAmountInAccountingCurrency, #Amount_Zero);
                this.setValue(newRow, #ColumnName_CreditAmountInTransactionCurrency, -generalJournalAccountEntrySum.TransactionCurrencyAmount);
                this.setValue(newRow, #ColumnName_CreditAmountInAccountingCurrency, -generaljournalAccountEntrySum.AccountingCurrencyAmount);
            }
            else
            {
                this.setValue(newRow, #ColumnName_DebitAmountInTransactionCurrency, generalJournalAccountEntrySum.TransactionCurrencyAmount);
                this.setValue(newRow, #ColumnName_DebitAmountInAccountingCurrency, generaljournalAccountEntrySum.AccountingCurrencyAmount);
                this.setValue(newRow, #ColumnName_CreditAmountInTransactionCurrency, #Amount_Zero);
                this.setValue(newRow, #ColumnName_CreditAmountInAccountingCurrency, #Amount_Zero);
            }

            this.setValue(newRow, #ColumnName_ExchangeRateType , exchRateTypeName);
            this.setValue(newRow, #ColumnName_ExchangeRate, this.getExchangeRate(generaljournalAccountEntry.getAccountingExchangeRate()));
            this.setValue(newRow, #ColumnName_UnitPrice, #StringBlank);
            this.setValue(newRow, #ColumnName_AdditionalFieldsInVoucherHead, #StringBlank);
            this.setValue(newRow, #ColumnName_AdditionalFieldsInVoucherLine, #StringBlank);

            select firstOnly PaymMode, JournalNum, Attachments_CN from ledgerJournalTrans
                where LedgerJournalTrans.Voucher_CN == generalJournalEntryW.Voucher_CN
                    && LedgerJournalTrans.TransDate == generalJournalEntry.AccountingDate
                exists join ledgerEntryJournal
                     where ledgerEntryJournal.JournalNumber == ledgerJournalTrans.JournalNum
                        && ledgerEntryJournal.RecId == generalJournalEntry.LedgerEntryJournal;
            this.setValue(newRow, #ColumnName_PaymentMethod, ledgerJournalTrans.PaymMode);

            this.setValue(newRow, #ColumnName_DocumentType, #StringBlank);
            this.setValue(newRow, #ColumnName_DocumentNumber, generalJournalEntry.DocumentNumber);
            this.setValue(newRow, #ColumnName_DocumentDate, generalJournalEntry.DocumentDate);
            this.setValue(newRow, #ColumnName_NumberOfOriginalDocuments, ledgerJournalTrans.Attachments_CN);
            this.setValue(newRow, #ColumnName_Preparer, DirPerson::find(HcmWorker::find(ledgerVoucherType.DefaultPreparedByWorker).Person).Name);
            this.setValue(newRow, #ColumnName_Approver, DirPerson::find(HcmWorker::find(ledgerVoucherType.DefaultApprover).Person).Name);
            this.setValue(newRow, #ColumnName_LastModifier, DirPerson::find(DirPersonUser::find(generalJournalEntry.createdBy).PersonParty).Name);
            this.setValue(newRow, #ColumnName_PostFlag, #PostFlag);
            this.setValue(newRow, #ColumnName_VoidFlag, #VoidFlag);
            this.setValue(newRow, #ColumnName_PostingType, generalJournalAccountEntry.PostingType);
            drc.Add(newRow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Main account dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_MainAccount), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillMainAccount(System.Data.DataTable _dt)
    {
        MainAccount             mainAccount;
        LedgerAccountUtility_CN accountUtility = new LedgerAccountUtility_CN();
        int                     levelOfAccount;
        RecId                   currentChartOfAccountsRecId;

        currentChartOfAccountsRecId = LedgerChartOfAccounts::current();

        drc = _dt.get_Rows();
        while select MainAccountId, Name, Type, DebitCreditProposal, LedgerChartOfAccounts from mainAccount
                order by MainAccountId
                where mainAccount.LedgerChartOfAccounts == currentChartOfAccountsRecId
        {
            newRow = _dt.NewRow();
            this.setValue(newRow, #Columnname_AccountNumber, mainAccount.MainAccountId);
            this.setValue(newRow, #Columnname_AccountName, mainAccount.Name);

            //Calculates level of main account
            levelOfAccount = accountUtility.getAccountLevelbyAccountNum(strrem(mainAccount.MainAccountId, GBTFileGenerationHelper_CN::getSeparatorCharByChartOfAccount()), currentChartOfAccountsRecId);
            this.setValue(newRow, #Columnname_LevelOfAccount, levelOfAccount);

            this.setValue(newRow, #Columnname_AccountType, this.getMainAccountType(mainAccount));
            this.setValue(newRow, #Columnname_Balance, this.getDebitCreditSymbol(mainAccount));
            drc.Add(newRow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAdditionalDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills additional dimensions.
    /// </summary>
    /// <param name="_ledgerDimensionRecId">
    /// The Recid of dimension attribute value combination.
    /// </param>
    /// <param name="_newRow">
    /// The new row of dataset.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertAdditionalDimensions(
        RecId _ledgerDimensionRecId,
        System.Data.DataRow _newRow)
    {
        str columnNameStr;
        DimensionAttributeValueCombination dimensionCombination = DimensionAttributeValueCombination::find(_ledgerDimensionRecId);
        DimensionHierarchyLevelCollection dimensionHierarchyLevelCollection = DimensionHierarchyLevelCollection::newForHierarchy(dimensionCombination.AccountStructure);

        dimensionHierarchyLevelCollection.initializeEnumerator();

        int i = 1;
        DimensionAttribute  dimAttr = DimensionAttribute::findByLocalizedName(gbtParameters.CashFlowDimension);

        while (dimensionHierarchyLevelCollection.moveNext())
        {
            DimensionAttributeRecId currentDimensionAttributeRecId = dimensionHierarchyLevelCollection.currentDimensionAttributeId();

            if (currentDimensionAttributeRecId == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                || currentDimensionAttributeRecId == dimAttr.RecId)
            {
                continue;
            }

            DimensionAttribute dimensionAttribute = DimensionAttribute::find(currentDimensionAttributeRecId);
            RecId dimensionKey = dimensionCombination.(DimensionAttributeValueCombination::getDimensionKeyFieldId(dimensionAttribute.Name));
            DimensionAttributeValue dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(dimensionAttribute.RecId, dimensionKey);

            columnNameStr = #ColumnName_AdditionalDimensionNumber1 + int2str(i) + #ColumnName_AdditionalDimensionNumber2;
            this.setValue(newRow, columnNameStr, dimensionAttributeValue.getValue());

            i++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionCombBalanceAndNetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts dimension comb balance and net amount of GBT data provider.
    /// </summary>
    /// <param name="_dt">
    /// The datatable of the GBT data provider.
    /// </param>
    /// <param name="_fiscalCalendarPeriod">
    /// The fiscal calendar period.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertDimensionCombBalanceAndNetAmount(
        System.Data.DataTable   _dt,
        FiscalCalendarPeriod    _fiscalCalendarPeriod)
    {
        DimensionAttributeValueCombination      ledgerDimension;
        MainAccount                             mainAccount;
        LedgerBalanceDimAttrValueComboAmounts   balance;
        DimensionHierarchy                      dimHerarchy;
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        GeneralJournalEntry                     generalJournalEntry;

        AmountMST                               beginningAccountingCurrencyBalance;
        AmountMST                               beginningTransactionCurrencyBalance;
        AmountMST                               endingAccountingCurrencyBalance;
        AmountMST                               endingTransactionCurrencyBalance;

        AmountMST                               accountingCurrencyCreditNetAmount;
        AmountMST                               TransactionCurrencyCreditNetAmount;
        AmountMST                               accountingCurrencyDebitNetAmount;
        AmountMST                               transactionCurrencyDebitNetAmount;

        drc = _dt.get_Rows();
        balance = LedgerBalanceDimAttrValueComboAmounts::construct();
        while select RecId, AccountStructure, DisplayValue from ledgerDimension
                join MainAccountId, CurrencyCode, Type, DebitCreditProposal from mainAccount
                    where mainAccount.RecId == LedgerDimension.MainAccount
                        && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                exists join GeneralJournalEntry from generalJournalAccountEntry
                    where generalJournalAccountEntry.LedgerDimension == ledgerDimension.RecId
                    exists join generalJournalEntry
                        where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                            && generalJournalEntry.AccountingDate <= _fiscalCalendarPeriod.EndDate
                            && generalJournalEntry.Ledger == Ledger::current()
                exists join dimHerarchy
                    where dimHerarchy.RecId          == ledgerDimension.AccountStructure
                        && dimHerarchy.StructureType == DimensionHierarchyType::AccountStructure
        {
            newRow = _dt.NewRow();

            str additionalDimensionNumber = GBTFileGenerationHelper_CN::getAdditionalDimensions(ledgerDimension.RecId);
            str key = _fiscalCalendarPeriod.Name + Separator + mainAccount.MainAccountId + Separator + additionalDimensionNumber;

            if (mainAccountAddtionalNumberSet.in(key))
            {
                continue;
            }

            [beginningAccountingCurrencyBalance,
                beginningTransactionCurrencyBalance,
                accountingCurrencyCreditNetAmount,
                transactionCurrencyCreditNetAmount,
                accountingCurrencyDebitNetAmount,
                transactionCurrencyDebitNetAmount] = GBTFileGenerationHelper_CN::calculateBalanceByMainaccount(mainAccount.MainAccountId, _fiscalCalendarPeriod, additionalDimensionNumber);

            mainAccountAddtionalNumberSet.add(key);

            boolean isCredit;
            if (mainAccount.DebitCreditProposal == DebCredProposal::Credit)
            {
                isCredit = true;
            }

            //fills main account id
            this.setValue(newRow, #ColumnName_LegerAccount, mainAccount.MainAccountId);
            //fills additional dimensions
            this.insertAdditionalDimensions(ledgerDimension.RecId, newRow);

            //Currency code
            this.setValue(newRow, #ColumnName_CurrencyCode, mainAccount.CurrencyCode ? mainAccount.CurrencyCode : Ledger::accountingCurrency());
            //Unit of measure
            this.setValue(newRow, #ColumnName_UnitOfMeasure, '');
            //Fiscal year
            this.setValue(newRow, #ColumnName_FiscalYear, fiscalYearName);
            //Fiscal period
            this.setValue(newRow, #ColumnName_FiscalPeriod, _fiscalCalendarPeriod.Name);

            //DB/CR of the Beginning balance
            this.setValue(newRow, #ColumnName_DBCROfTheBeginningBalance, this.getDebitCreditSymbol(mainAccount));
            //The beginning quantity
            this.setValue(newRow, #ColumnName_TheBeginningQuantity, '');
            //The beginning balance in reporting currency
            this.setValue(newRow, #ColumnName_TheBeginningBalanceInTransactionCurrency, isCredit ? -beginningTransactionCurrencyBalance : beginningTransactionCurrencyBalance);
            //The beginning balance in accounting currency
            this.setValue(newRow, #ColumnName_TheBeginningBalanceInAccountingCurrency, isCredit ? -beginningAccountingCurrencyBalance : beginningAccountingCurrencyBalance);

            //Debit quantity
            this.setValue(newRow, #ColumnName_DebitQuantity, '');
            //Debit amount in transaction currency
            this.setValue(newRow, #ColumnName_DebitAmountInTransactionCurrency, transactionCurrencyDebitNetAmount);
            //Debit amount in accounting currency
            this.setValue(newRow, #ColumnName_DebitAmountInAccountingCurrency, accountingCurrencyDebitNetAmount);

            //Credit quantity
            this.setValue(newRow, #ColumnName_CreditQuantity, '');
            //Debit amount in transaction currency
            this.setValue(newRow, #ColumnName_CreditAmountInTransactionCurrency, transactionCurrencyCreditNetAmount);
            //Debit amount in accounting currency
            this.setValue(newRow, #ColumnName_CreditAmountInAccountingCurrency, accountingCurrencyCreditNetAmount);

            //Ending
            endingAccountingCurrencyBalance     = beginningAccountingCurrencyBalance + (accountingCurrencyDebitNetAmount - accountingCurrencyCreditNetAmount);
            endingTransactionCurrencyBalance    = beginningTransactionCurrencyBalance + (transactionCurrencyDebitNetAmount - transactionCurrencyCreditNetAmount);

            //DB/CR of the ending balance
            this.setValue(newRow, #ColumnName_DBCROfTheEndingBalance, this.getDebitCreditSymbol(mainAccount));
            //The ending quantity
            this.setValue(newRow, #ColumnName_TheEndingQuantity, '');
            //The ending balance in reporting currency
            this.setValue(newRow, #ColumnName_TheEndingBalanceInTransactionCurrency, isCredit ? -endingTransactionCurrencyBalance : endingTransactionCurrencyBalance);
            //The ending balance in accounting currency
            this.setValue(newRow, #ColumnName_TheEndingBalanceInAccountingCurrency, isCredit ? -endingAccountingCurrencyBalance : endingAccountingCurrencyBalance);

            drc.Add(newRow);
            mainAccountNumSet.add(mainAccount.MainAccountId);
            mainAccountMap.insert(_fiscalCalendarPeriod.Name, mainAccountNumSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTotalMainAccBalanceAndNetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts total main account balance and net amount of the GBT data provider.
    /// </summary>
    /// <param name="_dt">
    /// The datatable of the GBT data provider.
    /// </param>
    /// <param name="_fiscalCalendarPeriod">
    /// The fiscal calendar period.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertTotalMainAccBalanceAndNetAmount(
        System.Data.DataTable   _dt,
        FiscalCalendarPeriod    _fiscalCalendarPeriod)
    {
        MainAccount mainAccount;
        LedgerBalanceMainAccountByCurrency totalMainAccountBalance = LedgerBalanceMainAccountByCurrency::construct();

        AmountMST                               beginningAccountingCurrencyBalance;
        AmountMST                               endingAccountingCurrencyBalance;

        AmountMST                               accountingCurrencyCreditNetAmount;
        AmountMST                               accountingCurrencyDebitNetAmount;

        drc = _dt.get_Rows();
        while select LedgerChartOfAccounts, Type, MainAccountId, CurrencyCode, DebitCreditProposal from mainAccount
                where mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                    && mainAccount.Type                 == DimensionLedgerAccountType::Total
        {
            newRow = _dt.NewRow();
            //fills main account id
            this.setValue(newRow, #ColumnName_LegerAccount, mainAccount.MainAccountId);

            //fills additional dimensions
            //No additional dimension for Total main account

            //Currency code
            this.setValue(newRow, #ColumnName_CurrencyCode, mainAccount.CurrencyCode ? mainAccount.CurrencyCode : Ledger::accountingCurrency());
            //Unit of measure
            this.setValue(newRow, #ColumnName_UnitOfMeasure, '');
            //Fiscal year
            this.setValue(newRow, #ColumnName_FiscalYear, fiscalYearName);
            //Fiscal period
            this.setValue(newRow, #ColumnName_FiscalPeriod, _fiscalCalendarPeriod.Name);

            FromDate fromDate;
            ToDate toDate;

            [fromDate, toDate] = GBTFileGenerationHelper_CN::getAccountingDateRange(_fiscalCalendarPeriod);

            //Beginning
            totalMainAccountBalance.parmAccountingDateRange(fromDate, toDate);
            totalMainAccountBalance.parmIncludeRegularPeriod(fromDate == toDate ? false : true);
            totalMainAccountBalance.parmIncludeClosingPeriod(true);
            totalMainAccountBalance.parmIncludeOpeningPeriod(true);
            totalMainAccountBalance.parmIncludeClosingPeriodBySystem(true);
            totalMainAccountBalance.calculateBalance(mainAccount);

            beginningAccountingCurrencyBalance  = totalMainAccountBalance.getAccountingCurrencyBalance();

            boolean isCredit;
            if (mainAccount.DebitCreditProposal == DebCredProposal::Credit)
            {
                isCredit = true;
            }
            //DB/CR of the Beginning balance
            this.setValue(newRow, #ColumnName_DBCROfTheBeginningBalance, this.getDebitCreditSymbol(mainAccount));
            //The beginning quantity
            this.setValue(newRow, #ColumnName_TheBeginningQuantity, '');
            //The beginning balance in reporting currency
            this.setValue(newRow, #ColumnName_TheBeginningBalanceInTransactionCurrency, isCredit ? -beginningAccountingCurrencyBalance : beginningAccountingCurrencyBalance);
            //The beginning balance in accounting currency
            this.setValue(newRow, #ColumnName_TheBeginningBalanceInAccountingCurrency, isCredit ? -beginningAccountingCurrencyBalance : beginningAccountingCurrencyBalance);

            //Net amount
            totalMainAccountBalance.parmAccountingDateRange(_fiscalCalendarPeriod.StartDate, _fiscalCalendarPeriod.EndDate);
            totalMainAccountBalance.parmIncludeRegularPeriod(true);
            totalMainAccountBalance.parmIncludeClosingPeriod(false);
            totalMainAccountBalance.parmIncludeOpeningPeriod(false);
            totalMainAccountBalance.parmIncludeClosingPeriodBySystem(false);
            totalMainAccountBalance.calculateBalance(mainAccount);

            accountingCurrencyCreditNetAmount   = totalMainAccountBalance.getAccountingCurrencyCreditBalance();
            accountingCurrencyDebitNetAmount    = totalMainAccountBalance.getAccountingCurrencyDebitBalance();
            //Debit quantity
            this.setValue(newRow, #ColumnName_DebitQuantity, '');
            //Debit amount in transaction currency
            this.setValue(newRow, #ColumnName_DebitAmountInTransactionCurrency, abs(accountingCurrencyDebitNetAmount));
            //Debit amount in accounting currency
            this.setValue(newRow, #ColumnName_DebitAmountInAccountingCurrency, abs(accountingCurrencyDebitNetAmount));

            //Credit quantity
            this.setValue(newRow, #ColumnName_CreditQuantity, '');
            //Debit amount in transaction currency
            this.setValue(newRow, #ColumnName_CreditAmountInTransactionCurrency, abs(accountingCurrencyCreditNetAmount));
            //Debit amount in accounting currency
            this.setValue(newRow, #ColumnName_CreditAmountInAccountingCurrency, abs(accountingCurrencyCreditNetAmount));

            //Ending
            endingAccountingCurrencyBalance     = beginningAccountingCurrencyBalance + (accountingCurrencyDebitNetAmount - accountingCurrencyCreditNetAmount);

            //DB/CR of the ending balance
            this.setValue(newRow, #ColumnName_DBCROfTheEndingBalance, this.getDebitCreditSymbol(mainAccount));
            //The ending quantity
            this.setValue(newRow, #ColumnName_TheEndingQuantity, '');
            //The ending balance in reporting currency
            this.setValue(newRow, #ColumnName_TheEndingBalanceInTransactionCurrency, isCredit ? -endingAccountingCurrencyBalance : endingAccountingCurrencyBalance);
            //The ending balance in accounting currency
            this.setValue(newRow, #ColumnName_TheEndingBalanceInAccountingCurrency, isCredit ? -endingAccountingCurrencyBalance : endingAccountingCurrencyBalance);

            drc.Add(newRow);

            mainAccountNumSet.add(mainAccount.MainAccountId);
            mainAccountMap.insert(_fiscalCalendarPeriod.Name, mainAccountNumSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReportInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills financial statement info.
    /// </summary>
    /// <param name="_reportId">
    /// The report number.
    /// </param>
    /// <param name="_reportName">
    /// The report name
    /// </param>
    /// <param name="_newRow">
    /// The new row of dataset.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertReportInfo(
        LedgerReportId_CN   _reportId,
        str                 _reportName,
        System.Data.DataRow _newRow)
    {
        this.setValue(newRow, #ColumnName_ReportNumber, _reportId);
        this.setValue(newRow, #ColumnName_ReportName, _reportName);
        this.setValue(newRow, #ColumnName_ReportDate, fiscalCalendarPeriod.EndDate);
        this.setValue(newRow, #ColumnName_ReportPeirod, fiscalCalendarPeriod.Name);
        this.setValue(newRow, #ColumnName_Company, CompanyInfo::find().Name);
        this.setValue(newRow, #ColumnName_CurrencyUnit, #CurrencyUnit);
        drc.Add(_newRow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the instance of the <c>GBTDataProvider_GL_CN</c> class.
    /// </summary>
    public void init()
    {
        super();

        GBTFileGenerationDataProvider = new GBTFileGenerationDataProvider_CN();
        GBTFileGenerationDataProvider.parmReportingPeriodName(fiscalCalendarPeriod.Name);
        GBTFileGenerationDataProvider.parmFiscalCalendarYear(FiscalCalendarYear::findByCalendarYearName(Ledger::fiscalCalendar(), fiscalYearName).RecId);
        GBTFileGenerationDataProvider.parmGBTParameters(GBTParameters_CN::find());
        GBTFileGenerationDataProvider.populateReportsData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReports</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Reports dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_Reports), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillReports(System.Data.DataTable _dt)
    {
        str                 reportName;
        GBTGLReports_CN GBTGLReports = GBTFileGenerationDataProvider.getGLReports();

        drc = _dt.get_Rows();

        while select GBTGLReports
        {
            newRow = _dt.NewRow();
            this.insertReportInfo(GBTGLReports.ReportNumber, GBTGLReports.ReportNumber, newRow);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportContents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills Report contents dataset.
    /// </summary>
    /// <param name="_dt">
    /// The dateset object that is filled.
    /// </param>
    [GBTDataFillTargetTable_CNAttribute(#TableName_ReportContents), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillReportContents(System.Data.DataTable _dt)
    {
        GBTGLReportsData_CN GBTGLReportsData = GBTFileGenerationDataProvider.getGLReportsData();
        drc = _dt.get_Rows();

        while select GBTGLReportsData
        {
            newRow = _dt.NewRow();
            this.setValue(newRow, #ColumnName_ReportNumber, GBTGLReportsData.ReportNumber);
            this.setValue(newRow, #ColumnName_RowNumber, GBTGLReportsData.ReportItemNumber);
            this.setValue(newRow, #ColumnName_RowName, GBTGLReportsData.ReportItemName);
            this.setValue(newRow, #ColumnName_Formula, GBTGLReportsData.ReportItemFormula);
            this.setValue(newRow, #ColumnName_Value, GBTGLReportsData.ReportItemValue);
            drc.Add(newRow);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>