<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchLineBackOrderListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The interaction class for the model-driven <c>PurchLineBackOrderListPageInteraction</c> form.
/// </summary>
class PurchLineBackOrderListPageInteraction
extends SysListPageInteractionBase
{
    PurchLineBackOrderWorkspace         PurchLineBackOrderWorkspace;
    boolean                             isGridPopulated;
    InventDimCtrl_Frm_Mov               inventDimFormSetup;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentPurchLineBackOrderWorkspace</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the active <c>PurchLineBackOrder</c> record.
    /// </summary>
    /// <returns>
    ///    An active <c>PurchLineBackOrder</c> record.
    /// </returns>
    private PurchLineBackOrderWorkspace currentPurchLineBackOrderWorkspace()
    {
        return this.listPage().activeRecord(queryDataSourceStr(PurchLineBackOrderListPage, PurchLineBackOrderWorkspace)) as PurchLineBackOrderWorkspace;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the list page design when the list page is initialized.
    /// </summary>
    /// <remarks>
    /// This method is called one time by the framework when the list page is initialized.
    /// </remarks>
    public void initialized()
    {
        super();
        this.updateDesign(InventDimFormDesignUpdate::Init);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the initial ranges and sorting of the <c>PurchLineBackOrder</c> records.
    /// </summary>
    /// <param name="_query">
    /// The input query.
    /// </param>
    /// <remarks>
    /// This method is called one time by the framework when the data source query is initialized.
    /// </remarks>
    public void initializeQuery(Query _query)
    {
        super(_query);

        _query.dataSourceTable(tableNum(PurchLineBackOrderWorkspace)).addSortField(fieldNum(PurchLineBackOrderWorkspace, ConfirmedDlv));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIsGridPopulated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the grid is populated and saves the result in a global variable.
    /// </summary>
    private void initIsGridPopulated()
    {
        isGridPopulated = PurchLineBackOrderWorkspace.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Interacts with the inventory dimensions form.
    /// </summary>
    /// <returns>
    /// The inventory dimensions set up object.
    /// </returns>
    /// <remarks>
    /// This method is used by inventory dimensions set up logic.
    /// </remarks>
    public Object inventDimSetupObject()
    {
        if (!inventDimFormSetup)
        {
            inventDimFormSetup = InventDimCtrl_Frm_Mov_OrderLine::construct();
            inventDimFormSetup.parmCallingElement(
                    InventDimListPageInteractionAdapter::newFromListPageInteraction(this));
            inventDimFormSetup.parmMovement(InventMovement::construct(PurchLine::find(PurchLineBackOrderWorkspace.PurchId)));
            inventDimFormSetup.init();
        }
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the current <c>PurchLineBackOrder</c> records and initializes record specific global variables.
    /// </summary>
    /// <remarks>
    /// The framework calls this method every time that a record is selected in the grid on the list page.
    /// </remarks>
    public void selectionChanged()
    {
        PurchLineBackOrderWorkspace = this.currentPurchLineBackOrderWorkspace();

        this.initIsGridPopulated();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the action pane buttons according active record data.
    /// </summary>
    protected void setButtonEnabled()
    {
        super();

        this.setButtonPurchaseActionPaneTab();
        this.setButtonGeneralActionPaneTab();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonGeneralActionPaneTab</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the general pane buttons according to the active record data.
    /// </summary>
    private void setButtonGeneralActionPaneTab()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(PurchLineBackOrderListPage, dimensionsDisplayMenuItemButton), isGridPopulated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonPurchaseActionPaneTab</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the purchase pane buttons according to the active record data.
    /// </summary>
    private void setButtonPurchaseActionPaneTab()
    {
        this.listPage().actionPaneControlEnabled(formControlStr(PurchLineBackOrderListPage, onHandMenuItemButton), isGridPopulated);
        this.listPage().actionPaneControlEnabled(formControlStr(PurchLineBackOrderListPage, lotMenuItemButton), isGridPopulated);
        this.listPage().actionPaneControlEnabled(formControlStr(PurchLineBackOrderListPage, inventoryTransactionsMenuItemButton), isGridPopulated);

        this.listPage().actionPaneControlEnabled(formControlStr(PurchLineBackOrderListPage, hiddenBackOrderPurchLinesMenuItemButton), isGridPopulated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the design when it is called.
    /// </summary>
    /// <param name="_mode">
    /// The update mode.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// An unknown mode is specified.
    /// </exception>
    private void updateDesign(InventDimFormDesignUpdate _mode)
    {
        InventMovement movement = InventMovement::construct(PurchLine::find(PurchLineBackOrderWorkspace.PurchId));

        switch (_mode)
        {
            case InventDimFormDesignUpdate::Init :
                this.inventDimSetupObject().formActiveSetup(movement.inventDimGroupSetup(), movement);
                this.inventDimSetupObject().formSetControls(true);
                break;

            default : throw error(strFmt("@SYS54195", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchIdsSelected</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a map of the selected purchase orders.
    /// </summary>
    /// <param name="_formDataSource">
    ///    The <c>PurchLine</c> data source
    /// </param>
    /// <returns>
    ///    A map of selected purchase orders ID values.
    /// </returns>
    /// <remarks>
    ///    Used as a call back method by task page.
    /// </remarks>
    public static Map getPurchIdsSelected(FormDataSource _formDataSource)
    {
        PurchLineBackOrderWorkspace  currentPurchLineBackOrderWorkspace;
        Map                 purchIdSelected;

        // Pack selected lines' PurchIds...
        for (currentPurchLineBackOrderWorkspace = _formDataSource.getFirst(true) ? _formDataSource.getFirst(true) as PurchLineBackOrderWorkspace : _formDataSource.cursor() as PurchLineBackOrderWorkspace;
        currentPurchLineBackOrderWorkspace;
        currentPurchLineBackOrderWorkspace = _formDataSource.getNext() as PurchLineBackOrderWorkspace)
        {
            // Initiate map if needed...
            if (!purchIdSelected)
            {
                purchIdSelected = new Map(Types::String, Types::String);
            }

            // Insert PurchId...
            if (!purchIdSelected.exists(currentPurchLineBackOrderWorkspace.PurchId))
            {
                purchIdSelected.insert(currentPurchLineBackOrderWorkspace.PurchId, currentPurchLineBackOrderWorkspace.PurchId);
            }
        }
        return purchIdSelected;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>