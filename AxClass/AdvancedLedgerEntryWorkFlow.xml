<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AdvancedLedgerEntryWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AdvancedLedgerEntryWorkflow</c> class is used to start advanced ledger entry workflow by calling
///    the <c>activateFromWorkflowTemplate</c> method of the <c>Workflow</c> class.
/// </summary>
public class AdvancedLedgerEntryWorkflow
{
    AdvancedLedgerEntryHeader   advancedLedgerEntryHeader;
    WorkflowVersionTable        workflowVersionTable;
    WorkflowComment             workflowComment;
    boolean                     submit;
    WorkflowWorkItemTable       workflowWorkItemTable;
    userId                      userId;
    menuItemName                menuItemName;
    workflowTypeName            workflowTemplateName;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogOk</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens a dialog box for submitting an advanced ledger entry.
    /// </summary>
    /// <returns>
    ///    true if the dialog box was closed by pressing the Ok button; otherwise, false.
    /// </returns>
    public boolean dialogOk()
    {
        WorkflowSubmitDialog            workflowSubmitDialog;
        WorkflowWorkItemActionDialog    workflowWorkItemActionDialog;
        boolean                         ok;

        if (menuItemName == menuitemactionstr(AdvancedLedgerEntrySubmitToWorkflow))
        {
            workflowSubmitDialog = WorkflowSubmitDialog::construct(this.parmWorkflowVersionTable());
            workflowSubmitDialog.run();
            this.parmWorkflowComment(workflowSubmitDialog.parmWorkflowComment());
            ok = workflowSubmitDialog.parmIsClosedOK();
        }
        else if (menuItemName == menuitemactionstr(AdvancedLedgerEntryReSubmit))
        {
            workflowWorkItemActionDialog = WorkflowWorkItemActionDialog::construct(
                                                workflowWorkItemTable,
                                                WorkflowWorkItemActionType::Resubmit,
                                                new MenuFunction(menuitemactionstr(AdvancedLedgerEntryReSubmit), MenuItemType::Action));
            workflowWorkItemActionDialog.run();
            this.parmWorkflowComment(workflowWorkItemActionDialog.parmWorkflowComment());
            ok = workflowWorkItemActionDialog.parmIsClosedOK();
            userId = workflowWorkItemActionDialog.parmTargetUser();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the advanced ledger entry workflow.
    /// </summary>
    /// <param name="_documentRecord">
    ///     The advanced ledger entry workflow docment record.
    /// </param>
    /// <param name="_menuItemName">
    ///     The name of the menu item related to advanced ledger entry workflow.
    /// </param>
    /// <param name="_workflowVersionTable">
    ///     The buffer of active <c>WorkflowVersionTable</c>.
    /// </param>
    /// <param name="_workflowWorkItemTable">
    ///     The buffer of active <c>WorkflowItwmTable</c>.
    /// </param>
    /// <remarks>
    ///    This method starts the workflow configuration by calling the <c>activateFromWorkflowTemplate</c>
    ///    method of the <c>Workflow</c> class by using information about the advanced ledger entry record.
    /// </remarks>
    public void init(
        Common                 _documentRecord,
        menuItemName           _menuItemName,
        WorkflowVersionTable   _workflowVersionTable,
        WorkflowWorkItemTable  _workflowWorkItemTable)
    {
        this.parmAdvancedLedgerEntryName(_documentRecord);
        this.parmSubmit(_menuItemName == menuitemactionstr(AdvancedLedgerEntrySubmitToWorkflow));
        this.parmMenuItemName(_menuItemName);
        this.parmWorkflowVersionTable(_workflowVersionTable);
        this.parmWorkflowWorkItemtable(_workflowWorkItemTable);
        this.parmWorkflowTemplateName(this.parmWorkflowVersionTable().workflowTable().TemplateName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvancedLedgerEntryName</Name>
				<Source><![CDATA[
    public AdvancedLedgerEntryHeader parmAdvancedLedgerEntryName(AdvancedLedgerEntryHeader _advancedLedgerEntryHeader = advancedLedgerEntryHeader)
    {
        advancedLedgerEntryHeader = _advancedLedgerEntryHeader;
        return advancedLedgerEntryHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuItemName</Name>
				<Source><![CDATA[
    public menuItemName parmMenuItemName(menuItemName _menuItemName = menuItemName)
    {
        menuItemName = _menuItemName;
        return menuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubmit</Name>
				<Source><![CDATA[
    public boolean parmSubmit(boolean _submit = submit)
    {
        submit = _submit;
        return submit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowComment</Name>
				<Source><![CDATA[
    public WorkflowComment parmWorkflowComment(WorkflowComment _workflowComment = workflowComment)
    {
        workflowComment = _workflowComment;
        return workflowComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowTemplateName</Name>
				<Source><![CDATA[
    public workflowTypeName parmWorkflowTemplateName(workflowTypeName _workflowTemplateName = workflowTemplateName)
    {
        workflowTemplateName = _workflowTemplateName;
        return workflowTemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowVersionTable</Name>
				<Source><![CDATA[
    public WorkflowVersionTable parmWorkflowVersionTable(WorkflowVersionTable _workflowVersionTable = workflowVersionTable)
    {
        workflowVersionTable = _workflowVersionTable;
        return workflowVersionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowWorkItemtable</Name>
				<Source><![CDATA[
    public WorkflowWorkItemTable parmWorkflowWorkItemtable(WorkflowWorkItemTable _workflowWorkItemTable = workflowWorkItemTable)
    {
        workflowWorkItemTable = _workflowWorkItemTable;
        return workflowWorkItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSubmit</Name>
				<Source><![CDATA[
/// <summary>
    ///    Resubmits the advanced ledger entry workflow.
    /// </summary>
    /// <remarks>
    ///    This method starts the workflow configuration by calling the <c>dispatchWorkItemAction</c>
    ///    method of the <c>WorkflowWorkItemActionManager</c> class by using information about the advanced ledger entry record.
    /// </remarks>
    public void reSubmit()
    {
        Object advancedLedgerEntryHeader_ds;
        AdvancedLedgerEntryWFApprovalStatus workflowStatus = AdvancedLedgerEntryHeader::find(advancedLedgerEntryHeader.RecId).WorkFlowStatus;

        if (workflowStatus == AdvancedLedgerEntryWFApprovalStatus::Rejected
            || workflowStatus == AdvancedLedgerEntryWFApprovalStatus::ChangeRequested)
        {
            AdvancedLedgerEntryHeader::setWorkflowState(advancedLedgerEntryHeader.RecId, AdvancedLedgerEntryWFApprovalState::Submitted);

            advancedLedgerEntryHeader_ds = FormDataUtil::getFormDataSource(advancedLedgerEntryHeader);

            if (advancedLedgerEntryHeader_ds)
            {
                advancedLedgerEntryHeader_ds.reread();
                advancedLedgerEntryHeader_ds.refresh();
            }

            WorkflowWorkItemActionManager::dispatchWorkItemAction(
            workflowWorkItemTable,
            workflowComment,
            userId,
            WorkflowWorkItemActionType::Resubmit,
            menuItemName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
/// <summary>
    ///    Submits the advanced ledger entry workflow.
    /// </summary>
    /// <remarks>
    ///    This method starts the workflow configuration by calling the <c>activateFromWorkflowTemplate</c>
    ///    method of the <c>Workflow</c> class by using information about the advanced ledger entry record.
    /// </remarks>
    public void submit()
    {
        Object  advancedLedgerEntryHeader_ds;

        if (AdvancedLedgerEntryHeader::find(advancedLedgerEntryHeader.RecId).WorkFlowStatus == AdvancedLedgerEntryWFApprovalStatus::Draft)
        {
        AdvancedLedgerEntryHeader::setWorkflowState(advancedLedgerEntryHeader.RecId, AdvancedLedgerEntryWFApprovalState::Submitted);

        advancedLedgerEntryHeader_ds = FormDataUtil::getFormDataSource(advancedLedgerEntryHeader);

        if (advancedLedgerEntryHeader_ds)
        {
            advancedLedgerEntryHeader_ds.reread();
            advancedLedgerEntryHeader_ds.refresh();
        }

        Workflow::activateFromWorkflowType(
            this.parmWorkflowTemplateName(),
            advancedLedgerEntryHeader.RecId,
            this.parmWorkflowComment(),
            NoYes::No);
    }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static AdvancedLedgerEntryWorkFlow construct()
    {
        return new AdvancedLedgerEntryWorkFlow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        AdvancedLedgerEntryWorkFlow  advancedLedgerEntryWorkFlow;
        AdvancedLedgerEntryHeader    advancedLedgerEntryHeader;
        AdvancedLedgerEntryPost      advancedLedgerEntryPost;
        boolean                      isBudgetCheckSuccess = true;

        advancedLedgerEntryHeader = args.record();
        advancedLedgerEntryPost   = AdvancedLedgerEntryPost::construct(advancedLedgerEntryHeader.TransactionNumber);

        advancedLedgerEntryWorkFlow = AdvancedLedgerEntryWorkFlow::construct();
        if (args.menuItemName() == menuitemactionstr(AdvancedLedgerEntrySubmitToWorkflow)
            || args.menuItemName() == menuitemactionstr(AdvancedLedgerEntryReSubmit))
        {
            advancedLedgerEntryWorkFlow.init(
                args.record(),
                args.menuItemName(),
                args.caller().getActiveWorkflowConfiguration(),
                args.caller().getActiveWorkflowWorkItem());
        }
        else
        {
            advancedLedgerEntryWorkFlow.init(
                args.record(),
                args.menuItemName(),
                null,
                null);
        }

        if (AdvancedLedgerEntryBudgetControl::isAdvLedgerEntryBudgetControlRequired(true)
            || BudgetControlConfiguration::isSourceIntegratorEnabled(Ledger::current(), BudgetControlSourceIntegrator::AdvancedLedgerEntry))
        {
            isBudgetCheckSuccess = AdvancedLedgerEntryBudgetControl::runCheckBudget(
            SourceDocumentHeader::find(advancedLedgerEntryHeader.SourceDocumentHeader),
                true,
                true,
                false,
                curUserId());
        }

        if (isBudgetCheckSuccess
            && advancedLedgerEntryPost.checkAdvancedLedgerEntryHeader(advancedLedgerEntryHeader, false)
            && advancedLedgerEntryPost.checkAdvancedLedgerEntryLine(advancedLedgerEntryHeader, false))
        {
            if (advancedLedgerEntryWorkFlow.dialogOk())
            {
                if (advancedLedgerEntryWorkFlow.parmSubmit())
                {
                    advancedLedgerEntryWorkFlow.submit();
                }
                else
                {
                    advancedLedgerEntryWorkFlow.reSubmit();
                }

                if (args.menuItemName() == menuitemactionstr(AdvancedLedgerEntrySubmitToWorkflow)
                    || args.menuItemName() == menuitemactionstr(AdvancedLedgerEntryReSubmit))
                {
                    args.caller().updateWorkflowControls();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>