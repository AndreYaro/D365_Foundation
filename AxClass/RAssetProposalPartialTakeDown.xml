<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetProposalPartialTakeDown</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetProposalPartialTakeDown extends RAssetProposal implements BatchRetryable
{
    RAssetAmount        netBookValue, balanceAcq, balanceDepr;
    LedgerJournalTrans  ledgerJournalTransItem;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
    public RAssetTransType assetTransType()
    {
        return RAssetTransType::PartialTakeDown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDisposalTrans</Name>
				<Source><![CDATA[
    public void createDisposalTrans(RAssetDisposalType _assetSoldScrap,
                                    RAssetStandardId   _assetStandardId,
                                    LedgerJournalTrans _disposalLine     = null)
    {
        RAssetDisposalParameters rAssetDisposalParameters;
        RAssetAmount             rAssetAmount;
        LedgerJournalTrans       ledgerJournalTrans;
        LedgerJournalTrans_RAsset ledgerJournalTrans_RAsset, ljTransItem_RAsset;
        RAssetTransType          transType;
        RassetDisposalValue      assetDisposalValue;
        NoYes                    canDisposal;

        if (! (select firstonly RecId from rAssetDisposalParameters
                   where rAssetDisposalParameters.SoldScrap      == _assetSoldScrap                         &&
                         rAssetDisposalParameters.PostingProfile == rAssetStandards.postingProfile(runDate) &&
                         rAssetDisposalParameters.Invisible      == NoYes::No).RecId)
            throw error(strFmt("@GLS220505", this.assetTransType()));

        ljTransItem_RAsset = LedgerJournalTrans_RAsset::find(ledgerJournalTransItem.RecId);

        while select reverse rAssetDisposalParameters
            group by PostValue, ValueType, Invisible
            where rAssetDisposalParameters.SoldScrap      == _assetSoldScrap &&
                  rAssetDisposalParameters.PostingProfile == rAssetStandards.postingProfile(runDate)
        {
            switch (rAssetDisposalParameters.PostValue)
            {
                case RAssetPostValue::NBV:
                    rAssetAmount = -netBookValue;
                    transType    = RAssetTransType::PartialTakeDown;
                    canDisposal  = NoYes::No;
                    break;
                case RAssetPostValue::BalanceAcq:
                    rAssetAmount = -balanceAcq;
                    transType    = RAssetTransType::AcquisitionAdj;
                    canDisposal  = NoYes::Yes;
                    break;
                case RAssetPostValue::BalanceDepr:
                    rAssetAmount = -balanceDepr;
                    transType    = RAssetTransType::DepreciationAdj;
                    canDisposal  = NoYes::Yes;
                    break;
                case RAssetPostValue::Gain:
                    rAssetAmount = ljTransItem_RAsset.sumDisposable(ledgerJournalTransItem) - ljTransItem_RAsset.sumPartial(ledgerJournalTransItem);
                    transType    = RAssetTransType::PartialTakeDown;
                    canDisposal  = NoYes::No;
                    break;
            }

            rAssetAmount = RAssetProposal::roundAmount(_assetStandardId,
                                                       rAssetTable,
                                                       runDate,
                                                       rAssetAmount,
                                                       rAssetStandards.CurrencyCode);

            assetDisposalValue = new RassetDisposalValue(rAssetStandards.postingProfile(runDate),
                                                         _assetSoldScrap,
                                                         rAssetDisposalParameters.PostValue,
                                                         rAssetTable.AccountNum,
                                                         rAssetDisposalParameters.ValueType);

            if (assetDisposalValue.postThis(rAssetAmount, _assetStandardId) &&
                rAssetAmount)
            {
                rAssetJournal.createTrans(rAssetDisposalParameters.PostValue == RAssetPostValue::Gain ? abs(rAssetAmount): rAssetAmount,
                                          rAssetTable,
                                          runDate,
                                          rAssetStandards,
                                          '',
                                          strFmt("@GLS116973", enum2str(rAssetDisposalParameters.PostValue)),
                                          assetDisposalValue.ledgerDimension(),
                                          canDisposal,
                                          0);
                ledgerJournalTrans                       = rAssetJournal.ledgerJournalTrans();
                ledgerJournalTrans_RAsset                = rAssetJournal.ledgerJournalTrans_RAsset();
                ledgerJournalTrans.OffsetLedgerDimension = this.mergeLedgerDimensionAndDefaultDimension(assetDisposalValue.offsetLedgerDimension(),
                                                                                                        ledgerJournalTrans.DefaultDimension);
                ledgerJournalTrans.Invisible             = rAssetDisposalParameters.Invisible;
                ledgerJournalTrans_RAsset.TransType      = transType;
                ledgerJournalTrans_RAsset.ToFromRecId    = ledgerJournalTransItem.RecId;
                ledgerJournalTrans_RAsset.PostValue      = rAssetDisposalParameters.PostValue;
                if (_assetStandardId == RAssetParameters::find().StandardIdDefault    ||
                    _assetStandardId == RAssetParameters::find().StandardTaxIdDefault ||
                    rAssetDisposalParameters.Invisible)
                {
                    ledgerJournalTrans.NoEdit = NoYes::Yes;
                }
                ledgerJournalTrans.update();
                ledgerJournalTrans_RAsset.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    public void createJournalLines(RAssetStandardId _assetStandardId,
                                   boolean          _runFromBatch = true,
                                   RAssetAmount     _assetAmount  = 0)
    {
        RAssetScrap         rAssetScrap;
        RAssetAmount        costAmount, costAmountTotal;
        InventMov_Scrap_RU  movement;
        LedgerJournalTrans  ledgerJournalTrans;
        LedgerJournalTrans_RAsset   ledgerJournalTrans_RAsset;

        void updatePostValue()
        {
            ledgerJournalTrans_RAsset = rAssetJournal.ledgerJournalTrans_RAsset();
            ledgerJournalTrans_RAsset.selectForUpdate(true);
            ledgerJournalTrans_RAsset.PostValue = RAssetPostValue::SaleValue;
            ledgerJournalTrans_RAsset.doUpdate();
        }

        void calculateRAP(boolean _createTrans = true)
        {
            while select rAssetScrap
                where rAssetScrap.AssetId    == rAssetTable.AccountNum &&
                      rAssetScrap.Assembling == NoYes::No              &&
                      ! rAssetScrap.TransDate
            {
                costAmount = RAssetProposal::roundAmount(_assetStandardId,
                                                         rAssetTable,
                                                         runDate,
                                                         rAssetScrap.CostAmount,
                                                         CompanyInfoHelper::standardCurrency());
                costAmountTotal += costAmount;
                netBookValue    += rAssetScrap.netBookAmount();
                balanceAcq      += rAssetScrap.BalanceAmount;
                balanceDepr     += rAssetScrap.DepreciationAmount;
                if (costAmount && _createTrans)
                {
                    movement  = InventMovement::construct(rAssetScrap);
                    rAssetJournal.createTrans(costAmount,
                                              rAssetTable,
                                              runDate,
                                              rAssetStandards,
                                              "",
                                              rAssetScrap.ItemId,
                                              movement.accountBalanceSheet(),
                                              NoYes::No,
                                              rAssetScrap.DefaultDimension);
                    ledgerJournalTrans = rAssetJournal.ledgerJournalTrans();
                    updatePostValue();
                }
            }
        }

        void calculateTAX()
        {
            RAssetSumCalc_Trans calcTransTax = RAssetSumCalc_Trans::newAssetPeriod(rAssetTable.AccountNum,
                                                                                   _assetStandardId),
                                calcTransRAP = RAssetSumCalc_Trans::newAssetPeriod(rAssetTable.AccountNum,
                                                                                   RAssetParameters::find().StandardIdDefault);

            if (calcTransRAP.acquisitionTotal())
            {
                balanceAcq   = balanceAcq * calcTransTax.acquisitionTotal() / calcTransRAP.acquisitionTotal();
            }
            if (calcTransRAP.depreciationTotal())
            {
                balanceDepr  = balanceDepr * calcTransTax.depreciationTotal() / calcTransRAP.depreciationTotal();
            }
            if (netBookValue)
            {
                costAmount   = costAmountTotal * (balanceAcq + balanceDepr) / netBookValue;
            }
            netBookValue = balanceAcq + balanceDepr;

            if (costAmount)
            {
                rAssetJournal.createTrans(costAmount, rAssetTable, runDate, rAssetStandards,
                                          "", "", 0, NoYes::No);
                ledgerJournalTrans = rAssetJournal.ledgerJournalTrans();
                updatePostValue();
            }
        }

        netBookValue = 0; balanceAcq = 0; balanceDepr = 0; costAmountTotal = 0;

        if (rAssetStandards.Depreciation            &&
            rAssetStandards.postingProfile(runDate) &&
            ! rAssetStandards.DisposalDate)
        {
            rAssetJournal.createVoucher();
            if (_assetStandardId == RAssetParameters::find().StandardIdDefault)
            {
                calculateRAP();
            }
            else if (_assetStandardId == RAssetParameters::find().StandardTaxIdDefault)
            {
                calculateRAP(false);
                calculateTAX();
            }
            else
            {
                rAssetJournal.createTrans(0, rAssetTable, runDate, rAssetStandards,
                                          "", "", 0, NoYes::No);
                ledgerJournalTrans = rAssetJournal.ledgerJournalTrans();
                updatePostValue();
            }
            ledgerJournalTransItem = ledgerJournalTrans.data();
            if (ledgerJournalTransItem.RecId)
            {
                this.createDisposalTrans(RAssetDisposalType::PartialTakeDown, _assetStandardId);

                ledgerJournalTransItem.selectForUpdate(true);
                ledgerJournalTransItem.NoEdit = NoYes::Yes;
                ledgerJournalTransItem.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialog.caption("@GLS116960");

        dialogRunDate.label("@GLS116972");
        dialogAssetStandardId.visible(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(QueryRun _queryRun = queryRun)
    {
        ;
        _queryRun.query().dataSourceName(tableStr(RAssetTable)).addRange(fieldNum(RAssetTable, AssetType)).value(queryRange(RAssetType::Tangible, RAssetType::Other));
        super(_queryRun);
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>