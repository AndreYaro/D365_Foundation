<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventABC_CarrCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventABC_CarrCost extends InventABC
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcInterest</Name>
				<Source><![CDATA[
    protected Amount calcInterest(
        Amount      _amount,
        TransDate   _fromInterestDate,
        TransDate   _toInterestDate)
    {
        return (max(_amount,0) * (_toInterestDate - _fromInterestDate) * interest/this.interestDays()/100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcItem</Name>
				<Source><![CDATA[
    Amount calcItem(InventTable _inventTable)
    {
        Amount                  inventValue;
        Amount                  costValue;
        InventTrans             inventTrans;
        TransDate               lastDate = fromDate;
        InventDimParm           inventDimParm;

        select sum(CostAmountPosted), sum(CostAmountAdjustment) from inventTrans
            where inventTrans.ItemId        == _inventTable.ItemId
               && inventTrans.DatePhysical  <= fromDate
               && inventTrans.DatePhysical  >  dateNull()
               && inventTrans.DateFinancial;
        inventValue += inventTrans.costValue();

        InventTableModule inventTableModule = InventTableModule::find(_inventTable.ItemId,ModuleInventPurchSales::Invent);
        inventDimParm.setActiveSiteAndProductDimensions(InventDimGroupSetup::newInventTable(_inventTable));

        Query query = new Query();
        QueryBuildDataSource qbdsInventTrans = query.addDataSource(tableNum(InventTrans));
        qbdsInventTrans.addSelectionField(fieldNum(InventTrans, Qty), SelectionField::Sum);

        QueryBuildRange queryBuildRange = qbdsInventTrans.addRange(fieldNum(InventTrans, ItemId));
        queryBuildRange.value(_inventTable.ItemId);

        queryBuildRange = qbdsInventTrans.addRange(fieldNum(InventTrans, DatePhysical));
        queryBuildRange.value(queryRangeConcat(queryRange(dateNull(), fromDate), SysQuery::valueNot(dateNull())));

        queryBuildRange = qbdsInventTrans.addRange(fieldNum(InventTrans, DateFinancial));
        queryBuildRange.value(queryValue(dateNull()));

        QueryBuildDataSource qbdsInventDim = qbdsInventTrans.addDataSource(tableNum(InventDim));
        qbdsInventDim.joinMode(JoinMode::InnerJoin);
        qbdsInventDim.relations(true);

        // The values of inventDimId and recId are not important, but values are needed
        // by the inventTable.costPcsPrice method. Only the active parms are of interest.
        qbdsInventDim.addSelectionField(fieldNum(InventDim, InventDimId), SelectionField::Max);
        qbdsInventDim.addSelectionField(fieldNum(InventDim, RecId), SelectionField::Max);

        inventDimParm.queryAddGroupByField(qbdsInventDim);

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            inventTrans = queryRun.get(tableNum(InventTrans)) as InventTrans;
            InventDim inventDim = queryRun.get(tableNum(InventDim)) as InventDim;
            inventValue += inventTrans.Qty * _inventTable.costPcsPrice('', inventDim, inventTableModule);
        }

        while select inventTrans
            order by DatePhysical
            where inventTrans.ItemId    == _inventTable.ItemId
               && inventTrans.DatePhysical <= toDate
               && inventTrans.DatePhysical >  fromDate
        {
            if (inventTrans.DatePhysical > lastDate)
            {
                costValue += this.calcInterest(inventValue,lastDate,inventTrans.DatePhysical);
                lastDate   = inventTrans.DatePhysical;
            }
            if (inventTrans.DateFinancial)
            {
                inventValue+= inventTrans.costValue();
            }
            else
            {
                inventValue+= inventTrans.Qty * _inventTable.costPcsPrice(inventTrans.InventDimId);
            }
        }

        if (toDate  > lastDate)
        {
            costValue += this.calcInterest(inventValue,lastDate,toDate);
        }

        return costValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCategory</Name>
				<Source><![CDATA[
    protected ABC getCategory(InventTable _inventTable)
    {
        return _inventTable.abcTieUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestDays</Name>
				<Source><![CDATA[
    protected Days interestDays()
    {
        return 365;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCategory</Name>
				<Source><![CDATA[
    protected void setCategory(
        InventTable _inventTable,
        ABC         _category)
    {
        _inventTable.abcTieUp = _category;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumUpValue</Name>
				<Source><![CDATA[
    protected void sumUpValue()
    {
        while (itemQueryRun.next())
        {
            InventTable inventTable = itemQueryRun.get(tableNum(InventTable)) as InventTable;
            if (inventTable.inventItemType().mustInventBeControlled()
             && inventTable.storageDimensionGroup()     // Only include properly configured items
             && inventTable.trackingDimensionGroup())
            {
                setPrefix(inventTable.ItemId + ' ' + inventTable.defaultProductName());

                Amount amount = this.calcItem(inventTable);
                this.saveAmount(inventTable,amount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventABC_CarrCost construct()
    {
        return new InventABC_CarrCost();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>