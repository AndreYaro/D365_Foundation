<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesNotStockedPostCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>SalesNotStockedPostCheck</c> class is used to check sales order lines when packing slip
///    posting or invoice posting a sales order line.
/// </summary>
class SalesNotStockedPostCheck extends TradeNotStockedPostCheck
{
    SalesLine            salesLine;
    SalesParmLine        salesParmLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lineRegisteredQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the registered quantity for the sales order line.
    /// </summary>
    /// <returns>
    ///    The registered quantity for the sales order line.
    /// </returns>
    protected UnitQty lineRegisteredQty()
    {
        return salesLine.registeredInSalesUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineUnitQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the sales quantity on the sales order line.
    /// </summary>
    /// <returns>
    ///    The sales quantity on the sales order line.
    /// </returns>
    protected UnitQty lineUnitQty()
    {
        return salesLine.SalesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overDeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the over-delivery percent defined on the sales order line.
    /// </summary>
    /// <returns>
    /// The over-delivery percent defined on the sales order line.
    /// </returns>
    protected Percent overDeliveryPct()
    {
        if (! SalesParameters::find().OverDelivery)
        {
            return 0;
        }

        return salesLine.OverDeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchLine</Name>
				<Source><![CDATA[
        public Common parmSalesPurchLine(Common _salesPurchLine = salesPurchLine)
    {
        salesPurchLine = _salesPurchLine;
        salesLine      = _salesPurchLine as SalesLine;
        return salesPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postComplete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the sales order line should be delivered in total.
    /// </summary>
    /// <returns>
    ///    true if the sales order line should be delivered in total; otherwise, false.
    /// </returns>
    protected boolean postComplete()
    {
        return salesLine.Complete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the post quantity for the sales line.
    /// </summary>
    /// <returns>
    ///    The post quantity depends on the type of the sales line.
    /// </returns>
    protected UnitQty qtyPost()
    {
        if (salesLine.SalesType == SalesType::Subscription)
        {
            return abs(this.lineUnitQty() - this.parmQtyRemainPhysicalBefore() + this.parmQtyPhysicalNow());
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPostedPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the physical posted quantity for the sales order line.
    /// </summary>
    /// <returns>
    ///    The physical posted quantity for the sales order line.
    /// </returns>
    protected UnitQty qtyPostedPhysical()
    {
        return salesLine.deliveredInTotal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>underDeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the under-delivery percent defined on the sales order line.
    /// </summary>
    /// <returns>
    /// The under-delivery percent defined on the sales order line.
    /// </returns>
    protected Percent underDeliveryPct()
    {
        if (! SalesParameters::find().SubDelivery)
        {
            return 0;
        }

        return salesLine.UnderDeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static SalesNotStockedPostCheck construct()
    {
        return new SalesNotStockedPostCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRemainPhysicalQtyZero</Name>
				<Source><![CDATA[
    protected boolean isRemainPhysicalQtyZero()
    {
        return salesLine.RemainSalesPhysical == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchUnit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the sales unit on the sales order line.
    /// </summary>
    /// <returns>
    ///    The sales unit on the sales order line.
    /// </returns>
    protected UnitOfMeasureSymbol salesPurchUnit()
    {
        return salesLine.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePhysicalBeforePosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the physical update of the not stocked order line before posting.
    /// </summary>
    /// <returns>
    ///    true if the physical update of the not stocked is OK; otherwise, false.
    /// </returns>
    public boolean checkUpdatePhysicalBeforePosting()
    {
        boolean             ok = true;

        ok = super();

        if (this.salesPurchUnit() != null &&
            this.parmQtyPhysicalNow() != decRound(this.parmQtyPhysicalNow(), UnitOfMeasure::unitOfMeasureDecimalPrecision(
                UnitOfMeasure::unitOfMeasureIdBySymbol(this.salesPurchUnit()))))
        {
            if (SalesParameters::find().DecimalPrecisionCheckQty)
            {
                ok = checkFailed(strFmt("@SCM:ViolateDecimalPrecisionRule", this.salesPurchUnit()));
            }
            else
            {
                warning(strFmt("@SCM:ViolateDecimalPrecisionRule", this.salesPurchUnit()));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>