<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendAutoSettleMarker</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustVendAutoSettleMarker
{
    private CustVendTrans settleTrans;
    private CustVendTransOpen settleTransOpen;
    private Common specContext;
    private AmountCur maxPennyDiff;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>markTransaction</Name>
				<Source><![CDATA[
    internal AmountCur markTransaction(CustVendAutoSettleMarkerParameters _parameters)
    {
        AmountCur availableDocumentAmountToSettle;

        if (this.validate(_parameters))
        {
            SpecTransManager specTransManager = SpecTransManager::newFromSpec(specContext, false);
            TransDate settlementDate = settleTrans.TransDate;

            boolean isSettleTransInvoice = settleTrans.Invoice != '';
            boolean isAvailableTransInvoice = _parameters.getAvailableTrans().Invoice != '';

            AmountCur totalSettleMarkedAmount = _parameters.getTotalSettleMarkedAmount();

            ModuleCustVend module = settleTransOpen.CustVendTransOpen::getModule();
            DiscGraceDays graceDays = this.findGraceDays(CustVendTrans::findByModule(module, settleTrans.RecId).PaymMode, module);

            if (isAvailableTransInvoice)
            {
                availableDocumentAmountToSettle = CustVendTransOpenData::construct(_parameters.getAvailableTransOpen()).remainAmountCashDisc(settlementDate, graceDays);
            }
            else
            {
                // Available payments settle the remaining open amount.
                availableDocumentAmountToSettle = _parameters.getAvailableTransOpen().AmountCur;
            }

            AmountCur settleDocumentAmountOpen = settleTransOpen.AmountCur;
            boolean isFinalMarkedTransaction;

            // When the total of available and running settled amounts exceed the amount for the settled document,
            // generate a partial payment for the remaining settled document amount.
            if (settleDocumentAmountOpen < 0
                && availableDocumentAmountToSettle + totalSettleMarkedAmount > -settleDocumentAmountOpen + maxPennyDiff)
            {
                availableDocumentAmountToSettle = -settleDocumentAmountOpen - totalSettleMarkedAmount;
                isFinalMarkedTransaction = true;
            }
            else if (settleDocumentAmountOpen > 0
                && availableDocumentAmountToSettle + totalSettleMarkedAmount < -(settleDocumentAmountOpen + maxPennyDiff))
            {
                availableDocumentAmountToSettle = -settleDocumentAmountOpen - totalSettleMarkedAmount;
                isFinalMarkedTransaction = true;
            }

            if (isSettleTransInvoice)
            {
                // The settled transaction already has a SpecTrans record before the autosettlement process begins.
                // This document must be adjusted to take the available cash discount.
                AmountCur invoiceAmountToSettle = this.updateSpecTransForInvoice(
                    specTransManager,
                    settleTransOpen,
                    settlementDate,
                    module,
                    graceDays,
                    availableDocumentAmountToSettle,
                    isFinalMarkedTransaction); // For the final, partial payment against an invoice, claim the entire cash discount.

                // Available documents should no claim no more than the settled amount less cash discount.
                availableDocumentAmountToSettle = this.adjustAmountToSettle(availableDocumentAmountToSettle, invoiceAmountToSettle);
            }

            AmountCur availableTransCashDiscountAmount;
            if (isAvailableTransInvoice)
            {
                availableTransCashDiscountAmount = this.findCashDiscount(
                    _parameters.getAvailableTransOpen(),
                    settlementDate,
                    module,
                    graceDays,
                    availableDocumentAmountToSettle);

                AmountCur invoiceTotalForPayment = availableDocumentAmountToSettle + totalSettleMarkedAmount;

                this.updateSpecTransForPayment(
                    specTransManager,
                    settleTransOpen,
                    invoiceTotalForPayment);
            }

            // Inserting the new debit document
            specTransManager.insert(
                _parameters.getAvailableTransOpen().DataAreaId,
                _parameters.getAvailableTransOpen().TableId,
                _parameters.getAvailableTransOpen().RecId,
                availableDocumentAmountToSettle,
                _parameters.getAvailableTrans().CurrencyCode,
                NoYes::No,
                availableTransCashDiscountAmount);
        }

        return availableDocumentAmountToSettle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    private boolean validate(CustVendAutoSettleMarkerParameters _parameters)
    {
        boolean isValid = true;

        if (specContext.RecId == 0
            || settleTrans.RecId == 0
            || settleTransOpen.RecId == 0
            || _parameters.getAvailableTrans().RecId == 0
            || _parameters.getAvailableTransOpen().RecId == 0)
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustAmountToSettle</Name>
				<Source><![CDATA[
    private AmountCur adjustAmountToSettle(AmountCur _amountToAdjust, AmountCur _amountToFactor)
    {
        AmountCur adjustedAmount = _amountToAdjust;

        if (abs(_amountToAdjust) > abs(_amountToFactor))
        {
            if (_amountToAdjust < 0)
            {
                adjustedAmount = -abs(_amountToFactor);
            }
            else if (_amountToAdjust > 0)
            {
                adjustedAmount = abs(_amountToFactor);
            }
        }

        return adjustedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSpecTransForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the settlement amount and cash discount amount on an existing <c>SpecTrans</c> record.
    /// </summary>
    /// <param name = "_specTransManager">
    /// The Spec reference for autosettlement.
    /// </param>
    /// <param name = "_custVendTransOpenInvoice">
    /// The reference for the <c>SpecTrans</c> record.
    /// </param>
    /// <param name "_module">
    /// The module for the cash discount calculation.
    /// </param>
    /// <param name "_graceDays">
    /// The grace days to apply to the cash discount calculation.
    /// </param>
    /// <param name = "_cashDiscountTransDate">
    /// The cash discount date for calculation.
    /// </param>
    /// <param name = "_amountToSettleForDocument">
    /// The expected settlement amount for the matched <c>SpecTrans</c> record.
    /// </param>
    /// <param name = "_shouldClaimPossibleCashDiscount">
    /// True if the <paramref name="_amountToSettleForDocument"></paramref> should be reduced by the possible cash discount amount; otherwise, false.
    /// </param>
    /// <returns>
    /// The adjustment amount for the existing <c>SpecTrans</c> record.
    /// </returns>
    /// <remarks>
    /// The amount to settle on the invoice will be no greater than the <paramref name="_amountToSettleForDocument"></paramref> parameter.
    /// It may be reduced by cash discounts.
    /// </remarks>
    private AmountCur updateSpecTransForInvoice(
        SpecTransManager _specTransManager,
        CustVendTransOpen _custVendTransOpenInvoice,
        TransDate _cashDiscountTransDate,
        ModuleCustVend _module,
        DiscGraceDays _graceDays,
        AmountCur _amountToSettleForDocument,
        boolean _shouldClaimPossibleCashDiscount = false)
    {
        AmountCur invoiceAmountToSettle = _custVendTransOpenInvoice.AmountCur;
        SpecTrans invoiceSpecTrans = SpecTrans::findByRef(
            _custVendTransOpenInvoice.company(),
            _custVendTransOpenInvoice.TableId,
            _custVendTransOpenInvoice.RecId);

        if (invoiceSpecTrans)
        {
            AmountCur documentAmountMinusPossibleCashDiscount = _amountToSettleForDocument;

            if (_shouldClaimPossibleCashDiscount)
            {
                documentAmountMinusPossibleCashDiscount = abs(_amountToSettleForDocument) - abs(_custVendTransOpenInvoice.PossibleCashDisc);

                if (_amountToSettleForDocument < 0)
                {
                    documentAmountMinusPossibleCashDiscount = -documentAmountMinusPossibleCashDiscount;
                }
            }

            CashDiscAmount invoiceCashDiscountToTake = this.findCashDiscount(
                _custVendTransOpenInvoice,
                _cashDiscountTransDate,
                _module,
                _graceDays,
                documentAmountMinusPossibleCashDiscount);

            AmountCur invoiceAvailableAmountWithCashDiscount = invoiceAmountToSettle - invoiceCashDiscountToTake;

            // Adjust cash discount to match the sign of the balance.
            if ((invoiceAmountToSettle < 0 && invoiceCashDiscountToTake > 0)
                || (invoiceAmountToSettle > 0 && invoiceCashDiscountToTake < 0))
            {
                invoiceCashDiscountToTake = -invoiceCashDiscountToTake;
            }

            // Adjust the cash discount to take to account for existing cash discounts.
            invoiceCashDiscountToTake += invoiceSpecTrans.CashDiscToTake;

            // Attempt to take the maximum cash discount for the invoice. This may require lowering the current balance
            // to account for the given cash discount amount.
            if (abs(invoiceAmountToSettle) > abs(invoiceAvailableAmountWithCashDiscount))
            {
                invoiceAmountToSettle = invoiceAvailableAmountWithCashDiscount;
            }

            _specTransManager.updateSettleBalanceAndDisc(
                _custVendTransOpenInvoice.company(),
                _custVendTransOpenInvoice.TableId,
                _custVendTransOpenInvoice.RecId,
                invoiceAmountToSettle,
                invoiceCashDiscountToTake,
                invoiceSpecTrans.SelectedDateUsedToCalcCashDisc);
        }

        return invoiceAmountToSettle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSpecTransForPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the settlement amount on an existing <c>SpecTrans</c> record.
    /// </summary>
    /// <param name = "_specTransManager">The Spec reference for autosettlement.</param>
    /// <param name = "_custVendTransOpenPayment">The transaction reference for the payment.</param>
    /// <param name = "_invoiceTotalAmount">The total invoice marked amount at this point in time.</param>
    private void updateSpecTransForPayment(
        SpecTransManager _specTransManager,
        CustVendTransOpen _custVendTransOpenPayment,
        AmountCur _invoiceTotalAmount)
    {
        SpecTrans paymentSpecTrans = SpecTrans::findByRef(
            _custVendTransOpenPayment.company(),
            _custVendTransOpenPayment.TableId,
            _custVendTransOpenPayment.RecId);

        if (paymentSpecTrans)
        {
            AmountCur paymentSettleAmount;

            if (abs(_invoiceTotalAmount) > abs(_custVendTransOpenPayment.AmountCur))
            {
                paymentSettleAmount = _custVendTransOpenPayment.AmountCur;
            }
            else
            {
                paymentSettleAmount = -_invoiceTotalAmount;
            }

            _specTransManager.updateSettleAmount(
                _custVendTransOpenPayment.company(),
                _custVendTransOpenPayment.TableId,
                _custVendTransOpenPayment.RecId,
                paymentSettleAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findGraceDays</Name>
				<Source><![CDATA[
    private DiscGraceDays findGraceDays(PaymMode _paymMode, ModuleCustVend _module)
    {
        DiscGraceDays graceDays = 0;

        if (_module == ModuleCustVend::Vend)
        {
            graceDays = VendPaymModeTable::discGraceDays(_paymMode);
        }
        else
        {
            graceDays = CustPaymModeTable::discGraceDays(_paymMode);
        }

        return graceDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCashDiscount</Name>
				<Source><![CDATA[
    private CashDiscAmount findCashDiscount(
        CustVendTransOpen _custVendTransOpen,
        TransDate _offsetTransactionDate,
        ModuleCustVend _module,
        DiscGraceDays _graceDays,
        AmountCur _offsetAmount)
    {
        CashDiscAmount cashDiscAmount;

        CustVendTransCashDisc custVendTransCashDisc = CustVendTransCashDisc::findByUseCashDisc(
            _module,
            _custVendTransOpen.TableId,
            _custVendTransOpen.RecId,
            _custVendTransOpen.UseCashDisc,
            _offsetTransactionDate,
            _graceDays);

        if (custVendTransCashDisc)
        {
            CustVendCashDiscountHelper cashDiscountHelper = CustVendCashDiscountHelper::construct(_custVendTransOpen);
            cashDiscountHelper.parmFullCashDiscountForTier(custVendTransCashDisc.CashDiscAmount);
            cashDiscountHelper.parmCashDiscountTaken(0);

            cashDiscAmount = cashDiscountHelper.determineCashDiscForPartialSettlement(_offsetAmount);
        }

        return cashDiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CustVendAutoSettleMarker construct(
        CustVendTrans _settleTrans,
        CustVendTransOpen _settleTransOpen,
        common _specContext,
        AmountCur _maxPennyDiff)
    {
        CustVendAutoSettleMarker marker = new CustVendAutoSettleMarker();
        marker.settleTrans = _settleTrans;
        marker.settleTransOpen = _settleTransOpen;
        marker.specContext = _specContext;
        marker.maxPennyDiff = _maxPennyDiff;

        return marker;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>