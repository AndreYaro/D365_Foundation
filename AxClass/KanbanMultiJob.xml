<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanMultiJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanMultiJob</c> class handles status updates for kanban jobs.
/// It is based on the <c>RunbaseMultiParm</c> class.
/// </summary>
public abstract class KanbanMultiJob extends KanbanMulti
{
    KanbanJobStatusUpdate   standardKanbanJobStatusUpdate;

    private KanbanInstrumentationLogger instrumentationLogger;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        standardKanbanJobStatusUpdate
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the <c>KanbanJob</c> buffer.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    The <c>KanbanJob</c> table buffer to check.
    /// </param>
    /// <returns>
    ///    true if the record is valid and the end status update can be performed; otherwise, false.
    /// </returns>
    public boolean checkBuffer(Common _kanbanJob)
    {
        KanbanJob kanbanJob = _kanbanJob as KanbanJob;
        Common anyBuffer;

        return    !KanbanJobStatusUpdate::existParmIdJob(parmId,_kanbanJob.RecId)
               && kanbanJob.status().runStatusUpdate(anyBuffer,this.targetKanbanJobStatus(kanbanJob),true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables any cleanup that must be done after a dialog box has been canceled.
    /// </summary>
    public void cleanupDialog()
    {
        super();
        KanbanJobStatusUpdate::deleteParameters(this.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default <c>ParmBuffer</c> Map table buffer.
    /// </summary>
    /// <returns>
    /// A blank <c>KanbanJobStatusUpdate</c> table buffer.
    /// </returns>
    public ParmBuffer defaultParmBuffer()
    {
        KanbanJobStatusUpdate   kanbanJobStatusUpdate;
        return kanbanJobStatusUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the form that is used to specify parameters for the status update.
    /// </summary>
    /// <returns>
    ///    The name of the form.
    /// </returns>
    public formName formName()
    {
        return formstr(KanbanJobStatusUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>KanbanJob</c> class variable.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the <c>KanbanJob</c> to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    The <c>KanbanJob</c> table buffer.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The provided record ID is not valid.
    /// </exception>
    protected KanbanJob initKanbanJob(
        KanbanJobRefRecId _refRecId,
        boolean           _forUpdate = false)
    {
        KanbanJob kanbanJob = KanbanJob::find(_refRecId,_forUpdate);

        if (!kanbanJob.checkValid(kanbanJob.RecId))
        {
            throw error("@SYS18447");
        }

        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>ParmBuffer</c> buffer.
    /// </summary>
    /// <param name="_kanbanJobStatusUpdate">
    ///    A mapped <c>ParmBuffer</c> record buffer.
    /// </param>
    public void initParmBuffer(ParmBuffer _kanbanJobStatusUpdate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes and inserts a record into the <c>KanbanJobStatusUpdate</c> table.
    /// </summary>
    /// <param name="_common">
    ///    A table buffer used to initialize the record.
    /// </param>
    /// <param name="_parmBuffer">
    ///    The <c>KanbanJobStatusUpdate</c> record to insert.
    /// </param>
    /// <remarks>
    ///    The table buffer must be either a <c>KanbanJob</c> record or have a <c>Job</c> field that contains
    ///    a record ID for a <c>KanbanJob</c> record.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The kanban job does not exist.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The table buffer has no <c>Job</c> field.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The provided <c>ParmBuffer</c> table buffer is unexpected. The method must be called by using a
    ///    <c>KanbanJobStatusUpdate</c> buffer.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The kanban job cannot be updated to the requested status.
    /// </exception>
    public void insert(
        Common     _common,
        ParmBuffer _parmBuffer)
    {
        KanbanJob               kanbanJob;

        switch (_common.TableId)
        {
            case tablenum(KanbanJob):
                kanbanJob = _common;
                break;
            default:
                fieldId fieldId = fieldname2id(_common.TableId, fieldstr(KanbanJobStatusUpdate, Job));
                if (fieldId)
                {
                    kanbanJob = KanbanJob::find(_common.(fieldId));
                    if (!kanbanJob)
                    {
                        throw error(strfmt("@SYS135876", (_common.(fieldId))));
                    }
                }
                else
                {
                    throw error(strfmt("@SYS135877", tableid2pname(_common.TableId), fieldstr(KanbanJobStatusUpdate,Job)));
                }
                break;
        }

        if (_parmBuffer.TableId != tablenum(KanbanJobStatusUpdate))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        KanbanJobStatusUpdate kanbanJobStatusUpdate = _parmBuffer;
        KanbanJobStatus       kanbanJobStatus       = kanbanJob.status();
        LeanKanbanJobStatus   targetKanbanJobStatus = this.targetKanbanJobStatus(kanbanJob);

        if (   (!this.isStatusReset()
            &&  kanbanJobStatus.isStatusUpdateAllowed(targetKanbanJobStatus))
            ||  (this.isStatusReset()
            &&   kanbanJobStatus.isStatusResetAllowed(targetKanbanJobStatus)))
        {
            if (!parmId)
            {
                RunBaseMultiParm::initParm(this);
            }

            super(kanbanJob,kanbanJobStatusUpdate);

            kanbanJobStatusUpdate = kanbanJobStatus.initStatusUpdate(kanbanJobStatusUpdate, targetKanbanJobStatus);
            kanbanJobStatusUpdate.insert();
        }
        else
        {
            throw error(strfmt("@SYS134358", kanbanJob.kanbanId(), kanbanJob.PlanActivityName, targetKanbanJobStatus));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the highest line number in the <c>KanbanJobStatusUpdate</c> record for the current
    ///    parameter ID.
    /// </summary>
    /// <returns>
    ///    The highest line number.
    /// </returns>
    public LineNum lastLineNum()
    {
        return KanbanJobStatusUpdate::lastLineNum(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardParm</Name>
				<Source><![CDATA[
    public ParmBuffer parmStandardParm(ParmBuffer _standardKanbanJobStatusUpdate = standardKanbanJobStatusUpdate)
    {
        standardKanbanJobStatusUpdate = _standardKanbanJobStatusUpdate;
        return standardKanbanJobStatusUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes code before the main processing is executed.
    /// </summary>
    protected void preRun()
    {
        if (   !this.isInBatch()
            && !this.isStatusReset())
        {
            KanbanMultiJobDimPhysicalPick::newStandard(this.parmId(),this.targetKanbanJobStatus()).run();
            KanbanMultiJobDimPhysicalRegister::newStandard(this.parmId(),this.targetKanbanJobStatus()).run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the status update.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The validation failed.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict occurred and was not recovered.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict occurred.
    /// </exception>
    public void run()
    {
        this.initStatusUpdate();

        // dialog if needed
        boolean doRun = this.parmId()
                && (!this.mustUseDialog()
                ||  this.prompt());

        // run
        if (doRun)
        {
            if (! this.validate())
            {
                throw error("@SYS18447");
            }

            this.preRun();

            KanbanJobStatusUpdate kanbanJobStatusUpdate = this.setParmBuffer();

            while (kanbanJobStatusUpdate)
            {
                boolean isStatusReset = this.isStatusReset();

                using (var a = this.logger().kanbanJobActivities().runKanbanJobStatusUpdate(kanbanJobStatusUpdate.WantedStatus, isStatusReset))
                {
                    try
                    {
                        if (isStatusReset)
                        {
                            this.runStatusReset(kanbanJobStatusUpdate);
                        }
                        else
                        {
                            KanbanMultiJob::callIL([classIdGet(this), buf2Con(kanbanJobStatusUpdate, true), this.pack()]);
                        }

                        next kanbanJobStatusUpdate;
                    }
                    catch (Exception::Error)
                    {
                        // In case of error in one of the status updates,
                        // continue processing the remaining ones
                        next kanbanJobStatusUpdate;
                    }
                }
            }

            this.postRun();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logger</Name>
				<Source><![CDATA[
    private KanbanInstrumentationLogger logger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = KanbanInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the status update for one <c>KanbanJobStatusUpdate</c> record.
    /// </summary>
    /// <param name="_kanbanJobStatusUpdate">
    ///  The <c>KanbanJobStatusUpdate</c> record.
    /// </param>
    protected void runStatus(KanbanJobStatusUpdate _kanbanJobStatusUpdate)
    {
        this.initKanbanJob(_kanbanJobStatusUpdate.Job).status().runStatusUpdate(_kanbanJobStatusUpdate,
                                                                                _kanbanJobStatusUpdate.Type,
                                                                                false,
                                                                                this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatusReset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the status update for one <c>KanbanJobStatusUpdate</c> record.
    /// </summary>
    /// <param name="_kanbanJobStatusUpdate">
    ///  The <c>KanbanJobStatusUpdate</c> record.
    /// </param>
    protected void runStatusReset(KanbanJobStatusUpdate _kanbanJobStatusUpdate)
    {
        if (!this.initKanbanJob(_kanbanJobStatusUpdate.Job).status().runStatusReset(_kanbanJobStatusUpdate,
                                                                               _kanbanJobStatusUpdate.WantedStatus,
                                                                               false,
                                                                               this))
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>targetKanbanJobStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a <c>LeanKanbanJobStatus</c> enumeration value that represents the target status.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    A <c>KanbanJob</c> table buffer.
    /// </param>
    /// <returns>
    ///    The target status.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    No <c>KanbanJob</c> table buffer is specified.
    /// </exception>
    public LeanKanbanJobStatus targetKanbanJobStatus(KanbanJob _kanbanJob = null)
    {
        if (!_kanbanJob)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return this.isStatusReset() ? _kanbanJob.status().prevStatus() : _kanbanJob.status().nextStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret;
        Integer     version     = conpeek(_packedClass,1);
        container   base;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList,base] = _packedClass;
                ret = super(base);
                break;
            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callIL</Name>
				<Source><![CDATA[
    private static void callIL(container _pack)
    {
        KanbanMultiJob::runStatusIL(_pack);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS131637" ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the class.
    /// </summary>
    /// <param name="_args">
    ///    A <c>Args</c> object that is used to initiate the <c>KanbanMultiJob</c> class instance.
    /// </param>
    /// <param name="_leanKanbanJobStatus">
    ///    A <c>LeanKanbanJobStatus</c> enumeration value that is used to initiate the <c>KanbanMultiJob</c>
    ///    class instance.
    /// </param>
    /// <param name="_reset">
    ///    A Boolean value that indicates whether a reset object must be instantiated; optional.
    /// </param>
    /// <returns>
    ///    An instance of the <c>KanbanMultiJob</c> class.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="_leanKanbanJobStatus" /> parameter determines which <c>KanbanMultiJob</c> class
    ///    is instantiated.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The method was incorrectly called.
    /// </exception>
    public static KanbanMultiJob newArgs(
        Args                _args,
        LeanKanbanJobStatus _leanKanbanJobStatus,
        boolean             _reset = false)
    {
        if (!_args)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        KanbanMultiJob kanbanMultiJob = KanbanMultiJob::newParameters(_leanKanbanJobStatus,
                                                                      _reset,
                                                                      KanbanMulti::kanbanMultiMode(_args),
                                                                      _args.parm(),
                                                                      null,
                                                                      KanbanMulti::selectedFormRecordsToContainer(_args));

        return kanbanMultiJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCallerBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>KanbanMultiJob</c> class.
    /// </summary>
    /// <param name="_leanKanbanJobStatus">
    ///    A <c>LeanKanbanJobStatus</c> enumeration value to use to instantiate the class.
    /// </param>
    /// <param name="_callerBuffer">
    ///    A <c>KanbanJob</c> table buffer used to initiate the class.
    /// </param>
    /// <param name="_silent">
    ///    A Boolean value that indicates whether processing must occur silently; optional.
    /// </param>
    /// <param name="_caller">
    ///    An object that represents the caller.
    /// </param>
    /// <param name="_reset">
    ///    A Boolean value that indicates if a reset object must be initiated.
    /// </param>
    /// <returns>
    ///    A new <c>KanbanMultiJob</c> instance.
    /// </returns>
    /// <remarks>
    ///    The buffer must be a <c>KanbanJob</c> record or a table that contains a <c>Job</c> field.The caller
    ///    should be the calling form if one is available. This form will be used to send messages to,
    ///    provided a message board is present.
    /// </remarks>
    public static KanbanMultiJob newCallerBuffer(
        LeanKanbanJobStatus _leanKanbanJobStatus,
        KanbanJob           _callerBuffer,
        boolean             _silent = true,
        Object              _caller = null,
        boolean             _reset  = false)
    {
        KanbanMultiJob kanbanMultiJob = KanbanMultiJob::newParameters(_leanKanbanJobStatus,
                                                                      _reset,
                                                                      _silent ? KanbanMultiMode::Silent : KanbanMultiMode::Form,
                                                                      '',
                                                                      _callerBuffer,
                                                                      connull());

        return kanbanMultiJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCallerListBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>KanbanMultiJob</c> class.
    /// </summary>
    /// <param name="_leanKanbanJobStatus">
    ///    A <c>LeanKanbanJobStatus</c> enumeration value to use to initiate the class.
    /// </param>
    /// <param name="_callerListBuffer">
    ///    A list of records to use to initiate the class.
    /// </param>
    /// <param name="_silent">
    ///    A Boolean value that indicates whether processing must occur silently; optional.
    /// </param>
    /// <param name="_reset">
    ///    A Boolean value indicating whether a reset object must be initiated.
    /// </param>
    /// <returns>
    ///    A new <c>KanbanMultiJob</c> class instance.
    /// </returns>
    /// <remarks>
    ///    The list must be a list of the <c>KanbanJob</c> records or of a table that contains a <c>Job</c>
    ///    field.The caller must be the calling form, if one is available. This form will be used to send
    ///    messages to, provided that a message board is present.
    /// </remarks>
    public static KanbanMultiJob newCallerListBuffer(
        LeanKanbanJobStatus _leanKanbanJobStatus,
        List                _callerListBuffer,
        boolean             _silent = true,
        boolean             _reset  = false)
    {
        KanbanMultiJob kanbanMultiJob = KanbanMultiJob::newParameters(_leanKanbanJobStatus,
                                                                      _reset,_silent ? KanbanMultiMode::Silent : KanbanMultiMode::Form,
                                                                      '',
                                                                      null,
                                                                      _callerListBuffer.pack());

        return kanbanMultiJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the class.
    /// </summary>
    /// <param name="_leanKanbanJobStatus">
    ///    A <c>LeanKanbanJobStatus</c> enumeration value to use to initiate the <c>KanbanMultiJob</c>
    ///    instance.
    /// </param>
    /// <param name="_reset">
    ///    A Boolean value that indicates whether a reset object must be initiated.
    /// </param>
    /// <param name="_kanbanMultiMode">
    ///    A <c>KanbanMultiMode</c> enumeration value.
    /// </param>
    /// <param name="_parmId">
    ///    A <c>ParmId</c> enumeration value.
    /// </param>
    /// <param name="_callerBuffer">
    ///    A <c>KanbanJob</c> record buffer.
    /// </param>
    /// <param name="_containerRecords">
    ///    A container of record buffers; otherwise, null elements must be either the <c>Kanban</c> or
    ///    <c>KanbanJob</c> records.
    /// </param>
    /// <returns>
    ///    An instance of the<c>KanbanMultiJob</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    Cannot instantiate the object that corresponds to a given <c>LeanKanbanJobStatus</c> enumeration
    ///    value.
    /// </exception>
    protected static KanbanMultiJob newParameters(
        LeanKanbanJobStatus _leanKanbanJobStatus,
        boolean             _reset,
        KanbanMultiMode     _kanbanMultiMode,
        ParmId              _parmId,
        KanbanJob           _callerBuffer,
        container           _containerRecords)
    {
        KanbanMultiJob  kanbanMultiJob;

        if (_reset)
        {
            switch (_leanKanbanJobStatus)
            {
                case LeanKanbanJobStatus::NotPlanned:
                    kanbanMultiJob = KanbanMultiJobResetNotPlanned::construct();
                    break;
                default:
                    kanbanMultiJob = KanbanMultiJobReset::construct();
                    break;
            }
        }
        else
        {
            switch (_leanKanbanJobStatus)
            {
                case LeanKanbanJobStatus::Planned:
                    kanbanMultiJob = KanbanMultiJobPlan::construct();
                    break;
                case LeanKanbanJobStatus::Prepared:
                    kanbanMultiJob = KanbanMultiJobPrepare::construct();
                    break;
                case LeanKanbanJobStatus::InProgress:
                    kanbanMultiJob = KanbanMultiJobInProgress::construct();
                    break;
                case LeanKanbanJobStatus::Completed:
                    kanbanMultiJob = KanbanMultiJobComplete::construct();
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcname()));
            }
        }

        kanbanMultiJob.parmkanbanMultiMode(_kanbanMultiMode);
        kanbanMultiJob.parmId(_parmId);
        kanbanMultiJob.parmCallerBuffer(_callerBuffer);
        kanbanMultiJob.parmCallerContainerBuffer(_containerRecords);

        return kanbanMultiJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParmId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>KanbanMultiJob</c> class.
    /// </summary>
    /// <param name="_leanKanbanJobStatus">
    ///    A <c>LeanKanbanJobStatus</c> enumeration value to use to initiate the class.
    /// </param>
    /// <param name="_parmId">
    ///    A <c>ParmId</c> string value to use to initiate the class.
    /// </param>
    /// <param name="_silent">
    ///    A Boolean value that indicates whether processing must occur silently; optional.
    /// </param>
    /// <param name="_reset">
    ///    A Boolean value indicating whether a reset object must be initiated.
    /// </param>
    /// <returns>
    ///    A new <c>KanbanMultiJob</c> instance.
    /// </returns>
    /// <remarks>
    ///    The buffer must be a <c>KanbanJob</c> record or a table that contains a <c>Job</c> field.The caller
    ///    must be the calling form if one is available. This form will be used to send messages to, provided
    ///    that a message board is present.
    /// </remarks>
    public static KanbanMultiJob newParmId(
        LeanKanbanJobStatus _leanKanbanJobStatus,
        ParmId              _parmId,
        boolean             _silent = true,
        boolean             _reset  = false)
    {
        KanbanMultiJob kanbanMultiJob = KanbanMultiJob::newParameters(_leanKanbanJobStatus,
                                                                      _reset,_silent ? KanbanMultiMode::Silent : KanbanMultiMode::Form,
                                                                      _parmId,
                                                                      null,
                                                                      connull());

        return kanbanMultiJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatusIL</Name>
				<Source><![CDATA[
    private static container runStatusIL(container _pack)
    {
        #DEFINE.ClassIdPosition(1)
        #DEFINE.BufferPosition(2)
        #DEFINE.PackedClassPosition(3)

        ClassId                 classId = conPeek(_pack, #ClassIdPosition);
        KanbanJobStatusUpdate   kanbanJobStatusUpdate = con2Buf(conPeek(_pack, #BufferPosition));
        container               packedClass = conPeek(_pack, #PackedClassPosition);

        KanbanMultiJob kanbanMultiJob = classfactory.createClass(classId) as KanbanMultiJob;

        if (kanbanMultiJob == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        kanbanMultiJob.unpack(packedClass);

        try
        {
            kanbanMultiJob.runStatus(kanbanJobStatusUpdate);
        }
        catch(Exception::Error)
        {
            // Since this function is called explicitly
            // in IL this exception gets converted to
            // a very technical error info log item
            // with full call stack. in order to prevent
            // this message being displayed in the kanban board
            // messages section the error is silenced.
            // (it's assumed that errors are thrown with infolog
            // entry anyway)
            Global::exceptionTextFallThrough();
        }

        return conNull();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>