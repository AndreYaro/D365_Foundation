<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdCostConvert_Level</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventStdCostConvert_Level</c> class represents a BOM level and performs some checks to
///    determine whether the next level can be processed.
/// </summary>
/// <remarks>
///    This class is only used when the conversion is running in batch.
/// </remarks>
class InventStdCostConvert_Level extends InventStdCostConvert implements BatchRetryable
{
    BOMLevel        bomLevel;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        bomLevel
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the next level can be processed.
    /// </summary>
    /// <remarks>
    ///    This check will only be performed when the <c>stopOnError</c> value is set to Yes.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The value of the <c>stopOnError</c> value is set to Yes and not all of the items have been
    ///    processed, the conversion will be exited.
    /// </exception>
    protected void execute()
    {
        InventTable             inventTable;
        InventStdCostConvItem   inventStdCostConvItem;

        setPrefix(InventStdCostConvert_Level::description());

        if (this.inventStdCostConv() && stopOnError == NoYes::Yes )
        {
            // Check if all the items on the lower level had been converted
            select firstonly RecId from inventStdCostConvItem
                where inventStdCostConvItem.StdCostConvRecId == this.inventStdCostConv().RecId
                   && inventStdCostConvItem.Status           != InventStdCostConvItemStatus::Converted
                exists join inventTable
                where inventTable.ItemId   == inventStdCostConvItem.ItemId
                   && inventTable.bomLevel == bomLevel + 1;

            // At least one item on the lower level was not converted and
            // stop on error is set to now
            if (inventStdCostConvItem.RecId )
            {
                throw error("@SYS121564");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the caption for a batch record.
    /// </summary>
    /// <param name="batch">
    ///    The batch record where the caption should be set.
    /// </param>
    public void initBatch(Batch batch)
    {
        super(batch);

        batch.Caption = InventStdCostConvert_Level::description() + ' - ' + int2str(bomLevel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBomLevel</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public BOMLevel parmBomLevel(BOMLevel _bomLevel = bomLevel)
    {
        bomLevel = _bomLevel;

        return bomLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  packedClass)
    {
        Integer  version = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                container base;
                [version, #CurrentList, base] = packedClass;
                return super(base);

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventStdCostConvert_Level</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>InventStdCostConvert_Level</c> class from the convert work type of the
    ///    inventory standard cost.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The function is called by using an invalid conversion work type.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static InventStdCostConvert_Level construct()
    {
        return new InventStdCostConvert_Level();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS121563";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>