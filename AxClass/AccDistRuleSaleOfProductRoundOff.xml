<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccDistRuleSaleOfProductRoundOff</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CashSaleOfProduct), MonetaryAmount::RoundingAmount),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CreditSaleOfProduct), MonetaryAmount::RoundingAmount),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, ReturnOfProduct), MonetaryAmount::RoundingAmount)
]
class AccDistRuleSaleOfProductRoundOff extends AccountingDistributionRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUseDiscountMainAccDimListProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a discount monetary amount specific main account dimension list provider can be used
    /// to derive main account dimension values that are required for classifying the financial
    /// consequences of a discount.
    /// </summary>
    /// <returns>
    /// true if the main account list provider can be used; otherwise, false.
    /// </returns>
    public boolean canUseDiscountMainAccDimListProvider()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        return LedgerPostingType::SalesRoundOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        DebitCredit side = DebitCredit::Credit;

        if (this.parmAmount() < 0.0)
        {
            side = DebitCredit::Debit;
        }

        return side;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>