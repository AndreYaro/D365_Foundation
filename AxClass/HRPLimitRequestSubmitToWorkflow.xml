<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>hrpLimitRequestSubmitToWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>HRPLimitRequestSubmitToWorkflow</c> class is called when the user submits a particular
///    request for workflow.
/// </summary>
public class hrpLimitRequestSubmitToWorkflow
{
    HRPLimitRequest  limitRequest;
    menuItemName  menuItemName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the workflow objects.
    /// </summary>
    /// <param name="_documentRecord">
    ///    The workflow document record that is utilized in the workflow.
    /// </param>
    /// <param name="_menuItemName">
    ///    The submit menu item that is used for the new limit request workflow.
    /// </param>
    public void init(Common _documentRecord, menuItemName _menuItemName)
    {
        this.parmLimitRequest(_documentRecord);
        this.parmMenuItemName(_menuItemName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLimitRequest</Name>
				<Source><![CDATA[
    public HRPLimitRequest parmLimitRequest(HRPLimitRequest  _limitRequest = limitRequest)
    {
        limitRequest = _limitRequest;
        return limitRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuItemName</Name>
				<Source><![CDATA[
    public menuItemName parmMenuItemName(menuItemName _menuItemName = menuItemName)
    {
        menuItemName = _menuItemName;
        return menuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Activates the <c>HRPLimitTemplate</c> workflow template.
    /// </summary>
    public void submit()
    {
        WorkflowVersionTable workflowVersionTable = Workflow::findWorkflowConfigurationToActivate(limitRequest, workflowTypeStr(HRPLimitTemplate));

        if (workflowVersionTable)
        {
            Workflow::activateFromWorkflowConfigurationId(workflowVersionTable.ConfigurationId, limitRequest.RecId, limitRequest.Justification, NoYes::No);

            ttsbegin;
            limitRequest.SigningLimitWorkflowStatus = HRPLimitWorkflowState::Submitted;
            limitRequest.RequestState = HRPLimitRequestStatus::RequestSubmitted;
            limitRequest.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the limit request can be submitted to workflow.
    /// </summary>
    /// <param name="_limitRequest">
    ///    Provides the current row buffer of limit request table.
    /// </param>
    /// <returns>
    ///    true if limit request can be submitted to workflow; otherwise, false.
    /// </returns>
    public static boolean canSubmit(HRPLimitRequest _limitRequest)
    {
        return _limitRequest.canSubmit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static HRPLimitRequestSubmitToWorkflow construct()
    {
        return new HRPLimitRequestSubmitToWorkflow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        HRPLimitRequestSubmitToWorkflow limitRequestWorkflow = HRPLimitRequestSubmitToWorkflow::construct();
        HRPLimitRequest limitRequest;
        MenuItemName callerMenuItemName;

        if (!_args || !_args.record() || !_args.menuItemName())
        {
            throw error("@SYS25407");
        }

        limitRequest = _args.record();
        callerMenuItemName = _args.menuItemName();

        switch (callerMenuItemName)
        {
            case menuItemActionStr(EssSigningLimitWorkflowSubmit):
            case menuItemActionStr(EssSigningLimitRequestResubmit):
                //Submit document to workflow
                if (HRPLimitRequestSubmitToWorkflow::canSubmit(limitRequest))
                {
                    limitRequestWorkflow.init(limitRequest, callerMenuItemName);
                    limitRequestWorkflow.submit();
                }
                break;

            case menuItemActionStr(EssSigningLimitRequestApproval):
            case menuItemActionStr(EssSigningLimitRequestDeny):
            case menuItemActionStr(EssSigningLimitRequestDelegate):
                //Approve/Deny/Delegate the Limit Request
                WorkflowWorkItemActionManager workflowWorkItemActionManager = new WorkflowWorkItemActionManager();

                workflowWorkItemActionManager.parmArgs(_args);
                workflowWorkItemActionManager.parmCaller(_args.caller());
                workflowWorkItemActionManager.run();
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>