<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCommandExpireRules</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LeanCommandExpireRules extends LeanCommandBase
{
    Plan    deactivatedPlan;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates all kanban rules related to a lean production flow version being activated.
    /// </summary>
    /// <returns>
    ///    true if the update was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The method is executed in a transaction scope provided by the lean rules engine.
    /// </remarks>
    protected boolean execute()
    {
        boolean                     result = true;
        LeanCoverageKanbanRule      leanCoverageKanbanRule;
        KanbanFlow                  kanbanFlow;
        KanbanRule                  kanbanRule;
        PlanPlanActivity            planPlanActivity;
        utcdatetime                 now         = DateTimeUtil::getSystemDateTime();
        LegalEntity                 legalEntity = CompanyInfo::current();

        if (deactivatedPlan.legalEntity() != legalEntity)
        {
            result = checkFailed(strfmt("@SYS332728",deactivatedPlan.VersionNum));
        }

        if (result)
        {
            while select forupdate leanCoverageKanbanRule
                order by leanCoverageKanbanRule.RecId
                where (!leanCoverageKanbanRule.ValidTo || leanCoverageKanbanRule.ValidTo >= now)
                    exists join kanbanRule
                        where kanbanRule.RecId       == leanCoverageKanbanRule.KanbanRule
                           && kanbanRule.LegalEntity == legalEntity
                    exists join kanbanFlow
                        where kanbanFlow.RecId == kanbanRule.KanbanFlow
                    exists join planPlanActivity
                        where (planPlanActivity.RecId == kanbanFlow.FirstPlanPlanActivity
                           ||  planPlanActivity.RecId == kanbanFlow.LastPlanPlanActivity)
                           && planPlanActivity.Plan   == deactivatedPlan.RecId

            {
                leanCoverageKanbanRule.ValidTo = now;

                if (leanCoverageKanbanRule.ValidTo < leanCoverageKanbanRule.ValidFrom)
                {
                    leanCoverageKanbanRule.ValidFrom = leanCoverageKanbanRule.ValidTo;
                }

                leanCoverageKanbanRule.update();
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeactivatedPlan</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Plan parmDeactivatedPlan(Plan _deactivatedPlan = deactivatedPlan)
    {
        deactivatedPlan = _deactivatedPlan;

        return deactivatedPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected static LeanCommandExpireRules construct()
    {
        return new LeanCommandExpireRules();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of the <c>LeanCommandExpireRules</c> class.
    /// </summary>
    /// <param name="_deactivatedPlan">
    ///    The plan of the lean production flow type that is being deactivated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>LeanCommandExpireRules</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanCommandExpireRules newStandard(Plan _deactivatedPlan)
    {
        LeanCommandExpireRules leanCommandExpireRules = LeanCommandExpireRules::construct();

        leanCommandExpireRules.parmDeactivatedPlan(_deactivatedPlan);

        return leanCommandExpireRules;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>