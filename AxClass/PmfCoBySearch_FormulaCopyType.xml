<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfCoBySearch_FormulaCopyType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Search to match formula Co/By records to be used when copying.
/// </summary>
/// <remarks>
/// This class provides additional methods for sub-classes to refine the list of
/// retrieved records.
/// </remarks>
public class PmfCoBySearch_FormulaCopyType extends PmfCoBySearch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Programmatically determine if the current matching Co/By record is valid.
    /// </summary>
    /// <returns>True if the current record is valid.</returns>
    /// <remarks>
    /// This implementation always returns true. Sub-classes may use this to
    /// further refine which Co/By records that already located by the parent
    /// search logic are valid for this search instance.
    /// <syntax>
    /// public boolean isValid()
    /// </syntax>
    /// </remarks>
    public boolean isValid()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard protected new.
    /// </summary>
    /// <param name="_bomId">BOMId to use</param>
    /// <param name="_recId">RecId of the BOMVersion</param>
    /// <param name="_forUpdate">Optional. Specifiy if the records retrieved should be automatically locked for update. Default is false.</param>
    /// <param name="_itemId">Optional. ItemId to use. Default is blank.</param>
    protected void new(
        BOMId   _bomId,
        RecId   _recId,
        boolean _forUpdate  = false,
        ItemId  _itemId     = '')
    {
        super(_bomId,_recId,_itemId,true,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Advance to the next record.
    /// </summary>
    /// <returns>True if the next record is valid; false if there are no more records.</returns>
    /// <remarks>
    /// This will skip any records where isValid() returns false.
    /// </remarks>
    public boolean next()
    {
        boolean isNext;

        do
        {
            isNext = super();
        }
        while (isNext && !this.isValid());

        if (formulaCoBy)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method return an instance of the Formula Co/By search copy class
    /// </summary>
    /// <param name="_bomId">BOMId to use</param>
    /// <param name="_recId">RecId of the BOMVersion</param>
    /// <param name="_forUpdate">Optional. Specifiy if the records retrieved should be automatically locked for update. Default is false.</param>
    /// <param name="_itemId">Optional. ItemId to use. Default is blank.</param>
    /// <returns>An instance of class</returns>
    public static PmfCoBySearch_FormulaCopyType construct(
        BOMId   _bomId,
        RecId   _recId,
        boolean _forUpdate  = false,
        ItemId  _itemId     = '')
    {
        return new PmfCoBySearch_FormulaCopyType(_bomId,_recId, _forUpdate, _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMRouteCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method return an instance of the Formula Co/By search copy class
    /// </summary>
    /// <param name="_copy">Instance of the BOMRouteCopyJob</param>
    /// <returns>An instance of class</returns>
    /// <remarks>
    /// The new search object will be initialized automatically.
    /// </remarks>
    public static PmfCoBySearch_FormulaCopyType newBOMRouteCopy(
        BOMRouteCopyJob _copy)
    {
        PmfCoBySearch_FormulaCopyType search;
        InventDim  inventDim;

        inventDim.InventSiteId = _copy.parmFromSiteId();
        inventDim = InventDim::findDim(inventDim);
        search = new PmfCoBySearch_FormulaCopyType(
            _copy.parmFromBOMId(),
            _copy.parmPmfFromVerRecId(),
            false,
            _copy.parmFromItemId());

        search.init();

        return search;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormulaCopyDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the Co/By search copy classs.
    /// </summary>
    /// <param name="_bomId">BOMId to use</param>
    /// <param name="_recId">RecId of the BOMVersion</param>
    /// <returns>An instance of Co/By search copy</returns>
    /// <remarks>
    /// The new search object will be initialized automatically.
    /// </remarks>
    public static PmfCoBySearch newFormulaCopyDelete(
        BOMId           _bomId,
        RecId           _recId
        )
    {
        PmfCoBySearch_FormulaCopyType   search;

        search = new PmfCoBySearch_FormulaCopyType(
            _bomId,
            _recId,
            true);

        search.parmForcedSkipHierarchy(true);
        search.init();

        return search;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>