<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailBuyersPushFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailBuyersPushFormHelper</c> class for processing the delegated calls from the <c>RetailBuyersPush</c> form and the <c>RetailBuyersPushPerPackage</c> form.
/// </summary>
/// <remarks>
/// It enables the following functions from the form; create transfer orders for the cross docked
/// quantitites, clear the cross docked quantities, and also getting and setting the quantities that
/// are allocated to cross docking. Furthermore it also exposes the API for the form to validate if
/// the cross docking conforms to the rules of cross docking at the package level.
/// </remarks>
class RetailBuyersPushFormHelper
{
    // The buyers push ID that is managed here.
    RetailBuyersPushId       pushId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the cross docked quantities.
    /// </summary>
    public void clearQuantities()
    {
        RetailPackagePurch          retailPackagePurch;
        RetailBuyersPushTable       buyersPushTable;
        RetailBuyersPushLine        buyersPushLine;
        RetailBuyersPushLineQty     buyersPushQty;

        ttsbegin;

        update_recordset retailPackagePurch
            setting AllocatedCrossDockQty = 0
            join PurchId from buyersPushTable
                where buyersPushTable.BuyersPushId == pushId
                    && buyersPushTable.PurchId == retailPackagePurch.PurchId;

        update_recordset buyersPushLine
            setting
                UserSpecified = NoYes::No,
                UserSpecifiedQty = 0
            where buyersPushLine.BuyersPushId == pushId;

        update_recordset buyersPushQty
            setting
                Qty = 0
            where buyersPushQty.BuyersPushId == pushId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates transfer orders for the defined cross-docked quantities.
    /// </summary>
    /// <param name="_respectAssortments">
    /// The flag to respect assortments during creation of the transfer orders.
    /// </param>
    public void createTransferOrders(boolean _respectAssortments = true)
    {
        RetailReplenishmentTransferOrder    replenishmentTransferOrder;

        replenishmentTransferOrder = RetailReplenishmentTransferOrder::construct();
        replenishmentTransferOrder.createFromBuyersPush(pushId, _respectAssortments);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferOrdersPreCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that there exist cross docked quantities and the user consents to creating the orders.
    /// </summary>
    /// <returns>
    /// true if the system can create transfer orders; otherwise, false.
    /// </returns>
    public boolean createTransferOrdersPreCheck()
    {
        RetailBuyersPushTable               retailBuyersPushTable;
        boolean                             ret = false;

        retailBuyersPushTable = RetailBuyersPushTable::find(pushId);
        if (retailBuyersPushTable.totalQty() <= 0)
        {
            // Error - No item quantities have been specified
            ret = checkFailed("@RET911");
        }
        else
        {
            if (Box::yesNo(strFmtLB("@RET1353"), DialogButton::Yes, "@RET830", "@RET1142") == DialogButton::Yes)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>crossDockPackage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cross docks a given package to a given store for a given quantity.
    /// </summary>
    /// <param name="_packPurch">
    /// The package line associated with the purchase.
    /// </param>
    /// <param name="_locationId">
    /// The location ID.
    /// </param>
    /// <param name="_whsAreaId">
    /// The legal entity where this location is placed.
    /// </param>
    /// <param name="_packQtyChange">
    /// The additional quantity to cross dock.
    /// </param>
    /// <returns>
    /// true if the cross dock was successful; otherwise, false.
    /// </returns>
    public boolean crossDockPackage(
        RetailPackagePurch                  _packPurch,
        InventLocationId                    _locationId,
        DataAreaId                          _whsAreaId,
        RetailAllocatedCrossDockPackageQty  _packQtyChange)
    {
        if (_packQtyChange == 0)
        {
            return false;
        }

        return RetailCrossDockPackageManager::crossDock(pushId, _packPurch, _locationId, _whsAreaId, _packQtyChange);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCrossDockedPackageQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity of the package that has been cross docked, for a given location.
    /// </summary>
    /// <param name="_packPurch">
    /// The package line associated with the purchase.
    /// </param>
    /// <param name="_locationId">
    /// The location ID.
    /// </param>
    /// <param name="_whsAreaId">
    /// The legal entity where this location is placed.
    /// </param>
    /// <returns>
    /// The quantity of the package that has been cross docked.
    /// </returns>
    /// <remarks>
    /// The underlying assumption is that the cross docking quantities are distributed at package level correctly.
    /// </remarks>
    public RetailAllocatedCrossDockPackageQty getCrossDockedPackageQty(
        RetailPackagePurch       _packPurch,
        InventLocationId         _locationId,
        DataAreaId               _whsAreaId)
    {
        return RetailCrossDockPackageManager::getCrossDockedQty(pushId, _packPurch, _locationId, _whsAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailBuyersPushId</Name>
				<Source><![CDATA[
    public RetailBuyersPushId parmRetailBuyersPushId(RetailBuyersPushId _id = pushId)
    {
        pushId = _id;
        return pushId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAtPackageLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the cross docked quantities conform to a package.
    /// </summary>
    public void validateAtPackageLevel()
    {
        RetailCrossDockPackageManager::validateAtPackageLevel(pushId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailBuyersPushFormHelper construct()
    {
        return new RetailBuyersPushFormHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the calculated quantities.
    /// </summary>
    /// <param name="_query">
    /// The query used to filter the <c>RetailBuyersPushLine</c> records.
    /// </param>
    /// <param name="_retailBuyersPushTable">
    /// The related <c>RetailBuyersPushTable</c> record.
    /// </param>
    /// <param name="_inventAvailabilityFormCache">
    /// The <c>InventAvailabilityFormCache</c> object.
    /// </param>
    /// <returns>
    /// A container with the total quantities by category, total remaining available quantities and total specified quantities.
    /// </returns>
    public static server container getQuantities(Query _query, RetailBuyersPushTable _retailBuyersPushTable, InventAvailabilityFormCache _inventAvailabilityFormCache = null)
    {
        Qty                     totalQtyByCategory, totalRemainingAvailableQty, totalSpecifiedQty, selectedLineQty;
        QueryRun                qr;
        RetailBuyersPushLine    currentLine;
        boolean                 isCrossdock = _retailBuyersPushTable.isCrossdock();
        
        qr = new QueryRun(_query);
        
        while (qr.next())
        {
            currentLine = qr.get(tableNum(RetailBuyersPushLine));
            
            selectedLineQty = RetailBuyersPushFormHelper::getSelectedLineQty(currentLine, isCrossdock, _inventAvailabilityFormCache);
            
            totalQtyByCategory += selectedLineQty;
            
            if (currentLine.UserSpecified == NoYes::Yes)
            {
                totalSpecifiedQty += currentLine.UserSpecifiedQty;
            }
            else
            {
                totalRemainingAvailableQty += selectedLineQty;
            }
        }
        return [totalQtyByCategory, totalRemainingAvailableQty, totalSpecifiedQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchaseOrderHasPackages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the purchase order has any related <c>RetailPackagePurch</c> packages.
    /// </summary>
    /// <param name="_purchId">
    /// The <c>PurchId</c> ID.
    /// </param>
    /// <returns>
    /// true if the order has any <c>RetailPackagePurch</c> packages; otherwise, false.
    /// </returns>
    public static boolean purchaseOrderHasPackages(PurchId _purchId)
    {
        RetailPackagePurch retailPackagePurch;

        select firstOnly RecId from retailPackagePurch
            where retailPackagePurch.PurchId == _purchId;

        return (retailPackagePurch.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedLineQty</Name>
				<Source><![CDATA[
    private static server Qty getSelectedLineQty(RetailBuyersPushLine _selectedLine, boolean crossDocking, InventAvailabilityFormCache _inventAvailabilityFormCache)
    {
        PurchLine   purchLine;
        Qty         selectedLineQty;
        
        if (crossDocking)
        {
            purchLine       = PurchLine::findRecId(_selectedLine.RefRecId);
            selectedLineQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_selectedLine.ItemId,
																									_selectedLine.InventDimId,
																								    purchLine.PurchQty,
																								    purchLine.PurchUnit,
																									_selectedLine.UnitID,
																									NoYes::No);
        }
        else
        {
            selectedLineQty = _selectedLine.availableOnHand(_selectedLine, _inventAvailabilityFormCache);
        }
        
        return selectedLineQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total quantity for all lines.
    /// </summary>
    /// <param name="_retailBuyersPushTable">
    /// The buyers push/cross dock record.
    /// </param>
    /// <param name="_inventAvailabilityFormCache">
    /// The <c>InventAvailabilityFormCache</c> object.
    /// </param>
    /// <returns>
    /// The total quantity.
    /// </returns>
    public static server Qty getTotalQuantity(RetailBuyersPushTable _retailBuyersPushTable, InventAvailabilityFormCache _inventAvailabilityFormCache = null)
    {
        Qty                     rTotalQty = 0;
        RetailBuyersPushLine    currentLine;
        boolean                 isCrossdock = _retailBuyersPushTable.isCrossdock();
        
        while select currentLine
            where currentLine.BuyersPushId == _retailBuyersPushTable.BuyersPushId
        {
            rTotalQty += RetailBuyersPushFormHelper::getSelectedLineQty(currentLine, isCrossdock, _inventAvailabilityFormCache);
        }
        
        return rTotalQty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>