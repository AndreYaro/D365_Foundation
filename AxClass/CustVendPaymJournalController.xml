<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymJournalController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendPaymJournalController</c> class is the controller class for the
///    <c>CustVendPaymJournal</c> report.
/// </summary>
public class CustVendPaymJournalController extends SRSReportRunController implements BatchRetryable
{
    #define.parmCustImport('CustImport')
    #define.parmAll('All')
    #define.emptyString('')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custImport</Name>
				<Source><![CDATA[
    protected void custImport(Query _query)
    {
        LedgerJournalTrans ledgerJournalTransLocal;
        JournalId journalNum;
        QueryBuildRange range;

        // Get the Journal Number for all the payment journal lines imported
        // into the journal
        ledgerJournalTransLocal = this.parmArgs().record();

        // Checking LedgerJournalTrans for not null
        if (ledgerJournalTransLocal)
        {
            // Assigning the journal number
            journalNum = ledgerJournalTransLocal.JournalNum;
        }

        // Getting the ranges
        if (journalNum)
        {
            // Setting the ranges
            range = SysQuery::findOrCreateRange(_query.dataSourceTable(tablenum(LedgerJournalTrans)), fieldnum(LedgerJournalTrans, JournalNum));
            range.value(queryValue(journalNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        CustVendPaymJourDPContract contract = this.parmReportContract().parmRdpContract() as CustVendPaymJourDPContract;
        container                   recordContainer;
        SRSTmpDataStore             srsTmpDataStore;
        SysAnyType                  sysAnyType;

        contract.parmImport(this.parmArgs().parm());
        contract.parmCustVendPaymReconciliationImport(this.parmArgs().object());
        sysAnyType = this.parmArgs().object();

        if (sysAnyType && classIdGet(sysAnyType) == classNum(SysAnyType))
        {
            recordContainer = sysAnyType.value();

            srsTmpDataStore.Value = recordContainer;
            srsTmpDataStore.insert();
        }

        // Customer related import
        if (this.parmArgs().parm() == #parmCustImport)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00089, funcName());
            this.custImport(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()));
        }

        // Vendor related import
        else
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00067, funcName());
            this.vendImport(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()));
        }

        if (srsTmpDataStore)
        {
            contract.parmRecId(srsTmpDataStore.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendImport</Name>
				<Source><![CDATA[
    protected void vendImport(Query _query)
    {
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTrans ledgerJournalTransArgs;
        JournalId journalId;
        QueryBuildRange range;

        // Checking the args for parameter
        if (this.parmArgs().parm() != #parmAll &&
                 this.parmArgs().dataset() == tablenum(LedgerJournalTrans))
        {
            // Getting the ledgerJournalTrans record
            ledgerJournalTransArgs = this.parmArgs().record();

            // Checking LedgerJournalTrans for not null
            if (ledgerJournalTransArgs)
            {
                // Assigning the journal number
                journalId = ledgerJournalTransArgs.JournalNum;
            }
        }

        // Checking the args for dataset
        if (this.parmArgs().dataset() == tablenum(LedgerJournalTable))
        {
            // Getting the ledgerJournalTable record
            ledgerJournalTable = this.parmArgs().record();

            // Checking ledgerJournalTable for not null
            if (ledgerJournalTable)
            {
                // Assigning the journal number
                journalId = ledgerJournalTable.JournalNum;
            }
        }

        // Getting the range
        range = SysQuery::findOrCreateRange(_query.dataSourceTable(tablenum(LedgerJournalTrans)), fieldnum(LedgerJournalTrans,JournalNum));

        if (journalId)
        {
            // Setting the range
            range.value(queryValue(journalId));
        }

        else
        {
            // Setting empty range
            range.value(#emptyString);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustVendPaymJournalController controller = new CustVendPaymJournalController();
        controller.parmReportName(ssrsReportStr(CustVendPaymJournal, Report));
        controller.parmArgs(_args);

        controller.startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>