<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTermGroupSigning</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgTermGroupSigning</c> class is used to start and stop collective registrations.
/// </summary>
public class JmgTermGroupSigning
{
    JmgGroupSigningTable   jmgGroupSigningTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>JmgTermGroupSigning</c> class.
    /// </summary>
    /// <param name="_jmgGroupSigningTable">
    ///    The <c>JmgGroupSigningTable</c> record, which refers to the job to start and stop collectively.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The <c>JmgGroupSigningTable</c> is not specified correctly.
    /// </exception>
    void new(JmgGroupSigningTable _jmgGroupSigningTable)
    {
        if (_jmgGroupSigningTable)
            jmgGroupSigningTable = _jmgGroupSigningTable;
        else
            throw error("@SYS38437");
    }

]]></Source>
			</Method>
			<Method>
				<Name>start</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Starts the collective registration for the workers that are specified by the user.
    /// </summary>
    /// <remarks>
    ///    A query prompt on workers is displayed to the user.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The <c>JmgGroupSigningTable</c> record is not initialized correctly.
    /// </exception>
    void start()
    {
        JmgEmployee             jmgEmployee;
        QueryRun                queryRun;
        JmgGroupSigningLine     groupSigningLine;
        JmgJobBundle            jobBundle;
        Set                     assistants;
        Set                     others;
        SetEnumerator           setEnumerator;
        JmgTermReg              jmgTermReg;
        str                     myTime;

        if (jmgGroupSigningTable.DateTime)
            throw error("@SYS38436");

        queryRun    = JmgTermGroupSigning::startprompt();
        if (! queryRun)
        {
            return;
        }

        ttsbegin;

        // Split in assistants and others. Assistants should be handled first:
        assistants  = new Set(Types::Int64);
        others      = new Set(Types::Int64);

        jmgGroupSigningTable.DateTime = DateTimeUtil::utcNow();
        myTime = time2str(DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(jmgGroupSigningTable.DateTime,DateTimeUtil::getUserPreferredTimeZone())),1,1);

        jmgGroupSigningTable.update();

        groupSigningLine.ParentRecId    = jmgGroupSigningTable.RecId;

        while (queryRun.next())
        {
            jmgEmployee = queryRun.get(tablenum(JmgEmployee));
            if (JmgEmployee::signedIn(jmgEmployee.Worker))
            {
                select firstonly jmgTermReg
                    where jmgTermReg.Worker     == jmgEmployee.Worker           &&
                          jmgTermReg.RegType    == JmgTermRegType::TeamStart    &&
                          jmgTermReg.JobActive  == NoYes::Yes;

                if (jmgTermReg)
                {
                    assistants.add(jmgEmployee.Worker);
                }
                else
                {
                    others.add(jmgEmployee.Worker);
                }
            }
        }

        // Go through assistants:
        setEnumerator = assistants.getEnumerator();
        setEnumerator.reset();
        while (setEnumerator.moveNext())
        {
            jobBundle = new JmgJobBundle(setEnumerator.current(), false, false, false);
            jobBundle.addJob(JmgJobTable::find(jmgGroupSigningTable.jobid()));
            jobBundle.makeRegistrations(DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(jmgGroupSigningTable.DateTime,DateTimeUtil::getUserPreferredTimeZone())),
                                        DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(jmgGroupSigningTable.DateTime,DateTimeUtil::getUserPreferredTimeZone())));

            groupSigningLine.Worker = setEnumerator.current();
            groupSigningLine.insert();
        }

        // Go through others:
        setEnumerator = others.getEnumerator();
        setEnumerator.reset();
        while (setEnumerator.moveNext())
        {
            jobBundle = new JmgJobBundle(setEnumerator.current(), false, false, false);
            jobBundle.addJob(JmgJobTable::find(jmgGroupSigningTable.jobid()));
            jobBundle.makeRegistrations(DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(jmgGroupSigningTable.DateTime,DateTimeUtil::getUserPreferredTimeZone())),
                                        DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(jmgGroupSigningTable.DateTime,DateTimeUtil::getUserPreferredTimeZone())));

            groupSigningLine.Worker = setEnumerator.current();
            groupSigningLine.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stop</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Stops the collective registration on workers, which was previously started on the collective
    ///    registration.
    /// </summary>
    void stop()
    {
        JmgGroupSigningLine         groupSigningLine;
        JmgJobBundle                jobBundle;
        JmgRegistrationParameters   regParams;
        JmgTermJob                  job;
        JmgTermReg                  termReg;
        JmgTermReg                  startTeamTermReg;
        JmgDate                     stampDate = JmgProfileSeconds::getSysDate();
        JmgTime                     stamptime = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());
        boolean                     jobAdded;
        Map                         assistants;
        Set                         others;
        SetEnumerator               setEnumerator;
        MapEnumerator               mapEnumerator;
        ttsbegin;
        // Split in assistants and others. Others should be handled first:
        assistants  = new Map(Types::Int64, Types::Record);
        others      = new Set(Types::Int64);

        while select Worker from groupSigningLine
            where groupSigningLine.ParentRecId      == jmgGroupSigningTable.RecId
        {
            select firstonly termReg
                where termReg.Worker            == groupSigningLine.Worker       &&
                      termReg.RegDateTime       == jmgGroupSigningTable.DateTime &&
                      termReg.RegType           == JmgTermRegType::TeamStop
                join  startTeamTermReg
                where startTeamTermReg.RecId    == termReg.MatchRecIdStartStop;
            if (termReg && startTeamTermReg)
            {
                assistants.insert(groupSigningLine.Worker, startTeamTermReg);
            }
            else
            {
                others.add(groupSigningLine.Worker);
            }
        }

        // Insert stop/start for others:
        setEnumerator = others.getEnumerator();
        while (setEnumerator.moveNext())
        {
            jobBundle = new JmgJobBundle(setEnumerator.current(), false, false, false);
            jobAdded = false;
            while select termReg
                where termReg.Worker        == setEnumerator.current()      &&
                      termReg.RegDateTime   == jmgGroupSigningTable.DateTime &&
                      termReg.RegType       == JmgTermRegType::JobStop
            {
                job = JmgTermJob::construct(termReg.JobId);
                if (job.module() == JmgModuleEnum::PROJ)
                {
                    regParams = JmgRegistrationParameters::newFromJmgTermReg(termReg);
                }
                else
                {
                    regParams = new JmgRegistrationParameters();
                }
                jobBundle.addTermJob(job, regParams);
                jobAdded = true;
            }
            if (jobAdded)
            {
                jobBundle.makeRegistrations(stampDate, stamptime);
            }
            else
            {
                job = JmgTermJob::construct(jmgGroupSigningTable.jobid());
                if (job.stampType() != JmgStampTypeEnum::EventCode)
                {
                    job.makeRegistration(setEnumerator.current(), stampDate, stamptime, false);
                }
            }
        }

        // Insert stop/start for assistants:
        mapEnumerator = assistants.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            jobBundle = new JmgJobBundle(mapEnumerator.currentKey(), false, false, false);
            regParams = new JmgRegistrationParameters();
            startTeamTermReg = mapEnumerator.currentValue();
            regParams.jobPilot(startTeamTermReg.WorkerPilot);
            jobBundle.addJob(JmgJobTable::find(JmgIpcActivity::findSignTypeJobId(JmgSignInOut::StartTeam)), regParams);
            jobBundle.makeRegistrations(stampDate, stamptime);
        }

        jmgGroupSigningTable.delete();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        FormDataSource          formDataSource;
        JmgTermGroupSigning     termSigningGroup;

        if ((args.dataset()         != tablenum(JmgGroupSigningTable)) ||
            (args.parmEnumType()    != enumnum(NoYes)))
            throw error(strfmt("@SYS22828",funcname()));

        termSigningGroup    = new JmgTermGroupSigning(args.record());

        if (args.parmEnum() == NoYes::Yes)
        {
            termSigningGroup.start();
        }
        else
        {
            termSigningGroup.stop();
        }

        if (FormDataUtil::getFormDataSource(args.record()))
        {
            formDataSource  = FormDataUtil::getFormDataSource(args.record());
            formDataSource.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startprompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a query prompt on time registration workers to the user.
    /// </summary>
    /// <returns>
    /// An initialized <c>QueryRun</c> object, if the user clicked OK on the query prompt; otherwise, null.
    /// </returns>
    static QueryRun startprompt()
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryRun                queryRun;
        QueryBuildRange         queryBuildRange;

        query = new Query();
        queryBuildDataSource = query.addDataSource(tablenum(JmgEmployee));
        queryBuildDataSource.addRange(fieldnum(JmgEmployee,Worker));
        queryBuildDataSource.addRange(fieldnum(JmgEmployee,CalculateGroupId));
        queryBuildRange = queryBuildDataSource.addRange(fieldnum(JmgEmployee,Active));
        queryBuildRange.value(queryValue(NoYes::Yes));
        queryBuildRange.status(RangeStatus::Locked);
        queryRun = new QueryRun(query);

        if (queryRun.prompt())
        {
            return queryRun;
        }
        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>