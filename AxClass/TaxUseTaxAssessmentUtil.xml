<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxUseTaxAssessmentUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxUseTaxAssessmentUtil</c> is a static companion utili class for use tax assessment.
/// </summary>
internal final static class TaxUseTaxAssessmentUtil
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustSalesTaxFromVendorChargedSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjust sales tax from vendor charged sales tax
    /// </summary>
    /// <param name = "_common">Common</param>
    /// <param name = "_taxCalculation">TaxCalculation</param>
    public static void adjustSalesTaxFromVendorChargedSalesTax(Common _common, TaxCalculation _taxCalculation)
    {
        if (TaxUseTaxAssessmentUtil::shouldAdjustTaxFromVendorChargedTax(_common))
        {
            TaxVendorChargedSalesTax vendorChargedSalesTax;
            
            if (_common is VendInvoiceInfoTable)
            {
                VendInvoiceInfoTable vendInvoiceInfoTable = _common;
                vendorChargedSalesTax = vendInvoiceInfoTable.VendorChargedSalesTax;
                TaxUseTaxAssessmentUtil::adjustTaxSimple(_common, _taxCalculation, vendorChargedSalesTax);
            }
            else if (_common is LedgerJournalTrans)
            {
                LedgerJournalTrans ledgerJournalTrans = _common;
                LedgerJournalTransTaxExtension ledgerJournalTransTaxExtension = ledgerJournalTrans.ledgerJournalTransTaxExtension();
                if (!ledgerJournalTransTaxExtension)
                {
                    return;
                }
                vendorChargedSalesTax = ledgerJournalTransTaxExtension.VendorChargedSalesTax;
                if (!vendorChargedSalesTax)
                {
                    return;
                }

                // _common is vend line. by calling LedgerJournalTrans::findVendLedgerJournalTrans
                TaxAdjustmentSimpleHelper taxAdjustmentSimpleHelper = new TaxAdjustmentSimpleHelper();
                taxAdjustmentSimpleHelper.init(_taxCalculation.tmpTaxWorkTrans(), _taxCalculation);
                Map allocatedAdjustTotal = taxAdjustmentSimpleHelper.allocateRegulatedAmountPerLine(vendorChargedSalesTax);

                if (allocatedAdjustTotal.empty())
                {
                    return;
                }
                LedgerJournalTrans ledgerJournalTransAdjust;

                while select * from ledgerJournalTransAdjust
                    where ledgerJournalTransAdjust.JournalNum == ledgerJournalTrans.JournalNum
                        && ledgerJournalTransAdjust.Voucher == ledgerJournalTrans.Voucher
                        && ledgerJournalTransAdjust.TransDate == ledgerJournalTrans.TransDate
                        && (((ledgerJournalTransAdjust.AccountType == LedgerJournalACType::Ledger
                            || ledgerJournalTransAdjust.AccountType == LedgerJournalACType::Project
                            || ledgerJournalTransAdjust.AccountType == LedgerJournalACType::FixedAssets)
                            && ledgerJournalTransAdjust.LedgerDimension)
                            || ((ledgerJournalTransAdjust.OffsetAccountType == LedgerJournalACType::Ledger
                                || ledgerJournalTransAdjust.OffsetAccountType == LedgerJournalACType::Project
                                || ledgerJournalTransAdjust.OffsetAccountType == LedgerJournalACType::FixedAssets)
                                && ledgerJournalTransAdjust.OffsetLedgerDimension))
                {
                    str key = any2Str(ledgerJournalTransAdjust.TableId) + '|' + any2Str(ledgerJournalTransAdjust.RecId);
                    if (allocatedAdjustTotal.exists(key))
                    {
                        TaxUseTaxAssessmentUtil::adjustTaxSimple(ledgerJournalTransAdjust,
                                                                    _taxCalculation, 
                                                                    allocatedAdjustTotal.lookup(key));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustTaxSimple</Name>
				<Source><![CDATA[
    /// <summary>
    /// Simple entrance of sales tax adjustment
    /// </summary>
    /// <param name = "_common">Common</param>
    /// <param name = "_taxCalculation">TaxCalculation</param>
    /// <param name = "_taxRegulationTotalCur">TaxRegulationAmountCur</param>
    public static void adjustTaxSimple(Common _common, TaxCalculation _taxCalculation, TaxRegulationAmountCur _taxRegulationTotalCur)
    {
        if (_taxRegulationTotalCur == 0)
        {
            return;
        }
        TmpTaxRegulation tmpTaxRegulation;
        TaxTmpWorkTransForm taxTmpWorkTransForm = TaxTmpWorkTransForm::construct();
        taxTmpWorkTransForm.init();
        taxTmpWorkTransForm.initTax(_taxCalculation, _common.TableId, _common, tmpTaxRegulation, _taxCalculation.tmpTaxWorkTrans());
        taxTmpWorkTransForm.parmTaxRegulationTotalCur(true, _taxRegulationTotalCur);
        taxTmpWorkTransForm.adjustTotalTax(_common.TableId, _common);
        taxTmpWorkTransForm.applyTaxAdjustments(_common.TableId, _common);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAdjustTaxFromVendorChargedTax</Name>
				<Source><![CDATA[
    private static boolean shouldAdjustTaxFromVendorChargedTax(Common _common)
    {
        boolean result = false;
        if (!_common)
        {
            return false;
        }

        switch (_common.TableId)
        {
            case tableNum(VendInvoiceInfoTable):
                VendInvoiceInfoTable vendInvoiceInfoTable = _common;

                if (TaxIntegrationUtils::isTaxIntegrationAccrueUseTaxEnabled(TaxIntegrationBusinessProcess::Purchase)
                    || (FeatureStateProvider::isFeatureEnabled(TaxUseTaxAssessmentAdjustSalesTaxFeature::instance()) 
                        && vendInvoiceInfoTable.AccrueSalesTaxType == TaxAccrueSalesTaxType::AdjustSalesTax))
                {
                    if (vendInvoiceInfoTable.AccrueSalesTaxType == TaxAccrueSalesTaxType::AdjustSalesTax)
                    {
                        return true;
                    }
                    
                    if (vendInvoiceInfoTable.AccrueSalesTaxType == TaxAccrueSalesTaxType::Advanced
                        && vendInvoiceInfoTable.VendorChargedTaxAssessment == TaxIntegrationVendorChargedTaxAssessment::Overcharge)
                    {
                        if (vendInvoiceInfoTable.VendorChargedTaxTolerance == TaxIntegrationVendorChargedTaxTolerance::WithinTolerance)
                        {
                            result = true;
                        }
                        else if (vendInvoiceInfoTable.VendorChargedTaxTolerance == TaxIntegrationVendorChargedTaxTolerance::ExceedTolerance)
                        {
                            result = TaxUseTaxAssessmentUtil::checkVendTableUseTaxToleranceValidationType(VendTable::find(vendInvoiceInfoTable.InvoiceAccount), vendInvoiceInfoTable);
                        }
                    }
                }
                break;
            case tableNum(LedgerJournalTrans):
                LedgerJournalTrans LedgerJournalTransVend = _common;
                LedgerJournalTransTaxExtension ledgerJournalTransTaxExtensionVend = LedgerJournalTransVend.ledgerJournalTransTaxExtension();
                LedgerJournalTable ledgerJournalTable = LedgerJournalTransVend.ledgerJournalTable();
                
                if (!(ledgerJournalTable.JournalType == LedgerJournalType::Daily 
                    || ledgerJournalTable.JournalType == LedgerJournalType::VendInvoiceRegister
                    || ledgerJournalTable.JournalType == LedgerJournalType::PurchaseLedger))
                {
                    return false;
                }
                
                if (FeatureStateProvider::isFeatureEnabled(TaxUseTaxAssessmentAdjustSalesTaxFeature::instance()) 
                    && ledgerJournalTransTaxExtensionVend.AccrueSalesTaxType == TaxAccrueSalesTaxType::AdjustSalesTax)
                {
                    return true;
                }
                
                if (TaxIntegrationUtils::isTaxIntegrationUseTaxAssessmentEnabled(TaxIntegrationBusinessProcess::Journal))
                {
                    if (ledgerJournalTransTaxExtensionVend.AccrueSalesTaxType == TaxAccrueSalesTaxType::Advanced
                        && ledgerJournalTransTaxExtensionVend.VendorChargedTaxAssessment == TaxIntegrationVendorChargedTaxAssessment::Overcharge)
                    {
                        if (ledgerJournalTransTaxExtensionVend.VendorChargedTaxTolerance == TaxIntegrationVendorChargedTaxTolerance::WithinTolerance)
                        {
                            result = true;
                        }
                        else if (ledgerJournalTransTaxExtensionVend.VendorChargedTaxTolerance == TaxIntegrationVendorChargedTaxTolerance::ExceedTolerance)
                        {
                            result = TaxUseTaxAssessmentUtil::checkVendTableUseTaxToleranceValidationType(LedgerJournalTransVend.findVendTable(), ledgerJournalTable);
                        }
                    }
                }
                break;
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVendTableUseTaxToleranceValidationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will return check result of the tolerance validation type.
    /// </summary>
    /// <param name = "_vendTable">VendTable</param>
    /// <param name = "_common">Heading table of the transaction(LedgerJournalTable/VendInvoiceInfoTable)</param>
    /// <returns>True when warning, otherwise false</returns>
    private static boolean checkVendTableUseTaxToleranceValidationType(VendTable _vendTable, Common _common)
    {
        boolean result = false;
        if (_vendTable.TaxVendorChargeTaxToleranceValidation == TaxIntegrationUseTaxToleranceValidationType::Warning)
        {
            result = true;
            warning("@TaxIntegration:SalesTaxExceedsTolerance");
        }
        else if (_vendTable.TaxVendorChargeTaxToleranceValidation == TaxIntegrationUseTaxToleranceValidationType::Error)
        {
            // deleting taxUncommitted to avoid second click bypassing this check.
            TaxUncommitted::deleteForDocumentHeader(_common.TableId, _common.RecId);
            result = false;
            throw error("@TaxIntegration:SalesTaxExceedsTolerance");
        }
        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>