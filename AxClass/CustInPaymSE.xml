<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInPaymSE</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustInPaymSE extends CustInPaym
{
    container   recordContainer[];
    Counter     numOfRecord;
    Counter     numOfRecord_SEK;
    Counter     numOfRecord_EUR;
    Amount      totalAmount_SEK;
    Amount      totalAmount_EUR;
    int         numCustTransFound;

    DialogRunbase baseDialog;
    FileUploadBuild dialogFileUpload;
    FileUpload fileUpload;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the record in the <c>LedgerJournalTrans</c> table.
    /// </summary>
    /// <param name = "_ledgerJournalTransImport">
    ///     A instance of <c>LedgerJournalTransImport</c> class.
    /// </param>
    /// <param name = "_insert">
    ///    A <c>UnknownNoYes</c> enumeration value.
    /// </param>
    /// <returns>
    ///     The error text.
    /// </returns>
    public ErrorTxt createLedgerJournalTrans (LedgerJournalTransImport  _ledgerJournalTransImport,
                                              UnknownNoYes              _insert = UnknownNoYes::Unknown)
    {
        ErrorTxt                        errorTxt;
        CustTable                       custTable;
        CustTrans                       custTrans;
        CustTransOpen                   custTransOpen;
        CustPaymModeTable               custPaymModeTable;
        SpecTransManager                specTransManager;
        container                       custCompany;
        ExchangeRateHelper              exchangeRateHelper;
        LedgerJournalTrans_Asset        ledgerJournalTrans_Asset;
        LedgerJournalEngine             ledgerJournalEngine = new LedgerJournalEngine();
        AmountCur                       settleAmountCur;
        DiscDate                        calcDiscDate;
        DiscGraceDays                   discGraceDays;
        CustVendTransOpenData           custVendTransOpenData;
        LedgerDimensionDefaultAccount   defaultAccount;

        // A new LedgerJournalTrans is created
        ledgerJournalTrans.clear();

        ledgerJournalTrans.JournalNum           = ledgerJournalId;
        ledgerJournalTrans.PaymMode             = paymMode;             // payment method
        ledgerJournalTrans.LoadingDate          = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());      // date of import
        ledgerJournalTrans.TransDate            = _ledgerJournalTransImport.transDate();

        ledgerJournalTrans.Company              = _ledgerJournalTransImport.primaryCompany();
        ledgerJournalTrans.parmAccount(_ledgerJournalTransImport.accountNum(), LedgerJournalACType::Cust);

        // Get the offset company from the customer payment mode buffer since the method of payment will be found in the company where
        // the LedgerJournalTrans is being created and where the bank account exists.
        custPaymModeTable = CustPaymModeTable::find(paymMode);
        if (custPaymModeTable.AccountType == LedgerJournalACType::Ledger)
        {
            defaultAccount = custPaymModeTable.parmPaymentLedgerDimension();
            ledgerJournalTrans.parmOffsetLedgerDimension(ledgerJournalTrans.getOffsetLedgerDimensionForLedgerType(defaultAccount, custPaymModeTable.company()));
        }
        else
        {
            ledgerJournalTrans.parmOffsetAccount(custPaymModeTable.parmPaymAccount(), custPaymModeTable.AccountType, custPaymModeTable.company());
        }

        ledgerJournalTrans.PaymReference        = _ledgerJournalTransImport.paymId();
        ledgerJournalTrans.BankTransType        = CustPaymModeTable::find(paymMode).BankTransType;
        ledgerJournalTrans.TransactionType      = LedgerTransType::Payment;

        ledgerJournalTrans.PostingProfile       = CustParameters::findByCompany(ledgerJournalTrans.Company).PostingProfile;
        ledgerJournalTrans.CurrencyCode         = _ledgerJournalTransImport.currencyCode();
        ledgerJournalTrans.AmountCurCredit      = _ledgerJournalTransImport.amountCurCredit();
        ledgerJournalTrans.AmountCurDebit       = _ledgerJournalTransImport.amountCurDebit();
        ledgerJournalTrans.SettleVoucher        = this.findAutomaticSettlementType();
        ledgerJournalTrans.MarkedInvoice        = _ledgerJournalTransImport.invoice();

        exchangeRateHelper = ExchangeRateHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(ledgerJournalTrans.Company).RecId), ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
        ledgerJournalTrans.ExchRate             = exchangeRateHelper.getExchangeRate1();
        ledgerJournalTrans.ExchRateSecond       = exchangeRateHelper.getExchangeRate2();

        if (Ledger::reportingCurrency())
        {
            [ledgerJournalTrans.ReportingCurrencyExchRate, ledgerJournalTrans.ReportingCurrencyExchRateSecondary] = CustInPaym::calculateReportingCurrencyExchRate(
                Ledger::reportingCurrencyExchangeRateType(),
                ledgerJournalTrans.CurrencyCode,
                Ledger::reportingCurrency(),
                ledgerJournalTrans.TransDate);
        }

        ledgerJournalEngine.initTaxItemGroup(ledgerJournalTrans);

        if (!ledgerJournalTrans.parmLedgerDimension())
        {
            errorTxt = "@SYS68580";
        }
        else if (! ledgerJournalTrans.MarkedInvoice)
        {
            errorTxt = "@SYS24539";
        }
        else
        {
            custTable = CustTable::findByCompany(ledgerJournalTrans.Company, ledgerJournalTrans.parmAccount());
            if (custTable)
            {
                ledgerJournalTrans.DefaultDimension = custTable.DefaultDimension;
                ledgerJournalTrans.Payment          = custTable.PaymTermId;

                custCompany += [ledgerJournalTrans.Company];

                select crosscompany:custCompany custTrans
                where custTrans.AccountNum   == ledgerJournalTrans.parmAccount() &&
                      custTrans.Invoice      == ledgerJournalTrans.MarkedInvoice;

                if (custTrans)
                {
                    ledgerJournalTrans.CustTransId  = custTrans.RecId;

                    // If multiple customer transactions were found, change the transaction text.
                    if (numCustTransFound > 1)
                    {
                        ledgerJournalTrans.Txt = "@SYS68654" + ' â€“ ' + custTrans.Txt;
                    }
                    else
                    {
                        ledgerJournalTrans.Txt = custTrans.Txt;
                    }

                    ledgerJournalTrans.DefaultDimension     = custTrans.DefaultDimension;
                    ledgerJournalTrans.PaymId               = custTrans.PaymId;

                    select crosscompany:custCompany custTransOpen
                        where custTransOpen.RefRecId == custTrans.RecId;

                    if (custTransOpen)
                    {
                        ledgerJournalTrans.Due = custTransOpen.DueDate;
                    }
                    else
                    {
                        errorTxt = "@SYS68581";
                    }
                }
                else
                {
                    errorTxt = strfmt("@SYS68582",ledgerJournalTrans.MarkedInvoice);
                }

                if (ledgerJournalTrans.AccountType!= LedgerJournalACType::Ledger)
                {
                    ledgerJournalEngine.initAssetBookid(ledgerJournalTrans, ledgerJournalTrans_Asset);
                    ledgerJournalEngine.initOffsetDefaultDimension(ledgerJournalTrans, ledgerJournalTrans_Asset);
                }
            }
            else
            {
                errorTxt = strfmt("@SYS16734",ledgerJournalTrans.parmAccount());
            }
        }

        if (errorTxt)
        {
            ledgerJournalTrans.PaymId = _ledgerJournalTransImport.paymId();
        }
        else
        {
            if (custTrans.CurrencyCode == ledgerJournalTrans.CurrencyCode)
            {
                // check whether the amount is correct (consider cash discount and maximum over-/underpayment)
                if (custTransOpen.CashDiscDate > ledgerJournalTrans.TransDate)
                {
                    if (ledgerJournalTrans.amount() != custTransOpen.AmountCur - custTransOpen.PossibleCashDisc &&
                        ledgerJournalTrans.amount() - custTransOpen.AmountCur + custTransOpen.PossibleCashDisc
                                                    > CustParameters::findByCompany(ledgerJournalTrans.Company).MaxMSTOverUnder)
                    {
                        errorTxt = "@SYS68583";
                    }
                }
                else
                {
                    if (ledgerJournalTrans.amount() != custTransOpen.AmountCur &&
                        ledgerJournalTrans.amount() - custTransOpen.AmountCur > CustParameters::findByCompany(ledgerJournalTrans.Company).MaxMSTOverUnder)
                    {
                        errorTxt = "@SYS68584";
                    }
                }
            }
            else
            {
                errorTxt = "@SYS77389";
            }
        }

        if (_insert == UnknownNoYes::Yes || (_insert == UnknownNoYes::Unknown && errorTxt == ""))
        {
            this.loadVoucherNum();
            ledgerJournalTrans.Voucher  = voucher;

            ledgerJournalTrans.insert();

            if (custTransOpen)
            {
                // marking of the transaction for settlement
                specTransManager = SpecTransManager::newFromSpec(ledgerJournalTrans, true);

                if (specTransManager.existForOtherSpec(custTransOpen.company(), custTransOpen.TableId, custTransOpen.RecId))
                {
                    errorTxt = "@SYS29065";
                    if (_insert == UnknownNoYes::Unknown)
                    {
                        ledgerJournalTrans.delete();
                    }
                }
                else
                {
                    custVendTransOpenData = CustVendTransOpenData::construct(custTransOpen);
                    discGraceDays   = CustPaymModeTable::discGraceDays(ledgerJournalTrans.PaymMode);
                    calcDiscDate    = custVendTransOpenData.calcDiscDate(num2date(date2num(ledgerJournalTrans.TransDate) - discGraceDays));
                    settleAmountCur = custVendTransOpenData.remainAmountCashDisc(calcDiscDate);

                    if (!settleAmountCur)
                    {
                        settleAmountCur =  custTransOpen.AmountCur;
                    }

                    specTransManager.insert(custTransOpen.company(),
                        custTransOpen.TableId,
                        custTransOpen.RecId,
                        settleAmountCur,
                        ledgerJournalTrans.CurrencyCode);
                    ledgerJournalTrans.MarkedInvoice = custTrans.Invoice;
                    ledgerJournalTrans.SettleVoucher = this.getSettlementType();
                    ledgerJournalTrans.update();
                }
            }
        }

        return errorTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAutomaticSettlementType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the settlement type based on <c>CustParameters</c> table.
    /// </summary>
    /// <returns>
    ///     The settlement type.
    /// </returns>
    protected SettlementType findAutomaticSettlementType()
    {
        return (CustParameters::findByCompany(ledgerJournalTrans.Company).AutoSettle ? SettlementType::OpenTransact : SettlementType::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettlementType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the settlement type.
    /// </summary>
    /// <returns>
    ///     The settlement type.
    /// </returns>
    protected SettlementType getSettlementType()
    {
        return SettlementType::SelectedTransact;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorTxt</Name>
				<Source><![CDATA[
    public str errorTxt(Counter _counter)
    {
        return conpeek(recordContainer[_counter],3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillControlReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill control report.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">Ledger journal transaction record.</param>
    /// <param name = "_transType">Transaction type.</param>
    /// <param name = "_errorTxt">Error text.</param>
    public void fillControlReport(LedgerJournalTrans _ledgerJournalTrans,
                                     str 2              _transType,
                                     str                _errorTxt)
    {
        recordContainer[numOfRecord] = [_ledgerJournalTrans,
                                        _transType,
                                        _errorTxt];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceCustTransByInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a customer transaction record for a specific invoice.
    /// </summary>
    /// <param name="_invoice">
    ///    The invoice to use to search for customer transactions.
    /// </param>
    /// <param name="_company">
    ///    The company for which to find the associated company accounts.
    /// </param>
    /// <returns>
    ///    The customer transaction that is associated with the specified invoice.
    /// </returns>
    /// <remarks>
    ///    First the shared service companies are searched for customer transactions. If no transactions are
    ///    found, all companies are searched. If more than one customer transaction is found, the first
    ///    transaction found is used and a warning message is displayed for each transaction.
    /// </remarks>
    public CustTrans findInvoiceCustTransByInvoice(InvoiceId _invoice, CompanyId _company)
    {
        CustTrans       custTrans;
        CustTrans       custTransSearch;
        container       infologMessages;
        container       virtualCompanyCompanies;
        int             i;

        void cacheRecord()
        {
            numCustTransFound++;

            // Cache the first record
            if (numCustTransFound == 1)
            {
                custTrans = custTransSearch.data();
            }

            infologMessages += strfmt("@SYS122730",
                custTransSearch.company(),
                custTransSearch.TransDate,
                custTransSearch.AmountCur,
                custTransSearch.CurrencyCode);
        }

        ;

        numCustTransFound = 0;

        // Get the companies that are in the virtual company.
        virtualCompanyCompanies = CustVendOpenTransManager::findSharedServiceCompanies(_company);

        while select crosscompany:virtualCompanycompanies custTransSearch
            where custTransSearch.Invoice == _invoice
        {
            cacheRecord();
        }

        // If a customer transaction was not found, query across all companies.
        if (custTrans.RecId == 0)
        {
            while select crosscompany custTransSearch
                where custTransSearch.Invoice == _invoice
            {
                cacheRecord();
            }
        }

        // If there are duplicates, send messages to the infolog
        if (numCustTransFound > 1)
        {
            // Display initial warning about having duplicates
            warning(strfmt("@SYS122732", _invoice));

            // Add the header message
            setprefix("@SYS68654");
            // Add each message with custTrans information
            for (i=1; i<=conlen(infologMessages); i++)
            {
                info(conpeek(infologMessages, i));
            }
        }

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceCustTransByPaymId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a customer transaction record for a specific payment ID.
    /// </summary>
    /// <param name="_paymId">
    ///    The payment ID to use to search for customer transactions.
    /// </param>
    /// <param name="_company">
    ///    The company for which to find the associated company accounts.
    /// </param>
    /// <returns>
    ///    The customer transaction that is associated with the specified payment ID.
    /// </returns>
    /// <remarks>
    ///    First the shared service companies are searched for customer transactions. If no transactions are
    ///    found, all companies are searched. If more than one customer transaction is found, the first
    ///    transaction found is used and a warning message is displayed for each transaction.
    /// </remarks>
    public CustTrans findInvoiceCustTransByPaymId(PaymId _paymId, CompanyId _company)
    {
        CustTrans       custTrans;
        CustTrans       custTransSearch;
        container       infologMessages;
        container       virtualCompanyCompanies;
        int             i;

        void cacheRecord()
        {
            numCustTransFound++;

            // Cache the first record
            if (numCustTransFound == 1)
            {
                custTrans = custTransSearch.data();
            }

            infologMessages += strfmt("@SYS122730",
                custTransSearch.company(),
                custTransSearch.TransDate,
                custTransSearch.AmountCur,
                custTransSearch.CurrencyCode);
        }

        numCustTransFound = 0;

        // Get the companies that are in the virtual company.
        virtualCompanyCompanies = CustVendOpenTransManager::findSharedServiceCompanies(_company);

        while select crosscompany:virtualCompanycompanies custTransSearch
            where custTransSearch.PaymId == _paymId
        {
            cacheRecord();
        }

        // If a customer transaction was not found, query across all companies.
        if (custTrans.RecId == 0)
        {
            while select crosscompany custTransSearch
                where custTransSearch.PaymId == _paymId
            {
                cacheRecord();
            }
        }

        // If a customer transaction was not found, finding based on MCRPaymOrderID.
        if (custTrans.RecId == 0)
        {
            while select crosscompany custTransSearch
                where custTransSearch.MCRPaymOrderID == _paymId
            {
                cacheRecord();
            }
        }

        // If there are duplicates, send messages to the infolog
        if (numCustTransFound > 1)
        {
            // Display initial warning about having duplicates
            warning(strfmt("@SYS122733", _paymId));

            // Add the header message
            setprefix("@SYS68654");
            // Add each message with custTrans information
            for (i=1; i<=conlen(infologMessages); i++)
            {
                info(conpeek(infologMessages, i));
            }
        }

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDisk2Journal</Name>
				<Source><![CDATA[
    void fromDisk2Journal()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>importFileText</Name>
				<Source><![CDATA[
    public TempStr importFileText()
    {
        return "@SYS4047" + ': ' + filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIncorrectRecords</Name>
				<Source><![CDATA[
    public NoYes insertIncorrectRecords()
    {
        return insertIncorrectRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans ledgerJournalTrans(Counter _counter)
    {
        return conpeek(recordContainer[_counter],1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfRecord</Name>
				<Source><![CDATA[
    public Counter numOfRecord()
    {
        return numOfRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    boolean openFile()
    {
        boolean ret = false;

        asciiFile = CustInPaym::openFileStream(stream);

        if (asciiFile)
        {
            if (asciiFile.status())
            {
                throw error("@SYS52680");
            }

            asciiFile.inFieldDelimiter('\r\n');
            asciiFile.inRecordDelimiter('\r\n');
            ret = true;
        }
        else
        {
            throw error(strfmt("@SYS62207",filename));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printControlReport</Name>
				<Source><![CDATA[
    protected void printControlReport()
    {
        Args       args;

        args = new Args();
        args.object(this);
        new MenuFunction(menuitemoutputstr(CustInPaymSE), MenuItemType::Output).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmount_EUR</Name>
				<Source><![CDATA[
    public Amount totalAmount_EUR()
    {
        return totalAmount_EUR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmount_SEK</Name>
				<Source><![CDATA[
    public Amount totalAmount_SEK()
    {
        return totalAmount_SEK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public str 2 transType(Counter _counter)
    {
        return conpeek(recordContainer[_counter],2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;

            default :
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Dialog which is used to choose payment file and payment account.
    /// </summary>
    /// <returns>
    ///     Dailog object
    /// </returns>
    public Object dialog()
    {
        baseDialog = super();

        DialogGroup dialogGroup = baseDialog.addGroup(this.fileUploadGroupName());

        FormBuildControl formBuildControl = baseDialog.formBuildDesign().control(dialogGroup.name());
        dialogFileUpload = formBuildControl.addControlEx(classstr(FileUpload), 'FileUpload');
        dialogFileUpload.style(FileUploadStyle::MinimalWithFilename);
        dialogFileUpload.baseFileUploadStrategyClassName(classstr(PaymentFileTemporaryStorageStrategy));
        dialogFileUpload.fileNameLabel("@SYS308842");

        return baseDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileUploadGroupName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the label for the file upload group.
    /// </summary>
    /// <returns>
    /// The label for the file upload group.
    /// </returns>
    protected str fileUploadGroupName()
    {
        return "@SYS309953";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables the dialog Ok button until the file upload is complete.
    /// </summary>
    /// <param name="_dialog">The <c>Runbase</c> dialog object.</param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        fileUpload = _dialog.formRun().control(_dialog.formRun().controlId('FileUpload'));
        fileUpload.notifyUploadCompleted += eventhandler(this.uploadCompleted);
        this.setDialogOkButtonEnabled(_dialog, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// After the file has been uploaded, the Ok button is enabled.
    /// </summary>
    public void uploadCompleted()
    {
        filename = fileUpload.fileName();

        this.setDialogOkButtonEnabled(baseDialog, true);

        stream = fileUpload.getUploadedFile(true);

        fileUpload.notifyUploadCompleted -= eventhandler(this.UploadCompleted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogOkButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the dialog Ok button.
    /// </summary>
    /// <param name = "_dialog">The <c>Runbase</c> dialog object.</param>
    /// <param name = "_isEnabled">Indicates to enable or disable the Ok button.</param>
    protected void setDialogOkButtonEnabled(DialogRunbase _dialog, boolean _isEnabled)
    {
        FormControl okButtonControl = _dialog.formRun().control(_dialog.formRun().controlId('OkButton'));

        if (okButtonControl)
        {
            okButtonControl.enabled(_isEnabled);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>