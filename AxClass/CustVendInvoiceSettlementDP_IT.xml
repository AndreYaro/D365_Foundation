<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendInvoiceSettlementDP_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SRSReportParameterAttribute(classstr(CustVendInvoiceSettlementContract_IT))]
public class CustVendInvoiceSettlementDP_IT extends SRSReportDataProviderBase
{
    public CustVendInvoiceSettlementBuild_IT builder;
    public int transGroup;
    public AmountMst balance;
    public CustVendInvoiceTmp_IT custVendInvoiceTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustVendInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the <c>CustVendInvoiceTmp</c> record.
    /// </summary>
    /// <returns>
    /// The <c>CustVendInvoiceTmp</c> record.
    /// </returns>
    [SrsReportDataSetAttribute(tablestr(CustVendInvoiceTmp_IT))]
    public CustVendInvoiceTmp_IT getCustVendInvoiceTmp()
    {
        select custVendInvoiceTmp;
        return custVendInvoiceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustVendInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a <c>CustVendInvoiceTmp</c> record.
    /// </summary>
    /// <param name = "_custVendTransLocal">
    /// The <c>CustVendTrans</c> record that has the invoice information.
    /// </param>
    private void insertCustVendInvoiceTmp(CustVendTrans _custVendTransLocal)
    {                
        custVendInvoiceTmp.Balance = balance;
        custVendInvoiceTmp.TransGroup = transGroup;
        custVendInvoiceTmp.Voucher = _custVendTransLocal.Voucher;
        custVendInvoiceTmp.InvoiceDate = _custVendTransLocal.TransDate;
        custVendInvoiceTmp.InvoiceId = _custVendTransLocal.Invoice;
        custVendInvoiceTmp.AmountMST = _custVendTransLocal.AmountMST;
        custVendInvoiceTmp.AmountCur = _custVendTransLocal.AmountCur;
        custVendInvoiceTmp.CurrencyCode = _custVendTransLocal.CurrencyCode;
        custVendInvoiceTmp.NegInstId = _custVendTransLocal.NegInstId;
        custVendInvoiceTmp.NegInstStatus = _custVendTransLocal.NegInstStatus;
        custVendInvoiceTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLastCustVendInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a <c>CustVendInvoiceTmp</c> record.
    /// </summary>
    private void insertLastCustVendInvoiceTmp()
    {                
        custVendInvoiceTmp.Balance = balance;
        custVendInvoiceTmp.TransGroup = transGroup;
        custVendInvoiceTmp.Voucher = '';
        custVendInvoiceTmp.InvoiceDate = dateNull();
        custVendInvoiceTmp.InvoiceId = '';
        custVendInvoiceTmp.AmountMST = 0;
        custVendInvoiceTmp.AmountCur = 0;
        custVendInvoiceTmp.CurrencyCode = '';
        custVendInvoiceTmp.NegInstId = '';
        custVendInvoiceTmp.NegInstStatus = CustVendNegInstStatus::None;
        custVendInvoiceTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpFromInvoiceList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a <c>CustVendTempInvoiceList</c> record.
    /// </summary>
    /// <param name = "_custVendTempInvoiceList">
    /// The <c>CustVendTempInvoiceList</c> record that has the invoice information.
    /// </param>
    private void insertTmpFromInvoiceList(CustVendTempInvoiceList_IT _custVendTempInvoiceList)
    {        
        custVendInvoiceTmp.Balance = balance;
        custVendInvoiceTmp.TransGroup = transGroup;
        custVendInvoiceTmp.Voucher = _custVendTempInvoiceList.Voucher;
        custVendInvoiceTmp.InvoiceDate = _custVendTempInvoiceList.InvoiceDate;
        custVendInvoiceTmp.InvoiceId = _custVendTempInvoiceList.InvoiceId;
        custVendInvoiceTmp.AmountMST = _custVendTempInvoiceList.AmountMST;
        custVendInvoiceTmp.AmountCur = _custVendTempInvoiceList.AmountCur;
        custVendInvoiceTmp.CurrencyCode = _custVendTempInvoiceList.CurrencyCode;
        custVendInvoiceTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00046, funcName());
        CustVendInvoiceSettlementContract_IT contract = this.parmDataContract() as CustVendInvoiceSettlementContract_IT;

        builder = new CustVendInvoiceSettlementBuild_IT();
        builder.parmModule(contract.parmCustVend() == CustVendACType::Cust ? ModuleCustVend::Cust : ModuleCustVend::Vend);
        builder.parmCustVendAccount(contract.parmCustVendAccount());
        builder.parmInvoiceVoucher(contract.parmVoucher());
        builder.parmInvoiceId(contract.parmInvoiceId());
        builder.parmFromDate(contract.parmFromDate() ? contract.parmFromDate() : dateNull());
        builder.parmToDate(contract.parmToDate() ? contract.parmToDate() : dateMax());
        builder.parmOpenTransOnly(contract.parmShowOpenOnly());

        CustVendTempInvoiceList_IT custVendTempInvoiceList;
        custVendTempInvoiceList.setTmpData(builder.buildCustVendTempInvoiceList());

        while select custVendTempInvoiceList
        {
            this.processInvoiceList(custVendTempInvoiceList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInvoiceList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes all transactions that needs to be displayed.
    /// </summary>
    /// <param name = "_custVendTempInvoiceList">
    /// The <c>CustVendTempInvoiceList</c> record that has the invoice information.
    /// </param>
    protected void processInvoiceList(CustVendTempInvoiceList_IT _custVendTempInvoiceList)
    {
        transGroup ++;
        balance = _custVendTempInvoiceList.AmountMST;

        CustVendTrans custVendTrans;
        custVendTrans.setTmpData(builder.buildCustVendTmpInvoiceSettlement(_custVendTempInvoiceList));
        Map invoiceBalancesMap = builder.getBalancesMap();

        while select custVendTrans
            where custVendTrans.recId != _custVendTempInvoiceList.OriginalRecId
        {
            if (invoiceBalancesMap.exists(custVendTrans.RecId))
            {
                balance = invoiceBalancesMap.lookup(custVendTrans.RecId);
            }

            this.insertCustVendInvoiceTmp(custVendTrans);
        }

        this.insertLastCustVendInvoiceTmp();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>