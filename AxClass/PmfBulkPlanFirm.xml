<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfBulkPlanFirm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class that handles firming of the consolidate planned orders.
/// </summary>
class PmfBulkPlanFirm
{
    TmpPmfConsolidatedOrder         tmpConsOrd;
    TmpPmfConsolidatedBulk          tmpConsBulk;
    TmpPmfConsolidatedPack          tmpConsPack;
    Map                             mapReqTrans;
    Map                             mapReqPoDeleted;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// The object is created
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMapReqPODeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets or set the map for the deleted planned orders.
    /// </summary>
    /// <param name="_map">Map of deleted planned orders.</param>
    /// <returns>returns Map.</returns>
    public Map parmMapReqPODeleted(Map _map = mapReqPoDeleted)
    {
        mapReqPoDeleted= _map;
        return mapReqPoDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpConsBulk</Name>
				<Source><![CDATA[
    public TmpPmfConsolidatedBulk parmTmpConsBulk(TmpPmfConsolidatedBulk _tmpConsBulk = tmpConsBulk)
    {
        tmpConsBulk= _tmpConsBulk;
        return tmpConsBulk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpConsOrd</Name>
				<Source><![CDATA[
    public TmpPmfConsolidatedOrder parmTmpConsOrd(TmpPmfConsolidatedOrder _tmpConsOrd = tmpConsOrd)
    {
        tmpConsOrd= _tmpConsOrd;
        return tmpConsOrd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpConsPack</Name>
				<Source><![CDATA[
    public TmpPmfConsolidatedPack parmTmpConsPack(TmpPmfConsolidatedPack _tmpConsPack = tmpConsPack)
    {
        tmpConsPack= _tmpConsPack;
        return tmpConsPack;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method runs thru the marked consolidated orders.
    /// adjusting quantities and firming the planned orders.
    /// </summary>
    public void run()
    {
        ReqTransPoMarkFirm  poFirm;
        ReqTrans            reqTrans, reqTransPo;
        ReqPO               reqPO;

        mapReqPoDeleted  = new Map(new DictField(tablenum(ReqTrans),fieldnum(ReqTrans, RecId)).baseType(), Types::Record);

        try
        {
            ttsbegin;

            while select tmpConsOrd
                where tmpConsOrd.ReqTransMark
            {
                // Firm all bulk orders
                mapReqTrans = new Map(Types::Integer,Types::Record);
                while select tmpConsBulk
                    where tmpConsBulk.ConsOrdId == tmpConsOrd.ConsOrdId &&
                    (tmpConsBulk.Qty != 0)
                {
                    reqTrans = ReqTrans::findRecId(tmpConsBulk.ReqTransRecId);
                    reqPO = reqTrans.reqPo(true);
                    reqPO.Qty  = tmpConsBulk.Qty;
                    reqPO.PurchQty = tmpConsBulk.Qty;
                    reqPO.PmfBulkOrd = true;
                    reqPO.update();
                    reqTransPo = reqPO.reqTrans();
                    mapReqTrans.insert(reqTransPo.RecId, reqTransPo);
                }

                poFirm = ReqTransPOMarkFirm::newMap(mapReqTrans);
                poFirm.parmPmfConsOrdId(tmpConsOrd.ConsOrdId);
                poFirm.runOperation();
                this.updateMap(poFirm.packReqPoDeleted());

                // Firm all packed orders
                mapReqTrans = new Map(Types::Integer,Types::Record);
                while select tmpConsPack
                    where tmpConsPack.ConsOrdId == tmpConsOrd.ConsOrdId &&
                    (tmpConsPack.Qty != 0)
                {
                    reqTrans = ReqTrans::findRecId(tmpConsPack.ReqTransRecId);
                    reqPO = reqTrans.reqPo(true);
                    reqPO.Qty  = tmpConsPack.Qty;
                    reqPO.PurchQty = tmpConsPack.Qty;
                    reqPO.PmfBulkOrd = false;
                    reqPO.update(null,null,'',true);
                    reqTransPo = reqPO.reqTrans();
                    mapReqTrans.insert(reqTransPo.RecId, reqTransPo);           
                }
                poFirm = ReqTransPoMarkFirm::newMap(mapReqTrans);
                poFirm.parmPmfConsOrdId(tmpConsOrd.ConsOrdId);
                poFirm.runOperation();
                this.updateMap(poFirm.packReqPoDeleted());

                // Create the consolidated order
                PmfConsOrd consOrd;
                consOrd.ConsOrdId    = tmpConsOrd.ConsOrdId;
                consOrd.ItemName     = tmpConsOrd.ItemName;
                consOrd.ConsQty      = tmpConsOrd.ConsQty;
                consOrd.bomUnitId    = tmpConsOrd.bomUnitId;
                consOrd.ReqDateOrder = tmpConsOrd.ReqDateOrder;
                consOrd.ReqDateDlv   = tmpConsOrd.ReqDateDlv;
                consOrd.ReqTime      = tmpConsOrd.ReqTime;
                consOrd.ReqTimeOrder = tmpConsOrd.ReqTimeOrder;
                consOrd.insert();
            }

            // Clean up the temporary order records that was firmed
            delete_from tmpConsOrd
                where tmpConsOrd.ReqTransMark;

            ttscommit;
        }
        catch (Exception::Error)
        {
            ttsabort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method updates the deleted planned orders map.
    /// </summary>
    /// <param name="_poDeleted">container of the planned orders to delete.</param>
    public void updateMap(container _poDeleted)
    {
        MapIterator mi;
        ReqPO       reqPO;
        Map  mapPoDeleted  = (_poDeleted) ? Map::create(_poDeleted) : null;

        if (mapPoDeleted)
        {
            mi = new MapIterator(mapPoDeleted);
            mi.begin();
            while (mi.more())
            {
                reqPO = mapPoDeleted.lookup(mi.key());
                mapReqPoDeleted.insert(reqPO.RecId, reqPO);
                mi.next();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class.
    /// </summary>
    /// <returns>returns instance.</returns>
    public static PmfBulkPlanFirm construct()
    {
        return new PmfBulkPlanFirm();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>