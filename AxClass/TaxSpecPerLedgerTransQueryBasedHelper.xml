<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSpecPerLedgerTransQueryBasedHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class containing helper methods for processing TaxSpecPerLedgerTrans report using report query.
/// </summary>
public class TaxSpecPerLedgerTransQueryBasedHelper extends TaxSpecPerLedgerTransBaseHelper
{
    TaxSpecPerLedgerTransTmp reportTableTmp;

    #EECountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the logic required for the report.
    /// </summary>
    public void process()
    {
        this.initializeRanges();

        reportQuery.dataSourceTable(tableNum(TaxTrans)).addRange(fieldNum(TaxTrans, TaxOrigin)).value(SysQuery::valueNot(enum2int(TaxOrigin::TaxReporting)));
        reportQuery.dataSourceTable(tableNum(GeneralJournalEntry)).addRange(fieldNum(GeneralJournalEntry, Ledger)).value(SysQuery::value(ledgerRecId));

        reportQuery.dataSourceTable(tableNum(GeneralJournalEntry)).addRange(fieldNum(GeneralJournalEntry, AccountingDate)).value(SysQuery::range(fromDate, toDate));
        reportQuery.dataSourceTable(tableNum(MainAccountLedgerDimensionView)).addRange(fieldNum(MainAccountLedgerDimensionView, MainAccount)).value(SysQuery::range(fromMainAccount, toMainAccount));
        reportQuery.dataSourceTable(tableNum(TaxTrans)).addRange(fieldNum(TaxTrans, TaxCode)).value(SysQuery::range(fromTaxCode, toTaxCode));

        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            reportQuery.dataSourceTable(tableNum(TaxTrans_W)).joinMode(JoinMode::InnerJoin);
            findOrCreateRange_W(reportQuery.dataSourceTable(tableNum(TaxTrans_W)),fieldNum(taxTrans_W, VatDueDate_W), queryRange(fromVATDate, toVATDate));
        }

        reportTable.setConnection(userConnection);
        reportTableTmp.setConnection(userConnection);

        this.processDetailsForTaxAccount();
        this.processDetails();       
        this.processDetailsForSDWithoutBaseVariance();
        if (isReportByAccTypeExpenditureFeatureEnabled)
        {
            this.updateExpenditureAccountForSDL();
        }

        if (contract.parmTotalOnly())
        {
            this.processTotals();
        }
        else
        {
            reportTable.linkPhysicalTableInstance(reportTableTmp);
        }

        this.updateMainAccountName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDetails</Name>
				<Source><![CDATA[
    private void processDetails()
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccountLedgerDimensionView mainAccountLedgerDimensionView;
        TaxTrans taxTrans;
        TaxAccountingDistParentLineView acctDistView;
        TaxTable taxTable;
        TransactionReversalTrans transReversal;
        TaxTrans_W taxTrans_W;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        boolean isSouceDocumentScenario;
        RecordInsertList recordInsertList = new RecordInsertList(reportTableTmp.TableId, true, true, true, true, true, reportTableTmp);
        QueryBuildDataSource acctDistViewDataSource;
        QueryBuildRange qbr;
        QueryBuildDataSource linkTableDataSource;

        QueryRun queryRun;

        CurrencyCode accountingCurrency = Ledger::accountingCurrency(CompanyInfo::current());

        linkTableDataSource = reportQuery.dataSourceTable(tableNum(TaxTransGeneralJournalAccountEntry));
        qbr = linkTableDataSource.addRange(fieldNum(TaxTransGeneralJournalAccountEntry, TaxTransRelationship));
        qbr.value(queryValue(TaxTransRelationshipType::CashDiscount));
        acctDistViewDataSource = reportQuery.dataSourceTable(tableNum(TaxAccountingDistParentLineView));
        qbr = acctDistViewDataSource.addRange(fieldNum(TaxAccountingDistParentLineView, MonetaryAmount));
    
        //
        // (((taxTransGeneralJournalAccountEntry.MonetaryAmountType  == MonetaryAmount::ExtendedPrice ||
        //   taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::Charge) && acctDistView.MonetaryAmount == MonetaryAmount::Tax)
        //   || ((taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::PriceVariance ||
        //       taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::ChargeVariance ||
        //       taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::QuantityVariance) && acctDistView.MonetaryAmount == MonetaryAmount::TaxVariance))
        //
    
        qbr.value(strFmt('((((%1.%2 == %3) || (%1.%2 == %9)) && (%4.%5 == %6)) || (( (%1.%2 == %7) || (%1.%2 == %10) || (%1.%2 == %11)) && (%4.%5 == %8)))',
                          linkTableDataSource.name(), fieldStr(TaxTransGeneralJournalAccountEntry, MonetaryAmountType), queryValue(enum2int(MonetaryAmount::ExtendedPrice)),
                          acctDistViewDataSource.name(), fieldStr(TaxAccountingDistParentLineView, MonetaryAmount), queryValue(enum2int(MonetaryAmount::Tax)),
                          queryValue(enum2int(MonetaryAmount::PriceVariance)), queryValue(enum2int(MonetaryAmount::TaxVariance)), queryValue(enum2int(MonetaryAmount::Charge)),
                          queryValue(enum2int(MonetaryAmount::ChargeVariance)),queryValue(enum2int(MonetaryAmount::QuantityVariance))));

        generalJournalAccountEntry.skipPostLoad(true);

        queryRun = new QueryRun(reportQuery);

        new SkipAOSValidationPermission().assert();

        while (queryRun.next())
        {
            generalJournalEntry = queryRun.get(tableNum(GeneralJournalEntry)) as GeneralJournalEntry;
            generalJournalAccountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;
            mainAccountLedgerDimensionView = queryRun.get(tableNum(MainAccountLedgerDimensionView)) as MainAccountLedgerDimensionView;
            taxTrans = queryRun.get(tableNum(TaxTrans)) as TaxTrans;
            taxTrans_W = queryRun.get(tableNum(TaxTrans_W)) as TaxTrans_W;
            acctDistView = queryRun.get(tableNum(TaxAccountingDistParentLineView)) as TaxAccountingDistParentLineView;
            taxTable = queryRun.get(tableNum(TaxTable)) as TaxTable;
            transReversal = queryRun.get(tableNum(TransactionReversalTrans)) as TransactionReversalTrans;
            taxTransGeneralJournalAccountEntry = queryRun.get(tableNum(TaxTransGeneralJournalAccountEntry)) as TaxTransGeneralJournalAccountEntry;

            isSouceDocumentScenario = taxTrans.SourceDocumentLine != 0
                                        && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
                                        && taxTrans.TaxOrigin != TaxOrigin::Payment
                                        && taxTrans.TaxOrigin != TaxOrigin::CashDisc;

            reportTableTmp.clear();
            reportTableTmp.GeneralJournalEntry = generalJournalEntry.RecId;
            reportTableTmp.AccountingDate = generalJournalEntry.AccountingDate;
            reportTableTmp.JournalNumber = generalJournalEntry.JournalNumber;

            if (generalJournalEntry.SubledgerVoucher)
            {
                reportTableTmp.Voucher = generalJournalEntry.SubledgerVoucher;
            }
            else
            {
                reportTableTmp.Voucher = literalStr("@SYS110428");
            }

            reportTableTmp.GeneralJournalAccountEntry = generalJournalAccountEntry.RecId;
            reportTableTmp.Text = generalJournalAccountEntry.Text;

            reportTableTmp.MainAccount = mainAccountLedgerDimensionView.MainAccount;
            reportTableTmp.FullyQualifiedAccount = mainAccountLedgerDimensionView.FullyQualifiedAccount;
            reportTableTmp.Name = mainAccountLedgerDimensionView.Name;
            reportTableTmp.MainAccountRecId = mainAccountLedgerDimensionView.MainAccountRecId;

            if (generalJournalAccountEntry.IsCredit)
            {
                reportTableTmp.AmountDebit = 0;
                reportTableTmp.AmountCredit = -GeneralJournalAccountEntry.AccountingCurrencyAmount;
            }
            else
            {
                reportTableTmp.AmountDebit = GeneralJournalAccountEntry.AccountingCurrencyAmount;
                reportTableTmp.AmountCredit = 0;
            }

            reportTableTmp.TaxCode = taxTrans.TaxCode;
            reportTableTmp.TaxCodeName = taxTable.TaxName;
            reportTableTmp.TaxTrans = taxTrans.RecId;

            reportTableTmp.TaxReceivable = 0;
            reportTableTmp.TaxPayable = 0;

            if (isSouceDocumentScenario)
            {
                if (taxTrans.TaxDirection == TaxDirection::IncomingTax)
                {
                    reportTableTmp.TaxReceivable = acctDistView.AccountingCurrencyAmount;
                }
                else if (taxTrans.TaxDirection == TaxDirection::OutgoingTax)
                {
                    reportTableTmp.TaxPayable = -acctDistView.AccountingCurrencyAmount;
                }

                reportTableTmp.TaxBaseAmount = taxTransGeneralJournalAccountEntry.AccountingCurrencyAmount;
            }
            else
            {
                if (taxTrans.TaxDirection == TaxDirection::IncomingTax)
                {
                    reportTableTmp.TaxReceivable = taxTrans.TaxAmount - taxTrans.TaxInCostPriceMST;
                }
                else if (taxTrans.TaxDirection == TaxDirection::OutgoingTax)
                {
                    reportTableTmp.TaxPayable = -taxTrans.TaxAmount;
                }

                reportTableTmp.TaxBaseAmount = taxTrans.TaxBaseAmount;
            } 

            reportTableTmp.TraceNum =  transReversal.TraceNum;

            // <GEEW>
            if (taxTrans_W)
            {
                reportTableTmp.VatDueDate_W = taxTrans_W.VatDueDate_W;
            }
            // </GEEW>

            recordInsertList.add(reportTableTmp);
        }

        recordInsertList.insertDatabase();

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDetailsForSDWithoutBaseVariance</Name>
				<Source><![CDATA[
    private void processDetailsForSDWithoutBaseVariance()
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccountLedgerDimensionView mainAccountLedgerDimensionView;
        TaxTrans taxTrans;
        TaxAccountingDistParentLineView acctDistView;
        TaxTable taxTable;
        TransactionReversalTrans transReversal;
        TaxTrans_W taxTrans_W;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        boolean isSouceDocumentScenario;
        RecordInsertList recordInsertList = new RecordInsertList(reportTableTmp.TableId, true, true, true, true, true, reportTableTmp);
        QueryBuildDataSource acctDistViewDataSource;
        QueryBuildDataSource taxLinkNotExistsJoinDataSource;
        QueryBuildRange qbr;
        QueryBuildDataSource linkTableDataSource;
    
        QueryRun queryRun;
    
        CurrencyCode accountingCurrency = Ledger::accountingCurrency(CompanyInfo::current());
    
        linkTableDataSource = reportQuery.dataSourceTable(tableNum(TaxTransGeneralJournalAccountEntry));
        linkTableDataSource.clearRanges();
        linkTableDataSource.addRange(fieldNum(TaxTransGeneralJournalAccountEntry, TaxTransRelationship)).value(queryValue(TaxTransRelationshipType::TransactionLineAccount));
        linkTableDataSource.addRange(fieldNum(TaxTransGeneralJournalAccountEntry, TaxTransRelationship)).value(queryValue(TaxTransRelationshipType::CashDiscount));
        acctDistViewDataSource = reportQuery.dataSourceTable(tableNum(TaxAccountingDistParentLineView));
        acctDistViewDataSource.joinMode(JoinMode::InnerJoin);
        acctDistViewDataSource.clearRanges();
        acctDistViewDataSource.addRange(fieldNum(TaxAccountingDistParentLineView, IgnoreRecord)).value(queryValue(NoYes::No));
        taxLinkNotexistsJoinDataSource = linkTableDataSource.addDataSource(tableNum(TaxTransGeneralJournalAccountEntry), 'TaxLinkNotExists');
        taxLinkNotexistsJoinDataSource.joinMode(JoinMode::NoExistsJoin);
        taxLinkNotexistsJoinDataSource.addLink(fieldNum(TaxTransGeneralJournalAccountEntry, taxTrans), fieldNum(TaxTransGeneralJournalAccountEntry, taxTrans));
        qbr = taxLinkNotexistsJoinDataSource.addRange(fieldNum(TaxTransGeneralJournalAccountEntry, MonetaryAmountType));
        qbr.value(strFmt('((%1.%2 == %3) || (%1.%2 == %4) || (%1.%2 == %5))',
                          taxLinkNotexistsJoinDataSource.name(), fieldStr(TaxTransGeneralJournalAccountEntry, MonetaryAmountType),
                          queryValue(enum2int(MonetaryAmount::QuantityVariance)),queryValue(enum2int(MonetaryAmount::PriceVariance)),
                          queryValue(enum2int(MonetaryAmount::ChargeVariance))));
    
        qbr = acctDistViewDataSource.addRange(fieldNum(TaxAccountingDistParentLineView, MonetaryAmount));

        //
        // ((taxTransGeneralJournalAccountEntry.MonetaryAmountType  == MonetaryAmount::ExtendedPrice
        //          || taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::Charge)
        //      && (acctDistView.MonetaryAmount == MonetaryAmount::TaxVariance))
    
        qbr.value(strFmt('(((%1.%2 == %3) || (%1.%2 == %4)) && (%5.%6 == %7))',
                          linkTableDataSource.name(), fieldStr(TaxTransGeneralJournalAccountEntry, MonetaryAmountType),
                          queryValue(enum2int(MonetaryAmount::ExtendedPrice)),queryValue(enum2int(MonetaryAmount::Charge)),
                          acctDistViewDataSource.name(), fieldStr(TaxAccountingDistParentLineView, MonetaryAmount),
                          queryValue(enum2int(MonetaryAmount::TaxVariance))));
    
        generalJournalAccountEntry.skipPostLoad(true);
    
        queryRun = new QueryRun(reportQuery);
    
        new SkipAOSValidationPermission().assert();

        while (queryRun.next())
        {
            generalJournalEntry = queryRun.get(tableNum(GeneralJournalEntry)) as GeneralJournalEntry;
            generalJournalAccountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;
            mainAccountLedgerDimensionView = queryRun.get(tableNum(MainAccountLedgerDimensionView)) as MainAccountLedgerDimensionView;
            taxTrans = queryRun.get(tableNum(TaxTrans)) as TaxTrans;
            taxTrans_W = queryRun.get(tableNum(TaxTrans_W)) as TaxTrans_W;
            acctDistView = queryRun.get(tableNum(TaxAccountingDistParentLineView)) as TaxAccountingDistParentLineView;
            taxTable = queryRun.get(tableNum(TaxTable)) as TaxTable;
            transReversal = queryRun.get(tableNum(TransactionReversalTrans)) as TransactionReversalTrans;
            taxTransGeneralJournalAccountEntry = queryRun.get(tableNum(TaxTransGeneralJournalAccountEntry)) as TaxTransGeneralJournalAccountEntry;
    
            isSouceDocumentScenario = taxTrans.SourceDocumentLine != 0
                                        && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
                                        && taxTrans.TaxOrigin != TaxOrigin::Payment
                                        && taxTrans.TaxOrigin != TaxOrigin::CashDisc;
            if (!isSouceDocumentScenario)
            {
                continue;
            }
    
            reportTableTmp.clear();
            reportTableTmp.GeneralJournalEntry = generalJournalEntry.RecId;
            reportTableTmp.AccountingDate = generalJournalEntry.AccountingDate;
            reportTableTmp.JournalNumber = generalJournalEntry.JournalNumber;
            reportTableTmp.Voucher = generalJournalEntry.SubledgerVoucher;
    
            reportTableTmp.GeneralJournalAccountEntry = generalJournalAccountEntry.RecId;
            reportTableTmp.Text = generalJournalAccountEntry.Text;
    
            reportTableTmp.MainAccount = mainAccountLedgerDimensionView.MainAccount;
            reportTableTmp.FullyQualifiedAccount = mainAccountLedgerDimensionView.FullyQualifiedAccount;
            reportTableTmp.Name = mainAccountLedgerDimensionView.Name;
            reportTableTmp.MainAccountRecId = mainAccountLedgerDimensionView.MainAccountRecId;
    
            if (generalJournalAccountEntry.IsCredit)
            {
                reportTableTmp.AmountDebit = 0;
                reportTableTmp.AmountCredit = -generalJournalAccountEntry.AccountingCurrencyAmount;
            }
            else
            {
                reportTableTmp.AmountDebit = generalJournalAccountEntry.AccountingCurrencyAmount;
                reportTableTmp.AmountCredit = 0;
            }
    
            reportTableTmp.TaxCode = taxTrans.TaxCode;
            reportTableTmp.TaxCodeName = taxTable.TaxName;
            reportTableTmp.TaxTrans = taxTrans.RecId;
    
            reportTableTmp.TaxReceivable = 0;
            reportTableTmp.TaxPayable = 0;
    
            if (taxTrans.TaxDirection == TaxDirection::IncomingTax)
            {
                reportTableTmp.TaxReceivable = acctDistView.AccountingCurrencyAmount;
            }
            else if (taxTrans.TaxDirection == TaxDirection::OutgoingTax)
            {
                reportTableTmp.TaxPayable = -acctDistView.AccountingCurrencyAmount;
            }
    
            reportTableTmp.TaxBaseAmount = taxTransGeneralJournalAccountEntry.AccountingCurrencyAmount;
    
            reportTableTmp.TraceNum =  transReversal.TraceNum;
    
            // <GEEW>
            if (taxTrans_W)
            {
                reportTableTmp.VatDueDate_W = taxTrans_W.VatDueDate_W;
            }
            // </GEEW>
    
            recordInsertList.add(reportTableTmp);
        }

        recordInsertList.insertDatabase();
    
        CodeAccessPermission::revertAssert();
    
        select firstOnly RecId from reportTableTmp;
        this.updateRecordNumbers(reportTableTmp.getPhysicalTableName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDetailsForTaxAccount</Name>
				<Source><![CDATA[
    ///<summary>
    ///Processes the transactions posted to tax account
    ///</summary>
    ///<remark>
    ///The logics here should be consistent with the logics for tax account in TaxSpecPerLedgerTransDetailsHelper.
    ///</remark>
    private void processDetailsForTaxAccount()
    {
        Query reportQueryLocal = reportQuery.makeCopy();
        RecordInsertList recordInsertList = new RecordInsertList(reportTableTmp.TableId, true, true, true, true, true, reportTableTmp);

        QueryBuildDataSource linkTableDataSource = reportQueryLocal.dataSourceTable(tableNum(TaxTransGeneralJournalAccountEntry));
        linkTableDataSource.clearRange(fieldNum(TaxTransGeneralJournalAccountEntry, TaxTransRelationship));
        
        // The condition here is combined by DefaultWhereClause and TaxTransRelationship conditions 
        // for tax account in TaxSpecPerLedgerTransDetailsHelper.fillReportTable().
        //
        //  &&(taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax
        //      ||taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::UseTaxPayable
        //      ||taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TaxInCostPrice)      
        QueryBuildRange qbr = linkTableDataSource.addRange(fieldNum(TaxTransGeneralJournalAccountEntry, TaxTransRelationship));
        qbr.value(queryValue(TaxTransRelationshipType::Tax));
        qbr = linkTableDataSource.addRange(fieldNum(TaxTransGeneralJournalAccountEntry, TaxTransRelationship));
        qbr.value(queryValue(TaxTransRelationshipType::UseTaxPayable));
        qbr = linkTableDataSource.addRange(fieldNum(TaxTransGeneralJournalAccountEntry, TaxTransRelationship));
        qbr.value(queryValue(TaxTransRelationshipType::TaxInCostPrice));
                      
        QueryBuildDataSource taxTransDataSource = reportQueryLocal.dataSourceTable(tableNum(TaxTrans));
        QueryBuildFieldList  taxTransFieldList = taxTransDataSource.fields();
        taxTransFieldList.addField(fieldNum(TaxTrans, SourceBaseAmountCur));
        taxTransFieldList.addField(fieldNum(TaxTrans, SourceTaxAmountCur));
        
        //  && (taxTrans.SourceDocumentLine == 0
        //      || taxTrans.TaxOrigin == TaxOrigin::CashDisc
        //      || taxTrans.TaxOrigin == TaxOrigin::Payment
        //      || taxTrans.TaxOrigin == TaxOrigin::TaxReversed)       
        qbr = taxTransDataSource.addRange(fieldNum(TaxTrans, TaxOrigin));
        qbr.value(strFmt('((%1 == %2) || (%3 == %4) || (%5 == %6) || (%7 == %8))',
            fieldStr(TaxTrans, SourceDocumentLine), queryValue(0),
            fieldStr(TaxTrans, TaxOrigin), queryValue(enum2int(TaxOrigin::CashDisc)),
            fieldStr(TaxTrans, TaxOrigin), queryValue(enum2int(TaxOrigin::Payment)),
            fieldStr(TaxTrans, TaxOrigin), queryValue(enum2int(TaxOrigin::TaxReversed))));
    
        GeneralJournalAccountEntry generalJournalAccountEntry;
        generalJournalAccountEntry.skipPostLoad(true);

        QueryRun queryRun = new QueryRun(reportQueryLocal);

        new SkipAOSValidationPermission().assert();

        while (queryRun.next())
        {
            GeneralJournalEntry generalJournalEntry = queryRun.get(tableNum(GeneralJournalEntry)) as GeneralJournalEntry;
            generalJournalAccountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;
            MainAccountLedgerDimensionView mainAccountLedgerDimensionView = queryRun.get(tableNum(MainAccountLedgerDimensionView)) as MainAccountLedgerDimensionView;
            TaxTrans taxTrans = queryRun.get(tableNum(TaxTrans)) as TaxTrans;
            TaxTrans_W taxTrans_W = queryRun.get(tableNum(TaxTrans_W)) as TaxTrans_W;
            TaxAccountingDistParentLineView acctDistView = queryRun.get(tableNum(TaxAccountingDistParentLineView)) as TaxAccountingDistParentLineView;
            TaxTable taxTable = queryRun.get(tableNum(TaxTable)) as TaxTable;
            TransactionReversalTrans transReversal = queryRun.get(tableNum(TransactionReversalTrans)) as TransactionReversalTrans;
            TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry = queryRun.get(tableNum(TaxTransGeneralJournalAccountEntry)) as TaxTransGeneralJournalAccountEntry;

            reportTableTmp.clear();
            reportTableTmp.GeneralJournalEntry = generalJournalEntry.RecId;
            reportTableTmp.AccountingDate = generalJournalEntry.AccountingDate;
            reportTableTmp.JournalNumber = generalJournalEntry.JournalNumber;

            if (generalJournalEntry.SubledgerVoucher)
            {
                reportTableTmp.Voucher = generalJournalEntry.SubledgerVoucher;
            }
            else
            {
                reportTableTmp.Voucher = literalStr("@SYS110428");
            }

            reportTableTmp.GeneralJournalAccountEntry = generalJournalAccountEntry.RecId;
            reportTableTmp.Text = generalJournalAccountEntry.Text;
            reportTableTmp.AmountDebit = generalJournalAccountEntry.AccountingCurrencyAmount;
            reportTableTmp.IsCredit = generalJournalAccountEntry.IsCredit;

            reportTableTmp.FullyQualifiedAccount = mainAccountLedgerDimensionView.FullyQualifiedAccount;
            reportTableTmp.MainAccount = mainAccountLedgerDimensionView.mainAccount;
            reportTableTmp.Name = mainAccountLedgerDimensionView.Name;
            reportTableTmp.MainAccountRecId = mainAccountLedgerDimensionView.MainAccountRecId;

            reportTableTmp.TaxTrans = taxTrans.RecId;
            reportTableTmp.TaxCode = taxTrans.TaxCode;
            reportTableTmp.TaxDirection = taxTrans.TaxDirection;

            if (FeatureStateProvider::isFeatureEnabled(TaxSpecLedgerTransReportShowTxAmtForTxAcctFlighting::instance())
                && taxTrans.SourceBaseAmountCur == 0
                && taxTrans.SourceTaxAmountCur != 0)
            {
                reportTableTmp.TaxInCostPriceMST = taxTrans.TaxInCostPriceMST;
                reportTableTmp.TaxAmount = taxTrans.TaxAmount;
                reportTableTmp.TaxBaseAmount = taxTrans.TaxBaseAmount;
            }

            reportTableTmp.TaxCodeName = taxTable.TaxName;
            
            if (generalJournalAccountEntry.IsCredit)
            {
                reportTableTmp.AmountDebit = 0;
                reportTableTmp.AmountCredit = -GeneralJournalAccountEntry.AccountingCurrencyAmount;
            }
            else
            {
                reportTableTmp.AmountDebit = GeneralJournalAccountEntry.AccountingCurrencyAmount;
                reportTableTmp.AmountCredit = 0;
            }
         
            reportTableTmp.TaxReceivable = 0;
            reportTableTmp.TaxPayable = 0;
            if (taxTrans.TaxDirection == TaxDirection::IncomingTax)
            {
                reportTableTmp.TaxReceivable = reportTableTmp.TaxAmount - reportTableTmp.TaxInCostPriceMST;
            }
            else if (taxTrans.TaxDirection == TaxDirection::OutgoingTax)
            {
                reportTableTmp.TaxPayable = -reportTableTmp.TaxAmount;
            }
         
            reportTableTmp.TraceNum =  transReversal.TraceNum;

            if (taxTrans_W)
            {
                reportTableTmp.VatDueDate_W = taxTrans_W.VatDueDate_W;
            }

            recordInsertList.add(reportTableTmp);
        }

        recordInsertList.insertDatabase();

        CodeAccessPermission::revertAssert();
        select firstOnly RecId from reportTableTmp;
        this.updateRecordNumbers(reportTableTmp.getPhysicalTableName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExpenditureAccountForSDL</Name>
				<Source><![CDATA[
    private void updateExpenditureAccountForSDL()
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccountLedgerDimensionView mainAccountLedgerDimensionView;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        TaxTrans taxTrans;
        GeneralJournalAccountEntry generalJournalAccountEntryInvoice;
        InventTransOrigin inventTransOrigin;
        InventTransPosting inventTransPosting;

        update_recordSet reportTableTmp
            setting AmountDebit = generalJournalAccountEntryInvoice.AccountingCurrencyAmount
                where reportTable.AmountCredit == 0
            join generalJournalAccountEntry
                where reportTableTmp.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                    && generalJournalAccountEntry.PostingType == LedgerPostingType::PurchConsump
            join generalJournalEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            join inventTransPosting
                where generalJournalEntry.SubledgerVoucher == inventTransPosting.Voucher
                    && generalJournalAccountEntry.LedgerDimension == inventTransPosting.OffsetLedgerDimension
                    && inventTransPosting.PostingTypeOffset == generalJournalAccountEntry.PostingType
                    && inventTransPosting.InventTransPostingType == InventTransPostingType::Financial
            join taxTransGeneralJournalAccountEntry
                where taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
            join taxTrans
                where taxTransGeneralJournalAccountEntry.TaxTrans == taxTrans.RecId
                    && taxTrans.SourceDocumentLine != 0
            join AccountingCurrencyAmount from generalJournalAccountEntryInvoice
                where generalJournalEntry.RecId == generalJournalAccountEntryInvoice.GeneralJournalEntry
                    && generalJournalAccountEntryInvoice.LedgerDimension == inventTransPosting.LedgerDimension
                    && generalJournalAccountEntryInvoice.PostingType == inventTransPosting.PostingType
            exists join inventTransOrigin
                where inventTransOrigin.InventTransId == taxTrans.InventTransId
                    && inventTransOrigin.RecId == inventTransPosting.InventTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTotals</Name>
				<Source><![CDATA[
    private void processTotals()
    {
        TaxSpecPerLedgerTransTmp ledgerTemp;
        TaxSpecPerLedgerTransTmp taxTemp;

        ledgerTemp.setConnection(userConnection);
        taxTemp.setConnection(userConnection);

        if (!contract.parmTotalOnly())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        //
        // Values with record number not equal to have values repeated because of one ot many joins.
        // They should be set to zero while calculating totals.
        //
        update_recordSet reportTableTmp
        setting AmountCredit = 0, AmountDebit = 0
            where reportTableTmp.RecordNumber != 1;

        if (contract.parmGroupDataBy() == TaxSpecPerLedgerTransGroupBy::LedgerAccount)
        {
            if (contract.parmSubtotalByTaxCode())
            {
                if (contract.parmMainAccountOnly())
                {
                    insert_recordset reportTable (MainAccount, Name, MainAccountRecId, TaxCode, AmountDebit, AmountCredit, TaxPayable, TaxReceivable, TaxBaseAmount)
                    select MainAccount, Name, MainAccountRecId, TaxCode, sum(AmountDebit), sum(AmountCredit), sum(TaxPayable), sum(TaxReceivable), sum(TaxBaseAmount) from reportTableTmp
                        group by reportTableTmp.MainAccount, reportTableTmp.Name, reportTableTmp.MainAccountRecId, reportTableTmp.TaxCode;
                }
                else
                {
                    insert_recordset reportTable (FullyQualifiedAccount, Name, MainAccountRecId, TaxCode, AmountDebit, AmountCredit, TaxPayable, TaxReceivable, TaxBaseAmount)
                    select FullyQualifiedAccount, Name, MainAccountRecId, TaxCode, sum(AmountDebit), sum(AmountCredit), sum(TaxPayable), sum(TaxReceivable), sum(TaxBaseAmount) from reportTableTmp
                        group by reportTableTmp.FullyQualifiedAccount, reportTableTmp.Name, reportTableTmp.MainAccountRecId, reportTableTmp.TaxCode;
                }
            }
            else
            {
                if (contract.parmMainAccountOnly())
                {
                    insert_recordset reportTable (MainAccount, Name, MainAccountRecId, AmountDebit, AmountCredit, TaxPayable, TaxReceivable, TaxBaseAmount)
                    select MainAccount, Name, MainAccountRecId, sum(AmountDebit), sum(AmountCredit), sum(TaxPayable), sum(TaxReceivable), sum(TaxBaseAmount) from reportTableTmp
                        group by reportTableTmp.MainAccount, reportTableTmp.Name, reportTableTmp.MainAccountRecId;
                }
                else
                {
                    insert_recordset reportTable (FullyQualifiedAccount, Name, MainAccountRecId, AmountDebit, AmountCredit, TaxPayable, TaxReceivable, TaxBaseAmount)
                    select FullyQualifiedAccount, Name, MainAccountRecId, sum(AmountDebit), sum(AmountCredit), sum(TaxPayable), sum(TaxReceivable), sum(TaxBaseAmount) from reportTableTmp
                        group by reportTableTmp.FullyQualifiedAccount, reportTableTmp.Name, reportTableTmp.MainAccountRecId;
                }
            }
        }
        else
        {
            insert_recordset taxTemp (TaxCode, TaxReceivable, TaxPayable)
            select TaxCode, sum(TaxReceivable), sum(TaxPayable) from reportTableTmp
                group by reportTableTmp.TaxCode;

            if (contract.parmMainAccountOnly())
            {
                insert_recordset ledgerTemp (TaxCode, MainAccount, MainAccountRecId, AmountDebit, AmountCredit, TaxBaseAmount)
                select TaxCode, MainAccount, MainAccountRecId, sum(AmountDebit), sum(AmountCredit), sum(TaxBaseAmount) from reportTableTmp
                    group by reportTableTmp.TaxCode, reportTableTmp.MainAccount, reportTableTmp.MainAccountRecId;
            }
            else
            {
                insert_recordset ledgerTemp (TaxCode, FullyQualifiedAccount, AmountDebit, AmountCredit, TaxBaseAmount)
                select TaxCode, FullyQualifiedAccount, sum(AmountDebit), sum(AmountCredit), sum(TaxBaseAmount) from reportTableTmp
                    group by reportTableTmp.TaxCode, reportTableTmp.FullyQualifiedAccount;
            }

            insert_recordset reportTable (FullyQualifiedAccount, MainAccount, Name, MainAccountRecId,  AmountDebit, AmountCredit, TaxBaseAmount, TaxCode, TaxPayable, TaxReceivable)
            select FullyQualifiedAccount, MainAccount, Name, MainAccountRecId, AmountDebit, AmountCredit, TaxBaseAmount from ledgerTemp
            join TaxCode, TaxPayable, TaxReceivable from taxTemp
                where ledgerTemp.TaxCode == taxTemp.TaxCode;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>