<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanySynchronizeCloseLineDeliveryRemainderFromSalesToPurchaseSingleton</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InterCompanySynchronizeCloseLineDeliveryRemainderFromSalesToPurchaseSingleton</c> class is responsible for adjusting sign of qty adjustment
/// for catch weight item in intercompany delivery remainder qty synchronization from intercompany sales order to intercompany purchase order.
/// </summary>
internal final class InterCompanySynchronizeCloseLineDeliveryRemainderFromSalesToPurchaseSingleton implements System.IDisposable
{
    private static InterCompanySynchronizeCloseLineDeliveryRemainderFromSalesToPurchaseSingleton singleton;
    private CreatedTransactionId ttsid;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes current transaction ID.
    /// </summary>
    /// <returns>An instance of <c>InterCompanySynchronizeCloseLineDeliveryRemainderFromSalesToPurchaseSingleton</c> object.</returns>
    [Hookable(false)]
    internal InterCompanySynchronizeCloseLineDeliveryRemainderFromSalesToPurchaseSingleton init()
    {
        ttsid = InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().ttsId();

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCurrent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the singleton instance <c>InterCompanySynchronizeCloseLineDeliveryRemainderFromSalesToPurchaseSingleton</c> is in the current scope.
    /// </summary>
    /// <returns>
    /// true if the instance <c>InterCompanySynchronizeCloseLineDeliveryRemainderFromSalesToPurchaseSingleton</c> is in the current scope; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean isCurrent()
    {
        return ttsid && InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().ttsId() == ttsid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCalcSignOnInventQtyAdjustmentInDepreciateTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the sign on adjusted inventory quantity for the movement on updating depreciate transactions.
    /// </summary>
    /// <Remarks>
    /// Reduce value of inventory quantity from remain physical qty on the intercompany purchase line because current process is updating depreciate transactions
    /// Use negative sign on adjusting inventory quantity
    /// 1. adjustmentQuantity is more than zero, that means much more qty will be deleted than original expected deleted qty,
    /// so need to descrease this adjustmentQuantity from delivery remainder qty of intercompany purchase line.
    /// 2. adjustmentQuantity is less than zero, that means less more qty will be deleted than original expected delete qty,
    /// so need to increase this adjustmentQuantity from delivery remainder qty of intercompany purchase line.
    /// </Remarks>
    /// <param name="_movement">
    /// The current instance of <c>InventMovement</c>.
    /// </param>
    /// <returns>
    /// An integer value to represent whether need to change the sign of qty value or not. Return -1 to change the qty sign when current inventory adjustment qty is coming from 
    /// intercompany purchase line to synchronize delivery remainder qty from closed intercompany sales line; Otherwise, return 1 to keep the original sign of adjustment qty.
    /// </returns>
    [Hookable(false)]
    internal Integer pdsCalcSignOnInventQtyAdjustmentInDepreciateTrans(InventMovement _movement)
    {
        if (_movement && this.isCurrent() && _movement is InventMov_Purch && _movement.interCompanyTransaction())
        {
            return -1;
        }

        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a singleton instance of <c>InterCompanySynchronizeCloseLineDeliveryRemainderFromSalesToPurchaseSingleton</c> .
    /// </summary>
    /// <returns>
    /// A singleton <c>InterCompanySynchronizeCloseLineDeliveryRemainderFromSalesToPurchaseSingleton</c> instance.
    /// </returns>
    [Hookable(false)]
    internal static InterCompanySynchronizeCloseLineDeliveryRemainderFromSalesToPurchaseSingleton instance()
    {
        if (!singleton)
        {
            singleton = new InterCompanySynchronizeCloseLineDeliveryRemainderFromSalesToPurchaseSingleton();
        }

        return singleton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disposes the current <c>InterCompanySynchronizeCloseLineDeliveryRemainderFromSalesToPurchaseSingleton</c> instance.
    /// This method has no release action to do as it is used to implement the method Dispose from the interface System.IDisposable.   
    /// </summary>
    public void Dispose()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>