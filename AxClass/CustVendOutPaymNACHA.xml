<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendOutPaymNACHA</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendOutPaymNACHA</c> class contains common logic for NACHA payments.
/// </summary>
public class CustVendOutPaymNACHA
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFillerRecordsToBlockTheFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create filler lines to block the file.
    /// </summary>
    /// <param name = "_file">
    /// The file that will have the additional filler records written to make the file blocked.
    /// </param>
    /// <param name = "_bankAccountTable">
    /// The company bank account that will pay or receive the payment.
    /// </param>
    /// <param name = "_recCount">
    /// The number of records in the file.
    /// </param>
    /// <returns>
    /// The number blocked lines written to the file.
    /// </returns>
    /// <remarks>
    /// The file must contain enough records to form a complete block. (10 records = 1 block = 940 characters)
    /// All records within the file are counted, including file header, batch header, entry detail, batch control, and file control.
    /// If the total number of records does not equal a complete block, "filler records" must be added to complete the block.  One filler
    /// record is 94 characters of 9.
    /// </remarks>
    public static int createFillerRecordsToBlockTheFile(StreamIo _file, BankAccountTable _bankAccountTable, Counter _recCount)
    {
        const int BlockFactor = 10;
        const int NACHARecLen = 94;
        const int NumberOfLinesInABlock = 10;
        const str FillCharacter = '9';

        int numberOfBlockLines;

        if (_bankAccountTable.IsNACHAFileBlocked)
        {
            str blockLine = strRep(FillCharacter, NACHARecLen);

            numberOfBlockLines = _recCount mod BlockFactor;
            if (numberOfBlockLines != 0)
            {
                numberOfBlockLines = NumberOfLinesInABlock - numberOfBlockLines;

                int i = numberOfBlockLines;
                while (i)
                {
                    _file.write(blockLine);
                    i--;
                }
            }
        }

        return numberOfBlockLines;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>