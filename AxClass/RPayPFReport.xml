<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReport extends RunBase
{
    DialogRunbase                           dialog;

    DialogGroup                             corrPeriodGroup;

    DialogField                             reportYearField,
                                            taxPeriod2010Field,
                                            taxPeriodField,
                                            taxPeriodFieldByQtr,
                                            corrReportYearField,
                                            corrTaxPeriod2010Field,
                                            corrTaxPeriodField,
                                            corrTaxPeriodFieldByQtr,
                                            reportTypeField;

    Yr                                      reportYear;
    RPayReportPensionPeriod2010             taxPeriod2010;
    RPayReportSocialTaxPeriod               taxPeriod;
    RPayPFReportPeriod                      taxPeriodByQtr;

    Yr                                      corrReportYear;
    RPayReportPensionPeriod2010             corrTaxPeriod2010;
    RPayReportSocialTaxPeriod               corrTaxPeriod;
    RPayPFReportPeriod                      corrTaxPeriodByQtr;

    RpayPensionFundExportKindOfCorrection   reportType;

    ReportPeriod_RU                         reportStartPeriod,
                                            reportEndPeriod,

                                            corrReportStartPeriod,
                                            corrReportEndPeriod,

                                            fundAmountStartPeriod,
                                            fundAmountEndPeriod,

                                            seniorityStartPeriod,
                                            seniorityEndPeriod;

    QueryRun                                queryRun;

    RHRMEmplTable                           parmEmplTable;

    CompanyInfo                             companyInfo;
    RpayTaxParameters                       payTaxParameters;
    RPayRateTable                           disabilityRateTable;

    Set                                     selectedEmplSet,
                                            checkedEmplSet,
                                            printedEmplSet;

    // Структуры данных для отчетности
    Map                         workersMonthsMap,           // Сотрудник с категорией НР   -> [Месяцы отчетного периода]
                                disPersMonthsMap,           // Сотрудник с категорией ОЗОИ -> [Месяцы отчетного периода]

                                workersFundAmountsMap,      // Сотрудник с категорией НР   -> [Страховая часть, Накопительная часть, Доп. взносы]
                                disPersFundAmountsMap,      // Сотрудник с категорией ОЗОИ -> [Страховая часть, Накопительная часть, Доп. взносы]
                                workersFundAmountsLastMap,  // Сотрудник с категорией НР   -> [Страховая часть, Накопительная часть, Доп. взносы] за последние 3/6 месяцев отчетного периода
                                disPersFundAmountsLastMap,  // Сотрудник с категорией ОЗОИ -> [Страховая часть, Накопительная часть, Доп. взносы] за последние 3/6 месяцев отчетного периода

                                workersSpecSenMap,          // Сотрудник с категорией НР   -> [[Дата начала, Дата окончания, Тип стажа], ...] - специальные виды стажа
                                disPersSpecSenMap,          // Сотрудник с категорией ОЗОИ -> [[Дата начала, Дата окончания, Тип стажа], ...] - специальные виды стажа
                                workersComSenMap,           // Сотрудник с категорией НР   -> [[Дата начала, Дата окончания, Тип стажа], ...] - общие виды стажа
                                disPersComSenMap,           // Сотрудник с категорией ОЗОИ -> [[Дата начала, Дата окончания, Тип стажа], ...] - общие виды стажа

                                catSenTotalsMap,            // Итоги: [Категория, Тип стажа (общий, дополнительный)] -> [Кол-во сотрудников, Сумма страховых взносов, Страховая часть, Накопительная часть, Доп. взносы]
                                categoryTotalsMap;          // Итоги: Категория -> [Кол-во сотрудников, Сумма страховых взносов, Страховая часть, Накопительная часть, Доп. взносы]

    int                         totalEmplQty;               // Итоги: Общее количество сотрудников для вывода

    RHolderData_ComplexContainer holderData;

    //data keys for 2011 reports
    RPayCounterUnit                 keyFund;
    RPayGroup                       keyGroup;
    RHRMEmplId                      keyEmplId;
    //int                             keyCategory; //НР == 0, ОЗОИ == 1
    str                             keyCategory;
    ReportPeriod_RU                 keyPeriod;
    RPayPFReportParmContract        parmContract;

    #RPayPFReport


    #define.CurrentVersion(3)

    #localmacro.CurrentList
        reportType,
        reportYear,
        taxPeriod2010,
        taxPeriod,
        corrReportYear,
        corrTaxPeriod2010,
        corrTaxPeriod,
        taxPeriodByQtr,
        corrTaxPeriodByQtr
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTotals</Name>
				<Source><![CDATA[
    private void calcTotals()
    {
        Map             wrkFundAmountsMap   = (this.fullTotals() ? workersFundAmountsMap : workersFundAmountsLastMap),
                        disFundAmountsMap   = (this.fullTotals() ? disPersFundAmountsMap : disPersFundAmountsLastMap);

        RHRMEmplTable   emplTableLocal;
        RHRMEmplTable   emplTableMainLocal;
        Set             processedEmplSet    = new Set(Types::String);

        int             wrkQty,
                        disQty,

                        wrkSpecQty,
                        wrkComQty,

                        disSpecQty,
                        disComQty;

        RPayAmount      fundInsuranceAmount,
                        fundStorageAmount,
                        fundAddAmount,

                        wrkFundInsuranceAmount,
                        wrkFundStorageAmount,
                        wrkFundAddAmount,

                        disFundInsuranceAmount,
                        disFundStorageAmount,
                        disFundAddAmount,

                        wrkSpecFundInsuranceAmount,
                        wrkSpecFundStorageAmount,
                        wrkSpecFundAddAmount,

                        wrkComFundInsuranceAmount,
                        wrkComFundStorageAmount,
                        wrkComFundAddAmount,

                        disSpecFundInsuranceAmount,
                        disSpecFundStorageAmount,
                        disSpecFundAddAmount,

                        disComFundInsuranceAmount,
                        disComFundStorageAmount,
                        disComFundAddAmount;

        this.progressInit("@GLS104974", SysQuery::countTotal(queryRun), #AviFormLetter);
        progress.updateInterval(0);

        catSenTotalsMap     = new Map(Types::Container, Types::Container);
        categoryTotalsMap   = new Map(Types::String, Types::Container);
        totalEmplQty        = 0;

        queryRun.reset();
        while (queryRun.next())
        {
            emplTableLocal = queryRun.get(tablenum(RHRMEmplTable));

            progress.setText(strFmt("@RUP3038", emplTableLocal.EmployeeId, emplTableLocal.Name()));

            if (! processedEmplSet.in(emplTableLocal.PayMainEmplId))
            {
                emplTableMainLocal = emplTableLocal.emplTableMain();

                if (this.checkEmpl(emplTableMainLocal, false))
                {
                    totalEmplQty++;
                }

                    if (workersFundAmountsMap.exists(emplTableMainLocal.PayMainEmplId))
                    {
                        wrkQty++;

                        if (wrkFundAmountsMap.exists(emplTableMainLocal.PayMainEmplId))
                        {
                            [fundInsuranceAmount, fundStorageAmount, fundAddAmount] = wrkFundAmountsMap.lookup(emplTableMainLocal.PayMainEmplId);
                            wrkFundInsuranceAmount  += fundInsuranceAmount;
                            wrkFundStorageAmount    += fundStorageAmount;
                            wrkFundAddAmount        += fundAddAmount;

                            if (workersSpecSenMap.exists(emplTableMainLocal.PayMainEmplId))
                            {
                                wrkSpecQty++;
                                wrkSpecFundInsuranceAmount  += fundInsuranceAmount;
                                wrkSpecFundStorageAmount    += fundStorageAmount;
                                wrkSpecFundAddAmount        += fundAddAmount;
                            }
                            else if (workersComSenMap.exists(emplTableMainLocal.PayMainEmplId))
                            {
                                wrkComQty++;
                                wrkComFundInsuranceAmount  += fundInsuranceAmount;
                                wrkComFundStorageAmount    += fundStorageAmount;
                                wrkComFundAddAmount        += fundAddAmount;
                            }
                        }
                    }

                    if (disPersFundAmountsMap.exists(emplTableMainLocal.PayMainEmplId))
                    {
                        disQty++;

                        if (disFundAmountsMap.exists(emplTableMainLocal.PayMainEmplId))
                        {
                            [fundInsuranceAmount, fundStorageAmount, fundAddAmount] = disFundAmountsMap.lookup(emplTableMainLocal.PayMainEmplId);
                            disFundInsuranceAmount  += fundInsuranceAmount;
                            disFundStorageAmount    += fundStorageAmount;
                            disFundAddAmount        += fundAddAmount;

                            if (disPersSpecSenMap.exists(emplTableMainLocal.PayMainEmplId))
                            {
                                disSpecQty++;
                                disSpecFundInsuranceAmount  += fundInsuranceAmount;
                                disSpecFundStorageAmount    += fundStorageAmount;
                                disSpecFundAddAmount        += fundAddAmount;
                            }
                            else if (disPersComSenMap.exists(emplTableMainLocal.PayMainEmplId))
                            {
                                disComQty++;
                                disComFundInsuranceAmount  += fundInsuranceAmount;
                                disComFundStorageAmount    += fundStorageAmount;
                                disComFundAddAmount        += fundAddAmount;
                            }
                        }
                    }

                processedEmplSet.add(emplTableLocal.PayMainEmplId);
            }

            progress.incCount();
        }

        catSenTotalsMap.insert([#InsuredPersonCatEmployee, RPayPFSeniorityType::Common],  [wrkComQty, wrkComFundInsuranceAmount, wrkComFundStorageAmount, wrkComFundAddAmount]);
        catSenTotalsMap.insert([#InsuredPersonCatEmployee, RPayPFSeniorityType::Special], [wrkSpecQty, wrkSpecFundInsuranceAmount, wrkSpecFundStorageAmount, wrkSpecFundAddAmount]);
        catSenTotalsMap.insert([this.insPersonCatDisabled(reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear), RPayPFSeniorityType::Common],
                               [disComQty, disComFundInsuranceAmount, disComFundStorageAmount, disComFundAddAmount]);
        catSenTotalsMap.insert([this.insPersonCatDisabled(reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear),
                               RPayPFSeniorityType::Special], [disSpecQty, disSpecFundInsuranceAmount, disSpecFundStorageAmount, disSpecFundAddAmount]);

        categoryTotalsMap.insert(#InsuredPersonCatEmployee, [wrkQty, wrkFundInsuranceAmount, wrkFundStorageAmount, wrkFundAddAmount]);
        categoryTotalsMap.insert(this.insPersonCatDisabled(reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear),
                                 [disQty, disFundInsuranceAmount, disFundStorageAmount, disFundAddAmount]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCompanyInfo</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkCompanyInfo(boolean _displayMessage = true)
    {
        boolean     ret = true;

        void checkField(FieldId _fieldId)
        {
            if (! companyInfo.(_fieldId))
            {
                ret = _displayMessage ? checkFailed(strFmt("@RUP3039", fieldId2PName(tablenum(CompanyInfo), _fieldId))) : false;
            }
        }

        checkField(fieldnum(CompanyInfo, Name));
        checkField(fieldnum(CompanyInfo, RFullName));
        checkField(fieldnum(CompanyInfo, OrganizationLegalForm_RU));

        if (!CompanyInfoHelper::partyINN_RU(CompanyInfo::find()))
        {
            ret = _displayMessage ? checkFailed(strFmt("@RUP3039", "@GLS101001")) : false;
        }

        if (!CompanyInfoHelper::partyKPP_RU(CompanyInfo::find()))
        {
            ret = _displayMessage ? checkFailed(strFmt("@RUP3039", "@GLS103115")) : false;
        }

        checkField(fieldnum(CompanyInfo, PFRegNum_RU));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmpl</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkEmpl(RHRMEmplTable   _emplTable,
                                boolean         _displayMessage = true,
                                str 20          _personCategory = '',
                                str 20          _formType       = '')
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmplDoesNotHaveSpecSen</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkEmplDoesNotHaveSpecSen(RHRMEmplTable _emplTable,
                                                  boolean       _displayMessage = true,
                                                  str 20        _personCategory = '')
    {
        boolean ret           = true;
        boolean specSenExists = false;
        str     message;

        switch (_personCategory)
        {
            case this.insPersonCatDisabled(reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear) :
                specSenExists = disPersSpecSenMap.exists(_emplTable.PayMainEmplId);
                break;

            case '' :
                specSenExists = (workersSpecSenMap.exists(_emplTable.PayMainEmplId) || disPersSpecSenMap.exists(_emplTable.PayMainEmplId));
                break;

            default :
                specSenExists = workersSpecSenMap.exists(_emplTable.PayMainEmplId);
        }

        if (specSenExists)
        {
            message = "@RUP3040" +
                      (_personCategory ? (' ' + strFmt("@RUP3041", _personCategory)) : "@SYS35672");

            ret = _displayMessage ? checkFailed(strFmt(message, _emplTable.EmployeeId, _emplTable.Name())) : false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmplHasFundAmounts</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkEmplHasFundAmounts(RHRMEmplTable _emplTable,
                                              boolean       _displayMessage = true)
    {
        boolean         ret = true;

        RPayAmount      fundInsuranceAmountWrk,
                        fundStorageAmountWrk,
                        fundAddAmountWrk,
                        fundInsuranceAmountDis,
                        fundStorageAmountDis,
                        fundAddAmountDis;

        if (workersFundAmountsMap.exists(_emplTable.PayMainEmplId))
        {
            [fundInsuranceAmountWrk, fundStorageAmountWrk, fundAddAmountWrk] = workersFundAmountsMap.lookup(_emplTable.PayMainEmplId);
        }

        if (disPersFundAmountsMap.exists(_emplTable.PayMainEmplId))
        {
            [fundInsuranceAmountDis, fundStorageAmountDis, fundAddAmountDis] = disPersFundAmountsMap.lookup(_emplTable.PayMainEmplId);
        }

        if (! fundInsuranceAmountWrk && ! fundStorageAmountWrk && ! fundAddAmountWrk &&
            ! fundInsuranceAmountDis && ! fundStorageAmountDis && ! fundAddAmountDis)
        {
            ret = _displayMessage ? checkFailed(strFmt("@RUP3017", _emplTable.EmployeeId, _emplTable.Name())) : false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmplHasSpecSen</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkEmplHasSpecSen(RHRMEmplTable _emplTable,
                                          boolean       _displayMessage = true,
                                          str 20        _personCategory = '')
    {
        boolean ret           = true;
        boolean specSenExists = false;
        str     message;

        switch (_personCategory)
        {
            case this.insPersonCatDisabled(reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear) :
                specSenExists = disPersSpecSenMap.exists(_emplTable.PayMainEmplId);
                break;

            case '' :
                specSenExists = (workersSpecSenMap.exists(_emplTable.PayMainEmplId) || disPersSpecSenMap.exists(_emplTable.PayMainEmplId));
                break;

            default :
                specSenExists = workersSpecSenMap.exists(_emplTable.PayMainEmplId);
        }

        if (! specSenExists)
        {
            message = "@RUP3043" +
                      (_personCategory ? ' ' + strFmt("@RUP3041", _personCategory) : "@SYS35672");

            ret = _displayMessage ? checkFailed(strFmt(message, _emplTable.EmployeeId, _emplTable.Name())) : false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmplIsInsured</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkEmplIsInsured(RHRMEmplTable  _emplTable,
                                         boolean        _displayMessage = true,
                                         str 20         _personCategory = '')
    {
        boolean             ret              = false;
        RPayRateTable       emplRefRateTable = RPayRateTable::find(RPayCounterTable::find(payTaxParameters.PensionFundInsurance).PayRateEmpl);
        ReportPeriod_RU     checkStartPeriod = (reportType == RpayPensionFundExportKindOfCorrection::None ? reportStartPeriod : corrReportStartPeriod),
                            checkEndPeriod   = (reportType == RpayPensionFundExportKindOfCorrection::None ? reportEndPeriod   : corrReportEndPeriod),
                            curPeriod;

        if (emplRefRateTable)
        {
            ret = (emplRefRateTable.getValue(RPayRateCallContext::construct(endMth(checkStartPeriod), _emplTable.PayMainEmplId)) > 0);

            for (curPeriod = endMth(checkStartPeriod); curPeriod <= checkEndPeriod; curPeriod = endMth(nextMth(curPeriod)))
            {
                if (emplRefRateTable.getValue(RPayRateCallContext::construct(curPeriod, _emplTable.PayMainEmplId)) > 0)
                {
                    ret = true;
                    break;
                }
            }
        }

        if (! ret && _displayMessage)
        {
            warning(strFmt("@RUP3044", _emplTable.EmployeeId, _emplTable.Name()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmplIsInsuredMth</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkEmplIsInsuredMth(RHRMEmplTable  _emplTable,
                                            TransDate       _period,
                                            boolean         _displayMessage = true)
    {
        boolean             ret              = false;
        RPayRateTable       emplRefRateTable = RPayRateTable::find(RPayCounterTable::find(payTaxParameters.PensionFundInsurance).PayRateEmpl);

        if (emplRefRateTable)
        {
            ret = emplRefRateTable.getValue(RPayRateCallContext::construct(endMth(_period), _emplTable.PayMainEmplId)) > 0;
        }

        if (! ret && _displayMessage)
        {
            warning(strFmt("@RUP3044", _emplTable.EmployeeId, _emplTable.Name()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmployeesData</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int checkEmployeesData(boolean     _displayMessage = true,
                                     str 20      _personCategory = '',
                                     str 20      _formType       = '')
    {
        RHRMEmplTable       emplTableLocal;
        RHRMEmplTable       emplTableMainLocal;
        Set                 checkedMainEmplSetLocal = new Set(Types::String);
        int                 checkPassedQty;

        queryRun.reset();
        while (queryRun.next())
        {
            emplTableLocal = queryRun.get(tablenum(RHRMEmplTable));
            selectedEmplSet.add(emplTableLocal.EmployeeId);

            if (! checkedMainEmplSetLocal.in(emplTableLocal.PayMainEmplId))
            {
                emplTableMainLocal = emplTableLocal.emplTableMain();

                if (this.checkEmpl(emplTableMainLocal, _displayMessage, _personCategory, _formType))
                {
                    checkedEmplSet.add(emplTableMainLocal.EmployeeId);
                    checkPassedQty++;
                }

                checkedMainEmplSetLocal.add(emplTableLocal.PayMainEmplId);
            }
        }

        this.calcTotals();

        return checkPassedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmplPersonalInfo</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkEmplPersonalInfo(RHRMEmplTable   _emplTable,
                                            boolean         _displayMessage,
                                            boolean         _checkRegFactAddress,
                                            boolean         _checkInfoAddress)
    {
        boolean                 ret             = true;
        RHRMPersonTable         rhrmPersonTable = _emplTable.personTable();
        HcmWorker               hcmWorker       = rhrmPersonTable.hcmWorker();
        LogisticsPostalAddress  logisticsPostalAddress,
                                logisticsPostalAddressFact,
                                logisticsPostalAddressPensionFund;

        if (_checkRegFactAddress)
        {
            logisticsPostalAddress = DirParty::primaryPostalAddress(hcmWorker.Person);
            logisticsPostalAddressFact = rhrmPersonTable.getPostalAddressByRole(LogisticsLocationRoleType::RealAddress_RU);

            if (logisticsPostalAddress.LogisticsPostalAddressMap::isEmptyAdress() &&
                logisticsPostalAddressFact.LogisticsPostalAddressMap::isEmptyAdress())
            {
                ret = _displayMessage ? checkFailed(strFmt("@RUP3093", _emplTable.EmployeeId, _emplTable.Name())) : false;
            }
        }

        if (_checkInfoAddress)
        {
            logisticsPostalAddressPensionFund = LogisticsPostalAddress::findByLocation(rhrmPersonTable.PensionFundLocation);

            if (logisticsPostalAddressPensionFund.LogisticsPostalAddressMap::isEmptyAdress())
            {
                ret = _displayMessage ? checkFailed(strFmt("@RUP3094", _emplTable.EmployeeId, _emplTable.Name())) : false;
            }
        }

        if (rhrmPersonTable.Gender == RHRMGender::None)
        {
            ret = _displayMessage ? checkFailed(strFmt("@RUP3047", _emplTable.EmployeeId, _emplTable.Name())) : false;
        }

        if (! rhrmPersonTable.dirPersonName().FirstName)
        {
            ret = _displayMessage ? checkFailed(strFmt("@RUP3048", _emplTable.EmployeeId, _emplTable.Name())) : false;
        }

        if (! rhrmPersonTable.dirPersonName().LastName)
        {
            ret = _displayMessage ? checkFailed(strFmt("@RUP3049", _emplTable.EmployeeId, _emplTable.Name())) : false;
        }

        if (! rhrmPersonTable.hcmPersonPrivateDetails().BirthDate)
        {
            ret = _displayMessage ? checkFailed(strFmt("@RUP3050", _emplTable.EmployeeId, _emplTable.Name())) : false;
        }

        if (! rhrmPersonTable.identityCardSeriesAndNumber() || ! rhrmPersonTable.IdentityCard)
        {
            ret = _displayMessage ? checkFailed(strFmt("@RUP3051", _emplTable.EmployeeId, _emplTable.Name())) : false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEmplPFNumber</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkEmplPFNumber(RHRMEmplTable  _emplTable,
                                        boolean        _displayMessage)
    {
        boolean ret = true;

        if (! _emplTable.payPFRINN())
        {
            ret = _displayMessage ? checkFailed(strFmt("@RUP3052", _emplTable.EmployeeId, _emplTable.Name())) : false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMainInsuredPersonCat</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkMainInsuredPersonCat(RHRMEmplTable   _emplTable,
                                                boolean         _displayMessage = true)
    {
        boolean         ret = true;
        RHRMPersonTable rhrmPersonTable = _emplTable.personTable();

        if (rhrmPersonTable.PensionInsureCategory == RPayPensionInsureCategory::None)
        {
            ret = _displayMessage ? checkFailed(strFmt("@RUP3053", rhrmPersonTable.PensionInsureCategory, _emplTable.EmployeeId, _emplTable.Name())) : false;
        }
        else if (rhrmPersonTable.PensionInsureCategory == RPayPensionInsureCategory::Unemployed ||
                 rhrmPersonTable.PensionInsureCategory == RPayPensionInsureCategory::NaturalPerson)
        {
            ret = _displayMessage ? checkFailed(strFmt("@RUP3054", rhrmPersonTable.PensionInsureCategory, _emplTable.EmployeeId, _emplTable.Name())) : false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxParameters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkTaxParameters(boolean _displayMessage = true)
    {
        boolean     ret = true;

        void checkField(FieldId _fieldId)
        {
            if (! payTaxParameters.(_fieldId))
            {
                ret = _displayMessage ? checkFailed(strFmt("@RUP3064", fieldId2PName(tablenum(RPayTaxParameters), _fieldId))) : false;
            }
        }

        checkField(fieldnum(RPayTaxParameters, PensionFundInsurance));
        checkField(fieldnum(RPayTaxParameters, PensionFundStorage));

        if (payTaxParameters.PensionFundInsurance)
        {
            if (! RPayCounterTable::find(payTaxParameters.PensionFundInsurance).PayRateEmpl)
            {
                ret = _displayMessage ? checkFailed(strFmt("@RUP3065", fieldPName(RPayCounterTable, PayRateEmpl), payTaxParameters.PensionFundInsurance)) : false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contractMthInfo</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container contractMthInfo(RHRMEmplTable _emplTableMain, TransDate _periodMth)
    {
        RPayHistory             payHistoryReceive, payHistoryDismiss, payHistoryCheck;
        RPayCivilContract       civilContract;
        RHRMEmplTable           emplTableCheck, emplTableLocal;
        RPayCivilContractType   contractTypes;
        RHRMSortOfWork          sortOfWork = RHRMSortOfWork::CivilContract;
        Set                     status = new Set(Types::Container);
        SetEnumerator           se;

        boolean employed = false;

        while select EmployeeId, SortOfWork, PayMainEmplId from emplTableLocal
            where emplTableLocal.PayMainEmplId == _emplTableMain.PayMainEmplId
        {
            select firstonly payHistoryReceive
                order by StartDate desc
                where payHistoryReceive.OperationType == RHRMJournalType::Receive   &&
                      payHistoryReceive.StartDate     <= endMth(_periodMth)         &&
                      payHistoryReceive.Number        == emplTableLocal.EmployeeId;

            select firstonly StartDate from payHistoryDismiss
                order by StartDate desc
                where payHistoryDismiss.OperationType == RHRMJournalType::Dismiss   &&
                      payHistoryDismiss.StartDate     <= endMth(_periodMth)         &&
                      payHistoryDismiss.Number        == emplTableLocal.EmployeeId;

            sortOfWork = emplTableLocal.SortOfWork == RHRMSortOfWork::Direct ? emplTableLocal.SortOfWork : RHRMSortOfWork::CivilContract;

            if ((endmth(payHistoryDismiss.StartDate) != endMth(_periodMth)) && (payHistoryDismiss.StartDate > payHistoryReceive.StartDate || !payHistoryReceive))
            {
                status.add([true, sortOfWork]); //inverse first value to place on bottom of heap;
            }
            else  //employed
            {
                //check for the same period and other status

                select firstonly payHistoryCheck
                    order by StartDate desc
                    where payHistoryCheck.OperationType == RHRMJournalType::Receive    &&
                          payHistoryCheck.StartDate     <  payHistoryReceive.StartDate &&
                          payHistoryCheck.StartDate     >= dateStartMth(_periodMth)
                join SortOfWork from emplTableCheck
                where emplTableCheck.EmployeeId           == payHistoryCheck.Number     &&
                      emplTableCheck.EmployeeId           != emplTableLocal.EmployeeId  &&
                      emplTableCheck.PayMainEmplId        == emplTableLocal.PayMainEmplId;

                if (payHistoryCheck)
                {
                    sortOfWork = emplTableCheck.SortOfWork == RHRMSortOfWork::Direct ? emplTableCheck.SortOfWork : RHRMSortOfWork::CivilContract;
                }

                status.add([false, sortOfWork]); //inverse first value to place on top of heap;
            }

            select firstonly civilContract
                    where civilContract.EmplId            == emplTableLocal.EmployeeId      &&
                          civilContract.StartDate         <= _periodMth                     &&
                          (! civilContract.EndDate                                          ||
                           civilContract.EndDate          >= _periodMth)
            join TableId from contractTypes
                where contractTypes.CivilContractTypeCode  == civilContract.CivilContractTypeCode;

            if (civilContract)
            {
                status.add([false, RHRMSortOfWork::CivilContract]);
            }
        }

        if (status.empty())
        {
            return [RHRMSortOfWork::Direct, false];
        }
        else
        {
            se = status.getEnumerator();
            se.moveNext();

            [employed, sortOfWork] = se.current();
            return [sortOfWork, !employed];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected ReportPeriod_RU currentPeriod(Months _mthNo)
    {
        return reportType == RpayPensionFundExportKindOfCorrection::None ? endMth(mkDate(1, _mthNo, year(reportEndPeriod)))
                                                                         : endMth(mkDate(1, _mthNo, year(corrReportEndPeriod)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str 40 dataType()
    {
        switch (reportType)
        {
            case RpayPensionFundExportKindOfCorrection::None:
                return  #DataTypeSource;

            case RpayPensionFundExportKindOfCorrection::Correctional:
                return #DataTypeCorrecting;

            case RpayPensionFundExportKindOfCorrection::Cancellative:
                return #DataTypeCanceling;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        if (this.displayPeriodFields())
        {
            reportTypeField = new DialogField(dialog, enumStr(RPayPensionFundExportKindOfCorrection), #ReportTypeFieldNum);
            reportTypeField.init(dialog);
            reportTypeField.value(reportType);

            dialog.addGroup("@SYS40");
            reportYearField = new DialogField(dialog, extendedTypeStr(Yr), #ReportYearFieldNum);
            reportYearField.init(dialog);
            reportYearField.label("@SYS32606");
            reportYearField.value(reportYear);
            reportYearField.control().mandatory(true);

            taxPeriod2010Field  = dialog.addFieldValue(enumStr(RPayReportPensionPeriod2010), taxPeriod2010);

            switch (this.periodType())
            {
                case enumnum(RPayReportSocialTaxPeriod):
                    taxPeriodField      = dialog.addFieldValue(enumStr(RPayReportSocialTaxPeriod), taxPeriod);
                    break;
                case enumnum(RPayPFReportPeriod):
                    taxPeriodFieldByQtr = dialog.addFieldValue(enumStr(RPayPFReportPeriod), taxPeriodByQtr);
                    break;
            }

            corrPeriodGroup = dialog.addGroup("@GLS111794");
            corrReportYearField = new DialogField(dialog, extendedTypeStr(Yr), #CorrReportYearFieldNum);
            corrReportYearField.init(dialog);
            corrReportYearField.label("@SYS32606");
            corrReportYearField.value(corrReportYear);

            corrTaxPeriod2010Field  = dialog.addFieldValue(enumStr(RPayReportPensionPeriod2010), corrTaxPeriod2010);

            switch (this.periodType())
            {
                case enumnum(RPayReportSocialTaxPeriod):
                    corrTaxPeriodField = dialog.addFieldValue(enumStr(RPayReportSocialTaxPeriod), corrTaxPeriod);
                    break;
                case enumnum(RPayPFReportPeriod):
                    corrtaxPeriodFieldByQtr = dialog.addFieldValue(enumStr(RPayPFReportPeriod), corrTaxPeriodByQtr);
                    break;
            }

            this.setPeriodDialogFields(reportType, reportYear, corrReportYear);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        _dialog.formRun().controlMethodOverload(true);
        _dialog.formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPeriodFields</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean displayPeriodFields()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayResult</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void displayResult()
    {
        if (! (selectedEmplSet.elements() == 0 && printedEmplSet.elements() == 0) &&
            ! (selectedEmplSet.elements() == 1 && printedEmplSet.elements() == 1))
        {
            info(strFmt("@RUP3055", printedEmplSet.elements(), selectedEmplSet.elements()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>docQty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int docQty(str 100                _docType,
                         str 20                 _personCategory = '',
                         RPayPFSeniorityType    _seniorityType  = RPayPFSeniorityType::None)
    {
        int             ret;
        MapEnumerator   workersComMapEnum,
                        disPersComMapEnum,
                        workersSpecMapEnum,
                        disPersSpecMapEnum;

        int checkMapEnum(MapEnumerator _mapEnum)
        {
            RHRMEmplId      emplId;
            RHRMEmplTable   emplTableMainLocal;
            int             qtyLocal;

            if (_mapEnum)
            {
                _mapEnum.reset();

                while (_mapEnum.moveNext())
                {
                    emplId = _mapEnum.currentKey();
                    emplTableMainLocal = RHRMEmplTable::find(emplId);

                    if (this.checkEmpl(emplTableMainLocal, false, _personCategory, ''))
                    {
                        qtyLocal++;
                    }
                }
            }

            return qtyLocal;
        }

        switch (_seniorityType)
        {
            case RPayPFSeniorityType::Common :

                switch (_personCategory)
                {
                    case this.insPersonCatDisabled(reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear) :
                        disPersComMapEnum = disPersComSenMap.getEnumerator();
                        break;

                    case '' :
                        workersComMapEnum = workersComSenMap.getEnumerator();
                        disPersComMapEnum = disPersComSenMap.getEnumerator();
                        break;

                    default :
                        workersComMapEnum = workersComSenMap.getEnumerator();
                }
                break;

            case RPayPFSeniorityType::Special :
                switch (_personCategory)
                {
                    case this.insPersonCatDisabled(reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear) :
                        disPersSpecMapEnum = disPersSpecSenMap.getEnumerator();
                        break;

                    case '' :
                        workersSpecMapEnum = workersSpecSenMap.getEnumerator();
                        disPersSpecMapEnum = disPersSpecSenMap.getEnumerator();
                        break;

                    default :
                        workersSpecMapEnum = workersSpecSenMap.getEnumerator();
                }
                break;

            case RPayPFSeniorityType::None :
                switch (_personCategory)
                {
                    case this.insPersonCatDisabled(reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear) :
                        disPersComMapEnum  = disPersComSenMap.getEnumerator();
                        disPersSpecMapEnum = disPersSpecSenMap.getEnumerator();
                        break;

                    case '' :
                        workersComMapEnum  = workersComSenMap.getEnumerator();
                        disPersComMapEnum  = disPersComSenMap.getEnumerator();
                        workersSpecMapEnum = workersSpecSenMap.getEnumerator();
                        disPersSpecMapEnum = disPersSpecSenMap.getEnumerator();
                        break;

                    default :
                        workersComMapEnum  = workersComSenMap.getEnumerator();
                        workersSpecMapEnum = workersSpecSenMap.getEnumerator();
                }
                break;
        }

        ret = checkMapEnum(workersComMapEnum) +
              checkMapEnum(disPersComMapEnum) +
              checkMapEnum(workersSpecMapEnum) +
              checkMapEnum(disPersSpecMapEnum);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld10500_1_modified</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean fld10500_1_modified()
    {
        FormRealControl formControl;
        boolean         ret;

        formControl = dialog.formRun().controlCallingMethod();
        ret = formControl.modified();

        if (ret)
        {
            this.setPeriodDialogFields(reportTypeField.value(), reportYearField.value(), corrReportYearField.value());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld10500_1_validate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean fld10500_1_validate()
    {
        FormRealControl formControl;
        boolean         ret;

        formControl = dialog.formRun().controlCallingMethod();
        ret = formControl.validate();

        if (ret)
        {
            if (reportYearField.value() && (reportYearField.value() < this.minYearEnabled() || reportYearField.value() > this.maxYearEnabled()))
            {
                ret = checkFailed(strFmt("@RUP3056", this.minYearEnabled(), this.maxYearEnabled()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld10501_1_modified</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean fld10501_1_modified()
    {
        FormRealControl formControl;
        boolean         ret;

        formControl = dialog.formRun().controlCallingMethod();
        ret = formControl.modified();

        if (ret)
        {
            this.setPeriodDialogFields(reportTypeField.value(), reportYearField.value(), corrReportYearField.value());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld10501_1_validate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean fld10501_1_validate()
    {
        FormRealControl formControl;
        boolean         ret;

        formControl = dialog.formRun().controlCallingMethod();
        ret = formControl.validate();

        if (ret)
        {
            if (corrReportYearField.value() && (corrReportYearField.value() < this.minYearEnabled() || corrReportYearField.value() > this.maxYearEnabled()))
            {
                ret = checkFailed(strFmt("@RUP3058", this.minYearEnabled(), this.maxYearEnabled()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld10502_1_modified</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean fld10502_1_modified()
    {
        FormRealControl formControl;
        boolean         ret;

        formControl = dialog.formRun().controlCallingMethod();
        ret = formControl.modified();

        if (ret)
        {
            this.setPeriodDialogFields(reportTypeField.value(), reportYearField.value(), corrReportYearField.value());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld10502_1_validate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean fld10502_1_validate()
    {
        FormRealControl formControl;
        boolean         ret;
        RpayPensionFundExportKindOfCorrection   reportTypeLocal;

        formControl = dialog.formRun().controlCallingMethod();
        ret = formControl.validate();

        if (ret)
        {
            reportTypeLocal = reportTypeField.value();

            if (! this.needCorrectedPeriod() &&
                reportTypeLocal != RPayPensionFundExportKindOfCorrection::None)
            {
                ret = checkFailed(strFmt("@RUP3063", reportTypeLocal));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullTotals</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean fullTotals()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCatEmplFundAmounts</Name>
				<Source><![CDATA[
    private container getCatEmplFundAmounts(str 20      _personCategory,
                                            RHRMEmplId  _mainEmplId)
    {
        Map                 emplMap = (_personCategory == this.insPersonCatDisabled(reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear) ? disPersMonthsMap : workersMonthsMap);
        container           monthsCon;
        container           emplFundAmountsCon;

        container getEmplFundAmounts(RHRMEmplId _emplId, container _monthsCon)
        {
            container           fundInsuranceAmountCon,
                                fundStorageAmountCon,
                                fundAddAmountCon;

            RPayAmount          fundInsuranceAmountLocal,
                                fundStorageAmountLocal,
                                fundAddAmountLocal,
                                fundInsuranceAmountLastLocal,
                                fundStorageAmountLastLocal,
                                fundAddAmountLastLocal;
            boolean             fundTransExist      = false;

            if (_emplId && conlen(_monthsCon) > 0)
            {
                fundInsuranceAmountCon = this.getEmplFundAmount(_emplId, _monthsCon, payTaxParameters.PensionFundInsurance);
                if (conlen(fundInsuranceAmountCon) > 0)
                {
                    [fundInsuranceAmountLocal, fundInsuranceAmountLastLocal] = fundInsuranceAmountCon;
                    fundTransExist = true;
                }

                fundStorageAmountCon = this.getEmplFundAmount(_emplId, _monthsCon, payTaxParameters.PensionFundStorage);
                if (conlen(fundStorageAmountCon) > 0)
                {
                    [fundStorageAmountLocal, fundStorageAmountLastLocal] = fundStorageAmountCon;
                    fundTransExist = true;
                }

                fundAddAmountCon = this.getEmplFundAmount(_emplId, _monthsCon, payTaxParameters.PensionFundAdd);
                if (conlen(fundAddAmountCon) > 0)
                {
                    [fundAddAmountLocal, fundAddAmountLastLocal] = fundAddAmountCon;
                    fundTransExist = true;
                }
            }

            return fundTransExist ?
                   [fundInsuranceAmountLocal, fundStorageAmountLocal, fundAddAmountLocal,
                    fundInsuranceAmountLastLocal, fundStorageAmountLastLocal, fundAddAmountLastLocal] : conNull();
        }

        if (emplMap)
        {
            if (emplMap.exists(_mainEmplId))
            {
                monthsCon = emplMap.lookup(_mainEmplId);
                emplFundAmountsCon = getEmplFundAmounts(_mainEmplId, monthsCon);
            }
        }

        return emplFundAmountsCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmplCategories</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container getEmplCategories(RHRMEmplTable _emplTable)
    {
        container           monthCategoriesCon  = this.getEmplMonthCategories(_emplTable);
        int                 monthIdx;
        Set                 categoriesSet       = new Set(Types::String);
        SetEnumerator       categoriesSetEnum;
        container           categoriesCon;
        str 20              personCategory;

        for (monthIdx = 1; monthIdx <= conlen(monthCategoriesCon); monthIdx++)
        {
            categoriesSet.add(conpeek(monthCategoriesCon, monthIdx));
        }

        categoriesSetEnum = categoriesSet.getEnumerator();

        while (categoriesSetEnum.moveNext())
        {
            personCategory = categoriesSetEnum.current();
            categoriesCon = conpoke(categoriesCon, conlen(categoriesCon) + 1, personCategory);
        }

        return categoriesCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmplFundAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container getEmplFundAmount(
        RHRMEmplId      _mainEmplId,
        container       _monthsCon,
        RPayCounterUnit _fundCode)
    {
        int                 monthIdx;
        ReportPeriod_RU     curPeriod;
        RPayAmount          fundAmountLocal,
                            fundAmountTotalLocal,
                            fundAmountLastLocal;
        boolean             fundTransExist      = false, transExist;

        if (_mainEmplId && conlen(_monthsCon) > 0 && _fundCode)
        {
            for (monthIdx = 1; monthIdx <= conlen(_monthsCon); monthIdx++)
            {
                curPeriod                         = this.currentPeriod(conpeek(_monthsCon, monthIdx));
                [fundAmountLocal, fundAmountTotalLocal, transExist] = this.getEmplFundAmountMth(_mainEmplId, curPeriod, _fundCode);

                if (curPeriod >= fundAmountStartPeriod && curPeriod <= fundAmountEndPeriod)
                {
                    fundAmountLastLocal += fundAmountLocal;
                    fundTransExist = transExist || fundTransExist;
                }
            }
        }

        return fundTransExist ? [fundAmountLocal, fundAmountLastLocal] : conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmplFundAmountMth</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container getEmplFundAmountMth(
        RHRMEmplId      _mainEmplId,
        ReportPeriod_RU _curPeriod,
        RPayCounterUnit _fundCode)
    {
        RPayFundEmplSum     fundEmplSum;
        RHRMEmplTable       emplTableExist;

        if (reportType == RpayPensionFundExportKindOfCorrection::None)
        {
            select sum(FundAmount), sum(RPayFundTotalAmount), count(RecId) from fundEmplSum
                where fundEmplSum.RpayCounterUnit     == _fundCode
                   && fundEmplSum.CorrectedPeriod     == _curPeriod
                   && fundEmplSum.CorrectedPeriod     >= reportStartPeriod
                   && fundEmplSum.CorrectedPeriod     <= reportEndPeriod
                   && fundEmplSum.PayPeriod           >= reportStartPeriod
                   && fundEmplSum.PayPeriod           <= reportEndPeriod
            exists join emplTableExist
                where emplTableExist.EmployeeId       == fundEmplSum.EmplId
                   && emplTableExist.PayMainEmplId    == _mainEmplId;
        }
        else
        {
            select sum(FundAmount), sum(RPayFundTotalAmount), count(RecId) from fundEmplSum
                where fundEmplSum.RpayCounterUnit     == _fundCode
                   && fundEmplSum.CorrectedPeriod     == _curPeriod
                   && fundEmplSum.CorrectedPeriod     >= corrReportStartPeriod
                   && fundEmplSum.CorrectedPeriod     <= corrReportEndPeriod
                   && fundEmplSum.PayPeriod           >= corrReportStartPeriod
                   && fundEmplSum.PayPeriod           <= reportEndPeriod
            exists join emplTableExist
                where emplTableExist.EmployeeId    == fundEmplSum.EmplId
                   && emplTableExist.PayMainEmplId == _mainEmplId;
        }

        return [fundEmplSum.FundAmount, fundEmplSum.RpayFundTotalAmount, fundEmplSum.RecId != 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmplFundDedAmountMth</Name>
				<Source><![CDATA[
    //deduction amount exclude invalid deduction & deduction with discount
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container getEmplFundDedAmountMth(
        RHRMEmplId      _mainEmplId,
        ReportPeriod_RU _curPeriod,
        RPayCounterUnit _fundCode)
    {
        RPayFundEmplDeduction   fundEmplDed;
        RPayFundDeductionTable  fundDedTable;

        RHRMEmplTable       emplTableExist;

        if (reportType == RpayPensionFundExportKindOfCorrection::None)
        {
            select sum(DeductionAmount), count(RecID) from fundEmplDed
                where fundEmplDed.RpayFundDeductionCode != payTaxParameters.PensionFundinvalidDeduction
                   && fundEmplDed.RpayCounterUnit       == _fundCode
                   && fundEmplDed.CorrectedPeriod       == _curPeriod
                   && fundEmplDed.CorrectedPeriod       >= reportStartPeriod
                   && fundEmplDed.CorrectedPeriod       <= reportEndPeriod
                   && fundEmplDed.PayPeriod             >= reportStartPeriod
                   && fundEmplDed.PayPeriod             <= reportEndPeriod
            exists join emplTableExist
                where emplTableExist.EmployeeId    == fundEmplDed.EmplId
                   && emplTableExist.PayMainEmplId == _mainEmplId
            exists join fundDedTable
                where   fundDedTable.RpayFundDeductionCode == fundEmplDed.RpayFundDeductionCode
                        && !fundDedTable.RpayRateTaxValue;
        }
        else
        {
            select sum(DeductionAmount), count(RecID) from fundEmplDed
                where  fundEmplDed.RpayFundDeductionCode    != payTaxParameters.PensionFundinvalidDeduction
                    && fundEmplDed.RpayCounterUnit          == _fundCode
                    && fundEmplDed.CorrectedPeriod          == _curPeriod
                    && fundEmplDed.CorrectedPeriod          >= corrReportStartPeriod
                    && fundEmplDed.CorrectedPeriod          <= corrReportEndPeriod
                    && fundEmplDed.PayPeriod                >= corrReportStartPeriod
                    && fundEmplDed.PayPeriod                <= reportEndPeriod
            exists join emplTableExist
                where emplTableExist.EmployeeId    == fundEmplDed.EmplId
                   && emplTableExist.PayMainEmplId == _mainEmplId
            exists join fundDedTable
                where   fundDedTable.RpayFundDeductionCode == fundEmplDed.RpayFundDeductionCode
                        && !fundDedTable.RpayRateTaxValue;
        }

        return [fundEmplDed.DeductionAmount, fundEmplDed.RecId != 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmplFundInvalidDedAmountMth</Name>
				<Source><![CDATA[
    //deduction amount of invalid deduction
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container getEmplFundInvalidDedAmountMth(
        RHRMEmplId      _mainEmplId,
        ReportPeriod_RU _curPeriod,
        RPayCounterUnit _fundCode)
    {
        RPayFundEmplDeduction   fundEmplDed;
        RPayFundDeductionTable  fundDedTable;

        RHRMEmplTable       emplTableExist;

        if (reportType == RpayPensionFundExportKindOfCorrection::None)
        {
            select sum(DeductionAmount), count(RecID) from fundEmplDed
                where fundEmplDed.RpayFundDeductionCode == payTaxParameters.PensionFundinvalidDeduction
                   && fundEmplDed.RpayCounterUnit       == _fundCode
                   && fundEmplDed.CorrectedPeriod       == _curPeriod
                   && fundEmplDed.CorrectedPeriod       >= reportStartPeriod
                   && fundEmplDed.CorrectedPeriod       <= reportEndPeriod
                   && fundEmplDed.PayPeriod             >= reportStartPeriod
                   && fundEmplDed.PayPeriod             <= reportEndPeriod
            exists join emplTableExist
                where emplTableExist.EmployeeId    == fundEmplDed.EmplId
                   && emplTableExist.PayMainEmplId == _mainEmplId
            exists join fundDedTable
                where   fundDedTable.RpayFundDeductionCode == fundEmplDed.RpayFundDeductionCode
                        && !fundDedTable.RpayRateTaxValue;
        }
        else
        {
            select sum(DeductionAmount), count(RecID) from fundEmplDed
                where  fundEmplDed.RpayFundDeductionCode  == payTaxParameters.PensionFundinvalidDeduction
                    && fundEmplDed.RpayCounterUnit        == _fundCode
                    && fundEmplDed.CorrectedPeriod        == _curPeriod
                    && fundEmplDed.CorrectedPeriod        >= corrReportStartPeriod
                    && fundEmplDed.CorrectedPeriod        <= corrReportEndPeriod
                    && fundEmplDed.PayPeriod              >= corrReportStartPeriod
                    && fundEmplDed.PayPeriod              <= reportEndPeriod
            exists join emplTableExist
                where emplTableExist.EmployeeId     == fundEmplDed.EmplId
                    && emplTableExist.PayMainEmplId == _mainEmplId
            exists join fundDedTable
                where   fundDedTable.RpayFundDeductionCode == fundEmplDed.RpayFundDeductionCode
                        && !fundDedTable.RpayRateTaxValue;
        }

        return [fundEmplDed.DeductionAmount, fundEmplDed.RecId != 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmplMonthCategories</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container getEmplMonthCategories(RHRMEmplTable _emplTable)
    {
        container           monthCategoriesCon;
        int                 monthIdx;
        ReportPeriod_RU     curPeriod;
        RPayRateValue       rateValue;

        for (monthIdx = 1; monthIdx <= mthOfYr(reportEndPeriod); monthIdx++)
        {
            monthCategoriesCon = conpoke(monthCategoriesCon, monthIdx, #InsuredPersonCatEmployee);
        }

        if (disabilityRateTable)
        {
            for (monthIdx = 1; monthIdx <= mthOfYr(reportEndPeriod); monthIdx++)
            {
                curPeriod = endMth(mkDate(1, monthIdx, year(reportEndPeriod)));

                rateValue = disabilityRateTable.getValue(RPayRateCallContext::construct(curPeriod, _emplTable.PayMainEmplId));

                if (rateValue > 0)
                {
                    monthCategoriesCon = conpoke(monthCategoriesCon, monthIdx, this.insPersonCatDisabled(reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear));
                }
            }
        }

        return monthCategoriesCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean     ret = super();

        if (ret && this.displayPeriodFields())
        {
            reportType          = reportTypeField.value();

            reportYear          = reportYearField.value();
            taxPeriod2010       = taxPeriod2010Field.value();

            if (taxPeriodField)
            {
                taxPeriod       = taxPeriodField.value();
            }

            if (taxPeriodFieldByQtr)
            {
                taxPeriodByQtr  = taxPeriodFieldByQtr.value();
            }

            corrReportYear      = corrReportYearField.value();
            corrTaxPeriod2010   = corrTaxPeriod2010Field.value();

            if (corrTaxPeriodField)
            {
                corrTaxPeriod   = corrTaxPeriodField.value();
            }

            if (corrTaxPeriodFieldByQtr)
            {
                corrTaxPeriodByQtr = corrTaxPeriodFieldByQtr.value();
            }

            if (reportYear <= #ReportYear2010)
            {
                reportStartPeriod   = (taxPeriod2010 == RPayReportPensionPeriod2010::HalfYear ? mkDate(1, 1, reportYear)  : mkDate(1, 7, reportYear));
                reportEndPeriod     = (taxPeriod2010 == RPayReportPensionPeriod2010::HalfYear ? mkDate(30, 6, reportYear) : mkDate(31, 12, reportYear));

                fundAmountEndPeriod     = reportEndPeriod;
                fundAmountStartPeriod   = this.fullTotals() ? reportStartPeriod : endMth(dateMthFwd(fundAmountEndPeriod, -5));

                seniorityStartPeriod    = dateStartMth(dateMthFwd(reportEndPeriod, -5));
                seniorityEndPeriod      = reportEndPeriod;
            }
            else
            {
                if (taxPeriodField)
                {
                    switch (taxPeriod)
                    {
                        case RPayReportSocialTaxPeriod::Quarter :
                            reportStartPeriod   = mkDate(1, 1, reportYear);
                            break;
                        case RPayReportSocialTaxPeriod::HalfYear :
                            reportStartPeriod   = mkDate(1, 4, reportYear);
                            break;
                        case RPayReportSocialTaxPeriod::NineMonth :
                            reportStartPeriod   = mkDate(1, 7, reportYear);
                            break;
                        case RPayReportSocialTaxPeriod::Year :
                            reportStartPeriod   = mkDate(1, 10, reportYear);
                            break;
                    }

                    reportEndPeriod = dateEndQtr(reportStartPeriod);
                    fundAmountStartPeriod   = this.fullTotals() ? reportStartPeriod : endMth(dateMthFwd(fundAmountEndPeriod, -2));

                    seniorityStartPeriod    = dateStartMth(dateMthFwd(reportEndPeriod, -2));
                    seniorityEndPeriod      = reportEndPeriod;
                }

                if (taxPeriodFieldByQtr)
                {
                    switch (taxPeriodByQtr)
                    {
                        case RPayPFReportPeriod::Quarter1 :
                            reportStartPeriod = mkDate(1, 1, reportYear);
                            reportEndPeriod   = dateEndQtr(reportStartPeriod);
                            break;
                        case RPayPFReportPeriod::Quarter2 :
                            reportStartPeriod = mkDate(1, 4, reportYear);
                            reportEndPeriod   = dateEndQtr(reportStartPeriod);
                            break;
                        case RPayPFReportPeriod::Quarter3 :
                            reportStartPeriod = mkDate(1, 7, reportYear);
                            reportEndPeriod   = dateEndQtr(reportStartPeriod);
                            break;
                        case RPayPFReportPeriod::Quarter4 :
                            reportStartPeriod = mkDate(1, 10, reportYear);
                            reportEndPeriod   = dateEndQtr(reportStartPeriod);
                            break;
                        case RPayPFReportPeriod::Year :
                            reportStartPeriod   = mkDate(1, 1, reportYear);
                            reportEndPeriod     = dateEndYr(reportStartPeriod);
                            break;
                    }

                    if (taxPeriodByQtr == RPayPFReportPeriod::Year)
                    {
                        fundAmountEndPeriod     = reportEndPeriod;
                        fundAmountStartPeriod   = reportStartPeriod;
                        seniorityStartPeriod    = reportStartPeriod;
                        seniorityEndPeriod      = reportEndPeriod;
                    }
                    else
                    {
                        reportEndPeriod = dateEndQtr(reportStartPeriod);
                        fundAmountStartPeriod   = this.fullTotals() ? reportStartPeriod : endMth(dateMthFwd(fundAmountEndPeriod, -2));

                        seniorityStartPeriod    = dateStartMth(dateMthFwd(reportEndPeriod, -2));
                        seniorityEndPeriod      = reportEndPeriod;
                    }
                }
            }

            if (reportType != RpayPensionFundExportKindOfCorrection::None)
            {
                if (corrReportYear <= #ReportYear2010)
                {
                    corrReportStartPeriod   = (corrTaxPeriod2010 == RPayReportPensionPeriod2010::HalfYear ? mkDate(1, 1, corrReportYear)  : mkDate(1, 7, corrReportYear));
                    corrReportEndPeriod     = (corrTaxPeriod2010 == RPayReportPensionPeriod2010::HalfYear ? mkDate(30, 6, corrReportYear) : mkDate(31, 12, corrReportYear));

                    fundAmountEndPeriod     = corrReportEndPeriod;
                    fundAmountStartPeriod   = this.fullTotals() ? corrReportStartPeriod : endMth(dateMthFwd(fundAmountEndPeriod, -5));

                    seniorityStartPeriod    = dateStartMth(dateMthFwd(corrReportEndPeriod, -5));
                    seniorityEndPeriod      = corrReportEndPeriod;
                }
                else
                {
                    if (corrTaxPeriodField)
                    {
                        switch (corrTaxPeriod)
                        {
                            case RPayReportSocialTaxPeriod::Quarter :
                                corrReportStartPeriod   = mkDate(1, 1, corrReportYear);
                                break;
                            case RPayReportSocialTaxPeriod::HalfYear :
                                corrReportStartPeriod   = mkDate(1, 4, corrReportYear);
                                break;
                            case RPayReportSocialTaxPeriod::NineMonth :
                                corrReportStartPeriod   = mkDate(1, 7, corrReportYear);
                                break;
                            case RPayReportSocialTaxPeriod::Year :
                                corrReportStartPeriod   = mkDate(1, 10, corrReportYear);
                                break;
                        }

                        corrReportEndPeriod   = dateEndQtr(corrReportStartPeriod);
                        fundAmountStartPeriod = this.fullTotals() ? corrReportStartPeriod : endMth(dateMthFwd(fundAmountEndPeriod, -2));

                        seniorityStartPeriod    = dateStartMth(dateMthFwd(corrReportEndPeriod, -2));
                        seniorityEndPeriod      = reportEndPeriod;
                    }

                    if (corrtaxPeriodFieldByQtr)
                    {
                        switch (corrTaxPeriodByQtr)
                        {
                            case RPayPFReportPeriod::Quarter1 :
                                corrReportStartPeriod = mkDate(1, 1, corrReportYear);
                                corrReportEndPeriod   = dateEndQtr(corrReportStartPeriod);
                                break;
                            case RPayPFReportPeriod::Quarter2 :
                                corrReportStartPeriod = mkDate(1, 4, corrReportYear);
                                corrReportEndPeriod   = dateEndQtr(corrReportStartPeriod);
                                break;
                            case RPayPFReportPeriod::Quarter3 :
                                corrReportStartPeriod = mkDate(1, 7, corrReportYear);
                                corrReportEndPeriod   = dateEndQtr(corrReportStartPeriod);
                                break;
                            case RPayPFReportPeriod::Quarter4 :
                                corrReportStartPeriod = mkDate(1, 10, corrReportYear);
                                corrReportEndPeriod   = dateEndQtr(corrReportStartPeriod);
                                break;
                            case RPayPFReportPeriod::Year :
                                corrReportStartPeriod = mkDate(1, 1, corrReportYear);
                                corrReportEndPeriod   = dateEndYr(corrReportStartPeriod);
                                break;
                        }

                        if (corrTaxPeriodByQtr == RPayPFReportPeriod::Year)
                        {
                            fundAmountEndPeriod     = corrReportEndPeriod;
                            fundAmountStartPeriod   = corrReportStartPeriod;
                            seniorityStartPeriod    = corrReportStartPeriod;
                            seniorityEndPeriod      = corrReportEndPeriod;
                        }
                        else
                        {
                            corrReportEndPeriod     = dateEndQtr(corrReportStartPeriod);
                            fundAmountStartPeriod   = this.fullTotals() ? corrReportStartPeriod : endMth(dateMthFwd(fundAmountEndPeriod, -2));

                            seniorityStartPeriod    = dateStartMth(dateMthFwd(corrReportEndPeriod, -2));
                            seniorityEndPeriod      = corrReportEndPeriod;
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainInsuredPersonCat</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str 20 getMainInsuredPersonCat(RHRMEmplTable _emplTable)
    {
        str 20 insuredPersonCat;
        RHRMPersonTable rhrmPersonTable = _emplTable.personTable();

        switch (rhrmPersonTable.PensionInsureCategory)
        {
            case RPayPensionInsureCategory::WageEarner :
                insuredPersonCat = #InsuredPersonCatEmployee;
                break;

            case RPayPensionInsureCategory::AgriculturalEarner :
                insuredPersonCat = #InsuredPersonCatAgriculturalWorker;
                break;

            case RPayPensionInsureCategory::VoluntarilyPayment :
                insuredPersonCat = #InsuredPersonCatNaturalPerson;
                break;

            default :
                error(strFmt("@RUP3054", rhrmPersonTable.PensionInsureCategory, _emplTable.EmployeeId, _emplTable.Name()));
        }

        return insuredPersonCat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSeniorityPeriods</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container getSeniorityPeriods(str 20 _personCategory, RHRMEmplTable   _emplTable)
    {
        container                       reportPeriodsCon;
        container                       seniorityPeriodsCon;

        RHRMEmplTable                   emplTableExist;
        RPayCivilContract               civilContract;
        RPayCivilContractType           contractTypes;
        RPayHistory                     payHistory,
                                        payHistoryDismiss;
        RHRMOrderTrans                  orderTrans;
        RHRMOrderTable                  orderTable;
        RHRMVacationType                vacationType;
        RPayAverageEarnEmplPeriodTable  averageEarnEmplPeriodTable,
                                        corrAverageEarnEmplPeriodTable;
        RPaySickIllParameters           sickIllParameters;

        void fillReportPeriodsCon()
        {
            int                             monthIdx;
            Months                          monthNum;
            ReportPeriod_RU                 curPeriod,
                                            curPeriodStartDate,
                                            curPeriodEndDate,
                                            prevPeriodStartDate,
                                            prevPeriodEndDate;
            Map                             emplMonthsMap   = (_personCategory == this.insPersonCatDisabled(reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear) ? disPersMonthsMap : workersMonthsMap);
            container                       monthsCon;

            if (! emplMonthsMap)
            {
                return;
            }

            if (! emplMonthsMap.exists(_emplTable.PayMainEmplId))
            {
                return;
            }

            monthsCon = emplMonthsMap.lookup(_emplTable.PayMainEmplId);

            for (monthIdx = 1; monthIdx <= conlen(monthsCon); monthIdx++)
            {
                monthNum            = conpeek(monthsCon, monthIdx);
                curPeriod           = endMth(mkDate(1, monthNum, year(seniorityStartPeriod)));
                curPeriodStartDate  = dateStartMth(curPeriod);
                curPeriodEndDate    = curPeriod;

                if (curPeriodStartDate == prevPeriodEndDate + 1)
                {
                    prevPeriodEndDate = curPeriodEndDate;
                    continue;
                }

                if (prevPeriodStartDate)
                {
                    reportPeriodsCon = conpoke(reportPeriodsCon, conlen(reportPeriodsCon) + 1, [prevPeriodStartDate, prevPeriodEndDate]);
                }

                prevPeriodStartDate = curPeriodStartDate;
                prevPeriodEndDate   = curPeriodEndDate;
            }

            if (prevPeriodStartDate)
            {
                reportPeriodsCon = conpoke(reportPeriodsCon, conlen(reportPeriodsCon) + 1, [prevPeriodStartDate, prevPeriodEndDate]);
            }
        }

        void insertSeniorityPeriod(StartDate                    _eventStartDate,
                                   EndDate                      _eventEndDate,
                                   RPayInsuranceSeniorityTypeId _insuranceSeniorityTypeId)
        {
            int                             reportPeriodIdx,
                                            senPeriodIdx;
            TransDate                       repPeriodStartDate,
                                            repPeriodEndDate,
                                            senPeriodStartDate,
                                            senPeriodEndDate,
                                            crossPeriodStartDate,
                                            crossPeriodEndDate;
            RPayInsuranceSeniorityTypeId    senInsuranceTypeId;
            container                       seniorityPeriodsConLoc = connull();

            if (_eventStartDate <= _eventEndDate)
            {
                for (senPeriodIdx = 1; senPeriodIdx <= conlen(seniorityPeriodsCon); senPeriodIdx++)
                {
                    [senPeriodStartDate, senPeriodEndDate, senInsuranceTypeId] = conpeek(seniorityPeriodsCon, senPeriodIdx);

                    crossPeriodStartDate = max(senPeriodStartDate, _eventStartDate);
                    crossPeriodEndDate   = min(senPeriodEndDate,   _eventEndDate);

                    if (crossPeriodStartDate <= crossPeriodEndDate)
                    {
                        if (senPeriodStartDate < crossPeriodStartDate)
                        {
                            seniorityPeriodsConLoc = conpoke(seniorityPeriodsConLoc, conlen(seniorityPeriodsConLoc) + 1,
                                                             [senPeriodStartDate, crossPeriodStartDate - 1, senInsuranceTypeId]);
                        }

                        if (crossPeriodEndDate < senPeriodEndDate)
                        {
                            seniorityPeriodsConLoc = conpoke(seniorityPeriodsConLoc, conlen(seniorityPeriodsConLoc) + 1,
                                                             [crossPeriodEndDate + 1, senPeriodEndDate, senInsuranceTypeId]);
                        }
                    }
                    else
                    {
                        seniorityPeriodsConLoc = conpoke(seniorityPeriodsConLoc, conlen(seniorityPeriodsConLoc) + 1,
                                                         [senPeriodStartDate, senPeriodEndDate, senInsuranceTypeId]);
                    }
                }

                for (reportPeriodIdx = 1; reportPeriodIdx <= conlen(reportPeriodsCon); reportPeriodIdx++)
                {
                    [repPeriodStartDate, repPeriodEndDate] = conpeek(reportPeriodsCon, reportPeriodIdx);

                    crossPeriodStartDate = max(_eventStartDate, repPeriodStartDate);
                    crossPeriodEndDate   = min(_eventEndDate,   repPeriodEndDate);

                    if (crossPeriodStartDate <= crossPeriodEndDate)
                    {
                        seniorityPeriodsConLoc = conpoke(seniorityPeriodsConLoc, conlen(seniorityPeriodsConLoc) + 1,
                                                         [crossPeriodStartDate, crossPeriodEndDate, _insuranceSeniorityTypeId]);
                    }
                }

                seniorityPeriodsCon = seniorityPeriodsConLoc;
            }
        }

        fillReportPeriodsCon();

        while select civilContract
                where civilContract.StartDate         <= seniorityEndPeriod         &&
                      (! civilContract.EndDate                                      ||
                       civilContract.EndDate          >= seniorityStartPeriod)
        join contractTypes
            where contractTypes.CivilContractTypeCode == civilContract.CivilContractTypeCode
        exists join emplTableExist
            where emplTableExist.EmployeeId    == civilContract.EmplId       &&
                  emplTableExist.PayMainEmplId == _emplTable.PayMainEmplId
        {
            insertSeniorityPeriod(max(seniorityStartPeriod, civilContract.StartDate),
                                  min(seniorityEndPeriod, civilContract.EndDate ? civilContract.EndDate : dateMax()),
                                  contractTypes.InsuranceSeniorityTypeId);
        }

        while select payHistory
                order by StartDate, TransTime
                where payHistory.OperationType        == RHRMJournalType::Receive   &&
                      payHistory.StartDate            <= seniorityEndPeriod
        exists join emplTableExist
            where emplTableExist.EmployeeId           == payHistory.Number
                && emplTableExist.PayMainEmplId       == _emplTable.PayMainEmplId
        {
            select firstonly payHistoryDismiss
                order StartDate, TransTime
                where payHistoryDismiss.Number        == payHistory.Number          &&
                      payHistoryDismiss.OperationType == RHRMJournalType::Dismiss   &&
                      payHistoryDismiss.StartDate     >= payHistory.StartDate;

            insertSeniorityPeriod(max(seniorityStartPeriod, payHistory.StartDate),
                                  min(seniorityEndPeriod, payHistoryDismiss.StartDate ? payHistoryDismiss.StartDate : dateMax()),
                                  '');
        }

        while select orderTrans
                where orderTrans.StartDate           <= seniorityEndPeriod
                   && orderTrans.EndDate             >= seniorityStartPeriod
        join vacationType
            where vacationType.VacationTypeId     == orderTrans.VacationTypeId
               && vacationType.InsuranceSeniorityTypeId
        exists join orderTable
            where orderTable.JournalId          == orderTrans.JournalId
               && orderTable.JournalType        == RHRMJournalType::Vacation
               && orderTable.Posted             == NoYes::Yes
        exists join emplTableExist
            where emplTableExist.EmployeeId     == orderTrans.EmplId
               && emplTableExist.PayMainEmplId  == _emplTable.PayMainEmplId
        {
            insertSeniorityPeriod(max(seniorityStartPeriod, orderTrans.StartDate),
                                  min(seniorityEndPeriod, orderTrans.EndDate),
                                  vacationType.InsuranceSeniorityTypeId);
        }

        while select averageEarnEmplPeriodTable
                where averageEarnEmplPeriodTable.StartDate           <= seniorityEndPeriod
                   && averageEarnEmplPeriodTable.EndDate             >= seniorityStartPeriod
                   && averageEarnEmplPeriodTable.averageEarnCodeType == RPayAverageEarnCodeType::SickList
                   && ! averageEarnEmplPeriodTable.CorrectedSickListId
        join sickIllParameters
            where sickIllParameters.PayIllType          == averageEarnEmplPeriodTable.RpayIllType
               && sickIllParameters.InsuranceSeniorityTypeId
        exists join emplTableExist
            where emplTableExist.EmployeeId     == averageEarnEmplPeriodTable.EmplId
               && emplTableExist.PayMainEmplId  == _emplTable.PayMainEmplId
        {
            select firstfast corrAverageEarnEmplPeriodTable
                where corrAverageEarnEmplPeriodTable.EmplId              == averageEarnEmplPeriodTable.EmplId
                   && corrAverageEarnEmplPeriodTable.StartDate           == averageEarnEmplPeriodTable.StartDate
                   && corrAverageEarnEmplPeriodTable.CorrectedSickListId == averageEarnEmplPeriodTable.RpaySickListId;

            if (corrAverageEarnEmplPeriodTable)
            {
                if (reportType == RpayPensionFundExportKindOfCorrection::Correctional)
                {
                    continue;
                }
                else
                {
                    if (corrAverageEarnEmplPeriodTable.PayPeriod >= seniorityStartPeriod &&
                        corrAverageEarnEmplPeriodTable.PayPeriod <= seniorityEndPeriod)
                        continue;
                }
            }

            insertSeniorityPeriod(max(seniorityStartPeriod, averageEarnEmplPeriodTable.StartDate),
                                  min(seniorityEndPeriod, averageEarnEmplPeriodTable.EndDate),
                                  sickIllParameters.InsuranceSeniorityTypeId);
        }

        return seniorityPeriodsCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>holderKey</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container holderKey()
    {
        return [0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoEmplPFNumber</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void infoEmplPFNumber(RHRMEmplTable  _emplTable, boolean _displayMessage)
    {
        if (_emplTable.payPFRINN()&& _displayMessage)
        {
            info(strFmt("@RUP3057", _emplTable.EmployeeId, _emplTable.Name()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmplFundAmountsMaps</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initEmplFundAmountsMaps(RHRMEmplTable _emplTable)
    {
        container           fundAmountsCon;

        RPayAmount          fundInsuranceAmount,
                            fundStorageAmount,
                            fundAddAmount,
                            fundInsuranceAmountLast,
                            fundStorageAmountLast,
                            fundAddAmountLast;

        if (workersMonthsMap.exists(_emplTable.PayMainEmplId))
        {
            fundAmountsCon = this.getCatEmplFundAmounts(#InsuredPersonCatEmployee, _emplTable.PayMainEmplId);

            if (conlen(fundAmountsCon) > 0)
            {
                [fundInsuranceAmount, fundStorageAmount, fundAddAmount, fundInsuranceAmountLast, fundStorageAmountLast, fundAddAmountLast] = fundAmountsCon;

                workersFundAmountsMap.insert(_emplTable.PayMainEmplId, [fundInsuranceAmount, fundStorageAmount, fundAddAmount]);
                workersFundAmountsLastMap.insert(_emplTable.PayMainEmplId, [fundInsuranceAmountLast, fundStorageAmountLast, fundAddAmountLast]);
            }
        }

        if (disPersMonthsMap.exists(_emplTable.PayMainEmplId))
        {
            fundAmountsCon = this.getCatEmplFundAmounts(this.insPersonCatDisabled(reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear), _emplTable.PayMainEmplId);

            if (conlen(fundAmountsCon) > 0)
            {
                [fundInsuranceAmount, fundStorageAmount, fundAddAmount, fundInsuranceAmountLast, fundStorageAmountLast, fundAddAmountLast] = fundAmountsCon;

                disPersFundAmountsMap.insert(_emplTable.PayMainEmplId, [fundInsuranceAmount, fundStorageAmount, fundAddAmount]);
                disPersFundAmountsLastMap.insert(_emplTable.PayMainEmplId, [fundInsuranceAmountLast, fundStorageAmountLast, fundAddAmountLast]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmplMonthsMaps</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initEmplMonthsMaps(RHRMEmplTable _emplTable)
    {
        container           categoriesCon;
        int                 catMthIdx;
        str                 emplCategory;
        container           employeeCatMonthsCon;
        container           disabledPersonMonthsCon;

        categoriesCon = this.getEmplMonthCategories(_emplTable);

        for (catMthIdx = 1; catMthIdx <= conlen(categoriesCon); catMthIdx++)
        {
            emplCategory = conpeek(categoriesCon, catMthIdx);

            if (emplCategory == this.insPersonCatDisabled(reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear))
            {
                disabledPersonMonthsCon = conpoke(disabledPersonMonthsCon, conlen(disabledPersonMonthsCon) + 1, catMthIdx);
            }
            else
            {
                employeeCatMonthsCon = conpoke(employeeCatMonthsCon, conlen(employeeCatMonthsCon) + 1, catMthIdx);
            }
        }

        if (conlen(employeeCatMonthsCon))
        {
            workersMonthsMap.insert(_emplTable.PayMainEmplId, employeeCatMonthsCon);
        }

        if (conlen(disabledPersonMonthsCon))
        {
            disPersMonthsMap.insert(_emplTable.PayMainEmplId, disabledPersonMonthsCon);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmployeesData</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initEmployeesData()
    {
        RHRMEmplTable   emplTableLocal;
        RHRMEmplTable   emplTableMainLocal;
        Set             processedEmplSet    = new Set(Types::String);

        this.progressInit("@RUP1997", SysQuery::countTotal(queryRun), #AviFormLetter);
        progress.updateInterval(0);

        while (queryRun.next())
        {
            emplTableLocal = queryRun.get(tablenum(RHRMEmplTable));

            progress.setText(strFmt("@RUP3038", emplTableLocal.EmployeeId, emplTableLocal.Name()));

            if (! processedEmplSet.in(emplTableLocal.PayMainEmplId))
            {
                emplTableMainLocal = emplTableLocal.emplTableMain();

                this.initEmplMonthsMaps(emplTableMainLocal);
                this.initEmplFundAmountsMaps(emplTableMainLocal);
                this.initEmplSeniorityMaps(emplTableMainLocal);

                processedEmplSet.add(emplTableLocal.PayMainEmplId);
            }

            progress.incCount();
        }

        this.calcTotals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmplSeniorityMaps</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initEmplSeniorityMaps(RHRMEmplTable _emplTable)
    {
        container                       seniorityCon;
        container                       senioritySortedCon;

        container getSenioriryPeriod(StartDate  _periodStartDate)
        {
            int                             periodIdxLocal;
            StartDate                       periodStartDateLocal;
            EndDate                         periodEndDateLocal;
            RPayInsuranceSeniorityTypeId    insuranceSeniorityTypeIdLocal;
            int                             senMonths,
                                            senDays;
            container                       ret                             = [dateNull(), dateNull(), ''];

            if (conlen(seniorityCon) > 0)
            {
                for (periodIdxLocal = 1; periodIdxLocal <= conlen(seniorityCon); periodIdxLocal++)
                {
                    [periodStartDateLocal, periodEndDateLocal, insuranceSeniorityTypeIdLocal] = conpeek(seniorityCon, periodIdxLocal);

                    if (periodStartDateLocal == _periodStartDate)
                    {
                        senMonths   = (periodEndDateLocal - periodStartDateLocal + 1) div #DaysInMonth;
                        senDays     = (periodEndDateLocal - periodStartDateLocal + 1) - senMonths * #MonthsInYear;
                        ret = [periodStartDateLocal, periodEndDateLocal, insuranceSeniorityTypeIdLocal, senMonths, senDays];
                        break;
                    }
                }
            }

            return ret;
        }

        void initEmplCatSeniorityMaps(str 20 _personCategory)
        {
            int                             senIdx;
            StartDate                       senPeriodStartDate;
            EndDate                         senPeriodEndDate;
            RPayInsuranceSeniorityTypeId    senInsuranceTypeId;
            boolean                         hasSpecialSeniotity;
            Map                             specSenMap          = (_personCategory == this.insPersonCatDisabled(reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear) ? disPersSpecSenMap : workersSpecSenMap),
                                            comSenMap           = (_personCategory == this.insPersonCatDisabled(reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear) ? disPersComSenMap : workersComSenMap);
            int                             senMonths,
                                            senDays;
            ArrayExtend_RU                  senStartPeriodArray = new ArrayExtend_RU(Types::Date);
            StartDate                       arrayPeriodStartDate;

            seniorityCon = this.getSeniorityPeriods(_personCategory, _emplTable);

            if (conlen(seniorityCon) > 0)
            {
                for (senIdx = 1; senIdx <= conlen(seniorityCon); senIdx++)
                {
                    [senPeriodStartDate, senPeriodEndDate, senInsuranceTypeId] = conpeek(seniorityCon, senIdx);
                    senStartPeriodArray.addElement(senPeriodStartDate);
                }

                senStartPeriodArray = senStartPeriodArray.bubbleSorting();

                senioritySortedCon = connull();
                hasSpecialSeniotity = false;
                for (senIdx = 1; senIdx <= conlen(seniorityCon); senIdx++)
                {
                    arrayPeriodStartDate = senStartPeriodArray.value(senIdx);

                    [senPeriodStartDate, senPeriodEndDate, senInsuranceTypeId, senMonths, senDays] = getSenioriryPeriod(arrayPeriodStartDate);
                    senioritySortedCon = conpoke(senioritySortedCon, conlen(senioritySortedCon) + 1,
                                                 [senPeriodStartDate, senPeriodEndDate, senInsuranceTypeId, senMonths, senDays]);
                    if (senInsuranceTypeId)
                    {
                        hasSpecialSeniotity = true;
                    }
                }

                if (hasSpecialSeniotity)
                {
                    specSenMap.insert(_emplTable.PayMainEmplId, senioritySortedCon);
                }
                else
                {
                    comSenMap.insert(_emplTable.PayMainEmplId, senioritySortedCon);
                }
            }

            return;
        }

        initEmplCatSeniorityMaps(#InsuredPersonCatEmployee);
        initEmplCatSeniorityMaps(this.insPersonCatDisabled(reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initFromArgs(Args _args)
    {
        if (_args && _args.dataset() == tablenum(RHRMEmplTable))
        {
            parmEmplTable = _args.record();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHolderData</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initHolderData(RHRMEmplTable _emplTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHolderStruct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initHolderStruct()
    {
        holderData = new RHolderData_ComplexContainer(0, Types::Container, connull(), this.holderKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initParameters()
    {
        RPayRateCode                disabilityRateCode;

        companyInfo                 = CompanyInfo::find();
        payTaxParameters            = RPayTaxParameters::find();

        if (payTaxParameters.PensionFundinvalidDeduction)
        {
            disabilityRateCode      = RPayFundDeductionTable::find(payTaxParameters.PensionFundinvalidDeduction).RPayRateCodeEmpl;
            disabilityRateTable     = RPayRateTable::find(disabilityRateCode);
        }
        else
        {
            disabilityRateCode      = '';
            disabilityRateTable     = null;
        }

        selectedEmplSet             = new Set(Types::String);
        checkedEmplSet              = new Set(Types::String);
        printedEmplSet              = new Set(Types::String);

        workersMonthsMap            = new Map(Types::String, Types::Container);
        disPersMonthsMap            = new Map(Types::String, Types::Container);

        workersFundAmountsMap       = new Map(Types::String, Types::Container);
        disPersFundAmountsMap       = new Map(Types::String, Types::Container);
        workersFundAmountsLastMap   = new Map(Types::String, Types::Container);
        disPersFundAmountsLastMap   = new Map(Types::String, Types::Container);

        workersSpecSenMap           = new Map(Types::String, Types::Container);
        disPersSpecSenMap           = new Map(Types::String, Types::Container);
        workersComSenMap            = new Map(Types::String, Types::Container);
        disPersComSenMap            = new Map(Types::String, Types::Container);

        catSenTotalsMap             = new Map(Types::Container, Types::Container);
        categoryTotalsMap           = new Map(Types::String, Types::Container);

        this.initHolderStruct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        Yr      defaultYear = min(year(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())), this.maxYearEnabled());

        super();

        reportYear      = defaultYear;
        taxPeriod2010   = defaultYear < #ReportYear2010 ? RPayReportPensionPeriod2010::Year : RPayReportPensionPeriod2010::HalfYear;
        taxPeriod       = RPayReportSocialTaxPeriod::Quarter;

        this.initQuery();
        this.setQueryEmplRange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initQuery()
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        qbds = query.addDataSource(tablenum(RHRMEmplTable));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHolderData</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertHolderData(container _value)
    {
        holderData.insert(this.holderKey(), _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insPersonCatDisabled</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str insPersonCatDisabled( Yr  _yrReport)
    {
        str category;

        if (_yrReport >= #ReportYear2011)
        {
            category = #InsuredPersonCatDisabled1;
        }
        else
        {
            category = #InsuredPersonCatDisabled;
        }

        return category;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxYearEnabled</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Yr maxYearEnabled()
    {
        return year(maxDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>minYearEnabled</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Yr minYearEnabled()
    {
        return year(dateNull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>needCorrectedPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean needCorrectedPeriod()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected EnumId periodType()
    {
        return enumnum(RPayReportSocialTaxPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodDialogFields</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setPeriodDialogFields(RpayPensionFundExportKindOfCorrection  _reportType,
                                         Yr                                     _year,
                                         Yr                                     _corrYear)
    {
        taxPeriod2010Field.visible(_year <= #ReportYear2010);
        taxPeriod2010Field.enabled(_year == #ReportYear2010);

        if (_year < #ReportYear2010 && taxPeriod2010Field.value() != RPayReportPensionPeriod2010::Year)
        {
            taxPeriod2010Field.value(RPayReportPensionPeriod2010::Year);
        }

        if (taxPeriodField)
        {
            taxPeriodField.visible(_year > #ReportYear2010);
        }

        if (taxPeriodFieldByQtr)
        {
            taxPeriodFieldByQtr.visible(_year > #ReportYear2010);
        }

        if (_reportType == RpayPensionFundExportKindOfCorrection::None)
        {
            corrPeriodGroup.visible(false);
        }
        else
        {
            corrPeriodGroup.visible(true);

            corrTaxPeriod2010Field.visible(_corrYear <= #ReportYear2010);
            corrTaxPeriod2010Field.enabled(_corrYear == #ReportYear2010);

            if (_corrYear < #ReportYear2010 && corrTaxPeriod2010Field.value() != RPayReportPensionPeriod2010::Year)
            {
                corrTaxPeriod2010Field.value(RPayReportPensionPeriod2010::Year);
            }

            if (corrTaxPeriodField)
            {
                corrTaxPeriodField.visible(_corrYear > #ReportYear2010);
            }

            if (corrTaxPeriodFieldByQtr)
            {
                corrTaxPeriodFieldByQtr.visible(_corrYear > #ReportYear2010);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryEmplRange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setQueryEmplRange()
    {
        Query                   query   = queryRun.query();
        QueryBuildDataSource    qbds    = query.dataSourceTable(tablenum(RHRMEmplTable));
        QueryBuildRange         qbr;

        if (parmEmplTable)
        {
            qbr = findOrCreateRange_W(qbds, fieldnum(RHRMEmplTable, EmployeeId), queryValue(parmEmplTable.EmployeeId));
            qbr.status(RangeStatus::Locked);
        }
        else
        {
            qbr = findOrCreateRange_W(qbds, fieldnum(RHRMEmplTable, EmployeeId));
            qbr.status(RangeStatus::Open);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version        = conpeek(_packedClass, 1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    this.initQuery();
                }

                this.setQueryEmplRange();
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret && this.displayPeriodFields())
        {
            if (! reportYear)
            {
                ret = checkFailed("@RUP3059");
            }

            if (reportYear && (reportYear < this.minYearEnabled() || reportYear > this.maxYearEnabled()))
            {
                ret = checkFailed(strFmt("@RUP3056", this.minYearEnabled(), this.maxYearEnabled()));
            }

            if (reportType != RpayPensionFundExportKindOfCorrection::None)
            {
                if (! corrReportYear)
                {
                    ret = checkFailed("@RUP3060");
                }

                if (corrReportYear && (corrReportYear < this.minYearEnabled() || corrReportYear > this.maxYearEnabled()))
                {
                    ret = checkFailed(strFmt("@RUP3058", this.minYearEnabled(), this.maxYearEnabled()));
                }

                if (ret)
                {
                    if (corrReportEndPeriod >= reportEndPeriod)
                    {
                        ret = checkFailed("@RUP3061");
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static RPayPFReport construct(int       _parmEnumType,
                                  anytype   _parmEnum)
    {
        RPayPFReport    rPayPFReport;

        switch (_parmEnumType)
        {
            case enumnum(RPayPFReportExcelType) :
                rPayPFReport = RPayPFReportExcel::construct(_parmEnum);
                break;

            case enumnum(RPayPFReportXMLType) :
                rPayPFReport = RPayPFReportXML::construct(_parmEnum);
                break;

            default :
                throw error(strFmt("@SYS26908", _parmEnumType));
        }

        return rPayPFReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP3062";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        RPayPFReport    rPayPFReport;

        if (! _args ||
            (_args.parmEnumType() != enumnum(RPayPFReportExcelType) &&
             _args.parmEnumType() != enumnum(RPayPFReportXMLType)))
            throw error("@SYS59121");

        rPayPFReport = RPayPFReport::construct(_args.parmEnumType(), _args.parmEnum());

        rPayPFReport.initFromArgs(_args);
        rPayPFReport.initParameters();

        if (rPayPFReport.prompt())
        {
            rPayPFReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>