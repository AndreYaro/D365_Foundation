<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsCatchWeightItemCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PdsCatchWeightItemCache</c> class caches if a item is an catch weight item.
/// </summary>
internal final class PdsCatchWeightItemCache 
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isCatchWeightItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the item is an catch weight item.
    /// </summary>
    /// <param name = "_itemId">
    /// An item ID.
    /// </param>
    /// <returns>
    /// true if the item is a catch weight item; otherwise, false.
    /// </returns>
    [Hookable(false)]
    static internal boolean isCatchWeightItem(ItemId _itemId)
    {        
        // Delete this entire class when this flight is removed. Caching is moved into the PdsCatchWeightItem::exist() method
        if (PdsCatchWeightItemCacheSGOCFlight::instance().isEnabled())
        {
            return PdsCatchWeightItemCache::isCWItem(_itemId);
        }

        Map cache = SysTransactionScopeCache::get(classStr(PdsCatchWeightItemCache), curExt(), null);

        if (!cache)
        {
            cache = new Map(Types::String, Types::Enum);
            SysTransactionScopeCache::set(classStr(PdsCatchWeightItemCache), curExt(), cache);
        }
        else if (cache.exists(_itemId))
        {
            return cache.lookup(_itemId);
        }

        boolean isCatchWeightItem = PdsCatchWeightItemCache::isCWItem(_itemId);
        cache.insert(_itemId, isCatchWeightItem);

        return isCatchWeightItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCWItem</Name>
				<Source><![CDATA[
    static private boolean isCWItem(ItemId _itemId)
    {
        return #PdsCatchWeightEnabled
            && PdsCatchWeightItem::exist(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PdsCatchWeightItem_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invalidates the cache state when new catch weight items are created.
    /// </summary>
    /// <param name = "_sender">The caller.</param>
    /// <param name = "_e">The arguments</param>
    [DataEventHandler(tableStr(PdsCatchWeightItem), DataEventType::Inserted)]
    public static void PdsCatchWeightItem_onInserted(Common _sender, DataEventArgs _e)
    {
        Map cache = SysTransactionScopeCache::get(classStr(PdsCatchWeightItemCache), curExt(), null);    
        
        if (cache)
        {
            PdsCatchWeightItem record = _sender as PdsCatchWeightItem;
            cache.insert(record.ItemId, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PdsCatchWeightItem_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invalidates the cache state when new catch weight items are deleted.
    /// </summary>
    /// <param name = "_sender">The caller.</param>
    /// <param name = "_e">The arguments</param>
    [DataEventHandler(tableStr(PdsCatchWeightItem), DataEventType::Deleted)]
    public static void PdsCatchWeightItem_onDeleted(Common _sender, DataEventArgs _e)
    {
        Map cache = SysTransactionScopeCache::get(classStr(PdsCatchWeightItemCache), curExt(), null);
        
        if (cache)
        {
            PdsCatchWeightItem record = _sender as PdsCatchWeightItem;
            cache.insert(record.ItemId, false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>