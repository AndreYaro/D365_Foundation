<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnHandQueryWHSStandard</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class that provides helper methods for building WHS on hand queries.
/// </summary>
class InventOnHandQueryWHSStandard extends InventOnHandQuery
{
    WHSItemReservationHierarchyProvider hierarchyProvider;
    InventTable                         inventTable;
    boolean                             reservationLevelCached;
    WHSReservationHierarchyLevel        reservationLevel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dsOnHand</Name>
				<Source><![CDATA[
        public QueryBuildDataSource dsOnHand()
    {
        return this.parmSysQuery().dataSourceTable(tableNum(WHSInventReserve));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchFirstInventReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the query and fetches the first <c>WHSInventReserve</c> record.
    /// </summary>
    /// <returns>
    /// The first <c>WHSInventReserve</c> record in the query.
    /// </returns>
    public WHSInventReserve fetchFirstInventReserve()
    {
        QueryRun onHandQueryRun = new QueryRun(this.parmSysQuery());
        onHandQueryRun.next();

        return onHandQueryRun.get(tableNum(WHSInventReserve));
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidReservationLevel</Name>
				<Source><![CDATA[
        private WHSReservationHierarchyLevel invalidReservationLevel()
    {
        #WHSReservationHierarchy

        return #INVALIDHIERARCHYLEVEL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdField</Name>
				<Source><![CDATA[
        protected FieldId itemIdField()
    {
        return fieldNum(WHSInventReserve, ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHierarchyProvider</Name>
				<Source><![CDATA[
        public WHSItemReservationHierarchyProvider parmHierarchyProvider(
        WHSItemReservationHierarchyProvider _hierarchyProvider = null)
    {
        if (!prmisDefault(_hierarchyProvider))
        {
            hierarchyProvider = _hierarchyProvider;
        }
        else if (!hierarchyProvider)
        {
            hierarchyProvider = WHSItemReservationHierarchyProvider::newFromInventTable(this.parmInventTable());
        }

        return hierarchyProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
        public InventTable parmInventTable(InventTable _inventTable = inventTable)
    {
        inventTable = _inventTable;
        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservationLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>WHSReservationHierarchyLevel</c> query range value.
    /// </summary>
    /// <returns>
    /// The current <c>WHSReservationHierarchyLevel</c> query range value.
    /// </returns>
    public WHSReservationHierarchyLevel reservationLevel()
    {
        if (!reservationLevelCached)
        {
            QueryBuildRange range = this.dsOnHand().findRange(fieldNum(WHSInventReserve, HierarchyLevel));
            reservationLevel = range ? str2int(range.value()) : this.invalidReservationLevel();
        }

        return reservationLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReservationLevelRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a range on the <c>WHSInventReserve</c> table datasource for the given level.
    /// </summary>
    /// <param name="_level">
    /// The hierarchy level to be filtered on.
    /// </param>
    public void setReservationLevelRange(WHSReservationHierarchyLevel _level)
    {
        reservationLevel = _level;
        SysQuery::findOrCreateRange(this.dsOnHand(), fieldNum(WHSInventReserve, HierarchyLevel)).value(queryValue(_level));
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsInventDimFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating whether filtering based on the the specified inventory dimension is supported by the query.
    /// </summary>
    /// <param name="_inventDimFieldId">
    /// The ID of the inventory dimension field.
    /// </param>
    /// <returns>
    /// true if filtering by the specified dimension is supported; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Only queries that have a reservation level filter allow filtering by inventory dimensions.
    /// The reason for that is that if you don't have a range on the reservation level then the
    /// records from the levels above the specified dimension won't contain values for the specified dimension.
    /// Thus WHS queries only allow filtering by dimensions that are on the same reservation level as the query or below.
    /// </remarks>
    public boolean supportsInventDimFilters(FieldId _inventDimFieldId)
    {
        reservationLevel = this.reservationLevel();

        return reservationLevel != this.invalidReservationLevel()
            && reservationLevel >= this.parmHierarchyProvider().dimensionLevel(_inventDimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static InventOnHandQueryWHSStandard construct()
    {
        return new InventOnHandQueryWHSStandard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of the <c>InventOnHandQueryWHSStandard</c> class based on the specified query object.
    /// </summary>
    /// <param name="_query">
    /// A query.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventOnHandQueryWHSStandard</c> class.
    /// </returns>
    public static InventOnHandQueryWHSStandard newFromQuery(Query _query)
    {
        InventOnHandQueryWHSStandard onHandQuery = InventOnHandQueryWHSStandard::construct();

        onHandQuery.parmSysQuery(_query);

        return onHandQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
