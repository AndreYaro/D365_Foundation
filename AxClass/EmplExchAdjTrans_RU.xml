<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplExchAdjTrans_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EmplExchAdjTrans_RU
{
    EmplExchAdj_RU             emplExchRate;
    EmplExchAdjustmentCalc_RU  emplExchAdjustment;
    EmployeeTable_RU           emplTable;
    EmplTrans_RU               emplTrans;

    EmplExchPrinciples_RU      exchPrinciples;
    TransDate                  postingDate;
    TransDate                  exchRateDate;
    NoneTableTrans             dimSpec;
    Integer                    postingSpec;
    TransStatusCode            postingProfile;
    DimensionDefault           defaultDimension;
    Notes                      notes;

    Counter                    progressCounter;
    RunbaseProgress            progress;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addSearch</Name>
				<Source><![CDATA[
    private void addSearch(QueryRun _queryRun)
    {
        Query                  q;
        QueryBuildDataSource   qbds;

        q    = _queryRun.query();
        qbds = q.dataSourceTable(tablenum(EmplTrans_RU));

        qbds.addRange(fieldnum(EmplTrans_RU, TransDate)).value(queryRange(dateNull(), postingDate));
        qbds.addRange(fieldnum(EmplTrans_RU, Closed)).value(strfmt("@SYS26868", SysQuery::valueEmptyString(), SysQuery::range(postingDate, maxdate())));
        qbds.addRange(fieldnum(EmplTrans_RU, Reversed)).value(queryValue(NoYes::No));

        if (LedgerParameters::find().AdvanceAdjustment_W)
        {
            qbds.addRange(fieldnum(EmplTrans_RU, TransType)).value(strfmt("%1, %2, %3, %4",
                                                                      SysQuery::valueNot(queryValue(EmplTransSourceType_RU::CrossAccountSettle)),
                                                                      SysQuery::valueNot(queryValue(EmplTransSourceType_RU::ExchAdj)),
                                                                      SysQuery::valueNot(queryValue(EmplTransSourceType_RU::Bank)),
                                                                      SysQuery::valueNot(queryValue(EmplTransSourceType_RU::CashDoc))));
        }
        else
        {
        qbds.addRange(fieldnum(EmplTrans_RU, TransType)).value(strfmt("@SYS26868",
                                                                      SysQuery::valueNot(queryValue(EmplTransSourceType_RU::CrossAccountSettle)),
                                                                      SysQuery::valueNot(queryValue(EmplTransSourceType_RU::ExchAdj))));
        }

        _queryRun.query(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    private boolean checkTrans()
    {
        if (emplTrans.LastExchAdj > postingDate)
        {
            info(strfmt("@SYS68767", emplTrans.Voucher, postingDate, emplTrans.LastExchAdj));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emplExchRateAdjustment</Name>
				<Source><![CDATA[
    private void emplExchRateAdjustment()
    {
        EmplExchRateAdjustment_RU  emplExchRateAdjustment;

        emplExchRateAdjustment.ExecutedDate     = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        emplExchRateAdjustment.ExchPrinciple    = exchPrinciples;
        emplExchRateAdjustment.ConsideredDate   = postingDate;
        emplExchRateAdjustment.DateOfRate       = exchRateDate;
        emplExchRateAdjustment.UseProfile       = postingSpec;
        emplExchRateAdjustment.PostingProfile   = postingProfile;
        emplExchRateAdjustment.Dimensions       = dimSpec;
        emplExchRateAdjustment.Notes            = notes;
        emplExchRateAdjustment.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    private ExchRate exchRate()
    {
        if (exchPrinciples == EmplExchPrinciples_RU::TransDatePrinciple)
        {
            return CurrencyExchangeHelper::amount(emplTrans.AmountMST / emplTrans.AmountCur * 100);
        }

        return ExchangeRateHelper::getCrossRate_Static(
                Ledger::current(),
                emplTrans.CurrencyCode,
                exchRateDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateDate</Name>
				<Source><![CDATA[
    private TransDate exchRateDate()
    {
        if (exchPrinciples == EmplExchPrinciples_RU::TransDatePrinciple)
        {
            return emplTrans.TransDate;
        }

        return exchRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(EmplExchAdj_RU _emplExchRate)
    {
        emplExchRate        = _emplExchRate;
        exchPrinciples      = emplExchRate.exchPrinciples();
        postingDate         = emplExchRate.postingDate();
        exchRateDate        = emplExchRate.exchRateDate();
        dimSpec             = emplExchRate.dimSpec();
        postingSpec         = emplExchRate.postingSpec();
        postingProfile      = emplExchRate.postingProfile();
        defaultDimension    = emplExchRate.defaultDimension();
        notes               = emplExchRate.notes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingDate</Name>
				<Source><![CDATA[
    private TransDate postingDate()
    {
        if (exchPrinciples == EmplExchPrinciples_RU::TransDatePrinciple)
        {
            return emplTrans.TransDate;
        }

        return postingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    private void progressUpdate(str _text)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(_text);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingExchRate</Name>
				<Source><![CDATA[
    private ExchRate reportingExchRate()
    {
        if (!Ledger::reportingCurrency())
            return 0;

        if (exchPrinciples == EmplExchPrinciples_RU::TransDatePrinciple)
        {
            return CurrencyExchangeHelper::amount(emplTrans.ReportingCurrencyAmount / emplTrans.AmountCur * 100);
        }

        return ExchangeRateHelper::getCrossRate_Static(
                Ledger::current(),
                Ledger::reportingCurrency(),
                exchRateDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(QueryRun _queryRun)
    {
        #macrolib.AviFiles
        Counter progressTotal;

        progressTotal = SysQuery::countLoops(_queryRun);

        emplExchRate.progressInit("@SYS55328", progressTotal, #AviFindFile);
        progress = emplExchRate.parmProgress();

        progress.setText("@SYS26577");

        this.addSearch(_queryRun);

        emplExchAdjustment = EmplExchAdjustmentCalc_RU::newFromExchAdj(emplExchRate);

        ttsbegin;

        _queryRun.reset();

        while (_queryRun.next())
        {
            if (_queryRun.changed(tablenum(EmployeeTable_RU)))
            {
                emplTable = _queryRun.get(tablenum(EmployeeTable_RU));
            }

            if (_queryRun.changed(tablenum(EmplTrans_RU)))
            {
                emplTrans = _queryRun.get(tablenum(EmplTrans_RU));

                this.progressUpdate(strfmt("@SYS27234",
                                    emplTrans.EmplAccount,
                                    emplTrans.Voucher,
                                    emplTrans.CurrencyCode));

                if (postingSpec == AccountChoice::Account)
                {
                    postingProfile = emplTrans.PostingProfile;
                }

                switch (dimSpec)
                {
                    case NoneTableTrans::None :
                        defaultDimension = 0;
                        break;

                    case NoneTableTrans::Table :
                        defaultDimension = HcmEmployment::find(emplTable.HcmEmployment).DefaultDimension;
                        break;

                    case NoneTableTrans::Transaction :
                        defaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(emplTrans.LedgerDimension);
                        break;

                    default :
                        throw error("@SYS18879");
                }

                if (this.checkTrans())
                {
                    emplExchAdjustment.processUnrealizedExchAdj(emplTrans,
                                                                postingDate,
                                                                exchPrinciples,
                                                                defaultDimension,
                                                                postingProfile,
                                                                this.exchRateDate(),
                                                                this.exchRate(),
                                                                this.reportingExchRate(),
                                                                EmplExchAdjustmentCalc_RU::summaryLedgerDimension(emplTrans.EmplAccount, postingProfile),
                                                                postingSpec,
                                                                '',
                                                                dimSpec);

                    emplExchAdjustment.recalcFutureRealizedExchAdj(emplTrans, postingDate);
                }
            }
        }

        this.emplExchRateAdjustment();

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
