<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCFDITelemetry_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailCFDITelemetry_MX</c> provides methods for telemetry recordning of Retail localization for Mexico.
/// </summary>
internal static class RetailCFDITelemetry_MX
{
    public const str DefaultFeatureVersion = '1';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>stop</Name>
				<Source><![CDATA[
    private static void stop(
        str _featureReference, 
        str _featureVersion, 
        str _event, 
        str _caller,
        boolean _success, 
        int64 _elapsedMilliseconds,
        int64 _processedElements,
        str _outcome)
    {
        GlobalizationInstrumentationHelper::featureProcessingFinishEvent(
            _featureReference,
            strFmt('%1#Finish', _event),
            _caller,
            _featureVersion,
            SysCountryRegionCode::countryInfo(),
            _elapsedMilliseconds,
            NoYes::No,
            _success,
            _processedElements ? _elapsedMilliseconds / _processedElements : 0,
            _outcome);
    }

]]></Source>
			</Method>
			<Method>
				<Name>start</Name>
				<Source><![CDATA[
    private static void start(
        str _featureReference, 
        str _featureVersion, 
        str _event,
        str _caller)
    {
        GlobalizationInstrumentationHelper::featureProcessingStartEvent(
            _featureReference,
            _event,
            _caller,
            _featureVersion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGlobalCFDIJourStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the operation for starting posting CFDI Normal electronic invoice.
    /// </summardy>d
    /// <param name = "_caller">An object which calls the event.</param>
    [Hookable(false)]
    public static void postGlobalCFDIJourStart(str _caller)
    {
        RetailCFDITelemetry_MX::start(
            GlobalizationConstants::FeatureReferenceMXRET00001,
            DefaultFeatureVersion,
            RetailLocalizationInstrumentationConstants::CFDIGlobalInvoiceCreation,
            _caller);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGlobalCFDIJourFinish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the operation for starting posting CFDI Global electronic invoice.
    /// </summary>
    /// <param name = "_caller">An object which calls the event.</param>
    /// <param name = "_success">true, if the feature run was successful; otherwise, false.</param>
    /// <param name = "_elapsedMilliseconds">Time elapsed from the start event.</param>
    /// <param name = "_processedElements">Quantity of processed elements.</param>
    [Hookable(false)]
    public static void postGlobalCFDIJourFinish(
        str _caller,
        boolean _success, 
        int64 _elapsedMilliseconds,
        int64 _processedElements)
    {
        RetailCFDITelemetry_MX::stop(
            GlobalizationConstants::FeatureReferenceMXRET00001,
            DefaultFeatureVersion,
            RetailLocalizationInstrumentationConstants::CFDIGlobalInvoiceCreation,
            _caller,
            _success,
            _elapsedMilliseconds,
            _processedElements,
            '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNormalCFDIJourStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the operation for starting posting CFDI Normal electronic invoice.
    /// </summary>
    /// <param name = "_caller">An object which calls the event.</param>
    [Hookable(false)]
    public static void postNormalCFDIJourStart(str _caller)
    {
        RetailCFDITelemetry_MX::start(
            GlobalizationConstants::FeatureReferenceMXRET00001,
            DefaultFeatureVersion,
            RetailLocalizationInstrumentationConstants::CFDINormalInvoiceCreation,
            _caller);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNormalCFDIJourFinish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the operation for starting posting CFDI Normal electronic invoice.
    /// </summary>
    /// <param name = "_caller">An object which calls the event.</param>
    /// <param name = "_success">true, if the feature run was successful; otherwise, false.</param>
    /// <param name = "_elapsedMilliseconds">Time elapsed from the start event.</param>
    /// <param name = "_processedElements">Quantity of processed elements.</param>
    [Hookable(false)]
    public static void postNormalCFDIJourFinish(
        str _caller,
        boolean _success, 
        int64 _elapsedMilliseconds,
        int64 _processedElements)
    {
        RetailCFDITelemetry_MX::stop(
            GlobalizationConstants::FeatureReferenceMXRET00001,
            DefaultFeatureVersion,
            RetailLocalizationInstrumentationConstants::CFDINormalInvoiceCreation,
            _caller,
            _success,
            _elapsedMilliseconds,
            _processedElements,
            '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitCFDIResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the operation for submitting of CFDI electronic invoice.
    /// </summary>
    /// <param name = "_caller">An object which calls the event.</param>
    /// <param name = "_eInvoiceJour">Electronic invoice cursor.</param>
    /// <param name = "_success">true, if the feature run was successful; otherwise, false.</param>
    /// <param name = "_outcome">Short result message.</param>
    [Hookable(false)]
    public static void submitCFDIResult(
        str _caller,
        EInvoiceJour_MX _eInvoiceJour, 
        boolean _success, 
        str _outcome)
    {
        str event;

        if  (_eInvoiceJour.isRetailCFDINormalEInvoice())
        {
            event = RetailLocalizationInstrumentationConstants::CFDINormalInvoiceResponse;
        }
        else if (_eInvoiceJour.isRetailCFDIGlobalEInvoice())
        {
            event = RetailLocalizationInstrumentationConstants::CFDIGlobalInvoiceResponse;
        }
        else
        {
            event = RetailLocalizationInstrumentationConstants::Unknown;
        }

        GlobalizationInstrumentationHelper::featureActionEvent(
            GlobalizationConstants::FeatureReferenceMXRET00001,
            event,
            _caller,
            DefaultFeatureVersion,
            SysCountryRegionCode::countryInfo(),
            NoYes::No,
            _success,
            _outcome);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>