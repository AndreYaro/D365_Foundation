<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetModeStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CostSheetModeStrategy</c> class encapsulates common properties and logic of multiple costing
///    sheet modes.
/// </summary>
abstract class CostSheetModeStrategy
{
    CostPriceType   costType;
    Set             allowedNodeIdSet;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        costType
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowedNodeIdRangeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates the range of node IDs that must be loaded to the costing sheet before it is calculated.
    /// </summary>
    /// <returns>
    ///    The comma-separated string of values.
    /// </returns>
    /// <remarks>
    ///    If the list of node IDs is too long, the result will be an empty string.
    /// </remarks>
    public str allowedNodeIdRangeValue()
    {
        #define.MaxNumberOfAllowedNodes(100)

        str             nodeIdRangeValue = '';

        /* The following code will try to add a range with node IDs, provided in _allowedNodeIdSet.
           If the range is added, the costing sheet will contain less nodes than the original one
           and therefore will be built and calculated much faster. But if the number of required nodes
           is high, there will be no significant improvement, and this range may be skipped. */

        if (allowedNodeIdSet != null && allowedNodeIdSet.elements() <= #MaxNumberOfAllowedNodes)
        {
            SetEnumerator setEnumerator = allowedNodeIdSet.getEnumerator();
            while (setEnumerator.moveNext())
            {
                if (nodeIdRangeValue != '')
                {
                    nodeIdRangeValue += ',';
                }

                nodeIdRangeValue += queryValue(setEnumerator.current());
            }
        }

        return nodeIdRangeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCalculationFactorsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>CostSheetCalculationFactor</c> query.
    /// </summary>
    /// <param name="_costSheetId">
    /// The <c>CostSheetId</c> of current costing sheet.
    /// </param>
    /// <param name="_costSheetNodeId">
    /// The <c>CostSheetNodeId</c> of current costing sheet node.
    /// </param>
    /// <returns>
    /// The <c>Query</c> class instance.
    /// </returns>
    public Query buildCalculationFactorsQuery(CostSheetId       _costSheetId,
                                              CostSheetNodeId   _costSheetNodeId)
    {
        Query                   query        = new Query();
        QueryBuildDataSource    qbds         = query.addDataSource(tableNum(CostSheetCalculationFactor));
        QueryBuildRange         qbrSheetId   = qbds.addRange(FieldNum(CostSheetCalculationFactor, SheetId));
        QueryBuildRange         qbrNodeId    = qbds.addRange(FieldNum(CostSheetCalculationFactor, NodeId));

        qbrSheetId.value(SysQuery::value(_costSheetId));
        qbrNodeId.value(SysQuery::value(_costSheetNodeId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyCostSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the costing sheet is allowed to be modified in the current mode.
    /// </summary>
    /// <returns>
    ///    true if the costing sheet can be modified; otherwise, false.
    /// </returns>
    abstract public boolean canModifyCostSheet()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCostSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of a costing sheet for the specified costing sheet identifier.
    /// </summary>
    /// <param name="_sheetId">
    ///    The costing sheet identifier.
    /// </param>
    /// <returns>
    ///    The new instance of a costing sheet.
    /// </returns>
    /// <remarks>
    ///    The current mode is used by the costing sheet when determining whether a node is relevant and
    ///    should be loaded or not.
    /// </remarks>
    public CostSheet createCostSheet(CostSheetId _sheetId)
    {
        this.fillAllowedNodeIdSet(_sheetId);

        CostSheet costSheet = CostSheet::build(_sheetId, this);

        return costSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAllowedNodeIdSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a set of costing sheet nodes that are relevant in the current context.
    /// </summary>
    /// <param name="_sheetId">
    ///    A costing sheet identifier.
    /// </param>
    protected void fillAllowedNodeIdSet(CostSheetId _sheetId)
    {
        CostSheetNodeTable costSheetNodeTable;

        if (costType != CostPriceType::Undefined)
        {
            allowedNodeIdSet = new Set(Types::Integer);

            while select NodeId from costSheetNodeTable
                where costSheetNodeTable.SheetId == _sheetId
                   && (costSheetNodeTable.Type == CostSheetNodeType::Root ||
                       costSheetNodeTable.PriceType == costType)
            {
                allowedNodeIdSet.add(costSheetNodeTable.NodeId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the current costing sheet mode type.
    /// </summary>
    /// <returns>
    ///    The costing sheet mode type.
    /// </returns>
    abstract public CostSheetMode getType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDisplayUnMappedUnCoveredCostGroups</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the cost groups that are not presented in the costing sheet or covered by
    ///    default cost groups must be added to the costing sheet structure in the current mode.
    /// </summary>
    /// <returns>
    ///    true if the unmapped cost groups must be added; otherwise, false.
    /// </returns>
    abstract public boolean mustDisplayUnMappedUnCoveredCostGroups()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustFindUnMappedCostGroups</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the unmapped cost groups must be found in the current mode.
    /// </summary>
    /// <returns>
    ///    true if the cost groups must be found; otherwise, false.
    /// </returns>
    abstract public boolean mustFindUnMappedCostGroups()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustLoadCalculationBasisAndFactors</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the indirect cost basis and factors must be loaded in the current mode.
    /// </summary>
    /// <returns>
    ///    true if the basis and factors must be loaded; otherwise, false.
    /// </returns>
    abstract public boolean mustLoadCalculationBasisAndFactors()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustLoadCostGroupSubnodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the sub-nodes of the cost group nodes must be loaded in the current mode.
    /// </summary>
    /// <returns>
    ///    true if the cost group sub-nodes must be loaded; otherwise, false.
    /// </returns>
    abstract public boolean mustLoadCostGroupSubnodes()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustLoadSubnodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the sub-nodes of the costing sheet nodes must be loaded in the current mode.
    /// </summary>
    /// <returns>
    ///    true, if the sub-nodes must be loaded; otherwise, false.
    /// </returns>
    abstract public boolean mustLoadSubnodes()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a cursor for querying costing sheet node records.
    /// </summary>
    /// <returns>A <c>CostSheetNodeTable</c> record buffer used for querying costing sheet node records.</returns>
    public CostSheetNodeTable getNodeCursor()
    {
        CostSheetNodeTable costSheetNodeTable;

        return costSheetNodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalculationFactorCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a cursor for querying costing sheet calculation factor records.
    /// </summary>
    /// <returns>A <c>CostSheetCalculationFactor</c> record buffer used for querying costing sheet absorption basis records.</returns>
    public CostSheetCalculationFactor getCalculationFactorCursor()
    {
        CostSheetCalculationFactor costSheetCalculationFactor;

        return costSheetCalculationFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAbsorptionBasisCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a cursor for querying costing sheet absorption basis records.
    /// </summary>
    /// <returns>A <c>CostSheetCalculationBasis</c> record buffer used for querying costing sheet absorption basis records.</returns>
    public CostSheetCalculationBasis getAbsorptionBasisCursor()
    {
        CostSheetCalculationBasis costSheetCalculationBasis;

        return costSheetCalculationBasis;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packedAllowedNodeIdSet = allowedNodeIdSet == null ? conNull() : allowedNodeIdSet.pack();

        return [#CurrentVersion, this.getType(), #CurrentList, packedAllowedNodeIdSet];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowedNodeIdSet</Name>
				<Source><![CDATA[
    public Set parmAllowedNodeIdSet(Set _allowedNodeIdSet = allowedNodeIdSet)
    {
        allowedNodeIdSet = _allowedNodeIdSet;

        return allowedNodeIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets or sets the <c>CostPriceType</c> enum value that represents the branch of the costing sheet that should be loaded by the strategy.
    /// </summary>
    /// <param name="_costType">
    ///     The new value of the <c>CostPriceType</c> enumeration.
    /// </param>
    /// <returns>
    ///     A value in the <c>CostPriceType</c> enumeration.
    /// </returns>
    public CostPriceType parmCostType(CostPriceType _costType = costType)
    {
        costType = _costType;

        return costType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean             ret;
        Integer             version = RunBase::getVersion(_packedClass);
        container           packedAllowedNodeIdSet;
        CostSheetMode   costSheetMode;

        switch (version)
        {
            case #CurrentVersion:
                [version, costSheetMode, #CurrentList, packedAllowedNodeIdSet] = _packedClass;
                if (packedAllowedNodeIdSet != conNull())
                {
                    allowedNodeIdSet = Set::create(packedAllowedNodeIdSet);
                }

                ret = true;
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the costing sheet mode class.
    /// </summary>
    /// <param name="_packedModeStrategy">
    ///    The costing sheet mode object packed into a container.
    /// </param>
    /// <returns>
    ///    The new instance of the costing sheet mode class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    An unexpected value was found in the input container.
    /// </exception>
    public static CostSheetModeStrategy create(container _packedModeStrategy)
    {
        CostSheetModeStrategy   modeStrategy;

        CostSheetMode modeType = conPeek(_packedModeStrategy, 2); // [version, modeType, packedModeStrategy]

        switch (modeType)
        {
            case CostSheetMode::Edit:
                modeStrategy = CostSheetModeStrategyEdit::construct();
                break;

            case CostSheetMode::PackUnpack:
                modeStrategy = CostSheetModeStrategyPackUnpack::construct();
                break;

            case CostSheetMode::Calculate:
                modeStrategy = CostSheetModeStrategyCalculate::construct();
                break;

            case CostSheetMode::Present:
                modeStrategy = CostSheetModeStrategyPresent::construct();
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        modeStrategy.unpack(_packedModeStrategy);

        return modeStrategy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
