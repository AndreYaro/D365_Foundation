<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingPropertySalesOrderHeaderAttributeProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using System.Collections;
using CrtPricingPropertyDefinition = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPropertyDefinition;
using CrtSalesTransaction = Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesTransaction;
using CrtPricingPropertyValueContext = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPropertyValueContext;
using CrtPricingPropertySource = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPropertySource;
using CrtPricingPropertyLevel = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPropertyLevel;
using CrtPricingPropertyType = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPropertyType;

/// <summary>
/// Property provider for sales order header attributes.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.RetailPricingPropertyValueProviderBase))]
internal final class RetailPricingPropertySalesOrderHeaderAttributeProvider extends RetailPricingPropertyValueProviderBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>IsPropertySupported</Name>
				<Source><![CDATA[
    public boolean IsPropertySupported(CrtPricingPropertyDefinition definition)
    {
        return definition.get_PropertyLevel() == CrtPricingPropertyLevel::Header
            && definition.get_PropertyType() == CrtPricingPropertyType::Attribute
            && definition.get_PropertySource() == CrtPricingPropertySource::SalesOrderHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Resolve</Name>
				<Source><![CDATA[
    public void Resolve(CrtPricingPropertyValueContext valueContext, CrtSalesTransaction salesTransaction)
    {        
        Map attributeRecIdMap = new Map(Types::Int64, Types::AnyType);
        
        IEnumerator enumerator = valueContext.get_PricingProperties().GetEnumerator();
        while (enumerator.moveNext())
        {
            CrtPricingPropertyDefinition crtDefinition = enumerator.get_Current();
            if (this.IsPropertySupported(crtDefinition))
            {
                attributeRecIdMap.insert(crtDefinition.get_AttributeRecordId(), crtDefinition);
            }
        }
        
        RecId instanceValueRecId = 0;
        int64 mTransactionRecId;
        if (System.Int64::TryParse(this.mTransactionId, byref mTransactionRecId)) // Check whether it's a price simulator transaction.
        {
            RetailPricingSimulatorSalesTransaction psSalesTransaction = RetailPricingSimulatorSalesTransaction::findByRef(mTransactionRecId);
            RetailPricingSimulatorInstanceValue retailPricingSimulatorInstanceValue = RetailPricingSimulatorInstanceValue::findByTransaction(psSalesTransaction.RecId);
            instanceValueRecId = retailPricingSimulatorInstanceValue.RecId;
        }
        if (!instanceValueRecId)
        {
            RetailSalesTableInstanceValue retailSalesTableInstanceValue = RetailSalesTableInstanceValue::findBySalesTable(this.mTransactionId, curExt());
            instanceValueRecId = retailSalesTableInstanceValue.RecId;
        }
        if (instanceValueRecId)
        {
            EcoResAttributeValue ecoResAttributeValue;
            EcoResTextValue ecoResTextValue;

            while select RecId, Attribute from ecoResAttributeValue
                    where ecoResAttributeValue.InstanceValue == instanceValueRecId
                join TextValue from ecoResTextValue
                    where ecoResTextValue.RecId == ecoResAttributeValue.Value
            {
                if (!attributeRecIdMap.exists(ecoResAttributeValue.Attribute))
                {
                    continue;
                }

                CrtPricingPropertyDefinition crtDefinition = attributeRecIdMap.lookup(ecoResAttributeValue.Attribute);

                // Sales order attribute only supports text value.
                valueContext.AddHeaderValue(crtDefinition, ecoResTextValue.TextValue);
            }
        }
        
        enumerator = valueContext.get_PricingProperties().GetEnumerator();
        while (enumerator.moveNext())
        {
            CrtPricingPropertyDefinition crtDefinition = enumerator.get_Current();
            if (this.IsPropertySupported(crtDefinition))
            {
                valueContext.Resolve(crtDefinition);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>