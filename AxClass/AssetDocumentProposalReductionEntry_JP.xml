<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDocumentProposalReductionEntry_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Asset reduction entry proposal.
/// </summary>
[AssetDocumentProposalTypeAttribute_JP(AssetDocumentProposalType_JP::AcquisitionReductionEntry)]
class AssetDocumentProposalReductionEntry_JP extends AssetDocumentProposal_JP implements BatchRetryable
{
    DialogRunbase     dialogReductionEntry;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialogReductionEntry = super();

        dialogReductionEntry.caption("@SYS4006213");

        return dialogReductionEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoJP, GlobalizationConstants::FeatureReferenceJP00016] ],
            funcName()
        );

        Query                query = new Query(queryStr(AssetProposalReductionEntry_JP));
        QueryBuildRange      qr;
        super();

        query.name("@FixedAssetsReductionEntry:ProposalForValueModel");
        qr = query.dataSourceTable(tableNum(AssetBookTable)).findRange(fieldNum(AssetBookTable,CurrentOperationsTax));
        qr.status(RangeStatus::Locked);
        qr = query.dataSourceTable(tableNum(AssetBook)).addRange(fieldNum(AssetBook,Status));
        qr.value(queryValue(AssetStatus::Open));
        qr.status(RangeStatus::Locked);

        this.addDirectOffTypeCondition(query);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDirectOffTypeCondition</Name>
				<Source><![CDATA[
    private void addDirectOffTypeCondition(Query _query)
    {
        QueryBuildDataSource qbdsAssetDocumentEntry = _query.dataSourceTable(tableNum(AssetDocumentEntry_JP));
        qbdsAssetDocumentEntry.clearLinks();
        qbdsAssetDocumentEntry.addLink(fieldNum(AssetBook, AssetId), fieldNum(AssetDocumentEntry_JP, AssetId));

        QueryBuildDataSource qbdsAssetDocumentTable = _query.dataSourceTable(tableNum(AssetDocumentTable_JP));
        QueryBuildRange qbrAssetDocumentTable = qbdsAssetDocumentTable.addRange(fieldNum(AssetDocumentTable_JP, Type));
        qbrAssetDocumentTable.value(strFmt('((%1.%2 == %3.%4) || (%5.%6 == %7))',
            _query.dataSourceTable(tableNum(AssetBook)).name(),                  // AssetBook %1
            fieldStr(AssetBook, BookId),                                         // BookId %2
            qbdsAssetDocumentEntry.name(),                                       // AssetDocumentEntry_JP %3
            fieldStr(AssetDocumentEntry_JP, BookId),                             // BookId %4
            qbdsAssetDocumentTable.name(),                                       // AssetDocumentTable_JP %5
            fieldStr(AssetDocumentTable_JP, Type),                               // Type %6
            any2int(AssetDocumentType_JP::AssetReductionEntry_DirectOff)));      // %7
        qbrAssetDocumentTable.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        AssetJournal                  assetJournal;
        AssetBook                     assetBook;
        AssetTransDate                transDate;
        AssetDocumentEntry_JP         entry;
        AssetDocumentTable_JP         document;

        assetJournal = new AssetJournal(journalNum,AssetTransTypeJournal::Acquisition);

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(AssetBook))
                || AssetDocumentUseBookSpecificEntry_JPFlight::instance().isEnabled())
            {
                assetBook = queryRun.get(tableNum(AssetBook)) as AssetBook;
                document = queryRun.get(tableNum(AssetDocumentTable_JP)) as AssetDocumentTable_JP;
                entry = queryRun.get(tableNum(AssetDocumentEntry_JP)) as AssetDocumentEntry_JP;
                fiscalCalendarPeriod = null;
                transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

                if (document.MainType == AssetDocumentMainType_JP::ReductionEntry
                    && (!AssetDocumentUseBookSpecificEntry_JPFlight::instance().isEnabled()
                        || (assetBook.AssetId == entry.AssetId
                            && assetBook.BookId == entry.BookId
                            && document.RecId == entry.AssetDocumentTable_JP)))
                {
                    ttsbegin;
                    assetJournal.createTrans(
                        0,
                        assetBook,
                        transDate,
                        '',
                        0,
                        0,
                        false,
                        0,
                        0,
                        dateNull(),
                        false,
                        false,
                        document.Type,
                        entry.RecId);
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>