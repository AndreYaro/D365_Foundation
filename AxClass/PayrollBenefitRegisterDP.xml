<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollBenefitRegisterDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used as the data provider for the <c>PayrollBenefitRegisterDP</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(PayrollBenefitRegisterContract)),
    SRSReportQueryAttribute('PayrollBenefitRegister')
]
class PayrollBenefitRegisterDP extends SRSReportDataProviderBase
{
    PayrollBenefitRegisterTmp   payrollBenefitRegisterTmp;
    PayrollPayPeriodRecId       fromPayPeriodRecId;
    PayrollPayPeriodRecId       toPayPeriodRecId;
    PayrollPayCycleRecId        payrollPayCycleRecId;
    boolean                     printSSN;
    boolean                     printEarningBasisDetail;
    boolean                     courtCaseId;
    PayrollPrintSummaryorDetail printSummaryOrDetail;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPayrollBenefitRegisterTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns temporary table <c>PayrollBenefitRegisterTmp</c> data.
    /// </summary>
    /// <returns>
    /// Temporary table <c>PayrollBenefitRegisterTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute('PayrollBenefitRegisterTmp')
    ]
    public PayrollBenefitRegisterTmp getPayrollBenefitRegisterTmp()
    {
        select payrollBenefitRegisterTmp;
        return payrollBenefitRegisterTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepare the data for the report.
    /// </summary>
    private void prepareReportData()
    {
        Query                                   query;
        QueryRun                                queryRun;
        PayrollPayStatement                     payStatement;
        HcmWorker                               hcmWorker;
        HcmPersonIdentificationNumber           hcmPersonIdentificationNumber;
        PayrollPayStatementBenefitLine          payrollPayStatementBenefitLine;
        DirPartyTable                           dirPartyTable;
        HcmIdentificationTypeRecId              identificationTypeRecId;
        HcmBenefitPlan                          hcmBenefitPlan;
        HcmBenefitOption                        hcmBenefitOption;
        HcmBenefitRecId                         benefitRecId, benefitRecIdLocal;
        PayrollPayStatementRecId                payStatementRecId, payStatementRecIdLocal;
        PayrollWorkerGarnishmentDetail          workerGarnishmentDetail;
        HcmWorkerEnrolledBenefit                workerEnrolledBenefit;
        PayrollCourtCaseId                      courtCaseIdValue;
        PayrollCategory                         payrollCategory;
        boolean                                 insertToTempTable;
        Set                                     processedPayments;

        insertToTempTable = false;
        processedPayments = new Set(Types::Int64);

        identificationTypeRecId = HcmSharedParameters::find().SSNIdentificationType;

        query = this.parmQuery();

        FromDate periodStartDate = PayrollPayPeriod::find(fromPayPeriodRecId).PeriodStartDate;
        ToDate   periodEndDate   = PayrollPayPeriod::find(toPayPeriodRecId).PeriodEndDate;

        QueryBuildDataSource payrollPayPeriodDS = query.dataSourceTable(tablenum(PayrollPayStatement), 1).addDataSource(tableNum(PayrollPayPeriod));
        payrollPayPeriodDS.joinMode(JoinMode::ExistsJoin);
        payrollPayPeriodDS.addLink(fieldnum(PayrollPayStatement, PayPeriod), fieldnum(PayrollPayPeriod, RecId));
        payrollPayPeriodDS.addRange(fieldNum(PayrollPayPeriod, PeriodStartDate)).value(SysQueryRangeUtil::dateRange(periodStartDate, periodEndDate));
        payrollPayPeriodDS.addRange(fieldNum(PayrollPayPeriod, PayCycle)).value(SysQuery::value(payrollPayCycleRecId));
        query.clearOrderBy();

        if (printSummaryOrDetail == PayrollPrintSummaryorDetail::Detail)
        {
            query.dataSourceTable(tablenum(PayrollPayStatement), 1).addSortField(fieldnum(PayrollPayStatement, RecId));
        }
        query.dataSourceTable(tablenum(PayrollPayStatementBenefitLine), 1).addSortField(fieldnum(PayrollPayStatementBenefitLine, Benefit));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            payStatement = queryRun.get(tablenum(PayrollPayStatement));
            payrollPayStatementBenefitLine = queryRun.get(tablenum(PayrollPayStatementBenefitLine));
            payStatementRecId = payStatement.RecId;
            benefitRecId = payrollPayStatementBenefitLine.Benefit;
            dirPartyTable = queryRun.get(tablenum(DirPartyTable));
            hcmWorker = queryRun.get(tablenum(HcmWorker));
            hcmBenefitPlan = queryRun.get(tablenum(HcmBenefitPlan));
            hcmBenefitOption = queryRun.get(tablenum(HcmBenefitOption));
            payrollCategory = HcmBenefitType::find(hcmBenefitPlan.BenefitType).PayrollCategory;

            if (printSummaryOrDetail == PayrollPrintSummaryorDetail::Detail)
            {
                if (printSSN)
                {
                    hcmPersonIdentificationNumber = HcmPersonIdentificationNumber::findByPersonAndType(hcmWorker.Person, identificationTypeRecId);
                }

                courtCaseIdValue = '';

                if (courtCaseId)
                {
                    select CourtCaseId from workerGarnishmentDetail
                        exists join RecId from workerEnrolledBenefit
                            where workerGarnishmentDetail.WorkerEnrolledBenefit == workerEnrolledBenefit.RecId
                                  && workerEnrolledBenefit.Worker  == hcmWorker.RecId
                                  &&  workerEnrolledBenefit.Benefit == benefitRecId;

                    courtCaseIdValue = workerGarnishmentDetail.CourtCaseId;
                }

                if (payStatementRecIdLocal != payStatementRecId || benefitRecIdLocal != benefitRecId)
                {
                    payrollBenefitRegisterTmp.Benefit = benefitRecId;
                    payrollBenefitRegisterTmp.BenefitPlanID = hcmBenefitPlan.BenefitPlanID + " " + hcmBenefitOption.BenefitOptionID;
                    payrollBenefitRegisterTmp.Description = hcmBenefitPlan.Description;
                    payrollBenefitRegisterTmp.PersonnelNumber = hcmWorker.PersonnelNumber;
                    payrollBenefitRegisterTmp.Worker = dirPartyTable.Name;
                    payrollBenefitRegisterTmp.IdentificationNumber = hcmPersonIdentificationNumber.IdentificationNumber;
                    payrollBenefitRegisterTmp.DocumentNumber = payStatement.DocumentNumber;
                    payrollBenefitRegisterTmp.CourtCaseNumber = courtCaseIdValue;

                    if (printEarningBasisDetail)
                    {
                        // deduction amounts and hours
                        select sum(BaseTimeEarningBaseAmount), sum(BaseTimeEarningBaseHours), sum(PremiumEarningBaseAmount), sum(PremiumEarningBaseHours) from payrollPayStatementBenefitLine
                            where payrollPayStatementBenefitLine.PayStatement == payStatement.RecId &&
                                payrollPayStatementBenefitLine.Benefit == benefitRecId &&
                                payrollPayStatementBenefitLine.IsEmployer == NoYes::No &&
                                payrollPayStatementBenefitLine.IsMarkedForRemoval == NoYes::No;

                        payrollBenefitRegisterTmp.DeductionBaseEarningAmount = payrollPayStatementBenefitLine.BaseTimeEarningBaseAmount;
                        payrollBenefitRegisterTmp.DeductionBaseEarningHours = payrollPayStatementBenefitLine.BaseTimeEarningBaseHours;
                        payrollBenefitRegisterTmp.DeductionPremiumEarningAmount = payrollPayStatementBenefitLine.PremiumEarningBaseAmount;
                        payrollBenefitRegisterTmp.DeductionPremiumEarningHours = payrollPayStatementBenefitLine.PremiumEarningBaseHours;

                        // contribution amounts and hours
                        select sum(BaseTimeEarningBaseAmount), sum(BaseTimeEarningBaseHours), sum(PremiumEarningBaseAmount), sum(PremiumEarningBaseHours) from payrollPayStatementBenefitLine
                            where payrollPayStatementBenefitLine.PayStatement == payStatement.RecId &&
                                payrollPayStatementBenefitLine.Benefit == benefitRecId &&
                                payrollPayStatementBenefitLine.IsEmployer == NoYes::Yes &&
                                payrollPayStatementBenefitLine.IsMarkedForRemoval == NoYes::No;

                        payrollBenefitRegisterTmp.ContributionBaseEarningAmount = payrollPayStatementBenefitLine.BaseTimeEarningBaseAmount;
                        payrollBenefitRegisterTmp.ContributionBaseEarningHours = payrollPayStatementBenefitLine.BaseTimeEarningBaseHours;
                        payrollBenefitRegisterTmp.ContributionPremiumEarningAmount = payrollPayStatementBenefitLine.PremiumEarningBaseAmount;
                        payrollBenefitRegisterTmp.ContributionPremiumEarningHours = payrollPayStatementBenefitLine.PremiumEarningBaseHours;
                    }

                    // deduction amount
                    select sum(AccountingCurrencyAmount) from payrollPayStatementBenefitLine
                        where payrollPayStatementBenefitLine.PayStatement == payStatement.RecId &&
                            payrollPayStatementBenefitLine.Benefit == benefitRecId &&
                            payrollPayStatementBenefitLine.IsEmployer == NoYes::No &&
                            payrollPayStatementBenefitLine.IsMarkedForRemoval == NoYes::No;

                    payrollBenefitRegisterTmp.DeductionAmount = payrollPayStatementBenefitLine.AccountingCurrencyAmount;

                    // contribution amount
                    select sum(AccountingCurrencyAmount) from payrollPayStatementBenefitLine
                        where payrollPayStatementBenefitLine.PayStatement == payStatement.RecId &&
                            payrollPayStatementBenefitLine.Benefit == benefitRecId &&
                            payrollPayStatementBenefitLine.IsEmployer == NoYes::Yes &&
                            payrollPayStatementBenefitLine.IsMarkedForRemoval == NoYes::No;

                    payrollBenefitRegisterTmp.ContributionAmount = payrollPayStatementBenefitLine.AccountingCurrencyAmount;

                    payrollBenefitRegisterTmp.insert();
                    payrollBenefitRegisterTmp.clear();
                    benefitRecIdLocal = benefitRecId;
                    payStatementRecIdLocal = payStatementRecId;
                }
            }
            else
            {
                payStatement = PayrollPayStatement::find(payStatementRecId);

                if (payStatementRecIdLocal != payStatementRecId || benefitRecIdLocal != benefitRecId)
                {
                    if (benefitRecIdLocal == benefitRecId && processedPayments.in(payStatementRecId))
                    {
                        continue;
                    }

                    if (insertToTempTable && benefitRecIdLocal != benefitRecId)
                    {
                        payrollBenefitRegisterTmp.insert();
                        payrollBenefitRegisterTmp.clear();
                        processedPayments = new Set(Types::Int64);
                    }

                    benefitRecIdLocal = benefitRecId;
                    payStatementRecIdLocal = payStatementRecId;
                    insertToTempTable = true;
                    processedPayments.add(payStatementRecIdLocal);

                    payrollBenefitRegisterTmp.Benefit = benefitRecId;
                    payrollBenefitRegisterTmp.BenefitPlanID = hcmBenefitPlan.BenefitPlanID + " " + hcmBenefitOption.BenefitOptionID;
                    payrollBenefitRegisterTmp.Description = hcmBenefitPlan.Description;

                    if (printEarningBasisDetail)
                    {
                        // deduction amounts and hours
                        select sum(BaseTimeEarningBaseAmount), sum(BaseTimeEarningBaseHours), sum(PremiumEarningBaseAmount), sum(PremiumEarningBaseHours) from payrollPayStatementBenefitLine
                            where payrollPayStatementBenefitLine.PayStatement == payStatement.RecId &&
                                payrollPayStatementBenefitLine.Benefit == benefitRecId &&
                                payrollPayStatementBenefitLine.IsEmployer == NoYes::No  &&
                                payrollPayStatementBenefitLine.IsMarkedForRemoval == NoYes::No;

                        payrollBenefitRegisterTmp.DeductionBaseEarningAmount += payrollPayStatementBenefitLine.BaseTimeEarningBaseAmount;
                        payrollBenefitRegisterTmp.DeductionBaseEarningHours += payrollPayStatementBenefitLine.BaseTimeEarningBaseHours;
                        payrollBenefitRegisterTmp.DeductionPremiumEarningAmount += payrollPayStatementBenefitLine.PremiumEarningBaseAmount;
                        payrollBenefitRegisterTmp.DeductionPremiumEarningHours += payrollPayStatementBenefitLine.PremiumEarningBaseHours;

                        // contribution amounts and hours
                        select sum(BaseTimeEarningBaseAmount), sum(BaseTimeEarningBaseHours), sum(PremiumEarningBaseAmount), sum(PremiumEarningBaseHours) from payrollPayStatementBenefitLine
                            where payrollPayStatementBenefitLine.PayStatement == payStatement.RecId &&
                                payrollPayStatementBenefitLine.Benefit == benefitRecId &&
                                payrollPayStatementBenefitLine.IsEmployer == NoYes::Yes  &&
                                payrollPayStatementBenefitLine.IsMarkedForRemoval == NoYes::No;

                        payrollBenefitRegisterTmp.ContributionBaseEarningAmount += payrollPayStatementBenefitLine.BaseTimeEarningBaseAmount;
                        payrollBenefitRegisterTmp.ContributionBaseEarningHours += payrollPayStatementBenefitLine.BaseTimeEarningBaseHours;
                        payrollBenefitRegisterTmp.ContributionPremiumEarningAmount += payrollPayStatementBenefitLine.PremiumEarningBaseAmount;
                        payrollBenefitRegisterTmp.ContributionPremiumEarningHours += payrollPayStatementBenefitLine.PremiumEarningBaseHours;
                    }

                    // deduction amount
                    select sum(AccountingCurrencyAmount) from payrollPayStatementBenefitLine
                        where payrollPayStatementBenefitLine.PayStatement == payStatement.RecId &&
                            payrollPayStatementBenefitLine.Benefit == benefitRecId &&
                            payrollPayStatementBenefitLine.IsEmployer == NoYes::No  &&
                            payrollPayStatementBenefitLine.IsMarkedForRemoval == NoYes::No;

                    payrollBenefitRegisterTmp.DeductionAmount += payrollPayStatementBenefitLine.AccountingCurrencyAmount;

                    // contribution amount
                    select sum(AccountingCurrencyAmount) from payrollPayStatementBenefitLine
                        where payrollPayStatementBenefitLine.PayStatement == payStatement.RecId &&
                            payrollPayStatementBenefitLine.Benefit == benefitRecId &&
                            payrollPayStatementBenefitLine.IsEmployer == NoYes::Yes  &&
                            payrollPayStatementBenefitLine.IsMarkedForRemoval == NoYes::No;

                    payrollBenefitRegisterTmp.ContributionAmount += payrollPayStatementBenefitLine.AccountingCurrencyAmount;
                }
            }
        }

        if (insertToTempTable)
        {
            //Insert the data for last benefit into temp table
            payrollBenefitRegisterTmp.insert();
            payrollBenefitRegisterTmp.clear();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///  process PayrollWorkerPaymentRegisterReport data.
    /// </summary>
    public void processReport()
    {
        PayrollBenefitRegisterContract  contract;

        contract = this.parmDataContract();

        if (contract)
        {
            fromPayPeriodRecId = contract.parmFromPayPeriodRecId();
            toPayPeriodRecId = contract.parmToPayPeriodRecId();
            payrollPayCycleRecId = contract.parmPayCycleRecId();
            printSSN = contract.parmPrintSSN();
            printEarningBasisDetail = contract.parmPrintEarningBasisDetail();
            printSummaryOrDetail = contract.parmPrintSummaryOrDetail();
            courtCaseId = contract.parmPrintCaseNumber();
        }

        this.prepareReportData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PayrollBenefitRegisterDP construct()
    {
        return new PayrollBenefitRegisterDP();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
