<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimLPCleanupContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    DataContractAttribute,
    SysOperationGroupAttribute('CleanupDateRangeGroup', "@SYS40", '1'),
    SysOperationGroupAttribute('InventoryDimensions', "@SYS53630", '2'),
    SysOperationContractProcessingAttribute(classstr(InventDimLPCleanupUIBuilder), SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly)
]
public class InventDimLPCleanupContract implements SysOperationValidatable, SysOperationInitializable
{
    public ToDate toDate;
    public InventSiteId inventSiteId;
    public InventLocationId inventLocationId;
    private NoYes updateRefTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute(identifierStr(ToDate)),
        SysOperationLabelAttribute(literalstr("@SCM:InventDimLPCleanUpEndDate")),
        SysOperationHelpTextAttribute(literalstr("@SCM:InventDimLPCleanUpEndDate")),
        SysOperationGroupMemberAttribute('CleanupDateRangeGroup'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateRefTable</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute(identifierStr(NoYes)),
        SysOperationLabelAttribute(literalstr("@SCM:InventDimLPCleanupUpdateRefTable")),
        SysOperationHelpTextAttribute(literalstr("@SCM:InventDimLPCleanupUpdateRefTableParmHelpText")),
        SysOperationGroupMemberAttribute('CleanupDateRangeGroup'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public NoYes parmUpdateRefTable(NoYes _updateRefTable = updateRefTable)
    {
        updateRefTable = _updateRefTable;
        return updateRefTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute(identifierStr(InventSiteId)),
        SysOperationLabelAttribute(literalstr("@SYS103211")),
        SysOperationHelpTextAttribute(literalstr("@SYS103211")),
        SysOperationGroupMemberAttribute('InventoryDimensions'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public InventSiteId parmInventSiteId(InventSiteId _inventSiteId = inventSiteId)
    {
        inventSiteId = _inventSiteId;
        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute(identifierStr(InventLocationId)),
        SysOperationLabelAttribute(literalstr("@SYS6437")),
        SysOperationHelpTextAttribute(literalstr("@SYS6437")),
        SysOperationGroupMemberAttribute('InventoryDimensions'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean ret = true;

         if (!toDate)
        {
            ret = checkFailed("@SYS90868");
        }

        if (inventSiteId && inventLocationId && InventLocation::find(inventLocationId).InventSiteId != inventSiteId)
        {
            ret = checkFailed(strFmt("SYS104861", inventLocationId, inventSiteId));
        }

        TransDate dateOfToday = DateTimeUtil::date(DateTimeUtil::utcNow());
        if (dateOfToday - toDate < this.minDaysForInventDimLPCleanupPeriod())
        {
            ret = checkFailed(strFmt("@SCM:InventDimLPCleanupPeriodShouldBeEarlierThanSpecifiedDays", this.minDaysForInventDimLPCleanupPeriod()));
        }

        ret = ret && this.warningInventDimLPCleanupJob();
        ret = ret && this.validateCheckForInventDimLPCleanup();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>warningInventDimLPCleanupJob</Name>
				<Source><![CDATA[
    private boolean warningInventDimLPCleanupJob()
    {
        if (Box::YesNo("@SCM:InventDimLPCleanupJobWarningV2", DialogButton::No) == DialogButton::No)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCheckForInventDimLPCleanup</Name>
				<Source><![CDATA[
    public boolean validateCheckForInventDimLPCleanup()
    {
        boolean ret = true;
        
        if (InventDimLPCleanupJob::existsNotFinishedInventDimLPCleanupJob())
        {
            ret = checkFailed("@SCM:InventDimLPCleanupAnotherJobNotFinished");
        }

        if (InventTransArchiveService::existsNotFinishedInventTransArchiving())
        {
            ret = checkFailed("@SCM:AnotherTransArchivingNotFinished");
        }
        
        if (InventTransArchivingReverse::existsAnotherInventTransArchivingReverseJobRunning())
        {
            ret = checkFailed("@SCM:AnotherTransArchivingReverseNotFinished");
        }

        if (InventDimLPCleanupService::existsInventUnusedDimCleanUpJobRunning())
        {
            ret = checkFailed("@SCM:InventUnusedDimCleanupJobNotFinished");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    public void initialize()
    {
        this.parmUpdateRefTable(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimLPCleanupContract construct()
    {
        return new InventDimLPCleanupContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>minDaysForInventDimLPCleanupPeriod</Name>
				<Source><![CDATA[
    public int minDaysForInventDimLPCleanupPeriod()
    {
        const int dayOfYear = 365;
        return dayOfYear;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>