<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventScrapStatementController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventReportStatementController</c> class is the helper class for the <c>InventScrapStatement</c>
///    report.
/// </summary>
class InventScrapStatementController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides ability to modify the report contract before dialog is shown to user.
    /// </summary>
    /// <remarks>
    /// Use this method to change the report contract, common use case is to add/change a Query Important
    /// note: This method is called only during interactive scenario, before rendering the UI to user. For
    /// batch scenario, we do not invoke this method, since there is no user interaction and contract
    /// values are already saved in batch.DO NOT instantiate any instance variables in this code if they
    /// are used during the lifetime of controller, since these will fail in batch cases.
    /// </remarks>
    protected void preRunModifyContract()
    {
        this.setRanges(this.getFirstQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the report query based on report contract.
    /// </summary>
    /// <param name="_query">
    /// The Query object.
    /// </param>
    private void setRanges(Query _query)
    {
        QueryBuildDataSource            qbds        = _query.dataSourceTable(tableNum(InventTrans));
        InventScrapStatementContract    contract    = this.getReportContract().parmRdpContract();

        findOrCreateRange_W(qbds, fieldNum(InventTrans, DateFinancial)).value(contract.parmFromDate() || contract.parmToDate()      ?
                                                                  SysQuery::range(contract.parmFromDate(), contract.parmToDate())   :
                                                                  '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLT00010, funcName());

        InventScrapStatementController   controller = new InventScrapStatementController();

        controller.parmReportName(ssrsReportStr(InventScrapStatement, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>