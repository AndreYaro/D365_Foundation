<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymFormatCtrl</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class CustVendPaymFormatCtrl
{
    private container exportClasses;
    private container importClasses;
    private container returnClasses;
    private container remittanceClasses;
    private container fileAnalyzeClasses;

    private Map interfaceNameMap;

    private FormListControl selectedListExport;
    private FormListControl selectedListImport;
    private FormListControl selectedListReturn;
    private FormListControl selectedListRemittance;
    private FormListControl selectedListFileAnalyze;

    private FormListControl notSelectedListExport;
    private FormListControl notSelectedListImport;
    private FormListControl notSelectedListReturn;
    private FormListControl notSelectedListRemittance;
    private FormListControl notSelectedListFileAnalyze;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allAvailableFormats</Name>
				<Source><![CDATA[
    public abstract container allAvailableFormats()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        #ISOCountryRegionCodes

        CustVendPaymModeClassId classId;
        className interFaceName;
        Counter i;
        container exportNames;
        container importNames;
        container returnNames;
        container remittanceNames;
        container fileAnalyzeNames;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            [exportClasses,
             exportNames,
             importClasses,
             importNames,
             returnClasses,
             returnNames,
             remittanceClasses,
             remittanceNames,
             fileAnalyzeClasses,
             fileAnalyzeNames] = this.allAvailableFormats();
        }
        else
        {
            [exportClasses,
             exportNames,
             importClasses,
             importNames,
             returnClasses,
             returnNames,
             remittanceClasses,
             remittanceNames] = this.allAvailableFormats();
        }

        interfaceNameMap = new Map(extendedTypeId2Type(extendedTypeNum(CustVendPaymModeClassId)), Types::String);

        for (i = 1; i <= conlen(exportClasses); i++)
        {
            classId = conpeek(exportClasses, i);
            interFaceName = conpeek(exportNames, i);
            interfaceNameMap.insert(classId, interFaceName);
        }

        for (i = 1; i <= conlen(importClasses); i++)
        {
            classId = conpeek(importClasses, i);
            interFaceName = conpeek(importNames, i);
            interfaceNameMap.insert(classId, interFaceName);
        }

        for (i = 1; i <= conlen(returnClasses); i++)
        {
            classId = conpeek(returnClasses, i);
            interFaceName = conpeek(returnNames, i);
            interfaceNameMap.insert(classId, interFaceName);
        }

        for (i = 1; i <= conlen(remittanceClasses); i++)
        {
            classId = conpeek(remittanceClasses, i);
            interFaceName = conpeek(remittanceNames, i);
            interfaceNameMap.insert(classId, interFaceName);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            for (i = 1; i <= conlen(fileAnalyzeClasses); i++)
            {
                classId = conpeek(fileAnalyzeClasses, i);
                interFaceName = conpeek(fileAnalyzeNames, i);
                interfaceNameMap.insert(classId, interFaceName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedFormats</Name>
				<Source><![CDATA[
    public abstract container selectedFormats(BankFormat bankFormat)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControls</Name>
				<Source><![CDATA[
    public void setControls(
        FormListControl _selectedListExport,
        FormListControl _notSelectedListExport,
        FormListControl _selectedListImport,
        FormListControl _notSelectedListImport,
        FormListControl _selectedListReturn,
        FormListControl _notSelectedListReturn,
        FormListControl _selectedListRemittance,
        FormListControl _notSelectedListRemittance,
        FormListControl _selectedListFileAnalyze = null,
        FormListControl _notSelectedListFileAnalyze = null)
    {
        #ISOCountryRegionCodes

        selectedListExport = _selectedListExport;
        notSelectedListExport = _notSelectedListExport;
        selectedListImport = _selectedListImport;
        notSelectedListImport = _notSelectedListImport;
        selectedListReturn = _selectedListReturn;
        notSelectedListReturn = _notSelectedListReturn;
        selectedListRemittance = _selectedListRemittance;
        notSelectedListRemittance = _notSelectedListRemittance;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            selectedListFileAnalyze = _selectedListFileAnalyze;
            notSelectedListFileAnalyze = _notSelectedListFileAnalyze;
        }

        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>availableSpecifications</Name>
				<Source><![CDATA[
    public static container availableSpecifications(ClassId custVendOutPaymClassId)
    {
        ClassId custVendOutPaymRecordRootClassId;
        CustVendOutPaymRecord custVendOutPaymRecord;
        container specClassIds;
        container specNames;
        container specHelpTxts;

        DictClass dictClass;
        CustVendOutPaym paymRecordObject;
        List listSpecifications;
        ListEnumerator listEnumerator;

        if (custVendOutPaymClassId)
        {
            paymRecordObject = new DictClass(custVendOutPaymClassId).makeObject();
        }

        if (paymRecordObject)
        {
            custVendOutPaymRecordRootClassId = paymRecordObject.custVendOutPaymRecordRootClassId();
        }

        if (custVendOutPaymRecordRootClassId == 0)
        {
            return [connull(), connull(), connull()];
        }

        listSpecifications = new DictClass(custVendOutPaymRecordRootClassId).extendedBy();
        listSpecifications.addStart(custVendOutPaymRecordRootClassId);

        listEnumerator = listSpecifications.getEnumerator();
        while (listEnumerator.moveNext())
        {
            dictClass = new DictClass(listEnumerator.current());

            if (dictClass && !dictClass.isAbstract())
            {
                custVendOutPaymRecord = dictClass.makeObject();

                if (custVendOutPaymRecord.interfaceName())
                {
                    specClassIds += dictClass.id();
                    specNames += dictClass.name();
                    specHelpTxts += custVendOutPaymRecord.interfaceName();
                }
            }
        }

        return [specClassIds, specNames, specHelpTxts];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkConfigurationKey</Name>
				<Source><![CDATA[
    public static boolean checkConfigurationKey(CustVendBankPaymFormat _format)
    {
        boolean ok;

        ok = (isConfigurationkeyEnabled(_format.configurationKey()));

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contruct</Name>
				<Source><![CDATA[
    public static CustVendPaymFormatCtrl contruct(ModuleCustVend _module)
    {
        CustVendPaymFormatCtrl paymFormatCtrl;

        switch (_module)
        {
            case ModuleCustVend::Cust:
                paymFormatCtrl = new CustPaymFormatCtrl();
                break;

            case ModuleCustVend::Vend:
                paymFormatCtrl = new VendPaymFormatCtrl();
                break;
        }

        return paymFormatCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>