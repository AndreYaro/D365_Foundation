<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ForecastImportPlanningDataContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ForecastDemandPlanImportDataContract</c> class contains the runtime parameters for forecast import.
/// </summary>
[
    DataContract,
    SysOperationGroup('GeneralGroup', "@SYS2952", '1'),
    SysOperationGroup('Performance', "@Talent:Performance", '2')
]
public final class ForecastImportPlanningDataContract extends SysOperationDataContractBase implements SysPackable
{
    private ForecastImportplanningDataBundleId bundleId;
    private TransDate forecastEnd;
    private TransDate forecastStart;
    private ForecastImportProcessNumberOfThreads numberOfThreads;
    private boolean isBatch;
    private ReqDemPlanForecastAttributeManager attributeManager;
    private DataAreaId dataAreaId;
    private ForecastModelId forecastModelId;
    private RefRecId batchId;
    private ForecastImportId forecastImportId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        forecastStart,
        forecastEnd,
        dataAreaId,
        bundleId,
        numberOfThreads,
        isBatch,
        batchId,
        forecastImportId,
        forecastModelId
    #endmacro
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmForecastImportId</Name>
				<Source><![CDATA[
    [
        DataMember,
        SysOperationGroupMember('GeneralGroup'),
        SysOperationLabel(literalStr("@ParallelizedForecastImport:ImportJobId")),
        SysOperationDisplayOrder('1')
    ]
    public ForecastImportId parmForecastImportId(ForecastImportId _forecastImportId = forecastImportId)
    {
        forecastImportId = _forecastImportId;
        return forecastImportId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastModelId</Name>
				<Source><![CDATA[
    [
        DataMember,
        SysOperationGroupMember('GeneralGroup'),
        SysOperationDisplayOrder('2')
    ]
    public ForecastModelId parmForecastModelId(ForecastModelId _forecastModelId = forecastModelId)
    {
        forecastModelId = _forecastModelId;
        return forecastModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataAreaId</Name>
				<Source><![CDATA[
    [
        DataMember,
        SysOperationGroupMember('GeneralGroup'),
        SysOperationDisplayOrder('3')
    ]
    public DataAreaId parmDataAreaId(DataAreaId _dataAreaId = dataAreaId)
    {
        dataAreaId = _dataAreaId;
        return dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastStart</Name>
				<Source><![CDATA[
    [
        DataMember,
        SysOperationGroupMember('GeneralGroup'),
        SysOperationLabel(literalStr("@SYS36679")),
        SysOperationDisplayOrder('4')
    ]
    public TransDate parmForecastStart(TransDate _forecastStart = forecastStart)
    {
        forecastStart = _forecastStart;
        return forecastStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastEnd</Name>
				<Source><![CDATA[
    [
        DataMember,
        SysOperationGroupMember('GeneralGroup'),
        SysOperationLabel(literalStr("@SYS36680")),
        SysOperationDisplayOrder('5')
    ]
    public TransDate parmForecastEnd(TransDate _forecastEnd = forecastEnd)
    {
        forecastEnd = _forecastEnd;
        return forecastEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberOfThreads</Name>
				<Source><![CDATA[
    [
        DataMember,
        SysOperationGroupMember('Performance'),
        SysOperationLabel(literalStr("@ParallelizedForecastImport:DegreeOfParallelism")),
        SysOperationDisplayOrder('1')
    ]
    public ForecastImportProcessNumberOfThreads parmNumberOfThreads(ForecastImportProcessNumberOfThreads _numberOfThreads = numberOfThreads)
    {
        numberOfThreads = _numberOfThreads;
        return numberOfThreads;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsBatch</Name>
				<Source><![CDATA[
    public boolean parmIsBatch(boolean _isBatch = isBatch)
    {
        isBatch = _isBatch;
        return isBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchId</Name>
				<Source><![CDATA[
    public RefRecId parmBatchId(RefRecId _batchId = batchId)
    {
        batchId = _batchId;
        return batchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBundleId</Name>
				<Source><![CDATA[
    public ForecastImportplanningDataBundleId parmBundleId(ForecastImportplanningDataBundleId _bundleId = bundleId)
    {
        bundleId = _bundleId;
        return bundleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#currentVersion, #currentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);
        boolean result  = false;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                result = true;
                break;

            default :
                result = false;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwIfNotValid</Name>
				<Source><![CDATA[
    public void throwIfNotValid()
    {
        if (forecastModelId == '')
        {
            throw error(strFmt("@DMP1188", dataAreaId));
        }

        changeCompany(dataAreaId)
        {
            // Validate that forecast model exists
            if (!ForecastModel::findForecastModelByName(forecastModelId))
            {
                throw error(strFmt("@DMP1189", forecastModelId, dataAreaId));
            }
     
            NumberSequenceReference demandForecastNumSeqRef = ReqParameters::numRefForecastDemandForecast();
            NumberSequenceTable numberSequenceTable = demandForecastNumSeqRef.numberSequenceTable();

            if (numberSequenceTable.Blocked || !this.validateNumberSequenceAllocation(numberSequenceTable))
            {
                throw error(strFmt("@ParallelizedForecastImport:NumberSequenceAllocationSettingsError", dataAreaId));
            }

            if (!this.validatePreallocationSettings(numberSequenceTable))
            {
                throw error(strFmt("@ParallelizedForecastImport:PreallocationSettingsError", dataAreaId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePreallocationSettings</Name>
				<Source><![CDATA[
    private boolean validatePreallocationSettings(NumberSequenceTable _numberSequenceTable)
    {
        NoYes isPreallocationEnabled = _numberSequenceTable.FetchAhead;
        int preallocationQty = _numberSequenceTable.FetchAheadQty;

        return isPreallocationEnabled && preallocationQty > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNumberSequenceAllocation</Name>
				<Source><![CDATA[
    private boolean validateNumberSequenceAllocation(NumberSequenceTable _numberSequenceTable)
    {
        int64 numberSequenceMaxAllowed = NumberSeq::highestV2(_numberSequenceTable.RecId);

        // We could get validation failures for continous number sequences that could fit the import
        // but they shouldn't be used for performance reasons.
        int64 usedNumberCount =  _numberSequenceTable.Extended ? _numberSequenceTable.NextRec64 : _numberSequenceTable.NextRec;
     
        int64 forecastSalesToImportCount = this.getForecastSalesToImportCount();

        int64 remainingNumbersToAllocate = numberSequenceMaxAllowed - usedNumberCount - forecastSalesToImportCount;

        return remainingNumbersToAllocate >= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForecastSalesToImportCount</Name>
				<Source><![CDATA[
    private int64 getForecastSalesToImportCount()
    {
        ForecastStagedImportPlanningDataEntry forecast;

        select count(RecId) from forecast
            where forecastStart <= forecast.ForecastStartDate
                && forecast.ForecastStartDate <= forecastEnd;

        return forecast.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>