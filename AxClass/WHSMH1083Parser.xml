<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMH1083Parser</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class WHSMH1083Parser implements WHSIBarcodeDataParser
{
    private str inputString;
    private int inputStringPosition;
    private int inputStringLength;

    private str groupSeparator;
    private str endOfTransmission;
    private str recordSeparator;

    private int messageCount;

    private UnknownNoYes isMH1083Data = UnknownNoYes::Unknown;

    private Map firstMessageTopHierarchyData;

    public static const str MH1083ParsingSetupPrefix = 'MH-';
    public static const str MH1083ComplianceIndicator = '[)>';
    
    private static const str MessageWithMH1082DataIdentifiers = '06';
    private static const int MaxMH1082DataIdentifierLength = 4;
    private static const str AllMH1082IdentifierCharacters = 'ABCDEFGHIJKLMNOPRQSTUVWXYZ';

    private WHSParameters whsParameters = WHSParameters::find();    

    private boolean identicalSeparatorsMode = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(str _inputString)
    {
        groupSeparator = whsParameters.GS1GroupSeparator ? whsParameters.GS1GroupSeparator : num2Char(0x1d);
        recordSeparator = whsParameters.BarcodeDataRecordSeparator ? whsParameters.BarcodeDataRecordSeparator : num2Char(0x1e);
        endOfTransmission = whsParameters.BarcodeDataEndOfTransmission ? whsParameters.BarcodeDataEndOfTransmission : num2Char(0x04);

        identicalSeparatorsMode = (groupSeparator == recordSeparator) && WHSMH1083ParserIdenticalSeparatorsFlight::instance().isEnabled();

        inputString = _inputString;
        inputStringPosition = 1;
        inputStringLength = strLen(_inputString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWithInputString</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSMH1083Parser newWithInputString(str _inputString)
    {
        return new WHSMH1083Parser(_inputString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canParseBarcodeData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canParseBarcodeData()
    {
        return this.isMH1083EncodedData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBarcodeData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Map getBarcodeData()
    {
        return this.firstMessageTopHierarchyData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMH1083EncodedData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isMH1083EncodedData()
    {
        if (isMH1083Data == UnknownNoYes::Unknown)
        {
            isMH1083Data = (this.determineIfMH1083EncodedData() == true ? UnknownNoYes::Yes : UnknownNoYes::No);
        }

        return (isMH1083Data == UnknownNoYes::Yes ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineIfMH1083EncodedData</Name>
				<Source><![CDATA[
    private boolean determineIfMH1083EncodedData()
    {
        if (identicalSeparatorsMode)
        {
            return strStartsWith(inputString, MH1083ComplianceIndicator + recordSeparator) && strEndsWith(inputString, recordSeparator + endOfTransmission);
        }

        return strStartsWith(inputString, MH1083ComplianceIndicator) && strEndsWith(inputString, endOfTransmission);
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstMessageTopHierarchyData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Map firstMessageTopHierarchyData()
    {
        if (!firstMessageTopHierarchyData)
        {
            this.parseEncodedData();
        }

        return firstMessageTopHierarchyData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseEncodedData</Name>
				<Source><![CDATA[
    // MH10.8.3 encodes data in two levels: envelope of messages and message itself
    // The envelope has this format (<RS> = Record Separator, <EOT> = End of transmission): [)><RS>message1<RS>message2<RS><EOT>
    // This method extracts the messages from the envelope and passes them on to be parsed
    private void parseEncodedData()
    {
        firstMessageTopHierarchyData = new Map(Types::String, Types::AnyType);

        if (!this.isMH1083EncodedData())
        {
            return;
        }

        List messages = this.splitEncodedData();
        ListEnumerator messagesEnum = messages.getEnumerator();

        // Skip the first <RS>, this is the one at position 4
        messagesEnum.moveNext();

        while (messagesEnum.moveNext())
        {
            str currentMessage = messagesEnum.current();

            if (currentMessage == endOfTransmission)
            {
                return;
            }

            messageCount++;
            this.parseMessage(messagesEnum.current());
        }

        throw error("@WAX:MH1083InvalidFormatExpectedEOTAfterLastRS");
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitEncodedData</Name>
				<Source><![CDATA[
    private List splitEncodedData()
    {
        List messages;

        if (identicalSeparatorsMode)
        {
            messages = new List(Types::String);

            int headerLen = strLen(MH1083ComplianceIndicator + groupSeparator);
            int footerLen = strLen(groupSeparator + endOfTransmission);
            
            messages.addEnd(MH1083ComplianceIndicator);
            messages.addEnd(subStr(inputString, headerLen + 1, inputStringLength - headerLen - footerLen));
            messages.addEnd(endOfTransmission);
        }
        else
        {
            messages = strSplit(inputString, recordSeparator);
        }
        
        return messages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseMessage</Name>
				<Source><![CDATA[
    // Each message starts with a two character format identifier and <GS> (Group Separator) character
    private void parseMessage(str _message)
    {
        // Currently, we only support decoding the first message
        if (messageCount > 1)
        {
            return;
        }

        str messageType = subStr(_message, 1, 2);

        switch (messageType)
        {
            case MessageWithMH1082DataIdentifiers:
                this.parseMessageWithMH1082DataIdentifiers(_message);
                break;
        }

        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseMessageWithMH1082DataIdentifiers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses a message with ANSI MH 10.8.2 data identifiers, which is a list of data elements separated by Group Separator character
    /// Each data element starts with a MH1082 data identifier, which consists of an optional number + 1 alpha character (K, 1P, 17D...)
    /// A special data identifier F specifies a hierarchy of data; if we hit that one, we stop parsing because we only support the top hierarchy so far
    /// </summary>
    private void parseMessageWithMH1082DataIdentifiers(str _message)
    {
        groupSeparator = subStr(_message, 3, 1);
        
        List dataElements = strSplit(_message, groupSeparator);
        ListEnumerator dataElementsEnum = dataElements.getEnumerator();

        dataElementsEnum.movenext();

        while (dataElementsEnum.moveNext())
        {
            str currentdataElement = dataElementsEnum.current();

            if (strStartsWith(currentdataElement, 'F'))
            {
                return;
            }

            this.parseDataElementWithMH1082DataIdentifier(currentdataElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseDataElementWithMH1082DataIdentifier</Name>
				<Source><![CDATA[
    private void parseDataElementWithMH1082DataIdentifier(str _dataElement)
    {
        int dataElementLen = strLen(_dataElement);

        int dataIdentifierCharacterPos = strFind(_dataElement, AllMH1082IdentifierCharacters, 1, MaxMH1082DataIdentifierLength);
        if (!dataIdentifierCharacterPos)
        {
            throw error(strFmt("@WAX:MH1083NoDataIdentifierLetterFound", AllMH1082IdentifierCharacters, MaxMH1082DataIdentifierLength, _dataElement));
        }

        str dataIdentifier = subStr(_dataElement, 1, dataIdentifierCharacterPos);
        
        WHSGS1ParsingSetup parsingSetup = this.findParsingSetupForMH1082DataIdentifier(dataIdentifier, _dataElement);

        if (!parsingSetup)
        {
            return;
        }
        
        int dataElementValueLen = dataElementLen - dataIdentifierCharacterPos;
        int dataElementValueStart = dataIdentifierCharacterPos + 1;

        if (parsingSetup.DataElementCodeLength)
        {
            dataElementValueLen -= parsingSetup.DataElementCodeLength;

            if (parsingSetup.DataElementCodeIdentifier)
            {
                str codeIdentifierEnd = subStr(_dataElement, (dataElementLen - parsingSetup.DataElementCodeLength) + 1, parsingSetup.DataElementCodeLength);
                firstMessageTopHierarchyData.insert(parsingSetup.DataElementCodeIdentifier, codeIdentifierEnd);
            }
        }
        
        str dataElementValue = subStr(_dataElement, dataElementValueStart, dataElementValueLen);

        switch (parsingSetup.Type)
        {
            case WHSGS1Type::Alfanumeric:
                firstMessageTopHierarchyData.insert(parsingSetup.Identifier, dataElementValue);
                break;

            case WHSGS1Type::Numeric:
                // All numeric fields need to include a decimal dot if decimals are used; does not use implied number of decimals
                firstMessageTopHierarchyData.insert(parsingSetup.Identifier, str2Num(dataElementValue));
                break;

            case WHSGS1Type::Date:                
                this.tryParseDateValueUsingFormat(parsingSetup.Identifier, dataElementValue, 'yyMMdd');
                break;

            case WHSGS1Type::DateCustom:
                this.tryParseDateValueUsingFormat(parsingSetup.Identifier, dataElementValue, parsingSetup.CustomDateFormat);
                break;
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryParseDateValueUsingFormat</Name>
				<Source><![CDATA[
    private void tryParseDateValueUsingFormat(WHSGS1Identifier _dataElementIdentifier, str _dataElementValue, str _dateFormat)
    {
        System.DateTime parsedDateTime;
        if (System.DateTime::TryParseExact(_dataElementValue, _dateFormat, null, System.Globalization.DateTimeStyles::None, byref parsedDateTime))
        {
            firstMessageTopHierarchyData.insert(_dataElementIdentifier, DateTimeUtil::date(parsedDateTime));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParsingSetupForMH1082DataIdentifier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a parsing setup for the data identifier. Some data identifiers include a part of the value as well, because it encodes a type or unit of some sort
    /// </summary>
    private WHSGS1ParsingSetup findParsingSetupForMH1082DataIdentifier(str _dataIdentifier, str _dataElementValue)
    {
        const str MainValuePlaceholder = '..';

        WHSGS1ParsingSetup parsingSetup;

        select parsingSetup
            where parsingSetup.Identifier == MH1083ParsingSetupPrefix + _dataIdentifier
               || parsingSetup.Identifier like MH1083ParsingSetupPrefix + _dataIdentifier + MainValuePlaceholder + '*';

        if (parsingSetup.Identifier == MH1083ParsingSetupPrefix + _dataIdentifier)
        {
            return parsingSetup;
        }

        while (parsingSetup)
        {
            container twoPartIdentifier = str2con(parsingSetup.Identifier, MainValuePlaceholder);
            if (conLen(twoPartIdentifier) == 2
                && strEndsWith(_dataElementValue, conPeek(twoPartIdentifier, 2)))
            {
                return parsingSetup;
            }

            next parsingSetup;
        }

        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>