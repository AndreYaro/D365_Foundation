<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveFinalizeReplenishment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveFinalizeReplenishment</c> class is responsible for making sure all
/// post replenishment wave processes are run.
/// </summary>
internal class WHSWaveFinalizeReplenishment extends RunBaseBatch implements BatchRetryable, SysErrorMessageHelpScopeIBatchProvider
{
    private WHSWaveId               waveId;
    private WHSWaveExecutionID      waveExecutionId;
    private WHSReleaseToWarehouseId releaseToWarehouseId;
    private WHSWaveStepRefRecId     currentRunningWaveStepRecId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        waveId,
        waveExecutionId,
        releaseToWarehouseId,
        currentRunningWaveStepRecId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSWaveFinalizeReplenishment construct()
    {
        return new WHSWaveFinalizeReplenishment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPostEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the parameters of the class based on the _postEngine parameters.
    /// </summary>
    /// <param name = "_postEngine">The post engine.</param>
    public void initFromPostEngine(WHSPostEngine _postEngine)
    {
        this.parmWaveId(_postEngine.parmWaveTable().WaveId);
        this.parmWaveExecutionId(_postEngine.parmWaveExecutionId());
        this.parmReleaseToWarehouseId(_postEngine.parmReleaseToWarehouseId());
        this.parmCurrentRunningWaveStep(_postEngine.parmCurrentRunningWaveStep());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentRunningWaveStep</Name>
				<Source><![CDATA[
    public WHSWaveStepRefRecId parmCurrentRunningWaveStep(WHSWaveStepRefRecId _currentRunningWaveStep = currentRunningWaveStepRecId)
    {
        currentRunningWaveStepRecId = _currentRunningWaveStep;

        return currentRunningWaveStepRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseToWarehouseId</Name>
				<Source><![CDATA[
    public WHSReleaseToWarehouseId parmReleaseToWarehouseId(WHSReleaseToWarehouseId _releaseToWarehouseId = releaseToWarehouseId)
    {
        releaseToWarehouseId = _releaseToWarehouseId;

        return releaseToWarehouseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveExecutionId</Name>
				<Source><![CDATA[
    public WHSWaveExecutionID parmWaveExecutionId(WHSWaveExecutionID _waveExecutionId = waveExecutionId)
    {
        waveExecutionId = _waveExecutionId;

        return waveExecutionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveId</Name>
				<Source><![CDATA[
    public WHSWaveId parmWaveId(WHSWaveId _waveId = waveId)
    {
        waveId = _waveId;

        return waveId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupErroredWave</Name>
				<Source><![CDATA[
    private void cleanupErroredWave()
    {
        var waveProcessingDataCleanup = WHSWaveProcessingDataCleanup::newForWaveExecution(waveId, waveExecutionId);
        waveProcessingDataCleanup.parmWaveCleanupType('FinalReplenishmentStep');
        waveProcessingDataCleanup.cleanupErroredWave();
    }

]]></Source>
			</Method>
			<Method>
				<Name>notifyOnWaveExecutionFailure</Name>
				<Source><![CDATA[
    private void notifyOnWaveExecutionFailure()
    {
        WHSWaveTable erroredWaveTable = WHSWaveTable::find(waveId);
        str infologText = infolog.text();

        WhsWaveNotificationManager::instance().handleNotificationsOnWaveExecuted(erroredWaveTable, waveExecutionId, 0, infologText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureWaveProcessContinues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a batch job to run waves steps after replenishment.
    /// </summary>
    private void ensureWaveProcessContinues()
    {
        var nextWaveStepTaskCreator = WHSNextWaveStepTaskCreator::newStandard(waveId, waveExecutionId, currentRunningWaveStepRecId, releaseToWarehouseId);

        if (!nextWaveStepTaskCreator.createTask())
        {
            throw error("@WAX:WaveNextBatchTaskCreationError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServer(this))
        {
            WHSWaveTable waveTable = WHSWaveTable::findEnsureRecordIsReadInsideTTS(waveId);

            using (var perfTask = WHSInstrumentationWaveProcessingPerformanceTask::newFinalizeReplenishment(waveTable, waveExecutionId, funcName()))
            {
                try
                {
                    ttsbegin;

                    WHSWaveStepController lockedControlRecord = WHSWaveStepController::createAndLockControlRecord(waveId, waveExecutionId, classStr(WHSWaveFinalizeReplenishment), waveTable.InventLocationId);
                
                    this.runFinalReplenishmentOperation(waveTable);
                    this.ensureWaveProcessContinues();
                
                    lockedControlRecord.delete();

                    ttscommit;
                }
                catch
                {
                    // okay to have general catch here because we assume tts level 0, and we do not throw the error, we just log.
                    this.cleanupErroredWave();

                    if (appl.ttsLevel() != 0)
                    {
                        WHSInstrumentationWaveReplenishmentPerformanceTask::logWaveFinalizeReplenishmentError(
                            "@WAX:WaveProcessingFinalReplenishmentStepUnexpectedErrorTTSNotZero",
                            waveTable.RecId,
                            waveExecutionId,
                            releaseToWarehouseId,
                            currentRunningWaveStepRecId);

                        // this should never happen because this is the finalize batch task for the replenishment step
                        throw error("@WAX:WaveProcessingFinalReplenishmentStepUnexpectedErrorTTSNotZero");
                    }

                    WHSInstrumentationWaveReplenishmentPerformanceTask::logWaveFinalizeReplenishmentError(
                            "@WAX:WaveProcessingFinalReplenishmentStepUnexpectedError",
                            waveTable.RecId,
                            waveExecutionId,
                            releaseToWarehouseId,
                            currentRunningWaveStepRecId);

                    error("@WAX:WaveProcessingFinalReplenishmentStepUnexpectedError");

                    this.notifyOnWaveExecutionFailure();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFinalReplenishmentOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes replenishment logic that cannot be threaded.
    /// </summary>
    /// <param name = "_waveTable">The wave record.</param>
    private void runFinalReplenishmentOperation(WHSWaveTable _waveTable)
    {
        WHSWaveProcessingStatus::findOrCreateFromWave(_waveTable);

        WHSWaveMethodStatus::createOrUpdateWaveMethodStatus(_waveTable.WaveId,
                                                        methodStr(WHSPostEngineBase, replenish),
                                                        false,
                                                        0,  // RecId of parent status record.
                                                        1,  // Executed Steps
                                                        1); // Total Number of steps
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@WAX:WavePostReplenishmentBatchJobDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchInfo</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public BatchInfo batchInfo()
    {
        BatchInfo ret = super();

        ret.parmRetryable(false);
        ret.parmRetriesOnFailure(0);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The form name used for the error context.</returns>
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return strFmt('%1_%2', formStr(Dialog), classStr(WhsWaveExecute));
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The action name used for the error context.</returns>
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return menuItemActionStr(WHSWaveExecute);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>