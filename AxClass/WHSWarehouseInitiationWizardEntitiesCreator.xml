<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWarehouseInitiationWizardEntitiesCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSWarehouseInitiationWizardEntitiesCreator
{
    private readonly WHSWarehouseInitiationWizardEntitiesCreationSummaryBuilder summaryBuilder = WHSWarehouseInitiationWizardEntitiesCreationSummaryBuilder::construct();
    
    private WHSWarehouseInitiationWizardEntitiesCreatorMode mode;
    private WHSWarehouseInitiationWizardContext context;

    public WHSWorkTransType packedConatinerWorkTransType = WHSWorkTransType::PackedContainerPicking;
    public WHSWorkTransType sortedInventoryWorkTransType = WHSWorkTransType::SortedInventoryPicking;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFrom</Name>
				<Source><![CDATA[
    public static WHSWarehouseInitiationWizardEntitiesCreator newFrom(
        WHSWarehouseInitiationWizardEntitiesCreatorMode _mode,
        WHSWarehouseInitiationWizardContext _context)
    {
        WHSWarehouseInitiationWizardEntitiesCreator creator = new WHSWarehouseInitiationWizardEntitiesCreator();
        creator.mode = _mode;
        creator.context = _context;
        return creator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEntities</Name>
				<Source><![CDATA[
    public void createEntities()
    {
        ttsbegin;

        this.createDefaultEntities();
        
        if (context.isSalesStagingEnabled)
        {
            this.createSalesStagingEntities();
        }

        if (context.isPackingBeforeShippingEnabled && context.isPackWaveContainerCheckBoxEnabled)
        {
            this.createPackingInNotSelectedEntities();
        }

        if (context.isPackingBeforeShippingEnabled && context.isManualPackingCheckBoxEnabled)
        {
            this.createManualPackingEntities();
        }

        if (context.isStagingEnabled)
        {
            this.createStagingEntities();
        }

        this.createFinalShippingEntities();
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSummary</Name>
				<Source><![CDATA[
    // Items' type is WHSWarehouseInitiationWizardSummaryItem
    public SetEnumerator buildSummary()
    {
        return summaryBuilder.build();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultEntities</Name>
				<Source><![CDATA[
    private void createDefaultEntities()
    {
        
        SetEnumerator warehouseIdsEnumerator = this.warehouseIds();
        while (warehouseIdsEnumerator.moveNext())
        {
            InventLocationId warehouseId = warehouseIdsEnumerator.current();
            InventLocation warehouse = InventLocation::find(warehouseId);

            WHSLocDirHintCode salesFinalPutDirectiveCode;
            WHSWorkClassId salesFinalPutWorkClassID;
            WHSWorkClassId stagingWorkClassId = context.soStagingWorkClassId;
            WHSLocDirHintCode dircode = context.stagingDirectiveCode;
           
            if(context.isSalesStagingEnabled)
            {
                stagingWorkClassId = context.salesStagingWorkClassId;
                dircode = context.salesStagingDirectiveCode;
            }
            if(context.isManualPackingCheckBoxEnabled)
            {
                salesFinalPutDirectiveCode = context.packingDirectiveCode;
                salesFinalPutWorkClassID = context.workClassToPackStation;
            }
            else
            {
                salesFinalPutDirectiveCode = context.finalShippingDirectiveCode;
                salesFinalPutWorkClassID = context.soFinalShippingWorkClassId;
            }

            if (context.salesWorkTemplateCode)
            {
                WHSWarehouseInitiationWizardShippingWorkTemplateCreator::newFrom(
                        mode,
                        summaryBuilder,
                        context.salesWorkTemplateCode,
                        context.outboundWorkTransType,
                        context.isStagingEnabled,
                        stagingWorkClassId,
                        salesFinalPutWorkClassID,
                        dircode,
                        salesFinalPutDirectiveCode,
                        context.isManualPackingCheckBoxEnabled,
                        context.isSalesStagingEnabled,
                        warehouseId,
                        context.warehouseIds,
                        context.warehouseGroupId,
                        context.warehouseSelection)
                    .create();
            }

            if (context.shippingWaveTemplateName)
            {
                WHSWarehouseInitiationWizardWaveTemplateCreator::newFrom(
                        mode,
                        summaryBuilder,
                        context.shippingWaveTemplateName,
                        WHSWaveTemplateType::Shipping,
                        warehouse.InventSiteId,
                        warehouseId,
                        context.warehouseSelection,
                        context.warehouseGroupId,
                        context.waveStepCode,
                        context.isPackWaveContainerCheckBoxEnabled)
                    .create();
            }
            
            if (context.soPickLocationDirectiveName)
            {
                WHSWarehouseInitiationWizardLocationDirectiveCreator::newFrom(
                        mode,
                        summaryBuilder,
                        context.soPickLocationDirectiveName,
                        WHSWorkType::Pick,
                        context.outboundWorkTransType,
                        null, 
                        null,
                        warehouse.InventSiteId,
                        warehouseId,
                        WhsLocationDirectiveScope::SingleItem,
                        context.warehouseSelection,
                        context.warehouseGroupId)
                    .create();
            }
            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesStagingEntities</Name>
				<Source><![CDATA[
    private void createSalesStagingEntities()
    {
        WHSParameters whsParameters = WHSParameters::find();

        WHSWarehouseInitiationWizardDirectiveCodeCreator::newFrom(
                mode,
                summaryBuilder,
                context.salesStagingDirectiveCode)
            .create();

        WHSWarehouseInitiationWizardWorkClassCreator::newFrom(
                mode,
                summaryBuilder,
                context.salesStagingWorkClassId,
                context.outboundWorkTransType,
                whsParameters.StageLocType)
            .create();

        SetEnumerator warehouseIdsEnumerator = this.warehouseIds();
        while (warehouseIdsEnumerator.moveNext())
        {
            InventLocationId warehouseId = warehouseIdsEnumerator.current();
            InventLocation warehouse = InventLocation::find(warehouseId);

            WHSWarehouseInitiationWizardLocationCreator::newFrom(
                    mode,
                    summaryBuilder,
                    context.salesStagingLocationId,
                    whsParameters.StageLocType,
                    warehouseId)
                .create();

            WHSWarehouseInitiationWizardLocationDirectiveCreator::newFrom(
                    mode,
                    summaryBuilder,
                    context.salesPutStagingLocationDirectiveName,
                    WHSWorkType::Put,
                    context.outboundWorkTransType,
                    whsParameters.StageLocType,
                    context.salesStagingDirectiveCode,
                    warehouse.InventSiteId,
                    warehouseId,
                    WhsLocationDirectiveScope::All,
                    context.warehouseSelection,
                    context.warehouseGroupId)
                .create();
        }
       
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPackingInNotSelectedEntities</Name>
				<Source><![CDATA[
    private void createPackingInNotSelectedEntities()
    {
        WHSParameters whsParameters = WHSParameters::find();

        WHSWarehouseInitiationWizardContainerTypeAndGroupCreator::newFromParameters(
                mode,
                summaryBuilder,
                context.selectedTypes,
                Context.groupName)
            .create();

        WHSWarehouseInitiationWizardContainerBuildTempCreator::newFrom(
                mode,
                summaryBuilder,
                context.containerBuildTemplateCode,
                context.waveStepCode,
                Context.groupName)
            .create();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createManualPackingEntities</Name>
				<Source><![CDATA[
    private void createManualPackingEntities()
    {
        WHSParameters whsParameters = WHSParameters::find();
        
        WHSWarehouseInitiationWizardDirectiveCodeCreator::newFrom(
                mode,
                summaryBuilder,
                context.packingDirectiveCode)
            .create();
        
        WHSWarehouseInitiationWizardWorkClassCreator::newFrom(
                mode,
                summaryBuilder,
                context.workClassToPackStation,
                context.outboundWorkTransType,
                whsParameters.PackingLocationType)
            .create();

        SetEnumerator warehouseIdsEnumerator = this.warehouseIds();
        while (warehouseIdsEnumerator.moveNext())
        {
            InventLocationId warehouseId = warehouseIdsEnumerator.current();
            InventLocation warehouse = InventLocation::find(warehouseId);

            WHSWarehouseInitiationWizardLocationCreator::newFrom(
                    mode,
                    summaryBuilder,
                    context.packLocation,
                    whsParameters.PackingLocationType,
                    warehouseId)
                .create();
            
            WHSWarehouseInitiationWizardLocationDirectiveCreator::newFrom(
                        mode,
                        summaryBuilder,
                        context.salesPutLocDir,
                        WHSWorkType::Put,
                        context.outboundWorkTransType,
                        whsParameters.PackingLocationType,
                        context.packingDirectiveCode,
                        warehouse.InventSiteId,
                        warehouseId,
                        WhsLocationDirectiveScope::MultiItem,
                        context.warehouseSelection,
                        context.warehouseGroupId)
                    .create();

        }
        
        this.createManualPackingContainerPlaceAfterReleaseEntities();

    }

]]></Source>
			</Method>
			<Method>
				<Name>createManualPackingContainerPlaceAfterReleaseEntities</Name>
				<Source><![CDATA[
    private void createManualPackingContainerPlaceAfterReleaseEntities()
    {
        WHSParameters whsParameters = WHSParameters::find();
        WHSWarehouseContainerClosingWorkCreationProcess creationProces = this.setContainerClosingWorkCreationProcess();
        
        if (context.isAvailableAtFinalShipping)
        {
            SetEnumerator warehouseIdsEnumerator = this.warehouseIds();
            while (warehouseIdsEnumerator.moveNext())
            {
                InventLocationId warehouseId = warehouseIdsEnumerator.current();
                InventLocation warehouse = InventLocation::find(warehouseId);

                WHSWarehouseInitiationWizardContainerProfileCreator::newFrom(
                    mode,
                    summaryBuilder,
                    context.containerPackingPolicy,
                    context.packingProfileId,
                    context.wHSContainerTypeUnitId,
                    creationProces,
                    context.packingFinalShippingLocationId,
                    context.selectedTypes,
                    warehouseId,
                    context.warehouseGroupId,
                    context.warehouseSelection,
                    context.isAvailableAtSortingLoc,
                    context.sortLocation)
                .create();
            }
        }
        else if (context.isCreateWork)
        {
            SetEnumerator warehouseIdsEnumerator = this.warehouseIds();
            while (warehouseIdsEnumerator.moveNext())
            {
                InventLocationId warehouseId = warehouseIdsEnumerator.current();
                InventLocation warehouse = InventLocation::find(warehouseId);

                WHSWarehouseInitiationWizardContainerProfileCreator::newFrom(
                    mode,
                    summaryBuilder,
                    context.containerPackingPolicy,
                    context.packingProfileId,
                    context.wHSContainerTypeUnitId,
                    creationProces,
                    context.packingFinalShippingLocationId,
                    context.selectedTypes,
                    warehouseId,
                    context.warehouseGroupId,
                    context.warehouseSelection,
                    context.isAvailableAtSortingLoc,
                    context.sortLocation)
                .create();

                if (context.packStationWorkTempName)
                {
                    WHSWarehouseInitiationWizardPackingWorkTemplateCreator::newFrom(
                        mode,
                        summaryBuilder,
                        context.packStationWorkTempName,
                        packedConatinerWorkTransType,
                        context.packingFinalShippingWorkClassId,
                        context.finalShippingDirectiveCode,
                        context.isStagingEnabled,
                        context.soStagingWorkClassId,
                        context.stagingDirectiveCode,
                        warehouseId,
                        context.warehouseIds,
                        context.warehouseGroupId,
                        context.warehouseSelection)
                    .create();
                }
            }
        }
        else if (context.isAvailableAtSortingLoc)
        {
            SetEnumerator warehouseIdsEnumerator = this.warehouseIds();
            while (warehouseIdsEnumerator.moveNext())
            {
                InventLocationId warehouseId = warehouseIdsEnumerator.current();
                InventLocation warehouse = InventLocation::find(warehouseId);
                
                WHSWarehouseInitiationWizardContainerProfileCreator::newFrom(
                    mode,
                    summaryBuilder,
                    context.containerPackingPolicy,
                    context.packingProfileId,
                    context.wHSContainerTypeUnitId,
                    creationProces,
                    context.packingFinalShippingLocationId,
                    context.selectedTypes,
                    warehouseId,
                    context.warehouseGroupId,
                    context.warehouseSelection,
                    context.isAvailableAtSortingLoc,
                    context.sortLocation)
                .create();

                WHSWarehouseInitiationWizardOutboundSortTemplateCreator::newFrom(
                        mode,
                        summaryBuilder,
                        context.outboundSortTemp,
                        warehouseId,
                        context.warehouseIds,
                        context.warehouseGroupId,
                        context.warehouseSelection,
                        context.isMoveSortedContainersCreateWork,
                        context.sortLocation)
                    .create();
                
                WHSWarehouseInitiationWizardLocationCreator::newFrom(
                    mode,
                    summaryBuilder,
                    context.sortLocation,
                    whsParameters.SortingLocationType,
                    warehouseId)
                .create();

                if (context.isMoveSortedContainersCreateWork)
                {
                    WHSWarehouseInitiationWizardPackingWorkTemplateCreator::newFrom(
                        mode,
                        summaryBuilder,
                        context.sortingWorkTemplateName,
                        sortedInventoryWorkTransType,
                        context.sortingFinalShippingWorkClassId,
                        context.finalShippingDirectiveCode,
                        context.isStagingEnabled,
                        context.soStagingWorkClassId,
                        context.stagingDirectiveCode,
                        warehouseId,
                        context.warehouseIds,
                        context.warehouseGroupId,
                        context.warehouseSelection)
                    .create();
                }

            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStagingEntities</Name>
				<Source><![CDATA[
    private void createStagingEntities()
    {
        WHSParameters whsParameters = WHSParameters::find();

        WHSWarehouseInitiationWizardDirectiveCodeCreator::newFrom(
                mode,
                summaryBuilder,
                context.stagingDirectiveCode)
            .create();
        
        WHSWorkTransType workTransType = this.getWorkTransType();

        WHSWarehouseInitiationWizardWorkClassCreator::newFrom(
                mode,
                summaryBuilder,
                context.soStagingWorkClassId,
                workTransType,
                whsParameters.StageLocType)
            .create();

        SetEnumerator warehouseIdsEnumerator = this.warehouseIds();
        while (warehouseIdsEnumerator.moveNext())
        {
            InventLocationId warehouseId = warehouseIdsEnumerator.current();
            InventLocation warehouse = InventLocation::find(warehouseId);

            WHSWarehouseInitiationWizardLocationCreator::newFrom(
                    mode,
                    summaryBuilder,
                    context.stagingLocationId,
                    whsParameters.StageLocType,
                    warehouseId)
                .create();

            WHSWarehouseInitiationWizardLocationDirectiveCreator::newFrom(
                    mode,
                    summaryBuilder,
                    context.soPutStagingLocationDirectiveName,
                    WHSWorkType::Put,
                    workTransType,
                    whsParameters.StageLocType,
                    context.stagingDirectiveCode,
                    warehouse.InventSiteId,
                    warehouseId,
                    WhsLocationDirectiveScope::All,
                    context.warehouseSelection,
                    context.warehouseGroupId)
                .create();
        }
       
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFinalShippingEntities</Name>
				<Source><![CDATA[
    private void createFinalShippingEntities()
    {
        WHSParameters whsParameters = WHSParameters::find();
        
        if(context.isManualPackingCheckBoxEnabled && context.isAvailableAtFinalShipping)
        {
            SetEnumerator warehouseIdsEnumerator = this.warehouseIds();
            while (warehouseIdsEnumerator.moveNext())
            {
                InventLocationId warehouseId = warehouseIdsEnumerator.current();
                InventLocation warehouse = InventLocation::find(warehouseId);

                WHSWarehouseInitiationWizardLocationCreator::newFrom(
                    mode,
                    summaryBuilder,
                    context.packingFinalShippingLocationId,
                    whsParameters.ShipFinalLocType,
                    warehouseId)
                .create();

            }
            return;
        }

        if(context.isManualPackingCheckBoxEnabled && context.isAvailableAtSortingLoc && !context.isMoveSortedContainersCreateWork)
        {
            context.soFinalShippingWorkClassId = context.sortingFinalShippingWorkClassId;
            context.soPutFinalShippingLocationDirectiveName = context.sortingPutFinalShippingLocationDirectiveName;

            if(!context.isMoveSortedContainersCreateWork)
            {
                SetEnumerator warehouseIdsEnumerator = this.warehouseIds();
                while (warehouseIdsEnumerator.moveNext())
                {
                    InventLocationId warehouseId = warehouseIdsEnumerator.current();
                    InventLocation warehouse = InventLocation::find(warehouseId);

                    WHSWarehouseInitiationWizardLocationCreator::newFrom(
                    mode,
                    summaryBuilder,
                    context.sortingFinalShippingLocationId,
                    whsParameters.ShipFinalLocType,
                    warehouseId)
                .create();

                }
                return;
            }
        }
        else if(context.isManualPackingCheckBoxEnabled && context.isAvailableAtSortingLoc)
        {
            context.soFinalShippingWorkClassId = context.sortingFinalShippingWorkClassId;
            context.soPutFinalShippingLocationDirectiveName = context.sortingPutFinalShippingLocationDirectiveName;
        }
        else if(context.isManualPackingCheckBoxEnabled)
        {
            context.soFinalShippingWorkClassId = context.packingFinalShippingWorkClassId;
            context.soPutFinalShippingLocationDirectiveName = context.packingPutFinalShippingLocationDirectiveName;
        }

        
        WHSWorkTransType workTransType = this.getWorkTransType();

        WHSWarehouseInitiationWizardDirectiveCodeCreator::newFrom(
                mode,
                summaryBuilder,
                context.finalShippingDirectiveCode)
            .create();
        
        WHSWarehouseInitiationWizardWorkClassCreator::newFrom(
                mode,
                summaryBuilder,
                context.soFinalShippingWorkClassId,
                workTransType,
                whsParameters.ShipFinalLocType)
            .create();

        SetEnumerator warehouseIdsEnumerator = this.warehouseIds();
        while (warehouseIdsEnumerator.moveNext())
        {
            InventLocationId warehouseId = warehouseIdsEnumerator.current();
            InventLocation warehouse = InventLocation::find(warehouseId);

            WHSWarehouseInitiationWizardLocationCreator::newFrom(
                    mode,
                    summaryBuilder,
                    context.finalShippingLocationId,
                    whsParameters.ShipFinalLocType,
                    warehouseId)
                .create();

            WHSWarehouseInitiationWizardLocationDirectiveCreator::newFrom(
                    mode,
                    summaryBuilder,
                    context.soPutFinalShippingLocationDirectiveName,
                    WHSWorkType::Put,
                    workTransType,
                    whsParameters.ShipFinalLocType,
                    context.finalShippingDirectiveCode,
                    warehouse.InventSiteId,
                    warehouseId,
                    WhsLocationDirectiveScope::All,
                    context.warehouseSelection,
                    context.warehouseGroupId)
                .create();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>warehouseIds</Name>
				<Source><![CDATA[
    private SetEnumerator warehouseIds()
    {
        if (context.warehouseIds.empty())
        {
            this.fillWarehouseIds();
        }
        return context.warehouseIds.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillWarehouseIds</Name>
				<Source><![CDATA[
    private void fillWarehouseIds()
    {
        Set selectedWarehouseIds = new Set(Types::String);

        if(context.warehouseSelection == WhsWarehouseGroupAll::All)
        {
            InventLocation inventLocation;
            while select inventLocationId from inventLocation
                where inventLocation.WHSEnabled == NoYes::Yes
            {
                selectedWarehouseIds.add(inventLocation.InventLocationId);
            }
            
        }
        else if(context.warehouseSelection == WhsWarehouseGroupAll::Group)
        {
            WhsWarehouseGroupLink whsWarehouseGroupLink;
            while select InventLocationId from whsWarehouseGroupLink
                where whsWarehouseGroupLink.WarehouseGroupId == context.warehouseGroupId
            {
                selectedWarehouseIds.add(whsWarehouseGroupLink.InventLocationId);
            }
        }
        context.warehouseIds = selectedWarehouseIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContainerClosingWorkCreationProcess</Name>
				<Source><![CDATA[
    private WHSWarehouseContainerClosingWorkCreationProcess setContainerClosingWorkCreationProcess()
    {
        WHSWarehouseContainerClosingWorkCreationProcess creationProces;
        
        if(context.isAvailableAtFinalShipping)
        {
            creationProces = WHSWarehouseContainerClosingWorkCreationProcess::None;
        }
        else if(context.isCreateWork)
        {
            creationProces = WHSWarehouseContainerClosingWorkCreationProcess::Automatic;
        }
        else
        {
            creationProces = WHSWarehouseContainerClosingWorkCreationProcess::AssignContainerToSortPosition;
        }
        
        return creationProces;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkTransType</Name>
				<Source><![CDATA[
    private WHSWorkTransType getWorkTransType()
    {
        WHSWorkTransType workType;
        
        if(context.isAvailableAtSortingLoc)
        {
            workType = sortedInventoryWorkTransType;
        }
        else if(context.isManualPackingCheckBoxEnabled)
        {
            workType = packedConatinerWorkTransType;
        }
        else
        {
            workType = context.outboundWorkTransType;
        }
        
        return workType;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>