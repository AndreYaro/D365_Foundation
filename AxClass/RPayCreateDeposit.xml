<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayCreateDeposit</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class RPayCreateDeposit
{
    NumberSeq                   numberSeq;
    NumberSequenceCode          numberSequenceCode;
    Voucher                     voucherNum;
    LedgerVoucher               ledgerVoucher;
    TransactionTxt              transactionTxt;
    RPaySheetTable              rPaySheetTable;
    boolean                     reverseTrans;
    RPayPaymentParameters       rPayPaymentParameters;
    RPayParameters              rPayParameters;
    FormDataSource              rPaySheetTable_ds;
    RPayAmount                  paySheetDepositAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTotalAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcTotalAmount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBeforePosting</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkBeforePosting()
    {
        if (! rPayParameters.OffsetAccountPostingProfile)
        {
            throw error("@RUP2662");
        }

        if (!rPayPaymentParameters.DepositLedgerDimension)
        {
           throw error("@RUP694");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createTrans()
    {
        LedgerVoucherObject      ledgerVoucherObject;
        LedgerBondClient_RU      ledgerBondClient;
        LedgerVoucherTransObject ledgerVoucherTransObject;
        RPayTitleposting         rpayTitleposting;

        rPayPaymentParameters   = RPayPaymentParameters::find();
        rPayParameters          = RPayParameters::find();

        this.calcTotalAmount();

        if (! paySheetDepositAmount)
        {
            throw error("@SYS25907");
        }

        this.checkBeforePosting();

        this.newVoucher();

        this.initTransactionTxt(reverseTrans  ? LedgerTransTxt::PayDepositTrans_RU : LedgerTransTxt::PayDepositTrans_RU);

        if (this.initLedgerVoucher())
        {
            ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucherNum,
                                                                  rPaySheetTable.PaySheetDateTo,
                                                                  SysModule::Payroll,
                                                                  LedgerTransType::Payroll);
            ledgerVoucherObject.parmDocument(rPaySheetTable.PayPeriod,rPaySheetTable.PaySheetNum);
            ledgerVoucher.addVoucher(ledgerVoucherObject);
            ledgerBondClient = ledgerVoucherObject.ledgerBondClient_RU();
            if (ledgerBondClient)
            {
                ledgerBondClient.addNewLogObject();
            }

            rpayTitleposting = RPayTitleposting::findAccount(rPayParameters.OffsetAccountPostingProfile, '', '', '', 0);

            ledgerVoucherTransObject = LedgerVoucherTransObject::newBasicDefault(ledgerVoucherObject,
                                                                                LedgerPostingType::PayrollDebitAccount,
                                                                                LedgerDimensionFacade::serviceCreateLedgerDimension(rpayTitleposting.LedgerDimension, rpayTitleposting.DefaultDimension),
                                                                                CompanyInfoHelper::standardCurrency(),
                                                                                paySheetDepositAmount,
                                                                                paySheetDepositAmount,
                                                                                paySheetDepositAmount);
            ledgerVoucherTransObject.parmSourceTableId(rPaySheetTable.TableId);
            ledgerVoucherTransObject.parmSourceRecId(rPaySheetTable.RecId);

            ledgerVoucherTransObject.parmTransTxt(transactionTxt.txt());
            ledgerVoucherObject.addTrans(ledgerVoucherTransObject);
            ledgerVoucherTransObject = LedgerVoucherTransObject::newBasicDefault(ledgerVoucherObject,
                                                                                LedgerPostingType::PayrollCreditAccount,
                                                                                rPayPaymentParameters.DepositLedgerDimension,
                                                                                CompanyInfoHelper::standardCurrency(),
                                                                                - paySheetDepositAmount,
                                                                                - paySheetDepositAmount,
                                                                                - paySheetDepositAmount);
            ledgerVoucherTransObject.parmSourceTableId(rPaySheetTable.TableId);
            ledgerVoucherTransObject.parmSourceRecId(rPaySheetTable.RecId);
            ledgerVoucherTransObject.parmTransTxt(transactionTxt.txt());
            ledgerVoucherObject.addTrans(ledgerVoucherTransObject);

            if (ledgerBondClient)
            {
                ledgerBondClient.bondLastVRef2CurrentLog();
                ledgerBondClient.removeCurrentLogObject();
            }

            ledgerVoucher.end();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean  initLedgerVoucher()
    {
        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail,
                                                     SysModule::Payroll,
                                                     numberSeq.parmNumberSequenceCode());

        if (!ledgerVoucher)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransactionTxt</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void  initTransactionTxt(LedgerTransTxt  _ledgerTransTxt)
    {
        transactionTxt = TransactionTxt::construct(_ledgerTransTxt);
        transactionTxt.setType          (_ledgerTransTxt);
        transactionTxt.setLanguage      (CompanyInfo::languageId());
        transactionTxt.setVoucher       (voucherNum);
        transactionTxt.setFormLetter    (rPaySheetTable.PaySheetNum);
        transactionTxt.setKey1          (rPaySheetTable.PaySheetNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(Common _rPaySheetTable,
                    FormDataSource _rPaySheetTable_ds)
    {
        rPaySheetTable    = _rPaySheetTable;
        rPaySheetTable_ds = _rPaySheetTable_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void  newVoucher()
    {
        numberSeq = NumberSeq::newGetVoucher(RPayParameters::numRefDepositVoucher(),true);
        if (numberSeq)
        {
            voucherNum = numberSeq.voucher();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPayCreateDeposit   rPayCreateDeposit;

        switch (args.dataset())
        {
            case tablenum(RPaySheetTable):
                rPayCreateDeposit = new RPayCreateDeposit_Table(args.record(),FormDataUtil::getFormDataSource(args.record()));
                break;

            case tablenum(RPaySheetTrans):
                rPayCreateDeposit = new RPayCreateDeposit_Trans(args.record(),FormDataUtil::getFormDataSource(args.record()));
                break;

            case tablenum(RPayDepositTable):
                rPayCreateDeposit = new RPayCreateDeposit_DepositTable(args.record(), FormDataUtil::getFormDataSource(args.record()));
                break;

            default:
                throw error("@SYS18232");
        }

        rPayCreateDeposit.createTrans();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>