<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResRecordTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EcoResRecordTemplate</c> class is the specialized version of the
/// <c>SysRecordTemplate</c> class that is responsible for setting the product from the product templates.
/// </summary>
public final class EcoResRecordTemplate extends SysRecordTemplate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResRecordTemplate construct()
    {
        return new EcoResRecordTemplate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCached</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if there are cached values for the template.
    /// </summary>
    /// <returns>true if cache was found; Otherwise false</returns>
    protected boolean isCached()
    {
        SysGlobalCache cache    = classFactory.globalCache();
        container      result   = cache.get(classstr(SysRecordTemplate), '', connull());
        container      tableValue;
        tableId        cachedTableId;
        RefTableId     concreteTableId = SysDictTable::getConcreteTable(common);

        if (result)
        {
            for (int templateConIdx=1; templateConIdx <= conlen(result); templateConIdx++)
            {
                tableValue = conpeek(result, templateConIdx);
                #SysTableNameIdConv(conpeek(tableValue, 1), cachedTableId)
                //Look for template corresponding to concrete table in the cache
                if (cachedTableId == concreteTableId)
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTemplateValuesForTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets template values from cache container depending on table Id of current record.
    /// </summary>
    /// <param name = "_recordTemplateValues">A cache container with template values.</param>
    /// <returns>A value from cache container.</returns>
    protected container getTemplateValuesForTable(container _recordTemplateValues)
    {
        container   tableValue;
        RefTableId  cachedTableId;
        RefTableId  concreteTableId = SysDictTable::getConcreteTable(common);

        if (_recordTemplateValues)
        {
            for (int templateConIdx = 1; templateConIdx <= conlen(_recordTemplateValues); templateConIdx++)
            {
                tableValue = conpeek(_recordTemplateValues, templateConIdx);
                #SysTableNameIdConv(conpeek(tableValue, 1), cachedTableId)
                
                if (cachedTableId == concreteTableId)
                {
                    return conpeek(tableValue, 2);
                }
            }
        }

        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFromCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove template values from cache container after it was processed.
    /// </summary>
    /// <param name = "_recordTemplateValues">A cache container with template values.</param>
    /// <returns>A cache container.</returns>
    protected container removeFromCache(container _recordTemplateValues)
    {
        container   ret = _recordTemplateValues;
        container   tableValue;
        RefTableId  cachedTableId;
        RefTableId  concreteTableId = SysDictTable::getConcreteTable(common);

        if (_recordTemplateValues)
        {
            for (int templateConIdx = 1; templateConIdx <= conlen(_recordTemplateValues); templateConIdx++)
            {
                tableValue = conpeek(_recordTemplateValues, templateConIdx);
                #SysTableNameIdConv(conpeek(tableValue, 1), cachedTableId)
                
                if (cachedTableId == concreteTableId)
                {
                    ret = conDel(ret, templateConIdx, 1);
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>