<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayAverageEarnEngine_Vacation</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayAverageEarnEngine_Vacation extends RPayAverageEarnEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateNow</Name>
				<Source><![CDATA[
    public void calculateNow()
    {
        if (rPayAverageEarnEmplPeriodTable.PrevVacationStartDate)
        {
            this.updateAverageEarnTrans_Previous();
        }
        else
        {
            super();
        }

        this.updateAverageEarnValue();
        formController.refreshDatasources();
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check()
    {
        boolean ret;
        ;
        ret  = super();

        if (! rPayAverageEarnEmplPeriodTable.StartDate)
        {
            ret = checkFailed("@GLS105833");
        }

        if (ret && rPayAverageEarnEmplPeriodTable.VacationRecordType == RPayVacationRecordType::VacationBreaking)
        {
            if (! rPayAverageEarnEmplPeriodTable.PrevVacationStartDate)
            {
                ret = checkFailed("@RUP2445");
            }
        }

        if (ret && rPayAverageEarnEmplPeriodTable.PrevVacationStartDate)
        {
            if (rPayAverageEarnEmplPeriodTable.VacationRecordType == RPayVacationRecordType::Vacation &&
                rPayAverageEarnEmplPeriodTable.previousVacation().EndDate > rPayAverageEarnEmplPeriodTable.StartDate)
            {
                ret = checkFailed("@RUP2446");
            }

            if (rPayAverageEarnEmplPeriodTable.VacationRecordType == RPayVacationRecordType::VacationBreaking)
            {
                if (rPayAverageEarnEmplPeriodTable.previousVacation().EndDate   < rPayAverageEarnEmplPeriodTable.EndDate ||
                    rPayAverageEarnEmplPeriodTable.previousVacation().StartDate > rPayAverageEarnEmplPeriodTable.StartDate)
                {
                    ret = checkFailed("@RUP2447");
                }
            }
        }

        if (ret && rPayAverageEarnEmplPeriodTable.VacationRecordType != RPayVacationRecordType::VacationCompensation)
        {
            if (ret && rPayAverageEarnEmplPeriodTable.DayNumber)
            {
                ret = this.checkEndDate();
            }
            else
            {
                if (rPayAverageEarnEmplPeriodTable.EndDate)
                {
                    ret = this.checkEndDate();
                }
                else
                {
                    ret = checkFailed("@GLS105835");
                }
            }
        }

        if (ret && !rPayAverageEarnEmplPeriodTable.VacationTypeId)
        {
            ret = checkFailed("@GLS106574");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCalendar</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkCalendar(RPayCalendarId _rPayCalendarId, StartDate _startDate, EndDate _endDate)
    {
        RPayCalendarDate    rPayCalendarDate;
        Counter             qty;
        boolean             ret = true;
        ;

        select count(RecId) from rPayCalendarDate
            where rPayCalendarDate.CalendarId == _rPayCalendarId      &&
                  rPayCalendarDate.TransDate  >= _startDate           &&
                  rPayCalendarDate.TransDate  <= _endDate;

        qty = int642int(rPayCalendarDate.RecId);

        if (qty < (_endDate - _startDate + 1))
        {
            ret = checkFailed(strFmt("@RUP517", enum2str(rPayAverageEarnEmplPeriodTable.rPayWeekDuration)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEndDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkEndDate()
    {
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodLocal;
        TransLink_RU                   transLink;

        if (rPayAverageEarnEmplPeriodTable.VacationRecordType == RPayVacationRecordType::Vacation)
        {
            while select rPayAverageEarnEmplPeriodLocal
                where rPayAverageEarnEmplPeriodLocal.EmplId               == emplTable.EmployeeId                                   &&
                      rPayAverageEarnEmplPeriodLocal.AverageEarnCodeType  == rPayAverageEarnEmplPeriodTable.AverageEarnCodeType &&
                      rPayAverageEarnEmplPeriodLocal.RecId                != rPayAverageEarnEmplPeriodTable.RecId               &&
                      rPayAverageEarnEmplPeriodLocal.StartDate            <= rPayAverageEarnEmplPeriodTable.EndDate             &&
                      rPayAverageEarnEmplPeriodLocal.EndDate              >= rPayAverageEarnEmplPeriodTable.StartDate           &&
                      rPayAverageEarnEmplPeriodLocal.VacationRecordType   == RPayVacationRecordType::Vacation
                #transLinkNotExistsReversed_RU(transLink, rPayAverageEarnEmplPeriodLocal)
            {
                if (rPayAverageEarnEmplPeriodLocal)
                {
                    return checkFailed(strFmt("@RUP501", "@RUP536"));
                }
            }
        }

        if (rPayAverageEarnEmplPeriodTable.VacationRecordType == RPayVacationRecordType::VacationBreaking)
        {
            select firstonly rPayAverageEarnEmplPeriodLocal
                where rPayAverageEarnEmplPeriodLocal.EmplId                == emplTable.EmployeeId                                     &&
                      rPayAverageEarnEmplPeriodLocal.AverageEarnCodeType   == rPayAverageEarnEmplPeriodTable.AverageEarnCodeType   &&
                      rPayAverageEarnEmplPeriodLocal.RecId                 != rPayAverageEarnEmplPeriodTable.RecId                 &&
                      rPayAverageEarnEmplPeriodLocal.PrevVacationStartDate == rPayAverageEarnEmplPeriodTable.PrevVacationStartDate &&
                      rPayAverageEarnEmplPeriodLocal.VacationRecordType    == RPayVacationRecordType::VacationBreaking             &&
                      rPayAverageEarnEmplPeriodLocal.StartDate             <= rPayAverageEarnEmplPeriodTable.EndDate               &&
                      rPayAverageEarnEmplPeriodLocal.EndDate               >= rPayAverageEarnEmplPeriodTable.StartDate
                #transLinkNotExistsReversed_RU(transLink, rPayAverageEarnEmplPeriodLocal);

            if (rPayAverageEarnEmplPeriodLocal)
            {
                return checkFailed(strFmt("@RUP501", "@RUP2408"));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAverageEarnTransDialog</Name>
				<Source><![CDATA[
    public void createAverageEarnTransDialog()
    {
        super();

        if (formcontroller.isRPayAverageEarnValueDsExists())
        {
            this.updateAverageEarnValue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRPayDayHour</Name>
				<Source><![CDATA[
    protected RPayDayHour getRPayDayHour(TransDate _fromDate, TransDate _toDate)
    {
        return RPayAverageEarnEngine_Vacation::numDaysBetweenDates(rPayCalendarId,
                                                                   _fromDate,
                                                                   _toDate,
                                                                   rPayAverageEarnEmplPeriodTable.VacationTypeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVacationIntervals</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getVacationIntervals()
    {
        RPayAverageEarnEmplPeriodTable payAverageEarnEmplPeriodTable;
        TransLink_RU                   transLink;
        container                      intervals;
        int                            i;
        StartDate                      startDateLocal, startDateBreaking;
        EndDate                        endDateLocal, endDateBreaking;

        startDateLocal = rPayAverageEarnEmplPeriodTable.StartDate;

        while select StartDate, EndDate from payAverageEarnEmplPeriodTable order by StartDate
            where payAverageEarnEmplPeriodTable.EmplId                == rPayAverageEarnEmplPeriodTable.EmplId    &&
                  payAverageEarnEmplPeriodTable.PrevVacationStartDate == rPayAverageEarnEmplPeriodTable.StartDate &&
                  payAverageEarnEmplPeriodTable.AverageEarnCodeType   == RPayAverageEarnCodeType::Vacation        &&
                  payAverageEarnEmplPeriodTable.VacationRecordType    == RPayVacationRecordType::VacationBreaking
        #transLinkNotExistsReversed_RU(transLink, payAverageEarnEmplPeriodTable)
        {
            if (payAverageEarnEmplPeriodTable.StartDate - 1 > endDateBreaking)
            {
                startDateBreaking = payAverageEarnEmplPeriodTable.StartDate;
                if (startDateLocal < startDateBreaking)
                {
                    i++;
                    endDateLocal = payAverageEarnEmplPeriodTable.StartDate - 1;
                    intervals = conPoke(intervals, i, [startDateLocal, endDateLocal]);
                }
            }
            endDateBreaking = payAverageEarnEmplPeriodTable.EndDate;
            startDateLocal  = payAverageEarnEmplPeriodTable.EndDate + 1;
        }

        endDateLocal = rPayAverageEarnEmplPeriodTable.EndDate;

        if (endDateLocal >= startDateLocal)
        {
            i++;
            intervals = conPoke(intervals, i, [startDateLocal, endDateLocal]);
        }

        return intervals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPreviousVacation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromPreviousVacation()
    {
        RPayAverageEarnEmplPeriodTable payAverageEarnEmplPeriodTable;
        RPayVacationRecordType         vacationRecordType;
        ;

        payAverageEarnEmplPeriodTable = rPayAverageEarnEmplPeriodTable.previousVacation();
        vacationRecordType            = rPayAverageEarnEmplPeriodTable.VacationRecordType;

        if (payAverageEarnEmplPeriodTable)
        {
            buf2Buf(payAverageEarnEmplPeriodTable, rPayAverageEarnEmplPeriodTable);
            rPayAverageEarnEmplPeriodTable.PrevVacationStartDate = payAverageEarnEmplPeriodTable.StartDate;
            rPayAverageEarnEmplPeriodTable.VacationRecordType    = vacationRecordType;

            if (vacationRecordType == RPayVacationRecordType::Vacation)
            {
                rPayAverageEarnEmplPeriodTable.StartDate = payAverageEarnEmplPeriodTable.EndDate + 1;
            }

            rPayAverageEarnEmplPeriodTable.EndDate   = dateNull();
            rPayAverageEarnEmplPeriodTable.Included  = NoYes::No;
            rPayAverageEarnEmplPeriodTable.DayNumber = 0;
            rPayAverageEarnEmplPeriodTable.PayPeriod = dateNull();
            rPayAverageEarnEmplPeriodTable.SumOnHand = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymentFundTrans</Name>
				<Source><![CDATA[
    protected RPayAverageEarnTrans initPaymentFundTrans(ReportPeriod_RU _currentPeriod)
    {
        RPayDayHour             regDayHour;
        RPayAmount              payAmount;
        RPayRateValue           increaseIncome;
        RPayAverageEarnTrans    rPayAverageEarnTrans;
        RPayTrans               payTrans;
        RPayFundMember          payFundMember;
        RPayHistory             payHistory, payHistoryIndex;
        RHRMGradeScaleTable     rhrmGradeScaleTable, rhrmGradeScaleTableOld;
        RHRMStaffListHistory    rhrmStaffListHistory, rhrmStaffListHistoryOld;
        RHRMGradeScaleLine      rhrmGradeScaleLine;
        RPayRateTrans           rPayRateTrans;
        RPayTblTrans            payTblTrans;
        RPayTblJournal          payTblJournal;
        RPayTblRateCode         payTblRateCode;
        int                     i;
        RPayAmount              emplWage;
        boolean                 indexedAmount, setWage;
        RPayRateCallContext     callContext;

        while select SourceTableId, SourceRecId, Amount from payTrans
            order by PayPeriod, Emplid, PayCtype
            where payTrans.SourceDate == _currentPeriod &&
                  payTrans.Emplid     == emplTable.EmployeeId
        exists join payFundMember
            where payFundMember.CounterUnit == rPayAverageEarnEmplPeriodTable.ActuallyFund &&
                  payFundMember.PayCostType == payTrans.PayCtype
        {
            indexedAmount = false;
            setWage       = false;

            if (payTrans.SourceTableId == tableNum(RPayTblTrans))
            {
                select firstonly payTblTrans
                    where payTblTrans.TableId == payTrans.SourceTableId &&
                          payTblTrans.RecId   == payTrans.SourceRecId;

                payTblJournal = payTblTrans.rpayTblJournal();

                payTblRateCode = payTblJournal.PayRate;

                for (i = 1; i <= dimOf(payTblRateCode); i++)
                {
                    if (payTblRateCode[i] == emplTable.WageRate)
                    {
                        emplWage = payTblTrans.Stavka[i];
                        setWage  = true;
                        break;
                    }
                }

                if (!setWage)
                {
                    callContext = new RPayRateCallContext();
                    callContext.parmRateDate(payTblTrans.SourceDate);
                    callContext.parmEmployeeId(emplTable.EmployeeId);
                    emplWage = RPayRateTable::find(emplTable.WageRate).getValue(callContext);
                }

                if (emplWage)
                {
                    select firstonly payHistory order by StartDate desc
                        where payHistory.Number            == emplTable.EmployeeId            &&
                             (payHistory.OperationType     == RHRMJournalType::Transfer       ||
                              payHistory.OperationType     == RHRMJournalType::Receive)       &&
                              payHistory.HcmTitle          == payTblTrans.HcmTitle            &&
                              payHistory.HrmOrganizationId == payTblJournal.HrmOrganizationId &&
                              payHistory.StartDate         <= payTblTrans.SourceDate
                        join RecId from rPayRateTrans
                        order by RateDate desc
                        where rPayRateTrans.PayRate    == emplTable.WageRate                &&
                              rPayRateTrans.LineType   == RPayRateType::Employee            &&
                              rPayRateTrans.RateTypeAC == emplTable.EmployeeId              &&
                              rPayRateTrans.RateValue  == num2str(emplWage,0,16,1,0)        &&
                              rPayRateTrans.RateDate   == payHistory.StartDate;

                    if (payHistory)
                    {
                        if (payHistory.hrmStaffListRefRecId)
                        {
                            rhrmStaffListHistoryOld = RHRMStaffListHistory::findLast(payHistory.hrmStaffListRefRecId, payHistory.StartDate);
                            rhrmStaffListHistory    = RHRMStaffListHistory::findLast(payHistory.hrmStaffListRefRecId, rPayAverageEarnEmplPeriodTable.StartDate);

                            if (rhrmStaffListHistoryOld.GradeScaleId && rhrmStaffListHistory.GradeScaleId)
                            {
                                rhrmGradeScaleTableOld = RHRMGradeScaleTable::findActive(rhrmStaffListHistoryOld.GradeScaleId, rhrmStaffListHistoryOld.StartDate);
                                rhrmGradeScaleTable    = RHRMGradeScaleTable::findActive(rhrmStaffListHistory.GradeScaleId   , rPayAverageEarnEmplPeriodTable.StartDate);

                                if (rhrmStaffListHistory.GradeScaleId == rhrmStaffListHistoryOld.GradeScaleId)
                                {
                                    rhrmGradeScaleLine  = RHRMGradeScaleLine::find(rhrmGradeScaleTable.GradeScaleId, rhrmGradeScaleTable.StartDate, payHistory.GradeId);

                                    if (rhrmGradeScaleLine)
                                    {
                                        indexedAmount = true;
                                        payAmount += payTrans.Amount * rhrmGradeScaleLine.wage() / emplWage;
                                    }
                                    else
                                    {
                                        if (rhrmStaffListHistoryOld.MaxGradeId == rhrmStaffListHistoryOld.MinGradeId &&
                                            rhrmStaffListHistory.MaxGradeId == rhrmStaffListHistory.MinGradeId)
                                        {
                                            rhrmGradeScaleLine  = RHRMGradeScaleLine::find(rhrmGradeScaleTable.GradeScaleId, rhrmGradeScaleTable.StartDate, rhrmStaffListHistory.MaxGradeId);
                                            indexedAmount = true;
                                            if (rhrmGradeScaleLine)
                                            {
                                                payAmount += payTrans.Amount * rhrmGradeScaleLine.wage() / emplWage;
                                            }
                                        }
                                        else
                                        {
                                            indexedAmount = true;
                                            payAmount += payTrans.Amount * rhrmGradeScaleTable.FirstGradeWage / rhrmGradeScaleTableOld.FirstGradeWage;
                                        }
                                    }
                                }
                                else
                                {
                                    indexedAmount = true;
                                    payAmount += payTrans.Amount * rhrmGradeScaleTable.FirstGradeWage / rhrmGradeScaleTableOld.FirstGradeWage;
                                }
                            }
                            else
                            {
                                indexedAmount = true;
                                payAmount += payTrans.Amount * rhrmStaffListHistory.MaxWage / rhrmStaffListHistoryOld.MaxWage;
                            }
                        }
                        else
                        {
                            select firstonly payHistoryIndex order by StartDate desc
                                where payHistoryIndex.Number                     == payHistory.Number                        &&
                                      payHistoryIndex.OperationType              == RHRMJournalType::Transfer                &&
                                      payHistoryIndex.HcmTitle                   == payHistory.HcmTitle                      &&
                                      payHistoryIndex.HrmOrganizationId          == payHistory.HrmOrganizationId             &&
                                      payHistoryIndex.StartDate                  <= rPayAverageEarnEmplPeriodTable.StartDate &&
                                      payHistoryIndex.StartDate                  >  payHistory.StartDate                     &&
                                      payHistoryIndex.TransferWithoutTermChanges == NoYes::Yes;

                            if (payHistoryIndex && payHistoryIndex.wage() > 0)
                            {
                                indexedAmount = true;
                                payAmount += payTrans.Amount * payHistoryIndex.wage() / emplWage;
                            }
                        }
                    }
                }
            }

            if (! indexedAmount)
            {
                payAmount += payTrans.Amount;
            }
        }

        if (! payAmount)
            return rPayAverageEarnTrans;

        regDayHour = this.getFullMonthDay(_currentPeriod,rPayAverageEarnEmplPeriodTable.RpayAverageFullMonthCalcType);

        if (! regDayHour)
        {
            return rPayAverageEarnTrans;
        }

        rPayAverageEarnTrans.clear();
        rPayAverageEarnTrans.PayPeriod                  = _currentPeriod;
        rPayAverageEarnTrans.AverageEarnEmplPeriodRecId = rPayAverageEarnEmplPeriodTable.RecId;
        rPayAverageEarnTrans.rPayAverageSourceType      = RPayAverageSourceType::PaymentFund;

        callContext = new RPayRateCallContext();
        callContext.parmRateDate(_currentPeriod);
        callContext.parmEmployeeId(emplTable.EmployeeId);
        callContext.parmCriterion(payAmount);

        increaseIncome = RPayRateTable::find(rPayAverageEarnEmplPeriodTable.RiseFactor).getValue(callContext);
        if (increaseIncome)
        {
            payAmount = payAmount * increaseIncome;
        }

        rPayAverageEarnTrans.Amount = payAmount;
        if (this.ifEmplWorkFullMonth(_currentPeriod))
        {
            rPayAverageEarnTrans.rPayDayHour = regDayHour;
        }
        else
        {
            rPayAverageEarnTrans.rPayDayHour = this.getPartMonthDay(_currentPeriod);
        }
        rPayAverageEarnTrans.insert();

        return rPayAverageEarnTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAverageEarnValue</Name>
				<Source><![CDATA[
    protected void insertAverageEarnValue(RPayAverageSourceType _rPayAverageSourceType, Amount _avgRate)
    {
        RPayAverageEarnValue rPayAverageEarnValue;

        if (rPayAverageEarnEmplPeriodTable.VacationRecordType == RPayVacationRecordType::VacationCompensation)
        {
            rPayAverageEarnValue.AverageEarnEmplPeriodRecid = rPayAverageEarnEmplPeriodTable.RecId;
            rPayAverageEarnValue.PayPeriod                  = endmth(rPayAverageEarnEmplPeriodTable.StartDate);
            rPayAverageEarnValue.PayDayHour                 = rPayAverageEarnEmplPeriodTable.DayNumber;

            if (rPayAverageEarnEmplPeriodTable.rPayDayHourCalc == RPayDayHourCalc::Hour)
            {
                rPayAverageEarnValue.PayDayHour = rPayAverageEarnValue.PayDayHour * (rPpayAverageEarnParameters.WeekDuration /
                                                                                    (rPayAverageEarnEmplPeriodTable.rPayWeekDuration == RPayWeekDuration::SixDays ? #weekWorkDay : #weekCalendarDay));
            }
            rPayAverageEarnValue.PayAverageSourceType = _rPayAverageSourceType;
            rPayAverageEarnValue.AverageRate          = _avgRate;
            rPayAverageEarnValue.Amount               = CurrencyExchangeHelper::amount(rPayAverageEarnValue.AverageRate * rPayAverageEarnValue.PayDayHour);
            rPayAverageEarnValue.insert();
        }
        else
        {
            super(_rPayAverageSourceType, _avgRate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAverageEarnTrans_Previous</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateAverageEarnTrans_Previous()
    {
        RPayAverageEarnTrans           rPayAverageEarnTrans;
        RecordInsertList               averageEarnTransList = new RecordInsertList(tableNum(RPayAverageEarnTrans));
        RPayAverageEarnEmplPeriodTable previousAverageEarnEmplPeriodTable = rPayAverageEarnEmplPeriodTable.previousVacation();
        ;

        if (! this.check())
        {
            return;
        }

        ttsbegin;

        delete_from rPayAverageEarnTrans
            where rPayAverageEarnTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId;

        while select rPayAverageEarnTrans
            where rPayAverageEarnTrans.AverageEarnEmplPeriodRecId == previousAverageEarnEmplPeriodTable.RecId
        {
            rPayAverageEarnTrans.AverageEarnEmplPeriodRecId = rPayAverageEarnEmplPeriodTable.RecId;
            averageEarnTransList.add(rPayAverageEarnTrans);
        }

        averageEarnTransList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEndDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean updateEndDate()
    {
        TransDate transDate;
        Days      dayNumber;
        ;

        if (rPayAverageEarnEmplPeriodTable.VacationRecordType == RPayVacationRecordType::VacationCompensation)
        {
            return true;
        }

        if (rPayAverageEarnEmplPeriodTable.DayNumber)
        {
            transDate = RPayAverageEarnEngine_Vacation::setEndDate(rPayCalendarId, rPayAverageEarnEmplPeriodTable.StartDate, rPayAverageEarnEmplPeriodTable.DayNumber, rPayAverageEarnEmplPeriodTable.VacationTypeId);
            dayNumber = rPayAverageEarnEmplPeriodTable.DayNumber;
        }
        else
        {
            if (rPayAverageEarnEmplPeriodTable.EndDate)
            {
                dayNumber = RPayAverageEarnEngine_Vacation::numDaysBetweenDates(rPayCalendarId, rPayAverageEarnEmplPeriodTable.StartDate, rPayAverageEarnEmplPeriodTable.EndDate, rPayAverageEarnEmplPeriodTable.VacationTypeId);
                this.checkCalendar(rPayCalendarId, rPayAverageEarnEmplPeriodTable.StartDate, rPayAverageEarnEmplPeriodTable.EndDate);
                transDate = rPayAverageEarnEmplPeriodTable.EndDate;
            }
        }

        if (transDate != dateNull())
        {
            rPayAverageEarnEmplPeriodTable.EndDate   = transDate;
            rPayAverageEarnEmplPeriodTable.DayNumber = dayNumber;
        }
        else
        {
            return checkFailed(strFmt("@RUP517", enum2str(rPayAverageEarnEmplPeriodTable.rPayWeekDuration)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVacationValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateVacationValue()
    {
        RPayAverageEarnValue rPayAverageEarnValue;
        if (formController.isRPayAverageEarnValueDsExists())
        {
            rPayAverageEarnValue = formController.getRPayAverageEarnValueCursor();
            rPayAverageEarnValue.AverageRate = this.calcAverageAmount(rPayAverageEarnValue.PayAverageSourceType);
            rPayAverageEarnValue.Amount      = CurrencyExchangeHelper::amount(rPayAverageEarnValue.AverageRate * rPayAverageEarnValue.PayDayHour);
            formController.researchRPayAverageEarValue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vacDaysBetweenDates</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Days vacDaysBetweenDates(StartDate _startDate, EndDate _endDate)
    {
        StartDate                       startDate;
        EndDate                         endDate;
        Days                            ret;
        RPayAverageEarnEmplPeriodTable  payAverageEarnEmplPeriodTable;
        TransLink_RU                    transLink;

        ret = RPayAverageEarnEngine_Vacation::numDaysBetweenDates(rPayCalendarId, _startDate, _endDate, rPayAverageEarnEmplPeriodTable.VacationTypeId);

        while select StartDate, EndDate, VacationTypeId from payAverageEarnEmplPeriodTable
            where payAverageEarnEmplPeriodTable.EmplId                == rPayAverageEarnEmplPeriodTable.EmplId              &&
                  payAverageEarnEmplPeriodTable.PrevVacationStartDate == rPayAverageEarnEmplPeriodTable.StartDate           &&
                  payAverageEarnEmplPeriodTable.AverageEarnCodeType   == rPayAverageEarnEmplPeriodTable.AverageEarnCodeType &&
                  payAverageEarnEmplPeriodTable.VacationRecordType    == RPayVacationRecordType::VacationBreaking
            #transLinkNotExistsReversed_RU(transLink, payAverageEarnEmplPeriodTable)
        {
            startDate =  max(_startDate, payAverageEarnEmplPeriodTable.StartDate);
            endDate   =  min(_endDate, payAverageEarnEmplPeriodTable.EndDate);
            ret       -= RPayAverageEarnEngine_Vacation::numDaysBetweenDates(rPayCalendarId, startDate, endDate, payAverageEarnEmplPeriodTable.VacationTypeId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numDaysBetweenDates</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static int numDaysBetweenDates(RPayCalendarId _rPayCalendarId, StartDate _startDate, EndDate _endDate, RHRMVacationTypeId _vacationTypeId)
    {
        RHRMVacationType  vacationType;
        RPayCalendarDate  rPayCalendarDate;
        ;

        select count(RecId) from rPayCalendarDate
            where rPayCalendarDate.CalendarId == _rPayCalendarId &&
                  rPayCalendarDate.TransDate  >= _startDate      &&
                  rPayCalendarDate.TransDate  <= _endDate
            exists join vacationType
                where vacationType.VacationTypeId == _vacationTypeId &&
                     (rPayCalendarDate.PayDayType == RPayDayType::WorkDay ||
                     (rPayCalendarDate.PayDayType == RPayDayType::Holiday &&
                      vacationType.IncludeHolidays));

        if (rPayCalendarDate.RecId)
        {
            return any2int(rPayCalendarDate.RecId);
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEndDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TransDate setEndDate(RPayCalendarId _rPayCalendarId, StartDate _startDate, int _dateNum, RHRMVacationTypeId _vacationTypeId)
    {
        RHRMVacationType  vacationType;
        RPayCalendarDate  rPayCalendarDate;
        int               i;
        ;

        while select TransDate from rPayCalendarDate index CalendarDateIdx
            where rPayCalendarDate.CalendarId == _rPayCalendarId      &&
                  rPayCalendarDate.TransDate  >= _startDate
             exists join vacationType
                where vacationType.VacationTypeId == _vacationTypeId &&
                     (rPayCalendarDate.PayDayType == RPayDayType::WorkDay ||
                     (rPayCalendarDate.PayDayType == RPayDayType::Holiday &&
                      vacationType.IncludeHolidays))
        {
            i++;
            if (i == _dateNum)
            {
                break;
            }
        }

        if (i == _dateNum)
        {
            return rPayCalendarDate.TransDate;
        }

        return dateNull();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
