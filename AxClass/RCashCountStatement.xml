<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rCashCountStatement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Outputs unified form INV 15 to excel
/// </summary>
public class rCashCountStatement extends RCashReport_ExcelBase implements BatchRetryable
{
    TmpRCashCountStatementTable sourceTable;
    TransDate todate;
    int statementNum;
    AccountNum cashAccount;
    boolean printRCashName;

    protected const int FirstMemberLine = 53;
    protected const str CompanyNameCell = 'A6';
    protected const str CompanyOKPOCell = 'CJ6';
    protected const str CompanyOKDPCell = 'CJ11';
    protected const str StatementNumCell = 'BF18';
    protected const str TransDateCell_1 = 'CC18';
    protected const str TransDateCell_2 = 'BH20';
    protected const str OfficialsTitleCell = 'AN26';
    protected const str OfficialsTitleNameCell = 'CE26';
    protected const str AmountCountedCashCell = 'AA30';
    protected const str AmountCountedStampsCell = 'AA31';
    protected const str AmountCountedSecuritiesCell = 'AA32';
    protected const str AmountCountedOtherCell = 'AA33';
    protected const str AmountCountedCashFracCell = 'BA30';
    protected const str AmountCountedStampsFracCell = 'BA31';
    protected const str AmountCountedSecuritiesFracCell = 'BA32';
    protected const str AmountCountedOtherFracCell = 'BA33';
    protected const str AmountCountedIntCell = 'AT35';
    protected const str AmountCountedIntCellWord = 'A37';
    protected const str AmountCountedIntCellCent = 'CO39';
    protected const str AmountCountedFrac100Cell = 'CO35';
    protected const str AmountPostedIntCell = 'AM41';
    protected const str AmountPostedFracCell = 'CO41';
    protected const str AmountPostedIntCellWord = 'A43';
    protected const str AmountPostedIntCellCent = 'CO45';
    protected const str DifferencePosIntCell = 'AX47';
    protected const str DifferencePosFracCell = 'CO47';
    protected const str DifferenceNegIntCell = 'AX48';
    protected const str DifferenceNegFracCell = 'CO48';
    protected const str ReimbDocIdCell = 'BI49';
    protected const str DisbDocIdCell = 'BI50';
    protected const str OfficialsTitleFooterCell = 'AF51';
    protected const str OfficialsNameFooterCell = 'BZ51';
    protected const str OfficialsTitleMemberFooterCell = 'AF';
    protected const str OfficialsNameMemberFooterCell = 'BZ';
    protected const str OfficialsTitleInChargeFooterCell = 'AK';
    protected const str OfficialsNameInChargeFooterCell = 'BZ';
    protected const str TransDateCell_3 = 'D';
    protected const str TitleInCharge2Cell = 'AN';
    protected const str NameInCharge2Cell = 'CA';
    protected const str TitleDirector = 'A';
    protected const str NameDirector = 'BR';
    protected const str RCashName = 'A8';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertAmount</Name>
				<Source><![CDATA[
    private void insertAmount(Bookmark _whole, Bookmark _penny, Amount _amount)
    {
        real penny = frac(_amount);

        this.insertValue(_whole, num2str(_amount - penny, 0, 0, 0, 0));
        this.insertValue(_penny, num2str(penny * 100, 0, 0, 0, 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    protected void insertData()
    {
        CompanyInfo companyInfo = CompanyInfo::find();
        OfficialsTable_RU officials;
        Counter memberCounter;
        AmountMST countedAmount;

        AmountMST countedAmountCash;
        AmountMST countedAmountStamps;
        AmountMST countedAmountSecurities;
        AmountMST countedAmountOther;
        AmountMST countedAmounts[];

        AmountMST postedAmount;
        AmountMST delta;
        TransDate maxTransDate;

        RNumDateInWordConverter converter = RNumDateInWordConverter::construct();

        int positive(int _entry = 0)
        {
            return _entry > 0 ? _entry : 0;
        }

        select sum(CountedAmountMST), sum(PostedAmountMST), sum(ExchAdj) from sourceTable;
        countedAmount = sourceTable.CountedAmountMST;
        postedAmount = sourceTable.PostedAmountMST + sourceTable.ExchAdj;
        delta = countedAmount - postedAmount;

        while select sum(CountedAmountMST) from sourceTable group by CashCountStatementType
        {
            countedAmounts[any2int(sourceTable.CashCountStatementType)] = sourceTable.CountedAmountMST;
        }
        countedAmountCash = countedAmounts[ any2int(RCashCountStatementType::Cash) ];
        countedAmountStamps = countedAmounts[ any2int(RCashCountStatementType::Stamps) ];
        countedAmountSecurities = countedAmounts[ any2int(RCashCountStatementType::Securities) ];
        countedAmountOther = countedAmounts[ any2int(RCashCountStatementType::Other) ];

        // Header
        this.insertValue(CompanyNameCell, companyInfo.Name);
        this.insertValue(CompanyOKPOCell, CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo, todate));
        this.insertValue(CompanyOKDPCell, CompanyInfoHelper::partyOKDPasOfDate_RU(companyInfo, todate));
        this.insertValue(StatementNumCell, statementNum);
        this.insertValue(TransDateCell_1, todate);
        this.insertValue(TransDateCell_2, todate);

        if (printRCashName)
        {
            this.insertValue(RCashName, RCashTable::find(cashAccount).Name);
        }

        officials = OfficialsTable_RU::find(OffReportType_RU::CashCountStatement, OffPosition_RU::InCharge);
        this.insertValue(OfficialsTitleCell, officials.Title);
        this.insertValue(OfficialsTitleNameCell, officials.Name);

        // Amount counted
        this.insertAmount(AmountCountedCashCell, AmountCountedCashFracCell, countedAmountCash);
        this.insertAmount(AmountCountedStampsCell, AmountCountedStampsFracCell, countedAmountStamps);
        this.insertAmount(AmountCountedSecuritiesCell, AmountCountedSecuritiesFracCell, countedAmountSecurities);
        this.insertAmount(AmountCountedOtherCell, AmountCountedOtherFracCell, countedAmountOther);
        this.insertAmount(AmountCountedIntCell, AmountCountedFrac100Cell, countedAmount);
        this.insertValue (AmountCountedIntCellWord, converter.numeralsToTxt(countedAmount));
        this.insertValue (AmountCountedIntCellCent, num2str(frac(countedAmount) * 100, 0, 0, 0, 0));

        // Amount posted
        this.insertAmount(AmountPostedIntCell, AmountPostedFracCell, countedAmount - delta);
        this.insertValue (AmountPostedIntCellWord, converter.numeralsToTxt(countedAmount - delta));
        this.insertValue (AmountPostedIntCellCent, num2str(frac(countedAmount - delta) * 100, 0, 0, 0, 0));

        // Difference
        if (delta > 0)
        {
            this.insertAmount(DifferencePosIntCell, DifferencePosFracCell, delta);
        }
        else if (delta < 0)
        {
            this.insertAmount(DifferenceNegIntCell, DifferenceNegFracCell, -delta);
        }

        // Last slip id's
        maxTransDate = (select firstonly maxof(TransDate) from rCashTrans
            where rCashTrans.AccountNum == cashAccount &&
                rCashTrans.TransDate <= todate &&
                rCashTrans.DocType == RCashDocType::ReimbursementSlip).TransDate;

        this.insertValue(ReimbDocIdCell, (select firstonly maxof(DocId) from rCashTrans
            where rCashTrans.AccountNum == cashAccount &&
                rCashTrans.TransDate == maxTransDate &&
                rCashTrans.DocType == RCashDocType::ReimbursementSlip).DocId);

        maxTransDate = (select firstonly maxof(TransDate) from rCashTrans
            where rCashTrans.AccountNum == cashAccount &&
                rCashTrans.TransDate <= todate &&
                rCashTrans.DocType == RCashDocType::DisbursementSlip).TransDate;

        this.insertValue(DisbDocIdCell, (select firstonly maxof(DocId) from rCashTrans
            where rCashTrans.AccountNum == cashAccount &&
                rCashTrans.TransDate == maxTransDate &&
                rCashTrans.DocType == RCashDocType::DisbursementSlip).DocId);

        // Signatures
        officials = OfficialsTable_RU::find(OffReportType_RU::CashCountStatement, OffPosition_RU::Chairman);

        this.insertValue(OfficialsTitleFooterCell, officials.Title);
        this.insertValue(OfficialsNameFooterCell, officials.Name);

        select officials
            where officials.ReportType == OffReportType_RU::CashCountStatement &&
                officials.Position == OffPosition_RU::Member;

        while (officials)
        {
            if (memberCounter > 1)
            {
                document.insertRow(FirstMemberLine + (memberCounter - 1) * 2, 1, 2);
                document.insertRow(FirstMemberLine + (memberCounter - 1) * 2 + 1, 1, 2);
            }

            this.insertValue(OfficialsTitleMemberFooterCell + int2str(FirstMemberLine + memberCounter * 2), officials.Title);
            this.insertValue(OfficialsNameMemberFooterCell + int2str(FirstMemberLine + memberCounter * 2), officials.Name);

            memberCounter++;

            next officials;
        }

        officials = OfficialsTable_RU::find(OffReportType_RU::CashCountStatement, OffPosition_RU::InCharge);

        this.insertValue(OfficialsTitleInChargeFooterCell + int2str(FirstMemberLine + positive(memberCounter - 2) * 2 + 5), officials.Title);
        this.insertValue(OfficialsNameInChargeFooterCell + int2str(FirstMemberLine + positive(memberCounter - 2) * 2 + 5), officials.Name);
        this.insertValue(TransDateCell_3 + int2str(FirstMemberLine + positive(memberCounter - 2) * 2 + 7), todate);

        this.insertValue(TitleInCharge2Cell + int2str(FirstMemberLine + positive(memberCounter - 2) * 2 + 25), officials.Title);
        this.insertValue(NameInCharge2Cell + int2str(FirstMemberLine + positive(memberCounter - 2) * 2 + 25), officials.Name);

        officials = OfficialsTable_RU::findDirector();

        this.insertValue(TitleDirector + int2str(FirstMemberLine + positive(memberCounter - 2) * 2 + 36), officials.Title);
        this.insertValue(NameDirector + int2str(FirstMemberLine + positive(memberCounter - 2) * 2 + 36), officials.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertToCells</Name>
				<Source><![CDATA[
    private void insertToCells(Bookmark _firstCell, Bookmark _secondCell, anytype _value)
    {
        this.insertValue(_firstCell, _value);
        this.insertValue(_secondCell, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValue</Name>
				<Source><![CDATA[
    public void setValue(
        TmpRCashCountStatementTable _sourceTable,
        AccountNum _cashAccount,
        TransDate _todate,
        int _statementNum,
        boolean _printRCashName)
    {
        sourceTable = _sourceTable;
        cashAccount = _cashAccount;
        todate = _todate;
        statementNum = _statementNum;
        printRCashName = _printRCashName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        const str templateName = 'RCashCountStatement.xlt';
        return templateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container dummy()
        {
            return _packedClass;
        }

        dummy();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>