<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanDocumentPurchaseOrderObserver</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanDocumentPurchaseOrderObserver</c> class provides a purchase order that is specific to
///    the handling of subcontracting document processing.
/// </summary>
public class LeanDocumentPurchaseOrderObserver extends LeanDocumentObserver
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the two objects are equal.
    /// </summary>
    /// <param name="otherObject">
    ///    The other object.
    /// </param>
    /// <returns>
    ///    true if the two objects hold the same state; otherwise, false.
    /// </returns>
    public boolean equal(Object otherObject)
    {
        LeanDocumentPurchaseOrderObserver otherObserver = otherObject as LeanDocumentPurchaseOrderObserver;

        return  otherObject == this
                || otherObserver != null ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements post-processing of a separate data line object.
    /// </summary>
    /// <param name="_lineKey">
    ///    The key of the data line.
    /// </param>
    /// <param name="_line">
    ///    The data line object.
    /// </param>
    protected void postProcessLine(anytype _lineKey, LeanDocumentProcessingDataLine _line)
    {
        ListEnumerator  listEnum = _line.parmSourceRecords().getEnumerator();
        Map             lineAdditionalValues = _line.parmAdditionalValues();

        Debug::assert(lineAdditionalValues.exists(tableNum(PurchLine)));
        if (!lineAdditionalValues.exists(tableNum(PurchLine)))
        {
            return;
        }

        PurchLine purchLine = lineAdditionalValues.lookup(tableNum(PurchLine));

        Debug::assert(purchLine.RecId != 0
                        && purchLine.InventTransId != '');
        if (!purchLine.RecId
            || !purchLine.InventTransId)
        {
            return;
        }

        super(_lineKey, _line);

        while (listEnum.moveNext())
        {
            KanbanJob currentKanbanJob = listEnum.current();
            KanbanJobPurchaseLine::assignKanbanJobToPurchLine(currentKanbanJob, purchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcessLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements pre processing of a separate data line object.
    /// </summary>
    /// <param name="_lineKey">
    /// The key of the data line.
    /// </param>
    /// <param name="_line">
    /// The data line object.
    /// </param>
    protected void preProcessLine(anytype _lineKey, LeanDocumentProcessingDataLine _line)
    {
        Map                             lineAdditionalValues = _line.parmAdditionalValues();
        AgreementLine                   agreementLine;
        InventDimParm                   serviceInventDimParm;
        InventDim                       searchInventDim;
        date                            targetDate = _line.parmLastDate();

        // if no service was found or if an agreement line has been identified - leave, nothing to do
        if (lineAdditionalValues.exists(tableNum(AgreementLine))
            || !lineAdditionalValues.exists(tableNum(PlanActivityService)))
        {
            return;
        }

        LeanDocumentAggregationPurchKey linePurchOrderKey = LeanDocumentAggregationPurchKey::newKey(_lineKey);

        Debug::assert(linePurchOrderKey.parmItemDataAreaId() == linePurchOrderKey.parmInventDimDataAreaId());

        PlanActivityService planActivityService = lineAdditionalValues.lookup(tableNum(PlanActivityService));

        InventDim criteriaInventDim;
        criteriaInventDim.data(linePurchOrderKey.parmServiceOutputDimensions());
        criteriaInventDim.InventSiteId  = linePurchOrderKey.parmInventSite();

        InventDimGroupSetup::newItemId(linePurchOrderKey.parmItemId()).inventDimParmActiveProductDimension(serviceInventDimParm);
        serviceInventDimParm.InventSiteIdFlag = NoYes::Yes;

        // find an exact match for the particular agreement, service item, product dimension and validity date
        select firstonly agreementLine
            where  agreementLine.Agreement              == planActivityService.PurchAgreementHeader
                && agreementLine.ItemId                 == linePurchOrderKey.parmItemId()
                && agreementLine.ItemDataAreaId         == linePurchOrderKey.parmItemDataAreaId()
                && agreementLine.InventDimDataAreaId    == linePurchOrderKey.parmInventDimDataAreaId()
                && agreementLine.EffectiveDate          <= targetDate
                && agreementLine.ExpirationDate         >= targetDate
            #InventDimJoinCoveragePriority(agreementLine.InventDimId, searchInventDim, criteriaInventDim, serviceInventDimParm);

        // if an agreement line is found, the store the result in processing line
        if (agreementLine.RecId)
        {
            lineAdditionalValues.insert(tableNum(AgreementLine), agreementLine);

            criteriaInventDim = InventDim::findOrCreate(criteriaInventDim);
            lineAdditionalValues.insert(tableNum(InventDim), criteriaInventDim);
        }
        else
        {
            PurchAgreementHeader agreementHeader = PurchAgreementHeader::find(planActivityService.PurchAgreementHeader);

            checkFailed(strFmt("@SYS333230",
                        agreementHeader.PurchNumberSequence,
                        agreementHeader.VendAccount,
                        linePurchOrderKey.parmItemId(),
                        date2StrUsr(targetDate, DateFlags::FormatAll)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes the default factory method for the <c>LeanDocumentPurchaseOrderObserver</c>
    ///    class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>LeanDocumentPurchaseOrderObserver</c> class.
    /// </returns>
    public static LeanDocumentPurchaseOrderObserver newStandard()
    {
        return new LeanDocumentPurchaseOrderObserver();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
