<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCreditLimit_SalesTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustCreditLimit_SalesTable</c> class performs a credit limit check based on a
///    <c>SalesTable</c> record.
/// </summary>
/// <remarks>
///    Regardless of the setting of the parameters, it is always the total sales order amount that is
///    taken into consideration.This instance is used when the setting is "Header", which checks the
///    credit limit every time that the sales order as such has changed.
/// </remarks>
class CustCreditLimit_SalesTable extends CustCreditLimit
{
    SalesTable salesTable;
    SalesUpdate qtySpec;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the variables of the class.
    /// </summary>
    /// <remarks>
    ///    When the class is instantiated, the <c>new</c> method will automatically be run all the way from
    ///    the instantiated class up to the parent class. This may not be convenient, as the child class may
    ///    not want to have the parent class initialization run. The <c>init</c> method is only called one
    ///    time.
    /// </remarks>
    void init()
    {
        super();

        if (!salesTotals)
            this.salesTotals(SalesTotals::construct(salesTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
        protected Query initQuery(SalesId _excludeSalesId = '')
    {
        return super(salesTable.SalesId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCreditAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates credit available value.
    /// </summary>
    /// <returns>
    /// Returns credit avaiable value.
    /// </returns>
    public AmountMST calcCreditAvailable()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(SalesTable _salesTable, SalesTotals _salesTotals = null)
    {
        salesTable = _salesTable;
        salesTotals = _salesTotals;
        super(CustTable::find(_salesTable.InvoiceAccount));
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.agreementCheckInit_RU(salesTable.salesTable_RU().AgreementHeaderExt_RU, salesTable.TableId, salesTable.RecId);
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCheckCreditAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to check the available credit for the customer.
    /// </summary>
    /// <returns>
    /// true if available credit should be checked; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the customer has a credit limit, and the <c>typeOfCreditMaxCheck</c> property is not set to the
    /// <c>TypeOfCreditmaxCheck::None</c> enumeration value or the customer has specified the mandatory
    /// credit limit check, the credit limit will be checked.
    /// </remarks>
    public boolean shouldCheckCreditAvailable()
    {
        boolean ret;
        SalesTable_BR salesTable_BR;

        ret = super();

        if (BrazilParameters::isEnabled())
        {
            salesTable_BR = salesTable.salesTable_BR();

            if (salesTable_BR.SalesPurchOperationType_BR)
            {
                ret = SalesPurchOperationType_BR::find(salesTable_BR.SalesPurchOperationType_BR).CreateFinancialTrans && ret;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>