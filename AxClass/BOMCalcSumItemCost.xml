<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcSumItemCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BOMCalcSumItemCost</c> class rolls up the costs of a detailed BOM calculation to a cost per
///    cost group.
/// </summary>
class BomCalcSumItemCost extends BOMCalcSumCost
{
    InventItemPriceSim inventItemPriceSim;
    boolean            pricesRolledup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventItemPriceSim</Name>
				<Source><![CDATA[
    public InventItemPriceSim parmInventItemPriceSim(InventItemPriceSim _inventItemPriceSim = inventItemPriceSim)
    {
        if (!prmisdefault(_inventItemPriceSim))
            pricesRolledup = false;

        inventItemPriceSim = _inventItemPriceSim;

        return inventItemPriceSim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rollup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Summarizes <c>BOMCalcTrans</c> records into a sum per cost group and level.
    /// </summary>
    public void rollup()
    {
        BOMCalcTable    bomCalcTableFieldList;
        BOMCalcTrans    bomCalcTrans;
        InventCostLevel costLevel;

        while select UnitId from bomCalcTableFieldList
            where bomCalcTableFieldList.PriceCalcId == inventItemPriceSim.PriceCalcId
        // <GEERU>
        join CostGroupId, Level, bom, Qty, CostMarkupQty, CostPriceQty, CostMarkupQtySecCur_RU, CostPriceQtySecCur_RU from bomCalcTrans
        // </GEERU>
             where bomCalcTrans.PriceCalcId == bomCalcTableFieldList.PriceCalcId
                  && ( ( bomCalcTrans.Level <= InventCostLevel::Single )
                    || ( bomCalcTrans.bom   == NoYes::No ) )
        {
            costLevel = min(bomCalcTrans.Level, InventCostLevel::Multi);   //Everything above level 2 is cost accounted as level 2

            select firstonly forupdate tmpBOMCalcSumCost
                where tmpBOMCalcSumCost.CostLevel   == costLevel
                   && tmpBOMCalcSumCost.CostGroupId == bomCalcTrans.CostGroupId
                   && tmpBOMCalcSumCost.Split       == bomCalcTrans.bom;

            if (!tmpBOMCalcSumCost.RecId)
            {
                // Primary key
                tmpBOMCalcSumCost.CostLevel     = costLevel;
                tmpBOMCalcSumCost.CostGroupId   = bomCalcTrans.CostGroupId;
                tmpBOMCalcSumCost.Split         = bomCalcTrans.bom;

                tmpBOMCalcSumCost.Qty           = bomCalcTrans.Qty;
                tmpBOMCalcSumCost.UnitID        = bomCalcTableFieldList.UnitId;
            }

            tmpBOMCalcSumCost.CostAmount += bomCalcTrans.CostMarkupQty + (tmpBOMCalcSumCost.Qty * bomCalcTrans.CostPriceQty);
            // <GEERU>
            tmpBOMCalcSumCost.CostAmountSecCur_RU += bomCalcTrans.CostMarkupQtySecCur_RU + (tmpBOMCalcSumCost.Qty * bomCalcTrans.CostPriceQtySecCur_RU);
           // </GEERU>
            tmpBOMCalcSumCost.write();
        }
        pricesRolledup = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferToItemPrice</Name>
				<Source><![CDATA[
    public void transferToItemPrice()
    {
        #OCCRetryCount
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        InventItemCostGroupRollupSim    inventItemCostGroupRollupSim;
        InventQty                       costQty;
        CostAmountStd                   costStd;
        boolean                         rollupExists;

        if (!pricesRolledup)
            this.rollup();

        try
        {
            RecordInsertList recordInsertList = new RecordInsertList(tableNum(InventItemCostGroupRollupSim));

            ttsbegin;

            while select tmpBOMCalcSumCost
            {
                rollupExists = true;

                inventItemCostGroupRollupSim.clear();
                inventItemCostGroupRollupSim.InventItemPriceSimRefRecId = inventItemPriceSim.RecId;

                EcoResProductUnitConverter ecoResProductUnitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(inventItemPriceSim.ItemId,
                                                                                                                                          inventItemPriceSim.InventDimId,
                                                                                                                                          tmpBOMCalcSumCost.UnitID,
                                                                                                                                          inventItemPriceSim.UnitID,
																																		  NoYes::Yes,
                                                                                                                                          NoYes::No);

                costStd = ecoResProductUnitConverter.convertValue(tmpBOMCalcSumCost.CostAmount);

                ecoResProductUnitConverter.parmApplyRounding(NoYes::Yes);

                costQty = ecoResProductUnitConverter.convertValue(tmpBOMCalcSumCost.Qty);

                inventItemCostGroupRollupSim.CostGroupId   = tmpBOMCalcSumCost.CostGroupId;
                inventItemCostGroupRollupSim.CostLevel     = tmpBOMCalcSumCost.CostLevel;
                inventItemCostGroupRollupSim.Split         = tmpBOMCalcSumCost.Split;
                inventItemCostGroupRollupSim.CostAmountStd = costStd;
                inventItemCostGroupRollupSim.Qty           = costQty;

                // <GEERU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                {
                    ecoResProductUnitConverter.parmApplyRounding(NoYes::No);

                    inventItemCostGroupRollupSim.CostAmountSecCur_RU = tmpBOMCalcSumCost.CostAmountSecCur_RU         ?
                                                                       ecoResProductUnitConverter.convertValue(tmpBOMCalcSumCost.CostAmountSecCur_RU) : 0;
                }
                // </GEERU>

                recordInsertList.add(inventItemCostGroupRollupSim);
            }

            if (rollupExists)
            {
                recordInsertList.insertDatabase();
            }
            else
            {
                inventItemCostGroupRollupSim.initFromInventItemPriceSim(inventItemPriceSim);
                inventItemCostGroupRollupSim.insert();
            }

            ttscommit;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMCalcSumItemCost construct()
    {
        return new BOMCalcSumItemCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventItemPriceSim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BOMCalcSumItemCost</c> class.
    /// </summary>
    /// <param name="_inventItemPriceSim">
    ///    An <c>InventItemPriceSim</c> record buffer that holds the price calculation ID to link the cost to
    ///    a BOM calculation.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BOMCalcSumItemCost</c> cost.
    /// </returns>
    public static BOMCalcSumItemCost newInventItemPriceSim(InventItemPriceSim _inventItemPriceSim)
    {
        BOMCalcSumItemCost  bomCalcSumItemCost = BOMCalcSumItemCost::construct();

        bomCalcSumItemCost.parmInventItemPriceSim(_inventItemPriceSim);

        return bomCalcSumItemCost;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>