<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventoryServiceConfigReader</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ServiceFramework.Communication.Http;

public class InventoryServiceConfigReader
{
    private InventoryServiceClient inventoryServiceClient;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>GetInventoryServiceInitialPushLimit</Name>
				<Source><![CDATA[
    public int GetInventoryServiceInitialPushLimit()
    {
        return str2Int(this.inventoryServiceClient.getInitialPushLimit());
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetInventoryServicePartitionSchemaVersion</Name>
				<Source><![CDATA[
    public int GetInventoryServicePartitionSchemaVersion()
    {
        return str2Int(this.inventoryServiceClient.getPartitionSchemaVersion());
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrySetNewSchemaVersion</Name>
				<Source><![CDATA[
    public void TrySetNewSchemaVersion(int newVersion)
    {
        try
        {
            var s = this.inventoryServiceClient.setPartitionSchemaVersion(newVersion);
            var c = this.inventoryServiceClient.updateConfiguration();
        }
        catch
        {
            warning("@SCM:InventInventoryServiceSetPartitionSchemaWarning");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldEnforceInitialPushLimit</Name>
				<Source><![CDATA[
    /// Leave it here in case IV introduces more in the future. 
    public boolean shouldEnforceInitialPushLimit(int schemaVersion)
    {
        return schemaVersion == 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInitialPush</Name>
				<Source><![CDATA[
    public void validateInitialPush()
    {
        int schemaVersion;
        int initialPushLimit;
        int maxRecordCount;

        InventInventoryDataServiceParameters inventoryServiceParameters = InventInventoryDataServiceParameters::find();
        if (inventoryServiceParameters.IsWHSItemEnabled == true)
        {
            try
            {
                schemaVersion = this.GetInventoryServicePartitionSchemaVersion();
                initialPushLimit = this.GetInventoryServiceInitialPushLimit();
            }
            catch
            {
                throw error("@SCM:InventoryServiceReadInitialPushConfigError");
            }

            if (schemaVersion == 1)
            {
                try
                {
                    var validationHelper = new InventInventoryDataServiceInitialPushValidationHelper();
                    maxRecordCount = validationHelper.GetMaxPartitionRecordCount();
                }
                catch
                {
                    throw error(strFmt("@SCM:InventoryServiceInitialPushAmountError", initialPushLimit));
                }

                if (this.partitionDataExceedsMaxAmount(initialPushLimit, maxRecordCount, schemaVersion))
                {
                    if (InventoryServiceAutoSetConfigurationFlight::instance().isEnabled())
                    {
                        this.TrySetNewSchemaVersion(2);
                    }
                    else
                    {
                        throw error(strFmt("@SCM:InventoryServiceInitialPushAmountError", initialPushLimit));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>partitionDataExceedsMaxAmount</Name>
				<Source><![CDATA[
    public boolean partitionDataExceedsMaxAmount(int initialPushLimit, int maxRecordCount, int schemaVersion)
    {
        return (initialPushLimit < maxRecordCount && this.shouldEnforceInitialPushLimit(schemaVersion));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {
        this.inventoryServiceClient = new InventoryServiceClient();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>