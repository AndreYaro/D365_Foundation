<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsControlItemId</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsControlItemId</c> class is responsible for handling the item ID controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#ItemId)]
class WhsControlItemId extends WhsControl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public boolean process()
    {
        InventDim itemInventDim;
        if (this.parmData() != "@WAX402")
        {
            InventInventItemSearch localInventItemSearch = InventInventItemSearch::construct();
            InventInventItemSearchResult localInventItemSearchResult = localInventItemSearch.search(this.parmData());
            WHSWorkLine         workLine = controlData.parmWorkLine();

            if (localInventItemSearchResult)
            {
                itemInventDim = InventDim::find(localInventItemSearchResult.parmInventDimId());
                if (!this.initializeFieldValuesFromInventItemSearchResult(localInventItemSearchResult))
                {
                    return false;
                }
            }
            else
            {
                return this.fail("@SYP5070015");
            }

            if (!WHSInventEnabled::exist(fieldValues.parmItemId())
                    ||  (mode == WHSWorkExecuteMode::ChangeBatchDisposition
                        &&   !InventTable::find(fieldValues.parmItemId()).whsBatchActive()))
            {
                return this.fail("@WAX774");
            }
            
            if (!WHSInventTable::find(fieldValues.parmItemId()).uomSeqGroupId)
            {
                return this.fail("@WAX3609");
            }

            if (this.checkItemIdWorkExecuteMode())
            {
                WMSLocation location = controlData.wmsLocation();
                if (step != #ShortPick
                    && !controlData.validateItemInLocation(fieldValues.parmItemId())
                    && !WhsInvent::isNegativePhysicalInventoryAllowed(fieldValues.parmItemId(), location.wMSLocationId, location.inventLocationId))
                {
                    fieldValues.parmItemId('');
                    return this.fail("@WAX774");
                }
            }
            else if ((mode == WHSWorkExecuteMode::AdjustmentIn          ||
                        mode == WHSWorkExecuteMode::LicensePlateLoading)  &&
                      !this.canUseLocationForItem(fieldValues.parmItemId()))
            {
                fieldValues.parmItemId('');
                return this.fail("@WAX1855");
            }
            
            if (workLine.WorkType == WHSWorkType::Count)
            {
                //Process inventory status for cycle count when display inventory status is not displayed.
                if (controlData.processInventoryStatusForCycleCount())
                {
                    return this.fail(controlData.parmErrorMessage());
                }

                if (pass.exists(#RFAddLP))
                {
                    if (!WHSLocationProfile::find(WMSLocation::find(workLine.wmsLocationId, workLine.whsWorkTable().InventLocationId).LocProfileId).AllowMixedItems)
                    {
                        WHSWorkLineCycleCount workLineCycleCount;
                        select firstonly workLineCycleCount
                            where workLineCycleCount.ItemId      != fieldValues.parmItemId()
                                &&  workLineCycleCount.QtyCounted != 0
                                &&  workLineCycleCount.WorkId     == workLine.WorkId
                                &&  workLineCycleCount.LineNum    == workLine.LineNum;

                        if (workLineCycleCount.RecId != 0)
                        {
                            fieldValues.parmItemId('');
                            return this.fail("@WAX1855");
                        }
                    }

                    fieldValues.addProductDimensions(fieldValues.parmItemId(), itemInventDim);
                    return true;
                }                
            }

            if (mode == WHSWorkExecuteMode::OutboundSorting)
            {
                WHSOutboundSortTemplate outboundSortTemplate = WHSOutboundSortTemplate::find(WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).SortTemplateId);

                if (outboundSortTemplate.SortTemplateType == WHSOutboundSortTemplateType::WaveDemand)
                {
                    WHSLicensePlateId licensePlateId = pass.lookupStr(#LicensePlateId);
                    ItemId currentItemId = this.parmData();

                    if (fieldValues.parmItemId())
                    {
                        currentItemId = fieldValues.parmItemId();
                    }

                    if (licensePlateId && !this.existItemClosedWorkLineByLicensePlate(currentItemId, licensePlateId))
                    {
                        fieldValues.parmItemId('');
                        return this.fail(strFmt("@WAX:WHSOutboundSortMissingItemRelatedClosedWorkOnLPError", this.parmData(), licensePlateId));
                    }
                }
            }

            if (!super())
            {
                return false;
            }

            // Owner might not be set yet, and there would be no control to enter it. Find it from the item.
            this.populateOwner();

            if (mode == WHSWorkExecuteMode::MovementByTemplate)
            {
                this.populateDimensions();
            }
        
            fieldValues.addProductDimensions(fieldValues.parmItemId(), itemInventDim);
        }
        else
        {
            fieldValues.parmItemId(this.parmData());
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existItemClosedWorkLineByLicensePlate</Name>
				<Source><![CDATA[
    private boolean existItemClosedWorkLineByLicensePlate(ItemId _itemId, WHSLicensePlateId _licensePlateId)
    {
        WHSWorkTable workTable;
        WHSWorkLine workLine;
        
        select firstonly RecId from workLine
            where workLine.ItemId == _itemId
                && workLine.WorkStatus == WHSWorkStatus::Closed
            exists join workTable
            where workTable.WorkId == workLine.WorkId
                && workTable.TargetLicensePlateId == _licensePlateId;

        return workLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFieldValuesFromInventItemSearchResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the field values from inventory item search result.
    /// </summary>
    /// <param name = "_inventItemSearchResult">An instance of <c>InventInventItemSearchResult</c> object.</param>
    /// <returns>true if field values are successfully initialized; otherwise, false.</returns>
    protected boolean initializeFieldValuesFromInventItemSearchResult(InventInventItemSearchResult _inventItemSearchResult)
    {
        fieldValues.parmItemId(_inventItemSearchResult.parmItemId());

        UnitOfMeasureSymbol uom = _inventItemSearchResult.parmUnitOfMeasureSymbol();

        // If a unit of measure was found default the selected unit of measure to it.
        if (uom)
        {
            if (!WHSUOMSeqGroupLine::existByItemId(fieldValues.parmItemId(), uom))
            {
                return this.fail(strFmt("@WAX:InvalidUnitOfMeasureForItem", uom));
            }

            fieldValues.insert(#SelectedValueUOM, uom);
            pass.insert(#SelectedValueUOM, uom);
            controlData.parmSaveUOMValue(true);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemIdWorkExecuteMode</Name>
				<Source><![CDATA[
    protected boolean checkItemIdWorkExecuteMode()
    {
        WHSWorkLine workLine = controlData.parmWorkLine();

        return workLine.WorkType   != WHSWorkType::Put                                         &&
               workLine.WorkType   != WHSWorkType::Count                                       &&
               !WHSWorkExecutionMode::newFromMode(mode).isInboundOrderItemReceiving()          &&
               mode                != WHSWorkExecuteMode::PickPack                             &&
               mode                != WHSWorkExecuteMode::UserGrouping                         &&
               mode                != WHSWorkExecuteMode::Movement                             &&
               mode                != WHSWorkExecuteMode::MovementByTemplate                   &&
               mode                != WHSWorkExecuteMode::Quarantine                           &&
               mode                != WHSWorkExecuteMode::ProductionScrap                      &&
               mode                != WHSWorkExecuteMode::ReturnOrder                          &&
               mode                != WHSWorkExecuteMode::ReturnOrderAndLocate                 &&
               mode                != WHSWorkExecuteMode::ClusterPicking                       &&
               mode                != WHSWorkExecuteMode::ChangeBatchDisposition               &&
               mode                != WHSWorkExecuteMode::MixedLPReceiving                     &&
               mode                != WHSWorkExecuteMode::MixedLPReceivingAndLocate            &&
               mode                != WHSWorkExecuteMode::MaterialConsumption                  &&
               mode                != WHSWorkExecuteMode::InquiryItem                          &&
               mode                != WHSWorkExecuteMode::SystemDirectedClusterPicking         &&
               mode                != WHSWorkExecuteMode::ClusterPutaway                       &&
               this.mustPopulate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateOwner</Name>
				<Source><![CDATA[
    private void populateOwner()
    {
        #ISOCountryRegionCodes
        InventOwnerId_RU inventOwnerId  = fieldValues.parmInventOwnerId();
        ItemId           itemId         = fieldValues.parmItemId();
        if (itemId && !inventOwnerId
            && InventTable::find(itemId).isItemInventoryOwnerActivated()
            && !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])) // in a Russian context, other rules for setting the Owner apply
        {
            controlData.insertOwnerIntoFieldValues();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseLocationForItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current location can be used for the given item.
    /// </summary>
    /// <param name="_itemId">The item ID to check against.</param>
    /// <returns>true if the current location can be used for the given item; otherwise, false.</returns>
    public boolean canUseLocationForItem(ItemId _itemId)
    {
        WMSLocation wmsLocation = controlData.wmsLocation();

        if (this.isMixedItemsAllowedInlocation(wmsLocation))
        {
            return true;
        }

        return !wmsLocation.doesLocationHaveOtherItems(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMixedItemsAllowedInlocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified location allows mixed items.
    /// </summary>
    /// <param name="_wmsLocation">The <c>WMSLocation</c> to check.</param>
    /// <returns>true if the specified location allows mixed items; otherwise, false.</returns>
    protected boolean isMixedItemsAllowedInlocation(WMSLocation _wmsLocation)
    {
        return _wmsLocation.whsLocationProfile().AllowMixedItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    public void populate()
    {
        WHSWorkLine workLine = controlData.parmWorkLine();

        if (workLine.WorkType == WHSWorkType::Count)
        {
            fieldValues.parmItemId('');
            return;
        }
        
        if (this.mustPopulate())
        {
            fieldValues.parmItemId(this.getItemId(mode == WHSWorkExecuteMode::MaterialConsumption));

            if (fieldValues.parmItemId())
            {
                if (mode == WHSWorkExecuteMode::MaterialConsumption)
                {
                    controlData.processControl(#ItemId, fieldValues.parmItemId());
                }
                else
                {
                    this.populateDimensions();
                }

                return;
            }
        }

        if (controlData.parmDefaulting() &&
            this.isDefaultingSupported())
        {
            fieldValues.parmItemId(WHSRFDefaultData::getDefaultValue(controlData.parmMenuItemName(),
                                                               WHSDefaultDataField::Item,
                                                               pass.lookup(#UserId),
                                                               fieldValues.parmInventLocationId(),
                                                               fieldValues.parmWMSLocationId()));
            if (fieldValues.parmItemId())
            {
                controlData.processControl(#ItemId, fieldValues.parmItemId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates dimensions.
    /// </summary>
    protected void populateDimensions()
    {
        #InventDimDevelop        

        InventTable inventTable = InventTable::find(fieldValues.parmItemId());

        if (InventProductDimensionColor::getInstance().isEnabled() && 
            InventProductDimensionColor::getInstance().isActiveForItem(inventTable))
        {
            controlData.populateData(#ColorId);
        }

        if (InventProductDimensionSize::getInstance().isEnabled() && 
            InventProductDimensionSize::getInstance().isActiveForItem(inventTable))
        {
            controlData.populateData(#SizeId);
        }

        if (InventProductDimensionStyle::getInstance().isEnabled() && 
            InventProductDimensionStyle::getInstance().isActiveForItem(inventTable))
        {
            controlData.populateData(#StyleId);
        }

        if (InventProductDimensionVersion::getInstance().isEnabled() &&
            InventProductDimensionVersion::getInstance().isActiveForItem(inventTable))
        {
            controlData.populateData(#VersionId);
        }

        if (InventProductDimensionConfig::getInstance().isEnabled() &&
            InventProductDimensionConfig::getInstance().isActiveForItem(inventTable))
        {
            controlData.populateData(#ConfigId);
        }

        if (InventTrackingDimensionBatch::getInstance().isEnabled() &&
            inventTable.isItemBatchActivated())
        {
            controlData.populateData(#BatchId);
        }
        
        if (InventTrackingDimensionSerial::getInstance().isEnabled() &&
            inventTable.isItemSerialNumberActivated())
        {
            controlData.populateData(#SerialId);
        }

        if (InventTrackingDimensionProfile_RU::getInstance().isEnabled() &&
            inventTable.isItemProfileIdActivated())
        {
            controlData.populateData(#ProfileId_RU);
        }
        
        if (InventTrackingDimensionOwner::getInstance().isEnabled() &&
            inventTable.isItemOwnerIdActivated())
        {
            controlData.populateData(#OwnerId_RU);
        }

        if (InventTrackingDimensionGTD_RU::getInstance().isEnabled() &&
            inventTable.isItemGTDNumberActivated())
        {
            controlData.populateData(#GtdId_RU);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefaultingSupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if defaulting is supported.
    /// </summary>
    /// <returns>true if supported; otherwise, false.</returns>
    protected boolean isDefaultingSupported()
    {
        switch (mode)
        {
            case WHSWorkExecuteMode::TransferOrderItemReceiving:
            case WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate:
            case WHSWorkExecuteMode::TransferOrderLineReceiving:
            case WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate:
                return false;
        }

        return !WHSWorkExecutionMode::newFromMode(mode).isInboundOrderOrLoadReceiving();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPopulate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if control data must be populated.
    /// </summary>
    /// <returns>
    ///     true if control will be populated; otherwise, false.
    /// </returns>
    protected boolean mustPopulate()
    {
        switch (mode)
        {
            case WHSWorkExecuteMode::AdjustmentIn:
            case WHSWorkExecuteMode::ReportAsFinished:
            case WHSWorkExecuteMode::ReportAsFinishedAndLocate:
            case WHSWorkExecuteMode::ReportAsFinishedBySerial:
            case WHSWorkExecuteMode::KanbanPut:
            case WHSWorkExecuteMode::KanbanPutAndLocate:
            case WHSWorkExecuteMode::LoadItemReceiving:
            case WHSWorkExecuteMode::LoadItemReceivingAndLocate:
            case WHSWorkExecuteMode::LicensePlateLoading:
            case WHSWorkExecuteMode::TransferOrderItemReceiving:
            case WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate:
            case WHSWorkExecuteMode::TransferOrderLineReceiving:
            case WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate:
            case WHSWorkExecuteMode::ReturnItemReceiving:
                return false;
        }
        
        return !WHSWorkExecutionMode::newFromMode(mode).isInboundOrderLineReceiving() &&
            WHSRFMenuItemTable::getWHSWorkExecuteMode(WHSRFMenuItemTable::find(controlData.parmMenuItemName())) != WHSWorkExecuteMode::AdjustmentIn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    private ItemId getItemId(boolean _includePicked = false)
    {
        InventSum           inventSum;
        ItemId              tmpItemId;
        str                 ret;

        ttsbegin;
        WHSLicensePlateId   licensePlateId      = controlData.parmLicensePlateId();
        WMSLocationId       locationId          = fieldValues.parmWMSLocationId();
        InventLocationId    InventLocationId    = fieldValues.parmInventLocationId();
        WHSContainerId		containerId			= controlData.parmContainerId();

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            if (licensePlateId)
            {
                select inventSum
                where inventSum.LicensePlateId      == licensePlateId           &&
                      inventSum.InventLocationId    == inventLocationId         &&
                      inventSum.ClosedQty           == NoYes::No                &&
                      (inventSum.PhysicalInvent       > 0                       ||
                       (_includePicked                                          &&
                        inventSum.PhysicalInvent     == 0                       &&
                        inventSum.Picked              > 0));
            }
            else if (locationId)
            {
                select inventSum
                where inventSum.wmsLocationId       == locationId               &&
                      inventSum.InventLocationId    == inventLocationId         &&
                      inventSum.ClosedQty           == NoYes::No                &&
                      (inventSum.PhysicalInvent       > 0                       ||
                       (_includePicked                                          &&
                        inventSum.PhysicalInvent     == 0                       &&
                        inventSum.Picked              > 0));
            }
            else if (containerId
            && mode == WHSWorkExecuteMode::Movement)
            {
                return this.getContainerItemId(containerId);
            }
        }
        else
        {
            InventDim           inventDim;

            if (licensePlateId)
            {
                select inventSum
                exists join inventDim
                where inventSum.InventDimId         == inventDim.InventDimId    &&
                      inventDim.LicensePlateId      == licensePlateId           &&
                      inventDim.InventLocationId    == inventLocationId         &&
                      inventSum.ClosedQty           == NoYes::No                &&
                      (inventSum.PhysicalInvent       > 0                       ||
                       (_includePicked                                          &&
                        inventSum.PhysicalInvent     == 0                       &&
                        inventSum.Picked              > 0));
            }
            else if (locationId)
            {
                select inventSum
                exists join inventDim
                where inventSum.InventDimId         == inventDim.InventDimId    &&
                      inventDim.wmsLocationId       == locationId               &&
                      inventDim.InventLocationId    == inventLocationId         &&
                      inventSum.ClosedQty           == NoYes::No                &&
                      (inventSum.PhysicalInvent       > 0                       ||
                       (_includePicked                                          &&
                        inventSum.PhysicalInvent     == 0                       &&
                        inventSum.Picked              > 0));
            }
            else if (containerId
            && mode == WHSWorkExecuteMode::Movement)
            {
                return this.getContainerItemId(containerId);
            }
        }

        while (inventSum)
        {
            if (tmpItemId != '' && tmpItemId != inventSum.ItemId)
            {
                ret = '';
                break;
            }
            else if (tmpItemId  != '' && mode == WHSWorkExecuteMode::Quarantine
                && EcoResProduct::findByProductNumber(tmpItemId).isProductMaster()
                && WMSLocation::find(locationId, inventSum.inventLocationId).whsLocationIsLPControlled())
            {
                ret = '';
                break;
            }
            else
            {
                ret = inventSum.ItemId;
            }

            tmpItemId = inventSum.ItemId;
            next inventSum;
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContainerItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an item id tied to a container id if there is only one.
    /// </summary>
    /// <param name="_containerId">
    /// Container id to find the item id associated to the container.
	/// </param>
    /// <returns>
    /// Item if there was only one tied to the container id.
    /// </returns>
    private ItemId getContainerItemId(WHSContainerId _containerId)
    {
		ItemId tmpItemId;

        if (_containerId)
        {
			WHSContainerLine containerLine;
    
			while select ItemId from containerLine
                where containerLine.ContainerId == _containerId
			{
				if (tmpItemId != '' && tmpItemId != containerLine.ItemId)
				{
					tmpItemId = '';
					break;
				}
				else
				{
					tmpItemId = containerLine.ItemId;
				}
			}
        }
    
        return tmpItemId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>