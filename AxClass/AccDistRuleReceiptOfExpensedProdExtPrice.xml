<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccDistRuleReceiptOfExpensedProdExtPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductReceipt), BusinessEvent_ProductReceipt::ReceiptOfExpensedProducts, MonetaryAmount::ExtendedPrice),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductReceipt), BusinessEvent_ProductReceipt::ReceiptOfExpensedProducts, MonetaryAmount::Charge),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductReceipt), BusinessEvent_ProductReceipt::ReceiptOfExpensedProducts, MonetaryAmount::TaxNonRecoverable),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductReceipt), BusinessEvent_ProductReceipt::ReceiptOfExpensedProducts, MonetaryAmount::TaxNonRecoverableVariance),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductReceipt), BusinessEvent_ProductReceipt::ReceiptOfExpensedProducts, MonetaryAmount::ServiceTaxInterimAmountVariance_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductReceipt), BusinessEvent_ProductReceipt::ReceiptOfExpensedProducts, MonetaryAmount::ServiceTaxInterimAmount_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductReceipt), BusinessEvent_ProductReceipt::ReceiptOfExpensedProducts, MonetaryAmount::ServiceTaxNonRecoverableVariance_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductReceipt), BusinessEvent_ProductReceipt::ReceiptOfExpensedProducts, MonetaryAmount::ServiceTaxNonRecoverable_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductReceipt), BusinessEvent_ProductReceipt::ReceiptOfExpensedProducts, MonetaryAmount::ServiceTaxExpenseVariance_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductReceipt), BusinessEvent_ProductReceipt::ReceiptOfExpensedProducts, MonetaryAmount::ServiceTaxExpense_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductReceipt), BusinessEvent_ProductReceipt::ReceiptOfExpensedProducts, MonetaryAmount::ServiceTaxInterimExpense_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProductReceipt), BusinessEvent_ProductReceipt::ReceiptOfExpensedProducts, MonetaryAmount::ServiceTaxInterimExpenseVariance_IN)
]
public class AccDistRuleReceiptOfExpensedProdExtPrice extends AccountingDistributionRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUseInventMainAccDimensionListProvider</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a dimension list provider for a main account with a fixed monetary amount can be
    ///    used to derive the dimension values of the main account that are required to classify the financial
    ///    consequences of the source document amounts that are assigned to the inventoried products.
    /// </summary>
    /// <returns>
    ///    true if a the main account list provider can be used; otherwise, false.
    /// </returns>
    public boolean canUseInventMainAccDimensionListProvider()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        SourceDocumentLineItemIProductionFlow   iProductionFlow;
        LeanProductionFlowReferenceRefRecId     leanProductionFlowReferenceRefRecId;

        if (sourceDocumentLineItem is SourceDocumentLineItemIProductionFlow)
        {
            iProductionFlow = sourceDocumentLineItem as SourceDocumentLineItemIProductionFlow;
            leanProductionFlowReferenceRefRecId = iProductionFlow.parmPlanReference();
        }

        if (leanProductionFlowReferenceRefRecId)
        {
            return  LedgerPostingType::ProdLeanWIPServiceReceipt;
        }
        else
        {
            return LedgerPostingType::PurchOffsetAccountPckSlp;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        if (this.parmAmount() >= 0.0)
        {
            return DebitCredit::Debit;
        }
        else
        {
            return DebitCredit::Credit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>