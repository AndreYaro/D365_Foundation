<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQTotals_ParmTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQTotals_ParmTrans
extends PurchRFQTotals
{
    PurchRFQTable   purchRFQTable;
    PurchRFQLine    purchRFQLine;

    PurchRFQCaseTable   purchRFQCaseTable;
    PurchRFQCaseLine    purchRFQCaseLine;

    PurchRFQParmTable   purchRFQParmTable;
    PurchRFQParmLine    purchRFQParmLine;

    boolean useCase;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cashDiscCode</Name>
				<Source><![CDATA[
    CashDiscCode cashDiscCode()
    {
        return purchRFQParmTable.CashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCalcTax</Name>
				<Source><![CDATA[
    protected TradeCalcTax constructCalcTax()
    {
        PurchCalcTax_RFQ    purchCalcTax = PurchCalcTax::construct(purchRFQParmTable);
        purchCalcTax.setSpecQtyRFQ(specQty);
        return purchCalcTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the currency code of the record in the <c>Currency</c> table.
    /// </summary>
    /// <returns>
    /// The currency code of the record in the <c>Currency</c> table.
    /// </returns>
    public CurrencyCode currencyCode()
    {
        return purchRFQParmTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    protected DiscPct  discPercent()
    {
        return purchRFQParmLine.purchRFQTable().DiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedListLine</Name>
				<Source><![CDATA[
    protected void initRecordSortedListLine()
    {
        recordSortedListLine = new RecordSortedList(tableNum(PurchRFQParmLine));
        recordSortedListLine.sortOrder      (fieldNum(PurchRFQParmLine, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    protected InventTransId inventTransId()
    {
        return purchRFQParmLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    VendAccount invoiceAccount()
    {
        return purchRFQParmTable.VendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    protected TransDate invoiceDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    protected ItemId itemId()
    {
        return purchRFQParmLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    protected LineAmount  lineAmount(PurchQty _purchQty, TransDate _transDate)
    {
        return purchRFQParmLine.lineAmountExclTax(_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscAmount</Name>
				<Source><![CDATA[
    protected DiscAmount lineDiscAmount(UnitQty unitQty, TransDate transDate)
    {
        DiscAmount  discAmount = 0;

        if (useCase)
        {
            if (purchRFQCaseLine.PurchPrice)
                discAmount += purchRFQCaseLine.calcLineDiscExclTax(unitQty, transDate);
        }
        else
        {
            if (purchRFQLine.PurchPrice)
                discAmount += purchRFQLine.calcLineDiscExclTax(unitQty, transDate);
        }

        return discAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupLine</Name>
				<Source><![CDATA[
    protected Common markupLine()
    {
        if (useCase)
        {
            return purchRFQCaseLine;
        }

        return purchRFQLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common         _orderTable,
             PurchRFQUpdate _specQty)
    {
        super(_orderTable, _specQty);

        purchRFQParmTable   = _orderTable;
        purchRFQCaseTable   = purchRFQParmTable.purchRFQCaseTable();
        purchRFQTable       = purchRFQParmTable.purchRFQTable();
        if (!purchRFQTable.RecId)
        {
            useCase = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLine_orderTable</Name>
				<Source><![CDATA[
    protected Common orderLine_orderTable()
    {
        if (useCase)
        {
            return purchRFQCaseTable;
        }

        return purchRFQTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight quantity.
    /// </summary>
    /// <returns>
    /// The catch weight quantity.
    /// </returns>
    protected PdsCWInventQty pdsCWQtyUnit()
    {
        return purchRFQParmLine.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    protected InventQty  qtyInvent()
    {
        return purchRFQParmLine.QtyOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnit</Name>
				<Source><![CDATA[
    protected UnitQty qtyUnit()
    {
        return purchRFQParmLine.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    protected QueryRun  queryBuild()
    {
        Query   query = purchRFQParmTable.queryPurchRFQParmLine();
        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildOrderTable</Name>
				<Source><![CDATA[
    protected QueryRun queryBuildOrderTable()
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        if (useCase)
        {
            qbds = query.addDataSource(tableNum(PurchRFQCaseTable));
            qbds.firstFast(true);
            qbds.update(true);
            qbds.addRange(fieldNum(PurchRFQCaseTable, rfqCaseId)).value(purchRFQCaseTable.rfqCaseId);
        }
        else
        {
            qbds = query.addDataSource(tablenum(PurchRFQTable));
            qbds.firstFast(true);
            qbds.update(true);
            qbds.addRange(fieldnum(PurchRFQTable, rfqId)).value(purchRFQTable.rfqId);
        }

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    protected Common queryGet(QueryRun  _queryRun)
    {
        if (_queryRun.changed(tableNum(PurchRFQParmLine)))
            purchRFQParmLine = _queryRun.get(tableNum(PurchRFQParmLine));
        else
            purchRFQParmLine = null;

        if (purchRFQParmLine.RecId)
        {
            if (useCase)
            {
                purchRFQCaseLine = purchRFQParmLine.purchRFQCaseLine();
            }
            else
            {
                purchRFQLine = purchRFQParmLine.purchRFQLine();
            }
        }
        else
        {
            purchRFQCaseLine = null;
            purchRFQLine = null;
        }

        return purchRFQParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGetOrderTable</Name>
				<Source><![CDATA[
    protected Common queryGetOrderTable(QueryRun _queryRun)
    {
        PurchRFQCaseTable   queryPurchRFQCaseTable;
        PurchRFQTable       queryPurchRFQTable;

        if (useCase)
        {
            if (_queryRun.changed(tableNum(PurchRFQCaseTable)))
                queryPurchRFQCaseTable = _queryRun.get(tableNum(PurchRFQCaseTable));

            return queryPurchRFQCaseTable;
        }

        if (_queryRun.changed(tablenum(PurchRFQTable)))
            queryPurchRFQTable = _queryRun.get(tablenum(PurchRFQTable));

        return queryPurchRFQTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchRFQTotals_ParmTrans construct(PurchRFQParmTable     _purchRFQParmTable,
                                              PurchRFQUpdate        _specQty)
    {
        return new PurchRFQTotals_ParmTrans(_purchRFQParmTable, _specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        VendRFQJour     vendRFQJour;

        select firstonly vendRFQJour
            where vendRFQJour.RFQId == purchRFQTable.RFQId;

        if (vendRFQJour)
        {
            return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(vendRFQJour);
        }

        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(purchRFQParmTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>