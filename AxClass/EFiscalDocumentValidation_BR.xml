<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFiscalDocumentValidation_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EFiscalDocumentValidation_BR extends FiscalDocumentValidationBase_BR
{
    Set cfopPurchaseReturnList;
    Set cfopNonTaxableReturnList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExemptCodeIsValid</Name>
				<Source><![CDATA[
    private boolean checkExemptCodeIsValid()
    {
        boolean checkResult = true;

        ListEnumerator                      listOfTaxTransEnumerator;
        FiscalDocumentTaxTransParmData_BR   taxTransParmData;

        if (this.parmFiscalDocumentLineParmData().parmListOfTaxes())
        {
            listOfTaxTransEnumerator = this.parmFiscalDocumentLineParmData().parmListOfTaxes().getEnumerator();

            while (listOfTaxTransEnumerator.moveNext())
            {
                taxTransParmData = listOfTaxTransEnumerator.current();

                if (taxTransParmData.parmType() == TaxType_BR::IPI)
                {
                    if (TaxationCodeTable_BR::isExemptCodeRequired(TaxType_BR::IPI, taxTransParmData.parmTaxationCode()) &&
                        !taxTransParmData.parmTaxExemptCode())
                    {
                        checkResult = checkFailed("@Brazil:TaxExemptCodeIPIValidationSetup");
                    }

                    if (taxTransParmData.parmTaxExemptCode() &&
                        !TaxAllowedExemptCodesForIPI_BR::IsAllowed(taxTransParmData.parmTaxExemptCode(), taxTransParmData.parmTaxationCode(), taxTransParmData.parmFiscalValue()))
                    {
                        checkResult = checkFailed(strfmt("@Brazil:TaxExemptCodeIPIValidation", taxTransParmData.parmTaxExemptCode(), taxTransParmData.parmTaxationCode()));
                    }
                }
            }
        }

        return checkResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDeliveryAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the necessary information of the delivery address of the NF-e is fulfilled and valid.
    /// </summary>
    /// <returns>
    /// True if verification is successful; otherwise, false.
    /// </returns>
    protected boolean checkDeliveryAddress()
    {
        #isoCountryRegionCodes
        LogisticsAddressCity            deliveryCity;
        boolean                         checkResult = true;

        if (!this.getDeliveryPostalAddress())
        {
            return true;
        }

        deliveryCity = LogisticsAddressCity::findLogisticsAddressMap(this.getDeliveryPostalAddress());

        if (!LogisticsAddressCountryRegionTranslation::find(this.getDeliveryPostalAddress().CountryRegionId).ShortName)
        {
            logger.logError(strfmt("@GLS64350"));
            checkResult = false;
        }

        if (!deliveryCity)
        {
            logger.logError(strfmt("@GLS64353"));
            checkResult = false;
        }
        else if (LogisticsAddressCountryRegion::find(this.getDeliveryPostalAddress().CountryRegionId).ISOcode == #isoBR)
        {
            if (!deliveryCity.IBGECode_BR)
            {
                logger.logError(strfmt("@GLS220087", deliveryCity.Name));
                checkResult = false;
            }
            else if (strkeep(deliveryCity.IBGECode_BR,'0123456789') != deliveryCity.IBGECode_BR
                    || strlen(deliveryCity.IBGECode_BR) != 7)
            {
                logger.logError(strfmt("@GLS220088", deliveryCity.Name));
                checkResult = false;
            }
        }

        if (!this.getDeliveryPostalAddress().DistrictName)
        {
            logger.logError("@GLS220080");
            checkResult = false;
        }

        return checkResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the header of the NF-e.
    /// </summary>
    /// <returns>
    /// True if verification is successful; otherwise, false.
    /// </returns>
    protected boolean checkHeader()
    {
        boolean checkResult = true;

        #NFPrinting_BR;

        if (!this.parmFiscalDocumentParmData().parmFiscalDocumentSeries())
        {
            logger.logError("@GLS64349");
            checkResult = false;
        }

        if (this.parmFiscalDocumentParmData().parmFiscalDocumentSeries()
            && strkeep(this.parmFiscalDocumentParmData().parmFiscalDocumentSeries(), '0123456789') != this.parmFiscalDocumentParmData().parmFiscalDocumentSeries())
        {
            logger.logError("@GLS62587");
            checkResult = false;
        }

        if (this.parmFiscalDocumentParmData().parmLines().elements() > #EFDmaxItemNumber)
        {
            logger.logError(strfmt("@GLS62606", #EFDmaxItemNumber));
            checkResult = false;
        }

        return checkResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIssuer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the necessary information of the issuer of the NF-e is fulfilled and valid.
    /// </summary>
    /// <returns>
    /// True if verification is successful; otherwise, false.
    /// </returns>
    protected boolean checkIssuer()
    {
        LogisticsPostalAddress  fiscalEstablishmentPostalAddress;
        boolean                 checkResult = true;

        if (this.parmFiscalDocumentParmData().parmFiscalEstablishmentPostalAddress())
        {
            fiscalEstablishmentPostalAddress    = LogisticsPostalAddress::findRecId(this.parmFiscalDocumentParmData().parmFiscalEstablishmentPostalAddress());
        }

        if (!this.parmFiscalDocumentParmData().parmFiscalEstablishmentCNPJCPF())
        {
            logger.logError("@GLS62599");
            checkResult = false;
        }
        else if (!FiscalInformationUtil_BR::isCNPJValid(this.parmFiscalDocumentParmData().parmFiscalEstablishmentCNPJCPF()))
        {
            logger.logError("@GLS62600");
            checkResult = false;
        }

        if (!this.parmFiscalDocumentParmData().parmFiscalEstablishmentIE())
        {
            logger.logError("@GLS62603");
            checkResult = false;
        }
        else if (!FiscalInformationUtil_BR::isIEValid(this.parmFiscalDocumentParmData().parmFiscalEstablishmentIE(), fiscalEstablishmentPostalAddress.State))
        {
            logger.logError("@GLS62593");
            checkResult = false;
        }

        if (!this.parmFiscalDocumentParmData().parmFiscalEstablishmentName())
        {
            logger.logError("@GLS62598");
            checkResult = false;
        }

        return checkResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIssuerAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the necessary information of the issuer address of the NF-e is fulfilled and valid.
    /// </summary>
    /// <returns>
    /// True if verification is successful; otherwise, false.
    /// </returns>
    protected boolean checkIssuerAddress()
    {
        LogisticsPostalAddress          issuerPostalAddress;
        LogisticsAddressCountryRegion   issuerCountryRegion;
        LogisticsAddressCountryRegionTranslation issuerCountryRegionTranslation;
        LogisticsAddressCity            issuerCity;
        boolean                         checkResult = true;
        ;

        issuerPostalAddress = LogisticsPostalAddress::findRecId(this.parmFiscalDocumentParmData().parmFiscalEstablishmentPostalAddress());
        issuerCountryRegion = LogisticsAddressCountryRegion::find(issuerPostalAddress.CountryRegionId);
        issuerCountryRegionTranslation = LogisticsAddressCountryRegionTranslation::find(issuerPostalAddress.CountryRegionId);
        issuerCity          = LogisticsAddressCity::findLogisticsAddressMap(issuerPostalAddress);

        if (!issuerPostalAddress.StreetNumber)
        {
            logger.logError("@GLS62589");
            checkResult = false;
        }
        if (!issuerPostalAddress.Street)
        {
            logger.logError("@GLS62590");
            checkResult = false;
        }

        if (!LogisticsAddressCountryRegionTranslation::find(issuerPostalAddress.CountryRegionId).ShortName)
        {
            logger.logError("@GLS62601");
            checkResult = false;
        }
        if (!issuerCountryRegion.BACENCode_BR)
        {
            logger.logError("@GLS62591");
            checkResult = false;
        }
        else if (strkeep(issuerCountryRegion.BACENCode_BR,'0123456789') != issuerCountryRegion.BACENCode_BR)
        {
            logger.logError("@GLS62592");
            checkResult = false;
        }

        if (!issuerCity)
        {
            logger.logError("@GLS62597");
            checkResult = false;
        }
        else
        {
            if (!issuerCity.IBGECode_BR)
            {
                logger.logError(strfmt("@GLS62594", issuerCity.Name));
                checkResult = false;
            }
            else if (strkeep(issuerCity.IBGECode_BR,'0123456789') != issuerCity.IBGECode_BR)
            {
                logger.logError(strfmt("@GLS62595", issuerCity.Name));
                checkResult = false;
            }
            else if (strlen(strkeep(issuerCity.IBGECode_BR,'0123456789')) != 7)
            {
                logger.logError(strfmt("@GLS62596", issuerCity.Name));
                checkResult = false;
            }
        }

        if (!issuerPostalAddress.DistrictName)
        {
            logger.logError("@GLS220089");
            checkResult = false;
        }

        if (!issuerPostalAddress.State)
        {
            logger.logError("@GLS62604");
            checkResult = false;
        }
        else if (strlen(issuerPostalAddress.State) != 2)
        {
            logger.logError("@GLS62605");
            checkResult = false;
        }
        return checkResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRecipient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the necessary information of the recipient of the NF-e is fulfilled and valid.
    /// </summary>
    /// <returns>
    /// True if verification is successful; otherwise, false.
    /// </returns>
    protected boolean checkRecipient()
    {
        #isoCountryRegionCodes
        LogisticsAddressCountryRegion   recipientCountryRegion;
        LogisticsAddressCity            recipientCity;
        boolean                         checkResult = true;

        recipientCountryRegion = LogisticsAddressCountryRegion::find(this.getThirdPartyPostalAddress().CountryRegionId);
        recipientCity          = LogisticsAddressCity::findLogisticsAddressMap(this.getThirdPartyPostalAddress());

        if (!this.parmFiscalDocumentParmData().parmThirdPartyName())
        {
            logger.logError("@GLS62615");
            checkResult = false;
        }

        //Add check for suframa

        if (!recipientCity)
        {
            recipientCity = LogisticsAddressCity::findCity(this.getThirdPartyPostalAddress().City, this.getThirdPartyPostalAddress().CountryRegionId);

            if (!recipientCity)
            {
                logger.logError("@GLS62597");
                checkResult = false;
            }
        }

        // the next validations are valid for Brazilian recipients only
        if (recipientCountryRegion.ISOcode != #isoBR)
        {
            return checkResult;
        }

        if (this.parmFiscalDocumentParmData().parmFiscalDocumentAccountNum())
        {
            if (this.parmFiscalDocumentParmData().thirdPartyType() == DirPartyType::Person)
            {
                if (!this.parmFiscalDocumentParmData().parmThirdPartyCNPJCPF())
                {
                    logger.logError("@GLS62611");
                    checkResult = false;
                }
                else if (!FiscalInformationUtil_BR::isCPFValid(this.parmFiscalDocumentParmData().parmThirdPartyCNPJCPF()))
                {
                    logger.logError("@GLS62612");
                    checkResult = false;
                }
            }
            else
            {
                if (!this.parmFiscalDocumentParmData().parmThirdPartyCNPJCPF())
                {
                    logger.logError("@GLS62609");
                    checkResult = false;
                }
                else if (!FiscalInformationUtil_BR::isCNPJValid(this.parmFiscalDocumentParmData().parmThirdPartyCNPJCPF()))
                {
                    logger.logError("@GLS62610");
                    checkResult = false;
                }

                if (this.parmFiscalDocumentParmData().parmThirdPartyIcmsContributor() == NoYes::Yes && !this.parmFiscalDocumentParmData().parmThirdPartyIE())
                {
                    logger.logError("@GLS62613");
                    checkResult = false;
                }
                else if (this.parmFiscalDocumentParmData().parmThirdPartyIE() && !FiscalInformationUtil_BR::isIEValid(this.parmFiscalDocumentParmData().parmThirdPartyIE(), this.getThirdPartyPostalAddress().State))
                {
                    logger.logError("@GLS62614");
                    checkResult = false;
                }
            }
        }

        if (!recipientCity.IBGECode_BR)
        {
            logger.logError(strFmt("@GLS220086", recipientCity.Name));
            checkResult = false;
        }
        else
        {
            if (strkeep(recipientCity.IBGECode_BR,'0123456789') != recipientCity.IBGECode_BR)
            {
                logger.logError(strFmt("@GLS220088", recipientCity.Name));
                checkResult = false;
            }
            if (strlen(strkeep(recipientCity.IBGECode_BR,'0123456789')) != 7)
            {
                logger.logError(strFmt("@GLS220088", recipientCity.Name));
                checkResult = false;
            }
        }

        if (!this.getThirdPartyPostalAddress().DistrictName)
        {
            logger.logError("@GLS100286");
        }

        return checkResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxationOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the taxation origin and ICMS values are valid
    /// Rule to be checked is:
    /// - CFOP is interstate outgoing
    /// - AND thirdy party IE is not exempt
    /// - AND taxation origin is 1, 2 or 3
    /// - AND ICMS is greater than 4%
    /// - AND document date is greater than 1/1/2013
    /// Exception applies to return orders from 1/1/2013 and 4/1/2013
    /// </summary>
    /// <returns>
    /// True if verification is successful; otherwise, false.
    /// </returns>
    protected boolean checkTaxationOrigin()
    {
        #define.ruleStartDate(01\01\2013)
        #define.ruleExceptionDateLimit(01\04\2013)

        boolean checkResult = true;

        if (!this.isCfopInNonTaxableList()
            && this.isCfopOtherStateOutGoing()
            && !this.isCfopSalesByPos()
            && !this.isThirdPartyIeExempt()
            && this.isTaxationOriginImport()
            && this.hasIcmsGreaterThanFourPercent())
        {
            if (fiscalDocumentParmData.parmFiscalDocumentDate() >= #ruleExceptionDateLimit
                || (fiscalDocumentParmData.parmFiscalDocumentDate() >= #ruleStartDate
                    && !this.isCfopInPurchaseReturnList()))
            {
                checkResult = false;
            }
        }

        return checkResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIcmsGreaterThanFourPercent</Name>
				<Source><![CDATA[
    private boolean hasIcmsGreaterThanFourPercent()
    {
        #define.taxValueLimit(4)

        ListEnumerator                      listOfTaxTransEnumerator;
        FiscalDocumentTaxTransParmData_BR   taxTransParmData;

        boolean returnValue     = false;

        if (this.parmFiscalDocumentLineParmData().parmListOfTaxes())
        {
            listOfTaxTransEnumerator = this.parmFiscalDocumentLineParmData().parmListOfTaxes().getEnumerator();

            while (listOfTaxTransEnumerator.moveNext())
            {
                taxTransParmData = listOfTaxTransEnumerator.current();

                if (taxTransParmData.parmType() == TaxType_BR::ICMS
                    && this.isTaxationCodeInRuleList(taxTransParmData.parmTaxationCode())
                    && taxTransParmData.parmTaxValue() > #taxValueLimit)
                {
                    returnValue = true;
                }
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNonTaxableCfopList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the CFOP list that are allowed to use ICMS > 4%
    /// for taxation origins DirectImport, Import and ImportNoSimilar
    /// </summary>
    protected void initNonTaxableCfopList()
    {
        cfopNonTaxableReturnList = new Set(Types::String);

        cfopNonTaxableReturnList.add('6107');
        cfopNonTaxableReturnList.add('6108');
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchaseReturnCfopList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the CFOP list that are allowed to use ICMS > 4% between 01/01/13 and 04/01/13
    /// for taxation origins DirectImport, Import and ImportNoSimilar
    /// </summary>
    protected void initPurchaseReturnCfopList()
    {
        cfopPurchaseReturnList = new Set(Types::String);

        cfopPurchaseReturnList.add('6201');
        cfopPurchaseReturnList.add('6202');
        cfopPurchaseReturnList.add('6208');
        cfopPurchaseReturnList.add('6209');
        cfopPurchaseReturnList.add('6210');
        cfopPurchaseReturnList.add('6410');
        cfopPurchaseReturnList.add('6411');
        cfopPurchaseReturnList.add('6412');
        cfopPurchaseReturnList.add('6413');
        cfopPurchaseReturnList.add('6503');
        cfopPurchaseReturnList.add('6553');
        cfopPurchaseReturnList.add('6555');
        cfopPurchaseReturnList.add('6556');
        cfopPurchaseReturnList.add('6660');
        cfopPurchaseReturnList.add('6661');
        cfopPurchaseReturnList.add('6662');
        cfopPurchaseReturnList.add('6664');
        cfopPurchaseReturnList.add('6665');
        cfopPurchaseReturnList.add('6902');
        cfopPurchaseReturnList.add('6903');
        cfopPurchaseReturnList.add('6906');
        cfopPurchaseReturnList.add('6907');
        cfopPurchaseReturnList.add('6909');
        cfopPurchaseReturnList.add('6913');
        cfopPurchaseReturnList.add('6916');
        cfopPurchaseReturnList.add('6918');
        cfopPurchaseReturnList.add('6919');
        cfopPurchaseReturnList.add('6921');
        cfopPurchaseReturnList.add('6925');
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCfopInNonTaxableList</Name>
				<Source><![CDATA[
    private boolean isCfopInNonTaxableList()
    {
        return cfopNonTaxableReturnList.in(strRem(fiscalDocumentLineParmData.parmCFOP(), "."));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCfopInPurchaseReturnList</Name>
				<Source><![CDATA[
    private boolean isCfopInPurchaseReturnList()
    {
        return cfopPurchaseReturnList.in(strRem(fiscalDocumentLineParmData.parmCFOP(), "."));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCfopOtherStateOutGoing</Name>
				<Source><![CDATA[
    private boolean isCfopOtherStateOutGoing()
    {
        CfopDirectionCheck_BR cfopDirectionCheck;
        cfopDirectionCheck = CfopDirectionCheck_BR::construct(fiscalDocumentLineParmData.parmCFOP());

        return cfopDirectionCheck.isOtherStateOutgoing();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCfopSalesByPos</Name>
				<Source><![CDATA[
    private boolean isCfopSalesByPos()
    {
        #define.CfopSalesByPos('6929')

        return strRem(fiscalDocumentLineParmData.parmCFOP(), ".") == #CfopSalesByPos;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxationCodeInRuleList</Name>
				<Source><![CDATA[
    private boolean isTaxationCodeInRuleList(TaxationCode_BR _taxationCode)
    {
        str taxationCodeList = "00,10,20,70,90";

        return strScan(taxationCodeList, _taxationCode, 1, strLen(taxationCodeList)) > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxationOriginImport</Name>
				<Source><![CDATA[
    private boolean isTaxationOriginImport()
    {
        FITaxationOrigin_BR taxationOrigin = fiscalDocumentLineParmData.parmOrigin();

        return taxationOrigin == FITaxationOrigin_BR::DirectImport
               || taxationOrigin == FITaxationOrigin_BR::Import
               || taxationOrigin == FITaxationOrigin_BR::NationalImportContent
               || taxationOrigin == FITaxationOrigin_BR::NationalGreaterThan70ImportContent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isThirdPartyIeExempt</Name>
				<Source><![CDATA[
    private boolean isThirdPartyIeExempt()
    {
        #define.exempt('ISENTO')

        return !fiscalDocumentParmData.parmThirdPartyIE()
               || fiscalDocumentParmData.parmThirdPartyIE() == #exempt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ILogger_BR _logger = new InfoLogLogger_BR())
    {
        super(_logger);

        this.initNonTaxableCfopList();
        this.initPurchaseReturnCfopList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the header of the NF-e, if necessary.
    /// </summary>
    /// <returns>
    /// True if validation is successful; otherwise, false.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean validateHeader()
    {
        boolean ok = true;

        if (this.isEFDValidationNeeded())
        {
            ok = this.checkHeader();
            ok = this.checkIssuer() && ok;
            ok = this.checkIssuerAddress() && ok;
            ok = this.checkRecipient() && ok;
            ok = this.checkDeliveryAddress() && ok;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateICMSOrISS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if a line of the NF-e has an ICMS or ISS tax type, if necessary.
    /// </summary>
    /// <returns>
    /// True if validation is successful; otherwise, false.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Line)
    ]
    public boolean validateICMSOrISS()
    {
        boolean                             checkResult = true;
        ListEnumerator                      listOfTaxTransEnumerator;
        FiscalDocumentTaxTransParmData_BR   taxTransParmData;
        boolean                             hasICMSOrISS = false;;

        if (!this.isEFDValidationNeeded())
        {
            return true;
        }

        if (this.parmFiscalDocumentParmData().parmComplementaryType() != InvoiceComplementaryType_BR::Blank
            && this.parmFiscalDocumentParmData().parmComplementaryType() != InvoiceComplementaryType_BR::Price)
        {
            return true;
        }

        if (this.parmFiscalDocumentLineParmData().parmListOfTaxes())
        {
            listOfTaxTransEnumerator = this.parmFiscalDocumentLineParmData().parmListOfTaxes().getEnumerator();
            while (listOfTaxTransEnumerator.moveNext())
            {
                taxTransParmData = listOfTaxTransEnumerator.current();
                if (taxTransParmData.parmType() == TaxType_BR::ICMS
                    || taxTransParmData.parmType() == TaxType_BR::ISS)
                {
                    hasICMSOrISS = true;
                }
            }
        }

        if (!hasICMSOrISS)
        {
            logger.logError("@GLS64351");
            checkResult = false;
        }

        return checkResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the necessary information in a line of the NF-e is fulfilled, if necessary.
    /// </summary>
    /// <returns>
    /// True if validation is successful; otherwise, false.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Line)
    ]
    public boolean validateLine()
    {
        boolean checkResult = true;

        if (!this.isEFDValidationNeeded())
        {
            return checkResult;
        }

        if (!this.parmFiscalDocumentLineParmData().parmDescription())
        {
            logger.logError(strFmt("@GLS220081", this.parmFiscalDocumentLineParmData().parmItemId()));
            checkResult = false;
        }

        if (!this.parmFiscalDocumentLineParmData().parmItemId())
        {
            logger.logError("@GLS62617");
            checkResult = false;
        }

        if (!this.parmFiscalDocumentLineParmData().parmCFOP())
        {
            logger.logError(strFmt("@GLS58", this.parmFiscalDocumentLineParmData().parmItemType(), this.parmFiscalDocumentLineParmData().parmItemId()));
            checkResult = false;
        }

        if (!this.checkTaxationOrigin())
        {
            logger.logError("@SYS4002133");
            checkResult = false;
        }

        if (!this.checkExemptCodeIsValid())
        {
            checkResult = false;
        }

        return checkResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMaximumNumberOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the number of lines of the NF-e does not exceed the maximum allowed, if necessary.
    /// </summary>
    /// <returns>
    /// True if validation is successful; otherwise, false.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean validateMaximumNumberOfLines()
    {
        #define.MaximumAllowedNumberOfLines (990)

        boolean ok = true;

        if (this.isEFDValidationNeeded())
        {
            if (this.parmFiscalDocumentParmData().parmLines().elements() > #MaximumAllowedNumberOfLines)
            {
                logger.logError("@GLS100283");
                ok = false;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductLinesHaveUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if a line of the NF-e that contains a product has an unit specified, if necessary.
    /// </summary>
    /// <returns>
    /// True if validation is successful; otherwise, false.
    /// </returns>
    [
        FiscalDocumentValidationAttribute(FiscalDocumentClassification_BR::Complementary),
        FiscalDocumentValidationAttribute(FiscalDocumentClassification_BR::DeliverySlip),
        FiscalDocumentValidationAttribute(FiscalDocumentClassification_BR::Purch),
        FiscalDocumentValidationAttribute(FiscalDocumentClassification_BR::Return),
        FiscalDocumentValidationAttribute(FiscalDocumentClassification_BR::Sales),
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Line)
    ]
    public boolean validateProductLinesHaveUnit()
    {
        boolean checkResult = true;

        if (this.parmFiscalDocumentLineParmData().parmItemType() == FiscalDocumentLineItemType_BR::Product
            && !this.parmFiscalDocumentLineParmData().parmUnit())
        {
            logger.logError(strFmt("@GLS64354", this.parmFiscalDocumentLineParmData().parmItemId()));
            checkResult = false;
        }

        return checkResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxationCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the taxation code is specified for PIS and COFINS tax types of the NF-e, if necessary.
    /// </summary>
    /// <returns>
    /// True if validation is successful; otherwise, false.
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::TaxTrans)
    ]
    public boolean validateTaxationCode()
    {
        boolean checkResult = true;

        if (!this.isEFDValidationNeeded())
        {
            return true;
        }

        if (this.parmFiscalDocumentTaxTransParmData().parmType() != TaxType_BR::PIS
            && this.parmFiscalDocumentTaxTransParmData().parmType() != TaxType_BR::COFINS)
        {
            return true;
        }

        if (!this.parmFiscalDocumentTaxTransParmData().parmTaxationCode())
        {
            logger.logError("@GLS64352");
            checkResult = false;
        }

        return checkResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateThirdPartyCnpjAgainstAccessKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the CNPJ of the Third Party is the same of the CNPJ in the Access Key
    /// </summary>
    /// <returns>
    /// True if validation succeeds, false otherwise
    /// </returns>
    [
        FiscalDocumentValidationAttribute,
        FiscalDocumentValidationElementAttribute(FiscalDocumentElement_BR::Header)
    ]
    public boolean validateThirdPartyCnpjAgainstAccessKey()
    {
        CNPJCPFNum_BR             accessKeyCnpj;
        EFDocAccessKey_BR         fiscalDocumentAccessKey;
        boolean                   ok = true;

        fiscalDocumentAccessKey = this.parmFiscalDocumentParmData().parmFiscalDocumentAccessKey();

        if (this.parmFiscalDocumentParmData().isElectronic() &&
            this.parmFiscalDocumentParmData().parmFiscalDocumentIssuer() == FiscalDocumentIssuer_BR::ThirdParty &&
            fiscalDocumentAccessKey)
        {
            accessKeyCnpj = strkeep(EFDocAccessKeyBase_BR::getCNPJNumber(fiscalDocumentAccessKey), '0123456789');

            if (accessKeyCnpj != strKeep(this.parmFiscalDocumentParmData().parmThirdPartyCNPJCPF(), '0123456789'))
            {
                logger.logError("@SYS4003250");
                ok = false;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>