<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_OutlayUnreal</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25RegCalc_OutlayUnreal extends RTax25RegCalc implements BatchRetryable
{
    Set     profits;
    int     transCount;
    Amount  totalAmount;
    RTax25Query                 childQuery;
    RTax25RegisterJournalTrans  childJournalTrans;
    RecordSortedList            registerTransList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addProfits</Name>
				<Source><![CDATA[
    private void addProfits(RefRecId _profitTableRecId)
    {
        if (_profitTableRecId &&
            RTax25ProfitTable::checkProfitRecursion(RTax25ProfitTable::find(_profitTableRecId).ParentProfitRecId,
                                                                            _profitTableRecId))
        {
            profits.add(_profitTableRecId);
            this.buildChildProfit(_profitTableRecId, _profitTableRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildChildProfit</Name>
				<Source><![CDATA[
    private void buildChildProfit(
        RefRecId _parentProfitTableRecId,
        RefRecId _mainProfitTableRecId)
    {
        RTax25ProfitTable  rTax25ProfitTable;

        while select RecId from rTax25ProfitTable
            where rTax25ProfitTable.ParentProfitRecId  == _parentProfitTableRecId
               && rTax25ProfitTable.RecId              != _mainProfitTableRecId
        {
            this.addProfits(rTax25ProfitTable.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProfitList</Name>
				<Source><![CDATA[
    private void buildProfitList()
    {
        RTax25RegisterProfit     rTax25RegisterProfit;
        RTax25DebtModel          rTax25DebtModel;
        RTax25DebtLedgerAccounts rTax25DebtLedgerAccounts;

        profits = new Set(Types::Int64);

        while select rTax25ProfitTable
        from rTax25RegisterProfit
          where rTax25RegisterProfit.RegisterId == regType.registerId()
        {
            this.addProfits(rTax25RegisterProfit.rTax25ProfitTable);
        }

        // Add profit codes for debit/credit debt movement
        rTax25DebtModel = RTax25DebtModel::findRecId(CustParameters::rTax25DebtModelTax());
        if (rTax25DebtModel.AccountingPolicy == RTax25DebtPolicy::Total)
        {
            this.addProfits(rTax25DebtModel.RTax25ProfitTableLoss);
            this.addProfits(rTax25DebtModel.RTax25ProfitTableProfit);
        }
        else
        {
            while select RTax25ProfitTableLoss, RTax25ProfitTableProfit from rTax25DebtLedgerAccounts
            where rTax25DebtLedgerAccounts.DebtModel == rTax25DebtModel.RecId
            {
                this.addProfits(rTax25DebtLedgerAccounts.RTax25ProfitTableLoss);
                this.addProfits(rTax25DebtLedgerAccounts.RTax25ProfitTableProfit);
            }
        }

        this.addProfits(VendParameters::find().rTax25ProfitTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        try
        {
            ttsbegin;

            super();

            this.buildProfitList();
            this.calcAmounts();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAmounts</Name>
				<Source><![CDATA[
    private void calcAmounts()
    {
        int                  idx;
        TableId             detachedTableId;
        RTax25RegisterTrans_OutlayUnreal    regTrans;
        boolean             loop;
        container           childRegisters = regType.childRegisters();
        RefRecId            prevProfit;

        if (conlen(childRegisters) == 0 || profits.empty())
            return;

        this.progressInit("", conlen(childRegisters) + 1);
        progress.setCaption("@GLS101407");
        progress.setCount(0);

        transCount = 0;

        for (idx = 1; idx <= conlen(childRegisters); idx ++)
        {
            childJournalTrans = RTax25RegCalcController::findChildJournalTrans(conpeek(childRegisters, idx), registerJournalTrans);
            childQuery = RTax25Query::newParameters(conpeek(childRegisters, idx), childJournalTrans, true);
            detachedTableId = childQuery.getRegType().detachedTableId();

            if (childQuery.first())
            {
                do
                {
                    this.insertFromRegister(childQuery.getRecord());
                }
                while (childQuery.next());
            }

            progress.setText(childQuery.getRegType().description());
            progress.incCount();
        }

        progress.setText("@SYP4860779");

        transCount = 0;
        loop = registerTransList.first(regTrans);
        while (loop)
        {
            if (regTrans.RTax25ProfitTable != prevProfit)
            {
                if (prevProfit)
                {
                    transCount++;
                    this.insertFooter(prevProfit);
                }
                prevProfit = regTrans.RTax25ProfitTable;
                transCount++;
                this.insertHeader(prevProfit);
            }

            transCount++;
            totalAmount += regTrans.profitAmount;

            regTrans.LineNumber = -regTrans.LineNumber;
            if (regQuery.getSortedList().find(regTrans))
            {
                regQuery.getSortedList().del(regTrans);
                regTrans.LineNumber = transCount;
                regQuery.getSortedList().ins(regTrans);
            }

            loop = registerTransList.next(regTrans);
        }
        if (prevProfit)
        {
            transCount++;
            this.insertFooter(prevProfit);
        }
        progress.incCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProfitTableRecId</Name>
				<Source><![CDATA[
    private RefRecId getProfitTableRecId(RTax25ProfitTable _profitTable)
    {
        return _profitTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFooter</Name>
				<Source><![CDATA[
    private void insertFooter(refRecId _profitTableRecId)
    {
        regQuery.addFooterRecord(_profitTableRecId,
                                 [dateNull(),
                                  "",
                                  "@SYS7446",
                                  totalAmount,
                                  0.0],
                                 0,
                                 strfmt("@GLS103974", RTax25ProfitTable::find(_profitTableRecId).ProfitId),
                                 transCount);
        totalAmount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromRegister</Name>
				<Source><![CDATA[
    #define.OutlayUnrealOther( [1,  3,  4,  5,  0])
    #define.InventReceipt(     [2,  10, 3,  13, 16])
    #define.DebtCreditMovement([10, 0,  3, 15, 0])
    #define.OutlayRealTax(     [3,  1,  0,  6,  0])
    private boolean insertFromRegister(RTax25RegisterTransMap _regTrans)
    {
        RTax25RegType_DebtDebitMovement typeDebit;
        RTax25RegisterTrans_OutlayUnreal regTrans;

        Amount                      profitAmount;
        RTax25FieldId               dateField,
                                    nameField,
                                    txtField,
                                    amountField,
                                    amountField2;
        container                   values;

        anytype                     anyZero = 0.0;
        RTax25DebtPeriodType        periodType;
        anytype                     anyDate;
        anytype                     anyName;
        anytype                     anyTxt;

        if (!profits.in(_regTrans.rTax25ProfitTable))
            return false;

        switch (_regTrans.TableId)
        {
            case tablenum(RTax25RegisterTrans_OutlayUnrealOther):
                [dateField, nameField, txtField, amountField, amountField2] = #OutlayUnrealOther;
                break;
            case tablenum(RTax25RegisterTrans_InventReceipt):
                [dateField, nameField, txtField, amountField, amountField2] = #InventReceipt;
                break;
            case tablenum(RTax25RegisterTrans_DebtDebitMovement):
                if (! childJournalTrans.Approved)
                    return false;
                
                typeDebit = childQuery.getRegType();
                periodType = RTax25DebtPeriodType::newModelParameters(RTax25DebtType::Debit, CustParameters::rTax25DebtModelTax());
                periodType.prepareLabels();

                [dateField, nameField, txtField, amountField, amountField2] = [9 + periodType.rowCount(), 0,  3,  11 + periodType.rowCount(), 0]; //[CloseDate, 0, TransactionDescription, CloseAmount, 0]
                break;
            case tablenum(RTax25RegisterTrans_DebtCreditMovement):
                if (! childJournalTrans.Approved)
                    return false;
                [dateField, nameField, txtField, amountField, amountField2] = #DebtCreditMovement;
                break;
            case tablenum(RTax25RegisterTrans_OutlayRealTax):
                [dateField, nameField, txtField, amountField, amountField2] = #OutlayRealTax;
                break;
            default                                     :
                throw error(strfmt("@GLS104769", childJournalTrans.RegisterId));
        }

        profitAmount = (amountField  ? childQuery.getField(amountField)  : anyZero) +
                       (amountField2 ? childQuery.getField(amountField2) : anyZero);

        if (dateField)
        {
            anyDate = childQuery.getField(dateField);
        }
        else
        {
            anyDate = dateNull();
        }
        if (nameField)
        {
            anyName = childQuery.getField(nameField);
        }
        else
        {
            anyName = RTax25ProfitTable::find(_regTrans.rTax25ProfitTable).Description;
        }
        if (txtField)
        {
            anyTxt = childQuery.getField(txtField);
        }
        else
        {
            anyTxt = "";
        }
        values       = [anyDate, anyName, anyTxt, profitAmount, 0.0];

        transCount ++;
        regTrans = regQuery.addBodyRecord(_regTrans.rTax25ProfitTable,
                               values,
                                          _regTrans.TableId,
                                          _regTrans.RecId,
                                          _regTrans.LineDescription,
                                          -transCount,
                               profitAmount);
        regTrans.LineNumber = -regTrans.LineNumber;
        registerTransList.ins(regTrans);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHeader</Name>
				<Source><![CDATA[
    private void insertHeader(RefRecId _profitTableRecId)
    {
        regQuery.addHeaderRecord(_profitTableRecId,
                                 conNull(),
                                 0,
                                 strfmt("@GLS104108", RTax25ProfitTable::find(_profitTableRecId).ProfitId),
                                 transCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        boolean ret;

        ret = super(_registerJournalTrans, _batch);
        registerTransList = new RecordSortedList(tablenum(RTax25RegisterTrans_OutlayUnreal));
        registerTransList.sortOrder(fieldnum(RTax25RegisterTrans_OutlayUnreal, RTax25ProfitTable), fieldnum(RTax25RegisterTrans_OutlayUnreal, LineNumber));

        return ret;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>