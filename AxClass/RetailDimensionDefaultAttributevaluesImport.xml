<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDimensionDefaultAttributevaluesImport</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailDimensionDefaultAttributevaluesImport</c> class is used to insert the dimension default attribute values.
/// </summary>
public static class RetailDimensionDefaultAttributevaluesImport
{
    private static boolean isEcoResValueSelectForUpdateDisableWhileSettingAttributeValueFlag;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setAttributeValueTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaultvlaues of Attributedatatype are inserted.
    /// </summary>
    /// <param name = "_callerMasterOrDistinctProduct">
    /// The ID of the <c>EcoResProduct</c> table.
    /// </param>
    /// <param name = "ecoResValue">
    /// The ID of the <c>EcoResValue</c> table.
    /// </param>
    /// <param name = "_dataType">
    /// The ID of the <c>AttributeDataType</c> table.
    /// </param>
    /// <param name = "_newEcoResTextValue">
    /// The ID of the <c>EcoResTextValue</c> table.
    /// </param>
    /// <param name = "_localEcoResAttribute">
    /// The ID of the <c>EcoResAttribute</c> table.
    /// </param>
    internal static void setAttributeValueTables(EcoResProduct _callerMasterOrDistinctProduct, EcoResValue ecoResValue, AttributeDataType _dataType, EcoResTextValue _newEcoResTextValue, EcoResAttribute _localEcoResAttribute)
    {
        EcoResIntValue newEcoResIntValue;
        EcoResFloatValue newEcoResFloatValue;
        EcoResCurrencyValue newEcoResCurrencyValue;
        EcoResDateTimeValue newEcoResDateTimeValue;
        EcoResAttributeTypeUnitOfMeasure domainUnitOfMeasure;
        EcoResTextValueTranslation  ecoResTextValueTranslation;
        EcoResBooleanValue newEcoResBooleanValue;
        UnitOfMeasure unitOfMeasure;
        EcoResTextValue enumerationValue;
        EcoResAttributeType enumerationDomain;
        EcoResEnumerationAttributeTypeValue enumerationAttributeTypeValue;
        RetailRichMediaType richMediaType;
        EcoResAttributeType localEcoResAttributeType = EcoResAttributeType::find(_localEcoResAttribute.AttributeType);

        switch (_dataType)
        {
            case AttributeDataType::Currency:
                if (!ecoResValue.RecId)
                {
                    // For new attribute values create the value
                    newEcoResCurrencyValue.clear();
                    newEcoResCurrencyValue.CurrencyCode = EcoResCurrencyValue::find(EcoResAttributeDefaultValue::findByAttribute(_localEcoResAttribute.RecId).Value).CurrencyCode;
                    newEcoResCurrencyValue.CurrencyValue = _localEcoResAttribute.getDefaultValue();
                    RetailDimensionDefaultAttributevaluesImport::createValue(_callerMasterOrDistinctProduct, newEcoResCurrencyValue);
                }

                break;
            case AttributeDataType::DateTime:
                if (!ecoResValue.RecId)
                {
                    // For new attribute values create the value
                    newEcoResDateTimeValue.clear();
                    newEcoResDateTimeValue.DateTimeValue = _localEcoResAttribute.getDefaultValue();
                    RetailDimensionDefaultAttributevaluesImport::createValue(_callerMasterOrDistinctProduct, newEcoResDateTimeValue);
                }

                break;
            case AttributeDataType::Decimal:

                domainUnitOfMeasure = EcoResAttributeTypeUnitOfMeasure::findByAttributeType(localEcoResAttributeType);

                if (!ecoResValue.RecId)
                {
                    // For new attribute values create the value
                    newEcoResFloatValue.clear();
                    newEcoResFloatValue.FloatValue = _localEcoResAttribute.getDefaultValue();
                    RetailDimensionDefaultAttributevaluesImport::createValue(_callerMasterOrDistinctProduct, newEcoResFloatValue);

                    if (domainUnitOfMeasure.RecId)
                    {
                        // Set the unit of measure selection
                        if (domainUnitOfMeasure.DefaultUnitOfMeasure)
                        {
                            unitOfMeasure = UnitOfMeasure::find(domainUnitOfMeasure.DefaultUnitOfMeasure);
                            newEcoResFloatValue.FloatUnitOfMeasure = unitOfMeasure.RecId;
                            newEcoResFloatValue.update();
                        }
                    }
                }

                break;
            case AttributeDataType::Integer:

                domainUnitOfMeasure = EcoResAttributeTypeUnitOfMeasure::findByAttributeType(localEcoResAttributeType);

                if (!ecoResValue.RecId)
                {
                    // For new attribute values create the value
                    newEcoResIntValue.clear();
                    newEcoResIntValue.IntValue = _localEcoResAttribute.getDefaultValue();
                    RetailDimensionDefaultAttributevaluesImport::createValue(_callerMasterOrDistinctProduct, newEcoResIntValue);

                    if (domainUnitOfMeasure.RecId)
                    {
                        // Set the unit of measure selection
                        if (domainUnitOfMeasure.DefaultUnitOfMeasure)
                        {
                            unitOfMeasure = UnitOfMeasure::find(domainUnitOfMeasure.DefaultUnitOfMeasure);
                            newEcoResIntValue.IntUnitOfMeasure = unitOfMeasure.RecId;
                            newEcoResIntValue.update();
                        }
                    }
                }

                break;
            case AttributeDataType::Text:
                if (!ecoResValue.RecId && !_newEcoResTextValue.RecId)
                {
                    // For new attribute values create the value
                    _newEcoResTextValue.clear();
                    _newEcoResTextValue.TextValue = _localEcoResAttribute.getDefaultValue();
                    RetailDimensionDefaultAttributevaluesImport::createValue(_callerMasterOrDistinctProduct, _newEcoResTextValue);
                }

                if (localEcoResAttributeType.IsEnumeration == NoYes::Yes)
                {
                    // As the ECORESTEXTVALUE table maintains an extra row for storing the selected value of the combobox, the below code will fetch
                    // the main record's RecId for the selected value as the main record RecId is referenced in the table ECORESTEXTVALUETRANSLATION.
                    select RecId from enumerationValue where enumerationValue.TextValue == _newEcoResTextValue.TextValue
                        join RecId from enumerationAttributeTypeValue
                            where enumerationAttributeTypeValue.Value == enumerationValue.RecId
                        join RecId from enumerationDomain
                            where enumerationDomain.RecId == enumerationAttributeTypeValue.AttributeType &&
                                enumerationDomain.RecId == localEcoResAttributeType.RecId;

                    ecoResTextValueTranslation = EcoResTextValueTranslation::findByTextValueLanguage(enumerationValue.RecId,SystemParameters::getSystemLanguageId());
                }

                break;
            case AttributeDataType::TrueFalse:
                if (!ecoResValue.RecId)
                {
                    // For new attribute values create the value
                    newEcoResBooleanValue.clear();
                    newEcoResBooleanValue.BooleanValue = _localEcoResAttribute.getDefaultValue();
                    RetailDimensionDefaultAttributevaluesImport::createValue(_callerMasterOrDistinctProduct, newEcoResBooleanValue);
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignDefaultAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check and assign the default attribute values to the category which is assigned.
    /// </summary>
    /// <param name = "_categoryRecId">
    /// The ID of the <c>EcoResCategory</c> record.
    /// </param>
    /// <param name = "_categoryHierarchyRecId">
    /// The ID of the <c>EcoResCategory</c> record.
    /// </param>
    public static void assignDefaultAttribute(RefRecId _categoryRecId, RefRecId _categoryHierarchyRecId)
    {
        EcoResAttribute ecoResAttribute;
        EcoResAttributeGroup attributeGroup;
        EcoResCategoryAttributeLookup categoryAttributeLookup;
        EcoResProductCategory ecoResProductCategory;
        EcoResProduct		  ecoResProduct;

        RefRecId ecoResProductRecId;
        RetailTmpEcoResAttributeGroupAttribute ecoResTmpArrGrpAttr, ecoResTmpArrGrpAttrBuf;

        RetailDimensionDefaultAttributeValuesImportContext context = RetailDimensionDefaultAttributeValuesImportContext::current();
        
        if (context != null && context.parmEcoResProductRecId())
        {
            ecoResProductRecId = context.parmEcoResProductRecId();
        }

        if (context != null && context.ecoResAttributeGroupAttribute)
        {
            ecoResTmpArrGrpAttr = context.ecoResAttributeGroupAttribute;
        }

        if (ecoResProductRecId)
        {
            while select RecId from ecoResProduct
                where ecoResProduct.RecId == ecoResProductRecId
                join ecoResProductCategory
                    where ecoResProductCategory.Product == ecoResProduct.RecId
                       && ecoResProductCategory.Category == _categoryRecId
                       && ecoResProductCategory.CategoryHierarchy == _categoryHierarchyRecId
                join Attribute from categoryAttributeLookup
                    where categoryAttributeLookup.Category == ecoResProductCategory.Category
                join ecoResAttribute
                    where ecoResAttribute.RecId == categoryAttributeLookup.Attribute
            {
                EcoResAttribute ecoResAttributeDefault = EcoResAttribute::find(ecoResAttribute.RecId);
                RetailDimensionDefaultAttributevaluesImport::setAttributeDefaultValue(ecoResProduct, ecoResAttributeDefault);
            }
        }
        else if (ecoResTmpArrGrpAttr && RetailPerfImprovementWhileAddingAttributesToAttributeGroupFlight::instance().isEnabled())
        {
            ecoResTmpArrGrpAttrBuf.linkPhysicalTableInstance(ecoResTmpArrGrpAttr);

            while select RecId from ecoResProduct
            join ecoResProductCategory
                where ecoResProductCategory.Product == ecoResProduct.RecId
                    && ecoResProductCategory.Category == _categoryRecId
                    && ecoResProductCategory.CategoryHierarchy == _categoryHierarchyRecId
            join Attribute from categoryAttributeLookup
                where categoryAttributeLookup.Category == ecoResProductCategory.Category
            join  ecoResTmpArrGrpAttrBuf
                where ecoResTmpArrGrpAttrBuf.Attribute == categoryAttributeLookup.Attribute
            {
                EcoResAttribute ecoResAttributeDefault = EcoResAttribute::find(ecoResTmpArrGrpAttrBuf.Attribute);
                RetailDimensionDefaultAttributevaluesImport::setAttributeDefaultValue(ecoResProduct, ecoResAttributeDefault);
            }
        }
        else
        {
            while select RecId from ecoResProduct
                join ecoResProductCategory
                    where ecoResProductCategory.Product == ecoResProduct.RecId
                       && ecoResProductCategory.Category == _categoryRecId
                       && ecoResProductCategory.CategoryHierarchy == _categoryHierarchyRecId
                join Attribute from categoryAttributeLookup
                    where categoryAttributeLookup.Category == ecoResProductCategory.Category
                join ecoResAttribute
                    where ecoResAttribute.RecId == categoryAttributeLookup.Attribute
            {
                EcoResAttribute ecoResAttributeDefault = EcoResAttribute::find(ecoResAttribute.RecId);
                RetailDimensionDefaultAttributevaluesImport::setAttributeDefaultValue(ecoResProduct, ecoResAttributeDefault);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSelectForUpdateDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return configuration for Select for update disabled while setting default attribute value.
    /// </summary>
    /// <returns>True when sorting is disabled. False otherwise.</returns>
    internal static boolean isSelectForUpdateDisabled()
    {
        return (RetailConfigurationParameters::getDisableSelectForUpdateWhileSettingDefaultAttributeValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAttributeDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assign the defaulat attribute values.
    /// </summary>
    /// <param name = "_callerMasterOrDistinctProduct">
    /// The ID of the <c>EcoResProduct</c> table
    /// </param>
    /// <param name = "_ecoResAttribute">
    /// The ID of the <c>EcoResAttribute</c> table
    /// </param>
    public static void setAttributeDefaultValue(EcoResProduct _callerMasterOrDistinctProduct,EcoResAttribute _ecoResAttribute)
    {
        EcoResAttributeType enumerationDomain;
        EcoResTextValue newEcoResTextValue;
        EcoResAttribute defaultEcoResAttribute;
        EcoResAttributeType defaultEcoResAttributeType ;
        EcoResAttributeDefaultValue ecoResAttributeDefaultValue;
        EcoResReferenceValue ecoResReferenceValue;
        EcoResValue referencedValue, ecoResValue;
        EcoResAttributeValue ecoResAttributeValue;
        EcoResProductInstanceValue EcoResProductInstanceValue;
        RetailStandardAttribute retailStandardAttribute;
        EcoResCategory ecoResCategory;
        ecoResProductCategory ecoresProductCategory;
        EcoResProductInstanceValue newEcoResProductInstanceValue;
        EcoResAttributeGroupAttribute ecoResAttributeGroupAttribute;
        EcoResCategoryAttributeLookup localEcoResCategoryAttributeLookup;
        EcoResCategoryHierarchyRole localEcoResCategoryHierarchyRole;
        str richMediaEditFormMenuItemName;
        AttributeValueText  textValue;
        EcoResProductAttributeValue ecoResProductAttributeValue;

        select firstonly Value from ecoResProductAttributeValue
            where ecoResProductAttributeValue.Attribute == _ecoResAttribute.RecId
                && ecoResProductAttributeValue.Product == _callerMasterOrDistinctProduct.RecId;

        isEcoResValueSelectForUpdateDisableWhileSettingAttributeValueFlag = RetailDimensionDefaultAttributevaluesImport::isSelectForUpdateDisabled();

        // Once enabled this feature in commerce parameters with 1, EcoResValue table will be disabled for select for update.
        if (isEcoResValueSelectForUpdateDisableWhileSettingAttributeValueFlag)
        {
            ecoResValue = EcoResValue::find(ecoResProductAttributeValue.Value);
        }
        else
        {
            ecoResValue = EcoResValue::find(ecoResProductAttributeValue.Value, true);
        }

        if (AttributeDataTypeDiscriminator::checkAttributeDataTypeReference(EcoResAttributeType::find(_ecoResAttribute.AttributeType).DataType))
        {
            select firstOnly defaultEcoResAttribute
                join defaultEcoResAttributeType
                where defaultEcoResAttributeType.RecId ==  defaultEcoResAttribute.AttributeType
                outer join ecoResProductInstanceValue
                    where ecoResProductInstanceValue.Product == _callerMasterOrDistinctProduct.RecId
                outer join ecoResAttributeValue
                    where ecoResAttributeValue.Attribute == defaultEcoResAttribute.RecId
                       && ecoResAttributeValue.InstanceValue == ecoResProductInstanceValue.RecId
                outer join referencedValue
                    where referencedValue.RecId == ecoResAttributeValue.Value
                exists join ecoResReferenceValue
                    where ecoResReferenceValue.RefRecId == defaultEcoResAttribute.RecId
                       && ecoResReferenceValue.RefTableId == defaultEcoResAttribute.TableId
                exists join ecoResAttributeDefaultValue
                    where ecoResAttributeDefaultValue.Attribute == _ecoResAttribute.RecId
                       && ecoResAttributeDefaultValue.Value == ecoResReferenceValue.RecId;

            // copy value from referenced attribute if set
            if (!ecoResValue.RecId && referencedValue.RecId)
            {
                ecoResAttributeValue.Attribute = _ecoResAttribute.RecId;
                ecoResAttributeValue.Value = referencedValue.pcDuplicate();
                ecoResAttributeValue.insert();
            }
            else if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                select firstOnly retailStandardAttribute
                    where retailStandardAttribute.Attribute == defaultEcoResAttribute.RecId;
                if (retailStandardAttribute)
                {
                    if ((!ecoResValue.RecId && !ecoResAttributeValue.RecId) || ecoResValue.InstanceRelationType != DictTable::getRelationTypeFromTableName(tablestr(EcoResTextValue)))
                    {
                        newEcoResTextValue.clear();
                    }
                    else
                    {
                        newEcoResTextValue = ecoResValue.RecId ? ecoResValue : EcoResValue::find(ecoResAttributeValue.value, true);
                    }
                    textValue =  RetailAttributeHelper::getStandardAttributeValue(retailStandardAttribute.StandardAttributeID, _callerMasterOrDistinctProduct.RecId);
                    if (newEcoResTextValue.TextValue != textValue)
                    {
                        newEcoResTextValue.TextValue = textValue;
                        if (newEcoResTextValue.RecId)
                        {
                            newEcoResTextValue.update();
                        }
                        else
                        {
                            if (RetailSalesTaxReferenceGroupAttributeDefaultValuePopulationFlight::instance().isEnabled())
                            {
                                if (_callerMasterOrDistinctProduct && _ecoResAttribute)
                                {
                                    EcoResAttributeValue::createValue(newEcoResTextValue,_ecoResAttribute, _callerMasterOrDistinctProduct);
                                }
                            }
                            else
                            {
                                RetailDimensionDefaultAttributevaluesImport::createValue(_callerMasterOrDistinctProduct, newEcoResTextValue);
                            }
                        }

                    }
                }
            }
        }
        else
        {
            defaultEcoResAttribute = _ecoResAttribute;
            defaultEcoResAttributeType = EcoResAttributeType::find(defaultEcoResAttribute.AttributeType);
            // if value doesn't yet exist and attribute was assigned via an attribute group create value based on the group default for the attribute.
            if (!ecoResValue.RecId)
            {
                select attributeGroupAttribute from localEcoResCategoryAttributeLookup
                    join ecoResCategory
                        where ecoResCategory.RecId == localEcoResCategoryAttributeLookup.Category
                            && _ecoResAttribute.RecId == localEcoResCategoryAttributeLookup.Attribute
                    join localEcoResCategoryHierarchyRole
                        where localEcoResCategoryHierarchyRole.CategoryHierarchy == ecoResCategory.CategoryHierarchy
                    join ecoresProductCategory
                        where ecoresProductCategory.Category == ecoResCategory.RecId
                            && ecoresProductCategory.Product == _callerMasterOrDistinctProduct.RecId;

                if (localEcoResCategoryAttributeLookup.AttributeGroupAttribute)
                {
                    ecoResAttributeGroupAttribute = EcoResAttributeGroupAttribute::find(localEcoResCategoryAttributeLookup.AttributeGroupAttribute);
                    if (ecoResAttributeGroupAttribute.DefaultValue)
                    {
                        newEcoResProductInstanceValue = EcoResProductInstanceValue::findByProduct(_callerMasterOrDistinctProduct.RecId);
                        if (!newEcoResProductInstanceValue.RecId)
                        {
                            newEcoResProductInstanceValue.Product = _callerMasterOrDistinctProduct.RecId;
                            newEcoResProductInstanceValue.insert();
                        }

                        EcoResAttributeValue::findOrCreateDefault(newEcoResProductInstanceValue.RecId, _ecoResAttribute.RecId, ecoResAttributeGroupAttribute);
                    }
                }
            }
        }
        RetailDimensionDefaultAttributevaluesImport::setAttributeValueTables(_callerMasterOrDistinctProduct,ecoResValue, defaultEcoResAttributeType.DataType, newEcoResTextValue, defaultEcoResAttribute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the EcoResValue record.
    /// </summary>
    /// <param name = "_callerMasterOrDistinctProduct">
    /// The ID of the <c>EcoResProduct</c> table
    /// </param>
    /// <param name = "newEcoResValue">
    /// The ID of the <c>EcoResValue</c> table
    /// </param>
    public static void createValue(EcoResProduct _callerMasterOrDistinctProduct, EcoResValue newEcoResValue)
    {
        EcoResProductInstanceValue newEcoResProductInstanceValue;
        EcoResAttributeValue newEcoResAttributeValue;
        EcoResAttribute ecoResAttribute;

        ttsbegin;

        // Create new EcoResValue record
        newEcoResValue.insert();

        // Create EcoResProductInstanceValue record
        newEcoResProductInstanceValue = EcoResProductInstanceValue::findByProduct(_callerMasterOrDistinctProduct.RecId);

        if (!newEcoResProductInstanceValue.RecId)
        {
            newEcoResProductInstanceValue.clear();
            newEcoResProductInstanceValue.Product = _callerMasterOrDistinctProduct.RecId;
            newEcoResProductInstanceValue.insert();
        }

        // Create EcoResAttributeValue record
        newEcoResAttributeValue = EcoResAttributeValue::findByInstanceAttribute(newEcoResProductInstanceValue.RecId, ecoResAttribute.RecId);
        if (!newEcoResAttributeValue)
        {
            newEcoResAttributeValue.clear();
            newEcoResAttributeValue.Value = newEcoResValue.RecId;
            newEcoResAttributeValue.InstanceValue = newEcoResProductInstanceValue.RecId;
            newEcoResAttributeValue.Attribute = ecoResAttribute.RecId;
            newEcoResAttributeValue.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>