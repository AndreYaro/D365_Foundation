<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is responsible for validating that license plates only have on-hand on a single location.
/// The expectation is that the checks are called after the final on-hand update have been performed.
/// </summary>
public final class WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheck
{
    private container inventLocationIdsWithLP, wmsLocationIdsWithLP;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>performCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the check based on the values in the parameter map.
    /// </summary>
    /// <param name = "_constraintCheckParameters">A map containing the data needed to perform checks for multiple license plates.</param>
    [Hookable(false)]
    internal void performCheck(Map _constraintCheckParameters)
    {
        MapEnumerator me = _constraintCheckParameters.getEnumerator();
                
        while (me.moveNext())
        {
            ttsbegin;

            WHSLicensePlateId  licensePlateId = me.currentKey();

            str errorTxt = this.performSingleLicensePlateCheck(licensePlateId, me.currentValue());

            if (errorTxt)
            {
                throw error(errorTxt);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockOnLicensePlate</Name>
				<Source><![CDATA[
    private void lockOnLicensePlate(WHSLicensePlateId   _licensePlateId)
    {
        WHSLicensePlate licensePlate;

        //we need this to ensure we always go to the DB so we get the lock in the DB
        licensePlate.disableCache(true);

        select pessimisticlock firstonly licensePlate
            where licensePlate.LicensePlateId == _licensePlateId;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>performSingleLicensePlateCheck</Name>
				<Source><![CDATA[
    private str performSingleLicensePlateCheck(
        WHSLicensePlateId _licensePlateId,
        WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheckParameters _parameters)
    {
        boolean lpCheckOk;
        InventLocationId inventLocationId;
        WMSLocationId   wmsLocationId;
        
        [lpCheckOk, inventLocationId, wmsLocationId] = this.validateLicensePlateOnLocation(_licensePlateId, '', '', _parameters);

        if (!lpCheckOk)
        {
            if (conLen(inventLocationIdsWithLP) > 1 && conLen(wmsLocationIdsWithLP) > 1)
            {
                InventLocationId inventLocation1IdWithLP, inventLocation2IdWithLP;
                WMSLocationId wmsLocation1IdWithLP, wmsLocation2IdWithLP;

                [inventLocation1IdWithLP, inventLocation2IdWithLP] = inventLocationIdsWithLP;
                [wmsLocation1IdWithLP, wmsLocation2IdWithLP] = wmsLocationIdsWithLP;

                InventLocation whs1WithLP = InventLocation::find(inventLocation1IdWithLP);
                InventLocation whs2WithLP = InventLocation::find(inventLocation2IdWithLP);

                return strFmt("@WAX:LicensePlateExistsOnOtherLocationWithLocationsDetails",
                    _licensePlateId,
                    inventLocation1IdWithLP,
                    whs1WithLP.InventLocationType,
                    wmsLocation1IdWithLP,
                    inventLocation2IdWithLP,
                    whs2WithLP.InventLocationType,
                    wmsLocation2IdWithLP);
            }

            return strFmt("@WAX:LicensePlateExistsOnOtherLocation", _licensePlateId);
        }

        // check consistency of nested license plates - we need to do it here since lp's can be nested and un-nested in the same transaction
        return this.validateNestedLicensePlateOnLocation(_licensePlateId, inventLocationId, wmsLocationId, _parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNestedLicensePlateOnLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that nested license plate exist in location different from parent location.
    /// </summary>
    /// <param name = "_licensePlateId">The license plate Id.</param>
    /// <param name = "_parentLicensePlateWarehouse">The parent license plate warehouse Id.</param>
    /// <param name = "_parentLicensePlateLocationId">The parent license plate location Id.</param>
    /// <param name = "_licensePlateLocationCheckParameters">The license plate location check parameters.</param>
    /// <returns>The result of the license plate validation.</returns>
    private str validateNestedLicensePlateOnLocation(
        WHSLicensePlateId                                                   _licensePlateId,
        InventLocationId                                                    _parentLicensePlateWarehouse,
        WMSLocationId                                                       _parentLicensePlateLocationId,
        WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheckParameters   _licensePlateLocationCheckParameters)
    {
        Set nestedLicensePlates = this.buildNestedLicensePlatesStructure(_licensePlateId, null);
        str errorTxt;

        if (nestedLicensePlates)
        {
            var nestedLPEnumerator = nestedLicensePlates.getEnumerator();
            
            while (nestedLPEnumerator.moveNext())
            {
                boolean lpCheckOk;
                InventLocationId inventLocationId;
                WMSLocationId wmsLocationId;

                [lpCheckOk, inventLocationId, wmsLocationId] = this.validateLicensePlateOnLocation(nestedLPEnumerator.current(), _parentLicensePlateWarehouse, _parentLicensePlateLocationId, _licensePlateLocationCheckParameters);

                if (!lpCheckOk)
                {
                    errorTxt = strFmt("@WAX:NestedLicensePlateHasInventoryOnOtherLocationThanParentError", nestedLPEnumerator.current(), _licensePlateId, _parentLicensePlateLocationId, _parentLicensePlateWarehouse);
                    break;
                }
            }
        }

        return errorTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNestedLicensePlatesStructure</Name>
				<Source><![CDATA[
    private Set buildNestedLicensePlatesStructure(
        WHSlicensePlateId   _parentLicensePlateId,
        Set                 _nestedlicensePlates)
    {
        Set nestedlicensePlatesResult = _nestedlicensePlates;

        WHSLicensePlate nestedLicensePlate;
        while select LicensePlateId from nestedLicensePlate
            where nestedLicensePlate.LicensePlateParent  == _parentLicensePlateId
        {
            if (!nestedlicensePlatesResult)
            {
                nestedlicensePlatesResult = new Set(Types::String);
            }

            nestedlicensePlatesResult.add(nestedLicensePlate.LicensePlateId);

            //we don't know how deep the structure is so we need to go recursive
            nestedlicensePlatesResult = this.buildNestedLicensePlatesStructure(nestedLicensePlate.LicensePlateId, nestedlicensePlatesResult);
        }

        return nestedlicensePlatesResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParentLicensePlateOnLocation</Name>
				<Source><![CDATA[
    private boolean validateParentLicensePlateOnLocation(
        WMSLocationId       _parentLpWMSLocationId,
        InventLocationId    _parentLpInventLocationId,
        WMSLocationId       _nestedLpWMSLocationId,
        InventLocationId    _nestedLpInventLocationId)
    {
        return (_nestedLpWMSLocationId == _parentLpWMSLocationId
            && _nestedLpInventLocationId == _parentLpInventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLicensePlateOnLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that license plate only has on-hand on a single location.
    /// </summary>
    /// <param name = "_licensePlateId">The license plate Id.</param>
    /// <param name = "_parentLicensePlateWarehouse">The parent license plate warehouse Id.</param>
    /// <param name = "_parentLicensePlateLocationId">The parent license plate location Id.</param>
    /// <param name = "_licensePlateLocationCheckParameters">The license plate location check parameters.</param>
    /// <returns>The result of the license plate validation.</returns>
    public container validateLicensePlateOnLocation(
        WHSLicensePlateId                                                   _licensePlateId,
        InventLocationId                                                    _parentLicensePlateWarehouse,
        WMSLocationId                                                       _parentLicensePlateLocationId,
        WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheckParameters   _licensePlateLocationCheckParameters)
    {
        InventLocationId    inventLocationId;
        WMSLocationId       wmsLocationId;
        Counter             lpCheckOnLocations;

        Set excludedWarehouses = _licensePlateLocationCheckParameters.parmExcludedWarehouses();

        inventLocationIdsWithLP = conNull();
        wmsLocationIdsWithLP = conNull();
        
        //we may be blocked here but that is by intention since we need to ensure that only one session is performing the check at a time to ensure the consistency
        this.lockOnLicensePlate(_licensePlateId);
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            InventSum   inventSum;
            var qe = WHSLicensePlateOnMultipleLocationCheckQueryBuilder::construct().instantiateInventSumQueryObject(inventSum, _licensePlateId, _licensePlateLocationCheckParameters.parmExcludeUserLocations(), _licensePlateLocationCheckParameters.parmSingleExcludesWarehouseId());
            var so = new SysDaSearchObject(qe);
            var ss = new SysDaSearchStatement();
           
            while (ss.findNext(so) && lpCheckOnLocations < 2)
            {
                //if we are excluding the warehouse then just move to next record
                if (excludedWarehouses  != null
                    && !excludedWarehouses.in(inventSum.InventLocationId))
                {
                    continue;
                }

                if (_parentLicensePlateLocationId
                    && !this.validateParentLicensePlateOnLocation(_parentLicensePlateLocationId, _parentLicensePlateWarehouse, inventSum.wMSLocationId, inventSum.InventLocationId))
                {
                    lpCheckOnLocations = 2;
                }
                    
                lpCheckOnLocations++;

                if (inventLocationId != inventSum.InventLocationId || wmsLocationId != inventSum.wMSLocationId)
                {
                    inventLocationIdsWithLP += inventSum.InventLocationId;
                    wmsLocationIdsWithLP += inventSum.wMSLocationId;
                }

                inventLocationId = inventSum.InventLocationId;
                wmsLocationId = inventSum.wMSLocationId;
            }
        }
        else
        {
            InventDim           inventDim;
            InventSum           inventSum;

            var qe = WHSLicensePlateOnMultipleLocationCheckQueryBuilder::construct().instantiateInventSumInventDimQueryObject(inventSum, inventDim, _licensePlateId, _licensePlateLocationCheckParameters.parmExcludeUserLocations(), _licensePlateLocationCheckParameters.parmSingleExcludesWarehouseId());
            var so = new SysDaSearchObject(qe);
            var ss = new SysDaSearchStatement();
           
            while (ss.findNext(so) && lpCheckOnLocations < 2)
            {
                //if we are excluding the warehouse then just move to next record
                if (excludedWarehouses  != null
                    && !excludedWarehouses.in(inventDim.InventLocationId))
                {
                    continue;
                }

                if (_parentLicensePlateLocationId
                    && !this.validateParentLicensePlateOnLocation(_parentLicensePlateLocationId, _parentLicensePlateWarehouse, inventDim.wMSLocationId, inventDim.InventLocationId))
                {
                    lpCheckOnLocations = 2;
                }
                    
                lpCheckOnLocations++;

                if (inventLocationId != inventDim.InventLocationId || wmsLocationId != inventDim.wMSLocationId)
                {
                    inventLocationIdsWithLP += inventDim.InventLocationId;
                    wmsLocationIdsWithLP += inventDim.wMSLocationId;
                }

                inventLocationId = inventDim.InventLocationId;
                wmsLocationId = inventDim.wMSLocationId;
            }
        }

        if (lpCheckOnLocations > 1)
        {
            return [false, '', ''];
        }

        return [true, inventLocationId, wmsLocationId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheck construct()
    {
        return new WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheck();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>