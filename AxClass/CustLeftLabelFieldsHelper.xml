<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustLeftLabelFieldsHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustLeftLabelFieldsHelper</c> class modifies the structure of a form group control
/// to simulate labels on the left side of a stack of field controls.
/// </summary>
/// <remarks>
/// This class is invoked by first modeling an autodeclared group control with nested controls,
/// and passing it into the init() method after super() has been called in the init() method of
/// a form.
///
/// Some important considerations to be made when using this class:
///  1.) Nested groups will be cleared and hidden as the group is restructured. They cannot be
///      autodeclared or referenced in code.
///  2.) Captioned groups will result in a caption being placed in the resulting structure
///  3.) Nested fields will all be placed on their own row, with their label being placed to the
///      left of that control. If a set of fields are contained in a group with
///      ArrangeMethod=HorizontalLeft, they will all be placed in the same row, and the label
///      used will be from the first control in that group that has ShowLabel=Yes.
///  4.) In order to access/modify the label and row group controls, the getLabelControl and
///      getFieldGroupControl methods should be used.
/// </remarks>
public class CustLeftLabelFieldsHelper
{
    // group extended styles
    private static readonly str GES_tabularFields = enum2Symbol(enumNum(FormGroupControlExtendedStyle), FormGroupControlExtendedStyle::tabularFields);
    private static readonly str GES_tabularFieldsRow = enum2Symbol(enumNum(FormGroupControlExtendedStyle), FormGroupControlExtendedStyle::tabularFields_row);

    // static text extended styles
    private static readonly str STES_tabularFieldsRowLabel = enum2Symbol(enumNum(FormStaticTextControlExtendedStyle), FormStaticTextControlExtendedStyle::tabularFields_rowLabel);

    private const str FieldGroupNamePart = 'FieldGroup';

    private int captionGroupCounter = 0;
    private int fieldGroupCounter = 0;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restructures the specified <c>FormGroupControl</c> object to display as a column of fields with
    /// their labels on the left.
    /// </summary>
    /// <param name = "_parentGroup">The <c>FormGroupControl</c> to be restructured.</param>
    public void init(FormGroupControl _parentGroup)
    {
        this.initParentGroup(_parentGroup);
        this.buildGroups(_parentGroup, _parentGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>FormStaticTextControl</c> object used to display the label for the field row that contains the
    /// specified <c>FormControl</c> object.
    /// </summary>
    /// <param name = "_fieldControl">The <c>FormControl</c> object of a field in a field row.</param>
    /// <returns>The <c>FormStaticTextControl</c> object used to display the label.</returns>
    /// <exception cref="Exception::Error">
    /// A control was passed to the method that is not part of a field group that was generated by this class.
    /// </exception>
    public FormStaticTextControl getLabelControl(FormControl _fieldControl)
    {
        var parentControl = this.getFieldGroupControl(_fieldControl);
        if (parentControl && parentControl.controlCount() > 0)
        {
            var labelControl = parentControl.controlNum(1) as FormStaticTextControl;
            if (labelControl)
            {
                return labelControl;
            }
        }

        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldGroupControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>FormGroupControl</c> object of the field row that contains the specified <c>FormControl</c> object.
    /// </summary>
    /// <param name = "_fieldControl">The <c>FormControl</c> object of a field in a field row.</param>
    /// <returns>The <c>FormGroupControl</c> object of a field row.</returns>
    /// <exception cref="Exception::Error">
    /// A control was passed to the method that is not part of a field group that was generated by this class.
    /// </exception>
    public FormGroupControl getFieldGroupControl(FormControl _fieldControl)
    {
        var parentControl = _fieldControl.parentControl() as FormGroupControl;
        if (parentControl && strContains(parentControl.name(), FieldGroupNamePart))
        {
            return parentControl;
        }

        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParentGroup</Name>
				<Source><![CDATA[
    protected void initParentGroup(FormGroupControl _parentGroup)
    {
        // These properties are based on the TabularFields pattern with custom
        // tweaks to achieve the layout we are looking for.
        _parentGroup.extendedStyle(GES_tabularFields);
        _parentGroup.arrangeMethod(FormArrangeMethod::None);
        _parentGroup.breakable(true);
        _parentGroup.caption('');
        _parentGroup.frameType(FormFrameType::None);
        _parentGroup.allowUserSetup(FormAllowUserSetup::Restricted);
        _parentGroup.columns(1, ColumnsMode::Fixed);
        _parentGroup.frameOptionButton(FormFrameOptionButton::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGroups</Name>
				<Source><![CDATA[
    protected void buildGroups(FormGroupControl _parentGroup, FormGroupControl _currentGroup)
    {
        var controlCount = _currentGroup.controlCount();
        for (var i = 1; i <= controlCount; i++)
        {
            var formControl = _currentGroup.controlNum(i);
            var groupControl = formControl as FormGroupControl;
            if (groupControl)
            {
                if (strLen(groupControl.caption()) > 0)
                {
                    // we have a caption, so assume this is a captioned group
                    this.buildCaptionGroup(_parentGroup, groupControl.caption());
                    this.buildGroups(_parentGroup, groupControl);
                }
                else if (groupControl.arrangeMethod() == FormArrangeMethod::HorizontalFlushLeft)
                {
                    // horizontal fields, so these all go in the same row
                    this.buildFieldGroup(_parentGroup, groupControl);
                }
                else
                {
                    // nested groups
                    this.buildGroups(_parentGroup, groupControl);
                }

                // new groups will be created with controls moved to them, so hide the old groups
                groupControl.visible(false);

                if (groupControl.autoDeclaration())
                {
                    // if a group we are hiding was autodeclared, then throw an error as that group is
                    // presumably now empty and invisible anyway. the calling form should be rearchitected
                    // to not use that autodeclare
                    throw error(strFmt('Group %1 will be hidden but is autodeclared', groupControl.name()));
                }
            }
            else
            {
                // single field
                this.buildFieldGroup(_parentGroup, formControl);

                // reduce our iterator and total count, as we have moved the field control out of this group
                i--; controlCount--;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCaptionGroup</Name>
				<Source><![CDATA[
    protected void buildCaptionGroup(FormGroupControl _parentGroup, str _caption)
    {
        captionGroupCounter++;

        FormGroupControl captionGroup = _parentGroup.addControl(FormControlType::Group, strFmt('%1_CaptionGroup%2', _parentGroup.name(), captionGroupCounter));
        this.initCaptionGroup(captionGroup);

        FormStaticTextControl captionText = captionGroup.addControl(FormControlType::StaticText, captionGroup.name() + '_Caption');
        this.initCaptionText(captionText);
        captionText.text(_caption);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCaptionGroup</Name>
				<Source><![CDATA[
    protected void initCaptionGroup(FormGroupControl _captionGroup)
    {
        // These properties are based on the TabularFields Caption Group pattern
        // with custom tweaks to achieve the layout we are looking for.
        _captionGroup.extendedStyle(GES_tabularFieldsRow);
        _captionGroup.arrangeMethod(FormArrangeMethod::None);
        _captionGroup.breakable(true);
        _captionGroup.caption('');
        _captionGroup.frameType(FormFrameType::None);
        _captionGroup.style(FormStyle::Auto);
        _captionGroup.allowUserSetup(FormAllowUserSetup::No);
        _captionGroup.columns(1, ColumnsMode::Fixed);
        _captionGroup.frameOptionButton(FormFrameOptionButton::None);
        _captionGroup.width(-1, FormWidth::SizeToAvailable);
        _captionGroup.height(-1, FormHeight::SizeToAvailable);
        _captionGroup.hideIfEmpty(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCaptionText</Name>
				<Source><![CDATA[
    protected void initCaptionText(FormStaticTextControl _captionText)
    {
        // These properties are based on the TabularFields Caption Text pattern
        // with custom tweaks to achieve the layout we are looking for.
        _captionText.extendedStyle(STES_tabularFieldsRowLabel);
        _captionText.style(FormStyle::Auto);
        _captionText.visible(true);
        _captionText.allowEdit(false);
        _captionText.dragDrop(FormDragDrop::None);
        _captionText.enabled(true);
        _captionText.skip(false);
        _captionText.displayLength(-1, AutoMode::Auto);
        _captionText.displayHeight(-1, AutoMode::Auto);
        _captionText.width(-1, FormWidth::SizeToContent);
        _captionText.height(-1, FormHeight::SizeToContent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFieldGroup</Name>
				<Source><![CDATA[
    protected void buildFieldGroup(FormGroupControl _parentGroup, FormControl _fieldControl)
    {
        fieldGroupCounter++;
        FormGroupControl fieldGroup = _parentGroup.addControl(FormControlType::Group, strFmt('%1_%2%3', _parentGroup.name(), FieldGroupNamePart, fieldGroupCounter));
        this.initFieldGroup(fieldGroup);

        FormStaticTextControl fieldLabel = fieldGroup.addControl(FormControlType::StaticText, strFmt('%1_Label', fieldGroup.name()));
        fieldGroup.moveControl(fieldLabel.id());

        this.initFieldLabel(fieldLabel);

        if (_fieldControl is FormGroupControl)
        {
            FormControl lastControl;
            FormGroupControl fieldContainer = _fieldControl;
            while (fieldContainer.controlCount() > 0)
            {
                var fieldControl = fieldContainer.controlNum(1);
                this.initFieldControl(fieldControl, fieldLabel);
                fieldGroup.moveControl(fieldControl.id(), lastControl ? lastControl.id() : fieldLabel.id());
                lastControl = fieldControl;
            }
        }
        else
        {
            this.initFieldControl(_fieldControl, fieldLabel);
            fieldGroup.moveControl(_fieldControl.id(), fieldLabel.id());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldGroup</Name>
				<Source><![CDATA[
    protected void initFieldGroup(FormGroupControl _fieldGroup)
    {
        // These properties are based on the TabularFields Row Group pattern
        // with custom tweaks to achieve the layout we are looking for.
        _fieldGroup.extendedStyle(GES_tabularFieldsRow);
        _fieldGroup.arrangeMethod(FormArrangeMethod::None);
        _fieldGroup.breakable(true);
        _fieldGroup.caption('');
        _fieldGroup.frameType(FormFrameType::None);
        _fieldGroup.style(FormStyle::Auto);
        _fieldGroup.allowUserSetup(FormAllowUserSetup::No);
        _fieldGroup.columns(1, ColumnsMode::Fixed);
        _fieldGroup.frameOptionButton(FormFrameOptionButton::None);
        _fieldGroup.width(-1, FormWidth::SizeToContent);
        _fieldGroup.height(-1, FormHeight::SizeToContent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldLabel</Name>
				<Source><![CDATA[
    protected void initFieldLabel(FormStaticTextControl _fieldLabel)
    {
        // These properties are based on the TabularFields Row Label pattern
        // with custom tweaks to achieve the layout we are looking for.
        _fieldLabel.extendedStyle('');
        _fieldLabel.style(FormStyle::Auto);
        _fieldLabel.visible(true);
        _fieldLabel.allowEdit(false);
        _fieldLabel.dragDrop(FormDragDrop::None);
        _fieldLabel.enabled(true);
        _fieldLabel.skip(false);
        _fieldLabel.displayLength(-1, AutoMode::Auto);
        _fieldLabel.displayHeight(-1, AutoMode::Auto);
        _fieldLabel.width(-1, FormWidth::SizeToContent);
        _fieldLabel.height(-1, FormHeight::SizeToContent);
        _fieldLabel.text('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldControl</Name>
				<Source><![CDATA[
    protected void initFieldControl(FormControl _fieldControl, FormStaticTextControl _labelControl)
    {
        var showLabelMethodStr = identifierStr(showLabel);
        var labelTextMethodStr = identifierStr(labelText);
        var labelPositionMethodStr = identifierStr(labelPosition);

        SysDictClass fieldClass = new SysDictClass(_fieldControl.handle());
        if (fieldClass.hasObjectMethod(showLabelMethodStr) &&
            fieldClass.hasObjectMethod(labelTextMethodStr) &&
            fieldClass.hasObjectMethod(labelPositionMethodStr))
        {
            if (strLen(_labelControl.text()) == 0 && fieldClass.callObject(showLabelMethodStr, _fieldControl))
            {
                _labelControl.text(fieldClass.callObject(labelTextMethodStr, _fieldControl));
            }

            fieldClass.callObject(showLabelMethodStr, _fieldControl, false);
            fieldClass.callObject(labelPositionMethodStr, _fieldControl, LabelPosition::Left);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>