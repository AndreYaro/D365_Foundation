<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalizerProjectRevenueExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerJournalizerProjectRevenueExtension</c> class handles project revenue related event handlers.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_ProjectRevenue), SourceDocument_ProjectRevenue::ProjectRevenue)]
internal class SubledgerJournalizerProjectRevenueExtension extends SubledgerJournalizerExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to subledger journalizer events.
    /// </summary>
    protected void subscribe()
    {
        SubledgerJournalizer localSubledgerJournalizer;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            localSubledgerJournalizer = this.parmSubledgerJournalizer();
            localSubledgerJournalizer.insertingDistributedTmp += eventhandler(this.insertingDistributedTmpEventHandler);
            localSubledgerJournalizer.insertingJournalizingTmp += eventhandler(this.insertingJournalizingTmpEventHandler);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertingDistributedTmpEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// An <c>AccountingDistributionTmp</c> record insertion event handler delegate. It will be raised before the accounting
    /// distribution tmp record is created to calculate accounting currency amount.
    /// </summary>
    /// <param name = "_accountingDistributionTmp">
    /// The <c>AccountingDistributionTmp</c> record that is being inserted.
    /// </param>
    internal void insertingDistributedTmpEventHandler(AccountingDistributionTmp _accountingDistributionTmp)
    {
        this.processAccountingCurrencyAmounts(_accountingDistributionTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertingJournalizingTmpEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// An <c>AccountingDistributionTmp</c> record insertion event handler delegate. It will be raised before the accounting
    /// distribution tmp record is created to calculate accounting currency amount.
    /// </summary>
    /// <param name = "_accountingDistributionTmp">
    /// The <c>AccountingDistributionTmp</c> record that is being inserted.
    /// </param>
    internal void insertingJournalizingTmpEventHandler(AccountingDistributionTmp _accountingDistributionTmp)
    {
        this.processAccountingCurrencyAmounts(_accountingDistributionTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAccountingCurrencyAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// An <c>AccountingDistributionTmp</c> record to calculate accounting currency amount.
    /// </summary>
    /// <param name = "_accountingDistributionTmp">
    /// The <c>AccountingDistributionTmp</c> record that is being used to calculate accounting currency.
    /// </param>
    private void processAccountingCurrencyAmounts(AccountingDistributionTmp _accountingDistributionTmp)
    {
        if (_accountingDistributionTmp.SourceDocumentLine 
            && (_accountingDistributionTmp.PostingType == LedgerPostingType::ProjSalesvalue 
            || _accountingDistributionTmp.PostingType == LedgerPostingType::ProjSalesvalueOffset))
        {
            SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(_accountingDistributionTmp.SourceDocumentLine);
            SourceDocumentLineItem accDistSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(sourceDocumentLine);
            
            if (accDistSourceDocumentLineItem is ProjectRevenueSourceDocLineItem)
            {
                AccountingDistribution accountingDistribution;
                AccountingDistribution referenceAccountingDistribution;
                SourceDocumentLine referenceSDL;

                select firstonly TypeEnumName, TypeEnumValue from referenceSDL
                    join SourceDocumentLine from referenceAccountingDistribution
                        where referenceAccountingDistribution.SourceDocumentLine == referenceSDL.RecId
                    exists join accountingDistribution
                        where accountingDistribution.ReferenceDistribution == referenceAccountingDistribution.RecId
                           && accountingDistribution.RecId == _accountingDistributionTmp.AccountingDistribution;

                if (enumName2Id(referenceSDL.TypeEnumName) == enumNum(SourceDocumentLine_ProjectTimesheets)
                    && referenceSDL.TypeEnumValue == SourceDocumentLine_ProjectTimesheets::TimesheetTrans)
                {
                    SubLedgerJournalAccountEntry subLedgerJournalAccountEntry;
                    SubLedgerJournalEntry subLedgerJournalEntry;
                    TSTimesheetTrans tsTimesheetTrans;
                    TSTimesheetLine tsTimesheetLine;
                    CustInvoiceLineInterProj interProjLine;
                    ProjIntercompanyParameters intercompanyParams;

                    select firstonly ExchangeRate1, RecId from subLedgerJournalAccountEntry
                        join subLedgerJournalEntry
                            where subLedgerJournalEntry.RecId == subLedgerJournalAccountEntry.SubLedgerJournalEntry
                                && subLedgerJournalEntry.Ledger == Ledger::current()
                                && subLedgerJournalAccountEntry.TransactionCurrency ==_accountingDistributionTmp.TransactionCurrency
                        join tsTimesheetTrans
                            where tsTimesheetTrans.Voucher == subLedgerJournalEntry.Voucher
                                && tsTimesheetTrans.SourceDocumentLine == referenceAccountingDistribution.SourceDocumentLine
                                && tsTimesheetTrans.ProjTransDate == subLedgerJournalAccountEntry.ExchangeRateDate
                        exists join tsTimesheetLine
                            where tsTimesheetLine.TimesheetNbr == tsTimesheetTrans.TimesheetNbr
                        join interProjLine
                            where interProjLine.OrigTransSourceDocumentLine == tsTimesheetTrans.SourceDocumentLine
                        exists join intercompanyParams
                            where intercompanyParams.BorrowingLegalEntity == interProjLine.ProjDataArea
                                && intercompanyParams.WIPRevenue == true;

                    if (subLedgerJournalAccountEntry.RecId)
                    {
                        // While reversing the amounts during intercompany customer invoice, the original exchange rate is used
                        // at the time of conversion for project revenue.
                        _accountingDistributionTmp.ExchangeRate1 = subLedgerJournalAccountEntry.ExchangeRate1;
                        subledgerJournalizer.calculateForeignCurAmounts(_accountingDistributionTmp);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>