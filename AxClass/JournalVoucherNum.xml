<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalVoucherNum</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JournalVoucherNum</c> class is used to draw voucher numbers.
/// </summary>
/// <remarks>
///    This class typically should not be inherited.
/// </remarks>
// This class contains methods to draw voucher numbers.
// It should normally not be extended.

class JournalVoucherNum
{
    JournalTableData        journalTableData;

    NumberSequenceTable     numberSequenceTable;

    NumberSeq               numberSeq;
    Voucher                 voucherFetched;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>abort</Name>
				<Source><![CDATA[
        public void abort()
    {
        if (voucherFetched && numberSeq)
        {
            numberSeq.abort();
            numberSeq = null;
            voucherFetched = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
        public boolean allowEdit()
    {
        return this.numberSequenceTable().numAllowEdit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkChangeNumber</Name>
				<Source><![CDATA[
        public boolean checkChangeNumber(Voucher _voucher)
    {
        return  NumberSeq::checkChangeNumber(this.numberSequenceTable(),
                                             journalTableData.journalStatic().journalTrans().TableId,
                                             journalTableData.journalStatic().transFieldIdVoucher(),
                                             voucherFetched,
                                             _voucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNew</Name>
				<Source><![CDATA[
        public Voucher getNew(boolean  _makeDecisionLater)
    {
        if (! voucherFetched)
        {
            numberSeq = NumberSeq::newGetVoucherFromId(this.numberSequenceTable().RecId, _makeDecisionLater);

            if (_makeDecisionLater)
            {
                voucherFetched = numberSeq.voucher();
            }
            else
            {
                return numberSeq.voucher();
            }
        }

        return voucherFetched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTableData</Name>
				<Source><![CDATA[
        public JournalTableData journalTableData()
    {
        return journalTableData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(JournalTableData _journalTableData)
    {
        journalTableData = _journalTableData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceTable</Name>
				<Source><![CDATA[
        public NumberSequenceTable numberSequenceTable()
    {
        JournalTableMap     journalTable;

        if (! numberSequenceTable.RecId)
        {
            journalTable = this.journalTableData().journalTable();
            numberSequenceTable = NumberSequenceTable::find(journalTable.VoucherNumberSeq);
        }

        return numberSequenceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>release</Name>
				<Source><![CDATA[
        public void release(Voucher _voucher)
    {
        if (! this.journalTableData().journalVoucherList().find(_voucher))
        {
            throw error(strFmt("@SYS19378",funcName()));
        }

        if (this.journalTableData().journalVoucherList().item().numOfLines() == 1)
        {
            NumberSeq::releaseNumber(this.numberSequenceTable().RecId, _voucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserve</Name>
				<Source><![CDATA[
        public void reserve(Voucher _voucher)
    {
        NumberSeq           numberSeqReserve;

        if (! this.journalTableData().journalVoucherList().find(_voucher))
        {
            throw error(strFmt("@SYS19378",funcName()));
        }

        if (this.journalTableData().journalVoucherList().item().numOfLines() == 0)
        {
            if (this.numberSequenceTable().mustReserveChangedNumber())
            {
                numberSeqReserve = NumberSeq::newReserveVoucherFromId(this.numberSequenceTable().RecId);
                numberSeqReserve.reserve(_voucher);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>used</Name>
				<Source><![CDATA[
        public void used(Voucher _voucher)
    {
        if (_voucher && voucherFetched == _voucher)
        {
            if (numberSeq)
            {
                numberSeq.used();
            }

            numberSeq       = null;
            voucherFetched  = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherFetched</Name>
				<Source><![CDATA[
        public Voucher voucherFetched()
    {
        return voucherFetched;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>