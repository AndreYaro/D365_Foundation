<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMediaChannelFacebookConnector</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements <c>RetailMediaChannelConnector</c> intefrace to allow setting up
/// a link, post messages and upload supplimentary images to Facebook.
/// </summary>
/// <remarks>
/// This connector class implements "Login on Client, API Calls from Server" authentication process.
/// https://developers.facebook.com/docs/facebook-login/access-tokens#authClientServer
/// </remarks>
public class RetailMediaChannelFacebookConnector implements RetailMediaChannelConnector
{
    private const str FacebookLoginUriFormat = "https://www.facebook.com/dialog/oauth?client_id=\%1&response_type=code&scope=offline_access,publish_stream,manage_pages,user_photos&redirect_uri=\%2";
    private const str FacebookConfirmIdentityUriFormat = "https://graph.facebook.com/oauth/access_token?client_id=\%1&redirect_uri=\%2&client_secret=\%3&code=\%4";

    private const str CodeParameterName = "code";
    private const str AccessTokenParameterName = "access_token";
    private const str ExpiresParameterName = "expires";

    private const str ResponseErrorParameterName = "error";
    private const str ResponseErrorReasonParameterName = "error_reason";
    private const str ResponseErrorDescriptionParameterName = "error_description";

    #define.PageWallLinkFormat('\%1?sk=wall')

    #define.ErrorString('error')

    #define.ErrorFormat("@RET4160159")
    #define.GenericError("@RET4160160")
    #define.NoApplicationIdConfiguredMessage("@RET4160181")
    #define.MessageHasBeenPublishedMessage("@RET4160161")
    #define.PhotoHasBeenPublishedMessage("@RET4160162")

    private RecId MediaChannelConnectorSettingsRecId;
    private RetailCommonWebAPI webApi;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>RetailMediaChannelFacebookConnector</c>.
    /// </summary>
    /// <param name="_retailMediaChannelConnectorSettingsRecId">
    /// The <c>RetailMediaChannelConnectorSettings</c> record Id.
    /// </param>
    /// <param name="_webApi">
    /// Instance of <c>RetailCommonWebAPI</c>.
    /// </param>
    public void new(RecId _retailMediaChannelConnectorSettingsRecId, RetailCommonWebAPI _webApi = RetailCommonWebAPI::construct())
    {
        if (!_retailMediaChannelConnectorSettingsRecId)
        {
            throw error(strFmt("@SYS118114",funcName()));
        }

        this.MediaChannelConnectorSettingsRecId = _retailMediaChannelConnectorSettingsRecId;
        this.webApi = _webApi;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetLoginURI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the media channel authentication page URI.
    /// </summary>
    /// <returns>
    /// Returns the media channel authentication page URI.
    /// </returns>
    public str GetLoginURI()
    {
        str appId = RetailMediaChannelFacebookConnector::getAppId();
        str redirectUriParameters = System.Web.HttpUtility::UrlEncode(RetailCommonWebAPI::GetAuthenticationCallBackUri(this.MediaChannelConnectorSettingsRecId));
        str loginUrl = strFmt(facebookLoginUriFormat, appId, redirectUriParameters);

        return loginUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProsessAuthenticationCallBackUri</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prosesses authentication callback URI.
    /// </summary>
    /// <param name="_uri">The callback URI.</param>
    public void ProsessAuthenticationCallBackUri(System.Uri _uri)
    {
        if (_uri == null)
        {
            throw error(strFmt("@SYS118114",funcName()));
        }

        System.Collections.Specialized.NameValueCollection queryParameters = System.Web.HttpUtility::ParseQueryString(_uri.get_Query());

        str codeParameter = queryParameters.Get(RetailMediaChannelFacebookConnector::CodeParameterName);

        if (!codeParameter)
        {
            str errorCode = queryParameters.Get(RetailMediaChannelFacebookConnector::AccessTokenParameterName);
            str errorReason = queryParameters.Get(RetailMediaChannelFacebookConnector::ResponseErrorReasonParameterName);
            str errorDescription = System.Web.HttpUtility::UrlDecode(queryParameters.Get(RetailMediaChannelFacebookConnector::ResponseErrorDescriptionParameterName));

            throw error(RetailMediaChannelFacebookConnector::formatSignInErrorMessage(errorDescription, errorCode, errorReason));
        }

        this.ConfirmIdentity(codeParameter);

        Box::info("@RET4160163");
    }

]]></Source>
			</Method>
			<Method>
				<Name>ConfirmIdentity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the last part of Facebook authentication. Confirmes identity and saves the long-lived token.
    /// </summary>
    /// <param name = "_codeParameterValue">The code Uri parameter value.</param>
    private void ConfirmIdentity(str _codeParameterValue)
    {
        str authenticationCallBackUri = System.Web.HttpUtility::UrlEncode(RetailCommonWebAPI::GetAuthenticationCallBackUri(this.MediaChannelConnectorSettingsRecId));
        str applicationId = RetailMediaChannelFacebookConnector::GetAppId();
        str applicationSecret = RetailMediaChannelFacebookConnector::GetAppSecret();

        str confirmIdentityUrl = strfmt(RetailMediaChannelFacebookConnector::FacebookConfirmIdentityUriFormat, applicationId, authenticationCallBackUri, applicationSecret, _codeParameterValue);

        RetailWebResponse response = webApi.makeRequest(confirmIdentityUrl);
        if (!response.RequestSucceeded() || !strStartsWith(response.parmData(), RetailMediaChannelFacebookConnector::AccessTokenParameterName))
        {
            throw error(response.parmData());
        }

        System.Collections.Specialized.NameValueCollection parameters = System.Web.HttpUtility::ParseQueryString(response.parmData());

        str accessToken = parameters.Get(RetailMediaChannelFacebookConnector::AccessTokenParameterName);
        str expires = parameters.Get(RetailMediaChannelFacebookConnector::ExpiresParameterName);

        str userId = this.getUserId(accessToken);

        int64 expiresInSeconds = str2int64(expires);
        utcDateTime expirationDate = expiresInSeconds > 0
            ? DateTimeUtil::addSeconds(DateTimeUtil::utcNow(), expiresInSeconds)
            : DateTimeUtil::maxValue();

        RetailMediaChannelFacebookConnector::setup(this.MediaChannelConnectorSettingsRecId, userId, accessToken, expirationDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPageLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns URL for the specified page.
    /// </summary>
    /// <param name="_pageId">
    /// The ID of the page to return URL for
    /// </param>
    /// <returns>
    /// Returns URL for the specified page, if successful.
    /// Returns an empty string, if failed.
    /// </returns>
    public str getPageLink(str _pageId)
    {
        return RetailMediaChannelFacebookConnector::doGetPageLink(this.MediaChannelConnectorSettingsRecId, webApi, _pageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a list of object trees represeting user's pages (accounts)
    /// </summary>
    /// <returns>
    /// Returns a list of object trees represeting user's pages (accounts).
    /// It will return null, if there are no connector settings or
    /// there is an error retrieving the data.
    /// </returns>
    public List getPages()
    {
        #define.WarningMessage("There are no settings present for Facebook connector. Please login before trying to list available pages.")

        if (!this.MediaChannelConnectorSettingsRecId)
        {
            warning(#WarningMessage);
            return null;
        }

        return RetailMediaChannelFacebookConnector::doGetPages(this.MediaChannelConnectorSettingsRecId, webApi);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the authenticated user from Facebook
    /// </summary>
    /// <param name="_token">
    /// The access token of the authenticated user
    /// </param>
    /// <returns>
    /// Returns the ID of the authenticated user from Facebook, if successful.
    /// Returns "0", if failed.
    /// </returns>
    private str getUserId(str _token)
    {
        RetailFacebookUserResponse userResponse;
        RetailFacebookUser currentFacebookUser;
        RetailFacebookError errorResponse;

        userResponse = this.readCurrentUser(_token);

        errorResponse = userResponse.parmErrorResult();
        currentFacebookUser = userResponse.parmUser();

        if (errorResponse)
        {
            error(
                RetailMediaChannelFacebookConnector::formatErrorMessage(
                    errorResponse.parmMessage()));

            return "0";
        }

        return currentFacebookUser.parmId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>push</Name>
				<Source><![CDATA[
    /// <summary>
    /// The <c>push</c> method is called to post a message
    /// to the service
    /// </summary>
    /// <param name="_message">
    /// The <c>RetailMediaChannelMessage</c> object containing the message information
    /// </param>
    /// <returns>
    /// Returns ID of the posted message upon success. If failed, returns an empty string.
    /// </returns>
    public str push(RetailMediaChannelMessage _message)
    {
        #define.WarningMessage("There are no settings present for Facebook connector. Please login before trying to publish.")

        if (!this.MediaChannelConnectorSettingsRecId)
        {
            warning(#WarningMessage);
            return '';
        }

        return RetailMediaChannelFacebookConnector::doPush(this.MediaChannelConnectorSettingsRecId, webApi, _message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readCurrentUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the information about the authenticated user
    /// from Facebook
    /// </summary>
    /// <param name="_accessToken">
    /// The access token of the authenticated user
    /// </param>
    /// <returns>
    /// returns the information about the authenticated user
    /// from Facebook
    /// </returns>
    private RetailFacebookUserResponse readCurrentUser(str _accessToken)
    {
        #define.UserInfoFormatUrl("https://graph.facebook.com/me?access_token=\%1")

        RetailFacebookUserResponse userResponse = new RetailFacebookUserResponse();
        RetailFacebookUser user;
        RetailFacebookError errorResponse;

        str userInfoUrl = strFmt(#UserInfoFormatUrl, _accessToken);
        RetailWebResponse webResponse = webApi.makeRequest(userInfoUrl);
        str response = webResponse.parmData();

        if (strScan(response, #ErrorString, 1, strLen(response)))
        {
            errorResponse = RetailFacebookError::parseFromString(response);
            userResponse.parmErrorResult(errorResponse);
        }
        else
        {
            user = RetailFacebookUser::parseFromString(response);
            userResponse.parmUser(user);
        }

        return userResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOAuth</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is part of 3-legged authentication process,
    /// which is not supported by the Facebook connector.
    /// This method will always return null.
    /// </summary>
    /// <returns>
    /// Always returns null
    /// </returns>
    public RetailOAuthParameters startOAuth()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadPhoto</Name>
				<Source><![CDATA[
    /// <summary>
    /// The <c>uploadPhoto</c> method is called
    /// when image needs to be uploaded to the service,
    /// if it is a separate operation from posting a message.
    /// </summary>
    /// <param name="_docuRef">
    /// The <c>DocuRef</c> record pointing to the document containing the image to upload
    /// </param>
    /// <returns>
    /// Returns ID of the uploaded image, if successful.
    /// Returns an empty string, if failed.
    /// </returns>
    public str uploadPhoto(DocuRef _docuRef)
    {
        RetailMediaFileDescription picture;
        picture = RetailMediaFileDescription::construct(_docuRef.RecId);
        return RetailMediaChannelFacebookConnector::doUploadPhoto(this.MediaChannelConnectorSettingsRecId, webApi, picture);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPageWallLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a link to the page's wall
    /// given the link of the page
    /// </summary>
    /// <param name="_pageLink">
    /// The link of the page
    /// </param>
    /// <returns>
    /// Returns the link to the page's wall
    /// given the link of the page
    /// </returns>
    public static str buildPageWallLink(str _pageLink)
    {
        return strFmt(#PageWallLinkFormat, _pageLink);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create new instance of  <c>RetailMediaChannelFacebookConnector</c> and also creates instance of <c>RetailCommonWebAPI</c>
    /// </summary>
    /// <param name="_retailMediaChannelConnectorSettings">
    /// Retail media channel connector settings.
    /// </param>
    /// <param name="_webApi">
    /// Instance of <c>RetailCommonWebAPI</c>.
    /// </param>
    /// <returns>
    /// New instance of  <c>RetailMediaChannelFacebookConnector</c>.
    /// </returns>
    public static RetailMediaChannelFacebookConnector construct(RetailMediaChannelConnectorSettings _retailMediaChannelConnectorSettings, RetailCommonWebAPI _webApi = RetailCommonWebAPI::construct())
    {
        return new retailMediaChannelFacebookConnector(_retailMediaChannelConnectorSettings.RecId, _webApi);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doGetPageLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns URL for the specified page.
    /// </summary>
    /// <param name="_settingsRecId">
    /// The connector settings' record ID
    /// </param>
    /// <param name="_webApi">
    /// The web API
    /// </param>
    /// <param name="_pageId">
    /// The ID of the page to return URL for.
    /// </param>
    /// <returns>
    /// Returns URL for the specified page, if successful.
    /// Returns an empty string, if failed.
    /// </returns>
    private static str doGetPageLink(RecId _settingsRecId, RetailCommonWebAPI _webApi, str _pageId)
    {
        #define.ObjectRetrievalUrlFormat("https://graph.facebook.com/\%1?access_token=\%2&fields=link")

        str postUrl;
        RetailWebResponse webResponse;
        str rawResponse;
        RetailFacebookError errorResponse;
        Map postsData;
        str linkUrl;

        postUrl = strFmt(#ObjectRetrievalUrlFormat, _pageId, RetailMediaChannelFacebookConnector::getUserAccessToken(_settingsRecId));

        webResponse = _webApi.makeRequest(postUrl);
        rawResponse = webResponse.parmData();

        if (strScan(rawResponse, #errorString, 1, strLen(rawResponse)))
        {
            errorResponse = RetailFacebookError::parseFromString(rawResponse);
        }
        else
        {
            postsData = RetailCommonWebAPI::getMapFromJsonString(rawResponse);
        }

        if (errorResponse)
        {
            error(
                RetailMediaChannelFacebookConnector::formatErrorMessage(
                    errorResponse.parmMessage()));
        }
        else
        {
            linkUrl = conPeek(postsData.lookup('link'), 1);
        }

        return linkUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doGetPages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a list of object trees represeting user's pages (accounts)
    /// Calls Facebook to get the list of the user's pages.
    /// </summary>
    /// <param name="_settingsRecId">
    /// The connector settings' record ID
    /// </param>
    /// <param name="_webApi">
    /// The web API
    /// </param>
    /// <returns>
    /// Returns a list of object trees represeting user's pages (accounts).
    /// It will return null, if there is an error.
    /// </returns>
    private static List doGetPages(RecId _settingsRecId, RetailCommonWebAPI _webApi)
    {
        #define.CommandUrlFormat("https://graph.facebook.com/\%1/accounts?access_token=\%2")

        RetailFacebookError errorResponse;
        RetailFacebookAccounts accountsResponse;
        RetailWebResponse webResponse;
        str rawResponse;

        RetailMediaChannelConnectorSettings retailMediaChannelConnectorSettings =
            RetailMediaChannelConnectorSettings::find(_settingsRecId);
        str postUrl = strFmt(#CommandUrlFormat, retailMediaChannelConnectorSettings.UserId, RetailMediaChannelFacebookConnector::getUserAccessToken(retailMediaChannelConnectorSettings.RecId));

        webResponse = _webApi.makeRequest(postUrl);
        rawResponse = webResponse.parmData();

        if (strScan(rawResponse, #errorString, 1, strLen(rawResponse)))
        {
            errorResponse = RetailFacebookError::parseFromString(rawResponse);
        }
        else
        {
            accountsResponse = RetailFacebookAccounts::parseFromString(rawResponse);
        }

        if (errorResponse)
        {
            error(
                RetailMediaChannelFacebookConnector::formatErrorMessage(
                    errorResponse.parmMessage()));

            return null;
        }
        else
        {
            return accountsResponse.getPages();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doGetPhotoPosts</Name>
				<Source><![CDATA[
    private static List doGetPhotoPosts(RecId _settingsRecId, RetailCommonWebAPI _webApi, str _photoObjectId)
    {
        #define.PhotoPostsRetrievalUrlFormat("https://graph.facebook.com/\%1/feed?access_token=\%2&fields=object_id")
        #define.DataField('data')
        #define.ObjectIdField('object_id')
        #define.IdField('id')

        str postUrl;
        RetailWebResponse webResponse;
        str rawResponse;
        RetailFacebookError errorResponse;
        Map postsData;
        List postsList;
        ListEnumerator postsListE;
        Map currentPostMap;
        List postsToDelete = new List(Types::String);
        str currentPostObjectId;
        str currentPostId;

        RetailMediaChannelConnectorSettings retailMediaChannelConnectorSettings =
            RetailMediaChannelConnectorSettings::find(_settingsRecId);
        postUrl = strFmt(#PhotoPostsRetrievalUrlFormat, retailMediaChannelConnectorSettings.PageId, RetailMediaChannelFacebookConnector::getPageAccessToken(_settingsRecId));

        webResponse = _webApi.makeRequest(postUrl);
        rawResponse = webResponse.parmData();

        if (strScan(rawResponse, #errorString, 1, strLen(rawResponse)))
        {
            errorResponse = RetailFacebookError::parseFromString(rawResponse);
        }
        else
        {
            postsData = RetailCommonWebAPI::getMapFromJsonString(rawResponse);
        }

        if (errorResponse)
        {
            error(
                RetailMediaChannelFacebookConnector::formatErrorMessage(
                    errorResponse.parmMessage()));
        }
        else
        {
            // Going through posts looking for the posts
            // with the supplied photo object's id
            //
            // Note: Object ID is unique for all objects,
            // so there is no risk of trapping on the object
            // of a different kind but with the same id.
            // Here is a quote from Facebook API:
            // "Every object in the social graph has a unique ID.
            // You can access the properties of an object by
            // requesting https://graph.facebook.com/ID"
            postsList = List::create(postsData.lookup(#DataField));
            postsListE = postsList.getEnumerator();
            while (postsListE.moveNext())
            {
                currentPostMap = Map::create(postsListE.current());
                if (currentPostMap.exists(#ObjectIdField))
                {
                    currentPostObjectId = conPeek(currentPostMap.lookup(#ObjectIdField), 1);
                    if (currentPostObjectId == _photoObjectId)
                    {
                        currentPostId = conPeek(currentPostMap.lookup(#IdField), 1);
                        postsToDelete.addEnd(currentPostId);
                    }
                }
            }
        }

        return postsToDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPush</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts a message to Facebook
    /// </summary>
    /// <param name="_settingsRecId">
    /// The connector settings' record ID
    /// </param>
    /// <param name="_webApi">
    /// The web API
    /// </param>
    /// <param name="_message">
    /// The <c>RetailMediaChannelMessage</c> object containing the message information
    /// </param>
    /// <returns>
    /// Returns ID of the posted message upon success. If failed, returns an empty string.
    /// </returns>
    private static str doPush(RecId _settingsRecId, RetailCommonWebAPI _webApi, RetailMediaChannelMessage _message)
    {
        #define.PostFormat('message=\%1&link=\%2&name=\%3&caption=\%4&description=\%5&picture=\%6')
        #define.PostUrlFormat("https://graph.facebook.com/\%1/feed?access_token=\%2")

        RetailFacebookError errorResponse;
        RetailFacebookPost postResponse;
        RetailWebResponse webResponse;
        str response;
        str postId;

        SysUrlEncoder sysUrlEncoder = new SysUrlEncoder();

        str pageId;
        str accessToken;
        str postUrl;
        str postData;

        RetailMediaChannelConnectorSettings retailMediaChannelConnectorSettings =
            RetailMediaChannelConnectorSettings::find(_settingsRecId);
        pageId = retailMediaChannelConnectorSettings.PageId;
        accessToken = RetailMediaChannelFacebookConnector::getPageAccessToken(retailMediaChannelConnectorSettings.RecId);

        postUrl = strFmt(#postUrlFormat, pageId, accessToken);
        postData = strFmt(
            #postFormat,
            sysUrlEncoder.encode(_message.parmMessage()),
            sysUrlEncoder.encode(_message.parmLinkUrl()),
            sysUrlEncoder.encode(_message.parmName()),
            sysUrlEncoder.encode(_message.parmCaption()),
            sysUrlEncoder.encode(_message.parmDescription()),
            sysUrlEncoder.encode(_message.parmPicture()));

        webResponse = _webApi.makePostRequest(postUrl, postData);
        response = webResponse.parmData();

        if (strScan(response, #errorString, 1, strLen(response)))
        {
            errorResponse = RetailFacebookError::parseFromString(response);
        }
        else
        {
            postResponse = RetailFacebookPost::parseFromString(response);
        }

        if (errorResponse)
        {
            error(
                RetailMediaChannelFacebookConnector::formatErrorMessage(
                    errorResponse.parmMessage()));
        }
        else
        {
            postId = postResponse.parmId();
            info(#MessageHasBeenPublishedMessage);
        }

        return postId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRemovePost</Name>
				<Source><![CDATA[
    private static void doRemovePost(RecId _settingsRecId, RetailCommonWebAPI _webApi, str _postId)
    {
        #define.PhotoPostsRemovalUrlFormat("https://graph.facebook.com/\%1?access_token=\%2")

        str token = RetailMediaChannelFacebookConnector::getPageAccessToken(_settingsRecId);
        str removalUrl = strFmt(#PhotoPostsRemovalUrlFormat, _postId, token);
        RetailWebResponse webResponse = _webApi.makeDeleteRequest(removalUrl);
        str rawResponse = webResponse.parmData();
        RetailFacebookError errorResponse;

        if (strScan(rawResponse, #errorString, 1, strLen(rawResponse)))
        {
            errorResponse = RetailFacebookError::parseFromString(rawResponse);
        }

        if (errorResponse)
        {
            error(
                RetailMediaChannelFacebookConnector::formatErrorMessage(
                    errorResponse.parmMessage()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUploadPhoto</Name>
				<Source><![CDATA[
    /// <summary>
    /// The <c>uploadPhoto</c> method is called
    /// when image needs to be uploaded to the service,
    /// if it is a separate operation from posting a message.
    /// </summary>
    /// <param name="_settingsRecId">
    /// The connector settings' record ID
    /// </param>
    /// <param name="_webApi">
    /// The web API
    /// </param>
    /// <param name="_picture">
    /// The <c>RetailMediaFileDescription</c> object containing the image to upload
    /// </param>
    /// <returns>
    /// Returns ID of the uploaded image, if successful.
    /// Returns an empty string, if failed.
    /// </returns>
    private static str doUploadPhoto(RecId _settingsRecId, RetailCommonWebAPI _webApi, RetailMediaFileDescription _picture)
    {
        #define.CommandUrlFormat("https://graph.facebook.com/\%1/photos?access_token=\%2")
        #define.GetUrlFormat("https://graph.facebook.com/\%1?access_token=\%2")
        #define.Message('message')
        #define.Source('source')

        RetailFacebookPhoto photo;
        RetailFacebookError error;

        Map strFields = new Map(Types::String, Types::String);
        Map docFields = new Map(Types::String, Types::Class);
        str url;
        RetailWebResponse webResponse;
        str response;
        str id;
        str postId;
        str picture;

        RetailMediaChannelConnectorSettings retailMediaChannelConnectorSettings =
            RetailMediaChannelConnectorSettings::find(_settingsRecId);

        str accessToken = RetailMediaChannelFacebookConnector::getUserAccessToken(retailMediaChannelConnectorSettings.RecId);
        url = strFmt(#CommandUrlFormat, retailMediaChannelConnectorSettings.UserId, accessToken);

        if (_picture)
        {
            strFields.insert(#Message, _picture.parmFileName());
            docFields.insert(#Source, _picture);

            webResponse = _webApi.makeFormPost(url, strFields, docFields);
            response = webResponse.parmData();

            if (strScan(response, #ErrorString, 1, strLen(response)))
            {
                error = RetailFacebookError::parseFromString(response);
                error(
                    RetailMediaChannelFacebookConnector::formatErrorMessage(
                        error.parmMessage()));
            }
            else
            {
                photo = RetailFacebookPhoto::parseFromString(response);
                id = photo.parmId();
                postId = photo.parmPostId();
                info(#PhotoHasBeenPublishedMessage);

                if (id)
                {
                    url = strFmt(#GetUrlFormat, id, accessToken);
                    webResponse = _webApi.makeRequest(url);
                    response = webResponse.parmData();

                    if (strScan(response, #ErrorString, 1, strLen(response)))
                    {
                        error = RetailFacebookError::parseFromString(response);
                        error(
                            RetailMediaChannelFacebookConnector::formatErrorMessage(
                                error.parmMessage()));
                    }
                    else
                    {
                        photo = RetailFacebookPhoto::parseFromString(response);
                        picture = photo.parmPicture();
                    }
                }
            }
        }

        return picture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats error message. It will include errorDetail into
    /// the message if the parameter is not empty.
    /// </summary>
    /// <param name="errorDetails">
    /// The error detail that will be included into
    /// the message
    /// </param>
    /// <returns>
    /// Returns the formated error message
    /// </returns>
    private static str formatErrorMessage(str errorDetails = '')
    {
        if (strLen(errorDetails) > 0)
        {
            return strFmt(#ErrorFormat, errorDetails);
        }
        else
        {
            return #GenericError;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatSignInErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats error message returned during the sign-in process.
    /// </summary>
    /// <param name="errorDescription">
    /// Tee error description. If it is present, then
    /// errorCode and errorReason parameters will be ignored
    /// </param>
    /// <param name="errorCode">
    /// Will be included into the message if errorDescription is not available only.
    /// </param>
    /// <param name="errorReason">
    /// Will be included into the message if errorDescription is not available only.
    /// </param>
    /// <returns>
    /// Returns the formated error message
    /// </returns>
    private static str formatSignInErrorMessage(str errorDescription, str errorCode, str errorReason)
    {
        str errorDetails;
        if (errorDescription)
        {
            errorDetails = errorDescription;
        }
        else
        {
            if (errorCode)
            {
                errorDetails = strFmt("@RET4160178", errorCode);
            }
            if (errorReason)
            {
                if (errorDetails)
                {
                    errorDetails += ' ';
                }
                errorDetails += strFmt("@RET4160179", errorReason);
            }
        }

        return RetailMediaChannelFacebookConnector::formatErrorMessage(errorDetails);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAppId</Name>
				<Source><![CDATA[
    private static str getAppId()
    {
        RetailSharedFacebookParameters parameters = RetailSharedFacebookParameters::find();

        if (strLen(strLRTrim(parameters.ApplicationId)) == 0)
        {
            throw error(#NoApplicationIdConfiguredMessage);
        }

        return parameters.ApplicationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAppSecret</Name>
				<Source><![CDATA[
    private static str getAppSecret()
    {
        RetailSharedFacebookParameters parameters = RetailSharedFacebookParameters::find();

        if (strlen(strLRTrim(parameters.ApplicationSecret)) == 0)
        {
            throw error("@RET4230048");
        }

        return parameters.ApplicationSecret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPageAccessToken</Name>
				<Source><![CDATA[
    private static str getPageAccessToken(RecId _settingsRecId)
    {
        RetailMediaChannelConnectorSettings retailMediaChannelConnectorSettings =
            RetailMediaChannelConnectorSettings::find(_settingsRecId);
        RetailMediaChannelConnectorCredentials retailMediaChannelConnectorCredentials =
            RetailMediaChannelConnectorCredentials::find(
                retailMediaChannelConnectorSettings.RetailMediaChannelConnectorCredentials);
        return retailMediaChannelConnectorCredentials.PageAccessToken;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserAccessToken</Name>
				<Source><![CDATA[
    private static str getUserAccessToken(RecId _settingsRecId)
    {
        RetailMediaChannelConnectorSettings retailMediaChannelConnectorSettings =
            RetailMediaChannelConnectorSettings::find(_settingsRecId);
        RetailMediaChannelConnectorCredentials retailMediaChannelConnectorCredentials =
            RetailMediaChannelConnectorCredentials::find(
                retailMediaChannelConnectorSettings.RetailMediaChannelConnectorCredentials);
        return retailMediaChannelConnectorCredentials.UserAccessToken;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPageAccessToken</Name>
				<Source><![CDATA[
    private static boolean hasPageAccessToken(RecId _settingsRecId)
    {
        RetailMediaChannelConnectorSettings retailMediaChannelConnectorSettings =
            RetailMediaChannelConnectorSettings::find(_settingsRecId);
        RetailMediaChannelConnectorCredentials retailMediaChannelConnectorCredentials =
            RetailMediaChannelConnectorCredentials::find(
                retailMediaChannelConnectorSettings.RetailMediaChannelConnectorCredentials);
        return strLen(retailMediaChannelConnectorCredentials.PageAccessToken) > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up the connector settings for a Facebook account
    /// </summary>
    /// <param name="_settingsRecId">
    /// The RecId of the RetailMediaChannelConnectorSettings table record
    /// </param>
    /// <param name="_userId">
    /// The Facebook user ID
    /// </param>
    /// <param name="_token">
    /// The access token
    /// </param>
    /// <param name="_expirationDate">
    /// The expiration date of the access token
    /// </param>
    public static void setup(RecId _settingsRecId,
            str _userId,
            str _token,
            utcdatetime _expirationDate)
    {
        RetailMediaChannelConnectorSettings retailMediaChannelConnectorSettings =
            RetailMediaChannelConnectorSettings::find(_settingsRecId, true);
        RetailMediaChannelConnectorCredentials retailMediaChannelConnectorCredentials =
            RetailMediaChannelConnectorCredentials::find(
                retailMediaChannelConnectorSettings.RetailMediaChannelConnectorCredentials, true);

        ttsBegin;

        retailMediaChannelConnectorCredentials.UserAccessToken = _token;
        if (retailMediaChannelConnectorCredentials.RecId)
        {
            retailMediaChannelConnectorCredentials.update();
        }
        else
        {
            retailMediaChannelConnectorCredentials.insert();
        }

        retailMediaChannelConnectorSettings.RetailMediaChannelConnectorCredentials = retailMediaChannelConnectorCredentials.RecId;
        retailMediaChannelConnectorSettings.ExpirationDateTime = _expirationDate;
        retailMediaChannelConnectorSettings.UserId = _userId;
        retailMediaChannelConnectorSettings.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up the connector settings with a Facebook page
    /// information messages will be posted to
    /// </summary>
    /// <param name="_settingsRecId">
    /// The RecId of the RetailMediaChannelConnectorSettings table record
    /// </param>
    /// <param name="_newPageId">
    /// The ID of the user's page
    /// </param>
    /// <param name="_newPageName">
    /// The name of the user's page
    /// </param>
    /// <param name="_newPageUrl">
    /// The URL of the user's page
    /// </param>
    /// <param name="_newPageToken">
    /// The access token of the user's page
    /// </param>
    public static void setupPage(RecId _settingsRecId, str _newPageId, str _newPageName, str _newPageUrl, str _newPageToken)
    {
        RetailMediaChannelConnectorSettings retailMediaChannelConnectorSettings =
            RetailMediaChannelConnectorSettings::find(_settingsRecId, true);
        RetailMediaChannelConnectorCredentials retailMediaChannelConnectorCredentials =
            RetailMediaChannelConnectorCredentials::find(
                retailMediaChannelConnectorSettings.RetailMediaChannelConnectorCredentials, true);

        ttsBegin;

        retailMediaChannelConnectorSettings.PageId = _newPageId;
        retailMediaChannelConnectorSettings.PageName = _newPageName;
        retailMediaChannelConnectorSettings.PageUrl = _newPageUrl;
        retailMediaChannelConnectorSettings.update();

        retailMediaChannelConnectorCredentials.PageAccessToken = _newPageToken;
        retailMediaChannelConnectorCredentials.update();

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>