<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryTransactionAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventoryTransactionAction</c> class is the base class for all the warehouse inventory stack actions.
/// </summary>
internal abstract class WHSInventoryTransactionAction implements WHSInventoryTransactionIAction
{
    private WhsInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the action.
    /// </summary>
    /// <param name = "_parameters">Parameters of the action.</param>
    /// <returns>The result of the action.</returns>
    [Hookable(false)]
    public final WHSInventoryTransactionActionResult execute(WHSInventoryTransactionActionParameters _parameters)
    {
        using (var activityContext = this.instrumentationLogger().inventoryTransactionActionActivities().action())
        {
            if (appl.ttsLevel() == 0)
            {
                throw error(strFmt("@SCM:TransactionExpected", funcName()));
            }

            this.doExecute(_parameters, activityContext);

            return WHSInventoryTransactionActionResult::newSuccess();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doExecute</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected WHSInventoryTransaction doExecute(
        WHSInventoryTransactionActionParameters _parameters,
        SysInstrumentationActivityContext _activityContext)
    {
        var transactionType = this.transactionType();

        WHSInventoryTransaction transaction = this.initInventoryTransaction(_parameters, transactionType);

        // We read the item set contents only once and store that in descriptor.
        // It allows to read from memory going forward during the checks.
        WHSWorkInventoryTransactionDescriptor transactionDescriptor = this.constructTransactionDescriptor(transaction, _parameters);

        var actionValidator = WHSInventoryTransactionActionValidator::newFromValues(
            transactionType,
            transactionDescriptor,
            _parameters.parmStorageDimensions(),
            _parameters.parmValidationParameters());

        actionValidator.validatePreCreateTransaction();

        this.preInsertTransaction(_parameters, transaction, transactionDescriptor);

        transaction.insert();

        actionValidator.validatePostCreateTransaction();

        this.postInsertTransaction(_parameters, transaction, transactionDescriptor);

        this.instrumentationLogger().inventoryTransactionActionActivities().logActionMetadata(
            _activityContext,
            transactionType,
            _parameters.parmTransactionSource().parmOriginId(),
            transactionDescriptor.elementCount());

        return transaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preInsertTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gives an ability to execute any logic right before the transaction is inserted and on-hand gets changed.
    /// All the pre-create validations have passed at this moment.
    /// </summary>
    /// <param name = "_parameters">Parameters of the action.</param>
    /// <param name = "_transaction">A transaction being inserted.</param>
    /// <param name = "_transactionDescriptor">A transaction descriptor. Contains all the details about items, quantities, dimensions etc.</param>
    [Hookable(false)]
    protected void preInsertTransaction(
        WHSInventoryTransactionActionParameters _parameters,
        WHSInventoryTransaction _transaction,
        WHSWorkInventoryTransactionDescriptor _transactionDescriptor)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInsertTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gives an ability to execute any logic right after the transaction is inserted and on-hand has changed.
    /// All the validations (both pre- and post-create) have passed at this moment.
    /// </summary>
    /// <param name = "_parameters">Parameters of the action.</param>
    /// <param name = "_transaction">A transaction that has been inserted.</param>
    /// <param name = "_transactionDescriptor">A transaction descriptor. Contains all the details about items, quantities, dimensions etc.</param>
    [Hookable(false)]
    protected void postInsertTransaction(
        WHSInventoryTransactionActionParameters _parameters,
        WHSInventoryTransaction _transaction,
        WHSWorkInventoryTransactionDescriptor _transactionDescriptor)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the executing warehouse inventory transaction type.
    /// </summary>
    /// <returns>The executing warehouse inventory transaction type.</returns>
    protected abstract WHSInventoryTransactionTypeEnum transactionType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructTransactionDescriptor</Name>
				<Source><![CDATA[
    private WHSWorkInventoryTransactionDescriptor constructTransactionDescriptor(WHSInventoryTransaction _transaction, WHSInventoryTransactionActionParameters _parameters)
    {
        WHSWorkInventoryTransactionDescriptor transactionDescriptor = WHSWorkInventoryTransactionDescriptor::construct();
        WHSInventoryItemSetElement itemSetElement;

        while select itemSetElement
            where itemSetElement.ItemSetId == _transaction.ItemSetId
        {
            var descriptorElement = WHSWorkInventoryTransactionDescriptorElement::newFromValues(
                itemSetElement.ItemId,
                itemSetElement.HandlingQty,
                itemSetElement.HandlingWeight,
                WHSWorkInventoryTransactionDimensionsDescriptor::newFromInventoryTransaction(_transaction, itemSetElement),
                _parameters.parmTransactionSource().parmReferenceId());

            transactionDescriptor.add(descriptorElement);
        }

        return transactionDescriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventoryTransaction</Name>
				<Source><![CDATA[
    private WHSInventoryTransaction initInventoryTransaction(WHSInventoryTransactionActionParameters _parameters, WHSInventoryTransactionTypeEnum _transactionType)
    {
        WHSInventoryTransaction transaction;

        transaction.Type = _transactionType;
        transaction.ItemSetId = _parameters.parmItemSetId();

        // transaction source.
        transaction.InventoryTransactionOriginId = _parameters.parmTransactionSource().parmOriginId();
        transaction.ReferenceCategory = _parameters.parmTransactionSource().parmReferenceCategory();
        transaction.ReferenceId = _parameters.parmTransactionSource().parmReferenceId();

        // storage dimensions.
        transaction.InventSiteId = _parameters.parmStorageDimensions().parmInventSiteId();
        transaction.InventLocationId = _parameters.parmStorageDimensions().parmInventLocationId();
        transaction.WMSLocationId = _parameters.parmStorageDimensions().parmWmsLocationId();
        transaction.LicensePlateId = _parameters.parmStorageDimensions().parmLicensePlateId();

        return transaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal final WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>