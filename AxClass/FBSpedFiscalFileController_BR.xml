<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedFiscalFileController_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>FBSpedFiscalFileController_BR</c> class is the controller class for the sped fiscal file generation operation.
/// </summary>
[
    FBTaxStatement_BRAttribute("@SYS4082157", menuitemDisplayStr(FBSpedFiscalFileExporter_BR)),
    FBTaxStatementTaxType_BRAttribute(TaxType_BR::ICMS),
    FBTaxStatementTaxType_BRAttribute(TaxType_BR::ICMSST),
    FBTaxStatementTaxType_BRAttribute(TaxType_BR::ICMSDiff),
    FBTaxStatementTaxType_BRAttribute(TaxType_BR::IPI),
    FBTaxStatementLocation_BRAttribute('BRA', 'PR'),
    FBTaxStatementLocation_BRAttribute('BRA', 'RJ'),
    FBTaxStatementLocation_BRAttribute('BRA', 'RS'),
    FBTaxStatementLocation_BRAttribute('BRA', 'SC'),
    FBTaxStatementLocation_BRAttribute('BRA', 'SP'),
    FBTaxStatementSetupTable_BRAttribute(tableStr(FBSpedFiscalFileParameters_BR))
]
class FBSpedFiscalFileController_BR extends FBTaxStatementController_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Contructs a new instance of the <c>FBSpedFiscalFileController_BR</c> class.
    /// </summary>
    /// <param name="_args">
    ///     <c>Args</c> class instance representing the arguments used to construct the controller class.
    /// </param>
    /// <returns>
    ///     An instance of the <c>FBSpedFiscalFileController_BR</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     Exception indicating that the appropriate tax assessment has not been created yet.
    /// </exception>
    public static SysOperationController construct(Args _args)
    {
        FBSpedFiscalFileContract_BR         contract;
        FBSpedFiscalFileController_BR       controller = new FBSpedFiscalFileController_BR();
        FBBookingPeriod_BR                  bookingPeriod;
        FBTaxAssessment_BR                  taxAssessment;
        FiscalEstablishmentIEPerState_BR    fiscalEstablishmentIEPerState;

        boolean existsTaxAssessment(TaxType_BR _taxType)
        {
            boolean ret = true;

            select firstOnly RecId from taxAssessment
                where taxAssessment.FBBookingPeriod_BR == bookingPeriod.RecId
                    && taxAssessment.TaxType == _taxType;

            if (!taxAssessment)
            {
                ret = checkFailed(strfmt("@SYS4006815", _taxType));
            }

            return ret;
        }

        if (controller.canRetrieveBookingPeriodFromArgs(_args))
        {
            controller.initializeFromArgs(_args);

            contract = controller.getDataContractObject();

            bookingPeriod = controller.bookingPeriod();

            select firstOnly RecId from fiscalEstablishmentIEPerState
                where fiscalEstablishmentIEPerState.FiscalEstablishment_BR == bookingPeriod.fiscalEstablishment().RecId;

            if (fiscalEstablishmentIEPerState)
            {
                existsTaxAssessment(TaxType_BR::ICMSST);
            }

            existsTaxAssessment(TaxType_BR::ICMSDiff);
            boolean hasIcmsTaxAssessment = existsTaxAssessment(TaxType_BR::ICMS);
            boolean hasIpiTaxAssessment = existsTaxAssessment(TaxType_BR::IPI);

            FBSpedFiscalFileParameters_BR spedFiscalParameters = FBSpedFiscalFileParameters_BR::find(bookingPeriod.FiscalEstablishmentId, bookingPeriod.FiscalEstablishmentDataArea);

            contract.parmFiscalEstablishmentId(bookingPeriod.FiscalEstablishmentId);
            contract.parmFiscalEstablishmentDataArea(bookingPeriod.FiscalEstablishmentDataArea);
            contract.parmMonth(bookingPeriod.PeriodMonth);
            contract.parmYr(bookingPeriod.PeriodYear);
            contract.parmSpedFiscalVersion(spedFiscalParameters.Version);
            contract.parmBookingPeriod(bookingPeriod);
            contract.parmEnableBlockK(spedFiscalParameters.EnableBlockK);
            if (spedFiscalParameters.EnableBlockK && spedFiscalParameters.BlockK == FBSPEDFiscalBlockK_BR::None)
            {
                contract.parmBlockK(FBSPEDFiscalBlockK_BR::Full);
            }
            else
            {
                contract.parmBlockK(spedFiscalParameters.BlockK);
            }

            controller.parmExecutionMode(SysOperationExecutionMode::ReliableAsynchronous);
            controller.parmShowProgressForm(true);

            if (contract.parmBlockK() != FBSPEDFiscalBlockK_BR::None && hasIcmsTaxAssessment == false && hasIpiTaxAssessment == false)
            {
                warning(strFmt("@FiscalBooks_SpedFiscal:FBSpedFiscalFileController_WarningBlockK", TaxType_BR::ICMS, TaxType_BR::IPI));
            }
        }
        else
        {
            throw error("@SYS22996");
        }

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FBSpedFiscalFileController_BR::construct(_args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterOperation</Name>
				<Source><![CDATA[
    protected void afterOperation(SysOperationExecutionMode _executionMode, AifAsyncResult _asyncResult)
    {
        super(_executionMode, _asyncResult);

        if (_executionMode != SysOperationExecutionMode::ReliableAsynchronous
            && _asyncResult.parmIsCompleted()
            && !_asyncResult.parmHasException())
        {
            FBSpedFiscalFileContract_BR contract = this.getDataContractObject();
            ERFormatMappingRunJobTable formatMappingRunJobTable = ERFormatMappingRunJobTable::find(contract.parmFormatMappingRunJobId());
            DocuRef attachment = DocumentManagement::findAttachmentsForCommon(formatMappingRunJobTable);

            if (attachment)
            {
                DocuRef oldDocuRef;
                bookingPeriod = this.bookingPeriod();

                ttsbegin;
                delete_from oldDocuRef
                    where oldDocuRef.RefTableId == bookingPeriod.TableId
                        && oldDocuRef.RefRecId == bookingPeriod.RecId;

                attachment.RefCompanyId = bookingPeriod.DataAreaId;
                DocuRef::createFromDocuRef(attachment, bookingPeriod.RecId, bookingPeriod.TableId);
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>