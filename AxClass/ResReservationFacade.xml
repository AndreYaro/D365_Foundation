<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResReservationFacade</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Holds convinience methods for the inquiries into resource reservation tables.
/// </summary>
class ResReservationFacade
{
    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExistSoftCommitmentForQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the are any soft assignment records exist for the tasks activities associated with the given quotation.
    /// </summary>
    /// <param name = "_quotationId">The Id of quotation to check for</param>
    /// <returns>True if there are soft assignments found; otherwise, false</returns>
    public static boolean checkExistSoftCommitmentForQuotation(QuotationId _quotationId)
    {
        ResAssignment assignmentTable;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            RecId rootActivity = ActivityFacade::findActivityByQuotationId(_quotationId);
            if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
            {
                PSAProjSchedRole teamTable;

                select firstonly RecId from assignmentTable
                    exists join teamTable
                        where teamTable.RootActivity == rootActivity
                            && teamTable.RecId == assignmentTable.ActivityResource
                            && assignmentTable.CommitType == ResCommitType::SoftBook;
            }
            else
            {
                ResActivityTaskView taskView;

                select firstonly RecId from assignmentTable
                    exists join taskView
                        where taskView.Activity == rootActivity
                            && taskView.TaskActivity == assignmentTable.Activity
                            && assignmentTable.CommitType == ResCommitType::SoftBook;
            }
        }

        return assignmentTable ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseSoftCommitmentsForQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes soft assignment records for the tasks activities associated with the given quotation.
    /// </summary>
    /// <param name = "_quotationId">The Id of the quotation to remove assignment records for</param>
    public static void releaseSoftCommitmentsForQuotation(QuotationId _quotationId)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            Map activityResourceMap = new Map(Types::String, Types::Container);
            boolean updateRollUpAsync;

            if (!ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled()))
            {
                // Get the collection of activity resources in this quotation.
                int numberOfActivityResources = ResReservationFacade::getQuotationActivityResourceCollection(activityResourceMap, _quotationId);
                updateRollUpAsync = numberofActivityResources <= ResUtil::numberOfAsyncProcessAllow;
            }

            RecId rootActivity = ActivityFacade::findActivityByQuotationId(_quotationId);

            ResAssignment assignmentTable;
            
            if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
            {
                PSAProjSchedRole teamTable;
                delete_from assignmentTable
                    where assignmentTable.CommitType == ResCommitType::SoftBook
                    exists join teamTable
                        where teamTable.RootActivity == rootActivity
                            && teamTable.RecId == assignmentTable.ActivityResource;
            }
            else
            {
                ResActivityTaskView taskView;
                delete_from assignmentTable
                    exists join taskView
                        where taskView.Activity == rootActivity
                            && taskView.TaskActivity == assignmentTable.Activity
                            && assignmentTable.CommitType == ResCommitType::SoftBook;
            }

            ResBooking bookingTable;
            delete_from bookingTable
                where bookingTable.Activity == rootActivity
                    && bookingTable.CommitType == ResCommitType::SoftBook;

            if (!ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled()))
            {
                // Update reservation and availability roll-ups for the activity resources in map.
                MapEnumerator activityResourceMapEnum = activityResourceMap.getEnumerator();
                while (activityResourceMapEnum.moveNext())
                {
                    ActivityResourceId activityResource = activityResourceMapEnum.currentKey();
                    container dateContainer = activityResourceMapEnum.currentValue();

                    utcdatetime startDateTime = AVTimeframe::getTimeframe(
                    DateTimeUtil::newDateTime(conPeek(dateContainer, 1), 0), AVTimeframeType::Month).start();
                    utcdatetime endDateTime = AVTimeframe::getTimeframe(
                    DateTimeUtil::newDateTime(conPeek(dateContainer, 2), #LastSecondOfTheDay), AVTimeframeType::Month).end();

                    if (updateRollUpAsync)
                    {
                        container arguments = [activityResource, startDateTime, endDateTime];

                        Global::runAsync(classNum(ResRollUpWriter),
                        staticMethodStr(ResRollUpWriter, updateRollUpForSpecificActivityResourceIdAsync), arguments);
                    }
                    else
                    {
                        ResRollUpWriter::updateRollUpForSpecificActivityResourceId(activityResource, startDateTime, endDateTime);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuotationActivityResourceCollection</Name>
				<Source><![CDATA[
    private static int getQuotationActivityResourceCollection(Map _activityResourceMap, QuotationId _quotationId)
    {
        PSAProjSchedRole    psaProjSchedRole;
        int numberOfActivityResources;

        while select RecId, PSARoleStartDate, PSARoleEndDate from psaProjSchedRole
            where psaProjSchedRole.QuotationId == _quotationId
        {
            numberOfActivityResources++;
            ResActivityResourceDetailView activityResource;

            select firstOnly ActivityResourceId from activityResource
                where activityResource.ActivityResource == psaProjSchedRole.RecId;

            container dateContainer = [psaProjSchedRole.PSARoleStartDate, psaProjSchedRole.PSARoleEndDate];

            _activityResourceMap.insert(activityResource.ActivityResourceId, dateContainer);
        }

        return numberOfActivityResources;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseFinishedProj</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases all the reservations for a finished project.
    /// </summary>
    /// <param name="_projId">
    /// The Id of the project to release.
    /// </param>
    /// <param name="_projFinishDate">
    /// The date when the project is finished.
    /// </param>
    public static void releaseFinishedProj(ProjId _projId, TransDate _projFinishDate)
    {
        Map activityResourceMap = new Map(Types::String, Types::Date);
        boolean updateRollUpAsync;
        if (!ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled()))
        {
            // Get the collection of activity resources in this project which has scheduling end date larger than project finish date.
            int numberofActivityResources = ResReservationFacade::getProjectActivityResourceCollection(activityResourceMap, _projId, _projFinishDate);
            updateRollUpAsync = numberofActivityResources <= ResUtil::numberOfAsyncProcessAllow;
        }

        PSAProjSchedRole psaProjSchedRole;
        ResBooking bookingTable;
        ResAssignment assignmentTable;
        ActivityRecId rootActivity = ProjWBS::getRootActivityRecId(_projId);
        utcdatetime cutOffDate = DateTimeUtil::newDateTime(_projFinishDate, 0);

        ttsbegin;
        //---delete all reservations later than the project closing date
        delete_from bookingTable
            where bookingTable.Activity == rootActivity
                && bookingTable.Day > cutOffDate;

        if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
        {
            delete_from assignmentTable
                where assignmentTable.Day > cutOffDate
                exists join psaProjSchedRole
                where psaProjSchedRole.RootActivity == rootActivity
                    && psaProjSchedRole.RecId == assignmentTable.ActivityResource;
        }
        else
        {
            ResActivityTaskView taskView;

            delete_from assignmentTable
                where assignmentTable.Day > cutOffDate
                exists join taskView
                where taskView.Activity == rootActivity
                    && taskView.TaskActivity == assignmentTable.Activity;
        }

        //---update the end date of the proj role
        update_recordset psaProjSchedRole
        setting
            psaRoleEndDate = _projFinishDate
        where psaProjSchedRole.psaRoleEndDate > _projFinishDate
           && psaProjSchedRole.ProjId == _projId;

        //---remove the worker if all assignments are in the future
        update_recordset psaProjSchedRole
        setting
            PSARoleStartDate  = _projFinishDate,
            Resource            = 0
        where psaProjSchedRole.PSARoleStartDate > _projFinishDate
           && psaProjSchedRole.ProjId == _projId;

        if (!ResUtil::isPerformanceEnhancementFeatureEnabled(ResEnableByDefaultPerfEnhancementFeatureFlight::instance().isEnabled()))
        {
            // Update reservation and availability roll-ups for the activity resources in map.
            MapEnumerator activityResourceMapEnum = activityResourceMap.getEnumerator();
            while (activityResourceMapEnum.moveNext())
            {
                ActivityResourceId activityResource = activityResourceMapEnum.currentKey();
                date originalSchedulingEndDate = activityResourceMapEnum.currentValue();

                if (updateRollUpAsync)
                {
                    container arguments = [activityResource, cutOffDate,
                        DateTimeUtil::newDateTime(originalSchedulingEndDate, #LastSecondOfTheDay)];

                    Global::runAsync(classNum(ResRollUpWriter),
                        staticMethodStr(ResRollUpWriter, updateRollUpForSpecificActivityResourceIdAsync), arguments);
                }
                else
                {
                    ResRollUpWriter::updateRollUpForSpecificActivityResourceId(activityResource, cutOffDate,
                        DateTimeUtil::newDateTime(originalSchedulingEndDate, #LastSecondOfTheDay));
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectActivityResourceCollection</Name>
				<Source><![CDATA[
    private static int getProjectActivityResourceCollection(
        Map _activityResourceMap, ProjId _projId, date _projectFinishDate)
    {
        PSAProjSchedRole    psaProjSchedRole;
        int numberOfActivityResource;

        while select RecId, PSARoleEndDate from psaProjSchedRole
            where psaProjSchedRole.ProjId == _projId
                && psaProjSchedRole.PSARoleEndDate > _projectFinishDate
        {
            numberOfActivityResource++;
            ResActivityResourceDetailView activityResource;

            select firstOnly ActivityResourceId from activityResource
                where activityResource.ActivityResource == psaProjSchedRole.RecId;

            _activityResourceMap.insert(activityResource.ActivityResourceId, psaProjSchedRole.PSARoleEndDate);
        }

        return numberOfActivityResource;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>