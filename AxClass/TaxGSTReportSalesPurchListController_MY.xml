<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTReportSalesPurchListController_MY</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxGSTReportSalesPurchListController_MY</c> class is the controller for the <c>TaxGSTReportSalesPurchList_MY</c> SSRS report.
/// </summary>
public class TaxGSTReportSalesPurchListController_MY extends SrsReportRunController implements BatchRetryable
{
    TaxGSTReportSalesPurchListContract_MY   contract;
    TaxDirection                            taxDirection;
    Caption                                 caption;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getParameterValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the values of parameters and passes them to the report.
    /// </summary>
    /// <remarks>
    /// Retrieves the values of parameters.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void getParameterValues()
    {
        if (args.parmEnumType() == enumnum(SalesPurch))
        {
            switch (args.parmEnum())
            {
                // Set the TaxDirection value to IncomingTax or OutgoingTax
                // based on parmEnum value from menu item.
                case SalesPurch::Purch :
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceMY00014, funcName());
                    taxDirection = TaxDirection::IncomingTax;
                    caption = "@SYP4860960";
                    break;

                case SalesPurch::Sales :
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceMY00013, funcName());
                    taxDirection = TaxDirection::OutgoingTax;
                    caption = "@SYP4860962";
                    break;

                default :
                    // Function Purchase/Supply list by tax code has been incorrectly called.
                    throw error(strfmt("@SYS22828", "@SYP4860964"));
            }
        }
        else
        {
            // Function Purchase/Supply list by tax code has been incorrectly called.
            throw error(strfmt("@SYS22828", "@SYP4860964"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        contract = this.parmReportContract().parmRdpContract();

        this.getParameterValues();
        this.parmDialogCaption(caption);

        contract.parmTaxDirection(taxDirection);
        contract.parmCaption(caption);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        TaxReportPeriod taxReportPeriod;

        contract = this.parmReportContract().parmRdpContract();
        taxReportPeriod = TaxReportPeriod::find(contract.parmTaxPeriod(), contract.parmFromDate());

        contract.parmFromDate(taxReportPeriod.FromDate);
        contract.parmToDate(taxReportPeriod.ToDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TaxGSTReportSalesPurchListController_MY controller = new TaxGSTReportSalesPurchListController_MY();

        controller.parmReportName(ssrsReportStr(TaxGSTReportSalesPurchList_MY, report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>