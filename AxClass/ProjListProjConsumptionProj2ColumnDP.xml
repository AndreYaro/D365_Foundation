<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjConsumptionProj2ColumnDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListProjConsumptionProj2ColumnDP</c> class is the report data provider class for the
///    associated <c>ProjListProjConsumptionProj2Column</c> reports.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(ProjStatementProject)),
    SRSReportParameterAttribute(classStr(ProjListProjConsumptionContract))
]
class ProjListProjConsumptionProj2ColumnDP extends SRSReportDataProviderBase
{
    #ProjReports

    ProjOptionTM            timeMaterial;
    ProjOptionFixedPrice    fixedPrice;
    ProjOptionInvestment    investment;
    ProjOptionInternal      internalCost;
    ProjOptionTime          time;
    ProjOptionHours         hour;
    ProjOptionCost          expenses;
    ProjOptionItem          item;
    NoYes                   timeMaterialBillingMethod;
    NoYes                   fixedPriceBillingMethod;
    TransDate               projFromDate;
    TransDate               projBreakDate;
    TransDate               projToDate;
    TransDate               ledgerFromDate;
    TransDate               ledgerBreakDate;
    TransDate               ledgerToDate;
    projActualVsBudget      actualVsBudget;
    ForecastModelId         forecastModelId;
    ProjListStateProjType   stateProjType;
    Level                   level;
    boolean                 skipBlankId;
    boolean                 skipZero;
    ProjShowAmount          showAmount;
    ProjAmountQty           amountQty;

    ProjListProjTrans_Consumption   listProjTrans;
    ProjListProjTransLayout         listProjTransLayout;
    ProjListProjHelpClass           actualProjHelpClass;
    ProjListProjHelpClass           budgetProjHelpClass;
    ProjListProjConsumptionTmp      projListProjConsumptionTmp;

    ProjTable               projTable;

    QueryRun                qrun;

    ProjId                  projIdFound, projId;
    boolean                 firstRun;
    NumberSequenceFormat    oldLevelFormat;

    AmountMST               actualSalary;
    AmountMST               budgetSalary;
    ProjQty                 actualQtyHour;
    ProjQty                 budgetQtyHour;
    AmountMST               actualTotal;
    AmountMST               budgetTotal;

    AmountMST               actualExpense;
    AmountMST               budgetExpense;
    AmountMST               actualItem;
    AmountMST               budgetItem;

    int                     reportType;
    int                     hourQtyDecimals, amountDecimals, grossMarginDecimals, valueAddedDecimals;
    int                     showEmplCost, showEmplQty, showTotalCost, showItemCost, showCostCost;
    str                     headerLabel,periodLabel, totalCostLabel, devianceLabel, group1Label, group2Label, group3Label;
    str                     hourLabel, hourQtyLabel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the consumption amount for hour, expense, and item.
    /// </summary>
    void calculate()
    {
        actualProjHelpClass.parmProjStatement().parmProjId(projIdFound);
        actualProjHelpClass.setParmField();

        budgetProjHelpClass.parmProjStatement().parmProjId(projIdFound);
        budgetProjHelpClass.setParmField();

        if (amountQty == ProjAmountQty::Amount || amountQty == ProjAmountQty::AmountQty)
        {
            actualSalary      += actualProjHelpClass.parmProjStatement().c105_Consumption_Hour();
            budgetSalary      += budgetProjHelpClass.parmProjStatement().c105_Consumption_Hour();
        }

        if (amountQty == ProjAmountQty::Qty || amountQty == ProjAmountQty::AmountQty)
        {
            actualQtyHour     += actualProjHelpClass.parmProjStatement().c105_Consumption_Hour_qty();
            budgetQtyHour     += budgetProjHelpClass.parmProjStatement().c105_Consumption_Hour_qty();
        }

        actualExpense += actualProjHelpClass.parmProjStatement().c125_Consumption_Cost();
        budgetExpense += budgetProjHelpClass.parmProjStatement().c125_Consumption_Cost();

        actualItem += actualProjHelpClass.parmProjStatement().c120_Consumption_Item();
        budgetItem += budgetProjHelpClass.parmProjStatement().c120_Consumption_Item();

        actualTotal     += actualProjHelpClass.parmProjStatement().c100_Total_Consumption();
        budgetTotal     += budgetProjHelpClass.parmProjStatement().c100_Total_Consumption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrintLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a line should be printed.
    /// </summary>
    /// <returns>
    ///    true if the line should be printed; otherwise, false.
    /// </returns>
    boolean checkPrintLine()
    {
        if ((!skipZero || this.lineValue()) && listProjTransLayout.canPrintId(actualProjHelpClass.id()))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeLineOne</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Evaluates whether the line should be printed and calls the insert to temporary table method.
    /// </summary>
    /// <param name="projTableLocal">
    ///    A record that contains information about a project.
    /// </param>
    void executeLineOne(ProjTable projTableLocal)
    {
        if (stateProjType == ProjListStateProjType::Project)
        {
            if ((projTableLocal.level() <= level) ||
                (projTableLocal.levelFormat(level)   != oldLevelFormat))
            {
                if (this.checkPrintLine())
                {
                    actualProjHelpClass.setName();
                    this.insertProjListProjConsumptionTmp();
                    this.setFieldZero();
                }
            }
        }
        else if (this.checkPrintLine())
        {
            actualProjHelpClass.setName();
            this.insertProjListProjConsumptionTmp();
            this.setFieldZero();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjConsumptionTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>ProjListProjConsumptionTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>projListProjConsumptionTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('ProjListProjConsumptionTmp')]
    public ProjListProjConsumptionTmp getProjListProjConsumptionTmp()
    {
        select * from projListProjConsumptionTmp;

        return projListProjConsumptionTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjListTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>ProjListProjTrans</c> class.
    /// </summary>
    private void initProjListTrans()
    {
        listProjTrans = ProjListProjTrans::construct(ProjListStateType::Consumption, ProjListStateId::Project);
        listProjTransLayout = ProjListProjTransLayout::construct(listProjTrans);

        listProjTrans.parmTimeMaterial(timeMaterial);
        listProjTrans.parmFixedPrice(fixedPrice);
        listProjTrans.parmInvestment(investment);
        listProjTrans.parmInternalCost(internalCost);
        listProjTrans.parmtime(time);

        listProjTrans.parmHour(hour);
        listProjTrans.parmExpenses(expenses);
        listProjTrans.parmItem(item);

        listProjTrans.parmProjFromDate(projFromDate);
        listProjTrans.parmProjBreakDate(projBreakDate);
        listProjTrans.parmProjToDate(projToDate);
        listProjTrans.parmLedgerFromDate(ledgerFromDate);
        listProjTrans.parmLedgerBreakDate(ledgerBreakDate);
        listProjTrans.parmLedgerToDate(ledgerToDate);

        listProjTrans.parmActualVsBudget(actualVsBudget);
        listProjTrans.parmForecastModelId(forecastModelId);

        listProjTransLayout.parmStateProjType(stateProjType);
        listProjTransLayout.parmLevel(level);
        listProjTransLayout.parmSkipBlank(skipBlankId);
        listProjTransLayout.parmSkipZero(skipZero);

        listProjTransLayout.parmShowAmount(showAmount);
        listProjTransLayout.parmAmountQty(amountQty);

        if (listProjTransLayout.parmStateProjType() != ProjListStateProjType::Project)
        {
            listProjTransLayout.parmLevel(2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListProjConsumptionTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the required data and inserts it into the temporary table.
    /// </summary>
    private void insertProjListProjConsumptionTmp()
    {
        projListProjConsumptionTmp.clear();

        projListProjConsumptionTmp.Id            = actualProjHelpClass.id();
        projListProjConsumptionTmp.IdLabel       = strfmt('%1',stateProjType);
        projListProjConsumptionTmp.Name          = actualProjHelpClass.name();

        projListProjConsumptionTmp.QtyHour       = actualQtyHour;
        projListProjConsumptionTmp.QtyHour1      = budgetQtyHour;
        projListProjConsumptionTmp.QtyHour2      = ProjListProjHelpClass::calcActualVsBudget(actualQtyHour,
                                                    budgetQtyHour, actualVsBudget, true);

        projListProjConsumptionTmp.EmplCost      = listProjTransLayout.showAmountReport(actualSalary, showAmount);
        projListProjConsumptionTmp.EmplCost1     = listProjTransLayout.showAmountReport(budgetSalary, showAmount);
        projListProjConsumptionTmp.EmplCost2     = ProjListProjHelpClass::calcActualVsBudget(projListProjConsumptionTmp.EmplCost,
                                                    projListProjConsumptionTmp.EmplCost1, actualVsBudget, true);

        projListProjConsumptionTmp.CostCost      = listProjTransLayout.showAmountReport(actualExpense, showAmount);
        projListProjConsumptionTmp.CostCost1     = listProjTransLayout.showAmountReport(budgetExpense, showAmount);
        projListProjConsumptionTmp.CostCost2     = ProjListProjHelpClass::calcActualVsBudget(projListProjConsumptionTmp.CostCost,
                                                    projListProjConsumptionTmp.CostCost1, actualVsBudget, true);

        projListProjConsumptionTmp.ItemCost      = listProjTransLayout.showAmountReport(actualItem, showAmount);
        projListProjConsumptionTmp.ItemCost1     = listProjTransLayout.showAmountReport(budgetItem, showAmount);
        projListProjConsumptionTmp.ItemCost2     = ProjListProjHelpClass::calcActualVsBudget(projListProjConsumptionTmp.ItemCost,
                                                    projListProjConsumptionTmp.ItemCost1, actualVsBudget, true);

        projListProjConsumptionTmp.TotalCost     = listProjTransLayout.showAmountReport(actualTotal, showAmount);
        projListProjConsumptionTmp.TotalCost1    = listProjTransLayout.showAmountReport(budgetTotal, showAmount);
        projListProjConsumptionTmp.TotalCost2    = ProjListProjHelpClass::calcActualVsBudget(projListProjConsumptionTmp.TotalCost,
                                                    projListProjConsumptionTmp.TotalCost1, actualVsBudget, true);

        // set labels
        projListProjConsumptionTmp.HeaderLabel     = headerLabel;
        projListProjConsumptionTmp.PeriodLabel     = periodLabel;
        projListProjConsumptionTmp.EmplCostLabel   = hourLabel;
        projListProjConsumptionTmp.QtyHourLabel    = hourQtyLabel;

        projListProjConsumptionTmp.DevianceLabel   = devianceLabel;

        // set decimal values
        projListProjConsumptionTmp.DecimalHourQty  = hourQtyDecimals;
        projListProjConsumptionTmp.DecimalAmount   = amountDecimals;

        // set field visibility
        projListProjConsumptionTmp.ShowEmplCost    = showEmplCost;
        projListProjConsumptionTmp.ShowQtyHour     = showEmplQty;
        projListProjConsumptionTmp.ShowItemCost    = showItemCost;
        projListProjConsumptionTmp.ShowCostCost    = showCostCost;
        projListProjConsumptionTmp.ShowTotalCost   = showTotalCost;

        projListProjConsumptionTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the consumption amounts for hour, expense and item are equal to zero.
    /// </summary>
    /// <returns>
    ///    true if all the values are not zero; otherwise, false.
    /// </returns>
    boolean lineValue()
    {
        return ((actualSalary   != 0) ||
                (actualTotal    != 0) ||
                (actualQtyHour  != 0) ||
                (budgetSalary   != 0) ||
                (budgetTotal    != 0) ||
                (budgetQtyHour  != 0) ||
                (actualExpense  != 0) ||
                (budgetExpense  != 0) ||
                (actualItem     != 0) ||
                (budgetItem     != 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the query ranges.
    /// </summary>
    void modifyQuery()
    {
        QueryBuildDataSource qbdsProjTable = qrun.query().dataSourceTable(tableNum(ProjTable));
        qbdsProjTable.addSortField(fieldNum(ProjTable, ProjId));

        QueryBuildRange rangeHide = qbdsProjTable.addRange(fieldNum(ProjTable, Type));
        rangeHide.status(RangeStatus::Hidden);

        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            QueryBuildDataSource qbdsPSAContractLineItems = qrun.query().dataSourceTable(tableNum(PSAContractLineItems));
            qbdsPSAContractLineItems.enabled(true);
            PSAContractLineItemRangesHelper::addBillingMethodRangesToDS(
                qbdsPSAContractLineItems,
                timeMaterialBillingMethod,
                fixedPriceBillingMethod);
            PSAContractLineItemRangesHelper::addTransactionTypeRangesToDS(
                qbdsPSAContractLineItems,
                hour,
                expenses,
                false,
                item,
                false);
        }
        else
        {
            if (timeMaterial)
            {
                qbdsProjTable.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::TimeMaterial));
            }

            if (fixedPrice)
            {
                qbdsProjTable.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::FixedPrice));
            }

            if (investment)
            {
                qbdsProjTable.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::Investment));
            }

            if (internalCost)
            {
                qbdsProjTable.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::Cost));
                qbdsProjTable.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::Internal));
            }

            if (time)
            {
                qbdsProjTable.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::Time));
            }

            if (! (timeMaterial || fixedPrice || investment || internalCost ||  time))
            {
                QueryBuildRange rangeEmptyString = qbdsProjTable.addRange(fieldNum(ProjTable,Type));
                rangeEmptyString.value(queryValue(SysQuery::valueEmptyString()));
            }
        }

        if (skipZero)
        {
            QueryBuildDataSource dsProjectTrans = qbdsProjTable.addDataSource((tableNum(ProjTransPostingBudgetView)));
            dsProjectTrans.joinMode(JoinMode::ExistsJoin);
            dsProjectTrans.addLink(fieldNum(ProjTable, ProjId), fieldNum(ProjTransPostingBudgetView, ProjId));
            dsProjectTrans.addRange(fieldNum(ProjTransPostingBudgetView, ProjTransDate)).value(queryValue(listProjTrans.parmProjFromDate()) + '..' + queryValue(listProjTrans.parmProjToDate()));
            dsProjectTrans.addRange(fieldNum(ProjTransPostingBudgetView, LedgerTransDate)).value(queryValue(listProjTrans.parmLedgerFromDate()) + '..' + queryValue(listProjTrans.parmLedgerToDate()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the project level and calls the calculate method.
    /// </summary>
    void printProject()
    {
        ProjTable               projTableLocal;
        ProjFundingSource       projFundingSourceLocal;

        projTableLocal  = qrun.get(tablenum(ProjTable));
        projIdFound     = projTableLocal.ProjId;
        projId          = ProjListProjHelpClass::setProjId(projTableLocal,stateProjType,level);

        if (stateProjType == ProjListStateProjType::FundingSource)
        {
            projFundingSourceLocal = qrun.get(tablenum(ProjFundingSource));
        }
        actualProjHelpClass.setId(projTableLocal, projId, projFundingSourceLocal);

        if (! listProjTransLayout.canPrintId(actualProjHelpClass.idNew()))
        {
            actualProjHelpClass.setOld();

            return;
        }

        if (actualProjHelpClass.checkIdChanged())
        {
            this.executeLineOne(projTableLocal);
        }

        this.calculate();

        actualProjHelpClass.setOld();
        oldLevelFormat  = projTableLocal.levelFormat(level);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. This method will be called by
    ///    SSRS at runtime. The method should compute data and populate the data tables that will be returned
    ///    to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjListProjConsumptionContract contract = this.parmDataContract() as ProjListProjConsumptionContract;

        timeMaterial = contract.parmTimeMaterial();
        fixedPrice = contract.parmFixedPrice();
        investment = contract.parmInvestment();
        internalCost = contract.parmInternalCost();
        time = contract.parmTime();

        hour = contract.parmHour();
        expenses = contract.parmExpenses();
        item = contract.parmItem();

        timeMaterialBillingMethod = contract.parmTimeMaterialBillingMethod();
        fixedPriceBillingMethod = contract.parmFixedPriceBillingMethod();

        projFromDate = contract.parmProjFromDate();
        projBreakDate = contract.parmProjBreakDate();
        projToDate = contract.parmProjToDate();
        ledgerFromDate = contract.parmLedgerFromDate();
        ledgerBreakDate = contract.parmLedgerBreakDate();
        ledgerToDate = contract.parmLedgerToDate();

        actualVsBudget = contract.parmActualVsBudget2Col();
        forecastModelId = contract.parmForecastModelIdV2();

        stateProjType = contract.parmStateProjType();
        level = contract.parmLevel();
        skipBlankId = contract.parmSkipBlankId();
        skipZero = contract.parmSkipZero();

        showAmount = contract.parmShowAmount();
        amountQty = contract.parmAmountQty();

        reportType = contract.parmReportType();

        this.initProjListTrans();

        headerLabel   = listProjTrans.formatSelection(showAmount,false);
        periodLabel   = listProjTrans.formatPeriodLabel('', DateFlags::None);
        [hourLabel, hourQtyLabel, totalCostlabel, devianceLabel] = listProjTrans.setDisplayLabel2Column(hour, expenses, item);

        [showEmplQty, showEmplCost, showCostCost, showItemCost, showTotalCost] = listProjTrans.setDisplayFlags(amountQty, hour, expenses, item);
        [hourQtyDecimals, amountDecimals,
        grossMarginDecimals, valueAddedDecimals] = listProjTrans.setNoOfDecimals(showAmount);

        actualProjHelpClass = ProjListProjHelpClass::newListProjConsumption(
                                projStatement::newListProjConsumption(listProjTrans,ProjActualBudget::Actual,amountQty),
                                stateProjType);

        budgetProjHelpClass = ProjListProjHelpClass::newListProjConsumption(
                                projStatement::newListProjConsumption(listProjTrans,ProjActualBudget::Budget,amountQty,forecastModelId),
                                stateProjType);

        qrun = new QueryRun(this.parmQuery());

        this.modifyQuery();
        this.setSortField();

        while (qrun.next())
        {
            this.printProject();
        }

        if (this.checkPrintLine())
        {
            actualProjHelpClass.setName();
            this.insertProjListProjConsumptionTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldZero</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the fields to zero.
    /// </summary>
    void setFieldZero()
    {
        actualSalary      = 0;
        actualQtyHour     = 0;
        actualTotal       = 0;

        budgetSalary      = 0;
        budgetQtyHour     = 0;
        budgetTotal       = 0;

        actualExpense     = 0;
        budgetExpense     = 0;

        actualItem        = 0;
        budgetItem        = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSortField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the sort field for the query.
    /// </summary>
    void setSortField()
    {
        qrun.query().dataSourceTable(tablenum(ProjTable)).sortClear();

        switch (stateProjType)
        {
            case ProjListStateProjType::Project:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjId));
                break;

            case ProjListStateProjType::Customer:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,CustAccount));
                break;

            case ProjListStateProjType::ProjGroup:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjGroupId));
                break;

            case ProjListStateProjType::WIPProject:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,wipProject));
                break;

            case ProjListStateProjType::InvoiceProject:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjInvoiceProjId));
                break;

            case ProjListStateProjType::ResponsibleSales:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, WorkerResponsibleSales));
                break;

            case ProjListStateProjType::Responsible:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, WorkerResponsible));
                break;

            case ProjListStateProjType::ResponsibleFinancial:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, WorkerResponsibleFinancial));
                break;

            case ProjListStateProjType::Type:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,Type));
                break;

            case ProjListStateProjType::Sorting1:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, SortingId), SortOrder::Ascending, 1);
                break;

            case ProjListStateProjType::Sorting2:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, SortingId), SortOrder::Ascending, 2);
                break;

            case ProjListStateProjType::Sorting3:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, SortingId), SortOrder::Ascending, 3);
                break;

            case ProjListStateProjType::Asset:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,AssetId));
                break;

            case ProjListStateProjType::FundingSource:
                qrun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjInvoiceProjId));

                qrun.query().dataSourceTable(tablenum(ProjTable)).addDataSource(tablenum(ProjInvoiceTable));
                qrun.query().dataSourceTable(tablenum(ProjInvoiceTable)).joinMode(JoinMode::InnerJoin);
                qrun.query().dataSourceTable(tablenum(ProjInvoiceTable)).addLink(fieldnum(ProjTable,ProjInvoiceProjId),fieldnum(ProjInvoiceTable,ProjInvoiceProjId));

                qrun.query().dataSourceTable(tablenum(ProjInvoiceTable)).addDataSource(tablenum(ProjFundingSource));
                qrun.query().dataSourceTable(tablenum(ProjFundingSource)).joinMode(JoinMode::InnerJoin);
                qrun.query().dataSourceTable(tablenum(ProjFundingSource)).addLink(fieldnum(ProjInvoiceTable,ProjInvoiceProjId), fieldnum(ProjFundingSource,ContractId));
                qrun.query().dataSourceTable(tablenum(ProjFundingSource)).addSortField(fieldnum(ProjFundingSource,FundingSourceId));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTotalCostLabel</Name>
				<Source><![CDATA[
    private void setTotalCostLabel(ProjListProjConsumptionTmp _projListProjConsumptionTmp)
    {
        boolean valueInserted = false;
        boolean projMultContractLinesForProjFeatureEnabled = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

        // ONLY EXPENSE SELECTED The column "Total consumption" should be renamed to "Expense"
        if (expenses
            && !(item || hour))
        {
            _projListProjConsumptionTmp.TotalCostLabel = "@SYP4882014";
            valueInserted  = true;
        }

        // ONLY ITEM SELECTED     The column "Total consumption" should be renamed to "Item"
        if (item
            && !(hour || expenses))
        {
            _projListProjConsumptionTmp.TotalCostLabel = "@SYS7407";
            valueInserted = true;
        }

        if (valueInserted)
        {
            if (strFind(totalCostLabel, ":",1,strLen(totalCostLabel)) > 0)
            {
                _projListProjConsumptionTmp.TotalCostLabelFooter = strLRTrim(subStr(totalCostLabel,strFind(totalCostLabel, ":",1,strLen(totalCostLabel)) + 1,strLen(totalCostLabel)));
            }
        }

        if (!valueInserted)
        {
            if (strFind(totalCostLabel, ":",1,strLen(totalCostLabel)) > 0)
            {
                _projListProjConsumptionTmp.TotalCostLabel = strLRTrim(subStr(totalCostLabel,1, strFind(totalCostLabel, ":",1,strLen(totalCostLabel)) - 1));
                _projListProjConsumptionTmp.TotalCostLabelFooter = strLRTrim(subStr(totalCostLabel,strFind(totalCostLabel, ":",1,strLen(totalCostLabel)) + 1,strLen(totalCostLabel)));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>