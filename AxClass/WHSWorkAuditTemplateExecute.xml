<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkAuditTemplateExecute</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkAuditTemplateExecute</c> class is used to execute audit break functions defined on the work audit templates.
/// </summary>
public class WHSWorkAuditTemplateExecute
{
    protected WHSWorkAuditTemplateLine  workAuditTemplateLine;
    protected WHSWorkTable              workTable;
    protected RecId                     captureDataRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeAuditEvent</Name>
				<Source><![CDATA[
    private void executeAuditEvent()
    {
        switch (workAuditTemplateLine.WorkAuditTemplateEvents)
        {
            case WHSWorkAuditTemplateEvents::ShipConfirm:
                this.executeAuditEventShipConfirm();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeAuditEventShipConfirm</Name>
				<Source><![CDATA[
    private void executeAuditEventShipConfirm()
    {
        WHSWorkLine workLine;   
        WHSLoadTable loadTable;

        while select LoadId from workLine
            group by LoadId
            where workLine.LoadId != ''
                && workLine.WorkId == workTable.WorkId
                && workLine.WorkStatus != WHSWorkStatus::Cancelled
        exists join loadTable
            where loadTable.LoadId    == workLine.LoadId
               && loadTable.LoadDirection == WHSLoadDirection::Outbound
        {           
            WHSShipConfirm shipConfirm = WHSShipConfirm::construct();

            shipConfirm.parmSkipActualShipDate(true);
            shipConfirm.parmSkipLoadTender(true);
            shipConfirm.shipConfirm(workLine.LoadId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor method with given parameters.
    /// </summary>
    /// <param name="_workTable">
    /// Work record to be set to instance.
    /// </param>
    /// <param name="_captureDataRecId">
    /// Capture data record id to be set to instance.
    /// </param>
    public void new(WHSWorkTable   _workTable,
             RecId          _captureDataRecId = 0)
    {
        workTable           = _workTable;
        captureDataRecId    = _captureDataRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkAuditTemplateLine</Name>
				<Source><![CDATA[
    WHSWorkAuditTemplateLine parmWorkAuditTemplateLine(WHSWorkAuditTemplateLine _workAuditTemplateLine = workAuditTemplateLine)
    {
        workAuditTemplateLine = _workAuditTemplateLine;

        return workAuditTemplateLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeReportRunController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report run controller class.
    /// </summary>
    /// <returns>An instance of <c>SrsReportRunController</c> class.</returns>
    protected SrsReportRunController initializeReportRunController()
    {
        SrsReportRunController reportRunController;
        if (workAuditTemplateLine.WorkAuditTemplateReportName == 'RetailLabel')
        {
            RetailInventItemLabelReportSetup labelReportSetup;
            reportRuncontroller = new RetailLabelController();
            select RecId, type from labelReportSetup;
            if (labelReportSetup.RecId)
            {
                Args args = new Args(reportRunController);
                switch (labelReportSetup.type)
                {
                    case RetailLabelTypeBase::ShelfLabel:
                        args.menuItemName(menuItemOutputStr(RetailLabelA4Portrait3X5_Shelf));
                        break;

                    case RetailLabelTypeBase::ItemLabel:
                        args.menuItemName(menuItemOutputStr(RetailLabelA4Landscape3x5_Item));
                        break;
                }
                args.menuItemType(MenuItemType::Output);
                reportRunController.parmArgs(args);
            }
        }
        else
        {
            reportRunController = new SrsReportRunController();
        }

        return reportRunController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>billOfLadingReport</Name>
				<Source><![CDATA[
    protected SRSCatalogItemName billOfLadingReport()
    {
        return ssrsReportStr(WHSBillOfLading, Report);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReport</Name>
				<Source><![CDATA[
    private void printReport()
    {
        SrsReportRunController reportRunController = this.initializeReportRunController();

        if (!reportRunController.parmReportName())
        {
            reportRunController.parmReportName(workAuditTemplateLine.WorkAuditTemplateReportName + '.Report');
        }

        SRSPrintDestinationSettings destinationSettings = new SRSPrintDestinationSettings();
        destinationSettings.unpack(workAuditTemplateLine.PrintSettings);

        if (reportRunController.parmReportName() == this.billOfLadingReport())
        {
            ttsbegin;
            WHSShipmentTable shipmentTable = WHSShipmentTable::find(workTable.ShipmentId, true);
            if (shipmentTable.RecId && !shipmentTable.BillOfLadingId)
            {
                shipmentTable.setBillOfLadingId();
                shipmentTable.update();

                TMSFreightBillDetail::setBillOfLadingId(shipmentTable);
            }
            ttscommit;

            if (shipmentTable.RecId)
            {
                WHSBillOfLadingDataUtil billOfLadingDataUtil = WHSBillOfLadingDataUtil::construct();
                billOfLadingDataUtil.parmShipmentCriteria(shipmentTable);
                billOfLadingDataUtil.populateBillOfLadingTables();

                WHSBillOfLading billOfLading = WHSBillOfLading::find(shipmentTable.BillOfLadingId);

                Args args = new Args(this.billOfLadingReport());
                args.caller(this);
                args.record(billOfLading);

                WHSBillofLadingController billOfLadingController = new WHSBillofLadingController();
                billOfLadingController.parmReportName(this.billOfLadingReport());
                billOfLadingController.parmReportContract().parmPrintSettings(destinationSettings);
                billOfLadingController.parmArgs(args);
                billOfLadingController.parmShowDialog(false);
                billOfLadingController.startOperation();
            }
        }
        else
        {
            reportRunController.parmLoadFromSysLastValue(false);
            reportRunController.parmReportContract().parmPrintSettings(destinationSettings);
            reportRunController.runReport();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes methods defined in work audit template on a work record.
    /// </summary>
    /// <param name="_tempId">
    /// Work audit template id.
    /// </param>
    /// <param name="_seqNum">
    /// Sequence number that is the start point of the methods to be executed.
    /// </param>
    /// <param name="_workTable">
    /// Work record that template is executed on.
    /// </param>
    /// <param name="_captureDataRecId">
    /// Capture data record is set to <c>WHSWorkAuditTemplateExecute</c> instance.
    /// </param>
    /// <returns>
    /// Container containing the work audit template execution run state.
    /// </returns>
    public static container execute(WHSWorkAuditTemplateId _tempId,
                             WHSAuditSeqNum         _seqNum,
                             WHSWorkTable           _workTable,
                             RecId                  _captureDataRecId = 0)
    {
        WHSWorkAuditTemplateExecute templateExecute = new WHSWorkAuditTemplateExecute(_workTable, _captureDataRecId);
        container                   ret = conNull();
        WHSAuditSeqNum              auditSeqNum;
        WHSWorkAuditTemplateLine    workAuditTemplateLine;
        boolean                     auditComplete = true;

        while select workAuditTemplateLine
            order by AuditSeqNum
            where workAuditTemplateLine.WorkAuditTemplateId == _tempId  &&
                  workAuditTemplateLine.AuditSeqNum         >= _seqNum
        {
            templateExecute.parmWorkAuditTemplateLine(workAuditTemplateLine);

            WHSWorkAuditTemplateCustomProcessParameters processParameters = WHSWorkAuditTemplateCustomProcessParameters::construct();
            processParameters.workTable = templateExecute.workTable;
            processParameters.captureDataRecId = templateExecute.captureDataRecId;

            switch (workAuditTemplateLine.AuditBreakFunction)
            {
                case WHSAuditBreakFunction::CaptureData:
                    if (_captureDataRecId && workAuditTemplateLine.WorkAuditTemplateCustomMethod)
                    {
                        workAuditTemplateLine.processWorkAuditBreak(processParameters);
                        _captureDataRecId = 0;
                    }
                    else
                    {
                        auditComplete = false;
                        auditSeqNum = workAuditTemplateLine.AuditSeqNum;
                    }
                    break;

                case WHSAuditBreakFunction::Custom:
                    workAuditTemplateLine.processWorkAuditBreak(processParameters);
                    break;

                case WHSAuditBreakFunction::Display:
                    auditComplete = false;
                    auditSeqNum = workAuditTemplateLine.AuditSeqNum;
                    break;

                case WHSAuditBreakFunction::Event:
                    templateExecute.executeAuditEvent();
                    break;

                case WHSAuditBreakFunction::Print:
                    templateExecute.printReport();
                    break;
            }

            if (!auditComplete)
            {
                break;
            }
        }

        return [auditSeqNum, auditComplete];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>