<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetMoveHistEngine_Both</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetMoveHistEngine_Both extends RAssetMoveHistEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
        public void updateDesign()
    {
        rAssetMoveHist_ds.allowDelete(! moveHist.TransferTransRecId && moveHist.isLast());
        rAssetMoveHist_ds.allowEdit(! moveHist.TransferTransRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        RAssetStandards      assetStandardsLocal;
        RAssetStatusType     assetStatusType = RAssetStatusType::construct(rAssetTable);
        boolean              ret             = true;

        if (assetStatusType.disposed())
            ret = ret && checkFailed(strFmt("@GLS116565", moveHist.AccountNum));

        if (ret)
        {
            while select LastDepDate from assetStandardsLocal
                where assetStandardsLocal.AssetId == rAssetTable.AccountNum
            {
                if (assetStandardsLocal.LastDepDate && moveHist.ChangeDate <= assetStandardsLocal.LastDepDate)
                    ret = checkFailed("@GLS116670");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        /// <summary>
    /// Indicates whether the new transfer line is valid to save.
    /// </summary>
    /// <param name="_needinfo">
    /// true if error messages should be shown in the infolog class; otherwise, false.
    /// </param>
    /// <returns>
    /// true if the transfer line is correct and ready to save; otherwise, false.
    /// </returns>
    public boolean validateWrite(boolean _needinfo = true)
    {
        RAssetTransDate      lastDepDate;
        RAssetStandards      assetStandardsLocal;
        RAssetTableInterval  assetInterval;
        boolean              ret;

        if (moveHistLast.RecId)
        {
            if (moveHistLast.NewEmployee == moveHist.NewEmployee &&
                moveHistLast.NewLocation == moveHist.NewLocation)
            {
                return _needinfo ? checkFailed(strFmt("@GLS220496", moveHist.AccountNum)) : false;
            }
        }
        else if (! moveHist.NewEmployee && ! moveHist.NewLocation)
        {
            return _needinfo ? checkFailed(strFmt("@SYS99486", "@GLS116154", "@GLS116155")) : false;
        }

        if (rAssetStatusType.disposed())
            return _needinfo ? checkFailed(strFmt("@GLS116565", moveHist.AccountNum)) : false;

        if (moveHistLast.NewLocation != moveHist.NewLocation)
        {
            if (RAssetInventoryTable::checkInventory(rAssetTable, moveHist.ChangeDate, "", _needinfo, moveHist.NewLocation))
                return false;

            if (RAssetInventoryTable::checkInventory(rAssetTable, moveHist.ChangeDate, "", _needinfo, moveHistLast.NewLocation)) // check last location
                return false;

            while select assetStandardsLocal
                where assetStandardsLocal.AssetId == moveHist.AccountNum &&
                      assetStandardsLocal.Depreciation
            {
                lastDepDate   = assetStandardsLocal.LastDepDate;
                assetInterval = RAssetTableInterval::construct(assetStandardsLocal, lastDepDate);
                if (lastDepDate && moveHist.ChangeDate < assetInterval.getStartDate(lastDepDate))
                    return _needinfo ? checkFailed("@GLS116510") : false;
            }
        }

        ret = super(_needinfo);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>