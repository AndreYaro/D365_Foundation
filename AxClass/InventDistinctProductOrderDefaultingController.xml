<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDistinctProductOrderDefaultingController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Controller class of distinct product order defaulting.
/// </summary>
class InventDistinctProductOrderDefaultingController
{
    private boolean             productDimensionModified;
    private boolean             siteModified;
    private boolean             locationModified;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>InventDistinctProductOrderDefaultingController</c> instance.
    /// </summary>
    /// <returns>An <c>InventDistinctProductOrderDefaultingController</c> instance.</returns>
    protected static InventDistinctProductOrderDefaultingController construct()
    {
        return new InventDistinctProductOrderDefaultingController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromFieldId</Name>
				<Source><![CDATA[
    public static InventDistinctProductOrderDefaultingController constructFromFieldId(FieldId _dimensionFieldId)
    {
        FieldId safeFieldId = fieldExt2Id(_dimensionFieldId); // this is needed as the form engine might use different field IDs.

        InventDistinctProductOrderDefaultingController inventDistinctProductOrderDefaultingController = InventDistinctProductOrderDefaultingController::construct();

        inventDistinctProductOrderDefaultingController.productDimensionModified   = InventDim::isFieldIdProductDimension(safeFieldId);
        inventDistinctProductOrderDefaultingController.siteModified               = fieldNum(InventDim, InventSiteId) == safeFieldId;
        inventDistinctProductOrderDefaultingController.locationModified           = fieldNum(InventDim, InventLocationId) == safeFieldId;

        return inventDistinctProductOrderDefaultingController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromFieldSet</Name>
				<Source><![CDATA[
    public static InventDistinctProductOrderDefaultingController constructFromFieldSet(Set _dimensionFieldIdSet)
    {
        InventDistinctProductOrderDefaultingController inventDistinctProductOrderDefaultingController = InventDistinctProductOrderDefaultingController::construct();

        inventDistinctProductOrderDefaultingController.productDimensionModified   = InventDim::doesFieldSetContainProductDimension(_dimensionFieldIdSet);
        inventDistinctProductOrderDefaultingController.siteModified               = _dimensionFieldIdSet.in(fieldNum(InventDim, InventSiteId));
        inventDistinctProductOrderDefaultingController.locationModified           = _dimensionFieldIdSet.in(fieldNum(InventDim, InventLocationId));

        return inventDistinctProductOrderDefaultingController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles defaulting when item ID is modified.
    /// </summary>
    /// <param name = "_inventDistinctProductOrderDefaulting">An implementation instance of the <c>InventDistinctProductOrderDefaulting</c> interface.</param>
    /// <param name = "_inventDistinctProductDimensionSpecificDefaultingArgs">The arguments for the dimension specific defaulting.</param>
    public static void itemIdModified(InventDistinctProductOrderDefaulting _inventDistinctProductOrderDefaulting, InventDistinctProductDimensionSpecificDefaultingArgs _inventDistinctProductDimensionSpecificDefaultingArgs)
    {
        InventDistinctProductOrderDefaultingController controller = InventDistinctProductOrderDefaultingController::construct();

        _inventDistinctProductOrderDefaulting.initReleasedProductSpecificDefaulting(_inventDistinctProductDimensionSpecificDefaultingArgs.InventTable);
        _inventDistinctProductOrderDefaulting.initStorageDimensionsFromHeader();
        var inventDim = _inventDistinctProductOrderDefaulting.inventDim();

        if (controller.canExecuteDimensionSpecificDefaulting(_inventDistinctProductDimensionSpecificDefaultingArgs, inventDim))
        {
            inventDim.initFromInventTable(_inventDistinctProductDimensionSpecificDefaultingArgs.InventTable, _inventDistinctProductDimensionSpecificDefaultingArgs.ItemOrderSetupType, inventDim);

            inventDim = inventDim::findOrCreate(inventDim);

            _inventDistinctProductOrderDefaulting.setInventDim(inventDim);

            if (EcoResProductVariantItemSalesTaxGroupItemIdModifiedFlight::instance().isEnabled())
            {
                _inventDistinctProductDimensionSpecificDefaultingArgs.parmIsProductDimensionModified(true);
            }

            InventDistinctProductOrderDefaultingController::executeDimensionsSpecificDefaulting(_inventDistinctProductOrderDefaulting, _inventDistinctProductDimensionSpecificDefaultingArgs);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles defaulting when product dimesions of site is modified.
    /// </summary>
    /// <param name = "_inventDistinctProductOrderDefaulting">An implementation instance of the <c>InventDistinctProductOrderDefaulting</c> interface.</param>
    /// <param name = "_modifiedInventDim">The modified <c>InventDim</c> record buffer.</param>
    /// <param name = "_inventDistinctProductDimensionSpecificDefaultingArgs">The arguments for the dimension specific defaulting.</param>
    /// <returns>A potentially updated <c>InventDim</c> record buffer.</returns>
    public InventDim inventDimModified(InventDistinctProductOrderDefaulting _inventDistinctProductOrderDefaulting, InventDim _modifiedInventDim, InventDistinctProductDimensionSpecificDefaultingArgs _inventDistinctProductDimensionSpecificDefaultingArgs)
    {
        if (!this.canExecuteDimensionSpecificDefaulting(_inventDistinctProductDimensionSpecificDefaultingArgs, _modifiedInventDim))
        {
            return _modifiedInventDim;
        }

        if (this.isProductDimensionOrSiteModified())
        {
            var originalInventDim = _inventDistinctProductOrderDefaulting.InventDim().data();

            if (this.isProductDimensionModified() && !this.isSiteModified())
            {
                _modifiedInventDim = this.getDefaultedInventDimBaseline(_modifiedInventDim, _inventDistinctProductOrderDefaulting);
            }

            _modifiedInventDim.initFromInventTable(_inventDistinctProductDimensionSpecificDefaultingArgs.InventTable, _inventDistinctProductDimensionSpecificDefaultingArgs.ItemOrderSetupType, _modifiedInventDim);

            _modifiedInventDim = this.mergeDimensionDefaultingValues(originalInventDim, _modifiedInventDim, _inventDistinctProductDimensionSpecificDefaultingArgs.parmKeepOrigin());

            _inventDistinctProductOrderDefaulting.setInventDim(_modifiedInventDim);

            if (EcoResProductVariantItemSalesTaxGroupFeature::isFeatureEnabled())
            {
                _inventDistinctProductDimensionSpecificDefaultingArgs.parmIsProductDimensionModified(this.isProductDimensionModified());
            }

            InventDistinctProductOrderDefaultingController::executeDimensionsSpecificDefaulting(_inventDistinctProductOrderDefaulting, _inventDistinctProductDimensionSpecificDefaultingArgs);

            // inventDim may have changed due to defaulting of e.g. site
            _modifiedInventDim = _inventDistinctProductOrderDefaulting.inventDim();
        }

        return _modifiedInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeDimensionsSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the initialize dimensions specific defaulting if product dimension is fully specified.
    /// </summary>
    /// <param name = "_inventDistinctProductOrderDefaulting">An implementation instance of the <c>InventDistinctProductOrderDefaulting</c> interface.</param>
    /// <param name = "_inventDistinctProductDimensionSpecificDefaultingArgs">The arguments for the dimension specific defaulting.</param>
    private static void executeDimensionsSpecificDefaulting(
        InventDistinctProductOrderDefaulting                 _inventDistinctProductOrderDefaulting,
        InventDistinctProductDimensionSpecificDefaultingArgs _inventDistinctProductDimensionSpecificDefaultingArgs)
    {
        if (!EcoResProductUnitConverter::mustProductVariantsHaveSpecificConversion(_inventDistinctProductDimensionSpecificDefaultingArgs.InventTable.ItemId)
            || InventDistinctProductOrderDefaultingController::checkDimensionDefaultingForProductVariantsWithUoMConversion(_inventDistinctProductDimensionSpecificDefaultingArgs, _inventDistinctProductOrderDefaulting.inventDim()))
        {
            _inventDistinctProductOrderDefaulting.initDimensionsSpecificDefaulting(_inventDistinctProductDimensionSpecificDefaultingArgs);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimensionDefaultingForProductVariantsWithUoMConversion</Name>
				<Source><![CDATA[
    private static boolean checkDimensionDefaultingForProductVariantsWithUoMConversion(
        InventDistinctProductDimensionSpecificDefaultingArgs _inventDistinctProductDimensionSpecificDefaultingArgs,
        InventDim                                            _inventDim)
    {
        // Force the initialization for scenarios that enabled the context
        if (EcoResProductForceInitDimensionDefaultingContext::isContextEnabled())
        {
            return true;
        }

        // If the ExecuteOnlyIfProductIsFullySpecified is true, then the product has already been checked for fully specified
        // so no need to recheck
        if (_inventDistinctProductDimensionSpecificDefaultingArgs.ExecuteOnlyIfProductIsFullySpecified)
        {
            return true;
        }

        // If other checks have failed, check if the product is fully specified
        return (InventDistinctProductValidator::construct().isDistinctProductFullySpecified(_inventDistinctProductDimensionSpecificDefaultingArgs.InventTable.ItemId, _inventDim));;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimensionDefaultingValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges dimension defaulting values.
    /// </summary>
    /// <param name = "_originalInventDim">Original dimension values.</param>
    /// <param name = "_modifiedInventDim">Modified dimension values.</param>
    /// <param name = "_keepOrigin">A flag to identify if the original dimensions will be overridden; Optional, default is false.</param>
    /// <returns>The merged <c>InventDim</c> record.</returns>
    private InventDim mergeDimensionDefaultingValues(
        InventDim _originalInventDim,
        InventDim _modifiedInventDim,
        boolean _keepOrigin = false)
    {
        if (_originalInventDim.inventSiteId != _modifiedInventDim.InventSiteId)
        {
            if (!_modifiedInventDim.InventSiteId || (_originalInventDim.InventSiteId && _keepOrigin))
            {
                _modifiedInventDim.InventSiteId     = _originalInventDim.InventSiteId;
                _modifiedInventDim.InventLocationId = _originalInventDim.inventLocationId;
            }
        }
        else if (!_modifiedInventDim.InventLocationId || (_originalInventDim.InventLocationId && _keepOrigin))
        {
            _modifiedInventDim.InventLocationId = _originalInventDim.InventLocationId;
        }

        return InventDim::findOrCreate(_modifiedInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canExecuteDimensionSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the criteria for executing the dimension specific defaulting is satisfied.
    /// </summary>
    /// <param name = "_inventDistinctProductDimensionSpecificDefaultingArgs">Defaulting arguments.</param>
    /// <param name = "_inventDim">A <c>InventDim</c> record buffer.</param>
    /// <returns>true if the criteria is satisfied; false, otherwise.</returns>
    public boolean canExecuteDimensionSpecificDefaulting(InventDistinctProductDimensionSpecificDefaultingArgs _inventDistinctProductDimensionSpecificDefaultingArgs, InventDim _inventDim)
    {
        return !_inventDistinctProductDimensionSpecificDefaultingArgs.ExecuteOnlyIfProductIsFullySpecified
             || InventDistinctProductValidator::construct().isDistinctProductFullySpecified(_inventDistinctProductDimensionSpecificDefaultingArgs.InventTable.ItemId, _inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultedInventDimBaseline</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the defaulted <c>InventDim</c> baseline record buffer.
    /// </summary>
    /// <param name = "_inventDim">A <c>InventDim</c> record buffer.</param>
    /// <param name = "_inventDistinctProductOrderDefaulting">An implementation instance of the <c>InventDistinctProductOrderDefaulting</c> interface.</param>
    /// <returns>A potentially updated <c>InventDim</c> record buffer.</returns>
    protected InventDim getDefaultedInventDimBaseline(InventDim _inventDim, InventDistinctProductOrderDefaulting _inventDistinctProductOrderDefaulting)
    {
        if (this.isProductDimensionModified())
        {
            _inventDim.clearStorageDimensions();
            _inventDim = InventDim::findOrCreate(_inventDim);
            _inventDistinctProductOrderDefaulting.setInventDim(_inventDim);
            _inventDistinctProductOrderDefaulting.initStorageDimensionsFromHeader();
        }

        return InventDim::findOrCreate(_inventDistinctProductOrderDefaulting.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductDimensionModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a boolean value indicating if a product dimension has been modified.
    /// </summary>
    /// <returns>True if a product dimension was modified; false, otherwise.</returns>
    public boolean isProductDimensionModified()
    {
        return productDimensionModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSiteModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a boolean value indicating if the site dimension has been modified.
    /// </summary>
    /// <returns>True if the site dimension was modified; false, otherwise.</returns>
    public boolean isSiteModified()
    {
        return siteModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductDimensionOrSiteModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a boolean value indicating if a product or the site dimension has been modified.
    /// </summary>
    /// <returns>True if a product or the site dimension was modified; false, otherwise.</returns>
    public boolean isProductDimensionOrSiteModified()
    {
        return productDimensionModified || siteModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLocationModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a boolean value indicating if the location dimension has been modified.
    /// </summary>
    /// <returns>True if the location dimension was modified; false, otherwise.</returns>
    public boolean isLocationModified()
    {
        return locationModified;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>