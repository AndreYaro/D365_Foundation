<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentRefIdentitiesAutomationLoggerHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SourceDocumentRefIdentitiesAutomationLoggerHelper</c> contains helper methods for logging information about <c>SourceDocumentRefIdentitiesAutomationProcessor</c> and <c>SourceDocumentRefIdentitiesAutomationTask</c>
/// </summary>
internal final class SourceDocumentRefIdentitiesAutomationLoggerHelper
{
    Exception exception;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>logSourceDocumentRefIdentitiesAutomationTaskResult</Name>
				<Source><![CDATA[
    public ProcessExecutionSourceLink logSourceDocumentRefIdentitiesAutomationTaskResult(
        ProcessScheduleWorkItem _contract,
        ProcessExecutionSourceStatus _status,
        SysInstrumentationActivityContext _activityContext,
        SysInfologEnumerator _infoLogEnumerator = null,
        int _totalRecordsForAllThreadsInsertedToInProcessTable = -1)
    {
        str header, message, labelStrLiteral;

        if (_status == ProcessExecutionSourceStatus::Error)
        {
            exception = Exception::Error;

            header = "@SourceDocumentAccountingFramework:SourceDocumentRefIdentitiesAutomationTask";
            message = "@SourceDocumentAccountingFramework:SourceDocumentRefIdentitiesAutomationTaskError";
            labelStrLiteral = literalStr("@SourceDocumentAccountingFramework:SourceDocumentRefIdentitiesAutomationTaskError");
        }
        else if (_status == ProcessExecutionSourceStatus::Warning)
        {
            exception = Exception::Warning;

            header = "@SourceDocumentAccountingFramework:SourceDocumentRefIdentitiesAutomationTask";
            message = "@SourceDocumentAccountingFramework:SourceDocumentRefIdentitiesAutomationTaskWarning";
            labelStrLiteral = literalStr("@SourceDocumentAccountingFramework:SourceDocumentRefIdentitiesAutomationTaskWarning");
        }
        else
        {
            exception = Exception::Info;

            header = "@SourceDocumentAccountingFramework:SourceDocumentRefIdentitiesAutomationTask";
            message = "@SourceDocumentAccountingFramework:SourceDocumentRefIdentitiesAutomationTaskSuccess";
            labelStrLiteral = literalStr("@SourceDocumentAccountingFramework:SourceDocumentRefIdentitiesAutomationTaskSuccess");
        }

        ProcessExecutionSourceLink sourceLink = this.createExecutionSourceLinkItem(
            _contract,
            _status,
            header,
            message,
            labelStrLiteral);

        this.createExecutionMessageLogItem(
            sourceLink.RecId,
            exception,
            message,
            labelStrLiteral);

        this.logSourceDocumentRefIdentitiesAutomationActivity(
            _activityContext,
            exception,
            message,
            _infoLogEnumerator,
            _totalRecordsForAllThreadsInsertedToInProcessTable);

        return sourceLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logSourceDocumentRefIdentitiesAutomationProcessorResult</Name>
				<Source><![CDATA[
    public ProcessExecutionSourceLink logSourceDocumentRefIdentitiesAutomationProcessorResult(
        ProcessScheduleWorkItem _contract,
        ProcessExecutionSourceStatus _status,
        SysInstrumentationActivityContext _activityContext,
        SysInfologEnumerator _infoLogEnumerator = null,
        EnumName _typeEnumName = null,
        SourceDocumentTypeEnumValue _typeEnumValue = -1)
    {
        str header, message, labelStrLiteral;

        if (_status == ProcessExecutionSourceStatus::Error)
        {
            exception = Exception::Error;

            header = "@SourceDocumentAccountingFramework:SourceDocumentRefIdentitiesAutomationProcessor";
            message = "@SourceDocumentAccountingFramework:SourceDocumentRefIdentitiesAutomationProcessorError";
            labelStrLiteral = literalStr("@SourceDocumentAccountingFramework:SourceDocumentRefIdentitiesAutomationProcessorError");
        }
        else if (_status == ProcessExecutionSourceStatus::Warning)
        {
            exception = Exception::Warning;

            header = "@SourceDocumentAccountingFramework:SourceDocumentRefIdentitiesAutomationProcessor";
            message = "@SourceDocumentAccountingFramework:SourceDocumentRefIdentitiesAutomationProcessorWarning";
            labelStrLiteral = literalStr("@SourceDocumentAccountingFramework:SourceDocumentRefIdentitiesAutomationProcessorWarning");
        }
        else
        {
            exception = Exception::Info;

            header = "@SourceDocumentAccountingFramework:SourceDocumentRefIdentitiesAutomationProcessor";
            message = "@SourceDocumentAccountingFramework:SourceDocumentRefIdentitiesAutomationProcessorSuccess";
            labelStrLiteral = literalStr("@SourceDocumentAccountingFramework:SourceDocumentRefIdentitiesAutomationProcessorSuccess");
        }

        ProcessExecutionSourceLink sourceLink = this.createExecutionSourceLinkItem(
            _contract,
            _status,
            header,
            message,
            labelStrLiteral);

        this.createExecutionMessageLogItem(
            sourceLink.RecId,
            exception,
            message,
            labelStrLiteral);

        this.logSourceDocumentRefIdentitiesAutomationActivity(
            _activityContext,
            exception,
            message,
            _infoLogEnumerator,
            -1,
            _typeEnumName,
            _typeEnumValue);

        return sourceLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logSourceDocumentRefIdentitiesAutomationActivity</Name>
				<Source><![CDATA[
    private void logSourceDocumentRefIdentitiesAutomationActivity(
        SysInstrumentationActivityContext _activityContext,
        Exception _status,
        str _message,
        SysInfologEnumerator _infoLogEnumerator = null,
        int _totalRecordsForAllThreadsInsertedToInProcessTable = -1,
        EnumName _typeEnumName = null,
        SourceDocumentTypeEnumValue _typeEnumValue = -1)
    {
        if (!_activityContext)
        {
            return;
        }

        _activityContext.addCustomProperty('Result', any2Str(_status));
        _activityContext.addCustomProperty('Message', _message);

        if (_totalRecordsForAllThreadsInsertedToInProcessTable != -1)
        {
            _activityContext.addCustomProperty('TotalRecordsPreparedForProcessing', any2Str(_totalRecordsForAllThreadsInsertedToInProcessTable));
        }

        if (_typeEnumName)
        {
            _activityContext.addCustomProperty('SourceDocumentHeaderEnumType', any2Str(_typeEnumName));
        }

        if (_typeEnumValue != -1)
        {
            _activityContext.addCustomProperty('SourceDocumentHeaderEnumValue', any2Str(_typeEnumValue));
        }

        if (_infoLogEnumerator)
        {
            while (_infoLogEnumerator.moveNext())
            {
                _activityContext.addCustomProperty('InfoLogMessage', _infoLogEnumerator.currentMessage());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExecutionSourceLinkItem</Name>
				<Source><![CDATA[
    private ProcessExecutionSourceLink createExecutionSourceLinkItem(
        ProcessScheduleWorkItem _contract,
        ProcessExecutionSourceStatus _status,
        str _header,
        str _message,
        str _labelStrLiteral)
    {
        ProcessExecutionSourceLinkItem linkItem = ProcessExecutionSourceLinkItem::construct();

        linkItem.parmExecutionId(_contract.parmExecutionId());
        linkItem.parmExecutionSourceStatus(_status);
        linkItem.parmHeader(_header);
        linkItem.parmMessage(_message);
        linkItem.parmProcessScheduleSeriesPatternRecId(_contract.parmProcessScheduleSeriesPatternRecId());
        linkItem.parmProcessScheduleOccurrenceRecId(_contract.parmProcessScheduleOccurrenceRecId());
        linkItem.parmSourceRecId(0);
        linkItem.parmSourceTableId(0);

        ProcessExecutionSourceLink sourceLink = ProcessExecutionSourceLink::writeSourceLinkItem(linkItem);

        return sourceLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExecutionMessageLogItem</Name>
				<Source><![CDATA[
    private void createExecutionMessageLogItem(
        RecId _sourceLinkRecId,
        Exception _status,
        str _message,
        str _labelStrLiteral)
    {
        ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::newFromProcessExecutionSourceLinkAndMessage(_sourceLinkRecId, _status, _message);
        messageLogItem.parmLabelId(_labelStrLiteral);
        ProcessExecutionMessageLog::insertMessage(messageLogItem);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>