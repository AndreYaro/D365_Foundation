<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>XmlExcelReport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for reports using Open XML SDK as engine
/// </summary>
/// <remarks>
/// Implements logic for report rendering
/// </remarks>
abstract class XmlExcelReport_RU extends RunBaseBatch
{
    Args                            args;

    XMLExcelDocument_RU             document;

    real                            currentHeight,
                                    pageHeight;

    Map                             mapSections;

    int                             currentRow,
                                    prevRow,
                                    widthCols;

    int                             curWorksheetNum;

    real                            rangeHeight,
                                    rangeHeightRow;

    ComExcelDocument_RU             excelDocument;
    PrintJobSettings                printJobSettings;

    System.IO.Stream               stream;

    SRSPrintDestinationSettings     printDestinationSettings;
    int                             numOfCopies;        //number of copies which may be taken from print management

    #define.space(' ')
    #define.blank('')
    #define.ext('.xlsx')
    #define.reportSubfolder('AxReports\\')
    #define.localSheetIdUndefined(-1)
    #define.posSectionHeight(4)
    #define.posFromRow(2)
    #define.posFromCol(3)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds section to a report. In fact, says that specified range should be treated as section
    /// </summary>
    /// <param name="_bookmark">
    /// Name of the range
    /// </param>
    /// <param name="_getHeight">
    /// If section wraps text(resizeable) parameters should be true, otherwise false(by default)
    /// </param>
    protected void addSection(MSOfficeBookMark_RU _bookmark, boolean _getHeight = false)
    {
        str     worksheetName;

        int     fromRow,
                fromCol,
                toRow,
                toCol;

        boolean printSection = this.mustPrintSection(_bookmark);

        if (!mapSections)
        {
            mapSections = new Map(Types::String, Types::Container);
        }

        if (printSection)
        {
            if (document.definedNamesMap().exists([ _bookmark, #localSheetIdUndefined ]))
            {
                [worksheetName, fromRow, fromCol, toRow, toCol] = document.definedNamesMap().lookup([ _bookmark, #localSheetIdUndefined ]);
            }
            else
            {
                throw error(strFmt("@GLS64283", _bookmark));
            }
        }

        mapSections.insert(_bookmark, [printSection, toRow - fromRow + 1, _getHeight, ((printSection && !_getHeight) ? this.calcSectionHeight(_bookmark) : 0)]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintDestinationSettings</Name>
				<Source><![CDATA[
    public void parmPrintDestinationSettings(SRSPrintDestinationSettings _printDestinationSettings)
    {
        printDestinationSettings = _printDestinationSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates height of section which contains cells which wrap text
    /// </summary>
    /// <param name="_bookmark">
    /// Should be overriden and get maximum height of named cell like:
    /// return max(document.getNamedRangeHeightWrapped('ItemName', line.ItemName).
    /// </param>
    /// <returns>
    /// Height of section
    /// </returns>
    abstract protected real calcRangeHeight(Bookmark _bookmark)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSectionHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates height of section with fixed height
    /// </summary>
    /// <param name="_bookmark">
    /// Name of section
    /// </param>
    /// <returns>
    /// height of range
    /// </returns>
    public real calcSectionHeight(Bookmark _bookmark)
    {
        return document.getNamedRangeHeightFixed(_bookmark);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Use this method as main method for creation of report
    /// </summary>
    /// <remarks>
    /// curWorksheetNum should be set before report executed
    /// </remarks>
    abstract protected void createReport()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Excecutes section of a report
    /// </summary>
    /// <param name="_bookmark">
    /// Name of section, for example "PAGEHEADER"
    /// </param>
    protected void execute(Bookmark _bookmark)
    {
        boolean                             printSection,
                                            getHeight;

        real                                height;
        int                                 rows;

        [printSection, rows, getHeight, height] = mapSections.lookup(_bookmark);

        if (printSection)
        {
            if (getHeight)
            {
                height = this.getRangeHeight(_bookmark);
            }

            prevRow    = currentRow;
            currentRow += rows;

            this.fillData(_bookmark);

            document.insertRowsByBookmark(_bookmark, (getHeight ? height : 0));

            currentHeight += height;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this to return name of the working copy of excel file
    /// </summary>
    /// <returns>
    /// Name of the working copy of excel file
    /// </returns>
    abstract protected Filename fileName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method to reflect distinct document parameters at file name(invoice no, date, etc.)
    /// </summary>
    /// <returns>
    /// postfix for file name identifying report
    /// </returns>
    abstract protected Filename fileNamePostfix()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method to implement data for specified section fulfilment
    /// </summary>
    /// <param name="_bookmark">
    /// name of section, i. e. PAGEHEADER
    /// </param>
    /// <remarks>
    /// switch between existing bookmarks can be used to fill data
    /// </remarks>
    abstract protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets height of section which wraps strings and is resizable
    /// </summary>
    /// <param name="_bookmark">
    /// Name of the section
    /// </param>
    /// <returns>
    /// height of section
    /// </returns>
    /// <remarks>
    /// height is recalculated only if currentRow is not equal to row, which was current at last height calculation
    /// that is needed to avoid multiple calculation of height for the same row
    /// </remarks>
    protected real getRangeHeight(Bookmark _bookmark)
    {
        if (!currentRow || rangeHeightRow != currentRow)
        {
            rangeHeight = this.calcRangeHeight(_bookmark);

            rangeHeightRow = currentRow;
        }
        return rangeHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Map which holds section data should be initialized here.
    /// Use addSection method to add section to the map
    /// </summary>
    abstract protected void initSectionMap()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValueToSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts value to document.
    /// </summary>
    /// <param name="_bookmark">
    /// bookmark where the value should be inserted.
    /// </param>
    /// <param name="_value">
    /// Value to be inserted.
    /// </param>
    /// <remarks>
    /// if value is an empty date, blank string inserted.
    /// </remarks>
    protected void insertValueToSection(Bookmark _bookmark, anytype _value)
    {
        container           rangeInfo;
        int                 row, column;

        if (document.workbook().definedNames().exists([ _bookmark, #localSheetIdUndefined ]))
        {
            rangeInfo = document.workbook().definedNames().lookup([_bookmark, #localSheetIdUndefined]);
        }
        else
        {
            infolog.clear(infologLine() - 1);
            throw error(strFmt("@GLS64283", _bookmark));
        }

        row    = conPeek(rangeInfo, #posFromRow);
        column = conPeek(rangeInfo, #posFromCol);

        switch (typeOf(_value))
        {
            case Types::Date:
                if (_value)
                {
                    document.insertValue(ComExcelDocument_RU::numToNameCell(column, row), _value, curWorksheetNum);
                }
                else
                {
                    document.insertValue(ComExcelDocument_RU::numToNameCell(column, row), #blank, curWorksheetNum);
                }
                break;
            default:
                document.insertValue(ComExcelDocument_RU::numToNameCell(column, row), _value, curWorksheetNum);
        }

        this.parmProgress().incCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValueToSectionNoOverflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a value to the document preventing height overflow.
    /// </summary>
    /// <param name="_bookmark">
    /// An Excel Bookmark where the value should be inserted.
    /// </param>
    /// <param name="_value">
    /// A string value to be inserted.
    /// </param>
    /// <param name="_fontSizeReductionStep">
    /// A negative real value determining the step size to adjust the font size at a time.
    /// </param>
    /// <remarks>
    /// Prevents the height overflow for long text strings pasted into cells with wrap text property enabled,
    /// by reducing the font size by the font size reduction step at a time.
    /// <c>_fontSizeReductionStep</c> must be nagative; otherwise it will be replaced by -1.0 standard value.
    /// </remarks>
    #define.defaultFontSizeReductionStep(-1.0)
    protected void insertValueToSectionNoOverflow(Bookmark _bookmark, anytype _value, real _fontSizeReductionStep = #defaultFontSizeReductionStep)
    {
        #define.minFontSize(6.0)
        real    fontSize;
        boolean isOverflow = false;

        if (_fontSizeReductionStep >= 0.0)
        {
            _fontSizeReductionStep = #defaultFontSizeReductionStep;
        }

        do
        {
            isOverflow = document.workbook().isCellHeightOverflow(_bookmark, _value);
            if (isOverflow)
            {
                fontSize = document.workbook().setNamedRangeFontSize(_bookmark, _fontSizeReductionStep, true);
            }
        } while (isOverflow && fontSize > #minFontSize);

        this.insertValueToSection(_bookmark, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens an XMLExcelDocument to work with
    /// </summary>
    /// <returns>
    /// true, if document was opened
    /// </returns>
    /// <remarks>
    /// File first copied to subfolder of current user temp path, if subfolder doesn't exist, it's created
    /// </remarks>
    public boolean makeDocument()
    {
        boolean     ret = true;

        try
        {
            document = XMLExcelDocument_RU::newFromResource(
                this.templateName(), true);
        }

        catch
        {
            ret = checkFailed(strFmt("@SYS72245", this.templateName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPrintSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a section should be printed in current report
    /// </summary>
    /// <param name="_bookmark">
    /// Name of section
    /// </param>
    /// <returns>
    /// True if section should be printed, otherwise false
    /// </returns>
    protected boolean mustPrintSection(MSOfficeBookMark_RU _bookmark)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageWidthInColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets value of spans attribute for the first worksheet of the excel document
    /// </summary>
    /// <param name="_pageWidthCols">
    /// Value of spans attribute
    /// </param>
    protected void pageWidthInColumns(int _pageWidthCols)
    {
        widthCols = _pageWidthCols;
        document.setWorksheetSpans(_pageWidthCols);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args = args)
    {
        args = _args;
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintJobSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Passes printJobSettings to the class
    /// </summary>
    /// <param name="_printJobSettings">
    /// PrintJobSettings to be used
    /// </param>
    public void parmPrintJobSettings(PrintJobSettings _printJobSettings)
    {
        printJobSettings = _printJobSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInExcel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes specified file using printManagement or printJobSettings
    /// </summary>
    /// <param name="_filename">
    /// File name to open
    /// </param>
    /// <remarks>
    /// There are several ways of processing, depending on printMedium and printFormat
    /// If print medium is screen, file opened as template, and then deleted. If user tries to close the file, he will be prompted
    /// whether he really wants to save it and for file location
    /// If print medium is printer file sent to printer with parameters specified at print settings
    /// If print medium is file file saved to specified location with it's original name.
    /// Depending on printFormat its saved as PDF, CSV, HTML, Unicode, or remains in excel.
    /// RTF format should be specified, if one wants file just to be saved as excel
    /// </remarks>
    protected void processInExcel(Filename _filename)
    {
        SRSPrintMediumType  printMedium;
        int                 numberOfCopies;
        PrintFormat         printFormat;

        printMedium    = printDestinationSettings.printMediumType();
        numberOfCopies = numOfCopies ? numOfCopies : printDestinationSettings.numberOfCopies();

        switch (printDestinationSettings.fileFormat())
        {
            case SRSReportFileFormat::CSV:
                printFormat = PrintFormat::ASCII;
                break;
            case SRSReportFileFormat::Excel:
            case SRSReportFileFormat::Image:
            case SRSReportFileFormat::XML:
                printFormat = PrintFormat::RTF;
                break;
            case SRSReportFileFormat::HTML4_0:
            case SRSReportFileFormat::MHTML:
                printFormat = PrintFormat::HTML;
                break;
            case SRSReportFileFormat::PDF:
                printFormat = PrintFormat::PDF;
                break;
        }

        switch (printMedium)
        {
            case SRSPrintMediumType::Archive:
            case SRSPrintMediumType::File:
            case SRSPrintMediumType::Printer:
            case SRSPrintMediumType::Screen:
            case SRSPrintMediumType::Email:

            throw error(strfmt('Destination %1 currently not supported', printMedium));

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordForAttach</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets record for attaching report file.
    /// </summary>
    /// <returns>A record for attaching report file.</returns>
    protected Common getRecordForAttach()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>excelFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets excel report file name.
    /// </summary>
    /// <returns>Excel file name.</returns>
    protected str excelFileName()
    {
        return System.IO.Path::ChangeExtension(this.fileName() + this.fileNamePostfix(), #ext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Completes excel document.
    /// </summary>
    protected void completeDocument()
    {
        document.closeDocument(true);

        stream = document.parmStream();

        boolean isInBatch = Global::isRunningOnBatch();

        if (this.isPdfConversionEnabled(this.printDestinationSettings))
        {
            this.processInER();
        }
        else if (!printDestinationSettings || printDestinationSettings.printMediumType() == SRSPrintMediumType::Screen)
        {
            if (isInBatch)
            {
                this.saveToFileArchive(stream);
            }
            else
            {
                var destination = ERObjectsFactory::createFileDestinationBrowser();

                destination.saveFile(stream, this.excelFileName());
            }
        }
        else
        {
            this.processInExcel(this.excelFileName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPdfConversionEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check possibility to use PDF conversion for report with current print management settings.
    /// </summary>
    /// <param name="_settings">
    /// Print management settings.
    /// </param>
    /// <returns>
    /// True if PDF conversion enabled; otherwise, false.
    /// </returns>
    public boolean isPdfConversionEnabled(SRSPrintDestinationSettings _settings)
    {
        return AccountingDocumentsERPostProcessingToggle::isEnabled()
            && ((!_settings
                && this is ERIReportPostProcessingSupported)
            || (_settings
                && _settings.printMediumType() == SRSPrintMediumType::File
                && this is ERIReportPostProcessingWithPrintMgmtSupported));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInER</Name>
				<Source><![CDATA[
    private void processInER()
    {
        ERBinaryContentService binaryContentService = new ERBinaryContentService();
        binaryContentService.parmERFormatMappingId(DocuParameters::find().AccountingDocumentsERFormatMapping);
        binaryContentService.initBinaryDataFromStream(stream);

        if (this is ERIReportPostProcessingSupported)
        {
            binaryContentService.processReportInER(this as ERIReportPostProcessingSupported);
        }
        else if (this is ERIReportPostProcessingWithPrintMgmtSupported)
        {
            binaryContentService.processPrintMgmtReportInER(this as ERIReportPostProcessingWithPrintMgmtSupported);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveToFileArchive</Name>
				<Source><![CDATA[
    private void saveToFileArchive(System.IO.Stream _stream)
    {
        ReportArchiveHelper_RU archiveHelper= ReportArchiveHelper_RU::initFromFileFormat(SRSReportFileFormat::Excel);
        archiveHelper.parmFileName(this.excelFileName());

        container binData;
        Binary binaryData = Binary::constructFromMemoryStream(_stream);

        if (binaryData)
        {
            binData = binaryData.getContainer();
        }

        archiveHelper.saveReportArchiveDetails(binData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method creates a working copy of template file, and opens it in COM excel if nesessary
    /// </summary>
    /// <exception cref="Exception::Error">
    /// If any CLR error occur
    /// </exception>
    public void run()
    {
        this.progressInit("@GLS101318", this.totalCells(), #AviTransfer);

        if (this.makeDocument())
        {
            this.createReport();
            this.completeDocument();
            this.progressKill();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentWorksheetNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the current worksheet. Gets page height of the workheet. Sets value of spans attribute for the worksheet.
    /// </summary>
    /// <param name="_workSheet">
    /// Number of the current worksheet
    /// </param>
    /// <param name="_widthInColumns">
    /// Value of spans attribute
    /// </param>
    protected void setCurrentWorksheetNum(int _workSheet, int _widthInColumns = 0)
    {
        curWorksheetNum = _workSheet;
        pageHeight = document.getPageHeight(curWorksheetNum);

        currentRow      = 0;
        currentHeight   = 0;

        if (_widthInColumns)
        {
            this.pageWidthInColumns(_widthInColumns);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintArea</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets print area at the excel document
    /// </summary>
    protected void setPrintArea()
    {
        document.setPrintArea(strFmt("@GLS111322",
            ComExcelDocument_RU::numToNameCell(1,1),
            ComExcelDocument_RU::numToNameCell(widthCols, currentRow)), curWorkSheetNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets height for cells range.
    /// </summary>
    /// <param name="_bookmark">
    /// Range bookmark.
    /// </param>
    /// <param name="_rowHeight">
    /// New height for range.
    /// </param>
    /// <param name="_workSheet">
    /// Worksheet number; optional.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws if bookmark is not found.
    /// </exception>
    protected void setRangeHeight(Bookmark _bookmark, real _rowHeight, int _workSheet = 1)
    {
        container rangeInfo;
        int       row;

        if (document.workbook().definedNames().exists([ _bookmark, #localSheetIdUndefined ]))
        {
            rangeInfo = document.workbook().definedNames().lookup([_bookmark, #localSheetIdUndefined]);
        }
        else
        {
            infolog.clear(infologLine() - 1);
            throw error(strFmt("@GLS64283", _bookmark));
        }

        row = conPeek(rangeInfo, #posFromRow);
        document.workbook().getWorksheet(_workSheet).rowTemplate(row).height(_rowHeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method should return name of template for report
    /// </summary>
    /// <returns>
    /// Name of template
    /// </returns>
    abstract protected Filename templateName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method returns total number of cells(approximate) to be filled during report creation
    /// </summary>
    /// <returns>
    /// returns total number of cells
    /// </returns>
    abstract protected Counter totalCells()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitStrByLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method splits string to several strings with lengths less than in _lineLen container
    /// </summary>
    /// <param name="_s">
    /// String to be splitted
    /// </param>
    /// <param name="_lineLen">
    /// Container which holds maximum string lengths
    /// </param>
    /// <returns>
    /// Container which holds strings source string was splitted to
    /// </returns>
    public static container splitStrByLines(str _s, container _lineLen)
    {
        container ret,
                  tmpCon;

        int       currentWord,
                  currentLine,
                  currentLineLength;

        str     tmpStr,
                currentWordStr;

        void nextLineLen()
        {
            int lineLen;

            currentLine++;
            lineLen = conPeek(_lineLen, currentLine);

            currentLineLength = currentLine <= conLen(_lineLen) ?
                lineLen :
                maxInt();
        }

        tmpCon = str2con_RU(_s, #space);

        nextLineLen();

        for (currentWord = 1; currentWord <= conLen(tmpCon); currentWord++)
        {
            currentWordStr = conPeek(tmpCon, currentWord);

            if (strLen(tmpStr) + strLen(currentWordStr) + (tmpStr ? 1 : 0) <= currentLineLength)
            {
                tmpStr += (tmpStr ? #space + currentWordStr : currentWordStr);
            }
            else
            {
                ret += tmpStr;
                tmpStr = currentWordStr;

                nextLineLen();
            }
        }

        ret += tmpStr;

        while (conLen(ret) < conLen(_lineLen) + 1)
        {
            ret += [#blank];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packTmpTableList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs table data to the packed List object.
    /// </summary>
    /// <param name="_common">
    /// The cursor of the table to be packed.
    /// </param>
    /// <returns>
    /// The container of the packed List object with table data.
    /// </returns>
    public static client server container packTmpTableList(Common _common)
    {
        DictTable DictTable = new DictTable(_common.TableId);
        Common commonData = DictTable.makeRecord();
        List list = new List(Types::Container);

        if (!commonData.isTmp() && _common.isTmp())
        {
            commonData.setTmp();
        }

        commonData.setTmpData(_common);

        while select commonData
        {
            list.addEnd(buf2Con(commonData));
        }

        return list.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackTmpTableList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks table data.
    /// </summary>
    /// <param name="_common">
    /// The cursor where data should be inserted to.
    /// </param>
    /// <param name="_packedList">
    /// The packed List with table data.
    /// </param>
    /// <returns>
    /// The cusrsor with inserted data.
    /// </returns>
    public static client server Common unpackTmpTableList(Common _common, container _packedList)
    {
        List list = List::create(_packedList);
        ListEnumerator le = list.getEnumerator();

        while (le.moveNext())
        {
            _common = con2Buf(le.current(), _common);
            _common.doInsert();
        }

        return _common;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>