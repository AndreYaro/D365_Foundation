<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdValidateUncommitted_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Validates whether the <c>TaxWithholdUncommitted_IN</c> extries exist after posting withholding tax.
/// </summary>
internal final class TaxWithholdValidateUncommitted_IN
{
    private const str LoggerNamespace = 'TaxWithholdTax';
    private const str SourceDocumentHeaderRecId = 'SourceDocumentHeaderRecId';

    private SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(TaxWithholdValidateUncommitted_IN));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the <c>TaxWithholdUncommitted_IN</c> entries exist after posting withholding tax per source document header.
    /// </summary>
    /// <param name = "_taxWithholdPost">The <c>TaxWithholdPost_IN</c> object instance.</param>
    /// <param name = "_sourceDocumentHeaderRecId">The record id for source document header.</param>
    /// <param name = "_taxWithholdCalculation">The <c>TaxWithholdCalculation_IN</c> object instance.</param>
    /// <returns>True if the uncomitted WHT record doesn't exist, otherwise, false.</returns>
    public static boolean validate(
        TaxWithholdPost_IN _taxWithholdPost,
        RefRecId _sourceDocumentHeaderRecId,
        TaxWithholdCalculation_IN _taxWithholdCalculation)
    {
        TaxWithholdValidateUncommitted_IN taxWithholdValidateUncommitted_IN = new TaxWithholdValidateUncommitted_IN();
        boolean isValid = true;

        if (!taxWithholdValidateUncommitted_IN.validateBySourceDocumentLine(
                _taxWithholdPost.headingTableId(), _taxWithholdPost.headingRecId(), _sourceDocumentHeaderRecId, _taxWithholdCalculation)
            || !taxWithholdValidateUncommitted_IN.validateBySourceDocumentLine(
                _taxWithholdPost.origHeadingTableId(), _taxWithholdPost.origHeadingRecId(), _sourceDocumentHeaderRecId, _taxWithholdCalculation))
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBySourceDocumentLine</Name>
				<Source><![CDATA[
    private boolean validateBySourceDocumentLine(
        RefTableId _headingTableId,
        RefRecId _headingRecId,
        RefRecId _sourceDocumentHeaderRecId,
        TaxWithholdCalculation_IN _taxWithholdCalculation)
    {
        boolean isValid = true;

        using (var activityContext = instrumentationLogger.activityContext(methodStr(TaxWithholdValidateUncommitted_IN, validateBySourceDocumentLine), LoggerNamespace))
        {
            TaxWithholdUncommitted_IN taxWithholdUncommitted_IN;
            SourceDocumentLine sourceDocumentLine;

            // After posting, TaxWithholdUncommitted_IN records should be removed, if exists, invalid. 
            if (_sourceDocumentHeaderRecId)
            {
                select firstonly RecId from taxWithholdUncommitted_IN
                    exists join sourceDocumentLine 
                        where sourceDocumentLine.RecId == taxWithholdUncommitted_IN.SourceDocumentLine
                            && sourceDocumentLine.SourceDocumentHeader == _sourceDocumentHeaderRecId
                            && sourceDocumentLine.SourceRelationType == tableNum(TaxWithholdUncommitted_IN)
                            && taxWithholdUncommitted_IN.HeadingRecId == _headingRecId
                            && taxWithholdUncommitted_IN.HeadingTableId == _headingTableId;

                if (taxWithholdUncommitted_IN.RecId)
                {
                    isValid = false;

                    // Log the current call stack and RecId for <c>SourceDocumentHeader</c>.
                    instrumentationLogger.logError(strFmt('CallStack:%1', con2Str(xSession::xppCallStack())));
                    activityContext.addCustomProperty(SourceDocumentHeaderRecId, int642Str(_sourceDocumentHeaderRecId));
                    activityContext.addCustomProperty(fieldStr(TaxWithholdUncommitted_IN, HeadingTableId), int642Str(_headingTableId));
                    activityContext.addCustomProperty(fieldStr(TaxWithholdUncommitted_IN, HeadingRecId), int642Str(_headingRecId));
                    activityContext.addCustomProperty(classStr(TaxWithholdCalculation_IN), _taxWithholdCalculation ? enum2Str(NoYes::Yes) : enum2Str(NoYes::No));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>