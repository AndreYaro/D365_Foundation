<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDocumentOperationProcessorInventoryJournalBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using System.Xml.Linq;
using Microsoft.Dynamics.Commerce.Runtime.TransactionService;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using CommerceRunTimeDataModel = Microsoft.Dynamics.Commerce.Runtime.DataModel;

internal abstract class RetailDocumentOperationProcessorInventoryJournalBase extends RetailDocumentOperationProcessorInventoryDocumentBase
{
    protected CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument retailInventoryCommitDocument;
    protected InventLocation defaultInventLocation;
    protected InventJournalTable inventJournalTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get document table object from <c>InventoryInboundOutboundDocument</c>.
    /// </summary>
    /// <param name = "_inventoryInboundOutboundDocument">The inventory document.</param>
    /// <returns>
    /// An document table with <c>Common</c> type.
    /// </returns>
    protected Common getDocument(CommerceRunTimeDataModel.InventoryInboundOutboundDocument _inventoryInboundOutboundDocument)
    {
        return inventJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get document line table object from <c>InventoryInboundOutboundDocumentLine</c>.
    /// </summary>
    /// <param name = "_inventoryInboundOutboundDocumentLine">The inventory document line.</param>
    /// <returns>
    /// An document table with <c>Common</c> type.
    /// </returns>
    protected Common getDocumentLine(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _inventoryInboundOutboundDocumentLine)
    {
        RecId inventTransLineRecId = _inventoryInboundOutboundDocumentLine.get_SourceDocumentLine().get_RecordId();
        PurchId journalId = _inventoryInboundOutboundDocumentLine.get_SourceDocumentLine().get_DocumentId();

        InventJournalTrans InventJournalTrans;
        select inventJournalTrans where inventJournalTrans.RecId == inventTransLineRecId;

        if (!inventJournalTrans)
        {
            throw error (strFmt("@Retail:CannotFindPurchaseOrderLineError", inventTransLineRecId, journalId));
        }

        return inventJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventoryInboundOutboundCommitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate commit document.
    /// </summary>
    /// <param name = "_document">The commit document.</param>
    /// <exception cref="Exception::Error">The <c>InventoryInboundOutboundCommitDocument</c> is not valid.</exception>
    protected void validateInventoryInboundOutboundCommitDocument(Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryInboundOutboundCommitDocument _document)
    {
        CommerceHQEventSource logEventSource = this.GetEventSource();

        if (_document == null
            || _document.Document == null)
        {
            logEventSource.EventWriteInventoryDocumentNotValidInventoryInboundOutboundCommitDocument(this.getOperationName(), this.getRequestId());
            this.throwsException(this.isRetriable, strFmt("@RetailDocumentOperationLabels:RetailDocumentOperationNotValidInventoryInboundOutboundCommitDocument", this.getOperationName(), this.getRequestId()), RetailDocumentOperationProcessingErrorCode::InternalProcessingFailed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the journal document.
    /// </summary>
    /// <returns>A empty container.</returns>
    protected container processInternal()
    {
        str inventoryDocumentJsonStr = conPeek(this.requestContainer, 1);

        this.retailInventoryCommitDocument = RetailTransactionServiceJsonHelper::DeserializeInventoryInboundOutboundCommitDocumentFromJSON(inventoryDocumentJsonStr);
        this.validateInventoryInboundOutboundCommitDocument(this.retailInventoryCommitDocument);

        this.initDefaultInventLocation();

        ttsbegin;

        this.createOrUpdateJournal();
        this.postJournal();
        this.attachNoteForInventoryCommitDocument(retailInventoryCommitDocument);

        ttscommit;

        str result;

        try
        {
            result = this.getProcessInternalResult();
        }
        catch
        {
            this.GetEventSource().EventWriteInventoryDocumentsSerializationFailed();
            return conNull();
        }

        return [result];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update journal document.
    /// </summary>
    protected void createOrUpdateJournal()
    {
        InventJournalName inventJournalName;
        CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument inventoryCommitDocument = this.retailInventoryCommitDocument;
        CommerceRunTimeDataModel.InventoryInboundOutboundDocument document = inventoryCommitDocument.Document;
        CommerceRunTimeDataModel.InventoryInboundOutboundSourceDocument sourceDocument = document.SourceDocument;

        this.createOrUpdateJournalHeader();

        IEnumerable lineList = inventoryCommitDocument.DocumentLines as IEnumerable;
        IEnumerator enumerator = lineList.GetEnumerator();
        while (enumerator.MoveNext())
        {
            InventJournalTrans inventJournalTrans;

            CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine line = enumerator.Current as CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine;
            this.createOrUpdateJournalLine(line);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post journal document.
    /// </summary>
    protected void postJournal()
    {
        JournalCheckPost journalCheckPost = InventJournalCheckPost::newPostJournal(inventJournalTable);
        journalCheckPost.parmShowInfoResult(false);
        journalCheckPost.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update journal document header.
    /// </summary>
    protected void createOrUpdateJournalHeader()
    {
        CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument inventoryCommitDocument = this.retailInventoryCommitDocument;
        CommerceRunTimeDataModel.InventoryInboundOutboundDocument document = inventoryCommitDocument.Document;
        CommerceRunTimeDataModel.InventoryInboundOutboundSourceDocument sourceDocument = document.SourceDocument;

        InventJournalName inventJournalName;

        if (sourceDocument == null)
        {
            // create journal
            str journalNameId = document.DocumentTypeId;
            inventJournalName =  InventJournalName::find(journalNameId);

            inventJournalTable.initFromInventJournalName(inventJournalName);

            inventJournalTable.InventSiteId = defaultInventLocation.InventSiteId;
            inventJournalTable.InventLocationId = defaultInventLocation.InventLocationId;
            inventJournalTable.IsRetailCommitted = NoYes::Yes;
            inventJournalTable.Description = document.Description;

            HcmWorker hcmWorker = HcmWorker::findByPersonnelNumber(this.retailDocumentOperation.RetailStaffId);

            inventJournalTable.Worker = hcmWorker.RecId;
            inventJournalTable.insert();

            document.DocumentId = inventJournalTable.JournalId;
        }
        else
        {
            inventJournalTable = InventJournalTable::find(sourceDocument.DocumentId, true);
            if (inventJournalTable.Posted == NoYes::Yes)
            {
                throw error("@RET260681");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update journal document line.
    /// </summary>
    /// <param name = "_line">The inventory document line.</param>
    protected void createOrUpdateJournalLine(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line)
    {
        CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument inventoryCommitDocument = this.retailInventoryCommitDocument;
        CommerceRunTimeDataModel.InventoryInboundOutboundDocument document = inventoryCommitDocument.Document;
        InventJournalTrans inventJournalTrans;
        CommerceRunTimeDataModel.InventoryInboundOutboundSourceDocumentLine sourceDocumentLine = _line.SourceDocumentLine;

        InventDim inventDim = this.getInventDimFromLine(_line);
        InventDim newDim;

        if (sourceDocumentLine)
        {
            RecId lineRecId = sourceDocumentLine.RecordId;
            select forupdate inventJournalTrans where inventJournalTrans.RecId == lineRecId;

            if (inventJournalTrans)
            {
                newDim = InventDim::findOrCreate(inventDim);
                inventJournalTrans.setInventDimId(newDim.inventDimId);
                inventJournalTrans.Qty = this.getQuantityToUpdate(_line);
                
                var parameters = RetailDocumentOperationPreCreateOrUpdateInventoryJournalLineParameters::construct();
                parameters.inventoryCommitDocument = inventoryCommitDocument;
                parameters.documentLine = _line;
                parameters.journalLine = inventJournalTrans;
                this.executePreCreateOrUpdateInventoryJournalLine(parameters);

                inventJournalTrans.update();
            }
        }
        else
        {
            inventJournalTrans.initFromInventJournalTable(inventJournalTable);

            EcoResProductRecId productRecId = _line.ProductId;
            EcoResDistinctProduct product = EcoResDistinctProduct::find(productRecId);

            ItemId itemId;
            InventDimCombination inventDimCombination;
            InventTable inventTable;
            EcoResProductRecId masterProductRecId;

            if (!product.isDistinctProduct())
            {
                inventDimCombination = InventDimCombination::findByDistinctProductVariant(productRecId);
                itemId = inventDimCombination.ItemId;
                masterProductRecId = InventTable::find(itemId).Product;
            }
            else
            {
                inventTable = InventTable::findByProduct(productRecId);
                itemId = inventTable.ItemId;
                masterProductRecId = productRecId;
            }

            DimensionDefault mergedDimension = this.getMergedFinancialDimensions(inventoryCommitDocument.ChannelId, masterProductRecId);

            if  (mergedDimension)
            {
                inventJournalTrans.DefaultDimension = inventJournalTrans.copyDimension(mergedDimension);
            }

            inventJournalTrans.ItemId = itemId;
            newDim = InventDim::findOrCreate(inventDim);
            inventJournalTrans.setInventDimId(newDim.inventDimId);
            inventJournalTrans.setCostPrice(newDim.inventDimId, newDim);
            inventJournalTrans.Qty = this.getQuantityToUpdate(_line);
            inventJournalTrans.CostAmount = inventJournalTrans.calcCostAmount(inventJournalTrans.Qty);
            if (document.TransactionDate)
            {
                System.Nullable<System.DateTimeOffset> transacationDate = document.TransactionDate;
                System.DateTimeOffset datetime = transacationDate.get_Value();
                System.String strDateTime = datetime.ToString(RetailDocumentOperationProcessorTransferOrderBase::DateFormat);
                inventJournalTrans.TransDate = str2Date(strDateTime, DateFormat::MDY);
            }
            else
            {
                inventJournalTrans.TransDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            }
            this.createOrUpdateToInventDimId(_line, inventJournalTrans, newDim);

            var parameters = RetailDocumentOperationPreCreateOrUpdateInventoryJournalLineParameters::construct();
            parameters.inventoryCommitDocument = inventoryCommitDocument;
            parameters.documentLine = _line;
            parameters.journalLine = inventJournalTrans;
            this.executePreCreateOrUpdateInventoryJournalLine(parameters);

            inventJournalTrans.insert();
            this.insertOrUpdateInventJournalTrans(inventJournalTrans);

            sourceDocumentLine = new CommerceRunTimeDataModel.InventoryInboundOutboundSourceDocumentLine();
            sourceDocumentLine.RecordId = inventJournalTrans.RecId;
            sourceDocumentLine.DocumentId = inventJournalTable.JournalId;
            _line.SourceDocumentLine = sourceDocumentLine;
        }

        IEnumerable serialNumberlineList = _line.SerialNumberLines as IEnumerable;
        IEnumerator enumerator = serialNumberlineList.GetEnumerator();
        while (enumerator.MoveNext())
        {
            CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine serialLine = enumerator.Current as CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine;
            this.createOrUpdateJournalSerialNumberLine(serialLine, newDim, inventJournalTrans);
        }

        var parameters = RetailDocumentOperationPostCreateOrUpdateInventoryJournalLineParameters::construct();
        parameters.inventoryCommitDocument = inventoryCommitDocument;
        parameters.documentLine = _line;
        parameters.journalLine = inventJournalTrans;
        this.executePostCreateOrUpdateInventoryJournalLine(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMergedFinancialDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the merged financial dimensions from multiple sources.
    /// </summary>
    protected DimensionDefault getMergedFinancialDimensions(RecId _storeRecId, RefRecId _productId)
    {
        DimensionDefault storeDimension;
        DimensionDefault productDimension;

        RetailStoreTable store;
        InventTable inventTable;

        store = RetailStoreTable::findRecId(_storeRecId);
        if (store)
        {
            storeDimension = store.DefaultDimension;
        }

        inventTable = InventTable::findByProduct(_productId);
        if (inventTable)
        {
            productDimension = inventTable.DefaultDimension;
        }

        return LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(storeDimension, productDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultInventLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init default inventpry location based on document sender.
    /// </summary>
    protected void initDefaultInventLocation()
    {
        CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument inventoryCommitDocument = this.retailInventoryCommitDocument;
        CommerceRunTimeDataModel.InventoryInboundOutboundDocument document = inventoryCommitDocument.Document;
        CommerceRunTimeDataModel.InventoryInboundOutboundSourceDocument sourceDocument = document.SourceDocument;

        str defaultWarehouse;

        if (sourceDocument)
        {
            defaultWarehouse = sourceDocument.Sender;
        }
        else
        {
            defaultWarehouse = document.Sender;
        }

        this.defaultInventLocation = InventLocation::find(defaultWarehouse);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimFromLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get <c>InventDim</c> based on <c>InventoryInboundOutboundDocumentLine</c>.
    /// </summary>
    /// <param name = "_line">The inventory document line.</param>
    /// <returns>The target <c>InventDim</c>.</returns>
    protected InventDim getInventDimFromLine(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line)
    {
        CommerceRunTimeDataModel.InventoryInboundOutboundSourceDocumentLine sourceLine = _line.SourceDocumentLine;
        InventDim inventDim;

        str itemId;
        RecId productId =  sourceLine != null ? sourceLine.ProductId : _line.ProductId;

        EcoResDistinctProduct product = EcoResDistinctProduct::find(productId);
        if (!product.isDistinctProduct())
        {
            InventDimCombination inventDimCombination = InventDimCombination::findByDistinctProductVariant(productId);

            InventDim tmpInventDim = inventDimCombination.inventDim();
            inventDim.configId = tmpInventDim.configId;
            inventDim.InventColorId = tmpInventDim.InventColorId;
            inventDim.InventSizeId = tmpInventDim.InventSizeId;
            inventDim.InventStyleId = tmpInventDim.InventStyleId;

            itemId = inventDimCombination.ItemId;
        }
        else
        {
            InventTable inventTable = InventTable::findByProduct(productId);
            itemId = inventTable.ItemId;
        }

        inventDim.InventLocationId = this.defaultInventLocation.InventLocationId;
        inventDim.inventSiteId = this.defaultInventLocation.InventSiteId;

        EcoResStorageDimensionGroupRecId storageTrackingDimensionGroup = InventTable::find(itemId).storageDimensionGroup();
        EcoResStorageDimensionGroupFldSetup storageDimensionGroupFldSetup = EcoResStorageDimensionGroupFldSetup::findByDimensionGroupFieldId(storageTrackingDimensionGroup, fieldNum(InventDim, WMSLocationId));

        boolean isItemLocationActive = storageDimensionGroupFldSetup.IsActive;
        if (isItemLocationActive)
        {
            // If the item is storage tracking dimension location active, we set wmsLocationId for it. Otherwise leave it blank.
            inventDim.wmsLocationId = _line.LocationId != '' ? _line.LocationId : InventLocation::find(defaultInventLocation.InventLocationId).wmsLocationIdDefaultReceipt;
        }

        if (WHSInventEnabled::exist(itemId))
        {
            inventDim.InventStatusId = WHSInventStatus::getDefaultInventStatus(this.defaultInventLocation.InventLocationId).InventStatusId;
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles registration of the retail inventory journal line.
    /// </summary>
    /// <param name="_line">
    /// The inventory journal line.
    /// </param>
    /// <param name="_inventDimRegister">
    /// The new inventory dimensions.
    /// </param>
    /// <param name="_registerQty">
    /// The quantity of the inventory journal line.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Inventory transaction is changed.
    /// </exception>
    protected void registerLine(InventJournalTrans _line, InventDim _inventDimRegister, InventQty _registerQty)
    {
        InventDim                       inventDimRegister;
        InventDimParm                   inventDimParmTransferDim;

        ttsbegin;
        InventMovement inventMovement = InventMovement::construct(_line, InventMovSubType::TransferOrderTo);
        inventDimRegister.data(_inventDimRegister);

        // We must create a license plate if we are receiving into a licensePlate controlled location
        if (WHSInventEnabled::exist(_line.ItemId) && inventDimRegister.wmsLocation().isWHSEnabled())
        {
            inventDimRegister = RetailTransferOrderHandler::ensureValidLPAndLocationCombination(inventDimRegister);
        }

        // Used for searching out the transactions to update
        inventDimParmTransferDim.initDimTransferReceipt(_inventDimRegister);

        // Clear lp since we don't know if we have it in the transactions we select to update
        inventDimParmTransferDim.LicensePlateFlag   = NoYes::No;

        // Registration will select transactions to update
        InventUpd_Registered inventUpd_Registered = InventUpd_Registered::newParameters(inventMovement, inventDimRegister, inventDimParmTransferDim, inventDimRegister, inventDimParmTransferDim, _registerQty);
        inventUpd_Registered.updateNow();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickupLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles pickup of the retail inventory journal line.
    /// </summary>
    /// <param name="_line">
    /// The inventory journal line.
    /// </param>
    /// <param name="_inventDimPickup">
    /// The new inventory dimensions.
    /// </param>
    /// <param name="_pickQty">
    /// The quantity of the inventory journal line.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Inventory transaction is changed.
    /// </exception>
    protected void pickupLine(InventJournalTrans _line, InventDim _inventDimPickup, InventQty _pickQty)
    {
        ttsbegin;
        InventMovement inventMovement = InventMovement::construct(_line);
        InventDim inventDimPicker;

        inventDimPicker.data(_inventDimPickup);

        // We must create a license plate if we are receiving into a licensePlate controlled location
        if (WHSInventEnabled::exist(_line.ItemId) && inventDimPicker.wmsLocation().isWHSEnabled())
        {
            inventDimPicker = RetailTransferOrderHandler::ensureValidLPAndLocationCombination(inventDimPicker);
        }

        InventDimParm           inventDimParmSelectTrans;
        inventDimParmSelectTrans.initFromInventDim(inventDimPicker);

        InventUpd_Picked picked = InventUpd_Picked::newParameters(inventMovement, inventDimPicker, inventDimParmSelectTrans, inventDimPicker, inventDimParmSelectTrans, -_pickQty);
        picked.updateNow();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateToInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update journal document serial number line.
    /// </summary>
    /// <param name="_line">
    /// The inventory inbound outbound document line.
    /// </param>
    /// <param name="_inventJournalTrans">
    /// The <c>InventJournalTrans</c>.
    /// </param>
    /// <param name="_lineInventDim">
    /// The <c>InventDim</c> of <c>InventJournalTrans</c>.
    /// </param>
    protected void createOrUpdateToInventDimId(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line, InventJournalTrans _inventJournalTrans, InventDim _lineInventDim)
    {
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrUpdateInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// insert or update Invent Journal Trans.
    /// </summary>
    /// <param name="_inventJournalTrans">
    /// The <c>InventJournalTrans</c>.
    /// </param>
    protected void insertOrUpdateInventJournalTrans(InventJournalTrans _inventJournalTrans)
    {
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateJournalSerialNumberLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update journal document serial number line.
    /// </summary>
    /// <param name="_serialNumberline">
    /// The inventory journal serial number line.
    /// </param>
    /// <param name="_lineInventDim">
    /// The <c>InventDim</c> of <c>InventJournalTrans</c>.
    /// </param>
    /// <param name="_inventJournalTrans">
    /// The inventory journal line.
    /// </param>
    protected abstract void createOrUpdateJournalSerialNumberLine(CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine _serialNumberline, InventDim _lineInventDim, InventJournalTrans _inventJournalTrans)
    {
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantityToUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get quantity to update from <c>InventoryInboundOutboundDocumentLine</c>.
    /// </summary>
    /// <param name="_line">
    /// The <c>InventoryInboundOutboundDocumentLine</c>.
    /// </param>
    /// <returns>The quantity to update.</returns>
    protected InventQtyJournal getQuantityToUpdate(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line)
    {
        return _line.QuantityToUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessInternalResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get process internal result.
    /// </summary>
    /// <returns>The result.</returns>
    protected str getProcessInternalResult()
    {
        System.Type[] typeArray = new System.Type[1]();
        System.Type sourceDocumentType = new Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryInboundOutboundDocument().GetType();
        typeArray.SetValue(sourceDocumentType, 0);
        str result = RetailTransactionServiceJsonHelper::SerializeToJson(retailInventoryCommitDocument.Document, typeArray);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executePreCreateOrUpdateInventoryJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the pre create or update inventory journal line delegate function.
    /// </summary>
    /// <param name = "_parameters">The parameters.</param>
    delegate void executePreCreateOrUpdateInventoryJournalLine(RetailDocumentOperationPreCreateOrUpdateInventoryJournalLineParameters _parameters)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>executePostCreateOrUpdateInventoryJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the Post create or update inventory journal line delegate function.
    /// </summary>
    /// <param name = "_parameters">The parameters.</param>
    delegate void executePostCreateOrUpdateInventoryJournalLine(RetailDocumentOperationPostCreateOrUpdateInventoryJournalLineParameters _parameters)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>