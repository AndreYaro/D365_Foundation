<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxExciseRegisterHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the excise register handler class.
/// </summary>
public abstract class TaxExciseRegisterHandler_IN
{
    TaxModelExciseTaxable_IN    taxModelExciseTaxable;
    TaxModelTaxable_IN          taxModelTaxable;
    TaxModelTaxableScrap_IN     taxModelTaxableScrap;

    TaxExciseRegister_IN        register;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRegisterBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the register buffer
    /// </summary>
    /// <returns>
    /// The register buffer
    /// </returns>
    protected abstract TaxExciseRegister_IN createRegisterBuffer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateExciseNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the number sequence for the registeration.
    /// </summary>
    /// <returns>
    /// The generated number sequence
    /// </returns>
    protected Num generateExciseNumberSequence()
    {
        return NumberSeq::newGetNumFromCode(
                NumberSequenceTable::find(
                    ExciseNumSequenceRef_IN::findByRegistrationNumber(
                        taxModelExciseTaxable.getExciseTaxRegistrationRefRecId(),
                        this.getExiseRegisterNumberSequenceReference()).NumberSequenceTable).NumberSequence, NumberSeqScopeFactory::createDefaultScope(), true, false).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExiseRegisterNumberSequenceReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the excise registration number sequence reference type.
    /// </summary>
    /// <returns>
    /// The excise registration number sequence reference type.
    /// </returns>
    protected abstract ExciseReference_IN getExiseRegisterNumberSequenceReference()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSequencePosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number sequence position.
    /// </summary>
    /// <returns>
    /// The position
    /// </returns>
    abstract protected int getNumberSequencePosition()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the register
    /// </summary>
    public void init()
    {
        register = this.createRegisterBuffer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post the register.
    /// </summary>
    /// <returns>
    /// The posted register.
    /// </returns>
    public TaxExciseRegister_IN post()
    {
        register.insert();

        return register;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the number sequence of the tax excise amount register.
    /// </summary>
    protected void setNumberSequence()
    {
        Num localNum;
        container nums;

        nums = taxModelExciseTaxable.getExciseNumberSeq();

        if (conLen(nums) != 0)
        {
            localNum = conPeek(nums, this.getNumberSequencePosition());

            if (!localNum && localNum != '0')
            {
                localNum = this.generateExciseNumberSequence();
                nums = conPoke(nums, this.getNumberSequencePosition(), localNum);
                taxModelExciseTaxable.setExciseNumberSeq(nums);
            }
        }
        else
        {
            nums = ['','',''];
            localNum = this.generateExciseNumberSequence();
            nums = conPoke(nums, this.getNumberSequencePosition(), localNum);
            taxModelExciseTaxable.setExciseNumberSeq(nums);
        }

        register.numberSequence = localNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the quantity.
    /// </summary>
    protected void setQty()
    {
        Qty qty;

        qty = taxModelTaxable.getQuantity();

        if (taxModelTaxable.getTransactionType() == TaxModelTransactionType::Return)
        {
            qty = -qty;
        }

        switch (taxModelTaxable.getTaxDirection())
        {
            case TaxDirection::IncomingTax :
                register.ReceiptQty = qty;
                break;
            case TaxDirection::OutgoingTax :
                register.IssueQty = qty;
                break;
        }

        if (taxModelTaxable is TaxModelTaxableScrap_IN)
        {
            register.IsDestructiveQty = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRegisterBasicData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the basic data for the registration.
    /// </summary>
    protected void setRegisterBasicData()
    {
        register.RGDate = taxModelTaxable.getTransDate();
        register.TaxRegistrationNumberTable = taxModelExciseTaxable.getExciseTaxRegistrationRefRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRegisterData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the data to the register.
    /// </summary>
    public void setRegisterData()
    {
        this.setRegisterBasicData();
        this.setNumberSequence();
        this.setRegisterReferenceData();
        this.setQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRegisterReferenceData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reference data.
    /// </summary>
    protected void setRegisterReferenceData()
    {
        register.InventTransId = taxModelTaxable.getInventTransId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxModelExciseTaxable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets excise taxable tax model.
    /// </summary>
    /// <param name="_taxModelExciseTaxable">
    /// The excise taxable tax model.
    /// </param>
    public void setTaxModelExciseTaxable(TaxModelExciseTaxable_IN _taxModelExciseTaxable)
    {
        taxModelExciseTaxable = _taxModelExciseTaxable;
        taxModelTaxable = _taxModelExciseTaxable as TaxModelTaxable_IN;

        if (taxModelTaxable is TaxModelTaxableScrap_IN)
        {
            taxModelTaxableScrap = taxModelTaxable as TaxModelTaxableScrap_IN;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the data before doing the register.
    /// </summary>
    /// <returns>
    /// True, the validation result is ok to posting register;Otherwise, false.
    /// </returns>
    public boolean validate()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>