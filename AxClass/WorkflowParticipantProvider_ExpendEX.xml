<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkflowParticipantProvider_ExpendEX</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WorkflowParticipantProvider_ExpendEX
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resolveDimensionsSubscriber</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(WorkflowParticipantProvider_Expend), delegatestr(WorkflowParticipantProvider_Expend, resolveDimensionsDelegate))]
    static void resolveDimensionsSubscriber(WorkflowUserList              _userList,
                                  RefRecId                      _sourceDocumentLineRecId,
                                  recId                         _dimensionAttributeSetRecId)
    {
        AccDistLedgerDimAmountList                  accDistLedgerDimAmountList;
        AccDistLedgerDimAmountListEnumerator        accDistLedgerDimAmountListEnumerator;
        AccDistLedgerDimAmount                      accDistLedgerDimAmount;
        DimensionAttributeValue                     dimensionAttributeValue;
        DimensionAttributeSetItem                   dimensionAttributeSetItem;
        DimensionAttributeValueGroup                dimensionAttributeValueGroup;
        DimensionAttributeValueGroupCombination     dimensionAttributeValueGroupCombination;
        DimensionAttributeValueCombination          dimensionAttributeValueCombination;
        DimensionAttributeLevelValue                dimensionAttributeLevelValue;
        DimensionAttrValueLedgerOverride            dimensionAttrValueLedgerOverride;

        accDistLedgerDimAmountList = AccDistLedgerDimAmountList::construct();
        SourceDocumentLineProvider::getAccDistLedgerDimAmountList(_sourceDocumentLineRecId, accDistLedgerDimAmountList, false);
        accDistLedgerDimAmountListEnumerator = accDistLedgerDimAmountList.getEnumerator();
        while (accDistLedgerDimAmountListEnumerator.moveNext())
        {
            accDistLedgerDimAmount = accDistLedgerDimAmountListEnumerator.current();
            while select Owner from dimensionAttributeValue where dimensionAttributeValue.Owner != 0
                exists join RecId from dimensionAttributeSetItem where
                    dimensionAttributeSetItem.DimensionAttribute    == dimensionAttributeValue.DimensionAttribute &&
                    dimensionAttributeSetItem.DimensionAttributeSet == _dimensionAttributeSetRecId &&
                    dimensionAttributeSetItem.EnumerationValue      == NoYes::Yes
                        exists join RecId from dimensionAttributeLevelValue where
                            dimensionAttributeLevelValue.DimensionAttributeValue == dimensionAttributeValue.RecId
                        exists join RecId from dimensionAttributeValueGroup where
                            dimensionAttributeValueGroup.RecId  == dimensionAttributeLevelValue.DimensionAttributeValueGroup
                        exists join RecId from dimensionAttributeValueGroupCombination where
                                dimensionAttributeValueGroupCombination.DimensionAttributeValueGroup        == dimensionAttributeValueGroup.RecId &&
                                dimensionAttributeValueGroupCombination.DimensionAttributeValueCombination  == accDistLedgerDimAmount.parmLedgerDimension()
                        exists join dimensionAttributeValueCombination where
                            dimensionAttributeValueCombination.RecId           == dimensionAttributeValueGroupCombination.DimensionAttributeValueCombination
                {
                    _userList.add(DirPersonUserEx::worker2UserId(dimensionAttributeValue.Owner));
                }

            while select Owner from dimensionAttrValueLedgerOverride
                where dimensionAttrValueLedgerOverride.Owner != 0 &&
                    dimensionAttrValueLedgerOverride.Ledger == Ledger::current()
                        exists join RecId, DimensionAttribute from dimensionAttributeValue
                            where dimensionAttributeValue.RecId == dimensionAttrValueLedgerOverride.DimensionAttributeValue
                        exists join RecId from dimensionAttributeSetItem where
                            dimensionAttributeSetItem.DimensionAttribute    == dimensionAttributeValue.DimensionAttribute &&
                            dimensionAttributeSetItem.DimensionAttributeSet == _dimensionAttributeSetRecId &&
                            dimensionAttributeSetItem.EnumerationValue      == NoYes::Yes
                        exists join RecId from dimensionAttributeLevelValue where
                            dimensionAttributeLevelValue.DimensionAttributeValue == dimensionAttributeValue.RecId
                        exists join RecId from dimensionAttributeValueGroup where
                            dimensionAttributeValueGroup.RecId  == dimensionAttributeLevelValue.DimensionAttributeValueGroup
                        exists join RecId from dimensionAttributeValueGroupCombination where
                            dimensionAttributeValueGroupCombination.DimensionAttributeValueGroup        == dimensionAttributeValueGroup.RecId &&
                            dimensionAttributeValueGroupCombination.DimensionAttributeValueCombination  == accDistLedgerDimAmount.parmLedgerDimension()
                        exists join dimensionAttributeValueCombination where
                            dimensionAttributeValueCombination.RecId == dimensionAttributeValueGroupCombination.DimensionAttributeValueCombination
                {
                    _userList.add(DirPersonUserEx::worker2UserId(dimensionAttrValueLedgerOverride.Owner));
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveProjectSubscriber</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(WorkflowParticipantProvider_Expend), delegatestr(WorkflowParticipantProvider_Expend, resolveProjectDelegate))]
    static void resolveProjectSubscriber(ProjId _projId, WorkflowParticipantExpenTokenLine _workflowParticipantExpenTokenLine, WorkflowUserList _userList)
    {
        ProjTable projTable = ProjTable::find(_projId);

        if (_workflowParticipantExpenTokenLine.IsProjectManagerAuthority && projTable.WorkerResponsible)
        {
            _userList.add(DirPersonUserEx::worker2UserId(projTable.WorkerResponsible));
        }

        if (_workflowParticipantExpenTokenLine.IsProjectSalesManagerAuthority && projTable.WorkerResponsibleSales)
        {
           _userList.add(DirPersonUserEx::worker2UserId(projTable.WorkerResponsibleSales));
        }

        if (_workflowParticipantExpenTokenLine.IsProjectControllerAuthority && projTable.WorkerResponsibleFinancial)
        {
           _userList.add(DirPersonUserEx::worker2UserId(projTable.WorkerResponsibleFinancial));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveProjectDistributionsSubscriber</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(WorkflowParticipantProvider_Expend), delegatestr(WorkflowParticipantProvider_Expend, resolveProjectDistributionsDelegate))]
    static void resolveProjectDistributionsSubscriber(RefRecId _sourceDocumentLine, WorkflowParticipantExpenTokenLine _workflowParticipantExpenTokenLine, WorkflowUserList _userList, WorkflowParticipantProvider_Expend wppe)
    {
        AccountingDistribution          accountingDistribution;
        ProjectAccountingDistribution   projectAccountingDistribution;

        while select ProjTable from projectAccountingDistribution
            exists join accountingDistribution where
                accountingDistribution.SourceDocumentLine   == _sourceDocumentLine &&
                accountingDistribution.RecId                == projectAccountingDistribution.AccountingDistribution
        {
            wppe.resolveProject(ProjTable::findRecId(projectAccountingDistribution.ProjTable).ProjId, _workflowParticipantExpenTokenLine,  _userList);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>