<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillOfExchangeStatCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustBillOfExchangeStatCalc
{
    TmpBillOfExchangeStatistics tmpBillOfExchangeStatistics;
    TmpBillOfExchangeStatistics tmpBillOfExchangeStatHistory;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcBillsInRemittance</Name>
				<Source><![CDATA[
    protected void calcBillsInRemittance()
    {
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustTrans custTrans;
        CustTransOpen custTransOpen;
        SpecTrans specTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;

        tmpBillOfExchangeStatistics.clear();
        tmpBillOfExchangeStatistics.CustBillOfExchangeStatistics = CustBillOfExchangeStatistics::BillsInRemittance;

        // When a Bill of Exchange (BOE) is created, it rolls all cross-company invoices that
        // are settled into one BOE CustTrans/Open record that exists in the same company as the
        // payment. As a result, the SpecTrans record never needs to go cross-company in order
        // to generate the correct results. So, all queries or calculations below are "safe" since
        // they all happen in the context of a single company.

        select count(RecId)
        from custBillOfExchangeJour
        where custBillOfExchangeJour.Status == CustVendNegInstStatus::Drawn ||
                custBillOfExchangeJour.Status == CustVendNegInstStatus::Redrawn
        exists join custTrans
            where custTrans.BillOfExchangeID == custBillOfExchangeJour.BillOfExchangeId
            join custTransOpen
            where custTransOpen.RefRecId == custTrans.RecId
            join specTrans
            where specTrans.RefTableId == custTransOpen.TableId &&
                    specTrans.RefRecId == custTransOpen.RecId &&
                    specTrans.RefCompany == custTransOpen.dataAreaId
                join ledgerJournalTrans
                where ledgerJournalTrans.RecId == specTrans.SpecRecId &&
                        ledgerJournalTrans.TableId == specTrans.SpecTableId &&
                        ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
                join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                        ledgerJournalTable.JournalType == LedgerJournalType::CustPaymRemittance;
        tmpBillOfExchangeStatistics.Number = any2int(custBillOfExchangeJour.RecId);
        if (custBillOfExchangeJour.RecId)
        {
            select sum(AmountMST),sum(SettleAmountMST)
            from custTrans
            exists join custBillOfExchangeJour
                where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                       (custBillOfExchangeJour.Status == CustVendNegInstStatus::Drawn ||
                        custBillOfExchangeJour.Status == CustVendNegInstStatus::Redrawn)
                exists join custTransOpen
                    where custTransOpen.AccountNum == custTrans.AccountNum &&
                            custTransOpen.RefRecId == custTrans.RecId
                    exists join specTrans
                    where specTrans.RefTableId == custTransOpen.TableId &&
                                specTrans.RefRecId == custTransOpen.RecId &&
                                specTrans.RefCompany == custTransOpen.dataAreaId
                            exists join ledgerJournalTrans
                            where ledgerJournalTrans.RecId == specTrans.SpecRecId &&
                                        ledgerJournalTrans.TableId == specTrans.SpecTableId &&
                                        ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
                            exists join ledgerJournalTable
                            where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                        ledgerJournalTable.JournalType == LedgerJournalType::CustPaymRemittance;

            tmpBillOfExchangeStatistics.AmountMST = custTrans.AmountMST;
            tmpBillOfExchangeStatistics.RemaningAmount = custTrans.AmountMST
                                                       - custTrans.SettleAmountMST;
        }
        tmpBillOfExchangeStatistics.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDrawnBills</Name>
				<Source><![CDATA[
    protected void calcDrawnBills()
    {
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustTrans custTrans;
        CustTransOpen custTransOpen;
        SpecTrans specTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;

        tmpBillOfExchangeStatistics.clear();
        tmpBillOfExchangeStatistics.CustBillOfExchangeStatistics = CustBillOfExchangeStatistics::DrawnBills;

        // When a Bill of Exchange (BOE) is created, it rolls all cross-company invoices that
        // are settled into one BOE CustTrans/Open record that exists in the same company as the
        // payment. As a result, the SpecTrans record never needs to go cross-company in order
        // to generate the correct results. So, all queries or calculations below are "safe" since
        // they all happen in the context of a single company.

        select count(RecId)
        from custBillOfExchangeJour
        where custBillOfExchangeJour.Status == CustVendNegInstStatus::Drawn
        notexists join custTrans
                where custTrans.BillOfExchangeID == custBillOfExchangeJour.BillOfExchangeId
                join custTransOpen
                where custTransOpen.RefRecId == custTrans.RecId
                join specTrans
                where specTrans.RefTableId == custTransOpen.TableId &&
                        specTrans.RefRecId == custTransOpen.RecId &&
                        specTrans.RefCompany == custTransOpen.dataAreaId
                        join ledgerJournalTrans
                        where ledgerJournalTrans.RecId == specTrans.SpecRecId &&
                                ledgerJournalTrans.TableId == specTrans.SpecTableId &&
                                ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
                        join ledgerJournalTable
                        where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                ledgerJournalTable.JournalType == LedgerJournalType::CustPaymRemittance;

        tmpBillOfExchangeStatistics.Number = any2int(custBillOfExchangeJour.RecId);
        if (custBillOfExchangeJour.RecId)
        {
            select sum(AmountMST),sum(SettleAmountMST)
            from custTrans
            exists join custBillOfExchangeJour
                where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                        custBillOfExchangeJour.Status == CustVendNegInstStatus::Drawn
                exists join custTransOpen
                    where custTransOpen.AccountNum == custTrans.AccountNum &&
                            custTransOpen.RefRecId == custTrans.RecId
                    notexists join specTrans
                            where specTrans.RefTableId == custTransOpen.TableId &&
                                    specTrans.RefRecId == custTransOpen.RecId &&
                                    specTrans.RefCompany == custTransOpen.dataAreaId
                            exists join ledgerJournalTrans
                            where ledgerJournalTrans.RecId == specTrans.SpecRecId &&
                                        ledgerJournalTrans.TableId == specTrans.SpecTableId &&
                                        ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
                            exists join ledgerJournalTable
                            where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                        ledgerJournalTable.JournalType == LedgerJournalType::CustPaymRemittance;
            tmpBillOfExchangeStatistics.AmountMST = custTrans.AmountMST;
            tmpBillOfExchangeStatistics.RemaningAmount = custTrans.AmountMST - custTrans.SettleAmountMST;
        }
        tmpBillOfExchangeStatistics.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcHistoryOfProtestedBills</Name>
				<Source><![CDATA[
    protected void calcHistoryOfProtestedBills()
    {
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustTrans custTrans;

        tmpBillOfExchangeStatHistory.clear();
        tmpBillOfExchangeStatHistory.CustBillOfExchangeStatistics = CustBillOfExchangeStatistics::HistoryOfProtestedBills;
        select count(RecId),sum(AmountCur)
        from custBillOfExchangeTrans
        where custBillOfExchangeTrans.Status == CustVendNegInstStatus::Protested;

        tmpBillOfExchangeStatHistory.Number = any2int(custBillOfExchangeTrans.RecId);
        if (custBillOfExchangeTrans.RecId)
        {
            select sum(AmountMST),sum(SettleAmountMST)
            from custTrans
            where custTrans.AmountMST > 0
            exists join custBillOfExchangeTrans
                where custBillOfExchangeTrans.BillOfExchangeId == custTrans.BillOfExchangeID &&
                        custBillOfExchangeTrans.Voucher == custTrans.Voucher &&
                        custBillOfExchangeTrans.Status == CustVendNegInstStatus::Protested;
            tmpBillOfExchangeStatHistory.AmountMST = custTrans.AmountMST;
            tmpBillOfExchangeStatHistory.RemaningAmount = custTrans.AmountMST - custTrans.SettleAmountMST;
        }
        tmpBillOfExchangeStatHistory.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcHistoryOfRedrawnBills</Name>
				<Source><![CDATA[
    protected void calcHistoryOfRedrawnBills()
    {
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustTrans custTrans;

        tmpBillOfExchangeStatHistory.clear();
        tmpBillOfExchangeStatHistory.CustBillOfExchangeStatistics = CustBillOfExchangeStatistics::HistoryOfRedrawnBills;

        select count(RecId)
        from custBillOfExchangeTrans
        where custBillOfExchangeTrans.Status == CustVendNegInstStatus::Redrawn;

        tmpBillOfExchangeStatHistory.Number = any2int(custBillOfExchangeTrans.RecId);
        if (custBillOfExchangeTrans.RecId)
        {
            select sum(AmountMST),sum(SettleAmountMST)
            from custTrans
            where custTrans.AmountMST > 0
            exists join custBillOfExchangeTrans
                where custBillOfExchangeTrans.BillOfExchangeId == custTrans.BillOfExchangeID &&
                        custBillOfExchangeTrans.Voucher == custTrans.Voucher &&
                        custBillOfExchangeTrans.Status == CustVendNegInstStatus::Redrawn;
            tmpBillOfExchangeStatHistory.AmountMST = custTrans.AmountMST;
            tmpBillOfExchangeStatHistory.RemaningAmount = custTrans.AmountMST
                                                       - custTrans.SettleAmountMST;
        }
        tmpBillOfExchangeStatHistory.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcHonoredBills</Name>
				<Source><![CDATA[
    protected void calcHonoredBills()
    {
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustBillOfExchangeJour custBillOfExchangeJour2;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustBillOfExchangeTrans custBillOfExchangeTrans2;
        CustTrans custTrans;
        CustTrans custTrans2;
        BankRemittanceFilesCust bankRemittanceFilesCust;

        tmpBillOfExchangeStatistics.clear();
        tmpBillOfExchangeStatistics.CustBillOfExchangeStatistics = CustBillOfExchangeStatistics::HonoredBills;

        select count(RecId)
        from custBillOfExchangeJour
        where custBillOfExchangeJour.Status == CustVendNegInstStatus::Honored
        exists join custBillOfExchangeTrans
            where custBillOfExchangeTrans.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId &&
                        custBillOfExchangeTrans.Status == custBillOfExchangeJour.Status
            notexists join custTrans
                where custTrans.BillOfExchangeID == custBillOfExchangeJour.BillOfExchangeId &&
                            custTrans.BankRemittanceFileId
            exists join bankRemittanceFilesCust
            where bankRemittanceFilesCust.FileId == custTrans.BankRemittanceFileId &&
                            bankRemittanceFilesCust.Closed == NoYes::Yes;

        tmpBillOfExchangeStatistics.Number = any2int(custBillOfExchangeJour.RecId);
        if (custBillOfExchangeJour.RecId)
        {
            select sum(AmountMST),sum(SettleAmountMST)
            from custTrans
            where custTrans.BillOfExchangeStatus == CustVendNegInstStatus::Honored
            exists join custBillOfExchangeJour
                where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                        custBillOfExchangeJour.BillOfExchangeSeqNum == custTrans.BillOfExchangeSeqNum &&
                        custBillOfExchangeJour.Status == CustVendNegInstStatus::Honored
                exists join custBillOfExchangeTrans
                    where custBillOfExchangeTrans.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId &&
                            custBillOfExchangeTrans.SeqNum == custTrans.BillOfExchangeSeqNum &&
                            custBillOfExchangeTrans.Status == custBillOfExchangeJour.Status
                notexists join custBillOfExchangeJour2
                        where custBillOfExchangeJour2.BillOfExchangeId == custTrans.BillOfExchangeID &&
                                custBillOfExchangeJour2.BillOfExchangeSeqNum == custTrans.BillOfExchangeSeqNum &&
                                custBillOfExchangeJour2.Status == CustVendNegInstStatus::Honored
                            exists join custBillOfExchangeTrans2
                            where custBillOfExchangeTrans2.BillOfExchangeId == custBillOfExchangeJour2.BillOfExchangeId &&
                                        custBillOfExchangeTrans2.SeqNum == custTrans.BillOfExchangeSeqNum &&
                                        custBillOfExchangeTrans2.Status == CustVendNegInstStatus::Remitted
                                        exists join custTrans2
                                        where custTrans2.BillOfExchangeID == custBillOfExchangeTrans2.BillOfExchangeId &&
                                                    custTrans2.BillOfExchangeSeqNum== custBillOfExchangeTrans2.SeqNum &&
                                                    custTrans2.BillOfExchangeStatus== custBillOfExchangeTrans2.Status
                                        exists join bankRemittanceFilesCust
                                        where bankRemittanceFilesCust.FileId == custTrans2.BankRemittanceFileId &&
                                                    bankRemittanceFilesCust.BankAccountId == custBillOfExchangeTrans2.RemittedToBankAccountId &&
                                                    bankRemittanceFilesCust.Closed == NoYes::Yes;

            tmpBillOfExchangeStatistics.AmountMST = -custTrans.AmountMST;
            tmpBillOfExchangeStatistics.RemaningAmount = custTrans.AmountMST
                                                       - custTrans.SettleAmountMST;
        }
        tmpBillOfExchangeStatistics.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcHonoredClosedBills</Name>
				<Source><![CDATA[
    protected void calcHonoredClosedBills()
    {
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustTrans custTrans;
        CustTrans custTrans2;
        BankRemittanceFilesCust bankRemittanceFilesCust;

        tmpBillOfExchangeStatistics.clear();
        tmpBillOfExchangeStatistics.CustBillOfExchangeStatistics = CustBillOfExchangeStatistics::HonoredClosedBills;

        select count(RecId)
        from custBillOfExchangeJour
        where custBillOfExchangeJour.Status == CustVendNegInstStatus::Honored
        exists join custTrans
        where custTrans.BillOfExchangeID == custBillOfExchangeJour.BillOfExchangeId &&
                    custTrans.BankRemittanceFileId
        exists join bankRemittanceFilesCust
        where bankRemittanceFilesCust.FileId == custTrans.BankRemittanceFileId &&
                    bankRemittanceFilesCust.Closed == NoYes::Yes;

        tmpBillOfExchangeStatistics.Number = any2int(custBillOfExchangeJour.RecId);
        if (custBillOfExchangeJour.RecId)
        {
            select sum(AmountMST),sum(SettleAmountMST)
                from custTrans
                where custTrans.BillOfExchangeStatus == CustVendNegInstStatus::Honored
                exists join custBillOfExchangeJour
                where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                            custBillOfExchangeJour.BillOfExchangeSeqNum == custTrans.BillOfExchangeSeqNum &&
                            custBillOfExchangeJour.Status == CustVendNegInstStatus::Honored
                        exists join custBillOfExchangeTrans
                        where custBillOfExchangeTrans.BillOfExchangeId == custTrans.BillOfExchangeID &&
                                    custBillOfExchangeTrans.SeqNum == custTrans.BillOfExchangeSeqNum &&
                                    custBillOfExchangeTrans.Status == CustVendNegInstStatus::Remitted
                                    exists join custTrans2
                                    where custTrans2.BillOfExchangeID == custBillOfExchangeTrans.BillOfExchangeId &&
                                                custTrans2.BillOfExchangeSeqNum== custBillOfExchangeTrans.SeqNum &&
                                                custTrans2.BillOfExchangeStatus== custBillOfExchangeTrans.Status
                                    exists join bankRemittanceFilesCust
                                    where bankRemittanceFilesCust.FileId == custTrans2.BankRemittanceFileId &&
                                                bankRemittanceFilesCust.BankAccountId == custBillOfExchangeTrans.RemittedToBankAccountId &&
                                                bankRemittanceFilesCust.Closed == NoYes::Yes;

            tmpBillOfExchangeStatistics.AmountMST = -custTrans.AmountMST;
            tmpBillOfExchangeStatistics.RemaningAmount = custTrans.AmountMST
                                                       - custTrans.SettleAmountMST;
        }
        tmpBillOfExchangeStatistics.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProtestedBills</Name>
				<Source><![CDATA[
    protected void calcProtestedBills()
    {
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustBillOfExchangeJour custBillOfExchangeJour2;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustBillOfExchangeTrans custBillOfExchangeTrans2;
        CustTrans custTrans;
        CustTrans custTrans2;
        CustTrans custTrans3;
        CustTransOpen custTransOpen;
        AmountMST settleAmountMST;
        AmountMST amountMST;
        BankRemittanceFilesCust bankRemittanceFilesCust;

        tmpBillOfExchangeStatistics.clear();
        tmpBillOfExchangeStatistics.CustBillOfExchangeStatistics = CustBillOfExchangeStatistics::ProtestedBills;

        select count(RecId)
        from custBillOfExchangeJour
        where custBillOfExchangeJour.Status == CustVendNegInstStatus::Protested
        exists join custBillOfExchangeTrans
            where custBillOfExchangeTrans.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId &&
                    custBillOfExchangeTrans.Status == custBillOfExchangeJour.Status
            notexists join custTrans
                where custTrans.BillOfExchangeID == custBillOfExchangeJour.BillOfExchangeId &&
                            custTrans.BankRemittanceFileId
            exists join bankRemittanceFilesCust
            where bankRemittanceFilesCust.FileId == custTrans.BankRemittanceFileId &&
                            bankRemittanceFilesCust.Closed == NoYes::Yes;

        tmpBillOfExchangeStatistics.Number = any2int(custBillOfExchangeJour.RecId);
        if (custBillOfExchangeJour.RecId)
        {
            while select AmountMST,SettleAmountMST,BillOfExchangeID,BillOfExchangeSeqNum
            from custTrans
            exists join custBillOfExchangeJour
                where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                        custBillOfExchangeJour.BillOfExchangeSeqNum == custTrans.BillOfExchangeSeqNum &&
                        custBillOfExchangeJour.Status == CustVendNegInstStatus::Protested
                exists join custBillOfExchangeTrans
                    where custBillOfExchangeTrans.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId &&
                            custBillOfExchangeTrans.Status == custBillOfExchangeJour.Status
                    exists join custTransOpen
                        where custTransOpen.RefRecId == custTrans.RecId
                     notexists join custBillOfExchangeJour2
                     where custBillOfExchangeJour2.BillOfExchangeId == custTrans.BillOfExchangeID &&
                                    custBillOfExchangeJour2.BillOfExchangeSeqNum == custTrans.BillOfExchangeSeqNum &&
                                    custBillOfExchangeJour2.Status == CustVendNegInstStatus::Protested
                            exists join custBillOfExchangeTrans2
                            where custBillOfExchangeTrans2.BillOfExchangeId == custTrans.BillOfExchangeID &&
                                        custBillOfExchangeTrans2.SeqNum == custTrans.BillOfExchangeSeqNum &&
                                        custBillOfExchangeTrans2.Status == CustVendNegInstStatus::Remitted
                                    exists join custTrans2
                                    where custTrans2.BillOfExchangeID == custBillOfExchangeTrans2.BillOfExchangeId &&
                                                custTrans2.BillOfExchangeSeqNum == custBillOfExchangeTrans2.SeqNum &&
                                                custTrans2.BillOfExchangeStatus == custBillOfExchangeTrans2.Status
                                    exists join bankRemittanceFilesCust
                                    where bankRemittanceFilesCust.FileId == custTrans2.BankRemittanceFileId &&
                                                bankRemittanceFilesCust.BankAccountId == custBillOfExchangeTrans2.RemittedToBankAccountId &&
                                                bankRemittanceFilesCust.Closed == NoYes::Yes
            {
                select sum(AmountMST)
                  from custTrans3
                  where custTrans3.BillOfExchangeID == custTrans.BillOfExchangeID &&
                          custTrans3.BillOfExchangeSeqNum == custTrans.BillOfExchangeSeqNum &&
                          (custTrans3.BillOfExchangeStatus == CustVendNegInstStatus::Drawn ||
                           custTrans3.BillOfExchangeStatus == CustVendNegInstStatus::Redrawn) &&
                           custTrans3.AmountMST > 0;

                settleAmountMST += custTrans.AmountMST - custTrans.SettleAmountMST;
                amountMST += custTrans3.AmountMST;
            }
            tmpBillOfExchangeStatistics.AmountMST = amountMST;
            tmpBillOfExchangeStatistics.RemaningAmount = settleAmountMST;
        }
        tmpBillOfExchangeStatistics.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProtestedClosedBills</Name>
				<Source><![CDATA[
    protected void calcProtestedClosedBills()
    {
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustTrans custTrans;
        CustTrans custTrans2;
        CustTransOpen custTransOpen;
        BankRemittanceFilesCust bankRemittanceFilesCust;

        tmpBillOfExchangeStatistics.clear();
        tmpBillOfExchangeStatistics.CustBillOfExchangeStatistics = CustBillOfExchangeStatistics::ProtestedClosedBills;

        select count(RecId)
        from custBillOfExchangeJour
        where custBillOfExchangeJour.Status == CustVendNegInstStatus::Protested
        exists join custTrans
        where custTrans.BillOfExchangeID == custBillOfExchangeJour.BillOfExchangeId &&
                    custTrans.BankRemittanceFileId
        exists join bankRemittanceFilesCust
        where bankRemittanceFilesCust.FileId == custTrans.BankRemittanceFileId &&
                    bankRemittanceFilesCust.Closed == NoYes::Yes;

        tmpBillOfExchangeStatistics.Number = any2int(custBillOfExchangeJour.RecId);
        if (custBillOfExchangeJour.RecId)
        {
            select sum(AmountMST),sum(SettleAmountMST)
            from custTrans
            where custTrans.BillOfExchangeStatus == CustVendNegInstStatus::Protested
            exists join custBillOfExchangeJour
                where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                        custBillOfExchangeJour.BillOfExchangeSeqNum == custTrans.BillOfExchangeSeqNum &&
                        custBillOfExchangeJour.Status == CustVendNegInstStatus::Protested
                exists join custBillOfExchangeTrans
                    where custBillOfExchangeTrans.BillOfExchangeId == custTrans.BillOfExchangeID &&
                            custBillOfExchangeTrans.SeqNum == custTrans.BillOfExchangeSeqNum &&
                            custBillOfExchangeTrans.Status == CustVendNegInstStatus::Remitted
                        exists join custTrans2
                        where custTrans2.BillOfExchangeID == custBillOfExchangeTrans.BillOfExchangeId &&
                                    custTrans2.BillOfExchangeSeqNum== custBillOfExchangeTrans.SeqNum &&
                                    custTrans2.BillOfExchangeStatus== custBillOfExchangeTrans.Status
                        exists join bankRemittanceFilesCust
                        where bankRemittanceFilesCust.FileId == custTrans2.BankRemittanceFileId &&
                                    bankRemittanceFilesCust.BankAccountId == custBillOfExchangeTrans.RemittedToBankAccountId &&
                                    bankRemittanceFilesCust.Closed == NoYes::Yes
                        exists join custTransOpen
                            where custTransOpen.RefRecId == custTrans.RecId;

            tmpBillOfExchangeStatistics.AmountMST = custTrans.AmountMST;
            tmpBillOfExchangeStatistics.RemaningAmount = custTrans.AmountMST
                                                       - custTrans.SettleAmountMST;
        }
        tmpBillOfExchangeStatistics.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRedrawnBills</Name>
				<Source><![CDATA[
    protected void calcRedrawnBills()
    {
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustTrans custTrans;
        CustTransOpen custTransOpen;
        SpecTrans specTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;

        tmpBillOfExchangeStatistics.clear();
        tmpBillOfExchangeStatistics.CustBillOfExchangeStatistics = CustBillOfExchangeStatistics::RedrawnBills;

        // When a Bill of Exchange (BOE) is created, it rolls all cross-company invoices that
        // are settled into one BOE CustTrans/Open record that exists in the same company as the
        // payment. As a result, the SpecTrans record never needs to go cross-company in order
        // to generate the correct results. So, all queries or calculations below are "safe" since
        // they all happen in the context of a single company.

        select count(RecId)
        from custBillOfExchangeJour
        where custBillOfExchangeJour.Status == CustVendNegInstStatus::Redrawn
        notexists join custTrans
                where custTrans.BillOfExchangeID == custBillOfExchangeJour.BillOfExchangeId
                join custTransOpen
                where custTransOpen.AccountNum == custTrans.AccountNum &&
                        custTransOpen.RefRecId == custTrans.RecId
                join specTrans
                where specTrans.RefTableId == custTransOpen.TableId &&
                        specTrans.RefRecId == custTransOpen.RecId &&
                        specTrans.RefCompany == custTransOpen.dataAreaId
                        join ledgerJournalTrans
                        where ledgerJournalTrans.RecId == specTrans.SpecRecId &&
                                ledgerJournalTrans.TableId == specTrans.SpecTableId &&
                                ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
                        join ledgerJournalTable
                        where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                ledgerJournalTable.JournalType == LedgerJournalType::CustPaymRemittance;

        tmpBillOfExchangeStatistics.Number = any2int(custBillOfExchangeJour.RecId);
        if (custBillOfExchangeJour.RecId)
        {
            select sum(AmountMST),sum(SettleAmountMST)
            from custTrans
            where custTrans.BillOfExchangeStatus == CustVendNegInstStatus::Redrawn
            exists join custBillOfExchangeJour
                where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                        custBillOfExchangeJour.Status == CustVendNegInstStatus::Redrawn
                exists join custTransOpen
                    where custTransOpen.AccountNum == custTrans.AccountNum &&
                            custTransOpen.RefRecId == custTrans.RecId
                    notexists join specTrans
                            where specTrans.RefTableId== custTransOpen.TableId &&
                                    specTrans.RefRecId == custTransOpen.RecId &&
                                    specTrans.RefCompany == custTransOpen.dataAreaId
                            exists join ledgerJournalTrans
                            where ledgerJournalTrans.RecId == specTrans.SpecRecId &&
                                        ledgerJournalTrans.TableId == specTrans.SpecTableId &&
                                        ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
                            exists join ledgerJournalTable
                            where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                        ledgerJournalTable.JournalType == LedgerJournalType::CustPaymRemittance;

            tmpBillOfExchangeStatistics.AmountMST = custTrans.AmountMST;
            tmpBillOfExchangeStatistics.RemaningAmount = custTrans.AmountMST
                                                       - custTrans.SettleAmountMST;
        }
        tmpBillOfExchangeStatistics.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRemittedBills</Name>
				<Source><![CDATA[
    protected void calcRemittedBills()
    {
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustTrans custTrans;
        CustTrans custTrans2;
        CustTransOpen custTransOpen;
        AmountMST settleAmountMST;
        AmountMST amountMST;

        tmpBillOfExchangeStatistics.clear();
        tmpBillOfExchangeStatistics.CustBillOfExchangeStatistics = CustBillOfExchangeStatistics::RemittedBills;
        select count(RecId)
        from custBillOfExchangeJour
        where custBillOfExchangeJour.Status == CustVendNegInstStatus::Remitted;
        tmpBillOfExchangeStatistics.Number = any2int(custBillOfExchangeJour.RecId);
        if (custBillOfExchangeJour.RecId)
        {
            while select AmountMST,SettleAmountMST,BillOfExchangeID,BillOfExchangeSeqNum
            from custTrans
            exists join custBillOfExchangeJour
                where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                        custBillOfExchangeJour.Status == CustVendNegInstStatus::Remitted
                exists join custTransOpen
                    where custTransOpen.RefRecId == custTrans.RecId
            {
                select sum(AmountMST)
                  from custTrans2
                  where custTrans2.BillOfExchangeID == custTrans.BillOfExchangeID &&
                          custTrans2.BillOfExchangeSeqNum == custTrans.BillOfExchangeSeqNum &&
                          (custTrans2.BillOfExchangeStatus == CustVendNegInstStatus::Drawn ||
                           custTrans2.BillOfExchangeStatus == CustVendNegInstStatus::Redrawn) &&
                           custTrans2.AmountMST > 0;

                settleAmountMST += custTrans.AmountMST - custTrans.SettleAmountMST;
                amountMST += custTrans2.AmountMST;
            }
            tmpBillOfExchangeStatistics.AmountMST = amountMST;
            tmpBillOfExchangeStatistics.RemaningAmount = settleAmountMST;
        }
        tmpBillOfExchangeStatistics.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBillsInRemittance</Name>
				<Source><![CDATA[
    public CustTrans queryBillsInRemittance()
    {
        CustTrans custTrans;
        CustTransOpen custTransOpen;
        CustBillOfExchangeJour custBillOfExchangeJour;
        SpecTrans specTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        CustTrans tmpCustTrans;

        tmpCustTrans.setTmp();
        custTrans.recordLevelSecurity(true);
        custBillOfExchangeJour.recordLevelSecurity(true);
        custTransOpen.recordLevelSecurity(true);
        specTrans.recordLevelSecurity(true);
        ledgerJournalTrans.recordLevelSecurity(true);
        ledgerJournalTable.recordLevelSecurity(true);

        // When a Bill of Exchange (BOE) is created, it rolls all cross-company invoices that
        // are settled into one BOE CustTrans/Open record that exists in the same company as the
        // payment. As a result, the SpecTrans record never needs to go cross-company in order
        // to generate the correct results. So, all queries or calculations below are "safe" since
        // they all happen in the context of a single company.

        while select custTrans
        exists join custBillOfExchangeJour
            where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                    (custBillOfExchangeJour.Status == CustVendNegInstStatus::Drawn ||
                     custBillOfExchangeJour.Status == CustVendNegInstStatus::Redrawn)
            exists join custTransOpen
                where custTransOpen.AccountNum == custTrans.AccountNum &&
                        custTransOpen.RefRecId == custTrans.RecId
                exists join specTrans
                where specTrans.RefTableId == custTransOpen.TableId &&
                            specTrans.RefRecId == custTransOpen.RecId &&
                            specTrans.RefCompany == custTransOpen.dataAreaId
                        exists join ledgerJournalTrans
                        where ledgerJournalTrans.RecId == specTrans.SpecRecId &&
                                    ledgerJournalTrans.TableId == specTrans.SpecTableId &&
                                    ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
                        exists join ledgerJournalTable
                        where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                    ledgerJournalTable.JournalType == LedgerJournalType::CustPaymRemittance

        {
            tmpCustTrans.data(custTrans);
            tmpCustTrans.insert();
        }
        return tmpCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryDrawnBills</Name>
				<Source><![CDATA[
    public CustTrans queryDrawnBills()
    {
        CustTrans custTrans;
        CustTransOpen custTransOpen;
        CustBillOfExchangeJour custBillOfExchangeJour;
        SpecTrans specTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        CustTrans tmpCustTrans;

        tmpCustTrans.setTmp();
        custTrans.recordLevelSecurity(true);
        custBillOfExchangeJour.recordLevelSecurity(true);
        custTransOpen.recordLevelSecurity(true);
        specTrans.recordLevelSecurity(true);
        ledgerJournalTrans.recordLevelSecurity(true);
        ledgerJournalTable.recordLevelSecurity(true);

        // When a Bill of Exchange (BOE) is created, it rolls all cross-company invoices that
        // are settled into one BOE CustTrans/Open record that exists in the same company as the
        // payment. As a result, the SpecTrans record never needs to go cross-company in order
        // to generate the correct results. So, all queries or calculations below are "safe" since
        // they all happen in the context of a single company.

        while select custTrans
        exists join custBillOfExchangeJour
            where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                    custBillOfExchangeJour.Status == CustVendNegInstStatus::Drawn
            exists join custTransOpen
                where custTransOpen.RefRecId == custTrans.RecId
                notexists join specTrans
                        where specTrans.RefTableId== custTransOpen.TableId &&
                                specTrans.RefRecId == custTransOpen.RecId &&
                                specTrans.RefCompany == custTransOpen.dataAreaId
                        exists join ledgerJournalTrans
                        where ledgerJournalTrans.RecId == specTrans.SpecRecId &&
                                    ledgerJournalTrans.TableId == specTrans.SpecTableId &&
                                    ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
                        exists join ledgerJournalTable
                        where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                    ledgerJournalTable.JournalType == LedgerJournalType::CustPaymRemittance
        {
            tmpCustTrans.data(custTrans);
            tmpCustTrans.insert();
        }
        return tmpCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryHistoryOfProtestedBills</Name>
				<Source><![CDATA[
    public CustTrans queryHistoryOfProtestedBills()
    {
        CustTrans custTrans;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustTrans tmpCustTrans;

        tmpCustTrans.setTmp();
        custTrans.recordLevelSecurity(true);
        custBillOfExchangeTrans.recordLevelSecurity(true);
        while select custTrans
        where custTrans.AmountMST > 0
            exists join custBillOfExchangeTrans
                where custBillOfExchangeTrans.BillOfExchangeId == custTrans.BillOfExchangeID &&
                        custBillOfExchangeTrans.Voucher == custTrans.Voucher &&
                        custBillOfExchangeTrans.Status == CustVendNegInstStatus::Protested
        {
            tmpCustTrans.data(custTrans);
            tmpCustTrans.insert();
        }
        return tmpCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryHistoryOfRedrawnBills</Name>
				<Source><![CDATA[
    public CustTrans queryHistoryOfRedrawnBills()
    {
        CustTrans custTrans;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustTrans tmpCustTrans;

        tmpCustTrans.setTmp();
        custTrans.recordLevelSecurity(true);
        custBillOfExchangeTrans.recordLevelSecurity(true);
        while select custTrans
            where custTrans.AmountMST > 0
            exists join custBillOfExchangeTrans
                where custBillOfExchangeTrans.BillOfExchangeId == custTrans.BillOfExchangeID &&
                        custBillOfExchangeTrans.Voucher == custTrans.Voucher &&
                        custBillOfExchangeTrans.Status == CustVendNegInstStatus::Redrawn
        {
            tmpCustTrans.data(custTrans);
            tmpCustTrans.insert();
        }
        return tmpCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryHonoredBills</Name>
				<Source><![CDATA[
    public CustTrans queryHonoredBills()
    {
        CustTrans custTrans;
        CustTrans custTrans2;
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustBillOfExchangeTrans custBillOfExchangeTrans2;
        BankRemittanceFilesCust bankRemittanceFilesCust;
        CustTrans tmpCustTrans;

        tmpCustTrans.setTmp();
        custTrans.recordLevelSecurity(true);
        custBillOfExchangeJour.recordLevelSecurity(true);
        custBillOfExchangeTrans.recordLevelSecurity(true);
        custBillOfExchangeTrans2.recordLevelSecurity(true);
        custTrans2.recordLevelSecurity(true);
        bankRemittanceFilesCust.recordLevelSecurity(true);
        while select custTrans
                where custTrans.BillOfExchangeStatus == CustVendNegInstStatus::Honored
                exists join custBillOfExchangeJour
                where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                            custBillOfExchangeJour.BillOfExchangeSeqNum == custTrans.BillOfExchangeSeqNum &&
                            custBillOfExchangeJour.Status == CustVendNegInstStatus::Honored
                exists join custBillOfExchangeTrans
                        where custBillOfExchangeTrans.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId &&
                                custBillOfExchangeTrans.SeqNum == custTrans.BillOfExchangeSeqNum &&
                                custBillOfExchangeTrans.Status == custBillOfExchangeJour.Status
                     notexists join custBillOfExchangeTrans2
                        where custBillOfExchangeTrans2.BillOfExchangeId == custTrans.BillOfExchangeID &&
                                    custBillOfExchangeTrans2.SeqNum == custTrans.BillOfExchangeSeqNum &&
                                    custBillOfExchangeTrans2.Status == CustVendNegInstStatus::Remitted
                                exists join custTrans2
                                where custTrans2.BillOfExchangeID == custBillOfExchangeTrans2.BillOfExchangeId &&
                                            custTrans2.BillOfExchangeSeqNum== custBillOfExchangeTrans2.SeqNum &&
                                            custTrans2.BillOfExchangeStatus== custBillOfExchangeTrans2.Status
                                exists join bankRemittanceFilesCust
                                where bankRemittanceFilesCust.FileId == custTrans2.BankRemittanceFileId &&
                                            bankRemittanceFilesCust.BankAccountId == custBillOfExchangeTrans2.RemittedToBankAccountId &&
                                            bankRemittanceFilesCust.Closed == NoYes::Yes

        {
            tmpCustTrans.data(custTrans);
            tmpCustTrans.insert();
        }
        return tmpCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryHonoredClosedBills</Name>
				<Source><![CDATA[
    public CustTrans queryHonoredClosedBills()
    {
        CustTrans custTrans;
        CustTrans custTrans2;
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        BankRemittanceFilesCust bankRemittanceFilesCust;
        CustTrans tmpCustTrans;

        tmpCustTrans.setTmp();
        custTrans.recordLevelSecurity(true);
        custBillOfExchangeJour.recordLevelSecurity(true);
        custBillOfExchangeTrans.recordLevelSecurity(true);
        custTrans2.recordLevelSecurity(true);
        bankRemittanceFilesCust.recordLevelSecurity(true);
        while select custTrans
               where custTrans.BillOfExchangeStatus == CustVendNegInstStatus::Honored
               exists join custBillOfExchangeJour
                   where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                            custBillOfExchangeJour.BillOfExchangeSeqNum == custTrans.BillOfExchangeSeqNum &&
                            custBillOfExchangeJour.Status == CustVendNegInstStatus::Honored
                    exists join custBillOfExchangeTrans
                    where custBillOfExchangeTrans.BillOfExchangeId == custTrans.BillOfExchangeID &&
                                custBillOfExchangeTrans.SeqNum == custTrans.BillOfExchangeSeqNum &&
                                custBillOfExchangeTrans.Status == CustVendNegInstStatus::Remitted
                            exists join custTrans2
                            where custTrans2.BillOfExchangeID == custBillOfExchangeTrans.BillOfExchangeId &&
                                        custTrans2.BillOfExchangeSeqNum== custBillOfExchangeTrans.SeqNum &&
                                        custTrans2.BillOfExchangeStatus== custBillOfExchangeTrans.Status
                            exists join bankRemittanceFilesCust
                            where bankRemittanceFilesCust.FileId == custTrans2.BankRemittanceFileId &&
                                        bankRemittanceFilesCust.BankAccountId == custBillOfExchangeTrans.RemittedToBankAccountId &&
                                        bankRemittanceFilesCust.Closed == NoYes::Yes
        {
            tmpCustTrans.data(custTrans);
            tmpCustTrans.insert();
        }
        return tmpCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryProtestedBills</Name>
				<Source><![CDATA[
    public CustTrans queryProtestedBills()
    {
        CustTrans custTrans;
        CustTrans custTrans2;
        CustTransOpen custTransOpen;
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustBillOfExchangeTrans custBillOfExchangeTrans2;
        CustTrans tmpCustTrans;
        BankRemittanceFilesCust bankRemittanceFilesCust;

        tmpCustTrans.setTmp();
        custTrans.recordLevelSecurity(true);
        custBillOfExchangeJour.recordLevelSecurity(true);
        custBillOfExchangeTrans.recordLevelSecurity(true);
        custTransOpen.recordLevelSecurity(true);
        custBillOfExchangeTrans2.recordLevelSecurity(true);
        custTrans2.recordLevelSecurity(true);
        bankRemittanceFilesCust.recordLevelSecurity(true);
        while select custTrans
             where custTrans.BillOfExchangeStatus == CustVendNegInstStatus::Protested
        exists join custBillOfExchangeJour
            where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                    custBillOfExchangeJour.BillOfExchangeSeqNum == custTrans.BillOfExchangeSeqNum &&
                    custBillOfExchangeJour.Status == CustVendNegInstStatus::Protested
            exists join custBillOfExchangeTrans
                where custBillOfExchangeTrans.BillOfExchangeId == custBillOfExchangeJour.BillOfExchangeId &&
                        custBillOfExchangeTrans.SeqNum == custTrans.BillOfExchangeSeqNum &&
                        custBillOfExchangeTrans.Status == custBillOfExchangeJour.Status
                exists join custTransOpen
                    where custTransOpen.RefRecId == custTrans.RecId
                 notexists join custBillOfExchangeTrans2
                    where custBillOfExchangeTrans2.BillOfExchangeId == custTrans.BillOfExchangeID &&
                                custBillOfExchangeTrans2.SeqNum == custTrans.BillOfExchangeSeqNum &&
                                custBillOfExchangeTrans2.Status == CustVendNegInstStatus::Remitted
                            exists join custTrans2
                            where custTrans2.BillOfExchangeID == custBillOfExchangeTrans2.BillOfExchangeId &&
                                        custTrans2.BillOfExchangeSeqNum== custBillOfExchangeTrans2.SeqNum &&
                                        custTrans2.BillOfExchangeStatus== custBillOfExchangeTrans2.Status
                            exists join bankRemittanceFilesCust
                            where bankRemittanceFilesCust.FileId == custTrans2.BankRemittanceFileId &&
                                        bankRemittanceFilesCust.BankAccountId == custBillOfExchangeTrans2.RemittedToBankAccountId &&
                                        bankRemittanceFilesCust.Closed == NoYes::Yes

        {
            tmpCustTrans.data(custTrans);
            tmpCustTrans.insert();
        }
        return tmpCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryProtestedClosedBills</Name>
				<Source><![CDATA[
    public CustTrans queryProtestedClosedBills()
    {
        CustTrans custTrans;
        CustTrans custTrans2;
        CustTransOpen custTransOpen;
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustBillOfExchangeTrans custBillOfExchangeTrans;
        CustTrans tmpCustTrans;
        BankRemittanceFilesCust bankRemittanceFilesCust;

        tmpCustTrans.setTmp();
        custTrans.recordLevelSecurity(true);
        custBillOfExchangeJour.recordLevelSecurity(true);
        custBillOfExchangeTrans.recordLevelSecurity(true);
        custTrans2.recordLevelSecurity(true);
        bankRemittanceFilesCust.recordLevelSecurity(true);
        custTransOpen.recordLevelSecurity(true);
        while select custTrans
             where custTrans.BillOfExchangeStatus == CustVendNegInstStatus::Protested
        exists join custBillOfExchangeJour
            where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                    custBillOfExchangeJour.BillOfExchangeSeqNum == custTrans.BillOfExchangeSeqNum &&
                    custBillOfExchangeJour.Status == CustVendNegInstStatus::Protested
          exists join custBillOfExchangeTrans
            where custBillOfExchangeTrans.BillOfExchangeId == custTrans.BillOfExchangeID &&
                        custBillOfExchangeTrans.SeqNum == custTrans.BillOfExchangeSeqNum &&
                        custBillOfExchangeTrans.Status == CustVendNegInstStatus::Remitted
                        exists join custTrans2
                        where custTrans2.BillOfExchangeID == custBillOfExchangeTrans.BillOfExchangeId &&
                                    custTrans2.BillOfExchangeSeqNum == custBillOfExchangeTrans.SeqNum &&
                                    custTrans2.BillOfExchangeStatus == custBillOfExchangeTrans.Status
                        exists join bankRemittanceFilesCust
                        where bankRemittanceFilesCust.FileId == custTrans2.BankRemittanceFileId &&
                                    bankRemittanceFilesCust.BankAccountId == custBillOfExchangeTrans.RemittedToBankAccountId &&
                                    bankRemittanceFilesCust.Closed == NoYes::Yes
                        exists join custTransOpen
                            where custTransOpen.RefRecId == custTrans.RecId

        {
            tmpCustTrans.data(custTrans);
            tmpCustTrans.insert();
        }
        return tmpCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRedrawnBills</Name>
				<Source><![CDATA[
    public CustTrans queryRedrawnBills()
    {
        CustTrans custTrans;
        CustTransOpen custTransOpen;
        CustBillOfExchangeJour custBillOfExchangeJour;
        SpecTrans specTrans;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        CustTrans tmpCustTrans;

        tmpCustTrans.setTmp();
        custTrans.recordLevelSecurity(true);
        custBillOfExchangeJour.recordLevelSecurity(true);
        custTransOpen.recordLevelSecurity(true);
        specTrans.recordLevelSecurity(true);
        ledgerJournalTrans.recordLevelSecurity(true);
        ledgerJournalTable.recordLevelSecurity(true);

        // When a Bill of Exchange (BOE) is created, it rolls all cross-company invoices that
        // are settled into one BOE CustTrans/Open record that exists in the same company as the
        // payment. As a result, the SpecTrans record never needs to go cross-company in order
        // to generate the correct results. So, all queries or calculations below are "safe" since
        // they all happen in the context of a single company.

        while select custTrans
        where custTrans.BillOfExchangeStatus == CustVendNegInstStatus::Redrawn
        exists join custBillOfExchangeJour
            where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                     custBillOfExchangeJour.Status == CustVendNegInstStatus::Redrawn
            exists join custTransOpen
                where custTransOpen.AccountNum == custTrans.AccountNum &&
                        custTransOpen.RefRecId == custTrans.RecId
                notexists join specTrans
                        where specTrans.RefTableId== custTransOpen.TableId &&
                                specTrans.RefRecId == custTransOpen.RecId &&
                                specTrans.RefCompany == custTransOpen.dataAreaId
                        exists join ledgerJournalTrans
                        where ledgerJournalTrans.RecId == specTrans.SpecRecId &&
                                    ledgerJournalTrans.TableId == specTrans.SpecTableId &&
                                    ledgerJournalTrans.dataAreaId == specTrans.SpecCompany
                        exists join ledgerJournalTable
                        where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum &&
                                    ledgerJournalTable.JournalType == LedgerJournalType::CustPaymRemittance
        {
            tmpCustTrans.data(custTrans);
            tmpCustTrans.insert();
        }
        return tmpCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRemittedBills</Name>
				<Source><![CDATA[
    public CustTrans queryRemittedBills()
    {
        CustTrans custTrans;
        CustTransOpen custTransOpen;
        CustBillOfExchangeJour custBillOfExchangeJour;
        CustTrans tmpCustTrans;

        tmpCustTrans.setTmp();
        custTrans.recordLevelSecurity(true);
        custBillOfExchangeJour.recordLevelSecurity(true);
        custTransOpen.recordLevelSecurity(true);
        while select custTrans
        exists join custBillOfExchangeJour
            where custBillOfExchangeJour.BillOfExchangeId == custTrans.BillOfExchangeID &&
                    custBillOfExchangeJour.Status == CustVendNegInstStatus::Remitted
            exists join custTransOpen
                where custTransOpen.RefRecId == custTrans.RecId
        {
            tmpCustTrans.data(custTrans);
            tmpCustTrans.insert();
        }
        return tmpCustTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpBillOfExchangeStatHistory</Name>
				<Source><![CDATA[
    public TmpBillOfExchangeStatistics tmpBillOfExchangeStatHistory()
    {
        delete_from tmpBillOfExchangeStatHistory;
        this.calcHistoryOfProtestedBills();
        this.calcHistoryOfRedrawnBills();
        return tmpBillOfExchangeStatHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpBillOfExchangeStatistics</Name>
				<Source><![CDATA[
    public TmpBillOfExchangeStatistics tmpBillOfExchangeStatistics()
    {
        delete_from tmpBillOfExchangeStatistics;
        this.calcDrawnBills();
        this.calcRedrawnBills();
        this.calcBillsInRemittance();
        this.calcRemittedBills();
        this.calcHonoredBills();
        this.calcProtestedBills();
        this.calcHonoredClosedBills();
        this.calcProtestedClosedBills();
        return tmpBillOfExchangeStatistics;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustBillOfExchangeStatCalc construct(tableId _tableId = 0, str _id = '')
    {
        switch (_tableId)
        {
            case tablenum(CustTable):
                return new CustBillOfExchangeStatCalc_Cust(_id);
            case tablenum(BankAccountTable):
                return new CustBillOfExchangeStatCalc_Bank(_id);
        }
        return new CustBillOfExchangeStatCalc();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>