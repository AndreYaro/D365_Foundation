<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceWorkflowHistoryDialogBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles building of workflow history entries on workflow history dialogs.
/// </summary>
internal final class VendInvoiceWorkflowHistoryDialogBuilder
{
    private WorkflowTrackingTable workflowTracking;
    private WorkflowTrackingCommentTable workflowComment;
    private UnknownNoYes isPostingSuccessful;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static VendInvoiceWorkflowHistoryDialogBuilder construct()
    {
        return new VendInvoiceWorkflowHistoryDialogBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWorkflowHistoryForWorkflowEnabledRecord</Name>
				<Source><![CDATA[
    internal VendInvoiceWorkflowHistoryEntryTmp buildWorkflowHistoryForWorkflowEnabledRecord(Common _workflowEnabledRecord)
    {
        VendInvoiceWorkflowHistoryEntryTmp workflowHistoryEntries;
        WorkflowTrackingStatusTable workflowTrackingStatus = Workflow::findTrackingStatusForDocument(_workflowEnabledRecord);

        if (workflowTrackingStatus)
        {
            Query workflowHistoryQuery = new Query(queryStr(VendInvoiceWorkflowHistory));

            this.filterWorkflowHistoryQueryForTrackingStatus(workflowHistoryQuery, workflowTrackingStatus);

            QueryRun workflowHistoryQueryRun = new QueryRun(workflowHistoryQuery);

            while (workflowHistoryQueryRun.next())
            {
                workflowTracking = workflowHistoryQueryRun.get(tableNum(WorkflowTrackingTable));

                if (workflowTracking.RecId != 0
                    && !VendInvoiceWorkflowHistoryDialogBuilder::shouldWorkflowTrackingEventBeHidden(workflowTracking))
                {
                    workflowComment = workflowHistoryQueryRun.get(tableNum(WorkflowTrackingCommentTable));

                    workflowHistoryEntries.Header = this.getHistoryEntryHeader();
                    workflowHistoryEntries.Details = this.getHistoryEntryDetails();
                    workflowHistoryEntries.Comment = this.getHistoryEntryComment();

                    workflowHistoryEntries.insert();
                }
            }
        }

        return workflowHistoryEntries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterWorkflowHistoryQueryForTrackingStatus</Name>
				<Source><![CDATA[
    private void filterWorkflowHistoryQueryForTrackingStatus(Query _workflowHistoryQuery, WorkflowTrackingStatusTable _workflowTrackingStatusTable)
    {
        QueryBuildDataSource workflowHistoryTrackingStatusQbds = _workflowHistoryQuery.dataSourceTable(tablenum(WorkflowTrackingStatusTable));

        QueryBuildRange workflowHistoryTrackingStatusRange = SysQuery::findOrCreateRange(workflowHistoryTrackingStatusQbds, fieldNum(WorkflowTrackingStatusTable, RecId));
        workflowHistoryTrackingStatusRange.value(queryValue(_workflowTrackingStatusTable.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHistoryEntryHeader</Name>
				<Source><![CDATA[
    private VendInvoiceWorkflowHistoryEntryHeader getHistoryEntryHeader()
    {
        str workflowHistoryEntryHeader = SysWorkflowApprovalWorkitemService::getWorkflowHistoryMessage(workflowComment);

        if (workflowTracking.TrackingContext == WorkflowTrackingContext::Workflow
            && workflowTracking.TrackingType == WorkflowTrackingType::Fault
            && this.isInvoicePostingSuccessful() == UnknownNoYes::No)
        {
            workflowHistoryEntryHeader = "@AccountsPayable:WorkflowHistoryDialogInvoicePostingFailed";
        }

        if (!workflowHistoryEntryHeader)
        {
            if (workflowTracking.TrackingContext == WorkflowTrackingContext::WorkItem
                && workflowTracking.TrackingType == WorkflowTrackingType::Creation)
            {
                workflowHistoryEntryHeader = "@AccountsPayable:WorkflowHistoryDialogWorkItemCreation";
            }
            else if (workflowTracking.TrackingContext == WorkflowTrackingContext::AutomatedTask
                && workflowTracking.TrackingType == WorkflowTrackingType::Completion
                && this.isInvoicePostingSuccessful() == UnknownNoYes::Yes)
            {
                workflowHistoryEntryHeader = "@AccountsPayable:WorkflowHistoryDialogInvoicePostingSucceeded";
            }
            else if (workflowTracking.TrackingContext == WorkflowTrackingContext::Workflow
                && workflowTracking.TrackingType == WorkflowTrackingType::Completion)
            {
                workflowHistoryEntryHeader = "@AccountsPayable:WorkflowHistoryDialogWorkflowCompletion";
            }
            else if (workflowTracking.TrackingContext == WorkflowTrackingContext::LineItemWorkflow
                && workflowTracking.TrackingType == WorkflowTrackingType::Completion)
            {
                workflowHistoryEntryHeader = "@AccountsPayable:WorkflowHistoryDialogLineWorkflowCompletion";
            }
        }

        return workflowHistoryEntryHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHistoryEntryDetails</Name>
				<Source><![CDATA[
    private VendInvoiceWorkflowHistoryEntryDetails getHistoryEntryDetails()
    {
        return strFmt(
            "@AccountsPayable:WorkflowHistoryDialogHistoryEntrySubHeader",
            workflowTracking.TrackingContext,
            workflowTracking.TrackingType,
            workflowTracking.CreatedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHistoryEntryComment</Name>
				<Source><![CDATA[
    private VendInvoiceWorkflowHistoryEntryComment getHistoryEntryComment()
    {
        VendInvoiceWorkflowHistoryEntryComment workflowHistoryEntryComment;

        if (workflowComment.Comment
            && this.isPostingSuccessful == UnknownNoYes::Unknown)
        {
            workflowHistoryEntryComment = strFmt("@SYS111012", workflowComment.Comment);
        }

        return workflowHistoryEntryComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoicePostingSuccessful</Name>
				<Source><![CDATA[
    private UnknownNoYes isInvoicePostingSuccessful()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;
        WorkflowTrackingStatusTable workflowTrackingStatusTable;
        isPostingSuccessful = UnknownNoYes::Unknown;

        select RecId, ParmJobStatus from vendInvoiceInfoTable
            join workflowTrackingStatusTable
            where vendInvoiceInfoTable.RecId == workflowTrackingStatusTable.ContextRecId
                && workflowTrackingStatusTable.RecId == workflowTracking.WorkflowTrackingStatusTable;

        if (vendInvoiceInfoTable.RecId != 0)
        {
            if (vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Executed)
            {
                isPostingSuccessful = UnknownNoYes::Yes;
            }
            else
            {
                isPostingSuccessful = UnknownNoYes::No;
            }
        }

        return isPostingSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldWorkflowTrackingEventBeHidden</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the workflow action or event should be hidden on the history dialog.
    /// </summary>
    /// <param name = "_workflowTrackingTable">The workflow tracking record.</param>
    /// <returns>true if the action or event should not be displayed on the history dialog; otherwise, false.</returns>
    private static boolean shouldWorkflowTrackingEventBeHidden(WorkflowTrackingTable _workflowTrackingTable)
    {
        return _workflowTrackingTable.TrackingType == WorkflowTrackingType::Creation
            && (_workflowTrackingTable.TrackingContext == WorkflowTrackingContext::AutomatedTask
                || _workflowTrackingTable.TrackingContext == WorkflowTrackingContext::LineItemWorkflow
                || _workflowTrackingTable.TrackingContext == WorkflowTrackingContext::Workflow);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>