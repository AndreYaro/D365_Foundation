<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobUpdResetPlan</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class KanbanJobUpdResetPlan extends KanbanJobUpdReset
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs actions for the plan status reset.
    /// </summary>
    protected void cleanUp()
    {
        this.resetKanbanJobSchedule();
        this.resetKanbanJob();
        this.resetPickingListMaterialDateTime();
        this.resetWMSOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupWHSRelatedTables</Name>
				<Source><![CDATA[
    private void cleanupWHSRelatedTables()
    {
        WHSWaveTable        waveTable;
        WHSKanbanWaveLine   kanbanWaveLine;

        if (isConfigurationkeyEnabled(configurationkeynum(WHSandTMS)))
        {
            ttsbegin;
            select firstonly forUpdate waveTable
                exists join kanbanWaveLine
                    where kanbanWaveLine.Kanban == kanbanJob.Kanban
                        && kanbanWaveLine.WaveId == waveTable.WaveId;

            if (waveTable.RecId)
            {
                if (waveTable.WaveStatus != WHSWaveStatus::Created)
                {
                    checkFailed("@WAX5842");
                }
                else
                {
                    //Try to delete the wave lines and the wave table.
                    while select forupdate kanbanWaveLine
                        where kanbanWaveLine.WaveId == waveTable.WaveId
                    {
                        if (kanbanWaveLine.validateDelete())
                        {
                            kanbanWaveLine.delete();
                        }
                    }

                    if (waveTable.validateDelete())
                    {
                        waveTable.delete();
                    }
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the <c>KanbanJob</c> table record.
    /// </summary>
    /// <remarks>
    /// The record must already be selected for update.
    /// </remarks>
    protected void resetKanbanJob()
    {
        this.cleanupWHSRelatedTables();
        this.resetStatus(LeanKanbanJobStatus::NotPlanned);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetKanbanJobSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the kanban job from the <c>KanbanJobSchedule</c> table.
    /// </summary>
    protected void resetKanbanJobSchedule()
    {
        KanbanJobSchedulerDelete::newStandard(kanbanJob).run();
        kanbanJob = KanbanJob::find(kanbanJob.RecId,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPickingListMaterialDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the material date for picking list lines.
    /// </summary>
    protected void resetPickingListMaterialDateTime()
    {
        KanbanJobPickingList        kanbanJobPickingList;
        TransDateTime               newMaterialDateTime = KanbanDateCalculation::newKanbanJob(kanbanJob).jobMaterialDateTime(kanbanJob);

        ttsbegin;
        update_recordset kanbanJobPickingList
            setting MaterialDateTime = newMaterialDateTime
            where kanbanJobPickingList.Job == kanbanJob.RecId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets output orders for kanban job picking list lines.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The output order could not be deleted.
    /// </exception>
    protected void resetWMSOrder()
    {
        KanbanJobPickingList    kanbanJobPickingList;
        WMSOrder                wmsOrder;

        ttsbegin;
        while select forupdate wmsOrder
            where wmsOrder.InventTransType == InventTransType::KanbanJobPickingList
            join ItemId from kanbanJobPickingList
                where kanbanJobPickingList.InventTransId == wmsOrder.InventTransId
                   && kanbanJobPickingList.Job           == kanbanJob.RecId
        {
            if (wmsOrder.validateDelete())
            {
                wmsOrder.delete();
            }
            else
            {
                throw error(strFmt("@SYS322197",wmsOrder.OrderId,kanbanJobPickingList.ItemId));
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static KanbanJobUpdReset construct()
    {
        return new KanbanJobUpdResetPlan();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>