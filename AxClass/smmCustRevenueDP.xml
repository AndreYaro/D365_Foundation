<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmCustRevenueDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>smmCustRevenueDP</c> class is the report data provider class for the
/// <c>smmCustRevenue</c>SQL ServerReporting Services report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(smmCustRevenueContract)),
    SRSReportQueryAttribute(QueryStr(smmCustRevenue))
]
public class smmCustRevenueDP extends SrsReportDataProviderPreProcessTempDB
{
    smmCustRevenueTmp   temp;
    InvoiceOrderAccount invoiceOrderAccount;
    QueryRun            queryRun;
    AmountMST           revenue;
    MarkupSumSales      sumMarkup;
    CustInvoiceJour     custInvoiceJour;
    ProjInvoiceJour     projInvoiceJour;
    CurrencyCode        currency;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getsmmCustRevenueTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data from the <c>smmCustRevenueTmp</c> table.
    /// </summary>
    /// <returns>
    /// The <c>smmCustRevenueTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(smmCustRevenueTmp))
    ]
    public smmCustRevenueTmp getsmmCustRevenueTmp()
    {
        select temp;
        return temp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>smmCustRevenueTmp</c> table with data.
    /// </summary>
    /// <param name="_custTable">
    /// The <c>CustTable</c> common buffer.
    /// </param>
    private void insertIntoTmpTable(CustTable _custTable)
    {
        temp.AccountNum     = _custTable.AccountNum;
        temp.Markup         = sumMarkup;
        temp.Revenue        = revenue;
        temp.AmtInclCharges = sumMarkup + revenue;
        temp.CustGroup      = _custTable.CustGroup;
        temp.Currency       = currency;
        temp.Name           = DirPartyTable::findRec(_custTable.Party).Name;
        temp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SQL
    /// ServerReporting Services at runtime. The method should compute data and populate the data tables
    /// that will be returned to SQL ServerReporting Services.
    /// </remarks>
    public void processReport()
    {
        boolean             firstCustomer   = true;
        boolean             journalFound    = false;
        CustTable           custTableTmp;

        Query                   qCustTable, qJournals;
        QueryRun                qRunCustTable;
        QueryBuildRange         qBuildRange;
        QueryRun                localQueryRun;
        AccountNum              rangeValue;
        smmCustRevenueContract  contract;

        qCustTable = this.parmQuery();
        qJournals  = this.parmQuery();

        contract = this.parmDataContract() as smmCustRevenueContract;

        currency = infolog.isoCurrencyCode() ? infolog.isoCurrencyCode() : Ledger::accountingCurrency(CompanyInfo::current());

        qCustTable.recordLevelSecurity(true);
        qJournals.recordLevelSecurity(true);

        invoiceOrderAccount = contract.parmInvoiceOrderAccount();

        if (invoiceOrderAccount == InvoiceOrderAccount::InvoiceAccount)
        {
            qJournals.dataSourceTable(tablenum(CustInvoiceJour)).addLink(fieldnum(CustTable, AccountNum),fieldnum(CustInvoiceJour, InvoiceAccount));
            qJournals.dataSourceTable(tablenum(ProjInvoiceJour)).addLink(fieldnum(CustTable, AccountNum),fieldnum(ProjInvoiceJour, InvoiceAccount));
        }
        else
        {
            qJournals.dataSourceTable(tablenum(CustInvoiceJour)).addLink(fieldnum(CustTable, AccountNum),fieldnum(CustInvoiceJour, OrderAccount));
            qJournals.dataSourceTable(tablenum(ProjInvoiceJour)).addLink(fieldnum(CustTable, AccountNum),fieldnum(ProjInvoiceJour, OrderAccount));
        }

        qBuildRange = SysQuery::findOrCreateRange(qJournals.dataSourceTable(tablenum(CustTable)),fieldnum(CustTable, AccountNum));

        if (!qBuildRange.value())
        {
            qBuildRange.status(RangeStatus::Hidden);
        }
        else
        {
            rangeValue = qBuildRange.value();
        }

        qRunCustTable = new QueryRun(qCustTable);

        while (qRunCustTable.next())
        {
            if (SysReportRun::changed(qRunCustTable,tablenum(CustTable)))
            {
                custTableTmp = qRunCustTable.get(tablenum(CustTable));
                journalFound = false;
                revenue      = 0;
                sumMarkup    = 0;

                qBuildRange.value(queryValue(custTableTmp.AccountNum));

                localQueryRun = new QueryRun(qJournals);

                localQueryRun.recordLevelSecurity(true);
                while (localQueryRun.next())
                {
                    if (SysReportRun::changed(localQueryRun,tablenum(CustInvoiceJour)))
                    {
                        custInvoiceJour = localQueryRun.get(tablenum(CustInvoiceJour));
                        if (custInvoiceJour)
                        {
                            if (custInvoiceJour.RefNum != RefNum::Interest)
                            {
                                revenue += CurrencyExchangeHelper::mstAmount(custInvoiceJour.SalesBalance - custInvoiceJour.EndDisc, custInvoiceJour.CurrencyCode, custInvoiceJour.InvoiceDate, Currency::noYes2UnknownNoYes(custInvoiceJour.Triangulation), custInvoiceJour.ExchRate, custInvoiceJour.ExchRateSecondary);

                                sumMarkup += CurrencyExchangeHelper::mstAmount(custInvoiceJour.SumMarkup, custInvoiceJour.CurrencyCode, custInvoiceJour.InvoiceDate, Currency::noYes2UnknownNoYes(custInvoiceJour.Triangulation), custInvoiceJour.ExchRate, custInvoiceJour.ExchRateSecondary);
                            }

                            journalFound = true;
                        }
                    }

                    if (SysReportRun::changed(localQueryRun,tablenum(ProjInvoiceJour)))
                    {
                        projInvoiceJour = localQueryRun.get(tablenum(ProjInvoiceJour));
                        if (projInvoiceJour)
                        {
                            //Check if this is a duplicate invoice generated from a Free text invoice
                            CustInvoiceJour localCustInvoiceJour;
                            select firstonly RecId from localCustInvoiceJour
                                where localCustInvoiceJour.LedgerVoucher == projInvoiceJour.LedgerVoucher;

                            if (!localCustInvoiceJour)
                            {
                                revenue += CurrencyExchangeHelper::mstAmount(projInvoiceJour.SalesOrderbalance - projInvoiceJour.EndDisc, 
                                    projInvoiceJour.CurrencyId, projInvoiceJour.InvoiceDate, Currency::noYes2UnknownNoYes(projInvoiceJour.Triangulation), 
                                    projInvoiceJour.ExchRate, projInvoiceJour.ExchrateSecondary);

                                sumMarkup += CurrencyExchangeHelper::mstAmount(projInvoiceJour.SumMarkup, projInvoiceJour.CurrencyId, 
                                    projInvoiceJour.InvoiceDate, Currency::noYes2UnknownNoYes(projInvoiceJour.Triangulation), projInvoiceJour.ExchRate, 
                                    projInvoiceJour.ExchrateSecondary);
                            }

                            journalFound = true;
                        }
                    }
                }
                if (journalFound)
                {
                    qBuildRange.value(rangeValue);
                    this.insertIntoTmpTable(custTableTmp);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>