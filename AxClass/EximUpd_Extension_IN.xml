<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximUpd_Extension_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim update extension class.
/// </summary>
class EximUpd_Extension_IN extends EximUpdate_IN implements BatchRetryable
{
    PaymentPer_IN                    importExtensionPeriodUnit;
    PaymentPer_IN                    exportExtensionPeriodUnit;
    Days_IN                          importExtensionPeriodValue;
    Days_IN                          exportExtensionPeriodValue;
    EximLicenseNum_IN                certificateNum;
    TransDateTime                    certificateIssueDate;
    NoYesId                          isDutyEntitlement;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>importExpiryDateTimeExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Import extension of expiry date time.
    /// </summary>
    /// <returns>
    /// The date time of the transaction.
    /// </returns>
    public TransDateTime importExpiryDateTimeExtension()
    {
        TransDateTime          expiryDateTime;
        EximDEPBSchemesLine_IN eximDEPBSchemesLine;
        TransDate              expiryDate;

        select maxof(ImportExpiryDateTime)
            from eximDEPBSchemesLine
                where eximDEPBSchemesLine.SchemeTableRecId == depbSchemesTable.RecId
                   && eximDEPBSchemesLine.RecId            != depbSchemesLine.RecId;

        expiryDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(eximDEPBSchemesLine.ImportExpiryDateTime, DateTimeUtil::getUserPreferredTimeZone()));

        expiryDateTime = DateTimeUtil::newDateTime(
                            dateEndMth(EximUpdate_IN::fetchDate(
                                importExtensionPeriodUnit,
                                importExtensionPeriodValue,
                                expiryDate)),
                            0);

        expiryDateTime = DateTimeUtil::addSeconds(DateTimeUtil::addDays(expiryDateTime, 1), -1);

        return DateTimeUtil::removeTimeZoneOffset(expiryDateTime, DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>licenseStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the license status.
    /// </summary>
    /// <returns>
    /// The instance of the <c>EximLicenseStatus_IN</c> class.
    /// </returns>
    protected EximLicenseStatus_IN licenseStatus()
    {
        return EximLicenseStatus_IN::Extended;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCertificateIssueDateTime</Name>
				<Source><![CDATA[
    public TransDateTime parmCertificateIssueDateTime(TransDateTime _certificateIssueDate = certificateIssueDate)
    {
        certificateIssueDate = _certificateIssueDate;

        return certificateIssueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCertificateNumber</Name>
				<Source><![CDATA[
    public EximLicenseNum_IN parmCertificateNumber(EximLicenseNum_IN _certificateNum = certificateNum)
    {
        certificateNum = _certificateNum;

        return certificateNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDutyEntitlement</Name>
				<Source><![CDATA[
    public NoYesId parmDutyEntitlement(NoYesId _isDutyEntitlement = isDutyEntitlement)
    {
        isDutyEntitlement = _isDutyEntitlement;

        return isDutyEntitlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpExtensionPeriod</Name>
				<Source><![CDATA[
    public PaymentPer_IN parmExpExtensionPeriod(PaymentPer_IN _exportExtensionPeriodUnit = exportExtensionPeriodUnit)
    {
        exportExtensionPeriodUnit = _exportExtensionPeriodUnit;

        return exportExtensionPeriodUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpExtensionPeriodValue</Name>
				<Source><![CDATA[
    public Days_IN parmExpExtensionPeriodValue(Days_IN _exportExtensionPeriodValue = exportExtensionPeriodValue)
    {
        exportExtensionPeriodValue = _exportExtensionPeriodValue;

        return exportExtensionPeriodValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImpExtensionPeriod</Name>
				<Source><![CDATA[
    public PaymentPer_IN parmImpExtensionPeriod(PaymentPer_IN _importExtensionPeriodUnit = importExtensionPeriodUnit)
    {
        importExtensionPeriodUnit = _importExtensionPeriodUnit;

        return importExtensionPeriodUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImpExtensionPeriodValue</Name>
				<Source><![CDATA[
    public Days_IN parmImpExtensionPeriodValue(Days_IN _importExtensionPeriodValue = importExtensionPeriodValue)
    {
        importExtensionPeriodValue = _importExtensionPeriodValue;

        return importExtensionPeriodValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run method of <c>EximUpd_Extension_IN</c> class.
    /// </summary>
    public void run()
    {
        container schemeValues;
        ;

        if (schemeType == EximAuthorizationType_IN::AA || schemeType == EximAuthorizationType_IN::DFIA)
        {
            schemeValues = [schemeTableId,
                            schemeTableRecId,
                            licenseNum,
                            issueDate,
                            importAssessableValue,
                            importExtensionPeriodUnit,
                            importExtensionPeriodValue,
                            exportAssessableValue,
                            exportExtensionPeriodUnit,
                            exportExtensionPeriodValue,
                            taxAccountGroup,
                            iECNumber,
                            transDate];
        }
        else
        {
            schemeValues = [schemeTableId,
                            schemeTableRecId,
                            certificateNum,
                            certificateIssueDate,
                            importExtensionPeriodUnit,
                            importExtensionPeriodValue,
                            isDutyEntitlement,
                            totalDutyEntitlement,
                            totalComponentAmount,
                            taxAccountGroup,
                            iECNumber,
                            transDate];
        }

        EximUpd_Extension_IN::runOnServer(
            schemeType,
            schemeValues,
            tmpTaxDetails,
            tmpImportableItems,
            tmpEximEntitlementDetails);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates and posts.
    /// </summary>
    protected void updateAndPost()
    {
        EximAuthorizationSchemesLine_IN authorizationLine;


        switch (schemeType)
        {
            case EximAuthorizationType_IN::AA, EximAuthorizationType_IN::DFIA:
                if (authorizationSchemesLine)
                {
                    select reverse firstonly ImportExpiryDate, ExportExpiryDate, RecId
                        from authorizationLine
                        order by RecId
                        where authorizationLine.AuthorizationSchemesTableRecId == authorizationSchemesLine.AuthorizationSchemesTableRecId
                           && authorizationLine.LicenseStatus                  != EximLicenseStatus_IN::Sold
                           && authorizationLine.VersionNum                     != authorizationSchemesLine.VersionNum;

                    authorizationSchemesLine.selectForUpdate(true);

                    authorizationSchemesLine.ImportExpiryDate = dateEndMth(EximUpdate_IN::fetchDate(
                                                                            importExtensionPeriodUnit,
                                                                            importExtensionPeriodValue,
                                                                            authorizationLine.ImportExpiryDate));

                    if (EximAuthorizationSchemesTable_IN::find(schemeTableRecId).AuthorizationBasis != EximAuthorizationBasis_IN::Purchase)
                    {
                        // During Split if the Existing record has the Export Expiry Date Blank,
                        // by defualt the date is set to 01/01/1900 to avoid this the date check is required.
                        if (authorizationSchemesLine.ExportExpiryDate || (EximAuthorizationSchemesTable_IN::find(schemeTableRecId).SplitApproved == NoYes::No))
                        {
                            authorizationSchemesLine.ExportExpiryDate = dateEndMth(EximUpdate_IN::fetchDate(
                                                                                    exportExtensionPeriodUnit,
                                                                                    exportExtensionPeriodValue,
                                                                                    authorizationLine.ExportExpiryDate));
                        }
                    }

                    authorizationSchemesLine.update();
                }
                break;
            case EximAuthorizationType_IN::DEPB:
                if (depbSchemesLine)
                {
                    depbSchemesLine.ImportExpiryDateTime = this.importExpiryDateTimeExtension();
                    depbSchemesLine.CertificateNum       = certificateNum;
                    depbSchemesLine.RevisionDateTime     = DateTimeUtil::removeTimeZoneOffset(certificateIssueDate, DateTimeUtil::getUserPreferredTimeZone());

                    depbSchemesLine.ExtensiontPeriodUnit = importExtensionPeriodUnit;
                    depbSchemesLine.ExtensionPeriod      = importExtensionPeriodValue;
                    depbSchemesLine.ExtensionApplyDuty   = isDutyEntitlement;

                    if (!depbSchemesLine.ExtensionApplyDuty)
                    {
                        depbSchemesLine.DutyEntitlementValue = 0;
                        depbSchemesLine.TotalComponentAmount = 0;
                    }

                    depbSchemesLine.update();

                    update_recordset eximEntitlementDetails
                        setting ImportExpiryDateTime = depbSchemesLine.ImportExpiryDateTime
                            where eximEntitlementDetails.SchemesLineRecId == depbSchemesLine.RecId;
                }
                break;
        }
        if (schemeType == EximAuthorizationType_IN::DEPB && !isDutyEntitlement)
        {
            return;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAuthorizationScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the authorization scheme.
    /// </summary>
    protected void updateAuthorizationScheme()
    {
        switch (schemeTableId)
        {
            case tableNum(EximAuthorizationSchemesTable_IN) :
                this.insertAuthorizationSchemeLine();
                break;
            case tableNum(EximDEPBSchemesLine_IN) :
                select firstonly depbSchemesLine
                    where depbSchemesLine.RecId == schemeTableRecId
                    join depbSchemesTable
                        where depbSchemesTable.RecId == depbSchemesLine.SchemeTableRecId;

                this.updateDEPBSchemeLine();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDEPBSchemeLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates depb scheme line information.
    /// </summary>
    protected void updateDEPBSchemeLine()
    {
        depbSchemesLine.clear();
        depbSchemesLine.SchemeTableRecId     = schemeTableRecId;
        depbSchemesLine.DutyEntitlementValue = totalDutyEntitlement;
        depbSchemesLine.TotalComponentAmount   = totalComponentAmount;
        depbSchemesLine.iecTaxRegistrationNumberTable   = TaxRegistrationNumbers_IN::findByNaturalKey(TaxRegistrationType_IN::Company,
                                                                                                                      TaxType_IN::Customs,
                                                                                                                      iECNumber).RecId;
        depbSchemesLine.TaxLedgerAccountGroup           = TaxLedgerAccountGroup_IN::findByTaxAccountGroup(taxAccountGroup).RecId;
        depbSchemesLine.LicenseStatus        = this.licenseStatus();
        depbSchemesLine.Text                 = txt;
        depbSchemesLine.SchemeTableRecId     = depbSchemesTable.RecId;
        depbSchemesLine.VersionNum           = EximDEPBSchemesLine_IN::findVersionNum(depbSchemesTable.RecId) + 1;
        depbSchemesLine.insert();

        if (isDutyEntitlement)
        {
            while select tmpEximEntitlementDetails
            {
                eximEntitlementDetails.EximProductGroupTable         = tmpEximEntitlementDetails.EximProductGroupTable;
                eximEntitlementDetails.DutyEntitlement      = tmpEximEntitlementDetails.DutyEntitlement;
                eximEntitlementDetails.ImportExpiryDateTime = DateTimeUtil::removeTimeZoneOffset(importExpiryDateTime, DateTimeUtil::getUserPreferredTimeZone());
                eximEntitlementDetails.SchemesLineRecId     = depbSchemesLine.RecId;
                eximEntitlementDetails.LicenseStatus        = this.licenseStatus();
                eximEntitlementDetails.insert();

                select firstonly forupdate eximDEPBDetails
                    where eximDEPBDetails.SchemesTableRecId == depbSchemesLine.SchemeTableRecId
                       && eximDEPBDetails.EximProductGroupTable      == eximEntitlementDetails.EximProductGroupTable;

                if (eximDEPBDetails)
                {
                    eximDEPBDetails.DutyEntitlement += eximEntitlementDetails.DutyEntitlement;
                }
                else
                {
                    eximDEPBDetails.SchemesTableRecId = depbSchemesTable.RecId;
                    eximDEPBDetails.EximProductGroupTable      = eximEntitlementDetails.EximProductGroupTable;
                    eximDEPBDetails.DutyEntitlement   = eximEntitlementDetails.DutyEntitlement;
                }

                eximDEPBDetails.write();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIncentiveScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates incentive scheme.
    /// </summary>
    public void updateIncentiveScheme()
    {
        #OCCRetryCount
        ;

        try
        {
            ttsbegin;
            this.updateAuthorizationScheme();

            this.updateAndPost();

            if (schemeType == EximAuthorizationType_IN::AA || schemeType == EximAuthorizationType_IN::DFIA)
            {
                this.insertSummaryImportableItems();
                this.writeImportDetails();
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method run on the server side.
    /// </summary>
    /// <param name="_schemeType">
    /// The scheme type.
    /// </param>
    /// <param name="_schemeValues">
    /// The scheme values.
    /// </param>
    /// <param name="_tmpTaxDetails">
    /// The tmp tax details.
    /// </param>
    /// <param name="_tmpImportableItems">
    /// The tmp importable items.
    /// </param>
    /// <param name="_tmpEximEntitlementDetails">
    /// The tmp exim entitlement details.
    /// </param>
    public static void runOnServer(
        EximAuthorizationType_IN     _schemeType,
        container                    _schemeValues,
        TmpEximTaxDetails_IN         _tmpTaxDetails,
        TmpEximImportableItems_IN    _tmpImportableItems,
        TmpEximEntitlementDetails_IN _tmpEximEntitlementDetails)
    {
        EximUpd_Extension_IN eximUpdExtension = new EximUpd_Extension_IN();

        eximUpdExtension.parmSchemeType(_schemeType);
        eximUpdExtension.parmTmpEximTaxDetails(_tmpTaxDetails);
        eximUpdExtension.parmTmpEximImportableItems(_tmpImportableItems);
        eximUpdExtension.parmTmpEximEntitlementDetails(_tmpEximEntitlementDetails);

        if (_schemeType == EximAuthorizationType_IN::AA || _schemeType == EximAuthorizationType_IN::DFIA)
        {
            eximUpdExtension.parmSchemeTableId(conPeek(_schemeValues, 1));
            eximUpdExtension.parmSchemeTableRecId(conPeek(_schemeValues, 2));
            eximUpdExtension.parmLicenseNumber(conPeek(_schemeValues, 3));
            eximUpdExtension.parmIssueDate(conPeek(_schemeValues, 4));
            eximUpdExtension.parmImportAssessableValue(conPeek(_schemeValues, 5));
            eximUpdExtension.parmImpExtensionPeriod(conPeek(_schemeValues, 6));
            eximUpdExtension.parmImpExtensionPeriodValue(conPeek(_schemeValues, 7));
            eximUpdExtension.parmExportAssessableValue(conPeek(_schemeValues, 8));
            eximUpdExtension.parmExpExtensionPeriod(conPeek(_schemeValues, 9));
            eximUpdExtension.parmExpExtensionPeriodValue(conPeek(_schemeValues, 10));
            eximUpdExtension.parmTaxAccountGroup(conPeek(_schemeValues, 11));
            eximUpdExtension.parmIECNumber(conPeek(_schemeValues, 12));
            eximUpdExtension.parmTransDate(conPeek(_schemeValues, 13));
        }
        else
        {
            eximUpdExtension.parmSchemeTableId(conPeek(_schemeValues, 1));
            eximUpdExtension.parmSchemeTableRecId(conPeek(_schemeValues, 2));
            eximUpdExtension.parmCertificateNumber(conPeek(_schemeValues, 3));
            eximUpdExtension.parmCertificateIssueDateTime(conPeek(_schemeValues, 4));
            eximUpdExtension.parmImpExtensionPeriod(conPeek(_schemeValues, 5));
            eximUpdExtension.parmImpExtensionPeriodValue(conPeek(_schemeValues, 6));
            eximUpdExtension.parmDutyEntitlement(conPeek(_schemeValues, 7));
            eximUpdExtension.parmTotalDutyEntitlement(conPeek(_schemeValues, 8));
            eximUpdExtension.parmTotalComponentAmount(conPeek(_schemeValues, 9));
            eximUpdExtension.parmTaxAccountGroup(conPeek(_schemeValues, 10));
            eximUpdExtension.parmIECNumber(conPeek(_schemeValues, 11));
            eximUpdExtension.parmTransDate(conPeek(_schemeValues, 12));
        }

        eximUpdExtension.updateIncentiveScheme();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if can run the inquiry in new session or not.
    /// </summary>
    /// <returns>
    /// True if can run the inquiry in new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>