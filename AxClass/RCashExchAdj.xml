<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rCashExchAdj</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rCashExchAdj extends RunBaseBatch implements BatchRetryable
{
    ToDate          toDate;
    CurrencyCode    fromCur;
    CurrencyCode    toCur;

    DialogField     dialogAccountNum;
    DialogField     dialogToDate;
    DialogField     dialogFromCur;
    DialogField     dialogToCur;

    QueryRun        queryRun;
    Counter         progressCounter;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        toDate,
        fromCur,
        toCur
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNumSeqCode</Name>
				<Source><![CDATA[
    protected Num allocateNumSeqCode(RCashAccount _accountNum,
                                     boolean      _isReportingExchAdj = false)
    {
        NumberSequenceReference numberSequenceReference = _isReportingExchAdj ?
                                                          RCashParameters::numRefDocReportingExchAdjId() :
                                                          RCashParameters::numRefDocExchAdjId();
        NumberSequenceGroupId   numberSequenceGroup     = RCashTable::find(_accountNum).NumberSequenceGroup;
        NumberSequenceGroupRef  numberSequenceGroupRef;
        RefRecId                numberSequenceId;
        NumberSeqScope          scope                   = NumberSeqScopeFactory::createDefaultScope();

        if (numberSequenceGroup)
        {
            numberSequenceGroupRef = NumberSequenceGroupRef::findNaturalKey(numberSequenceReference.NumberSequenceDatatype, scope.getId(), numberSequenceGroup);

            if (numberSequenceGroupRef.NumberSequenceId)
            {
                numberSequenceReference.NumberSequenceId = numberSequenceGroupRef.NumberSequenceId;
            }
            numberSequenceId = numberSequenceReference.NumberSequenceId;
        }
        else
        {
            numberSequenceId = numberSequenceReference.NumberSequenceId;
        }

        return NumberSeq::newGetNumFromId(numberSequenceId, false, false, null, false, UnknownNoYes::No).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAndPost</Name>
				<Source><![CDATA[
    public void calcAndPost(RCashAccount _accountNum)
    {
        RCashTrans                    rCashTransLocal;
        NumberSeq                     numberSeq;
        Voucher                       voucher;
        LedgerVoucher                 ledgerVoucher;
        Currency                      currency;
        TransactionTxt                transactionTxt;
        TransTxt                      transTxt;
        CurrencyCode                  accountingCurrency = Ledger::accountingCurrency();
        CurrencyCode                  reportingCurrency  = Ledger::reportingCurrency();
        AmountMST                     totalAccountingExchAdjAmount;
        AmountMSTSecondary            totalReportingExchAdjAmount;
        KeySum                        totalKeySum = KeySum::construct(1,2);
        Map                           dateAndVoucherMap = new Map(Types::Date, Types::String);
        int                           idx;

        setPrefix(strFmt("@GLS104785", _accountNum));

        try
        {
            ttsbegin;
            numberSeq = NumberSeq::newGetVoucher(RCashParameters::numRefCashExchAdjVoucher(), false);

            voucher   = numberSeq.voucher();

            transactionTxt = TransactionTxt::construct();
            transactionTxt.setDate(toDate);
            transactionTxt.setType(LedgerTransTxt::RCashExchAdj);
            transactionTxt.setVoucher(voucher);
            transTxt = transactionTxt.txt();

            ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                         SysModule::RCash,
                                                         numberSeq.parmVoucherSequenceCode(),
                                                         TransactionLogType::RCashExchAdj,
                                                         transTxt);

            ledgerVoucher.addVoucher(LedgerVoucherObject::newVoucher(voucher,
                                                                     toDate,
                                                                     SysModule::RCash,
                                                                     LedgerTransType::ExchAdjustment));

            ledgerVoucher.findLedgerVoucherObject().lastTransTxt(transTxt);

            dateAndVoucherMap.insert(toDate, voucher);

            while select * from currency
                where currency.CurrencyCode >= fromCur &&
                      currency.CurrencyCode <= toCur
            {
                this.progressUpdate(strFmt("@GLS110763",
                                            _accountNum,
                                            currency.CurrencyCode));

                voucher = dateAndVoucherMap.lookup(toDate);
                [totalAccountingExchAdjAmount, totalReportingExchAdjAmount] = this.calcAndPostCurrency(_accountNum, toDate, currency.CurrencyCode, ledgerVoucher, voucher);
                totalKeySum.updateNow(toDate, [totalAccountingExchAdjAmount, totalReportingExchAdjAmount]);

                while select rCashTransLocal
                    group by TransDate
                    where rCashTransLocal.AccountNum    == _accountNum           &&
                          rCashTransLocal.CurrencyCode  == currency.CurrencyCode &&
                          rCashTransLocal.TransDate     >  toDate                &&
                          (rCashTransLocal.DocType      == RCashDocType::ExchRateDifference ||
                           rCashTransLocal.DocType      == RCashDocType::ReportingExchRateDifference)
                {
                    if (!dateAndVoucherMap.exists(rCashTransLocal.TransDate))
                    {
                        voucher = numberSeq.voucher();

                        ledgerVoucher.addVoucher(LedgerVoucherObject::newVoucher(voucher,
                                                                                 rCashTransLocal.TransDate,
                                                                                 SysModule::RCash,
                                                                                 LedgerTransType::ExchAdjustment));
                    }
                    else
                    {
                        voucher = dateAndVoucherMap.lookup(rCashTransLocal.TransDate);
                    }

                    [totalAccountingExchAdjAmount, totalReportingExchAdjAmount] = this.calcAndPostCurrency(_accountNum, rCashTransLocal.TransDate, currency.CurrencyCode, ledgerVoucher, voucher);
                    totalKeySum.updateNow(rCashTransLocal.TransDate, [totalAccountingExchAdjAmount, totalReportingExchAdjAmount]);
                }
            }

            ledgerVoucher.end();

            TransactionLog::create(this.transactionLogType(), this.transactionLogTxt());

            for (idx = 1; idx <= totalKeySum.numOfTrans(); idx++)
            {
                [totalAccountingExchAdjAmount, totalReportingExchAdjAmount] = totalKeySum.index2Data(idx);

                if (reportingCurrency)
                {
                    info(strFmt("@GLS220602",
                        totalKeySum.index2Key(idx),
                        totalAccountingExchAdjAmount,
                        accountingCurrency,
                        totalReportingExchAdjAmount,
                        reportingCurrency));
                }
                else
                {
                    info(strFmt("@GLS104487", toDate, totalAccountingExchAdjAmount, accountingCurrency));
                }
            }

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }
        catch(Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAndPostCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and posts exchange adjustments of cash transactions.
    /// </summary>
    /// <param name="_accountNum">
    ///     The cash account number.
    /// </param>
    /// <param name="_toDate">
    ///     The transaction date.
    /// </param>
    /// <param name="_currencyCode">
    ///     The currency code.
    /// </param>
    /// <param name="_ledgerVoucher">
    ///     The ledger voucher object.
    /// </param>
    /// <param name="_voucher">
    ///     The ledger voucher value.
    /// </param>
    /// <returns>
    ///     Container that contains exchange adjustment amounts in accounting and reporting currency.
    /// </returns>
    #define.ConPos1(1)
    #define.ConPos2(2)
    protected container calcAndPostCurrency(RCashAccount    _accountNum,
                                            TransDate       _toDate,
                                            CurrencyCode    _currencyCode,
                                            LedgerVoucher   _ledgerVoucher,
                                            Voucher         _voucher)
    {
        RCashBalanceCurExchAdj        balanceCur;
        LedgerDimensionDefaultAccount defaultAccount;
        int                           idx;
        AmountMST                     accountingAmount, accountingExchAdjAmount, totalAccountingExchAdjAmount;
        AmountMSTSecondary            reportingAmount, reportingExchAmount, totalReportingExchAdjAmount;

        LedgerBondClient_RU           ledgerBondClient = _ledgerVoucher.findLedgerVoucherObject(_voucher, _toDate).ledgerBondClient_RU();

        RTax25ExchAdjDimension        exchAdjDimension;
        DimensionDefault              defaultDimension;
        RCashTrans                    cashTrans;
        CurrencyExchangeHelper        currencyExchangeHelper;
        RecId                         currentLedger = Ledger::current();
        LedgerCurrencyParameters_RU   ledgerCurrencyParameters;

        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), _toDate);
        exchAdjDimension       = new RTax25ExchAdjDimension();
        balanceCur             = new RCashBalanceCurExchAdj(_toDate);

        // Ledger accounts and dimensions settings are the same for the accounting and reporting adjustment, only Gain/Loss sign may differ
        // so there is no need of separate copies of ledgerCurrencyParameters and exchAdjDimension for exchAdjDimension, same objects are used.
        ledgerCurrencyParameters    = LedgerCurrencyParameters_RU::findParameters(currentLedger, _currencyCode);

        exchAdjDimension.setLedgerDimensions(
            CurrencyLedgerGainLossAccount::ledgerDimension(currentLedger, _currencyCode, CurrencyGainLossAccountType::UnrealizedGain),
            CurrencyLedgerGainLossAccount::ledgerDimension(currentLedger, _currencyCode, CurrencyGainLossAccountType::UnrealizedLoss));

        exchAdjDimension.setProfitIds(ledgerCurrencyParameters.rTax25ProfitTableProfit, ledgerCurrencyParameters.rTax25ProfitTableLoss);

        balanceCur.calc(_accountNum, _currencyCode);

        for (idx = 1; idx <= balanceCur.ledgerCount(); idx++)
        {
            accountingAmount = currencyExchangeHelper.calculateTransactionToAccounting(
                _currencyCode, balanceCur.ledgerAmountCur(idx), true);

            accountingExchAdjAmount = accountingAmount - balanceCur.ledgerAmountMST(idx) - balanceCur.ledgerExchAdjustment(idx);

            reportingAmount = currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(
                _currencyCode, balanceCur.ledgerAmountCur(idx));

            reportingExchAmount = reportingAmount - balanceCur.ledgerReportingAmount(idx) - balanceCur.ledgerReportingExchAdjustment(idx);

            defaultAccount   = conPeek(balanceCur.ledgerAccountContainer(idx), #ConPos1);

            if (accountingExchAdjAmount)
            {
                defaultDimension = conPeek(balanceCur.ledgerAccountContainer(idx), #ConPos2);
                exchAdjDimension.parmExchAdjType(accountingExchAdjAmount > 0 ? RTax25ExchAdjType::Gain : RTax25ExchAdjType::Loss);
                defaultDimension = exchAdjDimension.getDefaultDimension(defaultDimension);

                cashTrans = this.initCashTrans( _accountNum,
                                                _toDate,
                                                _currencyCode,
                                                accountingExchAdjAmount,
                                                defaultDimension,
                                                _ledgerVoucher.findLedgerVoucherObject(_voucher, _toDate),
                                                defaultAccount,
                                                exchAdjDimension.getLedgerDimension(),
                                                false);

                RCashVoucher::updateBalances(cashTrans);
                cashTrans.insert();

                if (ledgerBondClient)
                {
                    ledgerBondClient.addNewLogObject();
                }

                _ledgerVoucher.addTrans(LedgerVoucherTransObject::newBasicMST_RU(_ledgerVoucher.findLedgerVoucherObject(_voucher, _toDate),
                                                                                exchAdjDimension.getPostingType(),
                                                                                cashTrans.LedgerDimension,
                                                                                _currencyCode,
                                                                                accountingExchAdjAmount));

                _ledgerVoucher.addTrans(LedgerVoucherTransObject::newBasicMST_RU(_ledgerVoucher.findLedgerVoucherObject(_voucher, _toDate),
                                                                                exchAdjDimension.getPostingType(),
                                                                                cashTrans.OffsetLedgerDimension,
                                                                                _currencyCode,
                                                                                - accountingExchAdjAmount));

                if (ledgerBondClient)
                {
                    ledgerBondClient.bondLastVRef2CurrentLog();
                    ledgerBondClient.removeCurrentLogObject();
                }
                totalAccountingExchAdjAmount += accountingExchAdjAmount;
            }

            if (reportingExchAmount)
            {
                defaultDimension = conPeek(balanceCur.ledgerAccountContainer(idx), #ConPos2);
                exchAdjDimension.parmExchAdjType(reportingExchAmount > 0 ? RTax25ExchAdjType::Gain : RTax25ExchAdjType::Loss);
                defaultDimension = exchAdjDimension.getDefaultDimension(defaultDimension);

                cashTrans = this.initCashTrans( _accountNum,
                                                _toDate,
                                                _currencyCode,
                                                reportingExchAmount,
                                                defaultDimension,
                                                _ledgerVoucher.findLedgerVoucherObject(_voucher, _toDate),
                                                defaultAccount,
                                                exchAdjDimension.getLedgerDimension(),
                                                true);

                cashTrans.insert();

                if (ledgerBondClient)
                {
                    ledgerBondClient.addNewLogObject();
                }

                _ledgerVoucher.addTrans(LedgerVoucherTransObject::newBasicSecondary_RU(_ledgerVoucher.findLedgerVoucherObject(_voucher, _toDate),
                                                                                        exchAdjDimension.getPostingType(),
                                                                                        cashTrans.LedgerDimension,
                                                                                        _currencyCode,
                                                                                        reportingExchAmount));

                _ledgerVoucher.addTrans(LedgerVoucherTransObject::newBasicSecondary_RU(_ledgerVoucher.findLedgerVoucherObject(_voucher, _toDate),
                                                                                        exchAdjDimension.getPostingType(),
                                                                                        cashTrans.OffsetLedgerDimension,
                                                                                        _currencyCode,
                                                                                        - reportingExchAmount));

                if (ledgerBondClient)
                {
                    ledgerBondClient.bondLastVRef2CurrentLog();
                    ledgerBondClient.removeCurrentLogObject();
                }
                totalReportingExchAdjAmount += reportingExchAmount;
            }
        }

        return [totalAccountingExchAdjAmount, totalReportingExchAdjAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check()
    {
        RCashTrans              cashTrans;
        SysInfoAction_Formrun   sysInfoAction;
        RCashTable              cashTable;
        boolean                 ret = true;
        ;

        while (queryRun.next())
        {
            cashTable = queryRun.get(tableNum(RCashTable));

            setPrefix(strFmt("@GLS104785", cashTable.AccountNum));

            select firstonly cashTrans
                order by TransDate desc
                where cashTrans.AccountNum      == cashTable.AccountNum   &&
                      cashTrans.CurrencyCode    >= fromCur                &&
                      cashTrans.CurrencyCode    <= toCur                  &&
                      cashTrans.Posted          == NoYes::No              &&
                      cashTrans.TransDate       <= toDate                 &&
                      cashTrans.TransStatus     == RCashTransStatus::Approved;
            if (cashTrans)
            {
                sysInfoAction = SysInfoAction_Formrun::newFormnameControlnameDesc(formStr(LedgerJournalTable), "", "@SYS53465");
                sysInfoAction.parmCallerBuffer(cashTrans.ledgerJournalTrans().ledgerJournalTable());
                ret = checkFailed(strFmt("@GLS106879", cashTrans.ledgerJournalTrans().JournalNum, cashTrans.TransDate),
                                  "",
                                  sysInfoAction.parmCallerBuffer() ? sysInfoAction : null);
            }
        }
        queryRun.reset();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    #define.ColumnCount(2)
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        DialogGroup     dialogGroup;
        ;

        dialogGroup = dialog.addGroup("@GLS116844");
        dialogGroup.widthMode(FormWidth::ColumnWidth);
        dialogToDate     = dialog.addFieldValue(extendedTypeStr(ToDate), toDate, "@GLS116844");

        dialogGroup = dialog.addGroup("@SYS8815");
        dialogGroup.columns(#ColumnCount);
        dialogGroup.widthMode(FormWidth::ColumnWidth);
        dialogFromCur    = dialog.addFieldValue(extendedTypeStr(CurrencyCode), fromCur, "@GLS104436");
        dialogToCur      = dialog.addFieldValue(extendedTypeStr(CurrencyCode), toCur, "@GLS104437");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();
        ;

        if (ret)
        {
            toDate      = dialogToDate.value();
            fromCur     = dialogFromCur.value();
            toCur       = dialogToCur.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCashTrans</Name>
				<Source><![CDATA[
    protected RCashTrans initCashTrans(RCashAccount                 _accountNum,
                                       TransDate                    _toDate,
                                       CurrencyCode                 _currencyCode,
                                       AmountMSTExchAdjustment      _exchAmount,
                                       DimensionDefault             _defaultDimension,
                                       LedgerVoucherObject          _ledgerVoucherObject,
                                       LedgerDimensionDefaultAccount _defaultAccount,
                                       LedgerDimensionDefaultAccount _offsetDefaultAccount,
                                       boolean                       _isReportingExchAdj)
    {
        RCashTrans  cashTrans;

        cashTrans.TransDate                = _toDate;
        cashTrans.AttachmentNum            = "";
        cashTrans.PaymentNotes             = "";
        cashTrans.AccountNum               = _accountNum;
        cashTrans.Voucher                  = _ledgerVoucherObject.parmVoucher();
        cashTrans.Txt                      = _ledgerVoucherObject.lastTransTxt();
        cashTrans.CurrencyCode             = _currencyCode;
        cashTrans.AmountCur                = 0.0;
        cashTrans.AmountMST                = _isReportingExchAdj ? 0 : _exchAmount;
        cashTrans.ReportingCurrencyAmount  = _isReportingExchAdj ? _exchAmount : 0;

        cashTrans.DocId                    = this.allocateNumSeqCode(_accountNum, _isReportingExchAdj);

        cashTrans.DocType                  = _isReportingExchAdj ? RCashDocType::ReportingExchRateDifference : RCashDocType::ExchRateDifference;
        cashTrans.LedgerDimension          = LedgerDimensionFacade::serviceCreateLedgerDimension(_defaultAccount, _defaultDimension);
        cashTrans.OffsessionId             = "";
        cashTrans.OffsetLedgerDimensionNum = LedgerDimensionFacade::serviceCreateLedgerDimension(_offsetDefaultAccount, _defaultDimension);
        cashTrans.OffsetAccountType        = LedgerJournalACType::Ledger;
        cashTrans.OffsetLedgerDimension    = cashTrans.OffsetLedgerDimensionNum;
        cashTrans.CashPayTransType         = RCashPayLedgerTransType::None;
        cashTrans.TransStatus              = RCashTransStatus::Approved;
        cashTrans.Posted                   = NoYes::Yes;

        return cashTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        ;

        query = new Query("@SYS24408");
        qbds  = query.addDataSource(tableNum(RCashTable));
        qbds.addRange(fieldNum(RCashTable, AccountNum));

        queryRun = new QueryRun(query);

        fromCur     = (select firstonly CurrencyCode from currency
                          order by CurrencyCode asc).CurrencyCode;
        toCur       = (select firstonly CurrencyCode from currency
                          order by CurrencyCode desc).CurrencyCode;
        toDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProgress</Name>
				<Source><![CDATA[
    protected void initProgress()
    {
        #macrolib.AviFiles

        Counter    progressTotal;
        Currency   currency;
        ;

        progressTotal = SysQuery::countTotal(queryRun);

        select count(RecId) from currency
            where currency.CurrencyCode >= fromCur &&
                  currency.CurrencyCode <= toCur;

        progressTotal = any2int(progressTotal * currency.RecId);
        this.progressInit("@SYS55328", progressTotal, #AviUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromCur</Name>
				<Source><![CDATA[
    public CurrencyCode parmFromCur(CurrencyCode _fromCur = fromCur)
    {
        fromCur = _fromCur;
        return fromCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryRun</Name>
				<Source><![CDATA[
    public QueryRun parmQueryRun(QueryRun _value = queryRun)
    {
        queryRun = _value;
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToCur</Name>
				<Source><![CDATA[
    public CurrencyCode parmToCur(CurrencyCode _toCur = toCur)
    {
        toCur = _toCur;
        return toCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    protected void progressUpdate(str _text)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(_text);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RCashTable    cashTable;
        ;

        this.initProgress();

        while (queryRun.next())
        {
            cashTable = queryRun.get(tableNum(RCashTable));
            this.calcAndPost(cashTable.AccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    public TransTxt transactionLogTxt()
    {
        return "@SYS55328";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    public TransactionLogType transactionLogType()
    {
        return TransactionLogType::RCashExchAdj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version = conPeek(_packedClass, 1);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super();

        if (! toDate)
        {
            ret = ret && checkFailed("@SYS24455");
        }

        ret = Currency::checkExist(fromCur) && ret;
        ret = Currency::checkExist(toCur)   && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS55328";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RCashExchAdj exchAdj = new RCashExchAdj();
        ;

        setPrefix("@SYS24408");

        if (exchAdj.prompt() && exchAdj.check())
        {
            exchAdj.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>