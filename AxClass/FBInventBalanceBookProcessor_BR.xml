<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBInventBalanceBookProcessor_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates the inventory balance
/// </summary>
public class FBInventBalanceBookProcessor_BR
{
    FBBookingPeriod_BR          fbBookingPeriod;
    FiscalEstablishment_BR      fiscalEstablishment;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canInventoryBalanceBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the inventory balance can be updated for the current booking period.
    /// </summary>
    /// <returns>
    /// true if the inventory can be updated; otherwise, throws an exception.
    /// </returns>
    private boolean canInventoryBalanceBeUpdated()
    {
        if (fbBookingPeriod.existsClosedTaxAssessmentForTaxType(TaxType_BR::ICMS))
        {
            throw error(strFmt("@SpedFiscalBlockK:InventoryBalanceUpdateValidation", TaxType_BR::ICMS));
        }

        if (fbBookingPeriod.existsClosedTaxAssessmentForTaxType(TaxType_BR::IPI))
        {
            throw error(strFmt("@SpedFiscalBlockK:InventoryBalanceUpdateValidation", TaxType_BR::IPI));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBookingPeriodBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete all inventory balances associated with the current booking period that are not coming from Staging.
    /// </summary>
    private void deleteBookingPeriodBalance()
    {
        try
        {
            ttsbegin;

            changecompany (fbBookingPeriod.FiscalEstablishmentDataArea)
            {
                if (this.canInventoryBalanceBeUpdated())
                {
                    FBInventBalance_BR inventBalance;

                    delete_from inventBalance
                        where inventBalance.BookingPeriod == fbBookingPeriod.RecId
                            && inventBalance.Integrated == NoYes::No;
                }
            }

            ttscommit;
        }
        catch
        {
            ttsabort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTableMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines value for InventoryBalancesForWarehouse
    /// </summary>
    /// <returns>
    /// throws error message.
    /// </returns>
    private MainAccountNum getInventTableMainAccount(InventTable _inventTable)
    {
        inventPosting inventPosting;

        select firstonly inventPosting
            where inventPosting.ItemRelation  == _inventTable.ItemId
                && inventPosting.InventAccountType == InventAccountType::PurchReceipt;

        if (!inventPosting)
        {
            select firstonly inventPosting
                where inventPosting.ItemRelation == _inventTable.ItemId
                    && inventPosting.InventAccountType == InventAccountType::SalesRevenue;
        }

        if (!inventPosting)
        {
            select firstonly inventPosting
                where (inventPosting.ItemRelation == _inventTable.itemGroupId() ||
                       inventPosting.ItemCode == InventPostingItemCode::All)
                        && inventPosting.InventAccountType == InventAccountType::PurchReceipt;
        }

        if (!inventPosting)
        {
            select firstonly inventPosting
                where (inventPosting.ItemRelation == _inventTable.itemGroupId() ||
                       inventPosting.ItemCode == InventPostingItemCode::All)
                        && inventPosting.InventAccountType == InventAccountType::SalesRevenue;
        }

        if (!inventPosting)
        {
            select firstonly inventPosting
                where (inventPosting.ItemRelation == _inventTable.itemGroupId() ||
                       inventPosting.ItemCode == InventPostingItemCode::All)
                        && inventPosting.InventAccountType == InventAccountType::InventReceipt;
        }

        return inventPosting.ledgerAccountName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBalancesForLegalEntityInventory</Name>
				<Source><![CDATA[
    private void insertBalancesForLegalEntityInventory(date _balanceDate)
    {
        FiscalEstablishmentInventSite_BR    fiscalEstablishmentInventSite;
        InventLocation                      inventLocation;
        InventSumDateTransReport            inventSumDateTransReport;
        InventTable                         inventTable;

        inventSumDateTransReport = this.getInventoryBalances(_balanceDate);

        while select RecId from fiscalEstablishmentInventSite
            where fiscalEstablishmentInventSite.FiscalEstablishment_BR == fiscalEstablishment.RecId
            join InventSiteId, InventLocationId, InventCountingGroup_BR, CustAccount_BR, VendAccount from inventLocation
                    where inventLocation.InventSiteId == fiscalEstablishmentInventSite.InventSite
            join ItemId, PostedQty, DeductedQty, ReceivedQty, CostAmountPosted, CostAmountAdjustment from inventSumDateTransReport
               where inventSumDateTransReport.InventSiteId      == inventLocation.InventSiteId
                  && inventSumDateTransReport.InventLocationId  == inventLocation.InventLocationId
            join inventTable
               where inventTable.ItemId == inventSumDateTransReport.ItemId
        {
            InventQtyPhysicalOnhand physicalOnHandQty = inventSumDateTransReport.PostedQty
                                                        + inventSumDateTransReport.ReceivedQty
                                                        - inventSumDateTransReport.DeductedQty;

            this.insertInventBalance(
                _balanceDate, 
                inventTable, 
                inventSumDateTransReport.PostedQty, 
                inventSumDateTransReport.CostAmountPosted + inventSumDateTransReport.CostAmountAdjustment,
                inventLocation, physicalOnHandQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventBalance</Name>
				<Source><![CDATA[
    private void insertInventBalance(TransDate _balanceDate, InventTable _inventTable, InventQty _qty, CostAmount _value, InventLocation _inventLocation, InventQtyPhysicalOnHand _physicalOnHandQty = 0)
    {
        FBInventBalance_BR                  inventBalance;
        CustVendType_BR                     custVendType = CustVendType_BR::FiscalEstablishment;
        InventCountingGroup_BR              inventOwner = _inventLocation.InventCountingGroup_BR;
        CustAccount                         custAccount = _inventLocation.CustAccount_BR;
        VendAccount                         vendAccount = _inventLocation.VendAccount;

        ttsBegin;
        CustVendAC custVendAccount = custAccount ? custAccount : vendAccount;

        select firstonly forUpdate inventBalance
            where inventBalance.BookingPeriod    == fbBookingPeriod.RecId
                && inventBalance.MonthRef         == _balanceDate
                && inventBalance.ItemId           == _inventTable.ItemId
                && inventBalance.InventOwner      == inventOwner
                && inventBalance.CustVendAccount  == custVendAccount;

        inventBalance.BookingPeriod         = fbBookingPeriod.RecId;
        inventBalance.MonthRef              = _balanceDate;
        inventBalance.ItemId                = _inventTable.ItemId;
        inventBalance.UnitId                = _inventTable.inventTableModuleInvent().UnitId;
        inventBalance.InventQty             += _qty;
        inventBalance.CostAmount            += _value;
        inventBalance.PhysicalOnHandQty     += _physicalOnHandQty;
        inventBalance.InventoryAccountNum   = this.getInventTableMainAccount(_inventTable);
        inventBalance.InventOwner           = inventOwner;

        if (custVendAccount)
        {
            if (custAccount && CustTable::exist(custAccount))
            {
                custVendType = CustVendType_BR::Customer;
            }
            else if (vendAccount && VendTable::exist(vendAccount))
            {
                custVendType = CustVendType_BR::Vendor;
            }
            else
            {
                custVendType = CustVendType_BR::FiscalEstablishment;
            }

            inventBalance.CustVendAccount     = custVendAccount;
            inventBalance.CustVendType        = custVendType;
        }

        inventBalance.write();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(FBBookingPeriod_BR _fbBookingPeriod, FiscalEstablishment_BR _fiscalEstablishment)
    {
        fbBookingPeriod     = _fbBookingPeriod;
        fiscalEstablishment = _fiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the fiscal books inventory balance.
    /// </summary>
    /// <param name="balanceDate">
    /// The reference date of  the inventory.
    /// </param>
    public void process(date balanceDate)
    {
        try
        {
            ttsbegin;

            changecompany (fbBookingPeriod.FiscalEstablishmentDataArea)
            {
                if (this.canInventoryBalanceBeUpdated())
                {
                    FBInventBalance_BR inventBalance;

                    delete_from inventBalance
                        where inventBalance.BookingPeriod == fbBookingPeriod.RecId
                            && inventBalance.MonthRef == balanceDate
                            && inventBalance.Integrated == NoYes::No;

                    this.insertBalancesForLegalEntityInventory(balanceDate);
                }
            }

            ttscommit;
        }
        catch
        {
            ttsabort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAllApplicableInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the fiscal books inventory balance for all applicable referenced dates.
    /// </summary>
    public void processAllApplicableInventory()
    {
        this.deleteBookingPeriodBalance();

        this.processAssessmentPeriodInventory();

        if (fbBookingPeriod.PeriodMonth == MonthsOfYear::February)
        {
            this.processPreviousYearInventory();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAssessmentPeriodInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the fiscal books inventory balance for each assessment period.
    /// </summary>
    private void processAssessmentPeriodInventory()
    {
        FBTaxAssessment_BR  taxAssessment;
        boolean             foundPeriod = false;

        while select ToDate from taxAssessment
            where taxAssessment.FBBookingPeriod_BR == fbBookingPeriod.RecId
                && taxAssessment.TaxType == TaxType_BR::IPI
        {
            this.process(taxAssessment.ToDate);
            foundPeriod = true;
        }

        if (!foundPeriod)
        {
            select firstonly ToDate from taxAssessment
                where taxAssessment.FBBookingPeriod_BR == fbBookingPeriod.RecId
                    && taxAssessment.TaxType == TaxType_BR::ICMS;

            if (taxAssessment)
            {
                this.process(taxAssessment.ToDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPreviousYearInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the fiscal books inventory balance for the last day of previous year.
    /// </summary>
    private void processPreviousYearInventory()
    {
        int lastYear = fbBookingPeriod.PeriodYear - 1;
        date inventoryDate = mkDate(31, MonthsOfYear::December, lastYear);

        this.process(inventoryDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the <c>FBInventBalanceBookProcessor_BR</c> class.
    /// </summary>
    /// <param name="_fbBookingPeriod">
    /// The booking period.
    /// </param>
    /// <param name="_fiscalEstablishment">
    /// The fiscal establishment.
    /// </param>
    /// <returns>
    /// The <c>FBInventBalanceBookProcessor_BR</c> class.
    /// </returns>
    public static FBInventBalanceBookProcessor_BR construct(FBBookingPeriod_BR _fbBookingPeriod, FiscalEstablishment_BR _fiscalEstablishment)
    {
        return new FBInventBalanceBookProcessor_BR(_fbBookingPeriod, _fiscalEstablishment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventoryBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Inventory balances.
    /// </summary>
    /// <param name="_balanceDate">
    /// The reference date of  the inventory.
    /// </param>
    /// <returns>
    /// returns the InventSumDateTransReport value.
    /// </returns>
    private InventSumDateTransReport getInventoryBalances(date _balanceDate)
    {
        InventDimParm                       inventDimParm;
        InventDimPhysDP                     inventDimPhysDP = new InventDimPhysDP();
        InventDimPhysContract               inventDimPhysContract = InventDimPhysContract::construct();
        InventDimViewContract               inventDimViewContract = InventDimViewContract::construct();
        InventSumDateTransReport            inventSumDateTransReport;

        inventDimParm.InventSiteIdFlag = NoYes::Yes;
        inventDimParm.InventLocationIdFlag = NoYes::Yes;
    
        inventDimViewContract.parmInventDimParm(inventDimParm);

        InventDimPhysContract.parmPerDate(_balanceDate);
        InventDimPhysContract.parmInventDimViewContract(inventDimViewContract);
        inventDimPhysContract.parmShowZeroLines(true);

        InventDimPhysDP.parmDataContract(InventDimPhysContract);
        InventDimPhysDP.processReport();

        InventSumDateTransReport = InventDimPhysDP.getInventSumDateTransReport();

        return InventSumDateTransReport;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>