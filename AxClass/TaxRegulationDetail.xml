<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxRegulationDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxRegulationDetail</c> class manages tax adjustments at the invoice line detail level.
/// </summary>
/// <remarks>
/// Tax adjustments can be made at per tax code, source currency code, tax direction summary level or
/// at per tax code, source currency code, tax direction, and source document line detail level. This
/// class manages tax adjustments at the detail level.
/// </remarks>
public class TaxRegulationDetail extends TaxRegulation
{
    TmpTaxRegulation tmpTaxRegulationDetail;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTaxRegulationDetailToSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the specified detail tax adjustment to tax adjustment summary.
    /// </summary>
    /// <param name="_detailTmpTaxRegulation">
    /// The detail tax adjustment record.
    /// </param>
    private void addTaxRegulationDetailToSummary(TmpTaxRegulation _detailTmpTaxRegulation)
    {
        TaxRegulationAmountCur summaryTaxRegulationAmount, summaryActualTaxRegulationAmount;
        TaxBaseCur             summaryBaseAmountCurRegulated;

        select sum(SourceRegulateAmountCur), sum(SourceBaseAmountCurRegulated), sum(ActualSourceRegulateAmountCur) from tmpTaxRegulationDetail
            where tmpTaxRegulationDetail.TaxCode == _detailTmpTaxRegulation.TaxCode &&
                tmpTaxRegulationDetail.TaxDirection == _detailTmpTaxRegulation.TaxDirection &&
                tmpTaxRegulationDetail.SourceCurrencyCode == _detailTmpTaxRegulation.SourceCurrencyCode &&
                tmpTaxRegulationDetail.ManualInsertedTax == _detailTmpTaxRegulation.ManualInsertedTax &&
                tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail &&
                tmpTaxRegulationDetail.RecId != _detailTmpTaxRegulation.RecId;

        summaryTaxRegulationAmount = tmpTaxRegulationDetail.SourceRegulateAmountCur + _detailTmpTaxRegulation.SourceRegulateAmountCur;
        summaryActualTaxRegulationAmount = tmpTaxRegulationDetail.ActualSourceRegulateAmountCur;
        summaryBaseAmountCurRegulated = tmpTaxRegulationDetail.SourceBaseAmountCurRegulated + _detailTmpTaxRegulation.SourceBaseAmountCurRegulated;

        select tmpTaxRegulation
            where tmpTaxRegulation.TaxCode == _detailTmpTaxRegulation.TaxCode &&
                tmpTaxRegulation.SourceCurrencyCode == _detailTmpTaxRegulation.SourceCurrencyCode &&
                tmpTaxRegulation.TaxDirection == _detailTmpTaxRegulation.TaxDirection &&
                tmpTaxRegulation.ManualInsertedTax == _detailTmpTaxRegulation.ManualInsertedTax &&
                tmpTaxRegulation.TaxAdjustmentType == TaxAdjustmentType::Summary;

        if (tmpTaxRegulation)
        {
            tmpTaxRegulation.SourceRegulateAmountCur = summaryTaxRegulationAmount;
            tmpTaxRegulation.SourceBaseAmountCurRegulated = summaryBaseAmountCurRegulated;
            tmpTaxRegulation.ActualSourceRegulateAmountCur = summaryActualTaxRegulationAmount;
            tmpTaxRegulation.OverrideCalculatedTax = NoYes::Yes;
            tmpTaxRegulation.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the allocated tax amount and updates the transactions in the <c>TmpTaxRegulation</c>
    /// table.
    /// </summary>
    /// <param name="_taxRegulationAmountCur">
    /// The currency of the tax regulation amount.
    /// </param>
    public void allocateAmount(TaxRegulationAmountCur _taxRegulationAmountCur)
    {
        TaxAmountCur taxAmount;
        TaxAmountCur taxAllocated, actualTaxAllocated;
        TaxCode taxCode;
        TaxDirection taxDirection;
        Counter taxAllocatedSign;

        // <GEEU>
        SalesTaxTransactionExchangeRate salesTaxTransactionExchangeRate;
        boolean useSalesTaxExchangeRate = TaxParameters::isBankExchRateEnabled_W();
        // </GEEU>

        if (taxTotal)
        {
            while select forupdate tmpTaxRegulation
                where tmpTaxRegulation.TaxAdjustmentType == TaxAdjustmentType::Summary
            {
                if (tmpTaxRegulation.ManualInsertedTax == NoYes::No)
                {
                    tmpTaxRegulation.SourceRegulateAmountCur =
                        CurrencyExchangeHelper::amount(abs(_taxRegulationAmountCur * tmpTaxRegulation.SourceTaxAmountCur / taxTotal), tmpTaxRegulation.SourceCurrencyCode);

                    tmpTaxRegulation.ActualSourceRegulateAmountCur =
                        CurrencyExchangeHelper::amount(abs(_taxRegulationAmountCur * tmpTaxRegulation.SourceTaxAmountCur / taxTotal), tmpTaxRegulation.SourceCurrencyCode);

                    // <GEEPL>
                    this.calcRegulateAmount_PL(sourceTableId, sourceRecId, tmpTaxWorkTrans);
                    // </GEEPL>

                    this.calcTaxInCostPrice(tmpTaxRegulation);

                    if (abs(tmpTaxRegulation.SourceRegulateAmountCur) > taxAmount)
                    {
                        taxAmount = tmpTaxRegulation.SourceRegulateAmountCur;
                        taxCode = tmpTaxRegulation.TaxCode;
                        taxDirection = tmpTaxRegulation.TaxDirection;
                    }

                    tmpTaxRegulation.OverrideCalculatedTax = NoYes::Yes;
                }

                taxAllocatedSign = this.determineSignForAdjustmentAllocation(tmpTaxRegulation);
                taxAllocated += tmpTaxRegulation.SourceRegulateAmountCur * taxAllocatedSign;
                actualTaxAllocated += tmpTaxRegulation.ActualSourceRegulateAmountCur * taxAllocatedSign;
                tmpTaxRegulation.update();
            }
        }

        // Apply penny difference to the maximum adjustment amount line.
        if (taxTotal && abs(taxAllocated) != abs(_taxRegulationAmountCur))
        {
            select forupdate tmpTaxRegulation
                where tmpTaxRegulation.TaxCode == taxCode
                    && tmpTaxRegulation.TaxDirection == taxDirection
                    && tmpTaxRegulation.TaxAdjustmentType == TaxAdjustmentType::Summary;

            if (tmpTaxRegulation)
            {
                tmpTaxRegulation.SourceRegulateAmountCur += (abs(_taxRegulationAmountCur) - abs(taxAllocated));
                tmpTaxRegulation.ActualSourceRegulateAmountCur += (abs(_taxRegulationAmountCur) - abs(actualTaxAllocated));

                this.calcRegulateAmount_PL(sourceTableId, sourceRecId, tmpTaxWorkTrans, true);

                tmpTaxRegulation.OverrideCalculatedTax = NoYes::Yes;
                this.calcTaxInCostPrice(tmpTaxRegulation);
                tmpTaxRegulation.update();
            }
        }

        TmpTaxRegulation summaryTaxRegulation;
        summaryTaxRegulation.setTmpData(tmpTaxRegulation);

        while select summaryTaxRegulation
            where summaryTaxRegulation.TaxAdjustmentType == TaxAdjustmentType::Summary
        {
            this.allocateTaxRegulationSummaryToDetails(summaryTaxRegulation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateExchangeRateTaxRegulationSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocates the specified exchange rate tax adjustment summary to details.
    /// </summary>
    /// <param name="_summaryTmpTaxRegulation">
    /// The tax adjustment summary record.
    /// </param>
    public void allocateExchangeRateTaxRegulationSummary(TmpTaxRegulation _summaryTmpTaxRegulation)
    {
        TaxAmount taxAllocated;

        if (_summaryTmpTaxRegulation.ExchangeRateSourceRegulateAmount == 0)
        {
            this.resetExchangeRateTaxRegulationDetail(_summaryTmpTaxRegulation);
        }
        else if (_summaryTmpTaxRegulation.SourceTaxAmountCur == 0
            && TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByTable(headingTableId, headingRecId))
        {
            // allocate to first detail line only when SourceTaxAmountCur is zero
            select firstonly forupdate tmpTaxRegulationDetail
                where tmpTaxRegulationDetail.TaxCode == _summaryTmpTaxRegulation.TaxCode
                    && tmpTaxRegulationDetail.TaxDirection == _summaryTmpTaxRegulation.TaxDirection
                    && tmpTaxRegulationDetail.SourceCurrencyCode == _summaryTmpTaxRegulation.SourceCurrencyCode
                    && tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail
                    && !tmpTaxRegulationDetail.ManualInsertedTax;

            tmpTaxRegulationDetail.ExchangeRateSourceRegulateAmount = _summaryTmpTaxRegulation.ExchangeRateSourceRegulateAmount;
            tmpTaxRegulationDetail.update();
        }
        else
        {
            while select forupdate tmpTaxRegulationDetail
                where tmpTaxRegulationDetail.TaxCode            == _summaryTmpTaxRegulation.TaxCode &&
                    tmpTaxRegulationDetail.TaxDirection         == _summaryTmpTaxRegulation.TaxDirection &&
                    tmpTaxRegulationDetail.SourceCurrencyCode   == _summaryTmpTaxRegulation.SourceCurrencyCode &&
                    tmpTaxRegulationDetail.TaxAdjustmentType    == TaxAdjustmentType::Detail &&
                    !tmpTaxRegulationDetail.ManualInsertedTax
            {
                tmpTaxRegulationDetail.ExchangeRateSourceRegulateAmount = CurrencyExchangeHelper::amount(_summaryTmpTaxRegulation.ExchangeRateSourceRegulateAmount * tmpTaxRegulationDetail.SourceTaxAmountCur / _summaryTmpTaxRegulation.SourceTaxAmountCur, tmpTaxRegulationDetail.SourceCurrencyCode);

                tmpTaxRegulationDetail.update();
                taxAllocated += tmpTaxRegulationDetail.ExchangeRateSourceRegulateAmount;
            }

            if (taxAllocated != _summaryTmpTaxRegulation.ExchangeRateSourceRegulateAmount)
            {
                select firstonly forupdate tmpTaxRegulationDetail
                    where tmpTaxRegulationDetail.TaxCode            == _summaryTmpTaxRegulation.TaxCode &&
                        tmpTaxRegulationDetail.TaxDirection         == _summaryTmpTaxRegulation.TaxDirection &&
                        tmpTaxRegulationDetail.SourceCurrencyCode   == _summaryTmpTaxRegulation.SourceCurrencyCode &&
                        tmpTaxRegulationDetail.TaxAdjustmentType    == TaxAdjustmentType::Detail &&
                        !tmpTaxRegulationDetail.ManualInsertedTax;

                if (tmpTaxRegulationDetail)
                {
                    if (_summaryTmpTaxRegulation.ExchangeRateSourceRegulateAmount > taxAllocated)
                    {
                        tmpTaxRegulationDetail.ExchangeRateSourceRegulateAmount += abs(_summaryTmpTaxRegulation.ExchangeRateSourceRegulateAmount - taxAllocated);
                    }
                    else
                    {
                        tmpTaxRegulationDetail.ExchangeRateSourceRegulateAmount -= abs(_summaryTmpTaxRegulation.ExchangeRateSourceRegulateAmount - taxAllocated);
                    }

                    tmpTaxRegulationDetail.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateExchangeRateTaxAmountCurRegulationSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocates the tax currency specified exchange rate tax adjustment summary to details.
    /// </summary>
    /// <param name="_summaryTmpTaxRegulation">
    /// The tax adjustment summary record.
    /// </param>
    internal void allocateExchangeRateTaxAmountCurRegulationSummary(TmpTaxRegulation _summaryTmpTaxRegulation)
    {
        TaxAmount taxAllocated;

        if (_summaryTmpTaxRegulation.ExchangeRateRegulateAmountCur == 0)
        {
            this.resetExchangeRateRegulateAmountCurDetail(_summaryTmpTaxRegulation);
        }
        else if (_summaryTmpTaxRegulation.SourceTaxAmountCur == 0)
        {
            // allocate to first detail line only when SourceTaxAmountCur is zero
            select firstonly forupdate tmpTaxRegulationDetail
                where tmpTaxRegulationDetail.TaxCode == _summaryTmpTaxRegulation.TaxCode
                    && tmpTaxRegulationDetail.TaxDirection == _summaryTmpTaxRegulation.TaxDirection
                    && tmpTaxRegulationDetail.SourceCurrencyCode == _summaryTmpTaxRegulation.SourceCurrencyCode
                    && tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail
                    && !tmpTaxRegulationDetail.ManualInsertedTax;

            tmpTaxRegulationDetail.ExchangeRateRegulateAmountCur = _summaryTmpTaxRegulation.ExchangeRateRegulateAmountCur;

            tmpTaxRegulationDetail.update();
        }
        else
        {
            while select forupdate tmpTaxRegulationDetail
                where tmpTaxRegulationDetail.TaxCode == _summaryTmpTaxRegulation.TaxCode
                    && tmpTaxRegulationDetail.TaxDirection == _summaryTmpTaxRegulation.TaxDirection
                    && tmpTaxRegulationDetail.SourceCurrencyCode == _summaryTmpTaxRegulation.SourceCurrencyCode
                    && tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail
                    && !tmpTaxRegulationDetail.ManualInsertedTax
            {
                tmpTaxRegulationDetail.ExchangeRateRegulateAmountCur = CurrencyExchangeHelper::amount(
                    _summaryTmpTaxRegulation.ExchangeRateRegulateAmountCur * tmpTaxRegulationDetail.SourceTaxAmountCur / _summaryTmpTaxRegulation.SourceTaxAmountCur,
                    tmpTaxRegulationDetail.SourceCurrencyCode);

                tmpTaxRegulationDetail.update();
                taxAllocated += tmpTaxRegulationDetail.ExchangeRateRegulateAmountCur;
            }

            if (taxAllocated != _summaryTmpTaxRegulation.ExchangeRateRegulateAmountCur)
            {
                select firstonly forupdate tmpTaxRegulationDetail
                    where tmpTaxRegulationDetail.TaxCode == _summaryTmpTaxRegulation.TaxCode
                        && tmpTaxRegulationDetail.TaxDirection == _summaryTmpTaxRegulation.TaxDirection
                        && tmpTaxRegulationDetail.SourceCurrencyCode == _summaryTmpTaxRegulation.SourceCurrencyCode
                        && tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail
                        && !tmpTaxRegulationDetail.ManualInsertedTax;

                if (tmpTaxRegulationDetail)
                {
                    if (_summaryTmpTaxRegulation.ExchangeRateRegulateAmountCur > taxAllocated)
                    {
                        tmpTaxRegulationDetail.ExchangeRateRegulateAmountCur += abs(_summaryTmpTaxRegulation.ExchangeRateRegulateAmountCur - taxAllocated);
                    }
                    else
                    {
                        tmpTaxRegulationDetail.ExchangeRateRegulateAmountCur -= abs(_summaryTmpTaxRegulation.ExchangeRateRegulateAmountCur - taxAllocated);
                    }

                    tmpTaxRegulationDetail.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateExchRateTaxBaseRegulationSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocates the specified exchange rate tax base adjustment summary to details.
    /// </summary>
    /// <param name="_summaryTmpTaxRegulation">
    /// The tax adjustment summary record.
    /// </param>
    public void allocateExchRateTaxBaseRegulationSummary(TmpTaxRegulation _summaryTmpTaxRegulation)
    {
        TaxBase taxBaseAllocated;

        if (_summaryTmpTaxRegulation.ExchangeRateSourceBaseAmountRegulated == 0)
        {
            this.resetExchangeRateTaxBaseRegulationDetail(_summaryTmpTaxRegulation);
        }
        else if (_summaryTmpTaxRegulation.SourceTaxAmountCur == 0
            && TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByTable(headingTableId, headingRecId))
        {
            // allocate to first detail line only when SourceTaxAmountCur is zero
            select firstonly forupdate tmpTaxRegulationDetail
                where tmpTaxRegulationDetail.TaxCode == _summaryTmpTaxRegulation.TaxCode
                    && tmpTaxRegulationDetail.TaxDirection == _summaryTmpTaxRegulation.TaxDirection
                    && tmpTaxRegulationDetail.SourceCurrencyCode == _summaryTmpTaxRegulation.SourceCurrencyCode
                    && tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail
                    && !tmpTaxRegulationDetail.ManualInsertedTax;

            tmpTaxRegulationDetail.ExchangeRateSourceBaseAmountRegulated = _summaryTmpTaxRegulation.ExchangeRateSourceBaseAmountRegulated;
            tmpTaxRegulationDetail.update();
        }
        else
        {
            while select forupdate tmpTaxRegulationDetail
                where tmpTaxRegulationDetail.TaxCode            == _summaryTmpTaxRegulation.TaxCode &&
                    tmpTaxRegulationDetail.TaxDirection         == _summaryTmpTaxRegulation.TaxDirection &&
                    tmpTaxRegulationDetail.SourceCurrencyCode   == _summaryTmpTaxRegulation.SourceCurrencyCode &&
                    tmpTaxRegulationDetail.TaxAdjustmentType    == TaxAdjustmentType::Detail &&
                    !tmpTaxRegulationDetail.ManualInsertedTax
            {
                tmpTaxRegulationDetail.ExchangeRateSourceBaseAmountRegulated = CurrencyExchangeHelper::amount(_summaryTmpTaxRegulation.ExchangeRateSourceBaseAmountRegulated * tmpTaxRegulationDetail.SourceTaxAmountCur / _summaryTmpTaxRegulation.SourceTaxAmountCur, tmpTaxRegulationDetail.SourceCurrencyCode);

                tmpTaxRegulationDetail.update();
                taxBaseAllocated += tmpTaxRegulationDetail.ExchangeRateSourceBaseAmountRegulated;
            }

            if (taxBaseAllocated != _summaryTmpTaxRegulation.ExchangeRateSourceBaseAmountRegulated)
            {
                select firstonly forupdate tmpTaxRegulationDetail
                    where tmpTaxRegulationDetail.TaxCode            == _summaryTmpTaxRegulation.TaxCode &&
                        tmpTaxRegulationDetail.TaxDirection         == _summaryTmpTaxRegulation.TaxDirection &&
                        tmpTaxRegulationDetail.SourceCurrencyCode   == _summaryTmpTaxRegulation.SourceCurrencyCode &&
                        tmpTaxRegulationDetail.TaxAdjustmentType    == TaxAdjustmentType::Detail &&
                        !tmpTaxRegulationDetail.ManualInsertedTax;

                if (tmpTaxRegulationDetail)
                {
                    if (_summaryTmpTaxRegulation.ExchangeRateSourceBaseAmountRegulated > taxBaseAllocated)
                    {
                        tmpTaxRegulationDetail.ExchangeRateSourceBaseAmountRegulated += abs(_summaryTmpTaxRegulation.ExchangeRateSourceBaseAmountRegulated - taxBaseAllocated);
                    }
                    else
                    {
                        tmpTaxRegulationDetail.ExchangeRateSourceBaseAmountRegulated -= abs(_summaryTmpTaxRegulation.ExchangeRateSourceBaseAmountRegulated - taxBaseAllocated);
                    }

                    tmpTaxRegulationDetail.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateExchRateTaxBaseAmountCurRegulationSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocates the tax currency specified exchange rate tax base adjustment summary to details.
    /// </summary>
    /// <param name="_summaryTmpTaxRegulation">
    /// The tax adjustment summary record.
    /// </param>
    internal void allocateExchRateTaxBaseAmountCurRegulationSummary(TmpTaxRegulation _summaryTmpTaxRegulation)
    {
        TaxBase taxBaseAllocated;

        if (_summaryTmpTaxRegulation.ExchangeRateBaseAmountCurRegulated == 0)
        {
            this.resetExchangeRateTaxBaseAmountCurRegulationDetail(_summaryTmpTaxRegulation);
        }
        else if (_summaryTmpTaxRegulation.SourceTaxAmountCur == 0)
        {
            // allocate to first detail line only when SourceTaxAmountCur is zero
            select firstonly forupdate tmpTaxRegulationDetail
                where tmpTaxRegulationDetail.TaxCode == _summaryTmpTaxRegulation.TaxCode
                    && tmpTaxRegulationDetail.TaxDirection == _summaryTmpTaxRegulation.TaxDirection
                    && tmpTaxRegulationDetail.SourceCurrencyCode == _summaryTmpTaxRegulation.SourceCurrencyCode
                    && tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail
                    && !tmpTaxRegulationDetail.ManualInsertedTax;

            tmpTaxRegulationDetail.ExchangeRateBaseAmountCurRegulated = _summaryTmpTaxRegulation.ExchangeRateBaseAmountCurRegulated;

            tmpTaxRegulationDetail.update();
        }
        else
        {
            while select forupdate tmpTaxRegulationDetail
                where tmpTaxRegulationDetail.TaxCode == _summaryTmpTaxRegulation.TaxCode
                    && tmpTaxRegulationDetail.TaxDirection == _summaryTmpTaxRegulation.TaxDirection
                    && tmpTaxRegulationDetail.SourceCurrencyCode == _summaryTmpTaxRegulation.SourceCurrencyCode
                    && tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail
                    && !tmpTaxRegulationDetail.ManualInsertedTax
            {
                tmpTaxRegulationDetail.ExchangeRateBaseAmountCurRegulated = CurrencyExchangeHelper::amount(
                    _summaryTmpTaxRegulation.ExchangeRateBaseAmountCurRegulated * tmpTaxRegulationDetail.SourceTaxAmountCur / _summaryTmpTaxRegulation.SourceTaxAmountCur,
                    tmpTaxRegulationDetail.SourceCurrencyCode);

                tmpTaxRegulationDetail.update();
                taxBaseAllocated += tmpTaxRegulationDetail.ExchangeRateBaseAmountCurRegulated;
            }

            if (taxBaseAllocated != _summaryTmpTaxRegulation.ExchangeRateBaseAmountCurRegulated)
            {
                select firstonly forupdate tmpTaxRegulationDetail
                    where tmpTaxRegulationDetail.TaxCode == _summaryTmpTaxRegulation.TaxCode
                        && tmpTaxRegulationDetail.TaxDirection == _summaryTmpTaxRegulation.TaxDirection
                        && tmpTaxRegulationDetail.SourceCurrencyCode == _summaryTmpTaxRegulation.SourceCurrencyCode
                        && tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail
                        && !tmpTaxRegulationDetail.ManualInsertedTax;

                if (tmpTaxRegulationDetail)
                {
                    if (_summaryTmpTaxRegulation.ExchangeRateBaseAmountCurRegulated > taxBaseAllocated)
                    {
                        tmpTaxRegulationDetail.ExchangeRateBaseAmountCurRegulated += abs(_summaryTmpTaxRegulation.ExchangeRateBaseAmountCurRegulated - taxBaseAllocated);
                    }
                    else
                    {
                        tmpTaxRegulationDetail.ExchangeRateBaseAmountCurRegulated -= abs(_summaryTmpTaxRegulation.ExchangeRateBaseAmountCurRegulated - taxBaseAllocated);
                    }

                    tmpTaxRegulationDetail.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateTaxRegulationSummaryToDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocates the specified tax adjustment summary to details.
    /// </summary>
    /// <param name="_summaryTmpTaxRegulation">
    /// The tax adjustment summary record.
    /// </param>
    private void allocateTaxRegulationSummaryToDetails(TmpTaxRegulation _summaryTmpTaxRegulation)
    {
        TaxAmountCur    taxAllocated, actualTaxAllocated;
        TaxBaseCur      taxBaseAllocated;

        if (_summaryTmpTaxRegulation.SourceTaxAmountCur == 0)
        {
            // allocate to first detail line only when SourceTaxAmountCur is zero
            select firstonly forupdate tmpTaxRegulationDetail
                where tmpTaxRegulationDetail.TaxCode == _summaryTmpTaxRegulation.TaxCode &&
                    tmpTaxRegulationDetail.TaxDirection == _summaryTmpTaxRegulation.TaxDirection &&
                    tmpTaxRegulationDetail.SourceCurrencyCode == _summaryTmpTaxRegulation.SourceCurrencyCode &&
                    tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail &&
                    !tmpTaxRegulationDetail.ManualInsertedTax;

            tmpTaxRegulationDetail.SourceRegulateAmountCur = _summaryTmpTaxRegulation.SourceRegulateAmountCur;
            tmpTaxRegulationDetail.SourceBaseAmountCurRegulated = _summaryTmpTaxRegulation.SourceBaseAmountCurRegulated;
            tmpTaxRegulationDetail.ActualSourceRegulateAmountCur = _summaryTmpTaxRegulation.ActualSourceRegulateAmountCur;

            this.calcTaxInCostPrice(tmpTaxRegulationDetail);

            tmpTaxRegulationDetail.OverrideCalculatedTax = NoYes::Yes;
            tmpTaxRegulationDetail.update();
        }
        else
        {
            while select forupdate tmpTaxRegulationDetail
                where tmpTaxRegulationDetail.TaxCode == _summaryTmpTaxRegulation.TaxCode &&
                    tmpTaxRegulationDetail.TaxDirection == _summaryTmpTaxRegulation.TaxDirection &&
                    tmpTaxRegulationDetail.SourceCurrencyCode == _summaryTmpTaxRegulation.SourceCurrencyCode &&
                    tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail &&
                    !tmpTaxRegulationDetail.ManualInsertedTax
            {
                tmpTaxRegulationDetail.SourceRegulateAmountCur = CurrencyExchangeHelper::amount(
                    _summaryTmpTaxRegulation.SourceRegulateAmountCur * tmpTaxRegulationDetail.SourceTaxAmountCur / _summaryTmpTaxRegulation.SourceTaxAmountCur,
                    tmpTaxRegulationDetail.SourceCurrencyCode);

                tmpTaxRegulationDetail.ActualSourceRegulateAmountCur = CurrencyExchangeHelper::amount(
                    _summaryTmpTaxRegulation.ActualSourceRegulateAmountCur * tmpTaxRegulationDetail.SourceTaxAmountCur / _summaryTmpTaxRegulation.SourceTaxAmountCur,
                    tmpTaxRegulationDetail.SourceCurrencyCode);

                tmpTaxRegulationDetail.SourceBaseAmountCurRegulated = CurrencyExchangeHelper::amount(
                    _summaryTmpTaxRegulation.SourceBaseAmountCurRegulated * tmpTaxRegulationDetail.SourceBaseAmountCur / _summaryTmpTaxRegulation.SourceBaseAmountCur,
                    tmpTaxRegulationDetail.SourceCurrencyCode);

                this.calcTaxInCostPrice(tmpTaxRegulationDetail);

                tmpTaxRegulationDetail.OverrideCalculatedTax = NoYes::Yes;
                tmpTaxRegulationDetail.update();
                taxAllocated += tmpTaxRegulationDetail.SourceRegulateAmountCur;
                actualTaxAllocated += tmpTaxRegulationDetail.ActualSourceRegulateAmountCur;
                taxBaseAllocated += tmpTaxRegulationDetail.SourceBaseAmountCurRegulated;
            }

            if (taxAllocated != _summaryTmpTaxRegulation.SourceRegulateAmountCur ||
                actualTaxAllocated != _summaryTmpTaxRegulation.ActualSourceRegulateAmountCur ||
                taxBaseAllocated != _summaryTmpTaxRegulation.SourceBaseAmountCurRegulated)
            {
                select firstonly forupdate tmpTaxRegulationDetail
                    where tmpTaxRegulationDetail.TaxCode      == _summaryTmpTaxRegulation.TaxCode &&
                        tmpTaxRegulationDetail.TaxDirection == _summaryTmpTaxRegulation.TaxDirection &&
                        tmpTaxRegulationDetail.SourceCurrencyCode == _summaryTmpTaxRegulation.SourceCurrencyCode &&
                        tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail &&
                        !tmpTaxRegulationDetail.ManualInsertedTax;

                if (tmpTaxRegulationDetail)
                {
                    if (_summaryTmpTaxRegulation.SourceRegulateAmountCur > taxAllocated)
                    {
                        tmpTaxRegulationDetail.SourceRegulateAmountCur += abs(_summaryTmpTaxRegulation.SourceRegulateAmountCur - taxAllocated);
                    }
                    else
                    {
                        tmpTaxRegulationDetail.SourceRegulateAmountCur -= abs(_summaryTmpTaxRegulation.SourceRegulateAmountCur - taxAllocated);
                    }
                    if (_summaryTmpTaxRegulation.ActualSourceRegulateAmountCur > actualTaxAllocated)
                    {
                        tmpTaxRegulationDetail.ActualSourceRegulateAmountCur += abs(_summaryTmpTaxRegulation.ActualSourceRegulateAmountCur - actualTaxAllocated);
                    }
                    else
                    {
                        tmpTaxRegulationDetail.ActualSourceRegulateAmountCur -= abs(_summaryTmpTaxRegulation.ActualSourceRegulateAmountCur - actualTaxAllocated);
                    }

                    if (_summaryTmpTaxRegulation.SourceBaseAmountCurRegulated > taxBaseAllocated)
                    {
                        tmpTaxRegulationDetail.SourceBaseAmountCurRegulated += abs(_summaryTmpTaxRegulation.SourceBaseAmountCurRegulated - taxBaseAllocated);
                    }
                    else
                    {
                        tmpTaxRegulationDetail.SourceBaseAmountCurRegulated -= abs(_summaryTmpTaxRegulation.SourceBaseAmountCurRegulated - taxBaseAllocated);
                    }

                    tmpTaxRegulationDetail.OverrideCalculatedTax = NoYes::Yes;
                    this.calcTaxInCostPrice(tmpTaxRegulationDetail);
                    tmpTaxRegulationDetail.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSumsFromTmp</Name>
				<Source><![CDATA[
    public void createSumsFromTmp()
    {
        this.loadTaxRegulationAllAdjustmentTypes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpTaxRegulationDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a tax adjustment detail <c>TmpTaxRegulation</c> record with the specified tax transaction <c>TmpTaxWorkTrans</c> record.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The <c>TmpTaxWorkTrans</c> record.
    /// </param>
    private void createTmpTaxRegulationDetail(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        tmpTaxRegulationDetail.clear();
        tmpTaxRegulationDetail.data(TaxRegulationDetail::initTmpTaxRegulation(_tmpTaxWorkTrans, TaxAdjustmentType::Detail));
        tmpTaxRegulationDetail.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpTaxRegulationSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a tax adjustment summary <c>TmpTaxRegulation</c> record with the specified tax transaction <c>TmpTaxWorkTrans</c> record.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The <c>TmpTaxWorkTrans</c> record.
    /// </param>
    private void createTmpTaxRegulationSummary(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        tmpTaxRegulation.clear();
        tmpTaxRegulation.data(TaxRegulationDetail::initTmpTaxRegulation(_tmpTaxWorkTrans, TaxAdjustmentType::Summary));
        tmpTaxRegulation.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalRegulationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the total regulated amount in the <c>TmpTaxRegulation</c> table.
    /// </summary>
    /// <param name="_tmpTaxRegulation">
    /// The <c>TmpTaxRegulation</c> table to be updated.
    /// </param>
    /// <returns>
    /// The amount of the total tax regulation.
    /// </returns>
    public TaxRegulationAmountCur getTotalRegulationAmount(TmpTaxRegulation _tmpTaxRegulation)
    {
        if (_tmpTaxRegulation.TaxAdjustmentType == TaxAdjustmentType::Summary)
        {
            select sum(SourceRegulateAmountCur) from tmpTaxRegulation
                where tmpTaxRegulation.TaxAdjustmentType == _tmpTaxRegulation.TaxAdjustmentType;

            taxRegulationTotal = tmpTaxRegulation.SourceRegulateAmountCur;
        }
        else if (_tmpTaxRegulation.TaxAdjustmentType == TaxAdjustmentType::Detail)
        {
            select sum(SourceRegulateAmountCur) from tmpTaxRegulationDetail
                where tmpTaxRegulationDetail.TaxAdjustmentType == _tmpTaxRegulation.TaxAdjustmentType;

            taxRegulationTotal = tmpTaxRegulationDetail.SourceRegulateAmountCur;
        }

        return taxRegulationTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActualTotalRegulationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the total regulated amount in the <c>TmpTaxRegulation</c> table.
    /// </summary>
    /// <param name="_tmpTaxRegulation">
    /// The <c>TmpTaxRegulation</c> table to be updated.
    /// </param>
    /// <returns>
    /// The amount of the total tax regulation.
    /// </returns>
    public TaxRegulationAmountCur getActualTotalRegulationAmount(TmpTaxRegulation _tmpTaxRegulation)
    {
        if (_tmpTaxRegulation.TaxAdjustmentType == TaxAdjustmentType::Summary)
        {
            select sum(ActualSourceRegulateAmountCur) from tmpTaxRegulation
                where tmpTaxRegulation.TaxAdjustmentType == _tmpTaxRegulation.TaxAdjustmentType;

            actualTaxRegulationTotal = tmpTaxRegulation.ActualSourceRegulateAmountCur;
        }
        else if (_tmpTaxRegulation.TaxAdjustmentType == TaxAdjustmentType::Detail)
        {
            select sum(ActualSourceRegulateAmountCur) from tmpTaxRegulationDetail
                where tmpTaxRegulationDetail.TaxAdjustmentType == _tmpTaxRegulation.TaxAdjustmentType;

            actualTaxRegulationTotal = tmpTaxRegulationDetail.ActualSourceRegulateAmountCur;
        }

        return actualTaxRegulationTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>actualTaxRegulationTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>actualTaxRegulationTotal</c> value.
    /// </summary>
    /// <returns>
    ///    The value of the <c>actualTaxRegulationTotal</c> variable.
    /// </returns>
    TaxRegulationAmountCur actualTaxRegulationTotal()
    {
        return actualTaxRegulationTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTaxRegulationAllAdjustmentTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads both the summary and detail tax adjustments into the <c>TmpTaxRegulation</c> table.
    /// </summary>
    protected void loadTaxRegulationAllAdjustmentTypes()
    {
        delete_from tmpTaxRegulationDetail;
        delete_from tmpTaxRegulation;
        this.loadTaxRegulationDetails();
        this.loadTaxRegulationSummary();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTaxRegulationDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the detail tax adjustments into the <c>TmpTaxRegulation</c> table.
    /// </summary>
    protected void loadTaxRegulationDetails()
    {
        taxRegulationTotal = 0;
        actualTaxRegulationTotal = 0;

        while select SourceTableId,
                     SourceRecId,
                     ParentSourceTableId,
                     ParentSourceRecId,
                     SourceTaxAmountCur,
                     SourceRegulateAmountCur,
                     TaxInCostPriceRegulated,
                     TaxInCostPrice,
                     SourceBaseAmountCur,
                     SourceBaseAmountCurRegulated,
                     SourceCurrencyCode,
                     TransDate,
                     TaxCode,
                     NegativeTax,
                     ManualInsertedTax,
                     TaxAutogenerated
                     // <GEEU>
                     , ExchangeRateTaxAmount
                     , ExchangeRateTaxBaseAmount
                     , ExchangeRateSourceRegulateAmount
                     , ExchangeRateSourceBaseAmountRegulated
                     , FiscalValue_BR
                     , TaxationCode_BR
                     , TaxationCodeAdj_BR
                     // </GEEU>
                     , ExchangeRateTaxAmountCur
                     , ExchangeRateTaxBaseAmountCur
                     , ExchangeRateRegulateAmountCur
                     , ExchangeRateBaseAmountCurRegulated
                     // <GIN>
                     ,SourceRegulateAmountCustoms_IN
                     ,CustomsDuty_IN
                     // </GIN>
                     from tmpTaxWorkTrans
            order by SourceTableId desc, SourceRecId, TaxCode, SourceCurrencyCode, TaxDirection, ManualInsertedTax, TaxAutogenerated
            where   (!(sourceTableId && sourceRecId) ||
                (tmpTaxWorkTrans.SourceTableId == sourceTableId &&
                    tmpTaxWorkTrans.SourceRecId == sourceRecId) ||
                (tmpTaxWorkTrans.ParentSourceTableId == sourceTableId &&
                    tmpTaxWorkTrans.ParentSourceRecId == sourceRecId) &&
                tmpTaxWorkTrans.Warning == TaxWarning::NoWarning)
        {
            this.createTmpTaxRegulationDetail(tmpTaxWorkTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTaxRegulationSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the summary tax adjustments into the <c>TmpTaxRegulation</c> table.
    /// </summary>
    protected void loadTaxRegulationSummary()
    {
        int sign = 1;

        taxRegulationTotal = 0;
        actualTaxRegulationTotal = 0;

        while select sum(SourceTaxAmountCur),
                     sum(SourceRegulateAmountCur),
                     sum(TaxInCostPriceRegulated),
                     sum(TaxInCostPrice),
                     sum(SourceBaseAmountCur),
                     sum(SourceBaseAmountCurRegulated),
                     // <GEEU>
                     sum(ExchangeRateTaxAmount),
                     sum(ExchangeRateTaxBaseAmount),
                     sum(ExchangeRateSourceRegulateAmount),
                     sum(ExchangeRateSourceBaseAmountRegulated),
                     // </GEEU>
                     sum(ExchangeRateTaxAmountCur),
                     sum(ExchangeRateTaxBaseAmountCur),
                     sum(ExchangeRateRegulateAmountCur),
                     sum(ExchangeRateBaseAmountCurRegulated),
                     SourceCurrencyCode,
                     TransDate,
                     TaxCode,
                     TaxDirection,
                     NegativeTax,
                     ManualInsertedTax,
                     IntracomVAT,
                     //  <GIN>
                     Sum(SourceRegulateAmountCustoms_IN),
                     Sum(CustomsDuty_IN)
                     //</GIN>
                     from tmpTaxWorkTrans
        group by TaxCode, SourceCurrencyCode, TaxDirection, NegativeTax, ManualInsertedTax, IntracomVAT
         where   !(sourceTableId && sourceRecId) ||
                (tmpTaxWorkTrans.SourceTableId == sourceTableId &&
                    tmpTaxWorkTrans.SourceRecId == sourceRecId) ||
                (tmpTaxWorkTrans.ParentSourceTableId == sourceTableId &&
                    tmpTaxWorkTrans.ParentSourceRecId == sourceRecId) &&
                tmpTaxWorkTrans.Warning == TaxWarning::NoWarning
        {
            this.createTmpTaxRegulationSummary(tmpTaxWorkTrans);
            sourceCurrencyCode = tmpTaxWorkTrans.SourceCurrencyCode;
            transDate          = tmpTaxWorkTrans.TransDate;

            if (tmpTaxWorkTrans.isIntracomVAT())
            {
                taxTotal += tmpTaxWorkTrans.SourceTaxAmountCur;
            }
            else 
            {
                sign     = Tax::changeDisplaySign(tmpTaxRegulation.TaxDirection);
                taxTotal += tmpTaxWorkTrans.SourceTaxAmountCur * sign;
            }
            taxRegulationTotal += tmpTaxWorkTrans.SourceRegulateAmountCur * sign;
            actualTaxRegulationTotal = taxRegulationTotal;
            taxLinesExist = true;

            if (TaxParameters::isCustomsEnable_IN())
            {
                totalSourceRegulateAmountCustoms += tmpTaxRegulation.SourceRegulateAmountCustoms_IN;
            }
        }

        update_recordset tmpTaxRegulation
            setting OverrideCalculatedTax = NoYes::No
            where tmpTaxRegulation.TaxAdjustmentType == TaxAdjustmentType::Summary &&
                tmpTaxRegulation.SourceRegulateAmountCur == tmpTaxRegulation.SourceTaxAmountCur &&
                !tmpTaxRegulation.ManualInsertedTax;

        update_recordset tmpTaxRegulation
            setting OverrideCalculatedTax = NoYes::Yes
            where tmpTaxRegulation.TaxAdjustmentType == TaxAdjustmentType::Summary &&
                tmpTaxRegulation.SourceRegulateAmountCur == tmpTaxRegulation.SourceTaxAmountCur
            exists join tmpTaxWorkTrans
            where !(sourceTableId && sourceRecId) ||
                (tmpTaxWorkTrans.SourceTableId == sourceTableId &&
                    tmpTaxWorkTrans.SourceRecId == sourceRecId) ||
                (tmpTaxWorkTrans.ParentSourceTableId == sourceTableId &&
                    tmpTaxWorkTrans.ParentSourceRecId == sourceRecId) &&
                tmpTaxWorkTrans.Warning == TaxWarning::NoWarning &&
                tmpTaxWorkTrans.TaxCode == tmpTaxRegulation.TaxCode &&
                tmpTaxWorkTrans.TaxDirection == tmpTaxRegulation.TaxDirection &&
                tmpTaxWorkTrans.SourceCurrencyCode == tmpTaxRegulation.SourceCurrencyCode &&
                tmpTaxWorkTrans.ManualInsertedTax == tmpTaxRegulation.ManualInsertedTax &&
                !tmpTaxWorkTrans.TaxAutogenerated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetDetailedOverrideCalculatedTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the actual tax amounts to the calculated tax amounts for the specified tax adjustment detail.
    /// </summary>
    /// <param name="_detailTmpTaxRegulation">
    /// The tax adjustment detail record.
    /// </param>
    /// <param name="_ignoreCalculatedTaxForIncomingTax">
    /// A Boolean value that indicates whether the calculated tax amounts are ignored for incoming tax
    /// direction tax.
    /// </param>
    protected void resetDetailedOverrideCalculatedTax(TmpTaxRegulation _detailTmpTaxRegulation, boolean _ignoreCalculatedTaxForIncomingTax)
    {
        TaxRegulationAmountCur  originalTaxAdjustmentAmount, originalActualAdjustmentAmount;
        TaxRegulationAmountCur  newTaxAdjustmentAmount;
        boolean                 isResetOverrideCalculatedTaxNeededForSummary;

        originalTaxAdjustmentAmount = _detailTmpTaxRegulation.SourceRegulateAmountCur;
        originalActualAdjustmentAmount = _detailTmpTaxRegulation.ActualSourceRegulateAmountCur;

        if (_ignoreCalculatedTaxForIncomingTax)
        {
            newTaxAdjustmentAmount = 0;
        }
        else
        {
            newTaxAdjustmentAmount = _detailTmpTaxRegulation.SourceTaxAmountCur;
        }

        _detailTmpTaxRegulation.OverrideCalculatedTax = NoYes::No;
        _detailTmpTaxRegulation.SourceRegulateAmountCur = newTaxAdjustmentAmount;
        _detailTmpTaxRegulation.ActualSourceRegulateAmountCur = newTaxAdjustmentAmount;
        _detailTmpTaxRegulation.update();

        select firstonly tmpTaxRegulationDetail
            where tmpTaxRegulationDetail.RecId != _detailTmpTaxRegulation.RecId &&
                tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail &&
                tmpTaxRegulationDetail.TaxCode == _detailTmpTaxRegulation.TaxCode &&
                tmpTaxRegulationDetail.SourceCurrencyCode == _detailTmpTaxRegulation.SourceCurrencyCode &&
                tmpTaxRegulationDetail.TaxDirection == _detailTmpTaxRegulation.TaxDirection &&
                tmpTaxRegulationDetail.OverrideCalculatedTax == NoYes::Yes;

        if (!tmpTaxRegulationDetail)
        {
            isResetOverrideCalculatedTaxNeededForSummary = true;
        }

        select forupdate tmpTaxRegulation
            where tmpTaxRegulation.TaxAdjustmentType == TaxAdjustmentType::Summary &&
                tmpTaxRegulation.TaxCode == _detailTmpTaxRegulation.TaxCode &&
                tmpTaxRegulation.SourceCurrencyCode == _detailTmpTaxRegulation.SourceCurrencyCode &&
                tmpTaxRegulation.TaxDirection == _detailTmpTaxRegulation.TaxDirection;

        if (isResetOverrideCalculatedTaxNeededForSummary)
        {
            if (_ignoreCalculatedTaxForIncomingTax)
            {
                newTaxAdjustmentAmount = 0;
            }
            else
            {
                newTaxAdjustmentAmount = tmpTaxRegulation.SourceTaxAmountCur;
            }

            tmpTaxRegulation.OverrideCalculatedTax = NoYes::No;
            tmpTaxRegulation.SourceRegulateAmountCur = newTaxAdjustmentAmount;
            tmpTaxRegulation.ActualSourceRegulateAmountCur = newTaxAdjustmentAmount;
        }
        else
        {
            tmpTaxRegulation.SourceRegulateAmountCur += _detailTmpTaxRegulation.SourceRegulateAmountCur - originalTaxAdjustmentAmount;
            tmpTaxRegulation.ActualSourceRegulateAmountCur += _detailTmpTaxRegulation.ActualSourceRegulateAmountCur - originalActualAdjustmentAmount;
        }

        tmpTaxRegulation.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetExchangeRateTaxBaseRegulationDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the actual exchange rate tax base amounts to the zero.
    /// </summary>
    /// <param name="_summaryTmpTaxRegulation">
    /// The tax adjustment summary record.
    /// </param>
    protected void resetExchangeRateTaxBaseRegulationDetail(TmpTaxRegulation _summaryTmpTaxRegulation)
    {
        update_recordset tmpTaxRegulationDetail
            setting ExchangeRateSourceBaseAmountRegulated = 0
            where tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail &&
                tmpTaxRegulationDetail.TaxCode == _summaryTmpTaxRegulation.TaxCode &&
                tmpTaxRegulationDetail.TaxDirection == _summaryTmpTaxRegulation.TaxDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetExchangeRateTaxBaseAmountCurRegulationDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the actual tax currency exchange rate tax base amounts to the zero.
    /// </summary>
    /// <param name="_summaryTmpTaxRegulation">
    /// The tax adjustment summary record.
    /// </param>
    protected void resetExchangeRateTaxBaseAmountCurRegulationDetail(TmpTaxRegulation _summaryTmpTaxRegulation)
    {
        update_recordset tmpTaxRegulationDetail
            setting ExchangeRateBaseAmountCurRegulated = 0
            where tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail &&
                tmpTaxRegulationDetail.TaxCode == _summaryTmpTaxRegulation.TaxCode &&
                tmpTaxRegulationDetail.TaxDirection == _summaryTmpTaxRegulation.TaxDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetExchangeRateTaxRegulationDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the actual exchange rate tax amounts to the zero.
    /// </summary>
    /// <param name="_summaryTmpTaxRegulation">
    /// The tax adjustment summary record.
    /// </param>
    protected void resetExchangeRateTaxRegulationDetail(TmpTaxRegulation _summaryTmpTaxRegulation)
    {
        update_recordset tmpTaxRegulationDetail
            setting ExchangeRateSourceRegulateAmount = 0
            where tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail &&
                tmpTaxRegulationDetail.TaxCode == _summaryTmpTaxRegulation.TaxCode &&
                tmpTaxRegulationDetail.TaxDirection == _summaryTmpTaxRegulation.TaxDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetExchangeRateRegulateAmountCurDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the actual tax currency exchange rate tax amounts to the zero.
    /// </summary>
    /// <param name="_summaryTmpTaxRegulation">
    /// The tax adjustment summary record.
    /// </param>
    protected void resetExchangeRateRegulateAmountCurDetail(TmpTaxRegulation _summaryTmpTaxRegulation)
    {
        update_recordset tmpTaxRegulationDetail
            setting ExchangeRateRegulateAmountCur = 0
            where tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail &&
                tmpTaxRegulationDetail.TaxCode == _summaryTmpTaxRegulation.TaxCode &&
                tmpTaxRegulationDetail.TaxDirection == _summaryTmpTaxRegulation.TaxDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetOverrideCalculatedTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the actual tax amounts to the calculated tax amounts for the specified tax adjustment.
    /// </summary>
    /// <param name="_tmpTaxRegulation">
    /// The tax adjustment record.
    /// </param>
    /// <param name="_ignoreCalculatedTax">
    /// A Boolean value that indicates whether the calculated tax amounts should be ignored.
    /// </param>
    protected void resetOverrideCalculatedTax(TmpTaxRegulation _tmpTaxRegulation, boolean _ignoreCalculatedTax)
    {
        if (_tmpTaxRegulation.TaxAdjustmentType == TaxAdjustmentType::Summary)
        {
            this.resetSummaryOverrideCalculatedTax(_tmpTaxRegulation, _ignoreCalculatedTax);
        }
        else
        {
            this.resetDetailedOverrideCalculatedTax(_tmpTaxRegulation, _ignoreCalculatedTax);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSummaryOverrideCalculatedTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the actual tax amounts to the calculated tax amounts for the specified tax adjustment summary.
    /// </summary>
    /// <param name="_summaryTmpTaxRegulation">
    /// The tax adjustment summary record.
    /// </param>
    /// <param name="_ignoreCalculatedTax">
    /// A Boolean value that indicates whether the calculated tax amounts should be ignored.
    /// </param>
    protected void resetSummaryOverrideCalculatedTax(TmpTaxRegulation _summaryTmpTaxRegulation, boolean _ignoreCalculatedTax)
    {
        if (_ignoreCalculatedTax)
        {
            _summaryTmpTaxRegulation.SourceRegulateAmountCur = 0;
            _summaryTmpTaxRegulation.ActualSourceRegulateAmountCur = 0;

            update_recordset tmpTaxRegulationDetail
                setting OverrideCalculatedTax = NoYes::No,
                    SourceRegulateAmountCur = 0,
                    ActualSourceRegulateAmountCur = 0
                where tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail &&
                    tmpTaxRegulationDetail.TaxCode == _summaryTmpTaxRegulation.TaxCode &&
                    tmpTaxRegulationDetail.TaxDirection == _summaryTmpTaxRegulation.TaxDirection;
        }
        else
        {
            _summaryTmpTaxRegulation.SourceRegulateAmountCur = _summaryTmpTaxRegulation.SourceTaxAmountCur;
            _summaryTmpTaxRegulation.ActualSourceRegulateAmountCur = _summaryTmpTaxRegulation.SourceTaxAmountCur;

            update_recordset tmpTaxRegulationDetail
                setting OverrideCalculatedTax = NoYes::No,
                    SourceRegulateAmountCur = tmpTaxRegulationDetail.SourceTaxAmountCur,
                    ActualSourceRegulateAmountCur = tmpTaxRegulationDetail.SourceTaxAmountCur
                where tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail &&
                    tmpTaxRegulationDetail.TaxCode == _summaryTmpTaxRegulation.TaxCode &&
                    tmpTaxRegulationDetail.TaxDirection == _summaryTmpTaxRegulation.TaxDirection;
        }

        _summaryTmpTaxRegulation.OverrideCalculatedTax = NoYes::No;
        _summaryTmpTaxRegulation.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveTaxRegulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the tax regulation and inserts it into transactions in the <c>TmpTaxWorkTrans</c> table.
    /// </summary>
    /// <param name="_dateOfVATRegister">
    /// The date of the VAT register.
    /// </param>
    /// <param name="_salesTaxExchangeRate">
    /// The sales tax exchange rate.
    /// </param>
    public void saveTaxRegulation(
        TransDate             _dateOfVATRegister = dateNull(),
        CurrencyExchangeRate  _salesTaxExchangeRate = 0.0
        )
    {
        Counter             defaultSign = 1;
        TaxAmountCur        adjustedTaxAmount;
        TaxAmountCur        calculatedTaxAmount;
        TaxWorkRegulation   taxWorkRegulation;
        TaxTable            taxTable;
        Map                 adjustedBasePerSourceLine;
        Map                 calculatedBasePerSourceLine;
        Map                 adjustedTaxPerSourceLine;
        Map                 calculatedTaxPerSourceLine;
        Types               refRecIdType;
        boolean             isTaxIncludedInPrice;
        // <GIN>
        boolean             isCustomsEnabled = TaxParameters::isCustomsEnable_IN();
        boolean             isEximEnabled = TaxParameters::isEximIncentiveSchemEnable_IN();
        boolean             isTaxTypeCustoms;
        Counter             taxAllocatedSign;
        RecId               taxWorkTransRecId;
        TaxAmountCur        taxAmount;
        TaxAmountCur        taxAllocated;
        TaxAmountCur        taxAllocatedCustoms;
        CustomsAmount_IN    totalCustomsAmount;
        CustomsAmount_IN    totalCustomsAmountCur;
        // </GIN>

        // <GEEU>
        boolean isBankExchRateEnabled = TaxParameters::isBankExchRateEnabled_W();
        // </GEEU>

        boolean isTaxSpecificExchRateEnabledByTable = TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByTable(headingTableId, headingRecId);
        isBankExchRateEnabled = isBankExchRateEnabled || isTaxSpecificExchRateEnabledByTable;

        refRecIdType = typeName2Type(extendedTypeStr(RefRecId));

        adjustedBasePerSourceLine = new Map(refRecIdType, Types::Real);
        calculatedBasePerSourceLine = new Map(refRecIdType, Types::Real);
        adjustedTaxPerSourceLine = new Map(refRecIdType, Types::Real);
        calculatedTaxPerSourceLine = new Map(refRecIdType, Types::Real);
        taxRegulationAmountMap = new Map(Types::Container, Types::Real);

        ttsbegin;

        if (tax.allowSingleLineAdjustment())
        {
            // Removes tax adjustments stored at single source line level because tax adjustments at single line level is allowed.

            if (sourceTableId && sourceRecId)
            {
                // Removes tax adjustments for a single source line.
                this.removeTaxRegulationForLine();
            }
            else
            {
                // Removes tax adjustments for the entire document.
                this.removeTaxRegulationForHeader(true);
            }
        }
        else
        {
            this.removeTaxRegulationForHeader(false);
        }

        delete_from tmpTaxWorkTrans
            where tmpTaxWorkTrans.ManualInsertedTax;

        select sum(SourceTaxAmountCur) from tmpTaxWorkTrans;

        if (tmpTaxWorkTrans.SourceTaxAmountCur < 0)
        {
            defaultSign = -1;
        }

        while select tmpTaxRegulation
            where tmpTaxRegulation.ManualInsertedTax &&
                tmpTaxRegulation.TaxAdjustmentType == TaxAdjustmentType::Summary
        {
            tmpTaxWorkTrans.clear();
            tmpTaxWorkTrans.HeadingRecId                 = headingRecId;
            tmpTaxWorkTrans.HeadingTableId               = headingTableId;
            tmpTaxWorkTrans.SourceRecId                  = sourceRecId;
            tmpTaxWorkTrans.SourceTableId                = sourceTableId;
            tmpTaxWorkTrans.TaxCode                      = tmpTaxRegulation.TaxCode;
            tmpTaxWorkTrans.TaxDirection                 = tmpTaxRegulation.TaxDirection;
            tmpTaxWorkTrans.SourceCurrencyCode           = sourceCurrencyCode;
            tmpTaxWorkTrans.TransDate                    = transDate;
            tmpTaxWorkTrans.ManualInsertedTax            = NoYes::Yes;
            if (isCalledFromSalesEditLines)
                tmpTaxWorkTrans.SourceRegulateAmountCur = tmpTaxRegulation.ActualSourceRegulateAmountCur * defaultSign ;
            else
                tmpTaxWorkTrans.SourceRegulateAmountCur = tmpTaxRegulation.SourceRegulateAmountCur * defaultSign ;
            tmpTaxWorkTrans.SourceBaseAmountCurRegulated = tmpTaxRegulation.SourceBaseAmountCurRegulated * defaultSign ;
            tmpTaxWorkTrans.SourceBaseAmountCur = 0;
            tmpTaxWorkTrans.SourceBaseAmountCurRaw = 0;
            tmpTaxWorkTrans.SourceTaxAmountCur = 0;
            tmpTaxWorkTrans.SourceTaxAmountCurReal = 0;
            tmpTaxWorkTrans.TaxBaseQty = 0;
            tmpTaxWorkTrans.TaxInCostPrice = 0;
            tmpTaxWorkTrans.TaxInCostPriceCur = 0;
            tmpTaxWorkTrans.TaxInCostPriceRep = 0;
            tmpTaxWorkTrans.TaxInCostPriceMST = 0;
            tmpTaxWorkTrans.TaxAmount = 0;
            tmpTaxWorkTrans.TaxAmountCur = 0;
            tmpTaxWorkTrans.TaxAmountRep = 0;
            tmpTaxWorkTrans.TaxAutogenerated = !tmpTaxWorkTrans.ManualInsertedTax;
            tmpTaxWorkTrans.InvoiceId = invoiceId;
            this.calcManualInserted(tmpTaxWorkTrans);
            tmpTaxWorkTrans.insert(tax.ignoreCalculatedSalesTax());
        }

        while select forupdate tmpTaxWorkTrans
            where !tmpTaxWorkTrans.ManualInsertedTax &&
                !(sourceTableId && sourceRecId) ||
                (tmpTaxWorkTrans.SourceTableId == sourceTableId &&
                    tmpTaxWorkTrans.SourceRecId == sourceRecId) ||
                (tmpTaxWorkTrans.ParentSourceTableId == sourceTableId &&
                    tmpTaxWorkTrans.ParentSourceRecId == sourceRecId)
            join tmpTaxRegulationDetail
            where tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail &&
                tmpTaxRegulationDetail.TaxCode == tmpTaxWorkTrans.TaxCode &&
                tmpTaxRegulationDetail.TaxDirection == tmpTaxWorkTrans.TaxDirection &&
                tmpTaxRegulationDetail.SourceTableId == tmpTaxWorkTrans.SourceTableId &&
                tmpTaxRegulationDetail.SourceRecId == tmpTaxWorkTrans.SourceRecId &&
                !tmpTaxRegulationDetail.ManualInsertedTax
        {
            Counter     zeroSourceTaxAmountSign = 1;
            if (tmpTaxWorkTrans.SourceTaxAmountCur == 0)
            {
                zeroSourceTaxAmountSign = Tax::changeDisplaySign(tmpTaxWorkTrans.TaxDirection);
            }

            tmpTaxWorkTrans.ManualInsertedTax = NoYes::No;
            tmpTaxWorkTrans.TaxAutogenerated = !tmpTaxRegulationDetail.OverrideCalculatedTax;
            tmpTaxWorkTrans.SourceBaseAmountCurRegulated = tmpTaxRegulationDetail.SourceBaseAmountCurRegulated;

            if (isCalledFromSalesEditLines)
            {
                tmpTaxWorkTrans.SourceRegulateAmountCur = tmpTaxRegulationDetail.ActualSourceRegulateAmountCur;
            }
            else
            {
                tmpTaxWorkTrans.SourceRegulateAmountCur = tmpTaxRegulationDetail.SourceRegulateAmountCur;
            }
            
            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                tmpTaxWorkTrans.TaxationCodeAdj_BR = tmpTaxRegulationDetail.TaxationCodeRegulated_BR;
            }
            // </GBR>

            if (((tmpTaxWorkTrans.SourceTaxAmountCur < 0) &&
                (tmpTaxWorkTrans.SourceRegulateAmountCur > 0)) ||
                ((tmpTaxWorkTrans.SourceTaxAmountCur > 0) &&
                (tmpTaxWorkTrans.SourceRegulateAmountCur < 0)))
            {
                tmpTaxWorkTrans.SourceRegulateAmountCur = -tmpTaxWorkTrans.SourceRegulateAmountCur;
            }
            else if (tmpTaxWorkTrans.SourceTaxAmountCur == 0)
            {
                if (tmpTaxWorkTrans.SourceBaseAmountCur == 0)
                {
                    tmpTaxWorkTrans.SourceRegulateAmountCur = tmpTaxWorkTrans.SourceRegulateAmountCur * tmpTaxWorkTrans.taxChangeDisplaySign(null);
                }
                else if ((tmpTaxWorkTrans.NegativeTax && tmpTaxWorkTrans.SourceRegulateAmountCur * tmpTaxWorkTrans.SourceBaseAmountCur > 0)
                         || (!tmpTaxWorkTrans.NegativeTax && tmpTaxWorkTrans.SourceRegulateAmountCur * tmpTaxWorkTrans.SourceBaseAmountCur < 0))
                {
                    tmpTaxWorkTrans.SourceRegulateAmountCur = -tmpTaxWorkTrans.SourceRegulateAmountCur;
                }
            }

            // <GEEU>
            if (isBankExchRateEnabled)
            {
                tmpTaxWorkTrans.ExchangeRateSourceBaseAmountRegulated = tmpTaxRegulationDetail.ExchangeRateSourceBaseAmountRegulated;
                tmpTaxWorkTrans.ExchangeRateSourceRegulateAmount = tmpTaxRegulationDetail.ExchangeRateSourceRegulateAmount;

                if ((tmpTaxWorkTrans.SourceBaseAmountCur > 0 && tmpTaxWorkTrans.ExchangeRateSourceBaseAmountRegulated < 0) ||
                    (tmpTaxWorkTrans.SourceBaseAmountCur < 0 && tmpTaxWorkTrans.ExchangeRateSourceBaseAmountRegulated > 0))
                {
                    tmpTaxWorkTrans.ExchangeRateSourceBaseAmountRegulated = -tmpTaxWorkTrans.ExchangeRateSourceBaseAmountRegulated;
                }
                else if (tmpTaxRegulation.SourceBaseAmountCur == 0)
                {
                    tmpTaxWorkTrans.ExchangeRateSourceBaseAmountRegulated = tmpTaxWorkTrans.ExchangeRateSourceBaseAmountRegulated * zeroSourceTaxAmountSign;
                }

                if ((tmpTaxWorkTrans.SourceTaxAmountCur < 0 && tmpTaxWorkTrans.ExchangeRateSourceRegulateAmount > 0) ||
                    (tmpTaxWorkTrans.SourceTaxAmountCur > 0 && tmpTaxWorkTrans.ExchangeRateSourceRegulateAmount < 0))
                {
                    tmpTaxWorkTrans.ExchangeRateSourceRegulateAmount = -tmpTaxWorkTrans.ExchangeRateSourceRegulateAmount;
                }
                else if (tmpTaxWorkTrans.SourceTaxAmountCur == 0
                         && ((tmpTaxWorkTrans.NegativeTax && tmpTaxWorkTrans.ExchangeRateSourceRegulateAmount * tmpTaxWorkTrans.SourceBaseAmountCur > 0)
                             || (!tmpTaxWorkTrans.NegativeTax && tmpTaxWorkTrans.ExchangeRateSourceRegulateAmount * tmpTaxWorkTrans.SourceBaseAmountCur < 0)))
                {
                    tmpTaxWorkTrans.ExchangeRateSourceRegulateAmount = -tmpTaxWorkTrans.ExchangeRateSourceRegulateAmount;
                }

                if (isTaxSpecificExchRateEnabledByTable)
                {
                    tmpTaxWorkTrans.ExchangeRateBaseAmountCurRegulated = tmpTaxRegulationDetail.ExchangeRateBaseAmountCurRegulated;
                    tmpTaxWorkTrans.ExchangeRateRegulateAmountCur = tmpTaxRegulationDetail.ExchangeRateRegulateAmountCur;

                    if ((tmpTaxWorkTrans.SourceBaseAmountCur > 0 && tmpTaxWorkTrans.ExchangeRateBaseAmountCurRegulated < 0)
                        || (tmpTaxWorkTrans.SourceBaseAmountCur < 0 && tmpTaxWorkTrans.ExchangeRateBaseAmountCurRegulated > 0))
                    {
                        tmpTaxWorkTrans.ExchangeRateBaseAmountCurRegulated = -tmpTaxWorkTrans.ExchangeRateBaseAmountCurRegulated;
                    }
                    else if (tmpTaxRegulation.SourceBaseAmountCur == 0)
                    {
                        tmpTaxWorkTrans.ExchangeRateBaseAmountCurRegulated = tmpTaxWorkTrans.ExchangeRateBaseAmountCurRegulated * zeroSourceTaxAmountSign;
                    }

                    if ((tmpTaxWorkTrans.SourceTaxAmountCur < 0 && tmpTaxWorkTrans.ExchangeRateRegulateAmountCur > 0)
                        || (tmpTaxWorkTrans.SourceTaxAmountCur > 0 && tmpTaxWorkTrans.ExchangeRateRegulateAmountCur < 0))
                    {
                        tmpTaxWorkTrans.ExchangeRateRegulateAmountCur = -tmpTaxWorkTrans.ExchangeRateRegulateAmountCur;
                    }
                    else if (tmpTaxWorkTrans.SourceTaxAmountCur == 0
                         && ((tmpTaxWorkTrans.NegativeTax && tmpTaxWorkTrans.ExchangeRateRegulateAmountCur * tmpTaxWorkTrans.SourceBaseAmountCur > 0)
                             || (!tmpTaxWorkTrans.NegativeTax && tmpTaxWorkTrans.ExchangeRateRegulateAmountCur * tmpTaxWorkTrans.SourceBaseAmountCur < 0)))
                    {
                        tmpTaxWorkTrans.ExchangeRateRegulateAmountCur = -tmpTaxWorkTrans.ExchangeRateRegulateAmountCur;
                    }
                }
            }
            // </GEEU>

            if (tax.allowAdjustBaseAmountForTaxAdjustment() && tax.getTaxIncludedInItemPrice())
            {
                isTaxIncludedInPrice = true;
                adjustedTaxAmount = tmpTaxWorkTrans.SourceRegulateAmountCur;
                calculatedTaxAmount = tmpTaxWorkTrans.SourceTaxAmountCur;

                if (adjustedTaxPerSourceLine.exists(tmpTaxWorkTrans.SourceRecId))
                {
                    adjustedTaxAmount += adjustedTaxPerSourceLine.lookup(tmpTaxWorkTrans.SourceRecId);
                }

                if (!TaxCalculationAdjustment::isTaxBaseNotAdjustedForUseTax() || (TaxCalculationAdjustment::isTaxBaseNotAdjustedForUseTax() && tmpTaxWorkTrans.TaxDirection != TaxDirection::UseTax))
                {
                    adjustedTaxPerSourceLine.insert(tmpTaxWorkTrans.SourceRecId, adjustedTaxAmount);
                }

                if (calculatedTaxPerSourceLine.exists(tmpTaxWorkTrans.SourceRecId))
                {
                    calculatedTaxAmount += calculatedTaxPerSourceLine.lookup(tmpTaxWorkTrans.SourceRecId);
                }

                if (!TaxCalculationAdjustment::isTaxBaseNotAdjustedForUseTax() || (TaxCalculationAdjustment::isTaxBaseNotAdjustedForUseTax() && tmpTaxWorkTrans.TaxDirection != TaxDirection::UseTax))
                {            
                    calculatedTaxPerSourceLine.insert(tmpTaxWorkTrans.SourceRecId, calculatedTaxAmount);
                }

                taxTable = TaxTable::find(tmpTaxWorkTrans.TaxCode);

                if (taxTable && !taxTable.TaxOnTax && taxTable.TaxBase != TaxBaseType::AmountByUnit)
                {
                    calculatedBasePerSourceLine.insert(tmpTaxWorkTrans.SourceRecId, tmpTaxWorkTrans.SourceBaseAmountCurCalculated);
                    adjustedBasePerSourceLine.insert(tmpTaxWorkTrans.SourceRecId, tmpTaxWorkTrans.SourceBaseAmountCur);
                }
            }

            tmpTaxWorkTrans.adjustTaxInCostPrice();

            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                TaxAdjustmentReportingFields_BR::adjust(tmpTaxWorkTrans, sourceCurrencyCode);
            }
            // </GBR>

            // Set actual sales tax to 0 because we are ignoring calculculated sales tax and no tax adjustment is present.
            if (tax.ignoreCalculatedSalesTax() && tmpTaxWorkTrans.TaxAutogenerated)
            {
                tmpTaxWorkTrans.SourceRegulateAmountCur = 0;
                tmpTaxWorkTrans.TaxAmount = 0;
                tmpTaxWorkTrans.TaxAmountCur = 0;
                tmpTaxWorkTrans.TaxAmountRep = 0;
            }

            tmpTaxWorkTrans.update(tax.ignoreCalculatedSalesTax() && tmpTaxWorkTrans.TaxAutogenerated);
        }

        //<GIN>
        if (isCustomsEnabled && tax.documentStatus_IN() == DocumentStatus::BillOfEntry_IN)
        {
            if (selectedTaxAdjustmentType == TaxAdjustmentType::Summary)
            {
                while select tmpTaxRegulation
                    where tmpTaxRegulation.TaxAdjustmentType == TaxAdjustmentType::Summary
                        && !tmpTaxRegulation.ManualInsertedTax
                {
                    isTaxTypeCustoms            = (TaxTable::find(tmpTaxRegulation.TaxCode).TaxType_IN == TaxType_IN::Customs);
                    taxAllocated                = 0;
                    taxAllocatedCustoms         = 0;
                    taxAmount                   = 0;
                    taxWorkTransRecId           = 0;
                    totalCustomsAmount          = 0;
                    totalCustomsAmountCur       = 0;
                    while select forUpdate tmpTaxWorkTrans
                            where !tmpTaxWorkTrans.ManualInsertedTax
                                && tmpTaxRegulation.TaxCode == tmpTaxWorkTrans.TaxCode
                                && tmpTaxRegulation.TaxDirection == tmpTaxWorkTrans.TaxDirection
                    {
                        if (tmpTaxWorkTrans.EximIncentiveScheme_IN != EximIncentiveScheme_IN::None)
                        {
                            totalCustomsAmount += abs(tmpTaxWorkTrans.EximTaxAmount_IN) + abs(tmpTaxWorkTrans.EximBalanceTaxAmount_IN);
                            totalCustomsAmountCur += abs(tmpTaxWorkTrans.EximTaxAmountCur_IN) + abs(tmpTaxWorkTrans.EximBalanceTaxAmountCur_IN);
                        }
                        else
                        {
                            totalCustomsAmount += abs(tmpTaxWorkTrans.CustomsDuty_IN);
                            totalCustomsAmountCur += abs(tmpTaxWorkTrans.SourceTaxAmountCur);
                        }
                    }

                    while select forUpdate tmpTaxWorkTrans
                            where !tmpTaxWorkTrans.ManualInsertedTax
                                && tmpTaxRegulation.TaxCode == tmpTaxWorkTrans.TaxCode
                                && tmpTaxRegulation.TaxDirection == tmpTaxWorkTrans.TaxDirection
                    {
                        if (tmpTaxRegulation.SourceTaxAmountCur != 0)
                        {
                            tmpTaxWorkTrans.ManualInsertedTax = tmpTaxRegulation.ManualInsertedTax;
                            tmpTaxWorkTrans.TaxAutogenerated = !tmpTaxRegulation.OverrideCalculatedTax;

                            if (isTaxTypeCustoms
                                && (headingTableId == tableNum(PurchParmTable) || headingTableId == tableNum(PurchTable))
                                && tax.documentStatus_IN() == DocumentStatus::BillOfEntry_IN
                                && tmpTaxWorkTrans.EximIncentiveScheme_IN == EximIncentiveScheme_IN::EPCG
                                && tmpTaxWorkTrans.SourceTaxAmountCur != (tmpTaxWorkTrans.EximTaxAmountCur_IN + tmpTaxWorkTrans.EximBalanceTaxAmountCur_IN))
                            {
                                if (isCalledFromSalesEditLines)
                                    tmpTaxWorkTrans.SourceRegulateAmountCur =
                                        CurrencyExchangeHelper::amount(tmpTaxRegulation.ActualSourceRegulateAmountCur * (abs(tmpTaxWorkTrans.EximTaxAmountCur_IN) + abs(tmpTaxWorkTrans.EximBalanceTaxAmountCur_IN)) / totalCustomsAmountCur, tmpTaxRegulation.SourceCurrencyCode);
                                else
                                    tmpTaxWorkTrans.SourceRegulateAmountCur =
                                        CurrencyExchangeHelper::amount(tmpTaxRegulation.SourceRegulateAmountCur * (abs(tmpTaxWorkTrans.EximTaxAmountCur_IN) + abs(tmpTaxWorkTrans.EximBalanceTaxAmountCur_IN)) / totalCustomsAmountCur, tmpTaxRegulation.SourceCurrencyCode);
                                tmpTaxWorkTrans.SourceRegulateAmountCustoms_IN =
                                    CurrencyExchangeHelper::amount(tmpTaxRegulation.SourceRegulateAmountCustoms_IN * (abs(tmpTaxWorkTrans.EximTaxAmount_IN) + abs(tmpTaxWorkTrans.EximBalanceTaxAmount_IN)) / totalCustomsAmount, tmpTaxRegulation.SourceCurrencyCode);
                            }
                            else
                            {
                                if (isCalledFromSalesEditLines)
                                    tmpTaxWorkTrans.SourceRegulateAmountCur =
                                        CurrencyExchangeHelper::amount(tmpTaxRegulation.ActualSourceRegulateAmountCur * abs(tmpTaxWorkTrans.SourceTaxAmountCur) / totalCustomsAmountCur, tmpTaxRegulation.SourceCurrencyCode);
                                else
                                    tmpTaxWorkTrans.SourceRegulateAmountCur =
                                    CurrencyExchangeHelper::amount(tmpTaxRegulation.SourceRegulateAmountCur * abs(tmpTaxWorkTrans.SourceTaxAmountCur) / totalCustomsAmountCur, tmpTaxRegulation.SourceCurrencyCode);

                                if (isTaxTypeCustoms)
                                {
                                    tmpTaxWorkTrans.SourceRegulateAmountCustoms_IN =
                                        CurrencyExchangeHelper::amount(tmpTaxRegulation.SourceRegulateAmountCustoms_IN * abs(tmpTaxWorkTrans.CustomsDuty_IN) / totalCustomsAmount, tmpTaxRegulation.SourceCurrencyCode);
                                }
                            }

                            if (isTaxTypeCustoms && isEximEnabled)
                            {
                                tax.calcCorrectedTaxExim_IN(tmpTaxWorkTrans);
                            }

                            if (abs(tmpTaxWorkTrans.SourceRegulateAmountCur) > taxAmount)
                            {
                                taxAmount = abs(tmpTaxWorkTrans.SourceRegulateAmountCur);
                                taxWorkTransRecId = tmpTaxWorkTrans.RecId;
                            }
                            taxAllocated        += tmpTaxWorkTrans.SourceRegulateAmountCur;
                            taxAllocatedCustoms += tmpTaxWorkTrans.SourceRegulateAmountCustoms_IN;
                            tmpTaxWorkTrans.update(tax.ignoreCalculatedSalesTax() && tmpTaxWorkTrans.TaxAutogenerated);
                        }
                    }

                    // Note: This is to balance the total difference caused by rounding
                    taxAllocatedSign    = taxAllocated < 0 ? -1 : 1;
                    taxAllocated        = abs(taxAllocated);
                    taxAllocatedCustoms = abs(taxAllocatedCustoms);
                    if (taxAllocated != abs(tmpTaxRegulation.SourceRegulateAmountCur))
                    {
                        select forupdate tmpTaxWorkTrans
                            where tmpTaxWorkTrans.RecId      == taxWorkTransRecId;
                        if (isCalledFromSalesEditLines)
                        {
                            if (taxAllocated != abs(tmpTaxRegulation.ActualSourceRegulateAmountCur))
                                tmpTaxWorkTrans.SourceRegulateAmountCur += (abs(tmpTaxRegulation.ActualSourceRegulateAmountCur) - taxAllocated) * taxAllocatedSign;
                        }
                        else
                            tmpTaxWorkTrans.SourceRegulateAmountCur += (abs(tmpTaxRegulation.SourceRegulateAmountCur) - taxAllocated) * taxAllocatedSign;
                        
                        tmpTaxWorkTrans.adjustTaxInCostPrice();
                        tmpTaxWorkTrans.update(tax.ignoreCalculatedSalesTax() && tmpTaxWorkTrans.TaxAutogenerated);
                    }
                    if (taxAllocatedCustoms != abs(tmpTaxRegulation.SourceRegulateAmountCustoms_IN))
                    {
                        select forupdate tmpTaxWorkTrans
                            where tmpTaxWorkTrans.RecId == taxWorkTransRecId;

                        tmpTaxWorkTrans.SourceRegulateAmountCustoms_IN += (abs(tmpTaxRegulation.SourceRegulateAmountCustoms_IN) - taxAllocatedCustoms) * taxAllocatedSign;
                        tmpTaxWorkTrans.update(tax.ignoreCalculatedSalesTax() && tmpTaxWorkTrans.TaxAutogenerated);
                    }
                }
            }
            else
            {
                while select forupdate tmpTaxWorkTrans
                    where !tmpTaxWorkTrans.ManualInsertedTax &&
                        !(sourceTableId && sourceRecId) ||
                        (tmpTaxWorkTrans.SourceTableId == sourceTableId &&
                            tmpTaxWorkTrans.SourceRecId == sourceRecId) ||
                        (tmpTaxWorkTrans.ParentSourceTableId == sourceTableId &&
                            tmpTaxWorkTrans.ParentSourceRecId == sourceRecId)
                    join tmpTaxRegulationDetail
                    where tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail &&
                        tmpTaxRegulationDetail.TaxCode == tmpTaxWorkTrans.TaxCode &&
                        tmpTaxRegulationDetail.TaxDirection == tmpTaxWorkTrans.TaxDirection &&
                        tmpTaxRegulationDetail.SourceTableId == tmpTaxWorkTrans.SourceTableId &&
                        tmpTaxRegulationDetail.SourceRecId == tmpTaxWorkTrans.SourceRecId &&
                        !tmpTaxRegulationDetail.ManualInsertedTax
                {
                    tmpTaxWorkTrans.ManualInsertedTax = NoYes::No;
                    tmpTaxWorkTrans.TaxAutogenerated = !tmpTaxRegulationDetail.OverrideCalculatedTax;
                    tmpTaxWorkTrans.SourceBaseAmountCurRegulated = tmpTaxRegulationDetail.SourceBaseAmountCurRegulated;
                    if (isCalledFromSalesEditLines)
                        tmpTaxWorkTrans.SourceRegulateAmountCur = tmpTaxRegulationDetail.ActualSourceRegulateAmountCur;
                    else
                        tmpTaxWorkTrans.SourceRegulateAmountCur = tmpTaxRegulationDetail.SourceRegulateAmountCur;
                    tmpTaxWorkTrans.SourceRegulateAmountCustoms_IN = tmpTaxRegulationDetail.SourceRegulateAmountCustoms_IN;

                    if (isEximEnabled)
                    {
                        tax.calcCorrectedTaxExim_IN(tmpTaxWorkTrans);
                    }

                    tmpTaxWorkTrans.update(tax.ignoreCalculatedSalesTax() && tmpTaxWorkTrans.TaxAutogenerated);
                }
            }
        }
        //</GIN>

        if (isTaxIncludedInPrice)
        {
            TaxCalculationAdjustment::adjustBaseForAllLines(
                adjustedTaxPerSourceLine,
                calculatedTaxPerSourceLine,
                adjustedBasePerSourceLine,
                calculatedBasePerSourceLine,
                tmpTaxWorkTrans,
                tax);

            TaxCalculationAdjustment::adjustBaseForTaxIncluded(
                tax.getAmountInclTaxMap(),
                adjustedBasePerSourceLine,
                calculatedBasePerSourceLine,
                adjustedTaxPerSourceLine,
                calculatedTaxPerSourceLine,
                tmpTaxWorkTrans,
                tax);
        }

        while select SourceTableId, SourceRecId, TaxCode, TaxDirection, ManualInsertedTax, SourceRegulateAmountCur, SourceBaseAmountCurRegulated
            // <GEEU>
            , ExchangeRateSourceBaseAmountRegulated, ExchangeRateSourceRegulateAmount
            // </GEEU>
            , ExchangeRateBaseAmountCurRegulated, ExchangeRateRegulateAmountCur
            from tmpTaxWorkTrans
            where  !(sourceTableId && sourceRecId) ||
                    (tmpTaxWorkTrans.SourceTableId == sourceTableId &&
                        tmpTaxWorkTrans.SourceRecId == sourceRecId) ||
                    (tmpTaxWorkTrans.ParentSourceTableId == sourceTableId &&
                        tmpTaxWorkTrans.ParentSourceRecId == sourceRecId) &&
                    (tmpTaxWorkTrans.TaxAutogenerated == NoYes::No ||
                        tmpTaxWorkTrans.SourceBaseAmountCurRegulated != 0
                    // <GEEU>
                    || tmpTaxWorkTrans.ExchangeRateSourceBaseAmountRegulated != 0
                    || tmpTaxWorkTrans.ExchangeRateSourceRegulateAmount != 0
                    // </GEEU>
                    || (isTaxSpecificExchRateEnabledByTable
                        && (tmpTaxWorkTrans.ExchangeRateBaseAmountCurRegulated != 0
                            || tmpTaxWorkTrans.ExchangeRateRegulateAmountCur != 0))
                    // <GBR>
                    || (BrazilParameters::isEnabled() && tmpTaxWorkTrans.TaxationCodeAdj_BR)
                    // </GBR>
                    )
        {
            // Records in taxWorkRegulation exist if
            // a) tax amount adjusted by user (TaxAutogenerated is false)
            // b) base amount adjusted by user (SourceBaseAmountCurRegulated is non-zero)
            // User manually inserted lines will fall under condition (a)

            taxWorkRegulation.clear();

            if (tax.allowSingleLineAdjustment())
            {
                // <GIN>
                if (isCustomsEnabled && tax.documentStatus_IN() == DocumentStatus::BillOfEntry_IN)
                {
                    taxWorkRegulation.HeadingTableId                = tmpTaxWorkTrans.ParentSourceTableId;
                    taxWorkRegulation.HeadingRecId                  = tmpTaxWorkTrans.ParentSourceRecId;
                }
                else
                {
                    // </GIN>
                    taxWorkRegulation.HeadingTableId                = tmpTaxWorkTrans.SourceTableId;
                    taxWorkRegulation.HeadingRecId                  = tmpTaxWorkTrans.SourceRecId;
                    // <GIN>
                }
                // </GIN>
            }
            else
            {
                taxWorkRegulation.HeadingTableId                = headingTableId;
                taxWorkRegulation.HeadingRecId                  = headingRecId;
            }

            taxWorkRegulation.TaxCode                       = tmpTaxWorkTrans.TaxCode;
            taxWorkRegulation.TaxDirection                  = tmpTaxWorkTrans.TaxDirection;
            taxWorkRegulation.ManualInsertedTax             = tmpTaxWorkTrans.ManualInsertedTax;
            taxWorkRegulation.SourceBaseAmountCurRegulated  = tmpTaxWorkTrans.SourceBaseAmountCurRegulated;
            if (isCalledFromSalesEditLines)
            {
                taxWorkRegulation.IsCreatedFromUIInDetailedMode = NoYes::Yes;
                taxWorkRegulation.ActualTaxRegulationAmountCur  = tmpTaxWorkTrans.SourceRegulateAmountCur;
                if (taxRegulationAmountMap.exists([taxWorkRegulation.HeadingTableId, taxWorkRegulation.HeadingRecId, taxWorkRegulation.TaxCode]))
                    taxWorkRegulation.TaxRegulationAmountCur = taxRegulationAmountMap.lookup([taxWorkRegulation.HeadingTableId, taxWorkRegulation.HeadingRecId, taxWorkRegulation.TaxCode]);
                else
                    taxWorkRegulation.TaxRegulationAmountCur = tmpTaxWorkTrans.SourceRegulateAmountCur;
            }
            else
            {
                taxWorkRegulation.TaxRegulationAmountCur        = tmpTaxWorkTrans.SourceRegulateAmountCur;
            }
            // <GEEU>
            if (isBankExchRateEnabled)
            {
                taxWorkRegulation.SourceBaseAmountRegulated_W = tmpTaxWorkTrans.ExchangeRateSourceBaseAmountRegulated;
                taxWorkRegulation.SourceRegulateAmount_W = tmpTaxWorkTrans.ExchangeRateSourceRegulateAmount;
                if (isTaxSpecificExchRateEnabledByTable)
                {
                    taxWorkRegulation.ExchangeRateTaxBaseAmountCurRegulated = tmpTaxWorkTrans.ExchangeRateBaseAmountCurRegulated;
                    taxWorkRegulation.ExchangeRateTaxAmountCurRegulated = tmpTaxWorkTrans.ExchangeRateRegulateAmountCur;
                }
            }
            // </GEEU>

            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                taxWorkRegulation.TaxationCodeAdj_BR = tmpTaxWorkTrans.TaxationCodeAdj_BR;
            }
            // </GBR>

            // <GIN>
            if (isCustomsEnabled && tax.documentStatus_IN() == DocumentStatus::BillOfEntry_IN )
            {
                taxWorkRegulation.TaxRegulationAmountCustoms_IN = tmpTaxWorkTrans.SourceRegulateAmountCustoms_IN;
            }
            // <GIN>
            taxWorkRegulation.insert();
        }

        if (tax.useTaxUncommitted())
        {
            tax.updateTaxUncommitted();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDetailedOverrideCalculatedTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the override calculated tax for the specified tax adjustment detail.
    /// </summary>
    /// <param name="_detailTmpTaxRegulation">
    /// The tax adjustment detail record.
    /// </param>
    protected void setDetailedOverrideCalculatedTax(TmpTaxRegulation _detailTmpTaxRegulation)
    {
        _detailTmpTaxRegulation.OverrideCalculatedTax = NoYes::Yes;
        _detailTmpTaxRegulation.update();

        select firstonly tmpTaxRegulationDetail
            where tmpTaxRegulationDetail.RecId != _detailTmpTaxRegulation.RecId &&
                tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail &&
                tmpTaxRegulationDetail.TaxCode == _detailTmpTaxRegulation.TaxCode &&
                tmpTaxRegulationDetail.SourceCurrencyCode == _detailTmpTaxRegulation.SourceCurrencyCode &&
                tmpTaxRegulationDetail.TaxDirection == _detailTmpTaxRegulation.TaxDirection &&
                tmpTaxRegulationDetail.OverrideCalculatedTax == NoYes::No;

        if (!tmpTaxRegulationDetail)
        {
            select forupdate tmpTaxRegulation
                where tmpTaxRegulation.TaxAdjustmentType == TaxAdjustmentType::Summary &&
                    tmpTaxRegulation.TaxCode == _detailTmpTaxRegulation.TaxCode &&
                     tmpTaxRegulation.SourceCurrencyCode == _detailTmpTaxRegulation.SourceCurrencyCode &&
                tmpTaxRegulation.TaxDirection == _detailTmpTaxRegulation.TaxDirection;

            tmpTaxRegulation.OverrideCalculatedTax = NoYes::Yes;
            tmpTaxRegulation.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOverrideCalculatedTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the override calculated tax value for the specified tax adjustment record.
    /// </summary>
    /// <param name="_tmpTaxRegulation">
    /// The tax adjustment record.
    /// </param>
    protected void setOverrideCalculatedTax(TmpTaxRegulation _tmpTaxRegulation)
    {
        if (_tmpTaxRegulation.TaxAdjustmentType == TaxAdjustmentType::Summary)
        {
            this.setSummaryOverrideCalculatedTax(_tmpTaxRegulation);
        }
        else
        {
            this.setDetailedOverrideCalculatedTax(_tmpTaxRegulation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSummaryOverrideCalculatedTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the override calculated tax for the specified tax adjustment summary.
    /// </summary>
    /// <param name="_summaryTmpTaxRegulation">
    /// The tax adjustment summary record.
    /// </param>
    protected void setSummaryOverrideCalculatedTax(TmpTaxRegulation _summaryTmpTaxRegulation)
    {
        _summaryTmpTaxRegulation.OverrideCalculatedTax = NoYes::Yes;
        _summaryTmpTaxRegulation.update();

        update_recordset tmpTaxRegulationDetail
            setting OverrideCalculatedTax = NoYes::Yes
            where tmpTaxRegulationDetail.TaxAdjustmentType == TaxAdjustmentType::Detail &&
                tmpTaxRegulationDetail.TaxCode == _summaryTmpTaxRegulation.TaxCode &&
                tmpTaxRegulationDetail.TaxDirection == _summaryTmpTaxRegulation.TaxDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxRegulationDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the detailed tax adjustments.
    /// </summary>
    /// <returns>
    /// The detailed tax adjustments.
    /// </returns>
    public TmpTaxRegulation tmpTaxRegulationDetail()
    {
        return tmpTaxRegulationDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExchangeRateTaxAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a <c>TmpTaxRegulation</c> record by using <c>TmpTaxWorkTrans</c> records.
    /// </summary>
    void updateExchangeRateTaxAmounts()
    {
        super();

        while select forupdate tmpTaxRegulationDetail
        {
            select sum(ExchangeRateTaxAmount), sum(ExchangeRateTaxBaseAmount)
                from tmpTaxWorkTrans
                where tmpTaxWorkTrans.TaxCode == tmpTaxRegulationDetail.TaxCode &&
                    tmpTaxWorkTrans.SourceTableId == tmpTaxRegulationDetail.SourceTableId &&
                    tmpTaxWorkTrans.SourceRecId == tmpTaxRegulationDetail.SourceRecId &&
                    tmpTaxWorkTrans.TaxDirection == tmpTaxRegulationDetail.TaxDirection &&
                    tmpTaxWorkTrans.SourceCurrencyCode == tmpTaxRegulationDetail.SourceCurrencyCode;

            tmpTaxRegulationDetail.ExchangeRateTaxAmount     = abs(tmpTaxWorkTrans.ExchangeRateTaxAmount);
            tmpTaxRegulationDetail.ExchangeRateTaxBaseAmount = abs(tmpTaxWorkTrans.ExchangeRateTaxBaseAmount);
            tmpTaxRegulationDetail.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExchangeRateTaxAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a <c>TmpTaxRegulation</c> record by using <c>TmpTaxWorkTrans</c> records for tax currency amounts.
    /// </summary>
    internal void updateExchangeRateTaxAmountCur()
    {
        super();

        while select forupdate tmpTaxRegulationDetail
        {
            select sum(ExchangeRateTaxAmountCur), sum(ExchangeRateTaxBaseAmountCur)
                from tmpTaxWorkTrans
                where tmpTaxWorkTrans.TaxCode == tmpTaxRegulationDetail.TaxCode
                    && tmpTaxWorkTrans.SourceTableId == tmpTaxRegulationDetail.SourceTableId
                    && tmpTaxWorkTrans.SourceRecId == tmpTaxRegulationDetail.SourceRecId
                    && tmpTaxWorkTrans.TaxDirection == tmpTaxRegulationDetail.TaxDirection
                    && tmpTaxWorkTrans.SourceCurrencyCode == tmpTaxRegulationDetail.SourceCurrencyCode;

            tmpTaxRegulationDetail.ExchangeRateTaxAmountCur = abs(tmpTaxWorkTrans.ExchangeRateTaxAmountCur);
            tmpTaxRegulationDetail.ExchangeRateTaxBaseAmountCur = abs(tmpTaxWorkTrans.ExchangeRateTaxBaseAmountCur);
            tmpTaxRegulationDetail.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceBaseAmountCurRegulated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the adjusted amount origin for the specified tax adjustment record with the new
    /// adjusted amount origin.
    /// </summary>
    /// <param name="_tmpTaxRegulation">
    /// The tax adjustment record.
    /// </param>
    /// <param name="_newSourceRegulateAmountCurRegulated">
    /// The new adjusted amount origin.
    /// </param>
    public void updateSourceBaseAmountCurRegulated(TmpTaxRegulation _tmpTaxRegulation, TaxBaseCur _newSourceRegulateAmountCurRegulated)
    {
        if (_tmpTaxRegulation.TaxAdjustmentType == TaxAdjustmentType::Summary)
        {
            if (_tmpTaxRegulation.SourceTaxAmountCur)
            {
                // Update summary view actual adjusted amount origin only when the amount can be allocated to details.
                super(_tmpTaxRegulation, _newSourceRegulateAmountCurRegulated);
            }
            this.allocateTaxRegulationSummaryToDetails(_tmpTaxRegulation);
        }
        else
        {
            super(_tmpTaxRegulation, _newSourceRegulateAmountCurRegulated);
            this.addTaxRegulationDetailToSummary(_tmpTaxRegulation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxRegulationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the tax adjustment amount for the specified tax adjustment record with the specified new
    /// tax adjustment amount.
    /// </summary>
    /// <param name="_tmpTaxRegulation">
    /// The tax adjustment record.
    /// </param>
    /// <param name="_newTaxRegulationAmount">
    /// The new tax adjustment amount.
    /// </param>
    /// <param name="_canUpdate">
    /// Specifies whether the table buffer can be updated; optional.
    /// </param>
    public void updateTaxRegulationAmount(TmpTaxRegulation _tmpTaxRegulation, TaxRegulationAmountCur _newTaxRegulationAmount, boolean _canUpdate = true)
    {
        super(_tmpTaxRegulation, _newTaxRegulationAmount, true);

        if (_tmpTaxRegulation.TaxAdjustmentType == TaxAdjustmentType::Summary)
        {
            this.allocateTaxRegulationSummaryToDetails(_tmpTaxRegulation);
        }
        else
        {
            this.addTaxRegulationDetailToSummary(_tmpTaxRegulation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActualTaxRegulationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the tax adjustment amount for the specified tax adjustment record with the specified new
    /// tax adjustment amount.
    /// </summary>
    /// <param name="_tmpTaxRegulation">
    /// The tax adjustment record.
    /// </param>
    /// <param name="_newTaxRegulationAmount">
    /// The new tax adjustment amount.
    /// </param>
    /// <param name="_canUpdate">
    /// Specifies whether the table buffer can be updated; optional.
    /// </param>
    public void updateActualTaxRegulationAmount(TmpTaxRegulation _tmpTaxRegulation, TaxRegulationAmountCur _newTaxRegulationAmount, boolean _canUpdate = true)
    {
        super(_tmpTaxRegulation, _newTaxRegulationAmount, true);

        if (_tmpTaxRegulation.TaxAdjustmentType == TaxAdjustmentType::Summary)
        {
            this.allocateTaxRegulationSummaryToDetails(_tmpTaxRegulation);
        }
        else
        {
            this.addTaxRegulationDetailToSummary(_tmpTaxRegulation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>TaxRegulationDetail</c> class.
    /// </summary>
    /// <returns>
    /// An instance of <c>TaxRegulationDetail</c> class.
    /// </returns>
    public static TaxRegulationDetail construct()
    {
        return new TaxRegulationDetail();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpTaxRegulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>TmpTaxRegulation</c> record from the specified tax transaction
    /// <c>TmpTaxWorkTrans</c> record with the specified tax adjustment type.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The tax transaction record.
    /// </param>
    /// <param name="_taxAdjustmentType">
    /// The tax adjustment type.
    /// </param>
    /// <returns>
    /// An initialized <c>TmpTaxRegulation</c> record.
    /// </returns>
    public static TmpTaxRegulation initTmpTaxRegulation(TmpTaxWorkTrans _tmpTaxWorkTrans, TaxAdjustmentType _taxAdjustmentType)
    {
        TmpTaxRegulation localTmpTaxRegulation;

        localTmpTaxRegulation.TaxAdjustmentType             = _taxAdjustmentType;
        localTmpTaxRegulation.SourceTableId                 = _tmpTaxWorkTrans.SourceTableId;
        localTmpTaxRegulation.SourceRecId                   = _tmpTaxWorkTrans.SourceRecId;
        localTmpTaxRegulation.TaxCode                       = _tmpTaxWorkTrans.TaxCode;
        localTmpTaxRegulation.TaxDirection                  = _tmpTaxWorkTrans.TaxDirection;
        localTmpTaxRegulation.ManualInsertedTax             = _tmpTaxWorkTrans.ManualInsertedTax;
        localTmpTaxRegulation.SourceCurrencyCode            = _tmpTaxWorkTrans.SourceCurrencyCode;
        localTmpTaxRegulation.OverrideCalculatedTax         = !_tmpTaxWorkTrans.TaxAutogenerated;
        localTmpTaxRegulation.SourceBaseAmountCur           = abs(_tmpTaxWorkTrans.SourceBaseAmountCur);
        localTmpTaxRegulation.SourceBaseAmountCurRegulated  = abs(_tmpTaxWorkTrans.SourceBaseAmountCurRegulated);
        localTmpTaxRegulation.SourceLineType                = _tmpTaxWorkTrans.SourceLineType;
        localTmpTaxRegulation.SourceOrderLineNum            = _tmpTaxWorkTrans.SourceOrderLineNum;
        localTmpTaxRegulation.SourceChargeLineNum           = _tmpTaxWorkTrans.SourceChargeLineNum;

        if (_tmpTaxWorkTrans.NegativeTax)
        {
            localTmpTaxRegulation.SourceTaxAmountCur        = abs(_tmpTaxWorkTrans.SourceTaxAmountCur) * -1;
            localTmpTaxRegulation.SourceRegulateAmountCur   = abs(_tmpTaxWorkTrans.SourceRegulateAmountCur) * -1;
            localTmpTaxRegulation.TaxInCostPrice            = abs(_tmpTaxWorkTrans.TaxInCostPrice) * -1;
            localTmpTaxRegulation.TaxInCostPriceRegulated   = abs(_tmpTaxWorkTrans.TaxInCostPriceRegulated) * -1;
            localTmpTaxRegulation.ActualSourceRegulateAmountCur = abs(_tmpTaxWorkTrans.SourceRegulateAmountCur) * -1;
        }
        else
        {
            localTmpTaxRegulation.SourceTaxAmountCur        = abs(_tmpTaxWorkTrans.SourceTaxAmountCur);
            localTmpTaxRegulation.SourceRegulateAmountCur   = abs(_tmpTaxWorkTrans.SourceRegulateAmountCur);
            localTmpTaxRegulation.TaxInCostPrice            = abs(_tmpTaxWorkTrans.TaxInCostPrice);
            localTmpTaxRegulation.TaxInCostPriceRegulated   = abs(_tmpTaxWorkTrans.TaxInCostPriceRegulated);
            localTmpTaxRegulation.ActualSourceRegulateAmountCur = abs(_tmpTaxWorkTrans.SourceRegulateAmountCur);
        }
        // <GEEU>
        boolean isTaxSpecificExchRateEnabledByTable = TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByTable(_tmpTaxWorkTrans.HeadingTableId, _tmpTaxWorkTrans.HeadingRecId);

        if (TaxParameters::isBankExchRateEnabled_W() || isTaxSpecificExchRateEnabledByTable)
        {
            localTmpTaxRegulation.ExchangeRateTaxBaseAmount = abs(_tmpTaxWorkTrans.ExchangeRateTaxBaseAmount);
            localTmpTaxRegulation.ExchangeRateSourceBaseAmountRegulated = abs(_tmpTaxWorkTrans.ExchangeRateSourceBaseAmountRegulated);
            if (isTaxSpecificExchRateEnabledByTable)
            {
                localTmpTaxRegulation.ExchangeRateTaxBaseAmountCur = abs(_tmpTaxWorkTrans.ExchangeRateTaxBaseAmountCur);
                localTmpTaxRegulation.ExchangeRateBaseAmountCurRegulated = abs(_tmpTaxWorkTrans.ExchangeRateBaseAmountCurRegulated);
            }

            if (_tmpTaxWorkTrans.NegativeTax)
            {
                localTmpTaxRegulation.ExchangeRateTaxAmount = abs(_tmpTaxWorkTrans.ExchangeRateTaxAmount) * -1;
                localTmpTaxRegulation.ExchangeRateSourceRegulateAmount  = abs(_tmpTaxWorkTrans.ExchangeRateSourceRegulateAmount) * -1;
                if (isTaxSpecificExchRateEnabledByTable)
                {
                    localTmpTaxRegulation.ExchangeRateTaxAmountCur = abs(_tmpTaxWorkTrans.ExchangeRateTaxAmountCur) * -1;
                    localTmpTaxRegulation.ExchangeRateRegulateAmountCur = abs(_tmpTaxWorkTrans.ExchangeRateRegulateAmountCur) * -1;
                }
            }
            else
            {
                localTmpTaxRegulation.ExchangeRateTaxAmount = abs(_tmpTaxWorkTrans.ExchangeRateTaxAmount);
                localTmpTaxRegulation.ExchangeRateSourceRegulateAmount  = abs(_tmpTaxWorkTrans.ExchangeRateSourceRegulateAmount);
                if (isTaxSpecificExchRateEnabledByTable)
                {
                    localTmpTaxRegulation.ExchangeRateTaxAmountCur = abs(_tmpTaxWorkTrans.ExchangeRateTaxAmountCur);
                    localTmpTaxRegulation.ExchangeRateRegulateAmountCur = abs(_tmpTaxWorkTrans.ExchangeRateRegulateAmountCur);
                }
            }
        }
        // </GEEU>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            localTmpTaxRegulation.TaxFiscalValue_BR          = _tmpTaxWorkTrans.FiscalValue_BR;

            localTmpTaxRegulation.TaxationCodeRegulated_BR   = _tmpTaxWorkTrans.TaxationCodeAdj_BR;
            localTmpTaxRegulation.TaxationCode_BR            = _tmpTaxWorkTrans.TaxationCode_BR;
        }
        // </GBR>

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            localTmpTaxRegulation.SourceRegulateAmountCustoms_IN = _tmpTaxWorkTrans.SourceRegulateAmountCustoms_IN? _tmpTaxWorkTrans.SourceRegulateAmountCustoms_IN:_tmpTaxWorkTrans.CustomsDuty_IN;
        }
        //</GIN>
        return localTmpTaxRegulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customsAllocateAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocating adjusted amount to tmpTaxRegulation.
    /// </summary>
    /// <param name="_customsTaxRegulationAmountCur">
    /// The value to set.
    /// </param>
    /// <param name="_taxRegulationAmountCur">
    /// The value to set.
    /// </param>
    public void customsAllocateAmount_IN(TaxRegulationAmountCur _customsTaxRegulationAmountCur, TaxRegulationAmountCur _taxRegulationAmountCur)
    {
        TaxAmountCur taxAllocated, ActualTaxAllocated;
        TaxAmountCur customsTaxAllocated;
        TaxTable     taxTable;

        super(_customsTaxRegulationAmountCur, _taxRegulationAmountCur);

        if (taxTotal)
        {
            while select forupdate tmpTaxRegulationDetail
                join taxTable
                where taxTable.TaxCode      == tmpTaxRegulationDetail.TaxCode
                   && taxTable.TaxType_IN   == TaxType_IN::Customs
            {
                if (tmpTaxRegulationDetail.ManualInsertedTax == NoYes::No)
                {
                    tmpTaxRegulationDetail.SourceRegulateAmountCur =
                        CurrencyExchangeHelper::amount(_taxRegulationAmountCur * tmpTaxRegulationDetail.SourceTaxAmountCur / taxTotal, tmpTaxRegulationDetail.SourceCurrencyCode);

                    tmpTaxRegulationDetail.ActualSourceRegulateAmountCur =
                        CurrencyExchangeHelper::amount(_taxRegulationAmountCur * tmpTaxRegulationDetail.SourceTaxAmountCur / taxTotal, tmpTaxRegulationDetail.SourceCurrencyCode);

                    tmpTaxRegulationDetail.SourceRegulateAmountCustoms_IN =
                        CurrencyExchangeHelper::amount(_customsTaxRegulationAmountCur * tmpTaxRegulationDetail.SourceTaxAmountCur / taxTotal, tmpTaxRegulationDetail.SourceCurrencyCode);

                    tmpTaxRegulationDetail.OverrideCalculatedTax = NoYes::Yes;
                    this.calcTaxInCostPrice(tmpTaxRegulationDetail);
                    customsTaxAllocated += tmpTaxRegulationDetail.SourceRegulateAmountCustoms_IN;
                    taxAllocated        += tmpTaxRegulationDetail.SourceRegulateAmountCur;
                    ActualTaxAllocated  += tmpTaxRegulationDetail.ActualSourceRegulateAmountCur;
                    tmpTaxRegulationDetail.update();
                }
            }
        }
        if (customsTaxAllocated != _customsTaxRegulationAmountCur)
        {
            select forupdate tmpTaxRegulationDetail
               join taxTable
               where taxTable.TaxCode       == tmpTaxRegulation.TaxCode
                  && taxTable.TaxType_IN    == TaxType_IN::Customs;
            if (tmpTaxRegulationDetail)
            {
                tmpTaxRegulationDetail.SourceRegulateAmountCustoms_IN += _customsTaxRegulationAmountCur - customsTaxAllocated;
                tmpTaxRegulationDetail.SourceRegulateAmountCur        += _taxRegulationAmountCur - taxAllocated;
                tmpTaxRegulationDetail.ActualSourceRegulateAmountCur  += _taxRegulationAmountCur - ActualTaxAllocated;
                tmpTaxRegulationDetail.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRegulateAmount_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates exchange rate source regulate amount
    /// </summary>
    /// <param name = "_sourceTableId">Source table id</param>
    /// <param name = "_sourceRecId">Source recid</param>
    /// <param name = "_tmpTaxWorkTrans">TmpTaxWorkTrans talle buffer</param>
    /// <param name = "_isSum">Summary the amount or not</param>
    /// <remarks>
    /// This method is not only used for Poland now.
    /// When tax specific exchange rate is enabled, it is for all the countries.
    /// </remarks>
    protected void calcRegulateAmount_PL(RefTableId _sourceTableId, RefRecId _sourceRecId, TmpTaxWorkTrans _tmpTaxWorkTrans, boolean _isSum = false)
    {
        super(_sourceTableId, _sourceRecId, _tmpTaxWorkTrans, _isSum);

        boolean isTaxSpecificExchRateEnabledByTable = TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByTable(headingTableId, headingRecId);
        boolean useSalesTaxExchangeRate = TaxParameters::isBankExchRateEnabled_W() || isTaxSpecificExchRateEnabledByTable;

        if ((isTaxSpecificExchRateEnabledByTable && TaxIntegrationTotalTaxAdjWithSpecExchRateFlight::instance().isEnabled())
            || (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) && useSalesTaxExchangeRate))
        {
            this.allocateExchangeRateTaxRegulationSummary(tmpTaxRegulation);
            if (isTaxSpecificExchRateEnabledByTable)
            {
                this.allocateExchangeRateTaxAmountCurRegulationSummary(tmpTaxRegulation);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>