<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesReport_Ranking</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       SalesReport_Ranking
{
    CustInvoiceJour             custInvoiceJour;
    CustInvoiceTrans            custInvoiceTrans;

    TmpAccountSum               sortRecord;
    RecordSortedList            sortArray;

    SalesRanking                outputSorting;
    Counter                     outputQty;

    SalesQty                    qty;
    AmountMST                   revenue;
    SalesContributionMarginMST  contributionMargin;

    AmountMST                   totalrevenue;
    SalesContributionMarginMST  totalContributionMargin;
    SalesQty                    totalQty;

    QueryRun                    queryRun;
    str                         source;

    #Define.Source('SSRS')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new()
    {
        sortArray = new RecordSortedList(tablenum(TmpAccountSum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOutputQty</Name>
				<Source><![CDATA[
    public Counter parmOutputQty(Counter _outputQty = outputQty)
    {
        outputQty = _outputQty;

        return outputQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOutputSorting</Name>
				<Source><![CDATA[
    public SalesRanking parmOutputSorting(SalesRanking _outputSorting = outputSorting)
    {
        outputSorting = _outputSorting;

        return outputSorting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryRun</Name>
				<Source><![CDATA[
    public QueryRun parmQueryRun(QueryRun _queryRun = queryRun)
    {
        queryRun = _queryRun;

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSortRecord</Name>
				<Source><![CDATA[
    Common     parmSortRecord()
    {
        return sortRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSource</Name>
				<Source><![CDATA[
    str parmSource(str _source = source)
    {
        source = _source;

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void  run()
    {
        CustAccount                 oldOrderAccount     = '';
        boolean                     journalFound    = false;

        revenue                     = 0;
        contributionMargin          = 0;
        qty                         = 0;

        totalrevenue                = 0;
        totalContributionMargin     = 0;
        totalQty                    = 0;

        // The switch statement below should be deleted once the SalesReport_Ranking report is removed from AOT.
        // The code will be retained just to avoid the build error for the report
        switch (outputSorting)
        {
            case SalesRanking::Revenue  :   sortArray.sortOrder(fieldnum(TmpAccountSum, Balance01), fieldnum(TmpAccountSum, AccountNum));
                                            break;
            case SalesRanking::Margin   :   sortArray.sortOrder(fieldnum(TmpAccountSum, Balance02), fieldnum(TmpAccountSum, AccountNum));
                                            break;
            case SalesRanking::Qty      :   sortArray.sortOrder(fieldnum(TmpAccountSum, Balance03), fieldnum(TmpAccountSum, AccountNum));
                                            break;
            default                     :   sortArray.sortOrder(fieldnum(TmpAccountSum, AccountNum));
        }

        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(CustTable)))
            {
                if (oldOrderAccount &&  journalFound)
                {
                    this.writeSortArray(oldOrderAccount);
                }
                CustTable custTable = queryRun.get(tablenum(CustTable));
                oldOrderAccount = custTable.AccountNum;
                journalFound = false;
            }

            if (queryRun.changed(tablenum(CustInvoiceJour)))
            {
                journalFound = true;
                custInvoiceJour = queryRun.get(tablenum(CustInvoiceJour));
                qty                 += custInvoiceJour.Qty;
                revenue             += custInvoiceJour.SalesBalanceMST;
                contributionMargin  += custInvoiceJour.contributionMarginMST();
            }

            if (queryRun.changed(tablenum(ProjInvoiceJour)))
            {
                journalFound = true;
                ProjInvoiceJour projInvoiceJour = queryRun.get(tablenum(ProjInvoiceJour));
                qty                 += projInvoiceJour.Qty;
                revenue             += projInvoiceJour.amountMST(projInvoiceJour.SalesOrderbalance);
                contributionMargin  += projInvoiceJour.amountMST(projInvoiceJour.contributionMargin());
            }
        }

        if (oldOrderAccount &&  journalFound)
        {
            this.writeSortArray(oldOrderAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortArray</Name>
				<Source><![CDATA[
    RecordSortedList  sortArray(RecordSortedList  _sortArray = sortArray)
    {
        sortArray = _sortArray;
        return sortArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalContributionMargin</Name>
				<Source><![CDATA[
    SalesContributionMarginMST totalContributionMargin(SalesContributionMarginMST  _totalContributionMargin = totalContributionMargin)
    {
        totalContributionMargin = _totalContributionMargin;
        return totalContributionMargin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalQty</Name>
				<Source><![CDATA[
    SalesQty  totalQty(SalesQty  _totalQty = totalQty)
    {
        totalQty = _totalQty;
        return totalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalRevenue</Name>
				<Source><![CDATA[
    AmountMST  totalRevenue(AmountMST  _totalRevenue = totalRevenue)
    {
        totalRevenue = _totalRevenue;
        return totalRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeSortArray</Name>
				<Source><![CDATA[
    void  writeSortArray(CustAccount  orderAccount)
    {
        totalRevenue                += revenue;
        totalQty                    += qty;
        totalContributionMargin     += contributionMargin;

        sortRecord.AccountNum       = orderAccount;
        sortRecord.Balance01        = (source == #Source ? revenue : -revenue);
        sortRecord.Balance02        = (source == #Source ? contributionMargin : - contributionMargin);
        sortRecord.Balance03        = (source == #Source ? qty : -qty);
        sortRecord.insert();

        sortArray.ins(sortRecord);

        qty                         = 0;
        revenue                     = 0;
        contributionMargin          = 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
