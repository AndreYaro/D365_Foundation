<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttTable_WrkCtrJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GanttTable_WrkCtrJob extends GanttTableBase
{
    GanttTmpWrkCtrJob   ganttTmpWrkCtrJob;
    Map                 mapValidationRecordsProd;
    Map                 mapValidationRecordsPlannedProd;
    Map                 mapValidationRecordsProj;
    Map                 mapWrkCtrSortIndexes;    
    private boolean     isGanttDataWrkCtrOpenSaveMoveFlightEnabled;

    ReqMemoryCacheCrossSessionScope memoryCacheScope = ReqMemoryCacheCrossSessionScope::newDataAreaScope(classstr(GanttTable_WrkCtrJob));

    #timeConstants

    private const WrkCtrLoadPct cacheMissValue = -1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addProdJob2ProdJobSchedulingForm</Name>
				<Source><![CDATA[
    protected void addProdJob2ProdJobSchedulingForm(RecId                   _recId,
                                                    ProdRouteJob            _prodRouteJob,
                                                    ProdMultiSchedulingJob  _prodMultiSchedulingJob,
                                                    SchedDate               _schedDate,
                                                    SchedTime               _schedTime,
                                                    WrkCtrId                _wrkCtrId,
                                                    ProdSchedDirection      _prodSchedDirection = ProdSchedDirection::ForwardFromSchedDate
                                                   )
    {
        ProdParmScheduling prodParmScheduling;
        if (_prodMultiSchedulingJob == null)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        if (!_prodRouteJob.RecId)
        {
            _prodRouteJob = ProdRouteJob::findRecId(_recId);

            if (!_prodRouteJob.RecId)
            {
                throw error(strfmt("@SYS102169", classId2Name(classidget(this))));
            }
        }

        ttsbegin;

        _prodMultiSchedulingJob.insert(_prodRouteJob, prodParmScheduling);

        prodParmScheduling.SchedDirection   = ProdSchedDirection::ForwardFromSchedDate;
        prodParmScheduling.SchedDate        = _schedDate;
        prodParmScheduling.SchedTime        = _schedTime;

        prodParmScheduling.WrkCtrIdSched    = _wrkCtrId;

        prodParmScheduling.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddProdJobDispatchingForm</Name>
				<Source><![CDATA[
    protected boolean canAddProdJobDispatchingForm(GanttTmpWrkCtrJob _ganttTmpWrkCtrJob)
    {
        if (_ganttTmpWrkCtrJob.RefType != WrkCtrCapRefType::Production)
        {
            return false;
        }

        if (!ProdTable::find(_ganttTmpWrkCtrJob.RefId).RecId)
        {
            return false;
        }

        if (_ganttTmpWrkCtrJob.JobFinished)
        {
            return false;
        }

        switch (_ganttTmpWrkCtrJob.JobType)
        {
            case RouteJobType::QueueBefore  :
            case RouteJobType::Overlap      :
            case RouteJobType::Transport    :
            case RouteJobType::QueueAfter   :

                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLoadRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Tests whether the currently selected record can be loaded in the Gantt chart.
    /// </summary>
    /// <returns>
    ///    true if the current record should be loaded in the Gantt chart; otherwise, false.
    /// </returns>
    public boolean canLoadRecord()
    {
        GanttTmpWrkCtrJob localTableWrkCtrJob = this.parmTableBuffer();
        return localTableWrkCtrJob.IsDisplayed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccessRightsPlannedProd</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the current user has sufficient rights to save planned production orders.
    /// </summary>
    /// <returns>
    ///    true if the current user has sufficient rights to save planned production orders; otherwise, false.
    /// </returns>
    protected boolean checkAccessRightsPlannedProd()
    {
        return GanttTable_WrkCtrJob::allowEditPlannedProd(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditPlannedProd</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the current user has sufficient rights to save planned production orders.
    /// </summary>
    /// <param name = "_showWarning">Determines if a warning should be shown in case of no rights; optional.</param>
    /// <returns>
    ///    true if the current user has sufficient rights to save planned production orders; otherwise, false.
    /// </returns>
    public static boolean allowEditPlannedProd(boolean _showWarning = false)
    {
        DictConfigurationKey    dictConfigKeyReq = new DictConfigurationKey(configurationkeynum(Req));

        if (!isConfigurationkeyEnabled(configurationkeynum(Req)))
        {
            if (_showWarning)
            {
                checkFailed(strfmt("@SYS113478", dictConfigKeyReq.label()));
            }
            return false;
        }

        if (!hasTableAccess(tablenum(ReqPO), AccessType::Edit))
        {
            if (_showWarning)
            {
                checkFailed(strfmt("@SYS113477", tableid2name(tablenum(ReqPO))));
            }
            return false;
        }

        if (!hasTableAccess(tablenum(ReqRoute), AccessType::Edit))
        {
            if (_showWarning)
            {
                checkFailed(strfmt("@SYS113477", tableid2name(tablenum(ReqRoute))));
            }
            return false;
        }

        if (!hasTableAccess(tablenum(ReqRouteJob), AccessType::Edit))
        {
            if (_showWarning)
            {
                checkFailed(strfmt("@SYS113477", tableid2name(tablenum(ReqRouteJob))));
            }
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccessRightsProd</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the current user has sufficient rights to save production orders.
    /// </summary>
    /// <returns>
    ///    true if the current user has sufficient rights to save production orders; otherwise, false.
    /// </returns>
    protected boolean checkAccessRightsProd()
    {
        return GanttTable_WrkCtrJob::allowEditProd(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditProd</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the current user has sufficient rights to save production orders.
    /// </summary>
    /// <param name = "_showWarning">Determines if a warning should be shown in case of no rights; optional.</param>
    /// <returns>
    ///    true if the current user has sufficient rights to save production orders; otherwise, false.
    /// </returns>
    public static boolean allowEditProd(boolean _showWarning = false)
    {
        DictConfigurationKey    dictConfigKeyProd = new DictConfigurationKey(configurationkeynum(ProdShop));

        if (!isConfigurationkeyEnabled(configurationkeynum(ProdShop)))
        {
            if (_showWarning)
            {
                checkFailed(strfmt("@SYS113478", dictConfigKeyProd.label()));
            }
            return false;
        }

        if (!hasTableAccess(tablenum(ProdTable), AccessType::Edit))
        {
            if (_showWarning)
            {
                checkFailed(strfmt("@SYS113477", tableid2name(tablenum(ProdTable))));
            }
            return false;
        }

        if (!hasTableAccess(tablenum(ProdRoute), AccessType::Edit))
        {
            if (_showWarning)
            {
                checkFailed(strfmt("@SYS113477", tableid2name(tablenum(ProdRoute))));
            }
            return false;
        }

        if (!hasTableAccess(tablenum(ProdRouteJob), AccessType::Edit))
        {
            if (_showWarning)
            {
                checkFailed(strfmt("@SYS113477", tableid2name(tablenum(ProdRouteJob))));
            }
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccessRightsProj</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the current user has sufficient rights to save project hour forecasts.
    /// </summary>
    /// <returns>
    ///    true if the current user has sufficient rights to save project hour forecasts; otherwise, false.
    /// </returns>
    protected boolean checkAccessRightsProj()
    {
        return GanttTable_WrkCtrJob::allowEditProj(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditProj</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the current user has sufficient rights to save project hour forecasts.
    /// </summary>
    /// <param name = "_showWarning">Determines if a warning should be shown in case of no rights; optional.</param>
    /// <returns>
    ///    true if the current user has sufficient rights to save project hour forecasts; otherwise, false.
    /// </returns>
    public static boolean allowEditProj(boolean _showWarning = false)
    {
        DictConfigurationKey    dictConfigKeyProj = new DictConfigurationKey(configurationkeynum(Project));

        if (!isConfigurationkeyEnabled(configurationkeynum(Project)))
        {
            if (_showWarning)
            {
                checkFailed(strfmt("@SYS113478", dictConfigKeyProj.label()));
            }
            return false;
        }

        if (!hasTableAccess(tablenum(ProjTable), AccessType::Edit))
        {
            if (_showWarning)
            {
                checkFailed(strfmt("@SYS113477", tableid2name(tablenum(ProjTable))));
            }
            return false;
        }

        if (!hasTableAccess(tablenum(ProjForecastEmpl), AccessType::Edit))
        {
            if (_showWarning)
            {
                checkFailed(strfmt("@SYS113477", tableid2name(tablenum(ProjForecastEmpl))));
            }
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGroupingChangesCommonAll</Name>
				<Source><![CDATA[
    protected boolean checkGroupingChangesCommonAll()
    {
        // Check if the production unit has been changed
        if (!this.checkProdUnitNotChanged("@SYS113400"))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGroupingChangesCommonProd</Name>
				<Source><![CDATA[
    protected boolean checkGroupingChangesCommonProd()
    {
        GanttTmpWrkCtrJob   ganttTmpWrkCtrJobBase;
        ganttTmpWrkCtrJobBase = this.ganttTableBaseData().parmTableBuffer();

        // Check if the site has been changed
        if (!this.checkSiteNotChanged("@SYS113401"))
        {
            return false;
        }

        // Check if the operation has been changed
        if (!this.checkOprNotChanged("@SYS113403"))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOprNotChanged</Name>
				<Source><![CDATA[
    protected boolean checkOprNotChanged(str _errorMessage)
    {
        GanttTmpWrkCtrJob   ganttTmpWrkCtrJobBase;
        ganttTmpWrkCtrJobBase = this.ganttTableBaseData().parmTableBuffer();

        if (ganttTmpWrkCtrJob.OprNum != ganttTmpWrkCtrJobBase.OprNum ||
           ganttTmpWrkCtrJob.OprId  != ganttTmpWrkCtrJobBase.OprId)
        {
            return checkFailed(_errorMessage);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProdJobType</Name>
				<Source><![CDATA[
    protected boolean checkProdJobType(ProdJobType  _prodJobType,
                                       RouteGroup   _routeGroup)
    {
        // Activation
        if (!_prodJobType.activation(_routeGroup))
        {
            if (!Box::yesNo(strfmt("@SYS113062", _prodJobType.routeJobType()), DialogButton::Yes, "@SYS7089",""))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProdUnitNotChanged</Name>
				<Source><![CDATA[
    protected boolean checkProdUnitNotChanged(str _errorMessage)
    {
        ProdUnitId prodUnitIdExpected;

        if (isGanttDataWrkCtrOpenSaveMoveFlightEnabled)
        {
            prodUnitIdExpected = WrkCtrTable::getResourceGroupFromCache(WrkCtrTable::find(ganttTmpWrkCtrJob.WrkCtrId), ganttTmpWrkCtrJob.SchedFromDate, ganttTmpWrkCtrJob.SchedToDate).ProdUnitId;
        }
        else
        {
            prodUnitIdExpected = WrkCtrTable::resourceGroup(ganttTmpWrkCtrJob.WrkCtrId, ganttTmpWrkCtrJob.SchedFromDate, ganttTmpWrkCtrJob.SchedToDate).ProdUnitId;
        }

        if (!prodUnitIdExpected)
        {
            prodUnitIdExpected = GanttView::emptyGroupName();
        }

        if (ganttTmpWrkCtrJob.ProdUnitId != prodUnitIdExpected)
        {
            return checkFailed(_errorMessage);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRefNotChanged</Name>
				<Source><![CDATA[
    protected boolean checkRefNotChanged(str _errorMessage)
    {
        GanttTmpWrkCtrJob   ganttTmpWrkCtrJobBase;
        ganttTmpWrkCtrJobBase = this.ganttTableBaseData().parmTableBuffer();

        if (ganttTmpWrkCtrJob.RefId      != ganttTmpWrkCtrJobBase.RefId  ||
           ganttTmpWrkCtrJob.RefStatus  != ganttTmpWrkCtrJobBase.RefStatus)
        {
            return checkFailed(_errorMessage);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSiteNotChanged</Name>
				<Source><![CDATA[
    protected boolean checkSiteNotChanged(str _errorMessage)
    {
        GanttTmpWrkCtrJob   ganttTmpWrkCtrJobBase;
        ganttTmpWrkCtrJobBase = this.ganttTableBaseData().parmTableBuffer();

        if (ganttTmpWrkCtrJob.InventSiteId != ganttTmpWrkCtrJobBase.InventSiteId)
        {
            return checkFailed(_errorMessage);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAllValidationRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the <c>Map</c> with data that is used for validation.
    /// </summary>
    public void clearAllValidationRecords()
    {
        mapValidationRecordsProd        = new Map(Types::Int64, Types::Record);
        mapValidationRecordsPlannedProd = new Map(Types::Int64, Types::Record);
        mapValidationRecordsProj        = new Map(Types::Int64, Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWrkCtrSortOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Computes the order of the work center groups.
    /// </summary>
    public void createWrkCtrSortOrder()
    {
        LineNum             lineNum = 0;
        GanttTmpWrkCtrJob   tmpGanttTmpWrkCtrJob;
        
        mapWrkCtrSortIndexes = new Map(Types::String, Types::Int64);

        ttsbegin;

        lineNum = 0;
        while select forupdate ganttTmpWrkCtrJob
            order by SchedFromDate, SchedFromTime, WrkCtrId
        {
            tmpGanttTmpWrkCtrJob.RecId = ganttTmpWrkCtrJob.RecId;

            recordSortedList.find(tmpGanttTmpWrkCtrJob);

            // assign the work center index to the job
            if (mapWrkCtrSortIndexes.exists(ganttTmpWrkCtrJob.WrkCtrId))
            {
                tmpGanttTmpWrkCtrJob.SchedFromWrkCtrIdSort = mapWrkCtrSortIndexes.lookup(ganttTmpWrkCtrJob.WrkCtrId);
            }
            else
            {
                lineNum ++;
                tmpGanttTmpWrkCtrJob.SchedFromWrkCtrIdSort = lineNum;
                mapWrkCtrSortIndexes.insert(ganttTmpWrkCtrJob.WrkCtrId, lineNum);
            }

            ganttTmpWrkCtrJob.SchedFromWrkCtrIdSort = tmpGanttTmpWrkCtrJob.SchedFromWrkCtrIdSort;
            ganttTmpWrkCtrJob.doUpdate();

            recordSortedList.ins(tmpGanttTmpWrkCtrJob, true);

            // Since this method is run after the base data record is created, that must also be updated so the sort field is available for undo
            GanttTableBase tableBase = this.ganttTableBaseData();
            if (tableBase)
            {
                tableBase.updateField(ganttTmpWrkCtrJob.RecId, fieldStr(ganttTmpWrkCtrJob, SchedFromWrkCtrIdSort), tmpGanttTmpWrkCtrJob.SchedFromWrkCtrIdSort);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWrkCtrIdSort</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sorting value for a resource.
    /// </summary>
    /// <param name = "_wrkCtrId">The resource to get the value for.</param>
    /// <returns>The sorting value for the resource.</returns>
    public LineNum getWrkCtrIdSort(WrkCtrId _wrkCtrId)
    {
        LineNum result = 0;
        
        if (mapWrkCtrSortIndexes)
        {
            if (mapWrkCtrSortIndexes.exists(_wrkCtrId))
            {
                result = mapWrkCtrSortIndexes.lookup(_wrkCtrId);
            }
        }
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existWrkCtrJobs</Name>
				<Source><![CDATA[
    public boolean existWrkCtrJobs(WrkCtrId _wrkCtrId, WrkCtrGroupId _wrkCtrGroupId)
    {
        GanttTmpWrkCtrJob ganttTmpWrkCtrJobTmp;

        ganttTmpWrkCtrJobTmp.setTmpData(ganttTmpWrkCtrJob);

        select firstonly ganttTmpWrkCtrJobTmp
            where ganttTmpWrkCtrJobTmp.WrkCtrId         == _wrkCtrId
               && ganttTmpWrkCtrJobTmp.WrkCtrGroupId    == _wrkCtrGroupId;

        return ganttTmpWrkCtrJobTmp.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarName</Name>
				<Source><![CDATA[
    public GanttCalendarId getCalendarName(GanttCalendarId _preferredCalendarName)
    {
        GanttTmpWrkCtrJob localTableWrkCtrJob = this.parmTableBuffer();
        GanttCalendarId calendarId;
        switch (localTableWrkCtrJob.RefType)
        {
            case WrkCtrCapRefType::Production   :

                calendarId = this.getCalendarNameFromProdRouteJob(this.prodRouteJob(), null, _preferredCalendarName);
                break;

            case WrkCtrCapRefType::PlannedOrder :

                calendarId = this.getCalendarNameFromReqRouteJob(this.reqRouteJob(), null, _preferredCalendarName);
                break;

            case WrkCtrCapRefType::Project      :

                if (_preferredCalendarName)
                {
                    calendarId  = _preferredCalendarName;
                }
                else
                {
                    calendarId  = ganttTmpWrkCtrJob.WrkCtrId;
                }
                break;

            default                             :
                throw error(strfmt("@SYS26908", ganttTmpWrkCtrJob.RefType));
        }

        return calendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarNameFromProdRouteJob</Name>
				<Source><![CDATA[
    protected GanttCalendarId getCalendarNameFromProdRouteJob(ProdRouteJob      _prodRouteJob           = this.prodRouteJob(),
                                                              ProdRoute         _prodRoute              = null,  // set for better performance
                                                              GanttCalendarId   _preferredCalendarName  = '')
    {
        if (this.scheduleWorkTimeProd(_prodRouteJob, _prodRoute))
        {
            if (_preferredCalendarName)
            {
                return _preferredCalendarName;
            }
            else
            {
                return _prodRouteJob.WrkCtrId;
            }
        }

        return GanttCalendar::calendarNameAllDaysOpen();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarNameFromReqRouteJob</Name>
				<Source><![CDATA[
    protected internal GanttCalendarId getCalendarNameFromReqRouteJob(ReqRouteJob        _reqRouteJob            = this.reqRouteJob(),
                                                                      ReqRoute           _reqRoute               = null, // set for better performance
                                                                      GanttCalendarId    _preferredCalendarName  = '')
    {
        if (this.scheduleWorkTimePlannedProd(_reqRouteJob, _reqRoute))
        {
            if (_preferredCalendarName)
            {
                return _preferredCalendarName;
            }
            else
            {
                return _reqRouteJob.WrkCtrId;
            }
        }

        return GanttCalendar::calendarNameAllDaysOpen();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigRecord</Name>
				<Source><![CDATA[
    public Common getOrigRecord(boolean _forUpdate              = false,
                                boolean _throwErrorIfNotFound   = false)
    {
        RecId   recId = this.origRecId();
        Common  record;
        GanttTmpWrkCtrJob localTableWrkCtrJob = this.parmTableBuffer();

        switch (localTableWrkCtrJob.RefType)
        {
            case WrkCtrCapRefType::Production   :

                record = ProdRouteJob::findRecId(recId, _forUpdate);

                if (!record.RecId && _throwErrorIfNotFound)
                {
                    throw error(strfmt("@SYS113059", ganttTmpWrkCtrJob.JobId, ganttTmpWrkCtrJob.RefId));
                }
                break;

            case WrkCtrCapRefType::PlannedOrder :

                record = ReqRouteJob::findRecId(recId, _forUpdate);

                if (!record.RecId && _throwErrorIfNotFound)
                {
                    throw error(strfmt("@SYS113078", recId, ganttTmpWrkCtrJob.RefId));
                }

                break;

            case WrkCtrCapRefType::Project      :

                record = ProjForecastEmpl::findRecId(recId, _forUpdate);

                if (!record.RecId && _throwErrorIfNotFound)
                {
                    throw error(strfmt("@SYS113080", recId, tablepname(ProjForecastEmpl)));
                }

                break;

            default:
                throw error("@SYS70859");
        }

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>goToPlannedProd</Name>
				<Source><![CDATA[
    public void goToPlannedProd()
    {
        ReqPO           reqPO;

        Args            args = new Args();
        MenuFunction    menuFunction;
        if (!ganttTmpWrkCtrJob.RecId)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        if (ganttTmpWrkCtrJob.RefType != WrkCtrCapRefType::PlannedOrder)
        {
            throw error(strfmt("@SYS113113", ganttTmpWrkCtrJob.RefType, WrkCtrCapRefType::PlannedOrder));
        }

        reqPO = ReqPO::find(
            ganttTmpWrkCtrJob.reqPlan().findActiveVersion().RecId,
            ganttTmpWrkCtrJob.RefId);

        if (reqPO.RecId)
        {
            args.caller(this);
            args.record(reqPO);

            menuFunction = new MenuFunction(menuitemdisplaystr(ReqTransPoProd), MenuItemType::Display);
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>goToPlannedProdJob</Name>
				<Source><![CDATA[
    public void goToPlannedProdJob()
    {
        ReqRouteJob     reqRouteJob;

        Args            args = new Args();
        MenuFunction    menuFunction;
        if (!ganttTmpWrkCtrJob.RecId)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        if (ganttTmpWrkCtrJob.RefType != WrkCtrCapRefType::PlannedOrder)
        {
            throw error(strfmt("@SYS113113", ganttTmpWrkCtrJob.RefType, WrkCtrCapRefType::PlannedOrder));
        }

        reqRouteJob = this.getOrigRecord(false, true);

        if (reqRouteJob.RecId)
        {
            args.record(reqRouteJob);

            menuFunction = new MenuFunction(menuitemdisplaystr(ReqRouteJobs), MenuItemType::Display);
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>goToPlannedProdRoute</Name>
				<Source><![CDATA[
    public void goToPlannedProdRoute()
    {
        ReqRouteJob reqRouteJob;
        ReqRoute    reqRoute;

        Args            args = new Args();
        MenuFunction    menuFunction;
        if (!ganttTmpWrkCtrJob.RecId)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        if (ganttTmpWrkCtrJob.RefType != WrkCtrCapRefType::PlannedOrder)
        {
            throw error(strfmt("@SYS113113", ganttTmpWrkCtrJob.RefType, WrkCtrCapRefType::PlannedOrder));
        }

        reqRouteJob = this.getOrigRecord(false, true);

        reqRoute    = reqRouteJob.reqRoute();

        if (reqRoute.RecId)
        {
            args.record(reqRoute);

            menuFunction = new MenuFunction(menuitemdisplaystr(ReqRoute), MenuItemType::Display);
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>goToProd</Name>
				<Source><![CDATA[
    public void goToProd()
    {
        ProdTable       prodTable;

        Args            args = new Args();
        MenuFunction    menuFunction;
        if (!ganttTmpWrkCtrJob.RecId)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        if (ganttTmpWrkCtrJob.RefType != WrkCtrCapRefType::Production)
        {
            throw error(strfmt("@SYS113113", ganttTmpWrkCtrJob.RefType, WrkCtrCapRefType::Production));
        }

        prodTable = ProdTable::find(ganttTmpWrkCtrJob.RefId);

        if (prodTable.RecId)
        {
            args.record(prodTable);

            menuFunction = new MenuFunction(menuitemdisplaystr(ProdTable), MenuItemType::Display);
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>goToProdJob</Name>
				<Source><![CDATA[
    public void goToProdJob()
    {
        ProdRouteJob    prodRouteJob;

        Args            args = new Args();
        MenuFunction    menuFunction;
        if (!ganttTmpWrkCtrJob.RecId)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        if (ganttTmpWrkCtrJob.RefType != WrkCtrCapRefType::Production)
        {
            throw error(strfmt("@SYS113113", ganttTmpWrkCtrJob.RefType, WrkCtrCapRefType::Production));
        }

        prodRouteJob = this.getOrigRecord(false, true);

        if (prodRouteJob.RecId)
        {
            args.record(prodRouteJob);

            menuFunction = new MenuFunction(menuitemdisplaystr(ProdRouteJob), MenuItemType::Display);
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>goToProdRoute</Name>
				<Source><![CDATA[
    public void goToProdRoute()
    {
        ProdRouteJob    prodRouteJob;
        ProdRoute       prodRoute;

        Args            args = new Args();
        MenuFunction    menuFunction;
        if (!ganttTmpWrkCtrJob.RecId)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        if (ganttTmpWrkCtrJob.RefType != WrkCtrCapRefType::Production)
        {
            throw error(strfmt("@SYS113113", ganttTmpWrkCtrJob.RefType, WrkCtrCapRefType::Production));
        }

        prodRouteJob    = this.getOrigRecord(false, true);

        prodRoute       = ProdRoute::find(prodRouteJob.ProdId, prodRouteJob.OprNum, prodRouteJob.OprPriority);

        if (prodRoute.RecId)
        {
            args.record(prodRoute);

            menuFunction = new MenuFunction(menuitemdisplaystr(ProdRoute), MenuItemType::Display);
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>goToProj</Name>
				<Source><![CDATA[
    public void goToProj()
    {
        ProjTable       projTable;

        Args            args = new Args();
        MenuFunction    menuFunction;
        if (!ganttTmpWrkCtrJob.RecId)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        if (ganttTmpWrkCtrJob.RefType != WrkCtrCapRefType::Project)
        {
            throw error(strfmt("@SYS113113", ganttTmpWrkCtrJob.RefType, WrkCtrCapRefType::Project));
        }

        projTable = ProjTable::find(ganttTmpWrkCtrJob.RefId);

        if (projTable.RecId)
        {
            args.refField(fieldnum(ProjTable, ProjId));
            args.record(projTable);

            menuFunction = new MenuFunction(menuitemdisplaystr(ProjTableMain), MenuItemType::Display);
            menuFunction.openMode(OpenMode::Edit);
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>goToProjJob</Name>
				<Source><![CDATA[
    public void goToProjJob()
    {
        ProjForecastEmpl    projForecastEmpl;

        Args                args = new Args();
        MenuFunction        menuFunction;
        if (!ganttTmpWrkCtrJob.RecId)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        if (ganttTmpWrkCtrJob.RefType != WrkCtrCapRefType::Project)
        {
            throw error(strfmt("@SYS113113", ganttTmpWrkCtrJob.RefType, WrkCtrCapRefType::Project));
        }

        projForecastEmpl = ProjForecastEmpl::findRecId(str2recId(ganttTmpWrkCtrJob.JobId));

        if (projForecastEmpl.RecId)
        {
            args.caller(this);
            args.record(projForecastEmpl);

            menuFunction = new MenuFunction(menuitemdisplaystr(projForecastEmpl), MenuItemType::Display);
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultFieldCollection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets up the field collection properties and field properties for the work center jobs temporary
    ///    table.
    /// </summary>
    /// <remarks>
    ///    The fields which are not to be displayed in the ActiveX are added here to the
    ///    <c>setExcludeFieldIds</c>.Also the <see cref="M:GanttTableField.parmEnum2Integer" /> conversion
    ///    flag is initialized for the relevant fields.
    /// </remarks>
    public void initDefaultFieldCollection()
    {
        List    listFields;
        Set     setExcludeFieldIds = new Set(Types::Integer);
        setExcludeFieldIds.add(fieldnum(GanttTmpWrkCtrJob, NumPrimary));
        setExcludeFieldIds.add(fieldnum(GanttTmpWrkCtrJob, NumSecondary));
        setExcludeFieldIds.add(fieldnum(GanttTmpWrkCtrJob, OprNumNext));
        setExcludeFieldIds.add(fieldnum(GanttTmpWrkCtrJob, JobFinished));
        setExcludeFieldIds.add(fieldnum(GanttTmpWrkCtrJob, Link));
        setExcludeFieldIds.add(fieldnum(GanttTmpWrkCtrJob, ProjLineNum));
        setExcludeFieldIds.add(fieldnum(GanttTmpWrkCtrJob, JobType));
        setExcludeFieldIds.add(fieldnum(GanttTmpWrkCtrJob, IsDisplayed));
        setExcludeFieldIds.add(fieldnum(GanttTmpWrkCtrJob, Highlighted));

        listFields = GanttTableFieldCollection::listDefaultFields(this.tableId(), setExcludeFieldIds);

        this.fieldCollection().createFromList(listFields);

        // OprPriority field
        this.fieldCollection().findFieldName(fieldstr(GanttTmpWrkCtrJob, OprPriority),
                                             true,
                                             tablestr(GanttTmpWrkCtrJob)).parmEnum2Integer(true);
        // Marked field
        this.fieldCollection().findFieldName(fieldstr(GanttTmpWrkCtrJob, Marked),
                                             true,
                                             tablestr(GanttTmpWrkCtrJob)).parmEnum2Integer(true);
        // ShowCompletion field
        this.fieldCollection().findFieldName(fieldstr(GanttTmpWrkCtrJob, ShowCompletion),
                                             true,
                                             tablestr(GanttTmpWrkCtrJob)).parmEnum2Integer(true);
        // ShowRefDeliveryDate field
        this.fieldCollection().findFieldName(fieldstr(GanttTmpWrkCtrJob, ShowRefDeliveryDate),
                                             true,
                                             tablestr(GanttTmpWrkCtrJob)).parmEnum2Integer(true);

        // Late field
        this.fieldCollection().findFieldName(fieldstr(GanttTmpWrkCtrJob, ShowLate),
                                             true,
                                             tablestr(GanttTmpWrkCtrJob)).parmEnum2Integer(true);

        // ReserveCapacity field
        this.fieldCollection().findFieldName(fieldstr(GanttTmpWrkCtrJob, ReserveCapacity),
                                             true,
                                             tablestr(GanttTmpWrkCtrJob)).parmEnum2Integer(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmptyGroupNames</Name>
				<Source><![CDATA[
    public void initEmptyGroupNames()
    {
        str emptyGroupName = GanttView::emptyGroupName();
        if (!ganttTmpWrkCtrJob.InventSiteId)
        {
            ganttTmpWrkCtrJob.InventSiteId  = emptyGroupName;
        }

        if (!ganttTmpWrkCtrJob.RefStatus)
        {
            ganttTmpWrkCtrJob.RefStatus     = emptyGroupName;
        }

        if (!ganttTmpWrkCtrJob.RefId)
        {
            ganttTmpWrkCtrJob.RefId         = emptyGroupName;
        }

        if (!ganttTmpWrkCtrJob.ProdUnitId)
        {
            ganttTmpWrkCtrJob.ProdUnitId    = emptyGroupName;
        }

        if (!ganttTmpWrkCtrJob.WrkCtrGroupId)
        {
            ganttTmpWrkCtrJob.WrkCtrGroupId = emptyGroupName;
        }

        if (!ganttTmpWrkCtrJob.WrkCtrId)
        {
            ganttTmpWrkCtrJob.WrkCtrId      = emptyGroupName;
        }

        if (!ganttTmpWrkCtrJob.OprId)
        {
            ganttTmpWrkCtrJob.OprId         = emptyGroupName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromGanttColor</Name>
				<Source><![CDATA[
    public void initFromGanttColor(GanttColor_WrkCtr _ganttColor)
    {
        GanttTable_wrkCtrJob::initRecordFromGanttColor(ganttTmpWrkCtrJob, _ganttColor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordFromGanttColor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the color field on a temp record.
    /// </summary>
    /// <param name = "_ganttTmpWrkCtrJob">The record to set the color on.</param>
    /// <param name = "_ganttColor">The color settings.</param>
    private static void initRecordFromGanttColor(ganttTmpWrkCtrJob _ganttTmpWrkCtrJob, GanttColor_WrkCtr _ganttColor)
    {
        _ganttTmpWrkCtrJob.Color = _ganttColor.getNodeColor(tablestr(GanttTmpWrkCtrJob),
                                                           _ganttTmpWrkCtrJob.RecId,
                                                           _ganttTmpWrkCtrJob);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateColorOnAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the color on all temp records.
    /// </summary>
    /// <param name = "_ganttColor">The color settings to apply.</param>
    public void updateColorOnAll(GanttColor_WrkCtr _ganttColor)
    {
        ttsbegin;

        while select ganttTmpWrkCtrJob
        {
            GanttTable_wrkCtrJob::initRecordFromGanttColor(ganttTmpWrkCtrJob, _ganttColor);
            ganttTmpWrkCtrJob.update();

            // Also need to update the in-memory list
            recordSortedList.ins(ganttTmpWrkCtrJob, true);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromGanttSetup</Name>
				<Source><![CDATA[
    public void initFromGanttSetup(GanttSetup_WrkCtr _ganttSetup)
    {
        switch (ganttTmpWrkCtrJob.RefType)
        {
            case WrkCtrCapRefType::Production:
                this.initFromGanttSetupProd(_ganttSetup);
                break;

            case WrkCtrCapRefType::PlannedOrder:
                this.initFromGanttSetupPlannedProd(_ganttSetup);
                break;

            case WrkCtrCapRefType::Project:
                this.initFromGanttSetupProj(_ganttSetup);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromGanttSetupPlannedProd</Name>
				<Source><![CDATA[
    protected void initFromGanttSetupPlannedProd(GanttSetup_WrkCtr _ganttSetup)
    {
        if (_ganttSetup.parmShowLateJobs())
        {
            ganttTmpWrkCtrJob.ShowLate  = NoYes::Yes;
        }
        else
        {
            ganttTmpWrkCtrJob.ShowLate  = NoYes::No;
        }

        ganttTmpWrkCtrJob.ShowRefDeliveryDate   = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromGanttSetupProd</Name>
				<Source><![CDATA[
    protected void initFromGanttSetupProd(GanttSetup_WrkCtr _ganttSetup)
    {
        if (_ganttSetup.parmShowProdJobCompletion())
        {
            ganttTmpWrkCtrJob.ShowCompletion = NoYes::Yes;
        }
        else
        {
            ganttTmpWrkCtrJob.ShowCompletion = NoYes::No;
        }

        if (_ganttSetup.parmShowLateJobs())
        {
            ganttTmpWrkCtrJob.ShowLate = NoYes::Yes;
        }
        else
        {
            ganttTmpWrkCtrJob.ShowLate = NoYes::No;
        }

        ganttTmpWrkCtrJob.ShowRefDeliveryDate = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromGanttSetupProj</Name>
				<Source><![CDATA[
    protected void initFromGanttSetupProj(GanttSetup_WrkCtr _ganttSetup)
    {
        if (_ganttSetup.parmShowLateJobs())
        {
            ganttTmpWrkCtrJob.ShowLate = NoYes::Yes;
        }
        else
        {
            ganttTmpWrkCtrJob.ShowLate = NoYes::No;
        }

        ganttTmpWrkCtrJob.ShowRefDeliveryDate = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdRoute</Name>
				<Source><![CDATA[
    public void initFromProdRoute(ProdRoute _prodRoute)
    {
        ganttTmpWrkCtrJob.OprNumNext    = _prodRoute.OprNumNext;
        ganttTmpWrkCtrJob.OprId         = _prodRoute.OprId;
        ganttTmpWrkCtrJob.LoadPercent   = _prodRoute.activityRequirementSet().LoadPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcWrkCtrHoursFromProdRoute</Name>
				<Source><![CDATA[
    private Hours recalcWrkCtrHoursFromProdRoute(ProdRouteJob _prodRouteJob, ProdRoute _prodRoute)
    {
        if (_prodRoute.RecId)
        {
            ProdJobType prodJobType = _prodRouteJob.prodJobType();
            ProdTable   prodTable = ProdTable::find(_prodRoute.ProdId);
            BOMCalcData calc = BOMCalcData::newProdTable(prodTable.QtySched, prodTable);

            ProdRoute primary = _prodRoute.primary();
            Hours wrkCtrHours = prodJobType.calcWrkCtrHours(
                calc,
                primary,
                primary,
                _prodRouteJob.WrkCtrId,
                _prodRoute,
                _prodRoute,
                prodTable.ItemId,
                prodTable.InventDimId);

            wrkCtrHours = prodJobType.calcJobSchedJobTime(_prodRouteJob, primary, wrkCtrHours);

            return wrkCtrHours;
        }
        else
        {
            return _prodRouteJob.SchedTimeHours;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityRequirementSetLoadPctFromProdRoute</Name>
				<Source><![CDATA[
    private WrkCtrLoadPct getActivityRequirementSetLoadPctFromProdRoute(ProdRoute _prodRoute)
    {
        WrkCtrLoadPct activityRequirementSetLoadPct = ReqMemoryCache::getFromCrossSessionScope(this.prodRouteKey(_prodRoute), memoryCacheScope, cacheMissValue);
        if (activityRequirementSetLoadPct == cacheMissValue)
        {
            WrkCtrActivityRequirementSet activityRequirementSet = _prodRoute.activityRequirementSet();
            activityRequirementSetLoadPct = activityRequirementSet.LoadPercent;
            ReqMemoryCache::addToCrossSessionScope(this.prodRouteKey(_prodRoute), activityRequirementSetLoadPct, memoryCacheScope);
        }

        return activityRequirementSetLoadPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodRouteKey</Name>
				<Source><![CDATA[
    private str prodRouteKey(ProdRoute _prodRoute)
    {
        return tableStr(ProdRoute) + int642str(_prodRoute.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdRouteJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>GanttTmpWrkCtrJob</c> data fields that have the data from a production order job
    /// </summary>
    /// <param name="_prodRouteJob">
    ///    A table buffer that contains the source production order job data.
    /// </param>
    /// <param name="_prodRoute">
    ///    A table buffer that contains the production route data.
    /// </param>
    public void initFromProdRouteJob(ProdRouteJob   _prodRouteJob,
                                     ProdRoute      _prodRoute = null)
    {
        ganttTmpWrkCtrJob.JobId                     = _prodRouteJob.JobId;
        ganttTmpWrkCtrJob.JobType                   = _prodRouteJob.JobType;
        ganttTmpWrkCtrJob.JobTypeActivityPurpose    = enum2str(_prodRouteJob.JobType);
        ganttTmpWrkCtrJob.JobDuration               = ganttTmpWrkCtrJob.AllowEdit ? this.recalcWrkCtrHoursFromProdRoute(_prodRouteJob, _prodRoute) * #SecondsPerHour 
                                                                                  : _prodRouteJob.SchedTimeHours * #SecondsPerHour;

        ganttTmpWrkCtrJob.RefId                     = _prodRouteJob.ProdId;
        ganttTmpWrkCtrJob.RefType                   = WrkCtrCapRefType::Production;
        ganttTmpWrkCtrJob.WrkCtrId                  = _prodRouteJob.WrkCtrId;

        ganttTmpWrkCtrJob.CalendarId                = this.getCalendarNameFromProdRouteJob(_prodRouteJob, _prodRoute);

        ganttTmpWrkCtrJob.OprNum                    = _prodRouteJob.OprNum;
        ganttTmpWrkCtrJob.OprNumActivityNumber      = strfmt('%1', _prodRouteJob.OprNum);
        ganttTmpWrkCtrJob.OprPriority               = _prodRouteJob.OprPriority;

        ganttTmpWrkCtrJob.SchedFromDate         = _prodRouteJob.FromDate;
        ganttTmpWrkCtrJob.SchedFromTime         = _prodRouteJob.FromTime;
        ganttTmpWrkCtrJob.SchedToDate           = _prodRouteJob.ToDate;
        ganttTmpWrkCtrJob.SchedToTime           = _prodRouteJob.ToTime;
   
        if (showInUserTZ)
        {        
            ganttTmpWrkCtrJob.SchedFromDateTime     = DateTimeUtil::newDateTime(_prodRouteJob.FromDate, _prodRouteJob.FromTime);
            ganttTmpWrkCtrJob.SchedToDateTime       = DateTimeUtil::newDateTime(_prodRouteJob.ToDate, _prodRouteJob.ToTime);
        }
        else
        {
            ganttTmpWrkCtrJob.SchedFromDateTime     = DateTimeUtil::newDateTime(_prodRouteJob.FromDate, _prodRouteJob.FromTime, DateTimeUtil::getUserPreferredTimeZone());
            ganttTmpWrkCtrJob.SchedToDateTime       = DateTimeUtil::newDateTime(_prodRouteJob.ToDate, _prodRouteJob.ToTime, DateTimeUtil::getUserPreferredTimeZone());        
        }
                                        
        ganttTmpWrkCtrJob.ActualFromDate            = _prodRouteJob.RealizedStartDate;
        ganttTmpWrkCtrJob.ActualFromTime            = _prodRouteJob.RealizedStartTime;
        ganttTmpWrkCtrJob.ActualToDate              = _prodRouteJob.RealizedEndDate;
        ganttTmpWrkCtrJob.ActualToTime              = _prodRouteJob.RealizedEndTime;

        ganttTmpWrkCtrJob.Completion                = _prodRouteJob.ExecutedPct;

        ganttTmpWrkCtrJob.NumType                   = _prodRouteJob.NumType;
        ganttTmpWrkCtrJob.NumPrimary                = _prodRouteJob.NumPrimary;
        ganttTmpWrkCtrJob.NumSecondary              = _prodRouteJob.NumSecondary;
        ganttTmpWrkCtrJob.Link                      = _prodRouteJob.Link;
        ganttTmpWrkCtrJob.ProjLineNum               = 0;

        this.initReserveCapacityFromProdRouteJob(_prodRouteJob, _prodRoute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdTable</Name>
				<Source><![CDATA[
    public void initFromProdTable(ProdTable _prodTable)
    {
        ganttTmpWrkCtrJob.RefStatus         = enum2Value(_prodTable.ProdStatus);
        ganttTmpWrkCtrJob.RefStatusSort     = enum2int(_prodTable.ProdStatus);
        ganttTmpWrkCtrJob.RefDeliveryDate   = _prodTable.DlvDate;
        ganttTmpWrkCtrJob.RefDeliveryTime   = _prodTable.DlvTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjForecastEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>GanttTmpWrkCtrJob</c> data fields that have data from a project hour forecast
    /// </summary>
    /// <param name="_projForecastEmpl">
    ///    A table buffer that contains the source project hour forecast data.
    /// </param>
    public void initFromProjForecastEmpl(ProjForecastEmpl _projForecastEmpl)
    {
        ProdJobType_Process prodJobType_Process = new ProdJobType_Process();
        ganttTmpWrkCtrJob.JobId             = strfmt('%1', _projForecastEmpl.RecId);
        ganttTmpWrkCtrJob.JobType           = prodJobType_Process.routeJobType();
        ganttTmpWrkCtrJob.JobDuration       = _projForecastEmpl.SchedTimeHours * #SecondsPerHour;

        ganttTmpWrkCtrJob.RefId             = _projForecastEmpl.ProjId;
        ganttTmpWrkCtrJob.RefType           = WrkCtrCapRefType::Project;
        ganttTmpWrkCtrJob.WrkCtrId          = _projForecastEmpl.SchedWrkCtrId;

        ganttTmpWrkCtrJob.CalendarId        = _projForecastEmpl.SchedWrkCtrId;

        ganttTmpWrkCtrJob.OprNumActivityNumber = _projForecastEmpl.ActivityNumber;

        ganttTmpWrkCtrJob.OprNum            = 1;
        ganttTmpWrkCtrJob.OprPriority       = RouteOprPriority::Primary;

        ganttTmpWrkCtrJob.SchedFromDate     = _projForecastEmpl.SchedFromDate;
        ganttTmpWrkCtrJob.SchedFromTime     = _projForecastEmpl.SchedFromTime;
        ganttTmpWrkCtrJob.SchedToDate       = _projForecastEmpl.SchedToDate;
        ganttTmpWrkCtrJob.SchedToTime       = _projForecastEmpl.SchedToTime;
        ganttTmpWrkCtrJob.SchedFromDateTime = DateTimeUtil::newDateTime(_projForecastEmpl.SchedFromDate, _projForecastEmpl.SchedFromTime, DateTimeUtil::getUserPreferredTimeZone());
        ganttTmpWrkCtrJob.SchedToDateTime   = DateTimeUtil::newDateTime(_projForecastEmpl.SchedToDate, _projForecastEmpl.SchedToTime, DateTimeUtil::getUserPreferredTimeZone());        

        ganttTmpWrkCtrJob.NumType           = prodJobType_Process.numType();
        ganttTmpWrkCtrJob.NumPrimary        = 1;
        ganttTmpWrkCtrJob.NumSecondary      = 0;
        ganttTmpWrkCtrJob.Link              = _projForecastEmpl.SchedLink;
        ganttTmpWrkCtrJob.ProjLineNum       = _projForecastEmpl.LineNum;

        ganttTmpWrkCtrJob.ReserveCapacity   = NoYes::Yes;
        ganttTmpWrkCtrJob.LoadPercent       = _projForecastEmpl.activityRequirementSet().LoadPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjTable</Name>
				<Source><![CDATA[
    public void initFromProjTable(ProjTable _projTable)
    {
        ganttTmpWrkCtrJob.RefStatus             = enum2Value(_projTable.Status);
        ganttTmpWrkCtrJob.RefStatusSort         = enum2int(_projTable.Status);

        if (_projTable.EndDate != dateNull())
        {
            ganttTmpWrkCtrJob.RefDeliveryDate   = _projTable.EndDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReqPO</Name>
				<Source><![CDATA[
    public void initFromReqPO(ReqPO _reqPO)
    {
        ganttTmpWrkCtrJob.RefStatus         = enum2Value(ProdStatus::Scheduled);
        ganttTmpWrkCtrJob.RefStatusSort     = enum2int(ProdStatus::Scheduled);
        ganttTmpWrkCtrJob.RefDeliveryDate   = _reqPO.ReqDateDlv;
        ganttTmpWrkCtrJob.RefDeliveryTime   = _reqPO.ReqTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReqRoute</Name>
				<Source><![CDATA[
    public void initFromReqRoute(ReqRoute _reqRoute)
    {
        ganttTmpWrkCtrJob.OprNumNext    = _reqRoute.OprNumNext;
        ganttTmpWrkCtrJob.OprId         = _reqRoute.OprId;
        ganttTmpWrkCtrJob.LoadPercent   = _reqRoute.refRouteOpr().activityRequirementSet().LoadPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcWrkCtrHoursFromReqRoute</Name>
				<Source><![CDATA[
    internal Hours recalcWrkCtrHoursFromReqRoute(ReqRouteJob _reqRouteJob, ReqRoute _reqRoute)
    {
        if (_reqRoute.RecId)
        {
            ProdJobType prodJobType = ProdJobType::construct(_reqRouteJob.JobType);

            ReqPO reqpo = ReqPO::find(_reqRoute.PlanVersion, _reqRoute.RefId);
            InventTable inventTable = InventTable::find(reqpo.ItemId) ;
            BOMCalcData calc = BOMCalcData::newInventTable(reqpo.Qty, inventTable);
            Route route = Route::findRecId(_reqRoute.RouteRefRecId);
            RouteOpr routeOpr = 
                _reqRoute.OprPriority == RouteOprPriority::Primary ?
                    RouteOpr::findRecId(_reqRoute.RouteOprRefRecId) :
                    ReqRoute::find(_reqRoute.PlanVersion, _reqRoute.RefId, _reqRoute.OprNum, RouteOprPriority::Primary).refRouteOpr();

            Hours wrkCtrHours = prodJobType.calcWrkCtrHours(
                calc,
                route.primary(),
                routeOpr,
                _reqRouteJob.WrkCtrId,
                route,
                routeOpr,
                reqPO.ItemId,
                reqPO.CovInventDimId);
            WrkCtrLoadPct activityRequirementSetLoadPct = this.getActivityRequirementSetLoadPctFromRouteOpr(routeOpr);

            return wrkCtrHours * activityRequirementSetLoadPct / 100;
        }
        else
        {
            return _reqRouteJob.SchedTimeHours;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityRequirementSetLoadPctFromRouteOpr</Name>
				<Source><![CDATA[
    private WrkCtrLoadPct getActivityRequirementSetLoadPctFromRouteOpr(RouteOpr _routeOpr)
    {
        WrkCtrLoadPct activityRequirementSetLoadPct = ReqMemoryCache::getFromCrossSessionScope(this.routeOprKey(_routeOpr.RecId), memoryCacheScope, cacheMissValue);
        if (activityRequirementSetLoadPct == cacheMissValue)
        {
            WrkCtrActivityRequirementSet activityRequirementSet = _routeOpr.activityRequirementSet();
            activityRequirementSetLoadPct = activityRequirementSet.LoadPercent;
            ReqMemoryCache::addToCrossSessionScope(this.routeOprKey(_routeOpr.RecId), activityRequirementSetLoadPct, memoryCacheScope);
        }

        return activityRequirementSetLoadPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeOprKey</Name>
				<Source><![CDATA[
    private str routeOprKey(RecId recId)
    {
        return tableStr(RouteOpr) + int642str(recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReqRouteJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>GanttTmpWrkCtrJob</c> data fields that have data from a planned production order
    ///    job
    /// </summary>
    /// <param name="_reqRouteJob">
    ///    A table buffer that contains the source planned production order job data.
    /// </param>
    /// <param name="_reqRoute">
    ///    A table buffer that contains the planned production order route data.
    /// </param>
    public void initFromReqRouteJob(ReqRouteJob _reqRouteJob,
                                    ReqRoute    _reqRoute = null)  // set for better performance
    {
        ganttTmpWrkCtrJob.JobId                     = strfmt('%1', _reqRouteJob.RecId);
        ganttTmpWrkCtrJob.JobType                   = _reqRouteJob.JobType;
        ganttTmpWrkCtrJob.JobTypeActivityPurpose    = enum2str(_reqRouteJob.JobType);
        ganttTmpWrkCtrJob.JobDuration               = ganttTmpWrkCtrJob.AllowEdit ? this.recalcWrkCtrHoursFromReqRoute(_reqRouteJob, _reqRoute) * #SecondsPerHour
                                                                                  : _reqRouteJob.SchedTimeHours * #SecondsPerHour;

        ganttTmpWrkCtrJob.ReqPlanId                 = ReqPlanVersion::find(_reqRouteJob.PlanVersion).ReqPlanId;

        ganttTmpWrkCtrJob.RefId                     = _reqRouteJob.ReqPOId;
        ganttTmpWrkCtrJob.RefType                   = WrkCtrCapRefType::PlannedOrder;
        ganttTmpWrkCtrJob.WrkCtrId                  = _reqRouteJob.WrkCtrId;

        ganttTmpWrkCtrJob.CalendarId                = this.getCalendarNameFromReqRouteJob(_reqRouteJob, _reqRoute);

        ganttTmpWrkCtrJob.OprNum                    = _reqRouteJob.OprNum;
        ganttTmpWrkCtrJob.OprNumActivityNumber      = strfmt('%1', _reqRouteJob.OprNum);
        ganttTmpWrkCtrJob.OprPriority               = _reqRouteJob.OprPriority;

        ganttTmpWrkCtrJob.SchedFromDate             = _reqRouteJob.FromDate;
        ganttTmpWrkCtrJob.SchedFromTime             = _reqRouteJob.FromTime;
        ganttTmpWrkCtrJob.SchedToDate               = _reqRouteJob.ToDate;
        ganttTmpWrkCtrJob.SchedToTime               = _reqRouteJob.ToTime;

        ganttTmpWrkCtrJob.SchedFromDateTime         = DateTimeUtil::newDateTime(_reqRouteJob.FromDate, _reqRouteJob.FromTime, DateTimeUtil::getUserPreferredTimeZone());
        ganttTmpWrkCtrJob.SchedToDateTime           = DateTimeUtil::newDateTime(_reqRouteJob.ToDate, _reqRouteJob.ToTime, DateTimeUtil::getUserPreferredTimeZone());


        ganttTmpWrkCtrJob.NumType                   = _reqRouteJob.NumType;
        ganttTmpWrkCtrJob.NumPrimary                = _reqRouteJob.NumPrimary;
        ganttTmpWrkCtrJob.NumSecondary              = _reqRouteJob.NumSecondary;
        ganttTmpWrkCtrJob.Link                      = _reqRouteJob.Link;
        ganttTmpWrkCtrJob.ProjLineNum               = 0;

        this.initReserveCapacityFromReqRouteJob(_reqRouteJob, _reqRoute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromsmmActivities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads relevant data from the <see cref="T:smmActivities" />.
    /// </summary>
    /// <param name="_smmActivities">
    ///    The <see cref="T:smmActivities" /> buffer to load.
    /// </param>
    public void initFromsmmActivities(smmActivities _smmActivities)
    {
        ganttTmpWrkCtrJob.JobTypeActivityPurpose = _smmActivities.Purpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWrkCtrResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <see cref="GanttTmpWrkCtrJob Table" /> from the values from <see cref="WrkCtrResourceGroup Table" />
    /// </summary>
    /// <param name="_wrkCtrResourceGroup">
    /// The <see cref="WrkCtrResourceGroup Table" /> buffer containing information about the resource group.
    /// </param>
    public void initFromWrkCtrResourceGroup(WrkCtrResourceGroup _wrkCtrResourceGroup)
    {
        ganttTmpWrkCtrJob.ProdUnitId    = _wrkCtrResourceGroup.ProdUnitId;
        ganttTmpWrkCtrJob.InventSiteId  = _wrkCtrResourceGroup.SiteId;
        ganttTmpWrkCtrJob.WrkCtrGroupId = _wrkCtrResourceGroup.WrkCtrId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWrkCtrTable</Name>
				<Source><![CDATA[
    public void initFromWrkCtrTable(WrkCtrTable _wrkCtrTable, date _fromDate, date _toDate)
    {
        WrkCtrResourceGroup wrkCtrResourceGroup;
        if (isGanttDataWrkCtrOpenSaveMoveFlightEnabled)
        {
            wrkCtrResourceGroup = WrkCtrTable::getResourceGroupFromCache(_wrkCtrTable, _fromDate, _toDate);
        }
        else
        {
            wrkCtrResourceGroup = WrkCtrTable::resourceGroup(_wrkCtrTable.WrkCtrId, _fromDate, _toDate);
        }
        
        ganttTmpWrkCtrJob.ProdUnitId    = wrkCtrResourceGroup.ProdUnitId;
        ganttTmpWrkCtrJob.InventSiteId  = wrkCtrResourceGroup.SiteId;
        ganttTmpWrkCtrJob.WrkCtrGroupId = wrkCtrResourceGroup.WrkCtrId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGanttTableBaseData</Name>
				<Source><![CDATA[
    protected void initGanttTableBaseData()
    {
        ganttTableBaseData = GanttTable_WrkCtrJob::newAllowUserModification(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReserveCapacityFromProdRouteJob</Name>
				<Source><![CDATA[
    protected void initReserveCapacityFromProdRouteJob(ProdRouteJob    _prodRouteJob,
                                                       ProdRoute       _prodRoute = null)  // set for better performance
    {
        ProdJobType prodJobType;

        RouteGroup  routeGroup;
        if (!_prodRouteJob.RecId)
        {
            return;
        }

        prodJobType = _prodRouteJob.prodJobType();

        if (prodJobType == null)
        {
            throw error(strfmt("@SYS18707", funcname()));
        }

        // get _prodRoute if not passed in the parameters
        if (!_prodRoute.RecId)
        {
            _prodRoute = _prodRouteJob.prodRoute();

            if (!_prodRoute.RecId)
            {
                throw error("@SYS102208");
            }
        }

        routeGroup = _prodRoute.routeGroup();

        if (!routeGroup.RecId)
        {
            throw error("@SYS102208");
        }

        if (prodJobType.scheduleCapacity(routeGroup))
        {
            ganttTmpWrkCtrJob.ReserveCapacity   = NoYes::Yes;
        }
        else
        {
            ganttTmpWrkCtrJob.ReserveCapacity   = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReserveCapacityFromReqRouteJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the value that controls whether the capacity is reserved in the Gantt chart histograms
    ///    for a specific planned production order job.
    /// </summary>
    /// <param name="_reqRouteJob">
    ///    A <c>ReqRouteJob</c> table buffer that contains the planned production order job information.
    /// </param>
    /// <param name="_reqRoute">
    ///    A <c>ReqRoute</c> table buffer that contains the planned production order operation information.
    /// </param>
    /// <remarks>
    ///    If possible, the <c>reqRoute</c> parameter should be set to the operation that the job in the
    ///    <c>reqRouteJob</c> parameter belongs to in order to reduce calls to the server; optional.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    Exception thrown if the job type specified in the <paramref name="_reqRouteJob" /> parameter is
    ///    invalid.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    Exception thrown if no operation could be found for the job specified by the <paramref
    ///    name="_reqRouteJob" /> parameter.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    Exception thrown if no route group could be found for the job specified by the <paramref
    ///    name="_reqRouteJob" /> parameter.
    /// </exception>
    protected internal void initReserveCapacityFromReqRouteJob(ReqRouteJob   _reqRouteJob,
                                                               ReqRoute      _reqRoute = null)  // set for better performance
    {
        ProdJobType prodJobType;
        RouteGroup  routeGroup;
        if (!_reqRouteJob.RecId)
        {
            return;
        }

        prodJobType = ProdJobType::construct(_reqRouteJob.JobType);

        if (prodJobType == null)
        {
            throw error(strfmt("@SYS18707", funcname()));
        }
        // get _reqRoute if not passed in the parameters
        if (!_reqRoute.RecId)
        {
            _reqRoute = _reqRouteJob.reqRoute();

            if (!_reqRoute.RecId)
            {
                throw error("@SYS102208");
            }
        }

        routeGroup = _reqRoute.routeGroup();

        if (!routeGroup.RecId)
        {
            throw error("@SYS102208");
        }

        if (prodJobType.scheduleCapacity(routeGroup))
        {
            ganttTmpWrkCtrJob.ReserveCapacity   = NoYes::Yes;
        }
        else
        {
            ganttTmpWrkCtrJob.ReserveCapacity   = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadAllValidationRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads records that will be used to validate records in the <c>GanttTmpWrkCtrJob</c> table.
    /// </summary>
    /// <param name="_setModifiedRecIds">
    ///    A set of record identifiers that indicate which records need the validation data to be loaded;
    ///    optional.
    /// </param>
    /// <remarks>
    ///    The modified records for which data should be loaded are specified in the <paramref
    ///    name="_setModifiedRecIds" /> parameter.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The server call to get the data needed for validation has failed.
    /// </exception>
    public void loadAllValidationRecords(Set _setModifiedRecIds = this.parmSetUserModifiedRecIds())
    {
        Set                 setOrigModifiedRecIds = new Set(Types::Container);
        GanttTmpWrkCtrJob   tmpGanttTmpWrkCtrJob;
        SetEnumerator       setEnumerator;
        container           allValidationRecords;

        #define.ValidationRecordsProdIndex(1)
        #define.ValidationRecordsPlannedProdIndex(2)
        #define.ValidationRecordsProjIndex(3)
        #define.ValidationRecordsMapSize(3)

        // put in the container that is going to be passed to the server the type of order and the RecId
        setEnumerator = _setModifiedRecIds.getEnumerator();
        while (setEnumerator && setEnumerator.moveNext())
        {
            // get the original record and the type
            tmpGanttTmpWrkCtrJob.RecId = setEnumerator.current();
            if (recordSortedList.find(tmpGanttTmpWrkCtrJob) &&
                mapCurrentRecId2Orig.exists(tmpGanttTmpWrkCtrJob.RecId))
            {
                setOrigModifiedRecIds.add([tmpGanttTmpWrkCtrJob.RefType,
                                           mapCurrentRecId2Orig.lookup(tmpGanttTmpWrkCtrJob.RecId)]);
            }
        }

        // call to server to get all data in one shot
        allValidationRecords            = GanttTable_WrkCtrJob::getModifiedRecordsData(setOrigModifiedRecIds.pack());

        if (conlen(allValidationRecords) != #ValidationRecordsMapSize)
        {
            throw error("@SYS122392");
        }

        mapValidationRecordsProd        = Map::create(conpeek(allValidationRecords, #ValidationRecordsProdIndex));
        mapValidationRecordsPlannedProd = Map::create(conpeek(allValidationRecords, #ValidationRecordsPlannedProdIndex));
        mapValidationRecordsProj        = Map::create(conpeek(allValidationRecords, #ValidationRecordsProjIndex));

        // check if we got the data
        if (!mapValidationRecordsProd           ||
            !mapValidationRecordsPlannedProd    ||
            !mapValidationRecordsProj)
        {
            throw error("@SYS122392");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        isGanttDataWrkCtrOpenSaveMoveFlightEnabled = GanttDataWrkCtrOpenSaveMoveFlight::instance().isEnabled();        
        this.clearAllValidationRecords();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openProdJobDispatchingForm</Name>
				<Source><![CDATA[
    public void openProdJobDispatchingForm(Set                  _setProdJobRecIds,
                                           GanttClient_WrkCtr   _ganttClient)
    {
        #define.scheduleTabControlName('ScheduleTab')

        SetEnumerator   setEnumerator;

        WrkCtrId        prevWrkCtrId;

        WrkCtrId        wrkCtrId = '';
        List            listProdJobIds  = new List(Types::String);

        Args            args;
        FormRun         formRunClass;
        FormControl     formControl;
        FormDesign      formDesign;

        RecId           saveCurrentRecId;

        if (!_setProdJobRecIds || !_setProdJobRecIds.elements())
        {
            return;
        }

        if (_ganttClient == null)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        // save the current recId
        saveCurrentRecId    = ganttTmpWrkCtrJob.RecId;

        setEnumerator       = _setProdJobRecIds.getEnumerator();

        while (setEnumerator && setEnumerator.moveNext())
        {
            prevWrkCtrId = wrkCtrId;

            this.findRecId(setEnumerator.current(), true);

            if (!this.validateWrite())
            {
                throw Exception::Error;
            }

            if (this.canAddProdJobDispatchingForm(ganttTmpWrkCtrJob))
            {
                wrkCtrId = ganttTmpWrkCtrJob.WrkCtrId;

                if (prevWrkCtrId && prevWrkCtrId != wrkCtrId)
                {
                    throw error("@SYS112905");
                }

                listProdJobIds.addEnd(ganttTmpWrkCtrJob.JobId);
            }
        }

        // set back the current record
        if (saveCurrentRecId)
        {
            this.findRecId(saveCurrentRecId, true);
        }

        args    = new Args();
        args.name(formstr(ProdRouteJobSched));
        args.caller(_ganttClient);
        args.parm(wrkCtrId);
        args.parmObject(listProdJobIds);

        formRunClass    = classfactory.formRunClass(args);
        formRunClass.init();
        formRunClass.run();
        formDesign      = formRunClass.design();
        formControl     = formDesign.controlName(#scheduleTabControlName);

        if (formControl)
        {
            formControl.setFocus();
        }

        formRunClass.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openProdJobSchedulingForm</Name>
				<Source><![CDATA[
    public void openProdJobSchedulingForm(GanttClient_WrkCtr _ganttClient)
    {
        ProdMultiSchedulingJob  prodMultiSchedulingJob  = ProdMultiScheduling::newProdJobGantt();
        ProdRouteJob            prodRouteJob;

        if (!ganttTmpWrkCtrJob.RecId || _ganttClient == null)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        if (!this.validateWrite())
        {
            throw Exception::Error;
        }

        prodRouteJob = this.getOrigRecord();

        this.addProdJob2ProdJobSchedulingForm(prodRouteJob.RecId,
                                              prodRouteJob,
                                              prodMultiSchedulingJob,
                                              ganttTmpWrkCtrJob.SchedFromDate,
                                              ganttTmpWrkCtrJob.SchedFromTime,
                                              ganttTmpWrkCtrJob.WrkCtrId);

        if (prodMultiSchedulingJob.prompt())
        {
            prodMultiSchedulingJob.runOperation();

            _ganttClient.reload();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableBuffer</Name>
				<Source><![CDATA[
    public Common parmTableBuffer(Common _ganttTmpWrkCtrJob = ganttTmpWrkCtrJob)
    {
        if (!prmisdefault(_ganttTmpWrkCtrJob))
        {
            ganttTmpWrkCtrJob.data(_ganttTmpWrkCtrJob);
        }
        return ganttTmpWrkCtrJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodRoute</Name>
				<Source><![CDATA[
    public ProdRoute prodRoute(boolean  _forUpdate              = false,
                               boolean  _throwErrorIfNotFound   = false)
    {
        ProdRoute prodRoute;
        prodRoute = ProdRoute::find(ganttTmpWrkCtrJob.RefId, ganttTmpWrkCtrJob.OprNum, ganttTmpWrkCtrJob.OprPriority, _forUpdate);

        if (!prodRoute.RecId && _throwErrorIfNotFound)
        {
            throw error(strfmt("@SYS113049", ganttTmpWrkCtrJob.OprNum, ganttTmpWrkCtrJob.RefId));
        }

        return prodRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodRouteJob</Name>
				<Source><![CDATA[
    public ProdRouteJob prodRouteJob(boolean    _forUpdate              = false,
                                     boolean    _throwErrorIfNotFound   = false)
    {
        ProdRouteJob prodRouteJob;
        prodRouteJob = ProdRouteJob::findJobId(ganttTmpWrkCtrJob.JobId, _forUpdate);

        if (!prodRouteJob.RecId && _throwErrorIfNotFound)
        {
            throw error(strfmt("@SYS113059", ganttTmpWrkCtrJob.JobId, ganttTmpWrkCtrJob.RefId));
        }

        return prodRouteJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTable</Name>
				<Source><![CDATA[
    public ProdTable prodTable(boolean  _forUpdate              = false,
                               boolean  _throwErrorIfNotFound   = false)
    {
        ProdTable   prodTable;
        prodTable = ProdTable::find(ganttTmpWrkCtrJob.RefId, _forUpdate);

        if (!prodTable.RecId && _throwErrorIfNotFound)
        {
            throw error(strfmt(ProdTable::txtNotExist(), ganttTmpWrkCtrJob.RefId));
        }

        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projForecastEmpl</Name>
				<Source><![CDATA[
    public ProjForecastEmpl projForecastEmpl(boolean    _forUpdate              = false,
                                             boolean    _throwErrorIfNotFound   = false)
    {
        ProjForecastEmpl projForecastEmpl;
        projForecastEmpl = ProjForecastEmpl::findRecId(str2int64(ganttTmpWrkCtrJob.JobId), _forUpdate);

        if (!projForecastEmpl.RecId && _throwErrorIfNotFound)
        {
            throw error(strfmt("@SYS113080", ganttTmpWrkCtrJob.JobId, tablepname(ProjForecastEmpl)));
        }

        return projForecastEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    public ProjTable projTable(boolean  _forUpdate              = false,
                               boolean  _throwErrorIfNotFound   = false)
    {
        ProjTable   projTable;
        projTable = ProjTable::find(ganttTmpWrkCtrJob.RefId, _forUpdate);

        if (!projTable.RecId && _throwErrorIfNotFound)
        {
            throw error(strfmt(ProjTable::txtNotExist(), ganttTmpWrkCtrJob.RefId));
        }

        return projTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPO</Name>
				<Source><![CDATA[
    public ReqPO reqPO(boolean  _forUpdate              = false,
                       boolean  _throwErrorIfNotFound   = false)
    {
        ReqPO           reqPO;
        ReqPlanVersion  reqPlanVersion =
                                         ganttTmpWrkCtrJob.reqPlan().findActiveVersion();

        reqPO = ReqPO::find(reqPlanVersion.RecId, ganttTmpWrkCtrJob.RefId, _forUpdate);

        if (!reqPO.RecId && _throwErrorIfNotFound)
        {
            throw error(strfmt("@SYS113076", ganttTmpWrkCtrJob.RefId));
        }

        return reqPO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqRoute</Name>
				<Source><![CDATA[
    public ReqRoute reqRoute(boolean    _forUpdate              = false,
                             boolean    _throwErrorIfNotFound   = false)
    {
        ReqRoute        reqRoute;
        ReqPlanVersion  reqPlanVersion =
                                         ganttTmpWrkCtrJob.reqPlan().findActiveVersion();
        reqRoute = ReqRoute::find(reqPlanVersion.RecId,
                                  ganttTmpWrkCtrJob.RefId,
                                  ganttTmpWrkCtrJob.OprNum,
                                  ganttTmpWrkCtrJob.OprPriority,
                                  _forUpdate);

        if (!reqRoute.RecId && _throwErrorIfNotFound)
        {
            throw error(strfmt("@SYS113077", ganttTmpWrkCtrJob.OprNum, ganttTmpWrkCtrJob.RefId));
        }

        return reqRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqRouteJob</Name>
				<Source><![CDATA[
    public ReqRouteJob reqRouteJob(boolean  _forUpdate              = false,
                                   boolean  _throwErrorIfNotFound   = false)
    {
        ReqRouteJob reqRouteJob;
        reqRouteJob = ReqRouteJob::findRecId(this.origRecId(), _forUpdate);

        if (!reqRouteJob.RecId && _throwErrorIfNotFound)
        {
            throw error(strfmt("@SYS113078", this.origRecId()));
        }

        return reqRouteJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTableBuffer</Name>
				<Source><![CDATA[
    protected void resetTableBuffer()
    {
        ganttTmpWrkCtrJob = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleWorkTimePlannedProd</Name>
				<Source><![CDATA[
    public boolean scheduleWorkTimePlannedProd(ReqRouteJob  _reqRouteJob    = this.reqRouteJob(),
                                               ReqRoute     _reqRoute       = null)  // set for better performance
    {
        ProdJobType prodJobType;
        RouteGroup  routeGroup;
        if (!_reqRouteJob.RecId)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        prodJobType = ProdJobType::construct(_reqRouteJob.JobType);

        if (prodJobType == null)
        {
            throw error(strfmt("@SYS18707", funcname()));
        }
        // get _reqRoute if not passed in the parameters
        if (!_reqRoute.RecId)
        {
            _reqRoute = _reqRouteJob.reqRoute();

            if (!_reqRoute.RecId)
            {
                throw error("@SYS102208");
            }
        }

        routeGroup = _reqRoute.routeGroup();

        if (!routeGroup.RecId)
        {
            throw error("@SYS102208");
        }

        return prodJobType.scheduleWorkTime(routeGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleWorkTimeProd</Name>
				<Source><![CDATA[
    public boolean scheduleWorkTimeProd(ProdRouteJob    _prodRouteJob   = this.prodRouteJob(),
                                        ProdRoute       _prodRoute      = null) // set for better performance
    {
        ProdJobType prodJobType;

        RouteGroup  routeGroup;
        if (!_prodRouteJob.RecId)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        prodJobType = _prodRouteJob.prodJobType();

        if (prodJobType == null)
        {
            throw error(strfmt("@SYS18707", funcname()));
        }

        // get _prodRoute if not passed in the parameters
        if (!_prodRoute.RecId)
        {
            _prodRoute = _prodRouteJob.prodRoute();

            if (!_prodRoute.RecId)
            {
                throw error("@SYS102208");
            }
        }

        routeGroup = _prodRoute.routeGroup();

        if (!routeGroup.RecId)
        {
            throw error("@SYS102208");
        }

        return prodJobType.scheduleWorkTime(routeGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsDisplayed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>IsDisplayed</c> field value in the current <see cref="T:GanttTmpWrkCtrJob" /> buffer.
    /// </summary>
    /// <param name="_isDisplayed">
    ///    A boolean indicating whether the job should be displayed in Gantt chart or not.
    /// </param>
    public void setIsDisplayed(boolean _isDisplayed)
    {
        ganttTmpWrkCtrJob.IsDisplayed = _isDisplayed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>AllowEdit</c> field value in the current <see cref="T:GanttTmpWrkCtrJob" /> buffer.
    /// </summary>
    /// <param name="_allowEdit">
    ///    A boolean indicating whether the job is allowed to be moved in Gantt chart.
    /// </param>
    public void setAllowEdit(boolean _allowEdit)
    {
        ganttTmpWrkCtrJob.AllowEdit = _allowEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMaterialAvailabilityDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>MaterialAvailabilityDateTime</c> field value in the current <see cref="T:GanttTmpWrkCtrJob" /> buffer.
    /// </summary>
    /// <param name = "_materialAvailabilityDateTime">The material availability date/time of the job.</param>
    public void setMaterialAvailabilityDateTime(utcdatetime _materialAvailabilityDateTime)
    {
        ganttTmpWrkCtrJob.MaterialAvailabilityDateTime = _materialAvailabilityDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReqPlanId</Name>
				<Source><![CDATA[
    public void setReqPlanId(ReqPlanId  _reqPlanId)
    {
        ganttTmpWrkCtrJob.ReqPlanId = _reqPlanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortGanttWrkCtrJobData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sorts all records in the <see cref="T:GanttTmpWrkCtrJob" /> and assigns an order number to each
    ///    record.
    /// </summary>
    public void sortGanttWrkCtrJobData()
    {
        LineNum             lineNum = 0;
        GanttTmpWrkCtrJob   tmpGanttTmpWrkCtrJob;
        while select forupdate ganttTmpWrkCtrJob
            order by RefType, RefId, OprNum, OprNumActivityNumber, JobType, OprPriority, SchedFromDate, SchedFromTime
        {
            tmpGanttTmpWrkCtrJob.RecId = ganttTmpWrkCtrJob.RecId;

            recordSortedList.find(tmpGanttTmpWrkCtrJob);

            tmpGanttTmpWrkCtrJob.LineNum = lineNum;
            recordSortedList.ins(tmpGanttTmpWrkCtrJob, true);

            lineNum ++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the current record.
    /// </summary>
    /// <returns>
    ///    true if the record is valid; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The full validation is invoked, but an instance of the <see cref="T:GanttData" /> was not passed.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The original record was modified by another user.
    /// </exception>
    public boolean validateWrite()
    {
        GanttTmpWrkCtrJob localTableWrkCtrJob = this.parmTableBuffer();
        boolean ret;
        ret = super();

        // the base record needs to be selected here as it is used later in the validation
        if (!this.ganttTableBaseData().findOrigRecId(this.origRecId()))
        {
            return checkFailed("@SYS35042");
        }

        if (!this.validateWriteGeneral())
        {
            return false;
        }

        switch (localTableWrkCtrJob.RefType)
        {
            case WrkCtrCapRefType::Production   :

                ret = ret && this.validateWriteProd();
                break;

            case WrkCtrCapRefType::PlannedOrder :

                ret = ret && this.validateWritePlannedProd();
                break;

            case WrkCtrCapRefType::Project      :

                ret = ret && this.validateWriteProj();
                break;

            default                             :
                ret = ret && checkFailed(strfmt("@SYS26908", localTableWrkCtrJob.RefType));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteGeneral</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that a job must have a resource and that the resource cannot change resource groups for
    ///    the duration of the job.
    /// </summary>
    /// <returns>
    ///    true if validation is successful; otherwise, false.
    /// </returns>
    protected boolean validateWriteGeneral()
    {
        WrkCtrTable     wrkCtrTable = WrkCtrTable::find(ganttTmpWrkCtrJob.WrkCtrId);
        boolean         ret = true;

        if (!wrkCtrTable.RecId)
        {
            ret = checkFailed(strfmt(WrkCtrTable::txtNotExist(), ganttTmpWrkCtrJob.WrkCtrId));
        }

        if (ret && !wrkCtrTable.sameResourceGroupInPeriod(ganttTmpWrkCtrJob.SchedFromDate, ganttTmpWrkCtrJob.SchedToDate))
        {
            ret = checkFailed("@SYS312191");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWritePlannedProd</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates current planned production order job record.
    /// </summary>
    /// <returns>
    ///    true if validation has passed; otherwise, false.
    /// </returns>
    protected boolean validateWritePlannedProd()
    {
        ReqPO               reqPO;
        ReqRoute            reqRoute;
        ReqRouteJob         reqRouteJob;

        ProdJobType         prodJobType;
        RecId               origRecId;

        GanttTmpWrkCtrJob   ganttTmpWrkCtrJobBase = this.ganttTableBaseData().parmTableBuffer();
        setprefix(strfmt("@SYS108495"   + ' %1', ganttTmpWrkCtrJob.RefId));
        setprefix(strfmt("@SYS75245", ganttTmpWrkCtrJob.WrkCtrId, ganttTmpWrkCtrJob.OprNum, ganttTmpWrkCtrJob.OprPriority, ganttTmpWrkCtrJob.OprId));
        setprefix(strfmt("@SYS9942"     + ' %1', ganttTmpWrkCtrJob.JobType));

        if (mapCurrentRecId2Orig.exists(ganttTmpWrkCtrJob.RecId))
        {
            origRecId = mapCurrentRecId2Orig.lookup(ganttTmpWrkCtrJob.RecId);
        }

        if (mapValidationRecordsPlannedProd.exists(origRecId))
        {
            [reqRouteJob, reqRoute, reqPO] = mapValidationRecordsPlannedProd.lookup(origRecId);
        }
        else
        {
            reqPO       = this.reqPO();
            reqRoute    = this.reqRoute();
            reqRouteJob = this.reqRouteJob();
        }

        // Check if the original record is modified
        if (!this.checkOrigRecordStatus(reqRouteJob))
        {
            return false;
        }

        if (!this.checkAccessRightsPlannedProd())
        {
            return false;
        }

        // Check if the planned production order exists
        if (!reqPO.RecId)
        {
            return checkFailed(strfmt("@SYS113076", ganttTmpWrkCtrJob.RefId));
        }

        // Check if the planned production operation exists
        if (!reqRoute.RecId)
        {
            return checkFailed(strfmt("@SYS113077", ganttTmpWrkCtrJob.OprNum, ganttTmpWrkCtrJob.RefId));
        }

        // Check if the planned production job exists
        if (!reqRouteJob.RecId)
        {
            return checkFailed(strfmt("@SYS113078", this.origRecId()));
        }

        // Check the grouping changes that are common for all job types
        if (!this.checkGroupingChangesCommonAll())
        {
            return false;
        }

        // Check the grouping changes that are common for the production and planned production job types
        if (!this.checkGroupingChangesCommonProd())
        {
            return false;
        }

        // Check if the planned production id has been changed
        if (!this.checkRefNotChanged(strfmt("@SYS113404", ganttTmpWrkCtrJobBase.RefId)))
        {
            return false;
        }

        prodJobType = reqRouteJob.prodJobType();

        // check route group setup

        if (!this.checkProdJobType(prodJobType, reqRoute.routeGroup()))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteProd</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the current production order job record.
    /// </summary>
    /// <returns>
    ///    true if the validation has passed; otherwise, false.
    /// </returns>
    protected boolean validateWriteProd()
    {
        ProdTable           prodTable;
        ProdRoute           prodRoute;
        ProdRouteJob        prodRouteJob;
        RecId               origRecId;

        ProdJobType         prodJobType;
        GanttTmpWrkCtrJob   ganttTmpWrkCtrJobBase = this.ganttTableBaseData().parmTableBuffer();
        setprefix(strfmt("@SYS90210", ganttTmpWrkCtrJob.RefId));
        setprefix(strfmt("@SYS75245", ganttTmpWrkCtrJob.WrkCtrId, ganttTmpWrkCtrJob.OprNum, ganttTmpWrkCtrJob.OprPriority, ganttTmpWrkCtrJob.OprId));
        setprefix(strfmt("@SYS9942"     + ' %1', ganttTmpWrkCtrJob.JobType));
        setprefix(strfmt("@SYS22890"    + ' %1', ganttTmpWrkCtrJob.JobId));

        if (mapCurrentRecId2Orig.exists(ganttTmpWrkCtrJob.RecId))
        {
            origRecId = mapCurrentRecId2Orig.lookup(ganttTmpWrkCtrJob.RecId);
        }

        if (mapValidationRecordsProd.exists(origRecId))
        {
            [prodRouteJob, prodRoute, prodTable] = mapValidationRecordsProd.lookup(origRecId);
        }
        else
        {
            prodTable       = this.prodTable();
            prodRoute       = this.prodRoute();
            prodRouteJob    = this.prodRouteJob();
        }

        // Check if the original record is modified
        if (!this.checkOrigRecordStatus(prodRouteJob))
        {
            return false;
        }

        if (!this.checkAccessRightsProd())
        {
            return false;
        }

        // Check if the production order exists
        if (!prodTable.RecId)
        {
            return checkFailed(strfmt(ProdTable::txtNotExist(), ganttTmpWrkCtrJob.RefId));
        }

        // Check if the production operation exists
        if (!prodRoute.RecId)
        {
            return checkFailed(strfmt("@SYS113049", ganttTmpWrkCtrJob.OprNum, ganttTmpWrkCtrJob.RefId));
        }

        // Check if the production job exists
        if (!prodRouteJob.RecId)
        {
            return checkFailed(strfmt("@SYS113059", ganttTmpWrkCtrJob.JobId, ganttTmpWrkCtrJob.RefId));
        }

        // Check the grouping changes that are common for all job types
        if (!this.checkGroupingChangesCommonAll())
        {
            return false;
        }

        // Check the grouping changes that are common for the production and planned production job types
        if (!this.checkGroupingChangesCommonProd())
        {
            return false;
        }

        // Check if the production id has been changed
        if (!this.checkRefNotChanged(strfmt("@SYS113402", ganttTmpWrkCtrJobBase.RefId)))
        {
            return false;
        }

        // check route group setup

        prodJobType = prodRouteJob.prodJobType();

        if (!this.checkProdJobType(prodJobType, prodRoute.routeGroup()))
        {
            return false;
        }

        if (prodRouteJob.JobFinished)
        {
            return checkFailed("@SYS113983");
        }

        if (prodTable.ProdLocked)
        {
            return checkFailed("@SYS8998");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteProj</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the current project hour forecast.
    /// </summary>
    /// <returns>
    ///    true if validation passes; otherwise, false.
    /// </returns>
    protected boolean validateWriteProj()
    {
        ProjTable           projTable;
        ProjForecastEmpl    projForecastEmpl;
        RecId               origRecId;

        GanttTmpWrkCtrJob   ganttTmpWrkCtrJobBase   = this.ganttTableBaseData().parmTableBuffer();
        setprefix(strfmt("@SYS4534"  + ' %1', ganttTmpWrkCtrJob.RefId));
        setprefix(strfmt("@SYS75252", ganttTmpWrkCtrJob.WrkCtrId));

        if (mapCurrentRecId2Orig.exists(ganttTmpWrkCtrJob.RecId))
        {
            origRecId = mapCurrentRecId2Orig.lookup(ganttTmpWrkCtrJob.RecId);
        }

        if (mapValidationRecordsProj.exists(origRecId))
        {
            [projForecastEmpl, projTable] = mapValidationRecordsProj.lookup(origRecId);
        }
        else
        {
            projTable               = this.projTable();
            projForecastEmpl        = this.projForecastEmpl();
        }

        // Check if the original record is modified
        if (!this.checkOrigRecordStatus(projForecastEmpl))
        {
            return false;
        }

        if (!this.checkAccessRightsProj())
        {
            return false;
        }

        // Check if the project exists
        if (!projTable.RecId)
        {
            return checkFailed(strfmt(ProjTable::txtNotExist(), ganttTmpWrkCtrJob.RefId));
        }

        // Check if the project hour forecast
        if (!projForecastEmpl.RecId)
        {
            return checkFailed(strfmt("@SYS113080", ganttTmpWrkCtrJob.JobId, tablepname(ProjForecastEmpl)));
        }

        // Check if the site has been changed
        if (!this.checkSiteNotChanged("@SYS113405"))
        {
            return false;
        }

        // Check the grouping changes that are common for all job types
        if (!this.checkGroupingChangesCommonAll())
        {
            return false;
        }

        // Check if the project id has been changed
        if (!this.checkRefNotChanged(strfmt("@SYS113408", ganttTmpWrkCtrJobBase.RefId)))
        {
            return false;
        }

        // Check if the operation has been changed
        if (!this.checkOprNotChanged("@SYS113407"))
        {
            return false;
        }

        // Check if the From date is less than the project's start date
        if (ganttTmpWrkCtrJob.SchedFromDate < this.projTable().StartDate)
        {
            return checkFailed("@SYS107206");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GanttTable_WrkCtrJob construct()
    {
        return new GanttTable_WrkCtrJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModifiedRecordsData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets records for the validation of a specified set of jobs.
    /// </summary>
    /// <param name="_conLoadRecIds">
    ///    A container holding the job identifiers that the validation data is needed for.
    ///    Each set item is a
    ///    container that identifies the record by the type and <c>RecId</c> in the format
    ///    <c>WrkCtrCapRefType, RecId</c>.
    /// </param>
    /// <returns>
    ///       The three maps packed together in one container.Each map contains records for the validation of the job on the client side for a specific order type.
    ///    <list type="bullet">
    ///       <item>
    ///          <description>
    ///             <c>mapLoadedRecordsProd</c> - A <c>Map</c> holding the records needed for production order jobs
    ///             validation. The key is the job <c>RecId</c>. The value is a container in the format <see
    ///             cref="ProdRouteJob Table" /> records, <see cref="ProdRoute Table" /> records, and <see
    ///             cref="ProdTable Table" /> records.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <c>mapLoadedRecordsPlannedProd</c> - A <c>Map</c> holding the records needed for production order
    ///             jobs validation. The key is the job <c>RecId</c>. The value is a container in the format <see
    ///             cref="ReqRouteJob Table" /> records, <see cref="ReqRoute Table" /> records, and <see cref="ReqPO
    ///             Table" /> records.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             <c>mapLoadedRecordsProj</c> - A <c>Map</c> holding the records needed for project activities
    ///             validation. The key is the job <c>RecId</c>. The value is a container in the format <see
    ///             cref="ProjEmplForecastTransId Extended Data Type" /> and <see cref="ProjTable Table" /> records.
    ///          </description>
    ///       </item>
    ///    </list>
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    Exception thrown in case the <paramref name="_conLoadRecIds" /> contains invalid data.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///    Exception thrown in case the <paramref name="_conLoadRecIds" /> contains invalid data.
    ///    Exception
    ///    thrown if one of the jobs that needs data to be loaded has an incorrect order type.
    /// </exception>
    public static container getModifiedRecordsData(container _conLoadRecIds)
    {
        Set                 selLoadRecIds;
        SetEnumerator       setEnumerator;
        Map                 mapLoadedRecordsProd            = new Map(Types::Int64, Types::Container);
        Map                 mapLoadedRecordsPlannedProd     = new Map(Types::Int64, Types::Container);
        Map                 mapLoadedRecordsProjForecast    = new Map(Types::Int64, Types::Container);
        container           conIdentifier;
        WrkCtrCapRefType    wrkCtrCapRefType;
        RecId               recId;

        void loadProdRecord(RecId _recId)
        {
            ProdRouteJob    prodRouteJob;
            ProdRoute       prodRoute;
            ProdTable       prodTable;

            prodRouteJob    = ProdRouteJob::findRecId(_recId);
            prodRoute       = ProdRoute::find(prodRouteJob.ProdId, prodRouteJob.OprNum, prodRouteJob.OprPriority);
            prodTable       = ProdTable::find(prodRouteJob.ProdId);

            mapLoadedRecordsProd.insert(_recId, [prodRouteJob, prodRoute, prodTable]);
        }

        void loadPlannedProdRecord(RecId _recId)
        {
            ReqRouteJob     reqRouteJob;
            ReqRoute        reqRoute;
            ReqPO           reqPO;

            reqRouteJob     = ReqRouteJob::findRecId(_recId);
            reqRoute        = ReqRoute::find(reqRouteJob.PlanVersion, reqRouteJob.ReqPOId, reqRouteJob.OprNum, reqRouteJob.OprPriority);
            reqPO           = ReqPO::find(reqRouteJob.PlanVersion, reqRouteJob.ReqPOId);

            mapLoadedRecordsPlannedProd.insert(_recId, [reqRouteJob, reqRoute, reqPO]);
        }

        void loadProjRecord(RecId _recId)
        {
            ProjForecastEmpl    projForecastEmpl;
            ProjTable           projTable;

            projForecastEmpl    = ProjForecastEmpl::findRecId(_recId);
            projTable           = ProjTable::find(projForecastEmpl.ProjId);

            mapLoadedRecordsPlannedProd.insert(_recId, [projForecastEmpl, projTable]);
        }

        selLoadRecIds = Set::create(_conLoadRecIds);

        if (!selLoadRecIds)
        {
            throw error("@SYS122393");
        }

        setEnumerator = selLoadRecIds.getEnumerator();
        while (setEnumerator && setEnumerator.moveNext())
        {
            conIdentifier = setEnumerator.current();
            [wrkCtrCapRefType, recId] = conIdentifier;
            switch (wrkCtrCapRefType)
            {
                case WrkCtrCapRefType::Production:
                    loadProdRecord(recId);
                    break;

                case WrkCtrCapRefType::PlannedOrder:
                    loadPlannedProdRecord(recId);
                    break;

                case WrkCtrCapRefType::Project:
                    loadProjRecord(recId);
                    break;

                default:
                    throw error("@SYS6144");
            }
        }

        return [mapLoadedRecordsProd.pack(), mapLoadedRecordsPlannedProd.pack(), mapLoadedRecordsProjForecast.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAllowUserModification</Name>
				<Source><![CDATA[
    public static GanttTable_WrkCtrJob newAllowUserModification(boolean _allowUserModification,
                                                                boolean _keepBaseData = _allowUserModification)
    {
        GanttTable_WrkCtrJob ganttTable;
        ganttTable = GanttTable_WrkCtrJob::construct();

        ganttTable.parmAllowUserModification(_allowUserModification);
        ganttTable.parmKeepBaseData(_keepBaseData);
        ganttTable.parmShowInUserTZ(ProdGanttApplyUserTimezoneOffsetFlight::instance().isEnabled() &&
            ProdApplyUserTimezoneOffsetFlight::instance().isEnabled() &&
            ProdParameters::find().ShowSchedDateTimeWithUserTimeZone == ProdShowDateTimeTimeZone::UserTimeZone);

        ganttTable.init();

        return ganttTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityRequirementSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the activity requirement set for the current buffer.
    /// </summary>
    /// <returns>The activity requirement set for the current buffer.</returns>
    public WrkCtrActivityRequirementSet activityRequirementSet()
    {
        GanttTmpWrkCtrJob localTableWrkCtrJob = this.parmTableBuffer();
        switch (localTableWrkCtrJob.RefType)
        {
            case WrkCtrCapRefType::Production:
                return this.prodRoute().activityRequirementSet();
            case WrkCtrCapRefType::PlannedOrder:
                return this.reqRoute().refRouteOpr().activityRequirementSet();                
            case WrkCtrCapRefType::Project:
                return this.projForecastEmpl().activityRequirementSet();
        }

        return null;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDuplicate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a duplicate record based on the values of the current buffer.
    /// </summary>
    /// <returns>The duplicate buffer.</returns>
    public GanttTmpWrkCtrJob findDuplicate()
    {
        GanttTmpWrkCtrJob tmpWrkCtrJobSearch;

        if (improvedPerformanceDuplicateSearchFeatureEnabled)
        {
            this.findDuplicateInternal(tmpWrkCtrJobSearch);

            return tmpWrkCtrJobSearch;
        }

        tmpWrkCtrJobSearch.setTmpData(ganttTmpWrkCtrJob);

        select firstonly tmpWrkCtrJobSearch
            where tmpWrkCtrJobSearch.RefId == ganttTmpWrkCtrJob.RefId
               && tmpWrkCtrJobSearch.RefType == ganttTmpWrkCtrJob.RefType
               && tmpWrkCtrJobSearch.JobId == ganttTmpWrkCtrJob.JobId
               && tmpWrkCtrJobSearch.WrkCtrId == ganttTmpWrkCtrJob.WrkCtrId
               && tmpWrkCtrJobSearch.WrkCtrGroupId == ganttTmpWrkCtrJob.WrkCtrGroupId
               && tmpWrkCtrJobSearch.OprNum  == ganttTmpWrkCtrJob.OprNum
               && tmpWrkCtrJobSearch.OprPriority == ganttTmpWrkCtrJob.OprPriority
               && tmpWrkCtrJobSearch.NumPrimary == ganttTmpWrkCtrJob.NumPrimary
               && tmpWrkCtrJobSearch.NumSecondary == ganttTmpWrkCtrJob.NumSecondary
               && tmpWrkCtrJobSearch.JobType == ganttTmpWrkCtrJob.JobType;

        return tmpWrkCtrJobSearch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashKey</Name>
				<Source><![CDATA[
    protected str hashKey()
    {
        str hashKey = ganttTmpWrkCtrJob.RefId + '~'
            + enum2Str(ganttTmpWrkCtrJob.RefType) + '~'
            + ganttTmpWrkCtrJob.JobId + '~'
            + ganttTmpWrkCtrJob.WrkCtrId + '~'
            + ganttTmpWrkCtrJob.WrkCtrGroupId + '~'
            + int2Str(ganttTmpWrkCtrJob.OprNum) + '~'
            + enum2Str(ganttTmpWrkCtrJob.OprPriority) + '~'
            + int2Str(ganttTmpWrkCtrJob.NumPrimary) + '~'
            + int2Str(ganttTmpWrkCtrJob.NumSecondary) + '~'
            + enum2Str(ganttTmpWrkCtrJob.JobType);

        return hashKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequiresMaterials</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>RequiresMaterials</c> field value in the current <see cref="T:GanttTmpWrkCtrJob" /> buffer.
    /// </summary>
    /// <param name = "_requiresMaterials">A material requirement flag.</param>
    internal void setRequiresMaterials(boolean _requiresMaterials)
    {
        ganttTmpWrkCtrJob.RequiresMaterials = _requiresMaterials;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>