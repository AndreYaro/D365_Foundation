<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationAdjustment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationAdjustment</c> class provides features for Tax integration tax adjustment.
/// </summary>
public class TaxIntegrationAdjustment
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isEnabledForTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the tax code adjustment feature enabled for the specific transaction.
    /// </summary>
    /// <param name = "_tableId">The transaction tableId.</param>
    /// <param name = "_recId">The transaction recId.</param>
    /// <returns>true if allow tax code adjustment; otherwise, false.</returns>
    /// <remarks>
    /// Supports transactions: header charge, line charge,
    /// sales order header, sales order line, sales order confirmation,
    /// sales order picking list, sales order packing slip, sales order invoice.
    /// If developers need support for more transactions, add the corresponding transaction.
    /// </remarks>
    public static boolean isEnabledForTransaction(RefTableId _tableId, RefRecId _recId)
    {
        return false; // Disable this feature.

        switch (_tableId)
        {
            case tableNum(SalesTable):
            case tableNum(SalesLine):
            case tableNum(SalesParmTable):
            case tableNum(SalesParmLine):
                return TaxIntegrationAdjustment::isEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Sales);

            case tableNum(MarkupTrans):
                MarkupTrans markupTrans = MarkupTrans::findRecId(_recId);
                return markupTrans.TransTableId != tableNum(MarkupTrans)
                    && TaxIntegrationAdjustment::isEnabledForTransaction(markupTrans.TransTableId, markupTrans.TransRecId);

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledForBusinessProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the tax code adjustment feature enabled for specific business processes in tax service.
    /// </summary>
    /// <param name = "_businessProcess">The business process to check.</param>
    /// <returns>true if allow tax code adjustment; otherwise, false.</returns>
    private static boolean isEnabledForBusinessProcess(TaxIntegrationBusinessProcess _businessProcess)
    {
        return Tax::isTaxIntegrationEnabledForBusinessProcess(_businessProcess)
            && TaxIntegrationTaxServiceParameters::find().TaxCodeAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveTaxAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves tax adjustment into the database for the specific transaction.
    /// </summary>
    /// <param name = "_tableId">The transaction tableId.</param>
    /// <param name = "_recId">The transaction recId.</param>
    /// <param name = "_tmpTaxWorkTrans">The tax overview.</param>
    /// <param name = "_tmpTaxRegulation">The tax adjustment.</param>
    /// <param name = "_isCalledFromParmTable">Whether it is called from the parm table.</param>
    public static void saveTaxAdjustment(
        RefTableId _tableId,
        RefRecId _recId,
        TmpTaxWorkTrans _tmpTaxWorkTrans,
        TmpTaxRegulation _tmpTaxRegulation,
        boolean _isCalledFromParmTable)
    {
        // Validates tax adjustment records, notifies users invalid lines, stops saving invalid records.
        if (!TaxIntegrationAdjustment::isValidTaxAdjustment(_tmpTaxRegulation))
        {
            throw Exception::Error;
        }

        // Saves the tax overview (TmpTaxWorkTrans) to the database table (TaxWorkRegulation) and mark them as 'deleted' records,
        // then based on the tax adjustment (TmpTaxRegulation) to update/insert records of the database table (TaxWorkRegulation)
        // and update them as 'adjusted' recods. So that deleted records status = 'deleted', updated/inserted records status = 'adjusted'.
        TaxIntegrationAdjustment::saveTmpTaxWorkTransToTaxWorkRegulation(_tableId, _recId, _tmpTaxWorkTrans);
        TaxIntegrationAdjustment::saveTmpTaxRegulationToTaxWorkRegulation(_tmpTaxRegulation, _isCalledFromParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveTmpTaxWorkTransToTaxWorkRegulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the tax overview <c>TmpTaxWorkTrans</c> to the database table <c>TaxWorkRegulation</c> and mark them as 'deleted' records.
    /// </summary>
    /// <param name = "_tableId">The transaction tableId.</param>
    /// <param name = "_recId">The transaction recId.</param>
    /// <param name = "_tmpTaxWorkTrans">The tax overview.</param>
    private static void saveTmpTaxWorkTransToTaxWorkRegulation(
        RefTableId _tableId,
        RefRecId _recId,
        TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        TmpTaxWorkTrans tmpTaxWorkTransLocal;
        tmpTaxWorkTransLocal.setTmpData(_tmpTaxWorkTrans);

        while select tmpTaxWorkTransLocal
        {
            if (TaxIntegrationAdjustment::isRelatedTmpTaxWorkTrans(_tableId, _recId, tmpTaxWorkTransLocal))
            {
                TaxWorkRegulation taxWorkRegulation = TaxWorkRegulation::findByTaxCode(
                    tmpTaxWorkTransLocal.SourceTableId,
                    tmpTaxWorkTransLocal.SourceRecId,
                    tmpTaxWorkTransLocal.TaxCode,
                    true);

                TaxIntegrationAdjustment::copyTmpTaxWorkTransToTaxWorkRegulationAsDeleted(taxWorkRegulation, tmpTaxWorkTransLocal);

                taxWorkRegulation.write();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTmpTaxWorkTransToTaxWorkRegulationAsDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies records as deleted status from <c>TmpTaxWorkTrans</c> to <c>TaxWorkRegulation</c>.
    /// </summary>
    /// <param name = "_target">The <c>TaxWorkRegulation</c> record.</param>
    /// <param name = "_source">The <c>TmpTaxWorkTrans</c> record.</param>
    private static void copyTmpTaxWorkTransToTaxWorkRegulationAsDeleted(TaxWorkRegulation _target, TmpTaxWorkTrans _source)
    {
        _target.Status                       = TaxAdjustmentStatus::Deleted;

        _target.HeadingTableId               = _source.SourceTableId;
        _target.HeadingRecId                 = _source.SourceRecId;
        _target.TaxCode                      = _source.TaxCode;
        _target.TaxDirection                 = _source.TaxDirection;

        _target.SourceBaseAmountCurRegulated = _source.SourceBaseAmountCurRegulated;
        _target.TaxRegulationAmountCur       = _source.SourceRegulateAmountCur;
        _target.TaxInCostPriceRegulated      = _source.TaxInCostPriceRegulated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveTmpTaxRegulationToTaxWorkRegulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the tax adjustment <c>TmpTaxRegulation</c> to database table <c>TaxWorkRegulation</c> and mark them as 'adjusted' records.
    /// </summary>
    /// <param name = "_tmpTaxRegulation">The tax adjustment.</param>
    /// <param name = "_isCalledFromParmTable">Whether it is called from the parm table.</param>
    private static void saveTmpTaxRegulationToTaxWorkRegulation(TmpTaxRegulation _tmpTaxRegulation, boolean _isCalledFromParmTable)
    {
        TmpTaxRegulation tmpTaxRegulationLocal;
        tmpTaxRegulationLocal.setTmpData(_tmpTaxRegulation);
        while select tmpTaxRegulationLocal
        {
            // New charge's tax source must be MarkupTrans.
            if (tmpTaxRegulationLocal.SourceChargeLineNum
                && tmpTaxRegulationLocal.SourceTableId != tableNum(MarkupTrans))
            {
                MarkupTrans markupTrans;
                select firstonly RecId from markupTrans
                    where markupTrans.TransTableId == tmpTaxRegulationLocal.SourceTableId
                        && markupTrans.TransRecId == tmpTaxRegulationLocal.SourceRecId
                        && markupTrans.LineNum == tmpTaxRegulationLocal.SourceChargeLineNum;

                tmpTaxRegulationLocal.SourceTableId = tableNum(MarkupTrans);
                tmpTaxRegulationLocal.SourceRecId = markupTrans.RecId;
            }

            TaxWorkRegulation taxWorkRegulation = TaxWorkRegulation::findByTaxCode(
                tmpTaxRegulationLocal.SourceTableId,
                tmpTaxRegulationLocal.SourceRecId,
                tmpTaxRegulationLocal.TaxCode,
                true);

            TaxIntegrationAdjustment::copyTmpTaxRegulationToTaxWorkRegulationAsAdjusted(
                taxWorkRegulation,
                tmpTaxRegulationLocal,
                _isCalledFromParmTable);

            taxWorkRegulation.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTmpTaxRegulationToTaxWorkRegulationAsAdjusted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies records as adjusted from <c>TmpTaxRegulation</c> to <c>TaxWorkRegulation</c>.
    /// </summary>
    /// <param name = "_target">The <c>TaxWorkRegulation</c> record.</param>
    /// <param name = "_source">The <c>TmpTaxRegulation</c> record.</param>
    /// <param name = "_isCalledFromParmTable"> Whether it is called from the parm table.</param>
    /// <param name = "_sign">The amount sign.</param>
    private static void copyTmpTaxRegulationToTaxWorkRegulationAsAdjusted(
        TaxWorkRegulation _target,
        TmpTaxRegulation _source,
        boolean _isCalledFromParmTable,
        Sign _sign = -1)
    {
        _target.Status         = TaxAdjustmentStatus::Adjusted;

        _target.HeadingTableId = _source.SourceTableId;
        _target.HeadingRecId   = _source.SourceRecId;
        _target.TaxCode        = _source.TaxCode;
        _target.TaxDirection   = _source.TaxDirection;

        if (_source.OverrideCalculatedTax)
        {
            // The parm table uses ActualSourceRegulateAmountCur field to adjust tax amount. When the first time adjust tax
            // amount on parm table, apply adjusted amount to TaxRegulationAmountCur and ActualTaxRegulationAmountCur.
            if (_isCalledFromParmTable && !_target.OverrideCalculatedTax)
            {
                _target.TaxRegulationAmountCur       = _source.ActualSourceRegulateAmountCur * _sign;
                _target.ActualTaxRegulationAmountCur = _source.ActualSourceRegulateAmountCur * _sign;
            }
            else
            {
                _target.TaxRegulationAmountCur       = _source.SourceRegulateAmountCur * _sign;
                _target.ActualTaxRegulationAmountCur = _source.ActualSourceRegulateAmountCur * _sign;
            }

            _target.SourceBaseAmountCurRegulated = _source.SourceBaseAmountCurRegulated * _sign;
            _target.TaxInCostPriceRegulated      = _source.TaxInCostPriceRegulated * _sign;
            _target.OverrideCalculatedTax        = _source.OverrideCalculatedTax;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRelatedTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the <c>TmpTaxWorkTrans</c> record is related to the specific transaction line.
    /// Background: If the 'Apply tax adjustment' is called from line level, the <c>TmpTaxWorkTrans</c> buffer includes
    /// this transaction's all records, this method is used to check the record is related to the specific transaction line.
    /// </summary>
    /// <param name = "_tableId">The transaction tableId.</param>
    /// <param name = "_recId">The transaction recId.</param>
    /// <param name = "_tmpTaxWorkTrans">The <c>TmpTaxWorkTrans</c> record.</param>
    /// <returns>true if it is related; otherwise, false.</returns>
    protected static boolean isRelatedTmpTaxWorkTrans(RefTableId _tableId, RefRecId _recId, TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        /// Needs to check the relationship only if it is called from line level.
        if (Global::mappingExists(tableNum(SalesPurchJournalLine), _tableId))
        {
            RefTableId sourceTableId = _tmpTaxWorkTrans.SourceTableId;
            RefRecId sourceRecId = _tmpTaxWorkTrans.SourceRecId;

            // If the source is MarkupTrans, uses the MarkupTrans source.
            if (sourceTableId == tableNum(MarkupTrans))
            {
                MarkupTrans markupTrans = MarkupTrans::findRecId(sourceRecId);
                sourceTableId = markupTrans.TransTableId;
                sourceRecId = markupTrans.TransRecId;
            }

            // It is a related record when the source is the specific transaction line.
            if (sourceTableId == _tableId && sourceRecId == _recId)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else if(Global::mappingExists(tableNum(SalesPurchJournalTable), _tableId))
        {
            // It must be a related record if it is called from the header level.
            return true;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidTaxAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the whole <c>TmpTaxRegulation</c> records are valid tax adjustments, and notifies users invalid lines.
    /// </summary>
    /// <param name = "_tmpTaxRegulation">The <c>TmpTaxRegulation</c> records buffer.</param>
    /// <returns>true if they are valid tax adjustments; otherwise, false.</returns>
    private static boolean isValidTaxAdjustment(TmpTaxRegulation _tmpTaxRegulation)
    {
        TmpTaxRegulation tmpTaxRegulationLocal;
        tmpTaxRegulationLocal.setTmpData(_tmpTaxRegulation);

        // All input lines must be valid and tax codes are unique.
        boolean isValidTaxAdjustment = true;
        while select tmpTaxRegulationLocal
        {
            if (!(TaxIntegrationAdjustment::isValidTaxAdjustmentLine(tmpTaxRegulationLocal)
                && TaxIntegrationAdjustment::isUniqueTaxCode(tmpTaxRegulationLocal, _tmpTaxRegulation)))
            {
                isValidTaxAdjustment = false;
            }
        }

        return isValidTaxAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidTaxAdjustmentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the tax adjustment record is a valid tax adjustment, and notifies users of invalid content.
    /// The method services for TaxIntegrationAdjustment::isValidTaxAdjustment().
    /// </summary>
    /// <param name = "_tmpTaxRegulationLine">The tax adjustment record.</param>
    /// <returns>true if it is a valid tax adjustment line; otherwise, false.</returns>
    private static boolean isValidTaxAdjustmentLine(TmpTaxRegulation _tmpTaxRegulationLine)
    {
        if (_tmpTaxRegulationLine.SourceTableId
            && _tmpTaxRegulationLine.SourceRecId
            && _tmpTaxRegulationLine.TaxCode)
        {
            // If it can pick one of the rules, it is valid.
            if ((_tmpTaxRegulationLine.SourceLineType == TaxIntegrationLineType::NormalLine
                    && _tmpTaxRegulationLine.SourceOrderLineNum
                    && _tmpTaxRegulationLine.SourceChargeLineNum == 0)
                || (_tmpTaxRegulationLine.SourceLineType == TaxIntegrationLineType::HeaderCharge
                    && _tmpTaxRegulationLine.SourceOrderLineNum == 0
                    && _tmpTaxRegulationLine.SourceChargeLineNum)
                || (_tmpTaxRegulationLine.SourceLineType == TaxIntegrationLineType::LineCharge
                    && _tmpTaxRegulationLine.SourceOrderLineNum
                    && _tmpTaxRegulationLine.SourceChargeLineNum))
            {
                return true;
            }
        }

        // Notifies users of invalid content of tax adjustment record.
        error(strFmt("@TaxIntegrationException:InvalidTaxAdjustmentLine", strFmt("@TaxIntegration:TaxAdjustmentLine",
            "@TaxIntegration:LineType", _tmpTaxRegulationLine.SourceLineType,
            "@TaxIntegration:OrderLineNumber",_tmpTaxRegulationLine.SourceOrderLineNum,
            "@TaxIntegration:ChargeLineNumber",_tmpTaxRegulationLine.SourceChargeLineNum,
            "@SYS21877",_tmpTaxRegulationLine.TaxCode)));

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUniqueTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the tax adjustment record has unique tax code.
    /// The method services for TaxIntegrationAdjustment::isValidTaxAdjustment().
    /// </summary>
    /// <param name = "_tmpTaxRegulationLine">The tax adjustment record line.</param>
    /// <param name = "_tmpTaxRegulationAll">All tax adjustments records lines.</param>
    /// <returns>true if the tax adjustment line has unique tax code; otherwise, false.</returns>
    private static boolean isUniqueTaxCode(TmpTaxRegulation _tmpTaxRegulationLine, TmpTaxRegulation _tmpTaxRegulationAll)
    {
        TmpTaxRegulation tmpTaxRegulationLocal;
        tmpTaxRegulationLocal.setTmpData(_tmpTaxRegulationAll);

        select firstonly tmpTaxRegulationLocal
            where tmpTaxRegulationLocal.RecId != _tmpTaxRegulationLine.RecId
                && tmpTaxRegulationLocal.SourceTableId == _tmpTaxRegulationLine.SourceTableId
                && tmpTaxRegulationLocal.SourceRecId == _tmpTaxRegulationLine.SourceRecId
                && tmpTaxRegulationLocal.TaxCode == _tmpTaxRegulationLine.TaxCode;

        if (!tmpTaxRegulationLocal.RecId)
        {
            return true;
        }

        // Notifies users that duplicate tax codes are not allowed.
        error(strFmt("@TaxIntegrationException:DuplicateTaxCodesNotAllowed", _tmpTaxRegulationLine.TaxCode, strFmt("@TaxIntegration:TaxAdjustmentLine",
            "@TaxIntegration:LineType", _tmpTaxRegulationLine.SourceLineType,
            "@TaxIntegration:OrderLineNumber",_tmpTaxRegulationLine.SourceOrderLineNum,
            "@TaxIntegration:ChargeLineNumber",_tmpTaxRegulationLine.SourceChargeLineNum,
            "@SYS21877",_tmpTaxRegulationLine.TaxCode)));

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTaxAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the transaction's tax adjustment by clearing the tax adjustment records of the specific transaction.
    /// </summary>
    /// <param name = "_tableId">The transaction tableId.</param>
    /// <param name = "_recId">The transaction recId.</param>
    public static void resetTaxAdjustment(RefTableId _tableId, RefRecId _recId)
    {
        // If it is called from line level, only resets this line's tax adjustment.
        if (Global::mappingExists(tableNum(SalesPurchJournalLine), _tableId))
        {
            SalesPurchJournalTable trsanctionTable =
                SalesPurchJournalLine::findRecId(_tableId, _recId).salesPurchJournalTable();

            TaxIntegrationDocumentObject document =
                TaxIntegrationHelper::constructDocument(trsanctionTable.SourceTableId, trsanctionTable.SourceRecId, true);

            if (document)
            {
                TaxIntegrationLocalId lineLocalId = TaxIntegrationAbstractRecordObject::getLocalIdStatic(_tableId, _recId);
                TaxIntegrationLineObject line = document.getLine(lineLocalId);
                if (line)
                {
                    line.clearTaxAdjustment();
                }
            }
        }
        // If it is called from header level, resets the whole transaction's tax adjustment.
        else if (Global::mappingExists(tableNum(SalesPurchJournalTable), _tableId))
        {
            TaxIntegrationDocumentObject document = TaxIntegrationHelper::constructDocument(_tableId, _recId, true);
            if (document)
            {
                document.clearTaxAdjustment();
            }
        }
        else
        {
            TaxIntegrationAdjustment::resetTaxAdjustmentExtension(_tableId, _recId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTaxAdjustmentExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the transaction's tax adjustment. This method is used for customization to handle
    /// specific transaction which TaxIntegrationAdjustment::resetTaxAdjustment() hasn't handled.
    /// </summary>
    /// <param name = "_tableId">The transaction tableId.</param>
    /// <param name = "_recId">The transaction recId.</param>
    [Replaceable]
    protected static void resetTaxAdjustmentExtension(RefTableId _tableId, RefRecId _recId)
    {
        throw error(strFmt("@TaxIntegrationException:TaxIntegrationCannotSupport", tableId2Name(_tableId), funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsTaxAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the form exists tax adjustment.
    /// Background: when click the OK button, it should apply tax adjustment if the form exists tax adjustment,
    /// but for performance, it should exit if the form doesn't exist tax adjustment.
    /// </summary>
    /// <param name = "_tableId">The transaction tableId.</param>
    /// <param name = "_recId">The transaction recId.</param>
    /// <param name = "_tmpTaxWorkTrans">The <c>TmpTaxWorkTrans</c> records buffer.</param>
    /// <param name = "_tmpTaxRegulation">The <c>TmpTaxRegulation</c> records buffer.</param>
    /// <param name = "_sign">The amount sign.</param>
    /// <returns>true if the form exists tax adjustment; otherwise, false.</returns>
    internal static boolean existsTaxAdjustment(
        RefTableId _tableId,
        RefRecId _recId,
        TmpTaxWorkTrans _tmpTaxWorkTrans,
        TmpTaxRegulation _tmpTaxRegulation,
        Sign _sign = -1)
    {
        TmpTaxWorkTrans tmpTaxWorkTransLocal;
        TmpTaxRegulation tmpTaxRegulationLocal;
        tmpTaxWorkTransLocal.setTmpData(_tmpTaxWorkTrans);
        tmpTaxRegulationLocal.setTmpData(_tmpTaxRegulation);

        select firstonly tmpTaxRegulationLocal
            notexists join tmpTaxWorkTransLocal
                where tmpTaxWorkTransLocal.SourceTableId == tmpTaxRegulationLocal.SourceTableId
                    && tmpTaxWorkTransLocal.SourceRecId == tmpTaxRegulationLocal.SourceRecId
                    && tmpTaxWorkTransLocal.TaxCode == tmpTaxRegulationLocal.TaxCode
                    && tmpTaxWorkTransLocal.SourceBaseAmountCurRegulated == tmpTaxRegulationLocal.SourceBaseAmountCurRegulated
                    && tmpTaxWorkTransLocal.SourceRegulateAmountCur == tmpTaxRegulationLocal.ActualSourceRegulateAmountCur * _sign;

        if (tmpTaxRegulationLocal)
        {
            // Users added/updated tax lines.
            return true;
        }

        while select tmpTaxWorkTransLocal
        {
            if (TaxIntegrationAdjustment::isRelatedTmpTaxWorkTrans(_tableId, _recId, tmpTaxWorkTransLocal))
            {
                select firstonly tmpTaxRegulationLocal
                    where tmpTaxWorkTransLocal.SourceTableId == tmpTaxRegulationLocal.SourceTableId
                        && tmpTaxWorkTransLocal.SourceRecId == tmpTaxRegulationLocal.SourceRecId
                        && tmpTaxWorkTransLocal.TaxCode == tmpTaxRegulationLocal.TaxCode
                        && tmpTaxWorkTransLocal.SourceBaseAmountCurRegulated == tmpTaxRegulationLocal.SourceBaseAmountCurRegulated
                        && tmpTaxWorkTransLocal.SourceRegulateAmountCur == tmpTaxRegulationLocal.ActualSourceRegulateAmountCur * _sign;

                if (!tmpTaxRegulationLocal)
                {
                    // Users removed tax lines.
                    return true;
                }
            }
        }

        // Users haven't adjusted any tax.
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceRegulateAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates table <c>TmpTaxRegulation</c> field SourceRegulateAmountCur according to table <c>TaxWorkRegulation</c>.
    /// Background: When multiple partial invoice, on parm table (e.g. <c>SalesParmTable</c>) users adjust tax amount via field ActualSourceRegulateAmountCur.
    /// After re-calc tax, the form needs to keep SourceRegulateAmountCur update with header tax adjustment. So that the next invoice can get the adjusted
    /// tax amount = SourceRegulateAmountCur - ActualSourceRegulateAmountCur.
    /// </summary>
    /// <param name = "_tmpTaxRegulation">The <c>TmpTaxRegulation</c> records buffer.</param>
    /// <param name = "_sign">The amount sign.</param>
    internal static void updateSourceRegulateAmountCur(TmpTaxRegulation _tmpTaxRegulation, sign _sign = -1)
    {
        TaxWorkRegulation taxWorkRegulation;
        while select forupdate _tmpTaxRegulation
        {
            select firstonly taxWorkRegulation
                where taxWorkRegulation.HeadingTableId == _tmpTaxRegulation.SourceTableId
                    && taxWorkRegulation.HeadingRecId == _tmpTaxRegulation.SourceRecId
                    && taxWorkRegulation.TaxCode == _tmpTaxRegulation.TaxCode
                    && taxWorkRegulation.OverrideCalculatedTax == NoYes::Yes
                    && taxWorkRegulation.Status == TaxAdjustmentStatus::Adjusted;

            if (taxWorkRegulation)
            {
                _tmpTaxRegulation.SourceRegulateAmountCur = taxWorkRegulation.TaxRegulationAmountCur * _sign;
                _tmpTaxRegulation.update();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>