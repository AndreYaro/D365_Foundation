<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBAssessmentBookISSModel51DP_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>FBAssessmentBookISSModel51DP_BR</c> class is the data provider class for the ISS model 51 report.
/// </summary>
[SRSReportParameterAttribute(classStr(FBAssessmentBookISSContract_BR))]
class FBAssessmentBookISSModel51DP_BR extends SRSReportDataProviderBase
{
    FBAssessmentBookISSModel51ReportTmp_BR taxAssessmentISSReportTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to retrieve data filtered by contract parameters
    /// </summary>
    /// <returns>
    /// The query return to retrieve report data.
    /// </returns>
    protected Query buildQuery()
    {
        Query                           query;
        QueryBuildDataSource            qbds;
        FBAssessmentBookISSContract_BR  contract = this.parmDataContract() as FBAssessmentBookISSContract_BR;

        query = new Query();

        // FBBookingPeriodFiscalDocument_BR
        qbds = query.addDataSource(tableNum(FBBookingPeriodFiscalDocument_BR));
        qbds.addRange(fieldNum(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR)).value(SysQuery::value(contract.parmFBBookingPeriodRecId()));
        qbds.addRange(fieldNum(FBBookingPeriodFiscalDocument_BR, HasIss)).value(SysQuery::value(NoYes::Yes));

        // FiscalDocument_BR
        qbds = qbds.addDataSource(tableNum(FiscalDocument_BR));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, AccountingDate));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, FiscalDocumentSeries));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, FiscalDocumentNumber));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, ThirdPartyCNPJCPF));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, DataAreaId));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, RecId));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, TotalAmount));
        qbds.addGroupByField(fieldNum(FiscalDocument_BR, Status));
        qbds.addRange(fieldNum(FiscalDocument_BR, Direction)).value(SysQuery::value(FiscalDocDirection_BR::Outgoing));

        // FiscalDocumentLine_BR
        qbds = qbds.addDataSource(tableNum(FiscalDocumentLine_BR));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.relations(true);
        qbds.addSelectionField(fieldNum(FiscalDocumentLine_BR, AccountingAmount), SelectionField::Sum);
        qbds.addGroupByField(fieldNum(FiscalDocumentLine_BR, ServiceCode));

        // FiscalDocumentTaxTransView_BR
        qbds = qbds.addDataSource(tableNum(FiscalDocumentTaxTransView_BR));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.addLink(fieldNum(FiscalDocumentLine_BR, RecId), fieldNum(FiscalDocumentTaxTransView_BR, FiscalDocumentLine));
        qbds.addGroupByField(fieldNum(FiscalDocumentTaxTransView_BR, Type));
        qbds.addGroupByField(fieldNum(FiscalDocumentTaxTransView_BR, TaxValue));
        qbds.addSelectionField(fieldNum(FiscalDocumentTaxTransView_BR, TaxBaseAmount), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FiscalDocumentTaxTransView_BR, TaxBaseAmountExempt), SelectionField::Sum);
        qbds.addSelectionField(fieldNum(FiscalDocumentTaxTransView_BR, TaxBaseAmountOther), SelectionField::Sum);
        qbds.addRange(fieldNum(FiscalDocumentTaxTransView_BR, Type)).value(SysQuery::value(TaxType_BR::ISS));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountRetained</Name>
				<Source><![CDATA[
    private AmountMST getTaxAmountRetained(FiscalDocument_BR _fiscalDocument, FiscalDocumentLine_BR _fiscalDocumentLine, FiscalDocumentTaxTransView_BR _fiscalDocumentTaxTransView, NoYes _retainedTax = NoYes::Yes)
    {
        FiscalDocumentTaxTransView_BR   fiscalDocumentTaxTransView;
        FiscalDocumentLine_BR           fiscalDocumentLine;

        if (_fiscalDocument.Status != FiscalDocumentStatus_BR::Cancelled)
        {
            select sum(TaxAmount) from fiscalDocumentTaxTransView
                where fiscalDocumentTaxTransView.RetainedTax == _retainedTax
                    && fiscalDocumentTaxTransView.Type == TaxType_BR::ISS
                    && fiscalDocumentTaxTransView.TaxValue == _fiscalDocumentTaxTransView.TaxValue
                exists join fiscalDocumentLine
                    where fiscalDocumentTaxTransView.FiscalDocumentLine == fiscalDocumentLine.RecId
                        && fiscalDocumentLine.ServiceCode == _fiscalDocumentLine.ServiceCode
                        && fiscalDocumentLine.FiscalDocument == _fiscalDocument.RecId;
        }
        return fiscalDocumentTaxTransView.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAssessmentISSReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>FBAssessmentBookISSModel51ReportTmp_BR</c> table.
    /// </summary>
    /// <returns>
    /// The <c>FBAssessmentBookISSModel51ReportTmp_BR</c>
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(FBAssessmentBookISSModel51ReportTmp_BR))]
    public FBAssessmentBookISSModel51ReportTmp_BR getTaxAssessmentISSReportTmp()
    {
        return taxAssessmentISSReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        Query                           query;
        QueryRun                        queryRun;

        FiscalDocument_BR               fiscalDocument;
        FiscalDocumentLine_BR           fiscalDocumentLine;
        FiscalDocumentTaxTransView_BR   fiscalDocumentTaxTransView;

        FBAssessmentBookISSContract_BR  contract;

        contract = this.parmDataContract() as FBAssessmentBookISSContract_BR;

        changeCompany(contract.parmFiscalEstablishmentDataArea())
        {
            query = this.buildQuery();
            queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                fiscalDocument              = queryRun.get(tableNum(FiscalDocument_BR));
                fiscalDocumentLine          = queryRun.get(tableNum(FiscalDocumentLine_BR));
                fiscalDocumentTaxTransView  = queryRun.get(tableNum(FiscalDocumentTaxTransView_BR));

                taxAssessmentISSReportTmp.clear();

                taxAssessmentISSReportTmp.AccountingDate        = fiscalDocument.AccountingDate;
                taxAssessmentISSReportTmp.FiscalDocumentSeries  = fiscalDocument.FiscalDocumentSeries;
                taxAssessmentISSReportTmp.FiscalDocumentNumber  = fiscalDocument.FiscalDocumentNumber;
                taxAssessmentISSReportTmp.ThirdPartyCNPJCPF     = fiscalDocument.ThirdPartyCNPJCPF;
                taxAssessmentISSReportTmp.ServiceCode           = fiscalDocumentLine.ServiceCode;
                taxAssessmentISSReportTmp.TaxValue              = fiscalDocumentTaxTransView.TaxValue;
                taxAssessmentISSReportTmp.Observation           = fiscalDocument.getLegalTextsAsString(DocuRestriction::Internal);
                taxAssessmentISSReportTmp.TaxBaseAmount         = fiscalDocumentTaxTransView.TaxBaseAmount;
                taxAssessmentISSReportTmp.TaxBaseAmountExempt   = fiscalDocumentTaxTransView.TaxBaseAmountExempt;
                taxAssessmentISSReportTmp.TaxBaseAmountOther    = fiscalDocumentTaxTransView.TaxBaseAmountOther;
                taxAssessmentISSReportTmp.TaxAmountRetained     = this.getTaxAmountRetained(fiscalDocument, fiscalDocumentLine, fiscalDocumentTaxTransView);
                taxAssessmentISSReportTmp.TaxAmountNotRetained  = this.getTaxAmountRetained(fiscalDocument, fiscalDocumentLine, fiscalDocumentTaxTransView, NoYes::No);

                taxAssessmentISSReportTmp.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>