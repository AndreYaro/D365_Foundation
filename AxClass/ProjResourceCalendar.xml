<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjResourceCalendar</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Project resource calendar.
/// </summary>
class ProjResourceCalendar implements ProjIResourceCalendar
{
    CalendarId calendarId;
    ProjIWorkCalendarTableLookup calendarLookup;
    ProjIWorkCalendarDateLookup calendarDateLookup;
    WorkCalendarTable workCalendarTable;
    WorkCalendarDate workCalendarDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDateWorkTimeControl</Name>
				<Source><![CDATA[
/// <summary>
/// Return date work time control.
/// </summary>
/// <param name="_transDate">
/// Transaction date.
/// </param>
/// <returns>
/// Work time control.
/// </returns>
public WorkTimeControl getDateWorkTimeControl(date _transDate)
{
    workCalendarDate = calendarDateLookup.getWorkCalendarDate(calendarId, _transDate);
    return workCalendarDate.WorkTimeControl;
}
]]></Source>
			</Method>
			<Method>
				<Name>id</Name>
				<Source><![CDATA[
/// <summary>
/// Return id.
/// </summary>
/// <returns>
/// Id.
/// </returns>
public CalendarId id()
{
    return calendarId;
}
]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
/// <summary>
/// Return name.
/// </summary>
/// <returns>
/// Name.
/// </returns>
public str name()
{
    if (!workCalendarTable)
    {
        workCalendarTable = calendarLookup.getWorkCalendarTable(calendarId);
    }

    return workCalendarTable.Name;
}
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
/// <summary>
/// New method.
/// </summary>
/// <param name="_calendarRecId">
/// Calendar rec id.
/// </param>
/// <param name="_calendarLookup">
/// Calendar look up.
/// </param>
/// <param name="_calendarDateLookup">
/// Calendar date look up.
/// </param>
public void new(CalendarRecId _calendarRecId, ProjIWorkCalendarTableLookup _calendarLookup = null,
    ProjIWorkCalendarDateLookup _calendarDateLookup = null)
{
    calendarId = ResourceCalendarFacade::getCalendarId(_calendarRecId);
    calendarLookup = _calendarLookup ? _calendarLookup
        : ProjWorkCalendarTableLookup::construct();
    calendarDateLookup = _calendarDateLookup ? _calendarDateLookup
        : ProjWorkCalendarDateLookup::construct();
}
]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
/// <summary>
/// Return rec id.
/// </summary>
/// <returns>
/// Rec id.
/// </returns>
public RecId recId()
{
    return workCalendarTable.RecId;
}
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
/// <summary>
/// Construct.
/// </summary>
/// <param name="_calendarRecId">
/// Calendar rec id.
/// </param>
/// <param name="_calendarLookup">
/// Calendar look up.
/// </param>
/// <param name="_calendarDateLookup">
/// Calendar date look up.
/// </param>
/// <returns>
/// New instance.
/// </returns>
public static ProjIResourceCalendar construct(CalendarRecId _calendarRecId,
    ProjIWorkCalendarTableLookup _calendarLookup = null,
    ProjIWorkCalendarDateLookup _calendarDateLookup = null)
{
    ProjIResourceCalendar calendar;
    calendar = new ProjResourceCalendar(_calendarRecId, _calendarLookup, _calendarDateLookup);
    return calendar;
}
]]></Source>
			</Method>
			<Method>
				<Name>isValidCalendarDate</Name>
				<Source><![CDATA[
/// <summary>
/// Determines if specified date in calendar is a valid calendar date.
/// </summary>
/// <param name="_calendarRecId">
/// Rec id of the calendar to validate.
/// </param>
/// <param name="_legalEntity">
/// Legal entity of the calendar to validate.
/// </param>
/// <param name="_dateValue">
/// Date in the calendar to validate.
/// </param>
/// <returns>
/// TRUE when date is valid.
/// </returns>
/// <remarks>
/// Validation method supports calendars within and outside the current company.
/// </remarks>

public static boolean isValidCalendarDate(CalendarRecId _calendarRecId, LegalEntityRecId _legalEntity, TransDate _dateValue)
{
    boolean isValidCalendarDate = false;

    if (_legalEntity == CompanyInfo::current())
    {
        isValidCalendarDate = WorkCalendarDate::exist(ResourceCalendarFacade::getCalendarId(_calendarRecId), _dateValue);
    }
    else
    {
        changeCompany(CompanyInfo::findRecId(_legalEntity).DataArea)
        {
            isValidCalendarDate = WorkCalendarDate::exist(ResourceCalendarFacade::getCalendarId(_calendarRecId), _dateValue);
        }
    }

    return isValidCalendarDate;
}
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>