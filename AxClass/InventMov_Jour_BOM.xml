<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Jour_BOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventMov_Jour_BOM</c> class is used for inventory journals.
/// </summary>
/// <remarks>
///    The class reports as finished (putting finished items on stock), whereas the
///    <c>InventMov_Jour_BOMLine</c> takes the bills of material (BOM lines out of stock).
/// </remarks>
class InventMov_Jour_BOM extends InventMov_Journal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a <c>LedgerAccount</c> extended data type that is needed for the account balance sheet.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerAccount</c> extended data type that is needed for the account balance sheet.
    /// </returns>
    /// <remarks>
    ///    When a fixed asset is assigned to the record and there is a ledger account for the
    ///    <c>InventAccountType::InventIssueFixedAsset</c> enumeration value, use that instead of the account
    ///    defined for the <c>InventAccountType::InventIssue</c> enumeration value.
    /// </remarks>
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (! cacheAccountBalanceSheet)
        {
            if (InventPostingExtendParm_CN::checkExtendParmEnabled())
            {
                cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                InventAccountType::ProdReceipt,
                InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                inventJournalTrans.ItemId,
                this.inventTable().itemGroupId());
            }
            else
            {
                cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdReceipt));
            }
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventPostingItemLedgerDimensionParameters</Name>
				<Source><![CDATA[
    public InventPostingItemLedgerDimensionParameters createInventPostingItemLedgerDimensionParameters(
        InventAccountType   _inventAccountType,
        ItemGroupId         _itemGroupId = this.inventTable().itemGroupId())
    {
        InventPostingItemLedgerDimensionParameters searchParameters = super(_inventAccountType, _itemGroupId);

        searchParameters.ItemId = inventJournalTrans.ItemId;

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (!cacheAccountOperations)
        {
            if (this.projId())
            {
                cacheAccountOperations = ProjPosting::getInventLedgerDimension(ProjAccountType::CostAccount,
                                                                      this.projId(),
                                                                      inventJournalTrans.ProjCategoryId);
            }
            else
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventProfit));
            }
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeAutoRepAsFinished</Name>
				<Source><![CDATA[
    public boolean  canBeAutoRepAsFinished()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedPhysicalValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the estimated physical value for an inventory transaction.
    /// </summary>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> record for which to get the estimated physical value.
    /// </param>
    /// <param name="_inventOnhand">
    /// The <c>InventOnHand</c> object.
    /// </param>
    /// <param name="_updateNow">
    /// The <c>InventUpdate</c> object.
    /// </param>
    /// <returns>
    /// The estimated physical value for the inventory transaction.
    /// </returns>
    protected CostAmount estimatedPhysicalValue(
        InventTrans     _inventTrans,
        InventOnhand    _inventOnhand,
        InventUpdate    _updateNow)
    {
        if (this.inventModelGroup().inventModelType().stdCostBased())
        {
            return InventModelType_StdCost::estimatedPhysicalValueStdCost(this, _inventTrans);
        }

        return super(_inventTrans, _inventOnhand, _updateNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedPhysicalValueSecCur_RU</Name>
				<Source><![CDATA[
    protected CostAmount estimatedPhysicalValueSecCur_RU(
        InventTrans     _inventTrans,
        InventOnhand    _inventOnhand,
        InventUpdate    _updateNow)
    {
        if (this.inventModelGroup().inventModelTypeSecCur_RU().stdCostBased())
        {
            return InventModelType_StdCost::estimatedPhysicalValueStdCostSecCur_RU(this, _inventTrans);
        }

        return super(_inventTrans, _inventOnhand, _updateNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturned</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the movement should be returned.
    /// </summary>
    /// <param name="_qty">
    ///    The inventory quantity of the movement; optional.
    /// </param>
    /// <returns>
    ///    true if the movement should be returned; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    An inventory journal transaction is considered returned if the related inventory transaction is a
    ///    receipt and the <c>inventTransIdReturn</c> extended data type is specified.
    /// </remarks>
    public boolean isReturned(InventQty _qty = 0)
    {
        return this.transSign() < 0 &&
            ( inventJournalTrans.InventTransIdReturn ||
                ( inventJournalTrans.inventTable().modelGroup().StandardCost &&
                    inventJournalTrans.CostPrice != inventJournalTrans.inventTable().costPcsPrice(inventJournalTrans.InventDimId )));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventJournalCheckTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for checking the inventory journal line transaction.
    /// </summary>
    /// <param name = "_journalTrans">The inventory journal line table buffer.</param>
    /// <returns>The query object.</returns>
    protected SysDaQueryObject buildInventJournalCheckTransQuery(InventJournalTrans _journalTrans)
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(_journalTrans);
        queryObject.firstOnlyHint = true;
        queryObject.projection().add(fieldStr(InventJournalTrans, RecId));

        queryObject.whereClause(
                 new SysDaEqualsExpression(new SysDaFieldExpression(_journalTrans, fieldStr(InventJournalTrans, JournalId)), new SysDaValueExpression(inventJournalTrans.JournalId))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(_journalTrans, fieldStr(InventJournalTrans, InventTransIdFather)), new SysDaValueExpression(inventJournalTrans.InventTransId)))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(_journalTrans, fieldStr(InventJournalTrans, BOMLine)), new SysDaValueExpression(NoYes::Yes)))
            .and(new SysDaNotEqualsExpression(new SysDaFieldExpression(_journalTrans, fieldStr(InventJournalTrans, RecId)), new SysDaValueExpression(inventJournalTrans.RecId)))
            .and(new SysDaNotEqualsExpression(new SysDaFieldExpression(_journalTrans, fieldStr(InventJournalTrans, Qty)), new SysDaValueExpression(0))));

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalCheckTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>InventJournalTrans</c> transaction is valid.
    /// </summary>
    /// <returns>
    /// false if there is an error in the transaction object; otherwise, true.
    /// </returns>
    public boolean journalCheckTrans()
    {
        InventJournalTrans journalTrans;
        
        SysDaQueryObject queryObject = this.buildInventJournalCheckTransQuery(journalTrans);
        
        SysDaFindStatement findStatement = new SysDaFindStatement();
        findStatement.execute(new SysDaFindObject(queryObject));
        
        boolean ok = true;
        if (!journalTrans.RecId)
        {
            ok = checkFailed("@SYS79151");
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && this.inventModelGroup().PostOnhandFinancialSecCur_RU)
        {
            while (journalTrans)
            {
                if (!journalTrans.inventTable().modelGroup().PostOnhandFinancialSecCur_RU)
                {
                    setPrefix(fieldLabelValue(journalTrans.TableId, fieldNum(InventJournalTrans, ItemId), journalTrans.ItemId));
                    ok = checkFailed(strFmt("@GLS106968", inventJournalTrans.ItemId));
                }

                next journalTrans;
            }
        }
        // </GEERU>

        if (InventJournalTable::find(inventJournalTrans.JournalId).VoucherDraw == JournalVoucherDraw::Entering && ! inventJournalTrans.Voucher)
        {
            ok = checkFailed("@SYS24569");
        }

        if (! super())
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateCostAmountDuringJournalLinePosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the cost amount must be updated during journal line posting.
    /// </summary>
    /// <returns>true if cost amount must be updated; otherwise, false.</returns>
    protected boolean mustUpdateCostAmountDuringJournalLinePosting()
    {
        if (this.inventTable().modelGroup().inventModelType().stdCostBased()
            && this.transSign() < 0)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalPostTrans</Name>
				<Source><![CDATA[
    public void journalPostTrans(
        LedgerVoucher           _ledgerVoucher,
        InventUpd_Financial     _financial = null,
        CostAmount              _costAmount = 0)
    {
        InventJournalTrans  journalTrans;
        CostAmount          costAmount;
        // <GEERU>
        CostAmount          costAmountSecCur;
        boolean             countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        while select forupdate journalTrans
            where journalTrans.JournalId            == inventJournalTrans.JournalId      &&
                  journalTrans.InventTransIdFather  == inventJournalTrans.InventTransId  &&
                  journalTrans.bomLine              == NoYes::Yes                        &&
                  journalTrans.Qty != 0
        {
            _financial = InventUpd_Financial::newCheckPostInventJournalTrans(InventMovement::construct(journalTrans),
                                                                            _ledgerVoucher,
                                                                            journalTrans.CostAmount);

            str prefixMessage = fieldLabelValue(journalTrans.TableId, fieldNum(InventJournalTrans, LineNum), journalTrans.LineNum);
            prefixMessage += ', ';
            prefixMessage += fieldLabelValue(journalTrans.TableId, fieldNum(InventJournalTrans, ItemId), journalTrans.ItemId);
            setPrefix(prefixMessage);
            super(_ledgerVoucher, _financial);

            costAmount += _financial.updCostAmountInvent();
            // <GEERU>
            if (countryRegion_RU)
            {
                costAmountSecCur += _financial.updCostAmountInventSecCur_RU();
            }
            // </GEERU>
        }

        if (this.mustUpdateCostAmountDuringJournalLinePosting())
        {
            inventJournalTrans.CostAmount = -costAmount;
        }
        inventJournalTrans.update(NoYes::Yes);

        _financial = InventUpd_Financial::newCheckPostInventJournalTrans(this,
                                                                        _ledgerVoucher,
                                                                        inventJournalTrans.CostAmount,
                                                                        -costAmountSecCur);

        super(_ledgerVoucher, _financial);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetQty</Name>
				<Source><![CDATA[
    public void journalSetQty(
        NoYes   _transQtySignChangedToNegative = NoYes::No,
        boolean _showUserDialog                = true,
        boolean _doMinQtyCheck                 = true,
        boolean _doMaxQtyCheck                 = true)
    {
        InventMovement::setMinMaxQty(inventJournalTrans, _showUserDialog, false, _doMinQtyCheck, _doMaxQtyCheck);

        super(_transQtySignChangedToNegative, _showUserDialog, _doMinQtyCheck, _doMaxQtyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeQuarantineControlled</Name>
				<Source><![CDATA[
    public boolean mustBeQuarantineControlled()
    {
        if (!mustBeQuarantineControledInitialized)
        {
            if (WHSInventEnabled::exist(this.itemId()) && this.inventdim().inventLocation().WHSEnabled)
            {
                mustBeQuarantineControled = false;
            }
            else
            {
                mustBeQuarantineControled =  this.inventModelGroup().QuarantineControl;
            }
            mustBeQuarantineControledInitialized = NoYes::Yes;
        }

        return mustBeQuarantineControled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        if (!inventJournalTrans.RecId)
        {
            return null;
        }
        return new InventMov_Jour_BOM(inventJournalTrans.orig(),inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a <c>LedgerPostingType</c> enumeration value that contains the account for transaction
    ///    type.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value that contains the account for transaction type.
    /// </returns>
    public LedgerPostingType postingBalanceSheet()
    {
        return LedgerPostingType::ProdReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    public LedgerPostingType postingOperations()
    {
        return LedgerPostingType::InventProfit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public InventTransType transType()
    {
        return InventTransType::BOMMain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerFinancial</Name>
				<Source><![CDATA[
    public CostAmount updateLedgerFinancial(
        LedgerVoucher           _ledgerVoucher,
        InventUpd_Financial     _updateNow,
        boolean                 _allowNegative = false)
    {
        return super(_ledgerVoucher, _updateNow, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerFinancialSecCur_RU</Name>
				<Source><![CDATA[
    public CostAmountSecCur_RU updateLedgerFinancialSecCur_RU(
        LedgerVoucher       _ledgerVoucher,
        InventUpd_Financial _updateNow,
        boolean             _allowNegative = false)
    {
        return super(_ledgerVoucher, _updateNow, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_Jour_BOM</c> class based on the specified record.
    /// </summary>
    /// <param name="_inventJournalTrans">
    ///    The <c>InventJournalTrans</c> record for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_Jour_BOM</c> class.
    /// </returns>
    public static InventMov_Jour_BOM newFromInventJournalTrans(InventJournalTrans _inventJournalTrans)
    {
        return new InventMov_Jour_BOM(_inventJournalTrans);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>