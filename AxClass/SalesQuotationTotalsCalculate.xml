<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationTotalsCalculate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates totals for a sales quotation
/// </summary>
public class SalesQuotationTotalsCalculate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateTotalsForAllQuotations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates totals for all sales quotations.
    /// quotations that are not modified since the last recalculation are ignored.
    /// </summary>
    /// <param name = "_cutOffDateTime">
    /// All sales quotations that were updated before the cut-off datetime are also ignored for recalculation.
    /// </param>
    public static void calculateTotalsForAllQuotations(utcdatetime _cutOffDateTime = DateTimeUtil::minValue())
    {
        using (var activityContext = SalesTotalsCalculateInstrumentationLogger::createLogger(classStr(SalesQuotationTotalsCalculate)).salesTotalsCalculateActivities().calculateTotalsForAllQuotations())
        {
            utcdatetime updateDateTime = DateTimeUtil::utcNow();
            SalesQuotationLastChangeDate lastChange;

            QueryRun queryRun = new QueryRun(SalesQuotationTotalsCalculate::createQuery(_cutOffDateTime));

            while(queryRun.next())
            {
                lastChange = queryRun.get(tableNum(SalesQuotationLastChangeDate));

                SalesQuotationTotalsCalculate::calculateTotalsForQuotation(lastChange.QuotationId, updateDateTime);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    internal static Query createQuery(utcdatetime _cutOffDateTime)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsSalesQuotationLastChangeDate = query.addDataSource(tableNum(SalesQuotationLastChangeDate));
        qbdsSalesQuotationLastChangeDate.addSelectionField(fieldNum(SalesQuotationLastChangeDate, QuotationId));

        SalesQuotationTotalsCalculate::addDateRangesToChangeTrackingDataSource(qbdsSalesQuotationLastChangeDate, _cutOffDateTime);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDateRangesToChangeTrackingDataSource</Name>
				<Source><![CDATA[
    internal static void addDateRangesToChangeTrackingDataSource(QueryBuildDataSource _qbdsSalesQuotationLastChangeDate, utcdatetime _cutOffDateTime)
    {
        _qbdsSalesQuotationLastChangeDate.addRange(fieldNum(SalesQuotationLastChangeDate, HeaderLastModifiedDateTime)).
            value(strFmt('((%1.%2 >= %6) || (%1.%3 >= %6) || (%1.%4 >= %6) || (%1.%5 >= %6))',
            _qbdsSalesQuotationLastChangeDate.name(),
            fieldStr(SalesQuotationLastChangeDate, HeaderLastModifiedDateTime),
            fieldStr(SalesQuotationLastChangeDate, HeaderChargeLastModifiedDateTime),
            fieldStr(SalesQuotationLastChangeDate, LineLastModifiedDateTime),
            fieldStr(SalesQuotationLastChangeDate, LineChargeLastModifiedDateTime),
            DateTimeUtil::toStr(_cutOffDateTime)));

        QueryBuildDataSource qbdsSalesQuotationCalculatedTotals = _qbdsSalesQuotationLastChangeDate.addDataSource(tableNum(SalesQuotationCalculatedTotals));
        qbdsSalesQuotationCalculatedTotals.addLink(fieldNum(SalesQuotationLastChangeDate, QuotationId), fieldNum(SalesQuotationCalculatedTotals, QuotationId));
        qbdsSalesQuotationCalculatedTotals.joinMode(JoinMode::NoExistsJoin);

        qbdsSalesQuotationCalculatedTotals.addRange(fieldNum(SalesQuotationCalculatedTotals, LastUpdatedDateTime)).
            value(strFmt('((%1.%3 > %2.%4) && ((%1.%3 > %2.%5) || (%2.%6 = 0)) && ((%1.%3 > %2.%7) || (%2.%8 = 0)) && ((%1.%3 > %2.%9) || (%2.%10 = 0)))',
            qbdsSalesQuotationCalculatedTotals.name(),
            _qbdsSalesQuotationLastChangeDate.name(),
            fieldStr(SalesQuotationCalculatedTotals, LastUpdatedDateTime),
            fieldStr(SalesQuotationLastChangeDate, HeaderLastModifiedDateTime),
            fieldStr(SalesQuotationLastChangeDate, HeaderChargeLastModifiedDateTime),
            fieldStr(SalesQuotationLastChangeDate, HeaderChargeCount),
            fieldStr(SalesQuotationLastChangeDate, LineLastModifiedDateTime),
            fieldStr(SalesQuotationLastChangeDate, LineCount),
            fieldStr(SalesQuotationLastChangeDate, LineChargeLastModifiedDateTime),
            fieldStr(SalesQuotationLastChangeDate, LineChargeCount)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalsForQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates totals for a sales quotation.
    /// </summary>
    /// <param name = "_quotationId">
    /// <c>SalesId</c> of the sales quotation for which the totals should be calculated.
    /// </param>
    /// <param name = "_updateDateTime">
    /// Timestamp to be marked on the quotation header and line totals records.
    /// </param>
    public static void calculateTotalsForQuotation(QuotationIdBase _quotationId, utcdatetime _updateDateTime = DateTimeUtil::utcNow())
    {
        using (var activityContext = SalesTotalsCalculateInstrumentationLogger::createLogger(classStr(SalesQuotationTotalsCalculate)).salesTotalsCalculateActivities().calculateTotalsForQuotation())
        {
            ttsbegin;

            SalesQuotationCalculatedTotals quotationTotals = SalesQuotationCalculatedTotals::calculateForSalesQuotation(_quotationId, _updateDateTime);

            using (SalesQuotationLineCalculatedTotalsContext context = SalesQuotationLineCalculatedTotalsContext::construct())
            {
                SalesQuotationLineCalculatedTotals::calculateForSalesQuotation(_quotationId, _updateDateTime);
            }

            SalesQuotationCalculatedTotals::updateQuotationHeaderTaxAmount(quotationTotals);

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>