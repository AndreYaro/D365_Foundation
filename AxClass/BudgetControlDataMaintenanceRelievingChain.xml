<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlDataMaintenanceRelievingChain</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlDataMaintenanceRelievingChain</c> is responsible for providing data maintenance
/// functionality for a <c>BudgetControlRelievingChain</c> object.
/// </summary>
internal final class BudgetControlDataMaintenanceRelievingChain
{
    private BudgetControlRelievingChain relievingChain;
    private BudgetControlDataMaintenanceTrackingDetailCache detailCache;
    private BudgetControlDataMaintenaceCheckResultController checkRequestController;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BudgetControlDataMaintenanceRelievingChain construct(BudgetControlRelievingChain _relievingChain, BudgetControlDataMaintenanceTrackingDetailCache _detailCache)
    {
        var maintenanceRelievingChain = new BudgetControlDataMaintenanceRelievingChain();

        maintenanceRelievingChain.relievingChain = _relievingChain;
        maintenanceRelievingChain.detailCache = _detailCache;

        return maintenanceRelievingChain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDocuments</Name>
				<Source><![CDATA[
    internal void processDocuments(boolean _isOverrunApproved)
    {
        this.checkRequestController = BudgetControlDataMaintenaceCheckResultController::construct();
        SourceDocumentHeaderTmp sourceDocumentHeaderTmp = relievingChain.populateSourceDocumentHeaderTmp();

        var accountingEventProcessor = BudgetControlAccountingEventProcessor::construct(sourceDocumentHeaderTmp, _isOverrunApproved, checkRequestController);

        accountingEventProcessor.processSourceDocuments();

        this.updateStatusAndResultForRelievingChain(BudgetControlDataMaintenanceStatus::Completed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatusForError</Name>
				<Source><![CDATA[
    internal void updateStatusForError()
    {
        checkRequestController.populateErrorCheckResults();
        this.updateStatusAndResultForRelievingChain(BudgetControlDataMaintenanceStatus::Error);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatusAndResultForRelievingChain</Name>
				<Source><![CDATA[
    internal void updateStatusAndResultForRelievingChain(BudgetControlDataMaintenanceStatus _status)
    {
        BudgetControlDataMaintenanceTracking dataMaintenanceTracking;
        SourceDocumentHeaderTmp sourceDocHeaderTmp = this.relievingChain.populateSourceDocumentHeaderTmp();
        
        ttsbegin;

        while select forupdate dataMaintenanceTracking
            where dataMaintenanceTracking.BudgetControlDataMaintenance == detailCache.getDataMaintenanceRecId()
        exists join sourceDocHeaderTmp
            where sourceDocHeaderTmp.SourceDocumentHeader == dataMaintenanceTracking.TrackingDocument
        {
            if (checkRequestController)
            {
                dataMaintenanceTracking.ProcessCheckResult = checkRequestController.getHeaderCheckResult(dataMaintenanceTracking.TrackingDocument);
            }

            dataMaintenanceTracking.ProcessStatus = _status;
            dataMaintenanceTracking.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataMaintenanceTrackingDetailsForChain</Name>
				<Source><![CDATA[
    internal List getDataMaintenanceTrackingDetailsForChain()
    {
        List trackingDetails = new List(Types::Class);

        SourceDocumentHeaderTmp sourceDocumentHeaderTmp = relievingChain.populateSourceDocumentHeaderTmp();

        while select SourceDocumentHeader from sourceDocumentHeaderTmp
        {
            trackingDetails.addEnd(detailCache.getTrackingDetailsForSourceDocumentHeader(sourceDocumentHeaderTmp.SourceDocumentHeader));
        }

        return trackingDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentCount</Name>
				<Source><![CDATA[
    internal int getDocumentCount()
    {
        return relievingChain.getDocumentCount();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>