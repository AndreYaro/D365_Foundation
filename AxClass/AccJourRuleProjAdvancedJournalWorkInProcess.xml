<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccJourRuleProjAdvancedJournalWorkInProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     An accounting journalizing rule for project advanced journal source document.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProjAdvancedJournal), BusinessEvent_ProjAdvancedJournal::RecordProjectActivity, MonetaryAmount::WorkInProcess)]
public class AccJourRuleProjAdvancedJournalWorkInProcess extends AccountingJournalizingRule
{
    ProjAdvancedJournal projAdvancedJournal;
    ProjAdvancedJournalLine projAdvancedJournalLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getJournalAccountEntryLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the ledger account to use to enter a subledger journal entry.
    /// </summary>
    /// <param name="_defaultLedgerDimension">
    ///     The default ledger dimension.
    /// </param>
    /// <param name="_accountingDistributionLedgerDimension">
    ///     The accounting distribution ledger dimension.
    /// </param>
    /// <returns>
    ///     A <c>LedgerDimensionAccount</c> object.
    /// </returns>
    public LedgerDimensionAccount getJournalAccountEntryLedgerDimension(LedgerDimensionDefaultAccount _defaultLedgerDimension, LedgerDimensionAccount _accountingDistributionLedgerDimension)
    {
        return LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(_defaultLedgerDimension, _accountingDistributionLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the accounting rule.
    /// </summary>
    protected void initialize()
    {
        super();

        SourceDocumentLineRecId sourceDocumentLineRecId = sourceDocumentLineItem.parmSourceDocumentLine().RecId;

        projAdvancedJournalLine = ProjAdvancedJournalLine::findBySourceDocumentLine(sourceDocumentLineRecId);
        ProjAdvancedJournal = ProjAdvancedJournal::find(projAdvancedJournalLine.projAdvancedJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        return LedgerPostingType::ProjSalesvalueOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        if (this.parmAmount() >= 0)
        {
            return DebitCredit::Debit;
        }
        else
        {
            return DebitCredit::Credit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipJournalization</Name>
				<Source><![CDATA[
    public boolean parmSkipJournalization()
    {
        boolean ret = super();

        if (projAdvancedJournalLine.ProjDataAreaId == curExt())
        {

            //
            // Journalization of WIP is detemined on a per line basis.  
            // Currently this will not analyze whether to journalize at a distribution level.
            //
            if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
            {
                if (!ProjectPosting::canAccrueRevenueWhenProjOpsIntegrationEnabled(ProjTable::find(projAdvancedJournalLine.ProjId),
                                                    ProjCategory::find(projAdvancedJournalLine.ProjCategoryId),
                                                    ProjLineProperty::find(projAdvancedJournalLine.LinePropertyId),
													projAdvancedJournalLine, 
                                                    projAdvancedJournalLine.ExtendedPrice))
                {
                    ret = true;
                }
            }
			else
            {
                using (ProjectPostingParameters insertParameters = ProjectPostingParameters::parmProjContractLineNum(projAdvancedJournalLine.ContractLineId))
                {
                    if (!ProjectPosting::canAccrueRevenue(ProjTable::find(projAdvancedJournalLine.ProjId),
                                                        ProjCategory::find(projAdvancedJournalLine.ProjCategoryId),
                                                        ProjLineProperty::find(projAdvancedJournalLine.LinePropertyId),
                                                        projAdvancedJournalLine.ExtendedPrice))
                    {
                        ret = true;
                    }
                }
            }
        }
        else
        {
            if (!ProjIntercompanyParameters::canAccrueRevenue(CompanyInfo::findDataArea(projAdvancedJournalLine.ProjDataAreaId).RecId))
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>