<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyGoodsInTransitCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InterCompanyGoodsInTransitCalculation
{
    InterCompanyGoodsInTransitTmp               interCompanyGoodsInTransitTmp;
    InterCompanyGoodsInTransitOrdersTmp         interCompanyGoodsInTransitOrdersTmp;
    InterCompanyGoodsInTransitLineTotalsTmp     interCompanyGoodsInTransitLineTotalsTmp;
    DataAreaId                                  currentCompany;
    CurrencyCode                                currencyCodeCurExt;       // Currency code for the current company
    InterCompanyGoodsInTransitLayout            interCompanyGoodsInTransitLayout;
    InterCompanyGoodsInTransitContract          interCompanyGoodsInTransitContract;
    Map                                         purchaseOrdersCheckedForDirectDelivery;     // The IC sales order is not marked as direct delivery so we need to check PO.
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addReceivedToTotalsTmp</Name>
				<Source><![CDATA[
    protected void addReceivedToTotalsTmp(
        PurchLine                   _purchLine,
        InventQty                   _inTransitQty,
        AmountMST                   _inTransitAmount,
        AmountMST                   _inTransitAccrual
        , PdsCWInventQty            _inTransitCWQty
        )
    {
        PurchTable          purchTable;
        SalesLine           salesLine;

        select firstonly forupdate interCompanyGoodsInTransitLineTotalsTmp
            where   interCompanyGoodsInTransitLineTotalsTmp.PurchLineInventTransId  == _purchLine.InventTransId;

        if (!interCompanyGoodsInTransitLineTotalsTmp.RecId)
        {
            purchTable = _purchLine.purchTable();
            changecompany(purchTable.InterCompanyCompanyId)
            {
                salesLine = SalesLine::findInventTransId(_purchLine.InterCompanyInventTransId);
            }
            interCompanyGoodsInTransitLineTotalsTmp.initFromSalesLine(salesLine, purchTable.InterCompanyCompanyId);
            interCompanyGoodsInTransitLineTotalsTmp.initFromPurchLine(_purchLine);
        }
        interCompanyGoodsInTransitLineTotalsTmp.InTransitQty        += _inTransitQty;
        interCompanyGoodsInTransitLineTotalsTmp.PdsCWInTransitQty   += _inTransitCWQty;
        interCompanyGoodsInTransitLineTotalsTmp.InTransitAmount     += _inTransitAmount;
        interCompanyGoodsInTransitLineTotalsTmp.InTransitAccrual    += _inTransitAccrual;
        interCompanyGoodsInTransitLineTotalsTmp.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addShippedToTotalsTmp</Name>
				<Source><![CDATA[
    protected void addShippedToTotalsTmp(
        InterCompanyCompanyId       _interCompanyCompanyId,
        SalesLine                   _salesLine,
        PurchLine                   _purchLine,
        InventQty                   _inTransitQty,
        AmountMST                   _inTransitAmount,
        AmountMST                   _inTransitAccrual
        , PdsCWInventQty            _inTransitCWQty
        )
    {
        select firstonly forupdate interCompanyGoodsInTransitLineTotalsTmp
            where   interCompanyGoodsInTransitLineTotalsTmp.PurchLineInventTransId  == _purchLine.InventTransId;

        if (!interCompanyGoodsInTransitLineTotalsTmp.RecId)
        {
            interCompanyGoodsInTransitLineTotalsTmp.initFromSalesLine(_salesLine, _interCompanyCompanyId);
            interCompanyGoodsInTransitLineTotalsTmp.initFromPurchLine(_purchLine);
        }
        interCompanyGoodsInTransitLineTotalsTmp.InTransitQty        += _inTransitQty;
        interCompanyGoodsInTransitLineTotalsTmp.PdsCWInTransitQty   += _inTransitCWQty;
        interCompanyGoodsInTransitLineTotalsTmp.InTransitAmount     += _inTransitAmount;
        interCompanyGoodsInTransitLineTotalsTmp.InTransitAccrual    += _inTransitAccrual;
        interCompanyGoodsInTransitLineTotalsTmp.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCustomerShipments</Name>
				<Source><![CDATA[
    protected void calcCustomerShipments()
    {
        List                    companyList = new List(Types::String);
        ListEnumerator          companyListEnumerator;
        DataAreaId              company;

        ttsbegin;

        interCompanyGoodsInTransitTmp.Origin    = InterCompanyGoodsInTransitOrigin::PackingSlip;
        while select InterCompanyCompanyId from interCompanyGoodsInTransitOrdersTmp
            group by InterCompanyCompanyId
        {
            companyList.addEnd(interCompanyGoodsInTransitOrdersTmp.InterCompanyCompanyId);
        }
        companyListEnumerator = companyList.getEnumerator();

        while (companyListEnumerator.moveNext())
        {
            company = companyListEnumerator.current();
            changecompany(company)
            {
                this.calcCustomerShipmentsCompany();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCustomerShipmentsCompany</Name>
				<Source><![CDATA[
    protected void calcCustomerShipmentsCompany()
    {
        CustPackingSlipJour         custPackingSlipJour;
        CustPackingSlipTrans        custPackingSlipTrans;
        CustPackingSlipSalesLink    custPackingSlipSalesLink;
        SalesLine                   salesLine;
        InventTableModule           inventTableModule;

        while select interCompanyGoodsInTransitOrdersTmp
            where interCompanyGoodsInTransitOrdersTmp.InterCompanyCompanyId == curext()
                join RecId from custPackingSlipSalesLink
                    where custPackingSlipSalesLink.OrigSalesId  == interCompanyGoodsInTransitOrdersTmp.SalesId
                    join RecId from custPackingSlipJour
                        where   custPackingSlipJour.SalesId         == custPackingSlipSalesLink.SalesId
                            &&  custPackingSlipJour.PackingSlipId   == custPackingSlipSalesLink.PackingSlipId
                            &&  (interCompanyGoodsInTransitLayout   == InterCompanyGoodsInTransitLayout::Totals
                            ||  custPackingSlipJour.DeliveryDate    >= this.searchFromDate())
                            &&  custPackingSlipJour.DeliveryDate    <= this.searchToDate()
                            join custPackingSlipTrans
                                where   custPackingSlipTrans.PackingSlipId  == custPackingSlipJour.PackingSlipId
                                    &&  custPackingSlipTrans.SalesId        == custPackingSlipJour.SalesId
                                    &&  custPackingSlipTrans.DeliveryDate   == custPackingSlipJour.DeliveryDate
                                join salesLine
                                    where salesLine.InventTransId   == custPackingSlipTrans.InventTransId
                                       && salesLine.SalesId         == interCompanyGoodsInTransitOrdersTmp.SalesId
                                    join UnitId from inventTableModule
                                        where inventTableModule.ItemId          == salesLine.ItemId
                                            &&  inventTableModule.ModuleType    == ModuleInventPurchSales::Invent
        {
            interCompanyGoodsInTransitTmp.VendAccount   = interCompanyGoodsInTransitOrdersTmp.VendAccount;
            interCompanyGoodsInTransitTmp.VendName      = interCompanyGoodsInTransitOrdersTmp.VendName;
            interCompanyGoodsInTransitTmp.DeliveryDate  = custPackingSlipTrans.DeliveryDate;
            interCompanyGoodsInTransitTmp.PackingSlipId = custPackingSlipTrans.PackingSlipId;
            interCompanyGoodsInTransitTmp.PurchId       = interCompanyGoodsInTransitOrdersTmp.PurchId;
            this.initFromCustPackingSlipTrans(custPackingSlipTrans, salesLine, inventTableModule.UnitId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotals</Name>
				<Source><![CDATA[
    protected void calcTotals()
    {
        InterCompanyGoodsInTransitTmp       interCompanyGoodsInTransitTmpBeginning;         // Holds beginning balances per vendor
        InterCompanyGoodsInTransitTmp       interCompanyGoodsInTransitTmpNetChange;         // Holds net changes in period per vendor
        InterCompanyGoodsInTransitTmp       interCompanyGoodsInTransitTmpTotalsProduct;     // Holds changes in period per product per vendor
        InterCompanyGoodsInTransitTmp       interCompanyGoodsInTransitTmpTotalsVendor;      // Holds ending balances per vendor
        InterCompanyGoodsInTransitTmp       interCompanyGoodsInTransitTmpTotalsWorkset;     // Used as temporary storage as multiple refernces to same DB instance isn't possible

        int                                 lineTypeNew;
        EcoResProductDisplayProductNumber   productNumberEmpty = '';
        VendAccount                         vendAccountEmpty = '';
        NoYes                               isGrandTotalValue = NoYes::Yes;
        NoYes                               isNotGrandTotalValue = NoYes::No;
        Amount                              noAmount = 0;

        void calculateNetChangePerProduct()
        {
            // summarize transactions in period per vendor and product in new temporary table (interCompanyGoodsInTransitTmpTotalsProduct)
            lineTypeNew         = IntercompanyGoodsInTransitLineType::Transaction;

            insert_recordset interCompanyGoodsInTransitTmpTotalsProduct (IsGrandTotal, LineType, LineTypeSortValue, ProductNumber, VendAccount, VendName, InTransitQty, InTransitAmount, InTransitAccrual, InTransitVariance
                , pdsCWInTransitQty
                )
                select isNotGrandTotalValue, lineTypeNew, lineTypeNew, ProductNumber, VendAccount, VendName, sum(InTransitQty), sum(InTransitAmount), sum(InTransitAccrual), sum(InTransitVariance)
                , sum(PdsCWInTransitQty)
                    from  interCompanyGoodsInTransitTmp
                    group by VendAccount, ProductNumber, VendName
                    where interCompanyGoodsInTransitTmp.LineTypeSortValue   == IntercompanyGoodsInTransitLineType::Transaction // Take advantage of index on table with DeliveryDate- otherwise not needed
                       && (interCompanyGoodsInTransitTmp.DeliveryDate       >= this.fromDate()
                       ||  interCompanyGoodsInTransitTmp.Origin             == InterCompanyGoodsInTransitOrigin::Variance);

            // Delete products where totals are zero (both shipped and received within period) as these shouldn't be shown
            delete_from interCompanyGoodsInTransitTmpTotalsProduct
                where interCompanyGoodsInTransitTmpTotalsProduct.InTransitQty       == 0
                  &&  interCompanyGoodsInTransitTmpTotalsProduct.InTransitAmount    == 0;
        }

        void calculateNetChanges()
        {
            // First calculate net changes per product
            calculateNetChangePerProduct();

            // Calculate net changes in net change temporary table (interCompanyGoodsInTransitTmpNetChange)
            lineTypeNew = IntercompanyGoodsInTransitLineType::NetChange;
            insert_recordset interCompanyGoodsInTransitTmpNetChange (IsGrandTotal, LineType, LineTypeSortValue, ProductNumber, VendAccount, VendName, InTransitQty, InTransitAmount, InTransitAccrual, InTransitVariance
                , pdsCWInTransitQty
                )
                select isNotGrandTotalValue, lineTypeNew, lineTypeNew, productNumberEmpty, VendAccount, VendName, sum(InTransitQty), sum(InTransitAmount), sum(InTransitAccrual), sum(InTransitVariance)
                    , sum(PdsCWInTransitQty)
                    from  interCompanyGoodsInTransitTmpTotalsProduct
                    group by VendAccount, VendName;
        }

        void calculateBeginningBalances()
        {
            // Calculate beginning balances in new temporary table (interCompanyGoodsInTransitTmpBeginning) for vendors with beginning balance
            lineTypeNew = IntercompanyGoodsInTransitLineType::BeginningBalance;

            // Insert beginning balance for vendors
            insert_recordset interCompanyGoodsInTransitTmpBeginning (IsGrandTotal, LineType, LineTypeSortValue, ProductNumber, VendAccount, VendName, InTransitQty, InTransitAmount, InTransitAccrual, InTransitVariance
                , pdsCWInTransitQty
                )
                select isNotGrandTotalValue, lineTypeNew, lineTypeNew, productNumberEmpty, VendAccount, VendName, noAmount, sum(InTransitAmount), sum(InTransitAccrual), sum(InTransitVariance)
                    , noAmount //same as inventQty
                    from  interCompanyGoodsInTransitTmp
                    group by VendAccount, VendName
                    where interCompanyGoodsInTransitTmp.LineTypeSortValue   == IntercompanyGoodsInTransitLineType::Transaction // Take advantage of index on table with DeliveryDate - otherwise not needed
                       && interCompanyGoodsInTransitTmp.DeliveryDate        < this.fromDate()
                       && interCompanyGoodsInTransitTmp.Origin              != InterCompanyGoodsInTransitOrigin::Variance;

            // Delete vendors where beginning totals are zero (both shipped and received within period) and no net changes has occured
            delete_from interCompanyGoodsInTransitTmpBeginning
                where interCompanyGoodsInTransitTmpBeginning.InTransitQty       == 0
                  &&  interCompanyGoodsInTransitTmpBeginning.InTransitAmount    == 0
                    notexists join interCompanyGoodsInTransitTmpNetChange
                        where interCompanyGoodsInTransitTmpNetChange.VendAccount == interCompanyGoodsInTransitTmpBeginning.VendAccount;
        }

        void calculateEndingBalancesPerVendor()
        {
            // Calculate ending balances per vendor
            lineTypeNew = IntercompanyGoodsInTransitLineType::EndingBalance;

            insert_recordset interCompanyGoodsInTransitTmpTotalsVendor (IsGrandTotal, LineType, LineTypeSortValue, ProductNumber, VendAccount, VendName, InTransitQty, InTransitAmount, InTransitAccrual, InTransitVariance
                , pdsCWInTransitQty
                )
                select isNotGrandTotalValue, lineTypeNew, lineTypeNew, productNumberEmpty, VendAccount, VendName, noAmount, sum(InTransitAmount), sum(InTransitAccrual), sum(InTransitVariance)
                    , noAmount //same as inventQty
                    from  interCompanyGoodsInTransitTmp
                    group by VendAccount, VendName;

            // Delete vendors where ending totals are zero and no net changes has occured
            delete_from interCompanyGoodsInTransitTmpTotalsVendor
                where interCompanyGoodsInTransitTmpTotalsVendor.InTransitQty       == 0
                  &&  interCompanyGoodsInTransitTmpTotalsVendor.InTransitAmount    == 0
                    notexists join interCompanyGoodsInTransitTmpNetChange
                        where interCompanyGoodsInTransitTmpNetChange.VendAccount == interCompanyGoodsInTransitTmpTotalsVendor.VendAccount;
        }

        void createMissingBeginningBalanceRecords()
        {
            // Insert empty beginning balance where no transctions exist prior to from date
            lineTypeNew         = IntercompanyGoodsInTransitLineType::BeginningBalance;

            insert_recordset interCompanyGoodsInTransitTmpTotalsWorkset (IsGrandTotal, LineType, LineTypeSortValue, ProductNumber, VendAccount, VendName, InTransitQty, InTransitAmount, InTransitAccrual, InTransitVariance
                , pdsCWInTransitQty
                )
                select isNotGrandTotalValue, lineTypeNew, lineTypeNew, productNumberEmpty, VendAccount, VendName, noAmount, noAmount, noAmount, noAmount
                    , noAmount //same as inventQty
                    from  interCompanyGoodsInTransitTmpTotalsVendor
                    group by VendAccount, VendName
                        notexists join interCompanyGoodsInTransitTmpBeginning
                            where interCompanyGoodsInTransitTmpBeginning.VendAccount     == interCompanyGoodsInTransitTmpTotalsVendor.VendAccount;

            // Copy records back into beginning balances table
            insert_recordset interCompanyGoodsInTransitTmpBeginning (IsGrandTotal, LineType, LineTypeSortValue, ProductNumber, VendAccount, VendName, InTransitQty, InTransitAmount, InTransitAccrual, InTransitVariance
                , pdsCWInTransitQty
                )
                select IsGrandTotal, LineType, LineTypeSortValue, ProductNumber, VendAccount, VendName, InTransitQty, InTransitAmount, InTransitAccrual, InTransitVariance
                    , PdsCWInTransitQty
                    from  interCompanyGoodsInTransitTmpTotalsWorkset
                    where interCompanyGoodsInTransitTmpTotalsWorkset.LineType == lineTypeNew;
        }

        void createMissingNetChangesRecords()
        {
            // Create net change records for vendors without changes in period, but with a beginning balance
            lineTypeNew         = IntercompanyGoodsInTransitLineType::NetChange;

            insert_recordset interCompanyGoodsInTransitTmpTotalsWorkset (IsGrandTotal, LineType, LineTypeSortValue, ProductNumber, VendAccount, VendName, InTransitQty, InTransitAmount, InTransitAccrual, InTransitVariance
                , pdsCWInTransitQty
                )
                select isNotGrandTotalValue, lineTypeNew, lineTypeNew, productNumberEmpty, VendAccount, VendName, noAmount, noAmount, noAmount, noAmount
                    , noAmount //same as invent qty
                    from  interCompanyGoodsInTransitTmpBeginning
                    group by VendAccount, VendName
                        notexists join interCompanyGoodsInTransitTmpNetChange
                            where interCompanyGoodsInTransitTmpNetChange.VendAccount == interCompanyGoodsInTransitTmpBeginning.VendAccount;

            // Copy records back into net change table
            insert_recordset interCompanyGoodsInTransitTmpNetChange (IsGrandTotal, LineType, LineTypeSortValue, ProductNumber, VendAccount, VendName, InTransitQty, InTransitAmount, InTransitAccrual, InTransitVariance
                , pdsCWInTransitQty
                )
                select IsGrandTotal, LineType, LineTypeSortValue, ProductNumber, VendAccount, VendName, InTransitQty, InTransitAmount, InTransitAccrual, InTransitVariance
                    , PdsCWInTransitQty
                    from  interCompanyGoodsInTransitTmpTotalsWorkset
                    where interCompanyGoodsInTransitTmpTotalsWorkset.LineType == lineTypeNew;
        }

        void combineTotalsRecords()
        {
            // delete old transactions from main report table as they have now been grouped in other temporary tables.
            delete_from interCompanyGoodsInTransitTmp;

            // Copy beginning balances back to main report table
            insert_recordset interCompanyGoodsInTransitTmp (IsGrandTotal, LineType, LineTypeSortValue, ProductNumber, VendAccount, VendName, InTransitAmount, InTransitAccrual, InTransitVariance)
                select IsGrandTotal, LineType, LineTypeSortValue, ProductNumber, VendAccount, VendName, InTransitAmount, InTransitAccrual, InTransitVariance
                    from  interCompanyGoodsInTransitTmpBeginning;

            // Copy product totals back to main report table
            insert_recordset interCompanyGoodsInTransitTmp (IsGrandTotal, LineType, LineTypeSortValue, ProductNumber, VendAccount, VendName, InTransitQty, InTransitAmount, InTransitAccrual, InTransitVariance
                , pdsCWInTransitQty
                )
                select IsGrandTotal, LineType, LineTypeSortValue, ProductNumber, VendAccount, VendName, InTransitQty, InTransitAmount, InTransitAccrual, InTransitVariance
                    , PdsCWInTransitQty
                    from  interCompanyGoodsInTransitTmpTotalsProduct;

            // Copy net changes back to main report table
            insert_recordset interCompanyGoodsInTransitTmp (IsGrandTotal, LineType, LineTypeSortValue, ProductNumber, VendAccount, VendName, InTransitAmount, InTransitAccrual, InTransitVariance)
                select IsGrandTotal, LineType, LineTypeSortValue, ProductNumber, VendAccount, VendName, InTransitAmount, InTransitAccrual, InTransitVariance
                    from  interCompanyGoodsInTransitTmpNetChange;

            // Copy vendor totals back to main report table
            insert_recordset interCompanyGoodsInTransitTmp (IsGrandTotal, LineType, LineTypeSortValue, ProductNumber, VendAccount, VendName, InTransitQty, InTransitAmount, InTransitAccrual, InTransitVariance
                , pdsCWInTransitQty
                )
                select IsGrandTotal, LineType, LineTypeSortValue, ProductNumber, VendAccount, VendName, InTransitQty, InTransitAmount, InTransitAccrual, InTransitVariance
                    , PdsCWInTransitQty
                    from  interCompanyGoodsInTransitTmpTotalsVendor;
        }

        void createEmptyGrandTotal()
        {
            // Create emtpy grand total in case no transactions exist.
            interCompanyGoodsInTransitTmp.clear();
            interCompanyGoodsInTransitTmp.IsGrandTotal      = NoYes::Yes;
            interCompanyGoodsInTransitTmp.LineType          = IntercompanyGoodsInTransitLineType::TotalEndingBalance;
            interCompanyGoodsInTransitTmp.LineTypeSortValue = IntercompanyGoodsInTransitLineType::TotalEndingBalance;
            interCompanyGoodsInTransitTmp.insert();
        }

        void calculateGrandTotal()
        {
            // Calculate total ending balances in main report table from totals per vendor
            VendAccount     vendAccountLast;
            VendName        vendNameLast;

            select firstonly interCompanyGoodsInTransitTmpBeginning order by VendAccount desc;
            vendAccountLast = interCompanyGoodsInTransitTmpBeginning.VendAccount;
            vendNameLast    = interCompanyGoodsInTransitTmpBeginning.VendName;

            if (!interCompanyGoodsInTransitTmpBeginning.RecId)
            {
                createEmptyGrandTotal();
                return;
            }

            lineTypeNew         = IntercompanyGoodsInTransitLineType::PreTotalEndingBlank;

            insert_recordset interCompanyGoodsInTransitTmp (IsGrandTotal, LineType, LineTypeSortValue, ProductNumber, VendAccount, VendName)
                select isGrandTotalValue, lineTypeNew, lineTypeNew, productNumberEmpty, vendAccountLast, vendNameLast
                    from  interCompanyGoodsInTransitTmpTotalsVendor
                    group by IsGrandTotal;

            lineTypeNew         = IntercompanyGoodsInTransitLineType::TotalEndingBalance;

            insert_recordset interCompanyGoodsInTransitTmp (IsGrandTotal, LineType, LineTypeSortValue, ProductNumber, VendAccount, VendName, InTransitQty, InTransitAmount, InTransitAccrual, InTransitVariance
                , pdsCWInTransitQty
                )
                select isGrandTotalValue, lineTypeNew, lineTypeNew, productNumberEmpty, vendAccountLast, vendNameLast, noAmount, sum(InTransitAmount), sum(InTransitAccrual), sum(InTransitVariance)
                    , noAmount //same as the inventQty
                    from  interCompanyGoodsInTransitTmpTotalsVendor;
        }

        // Start of main method

        if (interCompanyGoodsInTransitLayout == InterCompanyGoodsInTransitLayout::Transactions)
        {
            return;
        }

        select firstonly interCompanyGoodsInTransitTmp;
        if (!interCompanyGoodsInTransitTmp)
        {
            // No transactions at all, so create an empty grand total and return
            createEmptyGrandTotal();
            return;
        }

        calculateNetChanges();                  // Summarize transactions in period per product and then per vendor
        calculateBeginningBalances();           // Calculate beginning balances for vendors with transactions before the from date
        calculateEndingBalancesPerVendor();     // Calculate ending balances per vendor
        createMissingBeginningBalanceRecords(); // Insert empty beginning balance where no transctions exist prior to from date
        createMissingNetChangesRecords();       // Create net change records for vendors without changes in period, but with a beginning balance
        combineTotalsRecords();                 // Empty the main temp table and copy totals back from other tables
        calculateGrandTotal();                  // Calculate total ending balances
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcVarianceLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates variance lines for fully shipped and received order lines.
    /// </summary>
    protected void calcVarianceLines()
    {
        VendPackingSlipTrans    vendPackingSlipTrans;
        CustPackingSlipTrans    custPackingSlipTrans;
        PurchLine               purchLine;
        InventTable             inventTable;
        InventTableModule       inventTableModule;
        EcoResProduct           ecoResProduct;

        interCompanyGoodsInTransitTmp.Origin            = InterCompanyGoodsInTransitOrigin::Variance;
        interCompanyGoodsInTransitTmp.LineType          = IntercompanyGoodsInTransitLineType::Transaction;
        interCompanyGoodsInTransitTmp.LineTypeSortValue = IntercompanyGoodsInTransitLineType::Transaction;
        interCompanyGoodsInTransitTmp.DeliveryDate      = dateNull();
        interCompanyGoodsInTransitTmp.PackingSlipId     = '';

        while select interCompanyGoodsInTransitLineTotalsTmp
            where interCompanyGoodsInTransitLineTotalsTmp.IsCompletelyReceived  == NoYes::Yes
               && interCompanyGoodsInTransitLineTotalsTmp.IsCompletelyShipped   == NoYes::Yes
               && interCompanyGoodsInTransitLineTotalsTmp.InTransitQty          != 0
            join RecId from purchLine
                where purchLine.InventTransId   == interCompanyGoodsInTransitLineTotalsTmp.PurchLineInventTransId
            join inventTable
                where inventTable.ItemId    == purchLine.ItemId
            join UnitId from inventTableModule
                where inventTableModule.ItemId      == inventTable.ItemId
                  &&  inventTableModule.ModuleType  == ModuleInventPurchSales::Invent
            join DisplayProductNumber from ecoResProduct
                where ecoResProduct.RecId   == inventTable.Product
            join interCompanyGoodsInTransitOrdersTmp
                where interCompanyGoodsInTransitOrdersTmp.PurchId   == purchLine.PurchId
            notexists join vendPackingSlipTrans // Don't include if receipts have been made after the to date.
                where vendPackingSlipTrans.InventTransId    == interCompanyGoodsInTransitLineTotalsTmp.PurchLineInventTransId
                  &&  vendPackingSlipTrans.DeliveryDate      > this.searchToDate()
        {
            changecompany(interCompanyGoodsInTransitLineTotalsTmp.InterCompanyCompanyId)
            {
                select firstonly RecId from custPackingSlipTrans
                    where custPackingSlipTrans.InventTransId    == interCompanyGoodsInTransitLineTotalsTmp.SalesLineInventTransId
                        &&  custPackingSlipTrans.DeliveryDate      > this.searchToDate();
            }
            if (!custPackingSlipTrans.RecId)
            {
                // Don't include if shipments have been made after the to date.
                interCompanyGoodsInTransitTmp.VendAccount           = interCompanyGoodsInTransitOrdersTmp.VendAccount;
                interCompanyGoodsInTransitTmp.VendName              = interCompanyGoodsInTransitOrdersTmp.VendName;
                interCompanyGoodsInTransitTmp.PurchId               = interCompanyGoodsInTransitOrdersTmp.PurchId;
                interCompanyGoodsInTransitTmp.InventItemGroup       = inventTable.itemGroupId();
                interCompanyGoodsInTransitTmp.ProductNumber         = ecoResProduct.DisplayProductNumber;
                interCompanyGoodsInTransitTmp.UnitOfMeasureSymbol   = inventTableModule.UnitId;
                interCompanyGoodsInTransitTmp.PdsCWUnit             = PdsCatchWeight::cwUnitId(inventTable.ItemId);
                interCompanyGoodsInTransitTmp.PdsCWInTransitQty     = -1 * interCompanyGoodsInTransitLineTotalsTmp.PdsCWInTransitQty;
                interCompanyGoodsInTransitTmp.InTransitQty          = -1 * interCompanyGoodsInTransitLineTotalsTmp.InTransitQty;
                interCompanyGoodsInTransitTmp.InTransitAmount       = -1 * interCompanyGoodsInTransitLineTotalsTmp.InTransitAmount;
                interCompanyGoodsInTransitTmp.InTransitAccrual      = -1 * interCompanyGoodsInTransitLineTotalsTmp.InTransitAccrual;
                interCompanyGoodsInTransitTmp.InTransitVariance     = interCompanyGoodsInTransitTmp.InTransitAccrual - interCompanyGoodsInTransitTmp.InTransitAmount;
                interCompanyGoodsInTransitTmp.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcVendorReceipts</Name>
				<Source><![CDATA[
    protected void calcVendorReceipts()
    {
        VendPackingSlipTrans            vendPackingSlipTrans;
        PurchLine                       purchLine;
        InventTable                     inventTable;
        InventTableModule               inventTableModule;
        EcoResProduct                   ecoResProduct;

        ttsbegin;

        interCompanyGoodsInTransitTmp.Origin    = InterCompanyGoodsInTransitOrigin::ProductReceipt;

        while select interCompanyGoodsInTransitOrdersTmp
            join purchLine
                where purchLine.PurchId         == interCompanyGoodsInTransitOrdersTmp.PurchId
                   && purchLine.DeliveryType    != TradeLineDlvType::DropShip
                join vendPackingSlipTrans
                    where   vendPackingSlipTrans.InventTransId          == purchLine.InventTransId
                        &&  vendPackingSlipTrans.DeliveryDate           <= this.searchToDate()
                join inventTable
                    where inventTable.ItemId    == purchLine.ItemId
                        && inventTable.ItemType  != ItemType::Service
                join inventTableModule
                    where inventTableModule.ItemId      == inventTable.ItemId
                        &&  inventTableModule.ModuleType  == ModuleInventPurchSales::Invent
                join DisplayProductNumber from ecoResProduct
                    where ecoResProduct.RecId   == inventTable.Product
        {
            if (inventTable.isStocked())
            {
                interCompanyGoodsInTransitTmp.VendAccount       = interCompanyGoodsInTransitOrdersTmp.VendAccount;
                interCompanyGoodsInTransitTmp.VendName          = interCompanyGoodsInTransitOrdersTmp.VendName;
                interCompanyGoodsInTransitTmp.PurchId           = interCompanyGoodsInTransitOrdersTmp.PurchId;
                interCompanyGoodsInTransitTmp.DeliveryDate      = vendPackingSlipTrans.DeliveryDate;
                interCompanyGoodsInTransitTmp.PackingSlipId     = vendPackingSlipTrans.PackingSlipId;
                interCompanyGoodsInTransitTmp.InventItemGroup   = inventTable.itemGroupId();
                interCompanyGoodsInTransitTmp.ProductNumber     = ecoResProduct.DisplayProductNumber;

                this.initFromVendPackingSlipTrans(vendPackingSlipTrans, purchLine, inventTable, inventTableModule);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustomerOrders</Name>
				<Source><![CDATA[
    protected void findCustomerOrders(
        VendTable                               _vendTable,
        InterCompanyTradingCustomerDataAreaID   _customerDataAreaId,
        InterCompanyTradingCustomerPartyID      _customerParty)
    {
        CustPackingSlipJour         custPackingSlipJour;
        CustPackingSlipTrans        custPackingSlipTrans;
        CustPackingSlipSalesLink    custPackingSlipSalesLink;
        CustTable                   custTable;
        SalesTable                  salesTable;
        VendName                    vendName = _vendTable.name();

        changecompany(_customerDataAreaId)
        {
            custTable = CustTable::findByPartyRecId(_customerParty);

            // Find items shipped for that customer
            while select RecId from custPackingSlipJour
                where custPackingSlipJour.OrderAccount          == custTable.AccountNum
                  &&  custPackingSlipJour.DeliveryDate          >= this.searchFromDate()
                  &&  custPackingSlipJour.DeliveryDate          <= this.searchToDate()
                  &&  custPackingSlipJour.InterCompanyCompanyId == currentCompany
                  &&  custPackingSlipJour.InterCompanyPurchId
                join RecId from custPackingSlipSalesLink
                    where custPackingSlipSalesLink.SalesId          == custPackingSlipJour.SalesId
                       && custPackingSlipSalesLink.PackingSlipId    == custPackingSlipJour.PackingSlipId
                       && custPackingSlipSalesLink.DeliveryDate     == custPackingSlipJour.DeliveryDate
                join SalesId, InterCompanyOrder, InterCompanyCompanyId, InterCompanyPurchId from salesTable
                    where salesTable.SalesId                    == custPackingSlipSalesLink.OrigSalesId
                       && salesTable.InterCompanyCompanyId      == currentCompany
                exists join custPackingSlipTrans
                    where   custPackingSlipTrans.PackingSlipId  == custPackingSlipJour.PackingSlipId
                        &&  custPackingSlipTrans.SalesId        == custPackingSlipJour.SalesId
                        &&  custPackingSlipTrans.DeliveryDate   == custPackingSlipJour.DeliveryDate
            {
                select firstonly interCompanyGoodsInTransitOrdersTmp
                    where interCompanyGoodsInTransitOrdersTmp.PurchId == salesTable.InterCompanyPurchId;
                if (!interCompanyGoodsInTransitOrdersTmp.RecId
                 && !this.isPurchaseOrderDirectDelivery(salesTable.InterCompanyPurchId))
                {
                    // Not already included
                    interCompanyGoodsInTransitOrdersTmp.clear();
                    interCompanyGoodsInTransitOrdersTmp.PurchId                 = salesTable.InterCompanyPurchId;
                    interCompanyGoodsInTransitOrdersTmp.InterCompanyCompanyId   = _customerDataAreaId;
                    interCompanyGoodsInTransitOrdersTmp.SalesId                 = salesTable.SalesId;
                    interCompanyGoodsInTransitOrdersTmp.VendAccount             = _vendTable.AccountNum;
                    interCompanyGoodsInTransitOrdersTmp.VendName                = vendName;
                    interCompanyGoodsInTransitOrdersTmp.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrders</Name>
				<Source><![CDATA[
    protected void findOrders(
        VendTable                               _vendTable,
        InterCompanyTradingCustomerDataAreaID   _customerDataAreaId,
        InterCompanyTradingCustomerPartyID      _customerParty)
    {
        this.findVendorOrders(_vendTable, _customerDataAreaId, _customerParty);
        this.findCustomerOrders(_vendTable, _customerDataAreaId, _customerParty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendorOrders</Name>
				<Source><![CDATA[
    protected void findVendorOrders(
        VendTable                               _vendTable,
        InterCompanyTradingCustomerDataAreaID   _customerDataAreaId,
        InterCompanyTradingCustomerPartyID      _customerParty)
    {
        VendPackingSlipJour         vendPackingSlipJour;
        VendPackingSlipPurchLink    vendPackingSlipPurchLink;
        CustTable                   custTable;
        SalesTable                  salesTable;
        PurchTable                  purchTable;
        PurchLine                   purchLine;

        while select RecId from vendPackingSlipJour
            where vendPackingSlipJour.OrderAccount == _vendTable.AccountNum
                &&  vendPackingSlipJour.DeliveryDate >= this.searchFromDate()
                &&  vendPackingSlipJour.DeliveryDate <= this.searchToDate()
                join RecId from vendPackingSlipPurchLink
                    where vendPackingSlipPurchLink.VendPackingSlipJour  == vendPackingSlipJour.RecId
                join PurchId, InterCompanyOrder, InterCompanyCompanyId, InterCompanySalesId from purchTable
                    where purchTable.PurchId == vendPackingSlipPurchLink.OrigPurchId
                      &&  purchTable.InterCompanySalesId                                    // Must be intercompany orders
                      &&  purchTable.InterCompanyCompanyId
                      &&  purchTable.InterCompanyOrder
                exists join purchLine
                    where purchLine.PurchId         == purchTable.PurchId
                        &&  purchLine.DeliveryType    != TradeLineDlvType::DropShip   // Exclude orders with only direct deliveries
        {
            changecompany(purchTable.InterCompanyCompanyId)
            {
                // Verify that sales order is still linked to the requested customer party
                salesTable = SalesTable::find(purchTable.InterCompanySalesId);
                custTable = salesTable.custTable_CustAccount();
            }

            if (custTable.Party == _customerParty)
            {
                // Only look at orders from this customer.
                select firstonly interCompanyGoodsInTransitOrdersTmp
                    where interCompanyGoodsInTransitOrdersTmp.PurchId == purchTable.PurchId;
                if (!interCompanyGoodsInTransitOrdersTmp.RecId)
                {
                    interCompanyGoodsInTransitOrdersTmp.clear();
                    interCompanyGoodsInTransitOrdersTmp.PurchId                 = purchTable.PurchId;
                    interCompanyGoodsInTransitOrdersTmp.InterCompanyCompanyId   = purchTable.InterCompanyCompanyId;
                    interCompanyGoodsInTransitOrdersTmp.SalesId                 = purchTable.InterCompanySalesId;
                    interCompanyGoodsInTransitOrdersTmp.VendAccount             = _vendTable.AccountNum;
                    interCompanyGoodsInTransitOrdersTmp.VendName                = _vendTable.name();
                    interCompanyGoodsInTransitOrdersTmp.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate</Name>
				<Source><![CDATA[
    protected TransDate fromDate()
    {
        InventCostDateCodeContract      inventCostDateCodeContract = interCompanyGoodsInTransitContract.parmInventCostDateCodeContract();

        return inventCostDateCodeContract.parmFromDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adjusts the <c>FromDate</c> and <c>ToDate</c> data types according to a date code.
    /// </summary>
    protected void initDates()
    {
        InventCostDateCodeContract      inventCostDateCodeContract = interCompanyGoodsInTransitContract.parmInventCostDateCodeContract();
        LedgerPeriodCode                ledgerPeriodCode;

        if (inventCostDateCodeContract.parmDateCode())
        {
            ledgerPeriodCode = LedgerPeriodCode::find(inventCostDateCodeContract.parmDateCode());
            if (ledgerPeriodCode.RecId)
            {
                inventCostDateCodeContract.parmFromDate(ledgerPeriodCode.fromDate());
                inventCostDateCodeContract.parmToDate(ledgerPeriodCode.toDate());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustPackingSlipTrans</Name>
				<Source><![CDATA[
    protected void initFromCustPackingSlipTrans(
        CustPackingSlipTrans    _custPackingSlipTrans,
        SalesLine               _salesLine,
        UnitOfMeasureSymbol     _intercompanyInventoryUnit)
    {
        PurchLine               purchLine;
        InventTable             inventTablePurch;
        EcoResProduct           ecoResProduct;
        InventTableModule       inventTableModulePurchLine;
        AmountMST               inTransitAccrualAmount          = 0;
        AmountMST               inTransitAmount;

        if (_salesLine.SalesQty)
        {
            inTransitAccrualAmount = _custPackingSlipTrans.Qty * _salesLine.LineAmount / _salesLine.SalesQty;
        }
        interCompanyGoodsInTransitTmp.LineType              = IntercompanyGoodsInTransitLineType::Transaction;
        interCompanyGoodsInTransitTmp.LineTypeSortValue     = IntercompanyGoodsInTransitLineType::Transaction;

        changecompany(currentCompany)
        {
            purchLine = PurchLine::findInventTransId(_salesLine.InterCompanyInventTransId);
            inventTablePurch = purchLine.inventTable();
            if (inventTablePurch.ItemType != ItemType::Service
             && inventTablePurch.isStocked())
            {
                ecoResProduct = EcoResProduct::find(inventTablePurch.Product);
                inventTableModulePurchLine = inventTablePurch.inventTableModuleInvent();

                interCompanyGoodsInTransitTmp.ProductNumber = ecoResProduct.DisplayProductNumber;
                interCompanyGoodsInTransitTmp.InventItemGroup = purchLine.inventTable().itemGroupId();
                interCompanyGoodsInTransitTmp.UnitOfMeasureSymbol = inventTableModulePurchLine.UnitId;
                interCompanyGoodsInTransitTmp.PdsCWUnit           = _custPackingSlipTrans.pdsCWUnitId();
                interCompanyGoodsInTransitTmp.PdsCWInTransitQty   = _custPackingSlipTrans.PdsCWQty;

                interCompanyGoodsInTransitTmp.InTransitQty = _custPackingSlipTrans.InventQty;
                if (_intercompanyInventoryUnit != inventTableModulePurchLine.UnitId)
                {
                    // Different inventory units in the 2 companies, so convert to current company inventory unit
                    interCompanyGoodsInTransitTmp.InTransitQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(purchLine.ItemId,
                                                                                                                                       purchLine.InventDimId,
                                                                                                                                       interCompanyGoodsInTransitTmp.InTransitQty,
                                                                                                                                       _intercompanyInventoryUnit,
                                                                                                                                       inventTableModulePurchLine.UnitId,
                                                                                                                                       NoYes::Yes);
                }

                if (currencyCodeCurExt != _salesLine.CurrencyCode)
                {
                    inTransitAccrualAmount = CurrencyExchangeHelper::mstAmount(inTransitAccrualAmount, _salesLine.CurrencyCode, this.searchToDate());
                }

                if (inventTablePurch.modelGroup().inventModelType().stdCostBased())
                {
                    inTransitAmount = interCompanyGoodsInTransitTmp.InTransitQty * inventTablePurch.costPcsPrice(purchLine.InventDimId, purchLine.inventDim(), inventTableModulePurchLine, this.searchToDate(), false);
                }
                else
                {
                    inTransitAmount = inTransitAccrualAmount;
                }

                interCompanyGoodsInTransitTmp.InTransitAmount   = inTransitAmount;
                interCompanyGoodsInTransitTmp.InTransitAccrual  = inTransitAccrualAmount;
                interCompanyGoodsInTransitTmp.InTransitVariance = interCompanyGoodsInTransitTmp.InTransitAccrual - interCompanyGoodsInTransitTmp.InTransitAmount;
                interCompanyGoodsInTransitTmp.insert();
                if (interCompanyGoodsInTransitContract.parmDeductVariances())
                {
                    this.addShippedToTotalsTmp(curext(), _salesLine, purchLine, interCompanyGoodsInTransitTmp.InTransitQty, interCompanyGoodsInTransitTmp.InTransitAmount, interCompanyGoodsInTransitTmp.InTransitAccrual
                    , interCompanyGoodsInTransitTmp.PdsCWInTransitQty
                    );
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendPackingSlipTrans</Name>
				<Source><![CDATA[
    protected void initFromVendPackingSlipTrans(
        VendPackingSlipTrans    _vendPackingSlipTrans,
        PurchLine               _purchLine,
        InventTable             _inventTablePurch,
        InventTableModule       _inventTableModulePurchLine)
    {
        AmountMST                       inTransitAccrualAmount              = 0;
        AmountMST                       inTransitAmount;

        interCompanyGoodsInTransitTmp.LineType              = IntercompanyGoodsInTransitLineType::Transaction;
        interCompanyGoodsInTransitTmp.LineTypeSortValue     = IntercompanyGoodsInTransitLineType::Transaction;
        interCompanyGoodsInTransitTmp.UnitOfMeasureSymbol   = _inventTableModulePurchLine.UnitId;
        interCompanyGoodsInTransitTmp.DeliveryDate          = _vendPackingSlipTrans.DeliveryDate;

        interCompanyGoodsInTransitTmp.InTransitQty          = -1 * _vendPackingSlipTrans.InventQty;
        interCompanyGoodsInTransitTmp.PdsCWInTransitQty     = -1 * _vendPackingSlipTrans.PdsCWQty;
        interCompanyGoodsInTransitTmp.PdsCWUnit             = _vendPackingSlipTrans.pdsCWUnitId();

        if (_purchLine.QtyOrdered)
        {
            inTransitAccrualAmount = interCompanyGoodsInTransitTmp.InTransitQty * _purchLine.LineAmount / _purchLine.QtyOrdered;
        }

        if (inTransitAccrualAmount && currencyCodeCurExt != _purchLine.CurrencyCode)
        {
            inTransitAccrualAmount = CurrencyExchangeHelper::mstAmount(inTransitAccrualAmount, _purchLine.CurrencyCode, this.searchToDate());
        }

        interCompanyGoodsInTransitTmp.InTransitAccrual      = inTransitAccrualAmount;

        if (_inventTablePurch.modelGroup().inventModelType().stdCostBased())
        {
            inTransitAmount = -_vendPackingSlipTrans.InventQty * _inventTablePurch.costPcsPrice(_purchLine.InventDimId, _purchLine.inventDim(), _inventTableModulePurchLine, this.searchToDate(), false);
        }
        else
        {
            inTransitAmount = inTransitAccrualAmount;
        }

        interCompanyGoodsInTransitTmp.InTransitAmount       = inTransitAmount;
        interCompanyGoodsInTransitTmp.InTransitVariance     = interCompanyGoodsInTransitTmp.InTransitAccrual - interCompanyGoodsInTransitTmp.InTransitAmount;
        interCompanyGoodsInTransitTmp.insert();
        if (interCompanyGoodsInTransitContract.parmDeductVariances())
        {
            this.addReceivedToTotalsTmp(_purchLine, interCompanyGoodsInTransitTmp.InTransitQty, interCompanyGoodsInTransitTmp.InTransitAmount, interCompanyGoodsInTransitTmp.InTransitAccrual
            , interCompanyGoodsInTransitTmp.PdsCWInTransitQty
            );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchaseOrderDirectDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified purchase order requires direct delivery.
    /// </summary>
    /// <param name="_purchId">
    /// The ID of a purchase order to check.
    /// </param>
    /// <returns>
    /// true if the order requires direct delivery; otherwise, false.
    /// </returns>
    private boolean isPurchaseOrderDirectDelivery(PurchId _purchId)
    {
        boolean     isDirectDelivery = false;
        PurchLine   purchLine;

        if (purchaseOrdersCheckedForDirectDelivery.exists(_purchId))
        {
            isDirectDelivery = purchaseOrdersCheckedForDirectDelivery.lookup(_purchId);
        }
        else
        {
            changecompany(currentCompany)
            {
                select firstonly DeliveryType from purchLine
                    where purchLine.PurchId == _purchId
                      && !purchLine.IsDeleted;
                if (purchLine.DeliveryType == TradeLineDlvType::DropShip)
                {
                    // For intercompany orders either all or no lines are direct deliveries
                    isDirectDelivery = true;
                }
            }
            purchaseOrdersCheckedForDirectDelivery.insert(_purchId, isDirectDelivery);
        }
        return isDirectDelivery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        currentCompany = curext();
        currencyCodeCurExt = Ledger::accountingCurrency();

        purchaseOrdersCheckedForDirectDelivery  = new Map(Types::String, Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterCompanyGoodsInTransitContract</Name>
				<Source><![CDATA[
    protected InterCompanyGoodsInTransitContract parmInterCompanyGoodsInTransitContract(InterCompanyGoodsInTransitContract _interCompanyGoodsInTransitContract = interCompanyGoodsInTransitContract)
    {
        interCompanyGoodsInTransitContract = _interCompanyGoodsInTransitContract;

        return interCompanyGoodsInTransitContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterCompanyGoodsInTransitLayout</Name>
				<Source><![CDATA[
    protected InterCompanyGoodsInTransitLayout parmInterCompanyGoodsInTransitLayout(InterCompanyGoodsInTransitLayout _interCompanyGoodsInTransitLayout = interCompanyGoodsInTransitLayout)
    {
        interCompanyGoodsInTransitLayout = _interCompanyGoodsInTransitLayout;

        return interCompanyGoodsInTransitLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterCompanyGoodsInTransitTmp</Name>
				<Source><![CDATA[
    protected InterCompanyGoodsInTransitTmp parmInterCompanyGoodsInTransitTmp(InterCompanyGoodsInTransitTmp _interCompanyGoodsInTransitTmp = interCompanyGoodsInTransitTmp)
    {
        interCompanyGoodsInTransitTmp = _interCompanyGoodsInTransitTmp;

        return interCompanyGoodsInTransitTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchFromDate</Name>
				<Source><![CDATA[
    protected TransDate searchFromDate()
    {
        InventCostDateCodeContract      inventCostDateCodeContract = interCompanyGoodsInTransitContract.parmInventCostDateCodeContract();

        return inventCostDateCodeContract.parmFromDate() - interCompanyGoodsInTransitContract.parmTimeFence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchToDate</Name>
				<Source><![CDATA[
    protected TransDate searchToDate()
    {
        InventCostDateCodeContract      inventCostDateCodeContract = interCompanyGoodsInTransitContract.parmInventCostDateCodeContract();

        return inventCostDateCodeContract.parmToDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills out the temporary table <c>PdsEnabled</c> field stating whether the
    ///    Catch weight configuration key is enabled.
    /// </summary>
    private void setPdsEnabled()
    {
        NoYes       pdsCWEnabled = (#PdsCatchWeightEnabled? NoYes::Yes : NoYes::No);

        update_recordset interCompanyGoodsInTransitTmp
            setting PdsEnabled = pdsCWEnabled;

        update_recordset interCompanyGoodsInTransitLineTotalsTmp
            setting PdsEnabled = pdsCWEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFromReport</Name>
				<Source><![CDATA[
    static public void calcFromReport(
        InterCompanyGoodsInTransitTmp       _interCompanyGoodsInTransitTmp,
        InterCompanyGoodsInTransitContract  _interCompanyGoodsInTransitContract,
        InterCompanyGoodsInTransitLayout    _interCompanyGoodsInTransitLayout,
        QueryRun                            _queryRunVendTable)
    {
        InterCompanyGoodsInTransitCalculation       interCompanyGoodsInTransitCalculation;
        VendTable                                   vendTable;
        InterCompanyTradingPartner                  interCompanyTradingPartner;

        interCompanyGoodsInTransitCalculation = InterCompanyGoodsInTransitCalculation::construct();
        interCompanyGoodsInTransitCalculation.parmInterCompanyGoodsInTransitLayout(_interCompanyGoodsInTransitLayout);
        interCompanyGoodsInTransitCalculation.parmInterCompanyGoodsInTransitTmp(_interCompanyGoodsInTransitTmp);
        interCompanyGoodsInTransitCalculation.parmInterCompanyGoodsInTransitContract(_interCompanyGoodsInTransitContract);
        interCompanyGoodsInTransitCalculation.initDates();

        while (_queryRunVendTable.next())
        {
            vendTable = _queryRunVendTable.get(tableNum(VendTable));
            interCompanyTradingPartner = _queryRunVendTable.get(tableNum(InterCompanyTradingPartner), 2);

            interCompanyGoodsInTransitCalculation.findOrders(
                    vendTable,
                    interCompanyTradingPartner.CustomerDataAreaId,
                    interCompanyTradingPartner.CustomerParty);
        }

        interCompanyGoodsInTransitCalculation.calcCustomerShipments();
        interCompanyGoodsInTransitCalculation.calcVendorReceipts();
        if (_interCompanyGoodsInTransitContract.parmDeductVariances())
        {
            interCompanyGoodsInTransitCalculation.calcVarianceLines();
        }

        if (_interCompanyGoodsInTransitLayout == InterCompanyGoodsInTransitLayout::Totals)
        {
            interCompanyGoodsInTransitCalculation.calcTotals();
        }

        interCompanyGoodsInTransitCalculation.setPdsEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InterCompanyGoodsInTransitCalculation construct()
    {
        return new InterCompanyGoodsInTransitCalculation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>