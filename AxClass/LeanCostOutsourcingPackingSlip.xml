<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCostOutsourcingPackingSlip</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanCostOutsourcingPackingSlip</c> class encapsulates logic to create lean outsourcing cost
///    transactions that are based on packing slip lines.
/// </summary>
class LeanCostOutsourcingPackingSlip extends LeanCostOutsourcing
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOutsourcingCost</Name>
				<Source><![CDATA[
/// <summary>
    ///    Creates outsourcing cost transaction for a packing slip line.
    /// </summary>
    /// <param name="_systemSequence">
    ///    The system sequence used for getting a record ID for the transactions
    /// </param>
    /// <param name="_newTransactionsList">
    ///    Transactions list to which to add the new transactions.
    /// </param>
    /// <param name="_inventSiteId">
    ///    The invent site ID.
    /// </param>
    /// <remarks>
    ///    Records are not inserted to the database, but added to the transaction list.
    /// </remarks>
    public void createOutsourcingCost(
        systemSequence      _systemSequence,
        RecordInsertList    _newTransactionsList,
        InventSiteId        _inventSiteId)
    {
        ProdRouteTrans previousProdRouteTrans = this.findPreviousProdRouteTrans();

        // This is a correction if we have a "previous version" ProdRouteTrans record.
        if (previousProdRouteTrans)
        {
            if (this.hasInvoice())
            {
                // We don't have to do anything here because the corrections will be handled through invoice if needed.
                // Whatever is invoiced is considered the current "costing" situation for the line.
                return;
            }

            // We need to reverse the previous direct outsourcing cost record
            // and the corresponding indirect cost for the previous packing slip receipt that is beeing corrected.
            this.createDirectOutsourcingCostReversal(previousProdRouteTrans, previousProdRouteTrans.QtyGood, _systemSequence);
            this.createAndPostIndirectCostReversal(previousProdRouteTrans, 1); // fully reverse, so 1 for percentage of indirect cost to reverse
        }

        if (quantity == 0)
            return;

        Amount transactionAmount = this.getCostAmount();

        ProdRouteTrans newProdRouteTrans = this.createProdRouteTransOutsourcing(_systemSequence,
                    productionFlowReferenceRecId,
                    serviceItemId,
                    serviceInventDimId,
                    defaultDimension,
                    quantity,
                    transactionAmount / quantity,
                    transactionAmount);

        _newTransactionsList.add(newProdRouteTrans);

        this.createOutsourcingOriginRelation(newProdRouteTrans);

        // We need to calculate indirect cost on this
        this.addDirectOutsourcingConsumption(_inventSiteId, newProdRouteTrans);
    }
]]></Source>
			</Method>
			<Method>
				<Name>createOutsourcingOriginRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the corresponding relationship record for the outsourcing cost transaction.
    /// </summary>
    /// <param name="_outsourcingProdRouteTrans">
    ///    The outsourcing cost transaction.
    /// </param>
    /// <returns>
    ///    The corresponding relationship record.
    /// </returns>
    public Common createOutsourcingOriginRelation(
        ProdRouteTrans      _outsourcingProdRouteTrans)
    {
        ProdRouteTransPackingSlipOrigin packingSlipRelationRecord;
        VendPackingSlipTrans vendPackingSlipTrans = VendPackingSlipTrans::findRecId(originRefRecId);

        ttsbegin;
        packingSlipRelationRecord.ProdRouteTrans = _outsourcingProdRouteTrans.RecId;
        packingSlipRelationRecord.VendPackingSlipTrans = originRefRecId;
        packingSlipRelationRecord.VersionDateTime = VendPackingSlipVersion::findLatest(vendPackingSlipTrans.VendPackingSlipJour).VersionDateTime;
        packingSlipRelationRecord.insert();
        ttscommit;

        return packingSlipRelationRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPreviousProdRouteTrans</Name>
				<Source><![CDATA[
        private ProdRouteTrans findPreviousProdRouteTrans()
    {
        ProdRouteTransPackingSlipOrigin prtpsOrigin;
        ProdRouteTrans                  previousProdRouteTrans;

        select ProdRouteTrans from prtpsOrigin
            order by VersionDateTime desc
            where prtpsOrigin.VendPackingSlipTrans == this.parmOriginRefRecId();

        // Find previous direct outsourcing cost transaction based on origin record
        select previousProdRouteTrans
            where previousProdRouteTrans.RecId == prtpsOrigin.ProdRouteTrans;

        return previousProdRouteTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInvoice</Name>
				<Source><![CDATA[
        private boolean hasInvoice()
    {
        VendPackingSlipTrans vendPackingSlipTrans = VendPackingSlipTrans::findRecId(this.parmOriginRefRecId());

        return vendPackingSlipTrans.invoicedPurchQty() != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRecordCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the logic that indicates whether the outsourcing cost is recorded.
    /// </summary>
    /// <returns>
    ///    true if outsourcing cost is created; otherwise, false.
    /// </returns>
    public boolean mustRecordCost()
    {
        InventModelGroup inventModelGroup = InventTable::find(serviceItemId).modelGroup();

        return VendParameters::find().PostPackingSlip
            && inventModelGroup.PostPhysicalPurchase;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
