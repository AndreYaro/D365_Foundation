<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSetupLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;

public final class RetailSetupLogger
{
    System.Reflection.Assembly instrumentationAssembly;
    System.Type applicationEventSourceType;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Load the instrumentation assembly.
    /// </summary>
    public void new()
    {
        instrumentationAssembly = System.Reflection.Assembly::Load('Microsoft.Dynamics.Application.Instrumentation');
        applicationEventSourceType = instrumentationAssembly.GetType('Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource');
    }

]]></Source>
			</Method>
			<Method>
				<Name>logSetupLoadRetailSeedDataStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs a RetailSetupLoadRetailSeedDataStart event.
    /// </summary>
    /// <returns>True if the event is found and logged without error; otherwise, false.</returns>
    public boolean logSetupLoadRetailSeedDataStart()
    {
        return this.invokeLoggingEventMethod('RetailSetupLoadRetailSeedDataStart', [RetailUtilities::isRetailEnabled(), true, '', '']);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logSetupLoadRetailSeedDataFailure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs a RetailSetupLoadRetailSeedDataFailure event.
    /// </summary>
    /// <param name = "ex">The exception object.</param>
    /// <returns>True if the event is found and logged without error; otherwise, false.</returns>
    public boolean logSetupLoadRetailSeedDataFailure(System.Exception ex)
    {
        str errorMessage = ex ? ex.Message : '';
        str stackTrace = ex ? ex.StackTrace : '';
        return this.invokeLoggingEventMethod('RetailSetupLoadRetailSeedDataFailure', [RetailUtilities::isRetailEnabled(), false, errorMessage, stackTrace], true /*isErrorEvent=true*/);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logSetupLoadRetailSeedDataFinish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs a RetailSetupLoadRetailSeedDataStop event.
    /// </summary>
    /// <param name = "ex">The exception object.</param>
    /// <returns>True if the event is found and logged without error; otherwise, false.</returns>
    public boolean logSetupLoadRetailSeedDataFinish(System.Exception ex)
    {
        boolean success = ex == null;
        str errorMessage = ex ? ex.Message : '';
        str stackTrace = ex ? ex.StackTrace : '';
        return this.invokeLoggingEventMethod('RetailSetupLoadRetailSeedDataStop', [RetailUtilities::isRetailEnabled(), success, errorMessage, stackTrace]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logPopulateRetailReceiptTypeConfigurationTableStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs a RetailSetupPopulateRetailReceiptTypeConfigurationTableStart event.
    /// </summary>
    /// <returns>True if the event is found and logged without error; otherwise, false.</returns>
    public boolean logPopulateRetailReceiptTypeConfigurationTableStart()
    {
        return this.invokeLoggingEventMethod('RetailSetupPopulateRetailReceiptTypeConfigurationTableStart', [true, '', '']);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logPopulateExtensibleEnumMetadataStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs a RetailSetupPopulateExtensibleEnumMetadataStart event.
    /// </summary>
    /// <returns>True if the event is found and logged without error; otherwise, false.</returns>
    public boolean logPopulateExtensibleEnumMetadataStart()
    {
        return this.invokeLoggingEventMethod('RetailSetupPopulateExtensibleEnumMetadataStart', [true, '', '']);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logPopulateRetailTableIdTableStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs a RetailSetupRetailTableIdTableStart event.
    /// </summary>
    /// <returns>True if the event is found and logged without error; otherwise, false.</returns>
    public boolean logPopulateRetailTableIdTableStart()
    {
        return this.invokeLoggingEventMethod('RetailSetupPopulateTableIdTableStart', [true, '', '']);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logPopulateRetailReceiptTypeConfigurationTableFailure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs a RetailSetupPopulateRetailReceiptTypeConfigurationTableFailure event.
    /// </summary>
    /// <param name = "ex">The exception object.</param>
    /// <returns>True if the event is found and logged without error; otherwise, false.</returns>
    public boolean logPopulateRetailReceiptTypeConfigurationTableFailure(System.Exception ex)
    {
        str errorMessage = ex ? ex.Message : '';
        str stackTrace = ex ? ex.StackTrace : '';
        return this.invokeLoggingEventMethod('RetailSetupPopulateRetailReceiptTypeConfigurationTableFailure', [false, errorMessage, stackTrace], true /*isErrorEvent=true*/);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logPopulateExtensibleEnumMetadataFailure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs a RetailSetupPopulateExtensibleEnumMetadataFailure event.
    /// </summary>
    /// <param name = "ex">The exception object.</param>
    /// <returns>True if the event is found and logged without error; otherwise, false.</returns>
    public boolean logPopulateExtensibleEnumMetadataFailure(System.Exception ex)
    {
        str errorMessage = ex ? ex.Message : '';
        str stackTrace = ex ? ex.StackTrace : '';
        return this.invokeLoggingEventMethod('RetailSetupPopulateExtensibleEnumMetadataFailure', [false, errorMessage, stackTrace], true /*isErrorEvent=true*/);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logRetailTableIdTableFailure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs a RetailSetupRetailTableIdTableFailure event.
    /// </summary>
    /// <param name = "ex">The exception object.</param>
    /// <returns>True if the event is found and logged without error; otherwise, false.</returns>
    public boolean logRetailTableIdTableFailure(System.Exception ex)
    {
        str errorMessage = ex ? ex.Message : '';
        str stackTrace = ex ? ex.StackTrace : '';
        return this.invokeLoggingEventMethod('RetailSetupPopulateTableIdTableFailure', [false, errorMessage, stackTrace], true /*isErrorEvent=true*/);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logPopulateRetailReceiptTypeConfigurationTableFinish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs a RetailSetupPopulateRetailReceiptTypeConfigurationTableStop event.
    /// </summary>
    /// <param name = "ex">The exception object.</param>
    /// <returns>True if the event is found and logged without error; otherwise, false.</returns>
    public boolean logPopulateRetailReceiptTypeConfigurationTableFinish(System.Exception ex)
    {
        boolean success = ex == null;
        str errorMessage = ex ? ex.Message : '';
        str stackTrace = ex ? ex.StackTrace : '';
        return this.invokeLoggingEventMethod('RetailSetupPopulateRetailReceiptTypeConfigurationTableStop', [success, errorMessage, stackTrace]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logPopulateExtensibleEnumMetadataFinish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs a RetailSetupPopulateExtensibleEnumMetadataStop event.
    /// </summary>
    /// <param name = "ex">The exception object.</param>
    /// <returns>True if the event is found and logged without error; otherwise, false.</returns>
    public boolean logPopulateExtensibleEnumMetadataFinish(System.Exception ex)
    {
        boolean success = ex == null;
        str errorMessage = ex ? ex.Message : '';
        str stackTrace = ex ? ex.StackTrace : '';
        return this.invokeLoggingEventMethod('RetailSetupPopulateExtensibleEnumMetadataStop', [success, errorMessage, stackTrace]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logRetailSetupRetailTableIdTableFinish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs a RetailSetupRetailTableIdTableFinish event.
    /// </summary>
    /// <param name = "ex">The exception object.</param>
    /// <returns>True if the event is found and logged without error; otherwise, false.</returns>
    public boolean logRetailSetupRetailTableIdTableFinish(System.Exception ex)
    {
        boolean success = ex == null;
        str errorMessage = ex ? ex.Message : '';
        str stackTrace = ex ? ex.StackTrace : '';
        return this.invokeLoggingEventMethod('RetailSetupPopulateTableIdTableStop', [success, errorMessage, stackTrace]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logMarkRetailPostSetupActionUpdateConflict</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs a MarkRetailPostSetupActionUpdateConflict event.
    /// </summary>
    /// <param name = "ex">The exception object.</param>
    /// <returns>True if the event is found and logged without error; otherwise, false.</returns>
    public boolean logMarkRetailPostSetupActionUpdateConflict(System.Exception ex)
    {
        boolean success = ex == null;
        str errorMessage = ex ? ex.Message : '';
        str stackTrace = ex ? ex.StackTrace : '';
        return this.invokeLoggingEventMethod('RetailPostSetupActionUpdateConflict', [success, errorMessage, stackTrace]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeLoggingEventMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the event methods.
    /// </summary>
    /// <param name = "eventName">The event name</param>
    /// <param name = "eventData">The event data.</param>
    /// <param name = "isErrorEvent">True if the event signifies an error event; otherwise, false.</param>
    /// <returns>True if the event is found and logged without error; otherwise, false.</returns>
    private boolean invokeLoggingEventMethod(str eventName, container eventData, boolean isErrorEvent = false)
    {
        System.Reflection.MethodInfo eventWriteMethod = applicationEventSourceType.GetMethod(strFmt('EventWrite%1', eventName));

        try
        {
            eventWriteMethod.Invoke(applicationEventSourceType, eventData);
            return true;
        }
        catch
        {
            if(isErrorEvent)
            {
                RetailTracer::Error(eventName, funcName(), con2Str(eventData));
            }
            else
            {
                RetailTracer::Info(eventName, funcName(), con2Str(eventData));
            }
            return false;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>logLoadTableFieldMetadataStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs a RetailSetupLoadTableFieldMetadataStart event.
    /// </summary>
    /// <returns>True if the event is found and logged without error; otherwise, false.</returns>
    public boolean logLoadTableFieldMetadataStart()
    {
        return this.invokeLoggingEventMethod('RetailSetupLoadTableFieldMetadataStart', [true, '', '']); // Start should be inside the OpcodeName
    }

]]></Source>
			</Method>
			<Method>
				<Name>logLoadTableFieldMetadataFailure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs a RetailSetupLoadTableFieldMetadataFailure event.
    /// </summary>
    /// <param name = "ex">The exception object.</param>
    /// <returns>True if the event is found and logged without error; otherwise, false.</returns>
    public boolean logLoadTableFieldMetadataFailure(System.Exception ex)
    {
        str errorMessage = ex ? ex.Message : '';
        str stackTrace = ex ? ex.StackTrace : '';
        return this.invokeLoggingEventMethod('RetailSetupLoadTableFieldMetadataFailure', [false, errorMessage, stackTrace], true /*isErrorEvent=true*/);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logLoadTableFieldMetadataFinish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs a RetailSetupLoadTableFieldMetadataFinish event.
    /// </summary>
    /// <param name = "ex">The exception object.</param>
    /// <returns>True if the event is found and logged without error; otherwise, false.</returns>
    public boolean logLoadTableFieldMetadataFinish(System.Exception ex)
    {
        boolean success = ex == null;
        str errorMessage = ex ? ex.Message : '';
        str stackTrace = ex ? ex.StackTrace : '';
        return this.invokeLoggingEventMethod('RetailSetupLoadTableFieldMetadataStop', [success, errorMessage, stackTrace]); // Stop should be inside the OpcodeName
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>