<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSalesShippingBill_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxSalesShippingBill_IN</c> class calculates the tax shipping bill for India.
/// </summary>
final class TaxSalesShippingBill_IN extends Tax
{
    SalesCalcTax    salesFormLetter;
    Common          sourceRecord;
    MarkupTrans     markupTrans;
    NoYes           markupAdminister;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check parameters.
    /// </summary>
    /// <returns>
    /// If 'True', the parameters is ready.
    /// </returns>
    public boolean checkParameters()
    {
        boolean ok = true;

        if (!salesFormLetter)
        {
            throw error(strfmt("@SYS22533",funcname(),classId2Name(classidget(salesFormLetter))));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTaxRegulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes tax regulation.
    /// </summary>
    public void deleteTaxRegulation()
    {
        TaxWorkRegulation taxWorkRegulation;

        delete_from taxWorkRegulation
            where taxWorkRegulation.HeadingTableId  == origHeadingTableId
               && taxWorkRegulation.HeadingRecId    == origHeadingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exchange rate.
    /// </summary>
    /// <returns>
    /// The instance of the <c>CustExchRate</c> class.
    /// </returns>
    public CustExchRate exchRate()
    {
        return salesFormLetter.exchRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets exchange rate secondary.
    /// </summary>
    /// <returns>
    /// The instance of the <c>ExchrateSecondary</c> class.
    /// </returns>
    public ExchrateSecondary exchRateSecondary()
    {
        return salesFormLetter.exchRateSecondary();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveFromSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the info to <c>TmpTaxWorkTrans</c> table for given parameters.
    /// </summary>
    /// <param name="_salesOrderTableId">
    /// The <c>SalesOrder</c> table id is used to find record.
    /// </param>
    /// <param name="_salesOrderRecId">
    /// The recid of <c>SalesOrder</c> table is used to find record.
    /// </param>
    protected void moveFromSales(tableId   _salesOrderTableId,
                                 recId     _salesOrderRecId)
    {
        while select forUpdate taxWorkTrans
            where taxWorkTrans.SourceTableId == _salesOrderTableId &&
                  taxWorkTrans.SourceRecId   == _salesOrderRecId
        {
            if (TaxTable::find(taxworkTrans.TaxCode).TaxType_IN == TaxType_IN::Customs)
            {
                taxWorkTrans.HeadingRecId             = headingRecId;
                taxWorkTrans.SourceTableId            = this.sourceTableId();
                taxWorkTrans.SourceRecId              = this.sourceRecId();
            }
            else
            {
                taxWorkTrans.IsDeleted = true;
            }
            taxWorkTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        NoYes              _post,
        SalesCalcTax       _salesForm,
        TmpTaxWorkTrans    _tmpTaxWorkTrans)
    {
        post                = _post;
        salesFormLetter     = _salesForm;
        taxWorkTrans        = _tmpTaxWorkTrans;

        taxModuleType       = TaxModuleType::SalesInvoice;

        headingTableId      = salesFormLetter.tableId();
        headingRecId        = salesFormLetter.recID();
        origHeadingTableId  = salesFormLetter.salesTableTableID();
        origHeadingRecId    = salesFormLetter.salesTableRecID();

        super();

        if (!headingRecId)
        {
            throw error("@SYS18447");
        }
        else
        {
            if (! this.checkParameters())
                throw error("@SYS18447");

            taxDate = salesFormLetter.invoiceDate();
            sourceCurrencyCode = salesFormLetter.currencyCode();
        }

        triangulation = salesFormLetter.triangulation(taxDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the tax transactin.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// The ledger posting controller to use for ledger posting.
    /// </param>
    /// <param name="_taxTrans">
    /// The Tax Trans record holding the amount to be posted.
    /// </param>
    /// <param name="_taxAmount">
    /// The tax amount to post.
    /// </param>
    /// <param name="_chargeAmount">
    /// The charge amount to post
    /// </param>
    /// <param name="_exchRateHelper">
    /// The <c>CurrencyExchHelper</c> instance for the <c>TaxTrans</c> record being posted.
    /// </param>
    /// <param name="_ledgerDimension">
    /// The ledger dimension.
    /// </param>
    /// <param name="_operationLedgerDimension">
    /// The operation ledger dimension.
    /// </param>
    /// <param name="_taxOffsetUseTaxLedgerDimension">
    /// The offset tax ledger dimension.
    /// </param>
    /// <param name="_ledgerDetailLevel">
    /// The ledger detail level; optional.
    /// </param>
    /// <param name="_projLedger">
    /// The project ledger; optional.
    /// </param>
    /// <param name="_offsetLedgerDimension">
    /// The offset ledger dimension; optional.
    /// </param>
    /// <param name="_amountMSTSecondary">
    /// The secondary amount MST; optional.
    /// </param>
    protected void post(
        LedgerPostingController _ledgerPostingController,
        TaxTrans                _taxTrans,
        TaxAmount               _taxAmount,
        TaxAmount               _chargeAmount,
        CurrencyExchangeHelper  _exchRateHelper,
        LedgerDimensionAccount  _ledgerDimension,
        LedgerDimensionAccount  _operationLedgerDimension,
        LedgerDimensionAccount  _taxOffsetUseTaxLedgerDimension,
        LedgerDetailLevel       _ledgerDetailLevel  = LedgerDetailLevel::AsDefault,
        ProjLedger              _projLedger = null
        ,LedgerDimensionAccount _offsetLedgerDimension = 0,
        AmountMSTSecondary      _amountMSTSecondary    = 0
        )
    {
        AmountMST                amountMSTRegulated;
        AmountMST                amountMST;
        CustomsExchangeRate_IN   customsExchRate;
        LedgerVoucherTransObject ledgerVoucherTransObject;

        if (_taxTrans.TaxDirection == TaxDirection::OutgoingTax)
        {
            if (isCustomsEnabled
                && (taxWorkTrans.SourceTaxAmountCur || taxWorkTrans.SourceRegulateAmountCur)
                && TaxTable::find(taxWorkTrans.TaxCode).TaxType_IN == TaxType_IN::Customs)
            {
                if (!taxWorkTrans.TaxAutogenerated)
                {
                    amountMSTRegulated = CurrencyHelper_IN::customsMSTAmount_IN(taxWorkTrans.SourceRegulateAmountCur, taxWorkTrans.SourceCurrencyCode, Direction_IN::Export, taxWorkTrans.TransDate);
                    customsExchRate    = amountMSTRegulated / taxWorkTrans.SourceRegulateAmountCur * 100;
                }
                else
                {
                    customsExchRate = taxWorkTrans.CustomsDuty_IN / taxWorkTrans.SourceTaxAmountCur * 100;
                }
                amountMST = CurrencyExchangeHelper::amount((_taxAmount - _chargeAmount) * customsExchRate / 100);
                if (taxWorkTrans.SourceRegulateAmountCustoms_IN)
                {
                    if (_taxAmount > 0)
                    {
                        amountMST = - taxWorkTrans.SourceRegulateAmountCustoms_IN
                                    - CurrencyExchangeHelper::amount(_chargeAmount * customsExchRate / 100);
                    }
                    else
                    {
                        amountMST = taxWorkTrans.SourceRegulateAmountCustoms_IN
                                    - CurrencyExchangeHelper::amount(_chargeAmount * customsExchRate / 100);
                    }
                }
                _exchRateHelper.parmExchangeRate1(customsExchRate);
                ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(_ledgerPostingController.getReference(),
                                                                                                 LedgerPostingType::Tax,
                                                                                                 customsImportExportLedgerDimension ? customsImportExportLedgerDimension : _ledgerDimension,
                                                                                                 _taxTrans.SourceCurrencyCode,
                                                                                                 (_taxAmount - _chargeAmount),
                                                                                                 _exchRateHelper);
                // If TaxTrans exists, create the relationship between TaxTrans and LedgerEntry for the tax amount
                if (_taxTrans)
                {
                    // TaxTrans will not exist in the case where a transaction is only being validated,
                    // and in that case the tax trans relationship should not be created
                    ledgerVoucherTransObject.addTaxTransRelationship(_taxTrans.RecId, TaxTransRelationshipType::Tax);
                }
                ledgerVoucherTransObject.parmAccountingCurrencyAmount(amountMST);
                ledgerVoucherTransObject.parmLedgerDetailLevel(_ledgerDetailLevel);
                _ledgerPostingController.addTrans(ledgerVoucherTransObject);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    public RefRecId sourceRecId()
    {
        return sourceRecord.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    public tableId sourceTableId()
    {
        return sourceRecord.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the tax amount and posts the tax transaction.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// The ledger posting controller to use for ledger posting.
    /// </param>
    /// <returns>
    /// The tax amount.
    /// </returns>
    public TaxAmount updateAndPost(LedgerPostingController _ledgerPostingController)
    {
        TaxAmount       taxAmount;
        boolean         moreLines;
        Integer         sign;

        this.initLedgerPosting(_ledgerPostingController);

        ttsbegin;
        salesFormLetter.initCursorMarkupHeader(salesFormLetter.tableId(),
                                               salesFormLetter.recID());
        salesFormLetter.initCursor();
        moreLines   = true;
        while (moreLines)
        {
            sourceRecord= salesFormLetter.nextLine();
            if (sourceRecord)
            {
                this.moveFromSales(salesFormLetter.transTableId(),
                                   salesFormLetter.transRecId());

                if (salesFormLetter.transLineAmount() < 0 ||
                    salesFormLetter.transQty() < 0)
                {
                    sign = -1;
                }
                else
                {
                    sign = 1;
                }

                salesFormLetter.setTax(this.taxWriteCode(), this.lineTaxAmount(sign));
                sourceRecord.update();
            }
            else
            {
                moreLines   = false;
            }
        }
        if (post)
        {
            this.saveAndPost(_ledgerPostingController);

            taxAmount = Tax::taxTotalVoucherDate(voucher, taxDate);
        }
        ttscommit;

        return taxAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
