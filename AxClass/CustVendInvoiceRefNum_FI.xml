<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendInvoiceRefNum_FI</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendInvoiceRefNum_FI
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateCheckDigit</Name>
				<Source><![CDATA[
    public static CheckDigit_FI calculateCheckDigit(str _partRefNum)
    {
        const str weight = '7137137137137137137';

        int checkSum = 0;
        int weightPosition = strlen(weight);

        for (int refNumPosition = strlen(_partRefNum); refNumPosition >= 1; refNumPosition--)
        {
            checkSum += str2int(substr(_partRefNum, refNumPosition, 1)) * str2int(substr(weight, weightPosition, 1));
            weightPosition--;
        }

        int checkSumLength = strlen(int2str(checkSum));
        return int2str((10 - str2int(substr(int2str(checkSum), checkSumLength, 1))) mod 10);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReferenceNumber</Name>
				<Source><![CDATA[
    public static boolean checkReferenceNumber(String30 _refNum)
    {
        const str prefixRF = 'RF';

        int length = strlen(_refNum);

        if (length == 0)
        {
            return true;
        }

        if (!strCmp(subStr(_refNum, 1, 2), prefixRF))
        {
            return CustVendInvoiceRefNum_FI::validateRFFormat(_refNum);
        }
        else
        {
            CheckDigit_FI checkDigitIn = substr(_refNum, length, 1);
            CheckDigit_FI checkDigitOut = CustVendInvoiceRefNum_FI::calculateCheckDigit(substr(_refNum, 1, length - 1));

            return (checkDigitIn == checkDigitOut);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDigits</Name>
				<Source><![CDATA[
    /// <summary>
    /// A helper function for the <c>_refNum</c> function; it converts alphabetic characters to numeric values.
    /// </summary>
    /// <param name="_character">A character to convert to a numeral.</param>
    /// <returns>Returns a 2-digit string that represents a numeral.</returns>
    /// <remarks>
    ///This is a helper function for the validateRFFormat method.
    ///
    ///      When validating the _refNum, each alphabetic character needs to
    ///      be converted to a numeric value, this function handles that conversion.
    ///
    ///      a/A = "10"
    ///      b/B = "11"
    ///       ...
    ///      z/Z = "35"
    /// </remarks>
    public static str 2 getDigits(str 1 _character)
    {
        const int offset = 9;
        const int ASCII0 = 48;
        const int ASCII9 = 57;

        str 2 digitValue;

        int digitAsASCII = char2num(_character, 1);
        if (digitAsASCII < ASCII0 || digitAsASCII > ASCII9)
        {
            int charOffset = CustVendInvoiceRefNum_FI::resolveOffset(_character);
            if (charOffset > 0)
            {
                charOffset += Offset;
                digitValue = int2str(charOffset);
            }
        }
        else
        {
            digitValue = _character;
        }

        return digitValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveOffset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the integer value indicating offset position of the <paramref name="_character"/>.
    /// </summary>
    /// <param name="_character">A character to convert to a numeral.</param>
    /// <returns>Returns offsetvalue of the character,otherwise returns zero.</returns>
    /// <remarks>
    /// Given a character, this function will resolve it's offset that will be
    /// used to retrieve it's corresponding value from the appropriate container.
    /// Character  Offset  |  Character  Offset  |  Character  Offset
    /// a/A/0       1           k/K      11           u/U      21
    /// b/B/1       2           l/L      12           v/V      22
    /// c/C/2       3           m/M      13           w/W      23
    /// d/D/3       4           n/N      14           x/X      24
    /// e/E/4       5           o/O      15           y/Y      25
    /// f/F/5       6           p/P      16           z/Z      26
    /// g/G/6       7           q/Q      17
    /// h/H/7       8           r/R      18
    /// i/I/8       9           s/S      19
    /// j/J/9      10           t/T      20
    /// </remarks>
    public static int resolveOffset(str 1 _character)
    {
        const int capitalA = 65;
        const int capitalZ = 90;
        const int smallA = 97;
        const int smallZ = 122;

        int offsetValue;

        // Convert the digit to it's ASCII value
        int digitAsASCII = char2num(_character, 1);

        if (digitAsASCII >= capitalA && digitAsASCII <= capitalZ)
        {
            offsetValue = digitAsASCII - (capitalA-1);
        }

        else if (digitAsASCII >= smallA && digitAsASCII <= smallZ)
        {
            offsetValue = digitAsASCII - (smallA-1);
        }

        return offsetValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRFFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the correctness of the <paramref name="_refNum"/>
    /// </summary>
    /// <param name="_refNum">_refNum holds the payment id value.</param>
    /// <returns>
    /// Returns true if the <paramref name="_refNum"/> is correct, otherwise returns false.
    /// </returns>
    public static boolean validateRFFormat(String30 _refNum)
    {
        const int modVal = 97;
        const int subStrVal = 9;
        const int nextStr = 7;

        str 99 text;

        // Move the first four characters to the end of the string...
        String30 refNum = subStr(_refNum, 5, strLen(_refNum)) + subStr(_refNum, 1, 4);

        // Convert paymentID to all digits...
        for (int i = 1; i <= strLen(_refNum); i ++)
        {
            text += CustVendInvoiceRefNum_FI::getDigits(subStr(refNum, i, 1));
        }
        str modulo = num2str(str2int(subStr(text, 1, subStrVal)) mod modVal, 0, 0, 0, 0);

        int a = subStrVal;

        while (a <= strLen(text))
        {
            modulo = num2str(str2int(modulo + subStr(text, a + 1, nextStr)) mod modVal, 0, 0, 0, 0);
            a += nextStr;
        }

        if (str2num(modulo) != 1)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>