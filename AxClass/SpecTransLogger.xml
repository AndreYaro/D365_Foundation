<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SpecTransLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.CashManagement.Instrumentation;

/// <summary>
/// The <c>SpecTransLogger</c> class logs telemetry events.
/// </summary>
public class SpecTransLogger
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>logSpecTransConsistencyCheckDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log <c>SpecTrans</c> consistency check with detail SpecTable and and RefTable information.
    /// </summary>
    /// <param name = "_specTrans">
    /// The <c>SpecTrans</c> record.
    /// </param>
    public void logSpecTransConsistencyCheckDetails(SpecTrans _specTrans)
    {
        str specTransInfo = this.determineSpecTransInfo(_specTrans);
        str specTableInfo = this.determineSpecTableInfo(_specTrans);
        str refTableInfo = this.determineRefTableInfo(_specTrans);
        str diagnosticsMessage = 'SPECTRANS: ' + specTransInfo + ' SPECTABLEINFO: ' + specTableInfo + ' REFTABLEINFO: ' + refTableInfo;

        CashManagementEventSource eventSource = CashManagementEventSource::Log;
        eventSource.EventWriteSpecTransConsistencyCheckDetails(diagnosticsMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSpecTransInfo</Name>
				<Source><![CDATA[
    private str determineSpecTransInfo(SpecTrans _specTrans)
    {
        str specTransInfoInput = "RefCompany = %1 " +
            "RefTableName = %2 " +
            "RefRecId = %3 " +
            "SpecCompany = %4 " +
            "SpecTableName = %5 " +
            "SpecRecId = %6 " +
            "FullSettlement = %7 " +
            "Payment = %8 " +
            "PaymentStatus = %9 " +
            "CreatedDateTime = %10 ";

        str specTransInfoOutput = strfmt(specTransInfoInput,
            int642str(this.getDataAreaRecId(_specTrans.RefCompany)),
            this.getSpecTransRefTableName(_specTrans),
            int642str(_specTrans.RefRecId),
            int642str(this.getDataAreaRecId(_specTrans.SpecCompany)),
            this.getSpecTransSpecTableName(_specTrans),
            int642str(_specTrans.SpecRecId),
            enum2str(_specTrans.FullSettlement),
            enum2str(_specTrans.Payment),
            enum2str(_specTrans.PaymentStatus),
            DateTimeUtil::toStr(_specTrans.CreatedDateTime));

        return specTransInfoOutput;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSpecTableInfo</Name>
				<Source><![CDATA[
    private str determineSpecTableInfo(SpecTrans _specTrans)
    {
        str specTableInfo;

        switch (_specTrans.SpecTableId)
        {
            case tableNum(VendTransOpen):
                specTableInfo = this.determineVendTransOpenInfo(_specTrans.SpecCompany, _specTrans.SpecRecId, _specTrans.Balance01);
                break;
            case tableNum(CustTransOpen):
                specTableInfo = this.determineCustTransOpenInfo(_specTrans.SpecCompany, _specTrans.SpecRecId, _specTrans.Balance01);
                break;
            case tableNum(LedgerJournalTrans):
                specTableInfo = this.determineLedgerJournalTransInfo(_specTrans.SpecCompany, _specTrans.SpecRecId);
                break;
            case tableNum(CustVendPaymProposalLine):
                specTableInfo = this.determineCustVendPaymProposalLineInfo(_specTrans.SpecCompany, _specTrans.SpecRecId);
                break;
            default:
                break;
        }

        return specTableInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineRefTableInfo</Name>
				<Source><![CDATA[
    private str determineRefTableInfo(SpecTrans _specTrans)
    {
        str refTableInfo;

        switch (_specTrans.RefTableId)
        {
            case tableNum(VendTransOpen):
                refTableInfo = this.determineVendTransOpenInfo(_specTrans.RefCompany, _specTrans.RefRecId, _specTrans.Balance01);
                break;
            case tableNum(CustTransOpen):
                refTableInfo = this.determineCustTransOpenInfo(_specTrans.RefCompany, _specTrans.RefRecId, _specTrans.Balance01);
                break;
            case tableNum(LedgerJournalTrans):
                refTableInfo = this.determineLedgerJournalTransInfo(_specTrans.RefCompany, _specTrans.RefRecId);
                break;
            case tableNum(CustVendPaymProposalLine):
                refTableInfo = this.determineCustVendPaymProposalLineInfo(_specTrans.RefCompany, _specTrans.RefRecId);
                break;
            default:
                break;
        }

        return refTableInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineCustVendPaymProposalLineInfo</Name>
				<Source><![CDATA[
    private str determineCustVendPaymProposalLineInfo(DataAreaId _dataAreaId, RecId _recId)
    {
        str custVendPaymProposalLineOutput;

        changeCompany(_dataAreaId)
        {
            CustVendPaymProposalLine custVendPaymProposalLine = CustVendPaymProposalLine::find(_recId);

            if (custVendPaymProposalLine)
            {
                str  custVendPaymProposalLineInput = "CustVendPaymProposalLine " +
                    "DataAreaId = %1 " +
                    "RecId = %2 " +
                    "JournalCompany = %3 " +
                    "AccountType = %4 " +
                    "TmpRecId = %5 ";

                custVendPaymProposalLineOutput = strfmt(custVendPaymProposalLineInput,
                    int642str(this.getDataAreaRecId(custVendPaymProposalLine.DataAreaId)),
                    int642str(custVendPaymProposalLine.RecId),
                    int642str(this.getDataAreaRecId(custVendPaymProposalLine.JournalCompany)),
                    enum2str(custVendPaymProposalLine.AccountType),
                    int642str(custVendPaymProposalLine.TmpRecId));
            }
        }

        return custVendPaymProposalLineOutput;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineLedgerJournalTransInfo</Name>
				<Source><![CDATA[
    private str determineLedgerJournalTransInfo(DataAreaId _dataAreaId, RecId _recId)
    {
        str ledgerJournalTransInfoOutput;

        changeCompany(_dataAreaId)
        {
            LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findRecId(_recId, false);
            LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(ledgerJournalTrans.JournalNum);

            if (ledgerJournalTrans && ledgerJournalTable)
            {
                str  vendTransOpenInfoInput = "LedgerJournalTrans " +
                    "DataAreaId = %1 " +
                    "Company = %2 " +
                    "OffsetCompany = %3 " +
                    "RecId = %4 " +
                    "JournalType = %5 " +
                    "ModifiedDateTime = %6 ";

                ledgerJournalTransInfoOutput = strfmt(vendTransOpenInfoInput,
                    int642str(this.getDataAreaRecId(ledgerJournalTrans.DataAreaId)),
                    int642str(this.getDataAreaRecId(ledgerJournalTrans.Company)),
                    int642str(this.getDataAreaRecId(ledgerJournalTrans.OffsetCompany)),
                    int642str(ledgerJournalTrans.RecId),
                    enum2str(ledgerJournalTable.JournalType),
                    DateTimeUtil::toStr(ledgerJournalTable.ModifiedDateTime));
            }
        }

        return ledgerJournalTransInfoOutput;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineVendTransOpenInfo</Name>
				<Source><![CDATA[
    private str determineVendTransOpenInfo(DataAreaId _dataAreaId, RecId _recId, AmountCur _specTransBalance01)
    {
        str vendTransOpenInfoOutput;
        changeCompany(_dataAreaId)
        {
            VendTransOpen vendTransOpen = VendTransOpen::find(_recId);

            if (vendTransOpen)
            {
                str  vendTransOpenInfoInput = "VendTransOpen " +
                    "FullSettlement Determined = %1 " +
                    "DataAreaId = %2 " +
                    "RecId = %3 ";

                boolean isFullSettlement;
                if (vendTransOpen.AmountCur == _specTransBalance01)
                {
                    isFullSettlement = true;
                }

                vendTransOpenInfoOutput = strfmt(vendTransOpenInfoInput,
                    enum2str(isFullSettlement),
                    int642str(this.getDataAreaRecId(vendTransOpen.DataAreaId)),
                    int642str(vendTransOpen.RecId));
            }
        }

        return vendTransOpenInfoOutput;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineCustTransOpenInfo</Name>
				<Source><![CDATA[
    private str determineCustTransOpenInfo(DataAreaId _dataAreaId, RecId _recId, AmountCur _specTransBalance01)
    {
        str custTransOpenInfoOutput;
        changeCompany(_dataAreaId)
        {
            CustTransOpen custTransOpen = CustTransOpen::find(_recId);

            if (custTransOpen)
            {
                str  custTransOpenInfoInput = "CustTransOpen " +
                    "FullSettlement Determined = %1 " +
                    "DataAreaId = %2 " +
                    "RecId = %3 ";

                boolean isFullSettlement;
                if (custTransOpen.AmountCur == _specTransBalance01)
                {
                    isFullSettlement = true;
                }

                custTransOpenInfoOutput = strfmt(custTransOpenInfoInput,
                    enum2str(isFullSettlement),
                    int642str(this.getDataAreaRecId(custTransOpen.DataAreaId)),
                    int642str(custTransOpen.RecId));
            }
        }

        return custTransOpenInfoOutput;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecTransRefTableName</Name>
				<Source><![CDATA[
    private str getSpecTransRefTableName(SpecTrans _specTrans)
    {
        SysTableIdView refTableIdSysTableView;
        select firstonly refTableIdSysTableView where refTableIdSysTableView.Id == _specTrans.RefTableId;

        return refTableIdSysTableView.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecTransSpecTableName</Name>
				<Source><![CDATA[
    private str getSpecTransSpecTableName(SpecTrans _specTrans)
    {
        SysTableIdView specTableIdSysTableView;
        select firstonly specTableIdSysTableView where specTableIdSysTableView.Id == _specTrans.SpecTableId;

        return specTableIdSysTableView.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataAreaRecId</Name>
				<Source><![CDATA[
    private RecId getDataAreaRecId(DataAreaId _id)
    {
        DataArea dataArea;
        select firstonly dataArea
            where dataArea.isVirtual == false
                && dataArea.Id == _id;

        return dataArea.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>