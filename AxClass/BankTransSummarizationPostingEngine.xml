<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankTransSummarizationPostingEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class BankTransSummarizationPostingEngine
{
    private const Voucher BankTransSumVoucher = '*';
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    internal static void post(List _documentTransPairsList)
    {
        ListEnumerator documentPairsEnumerator = _documentTransPairsList.getEnumerator();
        RecordInsertList summarizedBankAccountTrans = new RecordInsertList(tableNum(BankAccountTrans));

        while (documentPairsEnumerator.moveNext())
        {
            container documentPair = documentPairsEnumerator.current();
            BankTransSummarizationDocument documentHeader = conPeek(documentPair, 1);
            BankTransSummarizationPostingEngine::generateSummarizedBankAccountTrans(documentHeader, summarizedBankAccountTrans);

            BankTransSummarizationID sumId = documentHeader.SummarizationId;    
            List originalBankTransPairsList = con2List(conPeek(documentPair, 2));
            ListEnumerator transPairEnumerator = originalBankTransPairsList.getEnumerator();

            ttsbegin;
            while (transPairEnumerator.moveNext())
            {
                container originalTransPair = transPairEnumerator.current();

                LedgerJournalTrans ledgerJournalTransInput = conPeek(originalTransPair, 1);

                LedgerJournalTrans ledgerJournalTrans;
                select forupdate ledgerJournalTrans 
                    where ledgerJournalTrans.RecId == ledgerJournalTransInput.RecId;
                ledgerJournalTrans.BankTransSummarizationId = sumId;
                ledgerJournalTrans.doUpdate();

                BankAccountTrans bankTransInput = conPeek(originalTransPair, 2);

                BankAccountTrans bankAccountTrans;
                select forupdate bankAccountTrans
                    where bankAccountTrans.RecId == bankTransInput.RecId;
                bankAccountTrans.delete();
            }
            ttscommit;
        }

        ttsbegin;
        summarizedBankAccountTrans.insertDatabase();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateSummarizedBankAccountTrans</Name>
				<Source><![CDATA[
    private static void generateSummarizedBankAccountTrans(BankTransSummarizationDocument _documentHeader, RecordInsertList _summarizedBankAccountTrans)
    {
        BankAccountTrans bankTrans;
        bankTrans.CurrencyCode = _documentHeader.TransCurrencyCode;
        bankTrans.AccountId = _documentHeader.AccountId;
        bankTrans.AmountCur = _documentHeader.BankAmountCur;
        bankTrans.AmountMST = _documentHeader.AccountingCurrencyAmount;
        bankTrans.AmountReportingCurrency = _documentHeader.ReportingCurrencyAmount;
        bankTrans.BankTransAmountCur = _documentHeader.TransAmountCur;
        bankTrans.BankTransCurrencyCode = _documentHeader.BankCurrencyCode;
        bankTrans.BankTransType = _documentHeader.BankTransType;
        bankTrans.PaymentMode = _documentHeader.PaymMode;
        bankTrans.IsSummarization = NoYes::Yes;
        bankTrans.PaymReference = _documentHeader.PaymReference;
        bankTrans.SourceTableId = _documentHeader.TableId;
        bankTrans.SourceRecId = _documentHeader.RecId;
        bankTrans.SummarizationId = _documentHeader.SummarizationId;
        bankTrans.Voucher = BankTransSumVoucher;
        bankTrans.TransDate = _documentHeader.TransDate;

        _summarizedBankAccountTrans.add(bankTrans);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>