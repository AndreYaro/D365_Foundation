<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashFlowTimeSeriesReInitializeServiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CashFlowTimeSeriesReInitializeServiceController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super(classStr(CashFlowTimeSeriesService), methodStr(CashFlowTimeSeriesService, reset));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CashFlowTimeSeriesReInitializeServiceController construct()
    {
        CashFlowTimeSeriesReInitializeServiceController controller = new CashFlowTimeSeriesReInitializeServiceController();

        controller.parmShowDialog(false);
        controller.parmLoadFromSysLastValue(false);
        controller.parmExecutionMode(SysOperationExecutionMode::ReliableAsynchronous);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    internal static void main()
    {
        CashFlowTimeSeriesReInitializeServiceController controller = CashFlowTimeSeriesReInitializeServiceController::construct();

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run()
    {
        if (!CashflowInsightsActivation::isActive())
        {
            return;
        }

        // For this process, we initialize the contract at runtime.
        CashFlowTimeSeriesDataContract contract = this.getDataContractObject() as CashFlowTimeSeriesDataContract;
        contract.initializeForFullReset();
        guid runId = newGuid();

        CashFlowTimeSeriesAggregationRunHistory::insertHistoryRecord(
            runId,
            contract.parmStartDate(),
            contract.parmEndDate(),
            CashFlowTimeSeriesAggregationRunType::FullReset,
            CashFlowTimeSeriesAggregationRunStartEnd::Start,
            DateTimeUtil::utcNow());

        super();

        CashFlowTimeSeriesAggregationRunHistory::insertHistoryRecord(
            runId,
            contract.parmStartDate(),
            contract.parmEndDate(),
            CashFlowTimeSeriesAggregationRunType::FullReset,
            CashFlowTimeSeriesAggregationRunStartEnd::End,
            DateTimeUtil::utcNow());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    protected ClassDescription defaultCaption()
    {
        return "@CashManagement:CashFlowTimeSeriesReinitializeControllerCaption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return this.defaultCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showBatchRecurrenceButton</Name>
				<Source><![CDATA[
    public boolean showBatchRecurrenceButton(boolean _showBatchRecurrenceButton = showBatchRecurrenceButton)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>