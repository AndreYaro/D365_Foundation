<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcTemplateInitialize</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCTemplateInitialize</c> class initializes the product configuration template records.
/// </summary>
class PcTemplateInitialize
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>syncFieldTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes field template.
    /// </summary>
    /// <param name = "_tableId">A table Id.</param>
    /// <param name = "_fieldId">A field Id.</param>
    [Hookable(false)]
    public void syncFieldTemplate(TableId _tableId, FieldId _fieldId)
    {
        PCTemplate template = this.findTemplate(_tableId);

        if (!template)
        {
            template = this.createTableTemplate(_tableId);
        }

        if (!PCTemplateAttribute::findByTemplateAndFieldId(template, _fieldId))
        {
            this.createFieldTemplate(template, _fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFieldTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a field template.
    /// </summary>
    /// <param name="_template">
    /// The product configuration template.
    /// </param>
    /// <param name="_fieldId">
    /// The field ID.
    /// </param>
    /// <returns>
    /// A field template.
    /// </returns>
    public PCTemplateAttribute createFieldTemplate(PCTemplate _template, FieldId _fieldId)
    {
        PCTemplateAttribute tableFieldTemplate;

        tableFieldTemplate.ReferencedFieldId    =   _fieldId;
        tableFieldTemplate.Template             =   _template.RecId;
        tableFieldTemplate.insert();
        return tableFieldTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTableTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a template.
    /// </summary>
    /// <param name="_tableId">A table ID.</param>
    /// <returns>A product configuration template.</returns>
    protected PCTemplate createTableTemplate(TableId _tableId)
    {
        PCTemplate tableTemplate;

        tableTemplate.ReferencedTableId = _tableId;
        tableTemplate.insert();
        return tableTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTemplatesForBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates templates that are used for mapping to the bill of materials.
    /// </summary>
    protected void createTemplatesForBOM()
    {
        PCTemplate          tableTemplate;

        //BOM
        tableTemplate = this.createTableTemplate(tableNum(BOM));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, DataAreaId));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, LineNum));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, bomType));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, bomConsump));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, ItemId));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, bomQty));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, Calculation));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, Height));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, Width));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, Depth));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, Density));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, Constant));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, RoundUp));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, RoundUpQty));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, Position));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, OprNum));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, FromDate));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, ToDate));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, VendId));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, UnitId));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, bomId));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, ConfigGroupId));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, Formula));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, bomQtySerie));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, ItemBOMId));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, ItemRouteId));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, InventDimId));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, ScrapVar));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, ScrapConst));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, ProdFlushingPrincip));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, BomWHSReleasePolicy));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, EndSchedConsump));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, ProjSetSubProdToConsumed));
        this.createFieldTemplate(tableTemplate, fieldNum(BOM, WrkCtrConsumption));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTemplatesForInventoryDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates templates for inventory dimensions.
    /// </summary>
    protected void createTemplatesForInventoryDimensions()
    {
        PCTemplate  tableTemplate;
        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();

        //InventDim
        tableTemplate = this.createTableTemplate(tableNum(InventDim));
        this.createFieldTemplate(tableTemplate, fieldNum(InventDim, InventDimId));
        while (enumerator.moveNext())
        {
            switch (enumerator.current())
            {
                case fieldNum(InventDim, InventSiteId):
                    break;  // Don't include site as it is provided elsewhere.
                default:
                    this.createFieldTemplate(tableTemplate, enumerator.current());
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTemplatesForRoute</Name>
				<Source><![CDATA[
    protected void createTemplatesForRoute()
    {
        PCTemplate tableTemplate;

        //Route
        tableTemplate = this.createTableTemplate(tableNum(Route));
        this.createFieldTemplate(tableTemplate, fieldNum(Route, RouteId));
        this.createFieldTemplate(tableTemplate, fieldNum(Route, OprNum));
        this.createFieldTemplate(tableTemplate, fieldNum(Route, OprNumNext));
        this.createFieldTemplate(tableTemplate, fieldNum(Route, OprId));
        this.createFieldTemplate(tableTemplate, fieldNum(Route, Level));
        this.createFieldTemplate(tableTemplate, fieldNum(Route, AccError));
        this.createFieldTemplate(tableTemplate, fieldNum(Route, OprPriority));
        this.createFieldTemplate(tableTemplate, fieldNum(Route, ErrorPct));
        this.createFieldTemplate(tableTemplate, fieldNum(Route, LinkType));
        this.createFieldTemplate(tableTemplate, fieldNum(Route, JobPayType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTemplatesForRouteOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates templates for route operations.
    /// </summary>
    protected void createTemplatesForRouteOperation()
    {
        PCTemplate          tableTemplate;

        //RouteOpr
        tableTemplate = this.createTableTemplate(tableNum(RouteOpr));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, DataAreaId));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, ItemCode));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, ItemRelation));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, RouteCode));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, RouteRelation));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, OprId));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, QueueTimeBefore));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, SetupTime));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, ProcessTime));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, ProcessPerQty));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, TranspTime));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, QueueTimeAfter));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, TransferBatch));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, ToHours));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, SetUpCategoryId));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, ProcessCategoryId));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, QtyCategoryId));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, RouteType));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, PropertyId));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, RouteGroupId));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, FormulaFactor1));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, Formula));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, ConfigId));
        this.createFieldTemplate(tableTemplate, fieldNum(RouteOpr, WrkCtrIdCost));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a template from a table ID.
    /// </summary>
    /// <param name="_tableId">
    /// A table ID.
    /// </param>
    /// <returns>
    /// A template.
    /// </returns>
    public PCTemplate findTemplate(TableId _tableId)
    {
        PCTemplate template;

        select firstOnly template
            where template.ReferencedTableId == _tableId;

        return template;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the static records in the <c>PCTemplate</c> and <c>PCTemplateAttribute</c> tables to use in
    /// product configuration.
    /// </summary>
    public void run()
    {
        ttsbegin;
        
        if(!this.findTemplate(tableNum(BOM)))
        {
            this.createTemplatesForBOM();
        }
        
        if(!this.hasInventDimBeenInitialized())
        {
            this.createTemplatesForInventoryDimensions();
        }
        
        if(!this.findTemplate(tableNum(Route)))
        {
            this.createTemplatesForRoute();
        }

        if(!this.findTemplate(tableNum(RouteOpr)))
        {
            this.createTemplatesForRouteOperation();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventDimBeenInitialized</Name>
				<Source><![CDATA[
    private boolean hasInventDimBeenInitialized()
    {
        // Checking field that would not have been created by enabling the Product version configuration key
        return PCTemplateFind::construct().findTemplateAttributeByTableIdAndFieldId(tableNum(InventDim), fieldNum(InventDim, InventColorId)).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCTemplateInitialize construct()
    {
        PCTemplateInitialize templateInitialize = new PCTemplateInitialize();

        return templateInitialize;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>