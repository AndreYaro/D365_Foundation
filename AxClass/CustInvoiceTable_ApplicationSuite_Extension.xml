<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceTable_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(CustInvoiceTable))]
public final class CustInvoiceTable_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        next insert();

        FreeNotesTable_IT::insertDocumentRef(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        CustInvoiceTable this_Orig = this.orig();
        next update();

        boolean accountMatches = this_Orig.OrderAccount == this.OrderAccount;
        boolean languageIdMatches = this_Orig.LanguageId == this.LanguageId;

        if (!languageIdMatches || !accountMatches)
        {
            FreeNotesTable_IT::updateDocumentRef(this);

            if (!languageIdMatches && accountMatches)
            {
                //If language is changed, there's a cascading update of Sales lines' notes.
                //If Customer account is changed, this update has already been executed.
                CustInvoiceLine custInvoiceLine;
                while select custInvoiceLine
                        where custInvoiceLine.ParentRecId == this.RecId
                {
                    FreeNotesTable_IT::updateDocumentRef(custInvoiceLine);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDateModified</Name>
				<Source><![CDATA[
    public void invoiceDateModified()
    {
        next invoiceDateModified();

        if (CustTable::find(this.InvoiceAccount).UsualExporter_IT && FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            CustInvoiceTable::initUsualExporter_IT(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    public void initFromCustTable(CustTable _custTable)
    {
        next initFromCustTable(_custTable);

        if (_custTable.UsualExporter_IT && FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            CustInvoiceTable::initUsualExporter_IT(this);
        }

        if (FeatureStateProvider::isFeatureEnabled(DynamicQRCodeFeature_IN::instance()))
        {
            this.PrintDynamicQRCode_IN = _custTable.PrintDynamicQRCode_IN;
        }

        if (FeatureStateProvider::isFeatureEnabled(SimplifiedInvoiceSAFeature::instance()))
        {
            this.InvoiceType_W = _custTable.InvoiceType_W;
        }

        if (CFDISharedLogic_MX::mustInitCFDIEInvoicePeriod(this.OrderAccount))
        {
            this.CFDIEInvoicePeriod_MX = EInvoiceCFDIParameters_MX::find().EInvoiceGlobalPeriod;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        next modifiedField(_fieldId);

        if (_fieldId == fieldNum(CustInvoiceTable, IntentLetterId_IT) && FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            CustInvoiceTable::modifiedIntentLetterId_IT(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _p1)
    {
        boolean ret = next validateField(_p1);

        if (_p1 == fieldNum(CustInvoiceTable, IntentLetterId_IT) && this.IntentLetterId_IT)
        {
            CustIntentLetter_IT custIntentLetter = CustIntentLetter_IT::findInternalId(this.IntentLetterId_IT);

            if (custIntentLetter.Status != IntentLetterStatus_IT::Open)
            {
                ret = ret && checkFailed(strfmt("@ExtendedItallianLocalization:LeterIsInStatus", custIntentLetter.InternalLetterId, custIntentLetter.Status));
            }
        }


        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUsualExporter_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes intent letter fields on customer invoice.
    /// </summary>
    /// <param name = "_custInvoiceTable">The invoice record to update.</param>
    public static void initUsualExporter_IT(CustInvoiceTable _custInvoiceTable)
    {
        CustIntentLetter_IT custIntentLetter;
        TransDate refDate = _custInvoiceTable.InvoiceDate ? _custInvoiceTable.InvoiceDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        CustParameters custParameters = CustParameters::find();

        if (custParameters.AutomaticIntentLetterAssignment_IT)
        {
            custIntentLetter = CustIntentLetter_IT::findActiveIntentLetterByType(
                _custInvoiceTable.invoiceAccount,
                IntentLetterType_IT::Amount,
                refDate);
        }
        _custInvoiceTable.IntentLetterId_IT = '';

        if (custIntentLetter)
        {
            TaxGroup usExpExemptionTaxGroup = custParameters.UsualExporterExemptionTaxGroup_IT;

            if (usExpExemptionTaxGroup)
            {
                _custInvoiceTable.IntentLetterId_IT = custIntentLetter.InternalLetterId;
                _custInvoiceTable.TaxGroup = usExpExemptionTaxGroup;
                CustInvoiceTable::setMarkupTransTaxGroup_IT(_custInvoiceTable, usExpExemptionTaxGroup);

                info("@ExtendedItallianLocalization:UsExpTaxGroupUsed");
            }
        }
        else
        {
            select firstonly RecId from custIntentLetter
                where  custIntentLetter.AccountNum == _custInvoiceTable.invoiceAccount
                    && custIntentLetter.IntentLetterType != IntentLetterType_IT::Period
                    && custIntentLetter.Status == IntentLetterStatus_IT::Open
                    && custIntentLetter.FromDate <= refDate && custIntentLetter.ToDate >= refDate;

            if (custIntentLetter)
            {
                info("@ExtendedItallianLocalization:IntentLettersArePresent");
            }
        }

        if (!custIntentLetter)
        {
            if (custParameters.UsualExporterExemptionTaxGroup_IT && _custInvoiceTable.TaxGroup == custParameters.UsualExporterExemptionTaxGroup_IT)
            {
                warning("@ExtendedItallianLocalization:UsExpTaxGroupUsedButNoActiveLetters");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedIntentLetterId_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes intent letter fields on customer invoice.
    /// </summary>
    /// <param name = "_custInvoiceTable">The invoice record to update.</param>
    public static void modifiedIntentLetterId_IT(CustInvoiceTable _custInvoiceTable)
    {
        TaxGroup taxGroup;

        if (_custInvoiceTable.IntentLetterId_IT)
        {
            if (CustIntentLetter_IT::findInternalId(_custInvoiceTable.IntentLetterId_IT).Status == IntentLetterStatus_IT::Open)
            {
                taxGroup = CustParameters::find().UsualExporterExemptionTaxGroup_IT;

                info("@ExtendedItallianLocalization:UsExpTaxGroupUsed");
            }
        }
        else
        {
            taxGroup = (_custInvoiceTable.custTable_InvoiceAccount().TaxGroup);
        }

        _custInvoiceTable.TaxGroup = taxGroup;
        CustInvoiceTable::setLineTaxGroup_IT(_custInvoiceTable, taxGroup);
        CustInvoiceTable::setMarkupTransTaxGroup_IT(_custInvoiceTable, taxGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineTaxGroup_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets tax group on invoice lines.
    /// </summary>
    /// <param name = "_custInvoiceTable">The invoice record to update.</param>
    /// <param name = "_taxGroup">The tax group value.</param>
    public static void setLineTaxGroup_IT(CustInvoiceTable _custInvoiceTable, TaxGroup _taxGroup)
    {
        if (_custInvoiceTable.RecId)
        {
            CustInvoiceLine custInvoiceLine;
            update_recordset custInvoiceLine
                setting TaxGroup = _taxGroup
                where custInvoiceLine.ParentRecId == _custInvoiceTable.RecId;

            TaxUncommitted::deleteForDocumentHeader(tableNum(CustInvoiceTable), _custInvoiceTable.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkupTransTaxGroup_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets tax group on miscellaneous charges lines.
    /// </summary>
    /// <param name = "_custInvoiceTable">The invoice record to update.</param>
    /// <param name = "_taxGroup">The new tax group.</param>
    public static void setMarkupTransTaxGroup_IT(CustInvoiceTable _custInvoiceTable, TaxGroup _taxGroup)
    {
        MarkupTrans markupTrans;
        CustInvoiceLine custInvoiceLine;

        if (_custInvoiceTable.RecId)
        {
            update_recordset markupTrans
                setting TaxGroup = _taxGroup
                where markupTrans.TransTableId == _custInvoiceTable.TableId
                    && markupTrans.TransRecId == _custInvoiceTable.RecId;

            update_recordset markupTrans
                setting TaxGroup = _taxGroup
                exists join custInvoiceLine
                where custInvoiceLine.ParentRecId == _custInvoiceTable.RecId
                    && markupTrans.TransTableId == custInvoiceLine.TableId
                && markupTrans.TransRecId == custInvoiceLine.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        next initValue();

        if (FeatureStateProvider::isFeatureEnabled(CompanyTaxRegistrationFeature::instance()))
        {
            this.TaxId = TaxRegistration::getPrimaryAddressRestrictedTaxRegistrationNumber(
                CompanyInfo::find(),
                TaxRegistrationTypesList::TAXID).RecId;
        }

        if (FeatureStateProvider::isFeatureEnabled(TaxInvoiceSerialNumberGenerateIndonesiaFeature::instance()))
        {
            this.TaxInvoiceTransactionCode_ID = TaxInvoiceSerialNumberGenerator_ID::getDefaultTaxInvoiceTransactionCode();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicePostalAddressRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record Id of the primary postal address for the invoice account of the
    /// current <c>CustInvoiceTable</c> record.
    /// </summary>
    /// <returns>
    /// The record Id of the primary postal address for the invoice account of the
    /// current <c>CustInvoiceTable</c> record.
    /// </returns>
    public LogisticsPostalAddressRecId invoicePostalAddressRecId()
    {
        return this.custTable_InvoiceAccount().postalAddressRecId();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>