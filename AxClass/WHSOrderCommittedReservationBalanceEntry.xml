<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOrderCommittedReservationBalanceEntry</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>WHSOrderCommittedReservationBalanceEntry</c> represents a specific entry in order-committed reservation balance.
/// </summary>
internal final class WHSOrderCommittedReservationBalanceEntry
{
    private InventQty allowReservationReductionQty;
    private InventQty doNotAllowReservationReductionQty;
    private InventQty allowReservationReductionWithoutTransferReservationQty;
    private InventQty doNotAllowReservationReductionWithoutTransferReservationQty;

    private boolean mustCalculateBalance = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addReservationQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds requested reservation quantity to the balance.
    /// </summary>
    /// <param name = "_reservationQty">Reservation quantity to add.</param>
    /// <param name = "_allowReservationReduction">Specifies if reservation reduction is allowed.</param>
    /// <param name = "_updateTransferReservation">Determines if requested quantity must be added to/removed from transfer reservation.</param>
    public void addReservationQty(
        InventQty _reservationQty,
        boolean   _allowReservationReduction,
        boolean   _updateTransferReservation)
    {
        mustCalculateBalance = true;

        if (_allowReservationReduction)
        {
            if (_updateTransferReservation)
            {
                allowReservationReductionQty += _reservationQty;
            }
            else
            {
                allowReservationReductionWithoutTransferReservationQty += _reservationQty;
            }
        }
        else
        {
            if (_updateTransferReservation)
            {
                doNotAllowReservationReductionQty += _reservationQty;
            }
            else
            {
                doNotAllowReservationReductionWithoutTransferReservationQty += _reservationQty;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Collapses requested reservation quantities. Essentially method tries to make sure that we always try to
    /// increase order-committed level reservation at minimum required value. Such collapse can happen if allow reservation reduction
    /// and do not allow reservation reduction quantities are of opposite sign.
    /// </summary>
    private void calculateBalance()
    {
        mustCalculateBalance = false;

        InventQty qtyToBalance = min(abs(allowReservationReductionQty), abs(doNotAllowReservationReductionQty));

        if (allowReservationReductionQty > 0 && doNotAllowReservationReductionQty < 0)
        {
            allowReservationReductionQty -= qtyToBalance;
            doNotAllowReservationReductionQty += qtyToBalance;
        }

        if (allowReservationReductionQty < 0 && doNotAllowReservationReductionQty > 0)
        {
            allowReservationReductionQty += qtyToBalance;
            doNotAllowReservationReductionQty -= qtyToBalance;
        }

        qtyToBalance = min(abs(allowReservationReductionWithoutTransferReservationQty), abs(doNotAllowReservationReductionWithoutTransferReservationQty));

        if (allowReservationReductionWithoutTransferReservationQty > 0 && doNotAllowReservationReductionWithoutTransferReservationQty < 0)
        {
            allowReservationReductionWithoutTransferReservationQty -= qtyToBalance;
            doNotAllowReservationReductionWithoutTransferReservationQty += qtyToBalance;
        }

        if (allowReservationReductionWithoutTransferReservationQty < 0 && doNotAllowReservationReductionWithoutTransferReservationQty > 0)
        {
            allowReservationReductionWithoutTransferReservationQty += qtyToBalance;
            doNotAllowReservationReductionWithoutTransferReservationQty -= qtyToBalance;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllowReservationReductionQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets resulting reservation quantity for which we allow reservation reduction.
    /// </summary>
    /// <returns>Resulting reservation quantity for which we allow reservation reduction.</returns>
    public InventQty getAllowReservationReductionQty()
    {
        if (mustCalculateBalance)
        {
            this.calculateBalance();
        }

        return allowReservationReductionQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDoNotAllowReservationReductionQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets resulting reservation quantity for which we do not allow reservation reduction.
    /// </summary>
    /// <returns>Resulting reservation quantity for which we do not allow reservation reduction.</returns>
    public InventQty getDoNotAllowReservationReductionQty()
    {
        if (mustCalculateBalance)
        {
            this.calculateBalance();
        }

        return doNotAllowReservationReductionQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllowReservationReductionWithoutTransferReservationQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets resulting reservation quantity for which we allow reservation reduction but do not adjust transferred quantity.
    /// </summary>
    /// <returns>Resulting reservation quantity for which we allow reservation reduction but do not adjust transferred quantity.</returns>
    public InventQty getAllowReservationReductionWithoutTransferReservationQty()
    {
        if (mustCalculateBalance)
        {
            this.calculateBalance();
        }

        return allowReservationReductionWithoutTransferReservationQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDoNotAllowReservationReductionWithoutTransferReservationQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets resulting reservation quantity for which we do not allow reservation reduction but do not adjust transferred quantity.
    /// </summary>
    /// <returns>Resulting reservation quantity for which we do not allow reservation reduction but do not adjust transferred quantity.</returns>
    public InventQty getDoNotAllowReservationReductionWithoutTransferReservationQty()
    {
        if (mustCalculateBalance)
        {
            this.calculateBalance();
        }

        return doNotAllowReservationReductionWithoutTransferReservationQty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>