<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTblSpecTimeTrans_SickList</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayTblSpecTimeTrans_SickList extends RpayTblSpecTimeTrans
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
        protected boolean check(TransDate _startDate,
                            TransDate _endDate)
    {
        RPayAverageEarnEmplPeriodTable  rPayAverageEarnEmplPeriodTable;
        RPayAverageEarnEmplPeriodTable  relatedPeriodTable;
        TransLink_RU                    transLink;

        select firstonly StartDate, EndDate, RecId from rPayAverageEarnEmplPeriodTable
            where rPayAverageEarnEmplPeriodTable.AverageEarnCodeType == RPayAverageEarnCodeType::SickList        &&
                  rPayAverageEarnEmplPeriodTable.EmplId              == emplTable.EmployeeId                     &&
                 ((rPayAverageEarnEmplPeriodTable.StartDate          >= _startDate                               &&
                   rPayAverageEarnEmplPeriodTable.StartDate          <= _endDate)                                ||
                  (_startDate                                        >= rPayAverageEarnEmplPeriodTable.StartDate &&
                   _startDate                                        <= rPayAverageEarnEmplPeriodTable.EndDate))
                   notexists join relatedPeriodTable
                    where relatedPeriodTable.averageEarnCodeType != RPayAverageEarnCodeType::SickList
                       && relatedPeriodTable.SourceSickListId == rPayAverageEarnEmplPeriodTable.RpaySickListId
            #transLinkNotExistsReversed_RU(transLink, rpayAverageEarnEmplPeriodTable);

        if (rPayAverageEarnEmplPeriodTable.RecId)
        {
            return checkFailed(strFmt("@RUP1888",
                                      emplTable.EmployeeId,
                                      emplTable.name(),
                                      "@RUP491",
                                      rPayAverageEarnEmplPeriodTable.StartDate,
                                      rPayAverageEarnEmplPeriodTable.EndDate));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodIntervals</Name>
				<Source><![CDATA[
        public container getPeriodIntervals(boolean _isCreateReverseLine = false)
    {
        container                      intervals;
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodTable;
        int                            i;
        RPaySickIllParameters          rPaySickIllParameters;
        TransDate                      startDateLocal;
        TransDate                      endDateLocal, endDateTotal;
        TransLink_RU                   transLink;

        while select forUpdate StartDate, EndDate from rPayAverageEarnEmplPeriodTable order by StartDate
            where rPayAverageEarnEmplPeriodTable.AverageEarnCodeType == RPayAverageEarnCodeType::SickList
               && rPayAverageEarnEmplPeriodTable.EmplId              == emplTable.EmployeeId
               && (rPayAverageEarnEmplPeriodTable.EndDate >= dateStart && rPayAverageEarnEmplPeriodTable.StartDate <= dateEnd)
               && ((!_isCreateReverseLine && !rPayAverageEarnEmplPeriodTable.CorrectedSickListId)
                 || (_isCreateReverseLine && rPayAverageEarnEmplPeriodTable.CorrectedSickListId))
            exists join rPaySickIllParameters
                where rPaySickIllParameters.PayIllType               == rPayAverageEarnEmplPeriodTable.RpayIllType &&
                      rPaySickIllParameters.CalendarTimeCode         == rpayTblSpecTimeTable.RpayCalendarTimeCode
            notexists join transLink
                where transLink.RefTableId == rPayAverageEarnEmplPeriodTable.TableId &&
                      transLink.RefPri     == rPayAverageEarnEmplPeriodTable.RecId &&
                      transLink.RefSec     == rPayAverageEarnEmplPeriodTable.RecId
        {
            i ++;

            startDateLocal = max(rPayAverageEarnEmplPeriodTable.StartDate, dateStart);
            endDateLocal = min(rPayAverageEarnEmplPeriodTable.EndDate, dateEnd);

            if (endDateLocal > endDateTotal)
            {
                if (startDateLocal <= endDateTotal && endDateLocal > endDateTotal)
                {
                    i --;
                    startDateLocal = conPeek(conPeek(intervals, i), 1);
                }
                intervals = conPoke(intervals,
                                    i,
                                    [startDateLocal, endDateLocal]);

                endDateTotal = endDateLocal;
            }
        }

        return intervals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public  void new(RHRMEmplTable        _emplTable,
                     TransDate            _dateStart,
                     TransDate            _dateEnd,
                     RPayCalendarTimeCode _timeCode)

    {
        ;

        super(_emplTable, _dateStart, _dateEnd);

        rpayTblSpecTimeTable = RpayTblSpecTimeTable::find(RpayTblSpecTimeType::SickList, _timeCode);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>