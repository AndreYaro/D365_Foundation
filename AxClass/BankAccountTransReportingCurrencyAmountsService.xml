<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAccountTransReportingCurrencyAmountsService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankAccountTransReportingCurrencyAmountsService</c> class executes the dual currency upgrade process
/// to add reporting currency amounts to bank account transactions and related documents.
/// </summary>
public class BankAccountTransReportingCurrencyAmountsService extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateReportingCurrencyAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates reporting currency amounts on the <c>BankAccountTrans</c> table.
    /// </summary>
    public void updateReportingCurrencyAmounts()
    {
        ttsbegin;

        this.updateReportingCurrencyAmountOnBankAccountTrans();
        this.updateReportingCurrencyAmountOnDepositSlips();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportingCurrencyAmountOnBankAccountTrans</Name>
				<Source><![CDATA[
    private void updateReportingCurrencyAmountOnBankAccountTrans()
    {
        BankAccountTrans bankAccountTrans;
        BankAccountTransReportingCurrencyAmounts bankAccountTransReportingCurrencyAmounts;

        this.skipTableMethods(bankAccountTrans);
        this.skipTableMethods(bankAccountTransReportingCurrencyAmounts);

        update_recordset bankAccountTrans
            setting AmountReportingCurrency = bankAccountTransReportingCurrencyAmounts.AmountReportingCurrency
            join AmountReportingCurrency from bankAccountTransReportingCurrencyAmounts
                where bankAccountTransReportingCurrencyAmounts.BankAccountTrans == bankAccountTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportingCurrencyAmountOnDepositSlips</Name>
				<Source><![CDATA[
    private void updateReportingCurrencyAmountOnDepositSlips()
    {
        BankDepositDocument bankDepositDocument;
        BankAccountTrans bankAccountTrans;
        BankAccountTransReportingCurrencyAmounts bankAccountTransReportingCurrencyAmounts;

        this.skipTableMethods(bankDepositDocument);
        this.skipTableMethods(bankAccountTrans);
        this.skipTableMethods(bankAccountTransReportingCurrencyAmounts);

        // BankDepositDocument functions as a header, matching the summarized amount of the bank transactions.
        update_recordset bankDepositDocument
            setting ReportingCurrencyAmount = bankAccountTransReportingCurrencyAmounts.AmountReportingCurrency
            join bankAccountTrans
                where bankAccountTrans.SourceTableId == tableNum(BankDepositDocument)
                    && bankAccountTrans.SourceRecId == bankDepositDocument.RecId
            join bankAccountTransReportingCurrencyAmounts
                where bankAccountTransReportingCurrencyAmounts.BankAccountTrans == bankAccountTrans.RecId;

        // BankDeposit includes records for each deposit slip and must refer back to the general ledger.
        BankDeposit bankDeposit;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        TmpDataAreaRecIdFilter bankDepositsToProcess;

        this.skipTableMethods(bankDeposit);
        this.skipTableMethods(generalJournalAccountEntry);
        this.skipTableMethods(subledgerVoucherGeneralJournalEntry);

        insert_recordset bankDepositsToProcess
            (RefRecId)
            select RecId from bankDepositDocument
            exists join bankAccountTrans
                where bankAccountTrans.SourceTableId == tableNum(BankDepositDocument)
                    && bankAccountTrans.SourceRecId == bankDepositDocument.RecId
            exists join bankAccountTransReportingCurrencyAmounts
                where bankAccountTransReportingCurrencyAmounts.BankAccountTrans == bankAccountTrans.RecId;

        update_recordset bankDeposit
            setting AmountReportingCurrency = generalJournalAccountEntry.ReportingCurrencyAmount
            join bankDepositsToProcess
                where bankDepositsToProcess.RefRecId == bankDeposit.BankDepositDocument
            join RecId from subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.Voucher == bankDeposit.Voucher
                    && subledgerVoucherGeneralJournalEntry.AccountingDate == bankDeposit.TransDate
                    && subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == bankDeposit.DataAreaId
            join RecId, ReportingCurrencyAmount from generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry
                    && generalJournalAccountEntry.AccountingCurrencyAmount == bankDeposit.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipTableMethods</Name>
				<Source><![CDATA[
    private void skipTableMethods(Common _table)
    {
        _table.skipDataMethods(true);
        _table.skipDatabaseLog(true);
        _table.skipEvents(true);
        _table.skipNumberSequenceCheck(true);
        _table.skipPostLoad(true);
        _table.skipTTSCheck(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>