<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBudgetUpdate_Journal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetBudgetUpdate_Journal extends AssetBudgetUpdate
{
    QueryBuildRange qbrAssetBudget_BudgetModel;
    QueryBuildRange qbrAssetBudget_TransType;
    QueryBuildRange qbrAssetBudget_AssetId;
    QueryBuildRange qbrAssetBudget_TransDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a query for obtaining the necessary <c>LedgerJournalTrans</c> and
    ///    <c>LedgerJournalTrans_Asset</c> records.
    /// </summary>
    /// <param name="_common">
    ///    A <c>LedgerJournalTrans</c> record that indicates the journal from which to fetch transactions.
    /// </param>
    /// <returns>
    ///    A query with the <c>LedgerJournalTrans</c> and <c>LedgerJournalTrans_Asset</c> data sources.
    /// </returns>
    public Query buildQuery(Common _common)
    {
        LedgerJournalTrans ledgerJournalTrans = _common as LedgerJournalTrans;

        Query query = new Query();
        QueryBuildDataSource ledgerJournalTransDS, ledgerJournalTrans_AssetDS;

        if (!ledgerJournalTrans.JournalNum)
        {
            throw error("@SYS19282");
        }

        // Setup the primary datasource.
        ledgerJournalTransDS = query.addDataSource(tablenum(LedgerJournalTrans));
        ledgerJournalTransDS.addRange(fieldnum(LedgerJournalTrans, JournalNum)).value(ledgerJournalTrans.JournalNum);

        // Setup the secondary (joined) datasource.
        ledgerJournalTrans_AssetDS = ledgerJournalTransDS.addDataSource(tablenum(LedgerJournalTrans_Asset));
        ledgerJournalTrans_AssetDS.joinMode(JoinMode::InnerJoin);
        ledgerJournalTrans_AssetDS.relations(true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryExistingLedgerBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a query for the existing ledger budget transactions to be transferred.
    /// </summary>
    protected void buildQueryExistingLedgerBudget()
    {
        QueryBuildDataSource qbdsAssetBudget;
        QueryBuildDataSource qbdsBudgetTransactionLine;
        QueryBuildDataSource qbdsBudgetTransactionLineReversed;
        QueryBuildDataSource qbdsBudgetTransactionLineReversing;
        QueryBuildDataSource qbdsBudgetTransactionHeader;

        DictRelation reversedLineRelation;
        DictRelation reversingLineRelation;

        // Initialize query
        queryExistingLedgerBudget = new Query();

        // Add AssetBudget & BudgetTransactionLineAssetBudget to query for previously transferred budget transactions
        qbdsAssetBudget = queryExistingLedgerBudget.addDataSource(tablenum(AssetBudget));

        // Add ranges on AssetBudget to restrict results with details from journal transactions
        qbrAssetBudget_AssetId = qbdsAssetBudget.addRange(fieldnum(AssetBudget, AssetId));
        qbrAssetBudget_TransType = qbdsAssetBudget.addRange(fieldnum(AssetBudget, TransType));
        qbrAssetBudget_BudgetModel = qbdsAssetBudget.addRange(fieldnum(AssetBudget, BudgetModel));
        qbrAssetBudget_TransDate = qbdsAssetBudget.addRange(fieldnum(AssetBudget, TransDate));

        // Add BudgetTransactionLine to query for previously transferred budget transactions
        qbdsBudgetTransactionLine = qbdsAssetBudget.addDataSource(tablenum(BudgetTransactionLine));
        qbdsBudgetTransactionLine.relations(true);

        // Add BudgetTransactionLineReverse to query for previous transferred budget transactions to exclude reversed budget transactions
        qbdsBudgetTransactionLineReversed = qbdsBudgetTransactionLine.addDataSource(tablenum(BudgetTransactionLineReverse));
        reversedLineRelation = new DictRelation(tablenum(BudgetTransactionLineReverse), UtilElementType::Table, 1);
        reversedLineRelation.loadFieldRelation(fieldnum(BudgetTransactionLineReverse, ReversedBudgetTransactionLine));
        qbdsBudgetTransactionLineReversed.addRelation(reversedLineRelation);
        qbdsBudgetTransactionLineReversed.joinMode(JoinMode::NoExistsJoin);

        // Add BudgetTransactionLineReverse to query for previous transferred budget transactions to exclude reversed budget transactions
        qbdsBudgetTransactionLineReversing = qbdsBudgetTransactionLine.addDataSource(tablenum(BudgetTransactionLineReverse));
        reversingLineRelation = new DictRelation(tablenum(BudgetTransactionLineReverse), UtilElementType::Table, 2);
        reversingLineRelation.loadFieldRelation(fieldnum(BudgetTransactionLineReverse, ReversingBudgetTransactionLine));
        qbdsBudgetTransactionLineReversing.addRelation(reversingLineRelation);
        qbdsBudgetTransactionLineReversing.joinMode(JoinMode::NoExistsJoin);

        // Add BudgetTransactionHeader to query for previously transferred budget transactions
        qbdsBudgetTransactionHeader = qbdsBudgetTransactionLine.addDataSource(tablenum(BudgetTransactionHeader));
        qbdsBudgetTransactionHeader.relations(true);
        qbdsBudgetTransactionHeader.joinMode(JoinMode::ExistsJoin);

        // Restrict BudgetTransactionHeader to transaction type to Fixed Asset
        qbdsBudgetTransactionHeader.addRange(fieldnum(BudgetTransactionHeader, BudgetTransactionType)).value(int2str(enum2int(budgetTransactionTypeAsset)));

        // Add range on BudgetTransactionHeader to restrict results by TransactionStatus for validation stage & processing stage
        qbrBudgetTransactionHeader_TransactionStatus = qbdsBudgetTransactionHeader.addRange(fieldnum(BudgetTransactionHeader, TransactionStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmDraftBudgetTransNoReverse</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prompts the user to confirm that draft budget transactions related to asset budget transactions
    ///    will not be reversed.
    /// </summary>
    /// <returns>
    ///    true if user confirms the prompt; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The user is only prompted if the option to delete the existing budget transactions is marked and at
    ///    least one draft budget transaction is found.
    /// </remarks>
    protected boolean confirmDraftBudgetTransNoReverse()
    {
        boolean ok = true;
        QueryRun assetBudgetJournalTransQueryRun;
        QueryRun transCannotReverseQueryRun;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans_Asset ledgerJournalTrans_Asset;

        if (deleteExistingLedgerBudget == true)
        {
            // Check if any previously transfered budget transactions exist in an draft status

            // Initialize query for asset budget journal transactions to be posted
            assetBudgetJournalTransQueryRun = new QueryRun(queryRun.query());

            // Initialize query for finding existing related budget transactions
            if (queryExistingLedgerBudget == null)
            {
                this.buildQueryExistingLedgerBudget();

                // Set up range to restrict to draft budget transactions for validation
                qbrBudgetTransactionHeader_TransactionStatus.value(int2str(enum2int(BudgetTransactionStatus::Draft)));
            }

            while (assetBudgetJournalTransQueryRun.next())
            {
                // Get journal transaction to be completed
                ledgerJournalTrans = assetBudgetJournalTransQueryRun.get(tablenum(LedgerJournalTrans)) as LedgerJournalTrans;
                ledgerJournalTrans_Asset = assetBudgetJournalTransQueryRun.get(tablenum(LedgerJournalTrans_Asset)) as LedgerJournalTrans_Asset;

                // Set up ranges for existing related budget transactions for asset budget from journal transaction details
                qbrAssetBudget_AssetId.value(SysQuery::value(ledgerJournalTrans.parmAccount()));
                qbrAssetBudget_TransType.value(int2str(enum2int(AssetPost::assetTransTypeJournal2AssetTransType(ledgerJournalTrans_Asset.TransType))));
                qbrAssetBudget_BudgetModel.value(SysQuery::value(ledgerJournalTrans_Asset.BudgetModel));
                qbrAssetBudget_TransDate.value(SysQuery::value(ledgerJournalTrans.TransDate));

                transCannotReverseQueryRun = new QueryRun(queryExistingLedgerBudget);

                if (transCannotReverseQueryRun.next())
                {
                    // Confirm OK that draft budget transactions will not be reversed
                    if (Box::yesNo(strfmt("@SYS132977", budgetTransactionTypeAsset), DialogButton::Yes) == DialogButton::No)
                    {
                        ok = false;
                    }

                    break;
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        Dialog  dialog = super();

        // Create with different headline, depending on whether Ledgerbudget should be updated.
        if (this.parmUpdateLedger())
        {
            dialog.caption("@SYS71111");
        }
        else
        {
            dialog.caption("@SYS71112");
        }

        dialog.addGroup("@SYS71113");
        dialogDeleteExistingAssetBudget = dialog.addField(extendedtypestr(NoYesId),"@SYS327703","@SYS327957");
        dialogDeleteExistingAssetBudget.value(deleteExistingAssetBudget);

        if (this.parmUpdateLedger())
        {
            dialog.addGroup("@SYS127773");
            dialogDeleteExistingLedgerBudget = dialog.addField(extendedtypestr(NoYesId),"@SYS67819","@SYS67820");
            dialogDeleteExistingLedgerBudget.value(deleteExistingLedgerBudget);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        super();

        deleteExistingAssetBudget = dialogDeleteExistingAssetBudget.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processExistingBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes existing ledger budget transaction and asset budget transactions depending on the options
    ///    selected by the user.
    /// </summary>
    /// <param name="_assetBudgetJournalTransQuery">
    ///    A query for the asset budget ledger journal transactions to be posted.
    /// </param>
    /// <remarks>
    ///    Existing ledger budget transactions are reversed. Existing asset budget transactions are deleted.
    /// </remarks>
    protected void processExistingBudget(Query _assetBudgetJournalTransQuery)
    {
        QueryRun assetBudgetJournalTransQueryRun;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans_Asset ledgerJournalTrans_Asset;

        QueryRun transToReverseQueryRun;
        BudgetTransactionLine budgetTransactionLine;

        BudgetTransactionReverseManager reversalManager;

        AssetBudget assetBudget;

        if (deleteExistingLedgerBudget == true)
        {
            // Initialize query for budget transaction lines to reverse
            if (queryExistingLedgerBudget == null)
            {
                this.buildQueryExistingLedgerBudget();
            }

            if (qbrBudgetTransactionHeader_TransactionStatus != null)
            {
                // Set up range to restrict to completed budget transactions for finding transactions to reverse
                qbrBudgetTransactionHeader_TransactionStatus.value(int2str(enum2int(BudgetTransactionStatus::Completed)));
            }

            // Initialize map for caching reversal managers
            reversalManagers = new Map(Types::String, Types::Class);
        }

        assetBudgetJournalTransQueryRun = new QueryRun(_assetBudgetJournalTransQuery);

        while (assetBudgetJournalTransQueryRun.next())
        {
            // Get the asset budget journal transaction details
            ledgerJournalTrans = assetBudgetJournalTransQueryRun.get(tablenum(LedgerJournalTrans)) as LedgerJournalTrans;
            ledgerJournalTrans_Asset = assetBudgetJournalTransQueryRun.get(tablenum(LedgerJournalTrans_Asset)) as LedgerJournalTrans_Asset;

            if (deleteExistingLedgerBudget == true)
            {
                // Set up ranges for existing related budget transactions for asset budget from journal transaction details
                qbrAssetBudget_AssetId.value(SysQuery::value(ledgerJournalTrans.parmAccount()));
                qbrAssetBudget_TransType.value(int2str(enum2int(AssetPost::assetTransTypeJournal2AssetTransType(ledgerJournalTrans_Asset.TransType))));
                qbrAssetBudget_BudgetModel.value(SysQuery::value(ledgerJournalTrans_Asset.BudgetModel));
                qbrAssetBudget_TransDate.value(SysQuery::value(ledgerJournalTrans.TransDate));

                transToReverseQueryRun = new QueryRun(queryExistingLedgerBudget);

                // Query for budget transaction lines to reverse
                while (transToReverseQueryRun.next())
                {
                    // Get reversal manager for budget model
                    if (reversalManagers.exists(ledgerJournalTrans_Asset.BudgetModel))
                    {
                        reversalManager = reversalManagers.lookup(ledgerJournalTrans_Asset.BudgetModel);
                    }
                    else
                    {
                        // Create reversal manager for new budget model
                        reversalManager = BudgetTransactionReverseManager::construct(
                                            budgetTransactionCode.Name,
                                            ledgerJournalTrans_Asset.BudgetModel);
                    }

                    budgetTransactionLine = transToReverseQueryRun.get(tablenum(BudgetTransactionLine)) as BudgetTransactionLine;

                    if (budgetTransactionLine.RecId != 0)
                    {
                        // Add budget transaction line to reversal manager
                        reversalManager.addTransactionLineToReverse(budgetTransactionLine.RecId);

                        // Add reversal manager to cache
                        reversalManagers.insert(ledgerJournalTrans_Asset.BudgetModel, reversalManager);
                    }
                }
            }

            if (deleteExistingAssetBudget == true)
            {
                delete_from assetBudget
                    where assetBudget.AssetId      == ledgerJournalTrans.parmAccount()
                       && assetBudget.TransType    == AssetPost::assetTransTypeJournal2AssetTransType(ledgerJournalTrans_Asset.TransType)
                       && assetBudget.BudgetModel  == ledgerJournalTrans_Asset.BudgetModel
                       && assetBudget.TransDate    == ledgerJournalTrans.TransDate;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processExistingBudgetReversals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes existing ledger budget transaction reversals that were determined by the
    /// <c>processExistingBudget</c> method.
    /// </summary>
    /// <remarks>
    /// The reversals must be processed separately from the <c>processExistingBudget</c> method to ensure
    /// they are done outside the transfer transaction scope to ensure any budget funds available checks
    /// for the reversals are processed as confirmed.
    /// </remarks>
    protected void processExistingBudgetReversals()
    {
        BudgetTransactionReverseManager reversalManager;
        MapEnumerator reversalsToProcess;

        if (deleteExistingLedgerBudget && reversalManagers.elements() > 0)
        {
            reversalsToProcess = reversalManagers.getEnumerator();

            while (reversalsToProcess.moveNext())
            {
                reversalManager = reversalsToProcess.currentValue();
                reversalManager.reverseTransactionLines();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts the specified <c>LedgerJournalTrans</c> record to the asset budget subledger.
    /// </summary>
    public void run()
    {
        LedgerJournalTable          ledgerJournalTable;
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalTrans_Asset    ledgerJournalTrans_Asset;
        AssetBudget                 assetBudget;
        LedgerJournalId             journalNum;
        Counter                     progressTotal;
        QueryRun                    qr;
        boolean                     allOk;

        progressTotal = QueryRun::getQueryRowCount(queryRun.query(), intMax()); // Get the total number of results returned by the query
        this.progressInit("@SYS13894", progressTotal, #AviFormLetter);

        allOk = true;

        try
        {
            qr = new QueryRun(queryRun.query());

            // Validate the entire journal in one call instead of validating every single journal line.
            if (qr.next())
            {
                ledgerJournalTrans = qr.get(tablenum(LedgerJournalTrans)) as LedgerJournalTrans;

                if (this.parmUpdateLedger() && !this.validatePost(ledgerJournalTrans))
                {
                    allOk = false;
                }

                if (allOk)
                {
                    ledgerJournalTrans_Asset    = qr.get(tablenum(LedgerJournalTrans_Asset)) as LedgerJournalTrans_Asset;
                    allOk = ledgerjournalTrans.checkZeroAmount(ledgerJournalTrans_Asset.TransType);
                }
            }
        }
        catch (Exception::Error)
        {
            allOk = false;
        }

        if (allOk)
        {
            progress.setCaption("@SYS25781");

            queryRun.query().dataSourceTable(tablenum(LedgerJournalTrans_Asset)).update(true);

            // Initialize budget transaction supporting objects
            this.initForBudgetTransaction();

            ttsbegin;

            // Handle existing Budget transaction lines to reverse & delete existing Asset budget, if necessary
            if (deleteExistingAssetBudget || deleteExistingLedgerBudget)
            {
                this.processExistingBudget(queryRun.query());
            }

            while (queryRun.next())
            {
                ledgerJournalTrans          = queryRun.get(tablenum(LedgerJournalTrans)) as LedgerJournalTrans;
                ledgerJournalTrans_Asset    = queryRun.get(tablenum(LedgerJournalTrans_Asset)) as LedgerJournalTrans_Asset;

                assetBudget.initFromLedgerJournalTrans(ledgerJournalTrans);
                assetBudget.BudgetPostingStatus  = AssetBudgetPostingStatus::PostedToAssets;
                assetBudget.insert();

                if (this.parmUpdateLedger() && this.isUpdateLedgerNeeded(assetBudget))
                {
                    assetBudget.BudgetPostingStatus  = AssetBudgetPostingStatus::PostedToBudgets;
                    assetBudget.update();

                    // Create budget transaction for asset budget ledger account & offset
                    this.createBudgetTransaction(assetBudget);
                }

                ledgerJournalTrans_Asset.BudgetPostingStatus = assetBudget.BudgetPostingStatus;
                ledgerJournalTrans_Asset.update();

                journalNum = ledgerJournalTrans.JournalNum;

                progress.incCount();
            }

            if (budgetTransactionPost != null)
            {
                // Update budget balances for transactions created if indicated by parameter
                budgetTransactionPost.runOperation();
            }

            ledgerJournalTable = LedgerJournalTable::find(journalNum,true);
            ledgerJournalTable.Posted           = true;
            ledgerJournalTable.PostedDateTime   = DateTimeUtil::getSystemDateTime();
            ledgerJournalTable.update();

            info(strfmt("@SYS67578", progressTotal));

            ttscommit;

            // Process the reversals outside of the transfer tts to ensure any budget funds available checks
            // for the reversals are processed as confirmed.
            this.processExistingBudgetReversals();

            // Warn for dimension attributes not in active budget structure captured during processing
            if (budgetTransactionManager != null)
            {
                budgetTransactionManager.showWarningsDimAttsNotBudgetEnabled("@SYS300283");
            }
        }
        else
        {
            // Errors from post check are suppressed individually so all lines can be checked.
            // This will clear up any dangling transactions.
            ttsabort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePost</Name>
				<Source><![CDATA[
    protected boolean validatePost(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalCheckPost  ledgerJournalCheckPost;
        LedgerJournalTable      ledgerJournalTable;

        ledgerJournalTable = LedgerJournalTable::find(_ledgerJournalTrans.JournalNum, false);
        ledgerJournalCheckPost = ledgerJournalCheckPost::newLedgerJournalTable(ledgerJournalTable,
                                                                                NoYes::No);
        ledgerJournalCheckPost.progress(progress);

        LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);

        return ledgerJournalCheckPost.tableErrorLog() == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>