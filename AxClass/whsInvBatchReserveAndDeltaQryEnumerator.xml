<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>whsInvBatchReserveAndDeltaQryEnumerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInvBatchReserveAndDeltaQryEnumerator</c> class is responsible for enumerating
/// a collection which include batch numbers from two tables.
/// The batch numbers can be compared in order to support returning the batch based on FEFO rules.
/// </summary>
public class whsInvBatchReserveAndDeltaQryEnumerator extends WHSInvReserveAndDeltaQueryEnumerator
{
    InventBatchChooser  batchChooser;
    TableId             sumTableIdWithUnConsumedResult;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSInvBatchReserveAndDeltaQryEnumerator construct()
    {
        return new WHSInvBatchReserveAndDeltaQryEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Advances the enumerator to the next element of the collection.
    /// </summary>
    /// <returns>
    /// true if the enumerator was advanced; otherwise, false.
    /// </returns>
    public boolean moveNext()
    {
        InventBatch        batchInventReserve;
        InventBatch        batchInventReserveDelta;
        InventBatchId      batchId;

        if (sumTableIdWithUnConsumedResult != sumTableIdInventReserve && !queryRunInventReserve.next())
        {
            atTheEndInventReserve = true;
        }
        else
        {
            batchInventReserve = queryRunInventReserve.get(tableNum(InventBatch));
        }

        atBeginningInventReserve = false;

        if (sumTableIdWithUnConsumedResult != sumTableIdInventReserveDelta && !queryRunInventReserveDelta.next())
        {
            atTheEndInventReserveDelta = true;
        }
        else
        {
            batchInventReserveDelta = queryRunInventReserveDelta.get(tableNum(InventBatch));
        }

        atBeginningInventReserveDelta = false;

        if ((!atTheEndInventReserve || !atTheEndInventReserveDelta) || sumTableIdWithUnConsumedResult != 0)
        {
            //we might be at the end of both collections but still have a batch number that was not consumed from the previous iteration
            if ((!atTheEndInventReserve && !atTheEndInventReserveDelta) || sumTableIdWithUnConsumedResult != 0)
            {
                //we prefer to take the batch from delta table since it makes it possible to reserve same batch when we have multiple batches with same dates
                batchId = batchChooser.chooseBatch(batchInventReserveDelta, batchInventReserve);
            }

            //Either we are done with the inventreserve or we use the batch from delta
            if (atTheEndInventReserve || (batchId && (batchId != batchInventReserve.inventBatchId)))
            {
                queryRunActive = queryRunInventReserveDelta;
                sumTableIdActive = sumTableIdInventReserveDelta;

                if (!atTheEndInventReserve)
                {
                    sumTableIdWithUnConsumedResult = sumTableIdInventReserve;
                }
                else
                {
                    sumTableIdWithUnConsumedResult = 0; //clear
                }
            }
            else
            {
                queryRunActive = queryRunInventReserve;
                sumTableIdActive = sumTableIdInventReserve;

                if (!atTheEndInventReserveDelta)
                {
                    sumTableIdWithUnConsumedResult = sumTableIdInventReserveDelta;
                }
                else
                {
                    sumTableIdWithUnConsumedResult = 0; //clear
                }
            }
        }

        return !(atTheEndInventReserve && atTheEndInventReserveDelta && sumTableIdWithUnConsumedResult == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchChooser</Name>
				<Source><![CDATA[
    public InventBatchChooser parmBatchChooser(InventBatchChooser _batchChooser = batchChooser)
    {
        batchChooser = _batchChooser;
        return batchChooser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset()
    {
        super();

        sumTableIdWithUnConsumedResult = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromQueryCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of this class based on the parameter.
    /// </summary>
    /// <param name="_whsInvBatchReserveAndDeltaQryCollection">
    /// The collection that should be enumerated.
    /// </param>
    /// <returns>
    /// A new instance of this class
    /// </returns>
    public static WHSInvBatchReserveAndDeltaQryEnumerator newFromQueryCollection(
        WHSInvBatchReserveAndDeltaQryCollection _whsInvBatchReserveAndDeltaQryCollection)
    {
        WHSInvBatchReserveAndDeltaQryEnumerator whsInvBatchReserveAndDeltaQryEnumerator;

        whsInvBatchReserveAndDeltaQryEnumerator = WHSInvBatchReserveAndDeltaQryEnumerator::construct();

        whsInvBatchReserveAndDeltaQryEnumerator.setQueriesAndTableIds(_whsInvBatchReserveAndDeltaQryCollection);

        //set invent batch chooser
        whsInvBatchReserveAndDeltaQryEnumerator.parmBatchChooser(_whsInvBatchReserveAndDeltaQryCollection.parmBatchChooser());

        return whsInvBatchReserveAndDeltaQryEnumerator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>