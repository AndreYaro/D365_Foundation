<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOENInfo_PackingComplete</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Generate event notification for packing complete order.
/// </summary>
class RetailOENInfo_PackingComplete extends RetailOENInfo
{
    // Pick up in store related placeholders.
    private const str PickupStoreAddress = 'pickupstoreaddress';
    private const str PickupStoreHourFrom = 'pickupstoreopenfrom';
    private const str PickupStoreHourTo = 'pickupstoreopento';
    private const str PickupStoreName = 'pickupstorename';
    private const str PickupChannelId = 'pickupchannelid';
    private const str PackingSlipId = 'packingslipid';
    private const str ConfirmationId = 'confirmationid';

    CustPackingSlipJour     custPackingSlipJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EventNotificationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to return the retail event notification type.
    /// </summary>
    /// <returns>
    /// Retail event notification type.
    /// </returns>
    public RetailEventNotificationType EventNotificationType()
    {
        return RetailEventNotificationType::PackingComplete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDetailInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates detail information about transaction.
    /// </summary>
    /// <param name="messageTemplate">
    /// String which has the transaction information.
    /// </param>
    /// <returns>
    /// Detail information about transaction.
    /// </returns>
    protected str generateDetailInfo(str messageTemplate)
    {
        return super(messageTemplate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds sales order and sets value to <c>RetailOENInfo</c>.
    /// </summary>
    /// <param name="refRecId">
    /// Record id of <c>CustPackingSlipJour</c>
    /// </param>
    public void resolveSalesOrder(RefRecId refRecId)
    {
        custPackingSlipJour = CustPackingSlipJour::findRecId(refRecId);

        this.parmSalesOrder(SalesTable::find(custPackingSlipJour.SalesId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineQtyPacked</Name>
				<Source><![CDATA[
    protected SalesQty getSalesLineQtyPacked(SalesLine _salesLine)
    {
        CustPackingSlipTrans custPackingSlipTrans;

        select sum(Qty) from custPackingSlipTrans
			where custPackingSlipTrans.InventTransId == _salesLine.InventTransId
				&& custPackingSlipTrans.SalesId == custPackingSlipJour.SalesId
				&& custPackingSlipTrans.PackingSlipId == custPackingSlipJour.PackingSlipId
				&& custPackingSlipTrans.DeliveryDate == custPackingSlipJour.DeliveryDate;

        return custPackingSlipTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateSaleslineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the object of <c>SalesLine</c> table with replacing e-mail related placeholders with the actual subject, message etc.
    /// </summary>
    /// <param name="_saleslineTableTemplate">
    /// String containing the template for message.
    /// </param>
    /// <returns>
    /// Message template with actual subject and message.
    /// </returns>
    protected str generateSaleslineTable(str _saleslineTableTemplate)
    {
        if (!RetailPackingCompleteEventShowsOnlyPackedLinesFeatureToggle::instance().isEnabled())
        {
            return super(_saleslineTableTemplate);
        }
        
        SalesLine       salesLine;
        CustPackingSlipTrans custPackingSlipTrans;
        str             result;
        Map             saleslineMap;
        MCRSalesLine    mcrSalesLine;
        RetailGiftCardTransactions retailGiftCardTransactions;

        while select LineNum from custPackingSlipTrans
                where custPackingSlipTrans.SalesId == custPackingSlipJour.SalesId
                && custPackingSlipTrans.DeliveryDate == custPackingSlipJour.DeliveryDate
                && custPackingSlipTrans.PackingSlipId == custPackingSlipJour.PackingSlipId
            join salesLine
                where salesLine.SalesId == salesOrder.SalesId
                && salesLine.InventTransId == custPackingSlipTrans.InventTransId
                && salesLine.SalesQty > 0
            outer join firstOnly GiftCardGiftMessage from mcrSalesLine
                where mcrSalesLine.SalesLine == salesLine.RecId
            outer join firstOnly Amount, CardNumber from retailGiftCardTransactions
                where retailGiftCardTransactions.MCRInventTransId == salesLine.InventTransId
                    && retailGiftCardTransactions.Operation == RetailGiftCardOperation::Issue
        {
            saleslineMap = this.createSalesLineMap(salesLine, retailGiftCardTransactions, mcrSalesLine);
            result += SysEmailMessage::stringExpand(_saleslineTableTemplate, saleslineMap);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameterMap</Name>
				<Source><![CDATA[
    protected void initParameterMap()
    {
        // Make sure that every parameter should be converted into string.
        super();

        if (RetailOENInfoNullExceptionPackingCompleteFlight::instance().isEnabled() && !parameterMap)
        {
            // If the parameter map is not initialized in the super(), meaning the sales order does not exist / this email event is invalid.
            return;
        }

        RetailStoreTable pickupStore;
        CustPackingSlipTrans packingSlipTrans;
        SalesLine salesLine;
        InventDim inventDim;
        RetailDlvModeTmp pickupDlvModes = RetailDlvMode::getPickupDeliveryModes();

        RetailSalesTable retailSalesTable = this.salesOrder.retailSalesTable();
        if (retailSalesTable && retailSalesTable.ChannelReferenceId)
        {
            parameterMap.insert(ConfirmationId, retailSalesTable.ChannelReferenceId);
        }

        if (custPackingSlipJour)
        {
            parameterMap.insert(PackingSlipId, custPackingSlipJour.PackingSlipId);
        }

        select firstonly RecId from packingSlipTrans
                    where packingSlipTrans.SalesId == custPackingSlipJour.SalesId
                    && packingSlipTrans.DeliveryDate == custPackingSlipJour.DeliveryDate
                    && packingSlipTrans.PackingSlipId == custPackingSlipJour.PackingSlipId
                join RecId from salesLine
                    where salesLine.SalesId == packingSlipTrans.SalesId
                    && salesLine.InventTransId == packingSlipTrans.InventTransId
                join InventLocationId from inventDim
                    where inventDim.InventDimId == salesLine.InventDimId
                exists join pickupDlvModes
                    where pickupDlvModes.Code == salesLine.DlvMode;

        if (!packingSlipTrans)
        {
            // If the delivery mode for sales line is not for pickup, then do not initialize the parameters.
            return;
        } 

        select firstonly pickupStore
            where pickupStore.InventLocation == inventDim.InventLocationId
            && pickupStore.inventLocationDataAreaId == curExt();

        if (pickupStore)
        {
            InventLocation pickupStoreWarehouse = InventLocation::find(pickupStore.InventLocation);
            if (!pickupStoreWarehouse)
            {
                eventSource.EventWriteEmailNotificationPrimaryWarehouseNotFoundForStore(pickupStore.RecId);
                throw Exception::Error;
            }
            else
            {
                parameterMap.insert(PickupStoreAddress, InventLocation::find(pickupStore.inventLocation).address());
            }

            parameterMap.insert(PickupStoreHourFrom, time2str(pickupStore.openFrom, TimeSeparator::Colon, TimeFormat::AMPM));
            parameterMap.insert(PickupStoreHourTo, time2str(pickupStore.openTo, TimeSeparator::Colon, TimeFormat::AMPM));
            parameterMap.insert(PickupStoreName, pickupStore.name());
            parameterMap.insert(PickupChannelId, int642str(pickupStore.RecId));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>