<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMLedgerDimensionConverter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Convents dimension to cash flow management module set - based dimension.
/// </summary>
public class CFMLedgerDimensionConverter implements CFMLedgerDimensionConverterInterface
{
    DimensionHierarchyId cfmDimensionSet;

    container aggregationDimensionsContainer;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>CFMLedgerDimensionConverter</c>.
    /// </summary>
    /// <returns>
    /// Instance of <c>CFMLedgerDimensionConverter</c>
    /// </returns>
    public static CFMLedgerDimensionConverter construct()
    {
        CFMLedgerDimensionConverter converter = new CFMLedgerDimensionConverter();

        converter.initialize();

        return converter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts default dimension.
    /// </summary>
    /// <param name="_defaultDimensionFrom">
    /// Default dimension
    /// </param>
    /// <returns>
    /// Cash flow management set - based dimension
    /// </returns>
    public CFMLedgerDimension convertDefaultDimension(DimensionDefault _defaultDimensionFrom)
    {
        Map dimensionSpecifiers;

        if (_defaultDimensionFrom)
        {
            dimensionSpecifiers = LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(_defaultDimensionFrom);
        }
        else
        {
            dimensionSpecifiers = new Map(Types::Int64, Types::Container);
        }

        return this.createDimensionFromSpecifiers(dimensionSpecifiers);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts ledger dimension.
    /// </summary>
    /// <param name="_ledgerDimensionFrom">
    /// Ledger dimension
    /// </param>
    /// <returns>
    /// Cash flow management set - based dimension     
    /// </returns>
    public CFMLedgerDimension convertLedgerDimension(LedgerDimensionBase _ledgerDimensionFrom)
    {
        Map dimensionSpecifiers;

        if (_ledgerDimensionFrom)
        {
            dimensionSpecifiers = LedgerDimensionDefaultingEngine::getLedgerDimensionSpecifiers(_ledgerDimensionFrom, true);
        }
        else
        {
            dimensionSpecifiers = new Map(Types::Int64, Types::Container);
        }

        return this.createDimensionFromSpecifiers(dimensionSpecifiers);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDimensionFromSpecifiers</Name>
				<Source><![CDATA[
    private CFMLedgerDimension createDimensionFromSpecifiers(Map _dimensionSpecifiersOrig)
    {
        if (!cfmDimensionSet)
        {
            return 0;
        }
        Map dimensionSpecifiers = this.filterDimensionSpecifiers(_dimensionSpecifiersOrig);

        if (dimensionSpecifiers && dimensionSpecifiers.elements() == 0)
        {
            return 0;
        }
        LedgerDimensionDefaultingEngine dimensionDefaultingEngine = LedgerDimensionDefaultingEngine::constructForAccountStructure(cfmDimensionSet,
                                                                                                                                  dimensionSpecifiers,
                                                                                                                                  LedgerDimensionType::BudgetPlanning);

        DimensionStorage dimensionStorage = dimensionDefaultingEngine.getStorage(LedgerDimensionType::BudgetPlanning);

        LedgerDimensionBase ledgerDimension;

        if (dimensionStorage.segmentCount() > 0)
        {
            dimensionStorage.getSegment(dimensionStorage.segmentCount());
            ledgerDimension = dimensionStorage.save();
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterDimensionSpecifiers</Name>
				<Source><![CDATA[
    private Map filterDimensionSpecifiers(Map _dimensionSpecifiersOriginal)
    {
        Map dimensionSpecifiersNew;

        if (aggregationDimensionsContainer != conNull() && _dimensionSpecifiersOriginal.elements())
        {
            dimensionSpecifiersNew = new Map(Types::Int64, Types::Container);

            MapEnumerator dimensionSpecifiersOriginalEnumerator = _dimensionSpecifiersOriginal.getEnumerator();

            while (dimensionSpecifiersOriginalEnumerator.moveNext())
            {
                if (conFind(aggregationDimensionsContainer, dimensionSpecifiersOriginalEnumerator.currentKey()))
                {
                    dimensionSpecifiersNew.insert(dimensionSpecifiersOriginalEnumerator.currentKey(), dimensionSpecifiersOriginalEnumerator.currentValue());
                }
            }
        }
        else
        {
            dimensionSpecifiersNew = _dimensionSpecifiersOriginal;
        }

        return dimensionSpecifiersNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the class state before the conversion.
    /// </summary>
    protected void initialize()
    {
        cfmDimensionSet = CFMParameters::findInCentralizedPaymentsCompany().DimensionSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAggregationDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// set agreggation dimensions
    /// </summary>
    /// <param name = "_aggregationDimensions"></param>
    public void setAggregationDimensions(container _aggregationDimensions)
    {
        aggregationDimensionsContainer = _aggregationDimensions;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>