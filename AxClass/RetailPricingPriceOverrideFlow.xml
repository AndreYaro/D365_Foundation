<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingPriceOverrideFlow</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailPricingPriceOverrideFlow</c> class handles flow for price override.
/// </summary>
internal final class RetailPricingPriceOverrideFlow
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>overridePriceForSalesOrderHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides price at sales document header level.
    /// </summary>
    /// <param name = "_salesTable">SalesTable buffer.</param>
    /// <returns>True if user chooses to override; otherwise false.</returns>
    internal static boolean overridePriceForSalesOrderHeader(SalesTable _salesTable)
    {
        Args overrideArgs = new Args();
        overrideArgs.name(formStr(RetailPricingHeaderPriceOverrideReasonCode));
        FormRun reasonCodeFormRun = classfactory.formRunClass(overrideArgs);
        reasonCodeFormRun.run();
        reasonCodeFormRun.wait();

        RetailInformationSubcodeId priceOverrideReasonCode = overrideArgs.parm();

        if (priceOverrideReasonCode)
        {
            SalesLine salesLineForQuery;

            ttsbegin;

            // Update line workflow status.
            MCRSalesLine mcrSalesLine;
            WorkflowWorkItemTable workItem;

            while select forupdate mcrSalesLine
                join salesLineForQuery
                where salesLineForQuery.RecId == mcrSalesLine.SalesLine && salesLineForQuery.SalesId == _salesTable.SalesId
            {
                if (mcrSalesLine.RetailPriceOverrideWorkflowState != RetailPriceOverrideWorkflowState::Rejected)
                {
                    // cannot use element.getActiveWorkflowWorkItem() because if canSubmitToWorkflow return true, it will return null
                    select firstonly workItem
                        where workItem.DocumentClassId == classNum(RetailSalesLineWFTypeDocument)
                            && workItem.Status == WorkflowWorkItemStatus::Pending
                            && workItem.Type == WorkflowWorkItemType::Return
                            && workItem.RefTableId == tableNum(SalesLine)
                            && workItem.RefRecId == salesLineForQuery.RecId;

                    if (workItem)
                    {
                        mcrSalesLine.RetailPriceOverrideWorkflowState = RetailPriceOverrideWorkflowState::Rejected;
                    }
                    else
                    {
                        mcrSalesLine.RetailPriceOverrideWorkflowState = RetailPriceOverrideWorkflowState::NotSubmitted;
                    }
                }

                mcrSalesLine.update();
            }

            RetailSalesLine retailSalesLine;
            update_recordset retailSalesLine
                setting PriceOverrideReasonCode = priceOverrideReasonCode
                join salesLineForQuery
                    where salesLineForQuery.RecId == retailSalesLine.SalesLine && salesLineForQuery.SalesId == _salesTable.SalesId;

            ttsCommit;
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>