<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_AssessedTotalDepreciated</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Class <c>rTax25RegCalc_AssessedTotalDepreciated</c> is used to calculate data in register "Totals of net book value calculation".
/// </summary>
/// <remarks>
///  The register "Totals of net book value calculation" will be used for calculation of "Assessed tax register".
/// The way register calculated may vary depending on type of calculation of previous "Depreciated cost calculation" register.
/// </remarks>
final class rTax25RegCalc_AssessedTotalDepreciated extends RTax25RegCalc implements BatchRetryable
{
    RAssetStandardId    standardId;
    Map                 sumAssets;
    RTax25RegisterTrans_AssessedDeprCost transDeprCost, transDeprCostCorr;
    TransDate           beginningOfYear;
    RefRecId            deprCostRefRecId, deprCostCorrRefRecId;
    boolean             isPartialCorrection;

    Set                                  correctedAssetSet;

    boolean                              currentHeaderCreated;

    RTax25RegisterLineNum64 refLineNumberHeader;

    #define.Equal(0)
    #define.More(1)
    #define.Less(-1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAssets</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates summary records, based on map.
    /// </summary>
    /// <param name="_header">
    ///  Register line related to header.
    /// </param>
    /// <remarks>
    ///  Map filled by method addPeriod and contains summary amounts.
    /// </remarks>
    private void addAssets(RTax25RegisterTrans_AssessedDeprCost _header)
    {
        BranchId_RU             branchId;
        TransDate               transDate;
        BranchId_RU             newBranchId;
        RAssetTaxAllowanceId    taxAllowanceId;
        RAssetTaxAllowanceId    newTaxAllowanceId;
        MapEnumerator           me = sumAssets.getEnumerator();
    
        if (sumAssets.elements())
        {
            this.createHeader(_header);
        }
    
        while (me.moveNext())
        {
            [newBranchId, newTaxAllowanceId, transDate] = me.currentKey();
    
            if (branchId != newBranchId)
            {
                branchId = newBranchId;
                regQuery.addBodyRecord(0,
                                       this.createSubHeader('', '', '', strFmt("@SYS76498", "@GLS114703", branchId), _header.Movables),
                                       tableNum(Branches_RU),
                                       Branches_RU::find(branchId).RecId);
            }
    
            if (taxAllowanceId != newTaxAllowanceId)
            {
                taxAllowanceId = newTaxAllowanceId;
                regQuery.addBodyRecord(0,
                                       this.createSubHeader('', '', '', strFmt("@SYS76498", "@GLS106430", taxAllowanceId), _header.Movables),
                                       tableNum(RAssetTaxAllowance),
                                       RAssetTaxAllowance::findByTaxAllowanceId(taxAllowanceId).RecId);
            }
    
            regQuery.addBodyRecord(0, this.createContainer(transDate, taxAllowanceId, branchId, _header.Movables));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAssetsToSectionThree</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates lines related to fixed asset header for section 3.
    /// </summary>
    /// <param name="_rAssetTable">
    ///  <c>RAssetTable</c> record.
    /// </param>
    /// <param name="_branchId">
    ///  The id of separate division.
    /// </param>
    /// <param name="_taxAuthority">
    ///   Id of authority.
    /// </param>
    /// <returns>
    /// The line number of asset.
    /// </returns>
    private RTax25RegisterLineNum64 addAssetsToSectionThree(
        RAssetTable _rAssetTable,
        SeparateDivisionId_RU _branchId = '',
        TaxAuthority _taxAuthority = '')
    {
        container createContainer()
        {
            return ["", "", "",
                    strFmt("@GLS116642",_rAssetTable.AccountNum, _rAssetTable.Name), 0, false, 0.0,
                    dateNull(), 0., 0., 0., '', 0., 0., 0, 0, 0, 0, _branchId, _taxAuthority, refLineNumberHeader];
        }

        RTax25RegisterTrans_AssessedTotalDepr assessedTotalDepr = regQuery.addBodyRecord(0,
                               createContainer(),
                               _rAssetTable.TableId,
                               _rAssetTable.RecId);

        return assessedTotalDepr.LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Summarizes FA data into map.
    /// </summary>
    /// <param name="_rAssetTable">
    ///  <c>RAssetTable</c> record.
    /// </param>
    /// <param name="_transDate">
    ///  Date of amount.
    /// </param>
    /// <param name="_deprCost">
    ///   "Depreciation Cost" register record.
    /// </param>
    private void addPeriod(RAssetTable       _rAssetTable,
                           TransDate         _transDate,
                           RTax25RegisterTrans_AssessedDeprCost _deprCost)
    {
        RAssetTaxAllowanceId    taxAllowanceId  = RAssetTaxAllowance::find(_rAssetTable.TaxAllowanceRecId).TaxAllowanceId;
        BranchId_RU             branchId        = RAssetLocation::find(_rAssetTable.location(dateTo)).BranchId;
        Amount                  regNetBookTotal = _deprCost.NetBookValueTotal;
        Amount                  regNetBook      = _deprCost.NetBookValue;
    
        Amount                  netBookTotal;
        Amount                  netBook;
        Amount                  immovable;
        Amount                  nonTaxable;
        Branches_RU             branch;
        container               mapKey;
    
        branch = RAssetLocation::find(_rAssetTable.location(dateTo)).branch();
    
        if (branch.Independent)
        {
            branchId = branch.BranchId;
        }
    
        mapKey = [branchId, taxAllowanceId, _transDate];
    
        if (sumAssets.exists(mapKey))
        {
            [netBookTotal, netBook, immovable, nonTaxable] = sumAssets.lookup(mapKey);
        }
        else
        {
            [netBookTotal, netBook, immovable, nonTaxable] = [0, 0, 0, 0];
        }
    
        netBookTotal    += regNetBookTotal;
        netBook         += regNetBook;
    
        if (_rAssetTable.AssetType == RAssetType::LandBuilding)
        {
            immovable   += regNetBookTotal;
        }
    
        if (taxAllowanceId)
        {
            nonTaxable  += regNetBookTotal;
        }
    
        sumAssets.insert(mapKey, [netBookTotal, netBook, immovable, nonTaxable]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPeriodToSectionThree</Name>
				<Source><![CDATA[
    private void addPeriodToSectionThree(
        RAssetTable                            _rAssetTable,
        TransDate                              _transDate,
        RTax25RegisterTrans_AssessedDeprCost   _deprCost,
        boolean                                _movables = false,
        RTax25RegisterLineNum64                _refLineNumberAsset = 0)
    {
        real anyZero = 0.0;

        container createContainer()
        {
            RAssetAmount    taxAllowanceAmount;
            RAssetTaxAllowance rAssetTaxAllowance;

            if (_rAssetTable.TaxAllowanceRecId)
            {
                rAssetTaxAllowance = RAssetTaxAllowance::find(_rAssetTable.TaxAllowanceRecId);

                switch (rAssetTaxAllowance.TaxAllowanceType)
                {
                    case RAssetTaxAllowanceType::TaxExemption:
                        if (_deprCost.CadastralValue)
                        {
                            taxAllowanceAmount = _deprCost.CadastralValue; //Cadastral value
                        }
                        else
                        {
                            taxAllowanceAmount = _deprCost.NetBookValue; //Net book value
                        }
                        break;
                    case RAssetTaxAllowanceType::TaxBaseReduction:
                        taxAllowanceAmount = rAssetTaxAllowance.AllowanceValue;
                        break;
                }

            }

            return ["", "", "", "", 0, false, 0.0,
                    _transDate == DateTimeUtil::getEndOfYearDate(preferredLocale, _transDate) ? _transDate : mkdate(1, mthofyr(_transDate), year(_transDate)),
                    _deprCost.NetBookValueTotal,
                    _deprCost.NetBookValue,
                    taxAllowanceAmount,
                    _deprCost.OwnedShare,
                    _deprCost.CadastralValueTotal,
                    _deprCost.CadastralValue,
                    _deprCost.OwnershipPeriod,
                    _deprCost.OwnershipFactor,
                    _deprCost.CostChangePeriod,
                    _deprCost.CostChangeFactor,
                    '',
                    '',
                    _refLineNumberAsset];
        }

        regQuery.addBodyRecord(0,
                               createContainer(),
                               _rAssetTable.TableId,
                               _rAssetTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculates data in register.
    /// </summary>
    /// <remarks>
    ///  Goes through header records, which contain combinations of RCOAD, KBK, TaxCode and section, then for each section calculates its contents.
    /// In case of partial correction two cursors are initialized, then selected that has minimal [Section, Movables, RCOAD, KBK, taxCode] (or both if values area equal)
    /// and outputs their contents. Then goes to next record in processed cursor.
    /// Corrective register contains all fixed assets which were corrected in period, even those which were accounted in previous corrections.
    /// </remarks>
    public void calc()
    {
        int compareResult;

        try
        {
            ttsbegin;
    
            super();
            
            select
                RCOAD,
                BudgetRevenueCode,
                SalesTaxCode,
                Section,
                AssetKind,
                RailwayAsset,
                RailwayFactor,
                Movables,
                LineNumber,
                JournalTransRefRecId
            from transDeprCost
                order by LineNumber
                where transDeprCost.JournalTransRefRecId == deprCostRefRecId &&
                      transDeprCost.RefTableId           == 0;
    
            if (isPartialCorrection)
            {
                this.initCorrectedAssetSet();
    
                select
                    RCOAD,
                    BudgetRevenueCode,
                    SalesTaxCode,
                    Section,
                    AssetKind,
                    RailwayAsset,
                    RailwayFactor,
                    Movables,
                    LineNumber,
                    JournalTransRefRecId
                from transDeprCostCorr
                     order by LineNumber
                    where transDeprCostCorr.JournalTransRefRecId == deprCostCorrRefRecId &&
                          transDeprCostCorr.RefTableId           == 0;
            }
    
            while (transDeprCost.RecId || (isPartialCorrection && transDeprCostCorr.RecId))
            {
                currentHeaderCreated = false;
    
                compareResult = this.compareRegisterLines(transDeprCost, transDeprCostCorr);
    
                switch (compareResult)
                {
                    case #Less:
                        this.fillSections(transDeprCost);
                        next transDeprCost;
                        break;
                    case #More:
                        this.fillSections(transDeprCostCorr);
                        next transDeprCostCorr;
                        break;
                    case #Equal:
                        this.fillSections(transDeprCost, transDeprCostCorr);
                        next transDeprCost;
                        next transDeprCostCorr;
                        break;
                }
            }
    
            ttscommit;
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContainer</Name>
				<Source><![CDATA[
private container createContainer(TransDate             _transDate,
                                      RAssetTaxAllowanceId  _taxAllowanceId,
                                      BranchId_RU           _branchId,
                                      boolean               _movables)
    {
        Amount      netBookTotal;
        Amount      netBook;
        Amount      immovable;
        Amount      nonTaxable;
        container   mapKey = [_branchId, _taxAllowanceId, _transDate];
    
        if (sumAssets.exists(mapKey))
        {
            [netBookTotal, netBook, immovable, nonTaxable] =  sumAssets.lookup(mapKey);
        }
        else
        {
            [netBookTotal, netBook, immovable, nonTaxable] = [0, 0, 0, 0];
        }
    
        return  ['', '', '', '',
                 _transDate == DateTimeUtil::getEndOfYearDate(preferredLocale, _transDate) ? _transDate : mkDate(1, mthOfYr(_transDate), year(_transDate)),
                 netBookTotal,
                 netBook,
                 nonTaxable,
                 '',
                 0., 0.,
                 0, 0, 0, 0,
                 '', '',
                 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates record related to  header data.
    /// </summary>
    /// <param name="_header">
    ///  Register line related to header.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createHeader(RTax25RegisterTrans_AssessedDeprCost _header)
    {
        if (!currentHeaderCreated)
        {
            RTax25RegisterTrans_AssessedTotalDepr assessedTotalDepr = regQuery.addBodyRecord(0, [
                _header.RCOAD,
                _header.BudgetRevenueCode,
                _header.SalesTaxCode,
                _header.Section,
                _header.AssetKind,
                _header.RailwayAsset,
                _header.RailwayFactor,
                dateNull(),
                0.,
                0.,
                0.,
                '',
                0.,
                0.,
                0, 0, 0, 0,
                '', '',
                0]);

            refLineNumberHeader = assessedTotalDepr.LineNumber;

            currentHeaderCreated = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSections</Name>
				<Source><![CDATA[
/// <summary>
    ///  Fills single report section with data.
    /// </summary>
    /// <param name="_header">
    ///  Header record.
    /// </param>
    /// <param name="_headerCorr">
    ///  Correction journal header record. Optional.
    /// </param>
    /// <remarks>
    ///  Depending on section different method will be used to create records.
    /// </remarks>
    private void fillSections(RTax25RegisterTrans_AssessedDeprCost _header, RTax25RegisterTrans_AssessedDeprCost _headerCorr = null)
    {
        this.fillSection3(_header, _headerCorr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
/// <summary>
    ///  Initializes class variables.
    /// </summary>
    /// <param name="_registerJournalTrans">
    ///  <c>RTax25RegisterJournalTrans</c> record being calculated.
    /// </param>
    /// <param name="_batch">
    ///  Executed in batch.
    /// </param>
    /// <returns>
    ///  True if initialization succeed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///  In case of partial correction two links to <c>RTax25RegisterJournalTrans</c> record initialized, deprCostRefRecId to corrected journal and deprCostCorrRefRecId to corrective journal.
    /// </remarks>
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        boolean ret;
        RTax25RegisterJournalTable  currentJournalTable,
                                    correctedJournalTable;
        RTax25RegisterJournalTrans  correctedJournalTrans,
                                    deprCostJournalTrans;
    
        ret = super(_registerJournalTrans, _batch);
    
        standardId = RAssetParameters::standardIdDefault();
        beginningOfYear = DateTimeUtil::getStartOfYearDate(preferredLocale, dateFrom);
    
        deprCostJournalTrans = RTax25RegCalcController::findChildJournalTrans(
            RTax25RegisterType::PaymentReceipt,
            _registerJournalTrans,
            RAssetAssessedTaxRegType::DepreciatedCostCalc);
    
        deprCostRefRecId = deprCostJournalTrans.RecId;
    
        isPartialCorrection = deprCostJournalTrans.CalculationType == RTax25CalculationType::Partial;
    
        if (isPartialCorrection)
        {
            currentJournalTable = _registerJournalTrans.registerJournalTable();
    
            correctedJournalTable = RTax25RegisterJournalTable::findRecId(currentJournalTable.CorrectedRecId);
    
            correctedJournalTrans = RTax25RegisterJournalTrans::find(
                correctedJournalTable.JournalNum,
                correctedJournalTable.PeriodType,
                correctedJournalTable.PeriodNum,
                correctedJournalTable.FiscalYear,
                _registerJournalTrans.RegisterId);
    
            correctedJournalTrans = RTax25RegCalcController::findChildJournalTrans(
                RTax25RegisterType::PaymentReceipt,
                correctedJournalTrans,
                RAssetAssessedTaxRegType::DepreciatedCostCalc);
    
            deprCostRefRecId     = correctedJournalTrans.RecId;
            deprCostCorrRefRecId = deprCostJournalTrans.RecId;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareRegisterLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determines which record is greater on key.
    /// </summary>
    /// <param name="_firstRegTrans">
    ///  First <c>RTax25RegisterTrans_AssessedDeprCost</c> record.
    /// </param>
    /// <param name="_secondRegTrans">
    ///  Second <c>RTax25RegisterTrans_AssessedDeprCost</c> record.
    /// </param>
    /// <returns>
    ///  More(1) value if first record is greater; Less(-1) value if second record is greater; Equal(0) value if values are equal.
    /// </returns>
    /// <remarks>
    ///  In case then one cursor at EOF, its treated like it's gone to eternity.
    /// </remarks>
    private int compareRegisterLines(
        RTax25RegisterTrans_AssessedDeprCost    _firstRegTrans,
        RTax25RegisterTrans_AssessedDeprCost    _secondRegTrans)
    {
        if (!_firstRegTrans.RecId)
        {
            return #More;
        }
    
        if (!_secondRegTrans.RecId)
        {
            return #Less;
        }

        if (_firstRegTrans.Section > _secondRegTrans.Section ||
                (_firstRegTrans.Section == _secondRegTrans.Section &&
                (_firstRegTrans.AssetKind > _secondRegTrans.AssetKind ||
                    (_firstRegTrans.AssetKind == _secondRegTrans.AssetKind &&
                    (_firstRegTrans.Movables > _secondRegTrans.Movables ||
                        (_firstRegTrans.Movables == _secondRegTrans.Movables &&
                        (_firstRegTrans.RCOAD > _secondRegTrans.RCOAD ||
                            (_firstRegTrans.RCOAD == _secondRegTrans.RCOAD &&
                            (_firstRegTrans.BudgetRevenueCode > _secondRegTrans.BudgetRevenueCode ||
                                (_firstRegTrans.BudgetRevenueCode == _secondRegTrans.BudgetRevenueCode &&
                                (_firstRegTrans.SalesTaxCode > _secondRegTrans.SalesTaxCode ||
                                    (_firstRegTrans.SalesTaxCode == _secondRegTrans.SalesTaxCode &&
                                    (_firstRegTrans.RailwayAsset > _secondRegTrans.RailwayAsset ||
                                        (_firstRegTrans.RailwayAsset == _secondRegTrans.RailwayAsset &&
                                            _firstRegTrans.RailwayFactor > _secondRegTrans.RailwayFactor))))))))))))))
        {
            return #More;
        }
        else
        if (_firstRegTrans.Section < _secondRegTrans.Section ||
                (_firstRegTrans.Section == _secondRegTrans.Section &&
                (_firstRegTrans.AssetKind < _secondRegTrans.AssetKind ||
                    (_firstRegTrans.AssetKind == _secondRegTrans.AssetKind &&
                    (_firstRegTrans.Movables < _secondRegTrans.Movables ||
                        (_firstRegTrans.Movables == _secondRegTrans.Movables &&
                        (_firstRegTrans.RCOAD < _secondRegTrans.RCOAD ||
                            (_firstRegTrans.RCOAD == _secondRegTrans.RCOAD &&
                            (_firstRegTrans.BudgetRevenueCode < _secondRegTrans.BudgetRevenueCode ||
                                (_firstRegTrans.BudgetRevenueCode == _secondRegTrans.BudgetRevenueCode &&
                                (_firstRegTrans.SalesTaxCode < _secondRegTrans.SalesTaxCode ||
                                    (_firstRegTrans.SalesTaxCode == _secondRegTrans.SalesTaxCode &&
                                    (_firstRegTrans.RailwayAsset < _secondRegTrans.RailwayAsset ||
                                        (_firstRegTrans.RailwayAsset == _secondRegTrans.RailwayAsset &&
                                            _firstRegTrans.RailwayFactor < _secondRegTrans.RailwayFactor))))))))))))))
        {
            return #Less;
        }
        else
        {
            return #Equal;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSubHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates container for line related to sub header (header for branch or tax allowance).
    /// </summary>
    /// <param name="_okato">
    ///  OKATO_RU value.
    /// </param>
    /// <param name="_pobrcC">
    ///  KBK value.
    /// </param>
    /// <param name="_taxCode">
    ///  Tax code.
    /// </param>
    /// <param name="_section">
    ///  Section of register.
    /// </param>
    /// <param name="_movables">
    ///  Is movables.
    /// </param>
    /// <returns>
    ///  Container with register values.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container createSubHeader(
        OKATO_RU                              _okato    = "",
        PaymentOrderBudgetReceiptClassCode_RU _pobrcC   = "",
        TaxCode                               _taxCode  = "",
        RAssetSection                         _section  = "",
        boolean                               _movables = false)
    {
        return [_okato, _pobrcC, _taxCode, _section, dateNull(), 0., 0., 0., '', 0., 0., 0, 0, 0, 0, '', '',0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection2</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Fills section 2 with data for selected header records
    /// </summary>
    /// <param name="_header">
    ///  Register line related to header.
    /// </param>
    /// <param name="_headerCorr">
    ///  Register line related to header from correction journal.
    /// </param>
    /// <remarks>
    ///  First, values summarized into map, and then added to journal.
    /// </remarks>
    private void fillSection2(
        RTax25RegisterTrans_AssessedDeprCost _header,
        RTax25RegisterTrans_AssessedDeprCost _headerCorr)
    {
        sumAssets = new Map(Types::Container, Types::Container);
    
        this.fillSection2Map(_header);
    
        if (_headerCorr)
        {
            this.fillSection2Map(_headerCorr);
        }
    
        this.addAssets(_header);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection2Map</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Fills map for summarizing values with data.
    /// </summary>
    /// <param name="_header">
    ///  Register line related to header.
    /// </param>
    /// <remarks>
    ///  If fixed asset was corrected, its skipped for original journal.
    /// </remarks>
    private void fillSection2Map(RTax25RegisterTrans_AssessedDeprCost _header)
    {
        RAssetTable                             rAssetTable;
    
        RTax25RegisterTrans_AssessedDeprCost    assetDeprCost;
    
        while select Period, NetBookValue, NetBookValueTotal, RefTableId, RefRecId, JournalTransRefRecId from assetDeprCost
            order by LineNumber
            where assetDeprCost.JournalTransRefRecId == _header.JournalTransRefRecId &&
                  assetDeprCost.LineNumber           >  _header.LineNumber
        {
            if (! assetDeprCost.RefTableId)
                break;
    
            if (this.skipFixedAsset(assetDeprCost))
            {
                continue;
            }
    
            rAssetTable = RAssetTable::findrec(assetDeprCost.RefRecId);
    
            if (assetDeprCost.Period)
            {
                this.addPeriod(rAssetTable, assetDeprCost.Period, assetDeprCost);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection3</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Fills report with data for section 3.
    /// </summary>
    /// <param name="_header">
    ///  Register line related to header.
    /// </param>
    /// <param name="_headerCorr">
    ///  Register line related to header from correction journal.
    /// </param>
    private void fillSection3(
        RTax25RegisterTrans_AssessedDeprCost _header,
        RTax25RegisterTrans_AssessedDeprCost _headerCorr)
    {
        this.fillSection3ForHeader(_header);

        if (_headerCorr)
        {
            this.fillSection3ForHeader(_headerCorr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection3ForHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Fills Section 3 with data for selected header record.
    /// </summary>
    /// <param name="_header">
    ///  Register line related to header.
    /// </param>
    /// <remarks>
    ///  If fixed asset was corrected, its skipped for original journal.
    /// </remarks>
    private void fillSection3ForHeader(RTax25RegisterTrans_AssessedDeprCost _header)
    {
        RAssetTable                             rAssetTable;
        RTax25RegisterTrans_AssessedDeprCost    assetDeprCost;
        RTax25RegisterLineNum64 refLineNumberAsset;
    
        while select Period, CadastralValue, CadastralValueTotal, CostChangePeriod, CostChangeFactor, OwnedShare, OwnershipPeriod, OwnershipFactor,
            NetBookValue, NetBookValueTotal, RefTableId, RefRecId, JournalTransRefRecId, BranchId, TaxAuthority from assetDeprCost
            order by LineNumber
            where assetDeprCost.JournalTransRefRecId == _header.JournalTransRefRecId &&
                  assetDeprCost.LineNumber           >  _header.LineNumber
        {
            if (! assetDeprCost.RefTableId)
                break;
    
            if (this.skipFixedAsset(assetDeprCost))
            {
                continue;
            }
    
            this.createHeader(_header);
    
            rAssetTable = RAssetTable::findrec(assetDeprCost.RefRecId);
    
            if (assetDeprCost.Period)
            {
                this.addPeriodToSectionThree(rAssetTable, assetDeprCost.Period, assetDeprCost, _header.Movables, refLineNumberAsset);
            }
            else
            {
                refLineNumberAsset = this.addAssetsToSectionThree(rAssetTable, assetDeprCost.BranchId, assetDeprCost.TaxAuthority);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCorrectedAssetSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initializes set, which contains record ids of fixed assets, which were corrected.
    /// </summary>
    private void initCorrectedAssetSet()
    {
        ;
        correctedAssetSet = new Set(Types::Int64);
    
        while select RefRecId from transDeprCostCorr
            group by RefRecId
            where transDeprCostCorr.JournalTransRefRecId == deprCostCorrRefRecId &&
                  transDeprCostCorr.RefRecId             !=0
    
        {
            correctedAssetSet.add(transDeprCostCorr.RefRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipFixedAsset</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determines, if fixed asset must be skipped for now, because it was corrected.
    /// </summary>
    /// <param name="_line">
    ///  Current register line.
    /// </param>
    /// <returns>
    ///  True, if fixed asset must be skipped; Otherwise, false.
    /// </returns>
    /// <remarks>
    ///  For corrective journal, all lines must be processed.
    /// </remarks>
    private boolean skipFixedAsset(RTax25RegisterTrans_AssessedDeprCost _line)
    {
        //if fixed asset in corrective journal it must be processed anyway
        if (_line.JournalTransRefRecId == deprCostCorrRefRecId)
        {
            return false;
        }
        return correctedAssetSet && correctedAssetSet.in(_line.RefRecId);
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>