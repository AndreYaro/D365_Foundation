<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventUpd_Arrived</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventUpd_Arrived</c> class is used when the system receives items through an arrival
/// journal.
/// </summary>
/// <remarks>
/// When using the Warehouse Management System and pallet transport, the inventory transaction will get
/// the status as <c>Arrived</c> .See the <c>WMSJournalCheckPostReception.checkQuantities</c> method
/// for an example of how this class is used.
/// </remarks>
public class InventUpd_Arrived extends InventUpdate
{
    // new parameters

    InventQtyArrived        arrived;
    DateInventArrived       dateInventArrived;

    //for receipts inventDimCriteria is the dim that the transaction is going to get
    InventDim               inventDimCriteria;
    InventDimParm           inventDimParm;

    //used for receipts to control which transactions are selected
    InventDim               inventDimMoreCriteria;
    InventDimParm           inventDimParmMore;

    // internal init
    InventQty               estimated;
    UnitQty                 estimatedUnit;

    // update result
    InventQtyArrived        updArrived;

    PdsCWInventQty          cwArrived;
    PdsCWInventQty          cwUpdArrived;
    PdsCWInventQty          cwEstimated;

    InventQty               inventQtyAdjustment;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check()
    {
        boolean ok = true;

        if (arrived && ! movement.checkDimPhysical(arrived, inventDimCriteria, false, true))
        {
            ok = false;
        }

        if (! this.checkUpdateMovement(dateInventArrived))
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateMovement</Name>
				<Source><![CDATA[
    protected boolean checkUpdateMovement(TransDate transDate)
    {
        boolean ok = true;

        if (!movement.checkUpdateStandard(transDate))
        {
            ok = false;
        }

        if (!movement.checkUpdateArrived(this))
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUpdate</Name>
				<Source><![CDATA[
    protected void initUpdate()
    {
        super();

        estimated       = 0;
        estimatedUnit   = 0;

        cwEstimated     = 0;

        if (movement.pdsCWItem())
        {
            if (cwArrived > 0)
            {
                if (movement.transIdSum().pdsCWOrdered() < cwArrived)
                {
                    cwEstimated     = cwArrived - movement.transIdSum().pdsCWOrdered();
                    // Estimate additional quantity based on nominal conversion. The discrepancy between
                    // the actual and the nominal values will be added to adjustment quantity.
                    estimated       = PdsCatchWeight::inventQty(movement.itemId(), cwEstimated);
                    estimatedUnit   = this.calcEstimatedUnit(estimated);
                }

                inventQtyAdjustment = this.pdsCalculateInventoryQuantityAdjustment(
                    movement.itemId(),
                    movement.transIdSum().pdsCWOrdered() + cwEstimated,
                    movement.transIdSum().ordered() + estimated,
                    cwArrived,
                    arrived);
            }
            else
            {
                inventQtyAdjustment = this.pdsCalculateInventoryQuantityAdjustment(
                    movement.itemId(),
                    movement.transIdSum().pdsCWArrived(),
                    movement.transIdSum().arrived(),
                    -cwArrived,
                    -arrived);

                // We still need to undo arrival for the quantity that will be adjusted afterwards
                arrived += inventQtyAdjustment;
            }
        }
        else
        {
            if (arrived > 0)
            {
                if (movement.transIdSum().ordered() < arrived)
                {
                    estimated       = arrived - movement.transIdSum().ordered();
                    estimatedUnit   = this.calcEstimatedUnit(estimated);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArrived</Name>
				<Source><![CDATA[
    public InventQtyArrived parmArrived(InventQtyArrived _arrived = arrived)
    {
        arrived = _arrived;
        return arrived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateInventArrived</Name>
				<Source><![CDATA[
    protected DateInventArrived parmDateInventArrived(DateInventArrived _dateInventArrived = dateInventArrived)
    {
        dateInventArrived = _dateInventArrived;
        return dateInventArrived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimCriteria</Name>
				<Source><![CDATA[
    public InventDim parmInventDimCriteria(InventDim _inventDimCriteria  = inventDimCriteria)
    {
        inventDimCriteria = _inventDimCriteria;
        return inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimMoreCriteria</Name>
				<Source><![CDATA[
    //InventDimMoreCriteria is used when selecting receipt transactions
    protected InventDim parmInventDimMoreCriteria(InventDim _inventDimMoreCriteria = inventDimMoreCriteria)
    {
        inventDimMoreCriteria = _inventDimMoreCriteria;

        return inventDimMoreCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimMoreParm</Name>
				<Source><![CDATA[
    //InventDimParmMore is used when selecting receipt transactions
    protected InventDimParm parmInventDimMoreParm(InventDimParm _inventDimParmMore = inventDimParmMore)
    {
        inventDimParmMore = _inventDimParmMore;

        return inventDimParmMore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm</Name>
				<Source><![CDATA[
    protected InventDimParm parmInventDimParm(InventDimParm _inventDimParm = inventDimParm)
    {
        inventDimParm = _inventDimParm;
        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWArrived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the cwArrived parameter.
    /// </summary>
    /// <param name="_cwArrived">
    /// Value to be set.
    /// </param>
    /// <returns>
    /// The cwArrived parameter
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public PdsCWInventQty parmPdsCWArrived(PdsCWInventQty _cwArrived)
    /// </syntax>
    /// </remarks>
    public PdsCWInventQty parmPdsCWArrived(PdsCWInventQty _cwArrived = cwArrived)
    {
        cwArrived = _cwArrived;
        return cwArrived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateArrivedLess</Name>
				<Source><![CDATA[
    protected void updateArrivedLess()
    {
        InventTrans             inventTrans;
        InventDim               inventDim;
        InventQty               addArrived = -arrived;

        PdsCWInventQty          cwAddArrived = -cwArrived;

        if (inventDimCriteria.InventDimId && inventDimParm.isAllFlagYes())
        {
            select forupdate inventTrans
                order by InventDimId desc
                where inventTrans.InventTransOrigin     == movement.inventTransOriginId()
                   && inventTrans.TransChildType        == movement.transChildType()
                   && inventTrans.TransChildRefId       == movement.transChildRefId()
                   && inventTrans.StatusReceipt         == StatusReceipt::Arrived
                   && inventTrans.StatusIssue           == StatusIssue::None
                   && inventTrans.InventDimId           == inventDimCriteria.InventDimId;
        }
        else
        {
            select forupdate forceplaceholders inventTrans
                order by InventDimId desc
                where inventTrans.InventTransOrigin     == movement.inventTransOriginId()
                   && inventTrans.TransChildType        == movement.transChildType()
                   && inventTrans.TransChildRefId       == movement.transChildRefId()
                   && inventTrans.StatusReceipt         == StatusReceipt::Arrived
                   && inventTrans.StatusIssue           == StatusIssue::None
                #InventDimExistsJoin(InventTrans.inventDimId,InventDim,inventDimCriteria,InventDimParm);
        }

        while (inventTrans)
        {
            if (addArrived < inventTrans.Qty)
            {
                inventTrans.updateSplit(addArrived
                            , cwAddArrived
                            );
            }

            if (inventTrans.InventDimId != movement.inventDimId())
            {
                InventOnHandQty inventOnHandQty = InventOnHandQty::newPhysicalInvent(movement,inventTrans.inventDim());
                inventOnHandQty.addDepreciateOrderedCheck(allowNegativePhysical);
            }

            addArrived  -= inventTrans.Qty;
            updArrived  -= inventTrans.Qty;

            cwAddArrived -= inventTrans.PdsCWQty;
            cwUpdArrived -= inventTrans.PdsCWQty;

            movement.transIdSum().setInventTransStatus(inventTrans,StatusReceipt::Ordered,StatusIssue::None);

            inventTrans.InventDimId = movement.inventDimId();
            inventTrans.update();

            inventTrans.updateSumUp();

            if (!addArrived)
            {
                break;
            }
            next inventTrans;
        }

        if (addArrived)
        {
            throw error(strFmt("@SYS15535",addArrived));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateArrivedMore</Name>
				<Source><![CDATA[
    protected void updateArrivedMore()
    {
        InventTrans     inventTrans;
        InventQty       addArrived = arrived;

        PdsCWInventQty  cwAddArrived = cwArrived;
        // <GEERU>
        boolean                 countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        InventDim inventDimTo = InventDim::findOrCreate(inventDimCriteria);

        InventItemOrderSetupMap inventItemOrderSetupMap = movement.inventItemOrderSetupMap(inventDimTo.InventDimId);

        if (!inventItemOrderSetupMap.checkInventLocationId(inventDimTo.InventLocationId, !movement.canBeOnAllInventLocations())
        ||  !inventItemOrderSetupMap.checkInventSiteId(inventDimTo.InventSiteId, !movement.canBeOnAllInventSites()))
        {
            throw error("@SYS18447");
        }

        this.initInventTransToReceiveList(
            StatusReceipt::Ordered,
            StatusReceipt::Ordered,
            inventDimMoreCriteria.InventDimId,
            inventDimMoreCriteria,
            inventDimParmMore,
            movement.transChildType(),
            movement.transChildRefId(),
            addArrived);

        while (this.getNextInventTransToReceive(inventTrans))
        {
            this.validateInventTransForArrivedMoreUpdate(inventTrans, addArrived, cwAddArrived);
            inventTrans.update();

            addArrived  -= inventTrans.Qty;
            cwAddArrived -= inventTrans.PdsCWQty;

            if (!addArrived)
            {
                break;
            }
        }

        if (addArrived)
        {
            throw error(strFmt("@SYS53726", addArrived));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventTransForArrivedMoreUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the inventory transaction before updating for arrived more.
    /// </summary>
    /// <param name = "_inventTrans">The inventory transaction record.</param>
    /// <param name = "_addArrived">The remaining inventory quantity.</param>
    /// <param name = "_cwAddArrived">The remaining catch weight quantity.</param>
    protected void validateInventTransForArrivedMoreUpdate(InventTrans    _inventTrans,
                                                           InventQty      _addArrived,
                                                           PdsCWInventQty _cwAddArrived)
    {
        if (!movement.inventTable().checkRefInventTrans(_inventTrans))
        {
            throw error("@SYS18447");
        }

        InventDim inventDimFrom = _inventTrans.inventDim();
        InventDim inventDimTo   = InventDim::findOrCreate(inventDimCriteria);

        if (!this.checkInventDimChangeOnInventTransUpdate(inventDimFrom, inventDimTo))
        {
            throw error("@SYS18447");
        }

        if (_inventTrans.Qty > _addArrived)
        {
            _inventTrans.updateSplit(_addArrived, _cwAddArrived);
        }

        this.updateDimReserveChange(inventDimTo, inventDimFrom, _inventTrans.Qty, false, 0, _inventTrans.PdsCWQty);

        _inventTrans.InventDimId = inventDimTo.InventDimId;

        movement.transIdSum().setInventTransStatus(_inventTrans, StatusReceipt::Arrived, StatusIssue::None);

        if (!movement.isStorageDimensionOnlyTransfer())
        {
            movement.updateSerialNumReceipt(_inventTrans, _inventTrans.orig());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    public void updateNow()
    {
        using (var telemetryTask = new InventUpdateInstrumentationTask(this))
        {
			ttsbegin;

			if (arrived)
			{
				if (!this.checkUpdateMovement(dateInventArrived))
				{
					throw error("@SYS18447");
				}

				if (arrived > 0)
				{
					if (estimated
						|| cwEstimated
						)
					{
						this.updateEstimated(estimated,estimatedUnit
							, cwEstimated
							);
					}

					this.pdsAdjustInventoryQuantity(inventQtyAdjustment);

					this.updateArrivedMore();
				}
				else
				{
					this.updateArrivedLess();

					this.pdsAdjustInventoryQuantity(inventQtyAdjustment);
				}
			}

			ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    static public InventUpd_Arrived newParameters(
        InventMovement        _movement,
        InventDim             _inventDimCriteria,
        InventDimParm         _inventDimParm,
        InventQtyArrived      _arrived,
        InventDim             _inventDimMoreCriteria = null,//used to control selection of receipt transactions
        InventDimParm         _inventDimParmMore = null     //used to control selection of receipt transactions
        , PdsCWInventQty        _cwArrived = 0
        , DateInventArrived     _dateInventArrived = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
        )
    {
        InventUpd_Arrived inventUpd_Arrived = new InventUpd_Arrived(_movement);

        inventUpd_Arrived.setParmAllowDefault();
        inventUpd_Arrived.parmInventDimCriteria(_inventDimCriteria);
        inventUpd_Arrived.parmInventDimParm(_inventDimParm);
        inventUpd_Arrived.parmInventDimMoreCriteria(_inventDimMoreCriteria);
        inventUpd_Arrived.parmInventDimMoreParm(_inventDimParmMore);
        inventUpd_Arrived.parmArrived(_arrived);
        inventUpd_Arrived.parmDateInventArrived(_dateInventArrived);

        inventUpd_Arrived.parmPdsCWArrived(_cwArrived);

        inventUpd_Arrived.initUpdate();

        return inventUpd_Arrived;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>