<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationWorkflowSubmissionCollectionLimitFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Invoice collection filter that applies a set limit to the number of invoices collected for automatic
/// workflow submission.
/// </summary>
internal final class VendInvoiceAutomationWorkflowSubmissionCollectionLimitFilter implements VendInvoiceAutomationIWorkflowSubmissionCollectionFilter
{
    private VendInvoiceAutomationIWorkflowSubmissionCollectionLimitCalculator filterLimitCalculator;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLimitCalculator</Name>
				<Source><![CDATA[
    internal static VendInvoiceAutomationWorkflowSubmissionCollectionLimitFilter newFromLimitCalculator(
        VendInvoiceAutomationIWorkflowSubmissionCollectionLimitCalculator _filterLimitCalculator)
    {
        VendInvoiceAutomationWorkflowSubmissionCollectionLimitFilter limitFilter =
            new VendInvoiceAutomationWorkflowSubmissionCollectionLimitFilter();

        limitFilter.filterLimitCalculator = _filterLimitCalculator;

        return limitFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyVendorInvoiceFilter</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public VendInvoiceAutomationInvoiceTmp applyVendorInvoiceFilter(VendInvoiceAutomationInvoiceTmp _invoicesForSubmission)
    {
        VendInvoiceAutomationInvoiceTmp allowedInvoicesForWorkflowSubmission;
        VendInvoiceAutomationInstrumentationWorkflowSubmissionActivities instrumentationWorkflowSubmissionActivities =
            VendInvoiceAutomationInstrumentationWorkflowSubmissionActivities::createFromLoggerName(
            classStr(VendInvoiceAutomationWorkflowSubmissionCollectionLimitFilter));

        int numberOfInvoicesCollected = 0;
        
        using (var activityContext = instrumentationWorkflowSubmissionActivities.maxCollectionSubmissionContext())
        {
            int maximumAllowedNumberOfInvoicesCollected = filterLimitCalculator.calculateMaximumNumberOfInvoicesToCollect();

            while select _invoicesForSubmission
            order by _invoicesForSubmission.VendInvoiceTransDate
            {
                if (numberOfInvoicesCollected >= maximumAllowedNumberOfInvoicesCollected)
                {
                    // If the maximum number of invoices has been collected, stop collecting new invoices
                    break;
                }

                allowedInvoicesForWorkflowSubmission.VendInvoiceRecId = _invoicesForSubmission.VendInvoiceRecId;
                allowedInvoicesForWorkflowSubmission.VendInvoiceDataAreaId = _invoicesForSubmission.VendInvoiceDataAreaId;
                allowedInvoicesForWorkflowSubmission.insert();

                numberOfInvoicesCollected++;
            }

            VendInvoiceAutomationInstrumentationPerformanceProperties performanceProperties = VendInvoiceAutomationInstrumentationPerformanceProperties::constructFromActivityContext(activityContext);

            performanceProperties.throttlingLimitMetProperty(numberOfInvoicesCollected, maximumAllowedNumberOfInvoicesCollected);
        }

        return allowedInvoicesForWorkflowSubmission;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>