<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqActionApply</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqActionApply</c> class applies an action of a <c>ReqTrans</c> record.
/// </summary>
class ReqActionApply extends RunBase
{
    Set                 reqTransApplied;

    NoYes               deleteEmptyPurchase;
    NoYes               deleteEmptyTransfer;
    NoYes               reestimateProduction;
    NoYes               rescheduleProduction;
    NoYes               applyToApprovedPlannedOrders;
    ReqPOStatus         newReqPOStatus;

    DialogRunbase       dialog;
    DialogField         dialogDeleteEmptyPurchase;
    DialogField         dialogDeleteEmptyTransfer;
    DialogField         dialogReestimateProduction;
    DialogField         dialogRescheduleProduction;
    DialogField         dialogApplyToApprovedPlannedOrders;
    DialogField         dialogChangePlannedOrderStatus;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        deleteEmptyPurchase,
        deleteEmptyTransfer,
        reestimateProduction,
        rescheduleProduction,
        applyToApprovedPlannedOrders,
        newReqPOStatus
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the action of the <c>ReqTrans</c> record and resets the action message.
    /// </summary>
    /// <param name="_reqTrans">
    /// The transaction to apply the action for.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Apply for a the record type is not supported.
    /// </exception>
    protected void applyAction(ReqTrans _reqTrans)
    {
        ReqTrans reqTransDerived;

        if (!_reqTrans.RecId || _reqTrans.ActionMarked == NoYes::No)
        {
            // This can happen when applying all actions since some issues might have been recreated
            // as part of applying the action for their parent receipt
            return;
        }

        setPrefix(strFmt("@SYS76498", _reqTrans.RefType, _reqTrans.RefId));

        if (_reqTrans.ActionDays != 0 && _reqTrans.ActionDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            throw error(strFmt("@GLS3800059", _reqTrans.ActionType, _reqTrans.ActionDate));
        }

        if (_reqTrans.Direction == InventDirection::Receipt)
        {
            // Apply actions for the receipt
            reqTransDerived = _reqTrans.selectDerived(true);
            while (reqTransDerived.RecId)
            {
                if (ReqRefTypeDescriptor::newFromReqRefType(reqTransDerived.RefType).isReqActionApplicable())
                {
                    ReqActionApplyToOrder reqActionApplyToOrderDerived = ReqActionApplyToOrder::newFromReqTrans(reqTransDerived, this);
                    reqActionApplyToOrderDerived.applyActionToReferencedOrder();
                }
                else
                {
                    // Mark that the record has been handled.
                    this.appliedAction(reqTransDerived);
                }

                next reqTransDerived;
            }

            ReqActionApplyToOrder reqActionApplyToOrder = ReqActionApplyToOrder::newFromReqTrans(_reqTrans, this);
            reqActionApplyToOrder.applyActionToReferencedOrder();
            // Need to re-read since applying might have changed it
            _reqTrans.reread();
        }

        this.appliedAction(_reqTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>appliedAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ReqTrans</c> record and adds to the set of records on which the action has been applied.
    /// </summary>
    /// <param name = "_reqTrans">A <c>ReqTrans</c> record.</param>
    /// <param name = "_reqTransApplied">A <c>Set</c>.</param>
    protected void appliedAction(ReqTrans _reqTrans)
    {
        reqTransApplied.add(_reqTrans.RecId);

        // Remove the action from the transaction
        this.resetReqTransAction(_reqTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyActionForReqTransRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the action for a <c>ReqTrans</c> record and its derivatives.
    /// </summary>
    /// <param name="_reqTransRecId">
    /// The record identifier of the transaction to apply the action for.
    /// </param>
    /// <returns>
    /// A <c>Set</c> containing the record identifiers of the transactions for which actions have been applied.
    /// </returns>
    public Set applyActionForReqTransRecId(RefRecId _reqTransRecId)
    {
        this.applyAction(ReqTrans::findRecId(_reqTransRecId, true));
        
        return reqTransApplied;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        dialog.addGroup("@SYS9664");
        dialogDeleteEmptyPurchase = dialog.addFieldValue(enumStr(NoYes),deleteEmptyPurchase, "@GLS3800100");

        dialog.addGroup("@SYS78296");
        dialogDeleteEmptyTransfer = dialog.addFieldValue(enumStr(NoYes),deleteEmptyTransfer, "@GLS3800101");

        dialog.addGroup("@SYS9747");
        dialogReestimateProduction = dialog.addFieldValue(enumStr(NoYes),reestimateProduction, "@SYS84944");
        dialogRescheduleProduction = dialog.addFieldValue(enumStr(NoYes),rescheduleProduction, "@SYS69944");

        dialog.addGroup("@SYS53282");
        dialogApplyToApprovedPlannedOrders = dialog.addFieldValue(enumStr(NoYes),applyToApprovedPlannedOrders, "@GLS3800102");
        dialogChangePlannedOrderStatus = dialog.addFieldValue(enumStr(ReqPOStatus), newReqPOStatus, "@GLS3800038");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        deleteEmptyPurchase = dialogDeleteEmptyPurchase.value();
        deleteEmptyTransfer = dialogDeleteEmptyTransfer.value();

        reestimateProduction = dialogReestimateProduction.value();
        rescheduleProduction = dialogRescheduleProduction.value();

        applyToApprovedPlannedOrders = dialogApplyToApprovedPlannedOrders.value();
        newReqPOStatus = dialogChangePlannedOrderStatus.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        deleteEmptyPurchase = NoYes::No;
        deleteEmptyTransfer = NoYes::No;

        reestimateProduction = NoYes::Yes;
        rescheduleProduction = NoYes::Yes;

        applyToApprovedPlannedOrders = NoYes::No;
        newReqPOStatus = ReqPOStatus::Administered;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        reqTransApplied = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApplyToApprovedPlannedOrders</Name>
				<Source><![CDATA[
    public NoYesId parmApplyToApprovedPlannedOrders(NoYesId _applyToApprovedPlannedOrders = applyToApprovedPlannedOrders)
    {
        applyToApprovedPlannedOrders = _applyToApprovedPlannedOrders;

        return applyToApprovedPlannedOrders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteEmptyPurchase</Name>
				<Source><![CDATA[
    public NoYesId parmDeleteEmptyPurchase(NoYesId _deleteEmptyPurchase = deleteEmptyPurchase)
    {
        deleteEmptyPurchase = _deleteEmptyPurchase;

        return deleteEmptyPurchase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteEmptyTransfer</Name>
				<Source><![CDATA[
    public NoYesId parmDeleteEmptyTransfer(NoYesId _deleteEmptyTransfer = deleteEmptyTransfer)
    {
        deleteEmptyTransfer = _deleteEmptyTransfer;

        return deleteEmptyTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewReqPOStatus</Name>
				<Source><![CDATA[
    public ReqPOStatus parmNewReqPOStatus(ReqPOStatus _newReqPOStatus = newReqPOStatus)
    {
        newReqPOStatus = _newReqPOStatus;

        return newReqPOStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReestimateProduction</Name>
				<Source><![CDATA[
    public NoYesId parmReestimateProduction(NoYesId _reestimateProduction = reestimateProduction)
    {
        reestimateProduction = _reestimateProduction;

        return reestimateProduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRescheduleProduction</Name>
				<Source><![CDATA[
    public NoYesId parmRescheduleProduction(NoYesId _rescheduleProduction = rescheduleProduction)
    {
        rescheduleProduction = _rescheduleProduction;

        return rescheduleProduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetReqTransAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the action settings on a transaction.
    /// </summary>
    /// <param name="_reqTrans">
    /// The transaction that should be reset.
    /// </param>
    protected void resetReqTransAction(ReqTrans _reqTrans)
    {
        if (!_reqTrans.RecId)
        {
            return;
        }

        // Reset the actions
        _reqTrans.ActionType = ActionType::None;
        _reqTrans.ActionDate = dateNull();
        _reqTrans.ActionDays = 0;
        _reqTrans.ActionQtyAdd = 0;
        _reqTrans.ActionMarked = NoYes::No;
        _reqTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqActionApply construct()
    {
        return new ReqActionApply();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS3800037";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ReqActionApply reqActionApply = ReqActionApply::construct();
        ReqTrans       reqTrans;

        if (_args && _args.dataset() == tableNum(ReqTrans))
        {
            reqTrans = _args.record();
        }

        if (! reqActionApply.prompt())
        {
            return;
        }

        ttsbegin;

        reqActionApply.applyAction(reqTrans);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>