<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceMsgExporter_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Selects the pending messages and send them to the webservices.
/// </summary>
class EInvoiceMsgExporter_MX extends RunBaseBatch implements BatchRetryable
{
    boolean messageProcessedWithError;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the messages to be processed.
    /// </summary>
    /// <exception cref="Exception::Error">Could not send the EInvoice.</exception>
    protected void execute()
    {
        setprefix("@SYS4081904");

        this.sendMessages(EInvoiceCFDIMessageType_MX::Submit);
        this.sendMessages(EInvoiceCFDIMessageType_MX::Cancel);
        this.sendMessages(EInvoiceCFDIMessageType_MX::CancelRequest);

        if (messageProcessedWithError)
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessagesToBeSent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of messages to be send.
    /// </summary>
    /// <returns>The EInvoiceJour_MX records to be sent.</returns>
    protected EInvoiceJour_MX getMessagesToBeSent(EInvoiceCFDIMessageType_MX _messageType = EInvoiceCFDIMessageType_MX::Submit)
    {
        EInvoiceJour_MX eInvoiceJour = this.getMessagesToBeSentOrig(_messageType);

        if (BusinessDocumentParameters::isFeatureEnabled([EInvoicingFeaturesForService::MX00010]))
        {
            EInvoiceJour_MX eInvoiceJourTmp;
            eInvoiceJourTmp.setTempDB();

            while (eInvoiceJour.RecId)
            {
                if (!BusinessDocumentParameters::isServiceProcessingEnabled(eInvoiceJour, EInvoicingFeaturesForService::MX00010))
                {
                    eInvoiceJourTmp.RefRecId = eInvoiceJour.RecId;
                    eInvoiceJourTmp.doInsert();
                }

                next eInvoiceJour;
            }

            select eInvoiceJour
                exists join eInvoiceJourTmp
                    where eInvoiceJourTmp.RefRecId == eInvoiceJour.RecId;
        }

        return eInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessagesToBeSentOrig</Name>
				<Source><![CDATA[
    private EInvoiceJour_MX getMessagesToBeSentOrig(EInvoiceCFDIMessageType_MX _messageType)
    {
        EInvoiceJour_MX eInvoiceJour;

        select eInvoiceJour
            where eInvoiceJour.CFDIMessageStatus == EInvoiceCFDIMessageStatus_MX::Waiting
               && eInvoiceJour.CFDIMessageType == _messageType
               && eInvoiceJour.CFDIDocType != CFDIDocType_MX::Withholding;

        return eInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageSender</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>EInvoiceMsgBase_MX</c> object.
    /// </summary>
    /// <returns>A <c>EInvoiceMsgBase_MX</c> object.</returns>
    protected EInvoiceMsgBase_MX getMessageSender()
    {
        return EInvoiceMsgBase_MX::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (this.validateRun())
        {
            this.execute();
        }
        else
        {
            Box::stop("@Mexico:CFDI_ExportImportProcess_Fail");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendMessages</Name>
				<Source><![CDATA[
    private void sendMessages(EInvoiceCFDIMessageType_MX _messageType)
    {
        EInvoiceJour_MX messages = this.getMessagesToBeSent(_messageType);
        EInvoiceMsgBase_MX msgSender = this.getMessageSender();
        msgSender.parmMessageType(_messageType);

        try
        {
            msgSender.send(messages);
        }
        catch (Exception::CLRError)
        {
            throw error(AifUtil::getClrErrorMessage());
        }
        catch
        {
            messageProcessedWithError = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks data after serialization.
    /// </summary>
    /// <param name="packedClass">A container with packed data.</param>
    /// <returns><c>true</c> if data was successfully unpacked; <c>false</c> otherwise.</returns>
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the parameters before run the batch. Shows a warning message for every failure.
    /// </summary>
    /// <returns>
    ///     A boolean indicating whether the validation has succeeded or not.
    /// </returns>
    protected boolean validateRun()
    {
        boolean ret = true;

        if (!EinvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
        {
            ret = checkFailed("@SYS4081906");
        }

        EInvoiceCFDIParameters_MX params = EinvoiceCFDIParameters_MX::find();

        if (!EInvoiceCFDIWebServiceSetup_MX::exist(params.PACAccount, params.CFDIEnvironment, EinvoiceCFDIWebService_MX::Send))
        {
            ret = checkFailed("@Mexico:CFDI_ExportImportProcess_NoSendWS");
        }

        if (!EInvoiceCFDIWebServiceSetup_MX::exist(params.PACAccount, params.CFDIEnvironment, EinvoiceCFDIWebService_MX::Cancel))
        {
            ret = checkFailed("@Mexico:CFDI_ExportImportProcess_NoCancelWS");
        }

        if (!EInvoiceCFDIWebServiceSetup_MX::exist(params.PACAccount,params.CFDIEnvironment,EinvoiceCFDIWebService_MX::CancelRequest))
        {
            ret = checkFailed(strfmt("@SYS4081905","@MexicoCFDI:CancelRequest"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>EInvoiceMsgExporter</c> object.
    /// </summary>
    /// <returns>A <c>EInvoiceMsgExporter</c> object.</returns>
    public static EInvoiceMsgExporter_MX construct()
    {
        return new EInvoiceMsgExporter_MX();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDocType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>EInvoiceMsgExporter</c> object.
    /// <param name="_cfdiDocType">
    /// CFDI document type.
    /// </param>
    /// </summary>
    /// <returns>A <c>EInvoiceMsgExporter</c> object.</returns>
    public static EInvoiceMsgExporter_MX newDocType(CFDIDocType_MX _cfdiDocType = CFDIDocType_MX::Invoice)
    {
        EInvoiceMsgExporter_MX ret;

        switch(_cfdiDocType)
        {
           
            case CFDIDocType_MX::Withholding:
                ret = new CFDIWithholdingMsgExporter_MX();
                break;

            default:
                ret = new EInvoiceMsgExporter_MX();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes class' job.
    /// </summary>
    /// <param name="args">The parameters for the job execution.</param>
    static void main(Args args)
    {
        CFDIDocType_MX docType;

        if (args.parmEnumType() == enumNum(CFDIDocType_MX))
        {
            docType = args.parmEnum();
        }

        EInvoiceMsgExporter_MX exporter = EInvoiceMsgExporter_MX::newDocType(docType);

        if (exporter.prompt())
        {
            exporter.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>