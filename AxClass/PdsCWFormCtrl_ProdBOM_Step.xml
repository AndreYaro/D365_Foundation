<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsCWFormCtrl_ProdBOM_Step</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PdsCWFormCtrl_ProdBOM_Step extends PdsCWFormCtrl
{
    boolean         calledFromFormula;
    ProdBOM         prodBOM;
    PmfProdBOMStep  pmfProdBomStep;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dataSourceLinkActivePost</Name>
				<Source><![CDATA[
    public void dataSourceLinkActivePost()
    {
        PdsCWValidation_StepConsumption lclValidation = cwValidation as PdsCWValidation_StepConsumption;

        lclValidation.parmItemBuffer(prodBOM);
        lclValidation.parmBuffer(pmfProdBomStep);
        lclValidation.parmUnitFieldId(fieldNum(ProdBOM, UnitId));
        lclValidation.setQtyEditable(!PdsGlobal::pdsIsCWItem(prodBOM.ItemId));

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the item formula is enabled.
    /// </summary>
    /// <returns>
    /// Yes if formula enabled, otherwise no.
    /// </returns>
    public NoYes isFormulaEnabled()
    {
        return #PmfEnabled && calledFromFormula;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// The object is created
    /// </summary>
    protected void new()
    {
        super();

        cwValidation = PdsCWValidation_StepConsumption::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPmfProdBOMStep</Name>
				<Source><![CDATA[
    public PmfProdBOMStep parmPmfProdBOMStep(PmfProdBOMStep _pmfProdBOMStep = pmfProdBOMStep)
    {
        if (!prmisdefault(_pmfProdBOMStep))
        {
            pmfProdBOMStep = _pmfProdBOMStep;
        }

        return pmfProdBOMStep;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdBOM</Name>
				<Source><![CDATA[
    public ProdBOM parmProdBOM(ProdBOM _prodBOM = prodBOM)
    {
        if (!prmisdefault(_prodBOM))
        {
            prodBOM = _prodBOM;
        }

        return prodBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the callerProdTable variable using the calling buffer.
    /// </summary>
    /// <param name="_buffer">
    /// The record that the caller passes to the form control.
    /// </param>
    public void setCaller(Common _buffer)
    {
        ReqTrans  reqTrans;
        ProdTable callerProdTable;

        calledFromFormula = false;

        switch (_buffer.TableId)
        {
            case tablenum(ProdTable):
                callerProdTable     = _buffer;
                calledFromFormula   = callerProdTable.ProdType == ProdType::Process;
                break;
            case tablenum(ReqTrans):
                reqTrans = _buffer;
                if (reqTrans.RefType == ReqRefType::Production)
                {
                    callerProdTable     = ProdTable::find(reqTrans.RefId);
                    calledFromFormula   = callerProdTable.ProdType == ProdType::Process;
                }
                break;
        }

        calledFromFormula = calledFromFormula
            || this.menuItemName() == menuitemdisplaystr(PmfProdFormula)
            || (this.caller()
                && this.caller().name() == formstr(ProdTable)
                && this.caller().pmfIsEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// Form Data source used by class - ProdBOM
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// Default value - null.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(PmfProdBOMStep)
            || _datasources2.TableId != tableNum(ProdBOM))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        this.parmProdBOM(_datasources2);
        this.parmPmfProdBOMStep(_datasources1);

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form design.
    /// </summary>
    public void updateDesign()
    {
        if (this.isFormulaEnabled())
        {
           super();
        }
        else
        {
            this.visibleDSField(fieldNum(PmfProdBOMStep, PdsCWQty), false);
        }

        this.parmFormDataSource(FormDataUtil::getFormDataSource(buffer)).refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PmfFormCtrl_ProdBOMStep</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PmfFormCtrl_ProdBOMStep</c> class.
    /// </returns>
    public static PdsCWFormCtrl_ProdBOM_Step construct()
    {
        return new PdsCWFormCtrl_ProdBOM_Step();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a new class derived from <c>PdsCWFormCtrl_ProdBOM_Step</c>.
    /// </summary>
    /// <param name="_fr">
    /// FormRun Object of caller
    /// </param>
    /// <returns>
    /// An instance of class <c>PdsCWFormCtrl_ProdBOM_Step</c>.
    /// </returns>
    public static PdsCWFormCtrl_ProdBOM_Step newFromForm(
        FormRun _fr)
    {
        PdsCWFormCtrl_ProdBOM_Step   cwFormCtrl = PdsCWFormCtrl_ProdBOM_Step::construct();

        cwFormCtrl.parmFormRun(_fr);
        cwFormCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
                [[fieldnum(PmfProdBOMStep, BOMQty),
                  fieldnum(PmfProdBOMStep, PdsCWQty)]]));
        cwFormCtrl.parmItemFieldId(fieldnum(ProdBOM, ItemId));
        cwFormCtrl.parmUnitMethodStr(tableMethodStr(ProdBOM, PdsCWUnitId));
        cwFormCtrl.parmUnitFieldId(fieldNum(ProdBOM, UnitId));

        cwFormCtrl.setCaller(_fr.args().record());

        return cwFormCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>