<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceReferenceNumber_FI_Formula2</Name>
	<SourceCode>
		<Declaration><![CDATA[
[CustInvoiceReferenceNumberFactory(InvoiceReferenceNumberFormulaType_FI::Formula2)]
public class CustInvoiceReferenceNumber_FI_Formula2 extends CustInvoiceReferenceNumber_FI
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateReferenceNumber</Name>
				<Source><![CDATA[
        public ReferenceNumber_FI generateReferenceNumber()
    {
        ReferenceNumber_FI ret;
        NumberSequenceTable numberSequenceTable;
        ReferenceNumber_FI base;
        CheckDigit_FI checkDigit;
        str formatString;
        int formatStringPosition;
        int poundCharCount;
        int zCharCount;
        int basePosition;
        ;
        #define.Pound('#')
        #define.Z('Z')
        #define.Zero('0')
        #define.Digits('0123456789')
        #define.MaxRefNumberLength(20)

        poundCharCount = 0;
        zCharCount = 0;

        numberSequenceTable = NumberSequenceTable::find(CustParameters::find().InvoiceReferenceNumberSequenceTable);

        formatString = numberSequenceTable.Format;

        for (formatStringPosition = strlen(formatString); formatStringPosition >= 1; formatStringPosition--)
        {
            if (substr(formatString, formatStringPosition, 1) == #Pound)
            {
                basePosition = strlen(custVendTrans.Invoice) - poundCharCount;
                if (basePosition <= 0)
                {
                    base = #Zero + base;
                }
                else
                {
                    base = substr(custVendTrans.Invoice, basePosition, 1) + base;
                }
                poundCharCount++;
            }
            else if (substr(formatString, formatStringPosition, 1) == #Z)
            {
                basePosition = strlen(custVendTrans.AccountNum) - zCharCount;
                if (basePosition <= 0)
                {
                    base = #Zero + base;
                }
                else
                {
                    base = substr(custVendTrans.AccountNum, basePosition, 1) + base;
                }
                zCharCount++;
            }
            else if (strfind(formatString, #Digits, formatStringPosition, 1))
            {
                base = substr(formatString, formatStringPosition, 1) + base;
            }
        }

        if (strlen(base) == #MaxRefNumberLength)
        {
            base = strdel(base, #MaxRefNumberLength, 1);
        }

        checkDigit = CustVendInvoiceRefNum_FI::calculateCheckDigit(base);

        if (strfind(base, #Zero, 1, strlen(base)) == 1)
        {
            // There are leading zeros to be removed
            base = strdel(base, 1, strnfind(base, #Zero, 1, strlen(base)) - 1);
        }

        ret = base + checkDigit;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReferenceNumberFormat</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static boolean checkReferenceNumberFormat(str _formatString)
    {
        boolean ret = true;
        ;
        #define.AllowedChars('0123456789#Z')

        if (_formatString)
        {
            if (strlen(_formatString) > 19)
            {
                ret = checkFailed("@SYS98450");
            }

            if (strnfind(_formatString, #AllowedChars, 1, strlen(_formatString)))
            {
                ret = checkFailed("@SYS98451");
            }
        }
        else
        {
            ret = checkFailed("@SYS98664");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>