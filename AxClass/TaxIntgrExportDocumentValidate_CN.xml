<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntgrExportDocumentValidate_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntgExportDocumentValidate_CN</c> handles the export document validation.
/// </summary>
class TaxIntgrExportDocumentValidate_CN
{
    TaxIntgrExportDocumentSourceType_CN exportDocumentSource;
    TaxProfileTable_CN taxProfileTable;
    private CustTable custTable;
    TaxCode chargesTaxCode;
    TaxCode chargesTaxCodeNext;

    boolean isValidExportDocument;
    boolean isExportDocumentApplicable;
    private boolean isMultiTaxFeatureEnabled;

    private const int SingleTaxCode = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getIsExportDocumentApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the validation result that whether the source is applicable for export document.
    /// </summary>
    /// <returns>
    /// True if it is valid; otherwise, false.
    /// </returns>
    public boolean getIsExportDocumentApplicable()
    {
        return isExportDocumentApplicable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsValidExportDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the validation result that whether the source is valid for export document.
    /// </summary>
    /// <returns>
    /// True if it is valid; otherwise, false.
    /// </returns>
    public boolean getIsValidExportDocument()
    {
        return isValidExportDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs initialization.
    /// </summary>
    protected void initialize()
    {
        isValidExportDocument = true;
        isExportDocumentApplicable = true;
        isMultiTaxFeatureEnabled = TaxIntgrExportDocumentMultiTaxFeature::isEnabled();

        taxProfileTable = TaxProfileTable_CN::findByTaxCode(exportDocumentSource.parmTaxCode());
        custTable = CustTable::find(exportDocumentSource.parmInvoiceAccount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportDocumentSource</Name>
				<Source><![CDATA[
    public TaxIntgrExportDocumentSourceType_CN parmExportDocumentSource(TaxIntgrExportDocumentSourceType_CN _exportDocumentSource = exportDocumentSource)
    {
        exportDocumentSource = _exportDocumentSource;

        return exportDocumentSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the validation.
    /// </summary>
    protected void validate()
    {
        this.validateTaxCode();
        this.validateChargesTaxCode();

        if (isExportDocumentApplicable)
        {
            this.validateCurrencyCode();
            this.validateAmountLimit();
            if (taxProfileTable && !taxProfileTable.IsNonDeductibleVATInvoice)
            {
                this.validateTaxRegistration();
                this.validateBankAccount();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAmountLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the amount limit.
    /// </summary>
    protected void validateAmountLimit()
    {
        if (taxProfileTable.isValidatingAmountLimit()
            && taxProfileTable.MaxInvoiceAmount < exportDocumentSource.parmTransactionCurrencyInvoiceAmount())
        {
            // The net amount of invoice %1 is greater than the maximum amount %2 set in Tax Integration Profile %3, please correct it before posting.
            isValidExportDocument = checkFailed(strfmt("@GLS60742", exportDocumentSource.parmInvoiceId(), taxProfileTable.MaxInvoiceAmount, taxProfileTable.ProfileId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates bank account information.
    /// </summary>
    protected void validateBankAccount()
    {
        CustBankAccountId custBankAccountId = exportDocumentSource.parmCustBankAccount();
        CustInvoiceAccount invoiceAccount = exportDocumentSource.parmInvoiceAccount();
        CustBankAccount custBankAccount;

        if (!custTable.SimplifyTaxIntgrExportDocValidation_CN)
        {
            if (!custBankAccountId)
            {
                // Bank account must be entered in invoice %1
                isValidExportDocument = checkFailed(strfmt("@GLS60745", exportDocumentSource.parmInvoiceId()));
            }
            else
            {
                custBankAccount = CustBankAccount::find(invoiceAccount, custBankAccountId);
                if (!custBankAccount.Name)
                {
                    // Bank account name must be filled in customer %1 bank accounts %2 table.
                    isValidExportDocument = checkFailed(strfmt("@GLS60747", invoiceAccount, custBankAccountId));
                }

                unchecked (Uncheck::TableSecurityPermission)
                {
                    if (!custBankAccount.AccountNum)
                    {
                        // Bank account number must be filled in customer %1 bank accounts %2 table.
                        isValidExportDocument = checkFailed(strfmt("@GLS60746", invoiceAccount, custBankAccountId));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the currency code. The currency code must be same with company currency.
    /// </summary>
    protected void validateCurrencyCode()
    {
        CurrencyCode        currencyCodeCompany;
        CurrencyCode        currencyCodeLocalTrans;

        currencyCodeCompany = Ledger::accountingCurrency();
        currencyCodeLocalTrans = exportDocumentSource.parmCurrencyCode();

        if (currencyCodeLocalTrans != currencyCodeCompany)
        {
            isValidExportDocument = checkFailed(strFmt("@GLS223911", currencyCodeLocalTrans, currencyCodeCompany));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validation the tax code. The tax code should be unique and linked for a profile.
    /// </summary>
    protected void validateTaxCode()
    {
        if (exportDocumentSource.getAllTaxCodeMap().elements() == 0)
        {
            isValidExportDocument = false;
            isExportDocumentApplicable = false;
        }

        if (!isMultiTaxFeatureEnabled)
        {
            if (exportDocumentSource.getAllTaxCodeMap().elements() > SingleTaxCode ||
                (exportDocumentSource.getAllTaxCodeMap().exists(exportDocumentSource.parmTaxCode())
                && exportDocumentSource.getAllTaxCodeMap().lookup(exportDocumentSource.parmTaxCode()) != exportDocumentSource.parmInvoiceLineCount()))
            {
                // The tax rate must be the same for all invoice lines.
                isValidExportDocument = checkFailed("@GLS60741");
                isExportDocumentApplicable = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates tax registration.
    /// </summary>
    protected void validateTaxRegistration()
    {
        boolean splitCustValidationFeatureEnabled = FeatureStateProvider::isFeatureEnabled(TaxIntgrExportDocumentSplitCustValidationFeature_CN::instance());

        if ((splitCustValidationFeatureEnabled && !custTable.SimplifyTaxIntgrExportTaxRegValidation_CN)
            ||
            (!splitCustValidationFeatureEnabled && !custTable.SimplifyTaxIntgrExportDocValidation_CN))
        {
            // Validate registration type
            CompanyInfoExtension_CN companyInfoExtension = CompanyInfoExtension_CN::findByCompany(CompanyInfo::current());
            if (!companyInfoExtension.RecId || !companyInfoExtension.TaxRegistrationType)
            {
                // Please specify a Tax registration type for VAT in the legal entity form.
                isValidExportDocument = checkFailed(strfmt("@GLS221803"));
            }
            else
            {
                // Validate VATRegistrationNum
                if (!TaxRegistration::getTaxRegistrationNumberFromCust(
                exportDocumentSource.parmInvoiceAccount(),
                exportDocumentSource.parmInvoiceDate(),
                companyInfoExtension.TaxRegistrationType))
                {
                    // Please specify the tax registration number for the type %1 for customer %2.
                    isValidExportDocument = checkFailed(strfmt("@GLS221804", TaxRegistrationType::find(companyInfoExtension.TaxRegistrationType).TaxRegstrationType, exportDocumentSource.parmInvoiceAccount()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an instance of <c>TaxIntgExportDocumentValidate_CN</c> for the source.
    /// </summary>
    /// <param name="_exportDocumentSource">
    /// An export document source.
    /// </param>
    /// <returns>
    /// An instance of <c>TaxIntgExportDocumentValidate_CN</c>.
    /// </returns>
    private static TaxIntgrExportDocumentValidate_CN construct(TaxIntgrExportDocumentSourceType_CN _exportDocumentSource)
    {
        TaxIntgrExportDocumentValidate_CN exportDocumentValidate;

        exportDocumentValidate = new TaxIntgrExportDocumentValidate_CN();
        exportDocumentValidate.parmExportDocumentSource(_exportDocumentSource);

        exportDocumentValidate.initialize();
        return exportDocumentValidate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExportDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the export document source.
    /// </summary>
    /// <param name="_exportDocumentSource">
    /// An export document source.
    /// </param>
    /// <returns>
    /// An instance of <c>TaxIntgExportDocumentValidate_CN</c> containing the validation result.
    /// </returns>
    public static TaxIntgrExportDocumentValidate_CN validateExportDocument(TaxIntgrExportDocumentSourceType_CN _exportDocumentSource)
    {
        TaxIntgrExportDocumentValidate_CN exportDocumentValidate;

        exportDocumentValidate = TaxIntgrExportDocumentValidate_CN::construct(_exportDocumentSource);
        exportDocumentValidate.validate();

        return exportDocumentValidate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateChargesTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validation the misc. charges tax code. The tax code should be unique and linked for a profile.
    /// </summary>
    protected void validateChargesTaxCode()
    {
        int noOfChargesTaxCode = exportDocumentSource.getAllChargesTaxCodeMap().elements();

        if (exportDocumentSource.getAllTaxCodeMap().elements() == 0 && noOfChargesTaxCode != 0)
        {
            isValidExportDocument = checkFailed("@GLS60741");
            isExportDocumentApplicable = true;
        }

        MapEnumerator mapEnumerator;
        boolean moveText = false;

        if (isValidExportDocument && noOfChargesTaxCode != 0)
        {
            mapEnumerator = exportDocumentSource.getAllChargesTaxCodeMap().getEnumerator();
            mapEnumerator.moveNext();
    
            if (mapEnumerator.currentValue() != exportDocumentSource.parmMiscChargesTotalLineCount())
            {
                if (!isMultiTaxFeatureEnabled)
                {
                    isValidExportDocument = checkFailed("@GLS60741");
                }
                isExportDocumentApplicable = true;
            }
        }
        else if (isValidExportDocument && exportDocumentSource.parmMiscChargesTotalLineCount() > 0)
        {
            isValidExportDocument = checkFailed("@GLS60741");
            isExportDocumentApplicable = true;
        }

        if (isValidExportDocument && noOfChargesTaxCode == SingleTaxCode)
        {
            mapEnumerator = exportDocumentSource.getAllChargesTaxCodeMap().getEnumerator();
            mapEnumerator.moveNext();
            chargesTaxCode = mapEnumerator.current();
            if (exportDocumentSource.parmTaxCode() != chargesTaxCode)
            {
                isValidExportDocument = checkFailed("@GLS60741");
                isExportDocumentApplicable = true;
            }
        }
        else if (isValidExportDocument && noOfChargesTaxCode > 1)
        {
            mapEnumerator = exportDocumentSource.getAllChargesTaxCodeMap().getEnumerator();
            while (mapEnumerator.moveNext())
            {
                chargesTaxCode = mapEnumerator.current();
                if (moveText && chargesTaxCodeNext != chargesTaxCode)
                {
                    if (!isMultiTaxFeatureEnabled)
                    {
                        isValidExportDocument = checkFailed("@GLS60741");
                    }
                    isExportDocumentApplicable = true;
                    break;
                }
                chargesTaxCodeNext = chargesTaxCode;
                moveText =  true;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>