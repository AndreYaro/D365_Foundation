<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalToGeneralLedgerTransferValidateAccountingDateAndVoucher</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// This class does the validation of voucher in transfer and make sure the accounting date and voucher on the entries that are transferred from Subledger journal account
/// entry to Genenal ledger matches and there is no discrepancy
/// </summary>
[ExportMetadataAttribute(classStr(SubledgerJournalTransferToGeneralLedgerValidationProvider), classStr(SubledgerJournalToGeneralLedgerTransferValidateAccountingDateAndVoucher))]
[ExportAttribute('Microsoft.Dynamics.AX.Application.SubledgerJournalTransferToGeneralLedgerValidationProvider')]
internal final class SubledgerJournalToGeneralLedgerTransferValidateAccountingDateAndVoucher implements SubledgerJournalTransferToGeneralLedgerValidationProvider
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean validate(SubledgerJournalTransferId _transferId)
    {
        using (SysInstrumentationActivityContext activityContext = SourceDocumentAccountingFrameworkInstrumentationLogger::getActivityContext(
            SourceDocumentInstrumentationConstants::InstrumentationNamespaceForBatchTransfer,
            classStr(SubledgerJournalToGeneralLedgerTransferValidateAccountingDateAndVoucher),
            SourceDocumentInstrumentationConstants::SubledgerToGeneralLedgerTransferValidationProcess))
        {
            SubledgerJournalEntry subledgerJournalEntry;
            SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
            AccountingEvent accountingEvent;

            select firstonly RecId from subledgerJournalEntry
                where subledgerJournalEntry.TransferId == _transferId
            exists join accountingEvent
                where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
            exists join subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId &&
                    subledgerVoucherGeneralJournalEntry.TransferId == subledgerJournalEntry.TransferId &&
                    (subledgerVoucherGeneralJournalEntry.Voucher != subledgerJournalEntry.Voucher ||
                        subledgerVoucherGeneralJournalEntry.AccountingDate != accountingEvent.AccountingDate);

            if (subledgerJournalEntry)
            {
                activityContext.addCustomProperty(
                    SourceDocumentInstrumentationConstants::TransferId,
                    any2Str(_transferId));

                activityContext.addCustomProperty(
                    classStr(SubledgerJournalToGeneralLedgerTransferValidateAccountingDateAndVoucher),
                    any2Str('Failed'));
            }

            return true;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>