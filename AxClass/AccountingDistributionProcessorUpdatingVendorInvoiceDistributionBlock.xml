<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccountingDistributionProcessorUpdatingVendorInvoiceDistributionBlock</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_VendorInvoice), SourceDocument_VendorInvoice::VendorInvoice)]
internal final class AccountingDistributionProcessorUpdatingVendorInvoiceDistributionBlock extends AccDistProcessorExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkUpdateDistributionFactor</Name>
				<Source><![CDATA[
    private void checkUpdateDistributionFactor(AccountingDistribution _accountingDistribution)
    {
        AccountingDistribution accountingDistributionReferenceAllocationFactor;
        BudgetSource budgetSource;
        PurchLine purchLine;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceTrans vendInvoiceTrans;

        if (_accountingDistribution.ReferenceDistribution != 0)
        {
            select AllocationFactor, RecId from accountingDistributionReferenceAllocationFactor
                where accountingDistributionReferenceAllocationFactor.RecId == _accountingDistribution.ReferenceDistribution
            exists join budgetSource 
                where budgetSource.SourceDocumentLine == _accountingDistribution.SourceDocumentLine
            exists join vendInvoiceInfoLine
                where vendInvoiceInfoLine.SourceDocumentLine == _accountingDistribution.SourceDocumentLine
            exists join vendInvoiceTrans
                where vendInvoiceTrans.InventTransId == vendInvoiceInfoLine.InventTransId;
        
            if (accountingDistributionReferenceAllocationFactor &&
                accountingDistributionReferenceAllocationFactor.AllocationFactor != _accountingDistribution.AllocationFactor)
            {
                if (SourceDocumentValidateFactorRoundingThresholdFlight::instance().isEnabled())
                {
                    if (this.isAllocationFactorRoundingDifferenceExceeded(                            
                            accountingDistributionReferenceAllocationFactor.AllocationFactor,
                            _accountingDistribution.AllocationFactor))
                    {
                        throw error("@SourceDocumentAccountingFramework:ErrorMessageThrownForValidatingRoundingAllocationFactorDifferencesOfPOVendInvoice");
                    }
                }
                else
                {
                    throw error("@SourceDocumentAccountingFramework:ErrorMessageThrownForValidatingAllocationFactorOfPOVendorInvoice");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllocationFactorRoundingDifferenceExceeded</Name>
				<Source><![CDATA[
    private boolean isAllocationFactorRoundingDifferenceExceeded(AllocationFactor _originalAllocationFactor, AllocationFactor _currentAllocationFactor)
    {
        real allocationFactorDifference = abs(_currentAllocationFactor - _originalAllocationFactor);

        return (allocationFactorDifference > SourceDocumentParameters::find().AllocationFactorValidationRoundingThreshold);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the accounting distribution processor events.
    /// </summary>
    protected void subscribe()
    {
        if (SourceDocumentValidateFactorForPOBasedInvoiceFlight::instance().isEnabled())
        {
            if (BudgetControlConfiguration::isControlConfigured())
            {
                accountingDistributionProcessor.updatedAccountingDistribution += eventhandler(this.checkUpdateDistributionFactor);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>