<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInstrumentationSplitWorkMultiLineActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides activities for the split work multi line operation.
/// </summary>
internal final class WHSInstrumentationSplitWorkMultiLineActivities
{
    private WHSInstrumentationLogger logger;

    private const str ActivityNamePrefix = 'SplitWorkMultiLine.';
    private const str ExecuteSplitWorkMultiLine = 'executeSplitWorkMultiLine';
    private const str AcquireWaveLock = 'acquireWaveLock';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(WHSInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    internal static WHSInstrumentationSplitWorkMultiLineActivities newFromLogger(WHSInstrumentationLogger _logger)
    {
        return new WHSInstrumentationSplitWorkMultiLineActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>activity</Name>
				<Source><![CDATA[
    private SysInstrumentationActivity activity(str _activityName)
    {
        return logger.activity(ActivityNamePrefix + _activityName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSplitWork</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext executeSplitWork()
    {
        return logger.activityContext(this.activity(ExecuteSplitWorkMultiLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquireWaveLock</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext acquireWaveLock()
    {
        return logger.activityContext(this.activity(AcquireWaveLock));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>