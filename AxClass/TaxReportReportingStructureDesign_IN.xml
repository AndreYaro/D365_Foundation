<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportReportingStructureDesign_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Designs the structure for tax report reporting.
/// </summary>
[TaxReportHrchyStructureAttribute_IN(TaxReportHrchyStructDesignType_IN::Reporting)]
public class TaxReportReportingStructureDesign_IN extends TaxReportHrchyStructureDesign_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNextLevelNodeClass</Name>
				<Source><![CDATA[
        protected ClassId getNextLevelNodeClass(boolean _isRoot = false)
    {
        TaxReportHrchyTaxComponentNode_IN    componentNode;
        TaxComponentTable_IN                taxComponentTable;

        if (_isRoot)
            return classNum(TaxReportHrchyRootNode_IN);

        if (this.parmCurrentNode().parmClassId() == classNum(TaxReportHrchyRootNode_IN))
            return classNum(TaxReportHrchyTaxTypeNode_IN);

        if (this.parmCurrentNode().parmClassId() == classNum(TaxReportHrchyTaxTypeNode_IN))
            return classNum(TaxReportHrchyTaxComponentNode_IN);

        if (this.parmCurrentNode().parmClassId() == classNum(TaxReportHrchyTaxComponentNode_IN))
        {
            componentNode = this.parmCurrentNode() as TaxReportHrchyTaxComponentNode_IN;

            if (!componentNode)
            {
                componentNode = this.parmCurrentNode() as TaxReportHrchyTableNode_IN;
            }

            select firstOnly RecId, TaxType from taxComponentTable
                where taxComponentTable.RecId == componentNode.parmRefTableRecId()
                && taxComponentTable.TaxType == TaxType_IN::ServiceTax;

            if (taxComponentTable.RecId)
            {
                return classNum(TaxReportHrchyServAcctCodeNode_IN);
            }
        }

        return classNum(TaxReportHrchyNode_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLevelNodes</Name>
				<Source><![CDATA[
        public List getNextLevelNodes(TaxReportHrchyNode_IN _currentReportCodeNode, boolean _isRoot = false)
    {
        List nodeValues = super(_currentReportCodeNode);

        switch (this.getNextLevelNodeClass(_isRoot))
        {
            case classNum(TaxReportHrchyRootNode_IN):
                nodeValues = this.getNodesForRoot();
                break;

            case classNum(TaxReportHrchyTaxTypeNode_IN):
                nodeValues = this.getNodesForTaxType();
                break;

            case classNum(TaxReportHrchyTaxComponentNode_IN):
                nodeValues = this.getNodesForTaxComponent();
                break;

            case classNum(TaxReportHrchyServAcctCodeNode_IN):
                nodeValues = this.getNodesForServiceAccountingCode();
                break;

            default:
                break;
        }
        return nodeValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodesForServiceAccountingCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get all ServiceAccountingCode <c>TaxReportHrchyNode_IN</c> nodes of the <c>TaxReportHierarchy_IN</c> instance.
    /// </summary>
    /// <returns>
    /// The list of all <c>TaxReportHrchyNode_IN</c> nodes.
    /// </returns>
    private List getNodesForServiceAccountingCode()
    {
        List                                nodeList = new List(Types::Class);
        TaxReportHrchyServAcctCodeNode_IN   node;
        ServiceCodeTable_IN                 serviceCodeTable;

        while select RecId from serviceCodeTable
        {
            node = TaxReportHrchyServAcctCodeNode_IN::construct();
            node.parmRefTableRecId(serviceCodeTable.RecId);
            node.parmCanMatch(NoYes::Yes);
            nodeList.addEnd(node);
        }

        return nodeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodesForTaxComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get all TaxComponent <c>TaxReportHrchyNode_IN</c> nodes of the <c>TaxReportHierarchy_IN</c> instance.
    /// </summary>
    /// <returns>
    /// The list of all <c>TaxReportHrchyNode_IN</c> nodes.
    /// </returns>
    private List getNodesForTaxComponent()
    {
        List                                nodeList = new List(Types::Class);
        TaxReportHrchyTaxTypeNode_IN        taxTypeNode;
        TaxComponentTable_IN                taxComponentTable;
        TaxReportHrchyTaxComponentNode_IN    node;
        DictEnum                            dictEnumTaxType = new DictEnum(enumNum(TaxType_IN));

        taxTypeNode = this.parmCurrentNode() as TaxReportHrchyTaxTypeNode_IN;

        if (!taxTypeNode)
        {
            taxTypeNode = this.parmCurrentNode() as TaxReportHrchyEnumNode_IN;
        }

        while select RecId from taxComponentTable
            where taxComponentTable.TaxType == taxTypeNode.parmRefEnumValue()
        {
            node = TaxReportHrchyTaxComponentNode_IN::construct();
            node.parmRefTableRecId(taxComponentTable.RecId);
            if (taxComponentTable.TaxType != TaxType_IN::Excise)
            {
                node.parmCanMatch(NoYes::Yes);
            }
            nodeList.addEnd(node);
        }
        return nodeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodesForTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get all TaxType <c>TaxReportHrchyNode_IN</c> nodes of the <c>TaxReportHierarchy_IN</c> instance.
    /// </summary>
    /// <returns>
    /// The list of all <c>TaxReportHrchyNode_IN</c> nodes.
    /// </returns>
    private List getNodesForTaxType()
    {
        List                            nodeList = new List(Types::Class);
        DictEnum                        dictEnumTaxType = new DictEnum(enumNum(TaxType_IN));
        TaxReportHrchyTaxTypeNode_IN     node;
        int                             counter;

        for (counter = 0; counter < dictEnumTaxType.values(); counter++)
        {
            switch (dictEnumTaxType.index2Value(counter))
            {
                case TaxType_IN::Excise:
                case TaxType_IN::SalesTax:
                case TaxType_IN::ServiceTax:
                case TaxType_IN::VAT:
                    node = TaxReportHrchyTaxTypeNode_IN::construct();
                    node.parmRefEnumValue(dictEnumTaxType.index2Value(counter));
                    nodeList.addEnd(node);
                    break;
                default:
                    break;
            }
        }

        return nodeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefClassId</Name>
				<Source><![CDATA[
        public ClassId parmRefClassId()
    {
        return classNum(TaxReportReportingStructureDesign_IN);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>