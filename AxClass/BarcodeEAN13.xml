<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BarcodeEAN13</Name>
	<SourceCode>
		<Declaration><![CDATA[
[BarcodeTypeFactory(BarcodeType::EAN13)]
public class BarcodeEAN13 extends BarcodeEAN_UPC
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>barcodeType</Name>
				<Source><![CDATA[
    public BarcodeType barcodeType()
    {
        return BarcodeType::EAN13;
    }

]]></Source>
			</Method>
			<Method>
				<Name>encodeString</Name>
				<Source><![CDATA[
    BarCodeString encodeString(BarCodeString _stringIn)
    {
        int             len = strLen(_stringIn);
        int             addtotal = 0;
        int             checkval = 0;
        int             strcnt;
        int             parityArray[6];
        int             i;
        int             base;
        int             offset;
        BarCodeString   result;
        boolean         hascheckDigit = false;
        int             checkDigit;

        if (len != this.strlen() - 1)
        {
            if (len != this.strlen())
            {
                return '';
            }

            hascheckDigit = true;
            checkDigit = char2num(_stringIn, len) - 48;
            len--;
        }

        // calculate and add check digit
        for (strcnt = 1; strcnt <= len; strcnt++)
        {
            if (strcnt mod 2 == 1)
            {
                checkval = char2num(_stringIn, strcnt) - 48;
            }
            else
            {
                checkval = (char2num(_stringIn, strcnt) - 48) * 3;
            }

            addtotal += checkval;
        }
        if (addtotal mod 10 == 0)
        {
            checkval = 0;
        }
        else
        {
            checkval = 10 - (addtotal mod 10);
        }

        if (hascheckDigit && checkDigit != checkVal) // validate that the check digit specified is correct
        {
            return '';
        }

        // create pattern for left side odd or even parity
        parityArray[0] = 0;
        switch (char2num(_stringIn,1) - 48)
        {
            case 1:
                parityArray[3] = 20;
                parityArray[5] = 20;
                parityArray[6] = 20;
                break;
            case 2:
                parityArray[3] = 20;
                parityArray[4] = 20;
                parityArray[6] = 20;
                break;
            case 3:
                parityArray[3] = 20;
                parityArray[4] = 20;
                parityArray[5] = 20;
                break;
            case 4:
                parityArray[2] = 20;
                parityArray[5] = 20;
                parityArray[6] = 20;
                break;
            case 5:
                parityArray[2] = 20;
                parityArray[3] = 20;
                parityArray[6] = 20;
                break;
            case 6:
                parityArray[2] = 20;
                parityArray[3] = 20;
                parityArray[4] = 20;
                break;
            case 7:
                parityArray[2] = 20;
                parityArray[4] = 20;
                parityArray[6] = 20;
                break;
            case 8:
                parityArray[2] = 20;
                parityArray[4] = 20;
                parityArray[5] = 20;
                break;
            case 9:
                parityArray[2] = 20;
                parityArray[3] = 20;
                parityArray[5] = 20;
                break;
        }

        for (i = 2; i<=len; i++)
        {
            base = char2num(_stringIn, i);
            if ((base >= 48) && (base <= 57))
            {
                if (i < 8)
                {
                    offset = parityArray[i-1];
                }
                else
                {
                    offset = 10;
                }

                result += num2char(base + offset);
            }

            // add middle guard bars
            if (i == 7)
            {
                result += num2char(47);
            }
        }
        barcodeStrHR = _stringIn + num2str(checkVal,1,0,0,0);
        // add start code, check char, stop code
        result = '.' + result + num2char(checkVal + 58) + '.';
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>strlen</Name>
				<Source><![CDATA[
    public Integer strlen()
    {
        return 13;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BarcodeEAN13 construct()
    {
        return new BarcodeEAN13();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>