<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfTCAUpdate_Formula</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class used to calculate and update the formula co-products cost allocation percent.
/// </summary>
class PmfTCAUpdate_Formula extends PmfTCAUpdate
{
    BOMVersion      bomVersion;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcCoByExtPrice</Name>
				<Source><![CDATA[
    public Price calcCoByExtPrice(Common _buffer)
    {
        PmfFormulaCoBy     pmfFormulaCoBy = _buffer as PmfFormulaCoBy;
        Price              coByExtPrice = 0;

        if (pmfFormulaCoBy.CoByQtySerie)
        {
            coByExtPrice = pmfFormulaCoBy.CoByQty * bomVersion.PmfBatchSize / pmfFormulaCoBy.CoByQtySerie * pmfFormulaCoBy.inventItemPrice().pcsPrice();
        }

        return coByExtPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedAllocationPct</Name>
				<Source><![CDATA[
    public Percent estimatedAllocationPct()
    {
        Percent         coByCostAllocationTotalPct;
        PmfFormulaCoBy  coby;

        if (cobyMap)
        {
            me_cobyMap = cobyMap.getEnumerator();
        }

        while (me_cobyMap && me_cobyMap.moveNext())
        {
            coby = me_cobyMap.currentKey();

            if (bomVersion.PmfBatchSize && totalFormulaExtendedPrice && coby.CoByQtySerie)
            {
                coByCostAllocationTotalPct += coby.CoByQty
                                                * bomVersion.PmfBatchSize
                                                / coby.CoByQtySerie
                                                * coby.inventItemPrice().pcsPrice()
                                                / totalFormulaExtendedPrice
                                                * #Percent;
            }
            else
            {
                coByCostAllocationTotalPct = #Percent;
                break;
            }
        }

        return #Percent - coByCostAllocationTotalPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBufferFromQueryRun</Name>
				<Source><![CDATA[
    public Common getBufferFromQueryRun(QueryRun  _queryRun)
    {
        return _queryRun.get(tablenum(PmfFormulaCoBy));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormulaExtPrice</Name>
				<Source><![CDATA[
    public Price getFormulaExtPrice()
    {
        Price   formulaExtPrice = 0;

        if (bomVersion.inventTable().PmfProductType == PmfProductType::Formula)
        {
            formulaExtPrice = bomVersion.PmfBatchSize * bomVersion.inventItemPrice().pcsPrice();
        }

        return formulaExtPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _buffer)
    {
        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMVersion</Name>
				<Source><![CDATA[
    public BOMVersion parmBOMVersion(BOMVersion    _bomVersion = bomVersion)
    {
        if (! prmisDefault(_bomVersion))
        {
            bomVersion = _bomVersion;
        }

        return bomVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunBuild</Name>
				<Source><![CDATA[
    QueryRun queryRunBuild()
    {
        Query                   query;
        QueryBuildDataSource    dataSource;

        query           = new Query();
        dataSource      = query.addDataSource(tablenum(PmfFormulaCoBy));
        dataSource.update(true);
        dataSource.addRange(fieldNum(PmfFormulaCoBy, BOMVersionRefRecId)).value(queryValue(bomVersion.RecId));
        dataSource.addRange(fieldNum(PmfFormulaCoBy, CostAllocation)).value(queryValue(PmfCostAllocationMethod::TCA));
        dataSource.addRange(fieldNum(PmfFormulaCoBy, ProductType)).value(queryValue(PmfProductType::Co_Product));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    public void updateBuffer(Common _buffer, Real _percent)
    {
        PmfFormulaCoBy formulaCoBy = _buffer as PmfFormulaCoBy;

        ttsBegin;
        formulaCoBy.selectForUpdate(true);
        formulaCoBy.CostAllocationPct = _percent;
        formulaCoBy.update();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCoByPrice</Name>
				<Source><![CDATA[
    public void validateCoByPrice()
    {
        PmfFormulaCoBy  coby;

        if (cobyMap)
        {
            me_cobyMap = cobyMap.getEnumerator();
        }

        while (me_cobyMap && me_cobyMap.moveNext())
        {
            coby = me_coByMap.currentKey();

            if (!coby.validateTCA())
            {
                throw error("@PRO2855");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBOMVersion</Name>
				<Source><![CDATA[
    public static PmfTCAUpdate_Formula newFromBOMVersion(BOMVersion    _bomVersion)
    {
        PmfTCAUpdate_Formula  pmfUpdateTCAFormula = new PmfTCAUpdate_Formula(_bomVersion);

        pmfUpdateTCAFormula.parmBOMVersion(_bomVersion);

        return pmfUpdateTCAFormula;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>