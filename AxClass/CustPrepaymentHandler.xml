<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPrepaymentHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents a handler for handling prepayment related operations for a customer account.
/// </summary>
internal final class CustPrepaymentHandler
{
    private CustAccount custAccount;
    private CustPrepaymentInvoiceCreate custPrepaymentInvoiceCreate;
    private CustPostPrepaymentInvoice custPostPrepaymnetInvoice;

    private SpecTransExecutionContext specTransExecutionContext;
    private SpecTransManager specTransManager;

    private CustPrepaymentInstrumentationLogger prepaymentInvoiceLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// new instance of the class for prepayment handling
    /// </summary>
    /// <param name = "_custAccount"> customer account for final invoice </param>
    public void new(CustAccount _custAccount)
    {
        custAccount = _custAccount;
        prepaymentInvoiceLogger = CustPrepaymentInstrumentationLogger::createLogger(classStr(CustPrepaymentHandler));
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        CustTable custTable = CustTable::find(custAccount);
        specTransExecutionContext = SpecTransExecutionContext::newFromSource(custTable);
        specTransManager = SpecTransManager::newFromSpec(specTransExecutionContext.parmSpecContext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// parameter method for setting customer account
    /// </summary>
    /// <param name = "_custAccount">customer account for final invoice</param>
    /// <returns>customer account</returns>
    public CustAccount parmCustAccount(CustAccount _custAccount)
    {
        custAccount = _custAccount;
        this.init();
        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlePosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method finds the prepayment invoices applied against sales order and settles them against the final invoice.
    /// </summary>
    /// <param name = "_custInvoiceJour">
    /// This is the final invoice against which the prepayment invoices are to be settled.
    /// </param>
    /// <param name = "_salesTable">
    /// This is the sales order for which the final invoice is being created.
    /// </param>
    internal void handlePosting(CustInvoiceJour _custInvoiceJour, SalesTable _salesTable)
    {
        using (var activityContext = prepaymentInvoiceLogger.activityContextWithCustomProperties(CustPrepaymentInstrumentationConstants::CustPrepaymentInvoiceFinalInvoicePosting))
        {
            CustPrepaymentInvoiceTable custPrepaymentInvoiceTableReversal;
            CustPrepaymentCustInvoice custPrepaymentCustInvoice;
            CustPostPrepaymentInvoice custPostPrepaymentInvoice = new CustPostPrepaymentInvoice();
            CustTransOpen custTransOpenJour = this.getOpenTransaction(_custInvoiceJour);
            CustPrepaymentInvoiceTable custPrepaymentInvoiceTable;
            CustTrans custTransPrepayment;
            CustTransOpen custTransOpenPrepayment;

            boolean postedPrepayment = false;
            AmountCur appliedAmount = 0;
            AmountCur amountToApply = 0;

            try
            {
                ttsbegin;

                while select forupdate custPrepaymentCustInvoice where custPrepaymentCustInvoice.SourceRecId == _salesTable.RecId
                    && custPrepaymentCustInvoice.SourceTableId == tablenum(SalesTable)
                {
                    amountToApply = custPrepaymentCustInvoice.AmountCur;

                    if (custTransOpenJour.AmountCur < appliedAmount + custPrepaymentCustInvoice.AmountCur)
                    {
                        prepaymentInvoiceLogger.logInformation("@AccountsReceivable:PrepaymentAppliedAmtExceedsOrderValue");
                        amountToApply = custTransOpenJour.AmountCur - appliedAmount;
                    }

                    if (amountToApply <= 0)
                    {
                        prepaymentInvoiceLogger.logInformation("@AccountsReceivable:PrepaymentAppliedAmtNonPositive");
                        continue;
                    }

                    custPrepaymentCustInvoice.AmountCur -= amountToApply;

                    appliedAmount += amountToApply;

                    RefRecId recId = custPrepaymentCustInvoice.CustPrepaymentInvoiceTable;

                    select forupdate firstonly custPrepaymentInvoiceTable where custPrepaymentInvoiceTable.RecId == recId &&
                        custPrepaymentInvoiceTable.Type == PrepaymentInvoiceType::Common;

                    custPrepaymentInvoiceTableReversal = CustPrepaymentInvoiceCreate::copyData(custPrepaymentInvoiceTable, amountToApply, _custInvoiceJour);
                    custPostPrepaymentInvoice.parmInvoiceTable(custPrepaymentInvoiceTableReversal);
                    custPostPrepaymentInvoice.runOperation();
                    postedPrepayment = true;

                    // get the prepayment transaction and insert
                    custTransPrepayment = custPostPrepaymentInvoice.parmCustomerTransaction();
                    custTransOpenPrepayment = CustTransOpen::findRefId(custTransPrepayment.RecId);
                    specTransManager.insert(custTransOpenPrepayment.DataAreaId, custTransOpenPrepayment.TableId, custTransOpenPrepayment.RecId, custTransOpenPrepayment.AmountCur, custTransPrepayment.CurrencyCode);

                    custPrepaymentInvoiceTable.RemainAmountCur -= amountToApply;

                    if (custPrepaymentInvoiceTable.RemainAmountCur == 0 && custPrepaymentInvoiceTable.SettleAmountCur == custPrepaymentInvoiceTable.InvoiceAmount)
                    {
                        custPrepaymentInvoiceTable.Status = CustPrepaymentInvoiceStatus::Settled;
                    }

                    custPrepaymentInvoiceTable.update();

                    if (custPrepaymentCustInvoice.AmountCur <= 0)
                    {
                        custPrepaymentCustInvoice.delete();
                    }
                    else
                    {
                        custPrepaymentCustInvoice.update();
                    }
                }

                if (postedPrepayment)
                {
                    this.handleSettlement(_custInvoiceJour, custTransOpenJour);
                }

                activityContext.addCustomProperty('custInvoiceJourRecId', any2Str(_custInvoiceJour.RecId));
                activityContext.addCustomProperty('Prepayment Created', any2Str(custPrepaymentInvoiceTableReversal.RecId));

                ttscommit;
            }
            catch (Exception::Error)
            {
                ttsbegin;

                if (custPrepaymentCustInvoice)
                {
                    custPrepaymentCustInvoice.delete();
                }

                ttscommit;

                throw; 
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleSettlement</Name>
				<Source><![CDATA[
    private void handleSettlement(CustInvoiceJour _custInvoiceJour, CustTransOpen _custTransOpen)
    {
        using (var activityContext = prepaymentInvoiceLogger.activityContextWithCustomProperties(CustPrepaymentInstrumentationConstants::CustPrepaymentInvoiceFinalInvoiceSettlement))
        {
            CustTrans custTransLoc = _custInvoiceJour.custTrans();
            specTransManager.insert(_custTransOpen.dataAreaId, _custTransOpen.TableId, _custTransOpen.RecId, _custTransOpen.AmountCur, custTransLoc.CurrencyCode);

            //Settle
            CustTrans::settleTransaction(specTransExecutionContext, CustTransSettleTransactionParameters::construct());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlePostingPrepayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called from the customer prepayment form to post the prepayment against a final invoice.
    /// </summary>
    /// <param name = "_custInvoiceJour">
    /// This is the final invoice against which the prepayment invoices are to be settled.
    /// </param>
    /// <param name = "_custPrepaymentInvoiceTable">
    /// The prepayment invoice that is being applied against the final invoice.
    /// </param>
    /// <param name = "_custPrepaymentCustInvoice">
    /// The relationship between the prepayment invoice and the final invoice about how much amount is being applied.
    /// </param>
    internal void handlePostingPrepayment(CustInvoiceJour _custInvoiceJour, CustPrepaymentInvoiceTable _custPrepaymentInvoiceTable, CustPrepaymentCustInvoice _custPrepaymentCustInvoice)
    {
        using (var activityContext = prepaymentInvoiceLogger.activityContextWithCustomProperties(CustPrepaymentInstrumentationConstants::CustPrepaymentInvoiceInvoiceJourPosting))
        {
            ttsbegin;

            CustTransOpen custTransOpenJour = this.getOpenTransaction(_custInvoiceJour);
            CustPrepaymentInvoiceTable custPrepaymentInvoiceTableReversal;
            CustPostPrepaymentInvoice custPostPrepaymentInvoice = new CustPostPrepaymentInvoice();

            if (custTransOpenJour.AmountCur < _custPrepaymentCustInvoice.AmountCur)
            {
                prepaymentInvoiceLogger.logInformation("@AccountsReceivable:PrepaymentAppliedAmtExceedsOrderValue");
                _custPrepaymentCustInvoice.AmountCur= custTransOpenJour.AmountCur;
            }

            custPrepaymentInvoiceTableReversal = CustPrepaymentInvoiceCreate::copyData(_custPrepaymentInvoiceTable, _custPrepaymentCustInvoice.AmountCur, _custInvoiceJour);
            custPostPrepaymentInvoice.parmInvoiceTable(custPrepaymentInvoiceTableReversal);
            custPostPrepaymentInvoice.runOperation();
            CustTrans custTransPrepayment = custPostPrepaymentInvoice.parmCustomerTransaction();
            CustTransOpen custTransOpenPrepayment = CustTransOpen::findRefId(custTransPrepayment.RecId);

            specTransManager.insert(custTransOpenPrepayment.DataAreaId, custTransOpenPrepayment.TableId, custTransOpenPrepayment.RecId, custTransOpenPrepayment.AmountCur, custTransPrepayment.CurrencyCode);

            _custPrepaymentInvoiceTable.RemainAmountCur -= _custPrepaymentCustInvoice.AmountCur;

            if (_custPrepaymentInvoiceTable.RemainAmountCur == 0 && _custPrepaymentInvoiceTable.SettleAmountCur == _custPrepaymentInvoiceTable.InvoiceAmount)
            {
                _custPrepaymentInvoiceTable.Status = CustPrepaymentInvoiceStatus::Settled;
            }

            _custPrepaymentInvoiceTable.update();
            _custPrepaymentCustInvoice.delete();

            this.handleSettlement(_custInvoiceJour, custTransOpenJour);

            info(strFmt("@AccountsReceivable:PrepaymentSettlementPostingSuccessLog",
                         _custInvoiceJour.InvoiceId, _custPrepaymentInvoiceTable.InvoiceId));

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpenTransaction</Name>
				<Source><![CDATA[
    internal CustTransOpen getOpenTransaction(CustInvoiceJour _custInvoiceJour)
    {
        CustTrans custTransLoc = _custInvoiceJour.custTrans();
        CustTransOpen custTransOpen = CustTransOpen::findRefId(custTransLoc.RecId);

        if (!custTransOpen)
        {
            throw error("@AccountsReceivable:ErrorNoOpenTransactionsFound");
        }

        return custTransOpen;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>