<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocChorusProJObjectUtils</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Newtonsoft.Json.Linq;

/// <summary>
/// A set of utilities for <c>JObject</c> objects related to Chorus Pro structures.
/// </summary>
internal final class BusinessDocChorusProJObjectUtils
{
    public const str StructureIdJProperty = 'identifiantStructure';
    public const str StructureIdTypeJProperty = 'typeIdentifiantStructure';
    public const str SiretStructureIdType = 'SIRET';
    public const str StructureIdChorusProJProperty = 'idStructureCPP';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>retrieveSiretFromStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a SIRET from a given <c>JObject</c> structure.
    /// </summary>
    /// <param name = "_structure">A <c>JObject</c> structure.</param>
    /// <returns>A SIRET.</returns>
    public static str retrieveSiretFromStructure(JObject _structure)
    {
        str ret;

        JToken idType = _structure.SelectToken(StructureIdTypeJProperty);
        JToken id = _structure.SelectToken(StructureIdJProperty);
        if (id != null && idType != null && idType.ToString() == SiretStructureIdType)
        {
            ret = id.ToString();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveIdFromStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a Chorus Pro structure ID from a given <c>JObject</c> structure.
    /// </summary>
    /// <param name = "_structure">A <c>JObject</c> structure.</param>
    /// <param name = "_throwErrorIfNotFound">A <c>boolean</c> flag to determine whether to throw an exception or not if structure Id is not found. Optional.</param>
    /// <returns>A Chorus Pro structure ID.</returns>
    public static int retrieveIdFromStructure(JObject _structure, boolean _throwErrorIfNotFound = false)
    {
        int ret = 0;

        JToken jTokenIdStructure = _structure.SelectToken(StructureIdChorusProJProperty);
        if (jTokenIdStructure == null)
        {
            if (_throwErrorIfNotFound)
            {
                throw error("@BusinessDocumentSubmissionService:StructureWithSiretDoesNotContainIdChorusPro");
            }
        }
        else
        {
            ret = str2Int(jTokenIdStructure.ToString());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesStructureContainId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a given <c>JObject</c> structure contains a structure Id or not.
    /// </summary>
    /// <param name = "_structure">A <c>JObject</c> structure.</param>
    /// <returns>True, if the object contains a structure Id; otherwise, false.</returns>
    public static boolean doesStructureContainId(JObject _structure)
    {
        return _structure != null && _structure.SelectToken(StructureIdChorusProJProperty) != null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>