<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerParametersForm_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class complements the logic of <c>LedgerParameters</c> form.
/// </summary>
[ExtensionOf(formStr(LedgerParameters))]
public final class LedgerParametersForm_ApplicationSuite_Extension
{
    [DataField]
    class EcoResCategoryHierarchy
    {
        public Common resolveReference(FormReferenceControl _formReferenceControl)
        {
            return IntrastatParameters::resolveCommodityCodeHierarchy(_formReferenceControl);
        }

        public Common lookupReference(FormReferenceControl _formReferenceControl)
        {
            return IntrastatParameters::lookupCommodityCodeHierarchy(_formReferenceControl);
        }
    }

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        next init();

        boolean isGlobalWHTFeatureEnabled = FeatureStateProvider::isFeatureEnabled(TaxWithholdingGlobalFeature::instance());
        boolean taxWithholdingGlobalFeatureEnabled = TaxWithholdingGlobalFeature::isFeatureAndParamEnabled();
        boolean isWHTSupportedInCountryRegion = TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionByDefault();
        boolean isWHTEnabled = TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled();

        TabUniqueCertification_IT.visible(FeatureStateProvider::isFeatureEnabled(UniqueCertificationFeature::instance()));
        FormDesign design = this.design();

        FormTabPageControl reverseChargeTab = design.controlName(formControlStr(LedgerParameters, ReverseChargeTab)) as FormTabPageControl;

        if (reverseChargeTab)
        {
            reverseChargeTab.visible(ReverseChargeTaxSetupToggle::isReverseChargeUIEnabled(false));
        }

        FormTabPageControl whtTab = design.controlName(formControlStr(LedgerParameters, TaxWithholdTab)) as FormTabPageControl;
        if (whtTab)
        {
            boolean showWHTTab = isWHTSupportedInCountryRegion
                || (!isWHTSupportedInCountryRegion
                    && !TaxWithholdingGlobalFeature::shouldBlockShowingGLWithholdingTaxTab()
                    && isGlobalWHTFeatureEnabled);
            whtTab.visible(showWHTTab);
        }

        FormGroupControl enableWHT = design.controlName(formControlStr(LedgerParameters, EnableWithholdingTax)) as FormGroupControl;
        if (enableWHT)
        {
            enableWHT.visible(!isWHTSupportedInCountryRegion && isGlobalWHTFeatureEnabled);
        }

        FormGroupControl taxWithHoldInvoice = design.controlName(formControlStr(LedgerParameters, TaxWithholdInvoice)) as FormGroupControl;
        if (taxWithHoldInvoice)
        {
            taxWithHoldInvoice.visible(isWHTEnabled);
        }

        FormDataSource ledgerParameterDS = this.dataSource(formDataSourceStr(LedgerParameters, LedgerParameters));
        var postZeroRatedWHT = ledgerParameterDS.object(fieldNum(LedgerParameters, IsPostZeroRatedWHT));
        if (postZeroRatedWHT)
        {
            #ISOCountryRegionCodes
            boolean showPostZeroRatedWHT = (isWHTSupportedInCountryRegion || taxWithholdingGlobalFeatureEnabled) && !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoGB, #isoIT]);
            postZeroRatedWHT.visible(showPostZeroRatedWHT);
        }

        FormGroupControl withholdingTaxCurrency = design.controlName(formControlStr(LedgerParameters, WithholdingTaxCurrency)) as FormGroupControl;
        if (withholdingTaxCurrency)
        {
            withholdingTaxCurrency.visible(isWHTEnabled);

            if (withholdingTaxCurrency.visible())
            {
                LedgerParameters ledgerParams = LedgerParameters::find();
                design.controlName(formControlStr(LedgerParameters, WithholdingTaxCurrency_TaxWithholdExchangeRateType)).enabled(ledgerParams.TaxWithholdEnableCurrencyExchRate);
                design.controlName(formControlStr(LedgerParameters, WithholdingTaxCurrency_TaxWithholdCalcDateType)).enabled(ledgerParams.TaxWithholdEnableCurrencyExchRate);
            }
        }

        FormGroupControl electronicReportingWHT_EG = design.controlName(formControlStr(LedgerParameters, ElectronicReportingWHT_EG)) as FormGroupControl;
        if (electronicReportingWHT_EG)
        {
            electronicReportingWHT_EG.visible(taxWithholdingGlobalFeatureEnabled);
        }

        FormGroupControl whtOnChargeCode = design.controlName(formControlStr(LedgerParameters, WHTOnChargeCode)) as FormGroupControl;
        if (whtOnChargeCode)
        {
            whtOnChargeCode.visible(taxWithholdingGlobalFeatureEnabled);
        }

        TaxWithholdParameters taxWitholdParameters;
        if (isGlobalWHTFeatureEnabled || isWHTSupportedInCountryRegion)
        {
            taxWitholdParameters = TaxWithholdParameters::find();
            design.controlName(formControlStr(LedgerParameters, TaxWithholdParameters_CheckIntersection)).enabled(taxWitholdParameters.EnableCalcWHTInInvoice);
        }
        NumberSeqMissingVoucherTabPage.visible(FeatureStateProvider::isFeatureEnabled(NumberSeqMissingVoucherFECFeature::instance()));

        FormTabPageControl taxYearlyComSetup_ITTabPage = design.controlName(formControlStr(LedgerParameters, TaxYearlyComSetup_IT)) as FormTabPageControl;
        if (taxYearlyComSetup_ITTabPage)
        {
            taxYearlyComSetup_ITTabPage.visible(new TaxBookToggle().isEnabled());
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerParametersElectronicReporting_UK_TaxReportFormatMappingID_UK_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// LedgerParameters ElectronicReporting_UK_TaxReportFormatMappingID_UK form control OnLookup event handler for the LedgerParameters form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(LedgerParameters, ElectronicReporting_UK_TaxReportFormatMappingID_UK), FormControlEventType::Lookup)]
    public static void LedgerParametersElectronicReporting_UK_TaxReportFormatMappingID_UK_OnLookup(FormControl _sender, FormControlEventArgs _e)
    {
        ERFormatMappingTable::lookup(
            _sender,
            VATDeclarationServiceER_W::ERModelName,
            VATDeclarationServiceER_W::ERFormatRootDefinition);

        FormControlCancelableSuperEventArgs ce = _e as FormControlCancelableSuperEventArgs;
        if (ce)
        {
            ce.CancelSuperCall();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerParametersFinancialReporting_GLStatementByMainAccountFormat_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// LedgerParameters FinancialReporting_GLStatementByMainAccountFormat form control OnLookup event handler for the LedgerParameters form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(LedgerParameters, FinancialReporting_GLStatementByMainAccountFormat), FormControlEventType::Lookup)]
    public static void LedgerParametersFinancialReporting_GLStatementByMainAccountFormat_OnLookup(FormControl _sender, FormControlEventArgs _e)
    {
        ERFormatMappingTable::lookup(
            _sender,
            GLStatementByMainAccountService::ERModelName,
            GLStatementByMainAccountService::ERFormatRootDefinition);

        FormControlCancelableSuperEventArgs ce = _e as FormControlCancelableSuperEventArgs;
        if (ce)
        {
            ce.CancelSuperCall();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerParametersFinancialReporting_AccountingBasisERFormatMappingId_DK_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// LedgerParameters FinancialReporting_AccountingBasisERFormatMappingId_DK form control OnLookup event handler for the LedgerParameters form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(LedgerParameters, FinancialReporting_AccountingBasisERFormatMappingId_DK), FormControlEventType::Lookup)]
    public static void LedgerParametersFinancialReporting_AccountingBasisERFormatMappingId_DK_OnLookup(FormControl _sender, FormControlEventArgs _e)
    {
        ERFormatMappingTable::lookup(
            _sender,
            AccountingBasisReportService_DK::ERModelName,
            AccountingBasisReportService_DK::ERFormatRootDefinition);

        FormControlCancelableSuperEventArgs formControlCancelableArgs = _e as FormControlCancelableSuperEventArgs;
        if (formControlCancelableArgs)
        {
            formControlCancelableArgs.CancelSuperCall();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>