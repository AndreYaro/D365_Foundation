<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rCashTransType</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rCashTransType
{
    RCashTrans          cashTrans;
    RCashParameters     cashParameters;
    OfficialsTrans_RU   offTransCashe;

    PayeeDocument_RU    payeeDocumentCashe;
    EmplName            emplNameCashe;
    EmplName            emplName_LT;
    LanguageId          languageId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>analysisDimensionValueId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a ledger dimension value record for specified in table <c>RCashParameters</c>
    ///    record of table<c>DimensionAttribute</c>.
    /// </summary>
    /// <returns>
    ///    A ledger dimension value record for the specified record <c>DimensionAttribute</c>.
    /// </returns>
    public RecId analysisDimensionValueId()
    {
        return DimensionAttributeValueSetStorage::find(
            LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(cashTrans.LedgerDimension)).getValueByDimensionAttribute(cashParameters.AnalysisDimensionAttribute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachement</Name>
				<Source><![CDATA[
    public PayeeDocument_RU attachement()
    {
        return strFmt("@GLS106646",
                cashTrans.AttachmentNum,
               (cashTrans.AttachementDate ? strFmt("@GLS102354", cashTrans.AttachementDate) : ""));
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashTrans</Name>
				<Source><![CDATA[
    public RCashTrans cashTrans()
    {
        return cashTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>departmentDimensionValueId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a ledger dimension value record for specified in table <c>RCashParameters</c>
    ///    record of table<c>DimensionAttribute</c>.
    /// </summary>
    /// <returns>
    ///    A ledger dimension value record for the specified record <c>DimensionAttribute</c>.
    /// </returns>
    public RecId departmentDimensionValueId()
    {
        return DimensionAttributeValueSetStorage::find(
            LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(cashTrans.LedgerDimension)).getValueByDimensionAttribute(cashParameters.DepartmentDimensionAttribute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>departmentDimensionValueName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the name of specified dimension attribute.
    /// </summary>
    /// <returns>
    ///    String value of name for specified record of table <c>DimensionAttribute</c>.
    /// </returns>
    public str departmentDimensionValueName()
    {
        DimensionAttributeValue dimensionAttributeValue = DimensionAttributeValue::find(this.departmentDimensionValueId());
        ;
        return dimensionAttributeValue ? dimensionAttributeValue.getName(): '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>docId</Name>
				<Source><![CDATA[
    public RCashDocId docId()
    {
        return cashTrans.DocId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>docType</Name>
				<Source><![CDATA[
    public RCashDocType docType()
    {
        return cashTrans.DocType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRepresPersonName_LT</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the representative person's name from locally cached variable
    ///     if available; calls <c>represPersonName_LT</c> method, otherwise.
    /// </summary>
    /// <returns>
    ///     Representative person's name.
    /// </returns>
    public EmplName getRepresPersonName_LT()
    {
        if (! emplName_LT)
        {
            emplName_LT = RCashTransType::represPersonName_LT(cashTrans.DocRepresPersonId,
                                                              cashTrans.OffsetAccountType,
                                                              cashTrans.OffsetAccountNum(),
                                                              cashTrans.DocRepresType);
        }
        return emplName_LT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RCashTrans _cashtrans)
    {
        cashtrans = _cashtrans;
        cashParameters = RCashParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>offAccountantName</Name>
				<Source><![CDATA[
    public Name offAccountantName()
    {
        return OfficialsTrans_RU::findSessionId(cashtrans.OffsessionId,
                                                OffPosition_RU::Accountant).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offCashierName</Name>
				<Source><![CDATA[
    public Name offCashierName()
    {
        return OfficialsTrans_RU::findSessionId(cashtrans.OffsessionId,
                                                OffPosition_RU::Cashier).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offDirectorName</Name>
				<Source><![CDATA[
    public Name offDirectorName()
    {
        if (! offTransCashe)
        {
            offTransCashe = OfficialsTrans_RU::findSessionId(cashtrans.OffsessionId,
                                                OffPosition_RU::Director);
        }
        return offTransCashe.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offDirectorTitle</Name>
				<Source><![CDATA[
    public TitleId offDirectorTitle()
    {
        if (! offTransCashe)
        {
            offTransCashe = OfficialsTrans_RU::findSessionId(cashtrans.OffsessionId,
                                                OffPosition_RU::Director);
        }
        return offTransCashe.Title;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountName</Name>
				<Source><![CDATA[
    public AccountName offsetAccountName()
    {
        AccountName ret;

        switch (cashtrans.OffsetAccountType)
        {
            case LedgerJournalACType::Bank:
                ret = BankAccountTable::name(cashtrans.offsetAccountNum());
                break;
            case LedgerJournalACType::Cust:
                ret = CustTable::find(cashtrans.offsetAccountNum()).name();
                break;
            case LedgerJournalACType::Vend:
                ret = VendTable::find(cashtrans.offsetAccountNum()).name();
                break;
            case LedgerJournalACType::Employee_RU:
                ret = EmployeeTable_RU::findByEmployeeId(cashtrans.offsetAccountNum()).employeeName();
                break;
            case LedgerJournalACType::Project:
                ret = ProjTable::find(cashtrans.offsetAccountNum()).Name;
                break;
            case LedgerJournalACType::FixedAssets_RU :
                ret = AssetTable::find(cashtrans.offsetAccountNum()).Name;
                break;
            case LedgerJournalACType::RDeferrals :
                ret = RDeferralsTable::find(cashtrans.offsetAccountNum()).Name;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLanguageID</Name>
				<Source><![CDATA[
    public LanguageId parmLanguageID(LanguageId _languageId = languageId)
    {
        ;
        languageId = _languageId;
        return languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purposeDimensionValueId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a ledger dimension value record for specified in table <c>RCashParameters</c>
    ///    record of table<c>DimensionAttribute</c>.
    /// </summary>
    /// <returns>
    ///    A ledger dimension value record for the specified record <c>DimensionAttribute</c>.
    /// </returns>
    public RecId purposeDimensionValueId()
    {
        return DimensionAttributeValueSetStorage::find(
                    LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(cashtrans.LedgerDimension)).getValueByDimensionAttribute(cashParameters.PurposeDimensionAttribute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>represPersonCard</Name>
				<Source><![CDATA[
    public PayeeDocument_RU represPersonCard()
    {
        if (! payeeDocumentCashe)
        {
            if (cashTrans.RepresPersonName_W && cashTrans.RepresPersonCard_W)
            {
                emplNameCashe = cashTrans.RepresPersonName_W;
                payeeDocumentCashe = cashTrans.RepresPersonCard_W;
            }
            else
            {
                [ emplNameCashe, payeeDocumentCashe ] = RCashTransType::represPersonNameCard(cashtrans.DocRepresPersonId,
                                                                                             cashtrans.OffsetAccountType,
                                                                                             cashtrans.offsetAccountNum(),
                                                                                             cashtrans.DocRepresType,
                                                                                             languageId);
            }
        }

        return payeeDocumentCashe;
    }

]]></Source>
			</Method>
			<Method>
				<Name>represPersonName</Name>
				<Source><![CDATA[
    public EmplName represPersonName()
    {
        if (! emplNameCashe)
        {
            if (cashTrans.RepresPersonName_W && cashTrans.RepresPersonCard_W)
            {
                emplNameCashe = cashTrans.RepresPersonName_W;
                payeeDocumentCashe = cashTrans.RepresPersonCard_W;
            }
            else
            {
                [ emplNameCashe, payeeDocumentCashe ] = RCashTransType::represPersonNameCard(cashtrans.DocRepresPersonId,
                                                                                             cashtrans.OffsetAccountType,
                                                                                             cashtrans.offsetAccountNum(),
                                                                                             cashtrans.DocRepresType,
                                                                                             languageId);
            }
        }

        return emplNameCashe;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTaxAmount</Name>
				<Source><![CDATA[
    public TaxAmount salesTaxAmount()
    {
        return CurrencyExchangeHelper::amount(cashtrans.AmountCur * cashtrans.DocSalesTaxValue / (100 + cashtrans.DocSalesTaxValue), cashtrans.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatAmount</Name>
				<Source><![CDATA[
    public TaxAmount vatAmount()
    {
        AmountCur salesTaxAmount = this.salesTaxAmount();
        ;

        return CurrencyExchangeHelper::amount((cashtrans.AmountCur - salesTaxAmount) * cashtrans.DocTaxValue / (100 + cashtrans.DocTaxValue), cashtrans.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the specified offset ledger dimension of <c>LedgerJournalTrans</c> table record.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// Specify a record of <c>LedgerJournalTrans</c> table.
    /// </param>
    /// <returns>
    ///  A <c>LedgerDimensionDefaultAccount</c> record.
    /// </returns>
    public static LedgerDimensionDefaultAccount offsetLedgerDimension(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerDimensionDefaultAccount ret;
        LedgerJournalACType           accountType;
        LedgerJournalAC               account;
        LedgerDimensionAccount        ledgerDimension;
        PostingProfile                postingProfile;
        LedgerJournalTrans_RAsset     ledgerJournalTrans_RAsset;
        LedgerJournalTrans_RDeferrals ledgerJournalTrans_RDeferrals;

        if (_ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::RCash)
        {
            ledgerDimension = _ledgerJournalTrans.OffsetLedgerDimension;
            account         = _ledgerJournalTrans.parmOffsetAccount();
            accountType     = _ledgerJournalTrans.OffsetAccountType;
            postingProfile  = _ledgerJournalTrans.OffsetPostingProfile_RU;
        }
        else
        {
            ledgerDimension = _ledgerJournalTrans.orig().LedgerDimension;
            account         = _ledgerJournalTrans.orig().parmAccount();
            accountType     = _ledgerJournalTrans.orig().AccountType;
            postingProfile  = _ledgerJournalTrans.orig().PostingProfile;
        }

        try
        {
            switch(accountType)
            {
                case LedgerJournalACType::Ledger :
                    ret = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(ledgerDimension);
                    break;

                case LedgerJournalACType::Cust :
                    ret = CustLedgerAccounts::summaryLedgerDimension(account, postingProfile);
                    break;

                case LedgerJournalACType::Vend :
                    ret = VendLedgerAccounts::summaryLedgerDimension(account, postingProfile);
                    break;

                case LedgerJournalACType::Bank :
                    ret = BankAccountTable::findLedgerDimension(account);
                    break;

                case LedgerJournalACType::Employee_RU :
                    ret = EmplLedgerAccounts_RU::summaryLedgerDimension(account, postingProfile, false);
                    break;

                case LedgerJournalACType::RCash :
                    ret = RCashLedgerAccount::summaryLedgerDimension(account, postingProfile);
                    break;

                case LedgerJournalACType::FixedAssets_RU :
                    ledgerJournalTrans_RAsset = LedgerJournalTrans_RAsset::find(_ledgerJournalTrans.RecId);
                    ret = ledgerJournalTrans_RAsset.DebLedgerDimension ? ledgerJournalTrans_RAsset.DebLedgerDimension :
                                    RAssetStandards::find(_ledgerJournalTrans.parmAccount(),
                                                          ledgerJournalTrans_RAsset.StandardId ? ledgerJournalTrans_RAsset.StandardId : RAssetParameters::standardIdDefault()).
                                                                assetLedgerDimension(ledgerJournalTrans_RAsset.StandardId,
                                                                                     postingProfile,
                                                                                     ledgerJournalTrans_RAsset.TransType);
                    break;
                case LedgerJournalACType::RDeferrals :
                    ledgerJournalTrans_RDeferrals = LedgerJournalTrans_RDeferrals::find(_ledgerJournalTrans.RecId);
                    ret = ledgerJournalTrans_RDeferrals.LedgerDimension ?
                            ledgerJournalTrans_RDeferrals.LedgerDimension :
                            RDeferralsLedgerAccounts::deferralsLedgerDim(_ledgerJournalTrans.parmAccount(),
                                                                         ledgerJournalTrans_RDeferrals.TransType,
                                                                         ledgerJournalTrans_RDeferrals.BookId);
                    break;
            }
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>represPersonName_LT</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Retrieves the representative person's name based on the cash transaction record values.
    /// </summary>
    /// <param name="_personId">
    ///     The identifier for the person.
    /// </param>
    /// <param name="_ledgerJournalACType">
    ///     The account type.
    /// </param>
    /// <param name="_ledgerJournalAC">
    ///     The account number.
    /// </param>
    /// <param name="_represType">
    ///     The representative person type.
    /// </param>
    /// <returns>
    ///     Representative person's name.
    /// </returns>
    #define.Comma(', ')
    #define.SemiColon('; ')
    #define.WhiteSpace(' ')
    #localMacro.StrConcatenateWithDelimiter
        (%1 ? %1 + %2 : "")
    #endmacro
    #define.txtlv("; " + "@GLS108430" + " ")
    public static EmplName represPersonName_LT(
        RCashDocRepresPersonId _personId,
        LedgerJournalACType    _ledgerJournalACType,
        LedgerJournalAC        _ledgerJournalAC,
        RCashDocRepresType     _represType = RCashDocRepresType::Employee)
    {
        ContactPerson       contactPerson;
        EmployeeTable_RU    employeeTable;
        CustTable           custTable;
        VendTable           vendTable;
        EmplName            represName;
        LvOtherClients      otherClients;
        HcmTitleId          titleId;
        TaxRegistrationNumber primaryRegNum;

        switch (_represType)
        {
            case RCashDocRepresType::Employee   :
                switch (_ledgerJournalACType)
                {
                    case LedgerJournalACType::Cust :
                        contactPerson = ContactPerson::find(_personId);
                        custTable     = CustTable::find(_ledgerJournalAC);
                        primaryRegNum = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID);
                        represName    = custTable.name() +
                                      (primaryRegNum ? #Comma +"@GLS111007" + primaryRegNum +#Comma : #SemiColon +
                                      #StrConcatenateWithDelimiter(contactPerson.Title, #WhiteSpace) + contactPerson.personName());
                        break;

                    case LedgerJournalACType::Vend :
                        contactPerson = ContactPerson::find(_personId);
                        vendTable     = VendTable::find(_ledgerJournalAC);
                        primaryRegNum = vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID);
                        represName    = vendTable.name() +
                                      (primaryRegNum ? #Comma +"@GLS111007" + primaryRegNum +#Comma : #SemiColon +
                                      #StrConcatenateWithDelimiter(contactPerson.Title, #WhiteSpace) + contactPerson.personName());
                        break;

                    default:
                        employeeTable = EmployeeTable_RU::findByEmployeeId(_personId);
                        titleId       = HcmTitle::find(HcmWorkerTitle::findByWorker(employeeTable.worker().RecId).Title).TitleId;
                        represName    = #StrConcatenateWithDelimiter(titleId, #WhiteSpace) + employeeTable.employeeName();
                        break;

                }
                break;
            case RCashDocRepresType::Other :
                if (_personId)
                {
                    otherClients = LvOtherClients::find(_personId);
                    represName = otherClients.name() + #txtlv + otherClients.vatNum;
                }
                break;
            case RCashDocRepresType::Vendor :
                if (_personId)
                {
                    vendTable = VendTable::find(_personId);
                    primaryRegNum = vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID);
                    represName = vendTable.name() +
                                  (primaryRegNum?  #Comma +"@GLS111007" + primaryRegNum +#Comma : "");
                }
                break;
            case RCashDocRepresType::Customer :
                if (_personId)
                {
                    custTable = CustTable::find(_personId);
                    primaryRegNum = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID);
                    represName = custTable.name() +
                                  (primaryRegNum ? #Comma +"@GLS111007" + primaryRegNum : "");
                }
                break;
        }

        return represName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>represPersonNameCard</Name>
				<Source><![CDATA[
    // returns [Name, PassportStr]
    public static container represPersonNameCard(
        RCashDocRepresPersonId _personId,
        LedgerJournalACType    _ledgerJournalACType,
        LedgerJournalAC        _ledgerJournalAC,
        RCashDocRepresType     _represType = RCashDocRepresType::Employee,
        LanguageId             _languageId = "")
    {
        str txt1 = '. ' + (_languageId ? SysLabel::labelId2String(literalStr("@GLS102471"),  _languageId) : "@GLS102471")  + ': ';
        str txt2 = '; ' + (_languageId ? SysLabel::labelId2String(literalStr("@GLS108430"), _languageId) : "@GLS108430") + ' ';

        ContactPerson       contactPerson;
        Name                companyName;
        container           ret;
        EmployeeTable_RU    employeeTable;
        LvOtherClients      otherClients;

        if (_represType == RCashDocRepresType::Employee)
        {
            switch (_ledgerJournalACType)
            {
                case LedgerJournalACType::Employee_RU,
                     LedgerJournalACType::Ledger:
                    employeeTable = EmployeeTable_RU::findByEmployeeId(_personId);
                    ret = [ employeeTable.employeeName(), employeeTable.identityCardFull() ];
                    break;

                case LedgerJournalACType::Cust,
                     LedgerJournalACType::Vend :
                    contactPerson = ContactPerson::find(_personId);
                    companyName   = _ledgerJournalACType == LedgerJournalACType::Cust ?
                                    CustTable::find(_ledgerJournalAC).name() :
                                    VendTable::find(_ledgerJournalAC).name();
                    companyName   = companyName + (contactPerson.RecId ? txt1  + contactPerson.personName() : "");
                    ret = [companyName, contactPerson.PayeeDocument_RU];
                    break;
                case LedgerJournalACType::Bank:
                    employeeTable = EmployeeTable_RU::findByEmployeeId(_personId);
                    ret = [BankAccountTable::name(_ledgerJournalAC) +
                                           (employeeTable.RecId ? txt1 + employeeTable.employeeName() : ""),
                                           employeeTable.identityCardFull()];

                    break;

                default :
                    ret = ["", ""];
            }
        }
        else
        {
            if (_personId)
            {
                ret = RCashTransType::getNameCardByPersonId(_personId, txt2, _represType);
            }
            else
            {
                switch (_ledgerJournalACType)
                {
                    case LedgerJournalACType::Ledger :
                        ret = [MainAccount::getLocalizedNameByMainAccountId(_ledgerJournalAC), ""];
                        break;

                    case LedgerJournalACType::Bank :
                        ret = [BankAccountTable::name(_ledgerJournalAC) + txt2 + BankAccountTable::regNum(_ledgerJournalAC), ""];
                        break;

                    case LedgerJournalACType::Vend :
                        ret = [VendTable::find(_ledgerJournalAC).name() + txt2 + VendTable::find(_ledgerJournalAC).vatNum, ""];
                        break;

                    case LedgerJournalACType::Cust :
                        ret = [CustTable::find(_ledgerJournalAC).name() + txt2 + CustTable::find(_ledgerJournalAC).vatNum, ""];
                        break;

                    default :
                        ret = ["", ""];
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNameCardByPersonId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns name card of the person based on <c>RCashDocRepresType</c>.
    /// </summary>
    /// <param name = "_personId">
    ///    Identifier of the person.
    /// </param>
    /// <param name = "_sep">
    ///    Separator of the name card.
    /// </param>
    /// <param name = "_represType">
    ///    <c>RCashDocRepresType</c> based on which the card is selected.
    /// </param>
    /// <returns>
    ///    <c>container</c> that represents the name card.
    /// </returns>
    protected static container getNameCardByPersonId(RCashDocRepresPersonId _personId, str _sep, RCashDocRepresType _represType)
    {
        container ret;

        switch (_represType)
        {
            case RCashDocRepresType::Other :
                LvOtherClients otherClients;
                otherClients = LvOtherClients::find(_personId);
                ret = [otherClients.name() + _sep + otherClients.vatNum, ""];
                break;
            case RCashDocRepresType::Vendor :
                ret = [VendTable::find(_personId).name() + _sep + VendTable::find(_personId).vatNum , ""];
                break;
            case RCashDocRepresType::Customer :
                ret = [CustTable::find(_personId).name() + _sep + CustTable::find(_personId).vatNum, ""];
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>