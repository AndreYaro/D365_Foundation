<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InfAdjSimulationDP_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InfAdjSimulationDP_MX</c> class is the Report Data Provider class for the
///    <c>InflationAdjustmentSimulation_MX</c> SSRS report.
/// </summary>
/// <remarks>
///    This is the Report Data Provider class for the <c>InflationAdjustmentSimulation_MX</c> SSRS report.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(InfAdjSimulationContract_MX))
]
class InfAdjSimulationDP_MX extends SRSReportDataProviderBase
{
    CapitalAdjReportTmp_MX          simulationReportTmp;
    FromDate                        fromDate;
    ToDate                          toDate;
    AdjustmentMethod_MX             adjustmentMethod;
    NoYesId                         all;
    container                       conRepomoMonthlyAdjustment;
    container                       conDifference;
    RepomoReportTmp_MX              repomoReportTmp;
    MainAccountNum                  fromMainAccount;
    MainAccountNum                  toMainAccount;

    #InfAdj_SSRSParameters_MX
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAllAdjustmentMethods</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates inflation adjustments for the opening balance, monthly balance, balance, and transaction
    ///    date when the All checkbox is enabled.
    /// </summary>
    /// <remarks>
    ///    This method calculates inflation adjustments for all adjustment methods and fills the
    ///    <c>CapitalAdjReportTmp_MX</c> temporary table for a simulation report.
    /// </remarks>
    private void calculateAllAdjustmentMethods()
    {
        this.calculateOpenBalance();
        this.calculateMonthBalance();
        this.calculateTransDate();
        this.calculateBalance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates inflation adjustment for accounts by using a method that adjusts the balance value and
    /// then fills in the temporary table.
    /// </summary>
    /// <remarks>
    /// Fills the <c>CapitalAdjReportTmp_MX</c> temporary table with adjustment values for accounts that
    /// have a method that adjusts the balance value and are marked for inflation adjustment.
    /// </remarks>
    private void calculateBalance()
    {
        MainAccount                             mainAccount;
        InpcRate_MX                             rateOfToDate;
        InpcRate_MX                             prevRate;
        real                                    adjustmentRatio;
        CurrencyCode                            currencyCode;
        boolean                                 insertedCurrencyCode = false;
        FromDate                                startingDate;
        ToDate                                  endingDate;
        FromDate                                startOfYear;
        Amount                                  transAmountBeforeFromDate;
        Amount                                  openingBalanceStartOfYear;
        Amount                                  openingBalanceCurrentMonth;
        Amount                                  transAmountCurrentMonth;
        Amount                                  closingBalance;
        int                                     diffInMonths;
        int                                     currentMonth;
        FromDate                                startDate;
        ToDate                                  endDate;
        DimensionAttributeValueCombination      dimensionAttributeValueCombination;
        GeneralJournalAccountEntry              generalJournalAccountEntry;

        startingDate = fromDate;
        endingDate   = toDate;

        rateOfToDate = this.getInflationRate(mthofyr(toDate), year(toDate));
        prevRate     = this.getInflationRate(mthofyr(mkdate(1, mthofyr(toDate), year(toDate)) - 1), year(mkdate(1, mthofyr(toDate), year(toDate)) - 1));

        adjustmentRatio = decround((rateOfToDate / prevRate), 4);
        currencyCode    = Ledger::accountingCurrency();
        startOfYear     = LedgerFiscalCalendar::findOpeningPeriodStartDateByDate(CompanyInfoHelper::fiscalCalendarRecId(), startingDate);

        diffInMonths = InfAdjValidation_MX::monthDifference(startingDate, endingDate);

        while select Type, RecId from mainAccount
            where mainAccount.InflationAdjustment_MX
               && mainAccount.AdjustmentMethod_MX == AdjustmentMethod_MX::Balance
               && ((!fromMainAccount || mainAccount.MainAccountId >= fromMainAccount)
               && (!toMainAccount || mainAccount.MainAccountId <= toMainAccount))
        {
            while select DisplayValue, RecId
                from  dimensionAttributeValueCombination
                exists join LedgerDimension from generalJournalAccountEntry
                where dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
                   && dimensionAttributeValueCombination.MainAccount == mainAccount.RecId
            {
                simulationReportTmp.DisplayValue     = dimensionAttributeValueCombination.DisplayValue;
                simulationReportTmp.MainAccountName  = MainAccount::getLocalizedName(mainAccount.RecId);
                simulationReportTmp.AdjustmentMethod = AdjustmentMethod_MX::Balance;
                simulationReportTmp.TransDate        = toDate;
                simulationReportTmp.TransMonthInpc   = rateOfToDate;
                simulationReportTmp.InflationRatio   = adjustmentRatio;
                startDate    = startingDate;
                endDate      = endmth(startDate);

                openingBalanceStartOfYear = 0;
                transAmountBeforeFromDate = 0;
                currentMonth = 1;

                openingBalanceStartOfYear = this.getAccountingCurrencyAmount(startOfYear, endmth(startOfYear), mainAccount.RecId, FiscalPeriodType::Opening, dimensionAttributeValueCombination.DisplayValue);

                if (startOfYear != startingDate)
                {
                    transAmountBeforeFromDate = this.getAccountingCurrencyAmount(startOfYear, startingDate - 1, mainAccount.RecId, FiscalPeriodType::Operating, dimensionAttributeValueCombination.DisplayValue);
                }
                openingBalanceCurrentMonth = openingBalanceStartOfYear + transAmountBeforeFromDate;
                closingBalance             = 0;

                while (currentMonth <= diffInMonths)
                {
                    transAmountCurrentMonth = 0;
                    transAmountCurrentMonth = this.getAccountingCurrencyAmount(startDate, endDate, mainAccount.RecId, FiscalPeriodType::Operating, dimensionAttributeValueCombination.DisplayValue);
                    closingBalance          = closingBalance + transAmountCurrentMonth;

                    startDate = endDate + 1;
                    endDate   = endmth(startDate);
                    currentMonth++;
                }

                closingBalance = closingBalance + openingBalanceCurrentMonth;
                simulationReportTmp.TransAmount      =  closingBalance;

                simulationReportTmp.AdjustedAmount   = (simulationReportTmp.TransAmount * adjustmentRatio) - simulationReportTmp.TransAmount;
                if (!insertedCurrencyCode)
                {
                    simulationReportTmp.CurrencyCode = currencyCode;
                    insertedCurrencyCode             = true;
                }

                if (simulationReportTmp.TransAmount)
                {
                    simulationReportTmp.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMonthBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates inflation adjustment for the profit and loss accounts and fills in the temporary table.
    /// </summary>
    /// <remarks>
    ///    Fills the <c>CapitalAdjReportTmp_MX</c> temporary table with the monthly balances of profit and
    ///    loss accounts that are marked for inflation adjustment and are calculated on the monthly balances.
    /// </remarks>
    private void calculateMonthBalance()
    {
        RepomoReportTmp_MX              repomoReportPLTmp;
        RepomoReportTmp_MX              repomoPLTmp;
        InfAdjMethod_MonthBalance_MX    infAdjMethod_Monthbalance;
        Counter                         noOfMonths;
        int                             monthDiff;
        FromDate                        startDate;
        InpcRate_MX                     rateOfToDate;
        CurrencyCode                    currencyCode;
        boolean                         insertedCurrencyCode = false;

        Amount getMonthlyBalance(int _noOfMonths)
        {
            switch (_noOfMonths)
            {
                case 1: return repomoPLTmp.BalanceMonth1;
                case 2: return repomoPLTmp.BalanceMonth2;
                case 3: return repomoPLTmp.BalanceMonth3;
                case 4: return repomoPLTmp.BalanceMonth4;
                case 5: return repomoPLTmp.BalanceMonth5;
                case 6: return repomoPLTmp.BalanceMonth6;
                case 7: return repomoPLTmp.BalanceMonth7;
                case 8: return repomoPLTmp.BalanceMonth8;
                case 9: return repomoPLTmp.BalanceMonth9;
                case 10: return repomoPLTmp.BalanceMonth10;
                case 11: return repomoPLTmp.BalanceMonth11;
                case 12: return repomoPLTmp.BalanceMonth12;
                default: return 0;
            }
        }

        #InflationAdjustment_MX

        infAdjMethod_Monthbalance = InfAdjMethod_MX::construct(AdjustmentMethod_MX::MonthlyBalance);
        currencyCode              = Ledger::accountingCurrency();

        //P&L calculation
        infAdjMethod_Monthbalance.parmConRepomoMonthlyAdjustment(conRepomoMonthlyAdjustment);
        if (fromMainAccount && toMainAccount)
        {
            infAdjMethod_Monthbalance.parmFromMainAccount(fromMainAccount);
            infAdjMethod_Monthbalance.parmToMainAccount(toMainAccount);
        }
        repomoReportPLTmp = infAdjMethod_Monthbalance.populateTmpTable(fromDate, toDate);
        repomoPLTmp.setTmpData(repomoReportPLTmp);

        monthDiff = InfAdjValidation_MX::monthDifference(fromDate, toDate);
        rateOfToDate = this.getInflationRate(mthofyr(toDate), year(toDate));

        while select repomoPLTmp
            where repomoPLTmp.ReportType == #PL
        {
            noOfMonths = 1;
            startDate = fromDate;

            for (noOfMonths = 1; noOfMonths <= monthDiff; noOfMonths++)
            {
                simulationReportTmp.DisplayValue     = repomoPLTmp.DisplayValue;
                simulationReportTmp.MainAccountName  = repomoPLTmp.MainAccountName;
                simulationReportTmp.AdjustmentMethod = AdjustmentMethod_MX::MonthlyBalance;
                simulationReportTmp.TransDate        = startDate;
                simulationReportTmp.TransAmount      = getMonthlyBalance(noOfMonths);
                simulationReportTmp.TransMonthInpc   = this.getInflationRate(mthofyr(startDate), year(startDate));
                simulationReportTmp.InflationRatio   = decround((rateOfToDate / simulationReportTmp.TransMonthInpc), 4);
                simulationReportTmp.AdjustedAmount   = CurrencyExchange::round(((simulationReportTmp.TransAmount * simulationReportTmp.InflationRatio) - simulationReportTmp.TransAmount), currencyCode);
                if (!insertedCurrencyCode)
                {
                    simulationReportTmp.CurrencyCode = currencyCode;
                    insertedCurrencyCode             = true;
                }

                if (simulationReportTmp.TransAmount)
                {
                    simulationReportTmp.insert();
                }

                startDate = endmth(startDate) + 1;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOpenBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates inflation adjustment for REPOMO accounts and fills in the temporary table.
    /// </summary>
    /// <remarks>
    ///    Fills the <c>CapitalAdjReportTmp_MX</c> temporary table with the consolidated amount of asset and
    ///    liability assets that are marked for inflation adjustment and calculated on the consolidated
    ///    amount. These values are inserted into the temporary table as REPOMO accounts.
    /// </remarks>
    private void calculateOpenBalance()
    {
        int                             conLength;
        LedgerDimensionDefaultAccount   repomoAccount;
        MainAccount                     mainAccount;
        FromDate                        startDate;
        InpcRate_MX                     currentRate;
        InpcRate_MX                     prevRate;
        TransDate                       transDate;
        CurrencyCode                    currencyCode;
        boolean                         insertedCurrencyCode = false;

        //Repomo calculation
        this.populateRepomoTmpForOpenBalance();

        currencyCode  = Ledger::accountingCurrency();
        repomoAccount = LedgerParameters::find().RepomoMainAccount_MX;
        if (repomoAccount)
        {
            mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(repomoAccount);
            if (!mainAccount)
            {
                throw error("@SYS312852");
            }
        }
        else
        {
            throw error("@SYS312852");
        }

        startDate = fromDate;
        for (conLength = 1; conLength <= InfAdjValidation_MX::monthDifference(fromDate, toDate) + 1; conLength ++)
        {
            transDate = startDate - 1;
            simulationReportTmp.DisplayValue = mainAccount.MainAccountId;
            simulationReportTmp.MainAccountName = mainAccount.localizedName();
            simulationReportTmp.AdjustmentMethod = AdjustmentMethod_MX::OpenBalance;
            simulationReportTmp.TransDate = mkdate(1, mthofyr(transDate), year(transDate));
            currentRate = this.getInflationRate(mthofyr(transDate), year(transDate));
            prevRate = conLength > 1 ? this.getInflationRate(mthofyr((mkdate(1, mthofyr(transDate), year(transDate))) - 1), year(mkdate(1, mthofyr(transDate), year(transDate)) - 1)) : 0;
            simulationReportTmp.TransMonthInpc = currentRate;
            simulationReportTmp.TransAmount = conpeek(conDifference, conLength);
            simulationReportTmp.InflationRatio = conLength > 1 ? decround(((currentRate - prevRate) / prevRate), 4) : 0;
            simulationReportTmp.AdjustedAmount = CurrencyExchange::round(((simulationReportTmp.TransAmount * simulationReportTmp.InflationRatio)), currencyCode);

            if (!insertedCurrencyCode)
            {
                simulationReportTmp.CurrencyCode = currencyCode;
                insertedCurrencyCode = true;
            }

            if (simulationReportTmp.TransAmount)
            {
                simulationReportTmp.insert();
            }

            startDate = endmth(startDate) + 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates inflation adjustment for accounts that have a method to adjust the transaction date and
    ///    then fills in the temporary table.
    /// </summary>
    /// <remarks>
    ///    Fills the <c>CapitalAdjReportTmp_MX</c> temporary table with adjustment values for accounts that
    ///    have a method to adjust the transaction date and are marked for inflation adjustment.
    /// </remarks>
    private void calculateTransDate()
    {
        MainAccount                             mainAccount;
        GeneralJournalEntry                     generalJournalEntry;
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        DimensionAttributeValueCombination      dimensionAttributeValueCombination;
        FromDate                                startDate;
        ToDate                                  endDate;
        InpcRate_MX                             rateOfToDate;
        CurrencyCode                            currencyCode;
        boolean                                 insertedCurrencyCode = false;
        FiscalCalendarPeriod                    fiscalCalendarPeriod;

        rateOfToDate = this.getInflationRate(mthofyr(toDate), year(toDate));
        currencyCode = Ledger::accountingCurrency();

        while select Name, Type, RecId from mainAccount
            where mainAccount.InflationAdjustment_MX
               && mainAccount.AdjustmentMethod_MX == AdjustmentMethod_MX::TransactionDate
               && ((!fromMainAccount || mainAccount.MainAccountId >= fromMainAccount)
               && (!toMainAccount || mainAccount.MainAccountId <= toMainAccount))
               && (mainAccount.Type               == DimensionLedgerAccountType::BalanceSheet
               || mainAccount.Type                == DimensionLedgerAccountType::Asset
               || mainAccount.Type                == DimensionLedgerAccountType::Liability
               || mainAccount.Type                == DimensionLedgerAccountType::Equity)
        {
            simulationReportTmp.AdjustmentMethod = AdjustmentMethod_MX::TransactionDate;

            select * from generalJournalAccountEntry
                join RecId from dimensionAttributeValueCombination
                    where dimensionAttributeValueCombination.RecId       == generalJournalAccountEntry.LedgerDimension
                       && dimensionAttributeValueCombination.MainAccount == mainAccount.RecId
                join RecId, minof(AccountingDate) from generalJournalEntry
                    where generalJournalEntry.RecId                      == generalJournalAccountEntry.GeneralJournalEntry;

            if (generalJournalEntry.AccountingDate)
            {
                startDate            = generalJournalEntry.AccountingDate;
                endDate              = endmth(startDate);
            }

            while (endDate <= toDate)
            {
                simulationReportTmp.TransDate    = startDate;
                simulationReportTmp.TransAmount  = 0;

                select sum(AccountingCurrencyAmount) from generalJournalAccountEntry
                    where generalJournalAccountEntry.PostingType != LedgerPostingType::InflationAdjustment_MX
                    join RecId, DisplayValue from dimensionAttributeValueCombination
                        group by dimensionAttributeValueCombination.DisplayValue
                        where dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
                           && dimensionAttributeValueCombination.MainAccount == mainAccount.RecId
                    join RecId from generalJournalEntry
                        where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                           && generalJournalEntry.Ledger         == Ledger::current()
                           && generalJournalEntry.AccountingDate >= startDate
                           && generalJournalEntry.AccountingDate <= endDate
                    join RecId from fiscalCalendarPeriod
                        where generalJournalEntry.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId
                           && fiscalCalendarPeriod.Type                != FiscalPeriodType::Opening;

                simulationReportTmp.TransAmount      = generalJournalAccountEntry.AccountingCurrencyAmount;
                simulationReportTmp.DisplayValue     = dimensionAttributeValueCombination.DisplayValue;
                simulationReportTmp.MainAccountName  = MainAccount::getLocalizedName(mainAccount.RecId);

                if (simulationReportTmp.TransAmount)
                {
                    simulationReportTmp.TransMonthInpc = this.getInflationRate(mthofyr(startDate), year(startDate));
                    simulationReportTmp.InflationRatio = decround((rateOfToDate / simulationReportTmp.TransMonthInpc), 4);
                    simulationReportTmp.AdjustedAmount = (simulationReportTmp.TransAmount * simulationReportTmp.InflationRatio) - simulationReportTmp.TransAmount;
                    if (!insertedCurrencyCode)
                    {
                        simulationReportTmp.CurrencyCode = currencyCode;
                        insertedCurrencyCode             = true;
                    }
                    simulationReportTmp.insert();
                }

                startDate = endDate + 1;
                endDate   = endmth(startDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the functional currency amount.
    /// </summary>
    /// <param name="_startDate">
    /// The from date to consider the transactions.
    /// </param>
    /// <param name="_endDate">
    /// The to date to consider the transactions.
    /// </param>
    /// <param name="_mainAccountRecId">
    /// The record ID of the account for which the transactions are retrieved.
    /// </param>
    /// <param name="_periodCode">
    /// The period code that determines the type of transaction.
    /// </param>
    /// <param name="_displayValue">
    /// The display value of the main account that has the combination of dimensions.
    /// </param>
    /// <returns>
    /// The functional currency amount for an account and date range that considers the type of transaction.
    /// </returns>
    public AmountMSTDebCred getAccountingCurrencyAmount(
        FromDate                _startDate,
        ToDate                  _endDate,
        RecId                   _mainAccountRecId,
        FiscalPeriodType        _periodCode,
        DimensionDisplayValue   _displayValue)
    {
        GeneralJournalEntry                     generalJournalEntry;
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        DimensionAttributeValueCombination      dimensionAttributeValueCombination;
        FiscalCalendarPeriod                    fiscalCalendarPeriod;

        select sum(AccountingCurrencyAmount) from generalJournalAccountEntry
            join RecId, DisplayValue from dimensionAttributeValueCombination
                group by dimensionAttributeValueCombination.DisplayValue
                where dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
                   && dimensionAttributeValueCombination.MainAccount == _mainAccountRecId
                   && dimensionAttributeValueCombination.DisplayValue == _displayValue
            join RecId from generalJournalEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                   && generalJournalEntry.Ledger         == Ledger::current()
                   && generalJournalEntry.AccountingDate >= _startDate
                   && generalJournalEntry.AccountingDate <= _endDate
            join RecId from fiscalCalendarPeriod
                where generalJournalEntry.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId
                   && fiscalCalendarPeriod.Type                == _periodCode;

        return generalJournalAccountEntry.AccountingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCapitalAdjReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>CapitalAdjReportTmp_MX</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>CapitalAdjReportTmp_MX</c> table.
    /// </returns>
    [
        #InfAdj_SSRSParameters_MX
        SRSReportDataSetAttribute(#SimulationReportDataSet)
    ]

    public CapitalAdjReportTmp_MX getCapitalAdjReportTmp()
    {
        select * from simulationReportTmp;

        return simulationReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the company information data.
    /// </summary>
    /// <returns>
    ///    A current record from the company information table.
    /// </returns>
    /// <remarks>
    ///    Data from the current company to display in the SSRS report.
    /// </remarks>
    public CompanyInfo getCompanyInfo()
    {
        return CompanyInfo::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInflationRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the INPC rate for a month and year.
    /// </summary>
    /// <param name="_month">
    ///    The month for which to get the INPC rate.
    /// </param>
    /// <param name="_year">
    ///    The year for which to get the INPC rate.
    /// </param>
    /// <returns>
    ///    The INPC rate for a particular month and year.
    /// </returns>
    /// <remarks>
    ///    This method selects the INPC rate in the <c>INPCRateTable_MX</c> table for the specified month and
    ///    year.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    No inflation rate exists for the specified month and year.
    /// </exception>
    private InpcRate_MX getInflationRate(
        int _month,
        int _year)
    {
        InpcRate_MX inflationRate;

        inflationRate = InpcRateTable_MX::findByYearMonth(_year, _month).InflationRate;

        if (inflationRate == 0)
        {
            throw error (strfmt("@SYS312866", mthname(_month), _year));
        }

        return inflationRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameterValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the parameter values and then assigns them to the variables.
    /// </summary>
    private void getParameterValues()
    {
        InfAdjSimulationContract_MX infAdjSimulationContract = this.parmDataContract() as InfAdjSimulationContract_MX;

        fromDate         = infAdjSimulationContract.parmFromDate();
        toDate           = infAdjSimulationContract.parmToDate();
        all              = infAdjSimulationContract.parmAdjustmentMethodAll();
        adjustmentMethod = infAdjSimulationContract.parmAdjustmentMethod();
        fromMainAccount  = infAdjSimulationContract.parmFromMainAccount();
        toMainAccount    = infAdjSimulationContract.parmToMainAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateRepomoTmpForOpenBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the <c>RepomoReportTmp_MX</c> temporary table for the assets and liability accounts and
    ///    then calculates the inflation adjustment for the method that adjusts the opening balance.
    /// </summary>
    /// <remarks>
    ///    This method is used in methods that adjust both the opening balance and the monthly balance.
    /// </remarks>
    private void populateRepomoTmpForOpenBalance()
    {
        InfAdjMethod_OpenBalance_MX infAdjMethod_OpenBalance;

        infAdjMethod_OpenBalance = InfAdjMethod_MX::construct(AdjustmentMethod_MX::OpenBalance);

        if (fromMainAccount && toMainAccount)
        {
            infAdjMethod_OpenBalance.parmFromMainAccount(fromMainAccount);
            infAdjMethod_OpenBalance.parmToMainAccount(toMainAccount);
        }
        repomoReportTmp             = infAdjMethod_OpenBalance.populateTmpTable(fromDate, toDate);
        repomoReportTmp             = infAdjMethod_OpenBalance.calculate(repomoReportTmp);
        conDifference               = infAdjMethod_OpenBalance.getConDifference();
        conRepomoMonthlyAdjustment  = infAdjMethod_OpenBalance.parmConRepomoMonthlyAdjustment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the business logic of the SSRS report.
    /// </summary>
    /// <remarks>
    ///    This method is called by SSRS at runtime.The method computes data and populates the data tables to
    ///    returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        this.getParameterValues();

        if (all == NoYes::Yes)
        {
            this.calculateAllAdjustmentMethods();
        }
        else
        {
            switch (adjustmentMethod)
            {
                case AdjustmentMethod_MX::OpenBalance:
                    this.calculateOpenBalance();
                    break;

                case AdjustmentMethod_MX::MonthlyBalance:
                    this.populateRepomoTmpForOpenBalance();
                    this.calculateMonthBalance();
                    break;

                case AdjustmentMethod_MX::Balance:
                    this.calculateBalance();
                    break;

                case AdjustmentMethod_MX::TransactionDate:
                    this.calculateTransDate();
                    break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>