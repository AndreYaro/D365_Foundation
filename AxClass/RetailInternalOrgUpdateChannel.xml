<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailInternalOrgUpdateChannel</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
/// <summary>
/// This class is used to update channel with category hierarchy, product attribute metadata and product attribute value changes.
/// </summary>
class RetailInternalOrgUpdateChannel extends RunBaseBatch implements BatchRetryable
{
    RetailInternalOrgRefRecId internalOrgRefRecId;
    boolean publishDescendents;
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        internalOrgRefRecId,
        publishDescendents
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    public void getLast()
    {
        // Skip super() so we preserve the input parameters and not retrieve the last ones.
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInternalOrg</Name>
				<Source><![CDATA[
    protected RetailInternalOrgRefRecId parmInternalOrg(RetailInternalOrgRefRecId _internalOrgId = internalOrgRefRecId)
    {
        internalOrgRefRecId = _internalOrgId;
        return internalOrgRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPublishDescendents</Name>
				<Source><![CDATA[
    protected boolean parmPublishDescendents(boolean _publishDescendents = publishDescendents)
    {
        publishDescendents = _publishDescendents;
        return publishDescendents;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanCategoryProductAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate category product attributes
    /// </summary>
    private void cleanCategoryProductAttributes()
    {
        RetailProdAttributeInternalOrgMetadata productAttributeMetadata;
        EcoResCategoryAttributeGroupAttrView categoryAttributeGroupAttrView;
        RefRecId categoryHierarchyId, retailProductCategoryHierarchyId;

        // Find category hierarchy of the channel
        categoryHierarchyId = RetailInternalOrgCatHierarchyCollapsed::findByInternalOrganization(internalOrgRefRecId).CategoryHierarchy;

        // Find the retail product category hierarchy (only one)
        retailProductCategoryHierarchyId = EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Retail).CategoryHierarchy;

        if (categoryHierarchyId > 0)
        {
            // Remove category product attributes that are no longer associated with the category hierarchies
            delete_from productAttributeMetadata
                where productAttributeMetadata.AttributeRelationType == RetailProductAttributeRelationType::Category
                    && productAttributeMetadata.InternalOrganization == internalOrgRefRecId
            notexists join categoryAttributeGroupAttrView
                where categoryAttributeGroupAttrView.Modifier == EcoResCategoryAttributeModifier::Product
                    && (categoryAttributeGroupAttrView.CategoryHierarchy == categoryHierarchyId
                        || categoryAttributeGroupAttrView.CategoryHierarchy == retailProductCategoryHierarchyId)
                            && categoryAttributeGroupAttrView.Attribute == productAttributeMetadata.Attribute;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanChannelProductAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate channel product attributes
    /// </summary>
    private void cleanChannelProductAttributes()
    {
        RetailProdAttributeInternalOrgMetadata productAttributeMetadata;
        RetailInternalOrgAttributeGroupAttribute retailInternalOrgAttributeView;
        utcDateTime utcNow = DateTimeUtil::utcNow();

        delete_from productAttributeMetadata
            where productAttributeMetadata.AttributeRelationType == RetailProductAttributeRelationType::Channel
                    && productAttributeMetadata.InternalOrganization == internalOrgRefRecId
        notexists join retailInternalOrgAttributeView
            where retailInternalOrgAttributeView.Attribute == productAttributeMetadata.Attribute
                && retailInternalOrgAttributeView.InternalOrganization == productAttributeMetadata.InternalOrganization
                && retailInternalOrgAttributeView.ValidFrom <= utcNow
                && retailInternalOrgAttributeView.ValidTo >= utcNow
                && retailInternalOrgAttributeView.Modifier == RetailChannelAttributeModifier::Product;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate correct metadata for channel or Internal org.
    /// </summary>
    /// <remarks>
    /// Clear metadata with attributes no longer attached.
    /// </remarks>
    public void populateMetadata()
    {
        ttsBegin;
        this.cleanSharedProductAttributes();
        this.cleanChannelProductAttributes();
        this.cleanCategoryProductAttributes();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanSharedProductAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate shared product attributes.
    /// </summary>
    private void cleanSharedProductAttributes()
    {
        RetailProdAttributeInternalOrgMetadata productAttributeMetadata;
        RetailProductDefaultAttributeView retailSharedAttributeView;

        // Remove enrichment product attributes that are no longer associated with the shared attribute group
        delete_from productAttributeMetadata
            where productAttributeMetadata.AttributeRelationType == RetailProductAttributeRelationType::StandardProduct
                    && productAttributeMetadata.InternalOrganization == internalOrgRefRecId
        notExists join retailSharedAttributeView
            where retailSharedAttributeView.Attribute == productAttributeMetadata.Attribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishAttributeGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates publishing data for the specified InternalOrg and its child for organization hierarchy.
    /// </summary>
    private void publishAttributeGroup()
    {
        RetailPubInternalOrgAttributeGroup pubInternalOrgAttributeGroup;
        RetailInternalOrgInheritanceExploded internalOrgInheritanceExploded;
        RetailInternalOrgAttributeGroup internalOrgAttributeGroup;
        RetailPubInternalOrgAttributeGroup checkPubInternalOrgAttributeGroup;
        utcDateTime utcNow = DateTimeUtil::utcNow();
        utcdatetime stepStartTime, stepEndTime;

        // Ensure set based operations are not downgraded to record-by-record operations
        pubInternalOrgAttributeGroup.skipDatabaseLog(true);
        pubInternalOrgAttributeGroup.skipEvents(true);

        ttsBegin;

        stepStartTime = DateTimeUtil::utcNow();

        // Delete published records if the origins are deleted.
        delete_from pubInternalOrgAttributeGroup
            exists join internalOrgInheritanceExploded
                where internalOrgInheritanceExploded.ValidFrom <= utcNow
                    && internalOrgInheritanceExploded.ValidTo >= utcNow
                    && internalOrgInheritanceExploded.AncestorInternalOrg == internalOrgRefRecId
                    && internalOrgInheritanceExploded.InternalOrganization == pubInternalOrgAttributeGroup.InternalOrganization
                    && (publishDescendents || internalOrgInheritanceExploded.Distance == 0)
                    && internalOrgInheritanceExploded.HierarchyPurpose == HierarchyPurpose::NotSet
            notExists join internalOrgAttributeGroup
                where internalOrgAttributeGroup.RecId == pubInternalOrgAttributeGroup.Origin;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailInternalOrgUpdateChannelpublishAttributeGroupTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Delete published records if the origins are deleted');

        // Update published records if the orgins are changed.
        stepStartTime = DateTimeUtil::utcNow();

        update_recordset pubInternalOrgAttributeGroup
            setting
                OriginRecVersion = internalOrgAttributeGroup.RecVersion,
                InternalOrganization = internalOrgAttributeGroup.InternalOrganization,
                AttributeGroup = internalOrgAttributeGroup.AttributeGroup,
                Modifier = internalOrgAttributeGroup.Modifier
            join internalOrgAttributeGroup
                where internalOrgAttributeGroup.RecId == pubInternalOrgAttributeGroup.Origin
                    && internalOrgAttributeGroup.RecVersion != pubInternalOrgAttributeGroup.OriginRecVersion
            exists join internalOrgInheritanceExploded
                where internalOrgInheritanceExploded.ValidFrom <= utcNow
                    && internalOrgInheritanceExploded.ValidTo >= utcNow
                    && internalOrgInheritanceExploded.AncestorInternalOrg == internalOrgRefRecId
                    && internalOrgInheritanceExploded.InternalOrganization == pubInternalOrgAttributeGroup.InternalOrganization
                    && (publishDescendents || internalOrgInheritanceExploded.Distance == 0)
                    && internalOrgInheritanceExploded.HierarchyPurpose == HierarchyPurpose::NotSet;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailInternalOrgUpdateChannelpublishAttributeGroupTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Update published records if the orgins are changed');

        stepStartTime = DateTimeUtil::utcNow();

        // Insert published records from the origins if not already exist.
        insert_recordset pubInternalOrgAttributeGroup(
            Origin,
            OriginRecVersion,
            InternalOrganization,
            AttributeGroup,
            Modifier
        )
        select
            RecId,
            RecVersion,
            InternalOrganization,
            AttributeGroup,
            Modifier
            from internalOrgAttributeGroup
            exists join internalOrgInheritanceExploded
                where internalOrgInheritanceExploded.ValidFrom <= utcNow
                    && internalOrgInheritanceExploded.ValidTo >= utcNow
                    && internalOrgInheritanceExploded.AncestorInternalOrg == internalOrgRefRecId
                    && internalOrgInheritanceExploded.InternalOrganization == internalOrgAttributeGroup.InternalOrganization
                    && (publishDescendents || internalOrgInheritanceExploded.Distance == 0)
                    && internalOrgInheritanceExploded.HierarchyPurpose == HierarchyPurpose::NotSet
            notExists join checkPubInternalOrgAttributeGroup
                where checkPubInternalOrgAttributeGroup.Origin == internalOrgAttributeGroup.RecId;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailInternalOrgUpdateChannelpublishAttributeGroupTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Insert published records from the origins if not already exist');

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishCategoryHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates publishing data for the specified InternalOrg and its child for category hierarchies.
    /// </summary>
    private void publishCategoryHierarchy()
    {
        RetailInternalOrganization retailInternalOrganization;
        RetailInternalOrgExploded internalOrgExploded;
        RetailPubRetailChannelTable pubChannel;
        utcdatetime stepStartTime, stepEndTime;

        utcDateTime utcNow = DateTimeUtil::utcNow();

        RetailInternalOrgCatHierarchyCollapsed intOrgCatHierarchyCollapsed;
        intOrgCatHierarchyCollapsed = RetailInternalOrgCatHierarchyCollapsed::findByInternalOrganization(internalOrgRefRecId);

        ttsbegin;

        stepStartTime = DateTimeUtil::utcNow();

        update_recordSet pubChannel
        setting CategoryHierarchy = intOrgCatHierarchyCollapsed.CategoryHierarchy,
            InternalOrganization = retailInternalOrganization.RecId
        join retailInternalOrganization
            where retailInternalOrganization.InternalOrganization == pubChannel.OMOperatingUnitID
                && (pubChannel.CategoryHierarchy != intOrgCatHierarchyCollapsed.CategoryHierarchy
                || pubChannel.InternalOrganization != retailInternalOrganization.RecId)
        exists join internalOrgExploded
            where internalOrgExploded.AncestorInternalOrg == internalOrgRefRecId
                && internalOrgExploded.InternalOrganization == retailInternalOrganization.RecId
                && (publishDescendents || internalOrgExploded.Distance == 0)
                && internalOrgExploded.ValidFrom <= utcNow
                && internalOrgExploded.ValidTo >= utcNow;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailInternalOrgUpdateChannelPublishCategoryHierarchyTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Populates publishing data for the specified InternalOrg and its child for category hierarchies.');
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishOrganizationHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates publishing data for the specified InternalOrg and its child for organization hierarchy.
    /// </summary>
    private void publishOrganizationHierarchy()
    {
        RetailPubIntOrgInheritanceExploded pubIntOrgInheritanceExploded;
        RetailPubIntOrgInheritanceExploded checkPubIntOrgInheritanceExploded;
        RetailInternalOrgInheritanceExploded checkInternalOrgInheritanceExploded;
        RetailInternalOrgInheritanceExploded originInternalOrgInheritanceExploded;
        utcDateTime utcToday = DateTimeUtil::newDateTime(DateTimeUtil::date(DateTimeUtil::utcNow()), 0);
        utcdatetime stepStartTime, stepEndTime;

        ttsbegin;
        
        stepStartTime = DateTimeUtil::utcNow();

        delete_from pubIntOrgInheritanceExploded
        exists join checkInternalOrgInheritanceExploded
            where checkInternalOrgInheritanceExploded.AncestorInternalOrg == internalOrgRefRecId
                && checkInternalOrgInheritanceExploded.InternalOrganization == pubIntOrgInheritanceExploded.InternalOrganization
                && (publishDescendents || checkInternalOrgInheritanceExploded.Distance == 0)
                && (pubIntOrgInheritanceExploded.ValidTo >= utcToday
                    || (checkInternalOrgInheritanceExploded.ValidFrom <= pubIntOrgInheritanceExploded.ValidFrom && checkInternalOrgInheritanceExploded.ValidTo >= pubIntOrgInheritanceExploded.ValidTo))
                && checkInternalOrgInheritanceExploded.ValidTo >= utcToday
                && checkInternalOrgInheritanceExploded.HierarchyPurpose == HierarchyPurpose::NotSet
        notExists join originInternalOrgInheritanceExploded
            where originInternalOrgInheritanceExploded.InternalOrganization == pubIntOrgInheritanceExploded.InternalOrganization
                && originInternalOrgInheritanceExploded.AncestorInternalOrg == pubIntOrgInheritanceExploded.AncestorInternalOrg
                && originInternalOrgInheritanceExploded.Distance == pubIntOrgInheritanceExploded.Distance
                && originInternalOrgInheritanceExploded.ValidFrom == pubIntOrgInheritanceExploded.ValidFrom
                && originInternalOrgInheritanceExploded.ValidTo == pubIntOrgInheritanceExploded.ValidTo
                && originInternalOrgInheritanceExploded.HierarchyPurpose == HierarchyPurpose::NotSet;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailInternalOrgUpdateChannelPublishOrganizationHierarchyTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'delete_from code in publishOrganizationHierarchy method');

        stepStartTime = DateTimeUtil::utcNow();

        insert_recordSet pubIntOrgInheritanceExploded(
            AncestorInternalOrg,
            Distance,
            InternalOrganization,
            ValidFrom,
            ValidTo
        )
        select AncestorInternalOrg, Distance, InternalOrganization, ValidFrom, ValidTo from originInternalOrgInheritanceExploded
            where originInternalOrgInheritanceExploded.ValidTo >= utcToday
                && originInternalOrgInheritanceExploded.HierarchyPurpose == HierarchyPurpose::NotSet
        exists join checkInternalOrgInheritanceExploded
            where checkInternalOrgInheritanceExploded.AncestorInternalOrg == internalOrgRefRecId
                && checkInternalOrgInheritanceExploded.InternalOrganization == originInternalOrgInheritanceExploded.InternalOrganization
                && (publishDescendents || checkInternalOrgInheritanceExploded.Distance == 0)
                && checkInternalOrgInheritanceExploded.ValidTo >= utcToday
                && checkInternalOrgInheritanceExploded.HierarchyPurpose == HierarchyPurpose::NotSet
        notExists join checkPubIntOrgInheritanceExploded
            where originInternalOrgInheritanceExploded.InternalOrganization == checkPubIntOrgInheritanceExploded.InternalOrganization
                && originInternalOrgInheritanceExploded.AncestorInternalOrg == checkPubIntOrgInheritanceExploded.AncestorInternalOrg
                && originInternalOrgInheritanceExploded.ValidFrom == checkPubIntOrgInheritanceExploded.ValidFrom
                && originInternalOrgInheritanceExploded.ValidTo == checkPubIntOrgInheritanceExploded.ValidTo;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailInternalOrgUpdateChannelPublishOrganizationHierarchyTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'insert_recordset code in publishOrganizationHierarchy method');

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishProductAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the attribute values to publish and stores them into <c>RetailPubProductAttributeValue</c> table.
    /// </summary>
    public void publishProductAttributeValue()
    {
        RetailTmpPubProductAttributeValue   retailTmpPubProductAttributeValue;
        str tmpProductAttributeValuePhysicalTableName = RetailUtilities::getPhysicalTableName(retailTmpPubProductAttributeValue);
        utcdatetime stepStartTime, stepEndTime;

        RetailInternalOrgInheritanceExploded internalOrgInheritanceExploded;
        EcoResTextValueTranslation  ecoResTextValueTranslation;
        EcoResTextValue             ecoResTextValue;
        EcoResBooleanValue          ecoResBooleanValue;
        EcoResDateTimeValue         ecoResDateTimeValue;
        EcoResCurrencyValue         ecoResCurrencyValue;
        EcoResFloatValue            ecoResFloatValue;
        EcoResIntValue              ecoResIntValue;
        EcoResAttributeValue        ecoResAttributeValue;
        RetailInternalOrgProductInstanceValView   productInternalOrgInstanceValue;
        RetailPubProductAttributeValue retailPubProductAttributeValue;
        utcDateTime utcNow = DateTimeUtil::utcNow();

        ttsBegin;

        // Ensure set based operations to not be downgraded to record-by-record operations
        retailTmpPubProductAttributeValue.skipDatabaseLog(true);
        retailTmpPubProductAttributeValue.skipEvents(true);
        delete_from retailTmpPubProductAttributeValue;

        #RetailInsertInternalOrgProductDblAttri(TextValue, LanguageId, TextValue, Language, ecoResTextValueTranslation, TextValueTable)
        #RetailInsertInternalOrgProductAttribute(TextValue, TextValue, ecoResTextValue)
        #RetailInsertInternalOrgProductAttribute(IntValue, BooleanValue, ecoResBooleanValue)
        #RetailInsertInternalOrgProductAttribute(DateTimeValue, DateTimeValue, ecoResDateTimeValue)
        #RetailInsertInternalOrgProductDblAttri(FloatValue, TextValue, CurrencyValue, CurrencyCode , ecoResCurrencyValue, RecId)
        #RetailInsertInternalOrgProductDblAttri(FloatValue, UnitOfMeasure, FloatValue, FloatUnitOfMeasure, ecoResFloatValue, RecId)
        #RetailInsertInternalOrgProductDblAttri(IntValue, UnitOfMeasure, IntValue, IntUnitOfMeasure, ecoResIntValue, RecId)

        stepStartTime = DateTimeUtil::utcNow();

        // delete the records if they do not exist in temporary table.
        delete_from retailPubProductAttributeValue
            where retailPubProductAttributeValue.Catalog == 0
            exists join internalOrgInheritanceExploded
                where internalOrgInheritanceExploded.ValidFrom <= utcNow
                    && internalOrgInheritanceExploded.ValidTo >= utcNow
                    && internalOrgInheritanceExploded.AncestorInternalOrg == internalOrgRefRecId
                    && internalOrgInheritanceExploded.InternalOrganization == retailPubProductAttributeValue.InternalOrganization
                    && (publishDescendents || internalOrgInheritanceExploded.Distance == 0)
                    && internalOrgInheritanceExploded.HierarchyPurpose == HierarchyPurpose::NotSet
            notexists join retailTmpPubProductAttributeValue
                where retailTmpPubProductAttributeValue.InternalOrganization == retailPubProductAttributeValue.InternalOrganization
                    && retailTmpPubProductAttributeValue.Product == retailPubProductAttributeValue.Product
                    && retailTmpPubProductAttributeValue.Attribute == retailPubProductAttributeValue.Attribute
                    && retailTmpPubProductAttributeValue.LanguageId == retailPubProductAttributeValue.LanguageId;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailInternalOrgUpdateChannelPublishProductAttributeValueTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'delete the records if they do not exist in temporary table');

        stepStartTime = DateTimeUtil::utcNow();

        // Update RetailPubProductAttributeValue if anything has changed.
        update_recordset retailPubProductAttributeValue
        setting
            DateTimeValue = retailTmpPubProductAttributeValue.DateTimeValue,
            FloatValue = retailTmpPubProductAttributeValue.FloatValue,
            IntValue = retailTmpPubProductAttributeValue.IntValue,
            TextValue = retailTmpPubProductAttributeValue.TextValue,
            UnitOfMeasure = retailTmpPubProductAttributeValue.UnitOfMeasure
            where retailPubProductAttributeValue.Catalog == 0
        join retailTmpPubProductAttributeValue
            where retailTmpPubProductAttributeValue.Product == retailPubProductAttributeValue.Product
                && retailTmpPubProductAttributeValue.Attribute == retailPubProductAttributeValue.Attribute
                && retailTmpPubProductAttributeValue.InternalOrganization == retailPubProductAttributeValue.InternalOrganization
                && retailTmpPubProductAttributeValue.LanguageId == retailPubProductAttributeValue.LanguageId
                && (retailTmpPubProductAttributeValue.DateTimeValue != retailPubProductAttributeValue.DateTimeValue
                    || retailTmpPubProductAttributeValue.FloatValue != retailPubProductAttributeValue.FloatValue
                    || retailTmpPubProductAttributeValue.IntValue != retailPubProductAttributeValue.IntValue
                    || retailTmpPubProductAttributeValue.TextValue != retailPubProductAttributeValue.TextValue
                    || retailTmpPubProductAttributeValue.UnitOfMeasure != retailPubProductAttributeValue.UnitOfMeasure)
        join internalOrgInheritanceExploded
            where internalOrgInheritanceExploded.ValidFrom <= utcNow
                && internalOrgInheritanceExploded.ValidTo >= utcNow
                && internalOrgInheritanceExploded.AncestorInternalOrg == internalOrgRefRecId
                && internalOrgInheritanceExploded.InternalOrganization == retailPubProductAttributeValue.InternalOrganization
                && (publishDescendents || internalOrgInheritanceExploded.Distance == 0)
                && internalOrgInheritanceExploded.HierarchyPurpose == HierarchyPurpose::NotSet;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailInternalOrgUpdateChannelPublishProductAttributeValueTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Update RetailPubProductAttributeValue if anything has changed');

        stepStartTime = DateTimeUtil::utcNow();

        // Insert the records from RetailTmpPubProductAttributeValue to RetailPubProductAttributeValue table.
        insert_recordset retailPubProductAttributeValue(
            Attribute, DateTimeValue, FloatValue, InternalOrganization, IntValue, LanguageId, Product, TextValue, UnitOfMeasure)
            select
                Attribute, DateTimeValue, FloatValue, InternalOrganization, IntValue, LanguageId, Product, TextValue, UnitOfMeasure
                    from retailTmpPubProductAttributeValue
            join internalOrgInheritanceExploded
                where internalOrgInheritanceExploded.ValidFrom <= utcNow
                    && internalOrgInheritanceExploded.ValidTo >= utcNow
                    && internalOrgInheritanceExploded.AncestorInternalOrg == internalOrgRefRecId
                    && internalOrgInheritanceExploded.InternalOrganization == retailTmpPubProductAttributeValue.InternalOrganization
                    && (publishDescendents || internalOrgInheritanceExploded.Distance == 0)
                    && internalOrgInheritanceExploded.HierarchyPurpose == HierarchyPurpose::NotSet
            notexists join retailPubProductAttributeValue
                where retailPubProductAttributeValue.Product     == retailTmpPubProductAttributeValue.Product
                    && retailPubProductAttributeValue.Attribute  == retailTmpPubProductAttributeValue.Attribute
                    && retailPubProductAttributeValue.InternalOrganization == retailTmpPubProductAttributeValue.InternalOrganization
                    && retailPubProductAttributeValue.Catalog    == 0
                    && retailPubProductAttributeValue.LanguageId == retailTmpPubProductAttributeValue.LanguageId;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailInternalOrgUpdateChannelPublishProductAttributeValueTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Insert the records from RetailTmpPubProductAttributeValue to RetailPubProductAttributeValue table');

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        // Publish the parent and the children whose Inherit option is on.
        this.updateChannel();

        if (RetailInternalOrgUpdateChannelRecursivelyFlight::instance().isEnabled())
        {
            // Publish children whose Inherit option is off.
            Set retailInternalOrganizationsToPublish = this.getNonInheritRetailInternalOrganizationsToPublish(this.internalOrgRefRecId, this.publishDescendents);
            SetEnumerator retailInternalOrganizationsToPublishEnumerator = retailInternalOrganizationsToPublish.getEnumerator();
            while (retailInternalOrganizationsToPublishEnumerator.moveNext())
            {
                this.internalOrgRefRecId = retailInternalOrganizationsToPublishEnumerator.current();
                this.updateChannel();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the data setup for the selected organization.
    /// </summary>
    /// <remarks>
    /// Updates the data setup (category hierarchy, metadata, attribute values) for the selected organization.
    /// </remarks>
    public void updateChannel()
    {
        RetailChannelTable channel;
        RetailInternalOrganization  internalOrganization;
        RetailInternalOrgInheritanceExploded   internalOrgInheritanceExploded;
        RetailOnlineChannelPublishStatus onlineChannelPublishStatus;
        utcDateTime utcNow = DateTimeUtil::utcNow();
        utcdatetime stepStartTime, stepEndTime;
        int updateChannelCount = 0;

        if (RetailConfigurationParameters::getEnableChannelPublishInSingleTransaction())
        {
            ttsbegin;
        }

        stepStartTime = DateTimeUtil::utcNow();

        while select InternalOrganization from internalOrgInheritanceExploded
        where internalOrgInheritanceExploded.ValidFrom <= utcNow &&
            internalOrgInheritanceExploded.ValidTo >= utcNow    &&
            internalOrgInheritanceExploded.AncestorInternalOrg == internalOrgRefRecId &&
            (publishDescendents || internalOrgInheritanceExploded.Distance == 0) &&
            internalOrgInheritanceExploded.HierarchyPurpose == HierarchyPurpose::NotSet
        join InternalOrganization from internalOrganization
            where internalOrganization.RecId == internalOrgInheritanceExploded.InternalOrganization
        join RecId from channel
            where channel.OMOperatingUnitID == internalOrganization.InternalOrganization
        {
            // Populate category attributes
            if (RetailMerchandisingKillSwitch::enableCategoryAttributesAndCategoryAttributeGroups())
            {
                RetailChannelCategoryAttribute::populateChannelCategoryAttributes(channel.RecId);
            }

            // Populate the channel publishing tables
            RetailPubEcoResCategory::publishChannel(channel.RecId);
            RetailPubEcoResCategoryTranslation::publishChannel(channel.RecId);
            RetailPubRetailChannelCategoryAttribute::publishChannel(channel.RecId);

            ttsbegin;

            // update RetailOnlineChannelPublishStatus.PublishStatus to InProgress.
            update_recordSet onlineChannelPublishStatus
                setting PublishStatus = RetailOnlineChannelPublishStatusType::InProgress
                where onlineChannelPublishStatus.OnlineChannel == channel.RecId;

            ttscommit;

            updateChannelCount++;

            eventSource.EventWriteInternalOrgUpdateChannelCurrentChannelID(channel.RecId);
        }

        stepEndTime = DateTimeUtil::utcNow();

        eventSource.EventWriteInternalOrgUpdateChannelsStop(updateChannelCount, stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime));

        stepStartTime = DateTimeUtil::utcNow();
        this.populateMetadata();
        stepEndTime = DateTimeUtil::utcNow();

        eventSource.EventWriteInternalOrgUpdateChannelTotalTime('populateMetadata', DateTimeUtil::getDifference(stependTime, stepStartTime));

        stepStartTime = DateTimeUtil::utcNow();
        this.publishOrganizationHierarchy();
        stepEndTime = DateTimeUtil::utcNow();

        eventSource.EventWriteInternalOrgUpdateChannelTotalTime('publishOrganizationHierarchy', DateTimeUtil::getDifference(stependTime, stepStartTime));

        stepStartTime = DateTimeUtil::utcNow();
        this.publishCategoryHierarchy();
        stepEndTime = DateTimeUtil::utcNow();

        eventSource.EventWriteInternalOrgUpdateChannelTotalTime('publishCategoryHierarchy', DateTimeUtil::getDifference(stependTime, stepStartTime));

        stepStartTime = DateTimeUtil::utcNow();
        this.publishAttributeGroup();
        stepEndTime = DateTimeUtil::utcNow();

        eventSource.EventWriteInternalOrgUpdateChannelTotalTime('publishAttributeGroup', DateTimeUtil::getDifference(stependTime, stepStartTime));

        stepStartTime = DateTimeUtil::utcNow();
        RetailPubProductAttributeChannelMetadata::updateChannel(internalOrgRefRecId, true);
        stepEndTime = DateTimeUtil::utcNow();

        eventSource.EventWriteInternalOrgUpdateChannelTotalTime('updateChannel', DateTimeUtil::getDifference(stependTime, stepStartTime));

        //<GEERU>
        stepStartTime = DateTimeUtil::utcNow();
        RetailPubInventDimChannelMetadata::updateChannel(internalOrgRefRecId, true);
        stepEndTime = DateTimeUtil::utcNow();

        eventSource.EventWriteInternalOrgUpdateChannelTotalTime('updateChannel', DateTimeUtil::getDifference(stependTime, stepStartTime));
        //</GEERU>
        stepStartTime = DateTimeUtil::utcNow();
        this.publishProductAttributeValue();
        stepEndTime = DateTimeUtil::utcNow();

        eventSource.EventWriteInternalOrgUpdateChannelTotalTime('publishProductAttributeValue', DateTimeUtil::getDifference(stependTime, stepStartTime));

        stepStartTime = DateTimeUtil::utcNow();
        this.updateInternalOrganization(); // update InternalOrganization last modifed date time.
        stepEndTime = DateTimeUtil::utcNow();

        eventSource.EventWriteInternalOrgUpdateChannelTotalTime('updateInternalOrganization', DateTimeUtil::getDifference(stependTime, stepStartTime));

        if (RetailConfigurationParameters::getEnableChannelPublishInSingleTransaction())
        {
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInternalOrganization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update internal organization last modified date time.
    /// </summary>
    private void updateInternalOrganization()
    {
        RetailInternalOrganization  retailInternalOrganization;
        RetailInternalOrgInheritanceExploded    internalOrgInheritanceExploded;
        utcDateTime utcNow = DateTimeUtil::utcNow();

        ttsbegin;

        update_recordSet retailInternalOrganization
            setting LastModifiedDateTime = utcNow
            join internalOrgInheritanceExploded
                where internalOrgInheritanceExploded.AncestorInternalOrg == internalOrgRefRecId
                    && internalOrgInheritanceExploded.InternalOrganization == retailInternalOrganization.RecId
                    && internalOrgInheritanceExploded.ValidFrom <= utcNow
                    && internalOrgInheritanceExploded.ValidTo >= utcNow
                    && internalOrgInheritanceExploded.HierarchyPurpose == HierarchyPurpose::NotSet;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@REX1490";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class <c>RetailInternalOrgUpdateChannel</c>.
    /// </summary>
    /// <param name="_args">
    /// A default agrs.
    /// </param>
    public static void main(Args _args)
    {
        RetailInternalOrganization  retailInternalOrganization;
        RetailInternalOrgUpdateChannel updateChannel;

        if (_args.record() as RetailInternalOrganization)
        {
            retailInternalOrganization = _args.record();
        }
        else
        {
            throw error("@SYS18626");
        }

        updateChannel = RetailInternalOrgUpdateChannel::newFromInternalOrg(retailInternalOrganization.RecId, true);

        if (!_args.menuItemName() || updateChannel.prompt())
        {
            updateChannel.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct helper object to update channel metadata.
    /// </summary>
    /// <param name="_channel">
    /// Channel to be published.
    /// </param>
    /// <returns>
    /// Helper object used to populate metadata.
    /// </returns>
    /// <remarks>
    /// This object is constructed before publishing channel and calling populate metadata method.
    /// </remarks>
    public static RetailInternalOrgUpdateChannel newFromChannel(RefRecId _channel)
    {
        RetailInternalOrgUpdateChannel updateChannel;

        if (_channel)
        {
            updateChannel = new RetailInternalOrgUpdateChannel();
            updateChannel.parmInternalOrg(RetailInternalOrganization::findByChannelId(_channel).RecId);
            updateChannel.parmPublishDescendents(false);
        }
        return updateChannel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInternalOrg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct helper object to update internal org hierarchy metadata.
    /// </summary>
    /// <param name="_retailInternalOrg">
    /// Internal Org to be published
    /// </param>
    /// <param name="_publishDescendents">
    /// Flag to determine all childs be published.
    /// </param>
    /// <returns>
    ///  Helper object used to populate metadata.
    /// </returns>
    /// <remarks>
    /// This object is constructed before publishing/updating Internal org and calling populate metadata method.
    /// </remarks>
    public static RetailInternalOrgUpdateChannel newFromInternalOrg(RetailInternalOrgRefRecId _retailInternalOrg, boolean _publishDescendents)
    {
        RetailInternalOrgUpdateChannel updateChannel;

        if (_retailInternalOrg)
        {
            updateChannel = new RetailInternalOrgUpdateChannel();
            updateChannel.parmInternalOrg(_retailInternalOrg);
            updateChannel.parmPublishDescendents(_publishDescendents);
        }
        return updateChannel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNonInheritRetailInternalOrganizationsToPublish</Name>
				<Source><![CDATA[
    private Set getNonInheritRetailInternalOrganizationsToPublish(RetailInternalOrgRefRecId _parent, boolean _publishDescendents)
    {
        OMHierarchyType                     omHierarchyType = RetailInternalOrganization::getOMHierarchyType();
        RetailInternalOrganization          retailInternalOrganization;
        utcDateTime                         utcNow = DateTimeUtil::utcNow();
        OMExplodedOrganizationSecurityGraph omExplodedOrganizationSecurityGraph;

        Set retailInternalOrganizationsToPublish = new Set(Types::Int64);

        // Don't collect any children nodes if the publishing descendents is not required
        if (!_publishDescendents)
        {
            return retailInternalOrganizationsToPublish;
        }

        select InternalOrganization from retailInternalOrganization
            where retailInternalOrganization.RecId == _parent;

        RefRecId retailInternalOrgniazationParentRecId = retailInternalOrganization.InternalOrganization;

        // Return an empty set if no related RetailInternalOrganization is found.
        if (retailInternalOrgniazationParentRecId == 0)
        {
            return retailInternalOrganizationsToPublish;
        }

        // For the hierarchy like this
        // X1 Inherit off, category hierarchy != 0
        //  |- X2 Inherit on, category hierarchy != 0
        //     |- X3 Inherit off, category hierarchy != 0
        //         |- X4 Inherit on, category hierarchy != 0
        // when the user publishes X1, X2 will be published because its inherit option is on.
        // X3 and X4 will not be pulished in the this round. Then, the loop below will select X3 for publishing,
        // because it's the descendant of X1 and its inherit option is off. During the publishing, because inherit
        // option is on, X4 will be published.

        // For the hierarchy like this
        // X1 Inherit off, category hierarchy != 0
        //  |- X2 Inherit on, category hierarchy != 0
        //     |- X3 Inherit off, category hierarchy == 0
        //         |- X4 Inherit on, category hierarchy == 0
        // when the user publishes X1, X2 will be published because its inherit option is on.
        // X3 and X4 will not be pulished in the this round. Then, the loop below will NOT select X3 for publishing.
        // because it doesn't have category hierarchy even its inherit option is on. X4 will not be published because
        // its inherit option is on and doesn't have a category hierarchy.
        while select Organization from omExplodedOrganizationSecurityGraph
            where omExplodedOrganizationSecurityGraph.AncestorOrganization == retailInternalOrgniazationParentRecId &&
                omExplodedOrganizationSecurityGraph.OMHierarchyType == omHierarchyType.RecId &&
                omExplodedOrganizationSecurityGraph.ValidFrom < utcNow &&
                omExplodedOrganizationSecurityGraph.ValidTo > utcNow &&
                omExplodedOrganizationSecurityGraph.Distance > 0
            join RecId, InternalOrganization from retailInternalOrganization
            where omExplodedOrganizationSecurityGraph.Organization == retailInternalOrganization.InternalOrganization &&
                retailInternalOrganization.InheritEnabled == NoYes::No && // Organizations whose Inherit option is enabled are already published by the parent
                retailInternalOrganization.CategoryHierarchy != 0 // Organizations without category hierarchy cannot be published
        {
            retailInternalOrganizationsToPublish.add(retailInternalOrganization.RecId);
        }

        return retailInternalOrganizationsToPublish;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>