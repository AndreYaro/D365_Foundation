<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GBTFileGenerationHelper_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the helper class for China GBT features.
/// </summary>
class GBTFileGenerationHelper_CN
{
    #LedgerGBT_CN

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DocumentTypeCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the static text to bind the field for the model mapping.
    /// </summary>
    /// <returns>The document type code</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str DocumentTypeCode()
    {
        return '001';
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocumentTypeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the static text to bind the field for the model mapping.
    /// </summary>
    /// <returns>The document type name</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str DocumentTypeName()
    {
        return '无分类';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a container: the recid of the table FiscalCalendarYear, start date and end date of the table FiscalCalendarPeriod.
    /// </summary>
    /// <param name = "_fiscalYearName">
    /// The fiscal year name.
    /// </param>
    /// <param name = "_startPeriodName">
    /// The begin of period name.
    /// </param>
    /// <param name = "_endPeriodName">
    /// The end of period name.
    /// </param>
    /// <param name = "_periodName">
    /// The period name.
    /// </param>
    /// <returns>The recid of the table FiscalCalendarYear, start and end date of the table FiscalCalendarPeriod</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container getPeriodDate(str _fiscalYearName, str _startPeriodName, str _endPeriodName, str _periodName)
    {
        RefRecId fiscalCalendarYearRecId;
        TransDate startPeriodDate;
        TransDate endPeriodDate;
        FiscalCalendarPeriod fiscalCalendarPeriod;

        fiscalCalendarYearRecId = FiscalCalendarYear::findByCalendarYearName(Ledger::fiscalCalendar(), _fiscalYearName).RecId;
        startPeriodDate = FiscalCalendarPeriod::findByCalendarYearPeriod(fiscalCalendarYearRecId, _startPeriodName).StartDate;
        endPeriodDate = FiscalCalendarPeriod::findByCalendarYearPeriod(fiscalCalendarYearRecId, _endPeriodName).EndDate;
        fiscalCalendarPeriod = FiscalCalendarPeriod::findByCalendarYearPeriod(fiscalCalendarYearRecId, _periodName);

        return [fiscalCalendarYearRecId, startPeriodDate, endPeriodDate, fiscalCalendarPeriod];
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateStrForGBT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts data to string for China GBT 24589.
    /// </summary>
    /// <param name="_date">
    /// The date.
    /// </param>
    /// <returns>
    /// Return the date format str for GBT.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str dateStrForGBT(date _date)
    {
        //return the date format str for GBT like: 20120209
        return _date != dateNull()
            ? date2Str(
                _date,
                321,
                DateDay::Digits2,
                DateSeparator::None,
                DateMonth::Digits2,
                DateSeparator::None,
                DateYear::Digits4,
                DateFlags::None)
            : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFAAcquisitionAcct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account number by the acquisition account.
    /// </summary>
    /// <returns>The main account number.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static MainAccountNum getFAAcquisitionAcct()
    {
        return LedgerDimensionFacade::getMainAccountFromLedgerDimension(GBTParameters_CN::find().AcquisitionLedgerDimension).MainAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFADisposalAcct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account number by the disposal account.
    /// </summary>
    /// <returns>The main account number.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static MainAccountNum getFADisposalAcct()
    {
        return LedgerDimensionFacade::getMainAccountFromLedgerDimension(GBTParameters_CN::find().DisposalLedgerDimension).MainAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFADepreciationAcct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account number by the depreciation account.
    /// </summary>
    /// <returns>The main account number.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static MainAccountNum getFADepreciationAcct()
    {
        return LedgerDimensionFacade::getMainAccountFromLedgerDimension(GBTParameters_CN::find().DepreciationLedgerDimension).MainAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFixedAssetGroupCodeFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fixed asset group code format from the <c>GBTParameters_CN</c>.
    /// </summary>
    /// <returns>The fixed asset group code format</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static FixedAssetGroupCodeFormat_CN getFixedAssetGroupCodeFormat()
    {
        return GBTParameters_CN::find().FixedAssetGroupCodeFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the fiscal period recid
    /// </summary>
    /// <param name = "_startDate"></param>
    /// The start date for which the fiscal period needs to be found.
    /// <param name = "_endDate">
    /// The end date for which the fiscal period needs to be found.
    /// </param>
    /// <param name = "_fiscalCalendarYear">
    /// The record ID of the fiscal calendar period to check for existence.
    /// </param>
    /// <returns>The fiscal period recid</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container getFiscalPeriod(TransDate _startDate, TransDate _endDate, RefRecId _fiscalCalendarYear)
    {
        FiscalCalendarPeriod    fiscalCalendarPeriod;
        container               fiscalPeriodRecIdCon;

        while select RecId from fiscalCalendarPeriod
            where fiscalCalendarPeriod.StartDate >= _startDate
                && fiscalCalendarPeriod.EndDate  <= _endDate
                && fiscalCalendarPeriod.Type     == FiscalPeriodType::Operating
                && fiscalCalendarPeriod.FiscalCalendarYear == _fiscalCalendarYear
        {
            fiscalPeriodRecIdCon += fiscalCalendarPeriod.RecId;
        }

        return fiscalPeriodRecIdCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashflowItemLevelByLength</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets cashflow item level according to the length cashflow dimension value
    /// </summary>
    /// <param name="_length">
    /// The length cashflow dimension value
    /// </param>
    /// <returns>
    /// The cashflow item level
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static int getCashflowItemLevelByLength(int _length)
    {
        int totalLength;
        int level;
        int i;
        #LedgerGBT_CN

        container formatCon;

        formatCon = str2con(GBTParameters_CN::find().CashflowCodeFormat, #Dash, false);

        for (i = 1; i <= conLen(formatCon); i++)
        {
            totalLength += str2int(conPeek(formatCon, i));
            if (_length == totalLength)
            {
                level = i;
                break;
            }
        }

        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashflowItemParentNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the dimension value for the parent node of the current cashflow item
    /// </summary>
    /// <param name="_value">
    /// The cashflow dimension value
    /// </param>
    /// <returns>
    /// The dimension value for the parent node
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static DimensionValue getCashflowItemParentNode(DimensionValue _value)
    {
        DimensionValue  parentDimValue;
        int             level;
        container       formatCon;
        #LedgerGBT_CN

        formatCon = str2con(GBTParameters_CN::find().CashflowCodeFormat, #Dash, false);

        level = GBTFileGenerationHelper_CN::getCashflowItemLevelByLength(strLen(_value));

        if (level)
        {
            parentDimValue = strDel(_value, strLen(_value), -str2int(conPeek(formatCon, level)));
        }

        return parentDimValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionValueDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets dimension value description by dimension attribute and dimension value.
    /// </summary>
    /// <param name="_dimAttribute">
    /// The <c>DimensionAttribute</c> table record.
    /// </param>
    /// <param name="_dimValue">
    /// The dimension value.
    /// </param>
    /// <returns>
    /// The dimension value description.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str getDimensionValueDescription(DimensionAttribute _dimAttribute, DimensionValue _dimValue)
    {
        #Dimensions

        Query                   dimAttrValueQuery;
        QueryRun                dimAttrValueQueryRun;
        QueryBuildDataSource    qbsDimAttrValue;
        Common                  dimValueTable;

        dimAttrValueQuery = new Query();
        qbsDimAttrValue = dimAttrValueQuery.addDataSource(_dimAttribute.BackingEntityType);

        qbsDimAttrValue.addRange(_dimAttribute.ValueAttribute).value(_dimValue);
        dimAttrValueQueryRun = new QueryRun(dimAttrValueQuery);
        dimAttrValueQueryRun.next();
        dimValueTable = dimAttrValueQueryRun.get(_dimAttribute.BackingEntityType);

        return dimValueTable.(_dimAttribute.NameAttribute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionValueFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets dimension value from.
    /// </summary>
    /// <param name="_dimName">
    /// The dimension name.
    /// </param>
    /// <returns>
    /// Dimension value from.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str getDimensionValueFrom(Name _dimName)
    {
        str dimensionValueFrom;
        #LedgerGBT_CN

        DimensionAttribute dimAttr = DimensionAttribute::findByName(_dimName);

        switch (dimAttr.BackingEntityType)
        {
            case tableNum(DimAttributeOMDepartment):
                dimensionValueFrom = #DimValueFrom_Department;
                break;

            case tableNum(DimAttributeCustTable):
                dimensionValueFrom = #DimValueFrom_Customer;
                break;

            case tableNum(DimAttributeVendTable):
                dimensionValueFrom = #DimValueFrom_Vendor;
                break;

            case tableNum(DimAttributeHcmWorker):
                dimensionValueFrom = #DimValueFrom_Employee;
                break;

            default:
                dimensionValueFrom = dimAttr.Name;
                break;
        }

        return dimensionValueFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsEndLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets cashflow dimension whether is end level by cashflow dimension format.
    /// </summary>
    /// <param name="_dimAttribute">
    /// Cashflow dimension attribute.
    /// </param>
    /// <param name="_dimAttributeValue">
    /// Cashflow dimension attribute value.
    /// </param>
    /// <param name="_common">
    /// A common object.
    /// </param>
    /// <returns>
    /// If current cashflow dimension is end level, return true, otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean getIsEndLevel(
        DimensionAttribute _dimAttribute,
        DimensionAttributeValue _dimAttributeValue,
        Common _common)
    {
        DimensionAttributeValue dimAttrValueTmp;
        Common                  commonTmp;
        int                     cashflowItemLevel;
        int                     nextCashflowItemLen;
        container               cashflowformatCon;
        DictTable               dictTable;
        boolean                 isEndLevel;
        DimensionValue          dimValue;
        #LedgerGBT_CN

        dimValue = _common.(_dimAttribute.ValueAttribute);
        cashflowItemLevel = GBTFileGenerationHelper_CN::getCashflowItemLevelByLength(strLen(dimValue));
        cashflowformatCon = str2con(GBTParameters_CN::find().CashflowCodeFormat, #Dash, false);
        dictTable = new DictTable(_dimAttribute.BackingEntityType);
        commonTmp = dictTable.makeRecord();

        if ((cashflowItemLevel + 1) <= conLen(cashflowformatCon))
        {
            nextCashflowItemLen = str2int(conPeek(cashflowformatCon, cashflowItemLevel + 1));

            select firstOnly RecId, EntityInstance from dimAttrValueTmp
            where dimAttrValueTmp.DimensionAttribute == _dimAttribute.RecId
            join commonTmp
                where commonTmp.TableId == _dimAttribute.BackingEntityType
                    && commonTmp.RecId == dimAttrValueTmp.EntityInstance
                    && commonTmp.(_dimAttribute.ValueAttribute) like dimValue + strRFix(#Wildcards, nextCashflowItemLen, #Wildcards);

            isEndLevel = dimAttrValueTmp.RecId ? false : true;
        }
        else
        {
            isEndLevel = true;
        }

        return isEndLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSeparatorCharByChartOfAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gest seprator char by chart of account.
    /// </summary>
    /// <param name="_ChartOfAccountRecId">
    /// The table <c>LedgerChartOfAccounts</c> record Id.
    /// </param>
    /// <returns>
    /// The seprator char.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static char getSeparatorCharByChartOfAccount(RecId _ChartOfAccountRecId = LedgerChartOfAccounts::current())
    {
        LedgerChartOfAccountsTree_CN    ledgerChartOfAccountTree;

        ledgerChartOfAccountTree = LedgerChartOfAccountsTree_CN::findByLedgerChartOfAccounts(_ChartOfAccountRecId);

        return LedgerAccountUtility_CN::findSeparatorChar(ledgerChartOfAccountTree.Separator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company name
    /// </summary>
    /// <returns>The company name</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Name getCompanyName()
    {
        return CompanyInfo::find().Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currency unit
    /// </summary>
    /// <returns>The currency unit</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str getCurrencyUnit()
    {
        #LedgerGBT_CN
        return Currency::find(Ledger::accountingCurrency()).Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accounting date range.
    /// </summary>
    /// <param name = "_fiscalCalendarPeriod">
    /// The fiscal calendar period.
    /// </param>
    /// <returns>The start accounting date and end accounting date in a container.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container getAccountingDateRange(FiscalCalendarPeriod _fiscalCalendarPeriod)
    {
        FromDate fromDate;
        ToDate toDate;

        fromDate = FiscalCalendars::findFirstDayofYear(Ledger::fiscalCalendar(), _fiscalCalendarPeriod.StartDate);

        if (fromDate == _fiscalCalendarPeriod.StartDate)
        {
            toDate = fromDate;
        }
        else
        {
            toDate = _fiscalCalendarPeriod.StartDate - 1;
        }

        return [fromdate, todate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAssetDisposalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the disposal transaction for the specific assetId and bookId.
    /// </summary>
    /// <param name = "_assetId">The fixed asset Id of the asset which has been disposed.</param>
    /// <param name = "_bookId">The asset book Id of the asset which has been disposed.</param>
    /// <param name = "_disposalDate">The date on which the asset was disposed.</param>
    /// <returns>The asset disposal transaction</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AssetTrans findAssetDisposalTrans(AssetId _assetId, AssetBookId _bookId, TransDate _disposalDate)
    {
        AssetTrans assetTransDisposal;
        TransactionReversalTrans reversalTrans;

        select firstonly * from assetTransDisposal
            where assetTransDisposal.AssetId == _assetId
                && assetTransDisposal.BookId == _bookId
                && (assetTransDisposal.TransType == AssetTransType::DisposalSale
                    || assetTransDisposal.TransType == AssetTransType::DisposalScrap)
                && assetTransDisposal.TransDate == _disposalDate
            notexists join reversalTrans
                where reversalTrans.RefRecId == assetTransDisposal.RecId
                    && reversalTrans.RefTableId == assetTransDisposal.TableId;

        return assetTransDisposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetChangeTypeCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the fixed asset change type code based on the specified asset trans type value.
    /// </summary>
    /// <param name = "_assetTransTypeValue">The value of the asset trans type</param>
    /// <returns>The fixed asset change type code</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str getAssetChangeTypeCode(int _assetTransTypeValue)
    {
        str assetChangeTypeCode;

        switch (_assetTransTypeValue)
        {
            case AssetTransType::Acquisition:
                assetChangeTypeCode = #FixedAssetTransactionTypeCode1;
                break;
            case AssetTransType::DisposalSale,
                AssetTransType::DisposalScrap:
                assetChangeTypeCode = #FixedAssetTransactionTypeCode2;
                break;
            case AssetTransType::WriteDownAdj:
                assetChangeTypeCode = #FixedAssetTransactionTypeCode3;
                break;
            case AssetTransType::Revaluation:
                assetChangeTypeCode = #FixedAssetTransactionTypeCode4;
                break;
            case AssetTransType::AcquisitionAdj:
                assetChangeTypeCode = #FixedAssetTransactionTypeCode5;
                break;
            case #LocationChangeTypeValue:
                // When catches the value #LocationChangeTypeValue(-1), means the change type is the location transfer which isn't a kind of AX asset trans type.
                assetChangeTypeCode = #FixedAssetTransactionTypeCode6;
                break;
        }

        return assetChangeTypeCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetLocationIdByDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the id of the asset location that the fixed asset is located on the specified date.
    /// </summary>
    /// <param name = "_fixedAsset">The record of the <c>AssetTable</c></param>
    /// <param name = "_date">The specified date.</param>
    /// <returns>The id of the asset location</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AssetLocationId getAssetLocationIdByDate(AssetTable _fixedAsset, TransDate _date)
    {
        AssetLocationId assetLocationId;
        AssetLocationTransferHistory_CN locationTransferHistory;

        select firstOnly FromLocation, TransferDate from locationTransferHistory
            order by TransferDate
            where locationTransferHistory.TransferDate >= _date
                && locationTransferHistory.AssetId == _fixedAsset.AssetId;

        if (locationTransferHistory)
        {
            assetLocationId = locationTransferHistory.FromLocation;
        }
        else
        {
            assetLocationId = _fixedAsset.Location;
        }

        return assetLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDepreciatedMonths</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calcuates the number of depreciated months based on the depreciation start date and specified date.
    /// </summary>
    /// <param name = "_depStartDate">The asset depreciation start date.</param>
    /// <param name = "_date">The specified date that used to calculate the depreciated months.</param>
    /// <returns>The number of depreciated months</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static int calcDepreciatedMonths(AssetTransDate _depStartDate, AssetTransDate _date)
    {
        #TimeConstants

        int ret;

        if (_date > _depStartDate)
        {
            ret = (year(_date) - year(_depStartDate)) * #monthsPerYear + mthOfYr(_date) - mthOfYr(_depStartDate) + 1;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssistAccounting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assist accounting info.
    /// </summary>
    /// <param name = "_ledgerDimensionRecId">
    /// The Recid of dimension attribute value combination.
    /// </param>
    /// <returns>The RecId of DimensionAttribute list.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static List getAssistAccounting(RecId _ledgerDimensionRecId)
    {
        DimensionStorage        dimensionStorage;
        DimensionStorageSegment segment;
        int                     segmentCount, segmentIndex;
        int                     hierarchyCount, hierarchyIndex;
        str                     segmentName, segmentDescription;
        SysDim                  segmentValue;
        DimensionAttribute dimensionAttribute;
        List dimensionAttributeList = new List(Types::Int64);

        // Gets dimension storage
        dimensionStorage = DimensionStorage::findById(_ledgerDimensionRecId);

        // Gets hierarchy count
        hierarchyCount = dimensionStorage.hierarchyCount();
        //Loops through hierarchies to get individual segments
        for (hierarchyIndex = 1; hierarchyIndex <= hierarchyCount; hierarchyIndex++)
        {
            //Gets segment count for hierarchy
            segmentCount = dimensionStorage.segmentCountForHierarchy(hierarchyIndex);

            //Loops through segments and display required values
            for (segmentIndex = 1; segmentIndex <= segmentCount; segmentIndex++)
            {
                // Gets segment
                segment = dimensionStorage.getSegmentForHierarchy(hierarchyIndex, segmentIndex);

                // Gets the segment information
                if (segment.parmDimensionAttributeValueId() != 0)
                {
                    // Gets segment name
                    dimensionAttribute = DimensionAttribute::find(DimensionAttributeValue::find(segment.parmDimensionAttributeValueId()).DimensionAttribute);

                    if (conFind(['Customer', 'Vendor', 'Department', 'Worker'], dimensionAttribute.Name))
                    {
                        dimensionAttributeList.addEnd(dimensionAttribute.RecId);
                    }
                }
            }
        }

        return dimensionAttributeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBalanceByMainaccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the balance for the dimension attribute value combination.
    /// </summary>
    /// <param name = "_mainAccountNum">
    /// The main account number.
    /// </param>
    /// <param name = "_fiscalCalendarPeriod">
    /// The table GBTAccountBalanceAndNetAmountTmp_CN.
    /// </param>
    /// <returns>The transaction currency debit and credit balance.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container calculateBalanceByMainaccount(MainAccountNum _mainAccountNum,
        FiscalCalendarPeriod _fiscalCalendarPeriod,
        str _additionalNumber = '')
    {
        AmountMST beginningAccountingCurrencyBalance;
        AmountMST beginningTransactionCurrencyBalance;
        AmountMST endingAccountingCurrencyBalance;
        AmountMST endingTransactionCurrencyBalance;
        AmountMST accountingCurrencyCreditNetAmount;
        AmountMST transactionCurrencyCreditNetAmount;
        AmountMST accountingCurrencyDebitNetAmount;
        AmountMST transactionCurrencyDebitNetAmount;
        FromDate fromDate;
        ToDate toDate;

        LedgerBalanceDimAttrValueComboAmounts balance = LedgerBalanceDimAttrValueComboAmounts::construct();
        [fromDate, toDate] = GBTFileGenerationHelper_CN::getAccountingDateRange(_fiscalCalendarPeriod);

        DimensionAttributeValueCombination      ledgerDimension;
        MainAccount                             mainAccount;
        DimensionHierarchy                      dimHerarchy;
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        GeneralJournalEntry                     generalJournalEntry;

        while select ledgerDimension
            exists join mainAccount
                where mainAccount.RecId == LedgerDimension.MainAccount
                    && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                    && MainAccount.MainAccountId == _mainAccountNum
            exists join GeneralJournalEntry from generalJournalAccountEntry
                where generalJournalAccountEntry.LedgerDimension == ledgerDimension.RecId
                exists join generalJournalEntry
                    where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                        && generalJournalEntry.AccountingDate <= _fiscalCalendarPeriod.EndDate
                        && generalJournalEntry.Ledger == Ledger::current()
            exists join dimHerarchy
                where dimHerarchy.RecId          == ledgerDimension.AccountStructure
                    && dimHerarchy.StructureType == DimensionHierarchyType::AccountStructure
        {
            if (GBTFileGenerationHelper_CN::getAdditionalDimensions(LedgerDimension.RecId) == _additionalNumber)
            {
                //Beginning
                balance.parmAccountingDateRange(fromDate, toDate);
                balance.parmIncludeRegularPeriod(fromDate == toDate ? false : true);
                balance.parmIncludeOpeningPeriod(true);
                balance.parmIncludeClosingPeriod(true);
                balance.parmIncludeClosingPeriodBySystem(true);
                balance.calculateBalance(LedgerDimension);

                beginningAccountingCurrencyBalance  += balance.getAccountingCurrencyBalance();
                beginningTransactionCurrencyBalance += balance.getTransactionCurrencyDebitBalance_CN() - balance.getTransactionCurrencyCreditBalance_CN();

                //Net amount
                balance.parmAccountingDateRange(_fiscalCalendarPeriod.StartDate, _fiscalCalendarPeriod.EndDate);
                balance.parmIncludeRegularPeriod(true);
                balance.parmIncludeOpeningPeriod(false);
                balance.parmIncludeClosingPeriod(false);
                balance.parmIncludeClosingPeriodBySystem(false);
                balance.calculateBalance(LedgerDimension);

                accountingCurrencyCreditNetAmount   += balance.getAccountingCurrencyCreditBalance();
                transactionCurrencyCreditNetAmount  += balance.getTransactionCurrencyCreditBalance_CN();
                accountingCurrencyDebitNetAmount    += balance.getAccountingCurrencyDebitBalance();
                transactionCurrencyDebitNetAmount   += balance.getTransactionCurrencyDebitBalance_CN();
            }
        }

        return [beginningAccountingCurrencyBalance, beginningTransactionCurrencyBalance, accountingCurrencyCreditNetAmount,
            transactionCurrencyCreditNetAmount, accountingCurrencyDebitNetAmount, transactionCurrencyDebitNetAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdditionalDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills additional dimensions.
    /// </summary>
    /// <param name="_ledgerDimensionRecId">
    /// The Recid of dimension attribute value combination.
    /// </param>
    /// <returns>The additional dimensions value</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str getAdditionalDimensions(RecId _ledgerDimensionRecId)
    {
        const str Comma = ',';
        boolean isNull = true;
        DimensionDisplayValue dimensionDisplayValueByLayout;
        DimensionAttributeValueCombination dimensionCombination = DimensionAttributeValueCombination::find(_ledgerDimensionRecId);
        DimensionHierarchyLevelCollection dimensionHierarchyLevelCollection = DimensionHierarchyLevelCollection::newForHierarchy(dimensionCombination.AccountStructure);

        dimensionHierarchyLevelCollection.initializeEnumerator();

        int i = 1;
        DimensionAttribute  dimAttr = DimensionAttribute::findByLocalizedName(gbtParameters_CN::find().CashFlowDimension);

        while (dimensionHierarchyLevelCollection.moveNext())
        {
            DimensionAttributeRecId currentDimensionAttributeRecId = dimensionHierarchyLevelCollection.currentDimensionAttributeId();

            if (currentDimensionAttributeRecId == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                || currentDimensionAttributeRecId == dimAttr.RecId)
            {
                continue;
            }

            DimensionAttribute dimensionAttribute = DimensionAttribute::find(currentDimensionAttributeRecId);
            RecId dimensionKey = dimensionCombination.(DimensionAttributeValueCombination::getDimensionKeyFieldId(dimensionAttribute.Name));
            DimensionAttributeValue dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndEntityInst(dimensionAttribute.RecId, dimensionKey);

            if (i == 1)
            {
                dimensionDisplayValueByLayout = dimensionAttributeValue.getValue();
            }
            else
            {
                dimensionDisplayValueByLayout += Comma + dimensionAttributeValue.getValue();
            }

            i++;

            if (dimensionAttributeValue.getValue())
            {
                isNull = false;
			}
        }

        return isNull ? '' : dimensionDisplayValueByLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetCoditionIdByDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the asset conditional ID.
    /// </summary>
    /// <param name = "_assetTable">
    /// The table AssetTable.
    /// </param>
    /// <param name = "_date">
    /// The date used to filter the data base log.
    /// </param>
    /// <returns>The asset condtion ID.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AssetConditionId getAssetCoditionIdByDate(AssetTable _assetTable, date _date)
    {
        SysDataBaseLog dataBaseLog;
        container tmp;

        utcdatetime queryDateTime = DateTimeUtil::newDateTime(_date + 1, 0);

        select firstonly dataBaseLog
            order by CreatedDateTime, RecId
            where dataBaseLog.Table == tableNum(AssetTable)
                && dataBaseLog.LogRecId == _assetTable.RecId
                && dataBaseLog.CreatedDateTime >= queryDateTime
                && dataBaseLog.LogType == DatabaseLogType::Update;

        if (dataBaseLog)
        {
            ListEnumerator enumerator = dataBaseLog.getDataAslist().getEnumerator();

            while (enumerator.moveNext())
            {
                tmp = enumerator.current();

                if (conPeek(tmp, 1) == fieldNum(AssetTable, Condition))
                {
                    return dataBaseLog.contents2Str(conPeek(tmp, 3), fieldNum(AssetTable, Condition));
                }
            }
        }

        return _assetTable.Condition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetChangeTypeByDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the asset change type by date.
    /// </summary>
    /// <param name = "_assetId">
    /// The id of the asset.
    /// </param>
    /// <param name = "_bookId">
    /// The book id to which the asset belongs.
    /// </param>
    /// <param name = "_date">
    /// The date used to filter the AssetTrans.
    /// </param>
    /// <returns>The asset change type.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str getAssetChangeTypeByDate(AssetId _assetId, AssetBookId _bookId, date _date)
    {
        str assetChangeType;

        AssetTrans assetTrans;

        select firstonly TransDate, TransType from assetTrans
            order by TransDate desc
            where assetTrans.TransDate < _date
                && assetTrans.AssetId == _assetId
                && assetTrans.BookId == _bookId
                && (assetTrans.TransType == AssetTransType::Acquisition
                    || assetTrans.TransType == AssetTransType::AcquisitionAdj
                    || assetTrans.TransType == AssetTransType::WriteDownAdj
                    || assetTrans.TransType == AssetTransType::Revaluation);

        AssetLocationTransferHistory_CN assetLocationTransferHistory;

        select firstonly TransferDate from assetLocationTransferHistory
            order by TransferDate desc
            where assetLocationTransferHistory.TransferDate < _date
                && assetLocationTransferHistory.AssetId == _assetId;

        if (assetLocationTransferHistory.TransferDate > assetTrans.TransDate)
        {
            assetChangeType = GBTFileGenerationHelper_CN::getAssetChangeTypeCode(#LocationChangeTypeValue);
        }
        else
        {
            assetChangeType = GBTFileGenerationHelper_CN::getAssetChangeTypeCode(assetTrans.TransType);
        }

        return assetChangeType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>