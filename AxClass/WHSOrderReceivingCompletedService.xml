<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOrderReceivingCompletedService</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class WHSOrderReceivingCompletedService
{
    private NoYes receiveCompleteLoads;
    private Map loadsToReceiveComplete; // InventLocationId -> WHSLoadTable mapping

    private WHSInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        receiveCompleteLoads = NoYes::Yes;
        loadsToReceiveComplete = new Map(Types::String, Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceiveCompleteLoads</Name>
				<Source><![CDATA[
    internal NoYes parmReceiveCompleteLoads(NoYes _receiveCompleteLoads = receiveCompleteLoads)
    {
        receiveCompleteLoads = _receiveCompleteLoads;
        return receiveCompleteLoads;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReceiptLinesProvider</Name>
				<Source><![CDATA[
    private WHSOrderReceivingCompletedReceiptLinesProvider createReceiptLinesProvider(Common _sourceOrder)
    {
        WHSOrderReceivingCompletedAttribute attribute = new WHSOrderReceivingCompletedAttribute(tableId2name(_sourceOrder.TableId));
        SysExtensionGenericInstantiation instantiation = new SysExtensionGenericInstantiation(_sourceOrder);
        WHSOrderReceivingCompletedReceiptLinesProvider linesProvider
            = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(
                classStr(WHSOrderReceivingCompletedReceiptLinesProvider),
                attribute,
                instantiation);

        if (!linesProvider)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return linesProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLoadsToReceive</Name>
				<Source><![CDATA[
    private void resetLoadsToReceive()
    {
        loadsToReceiveComplete = new Map(Types::String, Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptConfirmOrder</Name>
				<Source><![CDATA[
    internal boolean receiptConfirmOrder(Common _sourceRecord)
    {
        using (var _ = this.logger().orderReceivingCompleted().receiptConfirm())
        {
            ttsbegin;

            WHSOrderReceivingCompletedReceiptLinesProvider receiptLinesProvider = this.createReceiptLinesProvider(_sourceRecord);
            this.resetLoadsToReceive();

            WHSLoadLine loadline;
            while (receiptLinesProvider.nextResult())
            {
                InventTrans inventTrans = receiptLinesProvider.currentInventTrans();
                WHSReceiptOrderLine receiptOrderLine = receiptLinesProvider.currentReceiptOrderLine();

                if (!loadLine.LoadId)
                {
                    loadLine = this.createLoadLineFromReceiptLine(receiptOrderLine, inventTrans.Qty);
                }
                else if (receiptLinesProvider.receiptOrderLineChanged())
                {
                    loadLine.insert();
                    loadLine = this.createLoadLineFromReceiptLine(receiptOrderLine, inventTrans.Qty);
                }
                else
                {
                    this.addRegisteredQtyToLoadLine(loadLine, inventTrans.Qty);
                }

                inventTrans.LoadId = loadLine.LoadId;
                inventTrans.update();
            }

            if (loadLine.LoadId)
            {
                loadLine.insert();
            }

            if (receiveCompleteLoads == NoYes::Yes)
            {
                WHSInboundReceivingCompletedService::receiptConfirmLoads(this.getLoadIdsToReceiveList().getEnumerator(), true);
            }

            ttscommit;

            if (loadsToReceiveComplete.elements() == 0)
            {
                return checkFailed("@WAX:NoLoadsToReceiveCompleteWarning");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLoadIdsToReceiveList</Name>
				<Source><![CDATA[
    private List getLoadIdsToReceiveList()
    {
        List loadIdsToReceive = new List(Types::String);
        SetEnumerator se = loadsToReceiveComplete.valueSet().getEnumerator();
        while (se.moveNext())
        {
            WHSLoadTable loadTable = se.current();
            loadIdsToReceive.addEnd(loadTable.LoadId);
        }

        return loadIdsToReceive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrCreateLoadTable</Name>
				<Source><![CDATA[
    private WHSLoadTable getOrCreateLoadTable(WHSReceiptOrderLine _inboundOrderLine)
    {
        InventLocationId inventLocationId = _inboundOrderLine.inventDim().InventLocationId;

        WHSLoadTable loadTable;
        if (loadsToReceiveComplete.exists(inventLocationId))
        {
            loadTable = loadsToReceiveComplete.lookup(inventLocationId);
        }
        else
        {
            loadTable = this.createLoadTable(inventLocationId);
            loadsToReceiveComplete.insert(inventLocationId, loadTable);
        }

        return loadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLoadLineFromReceiptLine</Name>
				<Source><![CDATA[
    private WHSLoadLine createLoadLineFromReceiptLine(WHSReceiptOrderLine _inboundOrderLine, Qty _registeredQty)
    {
        WHSLoadTable loadTable = this.getOrCreateLoadTable(_inboundOrderLine);
        WHSLoadLine createdLoadLine = this.createLoadLine(loadTable.LoadId, _inboundOrderLine, _registeredQty);
        loadTable.addLoadLineToShipment(createdLoadLine);

        return createdLoadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLoadLine</Name>
				<Source><![CDATA[
    private WHSLoadLine createLoadLine(WHSLoadId _loadId, WHSReceiptOrderLine _inboundOrderLine, Qty _registeredQty)
    {
        WHSLoadLine loadLine;
        loadLine.LoadId = _loadId;
        loadLine.initFromSourceOrder(_inboundOrderLine);

        UnitIDBase fromUnit = WHSCatchWeightHelper::inventHandlingUnitId(loadLine.ItemId);
        Qty receivedQtyForLoadLineInLoadUOM = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
            loadLine.ItemId,
            loadLine.InventDimId,
            _registeredQty,
            fromUnit,
            loadLine.uom,
            NoYes::No,
            NoYes::No);
        loadLine.InventQty = _registeredQty;
        loadLine.Qty = receivedQtyForLoadLineInLoadUOM;
        loadLine.QtyLeftToStructure = loadLine.Qty;

        return loadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRegisteredQtyToLoadLine</Name>
				<Source><![CDATA[
    private void addRegisteredQtyToLoadLine(WHSLoadLine _loadLine, Qty _registeredQty)
    {
        UnitIDBase fromUnit = WHSCatchWeightHelper::inventHandlingUnitId(_loadLine.ItemId);
        Qty qtyUOM = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
            _loadLine.ItemId,
            _loadLine.InventDimId,
            _registeredQty,
            fromUnit,
            _loadLine.uom,
            NoYes::No,
            NoYes::No);

        _loadLine.InventQty += _registeredQty;
        _loadLine.Qty += qtyUOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLoadTable</Name>
				<Source><![CDATA[
    private WHSLoadTable createLoadTable(InventLocationId _inventLocationId)
    {
        WHSLoadTable loadTable;
        loadTable.setLoadId();
        loadTable.initFromLoadTemplateId(this.loadTemplateId());
        loadTable.LoadDirection = WHSLoadDirection::Inbound;
        loadTable.LoadPaysFreight = this.loadPaysFreight();
        loadTable.InventLocationId = _inventLocationId;
        loadTable.InventSiteId = InventLocation::find(_inventLocationId).InventSiteId;

        loadTable.insert();

        return loadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTemplateId</Name>
				<Source><![CDATA[
    private WHSLoadTemplateId loadTemplateId()
    {
        WHSLoadTemplateId loadTemplateId;
        return loadTemplateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPaysFreight</Name>
				<Source><![CDATA[
    private TMSLoadPaysFreight loadPaysFreight()
    {
        TMSLoadPaysFreight loadPaysFreight;
        return loadPaysFreight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger logger()
    {
        if (!logger)
        {
            logger = WHSInstrumentationLogger::createLogger(classStr(WHSOrderReceivingCompletedService));
        }

        return logger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>