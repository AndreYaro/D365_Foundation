<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileDeviceSupportChecker</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSMobileDeviceSupportChecker
{
    private const str flightPrefix = 'WHSMobileApp';
    private const str flightUnsupportedSuffix = 'Unsupported';
    private const str flightCloseToUnsupportedSuffix = 'CloseToUnsupported';
    private const str flightBlockedSuffix = 'Blocked';
    private const str flightAlertBlockedSuffix = 'AlertBlocked';
    private const str flightAlertUnsupportedSuffix = 'AlertUnsupported';

    private WHSMobileDevice mobileDevice;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new(WHSMobileDevice _mobileDevice)
    {
        mobileDevice = _mobileDevice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAppVersionSupport</Name>
				<Source><![CDATA[
    internal WHSVersionSupport getAppVersionSupport()
    {
        WHSMobileAppVersion versionString = mobileDevice.MobileAppVersion;
        if (versionString == '')
        {
            // Missing app version means WMA v1 which is unsupported
            return WHSVersionSupport::Unsupported;
        }

        WHSVersionNumber appVersion = WHSVersionNumber::construct(versionString);
        if (!appVersion.isValid())
        {
            return WHSVersionSupport::Unknown;
        }

        // Specific version flights should override generic flights so we check them first
        WHSVersionSupport supportFromFlight = this.getAppSupportFromFlight(appVersion);
        if (supportFromFlight != WHSVersionSupport::Unknown)
        {
            return supportFromFlight;
        }
        
        if (appVersion.isWMAUnsupported()
            && WHSMobileApp2026AndOlderUnsupportedFlight::instance().isEnabled())
        {
            return WHSVersionSupport::Unsupported;
        }
        
        if (appVersion.isWMASoonUnsupported()
            && WHSMobileApp2039AndOlderCloseToUnsupportedFlight::instance().isEnabled())
        {
            return WHSVersionSupport::CloseToUnsupported;
        }

        return WHSVersionSupport::Supported;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlatformVersionSupport</Name>
				<Source><![CDATA[
    internal WHSVersionSupport getPlatformVersionSupport()
    {
        WHSVersionNumber platformVersion = WHSVersionNumber::construct(mobileDevice.PlatformVersion);
        if (!platformVersion.isValid())
        {
            return WHSVersionSupport::Unknown;
        }

        WHSVersionSupport status = WHSVersionSupport::Unknown;
        switch (mobileDevice.Platform)
        {
            case WHSMobileAppPlatform::Android:
                status = this.getAndroidVersionSupport(platformVersion);
                break;
            
            case WHSMobileAppPlatform::iOS:
                status = this.getIOSVersionSupport(platformVersion);
                break;
            
            case WHSMobileAppPlatform::iPadOS:
                status = this.getPlatformVersionSupportFromFlight('IPadOS', platformVersion);
                if (status == WHSVersionSupport::Unknown)
                {
                    status = WHSVersionSupport::Supported;
                }
                break;

            case WHSMobileAppPlatform::Windows:
                status = this.getPlatformVersionSupportFromFlight('Windows', platformVersion);
                if (status == WHSVersionSupport::Unknown)
                {
                    status = WHSVersionSupport::Supported;
                }
                break;

            case WHSMobileAppPlatform::Unknown:
                status = WHSVersionSupport::Unknown;
                break;

            default:
                WHSInstrumentationLogger::createLogger(classStr(WHSMobileDeviceSupportChecker)).logError('Unhandled mobile device platform: ' + enum2Str(mobileDevice.Platform));
                status = WHSVersionSupport::Unknown;
                break;
        }

        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAlertSupport</Name>
				<Source><![CDATA[
    internal WHSVersionSupport getAlertSupport()
    {
        if (mobileDevice.Alert != '')            
        {
            if (strStartsWith(mobileDevice.Alert, '['))
            {
                int closeBracketPos = strFind(mobileDevice.Alert, ']', 1, maxint());
                if (closeBracketPos)
                {
                    str alertToken = substr(mobileDevice.Alert, 2, closeBracketPos-2);
                    if (this.isFlightEnabledForAlert(flightPrefix + flightAlertUnsupportedSuffix, alertToken))
                    {
                        return WHSVersionSupport::Unsupported;
                    }

                    if (this.isFlightEnabledForAlert(flightPrefix + flightAlertBlockedSuffix, alertToken))
                    {
                        return WHSVersionSupport::Blocked;
                    }
                }
            }

            return WHSVersionSupport::CloseToUnsupported;
        }

        return WHSVersionSupport::Supported;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeviceSupport</Name>
				<Source><![CDATA[
    internal WHSVersionSupport getDeviceSupport()
    {
        if (WHSMobileDeviceAlertFlight::instance().isEnabled())
        {
            if (mobileDevice.MobileAppSupportStatus == WHSVersionSupport::Blocked
            || mobileDevice.PlatformSupportStatus == WHSVersionSupport::Blocked
            || mobileDevice.AlertSupportStatus == WHSVersionSupport::Blocked)
            {
                return WHSVersionSupport::Blocked;
            }

            if (mobileDevice.MobileAppSupportStatus == WHSVersionSupport::Unsupported
            || mobileDevice.PlatformSupportStatus == WHSVersionSupport::Unsupported
            || mobileDevice.AlertSupportStatus == WHSVersionSupport::Unsupported)
            {
                return WHSVersionSupport::Unsupported;
            }

            if (mobileDevice.MobileAppSupportStatus == WHSVersionSupport::CloseToUnsupported
            || mobileDevice.PlatformSupportStatus == WHSVersionSupport::CloseToUnsupported
            || mobileDevice.AlertSupportStatus == WHSVersionSupport::CloseToUnsupported)
            {
                return WHSVersionSupport::CloseToUnsupported;
            }

            if (mobileDevice.MobileAppSupportStatus == WHSVersionSupport::Supported
            && (mobileDevice.PlatformSupportStatus == WHSVersionSupport::Unknown ||
                mobileDevice.PlatformSupportStatus == WHSVersionSupport::Supported))
            {
                // Supported WMA version on unknown platform is a supported combination
                return WHSVersionSupport::Supported;
            }

            if (mobileDevice.MobileAppSupportStatus == WHSVersionSupport::Unknown
            || mobileDevice.PlatformSupportStatus == WHSVersionSupport::Unknown
            || mobileDevice.AlertSupportStatus == WHSVersionSupport::Unknown)
            {
                return WHSVersionSupport::Unknown;
            }
        }
        else
        {
            if (mobileDevice.MobileAppSupportStatus == WHSVersionSupport::Blocked
            || mobileDevice.PlatformSupportStatus == WHSVersionSupport::Blocked)
            {
                return WHSVersionSupport::Blocked;
            }

            if (mobileDevice.MobileAppSupportStatus == WHSVersionSupport::Supported
            && mobileDevice.PlatformSupportStatus == WHSVersionSupport::Unknown)
            {
                // Supported WMA version on unknown platform is a supported combination
                return WHSVersionSupport::Supported;
            }

            if (mobileDevice.MobileAppSupportStatus == WHSVersionSupport::Unsupported
            || mobileDevice.PlatformSupportStatus == WHSVersionSupport::Unsupported)
            {
                return WHSVersionSupport::Unsupported;
            }

            if (mobileDevice.MobileAppSupportStatus == WHSVersionSupport::CloseToUnsupported
            || mobileDevice.PlatformSupportStatus == WHSVersionSupport::CloseToUnsupported)
            {
                return WHSVersionSupport::CloseToUnsupported;
            }

            if (mobileDevice.MobileAppSupportStatus == WHSVersionSupport::Unknown
            || mobileDevice.PlatformSupportStatus == WHSVersionSupport::Unknown)
            {            
                return WHSVersionSupport::Unknown;
            }
        }

        return WHSVersionSupport::Supported;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAppSupportFromFlight</Name>
				<Source><![CDATA[
    private WHSVersionSupport getAppSupportFromFlight(WHSVersionNumber _appVersion)
    {
        if (!_appVersion.isValid())
        {
            return WHSVersionSupport::Unknown;
        }

        if (this.isFlightEnabledForVersion(flightPrefix + flightBlockedSuffix, _appVersion))
        {
            return WHSVersionSupport::Blocked;
        }

        if (this.isFlightEnabledForVersion(flightPrefix + flightUnsupportedSuffix, _appVersion))
        {
            return WHSVersionSupport::Unsupported;
        }

        if (this.isFlightEnabledForVersion(flightPrefix + flightCloseToUnsupportedSuffix, _appVersion))
        {
            return WHSVersionSupport::CloseToUnsupported;
        }

        return WHSVersionSupport::Unknown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAndroidVersionSupport</Name>
				<Source><![CDATA[
    private WHSVersionSupport getAndroidVersionSupport(WHSVersionNumber _androidVersion)
    {
        if (!_androidVersion.isValid())
        {
            return WHSVersionSupport::Unknown;
        }

        WHSVersionSupport flightSupport = this.getPlatformVersionSupportFromFlight('Android', _androidVersion);
        if (flightSupport != WHSVersionSupport::Unknown)
        {
            return flightSupport;
        }

        if (_androidVersion.greaterOrEqual(WHSVersionNumber::construct('11.0.0.0')) == UnknownNoYes::No
            && WHSMobileAppAndroidLessThan11UnsupportedFlight::instance().isEnabled())
        {
            return WHSVersionSupport::Unsupported;
        }

        return WHSVersionSupport::Supported;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIOSVersionSupport</Name>
				<Source><![CDATA[
    private WHSVersionSupport getIOSVersionSupport(WHSVersionNumber _iOSVersion)
    {
        if (!_iOSVersion.isValid())
        {
            return WHSVersionSupport::Unknown;
        }

        WHSVersionSupport flightSupport = this.getPlatformVersionSupportFromFlight('IOS', _iOSVersion);
        if (flightSupport != WHSVersionSupport::Unknown)
        {
            return flightSupport;
        }

        if (_iOSVersion.greaterOrEqual(WHSVersionNumber::construct('12.0.0.0')) == UnknownNoYes::No
            && WHSMobileAppIOSLessThan12UnsupportedFlight::instance().isEnabled())
        {
            return WHSVersionSupport::Unsupported;
        }

        return WHSVersionSupport::Supported;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlatformVersionSupportFromFlight</Name>
				<Source><![CDATA[
    private WHSVersionSupport getPlatformVersionSupportFromFlight(str _platformName, WHSVersionNumber _platformVersion)
    {
        if (!_platformVersion.isValid())
        {
            return WHSVersionSupport::Unknown;
        }

        str platformFlightPrefix = flightPrefix + _platformName;

        if (this.isFlightEnabledForVersion(platformFlightPrefix + flightBlockedSuffix, _platformVersion))
        {
            return WHSVersionSupport::Blocked;
        }

        if (this.isFlightEnabledForVersion(platformFlightPrefix + flightUnsupportedSuffix, _platformVersion))
        {
            return WHSVersionSupport::Unsupported;
        }

        if (this.isFlightEnabledForVersion(platformFlightPrefix + flightCloseToUnsupportedSuffix, _platformVersion))
        {
            return WHSVersionSupport::CloseToUnsupported;
        }

        return WHSVersionSupport::Unknown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFlightEnabledForVersion</Name>
				<Source><![CDATA[
    private boolean isFlightEnabledForVersion(str _flightName, WHSVersionNumber _version)
    {
        if (!_version.isValid())
        {
            return false;
        }

        return Global::isFlightEnabled(_flightName + _version.toFlightNameVersion());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFlightEnabledForAlert</Name>
				<Source><![CDATA[
    private boolean isFlightEnabledForAlert(str _flightName, str _alertToken)
    {        
        return Global::isFlightEnabled(_flightName + _alertToken);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>