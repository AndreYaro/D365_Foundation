<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSControlCatchWeight</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSControlCatchWeight</c> class is responsible for handling the catch weight controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#CatchWeight)]
public class WHSControlCatchWeight extends WHSControl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isCatchWeightToProcessValid</Name>
				<Source><![CDATA[
    /// <summary> 
    /// Determines if the catch weight to process is valid.
    /// </summary>
    /// <param name = "_catchWeight">The catch weight value to process.</param>
    /// <returns>true if the catch weight to process is valid.</returns>
    protected boolean isCatchWeightToProcessValid(PdsCWInventQty _catchWeight)
    {
        return this.isCycleCountWork() ? (_catchWeight >= 0) : (_catchWeight > 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public boolean process()
    {
        ItemId          itemId;
        InventDimId     inventDimId;
        PdsCWInventQty  catchWeightQty;
        WHSTransWeight  catchWeight = WHSWorkExecuteDisplay::str2numDisplay(this.parmData());

        if (!this.isCatchWeightToProcessValid(catchWeight))
        {
            return this.fail("@WAX:InvalidCatchWeight");
        }

        WHSWorkTransType workTransType;
        boolean isMixedLPExternalInboundOrder;

        if (WHSWorkExecuteDisplayReceivingRefactoringFlight::instance().isEnabled())
        {
            workTransType = WHSRFMenuItemTable::getWorkTransTypeForMixedLP(context.controlData.parmMenuItemName(), pass);
            if (mode == WHSWorkExecuteMode::MixedLPReceiving 
                || (WHSCheckIsExternalInboundOrderForMixedLPReceivingAndLoadingFlight::instance().isEnabled() 
                    && mode == WHSWorkExecuteMode::MixedLPReceivingAndLocate))
            {
                isMixedLPExternalInboundOrder = WhsWorkTransactionType::singletonFromType(workTransType).isForExternalInboundShipment();
            }
        }
        else
        {
            workTransType = WHSRFMenuItemTable::getWorkTransTypeForMixedLPMenuItem(context.controlData.parmMenuItemName());
            isMixedLPExternalInboundOrder = (workTransType == WHSWorkTransType::Purch);
        }

        if ((mode == WHSWorkExecuteMode::MixedLPReceiving && isMixedLPExternalInboundOrder)
        ||  (mode == WHSWorkExecuteMode::MixedLPReceivingAndLocate && isMixedLPExternalInboundOrder)
        ||  WHSWorkExecutionMode::newFromMode(mode).isInboundOrderOrLoadReceiving())
        {
            WHSReceiptOrderLine inboundOrderLine;
            if (WHSWorkExecuteDisplayReceivingRefactoringFlight::instance().isEnabled())
            {
                inboundOrderLine = pass.receivingOrderProvider().orderLine(pass);
            }
            else
            {
                inboundOrderLine = PurchLine::find(pass.lookup(#PONum), pass.lookupInt64(#POLineNum));
            }

            // Method should not be called for items that are not catch weight enabled.
            if (!PdsGlobal::pdsIsCWItem(inboundOrderLine.ItemId))
            {
                return this.fail(Error::wrongUseOfFunction(funcName()));
            }

            itemId      = inboundOrderLine.ItemId;
            inventDimId = inboundOrderLine.InventDimId;

            catchWeightQty = this.getCatchWeightQty(itemId, inventDimId);
        }
        else if (mode == WHSWorkExecuteMode::TransferOrderItemReceiving
        ||  mode == WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate
        ||  mode == WHSWorkExecuteMode::TransferOrderLineReceiving
        ||  mode == WHSWorkExecuteMode::TransferOrderLineReceiving
        ||  (mode == WHSWorkExecuteMode::MixedLPReceiving && workTransType == WHSWorkTransType::TransferReceipt)
        ||  (mode == WHSWorkExecuteMode::MixedLPReceivingAndLocate && workTransType == WHSWorkTransType::TransferReceipt))
        {
            InventTransferLine transferLine  = InventTransferLine::find(pass.lookup(#TONum), pass.lookupNum(#TOLineNum));

            // Method should not be called for items that are not catch weight enabled.
            if (!PdsGlobal::pdsIsCWItem(transferLine.ItemId))
            {
                return this.fail(Error::wrongUseOfFunction(funcName()));
            }

            itemId      = transferLine.ItemId;
            inventDimId = transferLine.InventDimId;

            catchWeightQty = this.getCatchWeightQty(itemId, inventDimId);
        }
        else if (mode == WHSWorkExecuteMode::ReturnOrder
        ||       mode == WHSWorkExecuteMode::ReturnOrderAndLocate
        ||      (mode == WHSWorkExecuteMode::MixedLPReceiving && workTransType == WHSWorkTransType::ReturnOrder)
        ||      (mode == WHSWorkExecuteMode::MixedLPReceivingAndLocate && workTransType == WHSWorkTransType::ReturnOrder))

        {
            SalesLine returnLine = controlData.findBestMatchReturnLine();

            // Method should not be called for items that are not catch weight enabled.
            if (!PdsGlobal::pdsIsCWItem(returnLine.ItemId))
            {
                return this.fail(Error::wrongUseOfFunction(funcName()));
            }

            itemId      = returnLine.ItemId;
            inventDimId = returnLine.InventDimId;

            catchWeightQty = this.getCatchWeightQty(itemId, inventDimId);
        }
        else if (mode == WHSWorkExecuteMode::LicensePlateReceiving
        ||  mode == WHSWorkExecuteMode::LicensePlateReceivingAndLocate)
        {
            WHSASNItem asnItem;

            select firstOnly ItemId, InventDimId, UOM, Qty from asnItem
                where asnItem.RecId == pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::ASNItemRecId);

            // Method should not be called for items that are not catch weight enabled.
            if (!PdsGlobal::pdsIsCWItem(asnItem.ItemId))
            {
                return this.fail(Error::wrongUseOfFunction(funcName()));
            }

            itemId      = asnItem.ItemId;
            inventDimId = asnItem.InventDimId;

            if (itemId)
            {
                catchWeightQty  = WHSCatchWeightHelper::convertInventQuantity(itemId,
                                                                        asnItem.UOM,
                                                                        asnItem.Qty,
                                                                        inventDimId);
            }
        }
        else if (mode == WHSWorkExecuteMode::ReportAsFinished
        ||  mode == WHSWorkExecuteMode::ReportAsFinishedAndLocate)
        {
            itemId = pass.lookupStr(#ItemId);

            // Method should not be called for items that are not catch weight enabled.
            if (!PdsGlobal::pdsIsCWItem(itemId))
            {
                return this.fail(Error::wrongUseOfFunction(funcName()));
            }

            ProdTable prodTable = ProdTable::find(pass.lookupStr(#ProdId));
            
            if (prodTable.ItemId == itemId)
            {
                inventDimId = prodTable.InventDimId;
            }
            else
            {
                inventDimId = this.findProdCoByFromPass(pass).InventDimId;
            }

            catchWeightQty  = WHSCatchWeightHelper::convertInventQuantity(itemId,
                                                                    pass.lookup(#UOM),
                                                                    pass.lookupNum(#Qty),
                                                                    inventDimId);
        }
        else if (mode == WHSWorkExecuteMode::WarehouseTransfer)
        {
            itemId = pass.lookupStr(#ItemId);

            if (!PdsGlobal::pdsIsCWItem(itemId))
            {
                return this.fail(Error::wrongUseOfFunction(funcName()));
            }

            inventDimId = pass.createProductInventDimFromPass().inventDimId;
            catchWeightQty  = WHSCatchWeightHelper::convertInventQuantity(itemId,
                                                                    pass.lookup(#UOM),
                                                                    pass.lookupNum(#Qty),
                                                                    inventDimId);
        }
        else if (mode == WHSWorkExecuteMode::Quarantine)
        {
            itemId = pass.lookupStr(#ItemId);

            if (!PdsGlobal::pdsIsCWItem(itemId))
            {
                return this.fail(Error::wrongUseOfFunction(funcName()));
            }

            inventDimId = pass.createProductInventDimFromPass().inventDimId;

            catchWeightQty  = WHSCatchWeightHelper::convertInventQuantity(itemId,
                                                                    pass.lookup(#UOM),
                                                                    pass.lookup(#Qty),
                                                                    inventDimId);
        }
        else if (mode == WHSWorkExecuteMode::AdjustmentIn
        ||  mode == WHSWorkExecuteMode::AdjustmentOut)
        {
            itemId = pass.lookupStr(#ItemId);

            if (!PdsGlobal::pdsIsCWItem(itemId))
            {
                return this.fail(Error::wrongUseOfFunction(funcName()));
            }

            inventDimId = pass.createProductInventDimFromPass().inventDimId;
            catchWeightQty = this.getCatchWeightQty(itemId, inventDimId);
        }
        else if (this.isCycleCountWork())
        {
            itemId = pass.lookupStr(#ItemId);
            if (!PdsGlobal::pdsIsCWItem(itemId))
            {
                return this.fail(Error::wrongUseOfFunction(funcName()));
            }

            catchWeightQty = WHSWorkExecuteCycleCountQuantityValidator::newPass(pass).calculateTotalQty();
        }

        if (!PDSCatchWeight::validateInventQty(itemId,
                                            catchWeight,
                                            catchWeightQty,
                                            false))
        {
            return this.fail(strFmt("@WAX:Error_InvalidCatchWeight", catchWeight, catchWeightQty, itemId));
        }

        if ((mode == WHSWorkExecuteMode::AdjustmentOut
                || mode == WHSWorkExecuteMode::WarehouseTransfer
                || mode == WHSWorkExecuteMode::Quarantine)
            && WHSInventTable::outboundWeightVarianceMethod(itemId) == WHSOutboundWeightVarianceMethod::Restrict
            && !this.validateRemainingOnHandQuantity(itemId, catchWeightQty, catchWeight))
        {
            return false;
        }

        fieldValues.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, catchWeight);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the catch weight control as blank to ensure weight is entered
    /// </summary>
    public void populate()
    {
        fieldValues.insert(this.parmName(), '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProdCoByFromPass</Name>
				<Source><![CDATA[
    private PmfProdCoBy findProdCoByFromPass(WHSRFPassthrough _pass)
    {
        return PmfProdCoBy::findByProdIdItemIdInventDim(_pass.parmProdId(), _pass.parmItemId(), _pass.createInventDimFromPass());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCatchWeightQty</Name>
				<Source><![CDATA[
    private WHSTransWeight getCatchWeightQty(ItemId _itemId, InventDimId _inventDimId)
    {
        PdsCWInventQty catchWeightQty;

        WHSWorkTransType workTransType = WHSRFMenuItemTable::getWorkTransTypeForMixedLP(context.controlData.parmMenuItemName(), pass);

        //return orders always capture weight independent on settings
        if (mode == WHSWorkExecuteMode::ReturnOrder
            ||  mode == WHSWorkExecuteMode::ReturnOrderAndLocate
            ||  (mode == WHSWorkExecuteMode::MixedLPReceiving && workTransType == WHSWorkTransType::ReturnOrder)
            ||  (mode == WHSWorkExecuteMode::MixedLPReceivingAndLocate && workTransType == WHSWorkTransType::ReturnOrder))

        {
            catchWeightQty = this.getCatchWeightQtyForReturns(_itemId, _inventDimId);

        }
        else if (mode == WHSWorkExecuteMode::AdjustmentIn
                 ||  mode == WHSWorkExecuteMode::AdjustmentOut
                 ||  WHSInventTable::shouldCaptureAggregateWeight(_itemId)
                 || ((mode == WHSWorkExecuteMode::MixedLPReceiving || mode == WHSWorkExecuteMode::MixedLPReceivingAndLocate)
                        && !WHSInventTable::shouldCaptureAggregateWeight(_itemId) && !WhsWorkExecuteDisplay::hasTrackingDimensions(mode, pass.lookup(#MenuItem), _itemId)))
        {
            catchWeightQty  = WHSCatchWeightHelper::convertInventQuantity(_itemId,
                                                                    fieldValues.lookup(#UOM),
                                                                    fieldValues.lookupNum(#Qty),
                                                                    _inventDimId);
        }
        else if (pass.exists(#DimQty)
                 || fieldValues.exists(#DimQty))
        {
            // When capturing dim tracking, is license plate grouping is enabled on the UOM it is possible to update the dimQty 
            // and enter the weight at the same time, so we must use the updated values in the fieldValues map.
            // With license plate grouping off, we will hit this code several times in one pass, one of which fieldValues will not have any values for DimQty/DimUOM, 
            // but by that time the pass will have been updated with the correct value.
            catchWeightQty  = WHSCatchWeightHelper::convertInventQuantity(_itemId,
                                                                    fieldValues.hasValue(#DimUOM) ? fieldValues.lookup(#DimUOM) : pass.lookup(#DimUOM), 
                                                                    fieldValues.hasValue(#DimQty) ? fieldValues.lookupNum(#DimQty) : pass.lookupNum(#DimQty),
                                                                    _inventDimId);
        }
        else
        {
            catchWeightQty  = WHSCatchWeightHelper::convertInventQuantity(_itemId,
                                                                    pass.lookup(#CurrentUOM), // Pull the currentUOM value from the same map as currentQty.
                                                                    pass.lookupNum(#CurrentQty), // The control class for currentQty does not populate field values.
                                                                    _inventDimId);
        }

        return catchWeightQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultValueToBlank</Name>
				<Source><![CDATA[
    protected boolean defaultValueToBlank()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCatchWeightQtyForReturns</Name>
				<Source><![CDATA[
    private WHSTransWeight getCatchWeightQtyForReturns(ItemId _itemId, InventDimId _inventDimId)
    {
        PdsCWInventQty catchWeightQty;
        
        //tracking dimensions are used 
        if (pass.exists(#DimQty))
        {
            catchWeightQty  = WHSCatchWeightHelper::convertInventQuantity(_itemId,
                                                                        pass.lookup(#DimUOM),
                                                                        pass.lookupNum(#DimQty),
                                                                        _inventDimId);
        }
        else
        {
            catchWeightQty  = WHSCatchWeightHelper::convertInventQuantity(_itemId,
                                                                        pass.lookup(#UOM),
                                                                        pass.lookupNum(#Qty),
                                                                        _inventDimId);
        }

        return catchWeightQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCycleCountWork</Name>
				<Source><![CDATA[
    private boolean isCycleCountWork()
    {
        return mode == WHSWorkExecuteMode::CycleCounting
            || mode == WHSWorkExecuteMode::SpotCycleCounting
            || mode == WHSWorkExecuteMode::CycleCountGrouping
            || context.controlData.parmWorkLine().WorkType == WHSWorkType::Count;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRemainingOnHandQuantity</Name>
				<Source><![CDATA[
    private boolean validateRemainingOnHandQuantity(ItemId _itemId, PdsCWQty _outboundCWQty, WHSTransWeight _outboundWeight)
    {
        InventDim inventDim = pass.createInventDimFromPass();

        if (mode == WHSWorkExecuteMode::Quarantine)
        {
            inventDim.InventStatusId = pass.lookupStr(#FromInventoryStatus);
            inventDim = InventDim::findOrCreate(inventDim);
        }

        PmfQtyDataCarrier onhand = WHSInventOnHand::getWorkPhysicalQuantityByInventDim(_itemId, inventDim);

        if (!PdsCatchWeight::validateInventQty(_itemId, onhand.parmInventQty() - _outboundWeight, onhand.parmCwQty() - _outboundCWQty, false))
        {
            return this.fail(strFmt("@WAX:Error_InvalidCatchWeightRemaining", onhand.parmInventQty() - _outboundWeight, onhand.parmCwQty() - _outboundCWQty, _itemId));
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>