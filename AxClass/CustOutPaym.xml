<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustOutPaym</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CustOutPaym extends CustVendOutPaym
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public configurationKeyId configurationKey()
    {
        return configurationkeynum(BankElectronicBanking);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPaym</Name>
				<Source><![CDATA[
    public CustPaym custPaym(LedgerJournalTrans _ledgerJournalTrans)
    {
        CustPaym custPaym;
        LedgerJournalTrans ledgerJournalTrans;
        BankAccountTable bankAccountTable;
        CustTable custTable;
        CustBankAccount custBankAccount;
        SpecTrans specTrans;
        str settledInvoices;
        LogisticsPostalAddress postalAddress;
        LogisticsPostalAddress cbPostalAddress;
        InvoiceId invoiceId;

        #ISOCountryRegionCodes

        ledgerJournalTrans = LedgerJournalTrans::findRecId(_ledgerJournalTrans.RecId, false);

        if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
        {
            bankAccountTable = BankAccountTable::findByLedgerDimension(ledgerJournalTrans.parmOffsetLedgerDimension());
        }
        else
        {
            bankAccountTable = BankAccountTable::findByLedgerDimension(CustPaymModeTable::find(ledgerJournalTrans.PaymMode).PaymentLedgerDimension);
        }
        if (!bankAccountTable && ledgerJournalTrans.BankAccountId)
        {
            bankAccountTable = BankAccountTable::find(ledgerJournalTrans.BankAccountId);
        }

        custTable = CustTable::findByCompany(ledgerJournalTrans.Company, ledgerJournalTrans.parmAccount());
        custBankAccount = CustBankAccount::findByCompany(ledgerJournalTrans.Company, ledgerJournalTrans.parmAccount(), ledgerJournalTrans.CustVendBankAccountId);

        while select specTrans
            where specTrans.SpecTableId == ledgerJournalTrans.TableId
                && specTrans.SpecRecId == ledgerJournalTrans.RecId
                && specTrans.SpecCompany == ledgerJournalTrans.company()
        {
            invoiceId = specTrans.custTrans().Invoice;
            if (invoiceId)
            {
                settledInvoices += invoiceId + ', ';
            }
        }
        settledInvoices = substr(settledInvoices, 1, strlen(settledInvoices)-2); // Remove the last ', '

        custPaym = new CustPaym();
        custPaym.ledgerJournalTrans(ledgerJournalTrans);
        custPaym.bankAccountTable(bankAccountTable);
        custPaym.custVendTable(custTable);
        custPaym.bankAccountMap(custBankAccount);
        custPaym.messageToSendersBank(custBankAccount.MsgToBank);
        custPaym.paymAmountInForeignCurrency(ledgerJournalTrans.amount());

        custPaym.paymAmountInSendersCurrency(CurrencyExchangeHelper::mstAmount(ledgerJournalTrans.amount(), ledgerJournalTrans.CurrencyCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), UnknownNoYes::Unknown, ledgerJournalTrans.ExchRate));

        custPaym.paymCurrencyCode(Currency::currencyCodeISO(ledgerJournalTrans.CurrencyCode));
        custPaym.paymDate(ledgerJournalTrans.TransDate);
        custPaym.paymExchangeRate(custBankAccount.ExchRate);
        custPaym.paymExchangeRateReference(custBankAccount.ExchRateRef);
        custPaym.paymId(ledgerJournalTrans.PaymId);
        custPaym.paymNote(ledgerJournalTrans.PaymentNotes);

        custPaym.paymPurposeCode(ledgerJournalTrans.BankCentralBankPurposeCode ?
            ledgerJournalTrans.BankCentralBankPurposeCode :
            custTable.BankCentralBankPurposeCode);

        custPaym.paymPurposeText(ledgerJournalTrans.BankCentralBankPurposeText ?
            ledgerJournalTrans.BankCentralBankPurposeText :
            custTable.BankCentralBankPurposeText);

        custPaym.paymReference(ledgerJournalTrans.PaymReference);
        custPaym.recieversBankTextCode(custBankAccount.CustPaymentTextCode);
        custPaym.recieversBankAccountId(custBankAccount.AccountID);
        custPaym.recieversBankName(custBankAccount.Name);
        custPaym.recieversBankRegistrationNumber(custBankAccount.RegistrationNum);

        unchecked (Uncheck::TableSecurityPermission)
        {
            custPaym.recieversBankAccount(custBankAccount.AccountNum);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            custPaym.recieversBankCodeType(custBankAccount.BankCodeType);
        }

        postalAddress = custTable.postalAddress();
        cbPostalAddress = LogisticsLocationEntity::location2PostalAddress(custBankAccount.Location);
        custPaym.recieversCompanyAddress(postalAddress.Address);
        custPaym.recieversCompanyAddress1(custPaym.textLine(postalAddress.Address,1));
        custPaym.recieversCompanyAddress2(custPaym.textLine(postalAddress.Address,2));
        custPaym.recieversCompanyAddress3(custPaym.textLine(postalAddress.Address,3));
        custPaym.recieversBankAddress(cbPostalAddress.Address);
        custPaym.recieversBankAddress1(custPaym.textLine(cbPostalAddress.Address,1));
        custPaym.recieversBankAddress2(custPaym.textLine(cbPostalAddress.Address,2));
        custPaym.recieversBankAddress3(custPaym.textLine(cbPostalAddress.Address,3));
        custPaym.recieversCountryRegionId(postalAddress.CountryRegionId);
        custPaym.recieversZipCode(postalAddress.ZipCode);
        custPaym.recieversCountryRegionISOCode(LogisticsAddressCountryRegion::find(postalAddress.CountryRegionId).isOcode);
        custPaym.recieversCompanyName(custTable.name());
        custPaym.recieversIdentificationOfSender(custTable.OurAccountNum);
        custPaym.recieversInvoiceNumber(settledInvoices);
        custPaym.recieversSwiftAddress(custBankAccount.swiftNo);
        custPaym.sendersBankAccount(bankAccountTable.AccountNum);
        custPaym.sendersBankRegistrationNumber(bankAccountTable.RegistrationNum);
        custPaym.sendersBankName(bankAccountTable.Name);

        postalAddress = CompanyInfo::find().postalAddress();
        custPaym.sendersCompanyAddress(postalAddress.Address);
        custPaym.sendersCompanyAddress1(custPaym.textLine(postalAddress.Address,1));
        custPaym.sendersCompanyAddress2(custPaym.textLine(postalAddress.Address,2));
        custPaym.sendersCompanyAddress3(custPaym.textLine(postalAddress.Address,3));
        custPaym.sendersCompanyName(CompanyInfo::find().name());
        custPaym.sendersInvoiceNumber();
        custPaym.sendersIdentificationOfReciever(custTable.AccountNum);
        custPaym.sendersBanksIdentificationOfSender(bankAccountTable.CompanyPaymId);
        custPaym.feeContractAccount(bankAccountTable.FeeContractAccount);
        custPaym.sendersBankIban(bankAccountTable.iban);

        unchecked (Uncheck::TableSecurityPermission)
        {
            custPaym.recieversBankIban(custBankAccount.BankIBAN);
        }

        return custPaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPrintOptionMenuItemPrefix</Name>
				<Source><![CDATA[
    protected str dialogPrintOptionMenuItemPrefix()
    {
        return 'Cust';
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPaymModeSpec</Name>
				<Source><![CDATA[
    public CustVendPaymModeSpec findPaymModeSpec(PaymMode _paymMode, PaymSpec _paymSpec)
    {
        return CustPaymModeSpec::findSpec(_paymMode, _paymSpec);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPaymModeTable</Name>
				<Source><![CDATA[
    public CustVendPaymModeTable findPaymModeTable(PaymMode _paymMode, boolean _forupdate = false)
    {
        return CustPaymModeTable::find(_paymMode, _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetOutPaymRecordList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of list.
    /// </summary>
    protected void resetOutPaymRecordList()
    {
        outPaymRecordList = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the payment line. 
    /// </summary>
    /// <param name = "_custOutPaymRecord">
    ///     An instance of <c>CustOutPaymRecord</c>.
    /// </param>
    /// <param name = "_ledgerJournalTrans">
    ///     A <c>LedgerJournalTrans</c> table buffer.
    /// </param>
    /// <param name = "_useDefault">
    ///     A boolean flag to check addition in list and update <c>LedgerJournalTrans</c>.
    /// </param>
    protected void createPaymentLine(CustOutPaymRecord _custOutPaymRecord, LedgerJournalTrans _ledgerJournalTrans, boolean _useDefault = true)
    {
        if (_useDefault)
        {
            _custOutPaymRecord.output();
            outPaymRecordList.addEnd(_custOutPaymRecord);
            this.trackSequenceOnPaymMode(CustVendPaymModeTable::findCommon(_ledgerJournalTrans, true));
            this.updateLedgerJournalTrans(_ledgerJournalTrans, _custOutPaymRecord, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLines</Name>
				<Source><![CDATA[
    public void generatePaymentLines()
    {
        #OCCRetryCount
        LedgerJournalTrans ledgerJournalTrans;
        CustOutPaymRecord custOutPaymRecord;
        boolean ok = true;

        int64 paymentLinesToProcess = this.findQueryRecordCount();
        int64 paymentLinesProcessed;

        SysInstrumentationProgressLogger progressLogger = this.createProgressLogger();
        SysInstrumentationProgressStage progressStage = progressLogger.createStage(CustVendInstrumentationConstants::PaymentGenerationGeneratePaymentLines, paymentLinesToProcess);

        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextWithProgressMonitor(progressStage))
        {
            activityContext.addCustomProperty(CustVendInstrumentationConstants::ClassName, this.getClassName());

            try
            {
                ttsbegin;

                if (!this.checkBankAccountNumber())
                {
                    throw error("@SYS18447");
                }

                setprefix("@SYS17561");

                queryRun.reset();
                this.resetOutPaymRecordList();

                while (queryRun.next())
                {
                    ledgerJournalTrans = queryRun.get(tablenum(LedgerJournalTrans));

                    paymentLinesProcessed++;
                    progressLogger.trackProgress(paymentLinesProcessed);

                    if (!this.isOffsetAccountValid(ledgerJournalTrans))
                        continue;

                    custOutPaymRecord = CustVendOutPaymRecord::construct(
                        ledgerJournalTrans.PaymMode,
                        ledgerJournalTrans.PaymSpec,
                        this,
                        this.custPaym(ledgerJournalTrans));

                    custOutPaymRecord.parmFile(file);

                    setprefix(strfmt(
                        "@SYS66048",
                        ledgerJournalTrans.TransDate,
                        ledgerJournalTrans.Voucher,
                        ledgerJournalTrans.parmAccount()));

                    if (custOutPaymRecord.checkValues(ledgerJournalTrans, this.parmProgress()))
                    {
                        this.createPaymentLine(custOutPaymRecord, ledgerJournalTrans);
                    }
                    else
                    {
                        ok = false;
                    }
                }

                if (!ok)
                {
                    throw error("@SYS18447");
                }

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                progressLogger.logRetryOnDeadlock();

                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        progressLogger.logRetryOnUpdateConflict();

                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentType</Name>
				<Source><![CDATA[
    protected CustPaymentType getPaymentType(CustPaymMode _paymMode)
    {
        CustPaymModeTable custPaymModeTable = this.findPaymModeTable(_paymMode, false);
        return custPaymModeTable.PaymentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the format to display in the user interface.
    /// </summary>
    /// <returns>
    /// The name of the format to display in the user interface.
    /// </returns>
    /// <remarks>
    /// This method must return the name of the format to display in the user interface. Formats without an
    /// interface name cannot be used in electronic banking as export formats. However, they can serve as
    /// parents for other formats.
    /// </remarks>
    public PaymInterfaceName interfaceName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isElectronicPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>PaymentType</c> value against the method of payment.
    /// </summary>
    /// <param name="_paymMode">
    /// The unique identifier for the method of payment.
    /// </param>
    /// <returns>
    /// true if the <c>PaymentType</c> value is <c>ElectronicPayment</c>; otherwise, false.
    /// </returns>
    protected boolean isElectronicPayment(CustPaymMode _paymMode)
    {
        CustPaymModeTable custPaymModeTable;

        custPaymModeTable = this.findPaymModeTable(_paymMode, true);

        return custPaymModeTable.PaymentType == CustPaymentType::ElectronicPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrenoteApproved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the prenote status against a specified customer in a specified bank.
    /// </summary>
    /// <param name="_accountId">
    /// An <c>CompanyBankAccountId</c> enumeration data type defines the bank ID in which the customer has
    /// an account.
    /// </param>
    /// <param name="_accountNum">
    /// An <c>AccountNum</c> enumeration data type that defines the customer account ID.
    /// </param>
    /// <returns>
    /// true if the status is approved; otherwise, false.
    /// </returns>
    protected boolean isPrenoteApproved(
        CompanyBankAccountId _accountId,
        CustVendAC _accountNum)
    {
        CustPrenote custPrenote;
        CustBankAccountId custBankAccountId;

        custBankAccountId = CustTable::find(_accountNum).BankAccount;
        custPrenote = CustPrenote::find(_accountId, _accountNum, custBankAccountId);

        return custPrenote.status() == PrenoteStatus::Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printControlReport</Name>
				<Source><![CDATA[
    public void printControlReport()
    {
        MenuFunction menuFunction;
        Args args;

        args = new Args();
        args.caller(this);

        menuFunction = new MenuFunction(menuitemoutputstr(CustOutPaymControl), MenuItemType::Output);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        Object caller = args.caller();
        CustVendSumForPaym custVendSumForPaym;
        CustOutPaym custOutPaym;
        DialogRunbase clientDialog;

        if (args && args.parmEnumType() == enumNum(PaymDocumentType))
        {
            custOutPaym = caller.runBase();
            custOutPaym.callPrinterSettings(args.parmEnum());
            return;
        }

        custVendSumForPaym = caller.runbase();
        clientDialog = caller.dialog();

        clientDialog.updateServer();
        custVendSumForPaym.getFromDialog();

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            custOutPaym = custVendSumForPaym.custVendOutPaym_W();
        }
        else
        {
            // </GEERU>
            custOutPaym = CustVendOutPaym::newCustVendSumForPaym(custVendSumForPaym);
            // <GEERU>
        }
        // </GEERU>

        if (! custOutPaym)
        {
            throw error("@SYS26888");
        }

        // <GEERU>
        if (! SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            // </GEERU>
            custOutPaym.parmBankAccountID(custVendSumForPaym.parmBankAccountID());
            custOutPaym.saveLast();
            // <GEERU>
        }
        // </GEERU>
        custOutPaym.prompt();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>