<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductWorkspaceConfigurationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductWorkspaceConfigurationHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCategoryFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create query filters based on the category hierarchy and category selection.
    /// </summary>
    /// <param name = "_filter">The filter to apply items for.</param>
    /// <param name = "_categoryHierarchy">The category hierarchy record id.</param>
    /// <param name = "_nestedLeft">The category nested left value.</param>
    /// <param name = "_nestedRight">The category nested right value.</param>
    public static void createCategoryFilters(
        SysIFilter                      _filter,
        EcoResCategoryHierarchyId       _categoryHierarchy,
        EcoResCategoryNestedSetLeft     _nestedLeft = 0,
        EcoResCategoryNestedSetRight    _nestedRight = 0)
    {
        if (_filter && _categoryHierarchy)
        {
            SysIFilterValue filterCategoryHierarchy = SysFilterValueFactory::createFilterValueForInteger(_categoryHierarchy, extendedTypeNum(EcoResCategoryHierarchyId));
            _filter.addItem(filterCategoryHierarchy, SysFilterOperator::Equal, SysFilterValueResolutionMethod::None);

            SysIFilterValue filterCategoryNestedLeft = SysFilterValueFactory::createFilterValueForInteger(_nestedLeft, extendedTypeNum(EcoResCategoryNestedSetLeft));
            _filter.addItem(filterCategoryNestedLeft, SysFilterOperator::GreaterEqual, SysFilterValueResolutionMethod::None);

            SysIFilterValue filterCategoryNestedRight = SysFilterValueFactory::createFilterValueForInteger(_nestedRight, extendedTypeNum(EcoResCategoryNestedSetRight));
            _filter.addItem(filterCategoryNestedRight, SysFilterOperator::LessEqual, SysFilterValueResolutionMethod::None);
        }
        else
        {
            SysIFilterValue filterCategoryHierarchy = SysFilterValueFactory::createFilterValueForInteger(_categoryHierarchy, extendedTypeNum(EcoResCategoryHierarchyId));
            _filter.addItem(filterCategoryHierarchy, SysFilterOperator::GreaterEqual, SysFilterValueResolutionMethod::All);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDateTimeFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create datetime filter for a give extended data type and apply the datatime value.
    /// </summary>
    /// <param name = "_filter">The filter to apply items for.</param>
    /// <param name = "_extendedTypeId">The extended data type.</param>
    /// <param name = "_filterOperator">The filter operator.</param>
    /// <param name = "_filterDateTime">The date time to filter from.</param>
    public static void createDateTimeFilter(SysIFilter _filter, ExtendedTypeId _extendedTypeId, SysFilterOperator _filterOperator, utcdatetime _filterDateTime)
    {
        SysIFilterValue filterCreatedDateTime = SysFilterValueFactory::createFilterValueForDateTime(_filterDateTime, _extendedTypeId);
        _filter.addItem(filterCreatedDateTime, _filterOperator, SysFilterValueResolutionMethod::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyCategoryFilterFromProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Apply category selection to the query from filter provider.
    /// </summary>
    /// <param name="_query">The query for which to apply category selection.</param>
    /// <param name = "_filterProvider">The workspace filter provider.</param>
    public static void applyCategoryFilterFromProvider(Query _query, SysIFilterProvider _filterProvider)
    {
        if (!_query)
        {
            throw error(strFmt("@SYS115249", '_query'));
        }

        if (!_filterProvider || !_filterProvider.parmFilter())
        {
            return;
        }

        EcoResCategoryHierarchyId       categoryHierarchy = 0;
        EcoResCategoryNestedSetLeft     nestedLeft = 0;
        EcoResCategoryNestedSetRight    nestedRight = 0;

        Enumerator enumerator = _filterProvider.parmFilter().parmItemEnumerator();
        while (enumerator.moveNext())
        {
            SysFilterItem           filterItem = enumerator.current();
            if (filterItem.parmValue().parmValueType().parmType() == SysFilterValueTypeEnum::Integer)
            {
                if (filterItem.parmValue().parmValueType().parmTypeIdentifier() == extendedTypeNum(EcoResCategoryHierarchyId))
                {
                    categoryHierarchy = filterItem.parmValue().parmValue();
                }
                else if (filterItem.parmValue().parmValueType().parmTypeIdentifier() == extendedTypeNum(EcoResCategoryNestedSetLeft))
                {
                    nestedLeft = filterItem.parmValue().parmValue();
                }
                else if (filterItem.parmValue().parmValueType().parmTypeIdentifier() == extendedTypeNum(EcoResCategoryNestedSetRight))
                {
                    nestedRight = filterItem.parmValue().parmValue();
                }
            }
        }

        EcoResProductWorkspaceConfigurationHelper::applyCategoryFilter(_query, categoryHierarchy, nestedLeft, nestedRight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyCategoryFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Apply category selection to the query.
    /// </summary>
    /// <param name="_query">The query for which to apply category selection.</param>
    /// <param name = "_categoryHierarchy">The category hierarchy id.</param>
    /// <param name = "_nestedLeft">The nested left category value.</param>
    /// <param name = "_nestedRight">The nested right category value.</param>
    public static void applyCategoryFilter(
            Query                           _query,
            EcoResCategoryHierarchyId       _categoryHierarchy,
            EcoResCategoryNestedSetLeft     _nestedLeft,
            EcoResCategoryNestedSetRight    _nestedRight)
    {
        if (!_query)
        {
            throw error(strFmt("@SYS115249", '_query'));
        }

        QueryBuildDataSource qbdsEcoResProductCategory = EcoResProductWorkspaceConfigurationHelper::getQueryBuildDataSource(_query, tablenum(EcoResProductCategory));
        if (_categoryHierarchy)
        {
            qbdsEcoResProductCategory.enabled(true);

            QueryBuildDataSource qbdsEcoResCategory = EcoResProductWorkspaceConfigurationHelper::getQueryBuildDataSource(_query, tablenum(EcoResCategory));
            if (qbdsEcoResCategory)
            {
                qbdsEcoResCategory.enabled(true);
                qbdsEcoResCategory.addRange(fieldNum(EcoResCategory, CategoryHierarchy))
                        .value(queryValue(_categoryHierarchy));

                QueryBuildRange nestedSetLeftRange = qbdsEcoResCategory.addRange(fieldNum(EcoResCategory, NestedSetLeft));
                nestedSetLeftRange.value(
                    strfmt('(%1.%2 >= %3)', qbdsEcoResCategory.name(), fieldStr(EcoResCategory, NestedSetLeft), _nestedLeft));

                QueryBuildRange nestedSetRightRange = qbdsEcoResCategory.addRange(fieldNum(EcoResCategory, NestedSetRight));
                nestedSetRightRange.value(
                    strfmt('(%1.%2 <= %3)', qbdsEcoResCategory.name(), fieldStr(EcoResCategory, NestedSetRight), _nestedRight));
            }
        }
        else
        {
            qbdsEcoResProductCategory.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignCategoryConfigurationValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assign values from the selected category to the workspace configuration record.
    /// </summary>
    /// <param name = "_ecoResProductWorkspaceConfiguration">The <c>EcoResProductWorkspaceConfiguration</c> record instance.</param>
    /// <param name = "_ecoResCategory">The <c>EcoResCategory</c> record instance.</param>
    public static void assignCategoryConfigurationValues(EcoResProductWorkspaceConfiguration _ecoResProductWorkspaceConfiguration, EcoResCategory _ecoResCategory)
    {
        _ecoResProductWorkspaceConfiguration.NestedSetLeft = _ecoResCategory.NestedSetLeft;
        _ecoResProductWorkspaceConfiguration.NestedSetRight = _ecoResCategory.NestedSetRight;
        _ecoResProductWorkspaceConfiguration.Category = _ecoResCategory.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryBuildDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>QueryBuildDataSource</c> object from the query.
    /// </summary>
    /// <param name = "_query">The query from which to get the datasource.</param>
    /// <param name = "_tableId">The table id of the datasource.</param>
    /// <returns>The <c>QueryBuildDataSource</c> object if found; otherwise throw an error.</returns>
    public static QueryBuildDataSource getQueryBuildDataSource(Query _query, TableId _tableId)
    {
        QueryBuildDataSource qdbs = _query.dataSourceTable(_tableId);
        if (!qdbs)
        {
            error(strFmt("@SYS89000", tableId2Name(_tableId), _query.name()));
        }
        return qdbs;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>