<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPlannedPaymentUpdateUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Interface builder class for planned payment update procedure.
/// </summary>
public class CFMPlannedPaymentUpdateUIBuilder extends SysOperationAutomaticUIBuilder
{
    SysListPanel sysListPanel;

    DialogField dialogFieldSources;
    DialogField dialogFieldDataAreas;

    SysLookupMultiSelectCtrl ctrlSources;
    SysLookupMultiSelectCtrl ctrlDataAreas;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDialogField</Name>
				<Source><![CDATA[
    protected DialogField addDialogField(IdentifierName _methodName, Object _dataContract = this.dataContractObject())
    {
        DialogField ret;

        if (_methodName == methodStr(CFMPlannedPaymentUpdateContract, parmSources))
        {
            dialogFieldSources = this.dialog().addField(extendedTypeStr(Description), enumId2pname(enumNum(CFMPlannedPaymentSourceType)));

            ret = dialogFieldSources;
        }
        else if (_methodName == methodStr(CFMPlannedPaymentUpdateContract, parmDataAreas))
        {
            dialogFieldDataAreas = this.dialog().addField(extendedTypeStr(Description), new DictTable(tableNum(CompanyInfo)).label());

            ret = dialogFieldDataAreas;
        }
        else
        {
            ret = super(_methodName, _dataContract);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchSelectedDataAreas</Name>
				<Source><![CDATA[
    private container fetchSelectedDataAreas(Query _query)
    {
        QueryRun queryRun = new QueryRun(_query);
        CFMPlannedPaymentUpdateContract contract = this.dataContractInfo().dataContractObject();
        container conRecIds;
        container conValues;

        while (queryRun.next())
        {
            CompanyInfo companyInfo = queryRun.get(tableNum(CompanyInfo));

            if (conFind(contract.parmDataAreas(), companyInfo.DataArea))
            {
                conRecIds += companyInfo.RecId;
                conValues += companyInfo.DataArea;
            }
        }

        return [conRecIds, conValues];
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchSelectedSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches recIds and values for saved data.
    /// </summary>
    /// <param name="_queryRun">
    /// Query run with temporary table
    /// </param>
    /// <returns>
    /// Container: [[RecIds],[Values]]
    /// </returns>
    private container fetchSelectedSources(QueryRun _queryRun)
    {
        CFMEnumLookupTmp enumLookupTmp;
        CFMPlannedPaymentUpdateContract contract = this.dataContractInfo().dataContractObject();

        container sourceTypeLookupTmpRecIds = conNull();
        container sourceTypeLookupTmpValues = conNull();

        while (_queryRun.next())
        {
            enumLookupTmp = _queryRun.get(tablenum(CFMEnumLookupTmp));

            if (conFind(contract.parmSources(), enumLookupTmp.EnumValueLabelText))
            {
                sourceTypeLookupTmpRecIds += enumLookupTmp.RecId;
                sourceTypeLookupTmpValues += enumLookupTmp.EnumValueLabelText;
            }
        }

        // reset tmp cursor
        select enumLookupTmp;

        return [sourceTypeLookupTmpRecIds, sourceTypeLookupTmpValues];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public void getFromDialog()
    {
        super();

        CFMPlannedPaymentUpdateContract contract = this.dataContractObject();

        contract.parmSources(ctrlSources.getSelectedFieldValues());

        contract.parmDataAreas(ctrlDataAreas.getSelectedFieldValues());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    public void postRun()
    {
        QueryRun queryRunSources = CFMEnumLookupTmp::buildQueryRun(enumNum(CFMPlannedPaymentSourceType));
        Query queryDataAreas = CFMCompanyInfoSelector::companyInfoQuery();

        super();

        ctrlSources = SysLookupMultiSelectCtrl::constructWithQueryRun(
            this.dialog().formRun(),
            dialogFieldSources.control(),
            queryRunSources,
            true);

        ctrlSources.set(this.fetchSelectedSources(queryRunSources));

        ctrlDataAreas = SysLookupMultiSelectCtrl::constructWithQuery(
            this.dialog().formRun(),
            dialogFieldDataAreas.control(),
            queryDataAreas,
            true);

        ctrlDataAreas.set(this.fetchSelectedDataAreas(queryDataAreas));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>