<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOnlineStoreAuthenticationConfigurationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using EventLogger = Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource;
using System.Configuration;
using System.Collections;
using System.Collections.Specialized;
using System.Net.Http;
using System.IO;
using System.Web.Script.Serialization;

/// <summary>
/// The <c>RetailOnlineStoreAuthenticationConfigurationHelper</c> implements the online store authentication related methods of the service interface exposed by the <c>RetailTransactionService</c> class to the retail channels.
/// </summary>
public static class RetailOnlineStoreAuthenticationConfigurationHelper
{
    private static readonly HttpClient httpClient =  new HttpClient(new HttpClientHandler());
    const str AzureB2CMetaDataEndpoint = 'https://%1/%2.onmicrosoft.com/v2.0/.well-known/openid-configuration?p=%3';
    const str AzureB2CSharedDomain = '%1.b2clogin.com';
      
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAzureB2CMetaDataEndpoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Azure B2C meta data endpoint
    /// </summary>
    /// <param name="loginDomainName">
    /// Login domain name.
    /// </param>
    /// <param name="tenantName">
    /// Tenant name.
    /// </param>
    /// <param name="policyId">
    /// Policy Id.
    /// </param>
    /// <returns>
    /// Azure B2C meta data endpoint.
    /// </returns>
    private static str getAzureB2CMetaDataEndpoint(str loginDomainName, str tenantName, str policyId)
    {
        if (System.String::IsNullOrWhiteSpace(tenantName) || System.String::IsNullOrWhiteSpace(policyId))
        {
            return null;
        }
    
        if (System.String::IsNullOrWhiteSpace(loginDomainName))
        {
            loginDomainName = strFmt(AzureB2CSharedDomain, tenantName);
        }

        return strFmt(AzureB2CMetaDataEndpoint,
            loginDomainName,
            tenantName,
            policyId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateAzureB2CMetaDataEndpoint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate Azure B2C meta data endpoint
    /// </summary>
    /// <param name="url">
    /// Azure B2C meta data endpoint url.
    /// </param>
    /// <returns>
    /// Endpoint validation status.
    /// </returns>
    private static boolean ValidateAzureB2CMetaDataEndpoint(str url)
    {
        boolean result;
        System.Net.WebException exception;
        try
        {
            var response = httpClient.GetAsync(url).Result;
            result = response.IsSuccessStatusCode;
        }
        catch (exception)
        {
            EventLogger::EventWriteSelfServiceError('Exception raised while valicating Azure B2C configuration.', exception.Message, exception.StackTrace);
            Message::Add(MessageSeverity::Error, "@Retail:RetailOnlineChannelAzureB2CConfigurationValidationFailureErrorMessage");
            result = false;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetAzureB2CIssuer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Azure B2C issuer
    /// </summary>
    /// <param name="loginDomainName">
    /// Login domain name.
    /// </param>
    /// <param name="tenantName">
    /// Tenant name.
    /// </param>
    /// <param name="policyId">
    /// Policy Id.
    /// </param>    
    /// <returns>
    ///  Azure B2C issuer.
    /// </returns>
    internal static str GetAzureB2CIssuer(str tenantName, str loginDomainName, str policyId)
    {
        System.Exception exception;
        try
        {
            var metadataEndpoint = RetailOnlineStoreAuthenticationConfigurationHelper::getAzureB2CMetaDataEndpoint(loginDomainName, tenantName, policyId);

            if (System.String::IsNullOrWhiteSpace(metadataEndpoint))
            {
                return null;
            }

            var request = new HttpRequestMessage(new HttpMethod("GET"), metadataEndpoint);
            var response = httpClient.SendAsync(request).Result;

            if (response.IsSuccessStatusCode)
            {
                str responseBody = response.Content.ReadAsStringAsync().Result;
                Newtonsoft.Json.Linq.JObject jsonObject = Newtonsoft.Json.Linq.JObject::Parse(responseBody);
                return jsonObject.SelectToken('issuer').ToString();
            }
            else
            {
                throw error(strFmt("Retrieving issuer failed: %1 %2", response.StatusCode, response.ReasonPhrase));
            }
        }
        catch (exception)
        {
            EventLogger::EventWriteSelfServiceError('Exception raised while retrieving issuer.', exception.Message, exception.StackTrace);
            Message::Add(MessageSeverity::Error, "@Retail:RetailOnlineChannelAzureB2CConfigurationIssuerFailureErrorMessage");
            return null;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateAzureB2CConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate Azure B2C meta data endpoint
    /// </summary>
    /// <param name="loginDomainName">
    /// Login domain name.
    /// </param>
    /// <param name="tenantName">
    /// Tenant name.
    /// </param>
    /// <param name="signInSignUpPolicyId">
    /// Sign-up Sign-in policy Id.
    /// </param>
    /// <param name="passwordResetPolicyId">
    /// Password reset policy Id.
    /// </param>
    /// <param name="editProfilePolicyId">
    /// Profile edit policy Id.
    /// </param>
    /// <param name="signUpPolicyId">
    /// Sign-up policy Id.
    /// </param>    
    /// <returns>
    /// Endpoint validation status.
    /// </returns>
    internal static boolean ValidateAzureB2CConfiguration(str loginDomainName, str tenantName, str signInSignUpPolicyId, str passwordResetPolicyId, str editProfilePolicyId, str signUpPolicyId)
    {
        var ret = true;
        // Validating tenant name and login domain name with default sign-in policy.
        var metadataEndpoint = RetailOnlineStoreAuthenticationConfigurationHelper::getAzureB2CMetaDataEndpoint(loginDomainName, tenantName, signInSignUpPolicyId);

        if(!RetailOnlineStoreAuthenticationConfigurationHelper::ValidateAzureB2CMetaDataEndpoint(metadataEndpoint))
        {
            Message::Add(MessageSeverity::Error, "@Retail:RetailOnlineChannelAzureB2CConfigurationSignInPolicyFailureMessage");
            ret = false;
        }

        // Validating tenant name and login domain name with password reset policy.
        metadataEndpoint = RetailOnlineStoreAuthenticationConfigurationHelper::getAzureB2CMetaDataEndpoint(loginDomainName, tenantName, passwordResetPolicyId);
        
        if(!RetailOnlineStoreAuthenticationConfigurationHelper::ValidateAzureB2CMetaDataEndpoint(metadataEndpoint))
        {
            Message::Add(MessageSeverity::Error, "@Retail:RetailOnlineChannelAzureB2CConfigurationPasswordResetPolicyFailureMessage");
            ret = false;
        }

        // Validating tenant name and login domain name with edit profile policy.
        metadataEndpoint = RetailOnlineStoreAuthenticationConfigurationHelper::getAzureB2CMetaDataEndpoint(loginDomainName, tenantName, editProfilePolicyId);
  
        if(!RetailOnlineStoreAuthenticationConfigurationHelper::ValidateAzureB2CMetaDataEndpoint(metadataEndpoint))
        {
            Message::Add(MessageSeverity::Error, "@Retail:RetailOnlineChannelAzureB2CConfigurationEditProfilePolicyFailureMessage");
            ret = false;
        }

        // Validating sign-up policy.
        if(!System.String::IsNullOrWhiteSpace(signUpPolicyId))
        {
            metadataEndpoint = RetailOnlineStoreAuthenticationConfigurationHelper::getAzureB2CMetaDataEndpoint(loginDomainName, tenantName, signUpPolicyId);
            if(!RetailOnlineStoreAuthenticationConfigurationHelper::ValidateAzureB2CMetaDataEndpoint(metadataEndpoint))
            {
                Message::Add(MessageSeverity::Error, "@Retail:RetailOnlineChannelAzureB2CConfigurationSignUpProfilePolicyFailureMessage");
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>