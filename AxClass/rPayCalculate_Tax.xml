<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayCalculate_Tax</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Classs for payroll procedure calculation (taxes).
/// </summary>
final class rPayCalculate_Tax extends RPayCalculate
{
    RPayTaxIncomeGroupTable rPayTaxIncomeGroupTable;
    RPayTaxParameters       rPayTaxParameters;
    RPayTaxDeductionTable   rPayTaxDeductionTable;
    RPayTaxIncomeTable      rPayTaxIncomeTable;
    RPayFundDeductionTable  rPayFundDeductionTable;
    RHRMFamilyRecId         familyRecId;
    RPayCounterUnit         budgetFund;
    RPayAmount              redemptionAmount;
    RpayTaxIncomeGroupCode  redemptionTaxCode;
    RPayAmount              limitationAmount;
    RPayRateCode            limitRate;
    Counter                 childOrderNum;
    boolean                 taxReturnPerMth;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc_AgeMonths</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Months calc_AgeMonths()
    {
        RHRMVirtualNetworkFamily        rhrmVirtualNetworkFamily;

        Months calcMonthDiff(TransDate _startDate)
        {
            TransDate   calcDateDiff = this.transDateStart(payPeriod);
            int         ret;

            if (_startDate)
            {
                ret = (year(calcDateDiff) - year(_startDate)) * #monthsPerYear + mthOfYr(calcDateDiff) - mthOfYr(_startDate);
            }
            return ret;
        }

        if (((rPayTaxDeductionTable && rPayTaxDeductionTable.ActOnRelative) ||
             (rPayFundDeductionTable && rPayFundDeductionTable.ActOnRelative)) && familyRecId)
        {
            rhrmVirtualNetworkFamily = RHRMVirtualNetworkFamily::findByRecId(familyRecId);

            return calcMonthDiff(rhrmVirtualNetworkFamily.BirthDate);
        }
        else
        {
            return calcMonthDiff(emplTable.personTable().hcmPersonPrivateDetails().BirthDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_ChildOrderNum</Name>
				<Source><![CDATA[
    //child's number calculated outside of counter
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Integer calc_ChildOrderNum()
    {
        return this.parmChildOrderNum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_DeductionAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calc_DeductionAmount()
    {
        ReportPeriod_RU             rateDate,
                                    periodEndDate;
        RPayTaxEmplSum              rPayTaxEmplSum;
        RPayTaxEmplTrans            rPayTaxEmplTrans;
        RPayFundEmplDeduction       rPayFundEmplDeduction;
        RHRMVirtualNetworkFamily    virtualNetworkFamily;
        RPayRateTrans               rPayRateTrans;

        void setCommonPeriod()
        {
            rateDate = this.payPeriodStart();

            switch (payCounterCalcTable.PayCalcSumMetod)
            {
                case RPayCalcSumMetod::OnlyPeriod:
                    periodEndDate = this.payPeriodEnd(rateDate, payCounterCalcTable.PayPeriodFrequency);
                    break;
                case RPayCalcSumMetod::FromPeriod:
                    periodEndDate = payPeriod;
                    break;
                case RPayCalcSumMetod::FromEmpl:
                    rateDate = endmth(emplTable.PayEmploymentDate);
                    periodEndDate = payPeriod;
                    break;
            }
        }
        switch (payCounterCalcTable.PayPeriodFrequency)
        {
            case RPayPeriodFrequency::None:

                if ((rPayTaxDeductionTable && rPayTaxDeductionTable.ActOnRelative) ||
                    (rPayFundDeductionTable && rPayFundDeductionTable.ActOnRelative))
                {
                    if (familyRecId)
                    {
                        virtualNetworkFamily = RHRMVirtualNetworkFamily::findByRecId(familyRecId);
                        rateDate = max(virtualNetworkFamily.BirthDate, virtualNetworkFamily.AdoptionDate);

                        periodEndDate = endmth(prevMth(payPeriod));
                    }
                    else
                    {
                        setCommonPeriod();
                    }
                }
                else
                {
                    return 0;
                }

                break;

            case RPayPeriodFrequency::Month:

                return 0;

            case RPayPeriodFrequency::Quarter, RPayPeriodFrequency::HalfYear, RPayPeriodFrequency::Year:

                rateDate = this.payPeriodStart();
                periodEndDate = endmth(prevMth(payPeriod));
                break;

            case RPayPeriodFrequency::Accumulated :

                if ((rPayTaxDeductionTable && rPayTaxDeductionTable.ActOnRelative) ||
                    (rPayFundDeductionTable && rPayFundDeductionTable.ActOnRelative))
                {
                    if (familyRecId)
                    {
                        virtualNetworkFamily = RHRMVirtualNetworkFamily::findByRecId(familyRecId);
                        rateDate = max(virtualNetworkFamily.BirthDate, virtualNetworkFamily.AdoptionDate);

                        periodEndDate = endmth(prevMth(payPeriod));
                    }
                    else
                    {
                        rateDate = this.payPeriodStart();

                        switch (payCounterCalcTable.PayCalcSumMetod)
                        {
                            case RPayCalcSumMetod::OnlyPeriod:
                                periodEndDate = this.payPeriodEnd(rateDate, payCounterCalcTable.PayPeriodFrequency);
                                break;
                            case RPayCalcSumMetod::FromPeriod:
                                periodEndDate = payPeriod;
                                break;
                            case RPayCalcSumMetod::FromEmpl:
                                rateDate = endmth(emplTable.PayEmploymentDate);
                                periodEndDate = payPeriod;
                                break;
                        }
                    }
                }
                else
                {
                if ((rPayTaxDeductionTable && rPayTaxDeductionTable.RpayRateCodeValue) ||
                    (rPayFundDeductionTable && rPayFundDeductionTable.RpayRateCodeValue))

                    {
                        rPayRateTrans = RPayRateTrans::find(rPayTaxDeductionTable ?
                                                            rPayTaxDeductionTable.RpayRateCodeValue :
                                                            rPayFundDeductionTable.RpayRateCodeValue,
                                                            payPeriod, emplTable.EmployeeId);

                        if (rPayRateTrans)
                        {
                            rateDate = rPayRateTrans.RateDate;
                            periodEndDate = endmth(prevMth(payPeriod));
                        }
                        else
                        {
                            setCommonPeriod();
                        }
                    }
                    else
                    {
                        setCommonPeriod();
                    }
                }
                break;
        }

        if (date2num(rateDate) == #financialDaysPerMonth)
        {
            warning("@RUP388");
        }

        if (rPayTaxDeductionTable && rPayTaxIncomeTable)
        {
            select sum(Deduction) from rPayTaxEmplTrans
                where rPayTaxEmplTrans.RpayTaxType          == RpayTaxType::Income &&
                      rPayTaxEmplTrans.RpayTaxIncDedCode    == rPayTaxIncomeTable.RpayTaxIncomeCode &&
                      rPayTaxEmplTrans.RpayTaxDeductionCode == rPayTaxDeductionTable.RpayTaxDeductionCode &&
                      ((rPayTaxEmplTrans.FamilyRecId          == familyRecId && rPayTaxDeductionTable.ActOnRelative) ||
                       !rPayTaxDeductionTable.ActOnRelative)
                exists join rPayTaxEmplSum
                    where rPayTaxEmplSum.EmplId     == emplTable.EmployeeId &&
                          rPayTaxEmplSum.PayPeriod  >= rateDate &&
                          rPayTaxEmplSum.PayPeriod  <= periodEndDate &&
                          rPayTaxEmplSum.RecId      == rPayTaxEmplTrans.TaxSumRecId;

            return rPayTaxEmplTrans.Deduction;
        }
        else if (rPayFundDeductionTable && budgetFund)
        {
            select sum(DeductionAmount) from rPayFundEmplDeduction
                where rPayFundEmplDeduction.EmplId == emplTable.EmployeeId &&
                      rPayFundEmplDeduction.PayPeriod >= rateDate &&
                      rPayFundEmplDeduction.PayPeriod <= periodEndDate &&
                      rPayFundEmplDeduction.RpayFundDeductionCode == rPayFundDeductionTable.RpayFundDeductionCode &&
                      rPayFundEmplDeduction.RpayCounterUnit == budgetFund &&
                      ((rPayFundEmplDeduction.FamilyRecId == familyRecId && rPayFundDeductionTable.ActOnRelative) ||
                       !rPayFundDeductionTable.ActOnRelative);

            return rPayFundEmplDeduction.DeductionAmount;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_DisableRelative</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Integer calc_DisableRelative()
    {
        ReportPeriod_RU             rateDate;
        Integer                     retValue;
        RPayRateTable               payRateTable;
        RPayRateCallContext         rateContext;

        if (familyRecId)
        {
            rateDate = this.transDateStart();
            if (date2num(rateDate) == #financialDaysPerMonth)
            {
                warning("@RUP388");
            }

            payRateTable = RPayRateTable::find(RHRMVirtualNetworkFamily::findByRecId(familyRecId).Disabled);
            rateContext  = RPayRateCallContext::construct(rateDate, emplTable.EmployeeId);
            rateContext.parmPersonId(emplTable.personTable().PersonnelNumber);
            rateContext.parmCriterion(sumCounter);

            retValue =  any2int(payRateTable.getValue(rateContext));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_EdicationType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Integer calc_EdicationType()
    {
        ReportPeriod_RU             rateDate;
        Integer                     retValue;
        RPayRateTable               payRateTable;
        RPayRateCallContext         rateContext;

        if (familyRecId)
        {
            rateDate = this.transDateStart();
            if (date2num(rateDate) == #financialDaysPerMonth)
            {
                warning("@RUP388");
            }

            payRateTable = RPayRateTable::find(RHRMVirtualNetworkFamily::findByRecId(familyRecId).Student);
            rateContext  = RPayRateCallContext::construct(rateDate, emplTable.EmployeeId);
            rateContext.parmPersonId(emplTable.personTable().PersonnelNumber);
            rateContext.parmCriterion(sumCounter);

            retValue =  any2int(payRateTable.getValue(rateContext));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_EventMonths</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Months calc_EventMonths()
    {
        RHRMVirtualNetworkFamily        rhrmVirtualNetworkFamily;

        Months calcMonthDiff(TransDate _startDate)
        {
            int             ret;
            ;
            if (_startDate)
            {
                ret = (year(payPeriod) - year(_startDate)) * #monthsPerYear + mthOfYr(payPeriod) - mthOfYr(_startDate);
            }
            return ret;
        }
        ;
        if (((rPayTaxDeductionTable && rPayTaxDeductionTable.ActOnRelative) ||
            (rPayFundDeductionTable && rPayFundDeductionTable.ActOnRelative)) && familyRecId)
        {
            rhrmVirtualNetworkFamily = RHRMVirtualNetworkFamily::findByRecId(familyRecId);

            return calcMonthDiff(rhrmVirtualNetworkFamily.AdoptionDate);
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_IncomeAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calc_IncomeAmount()
    {
        ReportPeriod_RU                 rateDate,
                                        periodEndDate;
        RPayTrans                       rPayTrans;
        RPayTable                       rPayTable;
        RHRMEmplTable                   emplTableLocal;
        RPayFundMember                  payFundMember;
        RPayFundCtypeDeductionMember    rPayFundCtypeDeductionMember;

        rateDate = this.payPeriodStart();
        if (date2num(rateDate) == #financialDaysPerMonth)
        {
            warning("@RUP388");
        }

        switch (payCounterCalcTable.PayCalcSumMetod)
        {
            case RPayCalcSumMetod::OnlyPeriod:
                periodEndDate = this.payPeriodEnd(rateDate, payCounterCalcTable.PayPeriodFrequency);
                break;
            case RPayCalcSumMetod::FromPeriod:
                periodEndDate = payPeriod;
                break;
            case RPayCalcSumMetod::FromEmpl:
                rateDate = endmth(emplTable.PayEmploymentDate);
                periodEndDate = payPeriod;
                break;
        }

        if (rPayTaxDeductionTable && rPayTaxIncomeTable)
        {
            select sum(Amount) from rPayTrans
                where rPayTrans.CorrectedPeriod >= rateDate &&
                      rPayTrans.CorrectedPeriod <= periodEndDate &&
                      (rPayTrans.FamilyRecId == familyRecId || !familyRecId)
            exists join rPayTable
                where rPayTable.PayCtype          == rPayTrans.PayCtype &&
                      rPayTable.RpayTaxIncomeCode == rPayTaxIncomeTable.RpayTaxIncomeCode
            exists join emplTableLocal
                where emplTableLocal.EmployeeId     == rPayTrans.Emplid &&
                      (emplTableLocal.PayMainEmplId == emplTable.EmployeeId ||
                       emplTableLocal.EmployeeId    == emplTable.EmployeeId);

            return rPayTrans.Amount;
        }
        else if (rPayFundDeductionTable && budgetFund)
        {
            select sum(Amount) from rPayTrans
                where rPayTrans.CorrectedPeriod >= rateDate &&
                      rPayTrans.CorrectedPeriod <= periodEndDate &&
                      (rPayTrans.FamilyRecId == familyRecId || !familyRecId)
            exists join payFundMember
                where payFundMember.CounterUnit == budgetFund &&
                      payFundMember.PayCostType == rPayTrans.PayCtype
            exists join emplTableLocal
                where emplTableLocal.EmployeeId    == rPayTrans.Emplid &&
                     (emplTableLocal.PayMainEmplId == emplTable.EmployeeId ||
                      emplTableLocal.EmployeeId    == emplTable.EmployeeId)
            exists join rPayFundCtypeDeductionMember
                where rPayFundCtypeDeductionMember.RpayFundDeductionCode == rPayFundDeductionTable.RpayFundDeductionCode &&
                      rPayFundCtypeDeductionMember.rPayCostType          == rPayTrans.PayCtype;

            return rPayTrans.Amount;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_RelationType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Integer calc_RelationType()
    {
        ReportPeriod_RU             rateDate;
        Integer                     retValue;
        RPayRateTable               payRateTable;
        RPayRateCallContext         rateContext;

        if (familyRecId)
        {
            rateDate = this.transDateStart();
            if (date2num(rateDate) == #financialDaysPerMonth)
            {
                warning("@RUP388");
            }

            payRateTable = RPayRateTable::find(RHRMVirtualNetworkFamily::findByRecId(familyRecId).DeductionTypeKey);

            rateContext = RPayRateCallContext::construct(rateDate, emplTable.EmployeeId);
            rateContext.parmPersonId(emplTable.personTable().PersonnelNumber);
            rateContext.parmCriterion(sumCounter);

            retValue =  any2int(payRateTable.getValue(rateContext));
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAcquittance</Name>
				<Source><![CDATA[
    private void calcAcquittance()
    {
        RPayTaxSumYear rPayTaxSumYear;
        ;
        if (rPayTaxIncomeGroupTable.AcquittanceCostType)
        {
            rPayTaxSumYear = RPayTaxSumYear::find(emplTable.EmployeeId,
                                                  rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode,
                                                  dateEndYr(prevYr(payPeriod)));
            sumCounter     = rPayTaxSumYear.debtsTaxAmount() + rPayTaxSumYear.FutureTaxAmount - rPayTaxSumYear.PassToGni +
                             conPeek(RPayTaxEmplSum::getTaxSum(emplTable.EmployeeId,
                                                               rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode,
                                                               dateStartYr(payPeriod),
                                                               endmth(prevMth(payPeriod)),
                                                               dateNull(),
                                                               dateMax(),
                                                               true),8);
            if (limitRate)
            {
                sumCounter = min(limitationAmount, sumCounter);
                limitationAmount -= sumCounter;
            }

            this.updatePayTransAcquittance();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcByBranch</Name>
				<Source><![CDATA[
    private void calcByBranch()
    {
        RPayTaxEmplSum      taxEmplSum;
        ttsbegin;

        delete_from payTrans
            where payTrans.Emplid       == emplTable.PayMainEmplId
               && payTrans.PayPeriod    == payPeriod
               && payTrans.TaxIncomeGroupCode;

        RPayTaxCalc::calcTaxForPerson(emplTable.PayMainEmplId, limitationAmount, true);

        while select CorrectedPeriod, RpayTaxIncomeGroupCode, BranchId, DeductTaxAmount, PayrollRedemptionAmount from taxEmplSum
            order by CorrectedPeriod
            where  taxEmplSum.EmplId    == emplTable.PayMainEmplId
                && taxEmplSum.PayPeriod == payPeriod
                && taxEmplSum.Source    == NoYes::No
        {
            if (taxEmplSum.DeductTaxAmount)
            {
                taxReturnPerMth = false;
                sumCounter = taxEmplSum.DeductTaxAmount;
                this.createTransByBranch(taxEmplSum.CorrectedPeriod, taxEmplSum.RpayTaxIncomeGroupCode, taxEmplSum.BranchId);
            }

            if (taxEmplSum.PayrollRedemptionAmount != 0)
            {
                taxReturnPerMth = true;
                sumCounter = taxEmplSum.PayrollRedemptionAmount;
                this.createTransByBranch(taxEmplSum.CorrectedPeriod, taxEmplSum.RpayTaxIncomeGroupCode, taxEmplSum.BranchId);
            }
        }

        RPayTaxSumYear::updateTaxSumYear(emplTable.EmployeeId, payPeriod);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCommon</Name>
				<Source><![CDATA[
    protected void calcCommon(RPaySequence _paySequence  = 0,
                              NoYes        _errorMessage = NoYes::No)
    {
        RPayTaxCalculate  rPayTaxCalculate;
        RPayTrans         rPayTrans;
        RPayEmplTax       emplTax;
        Set               selectedFund;

        if (needCheckModuleCalculate)
        {
            if (! this.canModuleCalculate())
            {
                throw info("@RUP387");
            }
        }

        this.checkPostingProfiles(true);
        rPayTaxParameters = RPayTaxParameters::find();

        if (rPayTaxParameters.RpayFutureTaxTypeCalc == RpayFutureTaxTypeCalc::PayPeriod && !rPayTaxParameters.CalcByBranch)
        {
            ttsbegin;

            delete_from rPayTrans
                where rPayTrans.PayPeriod     == payPeriod                    &&
                      rPayTrans.PayModuleCode == payModuleTable.PayModuleCode &&
                      rPayTrans.Emplid        == emplTable.EmployeeId         &&
                      rPayTrans.SourceTableId                                 &&
                      rPayTrans.SourceRecId                                   &&
                      payTrans.PayPeriod      == payTrans.CorrectedPeriod;
            ttscommit;
        }

        this.initTransDate(emplTable.EmployeeId);

        RPayTaxEmplResidencePeriod::updateNonResidentRate(emplTable.personTable().PersonnelNumber, payPeriod);
        emplTax = RPayEmplTax::construct(emplTable.EmployeeId, RPayParameters::payPeriod(emplTable.EmployeeId));
        RPayTaxCountry::updateCountryResidence(emplTable.personTable().PersonnelNumber, payPeriod, emplTax.taxStatus());

        this.calcLimitationAmount();

        if (!emplTable.personTable().TaxPayBlocked)
        {
            if (rPayTaxParameters.CalcByBranch)
            {
                this.calcByBranch();
            }
            else if (this.isWorkerProcedure())
            {
                this.updateResidentTaxHistory();
                selectedFund = new Set(Types::String);

                while select rPayTaxIncomeGroupTable
                    order by RateCodeGroup desc, RpayTaxIncomeGroupCode
                    where rPayTaxIncomeGroupTable.EmplTaxStatus == emplTax.taxStatus()
                {
                    if (selectedFund.in(rPayTaxIncomeGroupTable.Fund))
                    {
                        continue;
                    }

                    if (!emplTax.taxGroup2Rate(rPayTaxIncomeGroupTable))
                    {
                        continue;
                    }

                    if (rPayTaxIncomeGroupTable.RateCodeGroup &&
                        rPayTaxIncomeGroupTable.RateCodeGroup == emplTax.taxGroup2Rate(rPayTaxIncomeGroupTable))
                    {
                        selectedFund.add(rPayTaxIncomeGroupTable.Fund);
                    }

                    rPayTaxCalculate = RPayTaxCalculate::construct(rPayTaxIncomeGroupTable, emplTable.EmployeeId);
                    sumCounter       = rPayTaxCalculate.calcTaxDeduct(payPeriod);
                    if (sumCounter < 0)
                    {
                        taxReturnPerMth  = true;
                        sumCounter       = abs(sumCounter);
                        limitationAmount += sumCounter;
                    }

                    [redemptionTaxCode, redemptionAmount] = rPayTaxCalculate.redemptionAmountSumType(payPeriod);

                    if (limitRate)
                    {
                        limitationAmount += redemptionAmount;
                        if (taxReturnPerMth == false)
                        {
                            sumCounter = min(limitationAmount, sumCounter);
                            limitationAmount -= sumCounter;
                        }
                    }

                    this.updatePayTrans();
                    this.calcAcquittance();
                }

                if (rPayTaxParameters.RpayFutureTaxTypeCalc == RpayFutureTaxTypeCalc::PayPeriod)
                {
                    this.calculateFutureTax();
                }

                //update tax sum table to restore tax deduction amounts
                if (payPeriod == endmth(dateStartYr(payPeriod)))
                {
                    select firstonly rPayTaxIncomeGroupTable
                        where rPayTaxIncomeGroupTable.EmplTaxStatus == emplTax.taxStatus();
                    rPayTaxCalculate = RPayTaxCalculate::construct(rPayTaxIncomeGroupTable, emplTable.EmployeeId);
                    sumCounter       = rPayTaxCalculate.calcTaxDeduct(payPeriod);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEmpl</Name>
				<Source><![CDATA[
    public void calcEmpl(RHRMEmplId emplId, RPaySequence paySequence=0)
    {
        QueryBuildDataSource qbd;
        QueryBuildRange      qbr;
        RHRMEmplTable        emplTableLocal;
        int                  i;
        int                  dsCount = queryRun.query().dataSourceCount();

        setPrefix(payModuleTable.PayModuleName);
        needCheckModuleCalculate = false;

        this.payPeriod(RPayParameters::payPeriod(emplId));

        if (payModuleTable.NeedDeleteBeforeCalc)
        {
            ttsbegin;

            delete_from payTrans where payTrans.PayPeriod     == payPeriod &&
                                       payTrans.PayModuleCode == payModuleTable.PayModuleCode &&
                                       payTrans.Emplid        == emplId &&
                                       payTrans.SourceTableId && payTrans.SourceRecId &&
                                       payTrans.PayPeriod     == payTrans.CorrectedPeriod;
            ttscommit;
        }

        for (i = 1; i <= dsCount ; i ++)
        {
            queryRun.query().dataSourceNo(i).clearRanges();
        }

        qbd = queryRun.query().dataSourceTable(tableNum(RHRMEmplTable));
        qbr = qbd.addRange(fieldNum(RHRMEmplTable, EmployeeId));
        qbr.value(queryValue(emplId));

        qbr = qbd.addRange(fieldNum(RHRMEmplTable, PayMainEmplId));
        qbr.value(#RPayMainEmplId(qbd.name()));

        while (queryRun.next())
        {
            emplTableLocal = queryRun.get(tableNum(RHRMEmplTable));
            if (emplTableLocal.EmployeeId == emplId)
            {
                this.setSourceTable(emplTableLocal);
                this.calcCommon(paySequence,NoYes::Yes);
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLimitationAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcLimitationAmount()
    {
        RPayRateValue   rateValue;
        RPayTaxParameters taxParameters = RPayTaxParameters::find();

        limitRate = taxParameters.MaxDeductionLimit;

        if (limitRate)
        {
            rateValue = RPayRateTable::find(limitRate).getValue(RPayRateCallContext::construct(RPayParameters::payPeriod(emplTable.PayMainEmplId)));
        }
        else
        {
            rateValue = 100;
        }

        limitationAmount = this.calculateCounter(RPayCounterTable::find(RPayStandardDeductionParameters::controlDeductionFund()), payPeriod) * rateValue / 100;

        if (limitationAmount < 0)
        {
            limitationAmount = 0;
        }
        else
        {
            limitationAmount = round(limitationAmount, taxParameters.TaxRound);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQuery</Name>
				<Source><![CDATA[
    public void calcQuery(RPaySequence _paySequence=0)
    {
        QueryBuildDataSource qbd;
        QueryBuildRange      qbrMainEmplId;
        int                  current;
        int                  dsCount = queryRun.query().dataSourceCount();

        qbd = queryRun.query().dataSourceTable(tableNum(RHRMEmplTable));
        if (! queryRun.interactive())
        {
            for (current = 1; current <= dsCount ; current ++)
            {
                queryRun.query().dataSourceNo(current).clearRanges();
            }
        }
        current = 0;
        qbrMainEmplId = qbd.addRange(fieldNum(RHRMEmplTable, PayMainEmplId));
        qbrMainEmplId.value(#RPayMainEmplId(qbd.name()));
        qbrMainEmplId.status(RangeStatus::Hidden);
        super(_paySequence);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFund</Name>
				<Source><![CDATA[
    protected RPayAmount calculateFund(RPayCounterUnit _payCounterUnit,
                                       ReportPeriod_RU _payPeriod = RPayParameters::payPeriod(),
                                       RHRMEmplId      _emplId = '')
    {
        RHRMEmplTable emplTableMain;
        RPayAmount amount;

        while select EmployeeId from emplTableMain
            where emplTableMain.PayMainEmplId == emplTable.PayMainEmplId
        {
            amount += RPayTrans::calculateFund(_payCounterUnit, _payPeriod, emplTableMain.EmployeeId);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFutureTax</Name>
				<Source><![CDATA[
    private void calculateFutureTax()
    {
        RPayTrans                     rPayTrans;
        RHRMEmplTable                 emplTableLocal;
        RPayTaxCalculate_FuturePeriod rpayTaxCalculate;
        int                           i;
        RpayTaxSumCalc                rpayTaxSumCalc = new RpayTaxSumCalc();
        RPayEmplTax                   emplTax;

        emplTax = RPayEmplTax::construct(emplTable.EmployeeId, RPayParameters::payPeriod(emplTable.EmployeeId));
        while select rPayTaxIncomeGroupTable
            where rPayTaxIncomeGroupTable.EmplTaxStatus == emplTax.taxStatus()
        {
            while select rPayTrans group by SourceDate
                        where rPayTrans.PayPeriod  == payPeriod &&
                              rPayTrans.SourceDate >  payPeriod
                  exists join emplTableLocal
                        where emplTableLocal.EmployeeId       == rPayTrans.Emplid &&
                             (emplTableLocal.PayMainEmplId    == emplTable.EmployeeId ||
                              emplTableLocal.EmployeeId       == emplTable.EmployeeId)
            {
                rpayTaxCalculate = new RPayTaxCalculate_FuturePeriod(rPayTaxIncomeGroupTable, emplTable.EmployeeId);
                sumCounter       = rpayTaxCalculate.calcTaxDeduct(payPeriod,rPayTrans.SourceDate);
                this.updatePayTrans(rPayTrans.SourceDate);
                i++;
            }
        }

        if (i)
        {
            rpayTaxSumCalc.runTax(payPeriod, emplTable.EmployeeId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransByBranch</Name>
				<Source><![CDATA[
    private void createTransByBranch(RPayCorrectedPeriod _transCorPeriod, RpayTaxIncomeGroupCode _taxGroupCode, BranchId_RU _branchId)
    {
        rPayTaxIncomeGroupTable = RPayTaxIncomeGroupTable::findCode(_taxGroupCode);

        select firstonly forupdate payTrans
            where payTrans.PayPeriod            == payPeriod                    &&
                  payTrans.SourceDate           == payPeriod                    &&
                  payTrans.CorrectedPeriod      == _transCorPeriod              &&
                  payTrans.PayModuleCode        == payModuleTable.PayModuleCode &&
                  payTrans.CounterUnit          == _taxGroupCode                &&
                  payTrans.TaxIncomeGroupCode   == _taxGroupCode                &&
                  payTrans.SourceTableId        == sourceTable.TableId          &&
                  payTrans.SourceRecId          == sourceTable.RecId            &&
                  payTrans.Emplid               == emplTable.EmployeeId         &&
                  payTrans.BranchId             == _branchId                    &&
                  payTrans.TaxRedemption        == taxReturnPerMth;

        if (payTrans.RecId)
        {
            if (sumCounter)
            {
                payTrans.TaxRedemption      = taxReturnPerMth;
                payTrans.BranchId           = _branchId;
                this.initPayTransValue(payPeriod);
                payTrans.CorrectedPeriod    = _transCorPeriod;
                if (year(_transCorPeriod) != year(payPeriod) && rPayTaxIncomeGroupTable.AcquittanceCostType)
                {
                    payTrans.PayCtype = rPayTaxIncomeGroupTable.AcquittanceCostType;
                }
                payTrans.update();
            }
            else
            {
                payTrans.delete();
            }
        }
        else
        {
            if (sumCounter)
            {
                payTrans.TaxRedemption      = taxReturnPerMth;
                payTrans.BranchId           = _branchId;
                this.initPayTransValue(payPeriod);
                payTrans.CorrectedPeriod    = _transCorPeriod;
                if (year(_transCorPeriod) != year(payPeriod) && rPayTaxIncomeGroupTable.AcquittanceCostType)
                {
                    payTrans.PayCtype = rPayTaxIncomeGroupTable.AcquittanceCostType;
                }
                payTrans.insert();
            }
        }

        if (year(_transCorPeriod) != year(payPeriod))
        {
            RPayTaxSumYear::updateTaxSumYear(emplTable.EmployeeId, _transCorPeriod);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLimitAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayAmount getTaxLimitAmount()
    {
        return limitationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInstanceCounter</Name>
				<Source><![CDATA[
    public void initInstanceCounter(RPayCalculate _caller)
    {
        RPayCalculate_Tax   taxCaller;

        super(_caller);

        if (_caller is RPayCalculate_Tax)
        {
            taxCaller = _caller;
            this.parmChildOrderNum(taxCaller.parmChildOrderNum());
            this.setFamilyRecId(taxCaller.setFamilyRecId());
            this.setTaxDeductionTable(taxCaller.setTaxDeductionTable());
            this.setIncomeTable(taxCaller.setIncomeTable());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPayTransValue</Name>
				<Source><![CDATA[
    protected void initPayTransValue(ReportPeriod_RU _sourceDate = payPeriod)
    {
        payTrans.SourceDate      = _sourceDate;
        payTrans.PayPeriod       = payPeriod;
        payTrans.CorrectedPeriod = payPeriod;
        payTrans.TransDate       = (transDate ? transDate  : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        payTrans.initFromEmplTable(emplTable);

        if (_sourceDate == payPeriod)
        {
            if (rPayTaxIncomeGroupTable.RpayCostType)
            {
                payTrans.PayCtype = rPayTaxIncomeGroupTable.RpayCostType;
            }
            else
            {
                info("@RUP1244");
            }
        }
        else
        {
            if (rPayTaxIncomeGroupTable.FutureTaxCostType)
            {
                payTrans.PayCtype = rPayTaxIncomeGroupTable.FutureTaxCostType;
            }
            else
            {
                info("@RUP1243");
            }
        }

        payTrans.Amount             = taxReturnPerMth ? sumCounter : - sumCounter;
        payTrans.PayModuleCode      = payModuleTable.PayModuleCode;
        payTrans.CounterUnit        = rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode;
        payTrans.SourceTableId      = sourceTable.TableId;
        payTrans.SourceRecId        = sourceTable.RecId;
        payTrans.TaxIncomeGroupCode = rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode;

        if (payTrans.LedgerDimension != 0 || payTrans.OffsetLedgerDimension != 0)
        {
            this.checkPostingProfiles(false);
        }

        payTrans.updatePosting();
        this.initTaxPosting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPayTransValueAcquittance</Name>
				<Source><![CDATA[
    private void initPayTransValueAcquittance()
    {
        ;
        payTrans.SourceDate         = payPeriod;
        payTrans.PayPeriod          = payPeriod;
        payTrans.CorrectedPeriod    = payPeriod;
        payTrans.TransDate          = (transDate ? transDate  : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        payTrans.PayCtype           = rPayTaxIncomeGroupTable.AcquittanceCostType;
        payTrans.Amount             = -sumCounter;
        payTrans.PayModuleCode      = payModuleTable.PayModuleCode;
        payTrans.SourceTableId      = sourceTable.TableId;
        payTrans.SourceRecId        = sourceTable.RecId;
        payTrans.TaxIncomeGroupCode = rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode;
        payTrans.initFromEmplTable(emplTable);
        payTrans.updatePosting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxPosting</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initTaxPosting()
    {
        TaxCode taxCode;
        LedgerDimensionDefaultAccount   ledgerDimensionAccount;

        if (payTrans.BranchId != '')
        {
            taxCode = payTrans.getTaxCodeFromBranch();
        }
        if (payTrans.BranchId == '' || (payTrans.BranchId != '' && taxCode == ''))
        {
            taxCode = rPayTaxIncomeGroupTable.TaxCode;
        }

        if (payTrans.TaxRedemption)
        {
            ledgerDimensionAccount = TaxLedgerAccountGroup::taxDeferredLedgerDim_RU(taxCode);
        }
        else
        {
            ledgerDimensionAccount = TaxLedgerAccountGroup::taxOutgoingLedgerDimension_RU(taxCode);
        }

        payTrans.setLedgerDimension(LedgerJournalACType::Ledger,
                                    ledgerDimensionAccount,
                                    0,
                                    payTrans.Emplid);

        if (payTrans.LedgerDimension && payTrans.OffsetLedgerDimension)
        {
            payTrans.Correct = NoYes::Yes;
        }
        else
        {
            payTrans.Correct = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkerProcedure</Name>
				<Source><![CDATA[
    public boolean isWorkerProcedure()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RPayModuleTable _payModuleTable)
    {
        super(_payModuleTable);

        transDate = RPayParameters::payPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChildOrderNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Counter parmChildOrderNum(Counter _childOrderNum = childOrderNum)
    {
        childOrderNum = _childOrderNum;

        return childOrderNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetFund</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayCounterUnit setBudgetFund(RPayCounterUnit _budgetFund = budgetFund)
    {
        ;
        budgetFund = _budgetFund;
        return budgetFund;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFamilyRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RHRMFamilyRecId setFamilyRecId(RHRMFamilyRecId _familyRecId = familyRecId)
    {
        ;
        familyRecId = _familyRecId;
        return familyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFundDeductionTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayFundDeductionTable setFundDeductionTable(RPayFundDeductionTable _rPayFundDeductionTable = rPayFundDeductionTable)
    {
        ;
        rPayFundDeductionTable = _rPayFundDeductionTable.data();
        return rPayFundDeductionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIncomeTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTaxIncomeTable setIncomeTable(RPayTaxIncomeTable _rPayTaxIncomeTable = rPayTaxIncomeTable)
    {
        ;
        rPayTaxIncomeTable = _rPayTaxIncomeTable.data();
        return rPayTaxIncomeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxDeductionTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTaxDeductionTable setTaxDeductionTable(RPayTaxDeductionTable _rPayTaxDeductionTable = rPayTaxDeductionTable)
    {
        ;
        rPayTaxDeductionTable = _rPayTaxDeductionTable.data();
        return rPayTaxDeductionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeductionTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateDeductionTrans(RpayTaxIncomeGroupCode _incomeGroupCode, ReportPeriod_RU _sourceDate = payPeriod, RPayCorrectedPeriod _correctedPeriod = payPeriod)
    {
        select firstonly forupdate payTrans
            index SourceIdx
            where payTrans.PayPeriod            == payPeriod                    &&
                  payTrans.SourceDate           == _sourceDate                  &&
                  payTrans.PayModuleCode        == payModuleTable.PayModuleCode &&
                  payTrans.CounterUnit          == _incomeGroupCode             &&
                  payTrans.TaxIncomeGroupCode   == _incomeGroupCode             &&
                  payTrans.SourceTableId        == sourceTable.TableId          &&
                  payTrans.SourceRecId          == sourceTable.RecId            &&
                  payTrans.Emplid               == emplTable.EmployeeId         &&
                 ((!payTrans.TaxRedemption) || (payTrans.TaxRedemption && taxReturnPerMth));

        if (payTrans.RecId)
        {
            if (sumCounter)
            {
                this.initPayTransValue(_sourceDate);
                payTrans.TaxRedemption = taxReturnPerMth;
                payTrans.update();
            }
            else
            {
                payTrans.delete();
            }
        }
        else
        {
            if (sumCounter)
            {
                this.initPayTransValue(_sourceDate);
                payTrans.TaxRedemption = taxReturnPerMth;
                payTrans.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePayTrans</Name>
				<Source><![CDATA[
    protected void updatePayTrans(ReportPeriod_RU _sourceDate = payPeriod)
    {
        ttsbegin;
        this.updateDeductionTrans(rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode, _sourceDate);
        this.updateRedemptionTrans(_sourceDate);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePayTransAcquittance</Name>
				<Source><![CDATA[
    private void updatePayTransAcquittance()
    {
        ttsbegin;
        select forupdate payTrans index SourceIdx
            where payTrans.PayPeriod     == payPeriod                                   &&
                  payTrans.PayCtype      == rPayTaxIncomeGroupTable.AcquittanceCostType &&
                  payTrans.PayModuleCode == payModuleTable.PayModuleCode                &&
                  payTrans.SourceTableId == sourceTable.TableId                         &&
                  payTrans.SourceRecId   == sourceTable.RecId                           &&
                  payTrans.Emplid        == emplTable.EmployeeId;

        if (payTrans.RecId)
        {
            if (sumCounter)
            {
                this.initPayTransValueAcquittance();
                payTrans.update();
            }
            else
            {
                payTrans.delete();
            }
        }
        else
        {
            if (sumCounter)
            {
                this.initPayTransValueAcquittance();
                payTrans.insert();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRedemptionTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateRedemptionTrans(ReportPeriod_RU _sourceDate = payPeriod)
    {
        select firstonly forupdate payTrans
            index SourceIdx
            where payTrans.PayPeriod            == payPeriod                                      &&
                  payTrans.SourceDate           == _sourceDate                                    &&
                  payTrans.PayModuleCode        == payModuleTable.PayModuleCode                   &&
                  payTrans.CounterUnit          == rPayTaxIncomeGroupTable.RpayTaxIncomeGroupCode &&
                  payTrans.TaxIncomeGroupCode   == redemptionTaxCode                              &&
                  payTrans.SourceTableId        == sourceTable.TableId                            &&
                  payTrans.SourceRecId          == sourceTable.RecId                              &&
                  payTrans.Emplid               == emplTable.EmployeeId                           &&
                  payTrans.TaxRedemption;

        if (payTrans.RecId)
        {
            if (redemptionAmount)
            {
                payTrans.TaxRedemption = NoYes::Yes;
                this.initPayTransValue(_sourceDate);
                payTrans.TaxIncomeGroupCode = redemptionTaxCode;
                payTrans.Amount             = redemptionAmount;
                payTrans.update();
            }
            else
            {
                payTrans.delete();
            }
        }
        else
        {
            if (redemptionAmount)
            {
                payTrans.TaxRedemption = NoYes::Yes;
                this.initPayTransValue(_sourceDate);
                payTrans.TaxIncomeGroupCode = redemptionTaxCode;
                payTrans.Amount             = redemptionAmount;
                payTrans.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateResidentTaxHistory</Name>
				<Source><![CDATA[
    private void updateResidentTaxHistory(RHRMEmplId _emplId = emplTable.EmployeeId)
    {
        ReportPeriod_RU currentPeriod, dateStart, dateEnd;
        RpayTaxSumCalc  rpayTaxSumCalc = new RpayTaxSumCalc();

        dateStart = endmth(dateStartYr(payPeriod));
        dateEnd   = payPeriod;

        if (dateStart < dateEnd)
        {
            for (currentPeriod = dateStart; currentPeriod < dateEnd; currentPeriod = endmth(nextMth(currentPeriod)))
            {
                rpayTaxSumCalc.runTax(currentPeriod, _emplId);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>