<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NumberSeqFormHandlerLedgerJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class NumberSeqFormHandlerLedgerJournal extends NumberSeqFormHandler
{
    LedgerJournalEngine ledgerJournalEngine;
    LedgerJournalTrans  ledgerJournalTrans;
    boolean             useLedgerJournalTrans;

    // This indicates that we have started a new voucher.
    boolean             newVoucher;

    // When set, contains a voucher number that was reclaimed and may be used on a new voucher.
    // This allows non-continuous voucher sequences to behave more like continuous sequences within the scope of an open form.
    Voucher             nextVoucher;

    Counter             currentNewUnsaved;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>curRecord</Name>
				<Source><![CDATA[
    Common curRecord()
    {
        if (!useLedgerJournalTrans)
            return super();

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodClose</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cancels the unused numbers when a form is closed.
    /// </summary>
    /// <param name="_forced">
    ///    A value that identifies that the form was forced closed.
    /// </param>
    void formMethodClose(boolean _forced =  false)
    {
        LedgerJournalTrans  ledgerJournalTransLocal = this.curRecord();
        LedgerJournalTable  ledgerJournalTableLocal = ledgerJournalTransLocal.ledgerJournalTable();

        //
        //  If a "voucher" has not been "saved" to the LedgerJournalTrans table and there is not an instance
        //  of a NumberSeq object but there is a numberSequenceTable buffer then the "voucher" should be
        //  "Released" for re-use.
        //
        //  A "voucher" can arrive at this state because the number was still in use on the form's
        //  datasource (on an "unsaved" line) while another row (same Journal) using the same "voucher" was
        //  being deleted from the LedgerJournalTrans table. This leaves the "voucher" in a "used" state but
        //  not an "Active" one.
        //
        //  Verifying for a "NumberSequenceTable" and a "Voucher" will prevent the "Release" method for being called on
        //  a blank or empty line.
        //
        if (!numberSeq && numberSequenceTable.RecId &&
            ledgerJournalTableLocal.NumberSequenceTable && ledgerJournalTransLocal.Voucher &&
            !LedgerJournalTrans::existVoucher(ledgerJournalTransLocal.JournalNum, ledgerJournalTransLocal.Voucher))
        {
            NumberSeq::releaseNumber(ledgerJournalTableLocal.NumberSequenceTable, ledgerJournalTransLocal.Voucher);
        }

        super(_forced);
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreUnusedVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// If we have already have a voucher and it is not used, set it on the new record so we can skip pulling another number later.
    /// </summary>
    private boolean restoreUnusedVoucher()
    {
        if (numberSequenceTable.Continuous || !NumberSeqFormHandlerLedgerJournalRetryVoucherFlight::instance().isEnabled()) return false;

        LedgerJournalTrans ledgerJournalTransLocal = this.curRecord();
        if (!nextVoucher
            || ledgerJournalTransLocal.Voucher
            || LedgerJournalTrans::existVoucher(ledgerJournalTransLocal.JournalNum, nextVoucher))
        {
            return false;
        }

        lastNumber = nextVoucher;
        ledgerJournalTransLocal.Voucher = nextVoucher;
        nextVoucher = '';

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceCreate</Name>
				<Source><![CDATA[
    void formMethodDataSourceCreate(boolean _forced = false)
    {
        newVoucher = false;

        if (_forced || ledgerJournalEngine.takeNewVoucher())
        {
            if (!this.restoreUnusedVoucher())
            {
                super();
            }

            if (lastNumber)
            {
                newVoucher = true;
                currentNewUnsaved = 0;
            }
        }
        currentNewUnsaved++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceDelete</Name>
				<Source><![CDATA[
    void formMethodDataSourceDelete(boolean _forced = false)
    {
        LedgerJournalTrans  ledgerJournalTransLocal = this.curRecord();
        LedgerJournalTable  ledgerJournalTableLocal = ledgerJournalTransLocal.ledgerJournalTable();
  
        boolean voucherNotUsedOnJournal = !LedgerJournalTrans::existVoucher(ledgerJournalTransLocal.JournalNum, ledgerJournalTransLocal.Voucher);
        boolean voucherNotUsedOnDatasource = ledgerJournalTransLocal.checkVoucherNotUsedDataSource();

        //
        //  If a "voucher" has not been "saved" to the LedgerJournalTrans table and there is not an instance
        //  of a NumberSeq object but there is a numberSequenceTable buffer then the "voucher" should be
        //  "Released" for re-use.
        //
        //  A "voucher" can arrive at this state because the number was still in use on the form's
        //  datasource (on an "unsaved" line) while another row (same Journal) using the same "voucher" was
        //  being deleted from the LedgerJournalTrans table. This leaves the "voucher" in a "used" state but
        //  not an "Active" one.
        //
        //  This also should prevent the code from being executed during the datasource linkActive() event during
        //  form's startup process.
        //
        //  Verifying for a "VoucherSeries and a "Voucher" will prevent the "Release" method for being called on
        //  a blank or empty line.
        //
        if (!numberSeq && numberSequenceTable.RecId &&
            ledgerJournalTableLocal.NumberSequenceTable && ledgerJournalTransLocal.Voucher &&
            voucherNotUsedOnJournal &&
            voucherNotUsedOnDatasource)
        {
            NumberSeq::releaseNumber(ledgerJournalTableLocal.NumberSequenceTable, ledgerJournalTransLocal.Voucher);
        }

        // Save an unused voucher for reuse (as long as the owner of this handler is in scope).
        if (ledgerJournalTransLocal.Voucher
            && !ledgerJournalTransLocal.RecId
            && voucherNotUsedOnJournal
            && voucherNotUsedOnDatasource)
        {
            nextVoucher = ledgerJournalTransLocal.Voucher;
        }

        if (!ledgerJournalTransLocal.RecId)
        {
            currentNewUnsaved--;
        }

        if (!currentNewUnsaved)
        {
            super(_forced);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the number sequence when the data source validate is called.
    /// </summary>
    /// <param name="superValue">
    ///    The previous validate write value.
    /// </param>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    boolean formMethodDataSourceValidateWrite(boolean superValue = true)
    {
        boolean ret = true;
        Common  curRecord = this.curRecord();
        Common  curRecordOrig = this.curRecord().orig();

        if (!curRecord.RecId ||
            curRecord.(fieldNum(LedgerJournalTrans, Voucher)) != curRecordOrig.(fieldNum(LedgerJournalTrans, Voucher)))
            ret = super(superValue);
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceVoucherModified</Name>
				<Source><![CDATA[
    public boolean formMethodDataSourceVoucherModified()
    {
        Common curRecord        = this.curRecord();
        Common curRecordOrig    = this.curRecord().orig();

        if (curRecord)
        {
            if (curRecord.(fieldNum(LedgerJournalTrans, Voucher)) != curRecordOrig.(fieldNum(LedgerJournalTrans, Voucher)))
            {
                if (!this.checkChangeNumber(curRecordOrig.(fieldNum(LedgerJournalTrans, Voucher)),
                    curRecord.(fieldNum(LedgerJournalTrans, Voucher))))
                {
                    curRecord.(fieldNum(LedgerJournalTrans, Voucher)) = curRecordOrig.(fieldNum(LedgerJournalTrans, Voucher));
                    if (formDataSource)
                        formDataSource.refresh();
                    return false;
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formMethodDataSourceWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the number sequences when the data source write method is called.
    /// </summary>
    void formMethodDataSourceWrite()
    {
        boolean             voucherUpdated;
        LedgerJournalTrans  ledgerJournalTransLocal = this.curRecord();

        voucherUpdated = this.voucherChanged();

        if (!ledgerJournalTransLocal.RecId)
        {
            currentNewUnsaved--;
        }

        if (!voucherUpdated && currentNewUnsaved <= 0)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVoucher</Name>
				<Source><![CDATA[
    final boolean newVoucher()
    {
        return newVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalEngine</Name>
				<Source><![CDATA[
    LedgerJournalEngine parmLedgerJournalEngine(LedgerJournalEngine _ledgerJournalEngine = ledgerJournalEngine)
    {
        ledgerJournalEngine = _ledgerJournalEngine;
        return ledgerJournalEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    void parmLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = ledgerJournalTrans)
    {
        ledgerJournalTrans = _ledgerJournalTrans;
        useLedgerJournalTrans = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherChanged</Name>
				<Source><![CDATA[
    protected boolean voucherChanged()
    {
        Voucher             oldVoucher;
        Voucher             curVoucher;
        LedgerJournalTrans  ledgerJournalTransLocal = this.curRecord();

        curVoucher = ledgerJournalTransLocal.Voucher;
        oldVoucher = ledgerJournalTransLocal.orig().Voucher;

        //The voucher changes should be processed in any case
        if (curVoucher != oldVoucher)
        {
            if (!LedgerJournalTrans::existVoucher(ledgerJournalTransLocal.JournalNum, curVoucher))
            {
                if (numberSequenceTable.Continuous)
                {
                    ttsbegin;
                    //Skipping the reservation process if a new voucher is already used for the same journal
                    if (!NumberSeq::newReserveNumFromCode(numberSequenceTable.NumberSequence,
                            NumberSeqScopeFactory::createDefaultScope(),false,true).reserve(curVoucher))
                    {
                        ledgerJournalTransLocal.Voucher = oldVoucher;
                        checkFailed(strFmt("@SYS30684",curVoucher));
                        throw error("@SYS18447");
                    }
                    ttscommit;
                }
            }

            //Check that old voucher is not empty and not used on datasource (Unsaved records are also processed)
            if (oldVoucher && ledgerJournalTransLocal.checkVoucherNotUsedDataSource(oldVoucher))
            {
                //If the old voucher is the last obtained from number sequence and the lastNumber value is
                //not empty (It means that the record with this voucher number is not saved yet) we should run
                //the abort process for this voucher and clear the lastNumber value.
                if (numberSeq && lastNumber == oldVoucher)
                {
                    this.callAbort();
                }
                else
                {
                    //Otherwise we are checking the datasource for the voucher usage
                    //and freeing the voucher number if not used.
                    ledgerJournalTransLocal.deleteVoucher(oldVoucher);
                }
            }

            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>