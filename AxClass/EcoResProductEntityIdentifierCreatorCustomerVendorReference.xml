<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductEntityIdentifierCreatorCustomerVendorReference</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The product entity vendor and customer reference identifier creator class.
/// </summary>
public abstract class EcoResProductEntityIdentifierCreatorCustomerVendorReference extends EcoResProductEntityIdentifierCreator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createIdentifiers</Name>
				<Source><![CDATA[
    public void createIdentifiers()
    {
        Query query = new Query();
        query.allowCrossCompany(true);

        QueryBuildDataSource qbdsCustVendExternalItem = query.addDataSource(tableNum(CustVendExternalItem));
        qbdsCustVendExternalItem.addOrderByField(fieldNum(CustVendExternalItem, ModuleType));
        qbdsCustVendExternalItem.addOrderByField(fieldNum(CustVendExternalItem, CustVendRelation));
        qbdsCustVendExternalItem.addOrderByField(fieldNum(CustVendExternalItem, ExternalItemId));
        qbdsCustVendExternalItem.addRange(fieldNum(CustVendExternalItem, ModuleType)).value(queryValue(this.getCustVendModuleType()));
        qbdsCustVendExternalItem.addRange(fieldNum(CustVendExternalItem, ModuleType)).value(queryValue(this.getCustGroupVendGroupModuleType()));

        QueryBuildDataSource qbdsInventDistinctProduct = qbdsCustVendExternalItem.addDataSource(tableNum(InventDistinctProduct));
        qbdsInventDistinctProduct.joinMode(JoinMode::ExistsJoin);
        qbdsInventDistinctProduct.addLink(fieldNum(CustVendExternalItem, ItemId), fieldNum(InventDistinctProduct, ItemId));
        qbdsInventDistinctProduct.addRange(fieldNum(InventDistinctProduct, Product)).value(queryValue(product.RecId));

        QueryBuildDataSource qbdsInventDim = qbdsInventDistinctProduct.addDataSource(tableNum(InventDim));
        qbdsInventDim.joinMode(JoinMode::ExistsJoin);
        qbdsInventDim.addLink(fieldNum(CustVendExternalItem, InventDimId), fieldNum(InventDim, InventDimId), qbdsCustVendExternalItem.name());
        InventDistinctProduct::queryAddProductDimLinks(qbdsInventDistinctProduct, qbdsInventDim);

        EcoResProductEntityIdentifierScope lastIdentifierScope;
        EcoResProductEntityIdentifierName  lastIdentifierName;

        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            CustVendExternalItem custVendExternalItem = queryRun.get(tableNum(CustVendExternalItem));

            if (lastIdentifierName != custVendExternalItem.ExternalItemId
                || lastIdentifierScope.PartyReferenceValue != custVendExternalItem.CustVendRelation
                || lastIdentifierScope.PartyReferenceType != this.getPartyReferenceTypeFromModuleType(custVendExternalItem.ModuleType))
            {
                if (lastIdentifierName)
                {
                    EcoResProductEntityIdentifierScope scope = EcoResProductEntityIdentifierScope::findByScopeOrCreate(lastIdentifierScope);
                    EcoResProductEntityIdentifier::findOrCreate(lastIdentifierName, product.RecId, scope.RecId);
                }
                lastIdentifierName = custVendExternalItem.ExternalItemId;
                lastIdentifierScope = this.initScope(
                                        identifierCode.RecId,
                                        custVendExternalItem.DataAreaId,
                                        this.getParty(custVendExternalItem.ModuleType, custVendExternalItem.CustVendRelation),
                                        this.getPartyReferenceTypeFromModuleType(custVendExternalItem.ModuleType),
                                        custVendExternalItem.CustVendRelation);                                                                          
            }
            else
            {
                lastIdentifierScope.LegalEntity = '';
            }
        }

        if (lastIdentifierName)
        {
            EcoResProductEntityIdentifierScope scope = EcoResProductEntityIdentifierScope::findByScopeOrCreate(lastIdentifierScope);
            EcoResProductEntityIdentifier::findOrCreate(lastIdentifierName, product.RecId, scope.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParty</Name>
				<Source><![CDATA[
    private DirPartyRecId getParty(ModuleInventPurchSalesVendCustGroup _moduleType, CustVendRel _custVendRelation)
    {
        DirPartyRecId party;

        if (_moduleType == ModuleInventPurchSalesVendCustGroup::Cust || ModuleInventPurchSalesVendCustGroup::Vend)
        {
            party = this.getCustVendParty(_custVendRelation);
        }

        return party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party value of the related vendor or customer table, if any.
    /// </summary>
    /// <param name = "_custVendRelation">The customer vendor relation value.</param>
    /// <returns>The value of the party.</returns>
    protected abstract DirPartyRecId getCustVendParty(CustVendRel _custVendRelation)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor or customer module type.
    /// </summary>
    /// <returns>The vendor or customer module type.</returns>
    protected abstract ModuleInventPurchSalesVendCustGroup getCustVendModuleType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustGroupVendGroupModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor or customer group module type.
    /// </summary>
    /// <returns>The vendor or customer group module type.</returns>
    protected abstract ModuleInventPurchSalesVendCustGroup getCustGroupVendGroupModuleType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the identifier scope buffer that will be refered by the identifier that will be created.
    /// </summary>
    /// <param name = "_code">The identifier code rec ID.</param>
    /// <param name = "_legalEntity">The legal entity.</param>
    /// <param name = "_party">The party.</param>
    /// <param name = "_partyReferenceType">The party reference type.</param>
    /// <param name = "_partyReferenceValue">The party reference value.</param>
    /// <returns>The identifier scope buffer with the initialized values.</returns>
    protected EcoResProductEntityIdentifierScope initScope(
                                            EcoResProductEntityIdentifierCodeRecId              _code,
                                            DataAreaId                                          _legalEntity,
                                            DirPartyRecId                                       _party,
                                            EcoResProductEntityIdentifierPartyReferenceType     _partyReferenceType,
                                            EcoResProductEntityIdentifierPartyReferenceValue    _partyReferenceValue)
    {
        EcoResProductEntityIdentifierScope scope;

        scope.Code = _code;
        scope.LegalEntity = _legalEntity;
        scope.Party = _party;
        scope.PartyReferenceType = _partyReferenceType;
        scope.PartyReferenceValue = _partyReferenceValue;

        return scope;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyReferenceTypeFromModuleType</Name>
				<Source><![CDATA[
    private EcoResProductEntityIdentifierPartyReferenceType getPartyReferenceTypeFromModuleType(ModuleInventPurchSalesVendCustGroup _moduleType)
    {
        switch (_moduleType)
        {
            case ModuleInventPurchSalesVendCustGroup::Cust:
                return EcoResProductEntityIdentifierPartyReferenceType::Customer;
            case ModuleInventPurchSalesVendCustGroup::CustGroup:
                return EcoResProductEntityIdentifierPartyReferenceType::CustomerGroup;
            case ModuleInventPurchSalesVendCustGroup::Vend:
                return EcoResProductEntityIdentifierPartyReferenceType::Vendor;
            case ModuleInventPurchSalesVendCustGroup::VendGroup:
                return EcoResProductEntityIdentifierPartyReferenceType::VendorGroup;
            default:
                return 0;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>