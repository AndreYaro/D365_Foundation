<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailLoyaltySchemeExplodeJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class <c>RetailDlvModeExplodeJob</c> is used to push data from DlvMode to TempTable
/// and from TempTable to Normal Tables.
/// </summary>
class RetailLoyaltySchemeExplodeJob extends RunBaseBatch implements BatchRetryable
{
    TmpRetailLoyaltySchemeChannelExploded tmpChannelExploded;
    str                             traceArea;
    #define.RetryNum(3)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deltaSyncChannels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies only changed records from <c>TmpRetailLoyaltySchemeChannelExploded</c> to the
    /// <c>RetailLoyaltySchemeChannelExploded</c> table. This ensures that only the changes are
    /// captured by the PREACTION overrides.
    /// </summary>
    private void deltaSyncChannels()
    {
        RetailLoyaltySchemeChannelExploded      exploded;
        int                                     countRecordsVisited;
        int                                     countRecordsUpdated;
        str                                     stepName = 'deltaSyncChannels';

        // The set of recIds to keep (we delete all others).
        Set recordsToKeep           = new Set(Types::Int64);

        countRecordsVisited = 0;
        countRecordsUpdated = 0;

        RetailTracer::Info(traceArea, stepName, 'Start');

        // In-Memory tables cannot be joined in X++.
        while select tmpChannelExploded
        {
            ++countRecordsVisited;
            select firstOnly RecId from exploded
                where
                    exploded.LoyaltyScheme == tmpChannelExploded.LoyaltyScheme &&
                    exploded.OMOperatingUnit == tmpChannelExploded.OMOperatingUnit;

            if (!exploded)
            {
                // No matching record found; this is the insert case.
                exploded.LoyaltyScheme = tmpChannelExploded.LoyaltyScheme;
                exploded.OMOperatingUnit = tmpChannelExploded.OMOperatingUnit;
                exploded.insert();

                ++countRecordsUpdated;
            }

            recordsToKeep.add(exploded.RecId);
        }

        while select forUpdate RecId
            from exploded
        {
            if (!recordsToKeep.in(exploded.RecId))
            {
                ++countRecordsUpdated;
                exploded.delete();
            }
        }

        RetailTracer::Info(traceArea, stepName, strFmt('Number of records Visited = (%1), Number of records updated = (%2)', countRecordsVisited, countRecordsUpdated));
        RetailTracer::Info(traceArea, stepName, 'End');
    }

]]></Source>
			</Method>
			<Method>
				<Name>explodeChannels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Explodes the channel associations for the loyalty schemes.
    /// </summary>
    private void explodeChannels()
    {
        RetailLoyaltyScheme             scheme;
        RetailLoyaltySchemeChannel      channel;

        OMOperatingUnit                 omOperatingUnit;
        Set                             omOperatingUnits;
        SetEnumerator                   omOperatingUnitsEnumerator;

        Set organizationTypes           = new Set(Types::Enum);

        // Used to filter the organization model to include only operating units.
        organizationTypes.add(OMInternalOrganizationType::OperatingUnit);

        while select RecId
            from scheme
            join OMInternalOrganization, OMHierarchyType from channel
                where
                    channel.LoyaltyScheme == scheme.RecId
        {
            // Filter the organization model to include only operating units effective as of right now.
            omOperatingUnits = OMInternalOrganization::getDescendantsAndSelf(channel.OMInternalOrganization, channel.OMHierarchyType, DateTimeUtil::utcNow(), organizationTypes);
            omOperatingUnitsEnumerator = omOperatingUnits.getEnumerator();
            while (omOperatingUnitsEnumerator.moveNext())
            {
                omOperatingUnit = OMOperatingUnit::find(omOperatingUnitsEnumerator.current(), OMOperatingUnitType::RetailChannel);
                if (!omOperatingUnit)
                {
                    // The operating unit was not a retail channel. No need to explode it.
                    continue;
                }

                // Insert the loyalty scheme and channel association in the temporary exploded table
                tmpChannelExploded.LoyaltyScheme = scheme.RecId;
                tmpChannelExploded.OMOperatingUnit = omOperatingUnit.RecId;
                tmpChannelExploded.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        traceArea = 'RetailLoyaltySchemeExplodeJob';

        // Explode the loyalty scheme and channel pairs
        try
        {
            ttsBegin;
            // Explode the channels to in-memory staging table.
            this.explodeChannels();

            // Delta sync the exploded results to RetailLoyaltySchemeChannelExploded table.
            this.deltaSyncChannels();

            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@REX4160715";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailLoyaltySchemeExplodeJob scheduler = new RetailLoyaltySchemeExplodeJob();

        if (scheduler.prompt())
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailLoyaltySchemeExplodeJob</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailLoyaltySchemeExplodeJob</c> can be
    /// run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>