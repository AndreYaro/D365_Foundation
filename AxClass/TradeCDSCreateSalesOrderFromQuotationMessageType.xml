<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeCDSCreateSalesOrderFromQuotationMessageType</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysMessageTypeFactoryAttribute(SysMessageType::SalesD365SalesCreateSalesOrderFromQuotation)]
internal class TradeCDSCreateSalesOrderFromQuotationMessageType extends SysMessageTypeMetadata
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAllowedMessageStateTransitions</Name>
				<Source><![CDATA[
    internal Enumerator getAllowedMessageStateTransitions()
    {
        return SysMessageStateTransition::getProcessedCancelledStateTransitions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDependencies</Name>
				<Source><![CDATA[
    internal List getDependencies(SysMessage _message)
    {
        List dependencies = new List(Types::Record);

        SysMessageDependencyKey dependencyKey = strFmt(TradeCDSConfirmQuotationMessageType::QuotationConfirmationDependencyKey, this.getContract(_message).parmSalesQuotationId());
        SysMessageKeyDateTimeSequenceDependency dependency = SysMessageKeyDateTimeSequenceDependency::create(dependencyKey);
        dependency.DateTime = DateTimeUtil::addMinutes(dependency.DateTime, 10);
        dependencies.addEnd(dependency);

        return dependencies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageQueue</Name>
				<Source><![CDATA[
    internal SysMessageQueue getMessageQueue()
    {
        return SysMessageQueue::SalesD365SalesIntegration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMessageStateTransition</Name>
				<Source><![CDATA[
    internal void processMessageStateTransition(SysMessage _message, SysMessageStateTransition _messageStateTransition)
    {
        if (_messageStateTransition.isEqual(SysMessageStateTransition::newFromStates(SysMessageState::Queued, SysMessageState::Processed)))
        {
            SalesTable salesTable = SalesTable::find(this.getContract(_message).parmSalesId());
            TradeCDSCreateSalesOrderFromQuotationMessageType::processOrder(salesTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOrder</Name>
				<Source><![CDATA[
    internal static void processOrder(SalesTable _salesTable)
    {
        if (_salesTable.QuotationId)
        {
            ttsbegin;

            boolean confirmationExists;
            CustQuotationConfirmJour confirmation;
            CustQuotationConfirmSalesLink confirmationSalesLink;

            while select forupdate * from confirmation
                exists join confirmationSalesLink
                    where confirmationSalesLink.QuotationConfirmId == confirmation.QuotationConfirmId
                        && confirmationSalesLink.QuotationDate == confirmation.QuotationDate
                        && confirmationSalesLink.OrigQuotationId == _salesTable.QuotationId
            {
                if (!confirmation.SalesId)
                {
                    confirmation.SalesId = _salesTable.SalesId;
                    confirmation.update();

                    CustQuotationConfirmSalesLink confirmationSalesLinkUpdate = CustQuotationConfirmSalesLink::find(confirmation.QuotationConfirmId, confirmation.QuotationDate, _salesTable.QuotationId, true);

                    confirmationSalesLinkUpdate.salesId = _salesTable.SalesId;
                    confirmationSalesLinkUpdate.update();

                    CustQuotationConfirmTrans confirmationTrans;

                    update_recordset confirmationTrans
                        setting SalesId = _salesTable.SalesId
                        where confirmationTrans.QuotationConfirmId == confirmation.QuotationConfirmId
                            && confirmationTrans.QuotationDate == confirmation.QuotationDate
                            && confirmationTrans.OrigQuotationId == _salesTable.QuotationId
                            && confirmationTrans.SalesId == '';

                    SalesQuotationTable salesQuotationTable;

                    update_recordset salesQuotationTable
                        setting SalesIdRef = _salesTable.SalesId
                        where salesQuotationTable.QuotationId == _salesTable.QuotationId
                            && salesQuotationTable.SalesIdRef == '';
                }

                confirmationExists = true;
            }

            if (!confirmationExists && SalesQuotationLine::exist(_salesTable.QuotationId))
            {
                throw error("@SCM:TradeCDSCreateSalesOrderFromQuotation_JournalValidation");
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSendMessage</Name>
				<Source><![CDATA[
    internal boolean canSendMessage(SysMessageQueue _messageQueue, SysMessageTargetRecId _messageTarget, SysMessageTargetRecId _sourceMessageTarget)
    {
        return _messageQueue == SysMessageQueue::SalesD365SalesIntegration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    private TradeCDSCreateSalesOrderFromQuotationContract getContract(SysMessage _message)
    {
        TradeCDSCreateSalesOrderFromQuotationContract contract = FormJsonSerializer::deserializeObject(classNum(TradeCDSCreateSalesOrderFromQuotationContract), _message.Content);

        return contract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>