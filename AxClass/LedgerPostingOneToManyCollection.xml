<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerPostingOneToManyCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerPostingOneToManyCollection</c> class manages a one to many collection of values.
/// </summary>
public final class LedgerPostingOneToManyCollection implements SysPackable
{
    Types typeOfOne;
    Types typeOfMany;
    boolean ignoreDuplicates;

    Map oneToManyCollection;
    MapEnumerator enumerator;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        typeOfOne,
        typeOfMany,
        ignoreDuplicates
    ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the specified pair of values to the collection.
    /// </summary>
    /// <param name="_oneValue">
    ///    The one value.
    /// </param>
    /// <param name="_manyValue">
    ///    The many value.
    /// </param>
    public void add(AnyType _oneValue, AnyType _manyValue)
    {
        Set manyCollection;

        if (oneToManyCollection.exists(_oneValue))
        {
            manyCollection = oneToManyCollection.lookup(_oneValue);

            if (!ignoreDuplicates && manyCollection.in(_manyValue))
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
        else
        {
            manyCollection = new Set(typeOfMany);

            oneToManyCollection.insert(_oneValue, manyCollection);
        }

        manyCollection.add(_manyValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>count</Name>
				<Source><![CDATA[
    public int count()
    {
        return oneToManyCollection.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentMany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the many collection for the current position.
    /// </summary>
    /// <returns>
    ///    The many collection for the current position.
    /// </returns>
    public Set currentMany()
    {
        Set manyCollection;

        if (enumerator == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        manyCollection = enumerator.currentValue();

        return manyCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentOne</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the one value for the current position.
    /// </summary>
    /// <returns>
    ///    The one value of the current position.
    /// </returns>
    public AnyType currentOne()
    {
        AnyType oneValue;

        if (enumerator == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        oneValue = enumerator.currentKey();

        return oneValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the many collection for the specified one value.
    /// </summary>
    /// <param name="_oneValueToFind">
    /// The one value to find.
    /// </param>
    /// <returns>
    /// The many collection corresponding to the one value.
    /// </returns>
    /// <remarks>
    /// An empty collection is returned if the one value is not found.
    /// </remarks>
    public Set find(AnyType _oneValueToFind)
    {
        Set manyCollection;

        if (oneToManyCollection.exists(_oneValueToFind))
        {
            manyCollection = oneToManyCollection.lookup(_oneValueToFind);
        }
        else
        {
            manyCollection = new Set(typeOfMany);
        }

        return manyCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the current position to the first one value.
    /// </summary>
    /// <returns>
    /// A Boolean value indicating whether a valid value was found.
    /// </returns>
    public boolean first()
    {
        boolean isFound;

        enumerator = oneToManyCollection.getEnumerator();

        isFound = enumerator.moveNext();

        return isFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Types _typeOfOne, Types _typeOfMany, boolean _ignoreDuplicates)
    {
        typeOfOne = _typeOfOne;
        typeOfMany = _typeOfMany;
        ignoreDuplicates = _ignoreDuplicates;

        oneToManyCollection = new Map(typeOfOne, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the current position to the next one value.
    /// </summary>
    /// <returns>
    ///    A Boolean value indicating whether a valid value was found.
    /// </returns>
    public boolean next()
    {
        boolean isFound;

        if (enumerator == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        isFound = enumerator.moveNext();

        return isFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, oneToManyCollection.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean success = false;
        Version version = RunBase::getVersion(_packedClass);
        container packedCollection;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedCollection] = _packedClass;
                oneToManyCollection = Map::create(packedCollection);
                success = true;
                break;
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LedgerPostingOneToManyCollection</c> class.
    /// </summary>
    /// <param name="_typeOfOne">
    ///    The type of the one values in the collection.
    /// </param>
    /// <param name="_typeOfMany">
    ///    The type of the many values in the collection.
    /// </param>
    /// <param name="_ignoreDuplicateValues">
    ///    A Boolean value that indicates whether to ignore duplicate many values for the same one value.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>LedgerPostingOneToManyCollection</c> class.
    /// </returns>
    public static LedgerPostingOneToManyCollection construct(Types _typeOfOne, Types _typeOfMany, boolean _ignoreDuplicateValues)
    {
        LedgerPostingOneToManyCollection collection;

        collection = new LedgerPostingOneToManyCollection(_typeOfOne, _typeOfMany, _ignoreDuplicateValues);

        return collection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LedgerPostingOneToManyCollection</c> class from a packed class.
    /// </summary>
    /// <param name="_packedClass">
    ///    The <c>LedgerPostingOneToManyCollection</c> class packed in a container.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>LedgerPostingOneToManyCollection</c> class.
    /// </returns>
    /// <remarks>
    ///    This method is for internal use only.
    /// </remarks>
    public static LedgerPostingOneToManyCollection create(container _packedClass)
    {
        LedgerPostingOneToManyCollection collection;

        collection = new LedgerPostingOneToManyCollection(Types::AnyType, Types::AnyType, false);
        collection.unpack(_packedClass);

        return collection;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>