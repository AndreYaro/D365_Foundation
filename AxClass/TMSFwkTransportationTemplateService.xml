<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkTransportationTemplateService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Tms.Base.Data;
using Microsoft.Dynamics.Ax.Tms.Base.Utility;
using System.Xml.Linq;

/// <summary>
/// The <c>TMSFwkTransportationTemplateService</c> class processes shipment according to a transportation template.
/// </summary>
class TMSFwkTransportationTemplateService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>retrieveRoutePlanCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieces route configuration code based based on a specific shipping entity.
    /// </summary>
    /// <param name = "_shippingEntity">Shipping entity.</param>
    /// <returns>Route configuration code; empty string otherwise.</returns>
    public static TMSRouteConfigCode retrieveRoutePlanCode(XElement _shippingEntity)
    {
        TMSTransportationTemplateId transportationTemplateId = _shippingEntity.GetString(ElementXmlConstants::TransportationTemplate);
        TMSRouteConfigCode routePlanCode = '';

        if (transportationTemplateId != '')
        {
            TMSTransportationTemplate transportationTemplate = TMSTransportationTemplate::find(transportationTemplateId);

            if (transportationTemplate != null)
            {
                if (transportationTemplate.ShipRoutePlanCode != '')
                {
                    routePlanCode = transportationTemplate.ShipRoutePlanCode;
                }
            }
        }

        return routePlanCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processShipTransportationTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the transportation template on shipping entity.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    /// <param name = "_shippingEntity">Shipping entity.</param>
    /// <returns>Transaction template record; empty record otherwise.</returns>
    public static TMSTransportationTemplate processShipTransportationTemplate(TmsTransactionFacade _transactionFacade, XElement _shippingEntity)
    {
        TMSTransportationTemplateId transportationTemplateId = _shippingEntity.GetString(ElementXmlConstants::TransportationTemplate);
        TMSTransportationTemplate transportationTemplate;

        if (transportationTemplateId != '')
        {
            transportationTemplate = TMSTransportationTemplate::find(transportationTemplateId);

            // only process shipment if routing hasn't occured and added any spot rates
            if (transportationTemplate != null && !TMSFwkXmlHelper::spotRatesExist(_shippingEntity))
            {
                // carrier / service
                TMSCarrierCode carrierCode = _shippingEntity.RetrieveFirstInstanceUpString(ElementXmlConstants::CarrierCode);
                TMSCarrierServiceCode carrierServiceCode = _shippingEntity.RetrieveFirstInstanceUpString(ElementXmlConstants::CarrierServiceCode);

                // if they are explicitly sending a carrier and carrier service, do not override with ship transportation template
                // so if they are in a confirmation scenario they have a carrier/serivce setup.  we don't want to then override that
                if (carrierCode == '' || carrierServiceCode == '')
                {
                    // carrier group code
                    if (transportationTemplate.ShipCarrierGroupCode != '')
                    {
                        XElement carrierGroupCode = _shippingEntity.RetrieveFirstInstanceUp(ElementXmlConstants::CarrierGroupCode);
                        carrierGroupCode.SetValue(transportationTemplate.ShipCarrierGroupCode);
                    }
                    else if (transportationTemplate.ShipCarrierCode != '')
                    {
                        // carrier / service
                        XElement carrierCodeElement = _shippingEntity.RetrieveFirstInstanceUp(ElementXmlConstants::CarrierCode);
                        carrierCodeElement.SetValue(transportationTemplate.ShipCarrierCode);

                        XElement carrierServiceCodeElement = _shippingEntity.RetrieveFirstInstanceUp(ElementXmlConstants::CarrierServiceCode);
                        carrierServiceCodeElement.SetValue(transportationTemplate.ShipCarrierServiceCode);
                    }
                }

                if (transportationTemplate.ShipRoutePlanCode != '')
                {
                    RatingDtoList ratingDTOs = TMSFwkRatingService::retrieveRatingDtoList(_transactionFacade, _shippingEntity);
                    TMSFwkTransportationTemplateService::processRoutePlan(_transactionFacade, _shippingEntity, transportationTemplate.ShipRoutePlanCode, false, ratingDTOs);
                }
            }
        }

        return transportationTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRoutePlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies rating entities based on a route configuration.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    /// <param name = "_shippingEntity">Shipping entity.</param>
    /// <param name = "_routeConfigCode">Route configuration code.</param>
    /// <param name = "_isChargeOverride">Determines whether rating entity is charge overriden.</param>
    /// <param name = "_ratingDtos">A list of rating DTOs.</param>
    public static void processRoutePlan(
        TmsTransactionFacade    _transactionFacade,
        XElement                _shippingEntity,
        TMSRouteConfigCode      _routeConfigCode,
        boolean                 _isChargeOverride,
        RatingDtoList           _ratingDtos)
    {
        // get original trans facade and shipping entities for fresh route/rate
        TmsTransactionFacade    tempTransFacade = TmsTransactionFacade::newFromXml(_transactionFacade.parmRequestXml().ToString());
        TMSRouteConfig          routeConfig = TMSRouteConfig::find(_routeConfigCode);
        XElementList            segments = TMSFwkRouteHelper::createStaticRouteSegments(tempTransFacade, routeConfig.RouteConfigCode, _shippingEntity, _isChargeOverride);
        XElement segment =      segments.WhereMatchingIntElement(ElementXmlConstants::Sequence, _shippingEntity.GetInt(ElementXmlConstants::Sequence))
                                        .SingleOrDefault();

        if (segment != null)
        {
            TMSFwkRatingService::rateEntity(tempTransFacade, segment, _ratingDtos);

            XElementList entities;
            str entity;

            if (_isChargeOverride)
            {
                entities = new XElementList(segment.Descendants(EntityXmlConstants::ChargeOverrideEntity));
                entity = EntityXmlConstants::ChargeOverrideEntities;
            }
            else
            {
                entities = new XElementList(segment.Descendants(EntityXmlConstants::RatingEntity));
                entity = EntityXmlConstants::RatingEntities;
            }

            // remove all rating entites if we don't match on any
            XElementListEnumerator ratingEntitiesEnumerator = new XElementList(_shippingEntity.Descendants(EntityXmlConstants::RatingEntities)).GetListEnumerator();

            while (ratingEntitiesEnumerator.MoveNext())
            {
                ratingEntitiesEnumerator.Current().Remove();
            }

            // add empty rating entity
            XElement element = new XElement(entity, entities);
            _shippingEntity.Add(element);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>