<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalFormTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The classes which are post fixed with Form, FormTable and FormTrans contains the code used to
///    control and manage the header and line forms.
/// </summary>
// This class contains methods to handle form controls in the journalTrans form
// Calls to the methods has to be inserted in the journalTrans form.
// The name of the methods indicate where the call must placed.
// Example: DatasourceWritePost
// This method has to be inserted after super() in the datasource write method.

class JournalFormTrans extends JournalForm
{
    JournalFormTable            journalFormTable;
    JournalTransData            journalTransData;

    FormRun                     formRun;
    Object                      formRunObject;

    FormDataSource              journalTrans_ds;

    JournalTransMap             journalTrans;
    JournalTransMap             journalTrans_orig;
    JournalTransMap             journalTrans_last;

    FormFunctionButtonControl   ctrlCheckJournal;
    FormFunctionButtonControl   ctrlPostJournal;
    FormButtonControl           ctrlInfolog;
    FormStringControl           ctrlVoucherGrid;
    FormStringControl           ctrlVoucherTab;

    FormWindowControl           ctrlLineLogImage;

    Integer                     initJournalTypeId;

    UnknownNoYes                formHasMethodInitButtons;
    UnknownNoYes                formHasMethodEnableButtonsActive;
    UnknownNoYes                formHasMethodEnableFieldsActive;
    UnknownNoYes                formHasMethodInitDatasourceAllow;

    boolean                     keepFormOpenIfLockCannotBeAcquired;

    // <GCN>
    #isoCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditAndCreateLines</Name>
				<Source><![CDATA[
    // </GCN>

    /// <summary>
    /// Determines if it is allowed to edit and create journal lines.
    /// </summary>
    /// <returns>
    /// true, if it is allowed to edit and create journal lines; otherwise, false.
    /// </returns>
    public boolean allowEditAndCreateLines()
    {
        boolean allow = journalTableData && !journalTableData.journalTable().Posted && journalFormTable.IsJournalFree();
        return allow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if creating and deleting journal lines is disallowed even if
    /// allowEditAndCreateLines() returns true.
    /// </summary>
    /// <returns>
    /// true, if creating and deleting journal lines is disallowed even if
    /// allowEditAndCreateLines() returns true; otherwise, false.
    /// </returns>
    internal boolean allowEditOnly()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowLineActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if it is allowed to perform actions on the lines.
    /// </summary>
    /// <returns>
    /// true, if it is allowed; otherwise, false.
    /// </returns>
    public boolean allowLineActions()
    {
        boolean allow = journalTableData != null;
        return allow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonClickedShowInfolog</Name>
				<Source><![CDATA[
    public void buttonClickedShowInfolog()
    {
        infolog.infoActionObject(this);
        journalTableData.journalErrorTransList().infolog(journalTrans);
        if (journalTableData.journalVoucherNum())
        {
            journalTableData.journalErrorVoucherList().infolog(journalTrans.Voucher);
        }

        if (! journalTransData.hasErrors())
        {
            info("@SYS69034");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceActivePost</Name>
				<Source><![CDATA[
    public void datasourceActivePost()
    {
        this.enableButtonsActive();
        this.enableFieldsActive();

        journalTrans_last = journalTrans.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceCreatePost</Name>
				<Source><![CDATA[
    public void datasourceCreatePost()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceCreatePre</Name>
				<Source><![CDATA[
    public void datasourceCreatePre()
    {
        journalTrans_last = journalTrans.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceDeletePost</Name>
				<Source><![CDATA[
    public void datasourceDeletePost()
    {
        if (journalTrans_orig.RecId)
        {
            if (journalTableData.journalVoucherNum() && journalTrans_orig.Voucher)
            {
                if (! journalTableData.journalTable().Posted)
                {
                    journalTableData.journalVoucherNum().release(journalTrans_orig.Voucher);
                }

                if (journalTableData.journalVoucherList().find(journalTrans_orig.Voucher))
                {
                    journalTableData.journalVoucherList().item().addTotal(journalTrans_orig,true);
                }

                if (journalTableData.journalVoucherList().item().numOfLines() == 0 &&
                    journalTableData.journalErrorVoucherList().find(journalTrans_orig.Voucher))
                {
                    journalTableData.journalErrorVoucherList().remove();
                }
            }

            if (journalTableData.journalErrorTransList().find(journalTrans_orig.LineNum))
            {
                journalTableData.journalErrorTransList().remove();
            }

            journalTableData.addTotal(journalTrans_orig,true);
            journalTableData.updateTotal();

            journalFormTable.updateFormCacheCurrent(journalTableData.journalTable(),true);
        }
        this.enableButtonsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceDeletePre</Name>
				<Source><![CDATA[
    public void datasourceDeletePre()
    {
        journalTrans_orig = journalTrans.RecId ? journalTrans.orig() : null;

        if (journalTableData && journalTableData.journalVoucherNum() && journalTrans.RecId)
        {
            if (! journalTableData.journalVoucherList().find(journalTrans_orig.Voucher))
            {
                journalTableData.journalVoucherList().addJournalTransData(journalTransData.newJournalTransDataOrig(journalTrans_orig),true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceExecuteQueryPost</Name>
				<Source><![CDATA[
    public void datasourceExecuteQueryPost()
    {
        if (! journalTrans.RecId)
        {
            this.enableButtonsActive();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitPost</Name>
				<Source><![CDATA[
    public void datasourceInitPost(JournalTransMap _journalTrans)
    {
        journalTrans        = _journalTrans;
        journalTrans_ds     = FormDataUtil::getFormDataSource(_journalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitValuePost</Name>
				<Source><![CDATA[
    public void datasourceInitValuePost()
    {
        if (journalTableData)
        {
            journalTrans.TransDate   =  (journalTrans_last.TransDate !=  datenull()) ? journalTrans_last.TransDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            if (journalTableData.journalVoucherNum() && journalTableData.journalTable().VoucherDraw == JournalVoucherDraw::Entering)
            {
                journalTransData.initVoucher(journalTrans_last.Voucher,true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitValuePre</Name>
				<Source><![CDATA[
    public void datasourceInitValuePre()
    {
        journalTrans.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceLinkActivePre</Name>
				<Source><![CDATA[
    public void datasourceLinkActivePre()
    {
        this.initJournalTransFromCaller();

        this.initDatasourceAllow();
        this.initButtons();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceMethodLineLogImage</Name>
				<Source><![CDATA[
    public container datasourceMethodLineLogImage(JournalTransMap _journalTrans)
    {
        container       imageContainer = connull();
        Exception       journalException;

        if (this.journalTableData())
        {
            if (this.journalTableData().journalVoucherNum() && _journalTrans.Voucher)
            {
                // Voucher field must be after check for journalVoucherNum above as not all transaction tables have a Voucher field
                if (this.journalTableData().journalErrorVoucherList().find(_journalTrans.Voucher))
                {
                    journalException = this.journalTableData().journalErrorVoucherList().item().Exception;
                }
            }
            else if (this.journalTableData().journalErrorTransList().find(_journalTrans.LineNum))
            {
                journalException = this.journalTableData().journalErrorTransList().item().Exception;
            }

            if (journalException)
            {
                switch (journalException)
                {
                    case Exception::Info    :
                        imageContainer = ImageReference::constructForSymbol(ImageReferenceSymbol::Info).pack();
                        break;

                    case Exception::Warning :
                        imageContainer = ImageReference::constructForSymbol(ImageReferenceSymbol::Warning).pack();
                        break;

                    case Exception::Error   :
                    default:
                        imageContainer = ImageReference::constructForSymbol(ImageReferenceSymbol::Error).pack();
                        break;
                }
            }
        }
        return imageContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceValidateWritePost</Name>
				<Source><![CDATA[
    public boolean datasourceValidateWritePost(boolean _ret)
    {
        boolean ret = _ret;

        if (! journalTrans.RecId && journalTableData.journalVoucherNum()                    &&
            journalTableData.journalVoucherNum().voucherFetched()                           &&
            journalTableData.journalVoucherNum().voucherFetched() != journalTrans.Voucher   &&
           !journalTableData.journalVoucherNum().checkChangeNumber(journalTrans.Voucher))
        {
            journalTrans.Voucher = journalTableData.journalVoucherNum().voucherFetched();
            journalTrans_ds.refresh();

            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceWritePost</Name>
				<Source><![CDATA[
    public void datasourceWritePost()
    {
        if (journalTableData.journalVoucherNum())
        {
            if (journalTrans.Voucher)
            {
                if (journalTrans.Voucher == journalTableData.journalVoucherNum().voucherFetched())
                {
                    journalTableData.journalVoucherNum().used(journalTrans.Voucher);
                }
                else
                {
                    journalTableData.journalVoucherNum().reserve(journalTrans.Voucher);
                }
            }

            if (journalTrans_orig.RecId) // update
            {
                if (journalTrans.Voucher != journalTrans_orig.Voucher && journalTrans_orig.Voucher)
                {
                    journalTableData.journalVoucherNum().release(journalTrans_orig.Voucher);
                }

                if (journalTrans_orig.Voucher && journalTableData.journalVoucherList().find(journalTrans_orig.Voucher))
                {
                    journalTableData.journalVoucherList().item().addTotal(journalTrans_orig,true);
                }
            }

            if (journalTrans.Voucher && journalTableData.journalVoucherList().find(journalTrans.Voucher))
            {
                journalTableData.journalVoucherList().item().addTotal(journalTrans,false);
            }
        }

        if (journalTrans_orig.RecId)
        {
            journalTableData.addTotal(journalTrans_orig,true);
        }
        journalTableData.addTotal(journalTrans,false);
        journalTableData.updateTotal();

        journalFormTable.updateFormCacheCurrent(journalTableData.journalTable(),true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceWritePre</Name>
				<Source><![CDATA[
    public void datasourceWritePre()
    {
        journalTrans_orig = journalTrans.RecId ? journalTrans.orig() : null;

        if (!this.canEditJournalTrans(journalTableData.journalTable()))
        {
            throw error("@SYS21497");
        }

        if (journalTableData.journalVoucherNum())
        {
            if (journalTrans_orig.RecId)
            {
                if (! journalTableData.journalVoucherList().find(journalTrans.Voucher))
                {
                    journalTableData.journalVoucherList().addJournalTransData(journalTransData,true);
                }

                if (journalTrans.Voucher != journalTrans_orig.Voucher && journalTrans_orig.Voucher)
                {
                    if (! journalTableData.journalVoucherList().find(journalTrans_orig.Voucher))
                    {
                        journalTableData.journalVoucherList().addJournalTransData(journalTransData.newJournalTransDataOrig(journalTrans_orig),true);
                    }
                }
            }
            else
            {
                if (! journalTableData.journalVoucherList().find(journalTrans.Voucher))
                {
                    journalTableData.journalVoucherList().addJournalTransData(journalTransData,journalTrans.Voucher != journalTableData.journalVoucherNum().voucherFetched());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayJournalNumOfLines</Name>
				<Source><![CDATA[
    public JournalNumOfLines displayJournalNumOfLines(JournalTransMap _journalTrans)
    {
        if (journalTableData)
        {
            return journalTableData.journalTable().NumOfLines;
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVoucherNumOfLines</Name>
				<Source><![CDATA[
    public JournalNumOfLines displayVoucherNumOfLines(JournalTransMap _journalTrans)
    {
        JournalVoucherObject  voucherObject;
        JournalVoucherList    voucherList;

        if (journalTableData &&
            journalTableData.journalVoucherNum() && journalTrans.Voucher)
        {
            voucherList = journalTableData.journalVoucherList();

            if (! voucherList.find(_journalTrans.Voucher))
            {
                if (_journalTrans.RecId && voucherList.addJournalTransData(journalTableData.journalStatic().newJournalTransData(_journalTrans,journalTableData),true))
                {
                    voucherObject = voucherList.item();
                }
            }
            else
            {
                voucherObject = voucherList.item();
            }

            return voucherObject ? voucherObject.numOfLines() : 0;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsActive</Name>
				<Source><![CDATA[
    protected void enableButtonsActive()
    {
        if (journalTransData && journalTableData)
        {
            JournalTableMap journalTable = journalTableData.journalTable();
            boolean enabled = journalTable.JournalNameId && journalFormTable.isJournalFree();

            if (ctrlCheckJournal)
            {
                ctrlCheckJournal.enabled(enabled && !journalTable.Posted);
            }

            if (ctrlPostJournal)
            {
                ctrlPostJournal.enabled(enabled && !journalTable.Posted);
            }

            if (ctrlInfolog)
            {
                ctrlInfolog.enabled(journalTransData.hasErrors());
            }

            if (formHasMethodEnableButtonsActive == UnknownNoYes::Unknown)
            {
                formHasMethodEnableButtonsActive = formHasMethod(formRun,identifierStr(enableButtonsActive)) ? UnknownNoYes::Yes : UnknownNoYes::No;
            }

            if (formHasMethodEnableButtonsActive == UnknownNoYes::Yes)
            {
                formRunObject.enableButtonsActive();
            }
        }
        else
        {
            if (ctrlCheckJournal)
            {
                ctrlCheckJournal.enabled(false);
            }

            if (ctrlPostJournal)
            {
                ctrlPostJournal.enabled(false);
            }

            if (ctrlInfolog)
            {
                ctrlInfolog.enabled(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFieldsActive</Name>
				<Source><![CDATA[
    public void enableFieldsActive()
    {
        if (journalTransData)
        {
            if (formHasMethodEnableFieldsActive == UnknownNoYes::Unknown)
            {
                formHasMethodEnableFieldsActive = formHasMethod(formRun,identifierStr(enableFieldsActive)) ? UnknownNoYes::Yes : UnknownNoYes::No;
            }

            if (formHasMethodEnableFieldsActive == UnknownNoYes::Yes)
            {
                formRunObject.enableFieldsActive();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedTransDatePost</Name>
				<Source><![CDATA[
    public void fieldModifiedTransDatePost()
    {
        if (journalTableData.journalVoucherNum())
        {
            if (journalTableData.journalTable().VoucherDraw == JournalVoucherDraw::Entering)
            {
                journalTransData.initVoucher(journalTrans_last.Voucher,true);
            }
            else
            {
                journalTrans.Voucher = '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecord</Name>
				<Source><![CDATA[
    public void findRecord(JournalTransMap _journalTrans)
    {
        journalTrans_ds.formRun().args().lookupRecord(_journalTrans);
        journalTrans_ds.research(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formClosePre</Name>
				<Source><![CDATA[
    public void formClosePre()
    {
        journalFormTable.formRunLines(null);

        if (journalTableData)
        {
            if (journalTableData.journalVoucherNum())
            {
                journalTableData.journalVoucherNum().abort();
            }

            // Avoid updating posted journals. It bumps the change tracking version.
            if (this.allowEditAndCreateLines())
            {
                this.updateJournalTableBlock(JournalBlockLevel::InUse,JournalBlockLevel::None);
            }

            journalFormTable.updateFormCacheCurrent(journalTableData.journalTable(),true);
            journalFormTable.datasourceActivePre();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    public void formInitPost()
    {
        initJournalTypeId = journalFormTable.journalTypeId();
        // <GCN>
        if (! SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN]) || formRun.name() != formStr(LedgerJournalVoucher_CN))
        {
            // </GCN>
            this.initJournalTransFromCaller();
            // <GCN>
        }
        // </GCN>

        if (journalTableData && journalTableData.journalVoucherNum())
        {
            if (ctrlVoucherGrid)
            {
                ctrlVoucherGrid.visible(journalTableData.journalVoucherNum().allowEdit() && (journalTableData.journalTable().VoucherDraw == JournalVoucherDraw::Entering ? true : false));
            }

            if (ctrlVoucherTab)
            {
                ctrlVoucherTab.allowEdit(journalTableData.journalVoucherNum().allowEdit());
            }
        }

        if (ctrlLineLogImage)
        {
            ctrlLineLogImage.imageList(imageListAppl.imageList());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalFormTable</Name>
				<Source><![CDATA[
    public JournalForm getJournalFormTable()
    {
        return journalFormTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initButtons</Name>
				<Source><![CDATA[
    protected void initButtons()
    {
        if (formHasMethodInitButtons == UnknownNoYes::Unknown)
        {
            formHasMethodInitButtons = formHasMethod(formRun,identifierStr(initButtons)) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        if (formHasMethodInitButtons == UnknownNoYes::Yes)
        {
            formRunObject.initButtons();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDatasourceAllow</Name>
				<Source><![CDATA[
    protected void initDatasourceAllow()
    {
        if (journalTrans_ds)
        {
            boolean allowCreateEdit = this.allowEditAndCreateLines();
            boolean allowEditOnly   = this.allowEditOnly();

            journalTrans_ds.allowCreate(allowCreateEdit && !allowEditOnly);
            journalTrans_ds.allowEdit(allowCreateEdit);
            journalTrans_ds.allowDelete(journalTableData && !allowEditOnly && journalFormTable.IsJournalFree());
        }

        if (formHasMethodInitDatasourceAllow == UnknownNoYes::Unknown)
        {
            formHasMethodInitDatasourceAllow = formHasMethod(formRun,identifierStr(initDatasourceAllow)) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        if (formHasMethodInitDatasourceAllow == UnknownNoYes::Yes)
        {
            formRunObject.initDatasourceAllow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerHasMethod</Name>
				<Source><![CDATA[
    private boolean callerHasMethod(Object _callerObject, IdentifierName _methodName)
    {
        boolean result;
        
        FormRun callerForm = _callerObject as FormRun;
        if (callerForm)
        {
            result = formHasMethod(callerForm, identifierStr(journalForm));
        }
        else if (_callerObject)
        {
            SysDictClass dictClass = new SysDictClass(classIdGet(_callerObject));
            result = dictClass.hasObjectMethod(_methodName);
        }
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalFormTable</Name>
				<Source><![CDATA[
    protected void initJournalFormTable()
    {
        object callerObject = formRun.args().caller();
        if (callerObject &&
                this.callerHasMethod(callerObject, identifierStr(journalForm)))
        {
            journalFormTable = callerObject.journalForm();
            journalFormTable.formRunLines(formRun);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditJournalTrans</Name>
				<Source><![CDATA[
    protected boolean canEditJournalTrans(JournalTableMap _jourTable)
    {
        return !_jourTable.Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editViewModeChanged</Name>
				<Source><![CDATA[
    public void editViewModeChanged(boolean _calledFromViewEditModeTaskHandler = true)
    {
        JournalTableMap jourTable;
        if (journalTableData)
        {
            jourTable = journalTableData.journalTable();
        }
        if (jourTable)
        {
            if (this.canEditJournalTrans(jourTable))
            {
                boolean inEditMode = !formRun.inViewMode();
                if (_calledFromViewEditModeTaskHandler)
                {
                    if (inEditMode)
                    {
                        this.updateJournalTableBlock(JournalBlockLevel::None,JournalBlockLevel::InUse);
                        journalFormTable.updateFormCacheCurrent(jourTable);
                    }
                    else
                    {
                        this.updateJournalTableBlock(JournalBlockLevel::InUse,JournalBlockLevel::None);
                        journalFormTable.updateFormCacheJournalTable(jourTable,true);
                    }
                }
                else
                {
                    if (inEditMode)
                    {
                        if (!jourTable.SessionId)
                        {
                            this.updateJournalTableBlock(JournalBlockLevel::None,JournalBlockLevel::InUse);
                            journalFormTable.updateFormCacheCurrent(jourTable);
                        }
                        else if (jourTable.SessionId != sessionId())
                        {
                            // Already in use
                            if (journalTableData.canBeAutoUnlocked(inEditMode))
                            {
                                this.updateJournalTableBlock(JournalBlockLevel::None,JournalBlockLevel::InUse);
                                journalFormTable.updateFormCacheCurrent(jourTable);
                            }
                            else
                            {
                                error(strFmt("@SYS18418", jourTable.JournalId, new xSession(jourTable.SessionId).userId()));
                            }
                        }
                    }
                    else if (jourTable.SessionId && (jourTable.SessionId == sessionId() || journalTableData.canBeAutoUnlocked(inEditMode)))
                    {
                        this.updateJournalTableBlock(JournalBlockLevel::InUse,JournalBlockLevel::None);
                        journalFormTable.updateFormCacheJournalTable(jourTable,true);
                    }
                }
            }
            if (journalTrans_ds)
            {
                this.initDatasourceAllow();
                this.enableButtonsActive();
                this.enableFieldsActive();
            }
            journalFormTable.initDatasourceAllow();
            journalFormTable.enableButtonsActive(false);
            journalFormTable.enableFieldsActive();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the class after a journal table record is deleted.
    /// </summary>
    public void recordDeleted()
    {
        journalTableData = null;
        journalTransData = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalTableBlock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the block level on the journals and allows system blocked journals to be skipped so block level is not changed.
    /// </summary>
    /// <param name = "_fromLevel">The previous block level.</param>
    /// <param name = "_toLevel">The new block level.</param>
    protected void updateJournalTableBlock(JournalBlockLevel _fromLevel, JournalBlockLevel _toLevel)
    {
        const boolean updateTotals = true;
        const boolean allowSkippingBlockingOfSystemBlockedJournals = true;

        journalTableData.updateBlock(_fromLevel, _toLevel, updateTotals, allowSkippingBlockingOfSystemBlockedJournals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalTransFromCaller</Name>
				<Source><![CDATA[
    protected void initJournalTransFromCaller()
    {
        JournalTableData journalTableDataFromHeader = journalFormTable.journalTableData();
        JournalTableMap journalTableFromHeader;

        if (journalTableDataFromHeader)
        {
            journalTableDataFromHeader.journalTable().reread();
            //Note that the journalTableFromHeader will lose information about whether it came from a datasource since data() is not copying that information
            journalTableFromHeader = journalTableDataFromHeader.journalTable().data();
        }

        boolean emptyJournal = !journalTableData || (journalTableData && !journalTableFromHeader.RecId);
        boolean journalIdChanged = journalTableData && journalTableFromHeader.JournalId && journalTableData.journalTable().JournalId != journalTableFromHeader.JournalId;
        if (emptyJournal || journalIdChanged)
        {
            if (journalTableData)
            {
                JournalTableMap jourTable = journalTableData.journalTable();
                if (jourTable)
                {
                    int journalUsedBySessionId = jourTable.SessionId;
                    if (   journalUsedBySessionId
                        && (!isSessionActive(journalUsedBySessionId,jourTable.SessionLoginDateTime) || journalUsedBySessionId == sessionId()))
                    {
                        this.updateJournalTableBlock(JournalBlockLevel::InUse,JournalBlockLevel::None);
                        journalFormTable.updateFormCacheJournalTable(jourTable,true);
                    }
                }

                if (journalTableData.journalVoucherNum())
                {
                    journalTableData.journalVoucherNum().abort();
                }
                journalTableData = null;
                journalTransData = null;
            }

            if (journalTableFromHeader.RecId)
            {
                journalTableData    = JournalTableData::newTable(journalTableFromHeader);
                journalTransData    = journalTableData.journalStatic().newJournalTransData(journalTrans,journalTableData);

                try
                {
                    this.editViewModeChanged(false);
                }
                catch (Exception::Error)
                {
                    journalFormTable.formRunLines(null);

                    ttsbegin;

                    journalFormTable.updateFormCacheCurrent(journalTableData.journalStatic().findJournalTable(journalTableFromHeader.JournalId,true),true);
                    if (journalFormTable.journalTable_DS())
                    {
                        journalFormTable.journalTable_DS().active();
                    }

                    ttscommit;

                    if (journalTableData.journalVoucherNum())
                    {
                        journalTableData.journalVoucherNum().abort();
                    }

                    if (!keepFormOpenIfLockCannotBeAcquired)
                    {
                        journalTableData = null;
                        formRun.close();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTrans_DS</Name>
				<Source><![CDATA[
    public FormDataSource journalTrans_DS()
    {
        return journalTrans_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTransData</Name>
				<Source><![CDATA[
    public JournalTransData journalTransData(JournalTransData _data = journalTransData)
    {
        journalTransData = _data;
        return journalTransData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FormRun _formRun)
    {
        formRun         = _formRun;
        formRunObject   = _formRun;
        // <GCN>
        if (! SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN]) || _formRun.name() != formStr(LedgerJournalVoucher_CN))
        {
            // </GCN>

            if (formRun.args().caller() && formRun.args().dataset())
            {
                this.initJournalFormTable();
            }

            // <GCN>
        }
        // </GCN>

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalFormTable</Name>
				<Source><![CDATA[
    public JournalFormTable parmJournalFormTable(JournalFormTable _journalFormTable = journalFormTable)
    {
        journalFormTable = _journalFormTable;

        // The header and lines form are combined, in this mode do
        // not close the combined form when a lock cannot be obtained.
        if (journalFormTable.formRun().name() == formRun.name())
        {
            keepFormOpenIfLockCannotBeAcquired = true;
        }

        return journalFormTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCheckJournal</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlCheckJournal(FormFunctionButtonControl _checkJournal = ctrlCheckJournal)
    {
        ctrlCheckJournal = _checkJournal;
        return ctrlCheckJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlInfolog</Name>
				<Source><![CDATA[
    public FormButtonControl parmCtrlInfolog(FormButtonControl _infolog = ctrlInfolog)
    {
        ctrlInfolog = _infolog;
        return ctrlInfolog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlLineLogImage</Name>
				<Source><![CDATA[
    public FormWindowControl parmCtrlLineLogImage(FormWindowControl _lineLogImage = ctrlLineLogImage)
    {
        ctrlLineLogImage = _lineLogImage;
        return ctrlLineLogImage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlPostJournal</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlPostJournal(FormFunctionButtonControl _postJournal = ctrlPostJournal)
    {
        ctrlPostJournal = _postJournal;
        return ctrlPostJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlVoucherGrid</Name>
				<Source><![CDATA[
    public FormStringControl parmCtrlVoucherGrid(FormStringControl _voucherGrid = ctrlVoucherGrid)
    {
        ctrlVoucherGrid = _voucherGrid;
        return ctrlVoucherGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlVoucherTab</Name>
				<Source><![CDATA[
    public FormStringControl parmCtrlVoucherTab(FormStringControl _voucherTab = ctrlVoucherTab)
    {
        ctrlVoucherTab = _voucherTab;
        return ctrlVoucherTab;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runbaseMainCancel</Name>
				<Source><![CDATA[
    public void runbaseMainCancel(JournalId _journalId)
    {
        if (journalTableData && (!_journalId || _journalId == this.journalTable().JournalId))
        {
            journalTableData.updateBlock(JournalBlockLevel::System,JournalBlockLevel::InUse,false);

            journalFormTable.updateFormCacheCurrent(journalTableData.journalTable(),true);

            this.initDatasourceAllow();
            this.initButtons();
        }
        else
        {
            if (this.getJournalFormTable())
            {
                this.getJournalFormTable().runbaseMainCancel(_journalId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runbaseMainEnd</Name>
				<Source><![CDATA[
    public void runbaseMainEnd(
        JournalRunbaseCallbackable  _runBaseBatch,
        boolean                     _fromCatchError)
    {
        Integer     numOfTransferLines;
        JournalId   transferJournalId;
        boolean     hasChangedNumOfLines;
        boolean     hasChangedLines;
        boolean     hasChangedErrorList;
        container   packJournalErrorTransList;
        container   packJournalErrorVoucherList;
        container   runBaseBatchResult;

        if (!journalTableData)
        {
            return;
        }

        runBaseBatchResult = _runBaseBatch.packResult();

        if (runBaseBatchResult == conNull())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        [numOfTransferLines,
         transferJournalId,
         hasChangedNumOfLines,
         hasChangedLines,
         hasChangedErrorList,
         packJournalErrorTransList,
         packJournalErrorVoucherList] = runBaseBatchResult;

        journalTableData.journalTable().reread();
        boolean posted = journalTableData.journalTable().Posted;
        journalTableData.updateBlock(JournalBlockLevel::System, posted?JournalBlockLevel::None : JournalBlockLevel::InUse, false);
        journalTableData.initTotal();
        journalFormTable.updateFormCacheCurrent(journalTableData.journalTable(),true);

        if (! _fromCatchError && numOfTransferLines > 0)
        {
            this.updateFormCacheTransferJournal(transferJournalId);

            return;
        }

        if (! _fromCatchError)
        {
            if (hasChangedNumOfLines)
            {
                if (journalTableData.journalVoucherNum())
                {
                    journalTableData.journalVoucherNum().abort();
                }

                journalTableData.journalVoucherList(null);
                this.journalTrans_DS().executeQuery();
            }
            else if (hasChangedLines)
            {
                journalTableData.journalVoucherList(null);
                this.updateFormCache(false);
            }

            if (hasChangedErrorList)
            {
                journalTableData.journalErrorTransList(null).unPack(packJournalErrorTransList);
                journalTableData.journalErrorVoucherList(null).unPack(packJournalErrorVoucherList);
            }
        }

        this.initDatasourceAllow();
        this.initButtons();
        this.enableButtonsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runbaseMainStart</Name>
				<Source><![CDATA[
    public void runbaseMainStart()
    {
        if (!journalTableData)
        {
            return;
        }

        infolog.infoActionObject(this);

        journalTableData.updateBlock(JournalBlockLevel::None,JournalBlockLevel::System,true);
        journalFormTable.updateFormCacheCurrent(journalTableData.journalTable(),true);

        this.initDatasourceAllow();
        this.initButtons();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormCache</Name>
				<Source><![CDATA[
    protected void updateFormCache(boolean _reDraw)
    {
        JournalTransMap     journalTransFormCache;
        JournalTransMap     journalTransTmp;

        if (journalTableData)
        {
            journalTransFormCache = journalTrans_ds.getFirst(0,false);
            while (journalTransFormCache)
            {
                journalTransTmp = journalTableData.journalStatic().findJournalTrans(journalTransFormCache.JournalId,journalTransFormCache.LineNum);
                if (journalTransTmp.RecId)
                {
                    journalTransFormCache.data(journalTransTmp);

                    if (journalTransTmp.LineNum == journalTrans.LineNum)
                    {
                        journalTrans.data(journalTransTmp);
                        journalTrans_ds.setCurrent();
                    }
                }

                journalTransFormCache = journalTrans_ds.getNext();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormCacheTransferJournal</Name>
				<Source><![CDATA[
    protected void updateFormCacheTransferJournal(JournalId _journalIdTransfer)
    {
        Args            args;
        Object          object;

        if (journalFormTable && journalTableData)
        {
            journalFormTable.updateFormCacheCurrent(this.journalTableData().journalStatic().findJournalTable(_journalIdTransfer));
            journalFormTable.journalTable_DS().write();
            journalFormTable.journalTable_DS().formRun().args().lookupRecord(this.journalTableData().journalTable());
            journalFormTable.journalTable_DS().research(false);

            FormFunctionButtonControl linesFormControl = journalFormTable.parmCtrlLines();
            if (linesFormControl)
            {
                args = new Args();
                args.caller(journalFormTable.formRun());
                args.record(journalFormTable.journalTable_DS().cursor());

                linesFormControl.menufunction().run(args);

                object = journalFormTable.formRunLines();

                if (object)
                {
                    infolog.infoActionObject(object.journalForm());
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>