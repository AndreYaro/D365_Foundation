<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdvancedJournalPostBatchTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Batch job to process, update and post the proj advanced journal header after proj advanced journal lines are processed.
/// </summary>
public class ProjAdvancedJournalPostBatchTask extends RunBaseBatch
{
    ProjAdvancedJournalRecId projAdvancedJournalRecId;
    private container projAdvancedJournalList;

    private Integer version;

    #define.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        projAdvancedJournalList
    #ENDMACRO

    #define.Version1(1)
    #LOCALMACRO.List1
        projAdvancedJournalRecId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container retVal = [#CurrentVersion, #CurrentList];

        switch (version)
        {
            case #CurrentVersion:
                retVal = [#CurrentVersion, #CurrentList];
                break;

            case #Version1:
                retVal = [#Version1, #List1];
                break;

            default:
                break;
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container  _packedClass)
    {
        boolean retVal = false;

        version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                retVal = true;
                break;

            case #Version1 :
                [version, #List1] = _packedClass;
                retVal = true;
                break;

            default :
                break;
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suppresses the retrieving of the last values.
    /// </summary>
    /// <remarks>
    /// This class must always run with the currently passed values. Therefore, no last values are
    /// retrieved from the <see cref="T:SysLastValue" /> table.
    /// </remarks>
    public void getLast()
    {
        // This is a RunBaseBatch derivative class. Manually restore the user's settings on the batch tab since
        // super() is not being called.
        xSysLastValue::getLast(this.batchInfo());

        // Do not get last values for this batch task
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(classStr(ProjAdvancedJournalPostBatchTask));
        using (var activityContext = logger.integrationJournalActivity().postAdvancedJournalContext())
        {
            ProjAdvancedJournal journal;
            switch (version)
            {
                case #Version1 :
                    journal = ProjAdvancedJournal::find(projAdvancedJournalRecId);
                    this.postJournal(journal, logger);
                    break;

                case #CurrentVersion :
                    int recordsLength = conLen(projAdvancedJournalList);
                    for (int recordIndex = 1; recordIndex <= recordsLength; recordIndex++)
                    {
                        try
                        {
                            journal = ProjAdvancedJournal::findNoCache(conPeek(projAdvancedJournalList, recordIndex));
                            this.postJournal(journal, logger);
                        }
                        catch (Exception::TransientSqlConnectionError)
                        {
                            int currentRetryCount = xSession::currentRetryCount();

                            logger.logError(strFmt("@Proj:JournalPostingExceptionEncountered", journal.RecId, journal.DataAreaId, Exception::TransientSqlConnectionError, currentRetryCount));

                            if (ProjTransientSQLConnectionRetryProvider::retryTransientSqlConnectionError())
                            {
                                retry;
                            }
                            else
                            {
                                throw;
                            }
                        }
                        catch (Exception::UpdateConflict) // Fetch latest data and try to update its status to Error.
                        {
                            int currentRetryCount = xSession::currentRetryCount();

                            logger.logError(strFmt("@Proj:JournalPostingExceptionEncountered", journal.ProjAdvancedJournalId, journal.DataAreaId, Exception::UpdateConflict, currentRetryCount));

                            if (appl.ttsLevel() == 0 && currentRetryCount < #RetryNum)
                            {
                                journal.reread();
                                retry;
                            }
                            else
                            {
                                throw;
                            }
                        }
                        catch
                        {
                            // Move on to the next journal
                            continue;
                        }
                    }
                    break;
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    private void postJournal(ProjAdvancedJournal _projAdvancedJournal, ProjOpsIntegrationLogger _logger)
    {
        using (var activityContext = _logger.integrationJournalActivity().postAdvancedJournalContext())
        {
            Microsoft.Dynamics.Ax.Xpp.ErrorException xppEx;
            int numOfLines = _projAdvancedJournal.numOfLines();
            boolean isEnhancedPostingEnabled = FeatureStateProvider::isFeatureEnabled(ProjAdvancedJournalPostingEnhancementFeature::instance());

            activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::ProductReceiptParmStatus, any2Str(VendParameters::find().PostPackingSlip));
            activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::AdvancedJournalId, _projAdvancedJournal.ProjAdvancedJournalId);
            activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::NumOfJournalLines, int2Str(numOfLines));
            activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ActionProperty, 'Processing batch header task');
            activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::IsBatch, 'True');
            activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::EnhancedPosting, any2Str(isEnhancedPostingEnabled));

            try
            {
                ProjAdvancedJournalPost projAdvancedJournalPost =  ProjAdvancedJournalPost::construct(_projAdvancedJournal);
                projAdvancedJournalPost.processProjAdvancedJournal();
            }
            catch (xppEx)
            {
                int currRetryCount = xSession::currentRetryCount();
                _logger.logError(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), _projAdvancedJournal.ProjAdvancedJournalId, numOfLines, xppEx.Message, currRetryCount));
                
                if (isEnhancedPostingEnabled)
                {
                    this.updateJournalStatusToError(_projAdvancedJournal, _logger);
                }
                else
                {
                    boolean enableProjAdvancedJournalErrorTransferFeature = FeatureStateProvider::isFeatureEnabled(ProjEnableAdvancedJournalErrorTransferFeature::instance());
                
                    if (!enableProjAdvancedJournalErrorTransferFeature)
                    {
                        throw xppEx;
                    }
                }
            }
            catch
            {
                if (isEnhancedPostingEnabled)
                {
                    this.updateJournalStatusToError(_projAdvancedJournal, _logger);
                }
                else
                {
                    throw;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalStatusToError</Name>
				<Source><![CDATA[
    private void updateJournalStatusToError(ProjAdvancedJournal _projAdvancedJournal, ProjOpsIntegrationLogger _logger)
    {
        try
        {
            _projAdvancedJournal.reread();
            _projAdvancedJournal.updateJournalStatus(ProjAdvancedJournalStatus::Processing, ProjAdvancedJournalStatus::Error);
        }
        catch
        {
            _logger.logError(strFmt("@Proj:JournalStatusUpdateFailed", _projAdvancedJournal.ProjAdvancedJournalId, _projAdvancedJournal.DataAreaId,
                                    ProjAdvancedJournalStatus::Processing, ProjAdvancedJournalStatus::Error, _projAdvancedJournal.Status));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjAdvancedJournalRecId</Name>
				<Source><![CDATA[
    public ProjAdvancedJournalRecId parmProjAdvancedJournalRecId(ProjAdvancedJournalRecId _projAdvancedJournalRecId = projAdvancedJournalRecId)
    {
        projAdvancedJournalRecId = _projAdvancedJournalRecId;
        return projAdvancedJournalRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjAdvancedJournalList</Name>
				<Source><![CDATA[
    public container parmProjAdvancedJournalList(container _journalList = projAdvancedJournalList)
    {
        projAdvancedJournalList = _journalList;
        return projAdvancedJournalList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjAdvancedJournalPostBatchTask construct(ProjAdvancedJournalRecId _projAdvancedJournalRecId)
    {
        ProjAdvancedJournalPostBatchTask batch = new ProjAdvancedJournalPostBatchTask();
        batch.parmProjAdvancedJournalRecId(_projAdvancedJournalRecId);
        batch.version = #Version1;

        return batch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructV2</Name>
				<Source><![CDATA[
    public static ProjAdvancedJournalPostBatchTask constructV2(container _journalList)
    {
        ProjAdvancedJournalPostBatchTask batch = new ProjAdvancedJournalPostBatchTask();
        batch.parmProjAdvancedJournalList(_journalList);
        batch.version = #CurrentVersion;

        return batch;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>