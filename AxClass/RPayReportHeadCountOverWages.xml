<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayReportHeadCountOverWages</Name>
	<SourceCode>
		<Declaration><![CDATA[
final public class RPayReportHeadCountOverWages extends XMLExcelReport_RU implements BatchRetryable
{
    Date                            reportDate;
    ReportPeriod_RU                 payPeriod;
    RHRMEmplId                      responsibleId;

    DialogField                     dfReportDate;
    DialogField                     dfPayPeriod;
    DialogField                     dfResponsibleId;

    RPayCounterUnit                 fundSalary;
    RPayTimeGroupCode               factTimeGroupId;
    RPayTimeGroupCode               vacationTimeGroupId;
    RPayTimeGroupCode               sickTimeGroupId;
    RPayTimeGroupCode               idleTimeGroupId;
    RPayTimeGroupCode               partTimeGroupId;
    RPayGroup                       groupWorkers;
    RPayRateCode                    wagesRateCode;
    RPayRateCode                    minWageRateCode;
    RPayRateCode                    maxVacationDaysRateCode, maxIdleDaysRateCode, maxNotWorkedHoursRateCode;
    RPayRateValue                   minWageAmount, maxVacationDays, maxIdleDays, maxNotWorkedHours;

    int                             headCountBelowMinWage;

    Map                             mapWageRanges;
    MapIterator                     it;

    int                             totalHeadCount;
    RPayAmount                      totalWageAmount;

    #define.TenKopecks(0.1)
    #define.Title('TITLE')
    #define.Body('BODY')
    #define.FOOTER('FOOTER')
    #define.pageWidth(158)

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        reportDate,
        payPeriod,
        responsibleId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>arrangeWageAmount</Name>
				<Source><![CDATA[
    private void arrangeWageAmount(RPayAmount _payAmount)
    {
        RPayAmount  rangeLow,
                    rangeHi;
        int         rangeHeadCount;
        RPayAmount  rangeWageAmount;

        _payAmount = round(_payAmount, #TenKopecks);

        it.begin();

        while (it.more())
        {
            [rangeLow, rangeHi] = it.key();

            if (_payAmount && rangeLow <= _payAmount && _payAmount <= rangeHi)
            {
                [rangeHeadCount, rangeWageAmount] = it.value();
                mapWageRanges.insert([rangeLow, rangeHi], [rangeHeadCount + 1, rangeWageAmount + _payAmount]);

                if (rangeLow <= minWageAmount && minWageAmount <= rangeHi && _payAmount < minWageAmount)
                {
                    headCountBelowMinWage++;
                }

                totalHeadCount ++;
                totalWageAmount += _payAmount;

                break;
            }
            it.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(15)
        return max(#minHeight, this.getRangeHeight(_bookmark));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndPrepareParameters</Name>
				<Source><![CDATA[
    private boolean checkAndPrepareParameters()
    {
        boolean ret = true;

        setPrefix("@RUP2727");

        fundSalary                = RPayReportTuningTable::templateReportParameter(RPayReportName::HeadCountOverWages, 1);
        factTimeGroupId           = RPayReportTuningTable::templateReportParameter(RPayReportName::HeadCountOverWages, 2);
        vacationTimeGroupId       = RPayReportTuningTable::templateReportParameter(RPayReportName::HeadCountOverWages, 3);
        maxVacationDaysRateCode   = RPayReportTuningTable::templateReportParameter(RPayReportName::HeadCountOverWages, 4);
        sickTimeGroupId           = RPayReportTuningTable::templateReportParameter(RPayReportName::HeadCountOverWages, 5);
        idleTimeGroupId           = RPayReportTuningTable::templateReportParameter(RPayReportName::HeadCountOverWages, 6);
        maxIdleDaysRateCode       = RPayReportTuningTable::templateReportParameter(RPayReportName::HeadCountOverWages, 7);
        partTimeGroupId           = RPayReportTuningTable::templateReportParameter(RPayReportName::HeadCountOverWages, 8);
        maxNotWorkedHoursRateCode = RPayReportTuningTable::templateReportParameter(RPayReportName::HeadCountOverWages, 9);
        groupWorkers              = RPayReportTuningTable::templateReportParameter(RPayReportName::HeadCountOverWages, 10);
        wagesRateCode             = RPayReportTuningTable::templateReportParameter(RPayReportName::HeadCountOverWages, 11);
        minWageRateCode           = RPayReportTuningTable::templateReportParameter(RPayReportName::HeadCountOverWages, 12);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAverageQuantity</Name>
				<Source><![CDATA[
    private boolean checkAverageQuantity()
    {
        boolean ret = true;

        if (groupWorkers && payPeriod && ! RPayAverageQuantity::find(groupWorkers, payPeriod))
        {
            ret = checkFailed(strFmt("@RUP2734", groupWorkers, date2StrUsr(payPeriod, DateFlags::None))) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        currentHeight = 0;

        this.initSectionMap();

        this.setCurrentWorksheetNum(1, #pageWidth);

        this.execute(#Title);

        this.execute(#Body);

        this.execute(#Footer);

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateEndHalfYear</Name>
				<Source><![CDATA[
    private date dateEndHalfYear(date _transDate)
    {
        _transDate = dateMthFwd(_transDate, 6 - (mthOfYr(_transDate) mod 6));

        return dateEndMth(_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateStartHalfYear</Name>
				<Source><![CDATA[
    private date dateStartHalfYear(date _transDate)
    {
        _transDate = dateMthFwd(_transDate, -((mthOfYr(_transDate) - 1) mod 6));

        return dateStartMth(_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog dialog = super();

        dfReportDate    = dialog.addFieldValue(extendedTypeStr(FromDate), reportDate, "@SYS117650", "@SYS117650");
        dfPayPeriod     = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU), payPeriod, "@RUP1123", "@RUP1123");
        dfResponsibleId = dialog.addFieldValue(extendedTypeStr(RHRMEmplId), responsibleId, "@SYS30933", "@RUP2143");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'RPayReportHeadCountOverWages';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    #define.Dash('_')
    protected Filename fileNamePostfix()
    {
        return #Dash + date2StrUsr(payPeriod, DateFlags::None) + #Dash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    private void fillBody()
    {
        #define.startRow(35)
        #define.templateTotalRow(53)
        #define.templateAvgQty(55)
        #define.templateSumFund(56)
        #define.emplCountColumn("AV")
        #define.wageColumn("CB")

        RPayAmount  wageAmount;
        real        value;
        int         emplCount;
        int         row = #startRow;

        void checkZeroValue(real _value, int _row)
        {
            if (! _value)
            {
                warning(strfmt("@RUP3277", _row));
            }
        }

        this.selectEmployees();

        it.begin();

        while (it.more())
        {
            [emplCount, wageAmount] = it.value();
            document.insertValue(#emplCountColumn + int2Str(row), emplCount);
            document.insertValue(#wageColumn      + int2Str(row), wageAmount);
            it.next();
            row++;
        }

        this.insertValueToSection('TotalHeadCount',       totalHeadCount);
        this.insertValueToSection('TotalWageAmount',      totalWageAmount);

        checkZeroValue(totalHeadCount, #templateTotalRow);
        if (totalHeadCount)
        {
            checkZeroValue(totalWageAmount, #templateTotalRow);
        }

        this.insertValueToSection('EmplCountBelowMinWage', headCountBelowMinWage);

        value = RPayReportP4_2013::getAverageQty(payPeriod, payPeriod, groupWorkers);
        this.insertValueToSection('RPH_AverageD', value);
        checkZeroValue(value, #templateAvgQty);

        value = RPayReportP4_2013::getFundAmountBySourceDate(payPeriod, payPeriod, fundSalary, groupWorkers);
        this.insertValueToSection('RPT_SumFundDPay',  value);
        checkZeroValue(value, #templateSumFund);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #Title:
                this.fillTitle();
                break;
            case #Body:
                this.fillBody();
                break;
            case #Footer:
                this.fillFooter();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFooter</Name>
				<Source><![CDATA[
    private void fillFooter()
    {
        RHRMEmplTable   emplTable  = RHRMEmplTable::find(responsibleId);

        this.insertValueToSection('ET_UserTitle', emplTable.titleId());
        this.insertValueToSection('ET_UserName',  emplTable.personTable().fio());
        this.insertValueToSection('ET_UserPhone', emplTable.personTable().hcmWorker().phone());

        this.insertValueToSection('SYSDateD',     dayOfMth(reportDate));
        this.insertValueToSection('SYSDateM',     RNumDateInWordConverter::construct().date2strMonth(reportDate));
        this.insertValueToSection('SYSDateY',     substr(int2str(year(reportDate)), 3, 2));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTitle</Name>
				<Source><![CDATA[
    private void fillTitle()
    {
        CompanyInfo companyInfo = CompanyInfo::find();

        this.insertValueToSection('CompanyName',      strFmt("@SYS70938", companyInfo.RFullName, companyInfo.Name));
        this.insertValueToSection('CompanyAddress',   strReplace(companyInfo.postalAddress().Address, '\n', ' '));
        this.insertValueToSection('CodeOKPO_RU',      CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo, reportDate));
        this.insertValueToSection('Period',           strLwr(strFmt("@GLS113557",
                                                             strFmt("@GLS105048",
                                                                    mthName(mthofyr(payPeriod)),
                                                                    year(payPeriod)))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            reportDate    = dfReportDate.value();
            payPeriod     = dfPayPeriod.value();
            responsibleId = dfResponsibleId.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWageAmount</Name>
				<Source><![CDATA[
    private RPayAmount getWageAmount(RHRMEmplId _emplId)
    {
        RHRMEmplTable       emplTable;
        RPayTable       payTable;
        RPayTrans       payTrans;
        RPayFundMember  payFundMember;

        RPayAmount      amount, hoursWorked, hoursScheduled;
        FromDate        startDate, endDate, currentDate;
        container       c;

        if (_emplId)
        {
            select sum(Amount) from payTrans
                where payTrans.SourceDate == payPeriod
            exists join emplTable
                 where emplTable.EmployeeId    == payTrans.Emplid &&
                       emplTable.PayMainEmplId == _emplId
            exists join RpayPeriodFrequency from payTable
                where payTable.PayCtype            == payTrans.PayCtype            &&
                      payTable.RpayPeriodFrequency != RPayPeriodFrequency::HalfYear &&
                      payTable.RpayPeriodFrequency != RPayPeriodFrequency::Quarter
            exists join payFundMember
                where payFundMember.CounterUnit == fundSalary &&
                      payFundMember.PayCostType == payTrans.PayCtype;

            amount = payTrans.Amount;

            select sum(Amount) from payTrans
                where payTrans.SourceDate == payPeriod
            exists join emplTable
                 where emplTable.EmployeeId    == payTrans.Emplid &&
                       emplTable.PayMainEmplId == _emplId
            exists join RpayPeriodFrequency from payTable
                where payTable.PayCtype            == payTrans.PayCtype &&
                      payTable.RpayPeriodFrequency == RPayPeriodFrequency::Quarter
            exists join payFundMember
                where payFundMember.CounterUnit == fundSalary &&
                      payFundMember.PayCostType == payTrans.PayCtype;

            amount += CurrencyExchangeHelper::amount(payTrans.Amount / 3);

            while select SourceDate, sum(Amount) from payTrans
                group by SourceDate
                where payTrans.SourceDate == payPeriod
            exists join emplTable
                 where emplTable.EmployeeId    == payTrans.Emplid &&
                       emplTable.PayMainEmplId == _emplId
            exists join RpayPeriodFrequency from payTable
                where payTable.PayCtype            == payTrans.PayCtype &&
                      payTable.RpayPeriodFrequency == RPayPeriodFrequency::HalfYear
            exists join payFundMember
                where payFundMember.CounterUnit     == fundSalary &&
                          payFundMember.PayCostType == payTrans.PayCtype
            {
                startDate   = this.dateStartHalfYear(payTrans.SourceDate);
                endDate     = this.dateEndHalfYear(payTrans.SourceDate);
                hoursWorked = 0;

                for (currentDate = endMth(startDate); currentDate <= endDate; currentDate = endMth(nextMth(currentDate)))
                {
                    c = RpayEmplTblSum::dayHourGroupSum(currentDate, _emplId, RPayDayHourCalc::Hour, factTimeGroupId);
                    hoursWorked += conpeek(c, 1);
                }

                hoursScheduled = RPayCalendarTable::mthWorkHours(RHRMEmplTable::find(_emplId).PayCalendarId, payPeriod, '');

                amount += (hoursWorked && hoursScheduled)? CurrencyExchangeHelper::amount(payTrans.Amount / hoursWorked * hoursScheduled) : 0;
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        boolean             ret;
        RPayRateCritTrans   wagesRateCritTrans;
        RPayRateTrans       wagesRateTrans      = RPayRateTrans::find(wagesRateCode, endMth(payPeriod));
        RPayRateValue       startCriterion;
        RPayRateCallContext context;

        ret = super();

        mapWageRanges = new Map(Types::Container, Types::Container);

        startCriterion = #TenKopecks;
        while select Criterion from wagesRateCritTrans
            order by Criterion
            where wagesRateCritTrans.RateTransRecId == wagesRateTrans.RecId
        {
            mapWageRanges.insert([startCriterion,  wagesRateCritTrans.Criterion], [0, 0]);
            startCriterion = wagesRateCritTrans.Criterion + #TenKopecks;
        }

        it = new MapIterator(mapWageRanges);
        context = RPayRateCallContext::construct(endMth(payPeriod));
        minWageAmount     = RPayRateTable::find(minWageRateCode).getValue(context);
        maxVacationDays   = RPayRateTable::find(maxVacationDaysRateCode).getValue(context);
        maxIdleDays       = RPayRateTable::find(maxIdleDaysRateCode).getValue(context);
        maxNotWorkedHours = RPayRateTable::find(maxNotWorkedHoursRateCode).getValue(context);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        reportDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#Title);
        this.addSection(#Body);
        this.addSection(#Footer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectEmployees</Name>
				<Source><![CDATA[
    private void selectEmployees()
    {
        #RPayTblConstants

        RPayGroupMember         rPayGroupMember;
        RHRMEmplTable           emplTableMain;
        RHRMEmplTable           emplTable;
        RPayTblTrans            payTblTrans;
        RPayTblDayHourTrans     rPayTblDayHourTrans;
        RPayTimeGroupMember     rPayTimeGroupMember;
        RPayHistory             payHistory;
        int                     day;
        FieldId                 fieldId;

        RPayAmount              amount;
        RPayTblDayHour          dayHour;
        container               c;

        real                    sickHours,
                                vacationDays,
                                idleDays,
                                partHours,
                                notWorkedHours;

        boolean                 isPayGroupMember,
                                isEmployed,
                                isHired,
                                isDismissed;

        while select EmployeeId from emplTableMain
            where emplTableMain.PayMainEmplId == emplTableMain.EmployeeId
        {
            isPayGroupMember    = false;
            isEmployed          = false;
            isHired             = true;
            isDismissed         = true;

            sickHours           = 0;
            vacationDays        = 0;
            idleDays            = 0;
            partHours           = 0;
            notWorkedHours      = 0;

            while select EmployeeId from emplTable
                where emplTable.PayMainEmplId == emplTableMain.EmployeeId
            {
                rPayGroupMember = RPayGroupMember::find(groupWorkers, emplTable.EmployeeId);

                isPayGroupMember = isPayGroupMember ||
                                   (rPayGroupMember &&
                                    (! rPayGroupMember.FromDate ||
                                     rPayGroupMember.FromDate <= mkdate(1, mthOfYr(payPeriod), year(payPeriod))) &&
                                    (! rPayGroupMember.ToDate ||
                                     rPayGroupMember.ToDate   >  endMth(payPeriod)));

                c = RPayHistory::getOrganizationByDateInterval(emplTable.EmployeeId, mkdate(1, mthOfYr(payPeriod), year(payPeriod)), endMth(payPeriod));
                isEmployed = isEmployed || conLen(c);

                payHistory  = RPayHistory::findLastOperation(emplTable.EmployeeId, RHRMJournalType::Receive, endMth(payPeriod) + 1);
                isHired     = isHired && (dateStartMth(payPeriod) <= payHistory.StartDate && payHistory.StartDate <= dateEndMth(payPeriod));

                payHistory  = RPayHistory::findLastOperation(emplTable.EmployeeId, RHRMJournalType::Dismiss, endMth(payPeriod) + 1);
                isDismissed = isDismissed && (dateStartMth(payPeriod) <= payHistory.StartDate && payHistory.StartDate <= dateEndMth(payPeriod));

                sickHours += RpayTblTrans::realDayHourGroup(payPeriod, emplTable.EmployeeId, RPayDayHourCalc::Hour, sickTimeGroupId);
                sickHours += RpayTblTrans::realDayHourGroup(payPeriod, emplTable.EmployeeId, RPayDayHourCalc::Day, sickTimeGroupId);

                vacationDays += RpayTblTrans::realDayHourGroup(payPeriod, emplTable.EmployeeId, RPayDayHourCalc::Day, vacationTimeGroupId);

                idleDays += RpayTblTrans::realDayHourGroup(payPeriod, emplTable.EmployeeId, RPayDayHourCalc::Day, idleTimeGroupId);

                dayHour = RpayTblTrans::realDayHourGroup(payPeriod, emplTable.EmployeeId, RPayDayHourCalc::Hour, partTimeGroupId);
                partHours += dayHour;

                if (dayHour > 0)
                {
                    while select RecId, PayCalendarId from payTblTrans
                        where payTblTrans.EmplId     == emplTable.EmployeeId &&
                              payTblTrans.SourceDate == payPeriod
                    {
                        while select rPayTblDayHourTrans
                            where rPayTblDayHourTrans.TblTransRecId == payTblTrans.RecId
                            exists join rPayTimeGroupMember
                                where rPayTimeGroupMember.PayCalendarTimeCode == rPayTblDayHourTrans.PayTblTimeCode &&
                                      rPayTimeGroupMember.TimeGroup           == partTimeGroupId
                        {
                            for (day = 1; day <= dayOfMth(endMth(payPeriod)); day ++)
                            {
                                fieldId =  fieldName2Id(tablenum(RPayTblDayHourTrans), #DayHourTransFieldPrefix + int2str(day));

                                if (rPayTblDayHourTrans.(fieldId))
                                {
                                    notWorkedHours += RPayCalendarTable::periodWorkHoursGroup(payTblTrans.PayCalendarId,
                                                                                              dateStartMth(payPeriod) + day - 1,
                                                                                              dateStartMth(payPeriod) + day - 1,
                                                                                              factTimeGroupId) - rPayTblDayHourTrans.(fieldId);
                                }
                            }
                        }
                    }
                }
            }

            if (! isPayGroupMember || ! isEmployed || isHired || isDismissed)
            {
                continue;
            }
            if (sickHours || vacationDays > maxVacationDays || idleDays > maxIdleDays || (partHours && notWorkedHours > maxNotWorkedHours))
            {
                continue;
            }
            amount = this.getWageAmount(EmplTableMain.EmployeeId);

            this.arrangeWageAmount(amount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayReportHeadCountOverWages);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        #define.titleCells(8)
        #define.footerCells(5)
        #define.bodyCells(15)

        return #titleCells + #footerCells + #bodyCells;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret)
        {
            if (! reportDate)
            {
                ret = checkFailed(strFmt("@SYS26332", "@SYS117650"));
            }

            if (! payPeriod)
            {
                ret = checkFailed(strFmt("@SYS26332", "@RUP1123"));
            }
            else
            {
                payPeriod = endMth(payPeriod);
            }

            if (! responsibleId)
            {
                ret = checkFailed(strFmt("@SYS26332", "@SYS30933"));
            }

            if (ret && endMth(reportDate) < endMth(payPeriod))
            {
                ret = checkFailed("@RUP3278");
            }

            ret = this.checkAverageQuantity() && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP2727";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPayReportHeadCountOverWages rPayReportHeadCountOverWages = new RPayReportHeadCountOverWages();

        if (rPayReportHeadCountOverWages.checkAndPrepareParameters())
        {
            if (rPayReportHeadCountOverWages.prompt())
            {
                rPayReportHeadCountOverWages.init();
                rPayReportHeadCountOverWages.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>