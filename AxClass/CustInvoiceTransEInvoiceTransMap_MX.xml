<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceTransEInvoiceTransMap_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustInvoiceTransEInvoiceTransMap_MX</c> class extends the <c>EInvoiceTransBaseMap_MX</c>
/// class to implement the mapping from the <c>CustInvoiceTrans</c> table.
/// </summary>
/// <remarks>
/// This class should be instantiated and used by the <c>CustInvoiceJourEInvoiceJourMap_MX</c> class.
/// </remarks>
public class CustInvoiceTransEInvoiceTransMap_MX extends EInvoiceTransBaseMap_MX
{
    CustInvoiceTrans    custInvoiceTrans;
    CustInvoiceJour     custInvoiceJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount of the document line.
    /// </summary>
    /// <returns>
    /// The original document line amount.
    /// </returns>
    public LineAmount amount()
    {
        return this.isPrintInMST() ? 
            custInvoiceTrans.LineAmountMST :
            custInvoiceTrans.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount of document line - <c>custInvoiceTrans</c>
    /// </summary>
    /// <returns>
    /// The original document line amount.
    /// </returns>
    public LineAmount amountCur()
    {
        return custInvoiceTrans.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode currencyCode()
    {
        return custInvoiceTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discountAmount</Name>
				<Source><![CDATA[
    public AmountCur discountAmount()
    {
        return this.isPrintInMST() ?
            custInvoiceTrans.SumLineDiscMST :
            custInvoiceTrans.SumLineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discountAmountMST</Name>
				<Source><![CDATA[
    public AmountMST discountAmountMST()
    {
        return custInvoiceTrans.SumLineDiscMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variables.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    /// A <c>CustInvoiceTrans</c> record.
    /// </param>
    protected void initCustInvoiceTrans(CustInvoiceTrans _custInvoiceTrans)
    {
        custInvoiceTrans.data(_custInvoiceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs specific initialization code.
    /// </summary>
    /// <param name="_originalJournalLine">
    /// A <c>CustInvoiceTrans</c> record.
    /// </param>
    protected void initLine(Common _originalJournalLine)
    {
        this.initCustInvoiceTrans(_originalJournalLine);

        custInvoiceJour = custInvoiceTrans.custInvoiceJour();

        super(_originalJournalLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventTransId</c> value from the posted document line.
    /// </summary>
    /// <returns>
    /// The <c>InventTransId</c> value of the original document line.
    /// </returns>
    public InventTransId inventTransId()
    {
        return custInvoiceTrans.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item ID from the posted document line.
    /// </summary>
    /// <returns>
    /// The posted document line item ID.
    /// </returns>
    public ItemId itemId()
    {
        return custInvoiceTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item name of original posted document.
    /// </summary>
    /// <returns>
    /// The posted document line item name.
    /// </returns>
    public ItemFreeTxt itemName()
    {
        return Global::strLRTrim(custInvoiceTrans.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source record ID.
    /// </summary>
    /// <returns>
    /// The source record ID.
    /// </returns>
    public RefRecId sourceRecId()
    {
        return custInvoiceTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source table ID.
    /// </summary>
    /// <returns>
    /// The source table ID.
    /// </returns>
    public RefTableId sourceTableId()
    {
        return custInvoiceTrans.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTransList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of <c>MarkupTrans</c> records that are related to each invoice line.
    /// </summary>
    /// <returns>
    /// A list of <c>MarkupTrans</c> records.
    /// </returns>
    public List markupTransList()
    {
        MarkupTrans markupTrans;
        List list = new List(Types::Record);

        while select markupTrans
            where markupTrans.TransTableId == custInvoiceTrans.TableId
                && markupTrans.TransRecId == custInvoiceTrans.RecId
        {
            list.addEnd(markupTrans);
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>noIdentification</Name>
				<Source><![CDATA[
    public str noIdentification()
    {
        if (custInvoiceTrans.SalesId && this.serialNumber())
        {
            return this.serialNumber();
        }
        else
        {
            return this.productCode();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>serialNumber</Name>
				<Source><![CDATA[
    public InventSerialId serialNumber()
    {
        InventDim inventDim = InventDim::find(custInvoiceTrans.InventDimId);
        
        return inventDim.inventSerialId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity of posted document line.
    /// </summary>
    /// <returns>
    /// The posted document line quantity.
    /// </returns>
    public Qty qty()
    {
        return custInvoiceTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the unit id of posted document line.
    /// </summary>
    /// <returns>Posted document line unit id.</returns>
    /// <remarks>
    /// Unit of the line item. For free text invoice, returns 'UN', because it is mandatory for CFDI 3.2.
    /// </remarks>
    public SalesUnit unit()
    {
        const str defaultUnitId = 'un';

        if (custInvoiceTrans.custInvoiceJour().RefNum == RefNum::Cust)
        {
            return defaultUnitId;
        }

        return custInvoiceTrans.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the price per unit of posted document line
    /// </summary>
    /// <returns>The posted document line price per unit.</returns>
    /// <remarks>
    /// Price per unit is how much each item unit costs
    /// </remarks>
    public SalesPrice unitPrice()
    {
        SalesPrice salesPrice;
        Qty lineQty = custInvoiceTrans.Qty;
        PriceUnit priceUnit = custInvoiceTrans.PriceUnit;

        if (priceUnit == 0)
        {
            priceUnit = 1;
        }

        if (lineQty != 0)
        {
            salesPrice = CurrencyExchangeHelper::price(custInvoiceTrans.SalesMarkup / lineQty, custInvoiceTrans.CurrencyCode);
        }
        else
        {
            lineQty = 1;
        }

        if (custInvoiceTrans.SalesPrice && !custInvoiceTrans.LineAmountTax && custInvoiceTrans.LinePercent != 100)
        {
            salesPrice += CurrencyExchangeHelper::price(custInvoiceTrans.SalesPrice / priceUnit, custInvoiceTrans.CurrencyCode);
        }
        else
        {
            salesPrice += CurrencyExchangeHelper::price((custInvoiceTrans.LineAmount + custInvoiceTrans.SumLineDisc) / lineQty, custInvoiceTrans.CurrencyCode);
        }

        if (this.isPrintInMST())
        {
            salesPrice = ExchangeRateHelper::mstPrice(salesPrice, custInvoiceTrans.CurrencyCode, custInvoiceTrans.InvoiceDate);
        }

        return salesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitPriceMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the price MST per unit of posted document line
    /// </summary>
    /// <returns>
    /// posted document line price MST per unit
    /// </returns>
    /// <remarks>
    /// Price per unit is how much each item unit costs
    /// </remarks>
    public SalesPrice unitPriceMST()
    {
        return ExchangeRateHelper::mstPrice(custInvoiceTrans.SalesPrice, custInvoiceTrans.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>CustInvoiceTransEInvoiceTransMap_MX</c> class.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    /// The original <c>CustInvoiceTrans</c> record that will be used as the data source.
    /// </param>
    /// <returns>
    /// A new instance of the <c>CustInvoiceTransEInvoiceTransMap_MX</c> class.
    /// </returns>
    /// <remarks>
    ///  Use the following procedure to customize or extend the X class.
    ///  <list type="number">
    ///   <item>
    ///    <description>
    ///    Create a new class that derives from the <c>CustInvoiceTransEInvoiceTransMap_MX</c> class.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Overlayer the <c>construct</c> method on the <c>CustInvoiceTransEInvoiceTransMap_MX</c> class so
    ///    that it returns an instance of the derived class.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Override the methods from the <c>CustInvoiceTransEInvoiceTransMap_MX</c> class that you want to
    ///    customize or extend in your derived class.
    ///    </description>
    ///   </item>
    ///  </list>
    ///   This procedure helps to ensure that your customizations are maintained if the base version of the
    ///  X class is changed, minimizing code conflicts during an upgrade. For more information, see <see cref="Best Practices for static construct Methods" />
    /// </remarks>
    public static CustInvoiceTransEInvoiceTransMap_MX construct(CustInvoiceTrans _custInvoiceTrans)
    {
        CustInvoiceTransEInvoiceTransMap_MX invoiceTransMap;
        EInvoiceJour_MX                     eInvoiceJour;
        CustInvoiceJour                     custInvoiceJour = _custInvoiceTrans.custInvoiceJour();

        eInvoiceJour = EInvoiceJour_MX::findByRef(custInvoiceJour.TableId, custInvoiceJour.RecId);

        if (!eInvoiceJour.CFDI)
        {
            throw error("@SYS341183");
        }

        switch (eInvoiceJour.CFDIVersion)
        {
            case EInvoiceCFDIVersion_MX::V3_2:
            case EInvoiceCFDIVersion_MX::V3_3:
            case EInvoiceCFDIVersion_MX::V4:
                invoiceTransMap = new CustInvoiceTransEInvoiceTransMap_MX();
                break;

            default:
                throw error("@SYS341183");
        }

        invoiceTransMap.initLine(_custInvoiceTrans);

        return invoiceTransMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>