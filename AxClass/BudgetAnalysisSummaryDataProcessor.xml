<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAnalysisSummaryDataProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a derived class that is responsible for processing data for the budget analysis summary form.
/// </summary>
public class BudgetAnalysisSummaryDataProcessor extends BudgetAnalysisDataProcessor
{
    const int ExpenseColumnSetTotalSteps = 7;
    const int ExpenseWithCarryForwardColumnSetTotalSteps = 8;
    const int OperatingResultColumnSetTotalSteps = 4;
    const int RevenueColumnSetTotalSteps = 5;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBudgetSourceTransactionFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the selection fields for budget source tracking tables.
    /// </summary>
    /// <param name="_fieldMapping">
    /// A <c>Map</c> object to be used to insert field mappings.
    /// </param>
    /// <param name="_budgetAnalysisQuery">
    /// The object of <c>BudgetAnalysisQuery</c> class.
    /// </param>
    /// <param name="_addReferenceDocumentField">
    /// A boolean value to indicate whether or not to add relieving source tracking field.
    /// </param>
    /// <param name="_forCarryForwardBudgetSource">
    /// A boolean value to indicate whether or not to add carry forward field.
    /// </param>
    /// <param name="_forPreEncumbrance">
    /// A boolean value to indicate whether or not to add encumbrance field or pre-encumbrance field.
    /// </param>
    /// <param name="_addBudgetSourceField">
    /// A boolean value to indicate whether or not to add budget source field.
    /// </param>
    /// <param name="_forActuals">
    /// A boolean value to indicate whether or not add fields related to actuals.
    /// </param>
    protected void addBudgetSourceTransactionFieldMapping(
        Map                 _fieldMapping,
        BudgetAnalysisQuery _budgetAnalysisQuery,
        boolean             _addReferenceDocumentField,
        boolean             _forCarryForwardBudgetSource,
        boolean             _forPreEncumbrance,
        boolean             _addBudgetSourceField,
        boolean             _forActuals = false)
    {
        FieldName fieldName;
    
        if (_addBudgetSourceField && _addReferenceDocumentField)
        {
            _fieldMapping.insert(
                fieldStr(BudgetAnalysisDimensionSummaryTmp, BudgetSource),
                [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceName(RelievedBudgetSourceTrackingDataSourceName)
                    .uniqueId(), fieldStr(BudgetSourceTracking, BudgetSource)]);
        }
        else if (_addBudgetSourceField)
        {
            _fieldMapping.insert(
                fieldStr(BudgetAnalysisDimensionSummaryTmp, BudgetSource),
                [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(BudgetSourceTracking))
                    .uniqueId(), fieldStr(BudgetSourceTracking, BudgetSource)]);
        }
    
        if (_forPreEncumbrance)
        {
            fieldName = fieldStr(BudgetAnalysisDimensionSummaryTmp, PreEncumbrance);
        }
        else if (_forActuals)
        {
            fieldName = fieldStr(BudgetAnalysisDimensionSummaryTmp, Actuals);
        }
        else
        {
            fieldName = fieldStr(BudgetAnalysisDimensionSummaryTmp, Encumbrance);
        }
    
        if (_addReferenceDocumentField)
        {
            _fieldMapping.insert(
                fieldName,
                [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(BudgetSourceTrackingRelievingDetail))
                    .uniqueId(), fieldStr(BudgetSourceTrackingRelievingDetail, AccountingCurrencyAmount)]);
        }
        else
        {
            _fieldMapping.insert(
                fieldName,
                [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(BudgetSourceTrackingDetail))
                    .uniqueId(), fieldStr(BudgetSourceTrackingDetail, AccountingCurrencyAmount)]);

            fieldName = fieldStr(BudgetAnalysisDimensionSummaryTmp, IsCarryForward);

            _fieldMapping.insert(
            fieldName,
            [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(BudgetSourceTrackingDetail))
                .uniqueId(), fieldStr(BudgetSourceTrackingDetail, IsCarryForward)]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBudgetTransactionFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the selection fields for budget register entries related tables.
    /// </summary>
    /// <param name="_fieldMapping">
    /// A <c>Map</c> object to be used to insert fields mappings.
    /// </param>
    /// <param name="_budgetAnalysisQuery">
    /// The object of <c>BudgetAnalysisQuery</c> class.
    /// </param>
    /// <param name="_forCarryForward">
    /// A boolean value to indicate whether or not to add carry forward field.
    /// </param>
    /// <param name="_forRevisedBudget">
    /// A boolean value to indicate whether or not to add fields related to revised budget.
    /// </param>
    protected void addBudgetTransactionFieldMapping(
        Map                 _fieldMapping,
        BudgetAnalysisQuery _budgetAnalysisQuery,
        boolean             _forCarryForward,
        boolean             _forRevisedBudget = false)
    {
        FieldName budgetFieldName;
    
        if (_forCarryForward)
        {
            budgetFieldName = fieldStr(BudgetAnalysisDimensionSummaryTmp, CarryForwardBudget);
        }
        else if (_forRevisedBudget)
        {
            budgetFieldName = fieldStr(BudgetAnalysisDimensionSummaryTmp, RevisedEstimates);
        }
        else
        {
            budgetFieldName = fieldStr(BudgetAnalysisDimensionSummaryTmp, Budget);
        }
    
        _fieldMapping.insert(
            budgetFieldName,
            [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(BudgetTransactionLine))
                .uniqueId(), fieldStr(BudgetTransactionLine, AccountingCurrencyAmount)]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralJournalTransactionFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the selection fields for budget register entries related tables.
    /// </summary>
    /// <param name="_fieldMapping">
    /// A <c>Map</c> object to be used to insert fields mappings.
    /// </param>
    /// <param name="_budgetAnalysisQuery">
    /// The object of <c>BudgetAnalysisQuery</c> class.
    /// </param>
    /// <param name="_forRevenue">
    /// A boolean value to indicate whether or not to add fields related to revenue.
    /// </param>
    protected void addGeneralJournalTransactionFieldMapping(
        Map                 _fieldMapping,
        BudgetAnalysisQuery _budgetAnalysisQuery,
        boolean             _forRevenue)
    {
        FieldName fieldName;
    
        if (_forRevenue)
        {
            fieldName = fieldStr(BudgetAnalysisDimensionSummaryTmp, Encumbrance);
        }
        else
        {
            fieldName = fieldStr(BudgetAnalysisDimensionSummaryTmp, Actuals);
        }
    
        _fieldMapping.insert(
            fieldName,
            [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(GeneralJournalAccountEntry))
                .uniqueId(), fieldStr(GeneralJournalAccountEntry, AccountingCurrencyAmount)]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAnalysisQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the object of <c>BudgetAnalysisQuery</c>.
    /// </summary>
    /// <returns>
    /// The object of <c>BudgetAnalysisQuery</c>.
    /// </returns>
    protected BudgetAnalysisQuery constructAnalysisQuery()
    {
        return BudgetAnalysisQuery::constructForSummary();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFieldsMappingWithBaseFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the selection fields that are used in all of the queries.
    /// </summary>
    /// <param name="_analysisQuery">
    /// The object of <c>BudgetAnalysisQuery</c> class.
    /// </param>
    /// <returns>
    /// A <c>Map</c> that contains field mappings.
    /// </returns>
    protected Map createFieldsMappingWithBaseFields(BudgetAnalysisQuery _analysisQuery)
    {
        Map                 fieldMapping;
    
        fieldMapping = new Map(Types::String, Types::Container);
    
        if (FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
        {
            if (_analysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(GeneralLedgerBalanceReportingDimensionReference)))
            {
                fieldMapping.insert(fieldStr(BudgetAnalysisDimensionSummaryTmp, ReportingDimension),
                    [_analysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(GeneralLedgerBalanceReportingDimensionReference)).uniqueId(), fieldStr(GeneralLedgerBalanceReportingDimensionReference, ReportingDimension)]);
            }
            else
            {
                fieldMapping.insert(fieldStr(BudgetAnalysisDimensionSummaryTmp, ReportingDimension),
                    [_analysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(BudgetBalanceReportingDimensionReference)).uniqueId(), fieldStr(BudgetBalanceReportingDimensionReference, ReportingDimension)]);
            }
        }
        else
        {
            if (_analysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(DimensionFocusLedgerDimensionReference)))
            {
                fieldMapping.insert(fieldStr(BudgetAnalysisDimensionSummaryTmp, FocusLedgerDimension), [_analysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(DimensionFocusLedgerDimensionReference)).uniqueId(), fieldStr(DimensionFocusLedgerDimensionReference, FocusLedgerDimension)]);
            }
            else
            {
                fieldMapping.insert(fieldStr(BudgetAnalysisDimensionSummaryTmp, FocusLedgerDimension), [_analysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(BudgetDimensionFocusDimensionReference)).uniqueId(), fieldStr(BudgetDimensionFocusDimensionReference, FocusLedgerDimension)]);
            }
        }

        return fieldMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field name for transaction amount field.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the field.
    /// </param>
    /// <returns>
    /// The name of the field.
    /// </returns>
    protected FieldName getAmountFieldName(FieldName _fieldName)
    {
        return _fieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTempTableToInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the temporary table to be used to insert the records.
    /// </summary>
    /// <param name="_inCarryForwardTable">
    /// A boolean value that indicates whether or not to insert records in carry forward table.
    /// </param>
    /// <returns>
    /// A buffer temporary table to be used to insert the records.
    /// </returns>
    protected Common getTempTableToInsert(boolean _inCarryForwardTable)
    {
        Common tempTableForInsert;
    
        if (_inCarryForwardTable)
        {
            tempTableForInsert = carryForwardTempTable;
        }
        else
        {
            tempTableForInsert = summaryTempTable;
        }
    
        return tempTableForInsert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data for budget analysis summary form.
    /// </summary>
    public void process()
    {
        this.resetTempTables();
    
        this.updateDimensionFocusReferences();
    
        switch (request.parmColumnSet())
        {
            case BudgetAnalysisColumnSet::ExpenseBudget:
                this.initializeProgressBar(ExpenseColumnSetTotalSteps, "@SYP4886816");
                this.processOriginalBudget();
                this.showProgress("@SYP4886817");
                this.processRevisedBudget();
                this.showProgress("@SYP4886818");
                this.processActuals();
                this.showProgress("@SYP4886819");
                this.processEncumbrance(BudgetControlCategory::Encumbrance);
                this.showProgress("@SYP4886820");
                this.processEncumbrance(BudgetControlCategory::PreEncumbrance);
                break;
    
            case BudgetAnalysisColumnSet::ExpenseBudgetWithCarryForward:
                this.initializeProgressBar(ExpenseWithCarryForwardColumnSetTotalSteps, "@SYP4886821");
                this.populateCarryForwardTempTable();
                this.showProgress("@SYP4886822");
                this.processBudgetLessCarryForward();
                this.showProgress("@SYP4886823");
                this.processCarryforwardBudget();
                this.showProgress("@SYP4886819");
                this.processEncumbranceWithCarryForward();
                this.showProgress("@SYP4886820");
                this.processPreEncumbranceWithCarryForward();
                this.showProgress("@SYP4886818");
                this.processActualsWithCarryForward();
                this.showProgress("@SYP4886825");
                this.splitCarryForwardTransactions();
                break;
    
            case BudgetAnalysisColumnSet::OperatingResults:
                this.initializeProgressBar(OperatingResultColumnSetTotalSteps, "@SYP4886818");
                this.processActualExpenditures();
                this.showProgress("@SYP4886828");
                this.processActualRevenues();
                break;
    
            case BudgetAnalysisColumnSet::RevenueBudget:
                this.initializeProgressBar(RevenueColumnSetTotalSteps, "@SYP4886826");
                this.processOriginalEstimates();
                this.showProgress("@SYP4886827");
                this.processRevisedEstimates();
                this.showProgress("@SYP4886828");
                this.processActualRevenues();
                break;
        }
    
        this.showProgress("@SYP4886829");
        this.summarizeTransactions();
        this.showProgress("@SYP4886830");
        this.populateBudgetAnalysisSummaryTotals();
    
        if (request.parmdisplayDimensionInSeparateColumns() || request.parmDisplayAccountNameColumn())
        {
            this.populateDimensionNames(request.parmDimensionHierarchyId());
        }
    
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>