<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchEditLinesForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
class  PurchEditLinesForm
{
    PurchTable      purchTable;
    PurchFormLetter purchFormLetter;

    SalesPurchSummarySumByCtrl      sumByCtrl;
    BankLCImportLineNumController   bankLCImportLineNumController;

    #PurchAllowAssetEdit

    //<GEERU>
    #ISOCountryRegionCodes

    ReceiptListFormType_RU receiptListFormType;

    #Define.CurrentVersion(1)
    #LocalMacro.CurrentList
        receiptListFormType
    #EndMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowHeaderCreate</Name>
				<Source><![CDATA[
    //</GEERU>

    /// <summary>
    /// Defines if header can be created by default
    /// </summary>
    /// <returns>
    /// true if header can be created by default
    /// </returns>
    /// <remarks>
    /// Behavior may be overridden on the form
    /// </remarks>
    public boolean allowHeaderCreate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowHeaderDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if header can be deleted by default.
    /// </summary>
    /// <returns>
    /// true if header can be deleted by default; otherwise, false.
    /// </returns>
    public boolean allowHeaderDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowLineCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if line can be created by default.
    /// </summary>
    /// <returns>
    /// true if line can be created by default; otherwise, false.
    /// </returns>
    public boolean allowLineCreate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowLineDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if line can be deleted by default.
    /// </summary>
    /// <returns>
    /// true if line can be deleted by default; otherwise, false.
    /// </returns>
    public boolean allowLineDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowPaymentDisbursement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables a user to create a payment disbursement.
    /// </summary>
    /// <param name="_parmId">
    /// The parameter ID of the <c>PurchParmTable</c> table that is used to enable or disable the user to
    /// create a payment disbursement.
    /// </param>
    /// <param name="_purchParmTableRefId">
    /// The <c>TradeLineRefId</c> value in the <c>PurchParmTable</c> table that is used to enable or
    /// disable the user to create a payment disbursement.
    /// </param>
    /// <param name="_showError">
    /// A Boolean value that indicates whether to display the error message; optional.
    /// </param>
    /// <returns>
    /// Always returns true .
    /// </returns>
    public boolean allowPaymentDisbursement(ParmId _parmId,TradeLineRefId _purchParmTableRefId,boolean _showError = true)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>approvedAllowEdit</Name>
				<Source><![CDATA[
    boolean approvedAllowEdit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>approvedByAllowEdit</Name>
				<Source><![CDATA[
    boolean approvedByAllowEdit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>backOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>PurchEditLines</c> form should display the <c>BackOrder</c> field from
    ///    the <c>PurchParmLine</c> or the <c>VendInvoiceInfoLine</c> tables.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    boolean backOrder()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankLCImportLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the Letter of Credit line field should be visible.
    /// </summary>
    /// <returns>
    /// true if the Letter of Credit line field should be visible; otherwise, false.
    /// </returns>
    public boolean bankLCImportLine()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAssetFieldsBeEdited</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the fixed asset fields can be edited.
    /// </summary>
    /// <param name="_parmTable">
    /// A table buffer that contains the current values from the <c>PurchParmTable</c> table or the
    /// <c>VendInvoiceInfoTable</c> table.
    /// </param>
    /// <param name="_parmLine">
    /// A table buffer that contains the current values from the <c>PurchParmTable</c> table or the
    /// <c>VendInvoiceInfoTable</c> table.
    /// </param>
    /// <returns>
    /// true if the asset fields can be edited; otherwise, false.
    /// </returns>
    /// <remarks>
    ///  The asset fields of a
    ///  <c>
    ///  PurchLine
    ///  </c>
    ///   table buffer can be edited providing the following criteria are met:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>The inventory reference type or the fixed asset type is empty.</description>
    ///   </item>
    ///   <item>
    ///   <description>The purchase type is a subscription, a blanket purchase order, or a purchase
    ///   order.</description>
    ///   </item>
    ///   <item>
    ///   <description>There is no project associated with the record.</description>
    ///   </item>
    ///   <item>
    ///   <description>There is no item quantity marked.</description>
    ///   </item>
    ///   <item>
    ///   <description>The purchase line is not originating from a Lean Subconracting job.</description>
    ///   </item>
    ///  </list>
    /// </remarks>
    public boolean canAssetFieldsBeEdited(VendDocumentTableMap _parmTable, VendDocumentLineMap _parmLine)
    {
        PurchTable  localPurchTable = _parmTable.purchTable();
        PurchLine   localPurchLine  = _parmLine.purchLine();
        boolean validItemRefTypeForAssetFields;
        boolean validPurchaseTypeForAssetFields;
        boolean ret;

        validItemRefTypeForAssetFields  =  ((localPurchLine.ItemRefType == InventRefType::None) ||
                                                                   (localPurchLine.ItemRefType == InventRefType::FixedAsset));
        validPurchaseTypeForAssetFields = localPurchTable && (localPurchTable.PurchaseType == PurchaseType::Purch);

        ret = validItemRefTypeForAssetFields
            && validPurchaseTypeForAssetFields
            && !localPurchLine.ProjId
            && !localPurchLine.isSubcontracted();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvoiceMiscCharges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks for miscellaneous charge transactions in the <c>MarkUpTrans</c> table on the
    ///    <c>PurchParmSubLine</c> or <c>VendInvoiceInfoSubLine</c> record.
    /// </summary>
    /// <param name="_common">
    ///    A <c>Common</c> table buffer.
    /// </param>
    /// <returns>
    ///    true if miscellaneous charge transactions exist; otherwise, false.
    /// </returns>

    boolean checkInvoiceMiscCharges(Common _common)
    {
        MarkupTrans markupTrans;
        boolean ret;

        select firstonly markupTrans
         where markupTrans.TransTableId == _common.TableId
         &&    markupTrans.TransRecId == _common.RecId
         &&   !markupTrans.IsDeleted;

        if (markupTrans)
            ret = true;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>PurchEditLines</c> form should display the Select button.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    boolean chooseButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>classType</Name>
				<Source><![CDATA[
    str  classType()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    boolean  close()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correct</Name>
				<Source><![CDATA[
    boolean  correct()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctEnabled_RU</Name>
				<Source><![CDATA[
    boolean correctEnabled_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctPhysical_RU</Name>
				<Source><![CDATA[
    boolean correctPhysical_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customsTax_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// check if customs is enabled in tax parameters
    /// </summary>
    /// <returns>
    /// returns true if customs is enabled in tax parameters
    /// </returns>

    public boolean customsTax_IN()
    {
        return TaxParameters::isCustomsEnable_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateCaption</Name>
				<Source><![CDATA[
    str dateCaption()
    {
        return "@SYS7402";
    }

]]></Source>
			</Method>
			<Method>
				<Name>editBankLCImportLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the Letter of Credit line field should be editable.
    /// </summary>
    /// <returns>
    /// true if the Letter of Credit line field should be editable; otherwise, false.
    /// </returns>
    public boolean editBankLCImportLine()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editButtonRetrievePO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if button Retrieve purchase orders should be editable by default
    /// </summary>
    /// <returns>
    /// true if button Retrieve purchase orders should be editable by default
    /// </returns>
    /// <remarks>
    /// Behavior may be overridden on the form
    /// </remarks>
    public boolean editButtonRetrievePO()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editDiscount</Name>
				<Source><![CDATA[
    boolean  editDiscount()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editingCaption</Name>
				<Source><![CDATA[
    str editingCaption()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>editMarkup</Name>
				<Source><![CDATA[
    boolean  editMarkup()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>PurchEditLines</c> form should allow for editing of the
    /// <c>DeliveryPostalAddress</c> field in the <c>PurchParmLine</c> table.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    boolean editPostalAddress()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPrices</Name>
				<Source><![CDATA[
    boolean  editPrices()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReceiveNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>PurchEditLines</c> form should enable editing of the <c>ReceiveNow</c>
    ///    field in the <c>PurchParmLine</c> or <c>VendInvoiceInfoLine</c> table.
    /// </summary>
    /// <returns>
    ///    true if the <c>PurchEditLines</c> form should editing of the <c>ReceiveNow</c> field should be
    ///    enabled; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Editing will not be enabled if the <c>PurchaseOrderLedgerPosting</c> field in the
    ///    <c>PurchParameters</c> table is true.
    /// </remarks>
    public boolean editReceiveNow()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editRemainAfter</Name>
				<Source><![CDATA[
    boolean editRemainAfter()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedAssetTab</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>PurchEditLines</c> form will display the <c>TabPageFixedAsset</c> tab
    ///    page.
    /// </summary>
    /// <returns>
    ///    Always true.
    /// </returns>
    public boolean fixedAssetTab()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedDueDateAllowEdit</Name>
				<Source><![CDATA[
    boolean fixedDueDateAllowEdit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixedExchRate</Name>
				<Source><![CDATA[
    boolean fixedExchRate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterButtonCaption</Name>
				<Source><![CDATA[
    str  formLetterButtonCaption()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterButtonCaptionCopy</Name>
				<Source><![CDATA[
    str  formLetterButtonCaptionCopy()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterCaption</Name>
				<Source><![CDATA[
    str  formLetterCaption()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterCaptionHelpText</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a string value that is used to set the caption for the <c>PrintFormLetter</c> field in
    ///    the <c>PurchEditDocumentPrintSetup</c> dialog box.
    /// </summary>
    /// <returns>
    ///    An empty string.
    /// </returns>
    str  formLetterCaptionHelpText()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates the class members.
    /// </summary>
    public void initParmDefault()
    {
        receiptListFormType = ReceiptListFormType_RU::ReceiptListForGoods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    private DataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    private IdentifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    private IdentifierName lastValueElementName()
    {
        return formStr(PurchEditLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    private UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    private UserId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lateSelection</Name>
				<Source><![CDATA[
    boolean  lateSelection()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDetailsTab</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>PurchEditLines</c> form should display the specification tab page.
    /// </summary>
    /// <returns>
    ///    Always rtrue.
    /// </returns>
    public boolean lineDetailsTab()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesTab</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>PurchEditLines</c> form should display the <c>tabPageParmLine</c> tab
    ///    page.
    /// </summary>
    /// <returns>
    ///    Always true.
    /// </returns>
    public boolean linesTab()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a custom lookup to select batch numbers.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormControl</c> object for which to display the lookup.
    /// </param>
    /// <param name="_filterStr">
    /// The current value.
    /// </param>
    /// <param name="_purchParmLine">
    /// The selected <c>PurchParmLine</c> record.
    /// </param>
    /// <param name="_inventDim">
    /// The selected <c>InventDim</c> record.
    /// </param>
    /// <returns>
    /// true if a custom lookup was displayed; otherwise, false.
    /// </returns>
    public boolean lookupInventBatchId(FormControl _formControl, str _filterStr, PurchParmLine _purchParmLine, InventDim _inventDim)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventGTDId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a custom lookup to select invent owner.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormControl</c> object for which to display the lookup.
    /// </param>
    /// <param name="_filterStr">
    /// The current value.
    /// </param>
    /// <param name="_purchParmLine">
    /// The selected <c>PurchParmLine</c> record.
    /// </param>
    /// <returns>
    /// true if a custom lookup was shown; otherwise, false.
    /// </returns>
    public boolean lookupInventGTDId_RU(FormControl _formControl, str _filterStr, PurchParmLine _purchParmLine)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventOwnerId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a custom lookup to select invent owner.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormControl</c> object for which to display the lookup.
    /// </param>
    /// <param name="_filterStr">
    /// The current value.
    /// </param>
    /// <param name="_purchParmLine">
    /// The selected <c>PurchParmLine</c> record.
    /// </param>
    /// <returns>
    /// true if a custom lookup was shown; otherwise, false.
    /// </returns>
    public boolean lookupInventOwnerId_RU(FormControl _formControl, str _filterStr, PurchParmLine _purchParmLine)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a custom lookup to select serial numbers.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormControl</c> object for which to display the lookup.
    /// </param>
    /// <param name="_filterStr">
    /// The current value.
    /// </param>
    /// <param name="_purchParmLine">
    /// The selected <c>PurchParmLine</c> record.
    /// </param>
    /// <param name="_inventDim">
    /// The selected <c>InventDim</c> record.
    /// </param>
    /// <returns>
    /// true if a custom lookup was shown; otherwise, false.
    /// </returns>
    public boolean lookupInventSerialId(FormControl _formControl, str _filterStr, PurchParmLine _purchParmLine, InventDim _inventDim)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrDropShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns true in order to show the dropship checkbox.
    /// </summary>
    /// <returns>
    ///     true.
    /// </returns>
    public boolean mcrDropShipment()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        xSysLastValue::getLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>num</Name>
				<Source><![CDATA[
    boolean num()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numAllowEdit</Name>
				<Source><![CDATA[
    boolean numAllowEdit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numCaption</Name>
				<Source><![CDATA[
    public str numCaption()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>numHelpText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a String value that is used to set the help text for the <c>Num</c> field in the
    /// <c>PurchEditLines</c> form.
    /// </summary>
    /// <returns>
    /// An empty String.
    /// </returns>
    public str numHelpText()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>otherTab</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>PurchEditLines</c> form should display the <c>tabPageOther</c> tab page.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean otherTab()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overviewTab</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>PurchEditLines</c> form should display the <c>tabPageParmTable</c> tab page.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean overviewTab()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parametersGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>PurchEditLines</c> form should display the <c>groupParameters</c> control group.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean parametersGroup()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankLCImportLineNumController</Name>
				<Source><![CDATA[
    public BankLCImportLineNumController parmBankLCImportLineNumController(
        BankLCImportLineNumController _bankLCImportLineNumController = bankLCImportLineNumController)
    {
        bankLCImportLineNumController = _bankLCImportLineNumController;
        return bankLCImportLineNumController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceiptListFormType_RU</Name>
				<Source><![CDATA[
    public ReceiptListFormType_RU parmReceiptListFormType_RU(ReceiptListFormType_RU _receiptListFormType = receiptListFormType)
    {
        receiptListFormType = _receiptListFormType;

        return receiptListFormType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentIdAllowEdit</Name>
				<Source><![CDATA[
    boolean paymentIdAllowEdit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymFormat</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the <c>PurchEditLines</c> form should display the ButtonSetupPaymFormat button.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    boolean paymFormat()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymModeAllowEdit</Name>
				<Source><![CDATA[
    boolean paymModeAllowEdit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymSpecAllowEdit</Name>
				<Source><![CDATA[
    boolean paymSpecAllowEdit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printFormletter</Name>
				<Source><![CDATA[
    boolean  printFormletter()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printFormletterButton</Name>
				<Source><![CDATA[
    boolean  printFormletterButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printout</Name>
				<Source><![CDATA[
    boolean printout()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSalesFormLetter</Name>
				<Source><![CDATA[
    boolean  printSalesFormLetter()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchasesTab</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>PurchEditLines</c> form should display the <c>tabPageParmSubTable</c> tab
    ///    page.
    /// </summary>
    /// <returns>
    ///    Always true.
    /// </returns>
    public boolean purchasesTab()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchFormLetter</Name>
				<Source><![CDATA[
    void purchFormLetter(PurchFormLetter _purchFormLetter)
    {
        purchFormLetter = _purchFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    By default, indicates whether the reArrange button on the <c>PurchEditLines</c> form should be
    ///    visible.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean reArrangeButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowEditAssetFields</Name>
				<Source><![CDATA[
    public void setAllowEditAssetFields (VendDocumentTableMap _parmTable, VendDocumentLineMap _parmLine, VendDocumentLineAssetMap _vendInvoiceInfoLineTable_Asset,
        FormDataSource _parmLine_Asset_ds)
    {
        boolean     canEdit;
        boolean     assetAllowCreate;
        boolean     newAssetGroupChecked;
        boolean     assetAllowEdit = true;
        container   conAllowAssetEditValues;

        if (this.canAssetFieldsBeEdited(_parmTable, _parmLine))
        {
            conAllowAssetEditValues = PurchEditLinesForm::canAssetFieldsBeEditedServer(_parmTable, _parmLine, _vendInvoiceInfoLineTable_Asset);

            canEdit             = conPeek(conAllowAssetEditValues, #AssetCanEdit);
            assetAllowCreate    = conPeek(conAllowAssetEditValues, #AssetAllowCreate);
            assetAllowEdit      = conPeek(conAllowAssetEditValues, #AssetAllowEdit);
        }

        _parmLine_Asset_ds.object(VendDocumentUtil::fieldNum(fieldNum(VendDocumentLineAssetMap, CreateFixedAsset), _vendInvoiceInfoLineTable_Asset.TableId)).allowEdit(assetAllowCreate && assetAllowEdit);
        newAssetGroupChecked = (assetAllowCreate && _vendInvoiceInfoLineTable_Asset.CreateFixedAsset == NoYes::Yes);
        _parmLine_Asset_ds.object(VendDocumentUtil::fieldNum(fieldNum(VendDocumentLineAssetMap, AssetGroup), _vendInvoiceInfoLineTable_Asset.TableId)).allowEdit(assetAllowCreate && newAssetGroupChecked );
        _parmLine_Asset_ds.object(VendDocumentUtil::fieldNum(fieldNum(VendDocumentLineAssetMap, AssetId), _vendInvoiceInfoLineTable_Asset.TableId)).allowEdit(canEdit && (!newAssetGroupChecked) && assetAllowEdit);
        _parmLine_Asset_ds.object(VendDocumentUtil::fieldNum(fieldNum(VendDocumentLineAssetMap, AssetBookId), _vendInvoiceInfoLineTable_Asset.TableId)).allowEdit(canEdit && (!newAssetGroupChecked) && assetAllowEdit);
        _parmLine_Asset_ds.object(VendDocumentUtil::fieldNum(fieldNum(VendDocumentLineAssetMap, AssetTransTypePurch), _vendInvoiceInfoLineTable_Asset.TableId)).allowEdit(canEdit && (!newAssetGroupChecked));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowVisibleReductionEntryFields_JP</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>isVisible</c> methods of the reduction entry fields group for the active <c>VendDocumentLineAssetMap</c> record.
    /// </summary>
    /// <param name="_vendDocumentInfoLineAsset">
    ///    The current active <see cref="T:VendDocumentLineAssetMap" /> buffer.
    /// </param>
    /// <param name="_grpReductionEntry">
    ///    The reduction entry form group control.
    /// </param>
    public void setAllowVisibleReductionEntryFields_JP(
        VendDocumentLineAssetMap _vendDocumentInfoLineAsset,
        FormGroupControl         _grpReductionEntry)
    {
        AssetDocumentReductionEntry_JP     reductionEntryDocumentLoc;
        boolean                            isVisible                 = false;
        if (_vendDocumentInfoLineAsset.AssetId && _vendDocumentInfoLineAsset.AssetBookId)
        {
            reductionEntryDocumentLoc = AssetReductionEntryManager_JP::getAssetReductionEntryDocByAssetBook(
                _vendDocumentInfoLineAsset.AssetId,
                _vendDocumentInfoLineAsset.AssetBookId);

            if (reductionEntryDocumentLoc != null)
            {
                isVisible = true;
            }
        }

        _grpReductionEntry.visible(isVisible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchTable</Name>
				<Source><![CDATA[
    void  setPurchTable(PurchTable _purchTable)
    {
        purchTable = _purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupBankLCImportLineController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up the <c>BankLCImportLineNumController</c> object to use for a <c>BankLCImportLine</c> field.
    /// </summary>
    public void setupBankLCImportLineController()
    {
        if (bankLCImportLineNumController)
        {
            if (purchTable)
            {
                bankLCImportLineNumController.parmBankLCRecId(BankLCImport::findByPurchTable(purchTable.PurchId).RecId);
            }
            else if (purchFormLetter && purchFormLetter.purchTable())
            {
                bankLCImportLineNumController.parmBankLCRecId(BankLCImport::findByPurchTable(
                    purchFormLetter.purchTable().PurchId).RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupSumByControl</Name>
				<Source><![CDATA[
    void setupSumByControl(FormComboBoxControl _sumByControl)
    {
        sumByCtrl = SalesPurchSummarySumByCtrl::newSumByControl(_sumByControl);
        sumByCtrl.remove(AccountOrder::Journal);
        sumByCtrl.build();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupTab</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>PurchEditLines</c> form should display the <c>setup</c> tab page.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean setupTab()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAsset_RU</Name>
				<Source><![CDATA[
    public boolean showAsset_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showControls_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is used to Show/Hide PurchEditLines form controls
    /// </summary>
    /// <returns>
    /// Return true by default, overridden to return false for Bill of entry.
    /// </returns>

    public boolean showControls_IN()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCorrect_RU</Name>
				<Source><![CDATA[
    public boolean showCorrect_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCorrectedFactureExternalId_RU</Name>
				<Source><![CDATA[
    public boolean showCorrectedFactureExternalId_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCorrectedInvoiceId_RU</Name>
				<Source><![CDATA[
    public boolean showCorrectedInvoiceId_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDeviationQty_RU</Name>
				<Source><![CDATA[
    public boolean showDeviationQty_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDocNumberingCode_LT</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to find if the Numbering Code field should be visible on the Purchase Invoice/Packing slip form.
    /// </summary>
    /// <param name="_parmId">
    /// ParmId of the Purchase order transaction.
    /// </param>
    /// <returns>
    /// False, since the actual methods called will be the ones in Invoice or Packing slip class.
    /// </returns>
    public boolean showDocNumberingCode_LT(ParmId _parmId)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showExtra_RU</Name>
				<Source><![CDATA[
    public boolean showExtra_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showFactureId_RU</Name>
				<Source><![CDATA[
    public boolean showFactureId_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInventLocationId_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to show warehouse control for documents numbering per location.
    /// </summary>
    /// <returns>
    /// true depending on setup in module parameters for document type.
    /// </returns>
    public boolean showInventLocationId_PL()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInventProfileType_RU</Name>
				<Source><![CDATA[
    public boolean showInventProfileType_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showOfficials_RU</Name>
				<Source><![CDATA[
    public boolean showOfficials_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showOffInventLocation_RU</Name>
				<Source><![CDATA[
    public boolean showOffInventLocation_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showOverviewNew_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if Overview_New button group is visible on form
    /// </summary>
    /// <returns>
    /// rue to make the button group visible
    /// </returns>
    public boolean showOverviewNew_PL()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPostingProfile_RU</Name>
				<Source><![CDATA[
    public boolean showPostingProfile_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPreserveReceiptStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a preserve receipt statement can be shown.
    /// </summary>
    /// <returns>
    /// true if the receipt statements can be shown; otherwise, false.
    /// </returns>
    public boolean showPreserveReceiptStatement()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintAcceptanceReport_RU</Name>
				<Source><![CDATA[
    public boolean showPrintAcceptanceReport_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrinterSetting_RU</Name>
				<Source><![CDATA[
    public boolean showPrinterSetting_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintFacture_RU</Name>
				<Source><![CDATA[
    public boolean showPrintFacture_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintInventBaileeReport_RU</Name>
				<Source><![CDATA[
    public boolean showPrintInventBaileeReport_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintReimbursementSlip_RU</Name>
				<Source><![CDATA[
    public boolean showPrintReimbursementSlip_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showProcessVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines visibility of the Process VAT button.
    /// </summary>
    /// <returns>
    /// True, if button should be visible; overwise, false.
    /// </returns>
    /// <remarks>
    /// Always returns false.
    /// </remarks>
    public boolean showProcessVAT()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>PurchEditLines</c> form should display the <c>TaxTransSource_IN</c> button
    /// </summary>
    /// <returns>
    /// true
    /// </returns>
    /// <remarks>
    /// Setting it to true since the button is visible by default.
    /// </remarks>
    public boolean showSalesTax()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showSummaryPurchSetupDefault_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if "Consolidate invoices" button is visible by default
    /// </summary>
    /// <returns>
    /// true to make the button visible by default
    /// </returns>
    /// <remarks>
    /// Default behavior only; may be overridden on form
    /// </remarks>
    public boolean showSummaryPurchSetupDefault_PL()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showVatDueDate_W</Name>
				<Source><![CDATA[
    public boolean showVatDueDate_W()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showVATOnPayment_RU</Name>
				<Source><![CDATA[
    public boolean showVATOnPayment_RU()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specQtyAllowEdit</Name>
				<Source><![CDATA[
    boolean specQtyAllowEdit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subLedgerJournalButton</Name>
				<Source><![CDATA[
    public boolean subLedgerJournalButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumBy</Name>
				<Source><![CDATA[
    AccountOrder  sumBy()
    {
        return PurchParameters::find().SummaryUpdateBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumByAllowEdit</Name>
				<Source><![CDATA[
    boolean sumByAllowEdit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumByIndex2Selection</Name>
				<Source><![CDATA[
    int sumByIndex2Selection(AccountOrder _accountOrder)
    {
        if (!sumByCtrl)
        {
            return -1;
        }
        return sumByCtrl.index2Selection(_accountOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumBySelection2Index</Name>
				<Source><![CDATA[
    AccountOrder sumBySelection2Index(int _selection)
    {
        return sumByCtrl.selection2Index(_selection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumNumAllowEdit</Name>
				<Source><![CDATA[
    boolean sumNumAllowEdit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumNumCaption</Name>
				<Source><![CDATA[
    str  sumNumCaption()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>tabPaymentDisbursementShow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to display the payment disbursement grid on the <c>PurchEditLines</c> form.
    /// </summary>
    /// <returns>
    /// Always returns false .
    /// </returns>
    boolean tabPaymentDisbursementShow()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxTrans</Name>
				<Source><![CDATA[
    boolean taxTrans()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalsButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    By default, indicates whether the Totals button on the <c>PurchEditLines</c> form should be visible.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean totalsButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    boolean transDate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDateAllowEdit</Name>
				<Source><![CDATA[
    boolean transDateAllowEdit()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  packedClass)
    {
        boolean         ret;
        Integer         version;

        if (typeOf(conPeek(packedClass, 1)) != Types::Integer)
        {
            ret = true;
        }
        else
        {
            version = conPeek(packedClass, 1);

            switch (version)
            {
                case #CurrentVersion:
                    [version, #CurrentList] = packedClass;
                    ret = true;
                    break;
                default:
                    ret = false;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the inventory dimensions that will used for a parameter line.
    /// </summary>
    /// <param name="_purchParmLine">
    /// The parameter line for which the dimensions are to be validated.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimensions to validate.
    /// </param>
    /// <returns>
    /// true if the inventory dimensions are correct; otherwise, false.
    /// </returns>
    public boolean validateInventDimId(PurchParmLine _purchParmLine, InventDim _inventDim)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventGTDId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the GTD inventory dimensions.
    /// </summary>
    /// <param name="_purchParmLine">
    /// The parameter line for which the dimensions are to be validated.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record that contains the values of the serial and batch number dimension.
    /// </param>
    /// <returns>
    /// true if both dimensions are correct; otherwise, false.
    /// </returns>
    public boolean validateInventGTDId_RU(PurchParmLine _purchParmLine, InventDim _inventDim)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventOwnerId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the invent owner inventory dimensions.
    /// </summary>
    /// <param name="_purchParmLine">
    /// The parameter line for which the dimensions are to be validated.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record that contains the values of the serial and batch number dimension.
    /// </param>
    /// <returns>
    /// true if both dimensions are correct; otherwise, false.
    /// </returns>
    public boolean validateInventOwnerId_RU(PurchParmLine _purchParmLine, InventDim _inventDim)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventSerialBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the serial and batch number inventory dimensions.
    /// </summary>
    /// <param name="_purchParmLine">
    /// The parameter line for which the dimensions are to be validated.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record that contains the values of the serial and batch number dimension.
    /// </param>
    /// <returns>
    /// true if both dimensions are correct; otherwise, false.
    /// </returns>
    public boolean validateInventSerialBatchId(PurchParmLine _purchParmLine, InventDim _inventDim)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendBankAccountIdAllowEdit</Name>
				<Source><![CDATA[
    boolean vendBankAccountIdAllowEdit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAssetFieldsBeEditedServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves information about the editing of asset fields for the purchase line.
    /// </summary>
    /// <param name="_parmTable">
    /// The <c>VendDocumentTableMap</c> table buffer.
    /// </param>
    /// <param name="_parmLine">
    /// The <c>VendDocumentLineMap</c> table buffer.
    /// </param>
    /// <param name="_vendInvoiceInfoLineTableAsset">
    /// The <c>VendDocumentLineAssetMap</c> buffer.
    /// </param>
    /// <returns>
    /// A container that contains the asset allow edit values.
    /// </returns>
    protected static container canAssetFieldsBeEditedServer(
                    VendDocumentTableMap        _parmTable,
                    VendDocumentLineMap         _parmLine,
                    VendDocumentLineAssetMap    _vendInvoiceInfoLineTableAsset)
    {
        boolean     canEdit;
        boolean     assetAllowCreate;
        boolean     assetAllowEdit = true;
        container   conAllowAssetEditValues;
        PurchTable  localPurchTable = _parmTable.purchTable();
        PurchLine   localPurchLine  = _parmLine.purchLine();

        canEdit = localPurchLine.invoicedInTotal() == 0
            && localPurchLine.inventTable().modelGroup().InventModel != InventModel::StdCost; // Check InventModel <> StdCost.  If it does, don't allow assignment of an Asset.

        // If the item is stocked and post financial = false, don't allow assignment of an Asset.
        if (canEdit && localPurchLine.isStocked() && !localPurchLine.inventTable().modelGroup().PostOnhandFinancial)
        {
            canEdit = false;
        }

        // only invoices do not perform this test because quantities can be marked
        if (canEdit && _parmTable.Ordering != DocumentStatus::Invoice && _parmTable.Ordering != DocumentStatus::ApproveJournal)
        {
            canEdit = localPurchLine.qtyMarked() == 0;
        }

        if (canEdit)
        {
            assetAllowCreate = AssetParameters::find().AssetAllowCreate;

            if (assetAllowCreate && _parmTable.Ordering != DocumentStatus::ApproveJournal)
            {
                if (_vendInvoiceInfoLineTableAsset.AssetId &&
                    AssetTable::find(_vendInvoiceInfoLineTableAsset.AssetId).PurchLineRecId == _parmLine.PurchLineRecId)
                {
                    assetAllowEdit = false;
                }
            }
        }

        conAllowAssetEditValues = conIns(conAllowAssetEditValues, #AssetCanEdit, canEdit);
        conAllowAssetEditValues = conIns(conAllowAssetEditValues, #AssetAllowCreate, assetAllowCreate);
        conAllowAssetEditValues = conIns(conAllowAssetEditValues, #AssetAllowEdit, assetAllowEdit);

        return conAllowAssetEditValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchEditLinesForm construct(
        DocumentStatus          _documentStatus,
        VersioningUpdateType    _updateType = VersioningUpdateType::Initial)
    {
        switch (_documentStatus)
        {
            case DocumentStatus::PurchaseOrder      :
                return PurchEditLinesForm_Confirmation::construct();
            case DocumentStatus::ConfirmationRequest:
                return PurchEditLinesForm_ConfirmationRequest::construct();
            case DocumentStatus::PackingSlip        :
                return PurchEditLinesForm_PackingSlip::newVersioningUpdateType(_updateType);
            default                                 :
                PurchEditLinesForm purchEditLinesForm = SysExtensionAppClassFactory::getClassFromSysAttribute(
                    classStr(PurchEditLinesForm), 
                    new PurchEditLinesFormFactoryAttribute(_documentStatus)) as PurchEditLinesForm;

                if (classIdGet(purchEditLinesForm) != classNum(PurchEditLinesForm))
                {
                    return purchEditLinesForm;                    
                }

                break;                
        }

        throw error(strFmt("@SYS19306", funcName()));        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>