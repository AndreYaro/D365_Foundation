<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcProductModelListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PcProductModelListPageInteraction extends ListPageInteraction
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes product configuration template records.
    /// </summary>
    public void initialized()
    {
        PCTemplateInitialize templateInitialize = PCTemplateInitialize::construct();

        super();
        templateInitialize.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the design of the list page when the selection is changed.
    /// </summary>
    public void selectionChanged()
    {
        super();
        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    private void updateDesign()
    {
        str dataSourceName = querydatasourcestr(PCProductConfigurationModels, PCProductConfigurationModel);

        str duplicateModelButton = formcontrolstr(PCProductConfigurationModelListPage, DuplicateModelButton);
        str manageVersionsButton = formcontrolstr(PCProductConfigurationModelListPage, ManageVersionsButton);
        str userInterfaceButton = formcontrolstr(PCProductConfigurationModelListPage, UserInterfaceButton);
        str productModelDetailsButton = formcontrolstr(PCProductConfigurationModelListPage, ProductModelDetailsButton);
        str configurationTemplatesButton = formcontrolstr(PCProductConfigurationModelListPage, ConfigurationTemplatesButton);
        str testProductModel = formcontrolstr(PCProductConfigurationModelListPage, TestProductModel);
        str validateProductModel = formcontrolstr(PCProductConfigurationModelListPage, validateProductModel);

        ListPage listPage = this.listPage();
        Common model = listPage.activeRecord(dataSourceName);
        if (model.RecId)
        {
            listPage.actionPaneControlEnabled(duplicateModelButton, true );
            listPage.actionPaneControlEnabled(manageVersionsButton, true );
            listPage.actionPaneControlEnabled(userInterfaceButton, true );
            listPage.actionPaneControlEnabled(productModelDetailsButton, true );
            listPage.actionPaneControlEnabled(configurationTemplatesButton, true );
            listPage.actionPaneControlEnabled(testProductModel, true );
            listPage.actionPaneControlEnabled(validateProductModel, true );
        }
        else
        {
            listPage.actionPaneControlEnabled(duplicateModelButton, false );
            listPage.actionPaneControlEnabled(manageVersionsButton, false );
            listPage.actionPaneControlEnabled(userInterfaceButton, false);
            listPage.actionPaneControlEnabled(productModelDetailsButton, false);
            listPage.actionPaneControlEnabled(configurationTemplatesButton, false);
            listPage.actionPaneControlEnabled(testProductModel, false);
            listPage.actionPaneControlEnabled(validateProductModel, false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>