<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastPostOnAccFixedInvest</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjForecastPostOnAccFixedInvest extends ProjForecastPostOnAcc
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCreditOnAcc</Name>
				<Source><![CDATA[
    boolean checkCreditOnAcc()
    {
        boolean ret;

        if ((projTable.Type == ProjType::FixedPrice && ForecastModel::find(HeadingSub::Heading,this.modelId()).ProjForecastWIPFixedPrice == NoYes::No) ||
            (projTable.Type == ProjType::Investment && ForecastModel::find(HeadingSub::Heading,this.modelId()).ProjForecastWIPInvestment == NoYes::No))
        {
            ret = super();
        }
        else if (this.forecastUpdateType() == ProjForecastUpdateType::Elimination)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDebitOnAcc</Name>
				<Source><![CDATA[
    boolean checkDebitOnAcc()
    {
        boolean  ret;

        if ((projTable.Type == ProjType::FixedPrice && ForecastModel::find(HeadingSub::Heading,this.modelId()).ProjForecastWIPFixedPrice == NoYes::No) ||
            (projTable.Type == ProjType::Investment && ForecastModel::find(HeadingSub::Heading,this.modelId()).ProjForecastWIPInvestment == NoYes::No))
        {
            ret = super();
        }
        else
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterAccruedOnAcc</Name>
				<Source><![CDATA[
    protected boolean checkEnterAccruedOnAcc()
    {
        boolean ret;

        if ((projTable.Type == ProjType::FixedPrice && ForecastModel::find(HeadingSub::Heading,this.modelId()).ProjForecastWIPFixedPrice == NoYes::No) ||
            (projTable.Type == ProjType::Investment && ForecastModel::find(HeadingSub::Heading,this.modelId()).ProjForecastWIPInvestment == NoYes::No))
        {
            ret = super();
        }
        else if (this.forecastUpdateType() == ProjForecastUpdateType::Invoice ||
                 this.forecastUpdateType() == ProjForecastUpdateType::Elimination)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterTurnover</Name>
				<Source><![CDATA[
    protected boolean checkEnterTurnover()
    {
        boolean ret = false;

        if ((projTable.Type == ProjType::FixedPrice && ForecastModel::find(HeadingSub::Heading,this.modelId()).ProjForecastWIPFixedPrice == NoYes::No) ||
           (projTable.Type == ProjType::Investment && ForecastModel::find(HeadingSub::Heading,this.modelId()).ProjForecastWIPInvestment == NoYes::No) &&
            projGroup.InvoicePosting == ProjLedgerStatusOnAcc::Operations)
        {
            ret  = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOnAccAccrued</Name>
				<Source><![CDATA[
    protected boolean checkOnAccAccrued()
    {
        boolean ret = super();

        if (ret)
        {
            if ((projTable.Type == ProjType::FixedPrice && ForecastModel::find(HeadingSub::Heading,this.modelId()).ProjForecastWIPFixedPrice == NoYes::No) ||
                (projTable.Type == ProjType::Investment && ForecastModel::find(HeadingSub::Heading,this.modelId()).ProjForecastWIPInvestment == NoYes::No))
            {
                ret = true;
            }
            else
            {
                if (this.forecastUpdateType() == ProjForecastUpdateType::Invoice)
                {
                    if (projGroup.InvoicePosting == ProjLedgerStatusOnAcc::Operations)
                    {
                        if (! ForecastModel::find(HeadingSub::Heading,this.modelId()).UseProjectDate)
                        {
                            if (! projTrans.forecastInvoiceDate())
                            {
                                ret = checkFailed("@SYS33044");
                            }
                        }
                    }
                }
                else if (this.forecastUpdateType() == ProjForecastUpdateType::Elimination)
                {
                    if (! projTrans.forecastEliminationDate())
                    {
                        ret = checkFailed("@SYS89885");
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the account for posting the credit side of transactions for on-account accounts.
    /// </summary>
    /// <param name="_fundingSourceId">
    ///    The funding source that is associated with the project contract to be used by this transaction.
    /// </param>
    /// <returns>
    ///    The ledger account for posting credit amounts for the on-account account.
    /// </returns>
    LedgerDimensionDefaultAccount creditAccountOnAcc(ProjFundingSourceRefId _fundingSourceId)
    {
        LedgerDimensionDefaultAccount   ledgerAccount;

        if ((projTable.Type == ProjType::FixedPrice && ForecastModel::find(HeadingSub::Heading,this.modelId()).ProjForecastWIPFixedPrice == NoYes::No) ||
            (projTable.Type == ProjType::Investment && ForecastModel::find(HeadingSub::Heading,this.modelId()).ProjForecastWIPInvestment == NoYes::No))
        {
            ledgerAccount   = super(_fundingSourceId);
        }
        else if (this.forecastUpdateType() == ProjForecastUpdateType::Elimination)
        {
            ledgerAccount   =  projTrans.accruedRevenueOnAccountLedgerDimension(_fundingSourceId);
        }
        else
        {
            ledgerAccount   = projTrans.wipInvoicedOnAccountLedgerDimension(_fundingSourceId);
        }

        return ledgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ledger account that is used for the debit side of posting an on-account transaction.
    /// </summary>
    /// <param name="_fundingSourceId">
    ///    The funding source that is associated with the project contract that will be used by this
    ///    transaction.
    /// </param>
    /// <returns>
    ///    The posting account for debit amounts of on-account transactions.
    /// </returns>
    LedgerDimensionDefaultAccount debitAccountOnAcc(ProjFundingSourceRefId _fundingSourceId)
    {
        LedgerDimensionDefaultAccount   ledgerAccount;

        if ((projTable.Type == ProjType::FixedPrice && ForecastModel::find(HeadingSub::Heading,this.modelId()).ProjForecastWIPFixedPrice == NoYes::No) ||
            (projTable.Type == ProjType::Investment && ForecastModel::find(HeadingSub::Heading,this.modelId()).ProjForecastWIPInvestment == NoYes::No))
        {
            ledgerAccount   = super(_fundingSourceId);
        }
        else if (this.forecastUpdateType() == ProjForecastUpdateType::Elimination) // eleminering
        {
            ledgerAccount   = projTrans.wipInvoicedOnAccountLedgerDimension(_fundingSourceId);
        }
        else
        {
            ledgerAccount   = projTrans.accruedRevenueOnAccountLedgerDimension(_fundingSourceId);
        }

        return ledgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSelfEliminate</Name>
				<Source><![CDATA[
    boolean isSelfEliminate()
    {
        if (projGroup.InvoicePosting  != ProjLedgerStatusOnAcc::Operations)
        {
            return false;
        }

        if (ProjRevRecHelper::getMatchingPrincipleForProjTable(projTable) != ProjMatchingPrincip::SalesValue)
        {
            return false;
        }

        if (ProjRevRecHelper::getCompletePrincipleForProjTable(projTable) != ProjCompletePrincip::CompletedPercentage)
        {
            return false;
        }

        if (projGroup.ProjType        != ProjType::FixedPrice)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer)
    {
        projForecastOnAcc   = _buffer;
        projTrans           = ProjTrans::newProjForecastOnAcc(projForecastOnAcc);

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postOnAccAccrued</Name>
				<Source><![CDATA[
    protected void postOnAccAccrued()
    {
        MapEnumerator fundingAllocationEnumerator;

        if ((projTable.Type == ProjType::FixedPrice && ForecastModel::find(HeadingSub::Heading,this.modelId()).ProjForecastWIPFixedPrice == NoYes::No) ||
            (projTable.Type == ProjType::Investment && ForecastModel::find(HeadingSub::Heading,this.modelId()).ProjForecastWIPInvestment == NoYes::No))
        {
            super();
        }
        else
        {
            if (this.forecastUpdateType() == ProjForecastUpdateType::Invoice)
            {
                if (! this.isSelfEliminate())
                {
                    this.postingType(LedgerPostingType::ProjWIPInvoicedOnAccount);
                    this.costSales(ProjCostSales::Sales);
                    this.ledgerTransDate(ForecastModel::find(HeadingSub::Heading,this.modelId()).UseProjectDate ? projTrans.transDate() : projTrans.forecastInvoiceDate());

                    fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions( fundingSourceList,-projTrans.transTurnoverMST(),projTrans.currencyIdSales()).getEnumerator();
                    while (fundingAllocationEnumerator.moveNext())
                    {
                        if (ProjFundingSource::isExternalFunding(fundingAllocationEnumerator.currentKey()))
                        {
                            this.accountNum(projTrans.wipInvoicedOnAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                            this.amountMST(fundingAllocationEnumerator.currentValue());
                            this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                        }
                    }
                }
                if (projGroup.InvoicePosting == ProjLedgerStatusOnAcc::Operations)
                {
                    this.postingType(LedgerPostingType::ProjOnAccount);
                    this.costSales(ProjCostSales::Sales);
                    if (ForecastModel::find(HeadingSub::Heading,this.modelId()).UseProjectDate)
                    {
                        this.ledgerTransDate(projTrans.transDate());
                    }
                    else
                    {
                        this.ledgerTransDate(projTrans.forecastInvoiceDate());
                    }

                    fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions( fundingSourceList,-projTrans.transTurnoverMST(),projTrans.currencyIdSales()).getEnumerator();
                    while (fundingAllocationEnumerator.moveNext())
                    {
                        if (ProjFundingSource::isExternalFunding(fundingAllocationEnumerator.currentKey()))
                        {
                            this.accountNum(projTrans.accountOnAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                            this.amountMST(fundingAllocationEnumerator.currentValue());
                            this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                        }
                    }

                    if (! this.isSelfEliminate())
                    {
                        this.postingType(LedgerPostingType::ProjAccruedRevenueOnAccount);
                        this.costSales(ProjCostSales::Sales);
                        if (ForecastModel::find(HeadingSub::Heading,this.modelId()).UseProjectDate)
                        {
                            this.ledgerTransDate(projTrans.transDate());
                        }
                        else
                        {
                            this.ledgerTransDate(projTrans.forecastInvoiceDate());
                        }

                        fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions( fundingSourceList,projTrans.transTurnoverMST(),projTrans.currencyIdSales()).getEnumerator();
                        while (fundingAllocationEnumerator.moveNext())
                        {
                            if (ProjFundingSource::isExternalFunding(fundingAllocationEnumerator.currentKey()))
                            {
                                 this.accountNum(projTrans.accruedRevenueOnAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                                this.amountMST(fundingAllocationEnumerator.currentValue());
                                this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                            }
                        }
                    }
                }
            }
            else if (this.forecastUpdateType() == ProjForecastUpdateType::Elimination)
            {
                if (! this.isSelfEliminate())
                {
                    this.postingType(LedgerPostingType::ProjWIPInvoicedOnAccount);
                    this.costSales(ProjCostSales::Sales);
                    this.ledgerTransDate(projTrans.forecastEliminationDate());

                    fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions( fundingSourceList,projTrans.transTurnoverMST(),projTrans.currencyIdSales()).getEnumerator();
                    while (fundingAllocationEnumerator.moveNext())
                    {
                        if (ProjFundingSource::isExternalFunding(fundingAllocationEnumerator.currentKey()))
                        {
                            this.accountNum(projTrans.wipInvoicedOnAccountLedgerDimension(fundingAllocationEnumerator.currentKey()));
                            this.amountMST(fundingAllocationEnumerator.currentValue());
                            this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>