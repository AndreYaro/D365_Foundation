<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ManagedCreditCardProviderProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using Retail = Microsoft.Dynamics.Retail;

internal class ManagedCreditCardProviderProcess extends CreditCardProviderProcess
{
    private UserConnection userConnectionPhaseOne;
    private UserConnection userConnectionPhaseTwo;

    private CreditCardRequestRecorder creditCardRequestRecorder;

    private CreditCardPaymentCardToken lastCreditCardPaymentCardToken;
    private CreditCardConnectorName lastCreditCardConnectorName;
    private CreditCardOperation lastCreditCardOperation;
    private CreditCardAuthorization lastCreditCardAuthorization;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static ManagedCreditCardProviderProcess construct()
    {
        return new ManagedCreditCardProviderProcess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditCardRequestRecorder</Name>
				<Source><![CDATA[
    private CreditCardRequestRecorder getCreditCardRequestRecorder()
    {
        if (!creditCardRequestRecorder)
        {
            creditCardRequestRecorder = CreditCardRequestRecorder::construct(this.getProcessingRecordTableId(), this.getProcessingRecordRecId());
        }
        return creditCardRequestRecorder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessingRecordTableId</Name>
				<Source><![CDATA[
    private TableId getProcessingRecordTableId()
    {
        if (mcrCustPaymTable)
        {
            return tableNum(mcrCustPaymTable);
        }
        else if (salesTable)
        {
            return tableNum(salesTable);
        }

        eventSource.EventWritePaymentsCreditCardProcessSalesOrderAndPaymentsNotFound(
            enum2Symbol(enumNum(CreditCardOperation), this.parmOperation()),
            this.parmCreditCardProcessor(),
            funcName());

        throw error(Error::missingRecord(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessingRecordRecId</Name>
				<Source><![CDATA[
    private RecId getProcessingRecordRecId()
    {
        if (mcrCustPaymTable)
        {
            return mcrCustPaymTable.RecId;
        }
        else if (salesTable)
        {
            return salesTable.RecId;
        }

        eventSource.EventWritePaymentsCreditCardProcessSalesOrderAndPaymentsNotFound(
            enum2Symbol(enumNum(CreditCardOperation), this.parmOperation()),
            this.parmCreditCardProcessor(),
            funcName());

        throw error(Error::missingRecord(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserConnectionPhaseOne</Name>
				<Source><![CDATA[
    private UserConnection getUserConnectionPhaseOne()
    {
        if (userConnectionPhaseOne)
        {
            return userConnectionPhaseOne;
        }
        userConnectionPhaseOne = new UserConnection();
        return userConnectionPhaseOne;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserConnectionPhaseTwo</Name>
				<Source><![CDATA[
    private UserConnection getUserConnectionPhaseTwo()
    {
        if (userConnectionPhaseTwo)
        {
            return userConnectionPhaseTwo;
        }
        userConnectionPhaseTwo = new UserConnection();
        return userConnectionPhaseTwo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerRequest</Name>
				<Source><![CDATA[
    private boolean registerRequest(CreditCardPaymentProperties _requestProperties, CreditCardConnectorName _creditCardConnectorName, CreditCardAuthorization _creditCardAuthorization = '')
    {
        CreditCardRequestRecordContext creditCardRequestConext = new CreditCardRequestRecordContext(
                _creditCardConnectorName,
                this.parmOperation(),
                this.parmMCRPaymentTrackingId(),
                this.parmCreditCardProcessor(),
                this.parmTotalAmountCur(),
                salesTable.SalesId,
                mcrCustPaymTable.LineNum,
                _requestProperties,
                _creditCardAuthorization,
                this.parmSalesInvoiceId());

        boolean isRegisterSucceed = this.getCreditCardRequestRecorder().registerSentRequest(this.getUserConnectionPhaseOne(), creditCardRequestConext);

        if (!isRegisterSucceed)
        {
            creditCardRequestResult = CreditCardRequestResult::RequestConflict;

            eventSource.EventWritePaymentsCreditCardProcessRegisterRequestFailed(
                this.parmSalesTable().SalesId,
                this.parmSalesTable().RecId,
                this.parmMCRCustPaymRecId(),
                enum2Symbol(enumNum(CreditCardOperation), this.parmOperation()),
                _creditCardConnectorName,
                this.parmMCRPaymentTrackingId());
        }
        return isRegisterSucceed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProcessResponse</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean createProcessResponse(str _successDescriptionOverride = '')
    {
        if (mcrCustPaymTable)
        {
            CreditCardResultCacheStore::setLastRequestStatus(new CreditCardResultCacheKey(mcrCustPaymTable), creditCardRequestResult);
        }
        else if (salesTable)
        {
            CreditCardResultCacheStore::setLastRequestStatus(new CreditCardResultCacheKey(salesTable), creditCardRequestResult);
        }
        else
        {
            eventSource.EventWritePaymentsCreditCardProcessSalesOrderAndPaymentsNotFound(
                enum2Symbol(enumNum(CreditCardOperation), this.parmOperation()),
                this.parmCreditCardProcessor(),
                funcName());

            throw error(Error::missingRecord(funcName()));
        }

        return this.createProcessResponseInternal(_successDescriptionOverride);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProcessResponseInternal</Name>
				<Source><![CDATA[
    private boolean createProcessResponseInternal(str _successDescriptionOverride = '', boolean _skipUpdate = true)
    {
        if (!this.processSucceed() &&
            (creditCardRequestResult == CreditCardRequestResult::RequestInconsistent ||
            creditCardRequestResult == CreditCardRequestResult::RequestConflict))
        {
            return false;
        }

        CreditCardApprovalRejectReason description = strLen(_successDescriptionOverride) ? _successDescriptionOverride : this.getRejectionReason();;

        if (RetailIncrementalCaptureFeatureExposure::isEnabled())
        {
            CreditCard_ExtendedParameters creditCard_ExtendedParameters = CreditCard::extendedParameters;
            creditCard_ExtendedParameters.parmInitCreditCardAuthTrans_ProcessorErrorCode(firstErrorCode);
        }

        this.getUserConnectionPhaseTwo().ttsbegin();

        CreditCardRequestRecordContext creditCardRequestConext = new CreditCardRequestRecordContext(
                lastCreditCardConnectorName,
                this.parmOperation(),
                this.parmMCRPaymentTrackingId(),
                this.parmCreditCardProcessor(),
                this.parmTotalAmountCur(),
                salesTable.SalesId,
                mcrCustPaymTable.LineNum);

        boolean markRequestSucceed;

        if (isNetworkError)
        {
            eventSource.EventWritePaymentsCreditCardProcessMarkRequestCompleteFailed(
                this.parmSalesTable().SalesId,
                this.parmSalesTable().RecId,
                this.parmMCRCustPaymRecId(),
                enum2Symbol(enumNum(CreditCardOperation), this.parmOperation()),
                CreditCardProcessors::findActiveProcessor().Name,
                this.parmMCRPaymentTrackingId());

            markRequestSucceed = this.getCreditCardRequestRecorder().markRequestFailed(this.getUserConnectionPhaseTwo(), creditCardRequestConext);
        }
        else
        {
            markRequestSucceed = this.getCreditCardRequestRecorder().markRequestFinished(this.getUserConnectionPhaseTwo(), creditCardRequestConext);
        }

        if (!markRequestSucceed)
        {
            this.getUserConnectionPhaseTwo().ttsabort();
            return false;
        }

        switch (this.parmOperation())
        {
            case CreditCardOperation::Authorize:
                CreditCard::recordAuthorizationWithConnection(providerResult,
                                            salesTable,
                                            this.parmCreditCardProcessor(),
                                            this.processSucceed(),
                                            description,
                                            cardTokenRequest,
                                            _skipUpdate,
                                            mcrCustPaymTable,
                                            this.getUserConnectionPhaseTwo());

                if (RetailNonRecurringTokenFeatureExposure::isEnabled()
                    && mcrCustPaymTable.IsNonRecurring == NoYes::Yes
                    && this.processSucceed())
                {
                    var newCreditCardCust = CreditCard::createNonRecurringCreditCardFromAuthResponse(providerResult, mcrCustPaymTable.RecId, mcrCustPaymTable.CustAccount, this.parmCreditCardProcessor());
                    eventSource.EventWriteRetailNonRecurringTokenAuthorized(mcrCustPaymTable.RecId, newCreditCardCust.RecId, this.processSucceed());
                    RetailPaymentAccessTokenContext::instance().removeAccessCode(mcrCustPaymTable.RecId);
                }
                break;

            case CreditCardOperation::Reauthorize:
                CreditCard::recordReauthorization(providerResult,
                                            salesTable,
                                            this.parmCreditCardProcessor(),
                                            this.processSucceed(),
                                            description,
                                            cardTokenRequest,
                                            true,
                                            mcrCustPaymTable);
                break;

            case CreditCardOperation::CaptureAfterAuthorize:
                CreditCard::recordCaptureWithConnection(providerResult,
                                      salesTable,
                                      this.parmSalesInvoiceId(),
                                      this.parmCreditCardProcessor(),
                                      false,
                                      this.processSucceed(),
                                      description,
                                      cardTokenRequest,
                                      _skipUpdate,
                                      mcrCustPaymTable,
                                      this.getUserConnectionPhaseTwo());
                break;
            case CreditCardOperation::AuthorizeAndCapture:
                CreditCard::recordCaptureWithConnection(providerResult,
                                      salesTable,
                                      this.parmSalesInvoiceId(),
                                      this.parmCreditCardProcessor(),
                                      true,
                                      this.processSucceed(),
                                      description,
                                      cardTokenRequest,
                                      _skipUpdate,
                                      mcrCustPaymTable,
                                      this.getUserConnectionPhaseTwo());
                if (this.processSucceed())
                {
                    this.updatePreviousCreditCardAuthTrans(this.getUserConnectionPhaseTwo());
                }
                break;
            case CreditCardOperation::Refund:
                CreditCard_ExtendedParameters creditCard_ExtendedParameters = CreditCard::extendedParameters;
                creditCard_ExtendedParameters.parmRecordRefund_SalesInvoiceId(this.parmSalesInvoiceId());

                CreditCard::recordRefundWithConnection(providerResult,
                                     salesTable,
                                     this.parmCreditCardProcessor(),
                                     this.processSucceed(),
                                     description,
                                     cardTokenRequest,
                                     _skipUpdate,
                                     mcrCustPaymTable,
                                     this.getUserConnectionPhaseTwo());

                creditCard_ExtendedParameters.parmRecordRefund_SalesInvoiceId(null);
                break;
            case CreditCardOperation::Void:
                CreditCard::recordVoidWithConnection(providerResult,
                                   salesTable,
                                   this.parmCreditCardProcessor(),
                                   this.processSucceed(),
                                   description,
                                   cardTokenRequest,
                                   _skipUpdate,
                                   mcrCustPaymTable,
                                   this.getUserConnectionPhaseTwo());
                break;
            case CreditCardOperation::Balance:
                CreditCard::recordBalanceWithConnection(providerResult,
                                salesTable,
                                this.parmCreditCardProcessor(),
                                this.processSucceed(),
                                description,
                                cardTokenRequest,
                                _skipUpdate,
                                mcrCustPaymTable,
                                this.paramRetailExternalGiftCard(),
                                this.getUserConnectionPhaseTwo());
                break;
            case CreditCardOperation::Activation:
                CreditCard::recordActivationWithConnection(providerResult,
                                salesTable,
                                this.parmCreditCardProcessor(),
                                this.processSucceed(),
                                description,
                                cardTokenRequest,
                                _skipUpdate,
                                mcrCustPaymTable,
                                this.paramRetailExternalGiftCard(),
                                this.getUserConnectionPhaseTwo());
                break;
            default:
                this.getUserConnectionPhaseTwo().ttsabort();
                throw error(strFmt("@SYS122465", this.parmOperation()));
        }
        this.getUserConnectionPhaseTwo().ttscommit();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePreviousCreditCardAuthTrans</Name>
				<Source><![CDATA[
    private void updatePreviousCreditCardAuthTrans(UserConnection _userConnection)
    {
        CreditCardAuthTrans creditCardAuthTransAuthorized = CreditCard::findValidPreApproval(salesTable, mcrCustPaymTable);

        if (creditCardAuthTransAuthorized)
        {
            CreditCardAuthTrans::settlePreapprovalTransactionWithUserConnection(creditCardAuthTransAuthorized.RecId, _userConnection, '');
        }
        else
        {
            // The process should not be blocked here.

            eventSource.EventWritePaymentsCreditCardProcessAuthorizationNotFoundDuringCapture(
                this.parmSalesTable().SalesId,
                this.parmSalesTable().RecId,
                this.parmMCRCustPaymRecId(),
                any2Str(RetailCommercePaymentsFeatureHelper::commercePaymentsEnabledForOrder(this.parmSalesTable(), funcName())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProperties</Name>
				<Source><![CDATA[
    private CreditCardPaymentProperties getProperties(CreditCardPaymentProperties _properties, CreditCardOperation _operation)
    {
        CreditCardPaymentProperties properties;
        switch (_operation)
        {
            case CreditCardOperation::Authorize:
                properties = this.getAuthRequest();
                break;
            case CreditCardOperation::Reauthorize:
                properties = this.getReauthorizationRequest();
                break;
            case CreditCardOperation::Activation:
                properties = this.getActivationRequest();
                break;
            case CreditCardOperation::Balance:
                properties = this.getBalanceRequest();
                break;
            case CreditCardOperation::Refund:
                properties = this.getRefundRequest();
                break;
            case CreditCardOperation::Void:
                properties = this.getVoidRequest();
                break;
            case CreditCardOperation::CaptureAfterAuthorize:
            case CreditCardOperation::AuthorizeAndCapture:
                properties = this.getCaptureRequest(_properties);
                break;
            default:
                this.updateProcessorResultContext(false, strFmt("@SYS122465", this.parmOperation()));
                break;
        }
        return properties;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConnectorName</Name>
				<Source><![CDATA[
    private CreditCardConnectorName getConnectorName(CreditCardPaymentProperties _properties)
    {
        return CreditCard::addMerchantAccountProperties(_properties);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeCreditCardRequest</Name>
				<Source><![CDATA[
    private CreditCardRequestResultContext executeCreditCardRequest(CreditCardPaymentProperties _properties, CreditCardConnectorName _connectorName, CreditCardOperation _operation)
    {
        CreditCardRequestSubmitter submitter = CreditCardRequestSubmitter::construct(_properties, _connectorName, _operation);
        return submitter.submitRequest();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRequest</Name>
				<Source><![CDATA[
    private void processRequest(
        CreditCardOperation _operation,
        CreditCardPaymentProperties _properties = null,
        CreditCardAuthorization _authorization = null,
        boolean _byPassCheck = false)
    {
        creditCardRequestResult = CreditCardRequestResult::RequestNone;
        if (!_byPassCheck)
        {
            boolean canProceed = conPeek(CreditCardRequestRecorder::preCheck(this.getProcessingRecordTableId(), this.getProcessingRecordRecId(), _operation), 2);

            if (!canProceed)
            {
                creditCardRequestResult = CreditCardRequestResult::RequestInconsistent;
                this.updateProcessorResultContext(false, "@CashManagement:CreditCardInconsistentRequest", "@CashManagement:CreditCardInconsistentRequest");
                return;
            }
        }

        this.tryInitializeIdempotencyKey();
        CreditCardPaymentProperties properties = this.getProperties(_properties, _operation);
        cardTokenRequest = properties.toXmlString();
        lastCreditCardConnectorName = this.getConnectorName(properties);

        if (!this.registerRequest(properties, lastCreditCardConnectorName, _authorization))
        {
            this.updateProcessorResultContext(false, "@CashManagement:CreditCardInternalError", "@CashManagement:CreditCardInternalError");
            return;
        }

        CreditCardRequestResultContext resultContext = this.executeCreditCardRequest(properties, lastCreditCardConnectorName, _operation);
        this.adoptRequestResultContext(resultContext);
        this.handleResponseInternal(resultContext.parmResponse(), _operation, _authorization);

        this.updateCreditCardRequestResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCreditCardRequestResult</Name>
				<Source><![CDATA[
    private void updateCreditCardRequestResult()
    {
        if (creditCardRequestResult == CreditCardRequestResult::RequestNone)
        {
            if (this.processSucceed())
            {
                creditCardRequestResult = CreditCardRequestResult::RequestSucceed;
            }
            else
            {
                creditCardRequestResult = CreditCardRequestResult::RequestFail;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adoptRequestResultContext</Name>
				<Source><![CDATA[
    private void adoptRequestResultContext(CreditCardRequestResultContext _resultContext)
    {
        this.updateProcessorResultContext(_resultContext.parmProcessSucceed(), _resultContext.parmResponseMessage(), _resultContext.parmDisplayedMessage());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProcessorResultContext</Name>
				<Source><![CDATA[
    private void updateProcessorResultContext(boolean _processSucceed, str _responseMessage, str _displayedMessage = '')
    {
        processSucceed = _processSucceed;
        responseMessage = _responseMessage;
        if (_displayedMessage)
        {
            displayedMessage = _displayedMessage;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleResponseInternal</Name>
				<Source><![CDATA[
    private void handleResponseInternal(Retail.PaymentSDK.Portable.Response _response, CreditCardOperation _operation, CreditCardAuthorization _authorization)
    {
        switch (_operation)
        {
            case CreditCardOperation::Authorize:
                this.handleAuthResponse(_response);
                break;
            case CreditCardOperation::Activation:
                this.handleActivationResponse(_response);
                break;
            case CreditCardOperation::Balance:
                this.handleBalanceResponse(_response);
                break;
            case CreditCardOperation::Refund:
                this.handleRefundResponse(_response);
                break;
            case CreditCardOperation::Void:
                this.handleVoidResponse(_response);
                break;
            case CreditCardOperation::CaptureAfterAuthorize:
            case CreditCardOperation::AuthorizeAndCapture:
                this.handleCaptureResponse(_response, _authorization);
                break;
            default:
                this.updateProcessorResultContext(false, strFmt("@SYS122465", this.parmOperation()));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refundCheck</Name>
				<Source><![CDATA[
    private boolean refundCheck()
    {
        if (!creditCardTrans && mcrCustPaymTable && !mcrCustPaymTable.allowAlternatePaymentMethod())
        {
            this.updateProcessorResultContext(false, "@SYS327119");
            return false;
        }
        else if (!CreditCard::sameCard(salesTable, creditCardTrans) && mcrCustPaymTable && !mcrCustPaymTable.allowAlternatePaymentMethod())
        {
            this.updateProcessorResultContext(false, "@SYS327136", "@SYS327136");
            return false;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>replay</Name>
				<Source><![CDATA[
    private boolean replay()
    {
        CreditCardPaymentProperties properties = CreditCardPaymentProperties::fromXmlString(lastCreditCardPaymentCardToken);

        CreditCardRequestRecordContext creditCardReplayContext = new CreditCardRequestRecordContext(
            lastCreditCardConnectorName,
            lastCreditCardOperation,
            this.parmMCRPaymentTrackingId(),
            this.parmCreditCardProcessor(),
            this.parmTotalAmountCur(),
            salesTable.SalesId,
            mcrCustPaymTable.LineNum,
            properties,
            lastCreditCardAuthorization,
            this.parmSalesInvoiceId());

        ICreditCardRequestReplayer replayer = CreditCardRequestReplayerBase::construct(creditCardReplayContext);

        if (!replayer.canReplay())
        {
            warning("@CashManagement:CreditCardMissingIdempotencyKey");
            return false;
        }

        if (!this.registerRequest(properties, lastCreditCardConnectorName, lastCreditCardAuthorization))
        {
            warning("@CashManagement:CreditCardInternalConflict");
            return false;
        }

        CreditCardRequestResultContext resultContext = replayer.replayRequest();
        this.adoptRequestResultContext(resultContext);

        this.handleResponseInternal(resultContext.parmResponse(), lastCreditCardOperation, creditCardTrans.Authorization);

        boolean result = this.createProcessResponseInternal('', false);

        this.getUserConnectionPhaseOne().finalize();
        this.getUserConnectionPhaseTwo().finalize();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeResent</Name>
				<Source><![CDATA[
    private boolean canBeResent()
    {
        return CreditCardProcessHelper::idempotencyEnabled()
            && this.parmOperation() == CreditCardOperation::Resend
            && CreditCardProcess::canResendProceed(this.getProcessingRecordTableId(), this.getProcessingRecordRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryInitializeIdempotencyKey</Name>
				<Source><![CDATA[
    private void tryInitializeIdempotencyKey()
    {
        if (this.parmMCRPaymentTrackingId() == null)
        {
            this.parmMCRPaymentTrackingId(CreditCardProcessHelper::generateIdempotencyKey());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    public boolean submit()
    {
        if ((this.parmOperation() != CreditCardOperation::Refund && this.parmTotalAmountCur() < 0))
        {
            this.updateProcessorResultContext(false, "@SYS327120");
            return true;
        }

        creditCardRequestResult = CreditCardRequestResult::RequestNone;
        Microsoft.Dynamics.Ax.Xpp.ErrorException errorException;

        try
        {
            switch (this.parmOperation())
            {
                case CreditCardOperation::Authorize:
                case CreditCardOperation::Void:
                case CreditCardOperation::Activation:
                case CreditCardOperation::Balance:
                case CreditCardOperation::Reauthorize:
                    this.processRequest(this.parmOperation());
                    break;
                case CreditCardOperation::Refund:
                    if (this.refundCheck())
                    {
                        this.processRequest(this.parmOperation());
                    }
                    break;
                case CreditCardOperation::CaptureAfterAuthorize:
                    this.processRequest(this.parmOperation(), this.getCardToken(creditCardTrans, false), creditCardTrans.Authorization);
                    break;
                case CreditCardOperation::AuthorizeAndCapture:
                    this.parmOperation(CreditCardOperation::Authorize);
                    this.processRequest(this.parmOperation());
                    this.createProcessResponse('');

                    if (this.processSucceed())
                    {
                        this.parmOperation(CreditCardOperation::AuthorizeAndCapture);
                        this.parmMCRPaymentTrackingId(CreditCardProcessHelper::generateIdempotencyKey());
                        this.resetMCRPaymentTrackingIdForIncrementalCapture();
                        this.processRequest(this.parmOperation(), providerResult.parmProperties(), providerResult.parmAuthorization());
                    }
                    break;
                default:
                    this.updateProcessorResultContext(false, strFmt("@SYS122465", this.parmOperation()));
                    break;
            }
        }
        catch(Exception::CLRError)
        {

            this.handleSubmitFailedException(enum2Symbol(enumNum(Exception), Exception::CLRError), this.getClrExceptionMessage(), "@SYS116968");
        }
        catch (errorException)
        {
            this.handleSubmitFailedException(enum2Symbol(enumNum(Exception), Exception::Error), errorException.ToString(), "@SYS116968");
        }
        catch
        {
            this.handleSubmitFailedException('', responseMessage ? responseMessage : "@SYS34720", "@SYS34720");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleSubmitFailedException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the exceptions that occur during submit.
    /// </summary>
    /// <param name = "_exceptionType">The type of exception.</param>
    /// <param name = "_exceptionMessage">The exception message.</param>
    /// <param name = "_displayedMessage">The message to be displayed to the user.</param>
    private void handleSubmitFailedException(str _exceptionType, str _exceptionMessage, str _displayedMessage)
    {
        eventSource.EventWritePaymentsCreditCardProcessSubmitFailed(
            this.parmSalesTable().SalesId,
            this.parmSalesTable().RecId,
            this.parmMCRCustPaymRecId(),
            _exceptionType,
            _displayedMessage);

        this.updateProcessorResultContext(false, _exceptionMessage, _displayedMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetMCRPaymentTrackingIdForIncrementalCapture</Name>
				<Source><![CDATA[
    private void resetMCRPaymentTrackingIdForIncrementalCapture()
    {
        if (RetailIncrementalCaptureFeatureExposure::isEnabled())
        {
            // Now process capture, with its own tracking id.
            this.parmMCRPaymentTrackingId(this.getMCRPaymentTrackingId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public boolean process(boolean _showSuccessMessage = true, str _successDescriptionOverride = '')
    {
        boolean result = super(_showSuccessMessage, _successDescriptionOverride);
        this.getUserConnectionPhaseOne().finalize();
        this.getUserConnectionPhaseTwo().finalize();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resendLastRequest</Name>
				<Source><![CDATA[
    protected internal boolean resendLastRequest()
    {
        if (!this.canBeResent())
        {
            return false;
        }

        CreditCardRequest creditCardRequest = CreditCardRequest::getLastSentRecordContext(this.getProcessingRecordTableId(), this.getProcessingRecordRecId());
        lastCreditCardPaymentCardToken = creditCardRequest.RequestPayload;
        lastCreditCardConnectorName = creditCardRequest.CreditCardConnectorName;
        lastCreditCardOperation = creditCardRequest.CreditCardOperation;
        lastCreditCardAuthorization = creditCardRequest.Authorization;
        cardTokenRequest = CreditCardPaymentProperties::convertPropertyArrayToXML(CreditCardPaymentProperties::fromXmlString(lastCreditCardPaymentCardToken).toArray());

        this.parmMCRPaymentTrackingId(creditCardRequest.IdempotencyKey);
        this.parmSalesInvoiceId(creditCardRequest.SalesInvoiceId);
        this.parmOperation(lastCreditCardOperation);
        this.parmTotalAmountCur(creditCardRequest.AmountCur);
        this.initProcessor(creditCardRequest.CreditCardProcessors);

        return this.replay();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCreditCardRequestResultForNetworkError</Name>
				<Source><![CDATA[
    protected internal void setCreditCardRequestResultForNetworkError(CreditCardPaymentErrors _errors)
    {
        if (_errors.containsNetworkError())
        {
            creditCardRequestResult = CreditCardRequestResult::RequestNetworkError;
            isNetworkError = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditCardRequestResult</Name>
				<Source><![CDATA[
    protected internal CreditCardRequestResult getCreditCardRequestResult()
    {
        return this.creditCardRequestResult;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>