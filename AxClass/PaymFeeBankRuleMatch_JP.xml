<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymFeeBankRuleMatch_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles querying whether the given custVend bank meets the payment fee bank rule.
/// </summary>
public class PaymFeeBankRuleMatch_JP
{
    private const str FeatureReference = 'JP-00013';

    BankGroupId custVendBankGroup;
    SelectableDataArea custVendCompany;
    BankGroupId companyBankGroup;
    PaymFeeBankRuleQuery_JP paymFeeBankRuleQuery_JP;

    TableId queryTableId;
    FieldId bankGroupFieldId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>existMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decide whether the custVend bank group and company group meet the payment fee bank set rule.
    /// </summary>
    /// <param name="_paymFeeBankRuleRecId">
    /// Rec Id of the payment fee bank rule.
    /// </param>
    /// <returns>
    /// Whether the query will return at least one result.
    /// </returns>
    public boolean existMatch(RefRecId _paymFeeBankRuleRecId)
    {
        QueryRun queryRun;
        Query query;
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;

        boolean existMatch = false;

        if (companyBankGroup && custVendBankGroup)
        {
            query = paymFeeBankRuleQuery_JP.buildQuery(_paymFeeBankRuleRecId);

            qbds = query.dataSourceTable(queryTableId);
            qbr = qbds.addRange(bankGroupFieldId);
            qbr.value(custVendBankGroup);

            changeCompany(custVendCompany)
            {
                queryRun = new QueryRun(query);
                while (queryRun.next())
                {
                    existMatch = true;
                    break;
                }
            }
        }

        return existMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankGroupFieldId</Name>
				<Source><![CDATA[
        public FieldId parmBankGroupFieldId(FieldId _bankGroupFieldId = bankGroupFieldId)
    {
        bankGroupFieldId = _bankGroupFieldId;
        return bankGroupFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanyBankGroup</Name>
				<Source><![CDATA[
        protected BankGroupId parmCompanyBankGroup(BankGroupId _companyBankGroup = companyBankGroup)
    {
        companyBankGroup = _companyBankGroup;
        return _companyBankGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendBankAccount</Name>
				<Source><![CDATA[
        protected BankGroupId parmCustVendBankAccount(BankGroupId _custVendBankGroup = custVendBankGroup)
    {
        custVendBankGroup = _custVendBankGroup;
        return custVendBankGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendCompany</Name>
				<Source><![CDATA[
        protected SelectableDataArea parmCustVendCompany(SelectableDataArea _custVendCompany = custVendCompany)
    {
        custVendCompany = _custVendCompany;
        return custVendCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymFeeBankRuleQuery_JP</Name>
				<Source><![CDATA[
        protected PaymFeeBankRuleQuery_JP parmPaymFeeBankRuleQuery_JP(paymFeeBankRuleQuery_JP _paymFeeBankRuleQuery_JP = paymFeeBankRuleQuery_JP)
    {
        paymFeeBankRuleQuery_JP = _paymFeeBankRuleQuery_JP;
        return paymFeeBankRuleQuery_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryTableId</Name>
				<Source><![CDATA[
        public TableId parmQueryTableId(TableId _queryTableId = queryTableId)
    {
        queryTableId = _queryTableId;
        return queryTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a new instance in valid state.
    /// </summary>
    /// <param name="_companyBankGroup">
    /// Bank group of the company bank account
    /// </param>
    /// <param name="_custVendCompany">
    /// Bank group of the third-party bank account
    /// </param>
    /// <param name="_custVendBankGroup">
    /// Bank group of the third-party bank account
    /// </param>
    /// <returns>
    /// new instance of the class in valid state
    /// </returns>
    public static PaymFeeBankRuleMatch_JP construct(
        BankGroupID _companyBankGroup,
        SelectableDataArea _custVendCompany,
        BankGroupID _custVendBankGroup)
    {
        PaymFeeBankRuleView_JP paymFeeBankRuleView_JP;
        PaymFeeBankRuleMatch_JP paymFeeBankRuleMatch_JP;

        // Currenlty limited to PaymFeeBankRuleView_JP
        paymFeeBankRuleMatch_JP = new PaymFeeBankRuleMatch_JP();
        paymFeeBankRuleMatch_JP.parmQueryTableId(tableNum(PaymFeeBankRuleView_JP));
        paymFeeBankRuleMatch_JP.parmBankGroupFieldId(fieldNum(PaymFeeBankRuleView_JP, BankGroupId));

        select firstOnly * from paymFeeBankRuleView_JP where paymFeeBankRuleView_JP.BankGroupId == _companyBankGroup;

        paymFeeBankRuleMatch_JP.parmCompanyBankGroup(_companyBankGroup);
        paymFeeBankRuleMatch_JP.parmCustVendCompany(_custVendCompany);
        paymFeeBankRuleMatch_JP.parmCustVendBankAccount(_custVendBankGroup);

        paymFeeBankRuleMatch_JP.parmPaymFeeBankRuleQuery_JP(PaymFeeBankRuleQuery_JP::construct(tableNum(PaymFeeBankRuleView_JP), paymFeeBankRuleView_JP));

        return paymFeeBankRuleMatch_JP;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>