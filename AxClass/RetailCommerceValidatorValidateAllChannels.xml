<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidatorValidateAllChannels</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCommerceValidatorValidateAllChannels extends RunBaseBatch
{
    container validationsCont;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        validationsCont
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the current instance of the <c>RetailCommerceValidatorValidateAllChannels</c> class.
    /// </summary>
    /// <returns>A container that contains the current instance of <c>RetailCommerceValidatorBatchTaskRunner</c>.</returns>
    public container pack()
    {
        container ret;

        ret = [#CurrentVersion,#CurrentList];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the <paramref name="_packedClass"/> parameter to the current instance of <c>RetailCommerceValidatorValidateAllChannels</c>.
    /// </summary>
    /// <param name = "packedClass">The container from which to deserialize the instance.</param>
    /// <returns>true if deserialization was successful; otherwise, false.</returns>
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    ///    return false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value for the parameter <c>canRunInNewSession</c> indicating if the Job can run in a new session.
    /// </summary>
    /// <returns>A boolean indicating when the job can run in a new session.</returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidationsContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the input parameter validations list container.
    /// </summary>
    /// <param name = "_validationsCont">The container contains validation ids.</param>
    /// <returns>The container of validations.</returns>
    public container parmValidationsContainer(container _validationsCont = validationsCont)
    {
        validationsCont = _validationsCont;

        return validationsCont;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes validations.
    /// </summary>
    public void run()
    {
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();

        int contLength = conLen(validationsCont);

        for (int i = 1; i <= contLength; i++)
        {
            RetailCommerceValidatorId validationId = conPeek(validationsCont,i);

            ttsbegin;
            RetailCommerceValidatorValidateAllChannels::executeValidation(validationId);
            ttscommit;

            sleep(parameters.PauseInMsForNextValidationExecution);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the validation
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    private static void executeValidation(RetailCommerceValidatorId _validationId)
    {
        System.Exception exception;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();

        try
        {
            if (RetailCommerceValidator::find(_validationId).RecId)
            {
                ttsbegin;
                RetailCommerceValidator::execute(_validationId,RetailCommerceValidatorExecutionMode::ExecuteAll);
                ttscommit;
            }
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId,strFmt("@Retail:RetailCommerceValidatorIssueOccurredInValidateAll", classStr(RetailCommerceValidatorValidateAllChannels)), xSession::currentRetryCount(), false, exception);

                // Reset the status back to Not started
                RetailCommerceValidator::resetValidatorStatusToNotStarted(_validationId);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorIssueOccurredInValidateAll", classStr(RetailCommerceValidatorValidateAllChannels)), xSession::currentRetryCount(), true, exception);
                retry;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>