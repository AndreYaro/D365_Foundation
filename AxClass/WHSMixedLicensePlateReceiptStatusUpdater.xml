<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMixedLicensePlateReceiptStatusUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSMixedLicensePlateReceiptStatusUpdater implements System.IDisposable
{
    private RefRecId lpReceiptRecId;
    private boolean wasSuccess = false;
    private int startInfologLine = infologLine();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    public void Dispose()
    {
        if (wasSuccess)
        {
            ttsbegin;

            this.setReceiptStatusReceived();
            this.clearErrorLog();

            ttscommit;
        }
        else
        {
            // Main transaction has modified the mixed LP receiving record and holds a lock on it.
            // We need to abort the main transaction to prevent deadlocks.
            while (appl.ttsLevel() != 0)
            {
                ttsabort;
            }

            // Use separate connection to shield us from errors in main session connection.
            using (xConnection connection = new xConnection(false))
            {
                connection.tts_begin();

                this.setReceiptStatusError(connection);
                this.saveErrorLog(connection);

                connection.tts_commit();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSuccessful</Name>
				<Source><![CDATA[
    internal void setSuccessful()
    {
        wasSuccess = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForMixedLPReceipt</Name>
				<Source><![CDATA[
    internal static WHSMixedLicensePlateReceiptStatusUpdater newForMixedLPReceipt(RefRecId _mixedLicensePlateReceiptRecId)
    {
        return new WHSMixedLicensePlateReceiptStatusUpdater(_mixedLicensePlateReceiptRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReceiptStatusReceived</Name>
				<Source><![CDATA[
    private void setReceiptStatusReceived()
    {
        WHSMixedLicensePlateReceipt lpReceipt = this.findMixedLPReceiptForUpdate();
        
        if (lpReceipt)
        {
            lpReceipt.ReceiptStatus = WHSMixedLicensePlateReceiptStatus::Received;
            lpReceipt.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReceiptStatusError</Name>
				<Source><![CDATA[
    private void setReceiptStatusError(xConnection _connection = null)
    {
        WHSMixedLicensePlateReceipt lpReceipt = this.findMixedLPReceiptForUpdate(_connection);
        
        if (lpReceipt)
        {
            lpReceipt.ReceiptStatus = WHSMixedLicensePlateReceiptStatus::Error;
            lpReceipt.MixedLPComplete = NoYes::No;
            lpReceipt.CurrentUser = '';
            lpReceipt.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearErrorLog</Name>
				<Source><![CDATA[
    private void clearErrorLog()
    {
        WHSMixedLicensePlateReceiptLog receiptLog = WHSMixedLicensePlateReceiptLog::findOrCreateForMixedLicensePlateReceipt(
            lpReceiptRecId,
            true);
        receiptLog.Info = conNull();
        receiptLog.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveErrorLog</Name>
				<Source><![CDATA[
    private void saveErrorLog(xConnection _connection)
    {
        WHSMixedLicensePlateReceiptLog receiptLog = WHSMixedLicensePlateReceiptLog::findOrCreateForMixedLicensePlateReceipt(
            lpReceiptRecId,
            true,
            _connection.getconnection());
        receiptLog.Info = this.getInfologMessages();
        receiptLog.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInfologMessages</Name>
				<Source><![CDATA[
    private container getInfologMessages()
    {
        container data;
        SysInfologEnumerator filteredInfoEnumerator = SysInfologEnumerator::newData(data);

        container fullInfo = infolog().copy(startInfologLine + 1, infologLine());
        SysInfologEnumerator fullInfoEnumerator = SysInfologEnumerator::newData(fullInfo);
        while (fullInfoEnumerator.moveNext())
        {
            if (fullInfoEnumerator.currentException() == Exception::Info)
            {
                continue;
            }

            filteredInfoEnumerator.add(
                fullInfoEnumerator.currentException(),
                fullInfoEnumerator.currentMessage(),
                fullInfoEnumerator.currentHelpUrl(),
                fullInfoEnumerator.currentActionClassId(),
                fullInfoEnumerator.currentActionClassData());
        }

        return filteredInfoEnumerator.parmData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMixedLPReceiptForUpdate</Name>
				<Source><![CDATA[
    private WHSMixedLicensePlateReceipt findMixedLPReceiptForUpdate(xConnection _connection = null)
    {
        WHSMixedLicensePlateReceipt lpReceipt;

        if (_connection && _connection.getconnection())
        {
            lpReceipt.setConnection(_connection.getconnection());
        }

        select firstonly forupdate lpReceipt
            where lpReceipt.RecId == lpReceiptRecId;

        return lpReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(RefRecId _mixedLPReceiptRecId)
    {
        if (!_mixedLPReceiptRecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        lpReceiptRecId = _mixedLPReceiptRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>