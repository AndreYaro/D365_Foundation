<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceBasisCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for retail prices basis calculation.
/// </summary>
/// <remarks>
/// Child should represent the calculation model related with enum RetailPriceBasisType.
/// </remarks>
abstract public class RetailPriceBasisCalc
{
    UnitOfMeasureSymbol unitIdFrom;
    UnitOfMeasureSymbol unitIdTo;
    ItemID itemId;
    Price priceCurrencyOrig;
    Price priceCurrencyTo;
    InventDim inventDim;
    CustVendAC accountId;
    PriceGroupId priceGroupId;
    CurrencyCode currencyCodeFrom;
    CurrencyCode currencyCodeOrig;
    CurrencyCode currencyCodeTo;
    ExchangeRateTypeRecId exchangeRateTypeRecId;
    RetailPriceBasisDate datePrice;
    RetailPriceBasisType priceBasisType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates price basis, price basis in original currency, original currency using received parameters.
    /// </summary>
    /// <remarks>
    /// Use <c>getPriceCurrencyOrig</c>, <c>getCurrencyOrig</c>, <c>getPriceCurrencyTo</c> methods to get price calculated.
    /// </remarks>
    public void calculate()
    {
        this.initParametersByDefaultValues();

        this.calculatePriceCurrencyFrom();

        this.convertPriceToCurrencyTo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePriceCurrencyFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate price basis using <c>CurrencyFrom</c> currency.
    /// </summary>
    abstract protected void calculatePriceCurrencyFrom()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPriceToCurrencyTo</Name>
				<Source><![CDATA[
    private void convertPriceToCurrencyTo()
    {
        CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), datePrice);

        exchangeRateTypeRecId = exchangeRateTypeRecId ? exchangeRateTypeRecId : Ledger::defaultExchangeRateType();

        currencyExchangeHelper.parmExchangeRateTypeRecId(exchangeRateTypeRecId);

        priceCurrencyTo = currencyExchangeHelper.calculateCurrencyToCurrency(
            currencyCodeOrig ? currencyCodeOrig : CompanyInfoHelper::standardCurrency(),
            currencyCodeTo ? currencyCodeTo : CompanyInfoHelper::standardCurrency(),
            priceCurrencyOrig,
            true
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPriceUnits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert Price Units.
    /// </summary>
    /// <param name = "_price">The price to be converted.</param>
    /// <param name = "_priceUnit">The Unit Price to convert to.</param>
    /// <param name = "_quantity">The Quantity to be converted.</param>
    protected void convertPriceUnits(Price _price, PriceUnit _priceUnit, Qty _quantity)
    {
        PriceConvertFactory priceConvertFactory;

        priceConvertFactory = PriceConvertFactory::newItemPrice(itemId,
                                                                unitIdFrom,
                                                                _price,
                                                                _priceUnit,
                                                                0,
                                                                _quantity,
                                                                currencyCodeOrig);

        priceConvertFactory.parmNewUnitId(unitIdTo);
        priceConvertFactory.parmTransDate(datePrice);
        priceConvertFactory.parmNewPriceUnit(1);
        priceConvertFactory.parmInventDimId(inventDim.inventDimId);

        priceCurrencyOrig = priceConvertFactory.priceConvert().parmPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyOrig</Name>
				<Source><![CDATA[
    /// <summary>
    /// Original currency. Related with <c>CurrencyFrom</c>, but could be differ.
    /// </summary>
    /// <returns><c>CurrencyOrig</c> currency.</returns>
    /// <remarks>
    /// Use <c>calculate</c> method to initialize the original currency.
    /// </remarks>
    public CurrencyCode getCurrencyOrig()
    {
        return currencyCodeOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateTypeRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exchange rate type, which was used for currency conversion.
    /// </summary>
    /// <returns>
    /// Exchange rate type RecId.
    /// </returns>
    /// <remarks>
    /// Use <c>calculate</c> method to initialize the excange rate type.
    /// </remarks>
    public ExchangeRateTypeRecId getExchangeRateTypeRecId()
    {
        return exchangeRateTypeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceCurrencyOrig</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculated price in original currency. Related with <c>CurrencyOrig</c>.
    /// </summary>
    /// <returns>
    /// Price basis in the <c>CurrencyOrig</c> currency.
    /// </returns>
    /// <remarks>
    /// Use <c>calculate</c> method to calculate the price.
    /// </remarks>
    public Price getPriceCurrencyOrig()
    {
        return priceCurrencyOrig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceCurrencyTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculated price, converted to <c>CurrencyTo</c>.
    /// </summary>
    /// <returns>
    /// Price basis in the <c>CurrencyTo</c> currency.
    /// </returns>
    /// <remarks>
    /// Use <c>calculate</c> method to calculate the price.
    /// </remarks>
    public Price getPriceCurrencyTo()
    {
        return priceCurrencyTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize class state with default values.
    /// </summary>
    public void init()
    {
        datePrice = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        exchangeRateTypeRecId = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParametersByDefaultValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the parameters to default values as required.
    /// This includes unitIdTo value which will come from <c>InventTableModule</c> for the itemId if it has not already been previously defined.
    /// </summary>
    protected void initParametersByDefaultValues()
    {
        unitIdTo = unitIdTo ? unitIdTo : InventTableModule::find(itemId, ModuleInventPurchSales::Sales).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>RetailPriceBasisCalculator</c> class.
    /// </summary>
    /// <remarks>
    /// Use <c>RetailPriceBasisCalcFactory</c> for instantiation.
    /// </remarks>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Account Id.
    /// </summary>
    /// <param name = "_accountId">The Customer Account to use.</param>
    public void parmAccountId(CustVendAC _accountId)
    {
        accountId = _accountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCodeFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Source Currency Code.
    /// </summary>
    /// <param name = "_currencyCodeFrom">The currency code to use.</param>
    public void parmCurrencyCodeFrom(CurrencyCode _currencyCodeFrom)
    {
        currencyCodeFrom = _currencyCodeFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCodeTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Target Currecy Code.
    /// </summary>
    /// <param name = "_currencyCodeTo">The currency code to use.</param>
    public void parmCurrencyCodeTo(CurrencyCode _currencyCodeTo)
    {
        currencyCodeTo = _currencyCodeTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDatePrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Date for the price unit conversion.
    /// </summary>
    /// <param name = "_datePrice">The Date to be used as a base date for the conversion.</param>
    public void parmDatePrice(RetailPriceBasisDate _datePrice)
    {
        datePrice = _datePrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateTypeRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets the Exchange Rate Type Rec Id.
    /// </summary>
    /// <param name = "_exchangeRateTypeRecId">The RecId for the Exchange Rate Type.</param>
    public void parmExchangeRateTypeRecId(ExchangeRateTypeRecId _exchangeRateTypeRecId)
    {
        exchangeRateTypeRecId = _exchangeRateTypeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Inventory Dimension.
    /// </summary>
    /// <param name = "_inventDim">The Unique Identifier for <c>InventDim</c>.</param>
    public void parmInventDim(InventDim _inventDim)
    {
        inventDim = _inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets the Item Id to calculate price.
    /// </summary>
    /// <param name = "_itemId">The item to calculate price.</param>
    public void parmItemId(ItemId _itemId)
    {
        itemId = _itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Price Group Id.
    /// </summary>
    /// <param name = "_priceGroupId">The price group Id to be used in the calculation.</param>
    public void parmPriceGroupId(PriceGroupId _priceGroupId)
    {
        priceGroupId = _priceGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitIdFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the source Unit Id of the item.
    /// </summary>
    /// <param name = "_unitIdFrom">The Unit Id from the source (From).</param>
    public void parmUnitIdFrom(UnitOfMeasureSymbol _unitIdFrom)
    {
        unitIdFrom = _unitIdFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitIdTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the target Unit Id of the item.
    /// </summary>
    /// <param name = "_unitIdTo">The Unit Id from the target (To).</param>
    public void parmUnitIdTo(UnitOfMeasureSymbol _unitIdTo)
    {
        unitIdTo = _unitIdTo;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>