<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalFormTable_CustVendPaymListPage</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalFormTable_CustVendPaymListPage</c> class is a helper class for the <c>LedgerJournalTable</c> form.
///    It helps with form initialization and managing the enabled state of controls.
/// </summary>
class LedgerJournalFormTable_CustVendPaymListPage extends LedgerJournalFormTable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>datasourceInitPost</Name>
				<Source><![CDATA[
    public void datasourceInitPost(JournalTableMap _journalTable)
    {
        super(_journalTable);

        if (formRun.args().menuItemName() == menuitemDisplayStr(CustPaymentAssignedToMeListPage)
            || formRun.args().menuItemName() == menuitemDisplayStr(VendPaymentAssignedToMeListPage))
        {
            this.applyAssignedToMe();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAllOpenPostedFromCaller</Name>
				<Source><![CDATA[
    protected void initAllOpenPostedFromCaller()
    {
        if (!ctrlAllOpenPosted)
        {
            return;
        }

        switch (formRun.args().menuItemName())
        {
            case menuitemDisplayStr(CustPaymentAssignedToMeListPage):
            case menuitemDisplayStr(VendPaymentAssignedToMeListPage):
                ctrlAllOpenPosted.selection(AllOpenPosted::Open);
                break;

            default:
                ctrlAllOpenPosted.selection(AllOpenPosted::All);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyAssignedToMe</Name>
				<Source><![CDATA[
    private void applyAssignedToMe()
    {
        QueryBuildDataSource qbdsCustInvoiceTable = journalTable_ds.query().dataSourceTable(tableNum(LedgerJournalTable));

        // Where SysWorkflowTable exists by RecId and TableId
        QueryBuildDataSource qbdsSysWorkflowTable = qbdsCustInvoiceTable.addDataSource(tableNum(SysWorkflowTable),'S');
        qbdsSysWorkflowTable.joinMode(JoinMode::ExistsJoin);
        qbdsSysWorkflowTable.addLink(fieldNum(LedgerJournalTable, RecId), fieldNum(SysWorkflowTable,ContextRecId));
        qbdsSysWorkflowTable.addLink(fieldNum(LedgerJournalTable, TableId), fieldNum(SysWorkflowTable,ContextTableId));

        // Add SysWorkflowTable2 to result when it is a child of SysWorkflowTable1
        QueryBuildDataSource qbdsSysWorkflowTable2 = qbdsSysWorkflowTable.addDataSource(tableNum(SysWorkflowTable),'S2');
        qbdsSysWorkflowTable2.joinMode(JoinMode::OuterJoin);

        QueryBuildRange rangeCorrelation = qbdsSysWorkflowTable2.addRange(fieldNum(SysWorkflowTable, WorkflowCorrelationId));
        rangeCorrelation.status(RangeStatus::Hidden);
        rangeCorrelation.value('((S.WorkflowCorrelationId == S2.ParentCorrelationId))');

        // Work item is related to either of the 2 SysWorkflowTable result sets
        QueryBuildDataSource qbdsWorkFlowWorkItemTable = qbdsSysWorkflowTable.addDataSource(tableNum(WorkflowWorkItemTable));
        qbdsWorkFlowWorkItemTable.joinMode(JoinMode::ExistsJoin);
        rangeCorrelation = qbdsWorkFlowWorkItemTable.addRange(fieldNum(WorkflowWorkItemTable, CorrelationId));
        rangeCorrelation.status(RangeStatus::Hidden);
        rangeCorrelation.value(strFmt( '((%1 == %2) || (%1 == %3))',
            fieldStr(WorkflowWorkItemTable, CorrelationId),
            'S.WorkflowCorrelationId',
            'S2.WorkflowCorrelationId' ) );

        // Pending work items only
        QueryBuildRange rangeStatus = qbdsWorkFlowWorkItemTable.addRange(fieldNum(WorkflowWorkItemTable, Status));
        rangeStatus.value(queryValue(WorkflowWorkItemStatus::Pending));
        rangeStatus.status(RangeStatus::Locked);

        // Assigned to current user only
        QueryBuildRange rangeAssignee = qbdsWorkFlowWorkItemTable.addRange(fieldNum(WorkflowWorkItemTable, UserId));
        rangeAssignee.value(queryValue(curUserId()));
        rangeAssignee.status(RangeStatus::Locked);

        // The Id-range is only used to lock the query from the UI
        QueryBuildRange rangeId = qbdsWorkFlowWorkItemTable.addRange(fieldNum(WorkflowWorkItemTable, Id));
        rangeId.status(RangeStatus::Locked);
        rangeId.enabled(false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>