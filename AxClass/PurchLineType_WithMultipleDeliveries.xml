<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchLineType_WithMultipleDeliveries</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchLineType_WithMultipleDeliveries</c> class controls the behavior of order lines with
/// multiple deliveries.
/// </summary>
/// <remarks>
/// An order line acts as a header of a delivery schedule, which always stores total delivery schedule
/// quantity and minimum dates. It can be used to manage commercial attributes of delivery lines.In
/// particular, when the order line starts using a new Trade Agreement the user is prompted to see
/// whether they want new commercial attributes, such as price and discount, to be copied to all the
/// delivery lines.
/// </remarks>
class PurchLineType_WithMultipleDeliveries
extends PurchLineType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canAgreementBeLinked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the purchase line can be linked to an agreement line.
    /// </summary>
    /// <returns>
    /// true if purchase order line can be linked to an agreement line; otherwise, false.
    /// </returns>
    public boolean canAgreementBeLinked()
    {
        PurchLineType purchLineType = PurchLineType::constructBasedOnPurchaseType(purchLine, purchTable);
        return purchLineType.canAgreementBeLinked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventBeReserved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line can be reserved.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean  canInventBeReserved()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line can be financially updated.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean  canInventUpdFinancial()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line can be physically updated.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean  canInventUpdPhysical()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuantityUpdateValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line quantity that is being updated is valid and throws an error if not
    /// valid.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean checkQuantityUpdateValid()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    public void deleting()
    {
        if (!purchLine.SkipDeliveryScheduleUpdate)
        {
            PurchDeliverySchedule   purchDeliverySchedule;
            PurchLine               deliveryLine;
            
            // delete all delivery lines
            while select forupdate deliveryLine
                join purchDeliverySchedule
                where purchDeliverySchedule.OrderLine    == purchLine.InventTransId
                    && purchDeliverySchedule.DeliveryLine == deliveryLine.InventTransId
                    && !deliveryLine.IsDeleted
            {
                if (deliveryLine.validateDelete())
                {
                    deliveryLine.deleteWithoutUpdatingDeliveryScheduleLines();
                }
                else
                {
                    // The deletion of the delivery line failed.
                    throw error("@SYS131423");
                }
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteWarning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the alternative warning message for deleting the order line.
    /// </summary>
    /// <returns>
    /// The alternative warning message; otherwise, an empty String.
    /// </returns>
    /// <remarks>
    /// If an empty string is returned, the standard message should be used.
    /// </remarks>
    str getDeleteWarning()
    {
        // You are about to delete the entire delivery schedule. Do you want to proceed?
        return "@SYS136387";
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanySyncEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line-level synchronization engine for intercompany trade.
    /// </summary>
    /// <returns>A new instance of <c>InterCompanySyncPurchLineType</c> or one of its subclasses.</returns>
    public InterCompanySyncPurchLineType interCompanySyncEngine()
    {
        return InterCompanySyncPurchLineType_WithMultipleDeliveries::newFromPurchLineType(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total invoiced quantity for a delivery schedule represented by its order line.
    /// </summary>
    /// <returns>
    /// The sum of values.
    /// </returns>
    PurchQty invoicedInTotal()
    {
        PurchDeliverySchedule   purchDeliverySchedule;
        PurchLine               deliveryLine;
        PurchQty                qty;

        while select deliveryLine
            where !deliveryLine.IsDeleted
            join RecId from purchDeliverySchedule
                where purchDeliverySchedule.OrderLine    == purchLine.InventTransId
                   && purchDeliverySchedule.DeliveryLine == deliveryLine.InventTransId
        {
            qty += deliveryLine.invoicedInTotal();
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether miscellaneous charges can be associated with the line.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean markupAllowed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInventUpdEstimated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the inventory movement that is associated with the line must be updated.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean mustInventUpdEstimated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchQtyAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the Quantity field can be edited.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean purchQtyAllowEdit()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchQtyIsEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the <c>Quantity</c> field is editable.
    /// </summary>
    /// <returns></returns>
    public boolean checkPurchQtyIsEditable()
    {
        return checkFailed("@SCM:CannotChangeQuantityOnPurchaseLineWithMultipleDeliveries");
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateDeliveryScheduleOrderLine</Name>
				<Source><![CDATA[
    public void recalculateDeliveryScheduleOrderLine(PurchLine _purchLineOrig)
    {
        PurchDeliverySchedule       purchDeliverySchedule;
        PurchLine                   deliveryLine;

        select sum(PurchQty),count(RecId), minof(DeliveryDate), minof(ConfirmedDlv)
            , sum(PdsCWQty),sum(PdsCWRemainInventPhysical)
            from deliveryLine
            where !deliveryLine.IsDeleted
            join RecId from purchDeliverySchedule
                  where purchDeliverySchedule.OrderLine     == purchLine.InventTransId
                     && purchDeliverySchedule.DeliveryLine  == deliveryLine.InventTransId;

        if (deliveryLine.RecId)
        {
            purchLine.PurchQty                  = deliveryLine.PurchQty;
            purchLine.PdsCWQty                  = deliveryLine.PdsCWQty;
            purchLine.PdsCWRemainInventPhysical = deliveryLine.PdsCWRemainInventPhysical;

            this.setPurchLineDlvDatesBasedOnDlvScheduleLine(deliveryLine);

            if (purchLine.PurchQty != _purchLineOrig.PurchQty && !purchLine.isLinkedToAgreement())
            {
                // PurchQty changed and not linked to purchase agreement so looking for trade agreement

                purchLine.salesPurchLineInterface().resetPriceAgreement();
                purchLine.setPriceDisc(purchLine.inventDim());
            }
        }
        else
        {
            // no delivery line exist, converting to an order line without delivery lines.
            purchLine.PurchQty = 0;
            purchLine.PdsCWQty = 0;
            purchLine.PdsCWRemainInventPhysical = 0;

            this.initPurchQty();

            // Update the line, so inventory transactions gets created once the quantities are reapplied.
            purchLine.updateWithoutUpdatingDeliveryScheduleLines(true);

            purchLine.PurchStatus       = PurchStatus::Backorder;
            purchLine.LineDeliveryType  = LineDeliveryType::OrderLine;
            purchLine.PurchQty          = _purchLineOrig.PurchQty;

            purchLine.PdsCWQty          = _purchLineOrig.PdsCWQty;
            purchLine.PdsCWRemainInventPhysical = _purchLineOrig.PdsCWRemainInventPhysical ;

            this.initPurchQty();
            purchLine.LineAmount        = purchLine.calcLineAmount();

            InventMovement::bufferSetTransQtyUnit(purchLine);

            purchLine.setInventReceivedNow();
            InventMovement::bufferSetRemainQty(purchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchLineDlvDatesBasedOnDlvScheduleLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set delivery dates on <c>PurchLine</c> based on the passed delivery line.
    /// </summary>
    /// <param name = "_deliveryLine">
    /// The delivery line to initialize from.
    /// </param>
    protected void setPurchLineDlvDatesBasedOnDlvScheduleLine(PurchLine _deliveryLine)
    {
        purchLine.DeliveryDate  = _deliveryLine.DeliveryDate;
        purchLine.ConfirmedDlv  = _deliveryLine.ConfirmedDlv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receivedInTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total received quantity for a delivery schedule that is represented by its order
    /// line.
    /// </summary>
    /// <returns>
    /// The sum of values.
    /// </returns>
    PurchQty receivedInTotal()
    {
        PurchDeliverySchedule   purchDeliverySchedule;
        PurchLine               deliveryLine;
        PurchQty                qty;

        while select deliveryLine
            where !deliveryLine.IsDeleted
            join RecId from purchDeliverySchedule
                where purchDeliverySchedule.OrderLine    == purchLine.InventTransId
                   && purchDeliverySchedule.DeliveryLine == deliveryLine.InventTransId
        {
            qty += deliveryLine.receivedInTotal();
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchStatus</Name>
				<Source><![CDATA[
    public void updatePurchStatus(PurchLine _purchLineOrig, InventTransIdSum  _inventTransIdSum, boolean _updateHeader)
    {
        PurchDeliverySchedule purchDeliverySchedule;
        PurchLine             deliveryLine;

        ttsbegin;

        select minof(PurchStatus) from deliveryLine
            where !deliveryLine.IsDeleted
            join RecId from purchDeliverySchedule
                where purchDeliverySchedule.OrderLine    == purchLine.InventTransId
                   && purchDeliverySchedule.DeliveryLine == deliveryLine.InventTransId;

        purchLine.PurchStatus = deliveryLine.PurchStatus;

        if (_updateHeader && purchLine.PurchStatus  != _purchLineOrig.PurchStatus)
        {
            purchLine.doUpdate();
            purchLine.purchTable(true).updateStatusFromPurchLines();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    public void updating()
    {
        PurchLine purchLine_Orig = purchLine.extensionOrig();

        if (purchLine.PurchQty  != purchLine_Orig.PurchQty && !purchLine.SkipDeliveryScheduleUpdate)
        {
            // Quantity cannot be changed on an order line with multiple deliveries.
            throw error("@SYS131424");
        }

        if (purchLine.PurchUnit != purchLine_Orig.PurchUnit)
        {
            // Unit cannot be changed on a Delivery Schedule.
            throw error("@SYS131415");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory movements that are associated with the line.
    /// </summary>
    /// <remarks>
    /// When change management is used inventory movements are not updated on the line save.
    /// </remarks>
    protected void updateInventory()
    {
        if (purchLine.isStocked() && purchTable.ChangeRequestRequired)
        {
            InventUpd_DeleteMovement::newMovement(InventMovement::construct(purchLine)).updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchLineType construct(PurchLine purchLine, PurchTable purchTable = purchLine.purchTable())
    {
        return new PurchLineType_WithMultipleDeliveries(purchLine, purchTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>