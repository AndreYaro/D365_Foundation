<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TamDeductionUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMDeductionUpdate</c> class manages the update of deductions based on the type of action
/// taken on the deduction.
/// </summary>
abstract public class TamDeductionUpdate
{
    Map                 mapLJTransLineNumToDeductionId;
    Map                 mapLJTransLineNumToSourceRecId;

    LineNum             lineNum;
    boolean             skipPrompt;
    boolean             updateOccurred;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the deduction, updates the record, and then allows the form to close.
    /// </summary>
    /// <returns>
    /// true if the form can be closed; otherwise, false.
    /// </returns>
    final public boolean closeOk()
    {
        if (this.validate())
        {
            this.update();
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the form specific to the update type and passes appropriate data into the form.
    /// </summary>
    final protected void formUpdate()
    {
        FormRun formRunUpdate;
        Args    args;
        args = new Args();
        args.name(this.parmFormString());
        args.caller(this);
        args.record(this.parmBuffer());

        formRunUpdate = classfactory.formRunClass(args);
        formRunUpdate.init();
        formRunUpdate.run();
        formRunUpdate.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>LedgerJournalTable</c> record.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// The <c>LedgerJournalTable</c> record to initialize.
    /// </param>
    final protected void initLedgerJournalTable(
        LedgerJournalTable _ledgerJournalTable)
    {
        LedgerJournalName           ledgerJournalName;
        TAMDeductionJournalName     tamDeductionJournalName;

        tamDeductionJournalName = this.getLedgerJournalName();

        if (!tamDeductionJournalName)
        {
            throw error("@MCR27600");
        }

        ledgerJournalName = LedgerJournalName::find(tamDeductionJournalName);
        if (!ledgerJournalName)
        {
            throw error(strFmt("@SYS22462", tamDeductionJournalName));
        }

        _ledgerJournalTable.initFromLedgerJournalName(ledgerJournalName.JournalName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalName</Name>
				<Source><![CDATA[
    protected TAMDeductionJournalName getLedgerJournalName()
    {
        return TAMPromotionParameters::find().DeductionJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>LedgerJournalTrans</c> record.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record to initialize.
    /// </param>
    /// <param name="_deduction">
    /// The deduct record containing the deduction ID to be used.
    /// </param>
    /// <param name="_amountCur">
    /// The amount to set on the ledger journal transaction record.
    /// </param>
    /// <remarks>
    /// Assign line number to <c>LedgerJournalTrans</c>.  For matching and update history purposes a
    /// unique identifier is needed for the <c>LedgerJournalTrans</c> record before it is inserted.
    /// Remember the association between the line number and deduction ID.  This is used later
    /// in <c>insertDeductionUpdateHistory</c> to insert history records about the update.
    /// </remarks>
    protected void initLedgerJournalTrans(LedgerJournalTrans      _ledgerJournalTrans,
                                          TAMDeduction            _deduction,
                                          AmountCur               _amountCur)
    {
        _ledgerJournalTrans.initFromTAMDeduction(_deduction,
                                          this.parmTAMDeductionUpdateType(),
                                          _amountCur);

        // Assign line number (needed to insure LJTrans unique before inserting)
        // See TAMDeductionUpdate_Match
        lineNum = lineNum == 0 ? 1: lineNum + 1;
        _ledgerJournalTrans.LineNum = lineNum;

        mapLJTransLineNumToDeductionId.insert(_ledgerJournalTrans.LineNum,
                                              _deduction.tamDeductionID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDeductionUpdateHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts history records for the update, given a list of <c>LedgerJournalTrans</c> records of the journal
    /// posted for the update.
    /// </summary>
    /// <param name="_recordSortedListLedgerJournalTrans">
    /// List of <c>LedgerJournalTrans</c> records to be used to create history record.
    /// </param>
    protected void insertDeductionUpdateHistory(
        RecordSortedList    _recordSortedListLedgerJournalTrans)
    {
        LedgerJournalTrans          ledgerJournalTrans;
        TAMDeductionUpdateHistory   deductionUpdateHistory;
        boolean                     loop;
        HcmApprover                 hcmWorkerId;
        RecordInsertList            deductionUpdateHistoryList =
                                        new RecordInsertList(tableNum(TAMDeductionUpdateHistory));

        hcmWorkerId = HcmWorker::userId2Worker(curUserId());

        loop = _recordSortedListLedgerJournalTrans.first(ledgerJournalTrans);
        while (loop)
        {
            deductionUpdateHistory.clear();
            deductionUpdateHistory.tamDeductionID = mapLJTransLineNumToDeductionId.lookup(ledgerJournalTrans.LineNum);
            deductionUpdateHistory.tamDeductionUpdateType = this.parmTAMDeductionUpdateType();
            deductionUpdateHistory.LedgerJournalId = ledgerJournalTrans.JournalNum;
            deductionUpdateHistory.LedgerJournalTransRecId = ledgerJournalTrans.RecId;
            deductionUpdateHistory.AmountCur = abs(ledgerJournalTrans.amount());
            deductionUpdateHistory.HcmWorkerId = hcmWorkerId;

            if (mapLJTransLineNumToSourceRecId && mapLJTransLineNumToSourceRecId.exists(ledgerJournalTrans.LineNum))
            {
                deductionUpdateHistory.SourceRecId = mapLJTransLineNumToSourceRecId.lookup(ledgerJournalTrans.LineNum);
            }

            deductionUpdateHistoryList.add(deductionUpdateHistory);

            loop = _recordSortedListLedgerJournalTrans.next(ledgerJournalTrans);
        }

        deductionUpdateHistoryList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJournalAndLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies journal information to <c>LedgerJournalTrans</c> records and inserts records.
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// The ledger journal record used to copy information to the ledger journal transaction records.
    /// </param>
    /// <param name="_recordSortedList">
    /// The list of ledger journal transaction record to insert.
    /// </param>
    /// <returns>
    /// An updated <c>LedgerJournalTable</c> buffer.
    /// </returns>
    final protected LedgerJournalTable insertJournalAndLines(LedgerJournalTable  _ledgerJournalTable,
                                                             RecordSortedList    _recordSortedList)
    {
        LedgerJournalTrans  ledgerJournalTrans;
        NumberSequenceTable numberSequenceTable;
        NumberSeq           numberSeq;
        boolean             loop;
        LedgerJournalTable  ledgerJournalTable = _ledgerJournalTable.data();

        // Each customer transaction must have a
        // different voucher.  Create number sequence object once and reuse in loop.
        numberSequenceTable = NumberSequenceTable::find(ledgerJournalTable.NumberSequenceTable);
        numberSeq = NumberSeq::newGetVoucherFromCode(numberSequenceTable.NumberSequence);

        ledgerJournalTable.insert();

        // Update all trans records with journal and voucher
        loop = _recordSortedList.first(ledgerJournalTrans);
        while (loop)
        {
            ledgerJournalTrans.JournalNum = ledgerJournalTable.JournalNum;

            // Assign a different voucher for each journal line.
            ledgerJournalTrans.Voucher = numberSeq.voucher();

            if (!ledgerJournalTrans.validateWrite())
            {
                throw error("@SYS104318");
            }

            // Must reinsert into list or list records will not have updated information
            _recordSortedList.ins(ledgerJournalTrans, true);
            loop = _recordSortedList.next(ledgerJournalTrans);
        }

        // Insert all LedgerJournalTrans records
        _recordSortedList.insertDatabase();

        if (ledgerJournalTable.numOfLines() == 0)
        {
            throw error("@SYS59010");
        }

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>Map</c> object based on the passed <c>Common</c> record.
    /// </summary>
    /// <param name="_common">
    /// The <c>Common</c> record used to initialize the <c>Map</c> object.
    /// </param>
    protected void new(Common _common)
    {
        mapLJTransLineNumToDeductionId = new Map(typeName2Type(extendedTypeStr(LineNum)),
                                                 typeName2Type(extendedTypeStr(TAMDeductionID)));
        mapLJTransLineNumToSourceRecId = new Map(typeName2Type(extendedTypeStr(LineNum)),
                                                typeName2Type(extendedTypeStr(RecId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the buffer that should be passed to form through arguments object.
    /// </summary>
    /// <returns>
    /// The buffer that should be passed to form through the arguments object.
    /// </returns>
    protected Common parmBuffer()
    {
        Common common;
        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormString</Name>
				<Source><![CDATA[
        protected str parmFormString()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets whether the update form will be skipped.
    /// </summary>
    /// <param name="_skipPrompt">
    /// The value to set the skip prompt variable to; optional.
    /// </param>
    /// <returns>
    /// true if the update form should be skipped; otherwise, false.
    /// </returns>
    final public boolean parmSkipPrompt(boolean _skipPrompt = skipPrompt)
    {
        skipPrompt = _skipPrompt;
        return skipPrompt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTAMDeductionUpdateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of update occuring.
    /// </summary>
    /// <returns>
    /// The type of update occuring.
    /// </returns>
    protected TAMDeductionUpdateType parmTAMDeductionUpdateType()
    {
        return TAMDeductionUpdateType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateOccurred</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets whether an update has occured.
    /// </summary>
    /// <param name="_updateOccurred">
    /// The value of whether an update has occured; optional.
    /// </param>
    /// <returns>
    /// true if an update has occured; otherwise, false.
    /// </returns>
    final protected boolean parmUpdateOccurred(boolean _updateOccurred = updateOccurred)
    {
        updateOccurred = _updateOccurred;
        return updateOccurred;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates and updates the deduction.
    /// </summary>
    /// <returns>
    /// true if an update occured; otherwise false.
    /// </returns>
    final public boolean run()
    {
        if (this.showPrompt())
        {
            this.formUpdate();
        }
        else
        {
            if (this.validate())
            {
                this.update();
            }
        }
        return this.parmUpdateOccurred();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the update form should be shown.
    /// </summary>
    /// <returns>
    /// true if the update form should be shown; otherwise, false.
    /// </returns>
    protected boolean showPrompt()
    {
        if (this.parmSkipPrompt() || ! this.parmFormString())
        {
            return false;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the values of the <c>TAMDeductionUpdate</c> object.
    /// </summary>
    abstract protected void update()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether update is valid and may be done.
    /// </summary>
    /// <returns>
    /// true if the update is valid; otherwise, false.
    /// </returns>
    abstract protected boolean validate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the record in the arguments is from the table specified by the table ID parameter
    /// and checks that a <c>TAMDeductionUpdate</c> object was passed into as the caller in the arguments.
    /// </summary>
    /// <param name="_args">
    /// The arguments passed in by the calling object.
    /// </param>
    /// <param name="_tableId">
    /// The table ID of the record passed in by the arguments parameter.
    /// </param>
    /// <param name="_formName">
    /// The name of the form being validated.
    /// </param>
    public static void validateForm(Args        _args,
                                    TableId     _tableId,
                                    str         _formName)
    {
        TAMDeductionUpdate tamDeductionUpdate;

        // Validate passed in record is of right type
        if (!_args
            || _args.dataset() != _tableId)
        {
            throw error(strFmt("@SYS19096", _formName,
                               tableId2pname(_tableId)));
        }

        // Validate update object passed in
        if (!_args.caller()
            || ! SysDictClass::isEqualOrSuperclass(classIdGet(_args.caller()),
                                                   classIdGet(tamDeductionUpdate)))
        {
            throw error(strFmt("@SYS22456",
                        _formName,
                        classId2Name(classIdGet(tamDeductionUpdate))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMapLJTransLineNumToSourceRecId</Name>
				<Source><![CDATA[
    protected void initMapLJTransLineNumToSourceRecId(LineNum _ledgerJournalTransLineNum, RecId _sourceRecId)
    {
        mapLJTransLineNumToSourceRecId.insert(_ledgerJournalTransLineNum, _sourceRecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>