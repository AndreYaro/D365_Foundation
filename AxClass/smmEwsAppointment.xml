<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmEwsAppointment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class <c>smmEwsAppointment</c> represents Microsoft Exchange server appointment.
/// This class translates the information to and from exchange server appointment to Ax appointment.
/// </summary>
/// <remarks>
/// Uses ExchangeIntegration dll.
/// </remarks>
class SmmEwsAppointment implements smmIAppointment, SysIMapiExAppointment
{
    #define.AxOldOutlookEntryId('AxOldOutlookEntryId')
    #smmMSOutlook2002ObjectModelConstants

    Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationAppointment    appointment;
    Microsoft.Dynamics.AX.ExchangeIntegration.Connection                connection;
    Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationFolder         folder;
    System.Collections.ArrayList                                        recipients;
    Microsoft.Dynamics.AX.ExchangeIntegration.Recipient                 recipient;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRecipient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a recipient to an appointment item.
    /// </summary>
    /// <param name="_email">
    /// The e-mail of the recipient to be added.
    /// </param>
    /// <param name="_name">
    /// The name of the recipient to be added.
    /// </param>
    /// <param name="_type">
    /// The type of the recipient to be added.
    /// </param>
    /// <returns>
    /// The email of the recipient added after adding the recipient.
    /// </returns>
    public str addRecipient(str _email, str _name, int _type)
    {
        str ret;

        ret = appointment.addRecipient(_email, _name, _type);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allDayEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the appointment is an all day event.
    /// </summary>
    /// <returns>
    /// True if the appointment is an all day event; otherwise, false.
    /// </returns>
    public boolean allDayEvent()
    {
        boolean ret;

        ret = appointment.allDayEvent();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>billingInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the billing information for current appointment.
    /// </summary>
    /// <returns>
    /// A string containing billing information associated with current appointment.
    /// </returns>
    public str billingInformation()
    {
        str ret;

        ret = appointment.billingInformation();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>body</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the body of an appointment.
    /// </summary>
    /// <param name="_body">
    /// Returns body of appointment.
    /// </param>
    /// <returns>
    /// The current value of the body of the item.
    /// </returns>
    public str body(str _body = '')
    {
        str ret;

        ret = appointment.body();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>busyStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the busy status of the user for the appointment.
    /// </summary>
    /// <returns>
    /// Returns an integer representing the busy status of the user for the appointment.
    /// Possible values are 0 = free, 1= tentative , 2 = busy or 3 = out of office.
    /// </returns>
    public int busyStatus()
    {
        int ret;

        ret = appointment.busyStatus();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the categories associated with the appointment.
    /// </summary>
    /// <returns>
    /// A string with all the categories associated to the appointment
    /// </returns>
    public str categories()
    {
        str ret;

        ret = appointment.categories();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the current item.
    /// In exchange server there is no persistent connection so no close method is required.
    /// </summary>
    public void close()
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the item from exchange server.
    /// </summary>
    public void delete()
    {
        appointment.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>end</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the end datetime for appointment.
    /// </summary>
    /// <returns>
    /// End datetime for appointment.
    /// </returns>
    public utcdatetime end()
    {
        utcdatetime ret;

        ret = appointment.end();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>entryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the appointment's exchange entry id.
    /// </summary>
    /// <returns>
    /// Entry id of current appointment.
    /// </returns>
    public str entryId()
    {
        str exchangeId = appointment.entryId();
        str ret;

        //Synchronization is managed with the outlookIds, so the translation is needed
        ret = connection.convertExchangeIdToOutlookId(exchangeId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exceptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the occurrence exceptions for the appointment.
    /// The ocurrence exceptions are genereted by editing or deleting an occurrence of a recurrent appointment.
    /// </summary>
    /// <returns>
    /// A list of <c>smmEwsOcurrence</c> and <c>smmEwsDeletedOccurrence</c> elements that represent all the exceptions for the appointment.
    /// </returns>
    public List exceptions()
    {
        List                            ret = new List(Types::Class);
        System.Collections.ArrayList    exceptions, deletedOccurrences;
        int                             idx, total;

        exceptions = appointment.exceptions();
        total = exceptions.get_Count();

        for (idx = 0; idx < total; idx++)
        {
            ret.addEnd(new smmEwsOccurrence(exceptions.get_Item(idx), this));
        }

        deletedOccurrences = appointment.deletedOccurrences();
        total = deletedOccurrences.get_Count();

        for (idx = 0; idx < total; idx++)
        {
            ret.addEnd(new smmEwsDeletedOccurrence(deletedOccurrences.get_Item(idx), this));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemOccurrence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets appointment representing a specific occurrence of current recurring appointment.
    /// </summary>
    /// <param name="_date">
    /// Date when the ocurrence takes place.
    /// </param>
    /// <param name="_time">
    /// Time when the ocurrence takes place.
    /// </param>
    /// <returns>
    /// An instance of <c>smmEwsAppointment</c> representing the occurrence.
    /// </returns>
    /// <remarks>
    /// May return an null based <c>smmEwsAppointment</c> if the ocurrence couldn't be retrieved (connection problems or it doesn't exist).
    /// Results in a call to the exchange server.
    /// </remarks>
    public smmIAppointment getItemOccurrence(TransDate _date, TimeOfDay _time)
    {
        Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationAppointment occurenceAppointment = appointment.getOcurrence(DateTimeUtil::newDateTime(_date, _time));

        return new smmEwsAppointment(occurenceAppointment, connection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaster</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets master appointment for current appointment.
    /// </summary>
    /// <returns>
    /// Returns new identical instance if appointment is non-recurring or a recurring master; otherwise, if the appointment is an occurrence or an exception in a recurring appointment
    /// it will return the master appointment.
    /// </returns>
    public smmIAppointment getMaster()
    {
        Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationAppointment masterAppointment = appointment.master();

        return new smmEwsAppointment(masterAppointment, connection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOldItemEntryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets old outlook entry id set in the appointment for recurrence cases.
    /// </summary>
    /// <returns>
    /// Old outlook entry id of the appointment.
    /// </returns>
    /// <remarks>
    /// This is an interface member which is implemented in outlook for recurrence cases.
    /// Similar implementation is done in exchange server case.
    /// </remarks>
    public str getOldItemEntryId()
    {
        str ret;

        ret = appointment.getOldOutlookEntryId(#AxOldOutlookEntryId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecipient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a recipient that is based on an index.
    /// </summary>
    /// <param name="_index">
    /// The value of the index.
    /// </param>
    /// <returns>
    /// True if the recipient could be retrieved; otherwise (invalid index), false.
    /// </returns>
    /// <remarks>
    /// Will make reference to the recipient setted when calling GetRecipients().
    /// Will fail if GetRecipients was no called.
    /// </remarks>
    public boolean getRecipient(int _index)
    {
        int     total = recipients.get_Count();
        boolean validIndex = _index < total && _index >= 0;

        if (validIndex)
        {
            recipient = recipients.get_Item(_index);
        }

        if (recipient)
        {
            validIndex = true;
        }
        else
        {
            validIndex = false;
        }

        return validIndex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecipients</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the recipients of an appointment.
    /// </summary>
    /// <returns>
    /// True if recipients exist; otherwise, false.
    /// </returns>
    public boolean getRecipients()
    {
        int total;

        total = recipients.get_Count();

        return total > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecurrencePattern</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recurrence pattern for the appointment.
    /// </summary>
    /// <returns>
    /// Recurrence pattern for the appointment.
    /// </returns>
    public smmIRecurrence getRecurrencePattern()
    {
        smmEwsRecurrence itemRecurrence;

        itemRecurrence = new smmEwsRecurrence(appointment.recurrence());

        return itemRecurrence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>globalObjectId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the global object ID of the appointment item.
    /// </summary>
    /// <returns>
    /// Global object ID of the appointment item.
    /// </returns>
    public str globalObjectId()
    {
        str ret;

        ret =  appointment.globalObjectId();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the importance level of the appointment.
    /// </summary>
    /// <returns>
    /// Importance of the appointment.
    /// Value will be one of the following:
    /// 0 for low, 1 for normal, 2 for high.
    /// </returns>
    public int importance()
    {
        int ret = appointment.importance();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRecurring</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is a recurrent appointment.
    /// </summary>
    /// <returns>
    /// True if it is a recurrent appointment; otherwise, false.
    /// </returns>
    public boolean isRecurring()
    {
        boolean ret;

        ret = appointment.isRecurring();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastModificationTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last date and time the appointment was modified in exchange.
    /// </summary>
    /// <returns>
    /// An utcdatetime with the latest date and time when the appointment was modified in exchange.
    /// If it's a new appointment, until saved it will just exist locally and it will return
    /// DateTimeUtil::minValue().
    /// </returns>
    public utcdatetime lastModificationTime()
    {
        utcdatetime ret = DateTimeUtil::minValue();
        boolean     isNew;

        isNew = appointment.isNew();
        // new tasks don't have a lastModificationTime
        // tasks don't exist in Exchange until saved.
        if (!isNew)
        {
            ret = appointment.lastModificationTime();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>location</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the appointment's location.
    /// </summary>
    /// <returns>
    /// A string with all the appointment's location information.
    /// </returns>
    public str location()
    {
        str ret;

        ret = appointment.location();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mileage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current appointment's mileage.
    /// </summary>
    /// <returns>
    /// A string representing the appointment's mileage.
    /// </returns>
    public str mileage()
    {
        str ret;

        ret = appointment.mileage();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs <c>smmEwsAppointment</c>.
    /// </summary>
    /// <param name="_appointment">
    /// Exchange appointment item.
    /// </param>
    /// <param name="_connection">
    /// Connection to exchange server.
    /// </param>
    public void new(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationAppointment _appointment, Microsoft.Dynamics.AX.ExchangeIntegration.Connection _connection)
    {
        appointment = _appointment;
        connection = _connection;
        recipients = appointment.getRecipients();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentFolderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets exchange entry id for current appointment's parent folder.
    /// </summary>
    /// <returns>
    /// Echange entry id for current appointment's parent folder.
    /// </returns>
    public str parentFolderId()
    {
        str exchangeId = appointment.parentId();
        str ret;

        // Synchronization is managed with the outlookIds, so the translation is needed
        ret = connection.convertExchangeIdToOutlookId(exchangeId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFolder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the folder for the task.
    /// </summary>
    /// <param name="_folder">
    /// The folder where the task should be stored.
    /// </param>
    /// <returns>
    /// The folder where the appointment is going to be stored when calling save().
    /// </returns>
    /// <remarks>
    /// The task will only use the folder when created, during the save() method,
    /// to select where the task will be created in the exchange server.
    /// Once created in exchange, the folder can't be changed.
    /// </remarks>
    public Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationFolder parmFolder(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationFolder _folder = folder)
    {
        folder = _folder;

        return folder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recipientCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of recipients for current appointment.
    /// </summary>
    /// <returns>
    /// Recipient count of current appointment.
    /// </returns>
    /// <remarks>
    /// Will make reference to the recipient that is set when calling GetRecipients().
    /// Will fail if GetRecipients was not called.
    /// </remarks>
    public int recipientCount()
    {
        return recipients.get_Count();
    }

]]></Source>
			</Method>
			<Method>
				<Name>recipientDisplayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets recipient display name of the current recipient for current appointment.
    /// </summary>
    /// <returns>
    /// Display name of the current recipient.
    /// </returns>
    /// <remarks>
    /// Will make reference to the recipient is set when calling GetRecipient(id).
    /// Will fail if GetRecipient was not called, or if it was called and returned false.
    /// </remarks>
    public str recipientDisplayName()
    {
        str ret;

        ret = recipient.displayName();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recipientEmailAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets recipient email address of the current recipient for current appointment.
    /// </summary>
    /// <returns>
    /// Email address of the current recipient.
    /// </returns>
    /// <remarks>
    /// Will make reference to the recipient that is set when calling GetRecipient(id).
    /// Will fail if GetRecipient was not called, or if it was called and returned false.
    /// </remarks>
    public str recipientEmailAddress()
    {
        str ret;

        ret = recipient.emailAddress();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recipientEntryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets entry id of the current recipient for this appointment.
    /// </summary>
    /// <returns>
    /// The entry id of the current recipient.
    /// </returns>
    /// <remarks>
    /// Will make reference to the recipient set when calling GetRecipient(id).
    /// Will fail if GetRecipient was not called, or if it was called and returned false.
    /// May result in several calls to the exhcange server.
    /// </remarks>
    public str recipientEntryId()
    {
        str ret;

        ret = this.entryId();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recipientSMTPAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the smtp address of the current recipient for this appointment.
    /// </summary>
    /// <returns>
    /// The smtp address of the current recipient.
    /// </returns>
    /// <remarks>
    /// Will make reference to the recipient is set when calling GetRecipient(id).
    /// Will fail if GetRecipient was not called, or if it was called and returned false.
    /// </remarks>
    public str recipientSMTPAddress()
    {
        str ret;

        ret = recipient.smtpAddress();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recipientType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the current recipient for this appointment.
    /// </summary>
    /// <returns>
    /// The type of the current recipient, that will be a member of the outlook recipient type enumeration.
    /// </returns>
    /// <remarks>
    /// Will make reference to the recipient is set when calling GetRecipient(id).
    /// Will fail if GetRecipient was no called, or if it was called and returned false.
    /// </remarks>
    public int recipientType()
    {
        int type;

        type = recipient.type();

        return type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recurrenceState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recurrence state for the appointment.
    /// </summary>
    /// <returns>
    /// Appointment recurrenct type. Possible values : 0 = Single, 1 = recurring master, 2 = occurrence, 3 = exception.
    /// </returns>
    public int recurrenceState()
    {
        int ret;

        ret = appointment.recurrenceState();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reminderMinutesBeforeStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of minutes before the start of the appointment when the reminder should be triggered.
    /// </summary>
    /// <returns>
    /// The number of minutes before the start when the reminder should be triggered.
    /// 0 if the value is not set.
    /// </returns>
    public int reminderMinutesBeforeStart()
    {
        int ret;

        ret = appointment.reminderMinutesBeforeStart();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reminderSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a reminder was set for this task.
    /// </summary>
    /// <returns>
    /// True if appointment has a reminder set; otherwise, false.
    /// </returns>
    public boolean reminderSet()
    {
        boolean ret;

        ret = appointment.reminderSet();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeRecipient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a recipient of an appointment item.
    /// </summary>
    /// <param name="_email">
    /// E-mail of the recipient to be removed.
    /// </param>
    /// <param name="_type">
    /// Type of the recipient to be removed.
    /// </param>
    /// <returns>
    /// true if the recipient was removed; otherwise, false.
    /// </returns>
    public boolean removeRecipient(str _email, int _type)
    {
        boolean ret;

        ret = appointment.removeRecipient(_email, _type);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>responseRequested</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the response is requested for this appointment.
    /// </summary>
    /// <returns>
    /// True if the response is requested; otherwise, false.
    /// </returns>
    public boolean responseRequested()
    {
        boolean ret;

        ret = appointment.responseRequested();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the appointment. This will create appointment in exchange server.
    /// Appointment will be created in the folder selected or the default appointment folder
    /// if folder is not set.
    /// </summary>
    /// <returns>
    /// true if the item appointment is saved; otherwise, false
    /// </returns>
    public boolean save()
    {
        boolean ret;

        try
        {
            if (appointment.isNew())
            {
                if (folder)
                {
                    ret = appointment.save(folder.entryId());
                }
                else
                {
                    ret = appointment.save("");
                }
            }
            else
            {
               ret = appointment.update();
            }
        }
        catch
        {
            error("@SYP4860465");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the appointment. New appointments are created locally and won't appear in exchange until saved.
    /// </summary>
    /// <returns>
    /// The appointment that was saved.
    /// </returns>
    /// <remarks>
    /// It will result in a call to exchange.
    /// It may fail due to connection problems.
    /// </remarks>
    public smmIAppointment saveItem()
    {
        this.Save();

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveOldItemEntryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets old outlook entry id set in the appointment for recurrence cases.
    /// </summary>
    /// <param name="synchronizeRecurringSeting">
    /// True if synchronize recurring appointments is set, otherwise false.
    /// </param>
    /// <param name="entryId">
    /// Entry id of the appointment.
    /// </param>
    /// <remarks>
    /// This is an interface member which is implemented in outlook for recurrence cases.
    /// Similar implementation is done in exchange server case.
    /// </remarks>
    public void saveOldItemEntryId(boolean synchronizeRecurringSeting, str entryId)
    {
        Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationAppointment    itemToUpdate;
        str                                                                 propertyValue;

        if (appointment)
        {
            if (!propertyValue)
            {
                propertyValue = appointment.entryId();
            }
            if (synchronizeRecurringSeting && this.isRecurring())
            {
                itemToUpdate  = appointment.master();
            }
            else
            {
                itemToUpdate = appointment;
            }

            itemToUpdate.saveOldOutlookEntryId(#AxOldOutlookEntryId, propertyValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>senderEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sender e-mail of an appointment item.
    /// </summary>
    /// <returns>
    /// The sender e-mail of an appointment item.
    /// </returns>
    public str senderEmail()
    {
        Microsoft.Dynamics.AX.ExchangeIntegration.Recipient organizer = appointment.getOrganizer("");
        str                                                 ret;

        ret = organizer.emailAddress();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>senderName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sender's name of an appointment item.
    /// </summary>
    /// <returns>
    /// Sender's name of an appointment item
    /// </returns>
    public str senderName()
    {
        Microsoft.Dynamics.AX.ExchangeIntegration.Recipient     organizer = appointment.getOrganizer("");
        str                                                     ret;

        ret = organizer.displayName();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sensitivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sensitivity for the appointment.
    /// </summary>
    /// <returns>
    /// A integer representing the sensitivity of an appointment:
    ///, 0 ="Normal", 1 = "Personal", 2 = "Private", 3 = "Confidential".
    /// </returns>
    public int sensitivity()
    {
        int ret;

        ret = appointment.sensitivity();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllDayEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets if the appointment is an all day event or not.
    /// </summary>
    /// <param name="_allDayEvent">
    /// True if it is an all day event; otherwise, false.
    /// </param>
    public void setAllDayEvent(boolean _allDayEvent)
    {
        appointment.allDayEvent(_allDayEvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBillingInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the billing information for the appointment.
    /// </summary>
    /// <param name="_billingInformation">
    /// A string with all the billing information for the appointment.
    /// </param>
    public void setBillingInformation(str _billingInformation)
    {
        appointment.billingInformation(_billingInformation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the html body for the appointment.
    /// </summary>
    /// <param name="_body">
    /// A string with the html body of the appointment.
    /// </param>
    public void setBody(str _body)
    {
        appointment.body(_body);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBusyStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the busy status for the appointment.
    /// </summary>
    /// <param name="_busyStatus">
    /// Values can be the following :  0 = "Free", 1 = "Tentative",2 = "Busy", 3 = "OOF".
    /// </param>
    public void setBusyStatus(int _busyStatus)
    {
        appointment.busyStatus(_busyStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the appointment's categories.
    /// </summary>
    /// <param name="_categories">
    /// A string containing the categories asociated with the appointment.
    /// </param>
    public void setCategories(str _categories)
    {
        appointment.categories(_categories);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the end date time for the appointment.
    /// </summary>
    /// <param name="_end">
    /// The end date time.
    /// </param>
    public void setEnd(utcdatetime _end)
    {
        System.DateTime finalDateTime;

        finalDateTime = _end;

        appointment.end(finalDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setImportance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the importance of this appointment.
    /// </summary>
    /// <param name="_importance">
    /// A member of the #olImportance enumeration that represents the importance of the appointment.
    /// </param>
    public void setImportance(int _importance)
    {
        appointment.importance(_importance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the location for the appointment.
    /// </summary>
    /// <param name="_location">
    /// A string containing all the location information for the appointment.
    /// </param>
    public void setLocation(str _location)
    {
        appointment.location(_location);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMileage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the mileage for the appointment.
    /// </summary>
    /// <param name="_mileage">
    /// A string containing the mileage for the appointment.
    /// </param>
    public void setMileage(str _mileage)
    {
        appointment.mileage(_mileage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReminderMinutesBeforeStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the minutes before the start of the appointment when the reminder should be triggered.
    /// </summary>
    /// <param name="_reminderMinutesBeforeStart">
    /// An int with the minutes before the start of the appointment when the reminder should be triggered.
    /// </param>
    public void setReminderMinutesBeforeStart(int _reminderMinutesBeforeStart)
    {
        appointment.reminderMinutesBeforeStart(_reminderMinutesBeforeStart);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReminderSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets if the reminder is set for the appointment.
    /// </summary>
    /// <param name="_reminderSet">
    /// True if the reminder is set for the appointment; otherwise, false.
    /// </param>
    public void setReminderSet(boolean _reminderSet)
    {
        appointment.reminderSet(_reminderSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResponseRequested</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets if the response is requested for the appointment.
    /// </summary>
    /// <param name="_responseRequested">
    /// True if the response is requested; otherwise, false.
    /// </param>
    public void setResponseRequested(boolean _responseRequested)
    {
        appointment.responseRequested(_responseRequested);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSensitivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the sensitivity for the appointment.
    /// </summary>
    /// <param name="_sensitivity">
    /// A member of the #olSensitivity enumeration representing the sensitivity of this appointment.
    /// </param>
    public void setSensitivity(int _sensitivity)
    {
        appointment.sensitivity(_sensitivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the start date time for the appointment.
    /// </summary>
    /// <param name="_datetime">
    /// The start date time.
    /// </param>
    public void setStart(utcdatetime _datetime)
    {
        appointment.start(_datetime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSubject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the appointment's subject.
    /// </summary>
    /// <param name="_subject">
    /// A string containing the appointment's subject.
    /// </param>
    public void setSubject(str _subject)
    {
        appointment.subject(_subject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>start</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the start date time for the appointment.
    /// </summary>
    /// <returns>
    /// Start date time of appointment.
    /// </returns>
    public utcdatetime start()
    {
        utcdatetime ret;

        ret = appointment.start();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the subject for the appointment.
    /// </summary>
    /// <returns>
    /// A string with the subject or empty string if it is not set.
    /// </returns>
    public str subject()
    {
        str ret;

        ret = appointment.subject();

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>