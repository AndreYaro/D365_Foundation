<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailColorSwatchFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
using Microsoft.Dynamics.BusinessPlatform.SharedTypes;

/// <summary>
/// The <c>RetailColorSwatchFeature</c> class represents the feature management for opting product dimension swatchs.
/// </summary>
[FeatureMetadataConfigurationKey(configurationKeyStr(Retail))]
[ExportAttribute(identifierStr (Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
[InternalUseOnly]
internal final class RetailColorSwatchFeature implements IFeatureMetadata, IFeatureMetadataEnablementNotifiable, IFeatureLifecycle
{
    private static RetailColorSwatchFeature instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        instance = new RetailColorSwatchFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the singleton object instance.
    /// </summary>
    /// <returns>The <c>RetailColorSwatchFeature</c> instance.</returns>
    [Hookable(false)]
    public static RetailColorSwatchFeature instance()
    {
        return RetailColorSwatchFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@Retail:RetailColorSwatchFeature");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::Retail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@Retail:RetailColorSwatchFeatureSummary");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return 'https://docs.microsoft.com/en-us/dynamics365/commerce/dimensions-swatch';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    internal static boolean isEnabled()
    {
        return Dynamics.AX.Application.FeatureStateProvider::isFeatureEnabled(RetailColorSwatchFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the default refiner group in existing product dimensions.
    /// </summary>
    [Hookable(false)]
    public void onEnabled()
    {
        EcoResColor ecoResColor;
        RetailColorGroupTrans retailColorGroupTrans;
        EcoResSize ecoResSize;
        RetailSizeGroupTrans retailSizeGroupTrans;
        EcoResStyle ecoResStyle;
        RetailStyleGroupTrans retailStyleGroupTrans;

        ttsbegin;
        while select forupdate ecoResColor
        {
            ecoResColor.RefinerGroup = ecoResColor.Name;
            ecoResColor.doupdate();
            update_recordset retailColorGroupTrans
                setting RefinerGroup = ecoResColor.Name where retailColorGroupTrans.color == ecoResColor.Name;
        }
        
        while select forupdate ecoResSize
        {
            ecoResSize.RefinerGroup = ecoResSize.Name;
            ecoResSize.doupdate();
            update_recordset retailSizeGroupTrans
                setting RefinerGroup = ecoResSize.Name where retailSizeGroupTrans.size == ecoResSize.Name;
        }

        while select forupdate ecoResStyle
        {
            ecoResStyle.RefinerGroup = ecoResStyle.Name;
            ecoResStyle.doupdate();
            update_recordset retailStyleGroupTrans
                setting RefinerGroup = ecoResStyle.Name where retailStyleGroupTrans.style == ecoResStyle.Name;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disable the feature
    /// </summary>
    [Hookable(false)]
    public void onDisabled()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the state of the feature's code.
    /// </summary>
    /// <returns>Current state of the feature's code</returns>
    [Hookable(false)]
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::PublicPreview;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>