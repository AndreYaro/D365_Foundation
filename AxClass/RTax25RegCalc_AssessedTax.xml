<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegCalc_AssessedTax</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The class <c>rTax25RegCalc_AssessedTax</c> is used to calculate tax register "Assessed tax"
/// </summary>
/// <remarks>
///  Each record of register represents page of assessed tax declaration.
/// </remarks>
public final class rTax25RegCalc_AssessedTax extends RTax25RegCalc implements BatchRetryable
{
    RTax25RegisterTrans_AssessedTotalDepr regTransTotal, header;
    RefRecId                              totalRefRecId;
    RAssetStandardId    standardId;
    RAssetAmount        paySum, prevPaySum, decPaySum;
    RAssetTable         rAssetTable;
    TransDate           beginningOfYear;

    Map                                   movablesMap;
    BranchId_RU                           branchId;

    RTax25RegisterLineNum64 refLineNumberBody;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>advancePaymentSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Method used to calculate advances payd in previous periods for this year.
    /// </summary>
    /// <returns>
    ///  Amount of advances paid.
    /// </returns>
    /// <remarks>
    ///  All body lines from previous journals for this year fetched. It goes through these lines.
    ///  Next, depending on type current totals register line being processed and coincidence of RCOAD, KBK, TaxCode and Section it takes values from current line if total is not related to branch, taxAllowance of fixed asset,
    ///  or, otherwise it ignores current line and goes through content of section and searches for line with the same reference(branch, allowance, etc).
    ///  Last versions of tax register journals used for calculation
    /// </remarks>
    private RAssetNetBookValue advancePaymentSum()
    {
        RTax25RegisterTrans_AssessedTax         regTransAsset, regTransAllowance;
        RTax25RegisterTrans                     rTax25RegTransAsset, rTax25RegTransAllowance;
        RTax25RegisterJournalTrans              journalTrans;
        RTax25RegisterJournalTable              rTax25RegJournalTable, rTax25RegJournalTableNewVersion;
        TransDate                               fromDate = registerJournalTrans.fromDate();
        RAssetNetBookValue                      ret;
        TaxCode                                 taxCode;
        OKATO_RU                                okato;
        PaymentOrderBudgetReceiptClassCode_RU   kbk;
        str                                     section;
        Integer                                 assetKind;
        NoYes                                   railwayAsset;
        Factor                                  railwayFactor;
        boolean                                 isNewVersion;

        #define.EndMarch(31)
        #define.EndJune(30)
        #define.EndSeptember(30)
        #define.MarchNum(03)
        #define.JuneNum(06)
        #define.SeptemberNum(09)

        if (dateTo != DateTimeUtil::getEndOfYearDate(preferredLocale, fromDate))
        {
            return 0;
        }

        while select rTax25RegTransAsset
            order by LineNumber
            where rTax25RegTransAsset.AssessedTaxRegisterType == RAssetAssessedTaxRegType::AssessedTax &&
                  rTax25RegTransAsset.FiscalYear              == year(fromDate)                        &&
                  rTax25RegTransAsset.BlockType               == ReportBlockType::Body
        exists join rTax25RegJournalTable
            where rTax25RegJournalTable.JournalNum            == rTax25RegTransAsset.JournalNum         &&
                  rTax25RegJournalTable.PeriodNum             == rTax25RegTransAsset.PeriodNum          &&
                  rTax25RegJournalTable.PeriodType            == rTax25RegTransAsset.PeriodType         &&
                  rTax25RegJournalTable.FiscalYear            == rTax25RegTransAsset.FiscalYear         &&
                  rTax25RegJournalTable.RegisterJournalType   == RTax25RegisterJournalType::Asset_RU    &&
                  (rTax25RegJournalTable.EndDate              == mkDate(#EndMarch, #MarchNum, year(fromDate))       ||
                   rTax25RegJournalTable.EndDate              == mkDate(#EndJune, #JuneNum, year(fromDate))         ||
                   rTax25RegJournalTable.EndDate              == mkDate(#EndSeptember, #SeptemberNum, year(fromDate)))
        notexists join rTax25RegJournalTableNewVersion
            where(rTax25RegJournalTable.CorrectedRecId           == 0                                    &&
                  rTax25RegJournalTableNewVersion.CorrectedRecId == rTax25RegJournalTable.RecId)         ||
                 (rTax25RegJournalTable.CorrectedRecId           != 0                                    &&
                  rTax25RegJournalTableNewVersion.CorrectedRecId == rTax25RegJournalTable.CorrectedRecId &&
                  rTax25RegJournalTableNewVersion.Version        >  rTax25RegJournalTable.Version)
        {
            [assetKind, railwayAsset, railwayFactor] = [0, NoYes::No, 0.0];

            isNewVersion = conLen(rTax25RegTransAsset.RegisterValues) == 25;

            if (isNewVersion)
            {
                [okato, kbk, taxCode, section, assetKind, railwayAsset, railwayFactor] = rTax25RegTransAsset.RegisterValues;
            }
            else
            {
                [okato, kbk, taxCode, section] = rTax25RegTransAsset.RegisterValues;
            }

            taxCode = RTax25RegCalc_AssessedTax::taxCode(taxCode);

            if (regTransTotal.RefTableId)
            {
                if (okato   == header.rcoad &&
                    kbk     == header.BudgetRevenueCode &&
                    section == header.Section &&
                    taxCode == header.SalesTaxCode &&
                    assetKind == header.AssetKind &&
                    railwayAsset == header.RailwayAsset &&
                    railwayFactor == header.RailwayFactor)
                {
                    while select rTax25RegTransAllowance
                        order by LineNumber
                        where rTax25RegTransAllowance.JournalNum              == rTax25RegTransAsset.JournalNum        &&
                              rTax25RegTransAllowance.AssessedTaxRegisterType == RAssetAssessedTaxRegType::AssessedTax &&
                              rTax25RegTransAllowance.FiscalYear              == year(fromDate)                        &&
                              rTax25RegTransAllowance.PeriodType              == rTax25RegTransAsset.PeriodType        &&
                              rTax25RegTransAllowance.PeriodNum               == rTax25RegTransAsset.PeriodNum         &&
                              rTax25RegTransAllowance.LineNumber              >  rTax25RegTransAsset.LineNumber
                    {
                        if (! rTax25RegTransAllowance.RefTableId)
                        {
                            break;
                        }
    
                        if (rTax25RegTransAllowance.RefTableId == regTransTotal.RefTableId &&
                            rTax25RegTransAllowance.RefRecId   == regTransTotal.RefRecId)
                        {
                            ret += (conPeek(rTax25RegTransAllowance.RegisterValues, isNewVersion ? 13 : 10) -
                                    conPeek(rTax25RegTransAllowance.RegisterValues, isNewVersion ? 16 : 13));
                        }
                    }
                }
            }
            else
            {
                if (okato   == regTransTotal.rcoad &&
                    kbk     == regTransTotal.BudgetRevenueCode &&
                    section == regTransTotal.Section &&
                    taxCode == regTransTotal.SalesTaxCode &&
                    assetKind == regTransTotal.AssetKind &&
                    railwayAsset == regTransTotal.RailwayAsset &&
                    railwayFactor == regTransTotal.RailwayFactor)
                {
                    ret += (conPeek(rTax25RegTransAsset.RegisterValues, isNewVersion ? 13 : 10) -
                            conPeek(rTax25RegTransAsset.RegisterValues, isNewVersion ? 16 : 13));
                }
            }
        }

        while select
            rcoad,
            BudgetRevenueCode,
            Section,
            SalesTaxCode,
            AssetKind,
            RailwayAsset,
            RailwayFactor,
            JournalTransRefRecId,
            LineNumber,
            TaxAmount,
            TaxReductionAmount from regTransAsset
                order by LineNumber
            where regTransAsset.BlockType           == ReportBlockType::Body
        exists join journalTrans
            where journalTrans.RecId                == regTransAsset.JournalTransRefRecId &&
                  journalTrans.RegisterId           == registerId                         &&
                  ! journalTrans.Cancelled
        exists join rTax25RegJournalTable
            where rTax25RegJournalTable.JournalNum          == journalTrans.JournalNum             &&
                  rTax25RegJournalTable.PeriodNum           == journalTrans.PeriodNum              &&
                  rTax25RegJournalTable.PeriodType          == journalTrans.PeriodType             &&
                  rTax25RegJournalTable.FiscalYear          == journalTrans.FiscalYear             &&
                  rTax25RegJournalTable.RegisterJournalType == RTax25RegisterJournalType::Asset_RU &&
                  (rTax25RegJournalTable.EndDate            == mkdate(#EndMarch, #MarchNum, year(fromDate)) ||
                   rTax25RegJournalTable.EndDate            == mkdate(#EndJune, #JuneNum, year(fromDate))   ||
                   rTax25RegJournalTable.EndDate            == mkdate(#EndSeptember, #SeptemberNum, year(fromDate)))
        notexists join rTax25RegJournalTableNewVersion
            where(rTax25RegJournalTable.CorrectedRecId           == 0                                    &&
                  rTax25RegJournalTableNewVersion.CorrectedRecId == rTax25RegJournalTable.RecId)         ||
                 (rTax25RegJournalTable.CorrectedRecId           != 0                                    &&
                  rTax25RegJournalTableNewVersion.CorrectedRecId == rTax25RegJournalTable.CorrectedRecId &&
                  rTax25RegJournalTableNewVersion.Version        >  rTax25RegJournalTable.Version)
        {
            taxCode = RTax25RegCalc_AssessedTax::taxCode(regTransAsset.SalesTaxCode);
    
            if (regTransTotal.RefTableId)
            {
                if (regTransAsset.rcoad             == header.rcoad             &&
                    regTransAsset.BudgetRevenueCode == header.BudgetRevenueCode &&
                    regTransAsset.Section           == header.Section           &&
                    taxCode                         == header.SalesTaxCode      &&
                    regTransAsset.AssetKind         == header.AssetKind         &&
                    regTransAsset.RailwayAsset      == header.RailwayAsset      &&
                    regTransAsset.RailwayFactor     == header.RailwayFactor)
                {
                    while select RefTableId, RefRecId, TaxAmount, TaxReductionAmount from regTransAllowance
                        order by LineNumber
                        where regTransAllowance.JournalTransRefRecId == regTransAsset.JournalTransRefRecId &&
                              regTransAllowance.LineNumber           >  regTransAsset.LineNumber
                    {
                        if (! regTransAllowance.RefTableId)
                        {
                            break;
                        }
    
                        if (regTransAllowance.RefTableId == regTransTotal.RefTableId &&
                            regTransAllowance.RefRecId   == regTransTotal.RefRecId)
                        {
                            ret += (regTransAllowance.TaxAmount - regTransAllowance.TaxReductionAmount);
                        }
                    }
                }
            }
            else
            {
                if (regTransAsset.rcoad             == regTransTotal.rcoad             &&
                    regTransAsset.BudgetRevenueCode == regTransTotal.BudgetRevenueCode &&
                    regTransAsset.Section           == regTransTotal.Section           &&
                    taxCode                         == regTransTotal.SalesTaxCode      &&
                    regTransAsset.AssetKind         == regTransTotal.AssetKind         &&
                    regTransAsset.RailwayAsset      == regTransTotal.RailwayAsset      &&
                    regTransAsset.RailwayFactor     == regTransTotal.RailwayFactor)
                {
                    ret += (regTransAsset.TaxAmount - regTransAsset.TaxReductionAmount);
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculates register.
    /// </summary>
    /// <remarks>
    ///  First, calculates map which contains combinations of RCOAD, section, branch and new book value of movables related to them.
    ///  Then, selects "header" records, which are not movables and where date is not specified.
    /// </remarks>
    public void calc()
    {
        try
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00085, funcName());

            ttsbegin;
    
            super();
    
            this.calculateMovablesMap();
    
            while select regTransTotal
                order by LineNumber
                where regTransTotal.JournalTransRefRecId  == totalRefRecId &&
                      regTransTotal.Period                == dateNull()    &&
                      regTransTotal.Movables              == NoYes::No
            {
                if (! header)
                {
                    this.outHeader();
                }

                if (header                                           &&
                    regTransTotal.rcoad                              &&
                    (regTransTotal.rcoad             != header.rcoad ||
                     regTransTotal.BudgetRevenueCode != header.BudgetRevenueCode))
                {
                    this.outFooter();
                    paySum      = 0;
                    prevPaySum  = 0;
                    decPaySum   = 0;
                    this.outHeader();
                }
                rAssetTable.clear();
                if (! regTransTotal.RefTableId)
                {
                    header = regTransTotal.data();
                    branchId = "";
                }
                else if (regTransTotal.RefTableId == tableNum(RAssetTable))
                {
                    rAssetTable = RAssetTable::findrec(regTransTotal.RefRecId);
                }
                else if (regTransTotal.RefTableId == tableNum(Branches_RU))
                {
                    branchId = Branches_RU::findRecId(regTransTotal.RefRecId).BranchId;
                }
    
                this.fillSections();
            }
    
            if (header)
            {
                this.outFooter();
            }
    
            this.infologRemainingMovables();
    
            ttscommit;
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSections</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates single line in register "Assessed tax".
    /// </summary>
    /// <remarks>
    ///  Calculates average amounts for FAs which displayed in section 2 or cadastral value for FAs which displayed in section 3. Calculates all other values in register.
    ///  If no data present in section of "Totals" register, only header record created.
    /// </remarks>
    private void fillSections()
    {
        RTax25RegisterTrans_AssessedTotalDepr transTotal;
        RAssetNetBookValue        avgValue, avgTaxAllowance, taxBasis, pay, prevPay, decSum;
        CadastralValue_RU         cadastralValue, cadastralTaxAllowance;
        int                       periodNum;
        RAssetSection             shareInDistributedProperty;
        RTax25TaxTable            rTax25TaxTable;
        container                 distributionShare;
        boolean                   mustCalcCadastral;
        RAssetAmount              lastPeriodNetBookValue;
        RAssetAmount              lastPeriodNetBookValueTotal;
        int section = str2int(header.Section);
        int assetKind = header.AssetKind;
        Months ownershipPeriod;
        Months costChangePeriod;
        RAssetTaxAccountingFactor ownershipFactor;
        RAssetTaxAccountingFactor costChangeFactor;
        RAssetTaxAccountingFactor ownedShareFactor;
        RAssetTaxAccountingFactor distributionShareFactor;
        Factor railwayFactor = header.RailwayFactor ? header.RailwayFactor : 1;
        RAssetSection ownedShare;
        RAssetSection cadastralChangePeriod;
        RAssetTaxInfoValue assetTaxInfoValue;
        RAssetLocation location;

        const real DecimalNum = 0.01;

        void addRecord()
        {
            if (periodNum)
            {
                if (!mustCalcCadastral)
                {
                    avgValue                   = round(avgValue / periodNum, DecimalNum);
                    avgTaxAllowance            = round(avgTaxAllowance / periodNum, DecimalNum);
                }

                taxBasis = (mustCalcCadastral) ? (cadastralValue - cadastralTaxAllowance) : (avgValue - avgTaxAllowance);
                taxBasis = round(taxBasis * distributionShareFactor * (ownedShareFactor ? ownedShareFactor : 1), DecimalNum);

                pay = taxBasis * this.percent(taxBasis) * railwayFactor *
                    (section == 3 ? ownershipFactor * costChangeFactor : 1) / 100;

                pay = round(pay / this.periodDivider(), DecimalNum);
                prevPay = (assetKind == 4 || assetKind == 7) ?  0 : this.advancePaymentSum();

                if (rTax25TaxTable.AllowanceDecreaseSumValue <= 100)
                {
                    decSum = round(pay * rTax25TaxTable.AllowanceDecreaseSumValue / 100, DecimalNum);
                }
                str sectionWithPeriod = regTransTotal.Section + cadastralChangePeriod;

                regQuery.addBodyRecord(0, [regTransTotal.RCOAD,
                                       regTransTotal.BudgetRevenueCode,
                                       this.taxCodePercentStr(regTransTotal.SalesTaxCode, taxBasis),
                                       sectionWithPeriod,
                                       regTransTotal.AssetKind,
                                       regTransTotal.RailwayAsset,
                                       regTransTotal.RailwayFactor,
                                       avgValue,
                                       avgTaxAllowance,
                                       shareInDistributedProperty,
                                       ownedShare,
                                       taxBasis,
                                       RAssetTaxAllowance::find(rTax25TaxTable.AllowanceReductionRateRecId).TaxAllowanceId,
                                       pay,
                                       prevPay,
                                       RAssetTaxAllowance::find(rTax25TaxTable.AllowanceDecreaseSumRecId).TaxAllowanceId,
                                       decSum,
                                       0.,
                                       ownershipPeriod,
                                       ownershipFactor,
                                       costChangePeriod,
                                       costChangeFactor,
                                       cadastralValue,
                                       cadastralTaxAllowance,
                                       lastPeriodNetBookValue,
                                       assetTaxInfoValue.getLandCadastralNum(),
                                       assetTaxInfoValue.getRoomCadastralNum(),
                                       RAssetTaxAllowance::find(rAssetTable.TaxAllowanceRecId).TaxAllowanceId,
                                       lastPeriodNetBookValueTotal,
                                       this.percent(taxBasis),
                                       regTransTotal.BranchId,
                                       regTransTotal.TaxAuthority,
                                       refLineNumberBody],
                                       regTransTotal.RefTableId,
                                       regTransTotal.RefRecId);

                paySum     += pay;
                prevPaySum += prevPay;
                decPaySum  += decSum;
            }
            else
            {
                RTax25RegisterTrans_AssessedTax assessedTaxHeader = regQuery.addBodyRecord(0, [regTransTotal.RCOAD,
                    regTransTotal.BudgetRevenueCode,
                    this.taxCodePercentStr(regTransTotal.SalesTaxCode, taxBasis),
                    regTransTotal.Section,
                    regTransTotal.AssetKind,
                    regTransTotal.RailwayAsset,
                    regTransTotal.RailwayFactor,
                    0., 0., "", "", 0., "", 0., 0., "", 0., 0., 0, 0., 0, 0., 0., 0., 0., "", "", "", 0.,
                    this.percent(taxBasis), regTransTotal.BranchId, regTransTotal.TaxAuthority, 0],
                    regTransTotal.RefTableId,
                    regTransTotal.RefRecId);

                refLineNumberBody = assessedTaxHeader.LineNumber;
            }
        }

        mustCalcCadastral = (section == 3);
        rTax25TaxTable = RTax25TaxTable::find(RTax25TaxModule::Asset_RU, header.SalesTaxCode);
        [distributionShareFactor, shareInDistributedProperty] = this.shareInDistributedProperty(assetKind);

        while select transTotal
            order by LineNumber
            where transTotal.JournalTransRefRecId == totalRefRecId &&
                  transTotal.LineNumber           >  regTransTotal.LineNumber
        {
            if (!transTotal.Period)
            {
                break;
            }

            location = RAssetLocation::findOKATO(header.RCOAD);
            assetTaxInfoValue = RAssetTaxInfoValue::newParameters(rAssetTable.AccountNum, 0, transTotal.Period);

            //remembering value for 01.04, 01.07, 01.10, 31.12
            if (transTotal.Period == dateTo || transTotal.Period == dateTo + 1)
            {
                lastPeriodNetBookValue = transTotal.NetBookValue;
                lastPeriodNetBookValueTotal = transTotal.NetBookValueTotal;
            }

            if (!mustCalcCadastral)
            {
                avgValue        += transTotal.NetBookValue;
                avgTaxAllowance += transTotal.NonTaxable;
                periodNum++;
            }
            else
            {
                //this will work only once since only one line per FA exists for cadastral data.
                cadastralValue = transTotal.CadastralValue;
                cadastralTaxAllowance = transTotal.NonTaxable;
                cadastralChangePeriod = strFmt(' %1', transTotal.Period);
                periodNum++;

                ownershipPeriod = transTotal.OwnershipPeriod;
                ownershipFactor = transTotal.OwnershipFactor;
                costChangePeriod = transTotal.CostChangePeriod;
                costChangeFactor = transTotal.CostChangeFactor;
                ownedShare = transTotal.OwnedShare;

                if (ownedShare)
                {
                    int ownedShareLen = strLen(ownedShare);
                    int delimeterPos = strFind(ownedShare, "@SYS35673", 1, ownedShareLen);
                    ownedShareFactor = str2Int(subStr(ownedShare, 1, delimeterPos - 1)) / str2Int(subStr(ownedShare, delimeterPos+1, ownedShareLen));
                }

                if (cadastralValue)
                {
                    addRecord();
                }
            }
        }

        if (!cadastralValue)
        {
            addRecord();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fractionReduction</Name>
				<Source><![CDATA[
    private container fractionReduction(container _share)
    {
        int num = conPeek(_share, 1);
        int den = conPeek(_share, 2);

        if (num mod 2 == 0
            && den mod 2 == 0)
        {
            return this.fractionReduction([num / 2, den / 2]);
        }

        if (num mod 3 == 0
            && den mod 3 == 0)
        {
            return this.fractionReduction([num / 3, den / 3]);
        }

        return [num, den];
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        boolean ret;
    
        ret = super(_registerJournalTrans, _batch);
    
        standardId = RAssetParameters::standardIdDefault();
        beginningOfYear = DateTimeUtil::getStartOfYearDate(preferredLocale, dateFrom);
        totalRefRecId   = RTax25RegCalcController::findChildJournalTrans(RTax25RegisterType::PaymentReceipt,
                                                                         _registerJournalTrans,
                                                                         RAssetAssessedTaxRegType::TotalDepreciatedCost).RecId;
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outFooter</Name>
				<Source><![CDATA[
    private void outFooter()
    {
        regQuery.addFooterRecord(0, [header.rcoad,
                                     header.BudgetRevenueCode,
                                     '',
                                     '',
                                     0, false, 0.0,
                                     0., 0., "", "", 0., "", paySum, prevPaySum, "", decPaySum, 0., 0 ,0., 0 ,0., 0., 0., 0., "", "", "", 0., 0., '', '',0], 0,
                                     strFmt("@GLS116803", header.rcoad, header.BudgetRevenueCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>outHeader</Name>
				<Source><![CDATA[
    private void outHeader()
    {
        regQuery.addHeaderRecord(0, conNull(), 0,
            strFmt("@SYS76498", regTransTotal.rcoad, regTransTotal.BudgetRevenueCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>percent</Name>
				<Source><![CDATA[
    private TaxValue percent(RAssetNetBookValue _taxBasic)
    {
        TaxValue              percent;
    
        percent = TaxData::percent(header.SalesTaxCode, beginningOfYear, _taxBasic) -
                  RTax25TaxTable::find(RTax25TaxModule::Asset_RU, header.SalesTaxCode).AllowanceReductionRateValue;
        percent = percent < 0 ? 0 : percent;
    
        return percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionName</Name>
				<Source><![CDATA[
    private str sectionName(RAssetSection _section, Integer _assetKind)
    {
        str sectionName;

        if (_assetKind != RAssetAssessedTaxType::Section3)
        {
            sectionName = strFmt("@GLS117047", _assetKind) + ', ';
        }

        sectionName += strFmt("@GLS116786", _section);

        return sectionName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shareInDistributedProperty</Name>
				<Source><![CDATA[
    private container shareInDistributedProperty(int _assetKind)
    {
        RAssetOwnedShare numeratorDistributionShare = 1;
        RAssetOwnedShare denominatorDistributionShare = 1;

        if (_assetKind == 2)
        {
            [numeratorDistributionShare, denominatorDistributionShare] = RAssetDistribution::getDistributionShare(rAssetTable.AccountNum, header.SalesTaxCode, header.rcoad);
        }

        RAssetSection shareInDistributedProperty = (numeratorDistributionShare - denominatorDistributionShare) ?
            int2str(numeratorDistributionShare) + "@SYS35673" + int2str(denominatorDistributionShare) : '';
        RAssetTaxAccountingFactor distributionShareFactor = denominatorDistributionShare && numeratorDistributionShare ? numeratorDistributionShare / denominatorDistributionShare : 1;

        return [distributionShareFactor, shareInDistributedProperty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCodePercentStr</Name>
				<Source><![CDATA[
    private str taxCodePercentStr(TaxCode _taxCode, RAssetNetBookValue _taxBasic)
    {
        str taxCodePercentStr;

        if(_taxCode)
        {
            taxCodePercentStr = RTax25RegCalc_AssessedTax::getTaxCodePercentStr(_taxCode, this.percent(_taxBasic));
        }

        return taxCodePercentStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCodePercentStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a string which contains a tax code and tax percent data.
    /// </summary>
    /// <param name="_taxCode">
    /// A tax code.
    /// </param>
    /// <param name="_taxPercent">
    /// A tax percent.
    /// </param>
    /// <returns>
    /// A string which contains a tax code and percent in brackets with percent symbol.
    /// </returns>
    internal static str getTaxCodePercentStr(TaxCode _taxCode, TaxValue _taxPercent)
    {
        return strFmt("@SYP4880728",
            _taxCode,
            strFmt("@RTax25Registers:TaxPercentFormat", num2str(_taxPercent, 0, 2, 1, 0)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a tax code from the tax code percent string.
    /// </summary>
    /// <param name="_taxCodePercent">
    /// A string which contains a tax code and a tax code percent.
    /// </param>
    /// <returns>
    /// A tax code.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxCode taxCode(str _taxCodePercent)
    {
        int position = strFind(_taxCodePercent, "@SYS34952", strLen(_taxCodePercent), -strLen(_taxCodePercent)) - 1;
        return strDel(_taxCodePercent, position, strLen(_taxCodePercent) - position + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCodePercent</Name>
				<Source><![CDATA[
    #define.CharNum(2)
    /// <summary>
    /// Gets a tax code percent from the tax code percent string.
    /// </summary>
    /// <param name="_taxCodePercent">
    /// A string which contains a tax code and a tax code percent.
    /// </param>
    /// <returns>
    /// A tax code percent.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str taxCodePercent(str _taxCodePercent)
    {
        str ret;
        int position = strFind(_taxCodePercent, "@SYS34952", strLen(_taxCodePercent), -strLen(_taxCodePercent)) - 1;

        ret = strDel(_taxCodePercent, 1, position + 1);
        return strDel(ret, strLen(ret)-1, #CharNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMovablesMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculates map, which contains information about distribution of movables on RCOAD, asset kinds amd separate divisions.
    /// </summary>
    private void calculateMovablesMap()
    {
        RAssetSection           section;
        Integer                 assetKind;
        OKATO_RU                rcoad;
        SeparateDivisionId_RU   separateDivisionId;
    
        RAssetAmount            netBookValue;
    
        movablesMap = new Map(Types::Container, Types::Real);
    
        while select regTransTotal
            order by LineNumber
            where regTransTotal.JournalTransRefRecId  == totalRefRecId &&
                  regTransTotal.Movables              == NoYes::Yes
        {
            if (regTransTotal.rcoad)
            {
                section = regTransTotal.Section;
                assetKind = regTransTotal.AssetKind;
                rcoad = regTransTotal.rcoad;
                separateDivisionId = "";
            }

            if (regTransTotal.RefTableId == tableNum(Branches_RU))
            {
                separateDivisionId = Branches_RU::findRecId(regTransTotal.RefRecId).BranchId;
            }

            if (regTransTotal.Period)
            {
                netBookValue = regTransTotal.NetBookValue;

                if (movablesMap.exists([rcoad, section, assetKind, separateDivisionId]))
                {
                    netBookValue += movablesMap.lookup([rcoad, section, assetKind, separateDivisionId]);
                }

                movablesMap.insert([rcoad, section, assetKind, separateDivisionId], netBookValue);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>infologRemainingMovables</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Displays infolog, which informs user that movables exist which were not processed.
    /// </summary>
    /// <remarks>
    ///  Generally, movables must be allocated to FAs in section 2 of report.
    ///  But if movable has combination of RCOAD, Branch and Asset kind which is not present in section 2, it may not be allocated anythere.
    /// </remarks>
    private void infologRemainingMovables()
    {
        MapEnumerator           me = movablesMap.getEnumerator();
        OKATO_RU                rcoad;
        RAssetSection           section;
        int                     assetKind;

        while (me.moveNext())
        {
            [rcoad, section, assetKind, branchId] = me.currentKey();

            warning(strFmt("@SYP4881057", rcoad, branchId, this.sectionName(section, assetKind), me.currentValue()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodDivider</Name>
				<Source><![CDATA[
    private real periodDivider()
    {
        if (dateTo == DateTimeUtil::getEndOfYearDate(preferredLocale, dateTo))
            return 1;
    
        if (registerJournalTrans.PeriodType == RTax25PeriodType::HalfYear)
            return 2;
    
        if (registerJournalTrans.PeriodType == RTax25PeriodType::NineMonths)
        {
            return 12.0/9;
        }
    
        if (dateTo == dateEndQtr(dateTo))
            return 4;
    
        return 12;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>