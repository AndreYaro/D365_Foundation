<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCRuntimeConfiguratorFormFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for creating and opening the runtime configurator form.
/// </summary>
class PCRuntimeConfiguratorFormFactory
{
    PCPriceMethod               priceMethod;
    boolean                     isRunningMultiCompany;
    PCProductConfiguration      productConfiguration;
    PCRuntimeMode               runtimeMode;
    Object                      caller;
    Common                      sourceDocumentLine;
    ItemId                      itemID;
    EcoResProductName           productName;
    CurrencyCode                currency;
    RefRecId                    priceModel;
    DataAreaId                  demandLegalEntity;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a runtime configurator <c>FormRun</c> object.
    /// </summary>
    /// <param name="_productConfigurationModel">
    /// A product configuration model.
    /// </param>
    /// <param name="_runtimePriceModelInstanceFactory">
    /// A runtime price model instance factory.
    /// </param>
    /// <returns>
    /// A <c>FormRun</c> object.
    /// </returns>
    public FormRun create(PCProductConfigurationModel _productConfigurationModel, PCRuntimePriceModelInstanceFactory _runtimePriceModelInstanceFactory = PCRuntimePriceModelInstanceFactory::construct())
    {
        PCRuntimePriceModelInstance runtimePriceModelInstance;
        Args                        args = new Args();
        FormRun                     formRun;
        Object                      formRunObject;

        PCContractNotNull::assertRecord(_productConfigurationModel, funcName());

        args.parmEnumType(enumNum(PCRuntimeMode));
        args.parmEnum(runtimeMode);
        args.record(_productConfigurationModel);
        args.lookupRecord(productConfiguration);

        runtimePriceModelInstance = this.initRuntimePriceModelInstance(_productConfigurationModel, _runtimePriceModelInstanceFactory);

        args.parm(PCRuntimeLibrary::getModelXML(_productConfigurationModel, productConfiguration, priceMethod, runtimePriceModelInstance));

        if (caller)
        {
            args.caller(caller);
        }

        args.name(PCRuntimeLibrary::configuratorFormName());
        formRun = classfactory.formRunClass(args);

        formRunObject = formRun;
        formRunObject.parmPriceMethod(priceMethod);
        formRunObject.parmSourceDocumentLine(sourceDocumentLine);
        formRunObject.parmSourceLineTableId(sourceDocumentLine.TableId);
        formRunObject.parmItemId(itemId);
        formRunObject.parmProductName(productName);
        formRunObject.parmRuntimePriceModelInstance(runtimePriceModelInstance);
        formRunObject.parmIsRunningInMultiCompany(isRunningMultiCompany);

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and runs the runtime configuration form.
    /// </summary>
    /// <param name="_productConfigurationModel">
    /// A product configuration model.
    /// </param>
    /// <param name="_runtimePriceModelInstanceFactory">
    /// A runtime price model instance factory.
    /// </param>
    /// <returns>
    /// A <c>PCConfigurationState</c> object.
    /// </returns>
    public PCConfigurationState createAndRun(PCProductConfigurationModel _productConfigurationModel, PCRuntimePriceModelInstanceFactory _runtimePriceModelInstanceFactory = PCRuntimePriceModelInstanceFactory::construct())
    {
        FormRun                 formRun;
        Object                  formRunObject;

        formRun = this.create(_productConfigurationModel, _runtimePriceModelInstanceFactory);
        formRun.run();
        formRun.wait();

        formRunObject = formRun;

        return formRunObject.getConfigurationState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRuntimePriceModelInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the <c>PCRuntimePriceModelInstance</c> class.
    /// </summary>
    /// <param name="_runtimePriceModelInstanceFactory">
    ///  An instance of <c>PCRuntimePriceModelInstanceFactory</c> clas.
    /// </param>
    /// <param name="_productConfigurationModel">
    /// A product configuration model.
    /// </param>
    /// <returns>
    /// An instance of <c>PCRuntimePriceModelInstance</c> class.
    /// </returns>
    protected PCRuntimePriceModelInstance getRuntimePriceModelInstance(PCRuntimePriceModelInstanceFactory _runtimePriceModelInstanceFactory, PCProductConfigurationModel _productConfigurationModel)
    {
        PCRuntimePriceModelInstance runtimePriceModelInstance;

        if (this.parmIsRunningMultiCompany())
        {
            changeCompany (this.parmDemandLegalEntity())
            {
                runtimePriceModelInstance = _runtimePriceModelInstanceFactory.create(this.parmCurrency(), this.parmPriceModel(), this.parmSourceDocumentLine(), _productConfigurationModel, this.parmRuntimeMode(), this.parmIsRunningMultiCompany());
            }
        }
        else
        {
             runtimePriceModelInstance = _runtimePriceModelInstanceFactory.create(this.parmCurrency(), this.parmPriceModel(), this.parmSourceDocumentLine(), _productConfigurationModel, this.parmRuntimeMode(), this.parmIsRunningMultiCompany());
        }

        return runtimePriceModelInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRuntimePriceModelInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the Runtime Price Model Instance.
    /// </summary>
    /// <param name = "_productConfigurationModel"> A product configuration model. </param>
    /// <param name = "_runtimePriceModelInstanceFactory"> A runtime price model instance factory. </param>
    /// <returns> The Runtime Price Model Instance.</returns>
    protected PCRuntimePriceModelInstance initRuntimePriceModelInstance(PCProductConfigurationModel _productConfigurationModel, PCRuntimePriceModelInstanceFactory _runtimePriceModelInstanceFactory)
    {
        PCRuntimePriceModelInstance runtimePriceModelInstance;

        if (!PCRuntimePriceMode::supportsAttributeBasedPricing(priceMethod, runtimeMode, sourceDocumentLine))
        {
            priceMethod                 = PCPriceMethod::Cost;
            runtimePriceModelInstance   = PCRuntimePriceModelInstance::construct();
        }
        else
        {
            runtimePriceModelInstance = this.getRuntimePriceModelInstance(_runtimePriceModelInstanceFactory, _productConfigurationModel);
        }

        return runtimePriceModelInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // Defaults
        priceMethod = PCPriceMethod::Cost;
        runtimeMode = PCRuntimeMode::Test;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaller</Name>
				<Source><![CDATA[
    public Object parmCaller(Object _caller = caller)
    {
        caller = _caller;

        return caller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrency</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrency(CurrencyCode _currency = currency)
    {
        currency = _currency;

        return currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDemandLegalEntity</Name>
				<Source><![CDATA[
    public DataAreaId parmDemandLegalEntity(DataAreaId _demandLegalEntity = demandLegalEntity)
    {
        demandLegalEntity = _demandLegalEntity;

        return demandLegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRunningMultiCompany</Name>
				<Source><![CDATA[
    public boolean parmIsRunningMultiCompany(boolean _isRunningMultiCompany = isRunningMultiCompany)
    {
        isRunningMultiCompany = _isRunningMultiCompany;

        return isRunningMultiCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceMethod</Name>
				<Source><![CDATA[
    public PCPriceMethod parmPriceMethod(PCPriceMethod _priceMethod = priceMethod)
    {
        priceMethod = _priceMethod;

        return priceMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceModel</Name>
				<Source><![CDATA[
    public RefRecId parmPriceModel(RefRecId _priceModel = priceModel)
    {
        priceModel = _priceModel;

        return priceModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductConfiguration</Name>
				<Source><![CDATA[
    public PCProductConfiguration parmProductConfiguration(PCProductConfiguration _productConfiguration = productConfiguration)
    {
        productConfiguration = _productConfiguration;

        return productConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductName</Name>
				<Source><![CDATA[
    public EcoResProductName parmProductName(EcoResProductName _productName = productName)
    {
        productName = _productName;

        return productName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRuntimeMode</Name>
				<Source><![CDATA[
    public PCRuntimeMode parmRuntimeMode(PCRuntimeMode _runtimeMode = runtimeMode)
    {
        runtimeMode = _runtimeMode;

        return runtimeMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentLine</Name>
				<Source><![CDATA[
    public Common parmSourceDocumentLine(Common _sourceDocumentLine = sourceDocumentLine)
    {
        sourceDocumentLine = _sourceDocumentLine;

        return sourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCRuntimeConfiguratorFormFactory construct()
    {
        return new PCRuntimeConfiguratorFormFactory();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>