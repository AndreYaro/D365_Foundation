<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanStagingTableFillerHistoricalExternalDemand</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqDemPlanStagingTableFillerHistoricalExternalDemand</c> class populates the staging table based on the historical transactions loaded from an external source.
/// </summary>
[ReqDemPlanStagingTableFillerAttribute]
class ReqDemPlanStagingTableFillerHistoricalExternalDemand extends ReqDemPlanStagingTableFiller
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ReqDemPlanStagingTableProcessorDesc description()
    {
        return "@DMP:HistoricalExternalDemand";
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    public int64 execute(
        ReqDemPlanCubeStagingTable              _stagingTable,
        ReqDemPlanExportBaseDataContract        _dataContract,
        RefRecId                                _version,
        ReqDemPlanDataSourceRecId               _dataSource,
        ReqDemPlanAllocationKeyFilterTmp        _allocationKeyFilterTable)
    {
        ReqDemPlanDataSource reqDemPlanDataSource;
        int64 processedRecords = 0;

        while select RecId from reqDemPlanDataSource
            where reqDemPlanDataSource.SourceOrigin == ReqDemPlanDataSource::findByRecId(_dataSource).SourceOrigin
        {
            processedRecords += this.doExecute(_stagingTable, _dataContract, _version, reqDemPlanDataSource.RecId, _allocationKeyFilterTable);
        }

        return processedRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doExecute</Name>
				<Source><![CDATA[
    protected int64 doExecute(
        ReqDemPlanCubeStagingTable              _stagingTable,
        ReqDemPlanExportBaseDataContract        _dataContract,
        RefRecId                                _version,
        ReqDemPlanDataSourceRecId               _dataSource,
        ReqDemPlanAllocationKeyFilterTmp        _allocationKeyFilterTable)
    {
        return this.copyItemSpecificExternalForecast(_stagingTable, _dataContract, _version, _dataSource, _allocationKeyFilterTable)
            + this.copyAllocationKeySpecificExternalForecast(_stagingTable, _dataContract, _version, _dataSource, _allocationKeyFilterTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyItemSpecificExternalForecast</Name>
				<Source><![CDATA[
    private int64 copyItemSpecificExternalForecast(
        ReqDemPlanCubeStagingTable              _stagingTable,
        ReqDemPlanExportBaseDataContract        _dataContract,
        RefRecId                                _version,
        ReqDemPlanDataSourceRecId               _dataSource,
        ReqDemPlanAllocationKeyFilterTmp        _allocationKeyFilterTable)
    {
        ReqDemPlanCubeStagingTable              sourceStagingTable;
        ForecastItemAllocationLine              allocationLine;
        InventDim                               inventDim;

        boolean isNoJoinStatusFlightEnabled = ReqDemPlanExternalDemandNoJoinStatusDimFlight::instance().isEnabled();

        #localmacro.baseAttributeFields
            ItemId, TransactionDate, TransactionQty, TransactionType,
            Site, Warehouse, Configuration, Color, ProductVersion, Size, Style,
            CustAccount, CustGroupId, LogisticsCountryRegionCode, LogisticsAddressStateId
        #endmacro

        #InventDimDevelop

        if (ReqDemPlanForecastImportHandleStatusIdFlight::instance().isEnabled())
        {
            insert_recordset _stagingTable
            (
                Version, DataSource, #baseAttributeFields, StatusId,
                AllocationKey
            )
            select  _version, _dataSource, #baseAttributeFields, StatusId
                from sourceStagingTable
                    where sourceStagingTable.DataSource == _dataSource
                        && sourceStagingTable.Version == ReqDemPlanForecastVersion::ForecastedExternally
                        && sourceStagingTable.ItemId != ''
                        && sourceStagingTable.TransactionDate >= _dataContract.parmHistoricalStart()
                        && sourceStagingTable.TransactionDate <= _dataContract.actualDemandEndDate()
            join AllocationId from allocationLine
                where sourceStagingTable.ItemId == allocationLine.ItemId
            exists join inventDim
                where inventDim.InventDimId == allocationLine.InventDimId
                    && inventDim.ConfigId == sourceStagingTable.Configuration
                    && inventDim.InventSizeId == sourceStagingTable.Size
                    && inventDim.InventColorId == sourceStagingTable.Color
                    && inventDim.InventVersionId == sourceStagingTable.ProductVersion
                    && inventDim.InventStyleId == sourceStagingTable.Style
                    && (isNoJoinStatusFlightEnabled || inventDim.InventStatusId == sourceStagingTable.StatusId)
                    && (inventDim.InventSiteId  == ''
                            && inventDim.InventLocationId == ''
                            && inventDim.InventBatchId == ''
                            && inventDim.WMSLocationId == ''
                            && inventDim.LicensePlateId == ''
                            && inventDim.InventSerialId == ''
                            && (!isNoJoinStatusFlightEnabled || inventDim.InventStatusId == '')
                            && inventDim.inventDimension1 == ''
                            && inventDim.inventDimension2 == ''
                            && inventDim.inventDimension3 == ''
                            && inventDim.inventDimension4 == ''
                            && inventDim.inventDimension5 == ''
                            && inventDim.inventDimension6 == ''
                            && inventDim.inventDimension7 == ''
                            && inventDim.inventDimension8 == ''
                            && inventDim.inventDimension9 == utcDateTimeNull()
                            && inventDim.inventDimension10 == 0
                            && inventDim.inventDimension11 == ''
                            && inventDim.inventDimension12 == ''
                            && inventDim.InventGTDId_RU == ''
                            && inventDim.InventProfileId_RU == ''
                            && inventDim.InventOwnerId_RU == '')
            exists join _allocationKeyFilterTable
                where _allocationKeyFilterTable.AllocateId == allocationLine.AllocationId;
        }
        else
        {
            insert_recordset _stagingTable
            (
                Version, DataSource, #baseAttributeFields,
                AllocationKey
            )
            select  _version, _dataSource, #baseAttributeFields
                from sourceStagingTable
                    where sourceStagingTable.DataSource == _dataSource
                        && sourceStagingTable.Version == ReqDemPlanForecastVersion::ForecastedExternally
                        && sourceStagingTable.ItemId != ''
                        && sourceStagingTable.TransactionDate >= _dataContract.parmHistoricalStart()
                        && sourceStagingTable.TransactionDate <= _dataContract.actualDemandEndDate()
            join AllocationId from allocationLine
                where sourceStagingTable.ItemId == allocationLine.ItemId
            exists join inventDim
                where inventDim.InventDimId == allocationLine.InventDimId
                    && inventDim.ConfigId == sourceStagingTable.Configuration
                    && inventDim.InventSizeId == sourceStagingTable.Size
                    && inventDim.InventColorId == sourceStagingTable.Color
                    && inventDim.InventVersionId == sourceStagingTable.ProductVersion
                    && inventDim.InventStyleId == sourceStagingTable.Style
                    && (inventDim.InventSiteId  == ''
                            && inventDim.InventLocationId == ''
                            && inventDim.InventBatchId == ''
                            && inventDim.WMSLocationId == ''
                            && inventDim.LicensePlateId == ''
                            && inventDim.InventStatusId == ''
                            && inventDim.InventSerialId == ''
                            && inventDim.inventDimension1 == ''
                            && inventDim.inventDimension2 == ''
                            && inventDim.inventDimension3 == ''
                            && inventDim.inventDimension4 == ''
                            && inventDim.inventDimension5 == ''
                            && inventDim.inventDimension6 == ''
                            && inventDim.inventDimension7 == ''
                            && inventDim.inventDimension8 == ''
                            && inventDim.inventDimension9 == utcDateTimeNull()
                            && inventDim.inventDimension10 == 0
                            && inventDim.inventDimension11 == ''
                            && inventDim.inventDimension12 == ''
                            && inventDim.InventGTDId_RU == ''
                            && inventDim.InventProfileId_RU == ''
                            && inventDim.InventOwnerId_RU == '')
            exists join _allocationKeyFilterTable
                where _allocationKeyFilterTable.AllocateId == allocationLine.AllocationId;
        }

        if (ReqDemForecastItemAllocationLineDuplicatesValidationToggle::instance().isEnabled())
        {
            while select count(RecId), ItemId, inventDimId from allocationLine
                group by allocationLine.ItemId, allocationLine.InventDimId
            exists join _allocationKeyFilterTable
                where _allocationKeyFilterTable.AllocateId == allocationLine.AllocationId
            {
                if (allocationLine.RecId > 1)
                {
                    error(strFmt("@SCMPlanning:ReqDemPlanStagingTableDuplicatedRecordsError", allocationLine.ItemId, allocationLine.InventDimId));
                }
            }
        }

        return _stagingTable.rowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAllocationKeySpecificExternalForecast</Name>
				<Source><![CDATA[
    private int64 copyAllocationKeySpecificExternalForecast(
        ReqDemPlanCubeStagingTable              _stagingTable,
        ReqDemPlanExportBaseDataContract        _dataContract,
        RefRecId                                _version,
        ReqDemPlanDataSourceRecId               _dataSource,
        ReqDemPlanAllocationKeyFilterTmp        _allocationKeyFilterTable)
    {
        ReqDemPlanCubeStagingTable sourceStagingTable;

        #localmacro.baseAttributeFields
            ItemId, TransactionDate, TransactionQty, TransactionType,
            Site, Warehouse, Configuration, Color, ProductVersion, Size, Style,
            AllocationKey, CustAccount, CustGroupId, LogisticsCountryRegionCode, LogisticsAddressStateId
        #endmacro

        #localmacro.attributeFieldsWithStatusId
            #baseAttributeFields, StatusId
        #endmacro

        #localmacro.copyAllocationKeySpecific
            insert_recordset _stagingTable
                (
                    Version, DataSource, %1
                )
            select  _version, _dataSource, %1
                from sourceStagingTable
                    where sourceStagingTable.DataSource == _dataSource
                       && sourceStagingTable.Version == ReqDemPlanForecastVersion::ForecastedExternally
                       && sourceStagingTable.ItemId == ''
                       && sourceStagingTable.TransactionDate >= _dataContract.parmHistoricalStart()
                       && sourceStagingTable.TransactionDate <= _dataContract.actualDemandEndDate()
            exists join _allocationKeyFilterTable
                where _allocationKeyFilterTable.AllocateId == sourceStagingTable.AllocationKey;
        #endmacro

        if (ReqDemPlanForecastImportHandleStatusIdFlight::instance().isEnabled())
        {
            #copyAllocationKeySpecific(#attributeFieldsWithStatusId);
        }
        else
        {
            #copyAllocationKeySpecific(#baseAttributeFields);
        }

        return _stagingTable.rowCount();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>