<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayBalanceSheetCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
final public class rPayBalanceSheetCopy extends RunBaseBatch implements BatchRetryable
{
    DialogField    fieldFrom;
    DialogField    fieldTo;

    RPayBalanceSheetId copyFrom;
    RPayBalanceSheetId copyTo;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        copyFrom,
        copyTo
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase  dialog  = new DialogRunbase("@RUP6253", this);

        fieldFrom = dialog.addField(extendedTypeStr(RPayBalanceSheetId),"@RUP267","");
        fieldTo   = dialog.addField(extendedTypeStr(RPayBalanceSheetId),"@RUP268","");
        fieldTo.lookupButton(FormLookupButton::Never);

        fieldFrom.value(copyFrom);
        fieldTo.value(copyTo);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        copyFrom = fieldFrom.value();
        copyTo   = fieldTo.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RPayBalHeader     payBalHeader;
        RPayBalColumns    payBalColumns;

        ttsbegin;

        payBalHeader = RPayBalHeader::find(copyFrom);

        while select payBalColumns
            index BalColIdx
            where payBalColumns.BalanceSheet == copyFrom
        {
            payBalColumns.BalanceSheet = copyTo;
            payBalColumns.insert();
        }

        payBalHeader.BalanceSheet = copyTo;
        payBalHeader.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean    ok = true;

        if (!RPayBalHeader::exist(copyFrom))
        {
            ok = checkFailed(RPayBalHeader::txtNotExist());
        }

        if (RPayBalHeader::exist(copyTo))
        {
            ok = checkFailed(strFmt("@RUP269",copyTo));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public ClassDescription description()
    {
        return "@RUP6253";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPayBalanceSheetCopy       payBalanceSheetCopy;
        FormObjectSet              dataSource;
        ;
        payBalanceSheetCopy  = new RPayBalanceSheetCopy();

        if (payBalanceSheetCopy.prompt())
        {
            payBalanceSheetCopy.runOperation();

            if (args && args.record() && FormDataUtil::getFormDataSource(args.record()))
            {
                dataSource = FormDataUtil::getFormDataSource(args.record());
                dataSource.research();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>