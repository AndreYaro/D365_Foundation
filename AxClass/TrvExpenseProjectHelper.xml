<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpenseProjectHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for expenses interfacing with project functionality.
/// </summary>
public static class TrvExpenseProjectHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>projectLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns query for project lookup, for the specifed worker and category.
    /// </summary>
    /// <param name="worker">
    ///     The <c>RecId</c> of the worker for project/category, worker/project, worker/category validations.
    ///     Default no worker.
    /// </param>
    /// <param name="category">
    ///     The category ID.project/category, worker/project, worker/category validations.
    ///     Default no category.
    /// </param>
    /// <param name="legalEntity">
    ///     The legal entity of the project to be loaded. Default current company.
    /// </param>
    /// <param name="_workerLegalEntity">
    ///     The legal entity record ID of the worker.
    /// </param>
    /// <returns>
    ///     Query for project lookup.
    /// </returns>
    public static Query projectLookup(RefRecId worker = 0, ProjCategoryId category = '', LegalEntityDataAreaId legalEntity = curext(), LegalEntityRecId _workerLegalEntity = CompanyInfo::current())
    {
        Query           projTableLookQuery;
        ProjTableLookup projTableLookup = new ProjTableLookup();
        boolean         isInterCompany  = (legalEntity != curext());

        projTableLookup.parmIsInterCompany(isInterCompany);
        // if the project/category, worker/project, worker/category validations setup is turned on at one legal entity and line is
        // created in other legal entity, then we need to changecompany to fetch the appropriate project parameter values
        changeCompany(legalEntity)
        {
            projTableLookQuery = projTableLookup.buildProjectLookupQueryResource(tableNum(TrvExpTrans), category,  ResourceFacade::findByWorker(worker, _workerLegalEntity), true);
        }

        if (isInterCompany)
        {
            projTableLookQuery.allowCrossCompany(true);
            projTableLookQuery.addCompanyRange(SysQuery::value(legalEntity));
        }
        return projTableLookQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExpenseProjectLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates a project query that only shows records relevant to Expense management.
    /// </summary>
    /// <param name="_workerRecId">
    ///     The <c>RecId</c> of the creating worker for project/category, worker/project, worker/category validations.
    /// </param>
    /// <param name="__categoryId">
    ///     The category id to filter projects. Default no category ID.
    /// </param>
    /// <param name="_legalEntity">
    ///     The legal entity of the project to be loaded. Default current company.
    /// </param>
    /// <param name="_workerLegalEntity">
    ///     The legal entity record ID of the creating worker.
    /// </param>
    public static Query createExpenseProjectLookupQuery(RefRecId _workerRecId, ProjCategoryId _categoryId = '',
                                                    LegalEntityDataAreaId _legalEntity = curext(), 
                                                    LegalEntityRecId _workerLegalEntity = CompanyInfo::current())
    {
        Query                   projTableLookupQuery;
        QueryBuildDataSource    qbdsProjTable;
        QueryBuildDataSource    qbdsProjStatusTypeRule;
        SysTableLookup          sysTableLookup;

        projTableLookupQuery = TrvExpenseProjectHelper::projectLookup(_workerRecId, _categoryId, _legalEntity, _workerLegalEntity);

        qbdsProjTable = projTableLookupQuery.dataSourceTable(tableNum(ProjProjectLookup));

        // Clear fieldList and make sure not all but only required fields are included.
        qbdsProjTable.fields().clearFieldList();
        qbdsProjTable.sortClear();
        qbdsProjTable.orderMode(OrderMode::OrderBy);

        qbdsProjTable.addSelectionField(fieldNum(ProjProjectLookup, ProjId));
        qbdsProjTable.addSelectionField(fieldNum(ProjProjectLookup, Name));
        qbdsProjTable.addSelectionField(fieldNum(ProjProjectLookup, Status));
        qbdsProjTable.addSortField(fieldNum(ProjProjectLookup, ProjId));

        // Exclude Time type projects.
        qbdsProjTable.addRange(fieldNum(ProjProjectLookup, Type)).value(SysQuery::valueNot(ProjType::Time));

        // Exclude projects which violates "CreateJournal" project status rule.
        qbdsProjStatusTypeRule = qbdsProjTable.addDataSource(tableNum(ProjStatusTypeRule));
        qbdsProjStatusTypeRule.joinMode(JoinMode::ExistsJoin);
        qbdsProjStatusTypeRule.addLink(fieldNum(ProjProjectLookup, Status), fieldNum(ProjStatusTypeRule, ProjStatus));
        qbdsProjStatusTypeRule.addLink(fieldNum(ProjProjectLookup, Type), fieldNum(ProjStatusTypeRule, ProjType));
        qbdsProjStatusTypeRule.addRange(fieldNum(ProjStatusTypeRule, ProjStatusRule)).value(queryValue(ProjStatusRule::CreateJournal));

        return projTableLookupQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjectLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Attaches a custom lookup for the project id field to the calling control.
    /// </summary>
    /// <param name="_workerRecId">
    ///     The <c>RecId</c> of the creating worker.
    /// </param>
    /// <param name="_formControl">
    ///     The calling form control.
    /// </param>
    /// <param name="__categoryId">
    ///     The category id to filter projects. Default no category ID.
    /// </param>
    /// <param name="_legalEntity">
    ///     The legal entity of the project to be loaded. Default current company.
    /// </param>
    /// <param name="_workerLegalEntity">
    ///     The legal entity record ID of the creating worker.
    /// </param>
    public static void createProjectLookup(RefRecId _workerRecId, FormControl _formControl, ProjCategoryId _categoryId = '',
                                           LegalEntityDataAreaId _legalEntity = curext(), LegalEntityRecId _workerLegalEntity = CompanyInfo::current())
    {
        Query expenseProjTableLookupQuery = TrvExpenseProjectHelper::createExpenseProjectLookupQuery(_workerRecId, _categoryId, _legalEntity, _workerLegalEntity);

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ProjProjectLookup), _formControl);
        sysTableLookup.addLookupField(fieldNum(ProjProjectLookup, ProjId), true);
        sysTableLookup.addLookupField(fieldNum(ProjProjectLookup, Name));

        sysTableLookup.parmQuery(expenseProjTableLookupQuery);

        ProjOpsManagementLogger logger = ProjOpsManagementLogger::createLogger(classStr(TrvExpenseProjectHelper));
        using (var activityContext = logger.projOpsManagementActivity().projTableLookupContext())
        {
            activityContext.addCustomProperty(ProjOpsManagementInstrumentationActivities::Action, ProjOpsManagementInstrumentationActivities::ProjTableLookup);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectLinePropertyLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a query for project line property lookup.
    /// </summary>
    /// <param name="_legalEntity">
    ///     The legal entity of the project line property to be loaded.
    /// </param>
    /// <returns>
    ///     Query for project line property lookup.
    /// </returns>
    public static Query projectLinePropertyLookupQuery(LegalEntityDataAreaId _legalEntity = curext())
    {
        Query       query;
        boolean     isInterCompany = (_legalEntity != curext());

        query = new Query();
        query.addDataSource(tableNum(ProjLineProperty));

        if (isInterCompany)
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(SysQuery::value(_legalEntity));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjectLinePropertyLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Attaches a custom lookup for the project line property field to the calling control.
    /// </summary>
    /// <param name="_formControl">
    ///     The calling form control.
    /// </param>
    /// <param name="_legalEntity">
    ///     The legal entity of the project line property to be loaded.
    /// </param>
    public static void createProjectLinePropertyLookup(FormControl _formControl, LegalEntityDataAreaId _legalEntity = curext())
    {
        Query query;
        SysTableLookup sysTableLookup;

        query = TrvExpenseProjectHelper::projectLinePropertyLookupQuery(_legalEntity);

        sysTableLookup = SysTableLookup::newParameters(tableNum(ProjLineProperty), _formControl);

        sysTableLookup.addLookupField(fieldNum(ProjLineProperty, LinePropertyId), true);
        sysTableLookup.addLookupField(fieldNum(ProjLineProperty, Name));

        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivitiesLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a query for the project activities lookup legal entity
    /// </summary>
    /// <param name="_legalEntity">
    ///     The legal entity of the activities to be loaded.
    /// </param>
    /// <param name="_projId">
    ///     The project for which the activities are to be loaded.
    /// </param>
    /// <returns>
    ///     The query for the project activities lookup.
    /// </returns>
    public static Query smmActivitiesLookupQuery(LegalEntityDataAreaId _legalEntity = curext(), ProjId _projId = '')
    {
        ProjTable       projTable;
        container       companyList = [_legalEntity];

        if (_projId)
        {
            select firstonly crossCompany:companyList RecId
                from projTable where
                projTable.ProjId == _projId;
        }
        return TrvExpenseProjectHelper::smmActivitiesLookupQueryRecId(_legalEntity, projTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivitiesLookupQueryRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a query for the project activities lookup legal entity
    /// </summary>
    /// <param name="_legalEntity">
    ///     The legal entity of the activities to be loaded.
    /// </param>
    /// <param name="_projRecId">
    ///     The project for which the activities are to be loaded.
    /// </param>
    /// <returns>
    ///     The query for the project activities lookup.
    /// </returns>
    public static Query smmActivitiesLookupQueryRecId(LegalEntityDataAreaId _legalEntity = curext(), RefRecId  _projRecId = 0)
    {
        Query               query;
        boolean             isInterCompany = (_legalEntity != curext());
        HierarchyTreeLookup hierarchyTreeLookup = new HierarchyTreeLookup();

        hierarchyTreeLookup.parmRefRecId(_projRecId);
        query = hierarchyTreeLookup.buildQueryListView(true);

        if (isInterCompany)
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(SysQuery::value(_legalEntity));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActivityLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Attaches a custom lookup for the project id field to the calling control.
    /// </summary>
    /// <param name="_formControl">
    ///     The calling form control.
    /// </param>
    /// <param name="_projId">
    ///     The project ID to look for activities.
    /// </param>
    /// <param name="_legalEntity">
    ///     The legal entity of the project to be loaded.
    /// </param>
    public static void createActivityLookup(FormControl _formControl, ProjId _projId, LegalEntityDataAreaId _legalEntity = curext())
    {
        Query query;
        SysTableLookup sysTableLookup;

        query = TrvExpenseProjectHelper::smmActivitiesLookupQuery(_legalEntity, _projId);

        sysTableLookup = SysTableLookup::newParameters(tableNum(smmActivities), _formControl);

        sysTableLookup.addLookupField(fieldNum(smmActivities, ActivityNumber), true);
        sysTableLookup.addLookupField(fieldNum(smmActivities, Purpose));

        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectCategoryLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a query for project category lookup, for the specified resource.
    /// </summary>
    /// <param name="_resource">
    ///     The record ID of the resource.
    /// </param>
    /// <param name="_projId">
    ///     The project ID.
    /// </param>
    /// <param name="_legalEntity">
    ///     The legal entity of the project categories to be loaded.
    /// </param>
    /// <returns>
    ///     A query for the project category lookup.
    /// </returns>
    public static Query projectCategoryLookup(RefRecId _resource, ProjId _projId, LegalEntityDataAreaId _legalEntity)
    {
        Query                   projCategoryLookQuery;
        ProjCategoryLookup      projCategoryLookup = new ProjCategoryLookup();
        boolean                 isInterCompany = (_legalEntity != curext());

        projCategoryLookup.parmCategoryType(ProjCategoryType::Cost);
        projCategoryLookup.parmFilterEstimate(true);
        projCategoryLookup.parmFilterSubscription(true);
        projCategoryLookup.parmShowActiveOrSubscription(false);
        projCategoryLookup.parmShowInactiveCategories(ProjParameters::find().ShowInactiveCategories);
        projCategoryLookup.parmSubscription(false);
        projCategoryLookup.parmProduction(false);
        projCategoryLookup.parmExpense(true);
        projCategoryLookup.parmFormName('');

        projCategoryLookup.parmIsIntercompany(isInterCompany);

        // If the project/category, resource/project, resource/category validations setup is turned on at one legal entity and line is
        // created in other legal entity, then we need to changecompany to fetch the appropriate project parameter values
        changeCompany(_legalEntity)
        {
            projCategoryLookQuery = projCategoryLookup.buildQuery(tableNum(TrvExpTrans), _projId, _resource);
        }

        if (isInterCompany)
        {
            projCategoryLookQuery.allowCrossCompany(true);
            projCategoryLookQuery.addCompanyRange(SysQuery::value(_legalEntity));
        }

        return projCategoryLookQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjectCategoryLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Attaches a custom lookup for the project category field to the calling control.
    /// </summary>
    /// <param name="_worker">
    ///     The record ID of the worker.
    /// </param>
    /// <param name="_formControl">
    ///     The calling form control.
    /// </param>
    /// <param name="_projId">
    ///     The project ID to look for categories.
    /// </param>
    /// <param name="_legalEntity">
    ///     The legal entity of the project to be loaded.
    /// </param>
    /// <param name="_workerLegalEntity">
    ///     The legal entity record ID of the creating worker.
    /// </param>
    public static void createProjectCategoryLookup(FormControl _formControl, RefRecId _worker, ProjId _projId, 
        LegalEntityDataAreaId _legalEntity = curext(), LegalEntityRecId _workerLegalEntity = CompanyInfo::current())
    {
        Query query;
        SysTableLookup sysTableLookup;

        ResourceRecId resource = ResourceFacade::findByWorker(_worker, _workerLegalEntity);

        query = TrvExpenseProjectHelper::projectCategoryLookup(resource, _projId, _legalEntity);

        sysTableLookup = SysTableLookup::newParameters(tableNum(ProjCategory), _formControl);

        sysTableLookup.addLookupField(fieldNum(ProjCategory, CategoryId), true);
        sysTableLookup.addLookupField(fieldNum(ProjCategory, Name));

        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjectReferenceLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates the project lookup for travel requisition.
    /// </summary>
    /// <param name = "_formControl">
    ///     The caller form control.
    /// </param>
    /// <param name = "_dataAreaId">
    ///     The Id of the company.
    /// </param>
    /// <returns>
    ///     Returns the data for the lookup.
    /// </returns>
    /// <remarks>
    ///     Defines the default criteria for Project lookups displayed when entering Expense reports and Travel requisitions.
    /// </remarks>
    public static Common createProjectReferenceLookup(FormControl _formControl, DataAreaId _dataAreaId)
    {
        SysReferenceTableLookup sysTableLookup = TrvExpenseProjectHelper::addFieldsToProjRefLookup(_formControl);
        Query query = TrvExpenseProjectHelper::createProjRefLookupQuery(_dataAreaId);

        sysTableLookup.parmQuery(query);
        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjRefLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a query for project reference lookup.
    /// </summary>
    /// <param name = "_dataAreaId">
    ///     The data area ID.
    /// </param>
    /// <returns>
    ///     The <c>Query</c> object for constructing the lookup.
    /// </returns>
    /// <remarks>
    ///      Extend this method to modify criteria on Project lookups.
    /// </remarks>
    protected static Query createProjRefLookupQuery(DataAreaId _dataAreaId)
    {
        Query query = new Query();
        
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(ProjTable));
        queryBuildDataSource.addOrderByField(fieldNum(ProjTable, ProjId), SortOrder::Ascending);
        
        QueryBuildRange queryBuildRangeDataArea = queryBuildDataSource.addRange(fieldNum(ProjTable, DataAreaId));
        queryBuildRangeDataArea.value(SysQuery::value(_dataAreaId));
        queryBuildRangeDataArea.status(RangeStatus::Hidden);

        QueryBuildRange queryBuildRangeStatus = queryBuildDataSource.addRange(fieldNum(ProjTable, Status));
        queryBuildRangeStatus.value(SysQuery::valueNot(ProjStatus::Completed));
        queryBuildRangeStatus.status(RangeStatus::Hidden);

        QueryBuildRange queryBuildRangeType = queryBuildDataSource.addRange(fieldNum(ProjTable, Type));
        queryBuildRangeType.value(SysQuery::valueNot(ProjType::Time));
        queryBuildRangeType.status(RangeStatus::Hidden);
        
        // Exclude projects which violates "CreateJournal" project status rule.
        QueryBuildDataSource qbdsProjStatusTypeRule = queryBuildDataSource.addDataSource(tableNum(ProjStatusTypeRule));
        qbdsProjStatusTypeRule.joinMode(JoinMode::ExistsJoin);
        qbdsProjStatusTypeRule.addLink(fieldNum(ProjTable, Status), fieldNum(ProjStatusTypeRule, ProjStatus));
        qbdsProjStatusTypeRule.addLink(fieldNum(ProjTable, Type), fieldNum(ProjStatusTypeRule, ProjType));
        qbdsProjStatusTypeRule.addRange(fieldNum(ProjStatusTypeRule, ProjStatusRule)).value(queryValue(ProjStatusRule::CreateJournal));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldsToProjRefLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Defines the default fields for Project lookups displayed when entering Expense reports and Travel requisitions.
    /// </summary>
    /// <param name = "_formControl">
    ///     An instance of <c>FormControl</c> class.
    /// </param>
    /// <returns>
    ///     An instance of <c>SysReferenceTableLookup</c> class which holds the fields.
    /// </returns>
    /// <remarks>
    ///     Extend this method to add or remove fields from Project lookups.
    /// </remarks>
    protected static SysReferenceTableLookup addFieldsToProjRefLookup(FormControl _formControl)
    {
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(ProjTable), _formControl);
        
        sysTableLookup.addLookupField(fieldNum(ProjTable, ProjId));
        sysTableLookup.addLookupField(fieldNum(ProjTable, Name));
        sysTableLookup.addSelectionField(fieldNum(ProjTable, ProjId));

        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjRefLookupCategoryResourceQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates the project lookup query based on category and resource.
    /// </summary>
    /// <param name = "_categoryId">Related project category unique value; by default blank.</param>
    /// <param name = "_resourceRecId">Resource record identifier.</param>
    /// <returns>A query for the project lookup.</returns>
    /// <remarks>Extend this method to modify criteria on Project lookups.</remarks>
    protected static Query createProjRefLookupCategoryResourceQuery(ProjCategoryId _categoryId = '', ResourceRecId _resourceRecId = 0)
    {
        ProjTableLookup projTableLookup = new ProjTableLookup();
        Query query = projTableLookup.buildProjTableQueryResource(
            tableNum(TrvRequisitionLine),
            _categoryId,
            _resourceRecId,
            true);
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjRefLookupCategoryResourceLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a project lookup based on category and resource.
    /// </summary>
    /// <param name = "_formControl"> An instance of <c>FormControl</c> for which the lookup would be created.</param>
    /// <param name = "_categoryId">Project category identifier.</param>
    /// <param name = "_resourceRecId">Resource record identifier; defaulted to resource record identifier for current user, if no value or 0 is passed.</param>
    /// <returns></returns>
    public static Common createProjRefLookupCategoryResourceLookup(FormControl _formControl, ProjCategoryId _categoryId = '', ResourceRecId _resourceRecId = 0)
    {
        SysReferenceTableLookup sysTableLookup = TrvExpenseProjectHelper::addFieldsToProjRefLookup(_formControl);

        if (!_resourceRecId)
        {
            _resourceRecId = ResourceFacade::findByCurrentWorker();
        }

        Query query = TrvExpenseProjectHelper::createProjRefLookupCategoryResourceQuery(_categoryId, _resourceRecId);
    
        sysTableLookup.parmQuery(query);
        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>