<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVendorRequestReviewTaskEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendVendorRequestReviewTaskEventHandler</c> class handles creation, starting, completion of the review tasks for vendor requests.
/// </summary>
public class VendVendorRequestReviewTaskEventHandler extends WorkflowQueueCreatedEventHandler
    implements
    WorkflowElementCompletedEventHandler,
    WorkflowElementStartedEventHandler,
    WorkflowElementCanceledEventHandler
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the review workflow task item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// A <c>WorkflowElementEventArgs</c> instance.
    /// </param>
    public void canceled(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendVendorRequest vendorRequest = VendVendorRequestManager::getVendorRequestWorkflowElementEvent(_workflowElementEventArgs);
        VendVendorRequestManager::construct(vendorRequest.RequestEntityType).updateRequestStateToWorkflowCanceled(vendorRequest.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the status of the vendor request to review completed.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// A <c>WorkflowElementEventArgs</c> instance.
    /// </param>
    /// <remarks>
    /// The method is called from a workflow framework when the review task is completed.
    /// </remarks>
    public void completed(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendVendorRequest vendorRequest = VendVendorRequestManager::getVendorRequestWorkflowElementEvent(_workflowElementEventArgs);
        VendVendorRequestManager::construct(vendorRequest.RequestEntityType).updateRequestStateToReviewTaskCompleted(vendorRequest.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the local field properties with the <c>VendVendorRequest</c> table workflow document fields.
    /// </summary>
    protected void mapFields()
    {
        DictClass dictClass = new DictClass(classNum(VendRequestNVADocument));
        WorkflowDocIsQueueEnabledAttribute attribute = dictClass.getAttribute(attributeStr(WorkflowDocIsQueueEnabledAttribute));

        VendVendorRequest vendRequest = VendVendorRequest::find(this.parmWorkflowWorkitemTable().RefRecId);

        this.parmDocumentId(vendRequest.RequestId);
        this.parmDocumentType(attribute.parmFriendlyName());
        this.parmSubmittedBy(vendRequest.CreatedBy);
        this.parmCompanyInfo(vendRequest.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status of the vendor request to pending review.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// A <c>WorkflowElementEventArgs</c> instance.
    /// </param>
    /// <remarks>
    /// Occurs when the request being reviewed.
    /// </remarks>
    public void started(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendVendorRequest vendorRequest = VendVendorRequestManager::getVendorRequestWorkflowElementEvent(_workflowElementEventArgs);
        VendVendorRequestManager::construct(vendorRequest.RequestEntityType).updateRequestStateToReviewTaskPending(vendorRequest.RecId);

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>