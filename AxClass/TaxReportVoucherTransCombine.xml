<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportVoucherTransCombine</Name>
	<SourceCode>
		<Declaration><![CDATA[
///<summary>
/// The class <c>TaxReportVoucherTransCombine</c> is used combine the ledger voucher transactions before creating an instance of <c>LedgerVoucherTransObject</c>.
///</summary>
public class TaxReportVoucherTransCombine
{
    private Map combinedObjectAmountMap;
    private Map combinedObjectOffsetMap;
    private Map combinedObjectAdjustAmountMap;
    private List offsetTaxLinkObjectList;
    private Set offsetTaxLinkKeySet;
    private RecordInsertList offsetTaxLinkRecordList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        this.initValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    private void initValues()
    {
        combinedObjectAmountMap = new Map(Types::Container, Types::Real);
        combinedObjectOffsetMap = new Map(Types::Container, Types::Class);
        combinedObjectAdjustAmountMap = new Map(Types::Container, Types::Container);
        offsetTaxLinkObjectList = new List(Types::Class);
        offsetTaxLinkKeySet = new Set(Types::Container);
        offsetTaxLinkRecordList = new RecordInsertList(tableNum(TaxTransGeneralJournalAccountEntry));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransToMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ledger voucher transaction to map.
    /// </summary>
    /// <param name = "_ledgerPostingType">The ledger posting type.</param>
    /// <param name = "_ledgerDimensionAccount">The ledger dimension.</param>
    /// <param name = "_currencyCode">The currency code.</param>
    /// <param name = "_transactionCurrencyAmount">The transaction amount.</param>
    /// <param name = "_skipDimensionValidation">true if need to skip dimension validation; otherwise, false.</param>
    /// <param name = "_currencyHelper">The instance of <c>CurrencyExchangeHelper</c>.</param>
    /// <param name = "_taxTransRecId">The recId of <c>TaxTrans</c>.</param>
    /// <param name = "_taxTransRelationshipType">The taxtrans relationship type.</param>
    internal void addTransToMap(
        LedgerPostingType _ledgerPostingType,
        LedgerDimensionAccount _ledgerDimensionAccount,
        CurrencyCode _currencyCode,
        AmountCur _transactionCurrencyAmount,
        boolean _skipDimensionValidation,
        CurrencyExchangeHelper _currencyExchangeHelper,
        RefRecId _offsetTaxTransRecId = 0,
        TaxTransRelationshipType _taxTransRelationshipType = TaxTransRelationshipType::Tax)
    {
        container combinedObjectKey = [_ledgerPostingType, _ledgerDimensionAccount, _currencyCode, _skipDimensionValidation];
        Amount taxAmountCombined = _transactionCurrencyAmount;
        if (combinedObjectAmountMap.exists(combinedObjectKey))
        {
            taxAmountCombined += combinedObjectAmountMap.lookup(combinedObjectKey);
        }
        combinedObjectAmountMap.insert(combinedObjectKey, taxAmountCombined);

        if (_offsetTaxTransRecId)
        {
            TaxReportOffsetTaxTransGeneralJournalAccountEntry offsetTaxLinkObject;
            if (combinedObjectOffsetMap.exists(combinedObjectKey))
            {
                offsetTaxLinkObject = combinedObjectOffsetMap.lookup(combinedObjectKey);
            }
            else
            {
                RecId fakeTaxTransRecId = this.generateFakeTaxTransRecId();
                offsetTaxLinkObject = new TaxReportOffsetTaxTransGeneralJournalAccountEntry(fakeTaxTransRecId);
                combinedObjectOffsetMap.insert(combinedObjectKey, offsetTaxLinkObject);
            }
            offsetTaxLinkObject.add(
                _offsetTaxTransRecId,
                _taxTransRelationshipType,
                _transactionCurrencyAmount,
                _currencyCode,
                _currencyExchangeHelper);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdjustTransToMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ledger voucher adjustment transaction to map.
    /// </summary>
    /// <param name = "_ledgerPostingType">The ledger posting type.</param>
    /// <param name = "_ledgerDimensionAccount">The ledger dimension.</param>
    /// <param name = "_currencyCode">The currency code.</param>
    /// <param name = "_accountingCurrencyAmount">The transaction amount.</param>
    /// <param name = "_reportingCurrencyAmount">The transaction amount.</param>
    /// <param name = "_skipDimensionValidation">true if need to skip dimension validation; otherwise, false.</param>
    internal void addAdjustTransToMap(
        LedgerPostingType _ledgerPostingType,
        LedgerDimensionAccount _ledgerDimensionAccount,
        CurrencyCode _currencyCode,
        AmountMST _accountingCurrencyAmount,
        AmountMST _reportingCurrencyAmount,
        boolean _skipDimensionValidation)
    {
        container combinedObjectKey = [_ledgerPostingType, _ledgerDimensionAccount, _currencyCode, _skipDimensionValidation];
        Amount accountingCurrencyAmountCombined;
        Amount reportingCurrencyAmountCombined;
        if (combinedObjectAdjustAmountMap.exists(combinedObjectKey))
        {
            [accountingCurrencyAmountCombined, reportingCurrencyAmountCombined] = combinedObjectAdjustAmountMap.lookup(combinedObjectKey);
        }
        accountingCurrencyAmountCombined += _accountingCurrencyAmount;
        reportingCurrencyAmountCombined += _reportingCurrencyAmount;
        combinedObjectAdjustAmountMap.insert(combinedObjectKey, [accountingCurrencyAmountCombined, reportingCurrencyAmountCombined]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransToVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>LedgerVoucherTransObject</c> instance to voucher.
    /// </summary>
    /// <param name = "_ledgerPostingController">The instance of <c>LedgerPostingController</c>.</param>
    /// <param name = "_transactionDate">The transaction date.</param>
    internal void addTransToVoucher(
        LedgerPostingController _ledgerPostingController,
        date _transactionDate)
    {
        this.addNewTransactionAmountDefaultToVoucher(_ledgerPostingController, _transactionDate);
        this.addNewAdjustmentDefaultToVoucher(_ledgerPostingController);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNewTransactionAmountDefaultToVoucher</Name>
				<Source><![CDATA[
    public void addNewTransactionAmountDefaultToVoucher(
        LedgerPostingController _ledgerPostingController,
        date _transactionDate)
    {
        CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::current(),
            _transactionDate);

        MapEnumerator combinedObjectAmountMapEnumerator = combinedObjectAmountMap.getEnumerator();
        while (combinedObjectAmountMapEnumerator.moveNext())
        {
            LedgerPostingType ledgerPostingType;
            LedgerDimensionAccount ledgerDimensionAccount;
            CurrencyCode currencyCode;
            boolean skipDimensionValidation;

            [ledgerPostingType, ledgerDimensionAccount, currencyCode, skipDimensionValidation] = combinedObjectAmountMapEnumerator.currentKey();
            AmountCur sumTransactionCurrencyAmount = combinedObjectAmountMapEnumerator.currentValue();
            LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                _ledgerPostingController.getReference(),
                ledgerPostingType,
                ledgerDimensionAccount,
                currencyCode,
                sumTransactionCurrencyAmount,
                currencyExchangeHelper);
            ledgerVoucherTransObject.parmSkipDimensionValidation(skipDimensionValidation);

            if (combinedObjectOffsetMap
                && combinedObjectOffsetMap.exists(combinedObjectAmountMapEnumerator.currentKey()))
            {
                RefRecId offsetTaxTransRecId;
                TaxTransRelationshipType taxTransRelationshipType;
                Amount transactionCurrencyAmount;

                TaxReportOffsetTaxTransGeneralJournalAccountEntry offsetTaxLinkObject = combinedObjectOffsetMap.lookup(combinedObjectAmountMapEnumerator.currentKey());
                RecId fakeTaxTransRecId = offsetTaxLinkObject.getFakeTaxTransRecId();

                ledgerVoucherTransObject.addTaxTransRelationship(
                    fakeTaxTransRecId,
                    taxTransRelationshipType::Tax,
                    curext(),
                    0,
                    0);

                offsetTaxLinkObjectList.addEnd(offsetTaxLinkObject);
            }
            _ledgerPostingController.addTrans(ledgerVoucherTransObject);
        }
        combinedObjectAmountMap = new Map(Types::Container, Types::Real);
        combinedObjectOffsetMap = new Map(Types::Container, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNewAdjustmentDefaultToVoucher</Name>
				<Source><![CDATA[
    public void addNewAdjustmentDefaultToVoucher(
        LedgerPostingController _ledgerPostingController)
    {
        MapEnumerator combinedObjectAdjustAmountMapEnumerator = combinedObjectAdjustAmountMap.getEnumerator();
        while (combinedObjectAdjustAmountMapEnumerator.moveNext())
        {
            LedgerPostingType ledgerPostingType;
            LedgerDimensionAccount ledgerDimensionAccount;
            CurrencyCode currencyCode;
            boolean skipDimensionValidation;
            AmountMST accountingCurrencyAmount;
            AmountMST reportingCurrencyAmount;

            [ledgerPostingType, ledgerDimensionAccount, currencyCode, skipDimensionValidation] = combinedObjectAdjustAmountMapEnumerator.currentKey();
            [accountingCurrencyAmount, reportingCurrencyAmount] = combinedObjectAdjustAmountMapEnumerator.currentValue();

            LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newAdjustmentDefault(
                    _ledgerPostingController.getReference(),
                    ledgerPostingType,
                    ledgerDimensionAccount,
                    currencyCode,
                    accountingCurrencyAmount,
                    reportingCurrencyAmount);

            ledgerVoucherTransObject.parmSkipDimensionValidation(skipDimensionValidation);
            _ledgerPostingController.addTrans(ledgerVoucherTransObject);
        }
        combinedObjectAdjustAmountMap = new Map(Types::Container, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTaxLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates offset tax links.
    /// </summary>
    /// <param name = "_ledgerPostingController">The instance of <c>LedgerPostingController</c>.</param>
    /// <param name = "_transactionDate">The transaction date.</param>
    internal void generateTaxLink()
    {
        ListEnumerator offsetTaxLinkObjectListEnumerator = offsetTaxLinkObjectList.getEnumerator();
        while (offsetTaxLinkObjectListEnumerator.moveNext())
        {
            TaxReportOffsetTaxTransGeneralJournalAccountEntry offsetTaxLinkObject = offsetTaxLinkObjectListEnumerator.current();
            this.processTaxLink(offsetTaxLinkObject);
        }
        offsetTaxLinkObjectList = new List(Types::Class);
        offsetTaxLinkKeySet = new Set(Types::Container);

        offsetTaxLinkRecordList.insertDatabase();
        offsetTaxLinkRecordList = new RecordInsertList(tableNum(TaxTransGeneralJournalAccountEntry));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxLink</Name>
				<Source><![CDATA[
    private void processTaxLink(TaxReportOffsetTaxTransGeneralJournalAccountEntry _offsetTaxLinkObject)
    {
        TaxTransGeneralJournalAccountEntry fakeTaxLink = _offsetTaxLinkObject.getFakeOffsetTaxLink();

        List offsetTaxLinkList = _offsetTaxLinkObject.getOffsetTaxLinkList();
        ListEnumerator offsetTaxLinkListEnumerator = offsetTaxLinkList.getEnumerator();
        while (offsetTaxLinkListEnumerator.moveNext())
        {
            container offsetTaxLink = offsetTaxLinkListEnumerator.current();
            RecId taxTrans;
            TaxTransRelationshipType taxTransRelationship;
            Amount transactionCurrencyAmount;
            AmountMST accountingCurrencyAmount;
            [taxTrans, taxTransRelationship, transactionCurrencyAmount, accountingCurrencyAmount] = offsetTaxLink;

            container offsetTaxLinkKey  = [taxTrans, fakeTaxLink.GeneralJournalAccountEntry, taxTransRelationship];
            if (!offsetTaxLinkKeySet.in(offsetTaxLinkKey))
            {
                // logics refer to LedgerPostingGeneralJournalController.addTaxLink()
                TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntryLocal;
                taxTransGeneralJournalAccountEntryLocal.TaxTrans = taxTrans;
                taxTransGeneralJournalAccountEntryLocal.TaxTransRelationship = taxTransRelationship;
                taxTransGeneralJournalAccountEntryLocal.TransactionCurrencyAmount = transactionCurrencyAmount;
                taxTransGeneralJournalAccountEntryLocal.AccountingCurrencyAmount = accountingCurrencyAmount;
                taxTransGeneralJournalAccountEntryLocal.GeneralJournalAccountEntry = fakeTaxLink.GeneralJournalAccountEntry;
                taxTransGeneralJournalAccountEntryLocal.LedgerDimension = fakeTaxLink.LedgerDimension;
                taxTransGeneralJournalAccountEntryLocal.TransactionCurrency = fakeTaxLink.TransactionCurrency;
                taxTransGeneralJournalAccountEntryLocal.AllocationFactor = 1;
                offsetTaxLinkRecordList.add(taxTransGeneralJournalAccountEntryLocal);

                offsetTaxLinkKeySet.add(offsetTaxLinkKey);
            }
        }
        _offsetTaxLinkObject.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateFakeTaxTransRecId</Name>
				<Source><![CDATA[
    private RecId generateFakeTaxTransRecId()
    {
        return -(timeNow() + combinedObjectOffsetMap.elements());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>