<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RCashBalanceTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RCashBalanceTrans
{
    QueryRun        qrCashTrans;

    AmountMST       amountMST;
    AmountMST       amountCur;
    TransDate       startDate;
    TransDate       endDate;
    boolean         printCorr;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountCur</Name>
				<Source><![CDATA[
    public AmountCur amountCur(AmountCur _amountCur = amountCur)
    {
        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMst</Name>
				<Source><![CDATA[
    public AmountMST amountMst(AmountMST _amountMST = amountMST)
    {
        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected void buildQuery()
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        ;

        query = new Query();

        qbds = query.addDataSource(tablenum(RCashTrans));
        qbds.addRange(fieldnum(RCashTrans, AccountNum));

        qbds.addRange(fieldnum(RCashTrans, TransDate)).value(queryRange(startDate,endDate));
        qbds.addRange(fieldnum(RCashTrans, TransStatus)).value(enum2Symbol(enumNum(RCashTransStatus), RCashTransStatus::Approved));

        qrCashTrans = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc(RCashAccount   _accountNum,
                     RCashDocType   _docType      = RCashDocType::ExchRateDifference,
                     CurrencyCode   _currencyCode = "",
                     NoYes          _payment      = false
                     )
    {
        RCashTrans      cashTrans, rCashTransMain;
        str             queryExpression;
        Sign            sign;
        TransDate       payDate;
        Range           rPayTransTypeRange;

        this.clear();

        if (_accountNum)
        {
            qrCashTrans.query().dataSourceNo(1).findRange(fieldnum(RCashTrans, AccountNum)).value(_accountNum);
        }

        if (_currencyCode)
        {
            qrCashTrans.query().dataSourceNo(1).addRange(fieldnum(RCashTrans, CurrencyCode)).value(queryValue(_currencyCode));
        }

        [sign, queryExpression] = this.getRangeAndSignByRCashDocType(_docType);

        qrCashTrans.query().dataSourceNo(1).addRange(fieldnum(RCashTrans, DocType)).value(queryExpression);

        if (_payment)
        {
            payDate = endDate - RCashParameters::find().PayTransLag - 1;
            startDate   = startDate > payDate ? startDate : payDate;

            rPayTransTypeRange = queryValue(RCashPayLedgerTransType::CashWithdraw);

            qrCashTrans.query().dataSourceNo(1).addRange(fieldnum(RCashTrans, CashPayTransType)).value(rPayTransTypeRange);
            qrCashTrans.query().dataSourceNo(1).findRange(fieldnum(RCashTrans, TransDate)).value(queryRange(startDate,endDate));
        }

        while (qrCashTrans.next())
        {
            cashTrans  = qrCashTrans.getNo(1);

            rCashTransMain.clear();

            if (cashTrans.RefRecId && cashTrans.RefRecId != cashTrans.RecId)
            {
                rCashTransMain = RCashTrans::findRecId(cashTrans.RefRecId);
            }

            if (printCorr == NoYes::Yes && cashTrans.DocType == RCashDocType::Correction &&
                ((_docType == RCashDocType::DisbursementSlip                &&
                  ((! rCashTransMain && cashTrans.AmountCur > 0)            ||
                   (rCashTransMain && rCashTransMain.DocType == _docType))) ||

                (_docType == RCashDocType::ReimbursementSlip     &&
                 ((! rCashTransMain && cashTrans.AmountCur <= 0) ||
                  (rCashTransMain && rCashTransMain.DocType == _docType)))))
            {
                amountMST += cashTrans.AmountMST;
                amountCur += cashTrans.AmountCur;
            }
            else if (printCorr == NoYes::Yes &&
                     cashTrans.DocType == RCashDocType::Correction &&
                     (_docType == RCashDocType::DisbursementSlip   ||
                     _docType == RCashDocType::ReimbursementSlip))
            {
                continue;
            }
            else
            {
                amountMST += cashTrans.AmountMST;
                amountCur += cashTrans.AmountCur;
            }
        }

        amountMST   = sign * amountMST;
        amountCur   = sign * amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRangeAndSignByRCashDocType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the container composed of sign used to update amounts and query expression.
    /// </summary>
    /// <param name = "_rCashDocType">
    ///    <c>RCashDocType</c> used to generate query expression.
    /// </param>
    /// <returns>
    ///    <c>container</c> of <c>int</c> and <c>str</c> values.
    /// </returns>
    protected container getRangeAndSignByRCashDocType(RCashDocType _rCashDocType)
    {
        Sign sign = 1;
        str queryExpression;

        switch (_rCashDocType)
        {
            case RCashDocType::DisbursementSlip:
                if (printCorr)
                {
                    queryExpression = '((DocType == ' + int2str(RCashDocType::DisbursementSlip)   + ') || (' +
                                       '(DocType == ' + int2str(RCashDocType::ExchRateDifference) + ') && (AmountMst < 0))' + ') || (' +
                                       '(DocType == ' + int2str(RCashDocType::Correction)         + ')))';
                }
                else
                {
                    queryExpression = '((DocType == ' + int2str(RCashDocType::DisbursementSlip)   + ') || (' +
                                       '(DocType == ' + int2str(RCashDocType::ExchRateDifference) + ') && (AmountMst < 0)))';
                }
                sign = -1;
                break;

            case RCashDocType::ReimbursementSlip:
                if (printCorr)
                {
                    queryExpression = '((DocType == ' + int2str(RCashDocType::ReimbursementSlip)  + ') || (' +
                                       '(DocType == ' + int2str(RCashDocType::ExchRateDifference) + ') && (AmountMst >= 0))' + ') || (' +
                                       '(DocType == ' + int2str(RCashDocType::Correction)         + ')))';
                }
                else
                {
                    queryExpression = '((DocType == ' + int2str(RCashDocType::ReimbursementSlip)  + ') || (' +
                                       '(DocType == ' + int2str(RCashDocType::ExchRateDifference) + ') && (AmountMst >= 0)))';
                }
                break;

            default:
                queryExpression = printCorr ? SysQuery::valueUnlimited() : SysQuery::valueNot(RCashDocType::Correction);
            break;

        }

        return [sign, queryExpression];
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    protected void clear()
    {
        ;
        amountMST = 0;
        amountCur = 0;
        qrCashTrans.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(TransDate      _startDate,
                    TransDate      _endDate,
                    NoYes          _printCorr = true)
    {
        ;
        startDate   =  _startDate;
        endDate     =  _endDate;
        printCorr   =  _printCorr;

        this.buildQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountDisbCur</Name>
				<Source><![CDATA[
    public static AmountCur amountDisbCur(RCashAccount   _cashAccount  = "",
                                                 TransDate      _startDate    = datenull(),
                                                 TransDate      _endDate      = datenull(),
                                                 CurrencyCode   _currencyCode = "",
                                                 NoYes          _printCorr    = true)
    {
        RCashBalanceTrans   balance = new RCashBalanceTrans(_startDate, _endDate, _printCorr);
        ;

        balance.calc(_cashAccount, RCashDocType::DisbursementSlip, _currencyCode);
        return balance.amountCur();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountDisbMst</Name>
				<Source><![CDATA[
    public static AmountMST amountDisbMst(RCashAccount  _cashAccount  = "",
                                                 TransDate     _startDate    = datenull(),
                                                 TransDate     _endDate      = datenull(),
                                                 NoYes         _printCorr    = true,
                                                 CurrencyCode  _currencyCode = "")
    {
        RCashBalanceTrans   balance = new RCashBalanceTrans(_startDate, _endDate, _printCorr);
        ;

        balance.calc(_cashAccount, RCashDocType::DisbursementSlip, _currencyCode);
        return balance.amountMst();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountReimbCur</Name>
				<Source><![CDATA[
    public static AmountCur amountReimbCur(RCashAccount   _cashAccount  = "",
                                                  TransDate      _startDate    = datenull(),
                                                  TransDate      _endDate      = datenull(),
                                                  CurrencyCode   _currencyCode = "",
                                                  NoYes          _printCorr = true)
    {
        RCashBalanceTrans   balance = new RCashBalanceTrans(_startDate, _endDate, _printCorr);
        ;

        balance.calc(_cashAccount, RCashDocType::ReimbursementSlip,_currencyCode);
        return balance.amountCur();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountReimbMst</Name>
				<Source><![CDATA[
    public static AmountMST amountReimbMst(RCashAccount _cashAccount  = "",
                                                  TransDate    _startDate    = datenull(),
                                                  TransDate    _endDate      = datenull(),
                                                  NoYes        _printCorr    = true,
                                                  CurrencyCode _currencyCode = "")

    {
        RCashBalanceTrans   balance = new RCashBalanceTrans(_startDate, _endDate, _printCorr);
        ;

        balance.calc(_cashAccount, RCashDocType::ReimbursementSlip,_currencyCode);
        return balance.amountMst();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountRestCur</Name>
				<Source><![CDATA[
    public static AmountCur amountRestCur(RCashAccount _cashAccount  = "",
                                          TransDate    _startDate    = datenull(),
                                          TransDate    _endDate      = datenull(),
                                          CurrencyCode _currencyCode = "",
                                          NoYes        _printCorr = true)
    {
        RCashBalanceTrans   balance = new RCashBalanceTrans(_startDate, _endDate, _printCorr);
        ;

        balance.calc(_cashAccount, RCashDocType::ExchRateDifference,_currencyCode);
        return balance.amountCur();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountRestMst</Name>
				<Source><![CDATA[
    public static AmountMST amountRestMst(RCashAccount _cashAccount  = "",
                                          TransDate    _startDate    = datenull(),
                                          TransDate    _endDate      = datenull(),
                                          NoYes        _printCorr    = true,
                                          CurrencyCode _currencyCode = "")

    {
        RCashBalanceTrans   balance = new RCashBalanceTrans(_startDate, _endDate, _printCorr);
        ;

        balance.calc(_cashAccount, RCashDocType::ExchRateDifference,_currencyCode);
        return balance.amountMst();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountRestMstPay</Name>
				<Source><![CDATA[
    public static AmountMST amountRestMstPay(RCashAccount   _cashAccount,
                                                    TransDate      _startDate,
                                                    TransDate      _endDate,
                                                    NoYes          _printCorr = true)
    {
        RCashBalanceTrans   balance = new RCashBalanceTrans(_startDate, _endDate, _printCorr);

        balance.calc(_cashAccount, RCashDocType::ExchRateDifference, '', true);
        return balance.amountMst();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>