<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocParmDataCreatorFiscalDocEntity_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class builds a FiscalDocumentParmData_BR set of object models from a FiscalDocumentHeaderEntity.
/// </summary>
class FiscalDocParmDataCreatorFiscalDocEntity_BR
{
    FiscalDocumentHeaderEntity fiscalDocumentHeader;
    DMFDefinitionGroupName dmfDefinitionGroupName;
    DMFExecutionId dmfExecutionId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor method for the FiscalDocParmDataCreatorFiscalDocEntity_BR class.
    /// </summary>
    public void new(FiscalDocumentHeaderEntity _fiscalDocumentHeader)
    {
        fiscalDocumentHeader = _fiscalDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method responsible for creating the entire Fiscal Document ParmData object model.
    /// </summary>
    /// <returns>
    /// Instance of FiscalDocumentParmData_BR, which represents the Fiscal Document header and serves as the root reference for the entire ParmData object model.
    /// </returns>
    public FiscalDocumentParmData_BR createParmData()
    {
        FiscalDocumentParmData_BR               fiscalDocumentParmData;

        List                                    listOfFiscalDocumentLineParmData;
        FiscalDocumentCustVendTransParmData_BR  fiscalDocumentCustVendTransParmData;
        ListEnumerator                          listOfLinesEnumerator;
        FiscalDocumentLineParmData_BR           fiscalDocumentLineParmData;
        List                                    listOfFiscalDocLineTaxParmData;
        List                                    listOfFMiscChargesParmData;
        ListEnumerator                          listOfMiscChargesEnumerator;
        List                                    listOfMiscChargesTaxParmData;
        FiscalDocumentTaxPovertyFundCalc_BR     fiscalDocumentTaxPovertyFundCalc;

        fiscalDocumentParmData = this.initHeaderParmData();
        fiscalDocumentParmData.parmPurpose(fiscalDocumentHeader.Purpose);
        fiscalDocumentParmData.parmLines(this.initLinesParmData());

        if (this.hasCustVendTrans())
        {
            fiscalDocumentCustVendTransParmData = this.initCustVendTransParmData();
            fiscalDocumentCustVendTransParmData.parmListOfInstallments(this.initListOfInstallments());
            fiscalDocumentParmData.parmCustVendTrans(fiscalDocumentCustVendTransParmData);
        }

        listOfLinesEnumerator = fiscalDocumentParmData.parmLines().getEnumerator();
        while (listOfLinesEnumerator.moveNext())
        {
            fiscalDocumentLineParmData = listOfLinesEnumerator.current();

			listOfFiscalDocLineTaxParmData = this.initListOfTaxTransParmDataForLine(fiscalDocumentParmData, fiscalDocumentLineParmData);
            fiscalDocumentLineParmData.parmListOfTaxes(listOfFiscalDocLineTaxParmData);

            listOfFMiscChargesParmData = this.initMiscChargesParmData(fiscalDocumentParmData, fiscalDocumentLineParmData);
            fiscalDocumentLineParmData.parmListOfMiscCharges(listOfFMiscChargesParmData);
        }

        fiscalDocumentParmData.parmListOfShipmentStat(this.initListOfShipmentStatParmData(fiscalDocumentParmData));

        return fiscalDocumentParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustVendTrans</Name>
				<Source><![CDATA[
    private boolean hasCustVendTrans()
    {
        return (fiscalDocumentHeader.PaymentAmount || fiscalDocumentHeader.PaymentDocumentType || fiscalDocumentHeader.PaymentDueDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransParmData</Name>
				<Source><![CDATA[
    private FiscalDocumentCustVendTransParmData_BR initCustVendTransParmData()
    {
        FiscalDocumentCustVendTransParmData_BR fiscalDocumentCustVendTrans = new FiscalDocumentCustVendTransParmData_BR();

        fiscalDocumentCustVendTrans.parmAmount          (fiscalDocumentHeader.PaymentAmount);
        fiscalDocumentCustVendTrans.parmDocumentType    (fiscalDocumentHeader.PaymentDocumentType);
        fiscalDocumentCustVendTrans.parmDueDate         (fiscalDocumentHeader.PaymentDueDate);

        return fiscalDocumentCustVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderParmData</Name>
				<Source><![CDATA[
    private FiscalDocumentParmData_BR initHeaderParmData()
    {
        FiscalDocumentParmData_BR fiscalDocumentParmData = new FiscalDocumentParmData_BR();

        fiscalDocumentParmData.parmFiscalDocumentRecId(fiscalDocumentHeader.RecId);
        fiscalDocumentParmData.parmAccountingDate(fiscalDocumentHeader.PostedDate);
        fiscalDocumentParmData.parmCancelAccountingDate(fiscalDocumentHeader.CancelAccountingDate);
        fiscalDocumentParmData.parmDirection(fiscalDocumentHeader.Direction);
        fiscalDocumentParmData.parmFiscalDocumentAccessKey(fiscalDocumentHeader.AccessKey);
        fiscalDocumentParmData.parmFiscalDocumentAccountNum(fiscalDocumentHeader.ThirdPartyAccount);
        fiscalDocumentParmData.parmFiscalDocumentAccountType(fiscalDocumentHeader.ThirdPartyAccountType);
        fiscalDocumentParmData.parmFiscalDocumentDate(fiscalDocumentHeader.DocumentDate);
        fiscalDocumentParmData.parmFiscalDocumentIssuer(fiscalDocumentHeader.Issuer);
        fiscalDocumentParmData.parmFiscalDocumentNumber(fiscalDocumentHeader.FiscalDocumentNumber);
        fiscalDocumentParmData.parmFiscalDocumentSeries(fiscalDocumentHeader.Series);
        fiscalDocumentParmData.parmTotalAmount(fiscalDocumentHeader.TotalAmount);
        fiscalDocumentParmData.parmTotalMarkupFreightAmount(fiscalDocumentHeader.TotalFreight);
        fiscalDocumentParmData.parmTotalMarkupInsuranceAmount(fiscalDocumentHeader.TotalInsurance);
        fiscalDocumentParmData.parmTotalMarkupOtherAmount(fiscalDocumentHeader.TotalOtherCharges);
        fiscalDocumentParmData.parmTypeOfCTe(fiscalDocumentHeader.CTeType);
        fiscalDocumentParmData.parmFreightChargeTerms(fiscalDocumentHeader.FreightChargeTerms);
        fiscalDocumentParmData.parmModel(FiscalDocModel_BR::findBestMatch(fiscalDocumentHeader.Model).Model);
        fiscalDocumentParmData.parmStatus(fiscalDocumentHeader.Status);
        fiscalDocumentParmData.parmImportDeclaration(fiscalDocumentHeader.ImportDeclaration);

        fiscalDocumentParmData.parmFiscalEstablishmentCCMNum(fiscalDocumentHeader.FiscalEstablishmentCCM);
        fiscalDocumentParmData.parmFiscalEstablishmentCNPJCPF(fiscalDocumentHeader.FiscalEstablishmentCNPJorCPF);
        fiscalDocumentParmData.parmFiscalEstablishmentID(fiscalDocumentHeader.FiscalEstablishmentId);
        fiscalDocumentParmData.parmFiscalEstablishmentIE(fiscalDocumentHeader.FiscalEstablishmentIE);
        fiscalDocumentParmData.parmFiscalEstablishmentName(fiscalDocumentHeader.FiscalEstablishmentName);
        fiscalDocumentParmData.parmFiscalEstablishmentPhone(fiscalDocumentHeader.FiscalEstablishmentTelephone);
        fiscalDocumentParmData.parmFiscalEstablishmentPostalAddress(fiscalDocumentHeader.FiscalEstablishmentAddress);

        fiscalDocumentParmData.parmThirdPartyCNPJCPF(fiscalDocumentHeader.ThirdPartyCNPJorCPF);
        fiscalDocumentParmData.parmThirdPartyIE(fiscalDocumentHeader.ThirdPartyIE);
        fiscalDocumentParmData.parmThirdPartyName(fiscalDocumentHeader.ThirdPartyName);
        fiscalDocumentParmData.parmThirdPartyPostalAddress(fiscalDocumentHeader.ThirdPartyAddress);

        fiscalDocumentParmData.parmSalesCarrier(fiscalDocumentHeader.Carrier);
        fiscalDocumentParmData.parmSalesCarrierPostalAddress(fiscalDocumentHeader.CarrierAddress);

        fiscalDocumentParmData.parmVehicleLicensePlateNumber(fiscalDocumentHeader.VehicleNumber);
        fiscalDocumentParmData.parmVehicleLicensePlateState(fiscalDocumentHeader.VehicleStateRegistered);

        fiscalDocumentParmData.parmDeliveryCNPJCPF(fiscalDocumentHeader.DeliveryCNPJorCPF);
        fiscalDocumentParmData.parmDeliveryIE(fiscalDocumentHeader.DeliveryIE);
        fiscalDocumentParmData.parmDeliveryLogisticsPostalAddress(fiscalDocumentHeader.DeliveryAddress);
        fiscalDocumentParmData.parmDeliveryMode(fiscalDocumentHeader.ModeOfDelivery);
        fiscalDocumentParmData.parmDeliveryTerm(fiscalDocumentHeader.DeliveryTerms);

        fiscalDocumentParmData.parmListOfTextsParmData(this.initListOfHeaderTexts());

		return fiscalDocumentParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesParmData</Name>
				<Source><![CDATA[
    private List initLinesParmData()
    {
        FiscalDocumentLineStaging       fiscalDocumentLine;
        FiscalDocumentLineParmData_BR   lineParmData;
        List                            listOflineParmData = new List(Types::Class);

        while select fiscalDocumentLine
            where fiscalDocumentLine.TransferStatus != DMFTransferStatus::Completed
               && fiscalDocumentLine.FiscalDocumentDirection == fiscalDocumentHeader.Direction
               && fiscalDocumentLine.FiscalDocumentFiscalEstablishmentId == fiscalDocumentHeader.FiscalEstablishmentId
               && fiscalDocumentLine.FiscalDocumentNumber == fiscalDocumentHeader.FiscalDocumentNumber
               && fiscalDocumentLine.FiscalDocumentSeries == fiscalDocumentHeader.Series
               && fiscalDocumentLine.FiscalDocumentStatus == fiscalDocumentHeader.Status
               && fiscalDocumentLine.FiscalDocumentThirdPartyCNPJorCPF == fiscalDocumentHeader.ThirdPartyCNPJorCPF
               && fiscalDocumentLine.FiscalDocumentVoucher == fiscalDocumentHeader.Voucher
        {
            lineParmData = new FiscalDocumentLineParmData_BR();

            lineParmData.parmCFOP(fiscalDocumentLine.CFOP);
            lineParmData.parmDescription(fiscalDocumentLine.Description);
            lineParmData.parmExceptionCode(fiscalDocumentLine.ExceptionCode);
            lineParmData.parmFiscalClassification(fiscalDocumentLine.FiscalClassificationCode);
            lineParmData.parmFreightNature(fiscalDocumentLine.FreightNature);
            lineParmData.parmGrossWeight(fiscalDocumentLine.GrossWeight);
            lineParmData.parmItemId(fiscalDocumentLine.ItemNumber);
            lineParmData.parmItemType(fiscalDocumentLine.ItemType);
            lineParmData.parmLineAmount(fiscalDocumentLine.Amount);
            lineParmData.parmLineDiscount(fiscalDocumentLine.LineDiscount);
            lineParmData.parmLineNum(fiscalDocumentLine.LineNumber);
            lineParmData.parmNetWeight(fiscalDocumentLine.NetWeight);
            lineParmData.parmOrigin(fiscalDocumentLine.TaxationOrigin);
            lineParmData.parmQuantity(fiscalDocumentLine.Quantity);
            lineParmData.parmServiceCode(fiscalDocumentLine.ServiceCode);
            lineParmData.parmUnit(fiscalDocumentLine.Unit);
            lineParmData.parmUnitPrice(fiscalDocumentLine.UnitPrice);
            lineParmData.parmDIAddition(fiscalDocumentLine.Addition);
            lineParmData.parmAccountingAmount(fiscalDocumentLine.AccountingAmount);
            lineParmData.parmApproximateTaxAmount(fiscalDocumentLine.ApproximateTaxAmount);
            lineParmData.parmAssetId(fiscalDocumentLine.FixedAssetNumber);
            lineParmData.parmFciNumber(fiscalDocumentLine.FCINumber);
            lineParmData.parmSuframaDiscountCOFINS(fiscalDocumentLine.SUFRAMACOFINSDiscount);
            lineParmData.parmSuframaDiscountICMS(fiscalDocumentLine.SUFRAMAICMSDiscount);
            lineParmData.parmSuframaDiscountPIS(fiscalDocumentLine.SUFRAMAPISDiscount);

            lineParmData.parmListOfTextsParmData(this.initListOfLineTexts(lineParmData));

            listOflineParmData.addEnd(lineParmData);
        }

        return listOflineParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfInstallments</Name>
				<Source><![CDATA[
    private List initListOfInstallments()
    {
        FiscalDocumentInstallmentStaging            fiscalDocumentInstallment;
        FiscalDocumentInstallmentParmData_BR        installmentParmData;
        List                                        listOfInstallments = new List(Types::Class);

        while select fiscalDocumentInstallment
            where fiscalDocumentInstallment.TransferStatus != DMFTransferStatus::Completed
               && fiscalDocumentInstallment.FiscalDocumentDirection == fiscalDocumentHeader.Direction
               && fiscalDocumentInstallment.FiscalDocumentFiscalEstablishmentId == fiscalDocumentHeader.FiscalEstablishmentId
               && fiscalDocumentInstallment.FiscalDocumentNumber == fiscalDocumentHeader.FiscalDocumentNumber
               && fiscalDocumentInstallment.FiscalDocumentSeries == fiscalDocumentHeader.Series
               && fiscalDocumentInstallment.FiscalDocumentStatus == fiscalDocumentHeader.Status
               && fiscalDocumentInstallment.FiscalDocumentThirdPartyCNPJorCPF == fiscalDocumentHeader.ThirdPartyCNPJorCPF
               && fiscalDocumentInstallment.FiscalDocumentVoucher == fiscalDocumentHeader.Voucher
        {
            installmentParmData = new FiscalDocumentInstallmentParmData_BR();

            installmentParmData.parmAmount(fiscalDocumentInstallment.Amount);
            installmentParmData.parmDueDate(fiscalDocumentInstallment.DueDate);
            installmentParmData.parmInstallmentNumber(fiscalDocumentInstallment.InstallmentNumber);

            listOfInstallments.addEnd(installmentParmData);
        }

        return listOfInstallments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfShipmentStatParmData</Name>
				<Source><![CDATA[
    private List initListOfShipmentStatParmData(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        FiscalDocumentShipmentStatStaging       fiscalDocumentShipmentStat;
        FiscalDocumentShipmentStatParmData_BR   shipmentStatParmData;
        List                                    listOfShipmentStat = new List(Types::Class);

        while select fiscalDocumentShipmentStat
            where fiscalDocumentShipmentStat.TransferStatus != DMFTransferStatus::Completed
               && fiscalDocumentShipmentStat.FiscalDocumentDirection == _fiscalDocumentParmData.parmDirection()
               && fiscalDocumentShipmentStat.FiscalDocumentFiscalEstablishmentId == _fiscalDocumentParmData.parmFiscalEstablishmentID()
               && fiscalDocumentShipmentStat.FiscalDocumentNumber == _fiscalDocumentParmData.parmFiscalDocumentNumber()
               && fiscalDocumentShipmentStat.FiscalDocumentSeries == _fiscalDocumentParmData.parmFiscalDocumentSeries()
               && fiscalDocumentShipmentStat.FiscalDocumentStatus == _fiscalDocumentParmData.parmStatus()
               && fiscalDocumentShipmentStat.FiscalDocumentThirdPartyCNPJorCPF == _fiscalDocumentParmData.parmThirdPartyCNPJCPF()
               && fiscalDocumentShipmentStat.FiscalDocumentVoucher == _fiscalDocumentParmData.parmVoucher()
        {
            shipmentStatParmData = new FiscalDocumentShipmentStatParmData_BR();

            shipmentStatParmData.parmGrossWeight(fiscalDocumentShipmentStat.GrossWeight);
            shipmentStatParmData.parmNetWeight(fiscalDocumentShipmentStat.NetWeight);
            shipmentStatParmData.parmVolumeQuantity(fiscalDocumentShipmentStat.VolumeQuantity);
            shipmentStatParmData.parmVolumeType(fiscalDocumentShipmentStat.VolumeType);

            listOfShipmentStat.addEnd(shipmentStatParmData);
        }

        return listOfShipmentStat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMiscChargesParmData</Name>
				<Source><![CDATA[
    private List initMiscChargesParmData(FiscalDocumentParmData_BR _fiscalDocumentParmData, FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        FiscalDocumentMiscChargeStaging         fiscalDocumentMiscCharge;
        FiscalDocumentMiscChargeParmData_BR     miscChargeParmData;
        List                                    listOfMiscCharges = new List(Types::Class);

        while select fiscalDocumentMiscCharge
            where fiscalDocumentMiscCharge.TransferStatus != DMFTransferStatus::Completed
               && fiscalDocumentMiscCharge.FiscalDocumentDirection == _fiscalDocumentParmData.parmDirection()
               && fiscalDocumentMiscCharge.FiscalDocumentFiscalEstablishmentId == _fiscalDocumentParmData.parmFiscalEstablishmentID()
               && fiscalDocumentMiscCharge.FiscalDocumentNumber == _fiscalDocumentParmData.parmFiscalDocumentNumber()
               && fiscalDocumentMiscCharge.FiscalDocumentSeries == _fiscalDocumentParmData.parmFiscalDocumentSeries()
               && fiscalDocumentMiscCharge.FiscalDocumentStatus == _fiscalDocumentParmData.parmStatus()
               && fiscalDocumentMiscCharge.FiscalDocumentThirdPartyCNPJorCPF == _fiscalDocumentParmData.parmThirdPartyCNPJCPF()
               && fiscalDocumentMiscCharge.FiscalDocumentVoucher == _fiscalDocumentParmData.parmVoucher()
               && fiscalDocumentMiscCharge.FiscalDocumentLineNumber == _fiscalDocumentLineParmData.parmLineNum()
        {
            miscChargeParmData = new FiscalDocumentMiscChargeParmData_BR();

            miscChargeParmData.parmType(fiscalDocumentMiscCharge.Type);
            miscChargeParmData.parmAmount(fiscalDocumentMiscCharge.Amount);

            listOfMiscCharges.addEnd(miscChargeParmData);
        }

        return listOfMiscCharges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfTaxTransParmDataForLine</Name>
				<Source><![CDATA[
    private List initListOfTaxTransParmDataForLine(FiscalDocumentParmData_BR _fiscalDocumentParmData, FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        FiscalDocumentTaxTransStaging       fiscalDocumentTaxTrans;
        FiscalDocumentTaxTransParmData_BR   taxTransParmData;
        List                                listOfTaxParmData = new List(Types::Class);

        while select fiscalDocumentTaxTrans
            where fiscalDocumentTaxTrans.TransferStatus != DMFTransferStatus::Completed
               && fiscalDocumentTaxTrans.FiscalDocumentDirection == _fiscalDocumentParmData.parmDirection()
               && fiscalDocumentTaxTrans.FiscalDocumentFiscalEstablishmentId == _fiscalDocumentParmData.parmFiscalEstablishmentID()
               && fiscalDocumentTaxTrans.FiscalDocumentNumber == _fiscalDocumentParmData.parmFiscalDocumentNumber()
               && fiscalDocumentTaxTrans.FiscalDocumentSeries == _fiscalDocumentParmData.parmFiscalDocumentSeries()
               && fiscalDocumentTaxTrans.FiscalDocumentStatus == _fiscalDocumentParmData.parmStatus()
               && fiscalDocumentTaxTrans.FiscalDocumentThirdPartyCNPJorCPF == _fiscalDocumentParmData.parmThirdPartyCNPJCPF()
               && fiscalDocumentTaxTrans.FiscalDocumentVoucher == _fiscalDocumentParmData.parmVoucher()
               && fiscalDocumentTaxTrans.FiscalDocumentLineNumber == _fiscalDocumentLineParmData.parmLineNum()
        {
            taxTransParmData = new FiscalDocumentTaxTransParmData_BR();

            taxTransParmData.parmFiscalValue(fiscalDocumentTaxTrans.FiscalValue);
            taxTransParmData.parmIncludedTax(fiscalDocumentTaxTrans.IncludedTax);
            taxTransParmData.parmRetainedTax(fiscalDocumentTaxTrans.RetainedTax);
            taxTransParmData.parmTaxAmount(fiscalDocumentTaxTrans.TaxAmount);
            taxTransParmData.parmTaxAmountOther(fiscalDocumentTaxTrans.TaxAmountOther);
            taxTransParmData.parmTaxationCode(fiscalDocumentTaxTrans.TaxationCode);
            taxTransParmData.parmTaxationOrigin(fiscalDocumentTaxTrans.TaxationOrigin);
            taxTransParmData.parmTaxBaseAmount(fiscalDocumentTaxTrans.TaxBaseAmount);
            taxTransParmData.parmTaxBaseAmountExempt(fiscalDocumentTaxTrans.TaxBaseAmountExempt);
            taxTransParmData.parmTaxBaseAmountOther(fiscalDocumentTaxTrans.TaxBaseAmountOther);
            taxTransParmData.parmTaxExemptCode(fiscalDocumentTaxTrans.TaxExemptCode);
            taxTransParmData.parmTaxNonRecoverablePct(fiscalDocumentTaxTrans.TaxNonRecoverablePct);
            taxTransParmData.parmTaxReductionPct(fiscalDocumentTaxTrans.TaxReductionPct);
            taxTransParmData.parmTaxSubstitutionMarkupPct(fiscalDocumentTaxTrans.TaxSubstitutionMarkupPct);
            taxTransParmData.parmTaxValue(fiscalDocumentTaxTrans.TaxValue);
            taxTransParmData.parmType(fiscalDocumentTaxTrans.Type);
            taxTransParmData.parmTaxPovertyFundAmount(fiscalDocumentTaxTrans.TaxPovertyFundAmount);
            taxTransParmData.parmTaxPovertyFundPercentage(fiscalDocumentTaxTrans.TaxPovertyFundPercentage);

            listOfTaxParmData.addEnd(taxTransParmData);
        }

        return listOfTaxParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentPurpose</Name>
				<Source><![CDATA[
    private FiscalDocumentPurpose_BR getFiscalDocumentPurpose()
    {
        return fiscalDocumentHeader.Purpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfLineTexts</Name>
				<Source><![CDATA[
    private FiscalDocumentTextListParmData_BR initListOfLineTexts(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        FiscalDocumentLineTextStaging                   fiscalDocumentLineText;
        FiscalDocumentLineTextReferencedProcessStaging  fiscalDocumentLineTextReferencedProcess;
        FiscalDocumentTextParmData_BR                   textParmData;
        FiscalDocumentRefProcessParmData_BR             referencedProcessParmData;
        FiscalDocumentTextListParmData_BR               listOfLineTexts = FiscalDocumentTextListParmData_BR::construct();

        while select fiscalDocumentLineText
             where fiscalDocumentLineText.FiscalDocumentDirection == fiscalDocumentHeader.Direction
                && fiscalDocumentLineText.FiscalDocumentFiscalEstablishmentId == fiscalDocumentHeader.FiscalEstablishmentId
                && fiscalDocumentLineText.FiscalDocumentLineNumber == _fiscalDocumentLineParmData.parmLineNum()
                && fiscalDocumentLineText.FiscalDocumentNumber == fiscalDocumentHeader.FiscalDocumentNumber
                && fiscalDocumentLineText.FiscalDocumentSeries == fiscalDocumentHeader.Series
                && fiscalDocumentLineText.FiscalDocumentStatus == fiscalDocumentHeader.Status
                && fiscalDocumentLineText.FiscalDocumentThirdPartyCNPJorCPF == fiscalDocumentHeader.ThirdPartyCNPJorCPF
                && fiscalDocumentLineText.FiscalDocumentVoucher == fiscalDocumentHeader.Voucher
                && fiscalDocumentLineText.TransferStatus != DMFTransferStatus::Completed
        {
            textParmData = FiscalDocumentTextParmData_BR::construct();
            textParmData.parmTextID(fiscalDocumentLineText.TextId);
            textParmData.parmName(fiscalDocumentLineText.Name);
            textParmData.parmFiscalInformation(fiscalDocumentLineText.FiscalInformation);
            textParmData.parmRestriction(fiscalDocumentLineText.Restriction);
            textParmData.parmNotes(fiscalDocumentLineText.Notes);
            textParmData.parmType(FiscalDocumentTextType_BR::UserDef);

            while select fiscalDocumentLineTextReferencedProcess
                 where fiscalDocumentLineTextReferencedProcess.FiscalDocumentDirection == fiscalDocumentHeader.Direction
                    && fiscalDocumentLineTextReferencedProcess.FiscalDocumentFiscalEstablishmentId == fiscalDocumentHeader.FiscalEstablishmentId
                    && fiscalDocumentLineTextReferencedProcess.FiscalDocumentLineNumber == _fiscalDocumentLineParmData.parmLineNum()
                    && fiscalDocumentLineTextReferencedProcess.FiscalDocumentNumber == fiscalDocumentHeader.FiscalDocumentNumber
                    && fiscalDocumentLineTextReferencedProcess.FiscalDocumentSeries == fiscalDocumentHeader.Series
                    && fiscalDocumentLineTextReferencedProcess.FiscalDocumentStatus == fiscalDocumentHeader.Status
                    && fiscalDocumentLineTextReferencedProcess.FiscalDocumentThirdPartyCNPJorCPF == fiscalDocumentHeader.ThirdPartyCNPJorCPF
                    && fiscalDocumentLineTextReferencedProcess.FiscalDocumentVoucher == fiscalDocumentHeader.Voucher
                    && fiscalDocumentLineTextReferencedProcess.FiscalDocumentLineTextId == textParmData.parmTextID()
                    && fiscalDocumentLineTextReferencedProcess.TransferStatus != DMFTransferStatus::Completed
            {
                referencedProcessParmData = new FiscalDocumentRefProcessParmData_BR();
                referencedProcessParmData.parmAgency(fiscalDocumentLineTextReferencedProcess.Agency);
                referencedProcessParmData.parmProcessNumber(fiscalDocumentLineTextReferencedProcess.ProcessNumber);

                textParmData.addFiscalRefProcess(referencedProcessParmData);
            }

            listOfLineTexts.add(textParmData);
        }

        listOfLineTexts.removeDuplicates();

        return listOfLineTexts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfHeaderTexts</Name>
				<Source><![CDATA[
    private FiscalDocumentTextListParmData_BR initListOfHeaderTexts()
    {
        FiscalDocumentHeaderTextStaging                     fiscalDocumentHeaderText;
        FiscalDocumentHeaderTextReferencedProcessStaging    fiscalDocumentHeaderTextReferencedProcess;
        FiscalDocumentTextParmData_BR                       textParmData;
        FiscalDocumentRefProcessParmData_BR                 referencedProcessParmData;
        FiscalDocumentTextListParmData_BR                   listOfHeaderTexts = FiscalDocumentTextListParmData_BR::construct();

        while select fiscalDocumentHeaderText
            where fiscalDocumentHeaderText.FiscalDocumentDirection == fiscalDocumentHeader.Direction
               && fiscalDocumentHeaderText.FiscalDocumentFiscalEstablishmentId == fiscalDocumentHeader.FiscalEstablishmentId
               && fiscalDocumentHeaderText.FiscalDocumentNumber == fiscalDocumentHeader.FiscalDocumentNumber
               && fiscalDocumentHeaderText.FiscalDocumentSeries == fiscalDocumentHeader.Series
               && fiscalDocumentHeaderText.FiscalDocumentStatus == fiscalDocumentHeader.Status
               && fiscalDocumentHeaderText.FiscalDocumentThirdPartyCNPJorCPF == fiscalDocumentHeader.ThirdPartyCNPJorCPF
               && fiscalDocumentHeaderText.FiscalDocumentVoucher == fiscalDocumentHeader.Voucher
               && fiscalDocumentHeaderText.TransferStatus != DMFTransferStatus::Completed
        {
            textParmData = FiscalDocumentTextParmData_BR::construct();
            textParmData.parmTextID(fiscalDocumentHeaderText.TextId);
            textParmData.parmName(fiscalDocumentHeaderText.Name);
            textParmData.parmFiscalInformation(fiscalDocumentHeaderText.FiscalInformation);
            textParmData.parmRestriction(fiscalDocumentHeaderText.Restriction);
            textParmData.parmNotes(fiscalDocumentHeaderText.Notes);
            textParmData.parmType(FiscalDocumentTextType_BR::UserDef);

            while select fiscalDocumentHeaderTextReferencedProcess
                where fiscalDocumentHeaderTextReferencedProcess.FiscalDocumentDirection == fiscalDocumentHeader.Direction
                   && fiscalDocumentHeaderTextReferencedProcess.FiscalDocumentFiscalEstablishmentId == fiscalDocumentHeader.FiscalEstablishmentId
                   && fiscalDocumentHeaderTextReferencedProcess.FiscalDocumentNumber == fiscalDocumentHeader.FiscalDocumentNumber
                   && fiscalDocumentHeaderTextReferencedProcess.FiscalDocumentSeries == fiscalDocumentHeader.Series
                   && fiscalDocumentHeaderTextReferencedProcess.FiscalDocumentStatus == fiscalDocumentHeader.Status
                   && fiscalDocumentHeaderTextReferencedProcess.FiscalDocumentThirdPartyCNPJorCPF == fiscalDocumentHeader.ThirdPartyCNPJorCPF
                   && fiscalDocumentHeaderTextReferencedProcess.FiscalDocumentVoucher == fiscalDocumentHeader.Voucher
                   && fiscalDocumentHeaderTextReferencedProcess.FiscalDocumentHeaderTextId == textParmData.parmTextID()
                   && fiscalDocumentHeaderTextReferencedProcess.TransferStatus != DMFTransferStatus::Completed
            {
                referencedProcessParmData = new FiscalDocumentRefProcessParmData_BR();
                referencedProcessParmData.parmAgency(fiscalDocumentHeaderTextReferencedProcess.Agency);
                referencedProcessParmData.parmProcessNumber(fiscalDocumentHeaderTextReferencedProcess.ProcessNumber);

                textParmData.addFiscalRefProcess(referencedProcessParmData);
            }

            listOfHeaderTexts.add(textParmData);
        }

        listOfHeaderTexts.removeDuplicates();

        return listOfHeaderTexts;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>