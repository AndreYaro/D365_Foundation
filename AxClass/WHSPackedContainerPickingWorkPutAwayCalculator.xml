<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPackedContainerPickingWorkPutAwayCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSPackedContainerPickingWorkPutAwayCalculator</c> class calculates items sets corresponding to
/// the put line's work inventory transaction, split by the child license plate.
/// </summary>
internal final class WHSPackedContainerPickingWorkPutAwayCalculator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructPutAwayItemSetsSplitByChildLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// For packed container picking put away work we need to calculate the contents of the child license plates, which actually contain the inventory.
    /// </summary>
    /// <param name = "_workInventTrans">Put line's work inventory transaction to calculate put-away for.</param>
    /// <returns>A map where each key is a child license plate id and value is a constructed item set (represented as instances of the <c>WHSInventoryItemSetDescriptor</c> class).</returns>
    [Hookable(false)]
    internal Map constructPutAwayItemSetsSplitByChildLicensePlate(WHSWorkInventTrans _workInventTrans)
    {
        Map licensePlateContentMap = new Map(Types::String, Types::Class);

        InventDim inventDimFrom = InventDim::find(_workInventTrans.InventDimIdFrom);
        InventDimParm inventDimParmAboveLocationLevel = WhsReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(InventTable::find(_workInventTrans.ItemId));

        LineNum fromPickLineNum, toPickLineNum;
        [fromPickLineNum, toPickLineNum] = WhsWorkExecute::construct().getPrevLineRange(_workInventTrans.WorkId, _workInventTrans.LineNum, WHSWorkType::Pick);

        for (int lineNum = fromPickLineNum; lineNum <= toPickLineNum; lineNum++)
        {
            WHSWorkInventoryTransactionDescriptor transactionDescriptor = WHSWorkInventoryTransactionQuery::newFromWorkId(_workInventTrans.WorkId).registeredReceiptByWorkLine(
                lineNum,
                WHSWorkInventoryTransactionQueryParameters::construct());

            var transactionDescriptorEnumerator = transactionDescriptor.getEnumerator();
            while (transactionDescriptorEnumerator.moveNext())
            {
                WHSWorkInventoryTransactionDescriptorElement descriptorElement = transactionDescriptorEnumerator.current();
                InventDim descriptorElementInventDim = descriptorElement.parmInventoryDimensionsDescriptor().convertToInventDim();

                // We check equality by the:
                // - InventTransIdParent
                //      - To make sure we take into account only the inventory promissed for the the spacific source document.
                // - Inventory dimensions 
                //      - Source document can dictate specific dimensions (eg in case of batch above), there could be several such reservations per source document.
                //      - But the warehouse inventory transaction (the <c>_workInventTrans</c>) is specific to a single reservation (eg, single batch in case of batch-above).
                if (   descriptorElement.parmInventTransIdParent() == _workInventTrans.InventTransIdParent
                    && InventDim::isInventDimParmEqualIgnoreBlanks(inventDimFrom, descriptorElementInventDim, inventDimParmAboveLocationLevel))
                {
                    WHSLicensePlateId childLicensePlateId = descriptorElement
                        .parmInventoryDimensionsDescriptor()
                        .parmStorageDimensions()
                        .parmLicensePlateId();

                    WHSInventoryItemSetDescriptor itemSetDescriptor = this.findOrCreateItemSetDescriptor(
                        licensePlateContentMap,
                        childLicensePlateId);

                    itemSetDescriptor.addInventoryToItemSet(descriptorElement);
                }
            }
        }

        return licensePlateContentMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateItemSetDescriptor</Name>
				<Source><![CDATA[
    private WHSInventoryItemSetDescriptor findOrCreateItemSetDescriptor(Map _licensePlateContentMap, WHSLicensePlateId _licesePlateId)
    {
        WHSInventoryItemSetDescriptor itemSetDescriptor;

        if (_licensePlateContentMap.exists(_licesePlateId))
        {
            itemSetDescriptor = _licensePlateContentMap.lookup(_licesePlateId);
        }
        else
        {
            itemSetDescriptor = WHSInventoryItemSetDescriptor::newFromItemSetId(WHSSequentialGuidGenerator::generateSequentialGuid());
            _licensePlateContentMap.add(_licesePlateId, itemSetDescriptor);
        }

        return itemSetDescriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSPackedContainerPickingWorkPutAwayCalculator construct()
    {
        return new WHSPackedContainerPickingWorkPutAwayCalculator();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>