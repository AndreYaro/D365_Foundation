<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportPostingTaxTransHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Processes and updates the tax payment doc and ledger transaction.
/// </summary>
public class TaxReportPostingTaxTransHandler_IN extends TaxReportPostingHandler_IN
{
    TaxModuleType                   taxModuleType;
    TaxTransObject_IN               taxTransObject;
    TaxVersion                      taxRepCounter;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initTaxTransIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the india taxTrans record from the taxTrans record
    /// </summary>
    /// <param name="_tableNode">
    /// The taxReportHierarchyNode_IN record
    /// </param>
    /// <param name="_taxTrans">
    /// The taxTrans record
    /// </param>
    /// <returns>
    /// The initialized taxTrans_IN record
    /// </returns>
    protected TaxTrans_IN initTaxTransIN(TaxReportHierarchyNode_IN _tableNode,
                                          TaxTrans                 _taxTrans)
    {
        TaxTrans_IN     taxTrans_IN;

        TaxTrans_W      taxTrans_W = _taxTrans.taxTrans_W();

        taxTrans_IN.RefRecId                    = _taxTrans.RecId;
        taxTrans_IN.Voucher                     = _taxTrans.Voucher;
        taxTrans_IN.TransDate                   = _taxTrans.TransDate;
        taxTrans_IN.Source                      = _taxTrans.Source;
        taxTrans_IN.TaxCode                     = _taxTrans.TaxCode;
        taxTrans_IN.TaxAccountType              = _taxTrans.TaxAccountType;
        taxTrans_IN.TaxDirection                = _taxTrans.TaxDirection;
        taxTrans_IN.TaxPeriod                   = _taxTrans.TaxPeriod;
        taxTrans_IN.TaxComponentTable           = taxTrans_W.TaxComponentTable_IN;
        taxTrans_IN.TaxType                     = taxTrans_W.TaxType_IN;
        taxTrans_IN.CompanyRegistrationNumber   = taxTrans_W.TaxRegistrationNumberTable_IN;
        taxTrans_IN.SourceTaxAmountCur          = _taxTrans.SourceTaxAmountCur;
        taxTrans_IN.ExemptCode                  = _taxTrans.ExemptCode;
        taxTrans_IN.TaxAmount                   = _taxTrans.TaxAmount;
        taxTrans_IN.PostedTaxAmout              = _taxTrans.SourceTaxAmountCur;
        if (taxTrans_IN.PostedTaxAmout > 0)
        {
            taxTrans_IN.RecoverableAmount       = taxTrans_IN.PostedTaxAmout;
        }
        else
        {
            taxTrans_IN.PayableAmount           = taxTrans_IN.PostedTaxAmout;
        }
        taxTrans_IN.VoucherCurrency             = _taxTrans.SourceCurrencyCode;
        taxTrans_IN.SourceCurrencyCode          = _taxTrans.SourceCurrencyCode;
        taxTrans_IN.TaxValue                    = _taxTrans.TaxValue;
        taxTrans_IN.SourceBaseAmountCur         = _taxTrans.SourceBaseAmountCur;

        switch (taxTrans_IN.TaxAccountType)
        {
            case TaxAccountingPostingAccountType::TaxPayable:
                taxTrans_IN.PayableLedgerDimension = this.parmTaxPostingLedgerDimension();
                break;

            case TaxAccountingPostingAccountType::TaxRecoverable:
                taxTrans_IN.RecoverableLedgerDimension = this.parmTaxPostingLedgerDimension();
                break;

            case TaxAccountingPostingAccountType::None:
                if (this.parmBalance() < 0)
                {
                    taxTrans_IN.PayableLedgerDimension = this.parmTaxPostingLedgerDimension();
                }
                else
                {
                    taxTrans_IN.RecoverableLedgerDimension = this.parmTaxPostingLedgerDimension();
                }
                break;
        }

        switch (taxTrans_IN.TaxType)
        {
            case TaxType_IN::ServiceTax:
            if (_tableNode.RefTableId == tableNum(ServiceCodeTable_IN))
                {
                    taxTrans_IN.ServiceCodeTable = _tableNode.RefTableRecId;
                }
                taxTrans_IN.Vendor = this.parmTaxPaymentDoc().parmTaxSalesTaxPaymentProfile().taxAuthority().AccountNum;
                taxTrans_IN.CustVendRegistrationNumber = TaxInformation_IN::findDefaultbyLocation(
                DirParty::primaryPostalAddressLocationRecId(VendTable::find(taxTrans_IN.Vendor).Party)).STCRegistrationNumberTable;
                if (this.parmBalance() < 0)
                {
                    taxTrans_IN.ServicePayableLedgerDimension = this.parmTaxPostingLedgerDimension();
                }
                else
                {
                    taxTrans_IN.ServiceRecoverableLedgerDimension = this.parmTaxPostingLedgerDimension();
                }
                break;

            case TaxType_IN::Excise:
                taxTrans_IN.ExciseRecordType = _tableNode.RefEnumValue;
                switch(taxTrans_IN.ExciseRecordType)
                {
                    case ExciseRecordType_IN::RG23A:
                        taxTrans_IN.ExciseRegister = ExciseRegister_IN::RG23APartII;
                        break;
                    case ExciseRecordType_IN::RG23C:
                        taxTrans_IN.ExciseRegister = ExciseRegister_IN::RG23CPartII;
                        break;
                    default:
                        taxTrans_IN.ExciseRegister = ExciseRegister_IN::None;
                        break;
                }
                break;

            default:
                break;
        }

        return taxTrans_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        this.parmTaxModuleType(TaxModuleType::Tax);
        this.parmTaxRepVersion(-1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxModuleType</Name>
				<Source><![CDATA[
    public TaxModuleType parmTaxModuleType(TaxModuleType _taxModuleType = taxModuleType)
    {
        taxModuleType = _taxModuleType;
        return taxModuleType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxRepVersion</Name>
				<Source><![CDATA[
    public TaxVersion parmTaxRepVersion(TaxVersion _taxRepCounter = taxRepCounter)
    {
        taxRepCounter = _taxRepCounter;
        return taxRepCounter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxTransObject</Name>
				<Source><![CDATA[
    public TaxTransObject_IN parmTaxTransObject()
    {
        return taxTransObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public TaxSalesTaxPaymentDoc_IN process(TaxSalesTaxPaymentDoc_IN _taxPaymentDoc, TaxSalesTaxPaymentHistoryDetails_IN _historyDetail = null)
    {
        TaxSalesTaxPaymentHistoryDetailsTrans_IN    detailTrans;
        TaxTrans                                    taxTransLoc, taxTransSelected;
        TaxTrans_W                                  taxTrans_W;
        TaxTrans_IN                                 taxTrans_IN, taxTransINSelected;
        LedgerVoucherTransObject                    ledgerVoucherTransObject;
        TaxRegistrationNumbers_IN                   taxRegistrationNumbers;

        Debug::assert(_historyDetail != null);

        super(_taxPaymentDoc, _historyDetail);

        select firstOnly taxTransSelected
            order by taxTransSelected.TransDate asc
            join RecId from taxTransINSelected
                where taxTransSelected.RecId == taxTransINSelected.RefRecId
            join TaxTrans_IN, TaxSalesTaxPaymentHistoryDetails_IN from detailTrans
                where detailTrans.TaxTrans_IN == taxTransINSelected.RecId
                && detailTrans.TaxSalesTaxPaymentHistoryDetails_IN == _historyDetail.RecId
                && detailTrans.Mark == NoYes::Yes;

        if(this.parmTaxPostingLedgerDimension() == 0)
        {
            this.parmTaxPostingLedgerDimension(this.getTaxPostingLedgerDimAcct(_historyDetail));
        }

        if(this.parmReverseBalance())
        {
            this.parmBalance(this.parmBalance() * -1);
        }

        //Init TaxTrans object
        taxTransLoc.clear();
        taxTransLoc.Voucher                 = _taxPaymentDoc.parmLedgerVoucher().lastVoucher();
        taxTransLoc.TransDate               = this.parmTaxPaymentDoc().parmTaxSalesTaxPaymentProfile().parmTransactionDate();
        taxTransLoc.Source                  = this.parmTaxModuleType();
        taxTransLoc.TaxCode                 = taxTransSelected.TaxCode;
        taxTransLoc.TaxOrigin               = TaxOrigin::TaxReporting;
        if(this.parmReverseBalance())
        {
            taxTransLoc.TaxDirection        = this.parmBalance() <= 0 ? TaxDirection::IncomingTax : TaxDirection::OutgoingTax;
            taxTransLoc.TaxAccountType      = this.parmBalance() <= 0 ? TaxAccountingPostingAccountType::TaxRecoverable : TaxAccountingPostingAccountType::TaxPayable;
        }
        else
        {
            taxTransLoc.TaxDirection        = this.parmBalance() > 0 ? TaxDirection::IncomingTax : TaxDirection::OutgoingTax;
            taxTransLoc.TaxAccountType      = this.parmBalance() > 0 ? TaxAccountingPostingAccountType::TaxRecoverable : TaxAccountingPostingAccountType::TaxPayable;
        }
        taxTransLoc.TaxPeriod               = _taxPaymentDoc.parmTaxSalesTaxPaymentProfile().parmTaxPeriod();
        taxTransLoc.CurrencyCode            = taxTransSelected.CurrencyCode;

        if(taxTransSelected.TaxValue != 0)
        {
            taxTransLoc.TaxBaseAmount       = CurrencyExchangeHelper::amount(this.parmBalance() * -1) / (taxTransSelected.TaxValue / 100);
            taxTransLoc.TaxBaseAmountCur    = CurrencyExchangeHelper::amount(this.parmBalance() * -1) / (taxTransSelected.TaxValue / 100);
            taxTransLoc.SourceBaseAmountCur = CurrencyExchangeHelper::amount(this.parmBalance() * -1) / (taxTransSelected.TaxValue / 100);
        }
        else
        {
            taxTransLoc.TaxBaseAmount       = taxTransSelected.TaxBaseAmount * -1;
            taxTransLoc.TaxBaseAmountCur    = taxTransSelected.TaxBaseAmountCur * -1;
            taxTransLoc.SourceBaseAmountCur = taxTransSelected.SourceBaseAmountCur * -1;
        }
        taxTransLoc.TaxAmount               = CurrencyExchangeHelper::amount(this.parmBalance() * -1);
        taxTransLoc.TaxAmountCur            = this.parmBalance() * -1;
        taxTransLoc.SourceTaxAmountCur      = CurrencyExchangeHelper::amount(this.parmBalance() * -1);
        taxTransLoc.SourceRegulateAmountCur = CurrencyExchangeHelper::amount(this.parmBalance() * -1);
        taxTransLoc.SourceCurrencyCode      = CompanyInfoHelper::standardCurrency();
        taxTransLoc.ExemptTax               = taxTransSelected.ExemptTax;
        taxTransLoc.ExemptCode              = taxTransSelected.ExemptCode;
        taxTransLoc.TaxValue                = taxTransSelected.TaxValue;
        taxTransLoc.VATExemptPct            = taxTransSelected.VATExemptPct;
        taxTransLoc.PrintCode               = taxTransSelected.PrintCode;
        taxTransLoc.TaxAutogenerated        = NoYes::Yes;
        //Need to assign to it's taxRegistrationNumber's own taxRepVersion, which might be different than the profile.TaxRegNumber
        if(this.parmTaxRepVersion() >= 0)
        {
            taxTransLoc.TaxRepCounter       = this.parmTaxRepVersion();
        }
        else
        {
            taxTransLoc.TaxRepCounter       = TaxReportPeriod_IN::version(taxTransLoc.TaxPeriod,
                                                _historyDetail.TaxRegistrationNumbers_IN,
                                                this.parmTaxPaymentDoc().parmTaxSalesTaxPaymentProfile().parmTransactionDate());
        }

        //Init taxTrans_W
        taxTrans_W = taxTransLoc.taxTrans_W();

        taxRegistrationNumbers = TaxRegistrationNumbers_IN::find(_historyDetail.TaxRegistrationNumbers_IN);
        if (taxRegistrationNumbers.TaxType == TaxType_IN::GST)
        {
            taxTrans_W.TaxType_IN = TaxType_IN::GST;
        }
        else
        {
            taxTrans_W.TaxType_IN = TaxTable::find(taxTransSelected.TaxCode).TaxType_IN;
        }

        taxTrans_W.TaxComponentTable_IN = taxTransSelected.taxTrans_W().TaxComponentTable_IN;
        taxTrans_W.TaxRegistrationNumberTable_IN = _historyDetail.TaxRegistrationNumbers_IN;
        taxTransLoc.packTaxTrans_W(taxTrans_W);

        //Init taxTrans_IN
        taxTrans_IN = this.initTaxTransIN(TaxReportHierarchyNode_IN::find(_historyDetail.TaxReportHierarchyNode_IN), taxTransLoc);

        //construct ledgerVoucherTransObject for taxTrans
        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                    LedgerPostingController::newForLedgerPostingJournal(_taxPaymentDoc.parmLedgerVoucher()).getReference(),
                                    LedgerPostingType::Tax,
                                    this.parmTaxPostingLedgerDimension(),
                                    CompanyInfoHelper::standardCurrency(),
                                    taxTransLoc.TaxAmount,
                                    CurrencyExchangeHelper::newExchangeDate(
                                        Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                        this.parmTaxPaymentDoc().parmTaxSalesTaxPaymentProfile().parmTransactionDate())
                                );
        ledgerVoucherTransObject.parmSkipDimensionValidation(true);

        taxTransObject = new TaxTransObject_IN();
        taxTransObject.parmTaxTrans(taxTransLoc);
        taxTransObject.parmTaxTrans_W(taxTrans_W);
        taxTransObject.parmTaxTrans_IN(taxTrans_IN);
        taxTransObject.parmledgerVoucherTransObject(ledgerVoucherTransObject);
        this.parmTaxPaymentDoc().addTaxTrans(taxTransObject);

        return this.parmTaxPaymentDoc();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>