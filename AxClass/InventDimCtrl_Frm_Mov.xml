<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_Mov</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimCtrl_Frm_Mov extends InventDimCtrl_Frm_Editable
{
    InventMovement      movement;
    FieldId             currentDimSetupFieldId;
    Map                 dimSetupValues;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formActiveSetup</Name>
				<Source><![CDATA[
    public void formActiveSetup(
        InventDimGroupSetup         _inventDimGroupSetup    = null,
        InventMovement              _movement               = null)
    {
        movement = _movement;

        if (!_movement)
        {
            throw error(strFmt("@SYS18707",funcName()));
        }

        super(_inventDimGroupSetup);

        movement.inventDimGroupSetup(this.inventDimGroupSetup());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEnableControl</Name>
				<Source><![CDATA[
    protected boolean mustEnableControl(
        InventDimFormControlInterface   _fc,
        InventDimParm                   _dimParmEnabled = dimParmEnabled)
    {
        boolean enable = true;

        if (movement &&
            movement.transType() == InventTransType::InventTransfer &&
            inventDimControls.datasourceName(_fc) == identifierstr(InventDimReceipt))
        {
            if (this.getFieldSetup(inventDimControls.fieldId(_fc)).isInheritInventTransfer_RU())
            {
                enable = false;
            }
        }

        return super(_fc) && enable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableDimension</Name>
				<Source><![CDATA[
    protected boolean canEnableDimension(FieldId _fieldId)
    {
        if (_fieldId == fieldNum(InventDim, InventOwnerId_RU)
            && movement
            && movement.skipMandatoryInventoryOwnerCheck(movement.inventdim()))
        {
            return true;
        }

        return super(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustMarkControlAsMandatory</Name>
				<Source><![CDATA[
    protected boolean mustMarkControlAsMandatory(InventDimFormControlInterface _fc, InventDimParm _dimParmEnabled = dimParmEnabled)
    {
        fieldId dimFieldId = inventDimControls.fieldId(_fc);
        fieldId y = InventDim::dim2dimParm(dimFieldId);

        if (dimFieldId == fieldnum(InventDim, InventOwnerId_RU) &&
            _dimParmEnabled.(y) &&
            this.mustEnableField(dimFieldId))
        {
            if (movement &&
                movement.transType() == InventTransType::InventTransfer &&
                inventDimControls.datasourceName(_fc) == identifierstr(InventDimIssue))
            {
                if (this.getFieldSetup(inventDimControls.fieldId(_fc)).isInheritInventTransfer_RU())
                {
                    return true;
                }
            }
        }

        return super(_fc, _dimParmEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustMarkFieldAsMandatory</Name>
				<Source><![CDATA[
    protected NoYes mustMarkFieldAsMandatory(FieldId _dimFieldId)
    {
        if (!this.mustEnableField(_dimFieldId))
        {
            return NoYes::No;
        }

        InventDimGroupFieldSetup inventDimGroupFieldSetup = this.getFieldSetup(_dimFieldId);
        return inventDimGroupFieldSetup.isMandatory() || inventDimGroupFieldSetup.isProductDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowGridField</Name>
				<Source><![CDATA[
    protected NoYes mustShowGridField(FieldId _dimFieldId)
    {
        FieldId     dimFieldId = InventDimSetupGrid::movement2FieldId(movement);

        if (!_dimFieldId)
        {
            return NoYes::No;
        }

        if (currentDimSetupFieldId != dimFieldId)
        {
            currentDimSetupFieldId = dimFieldId;
            container fieldValuesContainer = InventDimSetupGrid::fieldStatus(currentDimSetupFieldId);
            dimSetupValues = (fieldValuesContainer) ? Map::create(fieldValuesContainer) : null;
        }
        if (!dimSetupValues || !dimSetupValues.exists(_dimFieldId))
        {
            return NoYes::No;
        }

        NoYes showInGrid = dimSetupValues.lookup(_dimFieldId);

        return showInGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMovement</Name>
				<Source><![CDATA[
    public InventMovement parmMovement(InventMovement _movement = movement)
    {
        movement = _movement;
        this.parmInventDimGroupSetup(movement.inventDimGroupSetup());

        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimCtrl_Frm_Mov construct()
    {
        return new InventDimCtrl_Frm_Mov();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of this class to be used in forms.
    /// </summary>
    /// <param name="_formRun">
    ///    The form where controls are maintained.
    /// </param>
    /// <param name="_movement">
    ///    An instance of the movement for which the class is used.
    /// </param>
    /// <returns>
    ///    An instance of this class to be used in a form.
    /// </returns>
    public static InventDimCtrl_Frm_Mov newFromFormMovement(
        FormRun         _formRun,
        InventMovement  _movement)
    {
        InventDimCtrl_Frm_Mov   inventDimCtrl = InventDimCtrl_Frm_Mov::construct();
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.parmMovement(_movement);
        inventDimCtrl.init();

        return inventDimCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormMovementDataSources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of this class to be used in forms.
    /// </summary>
    /// <param name="_formRun">
    ///    The form where controls are maintained.
    /// </param>
    /// <param name="_movement">
    ///    An instance of the movement for which the class is used.
    /// </param>
    /// <param name="_validDataSources">
    ///    A set of names (strings) for the data sources in the form to be controlled by this class.
    /// </param>
    /// <returns>
    ///    An instance of this class to be used in a form.
    /// </returns>
    public static InventDimCtrl_Frm_Mov newFromFormMovementDataSources(
        FormRun         _formRun,
        InventMovement  _movement,
        Set             _validDataSources)
    {
        InventDimCtrl_Frm_Mov   inventDimCtrl = InventDimCtrl_Frm_Mov::construct();
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.parmMovement(_movement);
        inventDimCtrl.parmValidDataSources(_validDataSources);
        inventDimCtrl.init();

        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>