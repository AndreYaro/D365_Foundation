<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InfoLogUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Utility class for <c>SysInfoLog</c> functionality
/// </summary>
public class InfoLogUtility
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>showInfologMessagesAfterLineNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows infolog messages from a RunBase operation once it is complete to
    /// bring them into the context of a form that started the operation.
    /// </summary>
    /// <param name = "_lastLogLineNumber">The number of the last infolog message.</param>
    /// <param name = "_prefix">The string used to group all the messages together.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void showInfologMessagesAfterLineNumber(int _lastLogLineNumber, str _prefix)
    {
        InfologData infologData = infolog().infologData();
        SysInfologEnumerator sysInfologEnumerator = SysInfologEnumerator::newData(infologData);
        int infologDataIndex;

        if (_lastLogLineNumber == conLen(infologData))
        {
            return;
        }

        setPrefix(_prefix);

        for (infologDataIndex = 0; infologDataIndex < _lastLogLineNumber; infologDataIndex++)
        {
            sysInfologEnumerator.moveNext();
        }

        while (sysInfologEnumerator.moveNext())
        {
            SysInfoLogStr currentInfologMessage = sysInfologEnumerator.currentMessage();
            Exception currentInfologMessageType = sysInfologEnumerator.currentException();

            switch (currentInfologMessageType)
            {
                case Exception::Error:
                    Message::Add(MessageSeverity::Error, currentInfologMessage);
                    break;

                case Exception::Warning:
                    Message::Add(MessageSeverity::Warning, currentInfologMessage);
                    break;

                case Exception::Info:
                    Message::Add(MessageSeverity::Informational, currentInfologMessage);
                    break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>