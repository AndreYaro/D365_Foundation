<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ExchangeRateImportOperationEventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ExchangeRateImportOperationEventHandlers</c> class performs the exchange rate pre_import operation.
/// </summary>
public static class ExchangeRateImportOperationEventHandlers
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ExchangeRateImportOperation_Pre_import</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pre_import method to set a exchange rate calendar.
    /// </summary>
    /// <param name="args">
    /// An instance of the <c>ExchangeRateImportRequest</c> class.
    /// </param>
    [PreHandlerFor(classStr(ExchangeRateImportOperation), methodStr(ExchangeRateImportOperation, import))]
    public static void ExchangeRateImportOperation_Pre_import(XppPrePostArgs args)
    {
        const str argName = 'exchangeRateImportRequest';
        ExchangeRateImportRequest exchangeRateImportRequest;
        CalendarId CalendarId;
        ExchangeRateCalendar calendar;
        ExchangeRateType exchangeRateType;
        FromDate fromDate;
        ToDate toDate;
        LogisticsAddressCountryRegion countryRegion;
        PaymCalendarCountryRegion paymCalendarCountryRegion;
        PaymCalendarException paymCalendarException;
        Set nationalHolidaySet;

        if (args.existsArg(argName))
        {
            exchangeRateImportRequest = args.getArg(argName);

            select CalendarId from exchangeRateType
                where exchangeRateType.RecId == exchangeRateImportRequest.parmExchangeRateTypeRecId();

            if (exchangeRateType.CalendarId)
            {
                calendar = new ExchangeRateCalendar();
                calendar.parmCalendarId(exchangeRateType.CalendarId);
                exchangeRateImportRequest.parmExchangeRateCalendar(calendar);
            }

            if (exchangeRateImportRequest.parmPreventImportOnNationalHoliday())
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEUR00019, funcName());

                if (exchangeRateImportRequest.parmImportDateType() == ExchangeRateImportDateType::CurrentDate)
                {
                    fromDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    toDate = fromDate;
                }
                else
                {
                    fromDate = exchangeRateImportRequest.parmImportFromDate();
                    toDate = exchangeRateImportRequest.parmImportToDate();
                }

                countryRegion = LogisticsAddressCountryRegion::find(CompanyInfo::findDataArea(curext()).postalAddress().CountryRegionId);
                paymCalendarCountryRegion = PaymCalendarCountryRegion::findByCountryRegion(countryRegion.RecId);

                if (paymCalendarCountryRegion)
                {
                    nationalHolidaySet = new Set(Types::Date);

                    while select paymCalendarException
                        where paymCalendarException.PaymCalendar == paymCalendarCountryRegion.PaymCalendar
                            && paymCalendarException.ExceptionType == PaymDayExceptionType::Remove
                            && paymCalendarException.ExceptionDate >= fromDate
                            && paymCalendarException.ExceptionDate <= toDate
                    {
                        nationalHolidaySet.add(paymCalendarException.ExceptionDate);
                    }

                    exchangeRateImportRequest.parmNationalHolidaySet(nationalHolidaySet);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>