<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBalanceQueryGeneralLedgerBalanceSim_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerBalanceQueryGeneralLedgerBalanceSim_IT</c> class is used to retrieve a balance from the general
///    ledger by using the general ledger Italy simulation balances.
/// </summary>
internal final class LedgerBalanceQueryGeneralLedgerBalanceSim_IT extends LedgerBalanceQueryBase
{
    TmpAccountSum tmpAccountSum;
    AmountMST accountingCurrencyDebitBalance;
    AmountMST accountingCurrencyCreditBalance;
    AmountMST reportingCurrencyBalance;
    Qty quantityBalance;

    private const boolean NotInverted = false;
    private const boolean Inverted = true;
    private const int BalanceDataSourceNumber = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static LedgerBalanceQueryGeneralLedgerBalanceSim_IT construct()
    {
        return new LedgerBalanceQueryGeneralLedgerBalanceSim_IT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the accounting date range to the query.
    /// </summary>
    /// <param name="_query">
    ///    The query.
    /// </param>
    [Hookable(false)]
    protected void addRangeForAccountingDate(Query _query)
    {
        if (startAccountingDate != dateNull() || endAccountingDate != dateMax())
        {
            QueryBuildDataSource ds = _query.dataSourceNo(BalanceDataSourceNumber);
            int balanceTableId = ds.table();
            QueryBuildRange range = ds.addRange(fieldName2Id(balanceTableId, fieldStr(GeneralLedgerBalanceSim_IT, AccountingDate)));
            range.value(SysQuery::range(startAccountingDate, endAccountingDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the simulation journal name range to the query.
    /// </summary>
    /// <param name="_query">
    ///    The query.
    /// </param>
    protected void addRangeForJournalName(Query _query)
    {
        if (simulationJournalGroupId_IT)
        {
            QueryBuildDataSource ds = _query.dataSourceTable(tableNum(GeneralLedgerBalanceSim_IT));
            SimulationJournalGroupLine_IT simulationJournalGroupLine;
            while select JournalName from simulationJournalGroupLine
                where SimulationJournalGroupLine.SimulationJournalGroupId == simulationJournalGroupId_IT
            {
                ds.addRange(fieldNum(GeneralLedgerBalanceSim_IT, SimulationJournalNameId)).value(SimulationJournalGroupLine.JournalName);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void addRangeForLine(Query _query)
    {
        // excluding debits and credits is handled in addToBalanceTotals for general ledger balances
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the fiscal period ranges to the query.
    /// </summary>
    /// <param name="_query">
    ///    The query.
    /// </param>
    [Hookable(false)]
    protected void addRangeForPeriod(Query _query)
    {
        QueryBuildDataSource ds = _query.dataSourceNo(BalanceDataSourceNumber);
        int balanceTableId = ds.table();

        FiscalCalendarPeriod::addRangeForPeriodType(
            ds,
            fieldName2Id(balanceTableId, fieldStr(GeneralLedgerBalanceSim_IT, FiscalCalendarPeriodType)),
            includeOpeningPeriod,
            includeOperatingPeriod,
            includeClosingPeriod || includeClosingPeriodBySystem);

        // PostingType range is related to includeClosingPeriodBySystem
        if (includeClosingPeriod != includeClosingPeriodBySystem)
        {
            QueryBuildRange range = ds.addRange(fieldName2Id(balanceTableId, fieldStr(GeneralLedgerBalanceSim_IT, IsClosingTransaction)));

            if (includeClosingPeriod)
            {
                range.value(SysQuery::value(NoYes::No));
            }
            else
            {
                range.value(SysQuery::value(NoYes::Yes));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForPostingLayer</Name>
				<Source><![CDATA[
    [SysObsolete('This method is deprecated in a future release, use parmPostingLayerList instead.', true, 01\05\2024)]
    protected void addRangeForPostingLayer(Query _query)
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeForPostingLayerList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the posting layer ranges to the query.
    /// </summary>
    /// <param name="_query">
    ///    The query.
    /// </param>
    [Hookable(false)]
    protected void addRangeForPostingLayerList(Query _query)
    {
        QueryBuildDataSource ds = _query.dataSourceNo(BalanceDataSourceNumber);
        int balanceTableId = ds.table();

        GeneralJournalEntry::addRangeForPostingLayerList(
            ds,
            fieldName2Id(balanceTableId, fieldStr(GeneralLedgerBalanceSim_IT, PostingLayer)),
            postingLayerList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToBalanceTotals</Name>
				<Source><![CDATA[
    private void addToBalanceTotals(int _sign, GeneralLedgerBalanceSim_IT _generalLedgerBalanceSimIT)
    {
        if (excludeDebits)
        {
            accountingCurrencyCreditBalance -= _generalLedgerBalanceSimIT.CreditAccountingCurrencyAmount * _sign;
            reportingCurrencyBalance += _generalLedgerBalanceSimIT.CreditReportingCurrencyAmount * _sign;
        }
        else if (excludeCredits)
        {
            accountingCurrencyDebitBalance += _generalLedgerBalanceSimIT.DebitAccountingCurrencyAmount * _sign;
            reportingCurrencyBalance += _generalLedgerBalanceSimIT.DebitReportingCurrencyAmount * _sign;
        }
        else
        {
            if (groupByDate)
            {
                tmpAccountSum.TransDate = _generalLedgerBalanceSimIT.AccountingDate;
                tmpAccountSum.Balance01 = (_generalLedgerBalanceSimIT.DebitAccountingCurrencyAmount - _generalLedgerBalanceSimIT.CreditAccountingCurrencyAmount) * _sign;
                tmpAccountSum.insert();
            }
            else
            {
                // there is no penalty for separating debits and credits in the
                // general ledger balance tables so don't even check the option
                accountingCurrencyDebitBalance += _generalLedgerBalanceSimIT.DebitAccountingCurrencyAmount * _sign;
                accountingCurrencyCreditBalance -= _generalLedgerBalanceSimIT.CreditAccountingCurrencyAmount * _sign;
                reportingCurrencyBalance += (_generalLedgerBalanceSimIT.DebitReportingCurrencyAmount + _generalLedgerBalanceSimIT.CreditReportingCurrencyAmount) * _sign;
            }
        }

        quantityBalance += _generalLedgerBalanceSimIT.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateForReportingDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the balance for the reporting dimensions.
    /// </summary>
    /// <param name="_reportingDimensions">
    /// The reporting dimensions.
    /// </param>
    internal void calculateForReportingDimensions(GeneralLedgerBalanceReportingDimension _reportingDimensions)
    {
        GeneralLedgerBalanceSim_IT generalLedgerBalance;
        int sign;

        if (_reportingDimensions == null)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        this.resetBalanceTotals();

        Query query = this.createQuery(generalLedgerBalance);

        QueryBuildDataSource ds = query.dataSourceTable(tablenum(GeneralLedgerBalanceSim_IT));

        GeneralLedgerBalanceReportingDimensionDataSource::addLedgerDimensionReportingDimensionFilter(
            ds,
            fieldNum(GeneralLedgerBalanceSim_IT, LedgerDimension),
            _reportingDimensions);

        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            generalLedgerBalance = queryRun.get(tablenum(GeneralLedgerBalanceSim_IT)) as GeneralLedgerBalanceSim_IT;

            sign = this.getSign(generalLedgerBalance.PostingLayer, NotInverted);

            this.addToBalanceTotals(sign, generalLedgerBalance);
        }

        if (!groupByDate)
        {
            tmpAccountSum.Txt = _reportingDimensions.DisplayValue;
            tmpAccountSum.Balance01 = accountingCurrencyDebitBalance + accountingCurrencyCreditBalance;
            tmpAccountSum.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateForMainAccountRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the balance for a range of main accounts.
    /// </summary>
    /// <param name = "_mainAccounts">A main account range.</param>
    [Hookable(false)]
    public void calculateForMainAccountRange(str _mainAccounts)
    {
        if (_mainAccounts == '')
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        DimensionHierarchy mainAccountDimSet = DimensionHierarchy::getMainAccountFocus();

        GeneralLedgerBalanceSim_IT generalLedgerBalance;
        Query query = this.createQuery(generalLedgerBalance);
        QueryBuildDataSource generalLedgertBalanceDS = query.dataSourceTable(tableNum(GeneralLedgerBalanceSim_IT));

        QueryBuildDataSource reportingDimensionReferenceLink = generalLedgertBalanceDS.addDataSource(tableNum(GeneralLedgerBalanceReportingDimensionReferenceSim_IT));
        reportingDimensionReferenceLink.joinMode(JoinMode::InnerJoin);
        reportingDimensionReferenceLink.addLink(fieldNum(GeneralLedgerBalanceSim_IT, LedgerDimension), fieldNum(GeneralLedgerBalanceReportingDimensionReferenceSim_IT, AccountEntryLedgerDimension));

        QueryBuildRange hierarchyRange = reportingDimensionReferenceLink.addRange(fieldnum(GeneralLedgerBalanceReportingDimensionReference, FocusDimensionHierarchy));
        hierarchyRange.value(SysQuery::value(mainAccountDimSet.RecId));

        QueryBuildDataSource dimensionAttributeValueCombinationDS = reportingDimensionReferenceLink.addDataSource(tableNum(DimensionAttributeValueCombination));
        dimensionAttributeValueCombinationDS.joinMode(JoinMode::InnerJoin);
        dimensionAttributeValueCombinationDS.addLink(fieldNum(GeneralLedgerBalanceReportingDimensionReferenceSim_IT, AccountEntryLedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));

        dimensionAttributeValueCombinationDS.addRange(fieldNum(DimensionAttributeValueCombination, MainAccountValue)).value(_mainAccounts);

        this.resetBalanceTotals();

        QueryRun run = new QueryRun(query);
        while (run.next())
        {
            generalLedgerBalance = run.get(tablenum(GeneralLedgerBalanceSim_IT)) as GeneralLedgerBalanceSim_IT;

            int sign = this.getSign(generalLedgerBalance.PostingLayer, NotInverted);

            this.addToBalanceTotals(sign, generalLedgerBalance);
        }

        tmpAccountSum.Txt = _mainAccounts;
        tmpAccountSum.Balance01 = accountingCurrencyDebitBalance + accountingCurrencyCreditBalance;
        tmpAccountSum.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateForMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the balance for the main account.
    /// </summary>
    /// <param name="_mainAccount">
    /// The main account for which to calculate the balance.
    /// </param>
    /// <remarks>
    /// Use the <c>getAccountingCurrencyAmount</c> method and the <c>getTmpData</c> method to retrieve the
    /// results.
    /// </remarks>
    [Hookable(false)]
    public void calculateForMainAccount(MainAccount _mainAccount)
    {
        if (_mainAccount == null)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (_mainAccount.LedgerChartOfAccounts != LedgerChartOfAccounts::current())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        this.resetBalanceTotals();

        if (_mainAccount.Type == DimensionLedgerAccountType::Total)
        {
            this.calculateForMainAccountTotalAccount(_mainAccount);
        }
        else
        {
            this.calculateForMainAccountWithRanges(_mainAccount, queryValue(_mainAccount.RecId), NotInverted);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateForMainAccountTotalAccount</Name>
				<Source><![CDATA[
    private void calculateForMainAccountTotalAccount(MainAccount _mainAccount)
    {
        DimensionAttribute dimensionAttribute = DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount));

        DimensionAttributeValue dimensionAttributeValue =
            DimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute, _mainAccount.MainAccountId);

        // amounts not inverted
        str rangeValueNotInverted = this.getMainAccountRangeNotInvertedForTotalAccount(dimensionAttributeValue);

        if (rangeValueNotInverted)
        {
            this.calculateForMainAccountWithRanges(_mainAccount, rangeValueNotInverted, NotInverted);
        }

        // amounts inverted
        str rangeValueInverted = this.getMainAccountRangeInvertedForTotalAccount(dimensionAttributeValue);

        if (rangeValueInverted)
        {
            this.calculateForMainAccountWithRanges(_mainAccount, rangeValueInverted, Inverted);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateForMainAccountWithRanges</Name>
				<Source><![CDATA[
    private void calculateForMainAccountWithRanges(
        MainAccount _mainAccount,
        str _mainAccountRangeQueryValue,
        boolean _invertAmountSign)
    {
        GeneralLedgerBalanceSim_IT generalLedgerBalance;
        DimensionHierarchy mainAccountDimSet = DimensionHierarchy::getMainAccountFocus();
        Query query = this.createQuery(generalLedgerBalance);
        QueryBuildDataSource generalLedgertBalanceDS = query.dataSourceTable(tablenum(GeneralLedgerBalanceSim_IT));

        QueryBuildDataSource reportingDimensionReferenceLink = generalLedgertBalanceDS.addDataSource(tableNum(GeneralLedgerBalanceReportingDimensionReferenceSim_IT));
        reportingDimensionReferenceLink.joinMode(JoinMode::InnerJoin);
        reportingDimensionReferenceLink.addLink(fieldNum(GeneralLedgerBalanceSim_IT, LedgerDimension), fieldNum(GeneralLedgerBalanceReportingDimensionReferenceSim_IT, AccountEntryLedgerDimension));

        QueryBuildRange hierarchyRange = reportingDimensionReferenceLink.addRange(fieldnum(GeneralLedgerBalanceReportingDimensionReference, FocusDimensionHierarchy));
        hierarchyRange.value(SysQuery::value(mainAccountDimSet.RecId));

        QueryBuildDataSource dimensionAttributeValueCombinationDS = reportingDimensionReferenceLink.addDataSource(tableNum(DimensionAttributeValueCombination));
        dimensionAttributeValueCombinationDS.joinMode(JoinMode::InnerJoin);
        dimensionAttributeValueCombinationDS.addLink(fieldNum(GeneralLedgerBalanceReportingDimensionReferenceSim_IT, AccountEntryLedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));

        QueryBuildRange mainAccountRange = SysQuery::findOrCreateRange(dimensionAttributeValueCombinationDS, fieldnum(DimensionAttributeValueCombination, MainAccount));

        mainAccountRange.value(_mainAccountRangeQueryValue);

        QueryRun run = new QueryRun(query);
        while (run.next())
        {
            generalLedgerBalance = run.get(tablenum(GeneralLedgerBalanceSim_IT)) as GeneralLedgerBalanceSim_IT;

            int sign = this.getSign(generalLedgerBalance.PostingLayer, _invertAmountSign);

            this.addToBalanceTotals(sign, generalLedgerBalance);
        }

        tmpAccountSum.Txt = _mainAccount.MainAccountId;
        tmpAccountSum.Balance01 = accountingCurrencyDebitBalance + accountingCurrencyCreditBalance;
        tmpAccountSum.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    private Query createQuery(GeneralLedgerBalanceSim_IT _balanceTable)
    {
        Query query = new Query();
        query.addDataSource(_balanceTable.TableId);
        QueryBuildDataSource ds = query.dataSourceTable(_balanceTable.TableId);

        query.clearGroupBy();

        ds.addSelectionField(fieldName2Id(_balanceTable.TableId, fieldStr(GeneralLedgerBalanceSim_IT, DebitAccountingCurrencyAmount)), SelectionField::Sum);
        ds.addSelectionField(fieldName2Id(_balanceTable.TableId, fieldStr(GeneralLedgerBalanceSim_IT, CreditAccountingCurrencyAmount)), SelectionField::Sum);
        ds.addSelectionField(fieldName2Id(_balanceTable.TableId, fieldStr(GeneralLedgerBalanceSim_IT, DebitReportingCurrencyAmount)), SelectionField::Sum);
        ds.addSelectionField(fieldName2Id(_balanceTable.TableId, fieldStr(GeneralLedgerBalanceSim_IT, CreditReportingCurrencyAmount)), SelectionField::Sum);
        ds.addSelectionField(fieldName2Id(_balanceTable.TableId, fieldStr(GeneralLedgerBalanceSim_IT, Quantity)), SelectionField::Sum);
        ds.addSelectionField(fieldName2Id(_balanceTable.TableId, fieldStr(GeneralLedgerBalanceSim_IT, PostingLayer)), SelectionField::Max);

        this.addRangeForAccountingDate(query);

        if (postingLayerList && postingLayerList.elements() > 0)
        {
            this.addRangeForPostingLayerList(query);
        }

        this.addRangeForPeriod(query);
        this.addRangeForLine(query);
        this.addRangeForJournalName(query);

        QueryBuildRange range = ds.addRange(fieldName2Id(_balanceTable.TableId, fieldStr(GeneralLedgerBalanceSim_IT, Ledger)));
        range.value(SysQuery::value(ledgerRecId));

        if (groupByDate)
        {
            ds.addGroupByField(fieldName2Id(_balanceTable.TableId, fieldStr(GeneralLedgerBalanceSim_IT, AccountingDate)));
        }

        // not supported by the GeneralLedgerBalance table
        Debug::assert(!groupByCurrency);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyCreditBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accounting currency credit balance.
    /// </summary>
    /// <returns>
    /// The accounting currency credit balance.
    /// </returns>
    [Hookable(false)]
    public AmountMST getAccountingCurrencyCreditBalance()
    {
        return accountingCurrencyCreditBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyDebitBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accounting currency debit balance.
    /// </summary>
    /// <returns>
    /// The accounting currency debit balance.
    /// </returns>
    [Hookable(false)]
    public AmountMST getAccountingCurrencyDebitBalance()
    {
        return accountingCurrencyDebitBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accounting currency balance.
    /// </summary>
    /// <returns>The accounting currency balance.</returns>
    [Hookable(false)]
    public AmountMST getAccountingCurrencyBalance()
    {
        return accountingCurrencyDebitBalance - accountingCurrencyCreditBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantityBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity balance.
    /// </summary>
    /// <returns>
    /// The quantity balance.
    /// </returns>
    [Hookable(false)]
    public Qty getQuantityBalance()
    {
        return quantityBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingCurrencyBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reporting currency balance.
    /// </summary>
    /// <returns>
    /// The reporting currency balance.
    /// </returns>
    [Hookable(false)]
    public AmountMST getReportingCurrencyBalance()
    {
        return reportingCurrencyBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a record in the <c>TmpAccountSum</c> table.
    /// </summary>
    /// <returns>
    /// A record in the <c>TmpAccountSum</c> table.
    /// </returns>
    /// <remarks>
    /// This method is compatible with form data sources.
    /// </remarks>
    [Hookable(false)]
    public TmpAccountSum getTmpData()
    {
        return tmpAccountSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetBalanceTotals</Name>
				<Source><![CDATA[
    private void resetBalanceTotals()
    {
        tmpAccountSum = null;
        accountingCurrencyDebitBalance = 0.0;
        accountingCurrencyCreditBalance = 0.0;
        reportingCurrencyBalance = 0.0;
        quantityBalance = 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountRangeNotInvertedForTotalAccount</Name>
				<Source><![CDATA[
    private str getMainAccountRangeNotInvertedForTotalAccount(
        DimensionAttributeValue _dimensionAttributeValue)
    {
        int previousLength;
        FieldName searchField;
        RecId searchRecordId;
        str rangeValueNotInverted;
        MainAccount mainAccount;

        SysDaSearchObject searchObject = LedgerBalanceQueryDimensionFocusCalculateForMainAccountQuery::createSearchObject(mainAccount, _dimensionAttributeValue.RecId, NotInverted);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();

        while (searchStatement.findNext(searchObject))
        {
            searchField = fieldstr(DimensionAttributeValueCombination, MainAccount);
            searchRecordId = mainAccount.RecId;

            if (searchRecordId)
            {
                previousLength = strLen(rangeValueNotInverted);

                if (previousLength > 0)
                {
                    rangeValueNotInverted += ' || ';
                }

                rangeValueNotInverted +=
                    '(' + searchField + ' == ' + int642str(searchRecordId) + ')';

                if (strLen(rangeValueNotInverted) == previousLength)
                {
                    // string is overflowing
                    throw error(Error::wrongUseOfFunction(funcname()));
                }
            }
        }

        if (strLen(rangeValueNotInverted) > 0)
        {
            rangeValueNotInverted = '(' + rangeValueNotInverted + ')';
        }

        return rangeValueNotInverted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountRangeInvertedForTotalAccount</Name>
				<Source><![CDATA[
    private str getMainAccountRangeInvertedForTotalAccount(
        DimensionAttributeValue _dimensionAttributeValue)
    {
        MainAccount mainAccountInverted;
        int previousLength;
        str rangeValueInverted;
        FieldName searchField;
        RecId searchRecordId;

        SysDaSearchObject searchObject = LedgerBalanceQueryDimensionFocusCalculateForMainAccountQuery::createSearchObject(mainAccountInverted, _dimensionAttributeValue.RecId, Inverted);
        SysDaSearchStatement searchStatement = new SysDaSearchStatement();

        while (searchStatement.findNext(searchObject))
        {
            searchField = fieldstr(DimensionAttributeValueCombination, MainAccount);
            searchRecordId = mainAccountInverted.RecId;

            if (searchRecordId != 0)
            {
                previousLength = strLen(rangeValueInverted);

                if (previousLength > 0)
                {
                    rangeValueInverted += ' || ';
                }

                rangeValueInverted +=
                    '(' + searchField + ' == ' + int642str(searchRecordId) + ')';

                if (strLen(rangeValueInverted) == previousLength)
                {
                    // string is overflowing
                    throw error(Error::wrongUseOfFunction(funcname()));
                }
            }
        }

        if (strLen(rangeValueInverted) > 0)
        {
            rangeValueInverted = '(' + rangeValueInverted + ')';
        }

        return rangeValueInverted;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>