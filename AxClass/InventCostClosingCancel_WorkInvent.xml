<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostClosingCancel_WorkInvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostClosingCancel_WorkInvent</c> class reverses the adjustments for one single item.
/// </summary>
class InventCostClosingCancel_WorkInvent extends InventCostClosingCancel implements BatchRetryable
{
    ItemId              itemId;
    protected List      itemIdList;
    protected container packedItemIdList;

    #DEFINE.CurrentVersion(3)
    #DEFINE.Version2(2)

    #LOCALMACRO.CurrentList
        #CurrentListV2,
        packedItemIdList
    #ENDMACRO

    #LOCALMACRO.CurrentListV2
        itemId
    #ENDMACRO

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInventSettlementFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>InventSettlement</c> fields for query and insert objects.
    /// </summary>
    /// <param name = "_selectionObject">The <c>SysDaSelection</c> object.</param>
    protected void addInventSettlementFields(SysDaSelection _selectionObject)
    {
        _selectionObject
            .add(fieldStr(InventSettlement, TransRecId))
            .add(fieldStr(InventSettlement, InventTransId))
            .add(fieldStr(InventSettlement, ItemId))
            .add(fieldStr(InventSettlement, SettleTransId))
            .add(fieldStr(InventSettlement, QtySettled))
            .add(fieldStr(InventSettlement, PdsCWSettled))
            .add(fieldStr(InventSettlement, CostAmountSettled))
            .add(fieldStr(InventSettlement, CostAmountAdjustment))
            .add(fieldStr(InventSettlement, BalanceSheetLedgerDimension))
            .add(fieldStr(InventSettlement, OperationsLedgerDimension))
            .add(fieldStr(InventSettlement, Cancelled))
            .add(fieldStr(InventSettlement, SettleModel))
            .add(fieldStr(InventSettlement, DefaultDimension))
            .add(fieldStr(InventSettlement, BalanceSheetPosting))
            .add(fieldStr(InventSettlement, OperationsPosting))
            .add(fieldStr(InventSettlement, ItemGroupId))
            .add(fieldStr(InventSettlement, SettleType))
            .add(fieldStr(InventSettlement, InventTransCurrency_RU))
            .add(fieldStr(InventSettlement, MarkupCode_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLiteralFieldsToInsertObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds literal fields to the projection of a query object for inserting.
    /// </summary>
    /// <param name = "_selectionObject">The query object to add the fields to.</param>
    protected void addLiteralFieldsToInsertObject(SysDaSelection _selectionObject)
    {
        _selectionObject
            .add(fieldStr(InventSettlement, TransDate))
            .add(fieldStr(InventSettlement, Voucher))
            .add(fieldStr(InventSettlement, Posted));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLiteralFieldsToQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds literal fields to the projection of a query object.
    /// </summary>
    /// <param name = "_selectionObject">The query object to add the fields to.</param>
    protected void addLiteralFieldsToQueryObject(SysDaSelection _selectionObject)
    {
        _selectionObject
            .addValue(inventClosing.TransDate)
            .addValue(inventClosing.Voucher)
            .addValue(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereClauseBasic</Name>
				<Source><![CDATA[
    protected SysDaBinaryExpression buildWhereClauseBasic(InventSettlement _inventSettlement)
    {
        return new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventSettlement, fieldStr(InventSettlement, Voucher)), new SysDaValueExpression(cancelClosing.Voucher))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventSettlement, fieldStr(InventSettlement, TransDate)), new SysDaValueExpression(cancelClosing.TransDate)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventSettlement, fieldStr(InventSettlement, InventTransCurrency_RU)), new SysDaValueExpression(inventTransCurrency)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventSettlement, fieldStr(InventSettlement, ItemId)), new SysDaValueExpression(itemId)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventSettlement, fieldStr(InventSettlement, Cancelled)), new SysDaValueExpression(NoYes::No)))
            .and(new SysDaNotEqualsExpression(
                new SysDaFieldExpression(_inventSettlement, fieldStr(InventSettlement, TransRecId)), new SysDaValueExpression(0)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereClauseSettleModeNotPhysical</Name>
				<Source><![CDATA[
    private SysDaBinaryExpression buildWhereClauseSettleModeNotPhysical(InventSettlement _inventSettlement)
    {
        return this.buildWhereClauseBasic(_inventSettlement)
                .and(new SysDaNotEqualsExpression(
                    new SysDaFieldExpression(_inventSettlement, fieldStr(InventSettlement, SettleModel)), new SysDaValueExpression(InventSettleModel::PhysicalValue)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereClauseSettleModePhysical</Name>
				<Source><![CDATA[
    protected SysDaBinaryExpression buildWhereClauseSettleModePhysical(InventSettlement _inventSettlement)
    {
        return this.buildWhereClauseBasic(_inventSettlement)
                .and(new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventSettlement, fieldStr(InventSettlement, SettleModel)), new SysDaValueExpression(InventSettleModel::PhysicalValue)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildJoinPartForSettleModePhysical</Name>
				<Source><![CDATA[
    protected SysDaQueryObject buildJoinPartForSettleModePhysical(InventSettlement _inventSettlement)
    {
        InventTrans inventTrans;
        SysDaQueryObject inventTransQueryObject = new SysDaQueryObject(inventTrans);
        inventTransQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(inventTrans, fieldStr(InventTrans, RecId)), new SysDaFieldExpression(_inventSettlement, fieldStr(InventSettlement, TransRecId)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(inventTrans, fieldStr(InventTrans, StatusReceipt)), new SysDaValueExpression(StatusReceipt::None)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(inventTrans, fieldStr(InventTrans, StatusIssue)), new SysDaValueExpression(StatusIssue::Deducted))));

        return inventTransQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSettlementQueryObjectBasic</Name>
				<Source><![CDATA[
    protected SysDaQueryObject buildSettlementQueryObjectBasic()
    {
        InventSettlement sourceIventSettlement;
        
        SysDaQueryObject inventSettlementQueryObject = new SysDaQueryObject(sourceIventSettlement);
        this.addInventSettlementFields(inventSettlementQueryObject.projection());
        this.addLiteralFieldsToQueryObject(inventSettlementQueryObject.projection());
        
        return inventSettlementQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSettlementQueryObjectSettleModeNotPhysical</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildSettlementQueryObjectSettleModeNotPhysical()
    {
        SysDaQueryObject queryObj = this.buildSettlementQueryObjectBasic();
        queryObj.whereClause(this.buildWhereClauseSettleModeNotPhysical(queryObj.table()));

        return queryObj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSettlementQueryObjectSettleModePhysical</Name>
				<Source><![CDATA[
    protected SysDaQueryObject buildSettlementQueryObjectSettleModePhysical()
    {
        SysDaQueryObject queryObj = this.buildSettlementQueryObjectBasic();
        queryObj.whereClause(this.buildWhereClauseSettleModePhysical(queryObj.table()));

        queryObj.joinClause(SysDaJoinKind::ExistsJoin, this.buildJoinPartForSettleModePhysical(queryObj.table()));

        return queryObj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSettlementInsertObject</Name>
				<Source><![CDATA[
    protected SysDaInsertObject buildSettlementInsertObject()
    {
        InventSettlement destInventSettlement;
        destInventSettlement.skipDataMethods(true);

        SysDaInsertObject inventSettlementInsertObject = new SysDaInsertObject(destInventSettlement);

        this.addInventSettlementFields(inventSettlementInsertObject.fields());
        this.addLiteralFieldsToInsertObject(inventSettlementInsertObject.fields());

        return inventSettlementInsertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecords</Name>
				<Source><![CDATA[
    protected void insertRecords(SysDaQueryObject _queryObject, SysDaInsertObject _insertObject)
    {
        _insertObject.query(_queryObject);

        SysDaInsertStatement wbsInsertStatement = new SysDaInsertStatement();

        wbsInsertStatement.execute(_insertObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSettlementsSettleModeNotPhysical</Name>
				<Source><![CDATA[
    private void insertSettlementsSettleModeNotPhysical()
    {
        SysDaInsertObject insertObj = this.buildSettlementInsertObject();
        SysDaQueryObject queryObj = this.buildSettlementQueryObjectSettleModeNotPhysical();
        this.insertRecords(queryObj, insertObj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSettlementsSettleModePhysical</Name>
				<Source><![CDATA[
    protected void insertSettlementsSettleModePhysical()
    {
        SysDaInsertObject insertObj = this.buildSettlementInsertObject();
        SysDaQueryObject queryObj = this.buildSettlementQueryObjectSettleModePhysical();
        this.insertRecords(queryObj, insertObj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSettlementSettingList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build <c>InventSettlement</c> fields setting list for update object.
    /// </summary>
    /// <param name = "_inventSettlement">The <c>InventSettlement</c> table in update object.</param>
    /// <returns>The <c>SysDaSettingsList</c> object.</returns>
    protected SysDaSettingsList buildSettlementSettingList(InventSettlement _inventSettlement)
    {
        return new SysDaSettingsList()
            .add(fieldStr(InventSettlement, Cancelled), new SysDaValueExpression(NoYes::Yes))
            .add(fieldStr(InventSettlement, QtySettled), new SysDaMultiplyExpression(new SysDaFieldExpression(_inventSettlement, fieldStr(InventSettlement, QtySettled)), new SysDaValueExpression(-1)))
            .add(fieldStr(InventSettlement, PdsCWSettled), new SysDaMultiplyExpression(new SysDaFieldExpression(_inventSettlement, fieldStr(InventSettlement, PdsCWSettled)), new SysDaValueExpression(-1)))
            .add(fieldStr(InventSettlement, CostAmountSettled), new SysDaMultiplyExpression(new SysDaFieldExpression(_inventSettlement, fieldStr(InventSettlement, CostAmountSettled)), new SysDaValueExpression(-1)))
            .add(fieldStr(InventSettlement, CostAmountAdjustment), new SysDaMultiplyExpression(new SysDaFieldExpression(_inventSettlement, fieldStr(InventSettlement, CostAmountAdjustment)), new SysDaValueExpression(-1)))
            .add(fieldStr(InventSettlement, TransBeginTime), new SysDaValueExpression(InventCostUpdateGlobal::Instance().parmTransBeginTime()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettlementsDuplicated</Name>
				<Source><![CDATA[
    protected void updateSettlementsDuplicated()
    {
        InventSettlement inventSettlement;
        inventSettlement.skipDataMethods(true);

        SysDaUpdateObject updateObject = new SysDaUpdateObject(inventSettlement);

        updateObject.settingClause(this.buildSettlementSettingList(inventSettlement));

        updateObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(inventSettlement, fieldStr(InventSettlement, Voucher)), new SysDaValueExpression(inventClosing.Voucher))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(inventSettlement, fieldStr(InventSettlement, TransDate)), new SysDaValueExpression(inventClosing.TransDate)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(inventSettlement, fieldStr(InventSettlement, InventTransCurrency_RU)), new SysDaValueExpression(inventTransCurrency)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(inventSettlement, fieldStr(InventSettlement, Cancelled)), new SysDaValueExpression(NoYes::No)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(inventSettlement, fieldStr(InventSettlement, ItemId)), new SysDaValueExpression(itemId))));

        new SysDaUpdateStatement().execute(updateObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSettlementsFromCancellingTransferOrder</Name>
				<Source><![CDATA[
    private void deleteSettlementsFromCancellingTransferOrder()
    {

        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventSettlement    inventSettlement;

        inventSettlement.skipEvents(true);
        inventSettlement.skipDatabaseLog(true);
        inventSettlement.skipDataMethods(true);

        ttsbegin;
        delete_from inventSettlement
            where inventSettlement.Voucher == inventClosing.Voucher
              && inventSettlement.TransDate == inventClosing.TransDate
              && inventSettlement.Cancelled == NoYes::No             
              && inventSettlement.ItemId == itemId
        exists join inventTrans
            where inventTrans.InvoiceReturned == NoYes::Yes
              && inventSettlement.TransRecId == inventTrans.RecId
        exists join inventTransOrigin
            where inventTrans.inventTransOrigin == inventTransOrigin.RecId
             &&  InventTransOrigin.ReferenceCategory == InventTransType::TransferOrderShip;
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateSettlements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Duplicates the <c>InventSettlement</c> records and marks them as canceled.
    /// </summary>
    protected void duplicateSettlements()
    {
        // First of all, duplicate all the settlements not type physical value
        this.insertSettlementsSettleModeNotPhysical();

        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.deleteSettlementsFromCancellingTransferOrder();
        }

        // Now duplicate all the ones that are physical value and where the transaction is still not financially updated
        this.insertSettlementsSettleModePhysical();

        // Now I can update all the records that I have created and reverse the signs
        // Additionally, cancelled will be set to yes, so that this statement does not touch
        // records that have already been reversed
        this.updateSettlementsDuplicated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    protected void execute()
    {
        if (FeatureStateProvider::isFeatureEnabled(InventCostClosingCancelBundleItemsFeature::instance()) && itemIdList)
        {
            ListEnumerator itemIdListEnumerator = itemIdList.getEnumerator();
            while (itemIdListEnumerator.moveNext())
            {
                itemId = itemIdListEnumerator.current();
                this.executePerItem();
            }
        }
        else
        {
            this.executePerItem();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executePerItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Triggers all steps to cancel the inventory settlements for an item.
    /// </summary>
    /// <remarks>
    ///    The following actions will be triggered:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>Reverse the inventory adjustments.</description>
    ///       </item>
    ///       <item>
    ///          <description>Duplicate the settlements.</description>
    ///       </item>
    ///       <item>
    ///          <description>Delete the virtual transfer records (for weighted average items).</description>
    ///       </item>
    ///       <item>
    ///          <description>Delete the inventory cost transaction summary records.</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    protected void executePerItem()
    {
        setPrefix(strFmt("@SYS14077", itemId));

        // Check if I am allowed to proceed
        if (this.checkStatus())
        {
            using(AppConsistencyCheckSkipInventTransUpdateSingleton flag = AppConsistencyCheckSkipInventTransUpdateSingleton::instance())
            {
                flag.parmSkip(true);
                // First of all reset the inventory adjustments
                this.reverseInventoryAdjustments();
            }

            // Add the settlements that I need to duplicate to an insertList
            this.duplicateSettlements();
            this.markSettlementsAsCanceled();
        }

        this.writeInfoLog(LogType::Item, itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Suppresses the retrieving of the last values.
    /// </summary>
    /// <remarks>
    ///    This class must always run with the currently passed values, therefore no last values should be
    ///    retrieved from the <see cref="T:SysLastValue" />.
    /// </remarks>
    public void getLast()
    {
        // This is a RunBaseBatch derivative class. Manually restore the user's settings on the batch tab since
        // super() is not being called.
        xSysLastValue::getLast(this.batchInfo());

        // Do not get last values for this batch task
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the caption for a batch record.
    /// </summary>
    /// <param name="batch">
    ///    The batch record where the caption should be set.
    /// </param>
    public void initBatch(Batch batch)
    {
        super(batch);

        batch.Caption = strFmt("@SYS26921", itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markSettlementsAsCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks the <see cref="T:InventSettlement" /> records as canceled.
    /// </summary>
    /// <remarks>
    ///       Only the following records should be marked:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>Settlements not from the type physical value.</description>
    ///       </item>
    ///       <item>
    ///          <description>Physical value settlements where the transaction to which the settlements belongs is
    ///          still financially open.</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    protected void markSettlementsAsCanceled()
    {
        InventSettlement        inventSettlement;
        InventTrans             inventTrans;

        // Now I need to mark the records I have duplicated as cancelled
        update_recordset inventSettlement
            setting Cancelled = NoYes::Yes
            where inventSettlement.Voucher          == cancelClosing.Voucher
               && inventSettlement.TransDate        == cancelClosing.TransDate
               && inventSettlement.ItemId           == itemId
               && inventSettlement.Cancelled        == NoYes::No
               && inventSettlement.TransRecId       != 0
               && inventSettlement.SettleModel      != InventSettleModel::PhysicalValue
               && inventSettlement.InventTransCurrency_RU == inventTransCurrency;

        update_recordset inventSettlement
            setting Cancelled = NoYes::Yes
            where inventSettlement.Voucher          == cancelClosing.Voucher
                   && inventSettlement.TransDate    == cancelClosing.TransDate
                   && inventSettlement.ItemId       == itemId
                   && inventSettlement.Cancelled    == NoYes::No
                   && inventSettlement.TransRecId   != 0
                   && inventSettlement.SettleModel  == InventSettleModel::PhysicalValue
                   && inventSettlement.InventTransCurrency_RU == inventTransCurrency
                   exists join inventTrans
                where inventTrans.RecId             == inventSettlement.TransRecId   &&
                      inventTrans.StatusReceipt     == StatusReceipt::None &&
                      inventTrans.StatusIssue       == StatusIssue::Deducted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemIdList</Name>
				<Source><![CDATA[
    public List parmItemIdList(List _itemIdList = itemIdList)
    {
        itemIdList = _itemIdList;
        return itemIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseInventoryAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses the inventory adjustments on the <c>InventTrans</c> records that are made during an
    /// inventory closing.
    /// </summary>
    protected void reverseInventoryAdjustments()
    {
        InventTrans         inventTrans;
        InventSettlement    inventSettlement;
        InventTransOrigin   inventTransOrigin;

        Map inventTransMap = new Map(Types::Int64, Types::Record);
        Set inventTransFromTransferOrderCancellationSet = new Set(Types::Int64);

        // First of all, select all the inventTrans records that are necessary
        while select forupdate * from inventTrans
            where inventTrans.ItemId == itemId
            join TableId from inventSettlement
            where inventSettlement.TransRecId   == inventTrans.RecId
               && inventSettlement.ItemId       == itemId
               && inventSettlement.Voucher      == cancelClosing.Voucher
               && inventSettlement.TransDate    == cancelClosing.TransDate
               && inventSettlement.InventTransCurrency_RU == inventTransCurrency
               && inventSettlement.Cancelled    == NoYes::No
               && inventSettlement.TransRecId   != 0
               && (inventSettlement.SettleModel != InventSettleModel::PhysicalValue
               || (inventSettlement.SettleModel == InventSettleModel::PhysicalValue
               && inventTrans.StatusIssue       == StatusIssue::Deducted 
               && inventTrans.StatusReceipt     == StatusReceipt::None))

        {
            inventTransMap.insert(inventTrans.RecId, inventTrans);

            boolean isInventTransFromTransferOrderCancellation = !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                                                              && inventTrans.InvoiceReturned
                                                              && inventTrans.inventTransorigin().referenceCategory == InventTransType::TransferOrderShip;            
            if (isInventTransFromTransferOrderCancellation)
            {
                inventTransFromTransferOrderCancellationSet.add(inventTrans.RecId);
            }           
        }

        select sum(PdsCWSettled), sum(QtySettled), sum(CostAmountSettled), sum(CostAmountAdjustment)
            from inventSettlement
            group by TransRecId
            where inventSettlement.ItemId      == itemId
                && inventSettlement.Voucher     == cancelClosing.Voucher
                && inventSettlement.TransDate   == cancelClosing.TransDate
                && inventSettlement.InventTransCurrency_RU == inventTransCurrency
                && inventSettlement.Cancelled   == NoYes::No
                && inventSettlement.TransRecId  != 0
                && inventSettlement.SettleModel != InventSettleModel::PhysicalValue;   
  
        while (inventSettlement)
        {
            if (!inventTransFromTransferOrderCancellationSet.in(inventSettlement.TransRecId))
            {
                if (inventTransMap.exists(inventSettlement.TransRecId))
                {
                    this.updateFinancialCostAmount(inventSettlement, inventTransMap.lookup(inventSettlement.TransRecId));
                }
                else
                {
                    this.updateFinancialCostAmount(inventSettlement);
                }
            }            

            next inventSettlement;
        }

        while select forceplaceholders sum(CostAmountAdjustment) from inventSettlement
            group by TransRecId
            where inventSettlement.ItemId      == itemId
               && inventSettlement.Voucher     == cancelClosing.Voucher
               && inventSettlement.TransDate   == cancelClosing.TransDate
               && inventSettlement.InventTransCurrency_RU == inventTransCurrency
               && inventSettlement.Cancelled   == NoYes::No
               && inventSettlement.TransRecId  != 0
               && inventSettlement.SettleModel == InventSettleModel::PhysicalValue
            exists join inventTrans
                where inventTrans.RecId             == inventSettlement.TransRecId
                   && inventTrans.StatusReceipt     == StatusReceipt::None
                   && inventTrans.StatusIssue       == StatusIssue::Deducted
        {
            if (inventTransMap.exists(inventSettlement.TransRecId))
            {
                this.updatePhysicalCostAmount(inventSettlement, inventTransMap.lookup(inventSettlement.TransRecId));
            }
            else
            {
                this.updatePhysicalCostAmount(inventSettlement);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (itemIdList != null)
        {
            packedItemIdList = itemIdList.pack();
        }
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container  _packedClass)
    {
        Integer version = conPeek(_packedClass, 1);
        container base;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = _packedClass;
                if (packedItemIdList)
                {
                    itemIdList = List::create(packedItemIdList);
                }
                return super(base);
            
            case #Version2:
                [version, #CurrentListV2, base] = _packedClass;
                return super(base);

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFinancialCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subtracts the adjustment from the <c>costAmountAdjustment</c> field in the <c>InventTrans</c>
    /// record.
    /// </summary>
    /// <param name="_inventSettlement">
    /// The <c>InventSettlement</c> record that has to be offset.
    /// </param>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> record to which the settlement belongs; optional.
    /// </param>
    private void updateFinancialCostAmount(InventSettlement _inventSettlement,
                                           InventTrans      _inventTrans = InventTrans::findRecId(_inventSettlement.TransRecId,true))
    {
        _inventTrans.PdsCWSettled   -= _inventSettlement.PdsCWSettled;

        if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
        {
            _inventTrans.QtySettled                    -= _inventSettlement.QtySettled;
            _inventTrans.CostAmountSettled             -= _inventSettlement.CostAmountSettled;
            _inventTrans.CostAmountAdjustment          -= _inventSettlement.CostAmountAdjustment;
            if (_inventTrans.Qty > 0)
            {
                _inventTrans.CostAmountStd              = _inventTrans.costValue();
            }
        }
        else
        {
            _inventTrans.QtySettledSecCur_RU           -= _inventSettlement.QtySettled;
            _inventTrans.CostAmountSettledSecCur_RU    -= _inventSettlement.CostAmountSettled;
            _inventTrans.CostAmountSecCurAdjustment_RU -= _inventSettlement.CostAmountAdjustment;
            if (_inventTrans.Qty > 0)
            {
                _inventTrans.CostAmountStdSecCur_RU     = _inventTrans.costValueSecCur_RU();
            }
        }

        _inventTrans.skipTTSCheck(true);
        _inventTrans.update();

        if (inventClosing.AdjustmentType == InventAdjustmentType::InventOnHand || inventClosing.AdjustmentType == InventAdjustmentType::Transaction) // only on-hand adjustments or transaction adjustments adjusts the receipt cost price
        {
            if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
            {
                _inventTrans.inventTable().updateLastCostPrice(_inventTrans.costValue(), _inventTrans.Qty, _inventTrans.DateFinancial, _inventTrans.inventDim());
            }
            else
            {
                _inventTrans.inventTable().updateLastCostPriceSecCur_RU(_inventTrans.costValueSecCur_RU(), _inventTrans.Qty, _inventTrans.DateFinancial, _inventTrans.inventDim());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePhysicalCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Subtracts the adjustment from the costAmountPhysical field in the <see cref="T:InventTrans" />
    ///    record.
    /// </summary>
    /// <param name="_inventSettlement">
    ///    The <see cref="T:InventSettlement" /> record that has to be offset.
    /// </param>
    /// <param name="_inventTrans">
    ///    The <see cref="T:InventTrans" /> record to which the settlement belongs.
    /// </param>
    protected void updatePhysicalCostAmount(InventSettlement _inventSettlement,
                                          InventTrans      _inventTrans = InventTrans::findRecId(_inventSettlement.TransRecId,true))
    {
        if (_inventTrans.StatusIssue == StatusIssue::Deducted)
        {
            if (inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
            {
                _inventTrans.CostAmountPhysical          -= _inventSettlement.CostAmountAdjustment;
            }
            else
            {
                _inventTrans.CostAmountSecCurPhysical_RU -= _inventSettlement.CostAmountAdjustment;
            }

            _inventTrans.skipTTSCheck(true);
            _inventTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public InventCostClosingCancel_WorkInvent construct()
    {
        return new InventCostClosingCancel_WorkInvent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public ClassDescription description()
    {
        return "@SYS117102";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>