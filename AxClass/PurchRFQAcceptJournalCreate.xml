<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQAcceptJournalCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQAcceptJournalCreate extends FormletterJournalCreate
{
    VendRFQJour                 vendRFQJour;
    VendRFQTrans                vendRFQTrans;

    PurchRFQCaseTable           purchRFQCaseTable;
    PurchRFQCaseLine            purchRFQCaseLine;
    PurchRFQParmTable           purchRFQParmTable;
    PurchRFQParmUpdate          purchRFQParmUpdate;
    PurchRFQLine                purchRFQLine;

    PurchRFQTable               purchRFQTable;

    PurchRFQTotals              purchRFQTotals;
    boolean                     printReplySheet;
    boolean                     printPriceAmount;
    boolean                     unsealPurchRFQ;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToInventReportDimHistory</Name>
				<Source><![CDATA[
    protected void addToInventReportDimHistory(Common _journalline)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateNumberSequence</Name>
				<Source><![CDATA[
    protected NumberSeq allocateNumberSequence()
    {
        RefRecId            internalRFQId;
        NumberSeq           tmpNumberSeq;
        NumberSequenceDatatype  numberDatatype = NumberSequenceDatatype::find(PurchParameters::numRefPurchInternalRFQId().NumberSequenceDatatype);
        RefRecId                scopeId = NumberSeqScopeFactory::createDefaultScope().getId();

        if (purchRFQTable.NumberSequenceGroup)
        {
            internalRFQId = NumberSequenceGroupRef::findNaturalKey(numberDatatype.RecId, scopeId, purchRFQTable.NumberSequenceGroup).NumberSequenceId;

            if (internalRFQId)
            {
                tmpNumberSeq = NumberSeq::newGetNumFromId(internalRFQId);
            }
        }
        else
        {
            if (PurchParameters::numRefPurchInternalRFQId().NumberSequenceId)
            {
                tmpNumberSeq = NumberSeq::newGetNum(PurchParameters::numRefPurchInternalRFQId());
            }
        }
        return tmpNumberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLine</Name>
				<Source><![CDATA[
    protected void  calcLine(PurchRFQLine         _purchRFQLine,
                             PurchRFQParmLine     _purchRFQParmLine)
    {
        updateNow           = _purchRFQParmLine.PurchQty;
        updateNowInvent     = _purchRFQParmLine.QtyOrdered;
        lineValue           = _purchRFQParmLine.lineAmountExclTax();
        lineValueInclTax    = _purchRFQParmLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDiscardLine</Name>
				<Source><![CDATA[
    protected boolean  checkDiscardLine(Common _purchRFQParmLine)
    {
        PurchRFQParmLine purchRFQParmLine = _purchRFQParmLine as PurchRFQParmLine;
        if (purchRFQParmLine.PurchQty == 0)
            return true;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLine</Name>
				<Source><![CDATA[
    protected boolean checkLine()
    {
        PurchReqLine        purchReqLine;
        boolean             ok = true;

        if (purchRFQTable.rfqType == PurchRFQType::PurchReq)
        {
            purchReqLine = purchRFQLine.purchRFQCaseLine().purchReqLine();
            if (purchReqLine.RequisitionStatus != PurchReqRequisitionStatus::InReview)
            {
                ok = checkFailed(strfmt("@SYS112529",purchReqLine.purchReqId()));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the journal header when the sales order, the purchase order, or the request for quote is
    /// updated.
    /// </summary>
    protected void createJournalHeader()
    {
        vendRFQJour.initFromPurchRFQTotals(purchRFQTotals);
        vendRFQJour.PrintPriceAmount = printPriceAmount;
        vendRFQJour.PrintReplySheet  = printReplySheet;
        vendRFQJour.insert();

        journalTmpTaxWorkTrans.copyFromTax(
            this.parmTax(),
            vendRFQJour.RecId,
            vendRFQJour.TableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    protected void createJournalLine(Common _purchRFQParmLine)
    {
        PurchRFQParmLine purchRFQParmLine = _purchRFQParmLine as PurchRFQParmLine;
        PurchRFQReplyLine   purchRFQReplyLine;

        purchRFQLine = this.getPurchRFQLine(purchRFQParmLine,true);
        purchRFQReplyLine = PurchRFQReplyLine::findRFQLine(purchRFQLine.RecId);

        if (!this.checkLine())
        {
            throw error("@SYS21533");
        }

        this.calcLine(purchRFQLine, purchRFQParmLine);

        vendRFQTrans.clear();
        vendRFQTrans.initValue();
        vendRFQTrans.initFromVendRFQJour(vendRFQJour);
        vendRFQTrans.initFromPurchRFQLine(purchRFQLine);
        vendRFQTrans.initFromPurchRFQReplyLine(purchRFQReplyLine);
        if (!vendRFQTrans.ReasonRef)
        {
            vendRFQTrans.ReasonRef = vendRFQJour.ReasonRef;
        }
        vendRFQTrans.PurchQty       = updateNow;
        vendRFQTrans.QtyOrdered     = updateNowInvent;
        vendRFQTrans.LineAmount     = lineValue;
        vendRFQTrans.LineAmountTax  = lineValueInclTax - lineValue;
        vendRFQTrans.Status         = this.purchRFQStatus();

        this.insertJournalLine(vendRFQTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLink</Name>
				<Source><![CDATA[
    protected void createJournalLink(Common common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdParmLine_OrigOrderId</Name>
				<Source><![CDATA[
    protected fieldId fieldIdParmLine_OrigOrderId()
    {
        return fieldnum(PurchRFQParmLine, rfqId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdParmTable_OrderId</Name>
				<Source><![CDATA[
    protected fieldId fieldIdParmTable_OrderId()
    {
        return fieldnum(PurchRFQParmTable, rfqId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterType</Name>
				<Source><![CDATA[
    protected FormletterType formletterType()
    {
        return FormletterType::PurchRFQ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current journal header.
    /// </summary>
    /// <returns>
    /// A journal header record.
    /// </returns>
    public Common getJournal()
    {
        return vendRFQJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchRFQCaseLine</Name>
				<Source><![CDATA[
    protected PurchRFQCaseLine getPurchRFQCaseLine(PurchRFQParmLine    _purchRFQParmLine,
                                                   boolean             _forupdate = false)
    {
        PurchRFQCaseLine  purchRFQCaseLineLocal;

        purchRFQCaseLineLocal.selectForUpdate(_forupdate);

        select firstonly purchRFQCaseLineLocal
            where purchRFQCaseLineLocal.RecId == _purchRFQParmLine.rfqLineRecId;

        return purchRFQCaseLineLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchRFQLine</Name>
				<Source><![CDATA[
    protected PurchRFQLine getPurchRFQLine(PurchRFQParmLine    _purchRFQParmLine,
                                           boolean             _forupdate = false)
    {
        PurchRFQLine  purchRFQLineLocal;

        purchRFQLineLocal.selectForUpdate(_forupdate);

        select firstonly purchRFQLineLocal
            where purchRFQLineLocal.RecId == _purchRFQParmLine.rfqLineRecId;

        return purchRFQLineLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal header record.
    /// </summary>
    protected void initJournalHeader()
    {
        PurchRFQCaseTable   rfqCaseTable;
        PurchRFQReplyTable  purchRFQReplyTable;
        this.getJournalNumber();
        if (!journalNumber)
            throw error("@SYS71652");

        purchRFQTable      = PurchRFQTable::find(purchRFQParmTable.rfqId);

        vendRFQJour.clear();
        vendRFQJour.initValue();

        vendRFQJour.ParmId              = purchRFQParmUpdate.ParmId;
        vendRFQJour.rfqId               = purchRFQParmTable.rfqId;
        vendRFQJour.InternalRFQId       = journalNumber;
        vendRFQJour.rfqDate             = this.updateDate();
        vendRFQJour.rfqUpdateType       = this.purchRFQUpdateType();
        vendRFQJour.Status              = this.purchRFQStatus();
        vendRFQJour.initFromPurchRFQTable(purchRFQTable);

        purchRFQReplyTable = purchRFQTable.purchRFQReplyTable();
        if (purchRFQReplyTable && vendRFQJour.Status != PurchRFQStatus::Sent)
        {
            vendRFQJour.initFromPurchRFQReplyTable(purchRFQReplyTable);

            if (unsealPurchRFQ && PurchRFQUnsealByUserFlight::instance().isEnabled())
            {
                vendRFQJour.RFQReplySubmittedBy = purchRFQTable.ReplySubmittedBy;
                vendRFQJour.RFQReplyUnsealedBy = DirPersonUser::current().PersonParty;
            }
        }
        if (purchRFQCaseTable)
        {
            vendRFQJour.initFromPurchRFQCaseTable(purchRFQCaseTable);
        }
        else
        {
            rfqCaseTable = PurchRFQCaseTable::find(purchRFQTable.rfqCaseId);
            vendRFQJour.initFromPurchRFQCaseTable(rfqCaseTable);
        }

        if (purchRFQParmUpdate.ReasonId)
        {
            vendRFQJour.editReasonCode(true,purchRFQParmUpdate.ReasonId);
            vendRFQJour.editReasonComment(true,purchRFQParmUpdate.ReasonComment);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the source table record.
    /// </summary>
    protected void initSourceTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the total calculation.
    /// </summary>
    protected void initTotals()
    {
        purchRFQTotals = PurchRFQTotals::construct(purchRFQParmTable,
                                                   purchRFQParmUpdate.SpecQty);
        purchRFQTotals.calc();
        this.parmTax(purchRFQTotals.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the journal line table.
    /// </summary>
    /// <returns>
    /// The table ID for the journal line table.
    /// </returns>
    protected tableId journalLineTableId()
    {
        return tablenum(VendRFQTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linksTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the journal link table.
    /// </summary>
    /// <returns>
    /// The table ID for the journal link table.
    /// </returns>
    protected tableId linksTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReference</Name>
				<Source><![CDATA[
    protected NumberSequenceReference numberSequenceReference()
    {
        return PurchParameters::numRefPurchInternalRFQId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>NumberSequenceReference</c> object for the journal number.
    /// </summary>
    /// <returns>
    /// A <c>NumberSequenceReference</c> object.
    /// </returns>
    protected NumberSequenceReference numberSequenceReferenceNum()
    {
        return PurchParameters::numRefPurchInternalRFQId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = purchRFQParmTable)
    {
        purchRFQParmTable = _parmTable as PurchRFQParmTable;

        return purchRFQParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    public Common parmParmUpdate(Common _parmUpdate = purchRFQParmUpdate)
    {
        purchRFQParmUpdate = _parmUpdate as PurchRFQParmUpdate;

        return purchRFQParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the print management document type.
    /// </summary>
    /// <returns>
    ///    The print management document type to send request for quotes.
    /// </returns>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::PurchRFQAccept;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the journal is a pro forma journal.
    /// </summary>
    /// <returns>
    /// true if the journal is a pro forma journal; otherwise, false
    /// </returns>
    protected boolean proforma()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQStatus</Name>
				<Source><![CDATA[
    protected PurchRFQStatus purchRFQStatus()
    {
        return PurchRFQStatus::Accepted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQUpdateType</Name>
				<Source><![CDATA[
    protected PurchRFQUpdateType purchRFQUpdateType()
    {
        return PurchRFQUpdateType::Accepted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListParmLine</Name>
				<Source><![CDATA[
    protected RecordSortedList recordListParmLine()
    {
        return purchRFQTotals.recordSortedListLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source table for the journal.
    /// </summary>
    /// <returns>
    /// A record.
    /// </returns>
    protected Common sourceTable()
    {
        Common ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total object.
    /// </summary>
    /// <returns>
    /// A total object.
    /// </returns>
    protected Object totals()
    {
        return purchRFQTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the posting parameter line table.
    /// </summary>
    /// <returns>
    /// A record.
    /// </returns>
    protected Common typeParmLine()
    {
        PurchRFQParmLine   purchRFQParmLine;
        return purchRFQParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    protected TransDate updateDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchRFQAcceptJournalCreate construct()
    {
        return new PurchRFQAcceptJournalCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endCreate</Name>
				<Source><![CDATA[
    protected void endCreate()
    {
        super();

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.transitDocument();
        }

        //<GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            TaxBusinessService::transferTaxDocument(purchRFQParmTable, vendRFQJour);
        }
        //</GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(purchRFQParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transit documents
    /// </summary>
    private void transitDocument()
    {
        TransitDocumentManager_IN   transitDocManager;
        VendRFQTrans                vendRFQTransTransit;
        PurchRFQParmLine            purchRFQParmLineTransit;
        
        transitDocManager = TransitDocumentManager_IN::newManager();
        transitDocManager.transit(purchRFQParmTable, vendRFQJour);

        while select purchRFQParmLineTransit
                where purchRFQParmLineTransit.TableRefId == purchRFQParmTable.TableRefId
                join vendRFQTransTransit
                    where vendRFQTransTransit.RFQId           == vendRFQJour.RFQId
                        && vendRFQTransTransit.RFQDate        == vendRFQJour.RFQDate
                        && vendRFQTransTransit.InternalRFQId  == vendRFQJour.InternalRFQId
                        && vendRFQTransTransit.RFQId          == purchRFQParmLineTransit.RFQId
                        && vendRFQTransTransit.LineNum        == purchRFQParmLineTransit.LineNum
                        && vendRFQTransTransit.InventTransId  == purchRFQParmLineTransit.InventTransId
        {
            transitDocManager.transit(purchRFQParmLineTransit, vendRFQTransTransit, vendRFQJour);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>