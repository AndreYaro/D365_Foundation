<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailConnSCMonPurgeMessage</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Clears all the messages which are older than the specified date.
/// </summary>
class RetailConnSCMonPurgeMessage extends RunBaseBatch implements BatchRetryable
{
    #define.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostInit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes and sets the caption to the dialog window.
    /// </summary>
    /// <param name="dialog">
    /// The dialog instance that is to be intialized.
    /// </param>
    /// <returns>
    /// true, if the dialog is run successfully.
    /// </returns>
    protected DialogRunbase dialogPostInit(DialogRunbase dialog)
    {
        DialogRunbase ret;
        ;

        dialog.caption("@RET704");
        ret = super(dialog);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all the messages that are older than a specified date or cancelled by the user.
    /// </summary>
    public void run()
    {
        RetailConnSCMonIncomingMessages incomingMessages;
        RetailConnSCMonOutgoingMessages outgoingMessages;

        RetailConnParameters parameter;
        utcdatetime now, oldDate;

        parameter = RetailConnParameters::find();

        if (parameter.DaysMessagesExist)
        {
            now = DateTimeUtil::getSystemDateTime();
            oldDate = DateTimeUtil::addDays(now, -parameter.DaysMessagesExist);

            ttsbegin;

            // condition: older than specified date
            //   cancelled by user OR succeeded
            delete_from incomingMessages
                where incomingMessages.FinishedDateTime < oldDate
                   && (
                          incomingMessages.Status == RetailConnSCPackageStatusEnum::Processed
                       || incomingMessages.CancelledByUser == true);

            delete_from outgoingMessages
                where outgoingMessages.FinishedDateTime < oldDate
                   && (
                          outgoingMessages.Status == RetailConnSCPackageStatusEnum::Processed
                       || outgoingMessages.Status == RetailConnSCPackageStatusEnum::NoToSend
                       || outgoingMessages.Status == RetailConnSCPackageStatusEnum::Forwarded
                       || outgoingMessages.CancelledByUser == true);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        RetailConnSCMonPurgeMessage scMonPurgeMessage;

        scMonPurgeMessage = new RetailConnSCMonPurgeMessage();

        if (scMonPurgeMessage.prompt())
            scMonPurgeMessage.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailConnSCMonPurgeMessage</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailConnSCMonPurgeMessage</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>