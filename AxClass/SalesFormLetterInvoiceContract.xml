<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormLetterInvoiceContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesFormLetterInvoiceContract</c> class is the data contract class for the
/// <c>FormletterService</c> service when you post sales order invoices.
/// </summary>
[DataContractAttribute]
[DocumentStatusFactoryAttribute(DocumentStatus::Invoice)]
class SalesFormLetterInvoiceContract
extends SalesFormLetterContract
{
    NoYes           backorder;
    NoYes           queryCriteria;
    NoYes           editing;
    NoYes           allowLineLevelTaxAdjustments;

    //PrintJobSettings
    str             printerSettingsBillOfExchange;

    //List of parameters common for SalesFormLetter_* classes that needs to be packed
    //for the correct class transition between client and server.
    //If you need some additional parameters on the client, add them to this list.
    #define.CurrentVersion(2)
    #LOCALMACRO.ParmListSalesInvoice
        backorder,
        queryCriteria,
        editing,
        printerSettingsBillOfExchange
        // <GEEU>
        ,ltDocNumberingCode
        // </GEEU>
    #ENDMACRO
    #LOCALMACRO.ParmListSalesInvoiceV2
        backorder,
        queryCriteria,
        editing,
        printerSettingsBillOfExchange,
        // <GEEU>
        ltDocNumberingCode,
        // </GEEU>
        allowLineLevelTaxAdjustments
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCanUseParallelism</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the selected records can be posted using batch parallelism.
    /// </summary>
    /// <returns>
    /// true if the selected records can be posted using batch parallelism; otherwise, false.
    /// </returns>
    /// <remarks>
    /// When the Italian sales tax book section functionality is enabled, multithreading is not possible,
    /// as invoices are not able to be posted in parallel.
    /// </remarks>
    public boolean getCanUseParallelism()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus getDocumentStatus()
    {
        return DocumentStatus::Invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    public void initialize()
    {
        this.parmCreditRemaining(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrinting</Name>
				<Source><![CDATA[
    public boolean isPrinting()
    {
        boolean isPrinting = super();

        isPrinting = isPrinting
            || (this.parmPrintCODLabel() == NoYes::Yes)
            || (this.parmPrintEntryCertificate_W() == NoYes::Yes)
            || (this.parmPrintBillOfLading_RU() == NoYes::Yes)
            || (this.parmPrintInventBaileeReport_RU() == NoYes::Yes);

        return isPrinting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        documentStatus = this.getDocumentStatus();

        return [#CurrentVersion, #ParmListCommon, #ParmListSalesInvoiceV2] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEditing</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmEditing(NoYes _editing = editing)
    {
        editing = _editing;
        return editing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLtDocNumberingCode</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public LtDocNumberingCode parmLtDocNumberingCode(LtDocNumberingCode _ltDocNumberingCode = ltDocNumberingCode)
    {
        ltDocNumberingCode = _ltDocNumberingCode;
        return ltDocNumberingCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowLineLevelTaxAdjustments</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmAllowLineLevelTaxAdjustments(NoYes _allowLineLevelTaxAdjustments = allowLineLevelTaxAdjustments)
    {
        allowLineLevelTaxAdjustments = _allowLineLevelTaxAdjustments;
        return allowLineLevelTaxAdjustments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterSettingsBillOfExchange</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public str parmPrinterSettingsBillOfExchange(str _printerSettingsBillOfExchange = printerSettingsBillOfExchange)
    {
        printerSettingsBillOfExchange = _printerSettingsBillOfExchange;
        return printerSettingsBillOfExchange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryCriteria</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmQueryCriteria(NoYes _queryCriteria = queryCriteria)
    {
        queryCriteria = _queryCriteria;
        return queryCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer         version = conPeek(_packedClass,1);
        container       packedBase;

        switch (version)
        {
            case #CurrentVersion:
                [version, #ParmListCommon, #ParmListSalesInvoiceV2, packedBase] = _packedClass;
                return super(packedBase);
            case 1:
                [version, #ParmListCommon, #ParmListSalesInvoice, packedBase] = _packedClass;
                return super(packedBase);
            default :
                return super(_packedClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [SysObsolete('Use SalesFormLetterContract::construct() instead.', false, 31\05\2017)]
    static SalesFormLetterInvoiceContract construct()
    {
        return SalesFormLetterContract::construct(DocumentStatus::Invoice);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>