<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetNodeCalcPurchUnitBased</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CostSheetNodeCalcPurchUnitBased extends CostSheetNodeCalculationUnitBased
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowedSubtypeSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a <c>Set</c> object that contains the calculation subtypes that are allowed for this class.
    /// </summary>
    /// <returns>
    ///    The set containing <c>CostCalculationUnitBasedSubtype</c> enumeration elements.
    /// </returns>
    Set allowedSubtypeSet()
    {
        Set set = new Set(Types::Enum);
        set.add(CostCalculationUnitBasedSubtype::Quantity);
        set.add(CostCalculationUnitBasedSubtype::Volume);
        set.add(CostCalculationUnitBasedSubtype::Weight);

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLowestLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the concrete amounts based on input data and costing sheet structure for leaf nodes.
    /// </summary>
    /// <param name="_costSheet">
    ///    The costing sheet object.
    /// </param>
    /// <param name="_costCalcTransData">
    ///    The <c>CostCalcTransData</c> object that has input data.
    /// </param>
    public void calcLowestLevel(
        CostSheet           _costSheet,
        CostCalcTransData   _costCalcTransData)  // ignore _costCalctTransData
    {
        // Consumption in inventory units

        // Consumption in the units the calculation is defined in
        Qty                         consumptionVariableCalc;
        Qty                         consumptionConstantCalc;

        UnitOfMeasureSymbol         calculationUnitId;    // The unit id for the base of the contribution calculation

        super(_costSheet, _costCalcTransData);

        CostCalcTransData basisCostCalcTransData = this.collectBasisCostCalcTransData(_costSheet);
        if (basisCostCalcTransData == null)
        {
            calculated = false;
            return;
        }

        // all basis nodes are calculated, we can proceed

        CostTmpCalcTrans costTmpCalcTrans = basisCostCalcTransData.getCostTmpCalcTrans();

        select firstonly costTmpCalcTrans;
        // If basis contains records with amounts
        if (costTmpCalcTrans)
        {
            select minof(Level) from costTmpCalcTrans;
            if (costTmpCalcTrans.Level < this.getCostCalcTransData().getLevel())
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            CostSheetCalculationFactor costSheetCalculationFactor = this.selectCostSheetCalculationFactor();
            if (costSheetCalculationFactor)
            {
                while select sum(ConsumptionVariable), sum(ConsumptionConstant), UnitId, Resource from costTmpCalcTrans
                    group by CostGroupId, UnitId, Resource, InventDimId
                        where costTmpCalcTrans.Level == this.getCostCalcTransData().getLevel() // don't consider sublevel transactions for this calculation
                           && costTmpCalcTrans.TransType == ItemCalcType::Item
                {
                    InventTable inventItem = InventTable::find(costTmpCalcTrans.Resource);
                    UnitOfMeasureSymbol inventoryUnitId = InventTableModule::find(inventItem.ItemId, ModuleInventPurchSales::Invent).UnitId;

                    EcoResProductUnitConverter ecoResConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(inventItem.ItemId,
                                                                                                                                   costTmpCalcTrans.InventDimId,
                                                                                                                                   costTmpCalcTrans.UnitId,
                                                                                                                                   inventoryUnitId,
                                                                                                                                   NoYes::No);

                    Qty consumptionVariableQty = ecoResConverter.convertValue(costTmpCalcTrans.ConsumptionVariable);
                    Qty consumptionConstantQty = ecoResConverter.convertValue(costTmpCalcTrans.ConsumptionConstant);

                    switch (this.getSubtype())
                    {
                        case CostCalculationUnitBasedSubtype::Quantity:
                            calculationUnitId = inventoryUnitId;
                            consumptionVariableCalc = consumptionVariableQty;
                            consumptionConstantCalc = consumptionConstantQty;
                            break;
                        case CostCalculationUnitBasedSubtype::Weight:
                            calculationUnitId = UnitOfMeasure::find(
                                UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(
                                    UnitOfMeasureClass::Mass).UnitOfMeasure).Symbol;
                            consumptionVariableCalc = consumptionVariableQty * inventItem.NetWeight;
                            consumptionConstantCalc = consumptionConstantQty * inventItem.NetWeight;
                            break;
                        case CostCalculationUnitBasedSubtype::Volume:
                            calculationUnitId = UnitOfMeasure::find(
                                UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(
                                    UnitOfMeasureClass::LiquidVolume).UnitOfMeasure).Symbol;
                            consumptionVariableCalc = consumptionVariableQty * inventItem.UnitVolume;
                            consumptionConstantCalc = consumptionConstantQty * inventItem.UnitVolume;
                            break;
                        default:
                            [calculationUnitId, consumptionVariableCalc, consumptionConstantCalc] = this.initCalculationUnitIdConsumptionVariableAndConstant(this.getSubtype(), costTmpCalcTrans);
                            break;
                    }

                    if (this.getCostCalcTransData().getBOMCalcItem() != null)
                    {
                        this.bomCalcCheckIndirectCost().checkNoConsumption(costTmpCalcTrans.Resource, this.getCode(), consumptionVariableCalc + consumptionConstantCalc);
                    }

                    this.getCostCalcTransData().addCalcTrans(parentCostGroupId,
                                                    calculationUnitId,
                                                    ItemCalcType::IndirectPurchUnitBased,
                                                    this.getCode(),
                                                    consumptionVariableCalc * costSheetCalculationFactor.Amount,
                                                    consumptionConstantCalc * costSheetCalculationFactor.Amount,
                                                    consumptionVariableCalc,
                                                    consumptionConstantCalc,
                                                    this.getCostCalcTransData().getLevel(),
                                                    '');
                }
            }
        }

        calculated = true;

        this.updateCostGroupImpactSet(_costSheet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCalculationUnitIdConsumptionVariableAndConstant</Name>
				<Source><![CDATA[
    [Replaceable]
    protected container initCalculationUnitIdConsumptionVariableAndConstant(CostCalculationUnitBasedSubtype _costCalculationUnitBasedSubtype, CostTmpCalcTrans _costTmpCalcTrans)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the resource index of the image that will represent this node in the editor.
    /// </summary>
    /// <returns>
    ///    The resource ID.
    /// </returns>
    public int getImage()
    {
        return #imageCalculationUnitBased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getType</Name>
				<Source><![CDATA[
    public CostSheetNodeType getType()
    {
        return CostSheetNodeType::CalculationPurchUnitBased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes a new instance of the <c>CostSheetNodeCalcPurchUnitBased</c> class.
    /// </summary>
    /// <param name="_costSheetNodeTable">
    ///     The record in the <c>CostSheetNodeTable</c> table that will be used to initialize this object.
    /// </param>
    /// <param name="_parentNodeId">
    ///     The ID of the parent node.
    /// </param>
    /// <param name="_modeStrategy">
    ///     The <c>CostSheetModeStrategy</c> object that controls the creation of the costing sheet.
    /// </param>
    /// <param name="_parentCostGroupId">
    ///     The ID of the <c>CostSheetNodeGroup</c> object that the calculation node belongs to.
    /// </param>
    protected void new(
        CostSheetNodeTable      _costSheetNodeTable,
        CostSheetNodeId         _parentNodeId,
        CostSheetModeStrategy   _modeStrategy,
        CostGroupId             _parentCostGroupId)
    {
        super(_costSheetNodeTable, _parentNodeId, _modeStrategy, _parentCostGroupId);

        if (_modeStrategy.mustLoadCalculationBasisAndFactors())
        {
            CostSheetCalculationBasis costSheetCalculationBasis = _modeStrategy.getAbsorptionBasisCursor();

            while select costSheetCalculationBasis
                where costSheetCalculationBasis.SheetId == sheetId
                   && costSheetCalculationBasis.NodeId == nodeId
            {
                basisList.addEnd(costSheetCalculationBasis);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toBOMCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a <c>BOMCalcTrans</c> record based on this costing sheet node.
    /// </summary>
    /// <param name="_costProfitSet">
    ///     An element of the <c>CostProfitSet</c> enumeration that identifies the profit settings.
    /// </param>
    /// <param name="_transDate">
    ///     The date of the transaction.
    /// </param>
    /// <returns>
    ///     The <c>BOMCalcTrans</c> record.
    /// </returns>
    public BOMCalcTrans toBOMCalcTrans(CostProfitSet _costProfitSet, TransDate _transDate)
    {
        BOMCalcTrans bomCalcTrans = super(_costProfitSet, _transDate);

        bomCalcTrans.CalcType = ItemCalcType::IndirectPurchUnitBased;

        return bomCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toProdCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a <c>ProdCalcTrans</c> record based on this costing sheet node.
    /// </summary>
    /// <param name="_prodCalcMode">
    ///     An element of the <c>CostSheetProdCalcMode</c> enumeration that identifies whether
    ///     the calculation is made for estimation or actual costing.
    /// </param>
    /// <param name="_costProfitSet">
    ///     An element of the <c>CostProfitSet</c> enumeration that identifies the profit settings.
    /// </param>
    /// <param name="_transDate">
    ///     The date of the transaction.
    /// </param>
    /// <returns>
    ///     The <c>ProdCalcTrans</c> record.
    /// </returns>
    public ProdCalcTrans toProdCalcTrans(
        CostSheetProdCalcMode  _prodCalcMode,
        CostProfitSet           _costProfitSet = CostProfitSet::Standard,
        TransDate               _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
        )
    {
        ProdCalcTrans prodCalcTrans = super(_prodCalcMode, _costProfitSet, _transDate);

        prodCalcTrans.CalcType = ItemCalcType::IndirectPurchUnitBased;

        return prodCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>CostSheetNodeCalcPurchUnitBased</c> class.
    /// </summary>
    /// <param name="_costSheetNodeTable">
    ///     The record in the <c>CostSheetNodeTable</c> table that will be used to initialize this object.
    /// </param>
    /// <param name="_parentNodeId">
    ///     The ID of the parent node.
    /// </param>
    /// <param name="_modeStrategy">
    ///     The <c>CostSheetModeStrategy</c> object that controls the creation of the costing sheet.
    /// </param>
    /// <param name="_parentCostGroupId">
    ///     The ID of the <c>CostSheetNodeGroup</c> object that the calculation node belongs to.
    /// </param>
    /// <returns>
    ///     The new instance of the <c>CostSheetNodeCalcPurchUnitBased</c> class.
    /// </returns>
    public static CostSheetNodeCalcPurchUnitBased construct(
        CostSheetNodeTable      _costSheetNodeTable,
        CostSheetNodeId         _parentNodeId,
        CostSheetModeStrategy   _modeStrategy,
        CostGroupId             _parentCostGroupId)
    {
        return new CostSheetNodeCalcPurchUnitBased(_costSheetNodeTable, _parentNodeId, _modeStrategy, _parentCostGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>CostSheetNodeCalcPurchUnitBased</c> class.
    /// </summary>
    /// <param name="_packedNode">
    ///     A container that holds a serialized <c>CostSheetNodeCalcPurchUnitBased</c> object.
    /// </param>
    /// <returns>
    ///     The new instance of the <c>CostSheetNodeCalcPurchUnitBased</c> class.
    /// </returns>
    public static CostSheetNodeCalcPurchUnitBased create(container _packedNode)
    {
        CostSheetNodeCalcPurchUnitBased node = CostSheetNodeCalcPurchUnitBased::construct(null, 0, CostSheetModeStrategyPackUnpack::construct(), '');
        boolean ret = node.unpack(_packedNode);

        return ret ? node : null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>