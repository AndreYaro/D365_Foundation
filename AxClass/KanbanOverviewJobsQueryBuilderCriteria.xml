<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanOverviewJobsQueryBuilderCriteria</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanOverviewJobsQueryBuilderCriteria</c> class is the AIF provider of the kanban jobs for
///    products.
/// </summary>
public class KanbanOverviewJobsQueryBuilderCriteria extends AifQueryBuilder
{
    #define.argsPositionLegalEntity(1)
    #define.argsPositionKanbanBoardTmpFilterCriteria(2)     // must be last part of container

    KanbanOverviewJobsQueryBuilderArgs args;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>KanbanOverviewJobsQueryBuilderArgs</c> class member.
    /// </summary>
    /// <returns>
    /// A <c>KanbanOverviewJobsQueryBuilderArgs</c> object.
    /// </returns>
    protected KanbanOverviewJobsQueryBuilderArgs getArgs()
    {
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>QueryRun</c> object to fetch the jobs for a product.
    /// </summary>
    public void initialize()
    {
        int                             idx;
        container                       rulesContainer       = this.getArgs().parmRulesRecId();
        container                       activityContainer    = this.getArgs().parmPlanActivitiesRecId();
        int                             lenRulesContainer    = conLen(rulesContainer);
        int                             lenActivityContainer = conLen(activityContainer);
        boolean                         filteredActivity     = false;
        List                            productDimFields = InventDim::dimProductDimFieldList();
        ListEnumerator                  enumerator = (productDimFields) ? productDimFields.getEnumerator() : null;

        //filter criteria
        KanbanBoardTmpFilterCriteria kanbanBoardTmpFilterCriteria = this.kanbanBoardTmpFilterCriteria();
        boolean isFilterCriteriaSet = kanbanBoardTmpFilterCriteria.isFilterCriteriaSet();

        query = new Query();

        //kanban job
        query.allowCrossCompany(true);

        QueryBuildDataSource qbdsKanbanJob = query.addDataSource(tableNum(KanbanJob));
        qbdsKanbanJob.fields().clearFieldList();
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob,RecId));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob,Kanban));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob,Type));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob,QuantityOrdered));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob,ExpectedDateTime));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob,DueDateTime));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob,Status));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob,wmsLocationId));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob,InventLocationId));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob,LeanScheduleGroupName));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob,LeanScheduleGroupColor));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob,PlanActivityName));
        qbdsKanbanJob.fields().addField(fieldNum(KanbanJob,Sequence));

        QueryBuildRange queryBuildRange = qbdsKanbanJob.addRange(fieldNum(KanbanJob,Type));
        queryBuildRange.value(queryValue(LeanKanbanJobType::Transfer));

        //kanban
        QueryBuildDataSource qbdsKanban = qbdsKanbanJob.addDataSource(tableNum(Kanban));
        qbdsKanban.fields().clearFieldList();
        qbdsKanban.fields().addField(fieldNum(Kanban,RecId));
        qbdsKanban.fields().addField(fieldNum(Kanban,KanbanId));
        qbdsKanban.fields().addField(fieldNum(Kanban,ItemId));
        qbdsKanban.fields().addField(fieldNum(Kanban,ItemDataAreaId));
        qbdsKanban.fields().addField(fieldNum(Kanban,Express));
        qbdsKanban.fields().addField(fieldNum(Kanban,Status));
        qbdsKanban.fields().addField(fieldNum(Kanban,KanbanRule));
        qbdsKanban.fields().addField(fieldNum(Kanban,KanbanCardId));
        qbdsKanban.fields().addField(fieldNum(Kanban,InventDimId));
        qbdsKanban.fields().addField(fieldNum(Kanban,InventDimDataAreaId));

        qbdsKanban.fetchMode(QueryFetchMode::One2One);
        qbdsKanban.joinMode(JoinMode::InnerJoin);
        qbdsKanban.addLink(fieldNum(KanbanJob,Kanban),fieldNum(Kanban,RecId));

        queryBuildRange = qbdsKanban.addRange(fieldNum(Kanban,Status));
        queryBuildRange.value(SysQuery::valueNot(LeanKanbanStatus::Emptied));

        // Due to the flexible way of selecting the filter, there might be multiple jobs of the same kanban,
        // that could be shown in the control, but this would be very confusing.
        // For each kanban the control shows either
        // -    The first transfer job in a kanban that applies to the filter that is not completed
        // -    If all transfer jobs in the kanban are completed, it shows the last transfer job that
        // applies to the filter.

        // Kanban Job excluding all completed except the last job
        QueryBuildDataSource qbdsKanbanJobExcludeCompleted = qbdsKanban.addDataSource(tableNum(KanbanJob));
        qbdsKanbanJobExcludeCompleted.fetchMode(QueryFetchMode::One2One);
        qbdsKanbanJobExcludeCompleted.joinMode(JoinMode::NoExistsJoin);
        qbdsKanbanJobExcludeCompleted.addLink(fieldNum(Kanban,RecId),fieldNum(KanbanJob,Kanban));
        queryBuildRange = qbdsKanbanJobExcludeCompleted.addRange(fieldNum(KanbanJob,Type));
        queryBuildRange.value(queryValue(LeanKanbanJobType::Transfer));
        queryBuildRange = qbdsKanbanJobExcludeCompleted.addRange(fieldNum(KanbanJob,Sequence));
        queryBuildRange.status(RangeStatus::Locked);
        queryBuildRange.value(strFmt('((%1.%2 > %3.%4) && (%5.%6 = %7))',
            qbdsKanbanJobExcludeCompleted.name(),
            fieldStr(KanbanJob, Sequence),
            qbdsKanbanJob.name(),
            fieldStr(KanbanJob, Sequence),
            qbdsKanbanJob.name(),
            fieldStr(KanbanJob, Status),
            any2int(LeanKanbanJobStatus::Completed)));

        // Kanban Job excluding all not completed except the first not completed
        QueryBuildDataSource qbdsKanbanJobExcludeNotFirst = qbdsKanban.addDataSource(tableNum(KanbanJob));
        qbdsKanbanJobExcludeNotFirst.fetchMode(QueryFetchMode::One2One);
        qbdsKanbanJobExcludeNotFirst.joinMode(JoinMode::NoExistsJoin);
        qbdsKanbanJobExcludeNotFirst.addLink(fieldNum(Kanban,RecId),fieldNum(KanbanJob,Kanban));
        queryBuildRange = qbdsKanbanJobExcludeNotFirst.addRange(fieldNum(KanbanJob,Type));
        queryBuildRange.value(queryValue(LeanKanbanJobType::Transfer));
        queryBuildRange = qbdsKanbanJobExcludeNotFirst.addRange(fieldNum(KanbanJob,Sequence));
        queryBuildRange.status(RangeStatus::Locked);
        queryBuildRange.value(strFmt('((%1.%2 < %3.%4) && (%5.%6 != %7) && (%8.%9 != %10))',
            qbdsKanbanJobExcludeNotFirst.name(),
            fieldStr(KanbanJob, Sequence),
            qbdsKanbanJob.name(),
            fieldStr(KanbanJob, Sequence),
            qbdsKanbanJob.name(),
            fieldStr(KanbanJob, Status),
            any2int(LeanKanbanJobStatus::Completed),
            qbdsKanbanJobExcludeNotFirst.name(),
            fieldStr(KanbanJob, Status),
            any2int(LeanKanbanJobStatus::Completed)));

        //inventTable
        QueryBuildDataSource qbdsInventTable = qbdsKanban.addDataSource(tableNum(InventTable));
        qbdsInventTable.fields().clearFieldList();
        qbdsInventTable.fields().addField(fieldNum(InventTable,RecId));
        qbdsInventTable.fields().addField(fieldNum(InventTable,ItemId));
        qbdsInventTable.fields().addField(fieldNum(InventTable,DataAreaId));
        qbdsInventTable.fields().addField(fieldNum(InventTable,Product));

        qbdsInventTable.fetchMode(QueryFetchMode::One2One);
        qbdsInventTable.joinMode(JoinMode::InnerJoin);
        qbdsInventTable.addLink(fieldNum(Kanban,ItemId),fieldNum(InventTable,ItemId));
        qbdsInventTable.addLink(fieldNum(Kanban,ItemDataAreaId),fieldNum(InventTable,DataAreaId));

        //inventDim
        QueryBuildDataSource qbdsInventDim = qbdsKanban.addDataSource(tableNum(InventDim));
        qbdsInventDim.fields().clearFieldList();
        qbdsInventDim.fields().addField(fieldNum(InventDim,RecId));
        qbdsInventDim.fields().addField(fieldNum(InventDim,InventDimId));
        qbdsInventDim.fields().addField(fieldNum(InventDim,DataAreaId));
        if (enumerator)
        {
            while (enumerator.moveNext())
            {
                qbdsInventDim.fields().addField(enumerator.current());
            }
        }

        qbdsInventDim.fetchMode(QueryFetchMode::One2One);
        qbdsInventDim.joinMode(JoinMode::InnerJoin);
        qbdsInventDim.addLink(fieldNum(Kanban,InventDimId),fieldNum(InventDim,InventDimId));
        qbdsInventDim.addLink(fieldNum(Kanban,InventDimDataAreaId),fieldNum(InventDim,DataAreaId));

        // EcoResProductTranslation for product (non-variant, go through InventTable.Product)
        QueryBuildDataSource qbdsEcoResProductTranslation = qbdsKanban.addDataSource(tableNum(EcoResProductTranslation), 'EcoResProductTranslation');
        qbdsEcoResProductTranslation.fields().clearFieldList();
        qbdsEcoResProductTranslation.fields().addField(fieldNum(EcoResProductTranslation, RecId));
        qbdsEcoResProductTranslation.fields().addField(fieldNum(EcoResProductTranslation, Product));
        qbdsEcoResProductTranslation.fields().addField(fieldNum(EcoResProductTranslation, Name));
        qbdsEcoResProductTranslation.fields().addField(fieldNum(EcoResProductTranslation, Description));

        qbdsEcoResProductTranslation.fetchMode(QueryFetchMode::One2One);
        qbdsEcoResProductTranslation.joinMode(JoinMode::OuterJoin);
        qbdsEcoResProductTranslation.addLink(fieldNum(InventTable, Product), fieldNum(EcoResProductTranslation, Product), qbdsInventTable.name());

        queryBuildRange = qbdsEcoResProductTranslation.addRange(fieldNum(EcoResProductTranslation, LanguageId));
        queryBuildRange.value(SysQuery::value(this.getArgs().parmLanguageId()));

        // EcoResProductTranslation for product variant (go through InventDimCombination.DistinctProductVariant)
        QueryBuildDataSource qbdsInventDimCombination = qbdsKanban.addDataSource(tableNum(InventDimCombination), tableStr(InventDimCombination));
        qbdsInventDimCombination.fields().clearFieldList();
        qbdsInventDimCombination.fields().addField(fieldNum(InventDimCombination, RecId));
        qbdsInventDimCombination.fields().addField(fieldNum(InventDimCombination, ItemId));
        qbdsInventDimCombination.fields().addField(fieldNum(InventDimCombination, InventDimId));
        qbdsInventDimCombination.fields().addField(fieldNum(InventDimCombination, DataAreaId));
        qbdsInventDimCombination.fields().addField(fieldNum(InventDimCombination, DistinctProductVariant));
        qbdsInventDimCombination.relations(false);

        qbdsInventDimCombination.fetchMode(QueryFetchMode::One2One);
        qbdsInventDimCombination.joinMode(JoinMode::OuterJoin);
        qbdsInventDimCombination.addLink(fieldNum(Kanban, ItemId), fieldNum(InventDimCombination, ItemId));
        qbdsInventDimCombination.addLink(fieldNum(Kanban, InventDimId), fieldNum(InventDimCombination, InventDimId));
        qbdsInventDimCombination.addLink(fieldNum(Kanban, InventDimDataAreaId), fieldNum(InventDimCombination, DataAreaId));

        QueryBuildDataSource qbdsEcoResProductTranslationVariant = qbdsKanban.addDataSource(tableNum(EcoResProductTranslation), 'EcoResProductTranslationVariant');
        qbdsEcoResProductTranslationVariant.fields().clearFieldList();
        qbdsEcoResProductTranslationVariant.fields().addField(fieldNum(EcoResProductTranslation, RecId));
        qbdsEcoResProductTranslationVariant.fields().addField(fieldNum(EcoResProductTranslation, Product));
        qbdsEcoResProductTranslationVariant.fields().addField(fieldNum(EcoResProductTranslation, Name));
        qbdsEcoResProductTranslationVariant.fields().addField(fieldNum(EcoResProductTranslation, Description));

        qbdsEcoResProductTranslationVariant.fetchMode(QueryFetchMode::One2One);
        qbdsEcoResProductTranslationVariant.joinMode(JoinMode::OuterJoin);
        qbdsEcoResProductTranslationVariant.addLink(fieldNum(InventDimCombination, DistinctProductVariant), fieldNum(EcoResProductTranslation, Product), qbdsInventDimCombination.name());

        queryBuildRange = qbdsEcoResProductTranslationVariant.addRange(fieldNum(EcoResProductTranslation, LanguageId));
        queryBuildRange.value(SysQuery::value(this.getArgs().parmLanguageId()));

        if (   isFilterCriteriaSet
            || lenActivityContainer)
        {
            //leanProductionFlowActivity
            QueryBuildDataSource qbdsLeanProductionFlowActivity = qbdsKanbanJob.addDataSource(tableNum(LeanProductionFlowActivity));
            qbdsLeanProductionFlowActivity.fetchMode(QueryFetchMode::One2One);
            qbdsLeanProductionFlowActivity.joinMode(JoinMode::InnerJoin);
            qbdsLeanProductionFlowActivity.addLink(fieldNum(KanbanJob,LeanProductionFlowActivity),fieldNum(LeanProductionFlowActivity,RecId));

            //apply filter criteria
            if (isFilterCriteriaSet)
            {
                QueryBuildDataSource qbdsPlanActivity = qbdsLeanProductionFlowActivity.addDataSource(tableNum(PlanActivity));
                qbdsPlanActivity.fetchMode(QueryFetchMode::One2One);
                qbdsPlanActivity.joinMode(JoinMode::InnerJoin);
                qbdsPlanActivity.addLink(fieldNum(LeanProductionFlowActivity,PlanActivity),fieldNum(PlanActivity,RecId));
                kanbanBoardTmpFilterCriteria.applyFilterCriteria(qbdsPlanActivity);
            }

            if (lenActivityContainer)
            {
                filteredActivity = true;
                for (idx = 1; idx <= lenActivityContainer; idx++)
                {
                    queryBuildRange = qbdsLeanProductionFlowActivity.addRange(fieldNum(LeanProductionFlowActivity,PlanActivity));
                    queryBuildRange.status(RangeStatus::Locked);
                    queryBuildRange.value(strFmt('((%1.%2 = %3) && (%4.%5 = %6))',
                        qbdsKanban.name(),
                        fieldStr(Kanban, KanbanRule),
                        conPeek(rulesContainer,idx),
                        qbdsLeanProductionFlowActivity.name(),
                        fieldStr(LeanProductionFlowActivity,PlanActivity),
                        conPeek(activityContainer,idx)));
                }
            }
        }

        if (!filteredActivity)
        {
            for (idx = 1; idx <= lenRulesContainer; idx++)
            {
                queryBuildRange = qbdsKanban.addRange(fieldNum(Kanban,KanbanRule));
                queryBuildRange.value(queryValue(conPeek(rulesContainer,idx)));
            }
        }

        //add the sorting fields
        qbdsKanbanJob.addOrderByField(fieldNum(KanbanJob,Status),SortOrder::Descending);
        qbdsKanban.addOrderByField(fieldNum(Kanban,Status),SortOrder::Descending);
        qbdsKanbanJob.addOrderByField(fieldNum(KanbanJob,Sequence),SortOrder::Ascending);

        //initialize query run
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanBoardTmpFilterCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the filter criteria from the query arguments.
    /// </summary>
    /// <returns>
    ///     The applicable filter criteria.
    /// </returns>
    protected KanbanBoardTmpFilterCriteria kanbanBoardTmpFilterCriteria()
    {
        container                       argsContainer = this.getArgs().parmQueryArgs();

        if (#argsPositionKanbanBoardTmpFilterCriteria > 1)
        {
            argsContainer = conDel(argsContainer,1,#argsPositionKanbanBoardTmpFilterCriteria-1);
        }

        KanbanBoardTmpFilterCriteria kanbanBoardTmpFilterCriteria = KanbanBoardTmpFilterCriteria::container2Record(argsContainer);

        return kanbanBoardTmpFilterCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>legalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the legal entity from the query arguments.
    /// </summary>
    /// <returns>
    ///     The applicable legal entity.
    /// </returns>
    protected LegalEntity legalEntity()
    {
        container argsContainer = this.getArgs().parmQueryArgs();
        LegalEntity legalEntity = conPeek(argsContainer,#argsPositionLegalEntity);

        return legalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>KanbanOverviewJobsQueryBuilderArgs</c> class member.
    /// </summary>
    /// <param name="_args">
    ///    A <c>KanbanOverviewJobsQueryBuilderArgs</c> object.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The parameter is invalid.
    /// </exception>
    public void setArgs(AifQueryBuilderArgs _args)
    {
        //returns an error if this method is called and the args are NULL or if the
        //args class that is passed is not the correct class type.
        if (   !_args
            || classIdGet(_args) != classNum(KanbanOverviewJobsQueryBuilderArgs))
        {
            throw error("@SYS95118");
        }

        args = _args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static KanbanOverviewJobsQueryBuilderCriteria construct()
    {
        return new KanbanOverviewJobsQueryBuilderCriteria();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
