<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RassetDisposalValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RassetDisposalValue
{
     RAssetPostValue          postValue;
     RAssetDisposalType       assetSoldScrap;
     RAssetPostingProfile     postingProfile;
     RAssetDisposalParameters rAssetDisposalParameters;
     RAssetId                 rAssetId;
     RAssetPostType           assetPostType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>invisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns visible status for the current rAssetDisposalParameters table record.
    /// </summary>
    /// <returns>
    /// The visible status.
    /// </returns>
    public NoYes invisible()
    {
        return rAssetDisposalParameters.Invisible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns ledger dimension account for the current rAssetDisposalParameters table record
    /// </summary>
    /// <returns>
    /// ledger dimension account
    /// </returns>
    public LedgerDimensionDefaultAccount ledgerDimension()
    {
        return rAssetDisposalParameters.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RAssetPostingProfile _postingProfile,
                    RAssetDisposalType   _assetSoldScrap,
                    RAssetPostValue      _postValue,
                    RAssetId             _assetId,
                    RAssetPostType       _assetPostType)
    {
        postingProfile = _postingProfile;
        assetSoldScrap = _assetSoldScrap;
        postValue      = _postValue;
        rAssetId       = _assetId;
        assetPostType  = _assetPostType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns ledger dimension account for the current rAssetDisposalParameters table record
    /// </summary>
    /// <returns>
    /// ledger dimension account
    /// </returns>
    public LedgerDimensionDefaultAccount offsetLedgerDimension()
    {
        return rAssetDisposalParameters.OffsetLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostType</Name>
				<Source><![CDATA[
    public RAssetPostType parmPostType(RAssetPostType _assetPostType = assetPostType)
    {
        assetPostType = _assetPostType;

        return assetPostType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postThis</Name>
				<Source><![CDATA[
    public boolean postThis(RAssetAmount     _assetAmount,
                            RAssetStandardId _assetStandardId)
    {
        boolean  ret;
        ;

        rAssetDisposalParameters = RassetDisposalValue::findDisposalParameter(rAssetId,
                                                                            _assetStandardId,
                                                                            postingProfile,
                                                                            assetSoldScrap,
                                                                            postValue,
                                                                            true,
                                                                            assetPostType);

        if (rAssetDisposalParameters)
        {
            if ( (rAssetDisposalParameters.ValueType == RAssetPostType::Negative && _assetAmount <= 0) ||
                 (rAssetDisposalParameters.ValueType == RAssetPostType::Positive && _assetAmount >= 0) ||
                 (rAssetDisposalParameters.ValueType == RAssetPostType::All) )
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDisposalParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds appropriate Disposal parameter for Asset, Asset group or Standard
    /// </summary>
    /// <param name="_assetId">
    /// Asset Id
    /// </param>
    /// <param name="_assetStandardId">
    /// Asset Standart Id
    /// </param>
    /// <param name="_postingProfile">
    /// Posting profile
    /// </param>
    /// <param name="_assetSoldScrap">
    /// Enum to defifine operation Sold o Scrap
    /// </param>
    /// <param name="_postValue">
    /// Posting value
    /// </param>
    /// <param name="_useAssetPostTypeParm">
    /// Shows whether use or ignore _assetPostType parameter
    /// </param>
    /// <param name="_assetPostType">
    /// Post Type
    /// </param>
    /// <returns>
    /// Found record
    /// </returns>

    public static RAssetDisposalParameters findDisposalParameter(
        RAssetId             _assetId,
        RAssetStandardId     _assetStandardId,
        RAssetPostingProfile _postingProfile,
        RAssetDisposalType   _assetSoldScrap,
        RAssetPostValue      _postValue,
        boolean              _useAssetPostTypeParm,
        RAssetPostType       _assetPostType = RAssetPostType::All)

    {
        RAssetDisposalParameters rassetDispParm;

        select firstonly rassetDispParm
            where  rassetDispParm.SoldScrap      == _assetSoldScrap                     &&
                   rassetDispParm.PostingProfile == _postingProfile                     &&
                   rassetDispParm.PostValue      == _postValue                          &&
                   (!_useAssetPostTypeParm ||
                       rassetDispParm.ValueType  == _assetPostType)                     &&
                   rassetDispParm.AssetCode      == RAssetTableGroupAllStandard::Table  &&
                   rassetDispParm.AssetRelation  == _assetId;

        if (! rassetDispParm)
            select firstonly rassetDispParm
                where  rassetDispParm.SoldScrap      == _assetSoldScrap                       &&
                       rassetDispParm.PostingProfile == _postingProfile                       &&
                       rassetDispParm.PostValue      == _postValue                            &&
                       (!_useAssetPostTypeParm ||
                            rassetDispParm.ValueType == _assetPostType)                       &&
                       rassetDispParm.AssetCode      == RAssetTableGroupAllStandard::GroupId  &&
                       rassetDispParm.AssetRelation  == RAssetStandards::find(_assetId, _assetStandardId).AssetGroup;

        if (! rassetDispParm)
            select firstonly rassetDispParm
                where  rassetDispParm.SoldScrap      == _assetSoldScrap                        &&
                       rassetDispParm.PostingProfile == _postingProfile                        &&
                       rassetDispParm.PostValue      == _postValue                             &&
                       (!_useAssetPostTypeParm ||
                            rassetDispParm.ValueType == _assetPostType)                        &&
                       rassetDispParm.AssetCode      == RAssetTableGroupAllStandard::Standard  &&
                       rassetDispParm.AssetRelation  == _assetStandardId;

        if (! rassetDispParm)
            select firstonly rassetDispParm
                where  rassetDispParm.SoldScrap      == _assetSoldScrap &&
                       rassetDispParm.PostingProfile == _postingProfile &&
                       rassetDispParm.PostValue      == _postValue      &&
                       (!_useAssetPostTypeParm ||
                            rassetDispParm.ValueType == _assetPostType) &&
                       rassetDispParm.AssetCode      == RAssetTableGroupAllStandard::All;

        return rassetDispParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets amount for disposal operation.
    /// </summary>
    /// <param name = "_assetId">An asset number.</param>
    /// <param name = "_assetStandardId">An asset standard Id.</param>
    /// <param name = "_postValue">A post value.</param>
    /// <param name = "_assetAmount">An asset amount.</param>
    /// <param name = "_assetTransDate">An asset tramsaction date.</param>
    /// <returns>The amount for disposal operation.</returns>
    public static RAssetAmount postValue(
        RAssetId _assetId,
        RAssetStandardId _assetStandardId,
        RAssetPostValue _postValue,
        RAssetAmount _assetAmount    = 0,
        RAssetTransDate _assetTransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        RAssetAmount assetAmount;
        RAssetTransDate this_Year    = DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), _assetTransDate);
        RAssetTransDate prior_Years  = DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), prevYr(_assetTransDate));
        RAssetTable rAssetTable = RAssetTable::find(_assetId);
        boolean deprBonusRecovery   = RassetDisposalValue::deprBonusRecoveryApplicable(
            rAssetTable,
            _assetId,
            _assetStandardId,
            _assetAmount,
            _assetTransDate);

        AccountNum accountNum = RAssetTable::find(_assetId).AccountNum;
        RAssetSumCalc rAssetSumTransThisYear  = RAssetSumCalc_Trans::newAssetPeriod(
            accountNum,
            _assetStandardId,
            this_Year,
            prior_Years);
        RAssetSumCalc rAssetSumTransPriorYear = RAssetSumCalc_Trans::newAssetPeriod(
            accountNum,
            _assetStandardId,
            prior_Years);
        RAssetSumCalc rAssetSumTransDate = RAssetSumCalc_Trans::newAssetPeriod(
            accountNum,
            _assetStandardId,
            _assetTransDate);

        switch (_postValue)
        {
            case RAssetPostValue::DepPriorYears:
                assetAmount = RassetDisposalValue::subtractDeprBonus(
                    rAssetSumTransPriorYear,
                    rAssetSumTransPriorYear.depreciationValue(),
                    deprBonusRecovery);
                break;
            case RAssetPostValue::DepThisYear:
                assetAmount = RassetDisposalValue::subtractDeprBonus(
                    rAssetSumTransThisYear,
                    rAssetSumTransThisYear.depreciationValue(),
                    deprBonusRecovery);
                break;
            case RAssetPostValue::Acquisition:
                assetAmount = rAssetSumTransDate.acquisitionValue();
                break;
            case RAssetPostValue::NBV:
                assetAmount = RassetDisposalValue::subtractDeprBonus(
                    rAssetSumTransDate,
                    rAssetSumTransDate.acquisitionTotal() + rAssetSumTransDate.depreciationTotal(),
                    deprBonusRecovery);
                break;
            case RAssetPostValue::SaleValue:
                assetAmount = _assetAmount;
                break;
            case RAssetPostValue::AcqAdjPriorYears:
                assetAmount = rAssetSumTransPriorYear.acquisitionAdjValue();
                break;
            case RAssetPostValue::AcqAdjThisYear:
                assetAmount = rAssetSumTransThisYear.acquisitionAdjValue();
                break;
            case RAssetPostValue::AcqThisYear:
                assetAmount = rAssetSumTransThisYear.acquisitionValue();
                break;
            case RAssetPostValue::AcqPriorYears:
                assetAmount = rAssetSumTransPriorYear.acquisitionValue();
                break;
            case RAssetPostValue::DepAdjPriorYears:
                assetAmount = rAssetSumTransPriorYear.depreciationAdjValue();
                break;
            case RAssetPostValue::DepAdjThisYear:
                assetAmount = rAssetSumTransThisYear.depreciationAdjValue();
                break;
            case RAssetPostValue::RevalueThisYear:
                assetAmount = rAssetSumTransThisYear.revaluationValue();
                break;
            case RAssetPostValue::RevaluePriorYear:
                assetAmount = rAssetSumTransPriorYear.revaluationValue();
                break;
            case RAssetPostValue::Gain:
                assetAmount = _assetAmount
                    - RassetDisposalValue::subtractDeprBonus(
                        rAssetSumTransDate,
                        rAssetSumTransDate.acquisitionTotal() + rAssetSumTransDate.depreciationTotal(),
                        deprBonusRecovery);
                break;
            case RAssetPostValue::BalanceAcq:
                assetAmount =  rAssetSumTransDate.acquisitionTotal();
                break;
            case RAssetPostValue::BalanceDepr:
                assetAmount =  RassetDisposalValue::subtractDeprBonus(
                    rAssetSumTransDate,
                    rAssetSumTransDate.depreciationTotal(),
                    deprBonusRecovery);
                break;
            case RAssetPostValue::DepBonusRecovery:
                assetAmount = RassetDisposalValue::subtractDeprBonus(
                    rAssetSumTransDate,
                    0,
                    deprBonusRecovery);
                break;
        }

        return assetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deprBonusRecoveryApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the possibility of recovery the depreciation bonus.
    /// </summary>
    /// <param name = "_rAssetTable">A <c>RAssetTable</c> record.</param>
    /// <param name = "_assetId">An asset number.</param>
    /// <param name = "_assetStandardId">An asset standard Id.</param>
    /// <param name = "_assetAmount">An asset amount.</param>
    /// <param name = "_assetTransDate">An asset trans date.</param>
    /// <param name = "_assetDisposalType">An asset disposal type.</param>
    /// <param name = "_assetPostValue">An asset post value type.</param>
    /// <returns>True if the depreciation bonus can be recovered; otherwise false.</returns>
    protected static boolean deprBonusRecoveryApplicable(
        RAssetTable _rAssetTable,
        RAssetId _assetId,
        RAssetStandardId _assetStandardId,
        RAssetAmount _assetAmount,
        RAssetTransDate _assetTransDate,
        RAssetDisposalType _assetDisposalType = RAssetDisposalType::Sold,
        RAssetPostValue _assetPostValue = RAssetPostValue::DepBonusRecovery)
    {
        boolean retval;
        const int YearTerm = 5;

        if (_rassetTable.CustAccount &&
                CustTable::find(_rassetTable.CustAccount).Affiliated_RU)
        {
            RAssetStandards assetStandardsLocal = RAssetStandards::find(_rassetTable.AccountNum, _assetStandardId);

            if (RassetDisposalValue::findDisposalParameter(
                    _rassetTable.AccountNum,
                    _assetStandardId,
                    assetStandardsLocal.postingProfile(_assetTransDate),
                    _assetDisposalType,
                    _assetPostValue,
                    false))
            {
                RAssetTrans bonusRecoveryTrans;

                select firstonly bonusRecoveryTrans
                    where bonusRecoveryTrans.PostingType     == RAssetPostingType::DepreciationBonusRecovery &&
                          bonusRecoveryTrans.AssetTransType  == RAssetTransType::Depreciation &&
                          bonusRecoveryTrans.AssetStandardId == _assetStandardId &&
                          bonusRecoveryTrans.AccountNum      == _assetId &&
                          !bonusRecoveryTrans.StornoRecId;
                
                if (!bonusRecoveryTrans)
                {
                    RAssetTransDate acquisitionDate = RAssetTrans::transTypeFirstDate(
                        _rassetTable.AccountNum,
                        _assetStandardId,
                        RAssetTransType::Acquisition,
                        false);
                    retval = (yearDiff(_assetTransDate, acquisitionDate) + 1 <= YearTerm);
                }
            }
        }

        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subtractDeprBonus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the depreciation amount depending on the depreciation bonus.
    /// </summary>
    /// <param name = "_calc">The instance of <c>RAssetSumCalc</c>.</param>
    /// <param name = "_depreciationvalue">The depreciation amount.</param>
    /// <param name = "_deprBonusRecovery">The posibility of recovery the depreciation bonus.</param>
    /// <returns>The adjusted depreciation amount.</returns>
    protected static RAssetAmount subtractDeprBonus(
        RAssetSumCalc _calc,
        RAssetAmount _depreciationvalue,
        boolean _deprBonusRecovery)
    {
        if (_deprBonusRecovery)
        {
            _depreciationvalue -=  _calc.depreciationPostedBonusValue();
        }

        return _depreciationvalue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>