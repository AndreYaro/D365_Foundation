<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCImportMarginTransType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the bank margin for different transaction type.
/// </summary>
class BankLCImportMarginTransType extends BankLCImportTransType
{
    BankLCImportMarginRefRecId bankLCImportMarginRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Allocates the transaction to the bank letter of credit lines.
    /// </summary>
    /// <param name="_allocationType">
    ///    The allocation type.
    /// </param>
    /// <param name="_bankLCImportLineRefRecId">
    ///    The record ID of the bank letter of credit import line.
    /// </param>
    public void allocateTransaction(
        BankLCImportTransAllocationType _allocationType,
        BankLCLineRefRecId              _bankLCImportLineRefRecId)
    {
        this.doAllocateTransactions(_allocationType, _bankLCImportLineRefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a miscellaneous charge allocation transaction in the <c>BankLCImportMarginAllocation_SA</c>
    ///    table.
    /// </summary>
    /// <param name="_bankLCImportMarginRefRecId">
    ///    The record ID of the bank letter of credit import margin.
    /// </param>
    /// <param name="_bankLCImportLineRefRecId">
    ///    The record ID of the bank letter of credit import line.
    /// </param>
    /// <param name="_amount">
    ///    The amount to be allocated.
    /// </param>
    private void createTransAllocation(
        BankLCImportMarginRefRecId          _bankLCImportMarginRefRecId,
        bankLCLineRefRecId                  _bankLCImportLineRefRecId,
        BankLCImportTransAllocatedAmountCur _amount)
    {
        BankLCImportMarginAllocation bankLCImportMarginAllocation;

        bankLCImportMarginAllocation.clear();
        bankLCImportMarginAllocation.BankLCImportMargin = _bankLCImportMarginRefRecId;
        bankLCImportMarginAllocation.BankLCImportLine   = _bankLCImportLineRefRecId;

        bankLCImportMarginAllocation.AllocatedAmountCur = _amount;
        bankLCImportMarginAllocation.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAllocateTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Allocates the bank letter of credit margin to lines.
    /// </summary>
    /// <param name="_allocationType">
    ///    The allocation type.
    /// </param>
    /// <param name="_bankLCImportLineRefRecId">
    ///    The record ID of the bank import letter of credit line.
    /// </param>
    protected void doAllocateTransactions(
        BankLCImportTransAllocationType _allocationType,
        BankLCLineRefRecId              _bankLCImportLineRefRecId)
    {
        #OCCRetryCount

        BankLCImport                            bankLCImportLocal;
        BankLCImportTransAllocatedAmountCur     amountToLocate;
        BankLCImportTransAllocatedAmountCur     remainingAmountToLocate;
        BankLCShipmentAmountCur                 totalShipmentAmount;
        BankLCImportLine                        bankLCImportLineLocal;
        BankLCImportMargin                      bankLCImportMarginLocal;
        int                                     countOfBankLCImportLines;

        try
        {
            ttsbegin;

            switch (_allocationType)
            {
                case BankLCImportTransAllocationType::Dedicated:
                    bankLCImportLineLocal = BankLCImportLine::find(_bankLCImportLineRefRecId);
                    if (bankLCImportLineLocal
                        && bankLCImportLineLocal.RecId != 0
                        && this.isAllocateTransactionAllowed(bankLCImportLineLocal))
                    {
                        while select bankLCImportMarginLocal
                            where   bankLCImportMarginLocal.BankLCImport  == bankLCImportRecId
                                &&  bankLCImportMarginLocal.Selected      == NoYes::Yes
                                &&  bankLCImportMarginLocal.TransStatus   == BankLCImportTransStatusType::Posted
                        {
                            remainingAmountToLocate = bankLCImportMarginLocal.getBalanceAmount();
                            if (remainingAmountToLocate > 0)
                            {
                                this.createTransAllocation(
                                    bankLCImportMarginLocal.RecId,
                                    bankLCImportLineLocal.RecId,
                                    remainingAmountToLocate);
                            }
                        }
                    }
                    break;
                case BankLCImportTransAllocationType::Distributed:
                    bankLCImportLocal = BankLCImport::find(bankLCImportRecId);
                    totalShipmentAmount = bankLCImportLocal.getTotalShipmentAmount();
                    if (totalShipmentAmount > 0)
                    {
                        while select bankLCImportMarginLocal
                            where   bankLCImportMarginLocal.BankLCImport  == bankLCImportRecId
                                &&  bankLCImportMarginLocal.Selected      == NoYes::Yes
                                &&  bankLCImportMarginLocal.TransStatus   == BankLCImportTransStatusType::Posted
                        {
                            remainingAmountToLocate = bankLCImportMarginLocal.getBalanceAmount();
                            if (remainingAmountToLocate > 0)
                            {
                                countOfBankLCImportLines = this.getNumberOfShipmentsToAllocate();

                                while select bankLCImportLineLocal
                                    where bankLCImportLineLocal.BankLC == bankLCImportRecId
                                {
                                    if (this.isAllocateTransactionAllowed(bankLCImportLineLocal))
                                    {
                                        countOfBankLCImportLines --;

                                        if (bankLCImportLineLocal.ShipmentAmountCur != 0)
                                        {
                                            amountToLocate = round(remainingAmountToLocate * ( bankLCImportLineLocal.ShipmentAmountCur / totalShipmentAmount), 0.01);

                                            // the logic to make sure the remaining amount could all be included.
                                            if (countOfBankLCImportLines == 0)
                                            {
                                                this.createTransAllocation(
                                                    bankLCImportMarginLocal.RecId,
                                                    bankLCImportLineLocal.RecId,
                                                    remainingAmountToLocate);
                                            }
                                            else
                                            {
                                                this.createTransAllocation(
                                                    bankLCImportMarginLocal.RecId,
                                                    bankLCImportLineLocal.RecId,
                                                    amountToLocate);

                                                remainingAmountToLocate = remainingAmountToLocate - amountToLocate;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    break;
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankLCImportMarginRecId</Name>
				<Source><![CDATA[
    public BankLCImportMarginRefRecId parmBankLCImportMarginRecId(
        BankLCImportMarginRefRecId _bankLCImportMarginRecId = bankLCImportMarginRecId)
    {
        bankLCImportMarginRecId = _bankLCImportMarginRecId;
        return bankLCImportMarginRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankLCImportRecId</Name>
				<Source><![CDATA[
    public BankLCRefRecId parmBankLCImportRecId(BankLCRefRecId _bankLCImportRecId = bankLCImportRecId)
    {
        bankLCImportRecId = _bankLCImportRecId;
        return bankLCImportRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postedActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does the actions after the Journal has been posted.
    /// </summary>
    public void postedActions()
    {
        BankLCImportType    bankLCImportType;
        BankLCImportMargin  bankLCImportMargin;

        #OCCRetryCount

        try
        {
            if (!ledgerJournalTransBankLC.BankLC
                || !ledgerJournalTrans.JournalNum
                || !ledgerJournalTrans.Voucher)
            {
                return;
            }

            if (BankLCImportMargin::existVoucher(
                    ledgerJournalTransBankLC.BankLC,
                    ledgerJournalTrans.JournalNum,
                    ledgerJournalTrans.Voucher,
                    ledgerJournalTrans.TransDate))
            {
                return;
            }

            ttsbegin;

            bankLCImportType = BankLCImportType::construct(ledgerJournalTransBankLC.BankLC, true);

            bankLCImportMargin.clear();
            bankLCImportMargin.BankLCImport = bankLCImportType.parmBankLCImport().RecId;
            bankLCImportMargin.JournalNum = ledgerJournalTrans.JournalNum;
            bankLCImportMargin.Voucher = ledgerJournalTrans.Voucher;
            bankLCImportMargin.CurrencyCode = bankLCImportType.parmBankLCImport().getCurrencyCode();
            bankLCImportMargin.AmountCur = this.getAmount();
            bankLCImportMargin.PostedDate = ledgerJournalTrans.TransDate;
            bankLCImportMargin.TransStatus = BankLCImportTransStatusType::Posted;
            bankLCImportMargin.insert();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerPosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the transaction will posted.
    /// </summary>
    /// <returns>
    ///    true if the transaction will post; otherwise, false.
    /// </returns>
    public boolean validateLedgerPosting()
    {
        boolean allOk = true;
        BankLCImport bankLCImportLocal;
        CurrencyCode currencyCodeLC;
        AmountCur amount;

        bankLCImportLocal = BankLCImport::find(ledgerJournalTransBankLC.BankLC);

        if (!bankLCImportLocal || bankLCImportLocal.RecId == 0)
        {
            // System could not find the required Letter of Cedit.
            allOk = checkFailed("@SYS332211");
        }

        if (allOk)
        {
            if (!bankLCImportLocal.isMarginTransactionAllowed())
            {
                // Margin transaction could not be posted due to Letter of Credit is
                // either not confirmed or not synchronized with purchase order.
                allOk = checkFailed("@SYS332212");
            }
        }

        if (allOk)
        {
            if (ledgerJournalTrans.ledgerJournalTable().JournalType != LedgerJournalType::Daily)
            {
                // Only Daily Journal could be used to post Letter of Credit Margin transactions.
                allOk = checkFailed("@SYS332213");
            }
        }

        if (allOk)
        {
            currencyCodeLC = bankLCImportLocal.getCurrencyCode();
            if (ledgerJournalTrans.CurrencyCode != currencyCodeLC)
            {
                // The offset bank account used for Letter of Credit Margin tranaction
                // does not have same currecy code with Letter of Credit.
                allOk = checkFailed("@SYS332216");
            }
        }

        if (allOk)
        {
            amount = this.getAmount() + BankLCImportMargin::getTotalAmount(ledgerJournalTransBankLC.BankLC);
            if (amount < 0
                || amount > bankLCImportLocal.getBankLCAmount())
            {
                // Margin cannot exceed the Letter of Credit value.
                allOk = checkFailed("@SYS332277");
            }
        }

        return allOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BankLCImportMarginTransType construct()
    {
        BankLCImportMarginTransType ret = new BankLCImportMarginTransType();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromBankLCImport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>BankLCImportMarginTransType</c> class.
    /// </summary>
    /// <param name="_bankLCImportRecId">
    ///    The record ID of bank letter of credit import.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>BankLCImportMarginTransType</c> class.
    /// </returns>
    public static BankLCImportMarginTransType constructFromBankLCImport(
        BankLCRefRecId _bankLCImportRecId)
    {
        BankLCImportMarginTransType ret;

        ret = BankLCImportMarginTransType::construct();
        ret.parmBankLCImportRecId(_bankLCImportRecId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromBankLCImportMargin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>BankLCImportMarginTransType</c> class.
    /// </summary>
    /// <param name="_bankLCImportMarginRecId">
    ///    The record ID of the bank letter of credit import margin.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>BankLCImportMarginTransType</c> class.
    /// </returns>
    public static BankLCImportMarginTransType constructFromBankLCImportMargin(
        BankLCImportMarginRefRecId _bankLCImportMarginRecId)
    {
        BankLCImportMarginTransType ret;

        ret = BankLCImportMarginTransType::constructFromBankLCImport(
            BankLCImportMargin::find(_bankLCImportMarginRecId).BankLCImport);
        ret.parmBankLCImportMarginRecId(_bankLCImportMarginRecId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultMarginAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the default margin account from the bank posting profile.
    /// </summary>
    /// <param name="_bankLCRefRecId">
    ///    The record ID of the bank letter of credit.
    /// </param>
    /// <returns>
    ///    A <c>LedgerDimensionAccount</c> record.
    /// </returns>
    public static LedgerDimensionAccount getDefaultMarginAccount(BankLCRefRecId _bankLCRefRecId)
    {
        BankDocumentPosting bankDocumentPosting;
        LedgerDimensionAccount marginAccount;

        bankDocumentPosting = BankLCImportTransType::getBankDocumentPosting(_bankLCRefRecId);

        if (bankDocumentPosting && bankDocumentPosting.RecId != 0)
        {
            marginAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(bankDocumentPosting.MarginLedgerDimension);
        }
        return marginAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the default ledger and the offset dimension account.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The ledger journal transaction to be set.
    /// </param>
    /// <param name="_ledgerJournalTransBankLC">
    ///    The bank letter of credit.
    /// </param>
    public static void setDefaultAccounts(
        LedgerJournalTrans          _ledgerJournalTrans,
        LedgerJournalTransBankLC    _ledgerJournalTransBankLC)
    {
        if (_ledgerJournalTransBankLC.TransType == BankLCLedgerJournalTransType::Margin
            && _ledgerJournalTransBankLC.BankLC)
        {
            if (_ledgerJournalTrans.AccountType != LedgerJournalACType::Ledger)
            {
                _ledgerJournalTrans.AccountType = LedgerJournalACType::Ledger;
                _ledgerJournalTrans.LedgerDimension = BankLCImportMarginTransType::getDefaultMarginAccount(_ledgerJournalTransBankLC.BankLC);
            }
            else
            {
                if (!_ledgerJournalTrans.LedgerDimension)
                {
                    _ledgerJournalTrans.LedgerDimension = BankLCImportMarginTransType::getDefaultMarginAccount(_ledgerJournalTransBankLC.BankLC);
                }
            }

            if (_ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Bank)
            {
                _ledgerJournalTrans.setOffsetLedgerDimension(
                    _ledgerJournalTrans.ledgerJournalTable(),
                    LedgerJournalACType::Bank,
                    BankLCImportTransType::getBankAccountLedgerDim(_ledgerJournalTransBankLC.BankLC));
            }
            else
            {
                if (!_ledgerJournalTrans.OffsetLedgerDimension)
                {
                    _ledgerJournalTrans.setOffsetLedgerDimension(
                        _ledgerJournalTrans.ledgerJournalTable(),
                        LedgerJournalACType::Bank,
                        BankLCImportTransType::getBankAccountLedgerDim(_ledgerJournalTransBankLC.BankLC));
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>