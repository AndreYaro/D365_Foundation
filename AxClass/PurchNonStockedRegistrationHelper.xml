<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchNonStockedRegistrationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchNonStockedRegistrationHelper extends TradeNonStockedRegistrationHelper
{
    PurchLine purchLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventRegistrationHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the <c>InventRegistrationHandler</c> class for the sales line.
    /// </summary>
    /// <returns>
    /// An instance of the <c>InventRegistrationHandler</c> class for the sales line.
    /// </returns>
    protected InventRegistrationHandler getInventRegistrationHandler()
    {
        return InventRegistrationPurchLine::newFromPurchLine(purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPendingRegistrationsApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>InventPendingQuantity</c> update is relevant for the line.
    /// </summary>
    /// <param name="_isPendingRegistrationsToBeCreated">
    /// Specifies whether <c>InventPendingQuantity</c> records are to be created for the line freshly.
    /// </param>
    /// <param name="_purchLineOrig">
    /// The original or approved purchase order line.
    /// </param>
    /// <returns>
    /// true if line changes require <c>InventPendingQuantity</c> updates; otherwise, false.
    /// </returns>
    public boolean isPendingRegistrationsApplicable(boolean _isPendingRegistrationsToBeCreated, PurchLine _purchLineOrig)
    {
        //Pending registrations should only be updated for non-stocked lines which are not intercompany lines:
        //      - during line creation,if item is tangible
        //      - during line updates, if InventPendingQuantity records already exist.
        //This is to enable pseudo data effectivity on the isTangible attribute.
        //Regular direct delivery lines are allowed.
        return !purchLine.isStocked()
                && (purchLine.PurchaseType == PurchaseType::Purch
                    || _purchLineOrig.PurchaseType == PurchaseType::Purch)
                && (purchLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries
                    || _purchLineOrig.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries)
                && !(purchLine.isDropShipment() && purchLine.isInterCompanyOrder())
                && ((_isPendingRegistrationsToBeCreated && purchLine.isTangible())
                    || (!_isPendingRegistrationsToBeCreated && (InventPendingQuantity::existsSourceDocumentLine(purchLine.SourceDocumentLine))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line quantity.
    /// </summary>
    /// <returns>
    /// A <c>UnitQty</c> value.
    /// </returns>
    public UnitQty lineQty()
    {
        return purchLine.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchLine</Name>
				<Source><![CDATA[
        public PurchLine parmPurchLine(PurchLine _purchLine = purchLine)
    {
        purchLine = _purchLine;

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPendingRegistrationsBeDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether <c>InventPendingQuantity</c> records should be deleted for the current update of
    /// the line.
    /// </summary>
    /// <param name="_purchLineApproved">
    /// The approved <c>PurchLine</c> object.
    /// </param>
    /// <returns>
    /// true if the current line update requires <c>InventPendingQuantity</c> records to be deleted;
    /// otherwise, false.
    /// </returns>
    public boolean shouldPendingRegistrationsBeDeleted(PurchLine _purchLineApproved)
    {
        // Delete if line is to be soft deleted
        // and if the line is not yet fully registered,
        // and if the line quantity has changed OR if it is a new line.
        // or if the purchase type has been changed from purch to journal or subscription.
        return purchLine.IsDeleted   == NoYes::Yes
            || purchLine.isCanceled()
            || (purchLine.PurchQty < 0
                && _purchLineApproved.PurchQty > 0)
            || (purchLine.PurchaseType != PurchaseType::Purch
                && _purchLineApproved.PurchaseType == PurchaseType::Purch)
            || (purchLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries
                && _purchLineApproved.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPendingRegistrationsBeSynced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether <c>InventPendingQuantity</c> records should be synchronized for the current
    /// update of the line.
    /// </summary>
    /// <param name="_isPendingRegistrationsToBeCreated">
    /// Specifies whether to create <c>InventPendingQuantity</c> records for the line.
    /// </param>
    /// <param name="_purchLineApproved">
    /// The approved <c>PurchLine</c> object.
    /// </param>
    /// <returns>
    /// true if the current line update requires <c>InventPendingQuantity</c> record updates; otherwise,
    /// false.
    /// </returns>
    public boolean shouldPendingRegistrationsBeSynced(boolean _isPendingRegistrationsToBeCreated, PurchLine _purchLineApproved)
    {
        // Sync if line quantity is positive
        // and if the line is not yet fully registered,
        // and if the line quantity/Site/Warehouse has changed OR if it is a new line.
        return purchLine.PurchQty > 0
                && purchLine.registeredInPurchUnit() != purchLine.PurchQty
                && (_isPendingRegistrationsToBeCreated
                    || (!purchLine.ItemId //For category based lines pending registration details is always updated because values like weight come from order line related changes.
                        || _purchLineApproved.RemainPurchPhysical != purchLine.RemainPurchPhysical
                        || _purchLineApproved.InventDimId      != purchLine.InventDimId
                        || _purchLineApproved.DeliveryDate     != purchLine.DeliveryDate
                        || _purchLineApproved.ConfirmedDlv     != purchLine.ConfirmedDlv
                        || _purchLineApproved.Name             != purchLine.Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizePendingRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the pending registration records from the line.
    /// </summary>
    /// <param name="_adjustedQty">
    /// The quantity to add to the pending registration records.
    /// </param>
    /// <param name="_isNewLine">
    /// A Boolean value that specifies whether the line is a new line.
    /// </param>
    /// <remarks>
    /// This method would typically be used when a purchase line is created, updated, or approved for
    /// change management enabled purchase orders.
    /// </remarks>
    public void synchronizePendingRegistration(UnitQty _adjustedQty, boolean _isNewLine)
    {
        InventRegistrationPurchLine inventRegistrationPurchLine;

        inventRegistrationPurchLine = InventRegistrationPurchLine::newFromPurchLine(purchLine);

        InventPendingQuantity::synchronizePendingRegistration(inventRegistrationPurchLine, _adjustedQty, !_isNewLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the pending registration records can be deleted.
    /// </summary>
    /// <returns>
    /// true if the pending registration records can be deleted; otherwise, false.
    /// </returns>
    public boolean validateDelete()
    {
        if (TradeNonStockedRegistrationHelper::getInventPendingReceipt(purchLine.SourceDocumentLine).Quantity)
        {
           throw error("@SYS315652");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOrderLineUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the order line can be updated.
    /// </summary>
    /// <returns>
    /// true if the order line can be updated; otherwise, false.
    /// </returns>
    public boolean validateOrderLineUpdate()
    {
        InventQty   registeredQty;
        boolean     ok = true;

        registeredQty = TradeNonStockedRegistrationHelper::getInventPendingReceipt(purchLine.SourceDocumentLine).Quantity;

        if (registeredQty && purchLine.PurchQty < registeredQty)
        {
            ok = checkFailed("@SYS315653");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static PurchNonStockedRegistrationHelper construct()
    {
        return new PurchNonStockedRegistrationHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>TradeNonStockedRegistrationHelper</c> class with the specified
    /// <c>PurchLine</c> object.
    /// </summary>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> object based on which to initialize the <c>TradeNonStockedRegistrationHelper</c>
    /// object.
    /// </param>
    /// <returns>
    /// A <c>TradeNonStockedRegistrationHelper</c> object.
    /// </returns>
    public static PurchNonStockedRegistrationHelper newFromPurchLine(PurchLine _purchLine)
    {
        PurchNonStockedRegistrationHelper purchNonStockedRegistrationHelper;

        purchNonStockedRegistrationHelper = PurchNonStockedRegistrationHelper::construct();
        purchNonStockedRegistrationHelper.parmPurchLine(_purchLine);
        purchNonStockedRegistrationHelper.parmSalesPurchLine(_purchLine);

        return purchNonStockedRegistrationHelper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>