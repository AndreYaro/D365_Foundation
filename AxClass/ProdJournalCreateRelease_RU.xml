<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalCreateRelease_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdJournalCreateRelease_RU extends ProdJournalCreate
{
    DialogField             dialogProdId;
    DialogField             dialogDate;
    DialogField             dialogJournalNameId;

    ProdJournalId           callerJournalId;
    ProdJournalRelease_RU   prodJournalRelease;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        callerJournalId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLines</Name>
				<Source><![CDATA[
    protected void createLines()
    {
        ProdJournalTable    callerJournalTable;

        if (callerJournalId)
        {
            callerJournalTable = ProdJournalTable::find(callerJournalId);

            select firstonly prodJournalTable
                where prodJournalTable.ProdRefJournalId_RU      == callerJournalTable.JournalId &&
                      prodJournalTable.ProdRefJournalType_RU    == callerJournalTable.JournalType &&
                      prodJournalTable.Posted                   == NoYes::No;
        }

        journalId = prodJournalTable.JournalId;
        if (journalId)
        {
            prodJournalTableData = JournalTableData::newTable(prodJournalTable);
        }
        else
        {
            this.initProdJournalTableData(ProdJournalType::ReleaseFromProduction_RU);
            prodJournalTableData.initFromCaller_RU(callerJournalTable);
            prodJournalTableData.initJournalId();

            if (!callerJournalId)
            {
                prodJournalTransData = prodJournalTableData.journalStatic().newJournalTransData(prodJournalRelease, prodJournalTableData);
                this.createLinesProdReleaseTrans();
            }

            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesProdReleaseTrans</Name>
				<Source><![CDATA[
    protected void createLinesProdReleaseTrans()
    {
        ProdReleaseTrans_RU prodReleaseTrans;
        ProdReleaseTrans_RU offsetProdReleaseTrans;

        setprefix("@SYS69450");

        while select reverse forupdate prodReleaseTrans
            where prodReleaseTrans.ProdId       == prodId &&
                  prodReleaseTrans.Cancelled    == NoYes::No
        {
            prodReleaseTrans.Cancelled = NoYes::Yes;
            prodReleaseTrans.update();

            if (prodReleaseTrans.OffsetRefRecId)
            {
                select firstonly forupdate Cancelled, RecId from offsetProdReleaseTrans
                    where offsetProdReleaseTrans.RecId == prodReleaseTrans.OffsetRefRecId;
            }
            else
            {
                select firstonly forupdate Cancelled, RecId from offsetProdReleaseTrans
                    where offsetProdReleaseTrans.OffsetRefRecId == prodReleaseTrans.RecId;
            }

            if (offsetProdReleaseTrans.RecId)
            {
                offsetProdReleaseTrans.Cancelled = NoYes::Yes;
                offsetProdReleaseTrans.update();
            }
            else
            {
                this.initTransFromProdReleaseTrans(prodJournalRelease, prodReleaseTrans);
                prodJournalRelease.OffsetTransRefRecId  = prodReleaseTrans.RecId;
                prodJournalTransData.create();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogProdId = dialog.addField(extendedTypeStr(ProdId));
        dialogProdId.value(prodId);
        dialogProdId.allowEdit(false);

        dialogDate = dialog.addField(extendedTypeStr(TransDate));
        dialogDate.value(transDate);
        dialogDate.helpText("@SYS16667");

        dialogJournalNameId = dialog.addField(extendedTypeStr(ProdJournalNameIdRelease_RU));
        dialogJournalNameId.value(journalNameId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    public void getLast()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromProdReleaseTrans</Name>
				<Source><![CDATA[
    protected void initTransFromProdReleaseTrans(ProdJournalRelease_RU  _prodJournalRelease,
                                                 ProdReleaseTrans_RU    _prodReleaseTrans)

    {
        _prodJournalRelease.clear();

        _prodJournalRelease.initFromProdReleaseTrans(_prodReleaseTrans);

        prodJournalTransData.initFromJournalTable();

        _prodJournalRelease.TransDate = transDate;
        _prodJournalRelease.Storno    = stornoPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerJournalId</Name>
				<Source><![CDATA[
    public ProdJournalId parmCallerJournalId(ProdJournalId _callerJournalId = callerJournalId)
    {
        callerJournalId = _callerJournalId;
        return callerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParmForm</Name>
				<Source><![CDATA[
    public void setParmForm(ProdId _prodId)
    {
        this.parmJournalId('');
        this.parmJournalNameId(ProdParametersDim::find(ProdTable::find(_prodId).InventDimId).ReleaseJournalNameId_RU);
        this.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        this.parmProdId(_prodId);
        this.parmEndUpdate(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version = conpeek(packedClass, 1);
        container   base;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                super(base);
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdJournalCreateRelease_RU construct()
    {
        return new ProdJournalCreateRelease_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    static ProdJournalCreateRelease_RU initFromArgs(Args _args)
    {
        ProdJournalCreateRelease_RU prodJournalCreateRelease_RU;

        if (_args)
        {
            switch (_args.caller().name())
            {
                case formstr(ProdJournalTable):
                    prodJournalCreateRelease_RU = ProdJournalCreateRelease_RU::newProdJournalTableForm(_args);
                    break;

                case formstr(ProdJournalTransProd):
                    ProdJournalProd prodJournalProd = _args.record();
                    prodJournalCreateRelease_RU = ProdJournalCreateRelease_RU::newProdJournalProd(prodJournalProd);
                    break;

                case formstr(ProdJournalTransRoute),
                     formstr(ProdJournalTransJob):

                    ProdJournalRoute prodJournalRoute = _args.record();
                    ProdJournalTable prodJournalTable = ProdJournalTable::find(prodJournalRoute.JournalId);

                    prodJournalCreateRelease_RU = ProdJournalCreateRelease_RU::newProdJournalRoute(prodJournalRoute);
                    break;

                default:
                    throw error(strfmt("@SYS22828", funcname()));
            }
        }

        return prodJournalCreateRelease_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        ProdJournalTable            prodJournalTableRelease;

        ProdJournalId               journalId;

        if (_args && _args.caller().name() == formstr(ProdJournalTable) && _args.dataset() == tablenum(ProdJournalTable))
        {
            ProdJournalTable prodJournalTable = _args.record();
            select firstonly prodJournalTableRelease
                where prodJournalTableRelease.ProdRefJournalId_RU &&
                      prodJournalTableRelease.ProdRefJournalId_RU == prodJournalTable.JournalId &&
                      prodJournalTableRelease.ProdRefJournalType_RU == prodJournalTable.JournalType &&
                     !prodJournalTableRelease.Posted;

            journalId = prodJournalTableRelease.JournalId;
        }

        if (!journalId)
        {
            ProdJournalCreateRelease_RU prodJournalCreateRelease_RU = ProdJournalCreateRelease_RU::initFromArgs(_args);// --> new method returns class

            if (!prodJournalCreateRelease_RU.prompt())
            {
                return;
            }

            prodJournalCreateRelease_RU.runOperation();

            journalId = prodJournalCreateRelease_RU.usedProdJournalTable().JournalId;
        }

        if (journalId)
        {
            prodJournalTableRelease = ProdJournalTable::find(journalId);

            if (prodJournalTableRelease)
            {
                Args argsTable = new Args();
                argsTable.name(formstr(ProdJournalTable));
                argsTable.parmEnumType(enumnum(ProdJournalType));
                argsTable.parmEnum(ProdJournalType::ReleaseFromProduction_RU);
                argsTable.record(prodJournalTableRelease);

                FormRun formProdJournalTable = classfactory.formRunClass(argsTable);
                formProdJournalTable.init();
                formProdJournalTable.run();

                Object formRun = formProdJournalTable;
                JournalFormTable journalForm = formRun.journalForm();
                journalForm.openLinesForm();
            }
            else
            {
                warning(strfmt("@SYS21496", journalId));
            }
        }
        else
        {
            info("@SYS71699");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdJournalProd</Name>
				<Source><![CDATA[
    public static ProdJournalCreateRelease_RU newProdJournalProd(ProdJournalProd _prodJournalProd)
    {
        ProdJournalCreateRelease_RU journalCreate = ProdJournalCreateRelease_RU::construct();

        journalCreate.parmJournalId('');
        journalCreate.parmJournalNameId(ProdParametersDim::find(_prodJournalProd.prodTable().InventDimId).ReleaseJournalNameId_RU);
        journalCreate.parmTransDate(_prodJournalProd.TransDate);
        journalCreate.parmProdId(_prodJournalProd.ProdId);
        journalCreate.parmEndUpdate(_prodJournalProd.ProdFinished);
        journalCreate.parmCallerJournalId(_prodJournalProd.JournalId);

        journalCreate.init();

        return journalCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdJournalRoute</Name>
				<Source><![CDATA[
    public static ProdJournalCreateRelease_RU newProdJournalRoute(ProdJournalRoute _prodJournalRoute)
    {
        ProdJournalCreateRelease_RU journalCreate = ProdJournalCreateRelease_RU::construct();

        journalCreate.parmJournalId('');
        journalCreate.parmJournalNameId(ProdParametersDim::find(_prodJournalRoute.prodTable().InventDimId).ReleaseJournalNameId_RU);
        journalCreate.parmTransDate(_prodJournalRoute.TransDate);
        journalCreate.parmProdId(_prodJournalRoute.ProdId);
        journalCreate.parmEndUpdate(_prodJournalRoute.OprFinished);
        journalCreate.parmCallerJournalId(_prodJournalRoute.JournalId);

        journalCreate.init();

        return journalCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdJournalTableForm</Name>
				<Source><![CDATA[
    public static ProdJournalCreateRelease_RU newProdJournalTableForm(Args _args)
    {
        ProdJournalCreateRelease_RU journalCreate       = ProdJournalCreateRelease_RU::construct();
        ProdJournalTable            prodJournalTable    = _args.record();

        journalCreate.setParmForm(ProdTable::argsProdId(_args));
        journalCreate.parmCallerJournalId(prodJournalTable.JournalId);
        journalCreate.init();

        return journalCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStatusDecrease</Name>
				<Source><![CDATA[
    static ProdJournalCreateRelease_RU newStatusDecrease(ProdId  _prodId)
    {
        ProdJournalCreateRelease_RU journalCreate = ProdJournalCreateRelease_RU::construct();

        journalCreate.parmProdId(_prodId);
        journalCreate.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        journalCreate.parmEndUpdate(NoYes::No);
        journalCreate.parmJournalId('');
        journalCreate.parmJournalNameId(ProdTable::find(_prodId).prodParametersDim().ReleaseJournalNameId_RU);
        journalCreate.parmStornoPhysical_RU(InventParameters::find().StornoPhysicalPosting_RU);

        journalCreate.init();

        return journalCreate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
