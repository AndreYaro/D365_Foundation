<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetConsumptionCreateProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetConsumptionCreateProposal extends RunBase
{
    TransDate                   fromDate;
    TransDate                   toDate;
    QueryRun                    queryRun;
    LedgerJournalId             journalNum;

    // variables that do not need to be packed/unpacked
    Object                      callerForm;
    TmpAssetConsumptionProposal tmpAssetConsumptionProposal;

    DialogField                 dlgFromDate;
    DialogField                 dlgToDate;

    // <GCN>
    DialogField             dialogVoucherType_CN;
    LedgerVoucherTypeId_CN  voucherType_CN;
    boolean                 isFixedAssetJournal;
    boolean                 isChineseVoucher;
    // </GCN>

    // <GCN>
    #DEFINE.CurrentVersion(6)
    // </GCN>
    #LOCALMACRO.CurrentList
        toDate,
        fromDate,
        journalNum
        // <GCN>
        ,voucherType_CN
        // </GCN>
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>budgetJournal</Name>
				<Source><![CDATA[
    protected boolean budgetJournal()
    {
        return LedgerJournalTable::find(journalNum).JournalType == LedgerJournalType::AssetBudgets;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        // <GCN>
        isChineseVoucher = LedgerParameters::isChineseVoucher_CN();
        if (isChineseVoucher)
        {
            isFixedAssetJournal = (LedgerJournalTable::find(journalNum).JournalType == LedgerJournalType::Assets);
            if (isFixedAssetJournal)
            {
                dialog.addGroup("@GLS54929");
                dialogVoucherType_CN = dialog.addFieldValue(extendedTypeStr(LedgerVoucherTypeId_CN), voucherType_CN, "@GLS54929", "@GLS54489");
            }
        }
        // </GCN>
        dialog.addGroup("@SYS22526");

        if (this.budgetJournal())
        {
            dlgFromDate = dialog.addField(extendedTypeStr(TransDate),"@SYS5209");
            dlgFromDate.value(fromDate);
        }

        dlgToDate = dialog.addField(extendedTypeStr(TransDate),"@SYS14656");
        dlgToDate.value(toDate);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        if (this.budgetJournal())
            fromDate = dlgFromDate.value();
        // <GCN>
        if (isChineseVoucher && isFixedAssetJournal)
        {
            voucherType_CN = dialogVoucherType_CN.value();
        }
        // </GCN>
        toDate = dlgToDate.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInstance</Name>
				<Source><![CDATA[
    protected void initInstance(Args args)
    {
        Query           query = new Query(querystr(AssetProposal));
        QueryBuildRange rangePostingLayer;
        QueryBuildRange rangeDepreciation;

        tmpAssetConsumptionProposal = args.record();

        callerForm = args.caller();
        journalNum = args.caller().parmJournalNum();

        query.name("@SYS71157");

        rangeDepreciation = SysQuery::findOrCreateRange(
            query.dataSourceTable(tablenum(AssetBook)),
            fieldnum(AssetBook, Depreciation));
        rangeDepreciation.value(queryValue(NoYes::Yes));

        rangePostingLayer = SysQuery::findOrCreateRange(
            query.dataSourceTable(tablenum(AssetBookTable)),
            fieldnum(AssetBookTable, CurrentOperationsTax));
        rangePostingLayer.status(RangeStatus::Locked);
        rangePostingLayer.value(SysQuery::value(LedgerJournalTable::find(journalNum).CurrentOperationsTax));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProposal</Name>
				<Source><![CDATA[
    protected void insertProposal(
        AssetBook           _assetBook,
        AssetConsumptionQty _assetConsumptionQty,
        TransDate           _transDate)
    {
        if (_assetBook && _assetConsumptionQty && _transDate)
        {
            select firstonly tmpAssetConsumptionProposal
                   where tmpAssetConsumptionProposal.AssetId   == _assetBook.AssetId   &&
                         tmpAssetConsumptionProposal.BookId    == _assetBook.BookId    &&
                         tmpAssetConsumptionProposal.TransDate == _transDate;

            tmpAssetConsumptionProposal.Qty           = _assetConsumptionQty;
            tmpAssetConsumptionProposal.Depreciation  =
                    _assetBook.roundOffDepreciation(
                        CurrencyExchange::round(tmpAssetConsumptionProposal.Qty * _assetBook.DepreciationAmountUnit, Ledger::accountingCurrency()));

            boolean hasSameAccountingAndReportingCurrency = Ledger::reportingCurrency() == Ledger::accountingCurrency();
            boolean executeReportingCurrencyLogic;
            if (!hasSameAccountingAndReportingCurrency)
            {
                executeReportingCurrencyLogic = Ledger::reportingCurrency() != '';
            }

            if (executeReportingCurrencyLogic)
            {
                tmpAssetConsumptionProposal.DepreciationReportingCurrency  =
                    _assetBook.roundOffDepreciationReportingCurrency(
                        CurrencyExchange::round(tmpAssetConsumptionProposal.Qty * _assetBook.DepreciationAmountUnitReportingCurrency, Ledger::reportingCurrency()));
            } 
            else
            {
                tmpAssetConsumptionProposal.DepreciationReportingCurrency  = tmpAssetConsumptionProposal.Depreciation;
            }

            if (tmpAssetConsumptionProposal)
            {
                tmpAssetConsumptionProposal.update();
            }
            else
            {
                tmpAssetConsumptionProposal.AssetId       = _assetBook.AssetId;
                tmpAssetConsumptionProposal.BookId        = _assetBook.BookId;
                tmpAssetConsumptionProposal.TransDate     = _transDate;
                tmpAssetConsumptionProposal.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is in the dialog and if a select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #define.defaultBudgetModel('BudgetModel')

        AssetBook           assetBook;
        AssetTableMethod    assetTableMethod;
        AssetConsumptionQty consumption;

        if (!this.budgetJournal())
        {
            queryRun.query().dataSourceTable(tablenum(AssetBook)).addRange(fieldnum(AssetBook,Status)).value(queryValue(AssetStatus::Open));
        }
        else
        {
            queryRun.query().dataSourceTable(tablenum(AssetBook)).addRange(fieldnum(AssetBook,Status)).value(queryValue(AssetStatus::Open)+','+queryValue(AssetStatus::NoAcquisition));
        }

        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(AssetBook)))
            {
                assetBook = queryRun.get(tablenum(AssetBook));
                if (assetBook.depreciationProfile().Method == AssetDepreciationMethod::Consumption && assetBook.LastDepreciationDate <= toDate)
                {
                    if (!assetBook.ConsumptionFactorId)
                        error(strfmt("@FixedAssets:FA_MessageValidation_ConsumptionFactorMustBeSpecified",assetBook.AssetId,assetBook.BookId));
                    else
                    {
                        assetTableMethod = AssetTableMethod::construct(assetBook,toDate,this.budgetJournal() ? #defaultBudgetModel : '');
                        while (assetTableMethod.next())
                        {
                            consumption = assetTableMethod.calcQty();

                            if (consumption && (!this.budgetJournal() || (this.budgetJournal() && assetTableMethod.depDate() >= fromDate)))
                                this.insertProposal(assetBook,consumption,assetTableMethod.depDate());
                        }
                    }
                }
            }
        }

        callerForm.setAssetConsumptionProposal(tmpAssetConsumptionProposal);
        // <GCN>
        if (isChineseVoucher)
        {
            // Pass the Chinese voucher type to the AssetConsumptionProposal form.
            callerForm.parmVoucherType_CN(voucherType_CN);
        }
        // </GCN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>QueryRun</c> method has to
    ///    return a valid instance of the <c>QueryRun</c> class. If you change the return value to false, the
    ///    button will no longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version     = conpeek(packedClass,1);
        PackedQueryRun  packedQuery;

        // <GCN>
        #DEFINE.Version5(5)
        #LOCALMACRO.CurrentListV5
            toDate,
            fromDate,
            journalNum
        #ENDMACRO
        // </GCN>

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            // <GCN>
            case #Version5:
                [version,#CurrentListV5,packedQuery] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            // </GCN>
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        if (!toDate)
            ret = checkFailed("@SYS24455");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static AssetConsumptionCreateProposal construct(Args _args)
    {
        AssetConsumptionCreateProposal instance;

        instance = new AssetConsumptionCreateProposal();
        instance.initInstance(_args);
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS71094";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        AssetConsumptionCreateProposal  createProposal;

        if (!args || args.dataset() != tablenum(TmpAssetConsumptionProposal))
        {
            throw error(strfmt("@SYS25516",AssetConsumptionCreateProposal::description()));
        }

        createProposal = AssetConsumptionCreateProposal::construct(args);
        LedgerJournalId currentJournalNum = args.caller().parmJournalNum();

        createProposal.updatePostingLayer(LedgerJournalTable::find(currentJournalNum).CurrentOperationsTax);
        createProposal.saveLast();

        if (createProposal.prompt())
        {
            createProposal.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePostingLayer</Name>
				<Source><![CDATA[
    private void updatePostingLayer(CurrentOperationsTax _postingLayer, RangeStatus _rangeStatus = RangeStatus::Locked)
    {
        QueryBuildRange qr;
        Query query;

        query = queryRun.query();

        qr = SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(AssetBookTable)),
            fieldNum(AssetBookTable, CurrentOperationsTax));
        if (qr)
        {
            qr.value(queryValue(_postingLayer));
            qr.status(_rangeStatus);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>