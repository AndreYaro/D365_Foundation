<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjControlPeriodEliminate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjControlPeriodEliminate extends ProjControlPeriod implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initControlPeriodTable</Name>
				<Source><![CDATA[
    protected void initControlPeriodTable(ProjControlPeriodTable _newControlPeriodTable, ProjControlPeriodTable _originalControlPeriodTable)
    {
        _newControlPeriodTable.ActualContract = _originalControlPeriodTable.ActualContract;
        _newControlPeriodTable.ActualCostAmount = _originalControlPeriodTable.ActualCostAmount;
        _newControlPeriodTable.CompletePct = _originalControlPeriodTable.CompletePct;
        _newControlPeriodTable.CompletePctCalculated = _originalControlPeriodTable.CompletePctCalculated;
        _newControlPeriodTable.ctcContract = _originalControlPeriodTable.ctcContract;
        _newControlPeriodTable.ctcCostAmount = _originalControlPeriodTable.ctcCostAmount;
        _newControlPeriodTable.ModelId = _originalControlPeriodTable.ModelId;
        _newControlPeriodTable.Recalculated = _originalControlPeriodTable.Recalculated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>action</Name>
				<Source><![CDATA[
    protected void action()
    {
        ProjControlPeriodTable  localProjControlPeriodTable;
        ProjControlPeriodTable  updProjControlPeriodTable;
        ProjControlPosting      projControlPosting;
        ProjControlPeriod       projControlPeriod;
        ProjControlPosting      projControlPostingPosted;
        int i;

        // We Should NOT call super.
        if (queryRun.changed(tablenum(ProjWIPTable)))
        {
            i++;
            projWIPTable  = queryRun.get(tablenum(ProjWIPTable));
            this.progressSet(i);
            // If they don't have the same periodcode..... Don't even think about creating...

            if (this.parmProjPeriodId() != projWIPTable.PeriodId)
            {
                return;
            }

            this.progressSet(i);
            localProjControlPeriodTable = ProjControlPeriodTable::findLastPosted(projWIPTable.ProjId,projWIPTable.ControlId);
            if (!localProjControlPeriodTable)
            {
                // Eliminate without an estimate - Need to create and post the estimate
                if (ProjControlPeriodTable::existCreated(projWIPTable.ProjId,projWIPTable.ControlId))
                {
                    // Should not be here if a created status record exists
                    return;
                }
                else
                {
                    if (this.parmPeriodic() == true)
                    {
                        // Do not eliminate without estimate for periodic jobs
                        return;
                    }

                    ProjTable projTable = projWIPTable.projTable();
                    boolean contractLineUsed = projWIPTable.IsContractLineUsed;

                        // Verify we can eliminate without an estimate
                    if (ProjParameters::find().AllowEliminationWithoutEstimate)
                    {
                        if((contractLineUsed && contractLineBasedRevRecFeature) ||
                            ((projTable.Type == ProjType::FixedPrice || (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled()
                        && ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(projTable.ProjId, projTable.ProjInvoiceProjId, ProjContractBillingMethod::FixedPrice)))
                        && ProjRevRecHelper::getCompletePrincipleForProjTable(projTable)  == ProjCompletePrincip::CompletedContract))
                        {
                            // Create the estimate
                            projControlPeriod = ProjControlPeriod::construct(ProjControlType::Create);
                            projControlPeriod.parmProjCompletionMethod(ProjControlCompletionMethod::Automatic);
                            projControlPeriod.parmProjEstimateMethod(ProjEstimateMethod::TotalEstimateActual); // Set cost to complete zero
                            projControlPeriod.parmProjControlTypeOutput(this.parmProjControlTypeOutput());
                            projControlPeriod.parmShowInfoLog(this.parmShowInfoLog());
                            projControlPeriod.parmProjWIPProjId(projWIPTable.ProjId);
                            projControlPeriod.parmProjPeriodId(projWIPTable.PeriodId);
                            projControlPeriod.parmProjControlId(projWIPTable.ControlId);
                            projControlPeriod.parmProjPeriodTo(this.parmProjPeriodTo());
                            projControlPeriod.parmProjPeriodFrom(this.parmProjPeriodFrom());
                            projControlPeriod.parmProjTransDate(this.parmProjTransDate());
                            projControlPeriod.parmAcknowledgementDate(this.parmAcknowledgementDate());
                            projControlPeriod.parmIsContractLineUsed(contractLineUsed);
                            projControlPeriod.initQuery();
                            projControlPeriod.setQueryValues();
                            projControlPeriod.queryRun();
                            projControlPeriod.runOperation();
                            projControlPeriod = null;

                            //Post the estimate
                            projControlPostingPosted = new ProjControlPostingPosted();
                            projControlPostingPosted.parmProjControlTypeOutput(this.parmProjControlTypeOutput());
                            projControlPostingPosted.parmShowInfoLog(this.parmShowInfoLog());
                            projControlPostingPosted.parmProjPeriodId(projWIPTable.PeriodId);
                            projControlPostingPosted.parmProjId(projWIPTable.ProjId);
                            projControlPostingPosted.parmProjControlId(projWIPTable.ControlId);
                            projControlPostingPosted.parmTransDate(this.parmProjTransDate());
                            projControlPostingPosted.parmAcknowledgementDate(this.parmAcknowledgementDate());
                            projControlPostingPosted.parmPeriodTo(this.parmProjPeriodTo());
                            projControlPostingPosted.parmPeriodFrom(this.parmProjPeriodFrom());
                            projControlPostingPosted.parmIsContractLineUsed(projWIPTable.IsContractLineUsed);
                            projControlPostingPosted.initQuery();
                            projControlPostingPosted.setQueryValues();
                            projControlPostingPosted.queryRun();
                            projControlPostingPosted.runOperation();

                            // Setup to continue the elimination
                            localProjControlPeriodTable = ProjControlPeriodTable::findLastPosted(projWIPTable.ProjId,projWIPTable.ControlId);
                        
                        }
                    }
                }
            }
            if ((localProjControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Posted)
                && (!ProjControlPeriodTable::eliminated(projWIPTable.ProjId,projWIPTable.ControlId))
                && (!ProjControlPeriodTable::created(projWIPTable.ProjId,projWIPTable.ControlId))
                && (localProjControlPeriodTable.PeriodFrom == this.parmProjPeriodFrom()))
            {
                this.parmEliminate(true);
                this.parmProjWIPProjId(projWIPTable.ProjId);
                this.parmProjControlId(projWIPTable.ControlId);
                this.parmProjControlVersion(localProjControlPeriodTable.Version);

                if (this.prevPeriodIsValid() && localProjControlPeriodTable.allowEliminate())
                {
                    if ((this.parmContinuesPeriodes() && this.isContinuesPeriodesOk()) || !this.parmContinuesPeriodes())
                    {
                        if (! this.validate())
                        {
                            throw error("@SYS21628");
                        }

                        this.parmProjControlVersion((select maxof(Version) from projControlPeriodTable
                                                        where projControlPeriodTable.ControlId  == projWIPTable.ControlId &&
                                                              projControlPeriodTable.ProjId     == projWIPTable.ProjId    &&
                                                              projControlPeriodTable.PeriodFrom == this.parmProjPeriodFrom()).Version+1);

                        if (! this.checkCreatePeriod() ||
                             (this.checkCreatePeriod() && ! ProjControlPeriodTable::existCreated(this.parmProjWIPTable().ProjId,this.parmProjWIPTable().ControlId))
                            )
                        {
                            this.parmIsProjPeriodContolTableRecalculated(false);

                            if (this.checkCreatePeriod())
                            {
                                this.controlPeriodOld(true);
                                this.periodCreate();
                            }

                            this.actualCreate(false);

                            this.updateCostGroup();

                            this.calculatePeriodTotals();

                            if (this.parmShowInfoLog())
                            {
                                info(strfmt("@SYS90669",this.parmProjWIPProjId(),this.parmProjPeriodTo(),this.parmProjControlVersion()));
                            }
                        }

                        localProjControlPeriodTable.Elimination     = NoYes::Yes;
                        localProjControlPeriodTable.EliminationOrig = NoYes::Yes;

                        localProjControlPeriodTable.Version = this.parmProjControlVersion();

                        projControlPosting  = ProjControlPosting::new_ControlPosting(ProjControlType::Eliminate, localProjControlPeriodTable);
                        projControlPosting.parmTransDate(this.parmProjTransDate());
                        projControlPosting.runOperation();

                        updProjControlPeriodTable = ProjControlPeriodTable::find(projWIPTable.ProjId,projWIPTable.ControlId,this.parmProjPeriodFrom(),this.parmProjControlVersion(),true);
                        this.initControlPeriodTable(updProjControlPeriodTable, localProjControlPeriodTable);
                        updProjControlPeriodTable.update();

                        if (this.parmMarkProjectAsFinished())
                        {
                            this.markProjectAsFinished();
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canOutput</Name>
				<Source><![CDATA[
    boolean canOutput()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateCostGroup</Name>
				<Source><![CDATA[
    protected boolean canUpdateCostGroup()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        Dialog   d = Dialog::newFormnameRunbase(formstr(ProjControlPeriod_Eliminate),this);

        return this.dialogInternal(d);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markProjectAsFinished</Name>
				<Source><![CDATA[
    void markProjectAsFinished()
    {
        ProjTable       localprojTable;

        ttsbegin;

        update_recordset localprojTable setting Status = ProjStatus::Completed
                where   localprojTable.wipProject      == this.parmProjWIPProjId();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputIncludeEliminated</Name>
				<Source><![CDATA[
    NoYes outputIncludeEliminated()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevPeriodIsValid</Name>
				<Source><![CDATA[
    boolean prevPeriodIsValid()
    {
        boolean                 ret = true;
        ProjControlPeriodTable  nextProjControlPeriodTable;

        // Is there any records at all ??
        if ((select firstonly reverse projControlPeriodTable
                    where   projControlPeriodTable.ProjId       == projWIPTable.ProjId
                    &&      projControlPeriodTable.PeriodStatus != ProjControlPeriodStatus::Reversal).RecId)
        {
            select firstonly RecId, PeriodFrom from nextProjControlPeriodTable
                where   nextProjControlPeriodTable.ProjId       == projWIPTable.ProjId
                &&      nextProjControlPeriodTable.PeriodFrom   > this.parmProjPeriodFrom()
                &&      nextProjControlPeriodTable.PeriodStatus != ProjControlPeriodStatus::Reversal;

            if (nextProjControlPeriodTable.RecId && nextProjControlPeriodTable.PeriodFrom != this.parmProjPeriodFrom())
            {
                    ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription description()
    {
        return "@SYS75511";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>