<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAnalysisQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetAnalysisQuery</c> class is responsible for creating queries for budget analysis.
/// </summary>
public class BudgetAnalysisQuery
{
    Query   analysisQuery;
    boolean showTransactionData;

    const str BaseLedgerDimensionDataSourceName = "BaseLedgerDimension";
    const str FilterLedgerDimensionDataSourceName = "LedgerDimensionFilter";
    const str RelievedBudgetSourceTrackingDataSourceName = "RelievedBudgetSourceTracking";
    const str RelievingBudgetSourceTrackingDataSourceName = "RelievingBudgetSourceTracking";

    private boolean isLedgerBalanceFeatureEnabled = FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBudgetDimensionReferenceSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>BudgetDimensionFocusDimensionReference</c> table data source to the query.
    /// </summary>
    public void addBudgetDimensionReferenceSource()
    {
        TableId referenceTableId;
        fieldId budgetDimensionFieldId;
        fieldId ledgerDimensionFieldId;

        if (isLedgerBalanceFeatureEnabled)
        {
            referenceTableId = tableNum(BudgetBalanceReportingDimensionReference);
            budgetDimensionFieldId = fieldNum(BudgetBalanceReportingDimensionReference, BudgetLedgerDimension);
            ledgerDimensionFieldId = fieldNum(BudgetBalanceReportingDimensionReference, ReportingDimension);
        }
        else
        {
            referenceTableId = tableNum(BudgetDimensionFocusDimensionReference);
            budgetDimensionFieldId = fieldNum(BudgetDimensionFocusDimensionReference, BudgetLedgerDimension);
            ledgerDimensionFieldId = fieldNum(BudgetDimensionFocusDimensionReference, FocusLedgerDimension);
        }

        analysisQuery.addDataSource(referenceTableId);
        analysisQuery.dataSourceTable(referenceTableId).fetchMode(QueryFetchMode::One2One);
        analysisQuery.dataSourceTable(referenceTableId).relations(NoYes::No);
    
        if (showTransactionData)
        {
            analysisQuery.dataSourceTable(referenceTableId).
                addSelectionField(budgetDimensionFieldId);
        }
        else
        {
            analysisQuery.dataSourceTable(referenceTableId).
                addSelectionField(ledgerDimensionFieldId);
        }
    
        analysisQuery.dataSourceTable(referenceTableId).fields().dynamic(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBudgetTrackingDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the budget source tracking tables data sources to the query.
    /// </summary>
    /// <param name="_addBudgetSourceField">
    /// A boolean value to indicate whether to add the budget source field in query selection fields.
    /// </param>
    public void addBudgetTrackingDataSource(boolean _addBudgetSourceField = false)
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            analysisQuery.dataSourceTable(tableNum(BudgetBalanceReportingDimensionReference)).addDataSource(tableNum(BudgetsourceTrackingDetail));
            analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingDetail)).fetchMode(QueryFetchMode::One2One);
            analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingDetail)).addLink(
                fieldNum(BudgetsourceTrackingDetail, BudgetSourceLedgerDimension),
                fieldNum(BudgetBalanceReportingDimensionReference, BudgetLedgerDimension));
        }
        else
        {
            analysisQuery.dataSourceTable(tableNum(DimensionFocusLedgerDimensionReference)).addDataSource(tableNum(BudgetsourceTrackingDetail));
            analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingDetail)).fetchMode(QueryFetchMode::One2One);
            analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingDetail)).addLink(
                fieldNum(BudgetsourceTrackingDetail, BudgetSourceLedgerDimension),
                fieldNum(DimensionFocusLedgerDimensionReference, AccountEntryLedgerDimension));
        }

        analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingDetail)).addDataSource(tableNum(BudgetSourceTracking));
        analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).fetchMode(QueryFetchMode::One2One);
        analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).relations(NoYes::Yes);

        analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingDetail)).addSelectionField(fieldNum(BudgetsourceTrackingDetail, AccountingCurrencyAmount));
        analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingDetail)).addSelectionField(fieldNum(BudgetsourceTrackingDetail, IsCarryForward));

        if (showTransactionData)
        {
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).addSelectionField(fieldNum(BudgetSourceTracking, TrackingNumber));
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).addSelectionField(fieldNum(BudgetSourceTracking, TrackingDate));
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).addSelectionField(fieldNum(BudgetSourceTracking, BudgetSource));
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).fields().dynamic(NoYes::No);
        }
        else if (_addBudgetSourceField)
        {
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).addSelectionField(fieldNum(BudgetSourceTracking, BudgetSource));
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).fields().dynamic(NoYes::No);
        }
        else
        {
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).fields().dynamic(NoYes::No);
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).fields().clearFieldList();
        }
    
        analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingDetail)).fields().dynamic(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBudgetTransactionSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the budget transaction tables data sources to the query.
    /// </summary>
    public void addBudgetTransactionSource()
    {
        TableId referenceTableId;
        FieldId budgetDimensionFieldId;

        if (isLedgerBalanceFeatureEnabled)
        {
            referenceTableId = tableNum(BudgetBalanceReportingDimensionReference);
            budgetDimensionFieldId = fieldNum(BudgetBalanceReportingDimensionReference, BudgetLedgerDimension);
        }
        else
        {
            referenceTableId = tableNum(BudgetDimensionFocusDimensionReference);
            budgetDimensionFieldId = fieldNum(BudgetDimensionFocusDimensionReference, BudgetLedgerDimension);
        }

        analysisQuery.dataSourceTable(referenceTableId).addDataSource(tableNum(BudgetTransactionLine));
        analysisQuery.dataSourceTable(tableNum(BudgetTransactionLine)).fetchMode(QueryFetchMode::One2One);
        analysisQuery.dataSourceTable(tableNum(BudgetTransactionLine)).addLink(
            budgetDimensionFieldId,
            fieldNum(BudgetTransactionLine, LedgerDimension));
    
        analysisQuery.dataSourceTable(tableNum(BudgetTransactionLine)).addSelectionField(fieldNum(BudgetTransactionLine, AccountingCurrencyAmount));
    
        analysisQuery.dataSourceTable(tableNum(BudgetTransactionLine)).addDataSource(tableNum(BudgetTransactionHeader));
        analysisQuery.dataSourceTable(tableNum(BudgetTransactionHeader)).fetchMode(QueryFetchMode::One2One);
        analysisQuery.dataSourceTable(tableNum(BudgetTransactionHeader)).relations(NoYes::Yes);
    
        if (showTransactionData)
        {
            analysisQuery.dataSourceTable(tableNum(BudgetTransactionLine)).addSelectionField(fieldNum(BudgetTransactionLine, Date));
            analysisQuery.dataSourceTable(tableNum(BudgetTransactionHeader)).addSelectionField(fieldNum(BudgetTransactionHeader, TransactionNumber));
            analysisQuery.dataSourceTable(tableNum(BudgetTransactionHeader)).addSelectionField(fieldNum(BudgetTransactionHeader, RecId));
            analysisQuery.dataSourceTable(tableNum(BudgetTransactionHeader)).fields().dynamic(NoYes::No);
        }
        else
        {
            analysisQuery.dataSourceTable(tableNum(BudgetTransactionHeader)).fields().dynamic(NoYes::No);
            analysisQuery.dataSourceTable(tableNum(BudgetTransactionHeader)).fields().clearFieldList();
        }
    
        analysisQuery.dataSourceTable(tableNum(BudgetTransactionLine)).fields().dynamic(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDimensionAttributeFilterSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>DimensionAttributeValueCombination</c> and <c>MainAccount</c> tables data sources
    /// to the query that is used to filter the main account type.
    /// </summary>
    public void addDimensionAttributeFilterSource()
    {
        analysisQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry)).fetchMode(QueryFetchMode::One2One);
    
        analysisQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry))
            .addDataSource(tableNum(DimensionAttributeValueCombination), FilterLedgerDimensionDataSourceName);
    
        analysisQuery.dataSourceName(FilterLedgerDimensionDataSourceName).fetchMode(QueryFetchMode::One2One);
        analysisQuery.dataSourceName(FilterLedgerDimensionDataSourceName).relations(NoYes::No);
        analysisQuery.dataSourceName(FilterLedgerDimensionDataSourceName).addLink(fieldNum(GeneralJournalAccountEntry, LedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));
        analysisQuery.dataSourceName(FilterLedgerDimensionDataSourceName).fields().dynamic(NoYes::No);
        analysisQuery.dataSourceName(FilterLedgerDimensionDataSourceName).fields().clearFieldList();
    
        analysisQuery.dataSourceName(FilterLedgerDimensionDataSourceName)
            .addDataSource(tableNum(MainAccount));
        analysisQuery.dataSourceTable(tableNum(MainAccount)).fetchMode(QueryFetchMode::One2One);
        analysisQuery.dataSourceTable(tableNum(MainAccount)).relations(NoYes::No);
        analysisQuery.dataSourceTable(tableNum(MainAccount)).addLink(fieldNum(DimensionAttributeValueCombination, MainAccount), fieldNum(MainAccount, RecId));
        analysisQuery.dataSourceTable(tableNum(MainAccount)).fields().dynamic(NoYes::No);
        analysisQuery.dataSourceTable(tableNum(MainAccount)).fields().clearFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralJournalDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the general journal tables data sources to the query.
    /// </summary>
    public void addGeneralJournalDataSource()
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            analysisQuery.dataSourceTable(tableNum(GeneralLedgerBalanceReportingDimensionReference)).addDataSource(tableNum(GeneralJournalAccountEntry));
    
            analysisQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry)).fetchMode(QueryFetchMode::One2One);
            analysisQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry)).addLink(
                fieldNum(GeneralLedgerBalanceReportingDimensionReference, AccountEntryLedgerDimension),
                fieldNum(GeneralJournalAccountEntry, LedgerDimension));
        }
        else
        {
            analysisQuery.dataSourceTable(tableNum(DimensionFocusLedgerDimensionReference)).addDataSource(tableNum(GeneralJournalAccountEntry));
    
            analysisQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry)).fetchMode(QueryFetchMode::One2One);
            analysisQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry)).addLink(
                fieldNum(DimensionFocusLedgerDimensionReference, AccountEntryLedgerDimension),
                fieldNum(GeneralJournalAccountEntry, LedgerDimension));
        }
    
        analysisQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry)).addDataSource(tableNum(GeneralJournalEntry));
        analysisQuery.dataSourceTable(tableNum(GeneralJournalEntry)).fetchMode(QueryFetchMode::One2One);
        analysisQuery.dataSourceTable(tableNum(GeneralJournalEntry)).relations(NoYes::Yes);
    
        analysisQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry)).addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount));
    
        if (showTransactionData)
        {
            analysisQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry)).addSelectionField(fieldNum(GeneralJournalAccountEntry, RecId));
            analysisQuery.dataSourceTable(tableNum(GeneralJournalEntry)).addSelectionField(fieldNum(GeneralJournalEntry, AccountingDate));
            analysisQuery.dataSourceTable(tableNum(GeneralJournalEntry)).addSelectionField(fieldNum(GeneralJournalEntry, DocumentNumber));
            analysisQuery.dataSourceTable(tableNum(GeneralJournalEntry)).addSelectionField(fieldNum(GeneralJournalEntry, JournalNumber));
            analysisQuery.dataSourceTable(tableNum(GeneralJournalEntry)).fields().dynamic(NoYes::No);
        }
        else
        {
            analysisQuery.dataSourceTable(tableNum(GeneralJournalEntry)).fields().dynamic(NoYes::No);
            analysisQuery.dataSourceTable(tableNum(GeneralJournalEntry)).fields().clearFieldList();
        }
    
        analysisQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry)).fields().dynamic(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLedgerDimensionReferenceSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>DimensionFocusLedgerDimensionReference</c> table data source to the query.
    /// </summary>
    public void addLedgerDimensionReferenceSource()
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            analysisQuery.addDataSource(tableNum(BudgetBalanceReportingDimensionReference));
    
            analysisQuery.dataSourceTable(tableNum(BudgetBalanceReportingDimensionReference)).fetchMode(QueryFetchMode::One2One);
            analysisQuery.dataSourceTable(tableNum(BudgetBalanceReportingDimensionReference)).relations(NoYes::No);
    
            if (showTransactionData)
            {
                analysisQuery.dataSourceTable(tableNum(BudgetBalanceReportingDimensionReference)).
                addSelectionField(fieldNum(BudgetBalanceReportingDimensionReference, BudgetLedgerDimension));
            }
            else
            {
                analysisQuery.dataSourceTable(tableNum(BudgetBalanceReportingDimensionReference)).
                addSelectionField(fieldNum(BudgetBalanceReportingDimensionReference, ReportingDimension));
            }
    
            analysisQuery.dataSourceTable(tableNum(BudgetBalanceReportingDimensionReference)).fields().dynamic(NoYes::No);
        }
        else
        {
            analysisQuery.addDataSource(tableNum(DimensionFocusLedgerDimensionReference));
    
            analysisQuery.dataSourceTable(tableNum(DimensionFocusLedgerDimensionReference)).fetchMode(QueryFetchMode::One2One);
            analysisQuery.dataSourceTable(tableNum(DimensionFocusLedgerDimensionReference)).relations(NoYes::No);
    
            if (showTransactionData)
            {
                analysisQuery.dataSourceTable(tableNum(DimensionFocusLedgerDimensionReference)).
                addSelectionField(fieldNum(DimensionFocusLedgerDimensionReference, AccountEntryLedgerDimension));
            }
            else
            {
                analysisQuery.dataSourceTable(tableNum(DimensionFocusLedgerDimensionReference)).
                addSelectionField(fieldNum(DimensionFocusLedgerDimensionReference, FocusLedgerDimension));
            }
    
            analysisQuery.dataSourceTable(tableNum(DimensionFocusLedgerDimensionReference)).fields().dynamic(NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralLedgerDimensionReferenceSource</Name>
				<Source><![CDATA[
    internal void addGeneralLedgerDimensionReferenceSource()
    {
        analysisQuery.addDataSource(tableNum(GeneralLedgerBalanceReportingDimensionReference));
    
        analysisQuery.dataSourceTable(tableNum(GeneralLedgerBalanceReportingDimensionReference)).fetchMode(QueryFetchMode::One2One);
        analysisQuery.dataSourceTable(tableNum(GeneralLedgerBalanceReportingDimensionReference)).relations(NoYes::No);
    
        if (showTransactionData)
        {
            analysisQuery.dataSourceTable(tableNum(GeneralLedgerBalanceReportingDimensionReference)).
            addSelectionField(fieldNum(GeneralLedgerBalanceReportingDimensionReference, AccountEntryLedgerDimension));
        }
        else
        {
            analysisQuery.dataSourceTable(tableNum(GeneralLedgerBalanceReportingDimensionReference)).
            addSelectionField(fieldNum(GeneralLedgerBalanceReportingDimensionReference, ReportingDimension));
        }
    
        analysisQuery.dataSourceTable(tableNum(GeneralLedgerBalanceReportingDimensionReference)).fields().dynamic(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRelievingBudgetTrackingDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the budget source tracking relieving tables data sources to the query.
    /// </summary>
    /// <param name="_addBudgetSourceField">
    /// A boolean value to indicate whether to add budget source field in query selection fields.
    /// </param>
    public void addRelievingBudgetTrackingDataSource(boolean _addBudgetSourceField)
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            if (analysisQuery.dataSourceTable(tableNum(GeneralLedgerBalanceReportingDimensionReference)))
            {
                analysisQuery.dataSourceTable(tableNum(GeneralLedgerBalanceReportingDimensionReference)).addDataSource(tableNum(BudgetsourceTrackingDetail));
                analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingDetail)).fetchMode(QueryFetchMode::One2One);
                analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingDetail)).addLink(
                    fieldNum(BudgetsourceTrackingDetail, BudgetSourceLedgerDimension),
                    fieldNum(GeneralLedgerBalanceReportingDimensionReference, AccountEntryLedgerDimension));
            }
            else
            {
                analysisQuery.dataSourceTable(tableNum(BudgetBalanceReportingDimensionReference)).addDataSource(tableNum(BudgetsourceTrackingDetail));
                analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingDetail)).fetchMode(QueryFetchMode::One2One);
                analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingDetail)).addLink(
                    fieldNum(BudgetsourceTrackingDetail, BudgetSourceLedgerDimension),
                    fieldNum(BudgetBalanceReportingDimensionReference, BudgetLedgerDimension));
            }

        }
        else
        {
            analysisQuery.dataSourceTable(tableNum(DimensionFocusLedgerDimensionReference)).addDataSource(tableNum(BudgetsourceTrackingDetail));
            analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingDetail)).fetchMode(QueryFetchMode::One2One);
            analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingDetail)).addLink(
                fieldNum(BudgetsourceTrackingDetail, BudgetSourceLedgerDimension),
                fieldNum(DimensionFocusLedgerDimensionReference, AccountEntryLedgerDimension));
        }
    
        analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingDetail)).fields().dynamic(NoYes::No);
        analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingDetail)).fields().clearFieldList();
    
        analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingDetail)).addDataSource(tableNum(BudgetSourceTracking), RelievedBudgetSourceTrackingDataSourceName);
        analysisQuery.dataSourceName(RelievedBudgetSourceTrackingDataSourceName).fetchMode(QueryFetchMode::One2One);
        analysisQuery.dataSourceName(RelievedBudgetSourceTrackingDataSourceName).relations(NoYes::Yes);
    
        if (showTransactionData || _addBudgetSourceField)
        {
            analysisQuery.dataSourceName(RelievedBudgetSourceTrackingDataSourceName).addSelectionField(fieldNum(BudgetSourceTracking, BudgetSource));
            analysisQuery.dataSourceName(RelievedBudgetSourceTrackingDataSourceName).fields().dynamic(NoYes::No);
        }
        else
        {
            analysisQuery.dataSourceName(RelievedBudgetSourceTrackingDataSourceName).fields().dynamic(NoYes::No);
            analysisQuery.dataSourceName(RelievedBudgetSourceTrackingDataSourceName).fields().clearFieldList();
        }
    
        analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingDetail)).fields().dynamic(NoYes::No);
    
        analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingDetail)).addDataSource(tableNum(BudgetsourceTrackingRelievingDetail));
        analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingRelievingDetail)).fetchMode(QueryFetchMode::One2One);
        analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingRelievingDetail)).relations(NoYes::Yes);
    
        analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingRelievingDetail)).addSelectionField(fieldNum(BudgetsourceTrackingRelievingDetail, AccountingCurrencyAmount));
    
        if (showTransactionData)
        {
            analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingRelievingDetail)).addSelectionField(fieldNum(BudgetsourceTrackingRelievingDetail, RelievedBudgetSourceTrackingDetail));
        }
    
        analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingRelievingDetail)).fields().dynamic(NoYes::No);
    
        analysisQuery.dataSourceTable(tableNum(BudgetsourceTrackingRelievingDetail)).addDataSource(tableNum(BudgetSourceTracking), RelievingBudgetSourceTrackingDataSourceName);
        analysisQuery.dataSourceName(RelievingBudgetSourceTrackingDataSourceName).fetchMode(QueryFetchMode::One2One);
        analysisQuery.dataSourceName(RelievingBudgetSourceTrackingDataSourceName).relations(NoYes::Yes);
    
        if (showTransactionData)
        {
            analysisQuery.dataSourceName(RelievingBudgetSourceTrackingDataSourceName).addSelectionField(fieldNum(BudgetSourceTracking, TrackingNumber));
            analysisQuery.dataSourceName(RelievingBudgetSourceTrackingDataSourceName).addSelectionField(fieldNum(BudgetSourceTracking, TrackingDate));
            analysisQuery.dataSourceName(RelievingBudgetSourceTrackingDataSourceName).addSelectionField(fieldNum(BudgetSourceTracking, BudgetSource));
            analysisQuery.dataSourceName(RelievingBudgetSourceTrackingDataSourceName).fields().dynamic(NoYes::No);
        }
        else
        {
            analysisQuery.dataSourceName(RelievingBudgetSourceTrackingDataSourceName).fields().dynamic(NoYes::No);
            analysisQuery.dataSourceName(RelievingBudgetSourceTrackingDataSourceName).fields().clearFieldList();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyBudgetSourceTrackingUserParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the filter to the budget source tracking tables.
    /// </summary>
    /// <param name="_request">
    /// A class that contains user selected parameters.
    /// </param>
    /// <param name="_category">
    /// An enum value of type <c>BudgetControlCategory</c>.
    /// </param>
    public void applyBudgetSourceTrackingUserParameters(
        BudgetAnalysisRequest   _request,
        BudgetControlCategory   _category)
    {
        QueryBuildDataSource budgetSourceTrackingDS;
        QueryBuildDataSource budgetSourceTrackingDetailDS  = analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetail));
        QueryBuildDataSource relievedSourceTrackingDS;
    
        if (analysisQuery.dataSourceName(RelievingBudgetSourceTrackingDataSourceName))
        {
            budgetSourceTrackingDS = analysisQuery.dataSourceName(RelievingBudgetSourceTrackingDataSourceName);
        }
        else
        {
            budgetSourceTrackingDS = analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking));
        }
    
        this.applySourceTrackingClosingEntryFilter(_request.parmIncludeClosingEntries());
    
        analysisQuery.addQueryFilter(budgetSourceTrackingDS, fieldStr(BudgetSourceTracking, TrackingDate)).value(SysQuery::range(_request.parmFromDate(), _request.parmToDate()));
        analysisQuery.addQueryFilter(budgetSourceTrackingDS, fieldStr(BudgetSourceTracking, Status)).value(queryValue(BudgetSourceTrackingStatus::Confirmed));
        analysisQuery.addQueryFilter(budgetSourceTrackingDS, fieldStr(BudgetSourceTracking, IsSimulation)).value(queryValue(NoYes::No));
        analysisQuery.addQueryFilter(budgetSourceTrackingDS, fieldStr(BudgetSourceTracking, IsDeletePending)).value(queryValue(NoYes::No));
    
        if (analysisQuery.dataSourceName(RelievedBudgetSourceTrackingDataSourceName))
        {
            relievedSourceTrackingDS = analysisQuery.dataSourceName(RelievedBudgetSourceTrackingDataSourceName);
            analysisQuery.addQueryFilter(relievedSourceTrackingDS, fieldStr(BudgetSourceTracking, TrackingDate)).value(SysQuery::range(_request.parmFromDate(), _request.parmToDate()));
            analysisQuery.addQueryFilter(relievedSourceTrackingDS, fieldStr(BudgetSourceTracking, Status)).value(queryValue(BudgetSourceTrackingStatus::Confirmed));
            analysisQuery.addQueryFilter(relievedSourceTrackingDS, fieldStr(BudgetSourceTracking, IsSimulation)).value(queryValue(NoYes::No));
            analysisQuery.addQueryFilter(relievedSourceTrackingDS, fieldStr(BudgetSourceTracking, IsDeletePending)).value(queryValue(NoYes::No));
        }
        else
        {
            relievedSourceTrackingDS = budgetSourceTrackingDS;
        }
    
        analysisQuery.addQueryFilter(relievedSourceTrackingDS, fieldStr(BudgetSourceTracking, Category)).value(queryValue(_category));
    
        if (_category == BudgetControlCategory::Encumbrance)
        {
            analysisQuery.addQueryFilter(relievedSourceTrackingDS, fieldStr(BudgetSourceTracking, Category)).value(queryValue(BudgetControlCategory::EncumbranceReduction));
        }
    
        analysisQuery.addQueryFilter(budgetSourceTrackingDetailDS, fieldStr(BudgetSourceTrackingDetail, PrimaryLedger)).value(queryValue(Ledger::current()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyBudgetTransactionBudgetControlFilter</Name>
				<Source><![CDATA[
    private void applyBudgetTransactionBudgetControlFilter()
    {
        analysisQuery.dataSourceTable(tableNum(BudgetTransactionLine)).addDataSource(tableNum(BudgetSource));
        analysisQuery.dataSourceTable(tableNum(BudgetSource)).fetchMode(QueryFetchMode::One2One);
        analysisQuery.dataSourceTable(tableNum(BudgetSource)).relations(true);
        analysisQuery.dataSourceTable(tableNum(BudgetSource)).joinMode(JoinMode::ExistsJoin);
        analysisQuery.dataSourceTable(tableNum(BudgetSource)).fields().dynamic(NoYes::No);
        analysisQuery.dataSourceTable(tableNum(BudgetSource)).fields().clearFieldList();

        analysisQuery.dataSourceTable(tableNum(BudgetSource)).addDataSource(tableNum(BudgetSourceTracking));
        analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).fetchMode(QueryFetchMode::One2One);
        analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).relations(true);
        analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).joinMode(JoinMode::ExistsJoin);
        analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).fields().dynamic(NoYes::No);
        analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).fields().clearFieldList();

        analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).addDataSource(tableNum(BudgetSourceTrackingDetail));
        analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetail)).fetchMode(QueryFetchMode::One2One);
        analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetail)).relations(true);
        analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetail)).joinMode(JoinMode::ExistsJoin);
        analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetail)).fields().dynamic(NoYes::No);
        analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetail)).fields().clearFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyBudgetTransactionClosingEntryFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the closing entries filter to the budget source tracking tables.
    /// </summary>
    /// <param name="_includeClosingEntry">
    /// A boolean value that indicates whether to include or exclude closing entries.
    /// </param>
    [SysObsolete('This method will be deprecated, use applyBudgetTransactionBudgetControlFilter to add budget source tracking filter, and excludeBudgetTransactionClosingEntry to apply closing entry filter.', false, 11\08\2023)]
    public void applyBudgetTransactionClosingEntryFilter(boolean _includeClosingEntry)
    {
        if (!_includeClosingEntry)
        {
            analysisQuery.dataSourceTable(tableNum(BudgetTransactionLine)).addDataSource(tableNum(BudgetSource));
            analysisQuery.dataSourceTable(tableNum(BudgetSource)).fetchMode(QueryFetchMode::One2One);
            analysisQuery.dataSourceTable(tableNum(BudgetSource)).relations(true);
            analysisQuery.dataSourceTable(tableNum(BudgetSource)).joinMode(JoinMode::ExistsJoin);
            analysisQuery.dataSourceTable(tableNum(BudgetSource)).fields().dynamic(NoYes::No);
            analysisQuery.dataSourceTable(tableNum(BudgetSource)).fields().clearFieldList();
    
            analysisQuery.dataSourceTable(tableNum(BudgetSource)).addDataSource(tableNum(BudgetSourceTracking));
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).fetchMode(QueryFetchMode::One2One);
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).relations(true);
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).joinMode(JoinMode::ExistsJoin);
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).fields().dynamic(NoYes::No);
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).fields().clearFieldList();
    
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTracking)).addDataSource(tableNum(BudgetSourceTrackingDetail));
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetail)).fetchMode(QueryFetchMode::One2One);
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetail)).relations(true);
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetail)).joinMode(JoinMode::ExistsJoin);
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetail)).fields().dynamic(NoYes::No);
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetail)).fields().clearFieldList();
    
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetail)).addDataSource(tableNum(BudgetSourceTrackingDetailClosing));
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetailClosing)).fetchMode(QueryFetchMode::One2One);
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetailClosing)).relations(true);
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetailClosing)).joinMode(JoinMode::NoExistsJoin);
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetailClosing)).fields().dynamic(NoYes::No);
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetailClosing)).fields().clearFieldList();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludeBudgetTransactionClosingEntry</Name>
				<Source><![CDATA[
    private void excludeBudgetTransactionClosingEntry()
    {
        // When the Include closing entries option is not selected, we can exclude the
        // closing entries by filtering out the budget transactions that have an associated
        // BudgetSourceTrackingDetailClosing record. Otherwise, if the option is selected
        // to include closing entries, we just don't apply this filter.
        analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetail)).addDataSource(tableNum(BudgetSourceTrackingDetailClosing));
        analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetailClosing)).fetchMode(QueryFetchMode::One2One);
        analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetailClosing)).relations(true);
        analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetailClosing)).joinMode(JoinMode::NoExistsJoin);
        analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetailClosing)).fields().dynamic(NoYes::No);
        analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetailClosing)).fields().clearFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyBudgetTransactionUserParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the filter to the budget transaction tables.
    /// </summary>
    /// <param name="_request">
    /// A class that contains user selected parameters.
    /// </param>
    /// <param name="_budgetType">
    /// An enum value of type <c>BudgetType</c>.
    /// </param>
    public void applyBudgetTransactionUserParameters(
        BudgetAnalysisRequest    _request,
        BudgetType               _budgetType)
    {
        QueryBuildDataSource budgetTransactionHeaderDS = analysisQuery.dataSourceTable(tableNum(BudgetTransactionHeader));
        QueryBuildDataSource budgetTransactionLineDS   = analysisQuery.dataSourceTable(tableNum(BudgetTransactionLine));

        analysisQuery.addQueryFilter(budgetTransactionHeaderDS, fieldStr(BudgetTransactionHeader, TransactionStatus)).value(queryValue(BudgetTransactionStatus::Completed));
        analysisQuery.addQueryFilter(budgetTransactionHeaderDS, fieldStr(BudgetTransactionHeader, PrimaryLedger)).value(queryValue(Ledger::current()));

        analysisQuery.addQueryFilter(budgetTransactionLineDS, fieldStr(BudgetTransactionLine, Date)).value(SysQuery::range(_request.parmFromDate(), _request.parmToDate()));
        analysisQuery.addQueryFilter(budgetTransactionLineDS, fieldStr(BudgetTransactionLine, BudgetType)).value(queryValue(_budgetType));

        if (_request.parmColumnSet() != BudgetAnalysisColumnSet::RevenueBudget)
        {
            if (BudgetAnalysisIncludeClosingLedgerAcctFlight::instance().isEnabled())
            {
                // Apply the filter to make sure only budget controlled transactions are selected
                this.applyBudgetTransactionBudgetControlFilter();

                if (!_request.parmIncludeClosingEntries())
                {
                    this.excludeBudgetTransactionClosingEntry();
                }
            }
            else
            {
                this.applyBudgetTransactionClosingEntryFilter(_request.parmIncludeClosingEntries());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyBudgetTransBudgetTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the budget transaction type filter to the budget transaction tables.
    /// </summary>
    /// <param name="_budgetAnalysisBudgetType">
    /// An enum value of type <c>BudgetAnalysisBudgetType</c>.
    /// </param>
    public void applyBudgetTransBudgetTransactionType(BudgetAnalysisBudgetType _budgetAnalysisBudgetType)
    {
        QueryBuildDataSource budgetTransactionHeaderDS = analysisQuery.dataSourceTable(tableNum(BudgetTransactionHeader));
    
        analysisQuery.addQueryFilter(budgetTransactionHeaderDS ,fieldStr(BudgetTransactionHeader, BudgetTransactionType)).value(this.getBudgetTypeFilterValue(_budgetAnalysisBudgetType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyBudgetTransCarryForwardRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the carry-forward filter to the budget transaction tables.
    /// </summary>
    /// <param name="_carryForwardTransactions">
    /// An boolean value that indicates whether to filter carry-forward transactions.
    /// </param>
    public void applyBudgetTransCarryForwardRange(boolean _carryForwardTransactions)
    {
        QueryBuildDataSource budgetTransactionHeaderDS  = analysisQuery.dataSourceTable(tableNum(BudgetTransactionHeader));
    
        if (_carryForwardTransactions)
        {
            analysisQuery.addQueryFilter(budgetTransactionHeaderDS, (fieldStr(BudgetTransactionHeader, BudgetTransactionType))).value(queryValue(BudgetTransactionType::CarryForwardBudget));
        }
        else
        {
            analysisQuery.addQueryFilter(budgetTransactionHeaderDS, (fieldStr(BudgetTransactionHeader, BudgetTransactionType))).value(SysQuery::valueNot(BudgetTransactionType::CarryForwardBudget));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDimensionHierarchyFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the dimension hierarchy filter to the dimension reference tables.
    /// </summary>
    /// <param name="_dimensionHierarchyId">
    /// The dimension hierarchy ID to be used as filter.
    /// </param>
    public void applyDimensionHierarchyFilter(DimensionHierarchyId _dimensionHierarchyId)
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            if (analysisQuery.dataSourceTable(tableNum(GeneralLedgerBalanceReportingDimensionReference)))
            {
                analysisQuery.dataSourceTable(tableNum(GeneralLedgerBalanceReportingDimensionReference)).addRange(fieldNum(GeneralLedgerBalanceReportingDimensionReference, FocusDimensionHierarchy)).value(queryValue(_dimensionHierarchyId));
            }
            else
            {
                analysisQuery.dataSourceTable(tableNum(BudgetBalanceReportingDimensionReference)).addRange(fieldNum(BudgetBalanceReportingDimensionReference, FocusDimensionHierarchy)).value(queryValue(_dimensionHierarchyId));
            }
        }
        else
        {
            if (analysisQuery.dataSourceTable(tableNum(DimensionFocusLedgerDimensionReference)))
            {
                analysisQuery.dataSourceTable(tableNum(DimensionFocusLedgerDimensionReference)).addRange(fieldNum(DimensionFocusLedgerDimensionReference, FocusDimensionHierarchy)).value(queryValue(_dimensionHierarchyId));
            }
            else
            {
                analysisQuery.dataSourceTable(tableNum(BudgetDimensionFocusDimensionReference)).addRange(fieldNum(BudgetDimensionFocusDimensionReference, FocusDimensionHierarchy)).value(queryValue(_dimensionHierarchyId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyFocusLedgerDimensionFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the dimension focus ledger dimension filter to the dimension reference tables.
    /// </summary>
    /// <param name="_focusLedgerDimension">
    /// The record ID of <c>DimensionAttributeValueCombination</c> table.
    /// </param>
    public void applyFocusLedgerDimensionFilter(LedgerDimensionAccount _focusLedgerDimension)
    {
        if (_focusLedgerDimension)
        {
            if (analysisQuery.dataSourceTable(tableNum(DimensionFocusLedgerDimensionReference)))
            {
                analysisQuery.dataSourceTable(tableNum(DimensionFocusLedgerDimensionReference)).addRange(fieldNum(DimensionFocusLedgerDimensionReference, FocusLedgerDimension)).value(queryValue(_focusLedgerDimension));
            }
            else
            {
                analysisQuery.dataSourceTable(tableNum(BudgetDimensionFocusDimensionReference)).addRange(fieldNum(BudgetDimensionFocusDimensionReference, FocusLedgerDimension)).value(queryValue(_focusLedgerDimension));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyReportingDimensionFilter</Name>
				<Source><![CDATA[
    public void applyReportingDimensionFilter(GeneralLedgerBalanceReportingDimensionsRecId _reportingDimension)
    {
        if (_reportingDimension)
        {
            if (analysisQuery.dataSourceTable(tableNum(GeneralLedgerBalanceReportingDimensionReference)))
            {
                analysisQuery.dataSourceTable(tableNum(GeneralLedgerBalanceReportingDimensionReference))
                    .addRange(fieldNum(GeneralLedgerBalanceReportingDimensionReference, ReportingDimension))
                    .value(queryValue(_reportingDimension));
            }
            else
            {
                analysisQuery.dataSourceTable(tableNum(BudgetBalanceReportingDimensionReference))
                    .addRange(fieldNum(BudgetBalanceReportingDimensionReference, ReportingDimension))
                    .value(queryValue(_reportingDimension));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyGeneralJorunalClosingEntryFilter</Name>
				<Source><![CDATA[
    private void applyGeneralJorunalClosingEntryFilter(boolean _includeClosingEntry)
    {
        QueryBuildDataSource fiscalCalendarPeriodDS;
    
        if (!_includeClosingEntry)
        {
            fiscalCalendarPeriodDS = this.parmAnalysisQuery().
                dataSourceTable(tableNum(GeneralJournalEntry)).addDataSource(tableNum(FiscalCalendarPeriod));
            fiscalCalendarPeriodDS.fields().dynamic(NoYes::No);
            fiscalCalendarPeriodDS.fields().clearFieldList();
            fiscalCalendarPeriodDS.relations(NoYes::Yes);
            fiscalCalendarPeriodDS.joinMode(JoinMode::ExistsJoin);
            fiscalCalendarPeriodDS.addRange(fieldNum(FiscalCalendarPeriod, Type)).value(SysQuery::valueNot(PeriodType::Closing));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyGeneralJournalUserParameterRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the filter to the general journal tables.
    /// </summary>
    /// <param name="_request">
    /// A class that contains user selected parameters.
    /// </param>
    /// <param name="_mainAccountType">
    /// An enum value of type <c>DimensionLedgerAccountType</c>.
    /// </param>
    public void applyGeneralJournalUserParameterRange(
        BudgetAnalysisRequest       _request,
        DimensionLedgerAccountType  _mainAccountType)
    {
        QueryBuildDataSource generalJournalEntryDS  = analysisQuery.dataSourceTable(tableNum(GeneralJournalEntry));
        QueryBuildDataSource mainAccountDS          = analysisQuery.dataSourceTable(tableNum(MainAccount));
                
        analysisQuery.addQueryFilter(generalJournalEntryDS, fieldStr(GeneralJournalEntry, AccountingDate)).value(SysQuery::range(_request.parmFromDate(), _request.parmToDate()));
        GeneralJournalEntry::addRangeForPostingLayer(generalJournalEntryDS, fieldNum(GeneralJournalEntry, PostingLayer), _request.parmPostingLayer());
        GeneralJournalEntry::addSecureRangeForLedger(generalJournalEntryDS);
    
        analysisQuery.addQueryFilter(mainAccountDS, fieldStr(MainAccount, Type)).value(queryValue(_mainAccountType));
        MainAccount::addSecureRangeForChartOfAccounts(mainAccountDS);
    
        this.applyGeneralJorunalClosingEntryFilter(_request.parmIncludeClosingEntries());
    }

]]></Source>
			</Method>
			<Method>
				<Name>applySourceTrackingClosingEntryFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the closing entries filter to the budget source tracking tables.
    /// </summary>
    /// <param name="_includeClosingEntry">
    /// A boolean value that indicates whether to include or exclude closing entries.
    /// </param>
    public void applySourceTrackingClosingEntryFilter(boolean _includeClosingEntry)
    {
        if (!_includeClosingEntry)
        {
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetail)).addDataSource(tableNum(BudgetSourceTrackingDetailClosing));
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetailClosing)).fetchMode(QueryFetchMode::One2One);
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetailClosing)).relations(true);
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetailClosing)).joinMode(JoinMode::NoExistsJoin);
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetailClosing)).fields().dynamic(NoYes::No);
            analysisQuery.dataSourceTable(tableNum(BudgetSourceTrackingDetailClosing)).fields().clearFieldList();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetTypeFilterValue</Name>
				<Source><![CDATA[
    private str getBudgetTypeFilterValue(BudgetAnalysisBudgetType _budgetAnalysisBudgetType)
    {
        str filterValue;
    
        switch (_budgetAnalysisBudgetType)
        {
            case BudgetAnalysisBudgetType::CarryForwardOnlyBudget:
                filterValue = queryValue(BudgetTransactionType::CarryForwardBudget);
                break;
    
            case BudgetAnalysisBudgetType::OriginalBudget:
                filterValue = queryValue(BudgetTransactionType::OriginalBudget) + "," +
                queryValue(BudgetTransactionType::Project) + "," +
                queryValue(BudgetTransactionType::PurchForecast) + "," +
                queryValue(BudgetTransactionType::SalesForecast) + "," +
                queryValue(BudgetTransactionType::FixedAsset);
                break;
    
            case BudgetAnalysisBudgetType::RevisedBudget:
                filterValue = queryValue(BudgetTransactionType::CarryForwardBudget) + ",";
    
            case BudgetAnalysisBudgetType::RevisedBudgetLessCarryForward:
                filterValue += queryValue(BudgetTransactionType::Amendment) + "," +
                    queryValue(BudgetTransactionType::Apportionment) + "," +
                    queryValue(BudgetTransactionType::FixedAsset) + "," +
                    queryValue(BudgetTransactionType::OriginalBudget) + "," +
                    queryValue(BudgetTransactionType::PreliminaryBudget) + "," +
                    queryValue(BudgetTransactionType::Project) + "," +
                    queryValue(BudgetTransactionType::PurchForecast) + "," +
                    queryValue(BudgetTransactionType::SalesForecast) + "," +
                    queryValue(BudgetTransactionType::Transfer);
                break;
        }
    
        return filterValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize()
    {
        analysisQuery = new Query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAnalysisQuery</Name>
				<Source><![CDATA[
    public Query parmAnalysisQuery(Query _analysisQuery = analysisQuery)
    {
        analysisQuery = _analysisQuery;
    
        return analysisQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShowTransactionData</Name>
				<Source><![CDATA[
    private void setShowTransactionData(boolean _showTransactionData)
    {
        showTransactionData = _showTransactionData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForSummary</Name>
				<Source><![CDATA[
    public static BudgetAnalysisQuery constructForSummary()
    {
        return new BudgetAnalysisQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForTransaction</Name>
				<Source><![CDATA[
    public static BudgetAnalysisQuery constructForTransaction()
    {
        BudgetAnalysisQuery budgetAnalysisQuery = new BudgetAnalysisQuery();
    
        budgetAnalysisQuery.setShowTransactionData(true);
    
        return budgetAnalysisQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>