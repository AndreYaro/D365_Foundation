<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionAttributeHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DimensionAttributeHelper</c> class subscribes to delegates for events
/// involving the dimension attribute.
/// </summary>
class DimensionAttributeHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update records that reference the deleted dimension attribute.
    /// </summary>
    /// <param name = "_dimAttributeBeingDeleted">
    /// The dimension attribute id from the <c>DimensionAttribute</c> record that has been deleted.
    /// </param>
    [SubscribesTo(tablestr(DimensionAttribute), delegatestr(DimensionAttribute, deleting))]
    public static void deleting(RecId _dimAttributeBeingDeleted)
    {
        // Delete all BudgetPrimaryLedgerDimensionAttribute records that reference the deleted dimension attribute.
        BudgetPrimaryLedgerDimensionAttribute::deleteForDimensionAttribute(_dimAttributeBeingDeleted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postValidateWriteDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check that there are no issues creating the new <c>DimensionAttribute</c> record.
    /// </summary>
    /// <param name = "_dimensionAttribute">
    /// The <c>DimensionAttribute</c> record being validated.
    /// </param>
    /// <param name = "_ret">
    /// The <c>EventHandlerResult</c> instance that will return the result of validation.
    /// </param>
    [SubscribesTo(tablestr(DimensionAttribute), delegatestr(DimensionAttribute, postValidateWriteDelegate))]
    public static void postValidateWriteDelegate(DimensionAttribute _dimensionAttribute, EventHandlerResult _ret)
    {
         // <GEERU>
        DimensionAttribute      dimAttr;
        if (_dimensionAttribute.BackingEntityType == tableNum(DimAttributeAgreementHeaderExt_RU) &&
           !AgreementParameters_RU::find().DisableAgreementDimension)
        {
            select firstonly RecId, Name from dimAttr
                where dimAttr.BackingEntityType == tableNum(DimAttributeAgreementHeaderExt_RU)
                    && dimAttr.RecId != _dimensionAttribute.RecId;

            if (dimAttr.RecId)
            {
                _ret.result(checkFailed(strFmt("@GLS220552", dimAttr.Name)));
                return;
            }
        }
        // <GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedgerDerivedFinHierarchyRuleCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete all <c>LedgerDerivedFinHierarchyRuleCriteria</c> records that reference
    /// the dimension attribute record.
    /// </summary>
    /// <param name = "_dimensionAttributeId">
    /// The id of the dimension attribute to delete.
    /// </param>
    [SubscribesTo(classstr(DimensionAttributeDelegates), delegatestr(DimensionAttributeDelegates, deleteLedgerDerivedFinHierarchyRuleCriteria))]
    public static void deleteLedgerDerivedFinHierarchyRuleCriteria(RecId _dimensionAttributeId)
    {
        LedgerDerivedFinHierarchyRuleCriteria       ledgerDerivedFinHierarchyRuleCriteria;
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            delete_from ledgerDerivedFinHierarchyRuleCriteria where ledgerDerivedFinHierarchyRuleCriteria.DimensionAttribute == _dimensionAttributeId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update all records for a specific instance of a <c>DimensionAttributeValue</c>.
    /// </summary>
    /// <param name = "_dimensionAttributeValueId">
    /// The id of the dimension attribute value to delete.
    /// </param>
    [SubscribesTo(classstr(DimensionAttributeDelegates), delegatestr(DimensionAttributeDelegates, deleteAttributeValue))]
    public static void deleteAttributeValue(DimensionAttributeValueRecId _dimensionAttributeValueId)
    {
        if (_dimensionAttributeValueId)
        {
            DimensionAttrValueLedgerOverride        dimAttrValueLedgerOverride;
            DimensionAttributeValueFinancialStmt    dimAttrValueFinStmt;
            ACOCostCenterAttributeValue_BR          aCOCostCenterAttributeValue_BR;

            delete_from dimAttrValueLedgerOverride where dimAttrValueLedgerOverride.DimensionAttributeValue == _dimensionAttributeValueId;
            delete_from dimAttrValueFinStmt where dimAttrValueFinStmt.DimensionAttributeValue == _dimensionAttributeValueId;
            delete_from aCOCostCenterAttributeValue_BR where aCOCostCenterAttributeValue_BR.DimensionAttributeValue == _dimensionAttributeValueId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeByHierarchyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the <c>DimensionAttribute</c> record that relates to the instance of a <c>DimensionHierarchyType</c>.
    /// </summary>
    /// <param name = "_hierarchyType">
    /// The <c>DimensionHierarchyType</c> enum that is related to the <c>DimensionAttribute</c> record to be found.
    /// </param>
    /// <param name = "_activate">
    /// Activates the <c>DimensionAttribute</c> record if it is inactive.
    /// </param>
    /// <param name = "_ret">
    /// The <c>EventHandlerResult</c> instance that will be used to return the <c>DimensionAttribute</c> record.
    /// </param>
    [SubscribesTo(classstr(DimensionAttributeDelegates), delegatestr(DimensionAttributeDelegates, getAttributeByHierarchyType))]
    public static void getAttributeByHierarchyType(DimensionHierarchyType _hierarchyType, boolean _activate, EventHandlerResult _ret)
    {
        DimensionAttribute      dimAttr;
        guid                    dimAttrHashKey;
        Name                    dimAttrName = DimensionAttribute::getSystemGeneratedAttributeName(_hierarchyType);
        DimensionEnabledType    dimEnabledType;

        switch (_hierarchyType)
        {
            case DimensionHierarchyType::DefaultAccount:
                select firstonly dimAttr where dimAttr.RecId == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);
                break;

            case DimensionHierarchyType::BankAccount:
                dimAttrHashKey = str2guid('{AA11002D-F1EF-4F6C-95D4-98CE6CEF18B3}');
                break;
            case DimensionHierarchyType::Customer:
                dimAttrHashKey = str2guid('{AA0709C6-E73A-4227-AA1A-CDB04094FF0E}');
                break;
            case DimensionHierarchyType::Employee:
                dimAttrHashKey = str2guid('{AA120BC2-8C23-40D7-A017-39888307C1AB}');
                break;
            case DimensionHierarchyType::FixedAsset:
                dimAttrHashKey = str2guid('{AA100C92-9604-4CAF-BA36-0697E37A7A56}');
                break;
            case DimensionHierarchyType::Item:
                dimAttrHashKey = str2guid('{AA130A2C-677E-4769-9BA0-ED1289BDB3FE}');
                break;
            case DimensionHierarchyType::Project:
                dimAttrHashKey = str2guid('{AA090BA3-4170-4C0B-A992-35A3ACD3F1D5}');
                break;
            case DimensionHierarchyType::Vendor:
                dimAttrHashKey = str2guid('{AA080D65-5471-4D31-9A26-727ED632AE10}');
                break;
            // <GEERU>
            case DimensionHierarchyType::FixedAssets_RU:
                dimAttrHashKey = str2guid('{CC038C96-EAD7-4903-B8E2-02BEB7961A57}');
                break;
            case DimensionHierarchyType::RDeferrals:
                dimAttrHashKey = str2guid('{0BF55528-F555-499D-9C95-BCD3753FA253}');
                break;
            case DimensionHierarchyType::RCash:
                dimAttrHashKey = str2guid('{0C17BBC3-3888-4D0A-84AA-6249DA327503}');
                break;
            case DimensionHierarchyType::Employee_RU:
                dimAttrHashKey = str2guid('{3A9F5A63-89B0-448B-BE1E-E911F336783C}');
                break;
            // </GEERU>

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (dimAttrHashKey)
        {
            // Find the dimension attribute by name based on the enum value (localization must be added to the DimensionAttributeTranslation table)
            select firstonly dimAttr where dimAttr.Name == dimAttrName;
        }

        // If the dimension attribute does not exist, create it
        if (!dimAttr)
        {
            ttsbegin;
            // Double-check lock pattern using database transaction to ensure it
            // does not try to create two hierarchies with the same name
            select firstonly dimAttr where dimAttr.Name == dimAttrName;

            if (!dimAttr)
            {
                dimAttr.Name = dimAttrName;

                // Set appropriate backing entity information based on type
                switch (_hierarchyType)
                {
                    case DimensionHierarchyType::BankAccount:
                        dimEnabledType = DimensionEnabledType::constructForSystemDefinedByTableId(tableNum(DimAttributeBankAccountTable));
                        break;

                    case DimensionHierarchyType::Customer:
                        dimEnabledType = DimensionEnabledType::constructForSystemDefinedByTableId(tableNum(DimAttributeCustTable));
                        break;

                    case DimensionHierarchyType::Employee:
                        dimEnabledType = DimensionEnabledType::constructForSystemDefinedByTableId(tableNum(DimAttributeHcmWorker));
                        break;

                    case DimensionHierarchyType::FixedAsset:
                        dimEnabledType = DimensionEnabledType::constructForSystemDefinedByTableId(tableNum(DimAttributeAssetTable));
                        break;

                    case DimensionHierarchyType::Item:
                        dimEnabledType = DimensionEnabledType::constructForSystemDefinedByTableId(tableNum(DimAttributeInventTable));
                        break;

                    case DimensionHierarchyType::Project:
                        dimEnabledType = DimensionEnabledType::constructForSystemDefinedByTableId(tableNum(DimAttributeProjTable));
                        break;

                    case DimensionHierarchyType::Vendor:
                        dimEnabledType = DimensionEnabledType::constructForSystemDefinedByTableId(tableNum(DimAttributeVendTable));
                        break;

                    // <GEERU>
                    case DimensionHierarchyType::FixedAssets_RU:
                        dimEnabledType = DimensionEnabledType::constructForSystemDefinedByTableId(tableNum(DimAttributeRAssetTable_RU));
                        break;
                    case DimensionHierarchyType::RDeferrals:
                        dimEnabledType = DimensionEnabledType::constructForSystemDefinedByTableId(tableNum(DimAttributeRDeferralsTable_RU));
                        break;
                    case DimensionHierarchyType::RCash:
                        dimEnabledType = DimensionEnabledType::constructForSystemDefinedByTableId(tableNum(DimAttributeRCashTable_RU));
                        break;
                    case DimensionHierarchyType::Employee_RU:
                        dimEnabledType = DimensionEnabledType::constructForSystemDefinedByTableId(tableNum(DimAttributeEmployeeTable_RU));
                        break;
                    // </GEERU>
                    default:
                        throw error(Error::wrongUseOfFunction(funcName()));
                }

                if (dimEnabledType)
                {
                    // Only attempt inserting if we were able to construct the view as the view may be hidden due to a lack of a config key
                    dimEnabledType.populateDimensionAttribute(dimAttr);
                    dimAttr.Type = DimensionAttributeType::DynamicAccount;
                    dimAttr.HashKey = dimAttrHashKey;
                    dimAttr.insert();
                }
            }

            if (_activate && dimAttr && dimAttr.getStatus() == DimensionAttributeStatus::Inactive)
            {
                DimensionSchemaAndDataSynchronizationUtility::applyDimensionAttributeMetadataChanges(false);
            }

            ttscommit;
        }
        _ret.result(dimAttr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>restrictQueryToCategorizedValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restricts a query based on the <c>DimensionAttribute</c> record's category field.
    /// </summary>
    /// <param name = "_queryBuildDataSource">
    /// The <c>QueryBuildDataSource</c> instance being restricted to categorized values.
    /// </param>
    /// <param name = "_dimensionAttributeRecId">
    /// The id of the dimension attribute related to the query being built.
    /// </param>
    /// <param name = "_categoryRecId">
    /// The id of the category to restrict by. If none is supplied, the current chart of accounts is used.
    /// </param>
    /// <param name = "_applyRestrictionBasedOnTranslations">
    /// A Boolean value which indicates whether to include translation view field information when needed.
    /// </param>
    [SubscribesTo(classstr(DimensionAttributeDelegates), delegatestr(DimensionAttributeDelegates, restrictQueryToCategorizedValues))]
    public static void restrictQueryToCategorizedValues(
        QueryBuildDataSource    _queryBuildDataSource,
        DimensionAttributeRecId _dimensionAttributeRecId,
        RecId                   _categoryRecId,
        boolean                 _applyRestrictionBasedOnTranslations)
    {
        QueryBuildRange qbr;

        if (_dimensionAttributeRecId ==
            DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount))
        {
            DimensionAttributeViewContract dimensionAttributeViewContract =
                DimensionAttribute::getViewContract(_dimensionAttributeRecId, _applyRestrictionBasedOnTranslations);

            // Main accounts are categorized by the chart of accounts
            qbr = _queryBuildDataSource.addRange(dimensionAttributeViewContract.parmCategoryFieldId());
            qbr.value(queryValue(_categoryRecId == 0 ? LedgerChartOfAccounts::current() : _categoryRecId));
            qbr.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onModifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// A post-super handle for a modifiedField event of a <c>DimensionAttribute</c> record.
    /// </summary>
    /// <param name = "_dimensionAttribute">
    /// The <c>DimensionAttribute</c> record related to the field id.
    /// </param>
    /// <param name = "_fieldId">
    /// The field id that was modified.
    /// </param>
    [SubscribesTo(classstr(DimensionAttributeDelegates), delegatestr(DimensionAttributeDelegates, onModifiedField))]
    public static void onModifiedField(DimensionAttribute _dimensionAttribute, FieldId _fieldId)
    {
        const RecId EmptyRecId = 0;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            switch (_fieldId)
            {
                case fieldNum(DimensionAttribute, IsBalancing_PSN):
                    DimensionAttributeValue dimensionAttributeValue;

                    update_recordset dimensionAttributeValue
                        setting IsBalancing_PSN = _dimensionAttribute.IsBalancing_PSN
                        where dimensionAttributeValue.DimensionAttribute == _dimensionAttribute.RecId;

                    break;

                case fieldNum(DimensionAttribute, BalancingDimension_PSN):
                    ttsbegin;

                    DimensionAttributeRecId balancingDimensionRecId = _dimensionAttribute.BalancingDimension_PSN ? _dimensionAttribute.BalancingDimension_PSN : _dimensionAttribute.orig().BalancingDimension_PSN;

                    DimensionAttribute balancingDimensionAttribute = DimensionAttribute::find(balancingDimensionRecId, true);

                    if (balancingDimensionAttribute)
                    {
                        balancingDimensionAttribute.BalancingDimension_PSN = _dimensionAttribute.BalancingDimension_PSN ? _dimensionAttribute.RecId : EmptyRecId;
                        balancingDimensionAttribute.update();
                    }

                    ttscommit;

                    break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>