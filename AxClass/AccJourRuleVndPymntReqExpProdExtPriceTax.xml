<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccJourRuleVndPymntReqExpProdExtPriceTax</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class controls various posting attributes used during posting of a vendor invoice line.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::Tax),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::TaxNonRecoverable),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::TaxVariance),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::TaxNonRecoverableVariance),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::TaxDeferred_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::TaxDeferredVariance_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::Incentiveschemetax_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::ServiceTaxInterimAmount_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::ServiceTaxInterimAmountVariance_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::ServiceTaxNonRecoverable_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::ServiceTaxNonRecoverableVariance_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::ServiceTaxExpense_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::ServiceTaxExpenseVariance_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::ServiceTaxInterimExpense_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::ServiceTaxInterimExpenseVariance_IN),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPrepaymentApplication, MonetaryAmount::Tax),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPrepaymentApplication, MonetaryAmount::TaxNonRecoverable),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPrepaymentReverseApplication, MonetaryAmount::Tax),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPrepaymentReverseApplication, MonetaryAmount::TaxNonRecoverable)
]
public class AccJourRuleVndPymntReqExpProdExtPriceTax extends AccJourRuleVendPaymentReqExpProdExtPrice
{
    TaxDirection taxDirection;
    boolean      useAccountingDistributionDimensionValues;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUseInventMainAccDimensionListProvider</Name>
				<Source><![CDATA[
    public boolean canUseInventMainAccDimensionListProvider()
    {
        if (BrazilParameters::isEnabled() && this.isTaxIncluded_BR())
        {
            return true;
        }

        // <GIN>
        if (TaxParameters::isCustomsEnable_IN()
            && (this.parmMonetaryAmount() == MonetaryAmount::tax
            || this.parmMonetaryAmount() == MonetaryAmount::Incentiveschemetax_IN)
            && this.isCustomsTaxIncluded_IN())
        {
            return true;
        }
        // </GIN>

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseTaxMainAccDimensionListProvider</Name>
				<Source><![CDATA[
    public boolean canUseTaxMainAccDimensionListProvider()
    {
        if (BrazilParameters::isEnabled() && this.isTaxIncluded_BR())
        {
            return false;
        }

        // <GIN>
        if (TaxParameters::isCustomsEnable_IN()
            && (this.parmMonetaryAmount() == MonetaryAmount::Tax
            || this.parmMonetaryAmount() == MonetaryAmount::Incentiveschemetax_IN)
            && this.isCustomsTaxIncluded_IN())
        {
            return false;
        }
        // </GIN>
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize()
    {
        SourceDocumentLineItemITax      iTax;

        super();

        if (sourceDocumentLineItem is SourceDocumentLineItemITax)
        {
            iTax = sourceDocumentLineItem as SourceDocumentLineItemITax;
            taxDirection = iTax.parmTaxDirection();

            if (this.parmLedgerPostingType() == LedgerPostingType::Tax)
            {
                // Use AccountingDistribution financial dimension for tax posting
                useAccountingDistributionDimensionValues = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectVendInvLineSourceDocLineItem_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if PO created from Project otherwise returns false.
    /// </summary>
    /// <returns>
    /// Returns true if PO created from Project otherwise returns false.
    /// </returns>
    private boolean isProjectVendInvLineSourceDocLineItem_BR()
    {
        boolean isProjectVendInvLine;

        if (this.parmSourceDocumentLineItem().parmParentSourceDocumentLineItem() is VendorInvoiceLineSourceDocLineItem)
        {
            VendorInvoiceLineSourceDocLineItem vendorInvoiceLineSourceDocLineItem = this.parmSourceDocumentLineItem().parmParentSourceDocumentLineItem();
            isProjectVendInvLine = vendorInvoiceLineSourceDocLineItem.parmProjectId() ? true : false;
        }

        return isProjectVendInvLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomsTaxIncluded_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns if the current tax source document line is included in the price or not
    /// </summary>
    /// <returns>
    ///     True if the current source document line tax is included, otherwise false
    /// </returns>
    private boolean isCustomsTaxIncluded_IN()
    {
        TaxSourceDocSublineItem taxSourceDocSublineItem;
        TaxType_IN              taxType;
        boolean                 isCustomsTaxIncluded;

        if (sourceDocumentLineItem is TaxSourceDocSublineItem)
        {
            taxSourceDocSublineItem = sourceDocumentLineItem;
            taxType = TaxTable::find(taxSourceDocSublineItem.parmTaxCode()).TaxType_IN;

            switch (taxType)
            {
                case TaxType_IN::Customs:
                    isCustomsTaxIncluded = true;
                    break;
                default :
                    break;
            }
        }
        return isCustomsTaxIncluded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReverseChargeAppliedForIROrLOI_IN</Name>
				<Source><![CDATA[
    private boolean isReverseChargeAppliedForIROrLOI_IN(TaxItemGroupHeading _taxItemGroupHeadingRev)
    {
        return _taxItemGroupHeadingRev.ServiceTaxBasis_IN == ServiceTaxBasis_IN::POTBasis
                && _taxItemGroupHeadingRev.ReverseChargePercentage_IN > 0
                &&
                (   this.parmMonetaryAmount() == MonetaryAmount::ServiceTaxInterimAmount_IN
                        ||
                    this.parmMonetaryAmount() == MonetaryAmount::ServiceTaxInterimAmountVariance_IN
                        ||
                    this.parmMonetaryAmount() == MonetaryAmount::ServiceTaxNonRecoverable_IN
                        ||
                    this.parmMonetaryAmount() == monetaryAmount::ServiceTaxNonRecoverableVariance_IN
                        ||
                    this.parmMonetaryAmount() == MonetaryAmount::ServiceTaxInterimExpense_IN
                        ||
                    this.parmMonetaryAmount() == monetaryAmount::ServiceTaxInterimExpenseVariance_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxIncluded_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns if the current tax source document line is included in the price or not
    /// </summary>
    /// <returns>
    ///     True if the current source document line tax is included, otherwise false
    /// </returns>
    private boolean isTaxIncluded_BR()
    {
        TaxSourceDocSublineItem taxSourceDocSublineItem;
        if (sourceDocumentLineItem is TaxSourceDocSublineItem)
        {
            taxSourceDocSublineItem = sourceDocumentLineItem;

            if (taxSourceDocSublineItem.isIncludedInPrice_BR())
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionValuesUsedForSummaryAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the <c>DimensionValuesUsedForSummaryAccount</c> for the current distribution
    /// </summary>
    /// <param name="_setValue">
    ///     Determines if the value has to be set or not
    /// </param>
    /// <param name="_dimensionValuesUsedForSummaryAccount">
    ///     The <c>DimensionValuesUsedForSummaryAccount</c> attribute
    /// </param>
    /// <returns>
    ///     The <c>DimensionValuesUsedForSummaryAccount</c> attribute
    /// </returns>
    ///
    public DimensionValuesUsedForSummaryAccount parmDimensionValuesUsedForSummaryAccount(boolean _setValue = false, DimensionValuesUsedForSummaryAccount _dimensionValuesUsedForSummaryAccount = 0)
    {
        DimensionValuesUsedForSummaryAccount ret;

        if (_setValue && useAccountingDistributionDimensionValues)
        {
            // Override the general ledger parameter financial dimension "Values used for summary account" setting to
            // AccountingDistribution because the tax posting should use the same ledger dimensions as the accounting distributions
            ret = super(_setValue, DimensionValuesToUseForSummaryAccount::AccountingDistributions);
        }
        else
        {
            ret = super(_setValue, _dimensionValuesUsedForSummaryAccount);
        }

        if (BrazilParameters::isEnabled() && this.isTaxIncluded_BR())
        {
            ret = DimensionValuesToUseForSummaryAccount::AccountingDistributions;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalizingDefLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmJournalizingDefLedgerPostingType()
    {
        LedgerPostingType journalizingDefLedgerPostingType;

        journalizingDefLedgerPostingType = LedgerPostingType::VendBalance;

        return journalizingDefLedgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        if (taxDirection == taxDirection::UseTax)
        {
            return LedgerPostingType::Tax;
        }
        else
        {
            // <GEERU>
            if (this.parmIsCountryRegionEEandRU())
            {
                if (AccountingRule_RU::canUseEmplMainAccDimListProvider_RU(sourceDocumentLineItem))
                {
                    return LedgerPostingType::EmplBalance_RU;
                }
            }
            // </GEERU>
            return LedgerPostingType::VendBalance;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postParmLedgerPostingType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the posting type for taxes that are included in the price.
    /// </summary>
    /// <param name="_ledgerPostingType">
    ///     return ledgerPostingType from ParmLedgerPostingType</param>
    /// <returns>
    ///     Returns the posting type of the parent accounting distribution, usually is LedgerPostingType::PurchConsump
    /// </returns>
    /// <remarks>
    ///     Taxes that are included in the price does not affect vendor balance, it debits the inventory cost instead.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerPostingType postParmLedgerPostingType_BR(LedgerPostingType _ledgerPostingType)
    {
        AccountingDistributionRule accountingDistributionRule;
        MonetaryAmount locaMonetaryAmount;

        if (this.isTaxIncluded_BR())
        {
            if (this.parmSourceDocumentLineItem().parmParentSourceDocumentLineItem() is ChargeSourceDocLineItem)
            {
                locaMonetaryAmount = MonetaryAmount::Charge;
            }
            else
            {
                locaMonetaryAmount = MonetaryAmount::ExtendedPrice;
            }

            accountingDistributionRule = AccountingDistributionRule::newRule(
                this.parmSourceDocumentLineItem().parmParentSourceDocumentLineItem(),
                locaMonetaryAmount);

            if (this.isProjectVendInvLineSourceDocLineItem_BR())
            {
                accountingDistributionRule.parmAccountingdistribution(AccountingDistribution::find(this.parmAccountingdistribution().ParentDistribution));
            }

            return accountingDistributionRule.parmLedgerPostingType();
        }

        return _ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postParmLedgerPostingType_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the posting type for taxes that are included in the price.
    /// </summary>
    /// <param name="_ledgerPostingType">
    ///     return ledgerPostingType from ParmLedgerPostingType</param>
    /// <returns>
    ///     Returns the posting type of the parent accounting distribution, usually is LedgerPostingType::VendBalance
    /// </returns>
    /// <remarks>
    ///     Taxes that are included in the price does not affect vendor balance, it debits the inventory cost instead.
    /// </remarks>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerPostingType postParmLedgerPostingType_IN(LedgerPostingType _ledgerPostingType)
    {
        TaxSourceDocSublineItem             taxSourceDocSublineItem;
        TaxType_IN                          taxType;
        VendorInvoiceLineSourceDocLineItem  vendorInvoiceLineSourceDocLineItem;
        TaxUncommitted                      taxUncommittedServTax;
        TaxMap                              taxMapServTax;
        VendTable                           vendTable;
        LedgerPostingType                   ledgerPostingType = _ledgerPostingType;
        TaxItemGroupHeading                 taxItemGroupHeadingRev;

        #ISOCountryRegionCodes

        if (this.parmSourceDocumentLineItem().parmParentSourceDocumentLineItem() is VendorInvoiceLineSourceDocLineItem)
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                if (sourceDocumentLineItem is TaxSourceDocSublineItem)
                {
                    taxSourceDocSublineItem = sourceDocumentLineItem;
                    taxType = TaxTable::find(taxSourceDocSublineItem.parmTaxCode()).TaxType_IN;
                    switch (taxType)
                    {
                        case TaxType_IN::Customs:
                            if (this.parmMonetaryAmount()    == MonetaryAmount::Tax
                                || this.parmMonetaryAmount() == MonetaryAmount::Incentiveschemetax_IN)
                            {
                                vendorInvoiceLineSourceDocLineItem = this.parmSourceDocumentLineItem().parmParentSourceDocumentLineItem();
                                if (vendorInvoiceLineSourceDocLineItem.parmStocked())
                                {
                                    ledgerPostingType = LedgerPostingType::PurchConsump;
                                }
                                else
                                {
                                    ledgerPostingType = LedgerPostingType::PurchExpense;
                                }
                            }
                            break;
                        case TaxType_IN::ServiceTax:
                            if (taxSourceDocSublineItem != null)
                            {
                                taxMapServTax = taxSourceDocSublineItem.parmTaxMap_IN();
                                if (taxMapServTax.TableId == tableNum(TaxUncommitted))
                                {
                                    taxUncommittedServTax = taxMapServTax;
                                    if (taxUncommittedServTax.RecId != 0)
                                    {
                                        if (taxUncommittedServTax.SourceTableId == tableNum(VendInvoiceInfoLine))
                                        {
                                            vendInvoiceInfoLine    = VendInvoiceInfoLine::findRecId(taxUncommittedServTax.SourceRecId);
                                            vendTable              = VendTable::find(vendInvoiceInfoLine.InvoiceAccount);
                                            taxItemGroupHeadingRev = TaxItemGroupHeading::find(vendInvoiceInfoLine.TaxItemGroup);
                                            if (
                                                    vendTable.isGTA()
                                                        ||
                                                    (vendTable.isForeign() && vendInvoiceInfoLine.purchTable().purchTable_W().CustomsImportOrder_IN == NoYes::Yes)
                                                        ||
                                                    this.isReverseChargeAppliedForIROrLOI_IN(taxItemGroupHeadingRev)
                                                )
                                            {
                                                ledgerPostingType = LedgerPostingType::ServiceTax_IN;
                                            }
                                        }
                                    }
                                }
                            }
                    }//End switch
                }
            }
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postParmLedgerPostingTypeHandler_BR</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(AccJourRuleVndPymntReqExpProdExtPriceTax), methodStr(AccJourRuleVndPymntReqExpProdExtPriceTax, parmLedgerPostingType))]
    /// <summary>
    ///     Event handler method for parmLedgerPostingType.
    /// </summary>
    /// <param name="_args">
    ///     <c>XppPrePostArgs</c> class.
    /// </param>
    public static void postParmLedgerPostingTypeHandler_BR(XppPrePostArgs _args)
    {
        AccJourRuleVndPymntReqExpProdExtPriceTax AccJourRuleVendPaymentReqExpProdExtPrice = _args.getThis();
        anyType returnValue;

        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        returnValue = AccJourRuleVendPaymentReqExpProdExtPrice.postParmLedgerPostingType_BR(_args.getReturnValue());

        _args.setReturnValue(returnValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postParmLedgerPostingTypeHandler_IN</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(AccJourRuleVndPymntReqExpProdExtPriceTax), methodStr(AccJourRuleVndPymntReqExpProdExtPriceTax, parmLedgerPostingType))]
    /// <summary>
    /// Event handler method for parmLedgerPostingType.
    /// </summary>
    /// <param name="_args">
    ///  <c>XppPrePostArgs</c> class.
    /// </param>

    public static void postParmLedgerPostingTypeHandler_IN(XppPrePostArgs _args)
    {
        AccJourRuleVndPymntReqExpProdExtPriceTax accJourRuleVendPaymentReqExpProdExtPrice = _args.getThis();
        TaxSourceDocSublineItem                  taxSourceDocSublineItem;
        SourceDocumentLineItem                   sourceDocumentLineItem = accJourRuleVendPaymentReqExpProdExtPrice.parmSourceDocumentLineItem();
        TaxType_IN                               taxType;
        TaxParameters                            taxParameters = TaxParameters::find();
        anytype                                  returnValue   = _args.getReturnValue();

        if (sourceDocumentLineItem is TaxSourceDocSublineItem)
        {
            taxSourceDocSublineItem = sourceDocumentLineItem;
            taxType = TaxTable::find(taxSourceDocSublineItem.parmTaxCode()).TaxType_IN;
        }
        if (
            (taxParameters.Customs_IN == true
             && taxType == TaxType_IN::Customs)
                            ||
            (taxParameters.ServiceTax_IN == true
             && taxType == TaxType_IN::ServiceTax)
           )
        {
           returnValue = accJourRuleVendPaymentReqExpProdExtPrice.PostParmLedgerPostingType_IN(_args.getReturnValue());
        }

        _args.setReturnValue(returnValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalAccountEntryLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the ledger account to use to enter a subledger journal entry with transaction line dimension for tax components.
    /// </summary>
    /// <param name="_defaultLedgerDimension">
    ///    The default ledger dimension.
    /// </param>
    /// <param name="_accountingDistributionLedgerDimension">
    ///    The accounting distribution ledger dimension.
    /// </param>
    /// <returns>
    ///    A <c>LedgerDimensionAccount</c> object.
    /// </returns>
    public LedgerDimensionAccount getJournalAccountEntryLedgerDimension(LedgerDimensionDefaultAccount _defaultLedgerDimension, LedgerDimensionAccount _accountingDistributionLedgerDimension)
    {
        LedgerDimensionAccount ledgerDimension;

        if (FeatureStateProvider::isFeatureEnabled(TaxLineDimensionPriorityFeature::instance())
            && BrazilParameters::isEnabled()
            && _defaultLedgerDimension
            && !this.parmReclassifyDistributionAmounts()
            && this.parmDimensionValuesUsedForSummaryAccount() == DimensionValuesToUseForSummaryAccount::AccountingDistributions)
        {
            ledgerDimension = this.buildLedgerAccountWithDimensionDefaultsWithSourceDocLineItemPriority(
                _defaultLedgerDimension,
                _accountingDistributionLedgerDimension);
        }
        else
        {
            ledgerDimension = super(_defaultLedgerDimension, _accountingDistributionLedgerDimension);
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLedgerAccountWithDimensionDefaultsWithSourceDocLineItemPriority</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount buildLedgerAccountWithDimensionDefaultsWithSourceDocLineItemPriority(
        LedgerDimensionDefaultAccount _defaultLedgerDimension,
        LedgerDimensionAccount _accountingDistributionLedgerDimension)
    {
        LedgerDimensionAccount ledgerAccount;

        // use DefaultDimension from the line in case there are dimensions that don't overlap
        DimensionDefault lineDefaultDimension = sourceDocumentLineItem.parmDefaultDimension();

        container cacheResult = SourceDocumentCache::getValue(
            SourceDocumentCacheScope::JournalAcctEntryLedgerDimension,
            [0, _accountingDistributionLedgerDimension, _defaultLedgerDimension, lineDefaultDimension, classNum(AccJourRuleVndPymntReqExpProdExtPriceTax)]);

        if (cacheResult != conNull())
        {
            [ledgerAccount] = cacheResult;
        }
        else
        {
            // create/use DefaultDimension from the provided _accountingDistributionLedgerDimension
            DimensionDefault defaultDimension = ledgerDimensionProvider.getDefaultDimensionFromLedgerDimension(_accountingDistributionLedgerDimension);

            // merge with source document line default dimensions (with source document line priority)
            defaultDimension = ledgerDimensionProvider.mergeDefaultDimensions(lineDefaultDimension, defaultDimension);

            // Gets the main account from the provided _defaultLedgerDimension
            LedgerDimensionAccount ledgerDefaultAccount = ledgerDimensionProvider.getDefaultAccountFromLedgerDimension(_defaultLedgerDimension);

            // build ledgerDimension from all the default parts
            ledgerAccount = ledgerDimensionProvider.createLedgerDimension(ledgerDefaultAccount, defaultDimension);

            // Cache the built ledgerDimension
            SourceDocumentCache::insertValue(
                SourceDocumentCacheScope::JournalAcctEntryLedgerDimension,
                [0, _accountingDistributionLedgerDimension, _defaultLedgerDimension, lineDefaultDimension, classNum(AccJourRuleVndPymntReqExpProdExtPriceTax)],
                [ledgerAccount]);
        }

        return ledgerAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>