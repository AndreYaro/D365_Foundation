<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReApprovalVersioningCompare</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchReApprovalVersioningCompare</c> class extends the functionality of the
/// <c>VersioningComparePurchTable</c> class and implements the analysis if a purchase order that
/// requires re-approval.
/// </summary>
class PurchReApprovalVersioningCompare extends VersioningComparePurchTable
{
    Set includedFields;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getChangeList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of changed fields as two records are compared.
    /// </summary>
    /// <param name="_oldRecord">
    /// The old record.
    /// </param>
    /// <param name="_newRecord">
    /// The new record.
    /// </param>
    /// <returns>
    /// A container that contains the changed fields that includes old and new values.
    /// </returns>
    protected container getChangeList(Common _oldRecord, Common _newRecord)
    {
        return PurchReApprovalCompareRecordVersions::newTableId(_oldRecord.TableId, includedFields).packChangedFields(versioningTmpTrans.Action,_oldRecord,_newRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludedFields</Name>
				<Source><![CDATA[
    public Set parmIncludedFields(Set _includedFields = includedFields)
    {
        includedFields = _includedFields;

        return includedFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchReApprovalVersioningCompare construct()
    {
        return new PurchReApprovalVersioningCompare();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of the <c>VersioningCompare</c> class that is based on the specified
    /// records.
    /// </summary>
    /// <param name="_includedFields">
    /// A set of fields that should be compared.
    /// </param>
    /// <param name="_common">
    /// A record that holds the versions.
    /// </param>
    /// <param name="_alternateNewVersion">
    /// A second record from a table mapped by the <c>VersioningVersionMap</c> database map; optional.
    /// </param>
    /// <returns>
    /// An instance of the <c>PurchReApprovalVersioningCompare</c> class.
    /// </returns>
    /// <remarks>
    /// If only one version is specified the comparison will be against the current version.
    /// </remarks>
    public static PurchReApprovalVersioningCompare newVersion(Set _includedFields, Common _common, Common _alternateNewVersion = null)
    {
        var versioningCompare = PurchReApprovalVersioningCompare::construct();
        versioningCompare.initCallerRecord(_common, _alternateNewVersion);
        versioningCompare.parmIncludedFields(_includedFields);

        return versioningCompare;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>