<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransNeutralTracker</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqTransNeutralTracker</c> class handles deleting of neutral transactions for the material
/// requirements planning (MRP).
/// It does so by tracking neutralizable transactions, and either omitting inserting them initially and inserting
/// the non neutralized transactions in the finalization phase, or deleting neutralizable transactions in the
/// finalization stage.
///
/// Below is an example of neutral transactions that can be deleted:
/// - Site is the only coverage dimension.
/// - There is a transfer order from one warehouse to another within the same site.
/// - The transfer order will be shipped and received on the same day.
/// Such transfer order does not affect the total quantity that is available on the site
/// and hence does not affect master planning in any way.
///
/// There are several reasons to delete neutral transactions:
/// - MRP will run faster because there will be no need to determine coverage, delays and actions for neutral transactions.
/// - If the neutral issues are not excluded from the MRP run then they will be deducted from the demand forecast
/// and will result in undersupply.
/// - It can happen that the neutral issue will get pegged with the corresponding neutral receipt.
/// In this case we will see an infinite explosion tree in the explosion form.
/// </summary>
abstract class ReqTransNeutralTracker
{
    internal Map reqTransNeutralBundleByBundleId;
    private int maxTransactionsInMemmory;
    private int currentTransactionsInMemmory;
    private SysInstrumentationSegment instrumentation;

    internal int totalNeutralizedTransactions;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>ReqTransNeutralTracker</c> to track transactions for neutralization.
    /// </summary>
    internal void new()
    {
        reqTransNeutralBundleByBundleId = new Map(Types::String, Types::Class);
        maxTransactionsInMemmory = 0;
        currentTransactionsInMemmory = 0;

        instrumentation = SysInstrumentationSegment::construct(
            classStr(ReqTransNeutralTracker),
            this.getTelemetryActivityName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tracks the given transaction for possible neutralization.
    /// </summary>
    /// <param name = "_reqTrans">The transaction to track.</param>
    [Hookable(false)]
    final public void trackReqTrans(ReqTrans _reqTrans)
    {
        str neutralBundleId =  ReqTransNeutralBundle::bundleId(_reqTrans);

        ReqTransNeutralBundle bundle;

        if (reqTransNeutralBundleByBundleId.exists(neutralBundleId))
        {
            bundle = reqTransNeutralBundleByBundleId.lookup(neutralBundleId);
        }
        else 
        {
            bundle = this.createNewBundle();
            reqTransNeutralBundleByBundleId.insert(neutralBundleId, bundle);
        }

        currentTransactionsInMemmory += bundle.addReqTrans(_reqTrans);
        maxTransactionsInMemmory = max(maxTransactionsInMemmory, currentTransactionsInMemmory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewBundle</Name>
				<Source><![CDATA[
    internal abstract ReqTransNeutralBundle createNewBundle()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTelemetryActivityName</Name>
				<Source><![CDATA[
    internal abstract str getTelemetryActivityName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeTelemetry</Name>
				<Source><![CDATA[
    internal void finalizeTelemetry()
    {
        instrumentation.addAdditionalParameterToStopEvent(ReqInstrumentationActivities::ParmNeutralMaxTransactionsInMemmory, int2Str(maxTransactionsInMemmory));
        instrumentation.addAdditionalParameterToStopEvent(ReqInstrumentationActivities::ParmNeutralNeutralizedTransactions, int2Str(totalNeutralizedTransactions));
        instrumentation.addAdditionalParameterToStopEvent(ReqInstrumentationActivities::ParmNeutralNumberOfBundles, int2Str(reqTransNeutralBundleByBundleId.elements()));

        instrumentation.Dispose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeNeutralized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a given transaction can be considered for neutralization or not.
    /// </summary>
    /// <param name = "_reqTrans">The transaction to test if it can be neutralized.</param>
    /// <param name = "_reqSetup">The <c>ReqSetup</c> for the transaction.</param>
    /// <returns>true if the given transaction can be neutralized; otherwise, false.</returns>
    public static boolean canBeNeutralized(ReqTrans _reqTrans, ReqSetup _reqSetup)
    {
        if ((_reqTrans.MarkingRefInventTransOrigin != 0 
             && _reqTrans.MarkingRefInventTransOrigin != _reqTrans.InventTransOrigin)
            || _reqTrans.PmfPlanGroupId != ''
            || _reqTrans.CovQty != 0
            || _reqTrans.SupplyDemandSubClassification == SupplyDemandSubClassification::ProductionKanban)
        {
            return false;
        }

        boolean isTransferOrder = _reqTrans.RefType == ReqRefType::TransferOrderReceive ||
                                  _reqTrans.RefType == ReqRefType::TransferOrderShip;

        boolean isNonNeutralizableTransfer = isTransferOrder && _reqSetup.inventDimParmCov().InventLocationIdFlag;

        return !isNonNeutralizableTransfer
            && ReqRefTypeDescriptor::transferTypes().in(_reqTrans.RefType);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>