<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormletterParmDataCreateDataBatchTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FormletterParmDataCreateDataBatchTask</c> class creates parameter table records when late
/// selection is executed in batch during posting.
/// </summary>
public class FormletterParmDataCreateDataBatchTask
extends FormletterBatchTask implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createParmData</Name>
				<Source><![CDATA[
        protected formletterParmData createParmData()
    {
        formletterParmData formletterParmData;

        switch (this.parmFormletterType())
        {
            case FormletterType::Sales :
                formletterParmData = SalesFormletterParmData::newChooseLines(this.parmFormletterContract().pack(), true, false, true);
                break;

            case FormletterType::Purchase :
                formletterParmData = PurchFormletterParmData::newChooseLines(this.parmFormletterContract().pack(), true, false, true);
                break;
        }
        return formletterParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        formletterParmData formletterParmData = this.createParmData();

        if (formletterParmData)
        {
            formletterParmData.parmIsInBatch(this.isInBatch());
            formletterParmData.parmShowQueryForm(false);
            formletterParmData.parmUsePackedMapInChooseLinesQuery(true);
            formletterParmData.createData(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static FormletterParmDataCreateDataBatchTask construct()
    {
        return new FormletterParmDataCreateDataBatchTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Describes the <c>FormletterParmDataCreateDataBatchTask</c> class.
    /// </summary>
    /// <returns>
    ///    The label that contains the description of the <c>FormletterParmDataCreateDataBatchTask</c> class.
    /// </returns>
    /// <remarks>
    ///    The description is used by the batch framework as the description for the job.
    /// </remarks>
    protected static ClassDescription description()
    {
        return "@SYS344181";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>FormletterParmDataCreateDataBatchTask</c> class.
    /// </summary>
    /// <param name="_formletterType">
    /// The <c>FormletterType</c> object to pass on to the <c>FormletterServiceEndBatchTask</c> class.
    /// </param>
    /// <param name="_formLetterContract">
    /// The <c>FormletterContract</c> object to pass to the <c>FormletterServiceEndBatchTask</c> class.
    /// </param>
    /// <returns>
    /// A new instance of the <c>FormletterParmDataCreateDataBatchTask</c> class.
    /// </returns>
    public static FormletterParmDataCreateDataBatchTask newTask(
        FormletterType      _formletterType,
        FormLetterContract  _formLetterContract)
    {
        FormletterParmDataCreateDataBatchTask task = FormletterParmDataCreateDataBatchTask::construct();
        task.parmFormletterType(_formletterType);
        task.parmFormletterContract(_formLetterContract);
        return task;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>