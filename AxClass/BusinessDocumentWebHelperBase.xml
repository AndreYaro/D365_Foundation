<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentWebHelperBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Net;
using System.IO;
using Newtonsoft.Json.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Collections;
using Microsoft.Dynamics.ServiceFramework.Communication.Http;

/// <summary>
/// A base class containing utility methods to handle web requests.
/// </summary>
internal class BusinessDocumentWebHelperBase implements System.IDisposable
{
    #TimeConstants
    
    public const str JsonContentType = 'application/json';
    public const str UrlEncodedContentType = 'application/x-www-form-urlencoded';

    private const int MaxRetryCountForRequestResponse = 5;
    private const int RequestTimeoutSeconds = 60;
    private const int MaxExponentialBackoffDelay = 1 * #millisecondsPerMinute;
    private const int MaxAutomaticRedirections   = 5;
    
    public const str ErrorMessageToken = 'errorMessage';
    public const str InnerErrorMessageToken = 'innerErrorMessage';
    public const str ExceptionToken = 'error';
    public const str ErrorMessagePath = 'error.message';
    public const str InnerErrorMessagePath = 'error.innerError.message';

    public const str HttpGet = 'GET';
    public const str HttpPost = 'POST';
    public const str HttpPut = 'PUT';

    protected str endpoint;
    protected str apiRoute;
    protected int maxRetryCount = MaxRetryCountForRequestResponse;
    protected int maxBackoffDelay = MaxExponentialBackoffDelay;
    protected SysHttpClientOptions httpClientOptions = SysHttpClientOptions::construct();

    protected SysHttpCommunicationClient          commClient;
    protected SysHttpCommunicationClientFactory   factory;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addHttpRequestHeadersHandler</Name>
				<Source><![CDATA[
    delegate void addHttpRequestHeadersHandler(HttpRequestMessage _request)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHttpRequestAuthorizationHeadersHandler</Name>
				<Source><![CDATA[
    delegate void addHttpRequestAuthorizationHeadersHandler(HttpRequestMessage _request)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disposes the resources owned by this class.
    /// </summary>
    [Hookable(false)]
    public void dispose()
    {
        if (commClient != null)
        {
            commClient.Dispose();
        }

        if (factory != null)
        {
            factory.Dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>callWebServiceBase</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container callWebServiceBase(
        str _method,
        str _key = '',
        str _action = '',
        str _content = '',
        str _contentType = JsonContentType,
        Map _queryParameters = null)
    {
        str responseText;
        HttpResponseMessage responseMessage;

        [responseText, responseMessage] = this.callWebServiceAndGetResponse(_method, _key, _action, _content, _contentType, _queryParameters);

        if (responseMessage && responseMessage.Content)
        {
            responseText = responseMessage.Content.ReadAsStringAsync().Result;
        }

        return [responseMessage ? !responseMessage.IsSuccessStatusCode : false, responseText];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequestTimeout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets HTTP request timeout.
    /// </summary>
    /// <param name = "_timeout">The timeout in seconds.</param>
    [Hookable(false)]
    public void setRequestTimeout(int _timeout = RequestTimeoutSeconds)
    {
        httpClientOptions.parmTimeout(System.TimeSpan::FromSeconds(_timeout));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateExponentialBackoffDelay</Name>
				<Source><![CDATA[
    private int calculateExponentialBackoffDelay(int _retryCount)
    {
        var delayTime = power(2, _retryCount) * #millisecondsPerSecond;
        return min(maxBackoffDelay, delayTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUrl</Name>
				<Source><![CDATA[
    protected str createUrl(
        str _method,
        str _key = '',
        str _action = '')
    {
        return endpoint +
            apiRoute +
            (_key       ? '/' + strLwr(_key)    : '') +
            (_action    ? '/' + _action         : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRequestForServiceCall</Name>
				<Source><![CDATA[
    protected HttpRequestMessage initRequestForServiceCall(
        str _method,
        str _key = '',
        str _action = '',
        str _content = '',
        str _contentType = JsonContentType,
        Map _queryParameters = null)
    {
        var url = this.createUrl(_method, _key, _action);

        var request = this.createRequest(_method, url, _content, _contentType, _queryParameters);
            
        this.addHttpRequestHeadersHandler(request);
        this.addHttpRequestAuthorizationHeadersHandler(request);

        return request;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRequest</Name>
				<Source><![CDATA[
    protected HttpRequestMessage createRequest(
        str _httpMethod,
        str _path,
        str _content,
        str _contentType = JsonContentType,
        Map _queryParameters = null)
    {
        var requestMessage = this.createHttpRequestMessage(_httpMethod, _path, _queryParameters);

        if (_httpMethod == HttpPost || _httpMethod == HttpPut)
        {
            requestMessage.Content = new StringContent(_content, System.Text.Encoding::UTF8, _contentType);
        }

        return requestMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHttpRequestMessage</Name>
				<Source><![CDATA[
    private HttpRequestMessage createHttpRequestMessage(
        str _requestMethod,
        str _requestUri,
        Map _queryParameters = null)
    {
        HttpMethod httpMethod = new HttpMethod(_requestMethod);
        
        if (_queryParameters != null && !_queryParameters.empty())
        {
            var enumerator = _queryParameters.getEnumerator();
            _requestUri = _requestUri + '?';
            while (enumerator.moveNext())
            {
                var encodedValue = System.Web.HttpUtility::UrlEncode(enumerator.currentValue());
                _requestUri = _requestUri + enumerator.currentKey() + '=' + encodedValue + '&';
            }
        }

        var httpRequestMessage = new HttpRequestMessage(httpMethod, _requestUri);

        return httpRequestMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        str _endpoint,
        str _apiRoute = '')
    {
        endpoint = _endpoint;
        apiRoute = _apiRoute;

        factory = SysHttpCommunicationClientFactory::construct();
        SysHttpCommunicationClientBuilder clientBuilder = SysHttpCommunicationClientBuilder::construct(factory);

        httpClientOptions.parmMaxAutomaticRedirections(MaxAutomaticRedirections);
        httpClientOptions.parmThrowOnNonSuccessResponse(false);
        this.setRequestTimeout();

        clientBuilder
            .setIsCorrelated(true)
            .setIsMonitored(true)
            .setOptions(httpClientOptions);

        commClient = clientBuilder.createClient();
    }

]]></Source>
			</Method>
			<Method>
				<Name>callWebServiceAndGetResponse</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container callWebServiceAndGetResponse(
        str _method,
        str _key = '',
        str _action = '',
        str _content = '',
        str _contentType = JsonContentType,
        Map _queryParameters = null)
    {
        str errorText;
        MemoryStream responseStream;
        boolean exception;
        HttpResponseMessage responseMessage;

        ERForInvoicingActivities activities = ERForInvoicingActivities::newFromCategory(classStr(BusinessDocumentWebHelper));
        using (var activityContext = activities.callWebService())
        {
            var request = this.initRequestForServiceCall(_method, _key, _action, _content, _contentType, _queryParameters);
                            
            int retryCount = 0;
            try
            {
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyIsRetry, 'false');

                responseMessage = commClient.send(request);
                exception = responseMessage ? !responseMessage.IsSuccessStatusCode : false;

                if (responseMessage && !responseMessage.IsSuccessStatusCode && responseMessage.Content)
                {
                    errorText = responseMessage.Content.ReadAsStringAsync().Result;
                    activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyError, errorText);
                }
            }
            catch (Exception::CLRError)
            {
                if (retryCount < maxRetryCount)
                {
                    var delayTime = this.calculateExponentialBackoffDelay(retryCount);
                    retryCount++;
                    
                    activities.logInformation(
                        strFmt(ERForInvoicingInstrumentationConstants::HttpRequestRetry,
                            retryCount,
                            delayTime,
                            request.Method.ToString(),
                            request.RequestUri.AbsoluteUri));

                    activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyIsRetry, 'true');
                    
                    sleep(delayTime);
                    retry;
                }
                else
                {
                    HttpCommunicationWebException webException = this.extractWebExceptionFromLastCLRException();
                    if (webException)
                    {
                        activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyError, webException.Message);
                        errorText = webException.Message;
                    }
            
                    activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyRetriesExhausted, 'true');
                    exception = true;
                }
            }
            finally
            {
                activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyIsSuccess, any2Str(!exception));
                str correlationId = this.getCorrelationIdFromRequest(request);
                if (correlationId)
                {
                    activityContext.addCustomProperty(ERForInvoicingInstrumentationConstants::CustomPropertyCorrelationId, correlationId);
                    if (exception)
                    {
                        error(strFmt("@BusinessDocumentSubmissionService:HttpCommunicationException", correlationId));
                        if (errorText == '')
                        {
                            errorText = strFmt("@BusinessDocumentSubmissionService:HttpCommunicationException", correlationId);
                        }
                    }
                }
            }
        }

        return [errorText, responseMessage];
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractWebExceptionFromLastCLRException</Name>
				<Source><![CDATA[
    private HttpCommunicationWebException extractWebExceptionFromLastCLRException()
    {
        var exception = ClrInterop::getLastException();

        if (exception)
        {
            ApplicationUnhandledExceptionLogger::logCLRException(exception);
        }
        
        while (exception)
        {
            var webException = exception as HttpCommunicationWebException;

            if (webException)
            {
                return webException;
            }

            exception = exception.get_InnerException();
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrelationIdFromRequest</Name>
				<Source><![CDATA[
    private str getCorrelationIdFromRequest(HttpRequestMessage _request)
    {
        str correlationId;
        try
        {
            IEnumerable headerValue = _request.Headers.GetValues(BusinessDocumentServiceController::CorrelationIdHeader);
            IEnumerator enumerator = headerValue.GetEnumerator();
            if (enumerator.MoveNext())
            {
                correlationId = enumerator.Current;
            }
        }
        catch
        {
        }

        return correlationId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>