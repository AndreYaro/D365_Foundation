<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceSourceDoc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustInvoiceTableSourceDocument</c> class provides the information to handle the
///    distributions and subledger journal lines of a <c>CustInvoiceTable</c> record that is generated
///    from a customer invoice.
/// </summary>
[SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_CustomerInvoice), SourceDocument_CustomerInvoice::CustomerFreeTextInvoice, tableStr(CustInvoiceTable))]
public class CustInvoiceSourceDoc extends SourceDocument
implements SourceDocumentIParty, SourceDocumentIAccountingRule,
           SourceDocumentITerms, SourceDocumentIChargeSource,
           SourceDocumentIPostingJournalSeqProv,
           SourceDocumentIDiscount, SourceDocumentIDataProvider
{
    CustInvoiceTable custInvoiceTable;
    CustInvoiceJour custInvoiceJour;
    CustTable orderAccount;
    CustTable invoiceAccount;
    MarkupTrans markupTrans;
  
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
      public BusinessEvent documentsBusinessEvent()
    {
        BusinessEvent businessEvent;

        if (custInvoiceTable.isCashPayment())
        {
            businessEvent = new BusinessEvent(enumNum(BusinessEvent_CustomerInvoice), enum2int(BusinessEvent_CustomerInvoice::CashSaleOfProduct));
        }
        else
        {
            businessEvent = new BusinessEvent(enumNum(BusinessEvent_CustomerInvoice), enum2int(BusinessEvent_CustomerInvoice::CreditSaleOfProduct));
        }

        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherSeriesNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implementation method for providing posting journal number sequence code, currently used for Belgian
    /// </summary>
    /// <param name="company">
    /// Company id needed to get the country code.
    /// </param>
    /// <returns>
    /// The number sequence code either for credit or debit depending on the total of line amount of this doc.
    /// </returns>
    public NumberSequenceCode getVoucherSeriesNumberSequence(CompanyId company)
    {
        #ISOCountryRegionCodes
        NumberSequenceCode voucherSeries;
        NumberSequenceReference numberSequenceRefInvoice;
        NumberSequenceReference numberSequenceRefVoucher;
        NumberSequenceTable numberSequenceTableInvoice;
        NumberSequenceTable numberSequenceTableVoucher;
        NumberSequenceDatatype invoiceDatatype;
        NumberSequenceDatatype voucherDatatype;
        Amount totalAmount;
        RefRecId scopeId = NumberSeqScopeFactory::createDefaultScope().getId();

        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE], company))
        {
            return voucherSeries;
        }

        totalAmount = custInvoiceJour.InvoiceAmount;

        if (totalAmount < 0)
        {
            // a credit note.
            Debug::assert(custInvoiceJour.InvoiceAmountMST < 0);
            numberSequenceRefInvoice = NumberSeqReference::findReference(extendedTypeNum(CustCreditNoteId));
            numberSequenceRefVoucher = NumberSeqReference::findReference(extendedTypeNum(CustCreditNoteVoucher));
        }
        else
        {
            // not a credit note.
            Debug::assert(custInvoiceJour.InvoiceAmountMST >= 0);
            numberSequenceRefInvoice = NumberSeqReference::findReference(extendedTypeNum(CustInvoiceId));
            numberSequenceRefVoucher = NumberSeqReference::findReference(extendedTypeNum(CustInvoiceVoucher));
        }

        invoiceDatatype  = NumberSequenceDatatype::find(numberSequenceRefInvoice.NumberSequenceDatatype);
        voucherDatatype = NumberSequenceDatatype::find(numberSequenceRefVoucher.NumberSequenceDatatype);
        boolean allowSameAS = (numberSequenceRefVoucher.AllowSameAs && voucherDatatype.DataTypeSameAsId == invoiceDatatype.DatatypeId);

        if (custInvoiceJour.numberSequenceGroup)
        {
            numberSequenceTableInvoice = NumberSequenceTable::find(numberSequenceGroupRef::findNaturalKey(numberSequenceRefInvoice.NumberSequenceDatatype,
                                                                                            scopeId,
                                                                                            custInvoiceJour.numberSequenceGroup).NumberSequenceId);
            numberSequenceTableVoucher = NumberSequenceTable::find(numberSequenceGroupRef::findNaturalKey(numberSequenceRefVoucher.NumberSequenceDatatype,
                                                                                            scopeId,
                                                                                            custInvoiceJour.numberSequenceGroup).NumberSequenceId);
        }

        if (!(numberSequenceTableVoucher.NumberSequence ||
                (numberSequenceTableInvoice.NumberSequence && allowSameAS)))
        {
            numberSequenceTableInvoice = NumberSequenceTable::find(numberSequenceRefInvoice.NumberSequenceId);
            numberSequenceTableVoucher = NumberSequenceTable::find(numberSequenceRefVoucher.NumberSequenceId);
        }

        if (allowSameAS)
        {
            numberSequenceTableVoucher = numberSequenceTableInvoice;
        }

        voucherSeries = numberSequenceTableVoucher.NumberSequence;

        return voucherSeries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the source document by using a <c>SourceDocumentHeaderImplementation</c> table buffer.
    /// </summary>
    /// <param name="_sourceDocumentImplementation">
    ///    A <c>SourceDocumentHeaderImplementation</c> table buffer.
    /// </param>
    /// <param name="_sourceDocumentHeader">
    ///    A <c>SourceDocumentHeader</c> table buffer.
    /// </param>
    protected void initialize(SourceDocumentHeaderImplementation _sourceDocumentImplementation, SourceDocumentHeader _sourceDocumentHeader)
    {
        super(_sourceDocumentImplementation, _sourceDocumentHeader);

        custInvoiceJour = custInvoiceTable.custInvoiceJour();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes instance variables.
    /// </summary>
    /// <param name="_sourceDocumentImplementation">
    ///    A source document implementation table.
    /// </param>
    protected void initializeImplementation(SourceDocumentHeaderImplementation _sourceDocumentImplementation)
    {
        custInvoiceTable = CustInvoiceTable::findSourceDocumentHeader(_sourceDocumentImplementation.SourceDocumentHeader);

        orderAccount = custInvoiceTable.custTable_OrderAccount();
        invoiceAccount = custInvoiceTable.custTable_InvoiceAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        return custInvoiceTable.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBusinessEventDate</Name>
				<Source><![CDATA[
    public DocumentDate parmBusinessEventDate()
    {
        DocumentDate documentDate;

        documentDate = super();

        return documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChargeInputAmount</Name>
				<Source><![CDATA[
    public Amount parmChargeInputAmount()
    {
        Amount chargeInputAmount;

        if (custInvoiceTable.InclTax)
        {
            chargeInputAmount = custInvoiceTable.amountExclTax(custInvoiceTable.RecId);
        }
        else
        {
            chargeInputAmount = custInvoiceTable.calcInvoiceBalance();
        }

        return chargeInputAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChargeQuantity</Name>
				<Source><![CDATA[
    public Qty parmChargeQuantity()
    {
        Qty chargeQty;

        chargeQty = 0;

        return chargeQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChargeSource</Name>
				<Source><![CDATA[
    public Common parmChargeSource(Common _markupTrans = markupTrans)
    {
        markupTrans = _markupTrans;
        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentVoucher</Name>
				<Source><![CDATA[
    public Voucher parmCurrentVoucher(DataAreaId _dataAreaId)
    {
        return custInvoiceTable.custInvoiceJour().LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceTableRecId</Name>
				<Source><![CDATA[
    public RefRecId parmCustInvoiceTableRecId()
    {
        return custInvoiceTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmDefaultDimension()
    {
        return custInvoiceTable.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiscCode</Name>
				<Source><![CDATA[
    public DiscCode parmDiscCode()
    {
        return custInvoiceTable.CashDiscCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiscDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmDiscDataAreaId()
    {
        DataAreaId dataAreaId;

        if (custInvoiceTable.CashDiscCode)
        {
            dataAreaId = custInvoiceTable.DataAreaId;
        }

        return dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiscDirection</Name>
				<Source><![CDATA[
    public int parmDiscDirection()
    {
        return DiscountDirection::Paid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistributionTemplateRecId</Name>
				<Source><![CDATA[
    public AccountingDistributionTemplateRecId parmDistributionTemplateRecId()
    {
        return custInvoiceTable.AccountingDistributionTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentDate</Name>
				<Source><![CDATA[
    public DocumentDate parmDocumentDate()
    {
        DocumentDate documentDate;

        if (custInvoiceJour)
        {
            documentDate = custInvoiceJour.DocumentDate;
        }

        return documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentNumber</Name>
				<Source><![CDATA[
    public DocumentNum parmDocumentNumber()
    {
        DocumentNum documentNumber;

        if (custInvoiceJour)
        {
            documentNumber = custInvoiceJour.InvoiceId;
        }

        return documentNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRate1</Name>
				<Source><![CDATA[
    public ExchRate parmExchangeRate1()
    {
        return custInvoiceTable.getExchRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRate2</Name>
				<Source><![CDATA[
    public ExchRate parmExchangeRate2()
    {
        return custInvoiceTable.getExchRateSecondary();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateDate</Name>
				<Source><![CDATA[
    public AccountingDate parmExchangeRateDate()
    {
        AccountingDate exchRateDate;

        exchRateDate = custInvoiceTable.InvoiceDate;

        return exchRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCorrection</Name>
				<Source><![CDATA[
    public boolean parmIsCorrection()
    {
        return custInvoiceJour.IsCorrection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDocumentEditable</Name>
				<Source><![CDATA[
    public boolean parmIsDocumentEditable()
    {
        return custInvoiceTable.isWorkflowEditable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsTaxInChargeInputAmountIncluded</Name>
				<Source><![CDATA[
    public boolean parmIsTaxInChargeInputAmountIncluded()
    {
        return custInvoiceTable.InclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPartyAccount</Name>
				<Source><![CDATA[
    public Common parmPartyAccount()
    {
        return invoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmPaymTermDataAreaId()
    {
        DataAreaId dataAreaId;

        if (custInvoiceTable.Payment)
        {
            dataAreaId = custInvoiceTable.DataAreaId;
        }

        return dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermId</Name>
				<Source><![CDATA[
    public PaymTermId parmPaymTermId()
    {
        return custInvoiceTable.Payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingProfile</Name>
				<Source><![CDATA[
    public PostingProfile parmPostingProfile()
    {
        return custInvoiceTable.PostingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPseudoDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the pseudo document number if the real document number does not exist yet.
    /// </summary>
    /// <returns>
    /// The pseudo document number
    /// </returns>
    public str parmPseudoDocumentNumber()
    {
        str pseudoDocumentNumber;

        if (!custInvoiceJour)
        {
            pseudoDocumentNumber = "@SYS11779" + " " + custInvoiceTable.InvoiceAccount + ", " + date2str(custInvoiceTable.InvoiceDate, -1, -1, -1, -1, -1, -1, DateFlags::None);
        }

        return pseudoDocumentNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantity</Name>
				<Source><![CDATA[
    public Qty parmQuantity()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipAccountValidation</Name>
				<Source><![CDATA[
    public NoYes parmSkipAccountValidation()
    {
        CustRelatedInvoice custRelatedInvoice;

        select firstOnly RecId from custRelatedInvoice
            where custRelatedInvoice.CustInvoice == custInvoiceTable.RecId &&
                  custRelatedInvoice.InvoiceAssociationType == InvoiceAssociationType::AdjustingInvoice;

        return custRelatedInvoice != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionText</Name>
				<Source><![CDATA[
    public str parmTransactionText()
    {
        TransactionTxt transactionTxt;
        str ret;
        LedgerTransTxt ledgerTransTxt;

        transactionTxt = TransactionTxt::construct();

        // credits use a different text than normal invoices
        if (this.parmChargeInputAmount() < 0)
        {
            transactionTxt.setType(LedgerTransTxt::CustCreditNoteLedger);
            ledgerTransTxt = LedgerTransTxt::CustCreditNoteLedger;
        }
        else
        {
            transactionTxt.setType(LedgerTransTxt::CustInvoiceLedger);
            ledgerTransTxt = LedgerTransTxt::CustInvoiceLedger;
        }

        transactionTxt.setLanguage(custInvoiceJour.LanguageId);
        transactionTxt.setDate(this.parmAccountingDate());
        transactionTxt.setFormLetter(custInvoiceJour.InvoiceId);
        transactionTxt.setVoucher(custInvoiceJour.LedgerVoucher);
        transactionTxt.setKey1(custInvoiceJour.InvoiceAccount);
        transactionTxt.setKey2(CustTable::groupId(custInvoiceJour.InvoiceAccount));

        if (TransactionTextContext::isTypeSupported(ledgerTransTxt))
        {
            TransactionTextContext transactionTextContext = TransactionTextContext::newForTransactionType(ledgerTransTxt);
            transactionTextContext.setTableBuffer(custInvoiceJour.custInvoiceTable());
            transactionTextContext.setTableBuffer(custInvoiceJour);
            transactionTxt.setTransactionTextContext(transactionTextContext);
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            transactionTxt.setCustVendName(custInvoiceJour.custTable_InvoiceAccount().name());
        }
        // </GBR>
        ret = transactionTxt.txt();

        if (!ret)
        {
            CustInvoiceLine custInvoiceLine = CustInvoiceLine::findByParentRecId(custInvoiceTable.RecId);
            ret = custInvoiceLine.Description;
        }

        // If no default text is defined, use default from SourceDocument
        if (!ret)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesCurrentExecutionContextSupportParallelProcessing</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean doesCurrentExecutionContextSupportParallelProcessing()
    {
        return TaxWithholdParameters_IN::checkTaxParameters() ? false : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinancialTag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides financial tag set up on the Free Text Invoice header
    /// </summary>
    /// <returns>
    /// FinTagRecId, Financial Tag RecId
    /// </returns>
    public FinTagRecId parmFinancialTag()
    {
        return custInvoiceTable.FinTag;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>