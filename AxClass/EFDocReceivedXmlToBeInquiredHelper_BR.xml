<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocReceivedXmlToBeInquiredHelper_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class helps selecting which received XMLs will be inquired when the process is run in batch and in a recurrent manner
/// </summary>
class EFDocReceivedXmlToBeInquiredHelper_BR
{
    EFDocRecXmlCancellationLimit_BR     cancellationLimit;
    EFDocRecXmlMinInquiryInterval_BR    minimumInquiryInterval;

    int integerCancellationLimit;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLinkedXmlsAfterCancelLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds received XMLs that are linked to a fiscal document and are past the cancellation time to the specified set.
    /// Only adds received XMLs that were never inquired after the cancellation limit period.
    /// </summary>
    /// <param name="_receivedXmlSet">
    /// A set of received XMLs in which the selected records will be added.
    /// </param>
    protected void addLinkedXmlsAfterCancelLimit(Set _receivedXmlSet)
    {
        EFDocumentReceivedXML_BR    receivedXml;

        while select forUpdate AccessKey, FiscalEstablishment_BR, LastInquiry, CreatedDateTime
            from receivedXml
            where receivedXml.InquiryStatus == FiscalDocumentStatus_BR::Approved
               && receivedXml.FiscalDocument_BR != 0
               && DateTimeUtil::addHours(DateTimeUtil::utcNow(), -integerCancellationLimit) > receivedXml.createdDateTime
               && DateTimeUtil::addMinutes(DateTimeUtil::utcNow(), -minimumInquiryInterval) > receivedXml.LastInquiry
        {
            if (receivedXml.LastInquiry < DateTimeUtil::addHours(receivedXml.createdDateTime, integerCancellationLimit))
            {
                _receivedXmlSet.add(receivedXml);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNotInquiredYet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds received XMLs that were never inquired to the specified set.
    /// </summary>
    /// <param name="_receivedXmlSet">
    /// A set of received XMLs in which the selected records will be added.
    /// </param>
    protected void addNotInquiredYet(Set _receivedXmlSet)
    {
        EFDocumentReceivedXML_BR    receivedXml;

        while select forUpdate AccessKey, FiscalEstablishment_BR
            from receivedXml
            where receivedXml.InquiryStatus == FiscalDocumentStatus_BR::Created
        {
            _receivedXmlSet.add(receivedXml);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNotLinkedBeforeCancelLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds received XMLs that are not linked to a fiscal document, and still may be cancelled to the specified set.
    /// </summary>
    /// <param name="_receivedXmlSet">
    /// A set of received XMLs in which the selected records will be added.
    /// </param>
    protected void addNotLinkedBeforeCancelLimit(Set _receivedXmlSet)
    {
        EFDocumentReceivedXML_BR    receivedXml;

        while select forUpdate AccessKey, FiscalEstablishment_BR, LastInquiry, CreatedDateTime
            from receivedXml
            where receivedXml.InquiryStatus == FiscalDocumentStatus_BR::Approved
               && receivedXml.FiscalDocument_BR == 0
               && DateTimeUtil::addMinutes(DateTimeUtil::utcNow(), -minimumInquiryInterval) > receivedXml.LastInquiry
        {
            if (receivedXml.LastInquiry < DateTimeUtil::addHours(receivedXml.createdDateTime, integerCancellationLimit))
            {
                _receivedXmlSet.add(receivedXml);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>EFDocReceivedXmlToBeInquiredHelper_BR</c> class
    /// </summary>
    /// <param name="_cancellationLimit">
    /// The cancellation limit, in hours, that the vendor has to cancel the received Electronic Fiscal Documents
    /// </param>
    /// <param name="_minimumInquiryInterval">
    /// The minimum inquiry interval, in minutes, for the received Electronic Fiscal Documents
    /// </param>
    protected void new(EFDocRecXmlCancellationLimit_BR _cancellationLimit, EFDocRecXmlMinInquiryInterval_BR _minimumInquiryInterval)
    {
        cancellationLimit           = _cancellationLimit;
        minimumInquiryInterval      = _minimumInquiryInterval;

        integerCancellationLimit    = real2int(cancellationLimit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceivedXmlsToBeInquired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Given the supplied arguments cancellation limit and minimum inquiry interval, queries the database for the
    /// received XMLs that should be inquired on the government.
    /// </summary>
    /// <param name="_cancellationLimit">
    /// The cancellation limit of the received XMLs
    /// </param>
    /// <param name="_minimumInquiryInterval">
    /// The minimum inquiry interval of the received XMLs to be selected
    /// </param>
    /// <returns>
    /// A set of received XMLs table buffers
    /// </returns>
    /// <remarks>
    /// This method will select:
    /// <para>Received XMLs that were never inquired by AX</para>
    /// <para>Received XMLs not linked to fiscal documents and that still may be cancelled</para>
    /// <para>Received XMLs linked to fiscal documents past the cancellation limit, that were not inquired by AX after the cancellation limit yet</para>
    /// </remarks>
    public static Set getReceivedXmlsToBeInquired(EFDocRecXmlCancellationLimit_BR _cancellationLimit, EFDocRecXmlMinInquiryInterval_BR _minimumInquiryInterval)
    {
        EFDocReceivedXmlToBeInquiredHelper_BR   receivedXmlToBeInquiredHelper;
        Set                                     receivedXmlSet = new Set(Types::Record);

        receivedXmlToBeInquiredHelper = new EFDocReceivedXmlToBeInquiredHelper_BR(_cancellationLimit, _minimumInquiryInterval);

        receivedXmlToBeInquiredHelper.addNotInquiredYet(receivedXmlSet);
        receivedXmlToBeInquiredHelper.addLinkedXmlsAfterCancelLimit(receivedXmlSet);
        receivedXmlToBeInquiredHelper.addNotLinkedBeforeCancelLimit(receivedXmlSet);

        return receivedXmlSet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>