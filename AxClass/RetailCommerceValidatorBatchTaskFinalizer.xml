<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommerceValidatorBatchTaskFinalizer</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCommerceValidatorBatchTaskFinalizer extends RunBaseBatch
{
    RetailCommerceValidatorId validationId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        validationId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>RetailCommerceValidatorBatchTaskFinalizer</c> class.
    /// </summary>
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the current instance of the <c>RetailCommerceValidatorBatchTaskFinalizer</c> class.
    /// </summary>
    /// <returns>A container that contains the current instance of <c>RetailCommerceValidatorBatchTaskFinalizer</c>.</returns>
    public container pack()
    {
        container ret;

        ret = [#CurrentVersion,#CurrentList];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the <paramref name="_packedClass"/> parameter to the current instance of <c>RetailCommerceValidatorBatchTaskFinalizer</c>.
    /// </summary>
    /// <param name = "packedClass">The container from which to deserialize the instance.</param>
    /// <returns>true if deserialization was successful; otherwise, false.</returns>
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    ///    return false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the input parameter Validation Id.
    /// </summary>
    /// <param name = "_validationId">The Validation Id.</param>
    /// <returns>The validation Id.</returns>
    public RetailCommerceValidatorId parmValidationId(RetailCommerceValidatorId _validationId = validationId)
    {
        validationId = _validationId;

        return validationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides class description.
    /// </summary>
    /// <returns>The <c>ClassDescription</c>.</returns>
    public static ClassDescription description()
    {
        return "@Retail:RetailCommerceValidatorBatchTaskDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value for the parameter <c>canRunInNewSession</c> indicating if the Job can run in a new session.
    /// </summary>
    /// <returns>A boolean indicating when the job can run in a new session.</returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a validation test.
    /// </summary>
    public void run()
    {
        ttsbegin;
        RetailCommerceValidatorParameters retailCommerceValidatorParameters = RetailCommerceValidatorParameters::find();
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(validationId, true);

        if (retailCommerceValidator)
        {
            // Calculate the count of Errors/Warning/Messages per entity.
            this.insertCountersForLogs();

            // Load passed entities.
            this.loadPassedProducts(validationId);
            this.loadPassedCatalogs(validationId);
            this.loadPassedCategories(validationId);
            this.loadPassedAttributes(validationId);
            this.loadPassedAttributeGroups(validationId);
            this.loadPassedCategoryHierarchies(validationId);

            retailCommerceValidator.ValidationExecutionStatus = RetailCommerceValidatorExecutionStatus::Finished;
            retailCommerceValidator.ValidationExecutionPhase = RetailCommerceValidatorExecutionPhase::Completed;
            retailCommerceValidator.LastCompletedBatchJobId = retailCommerceValidator.CurrentBatchJobId;
            retailCommerceValidator.LastCompletedDateTime = DateTimeUtil::getSystemDateTime();
            retailCommerceValidator.update();
        }
        ttscommit;

        // Increment Channel Type execution counters
        RetailChannelTable retailChannelTable = RetailChannelTable::findByOperatingUnitId(retailCommerceValidator.OMOperatingUnitId);

        if (retailCommerceValidator.ExecutionMode == RetailCommerceValidatorExecutionMode::ExecuteAll)
        {
            if (retailChanneltable.ChannelType == RetailChannelType::RetailStore)
            {
                RetailCommerceValidatorCounters::incrementCounter("@Retail:RetailCommerceValidatorNumberOfRetailStoresValidated", 1, 0, '', '', '', RetailCommerceValidatorLogType::Total, "@Retail:RetailCommerceValidatorNumberOfRetailStoresValidated");
            }
            else if (retailChanneltable.ChannelType == RetailChannelType::SharePointOnlineStore)
            {
                RetailCommerceValidatorCounters::incrementCounter("@Retail:RetailCommerceValidatorNumberOfOnlineStoresValidated", 1, 0, '', '', '', RetailCommerceValidatorLogType::Total, "@Retail:RetailCommerceValidatorNumberOfRetailStoresValidated");
            }
        }

        RetailCommerceValidatorTimeStamp::AddEndTimeStamp("@Retail:RetailCommerceValidatorValidationCreationTimestamp", retailCommerceValidator.ValidationId);

        //*************************************************************************************
        //  Telemetry : Validation execution stop event
        //*************************************************************************************
        if (retailCommerceValidatorParameters.TelemetryLevel == RetailCommerceValidatorTelemetryLevel::Diagnostic)
        {
            RetailCommerceValidatorTelemetry::addValidationExecutionTelemetry(false, retailCommerceValidator, retailCommerceValidator.CurrentBatchJobId);
        }
        //*************************************************************************************
        //  Telemetry : Validation counters
        //*************************************************************************************
        RetailCommerceValidatorCounters::flushCountersToTelemetry(
            validationId, retailCommerceValidator.CurrentBatchJobId);

        //*************************************************************************************
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCountersForLogs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the count of Errors/Warnings/Messages per entity and stores them.
    /// </summary>
    private void insertCountersForLogs()
    {
        ttsbegin;
        RetailCommerceValidatorParameters retailCommerceValidatorParameters = RetailCommerceValidatorParameters::find();
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(validationId, true);

        retailCommerceValidator.ValidationExecutionStatus = RetailCommerceValidatorExecutionStatus::InProgress;
        retailCommerceValidator.ValidationExecutionPhase = RetailCommerceValidatorExecutionPhase::Finalizing;
        retailCommerceValidator.update();
        ttscommit;

        if (retailCommerceValidatorParameters.UseSetBasedOpForContextCounters == NoYes::Yes)
        {
            this.insertCounters();
        }
        else
        {
            this.insertCountOfLogsForProduct();
            this.insertCountOfLogsForProductVariant();
            this.insertCountOfLogsForProductKit();
            this.insertCountOfLogsForCatalog();
            this.insertCountOfLogsForCategory();
            this.insertCountOfLogsForCategoryHierarchy();
            this.insertCountOfLogsForAttribute();
            this.insertCountOfLogsForAttributeGroup();
            this.insertCountOfLogsForChannel();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCountOfLogsForProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the number of Errors/Warnings/Messages that are logged during the validation into <c>RetailCommerceValidatorLogCountersByContext</c> table .
    /// </summary>
    private void insertCountOfLogsForProduct()
    {
        RetailCommerceValidatorLogContext logContext;
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(validationId);

        // Master or standalone products
        while select logContext
            group by logContext.ProductRefRecId
            where logContext.ValidationId == retailCommerceValidator.ValidationId
                && logContext.BatchJobId == retailCommerceValidator.CurrentBatchJobId
                && logContext.ProductRefRecId != 0
                && logContext.VariantRefRecId == 0
                && logContext.KitRefRecId == 0
        {
            this.insertProductLogsCountByLogType(retailCommerceValidator,logContext.ProductRefRecId, RetailCommerceValidatorLogType::Error);
            this.insertProductLogsCountByLogType(retailCommerceValidator,logContext.ProductRefRecId, RetailCommerceValidatorLogType::Warning);
            this.insertProductLogsCountByLogType(retailCommerceValidator,logContext.ProductRefRecId, RetailCommerceValidatorLogType::Info);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCountOfLogsForProductVariant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the number of Errors/Warnings/Messages that are logged during the validation into <c>RetailCommerceValidatorLogCountersByContext</c> table .
    /// </summary>
    private void insertCountOfLogsForProductVariant()
    {
        RetailCommerceValidatorLogContext logContext;
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(validationId);

        // Product variants
        while select logContext
            group by logContext.ProductRefRecId,logContext.VariantRefRecId
            where logContext.ValidationId == retailCommerceValidator.ValidationId
                && logContext.BatchJobId == retailCommerceValidator.CurrentBatchJobId
                && logContext.ProductRefRecId != 0
                && logContext.VariantRefRecId != 0
                && logContext.KitRefRecId == 0
        {
            this.insertProductVariantLogsCountByLogType(retailCommerceValidator,logContext.ProductRefRecId,logContext.VariantRefRecId, RetailCommerceValidatorLogType::Error);
            this.insertProductVariantLogsCountByLogType(retailCommerceValidator,logContext.ProductRefRecId,logContext.VariantRefRecId, RetailCommerceValidatorLogType::Warning);
            this.insertProductVariantLogsCountByLogType(retailCommerceValidator,logContext.ProductRefRecId,logContext.VariantRefRecId, RetailCommerceValidatorLogType::Info);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCountOfLogsForProductKit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the number of Errors/Warnings/Messages that are logged during the validation into <c>RetailCommerceValidatorLogCountersByContext</c> table .
    /// </summary>
    private void insertCountOfLogsForProductKit()
    {
        RetailCommerceValidatorLogContext logContext;
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(validationId);

        // Product kits
        while select logContext
            group by logContext.ProductRefRecId,logContext.KitRefRecId
            where logContext.ValidationId == retailCommerceValidator.ValidationId
                && logContext.BatchJobId == retailCommerceValidator.CurrentBatchJobId
                && logContext.ProductRefRecId != 0
                && logContext.KitRefRecId != 0
                && logContext.VariantRefRecId == 0
        {
            this.insertProductKitLogsCountByLogType(retailCommerceValidator,logContext.ProductRefRecId,logContext.KitRefRecId, RetailCommerceValidatorLogType::Error);
            this.insertProductKitLogsCountByLogType(retailCommerceValidator,logContext.ProductRefRecId,logContext.KitRefRecId, RetailCommerceValidatorLogType::Warning);
            this.insertProductKitLogsCountByLogType(retailCommerceValidator,logContext.ProductRefRecId,logContext.KitRefRecId, RetailCommerceValidatorLogType::Info);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCountOfLogsForCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the number of Errors/Warnings/Messages that are logged for catalogs during the validation into <c>RetailCommerceValidatorLogCountersByContext</c> table .
    /// </summary>
    private void insertCountOfLogsForCatalog()
    {
        RetailCommerceValidatorLogContext logContext;
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(validationId);

        // Catalogs
        while select logContext
            group by logContext.CatalogRefRecId
            where logContext.ValidationId == retailCommerceValidator.ValidationId
                && logContext.BatchJobId == retailCommerceValidator.CurrentBatchJobId
                && logContext.CatalogRefRecId != 0
        {
            this.insertCatalogLogsCountByLogType(retailCommerceValidator,logContext.CatalogRefRecId, RetailCommerceValidatorLogType::Error);
            this.insertCatalogLogsCountByLogType(retailCommerceValidator,logContext.CatalogRefRecId, RetailCommerceValidatorLogType::Warning);
            this.insertCatalogLogsCountByLogType(retailCommerceValidator,logContext.CatalogRefRecId, RetailCommerceValidatorLogType::Info);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCountOfLogsForCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the number of Errors/Warnings/Messages that are logged for categories during the validation into <c>RetailCommerceValidatorLogCountersByContext</c> table .
    /// </summary>
    private void insertCountOfLogsForCategory()
    {
        RetailCommerceValidatorLogContext logContext;
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(validationId);

        // Categories
        while select logContext
            group by logContext.CategoryRefRecId
            where logContext.ValidationId == retailCommerceValidator.ValidationId
                && logContext.BatchJobId == retailCommerceValidator.CurrentBatchJobId
                && logContext.CategoryRefRecId != 0
        {
            this.insertCategoryLogsCountByLogType(retailCommerceValidator,logContext.CategoryRefRecId, RetailCommerceValidatorLogType::Error);
            this.insertCategoryLogsCountByLogType(retailCommerceValidator,logContext.CategoryRefRecId, RetailCommerceValidatorLogType::Warning);
            this.insertCategoryLogsCountByLogType(retailCommerceValidator,logContext.CategoryRefRecId, RetailCommerceValidatorLogType::Info);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCountOfLogsForCategoryHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the number of Errors/Warnings/Messages that are logged for category hierarchies during the validation into <c>RetailCommerceValidatorLogCountersByContext</c> table.
    /// </summary>
    private void insertCountOfLogsForCategoryHierarchy()
    {
        RetailCommerceValidatorLogContext logContext;
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(validationId);

        // Category hierarchies
        while select logContext
            group by logContext.CategoryHierarchyRefRecId
            where logContext.ValidationId == retailCommerceValidator.ValidationId
                && logContext.BatchJobId == retailCommerceValidator.CurrentBatchJobId
                && logContext.CategoryHierarchyRefRecId != 0
        {
            this.insertCategoryHierarchyLogsCountByLogType(retailCommerceValidator,logContext.CategoryHierarchyRefRecId, RetailCommerceValidatorLogType::Error);
            this.insertCategoryHierarchyLogsCountByLogType(retailCommerceValidator,logContext.CategoryHierarchyRefRecId, RetailCommerceValidatorLogType::Warning);
            this.insertCategoryHierarchyLogsCountByLogType(retailCommerceValidator,logContext.CategoryHierarchyRefRecId, RetailCommerceValidatorLogType::Info);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCountOfLogsForAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the number of Errors/Warnings/Messages that are logged for attributes during the validation into <c>RetailCommerceValidatorLogCountersByContext</c> table.
    /// </summary>
    private void insertCountOfLogsForAttribute()
    {
        RetailCommerceValidatorLogContext logContext;
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(validationId);

        // Attributes.
        while select logContext
            group by logContext.AttributeRefRecId
            where logContext.ValidationId == retailCommerceValidator.ValidationId
                && logContext.BatchJobId == retailCommerceValidator.CurrentBatchJobId
                && logContext.AttributeRefRecId != 0
        {
            this.insertAttributeLogsCountByLogType(retailCommerceValidator,logContext.AttributeRefRecId, RetailCommerceValidatorLogType::Error);
            this.insertAttributeLogsCountByLogType(retailCommerceValidator,logContext.AttributeRefRecId, RetailCommerceValidatorLogType::Warning);
            this.insertAttributeLogsCountByLogType(retailCommerceValidator,logContext.AttributeRefRecId, RetailCommerceValidatorLogType::Info);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCountOfLogsForAttributeGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the number of Errors/Warnings/Messages that are logged for attribute groups during the validation into <c>RetailCommerceValidatorLogCountersByContext</c> table.
    /// </summary>
    private void insertCountOfLogsForAttributeGroup()
    {
        RetailCommerceValidatorLogContext logContext;
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(validationId);

        // Attribute groups.
        while select logContext
            group by logContext.AttributeGroupRefRecId
            where logContext.ValidationId == retailCommerceValidator.ValidationId
                && logContext.BatchJobId == retailCommerceValidator.CurrentBatchJobId
                && logContext.AttributeGroupRefRecId != 0
        {
            this.insertAttributeGroupLogsCountByLogType(retailCommerceValidator,logContext.AttributeGroupRefRecId, RetailCommerceValidatorLogType::Error);
            this.insertAttributeGroupLogsCountByLogType(retailCommerceValidator,logContext.AttributeGroupRefRecId, RetailCommerceValidatorLogType::Warning);
            this.insertAttributeGroupLogsCountByLogType(retailCommerceValidator,logContext.AttributeGroupRefRecId, RetailCommerceValidatorLogType::Info);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCountOfLogsForChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the number of Errors/Warnings/Messages that are logged for a channel during the validation into <c>RetailCommerceValidatorLogCountersByContext</c> table.
    /// </summary>
    private void insertCountOfLogsForChannel()
    {
        RetailCommerceValidatorLogContext logContext;
        RetailCommerceValidator retailCommerceValidator = RetailCommerceValidator::find(validationId);

        // Channels.
        while select logContext
            group by logContext.OMOperatingUnitId
            where logContext.ValidationId == retailCommerceValidator.ValidationId
                && logContext.BatchJobId == retailCommerceValidator.CurrentBatchJobId
                && logContext.OMOperatingUnitId != 0
        {
            this.insertChannelLogsCountByLogType(retailCommerceValidator,logContext.OMOperatingUnitId, RetailCommerceValidatorLogType::Error);
            this.insertChannelLogsCountByLogType(retailCommerceValidator,logContext.OMOperatingUnitId, RetailCommerceValidatorLogType::Warning);
            this.insertChannelLogsCountByLogType(retailCommerceValidator,logContext.OMOperatingUnitId, RetailCommerceValidatorLogType::Info);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProductLogsCountByLogType</Name>
				<Source><![CDATA[
    private void insertProductLogsCountByLogType(RetailCommerceValidator _validator, RefRecId _productRecId, RetailCommerceValidatorLogType _logType)
    {
        RetailCommerceValidatorLog logs;
        RetailCommerceValidatorLogContext logContextLoc;
        RetailCommerceValidatorLogCountersByContext logCountersByContext;

        // Get the count for Master or Standalone products.
        select count(RecId) from logs
            where logs.LogType == _logType
            exists join logContextLoc
                where logContextLoc.RecId == logs.ContextRecId
                    && logContextLoc.ValidationId == _validator.ValidationId
                    && logContextLoc.BatchJobId == _validator.CurrentBatchJobId
                    && logContextLoc.ProductRefRecId == _productRecId
                    && logContextLoc.VariantRefRecId == 0
                    && logContextLoc.KitRefRecId == 0;

        this.insertOrUpdateLogCounters(_validator, _productRecId, RetailCommerceValidatorTestStage::Products, _logType, logs.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProductVariantLogsCountByLogType</Name>
				<Source><![CDATA[
    private void insertProductVariantLogsCountByLogType(RetailCommerceValidator _validator, RefRecId _productRecId,RefRecId _variantRecId, RetailCommerceValidatorLogType _logType)
    {
        RetailCommerceValidatorLog logs;
        RetailCommerceValidatorLogContext logContextLoc;
        RetailCommerceValidatorLogCountersByContext logCountersByContext;

        // Get the count for product variants.
        select count(RecId) from logs
            where logs.LogType == _logType
            exists join logContextLoc
                where logContextLoc.RecId == logs.ContextRecId
                    && logContextLoc.ValidationId == _validator.ValidationId
                    && logContextLoc.BatchJobId == _validator.CurrentBatchJobId
                    && logContextLoc.ProductRefRecId == _productRecId
                    && logContextLoc.VariantRefRecId == _variantRecId
                    && logContextLoc.KitRefRecId == 0;

        this.insertOrUpdateLogCounters(_validator, _productRecId, RetailCommerceValidatorTestStage::ProductVariants, _logType, logs.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProductKitLogsCountByLogType</Name>
				<Source><![CDATA[
    private void insertProductKitLogsCountByLogType(RetailCommerceValidator _validator, RefRecId _productRecId,RefRecId _kitRecId, RetailCommerceValidatorLogType _logType)
    {
        RetailCommerceValidatorLog logs;
        RetailCommerceValidatorLogContext logContextLoc;
        RetailCommerceValidatorLogCountersByContext logCountersByContext;

        // Get the count for product kits.
        select count(RecId) from logs
            where logs.LogType == _logType
            exists join logContextLoc
                where logContextLoc.RecId == logs.ContextRecId
                    && logContextLoc.ValidationId == _validator.ValidationId
                    && logContextLoc.BatchJobId == _validator.CurrentBatchJobId
                    && logContextLoc.ProductRefRecId == _productRecId
                    && logContextLoc.KitRefRecId == _kitRecId
                    && logContextLoc.VariantRefRecId == 0;

        this.insertOrUpdateLogCounters(_validator, _productRecId, RetailCommerceValidatorTestStage::ProductKits, _logType, logs.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCatalogLogsCountByLogType</Name>
				<Source><![CDATA[
    private void insertCatalogLogsCountByLogType(RetailCommerceValidator _validator, RefRecId _catalog, RetailCommerceValidatorLogType _logType)
    {
        RetailCommerceValidatorLog logs;
        RetailCommerceValidatorLogContext logContextLoc;
        RetailCommerceValidatorLogCountersByContext logCountersByContext;

        // Get the count for Catalogs.
        select count(RecId) from logs
            where logs.LogType == _logType
            exists join logContextLoc
                where logContextLoc.RecId == logs.ContextRecId
                    && logContextLoc.ValidationId == _validator.ValidationId
                    && logContextLoc.BatchJobId == _validator.CurrentBatchJobId
                    && logContextLoc.CatalogRefRecId == _catalog;

        this.insertOrUpdateLogCounters(_validator, _catalog, RetailCommerceValidatorTestStage::CommerceCatalogs, _logType, logs.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCategoryLogsCountByLogType</Name>
				<Source><![CDATA[
    private void insertCategoryLogsCountByLogType(RetailCommerceValidator _validator, RefRecId _category, RetailCommerceValidatorLogType _logType)
    {
        RetailCommerceValidatorLog logs;
        RetailCommerceValidatorLogContext logContextLoc;
        RetailCommerceValidatorLogCountersByContext logCountersByContext;

        // Get the count for Category.
        select count(RecId) from logs
            where logs.LogType == _logType
            exists join logContextLoc
                where logContextLoc.RecId == logs.ContextRecId
                    && logContextLoc.ValidationId == _validator.ValidationId
                    && logContextLoc.BatchJobId == _validator.CurrentBatchJobId
                    && logContextLoc.CategoryRefRecId == _category;

        this.insertOrUpdateLogCounters(_validator, _category, RetailCommerceValidatorTestStage::CommerceCategories, _logType, logs.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCategoryHierarchyLogsCountByLogType</Name>
				<Source><![CDATA[
    private void insertCategoryHierarchyLogsCountByLogType(RetailCommerceValidator _validator, RefRecId _categoryHierarchy, RetailCommerceValidatorLogType _logType)
    {
        RetailCommerceValidatorLog logs;
        RetailCommerceValidatorLogContext logContextLoc;
        RetailCommerceValidatorLogCountersByContext logCountersByContext;

        // Get the count for Category hierarchy.
        select count(RecId) from logs
            where logs.LogType == _logType
            exists join logContextLoc
                where logContextLoc.RecId == logs.ContextRecId
                    && logContextLoc.ValidationId == _validator.ValidationId
                    && logContextLoc.BatchJobId == _validator.CurrentBatchJobId
                    && logContextLoc.CategoryHierarchyRefRecId == _categoryHierarchy;

        this.insertOrUpdateLogCounters(_validator, _categoryHierarchy, RetailCommerceValidatorTestStage::CategoryHierarchies, _logType, logs.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAttributeLogsCountByLogType</Name>
				<Source><![CDATA[
    private void insertAttributeLogsCountByLogType(RetailCommerceValidator _validator, RefRecId _attribute, RetailCommerceValidatorLogType _logType)
    {
        RetailCommerceValidatorLog logs;
        RetailCommerceValidatorLogContext logContextLoc;
        RetailCommerceValidatorLogCountersByContext logCountersByContext;

        // Get the count for Attribute.
        select count(RecId) from logs
            where logs.LogType == _logType
            exists join logContextLoc
                where logContextLoc.RecId == logs.ContextRecId
                    && logContextLoc.ValidationId == _validator.ValidationId
                    && logContextLoc.BatchJobId == _validator.CurrentBatchJobId
                    && logContextLoc.AttributeRefRecId == _attribute;

        this.insertOrUpdateLogCounters(_validator, _attribute, RetailCommerceValidatorTestStage::CommerceAttributes, _logType, logs.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAttributeGroupLogsCountByLogType</Name>
				<Source><![CDATA[
    private void insertAttributeGroupLogsCountByLogType(RetailCommerceValidator _validator, RefRecId _attributeGroup, RetailCommerceValidatorLogType _logType)
    {
        RetailCommerceValidatorLog logs;
        RetailCommerceValidatorLogContext logContextLoc;
        RetailCommerceValidatorLogCountersByContext logCountersByContext;

        // Get the count for Attribute group.
        select count(RecId) from logs
            where logs.LogType == _logType
            exists join logContextLoc
                where logContextLoc.RecId == logs.ContextRecId
                    && logContextLoc.ValidationId == _validator.ValidationId
                    && logContextLoc.BatchJobId == _validator.CurrentBatchJobId
                    && logContextLoc.AttributeGroupRefRecId == _attributeGroup;

        this.insertOrUpdateLogCounters(_validator, _attributeGroup, RetailCommerceValidatorTestStage::CommerceAttributeGroups, _logType, logs.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertChannelLogsCountByLogType</Name>
				<Source><![CDATA[
    private void insertChannelLogsCountByLogType(RetailCommerceValidator _validator, RefRecId _omOperatingUnit, RetailCommerceValidatorLogType _logType)
    {
        RetailCommerceValidatorLog logs;
        RetailCommerceValidatorLogContext logContextLoc;
        RetailCommerceValidatorLogCountersByContext logCountersByContext;

        // Get the count for Channel.
        select count(RecId) from logs
            where logs.LogType == _logType
            exists join logContextLoc
                where logContextLoc.RecId == logs.ContextRecId
                    && logContextLoc.ValidationId == _validator.ValidationId
                    && logContextLoc.BatchJobId == _validator.CurrentBatchJobId
                    && logContextLoc.OMOperatingUnitId == _omOperatingUnit;

        this.insertOrUpdateLogCounters(_validator, _omOperatingUnit, RetailCommerceValidatorTestStage::CommerceChannels, _logType, logs.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrUpdateLogCounters</Name>
				<Source><![CDATA[
    private void insertOrUpdateLogCounters(
        RetailCommerceValidator _validator,
        RefRecId _entityRecId,
        RetailCommerceValidatorTestStage _entityType,
        RetailCommerceValidatorLogType _logType,
        int64 _countOfLogs)
    {
        RetailCommerceValidatorLogCountersByContext logCountersByContext;

        select firstonly logCountersByContext
            where logCountersByContext.BatchJobId == _validator.CurrentBatchJobId
                && logCountersByContext.ValidationId == _validator.ValidationId
                && logCountersByContext.EntityRefRecId == _entityRecId
                && logCountersByContext.EntityType == _entityType;

        if(_logType == RetailCommerceValidatorLogType::Error)
        {
            logCountersByContext.ErrorCount = _countOfLogs;
        }
        else if(_logType == RetailCommerceValidatorLogType::Warning)
        {
            logCountersByContext.WarningCount = _countOfLogs;
        }
        else if(_logType == RetailCommerceValidatorLogType::Info)
        {
            logCountersByContext.MessageCount = _countOfLogs;
        }

        if (!logCountersByContext.RecId)
        {
            logCountersByContext.ValidationId = _validator.ValidationId;
            logCountersByContext.BatchJobId = _validator.CurrentBatchJobId;
            logCountersByContext.EntityRefRecId = _entityRecId;
            logCountersByContext.EntityType = _entityType;

            logCountersByContext.insert();
        }
        else
        {
            logCountersByContext.selectForUpdate(true);
            logCountersByContext.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCounters</Name>
				<Source><![CDATA[
    private void insertCounters()
    {
        RetailCommerceValidatorLogCountersByContext logCounterInserts, logCountersTmp;
        RetailCommerceValidator validator = RetailCommerceValidator::find(validationId);
        RefRecId currentBatchJob = validator.CurrentBatchJobId;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();
        System.Exception exception;

        try
        {
            ttsbegin;
            insert_recordset logCounterInserts(
                ErrorCount,
                WarningCount,
                MessageCount,
                EntityRefRecId,
                ValidationId,
                BatchJobId
                )
            select
                sum(ErrorCount),
                sum(WarningCount),
                sum(MessageCount),
                EntityRefRecId,
                validationId,
                currentBatchJob
            from logCountersTmp
                group by EntityRefRecId,ValidationId,BatchJobId
                where logCountersTmp.ValidationId == validationId
                    && logCountersTmp.BatchJobId == currentBatchJob
                    && logCountersTmp.IsTemp == NoYes::Yes;
            ttscommit;
        }
        catch(exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry(validationId, classStr(RetailCommerceValidatorBatchTaskFinalizer), xSession::currentRetryCount(), false, exception);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry(validationId, classStr(RetailCommerceValidatorBatchTaskFinalizer), xSession::currentRetryCount(), true, exception);
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPassedProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all passed products into <c>RetailCommerceValidatorPassedProducts</c> table.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    private void loadPassedProducts(RetailCommerceValidatorId _validationId)
    {
        RetailKit retailKit;
        EcoResProductMaster ecoResProductMaster;
        EcoResDistinctProduct ecoResDistinctProduct;
        EcoResDistinctProductVariant ecoResDistinctProductVariant;
        EcoResProductCategory ecoResProductCategory;
        RetailCommerceValidator retailCommerceValidator;
        RetailInternalOrganization retailInternalOrganization;
        RetailCommerceValidatorWorkChannelProducts workChannelProducts;
        RetailCommerceValidatorWorkChannelAssortedProducts workChannelAssortedProducts;
        RetailCommerceValidatorLogContext logContext;
        RetailCommerceValidatorLog validatorLog;
        RetailCommerceValidatorPassedProducts passedValidatorProductsTmp,passedValidatorProducts,passedInsertedProducts;
        RefRecId currentbatchJobId = RetailCommerceValidator::find(_validationId).CurrentBatchJobId;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();
        System.Exception exception;
        int64 itsNotAVariant = 0;
        int64 itsNotAMaster = 0;
        int64 itsNotAKit = 0;

        #localmacro.NavigationCategoryJoin
            exists join retailInternalOrganization
                where retailInternalOrganization.CategoryHierarchy == ecoResProductCategory.CategoryHierarchy
                exists join retailCommerceValidator
                    where retailCommerceValidator.OMOperatingUnitId == retailInternalOrganization.InternalOrganization
                        && retailCommerceValidator.ValidationId == _validationId
        #endmacro

        try
        {
            /*
                1. There are no product rules with log type = Information, all are with log type = Warning/Error.
                2. In RetailCommerceValidatorLogContext table,ProductRefRecId + (Variant/MasterProduct/Kit/KitComponent/KitComponentSubstitute/Assortment/Attribute/Color/Size/Style/Configuration) RefRecIds are filled in.
                   Rest all fields will be empty for product rules
                3. To findout the passed products, we need to fetch data from different sources like WorkChannelTables, hierarchy products
                   for which the data is not present in RetailCommerceValidatorLogContext
            */

            ttsbegin;

            passedValidatorProductsTmp.setTempDB();

            // Insert products without any issues
            insert_recordset passedValidatorProductsTmp(ValidationId, BatchJobId, ProductRefRecId, MasterProductRefRecId, VariantRefRecId, KitRefRecId)
                select ValidationId, currentbatchJobId, ProductRefRecId, MasterRefRecId, VariantRefRecId, KitRefRecId from workChannelAssortedProducts
                    group by workChannelAssortedProducts.ProductRefRecId, workChannelAssortedProducts.MasterRefRecId,
                        workChannelAssortedProducts.VariantRefRecId,workChannelAssortedProducts.KitRefRecId,workChannelAssortedProducts.ValidationId
                    where workChannelAssortedProducts.ValidationId == _validationId
                    exists join workChannelProducts
                        where workChannelProducts.ProductRefRecId == workChannelAssortedProducts.ProductRefRecId
                            && workChannelProducts.ValidationId == _validationId
                        notexists join logContext
                            where logContext.ProductRefRecId == workChannelProducts.ProductRefRecId
                                && logContext.ValidationId == workChannelProducts.ValidationId
                                && logContext.BatchJobId == currentbatchJobId;

            // Insert all Product Masters from Channel navigation hierarchy (excluding kit Masters)
            insert_recordset passedValidatorProductsTmp (ValidationId, BatchJobId, ProductRefRecId, MasterProductRefRecId, VariantRefRecId, KitRefRecId)
                select  _validationId, currentbatchJobId, RecId, RecId, itsNotAVariant, itsNotAKit from ecoResProductMaster
                    exists join ecoResProductCategory
                        where ecoResProductCategory.Product == ecoResProductMaster.RecId
                    #NavigationCategoryJoin
            notexists join retailKit
                        where retailKit.ProductMaster == ecoResProductMaster.RecId;

            // Insert all Kits from Channel navigation hierarchy (Only kit products)
            insert_recordset passedValidatorProductsTmp (ValidationId, BatchJobId, ProductRefRecId, MasterProductRefRecId, VariantRefRecId, KitRefRecId)
                select _validationId, currentbatchJobId, RecId, RecId, itsNotAVariant from ecoResProductMaster
                    join ecoResProductCategory
                        where ecoResProductCategory.Product == ecoResProductMaster.RecId
                    join retailInternalOrganization
                        where retailInternalOrganization.CategoryHierarchy == ecoResProductCategory.CategoryHierarchy
                    join retailCommerceValidator
                        where retailCommerceValidator.OMOperatingUnitId == retailInternalOrganization.InternalOrganization
                            && retailCommerceValidator.ValidationId == _validationId
                    join RecId from retailKit
                        where retailKit.ProductMaster == ecoResProductMaster.RecId;

            // Insert all Variant products from Channel navigation hierarchy (excluding Master products & Kits)
            insert_recordset passedValidatorProductsTmp (ValidationId, BatchJobId, ProductRefRecId, MasterProductRefRecId, VariantRefRecId, KitRefRecId)
                select _validationId, currentbatchJobId, RecId, ProductMaster, RecId, itsNotAKit from ecoResDistinctProductVariant
                    exists join ecoResProductCategory
                        where ecoResProductCategory.Product == ecoResDistinctProductVariant.RecId
                    #NavigationCategoryJoin;

            // Insert all standalone products from Channel navigation hierarchy (excluding Master products, Variants & Kits)
            insert_recordset passedValidatorProductsTmp (ValidationId, BatchJobId, ProductRefRecId, MasterProductRefRecId, VariantRefRecId, KitRefRecId)
                select _validationId, currentbatchJobId, RecId, itsNotAMaster, itsNotAVariant, itsNotAKit from ecoResDistinctProduct
                    exists join ecoResProductCategory
                        where ecoResProductCategory.Product == ecoResDistinctProduct.RecId
                    #NavigationCategoryJoin
            notexists join ecoResDistinctProductVariant
                        where ecoResDistinctProductVariant.RecId == ecoResDistinctProduct.RecId;

            // Delete products if they have errors/warning in log context, infact no product rule is of logtype = Info.
            // If we find logContext for product, it can be considered as it has errors/warnings.
            delete_from passedValidatorProductsTmp
                exists join logContext
                    where logContext.ProductRefRecId == passedValidatorProductsTmp.ProductRefRecId
                        && logContext.ValidationId == passedValidatorProductsTmp.ValidationId
                        && logContext.BatchJobId == passedValidatorProductsTmp.BatchJobId;

            // Delete duplicated products
            delete_from passedValidatorProductsTmp
                exists join passedInsertedProducts
                    where passedInsertedProducts.ProductRefRecId == passedValidatorProductsTmp.ProductRefRecId
                        && passedInsertedProducts.ValidationId == passedValidatorProductsTmp.ValidationId
                        && passedInsertedProducts.BatchJobId == passedValidatorProductsTmp.BatchJobId;

            // Insert passed products in to DB.
            insert_recordset passedValidatorProducts (ProductRefRecId, MasterProductRefRecId, VariantRefRecId, KitRefRecId, ValidationId, BatchJobId)
            select ProductRefRecId, MasterProductRefRecId, VariantRefRecId, KitRefRecId, ValidationId, BatchJobId from passedValidatorProductsTmp
                group by ProductRefRecId,MasterProductRefRecId,VariantRefRecId,KitRefRecId,ValidationId,BatchJobId
            notexists join passedInsertedProducts
                where passedInsertedProducts.ProductRefRecId == passedValidatorProductsTmp.ProductRefRecId
                    && passedInsertedProducts.ValidationId == passedValidatorProductsTmp.ValidationId
                    && passedInsertedProducts.BatchJobId == passedValidatorProductsTmp.BatchJobId;
            ttscommit;
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorResetPassedEntity", funcName()), xSession::currentRetryCount(), false, exception);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorResetPassedEntity", funcName()), xSession::currentRetryCount(), true, exception);
                sleep(parameters.PauseInMsBeforeRetry);
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPassedAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all passed attribute into <c>RetailCommerceValidatorPassedAttributes</c> table.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    private void loadPassedAttributes(RetailCommerceValidatorId _validationId)
    {
        RetailInternalOrganization retailInternalOrganization;
        RetailInternalOrgProductAttributeValue retailInternalOrgProductAttributeValue;
        EcoResCategoryAttributeGroupAttrView ecoResCategoryAttributeGroupAttrView;
        RetailCommerceValidatorPassedAttributes passedAttributes, passedAttributesTmp, existingPassedAttributes;
        RetailCommerceValidatorLog validatorLog;
        RetailCommerceValidatorLogContext logContext;
        RetailCommerceValidatorWorkChannelCategoryHierarchies validatorWorkChannelCategoryHierarchies;
        RetailCommerceValidator commerceValidator = RetailCommerceValidator::find(_validationId);
        RefRecId currentBatchJobId = commerceValidator.CurrentBatchJobId;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();
        System.Exception exception;

        try
        {
            /*
                1.  Only one attribute rule is Information (Passed) rule, rest all are warning/error
                2.  To find out passed attributes
                    a.  Fetch all attributes which have no Logs in LogContext table.
                    b.  Fetch all attributes which have logs in LogContext table of LogType = Info – These attributes may be part of warnings/Errors
                    c.  So, delete Warnings/errored attributes from passed attributes list.
            */

            ttsbegin;
            passedAttributesTmp.setTempDB();

            // Fetch all attributes from <c>EcoResCategoryAttributeGroupAttrView</c> view which have no logs in logContext tables, these are passed attributes.
            insert_recordset passedAttributesTmp (ValidationId, BatchJobId, AttributeRefRecId)
            select _validationId, currentBatchJobId, Attribute from ecoResCategoryAttributeGroupAttrView
                group by ecoResCategoryAttributeGroupAttrView.Attribute
                exists join validatorWorkChannelCategoryHierarchies
                    where validatorWorkChannelCategoryHierarchies.CategoryHierarchyRecId == ecoResCategoryAttributeGroupAttrView.CategoryHierarchy
                        && validatorWorkChannelCategoryHierarchies.ValidationId == _validationId
                notexists join logContext
                    where logContext.AttributeRefRecId == ecoResCategoryAttributeGroupAttrView.Attribute
                        && logContext.ValidationId == _validationId
                        && logContext.BatchJobId == currentBatchJobId;

            // Fetch all attributes from <c>RetailInternalOrgProductAttributeValue</c> views which have no logs in logContext tables, these are passed attributes.
            insert_recordset passedAttributesTmp (ValidationId, BatchJobId, AttributeRefRecId)
            Select _validationId, currentBatchJobId, Attribute from retailInternalOrgProductAttributeValue
                group by retailInternalOrgProductAttributeValue.Attribute
                exists join retailInternalOrganization
                    where retailInternalOrganization.RecId == retailInternalOrgProductAttributeValue.InternalOrganization
                        && retailInternalOrganization.InternalOrganization == commerceValidator.OMOperatingUnitId
                notexists join logContext
                    where logContext.AttributeRefRecId == retailInternalOrgProductAttributeValue.Attribute
                        && logContext.ValidationId == _validationId
                        && logContext.BatchJobId == currentBatchJobId;

            // Fetch attributes for which the logtype = Info, these are passed attributes.
            insert_recordset passedAttributesTmp (ValidationId, BatchJobId, AttributeRefRecId)
            select _validationId, currentBatchJobId, AttributeRefRecId from logContext
                group by logContext.AttributeRefRecId
                where logContext.AttributeRefRecId != 0
                    && logContext.ValidationId == _validationId
                    && logContext.BatchJobId == currentBatchJobId
                exists join validatorLog
                    where validatorLog.ContextRecId == logContext.RecId
                        && validatorLog.ValidationId == logContext.ValidationId
                        && validatorLog.BatchJobId == logContext.BatchJobId
                        && validatorLog.LogType == RetailCommerceValidatorLogType::Info;

            // If there are any Attributes with log type info, there is a chance that same attributes may also have logs of log type Error/warning,
            // So delete those Errored or warning Attributes from passed attributes.
            delete_from passedAttributesTmp
                exists join logContext
                    where logContext.AttributeRefRecId == passedAttributesTmp.AttributeRefRecId
                        && logContext.ValidationId == passedAttributesTmp.ValidationId
                        && logContext.BatchJobId == passedAttributesTmp.BatchJobId
                exists join validatorLog
                    where validatorLog.ContextRecId == logContext.RecId
                        && validatorLog.ValidationId == logContext.ValidationId
                        && validatorLog.BatchJobId == logContext.BatchJobId
                        && (validatorLog.LogType == RetailCommerceValidatorLogType::Error || validatorLog.LogType == RetailCommerceValidatorLogType::Warning);

            // Insert above passed attributes in to DB.
            insert_recordset passedAttributes (ValidationId, BatchJobId, AttributeRefRecId)
            select ValidationId, BatchJobId, AttributeRefRecId from passedAttributesTmp
                group by AttributeRefRecId, ValidationId, BatchJobId
                notexists join existingPassedAttributes
                    where existingPassedAttributes.AttributeRefRecId == passedAttributesTmp.AttributeRefRecId
                        && existingPassedAttributes.ValidationId == passedAttributesTmp.ValidationId
                        && existingPassedAttributes.BatchJobId == passedAttributesTmp.BatchJobId;
            ttscommit;
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorResetPassedEntity", funcName()), xSession::currentRetryCount(), false, exception);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorResetPassedEntity", funcName()), xSession::currentRetryCount(), true, exception);
                sleep(parameters.PauseInMsBeforeRetry);
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPassedAttributeGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all passed attribute groups into <c>RetailCommerceValidatorPassedAttributeGroups</c> table.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    private void loadPassedAttributeGroups(RetailCommerceValidatorId _validationId)
    {
        EcoResCategoryAttributeGroupAttrView ecoResCategoryAttributeGroupAttrView;
        RetailCommerceValidatorPassedAttributeGroups passedAttributeGroupsTmp, passedAttributeGroups, existingPassedAttributeGroups;
        RetailCommerceValidatorWorkChannelCategoryHierarchies validatorWorkChannelCategoryHierarchies;
        RefRecId currentBatchJobId = RetailCommerceValidator::find(_validationId).CurrentBatchJobId;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();
        System.Exception exception;

        try
        {
            ttsbegin;
            passedAttributeGroupsTmp.setTempDB();

            // All attribute group rules are of log type = Info, So all groups which are validated can be considered as passed attribute groups.
            insert_recordset passedAttributeGroupsTmp (ValidationId, BatchJobId, AttributeGroupRefRecId)
                select _validationId, currentBatchJobId, AttributeGroup from ecoResCategoryAttributeGroupAttrView
                    exists join validatorWorkChannelCategoryHierarchies
                        group by ecoResCategoryAttributeGroupAttrView.AttributeGroup
                        where validatorWorkChannelCategoryHierarchies.CategoryHierarchyRecId == ecoResCategoryAttributeGroupAttrView.CategoryHierarchy
                            && validatorWorkChannelCategoryHierarchies.ValidationId == _validationId
                    notexists join existingPassedAttributeGroups
                        where existingPassedAttributeGroups.AttributeGroupRefRecId == ecoResCategoryAttributeGroupAttrView.AttributeGroup
                            && existingPassedAttributeGroups.ValidationId == _validationId
                            && existingPassedAttributeGroups.BatchJobId == currentBatchJobId;

            // Insert passed attribute groups into DB.
            insert_recordset passedAttributeGroups (ValidationId, BatchJobId, AttributeGroupRefRecId)
                select ValidationId, BatchJobId, AttributeGroupRefRecId from passedAttributeGroupsTmp;
            ttscommit;
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorResetPassedEntity", funcName()), xSession::currentRetryCount(), false, exception);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorResetPassedEntity", funcName()), xSession::currentRetryCount(), true, exception);
                sleep(parameters.PauseInMsBeforeRetry);
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPassedCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all passed categories into <c>RetailCommerceValidatorPassedCategories</c> table.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    private void loadPassedCategories(RetailCommerceValidatorId _validationId)
    {
        RetailCommerceValidatorLog validatorLog;
        RetailCommerceValidatorLogContext logContext;
        RetailCommerceValidatorPassedCategories passedCategories, passedCategoriesTmp, existingPassedCategories;
        RetailCommerceValidatorWorkChannelCategories workChannelCategories;
        RefRecId currentBatchJobId = RetailCommerceValidator::find(_validationId).CurrentBatchJobId;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();
        System.Exception exception;

        try
        {
            /*
                1.  All category rules are warning/error
                2.  To find out passed categories.
                    a.  Fetch all categories which have no logs in LgContext – Directly passed so have no logs.
                    b.  Fetch all categories which have logs of type Info – This may bring categories which have errors/warnings.
                    c.  So, delete categories from passed categories list which have errors/warnings in LogContext.
            */

            ttsbegin;
            passedCategoriesTmp.setTempDB();

            // Find all passed categories.
            insert_recordset passedCategoriesTmp (ValidationId, BatchJobId, CategoryRefRecId, CategoryHierarchyRecId)
            select _validationId, currentBatchJobId, CategoryRefRecId, CategoryHierarchyRecId from workChannelCategories
                group by CategoryRefRecId,CategoryHierarchyRecId
                where workChannelCategories.ValidationId == _validationId
                notexists join logContext
                    where logContext.CategoryRefRecId == workChannelCategories.CategoryRefRecId
                        && logContext.ValidationId == _validationId
                        && logContext.BatchJobId == currentBatchJobId;

            // Find categories for which log type = Info
            insert_recordset passedCategoriesTmp (ValidationId, BatchJobId, CategoryRefRecId, CategoryHierarchyRecId)
            select _validationId, currentBatchJobId, CategoryRefRecId, CategoryHierarchyRecId from workChannelCategories
                group by CategoryRefRecId,CategoryHierarchyRecId
                where workChannelCategories.ValidationId == _validationId
                exists join logContext
                    where logContext.CategoryRefRecId == workChannelCategories.CategoryRefRecId
                        && logContext.ValidationId == _validationId
                        && logContext.BatchJobId == currentBatchJobId
                exists join validatorLog
                    where validatorLog.ContextRecId == logContext.RecId
                        && validatorLog.ValidationId == logContext.ValidationId
                        && validatorLog.BatchJobId == logContext.BatchJobId
                        && validatorLog.LogType == RetailCommerceValidatorLogType::Info;

            // If there are any Categories with log type info, there is a chance that same categories may also have logs of log type Error/warning,
            // So delete those Errored or warning categories from passed categories.
            delete_from passedCategoriesTmp
                exists join logContext
                    where logContext.CategoryRefRecId == passedCategoriesTmp.CategoryRefRecId
                        && logContext.ValidationId == passedCategoriesTmp.ValidationId
                        && logContext.BatchJobId == passedCategoriesTmp.BatchJobId
                exists join validatorLog
                    where validatorLog.ContextRecId == logContext.RecId
                        && validatorLog.ValidationId == logContext.ValidationId
                        && validatorLog.BatchJobId == logContext.BatchJobId
                        && (validatorLog.LogType == RetailCommerceValidatorLogType::Error || validatorLog.LogType == RetailCommerceValidatorLogType::Warning);

            // Insert passed categories into DB.
            insert_recordset passedCategories (ValidationId, BatchJobId, CategoryRefRecId, CategoryHierarchyRecId)
            select ValidationId, BatchJobId, CategoryRefRecId, CategoryHierarchyRecId from passedCategoriesTmp
                group by ValidationId, BatchJobId, CategoryRefRecId, CategoryHierarchyRecId
                notexists join existingPassedCategories
                    where existingPassedCategories.ValidationId == passedCategoriesTmp.ValidationId
                        && existingPassedCategories.BatchJobId == passedCategoriesTmp.BatchJobId
                        && existingPassedCategories.CategoryRefRecId == passedCategoriesTmp.CategoryRefRecId
                        && existingPassedCategories.CategoryHierarchyRecId == passedCategoriesTmp.CategoryHierarchyRecId;
            ttscommit;
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorResetPassedEntity", funcName()), xSession::currentRetryCount(), false, exception);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorResetPassedEntity", funcName()), xSession::currentRetryCount(), true, exception);
                sleep(parameters.PauseInMsBeforeRetry);
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPassedCatalogs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all passed catalogs into <c>RetailCommerceValidatorPassedCatalogs</c> table.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    private void loadPassedCatalogs(RetailCommerceValidatorId _validationId)
    {
        RetailCommerceValidatorWorkChannelCatalogs workCatalogs;
        RetailCommerceValidatorPassedCatalogs passedCatalogs, passedCatalogsTmp, existingPassedCatalogs;
        RetailCommerceValidatorLogContext logContext;
        RetailCommerceValidatorLog logTable, logTableWithIssues;
        RetailCommerceValidator validator = RetailCommerceValidator::find(_validationId);
        RefRecId currentBatchJobId = validator.CurrentBatchJobId;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();
        System.Exception exception;

        try
        {
            /*
                1.  Some catalog rules are error, and some are warnings and only one catalog rule (Cata-Ru-003)is information.
                2.  To find out passed catalogs
                    a.  Need to fetch all catalogs which have No logs in LogContext – That means directly passed.
                    b.  Need to fetch catalogs which logs of type Information – This brings up catalogs which may have logType warnings/Errors.
                    c.  Need to remove catalogs which have log type as Warnings/Erros, this will keep only catalogs with information and passed.
            */

            ttsbegin;
            passedCatalogsTmp.setTempDB();

            // Catalogs with no logs, that means they are passed catalogs
            insert_recordset passedCatalogsTmp (CatalogRefRecId, ValidationId, BatchJobId)
            select CatalogRefRecId, _validationId, currentBatchJobId from workCatalogs
                group by workCatalogs.CatalogRefRecId
                where workCatalogs.CatalogRefRecId != 0
                    && workCatalogs.ValidationId == validator.ValidationId
                notexists join logContext
                    where logContext.CatalogRefRecId == workCatalogs.CatalogRefRecId
                        && logContext.ValidationId == workCatalogs.ValidationId
                        && logContext.BatchJobId == validator.CurrentBatchJobId;

            // Catalogs with log type as Information.
            insert_recordset passedCatalogsTmp (CatalogRefRecId, ValidationId, BatchJobId)
            select CatalogRefRecId, _validationId, currentBatchJobId from workCatalogs
                group by workCatalogs.CatalogRefRecId
                where workCatalogs.CatalogRefRecId != 0
                    && workCatalogs.ValidationId == validator.ValidationId
                exists join logContext
                    where logContext.CatalogRefRecId == workCatalogs.CatalogRefRecId
                        && logContext.ValidationId == workCatalogs.ValidationId
                        && logContext.BatchJobId == validator.CurrentBatchJobId
                exists join logTable
                    where logTable.ContextRecId == logContext.RecId
                        && logTable.LogType == RetailCommerceValidatorLogType::Info
                        && logTable.ValidationId == logContext.ValidationId
                        && logTable.BatchJobId == logContext.BatchJobId;

            // Remove Catalogs if Log type with Warning/Error
            delete_from passedCatalogsTmp
                where passedCatalogsTmp.ValidationId == validator.ValidationId
                    && passedCatalogsTmp.BatchJobId == validator.CurrentBatchJobId
                exists join logContext
                    where logContext.CatalogRefRecId == passedCatalogsTmp.CatalogRefRecId
                        && logContext.ValidationId == passedCatalogsTmp.ValidationId
                        && logContext.BatchJobId == passedCatalogsTmp.BatchJobId
                exists join logTableWithIssues
                    where logTableWithIssues.ContextRecId == logContext.RecId
                        && logTableWithIssues.ValidationId == logContext.ValidationId
                        && logTableWithIssues.BatchJobId == logContext.BatchJobId
                        && (logTableWithIssues.LogType == RetailCommerceValidatorLogType::Warning || logTableWithIssues.LogType == RetailCommerceValidatorLogType::Error);

            // Insert passed categories into DB.
            insert_recordset passedCatalogs (ValidationId, BatchJobId, CatalogRefRecId)
            select ValidationId, BatchJobId, CatalogRefRecId from passedCatalogsTmp
                notexists join existingPassedCatalogs
                    where existingPassedCatalogs.ValidationId == passedCatalogsTmp.ValidationId
                        && existingPassedCatalogs.BatchJobId == passedCatalogsTmp.BatchJobId
                        && existingPassedCatalogs.CatalogRefRecId == passedCatalogsTmp.CatalogRefRecId;
            ttscommit;
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorResetPassedEntity", funcName()), xSession::currentRetryCount(), false, exception);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorResetPassedEntity", funcName()), xSession::currentRetryCount(), true, exception);
                sleep(parameters.PauseInMsBeforeRetry);
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPassedCategoryHierarchies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all passed category hierarchies into <c>RetailCommerceValidatorPassedCategoryHierarchies</c> table.
    /// </summary>
    /// <param name = "_validationId">The validation id.</param>
    private void loadPassedCategoryHierarchies(RetailValidationId _validationId)
    {
        RetailInternalOrganization retailInternalOrganization;
        OMInternalOrganization oMInternalOrganization;
        RetailCommerceValidator commerceValidator = RetailCommerceValidator::find(_validationId);
        RetailCommerceValidatorLogContext logContext;
        RetailCommerceValidatorPassedCategoryHierarchies passedCategoryHierarchies, existingCategoryHierarchies, passedCategoryHierarchiesTmp;
        RefRecId currentBatchJobId = commerceValidator.CurrentBatchJobId;
        RetailCommerceValidatorParameters parameters = retailCommerceValidatorParameters::find();
        System.Exception exception;

        try
        {
            /*
                Source for all category hierarchy rules is <c>RetailInternalOrganization</c> table as on today, So get the hierarchies from it.
                    1.  All category hierarchy rules are error rules.
                    2.  To find out passed hierarchies, fetch all hierarchies which have no logs in LogContext table
                        To consider a hierarchy as passed it should have no logs or it should have logs which are passed,
                        there are no hierarchy rules of log type = Information so all logs would be error logs.
            */

            ttsbegin;
            passedCategoryHierarchiesTmp.setTempDB();

            // hierarchies with no logs, that means they are passed hierarchies.
            insert_recordset passedCategoryHierarchiesTmp (ValidationId, BatchJobId, CategoryHierarchyRecId)
            select _validationId, currentBatchJobId, CategoryHierarchy from retailInternalOrganization
                exists join oMInternalOrganization
                    where oMInternalOrganization.RecId == retailInternalOrganization.InternalOrganization
                        && oMInternalOrganization.RecId == commerceValidator.OMOperatingUnitId
                notexists join logContext
                    where logContext.CategoryHierarchyRefRecId == retailInternalOrganization.CategoryHierarchy
                        && logContext.ValidationId == commerceValidator.ValidationId
                        && logContext.BatchJobId == commerceValidator.CurrentBatchJobId;

            // Insert passed category hierarchies into DB.
            insert_recordset passedCategoryHierarchies (ValidationId, BatchJobId, CategoryHierarchyRecId)
                select ValidationId, BatchJobId, CategoryHierarchyRecId from passedCategoryHierarchiesTmp
                notexists join existingCategoryHierarchies
                    where existingCategoryHierarchies.CategoryHierarchyRecId == passedCategoryHierarchiesTmp.CategoryHierarchyRecId
                        && existingCategoryHierarchies.ValidationId == passedCategoryHierarchiesTmp.ValidationId
                        && existingCategoryHierarchies.BatchJobId == passedCategoryHierarchiesTmp.BatchJobId;
            ttscommit;
        }
        catch (exception)
        {
            if (xSession::currentRetryCount() >= parameters.MaxRetryCount)
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorResetPassedEntity", funcName()), xSession::currentRetryCount(), false, exception);
            }
            else
            {
                RetailCommerceValidatorExceptions::logRetry(_validationId, strFmt("@Retail:RetailCommerceValidatorResetPassedEntity", funcName()), xSession::currentRetryCount(), true, exception);
                sleep(parameters.PauseInMsBeforeRetry);
                retry;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>