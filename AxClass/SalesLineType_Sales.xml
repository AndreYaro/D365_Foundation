<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineType_Sales</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesLineTypeFactoryAttribute(SalesType::Sales, NoYes::No)]
class       SalesLineType_Sales
extends     SalesLineType
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canAgreementBeLinked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the sales line can be linked to an agreement line.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean canAgreementBeLinked()
    {
        return salesLine.LineDeliveryType != LineDeliveryType::DeliveryLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doDeliveryDateControl</Name>
				<Source><![CDATA[
    boolean doDeliveryDateControl()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustConfirmDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the requested dates must be confirmed.
    /// </summary>
    /// <param name="_strategy">
    /// A <c>SalesConfirmDatesStrategy</c> object that contains specific logic to set confirmed dates.
    /// </param>
    /// <returns>
    /// true if the dates must be confirmed; otherwise, false.
    /// </returns>
    public boolean mustConfirmDates(SalesConfirmDatesStrategy   _strategy)
    {
        if (   _strategy
            && salesLine.SalesStatus == SalesStatus::Backorder)
        {
            return _strategy.mustSetConfirmedDates(salesLine);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsMRCCheckRestricted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current <c>salesLine</c> record is for a restricted item.
    /// </summary>
    /// <returns>
    /// true if the current <c>salesLine</c> record is restricted; otherwise, false.
    /// </returns>
    public boolean pdsMRCCheckRestricted()
    {
        boolean                 isRestricted = false;

        AddressCountryRegionId deliveryCountryId = salesLine.deliveryAddress().CountryRegionId ?
            salesLine.deliveryAddress().CountryRegionId : salesTable.deliveryAddress().CountryRegionId;

        AddressStateId deliveryStateId = salesLine.deliveryAddress().State ?
            salesLine.deliveryAddress().State : salesTable.deliveryAddress().State;

        if (salesLine.SalesQty >  0)
        {
            isRestricted = this.pdsIsMRCRestricted(deliveryCountryId, deliveryStateId, salesLine.ItemId);

            if (isRestricted)
            {
                error(strFmt("@PDS908", salesLine.ItemId));
            }
        }

        return isRestricted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsIsMRCRestricted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if the item is restricted in a country/region and state.
    /// </summary>
    /// <param name="_countryId">
    /// ID of the country/region to check.
    /// </param>
    /// <param name="_stateId">
    /// ID of the state to check.
    /// </param>
    /// <param name="_itemId">
    /// ID of the item to check.
    /// </param>
    /// <returns>true if the item is restricted in a country/region and state; otherwise, false.</returns>
    protected boolean pdsIsMRCRestricted(AddressCountryRegionId    _countryId,
        AddressStateId  _stateId,
        ItemId          _itemId)
    {
        boolean isRestricted = PdsMRCRestrictedListByItem::checkItemRestrictedForState(
                                             _countryId,
                                             _stateId,
                                             _itemId);
        if (!isRestricted)
        {
            isRestricted =
                    PdsMRCRestrictedListByItem::checkItemRestrictedForCountry(
                                                _countryId,
                                                _itemId);
        }

        return isRestricted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the <c>salesLine</c> record can be written.
    /// </summary>
    /// <param name="_skipCreditLimitCheck">
    /// A Boolean value that indicates whether to skip the credit limit check; optional.
    /// </param>
    /// <returns>
    /// true if validation was successful; otherwise, false.Standard validation applies in addition to a
    /// functionality to check if the <c>salesLine</c> record is restricted.
    /// </returns>
    public boolean validateWrite(boolean _skipCreditLimitCheck = false)
    {
        boolean ret = super(_skipCreditLimitCheck);

        // validate item restriction functionality for non cash and carry sales only.
        if (ret && #PdsMRCEnabled && !salesLine.salesTable().isRetailCashAndCarrySales())
        {
            ret = !this.pdsMRCCheckRestricted();
            if (ret && salesLine.SalesQty > 0)
            {
                PdsMRCRegulated::checkRegulatedFromBuffer(salesLine);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [SysObsolete('Use SalesLineType::construct() instead.', false, 31\05\2017)]
    static SalesLineType construct(SalesLine salesLine, SalesTable salesTable = salesLine.salesTable())
    {
        if (salesLine.ProjId)
            return new SalesLineType_ProjectSales(salesLine,salesTable);

        return new SalesLineType_Sales(salesLine,salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger dimension for the sales operation
    /// </summary>
    /// <param name="_inventTable">
    /// An InventTable buffer that might serve as a parameter when searching for the ledger dimension
    /// </param>
    /// <returns>
    /// A ledger dimension according to the sales operation
    /// </returns>
    public LedgerDimensionDefaultAccount ledgerDimensionSales(InventTable _inventTable = salesLine.inventTable())
    {
        if (salesLine.LedgerDimension)
        {
            return salesLine.LedgerDimension;
        }

        // <GBR>
        if (BrazilParameters::isEnabled() && CustParameters::isCancelAlternativePostingProfileEnabled())
        {
            if ((salesLine.isCancellingSalesOrder_BR() && salesLine.salesTable().isCancellingFiscalDocApproved_BR()) || salesLine.isStatementCancel_BR())
            {
                return this.ledgerDimensionItem(_inventTable, InventAccountType::SalesCancel);
            }
        }
        // </GBR>

        return this.ledgerDimensionItem(_inventTable, InventAccountType::SalesRevenue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionSales_IT</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount ledgerDimensionSales_IT(InventTable _inventTable = salesLine.inventTable(), boolean _creditNote = false)
    {
        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount;

        if (_creditNote && EXILFeatures_IT::isFeatureEnabled(EXILFeature::Exil2131))
        {
            ledgerDimensionDefaultAccount = this.ledgerDimensionItem(_inventTable, InventAccountType::SalesCreditNote_IT);
        }
        else
        {
            ledgerDimensionDefaultAccount = this.ledgerDimensionSales(_inventTable);
        }
        return ledgerDimensionDefaultAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>