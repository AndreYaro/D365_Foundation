<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomJournalPost_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CustomJournalPost_RU extends RunBase
{
    CustomJournalTable_RU   customJournalTable;
    CustomJournalId_RU      customJournalId;

    LedgerVoucher           ledgerVoucher;
    LedgerVoucherObject     ledgerVoucherObject;
    LedgerBondClient_RU     ledgerBondClient;

    CurrencyCode            customCurrencyCode;
    AmountMST               postedAmount;
    boolean                 storno;
    FactureId_RU            factureId;

    private const int currentVersion = 2;
    private const int retryNum = 5;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistMarkup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void checkExistMarkup(Map               _amountsMap,
                          MarkupTable       _markupTable,
                          CustomPaymType_RU _customPaymType,
                          boolean           _checkAlways = false)
    {
        if (!_markupTable)
        {
            if (_amountsMap)
            {
                if (!_amountsMap.elements() && !_checkAlways)
                {
                    return;
                }
            }
            throw error(strfmt("@GLS115426", enum2str(_customPaymType)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    boolean checkJournal()
    {
        boolean                 ret = true;
        CustomJournalTrans_RU   customJournalTrans;

        select firstonly RecId from customJournalTrans
               where customJournalTrans.CustomJournalId     ==  customJournalTable.CustomJournalId &&
                     customJournalTrans.CalculationMethod   ==  CustomCalculationMethod_RU::None;

        if (customJournalTrans.RecId != 0)
        {
            ret = checkFailed("@GLS115449");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createChargeInventAdjustTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void createChargeInventAdjustTrans(Map          _amountsMap,
                                       MarkupTable  _markupTable,
                                       Common       _sourceTable)
    {
        if (_amountsMap && _amountsMap.exists(_sourceTable.RecId) && _amountsMap.lookup(_sourceTable.RecId))
        {
            this.createInventAdjust(_sourceTable, _amountsMap.lookup(_sourceTable.RecId), _markupTable.MarkupCode);
            postedAmount += CurrencyExchangeHelper::mstAmount(_amountsMap.lookup(_sourceTable.RecId), customCurrencyCode, this.transDate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createChargeLedgerTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void createChargeLedgerTrans(CustomChargeType_RU    _customChargeType,
                                 AmountMST              _amountCharge,
                                 boolean                _reverseCharge = false)
    {
        LedgerDimensionDefaultAccount   ledgerDefaultAccount;
        LedgerDimensionAccount          ledgerDimension;
        LedgerVoucherTransObject        ledgerVoucherTransObject;
        CustomJournalCharge_RU          customJournalCharge;
        CurrencyExchangeHelper          exchangeRateHelper;
        CustomDocument_RU               originatingDocument = _reverseCharge ? CustomDocument_RU::Correction : CustomDocument_RU::GTD;
        Amount                          amountCharge = _amountCharge;

        void addTrans(boolean _isEscortStorage = false)
        {
            if (_isEscortStorage)
            {
                ledgerDefaultAccount = TaxLedgerAccountGroup::accountLedgerDimension(customJournalCharge.TaxCode, this.taxDirection());
                amountCharge = customJournalCharge.Amount;
            }
            else
            {
                ledgerDefaultAccount = TaxLedgerAccountGroup::accountLedgerDimension(TaxTable::findCustomCharge_RU(_customChargeType).TaxCode, this.taxDirection());
            }
            ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDefaultAccount, customJournalTable.DefaultDimension);

            exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                         ledgerVoucherObject.parmAccountingDate());

            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(ledgerVoucherObject,
                                                                                             this.ledgerPostingTypeCharge(),
                                                                                             ledgerDimension,
                                                                                             customCurrencyCode,
                                                                                             amountCharge,
                                                                                             exchangeRateHelper);
            ledgerVoucherTransObject.parmTaxParentReferenceTableId(this.journalTable().TableId);
            ledgerVoucherTransObject.parmTaxParentReferenceRecId(this.journalTable().RecId);
            ledgerVoucherTransObject.parmTransTxt(strfmt("%1, %2", this.txt(), enum2str(_customChargeType)));
            ledgerVoucher.addTrans(ledgerVoucherTransObject);
        }

        if (amountCharge)
        {
            if (_customChargeType == CustomChargeType_RU::Escort)
            {
                while select customJournalCharge
                    where customJournalCharge.CustomJournalId == customJournalTable.CustomJournalId &&
                          customJournalCharge.ChargeType == CustomChargeTypeCalc_RU::Escort &&
                          customJournalCharge.OriginatingDocument == originatingDocument
                {
                    addTrans(true);
                }
            }
            else if (_customChargeType == CustomChargeType_RU::Storage)
            {
                while select customJournalCharge
                    where customJournalCharge.CustomJournalId == customJournalTable.CustomJournalId &&
                          customJournalCharge.ChargeType == CustomChargeTypeCalc_RU::Storage &&
                          customJournalCharge.OriginatingDocument == originatingDocument
                {
                    addTrans(true);
                }
            }
            else
            {
                addTrans();
            }
            postedAmount += amountCharge;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createChargeMarkupTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void createChargeMarkupTrans(Map            _amountsMap,
                                 MarkupTable    _markupTable,
                                 Common         _sourceTable)
    {
        if (_amountsMap && _amountsMap.exists(_sourceTable.RecId) && _amountsMap.lookup(_sourceTable.RecId))
        {
            this.createMarkup(_sourceTable, _markupTable, _amountsMap.lookup(_sourceTable.RecId));
            postedAmount += CurrencyExchangeHelper::mstAmount(_amountsMap.lookup(_sourceTable.RecId), customCurrencyCode, this.transDate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFactureJour</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createFactureJour()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventAdjust</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createInventAdjust(CustomJournalTrans_RU _customJournalTrans,
                                      AmountMST             _adjustNow,
                                      MarkupCode            _markupCode)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createMarkup(Common      _sourceTable,
                                MarkupTable _markupTable,
                                MarkupValue _markupValue)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>customDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    CustomDocument_RU customDocument()
    {
        return CustomDocument_RU::GTD;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog;

        if (! customJournalTable)
        {
            customJournalTable = CustomJournalTable_RU::find(customJournalId);
        }

        dialog = super();

        dialog.caption("@GLS115088");
        dialog.addText(strfmt("@GLS115353", customJournalTable.InventGTDId));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    FactureId_RU factureId()
    {
        return factureId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoOK</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void infoOK()
    {
        info(strfmt("@GLS115264", customJournalTable.CustomJournalId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Common journalTable()
    {
        return customJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingTypeCharge</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    LedgerPostingType ledgerPostingTypeCharge()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingTypeDuty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    LedgerPostingType ledgerPostingTypeDuty()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        customCurrencyCode = CompanyInfoHelper::standardCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefVoucher_RU</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    numberSequenceCode numRefVoucher_RU()
    {
        return InventParameters::numRefCustomVoucher_RU().numberSequenceTable().NumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, customJournalId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustomJournalId_RU parmJournalId(CustomJournalId_RU _customJournalId = customJournalId)
    {
        customJournalId = _customJournalId;
        return customJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    common parmJournalTable(Common _journalTable = customJournalTable)
    {
        customJournalTable = _journalTable;
        return customJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDutyCharge</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected void postDutyCharge()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTax</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected AmountMST postTax(Voucher     _voucher,
                                TransDate   _transDate)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postVend</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void postVend(AmountMST _amountMST)
    {
        VendVoucher vendVoucher;
        VendTrans   vendTrans;
        VendTable   vendTable;

        vendTable   = customJournalTable.customVendTable();

        vendVoucher = VendVoucher::newVendVoucherCustom_RU(_amountMST,
                                                           customJournalTable,
                                                           ledgerVoucher.lastVoucher(),
                                                           '',
                                                           this.transDate(),
                                                           vendTable.InvoiceAccount ? vendTable.InvoiceAccount : vendTable.AccountNum,
                                                           customJournalTable.PostingProfile);

        if (customJournalTable.PaymentDate)
        {
            vendVoucher.parmDueDate(customJournalTable.PaymentDate);
        }

        vendVoucher.post(ledgerVoucher, vendTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareChargeAllocMap</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Map prepareChargeAllocMap(CustomAmount_RU _chargeAmountTotal)
    {
        Map                     chargeAllocateMap = new Map(Types::Int64, Types::Real);
        real                    base = 0;
        CustomAmount_RU         chargeAmountPerLine;
        CustomAmount_RU         maxAmountPerLine        = 0;
        CustomAmount_RU         chargeAmountAllocated   = 0;
        CustomAmount_RU         maxChargeAmount         = 0;
        RefRecId                adjustTransRecId        = 0;

        QueryRun                queryRun;
        Query                   query;
        QueryBuildDataSource    qbds;
        CustomJournalTrans_RU   customJournalTrans;

        if (! _chargeAmountTotal)
            return chargeAllocateMap;

        query = new Query();
        qbds = query.addDataSource(tablenum(CustomJournalTrans_RU));
        qbds.addRange(fieldnum(CustomJournalTrans_RU, CustomJournalId)).value(SysQuery::value(customJournalTable.CustomJournalId));
        qbds.addSelectionField(fieldnum(CustomJournalTrans_RU, Qty), SelectionField::Sum);
        qbds.addSelectionField(fieldnum(CustomJournalTrans_RU, InvoiceCostInclMarkup), SelectionField::Sum);
        qbds.addSelectionField(fieldnum(CustomJournalTrans_RU, ItemNetWeight), SelectionField::Sum);
        qbds.addSelectionField(fieldnum(CustomJournalTrans_RU, ItemGrossWeight), SelectionField::Sum);
        qbds.addSelectionField(fieldnum(CustomJournalTrans_RU, Volume), SelectionField::Sum);
        qbds.orderMode(OrderMode::GroupBy);

        queryRun = new QueryRun(query);
        if (queryRun.next())
        {
            customJournalTrans = queryRun.get(tablenum(CustomJournalTrans_RU));
            switch (customJournalTable.ChargeAllocationBase)
            {
                case CustomChargeAllocationBase_RU::Amount:
                    base = customJournalTrans.InvoiceCostInclMarkup;
                    break;
                case CustomChargeAllocationBase_RU::Qty:
                    base = customJournalTrans.Qty;
                    break;
                case CustomChargeAllocationBase_RU::Weight:
                    base = customJournalTrans.ItemGrossWeight;
                    break;
                case CustomChargeAllocationBase_RU::Volume:
                    base = customJournalTrans.Volume;
                    break;
            }
        }
        /*if (! base)
        {
            if (_chargeAmountTotal)
            {
                throw error(strfmt("@GLS115364", base));
            }
            return chargeAllocateMap;
        }*/

        qbds.orderMode(OrderMode::OrderBy);
        qbds.fields().clearFieldList();
        qbds.fields().dynamic(true);
        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            customJournalTrans  = queryRun.get(tablenum(CustomJournalTrans_RU));
            chargeAmountPerLine = 0;

            if (base)
            {
                switch (customJournalTable.ChargeAllocationBase)
                {
                    case CustomChargeAllocationBase_RU::Amount:
                        chargeAmountPerLine = CurrencyExchangeHelper::amount(_chargeAmountTotal * customJournalTrans.InvoiceCostInclMarkup / base, customCurrencyCode);
                        break;

                    case CustomChargeAllocationBase_RU::Qty:
                        chargeAmountPerLine = CurrencyExchangeHelper::amount(_chargeAmountTotal * customJournalTrans.Qty / base, customCurrencyCode);
                        break;

                    case CustomChargeAllocationBase_RU::Weight:
                        chargeAmountPerLine = CurrencyExchangeHelper::amount(_chargeAmountTotal * customJournalTrans.ItemGrossWeight / base, customCurrencyCode);
                        break;
                    case CustomChargeAllocationBase_RU::Volume:
                        chargeAmountPerLine = CurrencyExchangeHelper::amount(_chargeAmountTotal * customJournalTrans.Volume / base, customCurrencyCode);
                        break;
                }
            }
            else
            {
                chargeAmountPerLine = CurrencyExchangeHelper::amount(_chargeAmountTotal, customCurrencyCode);
            }

            if (chargeAmountPerLine)
            {
                chargeAllocateMap.insert(customJournalTrans.RecId, chargeAmountPerLine);
                chargeAmountAllocated += chargeAmountPerLine;

                if (! maxChargeAmount || (maxChargeAmount < abs(chargeAmountPerLine)))
                {
                    maxChargeAmount  = abs(chargeAmountPerLine);
                    adjustTransRecId = customJournalTrans.RecId;
                }
            }
        }

        if (adjustTransRecId && chargeAllocateMap.exists(adjustTransRecId) && (_chargeAmountTotal - chargeAmountAllocated))
        {
            chargeAmountPerLine = chargeAllocateMap.lookup(adjustTransRecId) + _chargeAmountTotal - chargeAmountAllocated;
            chargeAllocateMap.insert(adjustTransRecId, chargeAmountPerLine);
        }

        return chargeAllocateMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareChargeAllocMapStorage</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Map prepareChargeAllocMapStorage()
    {
        Map                     chargeAllocateMap = new Map(Types::Int64, Types::Real);

        QueryRun                queryRun;
        Query                   query;
        QueryBuildDataSource    qbds;
        CustomJournalTrans_RU   customJournalTrans;

        query = new Query();
        qbds = query.addDataSource(tablenum(CustomJournalTrans_RU));
        qbds.addRange(fieldnum(CustomJournalTrans_RU, CustomJournalId)).value(SysQuery::value(customJournalTable.CustomJournalId));
        qbds.addRange(fieldnum(CustomJournalTrans_RU, CustomAmountStorage)).value(SysQuery::valueNotEmptyString());

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            customJournalTrans = queryRun.get(tablenum(CustomJournalTrans_RU));
            chargeAllocateMap.insert(customJournalTrans.RecId, CurrencyExchangeHelper::amount(customJournalTrans.CustomAmountStorage, customCurrencyCode));
        }

        return chargeAllocateMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        NumberSequenceCode  numberSequenceCode = this.numRefVoucher_RU();
        AmountMST           custVendAmountMST;
        int                 i;

        void dummy()
        {
        }

        try
        {
            if (! this.checkJournal())
                throw error("@GLS101992");

            ttsbegin;

            ledgerVoucher       = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                               SysModule::Invent,
                                                               numberSequenceCode);

            ledgerVoucherObject = LedgerVoucherObject::newVoucher(NumberSeq::newGetVoucherFromCode(numberSequenceCode).voucher(),
                                                                  this.transDate(),
                                                                  SysModule::Invent,
                                                                  LedgerTransType::Invent,
                                                                  storno);

            ledgerBondClient    = ledgerVoucherObject.ledgerBondClient_RU();

            ledgerVoucher.addVoucher(ledgerVoucherObject);

            this.postDutyCharge();
            custVendAmountMST = postedAmount + this.postTax(ledgerVoucher.lastVoucher(), this.transDate());

            this.postVend(- custVendAmountMST);

            if (ledgerBondClient)
            {
                ledgerBondClient.removeCurrentLogObject();
                for (i = 1; i < ledgerBondClient.lastVrefId(); i++)
                {
                    ledgerBondClient.bondVRef2VRef(ledgerBondClient.lastVrefId(), ledgerBondClient.lastVrefId(-i));
                }
            }

            ledgerVoucher.end();

            ttscommit;

            this.createFactureJour();

            this.updateJournal();

            this.infoOK();

            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00117, funcName());
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= retryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch(Exception::Error)
        {
            dummy();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceSalesPurchLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract SalesPurchLine sourceSalesPurchLine(CustomJournalTrans_RU _customJournalTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract tableId sourceTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDirection</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    TaxDirection taxDirection()
    {
        //throw error(Error::missingOverload(funcname()));
        return TaxDirection::IncomingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    TransDate transDate()
    {
        return customJournalTable.PlanArrivalDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    TransTxt txt()
    {
        return  strfmt("@SYS4083209", customJournalTable.InventGTDId, customJournalTable.gtdDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case currentVersion:
                [version, customJournalId] = packedClass;
                customJournalTable = CustomJournalTable_RU::find(customJournalId, true);
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void updateJournal()
    {
        ttsbegin;

        customJournalTable = CustomJournalTable_RU::find(customJournalTable.CustomJournalId, true);
        customJournalTable.LedgerVoucher       = ledgerVoucher.lastVoucher();
        customJournalTable.CustomJournalStatus = CustomJournalStatus_RU::Posted;
        customJournalTable.FactureId           = factureId;
        customJournalTable.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (customJournalTable.CustomJournalStatus != CustomJournalStatus_RU::Released)
        {
            ret = checkFailed(strfmt("@GLS115435", enum2str(CustomJournalStatus_RU::Released)));
        }

        if (!customJournalTable.PostingProfile)
        {
            ret = checkFailed("@GLS115436");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustomJournalPost_RU construct(CustomJournalType_RU   _customJournalType,
                                                 CustomDocument_RU      _customDocument)
    {
        CustomJournalPost_RU customJournalPost;

        switch (_customJournalType)
        {
            case CustomJournalType_RU::Import:
                if (_customDocument == CustomDocument_RU::GTD)
                {
                    customJournalPost = new CustomJournalGTDPostImport_RU();
                }
                else
                {
                    customJournalPost = new CustomJournalCorrectionPostImport_RU();
                }
                break;

            case CustomJournalType_RU::Export:
                if (_customDocument == CustomDocument_RU::GTD)
                {
                    customJournalPost = new CustomJournalGTDPostExport_RU();
                }
                else
                {
                    customJournalPost = new CustomJournalCorrectionPostExport_RU();
                }
                break;
        }

        return customJournalPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static Description description()
    {
        return "@GLS115088";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        CustomJournalPost_RU    customJournalPost;
        CustomJournalTable_RU   customJournalTable;
        FormDataSource          formDataSource;
        CustomDocument_RU       customDocument;

        if (! _args || (_args.dataset() != tablenum(CustomJournalTable_RU) && _args.dataset() != tablenum(CustomCorrectionTable_RU)))
        {
            throw error(strfmt("@SYS25516", CustomJournalPost_RU::description()));
        }

        if (_args.parmEnumType() != enumnum(CustomDocument_RU))
        {
            throw error(strfmt("@SYS22828", CustomJournalPost_RU::description()));
        }
        customDocument = _args.parmEnum();

        if (! _args.record())
        {
            throw error("@SYS82774");
        }
        if (FormDataUtil::isFormDataSource(_args.record()))
        {
            formDataSource = FormDataUtil::getFormDataSource(_args.record());
        }
        switch (_args.dataset())
        {
            case tablenum(CustomJournalTable_RU) :
                customJournalTable = _args.record();
                break;
            case tablenum(CustomCorrectionTable_RU) :
                customJournalTable = CustomJournalTable_RU::find(_args.record().(fieldnum(CustomCorrectionTable_RU, JournalId)));
                break;
        }

        customJournalPost = CustomJournalPost_RU::construct(customJournalTable.CustomJournalType, customDocument);
        customJournalPost.parmJournalId(customJournalTable.CustomJournalId);
        customJournalPost.parmJournalTable(_args.record());
        customJournalPost.saveLast();

        if (customJournalPost.prompt())
        {
            customJournalPost.runOperation();
        }

        if (formDataSource)
        {
            formDataSource.reread();
            formDataSource.refresh();
            formDataSource.active();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>