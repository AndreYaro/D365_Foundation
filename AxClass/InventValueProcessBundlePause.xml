<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventValueProcessBundlePause</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventValueProcessBundlePause extends RunBase
{
    InventValueExecutionHistory inventValueExecutionHistory;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        inventValueExecutionHistory
     #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventValueExecutionHistory</Name>
				<Source><![CDATA[
    public  InventValueExecutionHistory parmInventValueExecutionHistory(InventValueExecutionHistory _inventValueExecutionHistory = inventValueExecutionHistory)
    {
        inventValueExecutionHistory = _inventValueExecutionHistory;
        return inventValueExecutionHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        setPrefix(InventValueProcessBundlePause::description());

        ttsbegin;

        inventValueExecutionHistory = InventValueExecutionHistory::find(inventValueExecutionHistory.TransactionId,true);
        inventValueExecutionHistory.setStopRunning(NoYes::Yes);
        inventValueExecutionHistory.update();

        InventValueBundleList::updateInventValueBundleStatus(inventValueExecutionHistory.TransactionId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public  boolean unpack(container packedClass)
    {
        Integer     version      = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventValueProcessBundlePause construct()
    {
        return new InventValueProcessBundlePause();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:PauseInventValueReportGeneration";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialog.addText("@SCM:PauseInventValueReportGeneration_Text");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        if (! args || args.dataset() != tableNum(InventValueExecutionHistory))
        {
            throw error(strFmt("@SYS29104",classStr(InventValueProcessBundlePause)));
        }

        InventValueProcessBundlePause inventValueProcessBundlePause = InventValueProcessBundlePause::newInventValueExecutionHistory(args.record());

        if (inventValueProcessBundlePause.prompt())
        {
            inventValueProcessBundlePause.runOperation();
        }

        if (args && args.caller() && args.dataset() == tableNum(InventValueExecutionHistory))
        {
            InventValueExecutionHistory inventValueExecutionHistory = args.record();

            if (FormDataUtil::getFormDataSource(inventValueExecutionHistory))
            {
                FormDataUtil::getFormDataSource(inventValueExecutionHistory).research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventValueExecutionHistory</Name>
				<Source><![CDATA[
    public static InventValueProcessBundlePause newInventValueExecutionHistory(InventValueExecutionHistory _inventValueExecutionHistory)
    {
        InventValueProcessBundlePause inventValueProcessBundlePause = InventValueProcessBundlePause::construct();

        inventValueProcessBundlePause.getLast();
        inventValueProcessBundlePause.init();
        inventValueProcessBundlePause.parmInventValueExecutionHistory(_inventValueExecutionHistory);

        return inventValueProcessBundlePause;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>