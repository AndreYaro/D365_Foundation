<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSContainerPackingValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class WHSContainerPackingValidator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWeightPrecise</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean validateWeightPrecise(
        WHSContainerId      _containerId,
        WHSShipmentId       _shipmentId,
        ItemId              _itemId,
        UnitOfMeasureSymbol _unitId,
        InventQty           _qty,
        InventDimId         _inventDimId)
    {
        WHSContainerTable containerTable;

        // Init/re-calc container weight once per transaction, then trust the Weight value, which is updated on container line change
        if (!SysTransactionScopeCache::isSet(classStr(WHSContainerPackingValidator), _containerId))
        {
            containerTable = WHSContainerTable::find(_shipmentId, _containerId, true);
            containerTable.Weight = containerTable.calculateWeight();
            containerTable.update();
            SysTransactionScopeCache::set(classStr(WHSContainerPackingValidator), _containerId, true);
        }
        else
        {
            containerTable = WHSContainerTable::find(_shipmentId, _containerId);
        }

        Weight newWeight = this.calculatePackingWeight(_itemId, _inventDimId, _qty, _unitId) + containerTable.Weight;

        if (!containerTable.checkContainerMaximumNetWeight(newWeight))
        {
            throw error("@WAX5647");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWeight</Name>
				<Source><![CDATA[
    public boolean validateWeight(
        WHSContainerId      _containerId,
        WHSShipmentId       _shipmentId,
        ItemId              _itemId,
        UnitOfMeasureSymbol _unitId,
        InventQty           _qty)
    {
        boolean ret = true;

        WHSContainerTable containerTable = WHSContainerTable::find(_shipmentId, _containerId);
        Weight currentWeight = containerTable.calculateWeight();

        WHSPhysDimUOM physDimUOM = WHSPhysDimUOM::getPhysDimUOMByItem(_itemId, _unitId);

        Weight packWeight;
        if (physDimUOM)
        {
            packWeight = physDimUOM.Weight;
        }
        else
        {
            packWeight = InventTable::find(_itemId).grossWeight();
        }

        Weight newWeight = packWeight * _qty + currentWeight;

        if (!containerTable.checkContainerMaximumNetWeight(newWeight))
        {
            ret = false;
            error ("@WAX5647");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePackingWeight</Name>
				<Source><![CDATA[
    private Weight calculatePackingWeight(ItemId _itemdId, InventDimId _inventDimId, InventQty _qty, UnitOfMeasureSymbol _unitId)
    {
        return EcoResPhysicalProductDimensions::calculatePackingWeight(
            InventItemKey::newFromItem(_itemdId, _inventDimId).productKey(),
            _qty,
            _unitId,
            InventParameters::find().MassUnitSymbol);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>