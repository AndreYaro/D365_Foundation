<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionSalesTransMark_Multi</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailTransactionSalesTransMark_Multi</c> class
/// </summary>
class RetailTransactionSalesTransMark_Multi extends RunBaseBatch implements RetailIOperatingUnitPickerCaller, BatchRetryable
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    Set         selectedOMInternalOrgRecIds;
    RecId       oMHierarchyRecId;
    container   packedOMUnits;
    private Batchable   previousBatchTaskForStore;

    #define.CurrentVersion(7)
    #localmacro.CurrentList
        packedOMUnits,
        oMHierarchyRecId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    //Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    public Object dialog()
    {
        DialogRunbase   dialog = Dialog::newFormnameRunbase(formstr(RetailOperatingUnitPicker), this);

        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        if (selectedOMInternalOrgRecIds)
        {
            packedOMUnits = selectedOMInternalOrgRecIds.pack();
        }

        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOMHierarchyRecId</Name>
				<Source><![CDATA[
    public RecId  parmOMHierarchyRecId(RecId _oMHierarchyRecId = oMHierarchyRecId)
    {
        oMHierarchyRecId = _oMHierarchyRecId;

        return oMHierarchyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedOMInternalOrgRecIds</Name>
				<Source><![CDATA[
    public Set  parmSelectedOMInternalOrgRecIds(Set _selectedOMInternalOrgRecIds = selectedOMInternalOrgRecIds)
    {
        if (!prmIsDefault(_selectedOMInternalOrgRecIds))
        {
            selectedOMInternalOrgRecIds = _selectedOMInternalOrgRecIds;
        }

        return selectedOMInternalOrgRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPickerInitParameters</Name>
				<Source><![CDATA[
    RetailOperatingUnitPickerData getPickerInitParameters()
    {
        RetailOperatingUnitPickerData pickerInitParameter = new RetailOperatingUnitPickerData();
        pickerInitParameter.hierarchyPurpose = HierarchyPurpose::RetailPOSPosting;

        if (this.parmInBatch())
        {
            pickerInitParameter.omInternalOrganizationRecIds = selectedOMInternalOrgRecIds;
            pickerInitParameter.omHierarchyTypeRecId = this.oMHierarchyRecId;
        }

        return pickerInitParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOperatingUnitPickerData</Name>
				<Source><![CDATA[
    void processOperatingUnitPickerData(RetailOperatingUnitPickerData operatingUnitPickerData)
    {
        this.parmSelectedOMInternalOrgRecIds(operatingUnitPickerData.omInternalOrganizationRecIds);
        this.parmOMHierarchyRecId(operatingUnitPickerData.omHierarchyTypeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the Inventory Statement.
    /// </summary>
    /// <param name="_storeId">
    /// Value for the storeId.
    /// </param>
    /// <param name="_batchHeader">
    /// An instance of <c>BatchHeader</c> class.
    /// </param>
    /// <param name="_terminalId">
    /// Value for the TerminalId.
    /// </param>
    /// <param name="_staffId">
    /// Value for the StaffId.
    /// </param>
    void postInventory(RetailStoreId    _storeId,
                       BatchHeader   _batchHeader = null,
                       RetailTerminalId _terminalId  = '',
                       RetailStaffId    _staffId     = '')
    {
        RetailTransactionSalesTransMark    rBOTransactionSalesTransMark;

        rBOTransactionSalesTransMark = RetailTransactionSalesTransMark::construct();
        rBOTransactionSalesTransMark.parmStoreId(_storeId);

        if (_terminalId && _staffId)
        {
            rBOTransactionSalesTransMark.parmTerminalId(_terminalId);
            rBOTransactionSalesTransMark.parmStaffId(_staffId);
            rBOTransactionSalesTransMark.batchInfo().parmCaption(strfmt("@RET5092", _storeId,_terminalId,_staffId));
        }
        else
        {
            rBOTransactionSalesTransMark.batchInfo().parmCaption(strfmt("@RET5024", _storeId));
        }

        if (_batchHeader)
        {
            _batchHeader.addRuntimeTask(rBOTransactionSalesTransMark, this.parmCurrentBatch().RecId);

            if (previousBatchTaskForStore)
            {
                _batchHeader.addDependency(rBOTransactionSalesTransMark, previousBatchTaskForStore, BatchDependencyStatus::FinishedOrError);
            }

            previousBatchTaskForStore = rBOTransactionSalesTransMark;

            // Need make the jobs critical to enable monitoring.
            _batchHeader.parmCritical(NoYes::Yes);
            _batchHeader.parmMonitoringCategory(BatchMonitoringCategory::RetailTransactionSalesTransMark_Multi);
        }
        else
        {
            rBOTransactionSalesTransMark.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildStaffTerminal</Name>
				<Source><![CDATA[
    private Query queryBuildStaffTerminal(RetailStoreId _rBOStoreId)
    {
        Query                   query = new Query();
        QueryBuildDataSource    rBOTransactionTable_qbds;
        QueryBuildDataSource    rBOTransactionSalesTrans_qbds;

        rBOTransactionTable_qbds = query.addDataSource(tablenum(RetailTransactionTable));
        rBOTransactionTable_qbds.addGroupByField(fieldnum(RetailTransactionTable,Terminal));
        rBOTransactionTable_qbds.addGroupByField(fieldnum(RetailTransactionTable,Staff));
        rBOTransactionTable_qbds.addRange(fieldnum(RetailTransactionTable,Store)).value(_rBOStoreId);
        rBOTransactionTable_qbds.addRange(fieldnum(RetailTransactionTable,Type)).value(SysQuery::value(RetailTransactionType::Sales));
        rBOTransactionTable_qbds.addRange(fieldnum(RetailTransactionTable,EntryStatus)).value(SysQuery::value(RetailEntryStatus::None));
        rBOTransactionSalesTrans_qbds = rBOTransactionTable_qbds.addDataSource(tablenum(RetailTransactionSalesTrans));
        rBOTransactionSalesTrans_qbds.joinMode(JoinMode::ExistsJoin);
        rBOTransactionSalesTrans_qbds.relations(true);
        rBOTransactionSalesTrans_qbds.addRange(fieldnum(RetailTransactionSalesTrans,TransactionStatus)).value(SysQuery::value(RetailEntryStatus::None));
        rBOTransactionSalesTrans_qbds.addRange(fieldnum(RetailTransactionSalesTrans,InventStatusSales)).value(SysQuery::value(RetailInventStatusSales::None));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the query run object and posts the Inventory Statement.
    /// </summary>
    public void run()
    {
        RetailStoreTable           storeTable;
        BatchHeader                batchHeader;
        RetailTransactionTable     rBOTransactionTable;
        QueryRun                   queryRunStaffTerminal;
        SetEnumerator              selectedStoreEnumerator;
        SetEnumerator              oMInternalOrgRecIds;
        RetailChannelTable         retailChannelTable;
        Set selectedStoreRecIds = new Set(Types::Int64);
        Set operatingUnitType = new Set(Types::Enum);
        Set                     descendants;
        SetEnumerator           descendantsEnumerator;
        ;

        Microsoft.Dynamics.Retail.Tracing.RetailAXTraceProvider::EventWriteRAXInventoryPostMultiStart(0, '', '');

        if (FeatureStateProvider::isFeatureEnabled(RetailEodTrickleFeedFeature::instance()))
        {
            eventSource.EventWritePostInventorySkippedDueToTrickleFeedEnabled();
            throw warning("@Retail:PostInventoryInfoLogMessageWhenTrickleFeedIsEnabled");
        }

        oMInternalOrgRecIds = selectedOMInternalOrgRecIds.getEnumerator();

        // Used to filter the OMOperating unit type to include only Retail channel.
        operatingUnitType.add(OMOperatingUnitType::RetailChannel);

        while (oMInternalOrgRecIds.moveNext())
        {
            //get all the descendents for selected hierarchy node.
            descendants = OMOperatingUnit::getDescendantsAndSelf(
                                            oMInternalOrgRecIds.current(),
                                            oMHierarchyRecId,
                                            DateTimeUtil::utcNow(),
                                            operatingUnitType
                                            );

            // start traversing on the descendants.
            descendantsEnumerator = descendants.getEnumerator();
            while (descendantsEnumerator.moveNext())
            {
                retailChannelTable = RetailChannelTable::findByOperatingUnitId(descendantsEnumerator.current());

                if (retailChannelTable.RecId &&
                    retailChannelTable.ChannelType == RetailChannelType::RetailStore &&
                    !selectedStoreRecIds.in(retailChannelTable.RecId))
                {
                    selectedStoreRecIds.add(retailChannelTable.RecId);
                }
            }
        }

        // start processing for selected Stores.
        selectedStoreEnumerator = selectedStoreRecIds.getEnumerator();
        while (selectedStoreEnumerator.moveNext())
        {
            storeTable = RetailStoreTable::findRecId(selectedStoreEnumerator.current());

            // We should reset the previousBatchTask per store, since we just need to add dependencies between tasks
            // of the same store due to the lock.
            previousBatchTaskForStore = null;

            if (this.isInBatch())
            {
                if (!batchHeader)
                {
                    batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
                }

                if (storeTable.separateStmtPerStaffTerminal)
                {
                    queryRunStaffTerminal = new QueryRun(this.queryBuildStaffTerminal(storeTable.StoreNumber));

                    while (queryRunStaffTerminal.next())
                    {
                        rBOTransactionTable = queryRunStaffTerminal.get(tablenum(RetailTransactionTable));

                        this.postInventory(storeTable.StoreNumber, batchHeader, rBOTransactionTable.terminal, rboTransactionTable.staff);
                    }
                }
                else
                {
                    this.postInventory(storeTable.StoreNumber, batchHeader);
                }
            }
            else
            {
                this.postInventory(storeTable.StoreNumber);
            }
        }

        if (batchHeader)
        {
            RetailStatementBatchHeaderHelper::save(batchHeader, this.parmCurrentBatch().BatchJobId);
        }

        Microsoft.Dynamics.Retail.Tracing.RetailAXTraceProvider::EventWriteRAXInventoryPostMultiEnd(0, '', '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer     version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = packedClass;
                if (packedOMUnits)
                {
                    selectedOMInternalOrgRecIds = Set::create(packedOMUnits);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailTransactionSalesTransMark_Multi construct()
    {
        return new RetailTransactionSalesTransMark_Multi();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS85785";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailTransactionSalesTransMark_Multi      retailTransactionSalesTransMark_Multi  = RetailTransactionSalesTransMark_Multi::construct();

        if (retailTransactionSalesTransMark_Multi.prompt())
        {
            retailTransactionSalesTransMark_Multi.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable class to be listed in the batch job classes.
    /// </summary>
    /// <returns>True in order to allow this class to be added to a batch job.</returns>
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>