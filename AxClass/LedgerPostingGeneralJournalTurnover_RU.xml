<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerPostingGeneralJournalTurnover_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   Event handler for the <c>LedgerPostingGeneralJournal</c> class for handling turnover tables
/// </summary>
public class LedgerPostingGeneralJournalTurnover_RU
{
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postTransferLinesEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Event handler for the post transferLines method.
    /// </summary>
    /// <param name="_transferLevel">
    ///    Value from the handled method.
    /// </param>
    /// <param name="_lineCollection">
    ///    Value from the handled method.
    /// </param>
    /// <param name="_consolidateHistoryLinkCollection">
    ///    Value from the handled method.
    /// </param>
    /// <param name="_ledgerEntryCollection">
    ///    Value from the handled method.
    /// </param>
    /// <param name="_taxLinkCollection">
    ///    Value from the handled method.
    /// </param>
    /// <param name="_tempHeaderIdToHeaderCollection">
    ///    Value from the handled method.
    /// </param>
    /// <param name="_tempHeaderIdToSubledgerVoucherLinkCollection">
    ///    Value from the handled method.
    /// </param>
    /// <param name="_lineWCollection">
    ///    Value from the handled method.
    /// </param>
    public static void postTransferLinesEventHandler(
        DetailSummary _transferLevel,
        RecordSortedList _lineCollection,
        LedgerPostingOneToManyCollection _consolidateHistoryLinkCollection,
        RecordSortedList _ledgerEntryCollection,
        RecordSortedList _taxLinkCollection,
        Map _tempHeaderIdToHeaderCollection,
        Map _tempHeaderIdToSubledgerVoucherLinkCollection,
        RecordSortedList _lineWCollection)
    {
        MapEnumerator               i;
        GeneralJournalEntry         generalJournalEntry;

        if (SysCountryRegionCode::isAnyLegalEntityInCountryRegion(#isoRU))
        {
            i = _tempHeaderIdToHeaderCollection.getEnumerator();
            while (i.moveNext())
            {
                generalJournalEntry = i.currentValue();
                if (LedgerPostingGeneralJournalTurnover_RU::usePrecalcData(generalJournalEntry))
                {
                    LedgerPostingGeneralJournalTurnover_RU::processGeneralJournalEntry(generalJournalEntry);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGeneralJournalEntry</Name>
				<Source><![CDATA[
        private static void processGeneralJournalEntry(GeneralJournalEntry _entry)
    {
        GeneralJournalAccountEntry          accountEntry;
        RLedgerJournalAccountEntryModule    accountEntryModule;

        while select accountEntry
            where accountEntry.GeneralJournalEntry == _entry.RecId
            notExists join accountEntryModule
                where accountEntryModule.GeneralJournalAccountEntry == accountEntry.RecId
        {
            RLedgerTurnoverType::updatePrecalcData(accountEntry, RLedgerTurnoverSheetType::LedgerDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>usePrecalcData</Name>
				<Source><![CDATA[
        private static boolean usePrecalcData(GeneralJournalEntry _entry)
    {
        SelectableDataArea          dataArea = CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(_entry.Ledger));

        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU], dataArea) &&
               (select crossCompany UsePrecalcData_RU from ledgerParameters
                    where ledgerParameters.dataAreaId == dataArea).UsePrecalcData_RU;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>