<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCloseInstallmentPlans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRCloseInstallmentPlans</c> closes all open installment plans that have been fully paid.
/// </summary>
class MCRCloseInstallmentPlans extends RunBaseBatch implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dialog for close installment orders.
    /// </summary>
    /// <returns>The dialog object.</returns>
    public Object dialog()
    {
        DialogRunbase dialog;

        dialog = new DialogRunbase("@MCR30783", this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run job to close installment plans.
    /// </summary>
    public void run()
    {
        MCRInstallmentPlanSalesTable    mcrInstallmentPlanSalesTable;
        SalesTable                      salesTable;
        CustPaymSchedLine               custPaymSchedLine;
        CustPaymSched                   custPaymSched;
        NoYes                           closed = NoYes::Yes;
        boolean                         oneClosed = false;

        ttsBegin;

        while select forupdate mcrInstallmentPlanSalesTable
            join salesTable
            join custPaymSched
            where mcrInstallmentPlanSalesTable.Closed == NoYes::No
               && salesTable.SalesId == mcrInstallmentPlanSalesTable.SalesId
               && custPaymSched.ExtRecId == salesTable.RecId
               && custPaymSched.ExtTableId == salesTable.TableId
            outer join custPaymSchedLine
                where custPaymSchedLine.ParentRecID == custPaymSched.RecId
        {
            if (!custPaymSchedLine.mcrHasBeenPaid(true))
            {
                closed = NoYes::No;
            }

            if (closed)
            {
                mcrInstallmentPlanSalesTable.Closed = closed;
                if (mcrInstallmentPlanSalesTable.validateWrite())
                {
                    mcrInstallmentPlanSalesTable.update();
                }
                else
                {
                    throw error("@SYS104318");
                }

                oneClosed = true;
            }
            closed = NoYes::Yes;
        }

        ttsCommit;

        if (oneClosed)
        {
            info("@MCR30784");
        }
        else
        {
            info("@MCR30785");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void  main(Args  args)
    {
        MCRCloseInstallmentPlans mcrCloseInstallmentPlans;

        mcrCloseInstallmentPlans = new mcrCloseInstallmentPlans();

        if (mcrCloseInstallmentPlans.prompt())
        {
            mcrCloseInstallmentPlans.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>MCRCloseInstallmentPlans</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>MCRCloseInstallmentPlans</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>