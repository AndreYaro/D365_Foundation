<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvJustificationManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Abstraction class for the justifications functionality. It holds methods to get, set and validate justification for
/// expense report and expense line records.
/// </summary>
class TrvJustificationManager
{
    Common              trvRecord;                          // The record which requires justification.
    FormStringControl   myJustificationControl;             // The control used by the current user to enter submit or approve justification.
    FormStringControl   submitterJustificationControl;      // The control that displays justification entered by submitter.
    FormStringControl   otherJustificationsControl;         // The control that displays other approvers' justifications.
    FormDataSource      justificationDataSource;            // The justification datasource.
    boolean             isMyJustificationEditable;          // True if the 'My justification' control should be editable based on the document state; false otherwise.

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _record,
             FormStringControl _myJustificationControl,
             FormStringControl _submitterJustificationControl,
             FormStringControl _otherJustificationsControl,
             FormDataSource    _justificationDataSource)
    {
        this.parmRecord(_record);
        this.parmMyJustificationControl(_myJustificationControl);
        this.parmSubmitterJustificationControl(_submitterJustificationControl);
        this.parmOtherJustificationsControl(_otherJustificationsControl);
        this.parmJustificationDataSource(_justificationDataSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecord</Name>
				<Source><![CDATA[
    public Common parmRecord(Common _trvRecord = trvRecord)
    {
        trvRecord = _trvRecord;
        return trvRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMyJustificationControl</Name>
				<Source><![CDATA[
    public FormStringControl parmMyJustificationControl(FormStringControl _myJustificationControl = myJustificationControl)
    {
        myJustificationControl = _myJustificationControl;
        return myJustificationControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubmitterJustificationControl</Name>
				<Source><![CDATA[
    public FormStringControl parmSubmitterJustificationControl(FormStringControl _submitterJustificationControl = submitterJustificationControl)
    {
        submitterJustificationControl = _submitterJustificationControl;
        return submitterJustificationControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOtherJustificationsControl</Name>
				<Source><![CDATA[
    public FormStringControl parmOtherJustificationsControl(FormStringControl _otherJustificationsControl = otherJustificationsControl)
    {
        otherJustificationsControl = _otherJustificationsControl;
        return otherJustificationsControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJustificationDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmJustificationDataSource(FormDataSource _justificationDataSource = justificationDataSource)
    {
        justificationDataSource = _justificationDataSource;
        return justificationDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJustifications</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize justification controls and datasource query.
    /// </summary>
    /// <param name = "isCallerInViewMode">Whether the caller object is in read-only mode or not.</param>
    /// <remarks>
    /// If line item approval is enabled, check the user has access to the lines, otherwise, 
    /// access is established at the header.
    /// </remarks>
    public void initJustifications(boolean isCallerInViewMode)
    {
        TrvExpTable                                 trvExpTable;
        TrvExpTrans                                 trvExpTrans;
        TrvRequisitionTable                         trvRequisitionTable;
        TrvRequisitionLine                          trvRequisitionLine;
        boolean                                     isSubmitJustificationRequired;
        boolean                                     isApproveJustificationRequired;
        TrvAppStatus                                trvAppStatus;
        TrvRequisitionApprovalStatus                trvReqAppStatus;
        TrvPolicyViolationJustificationTypeEnum     justificationTypeEnum;
        boolean                                     isOrWasApprovalOwner;

        if (trvRecord.TableId == tablenum(TrvExpTable))
        {
            trvExpTable = trvRecord;
            isSubmitJustificationRequired = trvExpTable.isSubmitJustificationRequired();
            isApproveJustificationRequired = trvExpTable.isApproveJustificationRequired();
            trvAppStatus = trvExpTable.ApprovalStatus;
            justificationTypeEnum = TrvPolicyViolationJustificationTypeEnum::TrvExpHeader;
            isOrWasApprovalOwner = WorkflowWorkItem::isUserApprovalOwner(trvExpTable) || WorkflowWorkItem::wasUserApprovalOwner(trvExpTable);
        }
        else if (trvRecord.TableId == tablenum(TrvExpTrans))
        {
            trvExpTrans = trvRecord;
            trvExpTable = TrvExpTable::findRecId(trvExpTrans.TrvExpTable);
            isSubmitJustificationRequired = trvExpTrans.isSubmitJustificationRequired();
            isApproveJustificationRequired = trvExpTrans.isApproveJustificationRequired();
            trvAppStatus = trvExpTrans.ApprovalStatus;
            justificationTypeEnum = TrvPolicyViolationJustificationTypeEnum::TrvExpLine;
            isOrWasApprovalOwner = WorkflowWorkItem::isUserApprovalOwner(trvExpTable) ||
                                    WorkflowWorkItem::wasUserApprovalOwner(trvExpTable) ||
                                    WorkflowWorkItem::isUserApprovalOwner(trvExpTrans) ||
                                    WorkflowWorkItem::wasUserApprovalOwner(trvExpTrans);
        }
        else if (trvRecord.TableId == tablenum(TrvRequisitionTable))
        {
            trvRequisitionTable = trvRecord;
            isSubmitJustificationRequired = trvRequisitionTable.isSubmitJustificationRequired();
            isApproveJustificationRequired = trvRequisitionTable.isApproveJustificationRequired();
            trvReqAppStatus = trvRequisitionTable.ApprovalStatus;
            justificationTypeEnum = TrvPolicyViolationJustificationTypeEnum::TrvReqHeader;
            isOrWasApprovalOwner = WorkflowWorkItem::isUserApprovalOwner(trvRequisitionTable) || WorkflowWorkItem::wasUserApprovalOwner(trvRequisitionTable);
        }
        else if (trvRecord.TableId == tablenum(TrvRequisitionLine))
        {
            trvRequisitionLine = trvRecord;
            trvRequisitionTable = TrvRequisitionTable::find(trvRequisitionLine.TrvRequisitionTable);
            isSubmitJustificationRequired = trvRequisitionLine.isSubmitJustificationRequired();
            isApproveJustificationRequired = trvRequisitionLine.isApproveJustificationRequired();
            trvReqAppStatus = trvRequisitionTable.ApprovalStatus;
            justificationTypeEnum = TrvPolicyViolationJustificationTypeEnum::TrvReqLine;
            isOrWasApprovalOwner = WorkflowWorkItem::isUserApprovalOwner(trvRequisitionTable) || WorkflowWorkItem::wasUserApprovalOwner(trvRequisitionTable) || 
                                     WorkflowWorkItem::isUserApprovalOwner(trvRequisitionLine) || WorkflowWorkItem::wasUserApprovalOwner(trvRequisitionLine);
        }
        
        isMyJustificationEditable = false;

        // If neither submit justification nor approve justification is needed, we can hide all the justification controls.
        if (!isSubmitJustificationRequired && !isApproveJustificationRequired)
        {
            this.hideAllJustificationControls();
        }
        else
        {
            boolean userHasAccess, isLineItemApproval;

            if (trvRecord.TableId == tablenum(TrvExpTable))
            {
                userHasAccess = TrvAccessHelper::userHasAccessToDocument(trvExpTable);
            }
            else if (trvRecord.TableId == tablenum(TrvExpTrans))
            {
                isLineItemApproval = TrvWorkflowUtilities::isLineItemApprovalForExpenseReport(trvExpTable.RecId);
                if (isLineItemApproval)
                {
                    userHasAccess = TrvAccessHelper::userHasAccessToDocument(trvExpTrans);
                }
                else 
                {
                    userHasAccess = TrvAccessHelper::userHasAccessToDocument(trvExpTable);
                }
            }
            else if (trvRecord.TableId == tablenum(TrvRequisitionTable))
            {
                userHasAccess = TrvAccessHelper::userHasAccessToDocument(trvRequisitionTable);
            }
            else if (trvRecord.TableId == tablenum(TrvRequisitionLine))
            {
                isLineItemApproval = TrvWorkflowUtilities::isLineItemApprovalForTravelReq(trvRequisitionTable.RecId);
                if (isLineItemApproval)
                {
                    userHasAccess = TrvAccessHelper::userHasAccessToDocument(trvRequisitionLine);
                }
                else
                {
                    userHasAccess = TrvAccessHelper::userHasAccessToDocument(trvRequisitionTable);
                }
            }

            boolean wasUserApprovalOwner;
            if (isLineItemApproval)
            {
                wasUserApprovalOwner = (trvRecord.TableId == tablenum(TrvExpTrans) && WorkflowWorkItem::wasUserApprovalOwner(trvExpTrans)) ||
                                    (trvRecord.TableId == tablenum(TrvRequisitionLine) && WorkflowWorkItem::wasUserApprovalOwner(trvRequisitionLine));
            }
            else
            {
                wasUserApprovalOwner = ((trvRecord.TableId == tablenum(TrvExpTable) || trvRecord.TableId == tableNum(TrvExpTrans)) && WorkflowWorkItem::wasUserApprovalOwner(trvExpTable)) ||
                                        ((trvRecord.TableId == tableNum(TrvRequisitionTable) || trvRecord.TableId == tableNum(TrvRequisitionLine)) && WorkflowWorkItem::wasUserApprovalOwner(trvRequisitionTable));
            }

            // If user is none of these: the document owner or a delegate or a current approver or was a previous approver.
            if (!userHasAccess && !wasUserApprovalOwner)
            {
                myJustificationControl.visible(false);
                submitterJustificationControl.visible(isSubmitJustificationRequired);
                otherJustificationsControl.visible(isApproveJustificationRequired);
            }
            else
            {
                QueryBuildRange qbr;

                myJustificationControl.visible(true);

                qbr = SysQuery::findOrCreateRange(justificationDataSource.query().dataSourceName(justificationDataSource.name()), fieldnum(TrvPolicyViolationJustification, ViolatingRecord));
                qbr.value(queryValue(trvRecord.RecId));
                qbr.status(RangeStatus::Hidden);

                qbr = SysQuery::findOrCreateRange(justificationDataSource.query().dataSourceName(justificationDataSource.name()), fieldnum(TrvPolicyViolationJustification, ViolationJustificationType));
                qbr.value(queryValue(justificationTypeEnum));
                qbr.status(RangeStatus::Hidden);

                if (((trvRecord.TableId == tablenum(TrvExpTable) || trvRecord.TableId == tablenum(TrvExpTrans))
                        && (trvAppStatus == TrvAppStatus::Create || trvAppStatus == TrvAppStatus::Returned))
                   || ((trvRecord.TableId == tablenum(TrvRequisitionTable) || trvRecord.TableId == tablenum(TrvRequisitionLine))
                        && (trvReqAppStatus == TrvRequisitionApprovalStatus::Create || trvReqAppStatus == TrvRequisitionApprovalStatus::Returned)))
                {
                    // Submitter is viewing the document. "My Justification" would refer to the submit justification.
                    this.initJustificationForSubmitter(isSubmitJustificationRequired, false, isCallerInViewMode);
                }
                else if (trvAppStatus == TrvAppStatus::Pending || trvAppStatus == TrvAppStatus::Approved ||
                        trvAppStatus == TrvAppStatus::Ledger || trvAppStatus == TrvAppStatus::Ready ||
                        trvReqAppStatus == TrvRequisitionApprovalStatus::Pending || trvReqAppStatus == TrvRequisitionApprovalStatus::Approved)
                {
                    if (isOrWasApprovalOwner)
                    {
                        // Approver is viewing the document. "My Justification" would refer to the approve justification from the approver.
                        this.initJustificationForApprover(isSubmitJustificationRequired, isApproveJustificationRequired, isCallerInViewMode);
                    }
                    else
                    {
                        this.initJustificationForSubmitter(isSubmitJustificationRequired, isApproveJustificationRequired, isCallerInViewMode);
                    }
                }
                else
                {
                    this.hideAllJustificationControls();
                }

                // If "My Justification" is visible, execute the changed query and set the control on the form.
                if (myJustificationControl.visible())
                {
                    justificationDataSource.executeQuery();
                    myJustificationControl.text(justificationDataSource.object(fieldNum(TrvPolicyViolationJustification, Justification)).getValue());

                    // For a new justification, initialize the fields.
                    if (!justificationDataSource.object(fieldNum(TrvPolicyViolationJustification, RecId)).getValue())
                    {
                        this.initNewJustification();
                    }
                }
            }
        }

        myJustificationControl.mandatory(myJustificationControl.visible()); // Make it mandatory whenever it's visible.
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideAllJustificationControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hide all the justification related controls on the form.
    /// </summary>
    private void hideAllJustificationControls()
    {
        myJustificationControl.visible(false);
        submitterJustificationControl.visible(false);
        otherJustificationsControl.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJustificationForSubmitter</Name>
				<Source><![CDATA[
    /// <summary>
    /// If a submitter is viewing the report, initialize controls accordingly.
    /// </summary>
    /// <param name = "isSubmitJustificationRequired">Whether submit justification is required or not.</param>
    /// <param name = "isApproveJustificationRequired">Whether approve justification is required or not.</param>
    /// <param name = "isCallerInViewMode">Whether the caller object is in read-only mode or not.</param>
    private void initJustificationForSubmitter(boolean isSubmitJustificationRequired, boolean isApproveJustificationRequired, boolean isCallerInViewMode)
    {
        TrvExpTable                         trvExpTable;
        TrvExpTrans                         trvExpTrans;
        TrvRequisitionTable                 trvRequisitionTable;
        TrvRequisitionLine                  trvRequisitionLine;
        TrvAppStatus                        trvAppStatus;
        TrvRequisitionApprovalStatus        trvReqAppStatus;
        TrvHcmWorkerRecId                   creatingWorker;
        TrvPreviousApproversJustifications  previousJustifications;

        if (trvRecord.TableId == tablenum(TrvExpTable))
        {
            trvExpTable = trvRecord;
            trvAppStatus = trvExpTable.ApprovalStatus;
            creatingWorker = trvExpTable.CreatingWorker;
            previousJustifications = trvExpTable.approverJustification();
        }
        else if (trvRecord.TableId == tablenum(TrvExpTrans))
        {
            trvExpTrans = trvRecord;
            trvAppStatus = trvExpTrans.ApprovalStatus;
            creatingWorker = trvExpTrans.CreatingWorker;
            previousJustifications = trvExpTrans.approverJustification();
        }
        if (trvRecord.TableId == tablenum(TrvRequisitionTable))
        {
            trvRequisitionTable = trvRecord;
            trvReqAppStatus = trvRequisitionTable.ApprovalStatus;
            creatingWorker = trvRequisitionTable.CreatingWorker;
            previousJustifications = trvRequisitionTable.approverJustification();
        }
        else if (trvRecord.TableId == tablenum(TrvRequisitionLine))
        {
            trvRequisitionLine = trvRecord;
            trvRequisitionTable = TrvRequisitionTable::find(trvRequisitionLine.TrvRequisitionTable);
            trvReqAppStatus = trvRequisitionTable.ApprovalStatus;
            creatingWorker = trvRequisitionTable.CreatingWorker;
            previousJustifications = trvRequisitionLine.approverJustification();
        }

        submitterJustificationControl.visible(false);

        if (isSubmitJustificationRequired)
        {
            QueryBuildRange qbr;

            qbr = SysQuery::findOrCreateRange(justificationDataSource.query().dataSourceName(justificationDataSource.name()), fieldnum(TrvPolicyViolationJustification, JustifyingWorker));
            qbr.value(queryValue(creatingWorker));
            qbr.status(RangeStatus::Hidden);

            qbr = SysQuery::findOrCreateRange(justificationDataSource.query().dataSourceName(justificationDataSource.name()), fieldnum(TrvPolicyViolationJustification, Action));
            qbr.value(queryValue(TrvWorkflowAction::Submit));
            qbr.status(RangeStatus::Hidden);

            // On a document after submission, if the owner or the delegate is viewing,
            // "My Justification" would refer to the submit justification and is ineditable.
            isMyJustificationEditable = (trvAppStatus == TrvAppStatus::Create || trvAppStatus == TrvAppStatus::Returned || 
                trvReqAppStatus == TrvRequisitionApprovalStatus::Create || trvReqAppStatus == TrvRequisitionApprovalStatus::Returned);
            this.refreshMyJustificationControlEditability(isCallerInViewMode);
        }
        else
        {
            myJustificationControl.visible(false);
        }

        otherJustificationsControl.visible(isApproveJustificationRequired && strLTrim(previousJustifications) != "");
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJustificationForApprover</Name>
				<Source><![CDATA[
    /// <summary>
    /// If an approver is viewing the report, initialize controls accordingly.
    /// </summary>
    /// <param name = "isSubmitJustificationRequired">Whether submit justification is required or not.</param>
    /// <param name = "isApproveJustificationRequired">Whether approve justification is required or not.</param>
    /// <param name = "isCallerInViewMode">Whether the caller object is in read-only mode or not.</param>
    private void initJustificationForApprover(boolean isSubmitJustificationRequired, boolean isApproveJustificationRequired, boolean isCallerInViewMode)
    {
        TrvExpTable                         trvExpTable;
        TrvExpTrans                         trvExpTrans;
        TrvRequisitionTable                 trvRequisitionTable;
        TrvRequisitionLine                  trvRequisitionLine;
        TrvAppStatus                        trvAppStatus;
        TrvRequisitionApprovalStatus        trvReqAppStatus;
        TrvPreviousApproversJustifications  previousJustifications;

        if (trvRecord.TableId == tablenum(TrvExpTable))
        {
            trvExpTable = trvRecord;
            trvAppStatus = trvExpTable.ApprovalStatus;
            previousJustifications = trvExpTable.approverJustification();
        }
        else if (trvRecord.TableId == tablenum(TrvExpTrans))
        {
            trvExpTrans = trvRecord;
            trvAppStatus = trvExpTrans.ApprovalStatus;
            previousJustifications = trvExpTrans.approverJustification();
        }
        else if (trvRecord.TableId == tablenum(TrvRequisitionTable))
        {
            trvRequisitionTable = trvRecord;
            trvReqAppStatus = trvRequisitionTable.ApprovalStatus;
            previousJustifications = trvRequisitionTable.approverJustification();
        }
        else if (trvRecord.TableId == tablenum(TrvRequisitionLine))
        {
            trvRequisitionLine = trvRecord;
            trvRequisitionTable = TrvRequisitionTable::find(trvRequisitionLine.TrvRequisitionTable);
            trvReqAppStatus = trvRequisitionTable.ApprovalStatus;
            previousJustifications = trvRequisitionLine.approverJustification();
        }

        submitterJustificationControl.visible(isSubmitJustificationRequired);

        if (isApproveJustificationRequired)
        {
            QueryBuildRange qbr;

            // On a document after approval, if the approver is viewing,
            // "My Justification" would refer to the approve justification and is ineditable.
            isMyJustificationEditable = (trvAppStatus == TrvAppStatus::Pending || trvReqAppStatus == TrvRequisitionApprovalStatus::Pending);
            this.refreshMyJustificationControlEditability(isCallerInViewMode);

            qbr = SysQuery::findOrCreateRange(justificationDataSource.query().dataSourceName(justificationDataSource.name()), fieldnum(TrvPolicyViolationJustification, JustifyingWorker));
            qbr.value(queryValue(HcmWorkerLookup::currentWorker()));
            qbr.status(RangeStatus::Hidden);

            qbr = SysQuery::findOrCreateRange(justificationDataSource.query().dataSourceName(justificationDataSource.name()), fieldnum(TrvPolicyViolationJustification, Action));
            qbr.value(queryValue(TrvWorkflowAction::Approve));
            qbr.status(RangeStatus::Hidden);

            otherJustificationsControl.visible(strLTrim(previousJustifications) != "");
        }
        else
        {
            myJustificationControl.visible(false);
            otherJustificationsControl.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNewJustification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize new justification and set appropriate foreign keys.
    /// </summary>
    public void initNewJustification()
    {
        TrvExpTable                                 trvExpTable;
        TrvExpTrans                                 trvExpTrans;
        TrvRequisitionTable                         trvRequisitionTable;
        TrvRequisitionLine                          trvRequisitionLine;
        TrvHcmWorkerRecId                           creatingWorker;
        TrvAppStatus                                trvAppStatus;
        TrvRequisitionApprovalStatus                trvReqAppStatus;
        TrvPolicyViolationJustificationTypeEnum     justificationTypeEnum;

        if (trvRecord.TableId == tablenum(TrvExpTable))
        {
            trvExpTable = trvRecord;
            creatingWorker = trvExpTable.CreatingWorker;
            trvAppStatus = trvExpTable.ApprovalStatus;
            justificationTypeEnum = TrvPolicyViolationJustificationTypeEnum::TrvExpHeader;
        }
        else if (trvRecord.TableId == tablenum(TrvExpTrans))
        {
            trvExpTrans = trvRecord;
            creatingWorker = trvExpTrans.CreatingWorker;
            trvAppStatus = trvExpTrans.ApprovalStatus;
            justificationTypeEnum = TrvPolicyViolationJustificationTypeEnum::TrvExpLine;
        }
        else if (trvRecord.TableId == tablenum(TrvRequisitionTable))
        {
            trvRequisitionTable = trvRecord;
            creatingWorker = trvRequisitionTable.CreatingWorker;
            trvReqAppStatus = trvRequisitionTable.ApprovalStatus;
            justificationTypeEnum = TrvPolicyViolationJustificationTypeEnum::TrvReqHeader;
        }
        else if (trvRecord.TableId == tablenum(TrvRequisitionLine))
        {
            trvRequisitionLine = trvRecord;
            trvRequisitionTable = TrvRequisitionTable::find(trvRequisitionLine.TrvRequisitionTable);
            creatingWorker = trvRequisitionTable.CreatingWorker;
            trvReqAppStatus = trvRequisitionTable.ApprovalStatus;
            justificationTypeEnum = TrvPolicyViolationJustificationTypeEnum::TrvReqLine;
        }

        justificationDataSource.object(fieldNum(TrvPolicyViolationJustification, ViolatingRecord)).setValue(trvRecord.RecId);
        justificationDataSource.object(fieldNum(TrvPolicyViolationJustification, ViolationJustificationType)).setValue(justificationTypeEnum);

        if (((trvRecord.TableId == tablenum(TrvExpTable) || trvRecord.TableId == tablenum(TrvExpTrans))
                && (trvAppStatus == TrvAppStatus::Create || trvAppStatus == TrvAppStatus::Returned))
            || ((trvRecord.TableId == tablenum(TrvRequisitionTable) || trvRecord.TableId == tablenum(TrvRequisitionLine))
                && (trvReqAppStatus == TrvRequisitionApprovalStatus::Create || trvReqAppStatus == TrvRequisitionApprovalStatus::Returned)))
        {
            // For a submitter.
            justificationDataSource.object(fieldNum(TrvPolicyViolationJustification, JustifyingWorker)).setValue(creatingWorker);
            justificationDataSource.object(fieldNum(TrvPolicyViolationJustification, Action)).setValue(TrvWorkflowAction::Submit);
        }
        else if (trvAppStatus == TrvAppStatus::Pending || trvReqAppStatus == TrvRequisitionApprovalStatus::Pending)
        {
            // For an approver.
            justificationDataSource.object(fieldNum(TrvPolicyViolationJustification, JustifyingWorker)).setValue(HcmWorkerLookup::currentWorker());
            justificationDataSource.object(fieldNum(TrvPolicyViolationJustification, Action)).setValue(TrvWorkflowAction::Approve);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveJustification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert or update justifications on the current form.
    /// </summary>
    public void saveJustification()
    {
        if (myJustificationControl.visible() && myJustificationControl.allowEdit())
        {
            justificationDataSource.object(fieldNum(TrvPolicyViolationJustification, Justification)).setValue(myJustificationControl.valueStr());
            justificationDataSource.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshMyJustificationControlEditability</Name>
				<Source><![CDATA[
    /// <summary>
    /// Change the <c>allowEdit</c> property of the 'My justification' control based on the document's current
    /// state and caller's form view mode.
    /// </summary>
    /// <param name = "isCallerInViewMode">Whether the caller object is in read-only mode or not.</param>
    public void refreshMyJustificationControlEditability(boolean isCallerInViewMode)
    {
        myJustificationControl.allowEdit(isMyJustificationEditable && !isCallerInViewMode);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>