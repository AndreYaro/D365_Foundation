<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendCopyDataUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
public static class CustVendCopyDataUtil
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isCustAccountNumSequenceGlobal</Name>
				<Source><![CDATA[
	/// <summary>
    /// Check if the customer account number sequence set up on AR parameters is a global number sequence for a given data area id.
    /// </summary>
    /// <param name = "_dataAreaId"> The data area id will be used for checking. </param>
    /// <returns> True, if the number sequence for customer account number is global; false, otherwise. </returns>
    public static boolean isCustAccountNumSequenceGlobal(DataAreaId _dataAreaId = curExt())
    {
        boolean isCurCustAccountNumGlobal;

        CustParameters custParam = CustParameters::findByCompany(_dataAreaId);
        NumberSequenceReference accountNum = CustParameters::numRefCustAccount();
        NumberSequenceTable numSeqTable = NumberSequenceTable::find(accountNum.NumberSequenceId);

        return CustVendCopyDataUtil::isNumSequenceGlobal(numSeqTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendAccountNumSequenceGlobal</Name>
				<Source><![CDATA[
	/// <summary>
    /// Check if the vendor account number sequence set up on AP parameters is a global number sequence for a given data area id.
    /// </summary>
    /// <param name = "_dataAreaId"> The data area id will be used for checking. </param>
    /// <returns> True, if the number sequence for customer account number is global; false, otherwise. </returns>
    public static boolean isVendAccountNumSequenceGlobal(DataAreaId _dataAreaId = curExt())
    {
        boolean isCurVendAccountNumGlobal;

        VendParameters vendParam = VendParameters::findByCompany(_dataAreaId);
        NumberSequenceReference accountNum = VendParameters::numRefVendAccount();
        NumberSequenceTable numSeqTable = NumberSequenceTable::find(accountNum.NumberSequenceId);

        return CustVendCopyDataUtil::isNumSequenceGlobal(numSeqTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNumSequenceGlobal</Name>
				<Source><![CDATA[
    private static boolean isNumSequenceGlobal(NumberSequenceTable _numSeqTable)
    {
        boolean isCurVendAccountNumGlobal;

        NumberSequenceTableEntity numSeqTableEntity;

        select firstonly numSeqTableEntity
                    where numSeqTableEntity.NumberSequenceCode == _numSeqTable.numberSequence
                        && numSeqTableEntity.ScopeType == 0
                        && numSeqTableEntity.ScopeValue == '';

        isCurVendAccountNumGlobal = (numSeqTableEntity.RecId != 0);
        
        return isCurVendAccountNumGlobal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCopyFromCompanyForCustomer</Name>
				<Source><![CDATA[
	/// <summary>
    /// Get a list a companies that contains a given party as a customer, and having the customer account number assigned with the same number sequence scope as giving number sequence reference.
    /// </summary>
    /// <param name = "_party"> The customer party record. </param>
    /// <param name = "_dataAreaId"> The copy destination data area id. </param>
    /// <returns></returns>
    public static container getCopyFromCompanyForCustomer(DirPartyTable _party, DataAreaId _dataAreaId = curExt())
    {
        container copyFromCompanies;
        NumberSequenceReference curAccountNumSeqRef = CustParameters::numRefCustAccount();

        Query query = new Query();

        //DirPartyView
        QueryBuildDataSource qbds = query.addDataSource(tablenum(DirPartyView));
        QueryBuildRange queryBuildRangeParty = qbds.addRange(fieldNum(DirPartyView, party));
        queryBuildRangeParty.value(queryValue(_party.RecId));

        QueryBuildRange queryBuildRangeRoleType = qbds.addRange(fieldNum(DirPartyView, RoleType));
        queryBuildRangeRoleType.value(queryValue(DirPartyRoleType::Customer));

        QueryBuildRange queryBuildRangeDataArea = qbds.addRange(fieldNum(DirPartyView, DataArea));
        queryBuildRangeDataArea.value(SysQuery::valueNot(_dataAreaId));

        //NumberSequenceScope
        QueryBuildDataSource numSeqScope = qbds.addDataSource(tableNum(NumberSequenceScope));
        numSeqScope.addLink(fieldNum(DirPartyView, DataArea), fieldNum(NumberSequenceScope, DataArea));
        numSeqScope.joinMode(JoinMode::ExistsJoin);

        //NumberSequenceReference
        QueryBuildDataSource numSeqRef = numSeqScope.addDataSource(tableNum(NumberSequenceReference));
        numSeqRef.addLink(fieldNum(NumberSequenceGroup, RecId), fieldNum(NumberSequenceReference, NumberSequenceScope));
        numSeqRef.joinMode(JoinMode::ExistsJoin);

        QueryBuildRange queryBuildRangeNumSeqID = numSeqRef.addRange(fieldNum(NumberSequenceReference, NumberSequenceId));
        queryBuildRangeNumSeqID.value(queryValue(curAccountNumSeqRef.NumberSequenceId));

        //NumberSequenceDatatype
        QueryBuildDataSource numSeqDataType = numSeqRef.addDataSource(tableNum(NumberSequenceDatatype));
        numSeqDataType.addLink(FieldNum(NumberSequenceReference, NumberSequenceDatatype), fieldNum(NumberSequenceDatatype, RecId));
        numSeqDataType.joinMode(JoinMode::ExistsJoin);

        QueryBuildRange queryBuildRangeNumSeqDataType = numSeqDataType.addRange(fieldNum(NumberSequenceDatatype, DatatypeId));
        queryBuildRangeNumSeqDataType.value(queryValue(extendedTypeNum(CustAccount)));

        QueryRun qr = new QueryRun(query);
        
        while (qr.next())
        {
            DirPartyView partyView = qr.get(tableNum(DirPartyView));
            copyFromCompanies += partyView.DataArea;
        }

        return copyFromCompanies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCopyFromCompanyForVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a list a companies that contains a given party as a vendor, and having the vendor account number assigned with the same number sequence scope as giving number sequence reference.
    /// </summary>
    /// <param name = "_party"> The vendor party record. </param>
    /// <param name = "_dataAreaId"> The copy destination data area id. </param>
    /// <returns></returns>
    public static container getCopyFromCompanyForVendor(DirPartyTable _party, DataAreaId _dataAreaId = curExt())
    {
        container copyFromCompanies;
        NumberSequenceReference curAccountNumSeqRef = VendParameters::numRefVendAccount();

        Query query = new Query();

        //DirPartyView
        QueryBuildDataSource qbds = query.addDataSource(tablenum(DirPartyView));
        QueryBuildRange queryBuildRangeParty = qbds.addRange(fieldNum(DirPartyView, party));
        queryBuildRangeParty.value(queryValue(_party.RecId));

        QueryBuildRange queryBuildRangeRoleType = qbds.addRange(fieldNum(DirPartyView, RoleType));
        queryBuildRangeRoleType.value(queryValue(DirPartyRoleType::Vendor));

        QueryBuildRange queryBuildRangeDataArea = qbds.addRange(fieldNum(DirPartyView, DataArea));
        queryBuildRangeDataArea.value(SysQuery::valueNot(_dataAreaId));

        //NumberSequenceScope
        QueryBuildDataSource numSeqScope = qbds.addDataSource(tableNum(NumberSequenceScope));
        numSeqScope.addLink(fieldNum(DirPartyView, DataArea), fieldNum(NumberSequenceScope, DataArea));
        numSeqScope.joinMode(JoinMode::ExistsJoin);

        //NumberSequenceReference
        QueryBuildDataSource numSeqRef = numSeqScope.addDataSource(tableNum(NumberSequenceReference));
        numSeqRef.addLink(fieldNum(NumberSequenceGroup, RecId), fieldNum(NumberSequenceReference, NumberSequenceScope));
        numSeqRef.joinMode(JoinMode::ExistsJoin);

        QueryBuildRange queryBuildRangeNumSeqID = numSeqRef.addRange(fieldNum(NumberSequenceReference, NumberSequenceId));
        queryBuildRangeNumSeqID.value(queryValue(curAccountNumSeqRef.NumberSequenceId));

        //NumberSequenceDatatype
        QueryBuildDataSource numSeqDataType = numSeqRef.addDataSource(tableNum(NumberSequenceDatatype));
        numSeqDataType.addLink(FieldNum(NumberSequenceReference, NumberSequenceDatatype), fieldNum(NumberSequenceDatatype, RecId));
        numSeqDataType.joinMode(JoinMode::ExistsJoin);

        QueryBuildRange queryBuildRangeNumSeqDataType = numSeqDataType.addRange(fieldNum(NumberSequenceDatatype, DatatypeId));
        queryBuildRangeNumSeqDataType.value(queryValue(extendedTypeNum(VendAccount)));

        QueryRun qr = new QueryRun(query);
        
        while (qr.next())
        {
            DirPartyView partyView = qr.get(tableNum(DirPartyView));
            copyFromCompanies += partyView.DataArea;
        }

        return copyFromCompanies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCustForm</Name>
				<Source><![CDATA[
	/// <summary>
    /// Copy data for <c>CustTable</c> form.
    /// </summary>
    /// <param name = "_sourceCustomer"> The cusomer record to copy from. </param>
    /// <param name = "_custTableForm"> The <c>CustTable</c> form used to create the new customer record. </param>
    /// <param name = "_needClickSave"> True, if Save button needs to be clicked in code; false, otherwise. </param>
    public static void copyCustForm(CustTable _sourceCustomer, FormRun _custTableForm, boolean _needClickSave)
    {
        if (!_sourceCustomer || _custTableForm == null)
        {
            return;
        }

        Set datasourceSet = new Set(Types::Class);
        
        // Copy each data source on cust form from source customer record.
        CustVendCopyDataUtil::copyCustFormDataSources(_sourceCustomer, _custTableForm, datasourceSet);
    
        // Manually click "Save" button on Customer form
        CustVendCopyDataUtil::clickSaveOnCustForm(_needClickSave, _custTableForm);

		// Forcewrite on each data source to force the form stays on the new record if validation failed on some fields.
        CustVendCopyDataUtil::forceWriteCustFormDataSources(datasourceSet);

		// Set isCopied to true on custTable form.
        if (_custTableForm is CustVendICopyDataCopied)
        {
            CustVendICopyDataCopied form = _custTableForm as CustVendICopyDataCopied;

            form.setIsCopied(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clickSaveOnCustForm</Name>
				<Source><![CDATA[
    protected static void clickSaveOnCustForm(boolean _needClickSave, FormRun _custTableForm)
    {
        // Manually click "Save" button on Customer form
        // This is needed when copy from new customer quick create form.
        // Save button should not be clicked through code if copy from tax exampt number search page, otherwise there will be duplicate error messages.
        if (_needClickSave)
        {
            #SysSystemDefinedButtons
            FormCommandButtonControl custSaveButton = _custTableForm.design().controlName(#SystemDefinedSaveButton);
            custSaveButton.clicked();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceWriteCustFormDataSources</Name>
				<Source><![CDATA[
    protected static void forceWriteCustFormDataSources(Set _datasourceSet)
    {
        SetEnumerator dsSetEnumerator = _datasourceSet.getEnumerator();
        FormDataSource dataSource;

        while (dsSetEnumerator.moveNext())
        {
            dataSource = dsSetEnumerator.current() as FormDataSource;

            if (dataSource != null)
            {
                dataSource.forceWrite(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCustFormDataSources</Name>
				<Source><![CDATA[
    protected static void copyCustFormDataSources(CustTable _sourceCustomer, FormRun _custTableForm, Set _datasourceSet)
    {
        CustVendCopyDataUtil::setPartyForCopyCustomer(_sourceCustomer, _custTableForm);
        CustVendCopyDataUtil::copyCustTableForCustomer(_sourceCustomer, _custTableForm, _datasourceSet);
        CustVendCopyDataUtil::copyCustCollectionsContactForCustomer(_sourceCustomer, _custTableForm, _datasourceSet);
        CustVendCopyDataUtil::copyRetailCustTableForCustomer(_sourceCustomer, _custTableForm, _datasourceSet);
        CustVendCopyDataUtil::copyWHSCustTable(_sourceCustomer, _custTableForm, _datasourceSet);
        CustVendCopyDataUtil::copyTaxInformationCustTable_IN(_sourceCustomer, _custTableForm, _datasourceSet);

        // <c>MCRCustTable</c> will not be handled at this moment
        // The foreign key from <c>MCRCustTable</c> to <c>CustTable</c> is MCRCustTable.CustTable, which is the recid of CustTable.
        // At this point the new <c>CustTable</c> record is still in buffer, there is no recid, data didn't link to <c>CustTable</c> corectly, the copied value got lost in form.
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTaxInformationCustTable_IN</Name>
				<Source><![CDATA[
    protected static void copyTaxInformationCustTable_IN(CustTable _sourceCustomer, FormRun _custTableForm, Set _datasourceSet)
    {
        TaxInformationCustTable_IN taxInfoCust, newTaxInfoCust;
        FormDataSource taxInfoCust_ds;

        select firstonly crosscompany * from taxInfoCust
            where taxInfoCust.CustTable == _sourceCustomer.AccountNum 
                && taxInfoCust.DataAreaId == _sourceCustomer.DataAreaId;
                    
        if (taxInfoCust)
        {
            buf2Buf(taxInfoCust, newTaxInfoCust);
            taxInfoCust_ds = _custTableForm.dataSource(formDataSourceStr(CustTable, TaxInformationCustTable_IN)) as FormDataSource;
            taxInfoCust_ds.cursor().data(newTaxInfoCust);

            _datasourceSet.add(taxInfoCust_ds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyWHSCustTable</Name>
				<Source><![CDATA[
    protected static void copyWHSCustTable(CustTable _sourceCustomer, FormRun _custTableForm, Set _datasourceSet)
    {
        WHSCustTable whsCust, newWhsCust;
        FormDataSource whsCust_ds;

        select firstonly crosscompany * from whsCust 
            where whsCust.AccountNum == _sourceCustomer.AccountNum 
                && whsCust.DataAreaId == _sourceCustomer.DataAreaId;
                    
        if (whsCust)
        {
            buf2Buf(whsCust, newWhsCust);
            whsCust_ds = _custTableForm.dataSource(formDataSourceStr(CustTable, WHSCustTable)) as FormDataSource;
            whsCust_ds.cursor().data(newWhsCust);

            _datasourceSet.add(whsCust_ds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRetailCustTableForCustomer</Name>
				<Source><![CDATA[
    protected static void copyRetailCustTableForCustomer(CustTable _sourceCustomer, FormRun _custTableForm, Set _datasourceSet)
    {
        RetailCustTable retailCust, newRetailCust;
        FormDataSource retailCust_ds;
       
        select firstonly crosscompany * from retailCust 
            where retailCust.accountNum == _sourceCustomer.AccountNum 
                && retailCust.DataAreaId == _sourceCustomer.DataAreaId;

        if (retailCust)
        {
            buf2Buf(retailCust, newRetailCust);
            retailCust_ds = _custTableForm.dataSource(formDataSourceStr(CustTable, RetailCustTable)) as FormDataSource;
            retailCust_ds.cursor().data(newRetailCust);

            _datasourceSet.add(retailCust_ds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCustCollectionsContactForCustomer</Name>
				<Source><![CDATA[
    protected static void copyCustCollectionsContactForCustomer(CustTable _sourceCustomer, FormRun _custTableForm, Set _datasourceSet)
    {
        CustCollectionsContact custCollectionsContact, newCustCollectionsContact;
        FormDataSource custColloectionsContact_ds;

        select firstonly crosscompany * from custCollectionsContact 
            where custCollectionsContact.accountNum == _sourceCustomer.AccountNum 
                && custCollectionsContact.DataAreaId == _sourceCustomer.DataAreaId;
                    
        if (custCollectionsContact)
        {
            buf2Buf(custCollectionsContact, newCustCollectionsContact);
            custColloectionsContact_ds = _custTableForm.dataSource(formDataSourceStr(CustTable, custCollectionsContact)) as FormDataSource;
            custColloectionsContact_ds.cursor().data(newCustCollectionsContact);

            _datasourceSet.add(custColloectionsContact_ds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCustTableForCustomer</Name>
				<Source><![CDATA[
    protected static void copyCustTableForCustomer(CustTable _sourceCustomer, FormRun _custTableForm, Set _datasourceSet)
    {
        CustTable newCustomer;
        FormDataSource custTable_ds;

        custTable_ds = _custTableForm.dataSource(formDataSourceStr(CustTable, CustTable)) as FormDataSource;
        buf2Buf(_sourceCustomer, newCustomer);

        if (newCustomer.DefaultDimension)
        {
            newCustomer.DefaultDimension = LedgerDimensionDefaultFacade::getDefaultDimensionForAttributesInLedger(newCustomer.DefaultDimension, Ledger::current());
        }

        // Handle field CustWriteOffRefRecId, which is a fk to CustWriteOffFinancialReasonsSetup table.
        // If the reason code exisit in deistination company, we need to update CustWriteOffRefRecId to point to the reason code in destination company.
		if (_sourceCustomer.CustWriteOffRefRecId)
        {
			CustWriteOffFinancialReasonsSetup sourceWriteOffReason = CustWriteOffFinancialReasonsSetup::findByRecID(_sourceCustomer.CustWriteOffRefRecId);
            CustWriteOffFinancialReasonsSetup destinationWriteOffReason = CustWriteOffFinancialReasonsSetup::findByReasonCode(sourceWriteOffReason.Reason);

            if (destinationWriteOffReason)
            {
                newCustomer.CustWriteOffRefRecId = destinationWriteOffReason.RecId;
            }
		}

        if (newCustomer.BankAccount && !CustBankAccount::findByCompany(newCustomer.DataAreaId, newCustomer.AccountNum, newCustomer.BankAccount))
        {
            newCustomer.BankAccount = '';
        }

        if (newCustomer.ContactPersonId && !ContactPerson::find(newCustomer.ContactPersonId))
        {
            newCustomer.ContactPersonId = '';
        }

        if (newCustomer.CompanyNAFCode != 0)
        {
            CompanyNAFCode companyNAFcode;
            CompanyNAFCode companyNAFcodeInCurrentCompany;
            select firstonly crosscompany CompanyIdNAF from companyNAFcode
                where companyNAFcode.RecId == newCustomer.CompanyNAFCode;

            select firstonly RecId from companyNAFcodeInCurrentCompany
                where companyNAFcodeInCurrentCompany.CompanyIdNAF == companyNAFcode.CompanyIdNAF;

            newCustomer.CompanyNAFCode = companyNAFcodeInCurrentCompany.RecId;
            if (!newCustomer.CompanyNAFCode)
            {
                warning(strFmt("@TaxCoreTax:NAFCodeNotExistsInCurrentCompany", companyNAFcode.CompanyIdNAF));
            }
        }

        custTable_ds.cursor().data(newCustomer);

        custTable_ds.rereadReferenceDataSources();
        
        _datasourceSet.add(custTable_ds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPartyForCopyCustomer</Name>
				<Source><![CDATA[
    protected static void setPartyForCopyCustomer(CustTable _sourceCustomer, FormRun _custTableForm)
    {
        DirPartyTable party;
        select firstonly party where party.RecId == _sourceCustomer.Party;

        // DirPartyTable
        FormDataSource partyTable_ds = _custTableForm.dataSource(formDataSourceStr(CustTable, DirPartyTable)) as FormDataSource;
        partyTable_ds.cursor().data(party);
        partyTable_ds.refresh();

        // DirPerson and DirPersonName
        if (party is DirPerson)
        {
            DirPartyFormHandler_Entity partyForm = _custTableForm.parmPartyForm();
            partyForm.parmPartyType(DirPartyType::Person);
            partyForm.create();

            // DirPerson
            DirPerson person = DirPerson::find(party.RecId);
            if (person)
            {
                FormDataSource person_ds = _custTableForm.dataSource(formDataSourceStr(CustTable, DirPartyTable_DirPerson)) as FormDataSource;

                person_ds.cursor().data(person);
                person_ds.rereadReferenceDataSources();
                person_ds.refresh();
            }

            // DirPersonName
            DirPersonName personName = DirPersonName::find(party.recid);

            if (PersonName)
            {
                FormDataSource personName_ds = _custTableForm.dataSource(formDataSourceStr(CustTable, DirPersonName)) as FormDataSource;
                personName_ds.cursor().data(personName);
                personName_ds.refresh();

                partyForm.setNameFieldsMandatory();
            }
        }
        else
        {
            DirPartyFormHandler_Entity partyForm = _custTableForm.parmPartyForm();
            partyForm.parmPartyType(DirPartyType::Organization);
            partyForm.create();

            DirOrganization org = DirOrganization::find(party.RecId);

            if (org)
            {
                FormDataSource orgBase_ds = _custTableForm.dataSource(formDataSourceStr(CustTable, DirPartyTable_DirOrganization)) as FormDataSource;

                orgBase_ds.cursor().data(org);
                orgBase_ds.rereadReferenceDataSources();
                orgBase_ds.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyVendForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy data for <c>VendTable</c> form.
    /// </summary>
    /// <param name = "_sourceCustomer"> The vendor record to copy from. </param>
    /// <param name = "_custTableForm"> The <c>CustTable</c> form used to creaie the new vendor record. </param>
    /// <param name = "_needCreate"> True if the <C>vendTable</C> form is not in the create new record mode; false, otherwise. </param>
    public static void copyVendForm(VendTable _sourceVendor, FormRun _vendTableForm, boolean _needCreate)
    {
        if (!_sourceVendor || _vendTableForm == null)
        {
            return;
        }

        Set datasourceSet = new Set(Types::Class);
        
        // Copy each data source on vendor form from source vendor record.
        CustVendCopyDataUtil::copyVendFormDataSources(_sourceVendor, _vendTableForm, datasourceSet, _needCreate);
    
        // Manually click "Save" button on vendor form
        CustVendCopyDataUtil::clickSaveOnVendForm(_needCreate, _vendTableForm);

        // Forcewrite on each data source to force the form stays on the new record if validation failed on some fields.
        CustVendCopyDataUtil::forceWriteVendFormDataSources(datasourceSet);

        // Set isCopied to true on vendTable form.
        if (_vendTableForm is CustVendICopyDataCopied)
        {
            CustVendICopyDataCopied form = _vendTableForm as CustVendICopyDataCopied;

            form.setIsCopied(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceWriteVendFormDataSources</Name>
				<Source><![CDATA[
    protected static void forceWriteVendFormDataSources(Set _datasourceSet)
    {
        SetEnumerator dsSetEnumerator = _datasourceSet.getEnumerator();
        FormDataSource dataSource;

        while (dsSetEnumerator.moveNext())
        {
            dataSource = dsSetEnumerator.current() as FormDataSource;

            if (dataSource != null)
            {
                dataSource.forceWrite(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clickSaveOnVendForm</Name>
				<Source><![CDATA[
    protected static void clickSaveOnVendForm(boolean _needCreate, FormRun _vendTableForm)
    {
        // Do not click save button if copy from tax exampt number search page, doing so will cause duplicate error message.
        // But copy from NEW vendor route still need to click save button to trigger validation.
        if (!_needCreate)
        {
            #SysSystemDefinedButtons

            FormCommandButtonControl vendSaveButton = _vendTableForm.design().controlName(#SystemDefinedSaveButton);
            vendSaveButton.clicked();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyVendFormDataSources</Name>
				<Source><![CDATA[
    protected static void copyVendFormDataSources(VendTable _sourceVendor, FormRun _vendTableForm, Set _datasourceSet, boolean _needCreate)
    {
        CustVendCopyDataUtil::setUpPartyForCopyVendor(_sourceVendor, _vendTableForm, _needCreate);
        CustVendCopyDataUtil::copyVendTableForVendor(_sourceVendor, _vendTableForm, _datasourceSet);
        CustVendCopyDataUtil::copyVend1099OIDDetailForVendor(_sourceVendor, _vendTableForm, _datasourceSet);
        CustVendCopyDataUtil::copyVendInfoZakat_SAForVendor(_sourceVendor, _vendTableForm, _datasourceSet);
        CustVendCopyDataUtil::copyRetailVendTableForVendor(_sourceVendor, _vendTableForm, _datasourceSet);
        CustVendCopyDataUtil::copyTaxInformationVendTable_INForVendor(_sourceVendor, _vendTableForm, _datasourceSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTaxInformationVendTable_INForVendor</Name>
				<Source><![CDATA[
    protected static void copyTaxInformationVendTable_INForVendor(VendTable _sourceVendor, FormRun _vendTableForm, Set _datasourceSet)
    {
        TaxInformationVendTable_IN taxInformationVendTable_IN, newTaxInformationVendTable_IN;
        FormDataSource taxInformationVendTable_IN_ds;

        select firstonly crosscompany * from taxInformationVendTable_IN 
            where taxInformationVendTable_IN.VendTable == _sourceVendor.AccountNum 
                && taxInformationVendTable_IN.DataAreaId == _sourceVendor.DataAreaId;

        if (taxInformationVendTable_IN)
        {
            buf2Buf(taxInformationVendTable_IN, newTaxInformationVendTable_IN);
            taxInformationVendTable_IN_ds = _vendTableForm.dataSource(formDataSourceStr(VendTable, TaxInformationVendTable_IN)) as FormDataSource;
            taxInformationVendTable_IN_ds.cursor().data(newTaxInformationVendTable_IN);

            _datasourceSet.add(taxInformationVendTable_IN_ds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRetailVendTableForVendor</Name>
				<Source><![CDATA[
    protected static void copyRetailVendTableForVendor(VendTable _sourceVendor, FormRun _vendTableForm, Set _datasourceSet)
    {
        RetailVendTable retailVendTable, newRetailVendTable;
        FormDataSource retailVendTable_ds;

        select firstonly crosscompany * from retailVendTable 
            where retailVendTable.AccountNum == _sourceVendor.AccountNum 
                && retailVendTable.DataAreaId == _sourceVendor.DataAreaId;

        if (retailVendTable)
        {
            buf2Buf(retailVendTable, newRetailVendTable);
            retailVendTable_ds = _vendTableForm.dataSource(formDataSourceStr(VendTable, RetailVendTable)) as FormDataSource;
            retailVendTable_ds.cursor().data(newRetailVendTable);

            _datasourceSet.add(retailVendTable_ds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyVendInfoZakat_SAForVendor</Name>
				<Source><![CDATA[
    protected static void copyVendInfoZakat_SAForVendor(VendTable _sourceVendor, FormRun _vendTableForm, Set _datasourceSet)
    {
        VendInfoZakat_SA vendInfoZakat_SA, newVendInfoZakat_SA;
        FormDataSource vendInfoZakat_SA_ds;

        select firstonly crosscompany * from vendInfoZakat_SA 
            where vendInfoZakat_SA.VendAccount == _sourceVendor.AccountNum 
                && vendInfoZakat_SA.DataAreaId == _sourceVendor.DataAreaId;

        if (vendInfoZakat_SA)
        {
            buf2Buf(vendInfoZakat_SA, newVendInfoZakat_SA);
            vendInfoZakat_SA_ds = _vendTableForm.dataSource(formDataSourceStr(VendTable, VendInfoZakat_SA)) as FormDataSource;
            vendInfoZakat_SA_ds.cursor().data(newVendInfoZakat_SA);

            _datasourceSet.add(vendInfoZakat_SA_ds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyVend1099OIDDetailForVendor</Name>
				<Source><![CDATA[
    protected static void copyVend1099OIDDetailForVendor(VendTable _sourceVendor, FormRun _vendTableForm, Set _datasourceSet)
    {
        Vend1099OIDDetail vend1099OIDDetail, newVend1099OIDDetail;
        FormDataSource vend1099OIDDetail_ds;

        select firstonly crosscompany * from vend1099OIDDetail 
            where vend1099OIDDetail.VendTable == _sourceVendor.AccountNum 
                && vend1099OIDDetail.DataAreaId == _sourceVendor.DataAreaId;

        if (vend1099OIDDetail)
        {
            buf2Buf(vend1099OIDDetail, newVend1099OIDDetail);
            vend1099OIDDetail_ds = _vendTableForm.dataSource(formDataSourceStr(VendTable, Vend1099OIDDetail)) as FormDataSource;
            vend1099OIDDetail_ds.cursor().data(newVend1099OIDDetail);

            _datasourceSet.add(vend1099OIDDetail_ds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyVendTableForVendor</Name>
				<Source><![CDATA[
    protected static void copyVendTableForVendor(VendTable _sourceVendor, FormRun _vendTableForm, Set datasourceSet)
    {
        VendTable newVendor;
        FormDataSource vendTable_ds = _vendTableForm.dataSource(formDataSourceStr(VendTable, VendTable)) as FormDataSource;

        buf2Buf(_sourceVendor, newVendor);

        if (newVendor.DefaultDimension)
        {
            newVendor.DefaultDimension = LedgerDimensionDefaultFacade::getDefaultDimensionForAttributesInLedger(newVendor.DefaultDimension, Ledger::current());
        }

        if (newVendor.BankAccount && !VendBankAccount::findByCompany(newVendor.DataAreaId, newVendor.AccountNum, newVendor.BankAccount))
        {
            newVendor.BankAccount = '';
        }

        if (newVendor.ContactPersonId && !ContactPerson::find(newVendor.ContactPersonId))
        {
            newVendor.ContactPersonId = '';
        }
        
        if (VendCopyDataVendorGroupValidationFlight::instance().isEnabled()
            && !newVendor.validateField(fieldNum(VendTable, VendGroup)))
        {
            newVendor.VendGroup = '';
        }

        if (VendCopyDataWorkflowStateResetFlight::instance().isEnabled() && newVendor.WorkflowState)
        {
            newVendor.WorkflowState = VendTableChangeProposalWorkflowState::NotSubmitted;
        }

        vendTable_ds.cursor().data(newVendor);

        datasourceSet.add(vendTable_ds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpPartyForCopyVendor</Name>
				<Source><![CDATA[
    protected static void setUpPartyForCopyVendor(VendTable _sourceVendor, FormRun _vendTableForm, boolean _needCreate)
    {
        // Party
        DirPartyTable party;
        select firstonly party where party.RecId == _sourceVendor.Party;

        // DirPartyTable
        FormDataSource partyTable_ds = _vendTableForm.dataSource(formDataSourceStr(VendTable, DirPartyTable)) as FormDataSource;
        partyTable_ds.cursor().data(party);
        partyTable_ds.refresh();

        // DirPerson and DirPersonName
        if (party is DirPerson)
        {
            DirPartyFormHandler_Entity partyForm = _vendTableForm.parmPartyForm();
            partyForm.parmPartyType(DirPartyType::Person);

            // _needCreate is true if this method is called from tax exempt number search form,
            // it is false if this is called from new vondor, since the vend form is already in creating new record mode.
            if (_needCreate)
            {
                partyForm.create();
            }

            // DirPerson
            DirPerson person = DirPerson::find(party.RecId);
            if (person)
            {
                FormDataSource person_ds = _vendTableForm.dataSource(formDataSourceStr(VendTable, DirPartyTable_DirPerson)) as FormDataSource;

                person_ds.cursor().data(person);
                person_ds.rereadReferenceDataSources();
                person_ds.refresh();
            }

            // DirPersonName
            DirPersonName personName = DirPersonName::find(party.recid);

            if (PersonName)
            {
                FormDataSource personName_ds = _vendTableForm.dataSource(formDataSourceStr(VendTable, DirPersonName)) as FormDataSource;
                personName_ds.cursor().data(personName);
                personName_ds.refresh();

                partyForm.setNameFieldsMandatory();
            }
        }
        else
        {
            DirPartyFormHandler_Entity partyForm = _vendTableForm.parmPartyForm();
            partyForm.parmPartyType(DirPartyType::Organization);
            if (_needCreate)
            {
                partyForm.create();
            }

            DirOrganization org = DirOrganization::find(party.RecId);

            if (org)
            {
                FormDataSource orgBase_ds = _vendTableForm.dataSource(formDataSourceStr(CustTable, DirPartyTable_DirOrganization)) as FormDataSource;

                orgBase_ds.cursor().data(org);
                orgBase_ds.rereadReferenceDataSources();
                orgBase_ds.refresh();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>