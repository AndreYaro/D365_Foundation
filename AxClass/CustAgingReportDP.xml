<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAgingReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustAgingReportDP</c> class declares the variables, tables, enumeration types, and so on
/// that are used in the <c>CustAgingReport</c> report.
/// </summary>
/// <remarks>
/// In Microsoft Dynamics AX 2012 R2 this class was changed to derive from the
/// <c>SRSReportDataProviderPreProcessTempDB</c> class instead of the <c>SRSReportDataProviderPreProcess</c>
/// class to improve performance. See <see cref="http://go.microsoft.com/fwlink/?LinkId=335910" />
/// for more information.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(CustAgingReport)),
    SRSReportParameterAttribute(classStr(CustAgingReportContract))
]
public class CustAgingReportDP extends SRSReportDataProviderPreProcessTempDB
{
    CustAgingReportTmp custAgingReportTmp;
    CustTmpAccountSum tmpAccountSum;

    CustVendBalanceList custVendBalanceList;
    CustAgingReportContract contract;

    ColumnTxt headingDate;
    TransDate heading011;
    TransDate heading02;
    TransDate heading021;
    TransDate heading03;
    TransDate heading031;
    TransDate heading04;
    TransDate heading041;
    TransDate heading05;
    TransDate heading051;
    TransDate heading06;
    TransDate heading061;
    TransDate heading07;
    TransDate heading071;

    TransTxt heading01;
    TransTxt heading02Text;
    TransTxt heading07Text;
    TransTxt headingAgingBucketDescription02;
    TransTxt headingAgingBucketDescription03;
    TransTxt headingAgingBucketDescription04;
    TransTxt headingAgingBucketDescription05;
    TransTxt headingAgingBucketDescription06;
    TransTxt headingAgingBucketDescription07;

    #define.emptyString(' ')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustAgingReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the temporary table.
    /// </summary>
    /// <returns>
    ///    The temporary <c>CustAgingReportTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute('CustAgingReportTmp')
    ]
    public CustAgingReportTmp getCustAgingReportTmp()
    {
        select custAgingReportTmp;
        return custAgingReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReverseAmountsAndHeadings</Name>
				<Source><![CDATA[
    private boolean getReverseAmountsAndHeadings(CustVendAgingBucketLookUp _agingBucket, ForwardBackwardPrinting _direction)
    {
        boolean reverseAmountsAndHeadings = false;

        if (_agingBucket == '' && _direction == ForwardBackwardPrinting::Forward)
        {
            reverseAmountsAndHeadings = true;
        }

        return reverseAmountsAndHeadings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading01</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the heading.
    /// </summary>
    /// <returns>
    ///    The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransTxt heading01()
    {
        return "@SYS137399";
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading011</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the heading.
    /// </summary>
    /// <returns>
    ///    The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransDate heading011()
    {
        return contract.parmBalanceAsOfDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading02</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading.
    /// </summary>
    /// <returns>
    /// The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransDate heading02()
    {
        if (contract.parmAgingBuckets())
        {
            return custVendBalanceList.startdate(2);
        }
        else
        {
            return dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading021</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the heading.
    /// </summary>
    /// <returns>
    ///    The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransDate heading021()
    {
        if (contract.parmAgingBuckets())
        {
            return custVendBalanceList.enddate(2);
        }
        else
        {
            return custVendBalanceList.enddate(3);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading02Text</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading.
    /// </summary>
    /// <returns>
    /// The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransTxt heading02Text()
    {
        if (contract.parmAgingBuckets())
        {
            return #emptyString;
        }
        else
        {
            return contract.parmDateTransactionDuedate() ? strFmt("@SYS60131", #emptyString) : "@SYS62491";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading03</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the heading.
    /// </summary>
    /// <returns>
    ///    The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransDate heading03()
    {
        return custVendBalanceList.startdate(3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading031</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the heading.
    /// </summary>
    /// <returns>
    ///    The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransDate heading031()
    {
        return custVendBalanceList.enddate(3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading04</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the heading.
    /// </summary>
    /// <returns>
    ///    The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransDate heading04()
    {
        return custVendBalanceList.startdate(4);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading041</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the heading.
    /// </summary>
    /// <returns>
    ///    The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransDate heading041()
    {
        return custVendBalanceList.enddate(4);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading05</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the heading.
    /// </summary>
    /// <returns>
    ///    The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransDate heading05()
    {
        return custVendBalanceList.startdate(5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading051</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the heading.
    /// </summary>
    /// <returns>
    ///    The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransDate heading051()
    {
        return custVendBalanceList.enddate(5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading06</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the heading.
    /// </summary>
    /// <returns>
    ///    The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransDate heading06()
    {
        return custVendBalanceList.startdate(6);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading061</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the heading.
    /// </summary>
    /// <returns>
    ///    The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransDate heading061()
    {
        return custVendBalanceList.enddate(6);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading07</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading.
    /// </summary>
    /// <returns>
    /// The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransDate heading07()
    {
        if (contract.parmAgingBuckets())
        {
            return custVendBalanceList.startdate(7);
        }
        else
        {
            return dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading071</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the heading.
    /// </summary>
    /// <returns>
    ///    The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransDate heading071()
    {
        if (contract.parmAgingBuckets())
        {
            return custVendBalanceList.enddate(7);
        }
        else
        {
            return custVendBalanceList.startdate(6);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading07Text</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading.
    /// </summary>
    /// <returns>
    /// The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransTxt heading07Text()
    {
        if (contract.parmAgingBuckets())
        {
            return #emptyString;
        }
        else
        {
            return contract.parmDateTransactionDuedate() ? "@SYS29113" : "@SYS62492";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingAgingBucketDescription02</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the heading description.
    /// </summary>
    /// <returns>
    ///    The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransTxt headingAgingBucketDescription02()
    {
        if (contract.parmAgingBuckets() && contract.parmPrintAgingBucketDescription())
        {
            return strFmt('%1', custVendBalanceList.getDescription(2));
        }
        else
        {
            return #emptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingAgingBucketDescription03</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the heading description.
    /// </summary>
    /// <returns>
    ///    The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransTxt headingAgingBucketDescription03()
    {
        if (contract.parmAgingBuckets() && contract.parmPrintAgingBucketDescription())
        {
            return strFmt('%1', custVendBalanceList.getDescription(3));
        }
        else
        {
            return #emptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingAgingBucketDescription04</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the heading description.
    /// </summary>
    /// <returns>
    ///    The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransTxt headingAgingBucketDescription04()
    {
        if (contract.parmAgingBuckets() && contract.parmPrintAgingBucketDescription())
        {
            return strFmt('%1', custVendBalanceList.getDescription(4));
        }
        else
        {
            return #emptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingAgingBucketDescription05</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the heading description.
    /// </summary>
    /// <returns>
    ///    The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransTxt headingAgingBucketDescription05()
    {
        if (contract.parmAgingBuckets() && contract.parmPrintAgingBucketDescription())
        {
            return strFmt('%1', custVendBalanceList.getDescription(5));
        }
        else
        {
            return #emptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingAgingBucketDescription06</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the heading description.
    /// </summary>
    /// <returns>
    ///    The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransTxt headingAgingBucketDescription06()
    {
        if (contract.parmAgingBuckets() && contract.parmPrintAgingBucketDescription())
        {
            return strFmt('%1', custVendBalanceList.getDescription(6));
        }
        else
        {
            return #emptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingAgingBucketDescription07</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the heading description.
    /// </summary>
    /// <returns>
    ///    The heading text.
    /// </returns>
    [Wrappable(true)]
    protected final TransTxt headingAgingBucketDescription07()
    {
        if (contract.parmAgingBuckets() && contract.parmPrintAgingBucketDescription())
        {
            return strFmt('%1', custVendBalanceList.getDescription(7));
        }
        else
        {
            return #emptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the heading date.
    /// </summary>
    /// <returns>
    ///     The heading date text.
    /// </returns>
    [Wrappable(true)]
    protected final ColumnTxt headingDate()
    {
        switch (contract.parmDateTransactionDuedate())
        {
            case DateTransactionDuedate::DocumentDate : return "@SYS2587";
            case DateTransactionDuedate::TransactionDate : return "@SYS67";
            case DateTransactionDuedate::DueDate : return "@SYS14588";
            default : return "@SYS14588";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeadingValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assign and cache the heading values used for each record of the report
    /// </summary>
    private void initHeadingValues()
    {
        headingDate = this.headingDate();
        heading01 = this.heading01();
        heading011 = this.heading011();
        heading02 = this.heading02();
        heading02Text = this.heading02Text();
        heading021 = this.heading021();
        heading03 = this.heading03();
        heading031 = this.heading031();
        heading04 = this.heading04();
        heading041 = this.heading041();
        heading05 = this.heading05();
        heading051 = this.heading051();
        heading06 = this.heading06();
        heading061 = this.heading061();
        heading07 = this.heading07();
        heading07Text = this.heading07Text();
        heading071 = this.heading071();
        headingAgingBucketDescription02 = this.headingAgingBucketDescription02();
        headingAgingBucketDescription03 = this.headingAgingBucketDescription03();
        headingAgingBucketDescription04 = this.headingAgingBucketDescription04();
        headingAgingBucketDescription05 = this.headingAgingBucketDescription05();
        headingAgingBucketDescription06 = this.headingAgingBucketDescription06();
        headingAgingBucketDescription07 = this.headingAgingBucketDescription07();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCustAgingReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into the temporary <c>CustAgingReportTmp</c> table.
    /// </summary>
    /// <param name="_reverseAmountsAndHeadings">
    /// A Boolean value that indicates whether the column values should be reversed.
    /// </param>
    /// <returns>
    /// The custAgingReportTmp transaction that needs to be inserted.
    /// </returns>
    protected CustAgingReportTmp insertCustAgingReportTmp(boolean _reverseAmountsAndHeadings)
    {
        CustVendTransAging custVendTransAging = custVendBalanceList.getCustVendTransAging();

        CustAgingReportDPParameters custAgingReportDPParameters = CustAgingReportDPParameters::construct();

        custAgingReportDPParameters.custAgingReportTmp = custAgingReportTmp;
        custAgingReportDPParameters.custTmpAccountSum = tmpAccountSum;
        custAgingReportDPParameters.custVendTransAging = custVendTransAging;

        custAgingReportDPParameters.reverseAmountsAndHeadings = _reverseAmountsAndHeadings;
        custAgingReportDPParameters.ledgerCurrencySelection = contract.parmCurrencySelection();
        custAgingReportDPParameters.headingDate = headingDate;
        custAgingReportDPParameters.heading01 = heading01;
        custAgingReportDPParameters.heading011 = heading011;
        custAgingReportDPParameters.heading02 = heading02;
        custAgingReportDPParameters.heading02Text = heading02Text;
        custAgingReportDPParameters.heading021 = heading021;
        custAgingReportDPParameters.heading03 = heading03;
        custAgingReportDPParameters.heading031 = heading031;
        custAgingReportDPParameters.heading04 = heading04;
        custAgingReportDPParameters.heading041 = heading041;
        custAgingReportDPParameters.heading05 = heading05;
        custAgingReportDPParameters.heading051 = heading051;
        custAgingReportDPParameters.heading06 = heading06;
        custAgingReportDPParameters.heading061 = heading061;
        custAgingReportDPParameters.heading07 = heading07;
        custAgingReportDPParameters.heading07Text = heading07Text;
        custAgingReportDPParameters.heading071 = heading071;
        custAgingReportDPParameters.headingAgingBucketDescription02 = headingAgingBucketDescription02;
        custAgingReportDPParameters.headingAgingBucketDescription03 = headingAgingBucketDescription03;
        custAgingReportDPParameters.headingAgingBucketDescription04 = headingAgingBucketDescription04;
        custAgingReportDPParameters.headingAgingBucketDescription05 = headingAgingBucketDescription05;
        custAgingReportDPParameters.headingAgingBucketDescription06 = headingAgingBucketDescription06;
        custAgingReportDPParameters.headingAgingBucketDescription07 = headingAgingBucketDescription07;
        custAgingReportDPParameters.headingAccount = "@SYS24500";
        custAgingReportDPParameters.headingName = "@SYS7399";
        custAgingReportDPParameters.balance = 100;
        custAgingReportDPParameters.asOfDate = strFmt("@SYS84682", date2StrUsr(contract.parmBalanceAsOfDate(), DateFlags::FormatAll), contract.parmDateTransactionDuedate());

        CustAgingReportTmpFromCustTmpAccountSum custAgingReportTmpFromCustTmpAccountSum = CustAgingReportTmpFromCustTmpAccountSum::newFromCustAgingReportDP(custAgingReportDPParameters);
        custAgingReportTmpFromCustTmpAccountSum.execute();

        return custAgingReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseDefaultTransactionOnly</Name>
				<Source><![CDATA[
    public boolean parmUseDefaultTransactionOnly(boolean _useDefaultTransOnly = useDefaultTransOnly)
    {
        useDefaultTransOnly = true;
        return useDefaultTransOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic that is used by the <c>CustAgingReport</c>
    ///    report.
    /// </remarks>
    public void processReport()
    {
        QueryRun qr;
        ForwardBackwardPrinting tmpDirection;
        boolean reverseAmountsAndHeadings;
        boolean isPublicSectorScenario;

        contract = this.parmDataContract() as CustAgingReportContract;

        qr = new QueryRun(this.parmQuery());

        if (!contract.parmZeroDate())
        {
            // When the zero date is not given then use the system session date.
            contract.parmZeroDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }

        if (!contract.parmBalanceAsOfDate())
        {
            // When balance as of date is not given then use the max date to include all transactions.
            contract.parmBalanceAsOfDate(dateMax());
        }

        if (contract.parmAgingBuckets())
        {
            // Force layout direction to backwards,
            // the actual direction of the columns is done in the construct method of the class: CustVendBalanceList
            tmpDirection = StatRepInterval::find(contract.parmAgingBuckets()).PrintDirection;
        }
        else
        {
            tmpDirection = contract.parmDirection();
        }

        reverseAmountsAndHeadings = this.getReverseAmountsAndHeadings(contract.parmAgingBuckets(), tmpDirection);

        isPublicSectorScenario = CustBillingClassificationReportManager::isPublicSectorScenario(contract.parmBillingClassification());

        if (isPublicSectorScenario)
        {
            custVendBalanceList = CustVendBalanceList::construct(SysModule::Cust,
                                                                    contract.parmDateTransactionDuedate(),
                                                                    contract.parmInterval(),
                                                                    contract.parmBalanceAsOfDate(),
                                                                    contract.parmZeroDate(),
                                                                    contract.parmPayments(),
                                                                    contract.parmPeriod(),
                                                                    tmpDirection,
                                                                    contract.parmAgingBuckets(),
                                                                    NoYes::Yes,
                                                                    contract.parmDetailed(),
                                                                    contract.parmBillingClassification(),
                                                                    contract.parmInclTransWithNoBillingClass(),
                                                                    contract.parmExcludeZeroBalanceCustomer(),
                                                                    !contract.parmPrintZeroOrNegative(),
                                                                    contract.parmUpdateCollectionStatus());
        }
        else
        {
            custVendBalanceList = CustVendBalanceList::construct(SysModule::Cust,
                                                                    contract.parmDateTransactionDuedate(),
                                                                    contract.parmInterval(),
                                                                    contract.parmBalanceAsOfDate(),
                                                                    contract.parmZeroDate(),
                                                                    contract.parmPayments(),
                                                                    contract.parmPeriod(),
                                                                    tmpDirection,
                                                                    contract.parmAgingBuckets(),
                                                                    NoYes::Yes,
                                                                    contract.parmDetailed(),
                                                                    null,
                                                                    NoYes::No,
                                                                    contract.parmExcludeZeroBalanceCustomer(),
                                                                    !contract.parmPrintZeroOrNegative(),
                                                                    contract.parmUpdateCollectionStatus());

        }

        custVendBalanceList.calculateDetailsForMultiple(
            qr, CustVendAgingQueryConverter::convertCustomers(qr.query()), contract.parmIncludeAmountCur());

        tmpAccountSum = custVendBalanceList.initTmpAccountSum();

        this.initHeadingValues();

        this.insertCustAgingReportTmp(reverseAmountsAndHeadings);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustAgingReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values of headings , descriptions and amount fields of the temp table.
    /// </summary>
    protected void setCustAgingReportTmp()
    {
        custAgingReportTmp.Heading1 = this.heading01();

        if (contract.parmAgingBuckets())
        {
            custAgingReportTmp.Heading2DateValue = custVendBalanceList.startdate(2);
        }
        else
        {
            custAgingReportTmp.Heading2 = contract.parmDateTransactionDuedate() ? strFmt("@SYS60131", #emptyString) : "@SYS62491";
        }

        custAgingReportTmp.Heading3 = this.heading03();
        custAgingReportTmp.Heading4 = this.heading04();
        custAgingReportTmp.Heading5 = this.heading05();
        custAgingReportTmp.Heading6 = this.heading06();

        if (contract.parmAgingBuckets())
        {
            custAgingReportTmp.Heading7DateValue = custVendBalanceList.startdate(7);
        }
        else
        {
            custAgingReportTmp.Heading7 = contract.parmDateTransactionDuedate() ? "@SYS29113" : "@SYS62492";
        }

        custAgingReportTmp.Heading8 = this.heading011();
        custAgingReportTmp.Heading9 = this.heading021();
        custAgingReportTmp.Heading10 = this.heading031();
        custAgingReportTmp.Heading11 = this.heading041();
        custAgingReportTmp.Heading12 = this.heading051();
        custAgingReportTmp.Heading13 = this.heading061();
        custAgingReportTmp.Heading14 = this.heading071();

        custAgingReportTmp.HeadingAgingBucketDescription02 = this.headingAgingBucketDescription02();
        custAgingReportTmp.HeadingAgingBucketDescription03 = this.headingAgingBucketDescription03();
        custAgingReportTmp.HeadingAgingBucketDescription04 = this.headingAgingBucketDescription04();
        custAgingReportTmp.HeadingAgingBucketDescription05 = this.headingAgingBucketDescription05();
        custAgingReportTmp.HeadingAgingBucketDescription06 = this.headingAgingBucketDescription06();
        custAgingReportTmp.HeadingAgingBucketDescription07 = this.headingAgingBucketDescription07();

        custAgingReportTmp.Balance01 = tmpAccountSum.Balance01;
        custAgingReportTmp.Balance02 = tmpAccountSum.Balance02;
        custAgingReportTmp.Balance03 = tmpAccountSum.Balance03;
        custAgingReportTmp.Balance04 = tmpAccountSum.Balance04;
        custAgingReportTmp.Balance05 = tmpAccountSum.Balance05;
        custAgingReportTmp.Balance06 = tmpAccountSum.Balance06;
        custAgingReportTmp.Balance07 = tmpAccountSum.Balance07;

        custAgingReportTmp.Balance01Cur = tmpAccountSum.Balance01Cur;
        custAgingReportTmp.Balance02Cur = tmpAccountSum.Balance02Cur;
        custAgingReportTmp.Balance03Cur = tmpAccountSum.Balance03Cur;
        custAgingReportTmp.Balance04Cur = tmpAccountSum.Balance04Cur;
        custAgingReportTmp.Balance05Cur = tmpAccountSum.Balance05Cur;
        custAgingReportTmp.Balance06Cur = tmpAccountSum.Balance06Cur;
        custAgingReportTmp.Balance07Cur = tmpAccountSum.Balance07Cur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustAgingReportTmpInReverse</Name>
				<Source><![CDATA[
    /// <summary>
    ///      Sets the values of headings, descriptions and amount fields of the temp table.
    ///      The amounts and description are reversed in order to match the selected direction value.
    /// </summary>
    protected void setCustAgingReportTmpInReverse()
    {
        custAgingReportTmp.Heading1 = this.heading01();

        if (contract.parmAgingBuckets())
        {
            custAgingReportTmp.Heading2DateValue = custVendBalanceList.startdate(7);
        }
        else
        {
            custAgingReportTmp.Heading2 = contract.parmDateTransactionDuedate() ? "@SYS29113" : "@SYS62492";
        }

        custAgingReportTmp.Heading3 = this.heading06();
        custAgingReportTmp.Heading4 = this.heading05();
        custAgingReportTmp.Heading5 = this.heading04();
        custAgingReportTmp.Heading6 = this.heading03();

        if (contract.parmAgingBuckets())
        {
            custAgingReportTmp.Heading7DateValue = custVendBalanceList.startdate(2);
        }
        else
        {
            custAgingReportTmp.Heading7 = contract.parmDateTransactionDuedate() ? strFmt("@SYS60131", #emptyString) : "@SYS62491";
        }

        custAgingReportTmp.Heading8 = this.heading011();
        custAgingReportTmp.Heading9 = this.heading071();
        custAgingReportTmp.Heading10 = this.heading061();
        custAgingReportTmp.Heading11 = this.heading051();
        custAgingReportTmp.Heading12 = this.heading041();
        custAgingReportTmp.Heading13 = this.heading031();
        custAgingReportTmp.Heading14 = this.heading021();

        custAgingReportTmp.HeadingAgingBucketDescription02 = this.headingAgingBucketDescription07();
        custAgingReportTmp.HeadingAgingBucketDescription03 = this.headingAgingBucketDescription06();
        custAgingReportTmp.HeadingAgingBucketDescription04 = this.headingAgingBucketDescription05();
        custAgingReportTmp.HeadingAgingBucketDescription05 = this.headingAgingBucketDescription04();
        custAgingReportTmp.HeadingAgingBucketDescription06 = this.headingAgingBucketDescription03();
        custAgingReportTmp.HeadingAgingBucketDescription07 = this.headingAgingBucketDescription02();

        custAgingReportTmp.Balance01 = tmpAccountSum.Balance01;
        custAgingReportTmp.Balance02 = tmpAccountSum.Balance07;
        custAgingReportTmp.Balance03 = tmpAccountSum.Balance06;
        custAgingReportTmp.Balance04 = tmpAccountSum.Balance05;
        custAgingReportTmp.Balance05 = tmpAccountSum.Balance04;
        custAgingReportTmp.Balance06 = tmpAccountSum.Balance03;
        custAgingReportTmp.Balance07 = tmpAccountSum.Balance02;

        custAgingReportTmp.Balance01Cur = tmpAccountSum.Balance01Cur;
        custAgingReportTmp.Balance02Cur = tmpAccountSum.Balance07Cur;
        custAgingReportTmp.Balance03Cur = tmpAccountSum.Balance06Cur;
        custAgingReportTmp.Balance04Cur = tmpAccountSum.Balance05Cur;
        custAgingReportTmp.Balance05Cur = tmpAccountSum.Balance04Cur;
        custAgingReportTmp.Balance06Cur = tmpAccountSum.Balance03Cur;
        custAgingReportTmp.Balance07Cur = tmpAccountSum.Balance02Cur;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>