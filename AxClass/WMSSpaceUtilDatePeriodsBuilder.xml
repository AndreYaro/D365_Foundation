<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsSpaceUtilDatePeriodsBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSSpaceUtilDatePeriodsBuilder</c> class encapsulates logic for
/// building up the space utilization periods.
/// </summary>
public class WmsSpaceUtilDatePeriodsBuilder implements WorkPeriodTemplateCalculable
{
    WorkPeriodTemplateRecId         workPeriodTemplate;
    TransDate                       fromDate;
    RefRecId                        reportSetup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a period to the space utilization periods table.
    /// </summary>
    /// <param name="_fromDate">
    /// The start date.
    /// </param>
    /// <param name="_toDate">
    /// The ending date.
    /// </param>
    /// <param name="_description">
    /// The description of the period.
    /// </param>
    /// <param name="_workDays">
    /// The work days template.
    /// </param>
    public void addPeriod(
        TransDate                   _fromDate,
        TransDate                   _toDate,
        PeriodTemplateDescription   _description,
        PeriodTemplateOpenDays      _workDays)
    {
        WMSSpaceUtilDatePeriods datePeriods;

        if (_description != "@SYS90879" && _description != "@SYS131154")
        {
            datePeriods.StartDate       = _fromDate;
            datePeriods.EndDate         = _toDate;
            datePeriods.wmsReportSetup  = reportSetup;
            datePeriods.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates all the periods that are defined by the period template.
    /// </summary>
    public void buildPeriods()
    {
        WorkPeriodTemplateCalculate     workPeriodTemplateCalculate;

        ttsbegin;

        this.deleteExistingDatePeriods();

        workPeriodTemplateCalculate = WorkPeriodTemplateCalculate::newStandard(workPeriodTemplate, fromDate, ForwardBackward::Forward);
        workPeriodTemplateCalculate.parmSkipPeriodDescriptions(true);
        workPeriodTemplateCalculate.calcPeriods(this);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExistingDatePeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all the periods that are defined by the period template.
    /// </summary>
    private void deleteExistingDatePeriods()
    {
        WMSSpaceUtilDatePeriods datePeriods;

        ttsbegin;

        delete_from datePeriods
            where datePeriods.wmsReportSetup == reportSetup;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
        public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportSetup</Name>
				<Source><![CDATA[
        public RefRecId parmReportSetup(RefRecId _reportSetup = reportSetup)
    {
        reportSetup = _reportSetup;

        return reportSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkPeriodTemplate</Name>
				<Source><![CDATA[
        public WorkPeriodTemplateRecId parmWorkPeriodTemplate(WorkPeriodTemplateRecId _workPeriodTemplate = workPeriodTemplate)
    {
        workPeriodTemplate = _workPeriodTemplate;

        return workPeriodTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static WMSSpaceUtilDatePeriodsBuilder construct()
    {
        return new WMSSpaceUtilDatePeriodsBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>