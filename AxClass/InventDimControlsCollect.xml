<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimControlsCollect</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class InventDimControlsCollect
{
    Set             controlList;
    SetEnumerator   controlListEnumerator;

    Set             dimFieldIdSet;
    Set             validDataSources;

    boolean         isRetailConfigKeyEnabled;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildCompareList</Name>
				<Source><![CDATA[
    protected void buildCompareList()
    {
        /* set datasources  */
        this.buildDataSourceList();

        /* set fields       */
        this.buildDataFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDataFieldList</Name>
				<Source><![CDATA[
    protected void buildDataFieldList()
    {
        dimFieldIdSet      = InventDim::dimFieldList2Set(InventDim::dimFieldsList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDataSourceList</Name>
				<Source><![CDATA[
    abstract protected void buildDataSourceList()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceName</Name>
				<Source><![CDATA[
    public str datasourceName(InventDimControlInterface _fc)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>tableId</c> value of the table that holds the dimension fields.
    /// </summary>
    /// <returns>
    ///    A <c>tableId</c> value.
    /// </returns>
    /// <remarks>
    ///    By default, the ID of the <c>InventDim</c> table is returned.
    /// </remarks>
    protected TableId dimTableId()
    {
        return tableNum(InventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldId</Name>
				<Source><![CDATA[
    public FieldId fieldId(InventDimControlInterface _fc)
    {
        FieldId     dimFieldId      = fieldExt2Id(_fc.dataField());

        if (!dimFieldIdSet.in(dimFieldId))
        {
            return 0;
        }
        return dimFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
    public InventDimControlInterface first(str _fieldName = '')
    {
        controlListEnumerator = controlList.getEnumerator();
        while (controlListEnumerator.moveNext())
        {
            InventDimControlInterface fc = controlListEnumerator.current();
            if (!_fieldName || _fieldName == new DictField(this.dimTableId(), fieldExt2Id(fc.dataField())).name())
            {
                return fc;
            }
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes this class.
    /// </summary>
    /// <remarks>
    ///    This method should always be called from the constructing new method.
    /// </remarks>
    protected void init()
    {
        controlList = new Set(Types::Class);
        isRetailConfigKeyEnabled = isConfigurationkeyEnabled(configurationKeyNum(Retail));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertControl</Name>
				<Source><![CDATA[
    protected void insertControl(InventDimControlInterface _fc)
    {
        if (_fc && this.mustInsertInList(_fc))
        {
            controlList.add(_fc);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFormFieldControl</Name>
				<Source><![CDATA[
    protected void insertFormFieldControl(
        FormControl     _fc,
        boolean         _isInGrid)
    {
        InventDimFormControlInterface adapter =
            InventDimAXFormControlAdapter::newFormControl(_fc, _isInGrid);

        this.insertControl(adapter as InventDimControlInterface);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertListPageFieldControl</Name>
				<Source><![CDATA[
    protected void insertListPageFieldControl(
        str fieldName,
        ListPageInteraction listPageInteraction)
    {
        InventDimFormControlInterface adapter =
            InventDimListPageControlAdapter::newListPageControl(fieldName, listPageInteraction);

        this.insertControl(adapter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReportFieldControl</Name>
				<Source><![CDATA[
    protected void insertReportFieldControl(ReportControl _rc)
    {
        InventDimReportControlInterface adapter =
            InventDimAXReportControlAdapter::newReportControl(_rc);

        this.insertControl(adapter as InventDimControlInterface);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDataSourceValid</Name>
				<Source><![CDATA[
    protected boolean isDataSourceValid(Object _o)
    {
        if (!validDataSources)
        {
            return true;
        }

        SetEnumerator enumerator = validDataSources.getEnumerator();
        while (enumerator.moveNext())
        {
            str name = enumerator.current();
            if (_o.name() == name)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInsertInList</Name>
				<Source><![CDATA[
    abstract protected boolean mustInsertInList(InventDimControlInterface _o)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public InventDimControlInterface next(str fieldName = '')
    {
        while (controlListEnumerator.moveNext())
        {
            InventDimControlInterface fc = controlListEnumerator.current();
            if (!fieldName || fieldName == new DictField(this.dimTableId(), fieldExt2Id(fc.dataField())).name())
            {
                return fc;
            }
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidDataSources</Name>
				<Source><![CDATA[
    public Set parmValidDataSources(Set _validDataSources = validDataSources)
    {
        validDataSources = _validDataSources;

        return validDataSources;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validDataSourceNames</Name>
				<Source><![CDATA[
    public str 255 validDataSourceNames()
    {
        str             validNames;

        if (!validDataSources)
        {
            return '';
        }

        SetEnumerator enumerator = validDataSources.getEnumerator();
        while (enumerator.moveNext())
        {
            validNames += enumerator.current();
        }
        return validNames;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
