<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTaxListCrateAuto</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayTaxListCrateAuto extends RunBaseBatch implements BatchRetryable
{
    int                     firstListNumber;
    TransDate               transDate;
    ReportPeriod_RU         payPeriod;
    FilePath                filePath;
    NoYes                   printout;
    NoYes                   createRegisters;

    RPayNDFLType            reportType;
    RPayNDFLSelectEmpl      selectEmplType;

    RPayTaxPresentation     presentation;

    QueryRun                queryRun;

    DialogField             firstListNumberDialogField;
    DialogField             transDateDialogField;
    DialogField             payPeriodDialogField;
    DialogField             filePathDialogField;
    DialogField             printoutDialogField;
    DialogField             createRegistersDialogField;
    DialogField             reportTypeDialogField;
    DialogField             selectEmplTypeDialogField;
    DialogField             presentationDialogField;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        firstListNumber
       ,transDate
       ,payPeriod
       ,filePath
       ,printout
       ,createRegisters
       ,reportType
       ,selectEmplType
       ,presentation
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRegister</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createRegister(RPayTaxListTable _rPayTaxListTable)
    {
        RPayTaxListEngine rPayTaxListEngine = new RPayTaxListEngine(_rPayTaxListTable);

        rPayTaxListEngine.createList(false);
        _rPayTaxListTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog  dialog = super();
        FilePath filePathTmp = xInfo::directory(DirectoryType::Temp);

        dialog.addGroup("@SYS7764");
        firstListNumberDialogField  = dialog.addFieldValue(extendedTypeStr(Integer), firstListNumber, "@RUP3501", "@RUP2767");
        transDateDialogField        = dialog.addFieldValue(extendedTypeStr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS54385", "@RUP710");
        payPeriodDialogField        = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU), payPeriod ? payPeriod :  RPayParameters::payPeriod());
        filePathDialogField         = dialog.addFieldValue(extendedTypeStr(FilePath), filePath ? filePath : subStr(filePathTmp, 1, strLen(filePathTmp) - 1));
        printoutDialogField         = dialog.addFieldValue(enumStr(NoYes), printout, "@RUP3204", "@RUP3204");
        createRegistersDialogField  = dialog.addFieldValue(enumStr(NoYes), createRegisters, "@RUP3502", "@RUP3502");

        dialog.addGroup("@GLS105362");
        reportTypeDialogField       = dialog.addFieldValue(enumStr(RPayNDFLType), reportType);
        selectEmplTypeDialogField   = dialog.addFieldValue(enumStr(RPayNDFLSelectEmpl), selectEmplType);

        dialog.addGroup("@RUP3492");
        presentationDialogField     = dialog.addFieldValue(enumStr(RPayTaxPresentation), presentation);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        firstListNumber = firstListNumberDialogField.value();
        transDate       = transDateDialogField.value();
        payPeriod       = payPeriodDialogField.value();
        filePath        = filePathDialogField.value();
        printout        = printoutDialogField.value();
        createRegisters = createRegistersDialogField.value();
        reportType      = reportTypeDialogField.value();
        selectEmplType  = selectEmplTypeDialogField.value();
        presentation    = presentationDialogField.value();

        payPeriod = endmth(payPeriod);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOfficials</Name>
				<Source><![CDATA[
    private void initOfficials(RPayTaxListTable _rPayTaxListTable)
    {
        OfficialsServ_RU officialServ;

        officialServ = new OfficialsServ_RU();
        officialServ.initTableRPayTaxListTable();
        _rPayTaxListTable.OffSessionId = officialServ.newId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        this.initQueryRun();
        presentation = RPayTaxPresentation::ThroughPrimaryIFNS;
        firstListNumber = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected QueryRun initQueryRun()
    {
        Query query = new Query();

        query.addDataSource(tableNum(Branches_RU));

        queryRun = new QueryRun(query);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        Branches_RU             branches, branchesMain;
        TaxAuthorityOKATO_RU    taxAuthorityOKATO;
        RPayTaxListTable        rPayTaxListTable;
        RPayTaxListNumber       listNumber = firstListNumber;
        Set                     taxAuthoritiesSet = new Set(Types::String);
        SetEnumerator           se;
        int                     taxListCount;

        try
        {
            ttsbegin;

            branchesMain.clear();
            branchesMain.BranchId = '';
            branchesMain.doInsert();

            if (presentation == RPayTaxPresentation::ToPrimaryIFNS)
            {
                taxAuthoritiesSet.add(RPayTaxListTable::primaryTaxAuthority().TaxAuthority);
            }
            else
            {
                queryRun.reset();
                while (queryRun.next())
                {
                    branches = queryRun.get(tableNum(Branches_RU));

                    if (branches.BranchId == '')
                    {
                        taxAuthoritiesSet.add(RPayTaxListTable::primaryTaxAuthority().TaxAuthority);
                    }
                    else
                    {
                         select firstonly TaxAuthority from taxAuthorityOKATO
                            where taxAuthorityOKATO.okato == VendTable::find(branches.VendAccount).partyOKATOasOfDate_RU(payPeriod);

                        taxAuthoritiesSet.add(taxAuthorityOKATO.TaxAuthority);
                    }
                }
            }

            se = taxAuthoritiesSet.getEnumerator();

            rPayTaxListTable.clear();

            rPayTaxListTable.PayPeriod      = payPeriod;
            rPayTaxListTable.TransDate      = transDate;
            rPayTaxListTable.FilePath       = filePath;
            rPayTaxListTable.ReportType     = reportType;
            rPayTaxListTable.SelectEmplType = selectEmplType;
            rPayTaxListTable.Printout       = printout;
            rPayTaxListTable.Presentation   = presentation;
            this.initOfficials(rPayTaxListTable);

            while (se.moveNext())
            {
                rPayTaxListTable.ListNumber     = listNumber;
                switch (presentation)
                {
                    case RPayTaxPresentation::ToPrimaryIFNS:
                        rPayTaxListTable.TaxAuthority           = RPayTaxListTable::primaryTaxAuthority().TaxAuthority;
                        rPayTaxListTable.EventualTaxAuthority   = RPayTaxListTable::primaryTaxAuthority().TaxAuthority;
                        break;

                    case RPayTaxPresentation::ThroughPrimaryIFNS:
                        rPayTaxListTable.TaxAuthority           = RPayTaxListTable::primaryTaxAuthority().TaxAuthority;
                        rPayTaxListTable.EventualTaxAuthority   = se.current();
                        break;

                    case RPayTaxPresentation::ToSeparateDevisionIFNS:
                        rPayTaxListTable.TaxAuthority           = se.current();
                        rPayTaxListTable.EventualTaxAuthority   = se.current();
                        break;
                }

                if (rPayTaxListTable.validateWrite())
                {
                    rPayTaxListTable.insert();

                    if (createRegisters)
                    {
                        this.createRegister(rPayTaxListTable);
                    }
                }
                else
                {
                    throw error("@SYS18738");
                }

                listNumber ++;
                taxListCount ++;
            }

            branchesMain.doDelete();

            ttscommit;
            info(strFmt("@RUP3503", taxListCount));
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version        = conPeek(_packedClass,1);
        container   packedQueryRun;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQueryRun] = _packedClass;

                if (SysQuery::isPackedOk(packedQueryRun))
                {
                    queryRun = new QueryRun(packedQueryRun);
                }
                else
                {
                    this.initQueryRun();
                }

                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (! transDate)
        {
            ret = checkFailed(strFmt("@SYS26332", "@SYS54385"));
        }

        if (!RPayTaxReportValue::allowParmIntersection(selectEmplType, reportType))
        {
            ret = checkFailed(strFmt("@RUP3203", "@RUP3213", "@RUP3206"));
        }

        if (transDate == dateNull() || endmth(transDate) < payPeriod)
        {
            ret = checkFailed(strFmt("@SYS91558", "@SYS54385", "@GLS105772"));
        }

        if (! firstListNumber)
        {
            ret = checkFailed(strFmt("@GLS102641", "@RUP3501"));
        }

        if (ret && presentation == RPayTaxPresentation::ToPrimaryIFNS)
        {
            if (Box::yesNo(strFmt("@RUP3504",
                enum2str(presentation)), DialogButton::No) == DialogButton::No)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayTaxListCrateAuto construct()
    {
        return new RPayTaxListCrateAuto();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP3490";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayTaxListCrateAuto rPayTaxListCrateAuto = RPayTaxListCrateAuto::construct();

        if (rPayTaxListCrateAuto.prompt())
        {
            rPayTaxListCrateAuto.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>