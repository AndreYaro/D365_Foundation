<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayWarehouseTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to manage movements between warehouses.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::WarehouseTransfer)]
class WhsWorkExecuteDisplayWarehouseTransfer extends WHSWorkExecuteDisplay
{
    int hasError;

    private Qty qtyOrig;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processControl</Name>
				<Source><![CDATA[
    public boolean processControl(WhsControl _control, str _value)
    {
        switch (true)
        {
            case _control is WhsControlContainerType:
                WhsControlContainerType controlContainer = _control as WhsControlContainerType;
                controlContainer.initializeContainerType();

                break;
        }

        return super(_control, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMovementFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for Movement From screen.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_locationId">
    /// From location id.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    container buildMovementFrom(container       _con,
                                WMSLocationId   _locationId = '')
    {
        container           ret = _con;
        WMSLocation         location;
        InventTable         inventTable;
        WHSInventStatusId   inventStatusId;
        WHSInventTable      whsInventTable;

        if (pass.exists(#ItemId))
        {
            inventTable = InventTable::find(pass.lookup(#ItemId));
        }

        ret += [this.buildControl(#RFLabel, 'Movement', WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, 'From', "@WAX1300", 1, '', #WHSRFUndefinedDataType, '', 0)];

        if (!pass.exists(#WMSLocationId))
        {
            ret += [this.buildControl(#RFText, #LocOrLP, "@WAX1146", 1, _locationId, extendedTypeNum(WHSLocOrLP), '', 0)];
        }
        else
        {
            ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, _locationId, extendedTypeNum(WMSLocationId), '', 0)];
        }

        if (_locationId && pass.exists(#InventLocationId))
        {
            location = WMSLocation::find(_locationId, pass.lookup(#InventLocationId));

            if (location.whsLocationIsLPControlled())
            {
                ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookupStr(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0)];
            }
        }

        ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, '', extendedTypeNum(InventInventItemSearchItem), '', 0)];

        if (inventTable)
        {
  
            whsInventTable = WHSInventTable::find(pass.lookup(#ItemId));

            if (whsInventTable.rfDescription1)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', whsInventTable.rfDescription1), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription1))];
            }
            else
            {
                ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', inventTable.productNameWhsWorkExecute()), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(EcoResProductName))];
            }

            if (whsInventTable.rfDescription2)
            {
                ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt('\t        %1', whsInventTable.rfDescription2), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription2))];
            }
        }

        ret = this.buildProductDimensionsText(ret, inventTable.ItemId);

        ret = this.buildTrackingDimensionsText(ret, inventTable.ItemId, location);

        if (pass.exists(#SerialId) && pass.lookup(#SerialId) != '')
        {
            inventStatusId = this.getDefaultSerialInventStatusId(pass.lookup(#InventSiteId),
                                                             pass.lookup(#InventLocationId),
                                                             pass.lookup(#WMSLocationId),
                                                             pass.lookup(#SerialId));
        }
        else if (pass.exists(#LicensePlateId) && pass.lookup(#LicensePlateId) != '')
        {
            inventStatusId = this.getDefaultLPInventStatusId(pass.lookup(#LicensePlateId));
        }

        //Placed Qty control after Inventory Status control to take into account Inventory Status when validation on-hand on Qty
        if (inventStatusId)
        {
            pass.insert(#SelectedValue, inventStatusId);
            ret = this.buildInventoryStatus(ret, '', false, true, false, inventStatusId, false);
        }
        else
        {
            ret = this.buildInventoryStatus(ret, '', false, true, false, pass.lookupStr(#SelectedValue), !location.whsLocationIsLPControlled());
        }

        ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, '', extendedTypeNum(Qty), '', 0)];

        ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM));
        
        if (inventTable
            && PdsGlobal::pdsIsCWItem(inventTable.ItemId)
            && !WHSInventTable::isCatchWeightTagTracked(inventTable.ItemId))
        {
            boolean weightEnabled = true;
            if (WHSInventTable::outboundWeightVarianceMethod(inventTable.ItemId) == WHSOutboundWeightVarianceMethod::Restrict)
            {
                PmfQtyDataCarrier onhand = whsInventOnHand::getWorkPhysicalQuantityByInventDim(inventTable.ItemId, pass.createInventDimFromPass());
                if (pass.lookupNum(#Qty) == onhand.parmCwQty())
                {
                    if (pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight) != onhand.parmInventQty())
                    {
                        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, onhand.parmInventQty());
                        pass.insert(#Initiation, '1');
                    }
                    weightEnabled = false;
                }
                else if (pass.lookupNum(#Qty) != qtyOrig)
                {
                    pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, '');
                }
            }

            if (WHSInventTable::warehouseTransferWeightCapturingMethod(inventTable.ItemId) == WHSWarehouseTransferWeightCapturingMethod::PerPickingQty || !weightEnabled)
            {
                ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, "@WAX:Weight", 1, pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight), extendedTypeNum(Weight), '', 0, weightEnabled)];
            }
        }

        if (pass.lookupStr(#LicensePlateId))
        {
            ret = this.addMoveLPButton(ret, 1);
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMovementTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for Movement To screen.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_locationId">
    /// To location id.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    container buildMovementTo(container     _con,
                              WMSLocationId _locationId = '')
    {
        container           ret = _con;
        WMSLocation         location;
        InventTable         inventTable;
        WHSLicensePlateId   tmpLicensePlateId;
        WHSInventTable      whsInventTable;
        boolean             displayContainerType = WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DisplayContainerTypeCode;

        if (pass.exists(#ItemId))
        {
            inventTable = InventTable::find(pass.lookup(#ItemId));
        }

        ret += [this.buildControl(#RFLabel, 'Movement', WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, 'To', "@WAX1299", 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret = this.buildInventoryStatusForContainer(ret);

        ret = this.buildToWarehouse(ret, '', false, false, false, pass.lookupStr(#ToWarehouse));

        if (!pass.exists(#MoveLP))
        {
            ret += [this.buildControl(#RFText, #LocOrLP, "@WAX1146", 1, _locationId, extendedTypeNum(WHSLicensePlateId), '', 0)];

            if (_locationId && pass.exists(#ToWarehouse))
            {
                location = WMSLocation::find(_locationId, pass.lookup(#ToWarehouse));

                if (location.whsLocationIsLPControlled())
                {
                    if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GenerateLP && (!pass.exists(#LicensePlateId) || pass.lookup(#LicensePlateId) == ''))
                    {
                        tmpLicensePlateId = WHSLicensePlate::generateLicensePlateId(pass.lookup(#ItemId), pass.lookup(#UOM));
                        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookupStr(#TargetLicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0)];
                    }
                    else if (displayContainerType && pass.hasValue(#TargetLicensePlateId))
                    {
                        // When container type is displayed LP will be saved to TargetLicensePlateId.
                        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookupStr(#TargetLicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0)];
                    }
                    else
                    {
                        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.exists(#SplittingLP) ? '' : pass.lookupStr(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0)];
                    }

                    if (displayContainerType)
                    {
                        this.setInitiationForContainer();

                        ret = this.buildContainerType(ret, pass.lookupStr(#ContainerType), !pass.hasValue(#AlreadyHaveLP));
                    }
                }
            }

            ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.lookupStr(#ItemId), extendedTypeNum(InventInventItemSearchItem), '', 0, false)];

            if (inventTable)
            {
                whsInventTable = WHSInventTable::find(pass.lookup(#ItemId));

                if (whsInventTable.rfDescription1)
                {
                    ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', whsInventTable.rfDescription1), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription1))];
                }
                else
                {
                    ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt('\t        %1', inventTable.productNameWhsWorkExecute()), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(EcoResProductName))];
                }

                if (whsInventTable.rfDescription2)
                {
                    ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt('\t        %1', whsInventTable.rfDescription2), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription2))];
                }
            }

            ret = this.buildProductDimensionsText(ret, inventTable.ItemId, true, false);

            ret = this.buildTrackingDimensionsText(ret, inventTable.ItemId, location, true, true, false, true);

            ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, pass.lookupStr(#Qty), extendedTypeNum(Qty), '', 0, false)];

            ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM), false);
        }
        else
        {
            ret += [this.buildControl(#RFText, #WMSLocationId, "@WAX1196", 1, _locationId, extendedTypeNum(WMSLocationId), '', 0)];

            ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookupStr(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0, false)];
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventoryStatusForContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the inventory status container
    /// </summary>
    /// <param name="_con">
    /// The container, based on which, the inventory status is built.
    /// </param>
    private container buildInventoryStatusForContainer(container _con)
    {
        const int StepToLookupValue = 2;
        container ret = _con;
        if (pass.exists(#MoveLP))
        {
            // If step is 1, we are coming from the "from" screen on the warehouse transfer and we want
            // the default option for the inventory status to be '' meaning copy over existing inventory status.
            // If we are coming from the same "to" screen we want to keep the selected option.
            str selectedInventoryStatusValue = step == StepToLookupValue ? pass.lookupStr(#SelectedValue) : '';
            using (var context = WHSAllowBuildInventoryStatusWithEmptySelectedValueContext::construct())
            {
                ret = this.buildInventoryStatus(_con, '', false, true, false, selectedInventoryStatusValue);
            }
        }
        else
        {
            ret = this.buildInventoryStatus(_con, '', false, true, false, pass.lookupStr(#SelectedValue));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildToWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for To Warehouse screen.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_label">
    /// Label text.
    /// </param>
    /// <param name="_showRemove">
    /// Determines whether Remove from Quarantine button should be shown, false by default.
    /// </param>
    /// <param name="_showBlank">
    /// Determines whether warehouse combobox should allow blank, false by default.
    /// </param>
    /// <param name="_showOK">
    /// Determines whether OK button should be shown, false by default.
    /// </param>
    /// <param name="_selected">
    /// Selected combobox element, empty string by default.
    /// </param>
    /// <param name="_enabled">
    /// Determines whether warehouse combobox should be enabled, true by default.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    container buildToWarehouse(container    _con,
                            str          _label = '',
                            boolean      _showRemove = false,
                            boolean      _showBlank = false,
                            boolean      _showOK = false,
                            str          _selected = '',
                            boolean      _enabled = true)
    {
        WHSWorkUserWarehouse    workUserWarehouse;
        container               ret = _con;
        boolean                 first = true;
        str                     elements;
        str                     label = _label ? _label : "@WAX3297";      // To Warehouse
        InventLocationId        warehouseForDefaultDataValue;

        if (_showBlank)
        {
            elements = '||';
        }
        if (pass.exists(#UserId))
        {
            if (!_selected)
            {
                warehouseForDefaultDataValue = WHSRFDefaultData::getWarehouseForDefaultValue(pass.lookup(#MenuItem), WHSDefaultDataField::ToLocation);
            }

            while select workUserWarehouse
                where workUserWarehouse.UserId == pass.lookup(#UserId)
            {
                if (!_selected && warehouseForDefaultDataValue == workUserWarehouse.InventLocationId)
                {
                    _selected = warehouseForDefaultDataValue;
                }

                if (first)
                {
                    elements += workUserWarehouse.InventLocationId;
                    first = false;
                }
                else
                {
                    elements = elements + '||' + workUserWarehouse.InventLocationId;
                }
            }
        }

        if (!_enabled && _selected)
        {
            ret += [this.buildControl(#RFCombobox, #ToWarehouse, label, 1, _selected, #WHSRFUndefinedDataType, '', 0, _enabled, _selected, WHSRFColorText::Default, extendedTypeNum(InventLocationIdTo))];
        }
        else
        {
            ret += [this.buildControl(#RFCombobox, #ToWarehouse, label, 1, elements, #WHSRFUndefinedDataType, '', 0, _enabled, _selected ? _selected : '', WHSRFColorText::Default, extendedTypeNum(InventLocationIdTo))];
        }

        if (_showRemove)
        {
            ret += [this.buildControl(#RFButton, "@SYS26394", "@WAX879", 1, '', #WHSRFUndefinedDataType, '', 0)];
        }

        if (_showOK)
        {
            ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLPIsSupportedForNestMovement</Name>
				<Source><![CDATA[
    private boolean validateLPIsSupportedForNestMovement()
    {
        // we only support full LP movement if the LP does not contain catch weight items.
        if (this.containsCatchWeightItemOnLP())
        {
            throw error("@WAX:WarehouseTransferMoveLPWithCWItemUnsupported");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    container displayForm(container _con, str _buttonClicked = '')
    {
        WhsWorkExecute                  workExecute = WhsWorkExecute::construct();
        InventDim                       fromInventDim;
        InventDim                       toInventDim;
        container                       ret = conNull();
        container                       con = _con;
        container                       tmpFieldValues;
        WHSRFPassthrough                fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        boolean                         addCancel = true;
        boolean                         fullLP;
        boolean                         complete;
        WMSLocationId                   defaultLocationId;
        Name                            defaultInventStatus;
        WHSInventStatusId               tmpInventStatus;
        InventSiteId                    inventSiteId;
        InventLocationId                inventLocationId;

        mode = conPeek(conPeek(_con, 1), 1);
        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        hasError = this.hasError(con);

        switch (step)
        {
            case 0,1:
                if (pass.exists(#MenuItem))
                {
                    if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DefaultData && !step)
                    {
                        con = this.buildMovementFrom(ret);

                        con = this.updateModeStepPass(con, mode, step, pass);

                        pass.insert(#Initiation, 1);

                        step = 1;
                    }
                }
                if (step)
                {
                    if (hasError)
                    {
                        con = conDel(con, 3, 1);
                    }

                    ret = this.displayLocOrLPCheck(ret, this.getControlDataFromContainer(con, #LocOrLP));
                    
                    if (step == #LocOrLPCheck)
                    {
                        break;
                    }

                    qtyOrig = pass.lookupNum(#Qty);

                    [con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, con, pass);
                    fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                    pass = this.combineMaps(pass, fieldValues);
                    hasError = this.hasError(con);

                    if (hasError)
                    {
                        ret = con;
                        addCancel = false;
                        break;
                    }
                }
                else
                {
                    step = 1;
                    pass.insert(#Initiation, '1');
                }

                con = this.buildMovementFrom(ret, pass.lookupStr(#WMSLocationId));

                if (!fieldValues.empty())
                {
                    if (pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight))
                    {
                        fieldValues.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight));
                    }

                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    if (complete || _buttonClicked == #RFMoveLP)
                    {
                        if (!pass.exists(#Initiation) || _buttonClicked == #RFMoveLP)
                        {
                            if (_buttonClicked == #RFMoveLP && this.validateLPIsSupportedForNestMovement())
                            {
                                pass.insert(#MoveLP, 1);
                            }

                            // Store off from InventDim to be used in journal creation later
                            fromInventDim                   = pass.createInventDimFromPass();
                            fromInventDim.InventSiteId      = InventLocation::find(pass.lookup(#InventLocationId)).InventSiteId;
                            fromInventDim = InventDim::findOrCreate(fromInventDim);

                            pass.insert(#FromInventDimId, fromInventDim.InventDimId);

                            ret = conNull();
                            ret = this.buildMovementTo(ret);
                            addCancel = true;

                            if (pass.exists(#SelectedValue)             &&
                                pass.lookup(#SelectedValue)     != ''   &&
                                pass.exists(#InventoryStatus)           &&
                                pass.lookup(#InventoryStatus)   == '')
                            {
                                pass.insert(#InventoryStatus, pass.lookup(#SelectedValue));
                            }

                            if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DefaultData)
                            {
                                defaultLocationId   = WHSRFDefaultData::getDefaultValue(pass.lookup(#MenuItem),
                                                                                        WHSDefaultDataField::ToLocation,
                                                                                        pass.lookup(#UserId),
                                                                                        pass.lookup(#InventLocationId),
                                                                                        '');

                                defaultInventStatus = WHSRFDefaultData::getDefaultValue(pass.lookup(#MenuItem),
                                                                                        WHSDefaultDataField::ToInventStatus,
                                                                                        pass.lookup(#UserId),
                                                                                        pass.lookup(#InventLocationId),
                                                                                        '',
                                                                                        pass);

                                if (defaultLocationId && WMSLocation::exist(defaultLocationId, pass.lookup(#InventLocationId)))
                                {
                                    fieldValues.insert(#LocOrLP, defaultLocationId);
                                    pass.insert(#ToLocationId, defaultLocationId);
                                }
                                if (defaultInventStatus || pass.exists(#DefaultDataFound))
                                {
                                    fieldValues.insert(#SelectedValue, defaultInventStatus);
                                    pass.insert(#SelectedValue, defaultInventStatus);

                                    if (pass.exists(#DefaultDataFound))
                                    {
                                        pass.remove(#DefaultDataFound);
                                    }
                                }

                                [ret, complete] = this.processFieldValues(ret, fieldValues);

                                ret = conNull();
                                ret = this.buildMovementTo(ret, defaultLocationId);

                                if (pass.exists(#ToLocationId))
                                {
                                    pass.remove(#ToLocationId);
                                }
                            }

                            if (pass.exists(#LicensePlateId))
                            {
                                if (_buttonClicked != #RFMoveLP)
                                {
                                    fullLP = workExecute.validateMovementLPQty(fromInventDim,
                                                                                pass.lookupStr(#ItemId),
                                                                                pass.lookupNum(#Qty),
                                                                                pass.lookupStr(#UOM));
                                }

                                if (!fullLP && _buttonClicked != #RFMoveLP)
                                {
                                    pass.insert(#OrigLP, pass.lookup(#LicensePlateId));
                                    pass.insert(#SplittingLP, '1');
                                }
                            }

                            ret = conNull();
                            ret = this.buildMovementTo(ret, defaultLocationId);

                            // Step is set to 2 because we are moving from step 1 (the "from screen) to the "to" screen of warehouse transfer
                            // The assignment is positioned here because some functions up to this point use this variable
                            step = 2;
                        }

                        pass.remove(#Initiation);
                    }
                }
                else
                {
                    ret = con;
                }
                break;

            case 2:
                boolean displayContainerType = WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DisplayContainerTypeCode;

                pass.insert(#NewInventoryStatusId, conPeek(conPeek(con, 5 + hasError), #data));
                pass.insert(#SelectedValue, pass.lookup(#NewInventoryStatusId));

                pass.insert(#ToWarehouse, conPeek(conPeek(con, 6 + hasError), #data));

                if (pass.exists(#MoveLP) && WMSLocation::whsGetLocationId(conPeek(conPeek(con, 7 + hasError), #data), pass.lookup(#ToWarehouse)))
                {
                    pass.insert(#LocOrLP, WMSLocation::whsGetLocationId(conPeek(conPeek(con, 7 + hasError), #data), pass.lookup(#ToWarehouse)));
                    pass.insert(#ToLocationId, pass.lookup(#LocOrLP));
                }

                if (!pass.exists(#ToLocationId) ||
                    pass.lookupStr(#LocOrLP) != this.getControlDataFromContainer(con, #LocOrLP))
                {
                    pass.insert(#LocOrLP, conPeek(conPeek(con, 7 + hasError), #data));
                    
                    if (pass.lookupStr(#LocOrLP))
                    {
                        if (WHSLicensePlate::exist(pass.lookup(#LocOrLP)))
                        {
                            pass.remove(WHSWorkExecuteDisplayLocOrLPCheckControls::LocOrLPCheck);
                            pass.insert(#ToLicensePlateId, pass.lookup(#LocOrLP));
                            pass.insert(#ToLocationId, workExecute.getLicensePlateLocation(pass.lookup(#ToWarehouse),
                                                                                        InventLocation::find(pass.lookup(#ToWarehouse)).InventSiteId,
                                                                                        pass.lookup(#ToLicensePlateId)));

                            if (pass.lookup(#ToLocationId) == '')
                            {
                                pass.remove(#ToLicensePlateId);
                                pass.remove(#ToLocationId);

                                if (WMSLocation::whsGetLocationId(pass.lookup(#LocOrLP), pass.lookup(#ToWarehouse)))
                                {
                                    this.processToLocation(con);
                                }
                                else
                                {
                                    throw error("@WAX1159");
                                }
                            }
                            else if (pass.lookup(#LocOrLP) != pass.lookup(#ToLocationId)
                                && WMSLocation::whsGetLocationId(pass.lookup(#LocOrLP), pass.lookup(#ToWarehouse)))
                            {
                                ret = this.buildLocOrLPCheck(ret);
                                step = #LocOrLPCheck;
                                break;
                            }
                        }
                        else if (WMSLocation::whsGetLocationId(pass.lookup(#LocOrLP), pass.lookup(#ToWarehouse)))
                        {
                            this.processToLocation(con);
                        }
                        else
                        {
                            throw error("@WAX755");
                        }
                    }
                }
                else if (WMSLocation::find(pass.lookup(#ToLocationId), pass.lookup(#ToWarehouse)).whsLocationIsLPControlled())
                {
                    // If container type is displayed and license plate value was updated, don't set To LP so container type can also be updated.
                    if (displayContainerType)
                    {
                        if (pass.hasValue(#Initiation))
                        {
                            pass.insert(#TargetLicensePlateId, conPeek(conPeek(con, 8 + hasError), #data));

                            if (pass.hasValue(#TargetLicensePlateId))
                            {
                                pass.remove(#Initiation);
                            }
                            if (conPeek(conPeek(con, 9 + hasError), #name) == #ContainerType)
                            {
                                pass.insert(#ContainerType, conPeek(conPeek(con, 9 + hasError), #data));
                            }
                        }
                        else if (pass.exists(#TargetLicensePlateId)
                            && pass.lookup(#TargetLicensePlateId) == conPeek(conPeek(con, 8 + hasError), #data))
                        {
                            str toLicensePlateId = pass.lookup(#TargetLicensePlateId);
                            pass.insert(#ToLicensePlateId, toLicensePlateId);

                            if (WMSLocation::exist(toLicensePlateId, pass.lookup(#ToWarehouse)))
                            {
                                pass.remove(#ToLicensePlateId);
                                pass.remove(#TargetLicensePlateId);
                                throw error(strFmt("@WAX:Error_LicensePlateIdCannotBeSameAsExistingLocationId", toLicensePlateId));
                            }

                            if (conPeek(conPeek(con, 9 + hasError), #name) == #ContainerType)
                            {
                                pass.insert(#ContainerType, conPeek(conPeek(con, 9 + hasError), #data));
                                if (pass.exists(#AlreadyHaveLP))
                                {
                                    pass.remove(#AlreadyHaveLP);
                                }
                            }

                            WHSLicensePlate::createLicensePlate(toLicensePlateId, true, this.getDefaultContainerTypeCode());
                        }
                        else
                        {
                            if (conPeek(conPeek(con, 9 + hasError), #name) == #ContainerType)
                            {
                                pass.insert(#ContainerType, conPeek(conPeek(con, 9 + hasError), #data));
                            }

                            pass.insert(#TargetLicensePlateId, conPeek(conPeek(con, 8 + hasError), #data));
                        }
                    }
                    else
                    {
                        pass.insert(#ToLicensePlateId, conPeek(conPeek(con, 8 + hasError), #data));

                        WHSLicensePlate::createLicensePlate(pass.lookup(#ToLicensePlateId), true, this.getDefaultContainerTypeCode());
                    }
                }

                if (pass.exists(#ToWarehouse) && pass.exists(#ToLocationId) &&
                    WMSLocation::find(pass.lookup(#ToLocationId), pass.lookup(#ToWarehouse)).LocProfileId == WHSParameters::find().UserLocType)
                {
                    pass.remove(#ToLocationId);
                    throw error("@WAX3130");
                }

                if ((pass.exists(#ToLicensePlateId) && pass.lookup(#ToLicensePlateId) != '' && pass.exists(#ToLocationId)) ||
                    (pass.exists(#ToLocationId) && !WMSLocation::find(pass.lookup(#ToLocationId), pass.lookup(#ToWarehouse)).whsLocationIsLPControlled()))
                {
                    // Build the to InventDim to be passed to journal creation
                    toInventDim                     = pass.createInventDimFromPass();
                    toInventDim.InventSiteId        = InventLocation::find(pass.lookup(#ToWarehouse)).InventSiteId;
                    toInventDim.InventLocationId    = pass.lookupStr(#ToWarehouse);
                    toInventDim.wmsLocationId       = pass.lookupStr(#ToLocationId);
                    toInventDim.LicensePlateId      = pass.lookupStr(#ToLicensePlateId);
                    toInventDim.InventStatusId      = pass.lookupStr(#NewInventoryStatusId);
                    toInventDim = InventDim::findOrCreate(toInventDim);

                    pass.insert(#ToInventDimId, toInventDim.InventDimId);

                    if (pass.exists(#ToLicensePlateId)                                  &&
                        pass.exists(#LicensePlateId)                                    &&
                        pass.exists(#ItemId)                                            &&
                        pass.lookup(#ItemId) != ''                                      &&
                        pass.lookup(#ToLicensePlateId) == pass.lookup(#LicensePlateId)  &&
                        !pass.exists(#MoveLP) &&
                        WHSLicensePlate::getTotalHandlingQtyOnLicensePlateWithDelta(pass.lookup(#LicensePlateId)) > WHSCatchWeightHelper::convertInventQuantity(pass.lookup(#ItemId),
                                                                                                                                    pass.lookup(#SelectedValueUOM),
                                                                                                                                    pass.lookupNum(#Qty),
                                                                                                                                    toInventDim.inventDimId))
                    {
                        throw error("@WAX2027");
                    }

                    if (pass.exists(#SplittingLP) && pass.exists(#ToLicensePlateId) &&
                        !WHSInvent::canPutLicensePlateOnLocation(pass.lookup(#ToLicensePlateId), pass.lookup(#ToLocationId), pass.lookup(#ToWarehouse), false))
                    {
                        throw error("@WAX2027");
                    }

                    if (pass.exists(#LicensePlateId) && pass.exists(#ToLicensePlateId) && pass.lookup(#LicensePlateId) != pass.lookup(#ToLicensePlateId))
                    {
                        tmpInventStatus = this.getDefaultLPInventStatusId(pass.lookup(#ToLicensePlateId));

                        if (tmpInventStatus)
                        {
                            pass.insert(#NewInventoryStatusId, tmpInventStatus);
                        }
                    }

                    if (pass.exists(#MoveLP))
                    {
                        fromInventDim = InventDim::find(pass.lookup(#FromInventDimId));

                        workExecute.createAndPostNestedWarehouseTransferJournal(
                                                                    pass.lookup(#LicensePlateId),
                                                                    fromInventDim,
                                                                    toInventDim,
                                                                    userId);

                        WHSLicensePlate::removeFromParentLP(fromInventDim.LicensePlateId);

                        this.handleLocationLicensePlatePositioning(fromInventDim, toInventDim);

                        ret = this.resetAfterWorkComplete(ret);

                        break;
                    }

                    if (WHSInventTable::isCatchWeightTagTracked(pass.lookup(#ItemId))
                        || (!pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight)
                            && PdsGlobal::pdsIsCWItem(pass.lookup(#ItemId))
                            && WHSInventTable::warehouseTransferWeightCapturingMethod(pass.lookup(#ItemId)) == WHSWarehouseTransferWeightCapturingMethod::PerCatchWeightUnit))
                    {
                        WHSCatchWeightTagAutoSelect tagAutoSelect = WHSCatchWeightTagAutoSelectWarehouseTransfer::newFromParams(mode, pass);
                        if (tagAutoSelect.canUseAutoSelection())
                        {
                            tagAutoSelect.process();

                            ret = this.completeWeightCaptureProcess();
                        }
                        else
                        {
                            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, 1);
                            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty, WHSCatchWeightHelper::convertInventQuantity(pass.lookup(#ItemId),
                                                                                                            pass.lookup(#UOM),
                                                                                                            pass.lookupNum(#Qty),
                                                                                                            toInventDim.InventDimId));

                            ret = this.buildCatchWeightCaptureForWarehouseTransfer();
                            step = #CatchWeightTagCapture;
                        }
                        break;
                    }
                    
                    pass.insert(#Qty, WHSCatchWeightHelper::convertInventQuantity(pass.lookup(#ItemId),
                                                                            pass.lookup(#UOM),
                                                                            pass.lookupNum(#Qty),
                                                                            toInventDim.inventDimId));

                    fromInventDim = InventDim::find(pass.lookup(#FromInventDimId));

                    workExecute.createAndPostTransferJournalQuantities(WHSParameters::find().DefaultWhseTransJournal,
                                                                pass.lookup(#ItemId),
                                                                pass.lookupNum(#Qty),
                                                                pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight),
                                                                pass.lookup(#FromInventDimId),
                                                                pass.lookup(#ToInventDimId),
                                                                pass.lookup(#UserId));

                    WHSLicensePlate::removeFromParentLP(fromInventDim.LicensePlateId);

                    ret = this.resetAfterWorkComplete(ret);
                }
                else
                {
                    ret = conNull();
                    ret = this.buildMovementTo(ret, pass.lookupStr(#ToLocationId));
                }
                break;

            case #CatchWeightTagCapture:
                ret = this.processCatchWeightTagCaptureWHSTransfer(hasError, con);
                break;

            case #LocOrLPCheck:

                if (pass.exists(#Initiation))
                {
                    ret = this.processLocOrLPCheckFrom(con, _buttonClicked);
                }
                else
                {
                    ret = this.processLocOrLPCheckTo(con, _buttonClicked);
                }

                break;
        }

        if (addCancel)
        {
            ret = this.addCancelButton(ret, 1, true);
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLocOrLPCheckFrom</Name>
				<Source><![CDATA[
    private container processLocOrLPCheckFrom(container _con, str _buttonClicked)
    {
        step = 1;

        var locOrLpIdentifier = pass.lookupStr(#LocOrLP);
        container ret = conNull();

        pass = this.resetPassthrough(ret, false);
        pass.insert(WHSWorkExecuteDisplayLocOrLPCheckControls::LocOrLPCheck, _buttonClicked);
        pass.insert(#Initiation, '1');

        ret = this.updateModeStepPass(ret, mode, step, pass);
        ret = this.buildMovementFrom(ret, locOrLpIdentifier);
        ret = this.displayForm(ret, _buttonClicked);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLocOrLPCheckTo</Name>
				<Source><![CDATA[
    private container processLocOrLPCheckTo(container _con, str _buttonClicked)
    {
      
        step = 2;
        pass.insert(WHSWorkExecuteDisplayLocOrLPCheckControls::LocOrLPCheck, _buttonClicked);

        if (_buttonClicked == WHSWorkExecuteDisplayLocOrLPCheckControls::ConfirmLocation)
        {
            pass.insert(#ToLocationId, pass.lookupStr(#LocOrLP));
            pass.remove(#ToLicensePlateId);
        }
        else
        {
            pass.insert(#LocOrLP, pass.lookupStr(#ToLocationId));
        }

        container ret = this.buildMovementTo(conNull(), pass.lookupStr(#LocOrLP));
        ret = this.setControlDataFromContainer(ret, #LicensePlateId, pass.lookupStr(#ToLicensePlateId));

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processToLocation</Name>
				<Source><![CDATA[
    private void processToLocation(container _con)
    {
        pass.insert(#ToLocationId, WMSLocation::whsGetLocationId(pass.lookup(#LocOrLP), pass.lookup(#ToWarehouse)));

        if (conPeek(conPeek(_con, 8 + hasError), #name) == #LicensePlateId)
        {
            str toLicensePlateId;

            // In case if location is changed to the non license plate controlled location remove ToLicensePlateId from pass
            if (!WMSLocation::find(pass.lookup(#ToLocationId), pass.lookup(#ToWarehouse)).whsLocationIsLPControlled())
            {
                pass.remove(#ToLicensePlateId);
            }
            else
            {
                toLicensePlateId = conPeek(conPeek(_con, 8 + hasError), #data);
                pass.insert(#ToLicensePlateId, toLicensePlateId);
            }

            if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).DisplayContainerTypeCode)
            {
                pass.insert(#ContainerType, conPeek(conPeek(_con, 9 + hasError), #data));
            }

            if (WMSLocation::exist(toLicensePlateId, pass.lookup(#ToWarehouse)))
            {
                pass.remove(#ToLicensePlateId);
                throw error(strFmt("@WAX:Error_LicensePlateIdCannotBeSameAsExistingLocationId", toLicensePlateId));
            }

            WHSLicensePlate::createLicensePlate(toLicensePlateId, true, this.getDefaultContainerTypeCode());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>containsCatchWeightItemOnLP</Name>
				<Source><![CDATA[
    private boolean containsCatchWeightItemOnLP(WHSLicensePlateId _licensePlateId = pass.lookup(#LicensePlateId))
    {
        InventSum inventSum;
        boolean   ret;

        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            PdsCatchWeightItem  catchWeightItem;
            
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                select firstOnly RecId from inventSum
                where inventSum.PdsCWAvailPhysical  > 0
                    && inventSum.ClosedQty          == NoYes::No
                    && inventSum.LicensePlateId      == _licensePlateId
                    && inventSum.wMSLocationId       == pass.lookup(#WMSLocationId)
                    && inventSum.InventLocationId    == pass.lookup(#InventLocationId);
            }
            else
            {
                InventDim           inventDim;

                select firstOnly RecId from inventSum
                where inventSum.PdsCWAvailPhysical  > 0
                &&    inventSum.ClosedQty          == NoYes::No
                exists join inventDim
                    where inventDim.inventDimId         == inventSum.InventDimId
                    &&    inventDim.LicensePlateId      == _licensePlateId
                    &&    inventDim.wMSLocationId       == pass.lookup(#WMSLocationId)
                    &&    inventDim.InventLocationId    == pass.lookup(#InventLocationId);
            }

            ret = inventSum.RecId != 0;

            if (!ret && WHSLicensePlate::isParentLicensePlate(_licensePlateId))
            {
                WHSLicensePlate childLicensePlate;

                while select LicensePlateId from childLicensePlate
                    where childLicensePlate.LicensePlateParent == _licensePlateId
                {
                    if (this.containsCatchWeightItemOnLP(childLicensePlate.LicensePlateId))
                    {
                        return true;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCatchWeightCaptureForWarehouseTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the screen to capture weight for CW items.
    /// </summary>
    /// <param name="_con">
    /// The current container.
    /// </param>
    /// <returns>
    /// The new container with the weight capture controls.
    /// </returns>
    private container buildCatchWeightCaptureForWarehouseTransfer()
    {
        container ret; 

        if (WHSInventTable::isCatchWeightTagTracked(pass.lookupStr(#ItemId)))
        {
            ret = [this.buildControl(#RFLabel, #Scan, "@WAX:CatchWeightAssignCatchWeightTag", 1, '', #WHSRFUndefinedDataType, '', 0)];

            ret += [this.buildControl(#RFLabel,
                                    WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter,
                                    strFmt("@WAX:CatchWeightTagCountOfWhole", pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter), pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty)),
                                    1,
                                    '',
                                    #WHSRFUndefinedDataType,
                                    '',
                                    0)];

            ret += [this.buildControl(#RFLabel, #ItemId, strFmt("@WAX2007", pass.lookupStr(#ItemId)), 1, '', #WHSRFUndefinedDataType, '', 0)];

            ret = this.buildProductDimensionsFromInventDim(ret, pass.lookupStr(#ItemId), InventDim::find(pass.lookupStr(#FromInventDimId)), false);

            ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag, "@WAX:MobileDeviceLabelCatchWeightTag", 1, pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag), extendedTypeNum(WHSCatchWeightTagNumber), '', 0)];
        }
        else
        {
            // Capturing weight per catch weight unit
            ret += [this.buildControl(#RFLabel, #Scan, "@WAX:CaptureWeight", 1, '', #WHSRFUndefinedDataType, '', 0)];

            ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, strFmt("@SYS333411", pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter), pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty)), 1, '', #WHSRFUndefinedDataType, '', 0)];

            ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.lookupStr(#ItemId), extendedTypeNum(InventInventItemSearchItem), '', 0, false)];

            ret = this.buildProductDimensionsFromInventDim(ret, pass.lookupStr(#ItemId), InventDim::find(pass.lookupStr(#FromInventDimId)), false);

            ret += [this.buildControl(#RFLabel, #Qty, strFmt("@WAX736", 1, WHSCatchWeightHelper::inventHandlingUnitId(pass.lookupStr(#ItemId))), 1, '', #WHSRFUndefinedDataType, '', 0)];

            ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight, "@WAX:Weight", 1, pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight), extendedTypeNum(Weight), '', 0)];
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        step = #CatchWeightTagCapture;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCatchWeightTagCaptureWHSTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process catch weight tag capture.
    /// </summary>
    /// <param name="_hasError">
    /// If the previous container had an error.
    /// </param>
    /// <param name="_con">
    /// The previous container.
    /// </param>
    /// <returns>
    /// The new container.
    /// </returns>
    private container processCatchWeightTagCaptureWHSTransfer(
        boolean     _hasError,
        container   _con)
    {
        container           ret = _con;

        if (_hasError)
        {
            ret = conDel(ret, #RFErrorLoc, 1);
        }

        container           tmpFieldValues;
        WHSRFPassthrough    fieldValues = new WHSRFPassthrough(Types::String, Types::String);

        [ret, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, ret, pass);
        fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        pass = this.combineMaps(pass, fieldValues);

        if (this.hasError(ret))
        {
            return ret;
        }

        if (!fieldValues.empty())
        {
            boolean complete;
            [ret, complete] = this.processFieldValues(ret, fieldValues);

            if (complete)
            {
                if (WHSInventTable::isCatchWeightTagTracked(pass.lookup(#ItemId)))
                {
                    // Update old catch weight tag with new info
                    WHSCatchWeightTag catchWeightTag = WHSCatchWeightTag::find(pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag));

                    if (!catchWeightTag)
                    {
                        throw error("@WAX:MobileDeviceControlValidationInvalidCatchWeightTag");
                    }
                    else if (this.isCatchWeightTagScanned(catchWeightTag.RecId))
                    {
                        throw error(strFmt("@WAX:MobileDeviceControlValidationCatchWeightTagInvalidStatus", catchWeightTag.TagNumber));
                    }

                    this.trackScannedCatchWeightTags(catchWeightTag.RecId);

                    // Remove current Tag Id and increment Tag Counter
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag);
                    pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) + 1));

                    // Increment total catch weight value
                    if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight))
                    {
                        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, catchWeightTag.CapturedWeight);
                    }
                    else
                    {
                        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, (pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight) + catchWeightTag.CapturedWeight));
                    }
                }
                else
                {
                    pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) + 1));

                    // Increment total outbound weight for picking quantity
                    if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight))
                    {
                        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight));
                    }
                    else
                    {
                        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, (pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight) + pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight)));
                    }

                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightQtyOutboundWeight);
                }

                // Check to see if all tags have been captured
                if (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) > pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty))
                {
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagWeight);
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter);
                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty);

                    ret = this.completeWeightCaptureProcess();
                }
                else
                {
                    ret = this.buildCatchWeightCaptureForWarehouseTransfer();
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeWeightCaptureProcess</Name>
				<Source><![CDATA[
    private container completeWeightCaptureProcess()
    {
        if (WHSInventTable::isCatchWeightTagTracked(pass.lookup(#ItemId)))
        {
            this.createAndPostJournalAndTagRegistrations();
        }
        else
        {
            this.createAndPostJournalFromPass();
        }
                    
        InventDim fromInventDim = InventDim::find(pass.lookup(#FromInventDimId));
        WHSLicensePlate::removeFromParentLP(fromInventDim.LicensePlateId);

        return this.resetAfterWorkComplete(conNull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndPostJournalAndTagRegistrations</Name>
				<Source><![CDATA[
    private void createAndPostJournalAndTagRegistrations()
    {
        ttsbegin;
        
        WhsWorkExecute workExecute = WhsWorkExecute::construct();
        InventJournalTable journalTable = workExecute.createTransferJournal(WHSParameters::find().DefaultWhseTransJournal,
                                                                            pass.lookup(#ItemId), 
                                                                            pass.lookupNum(#Qty),
                                                                            pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight),
                                                                            pass.lookup(#FromInventDimId), 
                                                                            pass.lookup(#ToInventDimId));

        // Since the journal is created with a single line, this just needs to reference line number 1.
        LineNum journalLineNum = 1;

        workExecute.updateQuantityAndPostTransferJournal(
                        journalTable.JournalId,
                        journalLineNum,
                        pass.lookup(#ItemId),
                        pass.lookupNum(#Qty),
                        pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight),
                        pass.lookup(#FromInventDimId),
                        pass.lookup(#ToInventDimId),
                        pass.lookup(#UserId));

        InventJournalTrans  inventJournalTrans;

        select firstOnly inventJournalTrans
            where  inventJournalTrans.JournalId == journalTable.JournalId
                && inventJournalTrans.LineNum   == journalLineNum;

        container cwTagCreatedList = str2con(pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::ScannedCatchWeightTagList));

        WHSCatchWeightTagEventRegistration eventRegistration = WHSCatchWeightTagEventRegistration::instantiateFromTagRegistration(
                WHSCatchWeightTagRegistrationEvent::TagRegistered);
        eventRegistration.parmInventTransId(inventJournalTrans.InventTransId);
        eventRegistration.parmStorageInventDim(inventJournalTrans.toInventDim());

        boolean isStatusOnlyTracked = WHSInventTable::catchWeightTagDimensionTrackingMethod(pass.lookupStr(#ItemId)) == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndInventoryStatus;
        InventDim statusOnlyInventDim;
        if (isStatusOnlyTracked)
        {
            statusOnlyInventDim = InventDim::find(WHSCatchWeightTag::inventDimWithTagSpecificDimensions(eventRegistration.parmStorageInventDim(), pass.lookupStr(#ItemId)));
        }

        for (int counter = 1; counter <= conLen(cwTagCreatedList); counter++)
        {
            WHSCatchWeightTag catchWeightTag = WHSCatchWeightTag::findByRecId(conPeek(cwTagCreatedList, counter), isStatusOnlyTracked);

            eventRegistration.registerEvent(catchWeightTag);

            // Event registration automatically updates the storage dimensions for full dimension tracked; update status for status-only tracked tags now
            if (isStatusOnlyTracked)
            {
                catchWeightTag.updateCatchWeightTagDimension(statusOnlyInventDim, true);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndPostJournalFromPass</Name>
				<Source><![CDATA[
    private void createAndPostJournalFromPass()
    {
        WhsWorkExecute workExecute = WhsWorkExecute::construct();
        workExecute.createAndPostTransferJournalQuantities(WHSParameters::find().DefaultWhseTransJournal,
                        pass.lookup(#ItemId),
                        pass.lookupNum(#Qty),
                        pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight),
                        pass.lookup(#FromInventDimId),
                        pass.lookup(#ToInventDimId),
                        pass.lookup(#UserId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAfterWorkComplete</Name>
				<Source><![CDATA[
    protected container resetAfterWorkComplete(container ret)
    {
        InventSiteId inventSiteId = pass.lookup(#InventSiteId);

        ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);

        pass = this.resetPassthrough(ret, false);
        pass.insert(#InventSiteId, inventSiteId);
        pass.insert(#Initiation, 1);

        step = 1;

        this.populateDefaultDataAfterWorkComplete();

        return this.buildMovementFrom(ret, pass.parmWMSLocationId());
        
	}

]]></Source>
			</Method>
			<Method>
				<Name>populateDefaultDataAfterWorkComplete</Name>
				<Source><![CDATA[
    private void populateDefaultDataAfterWorkComplete()
    {
        if (pass.exists(#MenuItem)
            && WHSRFMenuItemTable::find(pass.parmMenuItem()).DefaultData)
        {
            container con = this.buildMovementFrom(conNull());
            con = this.updateModeStepPass(con, mode, step, pass);

            container tmpFieldValues = conPeek(WHSRFControlData::processDataWithCallback(this, con, pass), 2);

            if (conLen(tmpFieldValues) > 0)
            {
                WHSRFPassthrough fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleLocationLicensePlatePositioning</Name>
				<Source><![CDATA[
    private void handleLocationLicensePlatePositioning(InventDim _fromInventDim, InventDim _toInventDim)
    {
        WHSLocationLicensePlatePositioningSequencer::newFromLicensePlateAtLocation(_fromInventDim.LicensePlateId, _fromInventDim.wMSLocation()).pickLicensePlateFromCurrentPosition();

        WHSLocationLicensePlatePositioningSequencer::newFromLicensePlateAtLocation(_toInventDim.LicensePlateId, _toInventDim.wMSLocation()).putLicensePlateAtFirstPosition();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>