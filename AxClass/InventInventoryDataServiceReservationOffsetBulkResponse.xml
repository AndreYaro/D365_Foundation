<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceReservationOffsetBulkResponse</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DataContract]
public final class InventInventoryDataServiceReservationOffsetBulkResponse extends InventInventoryDataServiceHttpResponse
{
    private List success;
    private List failure;
    private List conflict;
    private List notFound;
    private List partialSuccess;
    private List unknown;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        success         =   new List(Types::Class);
        failure         =   new List(Types::Class);
        conflict        =   new List(Types::Class);
        notFound        =   new List(Types::Class);
        partialSuccess  =   new List(Types::Class);
        unknown         =   new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSuccess</Name>
				<Source><![CDATA[
    [DataMember('success'), DataCollection(Types::Class, classStr(InventInventoryDataServiceReservationOffsetResponse))]
    public List parmSuccess(List _success = success)
    {
        success = _success;
        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFailure</Name>
				<Source><![CDATA[
    [DataMember('failure'), DataCollection(Types::Class, classStr(InventInventoryDataServiceReservationOffsetResponse))]
    public List parmFailure(List _failure = failure)
    {
        failure = _failure;
        return failure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConflict</Name>
				<Source><![CDATA[
    [DataMember('conflict'), DataCollection(Types::Class, classStr(InventInventoryDataServiceReservationOffsetResponse))]
    public List parmConflict(List _conflict = conflict)
    {
        conflict = _conflict;
        return conflict;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNotFound</Name>
				<Source><![CDATA[
    [DataMember('notFound'), DataCollection(Types::Class, classStr(InventInventoryDataServiceReservationOffsetResponse))]
    public List parmNotFound(List _notFound = notFound)
    {
        notFound = _notFound;
        return notFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPartialSuccess</Name>
				<Source><![CDATA[
    [DataMember('partialSuccess'), DataCollection(Types::Class, classStr(InventInventoryDataServiceReservationOffsetResponse))]
    public List parmPartialSuccess(List _partialSuccess = partialSuccess)
    {
        partialSuccess = _partialSuccess;
        return partialSuccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnknown</Name>
				<Source><![CDATA[
    [DataMember('unknown'), DataCollection(Types::Class, classStr(InventInventoryDataServiceReservationOffsetResponse))]
    public List parmUnknown(List _unknown = unknown)
    {
        unknown = _unknown;
        return unknown;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>