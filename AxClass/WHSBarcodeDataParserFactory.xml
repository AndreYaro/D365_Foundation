<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSBarcodeDataParserFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class WHSBarcodeDataParserFactory
{
    protected str inputString;
    protected WHSMenuItemName menuItemName;

    protected WHSIBarcodeDataParser dataParser;
    protected boolean containsBarcodeData;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForInputString</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSBarcodeDataParserFactory newForInputString(str _inputString)
    {
        WHSBarcodeDataParserFactory factory = new WHSBarcodeDataParserFactory();
        factory.inputString = _inputString;

        return factory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withMenuItemName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSBarcodeDataParserFactory withMenuItemName(WHSMenuItemName _menuItemName)
    {
        menuItemName = _menuItemName;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryCreate</Name>
				<Source><![CDATA[
    public WHSIBarcodeDataParser tryCreate()
    {
        if (!dataParser)
        {
            dataParser = this.tryCreateGS1DataParser();
        }

        if (!dataParser)
        {
            dataParser = this.tryCreateMH1083DataParser();
        }

        return dataParser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryCreateGS1DataParser</Name>
				<Source><![CDATA[
    private WHSIBarcodeDataParser tryCreateGS1DataParser()
    {
        WHSGS1Parser gs1Parser = WHSGS1Parser::newWithInputString(inputString);
        if (gs1Parser.canParseBarcodeData())
        {
            return gs1Parser;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryCreateMH1083DataParser</Name>
				<Source><![CDATA[
    private WHSIBarcodeDataParser tryCreateMH1083DataParser()
    {
        WHSMH1083Parser mhParser = WHSMH1083Parser::newWithInputString(inputString);
        if (mhParser.canParseBarcodeData())
        {
            return mhParser;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containsBarcodeData</Name>
				<Source><![CDATA[
    protected boolean containsBarcodeData()
    {
        if (!containsBarcodeData)
        {
            containsBarcodeData = this.containsGS1BarcodeData();
        }

        if (!containsBarcodeData)
        {
            containsBarcodeData = this.containsMH1083BarcodeData();
        }

        return containsBarcodeData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containsGS1BarcodeData</Name>
				<Source><![CDATA[
    private boolean containsGS1BarcodeData()
    {
        return WHSParameters::hasGS1Prefix(inputString) > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containsMH1083BarcodeData</Name>
				<Source><![CDATA[
    private boolean containsMH1083BarcodeData()
    {
        return strStartsWith(inputString, WHSMH1083Parser::MH1083ComplianceIndicator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBarcodeDataParsingEnabled</Name>
				<Source><![CDATA[
    public static boolean isBarcodeDataParsingEnabled()
    {
        // After removing WHSCanParseBarcodeDataFromStringFlight, check if WHSParameters::isGS1Enabled() should be removed as well
        if (WHSCanParseBarcodeDataFromStringFlight::instance().isEnabled())
        {
            WHSParameters whsParameters = WHSParameters::find();

            return whsParameters.GS1GroupSeparator
                   || whsParameters.BarcodeDataRecordSeparator
                   || whsParameters.BarcodeDataEndOfTransmission
                   || whsParameters.GS1FNC1Character
                   || whsParameters.GS1QRCodeCharacter
                   || whsParameters.GS1DataMatrixCharacter;
        }
        else
        {
            return WHSParameters::isGS1Enabled();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canParseBarcodeDataFromString</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean canParseBarcodeDataFromString(str _inputString)
    {
        if (WHSCanParseBarcodeDataFromStringFlight::instance().isEnabled())
        {
            return WHSBarcodeDataParserFactory::isBarcodeDataParsingEnabled() && WHSBarcodeDataParserFactory::newForInputString(_inputString).containsBarcodeData();
        }
        else
        {
            return WHSParameters::isGS1Enabled() && WHSParameters::hasGS1Prefix(_inputString);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>