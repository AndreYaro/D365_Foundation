<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAutoScheduler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjAutoScheduler</c> class holds the relation definitions between
/// project task scheduling attributes. It leverages these definitions to
/// re-calculate the scheduling attributes.
/// </summary>
class ProjAutoScheduler
{
    CalendarId forcedCalendarId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcFieldsRelatedToActivityDuration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate fields related to activity duration.
    /// </summary>
    /// <param name="_psaActivitySetup">
    /// PSA activity setup.
    /// </param>
    /// <returns>
    /// True if field is validated successfully.
    /// </returns>
    public boolean calcFieldsRelatedToActivityDuration(PSAActivitySetup _psaActivitySetup)
    {
        Hours durationInHours;
        Hours newActivityDuration = _psaActivitySetup.ActivityDuration;
        PSAActivitySetup originalPSAActivitySetup = _psaActivitySetup.data();
        boolean ret = true;
        WorkCalendarTable workCalendarTable;
        CalendarId calendarId;

        if (forcedCalendarId)
        {
            calendarId = forcedCalendarId;
        }
        else
        {
            calendarId = _psaActivitySetup.CalendarId;
        }

        if (calendarId)
        {
            if (_psaActivitySetup.psaSchedStart)
            {
                _psaActivitySetup.psaSchedEnd = WorkCalendarCalculator::findEndDateForStartDateAndDuration(
                                                                        _psaActivitySetup.psaSchedStart,
                                                                        newActivityDuration,
                                                                        calendarId);

                ret = ret & _psaActivitySetup.validateField(fieldNum(PSAActivitySetup, psaSchedEnd));
            }
            else if (_psaActivitySetup.psaSchedEnd)
            {
                _psaActivitySetup.psaSchedStart = WorkCalendarCalculator::findStartDateForEndDateAndDuration(
                                                                        _psaActivitySetup.psaSchedEnd,
                                                                        newActivityDuration,
                                                                        calendarId);

                ret = ret & _psaActivitySetup.validateField(fieldNum(PSAActivitySetup, psaSchedStart));
            }

            if (_psaActivitySetup.NumberOfResources)
            {
                select firstonly StandardWorkDayHours from workCalendarTable
                    where workCalendarTable.CalendarId == calendarId;

                durationInHours = newActivityDuration * workCalendarTable.StandardWorkDayHours;
                _psaActivitySetup.Effort = _psaActivitySetup.NumberOfResources * durationInHours;
            }
        }

        if (!ret)
        {
            _psaActivitySetup.data(originalPSAActivitySetup);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFieldsRelatedToEffort</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates task schedule attributes to match new task effort value.
    /// </summary>
    /// <param name="_psaActivitySetup">
    ///     <c>PSAActivitySetup</c> record of the task.
    /// </param>
    /// <returns>
    ///     true if no validation errors occurred, false otherwise.
    /// </returns>
    public boolean calcFieldsRelatedToEffort(PSAActivitySetup _psaActivitySetup)
    {
        Hours               durationInHours;
        Hours               newEffort = _psaActivitySetup.Effort;
        PSAActivitySetup    originalPSAActivitySetup = _psaActivitySetup.data();
        boolean             ret = true;
        WorkCalendarTable   workCalendarTable;
        CalendarId          calendarId;

        if (forcedCalendarId)
        {
            calendarId = forcedCalendarId;
        }
        else
        {
            calendarId = _psaActivitySetup.CalendarId;
        }

        if (calendarId)
        {
            if (_psaActivitySetup.NumberOfResources)
            {
                _psaActivitySetup.ActivityDuration = WorkCalendarCalculator::calcDurationForEffortAndResources(newEffort,
                                                                                                               _psaActivitySetup.NumberOfResources,
                                                                                                               calendarId);

                if (_psaActivitySetup.psaSchedStart)
                {
                    _psaActivitySetup.psaSchedEnd = WorkCalendarCalculator::findEndDateForStartDateAndDuration(_psaActivitySetup.psaSchedStart,
                                                                                                               _psaActivitySetup.ActivityDuration,
                                                                                                               calendarId);
                    ret = ret & _psaActivitySetup.validateField(fieldNum(PSAActivitySetup, psaSchedEnd));
                }
            }
            else if (_psaActivitySetup.ActivityDuration)
            {
                select firstonly StandardWorkDayHours from workCalendarTable
                    where workCalendarTable.CalendarId == calendarId;

                durationInHours = _psaActivitySetup.ActivityDuration * workCalendarTable.StandardWorkDayHours;
                if (durationInHours != 0)
                {
                    _psaActivitySetup.NumberOfResources = newEffort / durationInHours;
                }
            }
            else if (_psaActivitySetup.psaSchedStart && _psaActivitySetup.psaSchedEnd)
            {
                select firstonly StandardWorkDayHours from workCalendarTable
                    where workCalendarTable.CalendarId == calendarId;

                _psaActivitySetup.ActivityDuration = WorkCalendarCalculator::calcDuration(_psaActivitySetup.psaSchedStart,
                                                                                          _psaActivitySetup.psaSchedEnd,
                                                                                          calendarId);
                durationInHours = _psaActivitySetup.ActivityDuration * workCalendarTable.StandardWorkDayHours;
                if (durationInHours != 0)
                {
                    _psaActivitySetup.NumberOfResources = newEffort / durationInHours;
                }
            }
        }

        if (!ret)
        {
            _psaActivitySetup.data(originalPSAActivitySetup);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFieldsRelatedToEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate fields related to end date.
    /// </summary>
    /// <param name="_psaActivitySetup">
    /// PSA activity setup.
    /// </param>
    /// <returns>
    /// True if field is validated successfully.
    /// </returns>
    public boolean calcFieldsRelatedToEndDate(PSAActivitySetup _psaActivitySetup)
    {
        Hours durationInHours;
        SchedToDate newEndDate = _psaActivitySetup.psaSchedEnd;
        PSAActivitySetup originalPSAActivitySetup = _psaActivitySetup.data();
        boolean ret = true;
        real calculatedDuration;
        Hours calculatedEffort;
        WorkCalendarTable workCalendarTable;
        CalendarId calendarId;

        if (forcedCalendarId)
        {
            calendarId = forcedCalendarId;
        }
        else
        {
            calendarId = _psaActivitySetup.CalendarId;
        }

        if (newEndDate
            && calendarId)
        {
            if (_psaActivitySetup.psaSchedStart && newEndDate < _psaActivitySetup.psaSchedStart)
            {
                _psaActivitySetup.psaSchedStart = dateNull();
            }

            if (_psaActivitySetup.psaSchedStart)
            {
                calculatedDuration = WorkCalendarCalculator::calcDuration(_psaActivitySetup.psaSchedStart,
                                                                                    newEndDate,
                                                                                    calendarId);
                if (abs(_psaActivitySetup.ActivityDuration - calculatedDuration) >= 1.0)
                {
                    _psaActivitySetup.ActivityDuration = calculatedDuration;
                }
            }
            else if (_psaActivitySetup.ActivityDuration)
            {
                _psaActivitySetup.psaSchedStart = WorkCalendarCalculator::findStartDateForEndDateAndDuration(
                                                                    newEndDate,
                                                                    _psaActivitySetup.ActivityDuration,
                                                                    calendarId);

                ret = ret & _psaActivitySetup.validateField(fieldNum(PSAActivitySetup, psaSchedStart));
            }

            if (_psaActivitySetup.psaSchedStart || _psaActivitySetup.ActivityDuration)
            {
                select firstonly StandardWorkDayHours from workCalendarTable
                        where workCalendarTable.CalendarId == calendarId;

                durationInHours = _psaActivitySetup.ActivityDuration * workCalendarTable.StandardWorkDayHours;
                if (_psaActivitySetup.NumberOfResources && durationInHours != 0)
                {
                    calculatedEffort = _psaActivitySetup.NumberOfResources * durationInHours;
                    if (abs(_psaActivitySetup.Effort - calculatedEffort) >= workCalendarTable.StandardWorkDayHours)
                    {
                        _psaActivitySetup.Effort = calculatedEffort;
                    }
                }
            }
        }

        if (!ret)
        {
            _psaActivitySetup.data(originalPSAActivitySetup);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFieldsRelatedToNumberOfResources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate fields related to number of resources.
    /// </summary>
    /// <param name="_psaActivitySetup">
    /// PSA activity setup record.
    /// </param>
    /// <returns>
    /// True if field is validated successfully.
    /// </returns>
    public boolean calcFieldsRelatedToNumberOfResources(PSAActivitySetup _psaActivitySetup)
    {
        Hours durationInHours;
        Hours newNumberOfResources = _psaActivitySetup.NumberOfResources;
        PSAActivitySetup originalPSAActivitySetup = _psaActivitySetup.data();
        boolean ret = true;
        WorkCalendarTable workCalendarTable;
        CalendarId calendarId;

        if (forcedCalendarId)
        {
            calendarId = forcedCalendarId;
        }
        else
        {
            calendarId = _psaActivitySetup.CalendarId;
        }

        if (calendarId
            && newNumberOfResources)
        {
            if (_psaActivitySetup.Effort)
            {
                _psaActivitySetup.ActivityDuration = WorkCalendarCalculator::calcDurationForEffortAndResources(_psaActivitySetup.Effort,
                                                                                                        newNumberOfResources,
                                                                                                        calendarId);

                if (_psaActivitySetup.psaSchedStart)
                {
                    _psaActivitySetup.psaSchedEnd = WorkCalendarCalculator::findEndDateForStartDateAndDuration(_psaActivitySetup.psaSchedStart,
                                                                                                        _psaActivitySetup.ActivityDuration,
                                                                                                        calendarId);
                    ret = ret & _psaActivitySetup.validateField(fieldNum(PSAActivitySetup, psaSchedEnd));
                }
            }
            else if (_psaActivitySetup.ActivityDuration)
            {
                select firstonly StandardWorkDayHours from workCalendarTable
                    where workCalendarTable.CalendarId == calendarId;

                durationInHours = _psaActivitySetup.ActivityDuration * workCalendarTable.StandardWorkDayHours;
                _psaActivitySetup.Effort = newNumberOfResources * durationInHours;
            }
            else if (_psaActivitySetup.psaSchedStart && _psaActivitySetup.psaSchedEnd)
            {
                durationInHours = WorkCalendarCalculator::calcDurationInHours(_psaActivitySetup.psaSchedStart,
                                                                        _psaActivitySetup.psaSchedEnd,
                                                                        calendarId);
                if (durationInHours != 0)
                {
                    _psaActivitySetup.Effort = newNumberOfResources * durationInHours;
                }
            }
        }

        if (!ret)
        {
            _psaActivitySetup.data(originalPSAActivitySetup);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFieldsRelatedToStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate fields related to start table.
    /// </summary>
    /// <param name="_psaActivitySetup">
    /// Task record setup.
    /// </param>
    /// <returns>
    /// True if field is validated successfully, otherwise false.
    /// </returns>
    public boolean calcFieldsRelatedToStartDate(PSAActivitySetup _psaActivitySetup)
    {
        SchedFromDate newStartDate = _psaActivitySetup.psaSchedStart;
        PSAActivitySetup originalPSAActivitySetup = _psaActivitySetup.data();
        boolean ret = true;
        WorkCalendarTable workCalendarTable;
        CalendarId calendarId;

        if (forcedCalendarId)
        {
            calendarId = forcedCalendarId;
        }
        else
        {
            calendarId = _psaActivitySetup.CalendarId;
        }

        if (newStartDate
            && calendarId)
        {
            if (!_psaActivitySetup.ActivityDuration && _psaActivitySetup.Effort && _psaActivitySetup.NumberOfResources)
            {
                select firstonly StandardWorkDayHours from workCalendarTable
                        where workCalendarTable.CalendarId == calendarId;

                if (workCalendarTable.StandardWorkDayHours)
                {
                    _psaActivitySetup.ActivityDuration = _psaActivitySetup.Effort / (_psaActivitySetup.NumberOfResources * workCalendarTable.StandardWorkDayHours);
                }
            }

            if (_psaActivitySetup.ActivityDuration)
            {
                _psaActivitySetup.psaSchedEnd = WorkCalendarCalculator::findEndDateForStartDateAndDuration(
                                                                        newStartDate,
                                                                        _psaActivitySetup.ActivityDuration,
                                                                        calendarId);

                ret = ret & _psaActivitySetup.validateField(fieldNum(PSAActivitySetup, PSASchedEnd));
            }
        }

        if (!ret)
        {
            _psaActivitySetup.data(originalPSAActivitySetup);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// New method
    /// </summary>
    /// <param name="_calendarId">
    /// Calendar id
    /// </param>
    public void new(CalendarId _calendarId = "")
    {
        if (_calendarId)
        {
            forcedCalendarId = _calendarId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>