<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles <c>Ledger</c> table events.
/// </summary>
class LedgerEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postAccountStructureChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to update the Ledger after account structures have been added on the Ledger form.
    /// </summary>
    /// <param name = "_ledgerRecId">
    /// The record ID of the Ledger record that was modified.
    /// </param>
    [SubscribesTo(classStr(LedgerFormHelper), delegateStr(LedgerFormHelper, postAccountStructureChangeDelegate))]
    public static void postAccountStructureChange(LedgerRecId _ledgerRecId)
    {
        DimensionStructureChangeSynchronize::processLedgerChange(_ledgerRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Ledger_onValidatingDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>Ledger</c> validating delete event.
    /// </summary>
    /// <param name="_sender">The <c>Ledger</c> record that is being validated for delete.</param>
    /// <param name="_e">The event arguments.</param>
    [DataEventHandler(tableStr(Ledger), DataEventType::ValidatingDelete)]
    public static void Ledger_onValidatingDelete(Common _sender, DataEventArgs _e)
    {
        ValidateEventArgs ve = _e;

        if (GeneralJournalEntry::existForLedger(_sender.RecId) || SubledgerJournalEntry::existForLedger(_sender.RecId) ||
            BudgetTransactionHeader::existForLedger(_sender.RecId))
        {
            warning("@SYS328608");
            ve.parmValidateResult(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerStructure_onDeleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the <c>LedgerStructure</c> deleting event.
    /// </summary>
    /// <param name = "_sender">The <c>LedgerStructure</c> record that is being deleted.</param>
    /// <param name = "_e">The event arguments.</param>
    [DataEventHandler(tableStr(LedgerStructure), DataEventType::Deleting)]
    public static void LedgerStructure_onDeleting(Common _sender, DataEventArgs _e)
    {
        LedgerStructure ledgerStructure = _sender as LedgerStructure;

        // Must call before super because it depends on the hiearchy's association to the Ledger
        // therefore this needs to be called in the onDeleting event
        LedgerDimensionValidationHelper::updateCacheForLedgerChange(ledgerStructure.DimensionHierarchy, ledgerStructure.Ledger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerPeriodRecalculation_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the OnClicked event for the ledger period recalculation button.
    /// </summary>
    /// <param name="_sender">The recalculation button.</param>
    /// <param name="_e">The event arguments.</param>
    [FormControlEventHandler(formControlStr(Ledger, LedgerPeriodRecalculation), FormControlEventType::Clicked)]
    public static void LedgerPeriodRecalculation_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        new MenuFunction(menuitemActionStr(LedgerPeriodRecalculation), MenuItemType::Action).run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ConfigureAccountStructure_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the OnClicked event for the ledger configure account structures button.
    /// </summary>
    /// <param name="_sender">The configure account structure button.</param>
    /// <param name="_e">The event arguments.</param>
    [FormControlEventHandler(formControlStr(Ledger, ConfigureAccountStructure), FormControlEventType::Clicked)]
    public static void ConfigureAccountStructure_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        xFormRun formRun = _sender.formRun();
        FormDataSource ledgerStructure_ds = formRun.dataSource(formdatasourcestr(Ledger, LedgerStructure)) as FormDataSource;
        LedgerStructure ledgerStructure = ledgerStructure_ds.cursor();

        DimensionHierarchyHelper::jumpRefAccountStructure(ledgerStructure.DimensionHierarchy, formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsZakatEnabled_SA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if Zakat is enabled.
    /// </summary>
    /// <returns>True if Zakat is enaled; otherwise, false.</returns>
    public boolean IsZakatEnabled_SA()
    {
        return LedgerParameters::find().IsZakatEnabled_SA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerDimension_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the modified event for the revaluation account data field.
    /// </summary>
    /// <param name="_sender">The control that was modified.</param>
    /// <param name="_e">The event arguments.</param>
    [FormDataFieldEventHandler(formDataFieldStr(Ledger, TmpCurrencyLedgerGainLossAccount, LedgerDimension), FormDataFieldEventType::Modified)]
    public static void LedgerDimension_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        FormRun form = _sender.datasource().formRun();

        FormDataSource gainLossAccountDS = form.dataSource(formDataSourceStr(Ledger, TmpCurrencyLedgerGainLossAccount));
        tmpCurrencyLedgerGainLossAccount gainLoss = gainLossAccountDS.cursor();

        if (gainLoss)
        {
            gainLoss.AccountName = MainAccount::getLocalizedNameByMainAccountId(LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(gainLoss.LedgerDimension));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>