<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxPostComplementaryInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxPostComplementaryInvoice</c> class posts tax related to complementary invoice.
/// </summary>
class TaxPostComplementaryInvoice extends TaxPost
{
    ComplementaryInvoiceCalcTax calcTax;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustValuesForTaxInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adjusts the tax value, taxation code and fiscal value for PIS and COFINS based on configuration on <c>BrazilParameters</c>
    /// </summary>
    private void adjustValuesForTaxInvoice()
    {
        TaxTrans                taxTrans;
        Common                  sourceRecord;
        TaxTable                pisTaxCode, cofinsTaxCode;
        BrazilParameters        brazilParameters;
        TaxTrans_BR             taxTrans_BR;
        TaxationCodeTable_BR    taxationCodeTable_BR;

        if (calcTax.complementaryType() == InvoiceComplementaryType_BR::Tax)
        {
            brazilParameters = BrazilParameters::find();

            if (!brazilParameters.ComplementaryInvoiceCOFINS ||
                !brazilParameters.ComplementaryInvoicePIS)
            {
                throw error("@GLS221793");
            }
            cofinsTaxCode = TaxTable::find(brazilParameters.ComplementaryInvoiceCOFINS);
            pisTaxCode = TaxTable::find(brazilParameters.ComplementaryInvoicePIS);

            calcTax.initCursor();
            sourceRecord = calcTax.nextLine();
            while (sourceRecord)
            {
                while select forUpdate taxTrans
                    where taxTrans.SourceTableId == sourceRecord.TableId
                       && taxTrans.SourceRecId == sourceRecord.RecId
                    outer join forUpdate taxTrans_BR
                        where taxTrans_BR.TaxTrans == taxTrans.RecId
                {
                    switch (taxTrans_BR.TaxType_BR)
                    {
                        case TaxType_BR::PIS :
                            taxationCodeTable_BR = TaxationCodeTable_BR::findRecId(pisTaxCode.TaxationCodeTable_BR);

                            taxTrans.TaxCode = pisTaxCode.TaxCode;
                            taxTrans.TaxValue = TaxData::find(pisTaxCode.TaxCode, taxTrans.TransDate, taxTrans.TaxBaseAmount).TaxValue;
                            taxTrans.VATExemptPct = TaxData::getVATExemptPct(taxTrans.TaxDirection, pisTaxCode.TaxCode, taxTrans.TransDate, taxTrans.TaxBaseAmount);
                            taxTrans_BR.TaxationCode_BR = taxationCodeTable_BR.TaxationCode;
                            taxTrans_BR.FiscalValue_BR = taxationCodeTable_BR.FiscalValue;
                            break;

                        case TaxType_BR::COFINS :
                            taxationCodeTable_BR = TaxationCodeTable_BR::findRecId(cofinsTaxCode.TaxationCodeTable_BR);

                            taxTrans.TaxCode = cofinsTaxCode.TaxCode;
                            taxTrans.TaxValue = TaxData::find(cofinsTaxCode.TaxCode, taxTrans.TransDate, taxTrans.TaxBaseAmount).TaxValue;
                            taxTrans.VATExemptPct = TaxData::getVATExemptPct(taxTrans.TaxDirection, cofinsTaxCode.TaxCode, taxTrans.TransDate, taxTrans.TaxBaseAmount);
                            taxTrans_BR.TaxationCode_BR = taxationCodeTable_BR.TaxationCode;
                            taxTrans_BR.FiscalValue_BR = taxationCodeTable_BR.FiscalValue;
                            break;
                    }

                    if (taxTrans_BR.FiscalValue_BR == TaxFiscalValue_BR::WithoutCreditDebitOther)
                    {
                        taxTrans_BR.TaxAmountOther_BR = taxTrans_BR.TaxBaseAmountOther_BR;
                    }

                    taxTrans_BR.update();
                    taxTrans.update();
                }
                sourceRecord = calcTax.nextLine();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitializationClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instance of the <c>ComplimentaryInvoiceCalcTax</c> class.
    /// </summary>
    /// <returns>
    /// The <c>calcTax</c> object.
    /// </returns>
    /// <remarks>
    /// The initialization class is of a different type for each subclass.
    /// </remarks>
    protected Object getInitializationClass()
    {
        return calcTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the original record ID document ID.
    /// </summary>
    /// <returns>
    /// The original record ID of the transaction header.
    /// </returns>
    /// <remarks>
    /// The parent tax lines sometimes changes during posting. This method will return the original
    /// document ID.
    /// </remarks>
    protected RefRecId getOriginalHeadingRecId()
    {
        return origHeadingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original transaction heading table ID.
    /// </summary>
    /// <returns>
    /// The original table ID of the transaction header.
    /// </returns>
    protected RefTableId getOriginalHeadingTableId()
    {
        return origHeadingTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>Tax</c> class.
    /// </summary>
    /// <param name="_post">
    /// A <c>NoYes</c> enumeration value.
    /// </param>
    /// <param name="_initializationClass">
    /// An object that represents the <c>calcTax</c> value.
    /// </param>
    /// <param name="_tmpTaxWorkTrans">
    /// A <c>TmpTaxWorkTrans</c> record; optional.
    /// </param>
    public void new(NoYes              _post,
             Object                    _initializationClass,
             TmpTaxWorkTrans           _tmpTaxWorkTrans = null)
    {
        super();

        calcTax             = _initializationClass as ComplementaryInvoiceCalcTax;
        post                = _post;
        taxWorkTrans        = _tmpTaxWorkTrans;
        taxModuleType       = calcTax.taxModuleType();
        headingTableId      = calcTax.tableId();
        headingRecId        = calcTax.recID();
        origHeadingTableId  = headingTableId;
        origHeadingRecId    = headingRecId;
        taxDate             = calcTax.invoiceDate();
        sourceCurrencyCode  = calcTax.currencyCode();

        if (!headingTableId || !headingRecId || !this.checkParameters())
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the transaction line that is currently being posted.
    /// </summary>
    /// <returns>
    /// The record ID of the transaction line that is being posted.
    /// </returns>
    /// <remarks>
    /// This method is overridden by derived classes.
    /// </remarks>
    public RecId sourceRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TableId</c> of the transaction that is to be taxed.
    /// </summary>
    /// <returns>
    /// The ID of the transaction to be taxed.
    /// </returns>
    /// <remarks>
    /// This method is overridden by derived classes.
    /// </remarks>
    public TableId sourceTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
        public TaxAmount updateAndPost(LedgerPostingController _ledgerPostingController, SelectableDataArea _companyToPost = curext())
    {
        TaxAmount       taxAmount;

        this.initLedgerPosting(_ledgerPostingController);
        if (post)
        {
            this.saveAndPost(_ledgerPostingController, _companyToPost);
            taxAmount = Tax::taxTotalVoucherDate(voucher, taxDate);
            this.adjustValuesForTaxInvoice();
        }
        else
        {
            taxAmount = this.totalTaxAmount();
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current transaction to post supports the <c>SubLedgerDistributions</c> or
    /// <c>SubLedgerJournalLines</c> records.
    /// </summary>
    /// <returns>
    /// true if the current transaction to post supports <c>SubLedgerDistributions</c> or
    /// <c>SubLedgerJournalLines</c> records; otherwise, false.
    /// </returns>
    public boolean useSubLedgerJournalLines()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>Tax</c> class uses the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    /// true if the <c>Tax</c> class uses the <c>TaxUncommitted</c> table; otherwise, false.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>