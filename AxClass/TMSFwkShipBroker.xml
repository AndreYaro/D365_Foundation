<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkShipBroker</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Xml.Linq;
using Microsoft.Dynamics.Ax.Tms.Base.Data;
using Microsoft.Dynamics.Ax.Tms.Base.Utility;

/// <summary>
/// The <c>TMSFwkShipBroker</c> class ships shipments.
/// </summary>
public class TMSFwkShipBroker extends TMSFwkBaseRateBroker
{
    private TMSFwkRateBroker rateBroker;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>rateEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ships a shipment.
    /// </summary>
    /// <param name = "_transactionFacade">Payload for the transaction.</param>
    /// <param name = "_entity">Entity to ship.</param>
    public void rateEntity(TmsTransactionFacade _transactionFacade, XElement _entity)
    {
        System.Exception ex;

        try
        {
            TMSCarrierCode carrierCode = _entity.RetrieveFirstInstanceUpString(ElementXmlConstants::CarrierCode);
            TMSCarrierServiceCode carrierServiceCode = _entity.RetrieveFirstInstanceUpString(ElementXmlConstants::CarrierServiceCode);

            RatingDto ratingDTO = TMSFwkRatingDtoHelper::getRatingDtoForCarrier(
                _transactionFacade,
                carrierCode,
                carrierServiceCode,
                DateTimeUtil::newDateTime(dateNull(), 0));

            System.Object rateEngineObject = TMSFwkRatingService::retrieveRateEngine(_entity, ratingDTO);
            TMSFwkIRateEngine rateEngine = rateEngineObject;
            if (rateEngineObject != null && rateEngine.supportsShip())
            {
                TMSFwkRatingService::updateTotalsOnRatingEntities(_transactionFacade);
                this.parmRateBroker().rateEntity(_transactionFacade, _entity);
                this.parmRatingService().applyNextProNumber(_transactionFacade);
            }
            else
            {
                XElement ratingEntity  = _entity.RetrieveOrCreateRatingEntity(ratingDTO);
                ratingEntity.Add(new XElement(ElementXmlConstants::Status, ElementXmlConstants::NotSupported));
            }
        }
        catch (ex)
        {
            _transactionFacade.parmXTransaction().GenerateElementForXPath(EntityXmlConstants::RatingEntities, EntityXmlConstants::RatingEntity)
                .AddError(StringHelpers::FormatError(TMSFwkErrorDtoBuilderGeneral::buildTechnicalError(), ex.ToString()));
            TMSException::ThrowException("@TRX2584", ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRateBroker</Name>
				<Source><![CDATA[
    protected TMSFwkRateBroker parmRateBroker()
    {
        if (!rateBroker)
        {
            rateBroker = TMSFwkBrokerFactory::createBroker(TMSCommunicationType::Rate);
        }

        return rateBroker;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>