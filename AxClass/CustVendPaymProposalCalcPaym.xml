<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymProposalCalcPaym</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendPaymProposalCalcPaym</c> class calculates payment dates and amounts for open
///    customer or vendor transactions according to the payment proposal settings.
/// </summary>
/// <remarks>
///    Principles for calculating the due date of an open transaction are different in different types of
///    ledger journals. Therefore the class must be constructed with a ledger journal type.The calculation
///    is a two-step process:
///    <list type="number">
///       <item>
///          <description>The actual due date or cash discount date is found.</description>
///       </item>
///       <item>
///          <description>The actual date is adjusted to fit with parameters such as <paramref
///          name="PaymDateFixed" /> and <paramref name="PaymWeekDayFixed" />.</description>
///       </item>
///    </list>
/// </remarks>
public class CustVendPaymProposalCalcPaym implements SysPackable
{
    CustVendTransOpen custVendTransOpen;
    LedgerJournalType ledgerJournalType;
    WeekDays paymWeekDayFixed;
    TransDate paymDateFixed;
    TransDate minimumPaymDate;
    FromDate fromDate;
    ToDate toDate;
    CurrencyCode paymCurrency;
    CustVendCreatePaymProposalType paymDatePrinciple;
    CFMPaymentRequestId paymentRequestId;

    AmountCur paymAmountCur;
    TransDate paymDate;
    CashDiscDue cashDiscDue;

    NoYes postingDateOption_IT;
    NoYes paymOnDateFixed_IT;
    TransDate paymDate_IT;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        custVendTransOpen,
        ledgerJournalType,
        paymWeekDayFixed,
        paymDateFixed,
        minimumPaymDate,
        fromDate,
        toDate,
        paymCurrency,
        paymDatePrinciple,
        paymAmountCur,
        paymDate,
        cashDiscDue,
        postingDateOption_IT,
        paymOnDateFixed_IT,
        paymDate_IT,
        paymentRequestId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc(CustVendTransOpen _custVendTransOpen)
    {
        custVendTransOpen = _custVendTransOpen;

        changecompany(_custVendTransOpen.company())
        {
            if (postingDateOption_IT)
            {
                paymDate = this.calcPaymDate_IT();
            }
            else
            {
                paymDate = this.calcPaymDate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCustPaymDate_IT</Name>
				<Source><![CDATA[
    protected TransDate calcCustPaymDate_IT()
    {
        TransDate   transDate;
        TransDate   dueDate;
        TransDate   transDueOrCashDiscDate;
        TransDate   systemMinimumDate       = dateNull();
        CustVendTransOpen       custVendTransOpenCalc   = custVendTransOpen.data();
        CustVendTransOpenData   custVendTransOpenData   = CustVendTransOpenData::construct(custVendTransOpenCalc);

        dueDate = custVendTransOpenCalc.DueDate;
        if (dueDate < fromDate || dueDate > toDate)
        {
            return dateNull();
        }
        systemMinimumDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (!paymOnDateFixed_IT)
        {
            if (paymDate_IT)
            {
                transDate = paymDate_IT;
            }
            else
            {
                transDate = systemMinimumDate;
            }
        }
        else
        {
            transDate = this.calcPaymDate();
        }
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPaymCashDiscDate</Name>
				<Source><![CDATA[
    protected CashDiscdate calcPaymCashDiscDate()
    {
        CashDiscdate            cashDiscdate;
        CustVendTransCashDisc   custVendTransCashDisc   = CustVendTransCashDisc::getEmptyTableBuffer(custVendTransOpen.CustVendTransOpen::getModule());
        CustVendTransOpenData   custVendTransOpenData   = CustVendTransOpenData::construct(custVendTransOpen);
        CustVendTransOpen       custVendTransOpenUpdate = custVendTransOpen::getEmptyTableBuffer(custVendTransOpen.CustVendTransOpen::getModule());
        CustVendPaymModeTable   paymModeTable;
        DiscGraceDays           discGraceDays;
        boolean                 cashDiscOK;
        PaymDate                minimumPaymDateLocal    = minimumPaymDate;
        PaymDate                minimumSystemDate       = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        FromDate                fromDateLocal           = fromDate;
        ToDate                  toDateLocal             = toDate;
        boolean                 isLazyLoadedGraceDays;

        if (custVendTransOpen.UseCashDisc != UseCashDisc::Normal)
        {
            minimumPaymDateLocal    = custVendTransOpen.UseCashDisc == UseCashDisc::Always ? dateNull() : dateMax();
            minimumSystemDate       = minimumPaymDateLocal;
            fromDateLocal           = minimumPaymDateLocal;
            toDateLocal             = dateMax();
        }

        while select custVendTransCashDisc
            order by CashDiscDate
            where custVendTransCashDisc.RefTableId      == custVendTransOpen.TableId
               && custVendTransCashDisc.RefRecId        == custVendTransOpen.RecId
               && custVendTransCashDisc.CashDiscDate    >= fromDateLocal
               && custVendTransCashDisc.CashDiscDate    <= toDateLocal
               && custVendTransCashDisc.CashDiscAmount  != 0
        {
            if (!isLazyLoadedGraceDays)
            {
                paymModeTable = custVendTransOpenData.findPaymModeTable(false);
                discGraceDays = paymModeTable.DiscGraceDays;
                isLazyLoadedGraceDays = true;
            }

            cashDiscdate = custVendTransOpenData.sumPaymDate(custVendTransCashDisc.CashDiscDate,
                                                             paymWeekDayFixed,
                                                             paymDateFixed,
                                                             minimumPaymDateLocal,
                                                             minimumSystemDate);

            custVendTransOpenData.setCashDisc(cashDiscdate, discGraceDays);

            cashDiscdate = custVendTransOpenData.sumPaymDate(custVendTransOpen.CashDiscDate,
                                                             paymWeekDayFixed,
                                                             paymDateFixed,
                                                             minimumPaymDateLocal,
                                                             minimumSystemDate);

            cashDiscOK = custVendTransOpen.CashDiscDate                                     &&
                         custVendTransOpen.CashDiscDate  <= toDate                          &&
                         custVendTransOpen.CashDiscDate  >= cashDiscdate - discGraceDays    &&
                         custVendTransOpenData.remainAmountCashDisc(cashDiscdate) != 0;

            if (cashDiscOK)
            {
                cashDiscDue = CashDiscDue::CashDisc;

                ttsbegin;

                select firstonly forupdate custVendTransOpenUpdate
                    where custVendTransOpenUpdate.RecId == custVendTransOpen.RecId;

                custVendTransOpenUpdate.CashDiscDate        = custVendTransOpen.CashDiscDate;
                custVendTransOpenUpdate.PossibleCashDisc    = custVendTransOpen.PossibleCashDisc;
                custVendTransOpenUpdate.update();

                ttscommit;

                break;
            }
            else
            {
                cashDiscdate = dateNull();
            }
        }

        return cashDiscdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPaymDate</Name>
				<Source><![CDATA[
    protected TransDate calcPaymDate()
    {
        TransDate   transDate;

        if (paymentRequestId)
        {
            transDate = this.parmPaymentRequest().PaymentDate;
        }
        else
        {
            switch (paymDatePrinciple)
            {
                case CustVendCreatePaymProposalType::CashDisc:
                    transDate = this.calcPaymCashDiscDate();
                    break;

                case CustVendCreatePaymProposalType::DueDateAndCashDisc:
                    transDate = this.calcPaymCashDiscDate();
                    if (!transDate)
                    {
                        transDate = this.calcPaymDueDate();
                    }
                    break;

                case CustVendCreatePaymProposalType::DueDate:
                    transDate = this.calcPaymDueDate();
                    break;

                default:
                    break;
            }
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPaymDate_IT</Name>
				<Source><![CDATA[
    protected TransDate calcPaymDate_IT()
    {
        TransDate   transDate;

        switch (ledgerJournalType)
        {
            case LedgerJournalType::CustPayment,
                LedgerJournalType::CustBillOfExchangeProtest,
                LedgerJournalType::CustBillOfExchangeRedraw,
                LedgerJournalType::CustBillOfExchangeSettle,
                LedgerJournalType::CustBillOfExchangeDraw,
                LedgerJournalType::CustPaymRemittance :

                transDate = this.calcCustPaymDate_IT();
                break;

            case LedgerJournalType::Payment,
                LedgerJournalType::VendPaymRemittance,
                LedgerJournalType::VendPromissoryNoteDraw,
                LedgerJournalType::VendPromissoryNoteSettle :

                transDate = this.calcVendPaymDate_IT();
                break;

            default :
                transDate = this.calcPaymDate();
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPaymDueDate</Name>
				<Source><![CDATA[
    protected TransDate calcPaymDueDate()
    {
        TransDate               baseDate;
        TransDate               sumDate;
        CustVendTransOpen       custVendTransOpenCalc   = custVendTransOpen.data();
        CustVendTransOpenData   custVendTransOpenData   = CustVendTransOpenData::construct(custVendTransOpenCalc);
        TransDate               systemMinimumDate       = dateNull();

        if (!custVendTransOpenCalc.DueDate)
        {
            custVendTransOpenCalc.DueDate = custVendTransOpenCalc.TransDate;
        }

        switch (ledgerJournalType)
        {
            case LedgerJournalType::CustPayment,
                 LedgerJournalType::Payment :

                systemMinimumDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                baseDate = custVendTransOpenData.findDueDate();
                break;

            case LedgerJournalType::CustBillOfExchangeAccept,
                 LedgerJournalType::CustBillOfExchangeProtest,
                 LedgerJournalType::CustBillOfExchangeRedraw,
                 LedgerJournalType::CustBillOfExchangeSettle :
                baseDate = custVendTransOpenData.findDueDate();
                break;

            case LedgerJournalType::CustBillOfExchangeDraw :
                baseDate = custVendTransOpenCalc.DueDate;
                break;

            case LedgerJournalType::CustPaymRemittance :
                baseDate            = custVendTransOpenCalc.DueDate;
                if (!CustParameters::find().DueToTransDate)
                {
                    systemMinimumDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                }
                break;

            case LedgerJournalType::VendPromissoryNoteDraw,
                 LedgerJournalType::VendPromissoryNoteSettle,
                 LedgerJournalType::VendPaymRemittance :
                baseDate = custVendTransOpenData.findDueDate();
                break;
        }

        if (CustParameters::find().DueToTransDate)
        {
            if (ledgerJournalType == LedgerJournalType::CustBillOfExchangeProtest ||
                ledgerJournalType == LedgerJournalType::CustBillOfExchangeRedraw  ||
                ledgerJournalType == LedgerJournalType::CustPaymRemittance)
            {
                baseDate = custVendTransOpenCalc.DueDate;
            }
        }

        if (VendParameters::find().DueToTransDate)
        {
            if (ledgerJournalType == LedgerJournalType::VendPromissoryNoteDraw   ||
                ledgerJournalType == LedgerJournalType::VendPaymRemittance)
            {
                baseDate = custVendTransOpenCalc.DueDate;
            }
        }

        if (this.validateBaseDate(baseDate))
        {
            sumDate = custVendTransOpenData.sumPaymDate(baseDate,
                                                        paymWeekDayFixed,
                                                        paymDateFixed,
                                                        minimumPaymDate,
                                                        systemMinimumDate);
        }

        return sumDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBaseDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the base date.
    /// </summary>
    /// <param name = "_baseDate">The base date.</param>
    /// <returns>true when the base date is valid; otherwise false.</returns>
    protected boolean validateBaseDate(TransDate _baseDate)
    {
        boolean ret;

        if (_baseDate >= fromDate
            && _baseDate <= toDate)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcVendPaymDate_IT</Name>
				<Source><![CDATA[
    protected TransDate calcVendPaymDate_IT()
    {
        TransDate   transDate;
        TransDate   transDueOrCashDiscDate;
        TransDate   systemMinimumDate       = dateNull();
        CustVendTransOpen       custVendTransOpenCalc   = custVendTransOpen.data();
        CustVendTransOpenData   custVendTransOpenData   = CustVendTransOpenData::construct(custVendTransOpenCalc);

        switch (ledgerJournalType)
        {
            case LedgerJournalType::Payment:

                if (!paymOnDateFixed_IT)
                {
                    if (paymDate_IT)
                    {
                        transDate = paymDate_IT;
                    }
                    else
                    {
                        transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    }
                }
                else
                {
                    transDate = this.calcPaymDate();
                }

                break;

            case LedgerJournalType::VendPromissoryNoteSettle :

                if (paymDate_IT)
                {
                    transDate = paymDate_IT;
                }
                else
                {
                    transDate = this.calcPaymDate();
                }

                break;

            case LedgerJournalType::VendPaymRemittance,
                LedgerJournalType::VendPromissoryNoteDraw:

                systemMinimumDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                transDueOrCashDiscDate = max(custVendTransOpenData.findDueDate(), systemMinimumDate);

                if (transDueOrCashDiscDate > systemMinimumDate)
                {
                    if (!paymOnDateFixed_IT)
                    {
                        if (paymDate_IT)
                        {
                            transDate = paymDate_IT;
                        }
                        else
                        {
                            transDate = systemMinimumDate;
                        }
                    }
                    else
                    {
                        transDate = transDueOrCashDiscDate;
                    }
                }
                else
                {
                    if (paymDate_IT)
                    {
                        transDate = paymDate_IT;
                    }
                    else
                    {
                        transDate = transDueOrCashDiscDate;
                    }
                }
                break;
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        paymDatePrinciple   = CustVendCreatePaymProposalType::DueDate;
        cashDiscDue         = CashDiscDue::Due;
        toDate              = dateMax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>FromDate</c> parameter.
    /// </summary>
    /// <param name="_fromDate">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>FromDate</c> parameter.
    /// </returns>
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalType</Name>
				<Source><![CDATA[
    public LedgerJournalType parmLedgerJournalType(LedgerJournalType _ledgerJournalType = ledgerJournalType)
    {
        ledgerJournalType = _ledgerJournalType;

        return ledgerJournalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinimumPaymDate</Name>
				<Source><![CDATA[
    public TransDate parmMinimumPaymDate(TransDate _minimumPaymDate = minimumPaymDate)
    {
        minimumPaymDate = _minimumPaymDate;

        return minimumPaymDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymCurrency</Name>
				<Source><![CDATA[
    public CurrencyCode parmPaymCurrency(CurrencyCode _paymCurrency = paymCurrency)
    {
        paymCurrency = _paymCurrency;

        if (custVendTransOpen)
        {
            return paymCurrency ? paymCurrency : CustVendTransOpenData::construct(custVendTransOpen).custVendTrans().CurrencyCode;
        }

        return paymCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymDate_IT</Name>
				<Source><![CDATA[
    public TransDate parmPaymDate_IT(TransDate _paymDate_IT = paymDate_IT)
    {
        paymDate_IT = _paymDate_IT;

        return paymDate_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymDateFixed</Name>
				<Source><![CDATA[
    public TransDate parmPaymDateFixed(TransDate _paymDateFixed = paymDateFixed)
    {
        paymDateFixed = _paymDateFixed;

        return paymDateFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymDatePrinciple</Name>
				<Source><![CDATA[
    public CustVendCreatePaymProposalType parmPaymDatePrinciple(CustVendCreatePaymProposalType _paymDatePrinciple = paymDatePrinciple)
    {
        paymDatePrinciple = _paymDatePrinciple;

        return paymDatePrinciple;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymOnDateFixed_IT</Name>
				<Source><![CDATA[
    public NoYes parmPaymOnDateFixed_IT(NoYes _paymOnDateFixed_IT  = paymOnDateFixed_IT )
    {
        paymOnDateFixed_IT  = _paymOnDateFixed_IT ;

        return paymOnDateFixed_IT ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymWeekDayFixed</Name>
				<Source><![CDATA[
    public WeekDays parmPaymWeekDayFixed(WeekDays _paymWeekDayFixed = paymWeekDayFixed)
    {
        paymWeekDayFixed = _paymWeekDayFixed;

        return paymWeekDayFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingDateOption_IT</Name>
				<Source><![CDATA[
    public NoYes parmPostingDateOption_IT(NoYes _postingDateOption_IT = postingDateOption_IT)
    {
        postingDateOption_IT = _postingDateOption_IT;

        return postingDateOption_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ToDate</c> parameter.
    /// </summary>
    /// <param name="_toDate">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>ToDate</c> parameter.
    /// </returns>
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymAmountInvoiceCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the calculated payment amount in the currency of the invoice to pay.
    /// </summary>
    /// <returns>
    ///    The payment amount.
    /// </returns>
    public AmountCur paymAmountInvoiceCur()
    {
        AmountCur               amountCur;
        CustVendTransOpenData   custVendTransOpenData;
        // <GEERU>
        VendTransOpen           vendTransOpen;
        #ISOCountryRegionCodes
        // </GEERU>
        if (CFMParameters::isPaymentRequestsEnabled() && this.paymentRequestId)
        {
            amountCur = -this.parmPaymentRequest().amountToPay(this.paymDate());
        }
        else
        {
            custVendTransOpenData = CustVendTransOpenData::construct(custVendTransOpen);

            if (!this.paymDate())
            {
                // the paymDate has not been calculated or failed to calculate, return full transaction amount
                amountCur = custVendTransOpenData.findRemainingAmountCur();
            }
            else
            {
                // use the payment date to determine the amount of discount to be taken
                amountCur = custVendTransOpenData.remainAmountCashDisc(paymDate, custVendTransOpenData.findPaymModeTable(false).DiscGraceDays);
            }

            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
                custVendTransOpen.TableId == tableNum(VendTransOpen))
            {
                vendTransOpen = custVendTransOpen;
                amountCur -= vendTransOpen.vatTaxAgentAmount_RU();
            }
            // </GEERU>
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the calculated payment date.
    /// </summary>
    /// <returns>
    ///    The calculated payment date.
    /// </returns>
    public TransDate paymDate()
    {
        return paymDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendPaymProposalCalcPaym construct(LedgerJournalType  _ledgerJournalType)
    {
        CustVendPaymProposalCalcPaym    custVendPaymProposalCalcPaym;

        custVendPaymProposalCalcPaym = new CustVendPaymProposalCalcPaym();
        custVendPaymProposalCalcPaym.parmLedgerJournalType(_ledgerJournalType);

        return custVendPaymProposalCalcPaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = conPeek(_packedClass, 1);

        switch (version)
       {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;

            case 1:
                [version,
                custVendTransOpen,
                ledgerJournalType,
                paymWeekDayFixed,
                paymDateFixed,
                minimumPaymDate,
                fromDate,
                toDate,
                paymCurrency,
                paymDatePrinciple,
                paymAmountCur,
                paymDate,
                cashDiscDue,
                postingDateOption_IT,
                paymOnDateFixed_IT,
                paymDate_IT] = _packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentRequest</Name>
				<Source><![CDATA[
    public CFMPaymentRequestTable parmPaymentRequest(CFMPaymentRequestTable _paymentRequestTable = CFMPaymentRequestTable::find(paymentRequestId))
    {
        paymentRequestId = _paymentRequestTable.PaymentRequestId;

        return CFMPaymentRequestTable::find(paymentRequestId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>